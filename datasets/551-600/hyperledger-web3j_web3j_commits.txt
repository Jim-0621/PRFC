File: crypto/src/main/java/org/web3j/crypto/TransactionUtils.java
Patch:
@@ -77,9 +77,9 @@ public static String generateTransactionHashHexEncoded(
      * @param v recovery identifier
      * @return Chain id
      */
-    public static long deriveChainId(long v) {
+    public static Long deriveChainId(long v) {
         if (v == LOWER_REAL_V || v == (LOWER_REAL_V + 1)) {
-            return 0L;
+            return null;
         }
         return (v - CHAIN_ID_INC) / 2;
     }

File: codegen/src/test/resources/solidity/abifuncs/build/java/AbiFuncs.java
Patch:
@@ -19,7 +19,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version none.
  */

File: codegen/src/test/resources/solidity/arrayofstructandstruct/build/java/ArrayOfStructAndStruct.java
Patch:
@@ -23,7 +23,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version none.
  */

File: codegen/src/test/resources/solidity/arrayofstructclassgeneration/build/java/ArrayOfStructClassGeneration.java
Patch:
@@ -23,7 +23,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version none.
  */

File: codegen/src/test/resources/solidity/arraysinstruct/build/java/ArraysInStruct.java
Patch:
@@ -33,7 +33,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version none.
  */

File: codegen/src/test/resources/solidity/eventparameters/build/java/EventParameters.java
Patch:
@@ -31,7 +31,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version none.
  */

File: codegen/src/test/resources/solidity/metacoin/build/java/MetaCoin.java
Patch:
@@ -31,7 +31,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version none.
  */

File: codegen/src/test/resources/solidity/onlyinarraystruct/build/java/OnlyInArrayStruct.java
Patch:
@@ -24,7 +24,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version none.
  */

File: codegen/src/test/resources/solidity/sameinnerstructname/build/java/SameInnerStructName.java
Patch:
@@ -23,7 +23,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version none.
  */

File: codegen/src/test/resources/solidity/staticarrayofstructsinstruct/build/java/StaticArrayOfStructsInStruct.java
Patch:
@@ -27,7 +27,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version none.
  */

File: core/src/main/java/org/web3j/protocol/deserializer/KeepAsJsonDeserialzier.java
Patch:
@@ -15,16 +15,14 @@
 import java.io.IOException;
 
 import com.fasterxml.jackson.core.JsonParser;
-import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.core.TreeNode;
 import com.fasterxml.jackson.databind.DeserializationContext;
 import com.fasterxml.jackson.databind.JsonDeserializer;
 
 public class KeepAsJsonDeserialzier extends JsonDeserializer<String> {
 
     @Override
-    public String deserialize(JsonParser jp, DeserializationContext ctxt)
-            throws IOException {
+    public String deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {
 
         TreeNode tree = jp.getCodec().readTree(jp);
         return tree.toString();

File: core/src/main/java/org/web3j/protocol/websocket/WebSocketService.java
Patch:
@@ -374,8 +374,7 @@ private void sendReplyToListener(WebSocketRequest request, Object reply) {
         request.getOnReply().complete(reply);
     }
 
-    private void sendExceptionToListener(
-            String replyStr, WebSocketRequest request, Exception e) {
+    private void sendExceptionToListener(String replyStr, WebSocketRequest request, Exception e) {
         request.getOnReply()
                 .completeExceptionally(
                         new IOException(

File: core/src/main/java/org/web3j/tx/response/EmptyTransactionReceipt.java
Patch:
@@ -28,7 +28,7 @@ public EmptyTransactionReceipt(String transactionHash) {
         super();
         this.setTransactionHash(transactionHash);
     }
-    
+
     private UnsupportedOperationException unsupportedOperation() {
         return new UnsupportedOperationException(
                 "Empty transaction receipt, only transaction hash is available");

File: core/src/test/java/org/web3j/protocol/core/BatchTest.java
Patch:
@@ -86,8 +86,8 @@ void testBatchResponse() throws Exception {
         assertTrue(response.getResponses().get(1) instanceof Web3Sha3);
         Web3Sha3 web3Sha3 = (Web3Sha3) response.getResponses().get(1);
         assertEquals(
-			"0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad",
-			web3Sha3.getResult());
+                "0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad",
+                web3Sha3.getResult());
 
         assertTrue(response.getResponses().get(2) instanceof NetVersion);
         NetVersion netVersion = (NetVersion) response.getResponses().get(2);

File: core/src/test/java/org/web3j/protocol/core/filters/FilterTester.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
-import java.util.stream.Collectors;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import io.reactivex.Flowable;

File: core/src/test/java/org/web3j/tx/FastRawTransactionManagerTest.java
Patch:
@@ -12,7 +12,6 @@
  */
 package org.web3j.tx;
 
-import java.io.IOException;
 import java.math.BigInteger;
 
 import org.junit.jupiter.api.BeforeEach;

File: codegen/src/test/resources/solidity/abifuncs/build/java/AbiFuncs.java
Patch:
@@ -19,7 +19,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version none.
  */

File: codegen/src/test/resources/solidity/arrayofstructandstruct/build/java/ArrayOfStructAndStruct.java
Patch:
@@ -23,7 +23,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version none.
  */

File: codegen/src/test/resources/solidity/arrayofstructclassgeneration/build/java/ArrayOfStructClassGeneration.java
Patch:
@@ -23,7 +23,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version none.
  */

File: codegen/src/test/resources/solidity/arraysinstruct/build/java/ArraysInStruct.java
Patch:
@@ -33,7 +33,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version none.
  */

File: codegen/src/test/resources/solidity/eventparameters/build/java/EventParameters.java
Patch:
@@ -31,7 +31,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version none.
  */

File: codegen/src/test/resources/solidity/metacoin/build/java/MetaCoin.java
Patch:
@@ -31,7 +31,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version none.
  */

File: codegen/src/test/resources/solidity/onlyinarraystruct/build/java/OnlyInArrayStruct.java
Patch:
@@ -24,7 +24,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version none.
  */

File: codegen/src/test/resources/solidity/sameinnerstructname/build/java/SameInnerStructName.java
Patch:
@@ -23,7 +23,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version none.
  */

File: codegen/src/test/resources/solidity/staticarrayofstructsinstruct/build/java/StaticArrayOfStructsInStruct.java
Patch:
@@ -27,7 +27,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version none.
  */

File: core/src/main/java/org/web3j/protocol/deserializer/KeepAsJsonDeserialzier.java
Patch:
@@ -15,16 +15,14 @@
 import java.io.IOException;
 
 import com.fasterxml.jackson.core.JsonParser;
-import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.core.TreeNode;
 import com.fasterxml.jackson.databind.DeserializationContext;
 import com.fasterxml.jackson.databind.JsonDeserializer;
 
 public class KeepAsJsonDeserialzier extends JsonDeserializer<String> {
 
     @Override
-    public String deserialize(JsonParser jp, DeserializationContext ctxt)
-            throws IOException {
+    public String deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {
 
         TreeNode tree = jp.getCodec().readTree(jp);
         return tree.toString();

File: core/src/main/java/org/web3j/protocol/websocket/WebSocketService.java
Patch:
@@ -374,8 +374,7 @@ private void sendReplyToListener(WebSocketRequest request, Object reply) {
         request.getOnReply().complete(reply);
     }
 
-    private void sendExceptionToListener(
-            String replyStr, WebSocketRequest request, Exception e) {
+    private void sendExceptionToListener(String replyStr, WebSocketRequest request, Exception e) {
         request.getOnReply()
                 .completeExceptionally(
                         new IOException(

File: core/src/main/java/org/web3j/tx/response/EmptyTransactionReceipt.java
Patch:
@@ -28,7 +28,7 @@ public EmptyTransactionReceipt(String transactionHash) {
         super();
         this.setTransactionHash(transactionHash);
     }
-    
+
     private UnsupportedOperationException unsupportedOperation() {
         return new UnsupportedOperationException(
                 "Empty transaction receipt, only transaction hash is available");

File: core/src/test/java/org/web3j/protocol/core/BatchTest.java
Patch:
@@ -86,8 +86,8 @@ void testBatchResponse() throws Exception {
         assertTrue(response.getResponses().get(1) instanceof Web3Sha3);
         Web3Sha3 web3Sha3 = (Web3Sha3) response.getResponses().get(1);
         assertEquals(
-			"0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad",
-			web3Sha3.getResult());
+                "0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad",
+                web3Sha3.getResult());
 
         assertTrue(response.getResponses().get(2) instanceof NetVersion);
         NetVersion netVersion = (NetVersion) response.getResponses().get(2);

File: core/src/test/java/org/web3j/protocol/core/filters/FilterTester.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
-import java.util.stream.Collectors;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import io.reactivex.Flowable;

File: core/src/test/java/org/web3j/tx/FastRawTransactionManagerTest.java
Patch:
@@ -12,7 +12,6 @@
  */
 package org.web3j.tx;
 
-import java.io.IOException;
 import java.math.BigInteger;
 
 import org.junit.jupiter.api.BeforeEach;

File: core/src/main/java/org/web3j/protocol/websocket/WebSocketService.java
Patch:
@@ -299,7 +299,7 @@ private void processRequestReply(String replyStr, JsonNode replyJson) throws IOE
             }
 
             sendReplyToListener(request, reply);
-        } catch (IllegalArgumentException e) {
+        } catch (Exception e) {
             sendExceptionToListener(replyStr, request, e);
         }
     }
@@ -322,7 +322,7 @@ private void processBatchRequestReply(String replyStr, ArrayNode replyJson) thro
             }
 
             sendReplyToListener(webSocketRequests, new BatchResponse(requests, responses));
-        } catch (IllegalArgumentException e) {
+        } catch (Exception e) {
             sendExceptionToListener(replyStr, webSocketRequests, e);
         }
     }
@@ -375,7 +375,7 @@ private void sendReplyToListener(WebSocketRequest request, Object reply) {
     }
 
     private void sendExceptionToListener(
-            String replyStr, WebSocketRequest request, IllegalArgumentException e) {
+            String replyStr, WebSocketRequest request, Exception e) {
         request.getOnReply()
                 .completeExceptionally(
                         new IOException(

File: core/src/main/java/org/web3j/crypto/Wallet.java
Patch:
@@ -72,6 +72,8 @@ public class Wallet {
     static final String AES_128_CTR = "pbkdf2";
     static final String SCRYPT = "scrypt";
 
+    private Wallet() {}
+
     public static WalletFile create(String password, ECKeyPair ecKeyPair, int n, int p)
             throws CipherException {
 

File: core/src/main/java/org/web3j/ens/Contracts.java
Patch:
@@ -16,7 +16,6 @@
 
 /** ENS registry contract addresses. */
 public class Contracts {
-
     public static final String MAINNET = "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
     public static final String ROPSTEN = "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
     public static final String RINKEBY = "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
@@ -26,6 +25,8 @@ public class Contracts {
     public static final String LINEA = "0x50130b669B28C339991d8676FA73CF122a121267";
     public static final String LINEA_SEPOLIA = "0x5B2636F0f2137B4aE722C01dd5122D7d3e9541f7";
 
+    private Contracts() {}
+
     public static String resolveRegistryContract(String chainId) {
         final Long chainIdLong = Long.parseLong(chainId);
         if (chainIdLong.equals(ChainIdLong.MAINNET)) {

File: core/src/main/java/org/web3j/ens/NameHash.java
Patch:
@@ -32,6 +32,8 @@ public static byte[] nameHashAsBytes(String ensName) {
         return Numeric.hexStringToByteArray(nameHash(ensName));
     }
 
+    private NameHash() {}
+
     public static String nameHash(String ensName) {
         String normalisedEnsName = normalise(ensName);
         return Numeric.toHexString(nameHash(normalisedEnsName.split("\\.")));

File: core/src/main/java/org/web3j/ens/contracts/generated/OffchainResolverContract.java
Patch:
@@ -60,7 +60,6 @@ public class OffchainResolverContract extends PublicResolver {
 
     public static final Event NEWSIGNERS_EVENT = new Event("NewSigners",
             Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
-    ;
 
     public OffchainResolverContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
         super(contractAddress, web3j, credentials, gasPrice, gasLimit);
@@ -80,7 +79,7 @@ public OffchainResolverContract(String contractAddress, Web3j web3j, Transaction
 
     public List<NewSignersEventResponse> getNewSignersEvents(TransactionReceipt transactionReceipt) {
         List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWSIGNERS_EVENT, transactionReceipt);
-        ArrayList<NewSignersEventResponse> responses = new ArrayList<NewSignersEventResponse>(valueList.size());
+        ArrayList<NewSignersEventResponse> responses = new ArrayList<>(valueList.size());
         for (Contract.EventValuesWithLog eventValues : valueList) {
             NewSignersEventResponse typedResponse = new NewSignersEventResponse();
             typedResponse.log = eventValues.getLog();

File: core/src/main/java/org/web3j/protocol/admin/methods/response/TxPoolContent.java
Patch:
@@ -52,14 +52,14 @@ public List<Transaction> getPendingTransactions() {
             return pending.values().stream()
                     .map(Map::values)
                     .flatMap(Collection::stream)
-                    .collect(Collectors.toList());
+                    .toList();
         }
 
         public List<Transaction> getQueuedTransactions() {
             return queued.values().stream()
                     .map(Map::values)
                     .flatMap(Collection::stream)
-                    .collect(Collectors.toList());
+                    .toList();
         }
 
         private static <K, V> Map<K, V> immutableCopy(Map<K, V> map, Function<V, V> valueMapper) {

File: core/src/main/java/org/web3j/protocol/core/methods/response/AbiDefinition.java
Patch:
@@ -200,7 +200,7 @@ public int hashCode() {
     }
 
     public static class NamedType {
-        private static String DEFAULT_INTERNAL_TYPE = "";
+        private static final String DEFAULT_INTERNAL_TYPE = "";
 
         private String name;
         private String type;
@@ -348,6 +348,6 @@ public int hashCode() {
     }
 
     private static List<NamedType> clone(final List<NamedType> from) {
-        return from.stream().map(NamedType::new).collect(Collectors.toList());
+        return from.stream().map(NamedType::new).toList();
     }
 }

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthCall.java
Patch:
@@ -27,7 +27,7 @@
 public class EthCall extends Response<String> {
 
     // Numeric.toHexString(Hash.sha3("Error(string)".getBytes())).substring(0, 10)
-    private static final String errorMethodId = "0x08c379a0";
+    private static final String ERROR_METHOD_ID = "0x08c379a0";
 
     @SuppressWarnings("unchecked")
     private static final List<TypeReference<Type>> revertReasonType =
@@ -52,12 +52,12 @@ public boolean reverts() {
     }
 
     private boolean isErrorInResult() {
-        return getValue() != null && getValue().startsWith(errorMethodId);
+        return getValue() != null && getValue().startsWith(ERROR_METHOD_ID);
     }
 
     public String getRevertReason() {
         if (isErrorInResult()) {
-            String hexRevertReason = getValue().substring(errorMethodId.length());
+            String hexRevertReason = getValue().substring(ERROR_METHOD_ID.length());
             List<Type> decoded = FunctionReturnDecoder.decode(hexRevertReason, revertReasonType);
             Utf8String decodedRevertReason = (Utf8String) decoded.get(0);
             return decodedRevertReason.getValue();

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthFeeHistory.java
Patch:
@@ -78,8 +78,8 @@ public List<List<BigInteger>> getReward() {
                             rewardPercentile ->
                                     rewardPercentile.stream()
                                             .map(Numeric::decodeQuantity)
-                                            .collect(Collectors.toList()))
-                    .collect(Collectors.toList());
+                                            .toList())
+                    .toList();
         }
 
         public void setReward(List<List<String>> reward) {
@@ -91,7 +91,7 @@ public List<List<String>> getRewardRaw() {
         }
 
         public List<BigInteger> getBaseFeePerGas() {
-            return baseFeePerGas.stream().map(Numeric::decodeQuantity).collect(Collectors.toList());
+            return baseFeePerGas.stream().map(Numeric::decodeQuantity).toList();
         }
 
         public void setBaseFeePerGas(List<String> baseFeePerGas) {

File: core/src/main/java/org/web3j/protocol/deserializer/KeepAsJsonDeserialzier.java
Patch:
@@ -24,7 +24,7 @@ public class KeepAsJsonDeserialzier extends JsonDeserializer<String> {
 
     @Override
     public String deserialize(JsonParser jp, DeserializationContext ctxt)
-            throws IOException, JsonProcessingException {
+            throws IOException {
 
         TreeNode tree = jp.getCodec().readTree(jp);
         return tree.toString();

File: core/src/main/java/org/web3j/tx/ChainId.java
Patch:
@@ -28,4 +28,6 @@ public class ChainId {
     public static final byte KOVAN = 42;
     public static final byte ETHEREUM_CLASSIC_MAINNET = 61;
     public static final byte ETHEREUM_CLASSIC_TESTNET = 62;
+
+    private ChainId() {}
 }

File: core/src/main/java/org/web3j/tx/ChainIdLong.java
Patch:
@@ -28,4 +28,6 @@ public class ChainIdLong {
     public static final long ETHEREUM_CLASSIC_TESTNET = 62;
     public static final long LINEA = 59144;
     public static final long LINEA_SEPOLIA = 59141;
+
+    private ChainIdLong() {}
 }

File: core/src/main/java/org/web3j/tx/Contract.java
Patch:
@@ -791,7 +791,7 @@ public static <T extends Contract> RemoteCall<T> deployRemoteCall(
     public static EventValues staticExtractEventParameters(Event event, Log log) {
         final List<String> topics = log.getTopics();
         String encodedEventSignature = EventEncoder.encode(event);
-        if (topics == null || topics.size() == 0 || !topics.get(0).equals(encodedEventSignature)) {
+        if (topics == null || topics.isEmpty() || !topics.get(0).equals(encodedEventSignature)) {
             return null;
         }
 
@@ -839,15 +839,15 @@ protected List<EventValuesWithLog> extractEventParametersWithLog(
         return transactionReceipt.getLogs().stream()
                 .map(log -> extractEventParametersWithLog(event, log))
                 .filter(Objects::nonNull)
-                .collect(Collectors.toList());
+                .toList();
     }
 
     protected static List<EventValuesWithLog> staticExtractEventParametersWithLog(
             Event event, TransactionReceipt transactionReceipt) {
         return transactionReceipt.getLogs().stream()
                 .map(log -> staticExtractEventParametersWithLog(event, log))
                 .filter(Objects::nonNull)
-                .collect(Collectors.toList());
+                .toList();
     }
 
     /**

File: core/src/main/java/org/web3j/tx/exceptions/TxHashMismatchException.java
Patch:
@@ -15,8 +15,8 @@
 import java.io.IOException;
 
 public class TxHashMismatchException extends IOException {
-    private String txHashLocal;
-    private String txHashRemote;
+    private final String txHashLocal;
+    private final String txHashRemote;
 
     public TxHashMismatchException(String txHashLocal, String txHashRemote) {
         this.txHashLocal = txHashLocal;

File: core/src/main/java/org/web3j/utils/Async.java
Patch:
@@ -22,6 +22,8 @@
 /** Async task facilitation. */
 public class Async {
 
+    private Async() {}
+
     private static final ExecutorService executor = Executors.newCachedThreadPool();
 
     static {

File: core/src/test/java/org/web3j/crypto/WalletFileTest.java
Patch:
@@ -19,10 +19,10 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
-public class WalletFileTest {
+class WalletFileTest {
 
     @Test
-    public void equalsAndHashCodeTest() throws IOException {
+    void equalsAndHashCodeTest() throws IOException {
 
         final String AES_128_CTR =
                 "{\n"

File: core/src/test/java/org/web3j/ens/ContractsTest.java
Patch:
@@ -28,10 +28,10 @@
 import static org.web3j.ens.Contracts.resolveRegistryContract;
 
 @SuppressWarnings("deprecation")
-public class ContractsTest {
+class ContractsTest {
 
     @Test
-    public void testResolveRegistryContract() {
+    void testResolveRegistryContract() {
         assertEquals(resolveRegistryContract(ChainIdLong.MAINNET + ""), (MAINNET));
         assertEquals(resolveRegistryContract(ChainIdLong.ROPSTEN + ""), (ROPSTEN));
         assertEquals(resolveRegistryContract(ChainIdLong.RINKEBY + ""), (RINKEBY));
@@ -42,7 +42,7 @@ public void testResolveRegistryContract() {
     }
 
     @Test
-    public void testResolveRegistryContractInvalid() {
+    void testResolveRegistryContractInvalid() {
         assertThrows(
                 EnsResolutionException.class, () -> resolveRegistryContract(ChainIdLong.NONE + ""));
     }

File: core/src/test/java/org/web3j/protocol/core/filters/BlockFilterTest.java
Patch:
@@ -19,10 +19,10 @@
 import org.web3j.protocol.core.methods.response.EthLog;
 
 @ExtendWith(MockitoExtension.class)
-public class BlockFilterTest extends FilterTester {
+class BlockFilterTest extends FilterTester {
 
     @Test
-    public void testBlockFilter() throws Exception {
+    void testBlockFilter() throws Exception {
 
         EthLog ethLog =
                 objectMapper.readValue(

File: core/src/test/java/org/web3j/protocol/core/filters/FilterTester.java
Patch:
@@ -118,6 +118,6 @@ List createExpected(EthLog ethLog) {
             fail("Results cannot be empty");
         }
 
-        return ethLog.getLogs().stream().map(t -> t.get()).collect(Collectors.toList());
+        return ethLog.getLogs().stream().map(EthLog.LogResult::get).toList();
     }
 }

File: core/src/test/java/org/web3j/protocol/core/filters/LogFilterTest.java
Patch:
@@ -17,10 +17,10 @@
 import org.web3j.protocol.core.methods.request.EthFilter;
 import org.web3j.protocol.core.methods.response.EthLog;
 
-public class LogFilterTest extends FilterTester {
+class LogFilterTest extends FilterTester {
 
     @Test
-    public void testLogFilter() throws Exception {
+    void testLogFilter() throws Exception {
 
         EthLog ethLog =
                 objectMapper.readValue(

File: core/src/test/java/org/web3j/protocol/core/filters/PendingTransactionFilterTest.java
Patch:
@@ -19,10 +19,10 @@
 import org.web3j.protocol.core.methods.response.EthLog;
 
 @ExtendWith(MockitoExtension.class)
-public class PendingTransactionFilterTest extends FilterTester {
+class PendingTransactionFilterTest extends FilterTester {
 
     @Test
-    public void testPendingTransactionFilter() throws Exception {
+    void testPendingTransactionFilter() throws Exception {
         EthLog ethLog =
                 objectMapper.readValue(
                         "{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":[\"0x31c2342b1e0b8ffda1507fbffddf213c4b3c1e819ff6a84b943faabb0ebf2403\",\"0xccc0d2e07c1febcaca0c3341c4e1268204b06fefa4bb0c8c0d693d8e581c82da\"]}",

File: core/src/test/java/org/web3j/protocol/ipc/IpcServiceTest.java
Patch:
@@ -24,7 +24,7 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-public class IpcServiceTest {
+class IpcServiceTest {
 
     private IpcService ipcService;
     private IOFacade ioFacade;
@@ -42,7 +42,7 @@ protected IOFacade getIO() {
     }
 
     @Test
-    public void testSend() throws IOException {
+    void testSend() throws IOException {
         when(ioFacade.read())
                 .thenReturn(
                         "{\"jsonrpc\":\"2.0\",\"id\":1,"

File: core/src/test/java/org/web3j/tx/FastRawTransactionManagerTest.java
Patch:
@@ -24,7 +24,7 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.mockito.Mockito.mock;
 
-public class FastRawTransactionManagerTest {
+class FastRawTransactionManagerTest {
     private Web3j web3j;
     private FastRawTransactionManager fastRawTransactionManager;
 
@@ -35,7 +35,7 @@ public void setUp() throws Exception {
     }
 
     @Test
-    void clearNonce() throws IOException {
+    void clearNonce() {
         fastRawTransactionManager.setNonce(BigInteger.valueOf(42));
 
         fastRawTransactionManager.clearNonce();

File: core/src/test/java/org/web3j/tx/RawTransactionManagerTest.java
Patch:
@@ -39,7 +39,7 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
-public class RawTransactionManagerTest extends ManagedTransactionTester {
+class RawTransactionManagerTest extends ManagedTransactionTester {
 
     // Get From org.web3j.crypto.TransactionDecoderTest.testDecodingSigned
     private static final String TX_SIGN_FORMAT_DER_HEX =
@@ -48,7 +48,7 @@ public class RawTransactionManagerTest extends ManagedTransactionTester {
             "0xf85580010a840add5355887fffffffffffffff801ca046360b50498ddf5566551ce1ce69c46c565f1f478bb0ee680caf31fbc08ab727a01b2f1432de16d110407d544f519fc91b84c8e16d3b6ec899592d486a94974cd0";
 
     @Test
-    public void testTxHashMismatch() throws IOException {
+    void testTxHashMismatch() throws IOException {
         TransactionReceipt transactionReceipt = prepareTransfer();
         prepareTransaction(transactionReceipt);
 
@@ -61,7 +61,7 @@ public void testTxHashMismatch() throws IOException {
     }
 
     @Test
-    public void testSignRawTxWithHSM() throws IOException {
+    void testSignRawTxWithHSM() throws IOException {
         TransactionReceipt transactionReceipt = prepareTransfer();
         prepareTransaction(transactionReceipt);
 

File: core/src/test/java/org/web3j/tx/TransferTest.java
Patch:
@@ -25,7 +25,7 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 
-public class TransferTest extends ManagedTransactionTester {
+class TransferTest extends ManagedTransactionTester {
 
     protected TransactionReceipt transactionReceipt;
 
@@ -37,14 +37,14 @@ public void setUp() throws Exception {
     }
 
     @Test
-    public void testSendFunds() throws Exception {
+    void testSendFunds() throws Exception {
         assertEquals(
                 sendFunds(SampleKeys.CREDENTIALS, ADDRESS, BigDecimal.TEN, Convert.Unit.ETHER),
                 (transactionReceipt));
     }
 
     @Test
-    public void testTransferInvalidValue() {
+    void testTransferInvalidValue() {
 
         assertThrows(
                 UnsupportedOperationException.class,

File: core/src/test/java/org/web3j/tx/response/PollingTransactionReceiptProcessorTest.java
Patch:
@@ -31,7 +31,7 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
-public class PollingTransactionReceiptProcessorTest {
+class PollingTransactionReceiptProcessorTest {
     private static final String TRANSACTION_HASH = "0x00";
     private Web3j web3j;
     private long sleepDuration;
@@ -47,7 +47,7 @@ public void setUp() {
     }
 
     @Test
-    public void returnsTransactionReceiptWhenItIsAvailableInstantly() throws Exception {
+    void returnsTransactionReceiptWhenItIsAvailableInstantly() throws Exception {
         TransactionReceipt transactionReceipt = new TransactionReceipt();
         doReturn(requestReturning(response(transactionReceipt)))
                 .when(web3j)
@@ -59,7 +59,7 @@ public void returnsTransactionReceiptWhenItIsAvailableInstantly() throws Excepti
     }
 
     @Test
-    public void throwsTransactionExceptionWhenReceiptIsNotAvailableInTime() throws Exception {
+    void throwsTransactionExceptionWhenReceiptIsNotAvailableInTime() throws Exception {
         doReturn(requestReturning(response(null)))
                 .when(web3j)
                 .ethGetTransactionReceipt(TRANSACTION_HASH);

File: core/src/test/java/org/web3j/utils/AsyncTest.java
Patch:
@@ -19,15 +19,15 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 
-public class AsyncTest {
+class AsyncTest {
 
     @Test
-    public void testRun() throws Exception {
+    void testRun() throws Exception {
         assertEquals("", Async.run(() -> "").get());
     }
 
     @Test
-    public void testRunException() {
+    void testRunException() {
 
         assertThrows(
                 ExecutionException.class,

File: core/src/test/java/org/web3j/utils/VersionTest.java
Patch:
@@ -21,15 +21,15 @@
 import static org.web3j.utils.Version.getTimestamp;
 import static org.web3j.utils.Version.getVersion;
 
-public class VersionTest {
+class VersionTest {
 
     @Test
-    public void testGetVersion() throws IOException {
+    void testGetVersion() throws IOException {
         assertEquals(getVersion(), (DEFAULT));
     }
 
     @Test
-    public void testGetTimestamp() throws IOException {
+    void testGetTimestamp() throws IOException {
         assertEquals(getTimestamp(), ("2017-01-31 01:21:09.843 UTC"));
     }
 }

File: crypto/src/main/java/org/web3j/crypto/BlobUtils.java
Patch:
@@ -26,7 +26,8 @@ public class BlobUtils {
     }
 
     private static void loadTrustedSetupParameters() {
-        CKZG4844JNI.loadTrustedSetupFromResource(BlobUtils.trustedSetupFilePath, BlobUtils.class,0);
+        CKZG4844JNI.loadTrustedSetupFromResource(
+                BlobUtils.trustedSetupFilePath, BlobUtils.class, 0);
     }
 
     public static Bytes getCommitment(Blob blobData) {

File: abi/src/main/java/org/web3j/abi/Utils.java
Patch:
@@ -92,7 +92,7 @@ public static String getStructType(Class type) {
     public static TypeReference<DynamicArray> getDynamicArrayTypeReference(Class parameter) {
         return new TypeReference<DynamicArray>() {
             @Override
-            TypeReference getSubTypeReference() {
+            public TypeReference getSubTypeReference() {
                 return TypeReference.create(parameter);
             }
         };

File: abi/src/main/java/org/web3j/abi/datatypes/DynamicStruct.java
Patch:
@@ -18,7 +18,7 @@
 
 public class DynamicStruct extends DynamicArray<Type> implements StructType {
 
-    private final List<Class<Type>> itemTypes = new ArrayList<>();
+    public final List<Class<Type>> itemTypes = new ArrayList<>();
 
     public DynamicStruct(List<Type> values) {
         this(Type.class, values);

File: core/src/main/java/org/web3j/protocol/core/methods/response/AbiDefinition.java
Patch:
@@ -277,9 +277,9 @@ public void setComponents(final List<NamedType> components) {
 
         public String structIdentifier() {
             return ((internalType == null ? type : internalType.isEmpty() ? type : internalType)
-                            + components.stream()
-                                    .map(NamedType::structIdentifier)
-                                    .collect(Collectors.joining()));
+                    + components.stream()
+                            .map(NamedType::structIdentifier)
+                            .collect(Collectors.joining()));
         }
 
         public int nestedness() {

File: abi/src/test/java/org/web3j/abi/DefaultFunctionEncoderTest.java
Patch:
@@ -60,7 +60,7 @@ public void testBuildMethodSignatureWithStructWithArray() {
     }
 
     @Test
-    public void testArrayOfDynamicStruct() throws ClassNotFoundException {
+    public void testBuildEventOfArrayOfDynamicStruct() throws ClassNotFoundException {
         // The full event signature is
         //
         //     Stamp3(uint256 indexed stampId, address indexed caller, bool odd,

File: abi/src/main/java/org/web3j/abi/Utils.java
Patch:
@@ -92,7 +92,7 @@ public static String getStructType(Class type) {
     public static TypeReference<DynamicArray> getDynamicArrayTypeReference(Class parameter) {
         return new TypeReference<DynamicArray>() {
             @Override
-            TypeReference getSubTypeReference() {
+            public TypeReference getSubTypeReference() {
                 return TypeReference.create(parameter);
             }
         };

File: abi/src/main/java/org/web3j/abi/datatypes/DynamicStruct.java
Patch:
@@ -18,7 +18,7 @@
 
 public class DynamicStruct extends DynamicArray<Type> implements StructType {
 
-    private final List<Class<Type>> itemTypes = new ArrayList<>();
+    public final List<Class<Type>> itemTypes = new ArrayList<>();
 
     public DynamicStruct(List<Type> values) {
         this(Type.class, values);

File: abi/src/main/java/org/web3j/abi/TypeDecoder.java
Patch:
@@ -63,7 +63,7 @@
  * href="https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI">here</a>.
  *
  * <p>The public API is composed of "decode*" methods and provides backward-compatibility. See
- * https://github.com/web3j/web3j/issues/1591 for a discussion about decoding and possible
+ * https://github.com/hyperledger/web3j/issues/1591 for a discussion about decoding and possible
  * improvements.
  */
 public class TypeDecoder {

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes1.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes1 extends Bytes {
     public static final Bytes1 DEFAULT = new Bytes1(new byte[1]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes10.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes10 extends Bytes {
     public static final Bytes10 DEFAULT = new Bytes10(new byte[10]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes11.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes11 extends Bytes {
     public static final Bytes11 DEFAULT = new Bytes11(new byte[11]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes12.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes12 extends Bytes {
     public static final Bytes12 DEFAULT = new Bytes12(new byte[12]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes13.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes13 extends Bytes {
     public static final Bytes13 DEFAULT = new Bytes13(new byte[13]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes14.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes14 extends Bytes {
     public static final Bytes14 DEFAULT = new Bytes14(new byte[14]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes15.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes15 extends Bytes {
     public static final Bytes15 DEFAULT = new Bytes15(new byte[15]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes16.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes16 extends Bytes {
     public static final Bytes16 DEFAULT = new Bytes16(new byte[16]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes17.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes17 extends Bytes {
     public static final Bytes17 DEFAULT = new Bytes17(new byte[17]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes18.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes18 extends Bytes {
     public static final Bytes18 DEFAULT = new Bytes18(new byte[18]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes19.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes19 extends Bytes {
     public static final Bytes19 DEFAULT = new Bytes19(new byte[19]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes2.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes2 extends Bytes {
     public static final Bytes2 DEFAULT = new Bytes2(new byte[2]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes20.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes20 extends Bytes {
     public static final Bytes20 DEFAULT = new Bytes20(new byte[20]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes21.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes21 extends Bytes {
     public static final Bytes21 DEFAULT = new Bytes21(new byte[21]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes22.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes22 extends Bytes {
     public static final Bytes22 DEFAULT = new Bytes22(new byte[22]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes23.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes23 extends Bytes {
     public static final Bytes23 DEFAULT = new Bytes23(new byte[23]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes24.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes24 extends Bytes {
     public static final Bytes24 DEFAULT = new Bytes24(new byte[24]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes25.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes25 extends Bytes {
     public static final Bytes25 DEFAULT = new Bytes25(new byte[25]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes26.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes26 extends Bytes {
     public static final Bytes26 DEFAULT = new Bytes26(new byte[26]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes27.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes27 extends Bytes {
     public static final Bytes27 DEFAULT = new Bytes27(new byte[27]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes28.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes28 extends Bytes {
     public static final Bytes28 DEFAULT = new Bytes28(new byte[28]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes29.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes29 extends Bytes {
     public static final Bytes29 DEFAULT = new Bytes29(new byte[29]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes3.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes3 extends Bytes {
     public static final Bytes3 DEFAULT = new Bytes3(new byte[3]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes30.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes30 extends Bytes {
     public static final Bytes30 DEFAULT = new Bytes30(new byte[30]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes31.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes31 extends Bytes {
     public static final Bytes31 DEFAULT = new Bytes31(new byte[31]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes32.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes32 extends Bytes {
     public static final Bytes32 DEFAULT = new Bytes32(new byte[32]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes4.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes4 extends Bytes {
     public static final Bytes4 DEFAULT = new Bytes4(new byte[4]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes5.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes5 extends Bytes {
     public static final Bytes5 DEFAULT = new Bytes5(new byte[5]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes6.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes6 extends Bytes {
     public static final Bytes6 DEFAULT = new Bytes6(new byte[6]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes7.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes7 extends Bytes {
     public static final Bytes7 DEFAULT = new Bytes7(new byte[7]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes8.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes8 extends Bytes {
     public static final Bytes8 DEFAULT = new Bytes8(new byte[8]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes9.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes9 extends Bytes {
     public static final Bytes9 DEFAULT = new Bytes9(new byte[9]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int104.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int104 extends Int {
     public static final Int104 DEFAULT = new Int104(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int112.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int112 extends Int {
     public static final Int112 DEFAULT = new Int112(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int120.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int120 extends Int {
     public static final Int120 DEFAULT = new Int120(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int128.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int128 extends Int {
     public static final Int128 DEFAULT = new Int128(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int136.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int136 extends Int {
     public static final Int136 DEFAULT = new Int136(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int144.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int144 extends Int {
     public static final Int144 DEFAULT = new Int144(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int152.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int152 extends Int {
     public static final Int152 DEFAULT = new Int152(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int16.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int16 extends Int {
     public static final Int16 DEFAULT = new Int16(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int160.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int160 extends Int {
     public static final Int160 DEFAULT = new Int160(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int168.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int168 extends Int {
     public static final Int168 DEFAULT = new Int168(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int176.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int176 extends Int {
     public static final Int176 DEFAULT = new Int176(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int184.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int184 extends Int {
     public static final Int184 DEFAULT = new Int184(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int192.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int192 extends Int {
     public static final Int192 DEFAULT = new Int192(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int200.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int200 extends Int {
     public static final Int200 DEFAULT = new Int200(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int208.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int208 extends Int {
     public static final Int208 DEFAULT = new Int208(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int216.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int216 extends Int {
     public static final Int216 DEFAULT = new Int216(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int224.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int224 extends Int {
     public static final Int224 DEFAULT = new Int224(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int232.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int232 extends Int {
     public static final Int232 DEFAULT = new Int232(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int24.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int24 extends Int {
     public static final Int24 DEFAULT = new Int24(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int240.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int240 extends Int {
     public static final Int240 DEFAULT = new Int240(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int248.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int248 extends Int {
     public static final Int248 DEFAULT = new Int248(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int256.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int256 extends Int {
     public static final Int256 DEFAULT = new Int256(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int32.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int32 extends Int {
     public static final Int32 DEFAULT = new Int32(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int40.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int40 extends Int {
     public static final Int40 DEFAULT = new Int40(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int48.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int48 extends Int {
     public static final Int48 DEFAULT = new Int48(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int56.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int56 extends Int {
     public static final Int56 DEFAULT = new Int56(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int64.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int64 extends Int {
     public static final Int64 DEFAULT = new Int64(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int72.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int72 extends Int {
     public static final Int72 DEFAULT = new Int72(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int8.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int8 extends Int {
     public static final Int8 DEFAULT = new Int8(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int80.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int80 extends Int {
     public static final Int80 DEFAULT = new Int80(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int88.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int88 extends Int {
     public static final Int88 DEFAULT = new Int88(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int96.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int96 extends Int {
     public static final Int96 DEFAULT = new Int96(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray0.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray0<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray1.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray1<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray10.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray10<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray11.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray11<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray12.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray12<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray13.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray13<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray14.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray14<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray15.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray15<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray16.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray16<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray17.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray17<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray18.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray18<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray19.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray19<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray2.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray2<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray20.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray20<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray21.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray21<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray22.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray22<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray23.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray23<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray24.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray24<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray25.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray25<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray26.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray26<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray27.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray27<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray28.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray28<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray29.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray29<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray3.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray3<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray30.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray30<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray31.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray31<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray32.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray32<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray4.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray4<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray5.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray5<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray6.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray6<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray7.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray7<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray8.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray8<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray9.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray9<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint104.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint104 extends Uint {
     public static final Uint104 DEFAULT = new Uint104(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint112.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint112 extends Uint {
     public static final Uint112 DEFAULT = new Uint112(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint120.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint120 extends Uint {
     public static final Uint120 DEFAULT = new Uint120(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint128.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint128 extends Uint {
     public static final Uint128 DEFAULT = new Uint128(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint136.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint136 extends Uint {
     public static final Uint136 DEFAULT = new Uint136(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint144.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint144 extends Uint {
     public static final Uint144 DEFAULT = new Uint144(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint152.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint152 extends Uint {
     public static final Uint152 DEFAULT = new Uint152(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint16.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint16 extends Uint {
     public static final Uint16 DEFAULT = new Uint16(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint160.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint160 extends Uint {
     public static final Uint160 DEFAULT = new Uint160(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint168.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint168 extends Uint {
     public static final Uint168 DEFAULT = new Uint168(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint176.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint176 extends Uint {
     public static final Uint176 DEFAULT = new Uint176(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint184.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint184 extends Uint {
     public static final Uint184 DEFAULT = new Uint184(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint192.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint192 extends Uint {
     public static final Uint192 DEFAULT = new Uint192(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint200.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint200 extends Uint {
     public static final Uint200 DEFAULT = new Uint200(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint208.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint208 extends Uint {
     public static final Uint208 DEFAULT = new Uint208(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint216.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint216 extends Uint {
     public static final Uint216 DEFAULT = new Uint216(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint224.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint224 extends Uint {
     public static final Uint224 DEFAULT = new Uint224(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint232.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint232 extends Uint {
     public static final Uint232 DEFAULT = new Uint232(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint24.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint24 extends Uint {
     public static final Uint24 DEFAULT = new Uint24(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint240.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint240 extends Uint {
     public static final Uint240 DEFAULT = new Uint240(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint248.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint248 extends Uint {
     public static final Uint248 DEFAULT = new Uint248(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint256.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint256 extends Uint {
     public static final Uint256 DEFAULT = new Uint256(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint32.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint32 extends Uint {
     public static final Uint32 DEFAULT = new Uint32(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint40.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint40 extends Uint {
     public static final Uint40 DEFAULT = new Uint40(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint48.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint48 extends Uint {
     public static final Uint48 DEFAULT = new Uint48(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint56.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint56 extends Uint {
     public static final Uint56 DEFAULT = new Uint56(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint64.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint64 extends Uint {
     public static final Uint64 DEFAULT = new Uint64(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint72.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint72 extends Uint {
     public static final Uint72 DEFAULT = new Uint72(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint8.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint8 extends Uint {
     public static final Uint8 DEFAULT = new Uint8(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint80.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint80 extends Uint {
     public static final Uint80 DEFAULT = new Uint80(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint88.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint88 extends Uint {
     public static final Uint88 DEFAULT = new Uint88(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint96.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint96 extends Uint {
     public static final Uint96 DEFAULT = new Uint96(BigInteger.ZERO);

File: codegen/src/main/java/org/web3j/codegen/Generator.java
Patch:
@@ -36,7 +36,7 @@ static String buildWarning(Class cls) {
                 + "<p>Please use "
                 + cls.getName()
                 + " in the \n"
-                + "<a href=\"https://github.com/web3j/web3j/tree/main/codegen\">"
+                + "<a href=\"https://github.com/hyperledger/web3j/tree/main/codegen\">"
                 + "codegen module</a> to update.\n";
     }
 }

File: codegen/src/main/java/org/web3j/codegen/SolidityFunctionWrapper.java
Patch:
@@ -120,7 +120,7 @@ public class SolidityFunctionWrapper extends Generator {
                     + "or the "
                     + SolidityFunctionWrapperGenerator.class.getName()
                     + " in the \n"
-                    + "<a href=\"https://github.com/web3j/web3j/tree/main/codegen\">"
+                    + "<a href=\"https://github.com/hyperledger/web3j/tree/main/codegen\">"
                     + "codegen module</a> to update.\n";
 
     private final boolean useNativeJavaTypes;

File: codegen/src/main/java/org/web3j/codegen/TruffleJsonFunctionWrapperGenerator.java
Patch:
@@ -354,7 +354,7 @@ public String getAddress(Network network) {
         /*
          * c.f., org.web3j.tx.ChainId
          *
-         * This should be updated with https://github.com/web3j/web3j/issues/234
+         * This should be updated with https://github.com/hyperledger/web3j/issues/234
          */
         enum Network {
             olympic(0),

File: codegen/src/test/resources/solidity/abifuncs/build/java/AbiFuncs.java
Patch:
@@ -19,7 +19,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version none.
  */

File: codegen/src/test/resources/solidity/arrayofstructandstruct/build/java/ArrayOfStructAndStruct.java
Patch:
@@ -23,7 +23,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version none.
  */

File: codegen/src/test/resources/solidity/arrayofstructclassgeneration/build/java/ArrayOfStructClassGeneration.java
Patch:
@@ -23,7 +23,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version none.
  */

File: codegen/src/test/resources/solidity/arraysinstruct/build/java/ArraysInStruct.java
Patch:
@@ -33,7 +33,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version none.
  */

File: codegen/src/test/resources/solidity/eventparameters/build/java/EventParameters.java
Patch:
@@ -31,7 +31,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version none.
  */

File: codegen/src/test/resources/solidity/metacoin/build/java/MetaCoin.java
Patch:
@@ -31,7 +31,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version none.
  */

File: codegen/src/test/resources/solidity/onlyinarraystruct/build/java/OnlyInArrayStruct.java
Patch:
@@ -24,7 +24,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version none.
  */

File: codegen/src/test/resources/solidity/sameinnerstructname/build/java/SameInnerStructName.java
Patch:
@@ -23,7 +23,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version none.
  */

File: codegen/src/test/resources/solidity/staticarrayofstructsinstruct/build/java/StaticArrayOfStructsInStruct.java
Patch:
@@ -27,7 +27,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version none.
  */

File: contracts/src/main/java/org/web3j/contracts/eip165/generated/ERC165.java
Patch:
@@ -18,7 +18,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version 4.1.1.
  */

File: contracts/src/main/java/org/web3j/contracts/eip20/generated/ERC20.java
Patch:
@@ -31,7 +31,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version 4.1.1.
  */

File: contracts/src/main/java/org/web3j/contracts/eip721/generated/ERC721.java
Patch:
@@ -30,7 +30,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version 4.1.1.
  */

File: contracts/src/main/java/org/web3j/contracts/eip721/generated/ERC721Enumerable.java
Patch:
@@ -18,7 +18,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version 4.1.1.
  */

File: contracts/src/main/java/org/web3j/contracts/eip721/generated/ERC721Metadata.java
Patch:
@@ -18,7 +18,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version 4.1.1.
  */

File: core/src/main/java/org/web3j/ens/contracts/generated/ENS.java
Patch:
@@ -32,7 +32,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version 1.4.1.
  */

File: core/src/main/java/org/web3j/ens/contracts/generated/ENSRegistryWithFallbackContract.java
Patch:
@@ -32,7 +32,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version 1.4.1.
  */

File: core/src/main/java/org/web3j/ens/contracts/generated/OffchainResolverContract.java
Patch:
@@ -36,7 +36,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version 1.4.1.
  */

File: core/src/main/java/org/web3j/ens/contracts/generated/PublicResolver.java
Patch:
@@ -38,7 +38,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version 1.4.1.
  */

File: core/src/main/main/java/org/web3j/ens/contracts/generated/ENS.java
Patch:
@@ -32,7 +32,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version 1.4.1.
  */

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple1.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple1<T1> implements Tuple {
     private static final int SIZE = 1;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple10.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> implements Tuple {
     private static final int SIZE = 10;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple11.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> implements Tuple {
     private static final int SIZE = 11;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple12.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> implements Tuple {
     private static final int SIZE = 12;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple13.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> implements Tuple {
     private static final int SIZE = 13;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple14.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> implements Tuple {
     private static final int SIZE = 14;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple15.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> implements Tuple {
     private static final int SIZE = 15;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple16.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> implements Tuple {
     private static final int SIZE = 16;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple17.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> implements Tuple {
     private static final int SIZE = 17;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple18.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple18<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> implements Tuple {
     private static final int SIZE = 18;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple19.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple19<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> implements Tuple {
     private static final int SIZE = 19;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple2.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple2<T1, T2> implements Tuple {
     private static final int SIZE = 2;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple20.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple20<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> implements Tuple {
     private static final int SIZE = 20;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple3.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple3<T1, T2, T3> implements Tuple {
     private static final int SIZE = 3;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple4.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple4<T1, T2, T3, T4> implements Tuple {
     private static final int SIZE = 4;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple5.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple5<T1, T2, T3, T4, T5> implements Tuple {
     private static final int SIZE = 5;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple6.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple6<T1, T2, T3, T4, T5, T6> implements Tuple {
     private static final int SIZE = 6;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple7.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple7<T1, T2, T3, T4, T5, T6, T7> implements Tuple {
     private static final int SIZE = 7;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple8.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple8<T1, T2, T3, T4, T5, T6, T7, T8> implements Tuple {
     private static final int SIZE = 8;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple9.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
+ * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple9<T1, T2, T3, T4, T5, T6, T7, T8, T9> implements Tuple {
     private static final int SIZE = 9;

File: abi/src/main/java/org/web3j/abi/TypeReference.java
Patch:
@@ -245,7 +245,7 @@ public java.lang.reflect.Type getOwnerType() {
             }
             lastReadStringPosition = nextSquareBrackets.end();
             nextSquareBrackets = ARRAY_SUFFIX.matcher(solidityType);
-            // cant find any more [] and string isn't fully parsed
+            // can't find any more [] and string isn't fully parsed
             if (!nextSquareBrackets.find(lastReadStringPosition) && lastReadStringPosition != len) {
                 throw new ClassNotFoundException(
                         "Unable to make TypeReference from " + solidityType);

File: core/src/main/java/org/web3j/tx/response/QueuingTransactionReceiptProcessor.java
Patch:
@@ -94,7 +94,7 @@ private void sendTransactionReceiptRequests() {
     /**
      * Java doesn't provide a concurrent linked hash set, so we use a simple wrapper to store
      * details of the number of requests we've made against this specific transaction hash. This is
-     * so we can preserve submission order as we interate over the outstanding transactions.
+     * so we can preserve submission order as we integrate over the outstanding transactions.
      *
      * <p>Note - the equals/hashcode methods only operate on the transactionHash field. This is
      * intentional.

File: abi/src/main/java/org/web3j/abi/DefaultFunctionEncoder.java
Patch:
@@ -99,7 +99,7 @@ private static int getLength(final List<Type> parameters) {
                             ((StaticArray) type).getComponentType())) {
                 count++;
             } else if (type instanceof StaticArray) {
-                count += ((StaticArray) type).getValue().size();
+                count += getLength(((StaticArray) type).getValue());
             } else {
                 count++;
             }

File: abi/src/main/java/org/web3j/abi/TypeDecoder.java
Patch:
@@ -62,7 +62,7 @@
  * documented, but is the reverse of the encoding details located <a
  * href="https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI">here</a>.
  *
- * <p>The public API is composed of "decode*" methods and provides backward-compatbility. See
+ * <p>The public API is composed of "decode*" methods and provides backward-compatibility. See
  * https://github.com/web3j/web3j/issues/1591 for a discussion about decoding and possible
  * improvements.
  */

File: abi/src/main/java/org/web3j/abi/TypeReference.java
Patch:
@@ -64,7 +64,7 @@ TypeReference getSubTypeReference() {
     }
 
     public int compareTo(TypeReference<T> o) {
-        // taken from the blog post comments - this results in an errror if the
+        // taken from the blog post comments - this results in an error if the
         // type parameter is left out.
         return 0;
     }

File: besu/src/main/java/org/web3j/protocol/besu/response/FullDebugTraceInfo.java
Patch:
@@ -56,7 +56,7 @@ public String getReturnValue() {
         return returnValue;
     }
 
-    public void serReturnValye() {
+    public void setReturnValue() {
         this.returnValue = returnValue;
     }
 

File: besu/src/main/java/org/web3j/protocol/besu/response/FullDebugTraceInfo.java
Patch:
@@ -56,7 +56,7 @@ public String getReturnValue() {
         return returnValue;
     }
 
-    public void serReturnValue() {
+    public void setReturnValue() {
         this.returnValue = returnValue;
     }
 

File: besu/src/main/java/org/web3j/protocol/besu/response/FullDebugTraceInfo.java
Patch:
@@ -56,7 +56,7 @@ public String getReturnValue() {
         return returnValue;
     }
 
-    public void serReturnValye() {
+    public void serReturnValue() {
         this.returnValue = returnValue;
     }
 

File: abi/src/main/java/org/web3j/abi/TypeDecoder.java
Patch:
@@ -62,7 +62,7 @@
  * documented, but is the reverse of the encoding details located <a
  * href="https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI">here</a>.
  *
- * <p>The public API is composed of "decode*" methods and provides backward-compatbility. See
+ * <p>The public API is composed of "decode*" methods and provides backward-compatibility. See
  * https://github.com/web3j/web3j/issues/1591 for a discussion about decoding and possible
  * improvements.
  */

File: abi/src/main/java/org/web3j/abi/TypeReference.java
Patch:
@@ -64,7 +64,7 @@ TypeReference getSubTypeReference() {
     }
 
     public int compareTo(TypeReference<T> o) {
-        // taken from the blog post comments - this results in an errror if the
+        // taken from the blog post comments - this results in an error if the
         // type parameter is left out.
         return 0;
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes1.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes1 extends Bytes {
     public static final Bytes1 DEFAULT = new Bytes1(new byte[1]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes12.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes12 extends Bytes {
     public static final Bytes12 DEFAULT = new Bytes12(new byte[12]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes18.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes18 extends Bytes {
     public static final Bytes18 DEFAULT = new Bytes18(new byte[18]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes19.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes19 extends Bytes {
     public static final Bytes19 DEFAULT = new Bytes19(new byte[19]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes25.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes25 extends Bytes {
     public static final Bytes25 DEFAULT = new Bytes25(new byte[25]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes27.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes27 extends Bytes {
     public static final Bytes27 DEFAULT = new Bytes27(new byte[27]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes7.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes7 extends Bytes {
     public static final Bytes7 DEFAULT = new Bytes7(new byte[7]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes8.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes8 extends Bytes {
     public static final Bytes8 DEFAULT = new Bytes8(new byte[8]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int184.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int184 extends Int {
     public static final Int184 DEFAULT = new Int184(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int192.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int192 extends Int {
     public static final Int192 DEFAULT = new Int192(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int208.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int208 extends Int {
     public static final Int208 DEFAULT = new Int208(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int216.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int216 extends Int {
     public static final Int216 DEFAULT = new Int216(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int224.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int224 extends Int {
     public static final Int224 DEFAULT = new Int224(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int232.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int232 extends Int {
     public static final Int232 DEFAULT = new Int232(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray12.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray12<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray20.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray20<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray21.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray21<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray27.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray27<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray3.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray3<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint120.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint120 extends Uint {
     public static final Uint120 DEFAULT = new Uint120(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint128.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint128 extends Uint {
     public static final Uint128 DEFAULT = new Uint128(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint24.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint24 extends Uint {
     public static final Uint24 DEFAULT = new Uint24(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint40.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint40 extends Uint {
     public static final Uint40 DEFAULT = new Uint40(BigInteger.ZERO);

File: codegen/src/main/java/org/web3j/codegen/Generator.java
Patch:
@@ -36,7 +36,7 @@ static String buildWarning(Class cls) {
                 + "<p>Please use "
                 + cls.getName()
                 + " in the \n"
-                + "<a href=\"https://github.com/web3j/web3j/tree/master/codegen\">"
+                + "<a href=\"https://github.com/web3j/web3j/tree/main/codegen\">"
                 + "codegen module</a> to update.\n";
     }
 }

File: codegen/src/main/java/org/web3j/codegen/SolidityFunctionWrapper.java
Patch:
@@ -120,7 +120,7 @@ public class SolidityFunctionWrapper extends Generator {
                     + "or the "
                     + SolidityFunctionWrapperGenerator.class.getName()
                     + " in the \n"
-                    + "<a href=\"https://github.com/web3j/web3j/tree/master/codegen\">"
+                    + "<a href=\"https://github.com/web3j/web3j/tree/main/codegen\">"
                     + "codegen module</a> to update.\n";
 
     private final boolean useNativeJavaTypes;

File: codegen/src/test/resources/solidity/arraysinstruct/build/java/ArraysInStruct.java
Patch:
@@ -33,7 +33,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version none.
  */

File: codegen/src/test/resources/solidity/eventparameters/build/java/EventParameters.java
Patch:
@@ -31,7 +31,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version none.
  */

File: codegen/src/test/resources/solidity/metacoin/build/java/MetaCoin.java
Patch:
@@ -31,7 +31,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version none.
  */

File: codegen/src/test/resources/solidity/onlyinarraystruct/build/java/OnlyInArrayStruct.java
Patch:
@@ -24,7 +24,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version none.
  */

File: contracts/src/main/java/org/web3j/contracts/eip165/generated/ERC165.java
Patch:
@@ -18,7 +18,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version 4.1.1.
  */

File: contracts/src/main/java/org/web3j/contracts/eip20/generated/ERC20.java
Patch:
@@ -31,7 +31,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version 4.1.1.
  */

File: contracts/src/main/java/org/web3j/contracts/eip721/generated/ERC721.java
Patch:
@@ -30,7 +30,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version 4.1.1.
  */

File: contracts/src/main/java/org/web3j/contracts/eip721/generated/ERC721Enumerable.java
Patch:
@@ -18,7 +18,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version 4.1.1.
  */

File: contracts/src/main/java/org/web3j/contracts/eip721/generated/ERC721Metadata.java
Patch:
@@ -18,7 +18,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version 4.1.1.
  */

File: core/src/main/java/org/web3j/ens/contracts/generated/ENS.java
Patch:
@@ -32,7 +32,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version 1.4.1.
  */

File: core/src/main/java/org/web3j/ens/contracts/generated/ENSRegistryWithFallbackContract.java
Patch:
@@ -32,7 +32,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version 1.4.1.
  */

File: core/src/main/java/org/web3j/ens/contracts/generated/OffchainResolverContract.java
Patch:
@@ -36,7 +36,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version 1.4.1.
  */

File: core/src/main/java/org/web3j/ens/contracts/generated/PublicResolver.java
Patch:
@@ -38,7 +38,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version 1.4.1.
  */

File: core/src/main/main/java/org/web3j/ens/contracts/generated/ENS.java
Patch:
@@ -32,7 +32,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version 1.4.1.
  */

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple1.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple1<T1> implements Tuple {
     private static final int SIZE = 1;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple10.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> implements Tuple {
     private static final int SIZE = 10;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple11.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> implements Tuple {
     private static final int SIZE = 11;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple12.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> implements Tuple {
     private static final int SIZE = 12;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple13.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> implements Tuple {
     private static final int SIZE = 13;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple14.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> implements Tuple {
     private static final int SIZE = 14;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple15.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> implements Tuple {
     private static final int SIZE = 15;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple16.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> implements Tuple {
     private static final int SIZE = 16;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple17.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> implements Tuple {
     private static final int SIZE = 17;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple18.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple18<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> implements Tuple {
     private static final int SIZE = 18;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple19.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple19<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> implements Tuple {
     private static final int SIZE = 19;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple2.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple2<T1, T2> implements Tuple {
     private static final int SIZE = 2;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple20.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple20<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> implements Tuple {
     private static final int SIZE = 20;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple3.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple3<T1, T2, T3> implements Tuple {
     private static final int SIZE = 3;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple4.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple4<T1, T2, T3, T4> implements Tuple {
     private static final int SIZE = 4;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple5.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple5<T1, T2, T3, T4, T5> implements Tuple {
     private static final int SIZE = 5;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple6.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple6<T1, T2, T3, T4, T5, T6> implements Tuple {
     private static final int SIZE = 6;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple7.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple7<T1, T2, T3, T4, T5, T6, T7> implements Tuple {
     private static final int SIZE = 7;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple8.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple8<T1, T2, T3, T4, T5, T6, T7, T8> implements Tuple {
     private static final int SIZE = 8;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple9.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple9<T1, T2, T3, T4, T5, T6, T7, T8, T9> implements Tuple {
     private static final int SIZE = 9;

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes1.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes1 extends Bytes {
     public static final Bytes1 DEFAULT = new Bytes1(new byte[1]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes12.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes12 extends Bytes {
     public static final Bytes12 DEFAULT = new Bytes12(new byte[12]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes18.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes18 extends Bytes {
     public static final Bytes18 DEFAULT = new Bytes18(new byte[18]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes19.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes19 extends Bytes {
     public static final Bytes19 DEFAULT = new Bytes19(new byte[19]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes25.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes25 extends Bytes {
     public static final Bytes25 DEFAULT = new Bytes25(new byte[25]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes27.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes27 extends Bytes {
     public static final Bytes27 DEFAULT = new Bytes27(new byte[27]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes7.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes7 extends Bytes {
     public static final Bytes7 DEFAULT = new Bytes7(new byte[7]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Bytes8.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Bytes8 extends Bytes {
     public static final Bytes8 DEFAULT = new Bytes8(new byte[8]);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int184.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int184 extends Int {
     public static final Int184 DEFAULT = new Int184(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int192.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int192 extends Int {
     public static final Int192 DEFAULT = new Int192(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int208.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int208 extends Int {
     public static final Int208 DEFAULT = new Int208(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int216.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int216 extends Int {
     public static final Int216 DEFAULT = new Int216(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int224.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int224 extends Int {
     public static final Int224 DEFAULT = new Int224(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int232.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Int232 extends Int {
     public static final Int232 DEFAULT = new Int232(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray12.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray12<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray20.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray20<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray21.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray21<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray27.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray27<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray3.java
Patch:
@@ -8,7 +8,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class StaticArray3<T extends Type> extends StaticArray<T> {
     @Deprecated

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint120.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint120 extends Uint {
     public static final Uint120 DEFAULT = new Uint120(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint128.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint128 extends Uint {
     public static final Uint128 DEFAULT = new Uint128(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint24.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint24 extends Uint {
     public static final Uint24 DEFAULT = new Uint24(BigInteger.ZERO);

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint40.java
Patch:
@@ -7,7 +7,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.AbiTypesGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public class Uint40 extends Uint {
     public static final Uint40 DEFAULT = new Uint40(BigInteger.ZERO);

File: codegen/src/main/java/org/web3j/codegen/Generator.java
Patch:
@@ -36,7 +36,7 @@ static String buildWarning(Class cls) {
                 + "<p>Please use "
                 + cls.getName()
                 + " in the \n"
-                + "<a href=\"https://github.com/web3j/web3j/tree/master/codegen\">"
+                + "<a href=\"https://github.com/web3j/web3j/tree/main/codegen\">"
                 + "codegen module</a> to update.\n";
     }
 }

File: codegen/src/main/java/org/web3j/codegen/SolidityFunctionWrapper.java
Patch:
@@ -120,7 +120,7 @@ public class SolidityFunctionWrapper extends Generator {
                     + "or the "
                     + SolidityFunctionWrapperGenerator.class.getName()
                     + " in the \n"
-                    + "<a href=\"https://github.com/web3j/web3j/tree/master/codegen\">"
+                    + "<a href=\"https://github.com/web3j/web3j/tree/main/codegen\">"
                     + "codegen module</a> to update.\n";
 
     private final boolean useNativeJavaTypes;

File: codegen/src/test/resources/solidity/arraysinstruct/build/java/ArraysInStruct.java
Patch:
@@ -33,7 +33,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version none.
  */

File: codegen/src/test/resources/solidity/eventparameters/build/java/EventParameters.java
Patch:
@@ -31,7 +31,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version none.
  */

File: codegen/src/test/resources/solidity/metacoin/build/java/MetaCoin.java
Patch:
@@ -31,7 +31,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version none.
  */

File: codegen/src/test/resources/solidity/onlyinarraystruct/build/java/OnlyInArrayStruct.java
Patch:
@@ -24,7 +24,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version none.
  */

File: contracts/src/main/java/org/web3j/contracts/eip165/generated/ERC165.java
Patch:
@@ -18,7 +18,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version 4.1.1.
  */

File: contracts/src/main/java/org/web3j/contracts/eip20/generated/ERC20.java
Patch:
@@ -31,7 +31,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version 4.1.1.
  */

File: contracts/src/main/java/org/web3j/contracts/eip721/generated/ERC721.java
Patch:
@@ -30,7 +30,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version 4.1.1.
  */

File: contracts/src/main/java/org/web3j/contracts/eip721/generated/ERC721Enumerable.java
Patch:
@@ -18,7 +18,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version 4.1.1.
  */

File: contracts/src/main/java/org/web3j/contracts/eip721/generated/ERC721Metadata.java
Patch:
@@ -18,7 +18,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version 4.1.1.
  */

File: core/src/main/java/org/web3j/ens/contracts/generated/ENS.java
Patch:
@@ -32,7 +32,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version 1.4.1.
  */

File: core/src/main/java/org/web3j/ens/contracts/generated/ENSRegistryWithFallbackContract.java
Patch:
@@ -32,7 +32,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version 1.4.1.
  */

File: core/src/main/java/org/web3j/ens/contracts/generated/OffchainResolverContract.java
Patch:
@@ -36,7 +36,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version 1.4.1.
  */

File: core/src/main/java/org/web3j/ens/contracts/generated/PublicResolver.java
Patch:
@@ -38,7 +38,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version 1.4.1.
  */

File: core/src/main/main/java/org/web3j/ens/contracts/generated/ENS.java
Patch:
@@ -32,7 +32,7 @@
  * <p><strong>Do not modify!</strong>
  * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  *
  * <p>Generated with web3j version 1.4.1.
  */

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple1.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple1<T1> implements Tuple {
     private static final int SIZE = 1;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple10.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> implements Tuple {
     private static final int SIZE = 10;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple11.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> implements Tuple {
     private static final int SIZE = 11;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple12.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> implements Tuple {
     private static final int SIZE = 12;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple13.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> implements Tuple {
     private static final int SIZE = 13;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple14.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> implements Tuple {
     private static final int SIZE = 14;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple15.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> implements Tuple {
     private static final int SIZE = 15;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple16.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> implements Tuple {
     private static final int SIZE = 16;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple17.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> implements Tuple {
     private static final int SIZE = 17;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple18.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple18<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> implements Tuple {
     private static final int SIZE = 18;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple19.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple19<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> implements Tuple {
     private static final int SIZE = 19;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple2.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple2<T1, T2> implements Tuple {
     private static final int SIZE = 2;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple20.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple20<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> implements Tuple {
     private static final int SIZE = 20;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple3.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple3<T1, T2, T3> implements Tuple {
     private static final int SIZE = 3;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple4.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple4<T1, T2, T3, T4> implements Tuple {
     private static final int SIZE = 4;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple5.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple5<T1, T2, T3, T4, T5> implements Tuple {
     private static final int SIZE = 5;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple6.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple6<T1, T2, T3, T4, T5, T6> implements Tuple {
     private static final int SIZE = 6;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple7.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple7<T1, T2, T3, T4, T5, T6, T7> implements Tuple {
     private static final int SIZE = 7;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple8.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple8<T1, T2, T3, T4, T5, T6, T7, T8> implements Tuple {
     private static final int SIZE = 8;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple9.java
Patch:
@@ -6,7 +6,7 @@
  * Auto generated code.
  * <p><strong>Do not modifiy!</strong>
  * <p>Please use org.web3j.codegen.TupleGenerator in the 
- * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
+ * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
  */
 public final class Tuple9<T1, T2, T3, T4, T5, T6, T7, T8, T9> implements Tuple {
     private static final int SIZE = 9;

File: codegen/src/main/java/org/web3j/codegen/SolidityFunctionWrapper.java
Patch:
@@ -672,7 +672,7 @@ private Set<String> getDuplicateFunctionNames(List<AbiDefinition> functionDefini
     private static MethodSpec buildGetDeploymentBinaryMethod() {
         MethodSpec.Builder toReturn =
                 MethodSpec.methodBuilder("getDeploymentBinary")
-                        .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
+                        .addModifiers(Modifier.PRIVATE, Modifier.STATIC)
                         .returns(ClassName.get(String.class));
 
         CodeBlock codeBlock =

File: codegen/src/test/resources/solidity/metacoin/build/java/MetaCoin.java
Patch:
@@ -166,7 +166,7 @@ public static void linkLibraries(List<Contract.LinkReference> references) {
         librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
     }
 
-    public static String getDeploymentBinary() {
+    private static String getDeploymentBinary() {
         if (librariesLinkedBinary != null) {
             return librariesLinkedBinary;
         } else {

File: codegen/src/main/java/org/web3j/codegen/SolidityFunctionWrapper.java
Patch:
@@ -395,7 +395,7 @@ private FieldSpec createLibrariesLinkedBinaryField() {
                 .build();
     }
 
-    private FieldSpec createBinaryDefinition(String binary) {
+    FieldSpec createBinaryDefinition(String binary) {
         if (binary.length() < 65534) {
             return FieldSpec.builder(String.class, BINARY)
                     .addModifiers(Modifier.PUBLIC, Modifier.FINAL, Modifier.STATIC)
@@ -407,7 +407,8 @@ private FieldSpec createBinaryDefinition(String binary) {
         StringBuilder stringBuilderString = new StringBuilder().append("new StringBuilder()");
         for (String s : argsArray) {
             stringBuilderString.append(".append(\"");
-            stringBuilderString.append(s);
+            stringBuilderString.append(
+                    s.replaceAll("\\$", "\\$\\$")); // escape $ which bytecode may contain
             stringBuilderString.append("\")");
         }
         stringBuilderString.append(".toString()");

File: codegen/src/main/java/org/web3j/codegen/SolidityFunctionWrapper.java
Patch:
@@ -671,7 +671,7 @@ private Set<String> getDuplicateFunctionNames(List<AbiDefinition> functionDefini
     private static MethodSpec buildGetDeploymentBinaryMethod() {
         MethodSpec.Builder toReturn =
                 MethodSpec.methodBuilder("getDeploymentBinary")
-                        .addModifiers(Modifier.PRIVATE, Modifier.STATIC)
+                        .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                         .returns(ClassName.get(String.class));
 
         CodeBlock codeBlock =

File: codegen/src/test/resources/solidity/metacoin/build/java/MetaCoin.java
Patch:
@@ -166,7 +166,7 @@ public static void linkLibraries(List<Contract.LinkReference> references) {
         librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
     }
 
-    private static String getDeploymentBinary() {
+    public static String getDeploymentBinary() {
         if (librariesLinkedBinary != null) {
             return librariesLinkedBinary;
         } else {

File: codegen/src/main/java/org/web3j/codegen/SolidityFunctionWrapper.java
Patch:
@@ -671,7 +671,7 @@ private Set<String> getDuplicateFunctionNames(List<AbiDefinition> functionDefini
     private static MethodSpec buildGetDeploymentBinaryMethod() {
         MethodSpec.Builder toReturn =
                 MethodSpec.methodBuilder("getDeploymentBinary")
-                        .addModifiers(Modifier.PRIVATE, Modifier.STATIC)
+                        .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                         .returns(ClassName.get(String.class));
 
         CodeBlock codeBlock =

File: codegen/src/test/resources/solidity/metacoin/build/java/MetaCoin.java
Patch:
@@ -166,7 +166,7 @@ public static void linkLibraries(List<Contract.LinkReference> references) {
         librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
     }
 
-    private static String getDeploymentBinary() {
+    public static String getDeploymentBinary() {
         if (librariesLinkedBinary != null) {
             return librariesLinkedBinary;
         } else {

File: codegen/src/main/java/org/web3j/codegen/SolidityFunctionWrapper.java
Patch:
@@ -395,7 +395,7 @@ private FieldSpec createLibrariesLinkedBinaryField() {
                 .build();
     }
 
-    private FieldSpec createBinaryDefinition(String binary) {
+    FieldSpec createBinaryDefinition(String binary) {
         if (binary.length() < 65534) {
             return FieldSpec.builder(String.class, BINARY)
                     .addModifiers(Modifier.PUBLIC, Modifier.FINAL, Modifier.STATIC)
@@ -407,7 +407,7 @@ private FieldSpec createBinaryDefinition(String binary) {
         StringBuilder stringBuilderString = new StringBuilder().append("new StringBuilder()");
         for (String s : argsArray) {
             stringBuilderString.append(".append(\"");
-            stringBuilderString.append(s);
+            stringBuilderString.append(s.replaceAll("\\$", "\\$\\$")); //escape $ which bytecode may contain
             stringBuilderString.append("\")");
         }
         stringBuilderString.append(".toString()");

File: codegen/src/main/java/org/web3j/codegen/unit/gen/MethodFilter.java
Patch:
@@ -37,8 +37,7 @@ public static List<Method> extractValidMethods(Class contract) {
                                         && parametersAreMatching(m)
                                         && !m.getName().toLowerCase().contains("event")
                                         && !m.getName().equals("load")
-                                        && !m.getName().equals("kill")
-                                        && !m.getName().equals("linkLibraries"))
+                                        && !m.getName().equals("kill"))
                 .collect(Collectors.toList());
     }
 

File: codegen/src/test/java/org/web3j/codegen/SolidityFunctionWrapperGeneratorTest.java
Patch:
@@ -218,9 +218,9 @@ private void compareJavaFile(String inputFileName) throws Exception {
                                         "java",
                                         inputFileName + ".java"),
                                 File.separator));
-        String s1 = new String(Files.readAllBytes(fileExpected.toPath()));
-        String s2 = new String(Files.readAllBytes(fileActual.toPath()));
-        assertEquals(s1.replaceAll("(\r\n|\n)", ""), s2.replaceAll("(\r\n|\n)", ""));
+        assertEquals(
+                new String(Files.readAllBytes(fileExpected.toPath())).replaceAll("(\r\n|\n)", ""),
+                new String(Files.readAllBytes(fileActual.toPath())).replaceAll("(\r\n|\n)", ""));
     }
 
     private void testCodeGenerationJvmTypes(String contractName, String inputFileName)

File: codegen/src/test/resources/solidity/arraysinstruct/build/java/ArraysInStruct.java
Patch:
@@ -39,7 +39,7 @@
  */
 @SuppressWarnings("rawtypes")
 public class ArraysInStruct extends Contract {
-    public static String BINARY = "Bin file was not provided";
+    public static final String BINARY = "Bin file was not provided";
 
     public static final String FUNC_CALLFUNCTION = "callFunction";
 

File: codegen/src/test/resources/solidity/eventparameters/build/java/EventParameters.java
Patch:
@@ -37,7 +37,7 @@
  */
 @SuppressWarnings("rawtypes")
 public class EventParameters extends Contract {
-    public static String BINARY = "Bin file was not provided";
+    public static final String BINARY = "Bin file was not provided";
 
     public static final String FUNC__CONTRACTNUMBER = "_contractNumber";
 

File: codegen/src/test/resources/solidity/onlyinarraystruct/build/java/OnlyInArrayStruct.java
Patch:
@@ -30,7 +30,7 @@
  */
 @SuppressWarnings("rawtypes")
 public class OnlyInArrayStruct extends Contract {
-    public static String BINARY = "Bin file was not provided";
+    public static final String BINARY = "Bin file was not provided";
 
     public static final String FUNC_GETFOO = "getFoo";
 

File: codegen/src/main/java/org/web3j/codegen/unit/gen/MethodFilter.java
Patch:
@@ -37,7 +37,8 @@ public static List<Method> extractValidMethods(Class contract) {
                                         && parametersAreMatching(m)
                                         && !m.getName().toLowerCase().contains("event")
                                         && !m.getName().equals("load")
-                                        && !m.getName().equals("kill"))
+                                        && !m.getName().equals("kill")
+                                        && !m.getName().equals("linkLibraries"))
                 .collect(Collectors.toList());
     }
 

File: codegen/src/test/java/org/web3j/codegen/SolidityFunctionWrapperGeneratorTest.java
Patch:
@@ -218,9 +218,9 @@ private void compareJavaFile(String inputFileName) throws Exception {
                                         "java",
                                         inputFileName + ".java"),
                                 File.separator));
-        assertEquals(
-                new String(Files.readAllBytes(fileExpected.toPath())).replaceAll("(\r\n|\n)", ""),
-                new String(Files.readAllBytes(fileActual.toPath())).replaceAll("(\r\n|\n)", ""));
+        String s1 = new String(Files.readAllBytes(fileExpected.toPath()));
+        String s2 = new String(Files.readAllBytes(fileActual.toPath()));
+        assertEquals(s1.replaceAll("(\r\n|\n)", ""), s2.replaceAll("(\r\n|\n)", ""));
     }
 
     private void testCodeGenerationJvmTypes(String contractName, String inputFileName)

File: codegen/src/test/resources/solidity/arraysinstruct/build/java/ArraysInStruct.java
Patch:
@@ -39,7 +39,7 @@
  */
 @SuppressWarnings("rawtypes")
 public class ArraysInStruct extends Contract {
-    public static final String BINARY = "Bin file was not provided";
+    public static String BINARY = "Bin file was not provided";
 
     public static final String FUNC_CALLFUNCTION = "callFunction";
 

File: codegen/src/test/resources/solidity/eventparameters/build/java/EventParameters.java
Patch:
@@ -37,7 +37,7 @@
  */
 @SuppressWarnings("rawtypes")
 public class EventParameters extends Contract {
-    public static final String BINARY = "Bin file was not provided";
+    public static String BINARY = "Bin file was not provided";
 
     public static final String FUNC__CONTRACTNUMBER = "_contractNumber";
 

File: codegen/src/test/resources/solidity/onlyinarraystruct/build/java/OnlyInArrayStruct.java
Patch:
@@ -30,7 +30,7 @@
  */
 @SuppressWarnings("rawtypes")
 public class OnlyInArrayStruct extends Contract {
-    public static final String BINARY = "Bin file was not provided";
+    public static String BINARY = "Bin file was not provided";
 
     public static final String FUNC_GETFOO = "getFoo";
 

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthBlock.java
Patch:
@@ -836,7 +836,7 @@ public TransactionObject(
                 String maxPriorityFeePerGas,
                 List<AccessListObject> accessList,
                 String maxFeePerBlobGas,
-                List<String> versionedHashes) {
+                List<String> blobVersionedHashes) {
             super(
                     hash,
                     nonce,
@@ -862,7 +862,7 @@ public TransactionObject(
                     maxPriorityFeePerGas,
                     accessList,
                     maxFeePerBlobGas,
-                    versionedHashes);
+                    blobVersionedHashes);
         }
 
         @Override

File: core/src/test/java/org/web3j/protocol/core/ResponseTest.java
Patch:
@@ -919,7 +919,7 @@ public void testEthBlockFullTransactionsWithBlob() {
                         + "        \"maxFeePerGas\": \"0x7f110\",\n"
                         + "        \"maxPriorityFeePerGas\": \"0x7f110\",\n"
                         + "        \"maxFeePerBlobGas\": \"0x7f110\",\n"
-                        + "        \"versionedHashes\": [\"0x013343644e9aaa7e8673ba3be38b56bb3dfaa57db923797247e5f2e504b721c3\", \"0x01cad19a7fe88d9e14575394847a4a0026fccf292c4ca30ef047e6d03d3a74bb\"]"
+                        + "        \"blobVersionedHashes\": [\"0x013343644e9aaa7e8673ba3be38b56bb3dfaa57db923797247e5f2e504b721c3\", \"0x01cad19a7fe88d9e14575394847a4a0026fccf292c4ca30ef047e6d03d3a74bb\"]"
                         + "    }], \n"
                         + "    \"uncles\": [\n"
                         + "       \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\",\n"

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthBlock.java
Patch:
@@ -836,7 +836,7 @@ public TransactionObject(
                 String maxPriorityFeePerGas,
                 List<AccessListObject> accessList,
                 String maxFeePerBlobGas,
-                List<String> versionedHashes) {
+                List<String> blobVersionedHashes) {
             super(
                     hash,
                     nonce,
@@ -862,7 +862,7 @@ public TransactionObject(
                     maxPriorityFeePerGas,
                     accessList,
                     maxFeePerBlobGas,
-                    versionedHashes);
+                    blobVersionedHashes);
         }
 
         @Override

File: core/src/test/java/org/web3j/protocol/core/ResponseTest.java
Patch:
@@ -919,7 +919,7 @@ public void testEthBlockFullTransactionsWithBlob() {
                         + "        \"maxFeePerGas\": \"0x7f110\",\n"
                         + "        \"maxPriorityFeePerGas\": \"0x7f110\",\n"
                         + "        \"maxFeePerBlobGas\": \"0x7f110\",\n"
-                        + "        \"versionedHashes\": [\"0x013343644e9aaa7e8673ba3be38b56bb3dfaa57db923797247e5f2e504b721c3\", \"0x01cad19a7fe88d9e14575394847a4a0026fccf292c4ca30ef047e6d03d3a74bb\"]"
+                        + "        \"blobVersionedHashes\": [\"0x013343644e9aaa7e8673ba3be38b56bb3dfaa57db923797247e5f2e504b721c3\", \"0x01cad19a7fe88d9e14575394847a4a0026fccf292c4ca30ef047e6d03d3a74bb\"]"
                         + "    }], \n"
                         + "    \"uncles\": [\n"
                         + "       \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\",\n"

File: core/src/main/java/org/web3j/tx/RawTransactionManager.java
Patch:
@@ -178,7 +178,7 @@ public EthGetCode getCode(
     }
 
     /*
-     * @param rawTransaction a RawTransaction istance to be signed
+     * @param rawTransaction a RawTransaction instance to be signed
      * @return The transaction signed and encoded without ever broadcasting it
      */
     public String sign(RawTransaction rawTransaction) {

File: crypto/src/main/java/org/web3j/crypto/Secp256k1JWK.java
Patch:
@@ -22,7 +22,7 @@
 
 /**
  * This class consists in java representation of JWK file. It uses Builder pattern in order to
- * generate the JWK content from the BCEC asymetric keys receive as parameters. This class supports
+ * generate the JWK content from the BCEC asymmetric keys receive as parameters. This class supports
  * generation of JWK only for ECDSA type keys that have secp256k1 curve.
  */
 @JsonDeserialize(builder = Secp256k1JWK.Builder.class)

File: crypto/src/main/java/org/web3j/crypto/transaction/type/Transaction4844.java
Patch:
@@ -93,7 +93,6 @@ protected Transaction4844(
         super(chainId, nonce, gasLimit, to, value, data, maxPriorityFeePerGas, maxFeePerGas);
         this.maxFeePerBlobGas = maxFeePerBlobGas;
         this.blobs = Optional.ofNullable(blobsData);
-        BlobUtils.loadTrustedSetupParameters();
 
         assert blobsData != null;
         this.kzgCommitments =
@@ -116,8 +115,6 @@ protected Transaction4844(
                 this.kzgCommitments.get().stream()
                         .map(BlobUtils::kzgToVersionedHash)
                         .collect(Collectors.toList());
-
-        BlobUtils.freeTrustedSetup();
     }
 
     @Override

File: abi/src/main/java/org/web3j/abi/datatypes/Bytes.java
Patch:
@@ -17,7 +17,7 @@ public class Bytes extends BytesType {
 
     public static final String TYPE_NAME = "bytes";
 
-    public Bytes(int byteSize, byte[] value) {
+    protected Bytes(int byteSize, byte[] value) {
         super(value, TYPE_NAME + value.length);
         if (!isValid(byteSize)) {
             throw new UnsupportedOperationException(

File: crypto/src/main/java/org/web3j/crypto/transaction/type/Transaction4844.java
Patch:
@@ -93,7 +93,7 @@ protected Transaction4844(
         super(chainId, nonce, gasLimit, to, value, data, maxPriorityFeePerGas, maxFeePerGas);
         this.maxFeePerBlobGas = maxFeePerBlobGas;
         this.blobs = Optional.ofNullable(blobsData);
-        BlobUtils.loadTrustedSetupFromResource();
+        BlobUtils.loadTrustedSetupParameters();
 
         assert blobsData != null;
         this.kzgCommitments =

File: crypto/src/test/java/org/web3j/crypto/BlobUtilsTest.java
Patch:
@@ -41,7 +41,7 @@ public class BlobUtilsTest {
 
     @BeforeEach
     public void load() {
-        BlobUtils.loadTrustedSetupFromResource();
+        BlobUtils.loadTrustedSetupParameters();
     }
 
     @Test
@@ -64,7 +64,6 @@ public void testBlobToCommitmentProofVersionedHashes() throws Exception {
 
     @Test
     public void testBlobUtils() throws Exception {
-
         Blob blob =
                 new Blob(
                         Numeric.hexStringToByteArray(

File: crypto/src/main/java/org/web3j/crypto/transaction/type/Transaction2930.java
Patch:
@@ -81,6 +81,7 @@ public List<RlpType> asRlpValues(Sign.SignatureData signatureData) {
 
         return result;
     }
+
     protected List<RlpType> rlpAccessListRlp() {
 
         List<AccessListObject> accessList = getAccessList();

File: crypto/src/main/java/org/web3j/crypto/Secp256k1JWK.java
Patch:
@@ -22,7 +22,7 @@
 
 /**
  * This class consists in java representation of JWK file. It uses Builder pattern in order to
- * generate the JWK content from the BCEC asymetric keys receive as parameters. This class supports
+ * generate the JWK content from the BCEC asymmetric keys receive as parameters. This class supports
  * generation of JWK only for ECDSA type keys that have secp256k1 curve.
  */
 @JsonDeserialize(builder = Secp256k1JWK.Builder.class)

File: core/src/main/java/org/web3j/tx/RawTransactionManager.java
Patch:
@@ -178,7 +178,7 @@ public EthGetCode getCode(
     }
 
     /*
-     * @param rawTransaction a RawTransaction istance to be signed
+     * @param rawTransaction a RawTransaction instance to be signed
      * @return The transaction signed and encoded without ever broadcasting it
      */
     public String sign(RawTransaction rawTransaction) {

File: abi/src/main/java/org/web3j/abi/TypeDecoder.java
Patch:
@@ -565,7 +565,8 @@ private static <T extends Type> T decodeDynamicParameterFromStruct(
             value = decodeDynamicStruct(dynamicElementData, 0, TypeReference.create(declaredField));
         } else if (DynamicArray.class.isAssignableFrom(declaredField)) {
             if (parameter == null) {
-                throw new RuntimeException("parameter can not be null, try to use annotation @Parameterized to specify the parameter type");
+                throw new RuntimeException(
+                        "parameter can not be null, try to use annotation @Parameterized to specify the parameter type");
             }
             value =
                     (T)

File: besu/src/test/java/org/web3j/tx/PrivateTransactionManagerTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.web3j.protocol.besu.Besu;
 import org.web3j.protocol.core.DefaultBlockParameter;
 import org.web3j.protocol.core.methods.response.EthCall;
+import org.web3j.protocol.core.methods.response.EthSendTransaction;
 import org.web3j.tx.exceptions.ContractCallException;
 import org.web3j.tx.response.PollingPrivateTransactionReceiptProcessor;
 import org.web3j.tx.response.TransactionReceiptProcessor;
@@ -51,6 +52,8 @@ class PrivateTransactionManagerTest {
     DefaultBlockParameter defaultBlockParameter = mock(DefaultBlockParameter.class);
     EthCall response = mock(EthCall.class);
 
+    EthSendTransaction sendTransaction = mock(EthSendTransaction.class);
+
     @Test
     public void sendPrivCallTest() throws IOException {
         when(response.getValue()).thenReturn("test");

File: besu/src/main/java/org/web3j/protocol/besu/privacy/OnChainPrivacyTransactionBuilder.java
Patch:
@@ -24,7 +24,7 @@
 import org.web3j.abi.datatypes.generated.Bytes32;
 import org.web3j.crypto.Credentials;
 import org.web3j.protocol.eea.crypto.PrivateTransactionEncoder;
-import org.web3j.protocol.eea.crypto.transaction.type.RawPrivateTransaction;
+import org.web3j.protocol.eea.crypto.RawPrivateTransaction;
 import org.web3j.tx.gas.BesuPrivacyGasProvider;
 import org.web3j.utils.Base64String;
 import org.web3j.utils.Numeric;

File: eea/src/main/java/org/web3j/protocol/eea/crypto/PrivateTxSignServiceImpl.java
Patch:
@@ -14,7 +14,6 @@
 
 import org.web3j.crypto.Credentials;
 import org.web3j.crypto.RawTransaction;
-import org.web3j.protocol.eea.crypto.transaction.type.RawPrivateTransaction;
 import org.web3j.service.TxSignService;
 import org.web3j.tx.ChainId;
 

File: eea/src/main/java/org/web3j/protocol/eea/crypto/SignedRawPrivateTransaction.java
Patch:
@@ -18,7 +18,6 @@
 import org.web3j.crypto.Sign;
 import org.web3j.crypto.SignatureDataOperations;
 import org.web3j.crypto.SignedRawTransaction;
-import org.web3j.protocol.eea.crypto.transaction.type.RawPrivateTransaction;
 import org.web3j.utils.Base64String;
 import org.web3j.utils.Restriction;
 

File: integration-tests/src/test/java/org/web3j/protocol/besu/BesuPrivacyQuickstartIntegrationTest.java
Patch:
@@ -28,7 +28,7 @@
 import org.web3j.protocol.besu.response.privacy.PrivateTransactionReceipt;
 import org.web3j.protocol.besu.response.privacy.PrivateTransactionWithPrivacyGroup;
 import org.web3j.protocol.eea.crypto.PrivateTransactionEncoder;
-import org.web3j.protocol.eea.crypto.transaction.type.RawPrivateTransaction;
+import org.web3j.protocol.eea.crypto.RawPrivateTransaction;
 import org.web3j.protocol.http.HttpService;
 import org.web3j.test.contract.HumanStandardToken;
 import org.web3j.tx.ChainIdLong;

File: besu/src/main/java/org/web3j/protocol/besu/privacy/OnChainPrivacyTransactionBuilder.java
Patch:
@@ -24,7 +24,7 @@
 import org.web3j.abi.datatypes.generated.Bytes32;
 import org.web3j.crypto.Credentials;
 import org.web3j.protocol.eea.crypto.PrivateTransactionEncoder;
-import org.web3j.protocol.eea.crypto.transaction.type.LegacyPrivateTransaction;
+import org.web3j.protocol.eea.crypto.transaction.type.RawPrivateTransaction;
 import org.web3j.tx.gas.BesuPrivacyGasProvider;
 import org.web3j.utils.Base64String;
 import org.web3j.utils.Numeric;
@@ -87,8 +87,8 @@ public String buildOnChainPrivateTransaction(
             Base64String enclaveKey,
             final BigInteger nonce,
             String call) {
-        LegacyPrivateTransaction rawTransaction =
-                LegacyPrivateTransaction.createTransaction(
+        RawPrivateTransaction rawTransaction =
+                RawPrivateTransaction.createTransaction(
                         nonce,
                         gasProvider.getGasPrice(),
                         gasProvider.getGasLimit(),

File: eea/src/main/java/org/web3j/protocol/eea/crypto/SignedRawPrivateTransaction.java
Patch:
@@ -18,11 +18,11 @@
 import org.web3j.crypto.Sign;
 import org.web3j.crypto.SignatureDataOperations;
 import org.web3j.crypto.SignedRawTransaction;
-import org.web3j.protocol.eea.crypto.transaction.type.LegacyPrivateTransaction;
+import org.web3j.protocol.eea.crypto.transaction.type.RawPrivateTransaction;
 import org.web3j.utils.Base64String;
 import org.web3j.utils.Restriction;
 
-public class SignedRawPrivateTransaction extends LegacyPrivateTransaction
+public class SignedRawPrivateTransaction extends RawPrivateTransaction
         implements SignatureDataOperations {
 
     private final Sign.SignatureData signatureData;

File: integration-tests/src/test/java/org/web3j/protocol/besu/BesuPrivacyQuickstartIntegrationTest.java
Patch:
@@ -28,7 +28,7 @@
 import org.web3j.protocol.besu.response.privacy.PrivateTransactionReceipt;
 import org.web3j.protocol.besu.response.privacy.PrivateTransactionWithPrivacyGroup;
 import org.web3j.protocol.eea.crypto.PrivateTransactionEncoder;
-import org.web3j.protocol.eea.crypto.transaction.type.LegacyPrivateTransaction;
+import org.web3j.protocol.eea.crypto.transaction.type.RawPrivateTransaction;
 import org.web3j.protocol.http.HttpService;
 import org.web3j.test.contract.HumanStandardToken;
 import org.web3j.tx.ChainIdLong;
@@ -127,8 +127,8 @@ public void simplePrivateTransactions() throws Exception {
                         .privGetTransactionCount(ALICE.getAddress(), privacyGroupId)
                         .send()
                         .getTransactionCount();
-        final LegacyPrivateTransaction rawPrivateTransaction =
-                LegacyPrivateTransaction.createContractTransaction(
+        final RawPrivateTransaction rawPrivateTransaction =
+                RawPrivateTransaction.createContractTransaction(
                         nonce,
                         ZERO_GAS_PROVIDER.getGasPrice(),
                         ZERO_GAS_PROVIDER.getGasLimit(),

File: core/src/main/java/org/web3j/tx/Transfer.java
Patch:
@@ -38,7 +38,7 @@ public Transfer(Web3j web3j, TransactionManager transactionManager) {
     }
 
     /**
-     * Given the duration required to execute a transaction, asyncronous execution is strongly
+     * Given the duration required to execute a transaction, asynchronous execution is strongly
      * recommended via {@link Transfer#sendFunds(String, BigDecimal, Convert.Unit)}.
      *
      * @param toAddress destination address

File: abi/src/main/java/org/web3j/abi/TypeDecoder.java
Patch:
@@ -564,6 +564,9 @@ private static <T extends Type> T decodeDynamicParameterFromStruct(
         if (DynamicStruct.class.isAssignableFrom(declaredField)) {
             value = decodeDynamicStruct(dynamicElementData, 0, TypeReference.create(declaredField));
         } else if (DynamicArray.class.isAssignableFrom(declaredField)) {
+            if (parameter == null) {
+                throw new RuntimeException("parameter can not be null, try to use annotation @Parameterized to specify the parameter type");
+            }
             value =
                     (T)
                             decodeDynamicArray(

File: codegen/src/test/java/org/web3j/codegen/SolidityFunctionWrapperTest.java
Patch:
@@ -77,6 +77,7 @@ public void setUp() throws Exception {
     public void testCreateValidParamName() {
         assertEquals(createValidParamName("param", 1), ("param"));
         assertEquals(createValidParamName("", 1), ("param1"));
+        assertEquals(createValidParamName("class", 1), ("_class"));
     }
 
     @Test

File: codegen/src/test/java/org/web3j/codegen/SolidityFunctionWrapperTest.java
Patch:
@@ -77,6 +77,7 @@ public void setUp() throws Exception {
     public void testCreateValidParamName() {
         assertEquals(createValidParamName("param", 1), ("param"));
         assertEquals(createValidParamName("", 1), ("param1"));
+        assertEquals(createValidParamName("class", 1), ("_class"));
     }
 
     @Test

File: abi/src/main/java/org/web3j/abi/TypeDecoder.java
Patch:
@@ -564,6 +564,9 @@ private static <T extends Type> T decodeDynamicParameterFromStruct(
         if (DynamicStruct.class.isAssignableFrom(declaredField)) {
             value = decodeDynamicStruct(dynamicElementData, 0, TypeReference.create(declaredField));
         } else if (DynamicArray.class.isAssignableFrom(declaredField)) {
+            if (parameter == null) {
+                throw new RuntimeException("parameter can not be null, try to use annotation @Parameterized to specify the parameter type");
+            }
             value =
                     (T)
                             decodeDynamicArray(

File: core/src/main/java/org/web3j/tx/Transfer.java
Patch:
@@ -38,7 +38,7 @@ public Transfer(Web3j web3j, TransactionManager transactionManager) {
     }
 
     /**
-     * Given the duration required to execute a transaction, asyncronous execution is strongly
+     * Given the duration required to execute a transaction, asynchronous execution is strongly
      * recommended via {@link Transfer#sendFunds(String, BigDecimal, Convert.Unit)}.
      *
      * @param toAddress destination address

File: integration-tests/src/test/java/org/web3j/ens/EnsIT.java
Patch:
@@ -25,10 +25,9 @@
 public class EnsIT {
 
     @Test
-    public void testEns(Web3j web3j) throws Exception {
+    public void testEns(Web3j web3j) {
 
         EnsResolver ensResolver = new EnsResolver(web3j);
-
         assertEquals(
                 ensResolver.resolve("web3j.test"), ("0x19e03255f667bdfd50a32722df860b1eeaf4d635"));
     }

File: integration-tests/src/test/java/org/web3j/protocol/core/TestnetConfig.java
Patch:
@@ -130,7 +130,7 @@ public Transaction buildTransaction(Web3j web3j, ContractGasProvider gasProvider
                 web3j.ethGetTransactionCount(validAccount, DefaultBlockParameterName.LATEST)
                         .send()
                         .getTransactionCount(), // nonce
-                gasProvider.getGasPrice(),
+                BigInteger.ZERO,
                 validContractCode());
     }
 

File: integration-tests/src/test/java/org/web3j/protocol/geth/GethIT.java
Patch:
@@ -28,8 +28,7 @@
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 
-@Disabled
-@EVMTest(type = NodeType.BESU)
+@EVMTest(type = NodeType.GETH)
 public class GethIT {
 
     private Geth web3j;
@@ -41,14 +40,14 @@ public void setUp() {
         this.web3j = Geth.build(new HttpService());
     }
 
-    @Disabled
     @Test // Method not Implemented.
     public void testWeb3ClientVersion() throws Exception {
         TxPoolContent content = web3j.txPoolContent().send();
         assertNotNull(content.getResult());
     }
 
     @Test
+    @Disabled("Deprecated. Replaced by Clef's equivalent method - 'account_new'")
     public void testPersonalAccountCreation() throws IOException {
         Admin admin = Admin.build(new HttpService());
         NewAccountIdentifier accountId = admin.personalNewAccount("web3j-geth-IT").send();

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/EthCallIT.java
Patch:
@@ -67,7 +67,7 @@ public void testRevertWithoutMessage() throws Exception {
     public void testRevertWithMessage() throws Exception {
         EthCall ethCall = ethCall(BigInteger.valueOf(2L));
         assertTrue(ethCall.isReverted());
-        assertFalse(ethCall.getRevertReason().isBlank());
+        assertTrue(ethCall.getRevertReason().contains("Execution reverted"));
     }
 
     private EthCall ethCall(BigInteger value) throws java.io.IOException {

File: codegen/src/test/resources/solidity/arraysinstruct/build/java/ArraysInStruct.java
Patch:
@@ -19,6 +19,7 @@
 import org.web3j.abi.datatypes.generated.Int256;
 import org.web3j.abi.datatypes.generated.StaticArray5;
 import org.web3j.abi.datatypes.generated.Uint256;
+import org.web3j.abi.datatypes.reflection.Parameterized;
 import org.web3j.crypto.Credentials;
 import org.web3j.protocol.Web3j;
 import org.web3j.protocol.core.RemoteFunctionCall;
@@ -209,7 +210,7 @@ public Entity(byte[] bytesField, byte[] extraData, List<String> stringArrayField
             this.addressArrayFieldStatic = addressArrayFieldStatic;
         }
 
-        public Entity(DynamicBytes bytesField, Bytes32 extraData, DynamicArray<Utf8String> stringArrayField, DynamicArray<DynamicBytes> bytesArrayField, DynamicArray<Bytes2> bytes2ArrayField, DynamicArray<Bytes32> bytes32ArrayField, DynamicArray<Uint256> unitArrayField, DynamicArray<Uint256> unit256ArrayField, DynamicArray<Bool> boolField, DynamicArray<Int256> intArrayField, DynamicArray<Address> addressArrayField, StaticArray5<Utf8String> stringArrayFieldStatic, StaticArray5<DynamicBytes> bytesArrayFieldStatic, StaticArray5<Bytes2> bytes2ArrayFieldStatic, StaticArray5<Bytes32> bytes32ArrayFieldStatic, StaticArray5<Uint256> unitArrayFieldStatic, StaticArray5<Uint256> unit256ArrayFieldStatic, StaticArray5<Bool> boolFieldStatic, StaticArray5<Int256> intArrayFieldStatic, StaticArray5<Address> addressArrayFieldStatic) {
+        public Entity(DynamicBytes bytesField, Bytes32 extraData, @Parameterized(type = Utf8String.class) DynamicArray<Utf8String> stringArrayField, @Parameterized(type = DynamicBytes.class) DynamicArray<DynamicBytes> bytesArrayField, @Parameterized(type = Bytes2.class) DynamicArray<Bytes2> bytes2ArrayField, @Parameterized(type = Bytes32.class) DynamicArray<Bytes32> bytes32ArrayField, @Parameterized(type = Uint256.class) DynamicArray<Uint256> unitArrayField, @Parameterized(type = Uint256.class) DynamicArray<Uint256> unit256ArrayField, @Parameterized(type = Bool.class) DynamicArray<Bool> boolField, @Parameterized(type = Int256.class) DynamicArray<Int256> intArrayField, @Parameterized(type = Address.class) DynamicArray<Address> addressArrayField, @Parameterized(type = Utf8String.class) StaticArray5<Utf8String> stringArrayFieldStatic, @Parameterized(type = DynamicBytes.class) StaticArray5<DynamicBytes> bytesArrayFieldStatic, @Parameterized(type = Bytes2.class) StaticArray5<Bytes2> bytes2ArrayFieldStatic, @Parameterized(type = Bytes32.class) StaticArray5<Bytes32> bytes32ArrayFieldStatic, @Parameterized(type = Uint256.class) StaticArray5<Uint256> unitArrayFieldStatic, @Parameterized(type = Uint256.class) StaticArray5<Uint256> unit256ArrayFieldStatic, @Parameterized(type = Bool.class) StaticArray5<Bool> boolFieldStatic, @Parameterized(type = Int256.class) StaticArray5<Int256> intArrayFieldStatic, @Parameterized(type = Address.class) StaticArray5<Address> addressArrayFieldStatic) {
             super(bytesField, extraData, stringArrayField, bytesArrayField, bytes2ArrayField, bytes32ArrayField, unitArrayField, unit256ArrayField, boolField, intArrayField, addressArrayField, stringArrayFieldStatic, bytesArrayFieldStatic, bytes2ArrayFieldStatic, bytes32ArrayFieldStatic, unitArrayFieldStatic, unit256ArrayFieldStatic, boolFieldStatic, intArrayFieldStatic, addressArrayFieldStatic);
             this.bytesField = bytesField.getValue();
             this.extraData = extraData.getValue();

File: integration-tests/src/test/java/org/web3j/protocol/besu/BesuPrivacyQuickstartIntegrationTest.java
Patch:
@@ -79,7 +79,7 @@ public class BesuPrivacyQuickstartIntegrationTest {
 
     @BeforeAll
     public static void setUpOnce() throws InterruptedException, IOException {
-        //        runScript("src/test/resources/quorum-test-network/run.sh");
+        runScript("src/test/resources/quorum-test-network/run.sh");
 
         nodeAlice = Besu.build(new HttpService("http://localhost:20000"));
         nodeBob = Besu.build(new HttpService("http://localhost:20002"));
@@ -90,12 +90,12 @@ public static void setUpOnce() throws InterruptedException, IOException {
         do {
             TimeUnit.MINUTES.sleep(1);
             blockNumber = rpcNode.ethBlockNumber().send().getBlockNumber().intValue();
-        } while (blockNumber <= 60);
+        } while (blockNumber <= 100);
     }
 
     @AfterAll
     public static void stopNetwork() {
-        //        runScript("src/test/resources/quorum-test-network/remove.sh");
+        runScript("src/test/resources/quorum-test-network/remove.sh");
     }
 
     @Test

File: integration-tests/src/test/java/org/web3j/protocol/core/CoreIT.java
Patch:
@@ -75,7 +75,6 @@
 
 /** JSON-RPC 2.0 Integration Tests. */
 @EVMTest(type = NodeType.BESU)
-@Disabled
 public class CoreIT {
 
     private static Web3j web3j;

File: integration-tests/src/test/java/org/web3j/protocol/core/FlowableIT.java
Patch:
@@ -19,7 +19,6 @@
 import io.reactivex.Flowable;
 import io.reactivex.disposables.Disposable;
 import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -34,7 +33,6 @@
 
 /** Flowable callback tests. */
 @EVMTest(type = NodeType.BESU)
-@Disabled
 public class FlowableIT {
     private static final int EVENT_COUNT = 5;
     private static final int TIMEOUT_MINUTES = 1;

File: integration-tests/src/test/java/org/web3j/protocol/geth/GethIT.java
Patch:
@@ -29,7 +29,6 @@
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 
 @EVMTest(type = NodeType.GETH)
-@Disabled
 public class GethIT {
 
     private Geth web3j;

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/ArraysIT.java
Patch:
@@ -33,7 +33,6 @@
 /** Simple integration test to demonstrate arrays usage in web3j. */
 // Needs further implementation on Web3j-Unit Project.
 @EVMTest(type = NodeType.BESU)
-@Disabled
 public class ArraysIT extends Scenario {
 
     private static Arrays contract;

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/CreateRawTransactionIT.java
Patch:
@@ -15,7 +15,6 @@
 import java.math.BigInteger;
 
 import org.junit.jupiter.api.BeforeAll;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import org.web3j.EVMTest;
@@ -36,7 +35,6 @@
 
 /** Create, sign and send a raw transaction. */
 @EVMTest(type = NodeType.BESU)
-@Disabled
 public class CreateRawTransactionIT extends Scenario {
 
     @BeforeAll

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/DeployContractIT.java
Patch:
@@ -16,7 +16,6 @@
 import java.util.List;
 
 import org.junit.jupiter.api.BeforeAll;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import org.web3j.EVMTest;
@@ -40,7 +39,6 @@
 
 /** Integration test demonstrating the full contract deployment workflow. */
 @EVMTest(type = NodeType.BESU)
-@Disabled
 public class DeployContractIT extends Scenario {
 
     @BeforeAll

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/EthCallIT.java
Patch:
@@ -16,7 +16,6 @@
 import java.util.Collections;
 
 import org.junit.jupiter.api.BeforeAll;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import org.web3j.EVMTest;
@@ -37,7 +36,6 @@
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
 @EVMTest(type = NodeType.BESU)
-@Disabled
 public class EthCallIT extends Scenario {
 
     private static Revert contract;

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/EventFilterIT.java
Patch:
@@ -17,7 +17,6 @@
 import java.util.List;
 
 import org.junit.jupiter.api.BeforeAll;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import org.web3j.EVMTest;
@@ -42,7 +41,6 @@
 
 /** Filter scenario integration tests. */
 @EVMTest(type = NodeType.BESU)
-@Disabled
 public class EventFilterIT extends Scenario {
 
     private static Fibonacci fib;

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/FastRawTransactionManagerIT.java
Patch:
@@ -24,7 +24,6 @@
 
 import com.carrotsearch.junitbenchmarks.BenchmarkOptions;
 import org.junit.jupiter.api.BeforeAll;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import org.web3j.EVMTest;
@@ -45,7 +44,6 @@
 
 @EVMTest(type = NodeType.BESU)
 @BenchmarkOptions(concurrency = 1, warmupRounds = 0, benchmarkRounds = 1)
-@Disabled
 public class FastRawTransactionManagerIT extends Scenario {
 
     private static final int COUNT = 5; // don't set too high if using a real Ethereum network

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/FunctionWrappersIT.java
Patch:
@@ -15,7 +15,6 @@
 import java.math.BigInteger;
 
 import org.junit.jupiter.api.BeforeAll;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import org.web3j.EVMTest;
@@ -36,7 +35,6 @@
  * <em>project-home</em>/src/integration-test/java -p org.web3j.generated
  */
 @EVMTest(type = NodeType.BESU)
-@Disabled
 public class FunctionWrappersIT extends Scenario {
 
     private static Fibonacci fib;

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/GreeterContractIT.java
Patch:
@@ -17,7 +17,6 @@
 import java.util.List;
 
 import org.junit.jupiter.api.BeforeAll;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import org.web3j.EVMTest;
@@ -46,7 +45,6 @@
  * the Go Ethereum Wiki.
  */
 @EVMTest(type = NodeType.BESU)
-@Disabled
 public class GreeterContractIT extends Scenario {
 
     private static final String VALUE = "Greetings!";

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/HumanStandardTokenGeneratedIT.java
Patch:
@@ -18,7 +18,6 @@
 
 import io.reactivex.disposables.Disposable;
 import org.junit.jupiter.api.BeforeAll;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import org.web3j.EVMTest;
@@ -36,7 +35,6 @@
 
 /** Generated HumanStandardToken integration test for all supported scenarios. */
 @EVMTest(type = NodeType.BESU)
-@Disabled
 public class HumanStandardTokenGeneratedIT extends Scenario {
 
     @BeforeAll

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/HumanStandardTokenIT.java
Patch:
@@ -18,7 +18,6 @@
 import java.util.List;
 
 import org.junit.jupiter.api.BeforeAll;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import org.web3j.EVMTest;
@@ -56,7 +55,6 @@
  * from <a href="https://github.com/ConsenSys/Tokens">ConsenSys Tokens</a>.
  */
 @EVMTest(type = NodeType.BESU)
-@Disabled
 public class HumanStandardTokenIT extends Scenario {
 
     @BeforeAll

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/SendEtherIT.java
Patch:
@@ -16,7 +16,6 @@
 import java.math.BigInteger;
 
 import org.junit.jupiter.api.BeforeAll;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import org.web3j.EVMTest;
@@ -35,7 +34,6 @@
 
 /** Simple integration test to demonstrate sending of Ether between parties. */
 @EVMTest(type = NodeType.BESU)
-@Disabled
 public class SendEtherIT extends Scenario {
 
     @BeforeAll

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/SignTransactionIT.java
Patch:
@@ -33,7 +33,6 @@
 
 /** Sign transaction using Ethereum node. */
 @EVMTest(type = NodeType.BESU)
-@Disabled
 public class SignTransactionIT extends Scenario {
     @BeforeAll
     public static void setUp(Web3j web3j) {

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/SimpleStorageContractIT.java
Patch:
@@ -15,7 +15,6 @@
 import java.math.BigInteger;
 
 import org.junit.jupiter.api.BeforeAll;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import org.web3j.EVMTest;
@@ -29,7 +28,6 @@
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 
 @EVMTest(type = NodeType.BESU)
-@Disabled
 public class SimpleStorageContractIT extends Scenario {
 
     @BeforeAll

File: codegen/src/test/resources/solidity/arraysinstruct/build/java/ArraysInStruct.java
Patch:
@@ -19,6 +19,7 @@
 import org.web3j.abi.datatypes.generated.Int256;
 import org.web3j.abi.datatypes.generated.StaticArray5;
 import org.web3j.abi.datatypes.generated.Uint256;
+import org.web3j.abi.datatypes.reflection.Parameterized;
 import org.web3j.crypto.Credentials;
 import org.web3j.protocol.Web3j;
 import org.web3j.protocol.core.RemoteFunctionCall;
@@ -209,7 +210,7 @@ public Entity(byte[] bytesField, byte[] extraData, List<String> stringArrayField
             this.addressArrayFieldStatic = addressArrayFieldStatic;
         }
 
-        public Entity(DynamicBytes bytesField, Bytes32 extraData, DynamicArray<Utf8String> stringArrayField, DynamicArray<DynamicBytes> bytesArrayField, DynamicArray<Bytes2> bytes2ArrayField, DynamicArray<Bytes32> bytes32ArrayField, DynamicArray<Uint256> unitArrayField, DynamicArray<Uint256> unit256ArrayField, DynamicArray<Bool> boolField, DynamicArray<Int256> intArrayField, DynamicArray<Address> addressArrayField, StaticArray5<Utf8String> stringArrayFieldStatic, StaticArray5<DynamicBytes> bytesArrayFieldStatic, StaticArray5<Bytes2> bytes2ArrayFieldStatic, StaticArray5<Bytes32> bytes32ArrayFieldStatic, StaticArray5<Uint256> unitArrayFieldStatic, StaticArray5<Uint256> unit256ArrayFieldStatic, StaticArray5<Bool> boolFieldStatic, StaticArray5<Int256> intArrayFieldStatic, StaticArray5<Address> addressArrayFieldStatic) {
+        public Entity(DynamicBytes bytesField, Bytes32 extraData, @Parameterized(type = Utf8String.class) DynamicArray<Utf8String> stringArrayField, @Parameterized(type = DynamicBytes.class) DynamicArray<DynamicBytes> bytesArrayField, @Parameterized(type = Bytes2.class) DynamicArray<Bytes2> bytes2ArrayField, @Parameterized(type = Bytes32.class) DynamicArray<Bytes32> bytes32ArrayField, @Parameterized(type = Uint256.class) DynamicArray<Uint256> unitArrayField, @Parameterized(type = Uint256.class) DynamicArray<Uint256> unit256ArrayField, @Parameterized(type = Bool.class) DynamicArray<Bool> boolField, @Parameterized(type = Int256.class) DynamicArray<Int256> intArrayField, @Parameterized(type = Address.class) DynamicArray<Address> addressArrayField, @Parameterized(type = Utf8String.class) StaticArray5<Utf8String> stringArrayFieldStatic, @Parameterized(type = DynamicBytes.class) StaticArray5<DynamicBytes> bytesArrayFieldStatic, @Parameterized(type = Bytes2.class) StaticArray5<Bytes2> bytes2ArrayFieldStatic, @Parameterized(type = Bytes32.class) StaticArray5<Bytes32> bytes32ArrayFieldStatic, @Parameterized(type = Uint256.class) StaticArray5<Uint256> unitArrayFieldStatic, @Parameterized(type = Uint256.class) StaticArray5<Uint256> unit256ArrayFieldStatic, @Parameterized(type = Bool.class) StaticArray5<Bool> boolFieldStatic, @Parameterized(type = Int256.class) StaticArray5<Int256> intArrayFieldStatic, @Parameterized(type = Address.class) StaticArray5<Address> addressArrayFieldStatic) {
             super(bytesField, extraData, stringArrayField, bytesArrayField, bytes2ArrayField, bytes32ArrayField, unitArrayField, unit256ArrayField, boolField, intArrayField, addressArrayField, stringArrayFieldStatic, bytesArrayFieldStatic, bytes2ArrayFieldStatic, bytes32ArrayFieldStatic, unitArrayFieldStatic, unit256ArrayFieldStatic, boolFieldStatic, intArrayFieldStatic, addressArrayFieldStatic);
             this.bytesField = bytesField.getValue();
             this.extraData = extraData.getValue();

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthBlock.java
Patch:
@@ -673,6 +673,7 @@ public TransactionObject(
                 String r,
                 String s,
                 long v,
+                String yParity,
                 String type,
                 String maxFeePerGas,
                 String maxPriorityFeePerGas,
@@ -696,6 +697,7 @@ public TransactionObject(
                     r,
                     s,
                     v,
+                    yParity,
                     type,
                     maxFeePerGas,
                     maxPriorityFeePerGas,

File: integration-tests/src/test/java/org/web3j/ens/EnsIT.java
Patch:
@@ -25,10 +25,9 @@
 public class EnsIT {
 
     @Test
-    public void testEns(Web3j web3j) throws Exception {
+    public void testEns(Web3j web3j) {
 
         EnsResolver ensResolver = new EnsResolver(web3j);
-
         assertEquals(
                 ensResolver.resolve("web3j.test"), ("0x19e03255f667bdfd50a32722df860b1eeaf4d635"));
     }

File: integration-tests/src/test/java/org/web3j/protocol/core/TestnetConfig.java
Patch:
@@ -130,7 +130,7 @@ public Transaction buildTransaction(Web3j web3j, ContractGasProvider gasProvider
                 web3j.ethGetTransactionCount(validAccount, DefaultBlockParameterName.LATEST)
                         .send()
                         .getTransactionCount(), // nonce
-                gasProvider.getGasPrice(),
+                BigInteger.ZERO,
                 validContractCode());
     }
 

File: integration-tests/src/test/java/org/web3j/protocol/geth/GethIT.java
Patch:
@@ -28,8 +28,7 @@
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 
-@Disabled
-@EVMTest(type = NodeType.BESU)
+@EVMTest(type = NodeType.GETH)
 public class GethIT {
 
     private Geth web3j;
@@ -41,14 +40,14 @@ public void setUp() {
         this.web3j = Geth.build(new HttpService());
     }
 
-    @Disabled
     @Test // Method not Implemented.
     public void testWeb3ClientVersion() throws Exception {
         TxPoolContent content = web3j.txPoolContent().send();
         assertNotNull(content.getResult());
     }
 
     @Test
+    @Disabled("Deprecated. Replaced by Clef's equivalent method - 'account_new'")
     public void testPersonalAccountCreation() throws IOException {
         Admin admin = Admin.build(new HttpService());
         NewAccountIdentifier accountId = admin.personalNewAccount("web3j-geth-IT").send();

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/EthCallIT.java
Patch:
@@ -67,7 +67,7 @@ public void testRevertWithoutMessage() throws Exception {
     public void testRevertWithMessage() throws Exception {
         EthCall ethCall = ethCall(BigInteger.valueOf(2L));
         assertTrue(ethCall.isReverted());
-        assertFalse(ethCall.getRevertReason().isBlank());
+        assertTrue(ethCall.getRevertReason().contains("Execution reverted"));
     }
 
     private EthCall ethCall(BigInteger value) throws java.io.IOException {

File: integration-tests/src/test/java/org/web3j/protocol/parity/ParityIT.java
Patch:
@@ -31,7 +31,7 @@
 
 /** JSON-RPC 2.0 Integration Tests. */
 @Disabled
-@EVMTest(type = NodeType.OPEN_ETHEREUM)
+@EVMTest(type = NodeType.BESU)
 public class ParityIT {
 
     private static String PASSWORD = "1n5ecur3P@55w0rd";

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/ArraysIT.java
Patch:
@@ -32,7 +32,7 @@
 
 /** Simple integration test to demonstrate arrays usage in web3j. */
 // Needs further implementation on Web3j-Unit Project.
-@EVMTest(type = NodeType.OPEN_ETHEREUM)
+@EVMTest(type = NodeType.BESU)
 public class ArraysIT extends Scenario {
 
     private static Arrays contract;

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/EthCallIT.java
Patch:
@@ -35,7 +35,7 @@
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
-@EVMTest(type = NodeType.OPEN_ETHEREUM)
+@EVMTest(type = NodeType.BESU)
 public class EthCallIT extends Scenario {
 
     private static Revert contract;

File: core/src/main/java/org/web3j/crypto/Bip44WalletUtils.java
Patch:
@@ -14,6 +14,7 @@
 
 import java.io.File;
 import java.io.IOException;
+
 import org.web3j.crypto.exception.CipherException;
 
 import static org.web3j.crypto.Bip32ECKeyPair.HARDENED_BIT;

File: core/src/main/java/org/web3j/protocol/core/methods/request/EthFilter.java
Patch:
@@ -15,6 +15,8 @@
 import java.util.Collections;
 import java.util.List;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
+
 import org.web3j.protocol.core.DefaultBlockParameter;
 
 /**
@@ -71,6 +73,7 @@ public List<String> getAddress() {
     }
 
     @Override
+    @JsonIgnore
     EthFilter getThis() {
         return this;
     }

File: core/src/main/java/org/web3j/protocol/core/methods/request/ShhFilter.java
Patch:
@@ -12,6 +12,8 @@
  */
 package org.web3j.protocol.core.methods.request;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
+
 /**
  * Filter implementation as per <a
  * href="https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_newfilter">docs</a>
@@ -29,6 +31,7 @@ public String getTo() {
     }
 
     @Override
+    @JsonIgnore
     ShhFilter getThis() {
         return this;
     }

File: core/src/main/java/org/web3j/protocol/core/methods/request/EthFilter.java
Patch:
@@ -12,11 +12,11 @@
  */
 package org.web3j.protocol.core.methods.request;
 
-import com.fasterxml.jackson.annotation.JsonIgnore;
-
 import java.util.Collections;
 import java.util.List;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
+
 import org.web3j.protocol.core.DefaultBlockParameter;
 
 /**

File: core/src/main/java/org/web3j/protocol/core/methods/request/EthFilter.java
Patch:
@@ -12,6 +12,8 @@
  */
 package org.web3j.protocol.core.methods.request;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
+
 import java.util.Collections;
 import java.util.List;
 
@@ -71,6 +73,7 @@ public List<String> getAddress() {
     }
 
     @Override
+    @JsonIgnore
     EthFilter getThis() {
         return this;
     }

File: core/src/main/java/org/web3j/protocol/core/methods/request/ShhFilter.java
Patch:
@@ -12,6 +12,8 @@
  */
 package org.web3j.protocol.core.methods.request;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
+
 /**
  * Filter implementation as per <a
  * href="https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_newfilter">docs</a>
@@ -29,6 +31,7 @@ public String getTo() {
     }
 
     @Override
+    @JsonIgnore
     ShhFilter getThis() {
         return this;
     }

File: crypto/src/main/java/org/web3j/crypto/Secp256k1JWK.java
Patch:
@@ -21,7 +21,7 @@
 import org.bouncycastle.jcajce.provider.asymmetric.ec.BCECPublicKey;
 
 /**
- * This class consists in java representation of JWK file. It use Builder pater in order to generate
+ * This class consists in java representation of JWK file. It uses Builder pattern in order to generate
  * the JWK content from the BCEC asymetric keys receive as parameters. This class supports
  * generation of JWK only for ECDSA type keys that have secp256k1 curve.
  */

File: core/src/main/java/org/web3j/service/TxHSMSignService.java
Patch:
@@ -56,6 +56,7 @@ public byte[] sign(RawTransaction rawTransaction, long chainId) {
         if (isLegacy) {
             signatureData = createEip155SignatureData(signatureData, chainId);
         }
+
         finalBytes = encode(rawTransaction, signatureData);
 
         return finalBytes;

File: core/src/test/java/org/web3j/protocol/ResponseTester.java
Patch:
@@ -37,7 +37,6 @@ public abstract class ResponseTester {
     @BeforeEach
     public void setUp() {
         responseInterceptor = new ResponseInterceptor();
-//        okHttpClient = new OkHttpClient.Builder().addInterceptor(responseInterceptor).build();
         okHttpClient = new OkHttpClient.Builder().addInterceptor(responseInterceptor).build();
         configureWeb3Service(false);
     }

File: utils/src/main/java/org/web3j/utils/Numeric.java
Patch:
@@ -233,13 +233,13 @@ public static byte[] hexStringToByteArray(String input) {
     }
 
     public static String toHexString(byte[] input, int offset, int length, boolean withPrefix) {
-        final String output = new String(toHexCharArray(input, offset, length, withPrefix));
+        final String output = new String(toHexCharArray(input, offset, length));
         return withPrefix ? new StringBuilder(HEX_PREFIX).append(output).toString() : output;
     }
 
-    private static char[] toHexCharArray(byte[] input, int offset, int length, boolean withPrefix) {
+    private static char[] toHexCharArray(byte[] input, int offset, int length) {
         final char[] output = new char[length << 1];
-        for (int i = offset, j = 0; i < length; i++, j++) {
+        for (int i = offset, j = 0; i < length + offset; i++, j++) {
             final int v = input[i] & 0xFF;
             output[j++] = HEX_CHAR_MAP[v >>> 4];
             output[j] = HEX_CHAR_MAP[v & 0x0F];

File: abi/src/test/java/org/web3j/abi/UtilsTest.java
Patch:
@@ -30,6 +30,7 @@
 import org.web3j.abi.datatypes.Utf8String;
 import org.web3j.abi.datatypes.generated.Int64;
 import org.web3j.abi.datatypes.generated.StaticArray2;
+import org.web3j.abi.datatypes.generated.StaticArray32;
 import org.web3j.abi.datatypes.generated.Uint256;
 import org.web3j.abi.datatypes.generated.Uint64;
 
@@ -50,6 +51,8 @@ public void testGetTypeName() {
         assertEquals(Utils.getTypeName(new TypeReference<Bool>() {}), ("bool"));
         assertEquals(Utils.getTypeName(new TypeReference<Utf8String>() {}), ("string"));
         assertEquals(Utils.getTypeName(new TypeReference<DynamicBytes>() {}), ("bytes"));
+        assertEquals(
+                Utils.getTypeName(new TypeReference<StaticArray32<Uint256>>() {}), ("uint256[32]"));
 
         assertEquals(
                 Utils.getTypeName(

File: abi/src/main/java/org/web3j/abi/TypeDecoder.java
Patch:
@@ -490,7 +490,7 @@ private static <T extends Type> T decodeDynamicStructElements(
                                         0,
                                         TypeReference.create(declaredField));
                         staticOffset +=
-                                staticStructNestedPublicFieldsFlatList((Class<Type>) classType)
+                                staticStructNestedPublicFieldsFlatList((Class<Type>) declaredField)
                                                 .size()
                                         * MAX_BYTE_LENGTH_FOR_HEX_STRING;
                     } else {

File: abi/src/main/java/org/web3j/abi/datatypes/StaticStruct.java
Patch:
@@ -38,7 +38,7 @@ public String getTypeAsString() {
         final StringBuilder type = new StringBuilder("(");
         for (int i = 0; i < itemTypes.size(); ++i) {
             final Class<Type> cls = itemTypes.get(i);
-            if (StructType.class.isAssignableFrom(cls)) {
+            if (StructType.class.isAssignableFrom(cls) || Array.class.isAssignableFrom(cls)) {
                 type.append(getValue().get(i).getTypeAsString());
             } else {
                 type.append(AbiTypes.getTypeAString(cls));

File: core/src/main/java/org/web3j/protocol/websocket/events/NotificationParams.java
Patch:
@@ -22,13 +22,13 @@
 @JsonIgnoreProperties(ignoreUnknown = true)
 public class NotificationParams<T> {
     private T result;
-    private String subsciption;
+    private String subscription;
 
     public T getResult() {
         return result;
     }
 
-    public String getSubsciption() {
-        return subsciption;
+    public String getSubscription() {
+        return subscription;
     }
 }

File: core/src/test/java/org/web3j/protocol/websocket/WebSocketServiceTest.java
Patch:
@@ -394,6 +394,9 @@ public void testPropagateSubscriptionEvent() throws Exception {
         assertEquals(
                 "0xd9263f42a87",
                 actualNotificationRef.get().getParams().getResult().getDifficulty());
+        assertEquals(
+                "0xcd0c3e8af590364c09d0fa6a1210faf5",
+                actualNotificationRef.get().getParams().getSubscription());
     }
 
     @Test

File: core/src/main/java/org/web3j/protocol/websocket/events/NotificationParams.java
Patch:
@@ -22,13 +22,13 @@
 @JsonIgnoreProperties(ignoreUnknown = true)
 public class NotificationParams<T> {
     private T result;
-    private String subsciption;
+    private String subscription;
 
     public T getResult() {
         return result;
     }
 
-    public String getSubsciption() {
-        return subsciption;
+    public String getSubscription() {
+        return subscription;
     }
 }

File: core/src/test/java/org/web3j/protocol/websocket/WebSocketServiceTest.java
Patch:
@@ -394,6 +394,9 @@ public void testPropagateSubscriptionEvent() throws Exception {
         assertEquals(
                 "0xd9263f42a87",
                 actualNotificationRef.get().getParams().getResult().getDifficulty());
+        assertEquals(
+                "0xcd0c3e8af590364c09d0fa6a1210faf5",
+                actualNotificationRef.get().getParams().getSubscription());
     }
 
     @Test

File: codegen/src/test/java/org/web3j/codegen/SolidityFunctionWrapperGeneratorTest.java
Patch:
@@ -219,8 +219,8 @@ private void compareJavaFile(String inputFileName) throws Exception {
                                         inputFileName + ".java"),
                                 File.separator));
         assertEquals(
-                new String(Files.readAllBytes(fileExpected.toPath())),
-                new String(Files.readAllBytes(fileActual.toPath())));
+                new String(Files.readAllBytes(fileExpected.toPath())).replaceAll("(\r\n|\n)", ""),
+                new String(Files.readAllBytes(fileActual.toPath())).replaceAll("(\r\n|\n)", ""));
     }
 
     private void testCodeGenerationJvmTypes(String contractName, String inputFileName)

File: crypto/src/main/java/org/web3j/crypto/TransactionEncoder.java
Patch:
@@ -117,7 +117,7 @@ public static byte[] encode(RawTransaction rawTransaction, Sign.SignatureData si
         RlpList rlpList = new RlpList(values);
         byte[] encoded = RlpEncoder.encode(rlpList);
 
-        if (rawTransaction.getType().isEip1559()) {
+        if (rawTransaction.getType().isEip1559() || rawTransaction.getType().isEip2930()) {
             return ByteBuffer.allocate(encoded.length + 1)
                     .put(rawTransaction.getType().getRlpType())
                     .put(encoded)

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/FastRawTransactionManagerIT.java
Patch:
@@ -46,7 +46,7 @@
 @BenchmarkOptions(concurrency = 1, warmupRounds = 0, benchmarkRounds = 1)
 public class FastRawTransactionManagerIT extends Scenario {
 
-    private static final int COUNT = 10; // don't set too high if using a real Ethereum network
+    private static final int COUNT = 5; // don't set too high if using a real Ethereum network
     private static final long POLLING_FREQUENCY = 15000;
 
     @BeforeAll

File: abi/src/main/java/org/web3j/abi/TypeDecoder.java
Patch:
@@ -490,7 +490,7 @@ private static <T extends Type> T decodeDynamicStructElements(
                                         0,
                                         TypeReference.create(declaredField));
                         staticOffset +=
-                                staticStructNestedPublicFieldsFlatList((Class<Type>) classType)
+                                staticStructNestedPublicFieldsFlatList((Class<Type>) declaredField)
                                                 .size()
                                         * MAX_BYTE_LENGTH_FOR_HEX_STRING;
                     } else {

File: utils/src/main/java/org/web3j/utils/Numeric.java
Patch:
@@ -239,7 +239,8 @@ public static String toHexString(byte[] input, int offset, int length, boolean w
 
     private static char[] toHexCharArray(byte[] input, int offset, int length, boolean withPrefix) {
         final char[] output = new char[length << 1];
-        for (int i = offset, j = 0; i < length; i++, j++) {
+        int end = length + offset;
+        for (int i = offset, j = 0; i < end; i++, j++) {
             final int v = input[i] & 0xFF;
             output[j++] = HEX_CHAR_MAP[v >>> 4];
             output[j] = HEX_CHAR_MAP[v & 0x0F];

File: crypto/src/main/java/org/web3j/crypto/Sign.java
Patch:
@@ -58,7 +58,9 @@ public class Sign {
     static final String MESSAGE_PREFIX = "\u0019Ethereum Signed Message:\n";
 
     static byte[] getEthereumMessagePrefix(int messageLength) {
-        return MESSAGE_PREFIX.concat(String.valueOf(messageLength)).getBytes(StandardCharsets.UTF_8);
+        return MESSAGE_PREFIX
+                .concat(String.valueOf(messageLength))
+                .getBytes(StandardCharsets.UTF_8);
     }
 
     public static byte[] getEthereumMessageHash(byte[] message) {

File: crypto/src/main/java/org/web3j/crypto/Sign.java
Patch:
@@ -12,8 +12,8 @@
  */
 package org.web3j.crypto;
 
-import java.nio.charset.StandardCharsets;
 import java.math.BigInteger;
+import java.nio.charset.StandardCharsets;
 import java.security.SignatureException;
 import java.util.Arrays;
 

File: abi/src/main/java/org/web3j/abi/EventEncoder.java
Patch:
@@ -42,7 +42,7 @@ static <T extends Type> String buildMethodSignature(
         result.append(methodName);
         result.append("(");
         String params =
-                parameters.stream().map(p -> Utils.getTypeName(p)).collect(Collectors.joining(","));
+                parameters.stream().map(Utils::getTypeName).collect(Collectors.joining(","));
         result.append(params);
         result.append(")");
         return result.toString();

File: abi/src/main/java/org/web3j/abi/datatypes/DynamicStruct.java
Patch:
@@ -51,7 +51,8 @@ public String getTypeAsString() {
         final StringBuilder type = new StringBuilder("(");
         for (int i = 0; i < itemTypes.size(); ++i) {
             final Class<Type> cls = itemTypes.get(i);
-            if (StructType.class.isAssignableFrom(cls)) {
+            if (StructType.class.isAssignableFrom(cls)
+                    || DynamicArray.class.isAssignableFrom(cls)) {
                 type.append(getValue().get(i).getTypeAsString());
             } else if (Array.class.isAssignableFrom(cls)) {
                 type.append(getValue().get(i).getTypeAsString());

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthCall.java
Patch:
@@ -21,6 +21,7 @@
 import org.web3j.abi.datatypes.Type;
 import org.web3j.abi.datatypes.Utf8String;
 import org.web3j.protocol.core.Response;
+import org.web3j.utils.EnsUtils;
 
 /** eth_call. */
 public class EthCall extends Response<String> {
@@ -39,7 +40,7 @@ public String getValue() {
 
     public boolean isReverted() {
         if (hasError() && getError().getCode() == 3 && getError().getData() != null) {
-            return false;
+            return !EnsUtils.isEIP3668(getError().getData());
         }
 
         return hasError() || isErrorInResult();

File: core/src/main/java/org/web3j/protocol/core/DefaultBlockParameterName.java
Patch:
@@ -20,7 +20,8 @@ public enum DefaultBlockParameterName implements DefaultBlockParameter {
     LATEST("latest"),
     PENDING("pending"),
     FINALIZED("finalized"),
-    SAFE("safe");
+    SAFE("safe"),
+    ACCEPTED("accepted");
 
     private String name;
 

File: abi/src/main/java/org/web3j/abi/datatypes/DynamicStruct.java
Patch:
@@ -53,6 +53,8 @@ public String getTypeAsString() {
             final Class<Type> cls = itemTypes.get(i);
             if (StructType.class.isAssignableFrom(cls)) {
                 type.append(getValue().get(i).getTypeAsString());
+            } else if (Array.class.isAssignableFrom(cls)) {
+                type.append(getValue().get(i).getTypeAsString());
             } else {
                 type.append(AbiTypes.getTypeAString(cls));
             }

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/FastRawTransactionManagerIT.java
Patch:
@@ -54,7 +54,7 @@ public static void setUp(Web3j web3j) {
         Scenario.web3j = web3j;
     }
 
-    //@Test broken test
+    // @Test broken test
     public void testTransactionPolling() throws Exception {
 
         List<Future<TransactionReceipt>> transactionReceipts = new LinkedList<>();

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/FastRawTransactionManagerIT.java
Patch:
@@ -54,7 +54,7 @@ public static void setUp(Web3j web3j) {
         Scenario.web3j = web3j;
     }
 
-    @Test
+    //@Test broken test
     public void testTransactionPolling() throws Exception {
 
         List<Future<TransactionReceipt>> transactionReceipts = new LinkedList<>();

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthCall.java
Patch:
@@ -21,7 +21,6 @@
 import org.web3j.abi.datatypes.Type;
 import org.web3j.abi.datatypes.Utf8String;
 import org.web3j.protocol.core.Response;
-import org.web3j.utils.EnsUtils;
 
 /** eth_call. */
 public class EthCall extends Response<String> {
@@ -40,7 +39,7 @@ public String getValue() {
 
     public boolean isReverted() {
         if (hasError() && getError().getCode() == 3 && getError().getData() != null) {
-            return !EnsUtils.isEIP3668(getError().getData());
+            return false;
         }
 
         return hasError() || isErrorInResult();

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthCall.java
Patch:
@@ -21,6 +21,7 @@
 import org.web3j.abi.datatypes.Type;
 import org.web3j.abi.datatypes.Utf8String;
 import org.web3j.protocol.core.Response;
+import org.web3j.utils.EnsUtils;
 
 /** eth_call. */
 public class EthCall extends Response<String> {
@@ -39,7 +40,7 @@ public String getValue() {
 
     public boolean isReverted() {
         if (hasError() && getError().getCode() == 3 && getError().getData() != null) {
-            return false;
+            return !EnsUtils.isEIP3668(getError().getData());
         }
 
         return hasError() || isErrorInResult();

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthCall.java
Patch:
@@ -21,6 +21,7 @@
 import org.web3j.abi.datatypes.Type;
 import org.web3j.abi.datatypes.Utf8String;
 import org.web3j.protocol.core.Response;
+import org.web3j.utils.EnsUtils;
 
 /** eth_call. */
 public class EthCall extends Response<String> {
@@ -39,7 +40,7 @@ public String getValue() {
 
     public boolean isReverted() {
         if (hasError() && getError().getCode() == 3 && getError().getData() != null) {
-            return false;
+            return !EnsUtils.isEIP3668(getError().getData());
         }
 
         return hasError() || isErrorInResult();

File: abi/src/main/java/org/web3j/abi/datatypes/DynamicStruct.java
Patch:
@@ -53,6 +53,8 @@ public String getTypeAsString() {
             final Class<Type> cls = itemTypes.get(i);
             if (StructType.class.isAssignableFrom(cls)) {
                 type.append(getValue().get(i).getTypeAsString());
+            } else if (Array.class.isAssignableFrom(cls)) {
+                type.append(getValue().get(i).getTypeAsString());
             } else {
                 type.append(AbiTypes.getTypeAString(cls));
             }

File: abi/src/main/java/org/web3j/abi/TypeReference.java
Patch:
@@ -91,7 +91,7 @@ public Class<T> getClassType() throws ClassNotFoundException {
         if (getType() instanceof ParameterizedType) {
             return (Class<T>) ((ParameterizedType) clsType).getRawType();
         } else {
-            return (Class<T>) Class.forName(clsType.getTypeName());
+            return (Class<T>) Class.forName(Utils.getTypeName(clsType));
         }
     }
 

File: besu/src/test/java/org/web3j/protocol/besu/RequestTest.java
Patch:
@@ -132,7 +132,7 @@ public void testDebugTraceTransaction() throws Exception {
     }
 
     @Test
- add-qbft    public void testIbftDiscardValidatorVote() throws Exception {
+    public void testIbftDiscardValidatorVote() throws Exception {
         final String accountId = "0xFE3B557E8Fb62b89F4916B721be55cEb828dBd73";
         web3j.ibftDiscardValidatorVote(accountId).send();
 

File: abi/src/main/java/org/web3j/abi/TypeReference.java
Patch:
@@ -91,7 +91,7 @@ public Class<T> getClassType() throws ClassNotFoundException {
         if (getType() instanceof ParameterizedType) {
             return (Class<T>) ((ParameterizedType) clsType).getRawType();
         } else {
-            return (Class<T>) Class.forName(clsType.getTypeName());
+            return (Class<T>) Class.forName(Utils.getTypeName(clsType));
         }
     }
 

File: core/src/main/java/org/web3j/protocol/core/filters/Filter.java
Patch:
@@ -94,7 +94,7 @@ public void run(ScheduledExecutorService scheduledExecutorService, long blockTim
                                     // All exceptions must be caught, otherwise our job terminates
                                     // without
                                     // any notification
-                                    log.error("Error sending request", e);
+                                    log.warn("Error sending request", e);
                                 }
                             },
                             0,

File: core/src/main/java/org/web3j/protocol/websocket/WebSocketService.java
Patch:
@@ -128,11 +128,10 @@ private void connectToWebSocket() throws InterruptedException, ConnectException
                         ? webSocketClient.reconnectBlocking()
                         : webSocketClient.connectBlocking();
 
+        shouldReConnect = true;
         if (!connected) {
             throw new ConnectException("Failed to connect to WebSocket");
         }
-
-        shouldReConnect = true;
     }
 
     private void setWebSocketListener(

File: crypto/src/main/java/org/web3j/crypto/SignatureDataOperations.java
Patch:
@@ -17,10 +17,10 @@
 
 import org.web3j.utils.Numeric;
 
-public interface SignatureDataOperations {
+import static org.web3j.crypto.Sign.CHAIN_ID_INC;
+import static org.web3j.crypto.Sign.LOWER_REAL_V;
 
-    int CHAIN_ID_INC = 35;
-    int LOWER_REAL_V = 27;
+public interface SignatureDataOperations {
 
     Sign.SignatureData getSignatureData();
 

File: crypto/src/main/java/org/web3j/crypto/TransactionEncoder.java
Patch:
@@ -22,15 +22,15 @@
 import org.web3j.rlp.RlpType;
 import org.web3j.utils.Numeric;
 
+import static org.web3j.crypto.Sign.CHAIN_ID_INC;
+import static org.web3j.crypto.Sign.LOWER_REAL_V;
+
 /**
  * Create RLP encoded transaction, implementation as per p4 of the <a
  * href="http://gavwood.com/paper.pdf">yellow paper</a>.
  */
 public class TransactionEncoder {
 
-    private static final int CHAIN_ID_INC = 35;
-    private static final int LOWER_REAL_V = 27;
-
     /**
      * Use for new transactions Eip1559 (this txs has a new field chainId) or an old one before
      * Eip155

File: codegen/src/main/java/org/web3j/codegen/SolidityFunctionWrapperGenerator.java
Patch:
@@ -116,7 +116,7 @@ public SolidityFunctionWrapperGenerator(
                 abiFuncs);
     }
 
-    protected SolidityFunctionWrapperGenerator(
+    public SolidityFunctionWrapperGenerator(
             File binFile,
             File abiFile,
             File destinationDir,

File: crypto/src/main/java/org/web3j/crypto/Sign.java
Patch:
@@ -145,7 +145,7 @@ public static Sign.SignatureData createSignatureData(
      * @return An ECKey containing only the public part, or null if recovery wasn't possible.
      */
     public static BigInteger recoverFromSignature(int recId, ECDSASignature sig, byte[] message) {
-        verifyPrecondition(recId >= 0, "recId must be positive");
+        verifyPrecondition(recId >= 0 && recId <= 3, "recId must be in the range of [0, 3]");
         verifyPrecondition(sig.r.signum() >= 0, "r must be positive");
         verifyPrecondition(sig.s.signum() >= 0, "s must be positive");
         verifyPrecondition(message != null, "message cannot be null");

File: crypto/src/main/java/org/web3j/crypto/SignatureDataOperations.java
Patch:
@@ -17,10 +17,10 @@
 
 import org.web3j.utils.Numeric;
 
-public interface SignatureDataOperations {
+import static org.web3j.crypto.Sign.CHAIN_ID_INC;
+import static org.web3j.crypto.Sign.LOWER_REAL_V;
 
-    int CHAIN_ID_INC = 35;
-    int LOWER_REAL_V = 27;
+public interface SignatureDataOperations {
 
     Sign.SignatureData getSignatureData();
 

File: crypto/src/main/java/org/web3j/crypto/TransactionEncoder.java
Patch:
@@ -22,15 +22,15 @@
 import org.web3j.rlp.RlpType;
 import org.web3j.utils.Numeric;
 
+import static org.web3j.crypto.Sign.CHAIN_ID_INC;
+import static org.web3j.crypto.Sign.LOWER_REAL_V;
+
 /**
  * Create RLP encoded transaction, implementation as per p4 of the <a
  * href="http://gavwood.com/paper.pdf">yellow paper</a>.
  */
 public class TransactionEncoder {
 
-    private static final int CHAIN_ID_INC = 35;
-    private static final int LOWER_REAL_V = 27;
-
     /**
      * Use for new transactions Eip1559 (this txs has a new field chainId) or an old one before
      * Eip155

File: abi/src/main/java/org/web3j/abi/DefaultFunctionReturnDecoder.java
Patch:
@@ -136,6 +136,9 @@ private static List<Type> build(String input, List<TypeReference<Type>> outputPa
                                                 .size()
                                         * length
                                         * MAX_BYTE_LENGTH_FOR_HEX_STRING;
+                    } else if (Utf8String.class.isAssignableFrom(
+                            getParameterizedTypeFromArray(typeReference))) {
+                        offset += MAX_BYTE_LENGTH_FOR_HEX_STRING;
                     } else {
                         offset += length * MAX_BYTE_LENGTH_FOR_HEX_STRING;
                     }

File: codegen/src/test/resources/solidity/onlyinarraystruct/build/java/OnlyInArrayStruct.java
Patch:
@@ -101,13 +101,14 @@ public static class Foo extends DynamicStruct {
         public String name;
 
         public Foo(String id, String name) {
-            super(new org.web3j.abi.datatypes.Utf8String(id),new org.web3j.abi.datatypes.Utf8String(name));
+            super(new org.web3j.abi.datatypes.Utf8String(id), 
+                    new org.web3j.abi.datatypes.Utf8String(name));
             this.id = id;
             this.name = name;
         }
 
         public Foo(Utf8String id, Utf8String name) {
-            super(id,name);
+            super(id, name);
             this.id = id.getValue();
             this.name = name.getValue();
         }

File: core/src/main/java/org/web3j/ens/Contracts.java
Patch:
@@ -20,6 +20,7 @@ public class Contracts {
     public static final String MAINNET = "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
     public static final String ROPSTEN = "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
     public static final String RINKEBY = "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
+    public static final String GOERLI = "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
 
     public static String resolveRegistryContract(String chainId) {
         final Long chainIdLong = Long.parseLong(chainId);
@@ -29,6 +30,8 @@ public static String resolveRegistryContract(String chainId) {
             return ROPSTEN;
         } else if (chainIdLong.equals(ChainIdLong.RINKEBY)) {
             return RINKEBY;
+        } else if (chainIdLong.equals(ChainIdLong.GOERLI)) {
+            return GOERLI;
         } else {
             throw new EnsResolutionException(
                     "Unable to resolve ENS registry contract for network id: " + chainId);

File: core/src/main/java/org/web3j/protocol/core/filters/Filter.java
Patch:
@@ -94,7 +94,7 @@ public void run(ScheduledExecutorService scheduledExecutorService, long blockTim
                                     // All exceptions must be caught, otherwise our job terminates
                                     // without
                                     // any notification
-                                    log.error("Error sending request", e);
+                                    log.warn("Error sending request", e);
                                 }
                             },
                             0,

File: core/src/main/java/org/web3j/protocol/websocket/WebSocketService.java
Patch:
@@ -128,11 +128,10 @@ private void connectToWebSocket() throws InterruptedException, ConnectException
                         ? webSocketClient.reconnectBlocking()
                         : webSocketClient.connectBlocking();
 
+        shouldReConnect = true;
         if (!connected) {
             throw new ConnectException("Failed to connect to WebSocket");
         }
-
-        shouldReConnect = true;
     }
 
     private void setWebSocketListener(

File: core/src/main/java/org/web3j/tx/ChainIdLong.java
Patch:
@@ -18,6 +18,7 @@ public class ChainIdLong {
     public static final long EXPANSE_MAINNET = 2;
     public static final long ROPSTEN = 3;
     public static final long RINKEBY = 4;
+    public static final long GOERLI = 5;
     public static final long ROOTSTOCK_MAINNET = 30;
     public static final long ROOTSTOCK_TESTNET = 31;
     public static final long KOVAN = 42;

File: core/src/main/java/org/web3j/tx/TransactionManager.java
Patch:
@@ -21,6 +21,7 @@
 import org.web3j.protocol.core.methods.response.EthGetCode;
 import org.web3j.protocol.core.methods.response.EthSendTransaction;
 import org.web3j.protocol.core.methods.response.TransactionReceipt;
+import org.web3j.protocol.exceptions.JsonRpcError;
 import org.web3j.protocol.exceptions.TransactionException;
 import org.web3j.tx.exceptions.ContractCallException;
 import org.web3j.tx.response.PollingTransactionReceiptProcessor;
@@ -171,9 +172,7 @@ public String getFromAddress() {
     protected TransactionReceipt processResponse(EthSendTransaction transactionResponse)
             throws IOException, TransactionException {
         if (transactionResponse.hasError()) {
-            throw new RuntimeException(
-                    "Error processing transaction request: "
-                            + transactionResponse.getError().getMessage());
+            throw new JsonRpcError(transactionResponse.getError());
         }
 
         String transactionHash = transactionResponse.getTransactionHash();

File: crypto/src/main/java/org/web3j/crypto/transaction/type/LegacyTransaction.java
Patch:
@@ -49,6 +49,8 @@ public LegacyTransaction(
         this(LEGACY, nonce, gasPrice, gasLimit, to, value, data);
     }
 
+    // LegacyTransaction can have only one tx type. Use another constructor.
+    @Deprecated
     public LegacyTransaction(
             TransactionType type,
             BigInteger nonce,

File: core/src/main/java/org/web3j/protocol/core/filters/Filter.java
Patch:
@@ -94,7 +94,7 @@ public void run(ScheduledExecutorService scheduledExecutorService, long blockTim
                                     // All exceptions must be caught, otherwise our job terminates
                                     // without
                                     // any notification
-                                    log.error("Error sending request", e);
+                                    log.warn("Error sending request", e);
                                 }
                             },
                             0,

File: core/src/main/java/org/web3j/protocol/core/filters/Filter.java
Patch:
@@ -94,7 +94,7 @@ public void run(ScheduledExecutorService scheduledExecutorService, long blockTim
                                     // All exceptions must be caught, otherwise our job terminates
                                     // without
                                     // any notification
-                                    log.error("Error sending request", e);
+                                    log.warn("Error sending request", e);
                                 }
                             },
                             0,

File: core/src/main/java/org/web3j/protocol/websocket/WebSocketService.java
Patch:
@@ -128,11 +128,10 @@ private void connectToWebSocket() throws InterruptedException, ConnectException
                         ? webSocketClient.reconnectBlocking()
                         : webSocketClient.connectBlocking();
 
+        shouldReConnect = true;
         if (!connected) {
             throw new ConnectException("Failed to connect to WebSocket");
         }
-
-        shouldReConnect = true;
     }
 
     private void setWebSocketListener(

File: core/src/test/java/org/web3j/protocol/websocket/WebSocketServiceTest.java
Patch:
@@ -134,7 +134,7 @@ public void testReconnectIfFirstConnectionFailed() throws Exception {
         // reconnectBlocking() should be called if 1st attempt was failed, if we call
         // connectBlocking() for a second time, we will get IllegalStateException with real
         // webSocketClient
-        verify(webSocketClient, times(1)).reconnectBlocking();
+        verify(webSocketClient, atMostOnce()).reconnectBlocking();
     }
 
     @Test

File: core/src/test/java/org/web3j/protocol/websocket/WebSocketServiceTest.java
Patch:
@@ -134,7 +134,7 @@ public void testReconnectIfFirstConnectionFailed() throws Exception {
         // reconnectBlocking() should be called if 1st attempt was failed, if we call
         // connectBlocking() for a second time, we will get IllegalStateException with real
         // webSocketClient
-        verify(webSocketClient, times(1)).reconnectBlocking();
+        verify(webSocketClient, atMostOnce()).reconnectBlocking();
     }
 
     @Test

File: core/src/main/java/org/web3j/tx/Contract.java
Patch:
@@ -383,7 +383,7 @@ TransactionReceipt executeTransaction(
                             receipt.getGasUsedRaw() != null
                                     ? receipt.getGasUsed().toString()
                                     : "unknown",
-                            extractRevertReason(receipt, data, web3j, true)),
+                            extractRevertReason(receipt, data, web3j, true, weiValue)),
                     receipt);
         }
         return receipt;

File: abi/src/main/java/org/web3j/abi/FunctionReturnDecoder.java
Patch:
@@ -82,7 +82,7 @@ protected abstract List<Type> decodeFunctionResult(
     protected abstract <T extends Type> Type decodeEventParameter(
             String rawInput, TypeReference<T> typeReference);
 
-    private static FunctionReturnDecoder decoder() {
+    private static synchronized FunctionReturnDecoder decoder() {
         final Iterator<FunctionReturnDecoderProvider> iterator = loader.iterator();
         return iterator.hasNext() ? iterator.next().get() : defaultDecoder();
     }

File: codegen/src/main/java/org/web3j/codegen/SolidityFunctionWrapper.java
Patch:
@@ -1340,11 +1340,10 @@ List<MethodSpec> buildFunctions(
 
         String stateMutability = functionDefinition.getStateMutability();
         boolean pureOrView = "pure".equals(stateMutability) || "view".equals(stateMutability);
-        boolean isFunctionDefinitionConstant = functionDefinition.isConstant() || pureOrView;
 
         if (generateBothCallAndSend) {
             final String funcNamePrefix;
-            if (isFunctionDefinitionConstant ^ generateViceversa) {
+            if (pureOrView ^ generateViceversa) {
                 funcNamePrefix = "call";
             } else {
                 funcNamePrefix = "send";
@@ -1366,7 +1365,7 @@ List<MethodSpec> buildFunctions(
         final List<TypeName> outputParameterTypes =
                 buildTypeNames(functionDefinition.getOutputs(), useJavaPrimitiveTypes);
 
-        if (isFunctionDefinitionConstant ^ generateViceversa) {
+        if (pureOrView ^ generateViceversa) {
             // Avoid generating runtime exception call
             if (functionDefinition.hasOutputs()) {
                 buildConstantFunction(

File: core/src/main/java/org/web3j/protocol/websocket/WebSocketService.java
Patch:
@@ -128,11 +128,10 @@ private void connectToWebSocket() throws InterruptedException, ConnectException
                         ? webSocketClient.reconnectBlocking()
                         : webSocketClient.connectBlocking();
 
+        shouldReConnect = true;
         if (!connected) {
             throw new ConnectException("Failed to connect to WebSocket");
         }
-
-        shouldReConnect = true;
     }
 
     private void setWebSocketListener(

File: abi/src/main/java/org/web3j/abi/DefaultFunctionReturnDecoder.java
Patch:
@@ -136,6 +136,9 @@ private static List<Type> build(String input, List<TypeReference<Type>> outputPa
                                                 .size()
                                         * length
                                         * MAX_BYTE_LENGTH_FOR_HEX_STRING;
+                    } else if (Utf8String.class.isAssignableFrom(
+                            getParameterizedTypeFromArray(typeReference))) {
+                        offset += MAX_BYTE_LENGTH_FOR_HEX_STRING;
                     } else {
                         offset += length * MAX_BYTE_LENGTH_FOR_HEX_STRING;
                     }

File: abi/src/main/java/org/web3j/abi/DefaultFunctionReturnDecoder.java
Patch:
@@ -136,6 +136,9 @@ private static List<Type> build(String input, List<TypeReference<Type>> outputPa
                                                 .size()
                                         * length
                                         * MAX_BYTE_LENGTH_FOR_HEX_STRING;
+                    } else if (Utf8String.class.isAssignableFrom(
+                            getParameterizedTypeFromArray(typeReference))) {
+                        offset += MAX_BYTE_LENGTH_FOR_HEX_STRING;
                     } else {
                         offset += length * MAX_BYTE_LENGTH_FOR_HEX_STRING;
                     }

File: core/src/main/java/org/web3j/tx/TransactionManager.java
Patch:
@@ -21,6 +21,7 @@
 import org.web3j.protocol.core.methods.response.EthGetCode;
 import org.web3j.protocol.core.methods.response.EthSendTransaction;
 import org.web3j.protocol.core.methods.response.TransactionReceipt;
+import org.web3j.protocol.exceptions.JsonRpcError;
 import org.web3j.protocol.exceptions.TransactionException;
 import org.web3j.tx.exceptions.ContractCallException;
 import org.web3j.tx.response.PollingTransactionReceiptProcessor;
@@ -171,9 +172,7 @@ public String getFromAddress() {
     protected TransactionReceipt processResponse(EthSendTransaction transactionResponse)
             throws IOException, TransactionException {
         if (transactionResponse.hasError()) {
-            throw new RuntimeException(
-                    "Error processing transaction request: "
-                            + transactionResponse.getError().getMessage());
+            throw new JsonRpcError(transactionResponse.getError());
         }
 
         String transactionHash = transactionResponse.getTransactionHash();

File: core/src/main/java/org/web3j/ens/Contracts.java
Patch:
@@ -20,6 +20,7 @@ public class Contracts {
     public static final String MAINNET = "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
     public static final String ROPSTEN = "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
     public static final String RINKEBY = "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
+    public static final String GOERLI = "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
 
     public static String resolveRegistryContract(String chainId) {
         final Long chainIdLong = Long.parseLong(chainId);
@@ -29,6 +30,8 @@ public static String resolveRegistryContract(String chainId) {
             return ROPSTEN;
         } else if (chainIdLong.equals(ChainIdLong.RINKEBY)) {
             return RINKEBY;
+        } else if (chainIdLong.equals(ChainIdLong.GOERLI)) {
+            return GOERLI;
         } else {
             throw new EnsResolutionException(
                     "Unable to resolve ENS registry contract for network id: " + chainId);

File: core/src/main/java/org/web3j/tx/ChainIdLong.java
Patch:
@@ -18,6 +18,7 @@ public class ChainIdLong {
     public static final long EXPANSE_MAINNET = 2;
     public static final long ROPSTEN = 3;
     public static final long RINKEBY = 4;
+    public static final long GOERLI = 5;
     public static final long ROOTSTOCK_MAINNET = 30;
     public static final long ROOTSTOCK_TESTNET = 31;
     public static final long KOVAN = 42;

File: crypto/src/main/java/org/web3j/crypto/transaction/type/LegacyTransaction.java
Patch:
@@ -49,6 +49,8 @@ public LegacyTransaction(
         this(LEGACY, nonce, gasPrice, gasLimit, to, value, data);
     }
 
+    // LegacyTransaction can have only one tx type. Use another constructor.
+    @Deprecated
     public LegacyTransaction(
             TransactionType type,
             BigInteger nonce,

File: core/src/main/java/org/web3j/ens/EnsResolver.java
Patch:
@@ -86,8 +86,7 @@ protected PublicResolver obtainPublicResolver(String ensName) {
 
     public String resolve(String ensName) {
 
-        if (Strings.isEmpty(ensName.trim())
-                || (ensName.trim().length() == 1 && ensName.contains("."))) {
+        if (Strings.isBlank(ensName) || (ensName.trim().length() == 1 && ensName.contains("."))) {
             return null;
         }
 

File: core/src/main/java/org/web3j/ens/Contracts.java
Patch:
@@ -20,6 +20,7 @@ public class Contracts {
     public static final String MAINNET = "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
     public static final String ROPSTEN = "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
     public static final String RINKEBY = "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
+    public static final String GOERLI = "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
 
     public static String resolveRegistryContract(String chainId) {
         final Long chainIdLong = Long.parseLong(chainId);
@@ -29,6 +30,8 @@ public static String resolveRegistryContract(String chainId) {
             return ROPSTEN;
         } else if (chainIdLong.equals(ChainIdLong.RINKEBY)) {
             return RINKEBY;
+        } else if (chainIdLong.equals(ChainIdLong.GOERLI)) {
+            return GOERLI;
         } else {
             throw new EnsResolutionException(
                     "Unable to resolve ENS registry contract for network id: " + chainId);

File: core/src/main/java/org/web3j/tx/ChainIdLong.java
Patch:
@@ -18,6 +18,7 @@ public class ChainIdLong {
     public static final long EXPANSE_MAINNET = 2;
     public static final long ROPSTEN = 3;
     public static final long RINKEBY = 4;
+    public static final long GOERLI = 5;
     public static final long ROOTSTOCK_MAINNET = 30;
     public static final long ROOTSTOCK_TESTNET = 31;
     public static final long KOVAN = 42;

File: crypto/src/main/java/org/web3j/crypto/TransactionEncoder.java
Patch:
@@ -91,7 +91,7 @@ public static byte[] encode(RawTransaction rawTransaction, byte chainId) {
         return encode(rawTransaction, (long) chainId);
     }
 
-    private static byte[] encode(RawTransaction rawTransaction, Sign.SignatureData signatureData) {
+    public static byte[] encode(RawTransaction rawTransaction, Sign.SignatureData signatureData) {
         List<RlpType> values = asRlpValues(rawTransaction, signatureData);
         RlpList rlpList = new RlpList(values);
         byte[] encoded = RlpEncoder.encode(rlpList);

File: codegen/src/test/resources/solidity/onlyinarraystruct/build/java/OnlyInArrayStruct.java
Patch:
@@ -101,13 +101,14 @@ public static class Foo extends DynamicStruct {
         public String name;
 
         public Foo(String id, String name) {
-            super(new org.web3j.abi.datatypes.Utf8String(id),new org.web3j.abi.datatypes.Utf8String(name));
+            super(new org.web3j.abi.datatypes.Utf8String(id), 
+                    new org.web3j.abi.datatypes.Utf8String(name));
             this.id = id;
             this.name = name;
         }
 
         public Foo(Utf8String id, Utf8String name) {
-            super(id,name);
+            super(id, name);
             this.id = id.getValue();
             this.name = name.getValue();
         }

File: codegen/src/test/resources/solidity/onlyinarraystruct/build/java/OnlyInArrayStruct.java
Patch:
@@ -101,13 +101,14 @@ public static class Foo extends DynamicStruct {
         public String name;
 
         public Foo(String id, String name) {
-            super(new org.web3j.abi.datatypes.Utf8String(id),new org.web3j.abi.datatypes.Utf8String(name));
+            super(new org.web3j.abi.datatypes.Utf8String(id), 
+                    new org.web3j.abi.datatypes.Utf8String(name));
             this.id = id;
             this.name = name;
         }
 
         public Foo(Utf8String id, Utf8String name) {
-            super(id,name);
+            super(id, name);
             this.id = id.getValue();
             this.name = name.getValue();
         }

File: crypto/src/test/java/org/web3j/crypto/SignTest.java
Patch:
@@ -83,8 +83,7 @@ public void testPublicKeyFromPrivatePoint() {
 
     @ParameterizedTest
     @MethodSource("recIdArguments")
-    public void testGetRecIdForEip155(
-            final long chainId, final long recId, final boolean isEip155) {
+    public void testGetRecId(final long chainId, final long recId, final boolean isEip155) {
         final long testV = isEip155 ? CHAIN_ID_INC + chainId * 2 + recId : LOWER_REAL_V + recId;
         final Sign.SignatureData signedMsg =
                 new Sign.SignatureData((byte) testV, new byte[] {}, new byte[] {});

File: crypto/src/main/java/org/web3j/crypto/Sign.java
Patch:
@@ -281,7 +281,9 @@ public static int getRecId(SignatureData signatureData, long chainId) {
         if (v.equals(lowerRealV) || v.equals(lowerRealVPlus1)) {
             return v.subtract(lowerRealV).intValue();
         } else if (v.compareTo(chainIdInc) > 0) {
-            return v.subtract(BigInteger.valueOf(chainId).multiply(TWO)).add(chainIdInc).intValue();
+            return v.subtract(BigInteger.valueOf(chainId).multiply(TWO))
+                    .subtract(chainIdInc)
+                    .intValue();
         } else {
             throw new RuntimeException(String.format("Unsupported format exception", v));
         }

File: codegen/src/main/java/org/web3j/codegen/SolidityFunctionWrapper.java
Patch:
@@ -445,7 +445,9 @@ private List<TypeSpec> buildStructTypes(final List<AbiDefinition> functionDefini
             if (internalType == null || internalType.isEmpty()) {
                 structName = "Struct" + structCounter;
             } else {
-                structName = internalType.substring(internalType.lastIndexOf(".") + 1);
+                final String fullStructName =
+                        internalType.substring(internalType.lastIndexOf(" ") + 1);
+                structName = fullStructName.substring(fullStructName.lastIndexOf(".") + 1);
             }
 
             final TypeSpec.Builder builder =

File: codegen/src/main/java/org/web3j/codegen/SolidityFunctionWrapper.java
Patch:
@@ -445,7 +445,9 @@ private List<TypeSpec> buildStructTypes(final List<AbiDefinition> functionDefini
             if (internalType == null || internalType.isEmpty()) {
                 structName = "Struct" + structCounter;
             } else {
-                structName = internalType.substring(internalType.lastIndexOf(".") + 1);
+                final String fullStructName =
+                        internalType.substring(internalType.lastIndexOf(" ") + 1);
+                structName = fullStructName.substring(fullStructName.lastIndexOf(".") + 1);
             }
 
             final TypeSpec.Builder builder =

File: codegen/src/main/java/org/web3j/codegen/SolidityFunctionWrapperGenerator.java
Patch:
@@ -265,7 +265,6 @@ private static class PicocliRunner implements Runnable {
                 required = false)
         private boolean generateBothCallAndSend;
 
-
         @Option(
                 names = {"-r", ABI_FUNCS},
                 description = "ABI encoded function call getters.",

File: core/src/main/java/org/web3j/protocol/core/filters/Filter.java
Patch:
@@ -155,7 +155,7 @@ private void pollFilter(EthFilter ethFilter) {
 
     private void reinstallFilter() {
         log.warn("The filter has not been found. Filter id: " + filterId);
-        schedule.cancel(true);
+        schedule.cancel(false);
         this.run(scheduledExecutorService, blockTime);
     }
 

File: core/src/main/java/org/web3j/ens/EnsResolver.java
Patch:
@@ -156,7 +156,7 @@ boolean isSynced() throws Exception {
         } else {
             EthBlock ethBlock =
                     web3j.ethGetBlockByNumber(DefaultBlockParameterName.LATEST, false).send();
-            long timestamp = ethBlock.getBlock().getTimestamp().longValueExact() * 1000;
+            long timestamp = ethBlock.getBlock().getTimestamp().longValue() * 1000;
 
             return System.currentTimeMillis() - syncThreshold < timestamp;
         }

File: crypto/src/main/java/org/web3j/crypto/TransactionEncoder.java
Patch:
@@ -64,7 +64,7 @@ public static Sign.SignatureData createEip155SignatureData(
             Sign.SignatureData signatureData, long chainId) {
         BigInteger v = Numeric.toBigInt(signatureData.getV());
         v = v.subtract(BigInteger.valueOf(LOWER_REAL_V));
-        v = v.add(BigInteger.valueOf(chainId * 2));
+        v = v.add(BigInteger.valueOf(chainId).multiply(BigInteger.valueOf(2)));
         v = v.add(BigInteger.valueOf(CHAIN_ID_INC));
 
         return new Sign.SignatureData(v.toByteArray(), signatureData.getR(), signatureData.getS());

File: crypto/src/main/java/org/web3j/crypto/MnemonicUtils.java
Patch:
@@ -47,9 +47,7 @@ public class MnemonicUtils {
      * improved but the sentence length increases. We refer to the initial entropy length as ENT.
      * The allowed size of ENT is 128-256 bits.
      *
-     * <h3>Mnemonic generation algorithm</h3>
-     *
-     * Given a randomly generated initial entropy of size ENT, first a checksum is generated by
+     * <p>Given a randomly generated initial entropy of size ENT, first a checksum is generated by
      * taking the first {@code ENT / 32} bits of its SHA256 hash. This checksum is appended to the
      * end of the initial entropy. Next, these concatenated bits are split into groups of 11 bits,
      * each encoding a number from 0-2047, serving as an index into a wordlist. Finally, we convert

File: eea/src/main/java/org/web3j/protocol/eea/crypto/PrivateTransactionEncoder.java
Patch:
@@ -78,9 +78,7 @@ public static List<RlpType> asRlpValues(
             final Sign.SignatureData signatureData) {
 
         final List<RlpType> result =
-                new ArrayList<>(
-                        TransactionEncoder.asRlpValues(
-                                privateTransaction.asRawTransaction(), signatureData));
+                new ArrayList<>(TransactionEncoder.asRlpValues(privateTransaction, signatureData));
 
         result.add(privateTransaction.getPrivateFrom().asRlp());
 

File: core/src/main/java/org/web3j/tx/TransactionManager.java
Patch:
@@ -154,7 +154,7 @@ public String getFromAddress() {
         return fromAddress;
     }
 
-    private TransactionReceipt processResponse(EthSendTransaction transactionResponse)
+    protected TransactionReceipt processResponse(EthSendTransaction transactionResponse)
             throws IOException, TransactionException {
         if (transactionResponse.hasError()) {
             throw new RuntimeException(

File: crypto/src/main/java/org/web3j/crypto/StructuredData.java
Patch:
@@ -12,6 +12,7 @@
  */
 package org.web3j.crypto;
 
+import java.math.BigInteger;
 import java.util.HashMap;
 import java.util.List;
 
@@ -54,12 +55,12 @@ static class EIP712Domain {
         public EIP712Domain(
                 @JsonProperty(value = "name") String name,
                 @JsonProperty(value = "version") String version,
-                @JsonProperty(value = "chainId") Uint256 chainId,
+                @JsonProperty(value = "chainId") String chainId,
                 @JsonProperty(value = "verifyingContract") Address verifyingContract,
                 @JsonProperty(value = "salt") String salt) {
             this.name = name;
             this.version = version;
-            this.chainId = chainId;
+            this.chainId = chainId != null ? new Uint256(new BigInteger(chainId)) : null;
             this.verifyingContract = verifyingContract;
             this.salt = salt;
         }

File: integration-tests/src/test/java/org/web3j/protocol/core/FlowableIT.java
Patch:
@@ -32,7 +32,7 @@
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
 /** Flowable callback tests. */
-@EVMTest(type = NodeType.GETH)
+@EVMTest(type = NodeType.BESU)
 public class FlowableIT {
     private static final int EVENT_COUNT = 5;
     private static final int TIMEOUT_MINUTES = 1;

File: integration-tests/src/test/java/org/web3j/protocol/core/TestnetConfig.java
Patch:
@@ -130,7 +130,7 @@ public Transaction buildTransaction(Web3j web3j, ContractGasProvider gasProvider
                 web3j.ethGetTransactionCount(validAccount, DefaultBlockParameterName.LATEST)
                         .send()
                         .getTransactionCount(), // nonce
-                Transaction.DEFAULT_GAS,
+                gasProvider.getGasPrice(),
                 validContractCode());
     }
 

File: integration-tests/src/test/java/org/web3j/protocol/geth/GethIT.java
Patch:
@@ -28,7 +28,8 @@
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 
-@EVMTest(type = NodeType.GETH)
+@Disabled
+@EVMTest(type = NodeType.BESU)
 public class GethIT {
 
     private Geth web3j;

File: integration-tests/src/test/java/org/web3j/protocol/parity/ParityIT.java
Patch:
@@ -31,7 +31,7 @@
 
 /** JSON-RPC 2.0 Integration Tests. */
 @Disabled
-@EVMTest(type = NodeType.PARITY)
+@EVMTest(type = NodeType.OPEN_ETHEREUM)
 public class ParityIT {
 
     private static String PASSWORD = "1n5ecur3P@55w0rd";

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/CreateRawTransactionIT.java
Patch:
@@ -34,7 +34,7 @@
 import static org.junit.jupiter.api.Assertions.assertFalse;
 
 /** Create, sign and send a raw transaction. */
-@EVMTest(type = NodeType.GETH)
+@EVMTest(type = NodeType.BESU)
 public class CreateRawTransactionIT extends Scenario {
 
     @BeforeAll

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/DeployContractIT.java
Patch:
@@ -38,7 +38,7 @@
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 
 /** Integration test demonstrating the full contract deployment workflow. */
-@EVMTest(type = NodeType.GETH)
+@EVMTest(type = NodeType.BESU)
 public class DeployContractIT extends Scenario {
 
     @BeforeAll

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/EthCallIT.java
Patch:
@@ -35,7 +35,7 @@
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
-@EVMTest(type = NodeType.GETH)
+@EVMTest(type = NodeType.OPEN_ETHEREUM)
 public class EthCallIT extends Scenario {
 
     private static Revert contract;
@@ -61,14 +61,13 @@ public void testWithoutRevert() throws Exception {
     public void testRevertWithoutMessage() throws Exception {
         EthCall ethCall = ethCall(BigInteger.valueOf(1L));
         assertTrue(ethCall.isReverted());
-        assertTrue(ethCall.getRevertReason().endsWith("reverted"));
     }
 
     @Test
     public void testRevertWithMessage() throws Exception {
         EthCall ethCall = ethCall(BigInteger.valueOf(2L));
         assertTrue(ethCall.isReverted());
-        assertTrue(ethCall.getRevertReason().endsWith("execution reverted: The reason for revert"));
+        assertTrue(ethCall.getRevertReason().endsWith("VM execution error."));
     }
 
     private EthCall ethCall(BigInteger value) throws java.io.IOException {

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/EventFilterIT.java
Patch:
@@ -40,7 +40,7 @@
 import static org.junit.jupiter.api.Assertions.assertFalse;
 
 /** Filter scenario integration tests. */
-@EVMTest(type = NodeType.GETH)
+@EVMTest(type = NodeType.BESU)
 public class EventFilterIT extends Scenario {
 
     private static Fibonacci fib;

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/FastRawTransactionManagerIT.java
Patch:
@@ -42,7 +42,7 @@
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.web3j.tx.TransactionManager.DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH;
 
-@EVMTest(type = NodeType.GETH)
+@EVMTest(type = NodeType.BESU)
 @BenchmarkOptions(concurrency = 1, warmupRounds = 0, benchmarkRounds = 1)
 public class FastRawTransactionManagerIT extends Scenario {
 

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/FunctionWrappersIT.java
Patch:
@@ -34,7 +34,7 @@
  * <em>project-home</em>/src/test/resources/solidity/fibonacci.abi -o
  * <em>project-home</em>/src/integration-test/java -p org.web3j.generated
  */
-@EVMTest(type = NodeType.GETH)
+@EVMTest(type = NodeType.BESU)
 public class FunctionWrappersIT extends Scenario {
 
     private static Fibonacci fib;

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/GreeterContractIT.java
Patch:
@@ -44,7 +44,7 @@
  * href="https://github.com/ethereum/go-ethereum/wiki/Contract-Tutorial">Contract Tutorial</a> on
  * the Go Ethereum Wiki.
  */
-@EVMTest(type = NodeType.GETH)
+@EVMTest(type = NodeType.BESU)
 public class GreeterContractIT extends Scenario {
 
     private static final String VALUE = "Greetings!";

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/HumanStandardTokenGeneratedIT.java
Patch:
@@ -34,7 +34,7 @@
 import static org.web3j.tx.TransactionManager.DEFAULT_POLLING_FREQUENCY;
 
 /** Generated HumanStandardToken integration test for all supported scenarios. */
-@EVMTest(type = NodeType.GETH)
+@EVMTest(type = NodeType.BESU)
 public class HumanStandardTokenGeneratedIT extends Scenario {
 
     @BeforeAll

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/HumanStandardTokenIT.java
Patch:
@@ -54,7 +54,7 @@
  * href="https://github.com/ethereum/EIPs/issues/20">EIP-20</a>. Solidity implementation is taken
  * from <a href="https://github.com/ConsenSys/Tokens">ConsenSys Tokens</a>.
  */
-@EVMTest(type = NodeType.GETH)
+@EVMTest(type = NodeType.BESU)
 public class HumanStandardTokenIT extends Scenario {
 
     @BeforeAll

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/SendEtherIT.java
Patch:
@@ -33,7 +33,7 @@
 import static org.junit.jupiter.api.Assertions.assertFalse;
 
 /** Simple integration test to demonstrate sending of Ether between parties. */
-@EVMTest(type = NodeType.GETH)
+@EVMTest(type = NodeType.BESU)
 public class SendEtherIT extends Scenario {
 
     @BeforeAll

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/SignTransactionIT.java
Patch:
@@ -32,7 +32,7 @@
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 
 /** Sign transaction using Ethereum node. */
-@EVMTest(type = NodeType.GETH)
+@EVMTest(type = NodeType.BESU)
 public class SignTransactionIT extends Scenario {
     @BeforeAll
     public static void setUp(Web3j web3j) {

File: core/src/main/java/org/web3j/protocol/http/HttpService.java
Patch:
@@ -182,8 +182,6 @@ protected void processHeaders(Headers headers) {
     }
 
     private InputStream buildInputStream(ResponseBody responseBody) throws IOException {
-        InputStream inputStream = new ByteArrayInputStream(responseBody.bytes());
-
         if (includeRawResponse) {
             // we have to buffer the entire input payload, so that after processing
             // it can be re-read and used to populate the rawResponse field.
@@ -199,14 +197,16 @@ private InputStream buildInputStream(ResponseBody responseBody) throws IOExcepti
             }
 
             int bufferSize = (int) size;
+            InputStream inputStream = responseBody.byteStream();
+
             BufferedInputStream bufferedinputStream =
                     new BufferedInputStream(inputStream, bufferSize);
 
             bufferedinputStream.mark(inputStream.available());
             return bufferedinputStream;
 
         } else {
-            return inputStream;
+            return new ByteArrayInputStream(responseBody.bytes());
         }
     }
 

File: integration-tests/src/test/java/org/web3j/protocol/geth/GethIT.java
Patch:
@@ -32,13 +32,12 @@
 public class GethIT {
 
     private Geth web3j;
-    private String url = "http://localhost:8545";
 
     public GethIT() {}
 
     @BeforeEach
     public void setUp() {
-        this.web3j = Geth.build(new HttpService(url));
+        this.web3j = Geth.build(new HttpService());
     }
 
     @Disabled
@@ -50,7 +49,7 @@ public void testWeb3ClientVersion() throws Exception {
 
     @Test
     public void testPersonalAccountCreation() throws IOException {
-        Admin admin = Admin.build(new HttpService(url));
+        Admin admin = Admin.build(new HttpService());
         NewAccountIdentifier accountId = admin.personalNewAccount("web3j-geth-IT").send();
         assertFalse(accountId.getResult().isEmpty());
     }

File: abi/src/main/java/org/web3j/abi/datatypes/Array.java
Patch:
@@ -55,8 +55,8 @@ public abstract class Array<T extends Type> implements Type<List<T>> {
     @Override
     public int bytes32PaddedLength() {
         int length = 0;
-        for (int i = 0; i < value.size(); i++) {
-            int valueLength = value.get(i).bytes32PaddedLength();
+        for (T t : value) {
+            int valueLength = t.bytes32PaddedLength();
             length += valueLength;
         }
         return length;

File: abi/src/main/java/org/web3j/abi/datatypes/BytesType.java
Patch:
@@ -27,7 +27,9 @@ public BytesType(byte[] src, String type) {
 
     @Override
     public int bytes32PaddedLength() {
-        return value.length * 32;
+        return value.length <= 32
+                ? MAX_BYTE_LENGTH
+                : (value.length / MAX_BYTE_LENGTH + 1) * MAX_BYTE_LENGTH;
     }
 
     @Override

File: abi/src/main/java/org/web3j/abi/datatypes/DynamicStruct.java
Patch:
@@ -24,6 +24,7 @@ public DynamicStruct(List<Type> values) {
         this(Type.class, values);
     }
 
+    @SuppressWarnings("unchecked")
     private DynamicStruct(Class<Type> type, List<Type> values) {
         super(type, values);
         for (Type value : values) {

File: abi/src/main/java/org/web3j/abi/datatypes/StaticStruct.java
Patch:
@@ -20,6 +20,7 @@ public class StaticStruct extends StaticArray<Type> implements StructType {
 
     private final List<Class<Type>> itemTypes = new ArrayList<>();
 
+    @SuppressWarnings("unchecked")
     public StaticStruct(List<Type> values) {
         super(Type.class, values.size(), values);
         for (Type value : values) {

File: core/src/test/java/org/web3j/protocol/ResponseTester.java
Patch:
@@ -76,7 +76,7 @@ public okhttp3.Response intercept(Chain chain) throws IOException {
 
             okhttp3.Response response =
                     new okhttp3.Response.Builder()
-                            .body(ResponseBody.create(JSON_MEDIA_TYPE, jsonResponse))
+                            .body(ResponseBody.create(jsonResponse, JSON_MEDIA_TYPE))
                             .request(chain.request())
                             .protocol(Protocol.HTTP_2)
                             .code(200)

File: codegen/src/test/java/org/web3j/codegen/unit/gen/java/JavaParserTest.java
Patch:
@@ -25,7 +25,7 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
-public class JavaParserTest extends Setup {
+public class JavaParserTest extends JavaTestSetup {
 
     @Test
     public void testGenerateJavaPoetStringTypesWhenReturnTypeIsContract() {

File: codegen/src/test/java/org/web3j/codegen/unit/gen/java/MethodParserTest.java
Patch:
@@ -20,7 +20,7 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
-public class MethodParserTest extends Setup {
+public class MethodParserTest extends JavaTestSetup {
     @Test
     public void testThatDeployMethodWasGenerated() {
 
@@ -31,7 +31,7 @@ public void testThatDeployMethodWasGenerated() {
         assertEquals(
                 "@org.junit.jupiter.api.BeforeAll\n"
                         + "static void deploy(org.web3j.protocol.Web3j web3j, org.web3j.tx.TransactionManager transactionManager, org.web3j.tx.gas.ContractGasProvider contractGasProvider) throws java.lang.Exception {\n"
-                        + "  greeter = org.com.test.contract.Greeter.deploy(web3j, transactionManager, contractGasProvider, \"REPLACE_ME\").send();\n"
+                        + "  greeter = org.web3j.test.contract.Greeter.deploy(web3j, transactionManager, contractGasProvider, \"REPLACE_ME\").send();\n"
                         + "}\n",
                 deployMethodSpec.toString());
     }

File: codegen/src/test/java/org/web3j/codegen/unit/gen/kotlin/FunParserTest.java
Patch:
@@ -20,7 +20,7 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
-public class FunParserTest extends Setup {
+public class FunParserTest extends KotlinTestSetup {
     @Test
     public void testThatDeployMethodWasGenerated() {
         Optional<Method> deployFun =
@@ -34,7 +34,7 @@ public void testThatDeployMethodWasGenerated() {
                         + "  transactionManager: org.web3j.tx.TransactionManager,\n"
                         + "  contractGasProvider: org.web3j.tx.gas.ContractGasProvider\n"
                         + ") {\n"
-                        + "   greeter = org.com.test.contract.Greeter.deploy(web3j, transactionManager, contractGasProvider, \"REPLACE_ME\").send()\n"
+                        + "   greeter = org.web3j.test.contract.Greeter.deploy(web3j, transactionManager, contractGasProvider, \"REPLACE_ME\").send()\n"
                         + "}\n");
     }
 

File: codegen/src/test/java/org/web3j/codegen/unit/gen/kotlin/KotlinParserTest.java
Patch:
@@ -25,7 +25,7 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
-public class KotlinParserTest extends Setup {
+public class KotlinParserTest extends KotlinTestSetup {
 
     @Test
     public void testGenerateJavaPoetStringTypesWhenReturnTypeIsContract() {

File: integration-tests/src/test/java/org/web3j/protocol/besu/BesuOnChainPrivacyIntegrationTest.java
Patch:
@@ -18,7 +18,6 @@
 import java.util.Collections;
 import java.util.List;
 
-import org.com.test.contract.HumanStandardToken;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
@@ -30,6 +29,7 @@
 import org.web3j.protocol.core.methods.response.TransactionReceipt;
 import org.web3j.protocol.exceptions.TransactionException;
 import org.web3j.protocol.http.HttpService;
+import org.web3j.test.contract.HumanStandardToken;
 import org.web3j.tx.BesuPrivateTransactionManager;
 import org.web3j.tx.PrivateTransactionManager;
 import org.web3j.tx.gas.BesuPrivacyGasProvider;

File: integration-tests/src/test/java/org/web3j/protocol/besu/BesuPrivacyQuickstartIntegrationTest.java
Patch:
@@ -16,7 +16,6 @@
 import java.math.BigInteger;
 import java.util.Arrays;
 
-import org.com.test.contract.HumanStandardToken;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
@@ -29,6 +28,7 @@
 import org.web3j.protocol.eea.crypto.PrivateTransactionEncoder;
 import org.web3j.protocol.eea.crypto.RawPrivateTransaction;
 import org.web3j.protocol.http.HttpService;
+import org.web3j.test.contract.HumanStandardToken;
 import org.web3j.tx.BesuPrivateTransactionManager;
 import org.web3j.tx.LegacyPrivateTransactionManager;
 import org.web3j.tx.PrivateTransactionManager;

File: integration-tests/src/test/java/org/web3j/protocol/core/CoreIT.java
Patch:
@@ -15,7 +15,6 @@
 import java.math.BigInteger;
 import java.util.List;
 
-import org.com.test.contract.Fibonacci;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
@@ -64,6 +63,7 @@
 import org.web3j.protocol.core.methods.response.TransactionReceipt;
 import org.web3j.protocol.core.methods.response.Web3ClientVersion;
 import org.web3j.protocol.core.methods.response.Web3Sha3;
+import org.web3j.test.contract.Fibonacci;
 import org.web3j.tx.TransactionManager;
 import org.web3j.tx.gas.ContractGasProvider;
 import org.web3j.tx.gas.DefaultGasProvider;

File: integration-tests/src/test/java/org/web3j/protocol/core/IntegrationTestConfig.java
Patch:
@@ -14,11 +14,10 @@
 
 import java.math.BigInteger;
 
-import org.com.test.contract.Fibonacci;
-
 import org.web3j.protocol.Web3j;
 import org.web3j.protocol.core.methods.request.Transaction;
 import org.web3j.protocol.core.methods.response.TransactionReceipt;
+import org.web3j.test.contract.Fibonacci;
 import org.web3j.tx.gas.ContractGasProvider;
 
 /** Common values used by integration tests. */

File: integration-tests/src/test/java/org/web3j/protocol/core/TestnetConfig.java
Patch:
@@ -17,8 +17,6 @@
 import java.math.BigInteger;
 import java.util.Arrays;
 
-import org.com.test.contract.Fibonacci;
-
 import org.web3j.abi.EventEncoder;
 import org.web3j.abi.TypeReference;
 import org.web3j.abi.datatypes.Event;
@@ -27,6 +25,7 @@
 import org.web3j.protocol.Web3j;
 import org.web3j.protocol.core.methods.request.Transaction;
 import org.web3j.protocol.core.methods.response.TransactionReceipt;
+import org.web3j.test.contract.Fibonacci;
 import org.web3j.tx.TransactionManager;
 import org.web3j.tx.Transfer;
 import org.web3j.tx.gas.ContractGasProvider;

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/ArraysIT.java
Patch:
@@ -18,14 +18,14 @@
 import java.util.Comparator;
 import java.util.List;
 
-import org.com.test.contract.Arrays;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import org.web3j.EVMTest;
 import org.web3j.NodeType;
 import org.web3j.protocol.Web3j;
+import org.web3j.test.contract.Arrays;
 import org.web3j.tx.gas.StaticGasProvider;
 
 import static java.math.BigInteger.valueOf;

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/CreateRawTransactionIT.java
Patch:
@@ -14,7 +14,6 @@
 
 import java.math.BigInteger;
 
-import org.com.test.contract.Fibonacci;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 
@@ -27,6 +26,7 @@
 import org.web3j.protocol.core.methods.response.EthGetTransactionCount;
 import org.web3j.protocol.core.methods.response.EthSendTransaction;
 import org.web3j.protocol.core.methods.response.TransactionReceipt;
+import org.web3j.test.contract.Fibonacci;
 import org.web3j.utils.Convert;
 import org.web3j.utils.Numeric;
 

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/EthCallIT.java
Patch:
@@ -15,7 +15,6 @@
 import java.math.BigInteger;
 import java.util.Collections;
 
-import org.com.test.contract.Revert;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 
@@ -29,6 +28,7 @@
 import org.web3j.protocol.core.DefaultBlockParameterName;
 import org.web3j.protocol.core.methods.request.Transaction;
 import org.web3j.protocol.core.methods.response.EthCall;
+import org.web3j.test.contract.Revert;
 import org.web3j.tx.TransactionManager;
 import org.web3j.tx.gas.ContractGasProvider;
 

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/EventFilterIT.java
Patch:
@@ -16,7 +16,6 @@
 import java.util.Arrays;
 import java.util.List;
 
-import org.com.test.contract.Fibonacci;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 
@@ -34,6 +33,7 @@
 import org.web3j.protocol.core.methods.response.EthLog;
 import org.web3j.protocol.core.methods.response.Log;
 import org.web3j.protocol.core.methods.response.TransactionReceipt;
+import org.web3j.test.contract.Fibonacci;
 import org.web3j.tx.gas.ContractGasProvider;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/FunctionWrappersIT.java
Patch:
@@ -14,7 +14,6 @@
 
 import java.math.BigInteger;
 
-import org.com.test.contract.Fibonacci;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 
@@ -23,6 +22,7 @@
 import org.web3j.protocol.Web3j;
 import org.web3j.protocol.core.methods.response.TransactionReceipt;
 import org.web3j.protocol.http.HttpService;
+import org.web3j.test.contract.Fibonacci;
 import org.web3j.tx.gas.ContractGasProvider;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/HumanStandardTokenGeneratedIT.java
Patch:
@@ -17,7 +17,6 @@
 import java.util.concurrent.TimeUnit;
 
 import io.reactivex.disposables.Disposable;
-import org.com.test.contract.HumanStandardToken;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 
@@ -26,6 +25,7 @@
 import org.web3j.protocol.Web3j;
 import org.web3j.protocol.core.DefaultBlockParameterName;
 import org.web3j.protocol.core.methods.response.TransactionReceipt;
+import org.web3j.test.contract.HumanStandardToken;
 import org.web3j.tx.gas.ContractGasProvider;
 import org.web3j.tx.gas.DefaultGasProvider;
 

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/SimpleStorageContractIT.java
Patch:
@@ -14,13 +14,13 @@
 
 import java.math.BigInteger;
 
-import org.com.test.contract.SimpleStorage;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 
 import org.web3j.EVMTest;
 import org.web3j.NodeType;
 import org.web3j.protocol.Web3j;
+import org.web3j.test.contract.SimpleStorage;
 import org.web3j.tx.gas.ContractGasProvider;
 import org.web3j.tx.gas.DefaultGasProvider;
 

File: codegen/src/main/java/org/web3j/codegen/unit/gen/CompilerClassLoader.java
Patch:
@@ -28,7 +28,7 @@
 import javax.tools.ToolProvider;
 
 /** Class loader with compilation capabilities. */
-class CompilerClassLoader extends ClassLoader {
+public class CompilerClassLoader extends ClassLoader {
 
     private final File outputDir;
     private final URL[] urls;
@@ -39,7 +39,7 @@ class CompilerClassLoader extends ClassLoader {
      * @param outputDir Directory where classes will be compiled.
      * @param urls Classpath URLs to compile the Java sources.
      */
-    CompilerClassLoader(final File outputDir, final URL... urls) {
+    public CompilerClassLoader(final File outputDir, final URL... urls) {
         super(CompilerClassLoader.class.getClassLoader());
         this.outputDir = outputDir;
         this.urls = urls;

File: integration-tests/src/test/java/org/web3j/protocol/besu/BesuPrivacyQuickstartIntegrationTest.java
Patch:
@@ -16,14 +16,14 @@
 import java.math.BigInteger;
 import java.util.Arrays;
 
+import org.com.test.contract.HumanStandardToken;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import org.web3j.crypto.Credentials;
 import org.web3j.crypto.Sign;
 import org.web3j.crypto.TransactionEncoder;
-import org.web3j.generated.HumanStandardToken;
 import org.web3j.protocol.besu.response.privacy.PrivateTransactionReceipt;
 import org.web3j.protocol.besu.response.privacy.PrivateTransactionWithPrivacyGroup;
 import org.web3j.protocol.eea.crypto.PrivateTransactionEncoder;

File: core/src/test/java/org/web3j/protocol/RequestTester.java
Patch:
@@ -54,7 +54,7 @@ protected void verifyResult(String expected) throws Exception {
 
         Buffer buffer = new Buffer();
         requestBody.writeTo(buffer);
-        assertEquals(replaceRequestId(buffer.readUtf8()), (replaceRequestId(expected)));
+        assertEquals((replaceRequestId(expected)), replaceRequestId(buffer.readUtf8()));
     }
 
     private String replaceRequestId(String json) {

File: core/src/main/java/org/web3j/crypto/Bip44WalletUtils.java
Patch:
@@ -70,8 +70,8 @@ public static Bip32ECKeyPair generateBip44KeyPair(Bip32ECKeyPair master, boolean
             final int[] path = {44 | HARDENED_BIT, 0 | HARDENED_BIT, 0 | HARDENED_BIT, 0};
             return Bip32ECKeyPair.deriveKeyPair(master, path);
         } else {
-            // m/44'/60'/0'/0
-            final int[] path = {44 | HARDENED_BIT, 60 | HARDENED_BIT, 0 | HARDENED_BIT, 0};
+            // m/44'/60'/0'/0/0
+            final int[] path = {44 | HARDENED_BIT, 60 | HARDENED_BIT, 0 | HARDENED_BIT, 0, 0};
             return Bip32ECKeyPair.deriveKeyPair(master, path);
         }
     }

File: codegen/src/main/java/org/web3j/codegen/SolidityFunctionWrapper.java
Patch:
@@ -1150,9 +1150,8 @@ private List<ParameterSpec> buildParameterTypes(
                 TypeName typeName;
                 if (type.endsWith("[]")) {
                     typeName = structClassNameMap.get(namedType.structIdentifier());
-//                    typeName = ArrayTypeName.of(typeName);
-                }
-                else {
+                    //                    typeName = ArrayTypeName.of(typeName);
+                } else {
                     typeName = structClassNameMap.get(namedType.structIdentifier());
                 }
                 result.add(ParameterSpec.builder(typeName, name).build());

File: core/src/test/java/org/web3j/protocol/core/ResponseTest.java
Patch:
@@ -1571,7 +1571,7 @@ public void testSshMessages() {
         ShhMessages shhMessages = deserialiseResponse(ShhMessages.class);
         assertEquals(shhMessages.getMessages(), (messages));
     }
-    
+
     @Test
     public void testBooleanResponse() {
         buildResponse(
@@ -1584,7 +1584,7 @@ public void testBooleanResponse() {
         BooleanResponse booleanResponse = deserialiseResponse(BooleanResponse.class);
         assertTrue(booleanResponse.success());
     }
-    
+
     @Test
     public void testAdminDataDir() {
         buildResponse(
@@ -1597,7 +1597,7 @@ public void testAdminDataDir() {
         AdminDataDir dataDir = deserialiseResponse(AdminDataDir.class);
         assertEquals(dataDir.getDataDir(), "sampleDir");
     }
-    
+
     @Test
     public void testTxPoolStatus() {
         buildResponse(

File: core/src/main/java/org/web3j/protocol/core/Ethereum.java
Patch:
@@ -66,6 +66,7 @@
 import org.web3j.protocol.core.methods.response.Web3ClientVersion;
 import org.web3j.protocol.core.methods.response.Web3Sha3;
 import org.web3j.protocol.core.methods.response.TxPoolStatus;
+import org.web3j.protocol.core.methods.response.admin.AdminDataDir;
 import org.web3j.protocol.core.methods.response.admin.AdminNodeInfo;
 import org.web3j.protocol.core.methods.response.admin.AdminPeers;
 
@@ -88,6 +89,8 @@ public interface Ethereum {
     Request<?, BooleanResponse> adminAddPeer(String url);
     
     Request<?, BooleanResponse> adminRemovePeer(String url);
+    
+    Request<?, AdminDataDir> adminDataDir();
 
     Request<?, EthProtocolVersion> ethProtocolVersion();
 

File: besu/src/main/java/org/web3j/protocol/besu/Besu.java
Patch:
@@ -28,6 +28,7 @@
 import org.web3j.protocol.besu.response.privacy.PrivGetPrivacyPrecompileAddress;
 import org.web3j.protocol.besu.response.privacy.PrivGetPrivateTransaction;
 import org.web3j.protocol.besu.response.privacy.PrivGetTransactionReceipt;
+import org.web3j.protocol.besu.response.privacy.PrivateEnclaveKey;
 import org.web3j.protocol.core.DefaultBlockParameter;
 import org.web3j.protocol.core.Request;
 import org.web3j.protocol.core.methods.response.EthAccounts;
@@ -105,6 +106,8 @@ Request<?, EthGetTransactionCount> privGetTransactionCount(
 
     Request<?, PrivGetPrivateTransaction> privGetPrivateTransaction(final String transactionHash);
 
+    Request<?, PrivateEnclaveKey> privDistributeRawTransaction(final String signedTransactionData);
+
     Request<?, PrivGetPrivacyPrecompileAddress> privGetPrivacyPrecompileAddress();
 
     Request<?, PrivCreatePrivacyGroup> privCreatePrivacyGroup(

File: codegen/src/main/java/org/web3j/codegen/SolidityFunctionWrapperGenerator.java
Patch:
@@ -65,7 +65,7 @@ public class SolidityFunctionWrapperGenerator extends FunctionWrapperGenerator {
 
     private final boolean generateSendTxForCalls;
 
-    protected SolidityFunctionWrapperGenerator(
+    public SolidityFunctionWrapperGenerator(
             File binFile,
             File abiFile,
             File destinationDir,

File: codegen/src/main/java/org/web3j/codegen/TruffleJsonFunctionWrapperGenerator.java
Patch:
@@ -59,7 +59,7 @@ public class TruffleJsonFunctionWrapperGenerator extends FunctionWrapperGenerato
 
     private String jsonFileLocation;
 
-    private TruffleJsonFunctionWrapperGenerator(
+    public TruffleJsonFunctionWrapperGenerator(
             String jsonFileLocation,
             String destinationDirLocation,
             String basePackageName,

File: core/src/main/java/org/web3j/tx/Contract.java
Patch:
@@ -314,7 +314,9 @@ protected <T extends Type, R> R executeCallSingleValueReturn(
         }
 
         Object value = result.getValue();
-        if (returnType.isAssignableFrom(value.getClass())) {
+        if (returnType.isAssignableFrom(result.getClass())) {
+            return (R) result;
+        } else if (returnType.isAssignableFrom(value.getClass())) {
             return (R) value;
         } else if (result.getClass().equals(Address.class) && returnType.equals(String.class)) {
             return (R) result.toString(); // cast isn't necessary

File: core/src/main/java/org/web3j/protocol/core/filters/BlockFilter.java
Patch:
@@ -30,12 +30,12 @@ public BlockFilter(Web3j web3j, Callback<String> callback) {
     }
 
     @Override
-    EthFilter sendRequest() throws IOException {
+    protected EthFilter sendRequest() throws IOException {
         return web3j.ethNewBlockFilter().send();
     }
 
     @Override
-    void process(List<EthLog.LogResult> logResults) {
+    protected void process(List<EthLog.LogResult> logResults) {
         for (EthLog.LogResult logResult : logResults) {
             if (logResult instanceof EthLog.Hash) {
                 String blockHash = ((EthLog.Hash) logResult).get();

File: core/src/main/java/org/web3j/protocol/core/filters/BlocksFilter.java
Patch:
@@ -32,12 +32,12 @@ public BlocksFilter(Web3j web3j, Callback<List<String>> callback) {
     }
 
     @Override
-    EthFilter sendRequest() throws IOException {
+    protected EthFilter sendRequest() throws IOException {
         return web3j.ethNewBlockFilter().send();
     }
 
     @Override
-    void process(List<LogResult> logResults) {
+    protected void process(List<LogResult> logResults) {
         List<String> blockHashes = new ArrayList<>(logResults.size());
 
         for (EthLog.LogResult logResult : logResults) {

File: core/src/main/java/org/web3j/protocol/core/filters/LogFilter.java
Patch:
@@ -26,7 +26,7 @@
 /** Log filter handler. */
 public class LogFilter extends Filter<Log> {
 
-    private final org.web3j.protocol.core.methods.request.EthFilter ethFilter;
+    protected final org.web3j.protocol.core.methods.request.EthFilter ethFilter;
 
     public LogFilter(
             Web3j web3j,
@@ -37,12 +37,12 @@ public LogFilter(
     }
 
     @Override
-    EthFilter sendRequest() throws IOException {
+    protected EthFilter sendRequest() throws IOException {
         return web3j.ethNewFilter(ethFilter).send();
     }
 
     @Override
-    void process(List<EthLog.LogResult> logResults) {
+    protected void process(List<EthLog.LogResult> logResults) {
         for (EthLog.LogResult logResult : logResults) {
             if (logResult instanceof EthLog.LogObject) {
                 Log log = ((EthLog.LogObject) logResult).get();

File: core/src/main/java/org/web3j/protocol/core/filters/LogsFilter.java
Patch:
@@ -39,12 +39,12 @@ public LogsFilter(
     }
 
     @Override
-    EthFilter sendRequest() throws IOException {
+    protected EthFilter sendRequest() throws IOException {
         return web3j.ethNewFilter(ethFilter).send();
     }
 
     @Override
-    void process(List<LogResult> logResults) {
+    protected void process(List<LogResult> logResults) {
         List<Log> logs = new ArrayList<>(logResults.size());
 
         for (EthLog.LogResult logResult : logResults) {

File: core/src/main/java/org/web3j/protocol/core/filters/PendingTransactionFilter.java
Patch:
@@ -30,12 +30,12 @@ public PendingTransactionFilter(Web3j web3j, Callback<String> callback) {
     }
 
     @Override
-    EthFilter sendRequest() throws IOException {
+    protected EthFilter sendRequest() throws IOException {
         return web3j.ethNewPendingTransactionFilter().send();
     }
 
     @Override
-    void process(List<EthLog.LogResult> logResults) {
+    protected void process(List<EthLog.LogResult> logResults) {
         for (EthLog.LogResult logResult : logResults) {
             if (logResult instanceof EthLog.Hash) {
                 String transactionHash = ((EthLog.Hash) logResult).get();

File: core/src/main/java/org/web3j/protocol/core/filters/PendingTransactionsFilter.java
Patch:
@@ -31,12 +31,12 @@ public PendingTransactionsFilter(Web3j web3j, Callback<List<String>> callback) {
     }
 
     @Override
-    EthFilter sendRequest() throws IOException {
+    protected EthFilter sendRequest() throws IOException {
         return web3j.ethNewPendingTransactionFilter().send();
     }
 
     @Override
-    void process(List<EthLog.LogResult> logResults) {
+    protected void process(List<EthLog.LogResult> logResults) {
         List<String> logs = new ArrayList<>(logResults.size());
 
         for (EthLog.LogResult logResult : logResults) {

File: core/src/main/java/org/web3j/account/LocalWeb3jAccount.java
Patch:
@@ -28,7 +28,9 @@ public class LocalWeb3jAccount {
     private static final Path EPIRUS_CONFIG_PATh =
             Paths.get(System.getProperty("user.home"), ".epirus", ".config");
 
-    private static String NODE_RPC_ENDPOINT = "https://%s-eth.epirus.io/%s";
+    public static final String DEFAULT_APP_URL =
+            System.getenv().getOrDefault("EPIRUS_APP_URL", "https://app.epirus.io");
+    private static final String NODE_RPC_ENDPOINT = DEFAULT_APP_URL + "/api/rpc/%s/%s/";
 
     public static HttpService getOnlineServicesHttpService(final Network network) throws Exception {
         if (configExists()) {

File: core/src/main/java/org/web3j/tx/FastRawTransactionManager.java
Patch:
@@ -27,7 +27,7 @@ public class FastRawTransactionManager extends RawTransactionManager {
 
     private volatile BigInteger nonce = BigInteger.valueOf(-1);
 
-    public FastRawTransactionManager(Web3j web3j, Credentials credentials, byte chainId) {
+    public FastRawTransactionManager(Web3j web3j, Credentials credentials, long chainId) {
         super(web3j, credentials, chainId);
     }
 
@@ -45,7 +45,7 @@ public FastRawTransactionManager(
     public FastRawTransactionManager(
             Web3j web3j,
             Credentials credentials,
-            byte chainId,
+            long chainId,
             TransactionReceiptProcessor transactionReceiptProcessor) {
         super(web3j, credentials, chainId, transactionReceiptProcessor);
     }

File: besu/src/main/java/org/web3j/protocol/besu/Besu.java
Patch:
@@ -110,7 +110,7 @@ Request<?, EthGetCode> privGetCode(
             String privacyGroupId, String address, DefaultBlockParameter defaultBlockParameter);
 
     Request<?, org.web3j.protocol.core.methods.response.EthCall> privCall(
+            String privacyGroupId,
             org.web3j.protocol.core.methods.request.Transaction transaction,
-            DefaultBlockParameter defaultBlockParameter,
-            String privacyGroupId);
+            DefaultBlockParameter defaultBlockParameter);
 }

File: besu/src/main/java/org/web3j/protocol/besu/JsonRpc2_0Besu.java
Patch:
@@ -336,12 +336,12 @@ public Request<?, EthGetCode> privGetCode(
 
     @Override
     public Request<?, EthCall> privCall(
+            String privacyGroupId,
             final Transaction transaction,
-            final DefaultBlockParameter defaultBlockParameter,
-            String privacyGroupId) {
+            final DefaultBlockParameter defaultBlockParameter) {
         return new Request<>(
                 "priv_call",
-                Arrays.asList(transaction, defaultBlockParameter, privacyGroupId),
+                Arrays.asList(privacyGroupId, transaction, defaultBlockParameter),
                 web3jService,
                 org.web3j.protocol.core.methods.response.EthCall.class);
     }

File: core/src/main/java/org/web3j/protocol/admin/Admin.java
Patch:
@@ -20,6 +20,7 @@
 import org.web3j.protocol.admin.methods.response.NewAccountIdentifier;
 import org.web3j.protocol.admin.methods.response.PersonalListAccounts;
 import org.web3j.protocol.admin.methods.response.PersonalUnlockAccount;
+import org.web3j.protocol.admin.methods.response.TxPoolContent;
 import org.web3j.protocol.core.Request;
 import org.web3j.protocol.core.methods.request.Transaction;
 import org.web3j.protocol.core.methods.response.EthSendTransaction;
@@ -50,4 +51,6 @@ public Request<?, PersonalUnlockAccount> personalUnlockAccount(
 
     public Request<?, EthSendTransaction> personalSendTransaction(
             Transaction transaction, String password);
+
+    public Request<?, TxPoolContent> txPoolContent();
 }

File: core/src/main/java/org/web3j/protocol/core/methods/response/TransactionReceipt.java
Patch:
@@ -158,10 +158,10 @@ public void setStatus(String status) {
     }
 
     public boolean isStatusOK() {
-        if (null == status) {
+        if (null == getStatus()) {
             return true;
         }
-        BigInteger statusQuantity = Numeric.decodeQuantity(status);
+        BigInteger statusQuantity = Numeric.decodeQuantity(getStatus());
         return BigInteger.ONE.equals(statusQuantity);
     }
 

File: abi/src/main/java/org/web3j/abi/TypeDecoder.java
Patch:
@@ -198,7 +198,7 @@ static Type instantiateArrayType(TypeReference ref, Object value)
         for (Object o : values) {
             transformedList.add(instantiateType(subTypeReference, o));
         }
-        return (Type) listcons.newInstance(ref.getClassType(), transformedList);
+        return (Type) listcons.newInstance(subTypeReference.getClassType(), transformedList);
     }
 
     static Type instantiateAtomicType(Class<?> referenceClass, Object value)

File: codegen/src/main/java/org/web3j/codegen/unit/gen/java/MethodSpecGenerator.java
Patch:
@@ -10,7 +10,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  */
-package org.web3j.codegen.unit.gen;
+package org.web3j.codegen.unit.gen.java;
 
 import java.util.Collections;
 import java.util.List;

File: codegen/src/main/java/org/web3j/codegen/unit/gen/utils/NameUtils.java
Patch:
@@ -10,7 +10,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  */
-package org.web3j.codegen.unit.gen.utills;
+package org.web3j.codegen.unit.gen.utils;
 
 import java.lang.reflect.Type;
 

File: codegen/src/test/java/org/web3j/codegen/unit/gen/MethodFilterTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.junit.jupiter.api.Test;
 
+import org.web3j.codegen.unit.gen.java.Setup;
 import org.web3j.protocol.Web3j;
 import org.web3j.tx.TransactionManager;
 import org.web3j.tx.gas.ContractGasProvider;

File: codegen/src/test/java/org/web3j/codegen/unit/gen/java/JavaClassGeneratorTest.java
Patch:
@@ -10,7 +10,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  */
-package org.web3j.codegen.unit.gen;
+package org.web3j.codegen.unit.gen.java;
 
 import java.io.File;
 
@@ -19,7 +19,7 @@
 import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
-public class UnitClassGeneratorTest extends Setup {
+public class JavaClassGeneratorTest extends Setup {
     @Test
     public void testThatTheClassWasSuccessfullyWritten() {
         assertTrue(new File(pathToTest).exists());
@@ -29,7 +29,7 @@ public void testThatTheClassWasSuccessfullyWritten() {
     public void testThatExceptionIsThrownWhenAClassIsNotWritten() {
         assertThrows(
                 NullPointerException.class,
-                () -> new UnitClassGenerator(null, "org.com", temp.toString()).writeClass());
+                () -> new JavaClassGenerator(null, "org.com", temp.toString()).writeClass());
     }
 
     @Test

File: codegen/src/test/java/org/web3j/codegen/unit/gen/java/MethodParserTest.java
Patch:
@@ -10,7 +10,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  */
-package org.web3j.codegen.unit.gen;
+package org.web3j.codegen.unit.gen.java;
 
 import java.lang.reflect.Method;
 import java.util.Optional;

File: codegen/src/test/java/org/web3j/codegen/unit/gen/java/MethodSpecGeneratorTest.java
Patch:
@@ -10,7 +10,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  */
-package org.web3j.codegen.unit.gen;
+package org.web3j.codegen.unit.gen.java;
 
 import java.util.Collections;
 import java.util.LinkedHashMap;

File: abi/src/main/java/org/web3j/abi/datatypes/AbiTypes.java
Patch:
@@ -187,9 +187,9 @@ public static Class<? extends Type> getType(String type, boolean primitives) {
             case "int32":
                 return primitives ? Int.class : Int32.class;
             case "uint40":
-                return primitives ? Long.class : Int40.class;
-            case "int40":
                 return primitives ? Long.class : Uint40.class;
+            case "int40":
+                return primitives ? Long.class : Int40.class;
             case "uint48":
                 return primitives ? Long.class : Uint48.class;
             case "int48":

File: codegen/src/test/java/org/web3j/codegen/SolidityFunctionWrapperGeneratorTest.java
Patch:
@@ -26,6 +26,7 @@
 import javax.tools.StandardJavaFileManager;
 import javax.tools.ToolProvider;
 
+import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
 import org.web3j.TempFileProvider;
@@ -46,6 +47,7 @@ public class SolidityFunctionWrapperGeneratorTest extends TempFileProvider {
     private String solidityBaseDir;
 
     @Override
+    @BeforeEach
     public void setUp() throws Exception {
         super.setUp();
 

File: codegen/src/test/java/org/web3j/codegen/SolidityFunctionWrapperTest.java
Patch:
@@ -23,6 +23,7 @@
 import com.squareup.javapoet.ParameterizedTypeName;
 import com.squareup.javapoet.TypeName;
 import com.squareup.javapoet.TypeSpec;
+import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
 import org.web3j.TempFileProvider;
@@ -58,6 +59,7 @@ public class SolidityFunctionWrapperTest extends TempFileProvider {
     private GenerationReporter generationReporter;
 
     @Override
+    @BeforeEach
     public void setUp() throws Exception {
         super.setUp();
         generationReporter = mock(GenerationReporter.class);

File: codegen/src/test/java/org/web3j/codegen/unit/gen/ParserUtilsTest.java
Patch:
@@ -33,7 +33,7 @@ public void testGenerateJavaPoetStringTypesWhenReturnTypeIsContract() {
                         .collect(Collectors.toList())
                         .get(0);
         assertEquals(
-                "$L = $T.deploy($L,$L,$L,$S ).send()",
+                "$L = $T.deploy($L, $L, $L, $S).send()",
                 ParserUtils.generateJavaPoetStringTypes(deploy, greeterContractClass));
     }
 
@@ -46,7 +46,7 @@ public void testGenerateJavaPoetStringTypesWhenReturnTypeIsNotContract() {
                         .collect(Collectors.toList())
                         .get(0);
         assertEquals(
-                "$T $L = $L.newGreeting($S ).send()",
+                "$T $L = $L.newGreeting($S).send()",
                 ParserUtils.generateJavaPoetStringTypes(newGreeting, greeterContractClass));
     }
 

File: core/src/test/java/org/web3j/crypto/WalletTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.web3j.utils.Numeric;
 
+import static org.junit.jupiter.api.Assertions.assertArrayEquals;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class WalletTest {
@@ -67,7 +68,7 @@ public void testDecryptScrypt() throws Exception {
 
     @Test
     public void testGenerateRandomBytes() {
-        assertEquals(Wallet.generateRandomBytes(0), (new byte[] {}));
+        assertArrayEquals(Wallet.generateRandomBytes(0), (new byte[] {}));
         assertEquals(Wallet.generateRandomBytes(10).length, (10));
     }
 

File: crypto/src/test/java/org/web3j/crypto/TransactionEncoderTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.web3j.rlp.RlpType;
 import org.web3j.utils.Numeric;
 
+import static org.junit.jupiter.api.Assertions.assertArrayEquals;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 @SuppressWarnings("deprecation")
@@ -59,7 +60,7 @@ public void testContractAsRlpValues() {
 
     @Test
     public void testEip155Encode() {
-        assertEquals(
+        assertArrayEquals(
                 TransactionEncoder.encode(createEip155RawTransaction(), (byte) 1),
                 (Numeric.hexStringToByteArray(
                         "0xec098504a817c800825208943535353535353535353535353535353535353535880de0"
@@ -73,7 +74,7 @@ public void testEip155Transaction() {
                 Credentials.create(
                         "0x4646464646464646464646464646464646464646464646464646464646464646");
 
-        assertEquals(
+        assertArrayEquals(
                 TransactionEncoder.signMessage(createEip155RawTransaction(), (byte) 1, credentials),
                 (Numeric.hexStringToByteArray(
                         "0xf86c098504a817c800825208943535353535353535353535353535353535353535880"

File: utils/src/test/java/org/web3j/crypto/HashTest.java
Patch:
@@ -14,6 +14,7 @@
 
 import org.junit.jupiter.api.Test;
 
+import static org.junit.jupiter.api.Assertions.assertArrayEquals;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.web3j.utils.Numeric.asByte;
 
@@ -73,7 +74,7 @@ public void testSha3() {
                 };
 
         byte[] result = Hash.sha3(input);
-        assertEquals(result, (expected));
+        assertArrayEquals(result, (expected));
     }
 
     @Test

File: core/src/main/java/org/web3j/ens/EnsResolver.java
Patch:
@@ -107,7 +107,7 @@ public String resolve(String contractId) {
 
     /**
      * Reverse name resolution as documented in the <a
-     * href="https://docs.ens.domains/en/latest/userguide.html#reverse-name-resolution">specification</a>.
+     * href="https://docs.ens.domains/contract-api-reference/reverseregistrar">specification</a>.
      *
      * @param address an ethereum address, example: "0x314159265dd8dbb310642f98f50c066173c1259b"
      * @return a EnsName registered for provided address

File: core/src/main/java/org/web3j/ens/EnsResolver.java
Patch:
@@ -107,7 +107,7 @@ public String resolve(String contractId) {
 
     /**
      * Reverse name resolution as documented in the <a
-     * href="https://docs.ens.domains/en/latest/userguide.html#reverse-name-resolution">specification</a>.
+     * href="https://docs.ens.domains/contract-api-reference/reverseregistrar">specification</a>.
      *
      * @param address an ethereum address, example: "0x314159265dd8dbb310642f98f50c066173c1259b"
      * @return a EnsName registered for provided address

File: abi/src/main/java/org/web3j/abi/TypeReference.java
Patch:
@@ -114,6 +114,8 @@ public java.lang.reflect.Type getType() {
      *
      * @param solidityType the solidity as a string eg Address Int
      * @param primitives is it a primitive type
+     * @return returns
+     * @throws ClassNotFoundException when the class cannot be found.
      */
     protected static Class<? extends org.web3j.abi.datatypes.Type> getAtomicTypeClass(
             String solidityType, boolean primitives) throws ClassNotFoundException {

File: abi/src/main/java/org/web3j/abi/datatypes/DynamicArray.java
Patch:
@@ -19,7 +19,7 @@ public class DynamicArray<T extends Type> extends Array<T> {
 
     @Deprecated
     @SafeVarargs
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({"unchecked"})
     public DynamicArray(T... values) {
         super((Class<T>) AbiTypes.getType(values[0].getTypeAsString()), values);
     }

File: abi/src/test/java/org/web3j/abi/TypeEncoderTest.java
Patch:
@@ -304,15 +304,16 @@ public void testDynamicArray() {
                         + "0000000000000000000000000000000000000000000000000000000000000003"));
     }
 
+    @SuppressWarnings("unchecked")
     @Test
     public void testEmptyArray() {
-        @SuppressWarnings("unchecked")
         DynamicArray<Uint> array = new DynamicArray(Uint.class);
         assertEquals(
                 TypeEncoder.encodeDynamicArray(array),
                 ("0000000000000000000000000000000000000000000000000000000000000000"));
     }
 
+    @SuppressWarnings("unchecked")
     @Test
     public void testArrayOfBytes() {
         DynamicArray<DynamicBytes> array =
@@ -376,6 +377,7 @@ public void testArrayOfBytes() {
                         + "0000000000000000000000000000000000000000000000000000000000000000"));
     }
 
+    @SuppressWarnings("unchecked")
     @Test
     public void testArrayOfStrings() {
         DynamicArray<Utf8String> array =

File: abi/src/test/java/org/web3j/abi/UtilsTest.java
Patch:
@@ -39,7 +39,7 @@
 public class UtilsTest {
 
     @Test
-    public void testGetTypeName() throws ClassNotFoundException {
+    public void testGetTypeName() {
         assertEquals(Utils.getTypeName(new TypeReference<Uint>() {}), ("uint256"));
         assertEquals(Utils.getTypeName(new TypeReference<Int>() {}), ("int256"));
         assertEquals(Utils.getTypeName(new TypeReference<Ufixed>() {}), ("ufixed256"));
@@ -71,6 +71,7 @@ public void testTypeMap() {
                         new Uint256(BigInteger.TEN))));
     }
 
+    @SuppressWarnings("unchecked")
     @Test
     public void testTypeMapNested() {
         List<BigInteger> innerList1 = Arrays.asList(BigInteger.valueOf(1), BigInteger.valueOf(2));

File: besu/src/test/java/org/web3j/protocol/besu/RequestTest.java
Patch:
@@ -59,7 +59,7 @@ public void testMinerStop() throws Exception {
     @Test
     public void testClicqueDiscard() throws Exception {
         final String accountId = "0xFE3B557E8Fb62b89F4916B721be55cEb828dBd73";
-        web3j.clicqueDiscard(accountId).send();
+        web3j.cliqueDiscard(accountId).send();
 
         verifyResult(
                 "{\"jsonrpc\":\"2.0\",\"method\":\"clique_discard\","
@@ -69,7 +69,7 @@ public void testClicqueDiscard() throws Exception {
     @Test
     public void testClicqueGetSigners() throws Exception {
         final DefaultBlockParameter blockParameter = DefaultBlockParameter.valueOf("latest");
-        web3j.clicqueGetSigners(blockParameter).send();
+        web3j.cliqueGetSigners(blockParameter).send();
 
         verifyResult(
                 "{\"jsonrpc\":\"2.0\",\"method\":\"clique_getSigners\","
@@ -80,7 +80,7 @@ public void testClicqueGetSigners() throws Exception {
     public void testClicqueGetSignersAtHash() throws Exception {
         final String blockHash =
                 "0x98b2ddb5106b03649d2d337d42154702796438b3c74fd25a5782940e84237a48";
-        web3j.clicqueGetSignersAtHash(blockHash).send();
+        web3j.cliqueGetSignersAtHash(blockHash).send();
 
         verifyResult(
                 "{\"jsonrpc\":\"2.0\",\"method\":\"clique_getSignersAtHash\",\"params\":"

File: codegen/src/main/java/org/web3j/codegen/TruffleJsonFunctionWrapperGenerator.java
Patch:
@@ -47,6 +47,7 @@
  * contains information about deployment addresses. This should make integration with Truffle
  * easier.
  */
+@SuppressWarnings("deprecation")
 public class TruffleJsonFunctionWrapperGenerator extends FunctionWrapperGenerator {
 
     private static final String USAGE =

File: codegen/src/main/java/org/web3j/codegen/TupleGenerator.java
Patch:
@@ -54,7 +54,7 @@ private void generate(String destinationDir) throws IOException {
     }
 
     private TypeSpec createTuple(int size) {
-        String javadoc = "@deprecated use 'component$L' method instead";
+        String javadoc = "@deprecated use 'component$L' method instead \n @return returns a value";
         String className = CLASS_NAME + size;
         TypeSpec.Builder typeSpecBuilder =
                 TypeSpec.classBuilder(className)

File: core/src/main/java/org/web3j/protocol/core/RemoteFunctionCall.java
Patch:
@@ -46,7 +46,7 @@ public String encodeFunctionCall() {
     /**
      * decode a method response
      *
-     * @param response
+     * @param response the encoded response
      * @return list of abi types
      */
     public List<Type> decodeFunctionResponse(String response) {

File: core/src/main/java/org/web3j/protocol/core/filters/Filter.java
Patch:
@@ -115,6 +115,7 @@ private void getInitialFilterLogs() {
                 ethLog = new EthLog();
                 ethLog.setResult(Collections.emptyList());
             }
+
             process(ethLog.getLogs());
 
         } catch (IOException e) {

File: core/src/main/java/org/web3j/tx/Contract.java
Patch:
@@ -51,7 +51,7 @@
 /**
  * Solidity contract type abstraction for interacting with smart contracts via native Java types.
  */
-@SuppressWarnings("WeakerAccess")
+@SuppressWarnings({"WeakerAccess", "deprecation"})
 public abstract class Contract extends ManagedTransaction {
 
     // https://www.reddit.com/r/ethereum/comments/5g8ia6/attention_miners_we_recommend_raising_gas_limit/

File: core/src/main/java/org/web3j/tx/gas/StaticGasProvider.java
Patch:
@@ -14,6 +14,7 @@
 
 import java.math.BigInteger;
 
+@SuppressWarnings("deprecation")
 public class StaticGasProvider implements ContractGasProvider {
     private BigInteger gasPrice;
     private BigInteger gasLimit;

File: core/src/main/java/org/web3j/tx/response/QueuingTransactionReceiptProcessor.java
Patch:
@@ -66,9 +66,8 @@ private void sendTransactionReceiptRequests() {
         for (RequestWrapper requestWrapper : pendingTransactions) {
             try {
                 String transactionHash = requestWrapper.getTransactionHash();
-                Optional<TransactionReceipt> transactionReceipt =
-                        (Optional<TransactionReceipt>)
-                                sendTransactionReceiptRequest(transactionHash);
+                Optional<? extends TransactionReceipt> transactionReceipt =
+                        sendTransactionReceiptRequest(transactionHash);
                 if (transactionReceipt.isPresent()) {
                     callback.accept(transactionReceipt.get());
                     pendingTransactions.remove(requestWrapper);

File: core/src/test/java/org/web3j/ens/ContractsTest.java
Patch:
@@ -23,6 +23,7 @@
 import static org.web3j.ens.Contracts.ROPSTEN;
 import static org.web3j.ens.Contracts.resolveRegistryContract;
 
+@SuppressWarnings("deprecation")
 public class ContractsTest {
 
     @Test

File: core/src/test/java/org/web3j/ens/EnsResolverTest.java
Patch:
@@ -33,8 +33,8 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertTrue;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 import static org.web3j.ens.EnsResolver.DEFAULT_SYNC_THRESHOLD;

File: core/src/test/java/org/web3j/protocol/core/WebSocketEventTest.java
Patch:
@@ -27,9 +27,9 @@
 import org.web3j.protocol.websocket.WebSocketListener;
 import org.web3j.protocol.websocket.WebSocketService;
 
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.matches;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyString;
+import static org.mockito.ArgumentMatchers.matches;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;

File: core/src/test/java/org/web3j/protocol/core/filters/FilterTester.java
Patch:
@@ -38,8 +38,8 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.junit.jupiter.api.Assertions.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: core/src/test/java/org/web3j/protocol/ipc/UnixDomainSocketTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.web3j.protocol.core.Request;
 import org.web3j.protocol.core.methods.response.Web3ClientVersion;
 
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;

File: core/src/test/java/org/web3j/protocol/rx/JsonRpc2_0RxTest.java
Patch:
@@ -43,8 +43,8 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.junit.jupiter.api.Assertions.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: core/src/test/java/org/web3j/tx/ManagedTransactionTester.java
Patch:
@@ -28,7 +28,7 @@
 import org.web3j.protocol.core.methods.response.TransactionReceipt;
 import org.web3j.utils.TxHashVerifier;
 
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: core/src/test/java/org/web3j/tx/ReadonlyTransactionManagerTest.java
Patch:
@@ -24,7 +24,7 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertThrows;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: core/src/test/java/org/web3j/tx/response/PollingTransactionReceiptProcessorTest.java
Patch:
@@ -73,8 +73,8 @@ public void throwsTransactionExceptionWhenReceiptIsNotAvailableInTime() throws E
         }
     }
 
-    private static <T extends Response<?>> Request<String, T> requestReturning(T response) {
-        Request<String, T> request = mock(Request.class);
+    private static <T extends Response<?>> Request requestReturning(T response) {
+        Request request = mock(Request.class);
         try {
             when(request.send()).thenReturn(response);
         } catch (IOException e) {

File: crypto/src/test/java/org/web3j/crypto/TransactionEncoderTest.java
Patch:
@@ -23,6 +23,7 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
+@SuppressWarnings("deprecation")
 public class TransactionEncoderTest {
 
     @Test

File: geth/src/test/java/org/web3j/protocol/geth/JsonRpc2_0GethTest.java
Patch:
@@ -24,9 +24,9 @@
 import org.web3j.protocol.websocket.WebSocketListener;
 import org.web3j.protocol.websocket.WebSocketService;
 
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.matches;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyString;
+import static org.mockito.ArgumentMatchers.matches;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;

File: tuples/src/main/java/org/web3j/tuples/generated/Tuple1.java
Patch:
@@ -18,7 +18,9 @@ public Tuple1(T1 value1) {
     }
 
     /**
-     * @deprecated use 'component1' method instead */
+     * @deprecated use 'component1' method instead
+     * @return returns a value
+     * */
     @Deprecated
     public T1 getValue1() {
         return value1;

File: besu/src/test/java/org/web3j/protocol/besu/ResponseTest.java
Patch:
@@ -283,8 +283,8 @@ public void testPrivGetTransactionReceipt() {
                         + "        \"output\":\"myRlpEncodedOutputFromPrivateContract\",\n"
                         + "        \"status\":\"0x1\",\n"
                         + "        \"privacyGroupId\":\"Qlv2Jhn3C3/2KrPU7Jeu/9F6rElio9LNBSieb0Xk/Ro=\",\n"
-                        + "        \"publicHash\": \"0x75aaac4be865057a576872587c9672197f1bab25e64b588c81f483c5869e0fa7\",\n"
-                        + "        \"privateHash\": \"0x5504d87dc6c6ab8ea4f5c988bcf1c41d40e6b594b80849d4444c432099ee6c34\",\n"
+                        + "        \"commitmentHash\": \"0x75aaac4be865057a576872587c9672197f1bab25e64b588c81f483c5869e0fa7\",\n"
+                        + "        \"transactionHash\": \"0x5504d87dc6c6ab8ea4f5c988bcf1c41d40e6b594b80849d4444c432099ee6c34\",\n"
                         + "        \"privateFrom\": \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\",\n"
                         + "        \"logs\": [{\n"
                         + "            \"removed\": false,\n"

File: besu/src/test/java/org/web3j/protocol/besu/RequestTest.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.List;
 import java.util.Map;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import org.web3j.protocol.RequestTester;
 import org.web3j.protocol.core.DefaultBlockParameter;

File: codegen/src/test/java/org/web3j/codegen/TupleGeneratorTest.java
Patch:
@@ -22,11 +22,11 @@
 import javax.tools.StandardJavaFileManager;
 import javax.tools.ToolProvider;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import org.web3j.TempFileProvider;
 
-import static org.junit.Assert.assertTrue;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.web3j.codegen.TupleGenerator.CLASS_NAME;
 import static org.web3j.codegen.TupleGenerator.LIMIT;
 
@@ -59,7 +59,7 @@ private void verifyGeneratedCode(List<String> sourceFiles) throws IOException {
                     fileManager.getJavaFileObjectsFromStrings(sourceFiles);
             JavaCompiler.CompilationTask task =
                     compiler.getTask(null, fileManager, diagnostics, null, null, compilationUnits);
-            assertTrue("Generated code contains compile time error", task.call());
+            assertTrue(task.call(), "Generated code contains compile time error");
         }
     }
 }

File: core/src/test/java/org/web3j/protocol/ResponseTester.java
Patch:
@@ -18,13 +18,13 @@
 import okhttp3.OkHttpClient;
 import okhttp3.Protocol;
 import okhttp3.ResponseBody;
-import org.junit.Before;
+import org.junit.jupiter.api.BeforeEach;
 
 import org.web3j.protocol.core.Request;
 import org.web3j.protocol.core.Response;
 import org.web3j.protocol.http.HttpService;
 
-import static org.junit.Assert.fail;
+import static org.junit.jupiter.api.Assertions.fail;
 import static org.web3j.protocol.http.HttpService.JSON_MEDIA_TYPE;
 
 /** Protocol Response tests. */
@@ -34,7 +34,7 @@ public abstract class ResponseTester {
     private OkHttpClient okHttpClient;
     private ResponseInterceptor responseInterceptor;
 
-    @Before
+    @BeforeEach
     public void setUp() {
         responseInterceptor = new ResponseInterceptor();
         okHttpClient = new OkHttpClient.Builder().addInterceptor(responseInterceptor).build();

File: core/src/test/java/org/web3j/protocol/admin/RequestTest.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.math.BigInteger;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import org.web3j.protocol.RequestTester;
 import org.web3j.protocol.core.methods.request.Transaction;

File: core/src/test/java/org/web3j/protocol/core/EqualsVerifierResponseTest.java
Patch:
@@ -14,7 +14,7 @@
 
 import nl.jqno.equalsverifier.EqualsVerifier;
 import nl.jqno.equalsverifier.Warning;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import org.web3j.protocol.core.methods.response.AbiDefinition;
 import org.web3j.protocol.core.methods.response.EthBlock;

File: core/src/test/java/org/web3j/protocol/core/RequestTest.java
Patch:
@@ -15,7 +15,7 @@
 import java.math.BigInteger;
 import java.util.Arrays;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import org.web3j.protocol.RequestTester;
 import org.web3j.protocol.Web3j;

File: core/src/test/java/org/web3j/protocol/core/filters/LogFilterTest.java
Patch:
@@ -12,7 +12,7 @@
  */
 package org.web3j.protocol.core.filters;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import org.web3j.protocol.core.methods.request.EthFilter;
 import org.web3j.protocol.core.methods.response.EthLog;

File: core/src/test/java/org/web3j/protocol/core/methods/response/EthBlockTest.java
Patch:
@@ -14,9 +14,9 @@
 
 import java.math.BigInteger;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class EthBlockTest {
 

File: core/src/test/java/org/web3j/protocol/ipc/IpcServiceTest.java
Patch:
@@ -14,8 +14,8 @@
 
 import java.io.IOException;
 
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import org.web3j.protocol.core.Request;
 import org.web3j.protocol.core.methods.response.Web3ClientVersion;
@@ -29,7 +29,7 @@ public class IpcServiceTest {
     private IpcService ipcService;
     private IOFacade ioFacade;
 
-    @Before
+    @BeforeEach
     public void setUp() {
         ioFacade = mock(IOFacade.class);
         ipcService =

File: core/src/test/java/org/web3j/protocol/ipc/UnixDomainSocketTest.java
Patch:
@@ -18,8 +18,8 @@
 import java.nio.CharBuffer;
 import java.util.LinkedList;
 
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import org.web3j.protocol.core.Request;
 import org.web3j.protocol.core.methods.response.Web3ClientVersion;
@@ -40,7 +40,7 @@ public class UnixDomainSocketTest {
 
     private UnixDomainSocket unixDomainSocket;
 
-    @Before
+    @BeforeEach
     public void setUp() {
         writer = mock(PrintWriter.class);
         reader = mock(InputStreamReader.class);

File: core/src/test/java/org/web3j/protocol/websocket/WebSocketClientTest.java
Patch:
@@ -15,8 +15,8 @@
 import java.io.IOException;
 import java.net.URI;
 
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
@@ -28,7 +28,7 @@ public class WebSocketClientTest {
 
     private WebSocketClient client;
 
-    @Before
+    @BeforeEach
     public void before() throws Exception {
         client = new WebSocketClient(new URI("ws://localhost/"));
         client.setListener(listener);

File: core/src/test/java/org/web3j/tx/ManagedTransactionTester.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.io.IOException;
 
-import org.junit.Before;
+import org.junit.jupiter.api.BeforeEach;
 
 import org.web3j.crypto.Credentials;
 import org.web3j.crypto.SampleKeys;
@@ -39,7 +39,7 @@ public abstract class ManagedTransactionTester {
     protected Web3j web3j;
     protected TxHashVerifier txHashVerifier;
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         web3j = mock(Web3j.class);
         txHashVerifier = mock(TxHashVerifier.class);

File: crypto/src/test/java/org/web3j/crypto/Bip32Test.java
Patch:
@@ -14,12 +14,12 @@
 
 import java.nio.ByteBuffer;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import org.web3j.utils.Numeric;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.web3j.crypto.Bip32ECKeyPair.HARDENED_BIT;
 import static org.web3j.crypto.Hash.sha256;
 

File: crypto/src/test/java/org/web3j/crypto/SecureRandomUtilsTest.java
Patch:
@@ -12,9 +12,9 @@
  */
 package org.web3j.crypto;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-import static org.junit.Assert.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.web3j.crypto.SecureRandomUtils.isAndroidRuntime;
 import static org.web3j.crypto.SecureRandomUtils.secureRandom;
 

File: eea/src/test/java/org/web3j/protocol/eea/RequestTest.java
Patch:
@@ -12,7 +12,7 @@
  */
 package org.web3j.protocol.eea;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import org.web3j.protocol.RequestTester;
 import org.web3j.protocol.http.HttpService;

File: eea/src/test/java/org/web3j/protocol/eea/crypto/PrivateTransactionEncoderTest.java
Patch:
@@ -16,13 +16,13 @@
 import java.util.Arrays;
 import java.util.List;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import org.web3j.crypto.Credentials;
 import org.web3j.utils.Base64String;
 import org.web3j.utils.Numeric;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.web3j.utils.Restriction.RESTRICTED;
 
 public class PrivateTransactionEncoderTest {

File: eea/src/test/java/org/web3j/utils/RestrictionTest.java
Patch:
@@ -12,9 +12,9 @@
  */
 package org.web3j.utils;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.web3j.utils.Restriction.RESTRICTED;
 import static org.web3j.utils.Restriction.UNRESTRICTED;
 

File: geth/src/test/java/org/web3j/protocol/geth/RequestTest.java
Patch:
@@ -12,7 +12,7 @@
  */
 package org.web3j.protocol.geth;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import org.web3j.protocol.RequestTester;
 import org.web3j.protocol.http.HttpService;

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/Scenario.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.Collections;
 import java.util.Optional;
 
-import org.junit.Before;
+import org.junit.jupiter.api.BeforeEach;
 
 import org.web3j.abi.TypeReference;
 import org.web3j.abi.datatypes.Function;
@@ -36,7 +36,7 @@
 import org.web3j.protocol.http.HttpService;
 import org.web3j.tx.gas.StaticGasProvider;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.jupiter.api.Assertions.fail;
 
 /** Common methods & settings used accross scenarios. */
 public class Scenario {
@@ -75,7 +75,7 @@ public class Scenario {
 
     public Scenario() {}
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         this.web3j = Admin.build(new HttpService());
     }

File: parity/src/test/java/org/web3j/protocol/parity/EqualsVerifierParityResponseTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import nl.jqno.equalsverifier.EqualsVerifier;
 import nl.jqno.equalsverifier.Warning;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import org.web3j.protocol.parity.methods.response.FullTraceInfo;
 import org.web3j.protocol.parity.methods.response.ParityAllAccountsInfo;

File: parity/src/test/java/org/web3j/protocol/parity/RequestTest.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.List;
 import java.util.Map;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import org.web3j.crypto.WalletFile;
 import org.web3j.protocol.RequestTester;

File: core/src/test/java/org/web3j/protocol/core/ResponseTest.java
Patch:
@@ -552,7 +552,7 @@ public void testEthCall() {
 
         EthCall ethCall = deserialiseResponse(EthCall.class);
         assertThat(ethCall.getValue(), is("0x"));
-        assertFalse(ethCall.reverts());
+        assertFalse(ethCall.isReverted());
         assertNull(ethCall.getRevertReason());
     }
 
@@ -576,7 +576,7 @@ public void testEthCallReverted() {
                         + "}");
 
         EthCall ethCall = deserialiseResponse(EthCall.class);
-        assertTrue(ethCall.reverts());
+        assertTrue(ethCall.isReverted());
         assertThat(
                 ethCall.getRevertReason(),
                 is(

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthChainId.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.math.BigInteger;
 
-/** eth_gasPrice. */
+/** eth_chainId. */
 public class EthChainId extends Response<String> {
     public BigInteger getChainId() {
         return Numeric.decodeQuantity(getResult());

File: besu/src/main/java/org/web3j/tx/gas/BesuPrivacyGasProvider.java
Patch:
@@ -16,7 +16,7 @@
 
 public class BesuPrivacyGasProvider extends StaticGasProvider {
     public BesuPrivacyGasProvider(BigInteger gasPrice) {
-        super(gasPrice, BigInteger.valueOf(23176));
+        super(gasPrice, BigInteger.valueOf(3000000));
     }
 
     public BesuPrivacyGasProvider(BigInteger gasPrice, BigInteger gasLimit) {

File: integration-tests/src/test/java/org/web3j/protocol/besu/BesuPrivacyQuickstartIntegrationTest.java
Patch:
@@ -49,8 +49,7 @@
  */
 @Ignore
 public class BesuPrivacyQuickstartIntegrationTest {
-    private static final String CLIENT_VERSION =
-            "pantheon/v1.2.1-dev-ad2d34cd/linux-x86_64/oracle_openjdk-java-11";
+    private static final String CLIENT_VERSION = "besu/v1.3.0/linux-x86_64/oracle_openjdk-java-11";
 
     // FIXME: This should be made public in the contract wrapper
     private static final String HUMAN_STANDARD_TOKEN_BINARY =

File: besu/src/main/java/org/web3j/tx/gas/BesuPrivacyGasProvider.java
Patch:
@@ -16,7 +16,7 @@
 
 public class BesuPrivacyGasProvider extends StaticGasProvider {
     public BesuPrivacyGasProvider(BigInteger gasPrice) {
-        super(gasPrice, BigInteger.valueOf(23176));
+        super(gasPrice, BigInteger.valueOf(3000000));
     }
 
     public BesuPrivacyGasProvider(BigInteger gasPrice, BigInteger gasLimit) {

File: integration-tests/src/test/java/org/web3j/protocol/besu/BesuPrivacyQuickstartIntegrationTest.java
Patch:
@@ -50,7 +50,7 @@
 @Ignore
 public class BesuPrivacyQuickstartIntegrationTest {
     private static final String CLIENT_VERSION =
-            "pantheon/v1.2.1-dev-ad2d34cd/linux-x86_64/oracle_openjdk-java-11";
+            "besu/v1.3.0/linux-x86_64/oracle_openjdk-java-11";
 
     // FIXME: This should be made public in the contract wrapper
     private static final String HUMAN_STANDARD_TOKEN_BINARY =

File: abi/src/main/java/org/web3j/abi/TypeReference.java
Patch:
@@ -111,6 +111,9 @@ public java.lang.reflect.Type getType() {
     /**
      * This is a helper method that only works for atomic types (uint, bytes, etc). Array types must
      * be wrapped by a {@link java.lang.reflect.ParameterizedType}.
+     *
+     * @param solidityType the solidity as a string eg Address Int
+     * @param primitives is it a primitive type
      */
     protected static Class<? extends org.web3j.abi.datatypes.Type> getAtomicTypeClass(
             String solidityType, boolean primitives) throws ClassNotFoundException {

File: core/src/main/java/org/web3j/protocol/core/RemoteFunctionCall.java
Patch:
@@ -47,7 +47,7 @@ public String encodeFunctionCall() {
      * decode a method response
      *
      * @param response
-     * @return
+     * @return list of abi types
      */
     public List<Type> decodeFunctionResponse(String response) {
         return FunctionReturnDecoder.decode(response, function.getOutputParameters());

File: abi/src/main/java/org/web3j/abi/DefaultFunctionEncoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/DefaultFunctionReturnDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/EventEncoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/EventValues.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/FunctionEncoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/FunctionReturnDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/TypeDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/TypeEncoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/TypeMappingException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/TypeReference.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/Utils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/datatypes/AbiTypes.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/datatypes/Address.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/datatypes/Array.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/datatypes/Bool.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/datatypes/Bytes.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/datatypes/BytesType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/datatypes/DynamicArray.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/datatypes/DynamicBytes.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/datatypes/Event.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/datatypes/Fixed.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/datatypes/FixedPointType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/datatypes/Function.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/datatypes/Int.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/datatypes/IntType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/datatypes/NumericType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/datatypes/StaticArray.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/datatypes/Type.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/datatypes/Ufixed.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/datatypes/Uint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/datatypes/Utf8String.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/datatypes/primitive/Byte.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/datatypes/primitive/Char.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/datatypes/primitive/Double.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/datatypes/primitive/Float.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/datatypes/primitive/Int.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/datatypes/primitive/Long.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/datatypes/primitive/Number.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/datatypes/primitive/PrimitiveType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/datatypes/primitive/Short.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/spi/FunctionEncoderProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/main/java/org/web3j/abi/spi/FunctionReturnDecoderProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/test/java/org/web3j/abi/DefaultFunctionEncoderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/test/java/org/web3j/abi/EventEncoderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/test/java/org/web3j/abi/FunctionReturnDecoderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/test/java/org/web3j/abi/TypeDecoderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/test/java/org/web3j/abi/TypeEncoderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/test/java/org/web3j/abi/UtilsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/test/java/org/web3j/abi/datatypes/AddressTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/test/java/org/web3j/abi/datatypes/FixedPointTypeTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/test/java/org/web3j/abi/datatypes/StaticArrayTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: abi/src/test/java/org/web3j/abi/datatypes/Utf8StringTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: besu/src/main/java/org/web3j/protocol/besu/Besu.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: besu/src/main/java/org/web3j/protocol/besu/JsonRpc2_0Besu.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: besu/src/main/java/org/web3j/protocol/besu/request/CreatePrivacyGroupRequest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: besu/src/main/java/org/web3j/protocol/besu/response/BesuEthAccountsMapResponse.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: besu/src/main/java/org/web3j/protocol/besu/response/BesuFullDebugTraceResponse.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: besu/src/main/java/org/web3j/protocol/besu/response/FullDebugTraceInfo.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: besu/src/main/java/org/web3j/protocol/besu/response/StructLogs.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: besu/src/main/java/org/web3j/protocol/besu/response/privacy/PrivCreatePrivacyGroup.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: besu/src/main/java/org/web3j/protocol/besu/response/privacy/PrivFindPrivacyGroup.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: besu/src/main/java/org/web3j/protocol/besu/response/privacy/PrivGetPrivacyPrecompileAddress.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: besu/src/main/java/org/web3j/protocol/besu/response/privacy/PrivGetPrivateTransaction.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: besu/src/main/java/org/web3j/protocol/besu/response/privacy/PrivGetTransactionReceipt.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: besu/src/main/java/org/web3j/protocol/besu/response/privacy/PrivacyGroup.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: besu/src/main/java/org/web3j/protocol/besu/response/privacy/PrivateTransaction.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: besu/src/main/java/org/web3j/protocol/besu/response/privacy/PrivateTransactionLegacy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: besu/src/main/java/org/web3j/protocol/besu/response/privacy/PrivateTransactionReceipt.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: besu/src/main/java/org/web3j/protocol/besu/response/privacy/PrivateTransactionWithPrivacyGroup.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: besu/src/main/java/org/web3j/tx/BesuPrivateTransactionManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: besu/src/main/java/org/web3j/tx/LegacyPrivateTransactionManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: besu/src/main/java/org/web3j/tx/PrivateTransactionManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: besu/src/main/java/org/web3j/tx/gas/BesuPrivacyGasProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: besu/src/main/java/org/web3j/tx/response/PollingPrivateTransactionReceiptProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: besu/src/main/java/org/web3j/tx/response/PrivateTransactionReceiptProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: besu/src/main/java/org/web3j/utils/PrivacyGroupUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: besu/src/test/java/org/web3j/protocol/besu/RequestTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: besu/src/test/java/org/web3j/protocol/besu/ResponseTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: codegen/src/main/java/org/web3j/codegen/AbiTypesGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: codegen/src/main/java/org/web3j/codegen/Console.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: codegen/src/main/java/org/web3j/codegen/FunctionWrapperGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: codegen/src/main/java/org/web3j/codegen/GenerationReporter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: codegen/src/main/java/org/web3j/codegen/Generator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: codegen/src/main/java/org/web3j/codegen/LogGenerationReporter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: codegen/src/main/java/org/web3j/codegen/SolidityFunctionWrapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: codegen/src/main/java/org/web3j/codegen/SolidityFunctionWrapperGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: codegen/src/main/java/org/web3j/codegen/TruffleJsonFunctionWrapperGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: codegen/src/main/java/org/web3j/codegen/TupleGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: codegen/src/test/java/org/web3j/codegen/AbiTypesGeneratorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: codegen/src/test/java/org/web3j/codegen/ContractJsonParseTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: codegen/src/test/java/org/web3j/codegen/SolidityFunctionWrapperGeneratorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: codegen/src/test/java/org/web3j/codegen/SolidityFunctionWrapperTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: codegen/src/test/java/org/web3j/codegen/TruffleJsonFunctionWrapperGeneratorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: codegen/src/test/java/org/web3j/codegen/TupleGeneratorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/contracts/token/ERC20BasicInterface.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/contracts/token/ERC20Interface.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/crypto/Bip44WalletUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/crypto/Wallet.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/crypto/WalletFile.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/crypto/WalletUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/ens/Contracts.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/ens/EnsResolutionException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/ens/EnsResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/ens/NameHash.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/ens/RecordTypes.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/ObjectMapperFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/Service.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/Web3j.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/Web3jService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/admin/Admin.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/admin/JsonRpc2_0Admin.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/admin/methods/response/BooleanResponse.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/admin/methods/response/NewAccountIdentifier.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/admin/methods/response/PersonalListAccounts.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/admin/methods/response/PersonalSign.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/admin/methods/response/PersonalUnlockAccount.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/DefaultBlockParameter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/DefaultBlockParameterName.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/DefaultBlockParameterNumber.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/Ethereum.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/JsonRpc2_0Web3j.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/RemoteCall.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/RemoteFunctionCall.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/Request.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/Response.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/RpcErrors.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/filters/BlockFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/filters/Callback.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/filters/Filter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/filters/FilterException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/filters/LogFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/filters/PendingTransactionFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/request/EthFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/request/Filter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/request/ShhFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/request/ShhPost.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/request/Transaction.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/AbiDefinition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/BaseEventResponse.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/DbGetHex.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/DbGetString.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/DbPutHex.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/DbPutString.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthAccounts.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthBlock.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthBlockNumber.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthCall.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthCoinbase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthCompileLLL.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthCompileSerpent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthCompileSolidity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthEstimateGas.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthGasPrice.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthGetBalance.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthGetBlockTransactionCountByHash.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthGetBlockTransactionCountByNumber.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthGetCode.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthGetCompilers.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthGetStorageAt.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthGetTransactionCount.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthGetTransactionReceipt.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthGetUncleCountByBlockHash.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthGetUncleCountByBlockNumber.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthGetWork.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthHashrate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthLog.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthMining.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthProtocolVersion.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthSendRawTransaction.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthSendTransaction.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthSign.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthSubmitHashrate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthSubmitWork.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthSubscribe.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthSyncing.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthTransaction.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthUninstallFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthUnsubscribe.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/Log.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/MinerStartResponse.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/NetListening.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/NetPeerCount.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/NetVersion.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/ShhAddToGroup.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/ShhHasIdentity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/ShhMessages.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/ShhNewFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/ShhNewGroup.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/ShhNewIdentity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/ShhPost.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/ShhUninstallFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/ShhVersion.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/Transaction.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/TransactionReceipt.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/VoidResponse.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/Web3ClientVersion.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/core/methods/response/Web3Sha3.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/deserializer/KeepAsJsonDeserialzier.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/deserializer/RawResponseDeserializer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/exceptions/ClientConnectionException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/exceptions/TransactionException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/http/HttpService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/ipc/IOFacade.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/ipc/IpcService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/ipc/UnixDomainSocket.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/ipc/UnixIpcService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/ipc/WindowsIpcService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/ipc/WindowsNamedPipe.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/rx/JsonRpc2_0Rx.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/rx/Web3jRx.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/websocket/WebSocketClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/websocket/WebSocketListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/websocket/WebSocketRequest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/websocket/WebSocketService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/websocket/WebSocketSubscription.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/websocket/events/Log.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/websocket/events/LogNotification.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/websocket/events/NewHead.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/websocket/events/NewHeadsNotification.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/websocket/events/Notification.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/websocket/events/NotificationParams.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/websocket/events/PendingTransactionNotification.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/protocol/websocket/events/SyncingNotfication.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/tx/ChainId.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/tx/ChainIdLong.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/tx/ClientTransactionManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/tx/Contract.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/tx/FastRawTransactionManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/tx/ManagedTransaction.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/tx/RawTransactionManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/tx/ReadonlyTransactionManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/tx/TransactionManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/tx/Transfer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/tx/exceptions/ContractCallException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/tx/exceptions/TxHashMismatchException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/tx/gas/ContractGasProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/tx/gas/DefaultGasProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/tx/gas/StaticGasProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/tx/response/Callback.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/tx/response/EmptyTransactionReceipt.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/tx/response/NoOpProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/tx/response/PollingTransactionReceiptProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/tx/response/QueuingTransactionReceiptProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/tx/response/TransactionReceiptProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/utils/Async.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/utils/Collection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/utils/Files.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/utils/Flowables.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/utils/TxHashVerifier.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/main/java/org/web3j/utils/Version.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/TempFileProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/crypto/Bip44WalletUtilsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/crypto/WalletTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/crypto/WalletUtilsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/ens/ContractsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/ens/EnsResolverTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/ens/NameHashTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/protocol/RequestTester.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/protocol/ResponseTester.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/protocol/admin/RequestTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/protocol/admin/ResponseTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/protocol/core/EqualsVerifierResponseTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/protocol/core/JsonRpc2_0Web3jTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/protocol/core/RawResponseTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/protocol/core/RequestTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/protocol/core/ResponseTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/protocol/core/WebSocketEventTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/protocol/core/filters/BlockFilterTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/protocol/core/filters/FilterTester.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/protocol/core/filters/LogFilterTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/protocol/core/filters/PendingTransactionFilterTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/protocol/core/methods/response/EthBlockTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/protocol/http/HttpServiceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/protocol/ipc/IpcServiceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/protocol/ipc/UnixDomainSocketTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/protocol/rx/JsonRpc2_0RxTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/protocol/websocket/WebSocketClientTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/protocol/websocket/WebSocketServiceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/tx/ContractTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/tx/ManagedTransactionTester.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/tx/RawTransactionManagerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/tx/ReadonlyTransactionManagerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/tx/TransferTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/tx/response/PollingTransactionReceiptProcessorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/utils/AsyncTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/utils/CollectionTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/utils/FlowablesTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: core/src/test/java/org/web3j/utils/VersionTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: crypto/src/main/java/org/web3j/crypto/Bip32ECKeyPair.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: crypto/src/main/java/org/web3j/crypto/Bip39Wallet.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: crypto/src/main/java/org/web3j/crypto/CipherException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: crypto/src/main/java/org/web3j/crypto/ContractUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: crypto/src/main/java/org/web3j/crypto/Credentials.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: crypto/src/main/java/org/web3j/crypto/ECDSASignature.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: crypto/src/main/java/org/web3j/crypto/ECKeyPair.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: crypto/src/main/java/org/web3j/crypto/Keys.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: crypto/src/main/java/org/web3j/crypto/LinuxSecureRandom.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: crypto/src/main/java/org/web3j/crypto/MnemonicUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Web3 Labs LTD.
+ * Copyright 2019 Web3 Labs Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at

File: codegen/src/test/java/org/web3j/codegen/SolidityFunctionWrapperGeneratorTest.java
Patch:
@@ -23,7 +23,6 @@
 import javax.tools.StandardJavaFileManager;
 import javax.tools.ToolProvider;
 
-import org.junit.Ignore;
 import org.junit.Test;
 
 import org.web3j.TempFileProvider;

File: abi/src/main/java/org/web3j/abi/FunctionEncoder.java
Patch:
@@ -49,14 +49,14 @@ public static String encode(final Function function) {
     public static String encodeConstructor(final List<Type> parameters) {
         return encoder().encodeParameters(parameters);
     }
-    
+
     public static Function makeFunction(
             String fnname,
             List<String> solidityInputTypes,
             List<Object> arguments,
             List<String> solidityOutputTypes)
             throws ClassNotFoundException, NoSuchMethodException, InstantiationException,
-            IllegalAccessException, InvocationTargetException {
+                    IllegalAccessException, InvocationTargetException {
         List<Type> encodedInput = new ArrayList<>();
         Iterator argit = arguments.iterator();
         for (String st : solidityInputTypes) {
@@ -68,7 +68,7 @@ public static Function makeFunction(
         }
         return new Function(fnname, encodedInput, encodedOutput);
     }
-    
+
     protected abstract String encodeFunction(Function function);
 
     protected abstract String encodeParameters(List<Type> parameters);

File: abi/src/main/java/org/web3j/abi/datatypes/Address.java
Patch:
@@ -16,7 +16,9 @@
 
 import org.web3j.utils.Numeric;
 
-/** Address type, which by default is equivalent to uint160 which follows the Ethereum specification. */
+/**
+ * Address type, which by default is equivalent to uint160 which follows the Ethereum specification.
+ */
 public class Address implements Type<String> {
 
     public static final String TYPE_NAME = "address";

File: abi/src/main/java/org/web3j/abi/datatypes/Array.java
Patch:
@@ -17,8 +17,6 @@
 import java.util.List;
 import java.util.Objects;
 
-import org.web3j.abi.datatypes.generated.AbiTypes;
-
 /** Fixed size array. */
 public abstract class Array<T extends Type> implements Type<List<T>> {
 

File: abi/src/main/java/org/web3j/abi/datatypes/Bytes.java
Patch:
@@ -19,14 +19,14 @@ public class Bytes extends BytesType {
 
     protected Bytes(int byteSize, byte[] value) {
         super(value, TYPE_NAME + value.length);
-        if (!isValid(byteSize, value)) {
+        if (!isValid(byteSize)) {
             throw new UnsupportedOperationException(
                     "Input byte array must be in range 0 < M <= 32 and length must match type");
         }
     }
 
-    private boolean isValid(int byteSize, byte[] value) {
-        int length = value.length;
+    private boolean isValid(int byteSize) {
+        int length = getValue().length;
         return length > 0 && length <= 32 && length == byteSize;
     }
 }

File: abi/src/main/java/org/web3j/abi/datatypes/BytesType.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.Arrays;
 
 /** Binary sequence of bytes. */
-public class BytesType implements Type<byte[]> {
+public abstract class BytesType implements Type<byte[]> {
 
     private byte[] value;
     private String type;

File: abi/src/main/java/org/web3j/abi/datatypes/DynamicArray.java
Patch:
@@ -14,8 +14,6 @@
 
 import java.util.List;
 
-import org.web3j.abi.datatypes.generated.AbiTypes;
-
 /** Dynamic array type. */
 public class DynamicArray<T extends Type> extends Array<T> {
 

File: abi/src/main/java/org/web3j/abi/datatypes/NumericType.java
Patch:
@@ -35,6 +35,8 @@ public BigInteger getValue() {
         return value;
     }
 
+    public abstract int getBitSize();
+
     @Override
     public boolean equals(Object o) {
         if (this == o) {

File: abi/src/main/java/org/web3j/abi/datatypes/StaticArray.java
Patch:
@@ -16,8 +16,6 @@
 import java.util.Collections;
 import java.util.List;
 
-import org.web3j.abi.datatypes.generated.AbiTypes;
-
 /** Static array type. */
 public abstract class StaticArray<T extends Type> extends Array<T> {
 

File: abi/src/test/java/org/web3j/abi/datatypes/AddressTest.java
Patch:
@@ -22,7 +22,7 @@ public class AddressTest {
     @Test
     public void testToString() {
         assertThat(
-                new Address("00052b08330e05d731e38c856c1043288f7d9744").toString(),
+                new Address("52b08330e05d731e38c856c1043288f7d9744").toString(),
                 is("0x00052b08330e05d731e38c856c1043288f7d9744"));
         assertThat(
                 new Address("0x00052b08330e05d731e38c856c1043288f7d9744").toString(),

File: codegen/src/main/java/org/web3j/codegen/TruffleJsonFunctionWrapperGenerator.java
Patch:
@@ -32,6 +32,7 @@
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
 
+import org.web3j.abi.datatypes.Address;
 import org.web3j.protocol.ObjectMapperFactory;
 import org.web3j.protocol.core.methods.response.AbiDefinition;
 import org.web3j.tx.ChainId;
@@ -116,7 +117,7 @@ static Contract loadContractDefinition(File jsonFile) throws IOException {
     }
 
     @SuppressWarnings("unchecked")
-    private void generate() throws IOException, ClassNotFoundException {
+    public void generate() throws IOException, ClassNotFoundException {
 
         File truffleJsonFile = new File(jsonFileLocation);
         if (!truffleJsonFile.exists() || !truffleJsonFile.canRead()) {
@@ -146,7 +147,7 @@ private void generate() throws IOException, ClassNotFoundException {
             } else {
                 addresses = Collections.EMPTY_MAP;
             }
-            new SolidityFunctionWrapper(useJavaNativeTypes)
+            new SolidityFunctionWrapper(useJavaNativeTypes, Address.DEFAULT_LENGTH)
                     .generateJavaFiles(
                             contractName,
                             c.getBytecode(),

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthCall.java
Patch:
@@ -17,9 +17,9 @@
 
 import org.web3j.abi.FunctionReturnDecoder;
 import org.web3j.abi.TypeReference;
+import org.web3j.abi.datatypes.AbiTypes;
 import org.web3j.abi.datatypes.Type;
 import org.web3j.abi.datatypes.Utf8String;
-import org.web3j.abi.datatypes.generated.AbiTypes;
 import org.web3j.protocol.core.Response;
 
 /** eth_call. */

File: core/src/test/java/org/web3j/tx/ReadonlyTransactionManagerTest.java
Patch:
@@ -46,7 +46,7 @@ public void sendCallTest() throws IOException {
     }
 
     @Test(expected = UnsupportedOperationException.class)
-    public void testSendTransaction() {
+    public void testSendTransaction() throws IOException {
         ReadonlyTransactionManager readonlyTransactionManager =
                 new ReadonlyTransactionManager(web3j, "");
         readonlyTransactionManager.sendTransaction(

File: crypto/src/main/java/org/web3j/crypto/StructuredDataEncoder.java
Patch:
@@ -32,8 +32,8 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 
 import org.web3j.abi.TypeEncoder;
+import org.web3j.abi.datatypes.AbiTypes;
 import org.web3j.abi.datatypes.Type;
-import org.web3j.abi.datatypes.generated.AbiTypes;
 import org.web3j.utils.Numeric;
 
 import static org.web3j.crypto.Hash.sha3;

File: pantheon/src/main/java/org/web3j/tx/PrivateTransactionManager.java
Patch:
@@ -121,7 +121,8 @@ public EthSendTransaction sendTransaction(
             final BigInteger gasLimit,
             final String to,
             final String data,
-            final BigInteger value)
+            final BigInteger value,
+            boolean constructor)
             throws IOException {
 
         final BigInteger nonce =

File: codegen/src/test/java/org/web3j/codegen/SolidityFunctionWrapperTest.java
Patch:
@@ -44,7 +44,6 @@
 import static org.hamcrest.core.Is.is;
 import static org.hamcrest.core.IsEqual.equalTo;
 import static org.junit.Assert.assertThat;
-import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.web3j.codegen.SolidityFunctionWrapper.buildTypeName;
@@ -72,7 +71,7 @@ public void testCreateValidParamName() {
     }
 
     @Test
-    public void testBuildTypeName() {
+    public void testBuildTypeName() throws Exception {
         assertThat(buildTypeName("uint256"), is(ClassName.get(Uint256.class)));
         assertThat(buildTypeName("uint64"), is(ClassName.get(Uint64.class)));
         assertThat(buildTypeName("string"), is(ClassName.get(Utf8String.class)));

File: core/src/main/java/org/web3j/tx/Contract.java
Patch:
@@ -688,7 +688,7 @@ protected List<EventValues> extractEventParameters(
     }
 
     protected EventValuesWithLog extractEventParametersWithLog(Event event, Log log) {
-        return staticExtractEventParametersWithLog(event,log);
+        return staticExtractEventParametersWithLog(event, log);
     }
 
     protected static EventValuesWithLog staticExtractEventParametersWithLog(Event event, Log log) {

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthBlock.java
Patch:
@@ -267,7 +267,7 @@ public void setExtraData(String extraData) {
         }
 
         public BigInteger getSize() {
-            return Numeric.decodeQuantity(size);
+            return size != null ? Numeric.decodeQuantity(size) : BigInteger.ZERO;
         }
 
         public String getSizeRaw() {

File: core/src/main/java/org/web3j/protocol/http/HttpService.java
Patch:
@@ -42,6 +42,7 @@
 public class HttpService extends Service {
 
     /** Copied from {@link ConnectionSpec#APPROVED_CIPHER_SUITES}. */
+    @SuppressWarnings("JavadocReference")
     private static final CipherSuite[] INFURA_CIPHER_SUITES =
             new CipherSuite[] {
                 CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,

File: crypto/src/main/java/org/web3j/crypto/SignedRawTransaction.java
Patch:
@@ -35,11 +35,11 @@ public Sign.SignatureData getSignatureData() {
     }
 
     @Override
-    public byte[] getEncodedTransaction(Integer chainId) {
+    public byte[] getEncodedTransaction(Long chainId) {
         if (null == chainId) {
             return TransactionEncoder.encode(this);
         } else {
-            return TransactionEncoder.encode(this, chainId.byteValue());
+            return TransactionEncoder.encode(this, chainId);
         }
     }
 }

File: pantheon/src/main/java/org/web3j/tx/gas/PantheonPrivacyGasProvider.java
Patch:
@@ -14,12 +14,12 @@
 
 import java.math.BigInteger;
 
-public class EeaGasProvider extends StaticGasProvider {
-    public EeaGasProvider(BigInteger gasPrice) {
+public class PantheonPrivacyGasProvider extends StaticGasProvider {
+    public PantheonPrivacyGasProvider(BigInteger gasPrice) {
         super(gasPrice, BigInteger.valueOf(3000000));
     }
 
-    public EeaGasProvider(BigInteger gasPrice, BigInteger gasLimit) {
+    public PantheonPrivacyGasProvider(BigInteger gasPrice, BigInteger gasLimit) {
         super(gasPrice, gasLimit);
     }
 }

File: eea/src/main/java/org/web3j/protocol/eea/Eea.java
Patch:
@@ -11,7 +11,8 @@ static Eea build(Web3jService web3jService) {
         return new JsonRpc2_0Eea(web3jService);
     }
 
-    Request<?, EthSendTransaction> eeaSendRawTransaction(String signedTransactionData);
+    Request<?, EthSendTransaction> eeaSendRawTransaction(final String signedTransactionData);
 
-    Request<?, EeaGetTransactionReceipt> eeaGetTransactionReceipt(String transactionHash);
+    Request<?, EeaGetTransactionReceipt> eeaGetTransactionReceipt(
+            final String transactionHash, final String enclavePublicKey);
 }

File: eea/src/test/java/org/web3j/protocol/eea/RequestTest.java
Patch:
@@ -31,9 +31,9 @@ public void testEthSendRawTransaction() throws Exception {
 
     @Test
     public void testEeaGetTransactionReceipt() throws Exception {
-        web3j.eeaGetTransactionReceipt("0x123").send();
+        web3j.eeaGetTransactionReceipt("0x123", "myEnclavePubKey").send();
 
         verifyResult("{\"jsonrpc\":\"2.0\",\"method\":\"eea_getTransactionReceipt\","
-                + "\"params\":[\"0x123\"],\"id\":1}");
+                + "\"params\":[\"0x123\",\"myEnclavePubKey\"],\"id\":1}");
     }
 }

File: pantheon/src/main/java/org/web3j/protocol/pantheon/JsonRpc2_0Pantheon.java
Patch:
@@ -38,7 +38,7 @@ public Request<?, BooleanResponse> minerStop() {
     }
 
     @Override
-    public Request<?, BooleanResponse> clicqueDiscard(String address) {
+    public Request<?, BooleanResponse> cliqueDiscard(String address) {
         return new Request<>(
                 "clique_discard",
                 Arrays.asList(address),
@@ -47,7 +47,7 @@ public Request<?, BooleanResponse> clicqueDiscard(String address) {
     }
 
     @Override
-    public Request<?, EthAccounts> clicqueGetSigners(DefaultBlockParameter defaultBlockParameter) {
+    public Request<?, EthAccounts> cliqueGetSigners(DefaultBlockParameter defaultBlockParameter) {
         return new Request<>(
                 "clique_getSigners",
                 Arrays.asList(defaultBlockParameter.getValue()),
@@ -56,7 +56,7 @@ public Request<?, EthAccounts> clicqueGetSigners(DefaultBlockParameter defaultBl
     }
 
     @Override
-    public Request<?, EthAccounts> clicqueGetSignersAtHash(String blockHash) {
+    public Request<?, EthAccounts> cliqueGetSignersAtHash(String blockHash) {
         return new Request<>(
                 "clique_getSignersAtHash",
                 Arrays.asList(blockHash),

File: core/src/test/java/org/web3j/crypto/WalletUtilsTest.java
Patch:
@@ -18,8 +18,8 @@
 import static org.web3j.crypto.Hash.sha256;
 import static org.web3j.crypto.SampleKeys.CREDENTIALS;
 import static org.web3j.crypto.SampleKeys.KEY_PAIR;
-import static org.web3j.crypto.SampleKeys.PASSWORD;
 import static org.web3j.crypto.SampleKeys.MNEMONIC;
+import static org.web3j.crypto.SampleKeys.PASSWORD;
 import static org.web3j.crypto.WalletUtils.isValidAddress;
 import static org.web3j.crypto.WalletUtils.isValidPrivateKey;
 
@@ -51,7 +51,8 @@ public void testGenerateBip39Wallets() throws Exception {
 
     @Test
     public void testGenerateBip39WalletFromMnemonic() throws Exception {
-        Bip39Wallet wallet = WalletUtils.generateBip39WalletFromMnemonic(PASSWORD, MNEMONIC, tempDir);
+        Bip39Wallet wallet = WalletUtils.generateBip39WalletFromMnemonic(
+                PASSWORD, MNEMONIC, tempDir);
         byte[] seed = MnemonicUtils.generateSeed(wallet.getMnemonic(), PASSWORD);
         Credentials credentials = Credentials.create(ECKeyPair.create(sha256(seed)));
 

File: crypto/src/test/java/org/web3j/crypto/SampleKeys.java
Patch:
@@ -18,7 +18,8 @@ public class SampleKeys {
     public static final String ADDRESS_NO_PREFIX = Numeric.cleanHexPrefix(ADDRESS);
 
     public static final String PASSWORD = "Insecure Pa55w0rd";
-    public static final String MNEMONIC = "scatter major grant return flee easy female jungle vivid movie bicycle absent weather inspire carry";
+    public static final String MNEMONIC = "scatter major grant return flee easy female jungle"
+            + " vivid movie bicycle absent weather inspire carry";
 
     static final BigInteger PRIVATE_KEY = Numeric.toBigInt(PRIVATE_KEY_STRING);
     static final BigInteger PUBLIC_KEY = Numeric.toBigInt(PUBLIC_KEY_STRING);

File: core/src/main/java/org/web3j/crypto/WalletUtils.java
Patch:
@@ -118,7 +118,8 @@ public static Bip39Wallet generateBip39Wallet(String password, File destinationD
      * @throws CipherException if the underlying cipher is not available
      * @throws IOException if the destination cannot be written to
      */
-    public static Bip39Wallet generateBip39WalletFromMnemonic(String password, String mnemonic, File destinationDirectory)
+    public static Bip39Wallet generateBip39WalletFromMnemonic(
+            String password, String mnemonic, File destinationDirectory)
             throws CipherException, IOException {
         byte[] seed = MnemonicUtils.generateSeed(mnemonic, password);
         ECKeyPair privateKey = ECKeyPair.create(sha256(seed));

File: crypto/src/main/java/org/web3j/crypto/TransactionDecoder.java
Patch:
@@ -17,7 +17,7 @@ public static RawTransaction decode(String hexTransaction) {
         BigInteger gasPrice = ((RlpString) values.getValues().get(1)).asPositiveBigInteger();
         BigInteger gasLimit = ((RlpString) values.getValues().get(2)).asPositiveBigInteger();
         String to = ((RlpString) values.getValues().get(3)).asString();
-        BigInteger value = ((RlpString) values.getValues().get(4)).asBigInteger();
+        BigInteger value = ((RlpString) values.getValues().get(4)).asPositiveBigInteger();
         String data = ((RlpString) values.getValues().get(5)).asString();
         if (values.getValues().size() > 6) {
             byte[] v = ((RlpString) values.getValues().get(6)).getBytes();

File: hosted-providers/src/main/java/org/web3j/protocol/nodesmith/RateLimitInfo.java
Patch:
@@ -6,7 +6,7 @@
 /**
  * Represents the current status of an api key's rate limit for Nodesmith's
  * service. This class can be used to inspect when more requests can be sent.
- * @see <a href="https://beta.docs.nodesmith.io/#/ethereum/rateLimiting>Rate Limiting</a>
+ * @see <a href="https://beta.docs.nodesmith.io/#/ethereum/rateLimiting">Rate Limiting</a>
  */
 public class RateLimitInfo {
 

File: hosted-providers/src/main/java/org/web3j/protocol/nodesmith/RateLimitInfo.java
Patch:
@@ -4,9 +4,9 @@
 import java.util.Optional;
 
 /**
- * Represents the current status of an api key's
- * <a href="https://beta.docs.nodesmith.io/#/ethereum/rateLimiting>rate limit</a> for Nodesmith's
+ * Represents the current status of an api key's rate limit for Nodesmith's
  * service. This class can be used to inspect when more requests can be sent.
+ * @see <a href="https://beta.docs.nodesmith.io/#/ethereum/rateLimiting>Rate Limiting</a>
  */
 public class RateLimitInfo {
 

File: core/src/test/java/org/web3j/crypto/WalletUtilsTest.java
Patch:
@@ -18,8 +18,8 @@
 import static org.web3j.crypto.Hash.sha256;
 import static org.web3j.crypto.SampleKeys.CREDENTIALS;
 import static org.web3j.crypto.SampleKeys.KEY_PAIR;
-import static org.web3j.crypto.SampleKeys.PASSWORD;
 import static org.web3j.crypto.SampleKeys.MNEMONIC;
+import static org.web3j.crypto.SampleKeys.PASSWORD;
 import static org.web3j.crypto.WalletUtils.isValidAddress;
 import static org.web3j.crypto.WalletUtils.isValidPrivateKey;
 
@@ -51,7 +51,8 @@ public void testGenerateBip39Wallets() throws Exception {
 
     @Test
     public void testGenerateBip39WalletFromMnemonic() throws Exception {
-        Bip39Wallet wallet = WalletUtils.generateBip39WalletFromMnemonic(PASSWORD, MNEMONIC, tempDir);
+        Bip39Wallet wallet = WalletUtils.generateBip39WalletFromMnemonic(
+                PASSWORD, MNEMONIC, tempDir);
         byte[] seed = MnemonicUtils.generateSeed(wallet.getMnemonic(), PASSWORD);
         Credentials credentials = Credentials.create(ECKeyPair.create(sha256(seed)));
 

File: crypto/src/test/java/org/web3j/crypto/SampleKeys.java
Patch:
@@ -18,7 +18,8 @@ public class SampleKeys {
     public static final String ADDRESS_NO_PREFIX = Numeric.cleanHexPrefix(ADDRESS);
 
     public static final String PASSWORD = "Insecure Pa55w0rd";
-    public static final String MNEMONIC = "scatter major grant return flee easy female jungle vivid movie bicycle absent weather inspire carry";
+    public static final String MNEMONIC = "scatter major grant return flee easy female jungle"
+            + " vivid movie bicycle absent weather inspire carry";
 
     static final BigInteger PRIVATE_KEY = Numeric.toBigInt(PRIVATE_KEY_STRING);
     static final BigInteger PUBLIC_KEY = Numeric.toBigInt(PUBLIC_KEY_STRING);

File: core/src/main/java/org/web3j/crypto/WalletUtils.java
Patch:
@@ -118,7 +118,8 @@ public static Bip39Wallet generateBip39Wallet(String password, File destinationD
      * @throws CipherException if the underlying cipher is not available
      * @throws IOException if the destination cannot be written to
      */
-    public static Bip39Wallet generateBip39WalletFromMnemonic(String password, String mnemonic, File destinationDirectory)
+    public static Bip39Wallet generateBip39WalletFromMnemonic(
+            String password, String mnemonic, File destinationDirectory)
             throws CipherException, IOException {
         byte[] seed = MnemonicUtils.generateSeed(mnemonic, password);
         ECKeyPair privateKey = ECKeyPair.create(sha256(seed));

File: core/src/main/java/org/web3j/protocol/websocket/WebSocketClient.java
Patch:
@@ -28,7 +28,7 @@ public WebSocketClient(URI serverUri, Map<String, String> httpHeaders) {
 
     @Override
     public void onOpen(ServerHandshake serverHandshake) {
-        log.info("Opened WebSocket connection to {}", uri);
+        log.debug("Opened WebSocket connection to {}", uri);
     }
 
     @Override
@@ -45,7 +45,7 @@ public void onMessage(String s) {
 
     @Override
     public void onClose(int code, String reason, boolean remote) {
-        log.info("Closed WebSocket connection to {}, because of reason: '{}'."
+        log.debug("Closed WebSocket connection to {}, because of reason: '{}'."
                 + "Connection closed remotely: {}", uri, reason, remote);
         listenerOpt.ifPresent(WebSocketListener::onClose);
     }

File: core/src/main/java/org/web3j/protocol/websocket/WebSocketService.java
Patch:
@@ -233,7 +233,7 @@ private <T extends Notification<?>> void processSubscriptionResponse(
 
     private <T extends Notification<?>> void establishSubscription(
             BehaviorSubject<T> subject, Class<T> responseType, EthSubscribe subscriptionReply) {
-        log.info("Subscribed to RPC events with id {}",
+        log.debug("Subscribed to RPC events with id {}",
                 subscriptionReply.getSubscriptionId());
         subscriptionForId.put(
                 subscriptionReply.getSubscriptionId(),
@@ -278,7 +278,7 @@ private void sendExceptionToListener(
     }
 
     private void processSubscriptionEvent(String replyStr, JsonNode replyJson) {
-        log.info("Processing event: {}", replyStr);
+        log.debug("Processing event: {}", replyStr);
         String subscriptionId = extractSubscriptionId(replyJson);
         WebSocketSubscription subscription = subscriptionForId.get(subscriptionId);
 

File: core/src/main/java/org/web3j/protocol/websocket/WebSocketClient.java
Patch:
@@ -28,7 +28,7 @@ public WebSocketClient(URI serverUri, Map<String, String> httpHeaders) {
 
     @Override
     public void onOpen(ServerHandshake serverHandshake) {
-        log.info("Opened WebSocket connection to {}", uri);
+        log.debug("Opened WebSocket connection to {}", uri);
     }
 
     @Override
@@ -45,7 +45,7 @@ public void onMessage(String s) {
 
     @Override
     public void onClose(int code, String reason, boolean remote) {
-        log.info("Closed WebSocket connection to {}, because of reason: '{}'."
+        log.debug("Closed WebSocket connection to {}, because of reason: '{}'."
                 + "Connection closed remotely: {}", uri, reason, remote);
         listenerOpt.ifPresent(WebSocketListener::onClose);
     }

File: core/src/main/java/org/web3j/protocol/websocket/WebSocketService.java
Patch:
@@ -233,7 +233,7 @@ private <T extends Notification<?>> void processSubscriptionResponse(
 
     private <T extends Notification<?>> void establishSubscription(
             BehaviorSubject<T> subject, Class<T> responseType, EthSubscribe subscriptionReply) {
-        log.info("Subscribed to RPC events with id {}",
+        log.debug("Subscribed to RPC events with id {}",
                 subscriptionReply.getSubscriptionId());
         subscriptionForId.put(
                 subscriptionReply.getSubscriptionId(),
@@ -278,7 +278,7 @@ private void sendExceptionToListener(
     }
 
     private void processSubscriptionEvent(String replyStr, JsonNode replyJson) {
-        log.info("Processing event: {}", replyStr);
+        log.debug("Processing event: {}", replyStr);
         String subscriptionId = extractSubscriptionId(replyJson);
         WebSocketSubscription subscription = subscriptionForId.get(subscriptionId);
 

File: abi/src/main/java/org/web3j/abi/FunctionReturnDecoder.java
Patch:
@@ -106,17 +106,20 @@ private static List<Type> build(
                     result = TypeDecoder.decodeDynamicArray(
                             input, hexStringDataOffset, typeReference);
                     offset += MAX_BYTE_LENGTH_FOR_HEX_STRING;
+
                 } else if (typeReference instanceof TypeReference.StaticArrayTypeReference) {
                     int length = ((TypeReference.StaticArrayTypeReference) typeReference).getSize();
                     result = TypeDecoder.decodeStaticArray(
                             input, hexStringDataOffset, typeReference, length);
                     offset += length * MAX_BYTE_LENGTH_FOR_HEX_STRING;
+
                 } else if (StaticArray.class.isAssignableFrom(type)) {
                     int length = Integer.parseInt(type.getSimpleName()
                             .substring(StaticArray.class.getSimpleName().length()));
                     result = TypeDecoder.decodeStaticArray(
                             input, hexStringDataOffset, typeReference, length);
                     offset += length * MAX_BYTE_LENGTH_FOR_HEX_STRING;
+
                 } else {
                     result = TypeDecoder.decode(input, hexStringDataOffset, type);
                     offset += MAX_BYTE_LENGTH_FOR_HEX_STRING;

File: abi/src/test/java/org/web3j/abi/datatypes/StaticArrayTest.java
Patch:
@@ -5,6 +5,7 @@
 import org.junit.Test;
 
 import org.web3j.abi.datatypes.generated.StaticArray3;
+import org.web3j.abi.datatypes.generated.StaticArray32;
 import org.web3j.abi.datatypes.generated.Uint8;
 
 import static org.hamcrest.CoreMatchers.equalTo;
@@ -15,7 +16,7 @@ public class StaticArrayTest {
 
     @Test
     public void canBeInstantiatedWithLessThan32Elements() {
-        final StaticArray<Uint> array = new StaticArray<>(arrayOfUints(32));
+        final StaticArray<Uint> array = new StaticArray32<>(arrayOfUints(32));
 
         assertThat(array.getValue().size(), equalTo(32));
     }
@@ -41,7 +42,7 @@ public void throwsIfSizeDoesntMatchType() {
     @Test
     public void throwsIfSizeIsAboveMaxOf32() {
         try {
-            new StaticArray<>(arrayOfUints(33));
+            new StaticArray32<>(arrayOfUints(33));
             fail();
         } catch (UnsupportedOperationException e) {
             assertThat(e.getMessage(), equalTo(

File: integration-tests/src/test/java/org/web3j/generated/Fibonacci.java
Patch:
@@ -30,7 +30,7 @@
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
  * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
  *
- * <p>Generated with web3j version 4.0.0.
+ * <p>Generated with web3j version 4.0.1.
  */
 public class Fibonacci extends Contract {
     private static final String BINARY = "608060405234801561001057600080fd5b5061014f806100206000396000f30060806040526004361061004b5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633c7fdc70811461005057806361047ff41461007a575b600080fd5b34801561005c57600080fd5b50610068600435610092565b60408051918252519081900360200190f35b34801561008657600080fd5b506100686004356100e0565b600061009d826100e0565b604080518481526020810183905281519293507f71e71a8458267085d5ab16980fd5f114d2d37f232479c245d523ce8d23ca40ed929081900390910190a1919050565b60008115156100f15750600061011e565b81600114156101025750600161011e565b61010e600283036100e0565b61011a600184036100e0565b0190505b9190505600a165627a7a723058201b9d0941154b95636fb5e4225fefd5c2c460060efa5f5e40c9826dce08814af80029";

File: integration-tests/src/test/java/org/web3j/generated/Greeter.java
Patch:
@@ -23,7 +23,7 @@
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
  * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
  *
- * <p>Generated with web3j version 4.0.0.
+ * <p>Generated with web3j version 4.0.1.
  */
 public class Greeter extends Contract {
     private static final String BINARY = "608060405234801561001057600080fd5b5060405161040038038061040083398101604052805160008054600160a060020a0319163317905501805161004c906001906020840190610053565b50506100ee565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061009457805160ff19168380011785556100c1565b828001600101855582156100c1579182015b828111156100c15782518255916020019190600101906100a6565b506100cd9291506100d1565b5090565b6100eb91905b808211156100cd57600081556001016100d7565b90565b610303806100fd6000396000f3006080604052600436106100565763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166341c0e1b5811461005b5780634ac0d66e14610072578063cfae3217146100cb575b600080fd5b34801561006757600080fd5b50610070610155565b005b34801561007e57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100709436949293602493928401919081908401838280828437509497506101929650505050505050565b3480156100d757600080fd5b506100e06101a9565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561011a578181015183820152602001610102565b50505050905090810190601f1680156101475780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60005473ffffffffffffffffffffffffffffffffffffffff163314156101905760005473ffffffffffffffffffffffffffffffffffffffff16ff5b565b80516101a590600190602084019061023f565b5050565b60018054604080516020601f600260001961010087891615020190951694909404938401819004810282018101909252828152606093909290918301828280156102345780601f1061020957610100808354040283529160200191610234565b820191906000526020600020905b81548152906001019060200180831161021757829003601f168201915b505050505090505b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061028057805160ff19168380011785556102ad565b828001600101855582156102ad579182015b828111156102ad578251825591602001919060010190610292565b506102b99291506102bd565b5090565b61023c91905b808211156102b957600081556001016102c35600a165627a7a72305820a9bc86938894dc250f6ea25dd823d4472fad6087edcda429a3504e3713a9fc880029";

File: integration-tests/src/test/java/org/web3j/generated/ShipIt.java
Patch:
@@ -27,7 +27,7 @@
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
  * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
  *
- * <p>Generated with web3j version 4.0.0.
+ * <p>Generated with web3j version 4.0.1.
  */
 public class ShipIt extends Contract {
     private static final String BINARY = "608060405234801561001057600080fd5b50610262806100206000396000f3006080604052600436106100405763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663d51cd4ac8114610045575b600080fd5b34801561005157600080fd5b5061007373ffffffffffffffffffffffffffffffffffffffff6004351661014c565b6040805173ffffffffffffffffffffffffffffffffffffffff808b1682528916602082015290810187905260608101869052608081018560008111156100b557fe5b60ff168152602001848152602001806020018360001916600019168152602001828103825284818151815260200191508051906020019080838360005b8381101561010a5781810151838201526020016100f2565b50505050905090810190601f1680156101375780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b6000602081815291815260409081902080546001808301546002808501546003860154600487015460058801546006890180548b516101009982161599909902600019011695909504601f81018c90048c0288018c01909a5289875273ffffffffffffffffffffffffffffffffffffffff9788169a97909516989297919660ff9091169591939192908301828280156102265780601f106101fb57610100808354040283529160200191610226565b820191906000526020600020905b81548152906001019060200180831161020957829003601f168201915b50505050509080600701549050885600a165627a7a723058207623bd815501fd75633dfcf1bbcf2f0c1d7d060d5e13c438f1f3fc79d294d5d80029";

File: integration-tests/src/test/java/org/web3j/generated/SimpleStorage.java
Patch:
@@ -22,7 +22,7 @@
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
  * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
  *
- * <p>Generated with web3j version 4.0.0.
+ * <p>Generated with web3j version 4.0.1.
  */
 public class SimpleStorage extends Contract {
     private static final String BINARY = "608060405234801561001057600080fd5b50600560005560bf806100246000396000f30060806040526004361060485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166360fe47b18114604d5780636d4ce63c146064575b600080fd5b348015605857600080fd5b5060626004356088565b005b348015606f57600080fd5b506076608d565b60408051918252519081900360200190f35b600055565b600054905600a165627a7a72305820419b352168794764ac1d5d6d3460eaffedc13c00bcbb4d2ff772148d2f0670fc0029";

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/Scenario.java
Patch:
@@ -22,7 +22,6 @@
 import org.web3j.protocol.core.methods.response.EthGetTransactionReceipt;
 import org.web3j.protocol.core.methods.response.TransactionReceipt;
 import org.web3j.protocol.http.HttpService;
-import org.web3j.tx.gas.ContractGasProvider;
 import org.web3j.tx.gas.StaticGasProvider;
 
 import static junit.framework.TestCase.fail;
@@ -65,7 +64,7 @@ public class Scenario {
     public Scenario() { }
 
     @Before
-    public void setUp() {
+    public void setUp() throws Exception {
         this.web3j = Admin.build(new HttpService());
     }
 

File: abi/src/main/java/org/web3j/abi/FunctionReturnDecoder.java
Patch:
@@ -106,17 +106,20 @@ private static List<Type> build(
                     result = TypeDecoder.decodeDynamicArray(
                             input, hexStringDataOffset, typeReference);
                     offset += MAX_BYTE_LENGTH_FOR_HEX_STRING;
+
                 } else if (typeReference instanceof TypeReference.StaticArrayTypeReference) {
                     int length = ((TypeReference.StaticArrayTypeReference) typeReference).getSize();
                     result = TypeDecoder.decodeStaticArray(
                             input, hexStringDataOffset, typeReference, length);
                     offset += length * MAX_BYTE_LENGTH_FOR_HEX_STRING;
+
                 } else if (StaticArray.class.isAssignableFrom(type)) {
                     int length = Integer.parseInt(type.getSimpleName()
                             .substring(StaticArray.class.getSimpleName().length()));
                     result = TypeDecoder.decodeStaticArray(
                             input, hexStringDataOffset, typeReference, length);
                     offset += length * MAX_BYTE_LENGTH_FOR_HEX_STRING;
+
                 } else {
                     result = TypeDecoder.decode(input, hexStringDataOffset, type);
                     offset += MAX_BYTE_LENGTH_FOR_HEX_STRING;

File: abi/src/test/java/org/web3j/abi/TypeDecoderTest.java
Patch:
@@ -16,6 +16,7 @@
 import org.web3j.abi.datatypes.generated.Bytes6;
 import org.web3j.abi.datatypes.generated.Int256;
 import org.web3j.abi.datatypes.generated.Int64;
+import org.web3j.abi.datatypes.generated.StaticArray2;
 import org.web3j.abi.datatypes.generated.Uint256;
 import org.web3j.abi.datatypes.generated.Uint64;
 
@@ -251,8 +252,7 @@ public void testStaticArray() {
                 0,
                 new TypeReference.StaticArrayTypeReference<StaticArray<Uint256>>(2) {},
                 2),
-                is(new StaticArray<>(Uint256.class,
-                        new Uint256(BigInteger.TEN),
+                is(new StaticArray2<>(Uint256.class, new Uint256(BigInteger.TEN),
                         new Uint256(BigInteger.valueOf(Long.MAX_VALUE)))));
 
         assertThat(TypeDecoder.decodeStaticArray(
@@ -264,7 +264,7 @@ public void testStaticArray() {
                 new TypeReference.StaticArrayTypeReference<StaticArray<Utf8String>>(2){},
                 2
                 ),
-                equalTo(new StaticArray<>(Utf8String.class,
+                equalTo(new StaticArray2<>(Utf8String.class,
                         new Utf8String("Hello, world!"),
                         new Utf8String("world! Hello,"))));
     }

File: abi/src/test/java/org/web3j/abi/datatypes/StaticArrayTest.java
Patch:
@@ -5,6 +5,7 @@
 import org.junit.Test;
 
 import org.web3j.abi.datatypes.generated.StaticArray3;
+import org.web3j.abi.datatypes.generated.StaticArray32;
 import org.web3j.abi.datatypes.generated.Uint8;
 
 import static org.hamcrest.CoreMatchers.equalTo;
@@ -15,7 +16,7 @@ public class StaticArrayTest {
 
     @Test
     public void canBeInstantiatedWithLessThan32Elements() {
-        final StaticArray<Uint> array = new StaticArray<>(arrayOfUints(32));
+        final StaticArray<Uint> array = new StaticArray32<>(arrayOfUints(32));
 
         assertThat(array.getValue().size(), equalTo(32));
     }
@@ -41,7 +42,7 @@ public void throwsIfSizeDoesntMatchType() {
     @Test
     public void throwsIfSizeIsAboveMaxOf32() {
         try {
-            new StaticArray<>(arrayOfUints(33));
+            new StaticArray32<>(arrayOfUints(33));
             fail();
         } catch (UnsupportedOperationException e) {
             assertThat(e.getMessage(), equalTo(

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/ArraysIT.java
Patch:
@@ -9,6 +9,7 @@
 import org.junit.Before;
 import org.junit.Ignore;
 import org.junit.Test;
+
 import org.web3j.generated.Arrays;
 import org.web3j.tx.gas.DefaultGasProvider;
 

File: abi/src/main/java/org/web3j/abi/Utils.java
Patch:
@@ -108,7 +108,7 @@ public static <T, R extends Type<T>, E extends Type<T>> List<E> typeMap(
             Constructor<E> constructor = outerDestType.getDeclaredConstructor(
                     Class.class, List.class);
             for (List<T> ts : input) {
-                E e = constructor.newInstance(outerDestType, typeMap(ts, innerType));
+                E e = constructor.newInstance(innerType, typeMap(ts, innerType));
                 result.add(e);
             }
         } catch (NoSuchMethodException
@@ -123,7 +123,7 @@ public static <T, R extends Type<T>, E extends Type<T>> List<E> typeMap(
     public static <T, R extends Type<T>> List<R> typeMap(List<T> input, Class<R> destType)
             throws TypeMappingException {
 
-        List<R> result = new ArrayList<R>(input.size());
+        List<R> result = new ArrayList<>(input.size());
 
         if (!input.isEmpty()) {
             try {

File: abi/src/main/java/org/web3j/abi/Utils.java
Patch:
@@ -105,9 +105,10 @@ public static <T, R extends Type<T>, E extends Type<T>> List<E> typeMap(
             Class<R> innerType) {
         List<E> result = new ArrayList<>();
         try {
-            Constructor<E> constructor = outerDestType.getDeclaredConstructor(List.class);
+            Constructor<E> constructor = outerDestType.getDeclaredConstructor(
+                    Class.class, List.class);
             for (List<T> ts : input) {
-                E e = constructor.newInstance(typeMap(ts, innerType));
+                E e = constructor.newInstance(outerDestType, typeMap(ts, innerType));
                 result.add(e);
             }
         } catch (NoSuchMethodException

File: abi/src/test/java/org/web3j/abi/TypeEncoderTest.java
Patch:
@@ -207,7 +207,7 @@ public void testUtf8String() {
 
     @Test
     public void testFixedArray() {
-        StaticArray<Ufixed> array = new StaticArray<>(
+        StaticArray<Ufixed> array = new StaticArray<>(Ufixed.class,
                 new Ufixed(BigInteger.valueOf(0x2), BigInteger.valueOf(0x2)),
                 new Ufixed(BigInteger.valueOf(0x8), BigInteger.valueOf(0x8))
         );
@@ -219,7 +219,7 @@ public void testFixedArray() {
 
     @Test
     public void testDynamicArray() {
-        DynamicArray<Uint> array = new DynamicArray<>(
+        DynamicArray<Uint> array = new DynamicArray<>(Uint.class,
                 new Uint(BigInteger.ONE),
                 new Uint(BigInteger.valueOf(2)),
                 new Uint(BigInteger.valueOf(3))
@@ -237,7 +237,7 @@ public void testDynamicArray() {
     @Test
     public void testEmptyArray() {
         @SuppressWarnings("unchecked")
-        DynamicArray<Uint> array = DynamicArray.empty("uint");
+        DynamicArray<Uint> array = new DynamicArray(Uint.class);
         assertThat(
                 TypeEncoder.encodeDynamicArray(array),
                 is("0000000000000000000000000000000000000000000000000000000000000000")

File: integration-tests/src/test/java/org/web3j/generated/Fibonacci.java
Patch:
@@ -30,7 +30,7 @@
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
  * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
  *
- * <p>Generated with web3j version 4.0.0.
+ * <p>Generated with web3j version 4.0.1.
  */
 public class Fibonacci extends Contract {
     private static final String BINARY = "608060405234801561001057600080fd5b5061014f806100206000396000f30060806040526004361061004b5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633c7fdc70811461005057806361047ff41461007a575b600080fd5b34801561005c57600080fd5b50610068600435610092565b60408051918252519081900360200190f35b34801561008657600080fd5b506100686004356100e0565b600061009d826100e0565b604080518481526020810183905281519293507f71e71a8458267085d5ab16980fd5f114d2d37f232479c245d523ce8d23ca40ed929081900390910190a1919050565b60008115156100f15750600061011e565b81600114156101025750600161011e565b61010e600283036100e0565b61011a600184036100e0565b0190505b9190505600a165627a7a723058201b9d0941154b95636fb5e4225fefd5c2c460060efa5f5e40c9826dce08814af80029";

File: integration-tests/src/test/java/org/web3j/generated/Greeter.java
Patch:
@@ -23,7 +23,7 @@
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
  * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
  *
- * <p>Generated with web3j version 4.0.0.
+ * <p>Generated with web3j version 4.0.1.
  */
 public class Greeter extends Contract {
     private static final String BINARY = "608060405234801561001057600080fd5b5060405161040038038061040083398101604052805160008054600160a060020a0319163317905501805161004c906001906020840190610053565b50506100ee565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061009457805160ff19168380011785556100c1565b828001600101855582156100c1579182015b828111156100c15782518255916020019190600101906100a6565b506100cd9291506100d1565b5090565b6100eb91905b808211156100cd57600081556001016100d7565b90565b610303806100fd6000396000f3006080604052600436106100565763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166341c0e1b5811461005b5780634ac0d66e14610072578063cfae3217146100cb575b600080fd5b34801561006757600080fd5b50610070610155565b005b34801561007e57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100709436949293602493928401919081908401838280828437509497506101929650505050505050565b3480156100d757600080fd5b506100e06101a9565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561011a578181015183820152602001610102565b50505050905090810190601f1680156101475780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60005473ffffffffffffffffffffffffffffffffffffffff163314156101905760005473ffffffffffffffffffffffffffffffffffffffff16ff5b565b80516101a590600190602084019061023f565b5050565b60018054604080516020601f600260001961010087891615020190951694909404938401819004810282018101909252828152606093909290918301828280156102345780601f1061020957610100808354040283529160200191610234565b820191906000526020600020905b81548152906001019060200180831161021757829003601f168201915b505050505090505b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061028057805160ff19168380011785556102ad565b828001600101855582156102ad579182015b828111156102ad578251825591602001919060010190610292565b506102b99291506102bd565b5090565b61023c91905b808211156102b957600081556001016102c35600a165627a7a72305820a9bc86938894dc250f6ea25dd823d4472fad6087edcda429a3504e3713a9fc880029";

File: integration-tests/src/test/java/org/web3j/generated/ShipIt.java
Patch:
@@ -27,7 +27,7 @@
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
  * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
  *
- * <p>Generated with web3j version 4.0.0.
+ * <p>Generated with web3j version 4.0.1.
  */
 public class ShipIt extends Contract {
     private static final String BINARY = "608060405234801561001057600080fd5b50610262806100206000396000f3006080604052600436106100405763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663d51cd4ac8114610045575b600080fd5b34801561005157600080fd5b5061007373ffffffffffffffffffffffffffffffffffffffff6004351661014c565b6040805173ffffffffffffffffffffffffffffffffffffffff808b1682528916602082015290810187905260608101869052608081018560008111156100b557fe5b60ff168152602001848152602001806020018360001916600019168152602001828103825284818151815260200191508051906020019080838360005b8381101561010a5781810151838201526020016100f2565b50505050905090810190601f1680156101375780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b6000602081815291815260409081902080546001808301546002808501546003860154600487015460058801546006890180548b516101009982161599909902600019011695909504601f81018c90048c0288018c01909a5289875273ffffffffffffffffffffffffffffffffffffffff9788169a97909516989297919660ff9091169591939192908301828280156102265780601f106101fb57610100808354040283529160200191610226565b820191906000526020600020905b81548152906001019060200180831161020957829003601f168201915b50505050509080600701549050885600a165627a7a723058207623bd815501fd75633dfcf1bbcf2f0c1d7d060d5e13c438f1f3fc79d294d5d80029";

File: integration-tests/src/test/java/org/web3j/generated/SimpleStorage.java
Patch:
@@ -22,7 +22,7 @@
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
  * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
  *
- * <p>Generated with web3j version 4.0.0.
+ * <p>Generated with web3j version 4.0.1.
  */
 public class SimpleStorage extends Contract {
     private static final String BINARY = "608060405234801561001057600080fd5b50600560005560bf806100246000396000f30060806040526004361060485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166360fe47b18114604d5780636d4ce63c146064575b600080fd5b348015605857600080fd5b5060626004356088565b005b348015606f57600080fd5b506076608d565b60408051918252519081900360200190f35b600055565b600054905600a165627a7a72305820419b352168794764ac1d5d6d3460eaffedc13c00bcbb4d2ff772148d2f0670fc0029";

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/Scenario.java
Patch:
@@ -22,7 +22,6 @@
 import org.web3j.protocol.core.methods.response.EthGetTransactionReceipt;
 import org.web3j.protocol.core.methods.response.TransactionReceipt;
 import org.web3j.protocol.http.HttpService;
-import org.web3j.tx.gas.ContractGasProvider;
 import org.web3j.tx.gas.StaticGasProvider;
 
 import static junit.framework.TestCase.fail;
@@ -65,7 +64,7 @@ public class Scenario {
     public Scenario() { }
 
     @Before
-    public void setUp() {
+    public void setUp() throws Exception {
         this.web3j = Admin.build(new HttpService());
     }
 

File: rlp/src/test/java/org/web3j/rlp/RlpEncoderTest.java
Patch:
@@ -66,7 +66,7 @@ public void testEncode() {
         assertThat(RlpEncoder.encode(RlpString.create(BigInteger.ZERO)),
                 is(new byte[]{ (byte) 0x80 }));
 
-        // https://github.com/paritytech/parity/blob/master/util/rlp/tests/tests.rs#L239
+        // https://github.com/paritytech/parity-common/blob/master/rlp/tests/tests.rs#L237
         assertThat(RlpEncoder.encode(RlpString.create(new byte[] { 0 })),
                 is(new byte[]{ (byte) 0x00 }));
 

File: rlp/src/test/java/org/web3j/rlp/RlpEncoderTest.java
Patch:
@@ -66,7 +66,7 @@ public void testEncode() {
         assertThat(RlpEncoder.encode(RlpString.create(BigInteger.ZERO)),
                 is(new byte[]{ (byte) 0x80 }));
 
-        // https://github.com/paritytech/parity/blob/master/util/rlp/tests/tests.rs#L239
+        // https://github.com/paritytech/parity-common/blob/master/rlp/tests/tests.rs#L237
         assertThat(RlpEncoder.encode(RlpString.create(new byte[] { 0 })),
                 is(new byte[]{ (byte) 0x00 }));
 

File: core/src/main/java/org/web3j/protocol/http/HttpService.java
Patch:
@@ -97,7 +97,7 @@ public HttpService(OkHttpClient httpClient, boolean includeRawResponses) {
         this(DEFAULT_URL, httpClient, includeRawResponses);
     }
 
-    private HttpService(String url, OkHttpClient httpClient) {
+    public HttpService(String url, OkHttpClient httpClient) {
         this(url, httpClient, false);
     }
 

File: core/src/main/java/org/web3j/protocol/core/DefaultBlockParameter.java
Patch:
@@ -10,6 +10,9 @@
  */
 public interface DefaultBlockParameter {
     static DefaultBlockParameter valueOf(BigInteger blockNumber) {
+        if (BigInteger.ZERO.compareTo(blockNumber) >= 0) {
+            blockNumber = BigInteger.ZERO;
+        }
         return new DefaultBlockParameterNumber(blockNumber);
     }
 

File: core/src/main/java/org/web3j/tx/Contract.java
Patch:
@@ -500,10 +500,9 @@ public static <T extends Contract> RemoteCall<T> deployRemoteCall(
 
     public static EventValues staticExtractEventParameters(
             Event event, Log log) {
-
-        List<String> topics = log.getTopics();
+        final List<String> topics = log.getTopics();
         String encodedEventSignature = EventEncoder.encode(event);
-        if (!topics.get(0).equals(encodedEventSignature)) {
+        if (topics == null || topics.size() == 0 || !topics.get(0).equals(encodedEventSignature)) {
             return null;
         }
 

File: core/src/main/java/org/web3j/protocol/websocket/WebSocketClient.java
Patch:
@@ -38,7 +38,7 @@ public void onMessage(String s) {
             try {
                 listener.onMessage(s);
             } catch (Exception e) {
-                log.error("Failed to process message '{}' from server {}", s, uri);
+                log.error("Failed to process message '{}' from server {}", s, uri, e);
             }
         });
     }

File: codegen/src/main/java/org/web3j/codegen/FunctionWrapperGenerator.java
Patch:
@@ -17,11 +17,11 @@ abstract class FunctionWrapperGenerator {
     final boolean useJavaNativeTypes;
 
     FunctionWrapperGenerator(
-            String destinationDirLocation,
+            File destinationDirLocation,
             String basePackageName,
             boolean useJavaNativeTypes) {
 
-        this.destinationDirLocation = new File(destinationDirLocation);
+        this.destinationDirLocation = destinationDirLocation;
         this.basePackageName = basePackageName;
         this.useJavaNativeTypes = useJavaNativeTypes;
     }

File: codegen/src/main/java/org/web3j/codegen/TruffleJsonFunctionWrapperGenerator.java
Patch:
@@ -40,7 +40,7 @@ public class TruffleJsonFunctionWrapperGenerator extends FunctionWrapperGenerato
             + "[--javaTypes|--solidityTypes] "
             + "<input truffle json file>.json "
             + "-p|--package <base package name> "
-            + "-o|--output <destination base directory>";
+            + "-o|--outputDir <destination base directory>";
 
 
     private String jsonFileLocation;
@@ -51,7 +51,7 @@ private TruffleJsonFunctionWrapperGenerator(
             String basePackageName,
             boolean useJavaNativeTypes) {
 
-        super(destinationDirLocation, basePackageName, useJavaNativeTypes);
+        super(new File(destinationDirLocation), basePackageName, useJavaNativeTypes);
         this.jsonFileLocation = jsonFileLocation;
     }
 

File: console/src/main/java/org/web3j/console/Runner.java
Patch:
@@ -5,6 +5,7 @@
 import org.web3j.codegen.TruffleJsonFunctionWrapperGenerator;
 import org.web3j.utils.Version;
 
+import static org.web3j.codegen.SolidityFunctionWrapperGenerator.COMMAND_SOLIDITY;
 import static org.web3j.utils.Collection.tail;
 
 /**
@@ -34,8 +35,8 @@ public static void main(String[] args) throws Exception {
                 case "wallet":
                     WalletRunner.run(tail(args));
                     break;
-                case "solidity":
-                    SolidityFunctionWrapperGenerator.run(tail(args));
+                case COMMAND_SOLIDITY:
+                    SolidityFunctionWrapperGenerator.main(tail(args));
                     break;
                 case "truffle":
                     TruffleJsonFunctionWrapperGenerator.run(tail(args));

File: core/src/main/java/org/web3j/contracts/token/ERC20Interface.java
Patch:
@@ -3,7 +3,7 @@
 import java.math.BigInteger;
 import java.util.List;
 
-import rx.Observable;
+import io.reactivex.Flowable;
 
 import org.web3j.protocol.core.DefaultBlockParameter;
 import org.web3j.protocol.core.RemoteCall;
@@ -30,7 +30,7 @@ public interface ERC20Interface<R, T> extends ERC20BasicInterface<T> {
 
     List<R> getApprovalEvents(TransactionReceipt transactionReceipt);
 
-    Observable<R> approvalEventObservable(DefaultBlockParameter startBlock,
-            DefaultBlockParameter endBlock);
+    Flowable<R> approvalEventFlowable(DefaultBlockParameter startBlock,
+                                        DefaultBlockParameter endBlock);
 
 }

File: core/src/main/java/org/web3j/ens/NameHash.java
Patch:
@@ -52,7 +52,7 @@ private static byte[] nameHash(String[] labels) {
      * @return normalised ens name
      * @throws EnsResolutionException if the name cannot be normalised
      */
-    static String normalise(String ensName) {
+    public static String normalise(String ensName) {
         try {
             return IDN.toASCII(ensName, IDN.USE_STD3_ASCII_RULES)
                     .toLowerCase();

File: core/src/main/java/org/web3j/protocol/Service.java
Patch:
@@ -6,7 +6,7 @@
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 
-import rx.Observable;
+import io.reactivex.Flowable;
 
 import org.web3j.protocol.core.Request;
 import org.web3j.protocol.core.Response;
@@ -47,7 +47,7 @@ public <T extends Response> CompletableFuture<T> sendAsync(
     }
 
     @Override
-    public <T extends Notification<?>> Observable<T> subscribe(
+    public <T extends Notification<?>> Flowable<T> subscribe(
             Request request,
             String unsubscribeMethod,
             Class<T> responseType) {

File: core/src/main/java/org/web3j/protocol/websocket/WebSocketSubscription.java
Patch:
@@ -1,6 +1,6 @@
 package org.web3j.protocol.websocket;
 
-import rx.subjects.BehaviorSubject;
+import io.reactivex.subjects.BehaviorSubject;
 
 /**
  * Objects necessary to process a new item received via a WebSocket subscription.

File: core/src/main/java/org/web3j/tx/response/PollingTransactionReceiptProcessor.java
Patch:
@@ -50,6 +50,6 @@ private TransactionReceipt getTransactionReceipt(
 
         throw new TransactionException("Transaction receipt was not generated after "
                 + ((sleepDuration * attempts) / 1000
-                + " seconds for transaction: " + transactionHash));
+                + " seconds for transaction: " + transactionHash), transactionHash);
     }
 }

File: core/src/main/java/org/web3j/tx/response/QueuingTransactionReceiptProcessor.java
Patch:
@@ -63,7 +63,7 @@ private void sendTransactionReceiptRequests() {
                         throw new TransactionException(
                                 "No transaction receipt for txHash: " + transactionHash
                                         + "received after " + pollingAttemptsPerTxHash
-                                        + " attempts");
+                                        + " attempts", transactionHash);
                     } else {
                         requestWrapper.incrementCount();
                     }

File: core/src/test/java/org/web3j/protocol/core/JsonRpc2_0Web3jTest.java
Patch:
@@ -29,7 +29,7 @@ public void testStopExecutorOnShutdown() throws Exception {
     }
 
     @Test(expected = RuntimeException.class)
-    public void testThrowsRuntimeExceptionIfFailedToCloseService() throws Exception {
+    public void testExceptionOnServiceClosure() throws Exception {
         doThrow(new IOException("Failed to close"))
                 .when(service).close();
 

File: core/src/test/java/org/web3j/protocol/core/filters/BlockFilterTest.java
Patch:
@@ -19,6 +19,6 @@ public void testBlockFilter() throws Exception {
                         + "]}",
                 EthLog.class);
 
-        runTest(ethLog, web3j.ethBlockHashObservable());
+        runTest(ethLog, web3j.ethBlockHashFlowable());
     }
 }

File: core/src/test/java/org/web3j/protocol/core/filters/LogFilterTest.java
Patch:
@@ -16,6 +16,6 @@ public void testLogFilter() throws Exception {
                 //CHECKSTYLE:ON
                 EthLog.class);
 
-        runTest(ethLog, web3j.ethLogObservable(new EthFilter().addSingleTopic("test")));
+        runTest(ethLog, web3j.ethLogFlowable(new EthFilter().addSingleTopic("test")));
     }
 }

File: core/src/test/java/org/web3j/protocol/core/filters/PendingTransactionFilterTest.java
Patch:
@@ -17,6 +17,6 @@ public void testPendingTransactionFilter() throws Exception {
                 //CHECKSTYLE:ON
                 EthLog.class);
 
-        runTest(ethLog, web3j.ethPendingTransactionHashObservable());
+        runTest(ethLog, web3j.ethPendingTransactionHashFlowable());
     }
 }

File: crypto/src/test/java/org/web3j/crypto/WalletUtilsTest.java
Patch:
@@ -152,7 +152,7 @@ public void testGetTestnetKeyDirectory() {
     }
  
     
-    private static File createTempDir() throws Exception {
+    static File createTempDir() throws Exception {
         return Files.createTempDirectory(
                 WalletUtilsTest.class.getSimpleName() + "-testkeys").toFile();
     }

File: geth/src/main/java/org/web3j/protocol/geth/JsonRpc2_0Geth.java
Patch:
@@ -3,7 +3,7 @@
 import java.util.Arrays;
 import java.util.Collections;
 
-import rx.Observable;
+import io.reactivex.Flowable;
 
 import org.web3j.protocol.Web3jService;
 import org.web3j.protocol.admin.JsonRpc2_0Admin;
@@ -83,7 +83,7 @@ public Request<?, BooleanResponse> minerStop() {
                 BooleanResponse.class);
     }
 
-    public Observable<PendingTransactionNotification> newPendingTransactionsNotifications() {
+    public Flowable<PendingTransactionNotification> newPendingTransactionsNotifications() {
         return web3jService.subscribe(
                 new Request<>(
                         "eth_subscribe",
@@ -96,7 +96,7 @@ public Observable<PendingTransactionNotification> newPendingTransactionsNotifica
     }
 
     @Override
-    public Observable<SyncingNotfication> syncingStatusNotifications() {
+    public Flowable<SyncingNotfication> syncingStatusNotifications() {
         return web3jService.subscribe(
                 new Request<>(
                         "eth_subscribe",

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/FunctionWrappersIT.java
Patch:
@@ -26,7 +26,7 @@ public class FunctionWrappersIT extends Scenario {
     public void testFibonacci() throws Exception {
         Fibonacci fibonacci = Fibonacci.load(
                 "0x3c05b2564139fb55820b18b72e94b2178eaace7d", Web3j.build(new HttpService()),
-                ALICE, GAS_PRICE, GAS_LIMIT);
+                ALICE, STATIC_GAS_PROVIDER);
 
         BigInteger result = fibonacci.fibonacci(BigInteger.valueOf(10)).send();
         assertThat(result, equalTo(BigInteger.valueOf(55)));
@@ -36,7 +36,7 @@ public void testFibonacci() throws Exception {
     public void testFibonacciNotify() throws Exception {
         Fibonacci fibonacci = Fibonacci.load(
                 "0x3c05b2564139fb55820b18b72e94b2178eaace7d", Web3j.build(new HttpService()),
-                ALICE, GAS_PRICE, GAS_LIMIT);
+                ALICE, STATIC_GAS_PROVIDER);
 
         TransactionReceipt transactionReceipt = fibonacci.fibonacciNotify(
                 BigInteger.valueOf(15)).send();

File: core/src/main/java/org/web3j/protocol/core/DefaultBlockParameter.java
Patch:
@@ -10,8 +10,9 @@
  */
 public interface DefaultBlockParameter {
     static DefaultBlockParameter valueOf(BigInteger blockNumber) {
-        if (BigInteger.ZERO.compareTo(blockNumber) >= 0)
+        if (BigInteger.ZERO.compareTo(blockNumber) >= 0) {
             blockNumber = BigInteger.ZERO;
+        }
         return new DefaultBlockParameterNumber(blockNumber);
     }
 

File: core/src/main/java/org/web3j/protocol/websocket/WebSocketClient.java
Patch:
@@ -49,7 +49,7 @@ public void onClose(int code, String reason, boolean remote) {
 
     @Override
     public void onError(Exception e) {
-        log.error(String.format("WebSocket connection to {} failed with error", uri), e);
+        log.error("WebSocket connection to {} failed with error", uri, e);
         listener.onError(e);
     }
 

File: core/src/main/java/org/web3j/protocol/websocket/WebSocketClient.java
Patch:
@@ -49,7 +49,7 @@ public void onClose(int code, String reason, boolean remote) {
 
     @Override
     public void onError(Exception e) {
-        log.error(String.format("WebSocket connection to {} failed with error", uri), e);
+        log.error("WebSocket connection to {} failed with error", uri, e);
         listener.onError(e);
     }
 

File: pantheon/src/main/java/org/web3j/protocol/pantheon/JsonRpc2_0Pantheon.java
Patch:
@@ -83,7 +83,8 @@ public Request<?, PantheonEthAccountsMapResponse> cliqueProposals() {
     }
 
     @Override
-    public Request<?, PantheonFullDebugTraceResponse> debugTraceTransaction(String transactionHash, Map<String, Boolean> options) {
+    public Request<?, PantheonFullDebugTraceResponse> debugTraceTransaction(
+            String transactionHash, Map<String, Boolean> options) {
         return new Request<>(
                 "debug_traceTransaction",
                 Arrays.asList(transactionHash, options),

File: pantheon/src/main/java/org/web3j/protocol/pantheon/response/StructLogs.java
Patch:
@@ -15,7 +15,8 @@ public class StructLogs {
     private List<String> memory;
     private Map<BigInteger, String> storage; // maybe List<Map<BigInteger, String>>
 
-    public StructLogs(int pc, String op, int gas, int gasCost, int depth, List<String> stack, List<String> memory, Map<BigInteger, String> storage) {
+    public StructLogs(int pc, String op, int gas, int gasCost, int depth,
+                      List<String> stack, List<String> memory, Map<BigInteger, String> storage) {
         this.pc = pc;
         this.op = op;
         this.gas = gas;

File: pantheon/src/main/java/org/web3j/protocol/pantheon/response/FullDebugTraceInfo.java
Patch:
@@ -2,14 +2,14 @@
 
 import java.util.List;
 
-public class DebugTraceInfo {
+public class FullDebugTraceInfo {
 
     private int gas;
     private boolean failed;
     private String returnValue;
     private List<StructLogs> structLogs;
 
-    public DebugTraceInfo(int gas, boolean failed, String returnValue, List<StructLogs> structLogs) {
+    public FullDebugTraceInfo(int gas, boolean failed, String returnValue, List<StructLogs> structLogs) {
         this.gas = gas;
         this.failed = failed;
         this.returnValue = returnValue;

File: pantheon/src/main/java/org/web3j/protocol/pantheon/response/StructLogs.java
Patch:
@@ -1,4 +1,6 @@
+package org.web3j.protocol.pantheon.response;
 
+import java.math.BigInteger;
 import java.util.List;
 import java.util.Map;
 

File: pantheon/src/main/java/org/web3j/protocol/pantheon/Pantheon.java
Patch:
@@ -27,4 +27,6 @@ static Pantheon build(Web3jService web3jService) {
     Request<?, BooleanResponse> cliquePropose(String address, Boolean signerAddition);
 
     Request<?, PantheonEthAccountsMapResponse> cliqueProposals();
+
+    Request<?, DebugTraceTransactionResponse> debugTraceTransaction(String transactionHash, Map<String, Boolean> options);
 }

File: codegen/src/main/java/org/web3j/codegen/FunctionWrapperGenerator.java
Patch:
@@ -17,11 +17,11 @@ abstract class FunctionWrapperGenerator {
     final boolean useJavaNativeTypes;
 
     FunctionWrapperGenerator(
-            String destinationDirLocation,
+            File destinationDirLocation,
             String basePackageName,
             boolean useJavaNativeTypes) {
 
-        this.destinationDirLocation = new File(destinationDirLocation);
+        this.destinationDirLocation = destinationDirLocation;
         this.basePackageName = basePackageName;
         this.useJavaNativeTypes = useJavaNativeTypes;
     }

File: codegen/src/main/java/org/web3j/codegen/TruffleJsonFunctionWrapperGenerator.java
Patch:
@@ -51,7 +51,7 @@ private TruffleJsonFunctionWrapperGenerator(
             String basePackageName,
             boolean useJavaNativeTypes) {
 
-        super(destinationDirLocation, basePackageName, useJavaNativeTypes);
+        super(new File(destinationDirLocation), basePackageName, useJavaNativeTypes);
         this.jsonFileLocation = jsonFileLocation;
     }
 

File: console/src/main/java/org/web3j/console/Runner.java
Patch:
@@ -5,6 +5,7 @@
 import org.web3j.codegen.TruffleJsonFunctionWrapperGenerator;
 import org.web3j.utils.Version;
 
+import static org.web3j.codegen.SolidityFunctionWrapperGenerator.COMMAND_SOLIDITY;
 import static org.web3j.utils.Collection.tail;
 
 /**
@@ -34,8 +35,8 @@ public static void main(String[] args) throws Exception {
                 case "wallet":
                     WalletRunner.run(tail(args));
                     break;
-                case "solidity":
-                    SolidityFunctionWrapperGenerator.run(tail(args));
+                case COMMAND_SOLIDITY:
+                    SolidityFunctionWrapperGenerator.main(tail(args));
                     break;
                 case "truffle":
                     TruffleJsonFunctionWrapperGenerator.run(tail(args));

File: codegen/src/main/java/org/web3j/codegen/SolidityFunctionWrapperGenerator.java
Patch:
@@ -24,7 +24,7 @@ public class SolidityFunctionWrapperGenerator extends FunctionWrapperGenerator {
             + "[--javaTypes|--solidityTypes] "
             + "<input binary file>.bin <input abi file>.abi "
             + "-p|--package <base package name> "
-            + "-o|--output <destination base directory>";
+            + "-o|--outputDir <destination base directory>";
 
     private final String binaryFileLocation;
     private final String absFileLocation;

File: codegen/src/main/java/org/web3j/codegen/TruffleJsonFunctionWrapperGenerator.java
Patch:
@@ -40,7 +40,7 @@ public class TruffleJsonFunctionWrapperGenerator extends FunctionWrapperGenerato
             + "[--javaTypes|--solidityTypes] "
             + "<input truffle json file>.json "
             + "-p|--package <base package name> "
-            + "-o|--output <destination base directory>";
+            + "-o|--outputDir <destination base directory>";
 
 
     private String jsonFileLocation;

File: abi/src/main/java/org/web3j/abi/FunctionReturnDecoder.java
Patch:
@@ -14,6 +14,7 @@
 import org.web3j.abi.datatypes.Utf8String;
 import org.web3j.abi.datatypes.generated.Bytes32;
 import org.web3j.utils.Numeric;
+import org.web3j.utils.Strings;
 
 import static org.web3j.abi.TypeDecoder.MAX_BYTE_LENGTH_FOR_HEX_STRING;
 
@@ -36,7 +37,7 @@ public static List<Type> decode(
             String rawInput, List<TypeReference<Type>> outputParameters) {
         String input = Numeric.cleanHexPrefix(rawInput);
 
-        if (input.isEmpty()) {
+        if (Strings.isEmpty(input)) {
             return Collections.emptyList();
         } else {
             return build(input, outputParameters);

File: core/src/main/java/org/web3j/ens/NameHash.java
Patch:
@@ -52,7 +52,7 @@ private static byte[] nameHash(String[] labels) {
      * @return normalised ens name
      * @throws EnsResolutionException if the name cannot be normalised
      */
-    static String normalise(String ensName) {
+    public static String normalise(String ensName) {
         try {
             return IDN.toASCII(ensName, IDN.USE_STD3_ASCII_RULES)
                     .toLowerCase();

File: core/src/main/java/org/web3j/protocol/ipc/UnixDomainSocket.java
Patch:
@@ -59,15 +59,15 @@ public void write(String payload) throws IOException {
     @Override
     public String read() throws IOException {
         CharBuffer response = CharBuffer.allocate(bufferSize);
-        String result = "";
+        StringBuilder result = new StringBuilder();
 
         do {
             response.clear();
             reader.read(response);
-            result += new String(response.array(), response.arrayOffset(), response.position());
+            result.append(response.array(), response.arrayOffset(), response.position());
         } while (response.get(response.position() - 1) != '\n');
 
-        return result;
+        return result.toString();
     }
 
     @Override

File: core/src/test/java/org/web3j/tx/response/PollingTransactionReceiptProcessorTest.java
Patch:
@@ -23,15 +23,15 @@ public class PollingTransactionReceiptProcessorTest {
     private static final String TRANSACTION_HASH = "0x00";
     private Web3j web3j;
     private long sleepDuration;
-    private int attemps;
+    private int attempts;
     private PollingTransactionReceiptProcessor processor;
 
     @Before
     public void setUp() {
         web3j = mock(Web3j.class);
         sleepDuration = 100;
-        attemps = 3;
-        processor = new PollingTransactionReceiptProcessor(web3j, sleepDuration, attemps);
+        attempts = 3;
+        processor = new PollingTransactionReceiptProcessor(web3j, sleepDuration, attempts);
     }
 
     @Test

File: crypto/src/main/java/org/web3j/crypto/Sign.java
Patch:
@@ -61,7 +61,7 @@ public static SignatureData signMessage(byte[] message, ECKeyPair keyPair, boole
         }
         if (recId == -1) {
             throw new RuntimeException(
-                    "Could not construct a recoverable key. This should never happen.");
+                    "Could not construct a recoverable key. Are your credentials valid?");
         }
 
         int headerByte = recId + 27;

File: crypto/src/main/java/org/web3j/crypto/Wallet.java
Patch:
@@ -104,7 +104,6 @@ private static WalletFile createWalletFile(
         WalletFile.Crypto crypto = new WalletFile.Crypto();
         crypto.setCipher(CIPHER);
         crypto.setCiphertext(Numeric.toHexStringNoPrefix(cipherText));
-        walletFile.setCrypto(crypto);
 
         WalletFile.CipherParams cipherParams = new WalletFile.CipherParams();
         cipherParams.setIv(Numeric.toHexStringNoPrefix(iv));

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/EventFilterIT.java
Patch:
@@ -62,7 +62,6 @@ public void testEventFilter() throws Exception {
         assertThat(topics.size(), is(1));
 
         Event event = new Event("Notify",
-                Collections.emptyList(),
                 Arrays.asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
 
         // check function signature - we only have a single topic our event signature,

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/FunctionWrappersIT.java
Patch:
@@ -26,7 +26,7 @@ public class FunctionWrappersIT extends Scenario {
     public void testFibonacci() throws Exception {
         Fibonacci fibonacci = Fibonacci.load(
                 "0x3c05b2564139fb55820b18b72e94b2178eaace7d", Web3j.build(new HttpService()),
-                ALICE, GAS_PRICE, GAS_LIMIT);
+                ALICE, STATIC_GAS_PROVIDER);
 
         BigInteger result = fibonacci.fibonacci(BigInteger.valueOf(10)).send();
         assertThat(result, equalTo(BigInteger.valueOf(55)));
@@ -36,7 +36,7 @@ public void testFibonacci() throws Exception {
     public void testFibonacciNotify() throws Exception {
         Fibonacci fibonacci = Fibonacci.load(
                 "0x3c05b2564139fb55820b18b72e94b2178eaace7d", Web3j.build(new HttpService()),
-                ALICE, GAS_PRICE, GAS_LIMIT);
+                ALICE, STATIC_GAS_PROVIDER);
 
         TransactionReceipt transactionReceipt = fibonacci.fibonacciNotify(
                 BigInteger.valueOf(15)).send();

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/HumanStandardTokenGeneratedIT.java
Patch:
@@ -112,7 +112,7 @@ public void testContract() throws Exception {
 
         // Bob requires his own contract instance
         HumanStandardToken bobsContract = HumanStandardToken.load(
-                contract.getContractAddress(), web3j, BOB, GAS_PRICE, GAS_LIMIT);
+                contract.getContractAddress(), web3j, BOB, STATIC_GAS_PROVIDER);
 
         TransactionReceipt bobTransferReceipt = bobsContract.transferFrom(
                 aliceAddress,

File: rlp/src/main/java/org/web3j/rlp/RlpString.java
Patch:
@@ -21,11 +21,11 @@ public byte[] getBytes() {
         return value;
     }
 
-    public BigInteger asBigInteger() {
+    public BigInteger asPositiveBigInteger() {
         if (value.length == 0) {
             return BigInteger.ZERO;
         }
-        return new BigInteger(value);
+        return new BigInteger(1, value);
     }
 
     public String asString() {

File: utils/src/main/java/org/web3j/utils/Numeric.java
Patch:
@@ -77,7 +77,8 @@ public static String prependHexPrefix(String input) {
     }
 
     public static boolean containsHexPrefix(String input) {
-        return input.length() > 1 && input.charAt(0) == '0' && input.charAt(1) == 'x';
+        return !Strings.isEmpty(input) && input.length() > 1
+                && input.charAt(0) == '0' && input.charAt(1) == 'x';
     }
 
     public static BigInteger toBigInt(byte[] value, int offset, int length) {

File: codegen/src/test/java/org/web3j/codegen/SolidityFunctionWrapperGeneratorTest.java
Patch:
@@ -45,8 +45,8 @@ public void testGetFileNoExtension() {
 
     @Test
     public void testGreeterGeneration() throws Exception {
-        testCodeGenerationJvmTypes("greeter", "greeter");
-        testCodeGenerationSolidityTypes("greeter", "greeter");
+        testCodeGenerationJvmTypes("greeter", "Greeter");
+        testCodeGenerationSolidityTypes("greeter", "Greeter");
     }
 
     @Test

File: core/src/test/java/org/web3j/tx/response/PollingTransactionReceiptProcessorTest.java
Patch:
@@ -23,15 +23,15 @@ public class PollingTransactionReceiptProcessorTest {
     private static final String TRANSACTION_HASH = "0x00";
     private Web3j web3j;
     private long sleepDuration;
-    private int attemps;
+    private int attempts;
     private PollingTransactionReceiptProcessor processor;
 
     @Before
     public void setUp() {
         web3j = mock(Web3j.class);
         sleepDuration = 100;
-        attemps = 3;
-        processor = new PollingTransactionReceiptProcessor(web3j, sleepDuration, attemps);
+        attempts = 3;
+        processor = new PollingTransactionReceiptProcessor(web3j, sleepDuration, attempts);
     }
 
     @Test

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/FunctionWrappersIT.java
Patch:
@@ -26,7 +26,7 @@ public class FunctionWrappersIT extends Scenario {
     public void testFibonacci() throws Exception {
         Fibonacci fibonacci = Fibonacci.load(
                 "0x3c05b2564139fb55820b18b72e94b2178eaace7d", Web3j.build(new HttpService()),
-                ALICE, GAS_PRICE, GAS_LIMIT);
+                ALICE, STATIC_GAS_PROVIDER);
 
         BigInteger result = fibonacci.fibonacci(BigInteger.valueOf(10)).send();
         assertThat(result, equalTo(BigInteger.valueOf(55)));
@@ -36,7 +36,7 @@ public void testFibonacci() throws Exception {
     public void testFibonacciNotify() throws Exception {
         Fibonacci fibonacci = Fibonacci.load(
                 "0x3c05b2564139fb55820b18b72e94b2178eaace7d", Web3j.build(new HttpService()),
-                ALICE, GAS_PRICE, GAS_LIMIT);
+                ALICE, STATIC_GAS_PROVIDER);
 
         TransactionReceipt transactionReceipt = fibonacci.fibonacciNotify(
                 BigInteger.valueOf(15)).send();

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/HumanStandardTokenGeneratedIT.java
Patch:
@@ -112,7 +112,7 @@ public void testContract() throws Exception {
 
         // Bob requires his own contract instance
         HumanStandardToken bobsContract = HumanStandardToken.load(
-                contract.getContractAddress(), web3j, BOB, GAS_PRICE, GAS_LIMIT);
+                contract.getContractAddress(), web3j, BOB, STATIC_GAS_PROVIDER);
 
         TransactionReceipt bobTransferReceipt = bobsContract.transferFrom(
                 aliceAddress,

File: core/src/main/java/org/web3j/tx/Contract.java
Patch:
@@ -404,7 +404,7 @@ protected static <T extends Contract> T deploy(
             Web3j web3j, TransactionManager transactionManager,
             BigInteger gasPrice, BigInteger gasLimit,
             String binary, String encodedConstructor, BigInteger value)
-            throws IOException, TransactionException {
+            throws RuntimeException, TransactionException {
 
         return deploy(type, web3j, transactionManager,
                 new StaticGasProvider(gasPrice, gasLimit),

File: core/src/test/java/org/web3j/tx/response/PollingTransactionReceiptProcessorTest.java
Patch:
@@ -13,8 +13,8 @@
 import org.web3j.protocol.exceptions.TransactionException;
 
 import static org.hamcrest.CoreMatchers.sameInstance;
-import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 import static org.mockito.Mockito.doReturn;

File: core/src/test/java/org/web3j/tx/response/PollingTransactionReceiptProcessorTest.java
Patch:
@@ -23,15 +23,15 @@ public class PollingTransactionReceiptProcessorTest {
     private static final String TRANSACTION_HASH = "0x00";
     private Web3j web3j;
     private long sleepDuration;
-    private int attemps;
+    private int attempts;
     private PollingTransactionReceiptProcessor processor;
 
     @Before
     public void setUp() {
         web3j = mock(Web3j.class);
         sleepDuration = 100;
-        attemps = 3;
-        processor = new PollingTransactionReceiptProcessor(web3j, sleepDuration, attemps);
+        attempts = 3;
+        processor = new PollingTransactionReceiptProcessor(web3j, sleepDuration, attempts);
     }
 
     @Test

File: core/src/main/java/org/web3j/protocol/core/DefaultBlockParameter.java
Patch:
@@ -10,7 +10,7 @@
  */
 public interface DefaultBlockParameter {
     static DefaultBlockParameter valueOf(BigInteger blockNumber) {
-        if (blockNumber.compareTo(BigInteger.ZERO) >= 0)
+        if (BigInteger.ZERO.compareTo(blockNumber) >= 0)
             blockNumber = BigInteger.ZERO;
         return new DefaultBlockParameterNumber(blockNumber);
     }

File: integration-tests/src/test/java/org/web3j/protocol/core/ObservableIT.java
Patch:
@@ -21,8 +21,8 @@
  */
 public class ObservableIT {
 
-    private static final int EVENT_COUNT = 5;
-    private static final int TIMEOUT_MINUTES = 5;
+    private static final int EVENT_COUNT = 1;
+    private static final int TIMEOUT_MINUTES = 1;
 
     private Web3j web3j;
 
@@ -64,7 +64,7 @@ public void testCatchUpToLatestAndSubscribeToNewBlocksObservable() throws Except
                 .send();
         BigInteger latestBlockNumber = ethBlock.getBlock().getNumber();
         run(web3j.catchUpToLatestAndSubscribeToNewBlocksObservable(
-                new DefaultBlockParameterNumber(latestBlockNumber.subtract(BigInteger.ONE)),
+                new DefaultBlockParameterNumber(latestBlockNumber),
                 false));
     }
 

File: core/src/main/java/org/web3j/protocol/websocket/WebSocketClient.java
Patch:
@@ -21,7 +21,7 @@ public WebSocketClient(URI serverUri) {
         super(serverUri);
     }
 
-    public WebSocketClient( URI serverUri, Map<String,String> httpHeaders) {
+    public WebSocketClient(URI serverUri, Map<String,String> httpHeaders) {
         super(serverUri, httpHeaders);
     }
 

File: codegen/src/main/java/org/web3j/codegen/SolidityFunctionWrapperGenerator.java
Patch:
@@ -24,7 +24,7 @@ public class SolidityFunctionWrapperGenerator extends FunctionWrapperGenerator {
             + "[--javaTypes|--solidityTypes] "
             + "<input binary file>.bin <input abi file>.abi "
             + "-p|--package <base package name> "
-            + "-o|--output <destination base directory>";
+            + "-o|--outputDir <destination base directory>";
 
     private final String binaryFileLocation;
     private final String absFileLocation;

File: codegen/src/main/java/org/web3j/codegen/TruffleJsonFunctionWrapperGenerator.java
Patch:
@@ -40,7 +40,7 @@ public class TruffleJsonFunctionWrapperGenerator extends FunctionWrapperGenerato
             + "[--javaTypes|--solidityTypes] "
             + "<input truffle json file>.json "
             + "-p|--package <base package name> "
-            + "-o|--output <destination base directory>";
+            + "-o|--outputDir <destination base directory>";
 
 
     private String jsonFileLocation;

File: crypto/src/test/java/org/web3j/crypto/SignTest.java
Patch:
@@ -20,11 +20,11 @@ public void testSignMessage() {
         Sign.SignatureData signatureData = Sign.signMessage(TEST_MESSAGE, SampleKeys.KEY_PAIR);
 
         Sign.SignatureData expected = new Sign.SignatureData(
-                (byte) 27,
+                (byte) 28,
                 Numeric.hexStringToByteArray(
-                        "0x9631f6d21dec448a213585a4a41a28ef3d4337548aa34734478b563036163786"),
+                        "0x0464eee9e2fe1a10ffe48c78b80de1ed8dcf996f3f60955cb2e03cb21903d930"),
                 Numeric.hexStringToByteArray(
-                        "0x2ff816ee6bbb82719e983ecd8a33a4b45d32a4b58377ef1381163d75eedc900b")
+                        "0x06624da478b3f862582e85b31c6a21c6cae2eee2bd50f55c93c4faad9d9c8d7f")
         );
 
         assertThat(signatureData, is(expected));

File: rlp/src/main/java/org/web3j/rlp/RlpString.java
Patch:
@@ -21,11 +21,11 @@ public byte[] getBytes() {
         return value;
     }
 
-    public BigInteger asBigInteger() {
+    public BigInteger asPositiveBigInteger() {
         if (value.length == 0) {
             return BigInteger.ZERO;
         }
-        return new BigInteger(value);
+        return new BigInteger(1, value);
     }
 
     public String asString() {

File: rlp/src/main/java/org/web3j/rlp/RlpString.java
Patch:
@@ -21,11 +21,11 @@ public byte[] getBytes() {
         return value;
     }
 
-    public BigInteger asBigInteger() {
+    public BigInteger asPositiveBigInteger() {
         if (value.length == 0) {
             return BigInteger.ZERO;
         }
-        return new BigInteger(value);
+        return new BigInteger(1, value);
     }
 
     public String asString() {

File: crypto/src/main/java/org/web3j/crypto/WalletUtils.java
Patch:
@@ -154,8 +154,8 @@ public static String getMainnetKeyDirectory() {
     }
     
     /**
-     * Get keystore destination directory for a Rinkeby network
-     * @return
+     * Get keystore destination directory for a Rinkeby network.
+     * @return a String containing destination directory
      */
     public static String getRinkebyKeyDirectory() {
         return String.format(

File: crypto/src/main/java/org/web3j/crypto/WalletUtils.java
Patch:
@@ -50,7 +50,7 @@ public static String generateLightNewWalletFile(String password, File destinatio
     public static String generateNewWalletFile(String password, File destinationDirectory)
             throws CipherException, InvalidAlgorithmParameterException,
             NoSuchAlgorithmException, NoSuchProviderException, IOException {
-        return generateLightNewWalletFile(password, destinationDirectory);
+        return generateFullNewWalletFile(password, destinationDirectory);
     }
 
     public static String generateNewWalletFile(

File: crypto/src/test/java/org/web3j/crypto/WalletUtilsTest.java
Patch:
@@ -56,7 +56,7 @@ public void testGenerateFullNewWalletFile() throws Exception {
 
     @Test
     public void testGenerateNewWalletFile() throws Exception {
-        String fileName = WalletUtils.generateLightNewWalletFile(PASSWORD, tempDir);
+        String fileName = WalletUtils.generateNewWalletFile(PASSWORD, tempDir);
         testGeneratedNewWalletFile(fileName);
     }
 

File: codegen/src/test/java/org/web3j/codegen/SolidityFunctionWrapperTest.java
Patch:
@@ -362,9 +362,8 @@ public void testBuildEventConstantMultipleValueReturn() throws Exception {
         //CHECKSTYLE:OFF
         String expected =
                 "class testClass {\n"
-                        + "  public static final org.web3j.abi.datatypes.Event TRANSFER_EVENT = new org.web3j.abi.datatypes.Event(\"Transfer\", \n" +
-                        "      java.util.Arrays.<org.web3j.abi.TypeReference<?>>asList(new org.web3j.abi.TypeReference<org.web3j.abi.datatypes.Utf8String>() {}, new org.web3j.abi.TypeReference<org.web3j.abi.datatypes.Address>() {}, new org.web3j.abi.TypeReference<org.web3j.abi.datatypes.Address>() {}),\n" +
-                        "      java.util.Arrays.<org.web3j.abi.TypeReference<?>>asList(new org.web3j.abi.TypeReference<org.web3j.abi.datatypes.generated.Uint256>() {}, new org.web3j.abi.TypeReference<org.web3j.abi.datatypes.Utf8String>() {}));\n  ;\n\n"
+                        + "  public static final org.web3j.abi.datatypes.Event TRANSFER_EVENT = new org.web3j.abi.datatypes.Event(\"Transfer\", \n"
+                        + "      java.util.Arrays.<org.web3j.abi.TypeReference<?>>asList(new org.web3j.abi.TypeReference<org.web3j.abi.datatypes.Utf8String>(true) {}, new org.web3j.abi.TypeReference<org.web3j.abi.datatypes.Address>(true) {}, new org.web3j.abi.TypeReference<org.web3j.abi.datatypes.Address>(true) {}, new org.web3j.abi.TypeReference<org.web3j.abi.datatypes.generated.Uint256>() {}, new org.web3j.abi.TypeReference<org.web3j.abi.datatypes.Utf8String>() {}));\n  ;\n\n"
                         + "  public java.util.List<TransferEventResponse> getTransferEvents(org.web3j.protocol.core.methods.response.TransactionReceipt transactionReceipt) {\n"
                         + "    java.util.List<org.web3j.tx.Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);\n"
                         + "    java.util.ArrayList<TransferEventResponse> responses = new java.util.ArrayList<TransferEventResponse>(valueList.size());\n"

File: integration-tests/src/test/java/org/web3j/generated/Fibonacci.java
Patch:
@@ -40,7 +40,6 @@ public class Fibonacci extends Contract {
     public static final String FUNC_FIBONACCI = "fibonacci";
 
     public static final Event NOTIFY_EVENT = new Event("Notify", 
-            Arrays.<TypeReference<?>>asList(),
             Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
     ;
 

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/EventFilterIT.java
Patch:
@@ -62,7 +62,6 @@ public void testEventFilter() throws Exception {
         assertThat(topics.size(), is(1));
 
         Event event = new Event("Notify",
-                Collections.emptyList(),
                 Arrays.asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
 
         // check function signature - we only have a single topic our event signature,

File: abi/src/main/java/org/web3j/abi/FunctionReturnDecoder.java
Patch:
@@ -14,6 +14,7 @@
 import org.web3j.abi.datatypes.Utf8String;
 import org.web3j.abi.datatypes.generated.Bytes32;
 import org.web3j.utils.Numeric;
+import org.web3j.utils.Strings;
 
 import static org.web3j.abi.TypeDecoder.MAX_BYTE_LENGTH_FOR_HEX_STRING;
 
@@ -36,7 +37,7 @@ public static List<Type> decode(
             String rawInput, List<TypeReference<Type>> outputParameters) {
         String input = Numeric.cleanHexPrefix(rawInput);
 
-        if (input.isEmpty()) {
+        if (Strings.isEmpty(input)) {
             return Collections.emptyList();
         } else {
             return build(input, outputParameters);

File: utils/src/main/java/org/web3j/utils/Numeric.java
Patch:
@@ -77,7 +77,8 @@ public static String prependHexPrefix(String input) {
     }
 
     public static boolean containsHexPrefix(String input) {
-        return input.length() > 1 && input.charAt(0) == '0' && input.charAt(1) == 'x';
+        return !Strings.isEmpty(input) && input.length() > 1
+                && input.charAt(0) == '0' && input.charAt(1) == 'x';
     }
 
     public static BigInteger toBigInt(byte[] value, int offset, int length) {

File: core/src/main/java/org/web3j/protocol/ipc/UnixDomainSocket.java
Patch:
@@ -59,15 +59,15 @@ public void write(String payload) throws IOException {
     @Override
     public String read() throws IOException {
         CharBuffer response = CharBuffer.allocate(bufferSize);
-        String result = "";
+        StringBuilder result = new StringBuilder();
 
         do {
             response.clear();
             reader.read(response);
-            result += new String(response.array(), response.arrayOffset(), response.position());
+            result.append(response.array(), response.arrayOffset(), response.position());
         } while (response.get(response.position() - 1) != '\n');
 
-        return result;
+        return result.toString();
     }
 
     @Override

File: utils/src/main/java/org/web3j/utils/Numeric.java
Patch:
@@ -77,7 +77,8 @@ public static String prependHexPrefix(String input) {
     }
 
     public static boolean containsHexPrefix(String input) {
-        return !Strings.isEmpty(input) && input.length() > 1 && input.charAt(0) == '0' && input.charAt(1) == 'x';
+        return !Strings.isEmpty(input) && input.length() > 1 &&
+                input.charAt(0) == '0' && input.charAt(1) == 'x';
     }
 
     public static BigInteger toBigInt(byte[] value, int offset, int length) {

File: abi/src/main/java/org/web3j/abi/FunctionReturnDecoder.java
Patch:
@@ -14,6 +14,7 @@
 import org.web3j.abi.datatypes.Utf8String;
 import org.web3j.abi.datatypes.generated.Bytes32;
 import org.web3j.utils.Numeric;
+import org.web3j.utils.Strings;
 
 import static org.web3j.abi.TypeDecoder.MAX_BYTE_LENGTH_FOR_HEX_STRING;
 
@@ -36,7 +37,7 @@ public static List<Type> decode(
             String rawInput, List<TypeReference<Type>> outputParameters) {
         String input = Numeric.cleanHexPrefix(rawInput);
 
-        if (input.isEmpty()) {
+        if (Strings.isEmpty(input)) {
             return Collections.emptyList();
         } else {
             return build(input, outputParameters);

File: utils/src/main/java/org/web3j/utils/Numeric.java
Patch:
@@ -77,7 +77,7 @@ public static String prependHexPrefix(String input) {
     }
 
     public static boolean containsHexPrefix(String input) {
-        return input.length() > 1 && input.charAt(0) == '0' && input.charAt(1) == 'x';
+        return !Strings.isEmpty(input) && input.length() > 1 && input.charAt(0) == '0' && input.charAt(1) == 'x';
     }
 
     public static BigInteger toBigInt(byte[] value, int offset, int length) {

File: core/src/main/java/org/web3j/protocol/ipc/UnixDomainSocket.java
Patch:
@@ -59,15 +59,15 @@ public void write(String payload) throws IOException {
     @Override
     public String read() throws IOException {
         CharBuffer response = CharBuffer.allocate(bufferSize);
-        String result = "";
+        StringBuffer result = new StringBuffer();
 
         do {
             response.clear();
             reader.read(response);
-            result += new String(response.array(), response.arrayOffset(), response.position());
+            result.append(response.array(), response.arrayOffset(), response.position());
         } while (response.get(response.position() - 1) != '\n');
 
-        return result;
+        return result.toString();
     }
 
     @Override

File: core/src/main/java/org/web3j/protocol/websocket/WebSocketService.java
Patch:
@@ -389,7 +389,6 @@ private <T extends Notification<?>> void subscribeToEventsStream(
 
     private <T extends Notification<?>> void closeSubscription(
             BehaviorSubject<T> subject, String unsubscribeMethod) {
-        subject.onComplete();
         String subscriptionId = getSubscriptionId(subject);
         if (subscriptionId != null) {
             subscriptionForId.remove(subscriptionId);

File: core/src/main/java/org/web3j/protocol/websocket/WebSocketClient.java
Patch:
@@ -30,7 +30,6 @@ public void onMessage(String s) {
         try {
             log.debug("Received message {} from server {}", s, uri);
             listener.onMessage(s);
-            log.debug("Processed message {} from server {}", s, uri);
         } catch (Exception e) {
             log.error("Failed to process message '{}' from server {}", s, uri);
         }

File: core/src/test/java/org/web3j/protocol/core/JsonRpc2_0Web3jTest.java
Patch:
@@ -10,11 +10,9 @@
 
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
 
-public class JsonRpc2_0WebSocketClientJTest {
+public class JsonRpc2_0Web3jTest {
 
     private ScheduledExecutorService scheduledExecutorService
             = mock(ScheduledExecutorService.class);

File: core/src/test/java/org/web3j/protocol/websocket/WebSocketServiceTest.java
Patch:
@@ -232,7 +232,7 @@ public void testSyncRequest() throws Exception {
                 requestSent.await(2, TimeUnit.SECONDS);
                 sendGethVersionReply();
             } catch (Exception e) {
-                e.printStackTrace();
+                throw new RuntimeException(e);
             }
         });
 

File: rlp/src/main/java/org/web3j/rlp/RlpEncoder.java
Patch:
@@ -28,7 +28,7 @@ private static byte[] encode(byte[] bytesValue, int offset) {
                 && bytesValue[0] >= (byte) 0x00
                 && bytesValue[0] <= (byte) 0x7f) {
             return bytesValue;
-        } else if (bytesValue.length < 55) {
+        } else if (bytesValue.length <= 55) {
             byte[] result = new byte[bytesValue.length + 1];
             result[0] = (byte) (offset + bytesValue.length);
             System.arraycopy(bytesValue, 0, result, 1, bytesValue.length);

File: rlp/src/test/java/org/web3j/rlp/RlpEncoderTest.java
Patch:
@@ -79,7 +79,7 @@ public void testEncode() {
                         (byte) 0xc6, (byte) 0x82, (byte) 0x7a, (byte) 0x77, (byte) 0xc1,
                         (byte) 0x04, (byte) 0x01}));
 
-        // roundtrip 55 bytes. See https://github.com/web3j/web3j/issues/519
+        // 55 bytes. See https://github.com/web3j/web3j/issues/519
         byte[] encodeMe = new byte[55];
         Arrays.fill(encodeMe, (byte) 0);
         byte[] expectedEncoding = new byte[56];

File: rlp/src/main/java/org/web3j/rlp/RlpEncoder.java
Patch:
@@ -28,7 +28,7 @@ private static byte[] encode(byte[] bytesValue, int offset) {
                 && bytesValue[0] >= (byte) 0x00
                 && bytesValue[0] <= (byte) 0x7f) {
             return bytesValue;
-        } else if (bytesValue.length < 55) {
+        } else if (bytesValue.length <= 55) {
             byte[] result = new byte[bytesValue.length + 1];
             result[0] = (byte) (offset + bytesValue.length);
             System.arraycopy(bytesValue, 0, result, 1, bytesValue.length);

File: codegen/src/main/java/org/web3j/codegen/SolidityFunctionWrapper.java
Patch:
@@ -867,8 +867,6 @@ MethodSpec buildEventTransactionReceiptFunction(
     List<MethodSpec> buildEventFunctions(
             AbiDefinition functionDefinition,
             TypeSpec.Builder classBuilder) throws ClassNotFoundException {
-        List<MethodSpec> methods = new ArrayList<>();
-
         String functionName = functionDefinition.getName();
         List<AbiDefinition.NamedType> inputs = functionDefinition.getInputs();
         String responseClassName = Strings.capitaliseFirstLetter(functionName) + "EventResponse";
@@ -897,6 +895,7 @@ List<MethodSpec> buildEventFunctions(
         classBuilder.addType(buildEventResponseObject(responseClassName, indexedParameters,
                 nonIndexedParameters));
 
+        List<MethodSpec> methods = new ArrayList<>();
         methods.add(buildEventTransactionReceiptFunction(responseClassName,
                 functionName, indexedParameters, nonIndexedParameters));
 

File: core/src/test/java/org/web3j/tx/ContractTest.java
Patch:
@@ -322,6 +322,8 @@ public void testSetGetGasPrice() {
     public void testStaticGasProvider() throws IOException, TransactionException {
         StaticGasProvider gasProvider = new StaticGasProvider(BigInteger.TEN, BigInteger.ONE);
         TransactionManager txManager = mock(TransactionManager.class);
+        when(txManager.executeTransaction(any(), any(), any(), any(), any()))
+                .thenReturn(new TransactionReceipt());
 
         contract = new TestContract(ADDRESS, web3j, txManager, gasProvider);
 

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/FunctionWrappersIT.java
Patch:
@@ -5,7 +5,6 @@
 import org.junit.Test;
 
 import org.web3j.abi.datatypes.generated.Uint256;
-import org.web3j.generated.Fibonacci;
 import org.web3j.protocol.Web3j;
 import org.web3j.protocol.core.methods.response.TransactionReceipt;
 import org.web3j.protocol.http.HttpService;

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/HumanStandardTokenGeneratedIT.java
Patch:
@@ -7,7 +7,6 @@
 import org.junit.Test;
 import rx.Subscription;
 
-import org.web3j.generated.HumanStandardToken;
 import org.web3j.protocol.core.DefaultBlockParameterName;
 import org.web3j.protocol.core.methods.response.TransactionReceipt;
 

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/SimpleStorageContractIT.java
Patch:
@@ -4,8 +4,6 @@
 
 import org.junit.Test;
 
-import org.web3j.generated.SimpleStorage;
-
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertThat;

File: core/src/main/java/org/web3j/protocol/core/filters/PendingTransactionFilter.java
Patch:
@@ -28,8 +28,8 @@ EthFilter sendRequest() throws IOException {
     void process(List<EthLog.LogResult> logResults) {
         for (EthLog.LogResult logResult : logResults) {
             if (logResult instanceof EthLog.Hash) {
-                String blockHash = ((EthLog.Hash) logResult).get();
-                callback.onEvent(blockHash);
+                String transactionHash = ((EthLog.Hash) logResult).get();
+                callback.onEvent(transactionHash);
             } else {
                 throw new FilterException(
                         "Unexpected result type: " + logResult.get() + ", required Hash");

File: core/src/main/java/org/web3j/protocol/http/HttpService.java
Patch:
@@ -67,7 +67,7 @@ public HttpService(OkHttpClient httpClient) {
         this(DEFAULT_URL, httpClient);
     }
 
-    public  HttpService(boolean includeRawResponse) {
+    public HttpService(boolean includeRawResponse) {
         this(DEFAULT_URL, includeRawResponse);
     }
 

File: core/src/main/java/org/web3j/protocol/ipc/IOFacade.java
Patch:
@@ -9,4 +9,6 @@ public interface IOFacade {
     void write(String payload) throws IOException;
 
     String read() throws IOException;
+    
+    void close() throws IOException;
 }

File: core/src/main/java/org/web3j/protocol/rx/JsonRpc2_0Rx.java
Patch:
@@ -83,6 +83,7 @@ public Observable<Transaction> pendingTransactionObservable(long pollingInterval
         return ethPendingTransactionHashObservable(pollingInterval)
                 .flatMap(transactionHash ->
                         web3j.ethGetTransactionByHash(transactionHash).observable())
+                .filter(ethTransaction -> ethTransaction.getTransaction().isPresent())
                 .map(ethTransaction -> ethTransaction.getTransaction().get());
     }
 

File: core/src/main/java/org/web3j/utils/Version.java
Patch:
@@ -25,7 +25,7 @@ public static String getTimestamp() throws IOException {
 
     private static Properties loadProperties() throws IOException {
         Properties properties = new Properties();
-        properties.load(Version.class.getResourceAsStream("/version.properties"));
+        properties.load(Version.class.getResourceAsStream("/web3j-version.properties"));
         return properties;
     }
 }

File: core/src/test/java/org/web3j/protocol/core/RequestTest.java
Patch:
@@ -7,8 +7,6 @@
 
 import org.web3j.protocol.RequestTester;
 import org.web3j.protocol.Web3j;
-import org.web3j.protocol.core.DefaultBlockParameter;
-import org.web3j.protocol.core.DefaultBlockParameterName;
 import org.web3j.protocol.core.methods.request.EthFilter;
 import org.web3j.protocol.core.methods.request.ShhFilter;
 import org.web3j.protocol.core.methods.request.ShhPost;
@@ -623,5 +621,4 @@ public void testShhGetMessages() throws Exception {
         verifyResult("{\"jsonrpc\":\"2.0\",\"method\":\"shh_getMessages\","
                 + "\"params\":[\"0x07\"],\"id\":1}");
     }
-
 }

File: core/src/test/java/org/web3j/tx/TransferTest.java
Patch:
@@ -52,6 +52,7 @@ public void testTransferInvalidValue() throws Exception {
     private TransactionReceipt prepareTransfer() throws IOException {
         TransactionReceipt transactionReceipt = new TransactionReceipt();
         transactionReceipt.setTransactionHash(TRANSACTION_HASH);
+        transactionReceipt.setStatus("0x1");
         prepareTransaction(transactionReceipt);
 
         EthGasPrice ethGasPrice = new EthGasPrice();

File: crypto/src/main/java/org/web3j/crypto/Keys.java
Patch:
@@ -32,7 +32,9 @@ public class Keys {
     public static final int PRIVATE_KEY_LENGTH_IN_HEX = PRIVATE_KEY_SIZE << 1;
 
     static {
-        Security.addProvider(new BouncyCastleProvider());
+        if (Security.getProvider(BouncyCastleProvider.PROVIDER_NAME) == null) {
+            Security.addProvider(new BouncyCastleProvider());
+        }
     }
 
     private Keys() { }

File: crypto/src/main/java/org/web3j/crypto/RawTransaction.java
Patch:
@@ -18,7 +18,7 @@ public class RawTransaction {
     private BigInteger value;
     private String data;
 
-    private RawTransaction(BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit, String to,
+    protected RawTransaction(BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit, String to,
                            BigInteger value, String data) {
         this.nonce = nonce;
         this.gasPrice = gasPrice;

File: crypto/src/main/java/org/web3j/crypto/Sign.java
Patch:
@@ -40,10 +40,10 @@ public static SignatureData signMessage(byte[] message, ECKeyPair keyPair) {
         return signMessage(message, keyPair, true);
     }
 
-    public static SignatureData signMessage(byte[] message, ECKeyPair keyPair, boolean isHashed) {
+    public static SignatureData signMessage(byte[] message, ECKeyPair keyPair, boolean needToHash) {
         BigInteger publicKey = keyPair.getPublicKey();
         byte[] messageHash;
-        if (isHashed) {
+        if (needToHash) {
             messageHash = Hash.sha3(message);
         } else {
             messageHash = message;
@@ -96,7 +96,7 @@ public static SignatureData signMessage(byte[] message, ECKeyPair keyPair, boole
      * @param message Hash of the data that was signed.
      * @return An ECKey containing only the public part, or null if recovery wasn't possible.
      */
-    private static BigInteger recoverFromSignature(int recId, ECDSASignature sig, byte[] message) {
+    public static BigInteger recoverFromSignature(int recId, ECDSASignature sig, byte[] message) {
         verifyPrecondition(recId >= 0, "recId must be positive");
         verifyPrecondition(sig.r.signum() >= 0, "r must be positive");
         verifyPrecondition(sig.s.signum() >= 0, "s must be positive");

File: parity/src/main/java/org/web3j/protocol/parity/methods/response/ParityAddressesResponse.java
Patch:
@@ -5,6 +5,7 @@
 import org.web3j.protocol.core.Response;
 
 /**
+ * parity_listAccounts
  * parity_getGetDappAddresses
  * parity_getGetNewDappsAddresses
  * parity_importGethAccounts

File: core/src/main/java/org/web3j/tx/Contract.java
Patch:
@@ -43,7 +43,6 @@ public abstract class Contract extends ManagedTransaction {
 
     // https://www.reddit.com/r/ethereum/comments/5g8ia6/attention_miners_we_recommend_raising_gas_limit/
     public static final BigInteger GAS_LIMIT = BigInteger.valueOf(4_300_000);
-    public static final String SUCCESSFUL_TRANSACTION_STATUS = "0x1";
 
     protected final String contractBinary;
     protected String contractAddress;
@@ -254,8 +253,7 @@ TransactionReceipt executeTransaction(
 
         TransactionReceipt receipt = send(contractAddress, data, weiValue, gasPrice, gasLimit);
 
-        if (receipt.getStatus() != null
-                && !SUCCESSFUL_TRANSACTION_STATUS.equals(receipt.getStatus())) {
+        if (!receipt.isStatusOK()) {
             throw new TransactionException(
                     String.format(
                             "Transaction has failed with status: %s. "

File: core/src/main/java/org/web3j/tx/Contract.java
Patch:
@@ -43,7 +43,6 @@ public abstract class Contract extends ManagedTransaction {
 
     // https://www.reddit.com/r/ethereum/comments/5g8ia6/attention_miners_we_recommend_raising_gas_limit/
     public static final BigInteger GAS_LIMIT = BigInteger.valueOf(4_300_000);
-    public static final String SUCCESSFUL_TRANSACTION_STATUS = "0x1";
 
     protected final String contractBinary;
     protected String contractAddress;
@@ -254,8 +253,7 @@ TransactionReceipt executeTransaction(
 
         TransactionReceipt receipt = send(contractAddress, data, weiValue, gasPrice, gasLimit);
 
-        if (receipt.getStatus() != null
-                && !SUCCESSFUL_TRANSACTION_STATUS.equals(receipt.getStatus())) {
+        if (!receipt.isStatusOK()) {
             throw new TransactionException(
                     String.format(
                             "Transaction has failed with status: %s. "

File: core/src/main/java/org/web3j/protocol/ipc/UnixDomainSocket.java
Patch:
@@ -65,8 +65,7 @@ public String read() throws IOException {
             response.clear();
             reader.read(response);
             result += new String(response.array(), response.arrayOffset(), response.position());
-        } while (response.position() == response.limit()
-                && response.get(response.limit() - 1) != '\n');
+        } while (response.get(response.position() - 1) != '\n');
 
         return result;
     }

File: core/src/main/java/org/web3j/protocol/ipc/IpcService.java
Patch:
@@ -60,7 +60,8 @@ protected InputStream performIO(String payload) throws IOException {
 
         // It's not ideal converting back into an inputStream, but we want
         // to be consistent with the HTTPService API.
-        return new ByteArrayInputStream(result.getBytes());
+        // UTF-8 (the default encoding for JSON) is explicitly used here.
+        return new ByteArrayInputStream(result.getBytes("UTF-8"));
     }
 
     @Deprecated

File: core/src/main/java/org/web3j/protocol/ipc/UnixDomainSocket.java
Patch:
@@ -65,8 +65,7 @@ public String read() throws IOException {
             response.clear();
             reader.read(response);
             result += new String(response.array(), response.arrayOffset(), response.position());
-        } while (response.position() == response.limit()
-                && response.get(response.limit() - 1) != '\n');
+        } while (response.get(response.position() - 1) != '\n');
 
         return result;
     }

File: core/src/test/java/org/web3j/protocol/rx/JsonRpc2_0RxTest.java
Patch:
@@ -319,7 +319,7 @@ private EthBlock createBlock(int number) {
         return ethBlock;
     }
 
-    private EthBlock createBlockWithTransactions(int blockNumber, List<Transaction> transactions){
+    private EthBlock createBlockWithTransactions(int blockNumber, List<Transaction> transactions) {
         EthBlock ethBlock = new EthBlock();
         EthBlock.Block block = new EthBlock.Block();
         block.setNumber(Numeric.encodeQuantity(BigInteger.valueOf(blockNumber)));
@@ -334,7 +334,7 @@ private EthBlock createBlockWithTransactions(int blockNumber, List<Transaction>
         return ethBlock;
     }
 
-    private Transaction createTransaction(String transactionHash){
+    private Transaction createTransaction(String transactionHash) {
         Transaction transaction = new Transaction();
         transaction.setHash(transactionHash);
         return transaction;

File: codegen/src/main/java/org/web3j/codegen/SolidityFunctionWrapper.java
Patch:
@@ -748,10 +748,10 @@ MethodSpec buildEventObservableFunction(
 
         TypeSpec converter = TypeSpec.anonymousClassBuilder("")
                 .addSuperinterface(ParameterizedTypeName.get(
-                        ClassName.get(java.util.function.Function.class),
+                        ClassName.get(io.reactivex.functions.Function.class),
                         ClassName.get(Log.class),
                         ClassName.get("", responseClassName)))
-                .addMethod(MethodSpec.methodBuilder("call")
+                .addMethod(MethodSpec.methodBuilder("apply")
                         .addAnnotation(Override.class)
                         .addModifiers(Modifier.PUBLIC)
                         .addParameter(Log.class, "log")

File: core/src/test/java/org/web3j/utils/ObservablesTests.java
Patch:
@@ -9,6 +9,7 @@
 import io.reactivex.Flowable;
 import io.reactivex.disposables.Disposable;
 import org.junit.Test;
+
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;

File: core/src/main/java/org/web3j/contracts/token/ERC20BasicInterface.java
Patch:
@@ -4,10 +4,12 @@
 import java.util.List;
 
 import io.reactivex.Flowable;
+
 import org.web3j.protocol.core.DefaultBlockParameter;
 import org.web3j.protocol.core.RemoteCall;
 import org.web3j.protocol.core.methods.response.TransactionReceipt;
 
+
 /**
  * Describes the Ethereum "Basic" subset of the ERC-20 token standard.
  * <p>

File: core/src/main/java/org/web3j/contracts/token/ERC20Interface.java
Patch:
@@ -4,6 +4,7 @@
 import java.util.List;
 
 import io.reactivex.Flowable;
+
 import org.web3j.protocol.core.DefaultBlockParameter;
 import org.web3j.protocol.core.RemoteCall;
 import org.web3j.protocol.core.methods.response.TransactionReceipt;

File: core/src/main/java/org/web3j/protocol/core/JsonRpc2_0Web3j.java
Patch:
@@ -6,6 +6,7 @@
 import java.util.concurrent.ScheduledExecutorService;
 
 import io.reactivex.Flowable;
+
 import org.web3j.protocol.Web3j;
 import org.web3j.protocol.Web3jService;
 import org.web3j.protocol.core.methods.request.ShhFilter;

File: geth/src/main/java/org/web3j/protocol/geth/JsonRpc2_0Geth.java
Patch:
@@ -13,7 +13,7 @@
 /**
  * JSON-RPC 2.0 factory implementation for Geth.
  */
-class JsonRpc2_0Geth extends JsonRpc2_0Admin implements Geth {
+public class JsonRpc2_0Geth extends JsonRpc2_0Admin implements Geth {
 
     public JsonRpc2_0Geth(Web3jService web3jService) {
         super(web3jService);

File: core/src/main/java/org/web3j/protocol/rx/JsonRpc2_0Rx.java
Patch:
@@ -83,6 +83,7 @@ public Observable<Transaction> pendingTransactionObservable(long pollingInterval
         return ethPendingTransactionHashObservable(pollingInterval)
                 .flatMap(transactionHash ->
                         web3j.ethGetTransactionByHash(transactionHash).observable())
+                .filter(ethTransaction -> ethTransaction.getTransaction().isPresent())
                 .map(ethTransaction -> ethTransaction.getTransaction().get());
     }
 

File: geth/src/main/java/org/web3j/protocol/geth/JsonRpc2_0Geth.java
Patch:
@@ -13,7 +13,7 @@
 /**
  * JSON-RPC 2.0 factory implementation for Geth.
  */
-class JsonRpc2_0Geth extends JsonRpc2_0Admin implements Geth {
+public class JsonRpc2_0Geth extends JsonRpc2_0Admin implements Geth {
 
     public JsonRpc2_0Geth(Web3jService web3jService) {
         super(web3jService);

File: core/src/main/java/org/web3j/protocol/rx/JsonRpc2_0Rx.java
Patch:
@@ -81,7 +81,8 @@ public Observable<Transaction> transactionObservable(long pollingInterval) {
 
     public Observable<Transaction> pendingTransactionObservable(long pollingInterval) {
         return ethPendingTransactionHashObservable(pollingInterval)
-                .flatMap(transactionHash -> web3j.ethGetTransactionByHash(transactionHash).observable())
+                .flatMap(transactionHash ->
+                        web3j.ethGetTransactionByHash(transactionHash).observable())
                 .filter(ethTransaction -> ethTransaction.getTransaction().isPresent())
                 .map(ethTransaction -> ethTransaction.getTransaction().get());
     }

File: codegen/src/test/java/org/web3j/codegen/SolidityFunctionWrapperTest.java
Patch:
@@ -335,9 +335,8 @@ public void testBuildEventConstantMultipleValueReturn() throws Exception {
         //CHECKSTYLE:OFF
         String expected =
                 "class testClass {\n"
-                        + "  public static final org.web3j.abi.datatypes.Event TRANSFER_EVENT = new org.web3j.abi.datatypes.Event(\"Transfer\", \n" +
-                        "      java.util.Arrays.<org.web3j.abi.TypeReference<?>>asList(new org.web3j.abi.TypeReference<org.web3j.abi.datatypes.Utf8String>() {}, new org.web3j.abi.TypeReference<org.web3j.abi.datatypes.Address>() {}, new org.web3j.abi.TypeReference<org.web3j.abi.datatypes.Address>() {}),\n" +
-                        "      java.util.Arrays.<org.web3j.abi.TypeReference<?>>asList(new org.web3j.abi.TypeReference<org.web3j.abi.datatypes.generated.Uint256>() {}, new org.web3j.abi.TypeReference<org.web3j.abi.datatypes.Utf8String>() {}));\n  ;\n\n"
+                        + "  public static final org.web3j.abi.datatypes.Event TRANSFER_EVENT = new org.web3j.abi.datatypes.Event(\"Transfer\", \n"
+                        + "      java.util.Arrays.<org.web3j.abi.TypeReference<?>>asList(new org.web3j.abi.TypeReference<org.web3j.abi.datatypes.Utf8String>(true) {}, new org.web3j.abi.TypeReference<org.web3j.abi.datatypes.Address>(true) {}, new org.web3j.abi.TypeReference<org.web3j.abi.datatypes.Address>(true) {}, new org.web3j.abi.TypeReference<org.web3j.abi.datatypes.generated.Uint256>() {}, new org.web3j.abi.TypeReference<org.web3j.abi.datatypes.Utf8String>() {}));\n  ;\n\n"
                         + "  public java.util.List<TransferEventResponse> getTransferEvents(org.web3j.protocol.core.methods.response.TransactionReceipt transactionReceipt) {\n"
                         + "    java.util.List<org.web3j.tx.Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);\n"
                         + "    java.util.ArrayList<TransferEventResponse> responses = new java.util.ArrayList<TransferEventResponse>(valueList.size());\n"

File: integration-tests/src/test/java/org/web3j/generated/Fibonacci.java
Patch:
@@ -36,7 +36,6 @@ public class Fibonacci extends Contract {
     private static final String BINARY = "6060604052341561000f57600080fd5b6101498061001e6000396000f30060606040526004361061004b5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633c7fdc70811461005057806361047ff414610078575b600080fd5b341561005b57600080fd5b61006660043561008e565b60405190815260200160405180910390f35b341561008357600080fd5b6100666004356100da565b6000610099826100da565b90507f71e71a8458267085d5ab16980fd5f114d2d37f232479c245d523ce8d23ca40ed828260405191825260208201526040908101905180910390a1919050565b60008115156100eb57506000610118565b81600114156100fc57506001610118565b610108600283036100da565b610114600184036100da565b0190505b9190505600a165627a7a72305820b79593e85095f5c09ecad21be0e9501a5528960f09cf22e8543ff6221976ea8e0029";
 
     public static final Event NOTIFY_EVENT = new Event("Notify", 
-            Arrays.<TypeReference<?>>asList(),
             Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
     ;
 

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/EventFilterIT.java
Patch:
@@ -62,7 +62,6 @@ public void testEventFilter() throws Exception {
         assertThat(topics.size(), is(1));
 
         Event event = new Event("Notify",
-                Collections.emptyList(),
                 Arrays.asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
 
         // check function signature - we only have a single topic our event signature,

File: core/src/main/java/org/web3j/protocol/rx/JsonRpc2_0Rx.java
Patch:
@@ -81,8 +81,8 @@ public Observable<Transaction> transactionObservable(long pollingInterval) {
 
     public Observable<Transaction> pendingTransactionObservable(long pollingInterval) {
         return ethPendingTransactionHashObservable(pollingInterval)
-                .flatMap(transactionHash ->
-                        web3j.ethGetTransactionByHash(transactionHash).observable())
+                .flatMap(transactionHash -> web3j.ethGetTransactionByHash(transactionHash).observable())
+                .filter(ethTransaction -> ethTransaction.getTransaction().isPresent())
                 .map(ethTransaction -> ethTransaction.getTransaction().get());
     }
 

File: codegen/src/main/java/org/web3j/codegen/SolidityFunctionWrapper.java
Patch:
@@ -138,7 +138,7 @@ private void addAddressesSupport(TypeSpec.Builder classBuilder,
             classBuilder.addField(addressesStaticField);
 
             final CodeBlock.Builder staticInit = CodeBlock.builder();
-            staticInit.addStatement("_addresses = new HashMap<>()");
+            staticInit.addStatement("_addresses = new HashMap<String, String>()");
             addresses.forEach((k, v) ->
                     staticInit.addStatement(String.format("_addresses.put(\"%1s\", \"%2s\")",
                             k, v))
@@ -548,7 +548,7 @@ static List<TypeName> buildTypeNames(List<AbiDefinition.NamedType> namedTypes) {
     }
 
     MethodSpec buildFunction(
-            AbiDefinition functionDefinition) {
+            AbiDefinition functionDefinition) throws ClassNotFoundException {
         String functionName = functionDefinition.getName();
 
         MethodSpec.Builder methodBuilder =
@@ -573,7 +573,7 @@ private void buildConstantFunction(
             AbiDefinition functionDefinition,
             MethodSpec.Builder methodBuilder,
             List<TypeName> outputParameterTypes,
-            String inputParams) {
+            String inputParams) throws ClassNotFoundException {
 
         String functionName = functionDefinition.getName();
 

File: crypto/src/main/java/org/web3j/crypto/Sign.java
Patch:
@@ -108,7 +108,7 @@ private static BigInteger recoverFromSignature(int recId, ECDSASignature sig, by
         BigInteger i = BigInteger.valueOf((long) recId / 2);
         BigInteger x = sig.r.add(i.multiply(n));
         //   1.2. Convert the integer x to an octet string X of length mlen using the conversion
-        //        routine specified in Section 2.3.7, where mlen = (log2 p)/8 or mlen = m/8.
+        //        routine specified in Section 2.3.7, where mlen = ⌈(log2 p)/8⌉ or mlen = ⌈m/8⌉.
         //   1.3. Convert the octet string (16 set binary digits)||X to an elliptic curve point R
         //        using the conversion routine specified in Section 2.3.4. If this conversion
         //        routine outputs "invalid", then do another iteration of Step 1.

File: codegen/src/main/java/org/web3j/codegen/SolidityFunctionWrapper.java
Patch:
@@ -385,7 +385,7 @@ String addParameters(
                     inputParameterTypes,
                     ", \n",
                     // this results in fully qualified names being generated
-                    parameterSpec -> createMappedParameterTypes(parameterSpec));
+                    this::createMappedParameterTypes);
         } else {
             return Collection.join(
                     inputParameterTypes,
@@ -530,7 +530,7 @@ static List<TypeName> buildTypeNames(List<AbiDefinition.NamedType> namedTypes) {
     }
 
     MethodSpec buildFunction(
-            AbiDefinition functionDefinition) {
+            AbiDefinition functionDefinition) throws ClassNotFoundException {
         String functionName = functionDefinition.getName();
 
         MethodSpec.Builder methodBuilder =
@@ -555,7 +555,7 @@ private void buildConstantFunction(
             AbiDefinition functionDefinition,
             MethodSpec.Builder methodBuilder,
             List<TypeName> outputParameterTypes,
-            String inputParams) {
+            String inputParams) throws ClassNotFoundException {
 
         String functionName = functionDefinition.getName();
 

File: codegen/src/test/java/org/web3j/codegen/SolidityFunctionWrapperTest.java
Patch:
@@ -227,6 +227,7 @@ public void testBuildFunctionConstantSingleValueRawListReturn() throws Exception
                 + "  return new org.web3j.protocol.core.RemoteCall<java.util.List>(\n"
                 + "      new java.util.concurrent.Callable<java.util.List>() {\n"
                 + "        @java.lang.Override\n"
+                + "        @java.lang.SuppressWarnings(\"unchecked\")\n"
                 + "        public java.util.List call() throws java.lang.Exception {\n"
                 + "          java.util.List<org.web3j.abi.datatypes.Type> result = (java.util.List<org.web3j.abi.datatypes.Type>) executeCallSingleValueReturn(function, java.util.List.class);\n"
                 + "          return convertToNative(result);\n"

File: integration-tests/src/test/java/org/web3j/generated/ShipIt.java
Patch:
@@ -29,7 +29,7 @@
  * <p>Generated with web3j version 3.3.0.
  */
 public class ShipIt extends Contract {
-    private static final String BINARY = "6060604052341561000f57600080fd5b6101e48061001e6000396000f3006060604052600436106100405763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663d51cd4ac8114610045575b600080fd5b341561005057600080fd5b61007173ffffffffffffffffffffffffffffffffffffffff60043516610159565b60405173ffffffffffffffffffffffffffffffffffffffff808a168252881660208201526040810187905260608101869052608081018560008111156100b357fe5b60ff168152602081018590526060810183905260808282038101604083019081528554600260001960018316156101000201909116049183018290529160a00190859080156101435780601f1061011857610100808354040283529160200191610143565b820191906000526020600020905b81548152906001019060200180831161012657829003601f168201915b5050995050505050505050505060405180910390f35b6000602081905290815260409020805460018201546002830154600384015460048501546005860154600787015473ffffffffffffffffffffffffffffffffffffffff9687169796909516959394929360ff90921692909160060190885600a165627a7a723058200d498cd38cd8aaf532d9d54719f0f05c4865f5197a27c90e9dbdabb6f87524c60029";
+    private static final String BINARY = "6060604052341561000f57600080fd5b6101e48061001e6000396000f3006060604052600436106100405763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663d51cd4ac8114610045575b600080fd5b341561005057600080fd5b61007173ffffffffffffffffffffffffffffffffffffffff60043516610159565b60405173ffffffffffffffffffffffffffffffffffffffff808a168252881660208201526040810187905260608101869052608081018560008111156100b357fe5b60ff168152602081018590526060810183905260808282038101604083019081528554600260001960018316156101000201909116049183018290529160a00190859080156101435780601f1061011857610100808354040283529160200191610143565b820191906000526020600020905b81548152906001019060200180831161012657829003601f168201915b5050995050505050505050505060405180910390f35b6000602081905290815260409020805460018201546002830154600384015460048501546005860154600787015473ffffffffffffffffffffffffffffffffffffffff9687169796909516959394929360ff90921692909160060190885600a165627a7a72305820f4d4bf1c9ea57666a0a0e3a810321535fee9dd5f0809158d2f27a18e0a2df2560029";
 
     protected ShipIt(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
         super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);

File: codegen/src/test/java/org/web3j/codegen/SolidityFunctionWrapperTest.java
Patch:
@@ -151,7 +151,7 @@ public void testBuildFunctionTransaction() throws Exception {
     }
 
     @Test
-    public void testBuildPayabelFunctionTransaction() throws Exception {
+    public void testBuildPayableFunctionTransaction() throws Exception {
         AbiDefinition functionDefinition = new AbiDefinition(
                 false,
                 Arrays.asList(

File: codegen/src/test/java/org/web3j/codegen/SolidityFunctionWrapperTest.java
Patch:
@@ -227,6 +227,7 @@ public void testBuildFunctionConstantSingleValueRawListReturn() throws Exception
                 + "  return new org.web3j.protocol.core.RemoteCall<java.util.List>(\n"
                 + "      new java.util.concurrent.Callable<java.util.List>() {\n"
                 + "        @java.lang.Override\n"
+                + "        @java.lang.SuppressWarnings(\"unchecked\")\n"
                 + "        public java.util.List call() throws java.lang.Exception {\n"
                 + "          java.util.List<org.web3j.abi.datatypes.Type> result = (java.util.List<org.web3j.abi.datatypes.Type>) executeCallSingleValueReturn(function, java.util.List.class);\n"
                 + "          return convertToNative(result);\n"

File: integration-tests/src/test/java/org/web3j/generated/Greeter.java
Patch:
@@ -22,7 +22,7 @@
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
  * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
  *
- * <p>Generated with web3j version 3.2.0.
+ * <p>Generated with web3j version 3.3.0.
  */
 public class Greeter extends Contract {
     private static final String BINARY = "6060604052341561000f57600080fd5b6040516103203803806103208339810160405280805160008054600160a060020a03191633600160a060020a03161790559190910190506001818051610059929160200190610060565b50506100fb565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100a157805160ff19168380011785556100ce565b828001600101855582156100ce579182015b828111156100ce5782518255916020019190600101906100b3565b506100da9291506100de565b5090565b6100f891905b808211156100da57600081556001016100e4565b90565b6102168061010a6000396000f30060606040526004361061004b5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166341c0e1b58114610050578063cfae321714610065575b600080fd5b341561005b57600080fd5b6100636100ef565b005b341561007057600080fd5b610078610130565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100b457808201518382015260200161009c565b50505050905090810190601f1680156100e15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000543373ffffffffffffffffffffffffffffffffffffffff9081169116141561012e5760005473ffffffffffffffffffffffffffffffffffffffff16ff5b565b6101386101d8565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156101ce5780601f106101a3576101008083540402835291602001916101ce565b820191906000526020600020905b8154815290600101906020018083116101b157829003601f168201915b5050505050905090565b602060405190810160405260008152905600a165627a7a723058209dd925f8a845985cc97b98b1d11e67cb72915d7316a7eeb4e28cec3f5f398c9f0029";

File: integration-tests/src/test/java/org/web3j/generated/ShipIt.java
Patch:
@@ -26,10 +26,10 @@
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
  * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
  *
- * <p>Generated with web3j version 3.2.0.
+ * <p>Generated with web3j version 3.3.0.
  */
 public class ShipIt extends Contract {
-    private static final String BINARY = "6060604052341561000f57600080fd5b6101db8061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663d51cd4ac811461003c57600080fd5b341561004757600080fd5b61006873ffffffffffffffffffffffffffffffffffffffff60043516610150565b60405173ffffffffffffffffffffffffffffffffffffffff808a168252881660208201526040810187905260608101869052608081018560008111156100aa57fe5b60ff168152602081018590526060810183905260808282038101604083019081528554600260001960018316156101000201909116049183018290529160a001908590801561013a5780601f1061010f5761010080835404028352916020019161013a565b820191906000526020600020905b81548152906001019060200180831161011d57829003601f168201915b5050995050505050505050505060405180910390f35b6000602081905290815260409020805460018201546002830154600384015460048501546005860154600787015473ffffffffffffffffffffffffffffffffffffffff9687169796909516959394929360ff90921692909160060190885600a165627a7a72305820a724ff6f47df5f7b0a835a873d40089b7ace6a56076e71c1f6941f892fedf1780029";
+    private static final String BINARY = "6060604052341561000f57600080fd5b6101e48061001e6000396000f3006060604052600436106100405763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663d51cd4ac8114610045575b600080fd5b341561005057600080fd5b61007173ffffffffffffffffffffffffffffffffffffffff60043516610159565b60405173ffffffffffffffffffffffffffffffffffffffff808a168252881660208201526040810187905260608101869052608081018560008111156100b357fe5b60ff168152602081018590526060810183905260808282038101604083019081528554600260001960018316156101000201909116049183018290529160a00190859080156101435780601f1061011857610100808354040283529160200191610143565b820191906000526020600020905b81548152906001019060200180831161012657829003601f168201915b5050995050505050505050505060405180910390f35b6000602081905290815260409020805460018201546002830154600384015460048501546005860154600787015473ffffffffffffffffffffffffffffffffffffffff9687169796909516959394929360ff90921692909160060190885600a165627a7a72305820f4d4bf1c9ea57666a0a0e3a810321535fee9dd5f0809158d2f27a18e0a2df2560029";
 
     protected ShipIt(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
         super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
@@ -47,7 +47,7 @@ public RemoteCall<Tuple8<String, String, BigInteger, BigInteger, BigInteger, Big
                 new Callable<Tuple8<String, String, BigInteger, BigInteger, BigInteger, BigInteger, String, byte[]>>() {
                     @Override
                     public Tuple8<String, String, BigInteger, BigInteger, BigInteger, BigInteger, String, byte[]> call() throws Exception {
-                        List<Type> results = executeCallMultipleValueReturn(function);;
+                        List<Type> results = executeCallMultipleValueReturn(function);
                         return new Tuple8<String, String, BigInteger, BigInteger, BigInteger, BigInteger, String, byte[]>(
                                 (String) results.get(0).getValue(), 
                                 (String) results.get(1).getValue(), 

File: integration-tests/src/test/java/org/web3j/generated/SimpleStorage.java
Patch:
@@ -21,7 +21,7 @@
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
  * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
  *
- * <p>Generated with web3j version 3.2.0.
+ * <p>Generated with web3j version 3.3.0.
  */
 public class SimpleStorage extends Contract {
     private static final String BINARY = "6060604052341561000f57600080fd5b600560005560bb806100226000396000f30060606040526004361060485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166360fe47b18114604d5780636d4ce63c146062575b600080fd5b3415605757600080fd5b60606004356084565b005b3415606c57600080fd5b60726089565b60405190815260200160405180910390f35b600055565b600054905600a165627a7a723058206041ffcf05a66f6c239f255eaefd7b0775913f506ee42e43e1c5b01d0b0a5a030029";

File: codegen/src/test/java/org/web3j/codegen/SolidityFunctionWrapperTest.java
Patch:
@@ -151,7 +151,7 @@ public void testBuildFunctionTransaction() throws Exception {
     }
 
     @Test
-    public void testBuildPayabelFunctionTransaction() throws Exception {
+    public void testBuildPayableFunctionTransaction() throws Exception {
         AbiDefinition functionDefinition = new AbiDefinition(
                 false,
                 Arrays.asList(

File: crypto/src/test/java/org/web3j/crypto/MnemonicUtilsTest.java
Patch:
@@ -19,8 +19,6 @@
 
 /**
  * Unit tests for {@link MnemonicUtils} utility class.
- *
- * @author Ali Dehghani
  */
 @RunWith(Parameterized.class)
 public class MnemonicUtilsTest {

File: core/src/main/java/org/web3j/ens/EnsResolver.java
Patch:
@@ -44,7 +44,7 @@ public long getSyncThreshold() {
     }
 
     /**
-     * Provides an access to a valid public resolver in order to access extra API methods like "text", "content" etc..
+     * Provides an access to a valid public resolver in order to access other API methods.
      * @param ensName our user input ENS name
      * @return PublicResolver
      */

File: core/src/main/java/org/web3j/protocol/core/methods/response/EthBlock.java
Patch:
@@ -54,7 +54,7 @@ public static class Block {
         private String logsBloom;
         private String transactionsRoot;
         private String stateRoot;
-        private String receiptsRoot;  // geth has this wrong currently, see https://github.com/ethereum/go-ethereum/issues/3084
+        private String receiptsRoot;
         private String author;
         private String miner;
         private String mixHash;

File: abi/src/main/java/org/web3j/abi/datatypes/generated/AbiTypes.java
Patch:
@@ -218,7 +218,8 @@ public static Class<?> getType(String type) {
             case "bytes32":
                     return Bytes32.class;
             default:
-                    throw new UnsupportedOperationException("Unsupported type encountered");
+                    throw new UnsupportedOperationException("Unsupported type encountered: "
+                            + type);
         }
     }
 }

File: codegen/src/main/java/org/web3j/codegen/AbiTypesMapperGenerator.java
Patch:
@@ -53,9 +53,9 @@ private void generate(String destinationDir) throws IOException {
 
         builder = addTypes(builder, typesPackageName);
         builder = addGeneratedTypes(builder, autoGeneratedTypesPackageName);
-        builder = builder.addStatement("default:\nthrow new $T($S)",
+        builder = builder.addStatement("default:\nthrow new $T($S\n+ $N)",
                 UnsupportedOperationException.class,
-                "Unsupported type encountered");
+                "Unsupported type encountered: ", TYPE);
         builder.endControlFlow();
 
         MethodSpec methodSpec = builder.build();

File: core/src/main/java/org/web3j/tx/Contract.java
Patch:
@@ -98,14 +98,16 @@ public String getContractBinary() {
     }
     
     /**
-     * Allow gasPrice to be set.
+     * Allow {@code gasPrice} to be set.
+     * @param newPrice gas price to use for subsequent transactions
      */
     public void setGasPrice(BigInteger newPrice) {
         this.gasPrice = newPrice;
     }
 
     /**
      * Get the current {@code gasPrice} value this contract uses when executing transactions.
+     * @return the gas price set on this contract
      */
     public BigInteger getGasPrice() {
         return gasPrice;

File: core/src/main/java/org/web3j/protocol/core/filters/Filter.java
Patch:
@@ -110,7 +110,7 @@ private void pollFilter(EthFilter ethFilter) {
             throwException(e);
         }
         if (ethLog.hasError()) {
-            throwException(ethFilter.getError());
+            throwException(ethLog.getError());
         } else {
             process(ethLog.getLogs());
         }

File: integration-tests/src/test/java/org/web3j/generated/Fibonacci.java
Patch:
@@ -31,10 +31,10 @@
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
  * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
  *
- * <p>Generated with web3j version 3.1.1.
+ * <p>Generated with web3j version 3.2.0.
  */
 public class Fibonacci extends Contract {
-    private static final String BINARY = "6060604052341561000f57600080fd5b6101408061001e6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633c7fdc70811461004757806361047ff41461006f57600080fd5b341561005257600080fd5b61005d600435610085565b60405190815260200160405180910390f35b341561007a57600080fd5b61005d6004356100d1565b6000610090826100d1565b90507f71e71a8458267085d5ab16980fd5f114d2d37f232479c245d523ce8d23ca40ed828260405191825260208201526040908101905180910390a1919050565b60008115156100e25750600061010f565b81600114156100f35750600161010f565b6100ff600283036100d1565b61010b600184036100d1565b0190505b9190505600a165627a7a72305820e29e6f9256736dbb0e785aef85807aaa0d64be7212498e8ced7848bed1a3daa10029";
+    private static final String BINARY = "6060604052341561000f57600080fd5b6101498061001e6000396000f30060606040526004361061004b5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633c7fdc70811461005057806361047ff414610078575b600080fd5b341561005b57600080fd5b61006660043561008e565b60405190815260200160405180910390f35b341561008357600080fd5b6100666004356100da565b6000610099826100da565b90507f71e71a8458267085d5ab16980fd5f114d2d37f232479c245d523ce8d23ca40ed828260405191825260208201526040908101905180910390a1919050565b60008115156100eb57506000610118565b81600114156100fc57506001610118565b610108600283036100da565b610114600184036100da565b0190505b9190505600a165627a7a72305820e408d0180959faf2f0168a105318c66ad9cee6a322569be9157dfc267cf450ce0029";
 
     protected Fibonacci(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
         super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);

File: integration-tests/src/test/java/org/web3j/generated/Greeter.java
Patch:
@@ -22,10 +22,10 @@
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
  * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
  *
- * <p>Generated with web3j version 3.1.1.
+ * <p>Generated with web3j version 3.2.0.
  */
 public class Greeter extends Contract {
-    private static final String BINARY = "6060604052341561000f57600080fd5b6040516103173803806103178339810160405280805160008054600160a060020a03191633600160a060020a03161790559190910190506001818051610059929160200190610060565b50506100fb565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100a157805160ff19168380011785556100ce565b828001600101855582156100ce579182015b828111156100ce5782518255916020019190600101906100b3565b506100da9291506100de565b5090565b6100f891905b808211156100da57600081556001016100e4565b90565b61020d8061010a6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166341c0e1b58114610047578063cfae32171461005c57600080fd5b341561005257600080fd5b61005a6100e6565b005b341561006757600080fd5b61006f610127565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100ab578082015183820152602001610093565b50505050905090810190601f1680156100d85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000543373ffffffffffffffffffffffffffffffffffffffff908116911614156101255760005473ffffffffffffffffffffffffffffffffffffffff16ff5b565b61012f6101cf565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156101c55780601f1061019a576101008083540402835291602001916101c5565b820191906000526020600020905b8154815290600101906020018083116101a857829003601f168201915b5050505050905090565b602060405190810160405260008152905600a165627a7a72305820aa08e4bb9248935fa72006b4a31d561f0246e87657677aea82c22108f4af7cb70029";
+    private static final String BINARY = "6060604052341561000f57600080fd5b6040516103203803806103208339810160405280805160008054600160a060020a03191633600160a060020a03161790559190910190506001818051610059929160200190610060565b50506100fb565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100a157805160ff19168380011785556100ce565b828001600101855582156100ce579182015b828111156100ce5782518255916020019190600101906100b3565b506100da9291506100de565b5090565b6100f891905b808211156100da57600081556001016100e4565b90565b6102168061010a6000396000f30060606040526004361061004b5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166341c0e1b58114610050578063cfae321714610065575b600080fd5b341561005b57600080fd5b6100636100ef565b005b341561007057600080fd5b610078610130565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100b457808201518382015260200161009c565b50505050905090810190601f1680156100e15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000543373ffffffffffffffffffffffffffffffffffffffff9081169116141561012e5760005473ffffffffffffffffffffffffffffffffffffffff16ff5b565b6101386101d8565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156101ce5780601f106101a3576101008083540402835291602001916101ce565b820191906000526020600020905b8154815290600101906020018083116101b157829003601f168201915b5050505050905090565b602060405190810160405260008152905600a165627a7a723058209dd925f8a845985cc97b98b1d11e67cb72915d7316a7eeb4e28cec3f5f398c9f0029";
 
     protected Greeter(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
         super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);

File: integration-tests/src/test/java/org/web3j/generated/HumanStandardToken.java
Patch:
@@ -35,10 +35,10 @@
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
  * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
  *
- * <p>Generated with web3j version 3.1.1.
+ * <p>Generated with web3j version 3.2.0.
  */
 public class HumanStandardToken extends Contract {
-    private static final String BINARY = "606060405260408051908101604052600481527f48302e31000000000000000000000000000000000000000000000000000000006020820152600690805161004b9291602001906100e7565b50341561005757600080fd5b6040516109f83803806109f8833981016040528080519190602001805182019190602001805191906020018051600160a060020a0333166000908152600160205260408120879055869055909101905060038380516100ba9291602001906100e7565b506004805460ff191660ff841617905560058180516100dd9291602001906100e7565b5050505050610182565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012857805160ff1916838001178555610155565b82800160010185558215610155579182015b8281111561015557825182559160200191906001019061013a565b50610161929150610165565b5090565b61017f91905b80821115610161576000815560010161016b565b90565b610867806101916000396000f300606060405236156100935763ffffffff60e060020a60003504166306fdde0381146100a3578063095ea7b31461012d57806318160ddd1461016357806323b872dd14610188578063313ce567146101b057806354fd4d50146101d957806370a08231146101ec57806395d89b411461020b578063a9059cbb1461021e578063cae9ca5114610240578063dd62ed3e146102a5575b341561009e57600080fd5b600080fd5b34156100ae57600080fd5b6100b66102ca565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100f25780820151838201526020016100da565b50505050905090810190601f16801561011f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561013857600080fd5b61014f600160a060020a0360043516602435610368565b604051901515815260200160405180910390f35b341561016e57600080fd5b6101766103d5565b60405190815260200160405180910390f35b341561019357600080fd5b61014f600160a060020a03600435811690602435166044356103db565b34156101bb57600080fd5b6101c36104d3565b60405160ff909116815260200160405180910390f35b34156101e457600080fd5b6100b66104dc565b34156101f757600080fd5b610176600160a060020a0360043516610547565b341561021657600080fd5b6100b6610562565b341561022957600080fd5b61014f600160a060020a03600435166024356105cd565b341561024b57600080fd5b61014f60048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061067095505050505050565b34156102b057600080fd5b610176600160a060020a0360043581169060243516610810565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103605780601f1061033557610100808354040283529160200191610360565b820191906000526020600020905b81548152906001019060200180831161034357829003601f168201915b505050505081565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60005481565b600160a060020a03831660009081526001602052604081205482901080159061042b5750600160a060020a0380851660009081526002602090815260408083203390941683529290522054829010155b80156104375750600082115b156104c857600160a060020a03808416600081815260016020908152604080832080548801905588851680845281842080548990039055600283528184203390961684529490915290819020805486900390559091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060016104cc565b5060005b9392505050565b60045460ff1681565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103605780601f1061033557610100808354040283529160200191610360565b600160a060020a031660009081526001602052604090205490565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103605780601f1061033557610100808354040283529160200191610360565b600160a060020a0333166000908152600160205260408120548290108015906105f65750600082115b1561066857600160a060020a033381166000818152600160205260408082208054879003905592861680825290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060016103cf565b5060006103cf565b600160a060020a03338116600081815260026020908152604080832094881680845294909152808220869055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259086905190815260200160405180910390a383600160a060020a03166040517f72656365697665417070726f76616c28616464726573732c75696e743235362c81527f616464726573732c6279746573290000000000000000000000000000000000006020820152602e01604051809103902060e060020a9004338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a03168152602001828051906020019080838360005b838110156107b1578082015183820152602001610799565b50505050905090810190601f1680156107de5780820380516001836020036101000a031916815260200191505b5094505050505060006040518083038160008761646e5a03f192505050151561080657600080fd5b5060019392505050565b600160a060020a039182166000908152600260209081526040808320939094168252919091522054905600a165627a7a7230582099618d3c5204845d688b605708cc5a47a962ec312a8c774ab67f9c9e40c415970029";
+    private static final String BINARY = "606060405260408051908101604052600481527f48302e31000000000000000000000000000000000000000000000000000000006020820152600690805161004b9291602001906100e7565b50341561005757600080fd5b6040516109fa3803806109fa833981016040528080519190602001805182019190602001805191906020018051600160a060020a0333166000908152600160205260408120879055869055909101905060038380516100ba9291602001906100e7565b506004805460ff191660ff841617905560058180516100dd9291602001906100e7565b5050505050610182565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012857805160ff1916838001178555610155565b82800160010185558215610155579182015b8281111561015557825182559160200191906001019061013a565b50610161929150610165565b5090565b61017f91905b80821115610161576000815560010161016b565b90565b610869806101916000396000f3006060604052600436106100955763ffffffff60e060020a60003504166306fdde0381146100a5578063095ea7b31461012f57806318160ddd1461016557806323b872dd1461018a578063313ce567146101b257806354fd4d50146101db57806370a08231146101ee57806395d89b411461020d578063a9059cbb14610220578063cae9ca5114610242578063dd62ed3e146102a7575b34156100a057600080fd5b600080fd5b34156100b057600080fd5b6100b86102cc565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100f45780820151838201526020016100dc565b50505050905090810190601f1680156101215780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561013a57600080fd5b610151600160a060020a036004351660243561036a565b604051901515815260200160405180910390f35b341561017057600080fd5b6101786103d7565b60405190815260200160405180910390f35b341561019557600080fd5b610151600160a060020a03600435811690602435166044356103dd565b34156101bd57600080fd5b6101c56104d5565b60405160ff909116815260200160405180910390f35b34156101e657600080fd5b6100b86104de565b34156101f957600080fd5b610178600160a060020a0360043516610549565b341561021857600080fd5b6100b8610564565b341561022b57600080fd5b610151600160a060020a03600435166024356105cf565b341561024d57600080fd5b61015160048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061067295505050505050565b34156102b257600080fd5b610178600160a060020a0360043581169060243516610812565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103625780601f1061033757610100808354040283529160200191610362565b820191906000526020600020905b81548152906001019060200180831161034557829003601f168201915b505050505081565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60005481565b600160a060020a03831660009081526001602052604081205482901080159061042d5750600160a060020a0380851660009081526002602090815260408083203390941683529290522054829010155b80156104395750600082115b156104ca57600160a060020a03808416600081815260016020908152604080832080548801905588851680845281842080548990039055600283528184203390961684529490915290819020805486900390559091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060016104ce565b5060005b9392505050565b60045460ff1681565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103625780601f1061033757610100808354040283529160200191610362565b600160a060020a031660009081526001602052604090205490565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103625780601f1061033757610100808354040283529160200191610362565b600160a060020a0333166000908152600160205260408120548290108015906105f85750600082115b1561066a57600160a060020a033381166000818152600160205260408082208054879003905592861680825290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060016103d1565b5060006103d1565b600160a060020a03338116600081815260026020908152604080832094881680845294909152808220869055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259086905190815260200160405180910390a383600160a060020a03166040517f72656365697665417070726f76616c28616464726573732c75696e743235362c81527f616464726573732c6279746573290000000000000000000000000000000000006020820152602e01604051809103902060e060020a9004338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a03168152602001828051906020019080838360005b838110156107b357808201518382015260200161079b565b50505050905090810190601f1680156107e05780820380516001836020036101000a031916815260200191505b5094505050505060006040518083038160008761646e5a03f192505050151561080857600080fd5b5060019392505050565b600160a060020a039182166000908152600260209081526040808320939094168252919091522054905600a165627a7a72305820f7c827ed01d6c3a0eb10c6ab62e5e5ada68884ce0920c089c8917225b61f2a6d0029";
 
     protected HumanStandardToken(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
         super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);

File: integration-tests/src/test/java/org/web3j/generated/ShipIt.java
Patch:
@@ -26,7 +26,7 @@
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
  * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
  *
- * <p>Generated with web3j version 3.1.1.
+ * <p>Generated with web3j version 3.2.0.
  */
 public class ShipIt extends Contract {
     private static final String BINARY = "6060604052341561000f57600080fd5b6101db8061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663d51cd4ac811461003c57600080fd5b341561004757600080fd5b61006873ffffffffffffffffffffffffffffffffffffffff60043516610150565b60405173ffffffffffffffffffffffffffffffffffffffff808a168252881660208201526040810187905260608101869052608081018560008111156100aa57fe5b60ff168152602081018590526060810183905260808282038101604083019081528554600260001960018316156101000201909116049183018290529160a001908590801561013a5780601f1061010f5761010080835404028352916020019161013a565b820191906000526020600020905b81548152906001019060200180831161011d57829003601f168201915b5050995050505050505050505060405180910390f35b6000602081905290815260409020805460018201546002830154600384015460048501546005860154600787015473ffffffffffffffffffffffffffffffffffffffff9687169796909516959394929360ff90921692909160060190885600a165627a7a72305820a724ff6f47df5f7b0a835a873d40089b7ace6a56076e71c1f6941f892fedf1780029";

File: integration-tests/src/test/java/org/web3j/generated/SimpleStorage.java
Patch:
@@ -21,10 +21,10 @@
  * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
  * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
  *
- * <p>Generated with web3j version 3.1.1.
+ * <p>Generated with web3j version 3.2.0.
  */
 public class SimpleStorage extends Contract {
-    private static final String BINARY = "6060604052341561000f57600080fd5b600560005560b3806100226000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166360fe47b1811460455780636d4ce63c14605a57600080fd5b3415604f57600080fd5b6058600435607c565b005b3415606457600080fd5b606a6081565b60405190815260200160405180910390f35b600055565b600054905600a165627a7a723058200a0eade034c6c9ce9aed1a5bde0152ebdc61c84d6f93ee9227353c8446ed73f00029";
+    private static final String BINARY = "6060604052341561000f57600080fd5b600560005560bb806100226000396000f30060606040526004361060485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166360fe47b18114604d5780636d4ce63c146062575b600080fd5b3415605757600080fd5b60606004356084565b005b3415606c57600080fd5b60726089565b60405190815260200160405180910390f35b600055565b600054905600a165627a7a723058206041ffcf05a66f6c239f255eaefd7b0775913f506ee42e43e1c5b01d0b0a5a030029";
 
     protected SimpleStorage(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
         super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);

File: core/src/main/java/org/web3j/protocol/core/JsonRpc2_0Web3j.java
Patch:
@@ -514,7 +514,7 @@ public Request<?, EthLog> ethGetFilterChanges(BigInteger filterId) {
     public Request<?, EthLog> ethGetFilterLogs(BigInteger filterId) {
         return new Request<>(
                 "eth_getFilterLogs",
-                Arrays.asList(Numeric.toHexStringWithPrefixSave(filterId)),
+                Arrays.asList(Numeric.toHexStringWithPrefixSafe(filterId)),
                 web3jService,
                 EthLog.class);
     }

File: utils/src/main/java/org/web3j/utils/Numeric.java
Patch:
@@ -113,7 +113,7 @@ public static String toHexStringWithPrefixZeroPadded(BigInteger value, int size)
         return toHexStringZeroPadded(value, size, true);
     }
     
-    public static String toHexStringWithPrefixSave(BigInteger value) {
+    public static String toHexStringWithPrefixSafe(BigInteger value) {
         String result = toHexStringNoPrefix(value);
         if (result.length() < 2) {
             result = Strings.zeros(1) + result;

File: core/src/main/java/org/web3j/protocol/core/JsonRpc2_0Web3j.java
Patch:
@@ -514,7 +514,7 @@ public Request<?, EthLog> ethGetFilterChanges(BigInteger filterId) {
     public Request<?, EthLog> ethGetFilterLogs(BigInteger filterId) {
         return new Request<>(
                 "eth_getFilterLogs",
-                Arrays.asList(Numeric.encodeQuantity(filterId)),
+                Arrays.asList(Numeric.toHexStringWithPrefixSave(filterId)),
                 web3jService,
                 EthLog.class);
     }

File: core/src/main/java/org/web3j/protocol/http/HttpService.java
Patch:
@@ -18,8 +18,6 @@
 import org.slf4j.LoggerFactory;
 
 import org.web3j.protocol.Service;
-import org.web3j.protocol.core.Request;
-import org.web3j.protocol.core.Response;
 import org.web3j.protocol.exceptions.ClientConnectionException;
 
 /**

File: codegen/src/main/java/org/web3j/codegen/SolidityFunctionWrapper.java
Patch:
@@ -286,8 +286,8 @@ private static MethodSpec buildDeployWithParams(
                 String.class, FunctionEncoder.class, Arrays.class, Type.class, inputParams);
         if (isPayable) {
             methodBuilder.addStatement(
-                    "return deployRemoteCall(" +
-                            "$L.class, $L, $L, $L, $L, $L, encodedConstructor, $L)",
+                    "return deployRemoteCall("
+                            + "$L.class, $L, $L, $L, $L, $L, encodedConstructor, $L)",
                     className, WEB3J, authName, GAS_PRICE, GAS_LIMIT, BINARY, INITIAL_VALUE);
         } else {
             methodBuilder.addStatement(

File: codegen/src/main/java/org/web3j/codegen/SolidityFunctionWrapper.java
Patch:
@@ -286,8 +286,8 @@ private static MethodSpec buildDeployWithParams(
                 String.class, FunctionEncoder.class, Arrays.class, Type.class, inputParams);
         if (isPayable) {
             methodBuilder.addStatement(
-                    "return deployRemoteCall($L.class, $L, $L, $L, $L, $L, encodedConstructor, $L)"
-                    ,
+                    "return deployRemoteCall(" +
+                            "$L.class, $L, $L, $L, $L, $L, encodedConstructor, $L)",
                     className, WEB3J, authName, GAS_PRICE, GAS_LIMIT, BINARY, INITIAL_VALUE);
         } else {
             methodBuilder.addStatement(

File: core/src/main/java/org/web3j/tx/FastRawTransactionManager.java
Patch:
@@ -38,7 +38,7 @@ public FastRawTransactionManager(
     }
 
     @Override
-    synchronized BigInteger getNonce() throws IOException {
+    protected synchronized BigInteger getNonce() throws IOException {
         if (nonce.signum() == -1) {
             // obtain lock
             nonce = super.getNonce();

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/HumanStandardTokenGeneratedIT.java
Patch:
@@ -42,6 +42,7 @@ public void testContract() throws Exception {
         assertThat(contract.balanceOf(ALICE.getAddress()).send(),
                 equalTo(aliceQty));
 
+        // CHECKSTYLE:OFF
         CountDownLatch transferEventCountDownLatch = new CountDownLatch(2);
         Subscription transferEventSubscription = contract.transferEventObservable(
                 DefaultBlockParameterName.EARLIEST,
@@ -55,6 +56,7 @@ public void testContract() throws Exception {
                 DefaultBlockParameterName.LATEST).subscribe(
                 transferEventResponse -> transferEventCountDownLatch.countDown()
         );
+        // CHECKSTYLE:ON
 
         // transfer tokens
         BigInteger transferQuantity = BigInteger.valueOf(100_000);

File: codegen/src/main/java/org/web3j/codegen/SolidityFunctionWrapper.java
Patch:
@@ -170,7 +170,7 @@ private TypeSpec.Builder createClassBuilder(String className, String binary) {
         String javadoc = CODEGEN_WARNING + getWeb3jVersion();
 
         return TypeSpec.classBuilder(className)
-                .addModifiers(Modifier.PUBLIC, Modifier.FINAL)
+                .addModifiers(Modifier.PUBLIC) 
                 .addJavadoc(javadoc)
                 .superclass(Contract.class)
                 .addField(createBinaryDefinition(binary));

File: core/src/main/java/org/web3j/tx/ManagedTransaction.java
Patch:
@@ -50,6 +50,8 @@ public long getSyncThreshold() {
      *
      * <p>It is currently experimental and only used in ENS name resolution, but will probably
      * be made available for read calls in the future.
+     *
+     * @param syncThreshold the sync threshold in milliseconds
      */
     public void setSyncThreshold(long syncThreshold) {
         ensResolver.setSyncThreshold(syncThreshold);

File: abi/src/main/java/org/web3j/abi/FunctionReturnDecoder.java
Patch:
@@ -66,6 +66,7 @@ public static List<Type> decode(
      * @param <T> type of TypeReference
      * @return the decode value
      */
+    @SuppressWarnings("unchecked")
     public static <T extends Type> Type decodeIndexedValue(
             String rawInput, TypeReference<T> typeReference) {
         String input = Numeric.cleanHexPrefix(rawInput);
@@ -94,6 +95,7 @@ private static List<Type> build(
         int offset = 0;
         for (TypeReference<?> typeReference:outputParameters) {
             try {
+                @SuppressWarnings("unchecked")
                 Class<Type> type = (Class<Type>) typeReference.getClassType();
 
                 int hexStringDataOffset = getDataOffset(input, offset, type);

File: abi/src/main/java/org/web3j/abi/TypeDecoder.java
Patch:
@@ -213,6 +213,7 @@ static <T extends Type> T decodeStaticArray(
         return decodeArrayElements(input, offset, typeReference, length, function);
     }
 
+    @SuppressWarnings("unchecked")
     private static <T extends Type> T instantiateStaticArray(
             TypeReference<T> typeReference, List<T> elements) {
         try {

File: abi/src/main/java/org/web3j/abi/TypeEncoder.java
Patch:
@@ -37,6 +37,7 @@ static boolean isDynamic(Type parameter) {
                 || parameter instanceof DynamicArray;
     }
 
+    @SuppressWarnings("unchecked")
     public static String encode(Type parameter) {
         if (parameter instanceof NumericType) {
             return encodeNumeric(((NumericType) parameter));

File: abi/src/main/java/org/web3j/abi/Utils.java
Patch:
@@ -78,6 +78,7 @@ static <T extends Type, U extends Type> String getParameterizedTypeName(
         }
     }
 
+    @SuppressWarnings("unchecked")
     static <T extends Type> Class<T> getParameterizedTypeFromArray(
             TypeReference typeReference) throws ClassNotFoundException {
 

File: abi/src/main/java/org/web3j/abi/datatypes/Array.java
Patch:
@@ -12,6 +12,7 @@ public abstract class Array<T extends Type> implements Type<List<T>> {
     private String type;
     protected final List<T> value;
 
+    @SafeVarargs
     Array(String type, T... values) {
         if (!valid(values, type)) {
             throw new UnsupportedOperationException(

File: abi/src/main/java/org/web3j/abi/datatypes/DynamicArray.java
Patch:
@@ -7,6 +7,7 @@
  */
 public class DynamicArray<T extends Type> extends Array<T> {
 
+    @SafeVarargs
     public DynamicArray(T... values) {
         super(values[0].getTypeAsString() + "[]", values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int104.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int112.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int120.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int128.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int136.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int144.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int152.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int16.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int160.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int168.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int176.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int184.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int192.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int200.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int208.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int216.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int224.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int232.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int24.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int240.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int248.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int256.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int32.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int40.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int48.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int56.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int64.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int72.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int8.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int80.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int88.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int96.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray1.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray1(List<T> values) {
         super(1, values);
     }
 
+    @SafeVarargs
     public StaticArray1(T... values) {
         super(1, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray10.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray10(List<T> values) {
         super(10, values);
     }
 
+    @SafeVarargs
     public StaticArray10(T... values) {
         super(10, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray11.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray11(List<T> values) {
         super(11, values);
     }
 
+    @SafeVarargs
     public StaticArray11(T... values) {
         super(11, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray12.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray12(List<T> values) {
         super(12, values);
     }
 
+    @SafeVarargs
     public StaticArray12(T... values) {
         super(12, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray13.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray13(List<T> values) {
         super(13, values);
     }
 
+    @SafeVarargs
     public StaticArray13(T... values) {
         super(13, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray14.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray14(List<T> values) {
         super(14, values);
     }
 
+    @SafeVarargs
     public StaticArray14(T... values) {
         super(14, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray15.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray15(List<T> values) {
         super(15, values);
     }
 
+    @SafeVarargs
     public StaticArray15(T... values) {
         super(15, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray16.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray16(List<T> values) {
         super(16, values);
     }
 
+    @SafeVarargs
     public StaticArray16(T... values) {
         super(16, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray17.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray17(List<T> values) {
         super(17, values);
     }
 
+    @SafeVarargs
     public StaticArray17(T... values) {
         super(17, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray18.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray18(List<T> values) {
         super(18, values);
     }
 
+    @SafeVarargs
     public StaticArray18(T... values) {
         super(18, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray19.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray19(List<T> values) {
         super(19, values);
     }
 
+    @SafeVarargs
     public StaticArray19(T... values) {
         super(19, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray2.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray2(List<T> values) {
         super(2, values);
     }
 
+    @SafeVarargs
     public StaticArray2(T... values) {
         super(2, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray20.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray20(List<T> values) {
         super(20, values);
     }
 
+    @SafeVarargs
     public StaticArray20(T... values) {
         super(20, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray21.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray21(List<T> values) {
         super(21, values);
     }
 
+    @SafeVarargs
     public StaticArray21(T... values) {
         super(21, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray22.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray22(List<T> values) {
         super(22, values);
     }
 
+    @SafeVarargs
     public StaticArray22(T... values) {
         super(22, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray23.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray23(List<T> values) {
         super(23, values);
     }
 
+    @SafeVarargs
     public StaticArray23(T... values) {
         super(23, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray24.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray24(List<T> values) {
         super(24, values);
     }
 
+    @SafeVarargs
     public StaticArray24(T... values) {
         super(24, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray25.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray25(List<T> values) {
         super(25, values);
     }
 
+    @SafeVarargs
     public StaticArray25(T... values) {
         super(25, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray26.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray26(List<T> values) {
         super(26, values);
     }
 
+    @SafeVarargs
     public StaticArray26(T... values) {
         super(26, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray27.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray27(List<T> values) {
         super(27, values);
     }
 
+    @SafeVarargs
     public StaticArray27(T... values) {
         super(27, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray28.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray28(List<T> values) {
         super(28, values);
     }
 
+    @SafeVarargs
     public StaticArray28(T... values) {
         super(28, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray29.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray29(List<T> values) {
         super(29, values);
     }
 
+    @SafeVarargs
     public StaticArray29(T... values) {
         super(29, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray3.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray3(List<T> values) {
         super(3, values);
     }
 
+    @SafeVarargs
     public StaticArray3(T... values) {
         super(3, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray30.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray30(List<T> values) {
         super(30, values);
     }
 
+    @SafeVarargs
     public StaticArray30(T... values) {
         super(30, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray31.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray31(List<T> values) {
         super(31, values);
     }
 
+    @SafeVarargs
     public StaticArray31(T... values) {
         super(31, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray32.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray32(List<T> values) {
         super(32, values);
     }
 
+    @SafeVarargs
     public StaticArray32(T... values) {
         super(32, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray4.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray4(List<T> values) {
         super(4, values);
     }
 
+    @SafeVarargs
     public StaticArray4(T... values) {
         super(4, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray5.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray5(List<T> values) {
         super(5, values);
     }
 
+    @SafeVarargs
     public StaticArray5(T... values) {
         super(5, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray6.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray6(List<T> values) {
         super(6, values);
     }
 
+    @SafeVarargs
     public StaticArray6(T... values) {
         super(6, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray7.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray7(List<T> values) {
         super(7, values);
     }
 
+    @SafeVarargs
     public StaticArray7(T... values) {
         super(7, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray8.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray8(List<T> values) {
         super(8, values);
     }
 
+    @SafeVarargs
     public StaticArray8(T... values) {
         super(8, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray9.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray9(List<T> values) {
         super(9, values);
     }
 
+    @SafeVarargs
     public StaticArray9(T... values) {
         super(9, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint104.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint112.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint120.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint128.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint136.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint144.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint152.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint16.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint160.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint168.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint176.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint184.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint192.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint200.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint208.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint216.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint224.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint232.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint24.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint240.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint248.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint256.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint32.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint40.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint48.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint56.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint64.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint72.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint8.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint80.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint88.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint96.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/test/java/org/web3j/abi/FunctionReturnDecoderTest.java
Patch:
@@ -118,6 +118,7 @@ public void testDecodeMultipleStringValues() {
 
 
     @Test
+    @SuppressWarnings("unchecked")
     public void testDecodeStaticArrayValue() {
         List<TypeReference<Type>> outputParameters = new ArrayList<>(1);
         outputParameters.add((TypeReference)

File: abi/src/test/java/org/web3j/abi/TypeEncoderTest.java
Patch:
@@ -235,6 +235,7 @@ public void testDynamicArray() {
 
     @Test
     public void testEmptyArray() {
+        @SuppressWarnings("unchecked")
         DynamicArray<Uint> array = DynamicArray.empty("uint");
         assertThat(
                 TypeEncoder.encodeDynamicArray(array),

File: codegen/src/main/java/org/web3j/codegen/AbiTypesGenerator.java
Patch:
@@ -36,7 +36,7 @@ public static void main(String[] args) throws Exception {
         if (args.length == 1) {
             abiTypesGenerator.generate(args[0]);
         } else {
-            abiTypesGenerator.generate(System.getProperty("user.dir") + "/core/src/main/java/");
+            abiTypesGenerator.generate(System.getProperty("user.dir") + "/abi/src/main/java/");
         }
     }
 
@@ -195,6 +195,7 @@ private <T extends Type> void generateStaticArrayTypes(
                     .build();
 
             MethodSpec arrayOverloadConstructorSpec = MethodSpec.constructorBuilder()
+                    .addAnnotation(SafeVarargs.class)
                     .addModifiers(Modifier.PUBLIC)
                     .addParameter(ArrayTypeName.of(typeVariableName), "values")
                     .varargs()

File: core/src/main/java/org/web3j/protocol/Service.java
Patch:
@@ -27,6 +27,7 @@ public Service(boolean includeRawResponses) {
     public <T extends Response> T send(
             Request request, Class<T> responseType) throws IOException {
         String payload = objectMapper.writeValueAsString(request);
+
         try (InputStream result = performIO(payload)) {
             if (result != null) {
                 return objectMapper.readValue(result, responseType);

File: core/src/main/java/org/web3j/protocol/core/filters/BlockFilter.java
Patch:
@@ -39,7 +39,7 @@ void process(List<EthLog.LogResult> logResults) {
 
     /**
      * Since the block filter does not support historic filters, the filterId is ignored
-     * and an empty optional is returned
+     * and an empty optional is returned.
      * @param filterId
      * Id of the filter for which the historic log should be retrieved
      * @return

File: core/src/main/java/org/web3j/protocol/core/methods/request/EthFilter.java
Patch:
@@ -44,7 +44,7 @@ public List<String> getAddress() {
     }
 
     @Override
-    Filter getThis() {
+    EthFilter getThis() {
         return this;
     }
 }

File: core/src/main/java/org/web3j/protocol/core/methods/request/Filter.java
Patch:
@@ -40,7 +40,7 @@ public List<FilterTopic> getTopics() {
         return topics;
     }
 
-    abstract <T extends Filter> T getThis();
+    abstract T getThis();
 
     public interface FilterTopic<T> {
         @JsonValue

File: core/src/main/java/org/web3j/protocol/core/methods/request/ShhFilter.java
Patch:
@@ -16,7 +16,7 @@ public String getTo() {
     }
 
     @Override
-    Filter getThis() {
+    ShhFilter getThis() {
         return this;
     }
 }

File: core/src/main/java/org/web3j/tx/Contract.java
Patch:
@@ -158,6 +158,7 @@ private List<Type> executeCall(
         return FunctionReturnDecoder.decode(value, function.getOutputParameters());
     }
 
+    @SuppressWarnings("unchecked")
     protected <T extends Type> T executeCallSingleValueReturn(
             Function function) throws IOException {
         List<Type> values = executeCall(function);
@@ -168,6 +169,7 @@ protected <T extends Type> T executeCallSingleValueReturn(
         }
     }
 
+    @SuppressWarnings("unchecked")
     protected <T extends Type, R> R executeCallSingleValueReturn(
             Function function, Class<R> returnType) throws IOException {
         T result = executeCallSingleValueReturn(function);

File: core/src/test/java/org/web3j/protocol/core/filters/FilterTester.java
Patch:
@@ -58,6 +58,7 @@ <T> void runTest(EthLog ethLog, Observable<T> observable) throws Exception {
         EthUninstallFilter ethUninstallFilter = objectMapper.readValue(
                 "{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":true}", EthUninstallFilter.class);
 
+        @SuppressWarnings("unchecked")
         List<T> expected = createExpected(ethLog);
         Set<T> results = Collections.synchronizedSet(new HashSet<T>());
 

File: core/src/test/java/org/web3j/tx/TransferTest.java
Patch:
@@ -48,6 +48,7 @@ public void testTransferInvalidValue() throws Exception {
                 new BigDecimal(0.1), Convert.Unit.WEI).send();
     }
 
+    @SuppressWarnings("unchecked")
     private TransactionReceipt prepareTransfer() throws IOException {
         TransactionReceipt transactionReceipt = new TransactionReceipt();
         transactionReceipt.setTransactionHash(TRANSACTION_HASH);
@@ -56,9 +57,9 @@ private TransactionReceipt prepareTransfer() throws IOException {
         EthGasPrice ethGasPrice = new EthGasPrice();
         ethGasPrice.setResult("0x1");
 
-        Request gasPriceRequest = mock(Request.class);
+        Request<?, EthGasPrice> gasPriceRequest = mock(Request.class);
         when(gasPriceRequest.send()).thenReturn(ethGasPrice);
-        when(web3j.ethGasPrice()).thenReturn(gasPriceRequest);
+        when(web3j.ethGasPrice()).thenReturn((Request) gasPriceRequest);
 
         return transactionReceipt;
     }

File: integration-tests/src/test/java/org/web3j/protocol/core/TestnetConfig.java
Patch:
@@ -85,7 +85,6 @@ public BigInteger validUncleBlock() {
 
     @Override
     public String encodedEvent() {
-
         Event event = new Event("Notify",
                 Collections.singletonList(new TypeReference<Uint>() {}),
                 Collections.singletonList(new TypeReference<Uint>() {}));

File: core/src/test/java/org/web3j/ens/ContractsTest.java
Patch:
@@ -22,6 +22,6 @@ public void testResolveRegistryContract() {
 
     @Test(expected = EnsResolutionException.class)
     public void testResolveRegistryContractInvalid() {
-        resolveRegistryContract("foo");
+        resolveRegistryContract(ChainId.NONE + "");
     }
 }

File: core/src/main/java/org/web3j/protocol/core/JsonRpc2_0Web3j.java
Patch:
@@ -347,7 +347,7 @@ public Request<?, EthSign> ethSign(String address, String sha3HashOfDataToSign)
     @Override
     public Request<?, org.web3j.protocol.core.methods.response.EthCall> ethCall(
             Transaction transaction, DefaultBlockParameter defaultBlockParameter) {
-        return new Request<Object, EthCall>(
+        return new Request<>(
                 "eth_call",
                 Arrays.asList(transaction, defaultBlockParameter),
                 ID,

File: core/src/main/java/org/web3j/protocol/core/methods/response/TransactionReceipt.java
Patch:
@@ -15,8 +15,10 @@ public class TransactionReceipt {
     private String blockNumber;
     private String cumulativeGasUsed;
     private String gasUsed;
-    private String contractAddress;  // this is present in the spec
+    private String contractAddress;
     private String root;
+    // status is only present on Byzantium transactions onwards
+    // see EIP 658 https://github.com/ethereum/EIPs/pull/658
     private String status;
     private String from;
     private String to;

File: crypto/src/main/java/org/web3j/crypto/Keys.java
Patch:
@@ -26,7 +26,8 @@ public class Keys {
     static final int PRIVATE_KEY_SIZE = 32;
     static final int PUBLIC_KEY_SIZE = 64;
 
-    public static final int ADDRESS_LENGTH_IN_HEX = 40;
+    public static final int ADDRESS_SIZE = 160;
+    public static final int ADDRESS_LENGTH_IN_HEX = ADDRESS_SIZE >> 2;
     static final int PUBLIC_KEY_LENGTH_IN_HEX = PUBLIC_KEY_SIZE << 1;
     public static final int PRIVATE_KEY_LENGTH_IN_HEX = PRIVATE_KEY_SIZE << 1;
 

File: abi/src/main/java/org/web3j/abi/FunctionReturnDecoder.java
Patch:
@@ -66,6 +66,7 @@ public static List<Type> decode(
      * @param <T> type of TypeReference
      * @return the decode value
      */
+    @SuppressWarnings("unchecked")
     public static <T extends Type> Type decodeIndexedValue(
             String rawInput, TypeReference<T> typeReference) {
         String input = Numeric.cleanHexPrefix(rawInput);
@@ -94,6 +95,7 @@ private static List<Type> build(
         int offset = 0;
         for (TypeReference<?> typeReference:outputParameters) {
             try {
+                @SuppressWarnings("unchecked")
                 Class<Type> type = (Class<Type>) typeReference.getClassType();
 
                 int hexStringDataOffset = getDataOffset(input, offset, type);

File: abi/src/main/java/org/web3j/abi/TypeDecoder.java
Patch:
@@ -213,6 +213,7 @@ static <T extends Type> T decodeStaticArray(
         return decodeArrayElements(input, offset, typeReference, length, function);
     }
 
+    @SuppressWarnings("unchecked")
     private static <T extends Type> T instantiateStaticArray(
             TypeReference<T> typeReference, List<T> elements) {
         try {

File: abi/src/main/java/org/web3j/abi/TypeEncoder.java
Patch:
@@ -37,6 +37,7 @@ static boolean isDynamic(Type parameter) {
                 || parameter instanceof DynamicArray;
     }
 
+    @SuppressWarnings("unchecked")
     public static String encode(Type parameter) {
         if (parameter instanceof NumericType) {
             return encodeNumeric(((NumericType) parameter));

File: abi/src/main/java/org/web3j/abi/Utils.java
Patch:
@@ -78,6 +78,7 @@ static <T extends Type, U extends Type> String getParameterizedTypeName(
         }
     }
 
+    @SuppressWarnings("unchecked")
     static <T extends Type> Class<T> getParameterizedTypeFromArray(
             TypeReference typeReference) throws ClassNotFoundException {
 

File: abi/src/main/java/org/web3j/abi/datatypes/Array.java
Patch:
@@ -12,6 +12,7 @@ public abstract class Array<T extends Type> implements Type<List<T>> {
     private String type;
     protected final List<T> value;
 
+    @SafeVarargs
     Array(String type, T... values) {
         if (!valid(values, type)) {
             throw new UnsupportedOperationException(

File: abi/src/main/java/org/web3j/abi/datatypes/DynamicArray.java
Patch:
@@ -7,6 +7,7 @@
  */
 public class DynamicArray<T extends Type> extends Array<T> {
 
+    @SafeVarargs
     public DynamicArray(T... values) {
         super(values[0].getTypeAsString() + "[]", values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int104.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int112.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int120.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int128.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int136.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int144.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int152.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int16.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int160.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int168.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int176.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int184.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int192.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int200.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int208.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int216.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int224.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int232.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int24.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int240.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int248.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int256.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int32.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int40.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int48.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int56.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int64.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int72.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int8.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int80.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int88.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Int96.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Int;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray1.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray1(List<T> values) {
         super(1, values);
     }
 
+    @SafeVarargs
     public StaticArray1(T... values) {
         super(1, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray10.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray10(List<T> values) {
         super(10, values);
     }
 
+    @SafeVarargs
     public StaticArray10(T... values) {
         super(10, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray11.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray11(List<T> values) {
         super(11, values);
     }
 
+    @SafeVarargs
     public StaticArray11(T... values) {
         super(11, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray12.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray12(List<T> values) {
         super(12, values);
     }
 
+    @SafeVarargs
     public StaticArray12(T... values) {
         super(12, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray13.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray13(List<T> values) {
         super(13, values);
     }
 
+    @SafeVarargs
     public StaticArray13(T... values) {
         super(13, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray14.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray14(List<T> values) {
         super(14, values);
     }
 
+    @SafeVarargs
     public StaticArray14(T... values) {
         super(14, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray15.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray15(List<T> values) {
         super(15, values);
     }
 
+    @SafeVarargs
     public StaticArray15(T... values) {
         super(15, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray16.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray16(List<T> values) {
         super(16, values);
     }
 
+    @SafeVarargs
     public StaticArray16(T... values) {
         super(16, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray17.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray17(List<T> values) {
         super(17, values);
     }
 
+    @SafeVarargs
     public StaticArray17(T... values) {
         super(17, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray18.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray18(List<T> values) {
         super(18, values);
     }
 
+    @SafeVarargs
     public StaticArray18(T... values) {
         super(18, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray19.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray19(List<T> values) {
         super(19, values);
     }
 
+    @SafeVarargs
     public StaticArray19(T... values) {
         super(19, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray2.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray2(List<T> values) {
         super(2, values);
     }
 
+    @SafeVarargs
     public StaticArray2(T... values) {
         super(2, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray20.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray20(List<T> values) {
         super(20, values);
     }
 
+    @SafeVarargs
     public StaticArray20(T... values) {
         super(20, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray21.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray21(List<T> values) {
         super(21, values);
     }
 
+    @SafeVarargs
     public StaticArray21(T... values) {
         super(21, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray22.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray22(List<T> values) {
         super(22, values);
     }
 
+    @SafeVarargs
     public StaticArray22(T... values) {
         super(22, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray23.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray23(List<T> values) {
         super(23, values);
     }
 
+    @SafeVarargs
     public StaticArray23(T... values) {
         super(23, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray24.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray24(List<T> values) {
         super(24, values);
     }
 
+    @SafeVarargs
     public StaticArray24(T... values) {
         super(24, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray25.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray25(List<T> values) {
         super(25, values);
     }
 
+    @SafeVarargs
     public StaticArray25(T... values) {
         super(25, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray26.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray26(List<T> values) {
         super(26, values);
     }
 
+    @SafeVarargs
     public StaticArray26(T... values) {
         super(26, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray27.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray27(List<T> values) {
         super(27, values);
     }
 
+    @SafeVarargs
     public StaticArray27(T... values) {
         super(27, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray28.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray28(List<T> values) {
         super(28, values);
     }
 
+    @SafeVarargs
     public StaticArray28(T... values) {
         super(28, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray29.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray29(List<T> values) {
         super(29, values);
     }
 
+    @SafeVarargs
     public StaticArray29(T... values) {
         super(29, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray3.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray3(List<T> values) {
         super(3, values);
     }
 
+    @SafeVarargs
     public StaticArray3(T... values) {
         super(3, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray30.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray30(List<T> values) {
         super(30, values);
     }
 
+    @SafeVarargs
     public StaticArray30(T... values) {
         super(30, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray31.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray31(List<T> values) {
         super(31, values);
     }
 
+    @SafeVarargs
     public StaticArray31(T... values) {
         super(31, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray32.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray32(List<T> values) {
         super(32, values);
     }
 
+    @SafeVarargs
     public StaticArray32(T... values) {
         super(32, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray4.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray4(List<T> values) {
         super(4, values);
     }
 
+    @SafeVarargs
     public StaticArray4(T... values) {
         super(4, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray5.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray5(List<T> values) {
         super(5, values);
     }
 
+    @SafeVarargs
     public StaticArray5(T... values) {
         super(5, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray6.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray6(List<T> values) {
         super(6, values);
     }
 
+    @SafeVarargs
     public StaticArray6(T... values) {
         super(6, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray7.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray7(List<T> values) {
         super(7, values);
     }
 
+    @SafeVarargs
     public StaticArray7(T... values) {
         super(7, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray8.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray8(List<T> values) {
         super(8, values);
     }
 
+    @SafeVarargs
     public StaticArray8(T... values) {
         super(8, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/StaticArray9.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.util.List;
-
 import org.web3j.abi.datatypes.StaticArray;
 import org.web3j.abi.datatypes.Type;
 
@@ -16,6 +15,7 @@ public StaticArray9(List<T> values) {
         super(9, values);
     }
 
+    @SafeVarargs
     public StaticArray9(T... values) {
         super(9, values);
     }

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint104.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint112.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint120.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint128.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint136.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint144.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint152.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint16.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint160.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint168.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint176.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint184.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint192.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint200.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint208.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint216.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint224.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint232.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint24.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint240.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint248.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint256.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint32.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint40.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint48.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint56.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint64.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint72.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint8.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint80.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint88.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/main/java/org/web3j/abi/datatypes/generated/Uint96.java
Patch:
@@ -1,7 +1,6 @@
 package org.web3j.abi.datatypes.generated;
 
 import java.math.BigInteger;
-
 import org.web3j.abi.datatypes.Uint;
 
 /**

File: abi/src/test/java/org/web3j/abi/FunctionReturnDecoderTest.java
Patch:
@@ -118,6 +118,7 @@ public void testDecodeMultipleStringValues() {
 
 
     @Test
+    @SuppressWarnings("unchecked")
     public void testDecodeStaticArrayValue() {
         List<TypeReference<Type>> outputParameters = new ArrayList<>(1);
         outputParameters.add((TypeReference)

File: abi/src/test/java/org/web3j/abi/TypeEncoderTest.java
Patch:
@@ -235,6 +235,7 @@ public void testDynamicArray() {
 
     @Test
     public void testEmptyArray() {
+        @SuppressWarnings("unchecked")
         DynamicArray<Uint> array = DynamicArray.empty("uint");
         assertThat(
                 TypeEncoder.encodeDynamicArray(array),

File: codegen/src/main/java/org/web3j/codegen/AbiTypesGenerator.java
Patch:
@@ -36,7 +36,7 @@ public static void main(String[] args) throws Exception {
         if (args.length == 1) {
             abiTypesGenerator.generate(args[0]);
         } else {
-            abiTypesGenerator.generate(System.getProperty("user.dir") + "/core/src/main/java/");
+            abiTypesGenerator.generate(System.getProperty("user.dir") + "/abi/src/main/java/");
         }
     }
 
@@ -195,6 +195,7 @@ private <T extends Type> void generateStaticArrayTypes(
                     .build();
 
             MethodSpec arrayOverloadConstructorSpec = MethodSpec.constructorBuilder()
+                    .addAnnotation(SafeVarargs.class)
                     .addModifiers(Modifier.PUBLIC)
                     .addParameter(ArrayTypeName.of(typeVariableName), "values")
                     .varargs()

File: core/src/main/java/org/web3j/protocol/core/methods/request/EthFilter.java
Patch:
@@ -44,7 +44,7 @@ public List<String> getAddress() {
     }
 
     @Override
-    Filter getThis() {
+    EthFilter getThis() {
         return this;
     }
 }

File: core/src/main/java/org/web3j/protocol/core/methods/request/Filter.java
Patch:
@@ -40,7 +40,7 @@ public List<FilterTopic> getTopics() {
         return topics;
     }
 
-    abstract <T extends Filter> T getThis();
+    abstract T getThis();
 
     public interface FilterTopic<T> {
         @JsonValue

File: core/src/main/java/org/web3j/protocol/core/methods/request/ShhFilter.java
Patch:
@@ -16,7 +16,7 @@ public String getTo() {
     }
 
     @Override
-    Filter getThis() {
+    ShhFilter getThis() {
         return this;
     }
 }

File: core/src/main/java/org/web3j/tx/Contract.java
Patch:
@@ -153,6 +153,7 @@ private List<Type> executeCall(
         return FunctionReturnDecoder.decode(value, function.getOutputParameters());
     }
 
+    @SuppressWarnings("unchecked")
     protected <T extends Type> T executeCallSingleValueReturn(
             Function function) throws IOException {
         List<Type> values = executeCall(function);
@@ -163,6 +164,7 @@ protected <T extends Type> T executeCallSingleValueReturn(
         }
     }
 
+    @SuppressWarnings("unchecked")
     protected <T extends Type, R> R executeCallSingleValueReturn(
             Function function, Class<R> returnType) throws IOException {
         T result = executeCallSingleValueReturn(function);

File: core/src/main/java/org/web3j/utils/Collection.java
Patch:
@@ -17,6 +17,7 @@ public static String[] tail(String[] args) {
         }
     }
 
+    @SafeVarargs
     public static <T> T[] create(T... args) {
         return args;
     }

File: core/src/test/java/org/web3j/protocol/core/filters/FilterTester.java
Patch:
@@ -58,6 +58,7 @@ <T> void runTest(EthLog ethLog, Observable<T> observable) throws Exception {
         EthUninstallFilter ethUninstallFilter = objectMapper.readValue(
                 "{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":true}", EthUninstallFilter.class);
 
+        @SuppressWarnings("unchecked")
         List<T> expected = createExpected(ethLog);
         Set<T> results = Collections.synchronizedSet(new HashSet<T>());
 

File: core/src/test/java/org/web3j/tx/TransferTest.java
Patch:
@@ -48,6 +48,7 @@ public void testTransferInvalidValue() throws Exception {
                 new BigDecimal(0.1), Convert.Unit.WEI).send();
     }
 
+    @SuppressWarnings("unchecked")
     private TransactionReceipt prepareTransfer() throws IOException {
         TransactionReceipt transactionReceipt = new TransactionReceipt();
         transactionReceipt.setTransactionHash(TRANSACTION_HASH);
@@ -56,9 +57,9 @@ private TransactionReceipt prepareTransfer() throws IOException {
         EthGasPrice ethGasPrice = new EthGasPrice();
         ethGasPrice.setResult("0x1");
 
-        Request gasPriceRequest = mock(Request.class);
+        Request<?, EthGasPrice> gasPriceRequest = mock(Request.class);
         when(gasPriceRequest.send()).thenReturn(ethGasPrice);
-        when(web3j.ethGasPrice()).thenReturn(gasPriceRequest);
+        when(web3j.ethGasPrice()).thenReturn((Request) gasPriceRequest);
 
         return transactionReceipt;
     }

File: codegen/src/main/java/org/web3j/codegen/SolidityFunctionWrapper.java
Patch:
@@ -347,7 +347,7 @@ static TypeName getNativeType(TypeName typeName) {
         } else if (simpleName.equals(DynamicBytes.class.getSimpleName())) {
             return TypeName.get(byte[].class);
         } else if (simpleName.equals(Bool.class.getSimpleName())) {
-            return TypeName.get(boolean.class);
+            return TypeName.get(Boolean.class);  // boolean cannot be a parameterized type
         } else {
             throw new UnsupportedOperationException(
                     "Unsupported type: " + typeName

File: codegen/src/test/java/org/web3j/codegen/SolidityFunctionWrapperTest.java
Patch:
@@ -84,7 +84,7 @@ public void testGetNativeType() {
         assertThat(getNativeType(TypeName.get(Int256.class)),
                 equalTo(TypeName.get(BigInteger.class)));
         assertThat(getNativeType(TypeName.get(Bool.class)),
-                equalTo(TypeName.get(boolean.class)));
+                equalTo(TypeName.get(Boolean.class)));
         assertThat(getNativeType(TypeName.get(Bytes32.class)),
                 equalTo(TypeName.get(byte[].class)));
         assertThat(getNativeType(TypeName.get(DynamicBytes.class)),

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/FunctionWrappersIT.java
Patch:
@@ -28,7 +28,7 @@ public void testFibonacci() throws Exception {
                 "0x3c05b2564139fb55820b18b72e94b2178eaace7d", Web3j.build(new HttpService()),
                 ALICE, GAS_PRICE, GAS_LIMIT);
 
-        BigInteger result = fibonacci.fibonacci(BigInteger.valueOf(10));
+        BigInteger result = fibonacci.fibonacci(BigInteger.valueOf(10)).send();
         assertThat(result, equalTo(BigInteger.valueOf(55)));
     }
 
@@ -39,7 +39,7 @@ public void testFibonacciNotify() throws Exception {
                 ALICE, GAS_PRICE, GAS_LIMIT);
 
         TransactionReceipt transactionReceipt = fibonacci.fibonacciNotify(
-                BigInteger.valueOf(15));
+                BigInteger.valueOf(15)).send();
 
         Fibonacci.NotifyEventResponse result = fibonacci.getNotifyEvents(transactionReceipt).get(0);
 

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/SimpleStorageContractIT.java
Patch:
@@ -16,8 +16,8 @@ public class SimpleStorageContractIT extends Scenario {
     public void testSimpleStorageContract() throws Exception {
         BigInteger value = BigInteger.valueOf(1000L);
         SimpleStorage simpleStorage = SimpleStorage.deploy(
-                web3j, ALICE, GAS_PRICE, GAS_LIMIT, BigInteger.ZERO);
-        assertNotNull(simpleStorage.set(value));
-        assertThat(simpleStorage.get(), is(value));
+                web3j, ALICE, GAS_PRICE, GAS_LIMIT).send();
+        assertNotNull(simpleStorage.set(value).send());
+        assertThat(simpleStorage.get().send(), is(value));
     }
 }

File: core/src/main/java/org/web3j/tx/ManagedTransaction.java
Patch:
@@ -6,7 +6,7 @@
 import org.web3j.protocol.Web3j;
 import org.web3j.protocol.core.methods.response.EthGasPrice;
 import org.web3j.protocol.core.methods.response.TransactionReceipt;
-import org.web3j.protocol.exceptions.TransactionTimeoutException;
+import org.web3j.protocol.exceptions.TransactionException;
 
 
 /**
@@ -34,7 +34,7 @@ public BigInteger getGasPrice() throws IOException {
 
     protected TransactionReceipt send(
             String to, String data, BigInteger value, BigInteger gasPrice, BigInteger gasLimit)
-            throws InterruptedException, IOException, TransactionTimeoutException {
+            throws IOException, TransactionException {
 
         return transactionManager.executeTransaction(
                 gasPrice, gasLimit, to, data, value);

File: core/src/test/java/org/web3j/abi/TypeDecoderTest.java
Patch:
@@ -231,8 +231,8 @@ public void testDynamicBytes() {
 
     @Test
     public void testAddress() {
-        assertThat(TypeDecoder.decodeNumeric(
-                "000000000000000000000000be5422d15f39373eb0a97ff8c10fbd0e40e29338", Address.class),
+        assertThat(TypeDecoder.decodeAddress(
+                "000000000000000000000000be5422d15f39373eb0a97ff8c10fbd0e40e29338"),
                 is(new Address("0xbe5422d15f39373eb0a97ff8c10fbd0e40e29338")));
     }
 

File: core/src/test/java/org/web3j/abi/TypeEncoderTest.java
Patch:
@@ -191,7 +191,7 @@ public void testDynamicBytes() {
     public void testAddress() {
         Address address = new Address("0xbe5422d15f39373eb0a97ff8c10fbd0e40e29338");
         assertThat(address.getTypeAsString(), is("address"));
-        assertThat(TypeEncoder.encodeNumeric(address),
+        assertThat(TypeEncoder.encodeAddress(address),
                 is("000000000000000000000000be5422d15f39373eb0a97ff8c10fbd0e40e29338"));
     }
 

File: core/src/test/java/org/web3j/tx/ContractTest.java
Patch:
@@ -6,7 +6,6 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.ExecutionException;
-import java.util.concurrent.Future;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -34,7 +33,7 @@
 import org.web3j.protocol.core.methods.response.EthSendTransaction;
 import org.web3j.protocol.core.methods.response.Log;
 import org.web3j.protocol.core.methods.response.TransactionReceipt;
-import org.web3j.protocol.exceptions.TransactionTimeoutException;
+import org.web3j.protocol.exceptions.TransactionException;
 import org.web3j.utils.Async;
 import org.web3j.utils.Numeric;
 
@@ -226,7 +225,7 @@ public void testProcessEvent() {
                 equalTo(Collections.singletonList(new Uint256(BigInteger.ONE))));
     }
 
-    @Test(expected = TransactionTimeoutException.class)
+    @Test(expected = TransactionException.class)
     public void testTimeout() throws Throwable {
         prepareTransaction(null);
 

File: core/src/test/java/org/web3j/utils/CollectionTest.java
Patch:
@@ -5,8 +5,6 @@
 
 import org.junit.Test;
 
-import org.web3j.utils.Collection;
-
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertThat;
 import static org.web3j.utils.Collection.EMPTY_STRING_ARRAY;
@@ -66,7 +64,6 @@ public void testJoinWithFunction() {
         assertThat(join(specs4, ", ", FakeSpec::getName), is("a, b, c"));
     }
 
-
     /**
      * Fake object to test {@link Collection#join(List, String, Function)}.
      */

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/FastRawTransactionManagerIT.java
Patch:
@@ -51,9 +51,9 @@ public void testTransaction() throws Exception {
 
         for (int i = 0; i < COUNT; i++) {
 
-            Future<TransactionReceipt> transactionReceiptFuture = transfer.sendFundsAsync(
+            Future<TransactionReceipt> transactionReceiptFuture = transfer.sendFunds(
                     BOB.getAddress(), BigDecimal.valueOf(1.0), Convert.Unit.ETHER,
-                    gasPrice, Transfer.GAS_LIMIT);
+                    gasPrice, Transfer.GAS_LIMIT).sendAsync();
             transactionReceipts.add(transactionReceiptFuture);
         }
 

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/Scenario.java
Patch:
@@ -31,7 +31,7 @@
 public class Scenario {
 
     // https://www.reddit.com/r/ethereum/comments/5g8ia6/attention_miners_we_recommend_raising_gas_limit/
-    static final BigInteger GAS_PRICE = BigInteger.valueOf(20_000_000_000L);
+    static final BigInteger GAS_PRICE = BigInteger.valueOf(100_000_000_000L);
     static final BigInteger GAS_LIMIT = BigInteger.valueOf(4_300_000);
 
     // testnet

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/SendEtherIT.java
Patch:
@@ -66,7 +66,8 @@ public void testTransferEther() throws Exception {
     @Test
     public void testTransfer() throws Exception {
         TransactionReceipt transactionReceipt = Transfer.sendFunds(
-                parity, ALICE, BOB.getAddress(), BigDecimal.valueOf(0.2), Convert.Unit.ETHER);
+                parity, ALICE, BOB.getAddress(), BigDecimal.valueOf(0.2), Convert.Unit.ETHER)
+                .send();
         assertFalse(transactionReceipt.getBlockHash().isEmpty());
     }
 }

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/FunctionWrappersIT.java
Patch:
@@ -28,7 +28,7 @@ public void testFibonacci() throws Exception {
                 "0x3c05b2564139fb55820b18b72e94b2178eaace7d", Web3j.build(new HttpService()),
                 ALICE, GAS_PRICE, GAS_LIMIT);
 
-        Uint256 result = fibonacci.fibonacci(new Uint256(BigInteger.valueOf(10))).get();
+        Uint256 result = fibonacci.fibonacci(new Uint256(BigInteger.valueOf(10))).send();
         assertThat(result.getValue(), equalTo(BigInteger.valueOf(55)));
     }
 
@@ -39,7 +39,7 @@ public void testFibonacciNotify() throws Exception {
                 ALICE, GAS_PRICE, GAS_LIMIT);
 
         TransactionReceipt transactionReceipt = fibonacci.fibonacciNotify(
-                new Uint256(BigInteger.valueOf(15))).get();
+                new Uint256(BigInteger.valueOf(15))).send();
 
         Fibonacci.NotifyEventResponse result = fibonacci.getNotifyEvents(transactionReceipt).get(0);
 

File: integration-tests/src/test/java/org/web3j/protocol/scenarios/SimpleStorageContractIT.java
Patch:
@@ -17,8 +17,8 @@ public class SimpleStorageContractIT extends Scenario {
     public void testSimpleStorageContract() throws Exception {
         Uint256 value = new Uint256(1000L);
         SimpleStorage simpleStorage = SimpleStorage.deploy(
-                parity, ALICE, GAS_PRICE, GAS_LIMIT, BigInteger.ZERO).get();
-        assertNotNull(simpleStorage.set(value).get());
-        assertThat(simpleStorage.get().get(), is(value));
+                parity, ALICE, GAS_PRICE, GAS_LIMIT, BigInteger.ZERO).send();
+        assertNotNull(simpleStorage.set(value).send());
+        assertThat(simpleStorage.get().send(), is(value));
     }
 }

File: core/src/main/java/org/web3j/crypto/SecureRandomUtils.java
Patch:
@@ -5,7 +5,7 @@
 /**
  * Utility class for working with SecureRandom implementation.
  *
- * This is to address issues with SecureRandom on Android. For more information, refer to the
+ * <p>This is to address issues with SecureRandom on Android. For more information, refer to the
  * following <a href="https://github.com/web3j/web3j/issues/146">issue</a>.
  */
 final class SecureRandomUtils {
@@ -26,6 +26,7 @@ static java.security.SecureRandom secureRandom() {
     // Taken from BitcoinJ implementation
     // https://github.com/bitcoinj/bitcoinj/blob/3cb1f6c6c589f84fe6e1fb56bf26d94cccc85429/core/src/main/java/org/bitcoinj/core/Utils.java#L573
     private static int isAndroid = -1;
+
     static boolean isAndroidRuntime() {
         if (isAndroid == -1) {
             final String runtime = System.getProperty("java.runtime.name");

File: core/src/main/java/org/web3j/crypto/Keys.java
Patch:
@@ -6,7 +6,6 @@
 import java.security.KeyPairGenerator;
 import java.security.NoSuchAlgorithmException;
 import java.security.NoSuchProviderException;
-import java.security.SecureRandom;
 import java.security.Security;
 import java.security.spec.ECGenParameterSpec;
 import java.util.Arrays;
@@ -16,6 +15,8 @@
 import org.web3j.utils.Numeric;
 import org.web3j.utils.Strings;
 
+import static org.web3j.crypto.SecureRandomUtils.secureRandom;
+
 
 /**
  * Crypto key utilities.
@@ -47,7 +48,7 @@ static KeyPair createSecp256k1KeyPair() throws NoSuchProviderException,
 
         KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("ECDSA", "BC");
         ECGenParameterSpec ecGenParameterSpec = new ECGenParameterSpec("secp256k1");
-        keyPairGenerator.initialize(ecGenParameterSpec, new SecureRandom());
+        keyPairGenerator.initialize(ecGenParameterSpec, secureRandom());
         return keyPairGenerator.generateKeyPair();
     }
 

File: core/src/main/java/org/web3j/protocol/deserializer/RawResponseDeserializer.java
Patch:
@@ -43,7 +43,7 @@ public void resolve(DeserializationContext ctxt) throws JsonMappingException {
     }
 
     private String getRawResponse(JsonParser jp) throws IOException {
-        final InputStream inputSource = (InputStream)jp.getInputSource();
+        final InputStream inputSource = (InputStream) jp.getInputSource();
 
         if (inputSource == null) {
             return "";

File: src/test/java/org/web3j/protocol/rx/JsonRpc2_0RxTest.java
Patch:
@@ -145,7 +145,7 @@ public void testCatchUpToLatestAndSubscribeToNewBlockObservable() throws Excepti
                 throwable -> fail(throwable.getMessage()),
                 () -> completedLatch.countDown());
 
-        transactionLatch.await(1, TimeUnit.SECONDS);
+        transactionLatch.await(1250, TimeUnit.MILLISECONDS);
         assertThat(results, equalTo(expected));
 
         subscription.unsubscribe();

File: src/main/java/org/web3j/protocol/core/filters/PendingTransactionFilter.java
Patch:
@@ -39,8 +39,8 @@ void process(List<EthLog.LogResult> logResults) {
     }
 
     /**
-     * Since the pending transaction filter does not support historic filters, the filterId is ignored
-     * and an empty optional is returned
+     * Since the pending transaction filter does not support historic filters,
+     * the filterId is ignored and an empty optional is returned
      * @param filterId
      * Id of the filter for which the historic log should be retrieved
      * @return

File: src/main/java/org/web3j/crypto/Wallet.java
Patch:
@@ -132,7 +132,7 @@ private static WalletFile createWalletFile(
 
     private static byte[] generateDerivedScryptKey(
             byte[] password, byte[] salt, int n, int r, int p, int dkLen) throws CipherException {
-            return SCrypt.generate(password, salt, n, r, p, dkLen);
+        return SCrypt.generate(password, salt, n, r, p, dkLen);
     }
 
     private static byte[] generateAes128CtrDerivedKey(

File: src/main/java/org/web3j/protocol/ipc/IpcService.java
Patch:
@@ -2,8 +2,8 @@
 
 import java.io.IOException;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import org.web3j.protocol.Service;
 import org.web3j.protocol.core.Request;
@@ -14,7 +14,7 @@
  */
 public class IpcService extends Service {
 
-    private static final Log log = LogFactory.getLog(IpcService.class);
+    private static final Logger log = LoggerFactory.getLogger(IpcService.class);
 
     private final IOFacade ioFacade;
 

File: src/integration-test/java/org/web3j/protocol/parity/ParityIT.java
Patch:
@@ -3,11 +3,11 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import org.web3j.protocol.http.HttpService;
 import org.web3j.protocol.admin.methods.response.NewAccountIdentifier;
 import org.web3j.protocol.admin.methods.response.PersonalListAccounts;
 import org.web3j.protocol.admin.methods.response.PersonalSign;
 import org.web3j.protocol.admin.methods.response.PersonalUnlockAccount;
+import org.web3j.protocol.http.HttpService;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;

File: src/main/java/org/web3j/crypto/WalletFile.java
Patch:
@@ -1,6 +1,7 @@
 package org.web3j.crypto;
 
 import java.io.IOException;
+import java.util.Objects;
 
 import com.fasterxml.jackson.annotation.JsonSetter;
 import com.fasterxml.jackson.annotation.JsonSubTypes;
@@ -11,7 +12,6 @@
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.node.ObjectNode;
-import java.util.Objects;
 
 /**
  * Ethereum wallet file.

File: src/main/java/org/web3j/protocol/admin/methods/response/PersonalUnlockAccount.java
Patch:
@@ -5,7 +5,7 @@
 /**
  * personal_unlockAccount.
  */
-public class PersonalUnlockAccount extends Response<Boolean>{
+public class PersonalUnlockAccount extends Response<Boolean> {
     public Boolean accountUnlocked() {
         return getResult();
     }

File: src/main/java/org/web3j/protocol/geth/Geth.java
Patch:
@@ -2,16 +2,16 @@
 
 import org.web3j.protocol.Web3jService;
 import org.web3j.protocol.admin.Personal;
-import org.web3j.protocol.parity.methods.response.BooleanResponse;
+import org.web3j.protocol.admin.methods.response.PersonalSign;
 import org.web3j.protocol.core.Request;
 import org.web3j.protocol.geth.methods.response.PersonalEcRecover;
 import org.web3j.protocol.geth.methods.response.PersonalImportRawKey;
-import org.web3j.protocol.admin.methods.response.PersonalSign;
+import org.web3j.protocol.parity.methods.response.BooleanResponse;
 
 /**
  * JSON-RPC Request object building factory for Geth. 
  */
-public interface Geth extends Personal{
+public interface Geth extends Personal {
     static Geth build(Web3jService web3jService) {
         return new JsonRpc2_0Geth(web3jService);
     }

File: src/main/java/org/web3j/protocol/geth/JsonRpc2_0Geth.java
Patch:
@@ -1,13 +1,14 @@
 package org.web3j.protocol.geth;
 
 import java.util.Arrays;
+
 import org.web3j.protocol.Web3jService;
 import org.web3j.protocol.admin.JsonRpc2_0Personal;
-import org.web3j.protocol.parity.methods.response.BooleanResponse;
+import org.web3j.protocol.admin.methods.response.PersonalSign;
 import org.web3j.protocol.core.Request;
 import org.web3j.protocol.geth.methods.response.PersonalEcRecover;
 import org.web3j.protocol.geth.methods.response.PersonalImportRawKey;
-import org.web3j.protocol.admin.methods.response.PersonalSign;
+import org.web3j.protocol.parity.methods.response.BooleanResponse;
 
 /**
  * JSON-RPC 2.0 factory implementation for Geth.

File: src/main/java/org/web3j/protocol/geth/methods/response/PersonalImportRawKey.java
Patch:
@@ -5,7 +5,7 @@
 /**
  * personal_importRawKey.
  */
-public class PersonalImportRawKey extends Response<String>{
+public class PersonalImportRawKey extends Response<String> {
     public String getAccountId() {
         return getResult();
     }

File: src/main/java/org/web3j/protocol/parity/methods/response/BooleanResponse.java
Patch:
@@ -14,8 +14,8 @@
  * parity_setNewDappsDefaultAddress
  * parity_signMessage.
  */
-public class BooleanResponse extends Response<Boolean>{
-    public boolean success(){
+public class BooleanResponse extends Response<Boolean> {
+    public boolean success() {
         return getResult();
     }
 }

File: src/main/java/org/web3j/protocol/parity/methods/response/ParityAddressesResponse.java
Patch:
@@ -10,8 +10,8 @@
  * parity_importGethAccounts
  * parity_listGethAccounts.
  */
-public class ParityAddressesResponse extends Response<ArrayList<String>>{
-    public ArrayList<String> getAddresses(){
+public class ParityAddressesResponse extends Response<ArrayList<String>> {
+    public ArrayList<String> getAddresses() {
         return getResult();
     }
 }

File: src/main/java/org/web3j/protocol/parity/methods/response/ParityAllAccountsInfo.java
Patch:
@@ -7,7 +7,8 @@
 /**
  * parity_allAccountsInfo.
  */
-public class ParityAllAccountsInfo extends Response<Map<String, ParityAllAccountsInfo.AccountsInfo>> {
+public class ParityAllAccountsInfo extends 
+        Response<Map<String, ParityAllAccountsInfo.AccountsInfo>> {
 
     // we need to use a map type as a string value is returned with the account information
     public Map<String, ParityAllAccountsInfo.AccountsInfo> getAccountsInfo() {

File: src/main/java/org/web3j/protocol/parity/methods/response/ParityDefaultAddressResponse.java
Patch:
@@ -6,8 +6,8 @@
  * parity_getDappDefaultAddress
  * parity_getNewDappsDefaultAddress.
  */
-public class ParityDefaultAddressResponse extends Response<String>{
-    public String getAddress(){
+public class ParityDefaultAddressResponse extends Response<String> {
+    public String getAddress() {
         return getResult();
     }
 }

File: src/main/java/org/web3j/protocol/parity/methods/response/ParityDeriveAddress.java
Patch:
@@ -6,8 +6,8 @@
  * parity_deriveAddressHash
  * parity_deriveAddressIndex.
  */
-public class ParityDeriveAddress extends Response<String>{
-    public String getAddress(){
+public class ParityDeriveAddress extends Response<String> {
+    public String getAddress() {
         return getResult();
     }
 }

File: src/main/java/org/web3j/protocol/parity/methods/response/ParityExportAccount.java
Patch:
@@ -6,8 +6,8 @@
 /**
  * parity_ExportAccount.
  */
-public class ParityExportAccount extends Response<WalletFile>{
-    public WalletFile getWallet(){
+public class ParityExportAccount extends Response<WalletFile> {
+    public WalletFile getWallet() {
         return getResult();
     }
 }

File: src/main/java/org/web3j/protocol/parity/methods/response/ParityListRecentDapps.java
Patch:
@@ -7,8 +7,8 @@
 /**
  * parity_ListRecentDapps.
  */
-public class ParityListRecentDapps extends Response<ArrayList<String>>{
-    public ArrayList<String> getDappsIds(){
+public class ParityListRecentDapps extends Response<ArrayList<String>> {
+    public ArrayList<String> getDappsIds() {
         return getResult();
     }
 }

File: src/test/java/org/web3j/protocol/admin/RequestTest.java
Patch:
@@ -1,11 +1,11 @@
 package org.web3j.protocol.admin;
 
 import java.math.BigInteger;
+
 import org.junit.Test;
 
 import org.web3j.protocol.RequestTester;
 import org.web3j.protocol.core.methods.request.Transaction;
-import org.web3j.protocol.geth.Geth;
 import org.web3j.protocol.http.HttpService;
 import org.web3j.protocol.parity.Parity;
 

File: src/integration-test/java/org/web3j/protocol/scenarios/Scenario.java
Patch:
@@ -15,13 +15,13 @@
 import org.web3j.abi.datatypes.Function;
 import org.web3j.abi.datatypes.Uint;
 import org.web3j.crypto.Credentials;
+import org.web3j.protocol.admin.methods.response.PersonalUnlockAccount;
 import org.web3j.protocol.core.DefaultBlockParameterName;
 import org.web3j.protocol.core.methods.response.EthGetTransactionCount;
 import org.web3j.protocol.core.methods.response.EthGetTransactionReceipt;
 import org.web3j.protocol.core.methods.response.TransactionReceipt;
 import org.web3j.protocol.http.HttpService;
 import org.web3j.protocol.parity.Parity;
-import org.web3j.protocol.parity.methods.response.PersonalUnlockAccount;
 
 import static junit.framework.TestCase.fail;
 

File: src/main/java/org/web3j/crypto/TransactionEncoder.java
Patch:
@@ -8,6 +8,7 @@
 import org.web3j.rlp.RlpList;
 import org.web3j.rlp.RlpString;
 import org.web3j.rlp.RlpType;
+import org.web3j.utils.Bytes;
 import org.web3j.utils.Numeric;
 
 /**
@@ -84,8 +85,8 @@ static List<RlpType> asRlpValues(
 
         if (signatureData != null) {
             result.add(RlpString.create(signatureData.getV()));
-            result.add(RlpString.create(signatureData.getR()));
-            result.add(RlpString.create(signatureData.getS()));
+            result.add(RlpString.create(Bytes.trimLeadingZeroes(signatureData.getR())));
+            result.add(RlpString.create(Bytes.trimLeadingZeroes(signatureData.getS())));
         }
 
         return result;

File: src/main/java/org/web3j/abi/TypeEncoder.java
Patch:
@@ -36,7 +36,7 @@ static boolean isDynamic(Type parameter) {
                 || parameter instanceof DynamicArray;
     }
 
-    static String encode(Type parameter) {
+    public static String encode(Type parameter) {
         if (parameter instanceof NumericType) {
             return encodeNumeric(((NumericType) parameter));
         } else if (parameter instanceof Bool) {

File: src/main/java/org/web3j/crypto/TransactionEncoder.java
Patch:
@@ -69,7 +69,9 @@ static List<RlpType> asRlpValues(
         // an empty to address (contract creation) should not be encoded as a numeric 0 value
         String to = rawTransaction.getTo();
         if (to != null && to.length() > 0) {
-            result.add(RlpString.create(Numeric.toBigInt(to)));
+            // addresses that start with zeros should be encoded with the zeros included, not
+            // as numeric values
+            result.add(RlpString.create(Numeric.hexStringToByteArray(to)));
         } else {
             result.add(RlpString.create(""));
         }

File: src/main/java/org/web3j/rlp/RlpString.java
Patch:
@@ -22,7 +22,7 @@ public byte[] getBytes() {
     }
 
     public static RlpString create(byte[] value) {
-        return new RlpString(Bytes.trimLeadingZeroes(value));
+        return new RlpString(value);
     }
 
     public static RlpString create(byte value) {

File: src/test/java/org/web3j/rlp/RlpEncoderTest.java
Patch:
@@ -30,9 +30,6 @@ public void testEncode() {
         assertThat(RlpEncoder.encode(RlpString.create(new byte[] {})),
                 is(new byte[]{ (byte) 0x80 }));
 
-        assertThat(RlpEncoder.encode(RlpString.create(new byte[]{ 0, 'a', 0 })),
-                is(new byte[]{ (byte) 0x82, 'a', 0 }));
-
         assertThat(RlpEncoder.encode(new RlpList()),
                 is(new byte[]{ (byte) 0xc0 }));
 

File: src/main/java/org/web3j/rlp/RlpEncoder.java
Patch:
@@ -24,6 +24,7 @@ public static byte[] encode(RlpType value) {
 
     private static byte[] encode(byte[] bytesValue, int offset) {
         if (bytesValue.length == 1
+                && offset == STRING_OFFSET
                 && bytesValue[0] >= (byte) 0x00
                 && bytesValue[0] <= (byte) 0x7f) {
             return bytesValue;

File: src/main/java/org/web3j/abi/TypeDecoder.java
Patch:
@@ -32,7 +32,7 @@
  * <a href="https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI">here</a>.
  * </p>
  */
-class TypeDecoder {
+public class TypeDecoder {
 
     static final int MAX_BYTE_LENGTH_FOR_HEX_STRING = Type.MAX_BYTE_LENGTH << 1;
 

File: src/main/java/org/web3j/protocol/core/filters/Filter.java
Patch:
@@ -39,6 +39,8 @@ public void run(ScheduledExecutorService scheduledExecutorService, long blockTim
             }
 
             filterId = ethFilter.getFilterId();
+            EthLog ethLogInit = web3j.ethGetFilterLogs(filterId).send();
+            process(ethLogInit.getLogs());
 
             schedule = scheduledExecutorService.scheduleAtFixedRate(() -> {
                 EthLog ethLog = null;

File: src/test/java/org/web3j/protocol/core/RawResponseTest.java
Patch:
@@ -1,11 +1,13 @@
 package org.web3j.protocol.core;
 
 import org.junit.Test;
+
 import org.web3j.protocol.ResponseTester;
 import org.web3j.protocol.core.methods.response.Web3ClientVersion;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.nullValue;
+
 import static org.junit.Assert.assertThat;
 
 /**

File: src/main/java/org/web3j/protocol/core/filters/Filter.java
Patch:
@@ -39,6 +39,8 @@ public void run(ScheduledExecutorService scheduledExecutorService, long blockTim
             }
 
             filterId = ethFilter.getFilterId();
+            EthLog ethLogInit = web3j.ethGetFilterLogs(filterId).send();
+            process(ethLogInit.getLogs());
 
             schedule = scheduledExecutorService.scheduleAtFixedRate(() -> {
                 EthLog ethLog = null;

File: src/test/java/org/web3j/abi/EventEncoderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.web3j.abi;
 
-
 import org.junit.Test;
 
 import static org.hamcrest.CoreMatchers.is;

File: src/test/java/org/web3j/abi/UtilsTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.web3j.abi;
 
-
 import org.junit.Test;
 
 import org.web3j.abi.datatypes.Bool;

File: src/test/java/org/web3j/abi/datatypes/AddressTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.web3j.abi.datatypes;
 
-
 import org.junit.Test;
 
 import org.web3j.crypto.SampleKeys;

File: src/test/java/org/web3j/abi/datatypes/Utf8StringTest.java
Patch:
@@ -1,12 +1,10 @@
 package org.web3j.abi.datatypes;
 
-
 import org.junit.Test;
 
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertThat;
 
-
 public class Utf8StringTest {
 
     @Test

File: src/test/java/org/web3j/console/WalletCreatorTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.web3j.console;
 
-
 import org.junit.Test;
 
 import static org.mockito.Matchers.contains;

File: src/test/java/org/web3j/console/WalletTester.java
Patch:
@@ -1,6 +1,5 @@
 package org.web3j.console;
 
-
 import org.junit.Before;
 
 import org.web3j.TempFileProvider;

File: src/test/java/org/web3j/console/WalletUpdaterTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.web3j.console;
 
-
 import org.junit.Test;
 
 import static org.mockito.Matchers.contains;
@@ -22,8 +21,9 @@ public void testWalletUpdate() {
         when(console.readLine(startsWith("Would you like to delete")))
                 .thenReturn("N");
 
-        WalletUpdater.main(console, KeyImporterTest.class.getResource("/keyfiles/" +
-                "UTC--2016-11-03T05-55-06.340672473Z--ef678007d18427e6022059dbc264f27507cd1ffc").getFile());
+        WalletUpdater.main(console, KeyImporterTest.class.getResource("/keyfiles/"
+                + "UTC--2016-11-03T05-55-06.340672473Z--ef678007d18427e6022059dbc264f27507cd1ffc")
+                .getFile());
 
         verify(console).printf(contains("successfully created in"));
     }

File: src/test/java/org/web3j/crypto/CredentialsTest.java
Patch:
@@ -1,12 +1,10 @@
 package org.web3j.crypto;
 
-
 import org.junit.Test;
 
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertThat;
 
-
 public class CredentialsTest {
 
     @Test

File: src/test/java/org/web3j/crypto/SignTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.web3j.crypto;
 
-
 import java.math.BigInteger;
 import java.security.SignatureException;
 

File: src/test/java/org/web3j/protocol/RequestTester.java
Patch:
@@ -1,6 +1,5 @@
 package org.web3j.protocol;
 
-
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
@@ -19,7 +18,6 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 
-
 public abstract class RequestTester {
 
     private CloseableHttpClient closeableHttpClient;
@@ -36,7 +34,8 @@ public void setUp() {
 
     protected void verifyResult(String expected) throws Exception {
         ArgumentCaptor<HttpPost> httpPostArgumentCaptor = ArgumentCaptor.forClass(HttpPost.class);
-        verify(closeableHttpClient).execute(httpPostArgumentCaptor.capture(), any(ResponseHandler.class));
+        verify(closeableHttpClient).execute(
+                httpPostArgumentCaptor.capture(), any(ResponseHandler.class));
 
         String result = readResult(httpPostArgumentCaptor.getValue().getEntity().getContent());
         assertThat(result, is(expected));

File: src/test/java/org/web3j/protocol/ResponseTester.java
Patch:
@@ -54,7 +54,8 @@ protected <T extends Response> T deserialiseResponse(Class<T> type) {
         T response = null;
         try {
             response = web3jService.getResponseHandler(type).handleResponse(httpResponse);
-            when(closeableHttpClient.execute(isA(HttpPost.class), isA(ResponseHandler.class))).thenReturn(response);
+            when(closeableHttpClient.execute(isA(HttpPost.class), isA(ResponseHandler.class)))
+                    .thenReturn(response);
         } catch (IOException e) {
             fail(e.getMessage());
         }

File: src/test/java/org/web3j/protocol/core/EqualsVerifierResponseTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.web3j.protocol.core;
 
-
 import nl.jqno.equalsverifier.EqualsVerifier;
 import nl.jqno.equalsverifier.Warning;
 import org.junit.Test;

File: src/test/java/org/web3j/protocol/core/filters/PendingTransactionFilterTest.java
Patch:
@@ -6,14 +6,15 @@
 
 import org.web3j.protocol.core.methods.response.EthLog;
 
-
 @RunWith(MockitoJUnitRunner.class)
 public class PendingTransactionFilterTest extends FilterTester {
 
     @Test
     public void testPendingTransactionFilter() throws Exception {
         EthLog ethLog = objectMapper.readValue(
+                //CHECKSTYLE:OFF
                 "{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":[\"0x31c2342b1e0b8ffda1507fbffddf213c4b3c1e819ff6a84b943faabb0ebf2403\",\"0xccc0d2e07c1febcaca0c3341c4e1268204b06fefa4bb0c8c0d693d8e581c82da\"]}",
+                //CHECKSTYLE:ON
                 EthLog.class);
 
         runTest(ethLog, web3j.ethPendingTransactionHashObservable());

File: src/test/java/org/web3j/protocol/infura/InfuraHttpServiceTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.web3j.protocol.infura;
 
-
 import org.apache.http.message.BasicHeader;
 import org.junit.Test;
 

File: src/test/java/org/web3j/protocol/ipc/IpcServiceTest.java
Patch:
@@ -26,7 +26,8 @@ public void setUp() {
     @Test
     public void testSend() throws IOException {
         when(ioFacade.read()).thenReturn(
-                "{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":\"Geth/v1.5.4-stable-b70acf3c/darwin/go1.7.3\"}\n");
+                "{\"jsonrpc\":\"2.0\",\"id\":1,"
+                        + "\"result\":\"Geth/v1.5.4-stable-b70acf3c/darwin/go1.7.3\"}\n");
 
         ipcService.send(new Request(), Web3ClientVersion.class);
 

File: src/test/java/org/web3j/protocol/parity/EqualsVerifierParityResponseTest.java
Patch:
@@ -1,14 +1,12 @@
 package org.web3j.protocol.parity;
 
-
 import nl.jqno.equalsverifier.EqualsVerifier;
 import nl.jqno.equalsverifier.Warning;
 import org.junit.Test;
 
 import org.web3j.protocol.parity.methods.response.PersonalAccountsInfo;
 import org.web3j.protocol.parity.methods.response.PersonalRequestsToConfirm;
 
-
 public class EqualsVerifierParityResponseTest {
 
     @Test

File: src/test/java/org/web3j/tx/TransferTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.web3j.tx;
 
-
 import java.io.IOException;
 import java.math.BigDecimal;
 

File: src/test/java/org/web3j/utils/AssertionsTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.web3j.utils;
 
-
 import org.junit.Test;
 
 import static org.web3j.utils.Assertions.verifyPrecondition;

File: src/test/java/org/web3j/utils/AsyncTest.java
Patch:
@@ -1,14 +1,12 @@
 package org.web3j.utils;
 
-
 import java.util.concurrent.ExecutionException;
 
 import org.junit.Test;
 
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertThat;
 
-
 public class AsyncTest {
 
     @Test

File: src/test/java/org/web3j/utils/BytesTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.web3j.utils;
 
-
 import org.junit.Test;
 
 import static org.hamcrest.CoreMatchers.is;

File: src/test/java/org/web3j/utils/CollectionTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.web3j.utils;
 
-
 import java.util.Arrays;
 import java.util.List;
 
@@ -19,7 +18,7 @@ public class CollectionTest {
     @Test
     public void testTail() {
         assertThat(tail(EMPTY_STRING_ARRAY), is(EMPTY_STRING_ARRAY));
-        assertThat(tail(create("a", "b", "c" )), is(create("b", "c")));
+        assertThat(tail(create("a", "b", "c")), is(create("b", "c")));
         assertThat(tail(create("a")), is(EMPTY_STRING_ARRAY));
     }
 
@@ -67,7 +66,7 @@ public void testJoinWithFunction() {
 
 
     /**
-     * Fake object to test {@link Collection#join(List, String, Function)}
+     * Fake object to test {@link Collection#join(List, String, Function)}.
      */
     private final class FakeSpec {
         private final String name;

File: src/test/java/org/web3j/utils/NumericTest.java
Patch:
@@ -20,7 +20,7 @@
 
 public class NumericTest {
 
-    private final byte[] HEX_RANGE_ARRAY = new byte[] {
+    private static final byte[] HEX_RANGE_ARRAY = new byte[] {
             asByte(0x0, 0x1),
             asByte(0x2, 0x3),
             asByte(0x4, 0x5),
@@ -31,7 +31,7 @@ public class NumericTest {
             asByte(0xe, 0xf)
     };
 
-    private String HEX_RANGE_STRING = "0x0123456789abcdef";
+    private static final String HEX_RANGE_STRING = "0x0123456789abcdef";
 
 
     @Test

File: src/test/java/org/web3j/utils/ObservablesTests.java
Patch:
@@ -1,6 +1,5 @@
 package org.web3j.utils;
 
-
 import java.math.BigInteger;
 import java.util.ArrayList;
 import java.util.List;

File: src/test/java/org/web3j/utils/VersionTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.web3j.utils;
 
-
 import java.io.IOException;
 
 import org.junit.Test;

File: src/integration-test/java/org/web3j/protocol/scenarios/HumanStandardTokenGeneratedIT.java
Patch:
@@ -11,6 +11,7 @@
 import org.web3j.generated.HumanStandardToken;
 import org.web3j.protocol.core.methods.response.TransactionReceipt;
 
+import static junit.framework.TestCase.assertTrue;
 import static org.hamcrest.core.IsEqual.equalTo;
 import static org.junit.Assert.assertThat;
 import static org.web3j.generated.HumanStandardToken.ApprovalEventResponse;
@@ -36,6 +37,8 @@ public void testContract() throws Exception {
                 new Uint256(aliceQty), new Utf8String("web3j tokens"),
                 new Uint8(BigInteger.TEN), new Utf8String("w3j$")).get();
 
+        assertTrue(contract.isValid());
+
         assertThat(contract.totalSupply().get(), equalTo(new Uint256(aliceQty)));
 
         assertThat(contract.balanceOf(new Address(ALICE.getAddress())).get(),

File: src/test/java/org/web3j/tx/ManagedTransactionTester.java
Patch:
@@ -8,6 +8,7 @@
 import org.web3j.protocol.Web3j;
 import org.web3j.protocol.core.DefaultBlockParameterName;
 import org.web3j.protocol.core.Request;
+import org.web3j.protocol.core.methods.response.EthGetCode;
 import org.web3j.protocol.core.methods.response.EthGetTransactionCount;
 import org.web3j.protocol.core.methods.response.EthGetTransactionReceipt;
 import org.web3j.protocol.core.methods.response.EthSendTransaction;

File: src/test/java/org/web3j/codegen/SolidityFunctionWrapperTest.java
Patch:
@@ -193,10 +193,10 @@ public void testBuildEventConstantMultipleValueReturn() throws Exception {
                 "        java.util.Arrays.<org.web3j.abi.TypeReference<?>>asList(new org.web3j" +
                 ".abi.TypeReference<org.web3j.abi.datatypes.generated.Uint256>() {}));\n" +
                 "    java.util.List<org.web3j.abi.EventValues> valueList = extractEventParameters" +
-                "(event,transactionReceipt);\n" +
+                "(event, transactionReceipt);\n" +
                 "    java.util.ArrayList<TransferEventResponse> responses = new java.util" +
                 ".ArrayList<TransferEventResponse>(valueList.size());\n" +
-                "    for(org.web3j.abi.EventValues eventValues : valueList) {\n" +
+                "    for (org.web3j.abi.EventValues eventValues : valueList) {\n" +
                 "      TransferEventResponse typedResponse = new TransferEventResponse();\n" +
                 "      typedResponse.from = (org.web3j.abi.datatypes.Address) eventValues" +
                 ".getIndexedValues().get(0);\n" +

File: src/main/java/org/web3j/codegen/AbiTypesGenerator.java
Patch:
@@ -174,6 +174,7 @@ private <T extends Type> void generateBytesTypes(
 
     private void write(String packageName, TypeSpec typeSpec, Path destination) throws IOException {
         JavaFile javaFile = JavaFile.builder(packageName, typeSpec)
+                .indent("    ")
                 .skipJavaLangImports(true)
                 .build();
 

File: src/main/java/org/web3j/codegen/AbiTypesMapperGenerator.java
Patch:
@@ -84,6 +84,7 @@ private void generate(String destinationDir) throws IOException {
 
     private void write(String packageName, TypeSpec typeSpec, Path destination) throws IOException {
         JavaFile javaFile = JavaFile.builder(packageName, typeSpec)
+                .indent("    ")
                 .skipJavaLangImports(true)
                 .build();
 

File: src/main/java/org/web3j/codegen/SolidityFunctionWrapper.java
Patch:
@@ -76,7 +76,7 @@ public void generateJavaFiles(
         TypeSpec.Builder classBuilder = createClassBuilder(className, bin);
 
         classBuilder.addMethod(buildConstructor(Credentials.class, CREDENTIALS));
-        classBuilder.addMethod(buildConstructor(TransactionManager.class, TRANSACTION_MANAGER);
+        classBuilder.addMethod(buildConstructor(TransactionManager.class, TRANSACTION_MANAGER));
         classBuilder.addMethods(buildFunctionDefinitions(className, classBuilder, loadContractDefinition(abi)));
         classBuilder.addMethod(buildLoad(className, Credentials.class, CREDENTIALS));
         classBuilder.addMethod(buildLoad(className, TransactionManager.class, TRANSACTION_MANAGER));

File: src/integration-test/java/org/web3j/protocol/core/ObservableIT.java
Patch:
@@ -21,7 +21,7 @@
  */
 public class ObservableIT {
 
-    private static final int EVENT_COUNT = 5;
+    private static final int EVENT_COUNT = 3;
 
     private Web3j web3j;
 

File: src/integration-test/java/org/web3j/protocol/scenarios/DeployContractIT.java
Patch:
@@ -80,7 +80,8 @@ private String callSmartContractFunction(
         String encodedFunction = FunctionEncoder.encode(function);
 
         org.web3j.protocol.core.methods.response.EthCall response = parity.ethCall(
-                Transaction.createEthCallTransaction(contractAddress, encodedFunction),
+                Transaction.createEthCallTransaction(
+                        ALICE.getAddress(), contractAddress, encodedFunction),
                 DefaultBlockParameterName.LATEST)
                 .sendAsync().get();
 

File: src/integration-test/java/org/web3j/protocol/scenarios/EventFilterIT.java
Patch:
@@ -85,7 +85,7 @@ public void testEventFilter() throws Exception {
 
     private BigInteger estimateGas(String encodedFunction) throws Exception {
         EthEstimateGas ethEstimateGas = parity.ethEstimateGas(
-                Transaction.createEthCallTransaction(null, encodedFunction))
+                Transaction.createEthCallTransaction(ALICE.getAddress(), null, encodedFunction))
                 .sendAsync().get();
         // this was coming back as 50,000,000 which is > the block gas limit of 4,712,388 - see eth.getBlock("latest")
         return ethEstimateGas.getAmountUsed().divide(BigInteger.valueOf(100));

File: src/integration-test/java/org/web3j/protocol/scenarios/GreeterContractIT.java
Patch:
@@ -90,7 +90,8 @@ private String callSmartContractFunction(
         String encodedFunction = FunctionEncoder.encode(function);
 
         org.web3j.protocol.core.methods.response.EthCall response = parity.ethCall(
-                Transaction.createEthCallTransaction(contractAddress, encodedFunction),
+                Transaction.createEthCallTransaction(
+                        ALICE.getAddress(), contractAddress, encodedFunction),
                 DefaultBlockParameterName.LATEST)
                 .sendAsync().get();
 

File: src/integration-test/java/org/web3j/protocol/scenarios/HumanStandardTokenIT.java
Patch:
@@ -296,7 +296,8 @@ private String callSmartContractFunction(
         String encodedFunction = FunctionEncoder.encode(function);
 
         org.web3j.protocol.core.methods.response.EthCall response = parity.ethCall(
-                Transaction.createEthCallTransaction(contractAddress, encodedFunction),
+                Transaction.createEthCallTransaction(
+                        ALICE.getAddress(), contractAddress, encodedFunction),
                 DefaultBlockParameterName.LATEST)
                 .sendAsync().get();
 

File: src/main/java/org/web3j/utils/Async.java
Patch:
@@ -3,8 +3,8 @@
 
 import java.util.concurrent.Callable;
 import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
+import java.util.concurrent.ScheduledExecutorService;
 
 /**
  * Async task facilitation.
@@ -29,7 +29,7 @@ private static int getCpuCount() {
         return Runtime.getRuntime().availableProcessors();
     }
 
-    public static ExecutorService defaultExecutorService() {
-        return Executors.newFixedThreadPool(getCpuCount());
+    public static ScheduledExecutorService defaultExecutorService() {
+        return Executors.newScheduledThreadPool(getCpuCount());
     }
 }

File: src/test/java/org/web3j/protocol/rx/JsonRpc2_0RxTest.java
Patch:
@@ -6,6 +6,7 @@
 import java.util.Arrays;
 import java.util.List;
 import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.Executors;
 import java.util.concurrent.TimeUnit;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
@@ -45,7 +46,7 @@ public class JsonRpc2_0RxTest {
     @Before
     public void setUp() {
         web3jService = mock(Web3jService.class);
-        web3j = Web3j.build(web3jService);
+        web3j = Web3j.build(web3jService, 1000, Executors.newSingleThreadScheduledExecutor());
     }
 
     @Test
@@ -136,7 +137,7 @@ public void testCatchUpToLatestAndSubscribeToNewBlockObservable() throws Excepti
                 throwable -> fail(throwable.getMessage()),
                 () -> completedLatch.countDown());
 
-        transactionLatch.await(5, TimeUnit.SECONDS);
+        transactionLatch.await(1, TimeUnit.SECONDS);
         assertThat(results, equalTo(expected));
 
         subscription.unsubscribe();

File: src/main/java/org/web3j/protocol/core/methods/request/Transaction.java
Patch:
@@ -76,9 +76,9 @@ public static Transaction createFunctionCallTransaction(
         return new Transaction(from, nonce, gasPrice, gasLimit, to, null, data);
     }
 
-    public static Transaction createEthCallTransaction(String to, String data) {
+    public static Transaction createEthCallTransaction(String from, String to, String data) {
 
-        return new Transaction(null, null, null, null, to, null, data);
+        return new Transaction(from, null, null, null, to, null, data);
     }
 
     public String getFrom() {

File: src/main/java/org/web3j/tx/Contract.java
Patch:
@@ -126,7 +126,8 @@ private List<Type> executeCall(
             Function function) throws InterruptedException, ExecutionException {
         String encodedFunction = FunctionEncoder.encode(function);
         org.web3j.protocol.core.methods.response.EthCall ethCall = web3j.ethCall(
-                Transaction.createEthCallTransaction(contractAddress, encodedFunction),
+                Transaction.createEthCallTransaction(
+                        transactionManager.getFromAddress(), contractAddress, encodedFunction),
                 DefaultBlockParameterName.LATEST)
                 .sendAsync().get();
 

File: src/main/java/org/web3j/tx/ManagedTransaction.java
Patch:
@@ -23,7 +23,7 @@ public abstract class ManagedTransaction {
 
     protected Web3j web3j;
 
-    private TransactionManager transactionManager;
+    protected TransactionManager transactionManager;
 
     protected ManagedTransaction(Web3j web3j, TransactionManager transactionManager) {
         this.transactionManager = transactionManager;

File: src/test/java/org/web3j/rlp/RlpEncoderTest.java
Patch:
@@ -67,6 +67,7 @@ public void testEncode() {
         assertThat(RlpEncoder.encode(RlpString.create(BigInteger.ZERO)),
                 is(new byte[]{ (byte) 0x80 }));
 
+        // https://github.com/paritytech/parity/blob/master/util/rlp/tests/tests.rs#L239
         assertThat(RlpEncoder.encode(RlpString.create(new byte[] { 0 })),
                 is(new byte[]{ (byte) 0x00 }));
     }

File: src/test/java/org/web3j/tx/ContractTest.java
Patch:
@@ -51,7 +51,7 @@ public class ContractTest extends ManagedTransactionTester {
     private TestContract contract;
 
     @Before
-    public void setUp() {
+    public void setUp() throws Exception {
         super.setUp();
 
         contract = new TestContract(

File: src/main/java/org/web3j/protocol/rx/Web3jRx.java
Patch:
@@ -69,6 +69,8 @@ public interface Web3jRx {
      *
      * @param startBlockNumber block number to commence with
      * @param endBlockNumber block number to finish with
+     * @param fullTransactionObjects if true, provides transactions embedded in blocks, otherwise
+     *                               transaction hashes
      * @return Observable to emit these blocks
      */
     Observable<EthBlock> replayBlocksObservable(
@@ -121,7 +123,7 @@ Observable<EthBlock> catchUpToLatestAndSubscribeToNewBlocksObservable(
      * As per {@link #catchUpToLatestAndSubscribeToNewBlocksObservable(BigInteger, boolean)},
      * except that all transactions contained within the blocks are emitted.
      *
-     * @param startBlockNumber
+     * @param startBlockNumber the block number we wish to request from
      * @return Observable to emit all requested transactions and future
      */
     Observable<Transaction> catchUpToLatestAndSubscribeToNewTransactionsObservable(

File: src/main/java/org/web3j/utils/Observables.java
Patch:
@@ -12,8 +12,8 @@ public class Observables {
     /**
      * Simple Observable implementation to emit a range of BigInteger values.
      *
-     * @param startValue
-     * @param endValue
+     * @param startValue first value to emit in range
+     * @param endValue final value to emit in range
      * @return Observable to omit this range of values
      */
     public static Observable<BigInteger> range(BigInteger startValue, BigInteger endValue) {

File: src/main/java/org/web3j/codegen/SolidityFunctionWrapperGenerator.java
Patch:
@@ -298,8 +298,8 @@ private static MethodSpec buildConstructor(Class authType, String authName) {
                 .addParameter(authType, authName)
                 .addParameter(BigInteger.class, GAS_PRICE)
                 .addParameter(BigInteger.class, GAS_LIMIT)
-                .addStatement("super($N, $N, $N, $N, $N)",
-                        CONTRACT_ADDRESS, WEB3J, authName, GAS_PRICE, GAS_LIMIT)
+                .addStatement("super($N, $N, $N, $N, $N, $N)",
+                        BINARY, CONTRACT_ADDRESS, WEB3J, authName, GAS_PRICE, GAS_LIMIT)
                 .build();
     }
 

File: src/main/java/org/web3j/protocol/core/filters/BlockFilter.java
Patch:
@@ -1,5 +1,6 @@
 package org.web3j.protocol.core.filters;
 
+import java.io.IOException;
 import java.util.List;
 import java.util.concurrent.ExecutionException;
 
@@ -17,8 +18,8 @@ public BlockFilter(Web3j web3j, Callback<String> callback) {
     }
 
     @Override
-    EthFilter sendRequest() throws ExecutionException, InterruptedException {
-        return web3j.ethNewBlockFilter().sendAsync().get();
+    EthFilter sendRequest() throws IOException {
+        return web3j.ethNewBlockFilter().send();
     }
 
     @Override

File: src/main/java/org/web3j/protocol/core/filters/LogFilter.java
Patch:
@@ -1,5 +1,6 @@
 package org.web3j.protocol.core.filters;
 
+import java.io.IOException;
 import java.util.List;
 import java.util.concurrent.ExecutionException;
 
@@ -23,8 +24,8 @@ public LogFilter(
     }
 
     @Override
-    EthFilter sendRequest() throws ExecutionException, InterruptedException {
-        return web3j.ethNewFilter(ethFilter).sendAsync().get();
+    EthFilter sendRequest() throws IOException {
+        return web3j.ethNewFilter(ethFilter).send();
     }
 
     @Override

File: src/main/java/org/web3j/protocol/core/filters/PendingTransactionFilter.java
Patch:
@@ -1,5 +1,6 @@
 package org.web3j.protocol.core.filters;
 
+import java.io.IOException;
 import java.util.List;
 import java.util.concurrent.ExecutionException;
 
@@ -17,8 +18,8 @@ public PendingTransactionFilter(Web3j web3j, Callback<String> callback) {
     }
 
     @Override
-    EthFilter sendRequest() throws ExecutionException, InterruptedException {
-        return web3j.ethNewPendingTransactionFilter().sendAsync().get();
+    EthFilter sendRequest() throws IOException {
+        return web3j.ethNewPendingTransactionFilter().send();
     }
 
     @Override

File: src/main/java/org/web3j/tx/ClientTransactionManager.java
Patch:
@@ -1,5 +1,6 @@
 package org.web3j.tx;
 
+import java.io.IOException;
 import java.math.BigInteger;
 import java.util.concurrent.ExecutionException;
 
@@ -36,13 +37,13 @@ public ClientTransactionManager(
     public EthSendTransaction sendTransaction(
             BigInteger gasPrice, BigInteger gasLimit, String to,
             String data, BigInteger value)
-            throws ExecutionException, InterruptedException, TransactionTimeoutException {
+            throws IOException {
 
         Transaction transaction = new Transaction(
                 fromAddress, null, gasPrice, gasLimit, to, value, data);
 
         return web3j.ethSendTransaction(transaction)
-                .sendAsync().get();
+                .send();
     }
 
     @Override

File: src/main/java/org/web3j/tx/FastRawTransactionManager.java
Patch:
@@ -1,5 +1,6 @@
 package org.web3j.tx;
 
+import java.io.IOException;
 import java.math.BigInteger;
 import java.util.concurrent.ExecutionException;
 
@@ -23,7 +24,7 @@ public FastRawTransactionManager(Web3j web3j, Credentials credentials) {
     }
 
     @Override
-    synchronized BigInteger getNonce() throws InterruptedException, ExecutionException {
+    synchronized BigInteger getNonce() throws IOException {
         if (nonce.signum() == -1) {
             nonce = super.getNonce();
         } else {
@@ -36,7 +37,7 @@ public BigInteger getCurrentNonce() {
         return nonce;
     }
 
-    public synchronized void resetNonce() throws InterruptedException, ExecutionException {
+    public synchronized void resetNonce() throws IOException {
         nonce = super.getNonce();
     }
 

File: src/integration-test/java/org/web3j/generated/Arrays.java
Patch:
@@ -21,10 +21,10 @@
  * <strong>Do not modify!</strong><br>
  * Please use {@link org.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
  *
- * <p>Generated with web3j version 2.0.0.
+ * <p>Generated with web3j version 2.0.1.
  */
 public final class Arrays extends Contract {
-    private static final String BINARY = "60606040526101f5806100126000396000f3606060405260e060020a6000350463b96f54d18114610029578063beda363b146100bc575b610002565b34610002576040805161014081810190925261018191600491610144918390600a90839083908082843750909550505050505061014060405190810160405280600a905b600081526020019060019003908161006d5750600a905060005b818110156101ee5783816001018303600a8110156100025760200201518382600a811015610002576020020152600101610087565b3461000257604080516020600480358082013583810280860185019096528085526101a49592946024949093928501928291850190849080828437509496505050505050506040805160208101825260008082528351925191929182908059106101235750595b90808252806020026020018201604052801561013a575b509250600090505b818110156101ee578381600101830381518110156100025790602001906020020151838281518110156100025760209081029091010152600101610142565b60405180826101408083818460006004602df15090500191505060405180910390f35b60405180806020018281038252838181518152602001915080519060200190602002808383829060006004602084601f0104600302600f01f1509050019250505060405180910390f35b505091905056";
+    private static final String BINARY = "6060604052341561000c57fe5b5b61028c8061001c6000396000f300606060405263ffffffff60e060020a600035041663b96f54d1811461002c578063beda363b146100a6575bfe5b341561003457fe5b6040805161014081810190925261006891600491610144918390600a90839083908082843750939550610154945050505050565b60405180826101408083835b80518252602083111561009457601f199092019160209182019101610074565b50505090500191505060405180910390f35b34156100ae57fe5b6100f96004808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437509496506101a295505050505050565b6040805160208082528351818301528351919283929083019185810191028083838215610141575b80518252602083111561014157601f199092019160209182019101610121565b5050509050019250505060405180910390f35b61015c610225565b600a60005b8181101561019a578360001982840301600a811061017b57fe5b60200201518382600a811061018c57fe5b60200201525b600101610161565b5b5050919050565b6101aa61024e565b815160405160009082908059106101be5750595b908082528060200260200182016040525b509250600090505b8181101561019a57838160010183038151811015156101f257fe5b90602001906020020151838281518110151561020a57fe5b602090810290910101525b6001016101d7565b5b5050919050565b61014060405190810160405280600a905b60008152602001906001900390816102365790505090565b604080516020810190915260008152905600a165627a7a7230582055320d18bbf364dc41bf0b6885a12ec739cacc25a300af31a3105b09ee5151d80029";
 
     private Arrays(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
         super(contractAddress, web3j, credentials, gasPrice, gasLimit);

File: src/integration-test/java/org/web3j/generated/Fibonacci.java
Patch:
@@ -31,10 +31,10 @@
  * <strong>Do not modify!</strong><br>
  * Please use {@link org.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
  *
- * <p>Generated with web3j version 2.0.0.
+ * <p>Generated with web3j version 2.0.1.
  */
 public final class Fibonacci extends Contract {
-    private static final String BINARY = "606060405260d18060106000396000f3606060405260e060020a60003504633c7fdc708114602657806361047ff4146044575b6002565b34600257605160043560006063825b600081151560a75750600060a2565b3460025760516004356035565b60408051918252519081900360200190f35b604080518481526020810183905281519293507f71e71a8458267085d5ab16980fd5f114d2d37f232479c245d523ce8d23ca40ed929081900390910190a15b919050565b816001141560b65750600160a2565b60c0600283036035565b60ca600184036035565b01905060a256";
+    private static final String BINARY = "6060604052341561000c57fe5b5b6101278061001c6000396000f300606060405263ffffffff60e060020a6000350416633c7fdc708114602a57806361047ff414604c575bfe5b3415603157fe5b603a600435606e565b60408051918252519081900360200190f35b3415605357fe5b603a60043560bb565b60408051918252519081900360200190f35b600060778260bb565b604080518481526020810183905281519293507f71e71a8458267085d5ab16980fd5f114d2d37f232479c245d523ce8d23ca40ed929081900390910190a15b919050565b600081151560ca5750600060b6565b816001141560d95750600160b6565b60e36002830360bb565b60ed6001840360bb565b01905060b6565b5b5b9190505600a165627a7a72305820ab11641de769d11f19354d7b1109fd73cd4e799ccf7eeb83192400c110e3dc950029";
 
     private Fibonacci(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
         super(contractAddress, web3j, credentials, gasPrice, gasLimit);

File: src/integration-test/java/org/web3j/generated/Greeter.java
Patch:
@@ -21,10 +21,10 @@
  * <strong>Do not modify!</strong><br>
  * Please use {@link org.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
  *
- * <p>Generated with web3j version 2.0.0.
+ * <p>Generated with web3j version 2.0.1.
  */
 public final class Greeter extends Contract {
-    private static final String BINARY = "606060405260405161026938038061026983398101604052805101600080546c0100000000000000000000000033810204600160a060020a03199091161790558060016000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1060b357805160ff19168380011785555b5060a29291505b8082111560e057600081556001016090565b505050610185806100e46000396000f35b828001600101855582156089579182015b82811115608957825182600050559160200191906001019060c4565b509056606060405260e060020a600035046341c0e1b58114610029578063cfae321714610070575b610002565b34610002576100de6000543373ffffffffffffffffffffffffffffffffffffffff9081169116141561014e5760005473ffffffffffffffffffffffffffffffffffffffff16ff5b3461000257604080516020808201835260008252600180548451600282841615610100026000190190921691909104601f81018490048402820184019095528481526100e094909283018282801561017b5780601f106101505761010080835404028352916020019161017b565b005b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156101405780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b565b820191906000526020600020905b81548152906001019060200180831161015e57829003601f168201915b505050505090509056";
+    private static final String BINARY = "6060604052341561000c57fe5b6040516102f03803806102f0833981016040528051015b5b60008054600160a060020a03191633600160a060020a03161790555b805161005390600190602084019061005b565b505b506100fb565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061009c57805160ff19168380011785556100c9565b828001600101855582156100c9579182015b828111156100c95782518255916020019190600101906100ae565b5b506100d69291506100da565b5090565b6100f891905b808211156100d657600081556001016100e0565b5090565b90565b6101e68061010a6000396000f300606060405263ffffffff60e060020a60003504166341c0e1b5811461002c578063cfae32171461003e575bfe5b341561003457fe5b61003c6100ce565b005b341561004657fe5b61004e610110565b604080516020808252835181830152835191928392908301918501908083838215610094575b80518252602083111561009457601f199092019160209182019101610074565b505050905090810190601f1680156100c05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000543373ffffffffffffffffffffffffffffffffffffffff9081169116141561010d5760005473ffffffffffffffffffffffffffffffffffffffff16ff5b5b565b6101186101a8565b60018054604080516020600284861615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561019d5780601f106101725761010080835404028352916020019161019d565b820191906000526020600020905b81548152906001019060200180831161018057829003601f168201915b505050505090505b90565b604080516020810190915260008152905600a165627a7a72305820141d86fec5655546a8ea51f05c2df449092e6e94a88e09d4214fdf5836d7b56e0029";
 
     private Greeter(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
         super(contractAddress, web3j, credentials, gasPrice, gasLimit);

File: src/integration-test/java/org/web3j/generated/HumanStandardToken.java
Patch:
@@ -36,10 +36,10 @@
  * <strong>Do not modify!</strong><br>
  * Please use {@link org.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
  *
- * <p>Generated with web3j version 2.0.0.
+ * <p>Generated with web3j version 2.0.1.
  */
 public final class HumanStandardToken extends Contract {
-    private static final String BINARY = "60a060405260046060527f48302e31000000000000000000000000000000000000000000000000000000006080526006805460008290527f48302e310000000000000000000000000000000000000000000000000000000882556100b5907ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f602060026001841615610100026000190190931692909204601f01919091048101905b8082111561018b57600081556001016100a1565b50506040516109ab3803806109ab83398101604052808051906020019091908051820191906020018051906020019091908051820191906020015050600160a060020a033316600090815260016020818152604083208790558683558551600380549481905293601f60026000196101009684161596909602959095019091169390930483018290047fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90810193919290919088019083901061018f57805160ff19168380011785555b506101bf9291506100a1565b5090565b8280016001018555821561017f579182015b8281111561017f5782518260005055916020019190600101906101a1565b50506004805460ff191683179055805160058054600082905290917f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0602060026101006001861615026000190190941693909304601f90810184900482019386019083901061024157805160ff19168380011785555b506102719291506100a1565b82800160010185558215610235579182015b82811115610235578251826000505591602001919060010190610253565b505050505050610726806102856000396000f36060604052361561008d5760e060020a600035046306fdde03811461009a578063095ea7b3146100ff57806318160ddd1461017857806323b872dd14610186578063313ce5671461028157806354fd4d501461029257806370a08231146102f757806395d89b411461032a578063a9059cbb1461038f578063cae9ca511461043a578063dd62ed3e14610605575b346100025761063e610002565b346100025761064060038054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281529291908301828280156107035780601f106106d857610100808354040283529160200191610703565b34610002576106ae600435602435600160a060020a03338116600081815260026020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b346100025761031860005481565b34610002576106ae600435602435604435600160a060020a0383166000908152600160205260408120548290108015906101e75750600160a060020a0380851660009081526002602090815260408083203390941683529290522054829010155b80156101f35750600082115b1561070b57600160a060020a03808416600081815260016020908152604080832080548801905588851680845281842080548990039055600283528184203390961684529482529182902080548790039055815186815291519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600161070f565b34610002576106c260045460ff1681565b346100025761064060068054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281529291908301828280156107035780601f106106d857610100808354040283529160200191610703565b3461000257600160a060020a03600435166000908152600160205260409020545b60408051918252519081900360200190f35b346100025761064060058054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281529291908301828280156107035780601f106106d857610100808354040283529160200191610703565b34610002576106ae600435602435600160a060020a0333166000908152600160205260408120548290108015906103c65750600082115b1561071657600160a060020a03338116600081815260016020908152604080832080548890039055938716808352918490208054870190558351868152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3506001610172565b3461000257604080516020600460443581810135601f81018490048402850184019095528484526106ae948235946024803595606494929391909201918190840183828082843750949650505050505050600160a060020a03338116600081815260026020908152604080832094881680845294825280832087905580518781529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a383600160a060020a031660405180807f72656365697665417070726f76616c28616464726573732c75696e743235362c81526020017f616464726573732c627974657329000000000000000000000000000000000000815260200150602e019050604051809103902060e060020a9004338530866040518560e060020a0281526004018085600160a060020a0316815260200184815260200183600160a060020a031681526020018280519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156105dd5780820380516001836020036101000a031916815260200191505b509450505050506000604051808303816000876161da5a03f192505050151561071e57610002565b3461000257610318600435602435600160a060020a03808316600090815260026020908152604080832093851683529290522054610172565b005b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156106a05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b604080519115158252519081900360200190f35b6040805160ff9092168252519081900360200190f35b820191906000526020600020905b8154815290600101906020018083116106e657829003601f168201915b505050505081565b5060005b9392505050565b506000610172565b50600161070f56";
+    private static final String BINARY = "60a0604052600460608190527f48302e3100000000000000000000000000000000000000000000000000000000608090815261003e91600691906100d7565b50341561004757fe5b604051610b8f380380610b8f833981016040908152815160208301519183015160608401519193928301929091015b600160a060020a033316600090815260016020908152604082208690559085905583516100a991600391908601906100d7565b506004805460ff191660ff841617905580516100cc9060059060208401906100d7565b505b50505050610177565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011857805160ff1916838001178555610145565b82800160010185558215610145579182015b8281111561014557825182559160200191906001019061012a565b5b50610152929150610156565b5090565b61017491905b80821115610152576000815560010161015c565b5090565b90565b610a09806101866000396000f300606060405236156100935763ffffffff60e060020a60003504166306fdde0381146100a9578063095ea7b31461013957806318160ddd1461016c57806323b872dd1461018e578063313ce567146101c757806354fd4d50146101ed57806370a082311461027d57806395d89b41146102ab578063a9059cbb1461033b578063cae9ca511461036e578063dd62ed3e146103e5575b341561009b57fe5b6100a75b60006000fd5b565b005b34156100b157fe5b6100b9610419565b6040805160208082528351818301528351919283929083019185019080838382156100ff575b8051825260208311156100ff57601f1990920191602091820191016100df565b505050905090810190601f16801561012b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561014157fe5b610158600160a060020a03600435166024356104a7565b604080519115158252519081900360200190f35b341561017457fe5b61017c610512565b60408051918252519081900360200190f35b341561019657fe5b610158600160a060020a0360043581169060243516604435610518565b604080519115158252519081900360200190f35b34156101cf57fe5b6101d761060e565b6040805160ff9092168252519081900360200190f35b34156101f557fe5b6100b9610617565b6040805160208082528351818301528351919283929083019185019080838382156100ff575b8051825260208311156100ff57601f1990920191602091820191016100df565b505050905090810190601f16801561012b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561028557fe5b61017c600160a060020a03600435166106a5565b60408051918252519081900360200190f35b34156102b357fe5b6100b96106c4565b6040805160208082528351818301528351919283929083019185019080838382156100ff575b8051825260208311156100ff57601f1990920191602091820191016100df565b505050905090810190601f16801561012b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561034357fe5b610158600160a060020a0360043516602435610752565b604080519115158252519081900360200190f35b341561037657fe5b604080516020600460443581810135601f8101849004840285018401909552848452610158948235600160a060020a03169460248035956064949293919092019181908401838280828437509496506107fe95505050505050565b604080519115158252519081900360200190f35b34156103ed57fe5b61017c600160a060020a03600435811690602435166109b0565b60408051918252519081900360200190f35b6003805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561049f5780601f106104745761010080835404028352916020019161049f565b820191906000526020600020905b81548152906001019060200180831161048257829003601f168201915b505050505081565b600160a060020a03338116600081815260026020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b60005481565b600160a060020a0383166000908152600160205260408120548290108015906105685750600160a060020a0380851660009081526002602090815260408083203390941683529290522054829010155b80156105745750600082115b1561060257600160a060020a03808416600081815260016020908152604080832080548801905588851680845281842080548990039055600283528184203390961684529482529182902080548790039055815186815291519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3506001610606565b5060005b5b9392505050565b60045460ff1681565b6006805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561049f5780601f106104745761010080835404028352916020019161049f565b820191906000526020600020905b81548152906001019060200180831161048257829003601f168201915b505050505081565b600160a060020a0381166000908152600160205260409020545b919050565b6005805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561049f5780601f106104745761010080835404028352916020019161049f565b820191906000526020600020905b81548152906001019060200180831161048257829003601f168201915b505050505081565b600160a060020a03331660009081526001602052604081205482901080159061077b5750600082115b156107ef57600160a060020a03338116600081815260016020908152604080832080548890039055938716808352918490208054870190558351868152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a350600161050c565b50600061050c565b5b92915050565b600160a060020a03338116600081815260026020908152604080832094881680845294825280832087905580518781529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a383600160a060020a031660405180807f72656365697665417070726f76616c28616464726573732c75696e743235362c81526020017f616464726573732c627974657329000000000000000000000000000000000000815250602e019050604051809103902060e060020a9004338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a03168152602001828051906020019080838360008314610950575b80518252602083111561095057601f199092019160209182019101610930565b505050905090810190601f16801561097c5780820380516001836020036101000a031916815260200191505b509450505050506000604051808303816000876161da5a03f19250505015156109a55760006000fd5b5060015b9392505050565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b929150505600a165627a7a723058201db20700bbf339c090ff66a3bf5b648a5b8a928c5d2b6bb42da35d08c415a83a0029";
 
     private HumanStandardToken(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
         super(contractAddress, web3j, credentials, gasPrice, gasLimit);

File: src/integration-test/java/org/web3j/generated/ShipIt.java
Patch:
@@ -23,10 +23,10 @@
  * <strong>Do not modify!</strong><br>
  * Please use {@link org.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
  *
- * <p>Generated with web3j version 2.0.0.
+ * <p>Generated with web3j version 2.0.1.
  */
 public final class ShipIt extends Contract {
-    private static final String BINARY = "606060405261015c806100126000396000f3606060405260e060020a6000350463d51cd4ac811461001e575b610002565b3461000257600060208190526004803582526040909120805460018201546002830154600384015494840154600585015460078601546100869773ffffffffffffffffffffffffffffffffffffffff96871697969095169593949360ff909316926006019088565b6040805173ffffffffffffffffffffffffffffffffffffffff808b16825289166020820152908101879052606081018690526080810185905260a0810184905260e0810182905261010060c082018181528454600260018216158402600019019091160491830182905290610120830190859080156101465780601f1061011b57610100808354040283529160200191610146565b820191906000526020600020905b81548152906001019060200180831161012957829003601f168201915b5050995050505050505050505060405180910390f3";
+    private static final String BINARY = "6060604052341561000c57fe5b5b6101968061001c6000396000f300606060405263ffffffff60e060020a600035041663d51cd4ac8114610021575bfe5b341561002957fe5b61003d600160a060020a0360043516610118565b60408051600160a060020a03808b16825289166020820152908101879052606081018690526080810185600081111561007257fe5b60ff168152602081018590526060810183905260808282038101604083019081528554600260001960018316156101000201909116049183018290529160a00190859080156101025780601f106100d757610100808354040283529160200191610102565b820191906000526020600020905b8154815290600101906020018083116100e557829003601f168201915b5050995050505050505050505060405180910390f35b60006020819052908152604090208054600182015460028301546003840154600485015460058601546007870154600160a060020a039687169796909516959394929360ff90921692909160060190885600a165627a7a723058201e285ed5a311302c7e3870a6bebc9464c5677d294265aeb7d1aa6b37b9c5a7dc0029";
 
     private ShipIt(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
         super(contractAddress, web3j, credentials, gasPrice, gasLimit);

File: src/main/java/org/web3j/console/ConsoleDevice.java
Patch:
@@ -21,6 +21,6 @@ public String readLine(String fmt, Object... args) {
 
     @Override
     public char[] readPassword(String fmt, Object... args) {
-        return console.readPassword();
+        return console.readPassword(fmt, args);
     }
 }

File: src/main/java/org/web3j/abi/TypeEncoder.java
Patch:
@@ -85,7 +85,7 @@ private static byte getPaddingValue(NumericType numericType) {
     private static byte[] toByteArray(NumericType numericType) {
         BigInteger value = numericType.getValue();
         if (numericType instanceof Ufixed || numericType instanceof Uint) {
-            if (value.bitCount() == MAX_BIT_LENGTH) {
+            if (value.bitLength() == MAX_BIT_LENGTH) {
                 // As BigInteger is signed, if we have a 256 bit value, the resultant byte array will
                 // contain a sign byte in it's MSB, which we should ignore for this unsigned integer type.
                 byte[] byteArray = new byte[MAX_BYTE_LENGTH];

File: src/main/java/org/web3j/abi/datatypes/IntType.java
Patch:
@@ -27,6 +27,6 @@ static boolean isValidBitSize(int bitSize) {
     }
 
     private static boolean isValidBitCount(int bitSize, BigInteger value) {
-        return value.bitCount() <= bitSize;
+        return value.bitLength() <= bitSize;
     }
 }

File: src/main/java/org/web3j/abi/datatypes/IntType.java
Patch:
@@ -27,6 +27,6 @@ static boolean isValidBitSize(int bitSize) {
     }
 
     private static boolean isValidBitCount(int bitSize, BigInteger value) {
-        return value.bitCount() <= bitSize;
+        return value.bitLength() <= bitSize;
     }
 }

File: src/main/java/org/web3j/abi/TypeEncoder.java
Patch:
@@ -85,7 +85,7 @@ private static byte getPaddingValue(NumericType numericType) {
     private static byte[] toByteArray(NumericType numericType) {
         BigInteger value = numericType.getValue();
         if (numericType instanceof Ufixed || numericType instanceof Uint) {
-            if (value.bitCount() == MAX_BIT_LENGTH) {
+            if (value.bitLength() == MAX_BIT_LENGTH) {
                 // As BigInteger is signed, if we have a 256 bit value, the resultant byte array will
                 // contain a sign byte in it's MSB, which we should ignore for this unsigned integer type.
                 byte[] byteArray = new byte[MAX_BYTE_LENGTH];

File: src/main/java/org/web3j/tx/Contract.java
Patch:
@@ -38,7 +38,7 @@ public abstract class Contract extends ManagedTransaction {
     private String contractAddress;
     private final BigInteger gasPrice;
     private final BigInteger gasLimit;
-    private Optional<TransactionReceipt> transactionReceipt;
+    private TransactionReceipt transactionReceipt;
 
     protected Contract(String contractAddress, Web3j web3j, TransactionManager transactionManager,
                        BigInteger gasPrice, BigInteger gasLimit) {
@@ -64,7 +64,7 @@ public String getContractAddress() {
     }
 
     public void setTransactionReceipt(TransactionReceipt transactionReceipt) {
-        this.transactionReceipt = Optional.of(transactionReceipt);
+        this.transactionReceipt = transactionReceipt;
     }
 
     /**
@@ -75,7 +75,7 @@ public void setTransactionReceipt(TransactionReceipt transactionReceipt) {
      * @return the TransactionReceipt generated at contract deployment
      */
     public Optional<TransactionReceipt> getTransactionReceipt() {
-        return transactionReceipt;
+        return Optional.ofNullable(transactionReceipt);
     }
 
     /**

File: src/main/java/org/web3j/tx/Contract.java
Patch:
@@ -211,7 +211,8 @@ protected static <T extends Contract> T deploy(
                 BigInteger.class, BigInteger.class);
         constructor.setAccessible(true);
 
-        T contract = constructor.newInstance("", web3j, transactionManager, gasPrice, gasLimit);
+        // we want to use null here to ensure that "to" parameter on message is not populated
+        T contract = constructor.newInstance(null, web3j, transactionManager, gasPrice, gasLimit);
         TransactionReceipt transactionReceipt =
                 contract.executeTransaction(binary + encodedConstructor, value);
 

File: src/integration-test/java/org/web3j/generated/Fibonacci.java
Patch:
@@ -45,7 +45,7 @@ private Fibonacci(String contractAddress, Web3j web3j, TransactionManager transa
     }
 
     public List<NotifyEventResponse> getNotifyEvents(TransactionReceipt transactionReceipt) {
-        final Event event = new Event("notify", 
+        final Event event = new Event("Notify", 
                 Arrays.<TypeReference<?>>asList(),
                 Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
         List<EventValues> valueList = extractEventParameters(event,transactionReceipt);
@@ -60,7 +60,7 @@ public List<NotifyEventResponse> getNotifyEvents(TransactionReceipt transactionR
     }
 
     public Observable<NotifyEventResponse> notifyEventObservable() {
-        final Event event = new Event("notify", 
+        final Event event = new Event("Notify", 
                 Arrays.<TypeReference<?>>asList(),
                 Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
         EthFilter filter = new EthFilter(DefaultBlockParameterName.EARLIEST,DefaultBlockParameterName.LATEST, getContractAddress());

File: src/main/java/org/web3j/codegen/SolidityFunctionWrapperGenerator.java
Patch:
@@ -520,7 +520,8 @@ static MethodSpec buildEventObservableFunction(String responseClassName,
                                                    List<NamedTypeName> nonIndexedParameters)
             throws ClassNotFoundException {
 
-        String generatedFunctionName = functionName + "EventObservable";
+        String generatedFunctionName =
+                Strings.lowercaseFirstLetter(functionName) + "EventObservable";
         ParameterizedTypeName parameterizedTypeName = ParameterizedTypeName.get(ClassName.get(rx
                 .Observable.class), ClassName.get("", responseClassName));
 
@@ -602,7 +603,7 @@ static void buildEventFunctions(
             AbiDefinition functionDefinition,
             TypeSpec.Builder classBuilder) throws ClassNotFoundException {
 
-        String functionName = Strings.lowercaseFirstLetter(functionDefinition.getName());
+        String functionName = functionDefinition.getName();
         List<AbiDefinition.NamedType> inputs = functionDefinition.getInputs();
         String responseClassName = Strings.capitaliseFirstLetter(functionName) + "EventResponse";
 

File: src/test/java/org/web3j/codegen/SolidityFunctionWrapperGeneratorTest.java
Patch:
@@ -188,7 +188,7 @@ public void testBuildEventConstantMultipleValueReturn() throws Exception {
         AbiDefinition functionDefinition = new AbiDefinition(
                 false,
                 Arrays.asList(fromAddress, toAddress, value),
-                "transfer",
+                "Transfer",
                 new ArrayList<>(),
                 "event",
                 false);
@@ -201,7 +201,7 @@ public void testBuildEventConstantMultipleValueReturn() throws Exception {
                 "  public java.util.List<TransferEventResponse> getTransferEvents(org.web3j" +
                 ".protocol.core.methods.response.TransactionReceipt transactionReceipt) {\n" +
                 "    final org.web3j.abi.datatypes.Event event = new org.web3j.abi.datatypes.Event" +
-                "(\"transfer\", \n" +
+                "(\"Transfer\", \n" +
                 "        java.util.Arrays.<org.web3j.abi.TypeReference<?>>asList(new org.web3j" +
                 ".abi.TypeReference<org.web3j.abi.datatypes.Address>() {}, new org.web3j.abi" +
                 ".TypeReference<org.web3j.abi.datatypes.Address>() {}),\n" +
@@ -226,7 +226,7 @@ public void testBuildEventConstantMultipleValueReturn() throws Exception {
                 "\n" +
                 "  public rx.Observable<TransferEventResponse> transferEventObservable() {\n" +
                 "    final org.web3j.abi.datatypes.Event event = new org.web3j.abi.datatypes.Event" +
-                "(\"transfer\", \n" +
+                "(\"Transfer\", \n" +
                 "        java.util.Arrays.<org.web3j.abi.TypeReference<?>>asList(new org.web3j" +
                 ".abi.TypeReference<org.web3j.abi.datatypes.Address>() {}, new org.web3j.abi" +
                 ".TypeReference<org.web3j.abi.datatypes.Address>() {}),\n" +

File: src/main/java/org/web3j/console/KeyImporter.java
Patch:
@@ -73,7 +73,7 @@ private void createWalletFile(String privateKey) {
 
         try {
             String walletFileName = WalletUtils.generateWalletFile(
-                    password, credentials.getEcKeyPair(), destination);
+                    password, credentials.getEcKeyPair(), destination, true);
             console.printf("Wallet file " + walletFileName +
                     " successfully created in: " + destinationDir + "\n");
         } catch (CipherException | IOException e) {

File: src/main/java/org/web3j/console/WalletCreator.java
Patch:
@@ -36,7 +36,7 @@ private void run() {
         File destination = createDir(destinationDir);
 
         try {
-            String walletFileName = WalletUtils.generateNewWalletFile(password, destination);
+            String walletFileName = WalletUtils.generateFullNewWalletFile(password, destination);
             console.printf("Wallet file " + walletFileName +
                     " successfully created in: " + destinationDir + "\n");
         } catch (CipherException|IOException|InvalidAlgorithmParameterException|

File: src/main/java/org/web3j/console/WalletUpdater.java
Patch:
@@ -46,7 +46,7 @@ private void run(String walletFileLocation) {
 
         try {
             String walletFileName = WalletUtils.generateWalletFile(
-                    newPassword, credentials.getEcKeyPair(), destination);
+                    newPassword, credentials.getEcKeyPair(), destination, true);
             console.printf("New wallet file " + walletFileName +
                     " successfully created in: " + destinationDir + "\n");
         } catch (CipherException|IOException e) {

File: src/main/java/org/web3j/rlp/RlpString.java
Patch:
@@ -3,6 +3,8 @@
 import java.math.BigInteger;
 import java.util.Arrays;
 
+import org.web3j.utils.Bytes;
+
 /**
  * RLP string type.
  */
@@ -20,7 +22,7 @@ public byte[] getBytes() {
     }
 
     public static RlpString create(byte[] value) {
-        return new RlpString(value);
+        return new RlpString(Bytes.trimLeadingZeroes(value));
     }
 
     public static RlpString create(byte value) {

File: src/test/java/org/web3j/rlp/RlpEncoderTest.java
Patch:
@@ -29,6 +29,9 @@ public void testEncode() {
         assertThat(RlpEncoder.encode(RlpString.create(new byte[] {})),
                 is(new byte[]{ (byte) 0x80 }));
 
+        assertThat(RlpEncoder.encode(RlpString.create(new byte[]{ 0, 'a', 0 })),
+                is(new byte[]{ (byte) 0x82, 'a', 0 }));
+
         assertThat(RlpEncoder.encode(new RlpList()),
                 is(new byte[]{ (byte) 0xc0 }));
 

File: src/main/java/org/web3j/abi/datatypes/Bool.java
Patch:
@@ -6,6 +6,7 @@
 public class Bool implements Type<Boolean> {
 
     public static final String TYPE_NAME = "bool";
+    public static final Bool DEFAULT = new Bool(false);
 
     private boolean value;
 

File: src/main/java/org/web3j/abi/datatypes/DynamicBytes.java
Patch:
@@ -6,6 +6,7 @@
 public class DynamicBytes extends BytesType {
 
     public static final String TYPE_NAME = "bytes";
+    public static final DynamicBytes DEFAULT = new DynamicBytes(new byte[]{});
 
     public DynamicBytes(byte[] value) {
         super(value, TYPE_NAME);

File: src/main/java/org/web3j/abi/datatypes/Fixed.java
Patch:
@@ -8,6 +8,7 @@
 public class Fixed extends FixedPointType {
 
     public static final String TYPE_NAME = "fixed";
+    public static final Fixed DEFAULT = new Fixed(BigInteger.ZERO);
 
     protected Fixed(int mBitSize, int nBitSize, BigInteger value) {
         super(TYPE_NAME , mBitSize, nBitSize, value);

File: src/main/java/org/web3j/abi/datatypes/Int.java
Patch:
@@ -8,6 +8,7 @@
 public class Int extends IntType {
 
     public static final String TYPE_NAME = "int";
+    public static final Int DEFAULT = new Int(BigInteger.ZERO);
 
     public Int(BigInteger value) {
         // "int" values should be declared as int256 in computing function selectors

File: src/main/java/org/web3j/abi/datatypes/Ufixed.java
Patch:
@@ -8,6 +8,7 @@
 public class Ufixed extends FixedPointType {
 
     public static final String TYPE_NAME = "ufixed";
+    public static final Ufixed DEFAULT = new Ufixed(BigInteger.ZERO);
 
     protected Ufixed(int mBitSize, int nBitSize, BigInteger value) {
         super(TYPE_NAME, mBitSize, nBitSize, value);

File: src/main/java/org/web3j/abi/datatypes/Uint.java
Patch:
@@ -8,6 +8,7 @@
 public class Uint extends IntType {
 
     public static final String TYPE_NAME = "uint";
+    public static final Uint DEFAULT = new Uint(BigInteger.ZERO);
 
     /**
      * This constructor is required by the {@link Address} type.

File: src/main/java/org/web3j/abi/datatypes/Utf8String.java
Patch:
@@ -6,6 +6,7 @@
 public class Utf8String implements Type<String> {
 
     public static final String TYPE_NAME = "string";
+    public static final Utf8String DEFAULT = new Utf8String("");
 
     private String value;
 

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes1.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes1 extends Bytes {
+  public static final Bytes1 DEFAULT = new Bytes1(new byte[1]);
+
   public Bytes1(byte[] value) {
     super(1, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes10.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes10 extends Bytes {
+  public static final Bytes10 DEFAULT = new Bytes10(new byte[10]);
+
   public Bytes10(byte[] value) {
     super(10, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes11.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes11 extends Bytes {
+  public static final Bytes11 DEFAULT = new Bytes11(new byte[11]);
+
   public Bytes11(byte[] value) {
     super(11, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes12.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes12 extends Bytes {
+  public static final Bytes12 DEFAULT = new Bytes12(new byte[12]);
+
   public Bytes12(byte[] value) {
     super(12, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes13.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes13 extends Bytes {
+  public static final Bytes13 DEFAULT = new Bytes13(new byte[13]);
+
   public Bytes13(byte[] value) {
     super(13, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes14.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes14 extends Bytes {
+  public static final Bytes14 DEFAULT = new Bytes14(new byte[14]);
+
   public Bytes14(byte[] value) {
     super(14, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes15.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes15 extends Bytes {
+  public static final Bytes15 DEFAULT = new Bytes15(new byte[15]);
+
   public Bytes15(byte[] value) {
     super(15, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes16.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes16 extends Bytes {
+  public static final Bytes16 DEFAULT = new Bytes16(new byte[16]);
+
   public Bytes16(byte[] value) {
     super(16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes17.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes17 extends Bytes {
+  public static final Bytes17 DEFAULT = new Bytes17(new byte[17]);
+
   public Bytes17(byte[] value) {
     super(17, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes18.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes18 extends Bytes {
+  public static final Bytes18 DEFAULT = new Bytes18(new byte[18]);
+
   public Bytes18(byte[] value) {
     super(18, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes19.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes19 extends Bytes {
+  public static final Bytes19 DEFAULT = new Bytes19(new byte[19]);
+
   public Bytes19(byte[] value) {
     super(19, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes2.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes2 extends Bytes {
+  public static final Bytes2 DEFAULT = new Bytes2(new byte[2]);
+
   public Bytes2(byte[] value) {
     super(2, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes20.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes20 extends Bytes {
+  public static final Bytes20 DEFAULT = new Bytes20(new byte[20]);
+
   public Bytes20(byte[] value) {
     super(20, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes21.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes21 extends Bytes {
+  public static final Bytes21 DEFAULT = new Bytes21(new byte[21]);
+
   public Bytes21(byte[] value) {
     super(21, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes22.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes22 extends Bytes {
+  public static final Bytes22 DEFAULT = new Bytes22(new byte[22]);
+
   public Bytes22(byte[] value) {
     super(22, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes23.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes23 extends Bytes {
+  public static final Bytes23 DEFAULT = new Bytes23(new byte[23]);
+
   public Bytes23(byte[] value) {
     super(23, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes24.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes24 extends Bytes {
+  public static final Bytes24 DEFAULT = new Bytes24(new byte[24]);
+
   public Bytes24(byte[] value) {
     super(24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes25.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes25 extends Bytes {
+  public static final Bytes25 DEFAULT = new Bytes25(new byte[25]);
+
   public Bytes25(byte[] value) {
     super(25, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes26.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes26 extends Bytes {
+  public static final Bytes26 DEFAULT = new Bytes26(new byte[26]);
+
   public Bytes26(byte[] value) {
     super(26, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes27.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes27 extends Bytes {
+  public static final Bytes27 DEFAULT = new Bytes27(new byte[27]);
+
   public Bytes27(byte[] value) {
     super(27, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes28.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes28 extends Bytes {
+  public static final Bytes28 DEFAULT = new Bytes28(new byte[28]);
+
   public Bytes28(byte[] value) {
     super(28, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes29.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes29 extends Bytes {
+  public static final Bytes29 DEFAULT = new Bytes29(new byte[29]);
+
   public Bytes29(byte[] value) {
     super(29, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes3.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes3 extends Bytes {
+  public static final Bytes3 DEFAULT = new Bytes3(new byte[3]);
+
   public Bytes3(byte[] value) {
     super(3, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes30.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes30 extends Bytes {
+  public static final Bytes30 DEFAULT = new Bytes30(new byte[30]);
+
   public Bytes30(byte[] value) {
     super(30, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes31.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes31 extends Bytes {
+  public static final Bytes31 DEFAULT = new Bytes31(new byte[31]);
+
   public Bytes31(byte[] value) {
     super(31, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes32.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes32 extends Bytes {
+  public static final Bytes32 DEFAULT = new Bytes32(new byte[32]);
+
   public Bytes32(byte[] value) {
     super(32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes4.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes4 extends Bytes {
+  public static final Bytes4 DEFAULT = new Bytes4(new byte[4]);
+
   public Bytes4(byte[] value) {
     super(4, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes5.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes5 extends Bytes {
+  public static final Bytes5 DEFAULT = new Bytes5(new byte[5]);
+
   public Bytes5(byte[] value) {
     super(5, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes6.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes6 extends Bytes {
+  public static final Bytes6 DEFAULT = new Bytes6(new byte[6]);
+
   public Bytes6(byte[] value) {
     super(6, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes7.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes7 extends Bytes {
+  public static final Bytes7 DEFAULT = new Bytes7(new byte[7]);
+
   public Bytes7(byte[] value) {
     super(7, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes8.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes8 extends Bytes {
+  public static final Bytes8 DEFAULT = new Bytes8(new byte[8]);
+
   public Bytes8(byte[] value) {
     super(8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes9.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes9 extends Bytes {
+  public static final Bytes9 DEFAULT = new Bytes9(new byte[9]);
+
   public Bytes9(byte[] value) {
     super(9, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x104.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x104 extends Fixed {
+  public static final Fixed104x104 DEFAULT = new Fixed104x104(BigInteger.ZERO);
+
   public Fixed104x104(BigInteger value) {
     super(104, 104, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x112.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x112 extends Fixed {
+  public static final Fixed104x112 DEFAULT = new Fixed104x112(BigInteger.ZERO);
+
   public Fixed104x112(BigInteger value) {
     super(104, 112, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x120.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x120 extends Fixed {
+  public static final Fixed104x120 DEFAULT = new Fixed104x120(BigInteger.ZERO);
+
   public Fixed104x120(BigInteger value) {
     super(104, 120, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x128.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x128 extends Fixed {
+  public static final Fixed104x128 DEFAULT = new Fixed104x128(BigInteger.ZERO);
+
   public Fixed104x128(BigInteger value) {
     super(104, 128, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x136.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x136 extends Fixed {
+  public static final Fixed104x136 DEFAULT = new Fixed104x136(BigInteger.ZERO);
+
   public Fixed104x136(BigInteger value) {
     super(104, 136, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x144.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x144 extends Fixed {
+  public static final Fixed104x144 DEFAULT = new Fixed104x144(BigInteger.ZERO);
+
   public Fixed104x144(BigInteger value) {
     super(104, 144, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x152.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x152 extends Fixed {
+  public static final Fixed104x152 DEFAULT = new Fixed104x152(BigInteger.ZERO);
+
   public Fixed104x152(BigInteger value) {
     super(104, 152, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x16 extends Fixed {
+  public static final Fixed104x16 DEFAULT = new Fixed104x16(BigInteger.ZERO);
+
   public Fixed104x16(BigInteger value) {
     super(104, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x24 extends Fixed {
+  public static final Fixed104x24 DEFAULT = new Fixed104x24(BigInteger.ZERO);
+
   public Fixed104x24(BigInteger value) {
     super(104, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x32.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x32 extends Fixed {
+  public static final Fixed104x32 DEFAULT = new Fixed104x32(BigInteger.ZERO);
+
   public Fixed104x32(BigInteger value) {
     super(104, 32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x40.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x40 extends Fixed {
+  public static final Fixed104x40 DEFAULT = new Fixed104x40(BigInteger.ZERO);
+
   public Fixed104x40(BigInteger value) {
     super(104, 40, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x48.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x48 extends Fixed {
+  public static final Fixed104x48 DEFAULT = new Fixed104x48(BigInteger.ZERO);
+
   public Fixed104x48(BigInteger value) {
     super(104, 48, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x56.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x56 extends Fixed {
+  public static final Fixed104x56 DEFAULT = new Fixed104x56(BigInteger.ZERO);
+
   public Fixed104x56(BigInteger value) {
     super(104, 56, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x64.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x64 extends Fixed {
+  public static final Fixed104x64 DEFAULT = new Fixed104x64(BigInteger.ZERO);
+
   public Fixed104x64(BigInteger value) {
     super(104, 64, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x72.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x72 extends Fixed {
+  public static final Fixed104x72 DEFAULT = new Fixed104x72(BigInteger.ZERO);
+
   public Fixed104x72(BigInteger value) {
     super(104, 72, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x8 extends Fixed {
+  public static final Fixed104x8 DEFAULT = new Fixed104x8(BigInteger.ZERO);
+
   public Fixed104x8(BigInteger value) {
     super(104, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x80.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x80 extends Fixed {
+  public static final Fixed104x80 DEFAULT = new Fixed104x80(BigInteger.ZERO);
+
   public Fixed104x80(BigInteger value) {
     super(104, 80, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x88.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x88 extends Fixed {
+  public static final Fixed104x88 DEFAULT = new Fixed104x88(BigInteger.ZERO);
+
   public Fixed104x88(BigInteger value) {
     super(104, 88, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x96.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x96 extends Fixed {
+  public static final Fixed104x96 DEFAULT = new Fixed104x96(BigInteger.ZERO);
+
   public Fixed104x96(BigInteger value) {
     super(104, 96, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed112x104.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed112x104 extends Fixed {
+  public static final Fixed112x104 DEFAULT = new Fixed112x104(BigInteger.ZERO);
+
   public Fixed112x104(BigInteger value) {
     super(112, 104, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed112x112.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed112x112 extends Fixed {
+  public static final Fixed112x112 DEFAULT = new Fixed112x112(BigInteger.ZERO);
+
   public Fixed112x112(BigInteger value) {
     super(112, 112, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed112x120.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed112x120 extends Fixed {
+  public static final Fixed112x120 DEFAULT = new Fixed112x120(BigInteger.ZERO);
+
   public Fixed112x120(BigInteger value) {
     super(112, 120, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed112x128.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed112x128 extends Fixed {
+  public static final Fixed112x128 DEFAULT = new Fixed112x128(BigInteger.ZERO);
+
   public Fixed112x128(BigInteger value) {
     super(112, 128, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed112x136.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed112x136 extends Fixed {
+  public static final Fixed112x136 DEFAULT = new Fixed112x136(BigInteger.ZERO);
+
   public Fixed112x136(BigInteger value) {
     super(112, 136, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed112x144.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed112x144 extends Fixed {
+  public static final Fixed112x144 DEFAULT = new Fixed112x144(BigInteger.ZERO);
+
   public Fixed112x144(BigInteger value) {
     super(112, 144, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed112x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed112x16 extends Fixed {
+  public static final Fixed112x16 DEFAULT = new Fixed112x16(BigInteger.ZERO);
+
   public Fixed112x16(BigInteger value) {
     super(112, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed112x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed112x24 extends Fixed {
+  public static final Fixed112x24 DEFAULT = new Fixed112x24(BigInteger.ZERO);
+
   public Fixed112x24(BigInteger value) {
     super(112, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed112x32.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed112x32 extends Fixed {
+  public static final Fixed112x32 DEFAULT = new Fixed112x32(BigInteger.ZERO);
+
   public Fixed112x32(BigInteger value) {
     super(112, 32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed112x40.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed112x40 extends Fixed {
+  public static final Fixed112x40 DEFAULT = new Fixed112x40(BigInteger.ZERO);
+
   public Fixed112x40(BigInteger value) {
     super(112, 40, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed112x48.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed112x48 extends Fixed {
+  public static final Fixed112x48 DEFAULT = new Fixed112x48(BigInteger.ZERO);
+
   public Fixed112x48(BigInteger value) {
     super(112, 48, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed112x56.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed112x56 extends Fixed {
+  public static final Fixed112x56 DEFAULT = new Fixed112x56(BigInteger.ZERO);
+
   public Fixed112x56(BigInteger value) {
     super(112, 56, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed112x64.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed112x64 extends Fixed {
+  public static final Fixed112x64 DEFAULT = new Fixed112x64(BigInteger.ZERO);
+
   public Fixed112x64(BigInteger value) {
     super(112, 64, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed112x72.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed112x72 extends Fixed {
+  public static final Fixed112x72 DEFAULT = new Fixed112x72(BigInteger.ZERO);
+
   public Fixed112x72(BigInteger value) {
     super(112, 72, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed112x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed112x8 extends Fixed {
+  public static final Fixed112x8 DEFAULT = new Fixed112x8(BigInteger.ZERO);
+
   public Fixed112x8(BigInteger value) {
     super(112, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed112x80.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed112x80 extends Fixed {
+  public static final Fixed112x80 DEFAULT = new Fixed112x80(BigInteger.ZERO);
+
   public Fixed112x80(BigInteger value) {
     super(112, 80, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed112x88.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed112x88 extends Fixed {
+  public static final Fixed112x88 DEFAULT = new Fixed112x88(BigInteger.ZERO);
+
   public Fixed112x88(BigInteger value) {
     super(112, 88, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed112x96.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed112x96 extends Fixed {
+  public static final Fixed112x96 DEFAULT = new Fixed112x96(BigInteger.ZERO);
+
   public Fixed112x96(BigInteger value) {
     super(112, 96, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed120x104.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed120x104 extends Fixed {
+  public static final Fixed120x104 DEFAULT = new Fixed120x104(BigInteger.ZERO);
+
   public Fixed120x104(BigInteger value) {
     super(120, 104, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed120x112.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed120x112 extends Fixed {
+  public static final Fixed120x112 DEFAULT = new Fixed120x112(BigInteger.ZERO);
+
   public Fixed120x112(BigInteger value) {
     super(120, 112, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed120x120.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed120x120 extends Fixed {
+  public static final Fixed120x120 DEFAULT = new Fixed120x120(BigInteger.ZERO);
+
   public Fixed120x120(BigInteger value) {
     super(120, 120, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed120x128.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed120x128 extends Fixed {
+  public static final Fixed120x128 DEFAULT = new Fixed120x128(BigInteger.ZERO);
+
   public Fixed120x128(BigInteger value) {
     super(120, 128, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed120x136.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed120x136 extends Fixed {
+  public static final Fixed120x136 DEFAULT = new Fixed120x136(BigInteger.ZERO);
+
   public Fixed120x136(BigInteger value) {
     super(120, 136, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed120x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed120x16 extends Fixed {
+  public static final Fixed120x16 DEFAULT = new Fixed120x16(BigInteger.ZERO);
+
   public Fixed120x16(BigInteger value) {
     super(120, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed120x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed120x24 extends Fixed {
+  public static final Fixed120x24 DEFAULT = new Fixed120x24(BigInteger.ZERO);
+
   public Fixed120x24(BigInteger value) {
     super(120, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed120x32.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed120x32 extends Fixed {
+  public static final Fixed120x32 DEFAULT = new Fixed120x32(BigInteger.ZERO);
+
   public Fixed120x32(BigInteger value) {
     super(120, 32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed120x40.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed120x40 extends Fixed {
+  public static final Fixed120x40 DEFAULT = new Fixed120x40(BigInteger.ZERO);
+
   public Fixed120x40(BigInteger value) {
     super(120, 40, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed120x48.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed120x48 extends Fixed {
+  public static final Fixed120x48 DEFAULT = new Fixed120x48(BigInteger.ZERO);
+
   public Fixed120x48(BigInteger value) {
     super(120, 48, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed120x56.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed120x56 extends Fixed {
+  public static final Fixed120x56 DEFAULT = new Fixed120x56(BigInteger.ZERO);
+
   public Fixed120x56(BigInteger value) {
     super(120, 56, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed120x64.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed120x64 extends Fixed {
+  public static final Fixed120x64 DEFAULT = new Fixed120x64(BigInteger.ZERO);
+
   public Fixed120x64(BigInteger value) {
     super(120, 64, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed120x72.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed120x72 extends Fixed {
+  public static final Fixed120x72 DEFAULT = new Fixed120x72(BigInteger.ZERO);
+
   public Fixed120x72(BigInteger value) {
     super(120, 72, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed120x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed120x8 extends Fixed {
+  public static final Fixed120x8 DEFAULT = new Fixed120x8(BigInteger.ZERO);
+
   public Fixed120x8(BigInteger value) {
     super(120, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed120x80.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed120x80 extends Fixed {
+  public static final Fixed120x80 DEFAULT = new Fixed120x80(BigInteger.ZERO);
+
   public Fixed120x80(BigInteger value) {
     super(120, 80, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed120x88.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed120x88 extends Fixed {
+  public static final Fixed120x88 DEFAULT = new Fixed120x88(BigInteger.ZERO);
+
   public Fixed120x88(BigInteger value) {
     super(120, 88, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed120x96.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed120x96 extends Fixed {
+  public static final Fixed120x96 DEFAULT = new Fixed120x96(BigInteger.ZERO);
+
   public Fixed120x96(BigInteger value) {
     super(120, 96, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed128x104.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed128x104 extends Fixed {
+  public static final Fixed128x104 DEFAULT = new Fixed128x104(BigInteger.ZERO);
+
   public Fixed128x104(BigInteger value) {
     super(128, 104, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed128x112.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed128x112 extends Fixed {
+  public static final Fixed128x112 DEFAULT = new Fixed128x112(BigInteger.ZERO);
+
   public Fixed128x112(BigInteger value) {
     super(128, 112, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed128x120.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed128x120 extends Fixed {
+  public static final Fixed128x120 DEFAULT = new Fixed128x120(BigInteger.ZERO);
+
   public Fixed128x120(BigInteger value) {
     super(128, 120, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed128x128.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed128x128 extends Fixed {
+  public static final Fixed128x128 DEFAULT = new Fixed128x128(BigInteger.ZERO);
+
   public Fixed128x128(BigInteger value) {
     super(128, 128, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed128x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed128x16 extends Fixed {
+  public static final Fixed128x16 DEFAULT = new Fixed128x16(BigInteger.ZERO);
+
   public Fixed128x16(BigInteger value) {
     super(128, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed128x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed128x24 extends Fixed {
+  public static final Fixed128x24 DEFAULT = new Fixed128x24(BigInteger.ZERO);
+
   public Fixed128x24(BigInteger value) {
     super(128, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed128x32.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed128x32 extends Fixed {
+  public static final Fixed128x32 DEFAULT = new Fixed128x32(BigInteger.ZERO);
+
   public Fixed128x32(BigInteger value) {
     super(128, 32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed128x40.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed128x40 extends Fixed {
+  public static final Fixed128x40 DEFAULT = new Fixed128x40(BigInteger.ZERO);
+
   public Fixed128x40(BigInteger value) {
     super(128, 40, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed128x48.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed128x48 extends Fixed {
+  public static final Fixed128x48 DEFAULT = new Fixed128x48(BigInteger.ZERO);
+
   public Fixed128x48(BigInteger value) {
     super(128, 48, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed128x56.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed128x56 extends Fixed {
+  public static final Fixed128x56 DEFAULT = new Fixed128x56(BigInteger.ZERO);
+
   public Fixed128x56(BigInteger value) {
     super(128, 56, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed128x64.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed128x64 extends Fixed {
+  public static final Fixed128x64 DEFAULT = new Fixed128x64(BigInteger.ZERO);
+
   public Fixed128x64(BigInteger value) {
     super(128, 64, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed128x72.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed128x72 extends Fixed {
+  public static final Fixed128x72 DEFAULT = new Fixed128x72(BigInteger.ZERO);
+
   public Fixed128x72(BigInteger value) {
     super(128, 72, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed128x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed128x8 extends Fixed {
+  public static final Fixed128x8 DEFAULT = new Fixed128x8(BigInteger.ZERO);
+
   public Fixed128x8(BigInteger value) {
     super(128, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed128x80.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed128x80 extends Fixed {
+  public static final Fixed128x80 DEFAULT = new Fixed128x80(BigInteger.ZERO);
+
   public Fixed128x80(BigInteger value) {
     super(128, 80, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed128x88.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed128x88 extends Fixed {
+  public static final Fixed128x88 DEFAULT = new Fixed128x88(BigInteger.ZERO);
+
   public Fixed128x88(BigInteger value) {
     super(128, 88, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed128x96.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed128x96 extends Fixed {
+  public static final Fixed128x96 DEFAULT = new Fixed128x96(BigInteger.ZERO);
+
   public Fixed128x96(BigInteger value) {
     super(128, 96, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed136x104.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed136x104 extends Fixed {
+  public static final Fixed136x104 DEFAULT = new Fixed136x104(BigInteger.ZERO);
+
   public Fixed136x104(BigInteger value) {
     super(136, 104, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed136x112.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed136x112 extends Fixed {
+  public static final Fixed136x112 DEFAULT = new Fixed136x112(BigInteger.ZERO);
+
   public Fixed136x112(BigInteger value) {
     super(136, 112, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed136x120.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed136x120 extends Fixed {
+  public static final Fixed136x120 DEFAULT = new Fixed136x120(BigInteger.ZERO);
+
   public Fixed136x120(BigInteger value) {
     super(136, 120, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed136x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed136x16 extends Fixed {
+  public static final Fixed136x16 DEFAULT = new Fixed136x16(BigInteger.ZERO);
+
   public Fixed136x16(BigInteger value) {
     super(136, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed136x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed136x24 extends Fixed {
+  public static final Fixed136x24 DEFAULT = new Fixed136x24(BigInteger.ZERO);
+
   public Fixed136x24(BigInteger value) {
     super(136, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed136x32.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed136x32 extends Fixed {
+  public static final Fixed136x32 DEFAULT = new Fixed136x32(BigInteger.ZERO);
+
   public Fixed136x32(BigInteger value) {
     super(136, 32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed136x40.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed136x40 extends Fixed {
+  public static final Fixed136x40 DEFAULT = new Fixed136x40(BigInteger.ZERO);
+
   public Fixed136x40(BigInteger value) {
     super(136, 40, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed136x48.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed136x48 extends Fixed {
+  public static final Fixed136x48 DEFAULT = new Fixed136x48(BigInteger.ZERO);
+
   public Fixed136x48(BigInteger value) {
     super(136, 48, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed136x56.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed136x56 extends Fixed {
+  public static final Fixed136x56 DEFAULT = new Fixed136x56(BigInteger.ZERO);
+
   public Fixed136x56(BigInteger value) {
     super(136, 56, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed136x64.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed136x64 extends Fixed {
+  public static final Fixed136x64 DEFAULT = new Fixed136x64(BigInteger.ZERO);
+
   public Fixed136x64(BigInteger value) {
     super(136, 64, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed136x72.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed136x72 extends Fixed {
+  public static final Fixed136x72 DEFAULT = new Fixed136x72(BigInteger.ZERO);
+
   public Fixed136x72(BigInteger value) {
     super(136, 72, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed136x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed136x8 extends Fixed {
+  public static final Fixed136x8 DEFAULT = new Fixed136x8(BigInteger.ZERO);
+
   public Fixed136x8(BigInteger value) {
     super(136, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed136x80.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed136x80 extends Fixed {
+  public static final Fixed136x80 DEFAULT = new Fixed136x80(BigInteger.ZERO);
+
   public Fixed136x80(BigInteger value) {
     super(136, 80, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed136x88.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed136x88 extends Fixed {
+  public static final Fixed136x88 DEFAULT = new Fixed136x88(BigInteger.ZERO);
+
   public Fixed136x88(BigInteger value) {
     super(136, 88, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed136x96.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed136x96 extends Fixed {
+  public static final Fixed136x96 DEFAULT = new Fixed136x96(BigInteger.ZERO);
+
   public Fixed136x96(BigInteger value) {
     super(136, 96, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed144x104.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed144x104 extends Fixed {
+  public static final Fixed144x104 DEFAULT = new Fixed144x104(BigInteger.ZERO);
+
   public Fixed144x104(BigInteger value) {
     super(144, 104, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed144x112.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed144x112 extends Fixed {
+  public static final Fixed144x112 DEFAULT = new Fixed144x112(BigInteger.ZERO);
+
   public Fixed144x112(BigInteger value) {
     super(144, 112, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed144x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed144x16 extends Fixed {
+  public static final Fixed144x16 DEFAULT = new Fixed144x16(BigInteger.ZERO);
+
   public Fixed144x16(BigInteger value) {
     super(144, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed144x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed144x24 extends Fixed {
+  public static final Fixed144x24 DEFAULT = new Fixed144x24(BigInteger.ZERO);
+
   public Fixed144x24(BigInteger value) {
     super(144, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed144x32.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed144x32 extends Fixed {
+  public static final Fixed144x32 DEFAULT = new Fixed144x32(BigInteger.ZERO);
+
   public Fixed144x32(BigInteger value) {
     super(144, 32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed144x40.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed144x40 extends Fixed {
+  public static final Fixed144x40 DEFAULT = new Fixed144x40(BigInteger.ZERO);
+
   public Fixed144x40(BigInteger value) {
     super(144, 40, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed144x48.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed144x48 extends Fixed {
+  public static final Fixed144x48 DEFAULT = new Fixed144x48(BigInteger.ZERO);
+
   public Fixed144x48(BigInteger value) {
     super(144, 48, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed144x56.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed144x56 extends Fixed {
+  public static final Fixed144x56 DEFAULT = new Fixed144x56(BigInteger.ZERO);
+
   public Fixed144x56(BigInteger value) {
     super(144, 56, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed144x64.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed144x64 extends Fixed {
+  public static final Fixed144x64 DEFAULT = new Fixed144x64(BigInteger.ZERO);
+
   public Fixed144x64(BigInteger value) {
     super(144, 64, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed144x72.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed144x72 extends Fixed {
+  public static final Fixed144x72 DEFAULT = new Fixed144x72(BigInteger.ZERO);
+
   public Fixed144x72(BigInteger value) {
     super(144, 72, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed144x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed144x8 extends Fixed {
+  public static final Fixed144x8 DEFAULT = new Fixed144x8(BigInteger.ZERO);
+
   public Fixed144x8(BigInteger value) {
     super(144, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed144x80.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed144x80 extends Fixed {
+  public static final Fixed144x80 DEFAULT = new Fixed144x80(BigInteger.ZERO);
+
   public Fixed144x80(BigInteger value) {
     super(144, 80, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed144x88.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed144x88 extends Fixed {
+  public static final Fixed144x88 DEFAULT = new Fixed144x88(BigInteger.ZERO);
+
   public Fixed144x88(BigInteger value) {
     super(144, 88, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed144x96.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed144x96 extends Fixed {
+  public static final Fixed144x96 DEFAULT = new Fixed144x96(BigInteger.ZERO);
+
   public Fixed144x96(BigInteger value) {
     super(144, 96, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed152x104.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed152x104 extends Fixed {
+  public static final Fixed152x104 DEFAULT = new Fixed152x104(BigInteger.ZERO);
+
   public Fixed152x104(BigInteger value) {
     super(152, 104, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed152x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed152x16 extends Fixed {
+  public static final Fixed152x16 DEFAULT = new Fixed152x16(BigInteger.ZERO);
+
   public Fixed152x16(BigInteger value) {
     super(152, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed152x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed152x24 extends Fixed {
+  public static final Fixed152x24 DEFAULT = new Fixed152x24(BigInteger.ZERO);
+
   public Fixed152x24(BigInteger value) {
     super(152, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed152x32.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed152x32 extends Fixed {
+  public static final Fixed152x32 DEFAULT = new Fixed152x32(BigInteger.ZERO);
+
   public Fixed152x32(BigInteger value) {
     super(152, 32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed152x40.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed152x40 extends Fixed {
+  public static final Fixed152x40 DEFAULT = new Fixed152x40(BigInteger.ZERO);
+
   public Fixed152x40(BigInteger value) {
     super(152, 40, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed152x48.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed152x48 extends Fixed {
+  public static final Fixed152x48 DEFAULT = new Fixed152x48(BigInteger.ZERO);
+
   public Fixed152x48(BigInteger value) {
     super(152, 48, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed152x56.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed152x56 extends Fixed {
+  public static final Fixed152x56 DEFAULT = new Fixed152x56(BigInteger.ZERO);
+
   public Fixed152x56(BigInteger value) {
     super(152, 56, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed152x64.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed152x64 extends Fixed {
+  public static final Fixed152x64 DEFAULT = new Fixed152x64(BigInteger.ZERO);
+
   public Fixed152x64(BigInteger value) {
     super(152, 64, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed152x72.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed152x72 extends Fixed {
+  public static final Fixed152x72 DEFAULT = new Fixed152x72(BigInteger.ZERO);
+
   public Fixed152x72(BigInteger value) {
     super(152, 72, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed152x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed152x8 extends Fixed {
+  public static final Fixed152x8 DEFAULT = new Fixed152x8(BigInteger.ZERO);
+
   public Fixed152x8(BigInteger value) {
     super(152, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed152x80.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed152x80 extends Fixed {
+  public static final Fixed152x80 DEFAULT = new Fixed152x80(BigInteger.ZERO);
+
   public Fixed152x80(BigInteger value) {
     super(152, 80, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed152x88.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed152x88 extends Fixed {
+  public static final Fixed152x88 DEFAULT = new Fixed152x88(BigInteger.ZERO);
+
   public Fixed152x88(BigInteger value) {
     super(152, 88, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed152x96.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed152x96 extends Fixed {
+  public static final Fixed152x96 DEFAULT = new Fixed152x96(BigInteger.ZERO);
+
   public Fixed152x96(BigInteger value) {
     super(152, 96, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed160x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed160x16 extends Fixed {
+  public static final Fixed160x16 DEFAULT = new Fixed160x16(BigInteger.ZERO);
+
   public Fixed160x16(BigInteger value) {
     super(160, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed160x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed160x24 extends Fixed {
+  public static final Fixed160x24 DEFAULT = new Fixed160x24(BigInteger.ZERO);
+
   public Fixed160x24(BigInteger value) {
     super(160, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed160x32.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed160x32 extends Fixed {
+  public static final Fixed160x32 DEFAULT = new Fixed160x32(BigInteger.ZERO);
+
   public Fixed160x32(BigInteger value) {
     super(160, 32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed160x40.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed160x40 extends Fixed {
+  public static final Fixed160x40 DEFAULT = new Fixed160x40(BigInteger.ZERO);
+
   public Fixed160x40(BigInteger value) {
     super(160, 40, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed160x48.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed160x48 extends Fixed {
+  public static final Fixed160x48 DEFAULT = new Fixed160x48(BigInteger.ZERO);
+
   public Fixed160x48(BigInteger value) {
     super(160, 48, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed160x56.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed160x56 extends Fixed {
+  public static final Fixed160x56 DEFAULT = new Fixed160x56(BigInteger.ZERO);
+
   public Fixed160x56(BigInteger value) {
     super(160, 56, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed160x64.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed160x64 extends Fixed {
+  public static final Fixed160x64 DEFAULT = new Fixed160x64(BigInteger.ZERO);
+
   public Fixed160x64(BigInteger value) {
     super(160, 64, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed160x72.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed160x72 extends Fixed {
+  public static final Fixed160x72 DEFAULT = new Fixed160x72(BigInteger.ZERO);
+
   public Fixed160x72(BigInteger value) {
     super(160, 72, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed160x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed160x8 extends Fixed {
+  public static final Fixed160x8 DEFAULT = new Fixed160x8(BigInteger.ZERO);
+
   public Fixed160x8(BigInteger value) {
     super(160, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed160x80.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed160x80 extends Fixed {
+  public static final Fixed160x80 DEFAULT = new Fixed160x80(BigInteger.ZERO);
+
   public Fixed160x80(BigInteger value) {
     super(160, 80, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed160x88.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed160x88 extends Fixed {
+  public static final Fixed160x88 DEFAULT = new Fixed160x88(BigInteger.ZERO);
+
   public Fixed160x88(BigInteger value) {
     super(160, 88, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed160x96.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed160x96 extends Fixed {
+  public static final Fixed160x96 DEFAULT = new Fixed160x96(BigInteger.ZERO);
+
   public Fixed160x96(BigInteger value) {
     super(160, 96, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed168x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed168x16 extends Fixed {
+  public static final Fixed168x16 DEFAULT = new Fixed168x16(BigInteger.ZERO);
+
   public Fixed168x16(BigInteger value) {
     super(168, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed168x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed168x24 extends Fixed {
+  public static final Fixed168x24 DEFAULT = new Fixed168x24(BigInteger.ZERO);
+
   public Fixed168x24(BigInteger value) {
     super(168, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed168x32.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed168x32 extends Fixed {
+  public static final Fixed168x32 DEFAULT = new Fixed168x32(BigInteger.ZERO);
+
   public Fixed168x32(BigInteger value) {
     super(168, 32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed168x40.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed168x40 extends Fixed {
+  public static final Fixed168x40 DEFAULT = new Fixed168x40(BigInteger.ZERO);
+
   public Fixed168x40(BigInteger value) {
     super(168, 40, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed168x48.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed168x48 extends Fixed {
+  public static final Fixed168x48 DEFAULT = new Fixed168x48(BigInteger.ZERO);
+
   public Fixed168x48(BigInteger value) {
     super(168, 48, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed168x56.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed168x56 extends Fixed {
+  public static final Fixed168x56 DEFAULT = new Fixed168x56(BigInteger.ZERO);
+
   public Fixed168x56(BigInteger value) {
     super(168, 56, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed168x64.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed168x64 extends Fixed {
+  public static final Fixed168x64 DEFAULT = new Fixed168x64(BigInteger.ZERO);
+
   public Fixed168x64(BigInteger value) {
     super(168, 64, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed168x72.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed168x72 extends Fixed {
+  public static final Fixed168x72 DEFAULT = new Fixed168x72(BigInteger.ZERO);
+
   public Fixed168x72(BigInteger value) {
     super(168, 72, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed168x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed168x8 extends Fixed {
+  public static final Fixed168x8 DEFAULT = new Fixed168x8(BigInteger.ZERO);
+
   public Fixed168x8(BigInteger value) {
     super(168, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed168x80.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed168x80 extends Fixed {
+  public static final Fixed168x80 DEFAULT = new Fixed168x80(BigInteger.ZERO);
+
   public Fixed168x80(BigInteger value) {
     super(168, 80, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed168x88.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed168x88 extends Fixed {
+  public static final Fixed168x88 DEFAULT = new Fixed168x88(BigInteger.ZERO);
+
   public Fixed168x88(BigInteger value) {
     super(168, 88, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x104.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x104 extends Fixed {
+  public static final Fixed16x104 DEFAULT = new Fixed16x104(BigInteger.ZERO);
+
   public Fixed16x104(BigInteger value) {
     super(16, 104, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x112.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x112 extends Fixed {
+  public static final Fixed16x112 DEFAULT = new Fixed16x112(BigInteger.ZERO);
+
   public Fixed16x112(BigInteger value) {
     super(16, 112, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x120.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x120 extends Fixed {
+  public static final Fixed16x120 DEFAULT = new Fixed16x120(BigInteger.ZERO);
+
   public Fixed16x120(BigInteger value) {
     super(16, 120, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x128.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x128 extends Fixed {
+  public static final Fixed16x128 DEFAULT = new Fixed16x128(BigInteger.ZERO);
+
   public Fixed16x128(BigInteger value) {
     super(16, 128, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x136.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x136 extends Fixed {
+  public static final Fixed16x136 DEFAULT = new Fixed16x136(BigInteger.ZERO);
+
   public Fixed16x136(BigInteger value) {
     super(16, 136, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x144.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x144 extends Fixed {
+  public static final Fixed16x144 DEFAULT = new Fixed16x144(BigInteger.ZERO);
+
   public Fixed16x144(BigInteger value) {
     super(16, 144, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x152.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x152 extends Fixed {
+  public static final Fixed16x152 DEFAULT = new Fixed16x152(BigInteger.ZERO);
+
   public Fixed16x152(BigInteger value) {
     super(16, 152, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x16 extends Fixed {
+  public static final Fixed16x16 DEFAULT = new Fixed16x16(BigInteger.ZERO);
+
   public Fixed16x16(BigInteger value) {
     super(16, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x160.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x160 extends Fixed {
+  public static final Fixed16x160 DEFAULT = new Fixed16x160(BigInteger.ZERO);
+
   public Fixed16x160(BigInteger value) {
     super(16, 160, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x168.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x168 extends Fixed {
+  public static final Fixed16x168 DEFAULT = new Fixed16x168(BigInteger.ZERO);
+
   public Fixed16x168(BigInteger value) {
     super(16, 168, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x176.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x176 extends Fixed {
+  public static final Fixed16x176 DEFAULT = new Fixed16x176(BigInteger.ZERO);
+
   public Fixed16x176(BigInteger value) {
     super(16, 176, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x184.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x184 extends Fixed {
+  public static final Fixed16x184 DEFAULT = new Fixed16x184(BigInteger.ZERO);
+
   public Fixed16x184(BigInteger value) {
     super(16, 184, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x192.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x192 extends Fixed {
+  public static final Fixed16x192 DEFAULT = new Fixed16x192(BigInteger.ZERO);
+
   public Fixed16x192(BigInteger value) {
     super(16, 192, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x200.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x200 extends Fixed {
+  public static final Fixed16x200 DEFAULT = new Fixed16x200(BigInteger.ZERO);
+
   public Fixed16x200(BigInteger value) {
     super(16, 200, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x208.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x208 extends Fixed {
+  public static final Fixed16x208 DEFAULT = new Fixed16x208(BigInteger.ZERO);
+
   public Fixed16x208(BigInteger value) {
     super(16, 208, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x216.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x216 extends Fixed {
+  public static final Fixed16x216 DEFAULT = new Fixed16x216(BigInteger.ZERO);
+
   public Fixed16x216(BigInteger value) {
     super(16, 216, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x224.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x224 extends Fixed {
+  public static final Fixed16x224 DEFAULT = new Fixed16x224(BigInteger.ZERO);
+
   public Fixed16x224(BigInteger value) {
     super(16, 224, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x232.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x232 extends Fixed {
+  public static final Fixed16x232 DEFAULT = new Fixed16x232(BigInteger.ZERO);
+
   public Fixed16x232(BigInteger value) {
     super(16, 232, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x24 extends Fixed {
+  public static final Fixed16x24 DEFAULT = new Fixed16x24(BigInteger.ZERO);
+
   public Fixed16x24(BigInteger value) {
     super(16, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x240.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x240 extends Fixed {
+  public static final Fixed16x240 DEFAULT = new Fixed16x240(BigInteger.ZERO);
+
   public Fixed16x240(BigInteger value) {
     super(16, 240, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x32.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x32 extends Fixed {
+  public static final Fixed16x32 DEFAULT = new Fixed16x32(BigInteger.ZERO);
+
   public Fixed16x32(BigInteger value) {
     super(16, 32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x40.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x40 extends Fixed {
+  public static final Fixed16x40 DEFAULT = new Fixed16x40(BigInteger.ZERO);
+
   public Fixed16x40(BigInteger value) {
     super(16, 40, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x48.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x48 extends Fixed {
+  public static final Fixed16x48 DEFAULT = new Fixed16x48(BigInteger.ZERO);
+
   public Fixed16x48(BigInteger value) {
     super(16, 48, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x56.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x56 extends Fixed {
+  public static final Fixed16x56 DEFAULT = new Fixed16x56(BigInteger.ZERO);
+
   public Fixed16x56(BigInteger value) {
     super(16, 56, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x64.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x64 extends Fixed {
+  public static final Fixed16x64 DEFAULT = new Fixed16x64(BigInteger.ZERO);
+
   public Fixed16x64(BigInteger value) {
     super(16, 64, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x72.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x72 extends Fixed {
+  public static final Fixed16x72 DEFAULT = new Fixed16x72(BigInteger.ZERO);
+
   public Fixed16x72(BigInteger value) {
     super(16, 72, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x8 extends Fixed {
+  public static final Fixed16x8 DEFAULT = new Fixed16x8(BigInteger.ZERO);
+
   public Fixed16x8(BigInteger value) {
     super(16, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x80.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x80 extends Fixed {
+  public static final Fixed16x80 DEFAULT = new Fixed16x80(BigInteger.ZERO);
+
   public Fixed16x80(BigInteger value) {
     super(16, 80, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x88.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x88 extends Fixed {
+  public static final Fixed16x88 DEFAULT = new Fixed16x88(BigInteger.ZERO);
+
   public Fixed16x88(BigInteger value) {
     super(16, 88, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x96.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x96 extends Fixed {
+  public static final Fixed16x96 DEFAULT = new Fixed16x96(BigInteger.ZERO);
+
   public Fixed16x96(BigInteger value) {
     super(16, 96, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed176x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed176x16 extends Fixed {
+  public static final Fixed176x16 DEFAULT = new Fixed176x16(BigInteger.ZERO);
+
   public Fixed176x16(BigInteger value) {
     super(176, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed176x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed176x24 extends Fixed {
+  public static final Fixed176x24 DEFAULT = new Fixed176x24(BigInteger.ZERO);
+
   public Fixed176x24(BigInteger value) {
     super(176, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed176x32.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed176x32 extends Fixed {
+  public static final Fixed176x32 DEFAULT = new Fixed176x32(BigInteger.ZERO);
+
   public Fixed176x32(BigInteger value) {
     super(176, 32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed176x40.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed176x40 extends Fixed {
+  public static final Fixed176x40 DEFAULT = new Fixed176x40(BigInteger.ZERO);
+
   public Fixed176x40(BigInteger value) {
     super(176, 40, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed176x48.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed176x48 extends Fixed {
+  public static final Fixed176x48 DEFAULT = new Fixed176x48(BigInteger.ZERO);
+
   public Fixed176x48(BigInteger value) {
     super(176, 48, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed176x56.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed176x56 extends Fixed {
+  public static final Fixed176x56 DEFAULT = new Fixed176x56(BigInteger.ZERO);
+
   public Fixed176x56(BigInteger value) {
     super(176, 56, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed176x64.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed176x64 extends Fixed {
+  public static final Fixed176x64 DEFAULT = new Fixed176x64(BigInteger.ZERO);
+
   public Fixed176x64(BigInteger value) {
     super(176, 64, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed176x72.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed176x72 extends Fixed {
+  public static final Fixed176x72 DEFAULT = new Fixed176x72(BigInteger.ZERO);
+
   public Fixed176x72(BigInteger value) {
     super(176, 72, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed176x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed176x8 extends Fixed {
+  public static final Fixed176x8 DEFAULT = new Fixed176x8(BigInteger.ZERO);
+
   public Fixed176x8(BigInteger value) {
     super(176, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed176x80.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed176x80 extends Fixed {
+  public static final Fixed176x80 DEFAULT = new Fixed176x80(BigInteger.ZERO);
+
   public Fixed176x80(BigInteger value) {
     super(176, 80, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed184x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed184x16 extends Fixed {
+  public static final Fixed184x16 DEFAULT = new Fixed184x16(BigInteger.ZERO);
+
   public Fixed184x16(BigInteger value) {
     super(184, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed184x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed184x24 extends Fixed {
+  public static final Fixed184x24 DEFAULT = new Fixed184x24(BigInteger.ZERO);
+
   public Fixed184x24(BigInteger value) {
     super(184, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed184x32.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed184x32 extends Fixed {
+  public static final Fixed184x32 DEFAULT = new Fixed184x32(BigInteger.ZERO);
+
   public Fixed184x32(BigInteger value) {
     super(184, 32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed184x40.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed184x40 extends Fixed {
+  public static final Fixed184x40 DEFAULT = new Fixed184x40(BigInteger.ZERO);
+
   public Fixed184x40(BigInteger value) {
     super(184, 40, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed184x48.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed184x48 extends Fixed {
+  public static final Fixed184x48 DEFAULT = new Fixed184x48(BigInteger.ZERO);
+
   public Fixed184x48(BigInteger value) {
     super(184, 48, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed184x56.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed184x56 extends Fixed {
+  public static final Fixed184x56 DEFAULT = new Fixed184x56(BigInteger.ZERO);
+
   public Fixed184x56(BigInteger value) {
     super(184, 56, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed184x64.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed184x64 extends Fixed {
+  public static final Fixed184x64 DEFAULT = new Fixed184x64(BigInteger.ZERO);
+
   public Fixed184x64(BigInteger value) {
     super(184, 64, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed184x72.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed184x72 extends Fixed {
+  public static final Fixed184x72 DEFAULT = new Fixed184x72(BigInteger.ZERO);
+
   public Fixed184x72(BigInteger value) {
     super(184, 72, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed184x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed184x8 extends Fixed {
+  public static final Fixed184x8 DEFAULT = new Fixed184x8(BigInteger.ZERO);
+
   public Fixed184x8(BigInteger value) {
     super(184, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed192x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed192x16 extends Fixed {
+  public static final Fixed192x16 DEFAULT = new Fixed192x16(BigInteger.ZERO);
+
   public Fixed192x16(BigInteger value) {
     super(192, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed192x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed192x24 extends Fixed {
+  public static final Fixed192x24 DEFAULT = new Fixed192x24(BigInteger.ZERO);
+
   public Fixed192x24(BigInteger value) {
     super(192, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed192x32.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed192x32 extends Fixed {
+  public static final Fixed192x32 DEFAULT = new Fixed192x32(BigInteger.ZERO);
+
   public Fixed192x32(BigInteger value) {
     super(192, 32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed192x40.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed192x40 extends Fixed {
+  public static final Fixed192x40 DEFAULT = new Fixed192x40(BigInteger.ZERO);
+
   public Fixed192x40(BigInteger value) {
     super(192, 40, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed192x48.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed192x48 extends Fixed {
+  public static final Fixed192x48 DEFAULT = new Fixed192x48(BigInteger.ZERO);
+
   public Fixed192x48(BigInteger value) {
     super(192, 48, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed192x56.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed192x56 extends Fixed {
+  public static final Fixed192x56 DEFAULT = new Fixed192x56(BigInteger.ZERO);
+
   public Fixed192x56(BigInteger value) {
     super(192, 56, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed192x64.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed192x64 extends Fixed {
+  public static final Fixed192x64 DEFAULT = new Fixed192x64(BigInteger.ZERO);
+
   public Fixed192x64(BigInteger value) {
     super(192, 64, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed192x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed192x8 extends Fixed {
+  public static final Fixed192x8 DEFAULT = new Fixed192x8(BigInteger.ZERO);
+
   public Fixed192x8(BigInteger value) {
     super(192, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed200x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed200x16 extends Fixed {
+  public static final Fixed200x16 DEFAULT = new Fixed200x16(BigInteger.ZERO);
+
   public Fixed200x16(BigInteger value) {
     super(200, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed200x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed200x24 extends Fixed {
+  public static final Fixed200x24 DEFAULT = new Fixed200x24(BigInteger.ZERO);
+
   public Fixed200x24(BigInteger value) {
     super(200, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed200x32.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed200x32 extends Fixed {
+  public static final Fixed200x32 DEFAULT = new Fixed200x32(BigInteger.ZERO);
+
   public Fixed200x32(BigInteger value) {
     super(200, 32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed200x40.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed200x40 extends Fixed {
+  public static final Fixed200x40 DEFAULT = new Fixed200x40(BigInteger.ZERO);
+
   public Fixed200x40(BigInteger value) {
     super(200, 40, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed200x48.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed200x48 extends Fixed {
+  public static final Fixed200x48 DEFAULT = new Fixed200x48(BigInteger.ZERO);
+
   public Fixed200x48(BigInteger value) {
     super(200, 48, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed200x56.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed200x56 extends Fixed {
+  public static final Fixed200x56 DEFAULT = new Fixed200x56(BigInteger.ZERO);
+
   public Fixed200x56(BigInteger value) {
     super(200, 56, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed200x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed200x8 extends Fixed {
+  public static final Fixed200x8 DEFAULT = new Fixed200x8(BigInteger.ZERO);
+
   public Fixed200x8(BigInteger value) {
     super(200, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed208x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed208x16 extends Fixed {
+  public static final Fixed208x16 DEFAULT = new Fixed208x16(BigInteger.ZERO);
+
   public Fixed208x16(BigInteger value) {
     super(208, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed208x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed208x24 extends Fixed {
+  public static final Fixed208x24 DEFAULT = new Fixed208x24(BigInteger.ZERO);
+
   public Fixed208x24(BigInteger value) {
     super(208, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed208x32.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed208x32 extends Fixed {
+  public static final Fixed208x32 DEFAULT = new Fixed208x32(BigInteger.ZERO);
+
   public Fixed208x32(BigInteger value) {
     super(208, 32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed208x40.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed208x40 extends Fixed {
+  public static final Fixed208x40 DEFAULT = new Fixed208x40(BigInteger.ZERO);
+
   public Fixed208x40(BigInteger value) {
     super(208, 40, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed208x48.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed208x48 extends Fixed {
+  public static final Fixed208x48 DEFAULT = new Fixed208x48(BigInteger.ZERO);
+
   public Fixed208x48(BigInteger value) {
     super(208, 48, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed208x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed208x8 extends Fixed {
+  public static final Fixed208x8 DEFAULT = new Fixed208x8(BigInteger.ZERO);
+
   public Fixed208x8(BigInteger value) {
     super(208, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed216x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed216x16 extends Fixed {
+  public static final Fixed216x16 DEFAULT = new Fixed216x16(BigInteger.ZERO);
+
   public Fixed216x16(BigInteger value) {
     super(216, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed216x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed216x24 extends Fixed {
+  public static final Fixed216x24 DEFAULT = new Fixed216x24(BigInteger.ZERO);
+
   public Fixed216x24(BigInteger value) {
     super(216, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed216x32.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed216x32 extends Fixed {
+  public static final Fixed216x32 DEFAULT = new Fixed216x32(BigInteger.ZERO);
+
   public Fixed216x32(BigInteger value) {
     super(216, 32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed216x40.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed216x40 extends Fixed {
+  public static final Fixed216x40 DEFAULT = new Fixed216x40(BigInteger.ZERO);
+
   public Fixed216x40(BigInteger value) {
     super(216, 40, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed216x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed216x8 extends Fixed {
+  public static final Fixed216x8 DEFAULT = new Fixed216x8(BigInteger.ZERO);
+
   public Fixed216x8(BigInteger value) {
     super(216, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed224x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed224x16 extends Fixed {
+  public static final Fixed224x16 DEFAULT = new Fixed224x16(BigInteger.ZERO);
+
   public Fixed224x16(BigInteger value) {
     super(224, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed224x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed224x24 extends Fixed {
+  public static final Fixed224x24 DEFAULT = new Fixed224x24(BigInteger.ZERO);
+
   public Fixed224x24(BigInteger value) {
     super(224, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed224x32.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed224x32 extends Fixed {
+  public static final Fixed224x32 DEFAULT = new Fixed224x32(BigInteger.ZERO);
+
   public Fixed224x32(BigInteger value) {
     super(224, 32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed224x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed224x8 extends Fixed {
+  public static final Fixed224x8 DEFAULT = new Fixed224x8(BigInteger.ZERO);
+
   public Fixed224x8(BigInteger value) {
     super(224, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed232x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed232x16 extends Fixed {
+  public static final Fixed232x16 DEFAULT = new Fixed232x16(BigInteger.ZERO);
+
   public Fixed232x16(BigInteger value) {
     super(232, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed232x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed232x24 extends Fixed {
+  public static final Fixed232x24 DEFAULT = new Fixed232x24(BigInteger.ZERO);
+
   public Fixed232x24(BigInteger value) {
     super(232, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed232x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed232x8 extends Fixed {
+  public static final Fixed232x8 DEFAULT = new Fixed232x8(BigInteger.ZERO);
+
   public Fixed232x8(BigInteger value) {
     super(232, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed240x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed240x16 extends Fixed {
+  public static final Fixed240x16 DEFAULT = new Fixed240x16(BigInteger.ZERO);
+
   public Fixed240x16(BigInteger value) {
     super(240, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed240x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed240x8 extends Fixed {
+  public static final Fixed240x8 DEFAULT = new Fixed240x8(BigInteger.ZERO);
+
   public Fixed240x8(BigInteger value) {
     super(240, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed248x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed248x8 extends Fixed {
+  public static final Fixed248x8 DEFAULT = new Fixed248x8(BigInteger.ZERO);
+
   public Fixed248x8(BigInteger value) {
     super(248, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x104.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x104 extends Fixed {
+  public static final Fixed24x104 DEFAULT = new Fixed24x104(BigInteger.ZERO);
+
   public Fixed24x104(BigInteger value) {
     super(24, 104, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x112.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x112 extends Fixed {
+  public static final Fixed24x112 DEFAULT = new Fixed24x112(BigInteger.ZERO);
+
   public Fixed24x112(BigInteger value) {
     super(24, 112, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x120.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x120 extends Fixed {
+  public static final Fixed24x120 DEFAULT = new Fixed24x120(BigInteger.ZERO);
+
   public Fixed24x120(BigInteger value) {
     super(24, 120, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x128.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x128 extends Fixed {
+  public static final Fixed24x128 DEFAULT = new Fixed24x128(BigInteger.ZERO);
+
   public Fixed24x128(BigInteger value) {
     super(24, 128, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x136.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x136 extends Fixed {
+  public static final Fixed24x136 DEFAULT = new Fixed24x136(BigInteger.ZERO);
+
   public Fixed24x136(BigInteger value) {
     super(24, 136, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x144.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x144 extends Fixed {
+  public static final Fixed24x144 DEFAULT = new Fixed24x144(BigInteger.ZERO);
+
   public Fixed24x144(BigInteger value) {
     super(24, 144, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x152.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x152 extends Fixed {
+  public static final Fixed24x152 DEFAULT = new Fixed24x152(BigInteger.ZERO);
+
   public Fixed24x152(BigInteger value) {
     super(24, 152, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x16 extends Fixed {
+  public static final Fixed24x16 DEFAULT = new Fixed24x16(BigInteger.ZERO);
+
   public Fixed24x16(BigInteger value) {
     super(24, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x160.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x160 extends Fixed {
+  public static final Fixed24x160 DEFAULT = new Fixed24x160(BigInteger.ZERO);
+
   public Fixed24x160(BigInteger value) {
     super(24, 160, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x168.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x168 extends Fixed {
+  public static final Fixed24x168 DEFAULT = new Fixed24x168(BigInteger.ZERO);
+
   public Fixed24x168(BigInteger value) {
     super(24, 168, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x176.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x176 extends Fixed {
+  public static final Fixed24x176 DEFAULT = new Fixed24x176(BigInteger.ZERO);
+
   public Fixed24x176(BigInteger value) {
     super(24, 176, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x184.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x184 extends Fixed {
+  public static final Fixed24x184 DEFAULT = new Fixed24x184(BigInteger.ZERO);
+
   public Fixed24x184(BigInteger value) {
     super(24, 184, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x192.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x192 extends Fixed {
+  public static final Fixed24x192 DEFAULT = new Fixed24x192(BigInteger.ZERO);
+
   public Fixed24x192(BigInteger value) {
     super(24, 192, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x200.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x200 extends Fixed {
+  public static final Fixed24x200 DEFAULT = new Fixed24x200(BigInteger.ZERO);
+
   public Fixed24x200(BigInteger value) {
     super(24, 200, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x208.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x208 extends Fixed {
+  public static final Fixed24x208 DEFAULT = new Fixed24x208(BigInteger.ZERO);
+
   public Fixed24x208(BigInteger value) {
     super(24, 208, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x216.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x216 extends Fixed {
+  public static final Fixed24x216 DEFAULT = new Fixed24x216(BigInteger.ZERO);
+
   public Fixed24x216(BigInteger value) {
     super(24, 216, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x224.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x224 extends Fixed {
+  public static final Fixed24x224 DEFAULT = new Fixed24x224(BigInteger.ZERO);
+
   public Fixed24x224(BigInteger value) {
     super(24, 224, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x232.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x232 extends Fixed {
+  public static final Fixed24x232 DEFAULT = new Fixed24x232(BigInteger.ZERO);
+
   public Fixed24x232(BigInteger value) {
     super(24, 232, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x24 extends Fixed {
+  public static final Fixed24x24 DEFAULT = new Fixed24x24(BigInteger.ZERO);
+
   public Fixed24x24(BigInteger value) {
     super(24, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x32.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x32 extends Fixed {
+  public static final Fixed24x32 DEFAULT = new Fixed24x32(BigInteger.ZERO);
+
   public Fixed24x32(BigInteger value) {
     super(24, 32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x40.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x40 extends Fixed {
+  public static final Fixed24x40 DEFAULT = new Fixed24x40(BigInteger.ZERO);
+
   public Fixed24x40(BigInteger value) {
     super(24, 40, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x48.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x48 extends Fixed {
+  public static final Fixed24x48 DEFAULT = new Fixed24x48(BigInteger.ZERO);
+
   public Fixed24x48(BigInteger value) {
     super(24, 48, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x56.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x56 extends Fixed {
+  public static final Fixed24x56 DEFAULT = new Fixed24x56(BigInteger.ZERO);
+
   public Fixed24x56(BigInteger value) {
     super(24, 56, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x64.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x64 extends Fixed {
+  public static final Fixed24x64 DEFAULT = new Fixed24x64(BigInteger.ZERO);
+
   public Fixed24x64(BigInteger value) {
     super(24, 64, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x72.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x72 extends Fixed {
+  public static final Fixed24x72 DEFAULT = new Fixed24x72(BigInteger.ZERO);
+
   public Fixed24x72(BigInteger value) {
     super(24, 72, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x8 extends Fixed {
+  public static final Fixed24x8 DEFAULT = new Fixed24x8(BigInteger.ZERO);
+
   public Fixed24x8(BigInteger value) {
     super(24, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x80.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x80 extends Fixed {
+  public static final Fixed24x80 DEFAULT = new Fixed24x80(BigInteger.ZERO);
+
   public Fixed24x80(BigInteger value) {
     super(24, 80, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x88.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x88 extends Fixed {
+  public static final Fixed24x88 DEFAULT = new Fixed24x88(BigInteger.ZERO);
+
   public Fixed24x88(BigInteger value) {
     super(24, 88, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x96.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x96 extends Fixed {
+  public static final Fixed24x96 DEFAULT = new Fixed24x96(BigInteger.ZERO);
+
   public Fixed24x96(BigInteger value) {
     super(24, 96, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed32x104.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed32x104 extends Fixed {
+  public static final Fixed32x104 DEFAULT = new Fixed32x104(BigInteger.ZERO);
+
   public Fixed32x104(BigInteger value) {
     super(32, 104, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed32x112.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed32x112 extends Fixed {
+  public static final Fixed32x112 DEFAULT = new Fixed32x112(BigInteger.ZERO);
+
   public Fixed32x112(BigInteger value) {
     super(32, 112, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed32x120.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed32x120 extends Fixed {
+  public static final Fixed32x120 DEFAULT = new Fixed32x120(BigInteger.ZERO);
+
   public Fixed32x120(BigInteger value) {
     super(32, 120, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed32x128.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed32x128 extends Fixed {
+  public static final Fixed32x128 DEFAULT = new Fixed32x128(BigInteger.ZERO);
+
   public Fixed32x128(BigInteger value) {
     super(32, 128, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed32x136.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed32x136 extends Fixed {
+  public static final Fixed32x136 DEFAULT = new Fixed32x136(BigInteger.ZERO);
+
   public Fixed32x136(BigInteger value) {
     super(32, 136, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed32x144.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed32x144 extends Fixed {
+  public static final Fixed32x144 DEFAULT = new Fixed32x144(BigInteger.ZERO);
+
   public Fixed32x144(BigInteger value) {
     super(32, 144, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed32x152.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed32x152 extends Fixed {
+  public static final Fixed32x152 DEFAULT = new Fixed32x152(BigInteger.ZERO);
+
   public Fixed32x152(BigInteger value) {
     super(32, 152, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed32x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed32x16 extends Fixed {
+  public static final Fixed32x16 DEFAULT = new Fixed32x16(BigInteger.ZERO);
+
   public Fixed32x16(BigInteger value) {
     super(32, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed32x160.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed32x160 extends Fixed {
+  public static final Fixed32x160 DEFAULT = new Fixed32x160(BigInteger.ZERO);
+
   public Fixed32x160(BigInteger value) {
     super(32, 160, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed32x168.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed32x168 extends Fixed {
+  public static final Fixed32x168 DEFAULT = new Fixed32x168(BigInteger.ZERO);
+
   public Fixed32x168(BigInteger value) {
     super(32, 168, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed32x176.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed32x176 extends Fixed {
+  public static final Fixed32x176 DEFAULT = new Fixed32x176(BigInteger.ZERO);
+
   public Fixed32x176(BigInteger value) {
     super(32, 176, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes1.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes1 extends Bytes {
+  public static final Bytes1 DEFAULT = new Bytes1(new byte[1]);
+
   public Bytes1(byte[] value) {
     super(1, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes10.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes10 extends Bytes {
+  public static final Bytes10 DEFAULT = new Bytes10(new byte[10]);
+
   public Bytes10(byte[] value) {
     super(10, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes11.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes11 extends Bytes {
+  public static final Bytes11 DEFAULT = new Bytes11(new byte[11]);
+
   public Bytes11(byte[] value) {
     super(11, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes12.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes12 extends Bytes {
+  public static final Bytes12 DEFAULT = new Bytes12(new byte[12]);
+
   public Bytes12(byte[] value) {
     super(12, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes13.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes13 extends Bytes {
+  public static final Bytes13 DEFAULT = new Bytes13(new byte[13]);
+
   public Bytes13(byte[] value) {
     super(13, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes14.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes14 extends Bytes {
+  public static final Bytes14 DEFAULT = new Bytes14(new byte[14]);
+
   public Bytes14(byte[] value) {
     super(14, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes15.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes15 extends Bytes {
+  public static final Bytes15 DEFAULT = new Bytes15(new byte[15]);
+
   public Bytes15(byte[] value) {
     super(15, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes16.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes16 extends Bytes {
+  public static final Bytes16 DEFAULT = new Bytes16(new byte[16]);
+
   public Bytes16(byte[] value) {
     super(16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes17.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes17 extends Bytes {
+  public static final Bytes17 DEFAULT = new Bytes17(new byte[17]);
+
   public Bytes17(byte[] value) {
     super(17, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes18.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes18 extends Bytes {
+  public static final Bytes18 DEFAULT = new Bytes18(new byte[18]);
+
   public Bytes18(byte[] value) {
     super(18, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes19.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes19 extends Bytes {
+  public static final Bytes19 DEFAULT = new Bytes19(new byte[19]);
+
   public Bytes19(byte[] value) {
     super(19, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes2.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes2 extends Bytes {
+  public static final Bytes2 DEFAULT = new Bytes2(new byte[2]);
+
   public Bytes2(byte[] value) {
     super(2, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes20.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes20 extends Bytes {
+  public static final Bytes20 DEFAULT = new Bytes20(new byte[20]);
+
   public Bytes20(byte[] value) {
     super(20, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes21.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes21 extends Bytes {
+  public static final Bytes21 DEFAULT = new Bytes21(new byte[21]);
+
   public Bytes21(byte[] value) {
     super(21, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes22.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes22 extends Bytes {
+  public static final Bytes22 DEFAULT = new Bytes22(new byte[22]);
+
   public Bytes22(byte[] value) {
     super(22, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes23.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes23 extends Bytes {
+  public static final Bytes23 DEFAULT = new Bytes23(new byte[23]);
+
   public Bytes23(byte[] value) {
     super(23, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes24.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes24 extends Bytes {
+  public static final Bytes24 DEFAULT = new Bytes24(new byte[24]);
+
   public Bytes24(byte[] value) {
     super(24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes25.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes25 extends Bytes {
+  public static final Bytes25 DEFAULT = new Bytes25(new byte[25]);
+
   public Bytes25(byte[] value) {
     super(25, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes26.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes26 extends Bytes {
+  public static final Bytes26 DEFAULT = new Bytes26(new byte[26]);
+
   public Bytes26(byte[] value) {
     super(26, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes27.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes27 extends Bytes {
+  public static final Bytes27 DEFAULT = new Bytes27(new byte[27]);
+
   public Bytes27(byte[] value) {
     super(27, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes28.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes28 extends Bytes {
+  public static final Bytes28 DEFAULT = new Bytes28(new byte[28]);
+
   public Bytes28(byte[] value) {
     super(28, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes29.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes29 extends Bytes {
+  public static final Bytes29 DEFAULT = new Bytes29(new byte[29]);
+
   public Bytes29(byte[] value) {
     super(29, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes3.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes3 extends Bytes {
+  public static final Bytes3 DEFAULT = new Bytes3(new byte[3]);
+
   public Bytes3(byte[] value) {
     super(3, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes30.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes30 extends Bytes {
+  public static final Bytes30 DEFAULT = new Bytes30(new byte[30]);
+
   public Bytes30(byte[] value) {
     super(30, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes31.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes31 extends Bytes {
+  public static final Bytes31 DEFAULT = new Bytes31(new byte[31]);
+
   public Bytes31(byte[] value) {
     super(31, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes32.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes32 extends Bytes {
+  public static final Bytes32 DEFAULT = new Bytes32(new byte[32]);
+
   public Bytes32(byte[] value) {
     super(32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes4.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes4 extends Bytes {
+  public static final Bytes4 DEFAULT = new Bytes4(new byte[4]);
+
   public Bytes4(byte[] value) {
     super(4, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes5.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes5 extends Bytes {
+  public static final Bytes5 DEFAULT = new Bytes5(new byte[5]);
+
   public Bytes5(byte[] value) {
     super(5, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes6.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes6 extends Bytes {
+  public static final Bytes6 DEFAULT = new Bytes6(new byte[6]);
+
   public Bytes6(byte[] value) {
     super(6, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes7.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes7 extends Bytes {
+  public static final Bytes7 DEFAULT = new Bytes7(new byte[7]);
+
   public Bytes7(byte[] value) {
     super(7, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes8.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes8 extends Bytes {
+  public static final Bytes8 DEFAULT = new Bytes8(new byte[8]);
+
   public Bytes8(byte[] value) {
     super(8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Bytes9.java
Patch:
@@ -5,9 +5,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Bytes9 extends Bytes {
+  public static final Bytes9 DEFAULT = new Bytes9(new byte[9]);
+
   public Bytes9(byte[] value) {
     super(9, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x104.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x104 extends Fixed {
+  public static final Fixed104x104 DEFAULT = new Fixed104x104(BigInteger.ZERO);
+
   public Fixed104x104(BigInteger value) {
     super(104, 104, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x112.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x112 extends Fixed {
+  public static final Fixed104x112 DEFAULT = new Fixed104x112(BigInteger.ZERO);
+
   public Fixed104x112(BigInteger value) {
     super(104, 112, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x120.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x120 extends Fixed {
+  public static final Fixed104x120 DEFAULT = new Fixed104x120(BigInteger.ZERO);
+
   public Fixed104x120(BigInteger value) {
     super(104, 120, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x128.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x128 extends Fixed {
+  public static final Fixed104x128 DEFAULT = new Fixed104x128(BigInteger.ZERO);
+
   public Fixed104x128(BigInteger value) {
     super(104, 128, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x136.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x136 extends Fixed {
+  public static final Fixed104x136 DEFAULT = new Fixed104x136(BigInteger.ZERO);
+
   public Fixed104x136(BigInteger value) {
     super(104, 136, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x144.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x144 extends Fixed {
+  public static final Fixed104x144 DEFAULT = new Fixed104x144(BigInteger.ZERO);
+
   public Fixed104x144(BigInteger value) {
     super(104, 144, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x152.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x152 extends Fixed {
+  public static final Fixed104x152 DEFAULT = new Fixed104x152(BigInteger.ZERO);
+
   public Fixed104x152(BigInteger value) {
     super(104, 152, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x16 extends Fixed {
+  public static final Fixed104x16 DEFAULT = new Fixed104x16(BigInteger.ZERO);
+
   public Fixed104x16(BigInteger value) {
     super(104, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x24 extends Fixed {
+  public static final Fixed104x24 DEFAULT = new Fixed104x24(BigInteger.ZERO);
+
   public Fixed104x24(BigInteger value) {
     super(104, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x32.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x32 extends Fixed {
+  public static final Fixed104x32 DEFAULT = new Fixed104x32(BigInteger.ZERO);
+
   public Fixed104x32(BigInteger value) {
     super(104, 32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x40.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x40 extends Fixed {
+  public static final Fixed104x40 DEFAULT = new Fixed104x40(BigInteger.ZERO);
+
   public Fixed104x40(BigInteger value) {
     super(104, 40, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x48.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x48 extends Fixed {
+  public static final Fixed104x48 DEFAULT = new Fixed104x48(BigInteger.ZERO);
+
   public Fixed104x48(BigInteger value) {
     super(104, 48, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x56.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x56 extends Fixed {
+  public static final Fixed104x56 DEFAULT = new Fixed104x56(BigInteger.ZERO);
+
   public Fixed104x56(BigInteger value) {
     super(104, 56, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x64.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x64 extends Fixed {
+  public static final Fixed104x64 DEFAULT = new Fixed104x64(BigInteger.ZERO);
+
   public Fixed104x64(BigInteger value) {
     super(104, 64, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x72.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x72 extends Fixed {
+  public static final Fixed104x72 DEFAULT = new Fixed104x72(BigInteger.ZERO);
+
   public Fixed104x72(BigInteger value) {
     super(104, 72, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x8 extends Fixed {
+  public static final Fixed104x8 DEFAULT = new Fixed104x8(BigInteger.ZERO);
+
   public Fixed104x8(BigInteger value) {
     super(104, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x80.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x80 extends Fixed {
+  public static final Fixed104x80 DEFAULT = new Fixed104x80(BigInteger.ZERO);
+
   public Fixed104x80(BigInteger value) {
     super(104, 80, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x88.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x88 extends Fixed {
+  public static final Fixed104x88 DEFAULT = new Fixed104x88(BigInteger.ZERO);
+
   public Fixed104x88(BigInteger value) {
     super(104, 88, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed104x96.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed104x96 extends Fixed {
+  public static final Fixed104x96 DEFAULT = new Fixed104x96(BigInteger.ZERO);
+
   public Fixed104x96(BigInteger value) {
     super(104, 96, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed112x104.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed112x104 extends Fixed {
+  public static final Fixed112x104 DEFAULT = new Fixed112x104(BigInteger.ZERO);
+
   public Fixed112x104(BigInteger value) {
     super(112, 104, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed112x112.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed112x112 extends Fixed {
+  public static final Fixed112x112 DEFAULT = new Fixed112x112(BigInteger.ZERO);
+
   public Fixed112x112(BigInteger value) {
     super(112, 112, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed112x120.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed112x120 extends Fixed {
+  public static final Fixed112x120 DEFAULT = new Fixed112x120(BigInteger.ZERO);
+
   public Fixed112x120(BigInteger value) {
     super(112, 120, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed112x128.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed112x128 extends Fixed {
+  public static final Fixed112x128 DEFAULT = new Fixed112x128(BigInteger.ZERO);
+
   public Fixed112x128(BigInteger value) {
     super(112, 128, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed112x136.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed112x136 extends Fixed {
+  public static final Fixed112x136 DEFAULT = new Fixed112x136(BigInteger.ZERO);
+
   public Fixed112x136(BigInteger value) {
     super(112, 136, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed112x144.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed112x144 extends Fixed {
+  public static final Fixed112x144 DEFAULT = new Fixed112x144(BigInteger.ZERO);
+
   public Fixed112x144(BigInteger value) {
     super(112, 144, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed112x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed112x16 extends Fixed {
+  public static final Fixed112x16 DEFAULT = new Fixed112x16(BigInteger.ZERO);
+
   public Fixed112x16(BigInteger value) {
     super(112, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed112x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed112x24 extends Fixed {
+  public static final Fixed112x24 DEFAULT = new Fixed112x24(BigInteger.ZERO);
+
   public Fixed112x24(BigInteger value) {
     super(112, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed112x32.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed112x32 extends Fixed {
+  public static final Fixed112x32 DEFAULT = new Fixed112x32(BigInteger.ZERO);
+
   public Fixed112x32(BigInteger value) {
     super(112, 32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed112x40.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed112x40 extends Fixed {
+  public static final Fixed112x40 DEFAULT = new Fixed112x40(BigInteger.ZERO);
+
   public Fixed112x40(BigInteger value) {
     super(112, 40, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed112x48.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed112x48 extends Fixed {
+  public static final Fixed112x48 DEFAULT = new Fixed112x48(BigInteger.ZERO);
+
   public Fixed112x48(BigInteger value) {
     super(112, 48, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed112x56.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed112x56 extends Fixed {
+  public static final Fixed112x56 DEFAULT = new Fixed112x56(BigInteger.ZERO);
+
   public Fixed112x56(BigInteger value) {
     super(112, 56, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed112x64.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed112x64 extends Fixed {
+  public static final Fixed112x64 DEFAULT = new Fixed112x64(BigInteger.ZERO);
+
   public Fixed112x64(BigInteger value) {
     super(112, 64, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed112x72.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed112x72 extends Fixed {
+  public static final Fixed112x72 DEFAULT = new Fixed112x72(BigInteger.ZERO);
+
   public Fixed112x72(BigInteger value) {
     super(112, 72, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed112x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed112x8 extends Fixed {
+  public static final Fixed112x8 DEFAULT = new Fixed112x8(BigInteger.ZERO);
+
   public Fixed112x8(BigInteger value) {
     super(112, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed112x80.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed112x80 extends Fixed {
+  public static final Fixed112x80 DEFAULT = new Fixed112x80(BigInteger.ZERO);
+
   public Fixed112x80(BigInteger value) {
     super(112, 80, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed112x88.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed112x88 extends Fixed {
+  public static final Fixed112x88 DEFAULT = new Fixed112x88(BigInteger.ZERO);
+
   public Fixed112x88(BigInteger value) {
     super(112, 88, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed112x96.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed112x96 extends Fixed {
+  public static final Fixed112x96 DEFAULT = new Fixed112x96(BigInteger.ZERO);
+
   public Fixed112x96(BigInteger value) {
     super(112, 96, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed120x104.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed120x104 extends Fixed {
+  public static final Fixed120x104 DEFAULT = new Fixed120x104(BigInteger.ZERO);
+
   public Fixed120x104(BigInteger value) {
     super(120, 104, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed120x112.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed120x112 extends Fixed {
+  public static final Fixed120x112 DEFAULT = new Fixed120x112(BigInteger.ZERO);
+
   public Fixed120x112(BigInteger value) {
     super(120, 112, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed120x120.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed120x120 extends Fixed {
+  public static final Fixed120x120 DEFAULT = new Fixed120x120(BigInteger.ZERO);
+
   public Fixed120x120(BigInteger value) {
     super(120, 120, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed120x128.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed120x128 extends Fixed {
+  public static final Fixed120x128 DEFAULT = new Fixed120x128(BigInteger.ZERO);
+
   public Fixed120x128(BigInteger value) {
     super(120, 128, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed120x136.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed120x136 extends Fixed {
+  public static final Fixed120x136 DEFAULT = new Fixed120x136(BigInteger.ZERO);
+
   public Fixed120x136(BigInteger value) {
     super(120, 136, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed120x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed120x16 extends Fixed {
+  public static final Fixed120x16 DEFAULT = new Fixed120x16(BigInteger.ZERO);
+
   public Fixed120x16(BigInteger value) {
     super(120, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed120x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed120x24 extends Fixed {
+  public static final Fixed120x24 DEFAULT = new Fixed120x24(BigInteger.ZERO);
+
   public Fixed120x24(BigInteger value) {
     super(120, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed120x32.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed120x32 extends Fixed {
+  public static final Fixed120x32 DEFAULT = new Fixed120x32(BigInteger.ZERO);
+
   public Fixed120x32(BigInteger value) {
     super(120, 32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed120x40.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed120x40 extends Fixed {
+  public static final Fixed120x40 DEFAULT = new Fixed120x40(BigInteger.ZERO);
+
   public Fixed120x40(BigInteger value) {
     super(120, 40, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed120x48.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed120x48 extends Fixed {
+  public static final Fixed120x48 DEFAULT = new Fixed120x48(BigInteger.ZERO);
+
   public Fixed120x48(BigInteger value) {
     super(120, 48, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed120x56.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed120x56 extends Fixed {
+  public static final Fixed120x56 DEFAULT = new Fixed120x56(BigInteger.ZERO);
+
   public Fixed120x56(BigInteger value) {
     super(120, 56, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed120x64.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed120x64 extends Fixed {
+  public static final Fixed120x64 DEFAULT = new Fixed120x64(BigInteger.ZERO);
+
   public Fixed120x64(BigInteger value) {
     super(120, 64, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed120x72.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed120x72 extends Fixed {
+  public static final Fixed120x72 DEFAULT = new Fixed120x72(BigInteger.ZERO);
+
   public Fixed120x72(BigInteger value) {
     super(120, 72, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed120x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed120x8 extends Fixed {
+  public static final Fixed120x8 DEFAULT = new Fixed120x8(BigInteger.ZERO);
+
   public Fixed120x8(BigInteger value) {
     super(120, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed120x80.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed120x80 extends Fixed {
+  public static final Fixed120x80 DEFAULT = new Fixed120x80(BigInteger.ZERO);
+
   public Fixed120x80(BigInteger value) {
     super(120, 80, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed120x88.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed120x88 extends Fixed {
+  public static final Fixed120x88 DEFAULT = new Fixed120x88(BigInteger.ZERO);
+
   public Fixed120x88(BigInteger value) {
     super(120, 88, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed120x96.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed120x96 extends Fixed {
+  public static final Fixed120x96 DEFAULT = new Fixed120x96(BigInteger.ZERO);
+
   public Fixed120x96(BigInteger value) {
     super(120, 96, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed128x104.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed128x104 extends Fixed {
+  public static final Fixed128x104 DEFAULT = new Fixed128x104(BigInteger.ZERO);
+
   public Fixed128x104(BigInteger value) {
     super(128, 104, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed128x112.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed128x112 extends Fixed {
+  public static final Fixed128x112 DEFAULT = new Fixed128x112(BigInteger.ZERO);
+
   public Fixed128x112(BigInteger value) {
     super(128, 112, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed128x120.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed128x120 extends Fixed {
+  public static final Fixed128x120 DEFAULT = new Fixed128x120(BigInteger.ZERO);
+
   public Fixed128x120(BigInteger value) {
     super(128, 120, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed128x128.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed128x128 extends Fixed {
+  public static final Fixed128x128 DEFAULT = new Fixed128x128(BigInteger.ZERO);
+
   public Fixed128x128(BigInteger value) {
     super(128, 128, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed128x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed128x16 extends Fixed {
+  public static final Fixed128x16 DEFAULT = new Fixed128x16(BigInteger.ZERO);
+
   public Fixed128x16(BigInteger value) {
     super(128, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed128x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed128x24 extends Fixed {
+  public static final Fixed128x24 DEFAULT = new Fixed128x24(BigInteger.ZERO);
+
   public Fixed128x24(BigInteger value) {
     super(128, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed128x32.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed128x32 extends Fixed {
+  public static final Fixed128x32 DEFAULT = new Fixed128x32(BigInteger.ZERO);
+
   public Fixed128x32(BigInteger value) {
     super(128, 32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed128x40.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed128x40 extends Fixed {
+  public static final Fixed128x40 DEFAULT = new Fixed128x40(BigInteger.ZERO);
+
   public Fixed128x40(BigInteger value) {
     super(128, 40, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed128x48.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed128x48 extends Fixed {
+  public static final Fixed128x48 DEFAULT = new Fixed128x48(BigInteger.ZERO);
+
   public Fixed128x48(BigInteger value) {
     super(128, 48, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed128x56.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed128x56 extends Fixed {
+  public static final Fixed128x56 DEFAULT = new Fixed128x56(BigInteger.ZERO);
+
   public Fixed128x56(BigInteger value) {
     super(128, 56, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed128x64.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed128x64 extends Fixed {
+  public static final Fixed128x64 DEFAULT = new Fixed128x64(BigInteger.ZERO);
+
   public Fixed128x64(BigInteger value) {
     super(128, 64, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed128x72.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed128x72 extends Fixed {
+  public static final Fixed128x72 DEFAULT = new Fixed128x72(BigInteger.ZERO);
+
   public Fixed128x72(BigInteger value) {
     super(128, 72, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed128x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed128x8 extends Fixed {
+  public static final Fixed128x8 DEFAULT = new Fixed128x8(BigInteger.ZERO);
+
   public Fixed128x8(BigInteger value) {
     super(128, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed128x80.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed128x80 extends Fixed {
+  public static final Fixed128x80 DEFAULT = new Fixed128x80(BigInteger.ZERO);
+
   public Fixed128x80(BigInteger value) {
     super(128, 80, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed128x88.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed128x88 extends Fixed {
+  public static final Fixed128x88 DEFAULT = new Fixed128x88(BigInteger.ZERO);
+
   public Fixed128x88(BigInteger value) {
     super(128, 88, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed128x96.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed128x96 extends Fixed {
+  public static final Fixed128x96 DEFAULT = new Fixed128x96(BigInteger.ZERO);
+
   public Fixed128x96(BigInteger value) {
     super(128, 96, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed136x104.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed136x104 extends Fixed {
+  public static final Fixed136x104 DEFAULT = new Fixed136x104(BigInteger.ZERO);
+
   public Fixed136x104(BigInteger value) {
     super(136, 104, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed136x112.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed136x112 extends Fixed {
+  public static final Fixed136x112 DEFAULT = new Fixed136x112(BigInteger.ZERO);
+
   public Fixed136x112(BigInteger value) {
     super(136, 112, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed136x120.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed136x120 extends Fixed {
+  public static final Fixed136x120 DEFAULT = new Fixed136x120(BigInteger.ZERO);
+
   public Fixed136x120(BigInteger value) {
     super(136, 120, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed136x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed136x16 extends Fixed {
+  public static final Fixed136x16 DEFAULT = new Fixed136x16(BigInteger.ZERO);
+
   public Fixed136x16(BigInteger value) {
     super(136, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed136x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed136x24 extends Fixed {
+  public static final Fixed136x24 DEFAULT = new Fixed136x24(BigInteger.ZERO);
+
   public Fixed136x24(BigInteger value) {
     super(136, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed136x32.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed136x32 extends Fixed {
+  public static final Fixed136x32 DEFAULT = new Fixed136x32(BigInteger.ZERO);
+
   public Fixed136x32(BigInteger value) {
     super(136, 32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed136x40.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed136x40 extends Fixed {
+  public static final Fixed136x40 DEFAULT = new Fixed136x40(BigInteger.ZERO);
+
   public Fixed136x40(BigInteger value) {
     super(136, 40, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed136x48.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed136x48 extends Fixed {
+  public static final Fixed136x48 DEFAULT = new Fixed136x48(BigInteger.ZERO);
+
   public Fixed136x48(BigInteger value) {
     super(136, 48, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed136x56.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed136x56 extends Fixed {
+  public static final Fixed136x56 DEFAULT = new Fixed136x56(BigInteger.ZERO);
+
   public Fixed136x56(BigInteger value) {
     super(136, 56, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed136x64.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed136x64 extends Fixed {
+  public static final Fixed136x64 DEFAULT = new Fixed136x64(BigInteger.ZERO);
+
   public Fixed136x64(BigInteger value) {
     super(136, 64, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed136x72.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed136x72 extends Fixed {
+  public static final Fixed136x72 DEFAULT = new Fixed136x72(BigInteger.ZERO);
+
   public Fixed136x72(BigInteger value) {
     super(136, 72, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed136x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed136x8 extends Fixed {
+  public static final Fixed136x8 DEFAULT = new Fixed136x8(BigInteger.ZERO);
+
   public Fixed136x8(BigInteger value) {
     super(136, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed136x80.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed136x80 extends Fixed {
+  public static final Fixed136x80 DEFAULT = new Fixed136x80(BigInteger.ZERO);
+
   public Fixed136x80(BigInteger value) {
     super(136, 80, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed136x88.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed136x88 extends Fixed {
+  public static final Fixed136x88 DEFAULT = new Fixed136x88(BigInteger.ZERO);
+
   public Fixed136x88(BigInteger value) {
     super(136, 88, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed136x96.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed136x96 extends Fixed {
+  public static final Fixed136x96 DEFAULT = new Fixed136x96(BigInteger.ZERO);
+
   public Fixed136x96(BigInteger value) {
     super(136, 96, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed144x104.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed144x104 extends Fixed {
+  public static final Fixed144x104 DEFAULT = new Fixed144x104(BigInteger.ZERO);
+
   public Fixed144x104(BigInteger value) {
     super(144, 104, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed144x112.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed144x112 extends Fixed {
+  public static final Fixed144x112 DEFAULT = new Fixed144x112(BigInteger.ZERO);
+
   public Fixed144x112(BigInteger value) {
     super(144, 112, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed144x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed144x16 extends Fixed {
+  public static final Fixed144x16 DEFAULT = new Fixed144x16(BigInteger.ZERO);
+
   public Fixed144x16(BigInteger value) {
     super(144, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed144x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed144x24 extends Fixed {
+  public static final Fixed144x24 DEFAULT = new Fixed144x24(BigInteger.ZERO);
+
   public Fixed144x24(BigInteger value) {
     super(144, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed144x32.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed144x32 extends Fixed {
+  public static final Fixed144x32 DEFAULT = new Fixed144x32(BigInteger.ZERO);
+
   public Fixed144x32(BigInteger value) {
     super(144, 32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed144x40.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed144x40 extends Fixed {
+  public static final Fixed144x40 DEFAULT = new Fixed144x40(BigInteger.ZERO);
+
   public Fixed144x40(BigInteger value) {
     super(144, 40, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed144x48.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed144x48 extends Fixed {
+  public static final Fixed144x48 DEFAULT = new Fixed144x48(BigInteger.ZERO);
+
   public Fixed144x48(BigInteger value) {
     super(144, 48, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed144x56.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed144x56 extends Fixed {
+  public static final Fixed144x56 DEFAULT = new Fixed144x56(BigInteger.ZERO);
+
   public Fixed144x56(BigInteger value) {
     super(144, 56, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed144x64.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed144x64 extends Fixed {
+  public static final Fixed144x64 DEFAULT = new Fixed144x64(BigInteger.ZERO);
+
   public Fixed144x64(BigInteger value) {
     super(144, 64, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed144x72.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed144x72 extends Fixed {
+  public static final Fixed144x72 DEFAULT = new Fixed144x72(BigInteger.ZERO);
+
   public Fixed144x72(BigInteger value) {
     super(144, 72, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed144x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed144x8 extends Fixed {
+  public static final Fixed144x8 DEFAULT = new Fixed144x8(BigInteger.ZERO);
+
   public Fixed144x8(BigInteger value) {
     super(144, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed144x80.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed144x80 extends Fixed {
+  public static final Fixed144x80 DEFAULT = new Fixed144x80(BigInteger.ZERO);
+
   public Fixed144x80(BigInteger value) {
     super(144, 80, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed144x88.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed144x88 extends Fixed {
+  public static final Fixed144x88 DEFAULT = new Fixed144x88(BigInteger.ZERO);
+
   public Fixed144x88(BigInteger value) {
     super(144, 88, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed144x96.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed144x96 extends Fixed {
+  public static final Fixed144x96 DEFAULT = new Fixed144x96(BigInteger.ZERO);
+
   public Fixed144x96(BigInteger value) {
     super(144, 96, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed152x104.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed152x104 extends Fixed {
+  public static final Fixed152x104 DEFAULT = new Fixed152x104(BigInteger.ZERO);
+
   public Fixed152x104(BigInteger value) {
     super(152, 104, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed152x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed152x16 extends Fixed {
+  public static final Fixed152x16 DEFAULT = new Fixed152x16(BigInteger.ZERO);
+
   public Fixed152x16(BigInteger value) {
     super(152, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed152x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed152x24 extends Fixed {
+  public static final Fixed152x24 DEFAULT = new Fixed152x24(BigInteger.ZERO);
+
   public Fixed152x24(BigInteger value) {
     super(152, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed152x32.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed152x32 extends Fixed {
+  public static final Fixed152x32 DEFAULT = new Fixed152x32(BigInteger.ZERO);
+
   public Fixed152x32(BigInteger value) {
     super(152, 32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed152x40.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed152x40 extends Fixed {
+  public static final Fixed152x40 DEFAULT = new Fixed152x40(BigInteger.ZERO);
+
   public Fixed152x40(BigInteger value) {
     super(152, 40, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed152x48.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed152x48 extends Fixed {
+  public static final Fixed152x48 DEFAULT = new Fixed152x48(BigInteger.ZERO);
+
   public Fixed152x48(BigInteger value) {
     super(152, 48, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed152x56.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed152x56 extends Fixed {
+  public static final Fixed152x56 DEFAULT = new Fixed152x56(BigInteger.ZERO);
+
   public Fixed152x56(BigInteger value) {
     super(152, 56, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed152x64.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed152x64 extends Fixed {
+  public static final Fixed152x64 DEFAULT = new Fixed152x64(BigInteger.ZERO);
+
   public Fixed152x64(BigInteger value) {
     super(152, 64, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed152x72.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed152x72 extends Fixed {
+  public static final Fixed152x72 DEFAULT = new Fixed152x72(BigInteger.ZERO);
+
   public Fixed152x72(BigInteger value) {
     super(152, 72, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed152x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed152x8 extends Fixed {
+  public static final Fixed152x8 DEFAULT = new Fixed152x8(BigInteger.ZERO);
+
   public Fixed152x8(BigInteger value) {
     super(152, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed152x80.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed152x80 extends Fixed {
+  public static final Fixed152x80 DEFAULT = new Fixed152x80(BigInteger.ZERO);
+
   public Fixed152x80(BigInteger value) {
     super(152, 80, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed152x88.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed152x88 extends Fixed {
+  public static final Fixed152x88 DEFAULT = new Fixed152x88(BigInteger.ZERO);
+
   public Fixed152x88(BigInteger value) {
     super(152, 88, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed152x96.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed152x96 extends Fixed {
+  public static final Fixed152x96 DEFAULT = new Fixed152x96(BigInteger.ZERO);
+
   public Fixed152x96(BigInteger value) {
     super(152, 96, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed160x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed160x16 extends Fixed {
+  public static final Fixed160x16 DEFAULT = new Fixed160x16(BigInteger.ZERO);
+
   public Fixed160x16(BigInteger value) {
     super(160, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed160x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed160x24 extends Fixed {
+  public static final Fixed160x24 DEFAULT = new Fixed160x24(BigInteger.ZERO);
+
   public Fixed160x24(BigInteger value) {
     super(160, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed160x32.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed160x32 extends Fixed {
+  public static final Fixed160x32 DEFAULT = new Fixed160x32(BigInteger.ZERO);
+
   public Fixed160x32(BigInteger value) {
     super(160, 32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed160x40.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed160x40 extends Fixed {
+  public static final Fixed160x40 DEFAULT = new Fixed160x40(BigInteger.ZERO);
+
   public Fixed160x40(BigInteger value) {
     super(160, 40, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed160x48.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed160x48 extends Fixed {
+  public static final Fixed160x48 DEFAULT = new Fixed160x48(BigInteger.ZERO);
+
   public Fixed160x48(BigInteger value) {
     super(160, 48, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed160x56.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed160x56 extends Fixed {
+  public static final Fixed160x56 DEFAULT = new Fixed160x56(BigInteger.ZERO);
+
   public Fixed160x56(BigInteger value) {
     super(160, 56, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed160x64.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed160x64 extends Fixed {
+  public static final Fixed160x64 DEFAULT = new Fixed160x64(BigInteger.ZERO);
+
   public Fixed160x64(BigInteger value) {
     super(160, 64, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed160x72.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed160x72 extends Fixed {
+  public static final Fixed160x72 DEFAULT = new Fixed160x72(BigInteger.ZERO);
+
   public Fixed160x72(BigInteger value) {
     super(160, 72, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed160x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed160x8 extends Fixed {
+  public static final Fixed160x8 DEFAULT = new Fixed160x8(BigInteger.ZERO);
+
   public Fixed160x8(BigInteger value) {
     super(160, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed160x80.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed160x80 extends Fixed {
+  public static final Fixed160x80 DEFAULT = new Fixed160x80(BigInteger.ZERO);
+
   public Fixed160x80(BigInteger value) {
     super(160, 80, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed160x88.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed160x88 extends Fixed {
+  public static final Fixed160x88 DEFAULT = new Fixed160x88(BigInteger.ZERO);
+
   public Fixed160x88(BigInteger value) {
     super(160, 88, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed160x96.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed160x96 extends Fixed {
+  public static final Fixed160x96 DEFAULT = new Fixed160x96(BigInteger.ZERO);
+
   public Fixed160x96(BigInteger value) {
     super(160, 96, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed168x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed168x16 extends Fixed {
+  public static final Fixed168x16 DEFAULT = new Fixed168x16(BigInteger.ZERO);
+
   public Fixed168x16(BigInteger value) {
     super(168, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed168x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed168x24 extends Fixed {
+  public static final Fixed168x24 DEFAULT = new Fixed168x24(BigInteger.ZERO);
+
   public Fixed168x24(BigInteger value) {
     super(168, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed168x32.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed168x32 extends Fixed {
+  public static final Fixed168x32 DEFAULT = new Fixed168x32(BigInteger.ZERO);
+
   public Fixed168x32(BigInteger value) {
     super(168, 32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed168x40.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed168x40 extends Fixed {
+  public static final Fixed168x40 DEFAULT = new Fixed168x40(BigInteger.ZERO);
+
   public Fixed168x40(BigInteger value) {
     super(168, 40, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed168x48.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed168x48 extends Fixed {
+  public static final Fixed168x48 DEFAULT = new Fixed168x48(BigInteger.ZERO);
+
   public Fixed168x48(BigInteger value) {
     super(168, 48, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed168x56.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed168x56 extends Fixed {
+  public static final Fixed168x56 DEFAULT = new Fixed168x56(BigInteger.ZERO);
+
   public Fixed168x56(BigInteger value) {
     super(168, 56, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed168x64.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed168x64 extends Fixed {
+  public static final Fixed168x64 DEFAULT = new Fixed168x64(BigInteger.ZERO);
+
   public Fixed168x64(BigInteger value) {
     super(168, 64, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed168x72.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed168x72 extends Fixed {
+  public static final Fixed168x72 DEFAULT = new Fixed168x72(BigInteger.ZERO);
+
   public Fixed168x72(BigInteger value) {
     super(168, 72, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed168x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed168x8 extends Fixed {
+  public static final Fixed168x8 DEFAULT = new Fixed168x8(BigInteger.ZERO);
+
   public Fixed168x8(BigInteger value) {
     super(168, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed168x80.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed168x80 extends Fixed {
+  public static final Fixed168x80 DEFAULT = new Fixed168x80(BigInteger.ZERO);
+
   public Fixed168x80(BigInteger value) {
     super(168, 80, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed168x88.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed168x88 extends Fixed {
+  public static final Fixed168x88 DEFAULT = new Fixed168x88(BigInteger.ZERO);
+
   public Fixed168x88(BigInteger value) {
     super(168, 88, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x104.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x104 extends Fixed {
+  public static final Fixed16x104 DEFAULT = new Fixed16x104(BigInteger.ZERO);
+
   public Fixed16x104(BigInteger value) {
     super(16, 104, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x112.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x112 extends Fixed {
+  public static final Fixed16x112 DEFAULT = new Fixed16x112(BigInteger.ZERO);
+
   public Fixed16x112(BigInteger value) {
     super(16, 112, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x120.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x120 extends Fixed {
+  public static final Fixed16x120 DEFAULT = new Fixed16x120(BigInteger.ZERO);
+
   public Fixed16x120(BigInteger value) {
     super(16, 120, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x128.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x128 extends Fixed {
+  public static final Fixed16x128 DEFAULT = new Fixed16x128(BigInteger.ZERO);
+
   public Fixed16x128(BigInteger value) {
     super(16, 128, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x136.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x136 extends Fixed {
+  public static final Fixed16x136 DEFAULT = new Fixed16x136(BigInteger.ZERO);
+
   public Fixed16x136(BigInteger value) {
     super(16, 136, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x144.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x144 extends Fixed {
+  public static final Fixed16x144 DEFAULT = new Fixed16x144(BigInteger.ZERO);
+
   public Fixed16x144(BigInteger value) {
     super(16, 144, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x152.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x152 extends Fixed {
+  public static final Fixed16x152 DEFAULT = new Fixed16x152(BigInteger.ZERO);
+
   public Fixed16x152(BigInteger value) {
     super(16, 152, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x16 extends Fixed {
+  public static final Fixed16x16 DEFAULT = new Fixed16x16(BigInteger.ZERO);
+
   public Fixed16x16(BigInteger value) {
     super(16, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x160.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x160 extends Fixed {
+  public static final Fixed16x160 DEFAULT = new Fixed16x160(BigInteger.ZERO);
+
   public Fixed16x160(BigInteger value) {
     super(16, 160, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x168.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x168 extends Fixed {
+  public static final Fixed16x168 DEFAULT = new Fixed16x168(BigInteger.ZERO);
+
   public Fixed16x168(BigInteger value) {
     super(16, 168, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x176.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x176 extends Fixed {
+  public static final Fixed16x176 DEFAULT = new Fixed16x176(BigInteger.ZERO);
+
   public Fixed16x176(BigInteger value) {
     super(16, 176, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x184.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x184 extends Fixed {
+  public static final Fixed16x184 DEFAULT = new Fixed16x184(BigInteger.ZERO);
+
   public Fixed16x184(BigInteger value) {
     super(16, 184, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x192.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x192 extends Fixed {
+  public static final Fixed16x192 DEFAULT = new Fixed16x192(BigInteger.ZERO);
+
   public Fixed16x192(BigInteger value) {
     super(16, 192, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x200.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x200 extends Fixed {
+  public static final Fixed16x200 DEFAULT = new Fixed16x200(BigInteger.ZERO);
+
   public Fixed16x200(BigInteger value) {
     super(16, 200, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x208.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x208 extends Fixed {
+  public static final Fixed16x208 DEFAULT = new Fixed16x208(BigInteger.ZERO);
+
   public Fixed16x208(BigInteger value) {
     super(16, 208, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x216.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x216 extends Fixed {
+  public static final Fixed16x216 DEFAULT = new Fixed16x216(BigInteger.ZERO);
+
   public Fixed16x216(BigInteger value) {
     super(16, 216, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x224.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x224 extends Fixed {
+  public static final Fixed16x224 DEFAULT = new Fixed16x224(BigInteger.ZERO);
+
   public Fixed16x224(BigInteger value) {
     super(16, 224, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x232.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x232 extends Fixed {
+  public static final Fixed16x232 DEFAULT = new Fixed16x232(BigInteger.ZERO);
+
   public Fixed16x232(BigInteger value) {
     super(16, 232, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x24 extends Fixed {
+  public static final Fixed16x24 DEFAULT = new Fixed16x24(BigInteger.ZERO);
+
   public Fixed16x24(BigInteger value) {
     super(16, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x240.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x240 extends Fixed {
+  public static final Fixed16x240 DEFAULT = new Fixed16x240(BigInteger.ZERO);
+
   public Fixed16x240(BigInteger value) {
     super(16, 240, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x32.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x32 extends Fixed {
+  public static final Fixed16x32 DEFAULT = new Fixed16x32(BigInteger.ZERO);
+
   public Fixed16x32(BigInteger value) {
     super(16, 32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x40.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x40 extends Fixed {
+  public static final Fixed16x40 DEFAULT = new Fixed16x40(BigInteger.ZERO);
+
   public Fixed16x40(BigInteger value) {
     super(16, 40, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x48.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x48 extends Fixed {
+  public static final Fixed16x48 DEFAULT = new Fixed16x48(BigInteger.ZERO);
+
   public Fixed16x48(BigInteger value) {
     super(16, 48, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x56.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x56 extends Fixed {
+  public static final Fixed16x56 DEFAULT = new Fixed16x56(BigInteger.ZERO);
+
   public Fixed16x56(BigInteger value) {
     super(16, 56, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x64.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x64 extends Fixed {
+  public static final Fixed16x64 DEFAULT = new Fixed16x64(BigInteger.ZERO);
+
   public Fixed16x64(BigInteger value) {
     super(16, 64, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x72.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x72 extends Fixed {
+  public static final Fixed16x72 DEFAULT = new Fixed16x72(BigInteger.ZERO);
+
   public Fixed16x72(BigInteger value) {
     super(16, 72, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x8 extends Fixed {
+  public static final Fixed16x8 DEFAULT = new Fixed16x8(BigInteger.ZERO);
+
   public Fixed16x8(BigInteger value) {
     super(16, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x80.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x80 extends Fixed {
+  public static final Fixed16x80 DEFAULT = new Fixed16x80(BigInteger.ZERO);
+
   public Fixed16x80(BigInteger value) {
     super(16, 80, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x88.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x88 extends Fixed {
+  public static final Fixed16x88 DEFAULT = new Fixed16x88(BigInteger.ZERO);
+
   public Fixed16x88(BigInteger value) {
     super(16, 88, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed16x96.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed16x96 extends Fixed {
+  public static final Fixed16x96 DEFAULT = new Fixed16x96(BigInteger.ZERO);
+
   public Fixed16x96(BigInteger value) {
     super(16, 96, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed176x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed176x16 extends Fixed {
+  public static final Fixed176x16 DEFAULT = new Fixed176x16(BigInteger.ZERO);
+
   public Fixed176x16(BigInteger value) {
     super(176, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed176x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed176x24 extends Fixed {
+  public static final Fixed176x24 DEFAULT = new Fixed176x24(BigInteger.ZERO);
+
   public Fixed176x24(BigInteger value) {
     super(176, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed176x32.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed176x32 extends Fixed {
+  public static final Fixed176x32 DEFAULT = new Fixed176x32(BigInteger.ZERO);
+
   public Fixed176x32(BigInteger value) {
     super(176, 32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed176x40.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed176x40 extends Fixed {
+  public static final Fixed176x40 DEFAULT = new Fixed176x40(BigInteger.ZERO);
+
   public Fixed176x40(BigInteger value) {
     super(176, 40, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed176x48.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed176x48 extends Fixed {
+  public static final Fixed176x48 DEFAULT = new Fixed176x48(BigInteger.ZERO);
+
   public Fixed176x48(BigInteger value) {
     super(176, 48, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed176x56.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed176x56 extends Fixed {
+  public static final Fixed176x56 DEFAULT = new Fixed176x56(BigInteger.ZERO);
+
   public Fixed176x56(BigInteger value) {
     super(176, 56, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed176x64.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed176x64 extends Fixed {
+  public static final Fixed176x64 DEFAULT = new Fixed176x64(BigInteger.ZERO);
+
   public Fixed176x64(BigInteger value) {
     super(176, 64, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed176x72.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed176x72 extends Fixed {
+  public static final Fixed176x72 DEFAULT = new Fixed176x72(BigInteger.ZERO);
+
   public Fixed176x72(BigInteger value) {
     super(176, 72, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed176x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed176x8 extends Fixed {
+  public static final Fixed176x8 DEFAULT = new Fixed176x8(BigInteger.ZERO);
+
   public Fixed176x8(BigInteger value) {
     super(176, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed176x80.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed176x80 extends Fixed {
+  public static final Fixed176x80 DEFAULT = new Fixed176x80(BigInteger.ZERO);
+
   public Fixed176x80(BigInteger value) {
     super(176, 80, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed184x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed184x16 extends Fixed {
+  public static final Fixed184x16 DEFAULT = new Fixed184x16(BigInteger.ZERO);
+
   public Fixed184x16(BigInteger value) {
     super(184, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed184x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed184x24 extends Fixed {
+  public static final Fixed184x24 DEFAULT = new Fixed184x24(BigInteger.ZERO);
+
   public Fixed184x24(BigInteger value) {
     super(184, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed184x32.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed184x32 extends Fixed {
+  public static final Fixed184x32 DEFAULT = new Fixed184x32(BigInteger.ZERO);
+
   public Fixed184x32(BigInteger value) {
     super(184, 32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed184x40.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed184x40 extends Fixed {
+  public static final Fixed184x40 DEFAULT = new Fixed184x40(BigInteger.ZERO);
+
   public Fixed184x40(BigInteger value) {
     super(184, 40, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed184x48.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed184x48 extends Fixed {
+  public static final Fixed184x48 DEFAULT = new Fixed184x48(BigInteger.ZERO);
+
   public Fixed184x48(BigInteger value) {
     super(184, 48, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed184x56.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed184x56 extends Fixed {
+  public static final Fixed184x56 DEFAULT = new Fixed184x56(BigInteger.ZERO);
+
   public Fixed184x56(BigInteger value) {
     super(184, 56, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed184x64.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed184x64 extends Fixed {
+  public static final Fixed184x64 DEFAULT = new Fixed184x64(BigInteger.ZERO);
+
   public Fixed184x64(BigInteger value) {
     super(184, 64, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed184x72.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed184x72 extends Fixed {
+  public static final Fixed184x72 DEFAULT = new Fixed184x72(BigInteger.ZERO);
+
   public Fixed184x72(BigInteger value) {
     super(184, 72, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed184x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed184x8 extends Fixed {
+  public static final Fixed184x8 DEFAULT = new Fixed184x8(BigInteger.ZERO);
+
   public Fixed184x8(BigInteger value) {
     super(184, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed192x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed192x16 extends Fixed {
+  public static final Fixed192x16 DEFAULT = new Fixed192x16(BigInteger.ZERO);
+
   public Fixed192x16(BigInteger value) {
     super(192, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed192x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed192x24 extends Fixed {
+  public static final Fixed192x24 DEFAULT = new Fixed192x24(BigInteger.ZERO);
+
   public Fixed192x24(BigInteger value) {
     super(192, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed192x32.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed192x32 extends Fixed {
+  public static final Fixed192x32 DEFAULT = new Fixed192x32(BigInteger.ZERO);
+
   public Fixed192x32(BigInteger value) {
     super(192, 32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed192x40.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed192x40 extends Fixed {
+  public static final Fixed192x40 DEFAULT = new Fixed192x40(BigInteger.ZERO);
+
   public Fixed192x40(BigInteger value) {
     super(192, 40, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed192x48.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed192x48 extends Fixed {
+  public static final Fixed192x48 DEFAULT = new Fixed192x48(BigInteger.ZERO);
+
   public Fixed192x48(BigInteger value) {
     super(192, 48, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed192x56.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed192x56 extends Fixed {
+  public static final Fixed192x56 DEFAULT = new Fixed192x56(BigInteger.ZERO);
+
   public Fixed192x56(BigInteger value) {
     super(192, 56, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed192x64.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed192x64 extends Fixed {
+  public static final Fixed192x64 DEFAULT = new Fixed192x64(BigInteger.ZERO);
+
   public Fixed192x64(BigInteger value) {
     super(192, 64, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed192x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed192x8 extends Fixed {
+  public static final Fixed192x8 DEFAULT = new Fixed192x8(BigInteger.ZERO);
+
   public Fixed192x8(BigInteger value) {
     super(192, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed200x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed200x16 extends Fixed {
+  public static final Fixed200x16 DEFAULT = new Fixed200x16(BigInteger.ZERO);
+
   public Fixed200x16(BigInteger value) {
     super(200, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed200x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed200x24 extends Fixed {
+  public static final Fixed200x24 DEFAULT = new Fixed200x24(BigInteger.ZERO);
+
   public Fixed200x24(BigInteger value) {
     super(200, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed200x32.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed200x32 extends Fixed {
+  public static final Fixed200x32 DEFAULT = new Fixed200x32(BigInteger.ZERO);
+
   public Fixed200x32(BigInteger value) {
     super(200, 32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed200x40.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed200x40 extends Fixed {
+  public static final Fixed200x40 DEFAULT = new Fixed200x40(BigInteger.ZERO);
+
   public Fixed200x40(BigInteger value) {
     super(200, 40, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed200x48.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed200x48 extends Fixed {
+  public static final Fixed200x48 DEFAULT = new Fixed200x48(BigInteger.ZERO);
+
   public Fixed200x48(BigInteger value) {
     super(200, 48, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed200x56.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed200x56 extends Fixed {
+  public static final Fixed200x56 DEFAULT = new Fixed200x56(BigInteger.ZERO);
+
   public Fixed200x56(BigInteger value) {
     super(200, 56, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed200x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed200x8 extends Fixed {
+  public static final Fixed200x8 DEFAULT = new Fixed200x8(BigInteger.ZERO);
+
   public Fixed200x8(BigInteger value) {
     super(200, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed208x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed208x16 extends Fixed {
+  public static final Fixed208x16 DEFAULT = new Fixed208x16(BigInteger.ZERO);
+
   public Fixed208x16(BigInteger value) {
     super(208, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed208x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed208x24 extends Fixed {
+  public static final Fixed208x24 DEFAULT = new Fixed208x24(BigInteger.ZERO);
+
   public Fixed208x24(BigInteger value) {
     super(208, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed208x32.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed208x32 extends Fixed {
+  public static final Fixed208x32 DEFAULT = new Fixed208x32(BigInteger.ZERO);
+
   public Fixed208x32(BigInteger value) {
     super(208, 32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed208x40.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed208x40 extends Fixed {
+  public static final Fixed208x40 DEFAULT = new Fixed208x40(BigInteger.ZERO);
+
   public Fixed208x40(BigInteger value) {
     super(208, 40, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed208x48.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed208x48 extends Fixed {
+  public static final Fixed208x48 DEFAULT = new Fixed208x48(BigInteger.ZERO);
+
   public Fixed208x48(BigInteger value) {
     super(208, 48, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed208x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed208x8 extends Fixed {
+  public static final Fixed208x8 DEFAULT = new Fixed208x8(BigInteger.ZERO);
+
   public Fixed208x8(BigInteger value) {
     super(208, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed216x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed216x16 extends Fixed {
+  public static final Fixed216x16 DEFAULT = new Fixed216x16(BigInteger.ZERO);
+
   public Fixed216x16(BigInteger value) {
     super(216, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed216x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed216x24 extends Fixed {
+  public static final Fixed216x24 DEFAULT = new Fixed216x24(BigInteger.ZERO);
+
   public Fixed216x24(BigInteger value) {
     super(216, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed216x32.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed216x32 extends Fixed {
+  public static final Fixed216x32 DEFAULT = new Fixed216x32(BigInteger.ZERO);
+
   public Fixed216x32(BigInteger value) {
     super(216, 32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed216x40.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed216x40 extends Fixed {
+  public static final Fixed216x40 DEFAULT = new Fixed216x40(BigInteger.ZERO);
+
   public Fixed216x40(BigInteger value) {
     super(216, 40, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed216x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed216x8 extends Fixed {
+  public static final Fixed216x8 DEFAULT = new Fixed216x8(BigInteger.ZERO);
+
   public Fixed216x8(BigInteger value) {
     super(216, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed224x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed224x16 extends Fixed {
+  public static final Fixed224x16 DEFAULT = new Fixed224x16(BigInteger.ZERO);
+
   public Fixed224x16(BigInteger value) {
     super(224, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed224x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed224x24 extends Fixed {
+  public static final Fixed224x24 DEFAULT = new Fixed224x24(BigInteger.ZERO);
+
   public Fixed224x24(BigInteger value) {
     super(224, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed224x32.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed224x32 extends Fixed {
+  public static final Fixed224x32 DEFAULT = new Fixed224x32(BigInteger.ZERO);
+
   public Fixed224x32(BigInteger value) {
     super(224, 32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed224x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed224x8 extends Fixed {
+  public static final Fixed224x8 DEFAULT = new Fixed224x8(BigInteger.ZERO);
+
   public Fixed224x8(BigInteger value) {
     super(224, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed232x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed232x16 extends Fixed {
+  public static final Fixed232x16 DEFAULT = new Fixed232x16(BigInteger.ZERO);
+
   public Fixed232x16(BigInteger value) {
     super(232, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed232x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed232x24 extends Fixed {
+  public static final Fixed232x24 DEFAULT = new Fixed232x24(BigInteger.ZERO);
+
   public Fixed232x24(BigInteger value) {
     super(232, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed232x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed232x8 extends Fixed {
+  public static final Fixed232x8 DEFAULT = new Fixed232x8(BigInteger.ZERO);
+
   public Fixed232x8(BigInteger value) {
     super(232, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed240x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed240x16 extends Fixed {
+  public static final Fixed240x16 DEFAULT = new Fixed240x16(BigInteger.ZERO);
+
   public Fixed240x16(BigInteger value) {
     super(240, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed240x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed240x8 extends Fixed {
+  public static final Fixed240x8 DEFAULT = new Fixed240x8(BigInteger.ZERO);
+
   public Fixed240x8(BigInteger value) {
     super(240, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed248x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed248x8 extends Fixed {
+  public static final Fixed248x8 DEFAULT = new Fixed248x8(BigInteger.ZERO);
+
   public Fixed248x8(BigInteger value) {
     super(248, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x104.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x104 extends Fixed {
+  public static final Fixed24x104 DEFAULT = new Fixed24x104(BigInteger.ZERO);
+
   public Fixed24x104(BigInteger value) {
     super(24, 104, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x112.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x112 extends Fixed {
+  public static final Fixed24x112 DEFAULT = new Fixed24x112(BigInteger.ZERO);
+
   public Fixed24x112(BigInteger value) {
     super(24, 112, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x120.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x120 extends Fixed {
+  public static final Fixed24x120 DEFAULT = new Fixed24x120(BigInteger.ZERO);
+
   public Fixed24x120(BigInteger value) {
     super(24, 120, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x128.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x128 extends Fixed {
+  public static final Fixed24x128 DEFAULT = new Fixed24x128(BigInteger.ZERO);
+
   public Fixed24x128(BigInteger value) {
     super(24, 128, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x136.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x136 extends Fixed {
+  public static final Fixed24x136 DEFAULT = new Fixed24x136(BigInteger.ZERO);
+
   public Fixed24x136(BigInteger value) {
     super(24, 136, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x144.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x144 extends Fixed {
+  public static final Fixed24x144 DEFAULT = new Fixed24x144(BigInteger.ZERO);
+
   public Fixed24x144(BigInteger value) {
     super(24, 144, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x152.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x152 extends Fixed {
+  public static final Fixed24x152 DEFAULT = new Fixed24x152(BigInteger.ZERO);
+
   public Fixed24x152(BigInteger value) {
     super(24, 152, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x16 extends Fixed {
+  public static final Fixed24x16 DEFAULT = new Fixed24x16(BigInteger.ZERO);
+
   public Fixed24x16(BigInteger value) {
     super(24, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x160.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x160 extends Fixed {
+  public static final Fixed24x160 DEFAULT = new Fixed24x160(BigInteger.ZERO);
+
   public Fixed24x160(BigInteger value) {
     super(24, 160, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x168.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x168 extends Fixed {
+  public static final Fixed24x168 DEFAULT = new Fixed24x168(BigInteger.ZERO);
+
   public Fixed24x168(BigInteger value) {
     super(24, 168, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x176.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x176 extends Fixed {
+  public static final Fixed24x176 DEFAULT = new Fixed24x176(BigInteger.ZERO);
+
   public Fixed24x176(BigInteger value) {
     super(24, 176, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x184.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x184 extends Fixed {
+  public static final Fixed24x184 DEFAULT = new Fixed24x184(BigInteger.ZERO);
+
   public Fixed24x184(BigInteger value) {
     super(24, 184, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x192.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x192 extends Fixed {
+  public static final Fixed24x192 DEFAULT = new Fixed24x192(BigInteger.ZERO);
+
   public Fixed24x192(BigInteger value) {
     super(24, 192, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x200.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x200 extends Fixed {
+  public static final Fixed24x200 DEFAULT = new Fixed24x200(BigInteger.ZERO);
+
   public Fixed24x200(BigInteger value) {
     super(24, 200, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x208.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x208 extends Fixed {
+  public static final Fixed24x208 DEFAULT = new Fixed24x208(BigInteger.ZERO);
+
   public Fixed24x208(BigInteger value) {
     super(24, 208, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x216.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x216 extends Fixed {
+  public static final Fixed24x216 DEFAULT = new Fixed24x216(BigInteger.ZERO);
+
   public Fixed24x216(BigInteger value) {
     super(24, 216, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x224.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x224 extends Fixed {
+  public static final Fixed24x224 DEFAULT = new Fixed24x224(BigInteger.ZERO);
+
   public Fixed24x224(BigInteger value) {
     super(24, 224, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x232.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x232 extends Fixed {
+  public static final Fixed24x232 DEFAULT = new Fixed24x232(BigInteger.ZERO);
+
   public Fixed24x232(BigInteger value) {
     super(24, 232, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x24 extends Fixed {
+  public static final Fixed24x24 DEFAULT = new Fixed24x24(BigInteger.ZERO);
+
   public Fixed24x24(BigInteger value) {
     super(24, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x32.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x32 extends Fixed {
+  public static final Fixed24x32 DEFAULT = new Fixed24x32(BigInteger.ZERO);
+
   public Fixed24x32(BigInteger value) {
     super(24, 32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x40.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x40 extends Fixed {
+  public static final Fixed24x40 DEFAULT = new Fixed24x40(BigInteger.ZERO);
+
   public Fixed24x40(BigInteger value) {
     super(24, 40, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x48.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x48 extends Fixed {
+  public static final Fixed24x48 DEFAULT = new Fixed24x48(BigInteger.ZERO);
+
   public Fixed24x48(BigInteger value) {
     super(24, 48, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x56.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x56 extends Fixed {
+  public static final Fixed24x56 DEFAULT = new Fixed24x56(BigInteger.ZERO);
+
   public Fixed24x56(BigInteger value) {
     super(24, 56, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x64.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x64 extends Fixed {
+  public static final Fixed24x64 DEFAULT = new Fixed24x64(BigInteger.ZERO);
+
   public Fixed24x64(BigInteger value) {
     super(24, 64, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x72.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x72 extends Fixed {
+  public static final Fixed24x72 DEFAULT = new Fixed24x72(BigInteger.ZERO);
+
   public Fixed24x72(BigInteger value) {
     super(24, 72, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x8.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x8 extends Fixed {
+  public static final Fixed24x8 DEFAULT = new Fixed24x8(BigInteger.ZERO);
+
   public Fixed24x8(BigInteger value) {
     super(24, 8, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x80.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x80 extends Fixed {
+  public static final Fixed24x80 DEFAULT = new Fixed24x80(BigInteger.ZERO);
+
   public Fixed24x80(BigInteger value) {
     super(24, 80, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x88.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x88 extends Fixed {
+  public static final Fixed24x88 DEFAULT = new Fixed24x88(BigInteger.ZERO);
+
   public Fixed24x88(BigInteger value) {
     super(24, 88, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed24x96.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed24x96 extends Fixed {
+  public static final Fixed24x96 DEFAULT = new Fixed24x96(BigInteger.ZERO);
+
   public Fixed24x96(BigInteger value) {
     super(24, 96, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed32x104.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed32x104 extends Fixed {
+  public static final Fixed32x104 DEFAULT = new Fixed32x104(BigInteger.ZERO);
+
   public Fixed32x104(BigInteger value) {
     super(32, 104, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed32x112.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed32x112 extends Fixed {
+  public static final Fixed32x112 DEFAULT = new Fixed32x112(BigInteger.ZERO);
+
   public Fixed32x112(BigInteger value) {
     super(32, 112, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed32x120.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed32x120 extends Fixed {
+  public static final Fixed32x120 DEFAULT = new Fixed32x120(BigInteger.ZERO);
+
   public Fixed32x120(BigInteger value) {
     super(32, 120, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed32x128.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed32x128 extends Fixed {
+  public static final Fixed32x128 DEFAULT = new Fixed32x128(BigInteger.ZERO);
+
   public Fixed32x128(BigInteger value) {
     super(32, 128, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed32x136.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed32x136 extends Fixed {
+  public static final Fixed32x136 DEFAULT = new Fixed32x136(BigInteger.ZERO);
+
   public Fixed32x136(BigInteger value) {
     super(32, 136, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed32x144.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed32x144 extends Fixed {
+  public static final Fixed32x144 DEFAULT = new Fixed32x144(BigInteger.ZERO);
+
   public Fixed32x144(BigInteger value) {
     super(32, 144, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed32x152.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed32x152 extends Fixed {
+  public static final Fixed32x152 DEFAULT = new Fixed32x152(BigInteger.ZERO);
+
   public Fixed32x152(BigInteger value) {
     super(32, 152, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed32x16.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed32x16 extends Fixed {
+  public static final Fixed32x16 DEFAULT = new Fixed32x16(BigInteger.ZERO);
+
   public Fixed32x16(BigInteger value) {
     super(32, 16, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed32x160.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed32x160 extends Fixed {
+  public static final Fixed32x160 DEFAULT = new Fixed32x160(BigInteger.ZERO);
+
   public Fixed32x160(BigInteger value) {
     super(32, 160, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed32x168.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed32x168 extends Fixed {
+  public static final Fixed32x168 DEFAULT = new Fixed32x168(BigInteger.ZERO);
+
   public Fixed32x168(BigInteger value) {
     super(32, 168, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed32x176.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed32x176 extends Fixed {
+  public static final Fixed32x176 DEFAULT = new Fixed32x176(BigInteger.ZERO);
+
   public Fixed32x176(BigInteger value) {
     super(32, 176, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed32x184.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed32x184 extends Fixed {
+  public static final Fixed32x184 DEFAULT = new Fixed32x184(BigInteger.ZERO);
+
   public Fixed32x184(BigInteger value) {
     super(32, 184, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed32x192.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed32x192 extends Fixed {
+  public static final Fixed32x192 DEFAULT = new Fixed32x192(BigInteger.ZERO);
+
   public Fixed32x192(BigInteger value) {
     super(32, 192, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed32x200.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed32x200 extends Fixed {
+  public static final Fixed32x200 DEFAULT = new Fixed32x200(BigInteger.ZERO);
+
   public Fixed32x200(BigInteger value) {
     super(32, 200, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed32x208.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed32x208 extends Fixed {
+  public static final Fixed32x208 DEFAULT = new Fixed32x208(BigInteger.ZERO);
+
   public Fixed32x208(BigInteger value) {
     super(32, 208, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed32x216.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed32x216 extends Fixed {
+  public static final Fixed32x216 DEFAULT = new Fixed32x216(BigInteger.ZERO);
+
   public Fixed32x216(BigInteger value) {
     super(32, 216, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed32x224.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed32x224 extends Fixed {
+  public static final Fixed32x224 DEFAULT = new Fixed32x224(BigInteger.ZERO);
+
   public Fixed32x224(BigInteger value) {
     super(32, 224, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed32x24.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed32x24 extends Fixed {
+  public static final Fixed32x24 DEFAULT = new Fixed32x24(BigInteger.ZERO);
+
   public Fixed32x24(BigInteger value) {
     super(32, 24, value);
   }

File: src/main/java/org/web3j/abi/datatypes/generated/Fixed32x32.java
Patch:
@@ -6,9 +6,11 @@
 /**
  * <p>Auto generated code.<br>
  * <strong>Do not modifiy!</strong><br>
- * Please use Generator located in project X to update.</p>
+ * Please use {@link org.web3j.codegen.AbiTypesGenerator} to update.</p>
  */
 public class Fixed32x32 extends Fixed {
+  public static final Fixed32x32 DEFAULT = new Fixed32x32(BigInteger.ZERO);
+
   public Fixed32x32(BigInteger value) {
     super(32, 32, value);
   }

File: src/main/java/org/web3j/abi/datatypes/Bool.java
Patch:
@@ -6,6 +6,7 @@
 public class Bool implements Type<Boolean> {
 
     public static final String TYPE_NAME = "bool";
+    public static final Bool DEFAULT = new Bool(false);
 
     private boolean value;
 

File: src/main/java/org/web3j/abi/datatypes/DynamicBytes.java
Patch:
@@ -6,6 +6,7 @@
 public class DynamicBytes extends BytesType {
 
     public static final String TYPE_NAME = "bytes";
+    public static final DynamicBytes DEFAULT = new DynamicBytes(new byte[]{});
 
     public DynamicBytes(byte[] value) {
         super(value, TYPE_NAME);

File: src/main/java/org/web3j/abi/datatypes/Fixed.java
Patch:
@@ -8,6 +8,7 @@
 public class Fixed extends FixedPointType {
 
     public static final String TYPE_NAME = "fixed";
+    public static final Fixed DEFAULT = new Fixed(BigInteger.ZERO);
 
     protected Fixed(int mBitSize, int nBitSize, BigInteger value) {
         super(TYPE_NAME , mBitSize, nBitSize, value);

File: src/main/java/org/web3j/abi/datatypes/Int.java
Patch:
@@ -8,6 +8,7 @@
 public class Int extends IntType {
 
     public static final String TYPE_NAME = "int";
+    public static final Int DEFAULT = new Int(BigInteger.ZERO);
 
     public Int(BigInteger value) {
         // "int" values should be declared as int256 in computing function selectors

File: src/main/java/org/web3j/abi/datatypes/Ufixed.java
Patch:
@@ -8,6 +8,7 @@
 public class Ufixed extends FixedPointType {
 
     public static final String TYPE_NAME = "ufixed";
+    public static final Ufixed DEFAULT = new Ufixed(BigInteger.ZERO);
 
     protected Ufixed(int mBitSize, int nBitSize, BigInteger value) {
         super(TYPE_NAME, mBitSize, nBitSize, value);

File: src/main/java/org/web3j/abi/datatypes/Uint.java
Patch:
@@ -8,6 +8,7 @@
 public class Uint extends IntType {
 
     public static final String TYPE_NAME = "uint";
+    public static final Uint DEFAULT = new Uint(BigInteger.ZERO);
 
     /**
      * This constructor is required by the {@link Address} type.

File: src/main/java/org/web3j/abi/datatypes/Utf8String.java
Patch:
@@ -6,6 +6,7 @@
 public class Utf8String implements Type<String> {
 
     public static final String TYPE_NAME = "string";
+    public static final Utf8String DEFAULT = new Utf8String("");
 
     private String value;
 

File: src/integration-test/java/org/web3j/protocol/core/CoreIT.java
Patch:
@@ -425,7 +425,7 @@ public void testEthGetLogs() throws Exception {
 
     @Test
     public void testEthSubmitWork() throws Exception {
-    
+
     }
 
     @Test

File: src/main/java/org/web3j/abi/TypeDecoder.java
Patch:
@@ -39,7 +39,7 @@ static <T extends Type> T decode(String input, int offset, Class<T> type) {
         if (NumericType.class.isAssignableFrom(type)) {
             return (T) decodeNumeric(input.substring(offset), (Class<NumericType>) type);
         } else if (Bool.class.isAssignableFrom(type)) {
-            return (T) decodeBool(input.substring(offset, offset + MAX_BYTE_LENGTH_FOR_HEX_STRING));
+            return (T) decodeBool(input, offset);
         } else if (Bytes.class.isAssignableFrom(type)) {
             return (T) decodeBytes(input, offset, (Class<Bytes>) type);
         } else if (DynamicBytes.class.isAssignableFrom(type)) {
@@ -125,7 +125,8 @@ static int decodeUintAsInt(String rawInput, int offset) {
         return decode(input, 0, Uint.class).getValue().intValue();
     }
 
-    static Bool decodeBool(String input) {
+    static Bool decodeBool(String rawInput, int offset) {
+        String input = rawInput.substring(offset, offset + MAX_BYTE_LENGTH_FOR_HEX_STRING);
         BigInteger numericValue = Numeric.toBigInt(input);
         boolean value = numericValue.equals(BigInteger.ONE);
         return new Bool(value);

File: src/main/java/org/web3j/protocol/core/methods/request/RawTransaction.java
Patch:
@@ -48,12 +48,12 @@ public static RawTransaction createEtherTransaction(
 
     }
 
-    public static RawTransaction createFunctionCallTransaction(
+    public static RawTransaction createTransaction(
             BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit, String to, String data) {
-        return createFunctionCallTransaction(nonce, gasPrice, gasLimit, to, BigInteger.ZERO, data);
+        return createTransaction(nonce, gasPrice, gasLimit, to, BigInteger.ZERO, data);
     }
 
-    public static RawTransaction createFunctionCallTransaction(
+    public static RawTransaction createTransaction(
             BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit, String to,
             BigInteger value, String data) {
 

File: src/main/java/org/web3j/protocol/core/methods/response/TransactionReceipt.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.math.BigInteger;
 import java.util.List;
-import java.util.Optional;
 
 import org.web3j.utils.Numeric;
 
@@ -92,8 +91,8 @@ public void setGasUsed(String gasUsed) {
         this.gasUsed = gasUsed;
     }
 
-    public Optional<String> getContractAddress() {
-        return Optional.ofNullable(contractAddress);
+    public String getContractAddress() {
+        return contractAddress;
     }
 
     public void setContractAddress(String contractAddress) {

File: src/test/java/org/web3j/abi/TypeDecoderTest.java
Patch:
@@ -17,11 +17,11 @@ public class TypeDecoderTest {
     @Test
     public void testBoolDecode() {
         assertThat(TypeDecoder.decodeBool(
-                "0000000000000000000000000000000000000000000000000000000000000000"),
+                "0000000000000000000000000000000000000000000000000000000000000000", 0),
                 is(new Bool(false)));
 
         assertThat(TypeDecoder.decodeBool(
-                "0000000000000000000000000000000000000000000000000000000000000001"),
+                "0000000000000000000000000000000000000000000000000000000000000001", 0),
                 is(new Bool(true)));
     }
 

File: src/main/java/org/web3j/abi/TypeDecoder.java
Patch:
@@ -39,7 +39,7 @@ static <T extends Type> T decode(String input, int offset, Class<T> type) {
         if (NumericType.class.isAssignableFrom(type)) {
             return (T) decodeNumeric(input.substring(offset), (Class<NumericType>) type);
         } else if (Bool.class.isAssignableFrom(type)) {
-            return (T) decodeBool(input);
+            return (T) decodeBool(input.substring(offset, offset + MAX_BYTE_LENGTH_FOR_HEX_STRING));
         } else if (Bytes.class.isAssignableFrom(type)) {
             return (T) decodeBytes(input, offset, (Class<Bytes>) type);
         } else if (DynamicBytes.class.isAssignableFrom(type)) {

File: src/main/java/org/web3j/protocol/core/DefaultBlockParameterNumber.java
Patch:
@@ -1,5 +1,7 @@
 package org.web3j.protocol.core;
 
+import com.fasterxml.jackson.annotation.JsonValue;
+
 import java.math.BigInteger;
 
 import org.web3j.utils.Numeric;
@@ -16,6 +18,7 @@ public DefaultBlockParameterNumber(BigInteger blockNumber) {
     }
 
     @Override
+    @JsonValue
     public String getValue() {
         return Numeric.encodeQuantity(blockNumber);
     }

File: src/main/java/org/web3j/protocol/core/DefaultBlockParameterNumber.java
Patch:
@@ -1,5 +1,7 @@
 package org.web3j.protocol.core;
 
+import com.fasterxml.jackson.annotation.JsonValue;
+
 import java.math.BigInteger;
 
 import org.web3j.utils.Numeric;
@@ -16,6 +18,7 @@ public DefaultBlockParameterNumber(BigInteger blockNumber) {
     }
 
     @Override
+    @JsonValue
     public String getValue() {
         return Numeric.encodeQuantity(blockNumber);
     }

File: src/main/java/org/web3j/abi/TypeDecoder.java
Patch:
@@ -39,7 +39,7 @@ static <T extends Type> T decode(String input, int offset, Class<T> type) {
         if (NumericType.class.isAssignableFrom(type)) {
             return (T) decodeNumeric(input.substring(offset), (Class<NumericType>) type);
         } else if (Bool.class.isAssignableFrom(type)) {
-            return (T) decodeBool(input);
+            return (T) decodeBool(input.substring(offset, offset + MAX_BYTE_LENGTH_FOR_HEX_STRING));
         } else if (Bytes.class.isAssignableFrom(type)) {
             return (T) decodeBytes(input, offset, (Class<Bytes>) type);
         } else if (DynamicBytes.class.isAssignableFrom(type)) {

File: src/main/java/org/web3j/protocol/core/JsonRpc2_0Web3j.java
Patch:
@@ -297,7 +297,7 @@ public Request<?, org.web3j.protocol.core.methods.response.EthSendTransaction> e
     @Override
     public Request<?, org.web3j.protocol.core.methods.response.EthCall> ethCall(
             Transaction transaction, DefaultBlockParameter defaultBlockParameter) {
-        return new Request<>(
+        return new Request<Object, EthCall>(
                 "eth_call",
                 Arrays.asList(transaction, defaultBlockParameter),
                 ID,

File: src/main/java/org/web3j/protocol/core/methods/response/VoidResponse.java
Patch:
@@ -1,4 +1,4 @@
-package org.web3j.protocol.parity.methods.response;
+package org.web3j.protocol.core.methods.response;
 
 import org.web3j.protocol.core.Response;
 

File: src/main/java/org/web3j/protocol/parity/JsonRpc2_0Parity.java
Patch:
@@ -9,6 +9,7 @@
 import org.web3j.protocol.Web3jService;
 import org.web3j.protocol.core.JsonRpc2_0Web3j;
 import org.web3j.protocol.core.Request;
+import org.web3j.protocol.core.methods.response.VoidResponse;
 import org.web3j.protocol.parity.methods.response.*;
 
 /**

File: src/main/java/org/web3j/protocol/parity/Parity.java
Patch:
@@ -8,6 +8,7 @@
 import org.web3j.protocol.Web3j;
 import org.web3j.protocol.Web3jService;
 import org.web3j.protocol.core.Request;
+import org.web3j.protocol.core.methods.response.VoidResponse;
 import org.web3j.protocol.parity.methods.response.*;
 
 /**

File: src/test/java/org/web3j/crypto/KeysTest.java
Patch:
@@ -86,7 +86,7 @@ public void testGetAddressZeroPadded() {
 
         String value = "1234";
         assertThat(Keys.getAddress("0x" +
-                        Strings.zeros(Keys.PUBLIC_KEY_SIZE_IN_HEX - value.length()) + value),
+                        Strings.zeros(Keys.PUBLIC_KEY_LENGTH_IN_HEX - value.length()) + value),
                 equalTo(expected));
     }
 

File: src/test/java/org/web3j/crypto/SampleKeys.java
Patch:
@@ -23,7 +23,7 @@ public class SampleKeys {
 
     static final ECKeyPair KEY_PAIR = new ECKeyPair(PRIVATE_KEY, PUBLIC_KEY);
 
-    static final Credentials CREDENTIALS = Credentials.create(KEY_PAIR);
+    public static final Credentials CREDENTIALS = Credentials.create(KEY_PAIR);
 
     private SampleKeys() {}
 }

File: src/test/java/org/web3j/protocol/parity/ResponseTest.java
Patch:
@@ -5,6 +5,7 @@
 import org.junit.Test;
 
 import org.web3j.protocol.ResponseTester;
+import org.web3j.protocol.core.methods.response.VoidResponse;
 import org.web3j.protocol.parity.methods.response.*;
 
 import static org.hamcrest.CoreMatchers.equalTo;

File: src/main/java/org/web3j/codegen/SolidityFunctionWrapperGenerator.java
Patch:
@@ -430,11 +430,9 @@ private static void buildTransactionFunction(
                 Arrays.class, Type.class, inputParams, Collections.class,
                 TypeReference.class);
         methodBuilder.addStatement("return executeTransactionAsync(function)");
-
-        return methodBuilder;
     }
 
-    private static void buildEventFunction(
+    private static MethodSpec buildEventFunction(
             AbiDefinition functionDefinition) throws ClassNotFoundException {
 
         String functionName = functionDefinition.getName();

File: src/main/java/org/web3j/codegen/SolidityFunctionWrapperGenerator.java
Patch:
@@ -42,7 +42,7 @@ public class SolidityFunctionWrapperGenerator {
     private static final String GAS_LIMIT = "gasLimit";
 
     private static final String CODEGEN_WARNING = "<p>Auto generated code.<br>\n" +
-            "<strong>Do not modifiy!</strong><br>\n" +
+            "<strong>Do not modify!</strong><br>\n" +
             "Please use {@link " + SolidityFunctionWrapperGenerator.class.getName() +
             "} to update.</p>\n";
 

File: src/main/java/org/web3j/protocol/rx/JsonRpc2_0Rx.java
Patch:
@@ -77,7 +77,7 @@ public Observable<Transaction> pendingTransactionObservable(long pollingInterval
 
     public Observable<EthBlock> blockObservable(
             boolean fullTransactionObjects, long pollingInterval) {
-        return this.ethBlockHashObservable(pollingInterval)
+        return ethBlockHashObservable(pollingInterval)
                 .flatMap(blockHash ->
                         web3j.ethGetBlockByHash(blockHash, fullTransactionObjects).observable());
     }

File: src/main/java/org/web3j/crypto/Keys.java
Patch:
@@ -5,6 +5,8 @@
 import java.security.spec.ECGenParameterSpec;
 import java.util.Arrays;
 
+import org.bouncycastle.jce.provider.BouncyCastleProvider;
+
 import org.web3j.utils.Numeric;
 import org.web3j.utils.Strings;
 
@@ -21,7 +23,7 @@ public class Keys {
     static final int PUBLIC_KEY_SIZE_IN_HEX = 64 << 1;
 
     static {
-        Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
+        Security.addProvider(new BouncyCastleProvider());
     }
 
     private Keys() { }

File: src/main/java/org/web3j/abi/FunctionReturnDecoder.java
Patch:
@@ -93,18 +93,18 @@ private static List<Type> build(
                 if (DynamicArray.class.isAssignableFrom(type)) {
                     result = TypeDecoder.decodeDynamicArray(
                             input, hexStringDataOffset, typeReference);
+                    offset += MAX_BYTE_LENGTH_FOR_HEX_STRING;
                 } else if (StaticArray.class.isAssignableFrom(type)) {
                     int length = ((TypeReference.StaticArrayTypeReference) typeReference).getSize();
                     result = TypeDecoder.decodeStaticArray(
                             input, hexStringDataOffset, typeReference, length);
+                    offset += length * MAX_BYTE_LENGTH_FOR_HEX_STRING;
                 } else {
                     result = TypeDecoder.decode(input, hexStringDataOffset, type);
+                    offset += MAX_BYTE_LENGTH_FOR_HEX_STRING;
                 }
                 results.add(result);
 
-                offset += TypeDecoder.getSingleElementLength(
-                        input, hexStringDataOffset + MAX_BYTE_LENGTH_FOR_HEX_STRING, type)
-                        * MAX_BYTE_LENGTH_FOR_HEX_STRING;
             } catch (ClassNotFoundException e) {
                 throw new UnsupportedOperationException("Invalid class reference provided", e);
             }

File: src/test/java/org/web3j/crypto/SampleKeys.java
Patch:
@@ -13,8 +13,8 @@ public class SampleKeys {
     static final String PUBLIC_KEY_STRING =
             "0x506bc1dc099358e5137292f4efdd57e400f29ba5132aa5d12b18dac1c1f6aab" +
             "a645c0b7b58158babbfa6c6cd5a48aa7340a8749176b120e8516216787a13dc76";
-    static final String ADDRESS = "0xef678007d18427e6022059dbc264f27507cd1ffc";
-    static final String ADDRESS_NO_PREFIX = Numeric.cleanHexPrefix(ADDRESS);
+    public static final String ADDRESS = "0xef678007d18427e6022059dbc264f27507cd1ffc";
+    public static final String ADDRESS_NO_PREFIX = Numeric.cleanHexPrefix(ADDRESS);
 
     static final String PASSWORD = "Insecure Pa55w0rd";
 

File: src/main/java/org/web3j/console/WalletManager.java
Patch:
@@ -79,7 +79,7 @@ Credentials getCredentials(File walletFile) {
     private Credentials loadWalletFile(File walletFile) {
         while (true) {
             char[] password = console.readPassword(
-                    "Please enter your existing your wallet file password: ");
+                    "Please enter your existing wallet file password: ");
             String currentPassword = new String(password);
             try {
                 return WalletUtils.loadCredentials(currentPassword, walletFile);

File: src/test/java/org/web3j/codegen/SolidityFunctionWrapperGeneratorTest.java
Patch:
@@ -94,7 +94,7 @@ public void testContractsGeneration() throws Exception {
 
     @Test
     public void testSimpleStorageGeneration() throws Exception {
-        testCodeGeneration("simpleStorage", "SimpleStorage");
+        testCodeGeneration("simplestorage", "SimpleStorage");
     }
 
     @Test

File: src/main/java/org/web3j/codegen/SolidityFunctionWrapperGenerator.java
Patch:
@@ -134,15 +134,15 @@ private void generate() throws IOException, ClassNotFoundException {
 
         File binaryFile = new File(binaryFileLocation);
         if (!binaryFile.exists()) {
-            exitError("Invalid input binary file specified");
+            exitError("Invalid input binary file specified: " + binaryFileLocation);
         }
 
         byte[] bytes = Files.readAllBytes(Paths.get(binaryFile.toURI()));
         String binary = new String(bytes);
 
         File absFile = new File(absFileLocation);
         if (!absFile.exists() || !absFile.canRead()) {
-            exitError("Invalid input ABI file specified");
+            exitError("Invalid input ABI file specified: " + absFileLocation);
         }
         String fileName = absFile.getName();
         String contractName = getFileNameNoExtension(fileName);

File: src/main/java/org/web3j/console/Runner.java
Patch:
@@ -30,10 +30,10 @@ public static void main(String[] args) throws Exception {
         } else {
             switch (args[0]) {
                 case "wallet":
-                    WalletRunner.main(tail(args));
+                    WalletRunner.run(tail(args));
                     break;
                 case "solidity":
-                    SolidityFunctionWrapperGenerator.main(tail(args));
+                    SolidityFunctionWrapperGenerator.run(tail(args));
                     break;
                 default:
                     Console.exitError(USAGE);

File: src/main/java/org/web3j/console/WalletUpdater.java
Patch:
@@ -48,7 +48,7 @@ private void run(String walletFileLocation) {
             if (!walletFile.delete()) {
                 exitError("Unable to remove wallet file\n");
             } else {
-                console.printf("File successfully removed\n");
+                console.printf("Deleted previous wallet file: %s\n", walletFile.getName());
             }
         }
     }

File: src/main/java/org/web3j/crypto/WalletUtils.java
Patch:
@@ -55,7 +55,7 @@ public static Credentials loadCredentials(String password, File source)
 
     private static String getWalletFileName(WalletFile walletFile) {
         DateTimeFormatter format = DateTimeFormatter.ofPattern(
-                "'UTC--'yyyy-MM-dd'T'hh-mm-ss.nVV'--'");
+                "'UTC--'yyyy-MM-dd'T'HH-mm-ss.nVV'--'");
         ZonedDateTime now = ZonedDateTime.now(ZoneOffset.UTC);
 
         return now.format(format) + walletFile.getAddress() + ".json";

File: src/main/java/org/web3j/crypto/WalletFile.java
Patch:
@@ -41,7 +41,7 @@ public void setCrypto(Crypto crypto) {
 
     @JsonSetter("Crypto")  // older wallet files may have this attribute name
     public void setCryptoV1(Crypto crypto) {
-        this.crypto = crypto;
+        setCrypto(crypto);
     }
 
     public String getId() {

File: src/test/java/org/web3j/protocol/parity/RequestTest.java
Patch:
@@ -80,7 +80,7 @@ public void testPersonalNewAccountFromWallet() throws Exception {
 
         web3j.personalNewAccountFromWallet(walletFile, "password").send();
 
-        verifyResult("{\"jsonrpc\":\"2.0\",\"method\":\"personal_newAccountFromWallet\",\"params\":[{\"address\":\"0x...\",\"crypto\":{\"cipher\":\"CIPHER\",\"ciphertext\":\"CIPHERTEXT\",\"cipherparams\":{\"iv\":\"IV\"},\"kdf\":\"KDF\",\"kdfparams\":{\"dklen\":32,\"n\":1,\"p\":10,\"r\":100,\"salt\":\"SALT\"},\"mac\":\"MAC\"},\"id\":\"cab06c9e-79a9-48ea-afc7-d3bdb3a59526\",\"version\":1},\"password\"],\"id\":1}");
+        verifyResult("{\"jsonrpc\":\"2.0\",\"method\":\"personal_newAccountFromWallet\",\"params\":[{\"address\":\"0x...\",\"id\":\"cab06c9e-79a9-48ea-afc7-d3bdb3a59526\",\"version\":1,\"crypto\":{\"cipher\":\"CIPHER\",\"ciphertext\":\"CIPHERTEXT\",\"cipherparams\":{\"iv\":\"IV\"},\"kdf\":\"KDF\",\"kdfparams\":{\"dklen\":32,\"n\":1,\"p\":10,\"r\":100,\"salt\":\"SALT\"},\"mac\":\"MAC\"}},\"password\"],\"id\":1}");
     }
 
     @Test

File: src/main/java/org/web3j/abi/ManagedTransaction.java
Patch:
@@ -22,9 +22,6 @@
  */
 public abstract class ManagedTransaction {
 
-    private static final BigInteger GAS_PRICE = BigInteger.valueOf(50_000_000_000L);
-    private static final BigInteger GAS_LIMIT = BigInteger.valueOf(2_000_000);
-
     private static final int SLEEP_DURATION = 15000;
     private static final int ATTEMPTS = 40;
 

File: src/main/java/org/web3j/abi/Transfer.java
Patch:
@@ -102,11 +102,11 @@ public static TransactionReceipt sendFunds(
         return new Transfer(web3j, credentials).send(toAddress, value, unit);
     }
 
-    public static TransactionReceipt sendFundsAsync(
+    public static Future<TransactionReceipt> sendFundsAsync(
             Web3j web3j, Credentials credentials,
             String toAddress, BigDecimal value, Convert.Unit unit) throws InterruptedException,
             ExecutionException, TransactionTimeoutException {
 
-        return new Transfer(web3j, credentials).send(toAddress, value, unit);
+        return new Transfer(web3j, credentials).sendFundsAsync(toAddress, value, unit);
     }
 }

File: src/main/java/org/web3j/console/WalletCreator.java
Patch:
@@ -8,6 +8,7 @@
 
 import org.web3j.crypto.CipherException;
 import org.web3j.crypto.WalletUtils;
+import org.web3j.utils.Console;
 
 /**
  * Simple class for creating a wallet file.
@@ -29,7 +30,7 @@ private void run() {
                     " successfully created in: " + destinationDir + "\n");
         } catch (CipherException|IOException|InvalidAlgorithmParameterException|
                 NoSuchAlgorithmException|NoSuchProviderException e) {
-            exitError(e);
+            Console.exitError(e);
         }
     }
 }

File: src/main/java/org/web3j/crypto/Keys.java
Patch:
@@ -16,6 +16,8 @@ public class Keys {
     static final int PRIVATE_KEY_SIZE = 32;
     private static final int PUBLIC_KEY_SIZE = 64;
 
+    public static final int ADDRESS_LENGTH_IN_HEX = 40;
+
     static {
         Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
     }
@@ -50,7 +52,7 @@ public static String getAddress(ECKeyPair ecKeyPair) {
 
     public static String getAddress(String publicKey) {
         String hash = Hash.sha3(publicKey);
-        return hash.substring(hash.length() - 40);  // right most 160 bits
+        return hash.substring(hash.length() - ADDRESS_LENGTH_IN_HEX);  // right most 160 bits
     }
 
     public static String getAddress(BigInteger publicKey) {

File: src/main/java/org/web3j/protocol/ObjectMapperFactory.java
Patch:
@@ -1,6 +1,7 @@
 package org.web3j.protocol;
 
 import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.MapperFeature;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.ObjectReader;
 

File: src/main/java/org/web3j/protocol/http/HttpService.java
Patch:
@@ -23,6 +23,8 @@
  */
 public class HttpService implements Web3jService {
 
+    public static final String DEFAULT_URL = "http://localhost:8545/";
+
     private CloseableHttpClient httpClient =
             HttpClients.custom().setConnectionManagerShared(true).build();
 
@@ -31,7 +33,7 @@ public class HttpService implements Web3jService {
     private final String url;
 
     public HttpService() {
-        this.url = "http://localhost:8545/";
+        this.url = DEFAULT_URL;
     }
 
     public HttpService(String url) {

File: src/test/java/org/web3j/abi/ConsoleTest.java
Patch:
@@ -10,7 +10,7 @@
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 
-public class UtilsTest {
+public class ConsoleTest {
 
     @Test
     public void testGetTypeName() throws ClassNotFoundException {

File: src/integration-test/java/org/web3j/protocol/scenarios/Scenario.java
Patch:
@@ -71,7 +71,8 @@ public void setUp() {
 
     boolean unlockAccount() throws Exception {
         PersonalUnlockAccount personalUnlockAccount =
-                parity.personalUnlockAccount(ALICE.getAddress(), WALLET_PASSWORD, ACCOUNT_UNLOCK_DURATION)
+                parity.personalUnlockAccount(
+                        ALICE.getAddress(), WALLET_PASSWORD, ACCOUNT_UNLOCK_DURATION)
                         .sendAsync().get();
         return personalUnlockAccount.accountUnlocked();
     }

File: src/test/java/org/web3j/protocol/parity/RequestTest.java
Patch:
@@ -94,7 +94,7 @@ public void testPersonalUnlockAccount() throws Exception {
     public void testPersonalUnlockAccountNoDuration() throws Exception {
         web3j.personalUnlockAccount("0xfc390d8a8ddb591b010fda52f4db4945742c3809", "hunter2").send();
 
-        verifyResult("{\"jsonrpc\":\"2.0\",\"method\":\"personal_unlockAccount\",\"params\":[\"0xfc390d8a8ddb591b010fda52f4db4945742c3809\",\"hunter2\"],\"id\":1}");
+        verifyResult("{\"jsonrpc\":\"2.0\",\"method\":\"personal_unlockAccount\",\"params\":[\"0xfc390d8a8ddb591b010fda52f4db4945742c3809\",\"hunter2\",null],\"id\":1}");
     }
 
     @Test

File: src/integration-test/java/org/web3j/protocol/scenarios/FunctionWrappersIT.java
Patch:
@@ -27,7 +27,7 @@ public class FunctionWrappersIT extends Scenario {
 
     @Test
     public void testFibonacci() throws Exception {
-        Fibonacci fibonacci = new Fibonacci(
+        Fibonacci fibonacci = Fibonacci.load(
                 "0x3c05b2564139fb55820b18b72e94b2178eaace7d", Web3j.build(new HttpService()), ALICE);
 
         Uint256 result = fibonacci.fibonacci(new Uint256(BigInteger.valueOf(10))).get();
@@ -36,7 +36,7 @@ public void testFibonacci() throws Exception {
 
     @Test
     public void testFibonacciNotify() throws Exception {
-        Fibonacci fibonacci = new Fibonacci(
+        Fibonacci fibonacci = Fibonacci.load(
                 "0x3c05b2564139fb55820b18b72e94b2178eaace7d", Web3j.build(new HttpService()), ALICE);
 
         TransactionReceipt transactionReceipt = fibonacci.fibonacciNotify(

File: src/integration-test/java/org/web3j/protocol/scenarios/HumanStandardTokenGeneratedIT.java
Patch:
@@ -84,7 +84,7 @@ public void testContract() throws Exception {
 
         // Bob requires his own contract instance
         HumanStandardToken bobsContract =
-                new HumanStandardToken(contract.getContractAddress(), parity, BOB);
+                HumanStandardToken.load(contract.getContractAddress(), parity, BOB);
 
         TransactionReceipt bobTransferReceipt = bobsContract.transferFrom(
                 new Address(ALICE.getAddress()),

File: src/main/java/org/web3j/crypto/Credentials.java
Patch:
@@ -24,7 +24,7 @@ public String getAddress() {
     }
 
     public static Credentials create(ECKeyPair ecKeyPair) {
-        String address = Keys.getAddress(ecKeyPair);
+        String address = Numeric.prependHexPrefix(Keys.getAddress(ecKeyPair));
         return new Credentials(ecKeyPair, address);
     }
 

File: src/main/java/org/web3j/protocol/core/methods/request/Transaction.java
Patch:
@@ -36,7 +36,7 @@ public Transaction(String from, BigInteger nonce, BigInteger gasPrice, BigIntege
         this.value = value;
 
         if (data != null) {
-            this.data = Numeric.appendHexPrefix(data);
+            this.data = Numeric.prependHexPrefix(data);
         }
 
         this.nonce = nonce;

File: src/main/java/org/web3j/utils/Numeric.java
Patch:
@@ -65,7 +65,7 @@ public static String cleanHexPrefix(String input) {
         }
     }
 
-    public static String appendHexPrefix(String input) {
+    public static String prependHexPrefix(String input) {
         if (!containsHexPrefix(input)) {
             return HEX_PREFIX + input;
         } else {

File: src/test/java/org/web3j/crypto/KeysTest.java
Patch:
@@ -48,12 +48,13 @@ public void testCreateEcKeyPair() throws Exception {
     @Test
     public void testGetAddressString() {
         String publicKey = SampleKeys.PUBLIC_KEY_STRING;
-        assertThat(Keys.getAddress(publicKey), is(SampleKeys.ADDRESS));
+        assertThat(Keys.getAddress(publicKey), is(SampleKeys.ADDRESS_NO_PREFIX));
     }
 
     @Test
     public void testGetAddressBigInteger() {
-        assertThat(Keys.getAddress(SampleKeys.PUBLIC_KEY), is(SampleKeys.ADDRESS));
+        assertThat(Keys.getAddress(SampleKeys.PUBLIC_KEY),
+                is(SampleKeys.ADDRESS_NO_PREFIX));
     }
 
     @Test

File: src/test/java/org/web3j/crypto/SampleKeys.java
Patch:
@@ -13,7 +13,8 @@ public class SampleKeys {
     static final String PUBLIC_KEY_STRING =
             "0x506bc1dc099358e5137292f4efdd57e400f29ba5132aa5d12b18dac1c1f6aab" +
             "a645c0b7b58158babbfa6c6cd5a48aa7340a8749176b120e8516216787a13dc76";
-    static final String ADDRESS = "ef678007d18427e6022059dbc264f27507cd1ffc";
+    static final String ADDRESS = "0xef678007d18427e6022059dbc264f27507cd1ffc";
+    static final String ADDRESS_NO_PREFIX = Numeric.cleanHexPrefix(ADDRESS);
 
     static final String PASSWORD = "Insecure Pa55w0rd";
 

File: src/test/java/org/web3j/crypto/WalletTest.java
Patch:
@@ -18,7 +18,7 @@ public class WalletTest {
     @Test
     public void testCreate() throws Exception {
         WalletFile walletFile = Wallet.create(SampleKeys.PASSWORD, SampleKeys.KEY_PAIR);
-        assertThat(walletFile.getAddress(), is(SampleKeys.ADDRESS));
+        assertThat(walletFile.getAddress(), is(SampleKeys.ADDRESS_NO_PREFIX));
     }
 
     @Test

File: src/integration-test/java/org/web3j/protocol/core/CoreIT.java
Patch:
@@ -311,7 +311,7 @@ public void testEthGetTransactionReceipt() throws Exception {
         EthGetTransactionReceipt ethGetTransactionReceipt = web3j.ethGetTransactionReceipt(
                 config.validTransactionHash()).send();
         assertTrue(ethGetTransactionReceipt.getTransactionReceipt().isPresent());
-        EthGetTransactionReceipt.TransactionReceipt transactionReceipt =
+        TransactionReceipt transactionReceipt =
                 ethGetTransactionReceipt.getTransactionReceipt().get();
         assertThat(transactionReceipt.getTransactionHash(), is(config.validTransactionHash()));
     }

File: src/integration-test/java/org/web3j/protocol/core/MordenTestnetConfig.java
Patch:
@@ -86,7 +86,7 @@ public BigInteger validUncleBlock() {
     @Override
     public String encodedEvent() {
 
-        Event event = new Event<>("Notify",
+        Event event = new Event("Notify",
                 Collections.singletonList(new TypeReference<Uint>() {}),
                 Collections.singletonList(new TypeReference<Uint>() {}));
 

File: src/integration-test/java/org/web3j/protocol/scenarios/CreateRawTransactionIT.java
Patch:
@@ -8,8 +8,8 @@
 import org.web3j.crypto.TransactionEncoder;
 import org.web3j.protocol.core.DefaultBlockParameterName;
 import org.web3j.protocol.core.methods.response.EthGetTransactionCount;
-import org.web3j.protocol.core.methods.response.EthGetTransactionReceipt;
 import org.web3j.protocol.core.methods.response.EthSendTransaction;
+import org.web3j.protocol.core.methods.response.TransactionReceipt;
 import org.web3j.utils.Convert;
 import org.web3j.utils.Numeric;
 
@@ -37,7 +37,7 @@ public void testTransferEther() throws Exception {
 
         assertFalse(transactionHash.isEmpty());
 
-        EthGetTransactionReceipt.TransactionReceipt transactionReceipt =
+        TransactionReceipt transactionReceipt =
                 waitForTransactionReceipt(transactionHash);
 
         assertThat(transactionReceipt.getTransactionHash(), is(transactionHash));
@@ -57,7 +57,7 @@ public void testDeploySmartContract() throws Exception {
 
         assertFalse(transactionHash.isEmpty());
 
-        EthGetTransactionReceipt.TransactionReceipt transactionReceipt =
+        TransactionReceipt transactionReceipt =
                 waitForTransactionReceipt(transactionHash);
 
         assertThat(transactionReceipt.getTransactionHash(), is(transactionHash));

File: src/integration-test/java/org/web3j/protocol/scenarios/DeployContractIT.java
Patch:
@@ -12,7 +12,7 @@
 import org.web3j.abi.datatypes.Uint;
 import org.web3j.protocol.core.DefaultBlockParameterName;
 import org.web3j.protocol.core.methods.request.Transaction;
-import org.web3j.protocol.core.methods.response.EthGetTransactionReceipt;
+import org.web3j.protocol.core.methods.response.TransactionReceipt;
 
 import static junit.framework.TestCase.assertFalse;
 import static org.hamcrest.core.Is.is;
@@ -33,7 +33,7 @@ public void testContractCreation() throws Exception {
         String transactionHash = sendTransaction();
         assertFalse(transactionHash.isEmpty());
 
-        EthGetTransactionReceipt.TransactionReceipt transactionReceipt =
+        TransactionReceipt transactionReceipt =
                 waitForTransactionReceipt(transactionHash);
 
         assertThat(transactionReceipt.getTransactionHash(), is(transactionHash));

File: src/integration-test/java/org/web3j/protocol/scenarios/GreeterContractIT.java
Patch:
@@ -11,11 +11,10 @@
 import org.web3j.abi.FunctionReturnDecoder;
 import org.web3j.abi.TypeReference;
 import org.web3j.abi.datatypes.Function;
-import org.web3j.abi.datatypes.Type;
 import org.web3j.abi.datatypes.Utf8String;
 import org.web3j.protocol.core.DefaultBlockParameterName;
 import org.web3j.protocol.core.methods.request.Transaction;
-import org.web3j.protocol.core.methods.response.EthGetTransactionReceipt;
+import org.web3j.protocol.core.methods.response.TransactionReceipt;
 
 import static junit.framework.TestCase.assertFalse;
 import static org.hamcrest.core.Is.is;
@@ -40,7 +39,7 @@ public void testGreeterContract() throws Exception {
         String createTransactionHash = sendCreateContractTransaction();
         assertFalse(createTransactionHash.isEmpty());
 
-        EthGetTransactionReceipt.TransactionReceipt createTransactionReceipt =
+        TransactionReceipt createTransactionReceipt =
                 waitForTransactionReceipt(createTransactionHash);
 
         assertThat(createTransactionReceipt.getTransactionHash(), is(createTransactionHash));

File: src/integration-test/java/org/web3j/protocol/scenarios/SendEtherIT.java
Patch:
@@ -5,8 +5,8 @@
 import org.junit.Test;
 
 import org.web3j.protocol.core.methods.request.Transaction;
-import org.web3j.protocol.core.methods.response.EthGetTransactionReceipt;
 import org.web3j.protocol.core.methods.response.EthSendTransaction;
+import org.web3j.protocol.core.methods.response.TransactionReceipt;
 import org.web3j.utils.Convert;
 
 import static junit.framework.TestCase.assertFalse;
@@ -33,7 +33,7 @@ public void testTransferEther() throws Exception {
 
         assertFalse(transactionHash.isEmpty());
 
-        EthGetTransactionReceipt.TransactionReceipt transactionReceipt =
+        TransactionReceipt transactionReceipt =
                 waitForTransactionReceipt(transactionHash);
 
         assertThat(transactionReceipt.getTransactionHash(), is(transactionHash));

File: src/main/java/org/web3j/abi/TypeDecoder.java
Patch:
@@ -18,7 +18,7 @@
  * <a href="https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI">here</a>.
  * </p>
  */
-public class TypeDecoder {
+class TypeDecoder {
 
     static final int MAX_BYTE_LENGTH_FOR_HEX_STRING = Type.MAX_BYTE_LENGTH << 1;
 
@@ -35,7 +35,7 @@ static <T extends Type> int getSingleElementLength(String input, int offset, Cla
     }
 
     @SuppressWarnings("unchecked")
-    public static <T extends Type> T decode(String input, int offset, Class<T> type) {
+    static <T extends Type> T decode(String input, int offset, Class<T> type) {
         if (NumericType.class.isAssignableFrom(type)) {
             return (T) decodeNumeric(input.substring(offset), (Class<NumericType>) type);
         } else if (Bool.class.isAssignableFrom(type)) {
@@ -67,7 +67,7 @@ public static <T extends Array> T decode(String input, int offset, TypeReference
         }
     }
 
-    public static <T extends Type> T decode(String input, Class<T> type) {
+    static <T extends Type> T decode(String input, Class<T> type) {
         return decode(input, 0, type);
     }
 

File: src/main/java/org/web3j/utils/Convert.java
Patch:
@@ -5,7 +5,7 @@
 /**
  * Ethereum unit conversion functions.
  */
-public final class Convert {
+public final class  Convert {
     private Convert() { }
 
     public static BigDecimal fromWei(String number, Unit unit) {

File: src/test/java/org/web3j/protocol/core/ResponseTest.java
Patch:
@@ -706,8 +706,8 @@ public void testeEthGetTransactionReceipt() {
                         "}"
         );
 
-        EthGetTransactionReceipt.TransactionReceipt transactionReceipt =
-                new EthGetTransactionReceipt.TransactionReceipt(
+        TransactionReceipt transactionReceipt =
+                new TransactionReceipt(
                         "0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238",
                         "0x1",
                         "0xc6ef2fc5426d6ad6fd9e2a26abeab0aa2411b7ab17f30a99d3cb96aed1d1055b",

File: src/integration-test/java/org/web3j/protocol/core/MordenTestnetConfig.java
Patch:
@@ -62,6 +62,7 @@ public String validContractCode() {
     public Transaction buildTransaction() {
         return Transaction.createContractTransaction(
                 validAccount(),
+                BigInteger.ZERO,  // nonce
                 Transaction.DEFAULT_GAS,
                 validContractCode()
         );

File: src/integration-test/java/org/web3j/protocol/scenarios/SignTransactionIT.java
Patch:
@@ -30,7 +30,7 @@ public void testSignTransaction() throws Exception {
         byte[] encoded = TransactionEncoder.encode(rawTransaction);
         byte[] hashed = Hash.sha3(encoded);
 
-        EthSign ethSign = parity.ethSign(WALLET_ADDRESS, Numeric.toHexString(hashed)).sendAsync().get();
+        EthSign ethSign = parity.ethSign(ALICE.getAddress(), Numeric.toHexString(hashed)).sendAsync().get();
 
         String signature = ethSign.getSignature();
         assertNotNull(signature);

File: src/main/java/org/web3j/abi/TypeDecoder.java
Patch:
@@ -23,7 +23,9 @@ public class TypeDecoder {
     static final int MAX_BYTE_LENGTH_FOR_HEX_STRING = Type.MAX_BYTE_LENGTH << 1;
 
     static <T extends Type> int getSingleElementLength(String input, int offset, Class<T> type) {
-        if (DynamicBytes.class.isAssignableFrom(type)
+        if (input.length() == offset) {
+            return 0;
+        } else if (DynamicBytes.class.isAssignableFrom(type)
                 || Utf8String.class.isAssignableFrom(type)) {
             // length field + data value
             return (decodeUintAsInt(input, offset) / Type.MAX_BYTE_LENGTH) + 2;

File: src/integration-test/java/org/web3j/protocol/scenarios/CreateRawTransactionIT.java
Patch:
@@ -24,9 +24,6 @@
  */
 public class CreateRawTransactionIT extends Scenario {
 
-    private static final BigInteger GAS_PRICE = BigInteger.valueOf(10000000000L);
-    private static final BigInteger GAS_LIMIT = BigInteger.valueOf(1000000);
-
     // testnet
     private static final String PRIVATE_KEY = "";  // 32 byte hex value
     private static final String PUBLIC_KEY = "0x";  // 64 byte hex value

File: src/main/java/org/web3j/abi/FunctionReturnDecoder.java
Patch:
@@ -57,7 +57,7 @@ private static <T extends Type> int getDataOffset(String input, int offset, Clas
         if (DynamicBytes.class.isAssignableFrom(type)
                 || Utf8String.class.isAssignableFrom(type)
                 || DynamicArray.class.isAssignableFrom(type)) {
-            return TypeDecoder.decodeUintAsInt(input, offset) * MAX_BYTE_LENGTH_FOR_HEX_STRING;
+            return TypeDecoder.decodeUintAsInt(input, offset) << 1;
         } else {
             return offset;
         }

File: src/main/java/org/web3j/protocol/core/methods/response/EthBlock.java
Patch:
@@ -19,14 +19,13 @@
 import org.web3j.protocol.core.Response;
 
 /**
- * <p>Block object returned by:
+ * Block object returned by:
  * <ul>
  * <li>eth_getBlockByHash</li>
  * <li>eth_getBlockByNumber</li>
  * <li>eth_getUncleByBlockHashAndIndex</li>
  * <li>eth_getUncleByBlockNumberAndIndex</li>
  * </ul>
- * </p>
  *
  * <p>See
  * <a href="https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_gettransactionbyhash">docs</a>

File: src/main/java/org/web3j/protocol/core/methods/response/EthLog.java
Patch:
@@ -16,14 +16,13 @@
 import org.web3j.protocol.core.Response;
 
 /**
- * <p>Log object returned by:
+ * Log object returned by:
  * <ul>
  * <li>eth_getFilterChanges</li>
  * <li>eth_getFilterLogs</li>
  * <li>eth_getLogs</li>
  * </ul>
- * </p>
- * <p>
+ *
  * <p>See
  * <a href="https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getfilterchanges">docs</a>
  * for further details.</p>

File: src/main/java/org/web3j/protocol/core/methods/response/EthTransaction.java
Patch:
@@ -13,15 +13,15 @@
 import org.web3j.protocol.core.Response;
 
 /**
- * <p>Transaction object returned by:
+ * Transaction object returned by:
  * <ul>
  * <li>eth_getTransactionByHash</li>
  * <li>eth_getTransactionByBlockHashAndIndex</li>
  * <li>eth_getTransactionByBlockNumberAndIndex</li>
  * </ul>
- * </p>
+ *
  * <p>This differs slightly from the request {@link EthSendTransaction} Transaction object.</p>
- * <p>
+ *
  * <p>See
  * <a href="https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_gettransactionbyhash">docs</a>
  * for further details.</p>

File: src/main/java/org/web3j/protocol/core/methods/response/Log.java
Patch:
@@ -8,7 +8,6 @@
 
 /**
  * <p>Log object used by {@link EthLog} and {@link EthGetTransactionReceipt}.</p>
- * <p>
  * <p>It's not clear in the
  * <a href="https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_newfilter">docs</a>
  * If only a list of hashes are returned for filters created with eth_newBlockFilter or

File: src/main/java/org/web3j/protocol/core/methods/response/ShhMessages.java
Patch:
@@ -7,13 +7,12 @@
 import org.web3j.protocol.core.Response;
 
 /**
- * <p>Whisper messages returned by:
+ * Whisper messages returned by:
  * <ul>
  * <li>shh_getFilterChanges</li>
  * <li>shh_getMessages</li>
  * </ul>
- * </p>
- * <p>
+ *
  * <p>See
  * <a href="https://github.com/ethereum/wiki/wiki/JSON-RPC#shh_getfilterchanges">docs</a>
  * for further details.</p>

File: src/main/java/org/web3j/protocol/parity/methods/response/NewAccountIdentifier.java
Patch:
@@ -3,13 +3,12 @@
 import org.web3j.protocol.core.Response;
 
 /**
- * <p>Account id object returned by:
+ * Account id object returned by:
  * <ul>
  * <li>personal_newAccount</li>
  * <li>personal_newAccountFromPhrase</li>
  * <li>personal_newAccountFromWallet</li>
  * </ul>
- * </p>
  */
 public class NewAccountIdentifier extends Response<String> {
     public String getAccountId() {

File: src/main/java/org/web3j/protocol/parity/methods/response/VoidResponse.java
Patch:
@@ -3,12 +3,11 @@
 import org.web3j.protocol.core.Response;
 
 /**
- * <p>Null response object returned by:
+ * Null response object returned by:
  * <ul>
  * <li>personal_setAccountName</li>
  * <li>personal_setAccountMeta</li>
  * </ul>
- * </p>
  */
 public class VoidResponse extends Response<Void> {
     public boolean isValid() {

File: src/test/java/org/web3j/protocol/parity/RequestTest.java
Patch:
@@ -75,14 +75,14 @@ public void testPersonalNewAccountFromWallet() throws Exception {
     public void testPersonalUnlockAccount() throws Exception {
         web3j.personalUnlockAccount("0xfc390d8a8ddb591b010fda52f4db4945742c3809", "hunter2", BigInteger.ONE).send();
 
-        verifyResult("{\"jsonrpc\":\"2.0\",\"method\":\"personal_unlockAccount\",\"params\":[\"0xfc390d8a8ddb591b010fda52f4db4945742c3809\",\"hunter2\",\"0x1\"],\"id\":1}");
+        verifyResult("{\"jsonrpc\":\"2.0\",\"method\":\"personal_unlockAccount\",\"params\":[\"0xfc390d8a8ddb591b010fda52f4db4945742c3809\",\"hunter2\",1],\"id\":1}");
     }
 
     @Test
     public void testPersonalUnlockAccountNoDuration() throws Exception {
         web3j.personalUnlockAccount("0xfc390d8a8ddb591b010fda52f4db4945742c3809", "hunter2").send();
 
-        verifyResult("{\"jsonrpc\":\"2.0\",\"method\":\"personal_unlockAccount\",\"params\":[\"0xfc390d8a8ddb591b010fda52f4db4945742c3809\",\"hunter2\",null],\"id\":1}");
+        verifyResult("{\"jsonrpc\":\"2.0\",\"method\":\"personal_unlockAccount\",\"params\":[\"0xfc390d8a8ddb591b010fda52f4db4945742c3809\",\"hunter2\"],\"id\":1}");
     }
 
     @Test
@@ -100,7 +100,7 @@ public void testPersonalSignAndSendTransaction() throws Exception {
                 "password"
         ).send();
 
-        verifyResult("{\"jsonrpc\":\"2.0\",\"method\":\"personal_signAndSendTransaction\",\"params\":[{\"from\":\"FROM\",\"to\":\"TO\",\"gas\":\"0x1\",\"gasPrice\":\"0xa\",\"value\":\"0x0\",\"data\":\"DATA\",\"nonce\":\"0x1\"},\"password\"],\"id\":1}");
+        verifyResult("{\"jsonrpc\":\"2.0\",\"method\":\"personal_signAndSendTransaction\",\"params\":[{\"from\":\"FROM\",\"to\":\"TO\",\"gas\":\"0x1\",\"gasPrice\":\"0xa\",\"value\":\"0x0\",\"data\":\"0xDATA\",\"nonce\":\"0x1\"},\"password\"],\"id\":1}");
     }
 
     @Test

File: src/integration-test/java/org/web3j/protocol/scenarios/DeployContractIT.java
Patch:
@@ -57,7 +57,7 @@ public void testContractCreation() throws Exception {
         List<Uint> uint = FunctionReturnDecoder.decode(
                 responseValue, function.getOutputParameters());
         assertThat(uint.size(), is(1));
-        assertThat(uint.get(0).getValue(), equalTo(BigInteger.valueOf(55)));
+        assertThat(uint.get(0).getValue(), equalTo(BigInteger.valueOf(13)));
     }
 
     private String sendTransaction(BigInteger gas) throws Exception {

File: src/integration-test/java/org/web3j/generated/Fibonacci.java
Patch:
@@ -5,6 +5,7 @@
 import java.util.Arrays;
 import java.util.concurrent.ExecutionException;
 import org.web3j.abi.Contract;
+import org.web3j.abi.TypeReference;
 import org.web3j.abi.datatypes.Function;
 import org.web3j.abi.datatypes.generated.Uint256;
 import org.web3j.protocol.Web3j;
@@ -20,12 +21,12 @@ public Fibonacci(String contractAddress, Web3j web3j) {
   }
 
   public Uint256 fibonacciNotify(Uint256 number) throws InterruptedException, ExecutionException {
-    Function function = new Function<>("fibonacciNotify", Arrays.asList(number), Arrays.asList(Uint256.class));
+    Function function = new Function<>("fibonacciNotify", Arrays.asList(number), Arrays.asList(new TypeReference<Uint256>() {}));
     return executeSingleValueReturn(function);
   }
 
   public Uint256 fibonacci(Uint256 number) throws InterruptedException, ExecutionException {
-    Function function = new Function<>("fibonacci", Arrays.asList(number), Arrays.asList(Uint256.class));
+    Function function = new Function<>("fibonacci", Arrays.asList(number), Arrays.asList(new TypeReference<Uint256>() {}));
     return executeSingleValueReturn(function);
   }
 }

File: src/integration-test/java/org/web3j/protocol/core/MordenTestnetConfig.java
Patch:
@@ -4,6 +4,7 @@
 import java.util.Collections;
 
 import org.web3j.abi.EventEncoder;
+import org.web3j.abi.TypeReference;
 import org.web3j.abi.datatypes.Event;
 import org.web3j.abi.datatypes.Uint;
 import org.web3j.protocol.core.methods.request.EthCall;
@@ -93,8 +94,8 @@ public BigInteger validUncleBlock() {
     public String encodedEvent() {
 
         Event event = new Event<>("Notify",
-                Collections.singletonList(Uint.class),
-                Collections.singletonList(Uint.class));
+                Collections.singletonList(new TypeReference<Uint>() {}),
+                Collections.singletonList(new TypeReference<Uint>() {}));
 
         return EventEncoder.encode(event);
     }

File: src/integration-test/java/org/web3j/protocol/scenarios/EventFilterIT.java
Patch:
@@ -10,6 +10,7 @@
 import org.web3j.abi.EventEncoder;
 import org.web3j.abi.FunctionEncoder;
 import org.web3j.abi.FunctionReturnDecoder;
+import org.web3j.abi.TypeReference;
 import org.web3j.abi.datatypes.Event;
 import org.web3j.abi.datatypes.Function;
 import org.web3j.abi.datatypes.Type;
@@ -55,7 +56,7 @@ public void testEventFilter() throws Exception {
 
         Event event = new Event<>("Notify",
                 Collections.emptyList(),
-                Arrays.asList(Uint256.class, Uint256.class));
+                Arrays.asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
 
         // check function signature - we only have a single topic our event signature,
         // there are no indexed parameters in this example

File: src/integration-test/java/org/web3j/protocol/scenarios/Scenario.java
Patch:
@@ -1,15 +1,14 @@
 package org.web3j.protocol.scenarios;
 
 import java.math.BigInteger;
-import java.util.Arrays;
 import java.util.Collections;
 import java.util.Optional;
 
 import org.junit.Before;
 
+import org.web3j.abi.TypeReference;
 import org.web3j.abi.datatypes.Function;
 import org.web3j.abi.datatypes.Uint;
-import org.web3j.protocol.core.methods.request.EthSendTransaction;
 import org.web3j.protocol.core.methods.response.EthGetTransactionReceipt;
 import org.web3j.protocol.http.HttpService;
 import org.web3j.protocol.parity.Parity;
@@ -91,6 +90,6 @@ Function createFibonacciFunction() {
         return new Function<>(
                 "fibonacciNotify",
                 Collections.singletonList(new Uint(BigInteger.valueOf(7))),
-                Collections.singletonList(Uint.class));
+                Collections.singletonList(new TypeReference<Uint>() {}));
     }
 }

File: src/test/java/org/web3j/abi/FunctionReturnDecoderTest.java
Patch:
@@ -21,7 +21,7 @@ public void testSimpleFunctionDecode() {
         Function function = new Function<>(
                 "test",
                 Collections.<Type>emptyList(),
-                Collections.singletonList(Uint.class)
+                Collections.singletonList(new TypeReference<Uint>(){})
         );
 
         assertThat(FunctionReturnDecoder.decode(
@@ -35,7 +35,7 @@ public void testMultipleResultFunctionDecode() {
         Function function = new Function<>(
                 "test",
                 Collections.<Type>emptyList(),
-                Arrays.asList(Uint.class, Uint.class)
+                Arrays.asList(new TypeReference<Uint>() { }, new TypeReference<Uint>() { })
         );
 
         assertThat(FunctionReturnDecoder.decode(

File: src/main/java/org/web3j/abi/Contract.java
Patch:
@@ -39,6 +39,6 @@ private <T extends Type> List<T> execute(Function function) throws InterruptedEx
                 .sendAsync().get();
 
         String value = ethCall.getValue();
-        return FunctionReturnDecoder.decode(value, function);
+        return FunctionReturnDecoder.decode(value, function.getOutputParameters());
     }
 }

File: src/main/java/org/web3j/abi/TypeDecoder.java
Patch:
@@ -54,7 +54,7 @@ static <T extends NumericType> T decodeNumeric(String input, Class<T> type) {
                 resultByteArray[0] = inputByteArray[0];  // take MSB as sign bit
             }
 
-            int valueOffset = inputByteArray.length - typeLengthAsBytes;
+            int valueOffset = Type.MAX_BYTE_LENGTH - typeLengthAsBytes;
             System.arraycopy(inputByteArray, valueOffset, resultByteArray, 1, typeLengthAsBytes);
 
             BigInteger numericValue = new BigInteger(resultByteArray);

File: src/integration-test/java/org/web3j/generated/Fibonacci.java
Patch:
@@ -20,12 +20,12 @@ public Fibonacci(String contractAddress, Web3j web3j) {
   }
 
   public Uint256 fibonacciNotify(Uint256 number) throws InterruptedException, ExecutionException {
-    Function function = new Function("fibonacciNotify", Arrays.asList(number), Arrays.asList(Uint256.class));
+    Function function = new Function<>("fibonacciNotify", Arrays.asList(number), Arrays.asList(Uint256.class));
     return executeSingleValueReturn(function);
   }
 
   public Uint256 fibonacci(Uint256 number) throws InterruptedException, ExecutionException {
-    Function function = new Function("fibonacci", Arrays.asList(number), Arrays.asList(Uint256.class));
+    Function function = new Function<>("fibonacci", Arrays.asList(number), Arrays.asList(Uint256.class));
     return executeSingleValueReturn(function);
   }
 }

File: src/integration-test/java/org/web3j/protocol/scenarios/FunctionWrappersIT.java
Patch:
@@ -16,7 +16,8 @@
  * Test Fibonacci contract generated wrappers.
  *
  * Generated via running {@link org.web3j.codegen.SolidityFunctionWrapperGenerator} with params:
- * <project-home>/src/test/resources/solidity/fibonacci.abi -o <project-home>/src/integration-test/java -p org.web3j.generated
+ * <project-home>/src/test/resources/solidity/fibonacci.abi -o
+ * <project-home>/src/integration-test/java -p org.web3j.generated
  */
 public class FunctionWrappersIT {
 

File: src/main/java/org/web3j/codegen/SolidityFunctionWrapperGenerator.java
Patch:
@@ -202,15 +202,15 @@ private static TypeSpec.Builder createFunctionDefinitions(
             if (outputParameterTypes.isEmpty()) {
                 methodBuilder.returns(void.class);
 
-                methodBuilder.addStatement("$T function = new $T($S, $T.asList($L), $T.emptyList())",
+                methodBuilder.addStatement("$T function = new $T<>($S, $T.asList($L), $T.emptyList())",
                         Function.class, Function.class, functionName,
                         Arrays.class, inputParams, Collections.class);
                 methodBuilder.addStatement("return executeSingleValueReturn(function)");
 
             } else if (outputParameterTypes.size() == 1) {
                 methodBuilder.returns(outputParameterTypes.get(0));
 
-                methodBuilder.addStatement("$T function = new $T($S, $T.asList($L), $T.asList($T.class))",
+                methodBuilder.addStatement("$T function = new $T<>($S, $T.asList($L), $T.asList($T.class))",
                         Function.class, Function.class, functionName,
                         Arrays.class, inputParams, Arrays.class, outputParameterTypes.get(0));
                 methodBuilder.addStatement("return executeSingleValueReturn(function)");
@@ -250,7 +250,7 @@ private static void buildVariableLengthReturnFunctionConstructor(
         String asListParams = outputParameterTypes.stream().map(p -> "$T.class")
                 .collect(Collectors.joining(", "));
 
-        methodBuilder.addStatement("$T function = new $T($S, $T.asList($L), $T.asList(" +
+        methodBuilder.addStatement("$T function = new $T<>($S, $T.asList($L), $T.asList(" +
                         asListParams + "))", objects);
     }
 }

File: src/integration-test/java/org/web3j/protocol/core/MordenTestnetConfig.java
Patch:
@@ -29,7 +29,7 @@ public BigInteger validBlockTransactionCount() {
 
     @Override
     public BigInteger validBlockUncleCount() {
-        return BigInteger.ZERO;
+        return BigInteger.ONE;
     }
 
     @Override

File: src/test/java/org/web3j/protocol/jsonrpc20/ResponseTest.java
Patch:
@@ -90,7 +90,8 @@ public void testErrorResponse() {
                         "  \"id\":1," +
                         "  \"error\":{" +
                         "    \"code\":-32602," +
-                        "    \"message\":\"Invalid address length, expected 40 got 64 bytes\"" +
+                        "    \"message\":\"Invalid address length, expected 40 got 64 bytes\"," +
+                        "    \"data\":null" +
                         "  }" +
                         "}"
         );

File: src/main/java/org/web3j/protocol/jsonrpc20/DefaultBlockParameterName.java
Patch:
@@ -1,5 +1,7 @@
 package org.web3j.protocol.jsonrpc20;
 
+import com.fasterxml.jackson.annotation.JsonValue;
+
 /**
  * https://github.com/ethereum/wiki/wiki/JSON-RPC#the-default-block-parameter
  */
@@ -14,6 +16,7 @@ public enum DefaultBlockParameterName implements DefaultBlockParameter {
         this.name = name;
     }
 
+    @JsonValue
     @Override
     public String getValue() {
         return name;

File: src/main/java/org/web3j/methods/request/EthCall.java
Patch:
@@ -18,8 +18,8 @@ public class EthCall {
     private BigInteger value;
     private String data;
 
-    public EthCall(String fromAddress, String data) {
-        this.fromAddress = fromAddress;
+    public EthCall(String toAddress, String data) {
+        this.toAddress = toAddress;
         this.data = data;
     }
 

File: src/main/java/org/web3j/protocol/RequestFactory.java
Patch:
@@ -61,7 +61,7 @@ Request ethGetStorageAt(String address, BigInteger position,
 
     Request ethCall(EthCall ethCall, DefaultBlockParameter defaultBlockParameter);
 
-    Request ethEstimateGas(EthCall ethCall, DefaultBlockParameter defaultBlockParameter);
+    Request ethEstimateGas(EthCall ethCall);
 
     Request ethGetBlockByHash(String blockHash, boolean returnFullTransactionObjects);
 

File: src/main/java/org/web3j/protocol/jsonrpc20/DefaultBlockParameter.java
Patch:
@@ -13,7 +13,7 @@ static DefaultBlockParameter valueOf(BigInteger blockNumber) {
     }
 
     static DefaultBlockParameter valueOf(String blockName) {
-        return DefaultBlockParameterName.valueOf(blockName);
+        return DefaultBlockParameterName.fromString(blockName);
     }
 
     String getValue();

File: src/main/java/org/web3j/protocol/jsonrpc20/JsonRpc2_0Factory.java
Patch:
@@ -134,7 +134,7 @@ public Request ethBlockNumber() {
     @Override
     public Request ethGetBalance(String address, DefaultBlockParameter defaultBlockParameter) {
         return new Request<>(
-                "eth_syncing",
+                "eth_getBalance",
                 Arrays.asList(address, defaultBlockParameter.getValue()),
                 1
         );

File: src/main/java/org/web3j/protocol/jsonrpc20/JsonRpc2_0Factory.java
Patch:
@@ -98,7 +98,7 @@ public Request ethMining() {
     @Override
     public Request ethHashrate() {
         return new Request<>(
-                "eth_syncing",
+                "eth_hashrate",
                 Collections.<String>emptyList(),
                 1
         );

