File: okdownload/src/main/java/com/liulishuo/okdownload/core/listener/assist/Listener1Assist.java
Patch:
@@ -85,7 +85,7 @@ public void connectEnd(DownloadTask task) {
         final Listener1Model model = modelHandler.getOrRecoverModel(task, task.getInfo());
         if (model == null) return;
 
-        if (model.isFromResumed && model.isFirstConnect) {
+        if (Boolean.TRUE.equals(model.isFromResumed) && Boolean.TRUE.equals(model.isFirstConnect)) {
             model.isFirstConnect = false;
         }
 

File: okdownload/src/main/java/com/liulishuo/okdownload/core/listener/assist/Listener1Assist.java
Patch:
@@ -85,7 +85,7 @@ public void connectEnd(DownloadTask task) {
         final Listener1Model model = modelHandler.getOrRecoverModel(task, task.getInfo());
         if (model == null) return;
 
-        if (model.isFromResumed && model.isFirstConnect) {
+        if (Boolean.TRUE.equals(model.isFromResumed) && Boolean.TRUE.equals(model.isFirstConnect)) {
             model.isFirstConnect = false;
         }
 

File: okdownload/src/main/java/com/liulishuo/okdownload/IRedirectHandler.java
Patch:
@@ -37,7 +37,6 @@ public interface IRedirectHandler {
      * @param headerProperties   request headers of the connection, these headers should be added in
      *                           the new connection during handle redirect
      */
-    // FIXME: The http method name should be a parameter.
     void handleRedirect(
             DownloadConnection originalConnection,
             DownloadConnection.Connected originalConnected,

File: okdownload-filedownloader/src/main/java/com/liulishuo/filedownloader/FileDownloader.java
Patch:
@@ -472,8 +472,9 @@ public int replaceListener(int id, FileDownloadListener listener) {
             return 0;
         }
 
-        task.getOrigin().setListener(listener);
-        return task.getOrigin().getId();
+        final DownloadTaskAdapter downloadTask = (DownloadTaskAdapter) task.getOrigin();
+        downloadTask.replaceListener(listener);
+        return downloadTask.getId();
     }
 
     /**

File: okdownload-filedownloader/src/main/java/com/liulishuo/filedownloader/FileDownloadList.java
Patch:
@@ -117,7 +117,7 @@ void addQueueTask(final DownloadTaskAdapter task) {
 
         synchronized (list) {
             task.markAdded2List();
-            task.assembleDownloadTask();
+            task.insureAssembleDownloadTask();
             list.add(task);
             Util.d(TAG, "add list in all " + task + " " + list.size());
         }

File: okdownload-filedownloader/src/main/java/com/liulishuo/filedownloader/util/FileDownloadSerialQueue.java
Patch:
@@ -56,7 +56,7 @@ public FileDownloadSerialQueue(@NonNull DownloadSerialQueue serialQueue,
      */
     public void enqueue(BaseDownloadTask task) {
         final DownloadTaskAdapter downloadTaskAdapter = (DownloadTaskAdapter) task;
-        downloadTaskAdapter.assembleDownloadTask();
+        downloadTaskAdapter.insureAssembleDownloadTask();
         FileDownloadList.getImpl().addIndependentTask(downloadTaskAdapter);
         serialQueue.enqueue(downloadTaskAdapter.getDownloadTask());
         listenerManager.addAutoRemoveListenersWhenTaskEnd(downloadTaskAdapter.getId());

File: okdownload-filedownloader/src/test/java/com.liulishuo.filedownloader/FileDownloadListTest.java
Patch:
@@ -83,7 +83,7 @@ public void get() {
         assertNull(task);
 
         final DownloadTaskAdapter firstAddedTask = FileDownloadList.getImpl().list.get(0);
-        firstAddedTask.assembleDownloadTask();
+        firstAddedTask.insureAssembleDownloadTask();
         final DownloadDispatcher downloadDispatcher = OkDownload.with().downloadDispatcher();
         when(downloadDispatcher.isRunning(firstAddedTask.getDownloadTask())).thenReturn(false);
         task = FileDownloadList.getImpl().get(firstAddedTask.getId());
@@ -105,13 +105,13 @@ public void addQueueTask() {
         assertThat(FileDownloadList.getImpl().list).hasSize(oldSize);
 
         final DownloadTaskAdapter newTask = spy(FileDownloader.getImpl().create("url"));
-        doNothing().when(newTask).assembleDownloadTask();
+        doNothing().when(newTask).insureAssembleDownloadTask();
 
         FileDownloadList.getImpl().addQueueTask(newTask);
 
         assertThat(FileDownloadList.getImpl().list).hasSize(oldSize + 1);
         verify(newTask).markAdded2List();
-        verify(newTask).assembleDownloadTask();
+        verify(newTask).insureAssembleDownloadTask();
     }
 
     @Test

File: okdownload-filedownloader/src/test/java/com.liulishuo.filedownloader/util/FileDownloadSerialQueueTest.java
Patch:
@@ -82,11 +82,11 @@ public void enqueue() {
         doReturn(taskId).when(mockBaseTask).getId();
         doReturn(mockDownloadTask).when(mockBaseTask).getDownloadTask();
         doReturn(mockCompatListener).when(mockBaseTask).getCompatListener();
-        doNothing().when(mockBaseTask).assembleDownloadTask();
+        doNothing().when(mockBaseTask).insureAssembleDownloadTask();
 
         fileDownloadSerialQueue.enqueue(mockBaseTask);
 
-        verify(mockBaseTask).assembleDownloadTask();
+        verify(mockBaseTask).insureAssembleDownloadTask();
         verify(fileDownloadList).addIndependentTask(mockBaseTask);
         verify(listenerManager).addAutoRemoveListenersWhenTaskEnd(taskId);
         verify(listenerManager).attachListener(mockDownloadTask, mockCompatListener);

File: okdownload/src/main/java/com/liulishuo/okdownload/core/connection/DownloadUrlConnection.java
Patch:
@@ -81,6 +81,9 @@ void configUrlConnection() throws IOException {
         } else {
             connection = url.openConnection();
         }
+        if (connection instanceof HttpURLConnection) {
+            ((HttpURLConnection) connection).setInstanceFollowRedirects(false);
+        }
 
         if (configuration != null) {
             if (configuration.readTimeout != null) {

File: okdownload/src/main/java/com/liulishuo/okdownload/core/connection/DownloadUrlConnection.java
Patch:
@@ -81,6 +81,9 @@ void configUrlConnection() throws IOException {
         } else {
             connection = url.openConnection();
         }
+        if (connection instanceof HttpURLConnection) {
+            ((HttpURLConnection) connection).setInstanceFollowRedirects(false);
+        }
 
         if (configuration != null) {
             if (configuration.readTimeout != null) {

File: okdownload/src/main/java/com/liulishuo/okdownload/core/NamedRunnable.java
Patch:
@@ -31,6 +31,7 @@ public final void run() {
         try {
             execute();
         } catch (InterruptedException e) {
+            Thread.currentThread().interrupt();
             interrupted(e);
         } finally {
             Thread.currentThread().setName(oldName);

File: okdownload/src/test/java/com/liulishuo/okdownload/core/exception/InterruptExceptionTest.java
Patch:
@@ -66,8 +66,7 @@ protected void finished() {
             latch.await(100, TimeUnit.MILLISECONDS);
             r1.interrupt();
             r1.join();
-        } catch (Exception e) {
-            e.printStackTrace();
+        } catch (Exception ignored) {
         }
     }
 }

File: okdownload/src/main/java/com/liulishuo/okdownload/core/NamedRunnable.java
Patch:
@@ -31,6 +31,7 @@ public final void run() {
         try {
             execute();
         } catch (InterruptedException e) {
+            Thread.currentThread().interrupt();
             interrupted(e);
         } finally {
             Thread.currentThread().setName(oldName);

File: okdownload/src/main/java/com/liulishuo/okdownload/core/file/DownloadUriOutputStream.java
Patch:
@@ -69,6 +69,7 @@ public void write(byte[] b, int off, int len) throws IOException {
     public void close() throws IOException {
         out.close();
         fos.close();
+        pdf.close();
     }
 
     @Override

File: okdownload/src/main/java/com/liulishuo/okdownload/core/file/DownloadUriOutputStream.java
Patch:
@@ -69,6 +69,7 @@ public void write(byte[] b, int off, int len) throws IOException {
     public void close() throws IOException {
         out.close();
         fos.close();
+        pdf.close();
     }
 
     @Override

File: okdownload-connection-okhttp/src/test/java/com/liulishuo/okdownload/core/connection/DownloadOkHttp3ConnectionTest.java
Patch:
@@ -123,8 +123,10 @@ public void getInputStream_executed_getRightInputStream() throws IOException {
                 .body(body).build();
         when(call.execute()).thenReturn(response);
 
+        final BufferedSource source = mock(BufferedSource.class);
+        when(body.source()).thenReturn(source);
         final InputStream expectedInputStream = mock(InputStream.class);
-        when(body.byteStream()).thenReturn(expectedInputStream);
+        when(source.inputStream()).thenReturn(expectedInputStream);
 
         connection.execute();
 

File: okdownload/src/main/java/com/liulishuo/okdownload/core/file/MultiPointOutputStream.java
Patch:
@@ -48,6 +48,8 @@
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.locks.LockSupport;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+
 public class MultiPointOutputStream {
     private static final String TAG = "MultiPointOutputStream";
     private static final ExecutorService FILE_IO_EXECUTOR = new ThreadPoolExecutor(0,
@@ -81,6 +83,7 @@ public class MultiPointOutputStream {
     IOException syncException;
     @NonNull ArrayList<Integer> noMoreStreamList;
 
+    @SuppressFBWarnings("IS2_INCONSISTENT_SYNC")
     List<Integer> requireStreamBlocks;
 
     MultiPointOutputStream(@NonNull final DownloadTask task,

File: okdownload-connection-okhttp/src/test/java/com/liulishuo/okdownload/core/connection/DownloadOkHttp3ConnectionTest.java
Patch:
@@ -123,8 +123,10 @@ public void getInputStream_executed_getRightInputStream() throws IOException {
                 .body(body).build();
         when(call.execute()).thenReturn(response);
 
+        final BufferedSource source = mock(BufferedSource.class);
+        when(body.source()).thenReturn(source);
         final InputStream expectedInputStream = mock(InputStream.class);
-        when(body.byteStream()).thenReturn(expectedInputStream);
+        when(source.inputStream()).thenReturn(expectedInputStream);
 
         connection.execute();
 

File: okdownload/src/main/java/com/liulishuo/okdownload/core/download/DownloadCall.java
Patch:
@@ -172,6 +172,7 @@ public void execute() throws InterruptedException {
                 cache.catchException(e);
                 break;
             }
+            cache.setRedirectLocation(task.getRedirectLocation());
 
             // 3. waiting for file lock release after file path is confirmed.
             fileStrategy.getFileLock().waitForRelease(task.getFile().getAbsolutePath());

File: okdownload/src/main/java/com/liulishuo/okdownload/core/download/DownloadChain.java
Patch:
@@ -34,7 +34,6 @@
 import com.liulishuo.okdownload.core.interceptor.RetryInterceptor;
 import com.liulishuo.okdownload.core.interceptor.connect.CallServerInterceptor;
 import com.liulishuo.okdownload.core.interceptor.connect.HeaderInterceptor;
-import com.liulishuo.okdownload.core.interceptor.connect.RedirectInterceptor;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -149,6 +148,8 @@ public MultiPointOutputStream getOutputStream() {
                 url = info.getUrl();
             }
 
+            Util.d(TAG, "create connection on url: " + url);
+
             connection = OkDownload.with().connectionFactory().create(url);
         }
         return connection;
@@ -172,7 +173,6 @@ void start() throws IOException {
         final BreakpointInterceptor breakpointInterceptor = new BreakpointInterceptor();
         connectInterceptorList.add(retryInterceptor);
         connectInterceptorList.add(breakpointInterceptor);
-        connectInterceptorList.add(new RedirectInterceptor());
         connectInterceptorList.add(new HeaderInterceptor());
         connectInterceptorList.add(new CallServerInterceptor());
 

File: okdownload/src/main/java/com/liulishuo/okdownload/core/download/DownloadCall.java
Patch:
@@ -172,6 +172,7 @@ public void execute() throws InterruptedException {
                 cache.catchException(e);
                 break;
             }
+            cache.setRedirectLocation(task.getRedirectLocation());
 
             // 3. waiting for file lock release after file path is confirmed.
             fileStrategy.getFileLock().waitForRelease(task.getFile().getAbsolutePath());

File: okdownload/src/main/java/com/liulishuo/okdownload/core/download/DownloadChain.java
Patch:
@@ -34,7 +34,6 @@
 import com.liulishuo.okdownload.core.interceptor.RetryInterceptor;
 import com.liulishuo.okdownload.core.interceptor.connect.CallServerInterceptor;
 import com.liulishuo.okdownload.core.interceptor.connect.HeaderInterceptor;
-import com.liulishuo.okdownload.core.interceptor.connect.RedirectInterceptor;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -149,6 +148,8 @@ public MultiPointOutputStream getOutputStream() {
                 url = info.getUrl();
             }
 
+            Util.d(TAG, "create connection on url: " + url);
+
             connection = OkDownload.with().connectionFactory().create(url);
         }
         return connection;
@@ -172,7 +173,6 @@ void start() throws IOException {
         final BreakpointInterceptor breakpointInterceptor = new BreakpointInterceptor();
         connectInterceptorList.add(retryInterceptor);
         connectInterceptorList.add(breakpointInterceptor);
-        connectInterceptorList.add(new RedirectInterceptor());
         connectInterceptorList.add(new HeaderInterceptor());
         connectInterceptorList.add(new CallServerInterceptor());
 

File: okdownload/src/main/java/com/liulishuo/okdownload/core/file/DownloadUriOutputStream.java
Patch:
@@ -86,7 +86,7 @@ public void setLength(long newLength) {
         final String tag = "DownloadUriOutputStream";
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
             try {
-                Os.posix_fallocate(pdf.getFileDescriptor(),0, newLength);
+                Os.posix_fallocate(pdf.getFileDescriptor(), 0, newLength);
             } catch (Throwable e) {
                 if (e instanceof ErrnoException) {
                     if (((ErrnoException) e).errno == OsConstants.ENOSYS || ((ErrnoException) e).errno == OsConstants.ENOTSUP) {

File: okdownload-filedownloader/src/main/java/com/liulishuo/filedownloader/CompatListenerAssist.java
Patch:
@@ -101,6 +101,7 @@ public void connectStart(DownloadTask task) {
             if (downloadTaskAdapter == null) return;
             final long soFarBytes = downloadTaskAdapter.getSoFarBytesInLong();
             final long totalBytes = downloadTaskAdapter.getTotalBytesInLong();
+            downloadTaskAdapter.getProgressAssist().initSofarBytes(soFarBytes);
             downloadTaskAdapter.getProgressAssist().calculateCallbackMinIntervalBytes(totalBytes);
             callback.connected(downloadTaskAdapter, etag, resumable, soFarBytes, totalBytes);
         }

File: okdownload-filedownloader/src/test/java/com.liulishuo.filedownloader/CompatListenerAssistTest.java
Patch:
@@ -128,6 +128,7 @@ public void connectStart() {
                 1L,
                 2L);
         verify(mockProgressAssist).calculateCallbackMinIntervalBytes(2);
+        verify(mockProgressAssist).initSofarBytes(1);
     }
 
     @Test

File: okdownload-filedownloader/src/main/java/com/liulishuo/filedownloader/CompatListenerAssist.java
Patch:
@@ -101,6 +101,7 @@ public void connectStart(DownloadTask task) {
             if (downloadTaskAdapter == null) return;
             final long soFarBytes = downloadTaskAdapter.getSoFarBytesInLong();
             final long totalBytes = downloadTaskAdapter.getTotalBytesInLong();
+            downloadTaskAdapter.getProgressAssist().initSofarBytes(soFarBytes);
             downloadTaskAdapter.getProgressAssist().calculateCallbackMinIntervalBytes(totalBytes);
             callback.connected(downloadTaskAdapter, etag, resumable, soFarBytes, totalBytes);
         }

File: okdownload-filedownloader/src/test/java/com.liulishuo.filedownloader/CompatListenerAssistTest.java
Patch:
@@ -128,6 +128,7 @@ public void connectStart() {
                 1L,
                 2L);
         verify(mockProgressAssist).calculateCallbackMinIntervalBytes(2);
+        verify(mockProgressAssist).initSofarBytes(1);
     }
 
     @Test

File: okdownload/src/main/java/com/liulishuo/okdownload/core/download/DownloadCall.java
Patch:
@@ -306,6 +306,8 @@ void start(final DownloadCache cache, BreakpointInfo info) throws InterruptedExc
             return;
         }
 
+        cache.getOutputStream().setRequireStreamCount(blockChainList.size());
+
         startBlocks(blockChainList);
     }
 

File: okdownload/src/main/java/com/liulishuo/okdownload/core/interceptor/RetryInterceptor.java
Patch:
@@ -45,6 +45,7 @@ public DownloadConnection.Connected interceptConnect(DownloadChain chain) throws
                 }
 
                 chain.getCache().catchException(e);
+                chain.getOutputStream().catchBlockConnectException(chain.getBlockIndex());
                 throw e;
             }
         }

File: okdownload/src/main/java/com/liulishuo/okdownload/core/interceptor/RetryInterceptor.java
Patch:
@@ -45,9 +45,7 @@ public DownloadConnection.Connected interceptConnect(DownloadChain chain) throws
                 }
 
                 chain.getCache().catchException(e);
-                if (e != InterruptException.SIGNAL) {
-                    chain.getOutputStream().catchBlockConnectException(chain.getBlockIndex());
-                }
+                chain.getOutputStream().catchBlockConnectException(chain.getBlockIndex());
                 throw e;
             }
         }

File: okdownload/src/test/java/com/liulishuo/okdownload/core/file/MultiPointOutputStreamTest.java
Patch:
@@ -582,9 +582,10 @@ public void inspectFreeSpace() throws PreAllocateException {
 
     @Test
     public void catchBlockConnectException() {
+        multiPointOutputStream.catchBlockConnectException(2);
         multiPointOutputStream.catchBlockConnectException(2);
         assertThat(multiPointOutputStream.noMoreStreamList).hasSize(1);
-        assertThat(multiPointOutputStream.noMoreStreamList.get(0)).isEqualTo(2);
+        assertThat(multiPointOutputStream.noMoreStreamList).containsExactly(2);
     }
 
     private void prepareOutputStreamEnv() throws FileNotFoundException, PreAllocateException {

File: okdownload/src/test/java/com/liulishuo/okdownload/core/interceptor/RetryInterceptorTest.java
Patch:
@@ -106,7 +106,7 @@ public void interceptConnect_failedReleaseConnection() throws IOException {
         interceptor.interceptConnect(chain);
 
         verify(cache).catchException(any(IOException.class));
-        verify(outputStream, never()).catchBlockConnectException(anyInt());
+        verify(outputStream).catchBlockConnectException(anyInt());
     }
 
     @Test
@@ -119,6 +119,6 @@ public void interceptFetch_failedRelease() throws IOException {
         interceptor.interceptFetch(chain);
 
         verify(cache).catchException(any(IOException.class));
-        verify(outputStream, never()).catchBlockConnectException(anyInt());
+        verify(outputStream).catchBlockConnectException(anyInt());
     }
 }
\ No newline at end of file

File: okdownload/src/main/java/com/liulishuo/okdownload/core/file/MultiPointOutputStream.java
Patch:
@@ -421,7 +421,7 @@ void runSync() throws IOException {
             nextParkMills = syncBufferIntervalMills;
         }
 
-        Util.d(TAG, "IO sync end");
+        Util.d(TAG, "OutputStream stop flush looper task[" + task.getId() + "]");
     }
 
     // convenient for test.

File: okdownload/src/main/java/com/liulishuo/okdownload/core/interceptor/RetryInterceptor.java
Patch:
@@ -45,6 +45,9 @@ public DownloadConnection.Connected interceptConnect(DownloadChain chain) throws
                 }
 
                 chain.getCache().catchException(e);
+                if (e != InterruptException.SIGNAL) {
+                    chain.getOutputStream().catchBlockConnectException(chain.getBlockIndex());
+                }
                 throw e;
             }
         }

File: okdownload/src/main/java/com/liulishuo/okdownload/core/download/DownloadCall.java
Patch:
@@ -306,6 +306,8 @@ void start(final DownloadCache cache, BreakpointInfo info) throws InterruptedExc
             return;
         }
 
+        cache.getOutputStream().setCurrentNeedFetchBlockCount(blockChainList.size());
+
         startBlocks(blockChainList);
     }
 

File: okdownload-filedownloader/src/main/java/com/liulishuo/filedownloader/BaseDownloadTask.java
Patch:
@@ -17,6 +17,8 @@
 package com.liulishuo.filedownloader;
 
 
+import android.support.annotation.Nullable;
+
 import com.liulishuo.filedownloader.model.FileDownloadStatus;
 
 /**
@@ -656,6 +658,7 @@ interface IRunningTask {
          *
          * @return the object as a lock for synchronized with the pause area.
          */
+        @Nullable
         Object getPauseLock();
 
         /**

File: okdownload-filedownloader/src/main/java/com/liulishuo/filedownloader/util/FileDownloadUtils.java
Patch:
@@ -105,9 +105,9 @@ public static DownloadTaskAdapter findDownloadTaskAdapter(DownloadTask downloadT
             Util.w(TAG, "download task is null when find DownloadTaskAdapter");
             return null;
         }
-        final Object o = downloadTask.getTag(DownloadTaskAdapter.TAG_KEY);
+        final Object o = downloadTask.getTag(DownloadTaskAdapter.KEY_TASK_ADAPTER);
         if (o == null) {
-            Util.w(TAG, "no tag with DownloadTaskAdapter.TAG_KEY");
+            Util.w(TAG, "no tag with DownloadTaskAdapter.KEY_TASK_ADAPTER");
             return null;
         }
         if (o instanceof DownloadTaskAdapter) {

File: okdownload/src/main/java/com/liulishuo/okdownload/core/breakpoint/BreakpointStoreOnCache.java
Patch:
@@ -148,7 +148,7 @@ public boolean markFileDirty(int id) {
     }
 
     @Override public boolean markFileClear(int id) {
-        return fileDirtyList.remove((Integer) id);
+        return fileDirtyList.remove(Integer.valueOf(id));
     }
 
     @Override public synchronized void remove(int id) {

File: okdownload/src/test/java/com/liulishuo/okdownload/core/UtilTest.java
Patch:
@@ -276,6 +276,8 @@ public void assembleBlock_multiBlock() throws Exception {
     public void parseContentLength() {
         assertThat(Util.parseContentLength(null)).isEqualTo(CHUNKED_CONTENT_LENGTH);
         assertThat(Util.parseContentLength("123")).isEqualTo(123L);
+
+        assertThat(Util.parseContentLength("-")).isEqualTo(CHUNKED_CONTENT_LENGTH);
     }
 
     @Test

File: okdownload-breakpoint-sqlite/src/main/java/com/liulishuo/okdownload/core/breakpoint/BreakpointSQLiteHelper.java
Patch:
@@ -138,7 +138,8 @@ public List<Integer> loadDirtyFileList() {
         final List<Integer> dirtyFileList = new ArrayList<>();
         Cursor cursor = null;
         try {
-            cursor = getWritableDatabase().rawQuery("SELECT * FROM " + TASK_FILE_DIRTY_TABLE_NAME, null);
+            cursor = getWritableDatabase().rawQuery("SELECT * FROM " + TASK_FILE_DIRTY_TABLE_NAME,
+                    null);
             while (cursor.moveToNext()) {
                 dirtyFileList.add(cursor.getInt(cursor.getColumnIndex(ID)));
             }

File: okdownload/src/main/java/com/liulishuo/okdownload/core/breakpoint/BreakpointStore.java
Patch:
@@ -53,8 +53,8 @@ BreakpointInfo findAnotherInfoFromCompare(@NonNull DownloadTask task,
     boolean isOnlyMemoryCache();
 
     /**
-     * Whether the file relate to the task id {@code id} is dirty, which means the file isn't complete download
-     * yet.
+     * Whether the file relate to the task id {@code id} is dirty, which means the file isn't
+     * complete download yet.
      *
      * @param id the task id.
      * @return {@code true} the file relate to {@code id} is dirty

File: okdownload/src/main/java/com/liulishuo/okdownload/core/breakpoint/BreakpointStoreOnCache.java
Patch:
@@ -41,7 +41,8 @@ public class BreakpointStoreOnCache implements DownloadStore {
     private final List<Integer> fileDirtyList;
 
     public BreakpointStoreOnCache() {
-        this(new SparseArray<BreakpointInfo>(), new ArrayList<Integer>(), new HashMap<String, String>());
+        this(new SparseArray<BreakpointInfo>(), new ArrayList<Integer>(),
+                new HashMap<String, String>());
     }
 
     BreakpointStoreOnCache(SparseArray<BreakpointInfo> storedInfos,

File: okdownload/src/main/java/com/liulishuo/okdownload/StatusUtil.java
Patch:
@@ -75,7 +75,7 @@ public static Status isCompletedOrUnknown(@NonNull DownloadTask task) {
                     && targetFile.exists()) {
                 return Status.IDLE;
             }
-        } else if (store.isOnlyMemoryCache()) {
+        } else if (store.isOnlyMemoryCache() || store.isFileDirty(task.getId())) {
             return Status.UNKNOWN;
         } else if (targetFile != null && targetFile.exists()) {
             return Status.COMPLETED;

File: okdownload/src/main/java/com/liulishuo/okdownload/core/download/DownloadCall.java
Patch:
@@ -269,6 +269,7 @@ private void inspectTaskEnd(DownloadCache cache, @NonNull EndCause cause,
 
         store.onTaskEnd(task.getId(), cause, realCause);
         if (cause == EndCause.COMPLETED) {
+            store.markFileClear(task.getId());
             OkDownload.with().processFileStrategy()
                     .completeProcessStream(cache.getOutputStream(), task);
         }

File: okdownload/src/test/java/com/liulishuo/okdownload/core/download/DownloadCallTest.java
Patch:
@@ -331,6 +331,8 @@ public void execute_finish() throws InterruptedException, IOException {
         verify(listener).taskEnd(eq(task), eq(EndCause.COMPLETED), nullable(IOException.class));
         verify(store)
                 .onTaskEnd(eq(task.getId()), eq(EndCause.COMPLETED), nullable(Exception.class));
+        final int id = task.getId();
+        verify(store).markFileClear(eq(id));
         verify(fileStrategy).completeProcessStream(eq(multiPointOutputStream), eq(task));
 
         when(cache.isPreAllocateFailed()).thenReturn(true);

File: okdownload/src/test/java/com/liulishuo/okdownload/core/file/MultiPointOutputStreamTest.java
Patch:
@@ -427,6 +427,8 @@ public void outputStream() throws IOException {
         assertThat(multiPointOutputStream.outputStreamMap.get(0)).isEqualTo(outputStream);
         verify(outputStream).seek(eq(10L));
         verify(outputStream).setLength(eq(20L));
+        final int id = task.getId();
+        verify(store).markFileDirty(id);
     }
 
 

File: okdownload/src/main/java/com/liulishuo/okdownload/DownloadSerialQueue.java
Patch:
@@ -41,7 +41,7 @@ public class DownloadSerialQueue extends DownloadListener2 implements Runnable {
             Integer.MAX_VALUE, 30, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),
             Util.threadFactory("OkDownload DynamicSerial", false));
 
-    volatile boolean shutdown = false;
+    volatile boolean shutedDown = false;
     volatile boolean looping = false;
     volatile boolean paused = false;
 
@@ -153,7 +153,7 @@ public int getWaitingTaskCount() {
      * queue upon return from this method.
      */
     public synchronized DownloadTask[] shutdown() {
-        shutdown = true;
+        shutedDown = true;
 
         if (runningTask != null) runningTask.cancel();
 
@@ -165,7 +165,7 @@ public synchronized DownloadTask[] shutdown() {
     }
 
     @Override public void run() {
-        while (!shutdown) {
+        while (!shutedDown) {
             final DownloadTask nextTask;
             synchronized (this) {
                 if (taskList.isEmpty() || paused) {

File: okdownload/src/main/java/com/liulishuo/okdownload/OkDownload.java
Patch:
@@ -32,6 +32,7 @@
 import com.liulishuo.okdownload.core.file.DownloadUriOutputStream;
 import com.liulishuo.okdownload.core.file.ProcessFileStrategy;
 
+@SuppressWarnings("PMD.AvoidFieldNameMatchingMethodName")
 public class OkDownload {
 
     @SuppressLint("StaticFieldLeak") static volatile OkDownload singleton;

File: okdownload/src/main/java/com/liulishuo/okdownload/OkDownloadProvider.java
Patch:
@@ -25,7 +25,10 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+
 public class OkDownloadProvider extends ContentProvider {
+    @SuppressFBWarnings(value = "ST")
     @SuppressLint("StaticFieldLeak") static Context context;
 
     @Override

File: okdownload/src/main/java/com/liulishuo/okdownload/core/NamedRunnable.java
Patch:
@@ -31,7 +31,7 @@ public final void run() {
         try {
             execute();
         } catch (InterruptedException e) {
-            canceled(e);
+            interrupted(e);
         } finally {
             Thread.currentThread().setName(oldName);
             finished();
@@ -40,7 +40,7 @@ public final void run() {
 
     protected abstract void execute() throws InterruptedException;
 
-    protected abstract void canceled(InterruptedException e);
+    protected abstract void interrupted(InterruptedException e);
 
     protected abstract void finished();
 }

File: okdownload/src/main/java/com/liulishuo/okdownload/core/breakpoint/KeyToIdMap.java
Patch:
@@ -26,6 +26,7 @@
 
 public class KeyToIdMap {
 
+    @SuppressWarnings("PMD.AvoidFieldNameMatchingTypeName")
     @NonNull private final HashMap<String, Integer> keyToIdMap;
     @NonNull private final SparseArray<String> idToKeyMap;
 

File: okdownload/src/main/java/com/liulishuo/okdownload/core/connection/DownloadUrlConnection.java
Patch:
@@ -149,6 +149,7 @@ public DownloadConnection create(String originUrl) throws IOException {
     /**
      * The sample configuration for the {@link DownloadUrlConnection}
      */
+    @SuppressWarnings("PMD.AvoidFieldNameMatchingMethodName")
     public static class Configuration {
         private Proxy proxy;
         private Integer readTimeout;

File: okdownload/src/main/java/com/liulishuo/okdownload/core/download/DownloadChain.java
Patch:
@@ -65,7 +65,7 @@ public class DownloadChain implements Runnable {
     int fetchIndex = 0;
 
     private long responseContentLength;
-    private DownloadConnection connection;
+    private volatile DownloadConnection connection;
 
     long noCallbackIncreaseBytes;
     volatile Thread currentThread;
@@ -133,11 +133,11 @@ public MultiPointOutputStream getOutputStream() {
         return this.cache.getOutputStream();
     }
 
-    @Nullable public DownloadConnection getConnection() {
+    @Nullable public synchronized DownloadConnection getConnection() {
         return this.connection;
     }
 
-    @NonNull public DownloadConnection getConnectionOrCreate() throws IOException {
+    @NonNull public synchronized DownloadConnection getConnectionOrCreate() throws IOException {
         if (cache.isInterrupt()) throw InterruptException.SIGNAL;
 
         if (connection == null) {

File: okdownload/src/main/java/com/liulishuo/okdownload/core/interceptor/BreakpointInterceptor.java
Patch:
@@ -152,7 +152,7 @@ long getExactContentLengthRangeFrom0(@NonNull DownloadConnection.Connected conne
             // content-length
             final String contentLengthField = connected.getResponseHeaderField(CONTENT_LENGTH);
             if (!Util.isEmpty(contentLengthField)) {
-                contentLength = Long.valueOf(contentLengthField);
+                contentLength = Long.parseLong(contentLengthField);
             }
         }
 
@@ -163,7 +163,7 @@ long getExactContentLengthRangeFrom0(@NonNull DownloadConnection.Connected conne
     static long getRangeRightFromContentRange(@NonNull String contentRange) {
         Matcher m = CONTENT_RANGE_RIGHT_VALUE.matcher(contentRange);
         if (m.find()) {
-            return Long.valueOf(m.group(1));
+            return Long.parseLong(m.group(1));
         }
 
         return -1;

File: okdownload/src/test/java/com/liulishuo/okdownload/DownloadContextTest.java
Patch:
@@ -257,7 +257,7 @@ public void start_withQueueListener() throws IOException {
 
     @Test
     public void stop() {
-        context.isStarted = true;
+        context.started = true;
         context.stop();
         assertThat(context.isStarted()).isFalse();
 
@@ -332,7 +332,7 @@ public void builder_bind() throws IOException {
 
         final boolean autoCallbackToUIThread = false;
         queueSet.setAutoCallbackToUIThread(autoCallbackToUIThread);
-        assertThat(queueSet.getAutoCallbackToUIThread()).isEqualTo(autoCallbackToUIThread);
+        assertThat(queueSet.isAutoCallbackToUIThread()).isEqualTo(autoCallbackToUIThread);
         builder.bind(taskBuilder);
         verify(taskBuilder).setAutoCallbackToUIThread(eq(autoCallbackToUIThread));
 

File: okdownload/src/test/java/com/liulishuo/okdownload/DownloadSerialQueueTest.java
Patch:
@@ -183,7 +183,7 @@ public void shutdown() {
         final DownloadTask[] tasks = serialQueue.shutdown();
 
         verify(task2).cancel();
-        assertThat(serialQueue.shutdown).isTrue();
+        assertThat(serialQueue.shutedDown).isTrue();
         assertThat(tasks).containsExactly(task1);
     }
 

File: okdownload/src/test/java/com/liulishuo/okdownload/core/NamedRunnableTest.java
Patch:
@@ -37,7 +37,7 @@ public void setup() {
             @Override protected void execute() {
             }
 
-            @Override protected void canceled(InterruptedException e) {
+            @Override protected void interrupted(InterruptedException e) {
             }
 
             @Override protected void finished() {
@@ -51,7 +51,7 @@ public void run_nonInterrupt() throws InterruptedException {
         runnable.run();
 
         verify(runnable).execute();
-        verify(runnable, never()).canceled(any(InterruptedException.class));
+        verify(runnable, never()).interrupted(any(InterruptedException.class));
         verify(runnable).finished();
         assertThat(Thread.currentThread().getName()).isEqualTo("oldName");
     }
@@ -62,7 +62,7 @@ public void run_interrupt() throws InterruptedException {
 
         runnable.run();
         verify(runnable).execute();
-        verify(runnable).canceled(any(InterruptedException.class));
+        verify(runnable).interrupted(any(InterruptedException.class));
         verify(runnable).finished();
     }
 }
\ No newline at end of file

File: okdownload/src/test/java/com/liulishuo/okdownload/core/dispatcher/DownloadDispatcherTest.java
Patch:
@@ -97,7 +97,7 @@ public void setup() throws IOException {
                 new DownloadDispatcher(readyAsyncCalls, runningAsyncCalls, runningSyncCalls));
         dispatcher.setDownloadStore(store);
 
-        doReturn(mock(ExecutorService.class)).when(dispatcher).executorService();
+        doReturn(mock(ExecutorService.class)).when(dispatcher).getExecutorService();
         doNothing().when(dispatcher).syncRunCall(any(DownloadCall.class));
 
         existFile.getParentFile().mkdirs();
@@ -271,7 +271,7 @@ public void enqueue_tasksWithNetworkNotAvailable() throws IOException {
         verify(callbackDispatcher, never())
                 .endTasks(any(Collection.class), any(Collection.class), any(Collection.class));
         assertThat(readyAsyncCalls).isEmpty();
-        verify(dispatcher, never()).executorService();
+        verify(dispatcher, never()).getExecutorService();
 
         final ArgumentCaptor<Exception> causeCaptor = ArgumentCaptor.forClass(Exception.class);
         verify(callbackDispatcher).endTasksWithError(listCaptor.capture(), causeCaptor.capture());
@@ -519,7 +519,7 @@ public void finish_asyncExecuted() {
         assertThat(runningAsyncCalls).containsExactly(mockReadyCall);
         assertThat(readyAsyncCalls).isEmpty();
 
-        final ExecutorService executorService = dispatcher.executorService();
+        final ExecutorService executorService = dispatcher.getExecutorService();
         verify(executorService).execute(mockReadyCall);
     }
 

File: okdownload/src/test/java/com/liulishuo/okdownload/core/listener/DownloadListenerBunchTest.java
Patch:
@@ -145,7 +145,7 @@ public void fetchEnd() throws Exception {
     }
 
     @Test
-    public void taskEnd() throws Exception {
+    public void taskEnd() {
         listenerBunch.taskEnd(task, endCause, realCause);
 
         verify(listener1).taskEnd(eq(task), eq(endCause), eq(realCause));

File: okdownload/src/test/java/com/liulishuo/okdownload/core/interceptor/RetryInterceptorTest.java
Patch:
@@ -100,7 +100,6 @@ public void interceptConnect_failedReleaseConnection() throws IOException {
         interceptor.interceptConnect(chain);
 
         verify(cache).catchException(any(IOException.class));
-        verify(connection).release();
     }
 
     @Test

File: okdownload/src/test/java/com/liulishuo/okdownload/core/file/DownloadUriOutputStreamTest.java
Patch:
@@ -152,8 +152,8 @@ public void factory() throws IOException {
         when(pdf.getFileDescriptor()).thenReturn(fd);
 
         final File file = new File("/test");
-        DownloadUriOutputStream outputStream = (DownloadUriOutputStream) new DownloadUriOutputStream.Factory()
-                .create(context, file, 1);
+        DownloadUriOutputStream outputStream = (DownloadUriOutputStream) new DownloadUriOutputStream
+                .Factory().create(context, file, 1);
         assertThat(outputStream.pdf).isEqualTo(pdf);
         assertThat(outputStream.out).isNotNull();
         assertThat(outputStream.fos.getFD()).isEqualTo(fd);

File: okdownload/src/test/java/com/liulishuo/okdownload/core/UtilTest.java
Patch:
@@ -283,7 +283,7 @@ public void isNetworkNotOnWifiType() {
 
     @Test
     public void isNetworkAvailable() {
-        assertThat(Util.isNetworkNotOnWifiType(null)).isTrue();
+        assertThat(Util.isNetworkAvailable(null)).isTrue();
 
         final ConnectivityManager manager = mock(ConnectivityManager.class);
         when(manager.getActiveNetworkInfo()).thenReturn(null);

File: okdownload/src/main/java/com/liulishuo/okdownload/DownloadTask.java
Patch:
@@ -629,7 +629,7 @@ public Builder(@NonNull String url, @NonNull Uri uri) {
          */
         public static final int DEFAULT_SYNC_BUFFER_SIZE = 65536/* byte **/;
         private int syncBufferSize = DEFAULT_SYNC_BUFFER_SIZE;
-        public static final int DEFAULT_SYNC_BUFFER_INTERVAL_MILLIS = 3000/* millis **/;
+        public static final int DEFAULT_SYNC_BUFFER_INTERVAL_MILLIS = 2000/* millis **/;
         private int syncBufferIntervalMillis = DEFAULT_SYNC_BUFFER_INTERVAL_MILLIS;
 
         public static final boolean DEFAULT_AUTO_CALLBACK_TO_UI_THREAD = true;

File: okdownload-breakpoint-sqlite/src/main/java/com/liulishuo/okdownload/core/breakpoint/BreakpointStoreOnSQLite.java
Patch:
@@ -59,7 +59,7 @@ public BreakpointStoreOnSQLite(Context context) {
     }
 
     @Override public void onSyncToFilesystemSuccess(@NonNull BreakpointInfo info, int blockIndex,
-                                                    long increaseLength) {
+                                                    long increaseLength) throws IOException {
         onCache.onSyncToFilesystemSuccess(info, blockIndex, increaseLength);
         final long newCurrentOffset = info.getBlock(blockIndex).getCurrentOffset();
         helper.updateBlockIncrease(info, blockIndex, newCurrentOffset);

File: okdownload-breakpoint-sqlite/src/main/java/com/liulishuo/okdownload/core/breakpoint/RemitStoreOnSQLite.java
Patch:
@@ -72,7 +72,7 @@ public class RemitStoreOnSQLite implements RemitSyncExecutor.RemitAgent, Downloa
     }
 
     @Override public void onSyncToFilesystemSuccess(@NonNull BreakpointInfo info, int blockIndex,
-                                                    long increaseLength) {
+                                                    long increaseLength) throws IOException {
         if (remitHelper.isNotFreeToDatabase(info.getId())) {
             sqliteCache.onSyncToFilesystemSuccess(info, blockIndex, increaseLength);
             return;

File: okdownload-breakpoint-sqlite/src/test/java/com/liulishuo/okdownload/core/breakpoint/RemitStoreOnSQLiteTest.java
Patch:
@@ -101,7 +101,7 @@ public void onTaskStart() {
     }
 
     @Test
-    public void onSyncToFilesystemSuccess_notFreeToDatabase() {
+    public void onSyncToFilesystemSuccess_notFreeToDatabase() throws IOException {
         final BreakpointInfo info = mock(BreakpointInfo.class);
         when(info.getId()).thenReturn(1);
         when(info.getBlock(0)).thenReturn(mock(BlockInfo.class));
@@ -115,7 +115,7 @@ public void onSyncToFilesystemSuccess_notFreeToDatabase() {
     }
 
     @Test
-    public void onSyncToFilesystemSuccess_freeToDatabase() {
+    public void onSyncToFilesystemSuccess_freeToDatabase() throws IOException {
         final BreakpointInfo info = mock(BreakpointInfo.class);
         when(info.getId()).thenReturn(1);
         when(info.getBlock(0)).thenReturn(mock(BlockInfo.class));

File: okdownload/src/main/java/com/liulishuo/okdownload/core/breakpoint/BreakpointStoreOnCache.java
Patch:
@@ -24,6 +24,7 @@
 import com.liulishuo.okdownload.core.IdentifiedTask;
 import com.liulishuo.okdownload.core.cause.EndCause;
 
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
@@ -92,9 +93,9 @@ public BreakpointInfo createAndInsert(@NonNull DownloadTask task) {
     }
 
     @Override public void onSyncToFilesystemSuccess(@NonNull BreakpointInfo info, int blockIndex,
-                                                    long increaseLength) {
+                                                    long increaseLength) throws IOException {
         final BreakpointInfo onCacheOne = this.storedInfos.get(info.id);
-        if (info != onCacheOne) throw new IllegalArgumentException("Info not on store!");
+        if (info != onCacheOne) throw new IOException("Info not on store!");
 
         onCacheOne.getBlock(blockIndex).increaseCurrentOffset(increaseLength);
     }

File: okdownload/src/main/java/com/liulishuo/okdownload/core/breakpoint/DownloadStore.java
Patch:
@@ -21,10 +21,12 @@
 
 import com.liulishuo.okdownload.core.cause.EndCause;
 
+import java.io.IOException;
+
 public interface DownloadStore extends BreakpointStore {
 
     void onSyncToFilesystemSuccess(@NonNull BreakpointInfo info, int blockIndex,
-                                   long increaseLength);
+                                   long increaseLength) throws IOException;
 
     void onTaskStart(int id);
 

File: okdownload/src/test/java/com/liulishuo/okdownload/DownloadTaskTest.java
Patch:
@@ -535,8 +535,8 @@ public void taskToString() {
         DownloadTask task = new DownloadTask.Builder("https://jacksgong.com",
                 new File(parentPath, filename)).build();
         assertThat(task.toString())
-                .endsWith("@0@https://jacksgong.com@" + new File(parentPath, filename)
-                        .getAbsolutePath());
+                .endsWith("@" + task.getId() + "@https://jacksgong.com@"
+                        + new File(parentPath, filename).getAbsolutePath());
     }
 
     @Rule public ExpectedException thrown = ExpectedException.none();

File: okdownload/src/main/java/com/liulishuo/okdownload/StatusUtil.java
Patch:
@@ -75,6 +75,8 @@ public static Status isCompletedOrUnknown(@NonNull DownloadTask task) {
                     && targetFile.exists()) {
                 return Status.IDLE;
             }
+        } else if (store.isOnlyMemoryCache()) {
+            return Status.UNKNOWN;
         } else if (targetFile != null && targetFile.exists()) {
             return Status.COMPLETED;
         } else {

File: okdownload/src/main/java/com/liulishuo/okdownload/OkDownload.java
Patch:
@@ -206,6 +206,8 @@ public OkDownload build() {
 
             okDownload.setMonitor(monitor);
 
+            Util.d("OkDownload", "downloadStore[" + downloadStore + "] connectionFactory["
+                    + connectionFactory);
             return okDownload;
         }
     }

File: okdownload/src/main/java/com/liulishuo/okdownload/core/dispatcher/DownloadDispatcher.java
Patch:
@@ -258,7 +258,7 @@ private synchronized void filterCanceledCalls(@NonNull DownloadTask task,
         }
 
         for (DownloadCall call : runningSyncCalls) {
-            if (call.task == task|| call.task.getId() == task.getId()) {
+            if (call.task == task || call.task.getId() == task.getId()) {
                 needCallbackCalls.add(call);
                 needCancelCalls.add(call);
                 return;

File: sample/src/main/java/com/liulishuo/okdownload/sample/NotificationActivity.java
Patch:
@@ -71,7 +71,8 @@ public class NotificationActivity extends BaseSampleActivity {
 
         // for cancel action on notification.
         IntentFilter filter = new IntentFilter(CancelReceiver.ACTION);
-        registerReceiver(new CancelReceiver(), filter);
+        cancelReciver = new CancelReceiver();
+        registerReceiver(cancelReciver, filter);
 
         initTask();
         initNotification();

File: okdownload/src/main/java/com/liulishuo/okdownload/DownloadTask.java
Patch:
@@ -837,7 +837,7 @@ public DownloadTask build() {
     }
 
     @Override public String toString() {
-        return super.toString() + "@" + id + "@" + url + "@" + providedPathFile.toString()
+        return super.toString() + "@" + id + "@" + url + "@" + directoryFile.toString()
                 + "/" + filenameHolder.get();
     }
 

File: okdownload/src/main/java/com/liulishuo/okdownload/core/download/DownloadStrategy.java
Patch:
@@ -337,7 +337,7 @@ public void inspectNetworkAvailable() throws UnknownHostException {
         }
 
         if (!Util.isNetworkAvailable(manager)) {
-            throw new UnknownHostException("network is not invalid!");
+            throw new UnknownHostException("network is not available!");
         }
     }
 

File: okdownload/src/test/java/com/liulishuo/okdownload/core/download/DownloadStrategyTest.java
Patch:
@@ -399,12 +399,12 @@ public void inspectNetworkAvailable_withPermission() throws UnknownHostException
         doReturn(manager).when(context).getSystemService(eq(Context.CONNECTIVITY_SERVICE));
         doReturn(null).when(manager).getActiveNetworkInfo();
         thrown.expect(UnknownHostException.class);
-        thrown.expectMessage("network is not invalid!");
+        thrown.expectMessage("network is not available!");
         strategy.inspectNetworkAvailable();
 
         doReturn(false).when(info).isConnected();
         thrown.expect(UnknownHostException.class);
-        thrown.expectMessage("network is not invalid!");
+        thrown.expectMessage("network is not available!");
         strategy.inspectNetworkAvailable();
     }
 }
\ No newline at end of file

File: okdownload/src/main/java/com/liulishuo/okdownload/core/download/ConnectTrial.java
Patch:
@@ -67,7 +67,7 @@ public ConnectTrial(@NonNull DownloadTask task, @NonNull BreakpointInfo info) {
     }
 
     public void executeTrial() throws IOException {
-        OkDownload.with().downloadStrategy().inspectNetwork(task);
+        OkDownload.with().downloadStrategy().inspectNetworkOnWifi(task);
         DownloadConnection connection = OkDownload.with().connectionFactory().create(task.getUrl());
         boolean isNeedTrialHeadMethod;
         try {

File: okdownload/src/main/java/com/liulishuo/okdownload/core/interceptor/FetchDataInterceptor.java
Patch:
@@ -57,7 +57,7 @@ public long interceptFetch(DownloadChain chain) throws IOException {
             throw InterruptException.SIGNAL;
         }
 
-        OkDownload.with().downloadStrategy().inspectNetwork(chain.getTask());
+        OkDownload.with().downloadStrategy().inspectNetworkOnWifi(chain.getTask());
         // fetch
         int fetchLength = inputStream.read(readBuffer);
         if (fetchLength == -1) {

File: okdownload/src/main/java/com/liulishuo/okdownload/core/interceptor/connect/CallServerInterceptor.java
Patch:
@@ -28,7 +28,7 @@
 public class CallServerInterceptor implements Interceptor.Connect {
     @NonNull @Override
     public DownloadConnection.Connected interceptConnect(DownloadChain chain) throws IOException {
-        OkDownload.with().downloadStrategy().inspectNetwork(chain.getTask());
+        OkDownload.with().downloadStrategy().inspectNetworkOnWifi(chain.getTask());
         return chain.getConnectionOrCreate().execute();
     }
 }

File: okdownload/src/test/java/com/liulishuo/okdownload/core/download/ConnectTrialTest.java
Patch:
@@ -95,7 +95,7 @@ public void executeTrial() throws Exception {
         connectTrial.executeTrial();
 
         final DownloadStrategy downloadStrategy = OkDownload.with().downloadStrategy();
-        verify(downloadStrategy).inspectNetwork(eq(task));
+        verify(downloadStrategy).inspectNetworkOnWifi(eq(task));
         verify(connection).addHeader(eq(IF_MATCH), eq(etag));
         verify(connection).addHeader(eq(RANGE), eq("bytes=0-0"));
 

File: okdownload/src/test/java/com/liulishuo/okdownload/core/interceptor/FetchDataInterceptorTest.java
Patch:
@@ -73,7 +73,7 @@ public void interceptFetch() throws IOException {
         interceptor.interceptFetch(chain);
 
         final DownloadStrategy downloadStrategy = OkDownload.with().downloadStrategy();
-        verify(downloadStrategy).inspectNetwork(eq(task));
+        verify(downloadStrategy).inspectNetworkOnWifi(eq(task));
         verify(chain).increaseCallbackBytes(10L);
         verify(chain).flushNoCallbackIncreaseBytes();
         verify(outputStream).write(eq(0), any(byte[].class), eq(10));

File: okdownload/src/test/java/com/liulishuo/okdownload/core/interceptor/connect/CallServerInterceptorTest.java
Patch:
@@ -60,6 +60,6 @@ public void interceptConnect() throws Exception {
         serverInterceptor.interceptConnect(chain);
 
         final DownloadStrategy downloadStrategy = OkDownload.with().downloadStrategy();
-        verify(downloadStrategy).inspectNetwork(eq(task));
+        verify(downloadStrategy).inspectNetworkOnWifi(eq(task));
     }
 }
\ No newline at end of file

File: okdownload/src/main/java/com/liulishuo/okdownload/core/dispatcher/CallbackDispatcher.java
Patch:
@@ -142,8 +142,8 @@ public void connectStart(@NonNull final DownloadTask task, final int blockIndex,
             public void connectEnd(@NonNull final DownloadTask task, final int blockIndex,
                                    final int responseCode,
                                    @NonNull final Map<String, List<String>> requestHeaderFields) {
-                Util.d(TAG, "<----- finish connection task(" + task.getId()
-                        + ") block(" + blockIndex + ") code[" + responseCode + "]" + requestHeaderFields);
+                Util.d(TAG, "<----- finish connection task(" + task.getId() + ") block("
+                        + blockIndex + ") code[" + responseCode + "]" + requestHeaderFields);
                 if (task.isAutoCallbackToUIThread()) {
                     uiHandler.post(new Runnable() {
                         @Override public void run() {

File: okdownload/src/main/java/com/liulishuo/okdownload/core/file/DownloadUriOutputStream.java
Patch:
@@ -40,8 +40,9 @@ public class DownloadUriOutputStream implements DownloadOutputStream {
 
     public DownloadUriOutputStream(Context context, Uri uri, int bufferSize) throws
             FileNotFoundException {
-        pdf = context.getContentResolver().openFileDescriptor(uri, "rw");
-        if (pdf == null) throw new IllegalArgumentException();
+        final ParcelFileDescriptor pdf = context.getContentResolver().openFileDescriptor(uri, "rw");
+        if (pdf == null) throw new FileNotFoundException("result of " + uri + " is null!");
+        this.pdf = pdf;
 
         final FileOutputStream fos = new FileOutputStream(pdf.getFileDescriptor());
         channel = fos.getChannel();

File: okdownload/src/main/java/com/liulishuo/okdownload/core/breakpoint/BreakpointStoreOnCache.java
Patch:
@@ -150,7 +150,7 @@ public synchronized int findOrCreateId(@NonNull DownloadTask task) {
         }
 
         final int id = allocateId();
-        unStoredTasks.put(id, task);
+        unStoredTasks.put(id, task.toBuilder().build());
         return id;
     }
 

File: okdownload/src/main/java/com/liulishuo/okdownload/DownloadTask.java
Patch:
@@ -34,7 +34,7 @@
 
 public class DownloadTask implements Cloneable, Comparable<DownloadTask> {
     private final int id;
-    private final String url;
+    @NonNull private final String url;
     private final Uri uri;
     private final boolean isUriIsDirectory;
     private final Map<String, List<String>> headerMapFields;
@@ -158,7 +158,7 @@ public boolean isUriIsDirectory() {
         return isUriIsDirectory;
     }
 
-    public String getUrl() {
+    @NonNull public String getUrl() {
         return url;
     }
 

File: okdownload/src/main/java/com/liulishuo/okdownload/core/file/DownloadUriOutputStream.java
Patch:
@@ -21,7 +21,6 @@
 import android.os.Build;
 import android.os.ParcelFileDescriptor;
 import android.support.annotation.NonNull;
-import android.system.ErrnoException;
 import android.system.Os;
 
 import com.liulishuo.okdownload.core.Util;
@@ -83,10 +82,9 @@ public void setLength(long newLength) throws IOException {
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
             try {
                 Os.ftruncate(pdf.getFileDescriptor(), newLength);
-            } catch (ErrnoException e) {
+            } catch (Throwable e) {
                 Util.w(tag, "It can't pre-allocate length(" + newLength + ") on the sdk"
                         + " version(" + Build.VERSION.SDK_INT + "), because of " + e);
-                e.printStackTrace();
             }
         } else {
             Util.w(tag,

File: okdownload/src/test/java/com/liulishuo/okdownload/core/download/DownloadStrategyTest.java
Patch:
@@ -327,7 +327,6 @@ public void determineFilename_tmpFilenameValid() throws IOException {
 
     @Test
     public void inspectNetwork() throws IOException {
-        mockOkDownload();
         final DownloadTask task = mock(DownloadTask.class);
         when(task.isWifiRequired()).thenReturn(true);
 

File: okdownload/src/main/java/com/liulishuo/okdownload/core/download/ConnectTrial.java
Patch:
@@ -64,6 +64,7 @@ public ConnectTrial(@NonNull DownloadTask task, @NonNull BreakpointInfo info) {
     }
 
     public void executeTrial() throws IOException {
+        OkDownload.with().downloadStrategy().inspectNetwork(task);
         DownloadConnection connection = OkDownload.with().connectionFactory().create(task.getUrl());
         try {
             if (!Util.isEmpty(info.getEtag())) {

File: okdownload/src/test/java/com/liulishuo/okdownload/DownloadTaskTest.java
Patch:
@@ -239,13 +239,15 @@ public void profile() {
                 .setSyncBufferIntervalMillis(4)
                 .setMinIntervalMillisCallbackProcess(5)
                 .setAutoCallbackToUIThread(true)
+                .setWifiRequired(true)
                 .build();
         assertThat(task.getReadBufferSize()).isEqualTo(1);
         assertThat(task.getFlushBufferSize()).isEqualTo(2);
         assertThat(task.getSyncBufferSize()).isEqualTo(3);
         assertThat(task.getSyncBufferIntervalMills()).isEqualTo(4);
         assertThat(task.getMinIntervalMillisCallbackProcess()).isEqualTo(5);
         assertThat(task.isAutoCallbackToUIThread()).isTrue();
+        assertThat(task.isWifiRequired()).isTrue();
 
         // setTag
         task.setTag("tag");

File: okdownload/src/test/java/com/liulishuo/okdownload/core/download/ConnectTrialTest.java
Patch:
@@ -82,6 +82,8 @@ public void setUp() throws Exception {
     public void executeTrial() throws Exception {
         connectTrial.executeTrial();
 
+        final DownloadStrategy downloadStrategy = OkDownload.with().downloadStrategy();
+        verify(downloadStrategy).inspectNetwork(eq(task));
         verify(connection).addHeader(eq(IF_MATCH), eq(etag));
         verify(connection).addHeader(eq(RANGE), eq("bytes=0-0"));
 

File: okdownload/src/test/java/com/liulishuo/okdownload/DownloadTaskTest.java
Patch:
@@ -304,7 +304,7 @@ public void operation() {
     public void taskBuilder_constructWithFile() {
         final String url = "https://jacksgong.com";
         final File noExistFile = new File(parentPath, "no-exist");
-        DownloadTask task= new DownloadTask.Builder(url,noExistFile).build();
+        DownloadTask task = new DownloadTask.Builder(url, noExistFile).build();
         assertThat(task.getFilename()).isEqualTo(noExistFile.getName());
         assertThat(task.getPath()).isEqualTo(noExistFile.getAbsolutePath());
 

File: okdownload/src/main/java/com/liulishuo/okdownload/DownloadContext.java
Patch:
@@ -384,7 +384,7 @@ public void taskEnd(@NonNull DownloadTask task, @NonNull EndCause cause,
     /**
      * The Alter helper for the {@link DownloadContext}.
      */
-    static class AlterContext {
+    public static class AlterContext {
         private final DownloadContext context;
 
         AlterContext(DownloadContext context) {

File: okdownload/src/main/java/com/liulishuo/okdownload/core/download/DownloadChain.java
Patch:
@@ -101,8 +101,6 @@ public void cancel() {
         }
 
         currentThread.interrupt();
-
-        EXECUTOR.execute(cancelRunnable);
     }
 
     @NonNull public DownloadTask getTask() {
@@ -237,6 +235,7 @@ public void run() {
             // interrupt.
         } finally {
             finished.set(true);
+            if (cache.isUserCanceled()) EXECUTOR.execute(cancelRunnable);
         }
     }
 

File: okdownload/src/main/java/com/liulishuo/okdownload/DownloadContext.java
Patch:
@@ -81,7 +81,8 @@ public void start(final DownloadListener listener, boolean isSerial) {
         }
 
         if (isSerial) {
-            final List<DownloadTask> scheduleTaskList = Arrays.asList(tasks);
+            final List<DownloadTask> scheduleTaskList = new ArrayList<>();
+            Collections.addAll(scheduleTaskList, tasks);
             Collections.sort(scheduleTaskList);
             executeOnSerialExecutor(new Runnable() {
                 @Override public void run() {

File: okdownload/src/main/java/com/liulishuo/okdownload/core/download/DownloadCall.java
Patch:
@@ -53,7 +53,7 @@ public class DownloadCall extends NamedRunnable implements Comparable<DownloadCa
     @NonNull private final ArrayList<DownloadChain> blockChainList;
 
     @Nullable private volatile DownloadCache cache;
-    private volatile boolean canceled;
+    volatile boolean canceled;
     volatile boolean finishing;
 
 
@@ -74,7 +74,7 @@ public static DownloadCall create(DownloadTask task, boolean asyncExecuted) {
     }
 
     public boolean cancel() {
-        synchronized (this){
+        synchronized (this) {
             if (canceled) return false;
             if (finishing) return false;
             this.canceled = true;

File: okdownload/src/test/java/com/liulishuo/okdownload/core/download/DownloadCallTest.java
Patch:
@@ -222,13 +222,13 @@ public void execute_end() throws InterruptedException, IOException {
 
         final DownloadListener mockListener = OkDownload.with().callbackDispatcher().dispatch();
 
-        when(mockCache.isUserCanceled()).thenReturn(true);
+        call.canceled = true;
         call.execute();
         verify(mockListener, never()).taskEnd(any(DownloadTask.class), any(EndCause.class),
                 nullable(Exception.class));
 
         when(mockCache.getOutputStream()).thenReturn(mock(MultiPointOutputStream.class));
-        when(mockCache.isUserCanceled()).thenReturn(false);
+        call.canceled = false;
         call.execute();
         verify(mockListener).taskEnd(mockTask, EndCause.COMPLETED, null);
         verify(mockStore)

File: okdownload/src/main/java/com/liulishuo/okdownload/core/breakpoint/BreakpointStoreOnCache.java
Patch:
@@ -75,7 +75,7 @@ public BreakpointInfo createAndInsert(@NonNull DownloadTask task) {
 
         BreakpointInfo newInfo = new BreakpointInfo(id, task.getUrl(), task.getParentPath(),
                 task.getFilename());
-        synchronized (this){
+        synchronized (this) {
             storedInfos.put(id, newInfo);
             unStoredTasks.remove(id);
         }
@@ -117,7 +117,7 @@ public boolean update(@NonNull BreakpointInfo breakpointInfo) {
     @Override
     public void onTaskEnd(int id, @NonNull EndCause cause, @Nullable Exception exception) {
         if (cause == EndCause.COMPLETED) {
-            synchronized (this){
+            synchronized (this) {
                 storedInfos.remove(id);
                 if (unStoredTasks.get(id) == null) sortedOccupiedIds.remove(Integer.valueOf(id));
             }

File: okdownload/src/main/java/com/liulishuo/okdownload/StatusUtil.java
Patch:
@@ -62,7 +62,9 @@ public static Status isCompletedOrUnknown(@NonNull DownloadTask task) {
         @NonNull final String parentPath = task.getParentPath();
 
         if (info != null) {
-            if ((filename != null && filename.equals(info.getFilename()))
+            if (!info.isChunked() && info.getTotalLength() <= 0) {
+                return Status.UNKNOWN;
+            } else if ((filename != null && filename.equals(info.getFilename()))
                     && new File(parentPath, filename).exists()
                     && info.getTotalOffset() == info.getTotalLength()) {
                 return Status.COMPLETED;

File: okdownload/src/main/java/com/liulishuo/okdownload/core/breakpoint/BreakpointStoreOnCache.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.List;
 
 public class BreakpointStoreOnCache implements BreakpointStore {
-    final SparseArray<BreakpointInfo> storedInfos;
+    private final SparseArray<BreakpointInfo> storedInfos;
     private final HashMap<String, String> responseFilenameMap;
 
     private final SparseArray<DownloadTask> unStoredTasks;

File: okdownload-breakpoint-sqlite/src/main/java/com/liulishuo/okdownload/core/breakpoint/BreakpointSQLiteHelper.java
Patch:
@@ -223,9 +223,10 @@ public void updateBlockIncrease(@NonNull BreakpointInfo info, int blockIndex,
 
     public void updateInfo(@NonNull BreakpointInfo info) throws IOException {
         final SQLiteDatabase db = getWritableDatabase();
+        Cursor cursor = null;
         db.beginTransaction();
         try {
-            final Cursor cursor = getWritableDatabase().rawQuery(
+            cursor = getWritableDatabase().rawQuery(
                     "SELECT " + ID + " FROM " + BREAKPOINT_TABLE_NAME + " WHERE " + ID + " ="
                             + info.id + " LIMIT 1",
                     null);
@@ -237,6 +238,7 @@ public void updateInfo(@NonNull BreakpointInfo info) throws IOException {
 
             db.setTransactionSuccessful();
         } finally {
+            if (cursor != null) cursor.close();
             db.endTransaction();
         }
     }

File: okdownload/src/main/java/com/liulishuo/okdownload/StatusUtil.java
Patch:
@@ -66,6 +66,9 @@ public static Status isCompletedOrUnknown(@NonNull DownloadTask task) {
                     && new File(parentPath, filename).exists()
                     && info.getTotalOffset() == info.getTotalLength()) {
                 return Status.COMPLETED;
+            } else if (filename == null && info.getFilename() != null
+                    && new File(parentPath, info.getFilename()).exists()) {
+                return Status.IDLE;
             } else if (filename != null && filename.equals(info.getFilename())
                     && new File(parentPath, filename).exists()) {
                 return Status.IDLE;

File: okdownload/src/main/java/com/liulishuo/okdownload/core/cause/EndCause.java
Patch:
@@ -17,7 +17,7 @@
 package com.liulishuo.okdownload.core.cause;
 
 public enum EndCause {
-    COMPLETE,
+    COMPLETED,
     ERROR,
     CANCELED,
     FILE_BUSY,

File: okdownload/src/main/java/com/liulishuo/okdownload/core/download/DownloadCall.java
Patch:
@@ -161,7 +161,7 @@ public void execute() throws InterruptedException {
                 dispatcher.dispatch().taskEnd(task, EndCause.PRE_ALLOCATE_FAILED,
                         cache.getRealCause());
             } else {
-                dispatcher.dispatch().taskEnd(task, EndCause.COMPLETE, null);
+                dispatcher.dispatch().taskEnd(task, EndCause.COMPLETED, null);
                 store.completeDownload(task.getId());
                 fileStrategy.completeProcessStream(outputStream, task);
             }

File: okdownload/src/main/java/com/liulishuo/okdownload/core/listener/DownloadListener3.java
Patch:
@@ -36,7 +36,7 @@ public final void taskStart(DownloadTask task, Listener1Assist.Listener1Model mo
     @Override public void taskEnd(DownloadTask task, EndCause cause, @Nullable Exception realCause,
                                   @NonNull Listener1Assist.Listener1Model model) {
         switch (cause) {
-            case COMPLETE:
+            case COMPLETED:
                 completed(task);
                 break;
             case CANCELED:

File: okdownload/src/test/java/com/liulishuo/okdownload/core/download/DownloadCallTest.java
Patch:
@@ -220,7 +220,7 @@ public void execute_end() throws InterruptedException, IOException {
 
         when(mockCache.isUserCanceled()).thenReturn(false);
         call.execute();
-        verify(mockListener).taskEnd(mockTask, EndCause.COMPLETE, null);
+        verify(mockListener).taskEnd(mockTask, EndCause.COMPLETED, null);
         verify(mockStore).completeDownload(mockTask.getId());
         verify(mockFileStrategy).completeProcessStream(any(MultiPointOutputStream.class),
                 eq(mockTask));

File: okdownload/src/test/java/com/liulishuo/okdownload/core/listener/DownloadListener3Test.java
Patch:
@@ -77,7 +77,7 @@ public void end() {
         listener3.taskStart(task);
         verify(listener3).started(eq(task));
 
-        listener3.taskEnd(task, EndCause.COMPLETE, realCause);
+        listener3.taskEnd(task, EndCause.COMPLETED, realCause);
         verify(listener3).completed(eq(task));
 
         listener3.taskEnd(task, EndCause.CANCELED, realCause);

File: okdownload/src/test/java/com/liulishuo/okdownload/core/listener/assist/Listener4SpeedAssistExtendTest.java
Patch:
@@ -105,11 +105,11 @@ public void dispatchBlockEnd() {
 
     @Test
     public void dispatchTaskEnd() {
-        final boolean result = assistExtend.dispatchTaskEnd(task, EndCause.COMPLETE, null, model);
+        final boolean result = assistExtend.dispatchTaskEnd(task, EndCause.COMPLETED, null, model);
         assertThat(result).isTrue();
 
         verify(model.taskSpeed).endTask();
-        verify(callback).taskEnd(eq(task), eq(EndCause.COMPLETE), nullable(Exception.class),
+        verify(callback).taskEnd(eq(task), eq(EndCause.COMPLETED), nullable(Exception.class),
                 eq(model.taskSpeed));
     }
 }
\ No newline at end of file

File: sample/src/main/java/com/liulishuo/okdownload/sample/comprehensive/multiple/MultipleDownloadListener.java
Patch:
@@ -38,8 +38,6 @@ public class MultipleDownloadListener extends DownloadListener1 {
     void resetInfo(DownloadTask task, MultipleTaskViewHolder viewHolder) {
         viewHolder.updatePriority(task.getPriority());
 
-        StatusUtil.getStatus(task);
-
         if (StatusUtil.isSameTaskPendingOrRunning(task)) {
             viewHolder.setToCancel(task);
             viewHolder.getStatusTv().setText(MultipleTaskUtil.getStatus(task));
@@ -55,7 +53,7 @@ void resetInfo(DownloadTask task, MultipleTaskViewHolder viewHolder) {
                         info.getTotalLength(),
                         info.getTotalOffset());
             } else {
-                viewHolder.getStatusTv().setText(R.string.state_unknow);
+                viewHolder.getStatusTv().setText(R.string.state_unknown);
                 ProgressUtil.calcProgressToViewAndMark(viewHolder.getProgressBar(), 0, 0);
             }
         }

File: okdownload/src/main/java/com/liulishuo/okdownload/core/breakpoint/BreakpointStoreOnCache.java
Patch:
@@ -19,12 +19,12 @@
 import android.support.annotation.NonNull;
 import android.util.SparseArray;
 
+import com.liulishuo.okdownload.DownloadTask;
+
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
-import com.liulishuo.okdownload.DownloadTask;
-
 public class BreakpointStoreOnCache implements BreakpointStore {
     private final SparseArray<BreakpointInfo> storedInfos;
 
@@ -111,7 +111,7 @@ public synchronized int findOrCreateId(@NonNull DownloadTask task) {
         final int size = clonedMap.size();
         for (int i = 0; i < size; i++) {
             final BreakpointInfo info = clonedMap.valueAt(i);
-            if (info.isSameFrom(task)) {
+            if (info != null && info.isSameFrom(task)) {
                 return info.id;
             }
         }

File: okdownload/src/main/java/com/liulishuo/okdownload/core/listener/assist/Listener4Assist.java
Patch:
@@ -88,6 +88,7 @@ public void infoReady(DownloadTask task, BreakpointInfo info, boolean fromBreakp
 
     public void fetchProgress(DownloadTask task, int blockIndex, long increaseBytes) {
         final Listener4Model model = findModel(task.getId());
+        if (model == null) return;
 
         final long blockCurrentOffset = model.blockCurrentOffsetMap
                 .get(blockIndex) + increaseBytes;
@@ -107,6 +108,8 @@ public void fetchProgress(DownloadTask task, int blockIndex, long increaseBytes)
 
     public void fetchEnd(DownloadTask task, int blockIndex) {
         final Listener4Model model = findModel(task.getId());
+        if (model == null) return;
+
         if (assistExtend != null
                 && assistExtend.dispatchBlockEnd(task, blockIndex, model)) {
             return;

File: sample/src/main/java/com/liulishuo/okdownload/sample/ListenerSample.java
Patch:
@@ -41,7 +41,7 @@
 
 public class ListenerSample {
 
-    private final static String TAG = "ListenerSample";
+    private static final String TAG = "ListenerSample";
 
     private static void log(String msg) {
         Log.d(TAG, msg);

File: okdownload/src/main/java/com/liulishuo/okdownload/core/listener/DownloadListener1.java
Patch:
@@ -49,7 +49,6 @@ public DownloadListener1() {
         assist.taskStart(task);
     }
 
-
     @Override public void downloadFromBeginning(DownloadTask task, BreakpointInfo info,
                                                 ResumeFailedCause cause) {
         assist.downloadFromBeginning(task, cause);

File: okdownload/src/main/java/com/liulishuo/okdownload/core/listener/assist/Listener1Assist.java
Patch:
@@ -44,7 +44,6 @@ public void taskStart(DownloadTask task) {
             if (singleTaskModel == null) {
                 singleTaskModel = model;
             } else {
-
                 modelList.put(id, model);
             }
         }

File: sample/src/main/java/com/liulishuo/okdownload/sample/SingleActivity.java
Patch:
@@ -137,7 +137,7 @@ protected void taskEnd(DownloadTask task, EndCause cause,
             }
 
             @Override public void infoReady(DownloadTask task, @NonNull BreakpointInfo info,
-                                               boolean fromBreakpoint) {
+                                            boolean fromBreakpoint) {
                 statusTv.setText(R.string.info_ready);
 
                 totalLength = info.getTotalLength();
@@ -147,7 +147,7 @@ protected void taskEnd(DownloadTask task, EndCause cause,
 
             @Override
             public void progressBlock(DownloadTask task, int blockIndex,
-                                         long currentBlockOffset) {
+                                      long currentBlockOffset) {
             }
 
             @Override public void progress(DownloadTask task, long currentOffset) {

File: okdownload/src/main/java/com/liulishuo/okdownload/core/listener/assist/DownloadListener4Assist.java
Patch:
@@ -79,14 +79,14 @@ public void fetchProgress(DownloadTask task, int blockIndex, long increaseBytes)
         model.blockCurrentOffsetMap.put(blockIndex, blockCurrentOffset);
         model.currentOffset += increaseBytes;
 
-        if (callback != null){
+        if (callback != null) {
             callback.progressBlock(task, blockIndex, blockCurrentOffset);
             callback.progress(task, model.currentOffset);
         }
     }
 
     public void fetchEnd(DownloadTask task, int blockIndex) {
-        if (callback != null){
+        if (callback != null) {
             callback.blockEnd(task, blockIndex, findModel(task.getId()).info.getBlock(blockIndex));
         }
     }

File: okdownload/src/test/java/com/liulishuo/okdownload/SpeedCalculatorTest.java
Patch:
@@ -85,6 +85,9 @@ public void calculate() throws InterruptedException {
         assertThat(calculator.beginTimestamp).isEqualTo(firstTimestamp);
         // (10+20+60+10)/(96-66)*1000
         assertThat(calculator.getBytesPerSecondFromBegin()).isEqualTo(3333);
+
+        calculator.reset();
+        assertThat(calculator.getBytesPerSecondFromBegin()).isEqualTo(0);
     }
 
     @Test

File: sample/src/main/java/com/liulishuo/okdownload/sample/EachBlockProgressActivity.java
Patch:
@@ -268,8 +268,8 @@ public void fetchStart(DownloadTask task, int blockIndex, long contentLength) {
             protected void taskEnd(DownloadTask task, EndCause cause,
                                    @android.support.annotation.Nullable Exception realCause,
                                    @NonNull String averageSpeed) {
-                final String statusWithSpeed = cause.toString() + " " + averageSpeed;
-                statusTv.setText(statusWithSpeed);
+                statusTv.setText(cause.toString());
+                taskSpeedTv.setText(averageSpeed);
 
                 actionTv.setText(R.string.start);
                 // mark

File: sample/src/main/java/com/liulishuo/okdownload/sample/util/EachBlockProgressUtil.java
Patch:
@@ -208,7 +208,7 @@ public void fetchProgress(DownloadTask task, int blockIndex, long increaseBytes)
 
             @Override
             public void taskEnd(DownloadTask task, EndCause cause, @Nullable Exception realCause) {
-                final String status = "Task End with: " + cause;
+                final String status = "Task" + task.getId() + " End with: " + cause;
                 extInfoTv.setText(status);
             }
         };

File: okdownload/src/main/java/cn/dreamtobe/okdownload/core/breakpoint/BlockInfo.java
Patch:
@@ -58,7 +58,7 @@ public long getContentLength() {
     }
 
     public long getRangeRight() {
-        return startOffset + contentLength;
+        return startOffset + contentLength - 1;
     }
 
     public void increaseCurrentOffset(@IntRange(from = 1) long increaseLength) {

File: okdownload/src/main/java/cn/dreamtobe/okdownload/core/file/MultiPointOutputStream.java
Patch:
@@ -114,8 +114,7 @@ public void ensureSyncComplete(int blockIndex) {
 
     public void inspectComplete(int blockIndex) throws IOException {
         final BlockInfo blockInfo = info.getBlock(blockIndex);
-        if (!Util.isCorrectFull(blockInfo.getCurrentOffset(), blockInfo.getContentLength(),
-                info.isLastBlock(blockIndex))) {
+        if (!Util.isCorrectFull(blockInfo.getCurrentOffset(), blockInfo.getContentLength())) {
             throw new IOException("The current offset on block-info isn't update correct, "
                     + blockInfo.getCurrentOffset() + " != " + blockInfo.getContentLength()
                     + " on " + blockIndex);

File: okdownload/src/test/java/cn/dreamtobe/okdownload/core/breakpoint/BlockInfoTest.java
Patch:
@@ -49,9 +49,9 @@ public void copyNotClone() {
     @Test
     public void getRangeRight() {
         BlockInfo info = new BlockInfo(0, 3, 1);
-        assertThat(info.getRangeRight()).isEqualTo(3);
+        assertThat(info.getRangeRight()).isEqualTo(2);
 
         info = new BlockInfo(12, 6, 2);
-        assertThat(info.getRangeRight()).isEqualTo(18);
+        assertThat(info.getRangeRight()).isEqualTo(17);
     }
 }
\ No newline at end of file

File: okdownload/src/test/java/cn/dreamtobe/okdownload/core/download/DownloadCallTest.java
Patch:
@@ -109,7 +109,7 @@ public void execute_createIfNon() throws IOException, InterruptedException {
     @Test
     public void execute_blockComplete_ignore() throws InterruptedException {
         mockLocalCheck(true);
-        when(mockInfo.getBlock(1)).thenReturn(new BlockInfo(10, 10, 11));
+        when(mockInfo.getBlock(1)).thenReturn(new BlockInfo(10, 10, 10));
 
         call.execute();
 

File: okdownload/src/test/java/cn/dreamtobe/okdownload/core/interceptor/connect/HeaderInterceptorTest.java
Patch:
@@ -94,7 +94,7 @@ public void interceptConnect_range() throws IOException {
         verify(connection).addHeader(nameCaptor.capture(), valueCaptor.capture());
 
         assertThat(nameCaptor.getAllValues()).containsExactly("Range");
-        assertThat(valueCaptor.getAllValues()).containsExactly("bytes=10-20");
+        assertThat(valueCaptor.getAllValues()).containsExactly("bytes=10-19");
 
         when(chain.getBlockIndex()).thenReturn(2);
         when(info.getBlock(2)).thenReturn(new BlockInfo(20, 10));

File: okdownload/src/main/java/cn/dreamtobe/okdownload/core/download/DownloadCall.java
Patch:
@@ -69,6 +69,9 @@ public static DownloadCall create(DownloadTask task, boolean asyncExecuted) {
     }
 
     public void cancel() {
+        if (canceled) return;
+        OkDownload.with().downloadDispatcher().flyingCanceled(this);
+
         this.canceled = true;
         final DownloadCache cache = this.cache;
         if (cache != null) cache.setUserCanceled();

File: okdownload/src/main/java/cn/dreamtobe/okdownload/core/download/DownloadStrategy.java
Patch:
@@ -92,7 +92,7 @@ public boolean isSplitBlock(final long contentLength,
         return connected.getResponseCode() == HttpURLConnection.HTTP_PARTIAL;
     }
 
-    private static final Pattern TMP_FILE_NAME_PATTERN = Pattern.compile(".*\\\\|/([\\w|.]*)\\??");
+    private static final Pattern TMP_FILE_NAME_PATTERN = Pattern.compile(".*\\\\|/([^\\\\|/|?]*)\\??");
 
     public void validFilenameFromResume(@NonNull String filenameOnStore,
                                         @NonNull DownloadTask task) {

File: okdownload-breakpoint-sqlite/src/main/java/cn/dreamtobe/okdownload/core/breakpoint/BreakpointStoreOnSQLite.java
Patch:
@@ -24,17 +24,17 @@
 
 import cn.dreamtobe.okdownload.DownloadTask;
 
-public class BreakpointStoreOnSqlite implements BreakpointStore {
+public class BreakpointStoreOnSQLite implements BreakpointStore {
 
     private final BreakpointSQLiteHelper helper;
     private final BreakpointStoreOnCache onCache;
 
-    BreakpointStoreOnSqlite(BreakpointSQLiteHelper helper, BreakpointStoreOnCache onCache) {
+    BreakpointStoreOnSQLite(BreakpointSQLiteHelper helper, BreakpointStoreOnCache onCache) {
         this.helper = helper;
         this.onCache = onCache;
     }
 
-    public BreakpointStoreOnSqlite(Context context) {
+    public BreakpointStoreOnSQLite(Context context) {
         this.helper = new BreakpointSQLiteHelper(context.getApplicationContext());
         this.onCache = new BreakpointStoreOnCache(helper.loadToCache());
     }

File: okdownload-breakpoint-sqlite/src/test/java/cn/dreamtobe/okdownload/core/breakpoint/BreakpointStoreOnSqliteTest.java
Patch:
@@ -41,7 +41,7 @@
 @RunWith(RobolectricTestRunner.class)
 @Config(manifest = NONE)
 public class BreakpointStoreOnSqliteTest {
-    private BreakpointStoreOnSqlite store;
+    private BreakpointStoreOnSQLite store;
 
     private BreakpointSQLiteHelper helper;
     private BreakpointStoreOnCache onCache;
@@ -50,7 +50,7 @@ public class BreakpointStoreOnSqliteTest {
     public void setup() {
         helper = spy(new BreakpointSQLiteHelper(application));
         onCache = spy(new BreakpointStoreOnCache());
-        store = spy(new BreakpointStoreOnSqlite(helper, onCache));
+        store = spy(new BreakpointStoreOnSQLite(helper, onCache));
     }
 
     @After

File: okdownload/src/main/java/cn/dreamtobe/okdownload/OkDownload.java
Patch:
@@ -125,7 +125,7 @@ public static class Builder {
 
         // You can import through cn.dreamtobe.okdownload:sqlite:{version}
         private static final String STORE_ON_SQLITE
-                = "cn.dreamtobe.okdownload.core.breakpoint.BreakpointStoreOnSqlite";
+                = "cn.dreamtobe.okdownload.core.breakpoint.BreakpointStoreOnSQLite";
 
         public Builder(@NonNull Context context) {
             this.context = context.getApplicationContext();

File: okdownload/src/main/java/cn/dreamtobe/okdownload/core/interceptor/RetryInterceptor.java
Patch:
@@ -22,8 +22,8 @@
 import cn.dreamtobe.okdownload.core.download.DownloadCache;
 import cn.dreamtobe.okdownload.core.download.DownloadChain;
 import cn.dreamtobe.okdownload.core.exception.FileBusyAfterRunException;
-import cn.dreamtobe.okdownload.core.exception.PreAllocateException;
 import cn.dreamtobe.okdownload.core.exception.InterruptException;
+import cn.dreamtobe.okdownload.core.exception.PreAllocateException;
 import cn.dreamtobe.okdownload.core.exception.ResumeFailedException;
 import cn.dreamtobe.okdownload.core.exception.ServerCancelledException;
 
@@ -56,6 +56,7 @@ public long interceptFetch(DownloadChain chain) throws IOException {
             handleException(e, chain.getCache());
             throw e;
         } finally {
+            chain.getOutputStream().ensureSyncComplete(chain.getBlockIndex());
             chain.getOutputStream().close(chain.getBlockIndex());
         }
     }

File: okdownload/src/main/java/cn/dreamtobe/okdownload/core/interceptor/BreakpointInterceptor.java
Patch:
@@ -122,6 +122,7 @@ public long interceptFetch(DownloadChain chain) throws IOException {
         }
 
         // finish
+        chain.flushNoCallbackIncreaseBytes();
         final MultiPointOutputStream outputStream = chain.getOutputStream();
         outputStream.ensureSyncComplete(blockIndex);
 

File: okdownload/src/test/java/cn/dreamtobe/okdownload/core/interceptor/BreakpointInterceptorTest.java
Patch:
@@ -144,6 +144,7 @@ public void interceptFetch_finish() throws IOException {
 
         final long contentLength = interceptor.interceptFetch(mockChain);
         verify(mockChain, times(6)).loopFetch();
+        verify(mockChain).flushNoCallbackIncreaseBytes();
 
         assertThat(contentLength).isEqualTo(10);
     }

File: okdownload/src/test/java/cn/dreamtobe/okdownload/core/interceptor/FetchDataInterceptorTest.java
Patch:
@@ -70,7 +70,8 @@ public void interceptFetch() throws IOException {
 
         interceptor.interceptFetch(chain);
 
-        verify(dispatcher.dispatch()).fetchProgress(eq(task), eq(0), eq(10L));
+        verify(chain).increaseCallbackBytes(10L);
+        verify(chain).flushNoCallbackIncreaseBytes();
         verify(outputStream).write(eq(0), any(byte[].class), eq(10));
     }
 }
\ No newline at end of file

File: okdownload/src/main/java/cn/dreamtobe/okdownload/core/download/DownloadChain.java
Patch:
@@ -209,6 +209,9 @@ public void run() {
             // interrupt.
         } finally {
             finished.set(true);
+            if (isOtherBlockPark()) {
+                unparkOtherBlock();
+            }
         }
     }
 

File: okdownload/src/main/java/cn/dreamtobe/okdownload/DownloadListener.java
Patch:
@@ -36,7 +36,6 @@ public interface DownloadListener {
 
     void connectEnd(DownloadTask task, int blockIndex, DownloadConnection.Connected connected);
 
-
     void fetchStart(DownloadTask task, int blockIndex, long contentLength);
 
     void fetchProgress(DownloadTask task, int blockIndex, long fetchedBytes);

File: okdownload/src/main/java/cn/dreamtobe/okdownload/core/file/ProcessFileStrategy.java
Patch:
@@ -112,10 +112,10 @@ public void callbackCause() {
             final CallbackDispatcher dispatcher = OkDownload.with().callbackDispatcher();
             if (isAvailable) {
                 dispatcher.dispatch().downloadFromBreakpoint(task, info);
-            } else if (!fileExist) {
-                dispatcher.dispatch().downloadFromBeginning(task, info, FILE_NOT_EXIST);
             } else if (!infoRight) {
                 dispatcher.dispatch().downloadFromBeginning(task, info, INFO_DIRTY);
+            } else if (!fileExist) {
+                dispatcher.dispatch().downloadFromBeginning(task, info, FILE_NOT_EXIST);
             } else if (!outputStreamSupport) {
                 dispatcher.dispatch().downloadFromBeginning(task, info, OUTPUT_STREAM_NOT_SUPPORT);
             } else {

File: okdownload/src/main/java/cn/dreamtobe/okdownload/core/file/MultiPointOutputStream.java
Patch:
@@ -194,7 +194,7 @@ synchronized DownloadOutputStream outputStream(int blockIndex) throws
 
         final Uri uri;
         if (task.isUriIsDirectory()) {
-            uri = Uri.parse(file.toString());
+            uri = Uri.fromFile(file);
         } else {
             uri = task.getUri();
         }

File: okdownload/src/main/java/cn/dreamtobe/okdownload/core/download/DownloadCall.java
Patch:
@@ -58,7 +58,7 @@ public class DownloadCall extends NamedRunnable implements Comparable<DownloadCa
     @Nullable private volatile DownloadCache cache;
 
     private DownloadCall(DownloadTask task, boolean asyncExecuted) {
-        super(task.getPath());
+        super("download call: " + task.getId());
         this.task = task;
         this.asyncExecuted = asyncExecuted;
     }

File: okdownload/src/main/java/cn/dreamtobe/okdownload/core/file/MultiPointOutputStream.java
Patch:
@@ -215,6 +215,8 @@ private synchronized DownloadOutputStream outputStream(int blockIndex) throws
 
             outputStreamMap.put(blockIndex, outputStream);
             noSyncLengthMap.put(blockIndex, new AtomicLong());
+
+            firstOutputStream = false;
         }
 
         return outputStream;

File: okdownload/src/main/java/cn/dreamtobe/okdownload/core/interceptor/connect/RedirectInterceptor.java
Patch:
@@ -74,9 +74,7 @@ public DownloadConnection.Connected interceptConnect(DownloadChain chain) throws
                         "Response code is " + code + " but can't find Location field");
             }
 
-            if (connection != null) {
-                connection.release();
-            }
+            connection.release();
 
             connection = OkDownload.with().connectionFactory().create(url);
             chain.setConnection(connection);

File: okdownload/src/test/java/cn/dreamtobe/okdownload/TestUtils.java
Patch:
@@ -74,6 +74,8 @@ public static DownloadChain mockDownloadChain() throws IOException {
         when(mockCache.isInterrupt()).thenReturn(false);
         when(mockChain.getCache()).thenReturn(mockCache);
         when(mockChain.getInfo()).thenReturn(mock(BreakpointInfo.class));
+        when(mockChain.getTask()).thenReturn(mock(DownloadTask.class));
+        when(mockChain.getConnectionOrCreate()).thenReturn(mock(DownloadConnection.class));
 
         return mockChain;
     }

File: okdownload/src/main/java/cn/dreamtobe/okdownload/OkDownload.java
Patch:
@@ -16,6 +16,7 @@
 
 package cn.dreamtobe.okdownload;
 
+import android.annotation.SuppressLint;
 import android.content.Context;
 import android.support.annotation.NonNull;
 
@@ -33,7 +34,7 @@
 
 public class OkDownload {
 
-    static volatile OkDownload singleton;
+    @SuppressLint("StaticFieldLeak") static volatile OkDownload singleton;
 
     private final DownloadDispatcher downloadDispatcher;
     private final CallbackDispatcher callbackDispatcher;

File: okdownload/src/main/java/cn/dreamtobe/okdownload/core/breakpoint/BlockInfo.java
Patch:
@@ -37,7 +37,7 @@ public long getCurrentOffset() {
         return this.currentOffset.get();
     }
 
-    public void processCurrentOffset(long fetchLength) {
-        this.currentOffset.addAndGet(fetchLength);
+    public void increaseCurrentOffset(long increaseLength) {
+        this.currentOffset.addAndGet(increaseLength);
     }
 }

File: okdownload/src/main/java/cn/dreamtobe/okdownload/core/breakpoint/BreakpointStore.java
Patch:
@@ -34,5 +34,7 @@ public interface BreakpointStore {
 
     void completeDownload(int id);
 
+    void discard(int id);
+
     int createId(DownloadTask task);
 }

File: okdownload/src/main/java/cn/dreamtobe/okdownload/core/dispatcher/CallbackDispatcher.java
Patch:
@@ -24,6 +24,8 @@
 import cn.dreamtobe.okdownload.DownloadListener;
 import cn.dreamtobe.okdownload.DownloadTask;
 import cn.dreamtobe.okdownload.core.breakpoint.BreakpointInfo;
+import cn.dreamtobe.okdownload.core.cause.EndCause;
+import cn.dreamtobe.okdownload.core.cause.ResumeFailedCause;
 import cn.dreamtobe.okdownload.core.connection.DownloadConnection;
 
 // Dispatch callback to listeners

File: okdownload/src/main/java/cn/dreamtobe/okdownload/core/interceptor/connect/CallServerInterceptor.java
Patch:
@@ -25,6 +25,6 @@
 public class CallServerInterceptor implements Interceptor.Connect {
     @Override
     public DownloadConnection.Connected interceptConnect(DownloadChain chain) throws IOException {
-        return chain.getConnection().execute();
+        return chain.getConnectionOrCreate().execute();
     }
 }

