File: easy-rules-core/src/main/java/org/jeasy/rules/api/Rules.java
Patch:
@@ -55,7 +55,7 @@ public Rules(Set<Rule> rules) {
      *
      * @param rules to register
      */
-    public Rules(Rule... rules ) {
+    public Rules(Rule... rules) {
         Collections.addAll(this.rules, rules);
     }
 
@@ -64,7 +64,7 @@ public Rules(Rule... rules ) {
      *
      * @param rules to register
      */
-    public Rules(Object... rules ) {
+    public Rules(Object... rules) {
         for (Object rule : rules) {
             this.register(rule);
         }

File: easy-rules-tutorials/src/main/java/org/jeasy/rules/tutorials/weather/WeatherRule.java
Patch:
@@ -28,7 +28,7 @@
 import org.jeasy.rules.annotation.Fact;
 import org.jeasy.rules.annotation.Rule;
 
-@Rule(name = "weather rule", description = "if it rains then take an umbrella" )
+@Rule(name = "weather rule", description = "if it rains then take an umbrella")
 public class WeatherRule {
 
     @Condition

File: easy-rules-mvel/src/main/java/org/jeasy/rules/mvel/MVELRuleFactory.java
Patch:
@@ -78,6 +78,7 @@ public MVELRuleFactory(RuleDefinitionReader reader, ParserContext parserContext)
      *
      * @param ruleDescriptor descriptor of rule definition
      * @return a new rule
+     * @throws Exception if unable to create the rule from the descriptor
      */
     public Rule createRule(Reader ruleDescriptor) throws Exception {
         List<RuleDefinition> ruleDefinitions = reader.read(ruleDescriptor);
@@ -92,6 +93,7 @@ public Rule createRule(Reader ruleDescriptor) throws Exception {
      *
      * @param rulesDescriptor descriptor of rule definitions
      * @return a set of rules
+     * @throws Exception if unable to create rules from the descriptor
      */
     public Rules createRules(Reader rulesDescriptor) throws Exception {
         Rules rules = new Rules();

File: easy-rules-spel/src/main/java/org/jeasy/rules/spel/SpELRuleFactory.java
Patch:
@@ -101,14 +101,15 @@ public SpELRuleFactory(RuleDefinitionReader reader, ParserContext parserContext,
     }
 
     /**
-     * Create a new {@link SpELRule from a Reader.
+     * Create a new {@link SpELRule} from a Reader.
      * 
      * The rule descriptor should contain a single rule definition.
      * If no rule definitions are found, a {@link IllegalArgumentException} will be thrown.
      * If more than a rule is defined in the descriptor, the first rule will be returned.
      *
      * @param ruleDescriptor descriptor of rule definition
      * @return a new rule
+     * @throws Exception if unable to create the rule from the descriptor
      */
     public Rule createRule(Reader ruleDescriptor) throws Exception {
         List<RuleDefinition> ruleDefinitions = reader.read(ruleDescriptor);
@@ -123,6 +124,7 @@ public Rule createRule(Reader ruleDescriptor) throws Exception {
      *
      * @param rulesDescriptor descriptor of rule definitions
      * @return a set of rules
+     * @throws Exception if unable to create rules from the descriptor
      */
     public Rules createRules(Reader rulesDescriptor) throws Exception {
         Rules rules = new Rules();

File: easy-rules-core/src/main/java/org/jeasy/rules/api/Fact.java
Patch:
@@ -35,7 +35,6 @@
 public class Fact<T> {
 	
 	private final String name;
-	
 	private final T value;
 
 	/**

File: easy-rules-core/src/main/java/org/jeasy/rules/core/ActionMethodOrderBean.java
Patch:
@@ -33,7 +33,6 @@
 class ActionMethodOrderBean implements Comparable<ActionMethodOrderBean> {
 
     private final Method method;
-
     private final int order;
 
     ActionMethodOrderBean(final Method method, final int order) {

File: easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngine.java
Patch:
@@ -89,8 +89,7 @@ void doFire(Rules rules, Facts facts) {
                 break;
             }
             if (!shouldBeEvaluated(rule, facts)) {
-                LOGGER.debug("Rule '{}' has been skipped before being evaluated",
-                    name);
+                LOGGER.debug("Rule '{}' has been skipped before being evaluated", name);
                 continue;
             }
             boolean evaluationResult = false;

File: easy-rules-spel/src/main/java/org/jeasy/rules/spel/SpELAction.java
Patch:
@@ -51,7 +51,6 @@ public class SpELAction implements Action {
     private static final Logger LOGGER = LoggerFactory.getLogger(SpELAction.class);
 
     private final ExpressionParser parser = new SpelExpressionParser();
-
     private final String expression;
     private final Expression compiledExpression;
     private BeanResolver beanResolver;

File: easy-rules-spel/src/main/java/org/jeasy/rules/spel/SpELCondition.java
Patch:
@@ -47,7 +47,6 @@
 public class SpELCondition implements Condition {
 
     private final ExpressionParser parser = new SpelExpressionParser();
-
     private final Expression compiledExpression;
     private BeanResolver beanResolver;
 

File: easy-rules-support/src/main/java/org/jeasy/rules/support/composite/CompositeRule.java
Patch:
@@ -44,7 +44,6 @@ public abstract class CompositeRule extends BasicRule {
      * The set of composing rules.
      */
     protected Set<Rule> rules;
-
     private final Map<Object, Rule> proxyRules;
 
     /**

File: easy-rules-core/src/main/java/org/jeasy/rules/api/RulesEngine.java
Patch:
@@ -27,8 +27,6 @@
 import java.util.List;
 import java.util.Map;
 
-import org.jeasy.rules.core.RulesEngineParameters;
-
 /**
  * Rules engine interface.
  *

File: easy-rules-core/src/main/java/org/jeasy/rules/core/AbstractRulesEngine.java
Patch:
@@ -26,6 +26,7 @@
 import org.jeasy.rules.api.RuleListener;
 import org.jeasy.rules.api.RulesEngine;
 import org.jeasy.rules.api.RulesEngineListener;
+import org.jeasy.rules.api.RulesEngineParameters;
 
 import java.util.ArrayList;
 import java.util.Collections;

File: easy-rules-core/src/test/java/org/jeasy/rules/core/DefaultRulesEngineTest.java
Patch:
@@ -39,6 +39,7 @@
 import org.jeasy.rules.annotation.Priority;
 import org.jeasy.rules.api.RuleListener;
 import org.jeasy.rules.api.RulesEngineListener;
+import org.jeasy.rules.api.RulesEngineParameters;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

File: easy-rules-core/src/test/java/org/jeasy/rules/core/RulePriorityThresholdTest.java
Patch:
@@ -23,6 +23,7 @@
  */
 package org.jeasy.rules.core;
 
+import org.jeasy.rules.api.RulesEngineParameters;
 import org.junit.Before;
 import org.junit.Test;
 

File: easy-rules-core/src/test/java/org/jeasy/rules/core/SkipOnFirstAppliedRuleTest.java
Patch:
@@ -23,6 +23,7 @@
  */
 package org.jeasy.rules.core;
 
+import org.jeasy.rules.api.RulesEngineParameters;
 import org.junit.Before;
 import org.junit.Test;
 

File: easy-rules-core/src/test/java/org/jeasy/rules/core/SkipOnFirstFailedRuleTest.java
Patch:
@@ -23,6 +23,7 @@
  */
 package org.jeasy.rules.core;
 
+import org.jeasy.rules.api.RulesEngineParameters;
 import org.junit.Before;
 import org.junit.Test;
 

File: easy-rules-core/src/test/java/org/jeasy/rules/core/SkipOnFirstNonTriggeredRuleTest.java
Patch:
@@ -23,6 +23,7 @@
  */
 package org.jeasy.rules.core;
 
+import org.jeasy.rules.api.RulesEngineParameters;
 import org.junit.Before;
 import org.junit.Test;
 

File: easy-rules-tutorials/src/main/java/org/jeasy/rules/tutorials/fizzbuzz/FizzBuzzWithEasyRules.java
Patch:
@@ -27,7 +27,7 @@
 import org.jeasy.rules.api.Rules;
 import org.jeasy.rules.api.RulesEngine;
 import org.jeasy.rules.core.DefaultRulesEngine;
-import org.jeasy.rules.core.RulesEngineParameters;
+import org.jeasy.rules.api.RulesEngineParameters;
 
 public class FizzBuzzWithEasyRules {
     public static void main(String[] args) {

File: easy-rules-core/src/test/java/org/jeasy/rules/api/FactsTest.java
Patch:
@@ -81,6 +81,7 @@ public void get() {
     public void asMap() {
         Object o = facts.asMap();
         assertThat(o instanceof HashMap).isTrue();
+        assertThat(o).isNotEqualTo(facts);
     }
 
     @Test

File: easy-rules-mvel/src/test/java/org/jeasy/rules/mvel/MVELJsonRuleFactoryTest.java
Patch:
@@ -63,7 +63,7 @@ public void testRulesCreation() throws Exception {
         Rule rule = iterator.next();
         assertThat(rule).isNotNull();
         assertThat(rule.getName()).isEqualTo("adult rule");
-        assertThat(rule.getDescription()).isEqualTo("when age is greater then 18, then mark as adult");
+        assertThat(rule.getDescription()).isEqualTo("when age is greater than 18, then mark as adult");
         assertThat(rule.getPriority()).isEqualTo(1);
 
         rule = iterator.next();
@@ -83,7 +83,7 @@ public void testRuleCreationFromFileReader() throws Exception {
 
         // then
         assertThat(adultRule.getName()).isEqualTo("adult rule");
-        assertThat(adultRule.getDescription()).isEqualTo("when age is greater then 18, then mark as adult");
+        assertThat(adultRule.getDescription()).isEqualTo("when age is greater than 18, then mark as adult");
         assertThat(adultRule.getPriority()).isEqualTo(1);
     }
 
@@ -97,7 +97,7 @@ public void testRuleCreationFromStringReader() throws Exception {
 
         // then
         assertThat(adultRule.getName()).isEqualTo("adult rule");
-        assertThat(adultRule.getDescription()).isEqualTo("when age is greater then 18, then mark as adult");
+        assertThat(adultRule.getDescription()).isEqualTo("when age is greater than 18, then mark as adult");
         assertThat(adultRule.getPriority()).isEqualTo(1);
     }
 

File: easy-rules-mvel/src/test/java/org/jeasy/rules/mvel/MVELYamlRuleFactoryTest.java
Patch:
@@ -63,7 +63,7 @@ public void testRulesCreation() throws Exception {
         Rule rule = iterator.next();
         assertThat(rule).isNotNull();
         assertThat(rule.getName()).isEqualTo("adult rule");
-        assertThat(rule.getDescription()).isEqualTo("when age is greater then 18, then mark as adult");
+        assertThat(rule.getDescription()).isEqualTo("when age is greater than 18, then mark as adult");
         assertThat(rule.getPriority()).isEqualTo(1);
 
         rule = iterator.next();
@@ -83,7 +83,7 @@ public void testRuleCreationFromFileReader() throws Exception {
 
         // then
         assertThat(adultRule.getName()).isEqualTo("adult rule");
-        assertThat(adultRule.getDescription()).isEqualTo("when age is greater then 18, then mark as adult");
+        assertThat(adultRule.getDescription()).isEqualTo("when age is greater than 18, then mark as adult");
         assertThat(adultRule.getPriority()).isEqualTo(1);
     }
 
@@ -97,7 +97,7 @@ public void testRuleCreationFromStringReader() throws Exception {
 
         // then
         assertThat(adultRule.getName()).isEqualTo("adult rule");
-        assertThat(adultRule.getDescription()).isEqualTo("when age is greater then 18, then mark as adult");
+        assertThat(adultRule.getDescription()).isEqualTo("when age is greater than 18, then mark as adult");
         assertThat(adultRule.getPriority()).isEqualTo(1);
     }
 

File: easy-rules-spel/src/test/java/org/jeasy/rules/spel/SpELJsonRuleFactoryTest.java
Patch:
@@ -63,7 +63,7 @@ public void testRulesCreation() throws Exception {
         Rule rule = iterator.next();
         assertThat(rule).isNotNull();
         assertThat(rule.getName()).isEqualTo("adult rule");
-        assertThat(rule.getDescription()).isEqualTo("when age is greater then 18, then mark as adult");
+        assertThat(rule.getDescription()).isEqualTo("when age is greater than 18, then mark as adult");
         assertThat(rule.getPriority()).isEqualTo(1);
 
         rule = iterator.next();
@@ -83,7 +83,7 @@ public void testRuleCreationFromFileReader() throws Exception {
 
         // then
         assertThat(adultRule.getName()).isEqualTo("adult rule");
-        assertThat(adultRule.getDescription()).isEqualTo("when age is greater then 18, then mark as adult");
+        assertThat(adultRule.getDescription()).isEqualTo("when age is greater than 18, then mark as adult");
         assertThat(adultRule.getPriority()).isEqualTo(1);
     }
 
@@ -97,7 +97,7 @@ public void testRuleCreationFromStringReader() throws Exception {
 
         // then
         assertThat(adultRule.getName()).isEqualTo("adult rule");
-        assertThat(adultRule.getDescription()).isEqualTo("when age is greater then 18, then mark as adult");
+        assertThat(adultRule.getDescription()).isEqualTo("when age is greater than 18, then mark as adult");
         assertThat(adultRule.getPriority()).isEqualTo(1);
     }
 

File: easy-rules-spel/src/test/java/org/jeasy/rules/spel/SpELYamlRuleFactoryTest.java
Patch:
@@ -63,7 +63,7 @@ public void testRulesCreation() throws Exception {
         Rule rule = iterator.next();
         assertThat(rule).isNotNull();
         assertThat(rule.getName()).isEqualTo("adult rule");
-        assertThat(rule.getDescription()).isEqualTo("when age is greater then 18, then mark as adult");
+        assertThat(rule.getDescription()).isEqualTo("when age is greater than 18, then mark as adult");
         assertThat(rule.getPriority()).isEqualTo(1);
 
         rule = iterator.next();
@@ -83,7 +83,7 @@ public void testRuleCreationFromFileReader() throws Exception {
 
         // then
         assertThat(adultRule.getName()).isEqualTo("adult rule");
-        assertThat(adultRule.getDescription()).isEqualTo("when age is greater then 18, then mark as adult");
+        assertThat(adultRule.getDescription()).isEqualTo("when age is greater than 18, then mark as adult");
         assertThat(adultRule.getPriority()).isEqualTo(1);
     }
 
@@ -97,7 +97,7 @@ public void testRuleCreationFromStringReader() throws Exception {
 
         // then
         assertThat(adultRule.getName()).isEqualTo("adult rule");
-        assertThat(adultRule.getDescription()).isEqualTo("when age is greater then 18, then mark as adult");
+        assertThat(adultRule.getDescription()).isEqualTo("when age is greater than 18, then mark as adult");
         assertThat(adultRule.getPriority()).isEqualTo(1);
     }
 

File: easy-rules-support/src/test/java/org/jeasy/rules/support/JsonRuleDefinitionReaderTest.java
Patch:
@@ -54,7 +54,7 @@ public void testRuleDefinitionReadingFromFile() throws Exception {
         RuleDefinition adultRuleDefinition = ruleDefinitions.get(0);
         assertThat(adultRuleDefinition).isNotNull();
         assertThat(adultRuleDefinition.getName()).isEqualTo("adult rule");
-        assertThat(adultRuleDefinition.getDescription()).isEqualTo("when age is greater then 18, then mark as adult");
+        assertThat(adultRuleDefinition.getDescription()).isEqualTo("when age is greater than 18, then mark as adult");
         assertThat(adultRuleDefinition.getPriority()).isEqualTo(1);
         assertThat(adultRuleDefinition.getCondition()).isEqualTo("person.age > 18");
         assertThat(adultRuleDefinition.getActions()).isEqualTo(Collections.singletonList("person.setAdult(true);"));
@@ -73,7 +73,7 @@ public void testRuleDefinitionReadingFromString() throws Exception {
         RuleDefinition adultRuleDefinition = ruleDefinitions.get(0);
         assertThat(adultRuleDefinition).isNotNull();
         assertThat(adultRuleDefinition.getName()).isEqualTo("adult rule");
-        assertThat(adultRuleDefinition.getDescription()).isEqualTo("when age is greater then 18, then mark as adult");
+        assertThat(adultRuleDefinition.getDescription()).isEqualTo("when age is greater than 18, then mark as adult");
         assertThat(adultRuleDefinition.getPriority()).isEqualTo(1);
         assertThat(adultRuleDefinition.getCondition()).isEqualTo("person.age > 18");
         assertThat(adultRuleDefinition.getActions()).isEqualTo(Collections.singletonList("person.setAdult(true);"));
@@ -135,7 +135,7 @@ public void testRulesDefinitionReading() throws Exception {
         RuleDefinition ruleDefinition = ruleDefinitions.get(0);
         assertThat(ruleDefinition).isNotNull();
         assertThat(ruleDefinition.getName()).isEqualTo("adult rule");
-        assertThat(ruleDefinition.getDescription()).isEqualTo("when age is greater then 18, then mark as adult");
+        assertThat(ruleDefinition.getDescription()).isEqualTo("when age is greater than 18, then mark as adult");
         assertThat(ruleDefinition.getPriority()).isEqualTo(1);
         assertThat(ruleDefinition.getCondition()).isEqualTo("person.age > 18");
         assertThat(ruleDefinition.getActions()).isEqualTo(Collections.singletonList("person.setAdult(true);"));

File: easy-rules-support/src/test/java/org/jeasy/rules/support/YamlRuleDefinitionReaderTest.java
Patch:
@@ -54,7 +54,7 @@ public void testRuleDefinitionReadingFromFile() throws Exception {
         RuleDefinition adultRuleDefinition = ruleDefinitions.get(0);
         assertThat(adultRuleDefinition).isNotNull();
         assertThat(adultRuleDefinition.getName()).isEqualTo("adult rule");
-        assertThat(adultRuleDefinition.getDescription()).isEqualTo("when age is greater then 18, then mark as adult");
+        assertThat(adultRuleDefinition.getDescription()).isEqualTo("when age is greater than 18, then mark as adult");
         assertThat(adultRuleDefinition.getPriority()).isEqualTo(1);
         assertThat(adultRuleDefinition.getCondition()).isEqualTo("person.age > 18");
         assertThat(adultRuleDefinition.getActions()).isEqualTo(Collections.singletonList("person.setAdult(true);"));
@@ -73,7 +73,7 @@ public void testRuleDefinitionReadingFromString() throws Exception {
         RuleDefinition adultRuleDefinition = ruleDefinitions.get(0);
         assertThat(adultRuleDefinition).isNotNull();
         assertThat(adultRuleDefinition.getName()).isEqualTo("adult rule");
-        assertThat(adultRuleDefinition.getDescription()).isEqualTo("when age is greater then 18, then mark as adult");
+        assertThat(adultRuleDefinition.getDescription()).isEqualTo("when age is greater than 18, then mark as adult");
         assertThat(adultRuleDefinition.getPriority()).isEqualTo(1);
         assertThat(adultRuleDefinition.getCondition()).isEqualTo("person.age > 18");
         assertThat(adultRuleDefinition.getActions()).isEqualTo(Collections.singletonList("person.setAdult(true);"));
@@ -135,7 +135,7 @@ public void testRulesDefinitionReading() throws Exception {
         RuleDefinition ruleDefinition = ruleDefinitions.get(0);
         assertThat(ruleDefinition).isNotNull();
         assertThat(ruleDefinition.getName()).isEqualTo("adult rule");
-        assertThat(ruleDefinition.getDescription()).isEqualTo("when age is greater then 18, then mark as adult");
+        assertThat(ruleDefinition.getDescription()).isEqualTo("when age is greater than 18, then mark as adult");
         assertThat(ruleDefinition.getPriority()).isEqualTo(1);
         assertThat(ruleDefinition.getCondition()).isEqualTo("person.age > 18");
         assertThat(ruleDefinition.getActions()).isEqualTo(Collections.singletonList("person.setAdult(true);"));

File: easy-rules-spel/src/main/java/org/jeasy/rules/spel/SpELRuleFactory.java
Patch:
@@ -75,7 +75,7 @@ public SpELRuleFactory(RuleDefinitionReader reader, BeanResolver beanResolver) {
      * @return a new rule
      */
     public Rule createRule(Reader ruleDescriptor) throws Exception {
-        return createRule(ruleDescriptor, new TemplateParserContext());
+        return createRule(ruleDescriptor, ParserContext.TEMPLATE_EXPRESSION);
     }
 
     /**
@@ -104,7 +104,7 @@ public Rule createRule(Reader ruleDescriptor, ParserContext parserContext) throw
      * @return a set of rules
      */
     public Rules createRules(Reader rulesDescriptor) throws Exception {
-        return createRules(rulesDescriptor, new TemplateParserContext());
+        return createRules(rulesDescriptor, ParserContext.TEMPLATE_EXPRESSION);
     }
 
     /**

File: easy-rules-spel/src/test/java/org/jeasy/rules/spel/SpELActionTest.java
Patch:
@@ -74,8 +74,8 @@ public void testSpELFunctionExecution() throws Exception {
     public void testSpELActionExecutionWithFailure() throws Exception {
         // given
         expectedException.expect(Exception.class);
-        expectedException.expectMessage("EL1004E: Method call: Method setBlah(java.lang.Boolean) cannot be found on type org.jeasy.rules.spel.Person");
-        Action action = new SpELAction("#person.setBlah(true)");
+        expectedException.expectMessage("EL1004E: Method call: Method sayHi() cannot be found on type org.jeasy.rules.spel.Person");
+        Action action = new SpELAction("T(org.jeasy.rules.spel.Person).sayHi()");
         Facts facts = new Facts();
         Person foo = new Person("foo", 20);
         facts.put("person", foo);

File: easy-rules-spel/src/test/java/org/jeasy/rules/spel/SpELConditionTest.java
Patch:
@@ -51,6 +51,7 @@ public void testSpELExpressionEvaluation() {
         assertThat(evaluationResult).isTrue();
     }
 
+    // Note this behaviour is different in MVEL, where a missing fact yields an exception
     @Test
     public void whenDeclaredFactIsNotPresent_thenShouldReturnFalse() {
         // given

File: easy-rules-support/src/test/java/org/jeasy/rules/support/ConditionalRuleGroupTest.java
Patch:
@@ -167,7 +167,7 @@ public void twoRulesWithSameHighestPriorityIsNotAllowed() {
         conditionalRuleGroup.addRule(new MyOtherRule(0));// same priority as conditionalRule
         conditionalRuleGroup.addRule(new MyOtherRule(1));
         conditionalRuleGroup.addRule(new MyRule());
-        rulesEngine.fire(rules, facts);
+        conditionalRuleGroup.evaluate(facts);
     }
 
     @Test

File: easy-rules-core/src/main/java/org/jeasy/rules/api/Rules.java
Patch:
@@ -91,10 +91,10 @@ public void unregister(Object rule) {
      *
      * @param ruleName the name of the rule to unregister
      */
-    public void unregister(final String ruleName){
+    public void unregister(final String ruleName) {
         Objects.requireNonNull(ruleName);
         Rule rule = findRuleByName(ruleName);
-        if(rule != null) {
+        if (rule != null) {
             unregister(rule);
         }
     }
@@ -120,7 +120,7 @@ public Iterator<Rule> iterator() {
         return rules.iterator();
     }
 
-    private Rule findRuleByName(String ruleName){
+    private Rule findRuleByName(String ruleName) {
         return rules.stream()
                 .filter(rule -> rule.getName().equalsIgnoreCase(ruleName))
                 .findFirst()

File: easy-rules-core/src/main/java/org/jeasy/rules/core/InferenceRulesEngine.java
Patch:
@@ -67,7 +67,7 @@ public void fire(Rules rules, Facts facts) {
         do {
             LOGGER.debug("Selecting candidate rules based on the following facts: {}", facts);
             selectedRules = selectCandidates(rules, facts);
-            if(!selectedRules.isEmpty()) {
+            if (!selectedRules.isEmpty()) {
                 delegate.fire(new Rules(selectedRules), facts);
             } else {
                 LOGGER.debug("No candidate rules found for facts: {}", facts);

File: easy-rules-core/src/test/java/org/jeasy/rules/core/RuleDefinitionValidatorTest.java
Patch:
@@ -34,7 +34,7 @@ public class RuleDefinitionValidatorTest {
     private RuleDefinitionValidator ruleDefinitionValidator;
 
     @Before
-    public void setup(){
+    public void setup() {
         ruleDefinitionValidator = new RuleDefinitionValidator();
     }
 

File: easy-rules-support/src/main/java/org/jeasy/rules/support/AbstractRuleDefinitionReader.java
Patch:
@@ -94,7 +94,7 @@ protected RuleDefinition createRuleDefinition(Map<String, Object> map) {
             throw new IllegalArgumentException("Composite rules must have composing rules specified");
         } else if (composingRules != null) {
             List<RuleDefinition> composingRuleDefinitions = new ArrayList<>();
-            for (Object rule : composingRules){
+            for (Object rule : composingRules) {
                 Map<String, Object> composingRuleMap = (Map<String, Object>) rule;
                 composingRuleDefinitions.add(createRuleDefinition(composingRuleMap));
             }

File: easy-rules-tutorials/src/main/java/org/jeasy/rules/tutorials/fizzbuzz/FizzBuzz.java
Patch:
@@ -28,7 +28,7 @@
  */
 public class FizzBuzz {                      // Everything in Java is a class
   public static void main(String[] args) {   // Every program must have main()
-    for(int i = 1; i <= 100; i++) {                    // count from 1 to 100
+    for (int i = 1; i <= 100; i++) {                    // count from 1 to 100
       if (((i % 5) == 0) && ((i % 7) == 0))            // A multiple of both?
         System.out.print("fizzbuzz");    
       else if ((i % 5) == 0) System.out.print("fizz"); // else a multiple of 5?

File: easy-rules-core/src/main/java/org/jeasy/rules/api/RulesEngineListener.java
Patch:
@@ -39,7 +39,7 @@ public interface RulesEngineListener {
      * @param rules to fire
      * @param facts present before firing rules
      */
-    void beforeEvaluate(Rules rules, Facts facts);
+    default void beforeEvaluate(Rules rules, Facts facts) { }
 
     /**
      * Triggered after executing the rule set
@@ -48,5 +48,5 @@ public interface RulesEngineListener {
      * @param rules fired
      * @param facts present after firing rules
      */
-    void afterExecute(Rules rules, Facts facts);
+    default void afterExecute(Rules rules, Facts facts) { }
 }

File: easy-rules-core/src/main/java/org/jeasy/rules/annotation/Action.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/main/java/org/jeasy/rules/annotation/Condition.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/main/java/org/jeasy/rules/annotation/Fact.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/main/java/org/jeasy/rules/annotation/Priority.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/main/java/org/jeasy/rules/annotation/Rule.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/main/java/org/jeasy/rules/annotation/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/main/java/org/jeasy/rules/api/Action.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/main/java/org/jeasy/rules/api/Condition.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/main/java/org/jeasy/rules/api/Facts.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/main/java/org/jeasy/rules/api/Rule.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/main/java/org/jeasy/rules/api/RuleListener.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/main/java/org/jeasy/rules/api/Rules.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/main/java/org/jeasy/rules/api/RulesEngine.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/main/java/org/jeasy/rules/api/RulesEngineListener.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/main/java/org/jeasy/rules/api/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/main/java/org/jeasy/rules/core/AbstractRulesEngine.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/main/java/org/jeasy/rules/core/ActionMethodOrderBean.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/main/java/org/jeasy/rules/core/BasicRule.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRule.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngine.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/main/java/org/jeasy/rules/core/InferenceRulesEngine.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/main/java/org/jeasy/rules/core/NoSuchFactException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/main/java/org/jeasy/rules/core/RuleBuilder.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/main/java/org/jeasy/rules/core/RuleDefinitionValidator.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/main/java/org/jeasy/rules/core/RuleProxy.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/main/java/org/jeasy/rules/core/RulesEngineParameters.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/main/java/org/jeasy/rules/core/Utils.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/main/java/org/jeasy/rules/core/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/annotation/AnnotatedRuleWithActionMethodHavingMoreThanOneArgumentOfTypeFacts.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/annotation/AnnotatedRuleWithActionMethodHavingOneArgumentNotOfTypeFacts.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/annotation/AnnotatedRuleWithActionMethodHavingOneArgumentOfTypeFacts.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/annotation/AnnotatedRuleWithActionMethodThatReturnsNonVoidType.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/annotation/AnnotatedRuleWithConditionMethodHavingNonBooleanReturnType.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/annotation/AnnotatedRuleWithConditionMethodHavingOneArgumentNotOfTypeFacts.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/annotation/AnnotatedRuleWithMetaRuleAnnotation.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/annotation/AnnotatedRuleWithMoreThanOnePriorityMethod.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/annotation/AnnotatedRuleWithMultipleAnnotatedParametersAndOneParameterOfSubTypeFacts.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/annotation/AnnotatedRuleWithMultipleAnnotatedParametersAndOneParameterOfTypeFacts.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/annotation/AnnotatedRuleWithNonPublicActionMethod.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/annotation/AnnotatedRuleWithNonPublicConditionMethod.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/annotation/AnnotatedRuleWithNonPublicPriorityMethod.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/annotation/AnnotatedRuleWithOneParameterNotAnnotatedWithFactAndNotOfTypeFacts.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/annotation/AnnotatedRuleWithPriorityMethodHavingArguments.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/annotation/AnnotatedRuleWithPriorityMethodHavingNonIntegerReturnType.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/annotation/AnnotatedRuleWithoutActionMethod.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/annotation/AnnotatedRuleWithoutConditionMethod.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/annotation/MetaRule.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/api/FactsTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/api/RulesTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/core/AbstractTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/core/AnnotationInheritanceTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/core/BasicRuleTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/core/CustomRuleOrderingTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/core/DefaultRuleTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/core/DefaultRulesEngineTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/core/FactInjectionTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/core/InferenceRulesEngineTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/core/NullFactAnnotationParameterTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/core/RuleBuilderTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/core/RuleDefinitionValidatorTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/core/RuleListenerTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/core/RulePriorityThresholdTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/core/RuleProxyTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/core/RulesEngineListenerTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/core/SkipOnFirstAppliedRuleTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/core/SkipOnFirstFailedRuleTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/core/SkipOnFirstNonTriggeredRuleTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-core/src/test/java/org/jeasy/rules/core/UtilsTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-mvel/src/main/java/org/jeasy/rules/mvel/MVELAction.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-mvel/src/main/java/org/jeasy/rules/mvel/MVELCondition.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-mvel/src/main/java/org/jeasy/rules/mvel/MVELRule.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-mvel/src/main/java/org/jeasy/rules/mvel/MVELRuleFactory.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-mvel/src/main/java/org/jeasy/rules/mvel/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-mvel/src/test/java/org/jeasy/rules/mvel/MVELActionTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-mvel/src/test/java/org/jeasy/rules/mvel/MVELConditionTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-mvel/src/test/java/org/jeasy/rules/mvel/MVELJsonRuleFactoryTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-mvel/src/test/java/org/jeasy/rules/mvel/MVELRuleTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-mvel/src/test/java/org/jeasy/rules/mvel/MVELYamlRuleFactoryTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-mvel/src/test/java/org/jeasy/rules/mvel/Person.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-spel/src/main/java/org/jeasy/rules/spel/SpELAction.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-spel/src/main/java/org/jeasy/rules/spel/SpELCondition.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-spel/src/main/java/org/jeasy/rules/spel/SpELRule.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-spel/src/main/java/org/jeasy/rules/spel/SpELRuleFactory.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-spel/src/main/java/org/jeasy/rules/spel/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-spel/src/test/java/org/jeasy/rules/spel/Greeter.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-spel/src/test/java/org/jeasy/rules/spel/MySpringAppConfig.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-spel/src/test/java/org/jeasy/rules/spel/Person.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-spel/src/test/java/org/jeasy/rules/spel/SimpleBeanResolver.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-spel/src/test/java/org/jeasy/rules/spel/SpELActionTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-spel/src/test/java/org/jeasy/rules/spel/SpELConditionTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-spel/src/test/java/org/jeasy/rules/spel/SpELJsonRuleFactoryTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-spel/src/test/java/org/jeasy/rules/spel/SpELRuleTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-spel/src/test/java/org/jeasy/rules/spel/SpELYamlRuleFactoryTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-support/src/main/java/org/jeasy/rules/support/AbstractRuleDefinitionReader.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-support/src/main/java/org/jeasy/rules/support/AbstractRuleFactory.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-support/src/main/java/org/jeasy/rules/support/ActivationRuleGroup.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-support/src/main/java/org/jeasy/rules/support/CompositeRule.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-support/src/main/java/org/jeasy/rules/support/ConditionalRuleGroup.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-support/src/main/java/org/jeasy/rules/support/JsonRuleDefinitionReader.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-support/src/main/java/org/jeasy/rules/support/RuleDefinition.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-support/src/main/java/org/jeasy/rules/support/RuleDefinitionReader.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-support/src/main/java/org/jeasy/rules/support/UnitRuleGroup.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-support/src/main/java/org/jeasy/rules/support/YamlRuleDefinitionReader.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-support/src/test/java/org/jeasy/rules/support/ActivationRuleGroupTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-support/src/test/java/org/jeasy/rules/support/ConditionalRuleGroupTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-support/src/test/java/org/jeasy/rules/support/JsonRuleDefinitionReaderTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-support/src/test/java/org/jeasy/rules/support/UnitRuleGroupTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-support/src/test/java/org/jeasy/rules/support/YamlRuleDefinitionReaderTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * The MIT License
  *
  *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easy-rules-tutorials/src/main/java/org/jeasy/rules/tutorials/fizzbuzz/BuzzRule.java
Patch:
@@ -1,7 +1,7 @@
-/**
+/*
  * The MIT License
  *
- *  Copyright (c) 2017, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)
+ *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)
  *
  *  Permission is hereby granted, free of charge, to any person obtaining a copy
  *  of this software and associated documentation files (the "Software"), to deal

File: easy-rules-tutorials/src/main/java/org/jeasy/rules/tutorials/fizzbuzz/FizzBuzz.java
Patch:
@@ -1,7 +1,7 @@
-/**
+/*
  * The MIT License
  *
- *  Copyright (c) 2017, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)
+ *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)
  *
  *  Permission is hereby granted, free of charge, to any person obtaining a copy
  *  of this software and associated documentation files (the "Software"), to deal

File: easy-rules-tutorials/src/main/java/org/jeasy/rules/tutorials/fizzbuzz/FizzBuzzRule.java
Patch:
@@ -1,7 +1,7 @@
-/**
+/*
  * The MIT License
  *
- *  Copyright (c) 2017, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)
+ *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)
  *
  *  Permission is hereby granted, free of charge, to any person obtaining a copy
  *  of this software and associated documentation files (the "Software"), to deal

File: easy-rules-tutorials/src/main/java/org/jeasy/rules/tutorials/fizzbuzz/FizzBuzzWithEasyRules.java
Patch:
@@ -1,7 +1,7 @@
-/**
+/*
  * The MIT License
  *
- *  Copyright (c) 2017, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)
+ *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)
  *
  *  Permission is hereby granted, free of charge, to any person obtaining a copy
  *  of this software and associated documentation files (the "Software"), to deal

File: easy-rules-tutorials/src/main/java/org/jeasy/rules/tutorials/fizzbuzz/FizzRule.java
Patch:
@@ -1,7 +1,7 @@
-/**
+/*
  * The MIT License
  *
- *  Copyright (c) 2017, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)
+ *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)
  *
  *  Permission is hereby granted, free of charge, to any person obtaining a copy
  *  of this software and associated documentation files (the "Software"), to deal

File: easy-rules-tutorials/src/main/java/org/jeasy/rules/tutorials/fizzbuzz/NonFizzBuzzRule.java
Patch:
@@ -1,7 +1,7 @@
-/**
+/*
  * The MIT License
  *
- *  Copyright (c) 2017, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)
+ *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)
  *
  *  Permission is hereby granted, free of charge, to any person obtaining a copy
  *  of this software and associated documentation files (the "Software"), to deal

File: easy-rules-tutorials/src/main/java/org/jeasy/rules/tutorials/helloworld/HelloWorldRule.java
Patch:
@@ -1,7 +1,7 @@
-/**
+/*
  * The MIT License
  *
- *  Copyright (c) 2017, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)
+ *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)
  *
  *  Permission is hereby granted, free of charge, to any person obtaining a copy
  *  of this software and associated documentation files (the "Software"), to deal

File: easy-rules-tutorials/src/main/java/org/jeasy/rules/tutorials/helloworld/Launcher.java
Patch:
@@ -1,7 +1,7 @@
-/**
+/*
  * The MIT License
  *
- *  Copyright (c) 2017, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)
+ *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)
  *
  *  Permission is hereby granted, free of charge, to any person obtaining a copy
  *  of this software and associated documentation files (the "Software"), to deal

File: easy-rules-tutorials/src/main/java/org/jeasy/rules/tutorials/shop/Launcher.java
Patch:
@@ -1,7 +1,7 @@
-/**
+/*
  * The MIT License
  *
- *  Copyright (c) 2017, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)
+ *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)
  *
  *  Permission is hereby granted, free of charge, to any person obtaining a copy
  *  of this software and associated documentation files (the "Software"), to deal

File: easy-rules-tutorials/src/main/java/org/jeasy/rules/tutorials/shop/Person.java
Patch:
@@ -1,7 +1,7 @@
-/**
+/*
  * The MIT License
  *
- *  Copyright (c) 2017, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)
+ *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)
  *
  *  Permission is hereby granted, free of charge, to any person obtaining a copy
  *  of this software and associated documentation files (the "Software"), to deal

File: easy-rules-tutorials/src/main/java/org/jeasy/rules/tutorials/web/IndexServlet.java
Patch:
@@ -1,7 +1,7 @@
-/**
+/*
  * The MIT License
  *
- *  Copyright (c) 2017, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)
+ *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)
  *
  *  Permission is hereby granted, free of charge, to any person obtaining a copy
  *  of this software and associated documentation files (the "Software"), to deal

File: easy-rules-tutorials/src/main/java/org/jeasy/rules/tutorials/web/SuspiciousRequestFilter.java
Patch:
@@ -1,7 +1,7 @@
-/**
+/*
  * The MIT License
  *
- *  Copyright (c) 2017, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)
+ *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)
  *
  *  Permission is hereby granted, free of charge, to any person obtaining a copy
  *  of this software and associated documentation files (the "Software"), to deal

File: easy-rules-tutorials/src/main/java/org/jeasy/rules/tutorials/web/SuspiciousRequestRule.java
Patch:
@@ -1,7 +1,7 @@
-/**
+/*
  * The MIT License
  *
- *  Copyright (c) 2017, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)
+ *  Copyright (c) 2020, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)
  *
  *  Permission is hereby granted, free of charge, to any person obtaining a copy
  *  of this software and associated documentation files (the "Software"), to deal

File: easy-rules-spel/src/test/java/org/jeasy/rules/spel/SpELActionTest.java
Patch:
@@ -71,7 +71,7 @@ public void testSpELFunctionExecution() throws Exception {
     }
 
     @Test
-    public void testMVELActionExecutionWithFailure() throws Exception {
+    public void testSpELActionExecutionWithFailure() throws Exception {
         // given
         expectedException.expect(Exception.class);
         expectedException.expectMessage("EL1004E: Method call: Method setBlah(java.lang.Boolean) cannot be found on type org.jeasy.rules.spel.Person");
@@ -88,7 +88,7 @@ public void testMVELActionExecutionWithFailure() throws Exception {
     }
 
     @Test
-    public void testMVELActionWithExpressionAndParserContext() throws Exception {
+    public void testSpELActionWithExpressionAndParserContext() throws Exception {
         // given
         ParserContext context = new TemplateParserContext();
         Action printAction = new SpELAction("#{ T(org.jeasy.rules.spel.Person).sayHello() }", context);
@@ -101,4 +101,4 @@ public void testMVELActionWithExpressionAndParserContext() throws Exception {
         assertThat(systemOutRule.getLog()).contains("hello");
 
     }
-}
\ No newline at end of file
+}

File: easy-rules-core/src/main/java/org/jeasy/rules/core/InferenceRulesEngine.java
Patch:
@@ -68,7 +68,7 @@ public void fire(Rules rules, Facts facts) {
             LOGGER.debug("Selecting candidate rules based on the following facts: {}", facts);
             selectedRules = selectCandidates(rules, facts);
             if(!selectedRules.isEmpty()) {
-                delegate.doFire(new Rules(selectedRules), facts); // FIXME doFire ? should call fire to invoke listeners..
+                delegate.fire(new Rules(selectedRules), facts);
             } else {
                 LOGGER.debug("No candidate rules found for facts: {}", facts);
             }

File: easy-rules-core/src/main/java/org/jeasy/rules/core/AbstractRuleEngine.java
Patch:
@@ -49,9 +49,7 @@ abstract class AbstractRuleEngine implements RulesEngine {
     AbstractRuleEngine(final RulesEngineParameters parameters) {
         this.parameters = parameters;
         this.ruleListeners = new ArrayList<>();
-        this.ruleListeners.add(new DefaultRuleListener());
         this.rulesEngineListeners = new ArrayList<>();
-        this.rulesEngineListeners.add(new DefaultRulesEngineListener(parameters));
     }
 
     @Override

File: easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngine.java
Patch:
@@ -33,7 +33,7 @@
 /**
  * Default {@link RulesEngine} implementation.
  *
- * This implementation handles a set of rules with unique name.
+ * This implementation handles a set of rules with unique names.
  *
  * Rules are fired according to their natural order which is priority by default.
  *

File: easy-rules-support/src/main/java/org/jeasy/rules/support/RuleDefinition.java
Patch:
@@ -30,9 +30,9 @@
 
 /**
  * Rule definition as defined in a rule descriptor.
- * This class encapsulates static definition of an {@link Rule}.
+ * This class encapsulates the static definition of a {@link Rule}.
  *
- * This definition is produced by a {@link RuleDefinitionReader}
+ * A rule definition is produced by a {@link RuleDefinitionReader}
  * and consumed by rule factories to create rules.
  *
  * @author Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)
@@ -106,4 +106,4 @@ public List<RuleDefinition> getComposingRules() {
     public boolean isCompositeRule() {
         return !composingRules.isEmpty();
     }
-}
\ No newline at end of file
+}

File: easy-rules-support/src/test/java/org/jeasy/rules/support/ConditionalRuleGroupTest.java
Patch:
@@ -156,7 +156,7 @@ public void testCompositeRuleWithAnnotatedComposingRules() throws Exception {
         // Given
         when(conditionalRule.evaluate(facts)).thenReturn(true);
         MyRule rule = new MyRule();
-        conditionalRuleGroup = new ConditionalRuleGroup("myConditinalRule");
+        conditionalRuleGroup = new ConditionalRuleGroup("myConditionalRule");
         conditionalRuleGroup.addRule(rule);
         when(conditionalRule.compareTo(any(Rule.class))).thenReturn(1);
         conditionalRuleGroup.addRule(conditionalRule);
@@ -215,7 +215,7 @@ public void twoRulesWithSamePriorityIsAllowedIfAnotherRuleHasHigherPriority() {
 
     @SuppressWarnings("unchecked")
     @Test
-    public void aRuleWithoutPriorityHasAHighPriororty() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
+    public void aRuleWithoutPriorityHasAHighPriority() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
         MyOtherRule rule1 = new MyOtherRule(3);
         conditionalRuleGroup.addRule(rule1);
         conditionalRuleGroup.addRule(new UnprioritizedRule());

File: easy-rules-mvel/src/main/java/org/jeasy/rules/mvel/MVELRuleFactory.java
Patch:
@@ -23,6 +23,7 @@
  */
 package org.jeasy.rules.mvel;
 
+import org.jeasy.rules.api.Rule;
 import org.jeasy.rules.api.Rules;
 
 import java.io.Reader;
@@ -43,7 +44,7 @@ public class MVELRuleFactory {
      * @param ruleDescriptor as a Reader
      * @return a new rule
      */
-    public static MVELRule createRuleFrom(Reader ruleDescriptor) {
+    public static Rule createRuleFrom(Reader ruleDescriptor) {
         MVELRuleDefinition ruleDefinition = reader.read(ruleDescriptor);
         return ruleDefinition.create();
     }

File: easy-rules-tutorials/src/main/java/org/jeasy/rules/tutorials/shop/Launcher.java
Patch:
@@ -24,6 +24,7 @@
 package org.jeasy.rules.tutorials.shop;
 
 import org.jeasy.rules.api.Facts;
+import org.jeasy.rules.api.Rule;
 import org.jeasy.rules.api.Rules;
 import org.jeasy.rules.api.RulesEngine;
 import org.jeasy.rules.core.DefaultRulesEngine;
@@ -48,7 +49,7 @@ public static void main(String[] args) throws FileNotFoundException {
                 .priority(1)
                 .when("person.age > 18")
                 .then("person.setAdult(true);");
-        MVELRule alcoholRule = MVELRuleFactory.createRuleFrom(new FileReader("src/main/java/org/jeasy/rules/tutorials/shop/alcohol-rule.yml"));
+        Rule alcoholRule = MVELRuleFactory.createRuleFrom(new FileReader("src/main/java/org/jeasy/rules/tutorials/shop/alcohol-rule.yml"));
 
         // create a rule set
         Rules rules = new Rules();

File: easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngine.java
Patch:
@@ -47,7 +47,7 @@
  */
 public final class DefaultRulesEngine implements RulesEngine {
 
-    private static final Logger LOGGER = LoggerFactory.getLogger(DefaultRuleListener.class);
+    private static final Logger LOGGER = LoggerFactory.getLogger(DefaultRulesEngine.class);
 
     private RulesEngineParameters parameters;
     private List<RuleListener> ruleListeners;

File: easy-rules-mvel/src/main/java/org/jeasy/rules/mvel/MVELAction.java
Patch:
@@ -59,6 +59,7 @@ public void execute(Facts facts) {
             MVEL.executeExpression(compiledExpression, facts.asMap());
         } catch (Exception e) {
             LOGGER.error("Unable to evaluate expression: '" + expression + "' on facts: " + facts, e);
+            throw e;
         }
     }
 }

File: easy-rules-support/src/main/java/org/jeasy/rules/support/ActivationRuleGroup.java
Patch:
@@ -91,6 +91,8 @@ public boolean evaluate(Facts facts) {
 
     @Override
     public void execute(Facts facts) throws Exception {
-        selectedRule.execute(facts);
+        if(selectedRule!=null){//handle no rule has been selected will throw NPE
+            selectedRule.execute(facts);
+        }
     }
 }

File: easy-rules-core/src/main/java/org/jeasy/rules/core/InferenceRulesEngine.java
Patch:
@@ -85,12 +85,12 @@ public List<RulesEngineListener> getRulesEngineListeners() {
     public void fire(Rules rules, Facts facts) {
         Set<Rule> selectedRules;
         do {
-            LOGGER.info("Selecting candidate rules based on the following facts: {}", facts);
+            LOGGER.debug("Selecting candidate rules based on the following facts: {}", facts);
             selectedRules = selectCandidates(rules, facts);
             if(!selectedRules.isEmpty()) {
                 delegate.doFire(new Rules(selectedRules), facts);
             } else {
-                LOGGER.info("No candidate rules found for facts: {}", facts);
+                LOGGER.debug("No candidate rules found for facts: {}", facts);
             }
         } while (!selectedRules.isEmpty());
     }

File: easy-rules-core/src/main/java/org/jeasy/rules/core/RuleProxy.java
Patch:
@@ -112,7 +112,7 @@ private Object evaluateMethod(final Object[] args) throws IllegalAccessException
             List<Object> actualParameters = getActualParameters(conditionMethod, facts);
             return conditionMethod.invoke(target, actualParameters.toArray()); // validated upfront
         } catch (NoSuchFactException e) {
-            LOGGER.info("Rule '{}' has been evaluated to false due to a declared but missing fact '{}' in {}",
+            LOGGER.error("Rule '{}' has been evaluated to false due to a declared but missing fact '{}' in {}",
                     getTargetClass().getName(), e.getMissingFact(), facts);
             return false;
         } catch (IllegalArgumentException e) {

File: easy-rules-mvel/src/main/java/org/jeasy/rules/mvel/MVELAction.java
Patch:
@@ -58,7 +58,7 @@ public void execute(Facts facts) {
         try {
             MVEL.executeExpression(compiledExpression, facts.asMap());
         } catch (Exception e) {
-            LOGGER.debug("Unable to evaluate expression: '" + expression + "' on facts: " + facts, e);
+            LOGGER.error("Unable to evaluate expression: '" + expression + "' on facts: " + facts, e);
         }
     }
 }

File: easy-rules-mvel/src/main/java/org/jeasy/rules/mvel/MVELCondition.java
Patch:
@@ -58,7 +58,7 @@ public boolean evaluate(Facts facts) {
         try {
             return (boolean) MVEL.executeExpression(compiledExpression, facts.asMap());
         } catch (Exception e) {
-            LOGGER.debug("Unable to evaluate expression: '" + expression + "' on facts: " + facts, e);
+            LOGGER.error("Unable to evaluate expression: '" + expression + "' on facts: " + facts, e);
             return false;
         }
     }

File: easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngineListener.java
Patch:
@@ -34,7 +34,7 @@
 
 class DefaultRulesEngineListener implements RulesEngineListener {
 
-    private static final Logger LOGGER = LoggerFactory.getLogger(DefaultRuleListener.class);
+    private static final Logger LOGGER = LoggerFactory.getLogger(DefaultRulesEngineListener.class);
 
     private RulesEngineParameters parameters;
 

File: easy-rules-core/src/main/java/org/jeasy/rules/core/RuleProxy.java
Patch:
@@ -146,7 +146,7 @@ private List<Object> getActualParameters(Method method, Facts facts) {
             if (annotations.length == 1) {
                 String factName = ((Fact) (annotations[0])).value(); //validated upfront.
                 Object fact = facts.get(factName);
-                if (fact == null) {
+                if (fact == null && !facts.asMap().containsKey(factName)) {
                     throw new NoSuchFactException(format("No fact named '%s' found in known facts: \n%s", factName, facts), factName);
                 }
                 actualParameters.add(fact);

File: easy-rules-core/src/test/java/org/jeasy/rules/core/AbstractTest.java
Patch:
@@ -43,7 +43,7 @@ public abstract class AbstractTest {
     protected Facts facts;
     protected Rules rules;
 
-    protected RulesEngine rulesEngine;
+    protected DefaultRulesEngine rulesEngine;
 
     @Before
     public void setup() throws Exception {
@@ -52,7 +52,7 @@ public void setup() throws Exception {
         facts.put("fact2", fact2);
         rules = new Rules();
 
-        rulesEngine = RulesEngineBuilder.aNewRulesEngine().build();
+        rulesEngine = new DefaultRulesEngine();
     }
 
 }

File: easy-rules-core/src/test/java/org/jeasy/rules/core/AnnotationInheritanceTest.java
Patch:
@@ -42,7 +42,7 @@ public void annotationsShouldBeInherited() throws Exception {
         rules.register(myChildRule);
 
         // When
-        RulesEngine rulesEngine = RulesEngineBuilder.aNewRulesEngine().build();
+        RulesEngine rulesEngine = new DefaultRulesEngine();
         rulesEngine.fire(rules, facts);
 
         // Then

File: easy-rules-core/src/test/java/org/jeasy/rules/core/RulePriorityThresholdTest.java
Patch:
@@ -44,9 +44,9 @@ public void setup() throws Exception {
         when(rule1.getPriority()).thenReturn(1);
         when(rule1.evaluate(facts)).thenReturn(true);
 
-        rulesEngine = RulesEngineBuilder.aNewRulesEngine()
-                .withRulePriorityThreshold(1)
-                .build();
+        RulesEngineParameters parameters = new RulesEngineParameters();
+        parameters.setPriorityThreshold(1);
+        rulesEngine = new DefaultRulesEngine(parameters);
     }
 
     @Test

File: easy-rules-core/src/test/java/org/jeasy/rules/core/RulesEngineBuilderTest.java
Patch:
@@ -76,5 +76,6 @@ public void testCreationWithCustomParameters() {
         assertThat(parameters.isSkipOnFirstAppliedRule()).isTrue();
         assertThat(parameters.isSkipOnFirstFailedRule()).isTrue();
         assertThat(parameters.isSkipOnFirstNonTriggeredRule()).isTrue();
+        assertThat(rulesEngine.getRuleListeners()).hasSize(2).contains(ruleListener);
     }
 }

File: easy-rules-core/src/test/java/org/jeasy/rules/core/SkipOnFirstFailedRuleTest.java
Patch:
@@ -38,9 +38,9 @@ public class SkipOnFirstFailedRuleTest extends AbstractTest {
     @Before
     public void setup() throws Exception {
         super.setup();
-        rulesEngine = RulesEngineBuilder.aNewRulesEngine()
-                .withSkipOnFirstFailedRule(true)
-                .build();
+        RulesEngineParameters parameters = new RulesEngineParameters();
+        parameters.setSkipOnFirstFailedRule(true);
+        rulesEngine = new DefaultRulesEngine(parameters);
     }
 
     @Test

File: easy-rules-core/src/test/java/org/jeasy/rules/core/SkipOnFirstNonTriggeredRuleTest.java
Patch:
@@ -38,9 +38,9 @@ public class SkipOnFirstNonTriggeredRuleTest extends AbstractTest {
     @Before
     public void setup() throws Exception {
         super.setup();
-        rulesEngine = RulesEngineBuilder.aNewRulesEngine()
-                .withSkipOnFirstNonTriggeredRule(true)
-                .build();
+        RulesEngineParameters parameters = new RulesEngineParameters();
+        parameters.setSkipOnFirstNonTriggeredRule(true);
+        rulesEngine = new DefaultRulesEngine(parameters);
     }
 
     @Test

File: easy-rules-tutorials/src/main/java/org/jeasy/rules/tutorials/web/SuspiciousRequestFilter.java
Patch:
@@ -23,7 +23,6 @@
  */
 package org.jeasy.rules.tutorials.web;
 
-import static org.jeasy.rules.core.RulesEngineBuilder.aNewRulesEngine;
 
 import java.io.IOException;
 import javax.servlet.Filter;
@@ -36,6 +35,7 @@
 import org.jeasy.rules.api.Facts;
 import org.jeasy.rules.api.Rules;
 import org.jeasy.rules.api.RulesEngine;
+import org.jeasy.rules.core.DefaultRulesEngine;
 
 @WebFilter("/*")
 public class SuspiciousRequestFilter implements Filter {
@@ -45,7 +45,7 @@ public class SuspiciousRequestFilter implements Filter {
 
     @Override
     public void init(FilterConfig filterConfig) throws ServletException {
-        rulesEngine = aNewRulesEngine().build();
+        rulesEngine = new DefaultRulesEngine();
         rules = new Rules();
         rules.register(new SuspiciousRequestRule());
     }

File: easy-rules-core/src/test/java/org/jeasy/rules/core/RuleBuilderTest.java
Patch:
@@ -34,7 +34,8 @@
 import static java.util.Arrays.asList;
 import static org.assertj.core.api.Assertions.assertThat;
 
-@RunWith(MockitoJUnitRunner.class)public class RuleBuilderTest {
+@RunWith(MockitoJUnitRunner.class)
+public class RuleBuilderTest {
 
     @Mock
     private Condition condition;
@@ -73,4 +74,4 @@ public void testDefaultRuleCreationWithCustomValues() throws Exception {
         assertThat(rule).extracting("condition").containsExactly(condition);
         assertThat(rule).extracting("actions").containsExactly(asList(action1, action2));
     }
-}
\ No newline at end of file
+}

File: easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngine.java
Patch:
@@ -126,13 +126,15 @@ public void fire(Rules rules, Facts facts) {
 
     @Override
     public Map<Rule, Boolean> check(Rules rules, Facts facts) {
+        triggerListenersBeforeRules(rules, facts);
         LOGGER.info("Checking rules");
         Map<Rule, Boolean> result = new HashMap<>();
         for (Rule rule : rules) {
             if (shouldBeEvaluated(rule, facts)) {
                 result.put(rule, rule.evaluate(facts));
             }
         }
+        triggerListenersAfterRules(rules, facts);
         return result;
     }
 

File: easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngine.java
Patch:
@@ -213,13 +213,13 @@ private void triggerListenersAfterEvaluate(Rule rule, Facts facts, boolean evalu
 
     private void triggerListenersBeforeRules(Rules rule, Facts facts) {
         for (RulesEngineListener rulesEngineListener : rulesEngineListeners) {
-            rulesEngineListener.beforeFiringRules(rule, facts);
+            rulesEngineListener.beforeEvaluate(rule, facts);
         }
     }
 
     private void triggerListenersAfterRules(Rules rule, Facts facts) {
         for (RulesEngineListener rulesEngineListener : rulesEngineListeners) {
-            rulesEngineListener.afterFiringRules(rule, facts);
+            rulesEngineListener.afterExecute(rule, facts);
         }
     }
 

File: easy-rules-tutorials/src/main/java/org/jeasy/rules/tutorials/airco/AirConditioningRule.java
Patch:
@@ -17,7 +17,7 @@ public boolean isItHot(@Fact("temperature") int temperature) {
     @Action
     public void coolAir(Facts facts) {
         System.out.println("It is hot! cooling air..");
-        Integer temperature = (Integer) facts.get("temperature");
+        Integer temperature = facts.get("temperature");
         facts.put("temperature", temperature - 1);
     }
 

File: easy-rules-tutorials/src/main/java/org/jeasy/rules/tutorials/shop/AgeRule.java
Patch:
@@ -36,13 +36,13 @@ public AgeRule() {
 
     @Override
     public boolean evaluate(Facts facts) {
-        Person person = (Person) facts.get("person");
+        Person person = facts.get("person");
         return person.getAge() > ADULT_AGE;
     }
 
     @Override
     public void execute(Facts facts) {
-        Person person = (Person) facts.get("person");
+        Person person = facts.get("person");
         person.setAdult(true);
         System.out.printf("Person %s has been marked as adult", person.getName());
         System.out.println();

File: easy-rules-tutorials/src/main/java/org/jeasy/rules/tutorials/shop/AlcoholRule.java
Patch:
@@ -34,13 +34,13 @@ public AlcoholRule() {
 
     @Override
     public boolean evaluate(Facts facts) {
-        Person person = (Person) facts.get("person");
+        Person person = facts.get("person");
         return !person.isAdult();
     }
 
     @Override
     public void execute(Facts facts){
-        Person person = (Person) facts.get("person");
+        Person person = facts.get("person");
         System.out.printf("Shop: Sorry %s, you are not allowed to buy alcohol", person.getName());
         System.out.println();
     }

File: easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngine.java
Patch:
@@ -121,7 +121,7 @@ public Map<Rule, Boolean> check(Rules rules, Facts facts) {
         return result;
     }
 
-    private void apply(Rules rules, Facts facts) {
+    void apply(Rules rules, Facts facts) {
         LOGGER.info("Rules evaluation started");
         for (Rule rule : rules) {
             final String name = rule.getName();

File: easy-rules-core/src/main/java/org/jeasy/rules/api/Rule.java
Patch:
@@ -67,7 +67,9 @@ public interface Rule extends Comparable<Rule> {
 
     /**
      * Rule conditions abstraction : this method encapsulates the rule's conditions.
-     * @return true if the rule should be applied given the provided facts, false else
+     * <strong>Implementations should handle any runtime exception and return true/false accordingly</strong>
+     *
+     * @return true if the rule should be applied given the provided facts, false otherwise
      */
     boolean evaluate(Facts facts);
 

File: easy-rules-core/src/main/java/org/jeasy/rules/core/BasicRule.java
Patch:
@@ -34,7 +34,7 @@
  *
  * @author Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)
  */
-public class BasicRule implements Rule, Comparable<Rule> {
+public class BasicRule implements Rule {
 
     /**
      * Rule name.

File: easy-rules-core/src/main/java/org/jeasy/rules/core/RuleProxy.java
Patch:
@@ -133,7 +133,7 @@ private List<Object> getActualParameters(Method method, Facts facts) {
                 String factName = ((Fact) (annotations[0])).value(); //validated upfront.
                 Object fact = facts.get(factName);
                 if (fact == null) {
-                    throw new RuntimeException(format("No fact named %s found in known facts", factName));
+                    throw new NoSuchFactException(format("No fact named %s found in known facts: \n%s", factName, facts), factName);
                 }
                 actualParameters.add(fact);
             } else {

File: easy-rules-core/src/test/java/org/jeasy/rules/core/AbstractTest.java
Patch:
@@ -48,8 +48,8 @@ public abstract class AbstractTest {
     @Before
     public void setup() throws Exception {
         facts = new Facts();
-        facts.add("fact1", fact1);
-        facts.add("fact2", fact2);
+        facts.put("fact1", fact1);
+        facts.put("fact2", fact2);
         rules = new Rules();
 
         rulesEngine = RulesEngineBuilder.aNewRulesEngine().build();

File: easy-rules-core/src/test/java/org/jeasy/rules/core/AnnotatedRulesTest.java
Patch:
@@ -40,8 +40,8 @@ public class AnnotatedRulesTest {
     public void testFactInjection() throws Exception {
         // Given
         Facts facts = new Facts();
-        facts.add("rain", true);
-        facts.add("age", 18);
+        facts.put("rain", true);
+        facts.put("age", 18);
 
         WeatherRule weatherRule = new WeatherRule();
         AgeRule ageRule = new AgeRule();
@@ -60,7 +60,7 @@ public void testFactInjection() throws Exception {
     public void whenFactTypeDoesNotMatchParameterType_thenShouldThrowRuntimeException() throws Exception {
         // Given
         Facts facts = new Facts();
-        facts.add("age", "foo");
+        facts.put("age", "foo");
         Rules rules = new Rules(new AgeRule());
         RulesEngine rulesEngine = new DefaultRulesEngine();
 

File: easy-rules-core/src/test/java/org/jeasy/rules/core/DefaultRulesEngineTest.java
Patch:
@@ -199,7 +199,7 @@ public void listenerShouldBeInvokedBeforeCheckingRules() throws Exception {
     @Test
     public void nullFactsShouldNotCrashTheEngine() {
         // Given
-        facts.add("foo", null);
+        facts.put("foo", null);
 
         // When
         try {

File: easy-rules-tutorials/src/main/java/org/jeasy/rules/tutorials/fizzbuzz/FizzBuzzWithEasyRules.java
Patch:
@@ -47,7 +47,7 @@ public static void main(String[] args) {
         // fire rules
         Facts facts = new Facts();
         for (int i = 1; i <= 100; i++) {
-            facts.add("number", i);
+            facts.put("number", i);
             fizzBuzzEngine.fire(rules, facts);
             System.out.println();
         }

File: easy-rules-tutorials/src/main/java/org/jeasy/rules/tutorials/shop/Launcher.java
Patch:
@@ -35,7 +35,7 @@ public static void main(String[] args) {
         //create a person instance (fact)
         Person tom = new Person("Tom", 14);
         Facts facts = new Facts();
-        facts.add("person", tom);
+        facts.put("person", tom);
 
         // create a rules set
         Rules rules = new Rules();

File: easy-rules-tutorials/src/main/java/org/jeasy/rules/tutorials/web/SuspiciousRequestFilter.java
Patch:
@@ -49,7 +49,7 @@ public void init(FilterConfig filterConfig) throws ServletException {
     @Override
     public void doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain) throws IOException, ServletException {
         Facts facts = new Facts();
-        facts.add("request", request);
+        facts.put("request", request);
         rulesEngine.fire(rules, facts);
         filterChain.doFilter(request, response);
     }

File: easy-rules-core/src/main/java/org/jeasy/rules/core/RuleDefinitionValidator.java
Patch:
@@ -79,7 +79,7 @@ private void checkActionMethods(final Object rule) {
 
         for (Method actionMethod : actionMethods) {
             if (!isActionMethodWellDefined(actionMethod)) {
-                throw new IllegalArgumentException(format("Action method '%s' defined in rule '%s' must be public and may have parameters annotated with @Fact (and/or a parameter of type Facts).", actionMethod, rule.getClass().getName()));
+                throw new IllegalArgumentException(format("Action method '%s' defined in rule '%s' must be public, must return void type and may have parameters annotated with @Fact (and/or a parameter of type Facts).", actionMethod, rule.getClass().getName()));
             }
         }
     }
@@ -143,6 +143,7 @@ private boolean validParameters(final Method method) {
 
     private boolean isActionMethodWellDefined(final Method method) {
         return Modifier.isPublic(method.getModifiers())
+                && method.getReturnType().equals(Void.TYPE)
                 && validParameters(method);
     }
 

File: easy-rules-core/src/test/java/org/jeasy/rules/core/DefaultRulesEngineTest.java
Patch:
@@ -193,7 +193,7 @@ public void testGetRuleListeners() throws Exception {
                 .build();
 
         assertThat(rulesEngine.getRuleListeners())
-                .containsExactly(ruleListener);
+                .contains(ruleListener);
     }
 
     @After

File: easy-rules-core/src/main/java/org/jeasy/rules/core/RulesEngineBuilder.java
Patch:
@@ -45,7 +45,7 @@ public static RulesEngineBuilder aNewRulesEngine() {
     }
 
     private RulesEngineBuilder() {
-        parameters = new RulesEngineParameters(RulesEngine.DEFAULT_NAME, false, false, RulesEngine.DEFAULT_RULE_PRIORITY_THRESHOLD, false);
+        parameters = new RulesEngineParameters(RulesEngineParameters.DEFAULT_NAME, false, false, RulesEngineParameters.DEFAULT_RULE_PRIORITY_THRESHOLD, false);
         ruleListeners = new ArrayList<>();
     }
 

File: easy-rules-core/src/test/java/org/jeasy/rules/core/RulesEngineBuilderTest.java
Patch:
@@ -45,8 +45,8 @@ public void testCreationWithDefaultParameters() {
         assertThat(rulesEngine).isNotNull();
         RulesEngineParameters parameters = rulesEngine.getParameters();
 
-        assertThat(parameters.getName()).isEqualTo(RulesEngine.DEFAULT_NAME);
-        assertThat(parameters.getPriorityThreshold()).isEqualTo(RulesEngine.DEFAULT_RULE_PRIORITY_THRESHOLD);
+        assertThat(parameters.getName()).isEqualTo(RulesEngineParameters.DEFAULT_NAME);
+        assertThat(parameters.getPriorityThreshold()).isEqualTo(RulesEngineParameters.DEFAULT_RULE_PRIORITY_THRESHOLD);
 
         assertThat(parameters.isSkipOnFirstAppliedRule()).isFalse();
         assertThat(parameters.isSkipOnFirstFailedRule()).isFalse();

File: easy-rules-core/src/main/java/org/jeasy/rules/api/RulesEngine.java
Patch:
@@ -38,6 +38,7 @@ public interface RulesEngine {
     /**
      * Default engine name.
      */
+    @Deprecated
     String DEFAULT_NAME = "engine";
 
     /**

File: easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngine.java
Patch:
@@ -197,7 +197,6 @@ private boolean shouldBeEvaluated(Rule rule, Facts facts) {
     }
 
     private void logEngineParameters() {
-        LOGGER.log(Level.INFO, "Engine name: {0}", parameters.getName());
         LOGGER.log(Level.INFO, "Rule priority threshold: {0}", parameters.getPriorityThreshold());
         LOGGER.log(Level.INFO, "Skip on first applied rule: {0}", parameters.isSkipOnFirstAppliedRule());
         LOGGER.log(Level.INFO, "Skip on first non triggered rule: {0}", parameters.isSkipOnFirstNonTriggeredRule());

File: easy-rules-core/src/main/java/org/jeasy/rules/core/RulesEngineBuilder.java
Patch:
@@ -49,6 +49,7 @@ private RulesEngineBuilder() {
         ruleListeners = new ArrayList<>();
     }
 
+    @Deprecated
     public RulesEngineBuilder named(final String name) {
         parameters.setName(name);
         return this;

File: easy-rules-core/src/main/java/org/jeasy/rules/core/RulesEngineParameters.java
Patch:
@@ -35,6 +35,7 @@ public class RulesEngineParameters {
     /**
      * The engine name.
      */
+    @Deprecated
     protected String name;
     
     /**
@@ -75,10 +76,12 @@ public RulesEngineParameters(String name, boolean skipOnFirstAppliedRule, boolea
         this.silentMode = silentMode;
     }
 
+    @Deprecated
     public String getName() {
         return name;
     }
 
+    @Deprecated
     public void setName(String name) {
         this.name = name;
     }

File: easy-rules-core/src/main/java/org/jeasy/rules/core/Utils.java
Patch:
@@ -63,7 +63,7 @@ static void muteLoggers() {
         Enumeration<String> loggerNames = LogManager.getLogManager().getLoggerNames();
         while (loggerNames.hasMoreElements()) {
             String loggerName = loggerNames.nextElement();
-            if (loggerName.startsWith("org.easyrules")) {
+            if (loggerName.startsWith("org.jeasy.rules")) {
                 muteLogger(loggerName);
             }
         }

File: easyrules-core/src/test/java/org/easyrules/EasyRulesTestSuite.java
Patch:
@@ -40,7 +40,7 @@
         RulePriorityThresholdTest.class,
         SkipOnFirstAppliedRuleTest.class,
         SkipOnFirstFailedRuleTest.class,
-        SkipOnFirstNonTrigeredRuleTest.class,
+        SkipOnFirstNonTriggeredRuleTest.class,
         RuleListenerTest.class,
         CustomRuleOrderingTest.class,
         RuleProxyTest.class,

File: easyrules-core/src/test/java/org/easyrules/annotation/AnnotatedRuleWithActionMethodHavingOneArgumentNotOfTypeFacts.java
Patch:
@@ -24,7 +24,7 @@
 package org.easyrules.annotation;
 
 @Rule
-public class AnnotatedRuleWithActionMethodHavingArguments {
+public class AnnotatedRuleWithActionMethodHavingOneArgumentNotOfTypeFacts {
 
     private boolean executed;
 

File: easyrules-core/src/test/java/org/easyrules/annotation/AnnotatedRuleWithConditionMethodHavingOneArgumentNotOfTypeFacts.java
Patch:
@@ -24,7 +24,7 @@
 package org.easyrules.annotation;
 
 @Rule
-public class AnnotatedRuleWithConditionMethodHavingArguments {
+public class AnnotatedRuleWithConditionMethodHavingOneArgumentNotOfTypeFacts {
 
     private boolean executed;
 

File: easyrules-core/src/test/java/org/easyrules/core/RuleDefinitionValidatorTest.java
Patch:
@@ -64,8 +64,8 @@ public void conditionMethodMustBePublic() {
     }
 
     @Test(expected = IllegalArgumentException.class)
-    public void conditionMethodMustHaveNoArguments() {
-        ruleDefinitionValidator.validateRuleDefinition(new AnnotatedRuleWithConditionMethodHavingArguments());
+    public void whenConditionMethodHasOneNonAnnotatedParameter_thenThisParameterMustBeOfTypeFacts() {
+        ruleDefinitionValidator.validateRuleDefinition(new AnnotatedRuleWithConditionMethodHavingOneArgumentNotOfTypeFacts());
     }
 
     @Test(expected = IllegalArgumentException.class)
@@ -88,7 +88,7 @@ public void actionMethodMustBePublic() {
 
     @Test(expected = IllegalArgumentException.class)
     public void actionMethodMustHaveNoArguments() {
-        ruleDefinitionValidator.validateRuleDefinition(new AnnotatedRuleWithActionMethodHavingArguments());
+        ruleDefinitionValidator.validateRuleDefinition(new AnnotatedRuleWithActionMethodHavingOneArgumentNotOfTypeFacts());
     }
 
     /*

File: easyrules-spring/src/main/java/org/easyrules/spring/RulesEngineFactoryBean.java
Patch:
@@ -37,6 +37,7 @@
  *
  * @author Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)
  */
+@Deprecated
 public class RulesEngineFactoryBean implements FactoryBean<RulesEngine> {
 
     private String name = RulesEngine.DEFAULT_NAME;

File: easyrules-spring/src/main/java/org/easyrules/spring/SpringRule.java
Patch:
@@ -50,5 +50,6 @@
 @Rule
 @Component
 @Scope("prototype")
+@Deprecated
 public @interface SpringRule {
 }

File: easyrules-quartz/src/main/java/org/easyrules/quartz/RulesEngineScheduler.java
Patch:
@@ -43,6 +43,7 @@
  *
  * Created by Sunand on 6/8/2015.
  */
+@Deprecated
 public class RulesEngineScheduler {
 
     private static final Logger LOGGER = Logger.getLogger(RulesEngineScheduler.class.getName());

File: easyrules-quartz/src/main/java/org/easyrules/quartz/RulesEngineSchedulerException.java
Patch:
@@ -30,6 +30,7 @@
  *
  * Created by Sunand on 6/8/2015.
  */
+@Deprecated
 public class RulesEngineSchedulerException extends Exception {
 
     public RulesEngineSchedulerException(final String message, final SchedulerException e) {

File: easyrules-core/src/test/java/org/easyrules/core/DefaultRulesEngineTest.java
Patch:
@@ -227,7 +227,7 @@ public void testUnregisterRuleByName() throws Exception{
         rulesEngine.registerRule(rule);
         rulesEngine.registerRule(anotherRule);
 
-        rulesEngine.unregisterRuleByName("r1");
+        rulesEngine.unregisterRule("r1");
 
         assertThat(rulesEngine.getRules())
                 .isNotNull()

File: easyrules-spring/src/main/java/org/easyrules/spring/SpringRule.java
Patch:
@@ -27,6 +27,7 @@
 import org.springframework.context.annotation.Scope;
 import org.springframework.stereotype.Component;
 
+import java.lang.annotation.Inherited;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -43,6 +44,7 @@
  * @author Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)
  */
 
+@Inherited
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.TYPE)
 @Rule

File: easyrules-core/src/test/java/org/easyrules/EasyRulesTestSuite.java
Patch:
@@ -35,6 +35,7 @@
  */
 @RunWith(Suite.class)
 @Suite.SuiteClasses({
+        AnnotationInheritanceTest.class,
         BasicRuleTest.class,
         RulePriorityThresholdTest.class,
         SkipOnFirstAppliedRuleTest.class,

File: easyrules-core/src/main/java/org/easyrules/core/DefaultRulesEngine.java
Patch:
@@ -26,7 +26,6 @@
 import org.easyrules.api.Rule;
 import org.easyrules.api.RuleListener;
 import org.easyrules.api.RulesEngine;
-import org.easyrules.util.Utils;
 
 import java.util.*;
 import java.util.logging.Level;

File: easyrules-core/src/main/java/org/easyrules/core/RuleDefinitionValidator.java
Patch:
@@ -27,7 +27,6 @@
 import org.easyrules.annotation.Condition;
 import org.easyrules.annotation.Priority;
 import org.easyrules.annotation.Rule;
-import org.easyrules.util.Utils;
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Method;

File: easyrules-core/src/main/java/org/easyrules/core/RulesEngineBuilder.java
Patch:
@@ -25,7 +25,6 @@
 
 import org.easyrules.api.RuleListener;
 import org.easyrules.api.RulesEngine;
-import org.easyrules.util.Utils;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -46,7 +45,7 @@ public static RulesEngineBuilder aNewRulesEngine() {
     }
 
     private RulesEngineBuilder() {
-        parameters = new RulesEngineParameters(Utils.DEFAULT_ENGINE_NAME, false, false, Utils.DEFAULT_RULE_PRIORITY_THRESHOLD, false);
+        parameters = new RulesEngineParameters(RulesEngine.DEFAULT_NAME, false, false, RulesEngine.DEFAULT_RULE_PRIORITY_THRESHOLD, false);
         ruleListeners = new ArrayList<>();
     }
 

File: easyrules-core/src/test/java/org/easyrules/EasyRulesTestSuite.java
Patch:
@@ -25,7 +25,6 @@
 
 import junit.framework.TestSuite;
 import org.easyrules.core.*;
-import org.easyrules.util.UtilsTest;
 import org.junit.runner.RunWith;
 import org.junit.runners.Suite;
 

File: easyrules-core/src/test/java/org/easyrules/core/RulesEngineBuilderTest.java
Patch:
@@ -25,7 +25,6 @@
 
 import org.easyrules.api.RuleListener;
 import org.easyrules.api.RulesEngine;
-import org.easyrules.util.Utils;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
@@ -46,8 +45,8 @@ public void testCreationWithDefaultParameters() {
         assertThat(rulesEngine).isNotNull();
         RulesEngineParameters parameters = rulesEngine.getParameters();
 
-        assertThat(parameters.getName()).isEqualTo(Utils.DEFAULT_ENGINE_NAME);
-        assertThat(parameters.getPriorityThreshold()).isEqualTo(Utils.DEFAULT_RULE_PRIORITY_THRESHOLD);
+        assertThat(parameters.getName()).isEqualTo(RulesEngine.DEFAULT_NAME);
+        assertThat(parameters.getPriorityThreshold()).isEqualTo(RulesEngine.DEFAULT_RULE_PRIORITY_THRESHOLD);
 
         assertThat(parameters.isSkipOnFirstAppliedRule()).isFalse();
         assertThat(parameters.isSkipOnFirstFailedRule()).isFalse();

File: easyrules-core/src/test/java/org/easyrules/core/UtilsTest.java
Patch:
@@ -21,7 +21,7 @@
  *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  *  THE SOFTWARE.
  */
-package org.easyrules.util;
+package org.easyrules.core;
 
 import org.junit.Test;
 

File: easyrules-core/src/main/java/org/easyrules/core/BasicRule.java
Patch:
@@ -162,7 +162,7 @@ public int compareTo(final Rule rule) {
         } else if (getPriority() > rule.getPriority()) {
             return 1;
         } else {
-            return name.compareTo(rule.getName());
+            return getName().compareTo(rule.getName());
         }
     }
 

File: easyrules-core/src/test/java/org/easyrules/util/UtilsTest.java
Patch:
@@ -45,7 +45,7 @@ public void isAnnotationPresentWithClassWhereAnnotationIsNotPresent() {
     }
 
     private static void assertCorrectAnnotationIsFound(
-            Class expectedAnnotationType, Annotation actualAnnotation) {
+            Class<?> expectedAnnotationType, Annotation actualAnnotation) {
 
         assertNotNull(actualAnnotation);
         assertEquals(expectedAnnotationType, actualAnnotation.annotationType());

File: easyrules-jmx/src/main/java/org/easyrules/api/JmxRule.java
Patch:
@@ -31,6 +31,7 @@
  * 
  * @author Drem Darios (drem.darios@gmail.com)
  */
+@Deprecated
 @MXBean
 public interface JmxRule extends Rule {
 

File: easyrules-jmx/src/main/java/org/easyrules/api/JmxRulesEngine.java
Patch:
@@ -29,6 +29,7 @@
  *
  * @author Drem Darios (drem.darios@gmail.com)
  */
+@Deprecated
 public interface JmxRulesEngine extends RulesEngine {
 
     /**

File: easyrules-jmx/src/main/java/org/easyrules/core/BasicJmxRule.java
Patch:
@@ -33,6 +33,7 @@
  * 
  * @author Drem Darios (drem.darios@gmail.com)
  */
+@Deprecated
 @MXBean
 public class BasicJmxRule extends BasicRule implements JmxRule {
 

File: easyrules-jmx/src/main/java/org/easyrules/core/JmxRulesEngineBuilder.java
Patch:
@@ -36,12 +36,14 @@
  *
  * @author Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)
  */
+@Deprecated
 public class JmxRulesEngineBuilder {
 
     private RulesEngineParameters parameters;
 
     private List<RuleListener> ruleListeners;
 
+    @Deprecated
     public static JmxRulesEngineBuilder aNewJmxRulesEngine() {
         return new JmxRulesEngineBuilder();
     }

File: easyrules-core/src/main/java/org/easyrules/api/RuleListener.java
Patch:
@@ -10,9 +10,10 @@ public interface RuleListener {
     /**
      * Triggered before the evaluation of a rule.
      *
-     * @param rule the current rule
+     * @param rule being evaluated
+     * @return true if the rule should be evaluated, false otherwise
      */
-    Rule beforeEvaluate(Rule rule);
+    boolean beforeEvaluate(Rule rule);
 
     /**
      * Triggered before the execution of a rule.

File: easyrules-jmx/src/main/java/org/easyrules/core/BasicJmxRule.java
Patch:
@@ -26,11 +26,14 @@
 
 import org.easyrules.api.JmxRule;
 
+import javax.management.MXBean;
+
 /**
  * An extension of {@link org.easyrules.core.BasicRule} that is supported by JMX.
  * 
  * @author Drem Darios (drem.darios@gmail.com)
  */
+@MXBean
 public class BasicJmxRule extends BasicRule implements JmxRule {
 
 }

File: easyrules-core/src/main/java/org/easyrules/core/DefaultRulesEngine.java
Patch:
@@ -122,6 +122,7 @@ public void fireRules() {
     @Override
     public Map<Rule, Boolean> checkRules() {
         LOGGER.info("Checking rules");
+        sortRules();
         Map<Rule, Boolean> result = new HashMap<>();
         for (Rule rule : rules) {
             result.put(rule, rule.evaluate());

File: easyrules-core/src/main/java/org/easyrules/core/BasicRule.java
Patch:
@@ -27,8 +27,6 @@
 import org.easyrules.api.Rule;
 import org.easyrules.util.Utils;
 
-import javax.management.MXBean;
-
 /**
  * Basic rule implementation class that provides common methods.
  *
@@ -37,7 +35,6 @@
  *
  * @author Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)
  */
-@MXBean
 public class BasicRule implements Rule, Comparable<Rule> {
 
     /**

File: easyrules-core/src/main/java/org/easyrules/core/BasicRule.java
Patch:
@@ -31,7 +31,7 @@
 
 /**
  * Basic rule implementation class that provides common methods.
- * <p/>
+ *
  * You can extend this class and override {@link BasicRule#evaluate()} and {@link BasicRule#execute()}
  * to provide rule conditions and actions logic.
  *

File: easyrules-core/src/main/java/org/easyrules/core/DefaultRulesEngine.java
Patch:
@@ -39,9 +39,9 @@
 
 /**
  * Default {@link org.easyrules.api.RulesEngine} implementation.
- * <p/>
+ *
  * This implementation handles a set of rules with unique name.
- * <p/>
+ *
  * Rules are fired according to their natural order which is priority by default.
  *
  * @author Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)

File: easyrules-jmx/src/main/java/org/easyrules/core/DefaultJmxRulesEngine.java
Patch:
@@ -31,7 +31,7 @@
 
 /**
  * Default {@link JmxRulesEngine} implementation.
- * <p/>
+ *
  * This implementation handles a set of JMX rules with unique names.
  *
  * @author Drem Darios (drem.darios@gmail.com)

File: easyrules-archetype/src/main/resources/archetype-resources/src/main/java/HelloWorldRule.java
Patch:
@@ -4,7 +4,7 @@
 import org.easyrules.annotation.Condition;
 import org.easyrules.annotation.Rule;
 
-@Rule(name = "Hello World rule", description = "Say Hello to duke's friends only")
+@Rule(name = "Hello World rule", description = "Say Hello to only duke's friends")
 public class HelloWorldRule {
 
     /**

File: easyrules-archetype/src/main/resources/archetype-resources/src/main/java/Launcher.java
Patch:
@@ -30,7 +30,9 @@ public static void main(String[] args) {
         /**
          * Create a rules engine and register the business rule
          */
-        RulesEngine rulesEngine = aNewRulesEngine().build();
+        RulesEngine rulesEngine = aNewRulesEngine()
+                .named("Hello world rules engine")
+                .build();
 
         rulesEngine.registerRule(helloWorldRule);
 

File: easyrules-quartz/src/main/java/org/easyrules/quartz/RulesEngineJob.java
Patch:
@@ -29,7 +29,7 @@ public void execute(JobExecutionContext jobExecutionContext) throws JobExecution
             engine.fireRules();
         }
         catch (Exception e) {
-            throw new JobExecutionException("An exception occurred during batch engine execution", e);
+            throw new JobExecutionException("An exception occurred during rules engine execution", e);
         }
     }
 }

File: easyrules-samples/src/main/java/org/easyrules/samples/scheduling/TimeRule.java
Patch:
@@ -6,7 +6,7 @@
 
 import java.util.Date;
 
-@Rule(name = "time rule", description = "Print the current time only if when minutes are even")
+@Rule(name = "time rule", description = "Print the current time only if minutes are even")
 public class TimeRule {
 
     private Date now;
@@ -19,7 +19,7 @@ public boolean checkTime() {
 
     @Action
     public void printTime() {
-        System.out.println(now);
+        System.out.println("Minutes in " + now + " are even");
     }
 
 }

File: easyrules-core/src/main/java/org/easyrules/annotation/Action.java
Patch:
@@ -42,7 +42,7 @@
 
     /**
      * The order in which the action should be executed.
-     * @return he order in which the action should be executed
+     * @return the order in which the action should be executed
      */
     int order() default 0;
 

File: easyrules-core/src/main/java/org/easyrules/core/BasicRule.java
Patch:
@@ -28,7 +28,7 @@
 import org.easyrules.util.EasyRulesConstants;
 
 /**
- * Basic rule implementation class that provides common methods.<br/>
+ * Basic rule implementation class that provides common methods.
  *
  * You can extend this class and override {@link BasicRule#evaluateConditions()} and {@link BasicRule#performActions()}
  * to provide rule conditions and actions logic.

File: easyrules-core/src/main/java/org/easyrules/core/CompositeRule.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.HashSet;
 
 /**
- * Class representing a composite rule composed of a set of rules.<br/>
+ * Class representing a composite rule composed of a set of rules.
  *
  * A composite rule is triggered if <strong>ALL</strong> conditions of its composing rules are satisfied.
  * When a composite rule is applied, actions of <strong>ALL</strong> composing rules are performed.

File: easyrules-core/src/test/java/org/easyrules/core/test/EasyRulesTestSuite.java
Patch:
@@ -1,13 +1,13 @@
 package org.easyrules.core.test;
 
+import junit.framework.TestSuite;
+
 import org.easyrules.core.test.annotation.EasyRulesAnnotationTestSuite;
 import org.easyrules.core.test.composite.CompositeRuleTest;
-import org.easyrules.core.test.jmx.JmxRuleRegistrationTest;
 import org.easyrules.core.test.parameters.DefaultRulesEngineTest;
 import org.easyrules.core.test.parameters.RulePriorityComparisonTest;
 import org.easyrules.core.test.parameters.RulePriorityThresholdTest;
 import org.easyrules.core.test.parameters.SkipOnFirstAppliedRuleTest;
-import junit.framework.TestSuite;
 import org.junit.runner.RunWith;
 import org.junit.runners.Suite;
 
@@ -22,7 +22,6 @@
         RulePriorityComparisonTest.class,
         RulePriorityThresholdTest.class,
         SkipOnFirstAppliedRuleTest.class,
-        JmxRuleRegistrationTest.class,
         CompositeRuleTest.class,
         EasyRulesAnnotationTestSuite.class,
         DefaultRulesEngineTest.class})

File: easyrules-samples/src/main/java/org/easyrules/samples/order/SuspectOrderJmxRule.java
Patch:
@@ -24,10 +24,10 @@
 
 package org.easyrules.samples.order;
 
-import org.easyrules.api.Rule;
-
 import javax.management.MXBean;
 
+import org.easyrules.jmx.api.JMXRule;
+
 /**
  * Interface to make suspect order rule manageable via JMX.<br/>
  * Suspect order threshold should be changed at runtime.
@@ -36,7 +36,7 @@
  */
 
 @MXBean
-public interface SuspectOrderJmxRule extends Rule {
+public interface SuspectOrderJmxRule extends JMXRule {
 
     /**
      * Get the current suspect order amount threshold

File: easyrules-core/src/main/java/org/easyrules/core/BasicRule.java
Patch:
@@ -136,7 +136,7 @@ public int compareTo(final Rule rule) {
         if (priority < rule.getPriority()) {
             return -1;
         } else if (priority == rule.getPriority()) {
-            return 0;
+            return name.compareTo(rule.getName());
         } else {
             return 1;
         }

File: easyrules-core/src/test/java/org/easyrules/core/test/EasyRulesTestSuite.java
Patch:
@@ -3,6 +3,7 @@
 import org.easyrules.core.test.annotation.EasyRulesAnnotationTestSuite;
 import org.easyrules.core.test.composite.CompositeRuleTest;
 import org.easyrules.core.test.jmx.JmxRuleRegistrationTest;
+import org.easyrules.core.test.parameters.DefaultRulesEngineTest;
 import org.easyrules.core.test.parameters.RulePriorityComparisonTest;
 import org.easyrules.core.test.parameters.RulePriorityThresholdTest;
 import org.easyrules.core.test.parameters.SkipOnFirstAppliedRuleTest;
@@ -23,7 +24,8 @@
         SkipOnFirstAppliedRuleTest.class,
         JmxRuleRegistrationTest.class,
         CompositeRuleTest.class,
-        EasyRulesAnnotationTestSuite.class})
+        EasyRulesAnnotationTestSuite.class,
+        DefaultRulesEngineTest.class})
 public class EasyRulesTestSuite extends TestSuite {
 
 }

File: easyrules-core/src/test/java/org/easyrules/core/test/parameters/RulePriorityComparisonTest.java
Patch:
@@ -57,7 +57,7 @@ public void testGreaterThanRulePriorityComparison() {
     @Test
     public void testSameRulePriorityComparison() {
         rule1.setPriority(2);
-        assertEquals(0, rule1.compareTo(rule2));
+        assertEquals(-1, rule1.compareTo(rule2));
     }
 
 }

File: easyrules-core/src/test/java/org/easyrules/core/test/parameters/RulePriorityThresholdTest.java
Patch:
@@ -47,10 +47,10 @@ public class RulePriorityThresholdTest {
     @Before
     public void setup(){
 
-        rule1 = new SimpleRule("r1","d1");
-        rule2 = new SimpleRule("r2","d2");
+        rule1 = new SimpleRule("r1","d1",1);
+        rule2 = new SimpleRule("r2","d2",2);
 
-        defaultRulesEngine = new DefaultRulesEngine();
+        defaultRulesEngine = new DefaultRulesEngine(1);
     }
 
     @Test

File: easyrules-core/src/main/java/org/easyrules/core/BasicRule.java
Patch:
@@ -28,7 +28,7 @@
 import org.easyrules.util.EasyRulesConstants;
 
 /**
- * Basic rule implementation class that provides common methods.<br/>
+ * Basic rule implementation class that provides common methods.
  *
  * You can extend this class and override {@link BasicRule#evaluateConditions()} and {@link BasicRule#performActions()}
  * to provide rule conditions and actions logic.

File: easyrules-core/src/main/java/org/easyrules/core/CompositeRule.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.HashSet;
 
 /**
- * Class representing a composite rule composed of a set of rules.<br/>
+ * Class representing a composite rule composed of a set of rules.
  *
  * A composite rule is triggered if <strong>ALL</strong> conditions of its composing rules are satisfied.
  * When a composite rule is applied, actions of <strong>ALL</strong> composing rules are performed.

File: easyrules-core/src/test/java/org/easyrules/core/test/jmx/JmxRuleRegistrationTest.java
Patch:
@@ -33,7 +33,7 @@ public void setup(){
     }
 
     @Test
-    public void testRulePriorityThreshold() throws MalformedObjectNameException, IntrospectionException, InstanceNotFoundException, ReflectionException {
+    public void testJmxRuleRegistration() throws MalformedObjectNameException, IntrospectionException, InstanceNotFoundException, ReflectionException {
 
         rulesEngine.registerJmxRule(rule);
 

File: easyrules-core/src/main/java/io/github/benas/easyrules/api/RulesEngine.java
Patch:
@@ -40,7 +40,7 @@ public interface RulesEngine<R> {
 
     /**
      * Register a rule in the rules engine registry.
-     * This method also registers the rules as a Jmx bean.
+     * This method also registers the rule as a Jmx bean.
      * The rule object <strong>must</strong> be JMX compliant.
      *
      * @param rule the rule to register

File: easyrules-core/src/main/java/io/github/benas/easyrules/util/EasyRulesConstants.java
Patch:
@@ -51,11 +51,11 @@ private EasyRulesConstants() { }
     /**
      * Default rule priority.
      */
-    public static final int DEFAULT_RULE_PRIORITY = 9999;
+    public static final int DEFAULT_RULE_PRIORITY = Integer.MAX_VALUE - 1;
 
     /**
      * Default rule priority threshold.
      */
-    public static final int DEFAULT_RULE_PRIORITY_THRESHOLD = 10000;
+    public static final int DEFAULT_RULE_PRIORITY_THRESHOLD = Integer.MAX_VALUE;
 
 }

File: easyrules-core/src/test/java/io/github/benas/easyrules/core/test/CompositeRuleTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.github.io.github.benas.easyrules.core;
+package io.github.benas.easyrules.core.test;
 
 import io.github.benas.easyrules.api.RulesEngine;
 import io.github.benas.easyrules.core.DefaultRulesEngine;

File: easyrules-core/src/test/java/io/github/benas/easyrules/core/test/EasyRulesTestSuite.java
Patch:
@@ -1,4 +1,4 @@
-package io.github.io.github.benas.easyrules.core;
+package io.github.benas.easyrules.core.test;
 
 import junit.framework.TestSuite;
 import org.junit.runner.RunWith;

File: easyrules-core/src/test/java/io/github/benas/easyrules/core/test/RulePriorityComparisonTest.java
Patch:
@@ -22,7 +22,7 @@
  *  THE SOFTWARE.
  */
 
-package io.github.io.github.benas.easyrules.core;
+package io.github.benas.easyrules.core.test;
 
 import io.github.benas.easyrules.core.BasicRule;
 import org.junit.Before;

File: easyrules-core/src/test/java/io/github/benas/easyrules/core/test/RulePriorityThresholdTest.java
Patch:
@@ -22,7 +22,7 @@
  *  THE SOFTWARE.
  */
 
-package io.github.io.github.benas.easyrules.core;
+package io.github.benas.easyrules.core.test;
 
 import io.github.benas.easyrules.api.RulesEngine;
 import io.github.benas.easyrules.core.DefaultRulesEngine;

File: easyrules-core/src/test/java/io/github/benas/easyrules/core/test/SimpleCompositeRule.java
Patch:
@@ -1,4 +1,4 @@
-package io.github.io.github.benas.easyrules.core;
+package io.github.benas.easyrules.core.test;
 
 import io.github.benas.easyrules.core.CompositeRule;
 

File: easyrules-core/src/test/java/io/github/benas/easyrules/core/test/SimpleRule.java
Patch:
@@ -1,4 +1,4 @@
-package io.github.io.github.benas.easyrules.core;
+package io.github.benas.easyrules.core.test;
 
 import io.github.benas.easyrules.core.BasicRule;
 

File: easyrules-core/src/test/java/io/github/benas/easyrules/core/test/SimpleRuleThatEvaluateToFalse.java
Patch:
@@ -1,4 +1,4 @@
-package io.github.io.github.benas.easyrules.core;
+package io.github.benas.easyrules.core.test;
 
 /**
  * Simple rule class used for tests.

File: easyrules-core/src/test/java/io/github/benas/easyrules/core/test/SimpleRuleThatThrowsException.java
Patch:
@@ -1,4 +1,4 @@
-package io.github.io.github.benas.easyrules.core;
+package io.github.benas.easyrules.core.test;
 
 /**
  * Simple rule class used for tests.

File: easyrules-core/src/test/java/io/github/benas/easyrules/core/test/SkipOnFirstAppliedRuleTest.java
Patch:
@@ -22,7 +22,7 @@
  *  THE SOFTWARE.
  */
 
-package io.github.io.github.benas.easyrules.core;
+package io.github.benas.easyrules.core.test;
 
 import io.github.benas.easyrules.api.RulesEngine;
 import io.github.benas.easyrules.core.DefaultRulesEngine;

File: easyrules-core/src/main/java/io/github/benas/easyrules/api/Rule.java
Patch:
@@ -24,13 +24,16 @@
 
 package io.github.benas.easyrules.api;
 
+import javax.management.MXBean;
+
 /**
  * Abstraction for a rule that can be fired by the rules engine.<br/>
  *
  * Rules are registered in the rules engine registry and must have a <strong>unique</strong> name.<br/>
  *
  * @author Mahmoud Ben Hassine (md.benhassine@gmail.com)
  */
+@MXBean
 public interface Rule {
 
     /**

File: easyrules-core/src/main/java/io/github/benas/easyrules/api/Rule.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License
  *
- *  Copyright (c) 2013, benas (md.benhassine@gmail.com)
+ *  Copyright (c) 2014, benas (md.benhassine@gmail.com)
  *
  *  Permission is hereby granted, free of charge, to any person obtaining a copy
  *  of this software and associated documentation files (the "Software"), to deal
@@ -22,7 +22,7 @@
  *  THE SOFTWARE.
  */
 
-package io.github.easyrules.api;
+package io.github.benas.easyrules.api;
 
 /**
  * Abstraction for a rule that can be fired by the rules engine.<br/>

File: easyrules-core/src/main/java/io/github/benas/easyrules/api/RulesEngine.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License
  *
- *  Copyright (c) 2013, benas (md.benhassine@gmail.com)
+ *  Copyright (c) 2014, benas (md.benhassine@gmail.com)
  *
  *  Permission is hereby granted, free of charge, to any person obtaining a copy
  *  of this software and associated documentation files (the "Software"), to deal
@@ -22,7 +22,7 @@
  *  THE SOFTWARE.
  */
 
-package io.github.easyrules.api;
+package io.github.benas.easyrules.api;
 
 import java.util.Set;
 

File: easyrules-core/src/main/java/io/github/benas/easyrules/api/package-info.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License
  *
- *  Copyright (c) 2013, benas (md.benhassine@gmail.com)
+ *  Copyright (c) 2014, benas (md.benhassine@gmail.com)
  *
  *  Permission is hereby granted, free of charge, to any person obtaining a copy
  *  of this software and associated documentation files (the "Software"), to deal
@@ -25,4 +25,4 @@
 /**
  * This package contains main Easy Rules public API.
  */
-package io.github.easyrules.api;
+package io.github.benas.easyrules.api;

File: easyrules-core/src/main/java/io/github/benas/easyrules/core/BasicJmxManagedRule.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License
  *
- *  Copyright (c) 2013, benas (md.benhassine@gmail.com)
+ *  Copyright (c) 2014, benas (md.benhassine@gmail.com)
  *
  *  Permission is hereby granted, free of charge, to any person obtaining a copy
  *  of this software and associated documentation files (the "Software"), to deal
@@ -22,9 +22,9 @@
  *  THE SOFTWARE.
  */
 
-package io.github.easyrules.core;
+package io.github.benas.easyrules.core;
 
-import io.github.easyrules.api.JmxManagedRule;
+import io.github.benas.easyrules.api.JmxManagedRule;
 
 /**
  * Basic class for JMX managed rules.<br/>

File: easyrules-core/src/main/java/io/github/benas/easyrules/core/package-info.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License
  *
- *  Copyright (c) 2013, benas (md.benhassine@gmail.com)
+ *  Copyright (c) 2014, benas (md.benhassine@gmail.com)
  *
  *  Permission is hereby granted, free of charge, to any person obtaining a copy
  *  of this software and associated documentation files (the "Software"), to deal
@@ -25,4 +25,4 @@
 /**
  * This package contains the core Easy Rules implementation.
  */
-package io.github.easyrules.core;
+package io.github.benas.easyrules.core;

File: easyrules-core/src/main/java/io/github/benas/easyrules/util/EasyRulesConstants.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License
  *
- *  Copyright (c) 2013, benas (md.benhassine@gmail.com)
+ *  Copyright (c) 2014, benas (md.benhassine@gmail.com)
  *
  *  Permission is hereby granted, free of charge, to any person obtaining a copy
  *  of this software and associated documentation files (the "Software"), to deal
@@ -22,7 +22,7 @@
  *  THE SOFTWARE.
  */
 
-package io.github.easyrules.util;
+package io.github.benas.easyrules.util;
 
 /**
  * Easy Rules constants class.

File: easyrules-core/src/main/java/io/github/benas/easyrules/util/package-info.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License
  *
- *  Copyright (c) 2013, benas (md.benhassine@gmail.com)
+ *  Copyright (c) 2014, benas (md.benhassine@gmail.com)
  *
  *  Permission is hereby granted, free of charge, to any person obtaining a copy
  *  of this software and associated documentation files (the "Software"), to deal
@@ -25,4 +25,4 @@
 /**
  * This package contains Easy Rules utility classes.
  */
-package io.github.easyrules.util;
+package io.github.benas.easyrules.util;

File: easyrules-samples/src/main/java/io/github/benas/easyrules/samples/helloworld/HelloWorldRule.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License
  *
- *  Copyright (c) 2013, benas (md.benhassine@gmail.com)
+ *  Copyright (c) 2014, benas (md.benhassine@gmail.com)
  *
  *  Permission is hereby granted, free of charge, to any person obtaining a copy
  *  of this software and associated documentation files (the "Software"), to deal
@@ -22,9 +22,9 @@
  *  THE SOFTWARE.
  */
 
-package io.github.easyrules.samples.helloworld;
+package io.github.benas.easyrules.samples.helloworld;
 
-import io.github.easyrules.core.BasicRule;
+import io.github.benas.easyrules.core.BasicRule;
 
 /**
  * Hello World rule class.

File: easyrules-samples/src/main/java/io/github/benas/easyrules/samples/order/Customer.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License
  *
- *  Copyright (c) 2013, benas (md.benhassine@gmail.com)
+ *  Copyright (c) 2014, benas (md.benhassine@gmail.com)
  *
  *  Permission is hereby granted, free of charge, to any person obtaining a copy
  *  of this software and associated documentation files (the "Software"), to deal
@@ -22,7 +22,7 @@
  *  THE SOFTWARE.
  */
 
-package io.github.easyrules.samples.order;
+package io.github.benas.easyrules.samples.order;
 
 /**
  * Customer java bean.

File: easyrules-samples/src/main/java/io/github/benas/easyrules/samples/order/Order.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License
  *
- *  Copyright (c) 2013, benas (md.benhassine@gmail.com)
+ *  Copyright (c) 2014, benas (md.benhassine@gmail.com)
  *
  *  Permission is hereby granted, free of charge, to any person obtaining a copy
  *  of this software and associated documentation files (the "Software"), to deal
@@ -22,7 +22,7 @@
  *  THE SOFTWARE.
  */
 
-package io.github.easyrules.samples.order;
+package io.github.benas.easyrules.samples.order;
 
 /**
  * Order java bean.

File: easyrules-samples/src/main/java/io/github/benas/easyrules/samples/order/SuspectOrderJmxManagedRule.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License
  *
- *  Copyright (c) 2013, benas (md.benhassine@gmail.com)
+ *  Copyright (c) 2014, benas (md.benhassine@gmail.com)
  *
  *  Permission is hereby granted, free of charge, to any person obtaining a copy
  *  of this software and associated documentation files (the "Software"), to deal
@@ -22,9 +22,9 @@
  *  THE SOFTWARE.
  */
 
-package io.github.easyrules.samples.order;
+package io.github.benas.easyrules.samples.order;
 
-import io.github.easyrules.api.JmxManagedRule;
+import io.github.benas.easyrules.api.JmxManagedRule;
 
 import javax.management.MXBean;
 

File: easyrules-samples/src/main/java/io/github/benas/easyrules/samples/order/SuspectOrderRule.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License
  *
- *  Copyright (c) 2013, benas (md.benhassine@gmail.com)
+ *  Copyright (c) 2014, benas (md.benhassine@gmail.com)
  *
  *  Permission is hereby granted, free of charge, to any person obtaining a copy
  *  of this software and associated documentation files (the "Software"), to deal
@@ -22,9 +22,9 @@
  *  THE SOFTWARE.
  */
 
-package io.github.easyrules.samples.order;
+package io.github.benas.easyrules.samples.order;
 
-import io.github.easyrules.core.BasicJmxManagedRule;
+import io.github.benas.easyrules.core.BasicJmxManagedRule;
 
 /**
  * Business rule class that defines suspect order rule.

File: easyrules-core/src/main/java/io/github/easyrules/api/RulesEngine.java
Patch:
@@ -71,12 +71,12 @@ public interface RulesEngine {
      * Specify if next rules should be skipped after the first applied rule.
      * @param skipOnFirstAppliedRule true if next rules should be skipped after the first applied rule, false else.
      */
-    public void setSkipOnFirstAppliedRule(boolean skipOnFirstAppliedRule);
+    void setSkipOnFirstAppliedRule(boolean skipOnFirstAppliedRule);
 
     /**
      * Set the maximum rule priority over which rules should be skipped.
      * @param rulePriorityThreshold rule priority threshold
      */
-    public void setRulePriorityThreshold(int rulePriorityThreshold);
+    void setRulePriorityThreshold(int rulePriorityThreshold);
 
 }

File: easyrules-core/src/main/java/io/github/easyrules/core/BasicJmxManagedRule.java
Patch:
@@ -37,7 +37,7 @@ protected BasicJmxManagedRule() {
         super();
     }
 
-    protected BasicJmxManagedRule(String name, String description, int priority) {
+    protected BasicJmxManagedRule(final String name, final String description, final int priority) {
         super(name, description, priority);
     }
 

File: easyrules-core/src/main/java/io/github/easyrules/core/BasicRule.java
Patch:
@@ -57,7 +57,7 @@ public BasicRule() {
                 EasyRulesConstants.DEFAULT_RULE_PRIORITY);
     }
 
-    public BasicRule(String name, String description, int priority) {
+    public BasicRule(final String name, final String description, final int priority) {
         this.name = name;
         this.description = description;
         this.priority = priority;
@@ -67,7 +67,7 @@ public BasicRule(String name, String description, int priority) {
      * Rule conditions abstraction : this method encapsulates the rule's conditions.
      * @return true if the rule should be applied, false else
      */
-    public boolean evaluateConditions(){
+    public boolean evaluateConditions() {
         return false;
     }
 
@@ -116,7 +116,7 @@ public int hashCode() {
     }
 
     @Override
-    public int compareTo(Rule rule) {
+    public int compareTo(final Rule rule) {
         if (priority < rule.getPriority()) {
             return -1;
         } else if (priority == rule.getPriority()) {

File: easyrules-core/src/main/java/io/github/easyrules/util/EasyRulesConstants.java
Patch:
@@ -31,7 +31,7 @@
  */
 public class EasyRulesConstants {
 
-    private EasyRulesConstants() {}
+    private EasyRulesConstants() { }
 
     /**
      * EasyRules logger name;

File: easyrules-core/src/main/java/net/benas/easyrules/core/Rule.java
Patch:
@@ -76,7 +76,7 @@ public boolean evaluateConditions(){
     }
 
     /**
-     * Rule actions abstraction : this methods encapsulates the rule's actions.
+     * Rule actions abstraction : this method encapsulates the rule's actions.
      * @throws Exception thrown if an exception occurs during actions performing
      */
     public void performActions() throws Exception {

File: easyrules-samples/src/main/java/net/benas/easyrules/samples/helloworld/HelloWorldSampleLauncher.java
Patch:
@@ -48,7 +48,7 @@ public static void main(String[] args) {
         HelloWorldRule helloWorldRule = new HelloWorldRule("Hello World rule", "Say Hello to only duke's friends", 1);
 
         /**
-         * Set data to operates on
+         * Set data to operate on
          */
         helloWorldRule.setInput(input.trim());
 

File: easyrules-samples/src/main/java/net/benas/easyrules/samples/order/OrderSampleLauncher.java
Patch:
@@ -48,7 +48,7 @@ public static void main(String[] args) {
                 1);
 
         /**
-         * Set data to operates on
+         * Set data to operate on
          */
         suspectOrderRule.setOrder(order);
         suspectOrderRule.setCustomer(customer);

