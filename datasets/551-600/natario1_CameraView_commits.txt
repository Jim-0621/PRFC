File: cameraview/src/main/java/com/otaliastudios/cameraview/video/SnapshotVideoRecorder.java
Patch:
@@ -245,7 +245,7 @@ public void onRendererFrame(@NonNull SurfaceTexture surfaceTexture, int rotation
 
             // Adjustment
             mResult.rotation = 0; // We will rotate the result instead.
-            mCurrentFilter.setSize(mResult.size.getWidth(), mResult.size.getWidth());
+            mCurrentFilter.setSize(mResult.size.getWidth(), mResult.size.getHeight());
 
             // Audio
             AudioMediaEncoder audioEncoder = null;

File: cameraview/src/main/java/com/otaliastudios/cameraview/BitmapCallback.java
Patch:
@@ -12,7 +12,7 @@ public interface BitmapCallback {
     /**
      * Notifies that the bitmap was successfully decoded.
      * This is run on the UI thread.
-     * Returns a null object if a {@link OutOfMemoryError} was encountered.
+     * Returns a null object if an {@link OutOfMemoryError} was encountered.
      *
      * @param bitmap decoded bitmap, or null
      */

File: cameraview/src/main/java/com/otaliastudios/cameraview/engine/Camera2Engine.java
Patch:
@@ -479,7 +479,7 @@ protected Task<Void> onStartBind() {
 
         // Compute sizes.
         // TODO preview stream should never be bigger than 1920x1080 as per
-        //  CameraDevice.createCaptureSession. This should be probably be applied
+        //  CameraDevice.createCaptureSession. This should probably be applied
         //  before all the other external selectors, to treat it as a hard limit.
         //  OR: pass an int into these functions to be able to take smaller dims
         //  when session configuration fails

File: cameraview/src/main/java/com/otaliastudios/cameraview/engine/CameraBaseEngine.java
Patch:
@@ -559,10 +559,10 @@ public void onPictureShutter(boolean didPlaySound) {
     @Override
     public void onPictureResult(@Nullable PictureResult.Stub result, @Nullable Exception error) {
         mPictureRecorder = null;
-        if (result != null) {
+        if (result != null && result.data != null) {
             getCallback().dispatchOnPictureTaken(result);
         } else {
-            LOG.e("onPictureResult", "result is null: something went wrong.", error);
+            LOG.e("onPictureResult", "result or data is null: something went wrong.", error);
             getCallback().dispatchError(new CameraException(error,
                     CameraException.REASON_PICTURE_FAILED));
         }

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/markers/MarkerLayoutTest.java
Patch:
@@ -30,7 +30,7 @@
  * Not clear why, but for some reason on API 28+ the UiThreadTests here crash for an internal NPE
  * in FrameLayout.onMeasure.
  */
-@SdkExclude(minSdkVersion = 28, maxSdkVersion = 29)
+@SdkExclude(minSdkVersion = 28)
 @TargetApi(17)
 public class MarkerLayoutTest extends BaseTest {
 

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/overlay/OverlayLayoutTest.java
Patch:
@@ -14,6 +14,7 @@
 import androidx.test.filters.SmallTest;
 
 import com.otaliastudios.cameraview.BaseTest;
+import com.otaliastudios.cameraview.tools.SdkExclude;
 
 import org.junit.After;
 import org.junit.Before;
@@ -129,6 +130,7 @@ public void testDrawChild() {
         assertTrue(overlayLayout.drawChild(canvas, child, 0));
     }
 
+    @SdkExclude(minSdkVersion = 31) // spying views does not work properly on 31, should investigate
     @UiThreadTest
     @Test
     public void testDraw() {
@@ -142,6 +144,7 @@ public void testDraw() {
         verify(overlayLayout, times(1)).drawOn(Overlay.Target.PREVIEW, canvas);
     }
 
+    @SdkExclude(minSdkVersion = 31) // spying views does not work properly on 31, should investigate
     @UiThreadTest
     @Test
     public void testDrawOn() {

File: cameraview/src/main/java/com/otaliastudios/cameraview/engine/Camera2Engine.java
Patch:
@@ -1433,8 +1433,7 @@ protected List<Range<Integer>> filterFrameRateRanges(@NonNull Range<Integer>[] f
         int min = Math.round(mCameraOptions.getPreviewFrameRateMinValue());
         int max = Math.round(mCameraOptions.getPreviewFrameRateMaxValue());
         for (Range<Integer> fpsRange : fpsRanges) {
-            if (!fpsRange.contains(min)) continue;
-            if (!fpsRange.contains(max)) continue;
+            if (!fpsRange.contains(min) && !fpsRange.contains(max)) continue;
             if (!FpsRangeValidator.validate(fpsRange)) continue;
             results.add(fpsRange);
         }

File: cameraview/src/main/java/com/otaliastudios/cameraview/preview/SurfaceCameraPreview.java
Patch:
@@ -46,6 +46,7 @@ protected SurfaceView onCreateView(@NonNull Context context, @NonNull ViewGroup
             public void surfaceCreated(SurfaceHolder holder) {
                 // This is too early to call anything.
                 // surfaceChanged is guaranteed to be called after, with exact dimensions.
+                LOG.i("callback: surfaceCreated.");
             }
 
             @Override
@@ -64,7 +65,7 @@ public void surfaceChanged(SurfaceHolder holder, int format, int width, int heig
 
             @Override
             public void surfaceDestroyed(SurfaceHolder holder) {
-                LOG.i("callback:", "surfaceDestroyed");
+                LOG.i("callback: surfaceDestroyed");
                 dispatchOnSurfaceDestroyed();
                 mDispatched = false;
             }

File: cameraview/src/main/java/com/otaliastudios/cameraview/CameraUtils.java
Patch:
@@ -158,7 +158,7 @@ public static void decodeBitmap(@NonNull final byte[] source,
                                     @NonNull final BitmapCallback callback) {
         decodeBitmap(source, Integer.MAX_VALUE, Integer.MAX_VALUE, callback);
     }
-    
+
     /**
      * Decodes an input byte array and outputs a Bitmap that is ready to be displayed.
      * The difference with {@link android.graphics.BitmapFactory#decodeByteArray(byte[], int, int)}

File: cameraview/src/main/java/com/otaliastudios/cameraview/CameraUtils.java
Patch:
@@ -94,6 +94,7 @@ public static File writeToFile(@NonNull final byte[] data, @NonNull File file) {
             stream.flush();
             return file;
         } catch (IOException e) {
+            LOG.e("writeToFile:", "could not write file.", e);
             return null;
         }
     }

File: cameraview/src/main/java/com/otaliastudios/cameraview/engine/Camera1Engine.java
Patch:
@@ -214,6 +214,7 @@ protected Task<Void> onStartBind() {
 
         mCaptureSize = computeCaptureSize();
         mPreviewStreamSize = computePreviewStreamSize();
+        LOG.i("onStartBind:", "Returning");
         return Tasks.forResult(null);
     }
 

File: cameraview/src/main/java/com/otaliastudios/cameraview/CameraView.java
Patch:
@@ -394,12 +394,10 @@ protected void onAttachedToWindow() {
             // attached. That's why we instantiate the preview here.
             doInstantiatePreview();
         }
-        mOrientationHelper.enable();
     }
 
     @Override
     protected void onDetachedFromWindow() {
-        if (!mInEditor) mOrientationHelper.disable();
         mLastPreviewStreamSize = null;
         super.onDetachedFromWindow();
     }
@@ -732,6 +730,7 @@ private void onGesture(@NonNull GestureFinder source, @NonNull CameraOptions opt
      * Sets permissions flag if you want enable auto check permissions or disable it.
      * @param requestPermissions - true: auto check permissions enabled, false: auto check permissions disabled.
      */
+    @SuppressWarnings("unused")
     public void setRequestPermissions(boolean requestPermissions) {
         mRequestPermissions = requestPermissions;
     }
@@ -1810,6 +1809,7 @@ public void takeVideo(@NonNull File file, int durationMillis) {
      * @param fileDescriptor a file descriptor where the video will be saved
      * @param durationMillis recording max duration
      */
+    @SuppressWarnings("unused")
     public void takeVideo(@NonNull FileDescriptor fileDescriptor, int durationMillis) {
         takeVideo(null, fileDescriptor, durationMillis);
     }

File: cameraview/src/main/java/com/otaliastudios/cameraview/CameraView.java
Patch:
@@ -855,6 +855,7 @@ private void checkPermissionsManifestOrThrow(@NonNull Audio audio) {
     @OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)
     public void close() {
         if (mInEditor) return;
+        mOrientationHelper.disable();
         mCameraEngine.stop(false);
         if (mCameraPreview != null) mCameraPreview.onPause();
     }

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/filter/MultiFilterTest.java
Patch:
@@ -179,7 +179,7 @@ public Object answer(InvocationOnMock invocation) {
                 assertTrue(state.isFramebufferCreated);
 
                 GLES20.glGetIntegerv(GLES20.GL_FRAMEBUFFER_BINDING, result, 0);
-                assertTrue(result[0] != 0);
+                // assertTrue(result[0] != 0);
                 return null;
             }
         }).when(filter1).draw(0L, matrix);

File: cameraview/src/main/java/com/otaliastudios/cameraview/picture/Full1PictureRecorder.java
Patch:
@@ -72,6 +72,8 @@ public void onPictureTaken(byte[] data, final Camera camera) {
                         mResult.rotation = exifRotation;
                         LOG.i("take(): starting preview again. ", Thread.currentThread());
 
+                        // It's possible that by the time this callback is invoked, we're not previewing
+                        // anymore, so check before restarting preview.
                         if (mEngine.getState().isAtLeast(CameraState.PREVIEW)) {
                             camera.setPreviewCallbackWithBuffer(mEngine);
                             Size previewStreamSize = mEngine.getPreviewStreamSize(Reference.SENSOR);
@@ -86,9 +88,8 @@ public void onPictureTaken(byte[] data, final Camera camera) {
                                     previewStreamSize,
                                     mEngine.getAngles()
                             );
+                            camera.startPreview();
                         }
-
-                        camera.startPreview(); // This is needed, read somewhere in the docs.
                         dispatchResult();
                     }
                 }

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/engine/options/Camera1OptionsTest.java
Patch:
@@ -7,6 +7,7 @@
 import com.otaliastudios.cameraview.BaseTest;
 import com.otaliastudios.cameraview.CameraOptions;
 import com.otaliastudios.cameraview.controls.Audio;
+import com.otaliastudios.cameraview.controls.AudioCodec;
 import com.otaliastudios.cameraview.controls.Facing;
 import com.otaliastudios.cameraview.controls.Flash;
 import com.otaliastudios.cameraview.controls.PictureFormat;
@@ -244,10 +245,12 @@ public void testAlwaysSupportedControls() {
 
         Collection<Grid> grids = o.getSupportedControls(Grid.class);
         Collection<VideoCodec> video = o.getSupportedControls(VideoCodec.class);
+        Collection<AudioCodec> audioCodecs = o.getSupportedControls(AudioCodec.class);
         Collection<Mode> sessions = o.getSupportedControls(Mode.class);
         Collection<Audio> audio = o.getSupportedControls(Audio.class);
         assertEquals(grids.size(), Grid.values().length);
         assertEquals(video.size(), VideoCodec.values().length);
+        assertEquals(audioCodecs.size(), AudioCodec.values().length);
         assertEquals(sessions.size(), Mode.values().length);
         assertEquals(audio.size(), Audio.values().length);
     }

File: cameraview/src/main/java/com/otaliastudios/cameraview/CameraOptions.java
Patch:
@@ -4,6 +4,7 @@
 import android.graphics.ImageFormat;
 
 import com.otaliastudios.cameraview.controls.Audio;
+import com.otaliastudios.cameraview.controls.AudioCodec;
 import com.otaliastudios.cameraview.controls.Control;
 import com.otaliastudios.cameraview.controls.Engine;
 import com.otaliastudios.cameraview.controls.Facing;
@@ -105,6 +106,8 @@ public final <T extends Control> Collection<T> getSupportedControls(
             return (Collection<T>) Arrays.asList(Mode.values());
         } else if (controlClass.equals(VideoCodec.class)) {
             return (Collection<T>) Arrays.asList(VideoCodec.values());
+        } else if (controlClass.equals(AudioCodec.class)) {
+            return (Collection<T>) Arrays.asList(AudioCodec.values());
         } else if (controlClass.equals(WhiteBalance.class)) {
             return (Collection<T>) getSupportedWhiteBalance();
         } else if (controlClass.equals(Engine.class)) {

File: demo/src/main/java/com/otaliastudios/cameraview/demo/CameraActivity.java
Patch:
@@ -123,7 +123,7 @@ public void process(@NonNull Frame frame) {
                 new Option.PictureMetering(), new Option.PictureSnapshotMetering(),
                 new Option.PictureFormat(),
                 // Video recording
-                new Option.PreviewFrameRate(), new Option.VideoCodec(), new Option.Audio(),
+                new Option.PreviewFrameRate(), new Option.VideoCodec(), new Option.Audio(), new Option.AudioCodec(),
                 // Gestures
                 new Option.Pinch(), new Option.HorizontalScroll(), new Option.VerticalScroll(),
                 new Option.Tap(), new Option.LongTap(),
@@ -144,7 +144,7 @@ public void process(@NonNull Frame frame) {
                 // Some controls
                 false, false, false, false, false, true,
                 // Video recording
-                false, false, true,
+                false, false, false, true,
                 // Gestures
                 false, false, false, false, true,
                 // Watermarks

File: demo/src/main/java/com/otaliastudios/cameraview/demo/VideoPreviewActivity.java
Patch:
@@ -59,6 +59,7 @@ public void onClick(View view) {
         final MessageView audio = findViewById(R.id.audio);
         final MessageView audioBitRate = findViewById(R.id.audioBitRate);
         final MessageView videoCodec = findViewById(R.id.videoCodec);
+        final MessageView audioCodec = findViewById(R.id.audioCodec);
         final MessageView videoBitRate = findViewById(R.id.videoBitRate);
         final MessageView videoFrameRate = findViewById(R.id.videoFrameRate);
 
@@ -69,6 +70,7 @@ public void onClick(View view) {
         audio.setTitleAndMessage("Audio", result.getAudio().name());
         audioBitRate.setTitleAndMessage("Audio bit rate", result.getAudioBitRate() + " bits per sec.");
         videoCodec.setTitleAndMessage("VideoCodec", result.getVideoCodec().name());
+        audioCodec.setTitleAndMessage("AudioCodec", result.getAudioCodec().name());
         videoBitRate.setTitleAndMessage("Video bit rate", result.getVideoBitRate() + " bits per sec.");
         videoFrameRate.setTitleAndMessage("Video frame rate", result.getVideoFrameRate() + " fps");
         MediaController controller = new MediaController(this);

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/engine/CameraIntegrationTest.java
Patch:
@@ -31,7 +31,7 @@
 import com.otaliastudios.cameraview.size.SizeSelectors;
 import com.otaliastudios.cameraview.tools.Emulator;
 import com.otaliastudios.cameraview.tools.Op;
-import com.otaliastudios.cameraview.internal.utils.WorkerHandler;
+import com.otaliastudios.cameraview.internal.WorkerHandler;
 import com.otaliastudios.cameraview.overlay.Overlay;
 import com.otaliastudios.cameraview.size.Size;
 import com.otaliastudios.cameraview.tools.Retry;
@@ -45,7 +45,6 @@
 
 import org.junit.After;
 import org.junit.Before;
-import org.junit.BeforeClass;
 import org.junit.Rule;
 import org.junit.Test;
 import org.mockito.ArgumentMatcher;

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/internal/CamcorderProfilesTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.otaliastudios.cameraview.internal.utils;
+package com.otaliastudios.cameraview.internal;
 
 
 import android.media.CamcorderProfile;
@@ -8,6 +8,7 @@
 
 import com.otaliastudios.cameraview.BaseTest;
 import com.otaliastudios.cameraview.CameraUtils;
+import com.otaliastudios.cameraview.internal.CamcorderProfiles;
 import com.otaliastudios.cameraview.tools.SdkExclude;
 import com.otaliastudios.cameraview.size.Size;
 

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/internal/CropHelperTest.java
Patch:
@@ -1,9 +1,10 @@
-package com.otaliastudios.cameraview.internal.utils;
+package com.otaliastudios.cameraview.internal;
 
 
 import android.graphics.Rect;
 
 import com.otaliastudios.cameraview.BaseTest;
+import com.otaliastudios.cameraview.internal.CropHelper;
 import com.otaliastudios.cameraview.size.AspectRatio;
 import com.otaliastudios.cameraview.size.Size;
 

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/internal/OrientationHelperTest.java
Patch:
@@ -1,11 +1,12 @@
-package com.otaliastudios.cameraview.internal.utils;
+package com.otaliastudios.cameraview.internal;
 
 
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import androidx.test.filters.SmallTest;
 import android.view.OrientationEventListener;
 
 import com.otaliastudios.cameraview.BaseTest;
+import com.otaliastudios.cameraview.internal.OrientationHelper;
 
 import org.junit.After;
 import org.junit.Before;

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/internal/RotationHelperTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.otaliastudios.cameraview.internal.utils;
+package com.otaliastudios.cameraview.internal;
 
 
 import android.graphics.ImageFormat;
@@ -8,6 +8,7 @@
 import androidx.test.filters.SmallTest;
 
 import com.otaliastudios.cameraview.BaseTest;
+import com.otaliastudios.cameraview.internal.RotationHelper;
 import com.otaliastudios.cameraview.size.Size;
 
 import org.junit.Test;

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/internal/WorkerHandlerTest.java
Patch:
@@ -1,9 +1,10 @@
-package com.otaliastudios.cameraview.internal.utils;
+package com.otaliastudios.cameraview.internal;
 
 
 import com.google.android.gms.tasks.Task;
 import com.google.android.gms.tasks.Tasks;
 import com.otaliastudios.cameraview.BaseTest;
+import com.otaliastudios.cameraview.internal.WorkerHandler;
 import com.otaliastudios.cameraview.tools.Op;
 
 import androidx.annotation.NonNull;

File: cameraview/src/main/java/com/otaliastudios/cameraview/CameraUtils.java
Patch:
@@ -11,8 +11,8 @@
 
 import com.otaliastudios.cameraview.controls.Facing;
 import com.otaliastudios.cameraview.engine.mappers.Camera1Mapper;
-import com.otaliastudios.cameraview.internal.utils.ExifHelper;
-import com.otaliastudios.cameraview.internal.utils.WorkerHandler;
+import com.otaliastudios.cameraview.internal.ExifHelper;
+import com.otaliastudios.cameraview.internal.WorkerHandler;
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;

File: cameraview/src/main/java/com/otaliastudios/cameraview/CameraView.java
Patch:
@@ -66,8 +66,8 @@
 import com.otaliastudios.cameraview.gesture.ScrollGestureFinder;
 import com.otaliastudios.cameraview.gesture.TapGestureFinder;
 import com.otaliastudios.cameraview.internal.GridLinesLayout;
-import com.otaliastudios.cameraview.internal.utils.CropHelper;
-import com.otaliastudios.cameraview.internal.utils.OrientationHelper;
+import com.otaliastudios.cameraview.internal.CropHelper;
+import com.otaliastudios.cameraview.internal.OrientationHelper;
 import com.otaliastudios.cameraview.markers.AutoFocusMarker;
 import com.otaliastudios.cameraview.markers.AutoFocusTrigger;
 import com.otaliastudios.cameraview.markers.MarkerLayout;

File: cameraview/src/main/java/com/otaliastudios/cameraview/engine/Camera1Engine.java
Patch:
@@ -37,7 +37,7 @@
 import com.otaliastudios.cameraview.controls.Hdr;
 import com.otaliastudios.cameraview.controls.Mode;
 import com.otaliastudios.cameraview.controls.WhiteBalance;
-import com.otaliastudios.cameraview.internal.utils.CropHelper;
+import com.otaliastudios.cameraview.internal.CropHelper;
 import com.otaliastudios.cameraview.metering.MeteringRegions;
 import com.otaliastudios.cameraview.metering.MeteringTransform;
 import com.otaliastudios.cameraview.picture.Full1PictureRecorder;

File: cameraview/src/main/java/com/otaliastudios/cameraview/engine/Camera2Engine.java
Patch:
@@ -60,7 +60,7 @@
 import com.otaliastudios.cameraview.frame.FrameManager;
 import com.otaliastudios.cameraview.frame.ImageFrameManager;
 import com.otaliastudios.cameraview.gesture.Gesture;
-import com.otaliastudios.cameraview.internal.utils.CropHelper;
+import com.otaliastudios.cameraview.internal.CropHelper;
 import com.otaliastudios.cameraview.metering.MeteringRegions;
 import com.otaliastudios.cameraview.picture.Full2PictureRecorder;
 import com.otaliastudios.cameraview.picture.Snapshot2PictureRecorder;

File: cameraview/src/main/java/com/otaliastudios/cameraview/engine/CameraEngine.java
Patch:
@@ -2,7 +2,6 @@
 
 import android.content.Context;
 import android.graphics.PointF;
-import android.graphics.RectF;
 import android.location.Location;
 
 
@@ -29,7 +28,7 @@
 import com.otaliastudios.cameraview.engine.offset.Reference;
 import com.otaliastudios.cameraview.frame.Frame;
 import com.otaliastudios.cameraview.frame.FrameManager;
-import com.otaliastudios.cameraview.internal.utils.WorkerHandler;
+import com.otaliastudios.cameraview.internal.WorkerHandler;
 import com.otaliastudios.cameraview.picture.PictureRecorder;
 import com.otaliastudios.cameraview.preview.CameraPreview;
 import com.otaliastudios.cameraview.controls.Audio;

File: cameraview/src/main/java/com/otaliastudios/cameraview/engine/options/Camera1Options.java
Patch:
@@ -13,7 +13,7 @@
 import com.otaliastudios.cameraview.controls.PictureFormat;
 import com.otaliastudios.cameraview.controls.WhiteBalance;
 import com.otaliastudios.cameraview.engine.mappers.Camera1Mapper;
-import com.otaliastudios.cameraview.internal.utils.CamcorderProfiles;
+import com.otaliastudios.cameraview.internal.CamcorderProfiles;
 import com.otaliastudios.cameraview.size.AspectRatio;
 import com.otaliastudios.cameraview.size.Size;
 

File: cameraview/src/main/java/com/otaliastudios/cameraview/engine/options/Camera2Options.java
Patch:
@@ -21,7 +21,7 @@
 import com.otaliastudios.cameraview.controls.PictureFormat;
 import com.otaliastudios.cameraview.controls.WhiteBalance;
 import com.otaliastudios.cameraview.engine.mappers.Camera2Mapper;
-import com.otaliastudios.cameraview.internal.utils.CamcorderProfiles;
+import com.otaliastudios.cameraview.internal.CamcorderProfiles;
 import com.otaliastudios.cameraview.size.AspectRatio;
 import com.otaliastudios.cameraview.size.Size;
 

File: cameraview/src/main/java/com/otaliastudios/cameraview/engine/orchestrator/CameraOrchestrator.java
Patch:
@@ -8,7 +8,7 @@
 import com.google.android.gms.tasks.TaskCompletionSource;
 import com.google.android.gms.tasks.Tasks;
 import com.otaliastudios.cameraview.CameraLogger;
-import com.otaliastudios.cameraview.internal.utils.WorkerHandler;
+import com.otaliastudios.cameraview.internal.WorkerHandler;
 
 import java.util.ArrayDeque;
 import java.util.ArrayList;

File: cameraview/src/main/java/com/otaliastudios/cameraview/filter/SimpleFilter.java
Patch:
@@ -33,6 +33,7 @@ public String getFragmentShader() {
         return fragmentShader;
     }
 
+    @NonNull
     @Override
     protected BaseFilter onCopy() {
         return new SimpleFilter(fragmentShader);

File: cameraview/src/main/java/com/otaliastudios/cameraview/filters/AutoFixFilter.java
Patch:
@@ -6,7 +6,7 @@
 
 import com.otaliastudios.cameraview.filter.BaseFilter;
 import com.otaliastudios.cameraview.filter.OneParameterFilter;
-import com.otaliastudios.cameraview.internal.GlUtils;
+import com.otaliastudios.opengl.core.Egloo;
 
 /**
  * Attempts to auto-fix the frames based on histogram equalization.
@@ -107,7 +107,7 @@ public String getFragmentShader() {
     public void onCreate(int programHandle) {
         super.onCreate(programHandle);
         scaleLocation = GLES20.glGetUniformLocation(programHandle, "scale");
-        GlUtils.checkLocation(scaleLocation, "scale");
+        Egloo.checkGlProgramLocation(scaleLocation, "scale");
     }
 
     @Override
@@ -120,6 +120,6 @@ public void onDestroy() {
     protected void onPreDraw(long timestampUs, @NonNull float[] transformMatrix) {
         super.onPreDraw(timestampUs, transformMatrix);
         GLES20.glUniform1f(scaleLocation, scale);
-        GlUtils.checkError("glUniform1f");
+        Egloo.checkGlError("glUniform1f");
     }
 }

File: cameraview/src/main/java/com/otaliastudios/cameraview/filters/BrightnessFilter.java
Patch:
@@ -6,7 +6,7 @@
 
 import com.otaliastudios.cameraview.filter.BaseFilter;
 import com.otaliastudios.cameraview.filter.OneParameterFilter;
-import com.otaliastudios.cameraview.internal.GlUtils;
+import com.otaliastudios.opengl.core.Egloo;
 
 /**
  * Adjusts the brightness of the frames.
@@ -76,7 +76,7 @@ public String getFragmentShader() {
     public void onCreate(int programHandle) {
         super.onCreate(programHandle);
         brightnessLocation = GLES20.glGetUniformLocation(programHandle, "brightness");
-        GlUtils.checkLocation(brightnessLocation, "brightness");
+        Egloo.checkGlProgramLocation(brightnessLocation, "brightness");
     }
 
     @Override
@@ -89,6 +89,6 @@ public void onDestroy() {
     protected void onPreDraw(long timestampUs, @NonNull float[] transformMatrix) {
         super.onPreDraw(timestampUs, transformMatrix);
         GLES20.glUniform1f(brightnessLocation, brightness);
-        GlUtils.checkError("glUniform1f");
+        Egloo.checkGlError("glUniform1f");
     }
 }

File: cameraview/src/main/java/com/otaliastudios/cameraview/filters/ContrastFilter.java
Patch:
@@ -6,7 +6,7 @@
 
 import com.otaliastudios.cameraview.filter.BaseFilter;
 import com.otaliastudios.cameraview.filter.OneParameterFilter;
-import com.otaliastudios.cameraview.internal.GlUtils;
+import com.otaliastudios.opengl.core.Egloo;
 
 /**
  * Adjusts the contrast.
@@ -78,7 +78,7 @@ public String getFragmentShader() {
     public void onCreate(int programHandle) {
         super.onCreate(programHandle);
         contrastLocation = GLES20.glGetUniformLocation(programHandle, "contrast");
-        GlUtils.checkLocation(contrastLocation, "contrast");
+        Egloo.checkGlProgramLocation(contrastLocation, "contrast");
     }
 
     @Override
@@ -91,6 +91,6 @@ public void onDestroy() {
     protected void onPreDraw(long timestampUs, @NonNull float[] transformMatrix) {
         super.onPreDraw(timestampUs, transformMatrix);
         GLES20.glUniform1f(contrastLocation, contrast);
-        GlUtils.checkError("glUniform1f");
+        Egloo.checkGlError("glUniform1f");
     }
 }

File: cameraview/src/main/java/com/otaliastudios/cameraview/filters/GammaFilter.java
Patch:
@@ -6,7 +6,7 @@
 
 import com.otaliastudios.cameraview.filter.BaseFilter;
 import com.otaliastudios.cameraview.filter.OneParameterFilter;
-import com.otaliastudios.cameraview.internal.GlUtils;
+import com.otaliastudios.opengl.core.Egloo;
 
 /**
  * Applies gamma correction to the frames.
@@ -73,7 +73,7 @@ public String getFragmentShader() {
     public void onCreate(int programHandle) {
         super.onCreate(programHandle);
         gammaLocation = GLES20.glGetUniformLocation(programHandle, "gamma");
-        GlUtils.checkLocation(gammaLocation, "gamma");
+        Egloo.checkGlProgramLocation(gammaLocation, "gamma");
     }
 
     @Override
@@ -86,6 +86,6 @@ public void onDestroy() {
     protected void onPreDraw(long timestampUs, @NonNull float[] transformMatrix) {
         super.onPreDraw(timestampUs, transformMatrix);
         GLES20.glUniform1f(gammaLocation, gamma);
-        GlUtils.checkError("glUniform1f");
+        Egloo.checkGlError("glUniform1f");
     }
 }
\ No newline at end of file

File: cameraview/src/main/java/com/otaliastudios/cameraview/filters/HueFilter.java
Patch:
@@ -6,7 +6,7 @@
 
 import com.otaliastudios.cameraview.filter.BaseFilter;
 import com.otaliastudios.cameraview.filter.OneParameterFilter;
-import com.otaliastudios.cameraview.internal.GlUtils;
+import com.otaliastudios.opengl.core.Egloo;
 
 /**
  * Applies a hue effect on the input frames.
@@ -86,7 +86,7 @@ public String getFragmentShader() {
     public void onCreate(int programHandle) {
         super.onCreate(programHandle);
         hueLocation = GLES20.glGetUniformLocation(programHandle, "hue");
-        GlUtils.checkLocation(hueLocation, "hue");
+        Egloo.checkGlProgramLocation(hueLocation, "hue");
     }
 
     @Override
@@ -101,6 +101,6 @@ protected void onPreDraw(long timestampUs, @NonNull float[] transformMatrix) {
         // map it on 360 degree circle
         float shaderHue = ((hue - 45) / 45f + 0.5f) * -1;
         GLES20.glUniform1f(hueLocation, shaderHue);
-        GlUtils.checkError("glUniform1f");
+        Egloo.checkGlError("glUniform1f");
     }
 }
\ No newline at end of file

File: cameraview/src/main/java/com/otaliastudios/cameraview/filters/TemperatureFilter.java
Patch:
@@ -6,7 +6,7 @@
 
 import com.otaliastudios.cameraview.filter.BaseFilter;
 import com.otaliastudios.cameraview.filter.OneParameterFilter;
-import com.otaliastudios.cameraview.internal.GlUtils;
+import com.otaliastudios.opengl.core.Egloo;
 
 /**
  * Adjusts color temperature.
@@ -84,7 +84,7 @@ public String getFragmentShader() {
     public void onCreate(int programHandle) {
         super.onCreate(programHandle);
         scaleLocation = GLES20.glGetUniformLocation(programHandle, "scale");
-        GlUtils.checkLocation(scaleLocation, "scale");
+        Egloo.checkGlProgramLocation(scaleLocation, "scale");
     }
 
     @Override
@@ -97,6 +97,6 @@ public void onDestroy() {
     protected void onPreDraw(long timestampUs, @NonNull float[] transformMatrix) {
         super.onPreDraw(timestampUs, transformMatrix);
         GLES20.glUniform1f(scaleLocation, scale);
-        GlUtils.checkError("glUniform1f");
+        Egloo.checkGlError("glUniform1f");
     }
 }

File: cameraview/src/main/java/com/otaliastudios/cameraview/filters/TintFilter.java
Patch:
@@ -8,7 +8,7 @@
 
 import com.otaliastudios.cameraview.filter.BaseFilter;
 import com.otaliastudios.cameraview.filter.OneParameterFilter;
-import com.otaliastudios.cameraview.internal.GlUtils;
+import com.otaliastudios.opengl.core.Egloo;
 
 
 /**
@@ -81,7 +81,7 @@ public String getFragmentShader() {
     public void onCreate(int programHandle) {
         super.onCreate(programHandle);
         tintLocation = GLES20.glGetUniformLocation(programHandle, "tint");
-        GlUtils.checkLocation(tintLocation, "tint");
+        Egloo.checkGlProgramLocation(tintLocation, "tint");
     }
 
     @Override
@@ -99,6 +99,6 @@ protected void onPreDraw(long timestampUs, @NonNull float[] transformMatrix) {
                 Color.blue(tint) / 255f
         };
         GLES20.glUniform3fv(tintLocation, 1, channels, 0);
-        GlUtils.checkError("glUniform3fv");
+        Egloo.checkGlError("glUniform3fv");
     }
 }

File: cameraview/src/main/java/com/otaliastudios/cameraview/internal/CamcorderProfiles.java
Patch:
@@ -1,4 +1,4 @@
-package com.otaliastudios.cameraview.internal.utils;
+package com.otaliastudios.cameraview.internal;
 
 import android.annotation.SuppressLint;
 import android.media.CamcorderProfile;

File: cameraview/src/main/java/com/otaliastudios/cameraview/internal/CropHelper.java
Patch:
@@ -1,4 +1,4 @@
-package com.otaliastudios.cameraview.internal.utils;
+package com.otaliastudios.cameraview.internal;
 
 import android.graphics.Rect;
 

File: cameraview/src/main/java/com/otaliastudios/cameraview/internal/ExifHelper.java
Patch:
@@ -1,4 +1,4 @@
-package com.otaliastudios.cameraview.internal.utils;
+package com.otaliastudios.cameraview.internal;
 
 import androidx.exifinterface.media.ExifInterface;
 

File: cameraview/src/main/java/com/otaliastudios/cameraview/internal/Issue514Workaround.java
Patch:
@@ -6,7 +6,6 @@
 import android.opengl.GLES11Ext;
 import android.opengl.GLES20;
 import android.view.Surface;
-import com.otaliastudios.cameraview.internal.egl.EglViewport;
 import com.otaliastudios.cameraview.preview.RendererThread;
 
 
@@ -84,15 +83,15 @@
  *
  * This makes no sense, since overlaySurfaceTexture.updateTexImage() is setting it to
  * overlayTextureId anyway, but it fixes the issue. Specifically, after any draw operation with
- * {@link EglViewport}, the bound texture is reset to 0 so this must be undone here. We offer:
+ * {@link GlTextureDrawer}, the bound texture is reset to 0 so this must be undone here. We offer:
  *
  * - {@link #beforeOverlayUpdateTexImage()} to be called before the
  *   {@link SurfaceTexture#updateTexImage()} call
  * - {@link #end()} to release and bring things back to normal state
  *
  * Since updating and rendering can happen on different threads with a shared EGL context,
  * in case they do, the {@link #beforeOverlayUpdateTexImage()}, the actual updateTexImage() and
- * finally the {@link EglViewport} drawing operations should be synchronized with a lock.
+ * finally the {@link GlTextureDrawer} drawing operations should be synchronized with a lock.
  *
  * REFERENCES
  * https://github.com/natario1/CameraView/issues/514

File: cameraview/src/main/java/com/otaliastudios/cameraview/internal/OrientationHelper.java
Patch:
@@ -1,4 +1,4 @@
-package com.otaliastudios.cameraview.internal.utils;
+package com.otaliastudios.cameraview.internal;
 
 import android.content.Context;
 import android.hardware.SensorManager;

File: cameraview/src/main/java/com/otaliastudios/cameraview/internal/Pool.java
Patch:
@@ -1,4 +1,4 @@
-package com.otaliastudios.cameraview.internal.utils;
+package com.otaliastudios.cameraview.internal;
 
 import com.otaliastudios.cameraview.CameraLogger;
 

File: cameraview/src/main/java/com/otaliastudios/cameraview/internal/RotationHelper.java
Patch:
@@ -1,4 +1,4 @@
-package com.otaliastudios.cameraview.internal.utils;
+package com.otaliastudios.cameraview.internal;
 
 import com.otaliastudios.cameraview.size.Size;
 

File: cameraview/src/main/java/com/otaliastudios/cameraview/internal/WorkerHandler.java
Patch:
@@ -1,4 +1,4 @@
-package com.otaliastudios.cameraview.internal.utils;
+package com.otaliastudios.cameraview.internal;
 
 import android.os.Handler;
 import android.os.HandlerThread;

File: cameraview/src/main/java/com/otaliastudios/cameraview/picture/Full1PictureRecorder.java
Patch:
@@ -4,10 +4,9 @@
 
 import com.otaliastudios.cameraview.PictureResult;
 import com.otaliastudios.cameraview.engine.Camera1Engine;
-import com.otaliastudios.cameraview.internal.utils.ExifHelper;
+import com.otaliastudios.cameraview.internal.ExifHelper;
 
 import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
 import androidx.exifinterface.media.ExifInterface;
 
 import java.io.ByteArrayInputStream;

File: cameraview/src/main/java/com/otaliastudios/cameraview/picture/Full2PictureRecorder.java
Patch:
@@ -15,8 +15,8 @@
 import com.otaliastudios.cameraview.engine.action.Action;
 import com.otaliastudios.cameraview.engine.action.ActionHolder;
 import com.otaliastudios.cameraview.engine.action.BaseAction;
-import com.otaliastudios.cameraview.internal.utils.ExifHelper;
-import com.otaliastudios.cameraview.internal.utils.WorkerHandler;
+import com.otaliastudios.cameraview.internal.ExifHelper;
+import com.otaliastudios.cameraview.internal.WorkerHandler;
 
 import java.io.BufferedOutputStream;
 import java.io.ByteArrayInputStream;

File: cameraview/src/main/java/com/otaliastudios/cameraview/picture/Snapshot1PictureRecorder.java
Patch:
@@ -7,9 +7,9 @@
 import com.otaliastudios.cameraview.PictureResult;
 import com.otaliastudios.cameraview.engine.Camera1Engine;
 import com.otaliastudios.cameraview.engine.offset.Reference;
-import com.otaliastudios.cameraview.internal.utils.CropHelper;
-import com.otaliastudios.cameraview.internal.utils.RotationHelper;
-import com.otaliastudios.cameraview.internal.utils.WorkerHandler;
+import com.otaliastudios.cameraview.internal.CropHelper;
+import com.otaliastudios.cameraview.internal.RotationHelper;
+import com.otaliastudios.cameraview.internal.WorkerHandler;
 import com.otaliastudios.cameraview.size.AspectRatio;
 import com.otaliastudios.cameraview.size.Size;
 

File: cameraview/src/main/java/com/otaliastudios/cameraview/video/Full1VideoRecorder.java
Patch:
@@ -6,7 +6,7 @@
 
 import com.otaliastudios.cameraview.VideoResult;
 import com.otaliastudios.cameraview.engine.Camera1Engine;
-import com.otaliastudios.cameraview.internal.utils.CamcorderProfiles;
+import com.otaliastudios.cameraview.internal.CamcorderProfiles;
 import com.otaliastudios.cameraview.size.Size;
 
 import androidx.annotation.NonNull;

File: cameraview/src/main/java/com/otaliastudios/cameraview/video/Full2VideoRecorder.java
Patch:
@@ -12,7 +12,7 @@
 import com.otaliastudios.cameraview.engine.action.ActionHolder;
 import com.otaliastudios.cameraview.engine.action.BaseAction;
 import com.otaliastudios.cameraview.engine.action.CompletionCallback;
-import com.otaliastudios.cameraview.internal.utils.CamcorderProfiles;
+import com.otaliastudios.cameraview.internal.CamcorderProfiles;
 import com.otaliastudios.cameraview.size.Size;
 
 import androidx.annotation.NonNull;

File: cameraview/src/main/java/com/otaliastudios/cameraview/video/FullVideoRecorder.java
Patch:
@@ -8,7 +8,7 @@
 import com.otaliastudios.cameraview.controls.Audio;
 import com.otaliastudios.cameraview.controls.VideoCodec;
 import com.otaliastudios.cameraview.internal.DeviceEncoders;
-import com.otaliastudios.cameraview.internal.utils.CamcorderProfiles;
+import com.otaliastudios.cameraview.internal.CamcorderProfiles;
 import com.otaliastudios.cameraview.size.Size;
 
 import androidx.annotation.NonNull;

File: cameraview/src/main/java/com/otaliastudios/cameraview/video/encoding/ByteBufferPool.java
Patch:
@@ -1,6 +1,6 @@
 package com.otaliastudios.cameraview.video.encoding;
 
-import com.otaliastudios.cameraview.internal.utils.Pool;
+import com.otaliastudios.cameraview.internal.Pool;
 
 import java.nio.ByteBuffer;
 

File: cameraview/src/main/java/com/otaliastudios/cameraview/video/encoding/InputBufferPool.java
Patch:
@@ -1,6 +1,6 @@
 package com.otaliastudios.cameraview.video.encoding;
 
-import com.otaliastudios.cameraview.internal.utils.Pool;
+import com.otaliastudios.cameraview.internal.Pool;
 
 /**
  * A simple {@link Pool(int, Factory)} implementation for input buffers.

File: cameraview/src/main/java/com/otaliastudios/cameraview/video/encoding/MediaEncoder.java
Patch:
@@ -11,7 +11,7 @@
 import androidx.annotation.RequiresApi;
 
 import com.otaliastudios.cameraview.CameraLogger;
-import com.otaliastudios.cameraview.internal.utils.WorkerHandler;
+import com.otaliastudios.cameraview.internal.WorkerHandler;
 
 import java.nio.ByteBuffer;
 import java.util.HashMap;

File: cameraview/src/main/java/com/otaliastudios/cameraview/video/encoding/MediaEncoderEngine.java
Patch:
@@ -4,10 +4,9 @@
 import android.media.MediaFormat;
 import android.media.MediaMuxer;
 import android.os.Build;
-import android.text.format.DateFormat;
 
 import com.otaliastudios.cameraview.CameraLogger;
-import com.otaliastudios.cameraview.internal.utils.WorkerHandler;
+import com.otaliastudios.cameraview.internal.WorkerHandler;
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;

File: cameraview/src/main/java/com/otaliastudios/cameraview/video/encoding/OutputBufferPool.java
Patch:
@@ -3,7 +3,7 @@
 import android.media.MediaCodec;
 import android.os.Build;
 
-import com.otaliastudios.cameraview.internal.utils.Pool;
+import com.otaliastudios.cameraview.internal.Pool;
 
 import androidx.annotation.RequiresApi;
 

File: cameraview/src/test/java/com/otaliastudios/cameraview/internal/ExifHelperTest.java
Patch:
@@ -1,8 +1,10 @@
-package com.otaliastudios.cameraview.internal.utils;
+package com.otaliastudios.cameraview.internal;
 
 
 import androidx.exifinterface.media.ExifInterface;
 
+import com.otaliastudios.cameraview.internal.ExifHelper;
+
 import org.junit.Test;
 
 import static junit.framework.Assert.assertNotNull;

File: cameraview/src/test/java/com/otaliastudios/cameraview/internal/PoolTest.java
Patch:
@@ -1,6 +1,8 @@
-package com.otaliastudios.cameraview.internal.utils;
+package com.otaliastudios.cameraview.internal;
 
 
+import com.otaliastudios.cameraview.internal.Pool;
+
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

File: demo/src/main/java/com/otaliastudios/cameraview/demo/CameraActivity.java
Patch:
@@ -48,7 +48,7 @@ public class CameraActivity extends AppCompatActivity implements View.OnClickLis
 
     private final static CameraLogger LOG = CameraLogger.create("DemoApp");
     private final static boolean USE_FRAME_PROCESSOR = true;
-    private final static boolean DECODE_BITMAP = true;
+    private final static boolean DECODE_BITMAP = false;
 
     private CameraView camera;
     private ViewGroup controlPanel;
@@ -76,7 +76,7 @@ public void process(@NonNull Frame frame) {
                     long newTime = frame.getTime();
                     long delay = newTime - lastTime;
                     lastTime = newTime;
-                    LOG.e("Frame delayMillis:", delay, "FPS:", 1000 / delay);
+                    LOG.v("Frame delayMillis:", delay, "FPS:", 1000 / delay);
                     if (DECODE_BITMAP) {
                         if (frame.getFormat() == ImageFormat.NV21
                                 && frame.getDataClass() == byte[].class) {

File: cameraview/src/main/java/com/otaliastudios/cameraview/engine/CameraEngine.java
Patch:
@@ -690,6 +690,8 @@ public abstract void setExposureCorrection(float EVvalue, @NonNull float[] bound
     public abstract void setPictureFormat(@NonNull PictureFormat pictureFormat);
     @NonNull public abstract PictureFormat getPictureFormat();
 
+    public abstract void setPreviewFrameRateExact(boolean previewFrameRateExact);
+    public abstract boolean getPreviewFrameRateExact();
     public abstract void setPreviewFrameRate(float previewFrameRate);
     public abstract float getPreviewFrameRate();
 

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/engine/Camera2IntegrationTest.java
Patch:
@@ -36,7 +36,7 @@ protected Engine getEngine() {
         return Engine.CAMERA2;
     }
 
-    @Override
+    /* @Override
     protected void onOpenSync() {
         super.onOpenSync();
         // Extra wait for the first frame to be dispatched.
@@ -54,7 +54,7 @@ public void onCaptureCompleted(@NonNull ActionHolder holder,
             }
         }.start(controller);
         try { latch.await(); } catch (InterruptedException ignore) {}
-    }
+    } */
 
     @Override
     protected long getMeteringTimeoutMillis() {

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/engine/MockCameraEngine.java
Patch:
@@ -195,8 +195,8 @@ public void startAutoFocus(@Nullable Gesture gesture, @NonNull PointF point) {
 
     @NonNull
     @Override
-    protected FrameManager instantiateFrameManager() {
-        return new ByteBufferFrameManager(2, null);
+    protected FrameManager instantiateFrameManager(int poolSize) {
+        return new ByteBufferFrameManager(poolSize, null);
     }
 
     @Override

File: cameraview/src/main/java/com/otaliastudios/cameraview/engine/CameraEngine.java
Patch:
@@ -650,6 +650,9 @@ public final void onSurfaceDestroyed() {
     public abstract void setFrameProcessingFormat(int format);
     public abstract int getFrameProcessingFormat();
 
+    public abstract void setFrameProcessingPoolSize(int poolSize);
+    public abstract int getFrameProcessingPoolSize();
+
     public abstract void setAutoFocusResetDelay(long delayMillis);
     public abstract long getAutoFocusResetDelay();
 

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/CameraLoggerTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.otaliastudios.cameraview;
 
 
-import com.otaliastudios.cameraview.internal.utils.Op;
+import com.otaliastudios.cameraview.tools.Op;
 
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import androidx.test.filters.SmallTest;
@@ -109,7 +109,7 @@ public void testThrowable() {
         CameraLogger.Logger mock = mock(CameraLogger.Logger.class);
         CameraLogger.registerLogger(mock);
 
-        final Op<Throwable> op = new Op<>();
+        final Op<Throwable> op = new Op<>(false);
         doEndOp(op, 3)
                 .when(mock)
                 .log(anyInt(), anyString(), anyString(), any(Throwable.class));

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/CameraViewCallbacksTest.java
Patch:
@@ -17,7 +17,7 @@
 import com.otaliastudios.cameraview.frame.FrameProcessor;
 import com.otaliastudios.cameraview.gesture.Gesture;
 import com.otaliastudios.cameraview.gesture.GestureAction;
-import com.otaliastudios.cameraview.internal.utils.Op;
+import com.otaliastudios.cameraview.tools.Op;
 import com.otaliastudios.cameraview.engine.MockCameraEngine;
 import com.otaliastudios.cameraview.markers.AutoFocusMarker;
 import com.otaliastudios.cameraview.markers.AutoFocusTrigger;
@@ -90,7 +90,7 @@ protected boolean checkPermissions(@NonNull Audio audio) {
                 camera.doInstantiatePreview();
                 camera.addCameraListener(listener);
                 camera.addFrameProcessor(processor);
-                op = new Op<>(true);
+                op = new Op<>();
             }
         });
     }

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/engine/Camera1IntegrationTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.otaliastudios.cameraview.controls.Engine;
 
+import org.junit.Test;
 import org.junit.runner.RunWith;
 
 import androidx.annotation.NonNull;

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/gesture/GestureFinderTest.java
Patch:
@@ -15,7 +15,7 @@
 
 import com.otaliastudios.cameraview.BaseTest;
 import com.otaliastudios.cameraview.TestActivity;
-import com.otaliastudios.cameraview.internal.utils.Op;
+import com.otaliastudios.cameraview.tools.Op;
 
 import org.hamcrest.Matchers;
 import org.junit.Before;
@@ -49,12 +49,12 @@ public void run() {
                 finder.setActive(true);
                 a.inflate(layout);
 
-                touchOp = new Op<>();
+                touchOp = new Op<>(false);
                 layout.setOnTouchListener(new View.OnTouchListener() {
                     @Override
                     public boolean onTouch(View view, MotionEvent motionEvent) {
                         boolean found = finder.onTouchEvent(motionEvent);
-                        if (found) touchOp.end(finder.getGesture());
+                        if (found) touchOp.controller().end(finder.getGesture());
                         return true;
                     }
                 });

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/gesture/PinchGestureFinderTest.java
Patch:
@@ -6,7 +6,7 @@
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import androidx.test.filters.SmallTest;
 
-import com.otaliastudios.cameraview.runner.SdkExclude;
+import com.otaliastudios.cameraview.tools.SdkExclude;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -52,7 +52,7 @@ public abstract class PinchViewAction implements ViewAction {
 
     private void testPinch(ViewAction action, boolean increasing) {
         touchOp.listen();
-        touchOp.start();
+        touchOp.controller().start();
         onLayout().perform(action);
         Gesture found = touchOp.await(10000);
         assertNotNull(found);

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/gesture/ScrollGestureFinderTest.java
Patch:
@@ -6,7 +6,7 @@
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import androidx.test.filters.SmallTest;
 
-import com.otaliastudios.cameraview.runner.SdkExclude;
+import com.otaliastudios.cameraview.tools.SdkExclude;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -49,15 +49,15 @@ public void testDefaults() {
     public void testScrollDisabled() {
         finder.setActive(false);
         touchOp.listen();
-        touchOp.start();
+        touchOp.controller().start();
         onLayout().perform(swipeUp());
         Gesture found = touchOp.await(WAIT);
         assertNull(found);
     }
 
     private void testScroll(ViewAction scroll, Gesture expected, boolean increasing) {
         touchOp.listen();
-        touchOp.start();
+        touchOp.controller().start();
         onLayout().perform(scroll);
         Gesture found = touchOp.await(WAIT);
         assertEquals(found, expected);

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/internal/utils/CamcorderProfilesTest.java
Patch:
@@ -8,7 +8,7 @@
 
 import com.otaliastudios.cameraview.BaseTest;
 import com.otaliastudios.cameraview.CameraUtils;
-import com.otaliastudios.cameraview.runner.SdkExclude;
+import com.otaliastudios.cameraview.tools.SdkExclude;
 import com.otaliastudios.cameraview.size.Size;
 
 import org.junit.Test;

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/markers/MarkerLayoutTest.java
Patch:
@@ -9,7 +9,7 @@
 
 import com.otaliastudios.cameraview.BaseTest;
 import com.otaliastudios.cameraview.TestActivity;
-import com.otaliastudios.cameraview.runner.SdkExclude;
+import com.otaliastudios.cameraview.tools.SdkExclude;
 
 import org.junit.Assert;
 import org.junit.Before;

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/tools/SdkExclude.java
Patch:
@@ -1,4 +1,4 @@
-package com.otaliastudios.cameraview.runner;
+package com.otaliastudios.cameraview.tools;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/tools/SdkExcludeFilter.java
Patch:
@@ -1,4 +1,4 @@
-package com.otaliastudios.cameraview.runner;
+package com.otaliastudios.cameraview.tools;
 
 
 import android.os.Build;

File: cameraview/src/main/java/com/otaliastudios/cameraview/engine/action/BaseAction.java
Patch:
@@ -39,6 +39,7 @@ public final int getState() {
 
     @Override
     public final void start(@NonNull ActionHolder holder) {
+        this.holder = holder;
         holder.addAction(this);
         if (holder.getLastResult(this) != null) {
             onStart(holder);
@@ -64,6 +65,8 @@ public final void abort(@NonNull ActionHolder holder) {
      */
     @CallSuper
     protected void onStart(@NonNull ActionHolder holder) {
+        // Repeating holder assignment here (already in start()) because we NEED it in start()
+        // but some special actions will not call start() at all for their children.
         this.holder = holder;
         // Overrideable
     }

File: cameraview/src/main/java/com/otaliastudios/cameraview/engine/action/LogAction.java
Patch:
@@ -1,4 +1,4 @@
-package com.otaliastudios.cameraview.engine;
+package com.otaliastudios.cameraview.engine.action;
 
 import android.hardware.camera2.CaptureRequest;
 import android.hardware.camera2.CaptureResult;
@@ -9,11 +9,12 @@
 import androidx.annotation.RequiresApi;
 
 import com.otaliastudios.cameraview.CameraLogger;
+import com.otaliastudios.cameraview.engine.Camera2Engine;
 import com.otaliastudios.cameraview.engine.action.ActionHolder;
 import com.otaliastudios.cameraview.engine.action.BaseAction;
 
 @RequiresApi(Build.VERSION_CODES.LOLLIPOP)
-class LogAction extends BaseAction {
+public class LogAction extends BaseAction {
 
     private final static CameraLogger LOG
             = CameraLogger.create(Camera2Engine.class.getSimpleName());

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/PictureResultTest.java
Patch:
@@ -4,6 +4,7 @@
 import android.location.Location;
 
 import com.otaliastudios.cameraview.controls.Facing;
+import com.otaliastudios.cameraview.controls.PictureFormat;
 import com.otaliastudios.cameraview.size.Size;
 
 import androidx.test.ext.junit.runners.AndroidJUnit4;
@@ -24,7 +25,7 @@ public class PictureResultTest extends BaseTest {
 
     @Test
     public void testResult() {
-        int format = PictureResult.FORMAT_JPEG;
+        PictureFormat format = PictureFormat.JPEG;
         int rotation = 90;
         Size size = new Size(20, 120);
         byte[] jpeg = new byte[]{2, 4, 1, 5, 2};

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/engine/Camera1IntegrationTest.java
Patch:
@@ -3,8 +3,6 @@
 import com.otaliastudios.cameraview.DoNotRunOnTravis;
 import com.otaliastudios.cameraview.controls.Engine;
 
-import org.junit.Ignore;
-import org.junit.Test;
 import org.junit.runner.RunWith;
 
 import androidx.annotation.NonNull;
@@ -20,7 +18,7 @@
 @RunWith(AndroidJUnit4.class)
 @LargeTest
 @DoNotRunOnTravis(because = "These do work but fail on CI emulators, due to bugs in the Camera1 emulated devices.")
-public class CameraIntegration1Test extends CameraIntegrationTest {
+public class Camera1IntegrationTest extends CameraIntegrationTest {
 
     @NonNull
     @Override

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/engine/Camera2IntegrationTest.java
Patch:
@@ -8,7 +8,6 @@
 import com.otaliastudios.cameraview.engine.action.ActionHolder;
 import com.otaliastudios.cameraview.engine.action.BaseAction;
 
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
@@ -27,7 +26,7 @@
 @RunWith(AndroidJUnit4.class)
 @LargeTest
 @DoNotRunOnTravis(because = "These do work but fail on CI emulators.")
-public class CameraIntegration2Test extends CameraIntegrationTest {
+public class Camera2IntegrationTest extends CameraIntegrationTest {
 
     @NonNull
     @Override

File: cameraview/src/main/java/com/otaliastudios/cameraview/CameraUtils.java
Patch:
@@ -284,7 +284,7 @@ private static Bitmap decodeBitmap(@NonNull byte[] source,
                 ExifInterface exif = new ExifInterface(stream);
                 int exifOrientation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,
                         ExifInterface.ORIENTATION_NORMAL);
-                orientation = ExifHelper.readExifOrientation(exifOrientation);
+                orientation = ExifHelper.getOrientation(exifOrientation);
                 flip = exifOrientation == ExifInterface.ORIENTATION_FLIP_HORIZONTAL ||
                         exifOrientation == ExifInterface.ORIENTATION_FLIP_VERTICAL ||
                         exifOrientation == ExifInterface.ORIENTATION_TRANSPOSE ||

File: cameraview/src/main/java/com/otaliastudios/cameraview/picture/Full1PictureRecorder.java
Patch:
@@ -57,11 +57,10 @@ public void onPictureTaken(byte[] data, final Camera camera) {
                             int exifOrientation = exif.getAttributeInt(
                                     ExifInterface.TAG_ORIENTATION,
                                     ExifInterface.ORIENTATION_NORMAL);
-                            exifRotation = ExifHelper.readExifOrientation(exifOrientation);
+                            exifRotation = ExifHelper.getOrientation(exifOrientation);
                         } catch (IOException e) {
                             exifRotation = 0;
                         }
-                        mResult.format = PictureResult.FORMAT_JPEG;
                         mResult.data = data;
                         mResult.rotation = exifRotation;
                         camera.startPreview(); // This is needed, read somewhere in the docs.

File: cameraview/src/main/java/com/otaliastudios/cameraview/picture/Snapshot1PictureRecorder.java
Patch:
@@ -81,7 +81,6 @@ public void run() {
                         mResult.data = data;
                         mResult.size = new Size(outputRect.width(), outputRect.height());
                         mResult.rotation = 0;
-                        mResult.format = PictureResult.FORMAT_JPEG;
                         dispatchResult();
                     }
                 });

File: cameraview/src/main/java/com/otaliastudios/cameraview/picture/SnapshotGlPictureRecorder.java
Patch:
@@ -238,7 +238,6 @@ protected void takeFrame(@NonNull SurfaceTexture surfaceTexture,
         LOG.i("takeFrame:", "timestampUs:", timestampUs);
         mViewport.drawFrame(timestampUs, mTextureId, mTransform);
         if (mHasOverlay) mOverlayDrawer.render(timestampUs);
-        mResult.format = PictureResult.FORMAT_JPEG;
         mResult.data = eglSurface.saveFrameTo(Bitmap.CompressFormat.JPEG);
 
         // 6. Cleanup

File: demo/src/main/java/com/otaliastudios/cameraview/demo/CameraActivity.java
Patch:
@@ -115,6 +115,7 @@ public void process(@NonNull Frame frame) {
                 // Some controls
                 new Option.Flash(), new Option.WhiteBalance(), new Option.Hdr(),
                 new Option.PictureMetering(), new Option.PictureSnapshotMetering(),
+                new Option.PictureFormat(),
                 // Video recording
                 new Option.PreviewFrameRate(), new Option.VideoCodec(), new Option.Audio(),
                 // Gestures
@@ -133,7 +134,7 @@ public void process(@NonNull Frame frame) {
                 // Engine and preview
                 false, false, true,
                 // Some controls
-                false, false, false, false, true,
+                false, false, false, false, false, true,
                 // Video recording
                 false, false, true,
                 // Gestures

File: cameraview/src/main/java/com/otaliastudios/cameraview/engine/LogAction.java
Patch:
@@ -36,7 +36,7 @@ public void onCaptureCompleted(@NonNull ActionHolder holder,
                 " afState: " + afState + " afTriggerState: " + afTriggerState;
         if (!log.equals(lastLog)) {
             lastLog = log;
-            LOG.i(log);
+            LOG.v(log);
         }
     }
 

File: cameraview/src/main/java/com/otaliastudios/cameraview/engine/action/ActionHolder.java
Patch:
@@ -8,6 +8,7 @@
 import android.os.Build;
 
 import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 import androidx.annotation.RequiresApi;
 
 /**
@@ -51,7 +52,7 @@ public interface ActionHolder {
      * @param action action
      * @return last result
      */
-    @NonNull
+    @Nullable
     TotalCaptureResult getLastResult(@NonNull Action action);
 
     /**

File: cameraview/src/main/java/com/otaliastudios/cameraview/engine/meter/ExposureReset.java
Patch:
@@ -37,8 +37,9 @@ protected void onStarted(@NonNull ActionHolder holder, @Nullable MeteringRectang
         }
 
         // NOTE: precapture might not be supported, in which case I think it will be ignored.
-        Integer trigger = holder.getLastResult(this)
-                .get(CaptureResult.CONTROL_AE_PRECAPTURE_TRIGGER);
+        CaptureResult lastResult = holder.getLastResult(this);
+        Integer trigger = lastResult == null ? null
+                : lastResult.get(CaptureResult.CONTROL_AE_PRECAPTURE_TRIGGER);
         LOG.i("onStarted:", "last precapture trigger is", trigger);
         if (trigger != null && trigger == CaptureRequest.CONTROL_AE_PRECAPTURE_TRIGGER_START) {
             LOG.i("onStarted:", "canceling precapture.");

File: cameraview/src/main/java/com/otaliastudios/cameraview/engine/meter/FocusReset.java
Patch:
@@ -36,7 +36,9 @@ protected void onStarted(@NonNull ActionHolder holder, @Nullable MeteringRectang
         }
 
         // NOTE: trigger might not be supported, in which case I think it will be ignored.
-        Integer trigger = holder.getLastResult(this).get(CaptureResult.CONTROL_AF_TRIGGER);
+        CaptureResult lastResult = holder.getLastResult(this);
+        Integer trigger = lastResult == null ? null
+                : lastResult.get(CaptureResult.CONTROL_AF_TRIGGER);
         LOG.w("onStarted:", "last focus trigger is", trigger);
         if (trigger != null && trigger == CaptureRequest.CONTROL_AE_PRECAPTURE_TRIGGER_START) {
             holder.getBuilder(this).set(CaptureRequest.CONTROL_AF_TRIGGER,

File: demo/src/main/java/com/otaliastudios/cameraview/demo/CameraActivity.java
Patch:
@@ -351,9 +351,11 @@ private void changeCurrentFilter() {
             mCurrentFilter = 0;
         }
         Filters filter = mAllFilters[mCurrentFilter];
-        camera.setFilter(filter.newInstance());
         message(filter.toString(), false);
 
+        // Normal behavior:
+        camera.setFilter(filter.newInstance());
+
         // To test MultiFilter:
         // DuotoneFilter duotone = new DuotoneFilter();
         // duotone.setFirstColor(Color.RED);

File: cameraview/src/main/java/com/otaliastudios/cameraview/overlay/OverlayLayout.java
Patch:
@@ -127,7 +127,7 @@ public void drawOn(@NonNull Target target, @NonNull Canvas canvas) {
                     // to apply some scale (typically > 1).
                     float widthScale = canvas.getWidth() / (float) getWidth();
                     float heightScale = canvas.getHeight() / (float) getHeight();
-                    LOG.i("draw",
+                    LOG.v("draw",
                             "target:", target,
                             "canvas:", canvas.getWidth() + "x" + canvas.getHeight(),
                             "view:", getWidth() + "x" + getHeight(),

File: cameraview/src/main/java/com/otaliastudios/cameraview/video/SnapshotVideoRecorder.java
Patch:
@@ -241,7 +241,9 @@ public void onRendererFrame(@NonNull SurfaceTexture surfaceTexture,
 
     @Override
     public void onEncodingStart() {
-        //do nothing
+        // This would be the most correct place to call dispatchVideoRecordingStart. However,
+        // after this we'll post the call on the UI thread which can take some time. To compensate
+        // this, we call dispatchVideoRecordingStart() a bit earlier in this class (onStart()).
     }
 
     @Override

File: cameraview/src/main/java/com/otaliastudios/cameraview/video/encoding/MediaEncoder.java
Patch:
@@ -397,7 +397,7 @@ protected void encodeInputBuffer(InputBuffer buffer) {
     @SuppressLint("LogNotTimber")
     @SuppressWarnings("WeakerAccess")
     protected final void drainOutput(boolean drainAll) {
-        LOG.i(mName, "DRAINING - EOS:", drainAll);
+        LOG.v(mName, "DRAINING - EOS:", drainAll);
         if (mMediaCodec == null) {
             LOG.e("drain() was called before prepare() or after releasing.");
             return;
@@ -459,7 +459,7 @@ protected final void drainOutput(boolean drainAll) {
                             + mLastTimeUs - mFirstTimeUs;
 
                     // Write.
-                    LOG.i(mName, "DRAINING - About to write(). Adjusted presentation:",
+                    LOG.v(mName, "DRAINING - About to write(). Adjusted presentation:",
                             mBufferInfo.presentationTimeUs);
                     OutputBuffer buffer = mOutputBufferPool.get();
                     //noinspection ConstantConditions

File: cameraview/src/main/java/com/otaliastudios/cameraview/video/encoding/MediaEncoderEngine.java
Patch:
@@ -186,7 +186,7 @@ public final void start() {
      */
     @SuppressWarnings("SameParameterValue")
     public final void notify(final String event, final Object data) {
-        LOG.i("Passing event to encoders:", event);
+        LOG.v("Passing event to encoders:", event);
         for (MediaEncoder encoder : mEncoders) {
             encoder.notify(event, data);
         }

File: cameraview/src/main/java/com/otaliastudios/cameraview/video/encoding/TextureMediaEncoder.java
Patch:
@@ -124,7 +124,7 @@ protected boolean shouldRenderFrame(long timestampUs) {
             // Always render the first few frames, or muxer fails.
             return true;
         } else if (getPendingEvents(FRAME_EVENT) > 2) {
-            LOG.w("shouldRenderFrame - Dropping, we already have too many pending events:",
+            LOG.v("shouldRenderFrame - Dropping, we already have too many pending events:",
                     getPendingEvents(FRAME_EVENT));
             return false;
         } else {
@@ -177,14 +177,14 @@ private void onFrame(@NonNull Frame frame) {
         }
 
         // First, drain any previous data.
-        LOG.i("onEvent -",
+        LOG.v("onEvent -",
                 "frameNumber:", mFrameNumber,
                 "timestampUs:", frame.timestampUs(),
                 "- draining.");
         drainOutput(false);
 
         // Then draw on the surface.
-        LOG.i("onEvent -",
+        LOG.v("onEvent -",
                 "frameNumber:", mFrameNumber,
                 "timestampUs:", frame.timestampUs(),
                 "- rendering.");

File: cameraview/src/main/java/com/otaliastudios/cameraview/engine/Camera1Engine.java
Patch:
@@ -154,8 +154,8 @@ protected Task<Void> onStartEngine() {
         // Set parameters that might have been set before the camera was opened.
         LOG.i("onStartEngine:", "Applying default parameters.");
         Camera.Parameters params = mCamera.getParameters();
-        mCameraOptions = new CameraOptions(params, getAngles()
-                .flip(Reference.SENSOR, Reference.VIEW));
+        mCameraOptions = new CameraOptions(params, mCameraId,
+                getAngles().flip(Reference.SENSOR, Reference.VIEW));
         applyAllParameters(params);
         mCamera.setParameters(params);
         mCamera.setDisplayOrientation(getAngles().offset(Reference.SENSOR, Reference.VIEW,

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/overlay/OverlayDrawerTest.java
Patch:
@@ -81,8 +81,9 @@ public void testRender() {
         OverlayDrawer drawer = new OverlayDrawer(mock(Overlay.class), new Size(WIDTH, HEIGHT));
         drawer.mViewport = spy(drawer.mViewport);
         drawer.draw(Overlay.Target.PICTURE_SNAPSHOT);
-        drawer.render();
+        drawer.render(0L);
         verify(drawer.mViewport, times(1)).drawFrame(
+                0L,
                 drawer.mTextureId,
                 drawer.getTransform()
         );

File: cameraview/src/main/java/com/otaliastudios/cameraview/BitmapCallback.java
Patch:
@@ -10,7 +10,7 @@
 public interface BitmapCallback {
 
     /**
-     * Notifies that the bitmap was succesfully decoded.
+     * Notifies that the bitmap was successfully decoded.
      * This is run on the UI thread.
      * Returns a null object if a {@link OutOfMemoryError} was encountered.
      *

File: cameraview/src/main/java/com/otaliastudios/cameraview/PictureResult.java
Patch:
@@ -137,7 +137,8 @@ public int getFormat() {
      * @param callback a callback to be notified of image decoding
      */
     public void toBitmap(int maxWidth, int maxHeight, @NonNull BitmapCallback callback) {
-        CameraUtils.decodeBitmap(getData(), maxWidth, maxHeight, new BitmapFactory.Options(), rotation, callback);
+        CameraUtils.decodeBitmap(getData(), maxWidth, maxHeight, new BitmapFactory.Options(),
+                rotation, callback);
     }
 
     /**

File: cameraview/src/main/java/com/otaliastudios/cameraview/VideoResult.java
Patch:
@@ -185,7 +185,8 @@ public Audio getAudio() {
 
     /**
      * Returns the reason why the recording was stopped.
-     * @return one of {@link #REASON_USER}, {@link #REASON_MAX_DURATION_REACHED} or {@link #REASON_MAX_SIZE_REACHED}.
+     * @return one of {@link #REASON_USER}, {@link #REASON_MAX_DURATION_REACHED}
+     *         or {@link #REASON_MAX_SIZE_REACHED}.
      */
     public int getTerminationReason() {
         return endReason;

File: cameraview/src/main/java/com/otaliastudios/cameraview/engine/action/ActionHolder.java
Patch:
@@ -77,5 +77,6 @@ public interface ActionHolder {
      * @param builder builder
      * @throws CameraAccessException camera exception
      */
-    void applyBuilder(@NonNull Action source, @NonNull CaptureRequest.Builder builder) throws CameraAccessException;
+    void applyBuilder(@NonNull Action source, @NonNull CaptureRequest.Builder builder)
+            throws CameraAccessException;
 }

File: cameraview/src/main/java/com/otaliastudios/cameraview/engine/meter/BaseReset.java
Patch:
@@ -29,7 +29,8 @@ protected final void onStart(@NonNull ActionHolder holder) {
         super.onStart(holder);
         MeteringRectangle area = null;
         if (resetArea) {
-            Rect rect = readCharacteristic(CameraCharacteristics.SENSOR_INFO_ACTIVE_ARRAY_SIZE, new Rect());
+            Rect rect = readCharacteristic(CameraCharacteristics.SENSOR_INFO_ACTIVE_ARRAY_SIZE,
+                    new Rect());
             area = new MeteringRectangle(rect, MeteringRectangle.METERING_WEIGHT_DONT_CARE);
         }
         onStarted(holder, area);

File: cameraview/src/main/java/com/otaliastudios/cameraview/engine/meter/FocusMeter.java
Patch:
@@ -53,7 +53,8 @@ protected void onStarted(@NonNull ActionHolder holder, @NonNull List<MeteringRec
         LOG.i("onStarted:", "with areas:", areas);
         holder.getBuilder(this).set(CaptureRequest.CONTROL_AF_TRIGGER,
                 CaptureRequest.CONTROL_AF_TRIGGER_START);
-        int maxRegions = readCharacteristic(CameraCharacteristics.CONTROL_MAX_REGIONS_AF, 0);
+        int maxRegions = readCharacteristic(CameraCharacteristics.CONTROL_MAX_REGIONS_AF,
+                0);
         if (!areas.isEmpty() && maxRegions > 0) {
             int max = Math.min(maxRegions, areas.size());
             holder.getBuilder(this).set(CaptureRequest.CONTROL_AF_REGIONS,

File: cameraview/src/main/java/com/otaliastudios/cameraview/engine/meter/FocusReset.java
Patch:
@@ -27,7 +27,8 @@ public FocusReset() {
     @Override
     protected void onStarted(@NonNull ActionHolder holder, @Nullable MeteringRectangle area) {
         boolean changed = false;
-        int maxRegions = readCharacteristic(CameraCharacteristics.CONTROL_MAX_REGIONS_AF, 0);
+        int maxRegions = readCharacteristic(CameraCharacteristics.CONTROL_MAX_REGIONS_AF,
+                0);
         if (area != null && maxRegions > 0) {
             holder.getBuilder(this).set(CaptureRequest.CONTROL_AF_REGIONS,
                     new MeteringRectangle[]{area});

File: cameraview/src/main/java/com/otaliastudios/cameraview/engine/offset/Axis.java
Patch:
@@ -21,7 +21,7 @@ public enum Axis {
      * This rotation axis takes into account the current
      * {@link com.otaliastudios.cameraview.controls.Facing} value.
      *
-     * - for {@link com.otaliastudios.cameraview.controls.Facing#BACK}, this equals {@link #ABSOLUTE}
+     * - for {@link com.otaliastudios.cameraview.controls.Facing#BACK}, this is {@link #ABSOLUTE}
      * - for {@link com.otaliastudios.cameraview.controls.Facing#FRONT}, this is inverted
      */
     RELATIVE_TO_SENSOR

File: cameraview/src/main/java/com/otaliastudios/cameraview/filter/Filter.java
Patch:
@@ -67,9 +67,10 @@ public interface Filter {
      * Called to render the actual texture. The given transformation matrix
      * should be applied.
      *
+     * @param timestampUs timestamp in microseconds
      * @param transformMatrix matrix
      */
-    void draw(float[] transformMatrix);
+    void draw(long timestampUs, float[] transformMatrix);
 
     /**
      * Called anytime the output size changes.

File: cameraview/src/main/java/com/otaliastudios/cameraview/filters/BlackAndWhiteFilter.java
Patch:
@@ -11,9 +11,9 @@ public class BlackAndWhiteFilter extends BaseFilter {
 
     private final static String FRAGMENT_SHADER = "#extension GL_OES_EGL_image_external : require\n"
             + "precision mediump float;\n"
-            + "varying vec2 vTextureCoord;\n"
+            + "varying vec2 "+DEFAULT_FRAGMENT_TEXTURE_COORDINATE_NAME+";\n"
             + "uniform samplerExternalOES sTexture;\n" + "void main() {\n"
-            + "  vec4 color = texture2D(sTexture, vTextureCoord);\n"
+            + "  vec4 color = texture2D(sTexture, "+DEFAULT_FRAGMENT_TEXTURE_COORDINATE_NAME+");\n"
             + "  float colorR = (color.r + color.g + color.b) / 3.0;\n"
             + "  float colorG = (color.r + color.g + color.b) / 3.0;\n"
             + "  float colorB = (color.r + color.g + color.b) / 3.0;\n"

File: cameraview/src/main/java/com/otaliastudios/cameraview/filters/CrossProcessFilter.java
Patch:
@@ -13,9 +13,9 @@ public class CrossProcessFilter extends BaseFilter {
     private final static String FRAGMENT_SHADER = "#extension GL_OES_EGL_image_external : require\n"
             + "precision mediump float;\n"
             + "uniform samplerExternalOES sTexture;\n"
-            + "varying vec2 vTextureCoord;\n"
+            + "varying vec2 "+DEFAULT_FRAGMENT_TEXTURE_COORDINATE_NAME+";\n"
             + "void main() {\n"
-            + "  vec4 color = texture2D(sTexture, vTextureCoord);\n"
+            + "  vec4 color = texture2D(sTexture, "+DEFAULT_FRAGMENT_TEXTURE_COORDINATE_NAME+");\n"
             + "  vec3 ncolor = vec3(0.0, 0.0, 0.0);\n"
             + "  float value;\n"
             + "  if (color.r < 0.5) {\n"

File: cameraview/src/main/java/com/otaliastudios/cameraview/filters/GrayscaleFilter.java
Patch:
@@ -12,9 +12,9 @@ public class GrayscaleFilter extends BaseFilter {
     private final static String FRAGMENT_SHADER = "#extension GL_OES_EGL_image_external : require\n"
             + "precision mediump float;\n"
             + "uniform samplerExternalOES sTexture;\n"
-            + "varying vec2 vTextureCoord;\n"
+            + "varying vec2 "+DEFAULT_FRAGMENT_TEXTURE_COORDINATE_NAME+";\n"
             + "void main() {\n"
-            + "  vec4 color = texture2D(sTexture, vTextureCoord);\n"
+            + "  vec4 color = texture2D(sTexture, "+DEFAULT_FRAGMENT_TEXTURE_COORDINATE_NAME+");\n"
             + "  float y = dot(color, vec4(0.299, 0.587, 0.114, 0));\n"
             + "  gl_FragColor = vec4(y, y, y, color.a);\n"
             + "}\n";

File: cameraview/src/main/java/com/otaliastudios/cameraview/filters/InvertColorsFilter.java
Patch:
@@ -11,10 +11,10 @@ public class InvertColorsFilter extends BaseFilter {
 
     private final static String FRAGMENT_SHADER = "#extension GL_OES_EGL_image_external : require\n"
             + "precision mediump float;\n"
-            + "varying vec2 vTextureCoord;\n"
+            + "varying vec2 "+DEFAULT_FRAGMENT_TEXTURE_COORDINATE_NAME+";\n"
             + "uniform samplerExternalOES sTexture;\n"
             + "void main() {\n"
-            + "  vec4 color = texture2D(sTexture, vTextureCoord);\n"
+            + "  vec4 color = texture2D(sTexture, "+DEFAULT_FRAGMENT_TEXTURE_COORDINATE_NAME+");\n"
             + "  float colorR = (1.0 - color.r) / 1.0;\n"
             + "  float colorG = (1.0 - color.g) / 1.0;\n"
             + "  float colorB = (1.0 - color.b) / 1.0;\n"

File: cameraview/src/main/java/com/otaliastudios/cameraview/filters/PosterizeFilter.java
Patch:
@@ -12,8 +12,8 @@ public class PosterizeFilter extends BaseFilter {
     private final static String FRAGMENT_SHADER = "#extension GL_OES_EGL_image_external : require\n"
             + "precision mediump float;\n"
             + "uniform samplerExternalOES sTexture;\n"
-            + "varying vec2 vTextureCoord;\n" + "void main() {\n"
-            + "  vec4 color = texture2D(sTexture, vTextureCoord);\n"
+            + "varying vec2 "+DEFAULT_FRAGMENT_TEXTURE_COORDINATE_NAME+";\n" + "void main() {\n"
+            + "  vec4 color = texture2D(sTexture, "+DEFAULT_FRAGMENT_TEXTURE_COORDINATE_NAME+");\n"
             + "  vec3 pcolor;\n"
             + "  pcolor.r = (color.r >= 0.5) ? 0.75 : 0.25;\n"
             + "  pcolor.g = (color.g >= 0.5) ? 0.75 : 0.25;\n"

File: cameraview/src/main/java/com/otaliastudios/cameraview/filters/SepiaFilter.java
Patch:
@@ -13,7 +13,7 @@ public class SepiaFilter extends BaseFilter {
             + "precision mediump float;\n"
             + "uniform samplerExternalOES sTexture;\n"
             + "mat3 matrix;\n"
-            + "varying vec2 vTextureCoord;\n"
+            + "varying vec2 "+DEFAULT_FRAGMENT_TEXTURE_COORDINATE_NAME+";\n"
             + "void main() {\n"
             + "  matrix[0][0]=" + 805.0f / 2048.0f + ";\n"
             + "  matrix[0][1]=" + 715.0f / 2048.0f + ";\n"
@@ -24,7 +24,7 @@ public class SepiaFilter extends BaseFilter {
             + "  matrix[2][0]=" + 387.0f / 2048.0f + ";\n"
             + "  matrix[2][1]=" + 344.0f / 2048.0f + ";\n"
             + "  matrix[2][2]=" + 268.0f / 2048.0f + ";\n"
-            + "  vec4 color = texture2D(sTexture, vTextureCoord);\n"
+            + "  vec4 color = texture2D(sTexture, "+DEFAULT_FRAGMENT_TEXTURE_COORDINATE_NAME+");\n"
             + "  vec3 new_color = min(matrix * color.rgb, 1.0);\n"
             + "  gl_FragColor = vec4(new_color.rgb, color.a);\n"
             + "}\n";

File: cameraview/src/main/java/com/otaliastudios/cameraview/frame/Frame.java
Patch:
@@ -44,8 +44,8 @@ private void ensureHasContent() {
         if (!hasContent()) {
             LOG.e("Frame is dead! time:", mTime, "lastTime:", mLastTime);
             throw new RuntimeException("You should not access a released frame. " +
-                    "If this frame was passed to a FrameProcessor, you can only use its contents synchronously, " +
-                    "for the duration of the process() method.");
+                    "If this frame was passed to a FrameProcessor, you can only use its contents " +
+                    "synchronously, for the duration of the process() method.");
         }
     }
 

File: cameraview/src/main/java/com/otaliastudios/cameraview/gesture/Gesture.java
Patch:
@@ -8,7 +8,8 @@
 
 /**
  * Gestures listen to finger gestures over the {@link CameraView} bounds and can be mapped
- * to one or more camera controls using XML attributes or {@link CameraView#mapGesture(Gesture, GestureAction)}.
+ * to one or more camera controls using XML attributes or {@link CameraView#mapGesture(Gesture,
+ * GestureAction)}.
  *
  * Not every gesture can control a certain action. For example, pinch gestures can only control
  * continuous values, such as zoom or AE correction. Single point gestures, on the other hand,

File: cameraview/src/main/java/com/otaliastudios/cameraview/gesture/GestureAction.java
Patch:
@@ -2,6 +2,7 @@
 
 
 import com.otaliastudios.cameraview.CameraView;
+import com.otaliastudios.cameraview.filter.Filter;
 import com.otaliastudios.cameraview.markers.AutoFocusMarker;
 
 import androidx.annotation.NonNull;
@@ -63,7 +64,7 @@ public enum GestureAction {
     EXPOSURE_CORRECTION(4, GestureType.CONTINUOUS),
 
     /**
-     * Controls the first parameter of a real-time {@link com.otaliastudios.cameraview.filter.Filter},
+     * Controls the first parameter of a real-time {@link Filter},
      * if it accepts one. This action can be mapped to continuous gestures:
      *
      * - {@link Gesture#PINCH}
@@ -73,7 +74,7 @@ public enum GestureAction {
     FILTER_CONTROL_1(5, GestureType.CONTINUOUS),
 
     /**
-     * Controls the second parameter of a real-time {@link com.otaliastudios.cameraview.filter.Filter},
+     * Controls the second parameter of a real-time {@link Filter},
      * if it accepts one. This action can be mapped to continuous gestures:
      *
      * - {@link Gesture#PINCH}

File: cameraview/src/main/java/com/otaliastudios/cameraview/gesture/PinchGestureFinder.java
Patch:
@@ -19,7 +19,8 @@ public class PinchGestureFinder extends GestureFinder {
     public PinchGestureFinder(@NonNull Controller controller) {
         super(controller, 2);
         setGesture(Gesture.PINCH);
-        mDetector = new ScaleGestureDetector(controller.getContext(), new ScaleGestureDetector.SimpleOnScaleGestureListener() {
+        mDetector = new ScaleGestureDetector(controller.getContext(),
+                new ScaleGestureDetector.SimpleOnScaleGestureListener() {
             @Override
             public boolean onScale(ScaleGestureDetector detector) {
                 mNotify = true;

File: cameraview/src/main/java/com/otaliastudios/cameraview/gesture/TapGestureFinder.java
Patch:
@@ -16,7 +16,8 @@ public class TapGestureFinder extends GestureFinder {
 
     public TapGestureFinder(@NonNull Controller controller) {
         super(controller, 1);
-        mDetector = new GestureDetector(controller.getContext(), new GestureDetector.SimpleOnGestureListener() {
+        mDetector = new GestureDetector(controller.getContext(),
+                new GestureDetector.SimpleOnGestureListener() {
 
             @Override
             public boolean onSingleTapUp(MotionEvent e) {

File: cameraview/src/main/java/com/otaliastudios/cameraview/internal/GridLinesLayout.java
Patch:
@@ -43,7 +43,8 @@ public GridLinesLayout(@NonNull Context context, @Nullable AttributeSet attrs) {
         super(context, attrs);
         horiz = new ColorDrawable(gridColor);
         vert = new ColorDrawable(gridColor);
-        width = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 0.9f, context.getResources().getDisplayMetrics());
+        width = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 0.9f,
+                context.getResources().getDisplayMetrics());
     }
 
     @Override

File: cameraview/src/main/java/com/otaliastudios/cameraview/internal/egl/EglBaseSurface.java
Patch:
@@ -229,7 +229,8 @@ public byte[] saveFrameTo(Bitmap.CompressFormat compressFormat) {
         int height = getHeight();
         ByteBuffer buf = ByteBuffer.allocateDirect(width * height * 4);
         buf.order(ByteOrder.LITTLE_ENDIAN);
-        GLES20.glReadPixels(0, 0, width, height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, buf);
+        GLES20.glReadPixels(0, 0, width, height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE,
+                buf);
         GlUtils.checkError("glReadPixels");
         buf.rewind();
 

File: cameraview/src/main/java/com/otaliastudios/cameraview/internal/utils/ImageHelper.java
Patch:
@@ -67,7 +67,8 @@ public static void convertToNV21(@NonNull Image image, @NonNull byte[] result) {
         }
 
         if (pixelStride == 2 && rowStride == width && uBuffer.get(0) == vBuffer.get(1)) {
-            // maybe V an U planes overlap as per NV21, which means vBuffer[1] is alias of uBuffer[0]
+            // maybe V an U planes overlap as per NV21, which means vBuffer[1]
+            // is alias of uBuffer[0]
             byte savePixel = vBuffer.get(1);
             vBuffer.put(1, (byte)0);
             if (uBuffer.get(0) == 0) {

File: cameraview/src/main/java/com/otaliastudios/cameraview/internal/utils/RotationHelper.java
Patch:
@@ -19,7 +19,9 @@ public class RotationHelper {
      * @param rotation desired angle
      * @return a new yuv array
      */
-    public static byte[] rotate(@NonNull final byte[] yuv, @NonNull final Size size, final int rotation) {
+    public static byte[] rotate(@NonNull final byte[] yuv,
+                                @NonNull final Size size,
+                                final int rotation) {
         if (rotation == 0) return yuv;
         if (rotation % 90 != 0 || rotation < 0 || rotation > 270) {
             throw new IllegalArgumentException("0 <= rotation < 360, rotation % 90 == 0");

File: cameraview/src/main/java/com/otaliastudios/cameraview/markers/AutoFocusMarker.java
Patch:
@@ -32,7 +32,9 @@ public interface AutoFocusMarker extends Marker {
      * @param successful whether the operation succeeded
      * @param point coordinates
      */
-    void onAutoFocusEnd(@NonNull AutoFocusTrigger trigger, boolean successful, @NonNull PointF point);
+    void onAutoFocusEnd(@NonNull AutoFocusTrigger trigger,
+                        boolean successful,
+                        @NonNull PointF point);
 
 
 }

File: cameraview/src/main/java/com/otaliastudios/cameraview/picture/Full1PictureRecorder.java
Patch:
@@ -54,7 +54,9 @@ public void onPictureTaken(byte[] data, final Camera camera) {
                         int exifRotation;
                         try {
                             ExifInterface exif = new ExifInterface(new ByteArrayInputStream(data));
-                            int exifOrientation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_NORMAL);
+                            int exifOrientation = exif.getAttributeInt(
+                                    ExifInterface.TAG_ORIENTATION,
+                                    ExifInterface.ORIENTATION_NORMAL);
                             exifRotation = ExifHelper.readExifOrientation(exifOrientation);
                         } catch (IOException e) {
                             exifRotation = 0;

File: cameraview/src/main/java/com/otaliastudios/cameraview/picture/PictureRecorder.java
Patch:
@@ -44,7 +44,8 @@ public interface PictureResultListener {
      * @param listener a listener
      */
     @SuppressWarnings("WeakerAccess")
-    public PictureRecorder(@NonNull PictureResult.Stub stub, @Nullable PictureResultListener listener) {
+    public PictureRecorder(@NonNull PictureResult.Stub stub,
+                           @Nullable PictureResultListener listener) {
         mResult = stub;
         mListener = listener;
     }

File: cameraview/src/main/java/com/otaliastudios/cameraview/size/AspectRatio.java
Patch:
@@ -11,7 +11,8 @@
  */
 public class AspectRatio implements Comparable<AspectRatio> {
 
-    @VisibleForTesting final static HashMap<String, AspectRatio> sCache = new HashMap<>(16);
+    @VisibleForTesting final static HashMap<String, AspectRatio> sCache
+            = new HashMap<>(16);
 
     /**
      * Creates an aspect ratio for the given size.

File: cameraview/src/main/java/com/otaliastudios/cameraview/video/encoding/AudioTimestamp.java
Patch:
@@ -69,8 +69,8 @@ long increaseUs(int readBytes) {
             //noinspection StatementWithEmptyBody
             if (correctionUs < 0) {
                 // This means that this method is being called too often, so that the expected start
-                // time for this buffer is BEFORE the last buffer end. So, respect the last buffer end
-                // instead.
+                // time for this buffer is BEFORE the last buffer end. So, respect the last buffer
+                // end instead.
             }
             mGapUs = 0;
             mBytesSinceBaseTime += readBytes;

File: cameraview/src/main/java/com/otaliastudios/cameraview/video/encoding/MediaCodecBuffers.java
Patch:
@@ -8,8 +8,8 @@
 import androidx.annotation.RequiresApi;
 
 /**
- * A Wrapper to MediaCodec that facilitates the use of API-dependent get{Input/Output}Buffer methods,
- * in order to prevent: http://stackoverflow.com/q/30646885
+ * A Wrapper to MediaCodec that facilitates the use of API-dependent get{Input/Output}Buffer
+ * methods, in order to prevent: http://stackoverflow.com/q/30646885
  */
 @RequiresApi(Build.VERSION_CODES.JELLY_BEAN_MR2)
 class MediaCodecBuffers {

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/engine/MockCameraEngine.java
Patch:
@@ -123,12 +123,12 @@ public void takePicture(@NonNull PictureResult.Stub stub) {
     }
 
     @Override
-    protected void onTakePicture(@NonNull PictureResult.Stub stub) {
+    protected void onTakePicture(@NonNull PictureResult.Stub stub, boolean doMetering) {
 
     }
 
     @Override
-    protected void onTakePictureSnapshot(@NonNull PictureResult.Stub stub, @NonNull AspectRatio outputRatio) {
+    protected void onTakePictureSnapshot(@NonNull PictureResult.Stub stub, @NonNull AspectRatio outputRatio, boolean doMetering) {
 
     }
 

File: cameraview/src/main/java/com/otaliastudios/cameraview/CameraOptions.java
Patch:
@@ -427,7 +427,7 @@ public boolean isZoomSupported() {
 
 
     /**
-     * Whether auto focus (metering with respect to a specific region of the screen) is
+     * Whether touch metering (metering with respect to a specific region of the screen) is
      * supported. If it is, you can map gestures to {@link GestureAction#AUTO_FOCUS}
      * and metering will change on tap.
      *

File: cameraview/src/main/java/com/otaliastudios/cameraview/engine/Camera1Engine.java
Patch:
@@ -297,7 +297,7 @@ protected Task<Void> onStopEngine() {
 
     @WorkerThread
     @Override
-    protected void onTakePicture(@NonNull PictureResult.Stub stub) {
+    protected void onTakePicture(@NonNull PictureResult.Stub stub, boolean doMetering) {
         stub.rotation = getAngles().offset(Reference.SENSOR, Reference.OUTPUT, Axis.RELATIVE_TO_SENSOR);
         stub.size = getPictureSize(Reference.OUTPUT);
         mPictureRecorder = new Full1PictureRecorder(stub, Camera1Engine.this, mCamera);
@@ -306,12 +306,12 @@ protected void onTakePicture(@NonNull PictureResult.Stub stub) {
 
     @WorkerThread
     @Override
-    protected void onTakePictureSnapshot(@NonNull PictureResult.Stub stub, @NonNull AspectRatio outputRatio) {
+    protected void onTakePictureSnapshot(@NonNull PictureResult.Stub stub, @NonNull AspectRatio outputRatio, boolean doMetering) {
         stub.size = getUncroppedSnapshotSize(Reference.OUTPUT); // Not the real size: it will be cropped to match the view ratio
         stub.rotation = getAngles().offset(Reference.SENSOR, Reference.OUTPUT, Axis.RELATIVE_TO_SENSOR); // Actually it will be rotated and set to 0.
 
         if (mPreview instanceof GlCameraPreview && Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
-            mPictureRecorder = new SnapshotGlPictureRecorder(stub, this, (GlCameraPreview) mPreview, outputRatio, getOverlay());
+            mPictureRecorder = new SnapshotGlPictureRecorder(stub, this, (GlCameraPreview) mPreview, outputRatio);
         } else {
             mPictureRecorder = new Snapshot1PictureRecorder(stub, this, mCamera, outputRatio);
         }

File: cameraview/src/main/java/com/otaliastudios/cameraview/gesture/GestureAction.java
Patch:
@@ -23,7 +23,7 @@ public enum GestureAction {
     NONE(0, GestureType.ONE_SHOT),
 
     /**
-     * Auto focus control, typically assigned to the tap gesture.
+     * Touch metering control, typically assigned to the tap gesture.
      * This action can be mapped to one shot gestures:
      *
      * - {@link Gesture#TAP}

File: cameraview/src/main/java/com/otaliastudios/cameraview/CameraUtils.java
Patch:
@@ -9,9 +9,8 @@
 import android.hardware.Camera;
 import android.os.Handler;
 
-import com.otaliastudios.cameraview.controls.Engine;
 import com.otaliastudios.cameraview.controls.Facing;
-import com.otaliastudios.cameraview.engine.Mapper;
+import com.otaliastudios.cameraview.engine.mappers.Camera1Mapper;
 import com.otaliastudios.cameraview.internal.utils.ExifHelper;
 import com.otaliastudios.cameraview.internal.utils.WorkerHandler;
 
@@ -61,7 +60,7 @@ public static boolean hasCameras(@NonNull Context context) {
      */
     public static boolean hasCameraFacing(@SuppressWarnings("unused") @NonNull Context context,
                                           @NonNull Facing facing) {
-        int internal = Mapper.get(Engine.CAMERA1).map(facing);
+        int internal = Camera1Mapper.get().mapFacing(facing);
         Camera.CameraInfo cameraInfo = new Camera.CameraInfo();
         for (int i = 0, count = Camera.getNumberOfCameras(); i < count; i++) {
             Camera.getCameraInfo(i, cameraInfo);

File: cameraview/src/main/java/com/otaliastudios/cameraview/engine/CameraEngine.java
Patch:
@@ -18,6 +18,7 @@
 import com.otaliastudios.cameraview.CameraLogger;
 import com.otaliastudios.cameraview.CameraOptions;
 import com.otaliastudios.cameraview.PictureResult;
+import com.otaliastudios.cameraview.engine.mappers.Camera1Mapper;
 import com.otaliastudios.cameraview.overlay.Overlay;
 import com.otaliastudios.cameraview.VideoResult;
 import com.otaliastudios.cameraview.engine.offset.Angles;
@@ -154,7 +155,6 @@ public interface Callback {
     @SuppressWarnings("WeakerAccess") protected final Callback mCallback;
     @SuppressWarnings("WeakerAccess") protected CameraPreview mPreview;
     @SuppressWarnings("WeakerAccess") protected CameraOptions mCameraOptions;
-    @SuppressWarnings("WeakerAccess") protected Mapper mMapper;
     @SuppressWarnings("WeakerAccess") protected PictureRecorder mPictureRecorder;
     @SuppressWarnings("WeakerAccess") protected VideoRecorder mVideoRecorder;
     @SuppressWarnings("WeakerAccess") protected Size mCaptureSize;

File: cameraview/src/main/java/com/otaliastudios/cameraview/engine/CameraEngine.java
Patch:
@@ -133,7 +133,7 @@ public interface Callback {
         void dispatchOnFocusEnd(@Nullable Gesture trigger, boolean success, @NonNull PointF where);
         void dispatchOnZoomChanged(final float newValue, @Nullable final PointF[] fingers);
         void dispatchOnExposureCorrectionChanged(float newValue, @NonNull float[] bounds, @Nullable PointF[] fingers);
-        void dispatchFrame(Frame frame);
+        void dispatchFrame(@NonNull Frame frame);
         void dispatchError(CameraException exception);
         void dispatchOnVideoRecordingStart();
         void dispatchOnVideoRecordingEnd();

File: cameraview/src/main/java/com/otaliastudios/cameraview/picture/Snapshot1PictureRecorder.java
Patch:
@@ -87,7 +87,7 @@ public void run() {
                 // It seems that the buffers are already cleared here, so we need to allocate again.
                 camera.setPreviewCallbackWithBuffer(null); // Release anything left
                 camera.setPreviewCallbackWithBuffer(mEngine1); // Add ourselves
-                mEngine1.getFrameManager().setUp(ImageFormat.getBitsPerPixel(mFormat), previewStreamSize);
+                mEngine1.getFrameManager().setUp(mFormat, previewStreamSize);
             }
         });
     }

File: cameraview/src/main/java/com/otaliastudios/cameraview/filter/BaseFilter.java
Patch:
@@ -19,7 +19,7 @@
  * to be changed. Most effects can be rendered by simply changing the fragment shader, thus
  * by overriding {@link #getFragmentShader()}.
  *
- * All {@link BaseFilter}s should have a no-op public constructor.
+ * All {@link BaseFilter}s should have a no-arguments public constructor.
  * This class will try to automatically implement {@link #copy()} thanks to this.
  * If your filter implements public parameters, please implement {@link OneParameterFilter}
  * and {@link TwoParameterFilter} to handle them and have them passed automatically to copies.
@@ -226,9 +226,9 @@ protected BaseFilter onCopy() {
         try {
             return getClass().newInstance();
         } catch (IllegalAccessException e) {
-            throw new RuntimeException("Filters should have a public no-op constructor.", e);
+            throw new RuntimeException("Filters should have a public no-arguments constructor.", e);
         } catch (InstantiationException e) {
-            throw new RuntimeException("Filters should have a public no-op constructor.", e);
+            throw new RuntimeException("Filters should have a public no-arguments constructor.", e);
         }
     }
 }

File: cameraview/src/main/java/com/otaliastudios/cameraview/filter/Filter.java
Patch:
@@ -19,7 +19,7 @@
  * Advanced users can create custom filters using GLES.
  * It is recommended to extend {@link BaseFilter} instead of this class.
  *
- * All {@link Filter}s should have a no-op public constructor.
+ * All {@link Filter}s should have a no-arguments public constructor.
  * This ensures that you can pass the filter class to XML attribute {@code app:cameraFilter},
  * and also helps {@link BaseFilter} automatically make a copy of the filter.
  *

File: cameraview/src/main/java/com/otaliastudios/cameraview/video/encoding/VideoConfig.java
Patch:
@@ -13,6 +13,7 @@ public class VideoConfig {
     public int frameRate;
     public int rotation;
     public String mimeType;
+    public String encoder;
 
     protected <C extends VideoConfig> void copy(@NonNull C output) {
         output.width = this.width;
@@ -21,5 +22,6 @@ protected <C extends VideoConfig> void copy(@NonNull C output) {
         output.frameRate = this.frameRate;
         output.rotation = this.rotation;
         output.mimeType = this.mimeType;
+        output.encoder = this.encoder;
     }
 }

File: cameraview/src/main/java/com/otaliastudios/cameraview/video/encoding/AudioMediaEncoder.java
Patch:
@@ -62,7 +62,7 @@ public AudioMediaEncoder(@NonNull AudioConfig config) {
 
     @EncoderThread
     @Override
-    protected void onPrepare(@NonNull MediaEncoderEngine.Controller controller, long maxLengthMillis) {
+    protected void onPrepare(@NonNull MediaEncoderEngine.Controller controller, long maxLengthUs) {
         final MediaFormat audioFormat = MediaFormat.createAudioFormat(
                 mConfig.mimeType,
                 mConfig.samplingFrequency,
@@ -248,7 +248,7 @@ private void increaseTime(int readBytes, boolean endOfStream) {
 
             // See if we reached the max length value.
             if (!hasReachedMaxLength()) {
-                boolean didReachMaxLength = (mLastTimeUs - mFirstTimeUs) > getMaxLengthMillis() * 1000L;
+                boolean didReachMaxLength = (mLastTimeUs - mFirstTimeUs) > getMaxLengthUs();
                 if (didReachMaxLength && !endOfStream) {
                     LOG.w("read thread - this frame reached the maxLength! deltaUs:", mLastTimeUs - mFirstTimeUs);
                     notifyMaxLengthReached();

File: cameraview/src/main/java/com/otaliastudios/cameraview/video/encoding/TextureMediaEncoder.java
Patch:
@@ -89,12 +89,12 @@ public Frame acquireFrame() {
 
     @EncoderThread
     @Override
-    protected void onPrepare(@NonNull MediaEncoderEngine.Controller controller, long maxLengthMillis) {
+    protected void onPrepare(@NonNull MediaEncoderEngine.Controller controller, long maxLengthUs) {
         // We rotate the texture using transformRotation. Pass rotation=0 to super so that
         // no rotation metadata is written into the output file.
         mTransformRotation = mConfig.rotation;
         mConfig.rotation = 0;
-        super.onPrepare(controller, maxLengthMillis);
+        super.onPrepare(controller, maxLengthUs);
         mEglCore = new EglCore(mConfig.eglContext, EglCore.FLAG_RECORDABLE);
         mWindow = new EglWindowSurface(mEglCore, mSurface, true);
         mWindow.makeCurrent();
@@ -156,7 +156,7 @@ protected void onEvent(@NonNull String event, @Nullable Object data) {
             // Notify we have reached the max length value.
             if (mFirstTimeUs == Long.MIN_VALUE) mFirstTimeUs = frame.timestampUs();
             if (!hasReachedMaxLength()) {
-                boolean didReachMaxLength = (frame.timestampUs() - mFirstTimeUs) > getMaxLengthMillis() * 1000L;
+                boolean didReachMaxLength = (frame.timestampUs() - mFirstTimeUs) > getMaxLengthUs();
                 if (didReachMaxLength) {
                     LOG.w("onEvent -",
                             "frameNumber:", mFrameNumber,

File: cameraview/src/main/java/com/otaliastudios/cameraview/video/encoding/VideoMediaEncoder.java
Patch:
@@ -53,7 +53,7 @@ abstract class VideoMediaEncoder<C extends VideoConfig> extends MediaEncoder {
 
     @EncoderThread
     @Override
-    protected void onPrepare(@NonNull MediaEncoderEngine.Controller controller, long maxLengthMillis) {
+    protected void onPrepare(@NonNull MediaEncoderEngine.Controller controller, long maxLengthUs) {
         MediaFormat format = MediaFormat.createVideoFormat(mConfig.mimeType, mConfig.width, mConfig.height);
 
         // Failing to specify some of these can cause the MediaCodec configure() call to throw an unhelpful exception.

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/CameraOptions1Test.java
Patch:
@@ -221,6 +221,8 @@ public void testGestureActions() {
         assertTrue(o.supports(GestureAction.TAKE_PICTURE));
         assertTrue(o.supports(GestureAction.NONE));
         assertTrue(o.supports(GestureAction.ZOOM));
+        assertTrue(o.supports(GestureAction.FILTER_CONTROL_1));
+        assertTrue(o.supports(GestureAction.FILTER_CONTROL_2));
         assertFalse(o.supports(GestureAction.EXPOSURE_CORRECTION));
     }
 

File: cameraview/src/main/java/com/otaliastudios/cameraview/CameraOptions.java
Patch:
@@ -273,6 +273,8 @@ public boolean supports(@NonNull GestureAction action) {
             case AUTO_FOCUS:
                 return isAutoFocusSupported();
             case TAKE_PICTURE:
+            case FILTER_CONTROL_1:
+            case FILTER_CONTROL_2:
             case NONE:
                 return true;
             case ZOOM:

File: demo/src/main/java/com/otaliastudios/cameraview/demo/CameraActivity.java
Patch:
@@ -331,7 +331,9 @@ private void changeCurrentFilter() {
         } else {
             mCurrentFilter = 0;
         }
-        camera.setFilter(mAllFilters[mCurrentFilter].newInstance());
+        Filters filter = mAllFilters[mCurrentFilter];
+        camera.setFilter(filter.newInstance());
+        message(filter.toString(), false);
     }
 
     @Override

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/preview/CameraPreviewTest.java
Patch:
@@ -23,16 +23,16 @@
 
 import static org.mockito.Mockito.*;
 
-public abstract class CameraPreviewTest extends BaseTest {
+public abstract class CameraPreviewTest<T extends CameraPreview> extends BaseTest {
 
     private final static long DELAY = 4000;
 
-    protected abstract CameraPreview createPreview(Context context, ViewGroup parent);
+    protected abstract T createPreview(Context context, ViewGroup parent);
 
     @Rule
     public ActivityTestRule<TestActivity> rule = new ActivityTestRule<>(TestActivity.class);
 
-    protected CameraPreview preview;
+    protected T preview;
     @SuppressWarnings("WeakerAccess")
     protected Size surfaceSize;
     private CameraPreview.SurfaceCallback callback;

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/preview/SurfaceCameraPreviewTest.java
Patch:
@@ -11,10 +11,10 @@
 
 @RunWith(AndroidJUnit4.class)
 @SmallTest
-public class SurfaceCameraPreviewTest extends CameraPreviewTest {
+public class SurfaceCameraPreviewTest extends CameraPreviewTest<SurfaceCameraPreview> {
 
     @Override
-    protected CameraPreview createPreview(Context context, ViewGroup parent) {
+    protected SurfaceCameraPreview createPreview(Context context, ViewGroup parent) {
         return new SurfaceCameraPreview(context, parent);
     }
 

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/preview/TextureCameraPreviewTest.java
Patch:
@@ -11,10 +11,10 @@
 
 @RunWith(AndroidJUnit4.class)
 @SmallTest
-public class TextureCameraPreviewTest extends CameraPreviewTest {
+public class TextureCameraPreviewTest extends CameraPreviewTest<TextureCameraPreview> {
 
     @Override
-    protected CameraPreview createPreview(Context context, ViewGroup parent) {
+    protected TextureCameraPreview createPreview(Context context, ViewGroup parent) {
         return new TextureCameraPreview(context, parent);
     }
 

File: cameraview/src/main/java/com/otaliastudios/cameraview/controls/Preview.java
Patch:
@@ -29,7 +29,8 @@ public enum Preview implements Control {
     /**
      * Preview engine based on {@link android.opengl.GLSurfaceView}.
      * This is the best engine available. Supports video snapshots,
-     * and picture snapshots while taking videos.
+     * supports picture snapshots while taking videos, supports
+     * watermarks and overlays, supports real-time filters.
      */
     GL_SURFACE(2);
 

File: cameraview/src/main/java/com/otaliastudios/cameraview/preview/RendererFrameCallback.java
Patch:
@@ -4,7 +4,7 @@
 
 import androidx.annotation.NonNull;
 
-import com.otaliastudios.cameraview.filters.Filter;
+import com.otaliastudios.cameraview.filter.Filter;
 
 /**
  * Callback for renderer frames.
@@ -30,7 +30,7 @@ public interface RendererFrameCallback {
      * @param scaleY the scaleY (in REF_VIEW) value
      */
     @RendererThread
-    void onRendererFrame(@NonNull SurfaceTexture surfaceTexture, float scaleX, float scaleY, Filter shaderEffect);
+    void onRendererFrame(@NonNull SurfaceTexture surfaceTexture, float scaleX, float scaleY);
 
     /**
      * Called on the change of shader filter

File: cameraview/src/main/java/com/otaliastudios/cameraview/CameraView.java
Patch:
@@ -785,6 +785,8 @@ public void set(@NonNull Control control) {
      * For example, if control class is a {@link Grid}, this calls {@link #getGrid()}.
      *
      * @param controlClass desired value class
+     * @param <T> the class type
+     * @return the control
      */
     @SuppressWarnings("unchecked")
     @NonNull

File: cameraview/src/main/java/com/otaliastudios/cameraview/video/encoding/TextureMediaEncoder.java
Patch:
@@ -100,7 +100,7 @@ protected void onPrepare(@NonNull MediaEncoderEngine.Controller controller, long
     }
 
     /**
-     * Any number of pending events > 1 means that we should skip this frame.
+     * Any number of pending events greater than 1 means that we should skip this frame.
      * To avoid skipping too many frames, we'll use 2 for now, but this just means
      * that we'll be drawing the same frame twice.
      *

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/video/VideoRecorderTest.java
Patch:
@@ -29,15 +29,15 @@ protected void onStart() {
             }
 
             @Override
-            protected void onStop() {
+            protected void onStop(boolean isCameraShutdown) {
                 dispatchVideoRecordingEnd();
                 dispatchResult();
             }
         };
         recorder.start(result);
         Mockito.verify(listener,Mockito.times(1) )
                 .onVideoRecordingStart();
-        recorder.stop();
+        recorder.stop(false);
         Mockito.verify(listener, Mockito.times(1))
                 .onVideoRecordingEnd();
         Mockito.verify(listener, Mockito.times(1))

File: cameraview/src/main/java/com/otaliastudios/cameraview/engine/Camera1Engine.java
Patch:
@@ -231,7 +231,7 @@ protected Task<Void> onStartPreview() {
     @Override
     protected Task<Void> onStopPreview() {
         if (mVideoRecorder != null) {
-            mVideoRecorder.stop();
+            mVideoRecorder.stop(true);
             mVideoRecorder = null;
         }
         mPictureRecorder = null;

File: cameraview/src/main/java/com/otaliastudios/cameraview/engine/Camera2Engine.java
Patch:
@@ -535,7 +535,7 @@ protected Task<Void> onStopPreview() {
         if (mVideoRecorder != null) {
             // This should synchronously call onVideoResult that will reset the repeating builder
             // to the PREVIEW template. This is very important.
-            mVideoRecorder.stop();
+            mVideoRecorder.stop(true);
             mVideoRecorder = null;
         }
         mPictureRecorder = null;

File: cameraview/src/main/java/com/otaliastudios/cameraview/engine/CameraEngine.java
Patch:
@@ -1189,7 +1189,7 @@ public final void stopVideo() {
             public void run() {
                 LOG.i("stopVideo", "executing.", "isTakingVideo?", isTakingVideo());
                 if (mVideoRecorder != null) {
-                    mVideoRecorder.stop();
+                    mVideoRecorder.stop(false);
                     mVideoRecorder = null;
                 }
             }

File: cameraview/src/main/java/com/otaliastudios/cameraview/video/encoding/AudioConfig.java
Patch:
@@ -20,7 +20,7 @@ public class AudioConfig {
     final int encoding = AudioFormat.ENCODING_PCM_16BIT; // Determines the sampleSizePerChannel
     // The 44.1KHz frequency is the only setting guaranteed to be available on all devices.
     final int samplingFrequency = 44100; // samples/sec
-    final int sampleSizePerChannel = 2; // byte/sample/channel [16bit]
+    final int sampleSizePerChannel = 2; // byte/sample/channel [16bit]. If this changes, review noise introduction
     final int byteRatePerChannel = samplingFrequency * sampleSizePerChannel; // byte/sec/channel
 
     @NonNull
@@ -75,7 +75,7 @@ int frameSize() {
      * @return the number of frames
      */
     int audioRecordBufferFrames() {
-        return 25;
+        return 50;
     }
 
     /**
@@ -91,6 +91,6 @@ int audioRecordBufferFrames() {
      * @return the buffer pool max size
      */
     int bufferPoolMaxSize() {
-        return 80;
+        return 500;
     }
 }

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/engine/CameraIntegrationTest.java
Patch:
@@ -86,7 +86,7 @@ public static void grant() {
     @Before
     public void setUp() {
         LOG.e("Test started. Setting up camera.");
-        WorkerHandler.destroy();
+        WorkerHandler.destroyAll();
 
         uiSync(new Runnable() {
             @Override
@@ -126,7 +126,7 @@ public void uncaughtException(Thread t, Throwable e) {
     public void tearDown() {
         LOG.e("Test ended. Tearing down camera.");
         camera.destroy();
-        WorkerHandler.destroy();
+        WorkerHandler.destroyAll();
     }
 
     private void waitForUiException() throws Throwable {

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/engine/MockCameraEngine.java
Patch:
@@ -128,7 +128,7 @@ protected void onTakePicture(@NonNull PictureResult.Stub stub) {
     }
 
     @Override
-    protected void onTakePictureSnapshot(@NonNull PictureResult.Stub stub, @NonNull AspectRatio viewAspectRatio) {
+    protected void onTakePictureSnapshot(@NonNull PictureResult.Stub stub, @NonNull AspectRatio outputRatio) {
 
     }
 
@@ -138,7 +138,7 @@ protected void onTakeVideo(@NonNull VideoResult.Stub stub) {
     }
 
     @Override
-    protected void onTakeVideoSnapshot(@NonNull VideoResult.Stub stub, @NonNull AspectRatio viewAspectRatio) {
+    protected void onTakeVideoSnapshot(@NonNull VideoResult.Stub stub, @NonNull AspectRatio outputRatio) {
 
     }
 

File: cameraview/src/main/java/com/otaliastudios/cameraview/internal/egl/EglBaseSurface.java
Patch:
@@ -51,7 +51,7 @@ public class EglBaseSurface extends EglElement {
     private int mWidth = -1;
     private int mHeight = -1;
 
-    protected EglBaseSurface(EglCore eglCore) {
+    public EglBaseSurface(EglCore eglCore) {
         mEglCore = eglCore;
     }
 

File: cameraview/src/main/java/com/otaliastudios/cameraview/video/encoding/TextureMediaEncoder.java
Patch:
@@ -1,6 +1,7 @@
 package com.otaliastudios.cameraview.video.encoding;
 
 import android.graphics.SurfaceTexture;
+import android.media.ImageReader;
 import android.opengl.Matrix;
 import android.os.Build;
 
@@ -94,8 +95,7 @@ protected void onPrepare(@NonNull MediaEncoderEngine.Controller controller, long
         super.onPrepare(controller, maxLengthMillis);
         mEglCore = new EglCore(mConfig.eglContext, EglCore.FLAG_RECORDABLE);
         mWindow = new EglWindowSurface(mEglCore, mSurface, true);
-        mWindow.makeCurrent(); // drawing will happen on the InputWindowSurface, which
-        // is backed by mVideoEncoder.getInputSurface()
+        mWindow.makeCurrent();
         mViewport = new EglViewport();
     }
 

File: cameraview/src/main/java/com/otaliastudios/cameraview/engine/Camera2Engine.java
Patch:
@@ -629,7 +629,9 @@ protected void onTakePicture(@NonNull PictureResult.Stub stub) {
         try {
             CaptureRequest.Builder builder = mCamera.createCaptureRequest(CameraDevice.TEMPLATE_STILL_CAPTURE);
             applyAllParameters(builder);
-            mPictureRecorder = new Full2PictureRecorder(stub, this, mSession,
+            mPictureRecorder = new Full2PictureRecorder(stub, this,
+                    mCameraCharacteristics,
+                    mSession,
                     mRepeatingRequestBuilder,
                     mRepeatingRequestCallback,
                     builder,

File: cameraview/src/main/java/com/otaliastudios/cameraview/video/encoding/AudioMediaEncoder.java
Patch:
@@ -28,7 +28,7 @@ public class AudioMediaEncoder extends MediaEncoder {
     private static final String TAG = AudioMediaEncoder.class.getSimpleName();
     private static final CameraLogger LOG = CameraLogger.create(TAG);
 
-    private static final boolean PERFORMANCE_DEBUG = true;
+    private static final boolean PERFORMANCE_DEBUG = false;
     private static final boolean PERFORMANCE_FILL_GAPS = true;
 
     private boolean mRequestStop = false;

File: demo/src/main/java/com/otaliastudios/cameraview/demo/CameraActivity.java
Patch:
@@ -44,7 +44,7 @@
 public class CameraActivity extends AppCompatActivity implements View.OnClickListener, OptionView.Callback {
 
     private final static CameraLogger LOG = CameraLogger.create("DemoApp");
-    private final static boolean USE_FRAME_PROCESSOR = true;
+    private final static boolean USE_FRAME_PROCESSOR = false;
     private final static boolean DECODE_BITMAP = true;
 
     private CameraView camera;

File: cameraview/src/main/java/com/otaliastudios/cameraview/markers/DefaultAutoFocusMarker.java
Patch:
@@ -12,6 +12,7 @@
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
+import androidx.annotation.VisibleForTesting;
 
 /**
  * A default implementation of {@link AutoFocusMarker}.
@@ -20,8 +21,8 @@
  */
 public class DefaultAutoFocusMarker implements AutoFocusMarker {
 
-    private View mContainer;
-    private View mFill;
+    @VisibleForTesting View mContainer;
+    @VisibleForTesting View mFill;
 
     @Nullable
     @Override

File: cameraview/src/main/java/com/otaliastudios/cameraview/video/encoding/AudioMediaEncoder.java
Patch:
@@ -28,7 +28,7 @@ public class AudioMediaEncoder extends MediaEncoder {
     private static final String TAG = AudioMediaEncoder.class.getSimpleName();
     private static final CameraLogger LOG = CameraLogger.create(TAG);
 
-    private static final boolean PERFORMANCE_DEBUG = false;
+    private static final boolean PERFORMANCE_DEBUG = true;
     private static final boolean PERFORMANCE_FILL_GAPS = true;
 
     private boolean mRequestStop = false;
@@ -67,7 +67,7 @@ protected void onPrepare(@NonNull MediaEncoderEngine.Controller controller, long
                 mConfig.channels);
         audioFormat.setInteger(MediaFormat.KEY_AAC_PROFILE, MediaCodecInfo.CodecProfileLevel.AACObjectLC);
         audioFormat.setInteger(MediaFormat.KEY_CHANNEL_MASK, mConfig.audioFormatChannels());
-        audioFormat.setInteger(MediaFormat.KEY_BIT_RATE, mConfig.bitRate); // TODO multiply by channels?
+        audioFormat.setInteger(MediaFormat.KEY_BIT_RATE, mConfig.bitRate);
         try {
             mMediaCodec = MediaCodec.createEncoderByType(mConfig.mimeType);
         } catch (IOException e) {
@@ -157,7 +157,6 @@ private AudioRecordingThread() {
 
         @Override
         public void run() {
-            mLastTimeUs = System.nanoTime() / 1000L;
             mAudioRecord.startRecording();
             while (!mRequestStop) {
                 read(false);

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/CameraUtilsTest.java
Patch:
@@ -56,7 +56,7 @@ public void onBitmapReady(Bitmap bitmap) {
         };
 
         // Run on ui because it involves handlers.
-        ui(new Runnable() {
+        uiSync(new Runnable() {
             @Override
             public void run() {
                 if (maxWidth > 0 && maxHeight > 0) {
@@ -84,8 +84,6 @@ public void testDecodeBitmap() {
         assertEquals(0, other.getPixel(0, h-1));
         assertEquals(0, other.getPixel(w-1, 0));
         assertEquals(0, other.getPixel(w-1, h-1));
-
-        // TODO: improve when we add EXIF writing to byte arrays
     }
 
 

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/gesture/GestureFinderTest.java
Patch:
@@ -40,7 +40,7 @@ public abstract class GestureFinderTest<T extends GestureFinder> extends BaseTes
 
     @Before
     public void setUp() {
-        ui(new Runnable() {
+        uiSync(new Runnable() {
             @Override
             public void run() {
                 TestActivity a = rule.getActivity();

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/gesture/TapGestureFinderTest.java
Patch:
@@ -1,8 +1,6 @@
 package com.otaliastudios.cameraview.gesture;
 
 
-import android.content.Context;
-
 import androidx.annotation.NonNull;
 import androidx.test.espresso.action.GeneralClickAction;
 import androidx.test.espresso.action.GeneralLocation;
@@ -32,7 +30,7 @@ protected TapGestureFinder createFinder(@NonNull GestureFinder.Controller contro
 
     @Test
     public void testDefaults() {
-        assertNull(finder.getGesture());
+        assertNull(finder.mType);
         assertEquals(finder.getPoints().length, 1);
         assertEquals(finder.getPoints()[0].x, 0, 0);
         assertEquals(finder.getPoints()[0].y, 0, 0);

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/internal/GridLinesLayoutTest.java
Patch:
@@ -27,7 +27,7 @@ public class GridLinesLayoutTest extends BaseTest {
 
     @Before
     public void setUp() {
-        ui(new Runnable() {
+        uiSync(new Runnable() {
             @Override
             public void run() {
                 TestActivity a = rule.getActivity();

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/markers/MarkerLayoutTest.java
Patch:
@@ -11,7 +11,6 @@
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
-import org.junit.runner.manipulation.Filter;
 import org.mockito.Mockito;
 
 import androidx.test.annotation.UiThreadTest;
@@ -29,7 +28,7 @@ public class MarkerLayoutTest extends BaseTest {
 
     @Before
     public void setUp() {
-        ui(new Runnable() {
+        uiSync(new Runnable() {
             @Override
             public void run() {
                 TestActivity a = rule.getActivity();

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/picture/PictureRecorderTest.java
Patch:
@@ -3,7 +3,6 @@
 
 import com.otaliastudios.cameraview.BaseTest;
 import com.otaliastudios.cameraview.PictureResult;
-import com.otaliastudios.cameraview.picture.PictureRecorder;
 
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import androidx.test.filters.SmallTest;

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/preview/CameraPreviewTest.java
Patch:
@@ -32,7 +32,6 @@ public abstract class CameraPreviewTest extends BaseTest {
     @Rule
     public ActivityTestRule<TestActivity> rule = new ActivityTestRule<>(TestActivity.class);
 
-    @SuppressWarnings("WeakerAccess")
     protected CameraPreview preview;
     @SuppressWarnings("WeakerAccess")
     protected Size surfaceSize;
@@ -46,7 +45,7 @@ public void setUp() {
         available = new Op<>(true);
         destroyed = new Op<>(true);
 
-        ui(new Runnable() {
+        uiSync(new Runnable() {
             @Override
             public void run() {
                 TestActivity a = rule.getActivity();
@@ -82,7 +81,7 @@ protected void ensureAvailable() {
 
     // Trigger a destroy.
     protected void ensureDestroyed() {
-        ui(new Runnable() {
+        uiSync(new Runnable() {
             @Override
             public void run() {
                 rule.getActivity().getContentView().removeView(preview.getRootView());

File: cameraview/src/main/java/com/otaliastudios/cameraview/gesture/GestureFinder.java
Patch:
@@ -3,6 +3,8 @@
 import android.content.Context;
 import android.graphics.PointF;
 import androidx.annotation.NonNull;
+import androidx.annotation.VisibleForTesting;
+
 import android.view.MotionEvent;
 
 /**
@@ -22,7 +24,7 @@ public interface Controller {
     private final static int GRANULARITY = 50;
 
     private boolean mActive;
-    private Gesture mType;
+    @VisibleForTesting Gesture mType;
     private PointF[] mPoints;
     private Controller mController;
 

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/BaseTest.java
Patch:
@@ -33,8 +33,6 @@
 
 public class BaseTest {
 
-    public static CameraLogger LOG = CameraLogger.create("Test");
-
     private static KeyguardManager.KeyguardLock keyguardLock;
     private static PowerManager.WakeLock wakeLock;
 

File: cameraview/src/main/java/com/otaliastudios/cameraview/preview/GlCameraPreview.java
Patch:
@@ -5,7 +5,6 @@
 import android.opengl.GLSurfaceView;
 import android.opengl.Matrix;
 import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
 import androidx.annotation.VisibleForTesting;
 
 import android.view.LayoutInflater;

File: cameraview/src/main/java/com/otaliastudios/cameraview/video/encoding/VideoMediaEncoder.java
Patch:
@@ -42,7 +42,7 @@ static class Config {
         int rotation;
         String mimeType;
 
-        Config(int width, int height, int bitRate, int frameRate, int rotation, String mimeType) {
+        Config(int width, int height, int bitRate, int frameRate, int rotation, @NonNull String mimeType) {
             this.width = width;
             this.height = height;
             this.bitRate = bitRate;

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/video/VideoRecorderTest.java
Patch:
@@ -2,9 +2,7 @@
 
 
 import com.otaliastudios.cameraview.BaseTest;
-import com.otaliastudios.cameraview.PictureResult;
 import com.otaliastudios.cameraview.VideoResult;
-import com.otaliastudios.cameraview.video.VideoRecorder;
 
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import androidx.test.filters.SmallTest;
@@ -29,14 +27,16 @@ public void testRecorder() throws Exception {
         VideoRecorder.VideoResultListener listener = Mockito.mock(VideoRecorder.VideoResultListener.class);
         VideoRecorder recorder = new VideoRecorder(listener) {
             @Override
-            protected void onStart() { }
+            protected void onStart() { dispatchVideoRecordingStart(); }
 
             @Override
             protected void onStop() {
                 dispatchResult();
             }
         };
         recorder.start(result);
+        Mockito.verify(listener,Mockito.times(1) )
+                .onVideoRecordingStart();
         recorder.stop();
         Mockito.verify(listener, Mockito.times(1))
                 .onVideoResult(result, null);

File: cameraview/src/main/java/com/otaliastudios/cameraview/engine/Camera2Engine.java
Patch:
@@ -181,6 +181,9 @@ private void addRepeatingRequestBuilderSurfaces(@NonNull Surface... extraSurface
             mRepeatingRequestBuilder.addTarget(mFrameProcessingSurface);
         }
         for (Surface extraSurface : extraSurfaces) {
+            if (extraSurface == null) {
+                throw new IllegalArgumentException("Should not add a null surface.");
+            }
             mRepeatingRequestBuilder.addTarget(extraSurface);
         }
     }

File: cameraview/src/main/java/com/otaliastudios/cameraview/video/FullVideoRecorder.java
Patch:
@@ -130,6 +130,7 @@ protected void onStart() {
 
         try {
             mMediaRecorder.start();
+            dispatchVideoRecordingStart();
         } catch (Exception e) {
             LOG.w("start:", "Error while starting media recorder.", e);
             mResult = null;

File: cameraview/src/main/java/com/otaliastudios/cameraview/video/SnapshotVideoRecorder.java
Patch:
@@ -60,6 +60,7 @@ protected void onStart() {
         mPreview.addRendererFrameCallback(this);
         mFlipped = mEngine.getAngles().flip(Reference.SENSOR, Reference.VIEW);
         mDesiredState = STATE_RECORDING;
+        dispatchVideoRecordingStart();
     }
 
     @Override

File: cameraview/src/main/java/com/otaliastudios/cameraview/CameraOptions.java
Patch:
@@ -20,6 +20,7 @@
 import com.otaliastudios.cameraview.controls.Engine;
 import com.otaliastudios.cameraview.controls.Facing;
 import com.otaliastudios.cameraview.controls.Flash;
+import com.otaliastudios.cameraview.controls.Preview;
 import com.otaliastudios.cameraview.engine.Mapper;
 import com.otaliastudios.cameraview.gesture.GestureAction;
 import com.otaliastudios.cameraview.controls.Grid;
@@ -309,6 +310,8 @@ public <T extends Control> Collection<T> getSupportedControls(@NonNull Class<T>
             return (Collection<T>) getSupportedWhiteBalance();
         } else if (controlClass.equals(Engine.class)) {
             return (Collection<T>) Arrays.asList(Engine.values());
+        } else if (controlClass.equals(Preview.class)) {
+            return (Collection<T>) Arrays.asList(Preview.values());
         }
         // Unrecognized control.
         return Collections.emptyList();

File: cameraview/src/main/java/com/otaliastudios/cameraview/engine/Step.java
Patch:
@@ -34,9 +34,9 @@
  *
  * <strong>This class is NOT thread safe!</string>
  */
-class CameraEngineStep {
+class Step {
 
-    private static final String TAG = CameraEngineStep.class.getSimpleName();
+    private static final String TAG = Step.class.getSimpleName();
     private static final CameraLogger LOG = CameraLogger.create(TAG);
 
     interface Callback {
@@ -59,7 +59,7 @@ interface Callback {
     private final String name;
     private final Callback callback;
 
-    CameraEngineStep(@NonNull String name, @NonNull Callback callback) {
+    Step(@NonNull String name, @NonNull Callback callback) {
         this.name = name.toUpperCase();
         this.callback = callback;
     }

File: cameraview/src/main/java/com/otaliastudios/cameraview/picture/SnapshotGlPictureRecorder.java
Patch:
@@ -114,7 +114,7 @@ public void run() {
                         Matrix.scaleM(mTransform, 0, realScaleX, realScaleY, 1);
 
                         // Fix rotation:
-                        // TODO Not sure why we need the minus here... It makes no sense to me.
+                        // Not sure why we need the minus here... It makes no sense to me.
                         LOG.w("Recording frame. Rotation:", mResult.rotation, "Actual:", -mResult.rotation);
                         int rotation = -mResult.rotation;
                         mResult.rotation = 0;

File: cameraview/src/main/java/com/otaliastudios/cameraview/picture/PictureRecorder.java
Patch:
@@ -27,7 +27,8 @@ public interface PictureResultListener {
         /**
          * Picture was taken or there was some error, if
          * the result is null.
-         * @param result the result or null if there was some error.
+         * @param result the result or null if there was some error
+         * @param error the error or null if there wasn't any
          */
         void onPictureResult(@Nullable PictureResult.Stub result, @Nullable Exception error);
     }

File: cameraview/src/main/java/com/otaliastudios/cameraview/preview/CameraPreview.java
Patch:
@@ -236,12 +236,14 @@ public void onPause() {}
     public void onDestroy() {}
 
     /**
-     * Here we must crop the visible part by applying a > 1 scale to one of our
+     * Here we must crop the visible part by applying a scale greater than 1 to one of our
      * dimensions. This way our internal aspect ratio (mOutputSurfaceWidth / mOutputSurfaceHeight)
      * will match the preview size aspect ratio (mInputStreamWidth / mInputStreamHeight).
      *
      * There might still be some absolute difference (e.g. same ratio but bigger / smaller).
      * However that should be already managed by the framework.
+     *
+     * @param op the op
      */
     protected void crop(@NonNull Op<Void> op) {
         // The base implementation does not support cropping.

File: cameraview/src/main/java/com/otaliastudios/cameraview/preview/GlCameraPreview.java
Patch:
@@ -51,7 +51,7 @@
  *   - The SurfaceTexture has buffers of data of mInputStreamSize
  *   - The SurfaceView hosts a view (and a surface) of size mOutputSurfaceSize.
  *     These are determined by the CameraView.onMeasure method.
- *   - We have a GL rich texture to be drawn (in the given method & thread).
+ *   - We have a GL rich texture to be drawn (in the given method and thread).
  *
  * This class will provide rendering callbacks to anyone who registers a {@link RendererFrameCallback}.
  * Callbacks are guaranteed to be called on the renderer thread, which means that we can fetch

File: cameraview/src/main/java/com/otaliastudios/cameraview/video/Full2VideoRecorder.java
Patch:
@@ -65,6 +65,8 @@ protected boolean onPrepareMediaRecorder(@NonNull VideoResult.Stub stub, @NonNul
 
     /**
      * This method should be called just once.
+     *
+     * @param stub the video stub
      * @return a surface
      * @throws PrepareException if prepare went wrong
      */

File: cameraview/src/main/java/com/otaliastudios/cameraview/video/VideoRecorder.java
Patch:
@@ -42,6 +42,8 @@ public interface VideoResultListener {
 
     /**
      * Starts recording a video.
+     *
+     * @param stub the video stub
      */
     public final void start(@NonNull VideoResult.Stub stub) {
         mResult = stub;

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/CameraViewCallbacksTest.java
Patch:
@@ -195,7 +195,7 @@ public void testDispatchOnExposureCorrectionChanged() {
     @Test
     public void testDispatchOnFocusStart() {
         // Enable tap gesture.
-        // Can't mock package protected. camera.mTapGestureLayout = mock(TapGestureLayout.class);
+        // Can't mock package protected. camera.mTapGestureFinder = mock(TapGestureLayout.class);
         camera.mapGesture(Gesture.TAP, GestureAction.AUTO_FOCUS);
         AutoFocusMarker marker = mock(AutoFocusMarker.class);
         MarkerLayout markerLayout = mock(MarkerLayout.class);
@@ -215,7 +215,7 @@ public void testDispatchOnFocusStart() {
     @Test
     public void testDispatchOnFocusEnd() {
         // Enable tap gesture.
-        // Can't mock package protected. camera.mTapGestureLayout = mock(TapGestureLayout.class);
+        // Can't mock package protected. camera.mTapGestureFinder = mock(TapGestureLayout.class);
         camera.mapGesture(Gesture.TAP, GestureAction.AUTO_FOCUS);
         AutoFocusMarker marker = mock(AutoFocusMarker.class);
         camera.setAutoFocusMarker(marker);
@@ -229,7 +229,7 @@ public void testDispatchOnFocusEnd() {
         verify(listener, times(1)).onAutoFocusEnd(success, point);
         verify(marker, times(1)).onAutoFocusEnd(AutoFocusTrigger.GESTURE, success, point);
 
-        // Can't mock package protected. verify(camera.mTapGestureLayout, times(1)).onAutoFocusEnd(success);
+        // Can't mock package protected. verify(camera.mTapGestureFinder, times(1)).onAutoFocusEnd(success);
     }
 
     @Test

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/preview/CameraPreviewTest.java
Patch:
@@ -27,7 +27,7 @@ public abstract class CameraPreviewTest extends BaseTest {
 
     private final static long DELAY = 4000;
 
-    protected abstract CameraPreview createPreview(Context context, ViewGroup parent, CameraPreview.SurfaceCallback callback);
+    protected abstract CameraPreview createPreview(Context context, ViewGroup parent);
 
     @Rule
     public ActivityTestRule<TestActivity> rule = new ActivityTestRule<>(TestActivity.class);
@@ -69,7 +69,8 @@ public Object answer(InvocationOnMock invocation) {
                     }
                 }).when(callback).onSurfaceDestroyed();
 
-                preview = createPreview(a, a.getContentView(), callback);
+                preview = createPreview(a, a.getContentView());
+                preview.setSurfaceCallback(callback);
             }
         });
     }

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/preview/GlCameraPreviewTest.java
Patch:
@@ -14,8 +14,8 @@
 public class GlCameraPreviewTest extends CameraPreviewTest {
 
     @Override
-    protected CameraPreview createPreview(Context context, ViewGroup parent, CameraPreview.SurfaceCallback callback) {
-        return new GlCameraPreview(context, parent, callback);
+    protected CameraPreview createPreview(Context context, ViewGroup parent) {
+        return new GlCameraPreview(context, parent);
     }
 
     @Override

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/preview/MockCameraPreview.java
Patch:
@@ -12,7 +12,7 @@
 public class MockCameraPreview extends CameraPreview<View, Void> {
 
     public MockCameraPreview(Context context, ViewGroup parent) {
-        super(context, parent, null);
+        super(context, parent);
     }
 
     @Override

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/preview/SurfaceCameraPreviewTest.java
Patch:
@@ -18,8 +18,8 @@
 public class SurfaceCameraPreviewTest extends CameraPreviewTest {
 
     @Override
-    protected CameraPreview createPreview(Context context, ViewGroup parent, CameraPreview.SurfaceCallback callback) {
-        return new SurfaceCameraPreview(context, parent, callback);
+    protected CameraPreview createPreview(Context context, ViewGroup parent) {
+        return new SurfaceCameraPreview(context, parent);
     }
 
     @Override

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/preview/TextureCameraPreviewTest.java
Patch:
@@ -18,8 +18,8 @@
 public class TextureCameraPreviewTest extends CameraPreviewTest {
 
     @Override
-    protected CameraPreview createPreview(Context context, ViewGroup parent, CameraPreview.SurfaceCallback callback) {
-        return new TextureCameraPreview(context, parent, callback);
+    protected CameraPreview createPreview(Context context, ViewGroup parent) {
+        return new TextureCameraPreview(context, parent);
     }
 
     @Override

File: cameraview/src/main/java/com/otaliastudios/cameraview/preview/SurfaceCameraPreview.java
Patch:
@@ -26,8 +26,8 @@ public class SurfaceCameraPreview extends CameraPreview<SurfaceView, SurfaceHold
     private boolean mDispatched;
     private View mRootView;
 
-    public SurfaceCameraPreview(@NonNull Context context, @NonNull ViewGroup parent, @Nullable SurfaceCallback callback) {
-        super(context, parent, callback);
+    public SurfaceCameraPreview(@NonNull Context context, @NonNull ViewGroup parent) {
+        super(context, parent);
     }
 
     @NonNull
@@ -37,7 +37,6 @@ protected SurfaceView onCreateView(@NonNull Context context, @NonNull ViewGroup
         parent.addView(root, 0);
         SurfaceView surfaceView = root.findViewById(R.id.surface_view);
         final SurfaceHolder holder = surfaceView.getHolder();
-        //noinspection deprecation
         holder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
         holder.addCallback(new SurfaceHolder.Callback() {
 

File: cameraview/src/main/java/com/otaliastudios/cameraview/preview/TextureCameraPreview.java
Patch:
@@ -30,8 +30,8 @@ public class TextureCameraPreview extends CameraPreview<TextureView, SurfaceText
 
     private View mRootView;
 
-    public TextureCameraPreview(@NonNull Context context, @NonNull ViewGroup parent, @Nullable SurfaceCallback callback) {
-        super(context, parent, callback);
+    public TextureCameraPreview(@NonNull Context context, @NonNull ViewGroup parent) {
+        super(context, parent);
     }
 
     @NonNull
@@ -140,7 +140,7 @@ public void run() {
                     float scaleX = (float) mOutputSurfaceHeight / mOutputSurfaceWidth;
                     matrix.postScale(scaleX, 1F / scaleX, outputCenterX, outputCenterY);
                 }
-                matrix.postRotate((float) -drawRotation, outputCenterX, outputCenterY);
+                matrix.postRotate((float) drawRotation, outputCenterX, outputCenterY);
                 getView().setTransform(matrix);
                 task.setResult(null);
             }

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/CameraViewCallbacksTest.java
Patch:
@@ -36,6 +36,7 @@
 import static junit.framework.Assert.assertNotNull;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
+import static org.mockito.ArgumentMatchers.nullable;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyFloat;
 import static org.mockito.Matchers.anyInt;
@@ -175,11 +176,11 @@ public void testDispatchOnPictureTaken() {
 
     @Test
     public void testDispatchOnZoomChanged() {
-        completeTask().when(listener).onZoomChanged(anyFloat(), any(float[].class), any(PointF[].class));
+        completeTask().when(listener).onZoomChanged(eq(0f), eq(new float[]{0, 1}), nullable(PointF[].class));
         camera.mCameraCallbacks.dispatchOnZoomChanged(0f, null);
 
         assertNotNull(op.await(500));
-        verify(listener, times(1)).onZoomChanged(anyFloat(), any(float[].class), any(PointF[].class));
+        verify(listener, times(1)).onZoomChanged(eq(0f), eq(new float[]{0, 1}), nullable(PointF[].class));
     }
 
     @Test

File: cameraview/src/main/java/com/otaliastudios/cameraview/controls/Audio.java
Patch:
@@ -3,6 +3,7 @@
 
 import com.otaliastudios.cameraview.CameraView;
 
+import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 
 /**
@@ -34,14 +35,14 @@ int value() {
         return value;
     }
 
-    @Nullable
+    @NonNull
     static Audio fromValue(int value) {
         Audio[] list = Audio.values();
         for (Audio action : list) {
             if (action.value() == value) {
                 return action;
             }
         }
-        return null;
+        return DEFAULT;
     }
 }

File: cameraview/src/main/java/com/otaliastudios/cameraview/controls/Engine.java
Patch:
@@ -3,6 +3,7 @@
 
 import com.otaliastudios.cameraview.CameraView;
 
+import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 
 /**
@@ -35,14 +36,14 @@ int value() {
         return value;
     }
 
-    @Nullable
+    @NonNull
     static Engine fromValue(int value) {
         Engine[] list = Engine.values();
         for (Engine action : list) {
             if (action.value() == value) {
                 return action;
             }
         }
-        return null;
+        return DEFAULT;
     }
 }

File: cameraview/src/main/java/com/otaliastudios/cameraview/controls/Flash.java
Patch:
@@ -4,6 +4,7 @@
 import com.otaliastudios.cameraview.CameraOptions;
 import com.otaliastudios.cameraview.CameraView;
 
+import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 
 /**
@@ -56,14 +57,14 @@ int value() {
         return value;
     }
 
-    @Nullable
+    @NonNull
     static Flash fromValue(int value) {
         Flash[] list = Flash.values();
         for (Flash action : list) {
             if (action.value() == value) {
                 return action;
             }
         }
-        return null;
+        return DEFAULT;
     }
 }

File: cameraview/src/main/java/com/otaliastudios/cameraview/controls/Grid.java
Patch:
@@ -3,6 +3,7 @@
 
 import com.otaliastudios.cameraview.CameraView;
 
+import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 
 /**
@@ -46,14 +47,14 @@ int value() {
         return value;
     }
 
-    @Nullable
+    @NonNull
     static Grid fromValue(int value) {
         Grid[] list = Grid.values();
         for (Grid action : list) {
             if (action.value() == value) {
                 return action;
             }
         }
-        return null;
+        return DEFAULT;
     }
 }
\ No newline at end of file

File: cameraview/src/main/java/com/otaliastudios/cameraview/controls/Hdr.java
Patch:
@@ -3,6 +3,7 @@
 
 import com.otaliastudios.cameraview.CameraView;
 
+import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 
 /**
@@ -34,14 +35,14 @@ int value() {
         return value;
     }
 
-    @Nullable
+    @NonNull
     static Hdr fromValue(int value) {
         Hdr[] list = Hdr.values();
         for (Hdr action : list) {
             if (action.value() == value) {
                 return action;
             }
         }
-        return null;
+        return DEFAULT;
     }
 }

File: cameraview/src/main/java/com/otaliastudios/cameraview/controls/Mode.java
Patch:
@@ -3,6 +3,7 @@
 
 import com.otaliastudios.cameraview.CameraView;
 
+import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 
 import java.io.File;
@@ -46,14 +47,14 @@ int value() {
         return value;
     }
 
-    @Nullable
+    @NonNull
     static Mode fromValue(int value) {
         Mode[] list = Mode.values();
         for (Mode action : list) {
             if (action.value() == value) {
                 return action;
             }
         }
-        return null;
+        return DEFAULT;
     }
 }

File: cameraview/src/main/java/com/otaliastudios/cameraview/controls/Preview.java
Patch:
@@ -3,6 +3,7 @@
 
 import com.otaliastudios.cameraview.CameraView;
 
+import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 
 /**
@@ -44,14 +45,14 @@ int value() {
         return value;
     }
 
-    @Nullable
+    @NonNull
     static Preview fromValue(int value) {
         Preview[] list = Preview.values();
         for (Preview action : list) {
             if (action.value() == value) {
                 return action;
             }
         }
-        return null;
+        return DEFAULT;
     }
 }

File: cameraview/src/main/java/com/otaliastudios/cameraview/controls/VideoCodec.java
Patch:
@@ -3,6 +3,7 @@
 
 import com.otaliastudios.cameraview.CameraView;
 
+import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 
 /**
@@ -41,14 +42,14 @@ int value() {
         return value;
     }
 
-    @Nullable
+    @NonNull
     static VideoCodec fromValue(int value) {
         VideoCodec[] list = VideoCodec.values();
         for (VideoCodec action : list) {
             if (action.value() == value) {
                 return action;
             }
         }
-        return null;
+        return DEFAULT;
     }
 }

File: cameraview/src/main/java/com/otaliastudios/cameraview/controls/WhiteBalance.java
Patch:
@@ -4,6 +4,7 @@
 import com.otaliastudios.cameraview.CameraOptions;
 import com.otaliastudios.cameraview.CameraView;
 
+import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 
 /**
@@ -65,14 +66,14 @@ int value() {
         return value;
     }
 
-    @Nullable
+    @NonNull
     static WhiteBalance fromValue(int value) {
         WhiteBalance[] list = WhiteBalance.values();
         for (WhiteBalance action : list) {
             if (action.value() == value) {
                 return action;
             }
         }
-        return null;
+        return DEFAULT;
     }
 }
\ No newline at end of file

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/engine/CameraIntegration1Test.java
Patch:
@@ -3,6 +3,7 @@
 import com.otaliastudios.cameraview.controls.Engine;
 
 import org.junit.Ignore;
+import org.junit.Test;
 import org.junit.runner.RunWith;
 
 import androidx.annotation.NonNull;
@@ -17,8 +18,8 @@
  */
 @RunWith(AndroidJUnit4.class)
 @LargeTest
-@Ignore
-public class Camera2IntegrationTest extends CameraIntegrationTest {
+// @Ignore
+public class CameraIntegration1Test extends CameraIntegrationTest {
 
     @NonNull
     @Override

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/engine/CameraIntegration2Test.java
Patch:
@@ -17,8 +17,8 @@
  */
 @RunWith(AndroidJUnit4.class)
 @LargeTest
-@Ignore
-public class Camera1IntegrationTest extends CameraIntegrationTest {
+// @Ignore
+public class CameraIntegration2Test extends CameraIntegrationTest {
 
     @NonNull
     @Override

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/picture/PictureRecorderTest.java
Patch:
@@ -31,7 +31,7 @@ public void take() {
             }
         };
         recorder.take();
-        Mockito.verify(listener, Mockito.times(1)).onPictureResult(result);
+        Mockito.verify(listener, Mockito.times(1)).onPictureResult(result, null);
         assertNull(recorder.mListener);
         assertNull(recorder.mResult);
     }

File: cameraview/src/main/java/com/otaliastudios/cameraview/engine/Camera1Engine.java
Patch:
@@ -13,6 +13,8 @@
 import androidx.annotation.Nullable;
 import androidx.annotation.VisibleForTesting;
 import androidx.annotation.WorkerThread;
+
+import android.util.Log;
 import android.view.SurfaceHolder;
 
 import com.google.android.gms.tasks.Task;
@@ -506,6 +508,7 @@ public void onPreviewFrame(@NonNull byte[] data, Camera camera) {
 
     @Override
     public void onVideoResult(@Nullable VideoResult.Stub result, @Nullable Exception exception) {
+        super.onVideoResult(result, exception);
         if (result == null) {
             // Something went wrong, lock the camera again.
             mCamera.lock();

File: cameraview/src/main/java/com/otaliastudios/cameraview/video/Full1VideoRecorder.java
Patch:
@@ -2,6 +2,7 @@
 
 import android.hardware.Camera;
 import android.media.MediaRecorder;
+import android.util.Log;
 
 import com.otaliastudios.cameraview.CameraLogger;
 import com.otaliastudios.cameraview.VideoResult;
@@ -44,9 +45,9 @@ protected boolean onPrepareMediaRecorder(@NonNull VideoResult.Stub stub, @NonNul
     }
 
     @Override
-    protected void onStop() {
+    protected void dispatchResult() {
         // Restore frame processing.
         mCamera.setPreviewCallbackWithBuffer(mEngine);
-        super.onStop();
+        super.dispatchResult();
     }
 }

File: cameraview/src/main/java/com/otaliastudios/cameraview/video/VideoRecorder.java
Patch:
@@ -76,7 +76,9 @@ public boolean isRecording() {
     @CallSuper
     protected void dispatchResult() {
         mIsRecording = false;
-        if (mListener != null) mListener.onVideoResult(mResult, mError);
+        if (mListener != null) {
+            mListener.onVideoResult(mResult, mError);
+        }
         mResult = null;
         mError = null;
     }

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/CameraOptions1Test.java
Patch:
@@ -216,9 +216,8 @@ public void testGestureActions() {
         when(params.getMinExposureCompensation()).thenReturn(0);
 
         CameraOptions o = new CameraOptions(params, false);
-        assertFalse(o.supports(GestureAction.FOCUS));
-        assertFalse(o.supports(GestureAction.FOCUS_WITH_MARKER));
-        assertTrue(o.supports(GestureAction.CAPTURE));
+        assertFalse(o.supports(GestureAction.AUTO_FOCUS));
+        assertTrue(o.supports(GestureAction.TAKE_PICTURE));
         assertTrue(o.supports(GestureAction.NONE));
         assertTrue(o.supports(GestureAction.ZOOM));
         assertFalse(o.supports(GestureAction.EXPOSURE_CORRECTION));

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/engine/IntegrationTest.java
Patch:
@@ -19,8 +19,6 @@
 import com.otaliastudios.cameraview.controls.Hdr;
 import com.otaliastudios.cameraview.controls.Mode;
 import com.otaliastudios.cameraview.controls.WhiteBalance;
-import com.otaliastudios.cameraview.engine.Camera1Engine;
-import com.otaliastudios.cameraview.engine.CameraEngine;
 import com.otaliastudios.cameraview.frame.Frame;
 import com.otaliastudios.cameraview.frame.FrameProcessor;
 import com.otaliastudios.cameraview.internal.utils.Task;
@@ -466,7 +464,7 @@ public void testStartAutoFocus() {
         CameraOptions o = waitForOpen(true);
 
         final Task<PointF> focus = new Task<>(true);
-        doEndTask(focus, 0).when(listener).onFocusStart(any(PointF.class));
+        doEndTask(focus, 0).when(listener).onAutoFocusStart(any(PointF.class));
 
         camera.startAutoFocus(1, 1);
         PointF point = focus.await(300);

File: cameraview/src/main/java/com/otaliastudios/cameraview/CameraListener.java
Patch:
@@ -88,7 +88,7 @@ public void onOrientationChanged(int orientation) { }
      * @param point coordinates with respect to CameraView.getWidth() and CameraView.getHeight()
      */
     @UiThread
-    public void onFocusStart(@NonNull PointF point) { }
+    public void onAutoFocusStart(@NonNull PointF point) { }
 
 
     /**
@@ -101,7 +101,7 @@ public void onFocusStart(@NonNull PointF point) { }
      * @param point coordinates with respect to CameraView.getWidth() and CameraView.getHeight()
      */
     @UiThread
-    public void onFocusEnd(boolean successful, @NonNull PointF point) { }
+    public void onAutoFocusEnd(boolean successful, @NonNull PointF point) { }
 
 
     /**

File: cameraview/src/main/java/com/otaliastudios/cameraview/CameraOptions.java
Patch:
@@ -150,10 +150,9 @@ public boolean supports(@NonNull Control control) {
      */
     public boolean supports(@NonNull GestureAction action) {
         switch (action) {
-            case FOCUS:
-            case FOCUS_WITH_MARKER:
+            case AUTO_FOCUS:
                 return isAutoFocusSupported();
-            case CAPTURE:
+            case TAKE_PICTURE:
             case NONE:
                 return true;
             case ZOOM:

File: demo/src/main/java/com/otaliastudios/cameraview/demo/Control.java
Patch:
@@ -100,9 +100,8 @@ public Collection<?> getValues(CameraView view, @NonNull CameraOptions options)
             case LONG_TAP:
                 ArrayList<GestureAction> list2 = new ArrayList<>();
                 addIfSupported(options, list2, GestureAction.NONE);
-                addIfSupported(options, list2, GestureAction.CAPTURE);
-                addIfSupported(options, list2, GestureAction.FOCUS);
-                addIfSupported(options, list2, GestureAction.FOCUS_WITH_MARKER);
+                addIfSupported(options, list2, GestureAction.TAKE_PICTURE);
+                addIfSupported(options, list2, GestureAction.AUTO_FOCUS);
                 return list2;
             case GRID_COLOR:
                 ArrayList<GridColor> list3 = new ArrayList<>();

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/CameraLoggerTest.java
Patch:
@@ -1,6 +1,8 @@
 package com.otaliastudios.cameraview;
 
 
+import com.otaliastudios.cameraview.internal.utils.Task;
+
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import androidx.test.filters.SmallTest;
 

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/CameraUtilsTest.java
Patch:
@@ -6,6 +6,8 @@
 import android.graphics.Bitmap;
 import android.graphics.Color;
 
+import com.otaliastudios.cameraview.internal.utils.Task;
+
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import androidx.test.filters.SmallTest;
 

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/TestActivity.java
Patch:
@@ -12,6 +12,8 @@
 import android.view.WindowManager;
 import android.widget.FrameLayout;
 
+import com.otaliastudios.cameraview.size.Size;
+
 import static android.view.ViewGroup.LayoutParams.*;
 
 public class TestActivity extends Activity {

File: cameraview/src/main/gles/com/otaliastudios/cameraview/EncoderThread.java
Patch:
@@ -1,3 +0,0 @@
-package com.otaliastudios.cameraview;
-
-@interface EncoderThread {}

File: cameraview/src/main/java/com/otaliastudios/cameraview/FileCallback.java
Patch:
@@ -1,7 +1,5 @@
 package com.otaliastudios.cameraview;
 
-import android.graphics.Bitmap;
-
 import java.io.File;
 
 import androidx.annotation.Nullable;

File: cameraview/src/main/java/com/otaliastudios/cameraview/controls/Audio.java
Patch:
@@ -1,6 +1,8 @@
-package com.otaliastudios.cameraview;
+package com.otaliastudios.cameraview.controls;
 
 
+import com.otaliastudios.cameraview.CameraView;
+
 import androidx.annotation.Nullable;
 
 /**

File: cameraview/src/main/java/com/otaliastudios/cameraview/controls/Control.java
Patch:
@@ -1,4 +1,4 @@
-package com.otaliastudios.cameraview;
+package com.otaliastudios.cameraview.controls;
 
 /**
  * Base interface for controls like {@link Audio},

File: cameraview/src/main/java/com/otaliastudios/cameraview/controls/Grid.java
Patch:
@@ -1,6 +1,8 @@
-package com.otaliastudios.cameraview;
+package com.otaliastudios.cameraview.controls;
 
 
+import com.otaliastudios.cameraview.CameraView;
+
 import androidx.annotation.Nullable;
 
 /**

File: cameraview/src/main/java/com/otaliastudios/cameraview/controls/Hdr.java
Patch:
@@ -1,6 +1,8 @@
-package com.otaliastudios.cameraview;
+package com.otaliastudios.cameraview.controls;
 
 
+import com.otaliastudios.cameraview.CameraView;
+
 import androidx.annotation.Nullable;
 
 /**

File: cameraview/src/main/java/com/otaliastudios/cameraview/controls/Mode.java
Patch:
@@ -1,6 +1,8 @@
-package com.otaliastudios.cameraview;
+package com.otaliastudios.cameraview.controls;
 
 
+import com.otaliastudios.cameraview.CameraView;
+
 import androidx.annotation.Nullable;
 
 import java.io.File;

File: cameraview/src/main/java/com/otaliastudios/cameraview/controls/Preview.java
Patch:
@@ -1,6 +1,8 @@
-package com.otaliastudios.cameraview;
+package com.otaliastudios.cameraview.controls;
 
 
+import com.otaliastudios.cameraview.CameraView;
+
 import androidx.annotation.Nullable;
 
 /**

File: cameraview/src/main/java/com/otaliastudios/cameraview/controls/VideoCodec.java
Patch:
@@ -1,7 +1,8 @@
-package com.otaliastudios.cameraview;
+package com.otaliastudios.cameraview.controls;
 
 
-import androidx.annotation.NonNull;
+import com.otaliastudios.cameraview.CameraView;
+
 import androidx.annotation.Nullable;
 
 /**

File: cameraview/src/main/java/com/otaliastudios/cameraview/frame/FrameProcessor.java
Patch:
@@ -1,4 +1,6 @@
-package com.otaliastudios.cameraview;
+package com.otaliastudios.cameraview.frame;
+
+import com.otaliastudios.cameraview.CameraView;
 
 import androidx.annotation.NonNull;
 import androidx.annotation.WorkerThread;

File: cameraview/src/main/java/com/otaliastudios/cameraview/internal/egl/EglCore.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.otaliastudios.cameraview;
+package com.otaliastudios.cameraview.internal.egl;
 
 import android.graphics.SurfaceTexture;
 import android.opengl.EGL14;
@@ -36,7 +36,7 @@
  * The EGLContext must only be attached to one thread at a time.  This class is not thread-safe.
  */
 @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR2)
-final class EglCore {
+public final class EglCore {
     private static final String TAG = EglCore.class.getSimpleName();
 
     /**

File: cameraview/src/main/java/com/otaliastudios/cameraview/internal/egl/EglWindowSurface.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.otaliastudios.cameraview;
+package com.otaliastudios.cameraview.internal.egl;
 
 import android.graphics.SurfaceTexture;
 import android.os.Build;
@@ -27,7 +27,7 @@
  * It's good practice to explicitly release() the surface, preferably from a "finally" block.
  */
 @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR2)
-class EglWindowSurface extends EglBaseSurface {
+public class EglWindowSurface extends EglBaseSurface {
     private Surface mSurface;
     private boolean mReleaseSurface;
 

File: cameraview/src/main/java/com/otaliastudios/cameraview/size/SizeSelector.java
Patch:
@@ -1,4 +1,4 @@
-package com.otaliastudios.cameraview;
+package com.otaliastudios.cameraview.size;
 
 import androidx.annotation.NonNull;
 

File: cameraview/src/main/java/com/otaliastudios/cameraview/size/SizeSelectors.java
Patch:
@@ -1,4 +1,4 @@
-package com.otaliastudios.cameraview;
+package com.otaliastudios.cameraview.size;
 
 import androidx.annotation.NonNull;
 

File: cameraview/src/main/java/com/otaliastudios/cameraview/video/encoding/VideoMediaEncoder.java
Patch:
@@ -1,4 +1,4 @@
-package com.otaliastudios.cameraview;
+package com.otaliastudios.cameraview.video.encoding;
 
 import android.media.MediaCodec;
 import android.media.MediaCodecInfo;

File: cameraview/src/main/views/com/otaliastudios/cameraview/RendererThread.java
Patch:
@@ -1,3 +0,0 @@
-package com.otaliastudios.cameraview;
-
-@interface RendererThread {}

File: cameraview/src/test/java/com/otaliastudios/cameraview/size/AspectRatioTest.java
Patch:
@@ -1,5 +1,4 @@
-package com.otaliastudios.cameraview;
-
+package com.otaliastudios.cameraview.size;
 
 import org.junit.Test;
 
@@ -47,7 +46,7 @@ public void testCompare() {
     @Test
     public void testInverse() {
         AspectRatio ratio = AspectRatio.of(50, 10);
-        AspectRatio inverse = ratio.inverse();
+        AspectRatio inverse = ratio.flip();
         assertEquals(inverse.getX(), 1f, 0);
         assertEquals(inverse.getY(), 5f, 0);
     }

File: cameraview/src/test/java/com/otaliastudios/cameraview/size/SizeSelectorsTest.java
Patch:
@@ -1,5 +1,4 @@
-package com.otaliastudios.cameraview;
-
+package com.otaliastudios.cameraview.size;
 
 import androidx.annotation.NonNull;
 

File: cameraview/src/test/java/com/otaliastudios/cameraview/size/SizeTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.otaliastudios.cameraview;
+package com.otaliastudios.cameraview.size;
 
 
 import org.junit.Test;

File: demo/src/main/java/com/otaliastudios/cameraview/demo/PicturePreviewActivity.java
Patch:
@@ -9,7 +9,7 @@
 import android.util.Log;
 import android.widget.ImageView;
 
-import com.otaliastudios.cameraview.AspectRatio;
+import com.otaliastudios.cameraview.size.AspectRatio;
 import com.otaliastudios.cameraview.BitmapCallback;
 import com.otaliastudios.cameraview.PictureResult;
 

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/VideoRecorderTest.java
Patch:
@@ -28,7 +28,7 @@ void stop() {
         };
         recorder.start();
         recorder.stop();
-        Mockito.verify(listener, Mockito.times(1)).onVideoResult(result);
+        Mockito.verify(listener, Mockito.times(1)).onVideoResult(result, null);
         assertNull(recorder.mListener);
         assertNull(recorder.mResult);
     }

File: cameraview/src/main/java/com/otaliastudios/cameraview/CameraView.java
Patch:
@@ -104,7 +104,7 @@ private void init(@NonNull Context context, @Nullable AttributeSet attrs) {
         Facing facing = Facing.fromValue(a.getInteger(R.styleable.CameraView_cameraFacing, Facing.DEFAULT(context).value()));
         Flash flash = Flash.fromValue(a.getInteger(R.styleable.CameraView_cameraFlash, Flash.DEFAULT.value()));
         Grid grid = Grid.fromValue(a.getInteger(R.styleable.CameraView_cameraGrid, Grid.DEFAULT.value()));
-        int gridColor = a.getColor(R.styleable.CameraView_cameraGrid, GridLinesLayout.DEFAULT_COLOR);
+        int gridColor = a.getColor(R.styleable.CameraView_cameraGridColor, GridLinesLayout.DEFAULT_COLOR);
         WhiteBalance whiteBalance = WhiteBalance.fromValue(a.getInteger(R.styleable.CameraView_cameraWhiteBalance, WhiteBalance.DEFAULT.value()));
         Mode mode = Mode.fromValue(a.getInteger(R.styleable.CameraView_cameraMode, Mode.DEFAULT.value()));
         Hdr hdr = Hdr.fromValue(a.getInteger(R.styleable.CameraView_cameraHdr, Hdr.DEFAULT.value()));

File: cameraview/src/main/java/com/otaliastudios/cameraview/CameraController.java
Patch:
@@ -91,7 +91,7 @@ abstract class CameraController implements
         mFrameManager = new FrameManager(2, this);
     }
 
-    void setPreview(CameraPreview cameraPreview) {
+    void setPreview(@NonNull CameraPreview cameraPreview) {
         mPreview = cameraPreview;
         mPreview.setSurfaceCallback(this);
     }

File: cameraview/src/main/java/com/otaliastudios/cameraview/CameraView.java
Patch:
@@ -602,7 +602,6 @@ public void setLifecycleOwner(@NonNull LifecycleOwner owner) {
     public void open() {
         if (!isEnabled()) return;
         if (mCameraPreview != null) mCameraPreview.onResume();
-
         if (checkPermissions(getAudio())) {
             // Update display orientation for current CameraController
             mOrientationHelper.enable(getContext());

File: cameraview/src/main/gles/com/otaliastudios/cameraview/EglBaseSurface.java
Patch:
@@ -151,6 +151,7 @@ public boolean swapBuffers() {
 
     /**
      * Sends the presentation time stamp to EGL.
+     * https://www.khronos.org/registry/EGL/extensions/ANDROID/EGL_ANDROID_presentation_time.txt
      *
      * @param nsecs Timestamp, in nanoseconds.
      */

File: cameraview/src/main/gles/com/otaliastudios/cameraview/EglCore.java
Patch:
@@ -314,6 +314,7 @@ public boolean swapBuffers(EGLSurface eglSurface) {
 
     /**
      * Sends the presentation time stamp to EGL.  Time is expressed in nanoseconds.
+     * https://www.khronos.org/registry/EGL/extensions/ANDROID/EGL_ANDROID_presentation_time.txt
      */
     public void setPresentationTime(EGLSurface eglSurface, long nsecs) {
         EGLExt.eglPresentationTimeANDROID(mEGLDisplay, eglSurface, nsecs);

File: cameraview/src/main/java/com/otaliastudios/cameraview/VideoRecorder.java
Patch:
@@ -22,6 +22,7 @@ abstract class VideoRecorder {
 
     abstract void stop();
 
+    @SuppressWarnings("WeakerAccess")
     protected void dispatchResult() {
         if (mListener != null) {
             mListener.onVideoResult(mResult);

File: demo/src/main/java/com/otaliastudios/cameraview/demo/CameraActivity.java
Patch:
@@ -2,6 +2,7 @@
 
 import android.content.Intent;
 import android.content.pm.PackageManager;
+import android.net.Uri;
 import android.os.Bundle;
 import androidx.annotation.NonNull;
 import com.google.android.material.bottomsheet.BottomSheetBehavior;

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/CameraViewCallbacksTest.java
Patch:
@@ -62,7 +62,7 @@ protected CameraPreview instantiatePreview(Context context, ViewGroup container)
                     }
 
                     @Override
-                    protected boolean checkPermissions(@NonNull Mode mode, @NonNull Audio audio) {
+                    protected boolean checkPermissions(@NonNull Audio audio) {
                         return true;
                     }
                 };

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/CameraViewTest.java
Patch:
@@ -50,7 +50,7 @@ protected CameraPreview instantiatePreview(Context context, ViewGroup container)
                     }
 
                     @Override
-                    protected boolean checkPermissions(@NonNull Mode mode, @NonNull Audio audio) {
+                    protected boolean checkPermissions(@NonNull Audio audio) {
                         return hasPermissions;
                     }
                 };

File: cameraview/src/main/java/com/otaliastudios/cameraview/CameraView.java
Patch:
@@ -1068,7 +1068,7 @@ public void startAutoFocus(float x, float y) {
     /**
      * <strong>ADVANCED FEATURE</strong> - sets a size selector for the preview stream.
      * The {@link SizeSelector} will be invoked with the list of available sizes, and the first
-     * acceptable size will be accepted and passed to the internal engine & surface.
+     * acceptable size will be accepted and passed to the internal engine and surface.
      *
      * This is typically NOT NEEDED. The default size selector is already smart enough to respect
      * the picture/video output aspect ratio, and be bigger than the surface so that there is no

File: cameraview/src/main/utils/com/otaliastudios/cameraview/CameraUtils.java
Patch:
@@ -121,6 +121,7 @@ public void run() {
      * is that this cares about orientation, reading it from the EXIF header.
      *
      * @param source a JPEG byte array
+     * @return decoded bitmap or null if error is encountered
      */
     @SuppressWarnings("WeakerAccess")
     @Nullable
@@ -223,6 +224,7 @@ static Bitmap decodeBitmap(@NonNull byte[] source, int maxWidth, int maxHeight)
      * @param maxWidth the max allowed width
      * @param maxHeight the max allowed height
      * @param options the options to be passed to decodeByteArray
+     * @return decoded bitmap or null if error is encountered
      */
     @SuppressWarnings({"SuspiciousNameCombination", "WeakerAccess"})
     @Nullable

File: cameraview/src/main/java/com/otaliastudios/cameraview/CameraView.java
Patch:
@@ -1330,7 +1330,7 @@ public void run() {
      * @param durationMillis recording max duration
      *
      */
-    public void takeVideo(@Nullable File file, int durationMillis) {
+    public void takeVideo(@NonNull File file, int durationMillis) {
         final int old = getVideoMaxDuration();
         addCameraListener(new CameraListener() {
             @Override
@@ -1365,7 +1365,7 @@ public void onCameraError(@NonNull CameraException exception) {
      * @param durationMillis recording max duration
      *
      */
-    public void takeVideoSnapshot(@Nullable File file, int durationMillis) {
+    public void takeVideoSnapshot(@NonNull File file, int durationMillis) {
         final int old = getVideoMaxDuration();
         addCameraListener(new CameraListener() {
             @Override

File: cameraview/src/main/java/com/otaliastudios/cameraview/PictureResult.java
Patch:
@@ -1,5 +1,6 @@
 package com.otaliastudios.cameraview;
 
+import android.graphics.BitmapFactory;
 import android.location.Location;
 
 import java.io.File;
@@ -97,7 +98,7 @@ public int getFormat() {
      * @param callback a callback to be notified of image decoding
      */
     public void toBitmap(int maxWidth, int maxHeight, @NonNull BitmapCallback callback) {
-        CameraUtils.decodeBitmap(getData(), maxWidth, maxHeight, rotation, callback);
+        CameraUtils.decodeBitmap(getData(), maxWidth, maxHeight, new BitmapFactory.Options(), rotation, callback);
     }
 
     /**

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/CameraLoggerTest.java
Patch:
@@ -1,8 +1,8 @@
 package com.otaliastudios.cameraview;
 
 
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import androidx.test.filters.SmallTest;
-import androidx.test.runner.AndroidJUnit4;
 
 import org.junit.After;
 import org.junit.Before;

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/CameraOptions1Test.java
Patch:
@@ -2,8 +2,9 @@
 
 
 import android.hardware.Camera;
+
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import androidx.test.filters.SmallTest;
-import androidx.test.runner.AndroidJUnit4;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -283,6 +284,7 @@ public void testBooleanFlags() {
         Camera.Parameters params = mock(Camera.Parameters.class);
         when(params.isVideoSnapshotSupported()).thenReturn(true);
         when(params.isZoomSupported()).thenReturn(true);
+        //noinspection ArraysAsListWithZeroOrOneArgument
         when(params.getSupportedFocusModes()).thenReturn(Arrays.asList(Camera.Parameters.FOCUS_MODE_AUTO));
         CameraOptions o = new CameraOptions(params, false);
         assertTrue(o.isZoomSupported());

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/CropHelperTest.java
Patch:
@@ -2,8 +2,9 @@
 
 
 import android.graphics.Rect;
+
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import androidx.test.filters.SmallTest;
-import androidx.test.runner.AndroidJUnit4;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/GestureLayoutTest.java
Patch:
@@ -28,7 +28,9 @@ public abstract class GestureLayoutTest<T extends GestureLayout> extends BaseTes
     @Rule
     public ActivityTestRule<TestActivity> rule = new ActivityTestRule<>(TestActivity.class);
 
+    @SuppressWarnings("WeakerAccess")
     protected T layout;
+    @SuppressWarnings("WeakerAccess")
     protected Task<Gesture> touch;
 
     @Before
@@ -54,6 +56,7 @@ public boolean onTouch(View view, MotionEvent motionEvent) {
         });
     }
 
+    @SuppressWarnings("WeakerAccess")
     protected final ViewInteraction onLayout() {
         return onView(Matchers.<View>is(layout))
                 .inRoot(RootMatchers.withDecorView(

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/GlCameraPreviewTest.java
Patch:
@@ -2,8 +2,9 @@
 
 
 import android.content.Context;
+
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import androidx.test.filters.SmallTest;
-import androidx.test.runner.AndroidJUnit4;
 import android.view.ViewGroup;
 
 import org.junit.runner.RunWith;

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/GridLinesLayoutTest.java
Patch:
@@ -1,9 +1,9 @@
 package com.otaliastudios.cameraview;
 
 
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import androidx.test.filters.MediumTest;
 import androidx.test.rule.ActivityTestRule;
-import androidx.test.runner.AndroidJUnit4;
 
 import org.junit.Before;
 import org.junit.Rule;

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/Mapper1Test.java
Patch:
@@ -2,8 +2,9 @@
 
 
 import android.hardware.Camera;
+
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import androidx.test.filters.SmallTest;
-import androidx.test.runner.AndroidJUnit4;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/OrientationHelperTest.java
Patch:
@@ -1,8 +1,8 @@
 package com.otaliastudios.cameraview;
 
 
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import androidx.test.filters.SmallTest;
-import androidx.test.runner.AndroidJUnit4;
 import android.view.OrientationEventListener;
 
 import org.junit.After;

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/PictureRecorderTest.java
Patch:
@@ -1,8 +1,8 @@
 package com.otaliastudios.cameraview;
 
 
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import androidx.test.filters.SmallTest;
-import androidx.test.runner.AndroidJUnit4;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/PinchGestureLayoutTest.java
Patch:
@@ -3,8 +3,8 @@
 
 import android.content.Context;
 import androidx.test.espresso.ViewAction;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import androidx.test.filters.SmallTest;
-import androidx.test.runner.AndroidJUnit4;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/ScrollGestureLayoutTest.java
Patch:
@@ -3,8 +3,8 @@
 
 import android.content.Context;
 import androidx.test.espresso.ViewAction;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import androidx.test.filters.SmallTest;
-import androidx.test.runner.AndroidJUnit4;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/SurfaceCameraPreviewTest.java
Patch:
@@ -2,10 +2,12 @@
 
 
 import android.content.Context;
+
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import androidx.test.filters.SmallTest;
-import androidx.test.runner.AndroidJUnit4;
 import android.view.ViewGroup;
 
+import org.junit.Test;
 import org.junit.runner.RunWith;
 
 @RunWith(AndroidJUnit4.class)

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/TapGestureLayoutTest.java
Patch:
@@ -6,8 +6,8 @@
 import androidx.test.espresso.action.GeneralLocation;
 import androidx.test.espresso.action.Press;
 import androidx.test.espresso.action.Tap;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import androidx.test.filters.SmallTest;
-import androidx.test.runner.AndroidJUnit4;
 import android.view.InputDevice;
 import android.view.MotionEvent;
 

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/TextureCameraPreviewTest.java
Patch:
@@ -2,8 +2,9 @@
 
 
 import android.content.Context;
+
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import androidx.test.filters.SmallTest;
-import androidx.test.runner.AndroidJUnit4;
 import android.view.ViewGroup;
 
 import org.junit.runner.RunWith;

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/VideoRecorderTest.java
Patch:
@@ -1,8 +1,8 @@
 package com.otaliastudios.cameraview;
 
 
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import androidx.test.filters.SmallTest;
-import androidx.test.runner.AndroidJUnit4;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/VideoResultTest.java
Patch:
@@ -2,8 +2,9 @@
 
 
 import android.location.Location;
+
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import androidx.test.filters.SmallTest;
-import androidx.test.runner.AndroidJUnit4;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/WorkerHandlerTest.java
Patch:
@@ -1,8 +1,8 @@
 package com.otaliastudios.cameraview;
 
 
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import androidx.test.filters.SmallTest;
-import androidx.test.runner.AndroidJUnit4;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -18,8 +18,8 @@ public void testCache() {
         WorkerHandler w1 = WorkerHandler.get("handler1");
         WorkerHandler w1a = WorkerHandler.get("handler1");
         WorkerHandler w2 = WorkerHandler.get("handler2");
-        assertTrue(w1 == w1a);
-        assertFalse(w1 == w2);
+        assertSame(w1, w1a);
+        assertNotSame(w1, w2);
     }
 
     @Test

File: cameraview/src/main/utils/com/otaliastudios/cameraview/CameraLogger.java
Patch:
@@ -149,11 +149,11 @@ private void log(@LogLevel int level, @NonNull Object... data) {
             message.append(String.valueOf(object));
             message.append(" ");
         }
+        String string = message.toString().trim();
         for (Logger logger : sLoggers) {
-            logger.log(level, mTag, message.toString().trim(), throwable);
+            logger.log(level, mTag, string, throwable);
         }
-
-        lastMessage = message.toString();
+        lastMessage = string;
         lastTag = mTag;
     }
 }

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/MockCameraController.java
Patch:
@@ -100,7 +100,7 @@ void takeVideo(@NonNull File file) {
     }
 
     @Override
-    void takeVideoSnapshot(@NonNull File file) {
+    void takeVideoSnapshot(@NonNull File file, @NonNull AspectRatio viewAspectRatio) {
 
     }
 

File: cameraview/src/main/java/com/otaliastudios/cameraview/CameraController.java
Patch:
@@ -339,7 +339,7 @@ final void setAudioBitRate(int audioBitRate) {
 
     abstract void takeVideo(@NonNull File file);
 
-    abstract void takeVideoSnapshot(@NonNull File file);
+    abstract void takeVideoSnapshot(@NonNull File file, @NonNull AspectRatio viewAspectRatio);
 
     abstract void stopVideo();
 
@@ -469,7 +469,7 @@ final int offset(int fromReference, int toReference) {
         }
         // Maybe the sensor is the other.
         if (toReference == REF_SENSOR) {
-            return -offset(toReference, fromReference) + 360;
+            return (-offset(toReference, fromReference) + 360) % 360;
         }
         // None of them is the sensor. Use a difference.
         return (offset(REF_SENSOR, toReference) - offset(REF_SENSOR, fromReference) + 360) % 360;

File: cameraview/src/main/java/com/otaliastudios/cameraview/CameraView.java
Patch:
@@ -1281,10 +1281,11 @@ public void run() {
     }
 
     public void takeVideoSnapshot(@Nullable File file) {
+        if (getWidth() == 0 || getHeight() == 0) return;
         if (file == null) {
             file = new File(getContext().getFilesDir(), "video.mp4");
         }
-        mCameraController.takeVideoSnapshot(file);
+        mCameraController.takeVideoSnapshot(file, AspectRatio.of(getWidth(), getHeight()));
         mUiHandler.post(new Runnable() {
             @Override
             public void run() {

File: cameraview/src/main/java/com/otaliastudios/cameraview/SnapshotVideoRecorder.java
Patch:
@@ -73,6 +73,7 @@ public void onRendererFrame(@NonNull SurfaceTexture surfaceTexture, float scaleX
             if (mResult.videoBitRate <= 0) mResult.videoBitRate = DEFAULT_VIDEO_BITRATE;
             if (mResult.audioBitRate <= 0) mResult.audioBitRate = DEFAULT_AUDIO_BITRATE;
             if (mResult.videoFrameRate <= 0) mResult.videoFrameRate = DEFAULT_VIDEO_FRAMERATE;
+            LOG.w("Creating frame encoder. Rotation:", mResult.rotation);
             TextureMediaEncoder.Config config = new TextureMediaEncoder.Config(width, height,
                     mResult.videoBitRate,
                     mResult.videoFrameRate,
@@ -103,9 +104,9 @@ public void onRendererFrame(@NonNull SurfaceTexture surfaceTexture, float scaleX
         }
 
         if (mCurrentState == STATE_RECORDING && mDesiredState == STATE_NOT_RECORDING) {
+            mCurrentState = STATE_NOT_RECORDING; // before nulling encoderEngine!
             mEncoderEngine.stop();
             mEncoderEngine = null;
-            mCurrentState = STATE_NOT_RECORDING;
             mPreview.removeRendererFrameCallback(SnapshotVideoRecorder.this);
             mPreview = null;
         }

File: cameraview/src/main/java/com/otaliastudios/cameraview/FullVideoRecorder.java
Patch:
@@ -109,6 +109,7 @@ void stop() {
                 mMediaRecorder.stop();
             } catch (Exception e) {
                 // This can happen if stopVideo() is called right after takeVideo(). We don't care.
+                mResult = null;
                 LOG.w("stop:", "Error while closing media recorder. Swallowing", e);
             }
             mMediaRecorder.release();

File: cameraview/src/main/options/com/otaliastudios/cameraview/Gesture.java
Patch:
@@ -1,6 +1,8 @@
 package com.otaliastudios.cameraview;
 
 
+import android.support.annotation.NonNull;
+
 import java.util.Arrays;
 import java.util.List;
 
@@ -74,7 +76,7 @@ public enum Gesture {
 
     private List<GestureAction> mControls;
 
-    boolean isAssignableTo(GestureAction control) {
+    boolean isAssignableTo(@NonNull GestureAction control) {
         return control == GestureAction.NONE || mControls.contains(control);
     }
 

File: demo/src/main/java/com/otaliastudios/cameraview/demo/CameraActivity.java
Patch:
@@ -42,7 +42,7 @@ protected void onCreate(Bundle savedInstanceState) {
         camera = findViewById(R.id.camera);
         camera.setLifecycleOwner(this);
         camera.addCameraListener(new CameraListener() {
-            public void onCameraOpened(CameraOptions options) { onOpened(); }
+            public void onCameraOpened(CameraOptions options) { onOpened(options); }
             public void onPictureTaken(PictureResult result) { onPicture(result); }
             public void onVideoTaken(VideoResult result) { onVideo(result); }
             public void onCameraError(@NonNull CameraException exception) {
@@ -81,11 +81,11 @@ private void message(String content, boolean important) {
         Toast.makeText(this, content, length).show();
     }
 
-    private void onOpened() {
+    private void onOpened(CameraOptions options) {
         ViewGroup group = (ViewGroup) controlPanel.getChildAt(0);
         for (int i = 0; i < group.getChildCount(); i++) {
             ControlView view = (ControlView) group.getChildAt(i);
-            view.onCameraOpened(camera);
+            view.onCameraOpened(camera, options);
         }
     }
 

File: demo/src/main/java/com/otaliastudios/cameraview/demo/Control.java
Patch:
@@ -1,6 +1,7 @@
 package com.otaliastudios.cameraview.demo;
 
 import android.graphics.Color;
+import android.support.annotation.NonNull;
 import android.view.View;
 import android.view.ViewGroup;
 
@@ -64,8 +65,7 @@ public boolean isSectionLast() {
         return last;
     }
 
-    public Collection<?> getValues(CameraView view) {
-        CameraOptions options = view.getCameraOptions();
+    public Collection<?> getValues(CameraView view, @NonNull CameraOptions options) {
         switch (this) {
             case WIDTH:
             case HEIGHT:

File: demo/src/main/java/com/otaliastudios/cameraview/demo/ControlView.java
Patch:
@@ -57,8 +57,8 @@ public Value getValue() {
     }
 
     @SuppressWarnings("all")
-    public void onCameraOpened(CameraView view) {
-        values = new ArrayList(control.getValues(view));
+    public void onCameraOpened(CameraView view, CameraOptions options) {
+        values = new ArrayList(control.getValues(view, options));
         value = (Value) control.getCurrentValue(view);
         valuesStrings = new ArrayList<>();
         for (Value value : values) {

File: cameraview/src/main/java/com/otaliastudios/cameraview/FullPictureRecorder.java
Patch:
@@ -1,8 +1,6 @@
 package com.otaliastudios.cameraview;
 
 import android.hardware.Camera;
-import android.media.CamcorderProfile;
-import android.media.MediaRecorder;
 import android.support.media.ExifInterface;
 
 import java.io.ByteArrayInputStream;
@@ -49,7 +47,7 @@ public void onPictureTaken(byte[] data, final Camera camera) {
                         try {
                             ExifInterface exif = new ExifInterface(new ByteArrayInputStream(data));
                             int exifOrientation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_NORMAL);
-                            exifRotation = CameraUtils.decodeExifOrientation(exifOrientation);
+                            exifRotation = CameraUtils.readExifOrientation(exifOrientation);
                         } catch (IOException e) {
                             exifRotation = 0;
                         }

File: cameraview/src/main/java/com/otaliastudios/cameraview/PictureResult.java
Patch:
@@ -80,7 +80,7 @@ public byte[] getJpeg() {
      * @param callback a callback to be notified of image decoding
      */
     public void asBitmap(int maxWidth, int maxHeight, BitmapCallback callback) {
-        CameraUtils.decodeBitmap(getJpeg(), maxWidth, maxHeight, callback);
+        CameraUtils.decodeBitmap(getJpeg(), maxWidth, maxHeight, rotation, callback);
     }
 
     /**
@@ -91,6 +91,6 @@ public void asBitmap(int maxWidth, int maxHeight, BitmapCallback callback) {
      * @param callback a callback to be notified of image decoding
      */
     public void asBitmap(BitmapCallback callback) {
-        CameraUtils.decodeBitmap(getJpeg(), callback);
+        asBitmap(-1, -1, callback);
     }
 }

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/CameraViewTest.java
Patch:
@@ -107,7 +107,7 @@ public void testNullBeforeStart() {
     public void testDefaults() {
         // CameraController
         assertEquals(cameraView.getFlash(), Flash.DEFAULT);
-        assertEquals(cameraView.getFacing(), Facing.DEFAULT);
+        assertEquals(cameraView.getFacing(), Facing.DEFAULT(context()));
         assertEquals(cameraView.getGrid(), Grid.DEFAULT);
         assertEquals(cameraView.getWhiteBalance(), WhiteBalance.DEFAULT);
         assertEquals(cameraView.getMode(), Mode.DEFAULT);

File: cameraview/src/main/java/com/otaliastudios/cameraview/CameraView.java
Patch:
@@ -99,7 +99,7 @@ private void init(@NonNull Context context, @Nullable AttributeSet attrs) {
         mPreview = Preview.fromValue(a.getInteger(R.styleable.CameraView_cameraPreview, Preview.DEFAULT.value()));
 
         // Camera controller params
-        Facing facing = Facing.fromValue(a.getInteger(R.styleable.CameraView_cameraFacing, Facing.DEFAULT.value()));
+        Facing facing = Facing.fromValue(a.getInteger(R.styleable.CameraView_cameraFacing, Facing.DEFAULT(context).value()));
         Flash flash = Flash.fromValue(a.getInteger(R.styleable.CameraView_cameraFlash, Flash.DEFAULT.value()));
         Grid grid = Grid.fromValue(a.getInteger(R.styleable.CameraView_cameraGrid, Grid.DEFAULT.value()));
         WhiteBalance whiteBalance = WhiteBalance.fromValue(a.getInteger(R.styleable.CameraView_cameraWhiteBalance, WhiteBalance.DEFAULT.value()));

File: demo/src/main/java/com/otaliastudios/cameraview/demo/CameraActivity.java
Patch:
@@ -36,9 +36,6 @@ public class CameraActivity extends AppCompatActivity implements View.OnClickLis
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        getWindow().setFlags(
-                WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED,
-                WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
         setContentView(R.layout.activity_camera);
         CameraLogger.setLogLevel(CameraLogger.LEVEL_VERBOSE);
 

File: cameraview/src/main/gles/com/otaliastudios/cameraview/MediaEncoder.java
Patch:
@@ -77,7 +77,7 @@ void release() {
      */
     protected void encode(final ByteBuffer buffer, final int length, final long presentationTimeUs) {
         final ByteBuffer[] inputBuffers = mMediaCodec.getInputBuffers();
-        while (true) { // TODO: stop if stop() is called!
+        while (true) {
             final int inputBufferIndex = mMediaCodec.dequeueInputBuffer(TIMEOUT_USEC);
             if (inputBufferIndex >= 0) {
                 final ByteBuffer inputBuffer = inputBuffers[inputBufferIndex];

File: cameraview/src/main/gles/com/otaliastudios/cameraview/MediaEncoderEngine.java
Patch:
@@ -74,6 +74,7 @@ void write(int track, ByteBuffer encodedData, MediaCodec.BufferInfo info) {
             if (!mMediaMuxerStarted) {
                 throw new IllegalStateException("Trying to write before muxer started");
             }
+            Log.e("MediaEncoderEngine", "Writing data." + track);
             mMediaMuxer.writeSampleData(track, encodedData, info);
         }
     }
@@ -107,7 +108,6 @@ public void run() {
                 for (MediaEncoder encoder : mEncoders) {
                     encoder.stop();
                 }
-                onStop.run();
                 for (MediaEncoder encoder : mEncoders) {
                     encoder.release();
                 }
@@ -118,6 +118,7 @@ public void run() {
                     mMediaMuxer.release();
                     mMediaMuxer = null;
                 }
+                onStop.run();
                 mMediaMuxerStartCount = 0;
                 mMediaMuxerStarted = false;
             }

File: cameraview/src/main/gles/com/otaliastudios/cameraview/AudioMediaEncoder.java
Patch:
@@ -18,8 +18,8 @@ static class Config {
     }
 
     @Override
-    void prepare(MediaMuxer muxer) {
-        super.prepare(muxer);
+    void prepare(MediaEncoderEngine.Controller controller) {
+        super.prepare(controller);
     }
 
     @Override

File: cameraview/src/main/gles/com/otaliastudios/cameraview/TextureMediaEncoder.java
Patch:
@@ -18,7 +18,7 @@
 @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR2)
 class TextureMediaEncoder extends VideoMediaEncoder<TextureMediaEncoder.Config> {
 
-    public final static String FRAME_EVENT = "frame";
+    final static String FRAME_EVENT = "frame";
 
     static class Frame {
         float[] transform;
@@ -49,8 +49,8 @@ public TextureMediaEncoder(@NonNull Config config) {
     }
 
     @Override
-    void prepare(MediaMuxer muxer) {
-        super.prepare(muxer);
+    void prepare(MediaEncoderEngine.Controller controller) {
+        super.prepare(controller);
         mEglCore = new EglCore(mConfig.eglContext, EglCore.FLAG_RECORDABLE);
         mWindow = new EglWindowSurface(mEglCore, mSurface, true);
         mWindow.makeCurrent(); // drawing will happen on the InputWindowSurface, which

File: cameraview/src/main/gles/com/otaliastudios/cameraview/VideoMediaEncoder.java
Patch:
@@ -43,8 +43,8 @@ static class Config {
     }
 
     @Override
-    void prepare(MediaMuxer muxer) {
-        super.prepare(muxer);
+    void prepare(MediaEncoderEngine.Controller controller) {
+        super.prepare(controller);
         MediaFormat format = MediaFormat.createVideoFormat(mConfig.mimeType, mConfig.width, mConfig.height);
 
         // Set some properties.  Failing to specify some of these can cause the MediaCodec

File: cameraview/src/main/java/com/otaliastudios/cameraview/Camera1.java
Patch:
@@ -697,7 +697,7 @@ public void run() {
                 // So it looks like REF_VIEW REF_OUTPUT is the correct one, meaning that
                 // the input data in this case is not in the REF_SENSOR coordinates but rather
                 // in the REF_VIEW ones.
-                videoResult.size = finalSize;
+                videoResult.size = flip(REF_VIEW, REF_OUTPUT) ? finalSize.flip() : finalSize;
                 videoResult.rotation = offset(REF_VIEW, REF_OUTPUT);
                 videoResult.audio = mAudio;
                 videoResult.maxSize = mVideoMaxSize;

File: cameraview/src/main/java/com/otaliastudios/cameraview/SnapshotVideoRecorder.java
Patch:
@@ -64,9 +64,7 @@ public void onRendererTextureCreated(int textureId) {
     @Override
     public void onRendererFrame(SurfaceTexture surfaceTexture, float scaleX, float scaleY) {
         if (mCurrentState == STATE_NOT_RECORDING && mDesiredState == STATE_RECORDING) {
-            // Size must be flipped based on rotation, because we will rotate the texture in the encoder
-            Size size = mResult.getRotation() % 180 == 0 ? mResult.getSize() : mResult.getSize().flip();
-            // size = mResult.size;
+            Size size = mResult.getSize();
             // Ensure width and height are divisible by 2, as I have read somewhere.
             int width = size.getWidth();
             int height = size.getHeight();

File: cameraview/src/main/gles/com/otaliastudios/cameraview/VideoCoreEncoder.java
Patch:
@@ -58,7 +58,7 @@ class VideoCoreEncoder {
     /**
      * Configures encoder and muxer state, and prepares the input Surface.
      */
-    public VideoCoreEncoder(int width, int height, int bitRate, int frameRate, File outputFile)
+    public VideoCoreEncoder(int width, int height, int bitRate, int frameRate, int rotation, File outputFile)
             throws IOException {
         mBufferInfo = new MediaCodec.BufferInfo();
 
@@ -71,6 +71,7 @@ public VideoCoreEncoder(int width, int height, int bitRate, int frameRate, File
         format.setInteger(MediaFormat.KEY_BIT_RATE, bitRate);
         format.setInteger(MediaFormat.KEY_FRAME_RATE, frameRate);
         format.setInteger(MediaFormat.KEY_I_FRAME_INTERVAL, 5);
+        format.setInteger("rotation-degrees", rotation);
 
         // Create a MediaCodec encoder, and configure it with our format.  Get a Surface
         // we can use for input and wrap it with a class that handles the EGL work.

File: demo/src/main/java/com/otaliastudios/cameraview/demo/Control.java
Patch:
@@ -63,6 +63,7 @@ public Collection<?> getValues(CameraView view) {
                 int boundary = this == WIDTH ? root.getWidth() : root.getHeight();
                 if (boundary == 0) boundary = 1000;
                 int step = boundary / 10;
+                // list.add(this == WIDTH ? 12 : 16);
                 list.add(ViewGroup.LayoutParams.WRAP_CONTENT);
                 list.add(ViewGroup.LayoutParams.MATCH_PARENT);
                 for (int i = step; i < boundary; i += step) {

File: cameraview/src/main/java/com/otaliastudios/cameraview/MediaRecorderVideoRecorder.java
Patch:
@@ -24,6 +24,9 @@ class MediaRecorderVideoRecorder extends VideoRecorder {
         mMediaRecorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);
         mProfile = CamcorderProfile.get(cameraId, CamcorderProfile.QUALITY_HIGH);
         // TODO: should get a profile of a quality compatible with the chosen size.
+        // Might do this by inspecting mResult.getSize(). However, it is not super important.
+        // We are only bound to respect the video size passed by the VideoSizeSelector, and
+        // we are doing that below.
     }
 
     // Camera2 constructor here...

File: cameraview/src/main/views/com/otaliastudios/cameraview/GLCameraPreview.java
Patch:
@@ -192,8 +192,8 @@ boolean supportsCropping() {
         return true;
     }
 
-    private float mScaleX = 1F;
-    private float mScaleY = 1F;
+    /* for tests */ float mScaleX = 1F;
+    /* for tests */ float mScaleY = 1F;
 
     /**
      * To crop in GL, we could actually use view.setScaleX and setScaleY, but only from Android N onward.

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/CameraPreviewTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import static org.mockito.Mockito.*;
 
-public abstract class PreviewTest extends BaseTest {
+public abstract class CameraPreviewTest extends BaseTest {
 
     protected abstract CameraPreview createPreview(Context context, ViewGroup parent, CameraPreview.SurfaceCallback callback);
 

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/SurfaceCameraPreviewTest.java
Patch:
@@ -10,7 +10,7 @@
 
 @RunWith(AndroidJUnit4.class)
 @SmallTest
-public class SurfaceCameraPreviewTest extends PreviewTest {
+public class SurfaceCameraPreviewTest extends CameraPreviewTest {
 
     @Override
     protected CameraPreview createPreview(Context context, ViewGroup parent, CameraPreview.SurfaceCallback callback) {

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/TextureCameraPreviewTest.java
Patch:
@@ -10,7 +10,7 @@
 
 @RunWith(AndroidJUnit4.class)
 @SmallTest
-public class TextureCameraPreviewTest extends PreviewTest {
+public class TextureCameraPreviewTest extends CameraPreviewTest {
 
     @Override
     protected CameraPreview createPreview(Context context, ViewGroup parent, CameraPreview.SurfaceCallback callback) {

File: cameraview/src/main/java/com/otaliastudios/cameraview/Camera1.java
Patch:
@@ -205,7 +205,7 @@ void onStop() {
         mFrameManager.release();
 
         if (mCamera != null) {
-            LOG.i("onStop:", "Clean up.", "Ending video.");
+            LOG.i("onStop:", "Clean up.", "Ending video. mVideoRecorder is null?", mVideoRecorder == null);
             if (mVideoRecorder != null) {
                 mVideoRecorder.stop();
                 mVideoRecorder = null;
@@ -655,6 +655,7 @@ void stopVideo() {
             @Override
             public void run() {
                 mIsTakingVideo = false;
+                LOG.i("stopVideo", "mVideoRecorder is null?", mVideoRecorder == null);
                 if (mVideoRecorder != null) {
                     mVideoRecorder.stop();
                     mVideoRecorder = null;

File: cameraview/src/main/java/com/otaliastudios/cameraview/MediaRecorderVideoRecorder.java
Patch:
@@ -75,7 +75,7 @@ public void onInfo(MediaRecorder mediaRecorder, int what, int extra) {
     }
 
     @Override
-    void stop() {
+    void close() {
         if (mMediaRecorder != null) {
             try {
                 mMediaRecorder.stop();
@@ -85,8 +85,6 @@ void stop() {
             }
             mMediaRecorder.release();
         }
-
-        super.stop();
         mProfile = null;
         mMediaRecorder = null;
     }

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/CameraViewCallbacksTest.java
Patch:
@@ -2,8 +2,6 @@
 
 
 import android.content.Context;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
 import android.graphics.PointF;
 import android.support.test.filters.MediumTest;
 import android.support.test.runner.AndroidJUnit4;
@@ -63,7 +61,7 @@ protected CameraPreview instantiatePreview(Context context, ViewGroup container)
                     }
 
                     @Override
-                    protected boolean checkPermissions(SessionType sessionType, Audio audio) {
+                    protected boolean checkPermissions(Mode mode, Audio audio) {
                         return true;
                     }
                 };

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/MockCameraController.java
Patch:
@@ -72,8 +72,8 @@ void setVideoQuality(VideoQuality videoQuality) {
     }
 
     @Override
-    void setSessionType(SessionType sessionType) {
-        mSessionType = sessionType;
+    void setMode(Mode mode) {
+        mMode = mode;
     }
 
     @Override

File: cameraview/src/main/java/com/otaliastudios/cameraview/Camera2.java
Patch:
@@ -36,7 +36,7 @@ void onStop() {
     }
 
     @Override
-    void setSessionType(SessionType sessionType) {
+    void setMode(Mode mode) {
 
     }
 

File: demo/src/main/java/com/otaliastudios/cameraview/demo/CameraActivity.java
Patch:
@@ -18,7 +18,7 @@
 import com.otaliastudios.cameraview.CameraOptions;
 import com.otaliastudios.cameraview.CameraView;
 import com.otaliastudios.cameraview.PictureResult;
-import com.otaliastudios.cameraview.SessionType;
+import com.otaliastudios.cameraview.Mode;
 import com.otaliastudios.cameraview.VideoResult;
 
 import java.io.File;
@@ -163,7 +163,7 @@ private void capturePictureSnapshot() {
     }
 
     private void captureVideo() {
-        if (camera.getSessionType() != SessionType.VIDEO) {
+        if (camera.getMode() != Mode.VIDEO) {
             message("Can't record video while session type is 'picture'.", false);
             return;
         }

File: cameraview/src/main/java/com/otaliastudios/cameraview/CameraView.java
Patch:
@@ -47,7 +47,6 @@ public class CameraView extends FrameLayout implements LifecycleObserver {
 
     public final static int PERMISSION_REQUEST_CODE = 16;
 
-    final static boolean DEFAULT_CROP_OUTPUT = false;
     final static boolean DEFAULT_PLAY_SOUNDS = true;
 
     // Self managed parameters
@@ -73,7 +72,6 @@ public class CameraView extends FrameLayout implements LifecycleObserver {
 
     // Threading
     private Handler mUiHandler;
-    private WorkerHandler mWorkerHandler;
     private WorkerHandler mFrameProcessorsHandler;
 
     public CameraView(@NonNull Context context) {
@@ -152,7 +150,6 @@ private void init(@NonNull Context context, @Nullable AttributeSet attrs) {
         mCameraCallbacks = new Callbacks();
         mCameraController = instantiateCameraController(mCameraCallbacks);
         mUiHandler = new Handler(Looper.getMainLooper());
-        mWorkerHandler = WorkerHandler.get("CameraViewWorker");
         mFrameProcessorsHandler = WorkerHandler.get("FrameProcessorsWorker");
 
         // Views

File: cameraview/src/main/java/com/otaliastudios/cameraview/Camera1.java
Patch:
@@ -688,7 +688,7 @@ private void initMediaRecorder() {
         mMediaRecorder.setOutputFormat(profile.fileFormat);
         mMediaRecorder.setVideoFrameRate(profile.videoFrameRate);
         mMediaRecorder.setVideoSize(profile.videoFrameWidth, profile.videoFrameHeight);
-        mMediaRecorder.setVideoEncoder(profile.videoCodec);
+        mMediaRecorder.setVideoEncoder(mMapper.map(mVideoCodec));
         mMediaRecorder.setVideoEncodingBitRate(profile.videoBitRate);
         if (mAudio == Audio.ON) {
             mMediaRecorder.setAudioChannels(profile.audioChannels);

File: cameraview/src/main/views/com/otaliastudios/cameraview/SurfaceCameraPreview.java
Patch:
@@ -26,7 +26,7 @@ class SurfaceCameraPreview extends CameraPreview<View, SurfaceHolder> {
     @NonNull
     @Override
     protected View onCreateView(Context context, ViewGroup parent) {
-        View root = LayoutInflater.from(context).inflate(R.layout.surface_view, parent, false);
+        View root = LayoutInflater.from(context).inflate(R.layout.cameraview_surface_view, parent, false);
         parent.addView(root, 0);
         mSurfaceView = root.findViewById(R.id.surface_view);
         final SurfaceHolder holder = mSurfaceView.getHolder();

File: cameraview/src/main/views/com/otaliastudios/cameraview/TapGestureLayout.java
Patch:
@@ -57,7 +57,7 @@ public void onLongPress(MotionEvent e) {
 
 
         // Views to draw the focus marker.
-        LayoutInflater.from(getContext()).inflate(R.layout.layout_focus_marker, this);
+        LayoutInflater.from(getContext()).inflate(R.layout.cameraview_layout_focus_marker, this);
         mFocusMarkerContainer = findViewById(R.id.focusMarkerContainer);
         mFocusMarkerFill = findViewById(R.id.fill);
     }

File: cameraview/src/main/views/com/otaliastudios/cameraview/TextureCameraPreview.java
Patch:
@@ -21,7 +21,7 @@ class TextureCameraPreview extends CameraPreview<TextureView, SurfaceTexture> {
     @NonNull
     @Override
     protected TextureView onCreateView(Context context, ViewGroup parent) {
-        View root = LayoutInflater.from(context).inflate(R.layout.texture_view, parent, false);
+        View root = LayoutInflater.from(context).inflate(R.layout.cameraview_texture_view, parent, false);
         parent.addView(root, 0);
         TextureView texture = root.findViewById(R.id.texture_view);
         texture.setSurfaceTextureListener(new TextureView.SurfaceTextureListener() {

File: cameraview/src/main/java/com/otaliastudios/cameraview/CameraController.java
Patch:
@@ -488,7 +488,7 @@ protected final Size computePreviewSize(List<Size> previewSizes) {
                 SizeSelectors.minWidth(targetMinSize.getWidth()));
         SizeSelector matchAll = SizeSelectors.or(
                 SizeSelectors.and(matchRatio, matchSize),
-                matchRatio, // If couldn't match both, match ratio.
+                SizeSelectors.and(matchRatio, SizeSelectors.biggest()), // If couldn't match both, match ratio and biggest.
                 SizeSelectors.biggest() // If couldn't match any, take the biggest.
         );
         Size result = matchAll.select(previewSizes).get(0);

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/IntegrationTest.java
Patch:
@@ -490,7 +490,7 @@ public void testCapturePicture_size() throws Exception {
         camera.setCropOutput(false);
         waitForOpen(true);
 
-        Size size = camera.getCaptureSize();
+        Size size = camera.getPictureSize();
         camera.capturePicture();
         byte[] jpeg = waitForPicture(true);
         Bitmap b = CameraUtils.decodeBitmap(jpeg, Integer.MAX_VALUE, Integer.MAX_VALUE);

File: cameraview/src/main/options/com/otaliastudios/cameraview/SessionType.java
Patch:
@@ -16,7 +16,7 @@ public enum SessionType {
      *
      * - Trying to take videos in this session will throw an exception
      * - Only the camera permission is requested
-     * - Preview and capture size is chosen as the max available size
+     * - Capture size is chosen according to the current picture size selector
      */
     PICTURE(0),
 
@@ -26,7 +26,7 @@ public enum SessionType {
      * - Trying to take pictures in this session will work, though with lower quality
      * - Trying to take pictures while recording a video will work if supported
      * - Camera and audio record permissions are requested
-     * - Preview and capture size are chosen to respect the {@link VideoQuality} aspect ratio
+     * - Capture size is chosen trying to respect the {@link VideoQuality} aspect ratio
      *
      * @see CameraOptions#isVideoSnapshotSupported()
      */

File: demo/src/main/java/com/otaliastudios/cameraview/demo/CameraActivity.java
Patch:
@@ -102,7 +102,7 @@ private void onPicture(byte[] jpeg) {
 
         // This can happen if picture was taken with a gesture.
         if (mCaptureTime == 0) mCaptureTime = callbackTime - 300;
-        if (mCaptureNativeSize == null) mCaptureNativeSize = camera.getCaptureSize();
+        if (mCaptureNativeSize == null) mCaptureNativeSize = camera.getPictureSize();
 
         PicturePreviewActivity.setImage(jpeg);
         Intent intent = new Intent(CameraActivity.this, PicturePreviewActivity.class);
@@ -151,7 +151,7 @@ private void capturePhoto() {
         if (mCapturingPicture) return;
         mCapturingPicture = true;
         mCaptureTime = System.currentTimeMillis();
-        mCaptureNativeSize = camera.getCaptureSize();
+        mCaptureNativeSize = camera.getPictureSize();
         message("Capturing picture...", false);
         camera.capturePicture();
     }

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/CameraUtilsTest.java
Patch:
@@ -48,8 +48,7 @@ private Task<Bitmap> encodeDecodeTask(Bitmap source, final int maxWidth, final i
         source.compress(Bitmap.CompressFormat.PNG, 100, os);
         final byte[] data = os.toByteArray();
 
-        final Task<Bitmap> decode = new Task<>();
-        decode.listen();
+        final Task<Bitmap> decode = new Task<>(true);
         final CameraUtils.BitmapCallback callback = new CameraUtils.BitmapCallback() {
             @Override
             public void onBitmapReady(Bitmap bitmap) {

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/CameraViewTest.java
Patch:
@@ -92,10 +92,10 @@ public void testDefaults() {
         assertEquals(cameraView.getAudio(), Audio.DEFAULT);
         assertEquals(cameraView.getVideoQuality(), VideoQuality.DEFAULT);
         assertEquals(cameraView.getLocation(), null);
-
-        // Self managed
         assertEquals(cameraView.getExposureCorrection(), 0f, 0f);
         assertEquals(cameraView.getZoom(), 0f, 0f);
+
+        // Self managed
         assertEquals(cameraView.getPlaySounds(), CameraView.DEFAULT_PLAY_SOUNDS);
         assertEquals(cameraView.getCropOutput(), CameraView.DEFAULT_CROP_OUTPUT);
         assertEquals(cameraView.getJpegQuality(), CameraView.DEFAULT_JPEG_QUALITY);

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/PreviewTest.java
Patch:
@@ -31,8 +31,7 @@ public abstract class PreviewTest extends BaseTest {
 
     @Before
     public void setUp() {
-        availability = new Task<>();
-        availability.listen();
+        availability = new Task<>(true);
 
         ui(new Runnable() {
             @Override

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/WorkerHandlerTest.java
Patch:
@@ -24,8 +24,7 @@ public void testCache() {
 
     @Test
     public void testStaticRun() {
-        final Task<Boolean> task = new Task<>();
-        task.listen();
+        final Task<Boolean> task = new Task<>(true);
         Runnable action = new Runnable() {
             @Override
             public void run() {

File: cameraview/src/main/java/com/otaliastudios/cameraview/CameraController.java
Patch:
@@ -144,6 +144,8 @@ void stopImmediately() {
             // Don't check, try stop again.
             LOG.i("Stop immediately. State was:", ss());
             mState = STATE_STOPPING;
+            // Prevent leaking CameraController.
+            mHandler.getThread().setUncaughtExceptionHandler(null);
             onStop();
             mState = STATE_STOPPED;
             LOG.i("Stop immediately. Stopped. State is:", ss());

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/IntegrationTest.java
Patch:
@@ -56,8 +56,8 @@ public void setUp() {
             public void run() {
                 camera = new CameraView(rule.getActivity()) {
                     @Override
-                    protected CameraController instantiateCameraController(CameraCallbacks callbacks, Preview preview) {
-                        controller = new Camera1(callbacks, preview);
+                    protected CameraController instantiateCameraController(CameraCallbacks callbacks) {
+                        controller = new Camera1(callbacks);
                         return controller;
                     }
                 };

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/MockCameraController.java
Patch:
@@ -15,8 +15,8 @@ public class MockCameraController extends CameraController {
     boolean mZoomChanged;
     boolean mExposureCorrectionChanged;
 
-    MockCameraController(CameraView.CameraCallbacks callback, Preview preview) {
-        super(callback, preview);
+    MockCameraController(CameraView.CameraCallbacks callback) {
+        super(callback);
     }
 
     void setMockCameraOptions(CameraOptions options) {

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/SurfaceCameraPreviewTest.java
Patch:
@@ -10,10 +10,10 @@
 
 @RunWith(AndroidJUnit4.class)
 @SmallTest
-public class SurfaceViewPreviewTest extends PreviewTest {
+public class SurfaceCameraPreviewTest extends PreviewTest {
 
     @Override
-    protected Preview createPreview(Context context, ViewGroup parent, Preview.SurfaceCallback callback) {
-        return new SurfaceViewPreview(context, parent, callback);
+    protected CameraPreview createPreview(Context context, ViewGroup parent, CameraPreview.SurfaceCallback callback) {
+        return new SurfaceCameraPreview(context, parent, callback);
     }
 }

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/TextureCameraPreviewTest.java
Patch:
@@ -10,11 +10,11 @@
 
 @RunWith(AndroidJUnit4.class)
 @SmallTest
-public class TextureViewPreviewTest extends PreviewTest {
+public class TextureCameraPreviewTest extends PreviewTest {
 
     @Override
-    protected Preview createPreview(Context context, ViewGroup parent, Preview.SurfaceCallback callback) {
-        return new TextureViewPreview(context, parent, callback);
+    protected CameraPreview createPreview(Context context, ViewGroup parent, CameraPreview.SurfaceCallback callback) {
+        return new TextureCameraPreview(context, parent, callback);
     }
 
     @Override

File: cameraview/src/main/java/com/otaliastudios/cameraview/Camera2.java
Patch:
@@ -22,8 +22,8 @@
 @TargetApi(21)
 class Camera2 extends CameraController {
 
-    public Camera2(CameraView.CameraCallbacks callback, Preview preview) {
-        super(callback, preview);
+    public Camera2(CameraView.CameraCallbacks callback) {
+        super(callback);
     }
 
     @Override

File: cameraview/src/main/views/com/otaliastudios/cameraview/TextureCameraPreview.java
Patch:
@@ -9,11 +9,11 @@
 import android.view.View;
 import android.view.ViewGroup;
 
-class TextureViewPreview extends Preview<TextureView, SurfaceTexture> {
+class TextureCameraPreview extends CameraPreview<TextureView, SurfaceTexture> {
 
     private Surface mSurface;
 
-    TextureViewPreview(Context context, ViewGroup parent, SurfaceCallback callback) {
+    TextureCameraPreview(Context context, ViewGroup parent, SurfaceCallback callback) {
         super(context, parent, callback);
     }
 

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/CameraLoggerTest.java
Patch:
@@ -11,7 +11,7 @@
 
 @RunWith(AndroidJUnit4.class)
 @SmallTest
-public class CameraLoggerTest {
+public class CameraLoggerTest extends BaseTest {
 
     @Test
     public void testLoggerLevels() {

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/ExtraProperties1Test.java
Patch:
@@ -17,7 +17,7 @@
 
 @RunWith(AndroidJUnit4.class)
 @SmallTest
-public class ExtraProperties1Test {
+public class ExtraProperties1Test extends BaseTest {
 
     @Test
     public void testConstructor1() {

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/Mapper1Test.java
Patch:
@@ -13,7 +13,7 @@
 
 @RunWith(AndroidJUnit4.class)
 @SmallTest
-public class Mapper1Test {
+public class Mapper1Test extends BaseTest {
 
     private Mapper mapper = new Mapper.Mapper1();
 

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/OrientationHelperTest.java
Patch:
@@ -64,9 +64,10 @@ public void testEnable() {
 
     @Test
     public void testRotation() {
-        helper.enable(context());
 
-        reset(callbacks); // Reset counts.
+        // Sometimes (on some APIs) the helper will trigger an update to 0
+        // right after enabling. But that's fine for us, times(1) will be OK either way.
+        helper.enable(context());
         helper.mListener.onOrientationChanged(OrientationEventListener.ORIENTATION_UNKNOWN);
         assertEquals(helper.mLastOrientation, 0);
         helper.mListener.onOrientationChanged(10);

File: cameraview/src/androidTest/java/com/otaliastudios/cameraview/TestActivity.java
Patch:
@@ -24,6 +24,7 @@ public class TestActivity extends Activity {
     @Override
     public void onCreate(@Nullable Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
+        CameraLogger.setLogLevel(CameraLogger.LEVEL_VERBOSE);
         wakeScreen();
 
         // Match parent decor view.

File: cameraview/src/main/java/com/otaliastudios/cameraview/AspectRatio.java
Patch:
@@ -7,7 +7,7 @@
 
 public class AspectRatio implements Comparable<AspectRatio>, Parcelable {
 
-    private final static SparseArray<SparseArray<AspectRatio>> sCache = new SparseArray<>(16);
+    final static SparseArray<SparseArray<AspectRatio>> sCache = new SparseArray<>(16);
 
     private final int mX;
     private final int mY;

File: cameraview/src/main/utils/com/otaliastudios/cameraview/CameraUtils.java
Patch:
@@ -68,7 +68,7 @@ public static boolean hasCameraFacing(Context context, Facing facing) {
      */
     public static void decodeBitmap(final byte[] source, final BitmapCallback callback) {
         final Handler ui = new Handler();
-        new Thread(new Runnable() {
+        WorkerHandler.run(new Runnable() {
             @Override
             public void run() {
                 final Bitmap bitmap = decodeBitmap(source);
@@ -79,7 +79,7 @@ public void run() {
                     }
                 });
             }
-        }).start();
+        });
     }
 
 

File: cameraview/src/main/java/com/otaliastudios/cameraview/CameraView.java
Patch:
@@ -159,7 +159,7 @@ private void init(@NonNull Context context, @Nullable AttributeSet attrs) {
 
 
     protected Preview instantiatePreview(Context context, ViewGroup container) {
-        return new TextureViewPreview(context, container);
+        return new TextureViewPreview(context, container, null);
     }
 
 
@@ -504,7 +504,7 @@ public void start() {
      * @return true if we can go on, false otherwise.
      */
     @SuppressLint("NewApi")
-    private boolean checkPermissions(SessionType sessionType) {
+    protected boolean checkPermissions(SessionType sessionType) {
         checkPermissionsManifestOrThrow(sessionType);
         boolean api23 = Build.VERSION.SDK_INT >= Build.VERSION_CODES.M;
         int cameraCheck, audioCheck;
@@ -537,7 +537,7 @@ private boolean checkPermissions(SessionType sessionType) {
     /**
      * If mSessionType == SESSION_TYPE_VIDEO we will ask for RECORD_AUDIO permission.
      * If the developer did not add this to its manifest, throw and fire warnings.
-     * (Hoping this is not cought elsewhere... we should test).
+     * (Hoping this is not caught elsewhere... we should test).
      */
     private void checkPermissionsManifestOrThrow(SessionType sessionType) {
         if (sessionType == SessionType.VIDEO) {

File: cameraview/src/main/views/com/otaliastudios/cameraview/PinchGestureLayout.java
Patch:
@@ -14,7 +14,7 @@ class PinchGestureLayout extends GestureLayout {
 
     private final static float ADD_SENSITIVITY = 2f;
 
-    private ScaleGestureDetector mDetector;
+    ScaleGestureDetector mDetector;
     private boolean mNotify;
     private float mAdditionFactor = 0;
 

File: cameraview/src/main/views/com/otaliastudios/cameraview/TapGestureLayout.java
Patch:
@@ -58,8 +58,8 @@ public void onLongPress(MotionEvent e) {
 
         // Views to draw the focus marker.
         LayoutInflater.from(getContext()).inflate(R.layout.layout_focus_marker, this);
-        mFocusMarkerContainer = (FrameLayout) findViewById(R.id.focusMarkerContainer);
-        mFocusMarkerFill = (ImageView) findViewById(R.id.fill);
+        mFocusMarkerContainer = findViewById(R.id.focusMarkerContainer);
+        mFocusMarkerFill = findViewById(R.id.fill);
     }
 
 

File: cameraview/src/main/java/com/otaliastudios/cameraview/CameraController.java
Patch:
@@ -35,7 +35,7 @@ abstract class CameraController implements Preview.SurfaceCallback {
         mCameraCallbacks = callback;
         mPreview = preview;
         mPreview.setSurfaceCallback(this);
-        mHandler = new WorkerHandler("CameraViewController");
+        mHandler = WorkerHandler.get("CameraViewController");
     }
 
     //region Start&Stop

File: cameraview/src/main/java/com/otaliastudios/cameraview/CameraView.java
Patch:
@@ -117,7 +117,7 @@ private void init(@NonNull Context context, @Nullable AttributeSet attrs) {
         mPreviewImpl = instantiatePreview(context, this);
         mCameraController = instantiateCameraController(mCameraCallbacks, mPreviewImpl);
         mUiHandler = new Handler(Looper.getMainLooper());
-        mWorkerHandler = new WorkerHandler("CameraViewWorker");
+        mWorkerHandler = WorkerHandler.get("CameraViewWorker");
 
         // Views
         mGridLinesLayout = new GridLinesLayout(context);

File: cameraview/src/main/java/com/otaliastudios/cameraview/Camera2.java
Patch:
@@ -107,7 +107,6 @@ void setFacing(Facing facing) {
         try {
             ids = mCameraManager.getCameraIdList();
         } catch (CameraAccessException e) {
-            Log.e("CameraKit", e.toString());
             return;
         }
 

File: demo/src/main/java/com/otaliastudios/cameraview/demo/MainActivity.java
Patch:
@@ -15,6 +15,7 @@
 import android.widget.Toast;
 
 import com.otaliastudios.cameraview.CameraListener;
+import com.otaliastudios.cameraview.CameraLogger;
 import com.otaliastudios.cameraview.CameraView;
 import com.otaliastudios.cameraview.Grid;
 import com.otaliastudios.cameraview.SessionType;
@@ -83,6 +84,7 @@ protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_main);
         ButterKnife.bind(this);
+        CameraLogger.setLogLevel(CameraLogger.LEVEL_VERBOSE);
 
         parent.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
             @Override

File: cameraview/src/main/java/com/otaliastudios/cameraview/Camera1.java
Patch:
@@ -449,7 +449,7 @@ public void run() {
 
     @Override
     boolean shouldFlipSizes() {
-        return mSensorOffset % 180 != 0;
+        return (mDeviceOrientation  + mSensorOffset) % 180 != 0;
     }
 
     @Override

File: cameraview/src/main/java/com/otaliastudios/cameraview/Camera2.java
Patch:
@@ -9,6 +9,7 @@
 import android.hardware.camera2.CameraDevice;
 import android.hardware.camera2.CameraManager;
 import android.hardware.camera2.params.StreamConfigurationMap;
+import android.location.Location;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.util.Log;
@@ -147,7 +148,7 @@ void setSessionType(SessionType sessionType) {
     }
 
     @Override
-    void setLocation(double latitude, double longitude) {
+    void setLocation(Location location) {
 
     }
 

File: cameraview/src/main/java/com/otaliastudios/cameraview/CameraController.java
Patch:
@@ -1,6 +1,7 @@
 package com.otaliastudios.cameraview;
 
 import android.graphics.PointF;
+import android.location.Location;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
@@ -36,7 +37,7 @@ abstract class CameraController implements Preview.SurfaceCallback {
     abstract void setWhiteBalance(WhiteBalance whiteBalance);
     abstract void setVideoQuality(VideoQuality videoQuality);
     abstract void setSessionType(SessionType sessionType);
-    abstract void setLocation(double latitude, double longitude);
+    abstract void setLocation(Location location);
 
     abstract boolean capturePicture();
     abstract boolean captureSnapshot();

File: cameraview/src/main/java/com/otaliastudios/cameraview/Camera2.java
Patch:
@@ -142,7 +142,7 @@ void setFlash(Flash flash) {
     }
 
     @Override
-    void setSessionType(@SessionType int sessionType) {
+    void setSessionType(SessionType sessionType) {
 
     }
 
@@ -157,7 +157,7 @@ void setWhiteBalance(WhiteBalance whiteBalance) {
     }
 
     @Override
-    void setVideoQuality(int videoQuality) {
+    void setVideoQuality(VideoQuality videoQuality) {
 
     }
 

File: cameraview/src/main/java/com/otaliastudios/cameraview/CameraController.java
Patch:
@@ -34,7 +34,6 @@ abstract class CameraController implements Preview.SurfaceCallback {
     abstract boolean setExposureCorrection(float EVvalue);
     abstract void setFacing(@Facing int facing);
     abstract void setFlash(@Flash int flash);
-    abstract void setFocus(@Focus int focus);
     abstract void setVideoQuality(@VideoQuality int videoQuality);
     abstract void setWhiteBalance(@WhiteBalance int whiteBalance);
     abstract void setSessionType(@SessionType int sessionType);

File: camerakit/src/main/utils/com/flurgle/camerakit/CropHelper.java
Patch:
@@ -24,8 +24,8 @@ public static byte[] cropToJpeg(YuvImage yuv, AspectRatio targetRatio, int jpegC
     // This reads a rotated Bitmap thanks to CameraUtils. Then crops and returns a byte array.
     // In doing so, EXIF data is deleted.
     public static byte[] cropToJpeg(byte[] jpeg, AspectRatio targetRatio, int jpegCompression) {
+
         Bitmap image = CameraUtils.decodeBitmap(jpeg);
-        Log.e("CropHelper", "decoded image has width="+image.getWidth()+", height="+image.getHeight());
         Rect cropRect = computeCrop(image.getWidth(), image.getHeight(), targetRatio);
         Bitmap crop = Bitmap.createBitmap(image, cropRect.left, cropRect.top, cropRect.width(), cropRect.height());
         image.recycle();
@@ -44,10 +44,10 @@ private static Rect computeCrop(int currentWidth, int currentHeight, AspectRatio
             x = (currentWidth - width) / 2;
         } else {
             width = currentWidth;
-            height = (int) (width * targetRatio.inverse().toFloat());
+            height = (int) (width / targetRatio.toFloat());
             y = (currentHeight - height) / 2;
             x = 0;
         }
-        return new Rect(x, y, x+width, y+height);
+        return new Rect(x, y, x + width, y + height);
     }
 }

File: camerakit/src/main/base/com/flurgle/camerakit/CameraImpl.java
Patch:
@@ -26,7 +26,7 @@ abstract class CameraImpl implements PreviewImpl.SurfaceCallback {
     abstract void setFacing(@Facing int facing);
     abstract void setFlash(@Flash int flash);
     abstract void setFocus(@Focus int focus);
-    abstract void setZoom(@ZoomMode int zoom);
+    abstract void setZoomMode(@ZoomMode int zoom);
     abstract void setVideoQuality(@VideoQuality int videoQuality);
     abstract void setWhiteBalance(@WhiteBalance int whiteBalance);
     abstract void setSessionType(@SessionType int sessionType);

File: camerakit/src/main/base/com/flurgle/camerakit/CameraImpl.java
Patch:
@@ -6,14 +6,15 @@
 
 import java.io.File;
 
-abstract class CameraImpl {
+abstract class CameraImpl implements PreviewImpl.SurfaceCallback {
 
     protected final CameraView.CameraListenerWrapper mCameraListener;
     protected final PreviewImpl mPreview;
 
     CameraImpl(CameraView.CameraListenerWrapper callback, PreviewImpl preview) {
         mCameraListener = callback;
         mPreview = preview;
+        mPreview.setSurfaceCallback(this);
     }
 
     abstract void start();

File: camerakit/src/main/base/com/flurgle/camerakit/CameraImpl.java
Patch:
@@ -4,10 +4,10 @@
 
 abstract class CameraImpl {
 
-    protected final CameraListener mCameraListener;
+    protected final CameraView.CameraListenerWrapper mCameraListener;
     protected final PreviewImpl mPreview;
 
-    CameraImpl(CameraListener callback, PreviewImpl preview) {
+    CameraImpl(CameraView.CameraListenerWrapper callback, PreviewImpl preview) {
         mCameraListener = callback;
         mPreview = preview;
     }

File: camerakit/src/main/api21/com/flurgle/camerakit/Camera2.java
Patch:
@@ -147,7 +147,7 @@ void setFocus(@Focus int focus) {
     }
 
     @Override
-    void setMethod(@Method int method) {
+    void setSessionType(@SessionType int sessionType) {
 
     }
 

File: camerakit/src/main/base/com/flurgle/camerakit/CameraImpl.java
Patch:
@@ -21,10 +21,10 @@ abstract class CameraImpl {
     abstract void setFacing(@Facing int facing);
     abstract void setFlash(@Flash int flash);
     abstract void setFocus(@Focus int focus);
-    abstract void setMethod(@Method int method);
     abstract void setZoom(@ZoomMode int zoom);
     abstract void setVideoQuality(@VideoQuality int videoQuality);
     abstract void setWhiteBalance(@WhiteBalance int whiteBalance);
+    abstract void setSessionType(@SessionType int sessionType);
     abstract void setLocation(double latitude, double longitude);
 
     abstract void captureImage();

File: camerakit/src/main/types/com/flurgle/camerakit/Method.java
Patch:
@@ -8,6 +8,7 @@
 import static com.flurgle.camerakit.CameraKit.Constants.CAPTURE_METHOD_STANDARD;
 import static com.flurgle.camerakit.CameraKit.Constants.CAPTURE_METHOD_FRAME;
 
+@Deprecated
 @Retention(RetentionPolicy.SOURCE)
 @IntDef({CAPTURE_METHOD_STANDARD, CAPTURE_METHOD_FRAME})
 public @interface Method {

File: camerakit/src/main/types/com/flurgle/camerakit/Permissions.java
Patch:
@@ -8,6 +8,7 @@
 import static com.flurgle.camerakit.CameraKit.Constants.PERMISSIONS_PICTURE;
 import static com.flurgle.camerakit.CameraKit.Constants.PERMISSIONS_VIDEO;
 
+@Deprecated
 @Retention(RetentionPolicy.SOURCE)
 @IntDef({PERMISSIONS_VIDEO, PERMISSIONS_PICTURE})
 public @interface Permissions {

File: camerakit/src/main/base/com/flurgle/camerakit/CameraImpl.java
Patch:
@@ -31,6 +31,7 @@ abstract class CameraImpl {
 
     abstract Size getCaptureSize();
     abstract Size getPreviewSize();
+    abstract boolean shouldFlipSizes(); // Wheter the Sizes should be flipped to match the view orientation.
     abstract boolean isCameraOpened();
 
     @Nullable

File: camerakit/src/main/base/com/flurgle/camerakit/TextureViewPreview.java
Patch:
@@ -14,7 +14,7 @@ class TextureViewPreview extends PreviewImpl {
     private final TextureView mTextureView;
 
     TextureViewPreview(Context context, ViewGroup parent) {
-        final View view = View.inflate(context, R.layout.texture_view, parent);
+        final View view = View.inflate(context, R.layout.texture_view, parent); // MATCH_PARENT
         mTextureView = (TextureView) view.findViewById(R.id.texture_view);
         mTextureView.setSurfaceTextureListener(new TextureView.SurfaceTextureListener() {
 
@@ -28,7 +28,7 @@ public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int hei
             public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height) {
                 setSurfaceSize(width, height);
                 dispatchSurfaceChanged();
-                refreshScale();
+                // refreshScale();
             }
 
             @Override

File: camerakit/src/main/types/com/flurgle/camerakit/Permissions.java
Patch:
@@ -5,11 +5,10 @@
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 
-import static com.flurgle.camerakit.CameraKit.Constants.PERMISSIONS_LAZY;
 import static com.flurgle.camerakit.CameraKit.Constants.PERMISSIONS_PICTURE;
-import static com.flurgle.camerakit.CameraKit.Constants.PERMISSIONS_STRICT;
+import static com.flurgle.camerakit.CameraKit.Constants.PERMISSIONS_VIDEO;
 
 @Retention(RetentionPolicy.SOURCE)
-@IntDef({PERMISSIONS_STRICT, PERMISSIONS_LAZY, PERMISSIONS_PICTURE})
+@IntDef({PERMISSIONS_VIDEO, PERMISSIONS_PICTURE})
 public @interface Permissions {
 }

File: camerakit/src/main/utils/com/flurgle/camerakit/CommonAspectRatioFilter.java
Patch:
@@ -18,9 +18,7 @@ public CommonAspectRatioFilter(List<Size> previewSizes, List<Size> captureSizes)
     public TreeSet<AspectRatio> filter() {
         Set<AspectRatio> previewAspectRatios = new HashSet<>();
         for (Size size : mPreviewSizes) {
-            if (size.getWidth() >= CameraKit.Internal.screenHeight && size.getHeight() >= CameraKit.Internal.screenWidth) {
-                previewAspectRatios.add(AspectRatio.of(size.getWidth(), size.getHeight()));
-            }
+            previewAspectRatios.add(AspectRatio.of(size.getWidth(), size.getHeight()));
         }
 
         Set<AspectRatio> captureAspectRatios = new HashSet<>();

File: camerakit/src/main/api16/com/flurgle/camerakit/Camera1.java
Patch:
@@ -214,7 +214,9 @@ void captureImage() {
                     @Override
                     public void onPictureTaken(byte[] data, Camera camera) {
                         mCameraListener.onPictureTaken(data);
-                        camera.startPreview();
+                        if (mCamera != null) {
+                            mCamera.startPreview();
+                        }
                     }
                 });
                 break;

File: camerakit/src/main/api16/com/flurgle/camerakit/Camera1.java
Patch:
@@ -427,7 +427,7 @@ private void initMediaRecorder() {
 
         mVideoFile = new File(mPreview.getView().getContext().getExternalFilesDir(null), "video.mp4");
         mMediaRecorder.setOutputFile(mVideoFile.getAbsolutePath());
-        mMediaRecorder.setOrientationHint(mCameraInfo.orientation);
+        mMediaRecorder.setOrientationHint(calculatePreviewRotation());
     }
 
     private void prepareMediaRecorder() {

File: camerakit/src/main/types/com/flurgle/camerakit/Focus.java
Patch:
@@ -8,8 +8,9 @@
 import static com.flurgle.camerakit.CameraKit.Constants.FOCUS_TAP;
 import static com.flurgle.camerakit.CameraKit.Constants.FOCUS_OFF;
 import static com.flurgle.camerakit.CameraKit.Constants.FOCUS_CONTINUOUS;
+import static com.flurgle.camerakit.CameraKit.Constants.FOCUS_TAP_WITH_MARKER;
 
 @Retention(RetentionPolicy.SOURCE)
-@IntDef({FOCUS_CONTINUOUS, FOCUS_TAP, FOCUS_OFF})
+@IntDef({FOCUS_CONTINUOUS, FOCUS_TAP, FOCUS_OFF, FOCUS_TAP_WITH_MARKER})
 public @interface Focus {
 }
\ No newline at end of file

File: camerakit/src/main/types/com/flurgle/camerakit/Focus.java
Patch:
@@ -8,8 +8,9 @@
 import static com.flurgle.camerakit.CameraKit.Constants.FOCUS_TAP;
 import static com.flurgle.camerakit.CameraKit.Constants.FOCUS_OFF;
 import static com.flurgle.camerakit.CameraKit.Constants.FOCUS_CONTINUOUS;
+import static com.flurgle.camerakit.CameraKit.Constants.FOCUS_TAP_WITH_MARKER;
 
 @Retention(RetentionPolicy.SOURCE)
-@IntDef({FOCUS_CONTINUOUS, FOCUS_TAP, FOCUS_OFF})
+@IntDef({FOCUS_CONTINUOUS, FOCUS_TAP, FOCUS_OFF, FOCUS_TAP_WITH_MARKER})
 public @interface Focus {
 }
\ No newline at end of file

File: camerakit/src/main/api16/com/flurgle/camerakit/Camera1.java
Patch:
@@ -354,9 +354,10 @@ private int calculateCameraRotation(int rotation) {
     }
 
     private void adjustCameraParameters() {
+        boolean invertPreviewSizes = mDisplayOrientation%180 != 0;
         mPreview.setTruePreviewSize(
-                getPreviewResolution().getWidth(),
-                getPreviewResolution().getHeight()
+                invertPreviewSizes? getPreviewResolution().getHeight() : getPreviewResolution().getWidth(),
+                invertPreviewSizes? getPreviewResolution().getWidth() : getPreviewResolution().getHeight()
         );
 
         mCameraParameters.setPreviewSize(

File: camerakit/src/main/java/com/flurgle/camerakit/CameraKit.java
Patch:
@@ -39,7 +39,7 @@ static class Defaults {
 
         static final int DEFAULT_FACING = Constants.FACING_BACK;
         static final int DEFAULT_FLASH = Constants.FLASH_OFF;
-        static final int DEFAULT_FOCUS = Constants.FOCUS_OFF;
+        static final int DEFAULT_FOCUS = Constants.FOCUS_CONTINUOUS;
         static final int DEFAULT_METHOD = Constants.METHOD_STANDARD;
         static final int DEFAULT_ZOOM = Constants.ZOOM_OFF;
 

File: demo/src/main/java/com/flurgle/camerakit/demo/AutoUnfocusEditText.java
Patch:
@@ -1,12 +1,12 @@
 package com.flurgle.camerakit.demo;
 
 import android.content.Context;
+import android.support.v7.widget.AppCompatEditText;
 import android.util.AttributeSet;
 import android.view.KeyEvent;
 import android.view.inputmethod.InputMethodManager;
-import android.widget.EditText;
 
-public class AutoUnfocusEditText extends EditText {
+public class AutoUnfocusEditText extends AppCompatEditText {
 
     public AutoUnfocusEditText(Context context) {
         super(context);
@@ -36,4 +36,4 @@ private void closeKeyboard() {
         imm.hideSoftInputFromWindow(getWindowToken(), 0);
     }
 
-}
\ No newline at end of file
+}

File: camerakit/src/main/java/com/flurgle/camerakit/CameraView.java
Patch:
@@ -74,7 +74,6 @@ public CameraView(@NonNull Context context, @Nullable AttributeSet attrs) {
                 mFocus = a.getInteger(R.styleable.CameraView_ckFocus, CameraKit.Defaults.DEFAULT_FOCUS);
                 mMethod = a.getInteger(R.styleable.CameraView_ckMethod, CameraKit.Defaults.DEFAULT_METHOD);
                 mZoom = a.getInteger(R.styleable.CameraView_ckZoom, CameraKit.Defaults.DEFAULT_ZOOM);
-
                 mJpegQuality = a.getInteger(R.styleable.CameraView_ckJpegQuality, CameraKit.Defaults.DEFAULT_JPEG_QUALITY);
                 mCropOutput = a.getBoolean(R.styleable.CameraView_ckCropOutput, CameraKit.Defaults.DEFAULT_CROP_OUTPUT);
                 mAdjustViewBounds = a.getBoolean(R.styleable.CameraView_android_adjustViewBounds, CameraKit.Defaults.DEFAULT_ADJUST_VIEW_BOUNDS);

File: camerakit/src/main/java/com/wonderkiln/camerakit/Camera2.java
Patch:
@@ -166,7 +166,7 @@ int getFlash() {
 
     @Override
     void capturePicture() {
-        if (mFacing == Constants.FACING_BACK) {
+        if (mFacing == INTERNAL_FACINGS.get(Constants.FACING_BACK)) {
             lockFocus();
         } else {
             captureStillPicture();

