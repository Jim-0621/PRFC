File: library/src/main/java/com/squareup/otto/Bus.java
Patch:
@@ -453,9 +453,9 @@ private Set<Class<?>> getClassesFor(Class<?> concreteClass) {
   private static void throwRuntimeException(String msg, InvocationTargetException e) {
     Throwable cause = e.getCause();
     if (cause != null) {
-      throw new RuntimeException(msg, cause);
+      throw new RuntimeException(msg + ": " + cause.getMessage(), cause);
     } else {
-      throw new RuntimeException(msg);
+      throw new RuntimeException(msg + ": " + e.getMessage(), e);
     }
   }
 

File: library/src/main/java/com/squareup/otto/EventHandler.java
Patch:
@@ -77,7 +77,7 @@ public void invalidate() {
    * Invokes the wrapped handler method to handle {@code event}.
    *
    * @param event  event to handle
-   * @Throws java.lang.IllegalStateException  if previously invalidated.
+   * @throws java.lang.IllegalStateException  if previously invalidated.
    * @throws java.lang.reflect.InvocationTargetException  if the wrapped method throws any {@link Throwable} that is not
    *     an {@link Error} ({@code Error}s are propagated as-is).
    */
@@ -86,7 +86,7 @@ public void handleEvent(Object event) throws InvocationTargetException {
       throw new IllegalStateException(toString() + " has been invalidated and can no longer handle events.");
     }
     try {
-      method.invoke(target, new Object[] {event});
+      method.invoke(target, event);
     } catch (IllegalAccessException e) {
       throw new AssertionError(e);
     } catch (InvocationTargetException e) {

File: library/src/main/java/com/squareup/otto/EventHandler.java
Patch:
@@ -77,7 +77,7 @@ public void invalidate() {
    * Invokes the wrapped handler method to handle {@code event}.
    *
    * @param event  event to handle
-   * @Throws java.lang.IllegalStateException  if previously invalidated.
+   * @throws java.lang.IllegalStateException  if previously invalidated.
    * @throws java.lang.reflect.InvocationTargetException  if the wrapped method throws any {@link Throwable} that is not
    *     an {@link Error} ({@code Error}s are propagated as-is).
    */
@@ -86,7 +86,7 @@ public void handleEvent(Object event) throws InvocationTargetException {
       throw new IllegalStateException(toString() + " has been invalidated and can no longer handle events.");
     }
     try {
-      method.invoke(target, new Object[] {event});
+      method.invoke(target, event);
     } catch (IllegalAccessException e) {
       throw new AssertionError(e);
     } catch (InvocationTargetException e) {

File: library/src/test/java/com/squareup/otto/outside/AnnotatedHandlerFinderTest.java
Patch:
@@ -19,13 +19,15 @@
 import com.squareup.otto.Bus;
 import com.squareup.otto.Subscribe;
 import com.squareup.otto.ThreadEnforcer;
+
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.experimental.runners.Enclosed;
 import org.junit.runner.RunWith;
 
+import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -189,7 +191,7 @@ public void overriddenAndAnnotatedInSubclass(Object o) {
   public static class FailsOnInterfaceSubscription {
 
     static class InterfaceSubscriber {
-      @Subscribe public void whatever(Comparable thingy) {
+      @Subscribe public void whatever(Serializable thingy) {
         // Do nothing.
       }
     }

File: library/src/test/java/com/squareup/otto/outside/AnnotatedHandlerFinderTest.java
Patch:
@@ -19,13 +19,15 @@
 import com.squareup.otto.Bus;
 import com.squareup.otto.Subscribe;
 import com.squareup.otto.ThreadEnforcer;
+
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.experimental.runners.Enclosed;
 import org.junit.runner.RunWith;
 
+import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -189,7 +191,7 @@ public void overriddenAndAnnotatedInSubclass(Object o) {
   public static class FailsOnInterfaceSubscription {
 
     static class InterfaceSubscriber {
-      @Subscribe public void whatever(Comparable thingy) {
+      @Subscribe public void whatever(Serializable thingy) {
         // Do nothing.
       }
     }

File: library/src/main/java/com/squareup/otto/AnnotatedHandlerFinder.java
Patch:
@@ -90,7 +90,7 @@ private static void loadAnnotatedMethods(Class<?> listenerClass) {
           throw new IllegalArgumentException("Method " + method + " has @Produce annotation on " + eventType
               + " which is an interface.  Producers must return a concrete class type.");
         }
-        if (Void.class.isAssignableFrom(eventType)) {
+        if (eventType.equals(Void.TYPE)) {
           throw new IllegalArgumentException("Method " + method + " has @Produce annotation but has no return type.");
         }
 

File: sample/src/main/java/com/squareup/otto/sample/BusProvider.java
Patch:
@@ -20,7 +20,7 @@
 
 /**
  * Maintains a singleton instance for obtaining the bus. Ideally this would be replaced with a more efficient means
- * such as injection directly into interested classes with Guice.
+ * such as through injection directly into interested classes.
  */
 public final class BusProvider {
   private static final Bus BUS = new Bus();

File: sample/src/main/java/com/squareup/otto/sample/BusProvider.java
Patch:
@@ -20,7 +20,7 @@
 
 /**
  * Maintains a singleton instance for obtaining the bus. Ideally this would be replaced with a more efficient means
- * such as injection directly into interested classes with Guice.
+ * such as through injection directly into interested classes.
  */
 public final class BusProvider {
   private static final Bus BUS = new Bus();

File: library/src/main/java/com/squareup/otto/Bus.java
Patch:
@@ -250,11 +250,11 @@ public void unregister(Object object) {
       EventProducer producer = getProducerForEventType(key);
       EventProducer value = entry.getValue();
 
-      if (value == null || value != producer) {
+      if (value == null || !value.equals(producer)) {
         throw new IllegalArgumentException(
             "Missing event producer for an annotated method. Is " + object + " registered?");
       }
-      producersInListener.remove(key);
+      producersByType.remove(key);
     }
 
     Map<Class<?>, Set<EventHandler>> handlersInListener = findAllSubscribers(object);

