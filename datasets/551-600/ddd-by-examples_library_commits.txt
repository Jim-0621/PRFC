File: src/test/groovy/io/pillopl/library/ModularArchitectureTest.java
Patch:
@@ -25,7 +25,7 @@ public class ModularArchitectureTest {
     public static final ArchRule commons_should_not_depend_on_catalogue =
             noClasses()
                     .that()
-                    .resideInAPackage("..common..")
+                    .resideInAPackage("..commons..")
                     .should()
                     .dependOnClassesThat()
                     .resideInAPackage("..catalogue..");
@@ -34,7 +34,7 @@ public class ModularArchitectureTest {
     public static final ArchRule commons_should_not_depend_on_lending =
             noClasses()
                     .that()
-                    .resideInAPackage("..common..")
+                    .resideInAPackage("..commons..")
                     .should()
                     .dependOnClassesThat()
                     .resideInAPackage("..lending..");

File: src/test/groovy/io/pillopl/library/ModularArchitectureTest.java
Patch:
@@ -25,7 +25,7 @@ public class ModularArchitectureTest {
     public static final ArchRule commons_should_not_depend_on_catalogue =
             noClasses()
                     .that()
-                    .resideInAPackage("..common..")
+                    .resideInAPackage("..commons..")
                     .should()
                     .dependOnClassesThat()
                     .resideInAPackage("..catalogue..");
@@ -34,7 +34,7 @@ public class ModularArchitectureTest {
     public static final ArchRule commons_should_not_depend_on_lending =
             noClasses()
                     .that()
-                    .resideInAPackage("..common..")
+                    .resideInAPackage("..commons..")
                     .should()
                     .dependOnClassesThat()
                     .resideInAPackage("..lending..");

File: src/main/java/io/pillopl/library/lending/patronprofile/web/PatronProfileController.java
Patch:
@@ -53,8 +53,8 @@ class PatronProfileController {
     private final CancelingHold cancelingHold;
 
     @GetMapping("/profiles/{patronId}")
-    ResponseEntity<EntityModel<ProfileResource>> patronProfile(@PathVariable UUID patronId) {
-        return ok(new EntityModel<>(new ProfileResource(patronId)));
+    ResponseEntity<ProfileResource> patronProfile(@PathVariable UUID patronId) {
+        return ok(new ProfileResource(patronId));
     }
 
     @GetMapping("/profiles/{patronId}/holds/")

File: src/integration-test/groovy/io/pillopl/library/common/events/publisher/DomainEventsTestConfig.java
Patch:
@@ -22,4 +22,4 @@ DomainEvents domainEventsWithStorage(ApplicationEventPublisher applicationEventP
                 new InMemoryEventsStorage()
         );
     }
-}
\ No newline at end of file
+}

File: src/main/java/io/pillopl/library/commons/events/publisher/DomainEventsConfig.java
Patch:
@@ -13,4 +13,4 @@ public class DomainEventsConfig {
     DomainEvents domainEvents(ApplicationEventPublisher applicationEventPublisher, MeterRegistry meterRegistry) {
         return new MeteredDomainEventPublisher(new JustForwardDomainEventPublisher(applicationEventPublisher), meterRegistry);
     }
-}
\ No newline at end of file
+}

File: src/main/java/io/pillopl/library/lending/LendingDatabaseConfig.java
Patch:
@@ -76,6 +76,4 @@ CommandLineRunner init(BookRepository bookRepository, Patrons patrons) {
             log.info("Created patronId: {}", patronId);
         };
     }
-
-
-}
\ No newline at end of file
+}

File: src/main/java/io/pillopl/library/lending/patronprofile/web/PatronProfileController.java
Patch:
@@ -186,4 +186,4 @@ class PlaceHoldRequest {
     UUID patronId;
     UUID libraryBranchId;
     Integer numberOfDays;
-}
\ No newline at end of file
+}

File: src/main/java/io/pillopl/library/lending/book/model/CheckedOutBook.java
Patch:
@@ -14,21 +14,21 @@
 @Value
 @AllArgsConstructor
 @EqualsAndHashCode(of = "bookInformation")
-public class CollectedBook implements Book {
+public class CheckedOutBook implements Book {
 
     @NonNull
     BookInformation bookInformation;
 
     @NonNull
-    LibraryBranchId collectedAt;
+    LibraryBranchId checkedOutAt;
 
     @NonNull
     PatronId byPatron;
 
     @NonNull
     Version version;
 
-    public CollectedBook(BookId bookId, BookType type, LibraryBranchId libraryBranchId, PatronId patronId, Version version) {
+    public CheckedOutBook(BookId bookId, BookType type, LibraryBranchId libraryBranchId, PatronId patronId, Version version) {
         this(new BookInformation(bookId, type), libraryBranchId, patronId, version);
     }
 

File: src/main/java/io/pillopl/library/lending/dailysheet/model/DailySheet.java
Patch:
@@ -14,7 +14,7 @@ public interface DailySheet {
 
     void handle(BookHoldExpired event);
 
-    void handle(BookCollected event);
+    void handle(BookCheckedOut event);
 
     void handle(BookReturned event);
 

File: src/main/java/io/pillopl/library/lending/patron/infrastructure/PatronConfiguration.java
Patch:
@@ -2,7 +2,7 @@
 
 import io.pillopl.library.commons.events.DomainEvents;
 import io.pillopl.library.lending.dailysheet.model.DailySheet;
-import io.pillopl.library.lending.patron.application.checkout.CollectingBookOnHold;
+import io.pillopl.library.lending.patron.application.checkout.CheckingOutBookOnHold;
 import io.pillopl.library.lending.patron.application.checkout.RegisteringOverdueCheckout;
 import io.pillopl.library.lending.patron.application.hold.CancelingHold;
 import io.pillopl.library.lending.patron.application.hold.ExpiringHolds;
@@ -21,8 +21,8 @@
 public class PatronConfiguration {
 
     @Bean
-    CollectingBookOnHold collectingBookOnHold(FindBookOnHold findBookOnHold, Patrons patronRepository) {
-        return new CollectingBookOnHold(findBookOnHold, patronRepository);
+    CheckingOutBookOnHold checkingOutBookOnHold(FindBookOnHold findBookOnHold, Patrons patronRepository) {
+        return new CheckingOutBookOnHold(findBookOnHold, patronRepository);
     }
 
     @Bean

File: src/main/java/io/pillopl/library/lending/patron/infrastructure/PatronDatabaseEntity.java
Patch:
@@ -38,7 +38,7 @@ PatronDatabaseEntity handle(PatronEvent event) {
         return API.Match(event).of(
                 Case($(instanceOf(BookPlacedOnHoldEvents.class)), this::handle),
                 Case($(instanceOf(BookPlacedOnHold.class)), this::handle),
-                Case($(instanceOf(BookCollected.class)), this::handle),
+                Case($(instanceOf(BookCheckedOut.class)), this::handle),
                 Case($(instanceOf(BookHoldCanceled.class)), this::handle),
                 Case($(instanceOf(BookHoldExpired.class)), this::handle),
                 Case($(instanceOf(OverdueCheckoutRegistered.class)), this::handle),
@@ -62,7 +62,7 @@ private PatronDatabaseEntity handle(BookHoldCanceled event) {
     }
 
 
-    private PatronDatabaseEntity handle(BookCollected event) {
+    private PatronDatabaseEntity handle(BookCheckedOut event) {
         return removeHoldIfPresent(event.getPatronId(), event.getBookId(), event.getLibraryBranchId());
     }
 

File: src/main/java/io/pillopl/library/lending/patronprofile/infrastructure/PatronProfileReadModel.java
Patch:
@@ -43,7 +43,7 @@ public PatronProfile fetchFor(PatronId patronId) {
 
     private List<Map<String, Object>> findCurrentHoldsFor(PatronId patronId) {
         return sheets.query(
-                "SELECT h.book_id, h.hold_till FROM holds_sheet h WHERE h.hold_by_patron_id = ? AND h.collected_at IS NULL AND h.expired_at IS NULL AND h.canceled_at IS NULL",
+                "SELECT h.book_id, h.hold_till FROM holds_sheet h WHERE h.hold_by_patron_id = ? AND h.checked_out_at IS NULL AND h.expired_at IS NULL AND h.canceled_at IS NULL",
                 new Object[]{patronId.getPatronId()},
                 new ColumnMapRowMapper());
     }
@@ -55,7 +55,7 @@ private Tuple2<BookId, Instant> toHoldViewTuple(Map<String, Object> map) {
 
     private List<Map<String, Object>> findCurrentCheckoutsFor(PatronId patronId) {
         return sheets.query(
-                "SELECT h.book_id, h.checkout_till FROM checkouts_sheet h WHERE h.collected_by_patron_id = ? AND h.returned_at IS NULL",
+                "SELECT h.book_id, h.checkout_till FROM checkouts_sheet h WHERE h.checked_out_by_patron_id = ? AND h.returned_at IS NULL",
                 new Object[]{patronId.getPatronId()},
                 new ColumnMapRowMapper());
     }

File: src/test/groovy/io/pillopl/library/lending/book/model/BookFixture.java
Patch:
@@ -46,8 +46,8 @@ public static AvailableBook circulatingAvailableBook() {
         return circulatingAvailableBookAt(anyBranch());
     }
 
-    public static CollectedBook collectedBook() {
-        return new CollectedBook(new BookInformation(anyBookId(), Circulating), anyBranch(), anyPatronId(), version0());
+    public static CheckedOutBook checkedOutBook() {
+        return new CheckedOutBook(new BookInformation(anyBookId(), Circulating), anyBranch(), anyPatronId(), version0());
     }
 
     public static AvailableBook restrictedBook() {

File: src/main/java/io/pillopl/library/lending/LendingDatabaseConfig.java
Patch:
@@ -3,7 +3,6 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.data.jdbc.repository.config.AbstractJdbcConfiguration;
-import org.springframework.data.jdbc.repository.config.JdbcConfiguration;
 import org.springframework.jdbc.core.JdbcTemplate;
 import org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations;
 import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;

File: src/main/java/io/pillopl/library/lending/application/holding/FindAvailableBook.java
Patch:
@@ -1,12 +1,12 @@
 package io.pillopl.library.lending.application.holding;
 
 
-import io.pillopl.library.lending.domain.book.Book;
+import io.pillopl.library.lending.domain.book.AvailableBook;
 import io.pillopl.library.lending.domain.book.BookId;
 import io.vavr.control.Option;
 
 @FunctionalInterface
-interface FindBook {
+interface FindAvailableBook {
 
-    Option<Book> with(BookId bookId);
+    Option<AvailableBook> with(BookId bookId);
 }

File: src/main/java/io/pillopl/library/lending/domain/patron/PatronBooksFactory.java
Patch:
@@ -5,9 +5,9 @@
 
 public class PatronBooksFactory {
 
-    public PatronBooks recreateFrom(PatronInformation patronInformation, BooksOnHold booksOnHold) {
+    public PatronBooks recreateFrom(PatronInformation patronInformation, PatronHolds patronHolds) {
         //TODO overduecheckouts
-        return new PatronBooks(patronInformation, allCurrentPolicies(), noOverdueCheckouts(), booksOnHold);
+        return new PatronBooks(patronInformation, allCurrentPolicies(), noOverdueCheckouts(), patronHolds);
     }
 
 }

File: src/main/java/io/pillopl/library/domain/PatronResources.java
Patch:
@@ -42,7 +42,7 @@ Either<ResourceHoldFailed, ResourcePlacedOnHold> placeOnHold(Resource resource)
         Option<Rejection> rejection = checkRejectionPolicy(resource);
         if (!rejection.isEmpty()) {
             return left(ResourceHoldFailed.now(
-                    rejection.map(Rejection::getReason).getOrElse("couldnt hold"),
+                    rejection.map(Rejection::getReason).getOrElse("couldn't hold resource"),
                     resource,
                     patron));
         }

