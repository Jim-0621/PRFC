File: src/main/java/net/coobird/thumbnailator/tasks/io/BufferedImageSource.java
Patch:
@@ -67,7 +67,7 @@ public BufferedImage read() throws IOException {
 		if (param != null && param.getSourceRegion() != null) {
 			Region region = param.getSourceRegion();
 			Rectangle r = region.calculate(
-					img.getWidth(), img.getHeight(), false, false
+					img.getWidth(), img.getHeight(), false, false, false
 			);
 			
 			return finishedReading(img.getSubimage(r.x, r.y, r.width, r.height));

File: src/main/java/net/coobird/thumbnailator/builders/package-info.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * Thumbnailator - a thumbnail generation library
  *
- * Copyright (c) 2008-2020 Chris Kroells
+ * Copyright (c) 2008-2022 Chris Kroells
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -24,6 +24,7 @@
 
 /**
  * This package provides classes which provides convenient builders for classes
- * which are used by Thumbnailator.
+ * which are used by Thumbnailator. These classes are used mostly for internal
+ * processing.
  */
 package net.coobird.thumbnailator.builders;

File: src/main/java/net/coobird/thumbnailator/package-info.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * Thumbnailator - a thumbnail generation library
  *
- * Copyright (c) 2008-2020 Chris Kroells
+ * Copyright (c) 2008-2022 Chris Kroells
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -24,6 +24,7 @@
 
 /**
  * This package contains classes which provide the core functionalities of
- * Thumbnailator.
+ * Thumbnailator, including {@link net.coobird.thumbnailator.Thumbnails},
+ * the entry point for most use cases of Thumbnailator.
  */
 package net.coobird.thumbnailator;

File: src/test/java/net/coobird/thumbnailator/filters/WatermarkTest.java
Patch:
@@ -160,7 +160,7 @@ public void constructorAllowsPositiveInsets() {
 	}
 
 	@Test(expected = IllegalArgumentException.class)
-	public void constructorAllowsNegativeInsets() {
+	public void constructorRejectsNegativeInsets() {
 		new Watermark(
 				DEFAULT_POSITION,
 				DEFAULT_WATERMARK,

File: src/main/java/net/coobird/thumbnailator/util/ThumbnailatorUtils.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * Thumbnailator - a thumbnail generation library
  *
- * Copyright (c) 2008-2020 Chris Kroells
+ * Copyright (c) 2008-2022 Chris Kroells
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -76,7 +76,7 @@ public static boolean isSupportedOutputFormat(String format)
 		}
 		
 		for (String supportedFormat : getSupportedOutputFormats()) {
-			if (supportedFormat.equals(format)) {
+			if (supportedFormat.equalsIgnoreCase(format)) {
 				return true;
 			}
 		}

File: src/main/java/net/coobird/thumbnailator/Thumbnailator.java
Patch:
@@ -364,6 +364,7 @@ public static void createThumbnail(
 	 * @param height		The height of the thumbnail.
 	 * @throws IOException	Thrown when a problem occurs when reading from
 	 * 						{@code File} representing an image file.
+	 * @return 			A collection of {@code File}s to the thumbnails.
 	 * 
 	 * @deprecated		This method has been deprecated in favor of using the
 	 * 					{@link Thumbnails#fromFiles(Iterable)} interface.

File: src/main/java/net/coobird/thumbnailator/builders/ThumbnailParameterBuilder.java
Patch:
@@ -38,11 +38,13 @@
 import net.coobird.thumbnailator.resizers.ResizerFactory;
 
 /**
+ * <p>
  * A builder for generating {@link ThumbnailParameter}.
+ * </p>
  * <p>
  * The default values assigned to the {@link ThumbnailParameter} created by
  * the {@link ThumbnailParameterBuilder} are as follows:
- * <p>
+ * </p>
  * <dl>
  * <dt>width</dt>
  * <dd>Unassigned. Must be set by the {@link #size(int, int)} method.</dd>

File: src/main/java/net/coobird/thumbnailator/util/ThumbnailatorUtils.java
Patch:
@@ -87,7 +87,8 @@ public static boolean isSupportedOutputFormat(String format)
 	/**
 	 * Returns a {@link List} of supported output formats types for a specified
 	 * output format.
-	 * 
+	 *
+	 * @param format	The output format.
 	 * @return		A {@link List} of supported output formats types. If no
 	 * 				formats types are supported, or if compression is not
 	 * 				supported for the specified format, then an empty list

File: src/main/java/net/coobird/thumbnailator/Thumbnailator.java
Patch:
@@ -364,6 +364,7 @@ public static void createThumbnail(
 	 * @param height		The height of the thumbnail.
 	 * @throws IOException	Thrown when a problem occurs when reading from
 	 * 						{@code File} representing an image file.
+	 * @return 			A collection of {@code File}s to the thumbnails.
 	 * 
 	 * @deprecated		This method has been deprecated in favor of using the
 	 * 					{@link Thumbnails#fromFiles(Iterable)} interface.

File: src/main/java/net/coobird/thumbnailator/builders/ThumbnailParameterBuilder.java
Patch:
@@ -38,11 +38,13 @@
 import net.coobird.thumbnailator.resizers.ResizerFactory;
 
 /**
+ * <p>
  * A builder for generating {@link ThumbnailParameter}.
+ * </p>
  * <p>
  * The default values assigned to the {@link ThumbnailParameter} created by
  * the {@link ThumbnailParameterBuilder} are as follows:
- * <p>
+ * </p>
  * <dl>
  * <dt>width</dt>
  * <dd>Unassigned. Must be set by the {@link #size(int, int)} method.</dd>

File: src/main/java/net/coobird/thumbnailator/util/ThumbnailatorUtils.java
Patch:
@@ -87,7 +87,8 @@ public static boolean isSupportedOutputFormat(String format)
 	/**
 	 * Returns a {@link List} of supported output formats types for a specified
 	 * output format.
-	 * 
+	 *
+	 * @param format	The output format.
 	 * @return		A {@link List} of supported output formats types. If no
 	 * 				formats types are supported, or if compression is not
 	 * 				supported for the specified format, then an empty list

File: src/main/java/net/coobird/thumbnailator/tasks/io/FileImageSink.java
Patch:
@@ -319,7 +319,7 @@ public void write(BufferedImage img) throws IOException {
 	}
 
 	/**
-	 * Returns the detination file of the thumbnail image.
+	 * Returns the destination file of the thumbnail image.
 	 * <p>
 	 * If the final destination of the thumbnail changes in the course of
 	 * writing the thumbnail. (For example, if the file extension for the given

File: src/main/java/net/coobird/thumbnailator/filters/Flip.java
Patch:
@@ -46,7 +46,7 @@ public BufferedImage apply(BufferedImage img) {
 			int height = img.getHeight();
 			
 			BufferedImage newImage =
-					new BufferedImageBuilder(width, height).build();
+					new BufferedImageBuilder(width, height, img.getType()).build();
 			
 			Graphics g = newImage.getGraphics();
 			g.drawImage(img, width, 0, 0, height, 0, 0, width, height, null);
@@ -65,7 +65,7 @@ public BufferedImage apply(BufferedImage img) {
 			int height = img.getHeight();
 			
 			BufferedImage newImage =
-					new BufferedImageBuilder(width, height).build();
+					new BufferedImageBuilder(width, height, img.getType()).build();
 			
 			Graphics g = newImage.getGraphics();
 			g.drawImage(img, 0, height, width, 0, 0, 0, width, height, null);

File: src/main/java/net/coobird/thumbnailator/filters/Flip.java
Patch:
@@ -46,7 +46,7 @@ public BufferedImage apply(BufferedImage img) {
 			int height = img.getHeight();
 			
 			BufferedImage newImage =
-					new BufferedImageBuilder(width, height).build();
+					new BufferedImageBuilder(width, height, img.getType()).build();
 			
 			Graphics g = newImage.getGraphics();
 			g.drawImage(img, width, 0, 0, height, 0, 0, width, height, null);
@@ -65,7 +65,7 @@ public BufferedImage apply(BufferedImage img) {
 			int height = img.getHeight();
 			
 			BufferedImage newImage =
-					new BufferedImageBuilder(width, height).build();
+					new BufferedImageBuilder(width, height, img.getType()).build();
 			
 			Graphics g = newImage.getGraphics();
 			g.drawImage(img, 0, height, width, 0, 0, 0, width, height, null);

File: src/main/java/net/coobird/thumbnailator/tasks/io/URLImageSource.java
Patch:
@@ -153,10 +153,10 @@ public BufferedImage read() throws IOException {
 			img = source.read();
 		} catch (Exception e) {
 			throw new IOException("Could not obtain image from URL: " + url);
+		} finally {
+			is.close();
 		}
 
-		is.close();
-		
 		this.inputFormatName = source.getInputFormatName();
 		
 		return finishedReading(img);

File: src/test/java/net/coobird/thumbnailator/ThumbnailatorTest.java
Patch:
@@ -3468,7 +3468,9 @@ public void renameGivenThumbnailParameter_createThumbnailsAsCollection() throws
 	 */
 	private byte[] makeImageData(String format, int width, int height)
 	throws IOException {
-		BufferedImage img = new BufferedImageBuilder(200, 200).build();
+		BufferedImage img = new BufferedImageBuilder(200, 200)
+				.imageType("jpg".equals(format) ? BufferedImage.TYPE_INT_RGB : BufferedImage.TYPE_INT_ARGB)
+				.build();
 		ByteArrayOutputStream baos = new ByteArrayOutputStream();
 		ImageIO.write(img, format, baos);
 		

File: src/test/java/net/coobird/thumbnailator/filters/CanvasTest.java
Patch:
@@ -29,8 +29,6 @@
 import java.awt.Color;
 import java.awt.image.BufferedImage;
 
-import net.coobird.thumbnailator.filters.Canvas;
-import net.coobird.thumbnailator.filters.ImageFilter;
 import net.coobird.thumbnailator.geometry.Positions;
 import net.coobird.thumbnailator.test.BufferedImageComparer;
 import net.coobird.thumbnailator.util.BufferedImages;

File: src/test/java/net/coobird/thumbnailator/filters/CaptionTest.java
Patch:
@@ -30,8 +30,6 @@
 import java.awt.Font;
 import java.awt.image.BufferedImage;
 
-import net.coobird.thumbnailator.filters.Caption;
-import net.coobird.thumbnailator.filters.ImageFilter;
 import net.coobird.thumbnailator.geometry.Positions;
 import net.coobird.thumbnailator.test.BufferedImageComparer;
 import net.coobird.thumbnailator.util.BufferedImages;

File: src/test/java/net/coobird/thumbnailator/filters/ColorizeTest.java
Patch:
@@ -29,8 +29,6 @@
 import java.awt.Color;
 import java.awt.image.BufferedImage;
 
-import net.coobird.thumbnailator.filters.Colorize;
-import net.coobird.thumbnailator.filters.ImageFilter;
 import net.coobird.thumbnailator.test.BufferedImageComparer;
 import net.coobird.thumbnailator.util.BufferedImages;
 

File: src/test/java/net/coobird/thumbnailator/filters/RotationTest.java
Patch:
@@ -31,8 +31,6 @@
 
 import javax.imageio.ImageIO;
 
-import net.coobird.thumbnailator.filters.ImageFilter;
-import net.coobird.thumbnailator.filters.Rotation;
 import net.coobird.thumbnailator.test.BufferedImageAssert;
 import net.coobird.thumbnailator.test.BufferedImageComparer;
 import net.coobird.thumbnailator.util.BufferedImages;

File: src/test/java/net/coobird/thumbnailator/filters/TransparencyTest.java
Patch:
@@ -28,8 +28,6 @@
 
 import java.awt.image.BufferedImage;
 
-import net.coobird.thumbnailator.filters.ImageFilter;
-import net.coobird.thumbnailator.filters.Transparency;
 import net.coobird.thumbnailator.test.BufferedImageComparer;
 import net.coobird.thumbnailator.util.BufferedImages;
 

File: src/test/java/net/coobird/thumbnailator/filters/WatermarkTest.java
Patch:
@@ -28,8 +28,6 @@
 
 import java.awt.image.BufferedImage;
 
-import net.coobird.thumbnailator.filters.ImageFilter;
-import net.coobird.thumbnailator.filters.Watermark;
 import net.coobird.thumbnailator.geometry.Positions;
 import net.coobird.thumbnailator.test.BufferedImageComparer;
 import net.coobird.thumbnailator.util.BufferedImages;

File: src/test/java/net/coobird/thumbnailator/tasks/io/Issue69FileImageSourceTest.java
Patch:
@@ -61,7 +61,7 @@ public class Issue69FileImageSourceTest {
 	public void prepareSource() throws IOException {
 		tempFile = tempFolder.newFile("temp.jpg");
 		
-		BufferedImage img = new BufferedImage(SIZE, SIZE, BufferedImage.TYPE_INT_ARGB);
+		BufferedImage img = new BufferedImage(SIZE, SIZE, BufferedImage.TYPE_INT_RGB);
 		Graphics2D g = img.createGraphics();
 		g.setPaint(new GradientPaint(0, 0, Color.blue, SIZE, SIZE, Color.red));
 		g.dispose();

File: src/test/java/net/coobird/thumbnailator/tasks/io/Issue69InputStreamImageSourceTest.java
Patch:
@@ -57,13 +57,11 @@
  */
 public class Issue69InputStreamImageSourceTest {
 	
-	@Rule
-	public TemporaryFolder tempFolder = new TemporaryFolder();
 	public static byte[] sourceByteArray;
 	public static int SIZE = 8000;
 	
 	static {
-		BufferedImage img = new BufferedImage(SIZE, SIZE, BufferedImage.TYPE_INT_ARGB);
+		BufferedImage img = new BufferedImage(SIZE, SIZE, BufferedImage.TYPE_INT_RGB);
 		Graphics2D g = img.createGraphics();
 		g.setPaint(new GradientPaint(0, 0, Color.blue, SIZE, SIZE, Color.red));
 		g.dispose();

File: src/test/java/net/coobird/thumbnailator/ThumbnailatorTest.java
Patch:
@@ -3468,7 +3468,9 @@ public void renameGivenThumbnailParameter_createThumbnailsAsCollection() throws
 	 */
 	private byte[] makeImageData(String format, int width, int height)
 	throws IOException {
-		BufferedImage img = new BufferedImageBuilder(200, 200).build();
+		BufferedImage img = new BufferedImageBuilder(200, 200)
+				.imageType("jpg".equals(format) ? BufferedImage.TYPE_INT_RGB : BufferedImage.TYPE_INT_ARGB)
+				.build();
 		ByteArrayOutputStream baos = new ByteArrayOutputStream();
 		ImageIO.write(img, format, baos);
 		

File: src/test/java/net/coobird/thumbnailator/tasks/io/Issue69FileImageSourceTest.java
Patch:
@@ -61,7 +61,7 @@ public class Issue69FileImageSourceTest {
 	public void prepareSource() throws IOException {
 		tempFile = tempFolder.newFile("temp.jpg");
 		
-		BufferedImage img = new BufferedImage(SIZE, SIZE, BufferedImage.TYPE_INT_ARGB);
+		BufferedImage img = new BufferedImage(SIZE, SIZE, BufferedImage.TYPE_INT_RGB);
 		Graphics2D g = img.createGraphics();
 		g.setPaint(new GradientPaint(0, 0, Color.blue, SIZE, SIZE, Color.red));
 		g.dispose();

File: src/test/java/net/coobird/thumbnailator/tasks/io/Issue69InputStreamImageSourceTest.java
Patch:
@@ -63,7 +63,7 @@ public class Issue69InputStreamImageSourceTest {
 	public static int SIZE = 8000;
 	
 	static {
-		BufferedImage img = new BufferedImage(SIZE, SIZE, BufferedImage.TYPE_INT_ARGB);
+		BufferedImage img = new BufferedImage(SIZE, SIZE, BufferedImage.TYPE_INT_RGB);
 		Graphics2D g = img.createGraphics();
 		g.setPaint(new GradientPaint(0, 0, Color.blue, SIZE, SIZE, Color.red));
 		g.dispose();

File: src/main/java/net/coobird/thumbnailator/tasks/io/URLImageSource.java
Patch:
@@ -153,10 +153,10 @@ public BufferedImage read() throws IOException {
 			img = source.read();
 		} catch (Exception e) {
 			throw new IOException("Could not obtain image from URL: " + url);
+		} finally {
+			is.close();
 		}
 
-		is.close();
-		
 		this.inputFormatName = source.getInputFormatName();
 		
 		return finishedReading(img);

File: src/test/java/net/coobird/thumbnailator/tasks/io/InputStreamImageSourceTest.java
Patch:
@@ -132,7 +132,7 @@ public void badImage_Png() throws IOException
 		catch (IOException e)
 		{
 			// then
-			assertEquals("Error reading PNG image data", e.getMessage());
+			assertTrue(e.getMessage().contains("Error reading PNG"));
 			throw e;
 		}
 		fail();

File: src/main/java/net/coobird/thumbnailator/util/exif/IfdType.java
Patch:
@@ -50,7 +50,7 @@ public enum IfdType
 	 * Two {@link #SLONG} values, where the first {@code SLONG} is the
 	 * numerator, while the second {@code SLONG} is the denominator.
 	 */
-	SRATIONAL(5, SLONG.size() * 2),
+	SRATIONAL(10, SLONG.size() * 2),
 	;
 	
 	private int value;

File: src/main/java/net/coobird/thumbnailator/util/exif/IfdType.java
Patch:
@@ -50,7 +50,7 @@ public enum IfdType
 	 * Two {@link #SLONG} values, where the first {@code SLONG} is the
 	 * numerator, while the second {@code SLONG} is the denominator.
 	 */
-	SRATIONAL(5, SLONG.size() * 2),
+	SRATIONAL(10, SLONG.size() * 2),
 	;
 	
 	private int value;

File: src/test/java/net/coobird/thumbnailator/filters/FlipTest.java
Patch:
@@ -18,7 +18,7 @@ public class FlipTest {
 	@Test
 	public void flipHorizontal() throws Exception {
 		// given
-		BufferedImage img = ImageIO.read(new File("test-resources/Exif/original.png"));
+		BufferedImage img = ImageIO.read(new File("src/test/resources/Exif/original.png"));
 		
 		// when
 		BufferedImage result = Flip.HORIZONTAL.apply(img);
@@ -37,7 +37,7 @@ public void flipHorizontal() throws Exception {
 	@Test
 	public void flipVertical() throws Exception {
 		// given
-		BufferedImage img = ImageIO.read(new File("test-resources/Exif/original.png"));
+		BufferedImage img = ImageIO.read(new File("src/test/resources/Exif/original.png"));
 		
 		// when
 		BufferedImage result = Flip.VERTICAL.apply(img);

File: src/test/java/net/coobird/thumbnailator/resizers/NullResizerTest.java
Patch:
@@ -17,7 +17,7 @@ public class NullResizerTest
 	public void sourceAndDestSameDimension() throws IOException
 	{
 		// given
-		BufferedImage srcImage = ImageIO.read(new File("test-resources/Thumbnailator/grid.png"));
+		BufferedImage srcImage = ImageIO.read(new File("src/test/resources/Thumbnailator/grid.png"));
 		BufferedImage destImage = new BufferedImage(100, 100, BufferedImage.TYPE_INT_ARGB);
 		
 		// when
@@ -33,7 +33,7 @@ public void sourceAndDestSameDimension() throws IOException
 	public void sourceSmallerThanDest() throws IOException
 	{
 		// given
-		BufferedImage srcImage = ImageIO.read(new File("test-resources/Thumbnailator/grid.png"));
+		BufferedImage srcImage = ImageIO.read(new File("src/test/resources/Thumbnailator/grid.png"));
 		BufferedImage destImage = new BufferedImage(200, 200, BufferedImage.TYPE_INT_ARGB);
 		
 		// when
@@ -47,7 +47,7 @@ public void sourceSmallerThanDest() throws IOException
 	public void sourceLargerThanDest() throws IOException
 	{
 		// given
-		BufferedImage srcImage = ImageIO.read(new File("test-resources/Thumbnailator/grid.png"));
+		BufferedImage srcImage = ImageIO.read(new File("src/test/resources/Thumbnailator/grid.png"));
 		BufferedImage destImage = new BufferedImage(50, 50, BufferedImage.TYPE_INT_ARGB);
 		
 		// when

File: src/test/java/net/coobird/thumbnailator/tasks/FileThumbnailTaskTest.java
Patch:
@@ -23,7 +23,7 @@ public class FileThumbnailTaskTest
 	public void nullParameter() throws IOException
 	{
 		// given
-		File inputFile = new File("test-resources/Thumbnailator/grid.jpg");
+		File inputFile = new File("src/test/resources/Thumbnailator/grid.jpg");
 		File outputFile = File.createTempFile("thumbnailator-testing-", ".png");
 		outputFile.deleteOnExit();
 		
@@ -58,7 +58,7 @@ public void testRead_CorrectUsage() throws IOException
 				true
 		);
 		
-		File inputFile = new File("test-resources/Thumbnailator/grid.jpg");
+		File inputFile = new File("src/test/resources/Thumbnailator/grid.jpg");
 		File outputFile = File.createTempFile("thumbnailator-testing-", ".png");
 		outputFile.deleteOnExit();
 		

File: src/test/java/net/coobird/thumbnailator/tasks/SourceSinkThumbnailTaskTest.java
Patch:
@@ -186,7 +186,7 @@ public void task_ChangeOutputFormat_File_OutputStream() throws IOException
 		
 		ByteArrayOutputStream os = new ByteArrayOutputStream();
 		
-		FileImageSource source = new FileImageSource("test-resources/Thumbnailator/grid.bmp");
+		FileImageSource source = new FileImageSource("src/test/resources/Thumbnailator/grid.bmp");
 		OutputStreamImageSink destination = new OutputStreamImageSink(os);
 		
 		// when

File: src/test/java/net/coobird/thumbnailator/tasks/StreamThumbnailTaskTest.java
Patch:
@@ -65,7 +65,7 @@ public void testRead_CorrectUsage() throws IOException
 				true
 		);
 		
-		File inputFile = new File("test-resources/Thumbnailator/grid.jpg");
+		File inputFile = new File("src/test/resources/Thumbnailator/grid.jpg");
 		File outputFile = File.createTempFile("thumbnailator-testing-", ".png");
 		outputFile.deleteOnExit();
 		
@@ -98,7 +98,7 @@ public void testWrite_CorrectUsage() throws IOException
 				true
 		);
 		
-		File inputFile = new File("test-resources/Thumbnailator/grid.jpg");
+		File inputFile = new File("src/test/resources/Thumbnailator/grid.jpg");
 		File outputFile = File.createTempFile("thumbnailator-testing-", ".png");
 		outputFile.deleteOnExit();
 		

File: src/net/coobird/thumbnailator/Thumbnails.java
Patch:
@@ -2051,7 +2051,7 @@ private ThumbnailParameter makeParam()
 			 */
 			if (croppingPosition != null)
 			{
-				filterPipeline.add(new Canvas(width, height, croppingPosition));
+				filterPipeline.addFirst(new Canvas(width, height, croppingPosition));
 			}
 			
 			if (Double.isNaN(scaleWidth))

File: src/net/coobird/thumbnailator/Thumbnailator.java
Patch:
@@ -127,6 +127,9 @@ else if (!Double.isNaN(param.getWidthScalingFactor()))
 		
 		// Write the thumbnail image to the destination.
 		task.write(destinationImage);
+		
+		sourceImage.flush();
+		destinationImage.flush();
 	}
 
 	/**

File: src/net/coobird/thumbnailator/util/exif/Orientation.java
Patch:
@@ -73,7 +73,7 @@ public enum Orientation
 	RIGHT_BOTTOM(7),
 	
 	/**
-	 * Orientation 6.
+	 * Orientation 8.
 	 * <ul>
 	 * <li>First row: visual left-hand side of the image</li>
 	 * <li>First column: visual bottom of the image</li>

File: test/net/coobird/thumbnailator/ThumbnailatorTest.java
Patch:
@@ -2714,7 +2714,7 @@ public void testCreateThumbnail_FFII_invalidOutputFile() throws IOException
 		 * Actual test
 		 */
 		File inputFile = new File("test-resources/Thumbnailator/grid.jpg");
-		File outputFile = new File("/@\\*&!!#"); 
+		File outputFile = new File("@\\#?/^%*&/|!!$:#"); 
 		
 		try
 		{
@@ -2723,7 +2723,7 @@ public void testCreateThumbnail_FFII_invalidOutputFile() throws IOException
 		}
 		catch (IOException e)
 		{
-			assertEquals("Could not open output file.", e.getMessage());
+			// An IOException is expected. Likely a FileNotFoundException.
 		}
 	}
 	

File: src/net/coobird/thumbnailator/name/Rename.java
Patch:
@@ -188,7 +188,7 @@ protected String appendSuffix(String fileName, String suffix)
 	{
 		String newFileName = "";
 		
-		int indexOfDot = fileName.indexOf('.');
+		int indexOfDot = fileName.lastIndexOf('.');
 		
 		if (indexOfDot != -1)
 		{

File: src/net/coobird/thumbnailator/makers/FixedSizeThumbnailMaker.java
Patch:
@@ -199,7 +199,7 @@ public FixedSizeThumbnailMaker keepAspectRatio(boolean keep)
 	 * this method with {@code true} or {@code false} makes no difference, as
 	 * the thumbnail dimensions will be exactly the given dimensions.
 	 * 
-	 * @param keep			Whether or not to maintain the aspect ratio in the
+	 * @param fit			Whether or not to maintain the aspect ratio in the
 	 * 						thumbnail the same as the original image.
 	 * 						<p>
 	 * 						If {@code true} is specified, then the 

File: src/net/coobird/thumbnailator/tasks/io/FileImageSink.java
Patch:
@@ -177,7 +177,7 @@ private static boolean isMatchingFormat(String formatName, String fileExtension)
 		
 		for (String suffix : suffixes)
 		{
-			if (fileExtension.equals(suffix))
+			if (fileExtension.equalsIgnoreCase(suffix))
 			{
 				return true;
 			}

File: src/net/coobird/thumbnailator/makers/ThumbnailMaker.java
Patch:
@@ -228,6 +228,6 @@ public ThumbnailMaker resizer(Resizer resizer)
 	 */
 	public ThumbnailMaker defaultResizer()
 	{
-		return resizer(DefaultResizerFactory.getResizer());
+		return resizer(DefaultResizerFactory.getInstance().getResizer());
 	}
 }

File: src/net/coobird/thumbnailator/Thumbnailator.java
Patch:
@@ -19,7 +19,7 @@
 import net.coobird.thumbnailator.makers.FixedSizeThumbnailMaker;
 import net.coobird.thumbnailator.makers.ScaledThumbnailMaker;
 import net.coobird.thumbnailator.name.Rename;
-import net.coobird.thumbnailator.resizers.ResizerFactory;
+import net.coobird.thumbnailator.resizers.DefaultResizerFactory;
 import net.coobird.thumbnailator.resizers.Resizers;
 import net.coobird.thumbnailator.tasks.FileThumbnailTask;
 import net.coobird.thumbnailator.tasks.StreamThumbnailTask;
@@ -163,7 +163,7 @@ public static BufferedImage createThumbnail(
 		
 		BufferedImage thumbnailImage = 
 			new FixedSizeThumbnailMaker(width, height, true)
-					.resizer(ResizerFactory.getResizer(imgSize, thumbnailSize))
+					.resizer(DefaultResizerFactory.getResizer(imgSize, thumbnailSize))
 					.make(img); 
 		
 		return thumbnailImage;

File: src/net/coobird/thumbnailator/makers/ThumbnailMaker.java
Patch:
@@ -6,7 +6,7 @@
 
 import net.coobird.thumbnailator.builders.BufferedImageBuilder;
 import net.coobird.thumbnailator.resizers.Resizer;
-import net.coobird.thumbnailator.resizers.ResizerFactory;
+import net.coobird.thumbnailator.resizers.DefaultResizerFactory;
 
 /**
  * An abstract class which provides support functionalities for
@@ -228,6 +228,6 @@ public ThumbnailMaker resizer(Resizer resizer)
 	 */
 	public ThumbnailMaker defaultResizer()
 	{
-		return resizer(ResizerFactory.getResizer());
+		return resizer(DefaultResizerFactory.getResizer());
 	}
 }

File: src/net/coobird/thumbnailator/resizers/DefaultResizerFactory.java
Patch:
@@ -10,7 +10,7 @@
  * <DL>
  * <DT><B>Usage:</B></DT>
  * <DD>
- * The following example code demonstrates how to use {@link ResizerFactory}
+ * The following example code demonstrates how to use {@link DefaultResizerFactory}
  * in order to obtain the optimal {@link Resizer}, and using that in order to
  * perform the resizing operation.
  * <p>
@@ -38,7 +38,7 @@
  * @author coobird
  *
  */
-public class ResizerFactory
+public class DefaultResizerFactory
 {
 	/**
 	 * Returns the default {@link Resizer}.

File: src/net/coobird/thumbnailator/resizers/Resizers.java
Patch:
@@ -9,7 +9,7 @@
  * The instance held by a value of this enum is a single instance. When using
  * specific implementations of {@link Resizer}s, it is preferable to obtain
  * an instance of a {@link Resizer} through this enum or the 
- * {@link ResizerFactory} class in order to prevent many instances of the
+ * {@link DefaultResizerFactory} class in order to prevent many instances of the
  * {@link Resizer} class implementations from being instantiated.
  * <p>
  * <DL>
@@ -27,7 +27,7 @@
  * </DD>
  * </DL>
  * 
- * @see ResizerFactory
+ * @see DefaultResizerFactory
  * 
  * @author coobird
  *

File: src/net/coobird/thumbnailator/tasks/io/ImageSink.java
Patch:
@@ -23,7 +23,7 @@ public interface ImageSink<T>
 	 * @param img				The image to write or store.
 	 * @throws IOException		When a problem occurs while writing or storing
 	 * 							the image.
-	 * @throws NullPointerException		If the image is null.
+	 * @throws NullPointerException		If the image is {@code null}.
 	 */
 	public void write(BufferedImage img) throws IOException;
 	

File: src/net/coobird/thumbnailator/Thumbnails.java
Patch:
@@ -272,8 +272,8 @@ public static Builder<URL> fromURLs(Collection<URL> urls)
 	 * Indicate to make thumbnails for images obtained from the specified 
 	 * {@link InputStream}s.
 	 * 
-	 * @param urls		{@link InputStream}s which provide images for which 
-	 * 					thumbnails are to be produced.
+	 * @param inputStreams		{@link InputStream}s which provide images for
+	 * 							which thumbnails are to be produced.
 	 * @return			Reference to a builder object which is used to
 	 * 					specify the parameters for creating the thumbnail.
 	 * @throws NullPointerException		If the argument is {@code null}.

File: src/net/coobird/thumbnailator/Thumbnails.java
Patch:
@@ -1495,6 +1495,8 @@ public List<BufferedImage> asBufferedImages()
 			List<BufferedImage> thumbnails = new ArrayList<BufferedImage>();
 			
 			// Create thumbnails
+			// TODO This code could cause very large images to cause
+			// OutOfMemoryErrors.
 			for (BufferedImage img : getOriginalImages())
 			{
 				ThumbnailMaker maker = makeThumbnailMaker(r, img.getType());

File: src/net/coobird/thumbnailator/resizers/ProgressiveBilinearResizer.java
Patch:
@@ -1,5 +1,7 @@
 package net.coobird.thumbnailator.resizers;
 
+import java.awt.AlphaComposite;
+import java.awt.Composite;
 import java.awt.Graphics;
 import java.awt.Graphics2D;
 import java.awt.RenderingHints;
@@ -80,6 +82,7 @@ public void resize(BufferedImage srcImage, BufferedImage destImage)
 		
 		Graphics2D g = tempImage.createGraphics();
 		g.setRenderingHints(RENDERING_HINTS);
+		g.setComposite(AlphaComposite.Src);
 		
 		/*
 		 * Determine the size of the first resize step should be.

File: src/net/coobird/thumbnailator/Thumbnails.java
Patch:
@@ -54,7 +54,7 @@
     .size(200, 200)
     .keepAspectRatio(true)
     .outputFormat("jpeg")
-    .asFiles(Thumbnailator.PREFIX_DOT_THUMBNAIL_RENAME);
+    .asFiles(Rename.PREFIX_DOT_THUMBNAIL);
  * </pre>
  * </DD>
  * </DL>

File: src/net/coobird/thumbnailator/tasks/FileThumbnailTask.java
Patch:
@@ -93,7 +93,6 @@ public boolean write(BufferedImage img) throws IOException
 		 */
 		
 		String formatName;
-		System.out.println(inputFormatName);
 		if (param.getOutputFormat() == ThumbnailParameter.ORIGINAL_FORMAT || inputFormatName.equalsIgnoreCase(param.getOutputFormat()))
 		{
 			formatName = inputFormatName;

