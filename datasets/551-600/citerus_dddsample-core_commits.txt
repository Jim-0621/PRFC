File: src/test/java/se/citerus/dddsample/acceptance/pages/CargoDetailsPage.java
Patch:
@@ -58,7 +58,7 @@ public CargoDestinationPage changeDestination() {
     public void expectArrivalDeadlineOf(LocalDate expectedArrivalDeadline) {
         String actualArrivalDeadline = driver.findElement(By.xpath("//div[@id='container']/table/tbody/tr[4]/td[2]")).getText();
 
-        assertThat(expectedArrivalDeadline.format(FORMATTER)).isEqualTo(actualArrivalDeadline);
+        assertThat(actualArrivalDeadline).isEqualTo(expectedArrivalDeadline.format(FORMATTER));
     }
 
     public void expectRoutedOf(String routingStatus) {

File: src/test/java/se/citerus/dddsample/interfaces/handling/file/UploadDirectoryScannerTest.java
Patch:
@@ -40,7 +40,7 @@ void setUp() throws IOException {
     @Test
     public void shouldParseLinesAndPublishEventsForValidFile() throws Exception {
         ArgumentCaptor<HandlingEventRegistrationAttempt> captor = ArgumentCaptor.forClass(HandlingEventRegistrationAttempt.class);
-        ApplicationEvents appEventsMock = spy(mock(ApplicationEvents.class));
+        ApplicationEvents appEventsMock = mock(ApplicationEvents.class);
         UploadDirectoryScanner scanner = new UploadDirectoryScanner(uploadDir, parseFailureDir, appEventsMock);
         URL resource = this.getClass().getResource("/sampleHandlingReportFile.csv");
         assertThat(resource).isNotNull();
@@ -64,7 +64,7 @@ public void shouldParseLinesAndPublishEventsForValidFile() throws Exception {
 
     @Test
     void shouldCreateFileContainingInvalidLinesIfParsingFails() throws Exception {
-        ApplicationEvents appEventsMock = spy(mock(ApplicationEvents.class));
+        ApplicationEvents appEventsMock = mock(ApplicationEvents.class);
         UploadDirectoryScanner scanner = new UploadDirectoryScanner(uploadDir, parseFailureDir, appEventsMock);
         URL resource = this.getClass().getResource("/sampleInvalidHandlingReportFile.csv");
         assertThat(resource).isNotNull();

File: src/main/java/se/citerus/dddsample/domain/model/cargo/Cargo.java
Patch:
@@ -5,6 +5,7 @@
 import se.citerus.dddsample.domain.model.location.Location;
 import se.citerus.dddsample.domain.shared.Entity;
 
+import java.util.Objects;
 import javax.persistence.*;
 import java.util.List;
 

File: src/main/java/se/citerus/dddsample/domain/model/handling/HandlingEvent.java
Patch:
@@ -3,7 +3,6 @@
 import org.apache.commons.lang.Validate;
 import org.apache.commons.lang.builder.EqualsBuilder;
 import org.apache.commons.lang.builder.HashCodeBuilder;
-import org.apache.commons.lang3.ObjectUtils;
 import se.citerus.dddsample.domain.model.cargo.Cargo;
 import se.citerus.dddsample.domain.model.location.Location;
 import se.citerus.dddsample.domain.model.voyage.Voyage;
@@ -12,6 +11,7 @@
 
 import javax.persistence.*;
 import java.util.Date;
+import java.util.Objects;
 
 /**
  * A HandlingEvent is used to register the event when, for instance,
@@ -97,7 +97,7 @@ public boolean prohibitsVoyage() {
 
     @Override
     public boolean sameValueAs(Type other) {
-      return other != null && this.equals(other);
+      return this.equals(other);
     }
 
   }
@@ -170,7 +170,7 @@ public Type type() {
   }
 
   public Voyage voyage() {
-    return ObjectUtils.defaultIfNull(this.voyage, Voyage.NONE);
+    return Objects.requireNonNullElse(this.voyage, Voyage.NONE);
   }
 
   public Date completionTime() {

File: src/main/java/se/citerus/dddsample/interfaces/handling/file/UploadDirectoryScanner.java
Patch:
@@ -36,8 +36,8 @@ public class UploadDirectoryScanner extends TimerTask implements InitializingBea
   private final ApplicationEvents applicationEvents;
 
   public UploadDirectoryScanner(@NonNull File uploadDirectory, @NonNull File parseFailureDirectory, ApplicationEvents applicationEvents) {
-    this.uploadDirectory = Objects.requireNonNull(uploadDirectory);
-    this.parseFailureDirectory = Objects.requireNonNull(parseFailureDirectory);
+    this.uploadDirectory = uploadDirectory;
+    this.parseFailureDirectory = parseFailureDirectory;
     this.applicationEvents = applicationEvents;
   }
 

File: src/test/java/se/citerus/dddsample/application/BookingServiceTest.java
Patch:
@@ -17,8 +17,8 @@
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.isA;
 import static org.mockito.Mockito.*;
-import static se.citerus.dddsample.domain.model.location.SampleLocations.CHICAGO;
-import static se.citerus.dddsample.domain.model.location.SampleLocations.STOCKHOLM;
+import static se.citerus.dddsample.infrastructure.sampledata.SampleLocations.CHICAGO;
+import static se.citerus.dddsample.infrastructure.sampledata.SampleLocations.STOCKHOLM;
 
 public class BookingServiceTest {
 

File: src/test/java/se/citerus/dddsample/application/HandlingEventServiceTest.java
Patch:
@@ -17,8 +17,8 @@
 
 import static org.mockito.ArgumentMatchers.isA;
 import static org.mockito.Mockito.*;
-import static se.citerus.dddsample.domain.model.location.SampleLocations.*;
-import static se.citerus.dddsample.domain.model.voyage.SampleVoyages.CM001;
+import static se.citerus.dddsample.infrastructure.sampledata.SampleLocations.*;
+import static se.citerus.dddsample.infrastructure.sampledata.SampleVoyages.CM001;
 
 public class HandlingEventServiceTest {
   private HandlingEventServiceImpl service;

File: src/test/java/se/citerus/dddsample/domain/model/handling/HandlingEventFactoryTest.java
Patch:
@@ -21,8 +21,8 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 import static se.citerus.dddsample.domain.model.handling.HandlingEvent.Type;
-import static se.citerus.dddsample.domain.model.location.SampleLocations.*;
-import static se.citerus.dddsample.domain.model.voyage.SampleVoyages.CM001;
+import static se.citerus.dddsample.infrastructure.sampledata.SampleLocations.*;
+import static se.citerus.dddsample.infrastructure.sampledata.SampleVoyages.CM001;
 
 public class HandlingEventFactoryTest {
 

File: src/test/java/se/citerus/dddsample/domain/model/handling/HandlingHistoryTest.java
Patch:
@@ -12,8 +12,8 @@
 import java.util.List;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static se.citerus.dddsample.application.util.DateTestUtil.toDate;
-import static se.citerus.dddsample.domain.model.location.SampleLocations.*;
+import static se.citerus.dddsample.application.util.DateUtils.toDate;
+import static se.citerus.dddsample.infrastructure.sampledata.SampleLocations.*;
 
 public class HandlingHistoryTest {
   Cargo cargo;

File: src/test/java/se/citerus/dddsample/interfaces/booking/facade/internal/assembler/ItineraryCandidateDTOAssemblerTest.java
Patch:
@@ -18,8 +18,8 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
-import static se.citerus.dddsample.domain.model.location.SampleLocations.*;
-import static se.citerus.dddsample.domain.model.voyage.SampleVoyages.CM001;
+import static se.citerus.dddsample.infrastructure.sampledata.SampleLocations.*;
+import static se.citerus.dddsample.infrastructure.sampledata.SampleVoyages.CM001;
 
 public class ItineraryCandidateDTOAssemblerTest {
 

File: src/test/java/se/citerus/dddsample/scenario/CargoLifecycleScenarioTest.java
Patch:
@@ -30,13 +30,13 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.fail;
-import static se.citerus.dddsample.application.util.DateTestUtil.toDate;
+import static se.citerus.dddsample.application.util.DateUtils.toDate;
 import static se.citerus.dddsample.domain.model.cargo.RoutingStatus.*;
 import static se.citerus.dddsample.domain.model.cargo.TransportStatus.*;
 import static se.citerus.dddsample.domain.model.handling.HandlingEvent.Type.*;
-import static se.citerus.dddsample.domain.model.location.SampleLocations.*;
-import static se.citerus.dddsample.domain.model.voyage.SampleVoyages.*;
 import static se.citerus.dddsample.domain.model.voyage.Voyage.NONE;
+import static se.citerus.dddsample.infrastructure.sampledata.SampleLocations.*;
+import static se.citerus.dddsample.infrastructure.sampledata.SampleVoyages.*;
 
 public class CargoLifecycleScenarioTest {
 

File: src/main/java/se/citerus/dddsample/application/util/DateUtils.java
Patch:
@@ -8,7 +8,7 @@
  * A few utils for working with Date in tests.
  *
  */
-public final class DateTestUtil {
+public final class DateUtils {
 
   /**
    * @param date date string as yyyy-MM-dd
@@ -34,6 +34,6 @@ public static Date toDate(final String date, final String time) {
   /**
    * Prevent instantiation.
    */
-  private DateTestUtil() {
+  private DateUtils() {
   }
 }

File: src/main/java/se/citerus/dddsample/domain/model/cargo/CargoRepository.java
Patch:
@@ -17,7 +17,7 @@ public interface CargoRepository {
    *
    * @return All cargo.
    */
-  List<Cargo> findAll();
+  List<Cargo> getAll();
 
   /**
    * Saves given cargo.

File: src/main/java/se/citerus/dddsample/domain/model/cargo/Itinerary.java
Patch:
@@ -5,6 +5,7 @@
 import se.citerus.dddsample.domain.model.location.Location;
 import se.citerus.dddsample.domain.shared.ValueObject;
 
+import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Date;
 import java.util.List;
@@ -36,7 +37,7 @@ public Itinerary(final List<Leg> legs) {
    * @return the legs of this itinerary, as an <b>immutable</b> list.
    */
   public List<Leg> legs() {
-    return Collections.unmodifiableList(legs);
+    return new ArrayList<>(legs); // Note: due to JPA requirements, the returned list must be modifiable.
   }
 
   /**

File: src/main/java/se/citerus/dddsample/domain/model/location/LocationRepository.java
Patch:
@@ -17,7 +17,7 @@ public interface LocationRepository {
    *
    * @return All locations.
    */
-  List<Location> findAll();
+  List<Location> getAll();
 
   Location store(Location location);
 }

File: src/main/java/se/citerus/dddsample/domain/model/voyage/Schedule.java
Patch:
@@ -17,7 +17,7 @@ public class Schedule implements ValueObject<Schedule> {
 
   public static final Schedule EMPTY = new Schedule();
 
-  Schedule(final List<CarrierMovement> carrierMovements) {
+  public Schedule(final List<CarrierMovement> carrierMovements) {
     Validate.notNull(carrierMovements);
     Validate.noNullElements(carrierMovements);
     Validate.notEmpty(carrierMovements);

File: src/main/java/se/citerus/dddsample/infrastructure/persistence/jpa/VoyageRepositoryJPA.java
Patch:
@@ -1,5 +1,6 @@
 package se.citerus.dddsample.infrastructure.persistence.jpa;
 
+import org.springframework.data.jpa.repository.Query;
 import org.springframework.data.repository.CrudRepository;
 import se.citerus.dddsample.domain.model.voyage.Voyage;
 import se.citerus.dddsample.domain.model.voyage.VoyageNumber;
@@ -8,12 +9,13 @@
 /**
  * Hibernate implementation of CarrierMovementRepository.
  */
-public interface VoyageRepositoryJpa extends CrudRepository<Voyage, Long>, VoyageRepository {
+public interface VoyageRepositoryJPA extends CrudRepository<Voyage, Long>, VoyageRepository {
 
   default Voyage find(final VoyageNumber voyageNumber) {
     return findByVoyageNumber(voyageNumber.idString());
   }
 
+  @Query("select v from Voyage v where v.voyageNumber = :voyageNumber")
   Voyage findByVoyageNumber(String voyageNumber);
 
   @Override

File: src/main/java/se/citerus/dddsample/interfaces/booking/web/CargoAdminController.java
Patch:
@@ -36,7 +36,7 @@
 @RequestMapping("/admin")
 public final class CargoAdminController {
 
-    private BookingServiceFacade bookingServiceFacade;
+    private final BookingServiceFacade bookingServiceFacade;
 
     public CargoAdminController(BookingServiceFacade bookingServiceFacade) {
         this.bookingServiceFacade = bookingServiceFacade;

File: src/test/java/se/citerus/dddsample/domain/model/cargo/ItineraryTest.java
Patch:
@@ -13,7 +13,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.fail;
-import static se.citerus.dddsample.domain.model.location.SampleLocations.*;
+import static se.citerus.dddsample.infrastructure.sampledata.SampleLocations.*;
 
 public class ItineraryTest {
   private final CarrierMovement abc = new CarrierMovement(SHANGHAI, ROTTERDAM, new Date(), new Date());

File: src/test/java/se/citerus/dddsample/domain/model/cargo/RouteSpecificationTest.java
Patch:
@@ -7,8 +7,8 @@
 import java.util.List;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static se.citerus.dddsample.application.util.DateTestUtil.toDate;
-import static se.citerus.dddsample.domain.model.location.SampleLocations.*;
+import static se.citerus.dddsample.application.util.DateUtils.toDate;
+import static se.citerus.dddsample.infrastructure.sampledata.SampleLocations.*;
 
 public class RouteSpecificationTest {
 

File: src/test/java/se/citerus/dddsample/domain/model/location/LocationTest.java
Patch:
@@ -1,10 +1,10 @@
 package se.citerus.dddsample.domain.model.location;
 
+import org.junit.Test;
+
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.fail;
 
-import org.junit.Test;
-
 public class LocationTest {
 
   @Test
@@ -28,7 +28,7 @@ public void testEquals() {
     assertThat(Location.UNKNOWN.equals(Location.UNKNOWN)).isTrue();
 
     try {
-      new Location(null, null);
+      new Location((UnLocode) null, null);
       fail("Should not allow any null constructor arguments");
     } catch (IllegalArgumentException expected) {}
   }

File: src/test/java/se/citerus/dddsample/domain/model/voyage/CarrierMovementTest.java
Patch:
@@ -2,8 +2,8 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.fail;
-import static se.citerus.dddsample.domain.model.location.SampleLocations.HAMBURG;
-import static se.citerus.dddsample.domain.model.location.SampleLocations.STOCKHOLM;
+import static se.citerus.dddsample.infrastructure.sampledata.SampleLocations.HAMBURG;
+import static se.citerus.dddsample.infrastructure.sampledata.SampleLocations.STOCKHOLM;
 
 import java.util.Date;
 

File: src/test/java/se/citerus/dddsample/infrastructure/persistence/inmemory/CargoRepositoryInMem.java
Patch:
@@ -8,7 +8,7 @@
 import se.citerus.dddsample.domain.model.handling.HandlingHistory;
 import se.citerus.dddsample.domain.model.location.Location;
 
-import static se.citerus.dddsample.domain.model.location.SampleLocations.*;
+import static se.citerus.dddsample.infrastructure.sampledata.SampleLocations.*;
 
 import java.util.*;
 
@@ -47,7 +47,7 @@ public TrackingId nextTrackingId() {
         );
     }
 
-    public List<Cargo> findAll() {
+    public List<Cargo> getAll() {
         return new ArrayList<>(cargoDb.values());
     }
 

File: src/test/java/se/citerus/dddsample/infrastructure/persistence/inmemory/LocationRepositoryInMem.java
Patch:
@@ -2,7 +2,7 @@
 
 import se.citerus.dddsample.domain.model.location.Location;
 import se.citerus.dddsample.domain.model.location.LocationRepository;
-import se.citerus.dddsample.domain.model.location.SampleLocations;
+import se.citerus.dddsample.infrastructure.sampledata.SampleLocations;
 import se.citerus.dddsample.domain.model.location.UnLocode;
 
 import java.util.List;
@@ -18,7 +18,7 @@ public Location find(UnLocode unLocode) {
     return null;
   }
 
-  public List<Location> findAll() {
+  public List<Location> getAll() {
     return SampleLocations.getAll();
   }
 

File: src/test/java/se/citerus/dddsample/infrastructure/persistence/inmemory/VoyageRepositoryInMem.java
Patch:
@@ -1,6 +1,6 @@
 package se.citerus.dddsample.infrastructure.persistence.inmemory;
 
-import se.citerus.dddsample.domain.model.voyage.SampleVoyages;
+import se.citerus.dddsample.infrastructure.sampledata.SampleVoyages;
 import se.citerus.dddsample.domain.model.voyage.Voyage;
 import se.citerus.dddsample.domain.model.voyage.VoyageNumber;
 import se.citerus.dddsample.domain.model.voyage.VoyageRepository;

File: src/test/java/se/citerus/dddsample/infrastructure/routing/ExternalRoutingServiceTest.java
Patch:
@@ -8,7 +8,7 @@
 import se.citerus.dddsample.domain.model.cargo.*;
 import se.citerus.dddsample.domain.model.location.Location;
 import se.citerus.dddsample.domain.model.location.LocationRepository;
-import se.citerus.dddsample.domain.model.voyage.SampleVoyages;
+import se.citerus.dddsample.infrastructure.sampledata.SampleVoyages;
 import se.citerus.dddsample.domain.model.voyage.VoyageNumber;
 import se.citerus.dddsample.domain.model.voyage.VoyageRepository;
 import se.citerus.dddsample.infrastructure.persistence.inmemory.LocationRepositoryInMem;
@@ -20,7 +20,7 @@
 import static org.mockito.ArgumentMatchers.isA;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
-import static se.citerus.dddsample.domain.model.location.SampleLocations.*;
+import static se.citerus.dddsample.infrastructure.sampledata.SampleLocations.*;
 
 public class ExternalRoutingServiceTest {
 

File: src/test/java/se/citerus/dddsample/interfaces/booking/facade/internal/assembler/CargoRoutingDTOAssemblerTest.java
Patch:
@@ -10,8 +10,8 @@
 import java.util.List;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static se.citerus.dddsample.domain.model.location.SampleLocations.*;
-import static se.citerus.dddsample.domain.model.voyage.SampleVoyages.CM001;
+import static se.citerus.dddsample.infrastructure.sampledata.SampleLocations.*;
+import static se.citerus.dddsample.infrastructure.sampledata.SampleVoyages.CM001;
 
 public class CargoRoutingDTOAssemblerTest {
 

File: src/test/java/se/citerus/dddsample/interfaces/booking/facade/internal/assembler/LocationDTOAssemblerTest.java
Patch:
@@ -7,8 +7,8 @@
 import java.util.List;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static se.citerus.dddsample.domain.model.location.SampleLocations.HAMBURG;
-import static se.citerus.dddsample.domain.model.location.SampleLocations.STOCKHOLM;
+import static se.citerus.dddsample.infrastructure.sampledata.SampleLocations.HAMBURG;
+import static se.citerus.dddsample.infrastructure.sampledata.SampleLocations.STOCKHOLM;
 
 public class LocationDTOAssemblerTest {
 

File: src/main/java/se/citerus/dddsample/domain/model/location/SampleLocations.java
Patch:
@@ -22,7 +22,7 @@ public class SampleLocations {
   public static final Location SHANGHAI = new Location(new UnLocode("CNSHA"), "Shanghai");
   public static final Location ROTTERDAM = new Location(new UnLocode("NLRTM"), "Rotterdam");
   public static final Location GOTHENBURG = new Location(new UnLocode("SEGOT"), "Göteborg");
-  public static final Location HANGZOU = new Location(new UnLocode("CNHGH"), "Hangzhou");
+  public static final Location HANGZHOU = new Location(new UnLocode("CNHGH"), "Hangzhou");
   public static final Location NEWYORK = new Location(new UnLocode("USNYC"), "New York");
   public static final Location DALLAS = new Location(new UnLocode("USDAL"), "Dallas");
 

File: src/main/java/se/citerus/dddsample/domain/model/voyage/SampleVoyages.java
Patch:
@@ -19,7 +19,7 @@ public class SampleVoyages {
     public static final Voyage CM003 = createVoyage("CM003", HONGKONG, NEWYORK);
     public static final Voyage CM004 = createVoyage("CM004", NEWYORK, CHICAGO);
     public static final Voyage CM005 = createVoyage("CM005", CHICAGO, HAMBURG);
-    public static final Voyage CM006 = createVoyage("CM006", HAMBURG, HANGZOU);
+    public static final Voyage CM006 = createVoyage("CM006", HAMBURG, HANGZHOU);
 
     private static Voyage createVoyage(String id, Location from, Location to) {
         return new Voyage(new VoyageNumber(id), new Schedule(Collections.singletonList(
@@ -57,7 +57,7 @@ private static Voyage createVoyage(String id, Location from, Location to) {
      */
     public static final Voyage HONGKONG_TO_NEW_YORK =
             new Voyage.Builder(new VoyageNumber("0100S"), HONGKONG).
-                    addMovement(HANGZOU, toDate("2008-10-01", "12:00"), toDate("2008-10-03", "14:30")).
+                    addMovement(HANGZHOU, toDate("2008-10-01", "12:00"), toDate("2008-10-03", "14:30")).
                     addMovement(TOKYO, toDate("2008-10-03", "21:00"), toDate("2008-10-06", "06:15")).
                     addMovement(MELBOURNE, toDate("2008-10-06", "11:00"), toDate("2008-10-12", "11:30")).
                     addMovement(NEWYORK, toDate("2008-10-14", "12:00"), toDate("2008-10-23", "23:10")).

File: src/test/java/se/citerus/dddsample/domain/model/cargo/ItineraryTest.java
Patch:
@@ -3,7 +3,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.fail;
 import static se.citerus.dddsample.domain.model.location.SampleLocations.GOTHENBURG;
-import static se.citerus.dddsample.domain.model.location.SampleLocations.HANGZOU;
+import static se.citerus.dddsample.domain.model.location.SampleLocations.HANGZHOU;
 import static se.citerus.dddsample.domain.model.location.SampleLocations.HELSINKI;
 import static se.citerus.dddsample.domain.model.location.SampleLocations.NEWYORK;
 import static se.citerus.dddsample.domain.model.location.SampleLocations.ROTTERDAM;
@@ -82,7 +82,7 @@ public void testCargoOnTrack() {
     assertThat(itinerary.isExpected(event)).isTrue();
 
     //Received at the wrong location
-    event = new HandlingEvent(cargo, new Date(), new Date(), HandlingEvent.Type.RECEIVE, HANGZOU);
+    event = new HandlingEvent(cargo, new Date(), new Date(), HandlingEvent.Type.RECEIVE, HANGZHOU);
     assertThat(itinerary.isExpected(event)).isFalse();
 
     //Loaded to onto the wrong ship, correct location

File: src/test/java/se/citerus/dddsample/domain/model/cargo/RouteSpecificationTest.java
Patch:
@@ -4,7 +4,7 @@
 import static se.citerus.dddsample.application.util.DateTestUtil.toDate;
 import static se.citerus.dddsample.domain.model.location.SampleLocations.CHICAGO;
 import static se.citerus.dddsample.domain.model.location.SampleLocations.DALLAS;
-import static se.citerus.dddsample.domain.model.location.SampleLocations.HANGZOU;
+import static se.citerus.dddsample.domain.model.location.SampleLocations.HANGZHOU;
 import static se.citerus.dddsample.domain.model.location.SampleLocations.HONGKONG;
 import static se.citerus.dddsample.domain.model.location.SampleLocations.NEWYORK;
 import static se.citerus.dddsample.domain.model.location.SampleLocations.TOKYO;
@@ -52,7 +52,7 @@ HONGKONG, CHICAGO, toDate("2009-03-01")
   @Test
   public void testIsSatisfiedBy_WrongOrigin() {
     RouteSpecification routeSpecification = new RouteSpecification(
-      HANGZOU, CHICAGO, toDate("2009-03-01")
+            HANGZHOU, CHICAGO, toDate("2009-03-01")
     );
 
     assertThat(routeSpecification.isSatisfiedBy(itinerary)).isFalse();

File: src/main/java/se/citerus/dddsample/config/DDDSampleApplicationContext.java
Patch:
@@ -5,6 +5,7 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Import;
 import org.springframework.context.annotation.ImportResource;
 import org.springframework.transaction.PlatformTransactionManager;
 import se.citerus.dddsample.application.ApplicationEvents;
@@ -22,12 +23,13 @@
 import se.citerus.dddsample.domain.model.voyage.VoyageRepository;
 import se.citerus.dddsample.domain.service.RoutingService;
 import se.citerus.dddsample.infrastructure.routing.ExternalRoutingService;
+import se.citerus.dddsample.interfaces.InterfacesApplicationContext;
 
 @Configuration
 @ImportResource({
-        "classpath:context-interfaces.xml",
         "classpath:context-infrastructure-messaging.xml",
         "classpath:context-infrastructure-persistence.xml"})
+@Import(InterfacesApplicationContext.class)
 public class DDDSampleApplicationContext {
 
     @Autowired

File: src/main/java/se/citerus/dddsample/interfaces/tracking/CargoTrackingViewAdapter.java
Patch:
@@ -49,7 +49,7 @@ public CargoTrackingViewAdapter(Cargo cargo, MessageSource messageSource, Locale
       this.cargo = cargo;
       this.timeZone = tz;
 
-      this.events = new ArrayList<HandlingEventViewAdapter>(handlingEvents.size());
+      this.events = new ArrayList<>(handlingEvents.size());
         for (HandlingEvent handlingEvent : handlingEvents) {
           events.add(new HandlingEventViewAdapter(handlingEvent));
         }

File: src/test/java/se/citerus/dddsample/acceptance/AdminAcceptanceTest.java
Patch:
@@ -15,7 +15,7 @@ public class AdminAcceptanceTest extends AbstractAcceptanceTest {
 
     @Test
     public void adminSiteCargoListContainsCannedCargo() {
-        AdminPage page = new AdminPage(driver);
+        AdminPage page = new AdminPage(driver, port);
         page.listAllCargo();
 
         assertTrue("Cargo list doesn't contain ABC123", page.listedCargoContains("ABC123"));
@@ -24,7 +24,7 @@ public void adminSiteCargoListContainsCannedCargo() {
 
     @Test
     public void adminSiteCanBookNewCargo() {
-        AdminPage adminPage = new AdminPage(driver);
+        AdminPage adminPage = new AdminPage(driver, port);
 
         CargoBookingPage cargoBookingPage = adminPage.bookNewCargo();
         cargoBookingPage.selectOrigin("NLRTM");
@@ -45,6 +45,5 @@ public void adminSiteCanBookNewCargo() {
         cargoDetailsPage = cargoDestinationPage.selectDestinationTo("AUMEL");
         cargoDetailsPage.expectDestinationOf("AUMEL");
         cargoDetailsPage.expectArrivalDeadlineOf(arrivalDeadline);
-
     }
 }

File: src/test/java/se/citerus/dddsample/acceptance/CustomerAcceptanceTest.java
Patch:
@@ -9,7 +9,7 @@ public class CustomerAcceptanceTest extends AbstractAcceptanceTest {
 
     @Before
     public void goToCustomerPage() {
-        customerPage = new CustomerPage(driver);
+        customerPage = new CustomerPage(driver, port);
     }
 
     @Test

File: src/test/java/se/citerus/dddsample/acceptance/pages/CustomerPage.java
Patch:
@@ -10,9 +10,9 @@
 public class CustomerPage {
     private final WebDriver driver;
 
-    public CustomerPage(WebDriver driver) {
+    public CustomerPage(WebDriver driver, int port) {
         this.driver = driver;
-        driver.get("http://localhost:8080/dddsample/track");
+        driver.get(String.format("http://localhost:%d/dddsample/track", port));
         assertEquals("Tracking cargo", driver.getTitle());
     }
 

File: src/main/java/se/citerus/dddsample/domain/model/location/SampleLocations.java
Patch:
@@ -22,7 +22,7 @@ public class SampleLocations {
   public static final Location SHANGHAI = new Location(new UnLocode("CNSHA"), "Shanghai");
   public static final Location ROTTERDAM = new Location(new UnLocode("NLRTM"), "Rotterdam");
   public static final Location GOTHENBURG = new Location(new UnLocode("SEGOT"), "Göteborg");
-  public static final Location HANGZOU = new Location(new UnLocode("CNHGH"), "Hangzhou");
+  public static final Location HANGZHOU = new Location(new UnLocode("CNHGH"), "Hangzhou");
   public static final Location NEWYORK = new Location(new UnLocode("USNYC"), "New York");
   public static final Location DALLAS = new Location(new UnLocode("USDAL"), "Dallas");
 

File: src/main/java/se/citerus/dddsample/domain/model/voyage/SampleVoyages.java
Patch:
@@ -19,7 +19,7 @@ public class SampleVoyages {
     public static final Voyage CM003 = createVoyage("CM003", HONGKONG, NEWYORK);
     public static final Voyage CM004 = createVoyage("CM004", NEWYORK, CHICAGO);
     public static final Voyage CM005 = createVoyage("CM005", CHICAGO, HAMBURG);
-    public static final Voyage CM006 = createVoyage("CM006", HAMBURG, HANGZOU);
+    public static final Voyage CM006 = createVoyage("CM006", HAMBURG, HANGZHOU);
 
     private static Voyage createVoyage(String id, Location from, Location to) {
         return new Voyage(new VoyageNumber(id), new Schedule(Collections.singletonList(
@@ -57,7 +57,7 @@ private static Voyage createVoyage(String id, Location from, Location to) {
      */
     public static final Voyage HONGKONG_TO_NEW_YORK =
             new Voyage.Builder(new VoyageNumber("0100S"), HONGKONG).
-                    addMovement(HANGZOU, toDate("2008-10-01", "12:00"), toDate("2008-10-03", "14:30")).
+                    addMovement(HANGZHOU, toDate("2008-10-01", "12:00"), toDate("2008-10-03", "14:30")).
                     addMovement(TOKYO, toDate("2008-10-03", "21:00"), toDate("2008-10-06", "06:15")).
                     addMovement(MELBOURNE, toDate("2008-10-06", "11:00"), toDate("2008-10-12", "11:30")).
                     addMovement(NEWYORK, toDate("2008-10-14", "12:00"), toDate("2008-10-23", "23:10")).

File: src/test/java/se/citerus/dddsample/domain/model/cargo/ItineraryTest.java
Patch:
@@ -3,7 +3,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.fail;
 import static se.citerus.dddsample.domain.model.location.SampleLocations.GOTHENBURG;
-import static se.citerus.dddsample.domain.model.location.SampleLocations.HANGZOU;
+import static se.citerus.dddsample.domain.model.location.SampleLocations.HANGZHOU;
 import static se.citerus.dddsample.domain.model.location.SampleLocations.HELSINKI;
 import static se.citerus.dddsample.domain.model.location.SampleLocations.NEWYORK;
 import static se.citerus.dddsample.domain.model.location.SampleLocations.ROTTERDAM;
@@ -82,7 +82,7 @@ public void testCargoOnTrack() {
     assertThat(itinerary.isExpected(event)).isTrue();
 
     //Received at the wrong location
-    event = new HandlingEvent(cargo, new Date(), new Date(), HandlingEvent.Type.RECEIVE, HANGZOU);
+    event = new HandlingEvent(cargo, new Date(), new Date(), HandlingEvent.Type.RECEIVE, HANGZHOU);
     assertThat(itinerary.isExpected(event)).isFalse();
 
     //Loaded to onto the wrong ship, correct location

File: src/test/java/se/citerus/dddsample/domain/model/cargo/RouteSpecificationTest.java
Patch:
@@ -4,7 +4,7 @@
 import static se.citerus.dddsample.application.util.DateTestUtil.toDate;
 import static se.citerus.dddsample.domain.model.location.SampleLocations.CHICAGO;
 import static se.citerus.dddsample.domain.model.location.SampleLocations.DALLAS;
-import static se.citerus.dddsample.domain.model.location.SampleLocations.HANGZOU;
+import static se.citerus.dddsample.domain.model.location.SampleLocations.HANGZHOU;
 import static se.citerus.dddsample.domain.model.location.SampleLocations.HONGKONG;
 import static se.citerus.dddsample.domain.model.location.SampleLocations.NEWYORK;
 import static se.citerus.dddsample.domain.model.location.SampleLocations.TOKYO;
@@ -52,7 +52,7 @@ HONGKONG, CHICAGO, toDate("2009-03-01")
   @Test
   public void testIsSatisfiedBy_WrongOrigin() {
     RouteSpecification routeSpecification = new RouteSpecification(
-      HANGZOU, CHICAGO, toDate("2009-03-01")
+            HANGZHOU, CHICAGO, toDate("2009-03-01")
     );
 
     assertThat(routeSpecification.isSatisfiedBy(itinerary)).isFalse();

File: src/main/java/se/citerus/dddsample/application/impl/HandlingEventServiceImpl.java
Patch:
@@ -39,7 +39,7 @@ public void registerHandlingEvent(final Date completionTime,
                                     final HandlingEvent.Type type) throws CannotCreateHandlingEventException {
     final Date registrationTime = new Date();
     /* Using a factory to create a HandlingEvent (aggregate). This is where
-       it is determined wether the incoming data, the attempt, actually is capable
+       it is determined whether the incoming data, the attempt, actually is capable
        of representing a real handling event. */
     final HandlingEvent event = handlingEventFactory.createHandlingEvent(
       registrationTime, completionTime, trackingId, voyageNumber, unLocode, type

File: src/main/java/se/citerus/dddsample/domain/model/cargo/Cargo.java
Patch:
@@ -31,13 +31,13 @@
  * of the cargo is contained in the Delivery value object, which is replaced whenever a cargo
  * is handled by an asynchronous event triggered by the registration of the handling event.
  *
- * The delivery can also be affected by routing changes, i.e. when a the route specification
+ * The delivery can also be affected by routing changes, i.e. when the route specification
  * changes, or the cargo is assigned to a new route. In that case, the delivery update is performed
  * synchronously within the cargo aggregate.
  *
  * The life cycle of a cargo ends when the cargo is claimed by the customer.
  *
- * The cargo aggregate, and the entre domain model, is built to solve the problem
+ * The cargo aggregate, and the entire domain model, is built to solve the problem
  * of booking and tracking cargo. All important business rules for determining whether
  * or not a cargo is misdirected, what the current status of the cargo is (on board carrier,
  * in port etc), are captured in this aggregate.

File: src/main/java/se/citerus/dddsample/domain/model/cargo/RouteSpecification.java
Patch:
@@ -10,7 +10,7 @@
 import java.util.Date;
 
 /**
- * Route specification. Describes where a cargo orign and destination is,
+ * Route specification. Describes where a cargo origin and destination is,
  * and the arrival deadline.
  * 
  */

File: src/main/java/se/citerus/dddsample/domain/model/handling/HandlingEvent.java
Patch:
@@ -14,10 +14,10 @@
 
 /**
  * A HandlingEvent is used to register the event when, for instance,
- * a cargo is unloaded from a carrier at a some loacation at a given time.
+ * a cargo is unloaded from a carrier at some location at a given time.
  * <p/>
  * The HandlingEvent's are sent from different Incident Logging Applications
- * some time after the event occured and contain information about the
+ * some time after the event occurred and contain information about the
  * {@link se.citerus.dddsample.domain.model.cargo.TrackingId}, {@link se.citerus.dddsample.domain.model.location.Location}, timestamp of the completion of the event,
  * and possibly, if applicable a {@link se.citerus.dddsample.domain.model.voyage.Voyage}.
  * <p/>

File: src/main/java/se/citerus/dddsample/domain/shared/experimental/ValueObjectSupport.java
Patch:
@@ -9,7 +9,7 @@
  *
  * @param <T>
  */
-public abstract class ValueObjectSupport<T extends ValueObject> implements ValueObject<T> {
+public abstract class ValueObjectSupport<T extends ValueObject<T>> implements ValueObject<T> {
 
   private transient int cachedHashCode = 0;
 

File: src/main/java/se/citerus/dddsample/infrastructure/routing/ExternalRoutingService.java
Patch:
@@ -43,7 +43,7 @@ public List<Itinerary> fetchRoutesForSpecification(RouteSpecification routeSpeci
     limitations.setProperty("DEADLINE", routeSpecification.arrivalDeadline().toString());
 
     final List<TransitPath> transitPaths;
-      transitPaths = graphTraversalService.findShortestPath(
+    transitPaths = graphTraversalService.findShortestPath(
       origin.unLocode().idString(),
       destination.unLocode().idString(),
       limitations

File: src/main/java/se/citerus/dddsample/interfaces/handling/ws/HandlingReportServiceImpl.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * This web service endpoint implementation performs basic validation and parsing
  * of incoming data, and in case of a valid registration attempt, sends an asynchronous message
- * with the informtion to the handling event registration system for proper registration.
+ * with the information to the handling event registration system for proper registration.
  *  
  */
 @WebService(endpointInterface = "com.aggregator.HandlingReportService")

File: src/main/java/se/citerus/dddsample/domain/shared/Entity.java
Patch:
@@ -10,7 +10,7 @@ public interface Entity<T> {
    * Entities compare by identity, not by attributes.
    *
    * @param other The other entity.
-   * @return true if the identities are the same, regardles of other attributes.
+   * @return true if the identities are the same, regardless of other attributes.
    */
   boolean sameIdentityAs(T other);
 

File: src/test/java/se/citerus/dddsample/infrastructure/persistence/hibernate/CargoRepositoryTest.java
Patch:
@@ -177,7 +177,7 @@ public void testSave() {
     public void testReplaceItinerary() {
         Cargo cargo = cargoRepository.find(new TrackingId("FGH"));
         Long cargoId = getLongId(cargo);
-        assertEquals(3, jdbcTemplate.queryForInt("select count(*) from Leg where cargo_id = ?", cargoId));
+        assertEquals(3, jdbcTemplate.queryForObject("select count(*) from Leg where cargo_id = ?", new Object[]{cargoId}, Integer.class).intValue());
 
         Location legFrom = locationRepository.find(new UnLocode("FIHEL"));
         Location legTo = locationRepository.find(new UnLocode("DEHAM"));
@@ -188,7 +188,7 @@ public void testReplaceItinerary() {
         cargoRepository.store(cargo);
         flush();
 
-        assertEquals(1, jdbcTemplate.queryForInt("select count(*) from Leg where cargo_id = ?", cargoId));
+        assertEquals(1, jdbcTemplate.queryForObject("select count(*) from Leg where cargo_id = ?", new Object[]{cargoId}, Integer.class).intValue());
     }
 
     @Test

File: dddsample/external/reporting/src/test/java/com/reporting/ReportServiceTest.java
Patch:
@@ -103,7 +103,8 @@ public void voyageReport() throws Exception {
     assertEquals("In transit", voyage.get("currentStatus"));
     assertEquals(0, voyage.get("delayedByMinutes"));
     assertEquals("6/6/09 2:01 PM", voyage.get("lastUpdatedOn"));
-    assertFalse(voyageReport.has("onboardCargos"));
+    assertTrue(voyageReport.has("onboardCargos"));
+    // TODO verify onboard cargos content 
   }
 
   @Test(expected = FileNotFoundException.class)

File: dddsample/tracking/bookingui/src/test/java/se/citerus/dddsample/tracking/bookingui/CargoAdminControllerTest.java
Patch:
@@ -15,9 +15,8 @@ public class CargoAdminControllerTest extends TestCase {
   MockHttpServletResponse response;
 
   public CargoAdminControllerTest() {
-    controller = new CargoAdminController();
     bookingServiceFacade = EasyMock.createMock(BookingServiceFacade.class);
-    controller.setBookingServiceFacade(bookingServiceFacade);
+    controller = new CargoAdminController(bookingServiceFacade);
   }
 
   public void testAssignItinerary() throws Exception {

File: dddsample/tracking/core/src/main/java/se/citerus/dddsample/tracking/core/domain/model/handling/HandlingHistory.java
Patch:
@@ -11,6 +11,8 @@
 
 /**
  * The handling history of a cargo.
+ *
+ * TODO eliminate from 1.2
  */
 public class HandlingHistory implements ValueObject<HandlingHistory> {
 

File: dddsample/tracking/core/src/test/java/se/citerus/dddsample/tracking/core/infrastructure/persistence/hibernate/AbstractRepositoryTest.java
Patch:
@@ -47,8 +47,7 @@ protected String[] getConfigLocations() {
   @Override
   protected void onSetUpInTransaction() throws Exception {
     // TODO store Sample* and object instances here instead of handwritten SQL
-    //SampleDataGenerator.loadSampleData(jdbcTemplate, new TransactionTemplate(transactionManager));
-    SampleDataGenerator.loadHibernateData(new TransactionTemplate(transactionManager), sessionFactory, handlingEventFactory, handlingEventRepository);
+    SampleDataGenerator.loadSampleData(jdbcTemplate, new TransactionTemplate(transactionManager));
     sjt = new SimpleJdbcTemplate(jdbcTemplate);
   }
 

File: dddsample/tracking/core/src/main/java/se/citerus/dddsample/tracking/core/application/handling/HandlingEventService.java
Patch:
@@ -2,9 +2,9 @@
 
 import se.citerus.dddsample.tracking.core.domain.model.cargo.TrackingId;
 import se.citerus.dddsample.tracking.core.domain.model.handling.CannotCreateHandlingEventException;
-import se.citerus.dddsample.tracking.core.domain.model.handling.HandlingEvent;
 import se.citerus.dddsample.tracking.core.domain.model.handling.OperatorCode;
 import se.citerus.dddsample.tracking.core.domain.model.location.UnLocode;
+import se.citerus.dddsample.tracking.core.domain.model.shared.HandlingActivityType;
 import se.citerus.dddsample.tracking.core.domain.model.voyage.VoyageNumber;
 
 import java.util.Date;
@@ -32,7 +32,7 @@ void registerHandlingEvent(Date completionTime,
                              TrackingId trackingId,
                              VoyageNumber voyageNumber,
                              UnLocode unLocode,
-                             HandlingEvent.Type type,
+                             HandlingActivityType type,
                              OperatorCode operatorCode) throws CannotCreateHandlingEventException;
 
 }

File: dddsample/tracking/core/src/main/java/se/citerus/dddsample/tracking/core/application/handling/HandlingEventServiceImpl.java
Patch:
@@ -9,6 +9,7 @@
 import se.citerus.dddsample.tracking.core.domain.model.cargo.TrackingId;
 import se.citerus.dddsample.tracking.core.domain.model.handling.*;
 import se.citerus.dddsample.tracking.core.domain.model.location.UnLocode;
+import se.citerus.dddsample.tracking.core.domain.model.shared.HandlingActivityType;
 import se.citerus.dddsample.tracking.core.domain.model.voyage.VoyageNumber;
 
 import java.util.Date;
@@ -34,7 +35,7 @@ public HandlingEventServiceImpl(final HandlingEventRepository handlingEventRepos
   @Transactional
   public void registerHandlingEvent(final Date completionTime, final TrackingId trackingId,
                                     final VoyageNumber voyageNumber, final UnLocode unLocode,
-                                    final HandlingEvent.Type type, final OperatorCode operatorCode) throws CannotCreateHandlingEventException {
+                                    final HandlingActivityType type, final OperatorCode operatorCode) throws CannotCreateHandlingEventException {
 
     /* Using a factory to create a HandlingEvent (aggregate). This is where
        it is determined wether the incoming data, the attempt, actually is capable

File: dddsample/tracking/core/src/main/java/se/citerus/dddsample/tracking/core/domain/model/cargo/Delivery.java
Patch:
@@ -10,7 +10,7 @@
 
 import static se.citerus.dddsample.tracking.core.domain.model.cargo.RoutingStatus.*;
 import static se.citerus.dddsample.tracking.core.domain.model.cargo.TransportStatus.ONBOARD_CARRIER;
-import static se.citerus.dddsample.tracking.core.domain.model.handling.HandlingEvent.Type.UNLOAD;
+import static se.citerus.dddsample.tracking.core.domain.model.shared.HandlingActivityType.UNLOAD;
 
 /**
  * Everything about the delivery of the cargo, i.e. where the cargo is

File: dddsample/tracking/core/src/main/java/se/citerus/dddsample/tracking/core/domain/model/cargo/Itinerary.java
Patch:
@@ -9,9 +9,9 @@
 
 import java.util.*;
 
-import static se.citerus.dddsample.tracking.core.domain.model.handling.HandlingEvent.Type.*;
 import static se.citerus.dddsample.tracking.core.domain.model.shared.HandlingActivity.claimIn;
 import static se.citerus.dddsample.tracking.core.domain.model.shared.HandlingActivity.receiveIn;
+import static se.citerus.dddsample.tracking.core.domain.model.shared.HandlingActivityType.*;
 
 /**
  * An itinerary.

File: dddsample/tracking/core/src/main/java/se/citerus/dddsample/tracking/core/domain/model/cargo/Leg.java
Patch:
@@ -12,10 +12,10 @@
 import java.util.List;
 
 import static java.util.Collections.unmodifiableList;
-import static se.citerus.dddsample.tracking.core.domain.model.handling.HandlingEvent.Type.LOAD;
-import static se.citerus.dddsample.tracking.core.domain.model.handling.HandlingEvent.Type.UNLOAD;
 import static se.citerus.dddsample.tracking.core.domain.model.shared.HandlingActivity.loadOnto;
 import static se.citerus.dddsample.tracking.core.domain.model.shared.HandlingActivity.unloadOff;
+import static se.citerus.dddsample.tracking.core.domain.model.shared.HandlingActivityType.LOAD;
+import static se.citerus.dddsample.tracking.core.domain.model.shared.HandlingActivityType.UNLOAD;
 
 /**
  * An itinerary consists of one or more legs.

File: dddsample/tracking/core/src/main/java/se/citerus/dddsample/tracking/core/domain/model/handling/HandlingEventFactory.java
Patch:
@@ -6,6 +6,7 @@
 import se.citerus.dddsample.tracking.core.domain.model.location.Location;
 import se.citerus.dddsample.tracking.core.domain.model.location.LocationRepository;
 import se.citerus.dddsample.tracking.core.domain.model.location.UnLocode;
+import se.citerus.dddsample.tracking.core.domain.model.shared.HandlingActivityType;
 import se.citerus.dddsample.tracking.core.domain.model.voyage.Voyage;
 import se.citerus.dddsample.tracking.core.domain.model.voyage.VoyageNumber;
 import se.citerus.dddsample.tracking.core.domain.model.voyage.VoyageRepository;
@@ -43,7 +44,7 @@ public HandlingEventFactory(final CargoRepository cargoRepository,
    */
   public HandlingEvent createHandlingEvent(final Date completionTime, final TrackingId trackingId,
                                            final VoyageNumber voyageNumber, final UnLocode unlocode,
-                                           final HandlingEvent.Type type, final OperatorCode operatorCode)
+                                           final HandlingActivityType type, final OperatorCode operatorCode)
     throws CannotCreateHandlingEventException {
 
     final Cargo cargo = findCargo(trackingId);

File: dddsample/tracking/core/src/test/java/se/citerus/dddsample/tracking/core/domain/model/cargo/CargoTest.java
Patch:
@@ -13,9 +13,9 @@
 import static se.citerus.dddsample.tracking.core.application.util.DateTestUtil.toDate;
 import static se.citerus.dddsample.tracking.core.domain.model.cargo.RoutingStatus.*;
 import static se.citerus.dddsample.tracking.core.domain.model.cargo.TransportStatus.*;
-import static se.citerus.dddsample.tracking.core.domain.model.handling.HandlingEvent.Type.*;
 import static se.citerus.dddsample.tracking.core.domain.model.location.SampleLocations.*;
 import static se.citerus.dddsample.tracking.core.domain.model.shared.HandlingActivity.*;
+import static se.citerus.dddsample.tracking.core.domain.model.shared.HandlingActivityType.*;
 import static se.citerus.dddsample.tracking.core.domain.model.voyage.SampleVoyages.*;
 
 public class CargoTest extends TestCase {

File: dddsample/tracking/core/src/test/java/se/citerus/dddsample/tracking/core/domain/model/cargo/DeliveryTest.java
Patch:
@@ -13,10 +13,10 @@
 import static se.citerus.dddsample.tracking.core.domain.model.cargo.RoutingStatus.MISROUTED;
 import static se.citerus.dddsample.tracking.core.domain.model.cargo.RoutingStatus.ROUTED;
 import static se.citerus.dddsample.tracking.core.domain.model.cargo.TransportStatus.*;
-import static se.citerus.dddsample.tracking.core.domain.model.handling.HandlingEvent.Type.*;
 import static se.citerus.dddsample.tracking.core.domain.model.location.SampleLocations.*;
 import static se.citerus.dddsample.tracking.core.domain.model.shared.HandlingActivity.customsIn;
 import static se.citerus.dddsample.tracking.core.domain.model.shared.HandlingActivity.loadOnto;
+import static se.citerus.dddsample.tracking.core.domain.model.shared.HandlingActivityType.*;
 import static se.citerus.dddsample.tracking.core.domain.model.voyage.SampleVoyages.*;
 
 public class DeliveryTest extends TestCase {

File: dddsample/tracking/core/src/test/java/se/citerus/dddsample/tracking/core/domain/model/cargo/ItineraryTest.java
Patch:
@@ -13,9 +13,9 @@
 import static org.hamcrest.core.Is.is;
 import static org.hamcrest.core.IsEqual.equalTo;
 import static org.junit.Assert.assertThat;
-import static se.citerus.dddsample.tracking.core.domain.model.handling.HandlingEvent.Type.*;
 import static se.citerus.dddsample.tracking.core.domain.model.location.SampleLocations.*;
 import static se.citerus.dddsample.tracking.core.domain.model.shared.HandlingActivity.*;
+import static se.citerus.dddsample.tracking.core.domain.model.shared.HandlingActivityType.*;
 
 public class ItineraryTest extends TestCase {
 

File: dddsample/tracking/core/src/test/java/se/citerus/dddsample/tracking/core/infrastructure/reporting/ReportsUpdaterTest.java
Patch:
@@ -10,6 +10,7 @@
 import se.citerus.dddsample.tracking.core.domain.model.cargo.RouteSpecification;
 import se.citerus.dddsample.tracking.core.domain.model.cargo.TrackingId;
 import se.citerus.dddsample.tracking.core.domain.model.handling.*;
+import se.citerus.dddsample.tracking.core.domain.model.shared.HandlingActivityType;
 import se.citerus.dddsample.tracking.core.infrastructure.persistence.inmemory.CargoRepositoryInMem;
 import se.citerus.dddsample.tracking.core.infrastructure.persistence.inmemory.HandlingEventRepositoryInMem;
 import se.citerus.dddsample.tracking.core.infrastructure.persistence.inmemory.LocationRepositoryInMem;
@@ -41,7 +42,7 @@ public void setUp() {
     cargoRepository.store(cargo);
 
     HandlingEvent handlingEvent = handlingEventFactory.createHandlingEvent(
-      toDate("2009-10-02"), trackingId, null, HONGKONG.unLocode(), HandlingEvent.Type.RECEIVE, new OperatorCode("ABCDE")
+      toDate("2009-10-02"), trackingId, null, HONGKONG.unLocode(), HandlingActivityType.RECEIVE, new OperatorCode("ABCDE")
     );
     handlingEventRepository.store(handlingEvent);
 

File: dddsample/tracking/core/src/main/java/se/citerus/dddsample/tracking/core/domain/model/cargo/Itinerary.java
Patch:
@@ -259,6 +259,7 @@ Itinerary truncatedAfter(final Location location) {
 
   Itinerary withLeg(final Leg leg) {
     final List<Leg> newLegs = new ArrayList<Leg>(legs.size() + 1);
+    newLegs.addAll(legs);
     newLegs.add(leg);
 
     return new Itinerary(newLegs);

File: dddsample/tracking/core/src/main/java/se/citerus/dddsample/tracking/core/application/event/CargoUpdater.java
Patch:
@@ -37,7 +37,7 @@ public void updateCargo(final EventSequenceNumber sequenceNumber) {
       return;
     }
 
-    final HandlingActivity activity = handlingEvent.activity();
+    final HandlingActivity activity = handlingEvent.activity().copy();
     final Cargo cargo = handlingEvent.cargo();
 
     cargo.handled(activity);

File: dddsample/tracking/core/src/test/java/se/citerus/dddsample/tracking/core/application/event/CargoUpdaterTest.java
Patch:
@@ -3,6 +3,8 @@
 import static org.hamcrest.core.IsEqual.equalTo;
 import static org.hamcrest.core.IsNot.not;
 import static org.junit.Assert.assertThat;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 import org.junit.Before;
 import org.junit.Test;
 import static org.mockito.Mockito.*;
@@ -66,6 +68,7 @@ LOAD, new OperatorCode("ABCDE")
     cargoUpdater.updateCargo(handlingEvent.sequenceNumber());
     
     assertThat(handlingEvent.activity(), equalTo(cargo.mostRecentHandlingActivity()));
+    assertTrue(handlingEvent.activity() != cargo.mostRecentHandlingActivity());
     verify(systemEvents).notifyOfCargoUpdate(cargo);
   }
 

File: dddsample/tracking/core/src/main/java/se/citerus/dddsample/tracking/core/domain/model/voyage/Voyage.java
Patch:
@@ -3,7 +3,6 @@
 import org.apache.commons.lang.Validate;
 import se.citerus.dddsample.tracking.core.domain.model.location.Location;
 import se.citerus.dddsample.tracking.core.domain.patterns.entity.EntitySupport;
-import sun.jvm.hotspot.runtime.PerfMemory;
 
 import java.util.ArrayList;
 import java.util.Date;

File: dddsample/tracking/core/src/main/java/se/citerus/dddsample/tracking/core/domain/model/cargo/Itinerary.java
Patch:
@@ -169,7 +169,7 @@ Date unloadTimeAt(final Location location) {
    */
   HandlingActivity activitySucceding(final HandlingActivity previousActivity) {
     if (previousActivity == null) {
-      return receivedIn(firstLeg().loadLocation());
+      return receiveIn(firstLeg().loadLocation());
     } else {
       return deriveFromMatchingLeg(previousActivity, legMatchOf(previousActivity).leg());
     }
@@ -253,7 +253,7 @@ private HandlingActivity deriveFromMatchingLeg(final HandlingActivity handlingAc
       return null;
     } else {
       if (handlingActivity.type() == LOAD) {
-        return unloadedOff(handlingActivity.voyage()).in(matchingLeg.unloadLocation());
+        return unloadOff(handlingActivity.voyage()).in(matchingLeg.unloadLocation());
       } else if (handlingActivity.type() == UNLOAD) {
         return deriveFromNextLeg(nextLeg(matchingLeg));
       } else {
@@ -265,7 +265,7 @@ private HandlingActivity deriveFromMatchingLeg(final HandlingActivity handlingAc
 
   private HandlingActivity deriveFromNextLeg(final Leg nextLeg) {
     if (nextLeg == null) {
-      return claimedIn(lastLeg().unloadLocation());
+      return claimIn(lastLeg().unloadLocation());
     } else {
       return nextLeg.deriveLoadActivity();
     }

File: dddsample/tracking/core/src/main/java/se/citerus/dddsample/tracking/core/domain/model/cargo/TransportStatus.java
Patch:
@@ -24,6 +24,7 @@ public static TransportStatus derivedFrom(HandlingActivity handlingActivity) {
         return ONBOARD_CARRIER;
       case UNLOAD:
       case RECEIVE:
+      case CUSTOMS:
         return IN_PORT;
       case CLAIM:
         return CLAIMED;

File: dddsample/tracking/core/src/main/java/se/citerus/dddsample/tracking/core/domain/model/location/Location.java
Patch:
@@ -14,7 +14,7 @@
 public final class Location extends EntitySupport<Location, UnLocode> {
 
   private final UnLocode unLocode;
-  private String name;
+  private final String name;
   private TimeZone timeZone;
   private CustomsZone customsZone;
 
@@ -87,6 +87,7 @@ public String toString() {
   Location() {
     // Needed by Hibernate
     unLocode = null;
+    name = null;
   }
 
 }

File: dddsample/external/reporting/src/main/java/com/reporting2/pdf/PDFMessageBodyWriter.java
Patch:
@@ -17,6 +17,8 @@ public abstract class PDFMessageBodyWriter<T> implements MessageBodyWriter<T> {
 
   public long getSize(T t, Class<?> type, Type genericType, Annotation[] annotations, MediaType mt) {
     ByteArrayOutputStream baos = new ByteArrayOutputStream();
+    // TODO creates document twice, not optimal, but this class must be stateless.
+    // Could probably be worked around using a ThreadLocal, but it's beyond the scope of the sample app.
     writeDocumentToStream(t, baos);
     return baos.toByteArray().length;
   }

File: dddsample/tracking/core/src/main/java/se/citerus/dddsample/tracking/core/application/event/SystemEvents.java
Patch:
@@ -2,7 +2,6 @@
 
 import se.citerus.dddsample.tracking.core.domain.model.cargo.Cargo;
 import se.citerus.dddsample.tracking.core.domain.model.handling.HandlingEvent;
-import se.citerus.dddsample.tracking.core.domain.model.voyage.Voyage;
 
 /**
  * This interface provides a way to let other parts

File: dddsample/tracking/core/src/main/java/se/citerus/dddsample/tracking/core/domain/model/handling/HandlingEvent.java
Patch:
@@ -7,7 +7,6 @@
 import se.citerus.dddsample.tracking.core.domain.model.location.Location;
 import se.citerus.dddsample.tracking.core.domain.model.shared.HandlingActivity;
 import se.citerus.dddsample.tracking.core.domain.model.voyage.Voyage;
-import se.citerus.dddsample.tracking.core.domain.patterns.DomainObjectUtils;
 import se.citerus.dddsample.tracking.core.domain.patterns.domainevent.DomainEvent;
 import se.citerus.dddsample.tracking.core.domain.patterns.valueobject.ValueObject;
 
@@ -159,7 +158,7 @@ public Type type() {
   }
 
   public Voyage voyage() {
-    return DomainObjectUtils.nullSafe(activity.voyage(), Voyage.NONE);
+    return activity.voyage() != null ? activity.voyage() : Voyage.NONE;
   }
 
   public Date completionTime() {

File: dddsample/tracking/core/src/main/java/se/citerus/dddsample/tracking/core/domain/model/voyage/Voyage.java
Patch:
@@ -17,9 +17,7 @@ public class Voyage extends EntitySupport<Voyage,VoyageNumber> {
   private Schedule schedule;
 
   // Null object pattern
-  public static final Voyage NONE = new Voyage(
-    new VoyageNumber(""), Schedule.EMPTY
-  );
+  public static final Voyage NONE = new Voyage(new VoyageNumber(""), Schedule.EMPTY);
 
   public Voyage(final VoyageNumber voyageNumber, final Schedule schedule) {
     Validate.notNull(voyageNumber, "Voyage number is required");

File: dddsample/src/main/java/se/citerus/dddsample/domain/model/cargo/Leg.java
Patch:
@@ -25,6 +25,8 @@ public Leg(Voyage voyage, Location loadLocation, Location unloadLocation, Date l
     Validate.notNull(voyage, "Voyage is required");
     Validate.notNull(loadLocation, "Load location is required");
     Validate.notNull(unloadLocation, "Unload location is required");
+    Validate.notNull(loadTime, "Load time is required");
+    Validate.notNull(unloadTime, "Unload time is required");
     Validate.isTrue(!loadLocation.sameIdentityAs(unloadLocation));
     // TODO use a minimum time between unloading and loading?
     Validate.isTrue(unloadTime.after(loadTime));
@@ -118,7 +120,7 @@ public int hashCode() {
   @Override
   public String toString() {
     return "Load in " + loadLocation + " at " + loadTime +
-      ", unload in " + unloadLocation + " at " + unloadTime;
+      " --- Unload in " + unloadLocation + " at " + unloadTime;
   }
 
   Leg() {

File: dddsample/src/test/java/se/citerus/dddsample/domain/model/cargo/LegTest.java
Patch:
@@ -11,7 +11,7 @@ public class LegTest {
 
   final Voyage voyage = NEW_YORK_TO_DALLAS;
 
-  @Test(expected = IllegalArgumentException.class)
+  @Test(expected = NullPointerException.class)
   public void testConstructor() throws Exception {
     Leg.deriveLeg(null, null, null);
   }

File: dddsample/src/main/java/se/citerus/dddsample/infrastructure/messaging/jms/JmsApplicationEventsImpl.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.springframework.jms.core.JmsOperations;
 import org.springframework.jms.core.MessageCreator;
-import se.citerus.dddsample.application.ApplicationEvents;
+import se.citerus.dddsample.application.event.ApplicationEvents;
 import se.citerus.dddsample.domain.model.cargo.Cargo;
 import se.citerus.dddsample.domain.model.handling.HandlingEvent;
 

File: dddsample/src/test/java/se/citerus/dddsample/interfaces/tracking/CargoTrackingViewAdapterTest.java
Patch:
@@ -42,21 +42,21 @@ public void testCreate() {
     CargoTrackingViewAdapter.HandlingEventViewAdapter event = it.next();
     assertEquals("RECEIVE", event.getType());
     assertEquals("Hangzhou", event.getLocation());
-    assertEquals("1970-01-01 01:00", event.getTime());
+    assertEquals("1970-01-01 08:00 CST", event.getTime());
     assertEquals("", event.getVoyageNumber());
     assertTrue(event.isExpected());
 
     event = it.next();
     assertEquals("LOAD", event.getType());
     assertEquals("Hangzhou", event.getLocation());
-    assertEquals("1970-01-01 01:00", event.getTime());
+    assertEquals("1970-01-01 08:00 CST", event.getTime());
     assertEquals("CM001", event.getVoyageNumber());
     assertTrue(event.isExpected());
 
     event = it.next();
     assertEquals("UNLOAD", event.getType());
     assertEquals("Helsinki", event.getLocation());
-    assertEquals("1970-01-01 01:00", event.getTime());
+    assertEquals("1970-01-01 01:00 CET", event.getTime());
     assertEquals("CM001", event.getVoyageNumber());
     assertTrue(event.isExpected());
   }

File: dddsample/src/main/java/se/citerus/dddsample/application/impl/CargoInspectionServiceImpl.java
Patch:
@@ -38,7 +38,7 @@ public void inspectCargo(final TrackingId trackingId) {
       return;
     }
 
-    final HandlingHistory handlingHistory = handlingEventRepository.lookupHandlingHistoryOfCargo(trackingId);
+    final HandlingHistory handlingHistory = handlingEventRepository.lookupHandlingHistoryOfCargo(cargo);
 
     cargo.deriveDeliveryProgress(handlingHistory);
 

File: dddsample/src/main/java/se/citerus/dddsample/application/util/SampleDataGenerator.java
Patch:
@@ -202,7 +202,6 @@ private <T> T getBean(WebApplicationContext context, Class<T> cls) {
   }
 
   public static void loadHibernateData(TransactionTemplate tt, final SessionFactory sf, final HandlingEventFactory handlingEventFactory, final HandlingEventRepository handlingEventRepository) {
-    System.out.println("*** Loading Hibernate data ***");
     tt.execute(new TransactionCallbackWithoutResult() {
       @Override
       protected void doInTransactionWithoutResult(TransactionStatus status) {
@@ -250,7 +249,7 @@ protected void doInTransactionWithoutResult(TransactionStatus status) {
           throw new RuntimeException(e);
         }
 
-        HandlingHistory handlingHistory = handlingEventRepository.lookupHandlingHistoryOfCargo(trackingId);
+        HandlingHistory handlingHistory = handlingEventRepository.lookupHandlingHistoryOfCargo(abc123);
         abc123.deriveDeliveryProgress(handlingHistory);
 
         session.update(abc123);
@@ -295,7 +294,7 @@ protected void doInTransactionWithoutResult(TransactionStatus status) {
           throw new RuntimeException(e);
         }
 
-        HandlingHistory handlingHistory1 = handlingEventRepository.lookupHandlingHistoryOfCargo(trackingId1);
+        HandlingHistory handlingHistory1 = handlingEventRepository.lookupHandlingHistoryOfCargo(jkl567);
         jkl567.deriveDeliveryProgress(handlingHistory1);
 
         session.update(jkl567);

File: dddsample/src/main/java/se/citerus/dddsample/domain/model/handling/HandlingEventRepository.java
Patch:
@@ -1,6 +1,6 @@
 package se.citerus.dddsample.domain.model.handling;
 
-import se.citerus.dddsample.domain.model.cargo.TrackingId;
+import se.citerus.dddsample.domain.model.cargo.Cargo;
 
 /**
  * Handling event repository.
@@ -16,9 +16,9 @@ public interface HandlingEventRepository {
 
 
   /**
-   * @param trackingId cargo tracking id
+   * @param cargo cargo
    * @return The handling history of this cargo
    */
-  HandlingHistory lookupHandlingHistoryOfCargo(TrackingId trackingId);
+  HandlingHistory lookupHandlingHistoryOfCargo(Cargo cargo);
 
 }

File: dddsample/src/main/java/se/citerus/dddsample/interfaces/tracking/CargoTrackingController.java
Patch:
@@ -56,7 +56,7 @@ protected ModelAndView onSubmit(final HttpServletRequest request, final HttpServ
     if (cargo != null) {
       final MessageSource messageSource = getApplicationContext();
       final Locale locale = RequestContextUtils.getLocale(request);
-      final List<HandlingEvent> handlingEvents = handlingEventRepository.lookupHandlingHistoryOfCargo(trackingId).distinctEventsByCompletionTime();
+      final List<HandlingEvent> handlingEvents = handlingEventRepository.lookupHandlingHistoryOfCargo(cargo).distinctEventsByCompletionTime();
       model.put("cargo", new CargoTrackingViewAdapter(cargo, messageSource, locale, handlingEvents));
     } else {
       errors.rejectValue("trackingId", "cargo.unknown_id", new Object[]{trackCommand.getTrackingId()}, "Unknown tracking id");

File: dddsample/src/test/java/se/citerus/dddsample/infrastructure/persistence/hibernate/CargoRepositoryTest.java
Patch:
@@ -46,7 +46,7 @@ public void testFindByCargoId() {
 
     assertNotNull(cargo.delivery());
 
-    final List<HandlingEvent> events = handlingEventRepository.lookupHandlingHistoryOfCargo(trackingId).distinctEventsByCompletionTime();
+    final List<HandlingEvent> events = handlingEventRepository.lookupHandlingHistoryOfCargo(cargo).distinctEventsByCompletionTime();
     assertEquals(2, events.size());
 
     HandlingEvent firstEvent = events.get(0);

File: dddsample/src/test/java/se/citerus/dddsample/infrastructure/persistence/hibernate/HandlingEventRepositoryTest.java
Patch:
@@ -52,8 +52,8 @@ public void testSave() {
   }
 
   public void testFindEventsForCargo() throws Exception {
-    TrackingId trackingId = new TrackingId("XYZ");
-    List<HandlingEvent> handlingEvents = handlingEventRepository.lookupHandlingHistoryOfCargo(trackingId).distinctEventsByCompletionTime();
+    Cargo cargo = cargoRepository.find(new TrackingId("XYZ"));
+    List<HandlingEvent> handlingEvents = handlingEventRepository.lookupHandlingHistoryOfCargo(cargo).distinctEventsByCompletionTime();
     assertEquals(12, handlingEvents.size());
   }
 

File: dddsample/src/test/java/se/citerus/dddsample/infrastructure/routing/ExternalRoutingServiceTest.java
Patch:
@@ -5,6 +5,7 @@
 import com.pathfinder.internal.GraphTraversalServiceImpl;
 import junit.framework.TestCase;
 import static org.easymock.EasyMock.*;
+import static se.citerus.dddsample.application.util.DateTestUtil.toDate;
 import se.citerus.dddsample.domain.model.cargo.*;
 import se.citerus.dddsample.domain.model.location.Location;
 import se.citerus.dddsample.domain.model.location.LocationRepository;
@@ -15,7 +16,6 @@
 import se.citerus.dddsample.infrastructure.persistence.inmemory.LocationRepositoryInMem;
 
 import java.util.Arrays;
-import java.util.Date;
 import java.util.List;
 
 public class ExternalRoutingServiceTest extends TestCase {
@@ -46,7 +46,7 @@ public void storeCarrierMovementId(String cmId, String from, String to) {
 
   public void testCalculatePossibleRoutes() {
     TrackingId trackingId = new TrackingId("ABC");
-    RouteSpecification routeSpecification = new RouteSpecification(HONGKONG, HELSINKI, new Date());
+    RouteSpecification routeSpecification = new RouteSpecification(HONGKONG, HELSINKI, toDate("2009-04-01"));
     Cargo cargo = new Cargo(trackingId, routeSpecification);
 
     expect(voyageRepository.find(isA(VoyageNumber.class))).andStubReturn(SampleVoyages.CM002);

File: dddsample/src/test/java/se/citerus/dddsample/interfaces/tracking/CargoTrackingViewAdapterTest.java
Patch:
@@ -24,7 +24,7 @@ public void testCreate() {
     events.add(new HandlingEvent(cargo, new Date(3), new Date(4), HandlingEvent.Type.LOAD, HANGZOU, CM001));
     events.add(new HandlingEvent(cargo, new Date(5), new Date(6), HandlingEvent.Type.UNLOAD, HELSINKI, CM001));
 
-    cargo.deriveDeliveryProgress(new HandlingHistory(events));
+    cargo.deriveDeliveryProgress(HandlingHistory.fromEvents(events));
 
     StaticApplicationContext applicationContext = new StaticApplicationContext();
     applicationContext.addMessage("cargo.status.IN_PORT", Locale.GERMAN, "In port {0}");

File: dddsample/src/main/java/se/citerus/dddsample/application/BookingService.java
Patch:
@@ -24,9 +24,9 @@ public interface BookingService {
 
   /**
    * Requests a list of itineraries describing possible routes for this cargo.
-   * 
+   *
    * @param trackingId cargo tracking id
-   * @return A list of possible itineraries for this cargo 
+   * @return A list of possible itineraries for this cargo
    */
   List<Itinerary> requestPossibleRoutesForCargo(TrackingId trackingId);
 

File: dddsample/src/main/java/se/citerus/dddsample/domain/model/cargo/CargoRepository.java
Patch:
@@ -31,6 +31,4 @@ public interface CargoRepository {
    */
   TrackingId nextTrackingId();
 
-  // TODO perhaps it belongs in a factory instead
-
 }

File: dddsample/src/main/java/se/citerus/dddsample/domain/model/cargo/Delivery.java
Patch:
@@ -3,14 +3,14 @@
 import org.apache.commons.lang.Validate;
 import org.apache.commons.lang.builder.EqualsBuilder;
 import org.apache.commons.lang.builder.HashCodeBuilder;
-import se.citerus.dddsample.domain.model.ValueObject;
 import static se.citerus.dddsample.domain.model.cargo.RoutingStatus.*;
 import static se.citerus.dddsample.domain.model.cargo.TransportStatus.*;
 import se.citerus.dddsample.domain.model.handling.HandlingEvent;
 import se.citerus.dddsample.domain.model.handling.HandlingHistory;
 import se.citerus.dddsample.domain.model.location.Location;
 import se.citerus.dddsample.domain.model.voyage.Voyage;
 import se.citerus.dddsample.domain.shared.DomainObjectUtils;
+import se.citerus.dddsample.domain.shared.ValueObject;
 
 import java.util.Date;
 import java.util.Iterator;

File: dddsample/src/main/java/se/citerus/dddsample/domain/model/cargo/HandlingActivity.java
Patch:
@@ -3,10 +3,10 @@
 import org.apache.commons.lang.Validate;
 import org.apache.commons.lang.builder.EqualsBuilder;
 import org.apache.commons.lang.builder.HashCodeBuilder;
-import se.citerus.dddsample.domain.model.ValueObject;
 import se.citerus.dddsample.domain.model.handling.HandlingEvent;
 import se.citerus.dddsample.domain.model.location.Location;
 import se.citerus.dddsample.domain.model.voyage.Voyage;
+import se.citerus.dddsample.domain.shared.ValueObject;
 
 /**
  * A handling activity represents how and where a cargo can be handled,

File: dddsample/src/main/java/se/citerus/dddsample/domain/model/cargo/Itinerary.java
Patch:
@@ -1,9 +1,9 @@
 package se.citerus.dddsample.domain.model.cargo;
 
 import org.apache.commons.lang.Validate;
-import se.citerus.dddsample.domain.model.ValueObject;
 import se.citerus.dddsample.domain.model.handling.HandlingEvent;
 import se.citerus.dddsample.domain.model.location.Location;
+import se.citerus.dddsample.domain.shared.ValueObject;
 
 import java.util.Collections;
 import java.util.Date;

File: dddsample/src/main/java/se/citerus/dddsample/domain/model/cargo/Leg.java
Patch:
@@ -3,9 +3,9 @@
 import org.apache.commons.lang.Validate;
 import org.apache.commons.lang.builder.EqualsBuilder;
 import org.apache.commons.lang.builder.HashCodeBuilder;
-import se.citerus.dddsample.domain.model.ValueObject;
 import se.citerus.dddsample.domain.model.location.Location;
 import se.citerus.dddsample.domain.model.voyage.Voyage;
+import se.citerus.dddsample.domain.shared.ValueObject;
 
 import java.util.Date;
 

File: dddsample/src/main/java/se/citerus/dddsample/domain/model/cargo/RouteSpecification.java
Patch:
@@ -3,9 +3,9 @@
 import org.apache.commons.lang.Validate;
 import org.apache.commons.lang.builder.EqualsBuilder;
 import org.apache.commons.lang.builder.HashCodeBuilder;
-import se.citerus.dddsample.domain.model.ValueObject;
 import se.citerus.dddsample.domain.model.location.Location;
 import se.citerus.dddsample.domain.shared.AbstractSpecification;
+import se.citerus.dddsample.domain.shared.ValueObject;
 
 import java.util.Date;
 

File: dddsample/src/main/java/se/citerus/dddsample/domain/model/cargo/RoutingStatus.java
Patch:
@@ -1,6 +1,6 @@
 package se.citerus.dddsample.domain.model.cargo;
 
-import se.citerus.dddsample.domain.model.ValueObject;
+import se.citerus.dddsample.domain.shared.ValueObject;
 
 /**
  * Routing status. 

File: dddsample/src/main/java/se/citerus/dddsample/domain/model/cargo/TrackingId.java
Patch:
@@ -1,7 +1,7 @@
 package se.citerus.dddsample.domain.model.cargo;
 
 import org.apache.commons.lang.Validate;
-import se.citerus.dddsample.domain.model.ValueObject;
+import se.citerus.dddsample.domain.shared.ValueObject;
 
 /**
  * Uniquely identifies a particular cargo. Automatically generated by the application.

File: dddsample/src/main/java/se/citerus/dddsample/domain/model/cargo/TransportStatus.java
Patch:
@@ -1,6 +1,6 @@
 package se.citerus.dddsample.domain.model.cargo;
 
-import se.citerus.dddsample.domain.model.ValueObject;
+import se.citerus.dddsample.domain.shared.ValueObject;
 
 /**
  * Represents the different transport statuses for a cargo.

File: dddsample/src/main/java/se/citerus/dddsample/domain/model/handling/HandlingEvent.java
Patch:
@@ -5,12 +5,12 @@
 import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.commons.lang.builder.ToStringBuilder;
 import org.apache.commons.lang.builder.ToStringStyle;
-import se.citerus.dddsample.domain.model.DomainEvent;
-import se.citerus.dddsample.domain.model.ValueObject;
 import se.citerus.dddsample.domain.model.cargo.Cargo;
 import se.citerus.dddsample.domain.model.location.Location;
 import se.citerus.dddsample.domain.model.voyage.Voyage;
+import se.citerus.dddsample.domain.shared.DomainEvent;
 import se.citerus.dddsample.domain.shared.DomainObjectUtils;
+import se.citerus.dddsample.domain.shared.ValueObject;
 
 import java.util.Date;
 

File: dddsample/src/main/java/se/citerus/dddsample/domain/model/handling/HandlingHistory.java
Patch:
@@ -1,7 +1,7 @@
 package se.citerus.dddsample.domain.model.handling;
 
 import org.apache.commons.lang.Validate;
-import se.citerus.dddsample.domain.model.ValueObject;
+import se.citerus.dddsample.domain.shared.ValueObject;
 
 import java.util.*;
 import static java.util.Collections.sort;

File: dddsample/src/main/java/se/citerus/dddsample/domain/model/location/Location.java
Patch:
@@ -1,7 +1,7 @@
 package se.citerus.dddsample.domain.model.location;
 
 import org.apache.commons.lang.Validate;
-import se.citerus.dddsample.domain.model.Entity;
+import se.citerus.dddsample.domain.shared.Entity;
 
 /**
  * A location is our model is stops on a journey, such as cargo

File: dddsample/src/main/java/se/citerus/dddsample/domain/model/location/UnLocode.java
Patch:
@@ -1,7 +1,7 @@
 package se.citerus.dddsample.domain.model.location;
 
 import org.apache.commons.lang.Validate;
-import se.citerus.dddsample.domain.model.ValueObject;
+import se.citerus.dddsample.domain.shared.ValueObject;
 
 import java.util.regex.Pattern;
 

File: dddsample/src/main/java/se/citerus/dddsample/domain/model/voyage/CarrierMovement.java
Patch:
@@ -3,8 +3,8 @@
 import org.apache.commons.lang.Validate;
 import org.apache.commons.lang.builder.EqualsBuilder;
 import org.apache.commons.lang.builder.HashCodeBuilder;
-import se.citerus.dddsample.domain.model.ValueObject;
 import se.citerus.dddsample.domain.model.location.Location;
+import se.citerus.dddsample.domain.shared.ValueObject;
 
 import java.util.Date;
 

File: dddsample/src/main/java/se/citerus/dddsample/domain/model/voyage/Schedule.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.apache.commons.lang.Validate;
 import org.apache.commons.lang.builder.HashCodeBuilder;
-import se.citerus.dddsample.domain.model.ValueObject;
+import se.citerus.dddsample.domain.shared.ValueObject;
 
 import java.util.Collections;
 import java.util.List;

File: dddsample/src/main/java/se/citerus/dddsample/domain/model/voyage/Voyage.java
Patch:
@@ -1,8 +1,8 @@
 package se.citerus.dddsample.domain.model.voyage;
 
 import org.apache.commons.lang.Validate;
-import se.citerus.dddsample.domain.model.Entity;
 import se.citerus.dddsample.domain.model.location.Location;
+import se.citerus.dddsample.domain.shared.Entity;
 
 import java.util.ArrayList;
 import java.util.Date;

File: dddsample/src/main/java/se/citerus/dddsample/domain/model/voyage/VoyageNumber.java
Patch:
@@ -1,7 +1,7 @@
 package se.citerus.dddsample.domain.model.voyage;
 
 import org.apache.commons.lang.Validate;
-import se.citerus.dddsample.domain.model.ValueObject;
+import se.citerus.dddsample.domain.shared.ValueObject;
 
 /**
  * Identifies a voyage.

File: dddsample/src/main/java/se/citerus/dddsample/domain/shared/DomainEvent.java
Patch:
@@ -1,4 +1,4 @@
-package se.citerus.dddsample.domain.model;
+package se.citerus.dddsample.domain.shared;
 
 /**
  * A domain event is something that is unique, but does not have a lifecycle.

File: dddsample/src/main/java/se/citerus/dddsample/domain/shared/Entity.java
Patch:
@@ -1,4 +1,4 @@
-package se.citerus.dddsample.domain.model;
+package se.citerus.dddsample.domain.shared;
 
 /**
  * An entity, as explained in the DDD book.

File: dddsample/src/main/java/se/citerus/dddsample/domain/shared/ValueObject.java
Patch:
@@ -1,4 +1,4 @@
-package se.citerus.dddsample.domain.model;
+package se.citerus.dddsample.domain.shared;
 
 import java.io.Serializable;
 

File: dddsample/src/main/java/se/citerus/dddsample/application/impl/CargoInspectionServiceImpl.java
Patch:
@@ -40,9 +40,9 @@ public void inspectCargo(final TrackingId trackingId) {
       return;
     }
 
-    final List<HandlingEvent> deliveryHistory = handlingEventRepository.findEventsForCargo(trackingId);
+    final List<HandlingEvent> handlingEvents = handlingEventRepository.findEventsForCargo(trackingId);
 
-    cargo.deriveStatusFromHandling(deliveryHistory);
+    cargo.deriveDeliveryProgress(handlingEvents);
 
     if (cargo.isMisdirected()) {
       applicationEvents.cargoWasMisdirected(cargo);

File: dddsample/src/main/java/se/citerus/dddsample/application/impl/HandlingEventServiceImpl.java
Patch:
@@ -3,6 +3,7 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.springframework.transaction.annotation.Transactional;
+import static org.springframework.transaction.interceptor.TransactionAspectSupport.currentTransactionStatus;
 import se.citerus.dddsample.application.ApplicationEvents;
 import se.citerus.dddsample.application.HandlingEventService;
 import se.citerus.dddsample.domain.model.cargo.TrackingId;
@@ -58,7 +59,8 @@ state of the handling event aggregate (but not the cargo aggregate -
     } catch (CannotCreateHandlingEventException e) {
       /* This may be a bogus attempt, for example containing a tracking id
          that doesn't match any cargo that we're tracking. */
-      logger.error(e, e);
+      logger.error(e);
+      currentTransactionStatus().setRollbackOnly();
     }
   }
 

File: dddsample/src/main/java/se/citerus/dddsample/application/util/SampleDataGenerator.java
Patch:
@@ -255,7 +255,7 @@ protected void doInTransactionWithoutResult(TransactionStatus status) {
         }
 
         List<HandlingEvent> handlingEvents = handlingEventRepository.findEventsForCargo(trackingId);
-        abc123.deriveStatusFromHandling(handlingEvents);
+        abc123.deriveDeliveryProgress(handlingEvents);
 
         session.update(abc123);
 
@@ -300,7 +300,7 @@ protected void doInTransactionWithoutResult(TransactionStatus status) {
         }
 
         List<HandlingEvent> handlingEvents1 = handlingEventRepository.findEventsForCargo(trackingId1);
-        jkl567.deriveStatusFromHandling(handlingEvents1);
+        jkl567.deriveDeliveryProgress(handlingEvents1);
 
         session.update(jkl567);
       }

File: dddsample/src/main/java/se/citerus/dddsample/domain/model/cargo/Itinerary.java
Patch:
@@ -117,7 +117,7 @@ Date finalArrivalDate() {
     if (lastLeg == null) {
       return new Date(END_OF_DAYS.getTime());
     } else {
-      return lastLeg.unloadTime();
+      return new Date(lastLeg.unloadTime().getTime());
     }
   }
 

File: dddsample/src/main/java/se/citerus/dddsample/domain/model/cargo/RouteSpecification.java
Patch:
@@ -33,7 +33,7 @@ public RouteSpecification(final Location origin, final Location destination, fin
 
     this.origin = origin;
     this.destination = destination;
-    this.arrivalDeadline = arrivalDeadline;
+    this.arrivalDeadline = (Date) arrivalDeadline.clone();
   }
 
   /**
@@ -54,7 +54,7 @@ public Location destination() {
    * @return Arrival deadline.
    */
   public Date arrivalDeadline() {
-    return arrivalDeadline;
+    return new Date(arrivalDeadline.getTime());
   }
 
   @Override

File: dddsample/src/main/java/se/citerus/dddsample/domain/model/handling/CannotCreateHandlingEventException.java
Patch:
@@ -2,7 +2,7 @@
 
 /**
  * If a {@link se.citerus.dddsample.domain.model.handling.HandlingEvent} can't be
- * created from an incoming {@link #se.citerus.dddsample.application.HandlingEventRegistrationAttempt},
+ * created from a given set of parameters.
  *
  * It is a checked exception because it's not a programming error, but rather a
  * special case that the application is built to handle. It can occur during normal

File: dddsample/src/test/java/se/citerus/dddsample/infrastructure/persistence/inmemory/CargoRepositoryInMem.java
Patch:
@@ -89,7 +89,7 @@ public static Cargo createCargoWithDeliveryHistory(TrackingId trackingId,
 
     final RouteSpecification routeSpecification = new RouteSpecification(origin, destination, new Date());
     final Cargo cargo = new Cargo(trackingId, origin, routeSpecification);
-    cargo.deriveStatusFromHandling(new ArrayList<HandlingEvent>(events));
+    cargo.deriveDeliveryProgress(new ArrayList<HandlingEvent>(events));
 
     return cargo;
   }

File: dddsample/src/test/java/se/citerus/dddsample/interfaces/tracking/CargoTrackingViewAdapterTest.java
Patch:
@@ -23,7 +23,7 @@ public void testCreate() {
     events.add(new HandlingEvent(cargo, new Date(3), new Date(4), HandlingEvent.Type.LOAD, HANGZOU, CM001));
     events.add(new HandlingEvent(cargo, new Date(5), new Date(6), HandlingEvent.Type.UNLOAD, HELSINKI, CM001));
 
-    cargo.deriveStatusFromHandling(events);
+    cargo.deriveDeliveryProgress(events);
 
     StaticApplicationContext applicationContext = new StaticApplicationContext();
     applicationContext.addMessage("cargo.status.IN_PORT", Locale.GERMAN, "In port {0}");

File: dddsample/src/test/java/se/citerus/dddsample/interfaces/booking/web/ItinerarySelectionCommandTest.java
Patch:
@@ -15,11 +15,11 @@ public void testBind() {
     command = new RouteAssignmentCommand();
     request = new MockHttpServletRequest();
 
-    request.addParameter("legs[0].carrierMovementId", "CM01");
+    request.addParameter("legs[0].voyageNumber", "CM01");
     request.addParameter("legs[0].fromUnLocode", "AAAAA");
     request.addParameter("legs[0].toUnLocode", "BBBBB");
 
-    request.addParameter("legs[1].carrierMovementId", "CM02");
+    request.addParameter("legs[1].voyageNumber", "CM02");
     request.addParameter("legs[1].fromUnLocode", "CCCCC");
     request.addParameter("legs[1].toUnLocode", "DDDDD");
 

File: dddsample/src/main/java/se/citerus/dddsample/application/impl/TrackingServiceImpl.java
Patch:
@@ -43,6 +43,8 @@ public void inspectCargo(final TrackingId trackingId) {
     final List<HandlingEvent> deliveryHistory = handlingEventRepository.findEventsForCargo(trackingId);
     cargo.updateStatus(deliveryHistory);
 
+    cargoRepository.store(cargo);
+
     if (cargo.isMisdirected()) {
       applicationEvents.cargoWasMisdirected(cargo);
     }

File: dddsample/src/main/java/se/citerus/dddsample/infrastructure/persistence/hibernate/CargoRepositoryHibernate.java
Patch:
@@ -22,7 +22,7 @@ public Cargo find(TrackingId tid) {
   }
 
   public void store(Cargo cargo) {
-    getSession().persist(cargo);
+    getSession().saveOrUpdate(cargo);
     getSession().createSQLQuery("delete from Leg where cargo_id = null").executeUpdate();
   }
 

File: dddsample/src/main/java/se/citerus/dddsample/infrastructure/routing/ExternalRoutingService.java
Patch:
@@ -75,7 +75,7 @@ public List<Itinerary> fetchRoutesForSpecification(RouteSpecification routeSpeci
   }
 
   private Itinerary toItinerary(TransitPath transitPath) {
-    List<Leg> legs = new ArrayList(transitPath.getTransitEdges().size());
+    List<Leg> legs = new ArrayList<Leg>(transitPath.getTransitEdges().size());
     for (TransitEdge edge : transitPath.getTransitEdges()) {
       legs.add(toLeg(edge));
     }

File: dddsample/src/main/java/se/citerus/dddsample/interfaces/handling/ws/HandlingReportService.java
Patch:
@@ -1,6 +1,5 @@
 package se.citerus.dddsample.interfaces.handling.ws;
 
-import javax.jws.WebMethod;
 import javax.jws.WebParam;
 import javax.jws.WebService;
 
@@ -21,7 +20,6 @@ public interface HandlingReportService {
    * @param handlingReport handling report
    * @throws HandlingReportErrors if there are formatting errors in the handling report
    */
-  @WebMethod
   void submitReport(@WebParam HandlingReport handlingReport) throws HandlingReportErrors;
 
 }

File: dddsample/src/main/java/se/citerus/dddsample/interfaces/handling/ws/impl/HandlingReportServiceImpl.java
Patch:
@@ -34,7 +34,7 @@ public class HandlingReportServiceImpl implements HandlingReportService {
   public void submitReport(HandlingReport handlingReport) throws HandlingReportErrors {
     final List<String> errors = new ArrayList<String>();
 
-    final Date completionTime = handlingReport.getCompletionTime().toGregorianCalendar().getTime();
+    final Date completionTime = parseCompletionTime(handlingReport, errors);
     final VoyageNumber voyageNumber = parseVoyageNumber(handlingReport.getVoyageNumber(), errors);
     final HandlingEvent.Type type = parseEventType(handlingReport.getType(), errors);
     final UnLocode unLocode = parseUnLocode(handlingReport.getUnLocode(), errors);

File: dddsample/src/test/java/se/citerus/dddsample/interfaces/booking/web/ItinerarySelectionCommandTest.java
Patch:
@@ -32,12 +32,12 @@ public void testBind() {
     assertEquals(2, legs.size());
 
     RouteAssignmentCommand.LegCommand leg = legs.get(0);
-    assertEquals("CM01", leg.getCarrierMovementId());
+    assertEquals("CM01", leg.getVoyageNumber());
     assertEquals("AAAAA", leg.getFromUnLocode());
     assertEquals("BBBBB", leg.getToUnLocode());
 
     leg = legs.get(1);
-    assertEquals("CM02", leg.getCarrierMovementId());
+    assertEquals("CM02", leg.getVoyageNumber());
     assertEquals("CCCCC", leg.getFromUnLocode());
     assertEquals("DDDDD", leg.getToUnLocode());
 

File: dddsample/src/main/java/com/partner/pathfinder/internal/GraphTraversalServiceImpl.java
Patch:
@@ -33,18 +33,18 @@ public List<TransitPath> findShortestPath(final String originUnLocode,
 
       transitEdges.add(new TransitEdge(
         dao.getVoyageNumber(originUnLocode, firstLegTo),
-        originUnLocode, firstLegTo));
+        originUnLocode, firstLegTo, new Date(), new Date()));
 
       for (int j = 0; j < allVertices.size() - 1; j++) {
         final String curr = allVertices.get(j);
         final String next = allVertices.get(j + 1);
-        transitEdges.add(new TransitEdge(dao.getVoyageNumber(curr, next), curr, next));
+        transitEdges.add(new TransitEdge(dao.getVoyageNumber(curr, next), curr, next, new Date(), new Date()));
       }
 
       final String lastLegFrom = allVertices.get(allVertices.size() - 1);
       transitEdges.add(new TransitEdge(
         dao.getVoyageNumber(lastLegFrom, destinationUnLocode),
-        lastLegFrom, destinationUnLocode));
+        lastLegFrom, destinationUnLocode, new Date(), new Date()));
 
       candidates.add(new TransitPath(transitEdges));
     }

File: dddsample/src/test/java/se/citerus/dddsample/application/RoutingServiceTest.java
Patch:
@@ -47,7 +47,7 @@ public void storeCarrierMovementId(String cmId, String from, String to) {
   public void testCalculatePossibleRoutes() {
     TrackingId trackingId = new TrackingId("ABC");
     RouteSpecification routeSpecification = new RouteSpecification(HONGKONG, HELSINKI, new Date());
-    Cargo cargo = new Cargo(trackingId, routeSpecification);
+    Cargo cargo = new Cargo(trackingId, HONGKONG, routeSpecification);
 
     expect(voyageRepository.find(isA(VoyageNumber.class))).andStubReturn(SampleVoyages.CM002);
     
@@ -66,7 +66,7 @@ public void testCalculatePossibleRoutes() {
 
       // Cargo final destination and last leg stop should match
       Location lastLegStop = legs.get(legs.size() - 1).unloadLocation();
-      assertEquals(cargo.destination(), lastLegStop);
+      assertEquals(cargo.routeSpecification().destination(), lastLegStop);
 
       for (int i = 0; i < legs.size() - 1; i++) {
         // Assert that all legs are conencted

File: dddsample/src/test/java/se/citerus/dddsample/infrastructure/persistence/inmemory/CargoRepositoryInMem.java
Patch:
@@ -40,7 +40,7 @@ public Cargo find(final TrackingId trackingId) {
   }
 
   public void save(final Cargo cargo) {
-    //No need to save anything with InMem
+    cargoDb.put(cargo.trackingId().idString(), cargo);
   }
 
   public TrackingId nextTrackingId() {

File: dddsample/src/test/java/se/citerus/dddsample/infrastructure/persistence/inmemory/HandlingEventRepositoryInMem.java
Patch:
@@ -73,7 +73,7 @@ public void init() throws ParseException {
 
   private void registerEvent(Cargo cargo, String date, HandlingEvent.Type type, CarrierMovement carrierMovement) throws ParseException {
     /*
-    HandlingEvent event = new HandlingEvent(cargo, getDate(date), new Date(), type, null, carrierMovement);
+    HandlingEvent event = new HandlingEvent(cargo, getCompletionTime(date), new Date(), type, null, carrierMovement);
     String id = cargo.trackingId() + "_" + type + "_" + date;
 
     logger.debug("Adding event " + id + "(" + event + ")");

File: dddsample/src/test/java/se/citerus/dddsample/infrastructure/routing/ExternalRoutingServiceTest.java
Patch:
@@ -46,7 +46,7 @@ public void storeCarrierMovementId(String cmId, String from, String to) {
   public void testCalculatePossibleRoutes() {
     TrackingId trackingId = new TrackingId("ABC");
     RouteSpecification routeSpecification = new RouteSpecification(HONGKONG, HELSINKI, new Date());
-    Cargo cargo = new Cargo(trackingId, routeSpecification);
+    Cargo cargo = new Cargo(trackingId, HONGKONG, routeSpecification);
 
     expect(voyageRepository.find(isA(VoyageNumber.class))).andStubReturn(SampleVoyages.CM002);
     
@@ -65,7 +65,7 @@ public void testCalculatePossibleRoutes() {
 
       // Cargo final destination and last leg stop should match
       Location lastLegStop = legs.get(legs.size() - 1).unloadLocation();
-      assertEquals(cargo.destination(), lastLegStop);
+      assertEquals(cargo.routeSpecification().destination(), lastLegStop);
 
       for (int i = 0; i < legs.size() - 1; i++) {
         // Assert that all legs are connected

File: dddsample/src/test/java/se/citerus/dddsample/interfaces/booking/facade/dto/assembler/ItineraryCandidateDTOAssemblerTest.java
Patch:
@@ -1,4 +1,4 @@
-package se.citerus.dddsample.application.service.dto.assembler;
+package se.citerus.dddsample.interfaces.booking.facade.dto.assembler;
 
 import junit.framework.TestCase;
 import static org.easymock.EasyMock.*;
@@ -13,7 +13,6 @@
 import se.citerus.dddsample.infrastructure.persistence.inmemory.VoyageRepositoryInMem;
 import se.citerus.dddsample.interfaces.booking.facade.dto.ItineraryCandidateDTO;
 import se.citerus.dddsample.interfaces.booking.facade.dto.LegDTO;
-import se.citerus.dddsample.interfaces.booking.facade.dto.assembler.ItineraryCandidateDTOAssembler;
 
 import java.util.ArrayList;
 import java.util.Arrays;

File: dddsample/src/test/java/se/citerus/dddsample/interfaces/booking/facade/dto/assembler/LocationDTOAssemblerTest.java
Patch:
@@ -1,11 +1,10 @@
-package se.citerus.dddsample.application.service.dto.assembler;
+package se.citerus.dddsample.interfaces.booking.facade.dto.assembler;
 
 import junit.framework.TestCase;
 import se.citerus.dddsample.domain.model.location.Location;
 import static se.citerus.dddsample.domain.model.location.SampleLocations.HAMBURG;
 import static se.citerus.dddsample.domain.model.location.SampleLocations.STOCKHOLM;
 import se.citerus.dddsample.interfaces.booking.facade.dto.LocationDTO;
-import se.citerus.dddsample.interfaces.booking.facade.dto.assembler.LocationDTOAssembler;
 
 import java.util.Arrays;
 import java.util.List;

File: dddsample/src/test/java/se/citerus/dddsample/interfaces/tracking/CargoTrackingViewAdapterTest.java
Patch:
@@ -4,6 +4,7 @@
 import org.springframework.context.support.StaticApplicationContext;
 import se.citerus.dddsample.domain.model.cargo.Cargo;
 import se.citerus.dddsample.domain.model.cargo.CargoTestHelper;
+import se.citerus.dddsample.domain.model.cargo.RouteSpecification;
 import se.citerus.dddsample.domain.model.cargo.TrackingId;
 import static se.citerus.dddsample.domain.model.carrier.SampleVoyages.CM001;
 import se.citerus.dddsample.domain.model.handling.HandlingEvent;
@@ -15,7 +16,7 @@
 public class CargoTrackingViewAdapterTest extends TestCase {
 
   public void testCreate() {
-    Cargo cargo = new Cargo(new TrackingId("XYZ"), HANGZOU, HELSINKI);
+    Cargo cargo = new Cargo(new TrackingId("XYZ"), HANGZOU, new RouteSpecification(HANGZOU, HELSINKI, new Date()));
 
     List<HandlingEvent> events = new ArrayList<HandlingEvent>();
     events.add(new HandlingEvent(cargo, new Date(1), new Date(2), HandlingEvent.Type.RECEIVE, HANGZOU));

File: dddsample/src/main/java/se/citerus/dddsample/interfaces/handling/HandlingEventServiceEndpointImpl.java
Patch:
@@ -24,7 +24,7 @@
  * with the informtion to the handling event registration system for proper registration.
  *  
  */
-@WebService(endpointInterface = "se.citerus.dddsample.iface.handling.HandlingEventServiceEndpoint")
+@WebService(endpointInterface = "se.citerus.dddsample.interfaces.handling.HandlingEventServiceEndpoint")
 public class HandlingEventServiceEndpointImpl implements HandlingEventServiceEndpoint {
 
   private SystemEvents systemEvents;

File: dddsample/src/main/java/se/citerus/dddsample/application/remoting/BookingServiceFacadeImpl.java
Patch:
@@ -109,7 +109,7 @@ public void setCargoRepository(CargoRepository cargoRepository) {
     this.cargoRepository = cargoRepository;
   }
 
-  public void setCarrierMovementRepository(VoyageRepository voyageRepository) {
+  public void setVoyageRepository(VoyageRepository voyageRepository) {
     this.voyageRepository = voyageRepository;
   }
 }

File: dddsample/src/main/java/se/citerus/dddsample/application/routing/ExternalRoutingService.java
Patch:
@@ -78,7 +78,7 @@ public void setLocationRepository(LocationRepository locationRepository) {
     this.locationRepository = locationRepository;
   }
 
-  public void setCarrierMovementRepository(VoyageRepository voyageRepository) {
+  public void setVoyageRepository(VoyageRepository voyageRepository) {
     this.voyageRepository = voyageRepository;
   }
 }

File: dddsample/src/main/java/se/citerus/dddsample/application/ws/HandlingEventServiceEndpoint.java
Patch:
@@ -17,7 +17,7 @@ public interface HandlingEventServiceEndpoint {
    * @param unlocode          United Nations Location Code for the location where the event occured
    * @param eventType         type of event
    */
-  void register(String completionTime, String trackingId, String carrierMovementId, String unlocode, String eventType);
+  void register(String completionTime, String trackingId, String carrierMovementId, String unlocode, String eventType) throws RegistrationFailure;
 
   // TODO structured class that holds these fields, and/or a batching method that accepts a list of those
   // TODO contract-first instead of code-first (?)

File: dddsample/src/main/java/se/citerus/dddsample/domain/model/ValueObject.java
Patch:
@@ -1,10 +1,12 @@
 package se.citerus.dddsample.domain.model;
 
+import java.io.Serializable;
+
 /**
  * A value object, as described in the DDD book.
  * 
  */
-public interface ValueObject<T> {
+public interface ValueObject<T> extends Serializable {
 
   /**
    * Value objects compare by the values of their attributes, they don't have an identity.

File: dddsample/src/main/java/se/citerus/routingteam/internal/GraphDAO.java
Patch:
@@ -29,6 +29,7 @@ public void processRow(ResultSet resultSet) throws SQLException {
     return result;
   }
 
+  // TODO adapt to Voyage
   public void storeCarrierMovementId(String cmId, String from, String to) {
     final String locationSql = "select id from location where unlocode = ?";
 

File: dddsample/src/test/java/se/citerus/dddsample/CargoHandlingScenarioTest.java
Patch:
@@ -142,8 +142,10 @@ public List<Itinerary> fetchRoutesForSpecification(RouteSpecification routeSpeci
     // Synchronous stub
     domainEventNotifier = new DomainEventNotifier() {
       public void cargoWasHandled(HandlingEvent event) {
-        trackingService.inspectCargo(event.cargo().trackingId());
+        trackingService.onCargoHandled(event.cargo().trackingId());
       }
+      public void cargoWasMisdirected(Cargo cargo) {}
+      public void cargoHasArrived(Cargo cargo) {}
     };
 
     // Stub

File: dddsample/src/test/java/se/citerus/dddsample/application/routing/ExternalRoutingServiceTest.java
Patch:
@@ -27,7 +27,7 @@ public class ExternalRoutingServiceTest extends TestCase {
   @Override
   public void setUp() {
     routingService = new ExternalRoutingService();
-    routingService.setCarrierMovementRepository(new VoyageRepositoryInMem());
+    routingService.setVoyageRepository(new VoyageRepositoryInMem());
     routingService.setLocationRepository(new LocationRepositoryInMem());
 
     graphTraversalService = createMock(GraphTraversalService.class);

File: dddsample/src/test/java/se/citerus/dddsample/domain/service/RoutingServiceTest.java
Patch:
@@ -31,7 +31,7 @@ protected void setUp() throws Exception {
     routingService.setLocationRepository(locationRepository);
 
     voyageRepository = createMock(VoyageRepository.class);
-    routingService.setCarrierMovementRepository(voyageRepository);
+    routingService.setVoyageRepository(voyageRepository);
 
     GraphTraversalService graphTraversalService = new GraphTraversalServiceImpl(new GraphDAO(createMock(DataSource.class)) {
       public List<String> listLocations() {

File: dddsample/src/main/java/se/citerus/dddsample/domain/model/cargo/Leg.java
Patch:
@@ -12,7 +12,7 @@
 /**
  * An itinerary consists of one or more legs.
  */
-public final class Leg implements ValueObject<Leg> {
+public class Leg implements ValueObject<Leg> {
 
   private Voyage voyage;
   private Location loadLocation;

File: dddsample/src/main/java/se/citerus/dddsample/domain/model/carrier/Voyage.java
Patch:
@@ -42,7 +42,8 @@ public int hashCode() {
   @Override
   public boolean equals(Object o) {
     if (this == o) return true;
-    if (o == null || getClass() != o.getClass()) return false;
+    if (o == null) return false;
+    if (!(o instanceof Voyage)) return false;
 
     final Voyage that = (Voyage) o;
 
@@ -51,7 +52,7 @@ public boolean equals(Object o) {
 
   @Override
   public boolean sameIdentityAs(Voyage other) {
-    return other != null && this.voyageNumber.sameValueAs(other.voyageNumber);
+    return other != null && this.voyageNumber().sameValueAs(other.voyageNumber());
   }
 
   Voyage() {

File: dddsample/src/main/java/se/citerus/dddsample/domain/service/impl/BookingServiceImpl.java
Patch:
@@ -46,7 +46,7 @@ public List<Itinerary> requestPossibleRoutesForCargo(TrackingId trackingId) {
     Validate.notNull(trackingId);
     
     final Cargo cargo = cargoRepository.find(trackingId);
-    final RouteSpecification routeSpecification = RouteSpecification.forCargo(cargo, new Date());
+    final RouteSpecification routeSpecification = new RouteSpecification(cargo.origin(), cargo.destination(), new Date());
 
     return routingService.fetchRoutesForSpecification(routeSpecification);
   }

File: dddsample/src/test/java/se/citerus/dddsample/application/persistence/CarrierMovementRepositoryTest.java
Patch:
@@ -8,14 +8,14 @@ public class CarrierMovementRepositoryTest extends AbstractRepositoryTest {
 
   VoyageRepository voyageRepository;
 
-  public void setCarrierMovementRepository(VoyageRepository voyageRepository) {
+  public void setVoyageRepository(VoyageRepository voyageRepository) {
     this.voyageRepository = voyageRepository;
   }
 
   public void testFind() throws Exception {
-    Voyage voyage = voyageRepository.find(new VoyageNumber("0012"));
+    Voyage voyage = voyageRepository.find(new VoyageNumber("0101"));
     assertNotNull(voyage);
-    assertEquals("0012", voyage.voyageNumber().idString());
+    assertEquals("0101", voyage.voyageNumber().idString());
     /* TODO adapt
     assertEquals(STOCKHOLM, carrierMovement.departureLocation());
     assertEquals(HELSINKI, carrierMovement.arrivalLocation());

File: dddsample/src/test/java/se/citerus/dddsample/application/persistence/VoyageRepositoryInMem.java
Patch:
@@ -1,13 +1,14 @@
 package se.citerus.dddsample.application.persistence;
 
+import se.citerus.dddsample.domain.model.carrier.SampleVoyages;
 import se.citerus.dddsample.domain.model.carrier.Voyage;
 import se.citerus.dddsample.domain.model.carrier.VoyageNumber;
 import se.citerus.dddsample.domain.model.carrier.VoyageRepository;
 
 public final class VoyageRepositoryInMem implements VoyageRepository {
 
   public Voyage find(VoyageNumber voyageNumber) {
-    throw new UnsupportedOperationException("Implement this!");
+    return SampleVoyages.lookup(voyageNumber);
   }
   
 }

File: dddsample/src/test/java/se/citerus/dddsample/application/routing/ExternalRoutingServiceTest.java
Patch:
@@ -49,7 +49,7 @@ public void testFetchRoutesForSpecification() {
 
     final Date arrivalDeadline = DateTestUtil.toDate("2008-12-01");
     final Cargo cargo = new Cargo(new TrackingId("C123"), STOCKHOLM, HONGKONG);
-    final RouteSpecification spec = RouteSpecification.forCargo(cargo, arrivalDeadline);
+    final RouteSpecification spec = new RouteSpecification(cargo.origin(), cargo.destination(), arrivalDeadline);
 
     final List<Itinerary> itineraries = routingService.fetchRoutesForSpecification(spec);
     

File: dddsample/src/test/java/se/citerus/dddsample/domain/model/cargo/RouteSpecificationTest.java
Patch:
@@ -15,7 +15,7 @@ public void setUp() {
   }
 
   public void testIsSatisfiedBySuccess() {
-    RouteSpecification spec = RouteSpecification.forCargo(cargo, new Date());
+    RouteSpecification spec = new RouteSpecification(cargo.origin(), cargo.destination(), new Date());
     Itinerary itinerary = new Itinerary();
     assertTrue(spec.isSatisfiedBy(itinerary));
   }

File: dddsample/src/test/java/se/citerus/dddsample/domain/service/RoutingServiceTest.java
Patch:
@@ -47,7 +47,7 @@ public void storeCarrierMovementId(String cmId, String from, String to) {
   public void testCalculatePossibleRoutes() {
     TrackingId trackingId = new TrackingId("ABC");
     Cargo cargo = new Cargo(trackingId, HONGKONG, HELSINKI);
-    RouteSpecification routeSpecification = RouteSpecification.forCargo(cargo, new Date());
+    RouteSpecification routeSpecification = new RouteSpecification(cargo.origin(), cargo.destination(), new Date());
 
     expect(voyageRepository.find(isA(VoyageNumber.class))).andStubReturn(SampleVoyages.CM002);
     

File: dddsample/src/test/java/se/citerus/dddsample/domain/service/TrackingScenarioTest.java
Patch:
@@ -25,7 +25,7 @@ public void testTrackingScenarioStage1() throws Exception {
 
     Cargo cargo = populateCargo();
 
-    Delivery delivery = cargo.deliveryHistory();
+    Delivery delivery = cargo.delivery();
 
     List<HandlingEvent> handlingEvents = delivery.history();
 

File: dddsample/src/test/java/se/citerus/dddsample/domain/service/TrackingServiceTest.java
Patch:
@@ -52,7 +52,7 @@ public void testTrackingScenario() {
 
     assertEquals(cargo, trackedCargo);
 
-    List<HandlingEvent> events = trackedCargo.deliveryHistory().history();
+    List<HandlingEvent> events = trackedCargo.delivery().history();
     assertEquals(3, events.size());
 
     // Claim happened first

File: dddsample/src/test/java/se/citerus/dddsample/ui/CargoTrackingViewAdapterTest.java
Patch:
@@ -6,7 +6,6 @@
 import se.citerus.dddsample.domain.model.cargo.CargoTestHelper;
 import se.citerus.dddsample.domain.model.cargo.TrackingId;
 import static se.citerus.dddsample.domain.model.carrier.SampleVoyages.CM001;
-import static se.citerus.dddsample.domain.model.carrier.SampleVoyages.CM002;
 import se.citerus.dddsample.domain.model.handling.HandlingEvent;
 import static se.citerus.dddsample.domain.model.location.SampleLocations.HANGZOU;
 import static se.citerus.dddsample.domain.model.location.SampleLocations.HELSINKI;
@@ -22,7 +21,7 @@ public void testCreate() {
     events.add(new HandlingEvent(cargo, new Date(1), new Date(2), HandlingEvent.Type.RECEIVE, HANGZOU));
 
     events.add(new HandlingEvent(cargo, new Date(3), new Date(4), HandlingEvent.Type.LOAD, HANGZOU, CM001));
-    events.add(new HandlingEvent(cargo, new Date(5), new Date(6), HandlingEvent.Type.UNLOAD, HELSINKI, CM002));
+    events.add(new HandlingEvent(cargo, new Date(5), new Date(6), HandlingEvent.Type.UNLOAD, HELSINKI, CM001));
 
     CargoTestHelper.setDeliveryHistory(cargo, events);
 

File: dddsample/src/main/java/se/citerus/dddsample/domain/model/carrier/CarrierMovement.java
Patch:
@@ -20,7 +20,7 @@ public final class CarrierMovement implements Entity<CarrierMovement> {
 
   // Null object pattern 
   public static final CarrierMovement NONE = new CarrierMovement(
-    new CarrierMovementId("NONE"), Location.UNKNOWN, Location.UNKNOWN,
+    new CarrierMovementId(""), Location.UNKNOWN, Location.UNKNOWN,
     new Date(0), new Date(0));
 
   /**

File: dddsample/src/main/java/se/citerus/dddsample/ui/CargoTrackingViewAdapter.java
Patch:
@@ -154,7 +154,7 @@ public String getType() {
      */
     public String getCarrierMovement() {
       final CarrierMovement cm = handlingEvent.carrierMovement();
-      return cm != null ? cm.carrierMovementId().toString() : "";
+      return cm.carrierMovementId().idString();
     }
 
     /**

File: dddsample/src/test/java/se/citerus/dddsample/application/web/CargoTrackingControllerTest.java
Patch:
@@ -107,7 +107,7 @@ private class EmptyStubTrackingService implements TrackingService {
     public Cargo track(TrackingId trackingId) {
       return null;
     }
-    public void notify(TrackingId trackingId) {
+    public void inspectCargo(TrackingId trackingId) {
     }
   }
 }

File: dddsample/src/main/java/se/citerus/dddsample/domain/model/cargo/CargoRepository.java
Patch:
@@ -8,7 +8,7 @@ public interface CargoRepository {
    * Finds a cargo using given id.
    *
    * @param trackingId Id
-   * @return Cargo
+   * @return Cargo if found, else {@code null}
    */
   Cargo find(TrackingId trackingId);
 

File: dddsample/src/test/java/se/citerus/dddsample/domain/service/HandlingEventServiceTest.java
Patch:
@@ -43,7 +43,7 @@ protected void setUp() throws Exception{
     service.setCarrierMovementRepository(carrierMovementRepository);
     service.setHandlingEventRepository(handlingEventRepository);
     service.setLocationRepository(locationRepository);
-    service.setEventService(domainEventNotifier);
+    service.setDomainEventNotifier(domainEventNotifier);
   }
 
   protected void tearDown() throws Exception {

File: dddsample/src/main/java/se/citerus/dddsample/application/web/CargoTrackingController.java
Patch:
@@ -3,8 +3,8 @@
 import org.springframework.validation.BindException;
 import org.springframework.web.servlet.ModelAndView;
 import org.springframework.web.servlet.mvc.SimpleFormController;
-import se.citerus.dddsample.application.remote.dto.CargoTrackingDTO;
-import se.citerus.dddsample.application.remote.dto.assembler.CargoTrackingDTOAssembler;
+import se.citerus.dddsample.application.remoting.dto.CargoTrackingDTO;
+import se.citerus.dddsample.application.remoting.dto.assembler.CargoTrackingDTOAssembler;
 import se.citerus.dddsample.application.web.command.TrackCommand;
 import se.citerus.dddsample.domain.model.cargo.Cargo;
 import se.citerus.dddsample.domain.model.cargo.TrackingId;

File: dddsample/src/test/java/se/citerus/dddsample/application/service/dto/assembler/CargoRoutingDTOAssemblerTest.java
Patch:
@@ -1,9 +1,9 @@
 package se.citerus.dddsample.application.service.dto.assembler;
 
 import junit.framework.TestCase;
-import se.citerus.dddsample.application.remote.dto.CargoRoutingDTO;
-import se.citerus.dddsample.application.remote.dto.LegDTO;
-import se.citerus.dddsample.application.remote.dto.assembler.CargoRoutingDTOAssembler;
+import se.citerus.dddsample.application.remoting.dto.CargoRoutingDTO;
+import se.citerus.dddsample.application.remoting.dto.LegDTO;
+import se.citerus.dddsample.application.remoting.dto.assembler.CargoRoutingDTOAssembler;
 import se.citerus.dddsample.domain.model.cargo.Cargo;
 import se.citerus.dddsample.domain.model.cargo.Itinerary;
 import se.citerus.dddsample.domain.model.cargo.Leg;

File: dddsample/src/test/java/se/citerus/dddsample/application/service/dto/assembler/ItineraryCandidateDTOAssemblerTest.java
Patch:
@@ -2,9 +2,9 @@
 
 import junit.framework.TestCase;
 import static org.easymock.EasyMock.*;
-import se.citerus.dddsample.application.remote.dto.ItineraryCandidateDTO;
-import se.citerus.dddsample.application.remote.dto.LegDTO;
-import se.citerus.dddsample.application.remote.dto.assembler.ItineraryCandidateDTOAssembler;
+import se.citerus.dddsample.application.remoting.dto.ItineraryCandidateDTO;
+import se.citerus.dddsample.application.remoting.dto.LegDTO;
+import se.citerus.dddsample.application.remoting.dto.assembler.ItineraryCandidateDTOAssembler;
 import se.citerus.dddsample.domain.model.cargo.Itinerary;
 import se.citerus.dddsample.domain.model.cargo.Leg;
 import se.citerus.dddsample.domain.model.carrier.CarrierMovement;

File: dddsample/src/test/java/se/citerus/dddsample/application/service/dto/assembler/LocationDTOAssemblerTest.java
Patch:
@@ -1,8 +1,8 @@
 package se.citerus.dddsample.application.service.dto.assembler;
 
 import junit.framework.TestCase;
-import se.citerus.dddsample.application.remote.dto.LocationDTO;
-import se.citerus.dddsample.application.remote.dto.assembler.LocationDTOAssembler;
+import se.citerus.dddsample.application.remoting.dto.LocationDTO;
+import se.citerus.dddsample.application.remoting.dto.assembler.LocationDTOAssembler;
 import se.citerus.dddsample.domain.model.location.Location;
 import static se.citerus.dddsample.domain.model.location.SampleLocations.HAMBURG;
 import static se.citerus.dddsample.domain.model.location.SampleLocations.STOCKHOLM;

File: dddsample/src/test/java/se/citerus/dddsample/application/web/CargoTrackingControllerTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.springframework.validation.Errors;
 import org.springframework.validation.FieldError;
 import org.springframework.web.servlet.ModelAndView;
-import se.citerus.dddsample.application.remote.dto.CargoTrackingDTO;
+import se.citerus.dddsample.application.remoting.dto.CargoTrackingDTO;
 import se.citerus.dddsample.application.web.command.TrackCommand;
 import se.citerus.dddsample.domain.model.cargo.Cargo;
 import se.citerus.dddsample.domain.model.cargo.CargoTestHelper;

File: dddsample/src/main/java/se/citerus/dddsample/domain/Specification.java
Patch:
@@ -1,7 +1,7 @@
 package se.citerus.dddsample.domain;
 
 /**
- * 
+ *
  */
 public interface Specification {
 }

File: dddsample/src/main/java/se/citerus/dddsample/domain/StatusCode.java
Patch:
@@ -1,7 +1,7 @@
 package se.citerus.dddsample.domain;
 
 /**
- * These are the different status codes for a cargo.
+ * Represents the different status codes for a cargo.
  */
 public enum StatusCode {
   NOT_RECEIVED, IN_PORT, ONBOARD_CARRIER, CLAIMED

File: dddsample/src/main/java/se/citerus/dddsample/repository/HandlingEventRepository.java
Patch:
@@ -7,7 +7,6 @@
 
 /**
  * Handling event repository.
- *
  */
 public interface HandlingEventRepository {
 
@@ -16,11 +15,11 @@ public interface HandlingEventRepository {
    *
    * @param event handling event to save
    */
-  void save(HandlingEvent event);
+  void save(final HandlingEvent event);
 
   /**
    * @param trackingId cargo tracking id
    * @return All handling events for this cargo, ordered by completion time.
    */
-  List<HandlingEvent> findEventsForCargo(TrackingId trackingId);
+  List<HandlingEvent> findEventsForCargo(final TrackingId trackingId);
 }

File: dddsample/src/main/java/se/citerus/dddsample/repository/HibernateRepository.java
Patch:
@@ -6,14 +6,13 @@
 
 /**
  * Functionality common to all Hibernate repositories.
- *
  */
 public abstract class HibernateRepository {
 
-  SessionFactory sessionFactory;
+  private SessionFactory sessionFactory;
 
   @Required
-  public void setSessionFactory(SessionFactory sessionFactory) {
+  public void setSessionFactory(final SessionFactory sessionFactory) {
     this.sessionFactory = sessionFactory;
   }
 

File: dddsample/src/main/java/se/citerus/dddsample/service/CargoService.java
Patch:
@@ -10,14 +10,13 @@
 
 /**
  * Cargo service.
- *
  */
 public interface CargoService {
 
   /**
    * Registers a new cargo in the tracking system, not yet routed.
    *
-   * @param origin cargo origin
+   * @param origin      cargo origin
    * @param destination cargo destination
    * @return Cargo tracking id
    */
@@ -63,7 +62,7 @@ public interface CargoService {
    * based on this list of legs.
    *
    * @param trackingId cargo tracking id
-   * @param itinerary the new itinerary, from a selection
+   * @param itinerary  the new itinerary, from a selection
    */
   void assignItinerary(TrackingId trackingId, ItineraryCandidateDTO itinerary);
 

File: dddsample/src/main/java/se/citerus/dddsample/service/RoutingService.java
Patch:
@@ -7,7 +7,7 @@
 import java.util.List;
 
 /**
- *  
+ *
  */
 public interface RoutingService {
 

File: dddsample/src/main/java/se/citerus/dddsample/service/ThreadBasedEventServiceImpl.java
Patch:
@@ -6,6 +6,7 @@
  * Thread based implementation.
  */
 public class ThreadBasedEventServiceImpl implements EventService {
+
   private CargoService cargoService;
 
   public void fireHandlingEventRegistered(final HandlingEvent event) {

File: dddsample/src/main/java/se/citerus/dddsample/service/UnknownCarrierMovementIdException.java
Patch:
@@ -4,12 +4,12 @@
 
 /**
  * Thrown when trying to register an event with an unknown carrier movement id.
- *
  */
 public class UnknownCarrierMovementIdException extends Exception {
-  private CarrierMovementId carrierMovementId;
 
-  public UnknownCarrierMovementIdException(CarrierMovementId carrierMovementId) {
+  private final CarrierMovementId carrierMovementId;
+
+  public UnknownCarrierMovementIdException(final CarrierMovementId carrierMovementId) {
     this.carrierMovementId = carrierMovementId;
   }
 

File: dddsample/src/main/java/se/citerus/dddsample/service/UnknownLocationException.java
Patch:
@@ -4,9 +4,9 @@
 
 public class UnknownLocationException extends Exception {
 
-  private UnLocode unlocode;
+  private final UnLocode unlocode;
 
-  public UnknownLocationException(UnLocode unlocode) {
+  public UnknownLocationException(final UnLocode unlocode) {
     this.unlocode = unlocode;
   }
 

File: dddsample/src/main/java/se/citerus/dddsample/service/dto/HandlingEventDTO.java
Patch:
@@ -6,15 +6,16 @@
 /**
  * DTO for a handling event.
  */
-public class HandlingEventDTO implements Serializable {
+public final class HandlingEventDTO implements Serializable {
 
   private final String type;
   private final String location;
   private final String carrier;
   private final Date time;
   private boolean expected;
 
-  public HandlingEventDTO(String location, String type, String carrier, Date time, boolean expected) {
+  public HandlingEventDTO(final String location, final String type, final String carrier, final Date time,
+                          final boolean expected) {
     this.location = location;
     this.type = type;
     this.carrier = carrier;

File: dddsample/src/main/java/se/citerus/dddsample/web/command/TrackCommand.java
Patch:
@@ -3,7 +3,7 @@
 import org.apache.commons.lang.builder.ToStringBuilder;
 import static org.apache.commons.lang.builder.ToStringStyle.MULTI_LINE_STYLE;
 
-public class TrackCommand {
+public final class TrackCommand {
 
   /**
    * The tracking id.

File: dddsample/src/main/java/se/citerus/dddsample/web/command/TrackCommandValidator.java
Patch:
@@ -7,13 +7,13 @@
 /**
  * Validator for {@link se.citerus.dddsample.web.command.TrackCommand}s.
  */
-public class TrackCommandValidator implements Validator {
+public final class TrackCommandValidator implements Validator {
 
-  public boolean supports(Class clazz) {
+  public boolean supports(final Class clazz) {
     return TrackCommand.class.isAssignableFrom(clazz);
   }
 
-  public void validate(Object object, Errors errors) {
+  public void validate(final Object object, final Errors errors) {
     ValidationUtils.rejectIfEmptyOrWhitespace(errors, "trackingId", "error.required", "Required");
   }
 

File: dddsample/src/main/java/se/citerus/dddsample/domain/DeliveryHistory.java
Patch:
@@ -64,7 +64,7 @@ public String toString() {
 
   public StatusCode status() {
     if (lastEvent() == null)
-      return StatusCode.NOT_RECIEVED;
+      return StatusCode.NOT_RECEIVED;
 
     HandlingEvent.Type type = lastEvent().type();
     if (type == HandlingEvent.Type.LOAD)

File: dddsample/src/main/java/se/citerus/dddsample/domain/HandlingEvent.java
Patch:
@@ -1,8 +1,8 @@
 package se.citerus.dddsample.domain;
 
+import org.apache.commons.lang.Validate;
 import org.apache.commons.lang.builder.EqualsBuilder;
 import org.apache.commons.lang.builder.HashCodeBuilder;
-import org.apache.commons.lang.Validate;
 
 import javax.persistence.*;
 import java.util.Comparator;

File: dddsample/src/main/java/se/citerus/dddsample/domain/Itinerary.java
Patch:
@@ -4,8 +4,8 @@
 
 import javax.persistence.*;
 import java.util.Arrays;
-import java.util.List;
 import java.util.Collections;
+import java.util.List;
 
 /**
  *
@@ -17,7 +17,7 @@ public class Itinerary {
   @GeneratedValue
   private Long id;
 
-  @OneToMany
+  @OneToMany(cascade = CascadeType.ALL)
   @JoinColumn(name = "itinerary_id")
   private List<Leg> legs = Collections.emptyList();
 

File: dddsample/src/main/java/se/citerus/dddsample/domain/Location.java
Patch:
@@ -23,7 +23,7 @@ public class Location {
    * Special Location object that marks an unknown location.
    */
   public static final Location UNKNOWN = new Location(
-     new UnLocode("XX", "XXX"), "Unknown location"
+     new UnLocode("XXXXX"), "Unknown location"
   );
 
   /**

File: dddsample/src/main/java/se/citerus/dddsample/domain/StatusCode.java
Patch:
@@ -4,5 +4,5 @@
  * These are the different status codes for a cargo.
  */
 public enum StatusCode {
-    NOT_RECIEVED, IN_PORT, ONBOARD_CARRIER, CLAIMED
+  NOT_RECEIVED, IN_PORT, ONBOARD_CARRIER, CLAIMED
 }

File: dddsample/src/main/java/se/citerus/dddsample/service/RoutingService.java
Patch:
@@ -4,13 +4,13 @@
 import se.citerus.dddsample.domain.Specification;
 import se.citerus.dddsample.domain.TrackingId;
 
-import java.util.Set;
+import java.util.List;
 
 /**
  *  
  */
 public interface RoutingService {
 
-  Set<Itinerary> calculatePossibleRoutes(TrackingId trackingId, Specification specification);
+  List<Itinerary> calculatePossibleRoutes(TrackingId trackingId, Specification specification);
 
 }

File: dddsample/src/main/java/se/citerus/dddsample/ws/HandlingEventServiceEndpointImpl.java
Patch:
@@ -37,7 +37,7 @@ public void register(String completionTime, String trackingId, String carrierMov
       }
       HandlingEvent.Type type = parseEventType(eventType);
 
-      UnLocode ul = new UnLocode(unlocode.substring(0,2), unlocode.substring(2,5));
+      UnLocode ul = new UnLocode(unlocode);
 
       handlingEventService.register(date, tid, cid, ul, type);
     } catch (ParseException pe) {

File: dddsample/src/test/java/se/citerus/dddsample/domain/DeliveryHistoryTest.java
Patch:
@@ -36,7 +36,7 @@ public void testEvensOrderedByTimeOccured() throws Exception {
   public void testCargoStatusFromLastHandlingEvent() {
     DeliveryHistory deliveryHistory = new DeliveryHistory();
 
-    assertEquals(StatusCode.NOT_RECIEVED, deliveryHistory.status());
+    assertEquals(StatusCode.NOT_RECEIVED, deliveryHistory.status());
 
     deliveryHistory.addEvent(new HandlingEvent(cargo, new Date(10), new Date(11), HandlingEvent.Type.RECEIVE, HAMBURG, null));
     assertEquals(StatusCode.IN_PORT, deliveryHistory.status());

File: dddsample/src/test/java/se/citerus/dddsample/repository/HandlingEventRepositoryTest.java
Patch:
@@ -25,7 +25,7 @@ public void setLocationRepository(LocationRepository locationRepository) {
   }
 
   public void testSave() {
-    Location location = locationRepository.find(new UnLocode("SE","STO"));
+    Location location = locationRepository.find(new UnLocode("SESTO"));
 
     Cargo cargo = cargoRepository.find(new TrackingId("XYZ"));
     Date completionTime = new Date(10);

File: dddsample/src/test/java/se/citerus/dddsample/repository/LocationRepositoryTest.java
Patch:
@@ -9,12 +9,12 @@ public class LocationRepositoryTest extends AbstractRepositoryTest {
   private LocationRepository locationRepository;
   
   public void testFind() throws Exception {
-    final UnLocode melbourne = new UnLocode("AU", "MEL");
+    final UnLocode melbourne = new UnLocode("AUMEL");
     Location location = locationRepository.find(melbourne);
     assertNotNull(location);
     assertEquals(melbourne, location.unLocode());
 
-    assertNull(locationRepository.find(new UnLocode("NO","LOC")));
+    assertNull(locationRepository.find(new UnLocode("NOLOC")));
   }
 
   public void testFindAll() throws Exception {

File: dddsample/src/test/java/se/citerus/dddsample/service/HandlingEventServiceTest.java
Patch:
@@ -54,7 +54,7 @@ public void testRegisterEvent() throws Exception {
     final CarrierMovementId carrierMovementId = new CarrierMovementId("AAA_BBB");
     expect(carrierMovementRepository.find(carrierMovementId)).andReturn(cmAAA_BBB);
 
-    final UnLocode unLocode = new UnLocode("SE", "STO");
+    final UnLocode unLocode = new UnLocode("SESTO");
     expect(locationRepository.find(unLocode)).andReturn(STOCKHOLM);
 
     // TODO: does not inspect the handling event instance in a sufficient way
@@ -123,7 +123,7 @@ public void testRegisterEventInvalidLocation() throws Exception {
 
     final TrackingId trackingId = new TrackingId("XYZ");
     expect(cargoRepository.find(trackingId)).andReturn(cargoXYZ);
-    UnLocode wayOff = new UnLocode("XX", "YYY");
+    UnLocode wayOff = new UnLocode("XXYYY");
     expect(locationRepository.find(wayOff)).andReturn(null);
     
     replay(cargoRepository, carrierMovementRepository, handlingEventRepository, locationRepository, eventService);

File: dddsample/src/test/java/se/citerus/dddsample/service/RoutingServiceTest.java
Patch:
@@ -9,7 +9,6 @@
 import se.citerus.dddsample.repository.LocationRepository;
 
 import java.util.List;
-import java.util.Set;
 
 public class RoutingServiceTest extends TestCase {
 
@@ -33,7 +32,7 @@ public void testCalculatePossibleRoutes() {
     expect(cargoRepository.find(isA(TrackingId.class))).andReturn(cargo);
     replay(locationRepository, cargoRepository);
 
-    Set<Itinerary> candidates = routingService.calculatePossibleRoutes(trackingId, null);
+    List<Itinerary> candidates = routingService.calculatePossibleRoutes(trackingId, null);
     assertNotNull(candidates);
     
     for (Itinerary itinerary : candidates) {

File: dddsample/src/test/java/se/citerus/dddsample/ws/HandlinEventServiceEndpointTest.java
Patch:
@@ -29,7 +29,7 @@ protected void setUp() throws Exception {
   public void testRegisterValidEvent() throws Exception {
     Date date = new Date(100);
 
-    handlingEventService.register(date, new TrackingId("FOO"), new CarrierMovementId("CAR_456"), new UnLocode("CN","HKG"), HandlingEvent.Type.LOAD);
+    handlingEventService.register(date, new TrackingId("FOO"), new CarrierMovementId("CAR_456"), new UnLocode("CNHKG"), HandlingEvent.Type.LOAD);
     replay(handlingEventService);
 
     // Tested call
@@ -41,7 +41,7 @@ public void testRegisterUnknownTrackingId() throws Exception {
     Date date = new Date(100);
 
     TrackingId trackingId = new TrackingId("NOTFOUND");
-    UnLocode unlocode = new UnLocode("SE","STO");
+    UnLocode unlocode = new UnLocode("SESTO");
 
     handlingEventService.register(date, trackingId, null, unlocode, HandlingEvent.Type.CLAIM);
     expectLastCall().andThrow(new UnknownTrackingIdException(trackingId));
@@ -57,7 +57,7 @@ public void testRegisterUnknownCarrierMovementId() throws Exception {
       TrackingId trackingId = new TrackingId("XYZ");
       CarrierMovementId carrierMovementId = new CarrierMovementId("NOTFOUND");
 
-      handlingEventService.register(date, trackingId, carrierMovementId, new UnLocode("AU","MEL"), HandlingEvent.Type.UNLOAD);
+      handlingEventService.register(date, trackingId, carrierMovementId, new UnLocode("AUMEL"), HandlingEvent.Type.UNLOAD);
       expectLastCall().andThrow(new UnknownCarrierMovementIdException(carrierMovementId));
       replay(handlingEventService);
 

File: dddsample/src/test/java/se/citerus/dddsample/service/CargoServiceTest.java
Patch:
@@ -80,7 +80,7 @@ public void testCargoServiceFindByTrackingIdScenario() {
     Location finalDestination = new Location(new UnLocode("DE","STI"), "Destination");
     final Cargo cargo = new Cargo(new TrackingId("XYZ"), origin, finalDestination);
     Location sesto = new Location(new UnLocode("SE","STO"), "Stockholm");
-    HandlingEvent claimed = new HandlingEvent(cargo, new Date(10), new Date(20), HandlingEvent.Type.CLAIM, sesto);
+    HandlingEvent claimed = new HandlingEvent(cargo, new Date(10), new Date(20), HandlingEvent.Type.CLAIM, sesto, null);
     Location to = new Location(new UnLocode("MU","GER"), "München");
     CarrierMovement carrierMovement = new CarrierMovement(new CarrierMovementId("CAR_001"), sesto, to);
     HandlingEvent loaded = new HandlingEvent(cargo, new Date(12), new Date(25), HandlingEvent.Type.LOAD, sesto, carrierMovement);

File: dddsample/src/test/java/se/citerus/dddsample/web/CargoTrackingControllerTest.java
Patch:
@@ -52,8 +52,7 @@ public CargoWithHistoryDTO track(TrackingId trackingId) {
                 cargo.finalDestination().unLocode().idString(),
                 StatusCode.CLAIMED,
                 "AAAAA",
-                "BALO",
-                cargo.isMisdirected());
+                "BALO");
         cargoDTO.addEvent(new HandlingEventDTO(
           event.location().unLocode().idString(),
           event.type().toString(),

File: dddsample/src/main/java/se/citerus/dddsample/ws/HandlingEventServiceEndpointImpl.java
Patch:
@@ -1,5 +1,6 @@
 package se.citerus.dddsample.ws;
 
+import org.apache.commons.lang.StringUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import se.citerus.dddsample.domain.CarrierMovementId;
@@ -29,7 +30,7 @@ public void register(String completionTime, String trackingId, String carrierMov
       Date date = parseIso8601Date(completionTime);
       TrackingId tid = new TrackingId(trackingId);
       CarrierMovementId cid;
-      if (carrierMovementId != null) {
+      if (StringUtils.isNotBlank(carrierMovementId)) {
         cid = new CarrierMovementId(carrierMovementId);
       } else {
         cid = null;

File: register-app/src/main/java/se/citerus/registerapp/validation/AbstractFormValidationDecorator.java
Patch:
@@ -15,7 +15,9 @@ public void add(final JComponent component, ComponentValidator validator) {
 
     component.addKeyListener(new KeyListener(){
       public void keyPressed(KeyEvent e) {
-        undecorate(component);
+        for (final Entry<JComponent, ComponentValidator> entry : validators.entrySet()) {
+          undecorate(entry.getKey());
+        }
       }
 
       public void keyReleased(KeyEvent e) {}

File: dddsample/src/test/java/se/citerus/dddsample/repository/CargoRepositoryTest.java
Patch:
@@ -29,8 +29,8 @@ public void testFindByCargoId() {
 
   public void testSave() {
     // TODO: introduce Location repository
-    Location finalDestination = new Location("TO");
-    Location origin = new Location("FROM");
+    Location finalDestination = new Location("TOZZZ");
+    Location origin = new Location("FROMZ");
     sessionFactory.getCurrentSession().saveOrUpdate(origin);
     sessionFactory.getCurrentSession().saveOrUpdate(finalDestination);
 

File: dddsample/src/test/java/se/citerus/dddsample/repository/HandlingEventRepositoryTest.java
Patch:
@@ -23,7 +23,7 @@ public void setCargoRepository(CargoRepository cargoRepository) {
 
   public void testSave() {
     // TODO: introduce Location repository
-    Location location = new Location("ABC");
+    Location location = new Location("ABCDE");
     sessionFactory.getCurrentSession().saveOrUpdate(location);
 
     Cargo cargo = cargoRepository.find(new TrackingId("XYZ"));

File: dddsample/src/main/java/se/citerus/dddsample/repository/CarrierMovementRepositoryHibernate.java
Patch:
@@ -14,7 +14,7 @@ public class CarrierMovementRepositoryHibernate extends HibernateRepository impl
   public CarrierMovement find(CarrierMovementId carrierMovementId) {
     return (CarrierMovement) getSession().
             createQuery("from CarrierMovement where carrierMovementId = ?").
-            setParameter(1, carrierMovementId).
+            setParameter(0, carrierMovementId).
             uniqueResult();
   }
 

File: dddsample/src/main/java/se/citerus/dddsample/repository/HibernateRepository.java
Patch:
@@ -2,7 +2,6 @@
 
 import org.hibernate.Session;
 import org.hibernate.SessionFactory;
-import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Required;
 
 /**
@@ -13,7 +12,6 @@ public abstract class HibernateRepository {
 
   SessionFactory sessionFactory;
 
-  @Autowired
   @Required
   public void setSessionFactory(SessionFactory sessionFactory) {
     this.sessionFactory = sessionFactory;

File: dddsample/src/test/java/se/citerus/dddsample/repository/AbstractRepositoryTest.java
Patch:
@@ -13,6 +13,7 @@ public abstract class AbstractRepositoryTest extends AbstractTransactionalDataSo
   SimpleJdbcTemplate sjt;
 
   protected AbstractRepositoryTest() {
+    setAutowireMode(AUTOWIRE_BY_NAME);
     setDependencyCheck(false);
   }
 

File: dddsample/src/main/java/se/citerus/dddsample/domain/Location.java
Patch:
@@ -4,6 +4,7 @@
 import org.apache.commons.lang.builder.HashCodeBuilder;
 
 import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
 import javax.persistence.Id;
 
 @Entity
@@ -14,6 +15,7 @@ public class Location {
   public static final Location UNKNOWN = new Location("Unknown");
 
   @Id
+  @GeneratedValue
   private Long id;
 
   private String unlocode;

File: dddsample/src/main/java/se/citerus/dddsample/repository/CarrierMovementRepository.java
Patch:
@@ -1,10 +1,10 @@
 package se.citerus.dddsample.repository;
 
-import se.citerus.dddsample.domain.CarrierId;
 import se.citerus.dddsample.domain.CarrierMovement;
+import se.citerus.dddsample.domain.CarrierMovementId;
 
 public interface CarrierMovementRepository {
 
-  CarrierMovement find(CarrierId carrierId);
+  CarrierMovement find(CarrierMovementId carrierMovementId);
 
 }

File: dddsample/src/main/java/se/citerus/dddsample/domain/CarrierId.java
Patch:
@@ -18,7 +18,7 @@ public CarrierId(String id) {
     this.id = id;
   }
 
-  public String getId() {
+  public String id() {
     return id;
   }
 

File: dddsample/src/main/java/se/citerus/dddsample/domain/DeliveryHistory.java
Patch:
@@ -54,7 +54,7 @@ public String toString() {
 
   private static class HandlingEventByTimeComparator implements Comparator<HandlingEvent> {
     public int compare(HandlingEvent o1, HandlingEvent o2) {
-      return o1.getTimeOccurred().compareTo(o2.getTimeOccurred());
+      return o1.timeOccurred().compareTo(o2.timeOccurred());
     }
   }
 }

File: dddsample/src/main/java/se/citerus/dddsample/domain/TrackingId.java
Patch:
@@ -22,7 +22,7 @@ public TrackingId(String id) {
     this.id = id;
   }
 
-  public String getId() {
+  public String id() {
     return id;
   }
 

File: dddsample/src/main/java/se/citerus/dddsample/repository/CargoRepositoryInMem.java
Patch:
@@ -29,11 +29,11 @@ public CargoRepositoryInMem() throws Exception {
   }
 
   public Cargo find(TrackingId trackingId) {
-    if (trackingId.getId().equalsIgnoreCase("DAE")){
+    if (trackingId.id().equalsIgnoreCase("DAE")){
       throw new DataRetrievalFailureException("Network failure. Please try again");
     }
     
-    return cargoDb.get(trackingId.getId());
+    return cargoDb.get(trackingId.id());
   }
   
   public void save(Cargo cargo) {

File: dddsample/src/main/java/se/citerus/dddsample/repository/HandlingEventRepositoryInMem.java
Patch:
@@ -111,7 +111,7 @@ public HandlingEvent find(String handlingEventId){
 
   public void save(HandlingEvent event) {
     // Mimmick saving to database
-    for (Cargo cargo : event.getRegisterdCargos()) {
+    for (Cargo cargo : event.registerdCargos()) {
       cargo.handle(event);
     }
   }
@@ -120,7 +120,7 @@ public void save(HandlingEvent event) {
   public Set<HandlingEvent> findByTrackingId(final TrackingId trackingId) {
     Set<HandlingEvent> events = new HashSet<HandlingEvent>();
     for (HandlingEvent event : eventDB.values()) {
-      for (Cargo cargo : event.getRegisterdCargos()) {
+      for (Cargo cargo : event.registerdCargos()) {
         if (cargo.trackingId().equals(trackingId)) {
           events.add(event);
           break;

File: dddsample/src/test/java/se/citerus/dddsample/domain/TrackingScenarioTest.java
Patch:
@@ -14,16 +14,16 @@ public void testTrackingScenarioStage1() throws Exception {
 
     Cargo cargo = populateCargo();
 
-    DeliveryHistory deliveryHistory = cargo.getDeliveryHistory();
+    DeliveryHistory deliveryHistory = cargo.deliveryHistory();
 
     List<HandlingEvent> handlingEvents = deliveryHistory.eventsOrderedByTime();
 
     assertEquals(4, handlingEvents.size());
     final HandlingEvent event = deliveryHistory.lastEvent();
 
-    assertSame(HandlingEvent.Type.UNLOAD, event.getType());
+    assertSame(HandlingEvent.Type.UNLOAD, event.type());
     assertFalse(cargo.atFinalDestiation());
-    assertEquals("CNHKG", cargo.getCurrentLocation().unlocode());
+    assertEquals("CNHKG", cargo.currentLocation().unlocode());
 
   }
 

File: dddsample/src/test/java/se/citerus/dddsample/repository/CargoRepositoryTest.java
Patch:
@@ -39,7 +39,7 @@ public void testFindByCargoId() {
     assertEquals(trackingId, cargo.trackingId());
     assertEquals(origin, cargo.origin());
     assertEquals(finalDestination, cargo.finalDestination());
-    assertEquals(Location.UNKNOWN, cargo.getCurrentLocation());
+    assertEquals(Location.UNKNOWN, cargo.currentLocation());
   }
 
 }
\ No newline at end of file

File: dddsample/src/test/java/se/citerus/dddsample/service/CargoServiceTest.java
Patch:
@@ -68,7 +68,7 @@ public void testCargoServiceFindByTrackingIdScenario() {
       public Cargo answerWithinTransaction() throws Throwable {
         Cargo cargo = new Cargo(new TrackingId("XYZ"), new Location("ORIG"), new Location("DEST"));
         CarrierMovement cm = new CarrierMovement(new CarrierId("CAR_001"), new Location("FROM"), new Location("TO"));
-        cargo.getDeliveryHistory().addEvent(
+        cargo.deliveryHistory().addEvent(
                 new HandlingEvent(new Date(10L), new Date(20L), HandlingEvent.Type.CLAIM, cm)
         );
         return cargo;

File: dddsample/src/test/java/se/citerus/dddsample/domain/CargoRepositoryTest.java
Patch:
@@ -17,10 +17,10 @@ protected String[] getConfigLocations() {
 
   protected void onSetUpInTransaction() throws Exception {
     String[] testData = {
-            "INSERT INTO locations (id, unlocode) VALUES (1, 'SESTO')",
-            "INSERT INTO locations (id, unlocode) VALUES (2, 'CNHKG')",
+            "INSERT INTO Location (id, unlocode) VALUES (1, 'SESTO')",
+            "INSERT INTO Location (id, unlocode) VALUES (2, 'CNHKG')",
 
-            "INSERT INTO cargo (tracking_id, origin_location_fk, final_destination_location_fk) " +
+            "INSERT INTO Cargo (id, origin_id, finalDestination_id) " +
                     "VALUES ('XYZ', 1, 2)"
     };
     jdbcTemplate.batchUpdate(testData);

File: dddsample/src/main/java/se/citerus/dddsample/domain/HandlingEvent.java
Patch:
@@ -56,6 +56,7 @@ public int hashCode() {
     return HashCodeBuilder.reflectionHashCode(this);
   }
 
+  @Override
   public int compareTo(HandlingEvent o) {
     return time.compareTo(o.getTime());
   }

File: dddsample/src/main/java/se/citerus/dddsample/domain/Location.java
Patch:
@@ -28,7 +28,5 @@ public int hashCode() {
   public String toString() {
     return unlocode;
   }
-  
-  
 
 }

File: dddsample/src/main/java/se/citerus/dddsample/service/CargoService.java
Patch:
@@ -4,6 +4,6 @@
 
 public interface CargoService {
 
-  Cargo find(String string);
+  Cargo find(String trackingId);
 
 }

