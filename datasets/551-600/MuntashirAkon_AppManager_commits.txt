File: app/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
Patch:
@@ -554,7 +554,7 @@ protected byte[] readRecord() throws IOException {
     }
 
     private void readGlobalPaxHeaders() throws IOException {
-        globalPaxHeaders = TarUtils.parsePaxHeaders(this, globalSparseHeaders, globalPaxHeaders);
+        globalPaxHeaders = TarUtils.parsePaxHeaders(this, globalSparseHeaders, globalPaxHeaders, entrySize);
         getNextEntry(); // Get the actual file entry
 
         if (currEntry == null) {
@@ -589,7 +589,7 @@ private void readGlobalPaxHeaders() throws IOException {
      */
     private void paxHeaders() throws IOException {
         List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
-        final Map<String, String> headers = TarUtils.parsePaxHeaders(this, sparseHeaders, globalPaxHeaders);
+        final Map<String, String> headers = TarUtils.parsePaxHeaders(this, sparseHeaders, globalPaxHeaders, entrySize);
 
         // for 0.1 PAX Headers
         if (headers.containsKey("GNU.sparse.map")) {

File: app/src/main/java/io/github/muntashirakon/AppManager/servermanager/LocalServer.java
Patch:
@@ -160,7 +160,7 @@ public void destroy() {
     }
 
     @WorkerThread
-    public void closeBgServer() {
+    public void closeBgServer() throws IOException {
         mLocalServerManager.closeBgServer();
         mLocalServerManager.stop();
     }

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/DateUtils.java
Patch:
@@ -179,7 +179,7 @@ public static String getFormattedDurationSingle(long millis, boolean addSign) {
             fTime.append(min).append("m");
         } else {
             // Seconds not included
-            fTime.append("~1m");
+            fTime.append("<1m");
         }
         return (addSign && isNegative ? "-" : "") + fTime;
     }

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/parser/ManifestParser.java
Patch:
@@ -36,10 +36,10 @@ public class ManifestParser {
     private static final String TAG_SERVICE = "service";
     private static final String TAG_RECEIVER = "receiver";
     private static final String TAG_PROVIDER = "provider";
-    private static final String ATTR_NAME = "android:name";
+    private static final String ATTR_NAME = "name"; // android:name
     // manifest -> application -> (component) -> intent-filter
     private static final String TAG_INTENT_FILTER = "intent-filter";
-    private static final String ATTR_PRIORITY = "android:priority";
+    private static final String ATTR_PRIORITY = "priority"; // android:priority
     // manifest -> application -> (component) -> intent-filter -> action|category|data
     private static final String TAG_ACTION = "action";
     private static final String TAG_CATEGORY = "category";

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/parser/ManifestParser.java
Patch:
@@ -57,8 +57,8 @@ public ManifestParser(@NonNull ByteBuffer manifestBytes) {
     }
 
     public List<ManifestComponent> parseComponents() throws IOException {
-        ResXmlDocument xmlBlock = new ResXmlDocument();
         try (BlockReader reader = new BlockReader(mManifestBytes.array())) {
+            ResXmlDocument xmlBlock = new ResXmlDocument();
             xmlBlock.readBytes(reader);
             xmlBlock.setPackageBlock(AndroidBinXmlDecoder.getFrameworkPackageBlock());
             ResXmlElement resManifestElement = xmlBlock.getDocumentElement();

File: libcore/ui/src/main/java/io/github/muntashirakon/dialog/BottomSheetBehavior.java
Patch:
@@ -2360,20 +2360,20 @@ private void clearAccessibilityAction(View view, int viewIndex) {
     }
 
     private void replaceAccessibilityActionForState(
-            View child, AccessibilityActionCompat action, @State int state) {
+            View child, AccessibilityActionCompat action, @StableState int state) {
         ViewCompat.replaceAccessibilityAction(
                 child, action, null, createAccessibilityViewCommandForState(state));
     }
 
     private int addAccessibilityActionForState(
-            View child, @StringRes int stringResId, @State int state) {
+            View child, @StringRes int stringResId, @StableState int state) {
         return ViewCompat.addAccessibilityAction(
                 child,
                 child.getResources().getString(stringResId),
                 createAccessibilityViewCommandForState(state));
     }
 
-    private AccessibilityViewCommand createAccessibilityViewCommandForState(@State final int state) {
+    private AccessibilityViewCommand createAccessibilityViewCommandForState(@StableState final int state) {
         return new AccessibilityViewCommand() {
             @Override
             public boolean perform(@NonNull View view, @Nullable CommandArguments arguments) {

File: app/src/main/java/io/github/muntashirakon/AppManager/filters/options/FilterOptions.java
Patch:
@@ -10,9 +10,11 @@ public static FilterOption create(@NonNull String filterName) {
         switch (filterName) {
             case "apk_size": return new ApkSizeOption();
             case "app_label": return new AppLabelOption();
+            case "app_type": return new AppTypeOption();
             case "backup": return new BackupOption();
             case "bloatware": return new BloatwareOption();
             case "cache_size": return new CacheSizeOption();
+            case "compile_sdk": return new CompileSdkOption();
             case "components": return new ComponentsOption();
             case "data_size": return new DataSizeOption();
             case "data_usage": return new DataUsageOption();
@@ -25,6 +27,7 @@ public static FilterOption create(@NonNull String filterName) {
             case "pkg_name": return new PackageNameOption();
             case "running_apps": return new RunningAppsOption();
             case "screen_time": return new ScreenTimeOption();
+            case "shared_uid": return new SharedUidOption();
             case "signature": return new SignatureOption();
             case "target_sdk": return new TargetSdkOption();
             case "times_opened": return new TimesOpenedOption();

File: app/src/main/java/io/github/muntashirakon/AppManager/filters/options/InstallerOption.java
Patch:
@@ -35,7 +35,7 @@ public Map<String, Integer> getKeysWithType() {
     public TestResult test(@NonNull FilterableAppInfo info, @NonNull TestResult result) {
         InstallSourceInfoCompat installSourceInfo = info.getInstallerInfo();
         if (installSourceInfo == null) {
-            return result.setMatched(key.equals("all"));
+            return result.setMatched(key.equals(KEY_ALL));
         }
         // There's at least one installer at this point
         Set<String> installers = getInstallers(installSourceInfo);

File: app/src/main/java/io/github/muntashirakon/AppManager/filters/FinderViewModel.java
Patch:
@@ -95,6 +95,8 @@ private void loadAppList() {
                     PackageManager.GET_META_DATA | GET_SIGNING_CERTIFICATES
                             | PackageManager.GET_ACTIVITIES | PackageManager.GET_RECEIVERS
                             | PackageManager.GET_PROVIDERS | PackageManager.GET_SERVICES
+                            | PackageManager.GET_CONFIGURATIONS | PackageManager.GET_PERMISSIONS
+                            | PackageManager.GET_URI_PERMISSION_PATTERNS
                             | MATCH_DISABLED_COMPONENTS | MATCH_UNINSTALLED_PACKAGES
                             | MATCH_STATIC_SHARED_AND_SDK_LIBRARIES, userId);
             // List usages

File: app/src/main/java/io/github/muntashirakon/AppManager/filters/options/DataUsageOption.java
Patch:
@@ -15,6 +15,7 @@ public class DataUsageOption extends FilterOption {
         put("eq", TYPE_SIZE_BYTES);
         put("le", TYPE_SIZE_BYTES);
         put("ge", TYPE_SIZE_BYTES);
+        // TODO: 11/19/24 Add more curated options, e.g., mobile and wifi
     }};
 
     public DataUsageOption() {

File: app/src/main/java/io/github/muntashirakon/AppManager/filters/options/InstalledOption.java
Patch:
@@ -13,6 +13,7 @@ public class InstalledOption extends FilterOption {
     private final Map<String, Integer> mKeysWithType = new LinkedHashMap<String, Integer>() {{
         put("all", TYPE_NONE);
         put("installed", TYPE_NONE);
+        put("uninstalled", TYPE_NONE);
         put("installed_before", TYPE_TIME_MILLIS);
         put("installed_after", TYPE_TIME_MILLIS);
     }};

File: hiddenapi/src/main/java/android/os/IUserManager.java
Patch:
@@ -25,6 +25,8 @@ List<UserInfo> getUsers(boolean excludePartial, boolean excludeDying, boolean ex
 
     int getManagedProfileBadge(int userId) throws RemoteException;
 
+    boolean hasUserRestriction(String restrictionKey, int userHandle) throws RemoteException;
+
     abstract class Stub {
         public static IUserManager asInterface(android.os.IBinder obj) {
             return HiddenUtil.throwUOE(obj);

File: app/src/main/java/io/github/muntashirakon/AppManager/fm/FmViewModel.java
Patch:
@@ -195,11 +195,13 @@ public Uri getCurrentUri() {
     }
 
     public void setScrollPosition(Uri uri, int currentScrollPosition) {
+        Log.d(TAG, "Store: Scroll position = %d, uri = %s", currentScrollPosition, uri);
         mPathScrollPositionMap.put(uri, currentScrollPosition);
     }
 
     public int getCurrentScrollPosition() {
         Integer scrollPosition = mPathScrollPositionMap.get(mCurrentUri);
+        Log.d(TAG, "Load: Scroll position = %d, uri = %s", scrollPosition, mCurrentUri);
         return scrollPosition != null ? scrollPosition : 0;
     }
 

File: app/src/main/java/io/github/muntashirakon/AppManager/usage/AppUsageAdapter.java
Patch:
@@ -87,7 +87,8 @@ public ListItemViewHolder(@NonNull View itemView) {
 
     void setDefaultList(List<PackageUsageInfo> list) {
         synchronized (mAdapterList) {
-            AdapterUtils.notifyDataSetChanged(this, mAdapterList, list);
+            notifyItemChanged(0);
+            AdapterUtils.notifyDataSetChanged(this, 1, mAdapterList, list);
         }
     }
 

File: app/src/main/java/io/github/muntashirakon/AppManager/crypto/auth/AuthFeatureDemultiplexer.java
Patch:
@@ -12,7 +12,6 @@
 import io.github.muntashirakon.AppManager.profiles.ProfileApplierActivity;
 
 public class AuthFeatureDemultiplexer extends BaseActivity {
-    public static final String EXTRA_AUTH = "auth";
     public static final String EXTRA_FEATURE = "feature";
 
     @Override

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/BackupFlags.java
Patch:
@@ -66,7 +66,7 @@ public final class BackupFlags {
         put(BACKUP_INT_DATA, new Pair<>(R.string.internal_data, R.string.backup_internal_data_description));
         put(BACKUP_EXT_DATA, new Pair<>(R.string.external_data, R.string.backup_external_data_description));
         put(BACKUP_EXT_OBB_MEDIA, new Pair<>(R.string.backup_obb_media, R.string.backup_obb_media_description));
-        put(BACKUP_CACHE, new Pair<>(R.string.cache, R.string.backup_cache_description));
+        put(BACKUP_CACHE, new Pair<>(R.string.backup_cache, R.string.backup_cache_description));
         put(BACKUP_EXTRAS, new Pair<>(R.string.backup_extras, R.string.backup_extras_description));
         put(BACKUP_RULES, new Pair<>(R.string.rules, R.string.backup_rules_description));
         put(BACKUP_MULTIPLE, new Pair<>(R.string.backup_multiple, R.string.backup_multiple_description));

File: app/src/main/java/io/github/muntashirakon/AppManager/main/ApplicationItem.java
Patch:
@@ -156,6 +156,7 @@ public ApplicationItem() {
 
     public void generateOtherInfo() {
         isStopped = (flags & ApplicationInfo.FLAG_STOPPED) != 0;
+        isSystem = (flags & ApplicationInfo.FLAG_SYSTEM) != 0;
         isPersistent = (flags & ApplicationInfo.FLAG_PERSISTENT) != 0;
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
             usesCleartextTraffic = (flags & ApplicationInfo.FLAG_USES_CLEARTEXT_TRAFFIC) != 0;

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/installer/PackageInstallerService.java
Patch:
@@ -116,7 +116,7 @@ protected void onHandleIntent(@Nullable Intent intent) {
         }
         InstallerOptions options = apkQueueItem.getInstallerOptions() != null
                 ? apkQueueItem.getInstallerOptions()
-                : new InstallerOptions();
+                : InstallerOptions.getDefault();
         List<String> selectedSplitIds = Objects.requireNonNull(apkQueueItem.getSelectedSplits());
         // Install package
         PackageInstallerCompat installer = PackageInstallerCompat.getNewInstance();

File: app/src/main/java/io/github/muntashirakon/AppManager/AppManager.java
Patch:
@@ -19,6 +19,7 @@
 import io.github.muntashirakon.AppManager.misc.AMExceptionHandler;
 import io.github.muntashirakon.AppManager.utils.Utils;
 import io.github.muntashirakon.AppManager.utils.appearance.AppearanceUtils;
+import io.github.muntashirakon.AppManager.utils.appearance.TypefaceUtil;
 
 public class AppManager extends Application {
     static {
@@ -38,6 +39,7 @@ public void onCreate() {
         super.onCreate();
         Thread.setDefaultUncaughtExceptionHandler(new AMExceptionHandler(this));
         AppearanceUtils.init(this);
+        TypefaceUtil.replaceFontsWithSystem(this);
         Security.addProvider(new JavaKeyStoreProvider());
     }
 

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/AppPref.java
Patch:
@@ -138,6 +138,7 @@ public enum PrefKey {
         PREF_VIRUS_TOTAL_API_KEY_STR,
         PREF_VIRUS_TOTAL_PROMPT_BEFORE_UPLOADING_BOOL,
 
+        PREF_USE_SYSTEM_FONT_BOOL,
         PREF_ZIP_ALIGN_BOOL,
         ;
 
@@ -387,6 +388,7 @@ public Object getDefaultValue(@NonNull PrefKey key) {
             case PREF_FM_REMEMBER_LAST_PATH_BOOL:
             case PREF_FM_SORT_REVERSE_BOOL:
             case PREF_ENABLE_PERSISTENT_SESSION_BOOL:
+            case PREF_USE_SYSTEM_FONT_BOOL:
                 return false;
             case PREF_APP_OP_SHOW_DEFAULT_BOOL:
             case PREF_SHOW_DISCLAIMER_BOOL:

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/appearance/AppearanceUtils.java
Patch:
@@ -94,6 +94,9 @@ public static void init(@NonNull Application application) {
         application.registerActivityLifecycleCallbacks(new ActivityAppearanceCallback());
         application.registerComponentCallbacks(new ComponentAppearanceCallback(application));
         applyOnlyLocale(application);
+        if (Prefs.Appearance.useSystemFont()) {
+            TypefaceUtil.replaceFontsWithSystem(application);
+        }
     }
 
     /**

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/AppearancePreferences.java
Patch:
@@ -62,7 +62,6 @@ public void onCreatePreferences(@Nullable Bundle savedInstanceState, @Nullable S
         });
         // Black theme/custom theme
         SwitchPreferenceCompat fullBlackTheme = Objects.requireNonNull(findPreference("app_theme_pure_black"));
-        fullBlackTheme.setVisible(BuildConfig.DEBUG);
         fullBlackTheme.setChecked(Prefs.Appearance.isPureBlackTheme());
         fullBlackTheme.setOnPreferenceChangeListener((preference, newValue) -> {
             boolean enabled = (boolean) newValue;

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/BackupManager.java
Patch:
@@ -117,7 +117,7 @@ private String[] getProcessedBackupNames(@Nullable String[] backupNames) {
             // Multiple backups requested
             if (backupNames == null) {
                 // Create a singleton backupNames array with current time
-                backupNames = new String[]{DateUtils.formatDateTime(ContextUtils.getContext(), System.currentTimeMillis())};
+                backupNames = new String[]{DateUtils.formatMediumDateTime(ContextUtils.getContext(), System.currentTimeMillis())};
             }
             for (int i = 0; i < backupNames.length; ++i) {
                 // Replace illegal characters
@@ -188,7 +188,6 @@ public void restore(@Nullable String[] backupNames, @Nullable ProgressHandler pr
                     mTargetPackage.getUserId())) {
                 restoreOp.runRestore(progressHandler);
                 mRequiresRestart |= restoreOp.requiresRestart();
-                BackupUtils.putBackupToDbAndBroadcast(ContextUtils.getContext(), restoreOp.getMetadata());
             }
         } else {
             Log.w(RestoreOp.TAG, "No backups found.");

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/BackupOp.java
Patch:
@@ -123,6 +123,7 @@ class BackupOp implements Closeable {
             mApplicationInfo = mPackageInfo.applicationInfo;
             // Override existing metadata
             mMetadata = mMetadataManager.setupMetadata(mPackageInfo, userId, backupFlags);
+            mMetadata.backupName = backupFile.backupName;
         } catch (Exception e) {
             mBackupFile.cleanup();
             throw new BackupException("Failed to setup metadata.", e);
@@ -299,7 +300,7 @@ private void backupData() throws BackupException {
             try {
                 dataFiles = TarUtils.create(mMetadata.tarType, Paths.get(mMetadata.dataDirs[i]), mTempBackupPath,
                                 sourceBackupFilePrefix, null, null,
-                                BackupUtils.getExcludeDirs(!mBackupFlags.backupCache(), null), false)
+                                BackupUtils.getExcludeDirs(!mBackupFlags.backupCache()), false)
                         .toArray(new Path[0]);
             } catch (Throwable th) {
                 throw new BackupException("Failed to backup data directory at " + mMetadata.dataDirs[i], th);
@@ -339,7 +340,7 @@ private void backupKeyStore() throws BackupException {  // Called only when the
                 throw new BackupException("Could not cache " + keyStoreFileName, e);
             }
         }
-        if (cachedKeyStoreFileNames.size() == 0) {
+        if (cachedKeyStoreFileNames.isEmpty()) {
             throw new BackupException("There were some KeyStore items but they couldn't be cached before taking a backup.");
         }
         String keyStorePrefix = KEYSTORE_PREFIX + getExt(mMetadata.tarType);

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/MetadataManager.java
Patch:
@@ -238,7 +238,7 @@ synchronized public void readMetadata(@NonNull BackupFiles.BackupFile backupFile
             JSONObject rootObject = new JSONObject(metadata);
             mMetadata = new Metadata();
             mMetadata.backupFile = backupFile;
-            mMetadata.backupName = backupFile.getBackupPath().getName();
+            mMetadata.backupName = backupFile.backupName;
             mMetadata.label = rootObject.getString("label");
             mMetadata.packageName = rootObject.getString("package_name");
             mMetadata.versionName = rootObject.getString("version_name");

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/convert/OABConverter.java
Patch:
@@ -138,6 +138,7 @@ public void convert() throws BackupException {
             try {
                 mTempBackupPath = backupFile.getBackupPath();
                 mCrypto = ConvertUtils.setupCrypto(mDestMetadata);
+                mDestMetadata.backupName = backupFile.backupName;
                 try {
                     mChecksum = backupFile.getChecksum(CryptoUtils.MODE_NO_ENCRYPTION);
                 } catch (IOException e) {
@@ -379,7 +380,7 @@ private void backupData() throws BackupException {
                             }
                         }
                         String fileName = zipEntry.getName().replaceFirst(Pattern.quote(mPackageName + "/"), "");
-                        if (fileName.equals("")) continue;
+                        if (fileName.isEmpty()) continue;
                         // New tar entry
                         TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(fileName);
                         if (tmpFile != null) {

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/convert/SBConverter.java
Patch:
@@ -127,6 +127,7 @@ public void convert() throws BackupException {
             try {
                 mTempBackupPath = backupFile.getBackupPath();
                 mCrypto = ConvertUtils.setupCrypto(mDestMetadata);
+                mDestMetadata.backupName = backupFile.backupName;
                 try {
                     mChecksum = backupFile.getChecksum(CryptoUtils.MODE_NO_ENCRYPTION);
                 } catch (IOException e) {
@@ -273,7 +274,7 @@ private void backupData() throws BackupException {
                             }
                         }
                         String fileName = zipEntry.getName().replaceFirst(Pattern.quote(mPackageName + "/"), "");
-                        if (fileName.equals("")) continue;
+                        if (fileName.isEmpty()) continue;
                         // New tar entry
                         TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(fileName);
                         if (tmpFile != null) {

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/convert/TBConverter.java
Patch:
@@ -138,6 +138,7 @@ public void convert() throws BackupException {
             try {
                 mTempBackupPath = backupFile.getBackupPath();
                 mCrypto = ConvertUtils.setupCrypto(mDestMetadata);
+                mDestMetadata.backupName = backupFile.backupName;
                 try {
                     mChecksum = backupFile.getChecksum(CryptoUtils.MODE_NO_ENCRYPTION);
                 } catch (IOException e) {
@@ -337,7 +338,7 @@ private void backupData() throws BackupException {
                 boolean isExternal = fileName.startsWith(EXTERNAL_PREFIX);
                 // Get new file name
                 fileName = fileName.replaceFirst((isExternal ? EXTERNAL_PREFIX : INTERNAL_PREFIX) + Pattern.quote(mPackageName + "/") + "\\./", "");
-                if (fileName.equals("")) continue;
+                if (fileName.isEmpty()) continue;
                 // New tar entry
                 TarArchiveEntry outTarEntry = new TarArchiveEntry(fileName);
                 outTarEntry.setMode(inTarEntry.getMode());

File: app/src/main/java/io/github/muntashirakon/AppManager/batchops/BatchOpsService.java
Patch:
@@ -219,7 +219,7 @@ private void sendResults(int result, @Nullable BatchOpsManager.Result opResult)
         broadcastIntent.setPackage(getPackageName());
         broadcastIntent.putExtra(EXTRA_OP, mOp);
         broadcastIntent.putExtra(EXTRA_OP_PKG, mPackages != null ? mPackages.toArray(new String[0]) : new String[0]);
-        broadcastIntent.putExtra(EXTRA_FAILED_PKG, opResult != null ? opResult.getFailedPackages().toArray(new String[0]) : new String[0]);
+        broadcastIntent.putStringArrayListExtra(EXTRA_FAILED_PKG, opResult != null ? opResult.getFailedPackages() : null);
         sendBroadcast(broadcastIntent);
         sendNotification(result, opResult);
     }

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/DigestUtils.java
Patch:
@@ -65,6 +65,7 @@ public static String getHexDigest(@Algorithm String algo, @NonNull Path path) {
         List<Path> allFiles = Paths.getAll(path);
         List<String> hashes = new ArrayList<>(allFiles.size());
         for (Path file : allFiles) {
+            if (file.isDirectory()) continue;
             try (InputStream fileInputStream = file.openInputStream()) {
                 hashes.add(getHexDigest(algo, fileInputStream));
             } catch (IOException e) {

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/dexopt/DexOptOptions.java
Patch:
@@ -8,6 +8,7 @@
 import android.text.TextUtils;
 
 import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 
 public class DexOptOptions implements Parcelable {
     @NonNull
@@ -19,6 +20,7 @@ public static DexOptOptions getDefault() {
         return options;
     }
 
+    @Nullable
     public String[] packages;
     public String compilerFiler;
     public boolean compileLayouts;

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/behavior/DexOptDialog.java
Patch:
@@ -83,6 +83,7 @@ public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {
         MaterialCheckBox forceDexOptCheck = view.findViewById(R.id.force_dexopt);
         checkProfilesCheck.setChecked(mOptions.checkProfiles);
         if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q || Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
+            // Compile layout options was introduced in Android 10 and removed in Android 12
             compileLayoutsCheck.setVisibility(View.GONE);
         }
         if (!isRootOrSystem) {

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/behavior/DexOptimizer.java
Patch:
@@ -81,7 +81,8 @@ public boolean compileLayouts() {
 
     public boolean forceDexOpt() {
         try {
-            if (SelfPermissions.isSystemOrRoot()) {
+            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.UPSIDE_DOWN_CAKE
+                    && SelfPermissions.isSystemOrRoot()) {
                 // Allowed for only root/system
                 try {
                     mPm.forceDexOpt(mPackageName);

File: app/src/main/java/io/github/muntashirakon/AppManager/details/info/AppInfoFragment.java
Patch:
@@ -421,8 +421,8 @@ public boolean onOptionsItemSelected(@NonNull MenuItem item) {
             });
         } else if (itemId == R.id.action_backup) {
             if (mMainModel == null) return true;
-            BackupRestoreDialogFragment fragment = BackupRestoreDialogFragment.getInstance(
-                    Collections.singletonList(new UserPackagePair(mPackageName, mUserId)));
+            BackupRestoreDialogFragment fragment = BackupRestoreDialogFragment.getInstanceWithPref(
+                    Collections.singletonList(new UserPackagePair(mPackageName, mUserId)), mUserId);
             fragment.setOnActionBeginListener(mode -> showProgressIndicator(true));
             fragment.setOnActionCompleteListener((mode, failedPackages) -> showProgressIndicator(false));
             fragment.show(getParentFragmentManager(), BackupRestoreDialogFragment.TAG);

File: app/src/main/java/io/github/muntashirakon/AppManager/details/info/AppInfoFragment.java
Patch:
@@ -1873,7 +1873,7 @@ private void createFreezeShortcut(boolean isFrozen) {
      */
     @NonNull
     private String getTime(long time) {
-        return DateUtils.formatWeekMediumDateTime(requireContext(), time);
+        return DateUtils.formatLongDateTime(requireContext(), time);
     }
 
     /**

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/installer/PackageInstallerActivity.java
Patch:
@@ -156,6 +156,7 @@ public static Intent getLaunchableInstance(@NonNull Context context, @NonNull St
             new ActivityResultContracts.StartActivityForResult(), result -> {
                 // User did some interaction and the installer screen is closed now
                 Intent broadcastIntent = new Intent(PackageInstallerCompat.ACTION_INSTALL_INTERACTION_END);
+                broadcastIntent.setPackage(getPackageName());
                 broadcastIntent.putExtra(PackageInstaller.EXTRA_PACKAGE_NAME, mPackageName);
                 broadcastIntent.putExtra(PackageInstaller.EXTRA_SESSION_ID, mSessionId);
                 getApplicationContext().sendBroadcast(broadcastIntent);

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/installer/PackageInstallerBroadcastReceiver.java
Patch:
@@ -47,6 +47,7 @@ public void onReceive(Context nullableContext, @NonNull Intent intent) {
                 Log.d(TAG, "Requesting user confirmation...");
                 // Send broadcast first
                 Intent broadcastIntent2 = new Intent(PackageInstallerCompat.ACTION_INSTALL_INTERACTION_BEGIN);
+                broadcastIntent2.setPackage(context.getPackageName());
                 broadcastIntent2.putExtra(PackageInstaller.EXTRA_PACKAGE_NAME, mPackageName);
                 broadcastIntent2.putExtra(PackageInstaller.EXTRA_SESSION_ID, sessionId);
                 context.sendBroadcast(broadcastIntent2);
@@ -66,6 +67,7 @@ public void onReceive(Context nullableContext, @NonNull Intent intent) {
                 }
                 // Delete intent: aborts the operation
                 Intent broadcastCancel = new Intent(PackageInstallerCompat.ACTION_INSTALL_COMPLETED);
+                broadcastCancel.setPackage(context.getPackageName());
                 broadcastCancel.putExtra(PackageInstaller.EXTRA_PACKAGE_NAME, mPackageName);
                 broadcastCancel.putExtra(PackageInstaller.EXTRA_STATUS, PackageInstallerCompat.STATUS_FAILURE_ABORTED);
                 broadcastCancel.putExtra(PackageInstaller.EXTRA_SESSION_ID, sessionId);
@@ -95,6 +97,7 @@ public void onReceive(Context nullableContext, @NonNull Intent intent) {
             default:
                 NotificationUtils.cancelInstallConfirmNotification(context, mConfirmNotificationId);
                 Intent broadcastError = new Intent(PackageInstallerCompat.ACTION_INSTALL_COMPLETED);
+                broadcastError.setPackage(context.getPackageName());
                 String statusMessage = intent.getStringExtra(PackageInstaller.EXTRA_STATUS_MESSAGE);
                 broadcastError.putExtra(PackageInstaller.EXTRA_STATUS_MESSAGE, statusMessage);
                 broadcastError.putExtra(PackageInstaller.EXTRA_PACKAGE_NAME, mPackageName);

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/installer/PackageInstallerCompat.java
Patch:
@@ -1235,6 +1235,7 @@ private void initBroadcastReceiver() {
 
     private void sendStartedBroadcast(@NonNull String packageName, int sessionId) {
         Intent broadcastIntent = new Intent(ACTION_INSTALL_STARTED);
+        broadcastIntent.setPackage(mContext.getPackageName());
         broadcastIntent.putExtra(PackageInstaller.EXTRA_PACKAGE_NAME, packageName);
         broadcastIntent.putExtra(PackageInstaller.EXTRA_SESSION_ID, sessionId);
         mContext.sendBroadcast(broadcastIntent);
@@ -1243,6 +1244,7 @@ private void sendStartedBroadcast(@NonNull String packageName, int sessionId) {
     static void sendCompletedBroadcast(@NonNull Context context, @NonNull String packageName, @Status int status,
                                        int sessionId) {
         Intent broadcastIntent = new Intent(ACTION_INSTALL_COMPLETED);
+        broadcastIntent.setPackage(context.getPackageName());
         broadcastIntent.putExtra(PackageInstaller.EXTRA_PACKAGE_NAME, packageName);
         broadcastIntent.putExtra(PackageInstaller.EXTRA_STATUS, status);
         broadcastIntent.putExtra(PackageInstaller.EXTRA_SESSION_ID, sessionId);

File: app/src/main/java/io/github/muntashirakon/AppManager/batchops/BatchOpsService.java
Patch:
@@ -208,13 +208,15 @@ public void onDestroy() {
 
     private void sendStarted() {
         Intent broadcastIntent = new Intent(ACTION_BATCH_OPS_STARTED);
+        broadcastIntent.setPackage(getPackageName());
         broadcastIntent.putExtra(EXTRA_OP, mOp);
         broadcastIntent.putExtra(EXTRA_OP_PKG, mPackages != null ? mPackages.toArray(new String[0]) : new String[0]);
         sendBroadcast(broadcastIntent);
     }
 
     private void sendResults(int result, @Nullable BatchOpsManager.Result opResult) {
         Intent broadcastIntent = new Intent(ACTION_BATCH_OPS_COMPLETED);
+        broadcastIntent.setPackage(getPackageName());
         broadcastIntent.putExtra(EXTRA_OP, mOp);
         broadcastIntent.putExtra(EXTRA_OP_PKG, mPackages != null ? mPackages.toArray(new String[0]) : new String[0]);
         broadcastIntent.putExtra(EXTRA_FAILED_PKG, opResult != null ? opResult.getFailedPackages().toArray(new String[0]) : new String[0]);

File: app/src/main/java/io/github/muntashirakon/AppManager/crypto/OpenPGPCrypto.java
Patch:
@@ -294,6 +294,7 @@ private void handleResult(@NonNull Intent result) {
             case OpenPgpApi.RESULT_CODE_USER_INTERACTION_REQUIRED: {
                 Log.i(TAG, "User interaction required. Sending intent...");
                 Intent broadcastIntent = new Intent(OpenPGPCrypto.ACTION_OPEN_PGP_INTERACTION_BEGIN);
+                broadcastIntent.setPackage(mContext.getPackageName());
                 mContext.sendBroadcast(broadcastIntent);
                 // Intent wrapper
                 Intent intent = new Intent(mContext, OpenPGPCryptoActivity.class);

File: app/src/main/java/io/github/muntashirakon/AppManager/crypto/OpenPGPCryptoActivity.java
Patch:
@@ -22,6 +22,7 @@ public class OpenPGPCryptoActivity extends BaseActivity {
     private final ActivityResultLauncher<IntentSenderRequest> mConfirmationLauncher = registerForActivityResult(
             new ActivityResultContracts.StartIntentSenderForResult(), result -> {
                 Intent broadcastIntent = new Intent(OpenPGPCrypto.ACTION_OPEN_PGP_INTERACTION_END);
+                broadcastIntent.setPackage(getPackageName());
                 sendBroadcast(broadcastIntent);
                 finish();
             });

File: app/src/main/java/io/github/muntashirakon/AppManager/crypto/ks/KeyStoreManager.java
Patch:
@@ -508,6 +508,7 @@ private char[] getAliasPassword(@NonNull String alias) throws KeyStoreException
             filter.addAction(ACTION_KS_INTERACTION_END);
             ContextCompat.registerReceiver(mContext, mReceiver, filter, ContextCompat.RECEIVER_NOT_EXPORTED);
             Intent broadcastIntent = new Intent(ACTION_KS_INTERACTION_BEGIN);
+            broadcastIntent.setPackage(mContext.getPackageName());
             mContext.sendBroadcast(broadcastIntent);
             // Intent wrapper
             Intent intent = new Intent(mContext, KeyStoreActivity.class);

File: app/src/main/java/io/github/muntashirakon/AppManager/fm/dialogs/FilePropertiesDialogFragment.java
Patch:
@@ -471,7 +471,7 @@ public void fetchOwnerList() {
                 if (mOwnerList.isEmpty()) {
                     getOwnersAndGroupsInternal();
                 }
-                mOwnerListLiveData.postValue(mOwnerList);
+                mOwnerListLiveData.postValue(new ArrayList<>(mOwnerList));
             });
         }
 
@@ -480,7 +480,7 @@ public void fetchGroupList() {
                 if (mGroupList.isEmpty()) {
                     getOwnersAndGroupsInternal();
                 }
-                mGroupListLiveData.postValue(mGroupList);
+                mGroupListLiveData.postValue(new ArrayList<>(mGroupList));
             });
         }
 

File: app/src/main/java/io/github/muntashirakon/AppManager/details/ActivityLauncherShortcutActivity.java
Patch:
@@ -8,7 +8,6 @@
 import android.content.Context;
 import android.content.Intent;
 import android.os.Bundle;
-import android.os.RemoteException;
 import android.os.UserHandleHidden;
 
 import androidx.annotation.NonNull;
@@ -70,7 +69,7 @@ protected void onAuthenticated(@Nullable Bundle savedInstanceState) {
         } else {
             try {
                 ActivityManagerCompat.startActivity(intent, userId);
-            } catch (RemoteException e) {
+            } catch (Throwable e) {
                 e.printStackTrace();
                 UIUtils.displayLongToast("Error: " + e.getMessage());
                 // Try assist instead

File: app/src/main/java/io/github/muntashirakon/AppManager/ipc/ProxyBinder.java
Patch:
@@ -58,9 +58,10 @@ public boolean transact(int code, @NonNull Parcel data, @Nullable Parcel reply,
                 newData.writeInterfaceToken(IRootServiceManager.class.getName());
                 newData.writeStrongBinder(mOriginal);
                 newData.writeInt(code);
+                newData.writeInt(flags);
                 newData.appendFrom(data, 0, data.dataSize());
                 // Transact via AMService
-                LocalServices.getAmService().asBinder().transact(PROXY_BINDER_TRANSACT_CODE, newData, reply, flags);
+                LocalServices.getAmService().asBinder().transact(PROXY_BINDER_TRANSACT_CODE, newData, reply, 0);
             } finally {
                 newData.recycle();
             }

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/MainPreferencesViewModel.java
Patch:
@@ -40,6 +40,7 @@
 import io.github.muntashirakon.AppManager.rules.compontents.ComponentUtils;
 import io.github.muntashirakon.AppManager.rules.compontents.ComponentsBlocker;
 import io.github.muntashirakon.AppManager.servermanager.LocalServer;
+import io.github.muntashirakon.AppManager.servermanager.ServerConfig;
 import io.github.muntashirakon.AppManager.users.UserInfo;
 import io.github.muntashirakon.AppManager.users.Users;
 import io.github.muntashirakon.AppManager.utils.CpuUtils;
@@ -121,6 +122,7 @@ public MutableLiveData<String> getCustomCommand() {
     public void loadCustomCommand() {
         mExecutor.submit(() -> {
             try {
+                ServerConfig.init(getApplication(), UserHandleHidden.myUserId());
                 mCustomCommand.postValue(LocalServer.getExecCommand(getApplication()));
             } catch (Throwable e) {
                 e.printStackTrace();

File: app/src/main/java/io/github/muntashirakon/AppManager/ipc/ServiceConnectionWrapper.java
Patch:
@@ -62,7 +62,7 @@ private void onResponseReceived() {
             if (mServiceBoundWatcher != null) {
                 // Should never be null
                 mServiceBoundWatcher.countDown();
-            } else throw new RuntimeException("AMService watcher should never be null!");
+            } else throw new RuntimeException("Service watcher should never be null!");
         }
     }
 

File: app/src/main/java/io/github/muntashirakon/AppManager/servermanager/ServerStatusChangeReceiver.java
Patch:
@@ -32,9 +32,9 @@ public void onReceive(Context context, @NonNull Intent intent) {
         // Verify token before doing action
         String token = intent.getStringExtra(ConfigParams.PARAM_TOKEN);
         if (ServerConfig.getLocalToken().equals(token)) {
-            String type = intent.getStringExtra(ConfigParams.PARAM_TYPE);
-            Log.d(TAG, "onReceive --> %s %s", action, type);
-            // TODO: 9/4/24 Could be root, adb, or system types
+            String uidString = intent.getStringExtra(ConfigParams.PARAM_UID);
+            Log.d(TAG, "onReceive --> %s %s", action, uidString);
+            int uid = Integer.parseInt(uidString);
 
             switch (action) {
                 case ServerActions.ACTION_SERVER_STARTED:

File: server/src/main/java/io/github/muntashirakon/AppManager/server/LifecycleAgent.java
Patch:
@@ -11,7 +11,7 @@
 import io.github.muntashirakon.AppManager.server.common.ServerInfo;
 
 import static io.github.muntashirakon.AppManager.server.common.ConfigParams.PARAM_TOKEN;
-import static io.github.muntashirakon.AppManager.server.common.ConfigParams.PARAM_TYPE;
+import static io.github.muntashirakon.AppManager.server.common.ConfigParams.PARAM_UID;
 
 // Copyright 2017 Zheng Li
 final class LifecycleAgent {
@@ -50,6 +50,6 @@ private Intent makeIntent(String action) {
         return new Intent(action)
                 .setClassName(mConfigParams.getAppName(), ServerActions.PACKAGE_NAME + ".servermanager.ServerStatusChangeReceiver")
                 .putExtra(PARAM_TOKEN, mConfigParams.getToken())
-                .putExtra(PARAM_TYPE, mConfigParams.getType());
+                .putExtra(PARAM_UID, mConfigParams.getUid());
     }
 }

File: app/src/main/java/io/github/muntashirakon/AppManager/servermanager/LocalServerManager.java
Patch:
@@ -80,7 +80,7 @@ private ClientSession getSession() throws IOException {
                 try {
                     mSession = createSession();
                 } catch (Exception e) {
-                    if (!Ops.isRoot() || !Ops.isAdb()) {
+                    if (!Ops.isRoot() && !Ops.isAdb()) {
                         // Do not bother attempting to create a new session
                         throw new IOException("Could not create session", e);
                     }

File: app/src/main/java/io/github/muntashirakon/AppManager/scanner/ScannerFragment.java
Patch:
@@ -98,14 +98,13 @@ public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceStat
         signaturesView.setCardBackgroundColor(cardColor);
         MaterialCardView missingLibsView = view.findViewById(R.id.missing_libs);
         missingLibsView.setCardBackgroundColor(cardColor);
-        boolean isInternetEnabled = FeatureController.isInternetEnabled();
         // VirusTotal
-        if (!isInternetEnabled || Prefs.VirusTotal.getApiKey() == null) {
+        if (!FeatureController.isVirusTotalEnabled() || Prefs.VirusTotal.getApiKey() == null) {
             mVtContainerView.setVisibility(View.GONE);
             view.findViewById(R.id.vt_disclaimer).setVisibility(View.GONE);
         }
         // Pithus
-        if (!isInternetEnabled) {
+        if (!FeatureController.isInternetEnabled()) {
             pithusContainerView.setVisibility(View.GONE);
         }
         // Checksum

File: app/src/main/java/io/github/muntashirakon/AppManager/scanner/vt/VirusTotal.java
Patch:
@@ -57,7 +57,7 @@ public interface FullScanResponseInterface {
     @Nullable
     public static VirusTotal getInstance() {
         String apiKey = Prefs.VirusTotal.getApiKey();
-        if (FeatureController.isInternetEnabled() && apiKey != null) {
+        if (FeatureController.isVirusTotalEnabled() && apiKey != null) {
             return new VirusTotal(apiKey);
         }
         return null;

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/FileManagerPreferences.java
Patch:
@@ -8,8 +8,10 @@
 import android.net.Uri;
 import android.os.Bundle;
 import android.text.TextUtils;
+import android.view.inputmethod.EditorInfo;
 
 import androidx.annotation.Nullable;
+import androidx.core.view.inputmethod.EditorInfoCompat;
 import androidx.preference.Preference;
 import androidx.preference.SwitchPreferenceCompat;
 
@@ -50,6 +52,7 @@ public void onCreatePreferences(@Nullable Bundle savedInstanceState, @Nullable S
             new TextInputDialogBuilder(requireContext(), null)
                     .setTitle(R.string.pref_set_home)
                     .setInputText(FmUtils.getDisplayablePath(Prefs.FileManager.getHome()))
+                    .setInputImeOptions(EditorInfo.IME_ACTION_DONE | EditorInfoCompat.IME_FLAG_NO_PERSONALIZED_LEARNING)
                     .setNegativeButton(R.string.cancel, null)
                     .setPositiveButton(R.string.ok, (dialog, which, inputText, isChecked) -> {
                         if (TextUtils.isEmpty(inputText)) {

File: app/src/main/java/io/github/muntashirakon/AppManager/profiles/ProfileViewModel.java
Patch:
@@ -373,6 +373,7 @@ public void loadPackages() {
                             AppsFragment.AppsFragmentItem oldItem = oldItems.get(i);
                             if (oldItem.applicationInfo != null) {
                                 item.applicationInfo = oldItem.applicationInfo;
+                                item.label = oldItem.label;
                             }
                         }
                     }

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/installer/PackageInstallerCompat.java
Patch:
@@ -736,6 +736,7 @@ private boolean commit(int userId) {
             Log.d(TAG, "Commit: Calling activity to request permission...");
             intentReceiver = null;
             Intent callbackIntent = new Intent(PackageInstallerBroadcastReceiver.ACTION_PI_RECEIVER);
+            callbackIntent.setPackage(BuildConfig.APPLICATION_ID);
             PendingIntent pendingIntent = PendingIntentCompat.getBroadcast(mContext, 0, callbackIntent, 0, true);
             sender = pendingIntent.getIntentSender();
         }
@@ -1076,6 +1077,7 @@ public boolean uninstall(String packageName, @UserIdInt int userId, boolean keep
                 Log.d(TAG, "Uninstall: Calling activity to request permission...");
                 intentReceiver = null;
                 Intent callbackIntent = new Intent(PackageInstallerBroadcastReceiver.ACTION_PI_RECEIVER);
+                callbackIntent.setPackage(BuildConfig.APPLICATION_ID);
                 PendingIntent pendingIntent = PendingIntentCompat.getBroadcast(mContext, 0, callbackIntent, 0, true);
                 sender = pendingIntent.getIntentSender();
             }

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/signing/SignerInfo.java
Patch:
@@ -43,7 +43,8 @@ public SignerInfo(@NonNull ApkVerifier.Result apkVerifierResult) {
             }
         }
         // Collect source stamp certificate
-        mSourceStampCert = apkVerifierResult.getSourceStampInfo().getCertificate();
+        ApkVerifier.Result.SourceStampInfo sourceStampInfo = apkVerifierResult.getSourceStampInfo();
+        mSourceStampCert = sourceStampInfo != null ? sourceStampInfo.getCertificate() : null;
         if (mCurrentSignerCerts == null || mCurrentSignerCerts.length > 1) {
             // Skip checking rotation because the app has multiple signers or no signer at all
             mAllSignerCerts = mCurrentSignerCerts;

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppDetailsViewModel.java
Patch:
@@ -1830,7 +1830,7 @@ private void loadSignatures() {
                     appDetailsItems.add(item);
                 }
             }
-        } catch (IOException | ApkFormatException | NoSuchAlgorithmException e) {
+        } catch (Exception e) {
             e.printStackTrace();
         }
         mSignatures.postValue(appDetailsItems);

File: app/src/main/java/io/github/muntashirakon/AppManager/crypto/ks/KeyStoreActivity.java
Patch:
@@ -26,8 +26,8 @@ public class KeyStoreActivity extends AppCompatActivity {
 
     @Override
     protected void onCreate(@Nullable Bundle savedInstanceState) {
-        EdgeToEdge.enable(this);
         setTheme(Prefs.Appearance.getTransparentAppTheme());
+        EdgeToEdge.enable(this);
         super.onCreate(savedInstanceState);
         if (Boolean.TRUE.equals(BuildExpiryChecker.buildExpired())) {
             // Build has expired

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppDetailsActivity.java
Patch:
@@ -42,6 +42,7 @@
 import io.github.muntashirakon.AppManager.utils.UIUtils;
 import io.github.muntashirakon.io.Path;
 import io.github.muntashirakon.io.Paths;
+import io.github.muntashirakon.util.UiUtils;
 
 public class AppDetailsActivity extends BaseActivity {
     public static final String ALIAS_APP_INFO = "io.github.muntashirakon.AppManager.details.AppInfoActivity";
@@ -154,6 +155,7 @@ protected void onAuthenticated(@Nullable Bundle savedInstanceState) {
         }
         mViewPager = findViewById(R.id.pager);
         TabLayout tabLayout = findViewById(R.id.tab_layout);
+        UiUtils.applyWindowInsetsAsPadding(tabLayout, false, true);
         final AlertDialog progressDialog = UIUtils.getProgressDialog(this, getText(R.string.loading), true);
         if (mPackageName == null) {
             // Display progress dialog only for external apk files

File: app/src/main/java/io/github/muntashirakon/AppManager/fm/FmFragment.java
Patch:
@@ -186,6 +186,7 @@ public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceStat
         ActionBar actionBar = mActivity.getSupportActionBar();
         mSwipeRefresh = view.findViewById(R.id.swipe_refresh);
         mSwipeRefresh.setOnRefreshListener(this);
+        UiUtils.applyWindowInsetsAsPadding(view.findViewById(R.id.path_container), false, true);
         RecyclerView pathListView = view.findViewById(R.id.path_list);
         pathListView.setLayoutManager(new LinearLayoutManager(mActivity, RecyclerView.HORIZONTAL, false));
         mPathListAdapter = new FmPathListAdapter(mModel);

File: app/src/main/java/io/github/muntashirakon/AppManager/main/SplashActivity.java
Patch:
@@ -61,8 +61,8 @@ public class SplashActivity extends AppCompatActivity {
 
     @Override
     protected final void onCreate(@Nullable Bundle savedInstanceState) {
-        EdgeToEdge.enable(this);
         setTheme(Prefs.Appearance.isPureBlackTheme() ? R.style.AppTheme_Splash_Black : R.style.AppTheme_Splash);
+        EdgeToEdge.enable(this);
         super.onCreate(savedInstanceState);
         SplashScreen.installSplashScreen(this);
         DynamicColors.applyToActivityIfAvailable(this);

File: app/src/main/java/io/github/muntashirakon/AppManager/profiles/AppsFragment.java
Patch:
@@ -81,7 +81,6 @@ public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceStat
         mSwipeRefresh = view.findViewById(R.id.swipe_refresh);
         mSwipeRefresh.setOnRefreshListener(this);
         RecyclerView recyclerView = view.findViewById(R.id.scrollView);
-        recyclerView.setFitsSystemWindows(false);
         recyclerView.setHasFixedSize(true);
         recyclerView.setLayoutManager(new LinearLayoutManager(mActivity, LinearLayoutManager.VERTICAL, false));
         final TextView emptyView = view.findViewById(android.R.id.empty);

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/SettingsActivity.java
Patch:
@@ -28,6 +28,7 @@
 import io.github.muntashirakon.AppManager.logs.Log;
 import io.github.muntashirakon.AppManager.self.life.BuildExpiryChecker;
 import io.github.muntashirakon.AppManager.self.life.FundingCampaignChecker;
+import io.github.muntashirakon.util.UiUtils;
 
 public class SettingsActivity extends BaseActivity implements PreferenceFragmentCompat.OnPreferenceStartFragmentCallback {
     public static final String TAG = SettingsActivity.class.getSimpleName();
@@ -74,8 +75,10 @@ protected void onAuthenticated(Bundle savedInstanceState) {
 
         View buildExpiringNotice = findViewById(R.id.app_manager_expiring_notice);
         buildExpiringNotice.setVisibility(BuildExpiryChecker.buildExpired() == null ? View.VISIBLE : View.GONE);
+        UiUtils.applyWindowInsetsAsPadding(buildExpiringNotice, false, true);
         View fundingCampaignNotice = findViewById(R.id.funding_campaign_notice);
         fundingCampaignNotice.setVisibility(FundingCampaignChecker.campaignRunning() ? View.VISIBLE : View.GONE);
+        UiUtils.applyWindowInsetsAsPadding(fundingCampaignNotice, false, true);
 
         if (savedInstanceState != null) {
             clearBackStack();

File: app/src/main/java/io/github/muntashirakon/AppManager/ipc/RootService.java
Patch:
@@ -256,7 +256,7 @@ public ComponentName getComponentName() {
     @SuppressLint("RestrictedApi")
     @Override
     public final Context getApplicationContext() {
-        return ContextUtils.getContext();
+        return ContextUtils.rootContext;
     }
 
     /**

File: app/src/main/java/io/github/muntashirakon/AppManager/ipc/RootServiceManager.java
Patch:
@@ -110,7 +110,7 @@ static Intent getBroadcastIntent(IBinder binder, boolean isDaemon) {
         Bundle bundle = new Bundle();
         bundle.putBinder(BUNDLE_BINDER_KEY, binder);
         return new Intent(RECEIVER_BROADCAST)
-                .setPackage(ContextUtils.context.getPackageName())
+                .setPackage(ContextUtils.rootContext.getPackageName())
                 .addFlags(HiddenAPIs.FLAG_RECEIVER_FROM_SHELL)
                 .putExtra(INTENT_DAEMON_KEY, isDaemon)
                 .putExtra(INTENT_BUNDLE_KEY, bundle);

File: app/src/main/java/io/github/muntashirakon/AppManager/self/SelfPermissions.java
Patch:
@@ -40,7 +40,8 @@ public static void init() {
                 Manifest.permission.DUMP,
                 ManifestCompat.permission.GET_APP_OPS_STATS,
                 ManifestCompat.permission.INTERACT_ACROSS_USERS,
-                Manifest.permission.READ_LOGS
+                Manifest.permission.READ_LOGS,
+                Manifest.permission.WRITE_SECURE_SETTINGS
         };
         int userId = UserHandleHidden.myUserId();
         for (String permission : permissions) {

File: app/src/main/java/io/github/muntashirakon/AppManager/servermanager/LocalServerManager.java
Patch:
@@ -201,6 +201,7 @@ private void useAdbStartServer() throws Exception {
             int adbPort = ServerConfig.getAdbPort();
             AdbConnectionManager manager = AdbConnectionManager.getInstance();
             Log.d(TAG, "useAdbStartServer: Connecting using host=%s, port=%d", adbHost, adbPort);
+            manager.setTimeout(10, TimeUnit.SECONDS);
             if (!manager.isConnected() && !manager.connect(adbHost, adbPort)) {
                 throw new IOException("Could not connect to ADB.");
             }

File: app/src/main/java/io/github/muntashirakon/AppManager/BaseActivity.java
Patch:
@@ -237,7 +237,9 @@ private void handleMigrationAndModeOfOp() {
         // Authentication was successful
         Log.d(TAG, "Authenticated");
         // Set mode of operation
-        Objects.requireNonNull(mViewModel).setModeOfOps();
+        if (mViewModel != null) {
+            mViewModel.setModeOfOps();
+        }
     }
 
     private void initPermissionChecks() {

File: app/src/main/java/io/github/muntashirakon/AppManager/main/SplashActivity.java
Patch:
@@ -173,6 +173,8 @@ private void handleMigrationAndModeOfOp() {
             mStateNameView.setText(R.string.initializing);
         }
         // Set mode of operation
-        mViewModel.setModeOfOps();
+        if (mViewModel != null) {
+            mViewModel.setModeOfOps();
+        }
     }
 }

File: app/src/main/java/io/github/muntashirakon/AppManager/compat/SubscriptionManagerCompat.java
Patch:
@@ -54,8 +54,9 @@ public static String getSubscriberIdForSubscriber(long subId) {
                 return sub.getSubscriberIdForSubscriber((int) subId);
             }
             return sub.getSubscriberIdForSubscriber(subId);
-        } catch (RemoteException | NullPointerException e) {
+        } catch (RemoteException e) {
             e.printStackTrace();
+        } catch (NullPointerException ignore) {
         }
         return null;
     }

File: app/src/main/java/io/github/muntashirakon/AppManager/profiles/ProfileApplierActivity.java
Patch:
@@ -142,6 +142,7 @@ private void handleShortcut(@Nullable ProfileApplierInfo info) {
             case ST_SIMPLE:
                 Intent intent = new Intent(this, ProfileApplierService.class);
                 intent.putExtra(ProfileApplierService.EXTRA_PROFILE_ID, info.profileId);
+                intent.putExtra(ProfileApplierService.EXTRA_PROFILE_NAME, info.profile.name);
                 // There must be a state
                 intent.putExtra(ProfileApplierService.EXTRA_PROFILE_STATE, Objects.requireNonNull(state));
                 ContextCompat.startForegroundService(this, intent);
@@ -162,6 +163,7 @@ private void handleShortcut(@Nullable ProfileApplierInfo info) {
                         .setPositiveButton(R.string.ok, (dialog, which, selectedState) -> {
                             Intent aIntent = new Intent(this, ProfileApplierService.class);
                             aIntent.putExtra(ProfileApplierService.EXTRA_PROFILE_ID, info.profileId);
+                            aIntent.putExtra(ProfileApplierService.EXTRA_PROFILE_NAME, info.profile.name);
                             aIntent.putExtra(ProfileApplierService.EXTRA_PROFILE_STATE, selectedState);
                             ContextCompat.startForegroundService(this, aIntent);
                         })

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/AppearancePreferences.java
Patch:
@@ -54,7 +54,6 @@ public void onCreatePreferences(@Nullable Bundle savedInstanceState, @Nullable S
                             mCurrentTheme = selectedTheme;
                             Prefs.Appearance.setNightMode(mCurrentTheme);
                             AppCompatDelegate.setDefaultNightMode(mCurrentTheme);
-                            appTheme.setSummary(themes[THEME_CONST.indexOf(mCurrentTheme)]);
                         }
                     })
                     .setNegativeButton(R.string.cancel, null)

File: app/src/main/java/io/github/muntashirakon/AppManager/profiles/ProfileViewModel.java
Patch:
@@ -164,11 +164,11 @@ public void loadInstalledApps() {
     }
 
     public String getProfileName() {
-        return mProfile.name;
+        return mProfile != null ? mProfile.name : null;
     }
 
     public String getProfileId() {
-        return mProfile.profileId;
+        return mProfile != null ? mProfile.profileId : null;
     }
 
     @AnyThread

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/ApkUtils.java
Patch:
@@ -86,19 +86,19 @@ public static Path getSharableApkFile(@NonNull Context ctx, @NonNull PackageInfo
      * that these are saved at /sdcard/AppManager/apks
      */
     @WorkerThread
-    public static void backupApk(@NonNull Context ctx, @NonNull String packageName, @UserIdInt int userHandle)
+    public static void backupApk(@NonNull Context ctx, @NonNull String packageName, @UserIdInt int userId)
             throws IOException, PackageManager.NameNotFoundException, RemoteException {
         Path backupPath = BackupFiles.getApkBackupDirectory();
         // Fetch package info
         PackageManager pm = ctx.getPackageManager();
         PackageInfo packageInfo = PackageManagerCompat.getPackageInfo(packageName,
                 MATCH_UNINSTALLED_PACKAGES | PackageManager.GET_SHARED_LIBRARY_FILES
-                        | PackageManagerCompat.MATCH_STATIC_SHARED_AND_SDK_LIBRARIES, userHandle);
+                        | PackageManagerCompat.MATCH_STATIC_SHARED_AND_SDK_LIBRARIES, userId);
         ApplicationInfo info = packageInfo.applicationInfo;
         String outputName = Paths.sanitizeFilename(getFormattedApkFilename(ctx, packageInfo, pm), "_");
         if (outputName == null) outputName = packageName;
         Path apkFile;
-        if (isSplitApk(info) || hasObbFiles(packageName, userHandle)) {
+        if (isSplitApk(info) || hasObbFiles(packageName, userId)) {
             // Split apk
             apkFile = backupPath.createNewFile(outputName + EXT_APKS, null);
             SplitApkExporter.saveApks(packageInfo, apkFile);

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/dialog/BackupRestoreDialogViewModel.java
Patch:
@@ -173,10 +173,10 @@ private void processPackagesInternal(@NonNull List<UserPackagePair> userPackageP
             }
             BackupInfo backupInfo = backupInfoMap.get(userPackagePair.getPackageName());
             if (backupInfo != null) {
-                backupInfo.userIds.add(userPackagePair.getUserHandle());
+                backupInfo.userIds.add(userPackagePair.getUserId());
                 continue;
             }
-            backupInfo = new BackupInfo(userPackagePair.getPackageName(), userPackagePair.getUserHandle());
+            backupInfo = new BackupInfo(userPackagePair.getPackageName(), userPackagePair.getUserId());
             backupInfoMap.put(userPackagePair.getPackageName(), backupInfo);
             AppDb appDb = new AppDb();
             List<App> apps = appDb.getAllApplications(userPackagePair.getPackageName());

File: app/src/main/java/io/github/muntashirakon/AppManager/db/utils/AppDb.java
Patch:
@@ -319,21 +319,21 @@ public void updateApplications(@NonNull Context context) {
             // Add new data
             mAppDao.delete(oldApps);
             mAppDao.insert(modifiedApps);
-            if (oldApps.size() > 0) {
+            if (!oldApps.isEmpty()) {
                 // Delete broadcast
                 Intent intent = new Intent(PackageChangeReceiver.ACTION_DB_PACKAGE_REMOVED);
                 intent.setPackage(context.getPackageName());
                 intent.putExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST, getPackageNamesFromApps(oldApps));
                 context.sendBroadcast(intent);
             }
-            if (newApps.size() > 0) {
+            if (!newApps.isEmpty()) {
                 // New apps
                 Intent intent = new Intent(PackageChangeReceiver.ACTION_DB_PACKAGE_ADDED);
                 intent.setPackage(context.getPackageName());
                 intent.putExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST, newApps.toArray(new String[0]));
                 context.sendBroadcast(intent);
             }
-            if (updatedApps.size() > 0) {
+            if (!updatedApps.isEmpty()) {
                 // Altered apps
                 Intent intent = new Intent(PackageChangeReceiver.ACTION_DB_PACKAGE_ALTERED);
                 intent.setPackage(context.getPackageName());

File: app/src/main/java/io/github/muntashirakon/AppManager/main/ApplicationItem.java
Patch:
@@ -124,7 +124,7 @@ public class ApplicationItem extends PackageItemInfo {
     public boolean isSelected = false;
 
     @NonNull
-    public int[] userHandles = EmptyArray.INT;
+    public int[] userIds = EmptyArray.INT;
 
     public ApplicationItem() {
         super();
@@ -133,11 +133,11 @@ public ApplicationItem() {
     @WorkerThread
     @Override
     public Drawable loadIcon(PackageManager pm) {
-        if (userHandles.length > 0) {
+        if (userIds.length > 0) {
             try {
                 ApplicationInfo info = PackageManagerCompat.getApplicationInfo(packageName,
                         MATCH_UNINSTALLED_PACKAGES
-                                | PackageManagerCompat.MATCH_STATIC_SHARED_AND_SDK_LIBRARIES, userHandles[0]);
+                                | PackageManagerCompat.MATCH_STATIC_SHARED_AND_SDK_LIBRARIES, userIds[0]);
                 return info.loadIcon(pm);
             } catch (Exception ignore) {
             }

File: app/src/main/java/io/github/muntashirakon/AppManager/rules/compontents/ExternalComponentsImporter.java
Patch:
@@ -44,8 +44,8 @@ public static void setModeToFilteredAppOps(@NonNull AppOpsManagerCompat appOpsMa
                                                int[] appOps,
                                                @AppOpsManagerCompat.Mode int mode) throws RemoteException {
         Collection<Integer> appOpList;
-        appOpList = PackageUtils.getFilteredAppOps(pair.getPackageName(), pair.getUserHandle(), appOps, mode);
-        try (ComponentsBlocker cb = ComponentsBlocker.getMutableInstance(pair.getPackageName(), pair.getUserHandle())) {
+        appOpList = PackageUtils.getFilteredAppOps(pair.getPackageName(), pair.getUserId(), appOps, mode);
+        try (ComponentsBlocker cb = ComponentsBlocker.getMutableInstance(pair.getPackageName(), pair.getUserId())) {
             for (int appOp : appOpList) {
                 appOpsManager.setMode(appOp, PackageUtils.getAppUid(pair), pair.getPackageName(), mode);
                 cb.setAppOp(appOp, mode);

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/appearance/AppearanceUtils.java
Patch:
@@ -65,11 +65,11 @@ public static void applyOnlyLocale(@NonNull Context context) {
      * Return a {@link ContextThemeWrapper} with the default locale, layout direction, theme and night mode.
      */
     @NonNull
-    public static Context getThemedContext(@NonNull Context context) {
+    public static Context getThemedContext(@NonNull Context context, boolean transparent) {
         AppearanceOptions options = new AppearanceOptions();
         options.locale = LangUtils.getFromPreference(context);
         options.layoutDirection = Prefs.Appearance.getLayoutDirection();
-        options.theme = Prefs.Appearance.getAppTheme();
+        options.theme = transparent ? Prefs.Appearance.getTransparentAppTheme() : Prefs.Appearance.getAppTheme();
         options.nightMode = Prefs.Appearance.getNightMode();
         ContextThemeWrapper newCtx = new ContextThemeWrapper(context, options.theme);
         newCtx.applyOverrideConfiguration(createOverrideConfiguration(context, options));

File: app/src/main/java/io/github/muntashirakon/AppManager/fm/FmAdapter.java
Patch:
@@ -86,7 +86,7 @@ public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
         holder.title.setText(item.getName());
         // Load attributes
         cacheAndLoadAttributes(holder, item);
-        if (item.type == FileType.DIRECTORY) {
+        if (item.isDirectory) {
             holder.itemView.setOnClickListener(v -> {
                 if (isInSelectionMode()) {
                     toggleSelection(position);
@@ -168,7 +168,7 @@ private void loadAttributes(@NonNull ViewHolder holder, @NonNull FmItem item) {
         // TODO: 24/5/23 Set sub-icon if needed
         // Attrs
         String modificationDate = DateUtils.formatDateTime(mFmActivity, item.getLastModified());
-        if (item.type == FileType.DIRECTORY) {
+        if (item.isDirectory) {
             holder.subtitle.setText(String.format(Locale.getDefault(), "%d • %s", item.getChildCount(),
                     modificationDate));
         } else {

File: app/src/main/java/io/github/muntashirakon/AppManager/self/imagecache/ImageLoader.java
Patch:
@@ -28,6 +28,7 @@
 import io.github.muntashirakon.AppManager.utils.UIUtils;
 
 public class ImageLoader implements Closeable {
+    @AnyThread
     public static void displayImage(@Nullable PackageItemInfo info, @Nullable ImageView imageView) {
         WeakReference<ImageView> ivRef = new WeakReference<>(imageView);
         ThreadUtils.postOnBackgroundThread(() -> {

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppDetailsPermissionsFragment.java
Patch:
@@ -736,7 +736,9 @@ private void getPermissionsView(@NonNull Context context, @NonNull ViewHolder ho
                         permissionInfo.name.replaceFirst(mPackageName, "") : permissionInfo.name);
             }
             // Icon
-            ImageLoader.getInstance().displayImage(mPackageName + "_" + permissionInfo.name, permissionInfo, holder.imageView);
+            String tag = mPackageName + "_" + permissionInfo.name;
+            holder.imageView.setTag(tag);
+            ImageLoader.getInstance().displayImage(tag, permissionInfo, holder.imageView);
             // Description
             CharSequence description = permissionInfo.loadDescription(packageManager);
             if (description != null) {

File: app/src/main/java/io/github/muntashirakon/AppManager/details/IconPickerDialogFragment.java
Patch:
@@ -118,7 +118,7 @@ public View getView(int position, View convertView, ViewGroup parent) {
                 view = (ImageView) convertView;
             }
             IconItemInfo info = mIcons[position];
-
+            view.setTag(info.packageName);
             ImageLoader.getInstance().displayImage(info.packageName, info, view);
             return convertView;
         }

File: app/src/main/java/io/github/muntashirakon/AppManager/fm/OpenWithDialogFragment.java
Patch:
@@ -340,8 +340,9 @@ public void onBindViewHolder(@NonNull MatchingActivitiesRecyclerViewAdapter.View
             String activityName = resolvedInfo.name;
             String summary = resolvedInfo.appLabel + "\n" + resolvedInfo.shortName;
             holder.summary.setText(summary);
-            mImageLoader.displayImage(resolvedInfo.packageName + "_" + resolvedInfo.label, holder.icon,
-                    new ResolveInfoImageFetcher(resolvedInfo.resolveInfo));
+            String tag = resolvedInfo.packageName + "_" + resolvedInfo.label;
+            holder.icon.setTag(tag);
+            mImageLoader.displayImage(tag, holder.icon, new ResolveInfoImageFetcher(resolvedInfo.resolveInfo));
             holder.itemView.setOnClickListener(v -> {
                 Intent intent = new Intent(mIntent);
                 intent.setClassName(resolvedInfo.packageName, activityName);

File: app/src/main/java/io/github/muntashirakon/AppManager/intercept/ActivityInterceptor.java
Patch:
@@ -1276,7 +1276,9 @@ public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
             String name = info.packageName + "\n" + activityName;
             holder.subtitle.setText(name);
             holder.subtitle.setTextIsSelectable(true);
-            ImageLoader.getInstance().displayImage(info.packageName + "_" + activityName, info, holder.icon);
+            String tag = info.packageName + "_" + activityName;
+            holder.icon.setTag(tag);
+            ImageLoader.getInstance().displayImage(tag, info, holder.icon);
             holder.actionIcon.setOnClickListener(v -> {
                 Intent intent = new Intent(mActivity.mMutableIntent);
                 intent.setClassName(info.packageName, activityName);

File: app/src/main/java/io/github/muntashirakon/AppManager/main/MainRecyclerAdapter.java
Patch:
@@ -285,6 +285,7 @@ public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
             holder.sha.setVisibility(View.GONE);
         }
         // Load app icon
+        holder.icon.setTag(item.packageName);
         ImageLoader.getInstance().displayImage(item.packageName, item, holder.icon);
         // Set app label
         if (!TextUtils.isEmpty(mSearchQuery) && item.label.toLowerCase(Locale.ROOT).contains(mSearchQuery)) {

File: app/src/main/java/io/github/muntashirakon/AppManager/profiles/AppsFragment.java
Patch:
@@ -116,6 +116,7 @@ public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
                 info = pm.getApplicationInfo(packageName, 0);
             } catch (PackageManager.NameNotFoundException ignore) {
             }
+            holder.icon.setTag(packageName);
             ImageLoader.getInstance().displayImage(packageName, info, holder.icon);
             String label;
             if (info != null) {

File: app/src/main/java/io/github/muntashirakon/AppManager/runningapps/RunningAppsAdapter.java
Patch:
@@ -188,6 +188,7 @@ public void onBindViewHolder(@NonNull BodyViewHolder holder, int position) {
         } else applicationInfo = null;
         String processName = processItem.name;
         // Load icon
+        holder.icon.setTag(processName);
         ImageLoader.getInstance().displayImage(processName, applicationInfo, holder.icon);
         // Set process name
         holder.processName.setText(UIUtils.getHighlightedText(processName, mModel.getQuery(), mQueryStringHighlightColor));

File: app/src/main/java/io/github/muntashirakon/AppManager/sysconfig/SysConfigActivity.java
Patch:
@@ -139,10 +139,12 @@ public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
                     holder.packageName.setVisibility(View.VISIBLE);
                     holder.packageName.setText(info.name);
                     // Load icon
+                    holder.icon.setTag(applicationInfo.packageName);
                     ImageLoader.getInstance().displayImage(applicationInfo.packageName, applicationInfo, holder.icon);
                 } catch (PackageManager.NameNotFoundException e) {
                     holder.title.setText(info.name);
                     holder.packageName.setVisibility(View.GONE);
+                    holder.icon.setTag(info.name);
                     ImageLoader.getInstance().displayImage(info.name, null, holder.icon);
                 }
                 holder.icon.setOnClickListener(v -> {

File: app/src/main/java/io/github/muntashirakon/AppManager/usage/AppUsageAdapter.java
Patch:
@@ -184,6 +184,7 @@ public void onBindViewHolder(@NonNull ListItemViewHolder holder, int position) {
         // Set label (or package name on failure)
         holder.appLabel.setText(usageInfo.appLabel);
         // Set icon
+        holder.appIcon.setTag(usageInfo.packageName);
         ImageLoader.getInstance().displayImage(usageInfo.packageName, usageInfo.applicationInfo, holder.appIcon);
         // Set user ID
         if (mActivity.viewModel.hasMultipleUsers()) {

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/installer/PackageInstallerCompat.java
Patch:
@@ -592,8 +592,9 @@ public boolean install(@NonNull ApkFile apkFile, @NonNull List<String> selectedS
             Log.d(TAG, "Install: selected entries: %s", selectedSplitIds);
             // Write apk files
             for (ApkFile.Entry entry : selectedEntries) {
+                long entrySize = entry.getFileSize(options.isSignApkFiles());
                 try (InputStream apkInputStream = entry.getInputStream(options.isSignApkFiles());
-                     OutputStream apkOutputStream = mSession.openWrite(entry.getFileName(), 0, entry.getFileSize())) {
+                     OutputStream apkOutputStream = mSession.openWrite(entry.getFileName(), 0, entrySize)) {
                     IoUtils.copy(apkInputStream, apkOutputStream, totalSize, progressHandler);
                     mSession.fsync(apkOutputStream);
                     Log.d(TAG, "Install: copied entry %s", entry.name);

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/splitapk/SplitApkChooser.java
Patch:
@@ -22,6 +22,7 @@
 
 import aosp.libcore.util.EmptyArray;
 import io.github.muntashirakon.AppManager.apk.ApkFile;
+import io.github.muntashirakon.AppManager.apk.ApkSource;
 import io.github.muntashirakon.AppManager.apk.installer.PackageInstallerViewModel;
 import io.github.muntashirakon.AppManager.utils.ArrayUtils;
 import io.github.muntashirakon.dialog.SearchableMultiChoiceDialogBuilder;
@@ -107,7 +108,7 @@ public int[] getInitialSelections() {
             // See if the app has been installed
             if (mViewModel.getInstalledPackageInfo() != null) {
                 ApplicationInfo info = mViewModel.getInstalledPackageInfo().applicationInfo;
-                try (ApkFile installedApkFile = new ApkFile.ApkSource(info).resolve()) {
+                try (ApkFile installedApkFile = ApkSource.getApkSource(info).resolve()) {
                     for (ApkFile.Entry apkEntry : installedApkFile.getEntries()) {
                         splitNames.add(apkEntry.name);
                     }

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/MetadataManager.java
Patch:
@@ -34,6 +34,7 @@
 import io.github.muntashirakon.AppManager.BuildConfig;
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.apk.ApkFile;
+import io.github.muntashirakon.AppManager.apk.ApkSource;
 import io.github.muntashirakon.AppManager.compat.PackageManagerCompat;
 import io.github.muntashirakon.AppManager.misc.VMRuntime;
 import io.github.muntashirakon.AppManager.rules.compontents.ComponentsBlocker;
@@ -345,7 +346,7 @@ public Metadata setupMetadata(@NonNull PackageInfo packageInfo,
                 requestedFlags.backupExternalData(), requestedFlags.backupMediaObb());
         mMetadata.isSystem = (applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0;
         mMetadata.isSplitApk = false;
-        try (ApkFile apkFile = new ApkFile.ApkSource(applicationInfo).resolve()) {
+        try (ApkFile apkFile = ApkSource.getApkSource(applicationInfo).resolve()) {
             if (apkFile.isSplit()) {
                 List<ApkFile.Entry> apkEntries = apkFile.getEntries();
                 int splitCount = apkEntries.size() - 1;

File: app/src/main/java/io/github/muntashirakon/AppManager/details/info/AppInfoFragment.java
Patch:
@@ -91,6 +91,7 @@
 import io.github.muntashirakon.AppManager.accessibility.AccessibilityMultiplexer;
 import io.github.muntashirakon.AppManager.accessibility.NoRootAccessibilityService;
 import io.github.muntashirakon.AppManager.apk.ApkFile;
+import io.github.muntashirakon.AppManager.apk.ApkSource;
 import io.github.muntashirakon.AppManager.apk.ApkUtils;
 import io.github.muntashirakon.AppManager.apk.behavior.DexOptDialog;
 import io.github.muntashirakon.AppManager.apk.behavior.FreezeUnfreezeShortcutInfo;
@@ -580,7 +581,7 @@ private void runWithTermux(String[] command) {
     }
 
     private void install() {
-        ApkFile.ApkSource apkSource = mMainModel != null ? mMainModel.getApkSource() : null;
+        ApkSource apkSource = mMainModel != null ? mMainModel.getApkSource() : null;
         if (apkSource == null) return;
         try {
             startActivity(PackageInstallerActivity.getLaunchableInstance(requireContext(), apkSource));

File: app/src/main/java/io/github/muntashirakon/AppManager/details/manifest/ManifestViewerActivity.java
Patch:
@@ -18,6 +18,7 @@
 
 import io.github.muntashirakon.AppManager.BaseActivity;
 import io.github.muntashirakon.AppManager.R;
+import io.github.muntashirakon.AppManager.apk.ApkSource;
 import io.github.muntashirakon.AppManager.editor.CodeEditorFragment;
 import io.github.muntashirakon.AppManager.intercept.IntentCompat;
 
@@ -41,6 +42,7 @@ protected void onAuthenticated(Bundle savedInstanceState) {
             showErrorAndFinish();
             return;
         }
+        final ApkSource apkSource = packageUri != null ? ApkSource.getApkSource(packageUri, intent.getType()) : null;
         mModel.getManifestLiveData().observe(this, manifest -> {
             CodeEditorFragment.Options options = new CodeEditorFragment.Options.Builder()
                     .setTitle(getString(R.string.manifest_viewer))
@@ -59,7 +61,7 @@ protected void onAuthenticated(Bundle savedInstanceState) {
                     .replace(R.id.container, fragment)
                     .commit();
         });
-        mModel.loadApkFile(packageUri, intent.getType(), packageName);
+        mModel.loadApkFile(apkSource, packageName);
     }
 
     @UiThread

File: app/src/main/java/io/github/muntashirakon/AppManager/self/filecache/FileCache.java
Patch:
@@ -78,7 +78,7 @@ public File getCachedFile(@NonNull Path source) throws IOException {
             throw new FileNotFoundException("Path " + source + " does not exist.");
         }
         File tempFile = mFileCacheMap.get(source);
-        if (tempFile == null) {
+        if (tempFile == null || !tempFile.exists()) {
             String extension = source.getExtension();
             tempFile = File.createTempFile(source.getName() + "_", "." + (extension != null ? extension : "tmp"), mCacheDir);
             mFileCacheMap.put(source, tempFile);

File: libcore/io/src/main/java/aosp/android/content/pm/ParceledListSlice.java
Patch:
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: Apache-2.0 AND GPL-3.0-or-later
+// SPDX-License-Identifier: GPL-3.0-or-later
 
 package aosp.android.content.pm;
 
@@ -10,8 +10,6 @@
 import java.util.Collections;
 import java.util.List;
 
-import io.github.muntashirakon.util.ParcelUtils;
-
 /**
  * Transfer a large list of Parcelable objects across an IPC.  Splits into
  * multiple transactions if needed.

File: libcore/io/src/main/java/aosp/android/content/pm/StringParceledListSlice.java
Patch:
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: Apache-2.0 AND GPL-3.0-or-later
+// SPDX-License-Identifier: GPL-3.0-or-later
 
 package aosp.android.content.pm;
 

File: app/src/main/java/io/github/muntashirakon/AppManager/ipc/ps/ProcessEntry.java
Patch:
@@ -6,6 +6,7 @@
 import android.os.Parcelable;
 
 import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 import androidx.core.os.ParcelCompat;
 
 import java.util.Objects;
@@ -27,6 +28,7 @@ public class ProcessEntry implements Parcelable {
     public int cpu;
     public int threadCount;
     public int tty;
+    @Nullable
     public String seLinuxPolicy;
     public String name;
     public ProcessUsers users;

File: app/src/main/java/io/github/muntashirakon/AppManager/runningapps/ProcessItem.java
Patch:
@@ -6,6 +6,7 @@
 import android.os.Parcelable;
 
 import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 import androidx.core.os.ParcelCompat;
 
 import java.util.Objects;
@@ -19,6 +20,7 @@ public class ProcessItem implements Parcelable {
     public final long rss;
     public final int uid;
     public final String user;
+    @Nullable
     public final String context;
 
     public String state;

File: app/src/main/java/io/github/muntashirakon/AppManager/runningapps/ProcessParser.java
Patch:
@@ -63,7 +63,9 @@ List<ProcessItem> parse() {
                 processEntries = ps.getProcesses();
             }
             for (ProcessEntry processEntry : processEntries) {
-                if (processEntry.seLinuxPolicy.contains(":kernel:")) continue;
+                if (processEntry.seLinuxPolicy != null && processEntry.seLinuxPolicy.contains(":kernel:")) {
+                    continue;
+                }
                 try {
                     processItems.addAll(parseProcess(processEntry));
                 } catch (Exception ignore) {

File: app/src/main/java/io/github/muntashirakon/io/Paths.java
Patch:
@@ -113,7 +113,7 @@ public static Path getUnprivileged(@NonNull String pathName) {
 
     @NonNull
     public static Path get(@NonNull String pathName) {
-        return new Path(ContextUtils.getContext(), pathName);
+        return new Path(ContextUtils.getContext(), Objects.requireNonNull(pathName));
     }
 
     @NonNull

File: app/src/main/java/io/github/muntashirakon/io/SplitInputStream.java
Patch:
@@ -171,7 +171,7 @@ private synchronized int read0(byte[] b, int off, int len) throws IOException {
                     if (mMarkBuf != null) {
                         // Accumulate data in markBuf
                         System.arraycopy(mBuf, mMarkPos, mMarkBuf, mMarkBufCount, (int) size);
-                        mMarkBufCount += size;
+                        mMarkBufCount += (int) size;
                         // Set markPos to 0 as buffer will refill
                         mMarkPos = 0;
                     }

File: app/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
Patch:
@@ -416,7 +416,7 @@ public void closeArchiveEntry() throws IOException {
                 + "' before the '" + currSize
                 + "' bytes specified in the header were written");
         }
-        recordsWritten += (currSize / RECORD_SIZE);
+        recordsWritten += (int) (currSize / RECORD_SIZE);
         if (0 != currSize % RECORD_SIZE) {
             recordsWritten++;
         }

File: libcore/ui/src/main/java/io/github/muntashirakon/widget/FlowLayout.java
Patch:
@@ -182,7 +182,7 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                 maxChildHeightInRow = childHeight;
             } else {
                 childNumInRow++;
-                rowWidth += childWidth + tmpSpacing;
+                rowWidth += childWidth + (int) tmpSpacing;
                 rowTotalChildWidth += childWidth;
                 maxChildHeightInRow = Math.max(maxChildHeightInRow, childHeight);
             }
@@ -341,7 +341,7 @@ protected void onLayout(boolean changed, int l, int t, int r, int b) {
                 int consumedWidth = childWidth + (int) spacing + marginStart + marginEnd;
                 x = x + (isRtl ? -consumedWidth : consumedWidth);
             }
-            y += rowHeight + mAdjustedRowSpacing;
+            y += rowHeight + (int) mAdjustedRowSpacing;
         }
 
         for (int i = childIdx; i < getChildCount(); i++) {

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/convert/OABConverter.java
Patch:
@@ -37,6 +37,7 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
+import java.util.regex.Pattern;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipInputStream;
 
@@ -377,7 +378,7 @@ private void backupData() throws BackupException {
                                 IoUtils.copy(zis, fos, -1, null);
                             }
                         }
-                        String fileName = zipEntry.getName().replaceFirst(mPackageName + "/", "");
+                        String fileName = zipEntry.getName().replaceFirst(Pattern.quote(mPackageName + "/"), "");
                         if (fileName.equals("")) continue;
                         // New tar entry
                         TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(fileName);

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/convert/SBConverter.java
Patch:
@@ -44,6 +44,7 @@
 import java.util.Arrays;
 import java.util.List;
 import java.util.Objects;
+import java.util.regex.Pattern;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipInputStream;
 
@@ -271,7 +272,7 @@ private void backupData() throws BackupException {
                                 IoUtils.copy(zis, fos, -1, null);
                             }
                         }
-                        String fileName = zipEntry.getName().replaceFirst(mPackageName + "/", "");
+                        String fileName = zipEntry.getName().replaceFirst(Pattern.quote(mPackageName + "/"), "");
                         if (fileName.equals("")) continue;
                         // New tar entry
                         TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(fileName);

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/convert/TBConverter.java
Patch:
@@ -43,6 +43,7 @@
 import java.util.List;
 import java.util.Objects;
 import java.util.Properties;
+import java.util.regex.Pattern;
 
 import io.github.muntashirakon.AppManager.backup.BackupException;
 import io.github.muntashirakon.AppManager.backup.BackupFiles;
@@ -336,7 +337,7 @@ private void backupData() throws BackupException {
                 String fileName = inTarEntry.getName();
                 boolean isExternal = fileName.startsWith(EXTERNAL_PREFIX);
                 // Get new file name
-                fileName = fileName.replaceFirst((isExternal ? EXTERNAL_PREFIX : INTERNAL_PREFIX) + mPackageName + "/\\./", "");
+                fileName = fileName.replaceFirst((isExternal ? EXTERNAL_PREFIX : INTERNAL_PREFIX) + Pattern.quote(mPackageName + "/") + "\\./", "");
                 if (fileName.equals("")) continue;
                 // New tar entry
                 TarArchiveEntry outTarEntry = new TarArchiveEntry(fileName);

File: app/src/main/java/io/github/muntashirakon/AppManager/fm/OpenWithDialogFragment.java
Patch:
@@ -224,9 +224,7 @@ public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceStat
             mViewModel.getMatchingActivitiesLiveData().observe(getViewLifecycleOwner(), matchingActivities -> {
                 mAdapter.setDefaultList(matchingActivities);
                 // Don't display search bar if items are less than 6
-                if (matchingActivities.size() < 6) {
-                    mSearchView.setVisibility(View.GONE);
-                }
+                mSearchView.setVisibility(matchingActivities.size() < 6 ? View.GONE : View.VISIBLE);
             });
             mViewModel.getPathContentInfoLiveData().observe(getViewLifecycleOwner(), pathContentInfo -> {
                 if (mAdapter != null) {

File: app/src/main/java/io/github/muntashirakon/AppManager/fm/FmViewModel.java
Patch:
@@ -300,7 +300,7 @@ private void loadFiles(@NonNull Uri uri, @Nullable String scrollToFilename) {
                 if (path.exists()) {
                     e = new FileNotFoundException(getApplication().getString(R.string.path_not_a_folder, path.getName()));
                 } else {
-                    e = new FileNotFoundException(getApplication().getString(R.string.path_does_not_exist, path.getName()));
+                    e = new IOException(getApplication().getString(R.string.path_does_not_exist, path.getName()));
                 }
                 handleError(e, mCurrentUri);
                 return;

File: app/src/main/java/io/github/muntashirakon/AppManager/BaseActivity.java
Patch:
@@ -133,7 +133,7 @@ protected final void onCreate(@Nullable Bundle savedInstanceState) {
                     Log.d(TAG, "Authentication completed.");
                     mViewModel.setAuthenticating(false);
                     if (mAlertDialog != null) mAlertDialog.dismiss();
-                    Ops.setAuthenticated(true);
+                    Ops.setAuthenticated(this, true);
                     onAuthenticated(savedInstanceState);
                     initPermissionChecks();
                     InternalCacheCleanerService.scheduleAlarm(getApplicationContext());
@@ -215,7 +215,7 @@ private void authenticate() {
     }
 
     private void ensureSecurityAndModeOfOp() {
-        if (!Prefs.Security.isScreenLockEnabled()) {
+        if (!Prefs.Privacy.isScreenLockEnabled()) {
             // No security enabled
             handleMigrationAndModeOfOp();
             return;

File: app/src/main/java/io/github/muntashirakon/AppManager/main/SplashActivity.java
Patch:
@@ -113,7 +113,7 @@ protected final void onCreate(@Nullable Bundle savedInstanceState) {
                 case Ops.STATUS_FAILURE:
                     Log.d(TAG, "Authentication completed.");
                     mViewModel.setAuthenticating(false);
-                    Ops.setAuthenticated(true);
+                    Ops.setAuthenticated(this, true);
                     startActivity(new Intent(this, MainActivity.class));
                     finish();
             }
@@ -148,7 +148,7 @@ private void authenticate() {
     }
 
     private void ensureSecurityAndModeOfOp() {
-        if (!Prefs.Security.isScreenLockEnabled()) {
+        if (!Prefs.Privacy.isScreenLockEnabled()) {
             // No security enabled
             handleMigrationAndModeOfOp();
             return;

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/DigestUtils.java
Patch:
@@ -152,7 +152,7 @@ public static long calculateCrc32(InputStream stream) throws IOException {
 
     @WorkerThread
     @NonNull
-    public static Pair<String, String>[] getDigests(Path file) throws IOException {
+    public static Pair<String, String>[] getDigests(@NonNull Path file) throws IOException {
         if (!file.isFile()) {
             throw new IOException(file + " is not a file.");
         }

File: app/src/main/java/io/github/muntashirakon/AppManager/misc/XposedModuleInfo.java
Patch:
@@ -39,7 +39,7 @@ public class XposedModuleInfo implements LocalizedString {
 
     @Nullable
     public static Boolean isXposedModule(@NonNull ApplicationInfo app, @NonNull ZipFile zipFile) {
-        if (app.metaData.containsKey("xposedminversion")) {
+        if (app.metaData != null && app.metaData.containsKey("xposedminversion")) {
             return null;
         }
         return zipFile.getEntry("META-INF/xposed/module.prop") != null;

File: libcore/ui/src/main/java/io/github/muntashirakon/widget/MaterialSpinner.java
Patch:
@@ -27,11 +27,11 @@ public MaterialSpinner(@NonNull Context context) {
         this(context, null);
     }
 
-    public MaterialSpinner(@NonNull Context context, @Nullable @org.jetbrains.annotations.Nullable AttributeSet attrs) {
+    public MaterialSpinner(@NonNull Context context, @Nullable AttributeSet attrs) {
         this(context, attrs, R.attr.materialSpinnerStyle);
     }
 
-    public MaterialSpinner(@NonNull Context context, @Nullable @org.jetbrains.annotations.Nullable AttributeSet attrs, int defStyleAttr) {
+    public MaterialSpinner(@NonNull Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
         super(context, attrs, defStyleAttr);
         context = getContext();
         mAutoCompleteTextView = new MaterialAutoCompleteTextView(context);

File: app/src/main/java/io/github/muntashirakon/AppManager/fm/FmUtils.java
Patch:
@@ -21,7 +21,7 @@
 import io.github.muntashirakon.io.Path;
 import io.github.muntashirakon.io.fs.VirtualFileSystem;
 
-final class FmUtils {
+public final class FmUtils {
     @NonNull
     public static String getDisplayablePath(@NonNull Path path) {
         return getDisplayablePath(path.getUri());

File: app/src/main/java/io/github/muntashirakon/AppManager/editor/CodeEditorFragment.java
Patch:
@@ -19,6 +19,7 @@
 import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
+import android.widget.HorizontalScrollView;
 import android.widget.TextView;
 
 import androidx.activity.OnBackPressedCallback;
@@ -313,7 +314,8 @@ public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceStat
                 new String[]{"⇥", "{", "}", "(", ")", ",", ".", ";", "\"", "?", "+", "-", "*", "/"},
                 new String[]{"\t", "{", "}", "(", ")", ",", ".", ";", "\"", "?", "+", "-", "*", "/"});
         mSymbolInputView.setTextColor(MaterialColors.getColor(mSymbolInputView, com.google.android.material.R.attr.colorOnSurface));
-        mSymbolInputView.setBackgroundColor(SurfaceColors.SURFACE_2.getColor(requireContext()));
+        mSymbolInputView.setBackground(null);
+        ((HorizontalScrollView) mSymbolInputView.getParent()).setBackgroundColor(SurfaceColors.SURFACE_2.getColor(requireContext()));
         mSymbolInputView.bindEditor(mEditor);
         if (mOptions.readOnly) {
             mSymbolInputView.setVisibility(View.GONE);

File: app/src/main/java/io/github/muntashirakon/AppManager/debloat/DebloaterActivity.java
Patch:
@@ -126,8 +126,9 @@ public boolean onOptionsItemSelected(@NonNull MenuItem item) {
     }
 
     @Override
-    public void onSelectionChange(int selectionCount) {
+    public boolean onSelectionChange(int selectionCount) {
         // TODO: 7/8/22
+        return false;
     }
 
     @Override

File: app/src/main/java/io/github/muntashirakon/AppManager/fm/FmFragment.java
Patch:
@@ -873,7 +873,7 @@ public BatchOpsHandler(@NonNull MultiSelectionView multiSelectionView) {
         }
 
         @Override
-        public void onSelectionChange(int selectionCount) {
+        public boolean onSelectionChange(int selectionCount) {
             boolean nonZeroSelection = selectionCount > 0;
             boolean canRead = mFolderShortInfo != null && mFolderShortInfo.canRead;
             boolean canWrite = mFolderShortInfo != null && mFolderShortInfo.canWrite;
@@ -883,6 +883,7 @@ public void onSelectionChange(int selectionCount) {
             mCutMenu.setEnabled(nonZeroSelection && canWrite);
             mCopyMenu.setEnabled(nonZeroSelection && canRead);
             mCopyPathsMenu.setEnabled(nonZeroSelection);
+            return false;
         }
     }
 }

File: app/src/main/java/io/github/muntashirakon/AppManager/logcat/LiveLogViewerFragment.java
Patch:
@@ -41,6 +41,7 @@ public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceStat
             } else if (selectionCount == 0) {
                 mViewModel.resumeLogcat();
             }
+            return false;
         });
         mViewModel.startLogcat(new WeakReference<>(this));
     }

File: app/src/main/java/io/github/muntashirakon/AppManager/main/MainActivity.java
Patch:
@@ -499,7 +499,7 @@ protected void onResume() {
         if (viewModel != null) viewModel.onResume();
         if (mAdapter != null && mBatchOpsHandler != null && mAdapter.isInSelectionMode()) {
             mBatchOpsHandler.updateConstraints();
-            mBatchOpsHandler.onSelectionChange(0); // count is irrelevant
+            mMultiSelectionView.updateCounter(false);
         }
         registerReceiver(mBatchOpsBroadCastReceiver, new IntentFilter(BatchOpsService.ACTION_BATCH_OPS_COMPLETED));
     }

File: app/src/main/java/io/github/muntashirakon/AppManager/main/MainBatchOpsHandler.java
Patch:
@@ -66,7 +66,7 @@ public void updateConstraints() {
     }
 
     @Override
-    public void onSelectionChange(int selectionCount) {
+    public boolean onSelectionChange(int selectionCount) {
         Collection<ApplicationItem> selectedItems = mViewModel.getSelectedApplicationItems();
         boolean nonZeroSelection = selectedItems.size() > 0;
         // It was ensured that the algorithm is greedy
@@ -108,5 +108,6 @@ public void onSelectionChange(int selectionCount) {
         mPreventBackgroundMenu.setVisible(mCanModifyAppOpMode && Build.VERSION.SDK_INT >= Build.VERSION_CODES.N);
         mNetPolicyMenu.setVisible(mCanModifyNetPolicy);
         mBlockUnblockTrackersMenu.setVisible(mCanModifyComponentState);
+        return true;
     }
 }

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/InstallerPreferences.java
Patch:
@@ -64,9 +64,6 @@ public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {
         mModel = new ViewModelProvider(requireActivity()).get(MainPreferencesViewModel.class);
         mActivity = (SettingsActivity) requireActivity();
         mPm = mActivity.getPackageManager();
-        // Display options in installer
-        SwitchPreferenceCompat usersInInstallerPref = Objects.requireNonNull(findPreference("installer_display_users"));
-        usersInInstallerPref.setChecked(Prefs.Installer.displayOptions());
         // Set installation locations
         Preference installLocationPref = Objects.requireNonNull(findPreference("installer_install_location"));
         installLocationPref.setSummary(INSTALL_LOCATION_NAMES[Prefs.Installer.getInstallLocation()]);

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/AppPref.java
Patch:
@@ -91,7 +91,6 @@ public enum PrefKey {
         PREF_INSTALLER_BLOCK_TRACKERS_BOOL,
         PREF_INSTALLER_ALWAYS_ON_BACKGROUND_BOOL,
         PREF_INSTALLER_DISPLAY_CHANGES_BOOL,
-        PREF_INSTALLER_DISPLAY_USERS_BOOL,
         PREF_INSTALLER_FORCE_DEX_OPT_BOOL,
         PREF_INSTALLER_INSTALL_LOCATION_INT,
         PREF_INSTALLER_INSTALLER_APP_STR,
@@ -369,7 +368,6 @@ public Object getDefaultValue(@NonNull PrefKey key) {
             case PREF_GLOBAL_BLOCKING_ENABLED_BOOL:
             case PREF_INSTALLER_ALWAYS_ON_BACKGROUND_BOOL:
             case PREF_INSTALLER_BLOCK_TRACKERS_BOOL:
-            case PREF_INSTALLER_DISPLAY_USERS_BOOL:
             case PREF_INSTALLER_FORCE_DEX_OPT_BOOL:
             case PREF_INSTALLER_SIGN_APK_BOOL:
             case PREF_BACKUP_ANDROID_KEYSTORE_BOOL:

File: app/src/main/java/io/github/muntashirakon/AppManager/fm/OpenWithDialogFragment.java
Patch:
@@ -147,7 +147,7 @@ public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {
         mAdapter.setIntent(getIntent(mPath, mCustomType));
         mDialogView = View.inflate(requireActivity(), R.layout.dialog_open_with, null);
         mSearchView = mDialogView.findViewById(io.github.muntashirakon.ui.R.id.action_search);
-        mSearchView.setOnQueryTextListener(new androidx.appcompat.widget.SearchView.OnQueryTextListener() {
+        mSearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
             @Override
             public boolean onQueryTextSubmit(String query) {
                 return false;

File: app/src/main/java/io/github/muntashirakon/AppManager/logcat/LogViewerActivity.java
Patch:
@@ -28,7 +28,6 @@
 import androidx.annotation.WorkerThread;
 import androidx.appcompat.app.ActionBar;
 import androidx.appcompat.app.AlertDialog;
-import androidx.appcompat.widget.SearchView;
 import androidx.core.content.ContextCompat;
 import androidx.cursoradapter.widget.CursorAdapter;
 import androidx.cursoradapter.widget.SimpleCursorAdapter;
@@ -72,6 +71,7 @@
 import io.github.muntashirakon.io.Path;
 import io.github.muntashirakon.io.Paths;
 import io.github.muntashirakon.util.UiUtils;
+import io.github.muntashirakon.widget.SearchView;
 
 // Copyright 2012 Nolan Lawson
 // Copyright 2021 Muntashir Al-Islam

File: libcore/ui/src/main/java/io/github/muntashirakon/dialog/SearchableItemsDialogBuilder.java
Patch:
@@ -63,7 +63,7 @@ public SearchableItemsDialogBuilder(@NonNull Context context, @NonNull List<T> i
         recyclerView.setHasFixedSize(true);
         recyclerView.setLayoutManager(new LinearLayoutManager(context, LinearLayoutManager.VERTICAL, false));
         mSearchView = view.findViewById(R.id.action_search);
-        mSearchView.setOnQueryTextListener(new androidx.appcompat.widget.SearchView.OnQueryTextListener() {
+        mSearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
             @Override
             public boolean onQueryTextSubmit(String query) {
                 return false;

File: libcore/ui/src/main/java/io/github/muntashirakon/dialog/SearchableMultiChoiceDialogBuilder.java
Patch:
@@ -78,7 +78,7 @@ public SearchableMultiChoiceDialogBuilder(@NonNull Context context, @NonNull Lis
         recyclerView.setLayoutManager(new LinearLayoutManager(context, LinearLayoutManager.VERTICAL, false));
         mSearchView = mView.findViewById(R.id.action_search);
         mSelectAll = mView.findViewById(android.R.id.checkbox);
-        mSearchView.setOnQueryTextListener(new androidx.appcompat.widget.SearchView.OnQueryTextListener() {
+        mSearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
             @Override
             public boolean onQueryTextSubmit(String query) {
                 return false;

File: libcore/ui/src/main/java/io/github/muntashirakon/dialog/SearchableSingleChoiceDialogBuilder.java
Patch:
@@ -79,7 +79,7 @@ public SearchableSingleChoiceDialogBuilder(@NonNull Context context, @NonNull Li
         mRecyclerView.setLayoutManager(new LinearLayoutManager(context, LinearLayoutManager.VERTICAL, false));
         mViewContainer = view.findViewById(R.id.container);
         mSearchView = view.findViewById(R.id.action_search);
-        mSearchView.setOnQueryTextListener(new androidx.appcompat.widget.SearchView.OnQueryTextListener() {
+        mSearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
             @Override
             public boolean onQueryTextSubmit(String query) {
                 return false;

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/behavior/FreezeUnfreezeService.java
Patch:
@@ -98,6 +98,7 @@ public int onStartCommand(@Nullable Intent intent, int flags, int startId) {
                 .setAuthenticationRequired(true)
                 .build();
         NotificationCompat.Builder builder = new NotificationCompat.Builder(this, CHANNEL_ID)
+                .setLocalOnly(true)
                 .setOngoing(true)
                 .setContentTitle(null)
                 .setContentText(getString(R.string.waiting_for_the_phone_to_be_locked))

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/AppPref.java
Patch:
@@ -124,6 +124,7 @@ public enum PrefKey {
 
         PREF_SAVED_APK_FORMAT_STR,
         PREF_SELECTED_USERS_STR,
+        PREF_SEND_NOTIFICATIONS_TO_CONNECTED_DEVICES_BOOL,
         PREF_SIGNATURE_SCHEMES_INT,
         PREF_SHOW_DISCLAIMER_BOOL,
 
@@ -386,6 +387,7 @@ public Object getDefaultValue(@NonNull PrefKey key) {
             case PREF_INSTALLER_DISPLAY_CHANGES_BOOL:
             case PREF_VIRUS_TOTAL_PROMPT_BEFORE_UPLOADING_BOOL:
             case PREF_ZIP_ALIGN_BOOL:
+            case PREF_SEND_NOTIFICATIONS_TO_CONNECTED_DEVICES_BOOL:
                 return true;
             case PREF_CONCURRENCY_THREAD_COUNT_INT:
             case PREF_APP_THEME_CUSTOM_INT:

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/installer/PackageInstallerActivity.java
Patch:
@@ -368,7 +368,9 @@ private void launchInstallService() {
     }
 
     private void doLaunchInstallerService(@UserIdInt int userId) {
+        assert mCurrentItem != null;
         mLastUserId = userId == UserHandleHidden.USER_ALL ? UserHandleHidden.myUserId() : userId;
+        mCurrentItem.setUserId(userId);
         boolean canDisplayNotification = Utils.canDisplayNotification(this);
         boolean alwaysOnBackground = canDisplayNotification && Prefs.Installer.installInBackground();
         Intent intent = new Intent(this, PackageInstallerService.class);

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/installer/PackageInstallerService.java
Patch:
@@ -104,8 +104,8 @@ protected void onHandleIntent(@Nullable Intent intent) {
         installer.setOnInstallListener(new PackageInstallerCompat.OnInstallListener() {
             @Override
             public void onStartInstall(int sessionId, String packageName) {
-                PackageInstallerService.this.mSessionId = sessionId;
-                PackageInstallerService.this.mPackageName = packageName;
+                mSessionId = sessionId;
+                mPackageName = packageName;
             }
 
             // MIUI-begin: MIUI 12.5+ workaround

File: app/src/main/java/io/github/muntashirakon/AppManager/users/UserInfo.java
Patch:
@@ -9,7 +9,6 @@
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 
-import dev.rikka.tools.refine.Refine;
 import io.github.muntashirakon.util.LocalizedString;
 
 public class UserInfo implements LocalizedString {
@@ -24,7 +23,7 @@ public class UserInfo implements LocalizedString {
         id = userInfo.id;
         String username = userInfo.name;
         if (username == null) {
-            this.name = id == UserHandleHidden.myUserId() ? "Main" : "Work";
+            this.name = id == UserHandleHidden.myUserId() ? "This" : "Other";
         } else this.name = username;
     }
 

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/MetadataManager.java
Patch:
@@ -345,8 +345,7 @@ public Metadata setupMetadata(@NonNull PackageInfo packageInfo,
                 requestedFlags.backupExternalData(), requestedFlags.backupMediaObb());
         mMetadata.isSystem = (applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0;
         mMetadata.isSplitApk = false;
-        try {
-            ApkFile apkFile = ApkFile.getInstance(ApkFile.createInstance(applicationInfo));
+        try (ApkFile apkFile = new ApkFile.ApkSource(applicationInfo).resolve()) {
             if (apkFile.isSplit()) {
                 List<ApkFile.Entry> apkEntries = apkFile.getEntries();
                 int splitCount = apkEntries.size() - 1;

File: libcore/ui/src/main/java/io/github/muntashirakon/dialog/CapsuleBottomSheetDialogFragment.java
Patch:
@@ -123,7 +123,7 @@ public void finishLoading() {
         }
         mIsLoadingFinished = true;
         mBodyContainer.setVisibility(View.VISIBLE);
-        if (mBodyContainer.getChildCount() != 1) {
+        if (mBodyContainer.getChildCount() != 1 && getBody() != null) {
             mBodyContainer.addView(getBody(), new ViewGroup.LayoutParams(
                     ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
         } // else Body has already been set, no need to set it again

File: app/src/main/java/io/github/muntashirakon/AppManager/BaseActivity.java
Patch:
@@ -29,6 +29,7 @@
 import io.github.muntashirakon.AppManager.crypto.ks.KeyStoreManager;
 import io.github.muntashirakon.AppManager.logs.Log;
 import io.github.muntashirakon.AppManager.self.SelfPermissions;
+import io.github.muntashirakon.AppManager.self.filecache.InternalCacheCleanerService;
 import io.github.muntashirakon.AppManager.self.life.BuildExpiryChecker;
 import io.github.muntashirakon.AppManager.settings.Ops;
 import io.github.muntashirakon.AppManager.settings.Prefs;
@@ -135,6 +136,7 @@ protected final void onCreate(@Nullable Bundle savedInstanceState) {
                     Ops.setAuthenticated(true);
                     onAuthenticated(savedInstanceState);
                     initPermissionChecks();
+                    InternalCacheCleanerService.scheduleAlarm(getApplicationContext());
             }
         });
         if (!mViewModel.isAuthenticating()) {

File: app/src/main/java/io/github/muntashirakon/AppManager/main/MainActivity.java
Patch:
@@ -65,7 +65,6 @@
 import io.github.muntashirakon.AppManager.profiles.ProfilesActivity;
 import io.github.muntashirakon.AppManager.rules.RulesTypeSelectionDialogFragment;
 import io.github.muntashirakon.AppManager.runningapps.RunningAppsActivity;
-import io.github.muntashirakon.AppManager.self.filecache.InternalCacheCleanerService;
 import io.github.muntashirakon.AppManager.self.life.FundingCampaignChecker;
 import io.github.muntashirakon.AppManager.settings.FeatureController;
 import io.github.muntashirakon.AppManager.settings.Prefs;
@@ -511,7 +510,6 @@ private void displayChangelogIfRequired() {
         if (!AppPref.getBoolean(AppPref.PrefKey.PREF_DISPLAY_CHANGELOG_BOOL)) {
             return;
         }
-        InternalCacheCleanerService.scheduleAlarm(getApplicationContext());
         if (FundingCampaignChecker.campaignRunning()) {
             new ScrollableDialogBuilder(this)
                     .setMessage(R.string.funding_campaign_dialog_message)

File: app/src/main/java/io/github/muntashirakon/AppManager/self/filecache/InternalCacheCleanerService.java
Patch:
@@ -27,7 +27,8 @@ public class InternalCacheCleanerService extends ForegroundService {
     public static void scheduleAlarm(@NonNull Context context) {
         Intent intent = new Intent(context, InternalCacheCleanerService.class);
         int flags = PendingIntent.FLAG_UPDATE_CURRENT;
-        if (PendingIntentCompat.getService(context, 0, intent, flags | PendingIntent.FLAG_NO_CREATE, false) != null) {
+        PendingIntent pastAlarmIntent = PendingIntentCompat.getService(context, 0, intent, flags | PendingIntent.FLAG_NO_CREATE, false);
+        if (pastAlarmIntent != null) {
             // Already exists
             return;
         }

File: app/src/main/java/androidx/documentfile/provider/VirtualDocumentFile.java
Patch:
@@ -188,6 +188,7 @@ public FileChannel openChannel(int mode) throws IOException {
         return mFs.openChannel(mFullPath, mode);
     }
 
+    @NonNull
     public ParcelFileDescriptor openFileDescriptor(int mode) throws IOException {
         return mFs.openFileDescriptor(mFullPath, mode);
     }

File: app/src/main/java/io/github/muntashirakon/AppManager/fm/icons/FmIcons.java
Patch:
@@ -23,6 +23,7 @@
 
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.self.filecache.FileCache;
+import io.github.muntashirakon.AppManager.utils.FileUtils;
 import io.github.muntashirakon.AppManager.utils.UIUtils;
 import io.github.muntashirakon.io.Path;
 
@@ -316,7 +317,7 @@ public static Bitmap generateFontBitmap(@NonNull Path path) {
     public static Bitmap generatePdfBitmap(@NonNull Context context, @NonNull Uri uri) {
         PdfRenderer renderer;
         try {
-            renderer = new PdfRenderer(context.getContentResolver().openFileDescriptor(uri, "r"));
+            renderer = new PdfRenderer(FileUtils.getFdFromUri(context, uri, "r"));
         } catch (IOException e) {
             e.printStackTrace();
             return null;

File: app/src/main/java/io/github/muntashirakon/io/Path.java
Patch:
@@ -52,6 +52,7 @@
 import io.github.muntashirakon.AppManager.self.SelfPermissions;
 import io.github.muntashirakon.AppManager.utils.ContextUtils;
 import io.github.muntashirakon.AppManager.utils.ExUtils;
+import io.github.muntashirakon.AppManager.utils.FileUtils;
 import io.github.muntashirakon.AppManager.utils.TextUtilsCompat;
 import io.github.muntashirakon.io.fs.VirtualFileSystem;
 
@@ -1473,7 +1474,7 @@ public String[] listFileNames(@Nullable FilenameFilter filter) {
         return files.toArray(new String[0]);
     }
 
-    @Nullable
+    @NonNull
     public ParcelFileDescriptor openFileDescriptor(@NonNull String mode, @NonNull HandlerThread callbackThread)
             throws FileNotFoundException {
         DocumentFile documentFile = getRealDocumentFile(mDocumentFile);
@@ -1496,7 +1497,7 @@ public ParcelFileDescriptor openFileDescriptor(@NonNull String mode, @NonNull Ha
                 throw (FileNotFoundException) new FileNotFoundException(e.getMessage()).initCause(e);
             }
         }
-        return mContext.getContentResolver().openFileDescriptor(documentFile.getUri(), mode);
+        return FileUtils.getFdFromUri(mContext, documentFile.getUri(), mode);
     }
 
     public OutputStream openOutputStream() throws IOException {

File: app/src/main/java/io/github/muntashirakon/AppManager/fm/FmFragment.java
Patch:
@@ -105,6 +105,7 @@ public static FmFragment getNewInstance(@NonNull FmActivity.Options options, @Nu
     private FmPathListAdapter mPathListAdapter;
     private FmActivity mActivity;
 
+    @Nullable
     private FolderShortInfo mFolderShortInfo;
 
     private final OnBackPressedCallback mBackPressedCallback = new OnBackPressedCallback(true) {
@@ -875,8 +876,8 @@ public BatchOpsHandler(@NonNull MultiSelectionView multiSelectionView) {
         @Override
         public void onSelectionChange(int selectionCount) {
             boolean nonZeroSelection = selectionCount > 0;
-            boolean canRead = mFolderShortInfo.canRead;
-            boolean canWrite = mFolderShortInfo.canWrite;
+            boolean canRead = mFolderShortInfo != null && mFolderShortInfo.canRead;
+            boolean canWrite = mFolderShortInfo != null && mFolderShortInfo.canWrite;
             mShareMenu.setEnabled(nonZeroSelection && canRead);
             mRenameMenu.setEnabled(nonZeroSelection && canWrite);
             mDeleteMenu.setEnabled(nonZeroSelection && canWrite);

File: app/src/main/java/io/github/muntashirakon/AppManager/fm/OpenWithDialogFragment.java
Patch:
@@ -98,7 +98,7 @@ private static class ResolvedActivityInfo {
 
         private ResolvedActivityInfo(@NonNull ResolveInfo resolveInfo, @NonNull CharSequence label, @NonNull CharSequence appLabel) {
             this.resolveInfo = resolveInfo;
-            this.packageName = resolveInfo.resolvePackageName;
+            this.packageName = resolveInfo.activityInfo.packageName;
             this.name = resolveInfo.activityInfo.name;
             this.shortName = getShortActivityName(this.name);
             this.label = label;

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/Ops.java
Patch:
@@ -505,6 +505,7 @@ public static void displayIncompleteUsbDebuggingMessage(@NonNull FragmentActivit
         new ScrollableDialogBuilder(activity)
                 .setTitle(R.string.adb_incomplete_usb_debugging_title)
                 .setMessage(R.string.adb_incomplete_usb_debugging_message)
+                .enableAnchors()
                 .setNegativeButton(R.string.close, null)
                 .setPositiveButton(R.string.open, (dialog, which, isChecked) -> {
                     Intent intent = new Intent(Settings.ACTION_APPLICATION_DEVELOPMENT_SETTINGS)

File: app/src/main/java/io/github/muntashirakon/AppManager/misc/OsEnvironment.java
Patch:
@@ -14,7 +14,6 @@
 
 import java.io.File;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.List;
 import java.util.Objects;
 
@@ -96,7 +95,6 @@ public Path[] getExternalDirs() {
             if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.N) {
                 final StorageVolume[] volumes = StorageManagerCompat.getVolumeList(ContextUtils.getContext(),
                         mUserHandle, StorageManagerHidden.FLAG_FOR_WRITE);
-                Log.d(TAG, Arrays.toString(volumes));
                 final List<Path> files = new ArrayList<>();
                 File tmpFile;
                 for (@NonNull StorageVolume volume : volumes) {

File: app/src/main/java/io/github/muntashirakon/AppManager/compat/StorageManagerCompat.java
Patch:
@@ -9,6 +9,7 @@
 import android.os.Handler;
 import android.os.HandlerThread;
 import android.os.ParcelFileDescriptor;
+import android.os.Process;
 import android.os.storage.StorageManager;
 import android.os.storage.StorageManagerHidden;
 import android.os.storage.StorageVolume;
@@ -64,7 +65,7 @@ private StorageManagerCompat() {
     @NonNull
     public static StorageVolume[] getVolumeList(@NonNull Context context, int userId, int flags)
             throws SecurityException {
-        if (!SelfPermissions.checkCrossUserPermission(userId, false)) {
+        if (!SelfPermissions.checkCrossUserPermission(userId, false, Process.myUid())) {
             return new StorageVolume[0];
         }
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {

File: hiddenapi/src/main/java/android/os/storage/StorageManagerHidden.java
Patch:
@@ -16,7 +16,7 @@
 @RefineAs(StorageManager.class)
 public class StorageManagerHidden {
     @RequiresApi(Build.VERSION_CODES.M)
-    public static final int FLAG_FOR_WRITE = 1;  // 1 << 8 in later versions
+    public static /*final*/ int FLAG_FOR_WRITE = 1;  // 1 << 8 in later versions
 
     /**
      * Returns list of all mountable volumes.

File: hiddenapi/src/main/java/android/content/pm/PackageInstallerHidden.java
Patch:
@@ -12,7 +12,7 @@
 
 @RefineAs(PackageInstaller.class)
 public class PackageInstallerHidden {
-    @RequiresApi(31)
+    @RequiresApi(Build.VERSION_CODES.S)
     public PackageInstallerHidden(IPackageInstaller installer,
                                   String installerPackageName,
                                   String installerAttributionTag,
@@ -51,6 +51,7 @@ public Session(IPackageInstallerSession session) {
 
     public static class SessionParams {
         public int installFlags;
+        @RequiresApi(Build.VERSION_CODES.P)
         public String installerPackageName;
     }
 }

File: app/src/main/java/io/github/muntashirakon/AppManager/accessibility/activity/LeadingActivityTrackerActivity.java
Patch:
@@ -20,7 +20,7 @@
 import io.github.muntashirakon.AppManager.accessibility.NoRootAccessibilityService;
 
 public class LeadingActivityTrackerActivity extends BaseActivity {
-    private final ActivityResultLauncher<Intent> settingsLauncher = registerForActivityResult(
+    private final ActivityResultLauncher<Intent> mSettingsLauncher = registerForActivityResult(
             new ActivityResultContracts.StartActivityForResult(), result -> {
                 // Init again
                 init();
@@ -45,7 +45,7 @@ private void init() {
                     .setPositiveButton(R.string.ok, (dialog, which) -> {
                         Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION);
                         intent.setData(Uri.parse("package:" + getPackageName()));
-                        settingsLauncher.launch(intent);
+                        mSettingsLauncher.launch(intent);
                     })
                     .setNegativeButton(R.string.go_back, (dialog, which) -> finish())
                     .show();
@@ -57,7 +57,7 @@ private void init() {
                     .setMessage(R.string.grant_accessibility_permission_for_tracking_window_contents)
                     .setCancelable(false)
                     .setPositiveButton(R.string.ok, (dialog, which) ->
-                            settingsLauncher.launch(new Intent(Settings.ACTION_ACCESSIBILITY_SETTINGS)))
+                            mSettingsLauncher.launch(new Intent(Settings.ACTION_ACCESSIBILITY_SETTINGS)))
                     .setNegativeButton(R.string.go_back, (dialog, which) -> finish())
                     .show();
             return;

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/splitapk/SplitApkExporter.java
Patch:
@@ -21,8 +21,8 @@
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipOutputStream;
 
-import io.github.muntashirakon.AppManager.AppManager;
 import io.github.muntashirakon.AppManager.apk.ApkUtils;
+import io.github.muntashirakon.AppManager.utils.ContextUtils;
 import io.github.muntashirakon.AppManager.utils.DigestUtils;
 import io.github.muntashirakon.AppManager.utils.UIUtils;
 import io.github.muntashirakon.io.IoUtils;
@@ -60,7 +60,7 @@ static void saveApkInternal(@NonNull ZipOutputStream zipOutputStream, @NonNull P
         apksMetadata.writeMetadata(zipOutputStream);
         
         // Add icon
-        Bitmap bitmap = UIUtils.getBitmapFromDrawable(applicationInfo.loadIcon(AppManager.getContext().getPackageManager()));
+        Bitmap bitmap = UIUtils.getBitmapFromDrawable(applicationInfo.loadIcon(ContextUtils.getContext().getPackageManager()));
         ByteArrayOutputStream pngOutputStream = new ByteArrayOutputStream();
         bitmap.compress(Bitmap.CompressFormat.PNG, 100, pngOutputStream);
         addBytes(zipOutputStream, pngOutputStream.toByteArray(), ApksMetadata.ICON_FILE, apksMetadata.exportTimestamp);

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/CryptoUtils.java
Patch:
@@ -22,6 +22,7 @@
 import io.github.muntashirakon.AppManager.crypto.RSACrypto;
 import io.github.muntashirakon.AppManager.crypto.ks.KeyStoreManager;
 import io.github.muntashirakon.AppManager.settings.Prefs;
+import io.github.muntashirakon.AppManager.utils.ContextUtils;
 
 public class CryptoUtils {
     @StringDef(value = {
@@ -78,7 +79,7 @@ public static String getAppropriateFilename(String filename, @NonNull @Mode Stri
     public static Crypto getCrypto(@NonNull MetadataManager.Metadata metadata) throws CryptoException {
         switch (metadata.crypto) {
             case MODE_OPEN_PGP:
-                return new OpenPGPCrypto(metadata.keyIds);
+                return new OpenPGPCrypto(ContextUtils.getContext(), metadata.keyIds);
             case MODE_AES: {
                 AESCrypto aesCrypto = new AESCrypto(metadata.iv);
                 if (metadata.version < 4) {

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/MetadataManager.java
Patch:
@@ -31,7 +31,6 @@
 import java.util.Locale;
 
 import aosp.libcore.util.HexEncoding;
-import io.github.muntashirakon.AppManager.AppManager;
 import io.github.muntashirakon.AppManager.BuildConfig;
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.apk.ApkFile;
@@ -40,6 +39,7 @@
 import io.github.muntashirakon.AppManager.rules.compontents.ComponentsBlocker;
 import io.github.muntashirakon.AppManager.settings.Prefs;
 import io.github.muntashirakon.AppManager.utils.ArrayUtils;
+import io.github.muntashirakon.AppManager.utils.ContextUtils;
 import io.github.muntashirakon.AppManager.utils.DateUtils;
 import io.github.muntashirakon.AppManager.utils.DigestUtils;
 import io.github.muntashirakon.AppManager.utils.JSONUtils;
@@ -161,7 +161,7 @@ public CharSequence toLocalizedString(@NonNull Context context) {
             CharSequence titleText = shortName == null ? context.getText(R.string.base_backup) : shortName;
 
             StringBuilder subtitleText = new StringBuilder()
-                    .append(DateUtils.formatDateTime(backupTime))
+                    .append(DateUtils.formatDateTime(context, backupTime))
                     .append(", ")
                     .append(flags.toLocalisedString(context))
                     .append(", ")
@@ -216,7 +216,7 @@ public static Metadata getMetadata(@NonNull BackupFiles.BackupFile backupFile) t
     private final Context mContext;
 
     private MetadataManager() {
-        mContext = AppManager.getContext();
+        mContext = ContextUtils.getContext();
     }
 
     public Metadata getMetadata() {

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/convert/SBConverter.java
Patch:
@@ -47,7 +47,6 @@
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipInputStream;
 
-import io.github.muntashirakon.AppManager.AppManager;
 import io.github.muntashirakon.AppManager.backup.BackupException;
 import io.github.muntashirakon.AppManager.backup.BackupFiles;
 import io.github.muntashirakon.AppManager.backup.BackupFlags;
@@ -93,7 +92,7 @@ public SBConverter(@NonNull Path xmlFile) {
         mPackageName = Paths.trimPathExtension(xmlFile.getName());
         mBackupTime = xmlFile.lastModified();
         mUserId = UserHandleHidden.myUserId();
-        mPm = AppManager.getContext().getPackageManager();
+        mPm = ContextUtils.getContext().getPackageManager();
         mFilesToBeDeleted.add(xmlFile);
     }
 

File: app/src/main/java/io/github/muntashirakon/AppManager/compat/UsageStatsManagerCompat.java
Patch:
@@ -10,7 +10,6 @@
 import android.os.RemoteException;
 import android.os.UserHandleHidden;
 
-import io.github.muntashirakon.AppManager.AppManager;
 import io.github.muntashirakon.AppManager.ipc.ProxyBinder;
 import io.github.muntashirakon.AppManager.self.SelfPermissions;
 import io.github.muntashirakon.AppManager.users.Users;
@@ -53,7 +52,8 @@ public static void setAppInactive(String packageName, @UserIdInt int userId, boo
     public static boolean isAppInactive(String packageName, @UserIdInt int userId) throws RemoteException {
         IUsageStatsManager usm = getUsageStatsManager();
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
-            return usm.isAppInactive(packageName, userId, AppManager.getContext().getPackageName());
+            String callingPackage = SelfPermissions.getCallingPackage(Users.getSelfOrRemoteUid());
+            return usm.isAppInactive(packageName, userId, callingPackage);
         } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
             return usm.isAppInactive(packageName, userId);
         }

File: app/src/main/java/io/github/muntashirakon/AppManager/crypto/OpenPGPCryptoActivity.java
Patch:
@@ -19,7 +19,7 @@
 import io.github.muntashirakon.AppManager.intercept.IntentCompat;
 
 public class OpenPGPCryptoActivity extends BaseActivity {
-    private final ActivityResultLauncher<IntentSenderRequest> confirmationLauncher = registerForActivityResult(
+    private final ActivityResultLauncher<IntentSenderRequest> mConfirmationLauncher = registerForActivityResult(
             new ActivityResultContracts.StartIntentSenderForResult(), result -> {
                 Intent broadcastIntent = new Intent(OpenPGPCrypto.ACTION_OPEN_PGP_INTERACTION_END);
                 sendBroadcast(broadcastIntent);
@@ -41,6 +41,6 @@ protected void onAuthenticated(@Nullable Bundle savedInstanceState) {
     protected void onNewIntent(Intent intent) {
         super.onNewIntent(intent);
         PendingIntent pi = Objects.requireNonNull(IntentCompat.getParcelableExtra(intent, OpenPgpApi.RESULT_INTENT, PendingIntent.class));
-        confirmationLauncher.launch(new IntentSenderRequest.Builder(pi).build());
+        mConfirmationLauncher.launch(new IntentSenderRequest.Builder(pi).build());
     }
 }

File: app/src/main/java/io/github/muntashirakon/AppManager/crypto/auth/AuthFeatureDemultiplexer.java
Patch:
@@ -8,7 +8,6 @@
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 
-import io.github.muntashirakon.AppManager.AppManager;
 import io.github.muntashirakon.AppManager.BaseActivity;
 import io.github.muntashirakon.AppManager.profiles.AppsProfileActivity;
 
@@ -57,6 +56,6 @@ private void handleRequest(@NonNull Intent intent) {
     public void launchProfile(@NonNull Intent intent) {
         String profileName = intent.getStringExtra(AppsProfileActivity.EXTRA_PROFILE_NAME);
         String state = intent.getStringExtra(AppsProfileActivity.EXTRA_STATE);
-        startActivity(AppsProfileActivity.getShortcutIntent(AppManager.getContext(), profileName, null, state));
+        startActivity(AppsProfileActivity.getShortcutIntent(getApplicationContext(), profileName, null, state));
     }
 }

File: app/src/main/java/io/github/muntashirakon/AppManager/crypto/ks/KeyStoreActivity.java
Patch:
@@ -90,7 +90,7 @@ private void savePass(@NonNull String prefKey, @Nullable Editable rawPassword) {
             password = new char[rawPassword.length()];
             rawPassword.getChars(0, rawPassword.length(), password, 0);
         }
-        KeyStoreManager.savePass(prefKey, password);
+        KeyStoreManager.savePass(this, prefKey, password);
         Utils.clearChars(password);
         sendBroadcast(new Intent(KeyStoreManager.ACTION_KS_INTERACTION_END));
     }

File: app/src/main/java/io/github/muntashirakon/AppManager/db/AppsDb.java
Patch:
@@ -6,7 +6,6 @@
 import androidx.room.Room;
 import androidx.room.RoomDatabase;
 
-import io.github.muntashirakon.AppManager.AppManager;
 import io.github.muntashirakon.AppManager.db.dao.AppDao;
 import io.github.muntashirakon.AppManager.db.dao.BackupDao;
 import io.github.muntashirakon.AppManager.db.dao.FileHashDao;
@@ -15,14 +14,15 @@
 import io.github.muntashirakon.AppManager.db.entity.Backup;
 import io.github.muntashirakon.AppManager.db.entity.FileHash;
 import io.github.muntashirakon.AppManager.db.entity.LogFilter;
+import io.github.muntashirakon.AppManager.utils.ContextUtils;
 
 @Database(entities = {App.class, LogFilter.class, FileHash.class, Backup.class}, version = 2)
 public abstract class AppsDb extends RoomDatabase {
     private static AppsDb sAppsDb;
 
     public static AppsDb getInstance() {
         if (sAppsDb == null) {
-            sAppsDb = Room.databaseBuilder(AppManager.getContext(), AppsDb.class, "apps.db")
+            sAppsDb = Room.databaseBuilder(ContextUtils.getContext(), AppsDb.class, "apps.db")
                     .fallbackToDestructiveMigration()
                     .build();
         }

File: app/src/main/java/io/github/muntashirakon/AppManager/debloat/DebloaterViewModel.java
Patch:
@@ -160,7 +160,7 @@ public void loadPackages() {
                         continue;
                     }
                     // Removal
-                    int removalType = debloatObject.getRemoval();
+                    int removalType = debloatObject.getmRemoval();
                     if ((mFilterFlags & DebloaterListOptions.FILTER_REMOVAL_SAFE) == 0 && removalType == DebloatObject.REMOVAL_SAFE) {
                         continue;
                     }

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppDetailsComponentsFragment.java
Patch:
@@ -131,7 +131,7 @@ public void onRefresh() {
     @Override
     public void onCreateOptionsMenu(@NonNull Menu menu, @NonNull MenuInflater inflater) {
         if (viewModel != null && !viewModel.isExternalApk() && SelfPermissions.canModifyAppComponentStates(
-                viewModel.getUserHandle(), viewModel.getPackageName(), viewModel.isTestOnlyApp())) {
+                viewModel.getUserId(), viewModel.getPackageName(), viewModel.isTestOnlyApp())) {
             inflater.inflate(R.menu.fragment_app_details_components_actions, menu);
             mBlockingToggler = menu.findItem(R.id.action_toggle_blocking);
             viewModel.getRuleApplicationStatus().observe(activity, status -> {
@@ -297,7 +297,7 @@ void setDefaultList(@NonNull List<AppDetailsItem<?>> list) {
             if (viewModel != null) {
                 mCanModifyComponentStates = !mIsExternalApk && SelfPermissions.canModifyAppComponentStates(mUserId, viewModel.getPackageName(), viewModel.isTestOnlyApp());
                 mConstraint = viewModel.getSearchQuery();
-                mUserId = viewModel.getUserHandle();
+                mUserId = viewModel.getUserId();
             } else {
                 mCanModifyComponentStates = false;
                 mConstraint = null;

File: app/src/main/java/io/github/muntashirakon/AppManager/fm/FilePropertiesDialogFragment.java
Patch:
@@ -91,7 +91,7 @@ public void onBodyInitialized(@NonNull View bodyView, @Nullable Bundle savedInst
         iconView.setImageResource(path.isDirectory() ? R.drawable.ic_folder : R.drawable.ic_file_document);
         symbolicLinkiconView.setVisibility(path.isSymbolicLink() ? View.VISIBLE : View.GONE);
         nameView.setText(path.getName());
-        String modificationDate = DateUtils.formatDateTime(path.lastModified());
+        String modificationDate = DateUtils.formatDateTime(requireContext(), path.lastModified());
         pathView.setText(FmUtils.getDisplayablePath(path));
         String realFile = null;
         if (path.isSymbolicLink()) {
@@ -112,8 +112,8 @@ public void onBodyInitialized(@NonNull View bodyView, @Nullable Bundle savedInst
         dateAccessedView.setText("--");
         long creationTime = path.creationTime();
         long lastAccessTime = path.lastAccess();
-        dateCreatedView.setText(creationTime > 0 ? DateUtils.formatDateTime(creationTime) : "--");
-        dateAccessedView.setText(lastAccessTime > 0 ? DateUtils.formatDateTime(lastAccessTime) : "--");
+        dateCreatedView.setText(creationTime > 0 ? DateUtils.formatDateTime(requireContext(), creationTime) : "--");
+        dateAccessedView.setText(lastAccessTime > 0 ? DateUtils.formatDateTime(requireContext(), lastAccessTime) : "--");
         int mode = path.getMode();
         modeView.setText(mode != 0 ? getFormattedMode(mode) : "--");
         UidGidPair uidGidPair = path.getUidGid();

File: app/src/main/java/io/github/muntashirakon/AppManager/fm/FmItem.java
Patch:
@@ -20,7 +20,7 @@ public class FmItem implements Comparable<FmItem> {
     final String tag;
 
     @Nullable
-    private PathContentInfo contentInfo;
+    private PathContentInfo mContentInfo;
 
     FmItem(@NonNull Path path) {
         this.path = path;
@@ -32,11 +32,11 @@ public class FmItem implements Comparable<FmItem> {
 
     @Nullable
     public PathContentInfo getContentInfo() {
-        return contentInfo;
+        return mContentInfo;
     }
 
     public void setContentInfo(@Nullable PathContentInfo contentInfo) {
-        this.contentInfo = contentInfo;
+        this.mContentInfo = contentInfo;
     }
 
     @Override

File: app/src/main/java/io/github/muntashirakon/AppManager/intercept/HistoryEditText.java
Patch:
@@ -115,7 +115,7 @@ private List<String> include(List<String> history_, String newValue) {
      * define history function for these editors
      */
     public HistoryEditText(@NonNull Activity context, @NonNull MaterialAutoCompleteTextView... editors) {
-        this.mContext = context;
+        mContext = context;
         mEditorHandlers = new EditorHandler[editors.length];
 
         for (int i = 0; i < editors.length; i++) {

File: app/src/main/java/io/github/muntashirakon/AppManager/logcat/CrazyLoggerService.java
Patch:
@@ -24,14 +24,14 @@ public class CrazyLoggerService extends ForegroundService {
     };
 
     private static final long INTERVAL = 300;
-    private boolean kill = false;
+    private boolean mKill = false;
 
     public CrazyLoggerService() {
         super(TAG);
     }
 
     protected void onHandleIntent(Intent intent) {
-        while (!kill) {
+        while (!mKill) {
             SystemClock.sleep(INTERVAL);
             if (new Random().nextInt(100) % 5 == 0) {
                 Log.println(LOG_LEVELS[new Random().nextInt(6)], TAG, LOG_MESSAGES[new Random().nextInt(5)]);
@@ -42,6 +42,6 @@ protected void onHandleIntent(Intent intent) {
     @Override
     public void onDestroy() {
         super.onDestroy();
-        kill = true;
+        mKill = true;
     }
 }

File: app/src/main/java/io/github/muntashirakon/AppManager/logcat/LogFilterAdapter.java
Patch:
@@ -21,7 +21,7 @@
 
 // Copyright 2012 Nolan Lawson
 public class LogFilterAdapter extends ArrayAdapter<LogFilter> {
-    LayoutInflater layoutInflater;
+    private final LayoutInflater mLayoutInflater;
 
     public interface OnClickListener {
         void onClick(ViewGroup parent, View view, int position, LogFilter logFilter);
@@ -35,15 +35,15 @@ public void setOnItemClickListener(OnClickListener listener) {
 
     public LogFilterAdapter(FragmentActivity activity, List<LogFilter> items) {
         super(activity, R.layout.item_title_action, items);
-        layoutInflater = activity.getLayoutInflater();
+        mLayoutInflater = activity.getLayoutInflater();
     }
 
     @NonNull
     @Override
     public View getView(int position, View convertView, @NonNull ViewGroup parent) {
         ViewHolder holder;
         if (convertView == null) {
-            convertView = layoutInflater.inflate(R.layout.item_title_action, parent, false);
+            convertView = mLayoutInflater.inflate(R.layout.item_title_action, parent, false);
             holder = new ViewHolder();
             holder.textView = convertView.findViewById(R.id.item_title);
             holder.actionButton = convertView.findViewById(R.id.item_action);

File: app/src/main/java/io/github/muntashirakon/AppManager/misc/OsEnvironment.java
Patch:
@@ -19,9 +19,9 @@
 import java.util.Objects;
 
 import dev.rikka.tools.refine.Refine;
-import io.github.muntashirakon.AppManager.AppManager;
 import io.github.muntashirakon.AppManager.compat.StorageManagerCompat;
 import io.github.muntashirakon.AppManager.logs.Log;
+import io.github.muntashirakon.AppManager.utils.ContextUtils;
 import io.github.muntashirakon.io.Path;
 import io.github.muntashirakon.io.Paths;
 
@@ -94,7 +94,7 @@ public UserEnvironment(@UserIdInt int userHandle) {
         @NonNull
         public Path[] getExternalDirs() {
             if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.N) {
-                final StorageVolume[] volumes = StorageManagerCompat.getVolumeList(AppManager.getContext(),
+                final StorageVolume[] volumes = StorageManagerCompat.getVolumeList(ContextUtils.getContext(),
                         mUserHandle, StorageManagerHidden.FLAG_FOR_WRITE);
                 Log.d(TAG, Arrays.toString(volumes));
                 final List<Path> files = new ArrayList<>();

File: app/src/main/java/io/github/muntashirakon/AppManager/profiles/ProfileMetaManager.java
Patch:
@@ -27,11 +27,11 @@
 import java.util.Objects;
 
 import aosp.libcore.util.EmptyArray;
-import io.github.muntashirakon.AppManager.AppManager;
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.backup.BackupFlags;
 import io.github.muntashirakon.AppManager.settings.Prefs;
 import io.github.muntashirakon.AppManager.utils.ArrayUtils;
+import io.github.muntashirakon.AppManager.utils.ContextUtils;
 import io.github.muntashirakon.AppManager.utils.JSONUtils;
 import io.github.muntashirakon.AppManager.utils.TextUtilsCompat;
 import io.github.muntashirakon.io.Path;
@@ -131,7 +131,7 @@ public BackupInfo(@NonNull BackupInfo backupInfo) {
 
     @NonNull
     public static Path getProfilesDir() {
-        Context context = AppManager.getContext();
+        Context context = ContextUtils.getContext();
         return Objects.requireNonNull(Paths.build(context.getFilesDir(), "profiles"));
     }
 

File: app/src/main/java/io/github/muntashirakon/AppManager/runningapps/ProcessParser.java
Patch:
@@ -162,7 +162,7 @@ private void getInstalledPackages() {
         for (int uid : duplicateUids) mInstalledUidList.remove(uid);
         List<ActivityManager.RunningAppProcessInfo> runningAppProcesses = ActivityManagerCompat.getRunningAppProcesses();
         for (ActivityManager.RunningAppProcessInfo info : runningAppProcesses) {
-            this.mRunningAppProcesses.put(info.pid, info);
+            mRunningAppProcesses.put(info.pid, info);
         }
     }
 

File: app/src/main/java/io/github/muntashirakon/AppManager/runningapps/RunningAppsAdapter.java
Patch:
@@ -68,7 +68,7 @@ public class RunningAppsAdapter extends MultiSelectionView.Adapter<MultiSelectio
     RunningAppsAdapter(@NonNull RunningAppsActivity activity) {
         super();
         mActivity = activity;
-        mModel = activity.mModel;
+        mModel = activity.model;
         mCardColor = ColorCodes.getListItemColor1(activity);
         mQueryStringHighlightColor = ColorCodes.getQueryStringHighlightColor(activity);
         mHighlightColor = ColorCodes.getListItemSelectionColor(activity);

File: app/src/main/java/io/github/muntashirakon/AppManager/compat/StorageManagerCompat.java
Patch:
@@ -9,7 +9,6 @@
 import android.os.Handler;
 import android.os.HandlerThread;
 import android.os.ParcelFileDescriptor;
-import android.os.UserHandleHidden;
 import android.os.storage.StorageManager;
 import android.os.storage.StorageManagerHidden;
 import android.os.storage.StorageVolume;
@@ -65,8 +64,7 @@ private StorageManagerCompat() {
     @NonNull
     public static StorageVolume[] getVolumeList(@NonNull Context context, int userId, int flags)
             throws SecurityException {
-        if (userId != UserHandleHidden.myUserId()
-                && SelfPermissions.checkSelfOrRemotePermission(ManifestCompat.permission.INTERACT_ACROSS_USERS)) {
+        if (!SelfPermissions.checkCrossUserPermission(userId, false)) {
             return new StorageVolume[0];
         }
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/ImportExportRulesPreferences.java
Patch:
@@ -27,6 +27,7 @@
 import io.github.muntashirakon.AppManager.oneclickops.ItemCount;
 import io.github.muntashirakon.AppManager.rules.RulesTypeSelectionDialogFragment;
 import io.github.muntashirakon.AppManager.rules.compontents.ExternalComponentsImporter;
+import io.github.muntashirakon.AppManager.self.SelfPermissions;
 import io.github.muntashirakon.AppManager.users.Users;
 import io.github.muntashirakon.AppManager.utils.DateUtils;
 import io.github.muntashirakon.AppManager.utils.PackageUtils;
@@ -152,7 +153,7 @@ public int getTitle() {
     }
 
     private void importExistingRules(final boolean systemApps) {
-        if (!Ops.isPrivileged()) {
+        if (!SelfPermissions.canModifyAppComponentStates(UserHandleHidden.myUserId(), null, true)) {
             Toast.makeText(requireContext(), R.string.only_works_in_root_or_adb_mode, Toast.LENGTH_SHORT).show();
             return;
         }

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/PackageUtils.java
Patch:
@@ -874,6 +874,9 @@ public static Spannable getApkVerifierInfo(@Nullable ApkVerifier.Result result,
     }
 
     public static void ensurePackageStagingDirectoryPrivileged() throws ErrnoException {
+        if (!Paths.get("/data/local").canWrite()) {
+            return;
+        }
         Path psd = Paths.get(PACKAGE_STAGING_DIRECTORY);
         if (!psd.isDirectory()) {
             // Recreate directory

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/BackupFlags.java
Patch:
@@ -47,11 +47,11 @@ public final class BackupFlags {
     public static final int BACKUP_NOTHING = 0;
     @SuppressWarnings("PointlessBitwiseExpression")
     @Deprecated
-    public static final int BACKUP_SOURCE = 1 << 0;
+    private static final int BACKUP_SOURCE = 1 << 0;
     public static final int BACKUP_INT_DATA = 1 << 1;
     public static final int BACKUP_EXT_DATA = 1 << 2;
     @Deprecated
-    public static final int BACKUP_EXCLUDE_CACHE = 1 << 3;
+    private static final int BACKUP_EXCLUDE_CACHE = 1 << 3;
     public static final int BACKUP_RULES = 1 << 4;
     public static final int BACKUP_NO_SIGNATURE_CHECK = 1 << 5;
     public static final int BACKUP_APK_FILES = 1 << 6;
@@ -309,7 +309,7 @@ private static int migrate(int flags) {
             // BACKUP_EXCLUDE_CACHE is inversely replaced with BACKUP_CACHE
             flags &= ~BACKUP_EXCLUDE_CACHE;
             flags &= ~BACKUP_CACHE;
-        } else flags |= BACKUP_CACHE;
+        }
         return flags;
     }
 }

File: app/src/main/java/io/github/muntashirakon/AppManager/compat/ManifestCompat.java
Patch:
@@ -15,6 +15,7 @@ public static final class permission {
         public static final String CLEAR_APP_USER_DATA = "android.permission.CLEAR_APP_USER_DATA";
         @RequiresApi(Build.VERSION_CODES.N)
         public static final String CREATE_USERS = "android.permission.CREATE_USERS";
+        public static final String DEVICE_POWER = "android.permission.DEVICE_POWER";
         public static final String FORCE_STOP_PACKAGES = "android.permission.FORCE_STOP_PACKAGES";
         public static final String GET_APP_OPS_STATS = "android.permission.GET_APP_OPS_STATS";
         @RequiresApi(Build.VERSION_CODES.TIRAMISU)
@@ -33,11 +34,13 @@ public static final class permission {
         public static final String MANAGE_APP_OPS_MODES = "android.permission.MANAGE_APP_OPS_MODES";
         @RequiresApi(Build.VERSION_CODES.Q)
         public static final String MANAGE_APPOPS = "android.permission.MANAGE_APPOPS";
+        public static final String MANAGE_NETWORK_POLICY = "android.permission.MANAGE_NETWORK_POLICY";
         public static final String MANAGE_USERS = "android.permission.MANAGE_USERS";
         public static final String REVOKE_RUNTIME_PERMISSIONS = "android.permission.REVOKE_RUNTIME_PERMISSIONS";
         @RequiresApi(Build.VERSION_CODES.P)
         public static final String SUSPEND_APPS = "android.permission.SUSPEND_APPS";
         public static final String UPDATE_APP_OPS_STATS = "android.permission.UPDATE_APP_OPS_STATS";
+        @RequiresApi(Build.VERSION_CODES.S)
         public static final String UPDATE_DOMAIN_VERIFICATION_USER_SELECTION = "android.permission.UPDATE_DOMAIN_VERIFICATION_USER_SELECTION";
         @RequiresApi(Build.VERSION_CODES.P)
         public static final String WATCH_APPOPS = "android.permission.WATCH_APPOPS";

File: app/src/main/java/io/github/muntashirakon/AppManager/logcat/LogViewerViewModel.java
Patch:
@@ -356,7 +356,7 @@ public void prepareLogsToBeSent(boolean includeDeviceInfo, boolean includeDmesg,
             }
             String dmesg = null;
             if (includeDmesg) {
-                Runner.Result result = Runner.runCommand("dmesg");
+                Runner.Result result = Runner.runCommand(new String[]{"dmesg"});
                 if (result.isSuccessful()) {
                     dmesg = result.getOutput();
                     if (dmesg.length() == 0) {

File: app/src/main/java/io/github/muntashirakon/AppManager/magisk/MagiskDenyList.java
Patch:
@@ -67,7 +67,7 @@ public static List<MagiskProcess> getProcesses(@NonNull PackageInfo packageInfo)
 
     @NonNull
     public static Collection<String> getProcesses(@NonNull String packageName) {
-        Runner.Result result = Runner.runCommand("magisk --denylist ls");
+        Runner.Result result = Runner.runCommand(new String[]{"magisk", "--denylist", "ls"});
         return MagiskUtils.parseProcesses(packageName, result);
     }
 

File: app/src/main/java/io/github/muntashirakon/AppManager/magisk/MagiskHide.java
Patch:
@@ -67,7 +67,7 @@ public static List<MagiskProcess> getProcesses(@NonNull PackageInfo packageInfo)
 
     @NonNull
     public static Collection<String> getProcesses(@NonNull String packageName) {
-        Runner.Result result = Runner.runCommand("magiskhide ls");
+        Runner.Result result = Runner.runCommand(new String[]{"magiskhide", "ls"});
         return MagiskUtils.parseProcesses(packageName, result);
     }
 }

File: app/src/main/java/io/github/muntashirakon/AppManager/main/MainActivity.java
Patch:
@@ -72,7 +72,6 @@
 import io.github.muntashirakon.AppManager.self.filecache.InternalCacheCleanerService;
 import io.github.muntashirakon.AppManager.self.life.FundingCampaignChecker;
 import io.github.muntashirakon.AppManager.settings.FeatureController;
-import io.github.muntashirakon.AppManager.settings.Ops;
 import io.github.muntashirakon.AppManager.settings.Prefs;
 import io.github.muntashirakon.AppManager.settings.SettingsActivity;
 import io.github.muntashirakon.AppManager.usage.AppUsageActivity;
@@ -514,13 +513,12 @@ public void onSelectionChange(int selectionCount) {
         exportRulesMenu.setEnabled(nonZeroSelection);
         addToProfileMenu.setEnabled(nonZeroSelection);
         /* === Visible/Invisible === */
-        boolean privileged = Ops.isPrivileged();
         enableDisableMenu.setVisible(SelfPermissions.canFreezeUnfreezePackages());
         forceStopMenu.setVisible(SelfPermissions.checkSelfOrRemotePermission(ManifestCompat.permission.FORCE_STOP_PACKAGES));
         clearDataCacheMenu.setVisible(SelfPermissions.checkSelfOrRemotePermission(ManifestCompat.permission.CLEAR_APP_USER_DATA)
                 || SelfPermissions.canClearAppCache());
         preventBackgroundMenu.setVisible(SelfPermissions.canModifyAppOpMode());
-        netPolicyMenu.setVisible(privileged);
+        netPolicyMenu.setVisible(SelfPermissions.checkSelfOrRemotePermission(ManifestCompat.permission.MANAGE_NETWORK_POLICY));
         blockUnblockTrackersMenu.setVisible(SelfPermissions.checkSelfOrRemotePermission(Manifest.permission.CHANGE_COMPONENT_ENABLED_STATE));
     }
 

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/FeatureController.java
Patch:
@@ -20,16 +20,16 @@
 
 import io.github.muntashirakon.AppManager.AppManager;
 import io.github.muntashirakon.AppManager.R;
-import io.github.muntashirakon.AppManager.viewer.ExplorerActivity;
 import io.github.muntashirakon.AppManager.apk.installer.PackageInstallerActivity;
 import io.github.muntashirakon.AppManager.details.AppDetailsActivity;
 import io.github.muntashirakon.AppManager.details.manifest.ManifestViewerActivity;
 import io.github.muntashirakon.AppManager.editor.CodeEditorActivity;
 import io.github.muntashirakon.AppManager.intercept.ActivityInterceptor;
 import io.github.muntashirakon.AppManager.logcat.LogViewerActivity;
 import io.github.muntashirakon.AppManager.scanner.ScannerActivity;
+import io.github.muntashirakon.AppManager.self.SelfPermissions;
 import io.github.muntashirakon.AppManager.utils.AppPref;
-import io.github.muntashirakon.AppManager.utils.PermissionUtils;
+import io.github.muntashirakon.AppManager.viewer.ExplorerActivity;
 
 public class FeatureController {
     @IntDef(flag = true, value = {
@@ -162,7 +162,7 @@ private boolean isEnabled(@FeatureFlags int key) {
                 // Only depends on flag
                 return (flags & key) != 0;
             case FEAT_INTERNET:
-                return (flags & key) != 0 && PermissionUtils.hasSelfPermission(Manifest.permission.INTERNET);
+                return (flags & key) != 0 && SelfPermissions.checkSelfPermission(Manifest.permission.INTERNET);
             case FEAT_LOG_VIEWER:
                 cn = getComponentName(key, LogViewerActivity.class);
                 break;

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/FreezeUtils.java
Patch:
@@ -35,7 +35,7 @@ public static boolean isFrozen(@NonNull ApplicationInfo applicationInfo) {
         if (!applicationInfo.enabled) {
             return true;
         }
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N && (applicationInfo.flags & ApplicationInfo.FLAG_SUSPENDED) != 0) {
+        if (ApplicationInfoCompat.isSuspended(applicationInfo)) {
             return true;
         }
         return (ApplicationInfoCompat.getPrivateFlags(applicationInfo) & ApplicationInfoCompat.PRIVATE_FLAG_HIDDEN) != 0;

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/StorageUtils.java
Patch:
@@ -42,7 +42,6 @@ public class StorageUtils {
     @NonNull
     public static ArrayMap<String, Uri> getAllStorageLocations(@NonNull Context context) {
         ArrayMap<String, Uri> storageLocations = new ArrayMap<>(10);
-        @SuppressWarnings("deprecation")
         Path sdCard = Paths.get(Environment.getExternalStorageDirectory());
         addStorage(context.getString(R.string.external_storage), sdCard, storageLocations);
         getStorageEnv(context, storageLocations);
@@ -117,14 +116,13 @@ private static void getStorageExternalFilesDir(Context context, Map<String, Uri>
     }
 
     /**
-     * Get storages via StorageManager & reflection hacks, probably never works
+     * Get storages via StorageManager
      */
     private static void retrieveStorageManager(Context context, Map<String, Uri> storageLocations) {
         Set<StorageVolume> storageVolumes = new HashSet<>();
         int[] users = Users.getUsersIds();
         for (int user : users) {
             try {
-                // TODO: Fetch volume info using "mount" service
                 storageVolumes.addAll(Arrays.asList(StorageManagerCompat.getVolumeList(context, user, 0)));
             } catch (SecurityException ignore) {
             }

File: app/src/main/java/io/github/muntashirakon/io/Path.java
Patch:
@@ -49,6 +49,7 @@
 import aosp.libcore.util.EmptyArray;
 import io.github.muntashirakon.AppManager.compat.StorageManagerCompat;
 import io.github.muntashirakon.AppManager.ipc.LocalServices;
+import io.github.muntashirakon.AppManager.self.SelfPermissions;
 import io.github.muntashirakon.AppManager.utils.ContextUtils;
 import io.github.muntashirakon.AppManager.utils.ExUtils;
 import io.github.muntashirakon.AppManager.utils.PermissionUtils;
@@ -101,7 +102,8 @@ private static void setAccessPaths() {
             } else cards = new String[]{"/storage/emulated/" + userId};
             if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
                 // Add Android/data and Android/obb to the exemption list
-                boolean canInstallApps = PermissionUtils.hasSelfPermission(Manifest.permission.REQUEST_INSTALL_PACKAGES);
+                boolean canInstallApps = SelfPermissions.checkSelfPermission(Manifest.permission.REQUEST_INSTALL_PACKAGES)
+                        || SelfPermissions.checkSelfPermission(Manifest.permission.INSTALL_PACKAGES);
                 for (String card : cards) {
                     EXCLUSIVE_ACCESS_PATHS.add(card + "/Android/data");
                     EXCLUSIVE_ACCESS_GRANTED.add(false);

File: app/src/main/java/io/github/muntashirakon/AppManager/rules/compontents/ComponentsBlocker.java
Patch:
@@ -64,7 +64,7 @@
 public final class ComponentsBlocker extends RulesStorageManager {
     public static final String TAG = "ComponentBlocker";
 
-    static final String SYSTEM_RULES_PATH;
+    public static final String SYSTEM_RULES_PATH;
 
     static {
         SYSTEM_RULES_PATH = Build.VERSION.SDK_INT <= Build.VERSION_CODES.M ? "/data/secure/system/ifw"

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/Prefs.java
Patch:
@@ -194,7 +194,7 @@ public static boolean globalBlockingEnabled() {
         @ComponentRule.ComponentStatus
         public static String getDefaultBlockingMethod() {
             String selectedStatus = AppPref.getString(AppPref.PrefKey.PREF_DEFAULT_BLOCKING_METHOD_STR);
-            if (Ops.isAdb()) {
+            if (!PermissionUtils.canBlockByIFW()) {
                 if (selectedStatus.equals(ComponentRule.COMPONENT_TO_BE_BLOCKED_IFW_DISABLE)
                         || selectedStatus.equals(ComponentRule.COMPONENT_TO_BE_BLOCKED_IFW)) {
                     // Lower the status

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/RulesPreferences.java
Patch:
@@ -20,6 +20,7 @@
 import io.github.muntashirakon.AppManager.rules.struct.ComponentRule;
 import io.github.muntashirakon.AppManager.utils.ArrayUtils;
 import io.github.muntashirakon.AppManager.utils.FreezeUtils;
+import io.github.muntashirakon.AppManager.utils.PermissionUtils;
 import io.github.muntashirakon.AppManager.utils.UIUtils;
 import io.github.muntashirakon.dialog.DialogTitleBuilder;
 import io.github.muntashirakon.dialog.SearchableSingleChoiceDialogBuilder;
@@ -103,6 +104,8 @@ public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {
         });
         // Default component blocking method
         Preference defaultBlockingMethod = Objects.requireNonNull(findPreference("default_blocking_method"));
+        // Disable this option if IFW folder can't be accessed
+        defaultBlockingMethod.setEnabled(PermissionUtils.canBlockByIFW());
         int csIdx = ArrayUtils.indexOf(blockingMethods, Prefs.Blocking.getDefaultBlockingMethod());
         if (csIdx != -1) {
             defaultBlockingMethod.setSummary(blockingMethodTitles[csIdx]);

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/installer/PackageInstallerService.java
Patch:
@@ -83,7 +83,7 @@ public int onStartCommand(@Nullable Intent intent, int flags, int startId) {
         @SuppressLint("WrongConstant")
         PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, notificationIntent,
                 PendingIntentCompat.FLAG_IMMUTABLE);
-        notificationInfo = new NotificationProgressHandler.NotificationInfo(NotificationCompat.PRIORITY_LOW)
+        notificationInfo = new NotificationProgressHandler.NotificationInfo()
                 .setBody(getString(R.string.install_in_progress))
                 .setOperationName(getText(R.string.package_installer))
                 .setDefaultAction(pendingIntent);
@@ -178,7 +178,7 @@ protected void onQueued(@Nullable Intent intent) {
         if (intent == null) return;
         ApkQueueItem apkQueueItem = IntentCompat.getParcelableExtra(intent, EXTRA_QUEUE_ITEM, ApkQueueItem.class);
         String appLabel = apkQueueItem != null ? apkQueueItem.getAppLabel() : null;
-        Object notificationInfo = new NotificationProgressHandler.NotificationInfo(NotificationCompat.PRIORITY_HIGH)
+        Object notificationInfo = new NotificationProgressHandler.NotificationInfo()
                 .setAutoCancel(true)
                 .setOperationName(getString(R.string.package_installer))
                 .setTitle(appLabel)
@@ -233,7 +233,7 @@ private void sendNotification(@PackageInstallerCompat.Status int status,
         String subject = getStringFromStatus(this, status, appLabel, blockingPackage);
         NotificationCompat.Style content = statusMessage != null ? new NotificationCompat.BigTextStyle()
                 .bigText(subject + "\n\n" + statusMessage) : null;
-        Object notificationInfo = new NotificationProgressHandler.NotificationInfo(NotificationCompat.PRIORITY_HIGH)
+        Object notificationInfo = new NotificationProgressHandler.NotificationInfo()
                 .setAutoCancel(true)
                 .setTime(System.currentTimeMillis())
                 .setOperationName(getText(R.string.package_installer))

File: app/src/main/java/io/github/muntashirakon/AppManager/logcat/LogcatRecordingService.java
Patch:
@@ -15,7 +15,6 @@
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
-import androidx.core.app.NotificationCompat;
 import androidx.core.app.NotificationManagerCompat;
 import androidx.core.app.ServiceCompat;
 
@@ -129,7 +128,7 @@ public int onStartCommand(Intent intent, int flags, int startId) {
         PendingIntent pendingIntent = PendingIntent.getBroadcast(this, 0 /* no requestCode */,
                 stopRecordingIntent, PendingIntent.FLAG_ONE_SHOT | PendingIntentCompat.FLAG_IMMUTABLE);
 
-        Object notificationInfo = new NotificationProgressHandler.NotificationInfo(NotificationCompat.PRIORITY_DEFAULT)
+        Object notificationInfo = new NotificationProgressHandler.NotificationInfo()
                 .setTitle(getString(R.string.notification_title))
                 .setBody(getString(R.string.notification_subtext))
                 .setStatusBarText(getText(R.string.notification_ticker))
@@ -185,7 +184,7 @@ protected void onHandleIntent(@Nullable Intent intent) {
             Log.d(TAG, "Service ended");
             boolean logSaved = SaveLogHelper.saveLog(stringBuilder, filename);
             NotificationProgressHandler.NotificationInfo notificationInfo =
-                    new NotificationProgressHandler.NotificationInfo(NotificationCompat.PRIORITY_HIGH)
+                    new NotificationProgressHandler.NotificationInfo()
                             .setTitle(getString(R.string.notification_title))
                             .setAutoCancel(true);
             if (logSaved) {

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/installer/PackageInstallerActivity.java
Patch:
@@ -64,6 +64,7 @@
 import io.github.muntashirakon.AppManager.apk.whatsnew.WhatsNewDialogFragment;
 import io.github.muntashirakon.AppManager.compat.ApplicationInfoCompat;
 import io.github.muntashirakon.AppManager.details.AppDetailsActivity;
+import io.github.muntashirakon.AppManager.intercept.IntentCompat;
 import io.github.muntashirakon.AppManager.logs.Log;
 import io.github.muntashirakon.AppManager.settings.Ops;
 import io.github.muntashirakon.AppManager.settings.Prefs;
@@ -399,7 +400,7 @@ protected void onNewIntent(Intent intent) {
         if (ACTION_PACKAGE_INSTALLED.equals(intent.getAction())) {
             sessionId = intent.getIntExtra(PackageInstaller.EXTRA_SESSION_ID, -1);
             packageName = intent.getStringExtra(PackageInstaller.EXTRA_PACKAGE_NAME);
-            Intent confirmIntent = intent.getParcelableExtra(Intent.EXTRA_INTENT);
+            Intent confirmIntent = IntentCompat.getParcelableExtra(intent, Intent.EXTRA_INTENT, Intent.class);
             try {
                 if (packageName == null || confirmIntent == null) throw new Exception("Empty confirmation intent.");
                 Log.d(TAG, "Requesting user confirmation for package " + packageName);

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/installer/PackageInstallerBroadcastReceiver.java
Patch:
@@ -16,6 +16,7 @@
 import io.github.muntashirakon.AppManager.BuildConfig;
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.compat.PendingIntentCompat;
+import io.github.muntashirakon.AppManager.intercept.IntentCompat;
 import io.github.muntashirakon.AppManager.logs.Log;
 import io.github.muntashirakon.AppManager.utils.NotificationUtils;
 import io.github.muntashirakon.AppManager.utils.Utils;
@@ -56,7 +57,7 @@ public void onReceive(Context context, @NonNull Intent intent) {
                 mContext.sendBroadcast(broadcastIntent2);
                 // Open confirmIntent using the PackageInstallerActivity.
                 // If the confirmIntent isn't open via an activity, it will fail for large apk files
-                Intent confirmIntent = intent.getParcelableExtra(Intent.EXTRA_INTENT);
+                Intent confirmIntent = IntentCompat.getParcelableExtra(intent, Intent.EXTRA_INTENT, Intent.class);
                 Intent intent2 = new Intent(mContext, PackageInstallerActivity.class);
                 intent2.setAction(PackageInstallerActivity.ACTION_PACKAGE_INSTALLED);
                 intent2.putExtra(Intent.EXTRA_INTENT, confirmIntent);

File: app/src/main/java/io/github/muntashirakon/AppManager/crypto/OpenPGPCrypto.java
Patch:
@@ -36,6 +36,7 @@
 import io.github.muntashirakon.AppManager.BuildConfig;
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.compat.PendingIntentCompat;
+import io.github.muntashirakon.AppManager.intercept.IntentCompat;
 import io.github.muntashirakon.AppManager.logs.Log;
 import io.github.muntashirakon.AppManager.settings.Prefs;
 import io.github.muntashirakon.AppManager.utils.NotificationUtils;
@@ -297,7 +298,7 @@ private void handleResult(@NonNull Intent result) {
                 // Intent wrapper
                 Intent intent = new Intent(context, OpenPGPCryptoActivity.class);
                 intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-                intent.putExtra(OpenPgpApi.RESULT_INTENT, (PendingIntent) result.getParcelableExtra(OpenPgpApi.RESULT_INTENT));
+                intent.putExtra(OpenPgpApi.RESULT_INTENT, IntentCompat.getParcelableExtra(result, OpenPgpApi.RESULT_INTENT, PendingIntent.class));
                 String openPGP = "Open PGP";
                 // We don't need a DELETE intent since the time will be expired anyway
                 NotificationCompat.Builder builder = NotificationUtils.getHighPriorityNotificationBuilder(context)
@@ -317,7 +318,7 @@ private void handleResult(@NonNull Intent result) {
             }
             case OpenPgpApi.RESULT_CODE_ERROR:
                 errorFlag = true;
-                OpenPgpError error = result.getParcelableExtra(OpenPgpApi.RESULT_ERROR);
+                OpenPgpError error = IntentCompat.getParcelableExtra(result, OpenPgpApi.RESULT_ERROR, OpenPgpError.class);
                 if (error != null) {
                     Log.e(TAG, "handleResult: (" + error.getErrorId() + ") " + error.getMessage());
                 } else Log.e(TAG, "handleResult: Error occurred during en/decryption process");

File: app/src/main/java/io/github/muntashirakon/AppManager/crypto/OpenPGPCryptoActivity.java
Patch:
@@ -16,6 +16,7 @@
 import java.util.Objects;
 
 import io.github.muntashirakon.AppManager.BaseActivity;
+import io.github.muntashirakon.AppManager.intercept.IntentCompat;
 
 public class OpenPGPCryptoActivity extends BaseActivity {
     private final ActivityResultLauncher<IntentSenderRequest> confirmationLauncher = registerForActivityResult(
@@ -39,7 +40,7 @@ protected void onAuthenticated(@Nullable Bundle savedInstanceState) {
     @Override
     protected void onNewIntent(Intent intent) {
         super.onNewIntent(intent);
-        PendingIntent pi = Objects.requireNonNull(intent.getParcelableExtra(OpenPgpApi.RESULT_INTENT));
+        PendingIntent pi = Objects.requireNonNull(IntentCompat.getParcelableExtra(intent, OpenPgpApi.RESULT_INTENT, PendingIntent.class));
         confirmationLauncher.launch(new IntentSenderRequest.Builder(pi).build());
     }
 }

File: app/src/main/java/io/github/muntashirakon/AppManager/logcat/LogcatRecordingService.java
Patch:
@@ -26,6 +26,7 @@
 import io.github.muntashirakon.AppManager.BuildConfig;
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.compat.PendingIntentCompat;
+import io.github.muntashirakon.AppManager.intercept.IntentCompat;
 import io.github.muntashirakon.AppManager.logcat.helper.SaveLogHelper;
 import io.github.muntashirakon.AppManager.logcat.helper.ServiceHelper;
 import io.github.muntashirakon.AppManager.logcat.helper.WidgetHelper;
@@ -150,7 +151,7 @@ protected void onHandleIntent(@Nullable Intent intent) {
         boolean searchCriteriaWillAlwaysMatch = searchCriteria.isEmpty();
         boolean logLevelAcceptsEverything = logLevel == android.util.Log.VERBOSE;
         StringBuilder stringBuilder = new StringBuilder();
-        LogcatReaderLoader loader = intent.getParcelableExtra(EXTRA_LOADER);
+        LogcatReaderLoader loader = IntentCompat.getParcelableExtra(intent, EXTRA_LOADER, LogcatReaderLoader.class);
         if (loader == null) {
             // No loader found
             return;

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/crypto/OpenPgpKeySelectionDialogFragment.java
Patch:
@@ -33,6 +33,7 @@
 
 import io.github.muntashirakon.AppManager.AppManager;
 import io.github.muntashirakon.AppManager.R;
+import io.github.muntashirakon.AppManager.intercept.IntentCompat;
 import io.github.muntashirakon.AppManager.logs.Log;
 import io.github.muntashirakon.AppManager.settings.Prefs;
 import io.github.muntashirakon.dialog.SearchableSingleChoiceDialogBuilder;
@@ -130,12 +131,12 @@ private void getUserId(@NonNull Intent data) {
                     break;
                 }
                 case OpenPgpApi.RESULT_CODE_USER_INTERACTION_REQUIRED: {
-                    PendingIntent pi = Objects.requireNonNull(result.getParcelableExtra(OpenPgpApi.RESULT_INTENT));
+                    PendingIntent pi = Objects.requireNonNull(IntentCompat.getParcelableExtra(result, OpenPgpApi.RESULT_INTENT, PendingIntent.class));
                     keyIdResultLauncher.launch(new IntentSenderRequest.Builder(pi).build());
                     break;
                 }
                 case OpenPgpApi.RESULT_CODE_ERROR: {
-                    OpenPgpError error = result.getParcelableExtra(OpenPgpApi.RESULT_ERROR);
+                    OpenPgpError error = IntentCompat.getParcelableExtra(result, OpenPgpApi.RESULT_ERROR, OpenPgpError.class);
                     if (error != null) {
                         Log.e(OpenPgpApi.TAG, "RESULT_CODE_ERROR: " + error.getMessage());
                     }

File: app/src/main/java/io/github/muntashirakon/AppManager/sharedpref/SharedPrefsActivity.java
Patch:
@@ -33,6 +33,7 @@
 
 import io.github.muntashirakon.AppManager.BaseActivity;
 import io.github.muntashirakon.AppManager.R;
+import io.github.muntashirakon.AppManager.intercept.IntentCompat;
 import io.github.muntashirakon.AppManager.utils.UIUtils;
 import io.github.muntashirakon.AppManager.utils.appearance.ColorCodes;
 import io.github.muntashirakon.io.Paths;
@@ -55,7 +56,7 @@ public class SharedPrefsActivity extends BaseActivity implements
     protected void onAuthenticated(Bundle savedInstanceState) {
         setContentView(R.layout.activity_shared_prefs);
         setSupportActionBar(findViewById(R.id.toolbar));
-        Uri sharedPrefUri = getIntent().getParcelableExtra(EXTRA_PREF_LOCATION);
+        Uri sharedPrefUri = IntentCompat.getParcelableExtra(getIntent(), EXTRA_PREF_LOCATION, Uri.class);
         String appLabel = getIntent().getStringExtra(EXTRA_PREF_LABEL);
         if (sharedPrefUri == null) {
             finish();

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/ApkFile.java
Patch:
@@ -730,12 +730,12 @@ public long getFileSize() {
          * @throws IOException If the APK cannot be signed or cached.
          */
         public File getSignedFile() throws IOException {
-            if (Paths.exists(signedFile)) return signedFile;
             File realFile = getRealCachedFile();
             if (!needSigning()) {
                 // Return original/real file if signing is not requested
                 return realFile;
             }
+            if (Paths.exists(signedFile)) return signedFile;
             signedFile = fileCache.createCachedFile("apk");
             SigSchemes sigSchemes = Prefs.Signing.getSigSchemes();
             boolean zipAlign = Prefs.Signing.zipAlign();

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/explorer/AppExplorerFragment.java
Patch:
@@ -23,6 +23,7 @@
 import java.io.File;
 
 import io.github.muntashirakon.AppManager.R;
+import io.github.muntashirakon.AppManager.compat.BundleCompat;
 import io.github.muntashirakon.AppManager.fm.FmListOptions;
 import io.github.muntashirakon.widget.MultiSelectionView;
 import io.github.muntashirakon.widget.SwipeRefreshLayout;
@@ -65,7 +66,7 @@ public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup c
     @Override
     public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        uri = requireArguments().getParcelable(ARG_NAME);
+        uri = BundleCompat.getParcelable(requireArguments(), ARG_NAME, Uri.class);
         activity = (AppExplorerActivity) requireActivity();
         // Set title and subtitle
         ActionBar actionBar = activity.getSupportActionBar();

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/installer/ApkQueueItem.java
Patch:
@@ -12,6 +12,7 @@
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
+import androidx.core.os.ParcelCompat;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -67,7 +68,7 @@ static List<ApkQueueItem> fromIntent(@NonNull Intent intent) {
     }
 
     protected ApkQueueItem(@NonNull Parcel in) {
-        uri = in.readParcelable(Uri.class.getClassLoader());
+        uri = ParcelCompat.readParcelable(in, Uri.class.getClassLoader(), Uri.class);
         packageName = in.readString();
         appLabel = in.readString();
         mimeType = in.readString();

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/splitapk/SplitApkChooser.java
Patch:
@@ -21,6 +21,7 @@
 import aosp.libcore.util.EmptyArray;
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.apk.ApkFile;
+import io.github.muntashirakon.AppManager.compat.BundleCompat;
 import io.github.muntashirakon.AppManager.utils.ArrayUtils;
 import io.github.muntashirakon.AppManager.utils.UIUtils;
 import io.github.muntashirakon.dialog.SearchableMultiChoiceDialogBuilder;
@@ -66,7 +67,7 @@ public interface OnTriggerInstallInterface {
     public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {
         int apkFileKey = requireArguments().getInt(EXTRA_APK_FILE_KEY, -1);
         String actionName = requireArguments().getString(EXTRA_ACTION_NAME);
-        ApplicationInfo appInfo = requireArguments().getParcelable(EXTRA_APP_INFO);
+        ApplicationInfo appInfo = BundleCompat.getParcelable(requireArguments(), EXTRA_APP_INFO, ApplicationInfo.class);
         String versionInfo = requireArguments().getString(EXTRA_VERSION_INFO);
         pm = requireActivity().getPackageManager();
         if (apkFileKey == -1 || appInfo == null) {

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/dialog/BackupFragment.java
Patch:
@@ -48,7 +48,6 @@ public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceStat
 
         MaterialAlertView messageView = view.findViewById(R.id.message);
         RecyclerView recyclerView = view.findViewById(android.R.id.list);
-        recyclerView.setHasFixedSize(true);
         recyclerView.setLayoutManager(new LinearLayoutManager(mContext, LinearLayoutManager.VERTICAL, false));
         int supportedFlags = BackupFlags.getSupportedBackupFlags();
         // Remove unsupported flags

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/dialog/RestoreMultipleFragment.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.util.Set;
 
-import io.github.muntashirakon.AppManager.BuildConfig;
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.backup.BackupFlags;
 import io.github.muntashirakon.AppManager.batchops.BatchOpsManager;
@@ -48,7 +47,6 @@ public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceStat
 
         MaterialAlertView messageView = view.findViewById(R.id.message);
         RecyclerView recyclerView = view.findViewById(android.R.id.list);
-        recyclerView.setHasFixedSize(true);
         recyclerView.setLayoutManager(new LinearLayoutManager(mContext, LinearLayoutManager.VERTICAL, false));
         int supportedFlags = mViewModel.getWorstBackupFlag();
         // Inject no signatures

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/dialog/RestoreSingleFragment.java
Patch:
@@ -60,7 +60,6 @@ public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceStat
         MaterialButton deleteButton = view.findViewById(R.id.action_delete);
         MaterialButton moreButton = view.findViewById(R.id.more);
 
-        recyclerView.setHasFixedSize(true);
         recyclerView.setLayoutManager(new LinearLayoutManager(mContext, LinearLayoutManager.VERTICAL, false));
         BackupAdapter adapter = new BackupAdapter(mContext, mViewModel.getBackupInfo().getBackups(),
                 (metadata, selectionCount, added) -> {
@@ -168,7 +167,7 @@ private void handleDelete(List<MetadataManager.Metadata> selectedBackups) {
 
     private static class BackupAdapter extends RecyclerView.Adapter<BackupAdapter.ViewHolder> {
         public interface OnSelectionListener {
-            void onSelectionChanged(MetadataManager.Metadata metadata, int selectionCount, boolean added);
+            void onSelectionChanged(@Nullable MetadataManager.Metadata metadata, int selectionCount, boolean added);
         }
 
         private final int mLayoutId;

File: app/src/main/java/io/github/muntashirakon/AppManager/batchops/BatchOpsManager.java
Patch:
@@ -46,6 +46,7 @@
 import io.github.muntashirakon.AppManager.backup.convert.ImportType;
 import io.github.muntashirakon.AppManager.backup.dialog.BackupRestoreDialogFragment;
 import io.github.muntashirakon.AppManager.compat.AppOpsManagerCompat;
+import io.github.muntashirakon.AppManager.compat.BundleCompat;
 import io.github.muntashirakon.AppManager.compat.NetworkPolicyManagerCompat;
 import io.github.muntashirakon.AppManager.compat.NetworkPolicyManagerCompat.NetPolicy;
 import io.github.muntashirakon.AppManager.compat.PackageManagerCompat;
@@ -359,7 +360,7 @@ private Result opBackupRestore(@BackupRestoreDialogFragment.ActionMode int mode)
     private Result opImportBackups() {
         @ImportType
         int backupType = args.getInt(ARG_BACKUP_TYPE, ImportType.OAndBackup);
-        Uri uri = Objects.requireNonNull(args.getParcelable(ARG_URI));
+        Uri uri = Objects.requireNonNull(BundleCompat.getParcelable(args, ARG_URI, Uri.class));
         boolean removeImported = args.getBoolean(ARG_REMOVE_IMPORTED, false);
         int userHandle = UserHandleHidden.myUserId();
         Path[] files;
@@ -671,7 +672,7 @@ private Result opUninstall() {
     @RequiresApi(Build.VERSION_CODES.N)
     private Result opPerformDexOpt() {
         List<UserPackagePair> failedPackages = new ArrayList<>();
-        DexOptimizationOptions options = args.getParcelable(ARG_OPTIONS);
+        DexOptimizationOptions options = BundleCompat.getParcelable(args, ARG_OPTIONS, DexOptimizationOptions.class);
         IPackageManager pm = PackageManagerCompat.getPackageManager();
         if (options.packages == null) {
             // Include all packages

File: app/src/main/java/io/github/muntashirakon/AppManager/batchops/BatchOpsResultsActivity.java
Patch:
@@ -55,7 +55,6 @@ protected void onAuthenticated(@Nullable Bundle savedInstanceState) {
         setSupportActionBar(findViewById(R.id.toolbar));
         findViewById(R.id.progress_linear).setVisibility(View.GONE);
         mRecyclerView = findViewById(R.id.list);
-        mRecyclerView.setHasFixedSize(true);
         mRecyclerView.setLayoutManager(new LinearLayoutManager(this));
         MaterialButton logToggler = findViewById(R.id.action_view_logs);
         mLogViewer = findViewById(R.id.text);
@@ -95,8 +94,8 @@ private void handleIntent(@NonNull Intent intent) {
         intent.removeExtra(BatchOpsService.EXTRA_FAILURE_MESSAGE);
     }
 
-    private boolean restartIfNeeded(@NonNull Intent intent) {
-        if (getIntent().getBooleanExtra(BatchOpsService.EXTRA_REQUIRES_RESTART, false)) {
+    private static boolean restartIfNeeded(@NonNull Intent intent) {
+        if (intent.getBooleanExtra(BatchOpsService.EXTRA_REQUIRES_RESTART, false)) {
             RestartUtils.restart(RestartUtils.RESTART_NORMAL);
             return true;
         }

File: app/src/main/java/io/github/muntashirakon/AppManager/compat/InstallSourceInfoCompat.java
Patch:
@@ -12,6 +12,7 @@
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.annotation.RequiresApi;
+import androidx.core.os.ParcelCompat;
 
 public class InstallSourceInfoCompat implements Parcelable {
 
@@ -69,7 +70,7 @@ public void writeToParcel(@NonNull Parcel dest, int flags) {
     private InstallSourceInfoCompat(Parcel source) {
         mInitiatingPackageName = source.readString();
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
-            mInitiatingPackageSigningInfo = source.readParcelable(SigningInfo.class.getClassLoader());
+            mInitiatingPackageSigningInfo = ParcelCompat.readParcelable(source, SigningInfo.class.getClassLoader(), SigningInfo.class);
         }
         mOriginatingPackageName = source.readString();
         mInstallingPackageName = source.readString();

File: app/src/main/java/io/github/muntashirakon/AppManager/details/info/AppInfoFragment.java
Patch:
@@ -234,7 +234,6 @@ public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceStat
         mSwipeRefresh.setOnRefreshListener(this);
         // Recycler view
         RecyclerView recyclerView = view.findViewById(android.R.id.list);
-        recyclerView.setHasFixedSize(true);
         recyclerView.setLayoutManager(new LinearLayoutManager(mActivity));
         // Horizontal view
         mHorizontalLayout = view.findViewById(R.id.horizontal_layout);

File: app/src/main/java/io/github/muntashirakon/AppManager/fm/FilePropertiesDialogFragment.java
Patch:
@@ -24,9 +24,11 @@
 
 import java.io.IOException;
 import java.util.Locale;
+import java.util.Objects;
 import java.util.concurrent.Future;
 
 import io.github.muntashirakon.AppManager.R;
+import io.github.muntashirakon.AppManager.compat.BundleCompat;
 import io.github.muntashirakon.AppManager.fm.icons.FmIconFetcher;
 import io.github.muntashirakon.AppManager.self.imagecache.ImageLoader;
 import io.github.muntashirakon.AppManager.users.Groups;
@@ -62,7 +64,7 @@ public View initRootView(@NonNull LayoutInflater inflater, @Nullable ViewGroup c
     @Override
     public void onBodyInitialized(@NonNull View bodyView, @Nullable Bundle savedInstanceState) {
         FilePropertiesViewModel viewModel = new ViewModelProvider(this).get(FilePropertiesViewModel.class);
-        Path path = Paths.get((Uri) requireArguments().getParcelable(ARG_PATH));
+        Path path = Paths.get(Objects.requireNonNull(BundleCompat.getParcelable(requireArguments(), ARG_PATH, Uri.class)));
         ImageView iconView = bodyView.findViewById(android.R.id.icon);
         TextView nameView = bodyView.findViewById(R.id.name);
         TextView summaryView = bodyView.findViewById(R.id.summary);

File: app/src/main/java/io/github/muntashirakon/AppManager/fm/FmFragment.java
Patch:
@@ -43,6 +43,7 @@
 import java.util.concurrent.atomic.AtomicInteger;
 
 import io.github.muntashirakon.AppManager.R;
+import io.github.muntashirakon.AppManager.compat.BundleCompat;
 import io.github.muntashirakon.AppManager.details.LauncherIconCreator;
 import io.github.muntashirakon.AppManager.utils.StorageUtils;
 import io.github.muntashirakon.AppManager.utils.ThreadUtils;
@@ -109,11 +110,11 @@ public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceStat
         Uri uri = null;
         AtomicInteger scrollPosition = new AtomicInteger(RecyclerView.NO_POSITION);
         if (savedInstanceState != null) {
-            uri = savedInstanceState.getParcelable("uri");
+            uri = BundleCompat.getParcelable(savedInstanceState, "uri", Uri.class);
             scrollPosition.set(savedInstanceState.getInt("position", RecyclerView.NO_POSITION));
         }
         if (uri == null) {
-            uri = requireArguments().getParcelable(ARG_URI);
+            uri = Objects.requireNonNull(BundleCompat.getParcelable(requireArguments(), ARG_URI, Uri.class));
         }
         activity = (FmActivity) requireActivity();
         // Set title and subtitle

File: app/src/main/java/io/github/muntashirakon/AppManager/fm/OpenWithDialogFragment.java
Patch:
@@ -34,8 +34,10 @@
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Objects;
 
 import io.github.muntashirakon.AppManager.R;
+import io.github.muntashirakon.AppManager.compat.BundleCompat;
 import io.github.muntashirakon.AppManager.intercept.ActivityInterceptor;
 import io.github.muntashirakon.AppManager.self.imagecache.ImageLoader;
 import io.github.muntashirakon.AppManager.settings.FeatureController;
@@ -78,7 +80,7 @@ public static OpenWithDialogFragment getInstance(@NonNull Path path, @Nullable S
     @Override
     public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {
         mViewModel = new ViewModelProvider(this).get(OpenWithViewModel.class);
-        mPath = Paths.get((Uri) requireArguments().getParcelable(ARG_PATH));
+        mPath = Paths.get(Objects.requireNonNull(BundleCompat.getParcelable(requireArguments(), ARG_PATH, Uri.class)));
         mCustomType = requireArguments().getString(ARG_TYPE, null);
         mAdapter = new MatchingActivitiesRecyclerViewAdapter(mViewModel, requireActivity());
         mAdapter.setIntent(getIntent(mPath, mCustomType));

File: app/src/main/java/io/github/muntashirakon/AppManager/logcat/AbsLogViewerFragment.java
Patch:
@@ -115,7 +115,6 @@ public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceStat
         mMultiSelectionView.setOnItemSelectedListener(this);
         mMultiSelectionView.hide();
         mRecyclerView.setAdapter(mLogListAdapter);
-        mRecyclerView.setHasFixedSize(true);
         mRecyclerView.addOnScrollListener(mRecyclerViewScrollListener);
         // Observers
         mViewModel.getExpandLogsLiveData().observe(getViewLifecycleOwner(), expanded -> {

File: app/src/main/java/io/github/muntashirakon/AppManager/logcat/SavedLogViewerFragment.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.List;
 
 import io.github.muntashirakon.AppManager.R;
+import io.github.muntashirakon.AppManager.compat.BundleCompat;
 import io.github.muntashirakon.AppManager.logcat.struct.LogLine;
 import io.github.muntashirakon.reflow.ReflowMenuViewWrapper;
 
@@ -40,7 +41,7 @@ public static SavedLogViewerFragment getInstance(@NonNull Uri uri) {
     @Override
     public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        Uri uri = requireArguments().getParcelable(ARG_FILE_URI);
+        Uri uri = BundleCompat.getParcelable(requireArguments(), ARG_FILE_URI, Uri.class);
         if (uri == null) {
             // TODO: 31/5/22 Handle invalid URI
             return;

File: app/src/main/java/io/github/muntashirakon/AppManager/runningapps/AppProcessItem.java
Patch:
@@ -6,6 +6,7 @@
 import android.os.Parcel;
 
 import androidx.annotation.NonNull;
+import androidx.core.os.ParcelCompat;
 
 import java.util.Objects;
 
@@ -22,7 +23,7 @@ public AppProcessItem(@NonNull ProcessEntry processEntry, @NonNull PackageInfo p
 
     protected AppProcessItem(@NonNull Parcel in) {
         super(in);
-        packageInfo = in.readParcelable(PackageInfo.class.getClassLoader());
+        packageInfo = Objects.requireNonNull(ParcelCompat.readParcelable(in, PackageInfo.class.getClassLoader(), PackageInfo.class));
     }
 
     public static final Creator<AppProcessItem> CREATOR = new Creator<AppProcessItem>() {

File: app/src/main/java/io/github/muntashirakon/AppManager/runningapps/ProcessItem.java
Patch:
@@ -6,6 +6,7 @@
 import android.os.Parcelable;
 
 import androidx.annotation.NonNull;
+import androidx.core.os.ParcelCompat;
 
 import java.util.Objects;
 
@@ -77,7 +78,7 @@ public int getThreadCount() {
     }
 
     protected ProcessItem(@NonNull Parcel in) {
-        processEntry = in.readParcelable(ProcessEntry.class.getClassLoader());
+        processEntry = Objects.requireNonNull(ParcelCompat.readParcelable(in, ProcessEntry.class.getClassLoader(), ProcessEntry.class));
         pid = processEntry.pid;
         ppid = processEntry.ppid;
         rss = processEntry.residentSetSize;

File: app/src/main/java/io/github/muntashirakon/AppManager/runningapps/RunningAppDetails.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.Locale;
 
 import io.github.muntashirakon.AppManager.R;
+import io.github.muntashirakon.AppManager.compat.BundleCompat;
 import io.github.muntashirakon.AppManager.details.AppDetailsActivity;
 import io.github.muntashirakon.AppManager.self.imagecache.ImageLoader;
 import io.github.muntashirakon.AppManager.utils.DateUtils;
@@ -52,7 +53,7 @@ public View initRootView(@NonNull LayoutInflater inflater, @Nullable ViewGroup c
     @Override
     public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        ProcessItem processItem = requireArguments().getParcelable(ARG_PS_ITEM);
+        ProcessItem processItem = BundleCompat.getParcelable(requireArguments(), ARG_PS_ITEM, ProcessItem.class);
         if (processItem == null) {
             dismiss();
             return;

File: app/src/main/java/io/github/muntashirakon/AppManager/sharedpref/EditPrefItemFragment.java
Patch:
@@ -31,6 +31,7 @@
 import java.util.Set;
 
 import io.github.muntashirakon.AppManager.R;
+import io.github.muntashirakon.AppManager.compat.BundleCompat;
 
 public class EditPrefItemFragment extends DialogFragment {
     public static final String TAG = EditPrefItemFragment.class.getSimpleName();
@@ -119,7 +120,7 @@ public PrefItem[] newArray(int size) {
     public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {
         FragmentActivity activity = requireActivity();
         Bundle args = requireArguments();
-        PrefItem prefItem = args.getParcelable(ARG_PREF_ITEM);
+        PrefItem prefItem = BundleCompat.getParcelable(args, ARG_PREF_ITEM, PrefItem.class);
         @Mode int mode = args.getInt(ARG_MODE);
 
         LayoutInflater inflater = LayoutInflater.from(activity);

File: app/src/main/java/io/github/muntashirakon/AppManager/types/ForegroundService.java
Patch:
@@ -17,6 +17,7 @@
 import androidx.annotation.UiThread;
 import androidx.annotation.WorkerThread;
 
+import io.github.muntashirakon.AppManager.compat.BundleCompat;
 import io.github.muntashirakon.AppManager.utils.ThreadUtils;
 
 public abstract class ForegroundService extends Service {
@@ -48,7 +49,7 @@ public ServiceHandler(Looper looper) {
 
         @Override
         public void handleMessage(Message msg) {
-            Intent intent = msg.getData().getParcelable("intent");
+            Intent intent = BundleCompat.getParcelable(msg.getData(), "intent", Intent.class);
             ThreadUtils.postOnMainThread(() -> onStartIntent(intent));
             onHandleIntent(intent);
             // It works because of Handler uses FIFO

File: app/src/main/java/io/github/muntashirakon/AppManager/types/PackageChangeReceiver.java
Patch:
@@ -27,6 +27,7 @@
 import io.github.muntashirakon.AppManager.BuildConfig;
 import io.github.muntashirakon.AppManager.batchops.BatchOpsManager;
 import io.github.muntashirakon.AppManager.batchops.BatchOpsService;
+import io.github.muntashirakon.AppManager.compat.BundleCompat;
 
 import static io.github.muntashirakon.AppManager.batchops.BatchOpsService.ACTION_BATCH_OPS_COMPLETED;
 
@@ -116,7 +117,7 @@ public ReceiverHandler(Looper looper) {
 
         @Override
         public void handleMessage(@NonNull Message msg) {
-            Intent intent = msg.getData().getParcelable("intent");
+            Intent intent = BundleCompat.getParcelable(msg.getData(), "intent", Intent.class);
             switch (Objects.requireNonNull(intent.getAction())) {
                 case Intent.ACTION_PACKAGE_REMOVED:
                     if (intent.getBooleanExtra(Intent.EXTRA_REPLACING, false)) return;

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/LangUtils.java
Patch:
@@ -2,6 +2,7 @@
 
 package io.github.muntashirakon.AppManager.utils;
 
+import android.annotation.SuppressLint;
 import android.content.Context;
 import android.content.res.Configuration;
 import android.content.res.Resources;
@@ -23,6 +24,7 @@ public final class LangUtils {
 
     private static ArrayMap<String, Locale> sLocaleMap;
 
+    @SuppressLint("AppBundleLocaleChanges") // We don't use Play Store
     private static void loadAppLanguages(@NonNull Context context) {
         if (sLocaleMap == null) sLocaleMap = new ArrayMap<>();
         Resources res = context.getResources();

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/MultithreadedExecutor.java
Patch:
@@ -2,6 +2,7 @@
 
 package io.github.muntashirakon.AppManager.utils;
 
+import androidx.annotation.AnyThread;
 import androidx.annotation.NonNull;
 import androidx.annotation.WorkerThread;
 
@@ -21,7 +22,7 @@
 public class MultithreadedExecutor implements ExecutorService {
     private static final List<MultithreadedExecutor> executorCache = new ArrayList<>();
 
-    @WorkerThread
+    @AnyThread
     @NonNull
     public static MultithreadedExecutor getNewInstance() {
         if (executorCache.size() > 0) {

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/appearance/AppearanceUtils.java
Patch:
@@ -2,6 +2,7 @@
 
 package io.github.muntashirakon.AppManager.utils.appearance;
 
+import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.app.Application;
 import android.app.UiModeManager;
@@ -213,6 +214,7 @@ private static Configuration createOverrideConfiguration(@NonNull Context contex
         return createOverrideConfiguration(context, options, null, false);
     }
 
+    @SuppressLint("AppBundleLocaleChanges") // We don't use Play Store
     @NonNull
     private static Configuration createOverrideConfiguration(@NonNull Context context,
                                                              @NonNull AppearanceOptions options,

File: app/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
Patch:
@@ -679,7 +679,7 @@ private void tryToConsumeSecondEOFRecord() throws IOException {
         } finally {
             if (shouldReset && marked) {
                 pushedBackBytes(recordSize);
-            	inputStream.reset();
+                inputStream.reset();
             }
         }
     }

File: libcore/ui/src/main/java/io/github/muntashirakon/dialog/SearchableMultiChoiceDialogBuilder.java
Patch:
@@ -178,7 +178,7 @@ public SearchableMultiChoiceDialogBuilder<T> setTitle(@StringRes int title) {
         return this;
     }
 
-    public SearchableMultiChoiceDialogBuilder<T> setTitle(View title) {
+    public SearchableMultiChoiceDialogBuilder<T> setTitle(@Nullable View title) {
         builder.setCustomTitle(title);
         return this;
     }

File: libcore/ui/src/main/java/io/github/muntashirakon/reflow/ReflowMenuPresenter.java
Patch:
@@ -16,6 +16,7 @@
 import androidx.appcompat.view.menu.MenuPresenter;
 import androidx.appcompat.view.menu.MenuView;
 import androidx.appcompat.view.menu.SubMenuBuilder;
+import androidx.core.os.ParcelCompat;
 
 import com.google.android.material.badge.BadgeDrawable;
 import com.google.android.material.badge.BadgeUtils;
@@ -128,7 +129,7 @@ static class SavedState implements Parcelable {
 
         SavedState(@NonNull Parcel in) {
             selectedItemId = in.readInt();
-            badgeSavedStates = in.readParcelable(getClass().getClassLoader());
+            badgeSavedStates = ParcelCompat.readParcelable(in, getClass().getClassLoader(), ParcelableSparseArray.class);
         }
 
         @Override

File: app/src/main/java/io/github/muntashirakon/AppManager/fm/ContentType2.java
Patch:
@@ -25,6 +25,7 @@ public enum ContentType2 {
     PLIST("application/x-plist", "property-list", "plist"),
     PROPERTIES("text/plain", "properties", "prop", "properties"),
     SMALI("text/x-smali", "smali", "smali"),
+    SQLITE3("application/vnd.sqlite3", "sqlite", "db", "db3", "s3db", "sl3", "sqlite", "sqlite3"),
     TOML("application/toml", "toml", "toml"),
     YAML("text/plain", "yaml", "yml", "yaml"),
     /** default if no specific match to the mime-type */

File: app/src/main/java/io/github/muntashirakon/AppManager/fm/icons/FmIcons.java
Patch:
@@ -161,6 +161,7 @@ final class FmIcons {
             put("text/x-yaml", DRAWABLE_CODE);
             put("text/vcard", DRAWABLE_CONTACT);
             put("text/x-vcard", DRAWABLE_CONTACT);
+            put("application/vnd.sqlite3", DRAWABLE_DATABASE);
             put("application/x-sqlite3", DRAWABLE_DATABASE);
             put("inode/directory", DRAWABLE_DIRECTORY);
             put(DocumentsContract.Document.MIME_TYPE_DIR, DRAWABLE_DIRECTORY);

File: app/src/main/java/io/github/muntashirakon/AppManager/fm/FmAdapter.java
Patch:
@@ -23,6 +23,7 @@
 import com.google.android.material.dialog.MaterialAlertDialogBuilder;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 import java.util.Locale;
 
@@ -34,7 +35,7 @@
 import io.github.muntashirakon.widget.MultiSelectionView;
 
 class FmAdapter extends MultiSelectionView.Adapter<FmAdapter.ViewHolder> {
-    private final List<FmItem> adapterList = new ArrayList<>();
+    private final List<FmItem> adapterList = Collections.synchronizedList(new ArrayList<>());
     private final FmViewModel viewModel;
     private final FmActivity fmActivity;
     @ColorInt

File: app/src/main/java/io/github/muntashirakon/AppManager/fm/FmFragment.java
Patch:
@@ -31,6 +31,7 @@
 
 import com.google.android.material.dialog.MaterialAlertDialogBuilder;
 
+import java.util.Collections;
 import java.util.concurrent.atomic.AtomicInteger;
 
 import io.github.muntashirakon.AppManager.R;
@@ -160,6 +161,7 @@ public void onChanged() {
                 if (v != null) {
                     model.setScrollPosition(uri1, recyclerView.getChildAdapterPosition(v));
                 }
+                adapter.setFmList(Collections.emptyList());
             }
         });
         model.getFmItemsLiveData().observe(getViewLifecycleOwner(), fmItems -> {

File: app/src/main/java/io/github/muntashirakon/AppManager/logcat/LogViewerViewModel.java
Patch:
@@ -152,7 +152,7 @@ public void startLogcat(@Nullable WeakReference<LogLinesAvailableInterface> logL
 
                 String line;
                 LinkedList<LogLine> initialLines = new LinkedList<>();
-                while ((line = mReader.readLine()) != null && !Thread.currentThread().isInterrupted()) {
+                while ((line = mReader.readLine()) != null && !ThreadUtils.isInterrupted()) {
                     if (mPaused) {
                         synchronized (mLock) {
                             if (mPaused) {

File: app/src/main/java/io/github/muntashirakon/AppManager/fm/FmFragment.java
Patch:
@@ -205,12 +205,12 @@ public void onChanged() {
                 subtitle.append(getString(R.string.empty_folder));
             }
             // 3. Mode
-            if (folderShortInfo.mode > 0) {
+            if (folderShortInfo.canRead || folderShortInfo.canWrite) {
                 subtitle.append(" • ");
-                if ((folderShortInfo.mode & 0x4) != 0) {
+                if (folderShortInfo.canRead) {
                     subtitle.append("R");
                 }
-                if ((folderShortInfo.mode & 0x2) != 0) {
+                if (folderShortInfo.canWrite) {
                     subtitle.append("W");
                 }
             }

File: app/src/main/java/io/github/muntashirakon/AppManager/fm/FmViewModel.java
Patch:
@@ -153,7 +153,8 @@ public void loadFiles(@NonNull Uri uri) {
             }
             folderShortInfo.folderCount = folderCount;
             folderShortInfo.fileCount = count - folderCount;
-            folderShortInfo.mode = (path.getMode() & 060) >> 3;
+            folderShortInfo.canRead = path.canRead();
+            folderShortInfo.canWrite = path.canWrite();
             if (Thread.currentThread().isInterrupted()) {
                 return;
             }

File: app/src/main/java/io/github/muntashirakon/AppManager/fm/FolderShortInfo.java
Patch:
@@ -5,6 +5,7 @@
 final class FolderShortInfo {
     public int folderCount;
     public int fileCount;
-    public int mode;
+    public boolean canRead;
+    public boolean canWrite;
     public long size = -1;
 }

File: app/src/main/java/io/github/muntashirakon/AppManager/fm/FmProvider.java
Patch:
@@ -133,7 +133,7 @@ public Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable S
                 // TODO: We should actually implement a DocumentsProvider since we are handling
                 //  ACTION_OPEN_DOCUMENT.
                 case DocumentsContract.Document.COLUMN_MIME_TYPE:
-                    row.add(path.getType());
+                    row.add(path.isDirectory() ? DocumentsContract.Document.MIME_TYPE_DIR : path.getType());
                     break;
                 case DocumentsContract.Document.COLUMN_LAST_MODIFIED:
                     row.add(path.lastModified());

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/MetadataManager.java
Patch:
@@ -367,7 +367,7 @@ public Metadata setupMetadata(@NonNull PackageInfo packageInfo,
         }
         mMetadata.backupTime = 0;
         try {
-            mMetadata.installer = PackageManagerCompat.getInstallerPackage(packageInfo.packageName);
+            mMetadata.installer = PackageManagerCompat.getInstallerPackageName(packageInfo.packageName, userHandle);
         } catch (Throwable e) {
             e.printStackTrace();
         }

File: app/src/main/java/io/github/muntashirakon/AppManager/crypto/ks/CompatUtil.java
Patch:
@@ -5,7 +5,6 @@
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.os.Build;
-import android.security.KeyPairGeneratorSpec;
 import android.security.keystore.KeyGenParameterSpec;
 import android.security.keystore.KeyProperties;
 import android.util.Base64;
@@ -132,7 +131,7 @@ private static synchronized SecretKeyAndVersion getAesGcmLocalProtectionKey(@Non
         Calendar end = Calendar.getInstance();
         end.add(Calendar.YEAR, 10);
 
-        generator.initialize(new KeyPairGeneratorSpec.Builder(context)
+        generator.initialize(new android.security.KeyPairGeneratorSpec.Builder(context)
                 .setAlgorithmParameterSpec(new RSAKeyGenParameterSpec(2048,
                         RSAKeyGenParameterSpec.F4))
                 .setAlias(RSA_WRAP_LOCAL_PROTECTION_KEY_ALIAS)

File: app/src/main/java/io/github/muntashirakon/AppManager/details/info/AppInfoViewModel.java
Patch:
@@ -314,7 +314,7 @@ public void loadAppInfo() {
                         Build.VERSION.SDK_INT >= Build.VERSION_CODES.O ? applicationInfo.storageUuid : null);
                 // Set installer app
                 try {
-                    String installerPackageName = PackageManagerCompat.getInstallerPackageName(packageName);
+                    String installerPackageName = PackageManagerCompat.getInstallerPackageName(packageName, userId);
                     if (installerPackageName != null) {
                         String applicationLabel;
                         try {

File: app/src/main/java/io/github/muntashirakon/AppManager/types/PackageSizeInfo.java
Patch:
@@ -4,7 +4,6 @@
 
 import android.annotation.UserIdInt;
 import android.app.usage.StorageStats;
-import android.content.pm.PackageStats;
 import android.os.Build;
 
 import androidx.annotation.NonNull;
@@ -24,7 +23,7 @@ public class PackageSizeInfo {
     public final long obbSize;
 
     @SuppressWarnings("deprecation")
-    public PackageSizeInfo(@NonNull PackageStats packageStats) {
+    public PackageSizeInfo(@NonNull android.content.pm.PackageStats packageStats) {
         packageName = packageStats.packageName;
         codeSize = packageStats.codeSize + packageStats.externalCodeSize;
         dataSize = packageStats.dataSize + packageStats.externalDataSize;

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/PackageUtils.java
Patch:
@@ -27,7 +27,6 @@
 import android.content.pm.LauncherApps;
 import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager;
-import android.content.pm.PackageStats;
 import android.content.pm.Signature;
 import android.content.pm.SigningInfo;
 import android.os.Build;
@@ -285,7 +284,7 @@ public static PackageSizeInfo getPackageSizeInfo(@NonNull Context context, @NonN
                         new IPackageStatsObserver.Stub() {
                             @SuppressWarnings("deprecation")
                             @Override
-                            public void onGetStatsCompleted(final PackageStats pStats, boolean succeeded) {
+                            public void onGetStatsCompleted(final android.content.pm.PackageStats pStats, boolean succeeded) {
                                 try {
                                     if (succeeded) packageSizeInfo.set(new PackageSizeInfo(pStats));
                                 } finally {

File: app/src/main/java/io/github/muntashirakon/AppManager/db/entity/App.java
Patch:
@@ -18,6 +18,7 @@
 import java.io.Serializable;
 import java.util.Objects;
 
+import io.github.muntashirakon.AppManager.compat.ApplicationInfoCompat;
 import io.github.muntashirakon.AppManager.rules.compontents.ComponentUtils;
 import io.github.muntashirakon.AppManager.utils.FreezeUtils;
 import io.github.muntashirakon.AppManager.utils.Utils;
@@ -129,7 +130,7 @@ public static App fromPackageInfo(@NonNull Context context, @NonNull PackageInfo
                 && applicationInfo.publicSourceDir != null && new File(applicationInfo.publicSourceDir).exists();
         app.flags = applicationInfo.flags;
         app.isEnabled = !FreezeUtils.isFrozen(applicationInfo);
-        app.packageLabel = applicationInfo.loadLabel(context.getPackageManager()).toString();
+        app.packageLabel = ApplicationInfoCompat.loadLabelSafe(applicationInfo, context.getPackageManager()).toString();
         app.sdk = applicationInfo.targetSdkVersion;
         app.versionName = packageInfo.versionName;
         app.versionCode = PackageInfoCompat.getLongVersionCode(packageInfo);

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/signing/Signer.java
Patch:
@@ -112,7 +112,7 @@ public boolean sign(File in, File out, int minSdk, boolean alignFileSize) {
         ApkSigner signer = builder.build();
         Log.i(TAG, String.format("SignApk: %s", in));
         try {
-            if (alignFileSize) {
+            if (alignFileSize && !ZipAlignVerifier.verify(in, 4, true)) {
                 ZipAlign.align4(in);
             }
             signer.sign();

File: app/src/main/java/io/github/muntashirakon/AppManager/details/ActivityLauncherShortcutActivity.java
Patch:
@@ -23,11 +23,12 @@ public class ActivityLauncherShortcutActivity extends BaseActivity {
     @Override
     protected void onAuthenticated(@Nullable Bundle savedInstanceState) {
         Intent intent = getIntent();
-        if (!intent.hasExtra(EXTRA_PKG) || !intent.hasExtra(EXTRA_CLS)) {
+        if (!Intent.ACTION_CREATE_SHORTCUT.equals(intent.getAction()) || !intent.hasExtra(EXTRA_PKG) || !intent.hasExtra(EXTRA_CLS)) {
             // Invalid intent
             finishAndRemoveTask();
             return;
         }
+        intent.setAction(null);
         intent.setClassName(intent.getStringExtra(EXTRA_PKG), intent.getStringExtra(EXTRA_CLS));
         int userId = intent.getIntExtra(EXTRA_USR, UserHandleHidden.myUserId());
         intent.removeExtra(EXTRA_PKG);

File: app/src/main/java/io/github/muntashirakon/AppManager/intercept/EditShortcutDialogFragment.java
Patch:
@@ -130,7 +130,7 @@ public void afterTextChanged(Editable s) {
     public Drawable getDrawable(@NonNull String iconResString) {
         try {
             return ResourceUtil.getResourceFromName(mPackageManager, iconResString).getDrawable(requireActivity().getTheme());
-        } catch (PackageManager.NameNotFoundException ignore) {
+        } catch (PackageManager.NameNotFoundException | Resources.NotFoundException ignore) {
             return mPackageManager.getDefaultActivityIcon();
         }
     }

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/convert/TBConverter.java
Patch:
@@ -27,7 +27,6 @@
 import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
 import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
 import org.apache.commons.compress.compressors.CompressorInputStream;
-import org.apache.commons.compress.compressors.CompressorOutputStream;
 import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
 import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
 import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
@@ -474,15 +473,15 @@ private void readPropFile() throws BackupException {
     private Path getDataFile(String filePrefix, @TarUtils.TarType String tarType) throws FileNotFoundException {
         String filename = filePrefix + ".tar";
         if (TAR_BZIP2.equals(tarType)) filename += ".bz2";
-        if (TAR_ZSTD.equals(tarType)) filename += ".zst";
+        else if (TAR_ZSTD.equals(tarType)) filename += ".zst";
         else filename += ".gz";
         return mBackupLocation.findFile(filename);
     }
 
     @NonNull
     private Path getApkFile(String apkName, @TarUtils.TarType String tarType) throws FileNotFoundException {
         if (TAR_BZIP2.equals(tarType)) apkName += ".bz2";
-        if (TAR_ZSTD.equals(tarType)) apkName += ".zst";
+        else if (TAR_ZSTD.equals(tarType)) apkName += ".zst";
         else apkName += ".gz";
         return mBackupLocation.findFile(apkName);
     }

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/ApkFile.java
Patch:
@@ -738,14 +738,15 @@ public File getSignedFile() throws IOException {
                 return realFile;
             }
             signedFile = fileCache.createCachedFile("apk");
-            SigSchemes sigSchemes = SigSchemes.fromPref();
+            SigSchemes sigSchemes = Prefs.Signing.getSigSchemes();
+            boolean zipAlign = Prefs.Signing.zipAlign();
             try {
                 Signer signer = Signer.getInstance(sigSchemes);
                 if (signer.isV4SchemeEnabled()) {
                     idsigFile = fileCache.createCachedFile("idsig");
                     signer.setIdsigFile(idsigFile);
                 }
-                if (signer.sign(realFile, signedFile)) {
+                if (signer.sign(realFile, signedFile, -1, zipAlign)) {
                     if (Signer.verify(sigSchemes, signedFile, idsigFile)) {
                         return signedFile;
                     }

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/AppPref.java
Patch:
@@ -127,6 +127,8 @@ public enum PrefKey {
 
         PREF_VIRUS_TOTAL_API_KEY_STR,
         PREF_VIRUS_TOTAL_PROMPT_BEFORE_UPLOADING_BOOL,
+
+        PREF_ZIP_ALIGN_BOOL,
         ;
 
         public static final String[] keys = new String[values().length];
@@ -378,6 +380,7 @@ public Object getDefaultValue(@NonNull PrefKey key) {
             case PREF_LOG_VIEWER_SHOW_PID_TID_TIMESTAMP_BOOL:
             case PREF_INSTALLER_DISPLAY_CHANGES_BOOL:
             case PREF_VIRUS_TOTAL_PROMPT_BEFORE_UPLOADING_BOOL:
+            case PREF_ZIP_ALIGN_BOOL:
                 return true;
             case PREF_CONCURRENCY_THREAD_COUNT_INT:
             case PREF_APP_THEME_CUSTOM_INT:

File: app/src/main/java/io/github/muntashirakon/AppManager/profiles/AppsProfileActivity.java
Patch:
@@ -71,6 +71,7 @@ public class AppsProfileActivity extends BaseActivity implements NavigationBarVi
 
     @Override
     protected void onAuthenticated(@Nullable Bundle savedInstanceState) {
+        model = new ViewModelProvider(this).get(ProfileViewModel.class);
         setContentView(R.layout.activity_apps_profile);
         setSupportActionBar(findViewById(R.id.toolbar));
         progressIndicator = findViewById(R.id.progress_linear);
@@ -133,7 +134,6 @@ protected void onAuthenticated(@Nullable Bundle savedInstanceState) {
         if (getSupportActionBar() != null) {
             getSupportActionBar().setTitle(newProfile ? newProfileName : profileName);
         }
-        model = new ViewModelProvider(this).get(ProfileViewModel.class);
         model.setProfileName(profileName == null ? newProfileName : profileName, newProfile);
         if (newProfileName != null) {
             // Requested a new profile, clone profile

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/explorer/AppExplorerActivity.java
Patch:
@@ -54,7 +54,7 @@ protected void onAuthenticated(@Nullable Bundle savedInstanceState) {
             } else {
                 if (adapterItem.getCachedFile() == null) return;
                 intent = new Intent(Intent.ACTION_VIEW)
-                        .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
+                        .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_GRANT_READ_URI_PERMISSION)
                         .setDataAndType(FmProvider.getContentUri(adapterItem.getCachedFile()), adapterItem.getType());
             }
             startActivity(intent);

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/TarUtils.java
Patch:
@@ -164,7 +164,7 @@ public static void extract(@NonNull @TarType String type, @NonNull Path[] source
                 while ((entry = tis.getNextEntry()) != null) {
                     Path file;
                     if (entry.isDirectory()) {
-                        file = dest.createDirectories(entry.getName());
+                        file = dest.createDirectoriesIfRequired(entry.getName());
                     } else file = dest.createNewArbitraryFile(entry.getName(), null);
                     if (!entry.isDirectory() && (!Paths.isUnderFilter(file, dest, filterPatterns)
                             || Paths.willExclude(file, dest, exclusionPatterns))) {

File: libcore/ui/src/main/java/io/github/muntashirakon/widget/MultiSelectionView.java
Patch:
@@ -252,7 +252,8 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
     }
 
     @Override
-    public WindowInsetsCompat onApplyWindowInsets(View v, WindowInsetsCompat insets) {
+    @NonNull
+    public WindowInsetsCompat onApplyWindowInsets(@NonNull View v, @NonNull WindowInsetsCompat insets) {
         WindowInsetsCompat newInsets = null;
         if (ViewCompat.getFitsSystemWindows(this)) {
             newInsets = insets;

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/PermissionUtils.java
Patch:
@@ -21,7 +21,6 @@
 import io.github.muntashirakon.AppManager.compat.PermissionCompat;
 import io.github.muntashirakon.AppManager.ipc.LocalServices;
 import io.github.muntashirakon.AppManager.settings.Ops;
-import io.github.muntashirakon.compat.ObjectsCompat;
 
 @SuppressWarnings("BooleanMethodIsAlwaysInverted")
 public final class PermissionUtils {
@@ -124,7 +123,6 @@ public static boolean hasSelfOrRemotePermission(@NonNull String permissionName)
     }
 
     public static int getSelfOrRemoteUid() {
-        return ObjectsCompat.requireNonNullElse(
-                ExUtils.exceptionAsNull(() -> LocalServices.getAmService().getUid()), Process.myUid());
+        return ExUtils.requireNonNullElse(() -> LocalServices.getAmService().getUid(), Process.myUid());
     }
 }

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppDetailsActivity.java
Patch:
@@ -158,7 +158,7 @@ protected void onAuthenticated(@Nullable Bundle savedInstanceState) {
         // Check for the existence of package
         model.getIsPackageExistLiveData().observe(this, isPackageExist -> {
             if (!isPackageExist) {
-                if (!model.getIsExternalApk()) {
+                if (!model.isExternalApk()) {
                     UIUtils.displayShortToast(R.string.app_not_installed);
                 }
                 finish();

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppDetailsComponentsFragment.java
Patch:
@@ -144,7 +144,7 @@ public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceStat
         mMainModel.get(mNeededProperty).observe(getViewLifecycleOwner(), appDetailsItems -> {
             if (appDetailsItems != null && mAdapter != null && mMainModel.isPackageExist()) {
                 mPackageName = mMainModel.getPackageName();
-                mIsExternalApk = mMainModel.getIsExternalApk();
+                mIsExternalApk = mMainModel.isExternalApk();
                 mAdapter.setDefaultList(appDetailsItems);
             } else showProgressIndicator(false);
         });
@@ -171,7 +171,7 @@ public void onRefresh() {
 
     @Override
     public void onCreateOptionsMenu(@NonNull Menu menu, @NonNull MenuInflater inflater) {
-        if (mMainModel != null && !mMainModel.getIsExternalApk() && Ops.isRoot()) {
+        if (mMainModel != null && !mMainModel.isExternalApk() && Ops.isRoot()) {
             inflater.inflate(R.menu.fragment_app_details_components_actions, menu);
             mBlockingToggler = menu.findItem(R.id.action_toggle_blocking);
             mMainModel.getRuleApplicationStatus().observe(mActivity, status -> {
@@ -193,7 +193,7 @@ public void onCreateOptionsMenu(@NonNull Menu menu, @NonNull MenuInflater inflat
 
     @Override
     public void onPrepareOptionsMenu(@NonNull Menu menu) {
-        if (mMainModel == null || mMainModel.getIsExternalApk()) {
+        if (mMainModel == null || mMainModel.isExternalApk()) {
             return;
         }
         if (Ops.isRoot()) {

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppDetailsFragment.java
Patch:
@@ -238,7 +238,7 @@ public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceStat
         mMainModel.get(mNeededProperty).observe(getViewLifecycleOwner(), appDetailsItems -> {
             if (appDetailsItems != null && mAdapter != null && mMainModel.isPackageExist()) {
                 mPackageName = mMainModel.getPackageName();
-                mIsExternalApk = mMainModel.getIsExternalApk();
+                mIsExternalApk = mMainModel.isExternalApk();
                 mAdapter.setDefaultList(appDetailsItems);
             } else showProgressIndicator(false);
         });
@@ -272,7 +272,7 @@ public void onCreateOptionsMenu(@NonNull Menu menu, @NonNull MenuInflater inflat
                 inflater.inflate(R.menu.fragment_app_details_app_ops_actions, menu);
                 break;
             case USES_PERMISSIONS:
-                if (mMainModel != null && !mMainModel.getIsExternalApk()) {
+                if (mMainModel != null && !mMainModel.isExternalApk()) {
                     inflater.inflate(R.menu.fragment_app_details_permissions_actions, menu);
                     break;
                 }
@@ -292,7 +292,7 @@ public void onCreateOptionsMenu(@NonNull Menu menu, @NonNull MenuInflater inflat
 
     @Override
     public void onPrepareOptionsMenu(@NonNull Menu menu) {
-        if (mMainModel == null || mMainModel.getIsExternalApk()) {
+        if (mMainModel == null || mMainModel.isExternalApk()) {
             return;
         }
         if (mNeededProperty <= USES_PERMISSIONS) {

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/ExUtils.java
Patch:
@@ -42,7 +42,7 @@ public static <T> T exceptionAsNull(ThrowingRunnable<T> r) {
         try {
             return r.run();
         } catch (Throwable th) {
-            Log.e("ExUtils", "(Suppressed error)", th);
+            Log.w("ExUtils", "(Suppressed error)", th);
             return null;
         }
     }
@@ -60,7 +60,7 @@ public static void exceptionAsIgnored(ThrowingRunnableNoReturn r) {
         try {
             r.run();
         } catch (Throwable th) {
-            Log.e("ExUtils", "(Suppressed error)", th);
+            Log.w("ExUtils", "(Suppressed error)", th);
         }
     }
 }

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/MiuiUtils.java
Patch:
@@ -75,7 +75,8 @@ public static boolean isActualMiuiVersionAtLeast(String targetVer) {
 
     @SuppressLint("PrivateApi")
     public static boolean isMiuiOptimizationDisabled() {
-        if (!SystemProperties.getBoolean("persist.sys.miui_optimization", true)) {
+        // ApplicationPackageManager#isXOptMode()
+        if (!SystemProperties.getBoolean("persist.sys.miui_optimization", !"1".equals(SystemProperties.get("ro.miui.cts", "0")))) {
             return true;
         }
         try {

File: app/src/main/java/io/github/muntashirakon/AppManager/self/filecache/FileCache.java
Patch:
@@ -73,7 +73,7 @@ protected void finalize() {
 
     @NonNull
     public File getCachedFile(@NonNull Path source) throws IOException {
-        if (source.exists()) {
+        if (!source.exists()) {
             // No need for cache if the path is non-existent
             throw new FileNotFoundException("Path " + source + " does not exist.");
         }

File: app/src/main/java/io/github/muntashirakon/AppManager/db/utils/AppDb.java
Patch:
@@ -198,7 +198,7 @@ private List<App> updateApplicationInternal(@NonNull Context context, @NonNull S
                         PackageManager.GET_META_DATA | flagSigningInfo | PackageManager.GET_ACTIVITIES
                                 | PackageManager.GET_RECEIVERS | PackageManager.GET_PROVIDERS
                                 | PackageManager.GET_SERVICES | flagDisabledComponents | flagMatchUninstalled, userId);
-            } catch (RemoteException | PackageManager.NameNotFoundException e) {
+            } catch (RemoteException | PackageManager.NameNotFoundException | SecurityException e) {
                 // Package does not exist
             }
             if (backup == null && packageInfo == null) {

File: app/src/main/java/io/github/muntashirakon/AppManager/details/info/AppInfoFragment.java
Patch:
@@ -323,7 +323,7 @@ public void onCreateOptionsMenu(@NonNull Menu menu, @NonNull MenuInflater inflat
             menu.findItem(R.id.action_battery_opt).setVisible(Ops.isPrivileged());
             menu.findItem(R.id.action_net_policy).setVisible(Ops.isPrivileged());
             menu.findItem(R.id.action_install).setVisible(Ops.isPrivileged() && Users.getUsersIds().length > 1);
-            menu.findItem(R.id.action_optimize).setVisible(Ops.isPrivileged() && Build.VERSION.SDK_INT >= Build.VERSION_CODES.N);
+            menu.findItem(R.id.action_optimize).setVisible(BuildConfig.DEBUG && Ops.isPrivileged() && Build.VERSION.SDK_INT >= Build.VERSION_CODES.N);
         }
     }
 

File: app/src/main/java/io/github/muntashirakon/AppManager/oneclickops/OneClickOpsActivity.java
Patch:
@@ -33,6 +33,7 @@
 import java.util.Set;
 
 import io.github.muntashirakon.AppManager.BaseActivity;
+import io.github.muntashirakon.AppManager.BuildConfig;
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.apk.behavior.DexOptimizationDialog;
 import io.github.muntashirakon.AppManager.batchops.BatchOpsManager;
@@ -174,7 +175,7 @@ private void setItems() {
                             })
                             .show();
                 });
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
+        if (BuildConfig.DEBUG && Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
             mItemCreator.addItemWithTitleSubtitle(getString(R.string.title_perform_runtime_optimization_to_apps),
                             getString(R.string.summary_perform_runtime_optimization_to_apps))
                     .setOnClickListener(v -> {

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/behavior/DexOptimizationDialog.java
Patch:
@@ -27,7 +27,7 @@
 import io.github.muntashirakon.AppManager.batchops.BatchOpsService;
 import io.github.muntashirakon.AppManager.settings.Ops;
 import io.github.muntashirakon.AppManager.utils.TextUtilsCompat;
-import io.github.muntashirakon.widget.NoFilterArrayAdapter;
+import io.github.muntashirakon.widget.AnyFilterArrayAdapter;
 
 public class DexOptimizationDialog extends DialogFragment {
     public static final String TAG = DexOptimizationDialog.class.getSimpleName();
@@ -80,6 +80,7 @@ public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {
         MaterialCheckBox checkProfilesCheck = view.findViewById(R.id.check_profiles);
         MaterialCheckBox forceCompilationCheck = view.findViewById(R.id.force_compilation);
         MaterialCheckBox forceDexOptCheck = view.findViewById(R.id.force_dexopt);
+        checkProfilesCheck.setChecked(options.checkProfiles);
         if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) {
             compileLayoutsCheck.setVisibility(View.GONE);
         }
@@ -88,7 +89,7 @@ public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {
         }
 
         // Set listeners
-        autoCompleteTextView.setAdapter(new NoFilterArrayAdapter<>(requireContext(), R.layout.item_checked_text_view,
+        autoCompleteTextView.setAdapter(new AnyFilterArrayAdapter<>(requireContext(), R.layout.item_checked_text_view,
                 COMPILER_FILTERS));
         compileLayoutsCheck.setOnCheckedChangeListener((buttonView, isChecked) -> options.compileLayouts = isChecked);
         clearProfileDataCheck.setOnCheckedChangeListener((buttonView, isChecked) -> options.clearProfileData = isChecked);

File: libcore/ui/src/main/java/io/github/muntashirakon/widget/AnyFilterArrayAdapter.java
Patch:
@@ -6,6 +6,7 @@
 import android.widget.ArrayAdapter;
 import android.widget.Filter;
 
+import androidx.annotation.LayoutRes;
 import androidx.annotation.NonNull;
 
 import java.util.ArrayList;
@@ -51,7 +52,7 @@ protected void publishResults(CharSequence constraint, @NonNull FilterResults re
         }
     };
 
-    public AnyFilterArrayAdapter(@NonNull Context context, int resource, @NonNull List<T> objects) {
+    public AnyFilterArrayAdapter(@NonNull Context context, @LayoutRes int resource, @NonNull List<T> objects) {
         super(context, resource, new ArrayList<>(objects));
         this.mObjects = objects;
     }

File: app/src/main/java/io/github/muntashirakon/AppManager/details/info/AppInfoViewModel.java
Patch:
@@ -64,7 +64,6 @@
 import io.github.muntashirakon.AppManager.utils.PermissionUtils;
 import io.github.muntashirakon.AppManager.utils.TextUtilsCompat;
 import io.github.muntashirakon.AppManager.utils.UiThreadHandler;
-import io.github.muntashirakon.AppManager.utils.Utils;
 import io.github.muntashirakon.io.Path;
 import io.github.muntashirakon.io.Paths;
 
@@ -183,7 +182,7 @@ public void loadTagCloud() {
             tagCloud.hasKeyStoreItems = KeyStoreUtils.hasKeyStore(applicationInfo.uid);
             tagCloud.hasMasterKeyInKeyStore = KeyStoreUtils.hasMasterKey(applicationInfo.uid);
             tagCloud.usesPlayAppSigning = PackageUtils.usesPlayAppSigning(applicationInfo);
-            tagCloud.backups = BackupUtils.getBackupMetadataFromDb(packageName);
+            tagCloud.backups = BackupUtils.getBackupMetadataFromDbNoLockValidate(packageName);
             if (!mainModel.getIsExternalApk() && PermissionUtils.hasDumpPermission()) {
                 String targetString = "user," + packageName + "," + applicationInfo.uid;
                 Runner.Result result = Runner.runCommand(new String[]{"dumpsys", "deviceidle", "whitelist"});

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/BackupOp.java
Patch:
@@ -412,8 +412,8 @@ private void backupExtras() throws BackupException {
         }
         // Backup allowed notification listeners aka BIND_NOTIFICATION_LISTENER_SERVICE
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O_MR1) {
-            INotificationManager notificationManager = INotificationManager.Stub.asInterface(ProxyBinder.getService(Context.NOTIFICATION_SERVICE));
             try {
+                INotificationManager notificationManager = INotificationManager.Stub.asInterface(ProxyBinder.getService(Context.NOTIFICATION_SERVICE));
                 List<ComponentName> notificationComponents;
                 if (Ops.isPrivileged()) {
                     notificationComponents = notificationManager.getEnabledNotificationListeners(mUserId);
@@ -427,7 +427,8 @@ private void backupExtras() throws BackupException {
                 for (String component : componentsForThisPkg) {
                     rules.setNotificationListener(component, true);
                 }
-            } catch (RemoteException ignore) {
+            } catch (RemoteException e) {
+                e.printStackTrace();
             }
         }
         // Backup battery optimization

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/dialog/RestoreMultipleFragment.java
Patch:
@@ -53,9 +53,7 @@ public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceStat
         int supportedFlags = mViewModel.getWorstBackupFlag();
         // Inject no signatures
         supportedFlags |= BackupFlags.BACKUP_NO_SIGNATURE_CHECK;
-        if (BuildConfig.DEBUG) {
-            supportedFlags |= BackupFlags.BACKUP_CUSTOM_USERS;
-        }
+        supportedFlags |= BackupFlags.BACKUP_CUSTOM_USERS;
         int checkedFlags = BackupFlags.fromPref().getFlags() & supportedFlags;
         int disabledFlags = 0;
         if (mViewModel.getUninstalledApps().size() > 0) {

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/dialog/RestoreSingleFragment.java
Patch:
@@ -121,9 +121,7 @@ private void handleRestore(@NonNull MetadataManager.Metadata selectedBackup) {
         List<Integer> supportedBackupFlags = BackupFlags.getBackupFlagsAsArray(flags.getFlags());
         // Inject no signatures
         supportedBackupFlags.add(BackupFlags.BACKUP_NO_SIGNATURE_CHECK);
-        if (BuildConfig.DEBUG) {
-            supportedBackupFlags.add(BackupFlags.BACKUP_CUSTOM_USERS);
-        }
+        supportedBackupFlags.add(BackupFlags.BACKUP_CUSTOM_USERS);
         List<Integer> disabledFlags = new ArrayList<>();
         if (!mViewModel.getBackupInfo().isInstalled()) {
             enabledFlags.addFlag(BackupFlags.BACKUP_APK_FILES);

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/Utils.java
Patch:
@@ -588,7 +588,7 @@ public static String getProperXml(@NonNull String dirtyXml) {
      */
     // Similar impl. of https://commons.apache.org/proper/commons-lang/apidocs/src-html/org/apache/commons/lang3/StringUtils.html#line.6418
     @NonNull
-    public static String replaceOnce(@NonNull final String text, @NonNull String searchString, @NonNull final String replacement) {
+    public static String replaceOnce(@NonNull String text, @NonNull CharSequence searchString, @NonNull CharSequence replacement) {
         if (TextUtils.isEmpty(text) || TextUtils.isEmpty(searchString)) {
             return text;
         }

File: libcore/io/src/main/java/io/github/muntashirakon/io/UidGidPair.java
Patch:
@@ -6,7 +6,7 @@ public class UidGidPair {
     public final int uid;
     public final int gid;
 
-    UidGidPair(int uid, int gid) {
+    public UidGidPair(int uid, int gid) {
         this.uid = uid;
         this.gid = gid;
     }

File: app/src/main/java/io/github/muntashirakon/AppManager/compat/AppOpsManagerCompat.java
Patch:
@@ -132,12 +132,12 @@ public class AppOpsManagerCompat {
      * Control whether an application is allowed to run in the background.
      */
     @RequiresApi(Build.VERSION_CODES.N)
-    public static final int OP_RUN_IN_BACKGROUND = AppOpsManagerHidden.OP_RUN_IN_BACKGROUND;
+    public static final int OP_RUN_IN_BACKGROUND = Build.VERSION.SDK_INT >= Build.VERSION_CODES.N ? AppOpsManagerHidden.OP_RUN_IN_BACKGROUND : 0;
     /**
      * Run jobs when in background
      */
     @RequiresApi(Build.VERSION_CODES.P)
-    public static final int OP_RUN_ANY_IN_BACKGROUND = AppOpsManagerHidden.OP_RUN_ANY_IN_BACKGROUND;
+    public static final int OP_RUN_ANY_IN_BACKGROUND = Build.VERSION.SDK_INT >= Build.VERSION_CODES.P ? AppOpsManagerHidden.OP_RUN_ANY_IN_BACKGROUND : 0;
     public static final int _NUM_OP = AppOpsManagerHidden._NUM_OP;
     /**
      * Mapping from a permission to the corresponding app op.

File: hiddenapi/src/main/java/android/app/AppOpsManagerHidden.java
Patch:
@@ -17,7 +17,7 @@
 
 @RefineAs(AppOpsManager.class)
 public class AppOpsManagerHidden {
-    public static final int _NUM_OP = 121;
+    public static /*final*/ int _NUM_OP = 121;
 
     public static class PackageOps implements Parcelable {
         @NonNull

File: app/src/main/java/io/github/muntashirakon/AppManager/AppManager.java
Patch:
@@ -7,6 +7,7 @@
 import android.os.Build;
 import android.sun.security.provider.JavaKeyStoreProvider;
 
+import androidx.annotation.Keep;
 import androidx.annotation.NonNull;
 
 import com.google.android.material.color.DynamicColors;
@@ -40,6 +41,7 @@ public static Context getContext() {
         return instance.getBaseContext();
     }
 
+    @Keep
     @Override
     public void onCreate() {
         instance = this;
@@ -50,6 +52,7 @@ public void onCreate() {
         Security.addProvider(new JavaKeyStoreProvider());
     }
 
+    @Keep
     @Override
     protected void attachBaseContext(Context base) {
         super.attachBaseContext(base);

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/RestoreOp.java
Patch:
@@ -140,8 +140,7 @@ class RestoreOp implements Closeable {
         }
         // Get checksums
         try {
-            checksumFile = this.backupFile.getChecksumFile(CryptoUtils.MODE_NO_ENCRYPTION);
-            this.checksum = new BackupFiles.Checksum(checksumFile, "r");
+            this.checksum = this.backupFile.getChecksum(CryptoUtils.MODE_NO_ENCRYPTION);
         } catch (Throwable e) {
             this.backupFile.cleanup();
             throw new BackupException("Failed to get checksums.", e);

File: app/src/main/java/io/github/muntashirakon/AppManager/compat/OsCompat.java
Patch:
@@ -5,6 +5,9 @@
 import android.system.ErrnoException;
 import android.system.StructPasswd;
 
+import androidx.annotation.Keep;
+
+@Keep
 public class OsCompat {
     // Lists the syscalls unavailable in Os
 

File: app/src/main/java/io/github/muntashirakon/AppManager/rules/RuleType.java
Patch:
@@ -2,6 +2,9 @@
 
 package io.github.muntashirakon.AppManager.rules;
 
+import androidx.annotation.Keep;
+
+@Keep
 public enum RuleType {
     ACTIVITY,
     PROVIDER,

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/AppPref.java
Patch:
@@ -17,6 +17,7 @@
 import android.view.View;
 
 import androidx.annotation.IntDef;
+import androidx.annotation.Keep;
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.annotation.StyleRes;
@@ -59,6 +60,7 @@ public class AppPref {
      * <br/>
      * Keep these in sync with {@link #getDefaultValue(PrefKey)}.
      */
+    @Keep
     public enum PrefKey {
         PREF_APP_OP_SHOW_DEFAULT_BOOL,
         PREF_APP_OP_SORT_ORDER_INT,

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/CpuUtils.java
Patch:
@@ -2,10 +2,13 @@
 
 package io.github.muntashirakon.AppManager.utils;
 
+import androidx.annotation.Keep;
+
 public class CpuUtils {
     static {
         System.loadLibrary("am");
     }
 
+    @Keep
     public static native long getClockTicksPerSecond();
 }

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/MainPreferences.java
Patch:
@@ -107,7 +107,7 @@ public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {
                     .setTitle(R.string.pref_mode_of_operations)
                     .setSelection(currentMode)
                     .addDisabledItems(Build.VERSION.SDK_INT < Build.VERSION_CODES.R ?
-                            Collections.singletonList(Ops.MODE_ADB_OVER_TCP) : Collections.emptyList())
+                            Collections.singletonList(Ops.MODE_ADB_WIFI) : Collections.emptyList())
                     .setPositiveButton(R.string.apply, (dialog, which, selectedItem) -> {
                         currentMode = selectedItem;
                         if (Ops.MODE_ADB_OVER_TCP.equals(currentMode)) {

File: app/src/main/java/io/github/muntashirakon/AppManager/db/utils/AppDb.java
Patch:
@@ -447,7 +447,7 @@ private static boolean isUpToDate(@NonNull App currentApp, @NonNull Backup backu
         // App was not installed
         if (currentApp.sdk != 0) {
             // The app is a system app
-            return false;
+            return true;
         }
         // The app is a backed up app
         return currentApp.lastUpdateTime == backup.backupTime;

File: app/src/main/java/io/github/muntashirakon/AppManager/main/MainViewModel.java
Patch:
@@ -633,8 +633,8 @@ private ApplicationItem getNewApplicationItem(@NonNull String packageName, @NonN
                 continue;
             }
             if (app.isInstalled) {
-                boolean newItem = item.packageName == null;
-                if (newItem) {
+                boolean newItem = item.packageName == null || !item.isInstalled;
+                if (item.packageName == null) {
                     item.packageName = app.packageName;
                 }
                 item.userHandles = ArrayUtils.appendInt(item.userHandles, app.userId);

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/PackageUtils.java
Patch:
@@ -180,6 +180,7 @@ public static List<ApplicationItem> getInstalledOrBackedUpApplicationsFromDb(@No
             ApplicationItem item;
             ApplicationItem oldItem = applicationItems.get(app.packageName);
             if (app.isInstalled) {
+                boolean newItem = oldItem == null || !oldItem.isInstalled;
                 if (oldItem != null) {
                     // Item already exists
                     item = oldItem;
@@ -203,7 +204,7 @@ public static List<ApplicationItem> getInstalledOrBackedUpApplicationsFromDb(@No
                 }
                 item.totalSize += app.codeSize + app.dataSize;
                 item.dataUsage += app.wifiDataUsage + app.mobileDataUsage;
-                if (oldItem != null && app.userId != thisUser) {
+                if (!newItem && app.userId != thisUser) {
                     // This user has the highest priority
                     continue;
                 }

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/installer/PackageInstallerService.java
Patch:
@@ -97,7 +97,7 @@ protected void onHandleIntent(@Nullable Intent intent) {
         String appLabel = intent.getStringExtra(EXTRA_APP_LABEL);
         int userHandle = intent.getIntExtra(EXTRA_USER_ID, UserHandleHidden.myUserId());
         // Install package
-        PackageInstallerCompat pi = PackageInstallerCompat.getNewInstance(userHandle);
+        PackageInstallerCompat pi = PackageInstallerCompat.getNewInstance();
         pi.setOnInstallListener(new PackageInstallerCompat.OnInstallListener() {
             @Override
             public void onStartInstall(int sessionId, String packageName) {
@@ -124,7 +124,7 @@ public void onFinishedInstall(int sessionId, String packageName, int result,
             }
         });
         pi.setAppLabel(appLabel);
-        pi.install(ApkFile.getInstance(apkFileKey));
+        pi.install(ApkFile.getInstance(apkFileKey), userHandle);
     }
 
     @Override

File: app/src/main/java/io/github/muntashirakon/AppManager/batchops/BatchOpsManager.java
Patch:
@@ -637,8 +637,8 @@ private Result opUninstall() {
             accessibility.enableUninstall(true);
         }
         for (UserPackagePair pair : userPackagePairs) {
-            PackageInstallerCompat installer = PackageInstallerCompat.getNewInstance(pair.getUserHandle());
-            if (!installer.uninstall(pair.getPackageName(), false)) {
+            PackageInstallerCompat installer = PackageInstallerCompat.getNewInstance();
+            if (!installer.uninstall(pair.getPackageName(), pair.getUserHandle(), false)) {
                 log("====> op=UNINSTALL, pkg=" + pair);
                 failedPackages.add(pair);
             }

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/PackageUtils.java
Patch:
@@ -336,7 +336,7 @@ public void onGetStatsCompleted(final PackageStats pStats, boolean succeeded) {
                 StorageStats storageStats = storageStatsManager.queryStatsForPackage(uuidString, packageName,
                         userHandle, context.getPackageName());
                 packageSizeInfo.set(new PackageSizeInfo(packageName, storageStats, userHandle));
-            } catch (RemoteException e) {
+            } catch (Throwable e) {
                 Log.e(TAG, e);
             }
         }

File: app/src/main/java/io/github/muntashirakon/AppManager/db/entity/Backup.java
Patch:
@@ -112,7 +112,7 @@ public int hashCode() {
     public static Backup fromBackupMetadata(@NonNull MetadataManager.Metadata metadata) {
         Backup backup = new Backup();
         backup.packageName = metadata.packageName;
-        backup.backupName = metadata.backupName;
+        backup.backupName = metadata.backupName != null ? metadata.backupName : String.valueOf(metadata.userHandle);
         backup.label = metadata.label;
         backup.versionName = metadata.versionName;
         backup.versionCode = metadata.versionCode;

File: app/src/main/java/io/github/muntashirakon/AppManager/main/MainViewModel.java
Patch:
@@ -41,7 +41,6 @@
 
 import io.github.muntashirakon.AppManager.apk.list.ListExporter;
 import io.github.muntashirakon.AppManager.backup.BackupUtils;
-import io.github.muntashirakon.AppManager.batchops.BatchOpsService;
 import io.github.muntashirakon.AppManager.compat.ActivityManagerCompat;
 import io.github.muntashirakon.AppManager.compat.PackageManagerCompat;
 import io.github.muntashirakon.AppManager.db.entity.App;
@@ -553,7 +552,7 @@ private void updateInfoForPackages(@Nullable String[] packages, @NonNull String
             case PackageChangeReceiver.ACTION_PACKAGE_REMOVED:
             case PackageChangeReceiver.ACTION_PACKAGE_ALTERED:
             case PackageChangeReceiver.ACTION_PACKAGE_ADDED:
-            case BatchOpsService.ACTION_BATCH_OPS_COMPLETED:
+            // case BatchOpsService.ACTION_BATCH_OPS_COMPLETED:
             case Intent.ACTION_PACKAGE_REMOVED:
             case Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE:
             case Intent.ACTION_PACKAGE_ADDED:

File: app/src/main/java/io/github/muntashirakon/AppManager/db/utils/AppDb.java
Patch:
@@ -196,7 +196,7 @@ private List<App> updateApplicationInternal(@NonNull Context context, @NonNull S
                 packageInfo = PackageManagerCompat.getPackageInfo(packageName,
                         PackageManager.GET_META_DATA | flagSigningInfo | PackageManager.GET_ACTIVITIES
                                 | PackageManager.GET_RECEIVERS | PackageManager.GET_PROVIDERS
-                                | PackageManager.GET_SERVICES | flagDisabledComponents, userId);
+                                | PackageManager.GET_SERVICES | flagDisabledComponents | flagMatchUninstalled, userId);
             } catch (RemoteException | PackageManager.NameNotFoundException e) {
                 // Package does not exist
             }
@@ -389,7 +389,7 @@ private static void updateVariableData(@NonNull Context context, @NonNull List<A
             if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                 SsaidSettings ssaidSettings = userIdSsaidSettingsMap.get(userId);
                 if (ssaidSettings != null) {
-                    String ssaid = ssaidSettings.getSsaid(app.packageName, app.uid);;
+                    String ssaid = ssaidSettings.getSsaid(app.packageName, app.uid);
                     app.ssaid = TextUtilsCompat.isEmpty(ssaid) ? null : ssaid;
                 }
             }

File: app/src/main/java/io/github/muntashirakon/AppManager/BaseActivity.java
Patch:
@@ -103,6 +103,8 @@ protected final void onCreate(@Nullable Bundle savedInstanceState) {
                         Ops.pairAdbInput(this, mViewModel);
                         return;
                     } // fall-through
+                case Ops.STATUS_FAILURE_ADB_NEED_MORE_PERMS:
+                    Ops.displayIncompleteUsbDebuggingMessage(this);
                 case Ops.STATUS_SUCCESS:
                 case Ops.STATUS_FAILURE:
                     Log.d(TAG, "Authentication completed.");

File: app/src/main/java/io/github/muntashirakon/AppManager/main/SplashActivity.java
Patch:
@@ -106,6 +106,8 @@ protected final void onCreate(@Nullable Bundle savedInstanceState) {
                         Ops.pairAdbInput(this, mViewModel);
                         return;
                     } // fall-through
+                case Ops.STATUS_FAILURE_ADB_NEED_MORE_PERMS:
+                    Ops.displayIncompleteUsbDebuggingMessage(this);
                 case Ops.STATUS_SUCCESS:
                 case Ops.STATUS_FAILURE:
                     Log.d(TAG, "Authentication completed.");

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/MainPreferences.java
Patch:
@@ -197,6 +197,8 @@ public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceStat
                         Ops.pairAdbInput(activity, model);
                         return;
                     } // fall-through
+                case Ops.STATUS_FAILURE_ADB_NEED_MORE_PERMS:
+                    Ops.displayIncompleteUsbDebuggingMessage(requireActivity());
                 case Ops.STATUS_SUCCESS:
                 case Ops.STATUS_FAILURE:
                     modeOfOpsAlertDialog.dismiss();

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/MainPreferencesViewModel.java
Patch:
@@ -219,7 +219,7 @@ public void autoConnectAdb(int returnCodeOnFailure) {
     @Override
     public void connectAdb(int port) {
         mExecutor.submit(() -> {
-            int status = Ops.connectAdb(port, Ops.STATUS_FAILURE);
+            int status = Ops.connectAdb(getApplication(), port, Ops.STATUS_FAILURE);
             mModeOfOpsStatus.postValue(status);
         });
     }

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/SecurityAndOpsViewModel.java
Patch:
@@ -94,7 +94,7 @@ public void autoConnectAdb(int returnCodeOnFailure) {
     public void connectAdb(int port) {
         mExecutor.submit(() -> {
             Log.d(TAG, "Before Ops::connectAdb");
-            int status = Ops.connectAdb(port, Ops.STATUS_FAILURE);
+            int status = Ops.connectAdb(getApplication(), port, Ops.STATUS_FAILURE);
             Log.d(TAG, "After Ops::connectAdb");
             mAuthenticationStatus.postValue(status);
         });

File: app/src/main/java/io/github/muntashirakon/AppManager/self/filecache/InternalCacheCleanerService.java
Patch:
@@ -21,7 +21,7 @@
 import io.github.muntashirakon.io.Path;
 import io.github.muntashirakon.io.Paths;
 
-// IMPORTANT: This service must be run without authentication and in a separate process.
+// IMPORTANT: This service must be run without authentication.
 public class InternalCacheCleanerService extends ForegroundService {
     public static final String TAG = InternalCacheCleanerService.class.getSimpleName();
 
@@ -45,7 +45,7 @@ public static void scheduleAlarm(@NonNull Context context) {
         alarmManager.setInexactRepeating(AlarmManager.RTC_WAKEUP, calendar.getTimeInMillis(), AlarmManager.INTERVAL_DAY, alarmIntent);
     }
 
-    protected InternalCacheCleanerService() {
+    public InternalCacheCleanerService() {
         super(TAG);
     }
 

File: app/src/main/java/io/github/muntashirakon/AppManager/ssaid/SettingsStateV26.java
Patch:
@@ -57,7 +57,7 @@ public final class SettingsStateV26 implements SettingsState {
     private static final boolean DEBUG = false;
     private static final boolean DEBUG_PERSISTENCE = false;
 
-    private static final String LOG_TAG = "SettingsStateV26";
+    private static final String LOG_TAG = SettingsStateV26.class.getSimpleName();
 
     static final int SETTINGS_VERSION_NEW_ENCODING = 121;
 

File: app/src/main/java/io/github/muntashirakon/AppManager/ssaid/SsaidSettings.java
Patch:
@@ -54,7 +54,7 @@ public SsaidSettings(String packageName, int uid) throws IOException {
             throw new IOException("settings_ssaid.xml is inaccessible.");
         }
         try {
-            if (Build.VERSION.SDK_INT > Build.VERSION_CODES.S) {
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
                 settingsState = new SettingsStateV31(lock, ssaidLocation, ssaidKey,
                         SettingsState.MAX_BYTES_PER_APP_PACKAGE_UNLIMITED, thread.getLooper());
             } else {

File: app/src/main/java/io/github/muntashirakon/AppManager/sysconfig/SystemConfig.java
Patch:
@@ -18,7 +18,6 @@
 import androidx.annotation.WorkerThread;
 
 import com.android.internal.util.TextUtils;
-import com.android.internal.util.XmlUtils;
 
 import org.xmlpull.v1.XmlPullParser;
 import org.xmlpull.v1.XmlPullParserException;
@@ -36,6 +35,7 @@
 import io.github.muntashirakon.AppManager.misc.OsEnvironment;
 import io.github.muntashirakon.AppManager.misc.SystemProperties;
 import io.github.muntashirakon.AppManager.utils.ArrayUtils;
+import io.github.muntashirakon.compat.xml.XmlUtils;
 import io.github.muntashirakon.io.IoUtils;
 import io.github.muntashirakon.io.Path;
 import io.github.muntashirakon.io.Paths;

File: app/src/main/java/io/github/muntashirakon/AppManager/misc/ListOptions.java
Patch:
@@ -139,9 +139,6 @@ private void init(boolean reinit) {
             }
             sortGroup.check(requireListOptionActions().getSortBy());
             sortGroup.setOnCheckedStateChangeListener((group, checkedIds) -> {
-                if (checkedIds.size() != 1) {
-                    throw new IllegalStateException("Only a single item should be checked");
-                }
                 requireListOptionActions().setSortBy(sortGroup.getCheckedChipId());
             });
             reverseSort.setChecked(requireListOptionActions().isReverseSort());

File: app/src/main/java/io/github/muntashirakon/AppManager/intercept/ActivityInterceptor.java
Patch:
@@ -58,6 +58,7 @@
 import io.github.muntashirakon.AppManager.BuildConfig;
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.compat.ActivityManagerCompat;
+import io.github.muntashirakon.AppManager.compat.IntegerCompat;
 import io.github.muntashirakon.AppManager.compat.PackageManagerCompat;
 import io.github.muntashirakon.AppManager.crypto.auth.AuthManager;
 import io.github.muntashirakon.AppManager.details.LauncherIconCreator;
@@ -319,7 +320,6 @@ public void onAuthenticated(Bundle savedInstanceState) {
         findViewById(R.id.progress_linear).setVisibility(View.GONE);
         // Get Intent
         Intent intent = new Intent(getIntent());
-        IntentCompat.validateIntent(intent);
         mUseRoot = intent.getBooleanExtra(EXTRA_ROOT, false);
         mUserHandle = intent.getIntExtra(EXTRA_USER_HANDLE, UserHandleHidden.myUserId());
         intent.removeExtra(EXTRA_ROOT);
@@ -618,7 +618,7 @@ private void setupVariables() {
                                     mMutableIntent.addFlags(INTENT_FLAG_TO_STRING.keyAt(i));
                                 } else {
                                     try {
-                                        int flag = Integer.decode(String.valueOf(inputText).trim());
+                                        int flag = IntegerCompat.decode(String.valueOf(inputText).trim());
                                         mMutableIntent.addFlags(flag);
                                     } catch (NumberFormatException e) {
                                         return;
@@ -1033,7 +1033,7 @@ protected void onSaveInstanceState(@NonNull Bundle outState) {
     @Nullable
     private static String getUri(@Nullable Intent src) {
         try {
-            return (src != null) ? src.toUri(Intent.URI_INTENT_SCHEME) : null;
+            return (src != null) ? IntentCompat.toUri(src, Intent.URI_INTENT_SCHEME) : null;
         } catch (BadParcelableException e) {
             // TODO: 4/2/22 Add support for invalid classes. This could be done in the following way:
             //  1. Upon detecting a BPE (and the class name), ask the user to select the source application

File: app/src/main/java/io/github/muntashirakon/AppManager/intercept/ActivityInterceptor.java
Patch:
@@ -319,6 +319,7 @@ public void onAuthenticated(Bundle savedInstanceState) {
         findViewById(R.id.progress_linear).setVisibility(View.GONE);
         // Get Intent
         Intent intent = new Intent(getIntent());
+        IntentCompat.validateIntent(intent);
         mUseRoot = intent.getBooleanExtra(EXTRA_ROOT, false);
         mUserHandle = intent.getIntExtra(EXTRA_USER_HANDLE, UserHandleHidden.myUserId());
         intent.removeExtra(EXTRA_ROOT);

File: app/src/main/java/io/github/muntashirakon/AppManager/details/EditShortcutDialogFragment.java
Patch:
@@ -128,7 +128,7 @@ public void afterTextChanged(Editable s) {
     public Drawable getDrawable(@NonNull String iconResString) {
         try {
             return ResourceUtil.getResourceFromName(mPackageManager, iconResString).getDrawable(requireActivity().getTheme());
-        } catch (PackageManager.NameNotFoundException ignore) {
+        } catch (PackageManager.NameNotFoundException | Resources.NotFoundException ignore) {
             return mPackageManager.getDefaultActivityIcon();
         }
     }

File: app/src/main/java/io/github/muntashirakon/AppManager/usage/AppUsageActivity.java
Patch:
@@ -364,6 +364,9 @@ public void loadPackageUsageInfoList() {
                                     .getUsageStats(mCurrentInterval, userId));
                         } catch (RemoteException e) {
                             Log.e("AppUsage", e);
+                        } catch (SecurityException e) {
+                            Log.e("AppUsage", e);
+                            _try = 0;
                         }
                     } while (0 != --_try && packageUsageInfoList.size() == 0);
                 }

File: app/src/main/java/io/github/muntashirakon/AppManager/usage/ScreenTimeAppWidget.java
Patch:
@@ -41,6 +41,9 @@ static void updateAppWidget(Context context, AppWidgetManager appWidgetManager,
                             .getUsageStats(UsageUtils.USAGE_TODAY, userId));
                 } catch (RemoteException e) {
                     e.printStackTrace();
+                } catch (SecurityException e) {
+                    e.printStackTrace();
+                    _try = 0;
                 }
             } while (0 != --_try && packageUsageInfoList.size() == 0);
         }

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppDetailsFragment.java
Patch:
@@ -104,6 +104,7 @@
 import io.github.muntashirakon.AppManager.utils.UIUtils;
 import io.github.muntashirakon.AppManager.utils.Utils;
 import io.github.muntashirakon.AppManager.utils.appearance.ColorCodes;
+import io.github.muntashirakon.dialog.SearchableItemsDialogBuilder;
 import io.github.muntashirakon.dialog.SearchableSingleChoiceDialogBuilder;
 import io.github.muntashirakon.dialog.TextInputDropdownDialogBuilder;
 import io.github.muntashirakon.io.Path;
@@ -1499,9 +1500,8 @@ private void getUsesPermissionsView(@NonNull Context context, @NonNull ViewHolde
                 for (int i = 0; i < flagStrings.length; ++i) {
                     flagStrings[i] = permissionFlags.valueAt(i);
                 }
-                new MaterialAlertDialogBuilder(mActivity)
+                new SearchableItemsDialogBuilder<>(mActivity, flagStrings)
                         .setTitle(R.string.permission_flags)
-                        .setItems(flagStrings, null)
                         .setNegativeButton(R.string.close, null)
                         .show();
                 return true;

File: app/src/main/java/io/github/muntashirakon/AppManager/fm/FmFragment.java
Patch:
@@ -29,6 +29,7 @@
 
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.utils.StorageUtils;
+import io.github.muntashirakon.dialog.SearchableItemsDialogBuilder;
 import io.github.muntashirakon.widget.MultiSelectionView;
 import io.github.muntashirakon.widget.SwipeRefreshLayout;
 
@@ -129,9 +130,9 @@ public boolean onOptionsItemSelected(@NonNull MenuItem item) {
                 }
                 activity.runOnUiThread(() -> {
                     if (isDetached()) return;
-                    new MaterialAlertDialogBuilder(activity)
+                    new SearchableItemsDialogBuilder<>(activity, backupVolumesStr)
                             .setTitle(R.string.storage)
-                            .setItems(backupVolumesStr, (dialog, which) ->
+                            .setOnItemClickListener((dialog, which, item1) ->
                                     activity.loadNewFragment(FmFragment.getNewInstance(backupVolumes[which])))
                             .setNegativeButton(R.string.cancel, null)
                             .show();

File: app/src/main/java/io/github/muntashirakon/AppManager/logcat/AbsLogViewerFragment.java
Patch:
@@ -35,6 +35,7 @@
 import io.github.muntashirakon.AppManager.settings.LogViewerPreferences;
 import io.github.muntashirakon.AppManager.utils.StoragePermission;
 import io.github.muntashirakon.AppManager.utils.UIUtils;
+import io.github.muntashirakon.dialog.SearchableItemsDialogBuilder;
 import io.github.muntashirakon.dialog.SearchableMultiChoiceDialogBuilder;
 import io.github.muntashirakon.dialog.SearchableSingleChoiceDialogBuilder;
 import io.github.muntashirakon.dialog.TextInputDialogBuilder;
@@ -289,10 +290,9 @@ private void displayOpenLogFileDialog() {
             UIUtils.displayShortToast(R.string.no_saved_logs);
             return;
         }
-        new MaterialAlertDialogBuilder(mActivity)
+        new SearchableItemsDialogBuilder<>(mActivity, SaveLogHelper.getFormattedFilenames(mActivity, logFiles))
                 .setTitle(R.string.open)
-                .setItems(SaveLogHelper.getFormattedFilenames(mActivity, logFiles), (dialog, which) ->
-                        mActivity.openLogFile(logFiles.get(which)))
+                .setOnItemClickListener((dialog, which, item) -> mActivity.openLogFile(logFiles.get(which)))
                 .setNegativeButton(R.string.close, null)
                 .show();
     }

File: app/src/main/java/io/github/muntashirakon/AppManager/main/MainRecyclerAdapter.java
Patch:
@@ -31,7 +31,6 @@
 import androidx.core.content.ContextCompat;
 
 import com.google.android.material.card.MaterialCardView;
-import com.google.android.material.dialog.MaterialAlertDialogBuilder;
 import com.google.android.material.divider.MaterialDivider;
 
 import java.io.File;
@@ -53,6 +52,7 @@
 import io.github.muntashirakon.AppManager.utils.PackageUtils;
 import io.github.muntashirakon.AppManager.utils.UIUtils;
 import io.github.muntashirakon.AppManager.utils.appearance.ColorCodes;
+import io.github.muntashirakon.dialog.SearchableItemsDialogBuilder;
 import io.github.muntashirakon.widget.MultiSelectionView;
 
 public class MainRecyclerAdapter extends MultiSelectionView.Adapter<MainRecyclerAdapter.ViewHolder>
@@ -239,9 +239,9 @@ public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
                     }
                 }
             }
-            new MaterialAlertDialogBuilder(mActivity)
+            new SearchableItemsDialogBuilder<>(mActivity, userNames)
                     .setTitle(R.string.select_user)
-                    .setItems(userNames, (dialog, which) -> {
+                    .setOnItemClickListener((dialog, which, item1) -> {
                         Intent intent = AppDetailsActivity.getIntent(mActivity, item.packageName, item.userHandles[which]);
                         mActivity.startActivity(intent);
                         dialog.dismiss();

File: app/src/main/java/io/github/muntashirakon/AppManager/profiles/ProfilesActivity.java
Patch:
@@ -25,7 +25,6 @@
 import androidx.lifecycle.ViewModelProvider;
 import androidx.recyclerview.widget.LinearLayoutManager;
 
-import com.google.android.material.dialog.MaterialAlertDialogBuilder;
 import com.google.android.material.floatingactionbutton.FloatingActionButton;
 import com.google.android.material.progressindicator.LinearProgressIndicator;
 
@@ -45,6 +44,7 @@
 import io.github.muntashirakon.AppManager.logs.Log;
 import io.github.muntashirakon.AppManager.utils.UIUtils;
 import io.github.muntashirakon.AppManager.utils.appearance.ColorCodes;
+import io.github.muntashirakon.dialog.SearchableItemsDialogBuilder;
 import io.github.muntashirakon.dialog.SearchableSingleChoiceDialogBuilder;
 import io.github.muntashirakon.dialog.TextInputDialogBuilder;
 import io.github.muntashirakon.io.Path;
@@ -175,9 +175,9 @@ public boolean onOptionsItemSelected(@NonNull MenuItem item) {
             new Thread(() -> model.loadProfiles()).start();
         } else if (id == R.id.action_presets) {
             String[] profiles = getResources().getStringArray(R.array.profiles);
-            new MaterialAlertDialogBuilder(this)
+            new SearchableItemsDialogBuilder<>(this, profiles)
                     .setTitle(R.string.presets)
-                    .setItems(profiles, (dialog, which) -> {
+                    .setOnItemClickListener((dialog, which, item1) -> {
                         String profile = profiles[which];
                         new TextInputDialogBuilder(this, R.string.input_profile_name)
                                 .setTitle(R.string.new_profile)

File: libcore/ui/src/main/java/io/github/muntashirakon/dialog/SearchableMultiChoiceDialogBuilder.java
Patch:
@@ -70,7 +70,6 @@ public SearchableMultiChoiceDialogBuilder(@NonNull Context context, @NonNull Lis
         this(context, items, Arrays.asList(itemNames));
     }
 
-    @SuppressLint("InflateParams")
     public SearchableMultiChoiceDialogBuilder(@NonNull Context context, @NonNull List<T> items, @NonNull List<CharSequence> itemNames) {
         View view = View.inflate(context, R.layout.dialog_searchable_multi_choice, null);
         RecyclerView recyclerView = view.findViewById(android.R.id.list);

File: libcore/ui/src/main/java/io/github/muntashirakon/dialog/SearchableSingleChoiceDialogBuilder.java
Patch:
@@ -68,7 +68,6 @@ public SearchableSingleChoiceDialogBuilder(@NonNull Context context, @NonNull T[
         this(context, Arrays.asList(items), Arrays.asList(itemNames));
     }
 
-    @SuppressLint("InflateParams")
     public SearchableSingleChoiceDialogBuilder(@NonNull Context context, @NonNull List<T> items, @NonNull List<CharSequence> itemNames) {
         View view = View.inflate(context, R.layout.dialog_searchable_single_choice, null);
         RecyclerView recyclerView = view.findViewById(android.R.id.list);
@@ -94,7 +93,7 @@ public boolean onQueryTextChange(String newText) {
         builder = new MaterialAlertDialogBuilder(context)
                 .setView(view);
         @SuppressLint({"RestrictedApi", "PrivateResource"})
-        int layoutId = MaterialAttributes.resolveInteger(context, R.attr.multiChoiceItemLayout,
+        int layoutId = MaterialAttributes.resolveInteger(context, R.attr.singleChoiceItemLayout,
                 R.layout.mtrl_alert_select_dialog_singlechoice);
         adapter = new SearchableRecyclerViewAdapter(itemNames, items, layoutId);
         recyclerView.setAdapter(adapter);

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/explorer/AppExplorerFragment.java
Patch:
@@ -20,8 +20,6 @@
 import androidx.recyclerview.widget.LinearLayoutManager;
 import androidx.recyclerview.widget.RecyclerView;
 
-import org.jetbrains.annotations.NotNull;
-
 import java.io.File;
 
 import io.github.muntashirakon.AppManager.R;
@@ -98,7 +96,7 @@ public void onCreateOptionsMenu(@NonNull Menu menu, @NonNull MenuInflater inflat
     }
 
     @Override
-    public boolean onOptionsItemSelected(@NonNull @NotNull MenuItem item) {
+    public boolean onOptionsItemSelected(@NonNull MenuItem item) {
         int id = item.getItemId();
         if (id == R.id.action_list_options) {
             FmListOptions listOptions = new FmListOptions();

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/splitapk/SplitApkChooser.java
Patch:
@@ -21,9 +21,9 @@
 import aosp.libcore.util.EmptyArray;
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.apk.ApkFile;
-import io.github.muntashirakon.AppManager.types.SearchableMultiChoiceDialogBuilder;
 import io.github.muntashirakon.AppManager.utils.ArrayUtils;
 import io.github.muntashirakon.AppManager.utils.UIUtils;
+import io.github.muntashirakon.dialog.SearchableMultiChoiceDialogBuilder;
 
 public class SplitApkChooser extends DialogFragment {
     public static final String TAG = SplitApkChooser.class.getSimpleName();

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/dialog/BackupRestoreDialogFragment.java
Patch:
@@ -38,13 +38,13 @@
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.batchops.BatchOpsManager;
 import io.github.muntashirakon.AppManager.batchops.BatchOpsService;
-import io.github.muntashirakon.AppManager.types.SearchableMultiChoiceDialogBuilder;
 import io.github.muntashirakon.AppManager.types.UserPackagePair;
 import io.github.muntashirakon.AppManager.users.UserInfo;
 import io.github.muntashirakon.AppManager.utils.ArrayUtils;
 import io.github.muntashirakon.AppManager.utils.StoragePermission;
 import io.github.muntashirakon.dialog.CapsuleBottomSheetDialogFragment;
 import io.github.muntashirakon.dialog.DialogTitleBuilder;
+import io.github.muntashirakon.dialog.SearchableMultiChoiceDialogBuilder;
 
 public class BackupRestoreDialogFragment extends CapsuleBottomSheetDialogFragment {
     public static final String TAG = BackupRestoreDialogFragment.class.getSimpleName();

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/dialog/RestoreSingleFragment.java
Patch:
@@ -34,8 +34,8 @@
 import io.github.muntashirakon.AppManager.backup.BackupFlags;
 import io.github.muntashirakon.AppManager.backup.MetadataManager;
 import io.github.muntashirakon.AppManager.batchops.BatchOpsManager;
-import io.github.muntashirakon.AppManager.types.SearchableMultiChoiceDialogBuilder;
 import io.github.muntashirakon.AppManager.utils.UIUtils;
+import io.github.muntashirakon.dialog.SearchableFlagsDialogBuilder;
 
 public class RestoreSingleFragment extends Fragment {
     public static RestoreSingleFragment getInstance() {
@@ -129,9 +129,8 @@ private void handleRestore(@NonNull MetadataManager.Metadata selectedBackup) {
             enabledFlags.addFlag(BackupFlags.BACKUP_APK_FILES);
             disabledFlags.add(BackupFlags.BACKUP_APK_FILES);
         }
-        new SearchableMultiChoiceDialogBuilder<>(mContext, supportedBackupFlags, BackupFlags.getFormattedFlagNames(mContext, supportedBackupFlags))
+        new SearchableFlagsDialogBuilder<>(mContext, supportedBackupFlags, BackupFlags.getFormattedFlagNames(mContext, supportedBackupFlags), enabledFlags.getFlags())
                 .setTitle(R.string.backup_options)
-                .addSelections(BackupFlags.getBackupFlagsAsArray(enabledFlags.getFlags()))
                 .addDisabledItems(disabledFlags)
                 .setPositiveButton(R.string.restore, (dialog, which, selections) -> {
                     int newFlags = 0;

File: app/src/main/java/io/github/muntashirakon/AppManager/logcat/AbsLogViewerFragment.java
Patch:
@@ -33,9 +33,9 @@
 import io.github.muntashirakon.AppManager.logcat.helper.SaveLogHelper;
 import io.github.muntashirakon.AppManager.logcat.struct.LogLine;
 import io.github.muntashirakon.AppManager.settings.LogViewerPreferences;
-import io.github.muntashirakon.AppManager.types.SearchableMultiChoiceDialogBuilder;
 import io.github.muntashirakon.AppManager.utils.StoragePermission;
 import io.github.muntashirakon.AppManager.utils.UIUtils;
+import io.github.muntashirakon.dialog.SearchableMultiChoiceDialogBuilder;
 import io.github.muntashirakon.dialog.TextInputDialogBuilder;
 import io.github.muntashirakon.io.Path;
 import io.github.muntashirakon.reflow.ReflowMenuViewWrapper;

File: app/src/main/java/io/github/muntashirakon/AppManager/oneclickops/BackupTasksDialogFragment.java
Patch:
@@ -29,14 +29,14 @@
 import io.github.muntashirakon.AppManager.db.AppsDb;
 import io.github.muntashirakon.AppManager.db.entity.Backup;
 import io.github.muntashirakon.AppManager.main.ApplicationItem;
-import io.github.muntashirakon.AppManager.types.SearchableMultiChoiceDialogBuilder;
 import io.github.muntashirakon.AppManager.types.UserPackagePair;
 import io.github.muntashirakon.AppManager.usage.AppUsageStatsManager;
 import io.github.muntashirakon.AppManager.usage.UsageUtils;
 import io.github.muntashirakon.AppManager.utils.DigestUtils;
 import io.github.muntashirakon.AppManager.utils.LangUtils;
 import io.github.muntashirakon.AppManager.utils.PackageUtils;
 import io.github.muntashirakon.AppManager.utils.UIUtils;
+import io.github.muntashirakon.dialog.SearchableMultiChoiceDialogBuilder;
 import io.github.muntashirakon.io.Paths;
 
 public class BackupTasksDialogFragment extends DialogFragment {

File: app/src/main/java/io/github/muntashirakon/AppManager/oneclickops/RestoreTasksDialogFragment.java
Patch:
@@ -23,8 +23,8 @@
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.backup.dialog.BackupRestoreDialogFragment;
 import io.github.muntashirakon.AppManager.main.ApplicationItem;
-import io.github.muntashirakon.AppManager.types.SearchableMultiChoiceDialogBuilder;
 import io.github.muntashirakon.AppManager.utils.PackageUtils;
+import io.github.muntashirakon.dialog.SearchableMultiChoiceDialogBuilder;
 
 public class RestoreTasksDialogFragment extends DialogFragment {
     public static final String TAG = "RestoreTasksDialogFragment";

File: app/src/main/java/io/github/muntashirakon/AppManager/profiles/AppsProfileActivity.java
Patch:
@@ -2,6 +2,8 @@
 
 package io.github.muntashirakon.AppManager.profiles;
 
+import static io.github.muntashirakon.AppManager.utils.UIUtils.getSmallerText;
+
 import android.content.Intent;
 import android.content.pm.ApplicationInfo;
 import android.os.Bundle;
@@ -36,13 +38,11 @@
 import io.github.muntashirakon.AppManager.BaseActivity;
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.details.LauncherIconCreator;
-import io.github.muntashirakon.AppManager.types.SearchableMultiChoiceDialogBuilder;
 import io.github.muntashirakon.AppManager.utils.UIUtils;
+import io.github.muntashirakon.dialog.SearchableMultiChoiceDialogBuilder;
 import io.github.muntashirakon.dialog.TextInputDialogBuilder;
 import io.github.muntashirakon.util.UiUtils;
 
-import static io.github.muntashirakon.AppManager.utils.UIUtils.getSmallerText;
-
 public class AppsProfileActivity extends BaseActivity implements NavigationBarView.OnItemSelectedListener,
         ViewPager.OnPageChangeListener {
     public static final String EXTRA_PROFILE_NAME = "prof";

File: app/src/main/java/io/github/muntashirakon/AppManager/profiles/ConfPreferences.java
Patch:
@@ -24,10 +24,10 @@
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.backup.BackupFlags;
 import io.github.muntashirakon.AppManager.rules.RulesTypeSelectionDialogFragment;
-import io.github.muntashirakon.AppManager.types.SearchableMultiChoiceDialogBuilder;
 import io.github.muntashirakon.AppManager.users.UserInfo;
 import io.github.muntashirakon.AppManager.users.Users;
 import io.github.muntashirakon.AppManager.utils.ArrayUtils;
+import io.github.muntashirakon.dialog.SearchableMultiChoiceDialogBuilder;
 import io.github.muntashirakon.dialog.TextInputDialogBuilder;
 
 public class ConfPreferences extends PreferenceFragmentCompat {
@@ -212,7 +212,7 @@ public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {
         });
         // Set export rules
         Preference exportRulesPref = Objects.requireNonNull(findPreference("export_rules"));
-        int rulesCount = RulesTypeSelectionDialogFragment.types.length;
+        int rulesCount = RulesTypeSelectionDialogFragment.RULE_TYPES.length;
         List<Integer> checkedItems = new ArrayList<>(rulesCount);
         List<Integer> selectedRules = updateExportRulesPref(exportRulesPref);
         for (int i = 0; i < rulesCount; ++i) checkedItems.add(1 << i);
@@ -266,7 +266,7 @@ private List<Integer> updateExportRulesPref(Preference pref) {
             while (rules != 0) {
                 int flag = (rules & (~(1 << i)));
                 if (flag != rules) {
-                    selectedRulesStr.add(RulesTypeSelectionDialogFragment.types[i].toString());
+                    selectedRulesStr.add(RulesTypeSelectionDialogFragment.RULE_TYPES[i].toString());
                     rules = flag;
                     selectedRules.add(1 << i);
                 }

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/ImportExportRulesPreferences.java
Patch:
@@ -27,12 +27,12 @@
 import io.github.muntashirakon.AppManager.oneclickops.ItemCount;
 import io.github.muntashirakon.AppManager.rules.RulesTypeSelectionDialogFragment;
 import io.github.muntashirakon.AppManager.rules.compontents.ExternalComponentsImporter;
-import io.github.muntashirakon.AppManager.types.SearchableMultiChoiceDialogBuilder;
 import io.github.muntashirakon.AppManager.users.Users;
 import io.github.muntashirakon.AppManager.utils.DateUtils;
 import io.github.muntashirakon.AppManager.utils.PackageUtils;
 import io.github.muntashirakon.AppManager.utils.UIUtils;
 import io.github.muntashirakon.AppManager.utils.UiThreadHandler;
+import io.github.muntashirakon.dialog.SearchableMultiChoiceDialogBuilder;
 
 public class ImportExportRulesPreferences extends PreferenceFragment {
     private static final String MIME_JSON = "application/json";

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/LogViewerPreferences.java
Patch:
@@ -24,9 +24,9 @@
 import io.github.muntashirakon.AppManager.logcat.helper.LogcatHelper;
 import io.github.muntashirakon.AppManager.logcat.helper.PreferenceHelper;
 import io.github.muntashirakon.AppManager.logcat.struct.LogLine;
-import io.github.muntashirakon.AppManager.types.SearchableMultiChoiceDialogBuilder;
 import io.github.muntashirakon.AppManager.utils.AppPref;
 import io.github.muntashirakon.AppManager.utils.UIUtils;
+import io.github.muntashirakon.dialog.SearchableMultiChoiceDialogBuilder;
 import io.github.muntashirakon.dialog.TextInputDialogBuilder;
 
 public class LogViewerPreferences extends PreferenceFragment {

File: libcore/io/src/main/java/io/github/muntashirakon/io/FileHolder.java
Patch:
@@ -2,6 +2,7 @@
 
 package io.github.muntashirakon.io;
 
+import android.annotation.SuppressLint;
 import android.os.Build;
 import android.system.ErrnoException;
 import android.system.Int64Ref;
@@ -74,6 +75,7 @@ void ensureOpen() throws ClosedChannelException {
             throw new ClosedChannelException();
     }
 
+    @SuppressLint("NewApi")
     int fdToPipe(int len, long offset) throws ErrnoException, IOException {
         if (fd == null || write == null)
             throw new ClosedChannelException();
@@ -107,6 +109,7 @@ int fdToPipe(int len, long offset) throws ErrnoException, IOException {
         return (int) result;
     }
 
+    @SuppressLint("NewApi")
     int pipeToFd(int len, long offset, boolean exact) throws ErrnoException, IOException {
         if (fd == null || read == null)
             throw new ClosedChannelException();

File: libcore/io/src/main/java/io/github/muntashirakon/io/NIOFactory.java
Patch:
@@ -2,6 +2,7 @@
 
 package io.github.muntashirakon.io;
 
+import android.annotation.SuppressLint;
 import android.os.Binder;
 import android.os.Build;
 import android.os.IBinder;
@@ -42,6 +43,7 @@ public ExtendedFile getFile(@Nullable String parent, @NonNull String child) {
                 return new LocalFile(parent, child);
             }
 
+            @SuppressLint("NewApi")
             @NonNull
             @Override
             public FileChannel openChannel(@NonNull File file, int mode) throws IOException {

File: app/src/main/java/io/github/muntashirakon/io/fs/DexFileSystem.java
Patch:
@@ -9,6 +9,7 @@
 import androidx.annotation.Nullable;
 
 import org.antlr.runtime.RecognitionException;
+import org.jetbrains.annotations.NotNull;
 import org.jf.dexlib2.iface.ClassDef;
 import org.jf.dexlib2.writer.io.FileDataStore;
 
@@ -215,8 +216,7 @@ protected void invalidate(String path) {
     }
 
     @Override
-    public long lastModified(String path) {
-        checkMounted();
+    public long lastModified(@NotNull Node<?> node) {
         return getFile().lastModified();
     }
 

File: app/src/main/java/io/github/muntashirakon/AppManager/details/info/AppInfoFragment.java
Patch:
@@ -807,7 +807,7 @@ private void setupTagCloud(AppInfoViewModel.TagCloud tagCloud) {
         if (tagCloud.usesPlayAppSigning) {
             addChip(R.string.uses_play_app_signing, ColorCodes.getAppPlayAppSigningIndicatorColor(mActivity))
                     .setOnClickListener(v ->
-                            new MaterialAlertDialogBuilder(mActivity)
+                            new ScrollableDialogBuilder(mActivity)
                                     .setTitle(R.string.uses_play_app_signing)
                                     .setMessage(R.string.uses_play_app_signing_description)
                                     .setNegativeButton(R.string.close, null)

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppDetailsFragment.java
Patch:
@@ -910,7 +910,7 @@ public int getItemCount() {
         }
 
         private void handleBlock(@NonNull ViewHolder holder, @NonNull AppDetailsComponentItem item, RuleType ruleType) {
-            holder.toggleSwitch.setChecked(item.isBlocked());
+            holder.toggleSwitch.setChecked(!item.isBlocked());
             holder.toggleSwitch.setVisibility(View.VISIBLE);
             holder.toggleSwitch.setOnClickListener(buttonView -> {
                 String componentStatus = item.isBlocked()

File: app/src/main/java/io/github/muntashirakon/AppManager/details/info/AppInfoFragment.java
Patch:
@@ -1179,7 +1179,7 @@ private void setHorizontalActions() {
                 // Aurora Store is disabled or the installed version has promotional apps
                 throw new PackageManager.NameNotFoundException();
             }
-            addToHorizontalLayout(R.string.store, R.drawable.ic_frost_aurorastore)
+            addToHorizontalLayout(R.string.open_in_aurora_store, R.drawable.ic_frost_aurorastore)
                     .setOnClickListener(v -> {
                         Intent intent = new Intent(Intent.ACTION_VIEW);
                         intent.setPackage(PACKAGE_NAME_AURORA_STORE);

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppDetailsViewModel.java
Patch:
@@ -1088,7 +1088,7 @@ public LiveData<UserInfo> getUserInfo() {
         MutableLiveData<UserInfo> userInfoMutableLiveData = new MutableLiveData<>();
         mExecutor.submit(() -> {
             final List<UserInfo> userInfoList;
-            if (!mIsExternalApk && Ops.isPrivileged()) {
+            if (!mIsExternalApk) {
                 userInfoList = Users.getUsers();
             } else userInfoList = null;
             if (userInfoList != null && userInfoList.size() > 1) {

File: app/src/main/java/io/github/muntashirakon/AppManager/scanner/ScannerViewModel.java
Patch:
@@ -285,6 +285,7 @@ private void loadAllClasses() {
             mAllClasses = dfs.getDexClasses().getClassNames();
             Collections.sort(mAllClasses);
         } catch (Throwable e) {
+            e.printStackTrace();
             mAllClasses = Collections.emptyList();
         }
         mAllClassesLiveData.postValue(mAllClasses);

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/FileUtils.java
Patch:
@@ -438,7 +438,7 @@ public static File getCachedFile(InputStream inputStream, @Nullable String exten
     @AnyThread
     @NonNull
     public static File getTempFile(@Nullable String extension) throws IOException {
-        return File.createTempFile("file_" + System.currentTimeMillis(), extension, getCachePath());
+        return File.createTempFile("file_" + System.currentTimeMillis(), "." + extension, getCachePath());
     }
 
     @AnyThread

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/dialog/RestoreSingleFragment.java
Patch:
@@ -191,6 +191,7 @@ public BackupAdapter(@NonNull Context context, @NonNull List<MetadataManager.Met
             mSelectionListener = selectionListener;
             mLayoutId = MaterialAttributes.resolveInteger(context, R.attr.multiChoiceItemLayout,
                     R.layout.mtrl_alert_select_dialog_multichoice);
+            mSelectionListener.onSelectionChanged(null, mSelectedPositions.size(), false);
             for (int i = 0; i < backups.size(); ++i) {
                 MetadataManager.Metadata backup = backups.get(i);
                 mBackups.add(backup);

File: server/src/main/java/io/github/muntashirakon/AppManager/server/RootServiceMain.java
Patch:
@@ -123,7 +123,7 @@ public Object[] call() {
     public RootServiceMain(String[] args) throws Exception {
         super(null);
 
-        if (Process.myPid() == 0 && !allowBinderCommunication()) {
+        if (Process.myUid() == 0 && !allowBinderCommunication()) {
             throw new IOException("Current su does not allow Binder communication.");
         }
 

File: app/src/main/java/io/github/muntashirakon/AppManager/fm/ContentType2.java
Patch:
@@ -13,10 +13,11 @@
 import java.util.Map;
 
 public enum ContentType2 {
+    DEX("application/x-dex", "dex", "dex"),
     PEM("application/pem-certificate-chain", "pem", "pem"),
     PK8("application/pkcs8", "pkcs8", "pk8"),
-    M4A("audio/mp4a-latm", "MP4A-LATM", "m4a"),
-    SMALI("text/x-smali", "Smali", "smali"),
+    M4A("audio/mp4a-latm", "mp4a-latm", "m4a"),
+    SMALI("text/x-smali", "smali", "smali"),
     /** default if no specific match to the mime-type */
     OTHER("application/octet-stream", "other"),
     ;

File: app/src/main/java/io/github/muntashirakon/AppManager/fm/ContentType2.java
Patch:
@@ -16,6 +16,7 @@ public enum ContentType2 {
     PEM("application/pem-certificate-chain", "pem", "pem"),
     PK8("application/pkcs8", "pkcs8", "pk8"),
     M4A("audio/mp4a-latm", "MP4A-LATM", "m4a"),
+    SMALI("text/x-smali", "Smali", "smali"),
     /** default if no specific match to the mime-type */
     OTHER("application/octet-stream", "other"),
     ;

File: app/src/main/java/io/github/muntashirakon/io/fs/VirtualFileSystem.java
Patch:
@@ -55,7 +55,7 @@ public static Uri getUri(int fsId, @Nullable String path) {
     }
 
     @NonNull
-    public static ZipFileSystem fromZipFile(@NonNull Uri mountPoint, @NonNull File zipFile) {
+    public static VirtualFileSystem fromZipFile(@NonNull Uri mountPoint, @NonNull File zipFile) {
         return new ZipFileSystem(mountPoint, zipFile);
     }
 

File: app/src/main/java/io/github/muntashirakon/io/fs/ZipFileSystem.java
Patch:
@@ -25,7 +25,7 @@
 import io.github.muntashirakon.AppManager.utils.FileUtils;
 import io.github.muntashirakon.io.Path;
 
-public class ZipFileSystem extends VirtualFileSystem {
+class ZipFileSystem extends VirtualFileSystem {
     private final LruCache<String, Node<ZipEntry>> cache = new LruCache<>(100);
     @NonNull
     private final File zipFilePath;

File: app/src/test/java/androidx/documentfile/provider/ZipDocumentFileTest.java
Patch:
@@ -17,7 +17,6 @@
 
 import io.github.muntashirakon.AppManager.backup.convert.OABConverter;
 import io.github.muntashirakon.io.fs.VirtualFileSystem;
-import io.github.muntashirakon.io.fs.ZipFileSystem;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
@@ -39,7 +38,7 @@ public void setUp() throws Exception {
     @Test
     public void testZipDocument() throws Throwable {
         List<String> level1 = Arrays.asList("AndroidManifest.xml", "META-INF", "classes.dex", "res", "resources.arsc");
-        ZipFileSystem fs = VirtualFileSystem.fromZipFile(Uri.fromFile(new File("/tmp/zip1")), apkFile);
+        VirtualFileSystem fs = VirtualFileSystem.fromZipFile(Uri.fromFile(new File("/tmp/zip1")), apkFile);
         VirtualFileSystem.mount(fs);
         VirtualDocumentFile doc = new VirtualDocumentFile(null, fs);
         assertTrue(doc.isDirectory());

File: app/src/main/java/io/github/muntashirakon/AppManager/scanner/ScannerViewModel.java
Patch:
@@ -44,7 +44,8 @@
 import io.github.muntashirakon.AppManager.utils.MultithreadedExecutor;
 import io.github.muntashirakon.io.Path;
 import io.github.muntashirakon.io.Paths;
-import io.github.muntashirakon.io.VirtualFileSystem;
+import io.github.muntashirakon.io.fs.DexFileSystem;
+import io.github.muntashirakon.io.fs.VirtualFileSystem;
 
 public class ScannerViewModel extends AndroidViewModel implements VirusTotal.FullScanResponseInterface {
     private static final Pattern SIG_TO_IGNORE = Pattern.compile("^(android(|x)|com\\.android|com\\.google\\.android|java(|x)|j\\$\\.(util|time)|\\w\\d?(\\.\\w\\d?)+)\\..*$");
@@ -276,7 +277,7 @@ private void loadAllClasses() {
             mNativeLibraries = Collections.emptyList();
         }
         try {
-            VirtualFileSystem.DexFileSystem dfs = new VirtualFileSystem.DexFileSystem(Uri.fromFile(mApkFile), mApkFile);
+            DexFileSystem dfs = VirtualFileSystem.fromDexFile(Uri.fromFile(mApkFile), mApkFile);
             mDexVfsId = VirtualFileSystem.mount(dfs);
             mAllClasses = dfs.getDexClasses().getClassNames();
             Collections.sort(mAllClasses);

File: app/src/main/java/io/github/muntashirakon/AppManager/fm/FmProvider.java
Patch:
@@ -125,6 +125,7 @@ public Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable S
                     if (filePath == null
                             || !new File(filePath).canRead()
                             || Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
+                        row.add(null);
                         continue;
                     }
                     row.add(filePath);

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/explorer/AdapterItem.java
Patch:
@@ -36,7 +36,7 @@ public class AdapterItem implements Comparable<AdapterItem> {
     public static final int ACTION_CREATE = 1 << 3;
 
     final String extension;
-    final FileType type;
+    final int type;
     @NonNull
     final Path path;
 

File: app/src/main/java/io/github/muntashirakon/AppManager/fm/FmItem.java
Patch:
@@ -11,7 +11,7 @@
 
 public class FmItem implements Comparable<FmItem> {
     final String extension;
-    final FileType type;
+    final int type;
     final String name;
     @NonNull
     final Path path;

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/FreezeUtils.java
Patch:
@@ -42,7 +42,7 @@ public static void freeze(@NonNull String packageName, @UserIdInt int userId) th
         freeze(packageName, userId, AppPref.getDefaultFreezingMethod());
     }
 
-    public static void freeze(@NonNull String packageName, @UserIdInt int userId, @FreezeType int freezeType)
+    private static void freeze(@NonNull String packageName, @UserIdInt int userId, @FreezeType int freezeType)
             throws RemoteException {
         if (freezeType == FREEZE_HIDE) {
             PackageManagerCompat.hidePackage(packageName, userId, true);

File: app/src/main/java/io/github/muntashirakon/AppManager/crypto/OpenPGPCrypto.java
Patch:
@@ -194,7 +194,7 @@ private void doActionForFiles(Intent intent, int mode, boolean waitForResult) th
             newFiles.add(outputPath);
             Log.i(TAG, "Input: " + inputPath + "\nOutput: " + outputPath);
             InputStream is = inputPath.openInputStream();
-            OutputStream os = inputPath.openOutputStream();
+            OutputStream os = outputPath.openOutputStream();
             OpenPgpApi api = new OpenPgpApi(context, service.getService());
             Intent result = api.executeApi(intent, is, os);
             handler.post(() -> handleResult(result));

File: app/src/main/java/io/github/muntashirakon/AppManager/BaseActivity.java
Patch:
@@ -58,8 +58,8 @@ public abstract class BaseActivity extends AppCompatActivity {
 
     @Override
     protected final void onCreate(@Nullable Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
         AppearanceUtils.applyToActivity(this, getTransparentBackground());
+        super.onCreate(savedInstanceState);
         if (Ops.isAuthenticated()) {
             Log.d(TAG, "Already authenticated.");
             onAuthenticated(savedInstanceState);

File: app/src/main/java/io/github/muntashirakon/AppManager/crypto/ks/KeyStoreActivity.java
Patch:
@@ -24,8 +24,8 @@ public class KeyStoreActivity extends AppCompatActivity {
 
     @Override
     protected void onCreate(@Nullable Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
         AppearanceUtils.applyToActivity(this, true);
+        super.onCreate(savedInstanceState);
         if (getIntent() != null) {
             onNewIntent(getIntent());
         } else finish();

File: app/src/main/java/io/github/muntashirakon/AppManager/main/MainActivity.java
Patch:
@@ -531,7 +531,7 @@ protected void onStart() {
             }
         }
         // Check for backup volume
-        if (!AppPref.getAppManagerDirectory().exists()) {
+        if (!AppPref.backupDirectoryExists(this)) {
             new MaterialAlertDialogBuilder(this)
                     .setTitle(R.string.backup_volume)
                     .setMessage(R.string.backup_volume_unavailable_warning)

File: app/src/main/java/io/github/muntashirakon/AppManager/misc/OsEnvironment.java
Patch:
@@ -96,7 +96,7 @@ public Path[] getExternalDirs() {
             if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.N) {
                 final StorageVolume[] volumes = StorageManagerCompat.getVolumeList(AppManager.getContext(),
                         mUserHandle, StorageManagerHidden.FLAG_FOR_WRITE);
-                Log.e(TAG, Arrays.toString(volumes));
+                Log.d(TAG, Arrays.toString(volumes));
                 final List<Path> files = new ArrayList<>();
                 File tmpFile;
                 for (@NonNull StorageVolume volume : volumes) {

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/Ops.java
Patch:
@@ -225,15 +225,15 @@ private static void autoDetectRootOrAdb(@NonNull Context context) {
         }
         // Root not granted
         if (!PermissionUtils.hasPermission(context, Manifest.permission.INTERNET)) {
-            // INTERNET permission is not granted (e.g. GrapheneOS), skip checking for ADB.
+            // INTERNET permission is not granted, skip checking for ADB.
             return;
         }
         // Check for ADB
         sIsAdb = true; // First enable ADB
         try {
             ServerConfig.setAdbPort(findAdbPortNoThrow(context, 7, ServerConfig.getAdbPort()));
             LocalServer.restart();
-        } catch (RemoteException | IOException e) {
+        } catch (Throwable e) {
             Log.e("ADB", e);
         }
         sIsAdb = LocalServer.isAMServiceAlive();

File: app/src/main/java/io/github/muntashirakon/AppManager/details/ManifestViewerActivity.java
Patch:
@@ -67,7 +67,7 @@ public class ManifestViewerActivity extends BaseActivity {
     private String packageName;
     private ApkFile apkFile;
     private final ActivityResultLauncher<String> exportManifest = registerForActivityResult(
-            new ActivityResultContracts.CreateDocument(),
+            new ActivityResultContracts.CreateDocument("application/xml"),
             uri -> {
                 if (uri == null) {
                     // Back button pressed.

File: app/src/main/java/io/github/muntashirakon/AppManager/details/info/AppInfoFragment.java
Patch:
@@ -189,7 +189,7 @@ public class AppInfoFragment extends Fragment implements SwipeRefreshLayout.OnRe
     @GuardedBy("mListItems")
     private final List<ListItem> mListItems = new ArrayList<>();
     private final BetterActivityResult<String, Uri> export = BetterActivityResult
-            .registerForActivityResult(this, new ActivityResultContracts.CreateDocument());
+            .registerForActivityResult(this, new ActivityResultContracts.CreateDocument("*/*"));
     private final BetterActivityResult<String, Boolean> requestPerm = BetterActivityResult
             .registerForActivityResult(this, new ActivityResultContracts.RequestPermission());
     private final BetterActivityResult<Intent, ActivityResult> activityLauncher = BetterActivityResult

File: app/src/main/java/io/github/muntashirakon/AppManager/logcat/LogViewerActivity.java
Patch:
@@ -113,7 +113,7 @@ public interface SearchingInterface {
             BetterActivityResult.registerActivityForResult(this);
     private final StoragePermission storagePermission = StoragePermission.init(this);
     private final BetterActivityResult<String, Uri> saveLauncher = BetterActivityResult
-            .registerForActivityResult(this, new ActivityResultContracts.CreateDocument());
+            .registerForActivityResult(this, new ActivityResultContracts.CreateDocument("*/*"));
 
     public static void startChooser(@NonNull Context context, @Nullable String subject,
                                     @NonNull String attachmentType, @NonNull Path attachment) {

File: app/src/main/java/io/github/muntashirakon/AppManager/main/MainActivity.java
Patch:
@@ -105,7 +105,7 @@ public class MainActivity extends BaseActivity implements AdvancedSearchView.OnQ
     private final StoragePermission storagePermission = StoragePermission.init(this);
 
     private final ActivityResultLauncher<String> batchExportRules = registerForActivityResult(
-            new ActivityResultContracts.CreateDocument(),
+            new ActivityResultContracts.CreateDocument("text/tab-separated-values"),
             uri -> {
                 if (uri == null) {
                     // Back button pressed.

File: app/src/main/java/io/github/muntashirakon/AppManager/profiles/ProfilesActivity.java
Patch:
@@ -61,7 +61,7 @@ public class ProfilesActivity extends BaseActivity {
     private String profileName;
 
     private final ActivityResultLauncher<String> exportProfile = registerForActivityResult(
-            new ActivityResultContracts.CreateDocument(),
+            new ActivityResultContracts.CreateDocument("application/json"),
             uri -> {
                 if (uri == null) {
                     // Back button pressed.

File: app/src/main/java/io/github/muntashirakon/AppManager/scanner/ClassViewerActivity.java
Patch:
@@ -104,7 +104,7 @@ public class ClassViewerActivity extends BaseActivity {
     private String className;
     private boolean isDisplayingSmali = true;
     private final ActivityResultLauncher<String> saveJavaOrSmali = registerForActivityResult(
-            new ActivityResultContracts.CreateDocument(),
+            new ActivityResultContracts.CreateDocument("*/*"),
             uri -> {
                 if (uri == null) {
                     // Back button pressed.

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/ImportExportRulesDialogFragment.java
Patch:
@@ -45,7 +45,7 @@ public class ImportExportRulesDialogFragment extends CapsuleBottomSheetDialogFra
     private final int userHandle = UserHandleHidden.myUserId();
     private SettingsActivity activity;
     private final ActivityResultLauncher<String> exportRules = registerForActivityResult(
-            new ActivityResultContracts.CreateDocument(),
+            new ActivityResultContracts.CreateDocument("text/tab-separated-values"),
             uri -> {
                 if (uri == null) {
                     // Back button pressed.

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/crypto/ImportExportKeyStoreDialogFragment.java
Patch:
@@ -37,7 +37,7 @@ public class ImportExportKeyStoreDialogFragment extends DialogFragment {
 
     private FragmentActivity activity;
     private final ActivityResultLauncher<String> exportKeyStore = registerForActivityResult(
-            new ActivityResultContracts.CreateDocument(), uri -> {
+            new ActivityResultContracts.CreateDocument("application/octet-stream"), uri -> {
                 if (uri == null) {
                     dismiss();
                     return;

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/explorer/AppExplorerAdapter.java
Patch:
@@ -61,12 +61,12 @@ public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
         holder.title.setText(item.getName());
         // Set icon
         if (item.type == FileType.DIRECTORY) {
-            holder.icon.setImageResource(R.drawable.ic_folder_outline);
+            holder.icon.setImageResource(R.drawable.ic_folder);
             holder.subtitle.setText(null);
             holder.itemView.setOnClickListener(v -> activity.loadNewFragment(
                     AppExplorerFragment.getNewInstance(item.path.getUri())));
         } else {
-            holder.icon.setImageResource(R.drawable.ic_file_document_outline);
+            holder.icon.setImageResource(R.drawable.ic_file_document);
             holder.subtitle.setText(Formatter.formatFileSize(activity, item.length()));
             holder.itemView.setOnClickListener(v -> {
                 if (item.extension.equals("xml")) {
@@ -140,7 +140,7 @@ public ViewHolder(@NonNull View itemView) {
             action = itemView.findViewById(R.id.item_open);
             title = itemView.findViewById(R.id.item_title);
             subtitle = itemView.findViewById(R.id.item_subtitle);
-            action.setIconResource(R.drawable.ic_more_vert_black_24dp);
+            action.setIconResource(R.drawable.ic_more_vert);
         }
     }
 }

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/installer/PackageInstallerActivity.java
Patch:
@@ -184,7 +184,7 @@ protected void onAuthenticated(@Nullable Bundle savedInstanceState) {
             if (newPackageInfo == null) {
                 new MaterialAlertDialogBuilder(this)
                         .setTitle(R.string._undefined)
-                        .setIcon(R.drawable.ic_baseline_get_app_24)
+                        .setIcon(R.drawable.ic_get_app)
                         .setMessage(R.string.failed_to_fetch_package_info)
                         .setCancelable(false)
                         .setNegativeButton(R.string.close, (dialog, which) -> {
@@ -566,7 +566,7 @@ public AlertDialog getInstallationFinishedDialog(String packageName, CharSequenc
                 .setSubtitle(getVersionInfoWithTrackers(model.getNewPackageInfo()))
                 .setStartIcon(model.getAppIcon());
         if (displayOpenAndAppInfo) {
-            title.setEndIcon(R.drawable.ic_information_variant, v -> {
+            title.setEndIcon(R.drawable.ic_information, v -> {
                 Intent appDetailsIntent = AppDetailsActivity.getIntent(this, packageName, lastUserId, true);
                 appDetailsIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                 startActivity(appDetailsIntent);
@@ -605,7 +605,7 @@ public AlertDialog getParsingProgressDialog() {
         tv.setText(R.string.staging_apk_files);
         return new MaterialAlertDialogBuilder(this)
                 .setTitle(R.string._undefined)
-                .setIcon(R.drawable.ic_baseline_get_app_24)
+                .setIcon(R.drawable.ic_get_app)
                 .setCancelable(false)
                 .setNegativeButton(R.string.cancel, (dialog, which) -> {
                     dialog.dismiss();

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/dialog/BackupRestoreDialogFragment.java
Patch:
@@ -272,7 +272,7 @@ private void loadMultipleBackupRestoreViewPager() {
 
     public void updateMultipleRestoreHeader() {
         // Display delete button
-        mDialogTitleBuilder.setEndIcon(R.drawable.ic_trash_can_outline, v -> handleDeleteBaseBackup())
+        mDialogTitleBuilder.setEndIcon(R.drawable.ic_trash_can, v -> handleDeleteBaseBackup())
                 .setEndIconContentDescription(R.string.delete_backup);
         setHeader(mDialogTitleBuilder.build());
     }

File: app/src/main/java/io/github/muntashirakon/AppManager/fm/FmAdapter.java
Patch:
@@ -59,11 +59,11 @@ public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
         holder.subtitle.setText(Formatter.formatFileSize(fmActivity, item.path.length()));
         // Set icon
         if (item.type == FileType.DIRECTORY) {
-            holder.icon.setImageResource(R.drawable.ic_folder_outline);
+            holder.icon.setImageResource(R.drawable.ic_folder);
             holder.itemView.setOnClickListener(v -> fmActivity.loadNewFragment(
                     FmFragment.getNewInstance(item.path.getUri())));
         } else {
-            holder.icon.setImageResource(R.drawable.ic_file_document_outline);
+            holder.icon.setImageResource(R.drawable.ic_file_document);
             holder.itemView.setOnClickListener(v -> {
 //                if (ApkFile.SUPPORTED_EXTENSIONS.contains(item.extension)) {
 //                    Intent intent = new Intent(AppManager.getContext(), AppDetailsActivity.class);
@@ -143,7 +143,7 @@ public ViewHolder(@NonNull View itemView) {
             action = itemView.findViewById(R.id.item_open);
             title = itemView.findViewById(R.id.item_title);
             subtitle = itemView.findViewById(R.id.item_subtitle);
-            action.setIconResource(R.drawable.ic_more_vert_black_24dp);
+            action.setIconResource(R.drawable.ic_more_vert);
         }
     }
 }

File: app/src/main/java/io/github/muntashirakon/AppManager/intercept/ActivityInterceptor.java
Patch:
@@ -1239,7 +1239,7 @@ public ViewHolder(@NonNull View itemView) {
                 title = itemView.findViewById(R.id.item_title);
                 subtitle = itemView.findViewById(R.id.item_subtitle);
                 actionIcon = itemView.findViewById(R.id.item_open);
-                actionIcon.setIconResource(R.drawable.ic_trash_can_outline);
+                actionIcon.setIconResource(R.drawable.ic_trash_can);
                 icon = itemView.findViewById(R.id.item_icon);
                 icon.setVisibility(View.GONE);
             }

File: app/src/main/java/io/github/muntashirakon/AppManager/logcat/AbsLogViewerFragment.java
Patch:
@@ -134,10 +134,10 @@ public void onPrepareOptionsMenu(@NonNull Menu menu) {
         MenuItem expandMenu = menu.findItem(R.id.action_expand_collapse);
         if (expandMenu != null) {
             if (mViewModel.isCollapsedMode()) {
-                expandMenu.setIcon(R.drawable.ic_expand_more_white_24dp);
+                expandMenu.setIcon(R.drawable.ic_expand_more);
                 expandMenu.setTitle(R.string.expand_all);
             } else {
-                expandMenu.setIcon(R.drawable.ic_expand_less_white_24dp);
+                expandMenu.setIcon(R.drawable.ic_expand_less);
                 expandMenu.setTitle(R.string.collapse_all);
             }
         }

File: app/src/main/java/io/github/muntashirakon/AppManager/logcat/LiveLogViewerFragment.java
Patch:
@@ -85,10 +85,10 @@ public boolean onOptionsItemSelected(@NonNull MenuItem item) {
         if (id == R.id.action_play_pause) {
             if (mViewModel.isLogcatPaused()) {
                 mViewModel.resumeLogcat();
-                item.setIcon(R.drawable.ic_pause_white_24dp);
+                item.setIcon(R.drawable.ic_pause);
             } else {
                 mViewModel.pauseLogcat();
-                item.setIcon(R.drawable.ic_play_arrow_white_24dp);
+                item.setIcon(R.drawable.ic_play_arrow);
             }
         } else if (id == R.id.action_clear) {
             if (mLogListAdapter != null) {

File: app/src/main/java/io/github/muntashirakon/AppManager/misc/AdvancedSearchView.java
Patch:
@@ -147,7 +147,7 @@ public AdvancedSearchView(@NonNull Context context, @Nullable AttributeSet attrs
         context = getContext();
         mSearchSrcTextView = findViewById(R.id.search_src_text);
         mSearchTypeSelectionButton = findViewById(R.id.search_mag_icon);
-        mSearchTypeSelectionButton.setImageResource(R.drawable.ic_filter_menu_outline);
+        mSearchTypeSelectionButton.setImageResource(R.drawable.ic_filter_menu);
         mSearchTypeSelectionButton.setBackground(UiUtils.getDrawable(context, android.R.attr.selectableItemBackgroundBorderless));
         mSearchTypeSelectionButton.setOnClickListener(onClickSearchIcon);
         final TintTypedArray a = TintTypedArray.obtainStyledAttributes(context,

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/BackupRestorePreferences.java
Patch:
@@ -275,7 +275,7 @@ private void displayVolumeSelectionDialog() {
                 .setTitle(R.string.backup_volume)
                 .setSubtitle(R.string.backup_volume_dialog_description)
                 .setStartIcon(R.drawable.ic_zip_disk)
-                .setEndIcon(R.drawable.ic_baseline_add_24, v -> new MaterialAlertDialogBuilder(activity)
+                .setEndIcon(R.drawable.ic_add, v -> new MaterialAlertDialogBuilder(activity)
                         .setTitle(R.string.notice)
                         .setMessage(R.string.notice_saf)
                         .setPositiveButton(R.string.go, (dialog1, which1) -> {

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/Ops.java
Patch:
@@ -242,7 +242,7 @@ public static void connectWirelessDebugging(@NonNull FragmentActivity activity,
                                                 @NonNull AdbConnectionInterface callback) {
         DialogTitleBuilder builder = new DialogTitleBuilder(activity)
                 .setTitle(R.string.wireless_debugging)
-                .setEndIcon(R.drawable.ic_open_in_new_black_24dp, v -> {
+                .setEndIcon(R.drawable.ic_open_in_new, v -> {
                     Intent intent = new Intent(android.provider.Settings.ACTION_APPLICATION_DEVELOPMENT_SETTINGS)
                             .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                     activity.startActivity(intent);

File: app/src/main/java/io/github/muntashirakon/AppManager/usage/AppUsageDetailsDialog.java
Patch:
@@ -71,7 +71,7 @@ public void onBodyInitialized(@NonNull View view, @Nullable Bundle savedInstance
                 .setTitleSelectable(true)
                 .setSubtitle(usageInfo.packageName)
                 .setSubtitleSelectable(true)
-                .setEndIcon(R.drawable.ic_information_variant, v -> {
+                .setEndIcon(R.drawable.ic_information, v -> {
                     Intent appDetailsIntent = AppDetailsActivity.getIntent(activity, usageInfo.packageName,
                             usageInfo.userId);
                     startActivity(appDetailsIntent);

File: libcore/ui/src/main/java/io/github/muntashirakon/widget/MaterialAlertView.java
Patch:
@@ -162,7 +162,7 @@ private void applyAlertType() {
                 break;
             default:
             case ALERT_TYPE_INFO: {
-                setStartIconDrawable(R.drawable.ic_information_variant);
+                setStartIconDrawable(R.drawable.ic_information);
                 ColorStateList foreground = ColorStateList.valueOf(MaterialColors.getColor(this, R.attr.colorOnPrimaryContainer));
                 ColorStateList background = ColorStateList.valueOf(MaterialColors.getColor(this, R.attr.colorPrimaryContainer));
                 setBoxBackgroundColorStateList(background);

File: app/src/main/java/io/github/muntashirakon/AppManager/runningapps/RunningAppsViewModel.java
Patch:
@@ -258,7 +258,7 @@ public boolean canRunInBackground(@NonNull ApplicationInfo info) {
                 canRun |= (mode != AppOpsManager.MODE_IGNORED && mode != AppOpsManager.MODE_ERRORED);
             }
             return canRun;
-        } catch (RemoteException e) {
+        } catch (RemoteException | SecurityException e) {
             return true;
         }
     }

File: app/src/main/java/io/github/muntashirakon/AppManager/profiles/LogViewerFragment.java
Patch:
@@ -40,7 +40,8 @@ public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceStat
             ProfileLogger.clearLogs(model.getProfileName());
             tv.setText("");
         });
-        tv.setText(getFormattedLogs(ProfileLogger.getAllLogs(model.getProfileName())));
+        model.getLogs().observe(getViewLifecycleOwner(), logs -> tv.setText(getFormattedLogs(logs)));
+        model.loadLogs();
     }
 
     @Override

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/installer/PackageInstallerCompat.java
Patch:
@@ -529,7 +529,7 @@ public boolean install(@NonNull ApkFile apkFile) {
             Log.d(TAG, "Install: selected entries: " + selectedEntries.size());
             // Write apk files
             for (ApkFile.Entry entry : selectedEntries) {
-                try (InputStream apkInputStream = entry.getSignedInputStream(context);
+                try (InputStream apkInputStream = entry.getSignedInputStream();
                      OutputStream apkOutputStream = session.openWrite(entry.getFileName(), 0, entry.getFileSize())) {
                     IoUtils.copy(apkInputStream, apkOutputStream);
                     session.fsync(apkOutputStream);

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/installer/PackageInstallerViewModel.java
Patch:
@@ -157,7 +157,7 @@ private void getPackageInfoInternal() throws PackageManager.NameNotFoundExceptio
     @WorkerThread
     @NonNull
     private PackageInfo loadNewPackageInfo() throws PackageManager.NameNotFoundException, IOException {
-        String apkPath = apkFile.getBaseEntry().getSignedFile(getApplication()).getAbsolutePath();
+        String apkPath = apkFile.getBaseEntry().getSignedFile().getAbsolutePath();
         @SuppressLint("WrongConstant")
         PackageInfo packageInfo = packageManager.getPackageArchiveInfo(apkPath, PackageManager.GET_PERMISSIONS
                 | PackageManager.GET_ACTIVITIES | PackageManager.GET_RECEIVERS | PackageManager.GET_PROVIDERS

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/dialog/RestoreMultipleFragment.java
Patch:
@@ -56,7 +56,7 @@ public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceStat
         if (BuildConfig.DEBUG) {
             supportedFlags |= BackupFlags.BACKUP_CUSTOM_USERS;
         }
-        int checkedFlags = BackupFlags.fromPref().getFlags();
+        int checkedFlags = BackupFlags.fromPref().getFlags() & supportedFlags;
         int disabledFlags = 0;
         if (mViewModel.getUninstalledApps().size() > 0) {
             checkedFlags |= BackupFlags.BACKUP_APK_FILES;

File: app/src/main/java/io/github/muntashirakon/AppManager/changelog/ChangelogParser.java
Patch:
@@ -89,8 +89,8 @@ public class ChangelogParser {
      * @param changeLogFileResourceId reference for a custom xml file
      */
     public ChangelogParser(@NonNull Context context, @RawRes int changeLogFileResourceId) {
-        this.mContext = context;
-        this.mChangeLogFileResourceId = changeLogFileResourceId;
+        mContext = context;
+        mChangeLogFileResourceId = changeLogFileResourceId;
     }
 
     /**
@@ -106,7 +106,7 @@ public Changelog parse() throws IOException, XmlPullParserException {
             Changelog changelog = new Changelog();
             XmlPullParser parser = Xml.newPullParser();
             parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES, false);
-            parser.setInput(is, null);
+            parser.setInput(is, "UTF-8");
             parser.nextTag();
             // Read changelog tag
             readChangelogTag(parser, changelog);

File: app/src/main/java/androidx/documentfile/provider/VirtualDocumentFile.java
Patch:
@@ -13,6 +13,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.HashMap;
+import java.util.Locale;
 
 import io.github.muntashirakon.AppManager.utils.FileUtils;
 
@@ -170,7 +171,7 @@ protected static String getSanitizedPath(@NonNull String name) {
     protected static String getTypeForName(@NonNull String name) {
         final int lastDot = name.lastIndexOf('.');
         if (lastDot >= 0) {
-            final String extension = name.substring(lastDot + 1).toLowerCase();
+            final String extension = name.substring(lastDot + 1).toLowerCase(Locale.ROOT);
             final String mime = MimeTypeMap.getSingleton().getMimeTypeFromExtension(extension);
             if (mime != null) {
                 return mime;

File: app/src/main/java/io/github/muntashirakon/AppManager/crypto/ks/SecretKeyCompat.java
Patch:
@@ -2,6 +2,8 @@
 
 package io.github.muntashirakon.AppManager.crypto.ks;
 
+import android.annotation.SuppressLint;
+
 import androidx.annotation.NonNull;
 
 import java.lang.reflect.Field;
@@ -12,6 +14,7 @@
 
 import io.github.muntashirakon.AppManager.utils.Utils;
 
+@SuppressLint("SoonBlockedPrivateApi")
 public final class SecretKeyCompat {
     static final Field KEY;
 

File: libapkparser/src/main/java/net/dongliu/apk/parser/struct/ResourceValue.java
Patch:
@@ -42,9 +42,9 @@ public String toStringValue(@Nullable ResourceTable resourceTable, @Nullable Loc
             case TYPE_STRING:
                 return stringValue;
             case TYPE_REFERENCE:
-                return "@" + Long.toHexString(data & 0xFFFFFFFFL).toUpperCase();
+                return "@" + Long.toHexString(data & 0xFFFFFFFFL).toUpperCase(Locale.ROOT);
             case TYPE_ATTRIBUTE:
-                return "?" + Long.toHexString(data & 0xFFFFFFFFL).toUpperCase();
+                return "?" + Long.toHexString(data & 0xFFFFFFFFL).toUpperCase(Locale.ROOT);
         }
         return coerceToString(type, data);
     }
@@ -54,7 +54,7 @@ public static ResourceValue nullValue() {
     }
 
     /**
-     * ReferenceResource ref one another resources, and may has different value for different resource config(locale, density, etc)
+     * ReferenceResource ref one another resources, and may have different value for different resource config (locale, density, etc)
      */
     public static class ReferenceResourceValue extends ResourceValue {
 

File: libcore/ui/src/main/java/io/github/muntashirakon/reflow/ReflowMenuItemView.java
Patch:
@@ -777,6 +777,7 @@ private void tryRemoveBadgeFromAnchor(@Nullable View anchorView) {
         badgeDrawable = null;
     }
 
+    @SuppressLint("UnsafeOptInUsageError")
     @Nullable
     private FrameLayout getCustomParentForBadge(View anchorView) {
         if (anchorView == icon) {

File: app/src/main/java/io/github/muntashirakon/AppManager/logcat/LogViewerActivity.java
Patch:
@@ -456,8 +456,7 @@ void addToAutocompleteSuggestions(@NonNull LogLine logLine) {
     }
 
     void displayLogViewerSettings() {
-        Intent intent = new Intent(this, SettingsActivity.class);
-        intent.putExtra(SettingsActivity.EXTRA_KEY, "log_viewer_prefs");
+        Intent intent = SettingsActivity.getIntent(this, "log_viewer_prefs");
         activityLauncher.launch(intent, result -> {
             // Preferences may have changed
             mViewModel.setCollapsedMode(!AppPref.getBoolean(AppPref.PrefKey.PREF_LOG_VIEWER_EXPAND_BY_DEFAULT_BOOL));

File: app/src/main/java/io/github/muntashirakon/AppManager/self/Migrations.java
Patch:
@@ -12,6 +12,7 @@
 import io.github.muntashirakon.AppManager.AppManager;
 import io.github.muntashirakon.AppManager.logs.Log;
 import io.github.muntashirakon.AppManager.servermanager.ServerConfig;
+import io.github.muntashirakon.AppManager.settings.FeatureController;
 import io.github.muntashirakon.AppManager.utils.ContextUtils;
 import io.github.muntashirakon.AppManager.utils.FileUtils;
 
@@ -54,6 +55,8 @@ public void run() {
                     oldAppsDb.renameTo(newAppsDb);
                 }
             }
+            // Disable Internet feature by default
+            FeatureController.getInstance().modifyState(FeatureController.FEAT_INTERNET, false);
         }
     };
 

File: app/src/main/java/io/github/muntashirakon/AppManager/compat/ActivityManagerCompat.java
Patch:
@@ -16,13 +16,12 @@
 import android.os.IBinder;
 import android.os.RemoteException;
 import android.os.UserHandleHidden;
+import android.text.TextUtils;
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.annotation.VisibleForTesting;
 
-import com.android.internal.util.TextUtils;
-
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;

File: app/src/main/java/io/github/muntashirakon/AppManager/crypto/ks/KeyStoreActivity.java
Patch:
@@ -5,14 +5,13 @@
 import android.content.Intent;
 import android.os.Bundle;
 import android.text.Editable;
+import android.text.TextUtils;
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.appcompat.app.AlertDialog;
 import androidx.appcompat.app.AppCompatActivity;
 
-import com.android.internal.util.TextUtils;
-
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.logs.Log;
 import io.github.muntashirakon.AppManager.utils.Utils;

File: app/src/main/java/io/github/muntashirakon/AppManager/intercept/AddIntentExtraFragment.java
Patch:
@@ -5,6 +5,7 @@
 import android.annotation.SuppressLint;
 import android.app.Dialog;
 import android.os.Bundle;
+import android.text.TextUtils;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -20,7 +21,6 @@
 import androidx.fragment.app.DialogFragment;
 import androidx.fragment.app.FragmentActivity;
 
-import com.android.internal.util.TextUtils;
 import com.google.android.material.dialog.MaterialAlertDialogBuilder;
 import com.google.android.material.switchmaterial.SwitchMaterial;
 import com.google.android.material.textfield.TextInputEditText;

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/Ops.java
Patch:
@@ -7,6 +7,7 @@
 import android.os.Build;
 import android.os.RemoteException;
 import android.text.Editable;
+import android.text.TextUtils;
 import android.view.View;
 import android.widget.EditText;
 
@@ -23,7 +24,6 @@
 import androidx.fragment.app.FragmentActivity;
 import androidx.lifecycle.LiveData;
 
-import com.android.internal.util.TextUtils;
 import com.google.android.material.dialog.MaterialAlertDialogBuilder;
 
 import java.io.IOException;

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/FileUtils.java
Patch:
@@ -16,14 +16,13 @@
 import android.provider.OpenableColumns;
 import android.system.ErrnoException;
 import android.system.Os;
+import android.text.TextUtils;
 
 import androidx.annotation.AnyThread;
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.annotation.WorkerThread;
 
-import com.android.internal.util.TextUtils;
-
 import java.io.BufferedOutputStream;
 import java.io.File;
 import java.io.FileInputStream;

File: app/src/main/java/io/github/muntashirakon/AppManager/details/info/AppInfoFragment.java
Patch:
@@ -850,7 +850,7 @@ public SearchableMultiChoiceDialogBuilder<MagiskProcess> getMagiskProcessDialog(
         CharSequence[] processes = new CharSequence[magiskProcesses.size()];
         int i = 0;
         for (MagiskProcess mp : magiskProcesses) {
-            SpannableStringBuilder sb = new SpannableStringBuilder(UIUtils.getPrimaryText(mActivity, mp.name));
+            SpannableStringBuilder sb = new SpannableStringBuilder();
             if (mp.isIsolatedProcess()) {
                 sb.append("\n").append(UIUtils.getSecondaryText(mActivity, getString(R.string.isolated)));
                 if (mp.isRunning()) {
@@ -859,7 +859,7 @@ public SearchableMultiChoiceDialogBuilder<MagiskProcess> getMagiskProcessDialog(
             } else if (mp.isRunning()) {
                 sb.append("\n").append(UIUtils.getSecondaryText(mActivity, getString(R.string.running)));
             }
-            processes[i] = UIUtils.getSmallerText(sb);
+            processes[i] = new SpannableStringBuilder(mp.name).append(UIUtils.getSmallerText(sb));
             if (mp.isEnabled()) {
                 selectedIndexes.add(i);
             }

File: app/src/main/java/io/github/muntashirakon/AppManager/logcat/helper/SaveLogHelper.java
Patch:
@@ -85,7 +85,7 @@ public static CharSequence[] getFormattedFilenames(@NonNull Context context, @No
         CharSequence[] fileNames = new CharSequence[files.size()];
         DateFormat dateFormat = DateFormat.getDateTimeInstance();
         for (int i = 0; i < files.size(); ++i) {
-            fileNames[i] = new SpannableStringBuilder(UIUtils.getPrimaryText(context, files.get(i).getName()))
+            fileNames[i] = new SpannableStringBuilder(files.get(i).getName())
                     .append("\n").append(UIUtils.getSmallerText(UIUtils.getSecondaryText(context,
                             dateFormat.format(new Date(files.get(i).lastModified())))));
         }

File: app/src/main/java/io/github/muntashirakon/AppManager/profiles/AppsProfileActivity.java
Patch:
@@ -41,7 +41,6 @@
 import io.github.muntashirakon.dialog.TextInputDialogBuilder;
 import io.github.muntashirakon.util.UiUtils;
 
-import static io.github.muntashirakon.AppManager.utils.UIUtils.getPrimaryText;
 import static io.github.muntashirakon.AppManager.utils.UIUtils.getSmallerText;
 
 public class AppsProfileActivity extends BaseActivity implements NavigationBarView.OnItemSelectedListener,
@@ -158,7 +157,8 @@ protected void onAuthenticated(@Nullable Bundle savedInstanceState) {
             for (Pair<CharSequence, ApplicationInfo> itemPair : itemPairs) {
                 items.add(itemPair.second.packageName);
                 boolean isSystem = (itemPair.second.flags & ApplicationInfo.FLAG_SYSTEM) != 0;
-                itemNames.add(new SpannableStringBuilder(getPrimaryText(this, itemPair.first)).append("\n")
+                itemNames.add(new SpannableStringBuilder(itemPair.first)
+                        .append("\n")
                         .append(getSmallerText(getString(isSystem ? R.string.system : R.string.user))));
             }
             progressIndicator.hide();

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/InstallerPreferences.java
Patch:
@@ -26,7 +26,6 @@
 import io.github.muntashirakon.dialog.TextInputDialogBuilder;
 
 import static io.github.muntashirakon.AppManager.utils.PackageUtils.flagMatchUninstalled;
-import static io.github.muntashirakon.AppManager.utils.UIUtils.getPrimaryText;
 import static io.github.muntashirakon.AppManager.utils.UIUtils.getSecondaryText;
 import static io.github.muntashirakon.AppManager.utils.UIUtils.getSmallerText;
 
@@ -99,7 +98,7 @@ public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {
                             for (Pair<CharSequence, String> pair : appInfo) {
                                 if (isDetached()) return;
                                 items.add(pair.second);
-                                itemNames.add(new SpannableStringBuilder(getPrimaryText(activity, pair.first))
+                                itemNames.add(new SpannableStringBuilder(pair.first)
                                         .append("\n").append(getSecondaryText(activity, getSmallerText(pair.second))));
                             }
                             int selectedApp = itemNames.indexOf(installerApp);

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/dialog/BackupRestoreDialogViewModel.java
Patch:
@@ -153,8 +153,8 @@ public void processPackages(@Nullable List<UserPackagePair> userPackagePairs) {
                 } else {
                     for (App app : apps) {
                         backupInfo.setAppLabel(app.packageLabel);
-                        backupInfo.setInstalled(app.isInstalled);
-                        break;
+                        // Installation gets higher priority
+                        backupInfo.setInstalled(backupInfo.isInstalled() | app.isInstalled);
                     }
                 }
             }

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/BackupManager.java
Patch:
@@ -169,7 +169,7 @@ public void restore(@Nullable String[] backupNames) throws BackupException {
         }
     }
 
-    public boolean deleteBackup(@Nullable String[] backupNames) throws BackupException {
+    public void deleteBackup(@Nullable String[] backupNames) throws BackupException {
         if (backupNames == null) {
             // No backup names supplied, use user handle
             BackupFiles backupFiles;
@@ -202,7 +202,6 @@ public boolean deleteBackup(@Nullable String[] backupNames) throws BackupExcepti
                 }
             }
         }
-        return true;
     }
 
     public void verify(@Nullable String backupName) throws BackupException {

File: app/src/main/java/io/github/muntashirakon/AppManager/db/dao/BackupDao.java
Patch:
@@ -18,6 +18,9 @@ public interface BackupDao {
     @Query("SELECT * FROM backup")
     List<Backup> getAll();
 
+    @Query("SELECT * FROM backup WHERE package_name = :packageName")
+    List<Backup> get(String packageName);
+
     @Insert(onConflict = OnConflictStrategy.REPLACE)
     void insert(List<Backup> backups);
 

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/UIUtils.java
Patch:
@@ -201,11 +201,11 @@ public static int getPrimaryColor(@NonNull Context context) {
     }
 
     public static int getTextColorPrimary(@NonNull Context context) {
-        return MaterialColors.getColor(context, R.attr.colorOnBackground, -1);
+        return MaterialColors.getColor(context, R.attr.colorOnSurface, -1);
     }
 
     public static int getTextColorSecondary(@NonNull Context context) {
-        return MaterialColors.getColor(context, R.attr.colorOnSurface, -1);
+        return MaterialColors.getColor(context, R.attr.colorOnSurfaceVariant, -1);
     }
 
     public static int getTitleSize(@NonNull Context context) {

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/UIUtils.java
Patch:
@@ -35,7 +35,6 @@
 import androidx.annotation.UiThread;
 import androidx.appcompat.app.ActionBar;
 import androidx.appcompat.app.AlertDialog;
-import androidx.appcompat.widget.SearchView;
 import androidx.fragment.app.FragmentActivity;
 
 import com.google.android.material.color.MaterialColors;
@@ -47,6 +46,7 @@
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.misc.AdvancedSearchView;
 import io.github.muntashirakon.dialog.DialogTitleBuilder;
+import io.github.muntashirakon.widget.SearchView;
 
 public class UIUtils {
     static final Spannable.Factory sSpannableFactory = Spannable.Factory.getInstance();

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/MainPreferences.java
Patch:
@@ -160,6 +160,7 @@ public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {
         });
         // Black theme/custom theme
         SwitchPreferenceCompat fullBlackTheme = Objects.requireNonNull(findPreference("app_theme_pure_black"));
+        fullBlackTheme.setVisible(BuildConfig.DEBUG);
         fullBlackTheme.setChecked(AppPref.isPureBlackTheme());
         fullBlackTheme.setOnPreferenceChangeListener((preference, newValue) -> {
             boolean enabled = (boolean) newValue;

File: app/src/main/java/io/github/muntashirakon/AppManager/crypto/OpenPGPCrypto.java
Patch:
@@ -27,7 +27,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
-import java.security.GeneralSecurityException;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -118,7 +117,7 @@ public void decrypt(@NonNull Path[] files) throws IOException {
 
     @Override
     public void decrypt(@NonNull InputStream encryptedStream, @NonNull OutputStream unencryptedStream)
-            throws IOException, GeneralSecurityException {
+            throws IOException {
         Intent intent = new Intent(OpenPgpApi.ACTION_DECRYPT_VERIFY);
         handleStreams(intent, Cipher.DECRYPT_MODE, encryptedStream, unencryptedStream);
     }
@@ -133,7 +132,7 @@ public void encrypt(@NonNull Path[] filesList) throws IOException {
 
     @Override
     public void encrypt(@NonNull InputStream unencryptedStream, @NonNull OutputStream encryptedStream)
-            throws IOException, GeneralSecurityException {
+            throws IOException {
         Intent intent = new Intent(OpenPgpApi.ACTION_ENCRYPT);
         intent.putExtra(OpenPgpApi.EXTRA_KEY_IDS, keyIds);
         handleStreams(intent, Cipher.ENCRYPT_MODE, unencryptedStream, encryptedStream);

File: app/src/main/java/io/github/muntashirakon/AppManager/details/info/AppInfoFragment.java
Patch:
@@ -484,8 +484,7 @@ public boolean onOptionsItemSelected(@NonNull MenuItem item) {
                         for (ProfileMetaManager metaManager : selectedItems) {
                             if (metaManager.profile != null) {
                                 try {
-                                    metaManager.profile.packages = ArrayUtils.appendElement(String.class,
-                                            metaManager.profile.packages, mPackageName);
+                                    metaManager.appendPackages(Collections.singletonList(mPackageName));
                                     metaManager.writeProfile();
                                 } catch (Throwable e) {
                                     e.printStackTrace();

File: app/src/main/java/io/github/muntashirakon/AppManager/AppManager.java
Patch:
@@ -20,8 +20,8 @@
 import io.github.muntashirakon.AppManager.db.AppsDb;
 import io.github.muntashirakon.AppManager.misc.AMExceptionHandler;
 import io.github.muntashirakon.AppManager.utils.FileUtils;
-import io.github.muntashirakon.AppManager.utils.LangUtils;
 import io.github.muntashirakon.AppManager.utils.Utils;
+import io.github.muntashirakon.AppManager.utils.appearance.AppearanceUtils;
 
 public class AppManager extends Application {
     private static AppManager instance;
@@ -60,7 +60,7 @@ public void onCreate() {
         super.onCreate();
         Thread.setDefaultUncaughtExceptionHandler(new AMExceptionHandler(this));
         DynamicColors.applyToActivitiesIfAvailable(this);
-        LangUtils.init(this);
+        AppearanceUtils.init(this);
         Security.addProvider(new JavaKeyStoreProvider());
     }
 

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/MainPreferences.java
Patch:
@@ -149,6 +149,7 @@ public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {
                     .setPositiveButton(R.string.apply, (dialog, which) -> {
                         AppPref.set(AppPref.PrefKey.PREF_APP_THEME_INT, currentTheme);
                         AppCompatDelegate.setDefaultNightMode(currentTheme);
+                        activity.getSupportFragmentManager().popBackStackImmediate();
                         appTheme.setSummary(themes[THEME_CONST.indexOf(currentTheme)]);
                     })
                     .setNegativeButton(R.string.cancel, null)
@@ -157,7 +158,7 @@ public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {
         });
         // Layout orientation
         final String[] layoutOrientations = getResources().getStringArray(R.array.layout_orientations);
-        currentLayoutOrientation = AppPref.getInt(AppPref.PrefKey.PREF_LAYOUT_ORIENTATION_INT);
+        currentLayoutOrientation = AppPref.getLayoutOrientation();
         Preference layoutOrientation = Objects.requireNonNull(findPreference("layout_orientation"));
         layoutOrientation.setSummary(layoutOrientations[LAYOUT_ORIENTATION_CONST.indexOf(currentLayoutOrientation)]);
         layoutOrientation.setOnPreferenceClickListener(preference -> {

File: app/src/main/java/io/github/muntashirakon/AppManager/AppManager.java
Patch:
@@ -18,6 +18,7 @@
 import java.security.Security;
 
 import io.github.muntashirakon.AppManager.db.AppsDb;
+import io.github.muntashirakon.AppManager.misc.AMExceptionHandler;
 import io.github.muntashirakon.AppManager.utils.FileUtils;
 import io.github.muntashirakon.AppManager.utils.LangUtils;
 import io.github.muntashirakon.AppManager.utils.Utils;
@@ -57,6 +58,7 @@ public static synchronized AppsDb getAppsDb() {
     public void onCreate() {
         instance = this;
         super.onCreate();
+        Thread.setDefaultUncaughtExceptionHandler(new AMExceptionHandler(this));
         DynamicColors.applyToActivitiesIfAvailable(this);
         LangUtils.init(this);
         Security.addProvider(new JavaKeyStoreProvider());

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/explorer/AppExplorerFragment.java
Patch:
@@ -22,7 +22,6 @@
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.widget.MultiSelectionView;
 import io.github.muntashirakon.widget.SwipeRefreshLayout;
-import me.zhanghai.android.fastscroll.FastScrollerBuilder;
 
 public class AppExplorerFragment extends Fragment implements SearchView.OnQueryTextListener, SwipeRefreshLayout.OnRefreshListener {
     public static final String ARG_NAME = "name";
@@ -75,7 +74,6 @@ public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceStat
         RecyclerView recyclerView = view.findViewById(R.id.list_item);
         recyclerView.setHasFixedSize(true);
         recyclerView.setLayoutManager(new LinearLayoutManager(activity));
-        new FastScrollerBuilder(recyclerView).useMd2Style().build();
         adapter = new AppExplorerAdapter(activity);
         recyclerView.setAdapter(adapter);
         multiSelectionView = view.findViewById(R.id.selection_view);

File: app/src/main/java/io/github/muntashirakon/AppManager/details/info/AppInfoFragment.java
Patch:
@@ -133,7 +133,6 @@
 import io.github.muntashirakon.io.Path;
 import io.github.muntashirakon.io.Paths;
 import io.github.muntashirakon.widget.SwipeRefreshLayout;
-import me.zhanghai.android.fastscroll.FastScrollerBuilder;
 
 import static io.github.muntashirakon.AppManager.compat.ApplicationInfoCompat.HIDDEN_API_ENFORCEMENT_BLACK;
 import static io.github.muntashirakon.AppManager.compat.ApplicationInfoCompat.HIDDEN_API_ENFORCEMENT_DEFAULT;
@@ -238,7 +237,6 @@ public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceStat
         versionView = view.findViewById(R.id.version);
         adapter = new AppInfoRecyclerAdapter(mActivity);
         recyclerView.setAdapter(adapter);
-        new FastScrollerBuilder(view.findViewById(R.id.scrollView)).useMd2Style().build();
         // Set observer
         mainModel.get(AppDetailsFragment.APP_INFO).observe(getViewLifecycleOwner(), appDetailsItems -> {
             if (appDetailsItems != null && !appDetailsItems.isEmpty() && mainModel.isPackageExist()) {

File: app/src/main/java/io/github/muntashirakon/AppManager/fm/FmFragment.java
Patch:
@@ -28,7 +28,6 @@
 import io.github.muntashirakon.AppManager.utils.StorageUtils;
 import io.github.muntashirakon.widget.MultiSelectionView;
 import io.github.muntashirakon.widget.SwipeRefreshLayout;
-import me.zhanghai.android.fastscroll.FastScrollerBuilder;
 
 import static io.github.muntashirakon.AppManager.utils.UIUtils.getSecondaryText;
 import static io.github.muntashirakon.AppManager.utils.UIUtils.getSmallerText;
@@ -86,7 +85,6 @@ public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceStat
         RecyclerView recyclerView = view.findViewById(R.id.list_item);
         recyclerView.setHasFixedSize(true);
         recyclerView.setLayoutManager(new LinearLayoutManager(activity));
-        new FastScrollerBuilder(recyclerView).useMd2Style().build();
         adapter = new FmAdapter(activity);
         recyclerView.setAdapter(adapter);
         multiSelectionView = view.findViewById(R.id.selection_view);

File: app/src/main/java/io/github/muntashirakon/AppManager/logcat/AbsLogViewerFragment.java
Patch:
@@ -38,7 +38,6 @@
 import io.github.muntashirakon.io.Path;
 import io.github.muntashirakon.reflow.ReflowMenuViewWrapper;
 import io.github.muntashirakon.widget.MultiSelectionView;
-import me.zhanghai.android.fastscroll.FastScrollerBuilder;
 
 public abstract class AbsLogViewerFragment extends Fragment implements LogViewerViewModel.LogLinesAvailableInterface,
         ReflowMenuViewWrapper.OnItemSelectedListener, LogViewerActivity.SearchingInterface, Filter.FilterListener {
@@ -94,7 +93,6 @@ public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceStat
         if (mQueryString != null) {
             mRecyclerView.postDelayed(() -> mActivity.search(mQueryString), 1000);
         }
-        new FastScrollerBuilder(mRecyclerView).useMd2Style().build();
         mLogListAdapter = new LogViewerRecyclerAdapter();
         mLogListAdapter.setClickListener(mActivity);
         mMultiSelectionView = view.findViewById(R.id.selection_view);

File: app/src/main/java/io/github/muntashirakon/AppManager/logcat/LogViewerActivity.java
Patch:
@@ -69,6 +69,7 @@
 import io.github.muntashirakon.dialog.TextInputDropdownDialogBuilder;
 import io.github.muntashirakon.io.Path;
 import io.github.muntashirakon.io.Paths;
+import io.github.muntashirakon.util.UiUtils;
 
 import static io.github.muntashirakon.AppManager.logcat.LogViewerRecyclerAdapter.CONTEXT_MENU_COPY_ID;
 import static io.github.muntashirakon.AppManager.logcat.LogViewerRecyclerAdapter.CONTEXT_MENU_FILTER_ID;
@@ -144,6 +145,7 @@ public void onAuthenticated(Bundle savedInstanceState) {
         mProgressIndicator = findViewById(R.id.progress_linear);
         mProgressIndicator.setVisibilityAfterHide(View.GONE);
         mStopRecordingFab = findViewById(R.id.fab);
+        UiUtils.applyWindowInsetsAsMargin(mStopRecordingFab);
 
         ActionBar actionBar = getSupportActionBar();
         if (actionBar != null) {

File: app/src/main/java/io/github/muntashirakon/AppManager/main/MainActivity.java
Patch:
@@ -75,7 +75,6 @@
 import io.github.muntashirakon.util.UiUtils;
 import io.github.muntashirakon.widget.MultiSelectionView;
 import io.github.muntashirakon.widget.SwipeRefreshLayout;
-import me.zhanghai.android.fastscroll.FastScrollerBuilder;
 
 import static io.github.muntashirakon.AppManager.utils.UIUtils.getSecondaryText;
 import static io.github.muntashirakon.AppManager.utils.UIUtils.getSmallerText;
@@ -165,10 +164,8 @@ protected void onAuthenticated(Bundle savedInstanceState) {
         mAdapter = new MainRecyclerAdapter(MainActivity.this);
         mAdapter.setHasStableIds(true);
         recyclerView.setHasFixedSize(true);
-        recyclerView.setOverScrollMode(RecyclerView.OVER_SCROLL_NEVER);
         recyclerView.setLayoutManager(new LinearLayoutManager(this));
         recyclerView.setAdapter(mAdapter);
-        new FastScrollerBuilder(recyclerView).useMd2Style().build();
         multiSelectionView = findViewById(R.id.selection_view);
         multiSelectionView.setOnItemSelectedListener(this);
         multiSelectionView.setAdapter(mAdapter);

File: app/src/main/java/io/github/muntashirakon/AppManager/profiles/AppsProfileActivity.java
Patch:
@@ -39,6 +39,7 @@
 import io.github.muntashirakon.AppManager.types.SearchableMultiChoiceDialogBuilder;
 import io.github.muntashirakon.AppManager.utils.UIUtils;
 import io.github.muntashirakon.dialog.TextInputDialogBuilder;
+import io.github.muntashirakon.util.UiUtils;
 
 import static io.github.muntashirakon.AppManager.utils.UIUtils.getPrimaryText;
 import static io.github.muntashirakon.AppManager.utils.UIUtils.getSmallerText;
@@ -80,6 +81,7 @@ protected void onAuthenticated(@Nullable Bundle savedInstanceState) {
         progressIndicator = findViewById(R.id.progress_linear);
         progressIndicator.setVisibilityAfterHide(View.GONE);
         fab = findViewById(R.id.floatingActionButton);
+        UiUtils.applyWindowInsetsAsMargin(fab);
         if (getIntent() == null) {
             finish();
             return;

File: app/src/main/java/io/github/muntashirakon/AppManager/profiles/LogViewerFragment.java
Patch:
@@ -20,6 +20,7 @@
 import com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton;
 
 import io.github.muntashirakon.AppManager.R;
+import io.github.muntashirakon.util.UiUtils;
 
 public class LogViewerFragment extends Fragment {
     @Nullable
@@ -34,6 +35,7 @@ public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceStat
         AppCompatEditText tv = view.findViewById(R.id.log_content);
         tv.setKeyListener(null);
         ExtendedFloatingActionButton efab = view.findViewById(R.id.floatingActionButton);
+        UiUtils.applyWindowInsetsAsMargin(efab, false, true);
         efab.setOnClickListener(v -> {
             ProfileLogger.clearLogs(model.getProfileName());
             tv.setText("");

File: app/src/main/java/io/github/muntashirakon/AppManager/profiles/ProfilesActivity.java
Patch:
@@ -48,6 +48,7 @@
 import io.github.muntashirakon.AppManager.utils.FileUtils;
 import io.github.muntashirakon.AppManager.utils.UIUtils;
 import io.github.muntashirakon.dialog.TextInputDialogBuilder;
+import io.github.muntashirakon.util.UiUtils;
 
 public class ProfilesActivity extends BaseActivity {
     private static final String TAG = "ProfilesActivity";
@@ -115,9 +116,11 @@ protected void onAuthenticated(@Nullable Bundle savedInstanceState) {
         progressIndicator.setVisibilityAfterHide(View.GONE);
         ListView listView = findViewById(android.R.id.list);
         listView.setEmptyView(findViewById(android.R.id.empty));
+        UiUtils.applyWindowInsetsAsPaddingNoTop(listView);
         adapter = new ProfilesAdapter(this);
         listView.setAdapter(adapter);
         FloatingActionButton fab = findViewById(R.id.floatingActionButton);
+        UiUtils.applyWindowInsetsAsMargin(fab);
         fab.setOnClickListener(v -> new TextInputDialogBuilder(this, R.string.input_profile_name)
                 .setTitle(R.string.new_profile)
                 .setHelperText(R.string.input_profile_name_description)

File: app/src/main/java/io/github/muntashirakon/AppManager/runningapps/RunningAppsActivity.java
Patch:
@@ -54,7 +54,6 @@
 import io.github.muntashirakon.reflow.ReflowMenuViewWrapper;
 import io.github.muntashirakon.widget.MultiSelectionView;
 import io.github.muntashirakon.widget.SwipeRefreshLayout;
-import me.zhanghai.android.fastscroll.FastScrollerBuilder;
 
 public class RunningAppsActivity extends BaseActivity implements MultiSelectionView.OnSelectionChangeListener,
         ReflowMenuViewWrapper.OnItemSelectedListener, SearchView.OnQueryTextListener,
@@ -175,7 +174,6 @@ protected void onAuthenticated(Bundle savedInstanceState) {
             mSwapInfoChartChildren[i] = mSwapInfoChart.getChildAt(i);
         }
         mDeviceMemoryInfo = new DeviceMemoryInfo();
-        new FastScrollerBuilder(findViewById(R.id.scrollView)).useMd2Style().build();
 
         // Set observers
         mModel.observeKillProcess().observe(this, processInfo -> {

File: app/src/main/java/io/github/muntashirakon/AppManager/scanner/ClassListingFragment.java
Patch:
@@ -36,6 +36,7 @@
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.misc.AdvancedSearchView;
 import io.github.muntashirakon.AppManager.utils.UIUtils;
+import io.github.muntashirakon.util.UiUtils;
 
 import static io.github.muntashirakon.AppManager.misc.AdvancedSearchView.SEARCH_TYPE_REGEX;
 
@@ -75,7 +76,8 @@ public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceStat
 
         mTrackerClassesOnly = false;
 
-        ListView listView = view.findViewById(android.R.id.list);
+        ListView listView = view.findViewById(R.id.list_item);
+        UiUtils.applyWindowInsetsAsPaddingNoTop(listView);
         listView.setTextFilterEnabled(true);
         listView.setDividerHeight(0);
         mEmptyView = view.findViewById(android.R.id.empty);

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/ApkSigningPreferences.java
Patch:
@@ -5,7 +5,6 @@
 import android.os.Bundle;
 
 import androidx.preference.Preference;
-import androidx.preference.PreferenceFragmentCompat;
 
 import com.google.android.material.dialog.MaterialAlertDialogBuilder;
 
@@ -22,7 +21,7 @@
 import io.github.muntashirakon.AppManager.utils.AppPref;
 import io.github.muntashirakon.AppManager.utils.DigestUtils;
 
-public class ApkSigningPreferences extends PreferenceFragmentCompat {
+public class ApkSigningPreferences extends PreferenceFragment {
     public static final String TAG = "ApkSigningPreferences";
     private SettingsActivity activity;
     private Preference customSig;

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/InstallerPreferences.java
Patch:
@@ -10,7 +10,6 @@
 
 import androidx.core.util.Pair;
 import androidx.preference.Preference;
-import androidx.preference.PreferenceFragmentCompat;
 import androidx.preference.SwitchPreferenceCompat;
 
 import com.google.android.material.dialog.MaterialAlertDialogBuilder;
@@ -31,7 +30,7 @@
 import static io.github.muntashirakon.AppManager.utils.UIUtils.getSecondaryText;
 import static io.github.muntashirakon.AppManager.utils.UIUtils.getSmallerText;
 
-public class InstallerPreferences extends PreferenceFragmentCompat {
+public class InstallerPreferences extends PreferenceFragment {
     private static final int[] installLocationNames = new int[]{
             R.string.auto,  // PackageInfo.INSTALL_LOCATION_AUTO
             R.string.install_location_internal_only,  // PackageInfo.INSTALL_LOCATION_INTERNAL_ONLY

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/LogViewerPreferences.java
Patch:
@@ -9,7 +9,6 @@
 
 import androidx.fragment.app.FragmentActivity;
 import androidx.preference.Preference;
-import androidx.preference.PreferenceFragmentCompat;
 import androidx.preference.SwitchPreference;
 
 import com.google.android.material.dialog.MaterialAlertDialogBuilder;
@@ -28,7 +27,7 @@
 import io.github.muntashirakon.AppManager.utils.UIUtils;
 import io.github.muntashirakon.dialog.TextInputDialogBuilder;
 
-public class LogViewerPreferences extends PreferenceFragmentCompat {
+public class LogViewerPreferences extends PreferenceFragment {
     public static final List<Integer> LOG_LEVEL_VALUES = Arrays.asList(Log.VERBOSE, Log.DEBUG, Log.INFO, Log.WARN,
             Log.ERROR, LogLine.LOG_FATAL);
     public static final List<CharSequence> LOG_BUFFER_NAMES = Arrays.asList(LogcatHelper.BUFFER_MAIN, LogcatHelper.BUFFER_RADIO,

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/RulesPreferences.java
Patch:
@@ -7,7 +7,6 @@
 import android.widget.Toast;
 
 import androidx.preference.Preference;
-import androidx.preference.PreferenceFragmentCompat;
 import androidx.preference.SwitchPreferenceCompat;
 
 import com.google.android.material.dialog.MaterialAlertDialogBuilder;
@@ -26,7 +25,7 @@
 import io.github.muntashirakon.AppManager.utils.UIUtils;
 import io.github.muntashirakon.dialog.DialogTitleBuilder;
 
-public class RulesPreferences extends PreferenceFragmentCompat {
+public class RulesPreferences extends PreferenceFragment {
     private final String[] blockingMethods = new String[]{
             ComponentRule.COMPONENT_TO_BE_BLOCKED_IFW_DISABLE,
             ComponentRule.COMPONENT_TO_BE_BLOCKED_IFW,

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/crypto/KeyPairGeneratorDialogFragment.java
Patch:
@@ -52,7 +52,7 @@ public void setOnGenerateListener(OnGenerateListener listener) {
     @Override
     public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {
         FragmentActivity activity = requireActivity();
-        View view = getLayoutInflater().inflate(R.layout.dialog_certificate_generator, null);
+        View view = View.inflate(activity, R.layout.dialog_certificate_generator, null);
         Spinner keySizeSpinner = view.findViewById(R.id.key_size_selector_spinner);
         keySizeSpinner.setAdapter(new ArrayAdapter<>(activity, R.layout.support_simple_spinner_dropdown_item,
                 SUPPORTED_RSA_KEY_SIZES));

File: app/src/main/java/io/github/muntashirakon/AppManager/types/SearchableMultiChoiceDialogBuilder.java
Patch:
@@ -35,7 +35,6 @@
 
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.widget.CheckBox;
-import me.zhanghai.android.fastscroll.FastScrollerBuilder;
 
 public class SearchableMultiChoiceDialogBuilder<T> {
     @NonNull
@@ -75,7 +74,6 @@ public SearchableMultiChoiceDialogBuilder(@NonNull FragmentActivity activity, @N
         RecyclerView recyclerView = view.findViewById(android.R.id.list);
         recyclerView.setHasFixedSize(true);
         recyclerView.setLayoutManager(new LinearLayoutManager(activity, LinearLayoutManager.VERTICAL, false));
-        new FastScrollerBuilder(recyclerView).useMd2Style().build();
         searchBar = view.findViewById(R.id.search_bar);
         selectAll = view.findViewById(android.R.id.checkbox);
         TextInputEditText searchInput = view.findViewById(R.id.search_input);

File: libcore/ui/src/main/java/io/github/muntashirakon/dialog/ScrollableDialogBuilder.java
Patch:
@@ -2,7 +2,6 @@
 
 package io.github.muntashirakon.dialog;
 
-import android.annotation.SuppressLint;
 import android.content.DialogInterface;
 import android.text.method.LinkMovementMethod;
 import android.text.util.Linkify;
@@ -33,9 +32,8 @@ public interface OnClickListener {
         void onClick(DialogInterface dialog, int which, boolean isChecked);
     }
 
-    @SuppressLint("InflateParams")
     public ScrollableDialogBuilder(@NonNull FragmentActivity activity, @Nullable CharSequence message, boolean fullScreen) {
-        View view = activity.getLayoutInflater().inflate(R.layout.dialog_scrollable_text_view, null);
+        View view = View.inflate(activity, R.layout.dialog_scrollable_text_view, null);
         this.message = view.findViewById(android.R.id.content);
         this.message.setText(message);
         this.checkBox = view.findViewById(android.R.id.checkbox);

File: libcore/ui/src/main/java/io/github/muntashirakon/widget/FlowLayout.java
Patch:
@@ -90,7 +90,7 @@ public FlowLayout(@NonNull Context context, @Nullable AttributeSet attrs, int de
             mRowVerticalGravity = array.getInt(R.styleable.FlowLayout_rowVerticalGravity, ROW_VERTICAL_GRAVITY_AUTO);
             if (isInEditMode()) {
                 int listItemId = array.getResourceId(R.styleable.FlowLayout_listItem, 0);
-                int itemCount = array.getInt(R.styleable.FlowLayout_listItem, 10);
+                int itemCount = array.getInt(R.styleable.FlowLayout_itemCount, 10);
                 initPreview(listItemId, itemCount);
             }
         } finally {

File: app/src/main/java/io/github/muntashirakon/AppManager/AppManager.java
Patch:
@@ -12,7 +12,6 @@
 
 import com.google.android.material.color.DynamicColors;
 import com.topjohnwu.superuser.Shell;
-import com.yariksoffice.lingver.Lingver;
 
 import org.lsposed.hiddenapibypass.HiddenApiBypass;
 
@@ -21,6 +20,7 @@
 import io.github.muntashirakon.AppManager.db.AppsDb;
 import io.github.muntashirakon.AppManager.utils.FileUtils;
 import io.github.muntashirakon.AppManager.utils.LangUtils;
+import io.github.muntashirakon.AppManager.utils.Utils;
 
 public class AppManager extends Application {
     private static AppManager instance;
@@ -58,14 +58,14 @@ public void onCreate() {
         instance = this;
         super.onCreate();
         DynamicColors.applyToActivitiesIfAvailable(this);
-        Lingver.init(instance, LangUtils.getLocaleByLanguage(instance));
+        LangUtils.init(this);
         Security.addProvider(new JavaKeyStoreProvider());
     }
 
     @Override
     protected void attachBaseContext(Context base) {
         super.attachBaseContext(base);
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P && !Utils.isRoboUnitTest()) {
             HiddenApiBypass.addHiddenApiExemptions("L");
         }
     }

File: app/src/main/java/io/github/muntashirakon/AppManager/accessibility/NoRootAccessibilityService.java
Patch:
@@ -27,7 +27,7 @@ public class NoRootAccessibilityService extends BaseAccessibilityService {
     @Override
     public void onCreate() {
         super.onCreate();
-        pm = LangUtils.wrap(this).getPackageManager();
+        pm = LangUtils.wrapSystem(this).getPackageManager();
     }
 
     @Override

File: app/src/main/java/io/github/muntashirakon/AppManager/types/SearchableMultiChoiceDialogBuilder.java
Patch:
@@ -34,7 +34,6 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import io.github.muntashirakon.AppManager.R;
-import io.github.muntashirakon.AppManager.utils.LangUtils;
 import io.github.muntashirakon.widget.CheckBox;
 import me.zhanghai.android.fastscroll.FastScrollerBuilder;
 
@@ -268,7 +267,7 @@ class SearchableRecyclerViewAdapter extends RecyclerView.Adapter<SearchableRecyc
         }
 
         void setFilteredItems(CharSequence constraint) {
-            Locale locale = LangUtils.getLocaleByLanguage(activity);
+            Locale locale = Locale.getDefault();
             synchronized (filteredItems) {
                 filteredItems.clear();
                 for (int i = 0; i < items.size(); ++i) {

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/BackupManager.java
Patch:
@@ -25,6 +25,8 @@ public class BackupManager {
     static final String EXT_OBB = "/Android/obb/";
     /* language=regexp */
     static final String[] CACHE_DIRS = new String[]{"cache/.*", "code_cache/.*", "no_backup/.*"};
+    /* language=regexp */
+    static final String[] LIB_DIR = new String[]{"lib/"};
     public static final String SOURCE_PREFIX = "source";
     public static final String DATA_PREFIX = "data";
     static final String KEYSTORE_PREFIX = "keystore";

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/BackupUtils.java
Patch:
@@ -169,7 +169,8 @@ static int getUserHandleFromBackupName(@NonNull String backupFileName) {
 
     @NonNull
     static String[] getExcludeDirs(boolean includeCache, @Nullable String[] others) {
-        List<String> excludeDirs = new ArrayList<>();
+        // Lib dirs has to be ignored by default
+        List<String> excludeDirs = new ArrayList<>(Arrays.asList(BackupManager.LIB_DIR));
         if (includeCache) {
             excludeDirs.addAll(Arrays.asList(BackupManager.CACHE_DIRS));
         }

File: app/src/main/java/io/github/muntashirakon/io/Path.java
Patch:
@@ -637,7 +637,7 @@ public boolean isSymbolicLink() {
 
     /**
      * Creates a new symbolic link named by this abstract pathname to a target file if and only if the pathname is a
-     * physical file and the target does not yet exist.
+     * physical file and is not yet exist.
      *
      * @param target the target of the symbolic link.
      * @return {@code true} if target did not exist and the link was successfully created, and {@code false} otherwise.

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/installer/PackageInstallerCompat.java
Patch:
@@ -638,7 +638,7 @@ private boolean commit() {
     @SuppressWarnings("BooleanMethodIsAlwaysInverted")
     private boolean openSession() {
         try {
-            packageInstaller = PackageManagerCompat.getPackageInstaller(AppManager.getIPackageManager());
+            packageInstaller = PackageManagerCompat.getPackageInstaller();
         } catch (RemoteException e) {
             callFinish(STATUS_FAILURE_SESSION_CREATE);
             Log.e(TAG, "OpenSession: Could not get PackageInstaller.", e);
@@ -786,7 +786,7 @@ private void installCompleted(int sessionId,
 
     @SuppressWarnings("deprecation")
     public static void uninstall(String packageName, @UserIdInt int userHandle, boolean keepData) throws Exception {
-        IPackageInstaller pi = PackageManagerCompat.getPackageInstaller(AppManager.getIPackageManager());
+        IPackageInstaller pi = PackageManagerCompat.getPackageInstaller();
         LocalIntentReceiver receiver = new LocalIntentReceiver();
         IntentSender sender = receiver.getIntentSender();
         boolean isPrivileged = LocalServer.isAMServiceAlive();

File: app/src/main/java/io/github/muntashirakon/AppManager/batchops/BatchOpsManager.java
Patch:
@@ -439,7 +439,7 @@ private Result opClearData() {
     @NonNull
     private Result opAppEnabledSetting(@PackageManagerCompat.EnabledState int newState) {
         List<UserPackagePair> failedPackages = new ArrayList<>();
-        IPackageManager pm = AppManager.getIPackageManager();
+        IPackageManager pm = PackageManagerCompat.getPackageManager();
         for (UserPackagePair pair : userPackagePairs) {
             try {
                 pm.setApplicationEnabledSetting(pair.getPackageName(), newState, 0, pair.getUserHandle(), null);

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/explorer/AppExplorerAdapter.java
Patch:
@@ -103,6 +103,7 @@ protected boolean isSelected(int position) {
 
     @Override
     protected void cancelSelection() {
+        super.cancelSelection();
         // TODO: 4/7/21
     }
 

File: app/src/main/java/io/github/muntashirakon/AppManager/fm/FmAdapter.java
Patch:
@@ -106,6 +106,7 @@ protected boolean isSelected(int position) {
 
     @Override
     protected void cancelSelection() {
+        super.cancelSelection();
         // TODO: 4/7/21
     }
 

File: app/src/main/java/io/github/muntashirakon/AppManager/main/MainRecyclerAdapter.java
Patch:
@@ -107,7 +107,8 @@ void setDefaultList(List<ApplicationItem> list) {
     @GuardedBy("mAdapterList")
     @Override
     public void cancelSelection() {
-        deselectAll();
+        super.cancelSelection();
+        mActivity.mModel.cancelSelection();
     }
 
     @Override

File: app/src/main/java/io/github/muntashirakon/AppManager/runningapps/RunningAppsAdapter.java
Patch:
@@ -216,8 +216,8 @@ protected boolean isSelected(int position) {
 
     @Override
     protected void cancelSelection() {
+        super.cancelSelection();
         mModel.clearSelections();
-        notifyDataSetChanged();
     }
 
     @NonNull

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/TarUtils.java
Patch:
@@ -180,7 +180,7 @@ public static void extract(@NonNull @TarType String type, @NonNull Path[] source
                         // after the link has been created
                         // TODO: 27/3/22 It might be necessary to check the link if it points to an old APK folder content
                         file.delete();
-                        if (Objects.requireNonNull(file.getFile()).createNewSymlink(linkName)) {
+                        if (!Objects.requireNonNull(file.getFile()).createNewSymlink(linkName)) {
                             throw new IOException("Couldn't create symbolic link " + file + " pointing to " + linkName);
                         }
                         continue;  // links do not need permission fixes

File: libcore/ui/src/main/java/io/github/muntashirakon/reflow/ReflowMenuView.java
Patch:
@@ -675,7 +675,7 @@ public ColorStateList createDefaultColorStateList(int baseColorThemeAttr) {
         ColorStateList baseColor = AppCompatResources.getColorStateList(getContext(), value.resourceId);
         if (!getContext()
                 .getTheme()
-                .resolveAttribute(androidx.appcompat.R.attr.colorPrimary, value, true)) {
+                .resolveAttribute(R.attr.colorPrimary, value, true)) {
             return null;
         }
         int colorPrimary = value.data;

File: libcore/ui/src/main/java/io/github/muntashirakon/reflow/ReflowMenuViewWrapper.java
Patch:
@@ -126,7 +126,7 @@ public ReflowMenuViewWrapper(Context context, AttributeSet attrs) {
     }
 
     public ReflowMenuViewWrapper(Context context, AttributeSet attrs, @AttrRes int defStyleAttr) {
-        this(context, attrs, defStyleAttr, com.google.android.material.R.style.Widget_Design_BottomNavigationView);
+        this(context, attrs, defStyleAttr, R.style.Widget_Design_BottomNavigationView);
     }
 
     public ReflowMenuViewWrapper(

File: libcore/ui/src/main/java/io/github/muntashirakon/widget/MultiSelectionView.java
Patch:
@@ -41,8 +41,6 @@
 import io.github.muntashirakon.util.ParcelUtils;
 import io.github.muntashirakon.util.UiUtils;
 
-import static com.google.android.material.R.style.Widget_MaterialComponents_CardView;
-
 @SuppressLint("RestrictedApi")
 public class MultiSelectionView extends MaterialCardView {
     public interface OnSelectionChangeListener {
@@ -122,7 +120,7 @@ public MultiSelectionView(Context context, AttributeSet attrs, @AttrRes int defS
 
         // Custom attributes
         TintTypedArray attributes = ThemeEnforcement.obtainTintedStyledAttributes(context, attrs,
-                R.styleable.MultiSelectionView, defStyleAttr, Widget_MaterialComponents_CardView);
+                R.styleable.MultiSelectionView, defStyleAttr, R.style.Widget_MaterialComponents_CardView);
 
         // Set styles
         @Px

File: app/src/main/java/io/github/muntashirakon/AppManager/scanner/DexClasses.java
Patch:
@@ -31,7 +31,7 @@
 
 import io.github.muntashirakon.AppManager.BuildConfig;
 
-// FIXME: 8/2/22 Add support for lower SDKs by fixing Smali/Baksmali and Jadx
+// FIXME: 8/2/22 Add support for lower SDKs by fixing Smali/Baksmali
 @RequiresApi(Build.VERSION_CODES.O)
 public class DexClasses implements Closeable {
     private final HashMap<String, ClassDef> classDefArraySet = new HashMap<>();

File: app/src/main/java/io/github/muntashirakon/AppManager/scanner/ScannerFragment.java
Patch:
@@ -86,13 +86,12 @@ public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceStat
         mActivity = (ScannerActivity) requireActivity();
         // Checksum
         mViewModel.apkChecksumsLiveData().observe(getViewLifecycleOwner(), checksums -> {
-            SpannableStringBuilder sb = new SpannableStringBuilder(mViewModel.getApkUri().toString()).append("\n");
-            sb.append(getPrimaryText(mActivity, getString(R.string.checksums)));
+            SpannableStringBuilder sb = new SpannableStringBuilder();
             for (Pair<String, String> digest : checksums) {
                 sb.append("\n").append(getPrimaryText(mActivity, digest.first + ": "))
                         .append(getMonospacedText(digest.second));
             }
-            ((TextView) view.findViewById(R.id.apk_title)).setText(R.string.source_dir);
+            ((TextView) view.findViewById(R.id.apk_title)).setText(R.string.apk_checksums);
             ((TextView) view.findViewById(R.id.apk_description)).setText(sb);
         });
         // Package info: Title & subtitle

File: app/src/main/java/io/github/muntashirakon/AppManager/scanner/vt/VirusTotal.java
Patch:
@@ -110,6 +110,7 @@ public void fetchReportsOrScan(@NonNull String filename, long fileSize,
             // Wait for result: First wait for 1 minute, then for 30 seconds
             // We won't do it less than 30 seconds since the API has a limit of 4 request/minute
             SystemClock.sleep(waitDuration);
+            // TODO: 23/5/22 Wait duration should be according to the fileSize
             waitDuration = 30_000;
         }
         if (responseCode == VirusTotal.RESPONSE_FOUND) {

File: app/src/main/java/io/github/muntashirakon/AppManager/logcat/reader/AbsLogcatReader.java
Patch:
@@ -4,7 +4,7 @@
 
 
 // Copyright 2012 Nolan Lawson
-public abstract class AbsLogcatReader implements LogcatReader {
+abstract class AbsLogcatReader implements LogcatReader {
     protected boolean recordingMode;
 
     public AbsLogcatReader(boolean recordingMode) {

File: app/src/main/java/io/github/muntashirakon/AppManager/logcat/reader/MultipleLogcatReader.java
Patch:
@@ -25,8 +25,7 @@ public class MultipleLogcatReader extends AbsLogcatReader {
     private final List<ReaderThread> readerThreads = new LinkedList<>();
     private final BlockingQueue<String> queue = new ArrayBlockingQueue<>(1);
 
-    public MultipleLogcatReader(boolean recordingMode,
-                                Map<Integer, String> lastLines) throws IOException {
+    public MultipleLogcatReader(boolean recordingMode, Map<Integer, String> lastLines) throws IOException {
         super(recordingMode);
         // Read from all three buffers all at once
         for (Entry<Integer, String> entry : lastLines.entrySet()) {

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/PackageUtils.java
Patch:
@@ -489,7 +489,7 @@ public static String[] getDataDirs(@NonNull ApplicationInfo applicationInfo, boo
         }
         if (loadInternal) {
             dataDirs.add(applicationInfo.dataDir);
-            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N &&
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N && applicationInfo.deviceProtectedDataDir != null &&
                     !applicationInfo.dataDir.equals(applicationInfo.deviceProtectedDataDir)) {
                 dataDirs.add(applicationInfo.deviceProtectedDataDir);
             }

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/SecurityAndOpsViewModel.java
Patch:
@@ -16,7 +16,7 @@
 import io.github.muntashirakon.AppManager.logs.Log;
 import io.github.muntashirakon.AppManager.utils.MultithreadedExecutor;
 
-public class SecurityAndOpsViewModel extends AndroidViewModel {
+public class SecurityAndOpsViewModel extends AndroidViewModel implements Ops.AdbConnectionInterface {
     public static final String TAG = SecurityAndOpsViewModel.class.getSimpleName();
 
     private boolean mIsAuthenticating = false;
@@ -66,6 +66,7 @@ public void autoConnectAdb(int returnCodeOnFailure) {
         });
     }
 
+    @Override
     @AnyThread
     public void connectAdb(int port) {
         executor.submit(() -> {
@@ -76,6 +77,7 @@ public void connectAdb(int port) {
         });
     }
 
+    @Override
     @AnyThread
     @RequiresApi(Build.VERSION_CODES.R)
     public void pairAdb(@Nullable String pairingCode, int port) {

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/MetadataManager.java
Patch:
@@ -372,7 +372,7 @@ public Metadata setupMetadata(@NonNull PackageInfo packageInfo,
         metadata.splitConfigs = ArrayUtils.defeatNullable(metadata.splitConfigs);
         metadata.hasRules = false;
         if (requestedFlags.backupRules()) {
-            try (ComponentsBlocker cb = ComponentsBlocker.getInstance(packageInfo.packageName, userHandle)) {
+            try (ComponentsBlocker cb = ComponentsBlocker.getInstance(packageInfo.packageName, userHandle, false)) {
                 metadata.hasRules = cb.entryCount() > 0;
             }
         }

File: app/src/main/java/io/github/muntashirakon/AppManager/db/utils/AppDb.java
Patch:
@@ -77,7 +77,7 @@ public void updateBackups(@NonNull Context context) {
                     // Already has this entry, skip
                     continue;
                 }
-                try (ComponentsBlocker cb = ComponentsBlocker.getInstance(app.packageName, app.userId, true)) {
+                try (ComponentsBlocker cb = ComponentsBlocker.getInstance(app.packageName, app.userId, false)) {
                     app.rulesCount = cb.entryCount();
                 }
                 newApps.add(app);
@@ -121,7 +121,7 @@ public void updateApplications(@NonNull Context context) {
 
                     App app = App.fromPackageInfo(context, packageInfo);
                     backups.remove(packageInfo.packageName);
-                    try (ComponentsBlocker cb = ComponentsBlocker.getInstance(app.packageName, app.userId, true)) {
+                    try (ComponentsBlocker cb = ComponentsBlocker.getInstance(app.packageName, app.userId, false)) {
                         app.rulesCount = cb.entryCount();
                     }
                     newApps.add(app);
@@ -134,7 +134,7 @@ public void updateApplications(@NonNull Context context) {
 
                 if (backup == null) continue;
                 App app = App.fromBackup(backup);
-                try (ComponentsBlocker cb = ComponentsBlocker.getInstance(app.packageName, app.userId, true)) {
+                try (ComponentsBlocker cb = ComponentsBlocker.getInstance(app.packageName, app.userId, false)) {
                     app.rulesCount = cb.entryCount();
                 }
                 newApps.add(app);

File: app/src/main/java/io/github/muntashirakon/AppManager/main/MainViewModel.java
Patch:
@@ -585,7 +585,7 @@ private ApplicationItem getNewApplicationItem(String packageName) {
                                 | PackageManager.GET_RECEIVERS | PackageManager.GET_PROVIDERS
                                 | PackageManager.GET_SERVICES | flagDisabledComponents, userId);
                 App app = App.fromPackageInfo(getApplication(), packageInfo);
-                try (ComponentsBlocker cb = ComponentsBlocker.getInstance(app.packageName, app.userId, true)) {
+                try (ComponentsBlocker cb = ComponentsBlocker.getInstance(app.packageName, app.userId, false)) {
                     app.rulesCount = cb.entryCount();
                 }
                 ApplicationItem item = new ApplicationItem(packageInfo.applicationInfo);

File: app/src/main/java/io/github/muntashirakon/AppManager/compat/ProcessCompat.java
Patch:
@@ -9,15 +9,15 @@
 import java.io.File;
 import java.io.IOException;
 
-import io.github.muntashirakon.AppManager.ipc.IPCUtils;
+import io.github.muntashirakon.AppManager.ipc.LocalServices;
 import io.github.muntashirakon.AppManager.ipc.RemoteProcess;
 import io.github.muntashirakon.AppManager.servermanager.LocalServer;
 
 public final class ProcessCompat {
     public static Process exec(@Nullable String[] cmd, @Nullable String[] env, @Nullable File dir) throws IOException {
         if (LocalServer.isAMServiceAlive()) {
             try {
-                return new RemoteProcess(IPCUtils.getAmService().newProcess(cmd, env, dir == null ? null :
+                return new RemoteProcess(LocalServices.getAmService().newProcess(cmd, env, dir == null ? null :
                         dir.getAbsolutePath()));
             } catch (RemoteException e) {
                 throw new IOException(e);

File: app/src/main/java/io/github/muntashirakon/AppManager/ipc/RemoteShellImpl.java
Patch:
@@ -22,7 +22,7 @@ class RemoteShellImpl extends IRemoteShell.Stub {
     private final Shell.Job job;
 
     public RemoteShellImpl(String[] cmd) {
-        job = Shell.sh(cmd);
+        job = Shell.cmd(cmd);
     }
 
     @Override

File: app/src/main/java/io/github/muntashirakon/AppManager/oneclickops/BackupTasksDialogFragment.java
Patch:
@@ -36,7 +36,7 @@
 import io.github.muntashirakon.AppManager.utils.DigestUtils;
 import io.github.muntashirakon.AppManager.utils.PackageUtils;
 import io.github.muntashirakon.AppManager.utils.UIUtils;
-import io.github.muntashirakon.io.ProxyFile;
+import io.github.muntashirakon.io.Paths;
 
 public class BackupTasksDialogFragment extends DialogFragment {
     public static final String TAG = "BackupTasksDialogFragment";
@@ -164,7 +164,7 @@ public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {
                                 if (hash == null) {
                                     break;
                                 }
-                                String newHash = DigestUtils.getHexDigest(DigestUtils.SHA_256, new ProxyFile(dir));
+                                String newHash = DigestUtils.getHexDigest(DigestUtils.SHA_256, Paths.get(dir));
                                 if (!hash.equals(newHash)) changedDirs.add(dir);
                             }
                             // TODO: 23/4/21 Support delta backup

File: app/src/main/java/io/github/muntashirakon/AppManager/rules/RulesStorageManager.java
Patch:
@@ -37,7 +37,7 @@
 import io.github.muntashirakon.AppManager.rules.struct.UriGrantRule;
 import io.github.muntashirakon.AppManager.uri.UriManager;
 import io.github.muntashirakon.io.Path;
-import io.github.muntashirakon.io.ProxyFileReader;
+import io.github.muntashirakon.io.PathReader;
 
 public class RulesStorageManager implements Closeable {
     @NonNull
@@ -210,7 +210,7 @@ private void addUniqueEntry(@NonNull RuleEntry entry) {
     @GuardedBy("entries")
     protected void loadEntries(Path file, boolean isExternal) throws IOException, RemoteException {
         String dataRow;
-        try (BufferedReader TSVFile = new BufferedReader(new ProxyFileReader(file))) {
+        try (BufferedReader TSVFile = new BufferedReader(new PathReader(file))) {
             while ((dataRow = TSVFile.readLine()) != null) {
                 RuleEntry entry = RuleEntry.unflattenFromString(packageName, dataRow, isExternal);
                 synchronized (mEntries) {

File: app/src/main/java/io/github/muntashirakon/AppManager/runner/AdbShell.java
Patch:
@@ -13,7 +13,7 @@
 import io.github.muntashirakon.AppManager.IAMService;
 import io.github.muntashirakon.AppManager.IRemoteShell;
 import io.github.muntashirakon.AppManager.IShellResult;
-import io.github.muntashirakon.AppManager.ipc.IPCUtils;
+import io.github.muntashirakon.AppManager.ipc.LocalServices;
 import io.github.muntashirakon.AppManager.logs.Log;
 import io.github.muntashirakon.AppManager.utils.ParcelFileDescriptorUtil;
 
@@ -23,7 +23,7 @@ class AdbShell extends Runner {
     @Override
     protected synchronized Result runCommand() {
         try {
-            IAMService amService = IPCUtils.getServiceSafe();
+            IAMService amService = LocalServices.getAmService();
             IRemoteShell shell = amService.getShell(commands.toArray(new String[0]));
             for (InputStream is : inputStreams) {
                 shell.addInputStream(ParcelFileDescriptorUtil.pipeFrom(is));

File: app/src/main/java/io/github/muntashirakon/AppManager/runner/LocalShell.java
Patch:
@@ -14,7 +14,7 @@ class LocalShell extends Runner {
     @WorkerThread
     @Override
     protected synchronized Result runCommand() {
-        Shell.Job shell = Shell.sh(commands.toArray(new String[0]));
+        Shell.Job shell = Shell.cmd(commands.toArray(new String[0]));
         for (InputStream is : inputStreams) {
             shell.add(is);
         }

File: app/src/main/java/io/github/muntashirakon/AppManager/runner/RunnerUtils.java
Patch:
@@ -114,7 +114,7 @@ public static boolean isRootAvailable() {
             String pathEnv = System.getenv("PATH");
             if (pathEnv == null) return false;
             for (String pathDir : pathEnv.split(":")) {
-                if (pathDir != null && new File(pathDir, "su").exists()) {
+                if (pathDir != null && new File(pathDir, "su").canExecute()) {
                     return true;
                 }
             }

File: app/src/main/java/io/github/muntashirakon/AppManager/runningapps/ProcessParser.java
Patch:
@@ -23,7 +23,7 @@
 
 import io.github.muntashirakon.AppManager.AppManager;
 import io.github.muntashirakon.AppManager.compat.ActivityManagerCompat;
-import io.github.muntashirakon.AppManager.ipc.IPCUtils;
+import io.github.muntashirakon.AppManager.ipc.LocalServices;
 import io.github.muntashirakon.AppManager.ipc.ps.ProcessEntry;
 import io.github.muntashirakon.AppManager.ipc.ps.Ps;
 import io.github.muntashirakon.AppManager.logs.Log;
@@ -59,7 +59,7 @@ List<ProcessItem> parse() {
         try {
             List<ProcessEntry> processEntries;
             if (LocalServer.isAMServiceAlive()) {
-                processEntries = (List<ProcessEntry>) IPCUtils.getServiceSafe().getRunningProcesses().getList();
+                processEntries = (List<ProcessEntry>) LocalServices.getAmService().getRunningProcesses().getList();
             } else {
                 Ps ps = new Ps();
                 ps.loadProcesses();

File: app/src/main/java/io/github/muntashirakon/AppManager/runningapps/RunningAppsAdapter.java
Patch:
@@ -35,7 +35,7 @@
 import io.github.muntashirakon.AppManager.settings.Ops;
 import io.github.muntashirakon.AppManager.utils.LangUtils;
 import io.github.muntashirakon.AppManager.utils.UIUtils;
-import io.github.muntashirakon.io.ProxyFile;
+import io.github.muntashirakon.io.Paths;
 import io.github.muntashirakon.widget.MultiSelectionView;
 
 public class RunningAppsAdapter extends MultiSelectionView.Adapter<RunningAppsAdapter.ViewHolder> {
@@ -139,7 +139,7 @@ public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
             // Scan using VT
             MenuItem scanVtIem = menu.findItem(R.id.action_scan_vt);
             String firstCliArg = processItem.getCommandlineArgs()[0];
-            if (mModel.isVirusTotalAvailable() && (applicationInfo != null || new ProxyFile(firstCliArg).canRead())) {
+            if (mModel.isVirusTotalAvailable() && (applicationInfo != null || Paths.get(firstCliArg).canRead())) {
                 // TODO: 7/1/22 Check other arguments for files, too?
                 scanVtIem.setVisible(true).setOnMenuItemClickListener(item -> {
                     mModel.scanWithVt(processItem);

File: app/src/main/java/io/github/muntashirakon/AppManager/scanner/ScannerViewModel.java
Patch:
@@ -41,6 +41,7 @@
 import io.github.muntashirakon.AppManager.utils.FileUtils;
 import io.github.muntashirakon.AppManager.utils.MultithreadedExecutor;
 import io.github.muntashirakon.io.Path;
+import io.github.muntashirakon.io.Paths;
 import io.github.muntashirakon.io.VirtualFileSystem;
 
 public class ScannerViewModel extends AndroidViewModel implements VirusTotal.FullScanResponseInterface {
@@ -224,7 +225,7 @@ private void cacheFileIfRequired() {
     @WorkerThread
     private void generateApkChecksumsAndScanInVirusTotal() {
         waitForFile();
-        Pair<String, String>[] digests = DigestUtils.getDigests(apkFile);
+        Pair<String, String>[] digests = DigestUtils.getDigests(Paths.get(apkFile));
         apkChecksumsLiveData.postValue(digests);
         if (vt == null) return;
         String md5 = digests[0].second;

File: app/src/main/java/io/github/muntashirakon/AppManager/servermanager/LocalServer.java
Patch:
@@ -20,7 +20,7 @@
 import io.github.muntashirakon.AppManager.AppManager;
 import io.github.muntashirakon.AppManager.BuildConfig;
 import io.github.muntashirakon.AppManager.IAMService;
-import io.github.muntashirakon.AppManager.ipc.IPCUtils;
+import io.github.muntashirakon.AppManager.ipc.LocalServices;
 import io.github.muntashirakon.AppManager.logs.Log;
 import io.github.muntashirakon.AppManager.misc.NoOps;
 import io.github.muntashirakon.AppManager.server.common.Caller;
@@ -63,7 +63,8 @@ public static LocalServer getInstance() throws RemoteException, IOException {
     @NoOps(used = true)
     public static void launchAmService() throws RemoteException {
         if (amService == null || !amService.asBinder().pingBinder()) {
-            amService = IPCUtils.getAmService();
+            amService = LocalServices.bindAmService();
+            LocalServices.bindFileSystemManager();
         }
     }
 

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/Ops.java
Patch:
@@ -27,7 +27,7 @@
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.adb.AdbConnectionManager;
 import io.github.muntashirakon.AppManager.adb.AdbUtils;
-import io.github.muntashirakon.AppManager.ipc.IPCUtils;
+import io.github.muntashirakon.AppManager.ipc.LocalServices;
 import io.github.muntashirakon.AppManager.logs.Log;
 import io.github.muntashirakon.AppManager.misc.NoOps;
 import io.github.muntashirakon.AppManager.runner.RunnerUtils;
@@ -462,7 +462,7 @@ private static boolean isAMServiceUpAndRunning(@NonNull Context context, @Mode @
         if (LocalServer.isAMServiceAlive()) {
             // AM service is running
             try {
-                if (IPCUtils.getServiceSafe().getUid() == 0) {
+                if (LocalServices.getAmService().getUid() == 0) {
                     // AM service is being run as root
                     if (sIsAdb) {
                         UiThreadHandler.run(() -> UIUtils.displayLongToast(R.string.warning_working_on_root_mode));
@@ -472,7 +472,7 @@ private static boolean isAMServiceUpAndRunning(@NonNull Context context, @Mode @
                 } else {
                     if (sIsRoot) {
                         // AM is supposed to be run as root, not ADB. Abort service.
-                        IPCUtils.stopDaemon(context);
+                        LocalServices.stopServices();
                         // Throw error to revert changes
                         throw new RemoteException("App Manager was running as ADB, root was requested.");
                     } else {

File: app/src/main/java/io/github/muntashirakon/AppManager/sharedpref/SharedPrefsViewModel.java
Patch:
@@ -29,7 +29,7 @@ public class SharedPrefsViewModel extends AndroidViewModel {
     private final MutableLiveData<Boolean> mSharedPrefsDeletedLiveData = new MutableLiveData<>();
     private final MutableLiveData<Boolean> mSharedPrefsModifiedLiveData = new MutableLiveData<>();
 
-    // TODO: 8/2/22 Use AtomicProxyFile to better handle errors
+    // TODO: 8/2/22 Use AtomicExtendedFile to better handle errors
     private Path mSharedPrefsFile;
     private Map<String, Object> mSharedPrefsMap;
     private boolean modified;

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/AppPref.java
Patch:
@@ -39,6 +39,7 @@
 import io.github.muntashirakon.AppManager.runningapps.RunningAppsActivity;
 import io.github.muntashirakon.AppManager.settings.Ops;
 import io.github.muntashirakon.io.Path;
+import io.github.muntashirakon.io.Paths;
 
 public class AppPref {
     private static final String PREF_NAME = "preferences";
@@ -244,14 +245,13 @@ public static String getVtApiKey() {
 
     @NonNull
     public static Path getAppManagerDirectory() {
-        Context ctx = getInstance().context;
         Uri uri = getSelectedDirectory();
         Path path;
         if (uri.getScheme().equals(ContentResolver.SCHEME_FILE)) {
             // Append AppManager
             String newPath = uri.getPath() + File.separator + "AppManager";
-            path = new Path(ctx, new Uri.Builder().scheme(ContentResolver.SCHEME_FILE).path(newPath).build());
-        } else path = new Path(ctx, uri);
+            path = Paths.get(newPath);
+        } else path = Paths.get(uri);
         if (!path.exists()) path.mkdirs();
         return path;
     }

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/PermissionUtils.java
Patch:
@@ -62,6 +62,9 @@ public static boolean hasAccessToUsers() {
 
     public static boolean hasStoragePermission(Context context) {
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
+            if (Utils.isRoboUnitTest()) {
+                return false;
+            }
             return Environment.isExternalStorageManager();
         }
         return hasPermission(context, Manifest.permission.WRITE_EXTERNAL_STORAGE);

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/Utils.java
Patch:
@@ -68,7 +68,7 @@
 import static android.app.ActivityManager.RunningAppProcessInfo.IMPORTANCE_VISIBLE;
 
 public class Utils {
-    public static final String TERMUX_LOGIN_PATH = OsEnvironment.getDataDataDirectory() + "/com.termux/files/usr/bin/login";
+    public static final String TERMUX_LOGIN_PATH = OsEnvironment.getDataDirectoryRaw() + "/data/com.termux/files/usr/bin/login";
 
     @NonNull
     public static String camelCaseToSpaceSeparatedString(@NonNull String str) {

File: app/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java
Patch:
@@ -21,7 +21,7 @@
 import io.github.muntashirakon.AppManager.utils.DigestUtils;
 import io.github.muntashirakon.AppManager.utils.FileUtils;
 import io.github.muntashirakon.io.Path;
-import io.github.muntashirakon.io.ProxyOutputStream;
+import io.github.muntashirakon.io.Paths;
 import io.github.muntashirakon.io.SplitInputStream;
 
 import static org.junit.Assert.assertEquals;
@@ -47,7 +47,7 @@ public void TestUnTar() throws IOException {
                 // create a new path, remember check zip slip attack
                 File file = new File("/tmp", entry.getName());
                 // copy TarArchiveInputStream to newPath
-                try (OutputStream os = new ProxyOutputStream(file)) {
+                try (OutputStream os = Paths.get(file).openOutputStream()) {
                     FileUtils.copy(tis, os);
                 }
             }

File: app/src/main/java/io/github/muntashirakon/AppManager/details/LauncherIconCreator.java
Patch:
@@ -98,7 +98,7 @@ private static Bitmap getBitmapFromDrawable(@NonNull Drawable drawable) {
     @NonNull
     private static Intent getIntent(@NonNull ActivityInfo itemInfo) {
         Intent intent = new Intent();
-        intent.setClassName(itemInfo.packageName, itemInfo.targetActivity == null ? itemInfo.name : itemInfo.targetActivity);
+        intent.setClassName(itemInfo.packageName, itemInfo.name);
         intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
         intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
         return intent;
@@ -109,7 +109,7 @@ private static Intent getProxyIntent(@NonNull ActivityInfo itemInfo) {
         Intent intent = new Intent();
         intent.setClass(AppManager.getContext(), ActivityLauncherShortcutActivity.class);
         intent.putExtra(ActivityLauncherShortcutActivity.EXTRA_PKG, itemInfo.packageName);
-        intent.putExtra(ActivityLauncherShortcutActivity.EXTRA_CLS, itemInfo.targetActivity == null ? itemInfo.name : itemInfo.targetActivity);
+        intent.putExtra(ActivityLauncherShortcutActivity.EXTRA_CLS, itemInfo.name);
         intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
         intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
         return intent;

File: app/src/main/java/io/github/muntashirakon/AppManager/intercept/ActivityInterceptor.java
Patch:
@@ -1257,7 +1257,7 @@ public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
             ResolveInfo resolveInfo = matchingActivities.get(position);
             ActivityInfo info = resolveInfo.activityInfo;
             holder.title.setText(info.loadLabel(pm));
-            String activityName = info.targetActivity != null ? info.targetActivity : info.name;
+            String activityName = info.name;
             String name = info.packageName + "\n" + activityName;
             holder.subtitle.setText(name);
             holder.subtitle.setTextIsSelectable(true);

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/AppPref.java
Patch:
@@ -116,6 +116,7 @@ public enum PrefKey {
         PREF_SHOW_DISCLAIMER_BOOL,
 
         PREF_VIRUS_TOTAL_API_KEY_STR,
+        PREF_VIRUS_TOTAL_PROMPT_BEFORE_UPLOADING_BOOL,
         ;
 
         public static final String[] keys = new String[values().length];
@@ -430,6 +431,7 @@ public Object getDefaultValue(@NonNull PrefKey key) {
             case PREF_SHOW_DISCLAIMER_BOOL:
             case PREF_LOG_VIEWER_SHOW_PID_TID_TIMESTAMP_BOOL:
             case PREF_INSTALLER_DISPLAY_CHANGES_BOOL:
+            case PREF_VIRUS_TOTAL_PROMPT_BEFORE_UPLOADING_BOOL:
                 return true;
             case PREF_CONCURRENCY_THREAD_COUNT_INT:
                 return 0;

File: app/src/main/java/io/github/muntashirakon/AppManager/main/ListOptions.java
Patch:
@@ -180,10 +180,12 @@ public void afterTextChanged(Editable s) {
         for (int i = 0; i < FILTER_MAP.size(); ++i) {
             filterView.addView(getFilterChip(FILTER_MAP.keyAt(i), FILTER_MAP.valueAt(i)));
         }
+        sortGroup.getChildAt(0).requestFocus();
     }
 
     public Chip getFilterChip(@Filter int flag, @StringRes int strRes) {
         Chip chip = new Chip(filterView.getContext());
+        chip.setFocusable(true);
         chip.setCloseIconVisible(false);
         chip.setText(strRes);
         chip.setChecked(model.hasFilterFlag(flag));
@@ -196,6 +198,7 @@ public Chip getFilterChip(@Filter int flag, @StringRes int strRes) {
 
     public Chip getRadioChip(@SortOrder int sortOrder, @StringRes int strRes) {
         Chip chip = new Chip(sortGroup.getContext());
+        chip.setFocusable(true);
         chip.setCloseIconVisible(false);
         chip.setId(sortOrder);
         chip.setText(strRes);

File: app/src/main/java/io/github/muntashirakon/AppManager/details/info/AppInfoViewModel.java
Patch:
@@ -141,7 +141,7 @@ public void loadTagCloud() {
             }
             int privateFlags = ApplicationInfoCompat.getPrivateFlags(applicationInfo);
             tagCloud.isAppHidden = (privateFlags & ApplicationInfoCompat.PRIVATE_FLAG_HIDDEN) != 0;
-            tagCloud.magiskHiddenProcesses = new ArrayList<>(MagiskHide.getProcesses(packageInfo));
+            tagCloud.magiskHiddenProcesses = MagiskHide.getProcesses(packageInfo);
             boolean magiskHideEnabled = false;
             for (MagiskProcess magiskProcess : tagCloud.magiskHiddenProcesses) {
                 magiskHideEnabled |= magiskProcess.isEnabled();
@@ -152,7 +152,7 @@ public void loadTagCloud() {
                 }
             }
             tagCloud.isMagiskHideEnabled = !mainModel.getIsExternalApk() && magiskHideEnabled;
-            tagCloud.magiskDeniedProcesses = new ArrayList<>(MagiskDenyList.getProcesses(packageInfo));
+            tagCloud.magiskDeniedProcesses = MagiskDenyList.getProcesses(packageInfo);
             boolean magiskDenyListEnabled = false;
             for (MagiskProcess magiskProcess : tagCloud.magiskDeniedProcesses) {
                 magiskDenyListEnabled |= magiskProcess.isEnabled();

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/BackupDialogFragment.java
Patch:
@@ -213,7 +213,7 @@ public void handleCustomUsers() {
                     if (isDetached()) return;
                     new SearchableMultiChoiceDialogBuilder<>(activity, userHandles, userNames)
                             .setTitle(R.string.select_user)
-                            .setSelections(Collections.singletonList(UserHandleHidden.myUserId()))
+                            .addSelections(Collections.singletonList(UserHandleHidden.myUserId()))
                             .showSelectAll(false)
                             .setPositiveButton(R.string.ok, (dialog, which, selectedUsers) -> {
                                 List<UserPackagePair> newTargetPackages = new ArrayList<>();

File: app/src/main/java/io/github/muntashirakon/AppManager/details/info/AppInfoFragment.java
Patch:
@@ -587,7 +587,7 @@ private void setupTagCloud(AppInfoViewModel.TagCloud tagCloud) {
                 if (!isExternalApk && isRootEnabled) {
                     new SearchableMultiChoiceDialogBuilder<>(mActivity, tagCloud.trackerComponents, trackerComponentNames)
                             .setTitle(R.string.trackers)
-                            .setSelections(tagCloud.trackerComponents)
+                            .addSelections(tagCloud.trackerComponents)
                             .setNegativeButton(R.string.cancel, null)
                             .setPositiveButton(R.string.block, (dialog, which, selectedItems) -> {
                                 showProgressIndicator(true);

File: app/src/main/java/io/github/muntashirakon/AppManager/oneclickops/BackupTasksDialogFragment.java
Patch:
@@ -192,7 +192,7 @@ private void runMultiChoiceDialog(List<ApplicationItem> applicationItems, List<C
         if (isDetached()) return;
         activity.mProgressIndicator.hide();
         new SearchableMultiChoiceDialogBuilder<>(activity, applicationItems, applicationLabels)
-                .setSelections(applicationItems)
+                .addSelections(applicationItems)
                 .setTitle(R.string.filtered_packages)
                 .setPositiveButton(R.string.back_up, (dialog, which, selectedItems) -> {
                     if (isDetached()) return;

File: app/src/main/java/io/github/muntashirakon/AppManager/oneclickops/OneClickOpsActivity.java
Patch:
@@ -203,7 +203,7 @@ private void blockTrackers(@Nullable List<ItemCount> trackerCounts) {
                             tracker.count, tracker.count))));
         }
         new SearchableMultiChoiceDialogBuilder<>(this, trackerPackages, trackerPackagesWithTrackerCount)
-                .setSelections(trackerPackages)
+                .addSelections(trackerPackages)
                 .setTitle(R.string.found_trackers)
                 .setPositiveButton(R.string.block, (dialog, which, selectedPackages) -> {
                     mProgressIndicator.show();
@@ -246,7 +246,7 @@ private void blockComponents(@Nullable List<ItemCount> componentCounts, @NonNull
             packageNamesWithComponentCount.add(builder);
         }
         new SearchableMultiChoiceDialogBuilder<>(this, selectedPackages, packageNamesWithComponentCount)
-                .setSelections(selectedPackages)
+                .addSelections(selectedPackages)
                 .setTitle(R.string.filtered_packages)
                 .setPositiveButton(R.string.apply, (dialog1, which1, selectedItems) -> {
                     mProgressIndicator.show();
@@ -324,7 +324,7 @@ private void setAppOps(@Nullable List<AppOpCount> appOpCounts, @NonNull int[] ap
             packagesWithAppOpCount.add(builder1);
         }
         new SearchableMultiChoiceDialogBuilder<>(this, selectedPackages, packagesWithAppOpCount)
-                .setSelections(selectedPackages)
+                .addSelections(selectedPackages)
                 .setTitle(R.string.filtered_packages)
                 .setPositiveButton(R.string.apply, (dialog1, which1, selectedItems) -> {
                     mProgressIndicator.show();

File: app/src/main/java/io/github/muntashirakon/AppManager/oneclickops/RestoreTasksDialogFragment.java
Patch:
@@ -113,7 +113,7 @@ private void runMultiChoiceDialog(List<ApplicationItem> applicationItems, List<C
         if (isDetached()) return;
         activity.mProgressIndicator.hide();
         new SearchableMultiChoiceDialogBuilder<>(activity, applicationItems, applicationLabels)
-                .setSelections(applicationItems)
+                .addSelections(applicationItems)
                 .setTitle(R.string.filtered_packages)
                 .setPositiveButton(R.string.restore, (dialog, which, selectedItems) -> {
                     if (isDetached()) return;

File: app/src/main/java/io/github/muntashirakon/AppManager/profiles/AppsProfileActivity.java
Patch:
@@ -166,7 +166,7 @@ protected void onAuthenticated(@Nullable Bundle savedInstanceState) {
             }
             progressIndicator.hide();
             new SearchableMultiChoiceDialogBuilder<>(this, items, itemNames)
-                    .setSelections(model.getCurrentPackages())
+                    .addSelections(model.getCurrentPackages())
                     .setTitle(R.string.apps)
                     .setPositiveButton(R.string.ok, (d, i, selectedItems) -> model.setPackages(selectedItems))
                     .setNegativeButton(R.string.cancel, null)

File: app/src/main/java/io/github/muntashirakon/AppManager/profiles/ConfPreferences.java
Patch:
@@ -216,7 +216,7 @@ public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {
             new SearchableMultiChoiceDialogBuilder<>(activity, checkedItems, R.array.rule_types)
                     .setTitle(R.string.options)
                     .hideSearchBar(true)
-                    .setSelections(selectedRules)
+                    .addSelections(selectedRules)
                     .setPositiveButton(R.string.ok, (dialog, which, selectedItems) -> {
                         int value = 0;
                         for (int item : selectedItems) value |= item;
@@ -319,7 +319,7 @@ private void handleUsersPref(Preference pref) {
                 pref.setOnPreferenceClickListener(v -> {
                     new SearchableMultiChoiceDialogBuilder<>(activity, userHandles, userNames)
                             .setTitle(R.string.select_user)
-                            .setSelections(selectedUsers)
+                            .addSelections(selectedUsers)
                             .showSelectAll(false)
                             .setPositiveButton(R.string.ok, (dialog, which, selectedUserHandles) -> {
                                 if (selectedUserHandles.size() == 0) {

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/LogViewerPreferences.java
Patch:
@@ -161,7 +161,7 @@ public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {
         logBuffers.setOnPreferenceClickListener(preference -> {
             new SearchableMultiChoiceDialogBuilder<>(activity, LOG_BUFFERS, LOG_BUFFER_NAMES)
                     .setTitle(R.string.pref_buffer_title)
-                    .setSelections(PreferenceHelper.getBuffers())
+                    .addSelections(PreferenceHelper.getBuffers())
                     .setPositiveButton(R.string.save, (dialog, which, selectedItems) -> {
                         if (selectedItems.size() == 0) return;
                         int bufferFlags = 0;

File: app/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java
Patch:
@@ -435,8 +435,8 @@ public TarArchiveEntry(final File file, final String fileName) {
             if (!file.isDirectory()) {
                 this.size = file.length();
             }
-            this.modTime = file.lastModified() / MILLIS_PER_SECOND;
         }
+        this.modTime = file.lastModified() / MILLIS_PER_SECOND;
         this.userName = "";
         preserveAbsolutePath = false;
     }
@@ -464,8 +464,8 @@ public TarArchiveEntry(@NonNull final Path file, final String fileName) {
             if (!file.isDirectory()) {
                 this.size = file.length();
             }
-            this.modTime = file.lastModified() / MILLIS_PER_SECOND;
         }
+        this.modTime = file.lastModified() / MILLIS_PER_SECOND;
         this.userName = "";
         preserveAbsolutePath = false;
     }

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/signing/Signer.java
Patch:
@@ -3,6 +3,7 @@
 package io.github.muntashirakon.AppManager.apk.signing;
 
 import android.content.Context;
+import android.os.Build;
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
@@ -113,7 +114,8 @@ public boolean sign(File in, File out, int minSdk) {
     }
 
     public static boolean verify(@NonNull SigSchemes sigSchemes, @NonNull File apk, @Nullable File idsig) {
-        ApkVerifier.Builder builder = new ApkVerifier.Builder(apk);
+        ApkVerifier.Builder builder = new ApkVerifier.Builder(apk)
+                .setMaxCheckedPlatformVersion(Build.VERSION.SDK_INT);
         if (sigSchemes.v4SchemeEnabled()) {
             if (idsig == null) {
                 throw new RuntimeException("idsig file is mandatory for v4 signature scheme.");

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppDetailsViewModel.java
Patch:
@@ -1664,7 +1664,8 @@ private void loadSignatures() {
         }
         try {
             File idsigFile = mApkFile.getIdsigFile();
-            ApkVerifier.Builder builder = new ApkVerifier.Builder(mApkFile.getBaseEntry().getRealCachedFile());
+            ApkVerifier.Builder builder = new ApkVerifier.Builder(mApkFile.getBaseEntry().getRealCachedFile())
+                    .setMaxCheckedPlatformVersion(Build.VERSION.SDK_INT);
             if (idsigFile != null) {
                 builder.setV4SignatureFile(idsigFile);
             }

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/PackageUtils.java
Patch:
@@ -636,8 +636,9 @@ public static SignerInfo getSignerInfo(@NonNull PackageInfo packageInfo, boolean
 
     @Nullable
     private static SignerInfo getSignerInfo(@NonNull File apkFile) {
-        ApkVerifier.Builder builder = new ApkVerifier.Builder(apkFile);
-        ApkVerifier apkVerifier = builder.build();
+        ApkVerifier apkVerifier = new ApkVerifier.Builder(apkFile)
+                .setMaxCheckedPlatformVersion(Build.VERSION.SDK_INT)
+                .build();
         try {
             return new SignerInfo(apkVerifier.verify());
         } catch (CertificateEncodingException | IOException | ApkFormatException | NoSuchAlgorithmException e) {

File: app/src/main/java/io/github/muntashirakon/io/Path.java
Patch:
@@ -6,6 +6,7 @@
 import android.content.Context;
 import android.content.UriPermission;
 import android.net.Uri;
+import android.os.Build;
 import android.os.HandlerThread;
 import android.os.ParcelFileDescriptor;
 import android.os.RemoteException;
@@ -16,6 +17,7 @@
 import androidx.annotation.CheckResult;
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
+import androidx.annotation.RequiresApi;
 import androidx.core.util.Pair;
 import androidx.documentfile.provider.DexDocumentFile;
 import androidx.documentfile.provider.DocumentFile;
@@ -79,6 +81,7 @@ public Path(@NonNull Context context, int vfsId, @NonNull ZipFile zipFile, @Null
         mDocumentFile = new ZipDocumentFile(getParentFile(context, vfsId), vfsId, zipFile, path);
     }
 
+    @RequiresApi(Build.VERSION_CODES.O)
     public Path(@NonNull Context context, int vfsId, @NonNull DexClasses dexClasses, @Nullable String path) {
         mContext = context;
         mDocumentFile = new DexDocumentFile(getParentFile(context, vfsId), vfsId, dexClasses, path);

File: app/src/main/java/io/github/muntashirakon/io/VirtualFileSystem.java
Patch:
@@ -3,9 +3,11 @@
 package io.github.muntashirakon.io;
 
 import android.net.Uri;
+import android.os.Build;
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
+import androidx.annotation.RequiresApi;
 import androidx.annotation.WorkerThread;
 import androidx.collection.SparseArrayCompat;
 
@@ -211,6 +213,7 @@ public void unmount() throws IOException {
         }
     }
 
+    @RequiresApi(Build.VERSION_CODES.O)
     public static class DexFileSystem extends FileSystem {
         @Nullable
         private final File filePath;

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/BackupFiles.java
Patch:
@@ -31,7 +31,7 @@ public class BackupFiles {
     static final String NO_MEDIA = ".nomedia";
 
     @NonNull
-    public static Path getBackupDirectory() throws FileNotFoundException {
+    public static Path getBackupDirectory() {
         return AppPref.getAppManagerDirectory();
     }
 

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/convert/ConvertUtils.java
Patch:
@@ -11,7 +11,6 @@
 import com.android.apksig.apk.ApkFormatException;
 
 import java.io.File;
-import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
 import java.security.NoSuchAlgorithmException;
@@ -37,7 +36,7 @@
 
 public final class ConvertUtils {
     @NonNull
-    public static Path[] getRelevantImportFiles(@NonNull Uri uri, @ImportType int backupType) throws FileNotFoundException {
+    public static Path[] getRelevantImportFiles(@NonNull Uri uri, @ImportType int backupType) {
         return getRelevantImportFiles(backupType, new Path(AppManager.getContext(), uri));
     }
 

File: app/src/main/java/io/github/muntashirakon/AppManager/fm/FmViewModel.java
Patch:
@@ -11,7 +11,6 @@
 import androidx.lifecycle.LiveData;
 import androidx.lifecycle.MutableLiveData;
 
-import java.io.FileNotFoundException;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -44,7 +43,7 @@ public boolean hasParent() {
     }
 
     @AnyThread
-    public void loadFiles(Uri uri) throws FileNotFoundException {
+    public void loadFiles(Uri uri) {
         Path path = new Path(getApplication(), uri);
         loadFiles(path);
     }

File: app/src/main/java/io/github/muntashirakon/AppManager/logcat/helper/SaveLogHelper.java
Patch:
@@ -13,7 +13,6 @@
 import java.io.BufferedInputStream;
 import java.io.BufferedOutputStream;
 import java.io.BufferedReader;
-import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.io.OutputStream;
@@ -166,7 +165,7 @@ private static Path getSavedLogsDirectory() throws IOException {
     }
 
     @NonNull
-    private static Path getAMDirectory() throws FileNotFoundException {
+    private static Path getAMDirectory() {
         Path amDir = AppPref.getAppManagerDirectory();
         if (!amDir.exists()) {
             amDir.mkdir();

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/AppPref.java
Patch:
@@ -19,7 +19,6 @@
 import androidx.appcompat.app.AppCompatDelegate;
 
 import java.io.File;
-import java.io.FileNotFoundException;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.util.Arrays;
@@ -243,7 +242,7 @@ public static String getVtApiKey() {
     }
 
     @NonNull
-    public static Path getAppManagerDirectory() throws FileNotFoundException {
+    public static Path getAppManagerDirectory() {
         Context ctx = getInstance().context;
         Uri uri = getSelectedDirectory();
         Path path;

File: app/src/main/java/io/github/muntashirakon/AppManager/main/MainRecyclerAdapter.java
Patch:
@@ -288,7 +288,7 @@ public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
         } else holder.date.setTextColor(mColorSecondary);
         if (item.isInstalled) {
             // Set kernel user ID
-            holder.sharedId.setText(String.valueOf(item.uid));
+            holder.sharedId.setText(String.format(Locale.getDefault(), "%d", item.uid));
             // Set kernel user ID text color to orange if the package is shared
             if (item.sharedUserId != null) holder.sharedId.setTextColor(mColorOrange);
             else holder.sharedId.setTextColor(mColorSecondary);

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/MainPreferences.java
Patch:
@@ -256,7 +256,7 @@ public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {
         ((Preference) Objects.requireNonNull(findPreference("about"))).setOnPreferenceClickListener(preference -> {
             @SuppressLint("InflateParams")
             View view = getLayoutInflater().inflate(R.layout.dialog_about, null);
-            ((TextView) view.findViewById(R.id.version)).setText(String.format(Locale.ROOT,
+            ((TextView) view.findViewById(R.id.version)).setText(String.format(Locale.getDefault(),
                     "%s (%d)", BuildConfig.VERSION_NAME, BuildConfig.VERSION_CODE));
             new AlertDialogBuilder(activity, true)
                     .setTitle(R.string.about)

File: app/src/main/java/io/github/muntashirakon/AppManager/usage/AppUsageActivity.java
Patch:
@@ -499,7 +499,7 @@ public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
             if (mActivity.mViewModel.hasMultipleUsers()) {
                 holder.iconFrame.setBackgroundResource(R.drawable.circle_with_padding);
                 holder.badge.setVisibility(View.VISIBLE);
-                holder.badge.setText(String.valueOf(usageInfo.userId));
+                holder.badge.setText(String.format(Locale.getDefault(), "%d", usageInfo.userId));
             } else {
                 holder.iconFrame.setBackgroundResource(0);
                 holder.badge.setVisibility(View.GONE);

File: app/src/main/java/io/github/muntashirakon/io/Path.java
Patch:
@@ -834,7 +834,7 @@ public boolean equals(Object o) {
 
     @Override
     public int hashCode() {
-        return Objects.hash(mDocumentFile.getUri());
+        return mDocumentFile.getUri().hashCode();
     }
 
     @FunctionalInterface

File: app/src/debug/java/io/github/muntashirakon/AppManager/debug/R.java
Patch:
@@ -8,6 +8,6 @@ public static final class raw {
         public static final int custom = io.github.muntashirakon.AppManager.R.raw.custom;
         public static final int icon = io.github.muntashirakon.AppManager.R.raw.icon;
         public static final int index = io.github.muntashirakon.AppManager.R.raw.index;
-        public static final int main = io.github.muntashirakon.AppManager.R.raw.main;
+        public static final int main_page_entry_info_labeled = io.github.muntashirakon.AppManager.R.raw.main_page_entry_info_labeled;
     }
 }

File: app/src/main/java/io/github/muntashirakon/AppManager/misc/HelpActivity.java
Patch:
@@ -183,7 +183,7 @@ class WebViewClientImpl extends WebViewClientCompat {
         @Override
         public boolean shouldOverrideUrlLoading(@NonNull WebView view, @NonNull WebResourceRequest request) {
             Uri uri = request.getUrl();
-            if (uri.toString().startsWith("file://android_res")) {
+            if (uri.toString().startsWith("file:///android_res")) {
                 return false;
             }
             Intent intent = new Intent(Intent.ACTION_VIEW, uri);

File: app/src/main/java/io/github/muntashirakon/AppManager/scanner/ScannerViewModel.java
Patch:
@@ -237,7 +237,7 @@ private void loadAllClasses() {
         waitForFile();
         try {
             NativeLibraries nativeLibraries = new NativeLibraries(apkFile);
-            nativeLibsAll = nativeLibraries.getLibs();
+            nativeLibsAll = nativeLibraries.getUniqueLibs();
         } catch (Throwable e) {
             nativeLibsAll = Collections.emptyList();
         }

File: app/src/main/java/io/github/muntashirakon/AppManager/details/info/AppInfoFragment.java
Patch:
@@ -273,7 +273,8 @@ public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceStat
             executor.submit(() -> {
                 ClipData clipData = clipboard.getPrimaryClip();
                 if (clipData != null && clipData.getItemCount() > 0) {
-                    String data = clipData.getItemAt(0).getText().toString().trim().toLowerCase(Locale.ROOT);
+                    String data = clipData.getItemAt(0).coerceToText(mActivity).toString().trim()
+                            .toLowerCase(Locale.ROOT);
                     if (data.matches("[0-9a-f: \n]+")) {
                         data = data.replaceAll("[: \n]+", "");
                         Signature[] signatures = PackageUtils.getSigningInfo(mPackageInfo, isExternalApk);
@@ -1246,6 +1247,7 @@ private void setHorizontalActions() {
         if (v != null) v.requestFocus();
     }
 
+    @UiThread
     private void startActivityForSplit(Intent intent) {
         if (mainModel == null) return;
         try (ApkFile apkFile = ApkFile.getInstance(mainModel.getApkFileKey())) {

File: app/src/main/java/io/github/muntashirakon/AppManager/details/info/AppInfoViewModel.java
Patch:
@@ -31,7 +31,6 @@
 import io.github.muntashirakon.AppManager.apk.ApkFile;
 import io.github.muntashirakon.AppManager.backup.MetadataManager;
 import io.github.muntashirakon.AppManager.details.AppDetailsViewModel;
-import io.github.muntashirakon.AppManager.logs.Log;
 import io.github.muntashirakon.AppManager.magisk.MagiskDenyList;
 import io.github.muntashirakon.AppManager.magisk.MagiskHide;
 import io.github.muntashirakon.AppManager.magisk.MagiskProcess;
@@ -201,7 +200,8 @@ public void loadTagCloud() {
                 }
             }
         } catch (Throwable th) {
-            Log.e("AIVM", th);
+            // Unknown behaviour
+            throw new RuntimeException(th);
         } finally {
             this.tagCloud.postValue(tagCloud);
         }

File: app/src/main/java/io/github/muntashirakon/AppManager/oneclickops/OneClickOpsActivity.java
Patch:
@@ -174,7 +174,9 @@ protected void onResume() {
     protected void onPause() {
         super.onPause();
         unregisterReceiver(mBatchOpsBroadCastReceiver);
-        mProgressIndicator.hide();
+        if (mProgressIndicator != null) {
+            mProgressIndicator.hide();
+        }
     }
 
     private void blockTrackers(@Nullable List<ItemCount> trackerCounts) {

File: app/src/main/java/io/github/muntashirakon/AppManager/BaseActivity.java
Patch:
@@ -147,7 +147,7 @@ private void authenticate() {
             ensureSecurityAndModeOfOp();
             return;
         }
-        Intent keyStoreIntent = new Intent(this, KeyStoreManager.class)
+        Intent keyStoreIntent = new Intent(this, KeyStoreActivity.class)
                 .putExtra(KeyStoreActivity.EXTRA_KS, true);
         mKeyStoreActivity.launch(keyStoreIntent);
     }

File: app/src/main/java/io/github/muntashirakon/AppManager/main/SplashActivity.java
Patch:
@@ -127,7 +127,7 @@ private void authenticate() {
             ensureSecurityAndModeOfOp();
             return;
         }
-        Intent keyStoreIntent = new Intent(this, KeyStoreManager.class)
+        Intent keyStoreIntent = new Intent(this, KeyStoreActivity.class)
                 .putExtra(KeyStoreActivity.EXTRA_KS, true);
         mKeyStoreActivity.launch(keyStoreIntent);
     }

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/ApkFile.java
Patch:
@@ -17,6 +17,7 @@
 import android.util.SparseArray;
 import android.util.SparseIntArray;
 
+import androidx.annotation.AnyThread;
 import androidx.annotation.IntDef;
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
@@ -89,6 +90,7 @@ public final class ApkFile implements AutoCloseable {
     private static final SparseIntArray instanceCount = new SparseIntArray(3);
     private static final SparseIntArray advancedInstanceCount = new SparseIntArray(3);
 
+    @AnyThread
     @NonNull
     public static ApkFile getInstance(int sparseArrayKey) {
         ApkFile apkFile = apkFiles.get(sparseArrayKey);
@@ -106,6 +108,7 @@ public static ApkFile getInstance(int sparseArrayKey) {
     /**
      * Get a new instance in advance, thereby preventing any attempt at closing the APK file
      */
+    @AnyThread
     public static void getInAdvance(int sparseArrayKey) {
         synchronized (instanceCount) {
             instanceCount.put(sparseArrayKey, instanceCount.get(sparseArrayKey) + 1);

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/installer/PackageInstallerService.java
Patch:
@@ -22,6 +22,7 @@
 import io.github.muntashirakon.AppManager.compat.PendingIntentCompat;
 import io.github.muntashirakon.AppManager.main.MainActivity;
 import io.github.muntashirakon.AppManager.rules.compontents.ComponentUtils;
+import io.github.muntashirakon.AppManager.settings.Ops;
 import io.github.muntashirakon.AppManager.types.ForegroundService;
 import io.github.muntashirakon.AppManager.types.UserPackagePair;
 import io.github.muntashirakon.AppManager.utils.AppPref;
@@ -109,7 +110,7 @@ public void onFinishedInstall(int sessionId, String packageName, int result,
                                           @Nullable String blockingPackage, @Nullable String statusMessage) {
                 // Block trackers if requested
                 if (result == STATUS_SUCCESS
-                        && AppPref.isRootEnabled()
+                        && Ops.isRoot()
                         && AppPref.getBoolean(AppPref.PrefKey.PREF_INSTALLER_BLOCK_TRACKERS_BOOL)) {
                     ComponentUtils.blockTrackingComponents(Collections.singletonList(
                             new UserPackagePair(packageName, userHandle)));

File: app/src/main/java/io/github/muntashirakon/AppManager/appops/AppOpsService.java
Patch:
@@ -23,15 +23,15 @@
 import io.github.muntashirakon.AppManager.ipc.ProxyBinder;
 import io.github.muntashirakon.AppManager.logs.Log;
 import io.github.muntashirakon.AppManager.servermanager.PermissionCompat;
-import io.github.muntashirakon.AppManager.utils.AppPref;
+import io.github.muntashirakon.AppManager.settings.Ops;
 import io.github.muntashirakon.AppManager.utils.PermissionUtils;
 
 public class AppOpsService {
     private final IAppOpsService appOpsService;
 
     public AppOpsService() {
         Context context = AppManager.getContext();
-        if (!PermissionUtils.hasAppOpsPermission(context) && AppPref.isRootOrAdbEnabled()) {
+        if (!PermissionUtils.hasAppOpsPermission(context) && Ops.isPrivileged()) {
             try {
                 PermissionCompat.grantPermission(
                         context.getPackageName(),

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/RestoreOp.java
Patch:
@@ -45,9 +45,9 @@
 import io.github.muntashirakon.AppManager.runner.Runner;
 import io.github.muntashirakon.AppManager.servermanager.NetworkPolicyManagerCompat;
 import io.github.muntashirakon.AppManager.servermanager.PackageManagerCompat;
+import io.github.muntashirakon.AppManager.settings.Ops;
 import io.github.muntashirakon.AppManager.ssaid.SsaidSettings;
 import io.github.muntashirakon.AppManager.uri.UriManager;
-import io.github.muntashirakon.AppManager.utils.AppPref;
 import io.github.muntashirakon.AppManager.utils.DigestUtils;
 import io.github.muntashirakon.AppManager.utils.FileUtils;
 import io.github.muntashirakon.AppManager.utils.KeyStoreUtils;
@@ -272,7 +272,7 @@ private void restoreApkFiles() throws BackupException {
         }
         // Setup package staging directory
         Path packageStagingDirectory;
-        if (AppPref.isRootOrAdbEnabled()) {
+        if (Ops.isPrivileged()) {
             try {
                 synchronized (sLock) {
                     PackageUtils.ensurePackageStagingDirectoryPrivileged();

File: app/src/main/java/io/github/muntashirakon/AppManager/crypto/ks/KeyStoreManager.java
Patch:
@@ -203,6 +203,7 @@ public static boolean hasKeyStorePassword() {
         }
     }
 
+    @Deprecated // To be removed in v3.0.0
     @WorkerThread
     public static void migrateKeyStore() throws Exception {
         // Reset all alias password

File: app/src/main/java/io/github/muntashirakon/AppManager/ipc/ProxyBinder.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.github.muntashirakon.AppManager.server.common.IRootIPC;
 import io.github.muntashirakon.AppManager.servermanager.LocalServer;
-import io.github.muntashirakon.AppManager.utils.AppPref;
+import io.github.muntashirakon.AppManager.settings.Ops;
 
 // Copyright 2020 Rikka
 public class ProxyBinder implements IBinder {
@@ -44,7 +44,7 @@ public ProxyBinder(@NonNull IBinder original) {
 
     @Override
     public boolean transact(int code, @NonNull Parcel data, @Nullable Parcel reply, int flags) throws RemoteException {
-        if (AppPref.isRootOrAdbEnabled()) {
+        if (Ops.isPrivileged()) {
             if (!LocalServer.isAMServiceAlive()) {
                 throw new RemoteException("Root/ADB enabled but privileged service isn't alive.");
             }

File: app/src/main/java/io/github/muntashirakon/AppManager/ipc/RootService.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.concurrent.ExecutorService;
 
 import io.github.muntashirakon.AppManager.logs.Log;
-import io.github.muntashirakon.AppManager.utils.AppPref;
+import io.github.muntashirakon.AppManager.settings.Ops;
 import io.github.muntashirakon.AppManager.utils.UiThreadHandler;
 
 /**
@@ -84,7 +84,7 @@ public static void bind(
             @NonNull ServiceConnection conn) {
         serialExecutor.execute(() -> {
             // If no root/ADB access, don't even bother
-            if (!AppPref.isRootOrAdbEnabled())
+            if (!Ops.isPrivileged())
                 return;
 
             Log.d(TAG, "Total bound services: " + bound.size());
@@ -158,7 +158,7 @@ public static void stop(@NonNull Intent intent) {
                     return;
                 }
             }
-            if (!AppPref.isRootOrAdbEnabled())
+            if (!Ops.isPrivileged())
                 return;
             // No bound service of the same component, go through another root process to
             // make sure all daemon is killed

File: app/src/main/java/io/github/muntashirakon/AppManager/logcat/LogViewerActivity.java
Patch:
@@ -908,7 +908,7 @@ private List<Path> saveLogDetails(boolean includeDeviceInfo, boolean includeDmes
 
         if (includeDmesg) {
             Path tempDmsgFile = SaveLogHelper.saveTemporaryFile(SaveLogHelper.TEMP_DMESG_FILENAME, null,
-                    Runner.runCommand(Runner.getRootInstance(), "dmesg").getOutputAsList());
+                    Runner.runCommand("dmesg").getOutputAsList());
             files.add(tempDmsgFile);
         }
         return files;

File: app/src/main/java/io/github/muntashirakon/AppManager/main/MainViewModel.java
Patch:
@@ -46,6 +46,7 @@
 import io.github.muntashirakon.AppManager.rules.compontents.ComponentsBlocker;
 import io.github.muntashirakon.AppManager.servermanager.ActivityManagerCompat;
 import io.github.muntashirakon.AppManager.servermanager.PackageManagerCompat;
+import io.github.muntashirakon.AppManager.settings.Ops;
 import io.github.muntashirakon.AppManager.types.PackageChangeReceiver;
 import io.github.muntashirakon.AppManager.types.UserPackagePair;
 import io.github.muntashirakon.AppManager.users.Users;
@@ -413,7 +414,7 @@ private void loadRunningApps() {
     @GuardedBy("applicationItems")
     private void sortApplicationList(@ListOptions.SortOrder int sortBy, boolean reverse) {
         synchronized (applicationItems) {
-            final boolean isRootEnabled = AppPref.isRootEnabled();
+            final boolean isRootEnabled = Ops.isRoot();
             if (sortBy != ListOptions.SORT_BY_APP_LABEL) {
                 sortApplicationList(ListOptions.SORT_BY_APP_LABEL, false);
             }

File: app/src/main/java/io/github/muntashirakon/AppManager/rules/compontents/ComponentsBlocker.java
Patch:
@@ -35,6 +35,7 @@
 import io.github.muntashirakon.AppManager.rules.struct.RuleEntry;
 import io.github.muntashirakon.AppManager.runner.Runner;
 import io.github.muntashirakon.AppManager.servermanager.PackageManagerCompat;
+import io.github.muntashirakon.AppManager.settings.Ops;
 import io.github.muntashirakon.AppManager.utils.AppPref;
 import io.github.muntashirakon.AppManager.utils.FileUtils;
 import io.github.muntashirakon.AppManager.utils.PackageUtils;
@@ -139,7 +140,7 @@ public static ComponentsBlocker getInstance(@NonNull String packageName, int use
             sInstance.close();
             sInstance = new ComponentsBlocker(packageName, userHandle);
         }
-        if (!noReloadFromDisk && AppPref.isRootEnabled()) {
+        if (!noReloadFromDisk && Ops.isRoot()) {
             sInstance.retrieveDisabledComponents();
         }
         sInstance.readOnly = true;
@@ -521,7 +522,7 @@ private void validateComponents() {
      * available add them to the rules, overridden if necessary.
      */
     private void retrieveDisabledComponents() {
-        if (!AppPref.isRootEnabled()) return;
+        if (!Ops.isRoot()) return;
         Log.d(TAG, "Retrieving disabled components for package " + packageName);
         if (!mRulesFile.exists() || mRulesFile.getBaseFile().length() == 0) {
             // System doesn't have any rules.

File: app/src/main/java/io/github/muntashirakon/AppManager/rules/compontents/ExternalComponentsImporter.java
Patch:
@@ -81,8 +81,8 @@ public static List<String> applyFromExistingBlockList(@NonNull List<String> pack
                     cb.addComponent(componentName, components.get(componentName));
                 }
                 // Remove IFW blocking rules if exists
-                Runner.runCommand(Runner.getRootInstance(), String.format("rm %s/%s*.xml",
-                        ComponentsBlocker.SYSTEM_RULES_PATH, packageName));
+                String ifwRuleFile = String.format("%s/%s*.xml", ComponentsBlocker.SYSTEM_RULES_PATH, packageName);
+                Runner.runCommand(new String[]{"rm", ifwRuleFile});
                 cb.applyRules(true);
             } catch (Exception e) {
                 e.printStackTrace();

File: app/src/main/java/io/github/muntashirakon/AppManager/runner/AdbShell.java
Patch:
@@ -17,7 +17,7 @@
 import io.github.muntashirakon.AppManager.logs.Log;
 import io.github.muntashirakon.AppManager.utils.ParcelFileDescriptorUtil;
 
-class AdbShellRunner extends Runner {
+class AdbShell extends Runner {
     @WorkerThread
     @NonNull
     @Override

File: app/src/main/java/io/github/muntashirakon/AppManager/runner/LocalShell.java
Patch:
@@ -9,7 +9,7 @@
 
 import java.io.InputStream;
 
-class UserShellRunner extends Runner {
+class LocalShell extends Runner {
     @NonNull
     @WorkerThread
     @Override

File: app/src/main/java/io/github/muntashirakon/AppManager/runner/RootShell.java
Patch:
@@ -9,7 +9,7 @@
 
 import java.io.InputStream;
 
-class RootShellRunner extends Runner {
+class RootShell extends Runner {
     @WorkerThread
     @NonNull
     @Override

File: app/src/main/java/io/github/muntashirakon/AppManager/runningapps/RunningAppsActivity.java
Patch:
@@ -48,6 +48,7 @@
 import io.github.muntashirakon.AppManager.scanner.vt.VtFileReport;
 import io.github.muntashirakon.AppManager.scanner.vt.VtFileScanMeta;
 import io.github.muntashirakon.AppManager.settings.FeatureController;
+import io.github.muntashirakon.AppManager.settings.Ops;
 import io.github.muntashirakon.AppManager.utils.AppPref;
 import io.github.muntashirakon.AppManager.utils.UIUtils;
 import io.github.muntashirakon.reflow.ReflowMenuViewWrapper;
@@ -319,7 +320,7 @@ protected void onStart() {
                 }
             });
         }
-        mIsAdbMode = AppPref.isAdbEnabled();
+        mIsAdbMode = Ops.isAdb();
     }
 
     @Override

File: app/src/main/java/io/github/muntashirakon/AppManager/runningapps/RunningAppsAdapter.java
Patch:
@@ -30,7 +30,7 @@
 import io.github.muntashirakon.AppManager.logcat.LogViewerActivity;
 import io.github.muntashirakon.AppManager.logcat.struct.SearchCriteria;
 import io.github.muntashirakon.AppManager.settings.FeatureController;
-import io.github.muntashirakon.AppManager.utils.AppPref;
+import io.github.muntashirakon.AppManager.settings.Ops;
 import io.github.muntashirakon.AppManager.utils.LangUtils;
 import io.github.muntashirakon.AppManager.utils.UIUtils;
 import io.github.muntashirakon.io.ProxyFile;
@@ -51,7 +51,7 @@ public class RunningAppsAdapter extends MultiSelectionView.Adapter<RunningAppsAd
     }
 
     void setDefaultList(List<ProcessItem> processItems) {
-        mIsAdbMode = AppPref.isAdbEnabled();
+        mIsAdbMode = Ops.isAdb();
         this.mProcessItems.clear();
         this.mProcessItems.addAll(processItems);
         notifyDataSetChanged();

File: app/src/main/java/io/github/muntashirakon/AppManager/servermanager/ActivityManagerCompat.java
Patch:
@@ -34,7 +34,7 @@
 import io.github.muntashirakon.AppManager.ipc.ProxyBinder;
 import io.github.muntashirakon.AppManager.logs.Log;
 import io.github.muntashirakon.AppManager.runner.Runner;
-import io.github.muntashirakon.AppManager.utils.AppPref;
+import io.github.muntashirakon.AppManager.settings.Ops;
 import io.github.muntashirakon.AppManager.utils.PermissionUtils;
 
 public final class ActivityManagerCompat {
@@ -111,7 +111,7 @@ public static IContentProvider getContentProviderExternal(String name, int userI
     public static List<ActivityManager.RunningServiceInfo> getRunningServices(String packageName, @UserIdInt int userId) {
         List<ActivityManager.RunningServiceInfo> runningServices;
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M
-                && !AppPref.isRootOrAdbEnabled()
+                && !Ops.isPrivileged()
                 && PermissionUtils.hasDumpPermission()) {
             // Fetch running services by parsing dumpsys output if root/ADB is disabled
             // and android.permission.DUMP is granted
@@ -135,7 +135,7 @@ public static List<ActivityManager.RunningServiceInfo> getRunningServices(String
 
     public static List<ActivityManager.RunningAppProcessInfo> getRunningAppProcesses() {
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M
-                && !AppPref.isRootOrAdbEnabled()
+                && !Ops.isPrivileged()
                 && PermissionUtils.hasDumpPermission()) {
             // Fetch running app processes by parsing dumpsys output if root/ADB is disabled
             // and android.permission.DUMP is granted

File: app/src/main/java/io/github/muntashirakon/AppManager/servermanager/AssetsUtils.java
Patch:
@@ -60,8 +60,8 @@ public static void copyFile(@NonNull Context context, String fileName, File dest
     }
 
     @WorkerThread
-    static void writeScript(@NonNull LocalServer.Config config) throws IOException {
-        try (AssetFileDescriptor openFd = config.context.getAssets().openFd(ServerConfig.EXECUTABLE_FILE_NAME);
+    static void writeScript(@NonNull Context context) throws IOException {
+        try (AssetFileDescriptor openFd = context.getAssets().openFd(ServerConfig.EXECUTABLE_FILE_NAME);
              FileInputStream fdInputStream = openFd.createInputStream();
              InputStreamReader inputStreamReader = new InputStreamReader(fdInputStream);
              BufferedReader bufferedReader = new BufferedReader(inputStreamReader)) {
@@ -72,7 +72,7 @@ static void writeScript(@NonNull LocalServer.Config config) throws IOException {
             StringBuilder sb = new StringBuilder();
             sb.append(',').append(ConfigParams.PARAM_APP).append(':').append(BuildConfig.APPLICATION_ID);
 
-            if (config.allowBgRunning) {
+            if (ServerConfig.getAllowBgRunning()) {
                 sb.append(',').append(ConfigParams.PARAM_RUN_IN_BACKGROUND).append(':').append(1);
             }
             if (BuildConfig.DEBUG) {

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/ImportExportRulesDialogFragment.java
Patch:
@@ -30,7 +30,6 @@
 import io.github.muntashirakon.AppManager.rules.compontents.ExternalComponentsImporter;
 import io.github.muntashirakon.AppManager.types.SearchableMultiChoiceDialogBuilder;
 import io.github.muntashirakon.AppManager.users.Users;
-import io.github.muntashirakon.AppManager.utils.AppPref;
 import io.github.muntashirakon.AppManager.utils.DateUtils;
 import io.github.muntashirakon.AppManager.utils.PackageUtils;
 import io.github.muntashirakon.AppManager.utils.UIUtils;
@@ -156,7 +155,7 @@ public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceStat
     }
 
     private void importExistingRules(final boolean systemApps) {
-        if (!AppPref.isRootEnabled()) {
+        if (!Ops.isRoot()) {
             Toast.makeText(activity, R.string.only_works_in_root_mode, Toast.LENGTH_SHORT).show();
             return;
         }

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/InstallerPreferences.java
Patch:
@@ -147,7 +147,7 @@ public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {
                 .setChecked((boolean) AppPref.get(AppPref.PrefKey.PREF_INSTALLER_DISPLAY_CHANGES_BOOL));
         // Block trackers
         SwitchPreferenceCompat blockTrackersPref = Objects.requireNonNull(findPreference("installer_block_trackers"));
-        blockTrackersPref.setVisible(AppPref.isRootEnabled());
+        blockTrackersPref.setVisible(Ops.isRoot());
         blockTrackersPref.setChecked((boolean) AppPref.get(AppPref.PrefKey.PREF_INSTALLER_BLOCK_TRACKERS_BOOL));
         // Running installer in the background
         SwitchPreferenceCompat backgroundPref = Objects.requireNonNull(findPreference("installer_always_on_background"));

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/RulesPreferences.java
Patch:
@@ -85,7 +85,7 @@ public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {
         final SwitchPreferenceCompat gcb = Objects.requireNonNull(findPreference("global_blocking_enabled"));
         gcb.setChecked(AppPref.isGlobalBlockingEnabled());
         gcb.setOnPreferenceChangeListener((preference, isEnabled) -> {
-            if (AppPref.isRootEnabled() && (boolean) isEnabled) {
+            if (Ops.isRoot() && (boolean) isEnabled) {
                 new Thread(() -> {
                     // Apply all rules immediately if GCB is true
                     synchronized (gcb) {

File: app/src/main/java/io/github/muntashirakon/AppManager/servermanager/PermissionCompat.java
Patch:
@@ -346,9 +346,7 @@ public static int checkPermission(@NonNull String permissionName,
                                       @NonNull String packageName,
                                       @UserIdInt int userId) throws RemoteException {
         IPackageManager pm = AppManager.getIPackageManager();
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
-            return getPermissionManager().checkPermission(permissionName, packageName, userId);
-        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
             return pm.checkPermission(permissionName, packageName, userId);
         } else {
             return pm.checkPermission(permissionName, packageName);

File: hiddenapi/src/main/java/android/os/Build.java
Patch:
@@ -23,5 +23,7 @@ public static class VERSION_CODES {
         public static final int Q = 29;
 
         public static final int R = 30;
+
+        public static final int S = 31;
     }
 }

File: app/src/main/java/io/github/muntashirakon/AppManager/details/struct/AppDetailsAppOpItem.java
Patch:
@@ -44,8 +44,7 @@ public AppDetailsAppOpItem(@NonNull OpEntry opEntry, @NonNull PermissionInfo per
         super(opEntry);
         this.permissionInfo = permissionInfo;
         this.appContainsPermission = appContainsPermission;
-        permission = new Permission(permissionInfo.name, isGranted, opEntry.getOp(),
-                opEntry.getMode() == AppOpsManager.MODE_ALLOWED, permissionFlags);
+        permission = new Permission(permissionInfo.name, isGranted, opEntry.getOp(), isAllowed(), permissionFlags);
         isDangerous = PermissionInfoCompat.getProtection(permissionInfo) == PermissionInfo.PROTECTION_DANGEROUS;
         hasModifiablePermission = !permission.isSystemFixed() && appContainsPermission && (isDangerous
                 || (PermissionInfoCompat.getProtectionFlags(permissionInfo) & PermissionInfo.PROTECTION_FLAG_DEVELOPMENT) != 0);

File: app/src/main/java/io/github/muntashirakon/AppManager/details/info/AppInfoFragment.java
Patch:
@@ -1045,7 +1045,7 @@ private void setHorizontalActions() {
                         });
             } else {
                 // Display Android settings button
-                addToHorizontalLayout(R.string.view_in_settings, R.drawable.ic_baseline_power_settings_new_24)
+                addToHorizontalLayout(R.string.view_in_settings, R.drawable.ic_baseline_settings_24)
                         .setOnClickListener(v -> startActivity(IntentUtils.getAppDetailsSettings(mPackageName)));
             }
         } else if (FeatureController.isInstallerEnabled()) {

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/BackupDialogFragment.java
Patch:
@@ -42,13 +42,13 @@
 import io.github.muntashirakon.AppManager.db.entity.App;
 import io.github.muntashirakon.AppManager.logs.Log;
 import io.github.muntashirakon.AppManager.types.SearchableMultiChoiceDialogBuilder;
-import io.github.muntashirakon.AppManager.types.TextInputDialogBuilder;
 import io.github.muntashirakon.AppManager.types.UserPackagePair;
 import io.github.muntashirakon.AppManager.users.Users;
 import io.github.muntashirakon.AppManager.utils.ArrayUtils;
 import io.github.muntashirakon.AppManager.utils.PackageUtils;
 import io.github.muntashirakon.AppManager.utils.StoragePermission;
 import io.github.muntashirakon.dialog.DialogTitleBuilder;
+import io.github.muntashirakon.dialog.TextInputDialogBuilder;
 
 public class BackupDialogFragment extends DialogFragment {
     public static final String TAG = "BackupDialogFragment";

File: app/src/main/java/io/github/muntashirakon/AppManager/crypto/ks/KeyStoreActivity.java
Patch:
@@ -17,9 +17,9 @@
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.logs.Log;
 import io.github.muntashirakon.AppManager.misc.AMExceptionHandler;
-import io.github.muntashirakon.AppManager.types.TextInputDialogBuilder;
 import io.github.muntashirakon.AppManager.utils.AppPref;
 import io.github.muntashirakon.AppManager.utils.Utils;
+import io.github.muntashirakon.dialog.TextInputDialogBuilder;
 
 /**
  * @deprecated Kept for migratory purposes only, deprecated since v2.6.3. To be removed in v3.0.0.

File: app/src/main/java/io/github/muntashirakon/AppManager/intercept/ActivityInterceptor.java
Patch:
@@ -56,10 +56,10 @@
 import io.github.muntashirakon.AppManager.imagecache.ImageLoader;
 import io.github.muntashirakon.AppManager.logs.Log;
 import io.github.muntashirakon.AppManager.servermanager.ActivityManagerCompat;
-import io.github.muntashirakon.AppManager.types.TextInputDropdownDialogBuilder;
 import io.github.muntashirakon.AppManager.utils.AppPref;
 import io.github.muntashirakon.AppManager.utils.PackageUtils;
 import io.github.muntashirakon.AppManager.utils.UIUtils;
+import io.github.muntashirakon.dialog.TextInputDropdownDialogBuilder;
 
 // Copyright 2012 Intrications
 public class ActivityInterceptor extends BaseActivity {
@@ -545,7 +545,7 @@ public void afterTextChanged(Editable s) {
         findViewById(R.id.intent_categories_add_btn).setOnClickListener(v ->
                 new TextInputDropdownDialogBuilder(this, R.string.category)
                         .setTitle(R.string.category)
-                        .setDropdownItems(INTENT_CATEGORIES, true)
+                        .setDropdownItems(INTENT_CATEGORIES, -1, true)
                         .setNegativeButton(R.string.cancel, null)
                         .setPositiveButton(R.string.ok, (dialog, which, inputText, isChecked) -> {
                             if (!TextUtils.isEmpty(inputText)) {
@@ -565,7 +565,7 @@ public void afterTextChanged(Editable s) {
         findViewById(R.id.intent_flags_add_btn).setOnClickListener(v ->
                 new TextInputDropdownDialogBuilder(this, R.string.flags)
                         .setTitle(R.string.flags)
-                        .setDropdownItems(getAllFlags(), true)
+                        .setDropdownItems(getAllFlags(), -1, true)
                         .setNegativeButton(R.string.cancel, null)
                         .setPositiveButton(R.string.ok, (dialog, which, inputText, isChecked) -> {
                             if (!TextUtils.isEmpty(inputText)) {

File: app/src/main/java/io/github/muntashirakon/AppManager/intercept/HistoryEditText.java
Patch:
@@ -4,10 +4,10 @@
 
 import android.app.Activity;
 import android.content.SharedPreferences;
-import androidx.preference.PreferenceManager;
 import android.widget.ArrayAdapter;
 
 import androidx.annotation.NonNull;
+import androidx.preference.PreferenceManager;
 
 import com.google.android.material.textfield.MaterialAutoCompleteTextView;
 
@@ -16,7 +16,7 @@
 import java.util.List;
 
 import io.github.muntashirakon.AppManager.R;
-import io.github.muntashirakon.AppManager.types.NoFilterArrayAdapter;
+import io.github.muntashirakon.widget.NoFilterArrayAdapter;
 
 public class HistoryEditText {
     private static final String DELIMITER = "';'";

File: app/src/main/java/io/github/muntashirakon/AppManager/main/ListOptions.java
Patch:
@@ -28,7 +28,7 @@
 
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.profiles.ProfileManager;
-import io.github.muntashirakon.AppManager.types.AnyFilterArrayAdapter;
+import io.github.muntashirakon.widget.AnyFilterArrayAdapter;
 
 public class ListOptions extends BottomSheetDialogFragment {
     public static final String TAG = ListOptions.class.getSimpleName();

File: app/src/main/java/io/github/muntashirakon/AppManager/profiles/ProfilesActivity.java
Patch:
@@ -45,9 +45,9 @@
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.details.LauncherIconCreator;
 import io.github.muntashirakon.AppManager.logs.Log;
-import io.github.muntashirakon.AppManager.types.TextInputDialogBuilder;
 import io.github.muntashirakon.AppManager.utils.FileUtils;
 import io.github.muntashirakon.AppManager.utils.UIUtils;
+import io.github.muntashirakon.dialog.TextInputDialogBuilder;
 
 public class ProfilesActivity extends BaseActivity {
     private static final String TAG = "ProfilesActivity";

File: app/src/main/java/io/github/muntashirakon/AppManager/runningapps/RunningAppsActivity.java
Patch:
@@ -28,7 +28,6 @@
 import androidx.lifecycle.ViewModelProvider;
 import androidx.recyclerview.widget.LinearLayoutManager;
 import androidx.recyclerview.widget.RecyclerView;
-import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
 
 import com.google.android.material.dialog.MaterialAlertDialogBuilder;
 import com.google.android.material.progressindicator.LinearProgressIndicator;
@@ -53,6 +52,8 @@
 import io.github.muntashirakon.AppManager.utils.UIUtils;
 import io.github.muntashirakon.reflow.ReflowMenuViewWrapper;
 import io.github.muntashirakon.widget.MultiSelectionView;
+import io.github.muntashirakon.widget.SwipeRefreshLayout;
+import me.zhanghai.android.fastscroll.FastScrollerBuilder;
 
 public class RunningAppsActivity extends BaseActivity implements MultiSelectionView.OnSelectionChangeListener,
         ReflowMenuViewWrapper.OnItemSelectedListener, SearchView.OnQueryTextListener,
@@ -173,6 +174,7 @@ protected void onAuthenticated(Bundle savedInstanceState) {
             mSwapInfoChartChildren[i] = mSwapInfoChart.getChildAt(i);
         }
         mDeviceMemoryInfo = new DeviceMemoryInfo();
+        new FastScrollerBuilder(findViewById(R.id.scrollView)).useMd2Style().build();
 
         // Set observers
         mModel.observeKillProcess().observe(this, processInfo -> {

File: app/src/main/java/io/github/muntashirakon/AppManager/runningapps/RunningAppsAdapter.java
Patch:
@@ -18,6 +18,8 @@
 import androidx.appcompat.widget.PopupMenu;
 import androidx.core.content.ContextCompat;
 
+import com.google.android.material.button.MaterialButton;
+
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Locale;
@@ -237,7 +239,7 @@ public int getItemCount() {
 
     static class ViewHolder extends MultiSelectionView.ViewHolder {
         ImageView icon;
-        ImageView more;
+        MaterialButton more;
         TextView processName;
         TextView packageName;
         TextView processIds;

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/InstallerPreferences.java
Patch:
@@ -21,10 +21,10 @@
 import java.util.Objects;
 
 import io.github.muntashirakon.AppManager.R;
-import io.github.muntashirakon.AppManager.types.TextInputDialogBuilder;
 import io.github.muntashirakon.AppManager.utils.AppPref;
 import io.github.muntashirakon.AppManager.utils.PackageUtils;
 import io.github.muntashirakon.AppManager.utils.Utils;
+import io.github.muntashirakon.dialog.TextInputDialogBuilder;
 
 import static io.github.muntashirakon.AppManager.utils.PackageUtils.flagMatchUninstalled;
 import static io.github.muntashirakon.AppManager.utils.UIUtils.getPrimaryText;

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/LogViewerPreferences.java
Patch:
@@ -22,9 +22,9 @@
 import io.github.muntashirakon.AppManager.logcat.helper.PreferenceHelper;
 import io.github.muntashirakon.AppManager.logcat.struct.LogLine;
 import io.github.muntashirakon.AppManager.types.SearchableMultiChoiceDialogBuilder;
-import io.github.muntashirakon.AppManager.types.TextInputDialogBuilder;
 import io.github.muntashirakon.AppManager.utils.AppPref;
 import io.github.muntashirakon.AppManager.utils.UIUtils;
+import io.github.muntashirakon.dialog.TextInputDialogBuilder;
 
 public class LogViewerPreferences extends PreferenceFragmentCompat {
     public static final List<Integer> LOG_LEVEL_VALUES = Arrays.asList(Log.VERBOSE, Log.DEBUG, Log.INFO, Log.WARN,

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/crypto/KeyPairImporterDialogFragment.java
Patch:
@@ -29,10 +29,10 @@
 import io.github.muntashirakon.AppManager.crypto.ks.KeyPair;
 import io.github.muntashirakon.AppManager.crypto.ks.KeyStoreUtils;
 import io.github.muntashirakon.AppManager.logs.Log;
-import io.github.muntashirakon.AppManager.types.TextInputDropdownDialogBuilder;
 import io.github.muntashirakon.AppManager.utils.BetterActivityResult;
 import io.github.muntashirakon.AppManager.utils.UIUtils;
 import io.github.muntashirakon.AppManager.utils.Utils;
+import io.github.muntashirakon.dialog.TextInputDropdownDialogBuilder;
 
 public class KeyPairImporterDialogFragment extends DialogFragment {
     public static final String TAG = "KeyPairImporterDialogFragment";
@@ -170,7 +170,7 @@ public void onNothingSelected(AdapterView<?> parent) {
                                 }
                                 TextInputDropdownDialogBuilder builder;
                                 builder = new TextInputDropdownDialogBuilder(activity, R.string.choose_an_alias)
-                                        .setDropdownItems(aliases, true)
+                                        .setDropdownItems(aliases, -1, true)
                                         .setAuxiliaryInputLabel(R.string.alias_pass)
                                         .setTitle(R.string.choose_an_alias)
                                         .setNegativeButton(R.string.cancel, null);

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/crypto/RSACryptoSelectionDialogFragment.java
Patch:
@@ -30,9 +30,9 @@
 import io.github.muntashirakon.AppManager.crypto.ks.KeyPair;
 import io.github.muntashirakon.AppManager.crypto.ks.KeyStoreManager;
 import io.github.muntashirakon.AppManager.logs.Log;
-import io.github.muntashirakon.AppManager.types.ScrollableDialogBuilder;
 import io.github.muntashirakon.AppManager.utils.PackageUtils;
 import io.github.muntashirakon.AppManager.utils.UIUtils;
+import io.github.muntashirakon.dialog.ScrollableDialogBuilder;
 
 public class RSACryptoSelectionDialogFragment extends DialogFragment {
     public static final String TAG = "RSACryptoSelectionDialogFragment";

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/NonNullUtils.java
Patch:
@@ -9,7 +9,7 @@ public static long defeatNullable(@Nullable Long longValue) {
         return longValue == null ? 0 : longValue;
     }
 
-    public static int defeatNullable(@Nullable Integer longValue) {
-        return longValue == null ? 0 : longValue;
+    public static int defeatNullable(@Nullable Integer integerValue) {
+        return integerValue == null ? 0 : integerValue;
     }
 }

File: libcore/ui/src/main/java/io/github/muntashirakon/dialog/TextInputDialogBuilder.java
Patch:
@@ -1,6 +1,6 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 
-package io.github.muntashirakon.AppManager.types;
+package io.github.muntashirakon.dialog;
 
 import android.annotation.SuppressLint;
 import android.content.DialogInterface;
@@ -18,8 +18,9 @@
 import com.google.android.material.textfield.TextInputEditText;
 import com.google.android.material.textfield.TextInputLayout;
 
-import io.github.muntashirakon.AppManager.R;
+import io.github.muntashirakon.ui.R;
 
+@SuppressWarnings("unused")
 public class TextInputDialogBuilder {
     @NonNull
     private final FragmentActivity activity;

File: libcore/ui/src/main/java/io/github/muntashirakon/widget/MultiSelectionView.java
Patch:
@@ -15,6 +15,7 @@
 import android.view.ViewGroup;
 import android.widget.TextView;
 
+import androidx.annotation.AttrRes;
 import androidx.annotation.CallSuper;
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
@@ -81,7 +82,7 @@ public MultiSelectionView(Context context, AttributeSet attrs) {
     }
 
     @SuppressLint("ClickableViewAccessibility")
-    public MultiSelectionView(Context context, AttributeSet attrs, int defStyleAttr) {
+    public MultiSelectionView(Context context, AttributeSet attrs, @AttrRes int defStyleAttr) {
         super(context, attrs, defStyleAttr);
         // Ensure we are using the correctly themed context rather than the context that was passed in.
         context = getContext();
@@ -123,7 +124,6 @@ public MultiSelectionView(Context context, AttributeSet attrs, int defStyleAttr)
         // Set styles
         @Px
         int smallSize = getResources().getDimensionPixelSize(R.dimen.padding_small);
-        setCardElevation(UiUtils.dpToPx(context, 2));
         setPreventCornerOverlap(false);
         setRadius(smallSize);
 

File: app/src/main/java/io/github/muntashirakon/AppManager/rules/RulesImporter.java
Patch:
@@ -127,7 +127,7 @@ public void applyRules(boolean commitChanges) {
                 // Apply component blocking rules
                 cb.applyRules(true);
                 // Apply app op and permissions
-                cb.applyAppOpsAndPerms(true);
+                cb.applyAppOpsAndPerms();
                 // Store the changes or discard them
                 if (commitChanges) {
                     // Commit changes

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/PackageUtils.java
Patch:
@@ -779,11 +779,11 @@ public static boolean isSignatureDifferent(@NonNull PackageInfo newPkgInfo, @Non
             // One of them is signed, other doesn't
             return true;
         }
-        // Check if the user is downgrading
+        // Check if the user is downgrading or reinstalling
         long oldVersionCode = PackageInfoCompat.getLongVersionCode(oldPkgInfo);
         long newVersionCode = PackageInfoCompat.getLongVersionCode(newPkgInfo);
-        if (oldVersionCode > newVersionCode) {
-            // Downgrading to an older version. Match only the first signature
+        if (oldVersionCode >= newVersionCode) {
+            // Downgrading to an older version or reinstalling. Match only the first signature
             return !newChecksums[0].equals(oldChecksums.get(0));
         }
         // Updating or reinstalling. Match only one signature

File: app/src/main/java/androidx/documentfile/provider/ProxyDocumentFile.java
Patch:
@@ -46,7 +46,7 @@ public DocumentFile createFile(@NonNull String mimeType, @NonNull String display
             target.createNewFile();
             return new ProxyDocumentFile(this, target);
         } catch (IOException e) {
-            Log.w(TAG, "Failed to createFile: " + e);
+            Log.w(TAG, "Failed to create " + target, e);
             return null;
         }
     }

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/PackageUtils.java
Patch:
@@ -413,8 +413,9 @@ public static HashMap<String, RuleType> collectComponentClassNames(String packag
     }
 
     @NonNull
-    public static HashMap<String, RuleType> collectComponentClassNames(@NonNull PackageInfo packageInfo) {
+    public static HashMap<String, RuleType> collectComponentClassNames(@Nullable PackageInfo packageInfo) {
         HashMap<String, RuleType> componentClasses = new HashMap<>();
+        if (packageInfo == null) return componentClasses;
         // Add activities
         if (packageInfo.activities != null) {
             for (ActivityInfo activityInfo : packageInfo.activities) {

File: app/src/main/java/io/github/muntashirakon/AppManager/details/info/AppInfoFragment.java
Patch:
@@ -238,7 +238,7 @@ public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceStat
         // Set observer
         mainModel.get(AppDetailsFragment.APP_INFO).observe(getViewLifecycleOwner(), appDetailsItems -> {
             if (appDetailsItems != null && !appDetailsItems.isEmpty() && mainModel.isPackageExist()) {
-                AppDetailsItem appDetailsItem = appDetailsItems.get(0);
+                AppDetailsItem<?> appDetailsItem = appDetailsItems.get(0);
                 mPackageInfo = (PackageInfo) appDetailsItem.vanillaItem;
                 mPackageName = appDetailsItem.name;
                 mInstalledPackageInfo = mainModel.getInstalledPackageInfo();

File: app/src/main/java/io/github/muntashirakon/AppManager/details/struct/AppDetailsComponentItem.java
Patch:
@@ -11,7 +11,7 @@
 /**
  * Stores individual app details component item
  */
-public class AppDetailsComponentItem extends AppDetailsItem {
+public class AppDetailsComponentItem extends AppDetailsItem<ComponentInfo> {
     private boolean isTracker = false;
     private ComponentRule rule;
 

File: app/src/test/java/io/github/muntashirakon/AppManager/runningapps/ProcessParserTest.java
Patch:
@@ -20,7 +20,7 @@ public class ProcessParserTest {
     public void parse() {
         assert classLoader != null;
         File procDir = new File(classLoader.getResource("proc").getFile());
-        ProcessParser pp = new ProcessParser(true);
+        ProcessParser pp = new ProcessParser();
         HashMap<Integer, String> processStrings = new HashMap<Integer, String>(5) {
             {
                 put(1129, "ProcessItem{pid=1129, ppid=1, rss=380, user='1000', uid=1000, state='S', state_extra=''," +

File: app/src/main/java/io/github/muntashirakon/AppManager/imagecache/ImageLoader.java
Patch:
@@ -87,14 +87,14 @@ public ImageLoaderQueueItem(@NonNull String name, @Nullable PackageItemInfo info
         }
     }
 
-    @WorkerThread
     private class LoadQueueItem implements Runnable {
         private final ImageLoaderQueueItem mQueueItem;
 
         LoadQueueItem(ImageLoaderQueueItem queueItem) {
             this.mQueueItem = queueItem;
         }
 
+        @WorkerThread
         public void run() {
             if (imageViewReusedOrClosed(mQueueItem)) return;
             Bitmap image = mFileCache.getImage(mQueueItem.name);

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/PackageUtils.java
Patch:
@@ -678,7 +678,9 @@ public static CharSequence[] getAppOpNames(@NonNull List<Integer> appOps) {
      * @see <a href="https://support.google.com/googleplay/android-developer/answer/9842756#zippy=%2Capp-signing-process">Use Play App Signing</a>
      */
     public static boolean usesPlayAppSigning(@NonNull ApplicationInfo applicationInfo) {
-        return "STAMP_TYPE_DISTRIBUTION_APK".equals(applicationInfo.metaData.getString("com.android.stamp.type"))
+        return applicationInfo.metaData != null
+                && "STAMP_TYPE_DISTRIBUTION_APK".equals(applicationInfo.metaData
+                .getString("com.android.stamp.type"))
                 && "https://play.google.com/store".equals(applicationInfo.metaData
                 .getString("com.android.stamp.source"));
     }

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/installer/PackageInstallerBroadcastReceiver.java
Patch:
@@ -43,8 +43,8 @@ public void setAppLabel(CharSequence appLabel) {
 
     @Override
     public void onReceive(Context context, @NonNull Intent intent) {
-        int status = intent.getIntExtra(PackageInstaller.EXTRA_STATUS, 0);
-        int sessionId = intent.getIntExtra(PackageInstaller.EXTRA_SESSION_ID, 0);
+        int status = intent.getIntExtra(PackageInstaller.EXTRA_STATUS, -1);
+        int sessionId = intent.getIntExtra(PackageInstaller.EXTRA_SESSION_ID, -1);
         Log.d(TAG, "Session ID: " + sessionId);
         switch (status) {
             case PackageInstaller.STATUS_PENDING_USER_ACTION:

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/installer/PackageInstallerCompat.java
Patch:
@@ -601,7 +601,7 @@ private boolean commit() {
             Intent callbackIntent = new Intent(PackageInstallerBroadcastReceiver.ACTION_PI_RECEIVER);
             @SuppressLint("WrongConstant")
             PendingIntent pendingIntent = PendingIntent.getBroadcast(context, 0, callbackIntent,
-                    PendingIntentCompat.FLAG_IMMUTABLE);
+                    PendingIntentCompat.FLAG_MUTABLE);
             sender = pendingIntent.getIntentSender();
         }
         Log.d(TAG, "Commit: Committing...");

File: libserver/src/main/java/io/github/muntashirakon/AppManager/server/common/ServerActions.java
Patch:
@@ -3,8 +3,10 @@
 package io.github.muntashirakon.AppManager.server.common;
 
 // Copyright 2017 Zheng Li
-public final class Actions {
+public final class ServerActions {
+    // This hard coded value won't cause any issue because it's only used internally.
     public static final String PACKAGE_NAME = "io.github.muntashirakon.AppManager";
+
     public static final String ACTION_SERVER_STARTED = PACKAGE_NAME + ".action.SERVER_STARTED";
     public static final String ACTION_SERVER_CONNECTED = PACKAGE_NAME + ".action.SERVER_CONNECTED";
     public static final String ACTION_SERVER_DISCONNECTED = PACKAGE_NAME + ".action.SERVER_DISCONNECTED";

File: app/src/main/java/io/github/muntashirakon/AppManager/main/MainActivity.java
Patch:
@@ -139,6 +139,7 @@ protected void onAuthenticated(Bundle savedInstanceState) {
             actionBar.setDisplayShowCustomEnabled(true);
             actionBar.setDisplayOptions(0, ActionBar.DISPLAY_SHOW_TITLE);
             AdvancedSearchView searchView = new AdvancedSearchView(actionBar.getThemedContext());
+            searchView.setId(R.id.action_search);
             searchView.setOnQueryTextListener(this);
             // Set layout params
             ActionBar.LayoutParams layoutParams = new ActionBar.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/UIUtils.java
Patch:
@@ -255,6 +255,7 @@ public static AlertDialog getProgressDialog(@NonNull FragmentActivity activity,
     public static SearchView setupSearchView(@NonNull ActionBar actionBar,
                                              @Nullable SearchView.OnQueryTextListener queryTextListener) {
         SearchView searchView = new SearchView(actionBar.getThemedContext());
+        searchView.setId(R.id.action_search);
         searchView.setOnQueryTextListener(queryTextListener);
         // Set layout params
         ActionBar.LayoutParams layoutParams = new ActionBar.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,
@@ -268,6 +269,7 @@ public static SearchView setupSearchView(@NonNull ActionBar actionBar,
     public static AdvancedSearchView setupAdvancedSearchView(@NonNull ActionBar actionBar,
                                                              @Nullable AdvancedSearchView.OnQueryTextListener queryTextListener) {
         AdvancedSearchView searchView = new AdvancedSearchView(actionBar.getThemedContext());
+        searchView.setId(R.id.action_search);
         searchView.setOnQueryTextListener(queryTextListener);
         // Set layout params
         ActionBar.LayoutParams layoutParams = new ActionBar.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/BackupOp.java
Patch:
@@ -71,7 +71,7 @@
 
 @WorkerThread
 class BackupOp implements Closeable {
-    static final String TAG = "BackupOp";
+    static final String TAG = BackupOp.class.getSimpleName();
 
     @NonNull
     private final Context context = AppManager.getContext();

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/RestoreOp.java
Patch:
@@ -66,7 +66,7 @@
 
 @WorkerThread
 class RestoreOp implements Closeable {
-    static final String TAG = "RestoreOp";
+    static final String TAG = RestoreOp.class.getSimpleName();
 
     @NonNull
     private final Context context = AppManager.getContext();

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/VerifyOp.java
Patch:
@@ -23,7 +23,7 @@
 
 @WorkerThread
 class VerifyOp implements Closeable {
-    static final String TAG = "RestoreOp";
+    static final String TAG = VerifyOp.class.getSimpleName();
 
     @NonNull
     private final BackupFlags backupFlags;

File: libcore/ui/src/main/java/io/github/muntashirakon/reflow/ReflowMenuItemView.java
Patch:
@@ -738,15 +738,15 @@ private boolean hasBadge() {
         return badgeDrawable != null;
     }
 
-    @SuppressLint("UnsafeExperimentalUsageError")
+    @SuppressLint("UnsafeOptInUsageError")
     private void tryUpdateBadgeBounds(View anchorView) {
         if (!hasBadge()) {
             return;
         }
         BadgeUtils.setBadgeDrawableBounds(badgeDrawable, anchorView, getCustomParentForBadge(anchorView));
     }
 
-    @SuppressLint("UnsafeExperimentalUsageError")
+    @SuppressLint("UnsafeOptInUsageError")
     private void tryAttachBadgeToAnchor(@Nullable View anchorView) {
         if (!hasBadge()) {
             return;
@@ -760,7 +760,7 @@ private void tryAttachBadgeToAnchor(@Nullable View anchorView) {
         }
     }
 
-    @SuppressLint("UnsafeExperimentalUsageError")
+    @SuppressLint("UnsafeOptInUsageError")
     private void tryRemoveBadgeFromAnchor(@Nullable View anchorView) {
         if (!hasBadge()) {
             return;

File: libcore/ui/src/main/java/io/github/muntashirakon/reflow/ReflowMenuPresenter.java
Patch:
@@ -92,7 +92,7 @@ public int getId() {
         return id;
     }
 
-    @SuppressLint("UnsafeExperimentalUsageError")
+    @SuppressLint("UnsafeOptInUsageError")
     @NonNull
     @Override
     public Parcelable onSaveInstanceState() {
@@ -103,7 +103,7 @@ public Parcelable onSaveInstanceState() {
         return savedState;
     }
 
-    @SuppressLint("UnsafeExperimentalUsageError")
+    @SuppressLint("UnsafeOptInUsageError")
     @Override
     public void onRestoreInstanceState(@NonNull Parcelable state) {
         if (state instanceof SavedState) {

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/installer/PackageInstallerActivity.java
Patch:
@@ -232,6 +232,7 @@ protected void onDestroy() {
         if (service != null) {
             unbindService(serviceConnection);
         }
+        unsetInstallFinishedListener();
         super.onDestroy();
     }
 

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/installer/PackageInstallerBroadcastReceiver.java
Patch:
@@ -91,12 +91,13 @@ public void onReceive(Context context, @NonNull Intent intent) {
                 break;
             default:
                 Intent broadcastError = new Intent(PackageInstallerCompat.ACTION_INSTALL_COMPLETED);
+                broadcastError.putExtra(PackageInstaller.EXTRA_STATUS_MESSAGE, intent.getStringExtra(PackageInstaller.EXTRA_STATUS_MESSAGE));
                 broadcastError.putExtra(PackageInstaller.EXTRA_PACKAGE_NAME, packageName);
                 broadcastError.putExtra(PackageInstaller.EXTRA_OTHER_PACKAGE_NAME, intent.getStringExtra(PackageInstaller.EXTRA_OTHER_PACKAGE_NAME));
                 broadcastError.putExtra(PackageInstaller.EXTRA_STATUS, status);
                 broadcastError.putExtra(PackageInstaller.EXTRA_SESSION_ID, sessionId);
                 mContext.sendBroadcast(broadcastError);
-                Log.e(TAG, "Install failed! " + intent.getStringExtra(PackageInstaller.EXTRA_STATUS_MESSAGE));
+                Log.d(TAG, "Install failed! " + intent.getStringExtra(PackageInstaller.EXTRA_STATUS_MESSAGE));
                 break;
         }
     }

File: app/src/main/java/io/github/muntashirakon/AppManager/crypto/AuthenticationActivity.java
Patch:
@@ -105,6 +105,7 @@ protected void onCreate(@Nullable Bundle savedInstanceState) {
             }
         } else {
             // No security enabled
+            AppManager.setIsAuthenticated(true);
             handleModeOfOps();
         }
     }

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/ApkFile.java
Patch:
@@ -754,7 +754,7 @@ public void close() {
          * @throws IOException If I/O error occurs.
          */
         @NonNull
-        private InputStream getRealInputStream() throws IOException {
+        public InputStream getRealInputStream() throws IOException {
             if (cachedFile != null && cachedFile.exists()) return new FileInputStream(cachedFile);
             if (zipEntry != null) return Objects.requireNonNull(zipFile).getInputStream(zipEntry);
             if (source != null && source.exists()) return new FileInputStream(source);

File: app/src/main/java/io/github/muntashirakon/AppManager/details/struct/AppDetailsItem.java
Patch:
@@ -11,7 +11,7 @@ public class AppDetailsItem {
     public @NonNull Object vanillaItem;
     public @NonNull String name = "";
 
-    public AppDetailsItem(@NonNull Object object) {
+    public <T> AppDetailsItem(@NonNull T object) {
         vanillaItem = object;
     }
 }

File: app/src/main/java/io/github/muntashirakon/AppManager/details/struct/AppDetailsPermissionItem.java
Patch:
@@ -20,8 +20,8 @@ public class AppDetailsPermissionItem extends AppDetailsItem {
     @PermissionCompat.PermissionFlags
     public int permissionFlags = 0;
 
-    public AppDetailsPermissionItem(@NonNull PermissionInfo object) {
-        super(object);
+    public AppDetailsPermissionItem(@NonNull PermissionInfo permissionInfo) {
+        super(permissionInfo);
     }
 
     public AppDetailsPermissionItem(@NonNull AppDetailsPermissionItem object) {

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppDetailsFragment.java
Patch:
@@ -926,7 +926,7 @@ private void handleBlock(@NonNull ViewHolder holder, @NonNull AppDetailsComponen
             holder.blockBtn.setOnClickListener(v -> {
                 String componentStatus = item.isBlocked()
                         ? ComponentRule.COMPONENT_TO_BE_DEFAULTED
-                        : ComponentRule.COMPONENT_TO_BE_BLOCKED_IFW_DISABLE;
+                        : AppPref.getDefaultComponentStatus();
                 applyRules(item.name, ruleType, componentStatus);
             });
             holder.blockBtn.setOnLongClickListener(v -> {

File: app/src/main/java/io/github/muntashirakon/AppManager/details/info/AppInfoViewModel.java
Patch:
@@ -110,7 +110,7 @@ public void loadTagCloud() {
         tagCloud.trackerComponents = new ArrayList<>(trackerComponents.size());
         for (String component : trackerComponents.keySet()) {
             tagCloud.trackerComponents.add(new ComponentRule(packageName, component, trackerComponents.get(component),
-                    ComponentRule.COMPONENT_TO_BE_BLOCKED_IFW_DISABLE));
+                    AppPref.getDefaultComponentStatus()));
         }
         tagCloud.isSystemApp = (applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0;
         tagCloud.isSystemlessPath = !mainModel.getIsExternalApk() && AppPref.isRootEnabled()

File: app/src/main/java/io/github/muntashirakon/AppManager/details/info/AppInfoViewModel.java
Patch:
@@ -110,7 +110,7 @@ public void loadTagCloud() {
         tagCloud.trackerComponents = new ArrayList<>(trackerComponents.size());
         for (String component : trackerComponents.keySet()) {
             tagCloud.trackerComponents.add(new ComponentRule(packageName, component, trackerComponents.get(component),
-                    ComponentRule.COMPONENT_TO_BE_BLOCKED));
+                    ComponentRule.COMPONENT_TO_BE_BLOCKED_IFW_DISABLE));
         }
         tagCloud.isSystemApp = (applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0;
         tagCloud.isSystemlessPath = !mainModel.getIsExternalApk() && AppPref.isRootEnabled()

File: app/src/main/java/io/github/muntashirakon/AppManager/scanner/ScannerActivity.java
Patch:
@@ -42,6 +42,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.regex.Pattern;
 
 import io.github.muntashirakon.AppManager.BaseActivity;
 import io.github.muntashirakon.AppManager.R;
@@ -262,8 +263,9 @@ private Map<String, SpannableStringBuilder> getNativeLibraryInfo(boolean tracker
         Map<String, SpannableStringBuilder> foundNativeLibInfoMap = new ArrayMap<>();
         for (int i = 0; i < libSignatures.length; ++i) {
             if (trackerOnly && isTracker[i] == 0) continue;
+            Pattern pattern = Pattern.compile(libSignatures[i]);
             for (String lib : nativeLibsInApk) {
-                if (lib.matches(libSignatures[i])) {
+                if (pattern.matcher(lib).find()) {
                     if (matchedLibs[i] == null) {
                         matchedLibs[i] = new ArrayList<>();
                     }

File: libcore/ui/src/main/java/io/github/muntashirakon/reflow/ReflowMenuItemView.java
Patch:
@@ -738,13 +738,15 @@ private boolean hasBadge() {
         return badgeDrawable != null;
     }
 
+    @SuppressLint("UnsafeExperimentalUsageError")
     private void tryUpdateBadgeBounds(View anchorView) {
         if (!hasBadge()) {
             return;
         }
         BadgeUtils.setBadgeDrawableBounds(badgeDrawable, anchorView, getCustomParentForBadge(anchorView));
     }
 
+    @SuppressLint("UnsafeExperimentalUsageError")
     private void tryAttachBadgeToAnchor(@Nullable View anchorView) {
         if (!hasBadge()) {
             return;
@@ -758,6 +760,7 @@ private void tryAttachBadgeToAnchor(@Nullable View anchorView) {
         }
     }
 
+    @SuppressLint("UnsafeExperimentalUsageError")
     private void tryRemoveBadgeFromAnchor(@Nullable View anchorView) {
         if (!hasBadge()) {
             return;

File: libcore/ui/src/main/java/io/github/muntashirakon/reflow/ReflowMenuPresenter.java
Patch:
@@ -92,6 +92,7 @@ public int getId() {
         return id;
     }
 
+    @SuppressLint("UnsafeExperimentalUsageError")
     @NonNull
     @Override
     public Parcelable onSaveInstanceState() {
@@ -102,6 +103,7 @@ public Parcelable onSaveInstanceState() {
         return savedState;
     }
 
+    @SuppressLint("UnsafeExperimentalUsageError")
     @Override
     public void onRestoreInstanceState(@NonNull Parcelable state) {
         if (state instanceof SavedState) {

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/explorer/AppExplorerAdapter.java
Patch:
@@ -48,7 +48,7 @@ public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
     @Override
     public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
         AdapterItem item = adapterList.get(position);
-        holder.title.setText(item.name);
+        holder.title.setText(item.getName());
         // Set icon
         if (item.type == FileType.DIRECTORY) {
             holder.icon.setImageResource(R.drawable.ic_folder_outline);
@@ -57,7 +57,7 @@ public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
                     AppExplorerFragment.getNewInstance(item.path.getUri())));
         } else {
             holder.icon.setImageResource(R.drawable.ic_file_document_outline);
-            holder.subtitle.setText(Formatter.formatFileSize(activity, item.path.length()));
+            holder.subtitle.setText(Formatter.formatFileSize(activity, item.length()));
             holder.itemView.setOnClickListener(v -> {
                 if (item.extension.equals("xml")) {
                     activity.model.cacheAndOpen(item, true);

File: app/src/test/java/androidx/documentfile/provider/DexDocumentFileTest.java
Patch:
@@ -38,7 +38,7 @@ public void setUp() throws Exception {
     public void testDexFile() throws IOException {
         List<String> level1 = Arrays.asList("a", "ademar");
         DexClasses dexClasses = new DexClasses(dexFile);
-        DexDocumentFile doc = new DexDocumentFile(dexClasses, null);
+        DexDocumentFile doc = new DexDocumentFile(11, dexClasses, null);
         assertTrue(doc.isDirectory());
         assertFalse(doc.isFile());
         assertTrue(doc.exists());

File: app/src/test/java/androidx/documentfile/provider/ZipDocumentFileTest.java
Patch:
@@ -38,7 +38,7 @@ public void setUp() throws Exception {
     public void testZipDocument() throws IOException {
         List<String> level1 = Arrays.asList("AndroidManifest.xml", "META-INF", "classes.dex", "res", "resources.arsc");
         ZipFile zipFile = new ZipFile(apkFile);
-        ZipDocumentFile doc = new ZipDocumentFile(zipFile, null);
+        ZipDocumentFile doc = new ZipDocumentFile(10, zipFile, null);
         assertTrue(doc.isDirectory());
         assertFalse(doc.isFile());
         assertTrue(doc.exists());

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/ApkUtils.java
Patch:
@@ -25,6 +25,7 @@
 
 import io.github.muntashirakon.AppManager.AppManager;
 import io.github.muntashirakon.AppManager.StaticDataset;
+import io.github.muntashirakon.AppManager.apk.parser.AndroidBinXmlParser;
 import io.github.muntashirakon.AppManager.apk.splitapk.SplitApkExporter;
 import io.github.muntashirakon.AppManager.backup.BackupFiles;
 import io.github.muntashirakon.AppManager.servermanager.PackageManagerCompat;

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/explorer/AppExplorerAdapter.java
Patch:
@@ -55,6 +55,9 @@ public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
             holder.icon.setImageResource(R.drawable.ic_file_document_outline);
             holder.subtitle.setText(Formatter.formatFileSize(activity, item.zipEntry.getSize()));
             holder.itemView.setOnClickListener(v -> {
+                if (item.extension.equals("xml")) {
+                    activity.model.cacheAndOpen(item, true);
+                }
                 // TODO: 9/10/21
             });
         }

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/explorer/AppExplorerFragment.java
Patch:
@@ -57,7 +57,7 @@ public void onCreate(@Nullable Bundle savedInstanceState) {
     @Nullable
     @Override
     public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
-        return inflater.inflate(R.layout.fragment_fm, container, false);
+        return inflater.inflate(R.layout.fragment_app_explorer, container, false);
     }
 
     @Override
@@ -69,7 +69,6 @@ public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceStat
         // Set title and subtitle
         ActionBar actionBar = activity.getSupportActionBar();
         if (actionBar != null) {
-            actionBar.setTitle(model.getName());
             actionBar.setSubtitle("/" + (name == null ? "" : name));
         }
         swipeRefresh = view.findViewById(R.id.swipe_refresh);

File: app/src/main/java/io/github/muntashirakon/AppManager/appops/AppOpsService.java
Patch:
@@ -2,7 +2,6 @@
 
 package io.github.muntashirakon.AppManager.appops;
 
-import android.annotation.SuppressLint;
 import android.content.Context;
 import android.os.Build;
 import android.os.Parcelable;
@@ -26,7 +25,6 @@
 import io.github.muntashirakon.AppManager.utils.AppPref;
 import io.github.muntashirakon.AppManager.utils.PermissionUtils;
 
-@SuppressLint("DefaultLocale")
 public class AppOpsService {
     private final IAppOpsService appOpsService;
 

File: app/src/main/java/io/github/muntashirakon/AppManager/adb/AdbConnectionManager.java
Patch:
@@ -45,11 +45,11 @@ public static AdbConnection connect(@NonNull String host, int port) throws Excep
     }
 
     @RequiresApi(Build.VERSION_CODES.R)
-    public static boolean pair(@NonNull String host, int port, @NonNull String pairingCode) throws Exception {
+    public static void pair(@NonNull String host, int port, @NonNull String pairingCode) throws Exception {
         KeyPair keyPair = getAdbKeyPair();
         try (PairingConnectionCtx pairingClient = new PairingConnectionCtx(host, port,
                 pairingCode.getBytes(StandardCharsets.UTF_8), keyPair)) {
-            return pairingClient.start();
+            pairingClient.start();
         }
     }
 }

File: app/src/main/java/io/github/muntashirakon/AppManager/rules/PseudoRules.java
Patch:
@@ -34,7 +34,7 @@ public void loadExternalEntries(Path file) throws IOException, RemoteException {
      */
     @NonNull
     @Override
-    protected Path getDesiredFile() {
+    protected Path getDesiredFile(boolean create) {
         return new Path(AppManager.getContext(), new File("/dev/null"));
     }
 }

File: app/src/main/java/io/github/muntashirakon/io/Path.java
Patch:
@@ -277,7 +277,6 @@ public boolean isSymbolicLink() throws IOException {
         if (documentFile instanceof ProxyDocumentFile) {
             try {
                 FileStatus lstat = ProxyFiles.lstat(Objects.requireNonNull(getFile()));
-                if (lstat == null) return false;
                 // https://github.com/win32ports/unistd_h/blob/master/unistd.h
                 return OsConstants.S_ISLNK(lstat.st_mode);
             } catch (ErrnoException | RemoteException e) {

File: app/src/main/java/io/github/muntashirakon/io/ProxyFiles.java
Patch:
@@ -7,7 +7,6 @@
 import android.system.Os;
 
 import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
 import androidx.annotation.WorkerThread;
 
 import java.io.File;
@@ -27,7 +26,7 @@ public static FileStatus stat(@NonNull File path) throws ErrnoException, RemoteE
         return new FileStatus(Os.stat(path.getAbsolutePath()));
     }
 
-    @Nullable
+    @NonNull
     public static FileStatus lstat(@NonNull File path) throws ErrnoException, RemoteException {
         if (path instanceof ProxyFile && LocalServer.isAMServiceAlive()) {
             return IPCUtils.getAmService().lstat(path.getAbsolutePath());

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/TarUtils.java
Patch:
@@ -57,7 +57,7 @@ public final class TarUtils {
      * on the supplied split size.
      *
      * @param type           Compression type
-     * @param source         Source directory
+     * @param source         Source directory/file
      * @param dest           Destination directory
      * @param destFilePrefix filename as a prefix (.0, .1, etc. are added at the end)
      * @param filters        A list of mutually exclusive regex filters

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/UIUtils.java
Patch:
@@ -93,7 +93,7 @@ public static Spannable getStyledKeyValue(@NonNull Context context, @StringRes i
 
     @NonNull
     public static Spannable getStyledKeyValue(@NonNull Context context, CharSequence key, CharSequence value) {
-        return getStyledKeyValue(context, key, value, ": ");
+        return getStyledKeyValue(context, key, value, LangUtils.getSeparatorString());
     }
 
     @NonNull

File: app/src/main/java/io/github/muntashirakon/io/Path.java
Patch:
@@ -277,6 +277,7 @@ public boolean isSymbolicLink() throws IOException {
         if (documentFile instanceof ProxyDocumentFile) {
             try {
                 FileStatus lstat = ProxyFiles.lstat(Objects.requireNonNull(getFile()));
+                if (lstat == null) return false;
                 // https://github.com/win32ports/unistd_h/blob/master/unistd.h
                 return OsConstants.S_ISLNK(lstat.st_mode);
             } catch (ErrnoException | RemoteException e) {

File: app/src/main/java/io/github/muntashirakon/io/ProxyFiles.java
Patch:
@@ -7,6 +7,7 @@
 import android.system.Os;
 
 import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 import androidx.annotation.WorkerThread;
 
 import java.io.File;
@@ -26,7 +27,7 @@ public static FileStatus stat(@NonNull File path) throws ErrnoException, RemoteE
         return new FileStatus(Os.stat(path.getAbsolutePath()));
     }
 
-    @NonNull
+    @Nullable
     public static FileStatus lstat(@NonNull File path) throws ErrnoException, RemoteException {
         if (path instanceof ProxyFile && LocalServer.isAMServiceAlive()) {
             return IPCUtils.getAmService().lstat(path.getAbsolutePath());

File: app/src/main/java/io/github/muntashirakon/AppManager/scanner/ScannerViewModel.java
Patch:
@@ -10,6 +10,7 @@
 
 import androidx.annotation.AnyThread;
 import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 import androidx.annotation.WorkerThread;
 import androidx.lifecycle.AndroidViewModel;
 import androidx.lifecycle.LiveData;
@@ -61,7 +62,7 @@ protected void onCleared() {
     }
 
     @AnyThread
-    public void loadSummary(File apkFile, Uri apkUri) {
+    public void loadSummary(@Nullable File apkFile, @NonNull Uri apkUri) {
         cached = false;
         this.apkFile = apkFile;
         this.apkUri = apkUri;
@@ -119,7 +120,7 @@ public List<String> getClassListAll() {
     @WorkerThread
     private void cacheFileIfRequired() {
         // Test if this path is readable
-        if (!apkFile.exists() || !apkFile.canRead()) {
+        if (this.apkFile == null || !apkFile.canRead()) {
             // Not readable, cache the file
             try (InputStream uriStream = getApplication().getContentResolver().openInputStream(apkUri)) {
                 apkFile = FileUtils.getCachedFile(uriStream);

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppDetailsActivity.java
Patch:
@@ -94,7 +94,7 @@ protected void onAuthenticated(Bundle savedInstanceState) {
                     ApplicationInfo applicationInfo = packageInfo.applicationInfo;
                     // Set title as the package label
                     setTitle(applicationInfo.loadLabel(getPackageManager()));
-                    // Set subtitle as the user name if more than one user exists
+                    // Set subtitle as the username if more than one user exists
                     model.getUserInfo().observe(this, userInfo -> getSupportActionBar()
                             .setSubtitle(getString(R.string.user_profile_with_id, userInfo.name, userInfo.id)));
                 });

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppDetailsFragment.java
Patch:
@@ -1440,8 +1440,8 @@ private void getUsesPermissionsView(@NonNull ViewHolder holder, int index) {
                         mActivity.getString(R.string.group), permissionInfo.group));
             } else holder.textView5.setVisibility(View.GONE);
             // Permission Switch
-            int sdkVersion = mainModel != null && mainModel.getPackageInfoSafe() != null ?
-                    mainModel.getPackageInfoSafe().applicationInfo.targetSdkVersion : 23;
+            int sdkVersion = mainModel != null && mainModel.getPackageInfo() != null ?
+                    mainModel.getPackageInfo().applicationInfo.targetSdkVersion : 23;
             if ((isRootEnabled || isADBEnabled) && !isExternalApk && ((permissionItem.isDangerous
                     && sdkVersion >= Build.VERSION_CODES.M) || protectionLevel.contains("development")
                     || permissionItem.appOp != AppOpsManager.OP_NONE)) {

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/RestoreOp.java
Patch:
@@ -296,8 +296,6 @@ private void restoreApkFiles() throws BackupException {
         }
         // A normal update will do it now
         PackageInstallerCompat packageInstaller = PackageInstallerCompat.getNewInstance(userHandle, metadata.installer);
-        // We don't need to display install completed message
-        packageInstaller.setShowCompletedMessage(false);
         try {
             if (!packageInstaller.install(allApks, packageName)) {
                 throw new BackupException("A (re)install was necessary but couldn't perform it.");

File: app/src/main/java/io/github/muntashirakon/AppManager/intercept/IntentCompat.java
Patch:
@@ -54,7 +54,9 @@ public static List<Uri> getDataUris(@NonNull Intent intent) {
         } else if (Intent.ACTION_SEND_MULTIPLE.equals(intent.getAction())) {
             return intent.getParcelableArrayListExtra(Intent.EXTRA_STREAM);
         }
-        return Collections.singletonList(intent.getData());
+        Uri data = intent.getData();
+        if (data == null) return null;
+        return Collections.singletonList(data);
     }
 
     public static void removeFlags(@NonNull Intent intent, int flags) {

File: app/src/main/java/io/github/muntashirakon/AppManager/main/MainViewModel.java
Patch:
@@ -384,8 +384,9 @@ private void loadRunningApps() {
                 }
                 for (int i = 0; i < applicationItems.size(); ++i) {
                     ApplicationItem applicationItem = applicationItems.get(i);
-                    applicationItem.isRunning = processNames.contains(applicationItem.packageName)
-                            || processUids.contains(applicationItem.uid);
+                    applicationItem.isRunning = applicationItem.isInstalled
+                            && (processNames.contains(applicationItem.packageName)
+                            || (applicationItem.sharedUserId == null && processUids.contains(applicationItem.uid)));
                     applicationItems.set(i, applicationItem);
                 }
             } catch (Throwable th) {

File: app/src/main/java/io/github/muntashirakon/AppManager/logcat/helper/SaveLogHelper.java
Patch:
@@ -76,7 +76,8 @@ public static Path getFile(@NonNull String filename) throws IOException {
         return getSavedLogsDirectory().findFile(filename);
     }
 
-    public static void deleteLogIfExists(String filename) {
+    public static void deleteLogIfExists(@Nullable String filename) {
+        if (filename == null) return;
         try {
             getSavedLogsDirectory().findFile(filename).delete();
         } catch (IOException ignore) {

File: app/src/main/java/io/github/muntashirakon/AppManager/ipc/IPCClient.java
Patch:
@@ -203,7 +203,7 @@ private static String getRunnerScript(@NonNull Context context,
         File mainJar = dumpMainJar(context);
         File stagingJar = new File(PACKAGE_STAGING_DIRECTORY, "main.jar");
         return (PackageUtils.ensurePackageStagingDirectoryCommand() +
-                String.format("cp %s %s && ", mainJar, PACKAGE_STAGING_DIRECTORY) +
+                String.format(" && cp %s %s && ", mainJar, PACKAGE_STAGING_DIRECTORY) +
                 String.format("chmod 755 %s && chown shell:shell %s && ", stagingJar, stagingJar) +
                 String.format("(CLASSPATH=%s /system/bin/app_process %s /system/bin %s %s %s)&",
                         stagingJar, debugParams, IPCMAIN_CLASSNAME, serviceName.flattenToString(),

File: app/src/main/java/io/github/muntashirakon/AppManager/runner/RunnerUtils.java
Patch:
@@ -202,7 +202,7 @@ public static void setModeOfOps(FragmentActivity activity, boolean force) {
                         AppPref.set(AppPref.PrefKey.PREF_ROOT_MODE_ENABLED_BOOL, false);
                         AppPref.set(AppPref.PrefKey.PREF_ADB_MODE_ENABLED_BOOL, true);
                         CountDownLatch waitForConfig = new CountDownLatch(1);
-                        UiThreadHandler.run(() -> MainPreferences.displayAdbConnect(activity, waitForConfig));
+                        UiThreadHandler.run(() -> MainPreferences.configureWirelessDebugging(activity, waitForConfig));
                         waitForConfig.await(2, TimeUnit.MINUTES);
                         LocalServer.restart();
                         return;

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppDetailsViewModel.java
Patch:
@@ -827,6 +827,7 @@ public void setPackageInfo(boolean reload) {
                     throw new ApkFile.ApkFileException("App not installed. It only has data.");
                 }
             } catch (Throwable e) {
+                Log.e(TAG, e);
                 installedPackageInfo = null;
             }
             if (isExternalApk) {
@@ -851,6 +852,7 @@ public void setPackageInfo(boolean reload) {
             }
             isPackageExistLiveData.postValue(isPackageExist = true);
         } catch (PackageManager.NameNotFoundException e) {
+            Log.e(TAG, e);
             isPackageExistLiveData.postValue(isPackageExist = false);
         } catch (Throwable e) {
             Log.e(TAG, e);

File: app/src/main/java/io/github/muntashirakon/AppManager/servermanager/LocalServerManager.java
Patch:
@@ -183,7 +183,9 @@ private String getExecCommand() throws IOException {
         return "sh " + ServerConfig.getExecPath() + " " + ServerConfig.getLocalServerPort() + " " + ServerConfig.getLocalToken();
     }
 
+    @Nullable
     private AdbConnection connection;
+    @Nullable
     private AdbStream adbStream;
 
     void tryAdb() throws Exception {
@@ -211,6 +213,7 @@ private void useAdbStartServer() throws Exception {
 
         // Logging thread
         new Thread(() -> {
+            if (adbStream == null) return;
             LineReader reader;
             StringBuilder sb = new StringBuilder();
             try {

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/MetadataManager.java
Patch:
@@ -240,10 +240,10 @@ public void setMetadata(Metadata metadata) {
     @WorkerThread
     synchronized public void readMetadata(@NonNull BackupFiles.BackupFile backupFile) throws IOException {
         String metadata = FileUtils.getFileContent(backupFile.getMetadataFile());
+        if (TextUtils.isEmpty(metadata)) {
+            throw new IOException("Empty JSON string for path " + backupFile.getBackupPath());
+        }
         try {
-            if (TextUtils.isEmpty(metadata)) {
-                throw new JSONException("Empty JSON string for path " + backupFile.getBackupPath());
-            }
             JSONObject rootObject = new JSONObject(metadata);
             this.metadata = new Metadata();
             this.metadata.backupPath = backupFile.getBackupPath();

File: app/src/main/java/androidx/documentfile/provider/ProxyDocumentFile.java
Patch:
@@ -53,7 +53,7 @@ public DocumentFile createFile(@NonNull String mimeType, @NonNull String display
     @Nullable
     public DocumentFile createDirectory(@NonNull String displayName) {
         final File target = new ProxyFile(mFile, displayName);
-        if (target.isDirectory() || target.mkdirs()) {
+        if (target.isDirectory() || target.mkdir()) {
             return new ProxyDocumentFile(this, target);
         } else {
             return null;

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/TarUtils.java
Patch:
@@ -147,8 +147,8 @@ public static void extract(@NonNull @TarType String type, @NonNull Path[] source
                 while ((entry = tis.getNextEntry()) != null) {
                     Path file;
                     if (entry.isDirectory()) {
-                        file = dest.findOrCreateDirectory(entry.getName());
-                    } else file = dest.findOrCreateFile(entry.getName(), null);
+                        file = dest.createDirectories(entry.getName());
+                    } else file = dest.createNewFileRecursive(entry.getName(), null);
                     if (!entry.isDirectory() && (!isUnderFilter(file, dest, filters)
                             || willExclude(file, dest, exclude))) {
                         // Unlike create, there's no efficient way to detect if a directory contains any filters.

File: app/src/main/java/io/github/muntashirakon/AppManager/fm/FmAdapter.java
Patch:
@@ -63,7 +63,8 @@ public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
                 Intent openFile = new Intent(Intent.ACTION_VIEW);
                 openFile.setDataAndType(FmProvider.getContentUri(item.path), item.path.getType());
                 openFile.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_GRANT_READ_URI_PERMISSION
-                        | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
+                        | Intent.FLAG_GRANT_WRITE_URI_PERMISSION | Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION
+                        | Intent.FLAG_GRANT_PREFIX_URI_PERMISSION);
                 if (openFile.resolveActivityInfo(fmActivity.getPackageManager(), 0) != null) {
                     fmActivity.startActivity(openFile);
                 }

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/SsaidSettings.java
Patch:
@@ -51,7 +51,7 @@ public SsaidSettings(String packageName, int uid) throws IOException {
         File ssaidLocation = new ProxyFile(OsEnvironment.getUserSystemDirectory(Users.getUserId(uid)),
                 "settings_ssaid.xml");
         try {
-            if (ssaidLocation.canRead()) {
+            if (!ssaidLocation.canRead()) {
                 throw new IOException("settings_ssaid.xml is inaccessible.");
             }
         } catch (SecurityException e) {

File: app/src/main/java/io/github/muntashirakon/AppManager/runningapps/RunningAppsViewModel.java
Patch:
@@ -224,8 +224,8 @@ public void filterAndSort() {
         Collections.sort(filteredProcessList, (o1, o2) -> Integer.compare(o1.pid, o2.pid));
         if (sortOrder != RunningAppsActivity.SORT_BY_PID) {
             Collections.sort(filteredProcessList, (o1, o2) -> {
-                ProcessItem p1 = Objects.requireNonNull(processList.get(o1.pid));
-                ProcessItem p2 = Objects.requireNonNull(processList.get(o2.pid));
+                ProcessItem p1 = Objects.requireNonNull(o1);
+                ProcessItem p2 = Objects.requireNonNull(o2);
                 switch (sortOrder) {
                     case RunningAppsActivity.SORT_BY_APPS_FIRST:
                         return -Boolean.compare(p1 instanceof AppProcessItem, p2 instanceof AppProcessItem);

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppDetailsFragment.java
Patch:
@@ -956,9 +956,8 @@ private void getActivityView(@NonNull ViewHolder holder, int index) {
                     intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                     try {
                         ActivityManagerCompat.startActivity(mActivity, intent, mainModel.getUserHandle());
-                    } catch (RemoteException e) {
-                        e.printStackTrace();
-                        Toast.makeText(mActivity, e.toString(), Toast.LENGTH_LONG).show();
+                    } catch (Throwable e) {
+                        UIUtils.displayLongToast(e.getLocalizedMessage());
                     }
                 });
             }

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/BackupOp.java
Patch:
@@ -207,7 +207,7 @@ private void backupIcon() {
             Bitmap bitmap = IOUtils.getBitmapFromDrawable(applicationInfo.loadIcon(pm));
             bitmap.compress(Bitmap.CompressFormat.PNG, 100, outputStream);
             outputStream.flush();
-        } catch (IOException | RemoteException e) {
+        } catch (IOException e) {
             Log.w(TAG, "Could not back up icon.");
         }
     }
@@ -429,7 +429,7 @@ private void backupRules() throws BackupException {
         try (OutputStream outputStream = new ProxyOutputStream(rulesFile);
              ComponentsBlocker cb = ComponentsBlocker.getInstance(packageName, userHandle)) {
             ComponentUtils.storeRules(outputStream, cb.getAll(), true);
-        } catch (IOException | RemoteException e) {
+        } catch (IOException e) {
             throw new BackupException("Rules backup is requested but encountered an error during fetching rules.", e);
         }
         if (!rulesFile.exists()) return;

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/convert/TBConvert.java
Patch:
@@ -443,7 +443,7 @@ private void backupIcon() {
         try (OutputStream outputStream = new ProxyOutputStream(iconFile)) {
             icon.compress(Bitmap.CompressFormat.PNG, 100, outputStream);
             outputStream.flush();
-        } catch (IOException | RemoteException e) {
+        } catch (IOException e) {
             Log.w(TAG, "Could not back up icon.");
         }
     }

File: app/src/main/java/io/github/muntashirakon/AppManager/crypto/OpenPGPCrypto.java
Patch:
@@ -10,7 +10,6 @@
 import android.content.IntentFilter;
 import android.os.Handler;
 import android.os.Looper;
-import android.os.RemoteException;
 import android.os.SystemClock;
 
 import androidx.annotation.AnyThread;
@@ -193,8 +192,8 @@ private boolean doActionForFiles(Intent intent, int mode, boolean waitForResult)
                         IOUtils.deleteSilently(outputFilename);
                         return false;
                     }
-                } catch (IOException | RemoteException e) {
-                    Log.e(TAG, "Error: " + e.toString(), e);
+                } catch (IOException e) {
+                    Log.e(TAG, "Error: " + e.getMessage(), e);
                     return false;
                 }
                 // Delete unencrypted file

File: app/src/main/java/io/github/muntashirakon/AppManager/logcat/LogViewerActivity.java
Patch:
@@ -870,7 +870,7 @@ private void saveLogToTargetApp(final boolean includeDeviceInfo, final boolean i
                         try {
                             SaveLogHelper.saveZipFileAndThrow(this, uri, files);
                             UiThreadHandler.run(() -> UIUtils.displayShortToast(R.string.saved_successfully));
-                        } catch (IOException | RemoteException e) {
+                        } catch (IOException e) {
                             UiThreadHandler.run(() -> UIUtils.displayShortToast(R.string.saving_failed));
                         }
                     });

File: app/src/main/java/io/github/muntashirakon/AppManager/sharedpref/SharedPrefsActivity.java
Patch:
@@ -5,7 +5,6 @@
 import android.app.Activity;
 import android.graphics.Color;
 import android.os.Bundle;
-import android.os.RemoteException;
 import android.text.TextUtils;
 import android.util.Xml;
 import android.view.LayoutInflater;
@@ -297,7 +296,7 @@ private boolean writeSharedPref(ProxyFile sharedPrefsFile, @NonNull HashMap<Stri
             xmlFile.write(stringWriter.toString().getBytes());
             xmlFile.close();
             return Runner.runCommand(new String[]{"chmod", "0666", sharedPrefsFile.getAbsolutePath()}).isSuccessful();
-        } catch (IOException | RemoteException e) {
+        } catch (IOException e) {
             e.printStackTrace();
         }
         return false;

File: app/src/main/java/io/github/muntashirakon/io/AtomicProxyFile.java
Patch:
@@ -86,14 +86,14 @@ public ProxyOutputStream startWrite() throws IOException {
 
         try {
             return new ProxyOutputStream(mNewName);
-        } catch (FileNotFoundException | RemoteException e) {
+        } catch (FileNotFoundException e) {
             File parent = mNewName.getParentFile();
             if (!parent.mkdirs()) {
                 throw new IOException("Failed to create directory for " + mNewName, e);
             }
             try {
                 return new ProxyOutputStream(mNewName);
-            } catch (FileNotFoundException | RemoteException e2) {
+            } catch (FileNotFoundException e2) {
                 throw new IOException("Failed to create new file " + mNewName, e2);
             }
         }
@@ -214,7 +214,7 @@ private static boolean sync(@NonNull ProxyOutputStream stream) {
             return true;
         } catch (IOException ignored) {
         }
-        return false;
+        return true;
     }
 
     private static void rename(@NonNull File source, @NonNull File target) {

File: app/src/main/java/io/github/muntashirakon/io/Storage.java
Patch:
@@ -269,7 +269,7 @@ public ParcelFileDescriptor openFileDescriptor(@NonNull String mode, @NonNull Ha
     }
 
     @Nullable
-    public OutputStream openOutputStream(@NonNull String mode) throws FileNotFoundException, RemoteException {
+    public OutputStream openOutputStream(@NonNull String mode) throws IOException {
         if (documentFile instanceof ProxyDocumentFile) {
             File file = ((ProxyDocumentFile) documentFile).getFile();
             return new ProxyOutputStream(file);

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/installer/PackageInstallerCompat.java
Patch:
@@ -563,7 +563,7 @@ public boolean install(@NonNull File[] apkFiles, String packageName) {
                      OutputStream apkOutputStream = session.openWrite(apkFile.getName(), 0, apkFile.length())) {
                     IOUtils.copy(apkInputStream, apkOutputStream);
                     session.fsync(apkOutputStream);
-                } catch (IOException | RemoteException e) {
+                } catch (IOException e) {
                     sendCompletedBroadcast(packageName, STATUS_FAILURE_SESSION_WRITE, sessionId);
                     Log.e(TAG, "Install: Cannot copy files to session.", e);
                     return abandon();

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/convert/OABConvert.java
Patch:
@@ -357,7 +357,7 @@ private void backupData() throws BackupException {
                 for (File file : newBackupFiles) {
                     checksum.add(file.getName(), DigestUtils.getHexDigest(destMetadata.checksumAlgo, file));
                 }
-            } catch (IOException | RemoteException e) {
+            } catch (IOException e) {
                 throw new BackupException("Backup failed for " + dataFile, e);
             }
         }

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/convert/TBConvert.java
Patch:
@@ -190,7 +190,7 @@ private void backupApkFile() throws BackupException {
             } finally {
                 is.close();
             }
-        } catch (IOException | RemoteException e) {
+        } catch (IOException e) {
             baseApkFile.delete();
             throw new BackupException("Couldn't decompress " + sourceMetadata.apkName, e);
         }
@@ -366,7 +366,7 @@ private void backupData() throws BackupException {
                     checksum.add(file.getName(), DigestUtils.getHexDigest(destMetadata.checksumAlgo, file));
                 }
             }
-        } catch (IOException | RemoteException e) {
+        } catch (IOException e) {
             throw new BackupException("Could not backup data", e);
         }
     }
@@ -417,7 +417,7 @@ private void readPropFile() throws BackupException {
                 byte[] decodedBytes = Base64.decode(base64Icon, 0);
                 icon = BitmapFactory.decodeByteArray(decodedBytes, 0, decodedBytes.length);
             }
-        } catch (IOException | RemoteException e) {
+        } catch (IOException e) {
             throw new BackupException("Could not read the prop file", e);
         }
     }

File: app/src/main/java/io/github/muntashirakon/AppManager/logcat/helper/SaveLogHelper.java
Patch:
@@ -122,7 +122,7 @@ public static SavedLog openLog(@NonNull String filename, int maxLines) {
                     truncated = true;
                 }
             }
-        } catch (IOException | RemoteException e) {
+        } catch (IOException e) {
             Log.e(TAG, e);
         }
         return new SavedLog(logLines, truncated);

File: app/src/main/java/io/github/muntashirakon/AppManager/rules/compontents/ComponentUtils.java
Patch:
@@ -253,7 +253,7 @@ public static HashMap<String, RuleType> getIFWRulesForPackage(@NonNull String pa
                 try (InputStream inputStream = new ProxyInputStream(ifwRulesFile)) {
                     // Read rules
                     rules.putAll(readIFWRules(inputStream, packageName));
-                } catch (IOException | RemoteException e) {
+                } catch (IOException e) {
                     e.printStackTrace();
                 }
             }

File: app/src/main/java/io/github/muntashirakon/AppManager/sharedpref/SharedPrefsActivity.java
Patch:
@@ -236,7 +236,8 @@ private HashMap<String, Object> readSharedPref(ProxyFile sharedPrefsFile) {
                 event = parser.nextTag();
             }
             rulesStream.close();
-        } catch (IOException | RemoteException | XmlPullParserException ignored) {}
+        } catch (IOException | XmlPullParserException ignored) {
+        }
         return prefs;
     }
 

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/DigestUtils.java
Patch:
@@ -3,7 +3,6 @@
 package io.github.muntashirakon.AppManager.utils;
 
 import android.annotation.TargetApi;
-import android.os.RemoteException;
 import android.text.TextUtils;
 import android.util.Pair;
 
@@ -59,7 +58,7 @@ public static String getHexDigest(@Algorithm String algo, @NonNull File path) {
         for (File file : allFiles) {
             try (InputStream fileInputStream = new ProxyInputStream(file)) {
                 hashes.add(DigestUtils.getHexDigest(algo, fileInputStream));
-            } catch (IOException | RemoteException e) {
+            } catch (IOException e) {
                 e.printStackTrace();
             }
         }

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/IOUtils.java
Patch:
@@ -342,7 +342,7 @@ public static String getFileContent(@NonNull File file, @NonNull String emptyVal
         if (!file.exists() || file.isDirectory()) return emptyValue;
         try (InputStream inputStream = new ProxyInputStream(file)) {
             return getInputStreamContent(inputStream);
-        } catch (IOException | RemoteException e) {
+        } catch (IOException e) {
             if (!(e.getCause() instanceof ErrnoException)) {
                 // This isn't just another EACCESS exception
                 e.printStackTrace();

File: app/src/main/java/io/github/muntashirakon/io/Storage.java
Patch:
@@ -278,7 +278,7 @@ public OutputStream openOutputStream(@NonNull String mode) throws FileNotFoundEx
     }
 
     @Nullable
-    public InputStream openInputStream() throws FileNotFoundException, RemoteException {
+    public InputStream openInputStream() throws IOException {
         if (documentFile instanceof ProxyDocumentFile) {
             File file = ((ProxyDocumentFile) documentFile).getFile();
             return new ProxyInputStream(file);
@@ -309,7 +309,7 @@ private static class StorageCallback extends StorageManagerCompat.ProxyFileDescr
 
         private StorageCallback(String path, String mode, HandlerThread thread) throws RemoteException {
             super(thread);
-            Log.e(TAG, "Mode: " + mode);
+            Log.d(TAG, "Mode: " + mode);
             try {
                 fd = IPCUtils.getAmService().getFD(path, mode);
             } catch (RemoteException e) {

File: app/src/main/java/io/github/muntashirakon/AppManager/runner/RunnerUtils.java
Patch:
@@ -179,7 +179,7 @@ public static void setModeOfOps(FragmentActivity activity, boolean force) {
                 if (LocalServer.isAMServiceAlive()) {
                     // Don't bother detecting root/ADB
                     return;
-                } else if (LocalServer.isLocalServerAlive()) {
+                } else if (!Runner.MODE_NO_ROOT.equals(mode) && LocalServer.isLocalServerAlive()) {
                     // Remote server is running
                     LocalServer.getInstance();
                     return;

File: app/src/main/java/io/github/muntashirakon/AppManager/servermanager/LocalServer.java
Patch:
@@ -61,6 +61,7 @@ public static void launchAmService() throws RemoteException {
         }
     }
 
+    @WorkerThread
     public static boolean isAdbAvailable() {
         try {
             LocalServerManager manager = LocalServerManager.getInstance();

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppDetailsViewModel.java
Patch:
@@ -400,7 +400,7 @@ public void removeRules(List<? extends RuleEntry> entries, boolean forceApply) {
 
     @WorkerThread
     @GuardedBy("blockerLocker")
-    public boolean setPermission(final AppDetailsPermissionItem permissionItem) {
+    public boolean togglePermission(final AppDetailsPermissionItem permissionItem) {
         if (isExternalApk) return false;
         int appOp = permissionItem.appOp;
         int uid = packageInfo.applicationInfo.uid;

File: app/src/main/java/io/github/muntashirakon/AppManager/details/info/AppInfoFragment.java
Patch:
@@ -244,6 +244,8 @@ public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceStat
                 AppDetailsItem appDetailsItem = appDetailsItems.get(0);
                 mPackageInfo = (PackageInfo) appDetailsItem.vanillaItem;
                 mPackageName = appDetailsItem.name;
+                mInstalledPackageInfo = mainModel.getInstalledPackageInfo();
+                mApplicationInfo = mPackageInfo.applicationInfo;
                 // Set package name
                 packageNameView.setText(mPackageName);
                 packageNameView.setOnClickListener(v -> {
@@ -1385,9 +1387,6 @@ private void setStorageAndCache(AppInfoViewModel.AppInfo appInfo) {
 
     @WorkerThread
     private void loadPackageInfo() {
-        if (mainModel == null) return;  // Should never happen but checked anyway
-        mInstalledPackageInfo = mainModel.getInstalledPackageInfo();
-        mApplicationInfo = mPackageInfo.applicationInfo;
         // Set App Icon
         Drawable icon = mApplicationInfo.loadIcon(mPackageManager);
         runOnUiThread(() -> {

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/installer/PackageInstallerCompat.java
Patch:
@@ -768,6 +768,7 @@ protected boolean abandon() {
         return false;
     }
 
+    @SuppressWarnings("deprecation")
     public static void uninstall(String packageName, @UserIdInt int userHandle, boolean keepData) throws Exception {
         IPackageInstaller pi = PackageManagerCompat.getPackageInstaller(AppManager.getIPackageManager());
         LocalIntentReceiver receiver = new LocalIntentReceiver();
@@ -805,9 +806,9 @@ public static void uninstall(String packageName, @UserIdInt int userHandle, bool
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
             pi.uninstall(new VersionedPackage(packageName, PackageManager.VERSION_CODE_HIGHEST),
                     null, flags, sender, userHandle);
-        } else {
+        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
             pi.uninstall(packageName, null, flags, sender, userHandle);
-        }
+        } else pi.uninstall(packageName, flags, sender, userHandle);
         final Intent result = receiver.getResult();
         final int status = result.getIntExtra(PackageInstaller.EXTRA_STATUS, PackageInstaller.STATUS_FAILURE);
         if (status != PackageInstaller.STATUS_SUCCESS) {

File: app/src/main/java/io/github/muntashirakon/AppManager/rules/RulesStorageManager.java
Patch:
@@ -139,8 +139,8 @@ public void setAppOp(int op, @AppOpsManager.Mode int mode) {
         addUniqueEntry(new AppOpRule(packageName, op, mode));
     }
 
-    public void setPermission(String name, boolean isGranted) {
-        addUniqueEntry(new PermissionRule(packageName, name, isGranted, 0));
+    public void setPermission(String name, boolean isGranted, @PermissionCompat.PermissionFlags int flags) {
+        addUniqueEntry(new PermissionRule(packageName, name, isGranted, flags));
     }
 
     public void setNotificationListener(String name, boolean isGranted) {

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppDetailsViewModel.java
Patch:
@@ -131,7 +131,7 @@ public void onCleared() {
         if (receiver != null) getApplication().unregisterReceiver(receiver);
         receiver = null;
         IOUtils.closeQuietly(apkFile);
-        executor.shutdown();
+        executor.shutdownNow();
     }
 
     @UiThread
@@ -723,7 +723,7 @@ public LiveData<Boolean> getIsPackageChanged() {
     @GuardedBy("blockerLocker")
     public void setIsPackageChanged() {
         setPackageInfo(true);
-        if (isExternalApk || executor.isShutdown()) return;
+        if (isExternalApk || executor.isShutdown() || executor.isTerminated()) return;
         executor.submit(() -> {
             synchronized (blockerLocker) {
                 try {

File: app/src/main/java/io/github/muntashirakon/AppManager/details/info/AppInfoFragment.java
Patch:
@@ -1125,6 +1125,8 @@ private void setHorizontalActions() {
                     });
         } catch (PackageManager.NameNotFoundException ignored) {
         }
+        View v = mHorizontalLayout.getChildAt(0);
+        if (v != null) v.requestFocus();
     }
 
     @GuardedBy("mListItems")

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/MainPreferences.java
Patch:
@@ -503,7 +503,7 @@ private void loadDeviceInfo(Display display) {
             for (FeatureInfo info : features) {
                 if (info.name != null) {
                     // It's a feature
-                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
+                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N && info.version != 0) {
                         featureStrings.add(info.name + " (v" + info.version + ")");
                     } else featureStrings.add(info.name);
                 }

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/ApkUtils.java
Patch:
@@ -107,7 +107,7 @@ public static ByteBuffer getManifestFromApk(File apkFile) throws IOException {
             ZipEntry zipEntry;
             while (archiveEntries.hasMoreElements()) {
                 zipEntry = archiveEntries.nextElement();
-                if (!IOUtils.getLastPathComponent(zipEntry.getName()).equals(MANIFEST_FILE)) {
+                if (!zipEntry.getName().equals(MANIFEST_FILE)) {
                     continue;
                 }
                 try (InputStream zipInputStream = zipFile.getInputStream(zipEntry)) {

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppDetailsViewModel.java
Patch:
@@ -723,7 +723,7 @@ public LiveData<Boolean> getIsPackageChanged() {
     @GuardedBy("blockerLocker")
     public void setIsPackageChanged() {
         setPackageInfo(true);
-        if (isExternalApk) return;
+        if (isExternalApk || executor.isShutdown()) return;
         executor.submit(() -> {
             synchronized (blockerLocker) {
                 try {

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/installer/PackageInstallerCompat.java
Patch:
@@ -704,7 +704,7 @@ protected void copyObb(@NonNull ApkFile apkFile) {
             ProxyFile[] extDirs = ue.getExternalDirs();
             ProxyFile writableExtDir = null;
             for (ProxyFile extDir : extDirs) {
-                if (extDir.canWrite()) {
+                if (extDir.canWrite() || extDir.getAbsolutePath().startsWith("/storage/emulated")) {
                     writableExtDir = extDir;
                     break;
                 }
@@ -726,6 +726,7 @@ protected void copyObb(@NonNull ApkFile apkFile) {
             apkFile.extractObb(writableObbDir);
             UiThreadHandler.run(() -> UIUtils.displayLongToast(R.string.obb_files_extracted_successfully));
         } catch (Exception e) {
+            Log.e(TAG, e);
             UiThreadHandler.run(() -> UIUtils.displayLongToast(R.string.failed_to_extract_obb_files));
         } finally {
             if (installWatcher.getCount() != 0) {

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/convert/OABConvert.java
Patch:
@@ -224,7 +224,7 @@ private void readLogFile() throws JSONException, BackupException {
 
     private void backupApkFile() throws BackupException {
         File[] baseApkFiles = new File[]{new ProxyFile(backupLocation, CryptoUtils
-                .getAppropriateFilename(sourceMetadata.apkName, sourceMetadata.tarType))};
+                .getAppropriateFilename(sourceMetadata.apkName, sourceMetadata.crypto))};
         // Decrypt APK file if needed
         if (!crypto.decrypt(baseApkFiles)) {
             throw new BackupException("Failed to decrypt " + Arrays.toString(baseApkFiles));

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppDetailsActivity.java
Patch:
@@ -92,7 +92,7 @@ protected void onAuthenticated(Bundle savedInstanceState) {
                     // Load tabs for the first time
                     for (int i = 0; i < mTabTitleIds.length(); ++i) model.load(i);
                     // Set title
-                    ApplicationInfo applicationInfo = model.getPackageInfo().applicationInfo;
+                    ApplicationInfo applicationInfo = packageInfo.applicationInfo;
                     // Set title as the package label
                     setTitle(applicationInfo.loadLabel(getPackageManager()));
                     // Set subtitle as the user name if more than one user exists

File: app/src/main/java/io/github/muntashirakon/AppManager/crypto/AuthenticationActivity.java
Patch:
@@ -60,7 +60,7 @@ private void handleModeOfOps() {
         // Set mode of operation
         new Thread(() -> {
             try {
-                RunnerUtils.setModeOfOps(this);
+                RunnerUtils.setModeOfOps(this, false);
                 AppManager.setIsAuthenticated(true);
                 setResult(RESULT_OK);
             } finally {

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/MainPreferences.java
Patch:
@@ -194,7 +194,7 @@ public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {
                     .setPositiveButton(R.string.apply, (dialog, which) -> {
                         AppPref.set(AppPref.PrefKey.PREF_MODE_OF_OPS_STR, currentMode);
                         mode.setSummary(modes[MODE_NAMES.indexOf(currentMode)]);
-                        new Thread(() -> RunnerUtils.setModeOfOps(activity)).start();
+                        new Thread(() -> RunnerUtils.setModeOfOps(activity, true)).start();
                     })
                     .setNegativeButton(R.string.cancel, null)
                     .show();

File: app/src/test/java/io/github/muntashirakon/AppManager/rules/compontents/ComponentUtilsTest.java
Patch:
@@ -7,19 +7,22 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.HashMap;
 
+import io.github.muntashirakon.AppManager.TestApplication;
 import io.github.muntashirakon.AppManager.rules.RuleType;
 import io.github.muntashirakon.io.ProxyFile;
 
 import static org.junit.Assert.assertEquals;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(application = TestApplication.class)
 public class ComponentUtilsTest {
     private final ClassLoader classLoader = getClass().getClassLoader();
 

File: app/src/main/java/io/github/muntashirakon/AppManager/details/info/AppInfoFragment.java
Patch:
@@ -864,7 +864,7 @@ private void setHorizontalActions() {
                             PackageManagerCompat.setApplicationEnabledSetting(mPackageName,
                                     PackageManager.COMPONENT_ENABLED_STATE_DISABLED_USER,
                                     0, mainModel.getUserHandle());
-                        } catch (RemoteException e) {
+                        } catch (RemoteException | SecurityException e) {
                             Log.e(TAG, e);
                             displayLongToast(R.string.failed_to_disable, mPackageLabel);
                         }
@@ -921,7 +921,7 @@ private void setHorizontalActions() {
                             PackageManagerCompat.setApplicationEnabledSetting(mPackageName,
                                     PackageManager.COMPONENT_ENABLED_STATE_ENABLED, 0,
                                     mainModel.getUserHandle());
-                        } catch (RemoteException e) {
+                        } catch (RemoteException | SecurityException e) {
                             Log.e(TAG, e);
                             displayLongToast(R.string.failed_to_enable, mPackageLabel);
                         }

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppDetailsViewModel.java
Patch:
@@ -885,11 +885,12 @@ private LiveData<List<AppDetailsItem>> getAppInfo() {
 
     @WorkerThread
     private void loadAppInfo() {
-        AppDetailsItem appDetailsItem = new AppDetailsItem(packageInfo);
-        if (getPackageInfo() == null) {
+        getPackageInfo();
+        if (packageInfo == null) {
             appInfo.postValue(null);
             return;
         }
+        AppDetailsItem appDetailsItem = new AppDetailsItem(packageInfo);
         appDetailsItem.name = packageName;
         List<AppDetailsItem> appDetailsItems = Collections.singletonList(appDetailsItem);
         appInfo.postValue(appDetailsItems);

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/PackageUtils.java
Patch:
@@ -335,6 +335,7 @@ private static String[] getPackageNamesFromApps(@NonNull List<App> apps) {
         return packages.toArray(new String[0]);
     }
 
+    @WorkerThread
     @Nullable
     public static PackageSizeInfo getPackageSizeInfo(Context context, String packageName, int userHandle, UUID storageUuid) {
         AtomicReference<PackageSizeInfo> packageSizeInfo = new AtomicReference<>();
@@ -365,7 +366,7 @@ public void onGetStatsCompleted(final PackageStats pStats, boolean succeeded) {
                 String uuidString = (String) getPackageSizeInfo.invoke(null, storageUuid);
                 StorageStats storageStats = storageStatsManager.queryStatsForPackage(uuidString, packageName,
                         userHandle, context.getPackageName());
-                packageSizeInfo.set(new PackageSizeInfo(packageName, storageStats));
+                packageSizeInfo.set(new PackageSizeInfo(packageName, storageStats, userHandle));
             } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | RemoteException e) {
                 Log.e("PackageUtils", e);
             }

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/installer/PackageInstallerActivity.java
Patch:
@@ -26,6 +26,7 @@
 
 import com.google.android.material.dialog.MaterialAlertDialogBuilder;
 
+import java.io.File;
 import java.util.List;
 import java.util.concurrent.atomic.AtomicInteger;
 
@@ -298,7 +299,7 @@ public void triggerInstall() {
             triggerCancel();
             return;
         }
-        if ((info.flags & ApplicationInfo.FLAG_IS_DATA_ONLY) == 0) {
+        if (!new File(info.publicSourceDir).exists()) {
             // Cannot reinstall an uninstalled app
             UIUtils.displayLongToast(R.string.app_signing_signature_mismatch_for_data_only_app);
             triggerCancel();

File: app/src/main/java/io/github/muntashirakon/AppManager/runner/RunnerUtils.java
Patch:
@@ -188,7 +188,7 @@ public static void setModeOfOps(FragmentActivity activity) {
                     RunnerUtils.autoDetectRootOrAdb();
                     return;
                 case Runner.MODE_ROOT:
-                    if (isRootAvailable()) {
+                    if (!isRootAvailable()) {
                         throw new Exception("Root not available.");
                     }
                     AppPref.set(AppPref.PrefKey.PREF_ROOT_MODE_ENABLED_BOOL, true);

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/BackupOp.java
Patch:
@@ -324,7 +324,7 @@ private void backupKeyStore() throws BackupException {  // Called only when the
     }
 
     private void backupExtras() throws BackupException {
-        PseudoRules rules = new PseudoRules(AppManager.getContext(), packageName, userHandle);
+        PseudoRules rules = new PseudoRules(packageName, userHandle);
         File miscFile = backupFile.getMiscFile(CryptoUtils.MODE_NO_ENCRYPTION);
         // Backup permissions
         @NonNull String[] permissions = ArrayUtils.defeatNullable(packageInfo.requestedPermissions);

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppDetailsViewModel.java
Patch:
@@ -60,7 +60,7 @@
 import io.github.muntashirakon.AppManager.details.struct.AppDetailsItem;
 import io.github.muntashirakon.AppManager.details.struct.AppDetailsPermissionItem;
 import io.github.muntashirakon.AppManager.logs.Log;
-import io.github.muntashirakon.AppManager.rules.RulesStorageManager;
+import io.github.muntashirakon.AppManager.rules.RuleType;
 import io.github.muntashirakon.AppManager.rules.compontents.ComponentUtils;
 import io.github.muntashirakon.AppManager.rules.compontents.ComponentsBlocker;
 import io.github.muntashirakon.AppManager.rules.struct.AppOpRule;
@@ -299,7 +299,7 @@ public void setRuleApplicationStatus() {
 
     @WorkerThread
     @GuardedBy("blockerLocker")
-    public void updateRulesForComponent(String componentName, RulesStorageManager.Type type) {
+    public void updateRulesForComponent(String componentName, RuleType type) {
         if (isExternalApk) return;
         synchronized (blockerLocker) {
             waitForBlockerOrExit();

File: app/src/main/java/io/github/muntashirakon/AppManager/details/info/AppInfoViewModel.java
Patch:
@@ -30,7 +30,7 @@
 import io.github.muntashirakon.AppManager.apk.ApkFile;
 import io.github.muntashirakon.AppManager.backup.MetadataManager;
 import io.github.muntashirakon.AppManager.details.AppDetailsViewModel;
-import io.github.muntashirakon.AppManager.rules.RulesStorageManager;
+import io.github.muntashirakon.AppManager.rules.RuleType;
 import io.github.muntashirakon.AppManager.rules.compontents.ComponentUtils;
 import io.github.muntashirakon.AppManager.rules.struct.ComponentRule;
 import io.github.muntashirakon.AppManager.runner.Runner;
@@ -101,7 +101,7 @@ public void loadTagCloud() {
         String packageName = packageInfo.packageName;
         ApplicationInfo applicationInfo = packageInfo.applicationInfo;
         TagCloud tagCloud = new TagCloud();
-        HashMap<String, RulesStorageManager.Type> trackerComponents = ComponentUtils.getTrackerComponentsForPackageInfo(packageInfo);
+        HashMap<String, RuleType> trackerComponents = ComponentUtils.getTrackerComponentsForPackageInfo(packageInfo);
         tagCloud.trackerComponents = new ArrayList<>(trackerComponents.size());
         for (String component : trackerComponents.keySet()) {
             tagCloud.trackerComponents.add(new ComponentRule(packageName, component, trackerComponents.get(component),

File: app/src/main/java/io/github/muntashirakon/AppManager/rules/RulesExporter.java
Patch:
@@ -28,11 +28,11 @@ public class RulesExporter {
     @Nullable
     private List<String> mPackagesToExport;
     @NonNull
-    private final List<RulesStorageManager.Type> mTypesToExport;
+    private final List<RuleType> mTypesToExport;
     @NonNull
     private final int[] userHandles;
 
-    public RulesExporter(@NonNull List<RulesStorageManager.Type> typesToExport, @Nullable List<String> packagesToExport, @NonNull int[] userHandles) {
+    public RulesExporter(@NonNull List<RuleType> typesToExport, @Nullable List<String> packagesToExport, @NonNull int[] userHandles) {
         mContext = AppManager.getContext();
         mPackagesToExport = packagesToExport;
         mTypesToExport = typesToExport;

File: app/src/main/java/io/github/muntashirakon/AppManager/rules/RulesImporter.java
Patch:
@@ -30,21 +30,21 @@
  * Format: <code>package_name component_name type mode|is_applied|is_granted</code>
  *
  * @see RulesExporter
- * @see RulesStorageManager.Type
+ * @see RuleType
  */
 public class RulesImporter implements Closeable {
     @NonNull
     private final Context mContext;
     @NonNull
     private final HashMap<String, ComponentsBlocker>[] mComponentsBlockers;
     @NonNull
-    private final List<RulesStorageManager.Type> mTypesToImport;
+    private final List<RuleType> mTypesToImport;
     @Nullable
     private List<String> mPackagesToImport;
     @NonNull
     private final int[] userHandles;
 
-    public RulesImporter(@NonNull List<RulesStorageManager.Type> typesToImport, @NonNull int[] userHandles) {
+    public RulesImporter(@NonNull List<RuleType> typesToImport, @NonNull int[] userHandles) {
         mContext = AppManager.getContext();
         if (userHandles.length <= 0) {
             throw new IllegalArgumentException("Input must contain one or more user handles");

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/UIUtils.java
Patch:
@@ -61,9 +61,10 @@ public static Spannable getHighlightedText(@NonNull String text, @NonNull String
                                                int color) {
         Spannable spannable = sSpannableFactory.newSpannable(text);
         int start = text.toLowerCase(Locale.ROOT).indexOf(constraint);
+        if (start == -1) return spannable;
         int end = start + constraint.length();
-        spannable.setSpan(new BackgroundColorSpan(color), start, end,
-                Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
+        if (end > text.length()) return spannable;
+        spannable.setSpan(new BackgroundColorSpan(color), start, end, Spannable.SPAN_INCLUSIVE_EXCLUSIVE);
         return spannable;
     }
 

File: app/src/main/java/io/github/muntashirakon/AppManager/crypto/ks/CompatUtil.java
Patch:
@@ -90,7 +90,7 @@ public class CompatUtil {
      *
      * @param context the context holding the application shared preferences
      */
-    @SuppressWarnings("deprecation")
+    @SuppressWarnings({"deprecation", "InlinedApi"})
     private static synchronized SecretKeyAndVersion getAesGcmLocalProtectionKey(@NonNull Context context)
             throws KeyStoreException, CertificateException, NoSuchAlgorithmException, IOException,
             NoSuchProviderException, InvalidAlgorithmParameterException, NoSuchPaddingException,
@@ -122,8 +122,7 @@ private static synchronized SecretKeyAndVersion getAesGcmLocalProtectionKey(@Non
                         Log.i(TAG, "Generating AES key with keystore");
                         final KeyGenerator generator = KeyGenerator.getInstance(KeyProperties.KEY_ALGORITHM_AES,
                                 ANDROID_KEY_STORE_PROVIDER);
-                        generator.init(
-                                new KeyGenParameterSpec.Builder(AES_LOCAL_PROTECTION_KEY_ALIAS,
+                        generator.init(new KeyGenParameterSpec.Builder(AES_LOCAL_PROTECTION_KEY_ALIAS,
                                         KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT)
                                         .setBlockModes(KeyProperties.BLOCK_MODE_GCM)
                                         .setKeySize(AES_GCM_KEY_SIZE_IN_BITS)

File: app/src/main/java/io/github/muntashirakon/AppManager/details/info/AppInfoFragment.java
Patch:
@@ -1350,14 +1350,14 @@ private void setStorageAndCache(AppInfoViewModel.AppInfo appInfo) {
                 }));
             }
         }
-        if (!Utils.hasUsageStatsPermission(mActivity)) {
+        if (!PermissionUtils.hasUsageStatsPermission(mActivity)) {
             runOnUiThread(() -> new MaterialAlertDialogBuilder(mActivity)
                     .setTitle(R.string.grant_usage_access)
                     .setMessage(R.string.grant_usage_acess_message)
                     .setPositiveButton(R.string.go, (dialog, which) -> {
                         try {
                             activityLauncher.launch(new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS), result -> {
-                                if (Utils.hasUsageStatsPermission(mActivity)) {
+                                if (PermissionUtils.hasUsageStatsPermission(mActivity)) {
                                     FeatureController.getInstance().modifyState(FeatureController
                                             .FEAT_USAGE_ACCESS, true);
                                     // Reload app info

File: app/src/main/java/io/github/muntashirakon/AppManager/details/info/AppInfoViewModel.java
Patch:
@@ -64,7 +64,6 @@
 import io.github.muntashirakon.AppManager.utils.PackageUtils;
 import io.github.muntashirakon.AppManager.utils.PermissionUtils;
 import io.github.muntashirakon.AppManager.utils.SsaidSettings;
-import io.github.muntashirakon.AppManager.utils.Utils;
 import io.github.muntashirakon.io.ProxyFile;
 
 public class AppInfoViewModel extends AndroidViewModel {
@@ -252,7 +251,7 @@ public void loadAppInfo() {
                 e.printStackTrace();
             }
             // Set sizes
-            if (Utils.hasUsageStatsPermission(getApplication())) {
+            if (PermissionUtils.hasUsageStatsPermission(getApplication())) {
                 appInfo.sizeInfo = PackageUtils.getPackageSizeInfo(getApplication(), packageName, userHandle,
                         Build.VERSION.SDK_INT >= Build.VERSION_CODES.O ? applicationInfo.storageUuid : null);
             }

File: app/src/main/java/io/github/muntashirakon/AppManager/logcat/LogViewerActivity.java
Patch:
@@ -71,6 +71,7 @@
 import java.util.HashSet;
 import java.util.LinkedList;
 import java.util.List;
+import java.util.Locale;
 import java.util.Set;
 
 import io.github.muntashirakon.AppManager.AppManager;
@@ -400,7 +401,7 @@ private List<String> getSuggestionsForQuery(String query) {
         List<String> actualSuggestions = new ArrayList<>();
         if (query != null) {
             for (String suggestion : suggestions) {
-                if (suggestion.toLowerCase().startsWith(query.toLowerCase())) {
+                if (suggestion.toLowerCase(Locale.getDefault()).startsWith(query.toLowerCase(Locale.getDefault()))) {
                     actualSuggestions.add(suggestion);
                 }
             }

File: app/src/main/java/io/github/muntashirakon/AppManager/logcat/helper/BuildHelper.java
Patch:
@@ -24,6 +24,7 @@
 import java.lang.reflect.Field;
 import java.util.Arrays;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map.Entry;
 import java.util.SortedMap;
 import java.util.TreeMap;
@@ -61,7 +62,7 @@ private static void putKeyValue(@NonNull Class<?> clazz, String buildField,
         try {
             Field field = clazz.getField(buildField);
             Object value = field.get(null);
-            String key = clazz.getSimpleName().toLowerCase() + "." + buildField.toLowerCase();
+            String key = clazz.getSimpleName().toLowerCase(Locale.ROOT) + "." + buildField.toLowerCase(Locale.ROOT);
             keysToValues.put(key, String.valueOf(value));
         } catch (SecurityException | NoSuchFieldException | IllegalAccessException ignore) {
         }

File: app/src/main/java/io/github/muntashirakon/AppManager/types/PackageChangeReceiver.java
Patch:
@@ -88,6 +88,7 @@ public final void onReceive(Context context, @NonNull Intent intent) {
         args.putParcelable("intent", intent);
         msg.setData(args);
         receiverHandler.sendMessage(msg);
+        thread.quitSafely();
     }
 
     // Handler that receives messages from the thread

File: app/src/main/java/io/github/muntashirakon/AppManager/usage/AppUsageActivity.java
Patch:
@@ -182,7 +182,7 @@ public void onRefresh() {
 
     private void checkPermissions() {
         // Check permission
-        if (!Utils.hasUsageStatsPermission(this)) promptForUsageStatsPermission();
+        if (!PermissionUtils.hasUsageStatsPermission(this)) promptForUsageStatsPermission();
         else getAppUsage();
         // Grant optional READ_PHONE_STATE permission
         if (!PermissionUtils.hasPermission(this, Manifest.permission.READ_PHONE_STATE) &&

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/StoragePermission.java
Patch:
@@ -52,6 +52,7 @@ private StoragePermission(@NonNull ActivityResultCaller caller) {
         }
     }
 
+    @SuppressWarnings("InlinedApi")
     public void request(@Nullable StoragePermissionCallback callback) {
         if (PermissionUtils.hasStoragePermission(AppManager.getContext())) {
             if (callback != null) callback.onResult(true);

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/UIUtils.java
Patch:
@@ -17,6 +17,7 @@
 
 package io.github.muntashirakon.AppManager.utils;
 
+import android.annotation.SuppressLint;
 import android.annotation.TargetApi;
 import android.content.Context;
 import android.graphics.Typeface;
@@ -182,6 +183,7 @@ public static int spToPx(@NonNull Context context, float sp) {
     @NonNull
     public static View getDialogTitle(@NonNull FragmentActivity activity, @NonNull CharSequence title,
                                       @Nullable Drawable drawable, @Nullable CharSequence subtitle) {
+        @SuppressLint("InflateParams")
         View appLabelWithVersionView = activity.getLayoutInflater().inflate(R.layout.dialog_title_with_icon, null);
         ImageView iv = appLabelWithVersionView.findViewById(R.id.icon);
         if (drawable != null) {

File: app/src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java
Patch:
@@ -25,6 +25,7 @@
 import java.nio.ByteOrder;
 import java.nio.channels.ClosedChannelException;
 import java.nio.channels.WritableByteChannel;
+import java.util.Locale;
 import java.util.concurrent.atomic.AtomicBoolean;
 
 /**
@@ -93,7 +94,7 @@ private void writeBlock() throws IOException {
         final int i = out.write(buffer);
         final boolean hasRemaining = buffer.hasRemaining();
         if (i != blockSize || hasRemaining) {
-            final String msg = String.format("Failed to write %,d bytes atomically. Only wrote  %,d", blockSize, i);
+            final String msg = String.format(Locale.ROOT, "Failed to write %,d bytes atomically. Only wrote  %,d", blockSize, i);
             throw new IOException(msg);
         }
         buffer.clear();

File: hiddenapi/src/main/java/android/net/NetworkPolicyManager.java
Patch:
@@ -24,13 +24,13 @@ public class NetworkPolicyManager {
     /**
      * No specific network policy, use system default.
      */
-    public static final int POLICY_NONE = 0x0;
+    public static final int POLICY_NONE = 0;
     /**
      * Reject network usage on metered networks when application in background.
      */
-    public static final int POLICY_REJECT_METERED_BACKGROUND = 0x1;
+    public static final int POLICY_REJECT_METERED_BACKGROUND = 1;
     /**
      * Allow metered network use in the background even when in data usage save mode.
      */
-    public static final int POLICY_ALLOW_METERED_BACKGROUND = 0x4;
+    public static final int POLICY_ALLOW_METERED_BACKGROUND = 1 << 2;
 }
\ No newline at end of file

File: libapkparser/src/main/java/net/dongliu/apk/parser/ByteArrayApkFile.java
Patch:
@@ -10,6 +10,7 @@
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Locale;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipInputStream;
 
@@ -35,7 +36,7 @@ protected List<CertificateFile> getAllCertificateData() throws IOException {
             ZipEntry entry;
             while ((entry = zis.getNextEntry()) != null) {
                 String name = entry.getName();
-                if (name.toUpperCase().endsWith(".RSA") || name.toUpperCase().endsWith(".DSA")) {
+                if (name.toUpperCase(Locale.ROOT).endsWith(".RSA") || name.toUpperCase(Locale.ROOT).endsWith(".DSA")) {
                     list.add(new CertificateFile(name, Inputs.readAll(zis)));
                 }
             }

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/BackupOp.java
Patch:
@@ -302,7 +302,7 @@ private void backupKeyStore() throws BackupException {  // Called only when the
             backedUpKeyStoreFiles = TarUtils.create(metadata.tarType, cachePath, keyStoreSavePath,
                     cachedKeyStoreFileNames.toArray(new String[0]), null, null, false).toArray(new File[0]);
         } catch (Throwable th) {
-            throw new BackupException("Could not backup KeyStore item.");
+            throw new BackupException("Could not backup KeyStore item.", th);
         }
         // Remove cache
         for (String name : cachedKeyStoreFileNames) {

File: app/src/main/java/io/github/muntashirakon/AppManager/main/MainActivity.java
Patch:
@@ -181,6 +181,7 @@ protected void onAuthenticated(Bundle savedInstanceState) {
         mLayoutParamsTypical.setMargins(0, margin, 0, 0);
 
         mAdapter = new MainRecyclerAdapter(MainActivity.this);
+        mAdapter.setHasStableIds(true);
         recyclerView.setHasFixedSize(true);
         recyclerView.setOverScrollMode(RecyclerView.OVER_SCROLL_NEVER);
         recyclerView.setLayoutManager(new LinearLayoutManager(this));

File: app/src/main/java/io/github/muntashirakon/AppManager/adb/LineReader.java
Patch:
@@ -17,8 +17,6 @@
 
 package io.github.muntashirakon.AppManager.adb;
 
-import com.tananaev.adblib.AdbStream;
-
 import java.io.Closeable;
 import java.io.IOException;
 import java.nio.ByteBuffer;

File: app/src/main/java/io/github/muntashirakon/AppManager/runner/Runner.java
Patch:
@@ -35,14 +35,15 @@
 public abstract class Runner {
     public static final String TAG = "Runner";
 
-    @StringDef({MODE_AUTO, MODE_ROOT, MODE_ADB, MODE_NO_ROOT})
+    @StringDef({MODE_AUTO, MODE_ROOT, MODE_ADB_OVER_TCP, MODE_ADB_WIFI, MODE_NO_ROOT})
     @Retention(RetentionPolicy.SOURCE)
     public @interface Mode {
     }
 
     public static final String MODE_AUTO = "auto";
     public static final String MODE_ROOT = "root";
-    public static final String MODE_ADB = "adb";
+    public static final String MODE_ADB_OVER_TCP = "adb_tcp";
+    public static final String MODE_ADB_WIFI = "adb_wifi";
     public static final String MODE_NO_ROOT = "no-root";
 
     public static class Result {

File: app/src/main/java/io/github/muntashirakon/AppManager/servermanager/LocalServer.java
Patch:
@@ -48,7 +48,7 @@ public class LocalServer {
     private static IAMService amService;
 
     @GuardedBy("lockObject")
-    public static LocalServer getInstance() throws RemoteException {
+    public static LocalServer getInstance() throws RemoteException, IOException {
         // Non-null check must be done outside the synchronised block to prevent deadlock on ADB over TCP mode.
         if (localServer != null) return localServer;
         synchronized (lockObject) {

File: app/src/main/java/io/github/muntashirakon/AppManager/adb/AdbConnection.java
Patch:
@@ -24,6 +24,7 @@
 
 import androidx.annotation.GuardedBy;
 import androidx.annotation.NonNull;
+import androidx.annotation.WorkerThread;
 
 import java.io.Closeable;
 import java.io.IOException;
@@ -143,6 +144,7 @@ public class AdbConnection implements Closeable {
     /**
      * Internal constructor to initialize some internal state
      */
+    @WorkerThread
     private AdbConnection(@NonNull String host, int port, @NonNull KeyPair keyPair) throws IOException {
         this.host = host;
         this.port = port;
@@ -166,6 +168,7 @@ private AdbConnection(@NonNull String host, int port, @NonNull KeyPair keyPair)
      * @return A new AdbConnection object.
      * @throws IOException If there is a socket error
      */
+    @WorkerThread
     @NonNull
     public static AdbConnection create(@NonNull String host, int port, @NonNull KeyPair keyPair) throws IOException {
         return new AdbConnection(host, port, keyPair);

File: app/src/main/java/io/github/muntashirakon/AppManager/crypto/AuthenticationActivity.java
Patch:
@@ -75,7 +75,7 @@ private void handleModeOfOps() {
         // Set mode of operation
         new Thread(() -> {
             try {
-                RunnerUtils.setModeOfOps();
+                RunnerUtils.setModeOfOps(this);
                 AppManager.setIsAuthenticated(true);
                 setResult(RESULT_OK);
             } finally {

File: app/src/main/java/io/github/muntashirakon/AppManager/runner/Runner.java
Patch:
@@ -35,14 +35,15 @@
 public abstract class Runner {
     public static final String TAG = "Runner";
 
-    @StringDef({MODE_AUTO, MODE_ROOT, MODE_ADB, MODE_NO_ROOT})
+    @StringDef({MODE_AUTO, MODE_ROOT, MODE_ADB_OVER_TCP, MODE_ADB_WIFI, MODE_NO_ROOT})
     @Retention(RetentionPolicy.SOURCE)
     public @interface Mode {
     }
 
     public static final String MODE_AUTO = "auto";
     public static final String MODE_ROOT = "root";
-    public static final String MODE_ADB = "adb";
+    public static final String MODE_ADB_OVER_TCP = "adb_tcp";
+    public static final String MODE_ADB_WIFI = "adb_wifi";
     public static final String MODE_NO_ROOT = "no-root";
 
     public static class Result {

File: app/src/main/java/io/github/muntashirakon/AppManager/servermanager/LocalServer.java
Patch:
@@ -48,7 +48,7 @@ public class LocalServer {
     private static IAMService amService;
 
     @GuardedBy("lockObject")
-    public static LocalServer getInstance() throws RemoteException {
+    public static LocalServer getInstance() throws RemoteException, IOException {
         // Non-null check must be done outside the synchronised block to prevent deadlock on ADB over TCP mode.
         if (localServer != null) return localServer;
         synchronized (lockObject) {

File: app/src/main/java/io/github/muntashirakon/AppManager/adb/LineReader.java
Patch:
@@ -17,8 +17,6 @@
 
 package io.github.muntashirakon.AppManager.adb;
 
-import com.tananaev.adblib.AdbStream;
-
 import java.io.Closeable;
 import java.io.IOException;
 import java.nio.ByteBuffer;

File: app/src/main/java/io/github/muntashirakon/AppManager/runner/RunnerUtils.java
Patch:
@@ -25,8 +25,8 @@
 
 import androidx.annotation.NonNull;
 import androidx.annotation.WorkerThread;
-import com.tananaev.adblib.AdbConnection;
 import io.github.muntashirakon.AppManager.R;
+import io.github.muntashirakon.AppManager.adb.AdbConnection;
 import io.github.muntashirakon.AppManager.adb.AdbConnectionManager;
 import io.github.muntashirakon.AppManager.logs.Log;
 import io.github.muntashirakon.AppManager.servermanager.LocalServer;

File: app/src/main/java/io/github/muntashirakon/AppManager/servermanager/LocalServerManager.java
Patch:
@@ -20,17 +20,17 @@
 import android.os.SystemClock;
 import android.text.TextUtils;
 
-import com.tananaev.adblib.AdbConnection;
-import com.tananaev.adblib.AdbStream;
-
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.net.Socket;
 
 import androidx.annotation.NonNull;
 import androidx.annotation.WorkerThread;
+
+import io.github.muntashirakon.AppManager.adb.AdbConnection;
 import io.github.muntashirakon.AppManager.adb.AdbConnectionManager;
+import io.github.muntashirakon.AppManager.adb.AdbStream;
 import io.github.muntashirakon.AppManager.adb.LineReader;
 import io.github.muntashirakon.AppManager.logs.Log;
 import io.github.muntashirakon.AppManager.runner.Runner;

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/crypto/RSACryptoSelectionDialogFragment.java
Patch:
@@ -89,7 +89,7 @@ public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {
         alertDialog.setOnShowListener(dialog -> {
             AlertDialog dialog1 = (AlertDialog) dialog;
             Button defaultOrOkButton = dialog1.getButton(AlertDialog.BUTTON_POSITIVE);
-            Button importButton = dialog1.getButton(AlertDialog.BUTTON_POSITIVE);
+            Button importButton = dialog1.getButton(AlertDialog.BUTTON_NEGATIVE);
             Button generateButton = dialog1.getButton(AlertDialog.BUTTON_NEUTRAL);
             importButton.setOnClickListener(v -> {
                 KeyPairImporterDialogFragment fragment = new KeyPairImporterDialogFragment();

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/crypto/RSACryptoSelectionDialogFragment.java
Patch:
@@ -21,7 +21,6 @@
 import android.os.Bundle;
 import android.widget.Button;
 
-import androidx.annotation.AnyThread;
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.annotation.UiThread;
@@ -77,8 +76,8 @@ public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {
                 .setNegativeButton(R.string.pref_import, null)
                 .setNeutralButton(R.string.generate_key, null);
         new Thread(() -> {
-            CharSequence info = getSigningInfo();
             if (isDetached()) return;
+            CharSequence info = getSigningInfo();
             activity.runOnUiThread(() -> builder.setMessage(info));
         }).start();
         if (allowDefault) {
@@ -142,7 +141,7 @@ private CharSequence getSigningInfo() {
         return getString(allowDefault ? R.string.default_key_used : R.string.key_not_set);
     }
 
-    @AnyThread
+    @WorkerThread
     private void addKeyPair(@Nullable char[] password, @Nullable KeyPair keyPair) {
         try {
             if (keyPair == null) {
@@ -154,6 +153,7 @@ private void addKeyPair(@Nullable char[] password, @Nullable KeyPair keyPair) {
             if (isDetached()) return;
             activity.runOnUiThread(() -> UIUtils.displayShortToast(R.string.done));
             keyPairUpdated();
+            if (isDetached()) return;
             CharSequence info = getSigningInfo();
             activity.runOnUiThread(() -> builder.setMessage(info));
         } catch (Exception e) {

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/InstallerPreferences.java
Patch:
@@ -143,5 +143,8 @@ public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {
         // Sign apk before install
         ((SwitchPreferenceCompat) Objects.requireNonNull(findPreference("installer_sign_apk")))
                 .setChecked((boolean) AppPref.get(AppPref.PrefKey.PREF_INSTALLER_SIGN_APK_BOOL));
+        // Display changes
+        ((SwitchPreferenceCompat) Objects.requireNonNull(findPreference("installer_display_changes")))
+                .setChecked((boolean) AppPref.get(AppPref.PrefKey.PREF_INSTALLER_DISPLAY_CHANGES_BOOL));
     }
 }

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/AppPref.java
Patch:
@@ -78,6 +78,7 @@ public enum PrefKey {
         PREF_ENCRYPTION_STR,
         PREF_GLOBAL_BLOCKING_ENABLED_BOOL,
 
+        PREF_INSTALLER_DISPLAY_CHANGES_BOOL,
         PREF_INSTALLER_DISPLAY_USERS_BOOL,
         PREF_INSTALLER_INSTALL_LOCATION_INT,
         PREF_INSTALLER_INSTALLER_APP_STR,
@@ -368,6 +369,7 @@ public Object getDefaultValue(@NonNull PrefKey key) {
             case PREF_APP_OP_SHOW_DEFAULT_BOOL:
             case PREF_SHOW_DISCLAIMER_BOOL:
             case PREF_LOG_VIEWER_SHOW_PID_TID_TIMESTAMP_BOOL:
+            case PREF_INSTALLER_DISPLAY_CHANGES_BOOL:
                 return true;
             case PREF_LAST_VERSION_CODE_LONG:
                 return 0L;

File: app/src/main/java/io/github/muntashirakon/AppManager/logcat/LogViewerActivity.java
Patch:
@@ -767,7 +767,8 @@ private void displayDeleteSavedLogsDialog() {
                     new MaterialAlertDialogBuilder(this)
                             .setTitle(R.string.delete_saved_log)
                             .setCancelable(true)
-                            .setMessage(getResources().getQuantityString(R.plurals.are_you_sure, deleteCount, deleteCount))
+                            .setMessage(getResources().getQuantityString(R.plurals.file_deletion_confirmation,
+                                    deleteCount, deleteCount))
                             .setPositiveButton(android.R.string.ok, (dialog1, which1) -> {
                                 for (File selectedFile : selectedFiles) {
                                     SaveLogHelper.deleteLogIfExists(selectedFile.getName());

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/BackupFlags.java
Patch:
@@ -259,6 +259,6 @@ private static int getSanitizedFlags(int flags) {
         if (Users.getUsersHandles().length == 1) {
             flags &= ~BACKUP_CUSTOM_USERS;
         }
-        return flags;
+        return flags | BACKUP_EXCLUDE_CACHE;
     }
 }

File: app/src/main/java/io/github/muntashirakon/AppManager/logs/Log.java
Patch:
@@ -66,7 +66,7 @@ private Log() {
         try {
             writer = new PrintWriter(new BufferedWriter(new FileWriter(LOG_FILE)));
         } catch (IOException e) {
-            throw new RuntimeException("Could not write to log file.");
+            throw new RuntimeException("Could not write to log file.", e);
         }
     }
 

File: app/src/main/java/io/github/muntashirakon/AppManager/main/MainRecyclerAdapter.java
Patch:
@@ -18,6 +18,7 @@
 package io.github.muntashirakon.AppManager.main;
 
 import android.Manifest;
+import android.annotation.SuppressLint;
 import android.app.usage.UsageStatsManager;
 import android.content.Intent;
 import android.content.pm.ApplicationInfo;
@@ -165,6 +166,7 @@ public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
             if (mActivity.mModel.getSelectedPackages().size() == 0) {
                 if (!item.isInstalled) {
                     try {
+                        @SuppressLint("WrongConstant")
                         ApplicationInfo info = mPackageManager.getApplicationInfo(item.packageName, PackageUtils.flagMatchUninstalled);
                         if (info.publicSourceDir != null) {
                             Intent intent = new Intent(mActivity, PackageInstallerActivity.class);

File: app/src/main/java/io/github/muntashirakon/AppManager/profiles/AppsProfileActivity.java
Patch:
@@ -184,6 +184,7 @@ this, getString(isSystem ? R.string.system
                                                 : R.string.user)))));
                     }
                     runOnUiThread(() -> {
+                        if (isDestroyed()) return;
                         progressIndicator.hide();
                         new SearchableMultiChoiceDialogBuilder<>(this, items, itemNames)
                                 .setSelections(model.getCurrentPackages())

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/ApkUtils.java
Patch:
@@ -124,7 +124,7 @@ public static ByteBuffer getManifestFromApk(File apkFile) throws IOException {
                 }
                 try (InputStream zipInputStream = zipFile.getInputStream(zipEntry)) {
                     ByteArrayOutputStream buffer = new ByteArrayOutputStream();
-                    byte[] buf = new byte[1024 * 4];
+                    byte[] buf = new byte[IOUtils.DEFAULT_BUFFER_SIZE];
                     int n;
                     while (-1 != (n = zipInputStream.read(buf))) {
                         buffer.write(buf, 0, n);
@@ -145,7 +145,7 @@ public static ByteBuffer getManifestFromApk(InputStream apkInputStream) throws I
                     continue;
                 }
                 ByteArrayOutputStream buffer = new ByteArrayOutputStream();
-                byte[] buf = new byte[1024 * 4];
+                byte[] buf = new byte[IOUtils.DEFAULT_BUFFER_SIZE];
                 int n;
                 while (-1 != (n = zipInputStream.read(buf))) {
                     buffer.write(buf, 0, n);

File: app/src/main/java/io/github/muntashirakon/AppManager/servermanager/AssetsUtils.java
Patch:
@@ -55,7 +55,7 @@ public static void copyFile(@NonNull Context context, String fileName, File dest
 
             try (FileInputStream open = openFd.createInputStream();
                  FileOutputStream fos = new FileOutputStream(destFile)) {
-                byte[] buff = new byte[1024 * 16];
+                byte[] buff = new byte[IOUtils.DEFAULT_BUFFER_SIZE];
                 int len;
                 while ((len = open.read(buff)) != -1) {
                     fos.write(buff, 0, len);

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/DigestUtils.java
Patch:
@@ -98,7 +98,7 @@ public static byte[] getDigest(@Algorithm String algo, @NonNull byte[] bytes) {
     public static byte[] getDigest(@Algorithm String algo, @NonNull InputStream stream) {
         if (CRC32.equals(algo)) {
             java.util.zip.CRC32 crc32 = new CRC32();
-            byte[] buffer = new byte[1024 * 1024];
+            byte[] buffer = new byte[IOUtils.DEFAULT_BUFFER_SIZE];
             int read;
             try {
                 while ((read = stream.read(buffer)) > 0) {
@@ -111,7 +111,7 @@ public static byte[] getDigest(@Algorithm String algo, @NonNull InputStream stre
         try {
             MessageDigest messageDigest = MessageDigest.getInstance(algo);
             try (DigestInputStream digestInputStream = new DigestInputStream(stream, messageDigest)) {
-                byte[] buffer = new byte[1024 * 8];
+                byte[] buffer = new byte[IOUtils.DEFAULT_BUFFER_SIZE];
                 //noinspection StatementWithEmptyBody
                 while (digestInputStream.read(buffer) != -1) {
                 }

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/IOUtils.java
Patch:
@@ -64,6 +64,8 @@
 import io.github.muntashirakon.io.ProxyOutputStream;
 
 public final class IOUtils {
+    public static final int DEFAULT_BUFFER_SIZE = 1024 * 50;
+
     @AnyThread
     public static boolean isInputFileZip(@NonNull ContentResolver cr, Uri uri) throws IOException {
         int header;
@@ -144,8 +146,6 @@ public static long copy(InputStream inputStream, OutputStream outputStream) thro
         }
     }
 
-    private static final int DEFAULT_BUFFER_SIZE = 1024 * 4;
-
     @WorkerThread
     private static long copyLarge(@NonNull InputStream inputStream, OutputStream outputStream) throws IOException {
         byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];
@@ -551,7 +551,7 @@ public static long calculateBytesCrc32(byte[] bytes) throws IOException {
     public static long calculateCrc32(InputStream inputStream) throws IOException {
         try (InputStream in = inputStream) {
             CRC32 crc32 = new CRC32();
-            byte[] buffer = new byte[1024 * 1024];
+            byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];
             int read;
 
             while ((read = in.read(buffer)) > 0)

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/ParcelFileDescriptorUtil.java
Patch:
@@ -78,7 +78,7 @@ static class TransferThread extends Thread {
 
         @Override
         public void run() {
-            byte[] buf = new byte[4096];
+            byte[] buf = new byte[IOUtils.DEFAULT_BUFFER_SIZE];
             int len;
 
             try {

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/installer/PackageInstallerActivity.java
Patch:
@@ -271,7 +271,7 @@ public void triggerInstall() {
                     ApplicationInfo info = installedPackageInfo.applicationInfo;  // Installed package info is never null here.
                     if ((info.flags & ApplicationInfo.FLAG_SYSTEM) != 0) {
                         Toast.makeText(PackageInstallerActivity.this,
-                                R.string.signature_mismatch_for_system_apps,
+                                R.string.app_signing_signature_mismatch_for_system_apps,
                                 Toast.LENGTH_SHORT).show();
                         return;
                     }
@@ -280,7 +280,7 @@ public void triggerInstall() {
                             .append(UIUtils.getItalicString(getString(R.string.app_data_will_be_lost)))
                             .append("\n\n");
                     int start = builder.length();
-                    builder.append(getText(R.string.install_without_data_loss));
+                    builder.append(getText(R.string.app_signing_install_without_data_loss));
                     builder.setSpan(new RelativeSizeSpan(0.8f), start, builder.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
 
                     new MaterialAlertDialogBuilder(PackageInstallerActivity.this)

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppDetailsFragment.java
Patch:
@@ -571,7 +571,7 @@ private int getNotFoundString(@Property int index) {
             case CONFIGURATIONS:
                 return R.string.no_configurations;
             case SIGNATURES:
-                return R.string.no_signatures;
+                return R.string.app_signing_no_signatures;
             case SHARED_LIBRARIES:
                 return R.string.no_shared_libs;
             case ACTIVITIES:

File: app/src/main/java/io/github/muntashirakon/AppManager/details/info/AppInfoFragment.java
Patch:
@@ -821,7 +821,7 @@ private void setHorizontalActions() {
                 if (AppPref.isRootOrAdbEnabled()) {
                     ScrollableDialogBuilder builder = new ScrollableDialogBuilder(mActivity,
                             isSystemApp ? R.string.uninstall_system_app_message : R.string.uninstall_app_message)
-                            .setCheckboxLabel(R.string.keep_data_and_signatures)
+                            .setCheckboxLabel(R.string.keep_data_and_app_signing_signatures)
                             .setTitle(mPackageLabel)
                             .setPositiveButton(R.string.uninstall, (dialog, which, keepData) -> executor.submit(() -> {
                                 try {

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/ApkSigningPreferences.java
Patch:
@@ -52,7 +52,7 @@ public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {
         final SigSchemes sigSchemeFlags = SigSchemes.fromPref();
         sigSchemes.setOnPreferenceClickListener(preference -> {
             new MaterialAlertDialogBuilder(activity)
-                    .setTitle(R.string.signature_schemes)
+                    .setTitle(R.string.app_signing_signature_schemes)
                     .setMultiChoiceItems(R.array.sig_schemes, sigSchemeFlags.flagsToCheckedItems(), (dialog, which, isChecked) -> {
                         if (isChecked) sigSchemeFlags.addFlag(which);
                         else sigSchemeFlags.removeFlag(which);

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/PackageUtils.java
Patch:
@@ -824,13 +824,13 @@ public static Spannable getSigningCertificateInfo(@NonNull Context ctx, @Nullabl
             builder.append(getPrimaryText(ctx, digest.first + ": ")).append(digest.second).append("\n");
         }
         // Signature
-        builder.append(getTitleText(ctx, ctx.getString(R.string.signature)))
+        builder.append(getTitleText(ctx, ctx.getString(R.string.app_signing_signature)))
                 .append("\n")
                 .append(getPrimaryText(ctx, ctx.getString(R.string.algorithm) + ": "))
                 .append(certificate.getSigAlgName()).append("\n")
                 .append(getPrimaryText(ctx, "OID: "))
                 .append(certificate.getSigAlgOID()).append("\n")
-                .append(getPrimaryText(ctx, ctx.getString(R.string.signature) + ": "))
+                .append(getPrimaryText(ctx, ctx.getString(R.string.app_signing_signature) + ": "))
                 .append(Utils.bytesToHex(certificate.getSignature())).append("\n");
         // Public key used by Google: https://github.com/google/conscrypt
         // 1. X509PublicKey (PublicKey)
@@ -916,7 +916,7 @@ public static Spannable getApkVerifierInfo(@Nullable ApkVerifier.Result result,
             if (result.isVerifiedUsingV3Scheme()) sigSchemes.add("v3");
             if (result.isVerifiedUsingV4Scheme()) sigSchemes.add("v4");
             builder.append("\n").append(getPrimaryText(ctx, ctx.getResources()
-                    .getQuantityString(R.plurals.signature_schemes_pl, sigSchemes.size()) + ": "));
+                    .getQuantityString(R.plurals.app_signing_signature_schemes_pl, sigSchemes.size()) + ": "));
             builder.append(TextUtils.joinSpannable(", ", sigSchemes));
         } else {
             builder.append(getColoredText(getTitleText(ctx, "\u2718 " + ctx.getString(R.string.not_verified)), colorRed));

File: app/src/main/java/io/github/muntashirakon/AppManager/ipc/IPCUtils.java
Patch:
@@ -143,7 +143,7 @@ private void startDaemon() {
             if (amService == null) {
                 if (amServiceBoundWatcher == null || amServiceBoundWatcher.getCount() == 0) {
                     amServiceBoundWatcher = new CountDownLatch(1);
-                    Log.e(TAG, "Launching service...");
+                    Log.d(TAG, "Launching service...");
                     Intent intent = new Intent();
                     intent.setComponent(COMPONENT_NAME);
                     synchronized (conn) {

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/TarUtils.java
Patch:
@@ -177,6 +177,7 @@ public static void extract(@NonNull @TarType String type, @NonNull File[] source
                             throw new IOException("Couldn't create symbolic link " + file + " pointing to "
                                     + linkName);
                         }
+                        continue;  // links do not need permission fixes
                     } else {
                         // Zip slip vulnerability check
                         if (!file.getCanonicalFile().toURI().getPath().startsWith(realDestPath)) {

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/TarUtils.java
Patch:
@@ -238,10 +238,10 @@ static void gatherFiles(@NonNull List<File> files, @NonNull File basePath, @NonN
             for (File child : children) {
                 gatherFiles(files, basePath, child, filters, exclude, followLinks);
             }
-        } else {
+        } else if (source.isFile()) {
             // Not directory, add it
             files.add(source);
-        }
+        } // else we don't support other type of files
     }
 
     private static boolean isSymbolicLink(@NonNull File file) throws ErrnoException, RemoteException {

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/AppPref.java
Patch:
@@ -306,7 +306,7 @@ private void init() {
     public Object getDefaultValue(@NonNull PrefKey key) {
         switch (key) {
             case PREF_BACKUP_FLAGS_INT:
-                return BackupFlags.BACKUP_SOURCE | BackupFlags.BACKUP_DATA
+                return BackupFlags.BACKUP_SOURCE | BackupFlags.BACKUP_INT_DATA
                         | BackupFlags.BACKUP_RULES | BackupFlags.BACKUP_EXCLUDE_CACHE
                         | BackupFlags.BACKUP_SOURCE_APK_ONLY | BackupFlags.BACKUP_EXTRAS;
             case PREF_BACKUP_COMPRESSION_METHOD_STR:

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/PackageUtils.java
Patch:
@@ -624,7 +624,7 @@ public static String getSourceDir(@NonNull ApplicationInfo applicationInfo) {
     }
 
     @NonNull
-    public static String[] getDataDirs(@NonNull ApplicationInfo applicationInfo, boolean loadExternal, boolean loadMediaObb) {
+    public static String[] getDataDirs(@NonNull ApplicationInfo applicationInfo, boolean loadInternal, boolean loadExternal, boolean loadMediaObb) {
         ArrayList<String> dataDirs = new ArrayList<>();
         if (applicationInfo.dataDir == null) {
             throw new RuntimeException("Data directory cannot be empty.");

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppDetailsFragment.java
Patch:
@@ -96,6 +96,7 @@
 import io.github.muntashirakon.AppManager.utils.PermissionUtils;
 import io.github.muntashirakon.AppManager.utils.UIUtils;
 import io.github.muntashirakon.AppManager.utils.Utils;
+import me.zhanghai.android.fastscroll.FastScrollerBuilder;
 
 import static io.github.muntashirakon.AppManager.details.AppDetailsViewModel.OPEN_GL_ES;
 import static io.github.muntashirakon.AppManager.utils.PackageUtils.getAppOpModeNames;
@@ -236,6 +237,7 @@ public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceStat
         RecyclerViewWithEmptyView recyclerView = view.findViewById(R.id.recycler_view);
         recyclerView.setHasFixedSize(true);
         recyclerView.setLayoutManager(new LinearLayoutManager(mActivity, LinearLayoutManager.VERTICAL, false));
+        new FastScrollerBuilder(recyclerView).useMd2Style().build();
         final TextView emptyView = view.findViewById(android.R.id.empty);
         emptyView.setText(getNotFoundString(neededProperty));
         recyclerView.setEmptyView(emptyView);

File: app/src/main/java/io/github/muntashirakon/AppManager/main/MainActivity.java
Patch:
@@ -75,6 +75,7 @@
 import io.github.muntashirakon.AppManager.types.SearchableMultiChoiceDialogBuilder;
 import io.github.muntashirakon.AppManager.usage.AppUsageActivity;
 import io.github.muntashirakon.AppManager.utils.*;
+import me.zhanghai.android.fastscroll.FastScrollerBuilder;
 
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -170,8 +171,10 @@ protected void onAuthenticated(Bundle savedInstanceState) {
 
         mAdapter = new MainRecyclerAdapter(MainActivity.this);
         recyclerView.setHasFixedSize(true);
+        recyclerView.setOverScrollMode(RecyclerView.OVER_SCROLL_NEVER);
         recyclerView.setLayoutManager(new LinearLayoutManager(this));
         recyclerView.setAdapter(mAdapter);
+        new FastScrollerBuilder(recyclerView).useMd2Style().build();
 
         if ((boolean) AppPref.get(AppPref.PrefKey.PREF_SHOW_DISCLAIMER_BOOL)) {
             @SuppressLint("InflateParams")

File: app/src/main/java/io/github/muntashirakon/AppManager/profiles/AppsFragment.java
Patch:
@@ -43,6 +43,7 @@
 import io.github.muntashirakon.AppManager.types.IconLoaderThread;
 import io.github.muntashirakon.AppManager.types.RecyclerViewWithEmptyView;
 import io.github.muntashirakon.AppManager.utils.UIUtils;
+import me.zhanghai.android.fastscroll.FastScrollerBuilder;
 
 public class AppsFragment extends Fragment implements SwipeRefreshLayout.OnRefreshListener {
     AppsProfileActivity activity;
@@ -74,6 +75,7 @@ public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceStat
         RecyclerViewWithEmptyView recyclerView = view.findViewById(R.id.recycler_view);
         recyclerView.setHasFixedSize(true);
         recyclerView.setLayoutManager(new LinearLayoutManager(activity, LinearLayoutManager.VERTICAL, false));
+        new FastScrollerBuilder(recyclerView).useMd2Style().build();
         final TextView emptyView = view.findViewById(android.R.id.empty);
         emptyView.setText(R.string.no_apps);
         recyclerView.setEmptyView(emptyView);

File: app/src/main/java/io/github/muntashirakon/AppManager/runningapps/RunningAppsActivity.java
Patch:
@@ -36,6 +36,7 @@
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.utils.AppPref;
 import io.github.muntashirakon.AppManager.utils.UIUtils;
+import me.zhanghai.android.fastscroll.FastScrollerBuilder;
 
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -106,6 +107,7 @@ protected void onAuthenticated(Bundle savedInstanceState) {
         RecyclerView recyclerView = findViewById(R.id.list_item);
         recyclerView.setHasFixedSize(true);
         recyclerView.setLayoutManager(new LinearLayoutManager(this));
+        new FastScrollerBuilder(recyclerView).useMd2Style().build();
 //        recyclerView.setEmptyView(findViewById(android.R.id.empty));
         mAdapter = new RunningAppsAdapter(this);
         recyclerView.setAdapter(mAdapter);

File: app/src/main/java/io/github/muntashirakon/AppManager/sysconfig/SysConfigActivity.java
Patch:
@@ -50,6 +50,7 @@
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.types.IconLoaderThread;
 import io.github.muntashirakon.AppManager.types.RecyclerViewWithEmptyView;
+import me.zhanghai.android.fastscroll.FastScrollerBuilder;
 
 public class SysConfigActivity extends BaseActivity {
     private SysConfigRecyclerAdapter adapter;
@@ -94,6 +95,7 @@ public void onNothingSelected(AdapterView<?> parent) {
         recyclerView.setHasFixedSize(true);
         recyclerView.setLayoutManager(new LinearLayoutManager(this));
         recyclerView.setAdapter(adapter);
+        new FastScrollerBuilder(recyclerView).useMd2Style().build();
     }
 
     @Override

File: app/src/main/java/io/github/muntashirakon/AppManager/types/SearchableMultiChoiceDialogBuilder.java
Patch:
@@ -47,6 +47,7 @@
 import androidx.recyclerview.widget.RecyclerView;
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.utils.LangUtils;
+import me.zhanghai.android.fastscroll.FastScrollerBuilder;
 
 public class SearchableMultiChoiceDialogBuilder<T> {
     @NonNull
@@ -80,6 +81,7 @@ public SearchableMultiChoiceDialogBuilder(@NonNull FragmentActivity activity, @N
         recyclerView = view.findViewById(android.R.id.list);
         recyclerView.setHasFixedSize(true);
         recyclerView.setLayoutManager(new LinearLayoutManager(activity, LinearLayoutManager.VERTICAL, false));
+        new FastScrollerBuilder(recyclerView).useMd2Style().build();
         searchBar = view.findViewById(R.id.search_bar);
         TextInputEditText searchInput = view.findViewById(R.id.search_input);
         searchInput.addTextChangedListener(new TextWatcher() {

File: app/src/main/java/io/github/muntashirakon/AppManager/profiles/ProfileViewModel.java
Patch:
@@ -231,7 +231,7 @@ public void setState(@ProfileMetaManager.ProfileState String state) {
     @NonNull
     @ProfileMetaManager.ProfileState
     public String getState() {
-        return profile.state;
+        return profile.state == null ? ProfileMetaManager.STATE_OFF : profile.state;
     }
 
     public void setUsers(@Nullable int[] users) {

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/TarUtils.java
Patch:
@@ -169,15 +169,15 @@ public static void extract(@NonNull @TarType String type, @NonNull File[] source
                     }
                     // Check if the given entry is a link. If it's a link, check if the linked file actually exist
                     // before creating the link
-                    if (entry.isLink()) {
+                    if (entry.isSymbolicLink()) {
                         File linkedFile = new ProxyFile(entry.getLinkName());
                         if (linkedFile.exists()) {
                             if (!Runner.runCommand(new String[]{"ln", "-s", linkedFile.getAbsolutePath(),
                                     file.getAbsolutePath()}).isSuccessful()) {
                                 throw new IOException("Couldn't create symbolic link " + file + " pointing to "
                                         + linkedFile);
                             }
-                        }
+                        } else continue;
                     } else {
                         // Zip slip vulnerability check
                         if (!file.getCanonicalFile().toURI().getPath().startsWith(realDestPath)) {

File: app/src/main/java/io/github/muntashirakon/AppManager/profiles/ConfPreferences.java
Patch:
@@ -129,7 +129,7 @@ public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {
             new TextInputDialogBuilder(activity, R.string.input_app_ops)
                     .setTitle(R.string.app_ops)
                     .setInputText(app_ops == null ? "" : TextUtils.join(" ", app_ops))
-                    .setHelperText(R.string.input_app_ops_description)
+                    .setHelperText(R.string.input_app_ops_description_profile)
                     .setPositiveButton(R.string.ok, (dialog, which, inputText, isChecked) -> {
                         if (!TextUtils.isEmpty(inputText)) {
                             String[] newAppOps = inputText.toString().split("\\s+");

File: app/src/main/java/io/github/muntashirakon/AppManager/runningapps/RunningAppsAdapter.java
Patch:
@@ -107,7 +107,7 @@ public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
         // Set process IDs
         holder.processIds.setText(mActivity.getString(R.string.pid_and_ppid, processItem.pid, processItem.ppid));
         // Set memory usage
-        holder.memoryUsage.setText(mActivity.getString(R.string.memory_virtual_memory, Formatter.formatFileSize(mActivity, processItem.rss * 1024), Formatter.formatFileSize(mActivity, processItem.vsz * 1024)));
+        holder.memoryUsage.setText(mActivity.getString(R.string.memory_virtual_memory, Formatter.formatFileSize(mActivity, processItem.rss << 12), Formatter.formatFileSize(mActivity, processItem.vsz)));
         // Set user info
         String userInfo = mActivity.getString(R.string.user_and_uid, processItem.user, processItem.uid);
         String stateInfo;

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/BackupOp.java
Patch:
@@ -209,7 +209,7 @@ boolean runBackup() {
     }
 
     private void backupIcon() {
-        final File iconFile = new File(tmpBackupPath, ICON_FILE);
+        final File iconFile = new ProxyFile(tmpBackupPath, ICON_FILE);
         try (OutputStream outputStream = new ProxyOutputStream(iconFile)) {
             Bitmap bitmap = IOUtils.getBitmapFromDrawable(applicationInfo.loadIcon(pm));
             bitmap.compress(Bitmap.CompressFormat.PNG, 100, outputStream);

File: app/src/main/java/io/github/muntashirakon/AppManager/oneclickops/OneClickOpsActivity.java
Patch:
@@ -115,15 +115,15 @@ private void setItems() {
         mItemCreator.addItemWithTitleSubtitle(getString(R.string.set_mode_for_app_ops_dots),
                 getString(R.string.deny_app_ops_description))
                 .setOnClickListener(v -> blockAppOps());
-        if (BuildConfig.DEBUG) {
-            mItemCreator.addItemWithTitleSubtitle(getText(R.string.backup),
+            mItemCreator.addItemWithTitleSubtitle(getText(R.string.back_up),
                     getText(R.string.backup_msg)).setOnClickListener(v ->
                     new BackupTasksDialogFragment().show(getSupportFragmentManager(),
                             BackupTasksDialogFragment.TAG));
             mItemCreator.addItemWithTitleSubtitle(getText(R.string.restore),
                     getText(R.string.restore_msg)).setOnClickListener(v ->
                     new RestoreTasksDialogFragment().show(getSupportFragmentManager(),
                             RestoreTasksDialogFragment.TAG));
+        if (BuildConfig.DEBUG) {
             mItemCreator.addItemWithTitleSubtitle(getString(R.string.clear_data_from_uninstalled_apps),
                     getString(R.string.clear_data_from_uninstalled_apps_description))
                     .setOnClickListener(v -> clearData());

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppDetailsActivity.java
Patch:
@@ -47,6 +47,7 @@
 import io.github.muntashirakon.AppManager.BaseActivity;
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.apk.ApkFile;
+import io.github.muntashirakon.AppManager.details.info.AppInfoFragment;
 import io.github.muntashirakon.AppManager.logs.Log;
 import io.github.muntashirakon.AppManager.misc.Users;
 import io.github.muntashirakon.AppManager.utils.AppPref;
@@ -58,8 +59,8 @@ public class AppDetailsActivity extends BaseActivity {
 
     public AppDetailsViewModel model;
     public SearchView searchView;
+    public ViewPager viewPager;
 
-    ViewPager viewPager;
     private TypedArray mTabTitleIds;
     private Fragment[] fragments;
 

File: app/src/main/java/io/github/muntashirakon/AppManager/intercept/HistoryEditText.java
Patch:
@@ -19,7 +19,7 @@
 
 import android.app.Activity;
 import android.content.SharedPreferences;
-import android.preference.PreferenceManager;
+import androidx.preference.PreferenceManager;
 import android.widget.ArrayAdapter;
 
 import androidx.annotation.NonNull;

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/Utils.java
Patch:
@@ -75,7 +75,7 @@
 public class Utils {
     public static final String TERMUX_LOGIN_PATH = OsEnvironment.getDataDataDirectory() + "/com.termux/files/usr/bin/login";
 
-    @SuppressWarnings("BooleanMethodIsAlwaysInverted")
+    @SuppressWarnings({"BooleanMethodIsAlwaysInverted", "deprecation"})
     public static boolean checkUsageStatsPermission(@NonNull Context context) {
         AppOpsManager appOpsManager = (AppOpsManager) context.getSystemService(Context.APP_OPS_SERVICE);
         assert appOpsManager != null;

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/RestoreOp.java
Patch:
@@ -373,9 +373,7 @@ private void restoreData() throws BackupException {
                     }
                 }
             }
-            // Force stop app
-            RunnerUtils.forceStopPackage(packageName, RunnerUtils.USER_ALL);
-            // Clear app data
+            // Force-stop and clear app data
             PackageManagerCompat.clearApplicationUserData(packageName, userHandle);
             // Restore backups
             String dataSource;

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppInfoFragment.java
Patch:
@@ -652,10 +652,10 @@ private void setHorizontalActions() {
                 // Force stop
                 if ((mApplicationInfo.flags & ApplicationInfo.FLAG_STOPPED) == 0) {
                     addToHorizontalLayout(R.string.force_stop, R.drawable.ic_baseline_power_settings_new_24).setOnClickListener(v -> executor.submit(() -> {
-                        if (RunnerUtils.forceStopPackage(mPackageName, mainModel.getUserHandle()).isSuccessful()) {
-                            // Refresh
+                        try {
+                            PackageManagerCompat.forceStopPackage(mPackageName, mainModel.getUserHandle());
                             runOnUiThread(this::refreshDetails);
-                        } else {
+                        } catch (RemoteException|SecurityException e) {
                             runOnUiThread(() -> Toast.makeText(mActivity, getString(R.string.failed_to_stop, mPackageLabel), Toast.LENGTH_LONG).show());
                         }
                     }));

File: hiddenapi/src/main/java/android/content/pm/IPackageStatsObserver.java
Patch:
@@ -1,5 +1,5 @@
 package android.content.pm;
 
-interface IPackageStatsObserver {
+public interface IPackageStatsObserver {
     void onGetStatsCompleted(PackageStats pStats, boolean succeeded);
 }

File: app/src/main/java/io/github/muntashirakon/AppManager/servermanager/ApiSupporter.java
Patch:
@@ -26,7 +26,6 @@
 import androidx.annotation.NonNull;
 import io.github.muntashirakon.AppManager.AppManager;
 import io.github.muntashirakon.AppManager.server.common.CallerResult;
-import io.github.muntashirakon.AppManager.server.common.ParcelableUtil;
 import io.github.muntashirakon.AppManager.server.common.Shell;
 import io.github.muntashirakon.AppManager.server.common.ShellCaller;
 
@@ -53,6 +52,6 @@ public static Shell.Result runCommand(String command) throws Exception {
         LocalServer localServer = LocalServer.getInstance();
         ShellCaller shellCaller = new ShellCaller(command);
         CallerResult callerResult = localServer.exec(shellCaller);
-        return ParcelableUtil.unmarshall(callerResult.getReply(), Shell.Result.CREATOR);
+        return (Shell.Result) callerResult.getReplyObj();
     }
 }

File: libserver/src/main/java/io/github/muntashirakon/AppManager/server/common/BaseCaller.java
Patch:
@@ -25,7 +25,7 @@
 public class BaseCaller implements Parcelable {
 
     public static final int TYPE_CLOSE = -10;
-    public static final int TYPE_CLASS = 3;
+    public static final int TYPE_SHELL = 5;
 
     private final int type;
     private byte[] rawBytes;

File: server/src/main/java/io/github/muntashirakon/AppManager/server/IPCMain.java
Patch:
@@ -21,19 +21,18 @@
 import android.content.ComponentName;
 import android.content.Context;
 import android.os.IBinder;
-import android.os.Looper;
 import android.os.Parcel;
 import android.util.Log;
 
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Method;
 
+import io.github.muntashirakon.AppManager.server.common.ServerUtils;
+
 import static android.os.IBinder.LAST_CALL_TRANSACTION;
 import static io.github.muntashirakon.AppManager.server.common.ServerUtils.getServiceName;
 import static io.github.muntashirakon.AppManager.server.common.ServerUtils.getSystemContext;
 
-import io.github.muntashirakon.AppManager.server.common.ServerUtils;
-
 /**
  * Trampoline to start a root service.
  * <p>

File: server/src/main/java/io/github/muntashirakon/AppManager/server/ServerRunner.java
Patch:
@@ -75,7 +75,6 @@ public static void main(String[] args) {
             // Make it main looper
             //noinspection deprecation
             Looper.prepareMainLooper();
-            //noinspection ResultOfMethodCallIgnored
             ActivityThread.systemMain();
             // Parse arguments
             String[] split = paramsStr.split(",");

File: app/src/main/java/io/github/muntashirakon/AppManager/appops/AppOpsManager.java
Patch:
@@ -32,6 +32,7 @@
 import androidx.annotation.IntDef;
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
+import androidx.annotation.RequiresApi;
 import io.github.muntashirakon.AppManager.utils.ArrayUtils;
 
 /**
@@ -101,6 +102,7 @@ public class AppOpsManager {
      * {@link android.app.AppOpsManager#noteOp} or {@link android.app.AppOpsManager#startOp} to do
      * the actual check for access to the op.</p>
      */
+    @RequiresApi(api = Build.VERSION_CODES.Q)
     public static final int MODE_FOREGROUND = 1 << 2;
     /**
      * MIUI customized mode.

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/MainPreferences.java
Patch:
@@ -299,6 +299,9 @@ public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {
                     .show();
             return true;
         });
+        // App usage permission toggle
+        SwitchPreferenceCompat backupKeyStore = Objects.requireNonNull(findPreference("backup_android_keystore"));
+        backupKeyStore.setChecked((boolean) AppPref.get(AppPref.PrefKey.PREF_BACKUP_ANDROID_KEYSTORE_BOOL));
         // Encryption
         ((Preference) Objects.requireNonNull(findPreference("encryption"))).setOnPreferenceClickListener(preference -> {
             CharSequence[] encryptionNamesText = new CharSequence[encryptionNames.length];

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/AppPref.java
Patch:
@@ -61,6 +61,7 @@ public enum PrefKey {
         PREF_APP_THEME_INT,
         PREF_BACKUP_COMPRESSION_METHOD_STR,
         PREF_BACKUP_FLAGS_INT,
+        PREF_BACKUP_ANDROID_KEYSTORE_BOOL,
         PREF_COMPONENTS_SORT_ORDER_INT,
         PREF_CUSTOM_LOCALE_STR,
         PREF_ENABLE_KILL_FOR_SYSTEM_BOOL,
@@ -312,6 +313,7 @@ public Object getDefaultValue(@NonNull PrefKey key) {
             case PREF_GLOBAL_BLOCKING_ENABLED_BOOL:
             case PREF_INSTALLER_DISPLAY_USERS_BOOL:
             case PREF_INSTALLER_SIGN_APK_BOOL:
+            case PREF_BACKUP_ANDROID_KEYSTORE_BOOL:
                 return false;
             case PREF_APP_OP_SHOW_DEFAULT_BOOL:
             case PREF_USAGE_ACCESS_ENABLED_BOOL:

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/PackageUtils.java
Patch:
@@ -577,7 +577,7 @@ public static Spannable getApkVerifierInfo(@Nullable ApkVerifier.Result result,
             if (result.isVerifiedUsingV3Scheme()) sigSchemes.add("v3");
             if (result.isVerifiedUsingV4Scheme()) sigSchemes.add("v4");
             builder.append("\n").append(getPrimaryText(ctx, ctx.getResources()
-                    .getQuantityString(R.plurals.signature_schemes, sigSchemes.size()) + ": "));
+                    .getQuantityString(R.plurals.signature_schemes_pl, sigSchemes.size()) + ": "));
             builder.append(TextUtils.joinSpannable(", ", sigSchemes));
         } else {
             builder.append(getColoredText(getTitleText(ctx, "\u2718 " + ctx.getString(R.string.not_verified)), colorRed));

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppInfoFragment.java
Patch:
@@ -96,6 +96,7 @@
 import io.github.muntashirakon.AppManager.backup.BackupDialogFragment;
 import io.github.muntashirakon.AppManager.batchops.BatchOpsManager;
 import io.github.muntashirakon.AppManager.batchops.BatchOpsService;
+import io.github.muntashirakon.AppManager.details.struct.AppDetailsItem;
 import io.github.muntashirakon.AppManager.rules.RulesStorageManager;
 import io.github.muntashirakon.AppManager.rules.RulesTypeSelectionDialogFragment;
 import io.github.muntashirakon.AppManager.rules.compontents.ComponentUtils;

File: app/src/main/java/io/github/muntashirakon/AppManager/details/struct/AppDetailsComponentItem.java
Patch:
@@ -15,11 +15,12 @@
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  */
 
-package io.github.muntashirakon.AppManager.details;
+package io.github.muntashirakon.AppManager.details.struct;
 
 import android.content.pm.ComponentInfo;
 
 import androidx.annotation.NonNull;
+import io.github.muntashirakon.AppManager.details.struct.AppDetailsItem;
 
 /**
  * Stores individual app details component item

File: app/src/main/java/io/github/muntashirakon/AppManager/details/struct/AppDetailsItem.java
Patch:
@@ -15,7 +15,7 @@
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  */
 
-package io.github.muntashirakon.AppManager.details;
+package io.github.muntashirakon.AppManager.details.struct;
 
 import androidx.annotation.NonNull;
 

File: app/src/main/java/io/github/muntashirakon/AppManager/details/struct/AppDetailsPermissionItem.java
Patch:
@@ -15,7 +15,7 @@
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  */
 
-package io.github.muntashirakon.AppManager.details;
+package io.github.muntashirakon.AppManager.details.struct;
 
 import android.content.pm.PermissionInfo;
 

File: app/src/main/java/com/android/internal/util/TextUtils.java
Patch:
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2020 Muntashir Al-Islam
+ * Copyright (C) 2006 The Android Open Source Project
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -15,7 +16,7 @@
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  */
 
-package io.github.muntashirakon.AppManager.utils;
+package com.android.internal.util;
 
 import android.annotation.SuppressLint;
 import android.os.Parcel;
@@ -39,6 +40,7 @@
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.core.util.Preconditions;
+import libcore.util.EmptyArray;
 
 @SuppressWarnings("unused")
 public class TextUtils {

File: app/src/main/java/io/github/muntashirakon/AppManager/main/ApplicationItem.java
Patch:
@@ -29,7 +29,7 @@
 import io.github.muntashirakon.AppManager.backup.MetadataManager;
 import io.github.muntashirakon.AppManager.servermanager.ApiSupporter;
 import io.github.muntashirakon.AppManager.servermanager.LocalServer;
-import io.github.muntashirakon.AppManager.utils.EmptyArray;
+import libcore.util.EmptyArray;
 
 /**
  * Stores an application info

File: app/src/main/java/io/github/muntashirakon/AppManager/profiles/ConfPreferences.java
Patch:
@@ -23,6 +23,7 @@
 import android.widget.ArrayAdapter;
 import android.widget.Spinner;
 
+import com.android.internal.util.TextUtils;
 import com.google.android.material.dialog.MaterialAlertDialogBuilder;
 import com.google.android.material.textfield.TextInputEditText;
 
@@ -43,7 +44,6 @@
 import io.github.muntashirakon.AppManager.rules.RulesTypeSelectionDialogFragment;
 import io.github.muntashirakon.AppManager.types.SearchableMultiChoiceDialogBuilder;
 import io.github.muntashirakon.AppManager.types.TextInputDialogBuilder;
-import io.github.muntashirakon.AppManager.utils.TextUtils;
 
 public class ConfPreferences extends PreferenceFragmentCompat {
     AppsProfileActivity activity;

File: app/src/main/java/io/github/muntashirakon/AppManager/scanner/ClassListingActivity.java
Patch:
@@ -35,6 +35,7 @@
 import android.widget.TextView;
 import android.widget.Toast;
 
+import com.android.internal.util.TextUtils;
 import com.google.android.material.progressindicator.ProgressIndicator;
 
 import java.util.ArrayList;
@@ -49,7 +50,6 @@
 import io.github.muntashirakon.AppManager.BaseActivity;
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.scanner.reflector.Reflector;
-import io.github.muntashirakon.AppManager.utils.TextUtils;
 import io.github.muntashirakon.AppManager.utils.UIUtils;
 
 public class ClassListingActivity extends BaseActivity implements SearchView.OnQueryTextListener {

File: app/src/main/java/io/github/muntashirakon/AppManager/sysconfig/SystemConfig.java
Patch:
@@ -27,6 +27,9 @@
 import android.util.SparseArray;
 import android.util.Xml;
 
+import com.android.internal.util.TextUtils;
+import com.android.internal.util.XmlUtils;
+
 import org.xmlpull.v1.XmlPullParser;
 import org.xmlpull.v1.XmlPullParserException;
 
@@ -47,8 +50,6 @@
 import io.github.muntashirakon.AppManager.types.PrivilegedFile;
 import io.github.muntashirakon.AppManager.utils.ArrayUtils;
 import io.github.muntashirakon.AppManager.utils.IOUtils;
-import io.github.muntashirakon.AppManager.utils.TextUtils;
-import io.github.muntashirakon.AppManager.utils.XmlUtils;
 
 /**
  * Loads global system configuration info.

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/ApkFile.java
Patch:
@@ -684,7 +684,7 @@ private Entry(@NonNull String name, @ApkType int type, @NonNull HashMap<String,
         public String getFileName() {
             if (cachedFile != null && cachedFile.exists()) return cachedFile.getName();
             if (zipEntry != null) return IOUtils.getFileNameFromZipEntry(zipEntry);
-            if (source != null && source.exists()) return name;
+            if (source != null && source.exists()) return source.getName();
             else throw new RuntimeException("Neither zipEntry nor source is defined.");
         }
 

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/MetadataManager.java
Patch:
@@ -250,7 +250,7 @@ public Metadata setupMetadata(@NonNull PackageInfo packageInfo,
                 metadata.isSplitApk = splitCount > 0;
                 metadata.splitConfigs = new String[splitCount];
                 for (int i = 0; i < splitCount; ++i) {
-                    metadata.splitConfigs[i] = apkEntries.get(i+1).name;
+                    metadata.splitConfigs[i] = apkEntries.get(i+1).getFileName();
                 }
             }
         } catch (ApkFile.ApkFileException e) {

File: app/src/main/java/io/github/muntashirakon/AppManager/profiles/ConfFragment.java
Patch:
@@ -45,7 +45,7 @@ public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup c
     @Override
     public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        getChildFragmentManager().beginTransaction().replace(R.id.fragment_container_view_tag, new ConfPreferences(activity)).commit();
+        getChildFragmentManager().beginTransaction().replace(R.id.fragment_container_view_tag, new ConfPreferences()).commit();
     }
 
     @Override

File: app/src/main/java/io/github/muntashirakon/AppManager/servermanager/LocalServerManager.java
Patch:
@@ -316,6 +316,9 @@ private ClientSession createSession() throws IOException {
         if (isRunning()) {
             return mSession;
         }
+        if (!AppPref.isRootOrAdbEnabled()) {
+            throw new IOException("Root/ADB not enabled.");
+        }
         Socket socket = new Socket(ServerConfig.getHost(), ServerConfig.getPort());
         socket.setSoTimeout(1000 * 30);
         OutputStream os = socket.getOutputStream();

File: app/src/main/java/io/github/muntashirakon/AppManager/main/MainActivity.java
Patch:
@@ -525,11 +525,12 @@ public void onRefresh() {
     @Override
     protected void onStart() {
         super.onStart();
+        // Update config
+        LocalServer.updateConfig();
         // Check root
         AppPref.set(AppPref.PrefKey.PREF_ADB_MODE_ENABLED_BOOL, false);
         if (!AppPref.isRootEnabled()) {
             AppPref.set(AppPref.PrefKey.PREF_ADB_MODE_ENABLED_BOOL, true);
-            LocalServer.updateConfig();
             // Check for adb
             new Thread(() -> {
                 try {
@@ -541,7 +542,6 @@ protected void onStart() {
                     runOnUiThread(() -> Toast.makeText(this, "Working on ADB mode", Toast.LENGTH_SHORT).show());
                 } catch (IOException e) {
                     AppPref.set(AppPref.PrefKey.PREF_ADB_MODE_ENABLED_BOOL, false);
-                    LocalServer.updateConfig();
                     try {
                         LocalServer.getInstance().checkConnect();
                     } catch (IOException ignore) {

File: app/src/main/java/io/github/muntashirakon/AppManager/servermanager/AppOpsManager.java
Patch:
@@ -6,6 +6,7 @@
 import java.util.List;
 
 import androidx.annotation.NonNull;
+import androidx.annotation.WorkerThread;
 import io.github.muntashirakon.AppManager.BuildConfig;
 import io.github.muntashirakon.AppManager.misc.Users;
 import io.github.muntashirakon.AppManager.server.common.CallerResult;
@@ -46,6 +47,7 @@ public OpsResult getOpsForPackage(int uid, String packageName, int[] ops) throws
         return wrapOps(builder);
     }
 
+    @WorkerThread
     private OpsResult wrapOps(OpsCommands.Builder builder) throws Exception {
         Bundle args = new Bundle();
         args.putParcelable("args", builder);

File: app/src/main/java/io/github/muntashirakon/AppManager/servermanager/LocalServer.java
Patch:
@@ -114,6 +114,7 @@ public void checkConnect() throws IOException {
         }
     }
 
+    @WorkerThread
     public CallerResult exec(Caller caller) throws Exception {
         try {
             checkConnect();

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/installer/PackageInstallerActivity.java
Patch:
@@ -124,7 +124,7 @@ protected void onCreate(@Nullable Bundle savedInstanceState) {
         new Thread(() -> {
             try {
                 if (apkUri != null) {
-                    apkFileKey = ApkFile.createInstance(apkUri);
+                    apkFileKey = ApkFile.createInstance(apkUri, intent.getType());
                 } else {
                     closeApkFile = false;  // Internal request, don't close the ApkFile
                 }

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppDetailsActivity.java
Patch:
@@ -68,6 +68,7 @@ protected void onCreate(Bundle savedInstanceState) {
         // Check for package name
         final String packageName = intent.getStringExtra(AppDetailsActivity.EXTRA_PACKAGE_NAME);
         final Uri apkUri = intent.getData();
+        final String apkType = intent.getType();
         // Initialize tabs
         mTabTitleIds = getResources().obtainTypedArray(R.array.TAB_TITLES);
         fragments = new Fragment[mTabTitleIds.length()];
@@ -101,7 +102,7 @@ protected void onCreate(Bundle savedInstanceState) {
         new Thread(() -> {
             try {
                 if (packageName != null) model.setPackage(packageName);
-                else model.setPackage(apkUri);
+                else model.setPackage(apkUri, apkType);
             } catch (ApkFile.ApkFileException | IOException e) {
                 Log.e("ADA", "Could not fetch package info.", e);
                 runOnUiThread(() -> {

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppDetailsViewModel.java
Patch:
@@ -51,6 +51,7 @@
 
 import androidx.annotation.GuardedBy;
 import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 import androidx.annotation.WorkerThread;
 import androidx.lifecycle.AndroidViewModel;
 import androidx.lifecycle.LiveData;
@@ -125,10 +126,10 @@ public void onCleared() {
     }
 
     @WorkerThread
-    public void setPackage(@NonNull Uri packageUri) throws ApkFile.ApkFileException, IOException {
+    public void setPackage(@NonNull Uri packageUri, @Nullable String type) throws ApkFile.ApkFileException, IOException {
         Log.d("ADVM", "Package Uri is being set");
         isExternalApk = true;
-        apkFileKey = ApkFile.createInstance(packageUri);
+        apkFileKey = ApkFile.createInstance(packageUri, type);
         apkFile = ApkFile.getInstance(apkFileKey);
         apkPath = apkFile.getBaseEntry().getCachedFile().getAbsolutePath();
     }

File: app/src/main/java/io/github/muntashirakon/AppManager/details/ManifestViewerActivity.java
Patch:
@@ -118,7 +118,7 @@ protected void onCreate(Bundle savedInstanceState) {
                 PackageInfo packageInfo = null;
                 if (intent.getAction() != null && intent.getAction().equals(Intent.ACTION_VIEW)) {
                     try {
-                        int key = ApkFile.createInstance(packageUri);
+                        int key = ApkFile.createInstance(packageUri, intent.getType());
                         apkFile = ApkFile.getInstance(key);
                         archiveFilePath = apkFile.getBaseEntry().getCachedFile().getAbsolutePath();
                     } catch (IOException | ApkFile.ApkFileException e) {

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/BackupDialogFragment.java
Patch:
@@ -244,6 +244,7 @@ public void handleMode() {
                         userHandle = metadata[i].userHandle;
                         if (backupName == null && userHandle == currentUserHandle) {
                             choice = i;
+                            selectedItem.set(i);
                         }
                         readableBackupNames[i] = backupName == null ? "Base backup for user " + userHandle : backupName + " for user " + userHandle;
                     }

File: app/src/main/java/io/github/muntashirakon/AppManager/usage/AppUsageActivity.java
Patch:
@@ -446,6 +446,7 @@ public View getView(int position, View convertView, ViewGroup parent) {
             }
             // Set usage percentage
             holder.percentUsage.setText(String.format(Locale.ROOT, "%d%%", percentUsage));
+            holder.usageIndicator.show();
             holder.usageIndicator.setProgress(percentUsage);
             return convertView;
         }

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/MetadataManager.java
Patch:
@@ -240,7 +240,7 @@ public Metadata setupMetadata(@NonNull PackageInfo packageInfo,
         metadata.splitNames = ArrayUtils.defeatNullable(metadata.splitNames);
         metadata.hasRules = false;
         if (requestedFlags.backupRules()) {
-            try (ComponentsBlocker cb = ComponentsBlocker.getInstance(packageInfo.packageName)) {
+            try (ComponentsBlocker cb = ComponentsBlocker.getInstance(packageInfo.packageName, userHandle)) {
                 metadata.hasRules = cb.entryCount() > 0;
             }
         }

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppDetailsFragment.java
Patch:
@@ -73,6 +73,7 @@
 import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.appops.AppOpsManager;
+import io.github.muntashirakon.AppManager.misc.Users;
 import io.github.muntashirakon.AppManager.rules.RulesStorageManager;
 import io.github.muntashirakon.AppManager.rules.compontents.ComponentUtils;
 import io.github.muntashirakon.AppManager.server.common.OpEntry;
@@ -323,7 +324,7 @@ public boolean onOptionsItemSelected(@NonNull MenuItem item) {
                 return true;
             case R.id.action_block_trackers:  // Components
                 new Thread(() -> {
-                    List<String> failedPkgList = ComponentUtils.blockTrackingComponents(Collections.singletonList(mPackageName));
+                    List<String> failedPkgList = ComponentUtils.blockTrackingComponents(Collections.singletonList(mPackageName), Users.getCurrentUserHandle());
                     if (failedPkgList.contains(mPackageName)) {
                         runOnUiThread(() -> Toast.makeText(mActivity, R.string.failed_to_disable_trackers, Toast.LENGTH_SHORT).show());
                     } else {

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppDetailsViewModel.java
Patch:
@@ -150,7 +150,7 @@ public void setPackageName(String packageName) {
                     blocker.setReadOnly();
                     blocker.close();
                 }
-                blocker = ComponentsBlocker.getInstance(packageName);
+                blocker = ComponentsBlocker.getInstance(packageName, Users.getCurrentUserHandle());
                 waitForBlocker = false;
                 blockerLocker.notifyAll();
             }

File: app/src/main/java/io/github/muntashirakon/AppManager/rules/RulesExporter.java
Patch:
@@ -31,6 +31,7 @@
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import io.github.muntashirakon.AppManager.AppManager;
+import io.github.muntashirakon.AppManager.misc.Users;
 import io.github.muntashirakon.AppManager.rules.compontents.ComponentsBlocker;
 
 /**
@@ -51,10 +52,11 @@ public RulesExporter(@NonNull List<RulesStorageManager.Type> typesToExport, @Nul
 
     public void saveRules(Uri uri) throws IOException {
         if (mPackagesToExport == null) mPackagesToExport = getAllPackages();
+        int userHandle = Users.getCurrentUserHandle();
         try (OutputStream outputStream = mContext.getContentResolver().openOutputStream(uri)) {
             for (String packageName: mPackagesToExport) {
                 // Get a read-only instance
-                try (ComponentsBlocker cb = ComponentsBlocker.getInstance(packageName)) {
+                try (ComponentsBlocker cb = ComponentsBlocker.getInstance(packageName, userHandle)) {
                     for (RulesStorageManager.Entry entry: cb.getAll()) {
                         if (mTypesToExport.contains(entry.type)) {
                             Objects.requireNonNull(outputStream).write(String.format("%s\t%s\t%s\t%s\n", packageName, entry.name, entry.type.name(), entry.extra).getBytes());

File: app/src/main/java/io/github/muntashirakon/AppManager/rules/RulesImporter.java
Patch:
@@ -34,6 +34,7 @@
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import io.github.muntashirakon.AppManager.AppManager;
+import io.github.muntashirakon.AppManager.misc.Users;
 import io.github.muntashirakon.AppManager.rules.compontents.ComponentsBlocker;
 
 /**
@@ -55,7 +56,7 @@ public RulesImporter(@NonNull List<RulesStorageManager.Type> typesToImport) {
         mTypesToImport = typesToImport;
     }
 
-    public void addRulesFromUri(Uri uri) throws IOException {
+    public void addRulesFromUri(Uri uri, int userHandle) throws IOException {
         try (InputStream inputStream = mContext.getContentResolver().openInputStream(uri)) {
             try (BufferedReader TSVFile = new BufferedReader(new InputStreamReader(inputStream))) {
                 StringTokenizer tokenizer;
@@ -79,7 +80,7 @@ public void addRulesFromUri(Uri uri) throws IOException {
                     else throw new IOException("Malformed file.");
                     if (mComponentsBlockers.get(packageName) == null) {
                         // Get a read-only instance, commit will be called manually
-                        mComponentsBlockers.put(packageName, ComponentsBlocker.getInstance(packageName));
+                        mComponentsBlockers.put(packageName, ComponentsBlocker.getInstance(packageName, userHandle));
                     }
                     if (mTypesToImport.contains(entry.type))
                         Objects.requireNonNull(mComponentsBlockers.get(packageName)).addEntry(entry);

File: app/src/main/java/io/github/muntashirakon/AppManager/rules/RulesTypeSelectionDialogFragment.java
Patch:
@@ -37,6 +37,7 @@
 import androidx.fragment.app.FragmentActivity;
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.logs.Log;
+import io.github.muntashirakon.AppManager.misc.Users;
 import io.github.muntashirakon.AppManager.settings.SettingsActivity;
 
 public class RulesTypeSelectionDialogFragment extends DialogFragment {
@@ -114,7 +115,7 @@ private void handleExport() {
     private void handleImport() {
         new Thread(() -> {
             try (RulesImporter importer = new RulesImporter(new ArrayList<>(mSelectedTypes))) {
-                importer.addRulesFromUri(mUri);
+                importer.addRulesFromUri(mUri, Users.getCurrentUserHandle());
                 if (mPackages != null) importer.setPackagesToImport(mPackages);
                 importer.applyRules();
                 activity.runOnUiThread(() -> Toast.makeText(activity, R.string.the_import_was_successful, Toast.LENGTH_LONG).show());

File: app/src/main/java/io/github/muntashirakon/AppManager/runner/RunnerUtils.java
Patch:
@@ -71,8 +71,8 @@ public final class RunnerUtils {
     public static final String CMD_APP_OPS_GET_ALL = CMD_APP_OPS + " get %s";
     public static final String CMD_APP_OPS_RESET = CMD_APP_OPS + " reset %s";
     public static final String CMD_APP_OPS_RESET_USER = CMD_APP_OPS + " reset --user %d %s";
-    public static final String CMD_APP_OPS_SET = CMD_APP_OPS + " set %s %d %s";
-    public static final String CMD_APP_OPS_SET_MODE_INT = CMD_APP_OPS + " set %s %d %d";
+    public static final String CMD_APP_OPS_SET = CMD_APP_OPS + " set --user %d %s %d %s";
+    public static final String CMD_APP_OPS_SET_MODE_INT = CMD_APP_OPS + " set --user %d %s %d %d";
     public static final String CMD_APP_OPS_SET_UID = CMD_APP_OPS + " set --uid %d %d %s";
 
     public static final String CMD_PID_PACKAGE = "pidof %s";

File: app/src/main/java/io/github/muntashirakon/AppManager/runningapps/RunningAppsAdapter.java
Patch:
@@ -163,7 +163,7 @@ public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
                                     try {
                                         new AppOpsService().setMode(AppOpsManager.OP_RUN_IN_BACKGROUND,
                                                 applicationInfo.uid, applicationInfo.packageName, AppOpsManager.MODE_IGNORED);
-                                        try (ComponentsBlocker cb = ComponentsBlocker.getMutableInstance(applicationInfo.packageName)) {
+                                        try (ComponentsBlocker cb = ComponentsBlocker.getMutableInstance(applicationInfo.packageName, Users.getUserHandle(applicationInfo.uid))) {
                                             cb.setAppOp(String.valueOf(AppOpsManager.OP_RUN_IN_BACKGROUND), AppOpsManager.MODE_IGNORED);
                                         }
                                         mActivity.runOnUiThread(() -> mActivity.refresh());

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/ImportExportDialogFragment.java
Patch:
@@ -43,6 +43,7 @@
 import androidx.annotation.Nullable;
 import androidx.fragment.app.DialogFragment;
 import io.github.muntashirakon.AppManager.R;
+import io.github.muntashirakon.AppManager.misc.Users;
 import io.github.muntashirakon.AppManager.oneclickops.ItemCount;
 import io.github.muntashirakon.AppManager.rules.RulesTypeSelectionDialogFragment;
 import io.github.muntashirakon.AppManager.rules.compontents.ExternalComponentsImporter;
@@ -57,6 +58,7 @@ public class ImportExportDialogFragment extends DialogFragment {
     private static final String MIME_TSV = "text/tab-separated-values";
     private static final String MIME_XML = "text/xml";
 
+    private int userHandle = Users.getCurrentUserHandle();
     private SettingsActivity activity;
     private ActivityResultLauncher<String> exportRules = registerForActivityResult(new ActivityResultContracts.CreateDocument(), uri -> {
         RulesTypeSelectionDialogFragment dialogFragment = new RulesTypeSelectionDialogFragment();
@@ -171,7 +173,7 @@ private void importExistingRules(final boolean systemApps) {
                             .setPositiveButton(R.string.apply, (dialog, which) -> {
                                 activity.progressIndicator.show();
                                 new Thread(() -> {
-                                    List<String> failedPackages = ExternalComponentsImporter.applyFromExistingBlockList(selectedPackages);
+                                    List<String> failedPackages = ExternalComponentsImporter.applyFromExistingBlockList(selectedPackages, userHandle);
                                     if (!failedPackages.isEmpty()) {
                                         handler.post(() -> {
                                             new MaterialAlertDialogBuilder(activity)

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/installer/AMPackageInstaller.java
Patch:
@@ -32,6 +32,9 @@
 public abstract class AMPackageInstaller {
     public static final String ACTION_INSTALL_STARTED = BuildConfig.APPLICATION_ID + ".action.INSTALL_STARTED";
     public static final String ACTION_INSTALL_COMPLETED = BuildConfig.APPLICATION_ID + ".action.INSTALL_COMPLETED";
+    // For rootless installer to prevent PackageInstallerService from hanging
+    public static final String ACTION_INSTALL_INTERACTION_BEGIN = BuildConfig.APPLICATION_ID + ".action.INSTALL_INTERACTION_BEGIN";
+    public static final String ACTION_INSTALL_INTERACTION_END = BuildConfig.APPLICATION_ID + ".action.INSTALL_INTERACTION_END";
 
     /**
      * See {@link PackageInstaller#STATUS_SUCCESS}

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/BackupManager.java
Patch:
@@ -540,8 +540,10 @@ private void restoreData() throws BackupException {
                     }
                 }
             }
-            // Force stop app before restoring backups
+            // Force stop app
             RunnerUtils.forceStopPackage(packageName, RunnerUtils.USER_ALL);
+            // Clear app data
+            RunnerUtils.clearPackageData(packageName, userHandle);
             // Restore backups
             String dataSource;
             boolean isExternal;

File: app/src/main/java/io/github/muntashirakon/AppManager/runningapps/RunningAppsAdapter.java
Patch:
@@ -106,7 +106,7 @@ public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
         // Set process IDs
         holder.processIds.setText(mActivity.getString(R.string.pid_and_ppid, processItem.pid, processItem.ppid));
         // Set memory usage
-        holder.memoryUsage.setText(mActivity.getString(R.string.memory_virtual_memory, Formatter.formatFileSize(mActivity, processItem.rss), Formatter.formatFileSize(mActivity, processItem.vsz)));
+        holder.memoryUsage.setText(mActivity.getString(R.string.memory_virtual_memory, Formatter.formatFileSize(mActivity, processItem.rss * 1024), Formatter.formatFileSize(mActivity, processItem.vsz * 1024)));
         // Set user info
         String userInfo = mActivity.getString(R.string.user_and_uid, processItem.user, processItem.uid);
         String stateInfo;

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/ApkFile.java
Patch:
@@ -509,7 +509,7 @@ else if (type == APK_SPLIT) {
         public String getFileName() {
             if (cachedFile != null && cachedFile.exists()) return cachedFile.getName();
             if (zipEntry != null) return IOUtils.getFileNameFromZipEntry(zipEntry);
-            if (source != null && source.exists()) return source.getName();
+            if (source != null && source.exists()) return name;
             else throw new RuntimeException("Neither zipEntry nor source is defined.");
         }
 
@@ -539,7 +539,6 @@ public void close() {
         }
 
         public File getCachedFile() throws IOException {
-            if (source != null) return source;
             File destDir = AppManager.getContext().getExternalFilesDir("apks");
             if (destDir == null || !Environment.getExternalStorageState(destDir).equals(Environment.MEDIA_MOUNTED))
                 throw new RuntimeException("External media not present");

File: libApkParser/src/main/java/net/dongliu/apk/parser/ApkParser.java
Patch:
@@ -9,7 +9,7 @@
  * This class is not thread-safe.
  *
  * @author dongliu
- * @deprecated use {@link net.dongliu.apk.parser.ApkFile} instead
+ * @deprecated use {@link ApkFile} instead
  */
 @Deprecated
 public class ApkParser extends ApkFile {

File: libApkParser/src/main/java/net/dongliu/apk/parser/struct/signingv2/SignerBlock.java
Patch:
@@ -1,8 +1,9 @@
 package net.dongliu.apk.parser.struct.signingv2;
 
-import java.security.cert.X509Certificate;
 import java.util.List;
 
+import javax.security.cert.X509Certificate;
+
 public class SignerBlock {
     private List<Digest> digests;
     private List<X509Certificate> certificates;

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppDetailsActivity.java
Patch:
@@ -124,7 +124,7 @@ protected void onCreate(Bundle savedInstanceState) {
                 setTitle(applicationInfo.loadLabel(getPackageManager()));
                 // Check for the existence of package
                 viewPager.setAdapter(new AppDetailsFragmentPagerAdapter(fragmentManager));
-                model.getIsPackageExist().observe(this, isPackageExist -> {
+                model.getIsPackageExistLiveData().observe(this, isPackageExist -> {
                     if (!isPackageExist) {
                         Toast.makeText(this, R.string.app_not_installed, Toast.LENGTH_LONG).show();
                         finish();
@@ -138,8 +138,7 @@ protected void onCreate(Bundle savedInstanceState) {
     protected void onStart() {
         super.onStart();
         model.getIsPackageChanged().observe(this, isPackageChanged -> {
-            //noinspection ConstantConditions
-            if (isPackageChanged && model.getIsPackageExist().getValue()) {
+            if (isPackageChanged && model.isPackageExist()) {
                 @AppDetailsFragment.Property int id = viewPager.getCurrentItem();
                 Log.e("ADA - " + mTabTitleIds.getText(id), "isPackageChanged called");
                 if (model.getIsExternalApk()) model.load(AppDetailsFragment.APP_INFO);

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppDetailsFragment.java
Patch:
@@ -231,7 +231,7 @@ public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceStat
 //            if (mAdapter != null) mAdapter.setDefaultList();
 //        });
         mainModel.get(neededProperty).observe(getViewLifecycleOwner(), appDetailsItems -> {
-            if (mAdapter != null) mAdapter.setDefaultList(appDetailsItems);
+            if (mAdapter != null && mainModel.isPackageExist()) mAdapter.setDefaultList(appDetailsItems);
         });
         mainModel.getRuleApplicationStatus().observe(getViewLifecycleOwner(), status -> {
             if (neededProperty > APP_INFO && neededProperty <= PROVIDERS) {

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppInfoFragment.java
Patch:
@@ -239,7 +239,7 @@ public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceStat
         versionView = view.findViewById(R.id.version);
         // Set observer
         mainModel.get(AppDetailsFragment.APP_INFO).observe(getViewLifecycleOwner(), appDetailsItems -> {
-            if (!appDetailsItems.isEmpty()) {
+            if (!appDetailsItems.isEmpty() && mainModel.isPackageExist()) {
                 AppDetailsItem appDetailsItem = appDetailsItems.get(0);
                 mPackageInfo = (PackageInfo) appDetailsItem.vanillaItem;
                 mPackageName = appDetailsItem.name;

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppDetailsFragment.java
Patch:
@@ -327,7 +327,6 @@ public boolean onOptionsItemSelected(@NonNull MenuItem item) {
                 // Turn filter on/off
                 boolean curr = (boolean) AppPref.get(AppPref.PrefKey.PREF_APP_OP_SHOW_DEFAULT_BOOL);
                 AppPref.getInstance().setPref(AppPref.PrefKey.PREF_APP_OP_SHOW_DEFAULT_BOOL, !curr);
-                mainModel.resetAppOpItems();
                 refreshDetails();
                 return true;
             case R.id.action_deny_dangerous_permissions:  // permissions

File: app/src/main/java/io/github/muntashirakon/AppManager/servermanager/remote/AppOpsHandler.java
Patch:
@@ -190,8 +190,9 @@ private void runSet(@NonNull OpsCommands.Builder builder) throws Throwable {
                 ServiceManager.getService(Context.APP_OPS_SERVICE));
         if (appOpsService == null) throw new Exception("AppOpsService is null");
         appOpsService.setMode(builder.getOpInt(), uid, builder.getPackageName(), builder.getModeInt());
-        if (appOpsService.checkOperation(builder.getOpInt(), uid, builder.getPackageName()) != builder.getModeInt())
-            throw new Exception("Failed to set mode " + builder.getModeInt() + " for op " + builder.getOpInt() + " in package " + builder.getPackageName());
+        // The following logic seem to yield a false positive result for some op
+//        if (appOpsService.checkOperation(builder.getOpInt(), uid, builder.getPackageName()) != builder.getModeInt())
+//            throw new Exception("Failed to set mode " + builder.getModeInt() + " for op " + builder.getOpInt() + " in package " + builder.getPackageName());
 //        }
     }
 

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/ApkFile.java
Patch:
@@ -160,7 +160,7 @@ public ApkFile(Uri apkUri) throws Exception {
         if (name == null) throw new Exception("Could not extract package name from the URI.");
         String extension;
         try {
-            extension = name.substring(name.lastIndexOf('.') + 1).toLowerCase();
+            extension = name.substring(name.lastIndexOf('.') + 1).toLowerCase(Locale.ROOT);
             if (!SUPPORTED_EXTENSIONS.contains(extension))
                 throw new Exception("Invalid package extension.");
         } catch (IndexOutOfBoundsException e) {

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/BackupDialogFragment.java
Patch:
@@ -155,13 +155,16 @@ public void handleMode() {
         @BatchOpsManager.OpType int op;
         switch (mode) {
             case MODE_DELETE:
+                // TODO(11/9/20): Display a list of backups if only a single package is requested
                 op = BatchOpsManager.OP_DELETE_BACKUP;
                 break;
             case MODE_RESTORE:
+                // TODO(11/9/20): Display a list of backups if only a single package is requested
                 op = BatchOpsManager.OP_RESTORE_BACKUP;
                 break;
             case MODE_BACKUP:
             default:
+                // TODO(11/9/20): Display a prompt asking for the backup name if multiple backup requested
                 op = BatchOpsManager.OP_BACKUP;
         }
         if (actionBeginInterface != null) actionBeginInterface.onActionBegin(mode);

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppDetailsFragment.java
Patch:
@@ -417,7 +417,7 @@ public void onDestroyView() {
     @Override
     public boolean onQueryTextChange(String searchQuery) {
         if (mainModel != null) {
-            mainModel.setSearchQuery(searchQuery.toLowerCase());
+            mainModel.setSearchQuery(searchQuery.toLowerCase(Locale.ROOT));
             mainModel.load(neededProperty);
         }
         return true;

File: app/src/main/java/io/github/muntashirakon/AppManager/details/ClassListingActivity.java
Patch:
@@ -221,7 +221,7 @@ public boolean onQueryTextSubmit(String query) {
     public boolean onQueryTextChange(String newText) {
         mConstraint = newText;
         if (mClassListingAdapter != null)
-            mClassListingAdapter.getFilter().filter(newText.toLowerCase());
+            mClassListingAdapter.getFilter().filter(newText.toLowerCase(Locale.ROOT));
         return true;
     }
 

File: app/src/main/java/io/github/muntashirakon/AppManager/main/MainActivity.java
Patch:
@@ -691,7 +691,7 @@ private void setSortBy(@SortOrder int sortBy) {
 
     @Override
     public boolean onQueryTextChange(String searchQuery) {
-        mModel.setSearchQuery(searchQuery.toLowerCase());
+        mModel.setSearchQuery(searchQuery.toLowerCase(Locale.ROOT));
         return true;
     }
 

File: app/src/main/java/io/github/muntashirakon/AppManager/runningapps/RunningAppsActivity.java
Patch:
@@ -183,7 +183,7 @@ public boolean onQueryTextSubmit(String query) {
     @Override
     public boolean onQueryTextChange(String newText) {
         mConstraint = newText;
-        if (mAdapter != null) mAdapter.getFilter().filter(newText.toLowerCase());
+        if (mAdapter != null) mAdapter.getFilter().filter(newText.toLowerCase(Locale.ROOT));
         return true;
     }
 

File: app/src/main/java/io/github/muntashirakon/AppManager/sharedpref/SharedPrefsActivity.java
Patch:
@@ -234,7 +234,7 @@ public boolean onQueryTextSubmit(String query) {
     @Override
     public boolean onQueryTextChange(String newText) {
         mConstraint = newText;
-        if (mAdapter != null) mAdapter.getFilter().filter(newText.toLowerCase());
+        if (mAdapter != null) mAdapter.getFilter().filter(newText.toLowerCase(Locale.ROOT));
         return true;
     }
 

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/Utils.java
Patch:
@@ -799,7 +799,7 @@ public static int getThemeColor(@NonNull Context context, int resAttrColor) { //
     public static boolean isRootGiven() {
         if (isRootAvailable()) {
             String output = RootShellRunner.runCommand("id").getOutput();
-            return output != null && output.toLowerCase().contains("uid=0");
+            return output != null && output.toLowerCase(Locale.ROOT).contains("uid=0");
         }
         return false;
     }

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/splitapk/SplitApkChooser.java
Patch:
@@ -98,7 +98,7 @@ public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {
                     }
                     break;
                 case ApkFile.APK_SPLIT_FEATURE:
-                    name = getString(R.string.split_feature_name, apkEntry.splitSuffix);
+                    name = getString(R.string.split_feature_name, apkEntry.name);
                     break;
                 case ApkFile.APK_SPLIT_UNKNOWN:
                     name = apkEntry.name;

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppInfoFragment.java
Patch:
@@ -1031,9 +1031,9 @@ private Tuple<String, String> getNetStats(int uid) {
         if (uidStatsDir.exists() && uidStatsDir.isDirectory()) {
             for (File child : Objects.requireNonNull(uidStatsDir.listFiles())) {
                 if (child.getName().equals(UID_STATS_TR))
-                    tuple.setFirst(getReadableSize(Long.parseLong(Utils.getFileContent(child, "-1"))));
+                    tuple.setFirst(getReadableSize(Long.parseLong(Utils.getFileContent(child, "-1").trim())));
                 else if (child.getName().equals(UID_STATS_RC))
-                    tuple.setSecond(getReadableSize(Long.parseLong(Utils.getFileContent(child, "-1"))));
+                    tuple.setSecond(getReadableSize(Long.parseLong(Utils.getFileContent(child, "-1").trim())));
             }
         }
         return tuple;

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/installer/PackageInstallerActivity.java
Patch:
@@ -33,6 +33,7 @@
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.core.content.ContextCompat;
+import androidx.fragment.app.FragmentManager;
 import io.github.muntashirakon.AppManager.AppManager;
 import io.github.muntashirakon.AppManager.BaseActivity;
 import io.github.muntashirakon.AppManager.R;
@@ -71,6 +72,7 @@ protected void onCreate(@Nullable Bundle savedInstanceState) {
             return;
         }
         mPackageManager = getPackageManager();
+        FragmentManager fm = getSupportFragmentManager();
         new Thread(() -> {
             try {
                 apkFile = new ApkFile(apkUri);
@@ -106,7 +108,7 @@ protected void onCreate(@Nullable Bundle savedInstanceState) {
                         WhatsNewDialogFragment dialogFragment = new WhatsNewDialogFragment();
                         dialogFragment.setArguments(args);
                         dialogFragment.setOnTriggerInstall(this::install);
-                        runOnUiThread(() -> dialogFragment.show(getSupportFragmentManager(), WhatsNewDialogFragment.TAG));
+                        runOnUiThread(() -> dialogFragment.show(fm, WhatsNewDialogFragment.TAG));
                     } else if (installedVersionCode == thisVersionCode) {
                         // Issue reinstall
                         if (AppPref.isRootOrAdbEnabled()) {

File: app/src/main/java/io/github/muntashirakon/AppManager/batchops/BatchOpsManager.java
Patch:
@@ -356,7 +356,7 @@ public List<String> failedPackages() {
     @NonNull
     private Result opUninstall() {
         for (String packageName : packageNames) {
-            addCommand(packageName, String.format(Locale.ROOT, RunnerUtils.CMD_UNINSTALL_PACKAGE,
+            addCommand(packageName, String.format(Locale.ROOT, RunnerUtils.CMD_UNINSTALL_PACKAGE_WITH_DATA,
                     RunnerUtils.userHandleToUser(Users.getCurrentUser()), packageName));
         }
         return runOpAndFetchResults();

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/AppPref.java
Patch:
@@ -224,7 +224,7 @@ private Object getDefaultValue(@NonNull PrefKey key) {
                         | BackupFlags.BACKUP_RULES | BackupFlags.BACKUP_EXCLUDE_CACHE
                         | BackupFlags.BACKUP_SOURCE_APK_ONLY;
             case PREF_ROOT_MODE_ENABLED_BOOL:
-                return Utils.isRootGiven();
+                return false;
             case PREF_APP_OP_SHOW_DEFAULT_BOOL:
             case PREF_USAGE_ACCESS_ENABLED_BOOL:
             case PREF_SHOW_DISCLAIMER_BOOL:

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/BackupFlags.java
Patch:
@@ -53,10 +53,10 @@ public final class BackupFlags {
     public static final int BACKUP_NO_SIGNATURE_CHECK = 1 << 5;
     public static final int BACKUP_SOURCE_APK_ONLY = 1 << 6;
     public static final int BACKUP_EXT_OBB_MEDIA = 1 << 7;
-    public static final int BACKUP_ALL_USERS = 1 << 8;  // TODO
-    public static final int BACKUP_MULTIPLE = 1 << 9;  // TODO
+    public static final int BACKUP_ALL_USERS = 1 << 8;
+    public static final int BACKUP_MULTIPLE = 1 << 9;
 
-    public static final int BACKUP_TOTAL = 10;  // TODO
+    public static final int BACKUP_TOTAL = 10;
 
     @BackupFlag
     private int flags;

File: app/src/main/java/io/github/muntashirakon/AppManager/rules/compontents/ComponentUtils.java
Patch:
@@ -40,6 +40,7 @@
 import io.github.muntashirakon.AppManager.StaticDataset;
 import io.github.muntashirakon.AppManager.appops.AppOpsManager;
 import io.github.muntashirakon.AppManager.appops.AppOpsService;
+import io.github.muntashirakon.AppManager.misc.Users;
 import io.github.muntashirakon.AppManager.oneclickops.ItemCount;
 import io.github.muntashirakon.AppManager.rules.RulesStorageManager;
 import io.github.muntashirakon.AppManager.runner.RootShellRunner;
@@ -197,7 +198,7 @@ public static void removeAllRules(@NonNull String packageName) {
             }
             // Grant configured permissions
             for (RulesStorageManager.Entry entry: cb.getAll(RulesStorageManager.Type.PERMISSION)) {
-                if (RunnerUtils.grantPermission(packageName, entry.name).isSuccessful()) {
+                if (RunnerUtils.grantPermission(packageName, entry.name, Users.getCurrentUser()).isSuccessful()) {
                     cb.removeEntry(entry);
                 }
             }

File: AppManagerServer/src/main/java/io/github/muntashirakon/AppManager/server/ServerHandler.java
Patch:
@@ -303,7 +303,7 @@ private CallerResult callClass(ClassCaller caller) {
             }
             // Check if class is successfully loaded
             if (clazzConstructor == null)
-                throw new Exception("Class constructor cannot be null");
+                throw new NoSuchMethodException("Class constructor cannot be null.");
             // Class has been loaded
             // Get the object
             final Object callerProcessor = clazzConstructor.newInstance(packageContext, context,

File: app/src/main/java/io/github/muntashirakon/AppManager/servermanager/LocalServerManager.java
Patch:
@@ -192,8 +192,9 @@ void closeBgServer() {
     private List<String> getCommands() {
         AssetsUtils.writeScript(mConfig);
         Log.e(TAG, "classpath --> " + ServerConfig.getClassPath());
+        Log.e(TAG, "exec path --> " + ServerConfig.getExecPath());
         List<String> commands = new ArrayList<>();
-        commands.add(ServerConfig.getExecPath());
+        commands.add("sh " + ServerConfig.getExecPath());
         return commands;
     }
 

File: app/src/main/java/io/github/muntashirakon/AppManager/servermanager/ServerConfig.java
Patch:
@@ -27,7 +27,7 @@ static void init(Context context, int userHandleId) {
             return;
         }
         destJarFile = new File(context.getExternalFilesDir(null), JAR_NAME);
-        destJarFile = new File(context.getExternalFilesDir(null), EXECUTABLE_FILE_NAME);
+        destExecFile = new File(context.getExternalFilesDir(null), EXECUTABLE_FILE_NAME);
         sPreferences = context.getSharedPreferences("server_config", Context.MODE_PRIVATE);
         if (userHandleId != 0) {
             SOCKET_PATH += userHandleId;

File: app/src/main/java/io/github/muntashirakon/AppManager/servermanager/remote/PackageHandler.java
Patch:
@@ -49,8 +49,7 @@ public Bundle proxyInvoke(@NonNull Bundle args) throws Throwable {
             int flags = args.getInt(ARG_FLAGS, 0);
             IPackageManager pm = ActivityThread.getPackageManager();
             if (pm == null) throw new Exception("IPackageManager cannot be null");
-            PackageInfo packageInfo;
-            packageInfo = pm.getPackageInfo(packageName, flags, userHandle);
+            PackageInfo packageInfo = pm.getPackageInfo(packageName, flags, userHandle);
             if (packageInfo == null) throw new PackageManager.NameNotFoundException("Package doesn't exist.");
             args.clear();
             args.putParcelable("return", packageInfo);

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/BackupFlags.java
Patch:
@@ -25,12 +25,14 @@
 class BackupFlags {
     @IntDef(flag = true, value = {
             BACKUP_NOTHING,
+            BACKUP_ALL_USERS,
             BACKUP_SOURCE,
             BACKUP_SOURCE_APK_ONLY,
             BACKUP_DATA,
             BACKUP_EXT_DATA,
             BACKUP_EXT_OBB_MEDIA,
             BACKUP_EXCLUDE_CACHE,
+            BACKUP_MULTIPLE,
             BACKUP_RULES,
             BACKUP_NO_SIGNATURE_CHECK,
     })
@@ -49,7 +51,7 @@ class BackupFlags {
     public static final int BACKUP_SOURCE_APK_ONLY = 1 << 6;
     public static final int BACKUP_EXT_OBB_MEDIA = 1 << 7;  // TODO
     public static final int BACKUP_ALL_USERS = 1 << 8;  // TODO
-    public static final int BACKUP_MULTIPLE = 1 << 8;  // TODO
+    public static final int BACKUP_MULTIPLE = 1 << 9;  // TODO
     public static final int BACKUP_FLAGS_COMPAT = (1 << 8) - 1;
 
     @BackupFlag

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/ApkUtils.java
Patch:
@@ -21,7 +21,6 @@
 import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager;
 import android.os.Build;
-import android.os.FileUtils;
 
 import java.io.File;
 import java.io.FileInputStream;
@@ -30,9 +29,9 @@
 import androidx.annotation.NonNull;
 import io.github.muntashirakon.AppManager.AppManager;
 import io.github.muntashirakon.AppManager.apk.splitapk.SplitApkExporter;
+import io.github.muntashirakon.AppManager.backup.BackupFiles;
 import io.github.muntashirakon.AppManager.utils.IOUtils;
 
-import static io.github.muntashirakon.AppManager.backup.BackupStorageManager.getApkBackupDirectory;
 import static io.github.muntashirakon.AppManager.utils.IOUtils.copy;
 
 public final class ApkUtils {
@@ -63,10 +62,11 @@ public static File getSharableApkFile(@NonNull PackageInfo packageInfo) throws E
     /**
      * Backup the given apk (both root and non root). This is similar to apk sharing feature except
      * that these are saved at /sdcard/AppManager/apks
+     *
      * @return true on success, false on failure
      */
     public static boolean backupApk(String packageName) {
-        File backupPath = getApkBackupDirectory();
+        File backupPath = BackupFiles.getApkBackupDirectory();
         if (!backupPath.exists()) {
             if (!backupPath.mkdirs()) return false;
         }

File: app/src/main/java/io/github/muntashirakon/AppManager/main/ApplicationItem.java
Patch:
@@ -42,7 +42,8 @@ public class ApplicationItem extends PackageItemInfo {
     /**
      * Backup info
      */
-    public @Nullable MetadataManager.MetadataV1 metadataV1;
+    public @Nullable
+    MetadataManager.Metadata metadata;
     /**
      * Application flags.
      * See {@link android.content.pm.ApplicationInfo#flags}

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/installer/AMPackageInstallerService.java
Patch:
@@ -134,7 +134,7 @@ protected void onHandleIntent(@Nullable Intent intent) {
         }
         int count = 18000000; // 5 hours
         int interval = 100; // 100 millis
-        while (!completed || count != 0) {
+        while (!completed && count != 0) {
             try {
                 Thread.sleep(interval);
                 count -= interval;

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/installer/PackageInstallerService.java
Patch:
@@ -21,6 +21,7 @@
 import android.content.Intent;
 import android.content.pm.PackageInstaller;
 import android.os.IBinder;
+import android.util.Log;
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
@@ -51,6 +52,7 @@ public int onStartCommand(@NonNull Intent intent, int flags, int startId) {
                 broadcastIntent.putExtra(AMPackageInstaller.EXTRA_OTHER_PACKAGE_NAME, intent.getStringExtra(PackageInstaller.EXTRA_OTHER_PACKAGE_NAME));
                 broadcastIntent.putExtra(AMPackageInstaller.EXTRA_STATUS, status);
                 getApplication().sendBroadcast(broadcastIntent);
+                Log.e("PIS", "" + intent.getStringExtra(PackageInstaller.EXTRA_STATUS_MESSAGE));
                 break;
         }
         stopSelf();

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/BackupUtils.java
Patch:
@@ -36,7 +36,6 @@ public static MetadataManager.MetadataV1 getBackupInfo(String packageName) {
             metadataManager.readMetadata();
             return metadataManager.getMetadataV1();
         } catch (JSONException e) {
-            e.printStackTrace();
             return null;
         }
     }

File: app/src/main/java/com/google/classysharkandroid/utils/UriUtils.java
Patch:
@@ -47,9 +47,8 @@ public static String pathUriCache(@NonNull Context context, Uri uri, String nCac
         if (extStorageDir == null || !Environment.getExternalStorageState(extStorageDir).equals(Environment.MEDIA_MOUNTED))
             throw new RuntimeException("External media not present");
         File f = new File(extStorageDir, nCache);
-        try {
-            FileOutputStream fos = new FileOutputStream(f);
-            InputStream is = context.getContentResolver().openInputStream(uri);
+        try (FileOutputStream fos = new FileOutputStream(f);
+             InputStream is = context.getContentResolver().openInputStream(uri)) {
             if (is == null) return null;
             IOUtils.copy(is, fos);
             return f.getPath();

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/installer/PackageInstallerShell.java
Patch:
@@ -117,7 +117,7 @@ public boolean installMultiple(@NonNull File[] apkFiles, String packageName) {
                     Log.e(TAG, "InstallMultiple: Failed to commit the install.");
                 }
             }
-            return abandon(packageName);
+            return false;
         }
         sendCompletedBroadcast(packageName, STATUS_SUCCESS);
         return true;

File: app/src/main/java/io/github/muntashirakon/AppManager/main/MainActivity.java
Patch:
@@ -563,7 +563,8 @@ protected void onStart() {
                     }
                     AppOps.updateConfig(this);
                     runOnUiThread(() -> Toast.makeText(this, "Working on ADB mode", Toast.LENGTH_SHORT).show());
-                } catch (Exception ignored) {
+                } catch (Exception e) {
+                    AppPref.getInstance().setPref(AppPref.PrefKey.PREF_ADB_MODE_ENABLED_BOOL, false);
                 }
             }).start();
         }

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/AppPref.java
Patch:
@@ -183,8 +183,8 @@ private void init() {
 
     private @NonNull Object getDefaultValue(@NonNull PrefKey key) {
         switch (key) {
+            case PREF_ROOT_MODE_ENABLED_BOOL: return Utils.isRootGiven();
             case PREF_APP_OP_SHOW_DEFAULT_BOOL:
-            case PREF_ROOT_MODE_ENABLED_BOOL:
             case PREF_USAGE_ACCESS_ENABLED_BOOL:
             case PREF_SHOW_DISCLAIMER_BOOL: return true;
             case PREF_ADB_MODE_ENABLED_BOOL:

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/installer/PackageInstallerShell.java
Patch:
@@ -55,7 +55,7 @@ public boolean installMultiple(@NonNull File[] apkFiles) {
             return false;
         }
         // Create install session
-        StringBuilder cmd = new StringBuilder(installCmd).append(" install-create -r -S ")
+        StringBuilder cmd = new StringBuilder(installCmd).append(" install-create -r -d -t -S ")
                 .append(totalSize).append(" -i ").append(BuildConfig.APPLICATION_ID)
                 .append(" --user 0");
         for (File apkFile : apkFiles)
@@ -94,7 +94,7 @@ public boolean installMultiple(@NonNull File[] apkFiles) {
         result = Runner.runCommand(installCmd + " install-commit " + sessionId);
         buf = result.getOutput();
         if (!result.isSuccessful() || buf == null || !buf.contains("Success")) {
-            Log.e(TAG, "Abandon: Failed to abandon session.");
+            Log.e(TAG, "InstallMultiple: Failed to commit the install.");
             return abandon();
         }
         return true;

File: app/src/main/java/io/github/muntashirakon/AppManager/batchops/BatchOpsService.java
Patch:
@@ -148,7 +148,7 @@ private void sendNotification(int op, int result, @Nullable ArrayList<String> fa
                     intent.putExtra(EXTRA_FAILURE_MESSAGE, message);
                     intent.putStringArrayListExtra(EXTRA_FAILED_PKG, failedPackages);
                     PendingIntent pendingIntent = PendingIntent.getActivity(this,
-                            0, intent, 0);
+                            0, intent, PendingIntent.FLAG_ONE_SHOT);
                     builder.setContentIntent(pendingIntent);
                     builder.setContentText(message);
                 } else builder.setContentText(getString(R.string.error));

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/BackupStorageManager.java
Patch:
@@ -41,7 +41,7 @@
 import androidx.annotation.Nullable;
 import dalvik.system.VMRuntime;
 import io.github.muntashirakon.AppManager.AppManager;
-import io.github.muntashirakon.AppManager.apk.splitapk.SplitApkShellInstaller;
+import io.github.muntashirakon.AppManager.apk.PackageInstallerShell;
 import io.github.muntashirakon.AppManager.misc.OsEnvironment;
 import io.github.muntashirakon.AppManager.rules.RulesImporter;
 import io.github.muntashirakon.AppManager.rules.RulesStorageManager;
@@ -343,7 +343,7 @@ public boolean restore() {
             // A normal update will do it now
             if (splitApkNames.length > 0) {
                 // Split apk
-                if (!SplitApkShellInstaller.installMultiple(allApks)) {
+                if (!PackageInstallerShell.getInstance().installMultiple(allApks)) {
                     Log.e("BSM - Restore", "A (re)install was necessary but couldn't perform it.");
                     return false;
                 }

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/AppPref.java
Patch:
@@ -40,6 +40,7 @@ public class AppPref {
     public enum PrefKey {
         // Keep this in sync with getDefaultValue(PrefKey)
         PREF_ADB_MODE_ENABLED_BOOL,
+        PREF_APP_OP_SHOW_DEFAULT_BOOL,
         PREF_APP_THEME_INT,
         PREF_ENABLE_KILL_FOR_SYSTEM_BOOL,
         PREF_GLOBAL_BLOCKING_ENABLED_BOOL,
@@ -182,6 +183,7 @@ private void init() {
 
     private @NonNull Object getDefaultValue(@NonNull PrefKey key) {
         switch (key) {
+            case PREF_APP_OP_SHOW_DEFAULT_BOOL:
             case PREF_ROOT_MODE_ENABLED_BOOL:
             case PREF_USAGE_ACCESS_ENABLED_BOOL:
             case PREF_SHOW_DISCLAIMER_BOOL: return true;

File: app/src/main/java/io/github/muntashirakon/AppManager/servermanager/AssetsUtils.java
Patch:
@@ -158,7 +158,7 @@ public static void copyFile(String src, File destFile, boolean force) {
     }
 
 
-    static void writeScript(@NonNull AppOpsManager.Config config) {
+    static void writeScript(@NonNull AppOps.Config config) {
         BufferedWriter bw = null;
         FileInputStream fis = null;
         try {

File: AppManagerServer/src/main/java/io/github/muntashirakon/AppManager/server/ServerHandler.java
Patch:
@@ -323,7 +323,7 @@ private CallerResult callClass(ClassCaller caller) {
                 FLog.log("------new object " + o + "  params " + Arrays.toString(params) + "    " + clazz);
 
                 Object ret = MethodUtils.invokeExactMethod(o, "proxyInvoke", params, new Class[]{Bundle.class});
-                if (ret != null && ret instanceof Bundle) {
+                if (ret instanceof Bundle) {
                     writeResult(result, ret);
                 } else {
                     writeResult(result, Bundle.EMPTY);

File: AppManagerServer/src/main/java/io/github/muntashirakon/AppManager/server/ServerRunner.java
Patch:
@@ -227,7 +227,7 @@ private void runServer(Map<String, String> configParams) throws Exception {
             serverHandler.start();
         } catch (DataTransmission.ProtocolVersionException e) {
             // Using an old protocol version, restart using custom script
-            Runtime.getRuntime().exec("sh /sdcard/Android/data/" + PACKAGE_NAME + "/run_server.sh " + Process.myPid());
+            Runtime.getRuntime().exec("sh /sdcard/Android/data/" + PACKAGE_NAME + "/files/run_server.sh " + Process.myPid());
             SystemClock.sleep(1000);
         } catch (Throwable throwable) {
             FLog.log(throwable);

File: AppManagerServer/src/main/java/io/github/muntashirakon/AppManager/server/common/PackageOps.java
Patch:
@@ -27,7 +27,6 @@
 import androidx.annotation.NonNull;
 
 public class PackageOps implements Parcelable {
-
     private final String mPackageName;
     private final int mUid;
     private final List<OpEntry> mEntries;

File: app/src/main/java/io/github/muntashirakon/AppManager/servermanager/ServerConfig.java
Patch:
@@ -10,8 +10,8 @@
 
 class ServerConfig {
     static String SOCKET_PATH = "am_socket";
-    private static String DEFAULT_ADB_HOST = "127.0.0.1";
-    private static int DEFAULT_ADB_PORT = 52053;
+    private static final String DEFAULT_ADB_HOST = "127.0.0.1";
+    private static int DEFAULT_ADB_PORT = 60001;
     private static final String LOCAL_TOKEN = "l_token";
 
     static final String JAR_NAME = "am.jar";

File: app/src/main/java/io/github/muntashirakon/AppManager/servermanager/remote/Helper.java
Patch:
@@ -18,7 +18,6 @@
 package io.github.muntashirakon.AppManager.servermanager.remote;
 
 import android.app.ActivityThread;
-import android.app.AppOpsManager;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageManager;
 import android.os.Build;

File: app/src/main/java/io/github/muntashirakon/AppManager/servermanager/remote/RestartHandler.java
Patch:
@@ -21,6 +21,7 @@
 import android.os.Bundle;
 import android.os.Process;
 
+import io.github.muntashirakon.AppManager.BuildConfig;
 import io.github.muntashirakon.AppManager.server.common.ClassCallerProcessor;
 import io.github.muntashirakon.AppManager.server.common.FLog;
 
@@ -35,7 +36,8 @@ public RestartHandler(Context mPackageContext,
 
   @Override
   public Bundle proxyInvoke(Bundle bundle) throws Throwable {
-    Runtime.getRuntime().exec("sh /sdcard/Android/data/com.zzzmode.appopsx/opsx.sh "+Process.myPid());
+    Runtime.getRuntime().exec("sh /sdcard/Android/data/" + BuildConfig.APPLICATION_ID +
+            "/files/run_server.sh " + Process.myPid());
     FLog.log("RestartHandler -----------exec  --- ");
     return bundle;
   }

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/PackageUtils.java
Patch:
@@ -121,7 +121,7 @@ public static Collection<Integer> getFilteredAppOps(String packageName, @NonNull
         AppOpsService appOpsService = new AppOpsService();
         for(int appOp: appOps) {
             try {
-                if (!appOpsService.checkOperation(appOp, -1, packageName).equals(AppOpsManager.modeToName(AppOpsManager.MODE_IGNORED))) {
+                if (appOpsService.checkOperation(appOp, -1, packageName) != AppOpsManager.MODE_IGNORED) {
                     filteredAppOps.add(appOp);
                 }
             } catch (Exception e) {

File: app/src/main/java/io/github/muntashirakon/AppManager/runner/RunnerUtils.java
Patch:
@@ -41,7 +41,7 @@ public final class RunnerUtils {
     public static final String CMD_FORCE_STOP_PACKAGE  = CMD_AM + " force-stop %s";
     public static final String CMD_UNINSTALL_PACKAGE = CMD_PM + " uninstall -k --user 0 %s";
     public static final String CMD_UNINSTALL_PACKAGE_WITH_DATA = CMD_PM + " uninstall --user 0 %s";
-    public static final String CMD_INSTALL_PACKAGE = CMD_PM + " install -r -i " + BuildConfig.APPLICATION_ID + " %s";
+    public static final String CMD_INSTALL_PACKAGE = CMD_PM + " install --user 0 -r -i " + BuildConfig.APPLICATION_ID + " %s";
 
     public static final String CMD_COMPONENT_ENABLE = CMD_PM + " default-state %s/%s";  // default-state is more safe than enable
     public static final String CMD_COMPONENT_DISABLE = CMD_PM + " disable %s/%s";

File: app/src/main/java/io/github/muntashirakon/AppManager/runner/Runner.java
Patch:
@@ -6,10 +6,12 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import androidx.annotation.WorkerThread;
 import io.github.muntashirakon.AppManager.AppManager;
 import io.github.muntashirakon.AppManager.utils.AppPref;
 
 public class Runner {
+    public static final int FAILED_RET_VAL = -500;  // An impossible value
 
     public interface Result {
         boolean isSuccessful();
@@ -51,6 +53,7 @@ public void clear() {
         commands.clear();
     }
 
+    @WorkerThread
     synchronized public Result runCommand() {
         return null;
     }

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppInfoFragment.java
Patch:
@@ -100,7 +100,7 @@ public class AppInfoFragment extends Fragment
     private static final String PACKAGE_NAME_AURORA_DROID = "com.aurora.adroid";
     private static final String PACKAGE_NAME_AURORA_STORE = "com.aurora.store";
     private static final String ACTIVITY_NAME_FDROID = "org.fdroid.fdroid.views.AppDetailsActivity";
-    private static final String ACTIVITY_NAME_AURORA_DROID = "com.aurora.adroid.ui.activity.DetailsActivity";
+    private static final String ACTIVITY_NAME_AURORA_DROID = "com.aurora.adroid.ui.details.DetailsActivity";
     private static final String ACTIVITY_NAME_AURORA_STORE = "com.aurora.store.ui.details.DetailsActivity";
 
     private static final String MIME_TSV = "text/tab-separated-values";

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppDetailsActivity.java
Patch:
@@ -78,7 +78,6 @@ protected void onCreate(Bundle savedInstanceState) {
         }
         FragmentManager fragmentManager = getSupportFragmentManager();
         viewPager = findViewById(R.id.pager);
-        viewPager.setAdapter(new AppDetailsFragmentPagerAdapter(fragmentManager));
 
         TabLayout tabLayout = findViewById(R.id.tab_layout);
         tabLayout.setupWithViewPager(viewPager);
@@ -97,6 +96,7 @@ protected void onCreate(Bundle savedInstanceState) {
                 // Set title
                 setTitle(applicationInfo.loadLabel(getPackageManager()));
                 // Check for the existence of package
+                viewPager.setAdapter(new AppDetailsFragmentPagerAdapter(fragmentManager));
                 model.getIsPackageExist().observe(this, isPackageExist -> {
                     if (!isPackageExist) {
                         Toast.makeText(this, R.string.app_not_installed, Toast.LENGTH_LONG).show();

File: app/src/main/java/io/github/muntashirakon/AppManager/details/AppInfoFragment.java
Patch:
@@ -276,15 +276,14 @@ public void onActivityResult(int requestCode, int resultCode, @Nullable Intent d
     @Override
     public void onStart() {
         super.onStart();
+        if (mActivity.searchView != null) mActivity.searchView.setVisibility(View.GONE);
         mainModel.getIsPackageChanged().observe(this, isPackageChanged -> {
             //noinspection ConstantConditions
             if (isPackageChanged && mainModel.getIsPackageExist().getValue()) {
                 Log.e("AppInfo", "Package Changed");
                 getPackageInfo();
             }
         });
-        // First load
-        mainModel.setIsPackageChanged();
     }
 
     @Override

File: app/src/main/java/io/github/muntashirakon/AppManager/apk/whatsnew/WhatsNewDialogFragment.java
Patch:
@@ -58,7 +58,7 @@ public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {
             }
             activity.runOnUiThread(() -> adapter.setAdapterList(changeList));
         }).start();
-        return new MaterialAlertDialogBuilder(activity, R.style.AppTheme_AlertDialog)
+        return new MaterialAlertDialogBuilder(activity)
                 .setTitle(R.string.whats_new)
                 .setView(view)
                 .setNegativeButton(android.R.string.ok, null)

File: app/src/main/java/io/github/muntashirakon/AppManager/backup/BackupDialogFragment.java
Patch:
@@ -82,7 +82,7 @@ public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {
                 break;
             }
         }
-        MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(activity, R.style.AppTheme_AlertDialog)
+        MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(activity)
                 .setTitle(packageNames.size() == 1 ? PackageUtils.getPackageLabel(activity
                         .getPackageManager(), packageNames.get(0)) : getString(R.string.backup_options))
                 .setMultiChoiceItems(R.array.backup_flags, checkedItems, (dialog, which, isChecked) -> {

File: app/src/main/java/io/github/muntashirakon/AppManager/details/ClassListingActivity.java
Patch:
@@ -236,7 +236,7 @@ public boolean onOptionsItemSelected(@NonNull MenuItem item) {
                     if (tracker_names[i - 1].equals(tracker_names[i])) continue;
                     statsMsg.append(tracker_names[i]).append("\n"); j++;
                 }
-                new MaterialAlertDialogBuilder(this, R.style.AppTheme_AlertDialog)
+                new MaterialAlertDialogBuilder(this)
                         .setTitle(getString(R.string.trackers_and_classes, j, tracker_names.length))
                         .setNegativeButton(android.R.string.ok, null)
                         .setMessage(statsMsg.toString()).show();
@@ -279,7 +279,7 @@ private void viewScanSummary() {
                 .replaceAll(" ", "&nbsp;").replaceAll("\n", "<br/>"), HtmlCompat.FROM_HTML_MODE_LEGACY));
         showText.setMovementMethod(new ScrollingMovementMethod());
         showText.setTextIsSelectable(true);
-        new MaterialAlertDialogBuilder(this, R.style.AppTheme_AlertDialog)
+        new MaterialAlertDialogBuilder(this)
                 .setTitle(getString(R.string.trackers_and_classes, totalTrackersFound, classList.size()))
                 .setView(showText)
                 .setIcon(R.drawable.ic_frost_classysharkexodus_black_24dp)

File: app/src/main/java/io/github/muntashirakon/AppManager/details/EditShortcutDialogFragment.java
Patch:
@@ -90,7 +90,7 @@ public void afterTextChanged(Editable s) {
             dialog.show(requireFragmentManager(), IconPickerDialogFragment.TAG);
         });
 
-        return new MaterialAlertDialogBuilder(activity, R.style.AppTheme_AlertDialog)
+        return new MaterialAlertDialogBuilder(activity)
                 .setTitle(mActivityInfo.loadLabel(mPackageManager))
                 .setView(view)
                 .setIcon(mActivityInfo.loadIcon(mPackageManager))

File: app/src/main/java/io/github/muntashirakon/AppManager/details/IconPickerDialogFragment.java
Patch:
@@ -60,7 +60,7 @@ public Dialog onCreateDialog(Bundle savedInstanceState) {
                 if (getDialog() != null) getDialog().dismiss();
             }
         });
-        return new MaterialAlertDialogBuilder(requireActivity(), R.style.AppTheme_AlertDialog)
+        return new MaterialAlertDialogBuilder(requireActivity())
                 .setTitle(R.string.icon_picker)
                 .setView(grid)
                 .setNegativeButton(android.R.string.cancel, (dialog, which) -> {

File: app/src/main/java/io/github/muntashirakon/AppManager/rules/RulesTypeSelectionDialogFragment.java
Patch:
@@ -60,7 +60,7 @@ public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {
         final boolean[] checkedItems = new boolean[6];
         Arrays.fill(checkedItems, true);
         mSelectedTypes = new HashSet<>(Arrays.asList(RulesStorageManager.Type.values()));
-        return new MaterialAlertDialogBuilder(activity, R.style.AppTheme_AlertDialog)
+        return new MaterialAlertDialogBuilder(activity)
                 .setTitle(mode == MODE_IMPORT ? R.string.import_options : R.string.export_options)
                 .setMultiChoiceItems(R.array.rule_types, checkedItems, (dialog, which, isChecked) -> {
                     if (isChecked) mSelectedTypes.add(types[which]);

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/ImportExportDialogFragment.java
Patch:
@@ -74,7 +74,7 @@ public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {
                 handler.post(() -> Toast.makeText(requireContext(), R.string.the_import_was_successful, Toast.LENGTH_SHORT).show());
             } else {
                 handler.post(() ->
-                        new MaterialAlertDialogBuilder(requireContext(), R.style.AppTheme_AlertDialog)
+                        new MaterialAlertDialogBuilder(requireContext())
                             .setTitle(getResources().getQuantityString(R.plurals.failed_to_import_files, failedPackages.size(), failedPackages.size()))
                             .setItems((CharSequence[]) failedPackages.toArray(), null)
                             .setNegativeButton(android.R.string.ok, null)
@@ -97,7 +97,7 @@ public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {
                     .setAction(Intent.ACTION_GET_CONTENT);
             startActivityForResult(Intent.createChooser(intent, getString(R.string.select_files)), RequestCodes.REQUEST_CODE_BLOCKER);
         });
-        return new MaterialAlertDialogBuilder(activity, R.style.AppTheme_AlertDialog)
+        return new MaterialAlertDialogBuilder(activity)
                 .setView(view)
                 .setTitle(R.string.pref_import_export_blocking_rules)
                 .setNegativeButton(android.R.string.cancel, null)

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/SettingsActivity.java
Patch:
@@ -69,7 +69,7 @@ protected void onCreate(Bundle savedInstanceState) {
 
         // Set listeners
         findViewById(R.id.app_theme).setOnClickListener(v ->
-                new MaterialAlertDialogBuilder(this, R.style.AppTheme_AlertDialog)
+                new MaterialAlertDialogBuilder(this)
                         .setTitle(R.string.select_theme)
                         .setSingleChoiceItems(themes, themeConst.indexOf(currentTheme),
                                 (dialog, which) -> currentTheme = themeConst.get(which))
@@ -112,7 +112,7 @@ protected void onCreate(Bundle savedInstanceState) {
         findViewById(R.id.changelog_view).setOnClickListener(v -> new Thread(() -> {
             final Spanned spannedChangelog = HtmlCompat.fromHtml(Utils.getContentFromAssets(this, "changelog.html"), HtmlCompat.FROM_HTML_MODE_COMPACT);
             runOnUiThread(() ->
-                    new MaterialAlertDialogBuilder(this, R.style.AppTheme_AlertDialog)
+                    new MaterialAlertDialogBuilder(this)
                             .setTitle(R.string.changelog)
                             .setMessage(spannedChangelog)
                             .setNegativeButton(android.R.string.ok, null)

File: app/src/main/java/io/github/muntashirakon/AppManager/sharedpref/EditPrefItemFragment.java
Patch:
@@ -172,7 +172,7 @@ public void onNothingSelected(AdapterView<?> parent) {}
             }
         }
         interfaceCommunicator = (InterfaceCommunicator) activity;
-        MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(activity, R.style.AppTheme_AlertDialog);
+        MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(activity);
         builder.setView(view)
                 .setPositiveButton(mode == MODE_CREATE ? R.string.add_item : R.string.done, (dialog, which) -> {
                     PrefItem newPrefItem;

File: app/src/main/java/io/github/muntashirakon/AppManager/usage/AppUsageActivity.java
Patch:
@@ -280,7 +280,7 @@ private void getAppUsage() {
     }
 
     private void promptForUsageStatsPermission() {
-        new MaterialAlertDialogBuilder(this, R.style.AppTheme_AlertDialog)
+        new MaterialAlertDialogBuilder(this)
                 .setTitle(R.string.grant_usage_access)
                 .setMessage(R.string.grant_usage_acess_message)
                 .setPositiveButton(R.string.go, (dialog, which) -> startActivity(new Intent(

File: app/src/main/java/io/github/muntashirakon/AppManager/usage/AppUsageDetailsDialogFragment.java
Patch:
@@ -50,7 +50,7 @@ public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {
         AppUsageDetailsAdapter adapter = new AppUsageDetailsAdapter(activity);
         listView.setAdapter(adapter);
         adapter.setDefaultList(packageUS.entries);
-        MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(activity, R.style.AppTheme_AlertDialog)
+        MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(activity)
                 .setTitle(packageUS.packageName)
                 .setView(view)
                 .setNegativeButton(android.R.string.ok, (dialog, which) -> {

File: app/src/main/java/io/github/muntashirakon/AppManager/settings/SettingsActivity.java
Patch:
@@ -22,7 +22,7 @@
 import androidx.core.text.HtmlCompat;
 import io.github.muntashirakon.AppManager.BuildConfig;
 import io.github.muntashirakon.AppManager.R;
-import io.github.muntashirakon.AppManager.activities.MainActivity;
+import io.github.muntashirakon.AppManager.main.MainActivity;
 import io.github.muntashirakon.AppManager.rules.compontents.ComponentsBlocker;
 import io.github.muntashirakon.AppManager.types.FullscreenDialog;
 import io.github.muntashirakon.AppManager.utils.AppPref;

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/AppPref.java
Patch:
@@ -13,7 +13,7 @@
 import androidx.annotation.NonNull;
 import androidx.appcompat.app.AppCompatDelegate;
 import io.github.muntashirakon.AppManager.AppManager;
-import io.github.muntashirakon.AppManager.activities.MainActivity;
+import io.github.muntashirakon.AppManager.main.MainActivity;
 
 public class AppPref {
     private static final String PREF_NAME = "preferences";

File: app/src/main/java/io/github/muntashirakon/AppManager/storage/backup/BackupStorageManager.java
Patch:
@@ -257,7 +257,7 @@ public boolean restore() {
             }
             if (packageInfo == null) return false;  // Failed to (re)install package
             // Restore source: Get installed source directory and copy backups directly
-            String sourceDir = packageInfo.applicationInfo.publicSourceDir;
+            String sourceDir = new File(packageInfo.applicationInfo.publicSourceDir).getParent();
             // TODO: Handle split apk
             if (!RootShellRunner.runCommand(String.format("tar -xzf \"%s\" -C \"%s\"",
                     backupSourceFile, sourceDir)).isSuccessful()) {

File: app/src/main/java/io/github/muntashirakon/AppManager/storage/backup/BackupStorageManager.java
Patch:
@@ -22,11 +22,11 @@
 import androidx.annotation.IntDef;
 import androidx.annotation.NonNull;
 import io.github.muntashirakon.AppManager.AppManager;
+import io.github.muntashirakon.AppManager.apk.splitapk.SplitApkExporter;
 import io.github.muntashirakon.AppManager.runner.RootShellRunner;
 import io.github.muntashirakon.AppManager.storage.RulesImporter;
 import io.github.muntashirakon.AppManager.storage.RulesStorageManager;
 import io.github.muntashirakon.AppManager.storage.compontents.ComponentsBlocker;
-import io.github.muntashirakon.AppManager.storage.splitapk.SplitApkExporter;
 import io.github.muntashirakon.AppManager.utils.IOUtils;
 import io.github.muntashirakon.AppManager.utils.PackageUtils;
 import io.github.muntashirakon.AppManager.utils.RunnerUtils;

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/AppUsageActivity.java
Patch:
@@ -40,10 +40,10 @@
 import androidx.appcompat.app.ActionBar;
 import androidx.appcompat.app.AppCompatActivity;
 import androidx.appcompat.view.menu.MenuBuilder;
+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.fragments.AppUsageDetailsDialogFragment;
 import io.github.muntashirakon.AppManager.types.IconLoaderThread;
-import io.github.muntashirakon.AppManager.types.ScrollSafeSwipeRefreshLayout;
 import io.github.muntashirakon.AppManager.usage.AppUsageStatsManager;
 import io.github.muntashirakon.AppManager.usage.Utils.IntervalType;
 import io.github.muntashirakon.AppManager.utils.Tuple;
@@ -55,7 +55,7 @@
 import static io.github.muntashirakon.AppManager.usage.Utils.USAGE_YESTERDAY;
 
 public class AppUsageActivity extends AppCompatActivity implements ListView.OnItemClickListener,
-        ScrollSafeSwipeRefreshLayout.OnRefreshListener {
+        SwipeRefreshLayout.OnRefreshListener {
     @IntDef(value = {
             SORT_BY_APP_LABEL,
             SORT_BY_LAST_USED,
@@ -81,7 +81,7 @@ public class AppUsageActivity extends AppCompatActivity implements ListView.OnIt
             R.id.action_sort_by_wifi_data};
 
     private ProgressIndicator mProgressIndicator;
-    private ScrollSafeSwipeRefreshLayout mSwipeRefresh;
+    private SwipeRefreshLayout mSwipeRefresh;
     private AppUsageAdapter mAppUsageAdapter;
     List<AppUsageStatsManager.PackageUS> mPackageUSList;
     private static long totalScreenTime;

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/MainActivity.java
Patch:
@@ -61,6 +61,7 @@
 import androidx.lifecycle.ViewModelProvider;
 import androidx.recyclerview.widget.LinearLayoutManager;
 import androidx.recyclerview.widget.RecyclerView;
+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
 import io.github.muntashirakon.AppManager.BuildConfig;
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.adb.AdbShell;
@@ -69,15 +70,14 @@
 import io.github.muntashirakon.AppManager.types.ApplicationItem;
 import io.github.muntashirakon.AppManager.types.FullscreenDialog;
 import io.github.muntashirakon.AppManager.types.IconLoaderThread;
-import io.github.muntashirakon.AppManager.types.ScrollSafeSwipeRefreshLayout;
 import io.github.muntashirakon.AppManager.utils.AppPref;
 import io.github.muntashirakon.AppManager.utils.Utils;
 import io.github.muntashirakon.AppManager.viewmodels.MainViewModel;
 
 import static androidx.appcompat.app.ActionBar.LayoutParams;
 
 public class MainActivity extends AppCompatActivity implements
-        SearchView.OnQueryTextListener, ScrollSafeSwipeRefreshLayout.OnRefreshListener {
+        SearchView.OnQueryTextListener, SwipeRefreshLayout.OnRefreshListener {
     public static final String EXTRA_PACKAGE_LIST = "EXTRA_PACKAGE_LIST";
     public static final String EXTRA_LIST_NAME = "EXTRA_LIST_NAME";
 
@@ -145,7 +145,7 @@ public class MainActivity extends AppCompatActivity implements
     private List<ApplicationItem> mApplicationItems = new ArrayList<>();
     private SearchView mSearchView;
     private ProgressIndicator mProgressIndicator;
-    private ScrollSafeSwipeRefreshLayout mSwipeRefresh;
+    private SwipeRefreshLayout mSwipeRefresh;
     private BottomAppBar mBottomAppBar;
     private MaterialTextView mBottomAppBarCounter;
     private LinearLayoutCompat mMainLayout;

File: app/src/main/java/io/github/muntashirakon/AppManager/fragments/AppDetailsFragment.java
Patch:
@@ -50,6 +50,7 @@
 import androidx.lifecycle.ViewModelProvider;
 import androidx.recyclerview.widget.LinearLayoutManager;
 import androidx.recyclerview.widget.RecyclerView;
+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.activities.AppDetailsActivity;
 import io.github.muntashirakon.AppManager.appops.AppOpsManager;
@@ -60,7 +61,6 @@
 import io.github.muntashirakon.AppManager.types.AppDetailsPermissionItem;
 import io.github.muntashirakon.AppManager.types.IconLoaderThread;
 import io.github.muntashirakon.AppManager.types.RecyclerViewWithEmptyView;
-import io.github.muntashirakon.AppManager.types.ScrollSafeSwipeRefreshLayout;
 import io.github.muntashirakon.AppManager.utils.AppPref;
 import io.github.muntashirakon.AppManager.utils.LauncherIconCreator;
 import io.github.muntashirakon.AppManager.utils.PackageUtils;
@@ -69,7 +69,7 @@
 import io.github.muntashirakon.AppManager.viewmodels.AppDetailsViewModel;
 
 public class AppDetailsFragment extends Fragment implements SearchView.OnQueryTextListener,
-        ScrollSafeSwipeRefreshLayout.OnRefreshListener {
+        SwipeRefreshLayout.OnRefreshListener {
     @IntDef(value = {
             NONE,
             APP_INFO,
@@ -128,7 +128,7 @@ public class AppDetailsFragment extends Fragment implements SearchView.OnQueryTe
     private PackageManager mPackageManager;
     private AppDetailsActivity mActivity;
     private AppDetailsRecyclerAdapter mAdapter;
-    private ScrollSafeSwipeRefreshLayout mSwipeRefresh;
+    private SwipeRefreshLayout mSwipeRefresh;
     private MenuItem blockingToggler;
     private ProgressIndicator mProgressIndicator;
     private TextView mRulesNotAppliedMsg;

File: app/src/main/java/io/github/muntashirakon/AppManager/fragments/AppInfoFragment.java
Patch:
@@ -63,6 +63,7 @@
 import androidx.fragment.app.Fragment;
 import androidx.recyclerview.widget.LinearLayoutManager;
 import androidx.recyclerview.widget.RecyclerView;
+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
 import io.github.muntashirakon.AppManager.BuildConfig;
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.activities.AppDetailsActivity;
@@ -71,7 +72,6 @@
 import io.github.muntashirakon.AppManager.activities.SharedPrefsActivity;
 import io.github.muntashirakon.AppManager.runner.Runner;
 import io.github.muntashirakon.AppManager.storage.compontents.TrackerComponentUtils;
-import io.github.muntashirakon.AppManager.types.ScrollSafeSwipeRefreshLayout;
 import io.github.muntashirakon.AppManager.usage.AppUsageStatsManager;
 import io.github.muntashirakon.AppManager.utils.AppPref;
 import io.github.muntashirakon.AppManager.utils.IOUtils;
@@ -82,7 +82,7 @@
 import io.github.muntashirakon.AppManager.viewmodels.AppDetailsViewModel;
 
 public class AppInfoFragment extends Fragment
-        implements ScrollSafeSwipeRefreshLayout.OnRefreshListener {
+        implements SwipeRefreshLayout.OnRefreshListener {
     private static final String UID_STATS_PATH = "/proc/uid_stat/";
     private static final String UID_STATS_TR = "tcp_rcv";
     private static final String UID_STATS_RC = "tcp_snd";
@@ -109,7 +109,7 @@ public class AppInfoFragment extends Fragment
     private ChipGroup mTagCloud;
     @SuppressLint("SimpleDateFormat")
     private SimpleDateFormat mDateFormatter = new SimpleDateFormat("EE LLL dd yyyy kk:mm:ss");
-    private ScrollSafeSwipeRefreshLayout mSwipeRefresh;
+    private SwipeRefreshLayout mSwipeRefresh;
     private int mAccentColor;
     private CharSequence mPackageLabel;
     private ProgressIndicator mProgressIndicator;

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/AppUsageActivity.java
Patch:
@@ -54,7 +54,8 @@
 import static io.github.muntashirakon.AppManager.usage.Utils.USAGE_WEEKLY;
 import static io.github.muntashirakon.AppManager.usage.Utils.USAGE_YESTERDAY;
 
-public class AppUsageActivity extends AppCompatActivity implements ListView.OnItemClickListener, ScrollSafeSwipeRefreshLayout.OnRefreshListener {
+public class AppUsageActivity extends AppCompatActivity implements ListView.OnItemClickListener,
+        ScrollSafeSwipeRefreshLayout.OnRefreshListener {
     @IntDef(value = {
             SORT_BY_APP_LABEL,
             SORT_BY_LAST_USED,

File: app/src/main/java/io/github/muntashirakon/AppManager/fragments/AppDetailsFragment.java
Patch:
@@ -267,10 +267,10 @@ public void onCreateOptionsMenu(@NonNull Menu menu, @NonNull MenuInflater inflat
     public void onPrepareOptionsMenu(@NonNull Menu menu) {
         if (isExternalApk) return;
         if (neededProperty == APP_INFO) super.onPrepareOptionsMenu(menu);
-        else if (neededProperty <= PROVIDERS)
+        else if (neededProperty <= PROVIDERS) {
             if (AppPref.isRootEnabled())
                 menu.findItem(sSortMenuItemIdsMap[model.getSortBy()]).setChecked(true);
-        else if (neededProperty <= USES_PERMISSIONS)
+        } else if (neededProperty <= USES_PERMISSIONS)
             menu.findItem(sSortMenuItemIdsMap[model.getSortBy()]).setChecked(true);
     }
 

File: app/src/main/java/com/google/classysharkandroid/utils/UriUtils.java
Patch:
@@ -41,7 +41,7 @@ public static boolean isAttach(Uri uriFromIntent) {
 
     @Nullable
     public static String pathUriCache(@NonNull Context context, Uri uri, String nCache) {
-        File f = new File(context.getCacheDir(), nCache);
+        File f = new File(context.getFilesDir(), nCache);
         try {
             FileOutputStream fos = new FileOutputStream(f);
             InputStream is = context.getContentResolver().openInputStream(uri);

File: app/src/main/java/io/github/muntashirakon/AppManager/viewmodels/AppDetailsViewModel.java
Patch:
@@ -172,8 +172,9 @@ public void updateRulesForComponent(String componentName, RulesStorageManager.Ty
                     blocker.addComponent(componentName, type);
                 }
                 // Apply rules if global blocking enable or already applied
+                //noinspection ConstantConditions
                 if ((Boolean) AppPref.get(AppPref.PrefKey.PREF_GLOBAL_BLOCKING_ENABLED_BOOL)
-                        || blocker.isRulesApplied()) {
+                        || (ruleApplicationStatus != null && ruleApplicationStatus.getValue() == RULE_APPLIED)) {
                     blocker.applyRules(true);
                 }
                 // Set new status

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/AppInfoActivity.java
Patch:
@@ -570,7 +570,7 @@ private void setVerticalView()  {
 
         // Net statistics
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-            if ((Boolean) AppPref.get(AppPref.PREF_USAGE_ACCESS_ENABLED, AppPref.TYPE_BOOLEAN)) {
+            if ((Boolean) AppPref.get(AppPref.PrefKey.PREF_USAGE_ACCESS_ENABLED_BOOL)) {
                 Tuple<Tuple<Long, Long>, Tuple<Long, Long>> dataUsage = AppUsageStatsManager
                         .getWifiMobileUsageForPackage(this, mPackageName,
                                 io.github.muntashirakon.AppManager.usage.Utils.USAGE_LAST_BOOT);
@@ -592,7 +592,7 @@ private void setVerticalView()  {
         }
 
         // Storage and Cache
-        if ((Boolean) AppPref.get(AppPref.PREF_USAGE_ACCESS_ENABLED, AppPref.TYPE_BOOLEAN))
+        if ((Boolean) AppPref.get(AppPref.PrefKey.PREF_USAGE_ACCESS_ENABLED_BOOL))
             getPackageSizeInfo();
     }
 
@@ -674,7 +674,7 @@ public void onGetStatsCompleted(final PackageStats pStats, boolean succeeded) {
                                 Settings.ACTION_USAGE_ACCESS_SETTINGS), 0))
                         .setNegativeButton(android.R.string.cancel, null)
                         .setNeutralButton(R.string.never_ask, (dialog, which) ->
-                                AppPref.getInstance().setPref(AppPref.PREF_USAGE_ACCESS_ENABLED, false))
+                                AppPref.getInstance().setPref(AppPref.PrefKey.PREF_USAGE_ACCESS_ENABLED_BOOL, false))
                         .setCancelable(false)
                         .show();
                 return;

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/RunningAppsActivity.java
Patch:
@@ -105,7 +105,7 @@ protected void onCreate(Bundle savedInstanceState) {
         mAdapter = new RunningAppsAdapter(this);
         mListView.setAdapter(mAdapter);
         mConstraint = null;
-        enableKillForSystem = (boolean) AppPref.get(AppPref.PREF_ENABLE_KILL_FOR_SYSTEM, AppPref.TYPE_BOOLEAN);
+        enableKillForSystem = (boolean) AppPref.get(AppPref.PrefKey.PREF_ENABLE_KILL_FOR_SYSTEM_BOOL);
         refresh();
     }
 
@@ -127,7 +127,7 @@ public boolean onOptionsItemSelected(@NonNull MenuItem item) {
                 return true;
             case R.id.action_toggle_kill:
                 enableKillForSystem = !enableKillForSystem;
-                AppPref.getInstance().setPref(AppPref.PREF_ENABLE_KILL_FOR_SYSTEM, enableKillForSystem);
+                AppPref.getInstance().setPref(AppPref.PrefKey.PREF_ENABLE_KILL_FOR_SYSTEM_BOOL, enableKillForSystem);
                 refresh();
                 return true;
         }

File: app/src/main/java/io/github/muntashirakon/AppManager/viewmodels/AppDetailsViewModel.java
Patch:
@@ -172,8 +172,8 @@ public void updateRulesForComponent(String componentName, RulesStorageManager.Ty
                     blocker.addComponent(componentName, type);
                 }
                 // Apply rules if global blocking enable or already applied
-                if ((Boolean) AppPref.get(AppPref.PREF_GLOBAL_BLOCKING_ENABLED,
-                        AppPref.TYPE_BOOLEAN) || blocker.isRulesApplied()) {
+                if ((Boolean) AppPref.get(AppPref.PrefKey.PREF_GLOBAL_BLOCKING_ENABLED_BOOL)
+                        || blocker.isRulesApplied()) {
                     blocker.applyRules(true);
                 }
                 // Set new status

File: app/src/main/java/io/github/muntashirakon/AppManager/fragments/AppDetailsFragment.java
Patch:
@@ -1198,6 +1198,7 @@ private void getUsesPermissionsView(@NonNull ViewHolder holder, int index) {
                                         appDetailsItem.isDangerous = permissionItem.isDangerous;
                                         appDetailsItem.isGranted = isGranted;
                                         set(index, appDetailsItem);
+                                        mainModel.setUsesPermission(appDetailsItem.name, isGranted);
                                     } catch (PackageManager.NameNotFoundException ignore) {}
                                 });
                             } else {

File: app/src/main/java/io/github/muntashirakon/AppManager/fragments/AppDetailsFragment.java
Patch:
@@ -497,7 +497,6 @@ void setDefaultList(List<AppDetailsItem> list) {
                 if (requestedProperty == SERVICES) {
                     if (isRootEnabled || isADBEnabled)
                         runningServices = PackageUtils.getRunningServicesForPackage(mPackageName);
-                    else runningServices = new ArrayList<>();
                 }
                 mDefaultList = mAdapterList;
                 final AtomicInteger rules_msg_visibility = new AtomicInteger(View.GONE);
@@ -932,7 +931,7 @@ private void getServicesView(@NonNull ViewHolder holder, int index) {
             if (appDetailsItem.isBlocked) view.setBackgroundColor(mColorRed);
             else if (isComponentDisabled(mPackageManager, serviceInfo)) view.setBackgroundColor(mColorDisabled);
             else if (appDetailsItem.isTracker) view.setBackgroundColor(mColorTracker);
-            else if (runningServices.contains(serviceInfo.name)) view.setBackgroundColor(mColorRunning);
+            else if (runningServices != null && runningServices.contains(serviceInfo.name)) view.setBackgroundColor(mColorRunning);
             else view.setBackgroundColor(index % 2 == 0 ? mColorGrey1 : mColorGrey2);
             // Label
             holder.textView1.setText(Utils.camelCaseToSpaceSeparatedString(Utils.getLastComponent(serviceInfo.name)));

File: app/src/main/java/io/github/muntashirakon/AppManager/runner/RootShellRunner.java
Patch:
@@ -21,7 +21,7 @@ public static Result runCommand(String command) {
     }
 
     @Override
-    synchronized public Result runCommand() {
+    public Result runCommand() {
         CommandResult result = Shell.SU.run(TextUtils.join("; ", commands));
         clear();
         lastResult = new Result() {

File: app/src/main/java/io/github/muntashirakon/AppManager/runner/Runner.java
Patch:
@@ -38,7 +38,7 @@ public static Runner getInstance() {
         return runner;
     }
 
-    public static Result runCommand(String command) {
+    synchronized public static Result runCommand(String command) {
         return getInstance().run(command);
     }
 

File: app/src/main/java/io/github/muntashirakon/AppManager/storage/compontents/ComponentsBlocker.java
Patch:
@@ -245,7 +245,7 @@ public boolean isRulesApplied() {
         List<RulesStorageManager.Entry> entries = getAllComponents();
         if (AppPref.isRootEnabled() && Runner.runCommand(String.format("test -e '%s%s.xml'",
                 SYSTEM_RULES_PATH, packageName)).isSuccessful()) return true;
-        for (RulesStorageManager.Entry entry: entries) if (!((Boolean) entry.extra)) return false;
+        for (RulesStorageManager.Entry entry: entries) if (entry.extra == COMPONENT_TO_BE_BLOCKED) return false;
         return true;
     }
 

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/MainActivity.java
Patch:
@@ -468,7 +468,7 @@ protected void onStart() {
         super.onStart();
         // Check root
         AppPref.getInstance().setPref(AppPref.PREF_ADB_MODE_ENABLED, false);
-        if (!Utils.isRootGiven(this)) {
+        if (!Utils.isRootGiven()) {
             AppPref.getInstance().setPref(AppPref.PREF_ROOT_MODE_ENABLED, false);
             // Check for adb
             new Thread(() -> {

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/RunningAppsActivity.java
Patch:
@@ -290,7 +290,7 @@ public View getView(int position, View convertView, ViewGroup parent) {
             if (applicationInfo != null) {
                 holder.forceStopBtn.setVisibility(View.VISIBLE);
                 holder.forceStopBtn.setOnClickListener(v -> new Thread(() -> {
-                    if (Runner.run(mActivity, String.format("am force-stop %s", applicationInfo.packageName)).isSuccessful()) {
+                    if (Runner.runCommand(String.format("am force-stop %s", applicationInfo.packageName)).isSuccessful()) {
                         mActivity.runOnUiThread(() -> mActivity.refresh());
                     } else {
                         mActivity.runOnUiThread(() -> Toast.makeText(mActivity, String.format(mActivity.getString(R.string.failed_to_stop), processName), Toast.LENGTH_LONG).show());
@@ -327,7 +327,7 @@ public View getView(int position, View convertView, ViewGroup parent) {
             if ((processItem.pid >= 10000 || enableKillForSystem) && !isAdbMode) {
                 holder.killBtn.setVisibility(View.VISIBLE);
                 holder.killBtn.setOnClickListener(v -> new Thread(() -> {
-                    if (Runner.run(mActivity, String.format(Locale.ROOT, "kill -9 %d", processItem.pid)).isSuccessful()) {
+                    if (Runner.runCommand(String.format(Locale.ROOT, "kill -9 %d", processItem.pid)).isSuccessful()) {
                         mActivity.runOnUiThread(() -> mActivity.refresh());
                     } else {
                         mActivity.runOnUiThread(() -> Toast.makeText(mActivity, String.format(mActivity.getString(R.string.failed_to_stop), processName), Toast.LENGTH_LONG).show());
@@ -425,7 +425,7 @@ class ProcessRefreshingThread extends Thread {
         @Override
         public void run() {
             List<ApplicationInfo> applicationInfoList = mPackageManager.getInstalledApplications(PackageManager.GET_META_DATA);
-            Runner.run(RunningAppsActivity.this, "ps -dwZ -o PID,PPID,RSS,VSZ,USER,UID,STAT,NAME | grep -v :kernel:");
+            Runner.runCommand("ps -dwZ -o PID,PPID,RSS,VSZ,USER,UID,STAT,NAME | grep -v :kernel:");
             if (Runner.getLastResult().isSuccessful()) {
                 List<String> processInfoLines = Runner.getLastResult().getOutputAsList(1);
                 HashMap<String, ProcessItem> processList = new HashMap<>();

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/SharedPrefsActivity.java
Patch:
@@ -173,7 +173,7 @@ public boolean onOptionsItemSelected(@NonNull MenuItem item) {
                 return true;
             case R.id.action_delete:
                 // Make sure it's a file and then delete
-                boolean isSuccess = Runner.run(this, String.format("[ -f '%s' ] && rm -f '%s'",
+                boolean isSuccess = Runner.runCommand(String.format("[ -f '%s' ] && rm -f '%s'",
                         mSharedPrefFile, mSharedPrefFile)).isSuccessful();
                 if (isSuccess) {
                     Toast.makeText(this, R.string.deleted_successfully, Toast.LENGTH_LONG).show();
@@ -282,7 +282,7 @@ private class SharedPrefsReaderThread extends Thread {
         @Override
         public void run() {
             String sharedPrefPath = mTempSharedPrefFile.getAbsolutePath();
-            if(!Runner.run(SharedPrefsActivity.this, String.format("cp '%s' '%s' && chmod 0666 '%s'", mSharedPrefFile,
+            if(!Runner.runCommand(String.format("cp '%s' '%s' && chmod 0666 '%s'", mSharedPrefFile,
                     sharedPrefPath, sharedPrefPath)).isSuccessful()) {
                 runOnUiThread(SharedPrefsActivity.this::finish);
             }
@@ -337,7 +337,7 @@ private boolean writeSharedPref(File sharedPrefsFile, @NonNull HashMap<String, O
             xmlSerializer.flush();
             xmlFile.write(stringWriter.toString().getBytes());
             xmlFile.close();
-            return Runner.run(this, String.format("cp '%s' '%s' && chmod 0666 '%s'", sharedPrefsFile,
+            return Runner.runCommand(String.format("cp '%s' '%s' && chmod 0666 '%s'", sharedPrefsFile,
                     mSharedPrefFile, mSharedPrefFile)).isSuccessful();
         } catch (IOException e) {
             e.printStackTrace();

File: app/src/main/java/io/github/muntashirakon/AppManager/appops/AppOpsService.java
Patch:
@@ -138,7 +138,7 @@ public void resetAllModes(int reqUserId, @NonNull String reqPackageName) throws
      * @param command The command to run
      */
     private void runCommand(String command) {
-        Runner.Result result = Runner.run(context, command);
+        Runner.Result result = Runner.runCommand(command);
         isSuccessful = result.isSuccessful();
         output = result.getOutputAsList();
     }

File: app/src/main/java/io/github/muntashirakon/AppManager/fragments/AppDetailsFragment.java
Patch:
@@ -58,7 +58,6 @@
 import io.github.muntashirakon.AppManager.activities.AppInfoActivity;
 import io.github.muntashirakon.AppManager.appops.AppOpsManager;
 import io.github.muntashirakon.AppManager.appops.AppOpsService;
-import io.github.muntashirakon.AppManager.runner.Runner;
 import io.github.muntashirakon.AppManager.storage.RulesStorageManager;
 import io.github.muntashirakon.AppManager.storage.compontents.ComponentsBlocker;
 import io.github.muntashirakon.AppManager.storage.compontents.ExternalComponentsImporter;
@@ -70,6 +69,7 @@
 import io.github.muntashirakon.AppManager.utils.AppPref;
 import io.github.muntashirakon.AppManager.utils.LauncherIconCreator;
 import io.github.muntashirakon.AppManager.utils.PackageUtils;
+import io.github.muntashirakon.AppManager.utils.RunnerUtils;
 import io.github.muntashirakon.AppManager.utils.Utils;
 import io.github.muntashirakon.AppManager.viewmodels.AppDetailsFragmentViewModel;
 import io.github.muntashirakon.AppManager.viewmodels.AppDetailsViewModel;
@@ -1306,7 +1306,7 @@ private void getUsesPermissionsView(@NonNull ViewHolder holder, int index) {
                         final AtomicBoolean permGranted = new AtomicBoolean(false);
                         if (isChecked) {
                             // Enable permission
-                            if (!Runner.run(mActivity, String.format("pm grant %s %s", mPackageName, permName)).isSuccessful()) {
+                            if (!RunnerUtils.grantPermission(mPackageName, permName).isSuccessful()) {
                                 mActivity.runOnUiThread(() -> {
                                     Toast.makeText(mActivity, "Failed to grant permission.", Toast.LENGTH_SHORT).show();
                                     notifyItemChanged(index);
@@ -1320,7 +1320,7 @@ private void getUsesPermissionsView(@NonNull ViewHolder holder, int index) {
                             }
                         } else {
                             // Disable permission
-                            if (!Runner.run(mActivity, String.format("pm revoke %s %s", mPackageName, permName)).isSuccessful()) {
+                            if (!RunnerUtils.revokePermission(mPackageName, permName).isSuccessful()) {
                                 mActivity.runOnUiThread(() -> {
                                     Toast.makeText(mActivity, "Failed to revoke permission.", Toast.LENGTH_SHORT).show();
                                     notifyItemChanged(index);

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/PackageUtils.java
Patch:
@@ -116,7 +116,7 @@ public static boolean isComponentDisabledByUser(@NonNull PackageManager pm, @Non
     @NonNull
     public static List<String> getRunningServicesForPackage(String packageName) {
         List<String> runningServices = new ArrayList<>();
-        Runner.run(AppManager.getContext(), "dumpsys activity services -p " + packageName);
+        Runner.runCommand("dumpsys activity services -p " + packageName);
         if (Runner.getLastResult().isSuccessful()) {
             List<String> serviceDump = Runner.getLastResult().getOutputAsList();
             Matcher matcher;

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/Utils.java
Patch:
@@ -630,9 +630,9 @@ public static int getThemeColor(@NonNull Context context, int resAttrColor) { //
         return typedValue.data;
     }
 
-    public static boolean isRootGiven(Context context) {
+    public static boolean isRootGiven() {
         if (isRootAvailable()) {
-            String output = RootShellRunner.run(context, "id").getOutput();
+            String output = RootShellRunner.runCommand("id").getOutput();
             return output != null && output.toLowerCase().contains("uid=0");
         }
         return false;

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/AppInfoActivity.java
Patch:
@@ -57,11 +57,11 @@
 import androidx.appcompat.view.menu.MenuBuilder;
 import androidx.core.app.ShareCompat;
 import androidx.core.content.FileProvider;
-import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
 import io.github.muntashirakon.AppManager.BuildConfig;
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.fragments.RulesTypeSelectionDialogFragment;
 import io.github.muntashirakon.AppManager.runner.Runner;
+import io.github.muntashirakon.AppManager.types.ScrollSafeSwipeRefreshLayout;
 import io.github.muntashirakon.AppManager.usage.AppUsageStatsManager;
 import io.github.muntashirakon.AppManager.utils.AppPref;
 import io.github.muntashirakon.AppManager.utils.ListItemCreator;
@@ -70,7 +70,7 @@
 
 import static io.github.muntashirakon.AppManager.utils.IOUtils.deleteDir;
 
-public class AppInfoActivity extends AppCompatActivity implements SwipeRefreshLayout.OnRefreshListener {
+public class AppInfoActivity extends AppCompatActivity implements ScrollSafeSwipeRefreshLayout.OnRefreshListener {
     public static final String EXTRA_PACKAGE_NAME = "pkg";
 
     private static final String UID_STATS_PATH = "/proc/uid_stat/";
@@ -100,7 +100,7 @@ public class AppInfoActivity extends AppCompatActivity implements SwipeRefreshLa
     @SuppressLint("SimpleDateFormat")
     private SimpleDateFormat mDateFormatter = new SimpleDateFormat("EE LLL dd yyyy kk:mm:ss");
     private ListItemCreator mList;
-    private SwipeRefreshLayout mSwipeRefresh;
+    private ScrollSafeSwipeRefreshLayout mSwipeRefresh;
     private int mAccentColor;
     private CharSequence mPackageLabel;
     private ProgressIndicator mProgressIndicator;

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/AppUsageActivity.java
Patch:
@@ -43,9 +43,9 @@
 import androidx.appcompat.app.ActionBar;
 import androidx.appcompat.app.AppCompatActivity;
 import androidx.appcompat.view.menu.MenuBuilder;
-import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.fragments.AppUsageDetailsDialogFragment;
+import io.github.muntashirakon.AppManager.types.ScrollSafeSwipeRefreshLayout;
 import io.github.muntashirakon.AppManager.usage.AppUsageStatsManager;
 import io.github.muntashirakon.AppManager.usage.Utils.IntervalType;
 import io.github.muntashirakon.AppManager.utils.Tuple;
@@ -56,7 +56,7 @@
 import static io.github.muntashirakon.AppManager.usage.Utils.USAGE_WEEKLY;
 import static io.github.muntashirakon.AppManager.usage.Utils.USAGE_YESTERDAY;
 
-public class AppUsageActivity extends AppCompatActivity implements ListView.OnItemClickListener, SwipeRefreshLayout.OnRefreshListener {
+public class AppUsageActivity extends AppCompatActivity implements ListView.OnItemClickListener, ScrollSafeSwipeRefreshLayout.OnRefreshListener {
     @IntDef(value = {
             SORT_BY_APP_LABEL,
             SORT_BY_LAST_USED,
@@ -82,7 +82,7 @@ public class AppUsageActivity extends AppCompatActivity implements ListView.OnIt
             R.id.action_sort_by_wifi_data};
 
     private ProgressIndicator mProgressIndicator;
-    private SwipeRefreshLayout mSwipeRefresh;
+    private ScrollSafeSwipeRefreshLayout mSwipeRefresh;
     private AppUsageAdapter mAppUsageAdapter;
     List<AppUsageStatsManager.PackageUS> mPackageUSList;
     private static long totalScreenTime;

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/MainActivity.java
Patch:
@@ -72,22 +72,22 @@
 import androidx.loader.content.Loader;
 import androidx.recyclerview.widget.LinearLayoutManager;
 import androidx.recyclerview.widget.RecyclerView;
-import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
 import io.github.muntashirakon.AppManager.MainLoader;
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.adb.AdbShell;
 import io.github.muntashirakon.AppManager.batchops.BatchOpsManager;
 import io.github.muntashirakon.AppManager.fragments.RulesTypeSelectionDialogFragment;
 import io.github.muntashirakon.AppManager.types.ApplicationItem;
 import io.github.muntashirakon.AppManager.types.FullscreenDialog;
+import io.github.muntashirakon.AppManager.types.ScrollSafeSwipeRefreshLayout;
 import io.github.muntashirakon.AppManager.utils.AppPref;
 import io.github.muntashirakon.AppManager.utils.Utils;
 
 import static androidx.appcompat.app.ActionBar.LayoutParams;
 
 public class MainActivity extends AppCompatActivity implements
         SearchView.OnQueryTextListener, LoaderManager.LoaderCallbacks<List<ApplicationItem>>,
-        SwipeRefreshLayout.OnRefreshListener {
+        ScrollSafeSwipeRefreshLayout.OnRefreshListener {
     public static final String EXTRA_PACKAGE_LIST = "EXTRA_PACKAGE_LIST";
     public static final String EXTRA_LIST_NAME = "EXTRA_LIST_NAME";
 
@@ -143,7 +143,7 @@ public class MainActivity extends AppCompatActivity implements
     private SearchView mSearchView;
     private ProgressIndicator mProgressIndicator;
     private LoaderManager mLoaderManager;
-    private SwipeRefreshLayout mSwipeRefresh;
+    private ScrollSafeSwipeRefreshLayout mSwipeRefresh;
     private BottomAppBar mBottomAppBar;
     private MaterialTextView mBottomAppBarCounter;
     private LinearLayoutCompat mMainLayout;

File: app/src/main/java/io/github/muntashirakon/AppManager/fragments/AppDetailsFragment.java
Patch:
@@ -53,7 +53,6 @@
 import androidx.lifecycle.ViewModelProvider;
 import androidx.recyclerview.widget.LinearLayoutManager;
 import androidx.recyclerview.widget.RecyclerView;
-import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.activities.AppDetailsActivity;
 import io.github.muntashirakon.AppManager.activities.AppInfoActivity;
@@ -66,6 +65,7 @@
 import io.github.muntashirakon.AppManager.types.AppDetailsItem;
 import io.github.muntashirakon.AppManager.types.AppDetailsPermissionItem;
 import io.github.muntashirakon.AppManager.types.RecyclerViewWithEmptyView;
+import io.github.muntashirakon.AppManager.types.ScrollSafeSwipeRefreshLayout;
 import io.github.muntashirakon.AppManager.utils.AppPref;
 import io.github.muntashirakon.AppManager.utils.LauncherIconCreator;
 import io.github.muntashirakon.AppManager.utils.PackageUtils;
@@ -75,7 +75,7 @@
 
 
 public class AppDetailsFragment extends Fragment implements SearchView.OnQueryTextListener,
-        SwipeRefreshLayout.OnRefreshListener {
+        ScrollSafeSwipeRefreshLayout.OnRefreshListener {
     @IntDef(value = {
             NONE,
             ACTIVITIES,
@@ -132,7 +132,7 @@ public class AppDetailsFragment extends Fragment implements SearchView.OnQueryTe
     private PackageManager mPackageManager;
     private AppDetailsActivity mActivity;
     private AppDetailsRecyclerAdapter mAdapter;
-    private SwipeRefreshLayout mSwipeRefresh;
+    private ScrollSafeSwipeRefreshLayout mSwipeRefresh;
     private MenuItem blockingToggler;
     private AppOpsService mAppOpsService;
     private ProgressIndicator mProgressIndicator;

File: app/src/main/java/io/github/muntashirakon/AppManager/fragments/AppDetailsFragment.java
Patch:
@@ -358,7 +358,7 @@ public boolean onQueryTextSubmit(String query) {
         return false;
     }
 
-    private void setSortBy(@SortOrder int sortBy) { // FIXME: Add param to adapter
+    private void setSortBy(@SortOrder int sortBy) {
         model.setSortBy(sortBy);
         if (mAdapter != null) mAdapter.sortList(sortBy);
     }

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/ClassViewerActivity.java
Patch:
@@ -69,8 +69,8 @@ protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         if (getIntent().getBooleanExtra(EXTRA_IS_WRAPPED, false))
             setContentView(R.layout.activity_any_viewer_wrapped);
-        else
-            setContentView(R.layout.activity_any_viewer);
+        else setContentView(R.layout.activity_any_viewer);
+        setSupportActionBar(findViewById(R.id.toolbar));
 
         mProgressIndicator = findViewById(R.id.progress_linear);
 

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/MainActivity.java
Patch:
@@ -698,7 +698,7 @@ protected FilterResults performFiltering(CharSequence charSequence) {
                         String constraint = charSequence.toString().toLowerCase(Locale.ROOT);
                         mConstraint = constraint;
                         FilterResults filterResults = new FilterResults();
-                        if (constraint.length() == 0) {
+                        if (constraint.length() == 0 || mDefaultList == null) {
                             filterResults.count = 0;
                             filterResults.values = null;
                             return filterResults;

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/SettingsActivity.java
Patch:
@@ -48,8 +48,7 @@ protected void onCreate(Bundle savedInstanceState) {
         });
         blockingSwitcher.setOnCheckedChangeListener((buttonView, isChecked) -> {
             appPref.setPref(AppPref.PREF_GLOBAL_BLOCKING_ENABLED, isChecked);
-            Boolean rootEnabled1 = (Boolean) appPref.getPref(AppPref.PREF_ROOT_MODE_ENABLED, AppPref.TYPE_BOOLEAN);
-            if (rootEnabled1 && isChecked) {
+            if (AppPref.isRootEnabled() && isChecked) {
                 ComponentsBlocker.applyAllRules(this);
             }
         });

File: app/src/main/java/io/github/muntashirakon/AppManager/storage/StorageManager.java
Patch:
@@ -10,7 +10,6 @@
 import java.io.FileReader;
 import java.io.IOException;
 import java.util.ArrayList;
-import java.util.Iterator;
 import java.util.List;
 import java.util.StringTokenizer;
 import java.util.concurrent.CopyOnWriteArrayList;
@@ -176,7 +175,7 @@ synchronized private void saveEntries(@NonNull List<Entry> finalEntries) throws
     }
 
     @NonNull
-    private File getDesiredFile() throws FileNotFoundException {
+    protected File getDesiredFile() throws FileNotFoundException {
         File file = new File(context.getFilesDir(), "conf");
         if (!file.exists() && !file.mkdirs()) {
             throw new FileNotFoundException("Can not get correct path to save ifw rules");

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/RunningAppsActivity.java
Patch:
@@ -297,13 +297,13 @@ public View getView(int position, View convertView, ViewGroup parent) {
                     }
                 }).start());
                 new Thread(() -> {
-                    int mode = AppOpsManager.MODE_DEFAULT;
+                    String mode = AppOpsManager.modeToName(AppOpsManager.MODE_DEFAULT);
                     try {
                         mode = new AppOpsService(mActivity).checkOperation(AppOpsManager.OP_RUN_IN_BACKGROUND, applicationInfo.uid, applicationInfo.packageName);
                     } catch (Exception ignore) {}
-                    int finalMode = mode;
+                    String finalMode = mode;
                     mActivity.runOnUiThread(() -> {
-                        if (finalMode != AppOpsManager.MODE_IGNORED) {
+                        if (!finalMode.equals(AppOpsManager.modeToName(AppOpsManager.MODE_IGNORED))) {
                             holder.disableBackgroundRunBtn.setVisibility(View.VISIBLE);
                             holder.disableBackgroundRunBtn.setOnClickListener(v -> new Thread(() -> {
                                 try {

File: app/src/main/java/io/github/muntashirakon/AppManager/appops/IAppOpsService.java
Patch:
@@ -3,8 +3,7 @@
 import java.util.List;
 
 interface IAppOpsService {
-    @AppOpsManager.Mode
-    int checkOperation(int op, int uid, String packageName) throws Exception;
+    String checkOperation(int op, int uid, String packageName) throws Exception;
     List<AppOpsManager.PackageOps> getOpsForPackage(int uid, String packageName, int[] ops) throws Exception;
     void setMode(int op, int uid, String packageName, int mode) throws Exception;
     void resetAllModes(int reqUserId, String reqPackageName) throws Exception;

File: app/src/main/java/io/github/muntashirakon/AppManager/fragments/AppDetailsFragment.java
Patch:
@@ -1134,7 +1134,7 @@ private View getAppOpsView(ViewGroup viewGroup, View convertView, int index) {
             }
             // Op Switch
             viewHolder.toggleSwitch.setVisibility(View.VISIBLE);
-            if (opEntry.getMode() == AppOpsManager.MODE_ALLOWED) {
+            if (opEntry.getMode().equals(AppOpsManager.modeToName(AppOpsManager.MODE_ALLOWED))) {
                 // op granted
                 viewHolder.toggleSwitch.setChecked(true);
             } else {
@@ -1150,7 +1150,7 @@ private View getAppOpsView(ViewGroup viewGroup, View convertView, int index) {
                         }
                         // TODO: Use AppOpsManager.getOpsForPackage() instead
                         AppOpsManager.OpEntry opEntry1 = new AppOpsManager.OpEntry(opEntry.getOp(),
-                                opEntry.isRunning(), AppOpsManager.MODE_ALLOWED, opEntry.getTime(),
+                                opEntry.isRunning(), AppOpsManager.modeToName(AppOpsManager.MODE_ALLOWED), opEntry.getTime(),
                                 opEntry.getRejectTime(), opEntry.getDuration(),
                                 opEntry.getProxyUid(), opEntry.getProxyPackageName());
                         AppDetailsItem appDetailsItem = new AppDetailsItem(opEntry1);
@@ -1171,7 +1171,7 @@ private View getAppOpsView(ViewGroup viewGroup, View convertView, int index) {
                         }
                         // TODO: Use AppOpsManager.getOpsForPackage() instead
                         AppOpsManager.OpEntry opEntry1 = new AppOpsManager.OpEntry(opEntry.getOp(),
-                                opEntry.isRunning(), AppOpsManager.MODE_IGNORED, opEntry.getTime(),
+                                opEntry.isRunning(), AppOpsManager.modeToName(AppOpsManager.MODE_IGNORED), opEntry.getTime(),
                                 opEntry.getRejectTime(), opEntry.getDuration(),
                                 opEntry.getProxyUid(), opEntry.getProxyPackageName());
                         AppDetailsItem appDetailsItem = new AppDetailsItem(opEntry1);

File: app/src/main/java/io/github/muntashirakon/AppManager/appops/AppOpsManager.java
Patch:
@@ -1799,6 +1799,7 @@ public static boolean opAllowsReset(int op) {
     public static int strOpToOp(@NonNull String op) {
         Integer val = sOpStrToOp.get(op);
         if (val == null) {
+            // TODO: Try old names
             throw new IllegalArgumentException("Unknown operation string: " + op);
         }
         return val;

File: app/src/main/java/io/github/muntashirakon/AppManager/compontents/ComponentsBlocker.java
Patch:
@@ -199,11 +199,13 @@ private void saveDisabledComponents() throws IOException {
     }
 
     /**
-     * Check whether rules are applied successfully
+     * Check whether previous rules are applied successfully
      * @return True if applied, false otherwise
      */
     public boolean isRulesApplied() {
         List<StorageManager.Entry> entries = getAllComponents();
+        if (Runner.run(context, String.format("test -e '%s%s.xml'", SYSTEM_RULES_PATH, packageName))
+                .isSuccessful()) return true;
         for (StorageManager.Entry entry: entries) if (!((Boolean) entry.extra)) return false;
         return true;
     }

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/RunningAppsActivity.java
Patch:
@@ -40,8 +40,8 @@
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.appops.AppOpsManager;
 import io.github.muntashirakon.AppManager.appops.AppOpsService;
+import io.github.muntashirakon.AppManager.compontents.ComponentsBlocker;
 import io.github.muntashirakon.AppManager.runner.Runner;
-import io.github.muntashirakon.AppManager.storage.StorageManager;
 import io.github.muntashirakon.AppManager.utils.Utils;
 
 public class RunningAppsActivity extends AppCompatActivity implements SearchView.OnQueryTextListener {
@@ -277,8 +277,8 @@ public View getView(int position, View convertView, ViewGroup parent) {
                     holder.disableBackgroundRunBtn.setOnClickListener(v -> {
                         try {
                             new AppOpsService(mActivity).setMode(AppOpsManager.OP_RUN_IN_BACKGROUND, applicationInfo.uid, applicationInfo.packageName, AppOpsManager.MODE_IGNORED);
-                            try (StorageManager sm = StorageManager.getInstance(mActivity, applicationInfo.packageName)) {
-                                sm.setAppOp(String.valueOf(AppOpsManager.OP_RUN_IN_BACKGROUND), AppOpsManager.MODE_IGNORED);
+                            try (ComponentsBlocker cb = ComponentsBlocker.getMutableInstance(mActivity, applicationInfo.packageName)) {
+                                cb.setAppOp(String.valueOf(AppOpsManager.OP_RUN_IN_BACKGROUND), AppOpsManager.MODE_IGNORED);
                             }
                             mActivity.refresh();
                         } catch (Exception e) {

File: app/src/main/java/io/github/muntashirakon/AppManager/batchops/BatchOpsManager.java
Patch:
@@ -9,6 +9,7 @@
 import androidx.annotation.IntDef;
 import androidx.annotation.NonNull;
 import io.github.muntashirakon.AppManager.appops.AppOpsManager;
+import io.github.muntashirakon.AppManager.compontents.ComponentsBlocker;
 import io.github.muntashirakon.AppManager.runner.Runner;
 import io.github.muntashirakon.AppManager.storage.StorageManager;
 
@@ -102,8 +103,8 @@ private Result opDisableBackground() {
         List<String> failedPackages = result.failedPackages();
         for (String packageName: packageNames) {
             if (!failedPackages.contains(packageName)) {
-                try (StorageManager sm = StorageManager.getInstance(context, packageName)) {
-                    sm.setAppOp(String.valueOf(AppOpsManager.OP_RUN_IN_BACKGROUND), AppOpsManager.MODE_IGNORED);
+                try (ComponentsBlocker cb = ComponentsBlocker.getMutableInstance(context, packageName)) {
+                    cb.setAppOp(String.valueOf(AppOpsManager.OP_RUN_IN_BACKGROUND), AppOpsManager.MODE_IGNORED);
                 }
             }
         }

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/RunningAppsActivity.java
Patch:
@@ -277,7 +277,9 @@ public View getView(int position, View convertView, ViewGroup parent) {
                     holder.disableBackgroundRunBtn.setOnClickListener(v -> {
                         try {
                             new AppOpsService(mActivity).setMode(AppOpsManager.OP_RUN_IN_BACKGROUND, applicationInfo.uid, applicationInfo.packageName, AppOpsManager.MODE_IGNORED);
-                            StorageManager.getInstance(mActivity, applicationInfo.packageName).setAppOp(String.valueOf(AppOpsManager.OP_RUN_IN_BACKGROUND), AppOpsManager.MODE_IGNORED);
+                            try (StorageManager sm = StorageManager.getInstance(mActivity, applicationInfo.packageName)) {
+                                sm.setAppOp(String.valueOf(AppOpsManager.OP_RUN_IN_BACKGROUND), AppOpsManager.MODE_IGNORED);
+                            }
                             mActivity.refresh();
                         } catch (Exception e) {
                             Toast.makeText(mActivity, mActivity.getString(R.string.failed_to_disable_op), Toast.LENGTH_LONG).show();

File: app/src/main/java/io/github/muntashirakon/AppManager/batchops/BatchOpsManager.java
Patch:
@@ -102,9 +102,9 @@ private Result opDisableBackground() {
         List<String> failedPackages = result.failedPackages();
         for (String packageName: packageNames) {
             if (!failedPackages.contains(packageName)) {
-                StorageManager.getInstance(context, packageName).setAppOp(
-                        String.valueOf(AppOpsManager.OP_RUN_IN_BACKGROUND),
-                        AppOpsManager.MODE_IGNORED);
+                try (StorageManager sm = StorageManager.getInstance(context, packageName)) {
+                    sm.setAppOp(String.valueOf(AppOpsManager.OP_RUN_IN_BACKGROUND), AppOpsManager.MODE_IGNORED);
+                }
             }
         }
         return result;

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/AppDetailsActivity.java
Patch:
@@ -44,6 +44,7 @@ public class AppDetailsActivity extends AppCompatActivity {
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_app_details);
+        setSupportActionBar(findViewById(R.id.toolbar));
         mConstraint = null;
         mPackageName = getIntent().getStringExtra(AppInfoActivity.EXTRA_PACKAGE_NAME);
         if (mPackageName == null) {

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/AppInfoActivity.java
Patch:
@@ -101,6 +101,7 @@ public class AppInfoActivity extends AppCompatActivity implements SwipeRefreshLa
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_app_info);
+        setSupportActionBar(findViewById(R.id.toolbar));
         mPackageName = getIntent().getStringExtra(AppInfoActivity.EXTRA_PACKAGE_NAME);
         if (mPackageName == null) {
             Toast.makeText(this, getString(R.string.empty_package_name), Toast.LENGTH_LONG).show();

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/AppUsageActivity.java
Patch:
@@ -86,6 +86,7 @@ public class AppUsageActivity extends AppCompatActivity implements ListView.OnIt
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_app_usage);
+        setSupportActionBar(findViewById(R.id.toolbar));
         ActionBar actionBar = getSupportActionBar();
         if (actionBar != null) {
             actionBar.setTitle(getString(R.string.app_usage));

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/ClassListingActivity.java
Patch:
@@ -118,6 +118,7 @@ public void onSaveInstanceState(@NonNull Bundle outState) {
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_class_listing);
+        setSupportActionBar(findViewById(R.id.toolbar));
         mActionBar = getSupportActionBar();
         if (mActionBar != null) {
             mPackageName = getIntent().getStringExtra(EXTRA_PACKAGE_NAME);

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/MainActivity.java
Patch:
@@ -146,9 +146,9 @@ protected void onCreate(Bundle savedInstanceState) {
         mSwipeRefresh.setProgressBackgroundColorSchemeColor(Utils.getThemeColor(this, android.R.attr.colorPrimary));
         mSwipeRefresh.setOnRefreshListener(this);
 
+        setSupportActionBar(findViewById(R.id.toolbar));
         ActionBar actionBar = getSupportActionBar();
         if (actionBar != null) {
-            actionBar.setHomeAsUpIndicator(null);
             actionBar.setDisplayShowCustomEnabled(true);
             actionBar.setTitle(getString(R.string.loading));
 

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/ManifestViewerActivity.java
Patch:
@@ -55,6 +55,7 @@ protected void onCreate(Bundle savedInstanceState) {
             setContentView(R.layout.activity_any_viewer_wrapped);
         else
             setContentView(R.layout.activity_any_viewer);
+        setSupportActionBar(findViewById(R.id.toolbar));
 
         mProgressBar = findViewById(R.id.progress_horizontal);
 

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/RunningAppsActivity.java
Patch:
@@ -74,7 +74,7 @@ static class ProcessItem {
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_running_apps);
-
+        setSupportActionBar(findViewById(R.id.toolbar));
         ActionBar actionBar = getSupportActionBar();
         if (actionBar != null) {
             actionBar.setDisplayShowCustomEnabled(true);

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/SettingsActivity.java
Patch:
@@ -20,6 +20,7 @@ public class SettingsActivity extends AppCompatActivity {
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_settings);
+        setSupportActionBar(findViewById(R.id.toolbar));
         appPref = AppPref.getInstance(this);
 
         final SwitchMaterial rootSwitcher = findViewById(R.id.root_toggle_btn);

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/SharedPrefsActivity.java
Patch:
@@ -73,6 +73,7 @@ public class SharedPrefsActivity extends AppCompatActivity implements
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_shared_prefs);
+        setSupportActionBar(findViewById(R.id.toolbar));
         mSharedPrefFile = getIntent().getStringExtra(EXTRA_PREF_LOCATION);
         String appLabel = getIntent().getStringExtra(EXTRA_PREF_LABEL);
         if (mSharedPrefFile == null) {

File: app/src/main/java/io/github/muntashirakon/AppManager/fragments/AppDetailsFragment.java
Patch:
@@ -15,6 +15,7 @@
 import android.content.pm.ServiceInfo;
 import android.content.pm.Signature;
 import android.content.pm.SigningInfo;
+import android.content.res.Resources;
 import android.graphics.Color;
 import android.os.Build;
 import android.os.Bundle;
@@ -752,7 +753,7 @@ private View getActivityView(ViewGroup viewGroup, View convertView, int index) {
                     : activityLabel);
             boolean isExported = activityInfo.exported;
             launch.setEnabled(isExported);
-            if (isExported) {
+            if (isExported && !appDetailsItem.isBlocked) {
                 launch.setOnClickListener(view -> {
                     Intent intent = new Intent();
                     intent.setClassName(mPackageName, activityName);
@@ -773,7 +774,7 @@ private View getActivityView(ViewGroup viewGroup, View convertView, int index) {
                                 .getResourceName(activityInfo.getIconResource());
                     } catch (PackageManager.NameNotFoundException e) {
                         Toast.makeText(mActivity, e.toString(), Toast.LENGTH_LONG).show();
-                    }
+                    } catch (Resources.NotFoundException ignore) {}
                     LauncherIconCreator.createLauncherIcon(getActivity(), activityInfo,
                             (String) activityInfo.loadLabel(mPackageManager),
                             activityInfo.loadIcon(mPackageManager), iconResourceName);

File: app/src/main/java/io/github/muntashirakon/AppManager/fragments/EditShortcutDialogFragment.java
Patch:
@@ -72,7 +72,7 @@ public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {
         try {
             activityIconResourceName[0] = mPackageManager.getResourcesForActivity(activity).getResourceName(mActivityInfo.getIconResource());
             text_icon.setText(activityIconResourceName[0]);
-        } catch (PackageManager.NameNotFoundException ignored) {}
+        } catch (PackageManager.NameNotFoundException | Resources.NotFoundException ignored) {}
 
         text_icon.addTextChangedListener(new TextWatcher() {
             @Override

File: app/src/main/java/io/github/muntashirakon/AppManager/types/AppDetailsItem.java
Patch:
@@ -8,6 +8,7 @@
 public class AppDetailsItem {
     public @NonNull Object vanillaItem;
     public @NonNull String name = "";
+    public boolean isBlocked = false;
 
     public AppDetailsItem(@NonNull Object object) {
         vanillaItem = object;

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/AppDetailsActivity.java
Patch:
@@ -44,6 +44,7 @@ public class AppDetailsActivity extends AppCompatActivity {
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_app_details);
+        mConstraint = null;
         mPackageName = getIntent().getStringExtra(AppInfoActivity.EXTRA_PACKAGE_NAME);
         if (mPackageName == null) {
             Toast.makeText(this, getString(R.string.empty_package_name), Toast.LENGTH_LONG).show();

File: app/src/main/java/io/github/muntashirakon/AppManager/fragments/AppDetailsFragment.java
Patch:
@@ -19,6 +19,7 @@
 import android.os.Build;
 import android.os.Bundle;
 import android.os.PatternMatcher;
+import android.text.TextUtils;
 import android.view.LayoutInflater;
 import android.view.Menu;
 import android.view.MenuInflater;
@@ -752,7 +753,7 @@ private View getActivityView(ViewGroup viewGroup, View convertView, int index) {
             Button launch = viewHolder.launchBtn;
             String appLabel = mPackageInfo.applicationInfo.loadLabel(mPackageManager).toString();
             String activityLabel = activityInfo.loadLabel(mPackageManager).toString();
-            launch.setText(activityLabel.equals(appLabel) ?
+            launch.setText(activityLabel.equals(appLabel) || TextUtils.isEmpty(activityLabel) ?
                     Utils.camelCaseToSpaceSeparatedString(Utils.getLastComponent(activityInfo.name))
                     : activityLabel);
             boolean isExported = activityInfo.exported;

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/MainActivity.java
Patch:
@@ -289,6 +289,7 @@ public boolean onOptionsItemSelected(@NonNull MenuItem item) {
             case R.id.action_app_usage:
                 Intent usageIntent = new Intent(this, AppUsageActivity.class);
                 startActivity(usageIntent);
+                return true;
             case R.id.action_apk_updater:
                 try {
                     if(!getPackageManager().getApplicationInfo(PACKAGE_NAME_APK_UPDATER, 0).enabled)
@@ -300,6 +301,7 @@ public boolean onOptionsItemSelected(@NonNull MenuItem item) {
                         startActivity(intent);
                     } catch (Exception ignored) {}
                 } catch (PackageManager.NameNotFoundException ignored) {}
+                return true;
             default:
                 return super.onOptionsItemSelected(item);
         }

File: app/src/main/java/io/github/muntashirakon/AppManager/appops/AppOpsService.java
Patch:
@@ -92,7 +92,7 @@ public List<AppOpsManager.PackageOps> getOpsForPackage(int uid, String packageNa
                     String name = String.format("%s: %s", AppOpsManager.opToName(op), output.get(1).substring(DEFAULT_MODE_SKIP));
                     lines.add(name);
                 }
-                if (!isSuccessful) throw new Exception("Failed to get operations for package " + packageName);
+//                if (!isSuccessful) throw new Exception("Failed to get operations for package " + packageName);
             }
         }
         List<AppOpsManager.OpEntry> opEntries = new ArrayList<>();

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/ClassListingActivity.java
Patch:
@@ -482,13 +482,13 @@ public int getCount() {
         }
 
         @Override
-        public Object getItem(int position) {
+        public String getItem(int position) {
             return mAdapterList.get(position);
         }
 
         @Override
         public long getItemId(int position) {
-            return position;
+            return mDefaultList.indexOf(mAdapterList.get(position));
         }
 
         @Override

File: app/src/main/java/io/github/muntashirakon/AppManager/fragments/AppDetailsFragment.java
Patch:
@@ -1048,7 +1048,7 @@ private View getAppOpsView(ViewGroup viewGroup, View convertView, int index) {
             final String opName = mAdapterList.get(index).name;
             PermissionInfo permissionInfo = null;
             try {
-                String permName = AppOpsManager.opToPermission(opName);
+                String permName = AppOpsManager.opToPermission(opEntry.getOp());
                 if (permName != null)
                     permissionInfo = mPackageManager.getPermissionInfo(permName, PackageManager.GET_META_DATA);
             } catch (PackageManager.NameNotFoundException | IllegalArgumentException ignore) {}

File: app/src/main/java/io/github/muntashirakon/AppManager/appops/AppOpsManager.java
Patch:
@@ -1911,7 +1911,7 @@ public PackageOps[] newArray(int size) {
      */
     public static final class OpEntry implements Parcelable {
         private final int mOp;
-        private final boolean mRunning;
+        private final Boolean mRunning;
         private final @Mode int mMode;
         private final long mAccessTime;
         private final long mRejectTime;
@@ -2030,7 +2030,7 @@ public int describeContents() {
         public void writeToParcel(@NonNull Parcel dest, int flags) {
             dest.writeInt(mOp);
             dest.writeInt(mMode);
-            dest.writeBoolean(mRunning);
+            dest.writeValue(mRunning);
             dest.writeLong(mAccessTime);
             dest.writeLong(mRejectTime);
             dest.writeLong(mDuration);
@@ -2041,7 +2041,7 @@ public void writeToParcel(@NonNull Parcel dest, int flags) {
         OpEntry(@NonNull Parcel source) {
             mOp = source.readInt();
             mMode = source.readInt();
-            mRunning = source.readBoolean();
+            mRunning = (Boolean) source.readValue(getClass().getClassLoader());
             mAccessTime = source.readLong();
             mRejectTime = source.readLong();
             mDuration = source.readLong();

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/Utils.java
Patch:
@@ -1,6 +1,7 @@
 package io.github.muntashirakon.AppManager.utils;
 
 import android.Manifest;
+import android.annotation.TargetApi;
 import android.app.AppOpsManager;
 import android.content.Context;
 import android.content.pm.ActivityInfo;
@@ -49,6 +50,7 @@
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
+import androidx.annotation.RequiresApi;
 
 @SuppressWarnings("unused")
 public class Utils {
@@ -474,6 +476,7 @@ public static String getProperXml(@NonNull String dirtyXml) {
         }
     }
 
+    @TargetApi(29)
     public static int getSystemColor(@NonNull Context context, int resAttrColor) { // Ex. android.R.attr.colorPrimary
         // Get accent color
         TypedValue typedValue = new TypedValue();

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/ManifestViewerActivity.java
Patch:
@@ -6,7 +6,6 @@
 import android.content.pm.PackageManager;
 import android.os.AsyncTask;
 import android.os.Bundle;
-import android.text.Html;
 import android.text.Spanned;
 import android.view.Menu;
 import android.view.MenuItem;
@@ -22,6 +21,7 @@
 import androidx.appcompat.app.AppCompatActivity;
 import androidx.appcompat.view.menu.MenuBuilder;
 import androidx.core.content.ContextCompat;
+import androidx.core.text.HtmlCompat;
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.xmlapkparser.AXMLPrinter;
 
@@ -129,7 +129,7 @@ private void displayContent() {
         matcher.appendTail(sb);
         final ManifestViewerActivity activity = this;
         new Thread(() -> {
-            final Spanned spanned = Html.fromHtml(sb.toString());
+            final Spanned spanned = HtmlCompat.fromHtml(sb.toString(), HtmlCompat.FROM_HTML_MODE_LEGACY);
             runOnUiThread(() -> {
                 textView.setText(spanned);
                 activity.showProgressBar(false);

File: app/src/main/java/io/github/muntashirakon/AppManager/appops/AppOpsManager.java
Patch:
@@ -1085,7 +1085,7 @@ public static String flagsToString(@OpFlags int flags) {
             Manifest.permission.ADD_VOICEMAIL,
             Manifest.permission.USE_SIP,
             "Manifest.permission.PROCESS_OUTGOING_CALLS",
-            Manifest.permission.USE_FINGERPRINT,
+            "Manifest.permission.USE_FINGERPRINT",
             Manifest.permission.BODY_SENSORS,
             "Manifest.permission.READ_CELL_BROADCASTS",
             null,

File: app/src/main/java/io/github/muntashirakon/AppManager/fragments/AppDetailsFragment.java
Patch:
@@ -1067,7 +1067,7 @@ private View getAppOpsView(ViewGroup viewGroup, View convertView, int index) {
                 String protectionLevel = Utils.getProtectionLevelString(permissionInfo);
                 viewHolder.textView3.setText("\u2691 " + protectionLevel);
                 if (protectionLevel.contains("dangerous"))
-                    convertView.setBackgroundColor(mActivity.getResources().getColor(R.color.red));
+                    convertView.setBackgroundColor(ContextCompat.getColor(mActivity, R.color.red));
                 // Set package name
                 if (permissionInfo.packageName != null) {
                     viewHolder.textView4.setVisibility(View.VISIBLE);
@@ -1170,7 +1170,7 @@ private View getUsesPermissionsView(ViewGroup viewGroup, View convertView, int i
                 String protectionLevel = Utils.getProtectionLevelString(permissionInfo);
                 viewHolder.textView3.setText("\u2691 " + protectionLevel);
                 if (protectionLevel.contains("dangerous"))
-                    convertView.setBackgroundColor(mActivity.getResources().getColor(R.color.red));
+                    convertView.setBackgroundColor(ContextCompat.getColor(mActivity, R.color.red));
                 // Set package name
                 if (permissionInfo.packageName != null) {
                     viewHolder.textView4.setVisibility(View.VISIBLE);

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/SharedPrefsActivity.java
Patch:
@@ -41,6 +41,7 @@
 import androidx.appcompat.app.AppCompatActivity;
 import androidx.appcompat.view.menu.MenuBuilder;
 import androidx.appcompat.widget.SearchView;
+import androidx.core.content.ContextCompat;
 import androidx.fragment.app.DialogFragment;
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.fragments.EditPrefItemFragment;
@@ -363,8 +364,8 @@ static class ViewHolder {
             mLayoutInflater = activity.getLayoutInflater();
 
             mColorTransparent = Color.TRANSPARENT;
-            mColorSemiTransparent = activity.getResources().getColor(R.color.SEMI_TRANSPARENT);
-            mColorRed = activity.getResources().getColor(R.color.red);
+            mColorSemiTransparent = ContextCompat.getColor(activity, R.color.SEMI_TRANSPARENT);
+            mColorRed = ContextCompat.getColor(activity, R.color.red);
         }
 
         void setDefaultList(@NonNull HashMap<String, Object> list) {

File: app/src/main/java/io/github/muntashirakon/AppManager/fragments/IconPickerDialogFragment.java
Patch:
@@ -42,6 +42,7 @@ void attachIconPickerListener(IconPickerListener listener) {
     @NonNull
     @Override
     public Dialog onCreateDialog(Bundle savedInstanceState) {
+        assert getActivity() != null;
         AlertDialog.Builder builder = new AlertDialog.Builder(getActivity(), R.style.CustomDialog);
 
         if (getActivity() == null) return builder.create();

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/LauncherIconCreator.java
Patch:
@@ -117,7 +117,6 @@ private static void doCreateShortcut(Context context, String appName, Drawable d
             Bitmap bitmap = getBitmapFromDrawable(draw);
             intent.setAction(Intent.ACTION_CREATE_SHORTCUT);
 
-
             ShortcutInfo shortcutInfo = new ShortcutInfo.Builder(context, appName)
                     .setShortLabel(appName)
                     .setLongLabel(appName)

File: app/src/main/java/io/github/muntashirakon/AppManager/MainLoader.java
Patch:
@@ -11,6 +11,7 @@
 
 import androidx.loader.content.AsyncTaskLoader;
 import io.github.muntashirakon.AppManager.activities.MainActivity;
+import io.github.muntashirakon.AppManager.types.ApplicationItem;
 import io.github.muntashirakon.AppManager.utils.Tuple;
 import io.github.muntashirakon.AppManager.utils.Utils;
 

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/MainActivity.java
Patch:
@@ -59,7 +59,7 @@
 import androidx.loader.app.LoaderManager;
 import androidx.loader.content.Loader;
 import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
-import io.github.muntashirakon.AppManager.ApplicationItem;
+import io.github.muntashirakon.AppManager.types.ApplicationItem;
 import io.github.muntashirakon.AppManager.MainLoader;
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.utils.Utils;

File: app/src/main/java/io/github/muntashirakon/AppManager/fragments/AppDetailsFragment.java
Patch:
@@ -54,7 +54,7 @@
 import androidx.fragment.app.DialogFragment;
 import androidx.fragment.app.Fragment;
 import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
-import io.github.muntashirakon.AppManager.AppDetailsItem;
+import io.github.muntashirakon.AppManager.types.AppDetailsItem;
 import io.github.muntashirakon.AppManager.R;
 import io.github.muntashirakon.AppManager.activities.AppInfoActivity;
 import io.github.muntashirakon.AppManager.appops.AppOpsManager;

File: app/src/main/java/io/github/muntashirakon/AppManager/types/AppDetailsItem.java
Patch:
@@ -1,4 +1,4 @@
-package io.github.muntashirakon.AppManager;
+package io.github.muntashirakon.AppManager.types;
 
 import androidx.annotation.NonNull;
 

File: app/src/main/java/io/github/muntashirakon/AppManager/types/ApplicationItem.java
Patch:
@@ -1,4 +1,4 @@
-package io.github.muntashirakon.AppManager;
+package io.github.muntashirakon.AppManager.types;
 
 import android.content.pm.ApplicationInfo;
 

File: app/src/main/java/io/github/muntashirakon/AppManager/appops/AppOpsService.java
Patch:
@@ -17,9 +17,9 @@
 public
 class AppOpsService implements IAppOpsService {
     private static final Pattern OP_MATCHER = Pattern.compile("(?:Uid mode: )?(\\w+): (\\w+)" +
-            "(?:; time=(?:\\s*0|([+\\-])(\\d+d)?(\\d{1,2}h)?(\\d{1,2}m)?(\\d{1,2}s)?(\\d{1,3}ms)) ago)?" +
-            "(?:; rejectTime=(?:\\s*0|([+\\-])(\\d+d)?(\\d{1,2}h)?(\\d{1,2}m)?(\\d{1,2}s)?(\\d{1,3}ms)) ago)?" +
-            "( \\(running\\))?(?:; duration=(?:\\s*0|([+\\-])(\\d+d)?(\\d{1,2}h)?(\\d{1,2}m)?(\\d{1,2}s)?(\\d{1,3}ms)))?");
+            "(?:; time=(?:\\s*0|([+\\-])(\\d+d)?(\\d{1,2}h)?(\\d{1,2}m)?(\\d{1,2}s)?(\\d{1,3}m))s ago)?" +
+            "(?:; rejectTime=(?:\\s*0|([+\\-])(\\d+d)?(\\d{1,2}h)?(\\d{1,2}m)?(\\d{1,2}s)?(\\d{1,3}m))s ago)?" +
+            "( \\(running\\))?(?:; duration=(?:\\s*0|([+\\-])(\\d+d)?(\\d{1,2}h)?(\\d{1,2}m)?(\\d{1,2}s)?(\\d{1,3}m))s)?");
 
     private static final long[] TIME  = new long[]{
             86400000,  // DAY

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/MainActivity.java
Patch:
@@ -471,7 +471,7 @@ protected FilterResults performFiltering(CharSequence charSequence) {
                         List<ApplicationItem> list = new ArrayList<>(mDefaultList.size());
                         for (ApplicationItem item : mDefaultList) {
                             if (item.label.toLowerCase().contains(constraint) ||
-                                    item.applicationInfo.packageName.contains(constraint))
+                                    item.applicationInfo.packageName.toLowerCase().contains(constraint))
                                 list.add(item);
                         }
 
@@ -598,7 +598,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                 holder.label.setTextColor(Color.RED);
             else holder.label.setTextColor(mColorPrimary);
             // Set package name
-            if (mConstraint != null && info.packageName.contains(mConstraint)) {
+            if (mConstraint != null && info.packageName.toLowerCase().contains(mConstraint)) {
                 // Highlight searched query
                 holder.packageName.setText(Utils.getHighlightedText(info.packageName, mConstraint, mColorRed));
             } else {

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/SharedPrefsActivity.java
Patch:
@@ -6,6 +6,7 @@
 import android.os.Bundle;
 import android.text.Spannable;
 import android.text.style.BackgroundColorSpan;
+import android.util.Log;
 import android.util.Xml;
 import android.view.Gravity;
 import android.view.LayoutInflater;
@@ -150,13 +151,12 @@ public void sendInfo(@EditPrefItemFragment.Mode int mode, EditPrefItemFragment.P
                 case EditPrefItemFragment.MODE_CREATE:
                 case EditPrefItemFragment.MODE_EDIT:
                     mSharedPrefMap.put(prefItem.keyName, prefItem.keyValue);
-                    mAdapter.setDefaultList(mSharedPrefMap);
                     break;
                 case EditPrefItemFragment.MODE_DELETE:
                     mSharedPrefMap.remove(prefItem.keyName);
-                    mAdapter.setDefaultList(mSharedPrefMap);
                     break;
             }
+            mAdapter.setDefaultList(mSharedPrefMap);
         }
     }
 
@@ -227,6 +227,7 @@ private HashMap<String, Object> readSharedPref(File sharedPrefsFile) {
                 tagName = parser.getName();
                 if (event == XmlPullParser.START_TAG) {
                     attrName = parser.getAttributeValue(null, "name");
+                    if (attrName == null) attrName = "";
                     attrValue = parser.getAttributeValue(null, "value");
                     switch (tagName) {
                         case TAG_BOOLEAN:

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/AppInfoActivity.java
Patch:
@@ -424,7 +424,7 @@ private void setVerticalView()  {
             flags += (flags.length() == 0 ? "" : "|" ) + "FLAG_TEST_ONLY";
         if ((mPackageInfo.applicationInfo.flags & ApplicationInfo.FLAG_MULTIARCH) != 0)
             flags += (flags.length() == 0 ? "" : "|" ) + "FLAG_MULTIARCH";
-        if ((mPackageInfo.applicationInfo.flags & ApplicationInfo.FLAG_HARDWARE_ACCELERATED) == 0)
+        if ((mPackageInfo.applicationInfo.flags & ApplicationInfo.FLAG_HARDWARE_ACCELERATED) != 0)
             flags += (flags.length() == 0 ? "" : "|" ) + "FLAG_HARDWARE_ACCELERATED";
 
         if(flags.length() != 0) {

File: app/src/main/java/io/github/muntashirakon/AppManager/fragments/AppDetailsFragment.java
Patch:
@@ -6,7 +6,6 @@
 import android.content.ComponentName;
 import android.content.Intent;
 import android.content.pm.ActivityInfo;
-import android.content.pm.ApplicationInfo;
 import android.content.pm.ConfigurationInfo;
 import android.content.pm.FeatureInfo;
 import android.content.pm.PackageInfo;
@@ -41,7 +40,6 @@
 import java.io.IOException;
 import java.util.Arrays;
 import java.util.Objects;
-import java.util.Set;
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/AppUsageActivity.java
Patch:
@@ -126,7 +126,7 @@ private void getAppUsage() {
         Calendar cal = Calendar.getInstance();
         switch (current_interval) {
             case USAGE_DAILY:
-                cal.add(Calendar.HOUR_OF_DAY, -cal.get(Calendar.HOUR_OF_DAY));
+                cal.add(Calendar.MINUTE, -1);
                 break;
             case USAGE_WEEKLY:
                 cal.add(Calendar.DAY_OF_YEAR, -7);
@@ -187,6 +187,7 @@ private boolean checkUsageStatsPermission() {
             mode = appOpsManager.unsafeCheckOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS,
                     android.os.Process.myUid(), getPackageName());
         } else {
+            //noinspection deprecation
             mode = appOpsManager.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS,
                     android.os.Process.myUid(), getPackageName());
         }
@@ -278,7 +279,6 @@ static class ViewHolder {
         }
 
         void setDefaultList(List<UsageStats> list) {
-//            mDefaultList = list;
             mAdapterList = list;
             notifyDataSetChanged();
         }

File: app/src/main/java/io/github/muntashirakon/AppManager/fragments/AppDetailsFragment.java
Patch:
@@ -142,6 +142,7 @@ public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup c
         listView.setEmptyView(emptyView);
         mAdapter = new ActivitiesListAdapter();
         listView.setAdapter(mAdapter);
+        mSwipeRefresh.setOnChildScrollUpCallback((parent, child) -> listView.canScrollVertically(-1));
         return view;
     }
 

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/AppInfoActivity.java
Patch:
@@ -195,6 +195,7 @@ private void setHeaderView() {
         if ((mApplicationInfo.flags & ApplicationInfo.FLAG_LARGE_HEAP) != 0)isSystemAppView.setText(isSystemAppView.getText()+" + XLdalvik");
 
         // Horizontal layout //
+        horizontalLayout.removeAllViews();
         // Set uninstall
         addToHorizontalLayout(R.string.uninstall, R.drawable.ic_delete_black_24dp).setOnClickListener(v -> {
                 Intent uninstallIntent = new Intent(Intent.ACTION_DELETE);

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/ClassListingActivity.java
Patch:
@@ -159,7 +159,7 @@ protected void onCreate(Bundle savedInstanceState) {
         classesListAll  = new ClassesNamesList();
 
         if (inIntent.getData() != null)
-            packageInfo = "<b>" + getString(R.string.apk_path) + ": </b>"
+            packageInfo = "<b>" + getString(R.string.source_dir) + ": </b>"
                     + inIntent.getData().toString() + "\n";
         else packageInfo = "";
 

File: app/src/main/java/io/github/muntashirakon/AppManager/fragments/AppDetailsFragment.java
Patch:
@@ -875,6 +875,7 @@ private View getPermissionsView(ViewGroup viewGroup, View convertView, int index
                 convertView.findViewById(R.id.launch).setVisibility(View.GONE);
                 convertView.findViewById(R.id.create_shortcut_btn).setVisibility(View.GONE);
                 convertView.findViewById(R.id.edit_shortcut_btn).setVisibility(View.GONE);
+                convertView.findViewById(R.id.block_component).setVisibility(View.GONE);
             } else {
                 viewHolder = (ViewHolder) convertView.getTag();
             }

File: app/src/main/java/io/github/muntashirakon/AppManager/activities/ClassListingActivity.java
Patch:
@@ -238,7 +238,8 @@ public boolean onQueryTextSubmit(String query) {
 
     @Override
     public boolean onQueryTextChange(String newText) {
-        mClassListingAdapter.getFilter().filter(newText);
+        if (mClassListingAdapter != null)
+            mClassListingAdapter.getFilter().filter(newText);
         return true;
     }
 

File: app/src/main/java/com/google/classysharkandroid/adapters/StableArrayAdapter.java
Patch:
@@ -416,7 +416,7 @@ private View createViewFromResource(int position, View convertView, ViewGroup pa
                 text = (TextView) view;
             } else {
                 //  Otherwise, find the TextView field within the layout
-                text = (TextView) view.findViewById(mFieldId);
+                text = view.findViewById(mFieldId);
             }
         } catch (ClassCastException e) {
             Log.e("ArrayAdapter", "You must supply a resource ID for a TextView");

File: app/src/main/java/com/google/classysharkandroid/reflector/Reflector.java
Patch:
@@ -123,7 +123,7 @@ private Hashtable generateDependencies(Constructor[] constructors, Method[] meth
         }
 
         for (Constructor constructor : constructors) {
-            Class cx[] = constructor.getParameterTypes();
+            Class[] cx = constructor.getParameterTypes();
             if (cx.length > 0) {
                 for (Class aClass : cx) {
                     x = ClassTypeAlgorithm.TypeName(aClass.getName(), classRef);

File: app/src/main/java/io/github/muntashirakon/AppManager/utils/Utils.java
Patch:
@@ -23,6 +23,7 @@
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.StringWriter;
+import java.nio.charset.StandardCharsets;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
 import java.security.cert.CertificateException;
@@ -372,7 +373,7 @@ public static String getProperXml(String dirtyXml) {
         try {
             Document document = DocumentBuilderFactory.newInstance()
                     .newDocumentBuilder()
-                    .parse(new InputSource(new ByteArrayInputStream(dirtyXml.getBytes("utf-8"))));
+                    .parse(new InputSource(new ByteArrayInputStream(dirtyXml.getBytes(StandardCharsets.UTF_8))));
 
             XPath xPath = XPathFactory.newInstance().newXPath();
             NodeList nodeList = (NodeList) xPath.evaluate("//text()[normalize-space()='']",

File: app/src/main/java/com/majeur/applicationsinfo/utils/Utils.java
Patch:
@@ -36,7 +36,7 @@ public static int compareBooleans(boolean b1, boolean b2) {
 
     public static String getFileContent(File file) {
         if (file.isDirectory())
-            return null;
+            return "-1";
 
         try {
             Scanner scanner = new Scanner(file);
@@ -45,7 +45,7 @@ public static String getFileContent(File file) {
                 result += scanner.next();
             return result;
         } catch (FileNotFoundException e) {
-            return null;
+            return "-1";
         }
     }
 

File: app/src/main/java/com/majeur/applicationsinfo/utils/Utils.java
Patch:
@@ -12,7 +12,6 @@
 
 import java.io.File;
 import java.io.FileNotFoundException;
-import java.io.IOException;
 import java.util.Scanner;
 
 public class Utils {

