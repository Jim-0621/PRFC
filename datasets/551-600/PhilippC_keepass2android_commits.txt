File: src/java/JavaFileStorageTest-AS/app/src/main/java/com/crocoapps/javafilestoragetest2/MainActivity.java
Patch:
@@ -148,6 +148,7 @@
 import keepass2android.javafilestorage.GoogleDriveAppDataFileStorage;
 import keepass2android.javafilestorage.JavaFileStorage;
 import keepass2android.javafilestorage.JavaFileStorage.FileEntry;
+import keepass2android.javafilestorage.PCloudFileStorage;
 import keepass2android.javafilestorage.SftpStorage;
 import keepass2android.javafilestorage.UserInteractionRequiredException;
 import keepass2android.javafilestorage.WebDavStorage;
@@ -538,8 +539,8 @@ public void run() {
 	}
 
 	static JavaFileStorage createStorageToTest(Context ctx, Context appContext, boolean simulateRestart) {
-		storageToTest = new SftpStorage(ctx.getApplicationContext());
-		//storageToTest = new PCloudFileStorage(ctx, "yCeH59Ffgtm");
+		//storageToTest = new SftpStorage(ctx.getApplicationContext());
+		storageToTest = new PCloudFileStorage(ctx, "FLm22de7bdS", "pcloud", "pcloudtest");
 		//storageToTest = new SkyDriveFileStorage("000000004010C234", appContext);
 
 

File: src/java/android-filechooser-AS/app/src/main/java/group/pals/android/lib/ui/filechooser/FileChooserActivity.java
Patch:
@@ -221,7 +221,6 @@ public static enum ViewType {
     
     public static final String EXTRA_RESULT_FILE_EXISTS = CLASSNAME + ".result_file_exists";
     
-    
 
     /*
      * CONTROLS

File: src/java/android-filechooser-AS/app/src/main/java/keepass2android/kp2afilechooser/Kp2aFileChooserBridge.java
Patch:
@@ -20,6 +20,7 @@ public static Intent getLaunchFileChooserIntent(Context ctx, String authority, S
 		.buildUpon()
 		.appendPath(defaultPath)
 		.build());
+
 		return intent;
 	}
 }

File: src/java/JavaFileStorageTest-AS/app/src/main/java/com/crocoapps/javafilestoragetest2/MainActivity.java
Patch:
@@ -824,9 +824,10 @@ public void performManualFileSelect(boolean isForSave, final int requestCode,
 							EditText etKeyPassphrase = view.findViewById(R.id.private_key_passphrase);
 							String keyPassphrase = etKeyPassphrase.getText().toString();
 
+							// TODO: Add kex and shk configurability to SFTP dialog
 							onReceivePathForFileSelect(requestCode, sftpStorage1.buildFullPath(
 									host, port, initialDir, user, pwd, connectTimeout,
-									keyName, keyPassphrase, null));
+									keyName, keyPassphrase, null, null));
 						} catch (UnsupportedEncodingException e) {
 							e.printStackTrace();
 						}

File: src/java/android-filechooser-AS/app/src/main/java/keepass2android/kp2afilechooser/Kp2aFileProvider.java
Patch:
@@ -529,7 +529,7 @@ private RowBuilder addFileInfo(MatrixCursor matrixCursor, int id,
      *         parameters.
      */
     private MatrixCursor doRetrieveFileInfo(Uri uri) {
-    	Log.d(CLASSNAME, "retrieve file info "+uri.toString());
+
         MatrixCursor matrixCursor = BaseFileProviderUtils.newBaseFileCursor();
 
         String filename = extractFile(uri);

File: src/java/JavaFileStorage/app/src/main/java/keepass2android/javafilestorage/SftpStorage.java
Patch:
@@ -324,7 +324,7 @@ ChannelSftp init(String filename) throws JSchException, UnsupportedEncodingExcep
 		jsch = new JSch();
 		ConnectionInfo ci = splitStringToConnectionInfo(filename);
 
-		Log.e("KP2AJFS", "init SFTP");
+		Log.d("KP2AJFS", "init SFTP");
 
 		String base_dir = getBaseDir();
 		jsch.setKnownHosts(base_dir + "/known_hosts");

File: src/java/JavaFileStorage/app/src/main/java/com/jcraft/jsch/DHEC256.java
Patch:
@@ -29,7 +29,7 @@ LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 
 package com.jcraft.jsch;
 
-public class DHEC256 extends DHECN {
+class DHEC256 extends DHECN {
   public DHEC256(){
     sha_name="sha-256";
     key_size=256;

File: src/java/JavaFileStorage/app/src/main/java/com/jcraft/jsch/DHEC384.java
Patch:
@@ -29,7 +29,7 @@ LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 
 package com.jcraft.jsch;
 
-public class DHEC384 extends DHECN {
+class DHEC384 extends DHECN {
   public DHEC384(){
     sha_name="sha-384";
     key_size=384;

File: src/java/JavaFileStorage/app/src/main/java/com/jcraft/jsch/DHEC521.java
Patch:
@@ -29,7 +29,7 @@ LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 
 package com.jcraft.jsch;
 
-public class DHEC521 extends DHECN {
+class DHEC521 extends DHECN {
   public DHEC521(){
     sha_name="sha-512";
     key_size=521;

File: src/java/JavaFileStorage/app/src/main/java/com/jcraft/jsch/DHGEX256.java
Patch:
@@ -29,7 +29,7 @@ LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 
 package com.jcraft.jsch;
 
-public class DHGEX256 extends DHGEX {
+class DHGEX256 extends DHGEX {
   DHGEX256(){
     hash="sha-256";
   }

File: src/java/JavaFileStorage/app/src/main/java/com/jcraft/jsch/HASH.java
Patch:
@@ -34,4 +34,5 @@ public interface HASH{
   int getBlockSize();
   void update(byte[] foo, int start, int len) throws Exception;
   byte[] digest() throws Exception;
+  default String name() {return "";}
 }

File: src/java/JavaFileStorage/app/src/main/java/com/jcraft/jsch/JSchAuthCancelException.java
Patch:
@@ -30,7 +30,7 @@ LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 package com.jcraft.jsch;
 
 class JSchAuthCancelException extends JSchException{
-  //private static final long serialVersionUID=3204965907117900987L;
+  private static final long serialVersionUID=-1L;
   String method;
   JSchAuthCancelException () {
     super();

File: src/java/JavaFileStorage/app/src/main/java/com/jcraft/jsch/JSchPartialAuthException.java
Patch:
@@ -30,7 +30,7 @@ LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 package com.jcraft.jsch;
 
 class JSchPartialAuthException extends JSchException{
-  //private static final long serialVersionUID=-378849862323360367L;
+  private static final long serialVersionUID=-1L;
   String methods;
   public JSchPartialAuthException () {
     super();

File: src/java/JavaFileStorage/app/src/main/java/com/jcraft/jsch/MAC.java
Patch:
@@ -36,4 +36,5 @@ public interface MAC{
   void update(byte[] foo, int start, int len);
   void update(int foo);
   void doFinal(byte[] buf, int offset);
+  default boolean isEtM() {return false;}
 }

File: src/java/JavaFileStorage/app/src/main/java/com/jcraft/jsch/RequestAgentForwarding.java
Patch:
@@ -30,6 +30,7 @@ LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 package com.jcraft.jsch;
 
 class RequestAgentForwarding extends Request{
+  @Override
   public void request(Session session, Channel channel) throws Exception{
     super.request(session, channel);
 

File: src/java/JavaFileStorage/app/src/main/java/com/jcraft/jsch/RequestEnv.java
Patch:
@@ -36,8 +36,10 @@ void setEnv(byte[] name, byte[] value){
     this.name=name;
     this.value=value;
   }
+  @Override
   public void request(Session session, Channel channel) throws Exception{
     super.request(session, channel);
+    setReply(false);
 
     Buffer buf=new Buffer();
     Packet packet=new Packet(buf);
@@ -46,7 +48,7 @@ public void request(Session session, Channel channel) throws Exception{
     buf.putByte((byte) Session.SSH_MSG_CHANNEL_REQUEST);
     buf.putInt(channel.getRecipient());
     buf.putString(Util.str2byte("env"));
-    buf.putByte((byte)(waitForReply() ? 1 : 0));
+    buf.putByte((byte) 0);
     buf.putString(name);
     buf.putString(value);
     write(packet);

File: src/java/JavaFileStorage/app/src/main/java/com/jcraft/jsch/RequestExec.java
Patch:
@@ -34,6 +34,7 @@ class RequestExec extends Request{
   RequestExec(byte[] command){
     this.command=command;
   }
+  @Override
   public void request(Session session, Channel channel) throws Exception{
     super.request(session, channel);
 

File: src/java/JavaFileStorage/app/src/main/java/com/jcraft/jsch/RequestPtyReq.java
Patch:
@@ -56,6 +56,7 @@ void setTSize(int tcol, int trow, int twp, int thp){
     this.thp=thp;
   }
 
+  @Override
   public void request(Session session, Channel channel) throws Exception{
     super.request(session, channel);
 

File: src/java/JavaFileStorage/app/src/main/java/com/jcraft/jsch/RequestSftp.java
Patch:
@@ -29,10 +29,11 @@ LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 
 package com.jcraft.jsch;
 
-public class RequestSftp extends Request{
+class RequestSftp extends Request{
   RequestSftp(){
     setReply(true);
   }
+  @Override
   public void request(Session session, Channel channel) throws Exception{
     super.request(session, channel);
 

File: src/java/JavaFileStorage/app/src/main/java/com/jcraft/jsch/RequestShell.java
Patch:
@@ -30,6 +30,7 @@ LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 package com.jcraft.jsch;
 
 class RequestShell extends Request{
+  @Override
   public void request(Session session, Channel channel) throws Exception{
     super.request(session, channel);
 

File: src/java/JavaFileStorage/app/src/main/java/com/jcraft/jsch/RequestSignal.java
Patch:
@@ -32,6 +32,7 @@ LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 class RequestSignal extends Request{
   private String signal="KILL";
   public void setSignal(String foo){ signal=foo; }
+  @Override
   public void request(Session session, Channel channel) throws Exception{
     super.request(session, channel);
 

File: src/java/JavaFileStorage/app/src/main/java/com/jcraft/jsch/RequestSubsystem.java
Patch:
@@ -29,13 +29,14 @@ LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 
 package com.jcraft.jsch;
 
-public class RequestSubsystem extends Request{
+class RequestSubsystem extends Request{
   private String subsystem=null;
   public void request(Session session, Channel channel, String subsystem, boolean want_reply) throws Exception{
     setReply(want_reply);
     this.subsystem=subsystem;
     this.request(session, channel);
   }
+  @Override
   public void request(Session session, Channel channel) throws Exception{
     super.request(session, channel);
 

File: src/java/JavaFileStorage/app/src/main/java/com/jcraft/jsch/RequestWindowChange.java
Patch:
@@ -40,6 +40,7 @@ void setSize(int col, int row, int wp, int hp){
     this.width_pixels=wp;
     this.height_pixels=hp;
   }
+  @Override
   public void request(Session session, Channel channel) throws Exception{
     super.request(session, channel);
 

File: src/java/JavaFileStorage/app/src/main/java/com/jcraft/jsch/RequestX11.java
Patch:
@@ -33,6 +33,7 @@ class RequestX11 extends Request{
   public void setCookie(String cookie){
     ChannelX11.cookie=Util.str2byte(cookie);
   }
+  @Override
   public void request(Session session, Channel channel) throws Exception{
     super.request(session, channel);
 

File: src/java/JavaFileStorage/app/src/main/java/com/jcraft/jsch/SocketFactory.java
Patch:
@@ -34,7 +34,7 @@ LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 
 public interface SocketFactory{
   public Socket createSocket(String host, int port)throws IOException,
-							  UnknownHostException;
+                                                          UnknownHostException;
   public InputStream getInputStream(Socket socket)throws IOException;
   public OutputStream getOutputStream(Socket socket)throws IOException;
 }

File: src/java/JavaFileStorage/app/src/main/java/com/jcraft/jsch/jce/ECDH256.java
Patch:
@@ -28,7 +28,7 @@ LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 */
 
 package com.jcraft.jsch.jce;
- 
+
 public class ECDH256 extends ECDHN implements com.jcraft.jsch.ECDH {
   public void init() throws Exception {
     super.init(256);

File: src/java/JavaFileStorage/app/src/main/java/com/jcraft/jsch/jce/ECDH384.java
Patch:
@@ -28,7 +28,7 @@ LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 */
 
 package com.jcraft.jsch.jce;
- 
+
 public class ECDH384 extends ECDHN implements com.jcraft.jsch.ECDH {
   public void init() throws Exception {
     super.init(384);

File: src/java/JavaFileStorage/app/src/main/java/com/jcraft/jsch/jce/ECDH521.java
Patch:
@@ -28,7 +28,7 @@ LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 */
 
 package com.jcraft.jsch.jce;
- 
+
 public class ECDH521 extends ECDHN implements com.jcraft.jsch.ECDH {
   public void init() throws Exception {
     super.init(521);

File: src/java/JavaFileStorage/app/src/main/java/com/jcraft/jsch/jce/HMACMD596.java
Patch:
@@ -34,11 +34,13 @@ public HMACMD596(){
     name="hmac-md5-96";
   }
 
+  @Override
   public int getBlockSize(){
     return 12;
   };
 
   private final byte[] _buf16 = new byte[16];
+  @Override
   public void doFinal(byte[] buf, int offset){
     super.doFinal(_buf16, 0);
     System.arraycopy(_buf16, 0, buf, offset, 12);

File: src/java/JavaFileStorage/app/src/main/java/com/jcraft/jsch/jce/HMACSHA196.java
Patch:
@@ -35,11 +35,13 @@ public HMACSHA196(){
     name = "hmac-sha1-96";
   }
 
+  @Override
   public int getBlockSize(){
     return 12;
   };
 
   private final byte[] _buf20 = new byte[20];
+  @Override
   public void doFinal(byte[] buf, int offset){
     super.doFinal(_buf20, 0);
     System.arraycopy(_buf20, 0, buf, offset, 12);

File: src/java/JavaFileStorage/app/src/main/java/com/jcraft/jsch/jce/PBKDF.java
Patch:
@@ -37,6 +37,7 @@ LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 import java.security.NoSuchAlgorithmException;
 
 public class PBKDF implements com.jcraft.jsch.PBKDF{
+  @Override
   public byte[] getKey(byte[] _pass, byte[] salt, int iterations, int size){
     char[] pass=new char[_pass.length];
     for(int i = 0; i < _pass.length; i++){

File: src/java/JavaFileStorage/app/src/main/java/com/jcraft/jsch/jce/Random.java
Patch:
@@ -52,7 +52,7 @@ public Random(){
       random=SecureRandom.getInstance("SHA1PRNG"); 
       return;
     }
-    catch(java.security.NoSuchAlgorithmException e){ 
+    catch(NoSuchAlgorithmException e){ 
       // System.err.println(e); 
     }
 
@@ -61,11 +61,12 @@ public Random(){
       random=SecureRandom.getInstance("IBMSecureRandom"); 
       return;
     }
-    catch(java.security.NoSuchAlgorithmException ee){ 
+    catch(NoSuchAlgorithmException ee){ 
       //System.err.println(ee); 
     }
     */
   }
+  @Override
   public void fill(byte[] foo, int start, int len){
     /*
     // This case will not become true in our usage.

File: src/java/JavaFileStorage/app/src/main/java/keepass2android/javafilestorage/JavaFileStorage.java
Patch:
@@ -48,6 +48,8 @@ public class FileEntry {
 	public boolean canWrite;
 	public long sizeInBytes;
 	public String displayName;
+
+	public String userData; //can be set by the storage implementation
 	
 	public FileEntry()
 	{

File: src/java/JavaFileStorageTest-AS/app/src/main/java/com/crocoapps/javafilestoragetest/MainActivity.java
Patch:
@@ -557,7 +557,7 @@ public boolean alwaysFailOnValidationError() {
 			}
 		});*/
 
-		storageToTest =  new DropboxV2Storage(ctx,"4ybka4p4a1027n6", "3s86datjhkihwyc", !simulateRestart);
+		storageToTest =  new DropboxV2Storage(ctx,"4ybka4p4a1027n6", "1z5lv528un9nre8", !simulateRestart);
 		//storageToTest =  new DropboxFileStorage(ctx,"4ybka4p4a1027n6", "1z5lv528un9nre8", !simulateRestart);
 		//storageToTest = new DropboxAppFolderFileStorage(ctx,"ax0268uydp1ya57", "3s86datjhkihwyc", true);
 

File: src/java/JavaFileStorage/app/src/main/java/keepass2android/javafilestorage/DropboxV2Storage.java
Patch:
@@ -309,6 +309,8 @@ private void buildSession() {
             credential = new DbxCredential(credential.getAccessToken(), -1L, credential.getRefreshToken(), credential.getAppKey());
             dbxClient = new DbxClientV2(DbxRequestConfigFactory.getRequestConfig(), credential);
 
+            setLoggedIn(true);
+
             return;
         }
 

File: src/java/JavaFileStorage/app/src/main/java/keepass2android/javafilestorage/PCloudFileStorage.java
Patch:
@@ -247,12 +247,14 @@ public void onActivityResult(FileStorageSetupActivity activity, int requestCode,
     }
 
     private void handleAuthResult(FileStorageSetupActivity activity, AuthorizationData authorizationData) {
+
         if (authorizationData.result == AuthorizationResult.ACCESS_GRANTED) {
             String authToken = authorizationData.token;
             String apiHost = authorizationData.apiHost;
             setAuthToken(authToken, apiHost);
             finishActivityWithSuccess(activity);
         } else {
+            android.util.Log.d("KP2A", "Auth failed with " + authorizationData.result.toString() + ", code=" + authorizationData.authCode + ", error=" + authorizationData.errorMessage);
             Activity castedActivity = (Activity)activity;
             Intent resultData = new Intent();
             resultData.putExtra(EXTRA_ERROR_MESSAGE, "Authentication failed!");

File: src/java/KP2ASoftkeyboard_AS/app/src/main/java/keepass2android/softkeyboard/BinaryDictionary.java
Patch:
@@ -116,7 +116,7 @@ public BinaryDictionary(Context context, ByteBuffer byteBuffer, int dicTypeId) {
         mDicTypeId = dicTypeId;
     }
 
-    private native int openNative(ByteBuffer bb, int typedLetterMultiplier,
+    private native long openNative(ByteBuffer bb, int typedLetterMultiplier,
                                   int fullWordMultiplier, int size);
 
 

File: src/java/JavaFileStorage/app/src/main/java/keepass2android/javafilestorage/GoogleDriveFileStorage.java
Patch:
@@ -186,7 +186,8 @@ public String getDisplayName()
 				return displayName;
 			
 			String[] parts = mAccountLocalPath.split("/");
-			
+			if (parts.length == 0)
+				return "";
 			String part = parts[parts.length-1];
 			logDebug("parsing part " + part);
 			int indexOfSeparator = part.lastIndexOf(NAME_ID_SEP);

File: src/java/JavaFileStorage/app/src/main/java/keepass2android/javafilestorage/GoogleDriveFileStorage.java
Patch:
@@ -190,12 +190,14 @@ public String getDisplayName()
 			String part = parts[parts.length-1];
 			logDebug("parsing part " + part);
 			int indexOfSeparator = part.lastIndexOf(NAME_ID_SEP);
+			String name = "";
 			if (indexOfSeparator < 0)
 			{
 				//seems invalid, but we're very generous here
 				displayName += "/"+part;
 			}
-			String name = part.substring(0, indexOfSeparator);
+			else
+				name = part.substring(0, indexOfSeparator);
 			try {
 				name = decode(name);
 			} catch (UnsupportedEncodingException e) {

File: src/java/PluginQR/app/src/main/java/com/google/zxing/client/android/result/WifiResultHandler.java
Patch:
@@ -61,7 +61,7 @@ public int getButtonText(int index) {
   public void handleButtonPress(int index) {
     if (index == 0) {
       WifiParsedResult wifiResult = (WifiParsedResult) getResult();
-      WifiManager wifiManager = (WifiManager) getActivity().getSystemService(Context.WIFI_SERVICE);
+      WifiManager wifiManager = (WifiManager) getActivity().getApplicationContext().getSystemService(Context.WIFI_SERVICE);
       if (wifiManager == null) {
         Log.w(TAG, "No WifiManager available from device");
         return;

File: src/java/KP2ASoftkeyboard_AS/app/src/main/java/keepass2android/softkeyboard/KP2AKeyboard.java
Patch:
@@ -1368,7 +1368,8 @@ private void onKp2aAlphaKeyPressed() {
 	}
 
 	private void onKp2aPasswordKeyPressed() {
-		commitStringForTyping(KeyboardData.availableFields.get(KeyboardData.kp2aFieldIndex+1));
+        if (KeyboardData.availableFields.size() > KeyboardData.kp2aFieldIndex+1) //some entries may have only title, then there are no two buttons available
+		    commitStringForTyping(KeyboardData.availableFields.get(KeyboardData.kp2aFieldIndex+1));
 	}
 
 

File: src/java/JavaFileStorageTest-AS/app/src/main/java/com/crocoapps/javafilestoragetest/MainActivity.java
Patch:
@@ -526,9 +526,9 @@ public void run() {
 	}
 
 	static JavaFileStorage createStorageToTest(Context ctx, Context appContext, boolean simulateRestart) {
-		//storageToTest = new SftpStorage();
+		storageToTest = new SftpStorage(ctx.getApplicationContext());
 		//storageToTest = new SkyDriveFileStorage("000000004010C234", appContext);
-		storageToTest = new OneDriveStorage(appContext, "000000004010C234");
+		//storageToTest = new OneDriveStorage(appContext, "000000004010C234");
 		//storageToTest = new GoogleDriveFileStorage();
 		/*storageToTest = new WebDavStorage(new ICertificateErrorHandler() {
 			@Override

File: src/java/JavaFileStorage/app/src/main/java/keepass2android/javafilestorage/PCloudFileStorage.java
Patch:
@@ -52,7 +52,7 @@ public PCloudFileStorage(Context ctx, String clientId) {
 
     @Override
     public boolean requiresSetup(String path) {
-        return true;
+        return !this.isConnected();
     }
 
     @Override
@@ -372,7 +372,7 @@ private RemoteEntry getRemoteEntryByPath(String path) throws Exception {
 
     private Exception convertApiError(ApiError e) {
         String strErrorCode = String.valueOf(e.errorCode());
-        if (strErrorCode.startsWith("1") || "2000".equals(strErrorCode)) {
+        if (strErrorCode.startsWith("1") || "2000".equals(strErrorCode) || "2095".equals(strErrorCode)) {
             this.clearAuthToken();
             return new UserInteractionRequiredException("Unlinked from PCloud! User must re-link.", e);
         } else if (strErrorCode.startsWith("2")) {

File: src/java/KP2ASoftkeyboard_AS/app/src/main/java/keepass2android/softkeyboard/LatinKeyboardView.java
Patch:
@@ -43,6 +43,7 @@ public class LatinKeyboardView extends LatinKeyboardBaseView {
     static final int KEYCODE_KP2A_ALPHA = -203;
     static final int KEYCODE_KP2A_SWITCH = -204;
     static final int KEYCODE_KP2A_LOCK = -205;
+    static final int KEYCODE_KP2A_NEXTFIELDS = -206;
 
     private Keyboard mPhoneKeyboard;
 

File: src/java/KP2ASoftkeyboard_AS/app/src/main/java/keepass2android/softkeyboard/KP2AKeyboard.java
Patch:
@@ -1423,7 +1423,7 @@ public void println(String x) {
 				try
 				{
 					searchEntry.key = searchEntry.displayName
-						= getString(R.string.open_entry_for_app, clientPackageName);
+						= getString(R.string.open_entry_for_app, new Object[]{clientPackageName});
 				}
 				catch (java.util.FormatFlagsConversionMismatchException e) //buggy crowdin support for Arabic? 
 				{

File: src/java/JavaFileStorage/app/src/main/java/keepass2android/javafilestorage/GoogleDriveFileStorage.java
Patch:
@@ -312,6 +312,8 @@ private File getFileForPath(GDrivePath path, Drive driveService)
 			String driveId = path.getGDriveId();
 			logDebug("id"+driveId);
 			File file = driveService.files().get(driveId).execute();
+			if (file.getLabels().getTrashed())
+				throw new FileNotFoundException(path.getDisplayName() + " is trashed!");
 			logDebug("...done.");
 			return file;
 		}

File: src/java/JavaFileStorage/app/src/main/java/keepass2android/javafilestorage/SftpStorage.java
Patch:
@@ -322,6 +322,9 @@ ChannelSftp init(String filename) throws JSchException, UnsupportedEncodingExcep
 		UserInfo ui = new SftpUserInfo(ci.password);
 		session.setUserInfo(ui);
 
+		session.setConfig("PreferredAuthentications",
+				"password,publickey");
+
 		session.connect();
 
 		Channel channel = session.openChannel("sftp");

File: src/java/Keepass2AndroidPluginSDK2/app/src/main/java/keepass2android/pluginsdk/PluginActionBroadcastReceiver.java
Patch:
@@ -54,7 +54,6 @@ protected HashMap<String, String> getEntryFieldsFromIntent()
 				for(Iterator<String> iter = json.keys();iter.hasNext();) {
 				    String key = iter.next();
 				    String value = json.get(key).toString();
-				    Log.d("KP2APluginSDK", "received " + key+"/"+value);
 				    res.put(key, value);
 				}
 				

File: src/java/KP2ASoftkeyboard_AS/app/src/main/java/keepass2android/softkeyboard/KP2AKeyboard.java
Patch:
@@ -778,8 +778,8 @@ private void commitKp2aString(String value, EditorInfo editorInfo) {
 
 		if ((editorInfo.imeOptions&(EditorInfo.IME_MASK_ACTION|EditorInfo.IME_FLAG_NO_ENTER_ACTION)) == EditorInfo.IME_ACTION_NEXT)
 		{
-			Log.d("KP2AK", "action is NEXT");
-			getCurrentInputConnection().performEditorAction(editorInfo.actionId);
+			Log.d("KP2AK", "action is NEXT ");
+			getCurrentInputConnection().performEditorAction(EditorInfo.IME_ACTION_NEXT);
 		}
 	}
 

File: src/java/JavaFileStorage/app/src/main/java/keepass2android/javafilestorage/OneDriveStorage.java
Patch:
@@ -289,7 +289,8 @@ private FileEntry getFileEntry(String path, Item i) {
         e.displayName = i.name;
         e.canRead = e.canWrite = true;
         e.path = getProtocolId() +"://"+path;
-        e.lastModifiedTime = i.lastModifiedDateTime.getTimeInMillis();
+        if (i.lastModifiedDateTime != null)
+            e.lastModifiedTime = i.lastModifiedDateTime.getTimeInMillis();
         e.isDirectory = i.folder != null;
         return e;
     }

File: src/java/JavaFileStorage/app/src/main/java/keepass2android/javafilestorage/WebDavStorage.java
Patch:
@@ -130,7 +130,7 @@ private OkHttpClient getClient(ConnectionInfo ci) throws NoSuchAlgorithmExceptio
 
         builder = builder.authenticator(new CachingAuthenticatorDecorator(authenticator, authCache))
                 .addInterceptor(new AuthenticationCacheInterceptor(authCache));
-        if ((mCertificateErrorHandler != null) && (mCertificateErrorHandler.alwaysFailOnValidationError())) {
+        if ((mCertificateErrorHandler != null) && (!mCertificateErrorHandler.alwaysFailOnValidationError())) {
             TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(
                     TrustManagerFactory.getDefaultAlgorithm());
             trustManagerFactory.init((KeyStore) null);

File: src/java/JavaFileStorage/app/src/main/java/keepass2android/javafilestorage/DropboxV2Storage.java
Patch:
@@ -425,6 +425,8 @@ public FileEntry getFileEntry(String filename) throws Exception {
             //querying root is not supported
             if ((filename.equals("")) || (filename.equals("/")))
                 return getRootFileEntry();
+            if (filename.endsWith("/"))
+                filename = filename.substring(0,filename.length()-1);
 
             Metadata dbEntry = dbxClient.files().getMetadata(filename);
             return convertToFileEntry(dbEntry);

File: src/java/android-filechooser-AS/app/src/main/java/group/pals/android/lib/ui/filechooser/providers/BaseFileProviderUtils.java
Patch:
@@ -216,6 +216,9 @@ public static int getProviderIconId(Context context, String providerId) {
             BaseFile.COLUMN_TYPE, BaseFile.COLUMN_MODIFICATION_TIME,
             BaseFile.COLUMN_ICON_ID };
 
+    public static final String[] CONNECTION_CHECK_CURSOR_COLUMNS = {"error"};
+
+
     /**
      * Creates new cursor which holds default properties of a base file for
      * client to access.

File: src/java/KP2ASoftkeyboard_AS/app/src/main/java/keepass2android/autofill/AutoFillService.java
Patch:
@@ -200,7 +200,7 @@ else if ("com.android.browser".equals(root.getPackageName()))
         {
             android.util.Log.e(_logTag, (e.toString() == null) ? "(null)" : e.toString() );
 
-            Intent intent = new Intent(Intent.ACTION_SEND);
+            /*Intent intent = new Intent(Intent.ACTION_SEND);
             intent.setType("message/rfc822");
             String to =  "crocoapps@gmail.com";
             intent.putExtra(Intent.EXTRA_EMAIL, new String[]{to});
@@ -217,7 +217,7 @@ else if ("com.android.browser".equals(root.getPackageName()))
             .setContentIntent(PendingIntent.getActivity(this, 0, Intent.createChooser(intent, "Send error report"), PendingIntent.FLAG_CANCEL_CURRENT));
 
             NotificationManager notificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
-            notificationManager.notify(autoFillNotificationId+1, builder.build());
+            notificationManager.notify(autoFillNotificationId+1, builder.build());*/
         }
 
     }

File: src/java/android-filechooser/code/src/group/pals/android/lib/ui/filechooser/utils/ui/LoadingDialog.java
Patch:
@@ -22,6 +22,7 @@
  * @author Hai Bison
  * @since v2.1 alpha
  */
+
 public abstract class LoadingDialog<Params, Progress, Result> extends
         AsyncTask<Params, Progress, Result> {
 

File: src/java/JavaFileStorage/app/src/main/java/keepass2android/javafilestorage/JavaFileStorage.java
Patch:
@@ -18,7 +18,7 @@ public interface JavaFileStorage {
 	public static final String EXTRA_PATH = "fileName"; //match KP2A PasswordActivity Ioc-Path Extra key
 	public static final String EXTRA_IS_FOR_SAVE = "IS_FOR_SAVE";
 	public static final String EXTRA_ERROR_MESSAGE = "EXTRA_ERROR_MESSAGE";
-	public static final String EXTRA_ALWAYS_RETURN_SUCCESS = "EXTRA_ALWAYS_RETURN_SUCCESS";;
+	public static final String EXTRA_ALWAYS_RETURN_SUCCESS = "EXTRA_ALWAYS_RETURN_SUCCESS";
 
 	
 public interface FileStorageSetupInitiatorActivity
@@ -155,5 +155,6 @@ public boolean equals(Object obj) {
 	public void onResume(FileStorageSetupActivity activity);
 	public void onStart(FileStorageSetupActivity activity);
 	public void onActivityResult(FileStorageSetupActivity activity, int requestCode, int resultCode, Intent data);
+	public void onRequestPermissionsResult(FileStorageSetupActivity activity, int requestCode, String[] permissions, int[] grantResults);
 	
 }
\ No newline at end of file

File: src/java/JavaFileStorage/app/src/main/java/com/microsoft/live/AuthorizationRequest.java
Patch:
@@ -118,14 +118,15 @@ public void onReceivedError(WebView view,
                 AuthorizationRequest.this.onError("", description, failingUrl);
                 OAuthDialog.this.dismiss();
             }
-
+/*
+Removed. Allows Man in the middle attacks and does not seem necessary.
             @Override
             public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {
                 // TODO: Android does not like the SSL certificate we use, because it has '*' in
                 // it. Proceed with the errors.
                 handler.proceed();
             }
-
+*/
             private void saveCookiesInMemory(String cookie) {
                 // Not all URLs will have cookies
                 if (TextUtils.isEmpty(cookie)) {

File: src/java/JavaFileStorage/app/src/main/java/keepass2android/javafilestorage/GoogleDriveFileStorage.java
Patch:
@@ -11,7 +11,6 @@
 import java.util.HashSet;
 import java.util.List;
 
-import com.google.android.gms.auth.UserRecoverableAuthException;
 import com.google.api.client.extensions.android.http.AndroidHttp;
 import com.google.api.client.googleapis.extensions.android.gms.auth.GoogleAccountCredential;
 import com.google.api.client.googleapis.extensions.android.gms.auth.UserRecoverableAuthIOException;

File: src/java/JavaFileStorage/app/src/main/java/com/microsoft/live/AuthorizationRequest.java
Patch:
@@ -118,14 +118,15 @@ public void onReceivedError(WebView view,
                 AuthorizationRequest.this.onError("", description, failingUrl);
                 OAuthDialog.this.dismiss();
             }
-
+/*
+Removed. Allows Man in the middle attacks and does not seem necessary.
             @Override
             public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {
                 // TODO: Android does not like the SSL certificate we use, because it has '*' in
                 // it. Proceed with the errors.
                 handler.proceed();
             }
-
+*/
             private void saveCookiesInMemory(String cookie) {
                 // Not all URLs will have cookies
                 if (TextUtils.isEmpty(cookie)) {

File: src/java/JavaFileStorage/app/src/main/java/keepass2android/javafilestorage/GoogleDriveFileStorage.java
Patch:
@@ -11,7 +11,6 @@
 import java.util.HashSet;
 import java.util.List;
 
-import com.google.android.gms.auth.UserRecoverableAuthException;
 import com.google.api.client.extensions.android.http.AndroidHttp;
 import com.google.api.client.googleapis.extensions.android.gms.auth.GoogleAccountCredential;
 import com.google.api.client.googleapis.extensions.android.gms.auth.UserRecoverableAuthIOException;

File: src/java/KP2AKdbLibrary/src/com/keepassdroid/database/PwDatabaseV3.java
Patch:
@@ -262,7 +262,7 @@ protected byte[] getPasswordKey(String key, String encoding) throws IOException
 		return md.digest();
 	}
 	
-		public void super_addGroupTo(PwGroupV3 newGroup, PwGroupV3 parent) {
+	public void super_addGroupTo(PwGroupV3 newGroup, PwGroupV3 parent) {
 		// Add group to parent group
 		if ( parent == null ) {
 			parent = rootGroup;

File: src/java/KP2AKdbLibrary/src/com/keepassdroid/database/PwDate.java
Patch:
@@ -159,8 +159,7 @@ public static byte[] writeTime(Date date, Calendar cal) {
 		int year = cal.get(Calendar.YEAR);
 		// File format is a 1 based month, java Calendar uses a zero based month
 		int month = cal.get(Calendar.MONTH) + 1;
-		// File format is a 0 based day, java Calendar uses a 1 based day
-		int day = cal.get(Calendar.DAY_OF_MONTH) - 1;
+		int day = cal.get(Calendar.DAY_OF_MONTH);
 		int hour = cal.get(Calendar.HOUR_OF_DAY);
 		int minute = cal.get(Calendar.MINUTE);
 		int second = cal.get(Calendar.SECOND);

File: src/java/KP2AKdbLibrary/src/com/keepassdroid/database/exception/InvalidDBSignatureException.java
Patch:
@@ -26,7 +26,7 @@ public class InvalidDBSignatureException extends InvalidDBException {
 	private static final long serialVersionUID = -5358923878743513758L;
 
 	public InvalidDBSignatureException() {
-		super();
+		super("Invalid database signature");
 	}
 
 }

File: src/java/KP2AKdbLibrary/src/com/keepassdroid/database/exception/InvalidPasswordException.java
Patch:
@@ -31,6 +31,6 @@ public InvalidPasswordException(String str) {
 	}
 	
 	public InvalidPasswordException() {
-		super();
+		super("Invalid key!");
 	}
 }

File: src/java/KP2AKdbLibrary/src/com/keepassdroid/database/exception/KeyFileEmptyException.java
Patch:
@@ -25,6 +25,6 @@ public class KeyFileEmptyException extends InvalidKeyFileException {
 	private static final long serialVersionUID = -1630780661204212325L;
 
 	public KeyFileEmptyException() {
-		super();
+		super("key file is empty!");
 	}
 }

File: src/java/PluginInputStick/src/keepass2android/plugin/inputstick/ActionReceiver.java
Patch:
@@ -34,7 +34,7 @@ protected void openEntry(OpenEntryAction oe) {
 		} catch (PluginAccessException e) {
 			e.printStackTrace();
 		}
-		typeText(oe.getContext(), "");
+		//typeText(oe.getContext(), "");
 	}
 	
 	@Override 

File: src/java/JavaFileStorage/src/keepass2android/javafilestorage/DropboxFileStorage.java
Patch:
@@ -175,7 +175,7 @@ private Exception convertException(DropboxException e) {
     		Log.d(TAG, "LoggedIn=false (due to unlink exception)");
     		setLoggedIn(false);
     		clearKeys();
-    		return new Exception("Unlinked from Dropbox!", e);
+    		return new UserInteractionRequiredException("Unlinked from Dropbox! User must re-link.", e);
     		
     	}
     	

File: src/java/Keepass2AndroidPluginSDK/src/keepass2android/pluginsdk/AccessManager.java
Patch:
@@ -44,7 +44,7 @@ public static String stringArrayToString(ArrayList<String> values) {
 
 	public static ArrayList<String> stringToStringArray(String s) {
 	    ArrayList<String> strings = new ArrayList<String>();
-	    if ((s != null) && (s != "")) {
+	    if (TextUtils.isEmpty(s) == false) {
 	        try {
 	            JSONArray a = new JSONArray(s);
 	            for (int i = 0; i < a.length(); i++) {

File: src/java/KP2ASoftKeyboard2/java/src/keepass2android/softkeyboard/KP2AKeyboard.java
Patch:
@@ -1315,7 +1315,9 @@ private void onEnterKey() {
 
 	private void onKp2aLockKeyPressed() {
     	
-		sendBroadcast(new Intent("keepass2android.lock_database"));
+		String action = getPackageName()+".lock_database";
+		android.util.Log.i("KP2A", "sending broadcast with action "+action);
+		sendBroadcast(new Intent(action));
 		
 	}
 

File: src/java/JavaFileStorage/src/keepass2android/javafilestorage/JavaFileStorageBase.java
Patch:
@@ -96,7 +96,7 @@ public InvalidPathException(String message)
 	
 	
 	protected void finishWithError(final FileStorageSetupActivity setupAct, Exception error) {
-		Log.e("KP2AJ", "Exception: " + error.toString());
+		logDebug( "Exception: " + error.toString());
 		error.printStackTrace();
 		
 		final Activity activity = (Activity)setupAct;
@@ -107,7 +107,7 @@ protected void finishWithError(final FileStorageSetupActivity setupAct, Exceptio
 		//This can make sense if there is a higher-level FileStorage which has the file cached.
 		if (activity.getIntent().getBooleanExtra(EXTRA_ALWAYS_RETURN_SUCCESS, false))
 		{
-			Log.d(TAG, "Returning success as desired in intent despite of exception.");
+			logDebug("Returning success as desired in intent despite of exception.");
 			finishActivityWithSuccess(setupAct);
 			return;
 		}
@@ -143,7 +143,7 @@ protected void finishActivityWithSuccess(
 			return;
 		}
 
-		Log.w("KP2AJ", "Unknown process: " + setupActivity.getProcessName());
+		logDebug("Unknown process: " + setupActivity.getProcessName());
 
 	}
 

File: src/java/KP2ASoftKeyboard2/java/src/keepass2android/kbbridge/ImeSwitcher.java
Patch:
@@ -18,6 +18,7 @@
 import android.widget.Toast;
 
 public class ImeSwitcher {
+	private static final String SECURE_SETTINGS_PACKAGE_NAME = "com.intangibleobject.securesettings.plugin";
 	private static final String PREVIOUS_KEYBOARD = "previous_keyboard";
 	private static final String KP2A_SWITCHER = "KP2A_Switcher";
 	private static final String Tag = "KP2A_SWITCHER";
@@ -47,7 +48,7 @@ public static void switchToKeyboard(Context ctx, String newImeName, boolean sile
 		boolean sentBroadcast = false;
 		for (ResolveInfo ri: pkgAppsList)
 		{
-			if (ri.activityInfo.packageName.equals("com.intangibleobject.securesettings.plugin"))
+			if (ri.activityInfo.packageName.equals(SECURE_SETTINGS_PACKAGE_NAME))
 			{
 				
 				String currentIme = android.provider.Settings.Secure.getString(
@@ -67,6 +68,7 @@ public static void switchToKeyboard(Context ctx, String newImeName, boolean sile
 				b.putString("com.intangibleobject.securesettings.plugin.extra.INPUT_METHOD", newImeName);
 				b.putString("com.intangibleobject.securesettings.plugin.extra.SETTING","default_input_method");
 				i.putExtra("com.twofortyfouram.locale.intent.extra.BUNDLE", b);
+				i.setPackage(SECURE_SETTINGS_PACKAGE_NAME);
 				Log.d(Tag,"trying to switch by broadcast to SecureSettings");
 				ctx.sendBroadcast(i);
 				sentBroadcast = true;

File: src/java/KP2ASoftKeyboard2/java/src/keepass2android/softkeyboard/KeyboardSwitcher.java
Patch:
@@ -20,6 +20,7 @@
 import android.content.res.Configuration;
 import android.content.res.Resources;
 import android.preference.PreferenceManager;
+import android.util.Log;
 import android.view.InflateException;
 
 import java.lang.ref.SoftReference;
@@ -244,6 +245,7 @@ public int hashCode() {
 
 
     public void setKeyboardMode(int mode, int imeOptions) {
+    	Log.d("KP2AK", "Switcher.SetKeyboardMode: " + mode);
         mAutoModeSwitchState = AUTO_MODE_SWITCH_STATE_ALPHA;
         mPreferSymbols = mode == MODE_SYMBOLS;
         if (mode == MODE_SYMBOLS) {

File: src/java/KP2ASoftKeyboard2/java/src/keepass2android/softkeyboard/BinaryDictionary.java
Patch:
@@ -74,7 +74,7 @@ public class BinaryDictionary extends Dictionary {
      */
     public BinaryDictionary(Context context, int[] resId, int dicTypeId) {
         if (resId != null && resId.length > 0 && resId[0] != 0) {
-            loadDictionary(context, resId);
+        	loadDictionary(context, resId);
         }
         mDicTypeId = dicTypeId;
     }

File: src/java/KP2ASoftKeyboard2/java/src/keepass2android/softkeyboard/Suggest.java
Patch:
@@ -105,6 +105,7 @@ public class Suggest implements Dictionary.WordCallback {
 
     public Suggest(Context context, int[] dictionaryResId) {
         mMainDict = new BinaryDictionary(context, dictionaryResId, DIC_MAIN);
+        Log.d("KP2AK", "main size: " + mMainDict.getSize()+ " " +dictionaryResId[0]);
         initPool();
     }
 

File: src/java/JavaFileStorage/src/keepass2android/javafilestorage/JavaFileStorage.java
Patch:
@@ -120,6 +120,9 @@ public boolean equals(Object obj) {
 	
 	public String getDisplayName(String path);
 	
+	//returns something like "myfile.txt" from the given path, i.e. it's displayable and only the last part of the path
+	public String getFilename(String path) throws Exception;
+	
 	public boolean checkForFileChangeFast(String path, String previousFileVersion) throws Exception;
 	
 	public String getCurrentFileVersionFast(String path);

File: src/java/JavaFileStorage/src/keepass2android/javafilestorage/GoogleDriveFileStorage.java
Patch:
@@ -439,7 +439,7 @@ public List<FileEntry> listFiles(String parentPath) throws Exception {
 		
 			if (driveService.files().get(parentId).execute().getLabels().getTrashed())
 				throw new FileNotFoundException(parentPath + " is trashed!");
-			
+			//Log.d(TAG, "listing files in "+parentId);
 			Files.List request = driveService.files().list()
 					.setQ("trashed=false and '"+parentId+"' in parents");
 	
@@ -450,6 +450,7 @@ public List<FileEntry> listFiles(String parentPath) throws Exception {
 					for (File file : files.getItems()) {
 	
 						String path = new GDrivePath(parentPath, file).getFullPath();
+						//Log.d(TAG, "listing file "+path);
 						FileEntry e = convertToFileEntry(file, path);
 	
 						result.add(e);

File: src/java/JavaFileStorage/src/keepass2android/javafilestorage/JavaFileStorage.java
Patch:
@@ -116,6 +116,8 @@ public boolean equals(Object obj) {
 	
 	public String getProtocolId();
 	
+	public String getDisplayName(String path);
+	
 	public boolean checkForFileChangeFast(String path, String previousFileVersion) throws Exception;
 	
 	public String getCurrentFileVersionFast(String path);

File: src/java/android-filechooser/code/src/group/pals/android/lib/ui/filechooser/utils/Utils.java
Patch:
@@ -35,7 +35,7 @@ public static boolean hasPermissions(Context context, String... permissions) {
     
     public static boolean doLog()
     {
-    	return true;
+    	return false;
     	//return BuildConfig.DEBUG; //not working with Mono for Android
     	
     }

File: src/java/android-filechooser/code/src/group/pals/android/lib/ui/filechooser/providers/localfile/LocalFileProvider.java
Patch:
@@ -303,7 +303,6 @@ else if (BaseFile.CMD_IS_ANCESTOR_OF.equals(uri.getLastPathSegment())) {
             newRow.add(type);
             newRow.add(file.lastModified());
             newRow.add(FileUtils.getResIcon(type, file.getName()));
-
         } else if (BaseFile.CMD_SHUTDOWN.equals(uri.getLastPathSegment())) {
             /*
              * TODO Stop all tasks. If the activity call this command in

File: src/java/android-filechooser/code/src/group/pals/android/lib/ui/filechooser/utils/Utils.java
Patch:
@@ -35,7 +35,7 @@ public static boolean hasPermissions(Context context, String... permissions) {
     
     public static boolean doLog()
     {
-    	return false;
+    	return true;
     	//return BuildConfig.DEBUG; //not working with Mono for Android
     	
     }

File: src/java/JavaFileStorage/src/keepass2android/javafilestorage/JavaFileStorage.java
Patch:
@@ -84,6 +84,8 @@ public boolean equals(Object obj) {
 	
 	public List<FileEntry> listFiles(String dirName) throws Exception;
 	
+	public FileEntry getFileEntry(String filename) throws Exception;
+	
 	public void delete(String path) throws Exception;
 	
 }
\ No newline at end of file

