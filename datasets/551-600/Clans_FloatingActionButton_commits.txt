File: library/src/main/java/com/github/clans/fab/Label.java
Patch:
@@ -207,7 +207,7 @@ void onActionDown() {
             ripple.setHotspot(getMeasuredWidth() / 2, getMeasuredHeight() / 2);
             ripple.setVisible(true, true);
         }
-        setPressed(true);
+//        setPressed(true);
     }
 
     @TargetApi(Build.VERSION_CODES.LOLLIPOP)
@@ -225,7 +225,7 @@ void onActionUp() {
             ripple.setHotspot(getMeasuredWidth() / 2, getMeasuredHeight() / 2);
             ripple.setVisible(true, true);
         }
-        setPressed(false);
+//        setPressed(false);
     }
 
     void setFab(FloatingActionButton fab) {

File: library/src/main/java/com/github/clans/fab/FloatingActionButton.java
Patch:
@@ -1170,7 +1170,7 @@ public synchronized void setIndeterminate(boolean indeterminate) {
         mProgressIndeterminate = indeterminate;
         mLastTimeAnimated = SystemClock.uptimeMillis();
         setupProgressBounds();
-        saveButtonOriginalPosition();
+//        saveButtonOriginalPosition();
         updateBackground();
     }
 

File: library/src/main/java/com/github/clans/fab/FloatingActionMenu.java
Patch:
@@ -134,8 +134,9 @@ private void init(Context context, AttributeSet attrs) {
         mLabelsPaddingLeft = attr.getDimensionPixelSize(R.styleable.FloatingActionMenu_menu_labels_paddingLeft, mLabelsPaddingLeft);
         mLabelsTextColor = attr.getColorStateList(R.styleable.FloatingActionMenu_menu_labels_textColor);
         // set default value if null same as for textview
-        if (mLabelsTextColor == null)
-            mLabelsTextColor = ColorStateList.valueOf(0xFF000000);
+        if (mLabelsTextColor == null) {
+            mLabelsTextColor = ColorStateList.valueOf(Color.WHITE);
+        }
         mLabelsTextSize = attr.getDimension(R.styleable.FloatingActionMenu_menu_labels_textSize, getResources().getDimension(R.dimen.labels_text_size));
         mLabelsCornerRadius = attr.getDimensionPixelSize(R.styleable.FloatingActionMenu_menu_labels_cornerRadius, mLabelsCornerRadius);
         mLabelsShowShadow = attr.getBoolean(R.styleable.FloatingActionMenu_menu_labels_showShadow, true);

File: library/src/main/java/com/github/clans/fab/FloatingActionMenu.java
Patch:
@@ -504,6 +504,7 @@ private void addLabel(FloatingActionButton fab) {
         }
 
         label.setText(text);
+        label.setOnClickListener(fab.getOnClickListener());
 
         addView(label);
         fab.setTag(R.id.fab_label, label);

File: library/src/main/java/com/github/clans/fab/FloatingActionMenu.java
Patch:
@@ -612,7 +612,7 @@ public void run() {
 
                             fab.show(animate);
                             Label label = (Label) fab.getTag(R.id.fab_label);
-                            if (label != null) {
+                            if (label != null && label.isHandleVisibilityChanges()) {
                                 label.show(animate);
                             }
 
@@ -661,7 +661,7 @@ public void run() {
 
                             fab.hide(animate);
                             Label label = (Label) fab.getTag(R.id.fab_label);
-                            if (label != null) {
+                            if (label != null && label.isHandleVisibilityChanges()) {
                                 label.hide(animate);
                             }
 

File: sample/src/main/java/com/github/clans/fab/sample/FloatingMenusActivity.java
Patch:
@@ -59,6 +59,7 @@ protected void onCreate(Bundle savedInstanceState) {
             @Override
             public void onClick(View v) {
                 Toast.makeText(FloatingMenusActivity.this, programFab1.getLabelText(), Toast.LENGTH_SHORT).show();
+                fab3.setLabelVisibility(fab3.getLabelVisibility() == View.VISIBLE ? View.GONE : View.VISIBLE);
             }
         });
 

File: library/src/main/java/com/github/clans/fab/FloatingActionMenu.java
Patch:
@@ -315,7 +315,7 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
 
         width = Math.max(mMaxButtonWidth, maxLabelWidth + mLabelsMargin) + getPaddingLeft() + getPaddingRight();
 
-        height += mButtonSpacing * (getChildCount() - 1) + getPaddingTop() + getPaddingBottom();
+        height += mButtonSpacing * (mButtonsCount - 1) + getPaddingTop() + getPaddingBottom();
         height = adjustForOvershoot(height);
 
         if (getLayoutParams().width == LayoutParams.MATCH_PARENT) {

File: library/src/main/java/com/github/clans/fab/FloatingActionMenu.java
Patch:
@@ -315,7 +315,7 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
 
         width = Math.max(mMaxButtonWidth, maxLabelWidth + mLabelsMargin) + getPaddingLeft() + getPaddingRight();
 
-        height += mButtonSpacing * (getChildCount() - 1) + getPaddingTop() + getPaddingBottom();
+        height += mButtonSpacing * (mButtonsCount - 1) + getPaddingTop() + getPaddingBottom();
         height = adjustForOvershoot(height);
 
         if (getLayoutParams().width == LayoutParams.MATCH_PARENT) {

File: library/src/main/java/com/github/clans/fab/FloatingActionMenu.java
Patch:
@@ -318,7 +318,6 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         height += mButtonSpacing * (getChildCount() - 1) + getPaddingTop() + getPaddingBottom();
         height = adjustForOvershoot(height);
 
-
         if (getLayoutParams().width == LayoutParams.MATCH_PARENT) {
             width = getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec);
         }
@@ -409,7 +408,7 @@ protected void onLayout(boolean changed, int l, int t, int r, int b) {
     }
 
     private int adjustForOvershoot(int dimension) {
-        return dimension * 12 / 10;
+        return (int) (dimension * 0.03 + dimension);
     }
 
     @Override

File: library/src/main/java/com/github/clans/fab/FloatingActionButton.java
Patch:
@@ -491,10 +491,12 @@ Animation getHideAnimation() {
     }
 
     void playShowAnimation() {
+        mHideAnimation.cancel();
         startAnimation(mShowAnimation);
     }
 
     void playHideAnimation() {
+        mShowAnimation.cancel();
         startAnimation(mHideAnimation);
     }
 

File: library/src/main/java/com/github/clans/fab/FloatingActionButton.java
Patch:
@@ -128,7 +128,7 @@ private void init(Context context, AttributeSet attrs, int defStyleAttr) {
         mLabelText = attr.getString(R.styleable.FloatingActionButton_fab_label);
         mShouldProgressIndeterminate = attr.getBoolean(R.styleable.FloatingActionButton_fab_progress_indeterminate, false);
         mProgressColor = attr.getColor(R.styleable.FloatingActionButton_fab_progress_color, 0xFF009688);
-        mProgressBackgroundColor = attr.getColor(R.styleable.FloatingActionButton_fab_progress_backgroundColor, 0x99757575);
+        mProgressBackgroundColor = attr.getColor(R.styleable.FloatingActionButton_fab_progress_backgroundColor, 0x4D000000);
         mProgressMax = attr.getInt(R.styleable.FloatingActionButton_fab_progress_max, mProgressMax);
         mShowProgressBackground = attr.getBoolean(R.styleable.FloatingActionButton_fab_progress_showBackground, true);
 

File: sample/src/main/java/com/github/clans/fab/sample/FloatingMenusActivity.java
Patch:
@@ -5,14 +5,12 @@
 import android.animation.AnimatorSet;
 import android.animation.ObjectAnimator;
 import android.content.Intent;
-import android.graphics.Color;
 import android.os.Bundle;
 import android.os.Handler;
 import android.support.v7.app.ActionBarActivity;
 import android.view.MenuItem;
 import android.view.View;
 import android.view.animation.AnimationUtils;
-import android.view.animation.AnticipateInterpolator;
 import android.view.animation.OvershootInterpolator;
 import android.widget.Toast;
 

File: sample/src/main/java/com/github/clans/fab/sample/FloatingMenusActivity.java
Patch:
@@ -5,14 +5,12 @@
 import android.animation.AnimatorSet;
 import android.animation.ObjectAnimator;
 import android.content.Intent;
-import android.graphics.Color;
 import android.os.Bundle;
 import android.os.Handler;
 import android.support.v7.app.ActionBarActivity;
 import android.view.MenuItem;
 import android.view.View;
 import android.view.animation.AnimationUtils;
-import android.view.animation.AnticipateInterpolator;
 import android.view.animation.OvershootInterpolator;
 import android.widget.Toast;
 

File: library/src/main/java/com/github/clans/fab/FloatingActionMenu.java
Patch:
@@ -47,7 +47,7 @@ public class FloatingActionMenu extends ViewGroup {
     private int mLabelsPaddingLeft = Util.dpToPx(getContext(), 8f);
     private int mLabelsTextColor;
     private float mLabelsTextSize;
-    private int mLabelsCornerRadius;
+    private int mLabelsCornerRadius = Util.dpToPx(getContext(), 3f);
     private boolean mLabelsShowShadow;
     private int mLabelsColorNormal;
     private int mLabelsColorPressed;
@@ -102,7 +102,7 @@ private void init(Context context, AttributeSet attrs) {
         mLabelsPaddingLeft = attr.getDimensionPixelSize(R.styleable.FloatingActionMenu_menu_labels_paddingLeft, mLabelsPaddingLeft);
         mLabelsTextColor = attr.getColor(R.styleable.FloatingActionMenu_menu_labels_textColor, Color.WHITE);
         mLabelsTextSize = attr.getDimension(R.styleable.FloatingActionMenu_menu_labels_textSize, getResources().getDimension(R.dimen.labels_text_size));
-        mLabelsCornerRadius = attr.getDimensionPixelSize(R.styleable.FloatingActionMenu_menu_labels_cornerRadius, 6);
+        mLabelsCornerRadius = attr.getDimensionPixelSize(R.styleable.FloatingActionMenu_menu_labels_cornerRadius, mLabelsCornerRadius);
         mLabelsShowShadow = attr.getBoolean(R.styleable.FloatingActionMenu_menu_labels_showShadow, true);
         mLabelsColorNormal = attr.getColor(R.styleable.FloatingActionMenu_menu_labels_colorNormal, 0xFF333333);
         mLabelsColorPressed = attr.getColor(R.styleable.FloatingActionMenu_menu_labels_colorPressed, 0xFF444444);

File: library/src/main/java/com/dmytrotarianyk/library/FloatingActionButton.java
Patch:
@@ -271,6 +271,7 @@ void setColors(int colorNormal, int colorPressed, int colorRipple) {
         mColorNormal = colorNormal;
         mColorPressed = colorPressed;
         mColorRipple = colorRipple;
+        updateBackground();
     }
 
     @TargetApi(Build.VERSION_CODES.LOLLIPOP)

File: library/src/main/java/com/dmytrotarianyk/library/FloatingActionMenu.java
Patch:
@@ -103,8 +103,8 @@ private void init(Context context, AttributeSet attrs) {
         mLabelsColorRipple = attr.getColor(R.styleable.FloatingActionMenu_menu_labels_colorRipple, 0x66FFFFFF);
         mMenuShadowColor = attr.getColor(R.styleable.FloatingActionMenu_menu_shadowColor, 0x66000000);
         mMenuColorNormal = attr.getColor(R.styleable.FloatingActionMenu_menu_colorNormal, 0xFFDA4336);
-        mMenuColorPressed = attr.getColor(R.styleable.FloatingActionMenu_menu_colorPressed, 0xFFBF3B2F);
-        mMenuColorRipple = attr.getColor(R.styleable.FloatingActionMenu_menu_colorRipple, 0x33000000);
+        mMenuColorPressed = attr.getColor(R.styleable.FloatingActionMenu_menu_colorPressed, 0xFFE75043);
+        mMenuColorRipple = attr.getColor(R.styleable.FloatingActionMenu_menu_colorRipple, 0x99FFFFFF);
         mAnimationDelayPerItem = attr.getInt(R.styleable.FloatingActionMenu_menu_animationDelayPerItem, 50);
         mIcon = attr.getDrawable(R.styleable.FloatingActionMenu_menu_icon);
         if (mIcon == null) {

