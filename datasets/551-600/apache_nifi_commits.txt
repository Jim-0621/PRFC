File: nifi-extension-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ssh/StandardSSHClientProvider.java
Patch:
@@ -97,7 +97,7 @@ public SSHClient getClient(final PropertyContext context, final Map<String, Stri
         final List<AuthMethod> authMethods = getPasswordAuthMethods(context, attributes);
 
         final Config config = SSH_CONFIG_PROVIDER.getConfig(address, context);
-        final SSHClient client = new SSHClient(config);
+        final SSHClient client = new StandardSSHClient(config);
 
         try {
             setClientProperties(client, context);

File: nifi-commons/nifi-expression-language/src/test/java/org/apache/nifi/attribute/expression/language/TestQuery.java
Patch:
@@ -58,6 +58,7 @@
 import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertInstanceOf;
 import static org.junit.jupiter.api.Assertions.assertNotEquals;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -2560,14 +2561,14 @@ private void verifyEquals(final String expression, final Map<String, String> att
         if (expectedResult instanceof Long) {
             if (ResultType.NUMBER.equals(result.getResultType())) {
                 final Number resultNumber = ((NumberQueryResult) result).getValue();
-                assertTrue(resultNumber instanceof Long);
+                assertInstanceOf(Long.class, resultNumber);
             } else {
                 assertEquals(ResultType.WHOLE_NUMBER, result.getResultType());
             }
         } else if (expectedResult instanceof Double) {
             if (ResultType.NUMBER.equals(result.getResultType())) {
                 final Number resultNumber = ((NumberQueryResult) result).getValue();
-                assertTrue(resultNumber instanceof Double);
+                assertInstanceOf(Double.class, resultNumber);
             } else {
                 assertEquals(ResultType.DECIMAL, result.getResultType());
             }

File: nifi-commons/nifi-hl7-query-language/src/test/java/org/apache/nifi/hl7/query/TestHL7Query.java
Patch:
@@ -35,6 +35,7 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertInstanceOf;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
 @SuppressWarnings("resource")
@@ -136,7 +137,7 @@ public void testSelectField() {
         assertEquals(1, result.getHitCount());
 
         final Object names = result.nextHit().getValue("PID.5");
-        assertTrue(names instanceof List);
+        assertInstanceOf(List.class, names);
         final List<Object> nameList = (List) names;
         assertEquals(1, nameList.size());
         final HL7Field nameField = (HL7Field) nameList.get(0);

File: nifi-commons/nifi-schema-utils/src/test/java/org/apache/nifi/repository/schema/TestSchemaRecordReader.java
Patch:
@@ -25,11 +25,11 @@
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
+import static org.junit.jupiter.api.Assertions.assertArrayEquals;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
@@ -109,7 +109,7 @@ public void testReadExactlyOnceFields() throws IOException {
 
             assertEquals(42, record.getFieldValue("int"));
             assertTrue((boolean) record.getFieldValue("boolean"));
-            assertTrue(Arrays.equals("hello".getBytes(), (byte[]) record.getFieldValue("byte array")));
+            assertArrayEquals("hello".getBytes(), (byte[]) record.getFieldValue("byte array"));
             assertEquals(42L, record.getFieldValue("long"));
             assertEquals("hello", record.getFieldValue("string"));
             assertEquals("hello", record.getFieldValue("long string"));
@@ -251,7 +251,7 @@ public void testReadZeroOrOneFields() throws IOException {
 
             assertEquals(42, valueMap.get("int present"));
             assertTrue((boolean) valueMap.get("boolean present"));
-            assertTrue(Arrays.equals("hello".getBytes(), (byte[]) valueMap.get("byte array present")));
+            assertArrayEquals("hello".getBytes(), (byte[]) valueMap.get("byte array present"));
             assertEquals(42L, valueMap.get("long present"));
             assertEquals("hello", valueMap.get("string present"));
             assertEquals("hello", valueMap.get("long string present"));

File: nifi-extension-bundles/nifi-aws-bundle/nifi-aws-processors/src/test/java/org/apache/nifi/processors/aws/dynamodb/ItemKeysTest.java
Patch:
@@ -20,7 +20,7 @@
 import software.amazon.awssdk.services.dynamodb.model.AttributeValue;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertNotEquals;
 
 public class ItemKeysTest {
 
@@ -64,7 +64,7 @@ public void testHashNotNullRangeNotNullEquals() {
     public void testHashNotNullRangeNotNullForOtherNotEquals() {
         ItemKeys ik1 = new ItemKeys(null, string("ab"));
         ItemKeys ik2 = new ItemKeys(string("ab"), null);
-        assertFalse(ik1.equals(ik2));
+        assertNotEquals(ik1, ik2);
     }
 
     private static AttributeValue string(final String s) {

File: nifi-extension-bundles/nifi-evtx-bundle/nifi-evtx-processors/src/test/java/org/apache/nifi/processors/evtx/XmlBxmlNodeVisitorTest.java
Patch:
@@ -46,8 +46,8 @@
 import java.util.Arrays;
 import java.util.List;
 
+import static org.junit.jupiter.api.Assertions.assertInstanceOf;
 import static org.junit.jupiter.api.Assertions.assertNotEquals;
-import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.mockito.Mockito.any;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.inOrder;
@@ -319,7 +319,7 @@ public void testVisitRootNode() throws IOException {
         verify(child).accept(captor.capture());
 
         BxmlNodeVisitor value = captor.getValue();
-        assertTrue(value instanceof XmlBxmlNodeVisitor);
+        assertInstanceOf(XmlBxmlNodeVisitor.class, value);
         assertNotEquals(xmlBxmlNodeVisitor, value);
     }
 }

File: nifi-extension-bundles/nifi-evtx-bundle/nifi-evtx-processors/src/test/java/org/apache/nifi/processors/evtx/parser/ChunkHeaderTest.java
Patch:
@@ -41,6 +41,7 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertInstanceOf;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.mockito.Mockito.mock;
 
@@ -137,7 +138,7 @@ public void testInit() throws IOException {
         RootNode rootNode = next.getRootNode();
         List<BxmlNode> children = rootNode.getChildren();
         assertEquals(1, children.size());
-        assertTrue(children.get(0) instanceof EndOfStreamNode);
+        assertInstanceOf(EndOfStreamNode.class, children.get(0));
         assertEquals(0, rootNode.getSubstitutions().size());
 
         assertFalse(chunkHeader.hasNext());

File: nifi-extension-bundles/nifi-evtx-bundle/nifi-evtx-processors/src/test/java/org/apache/nifi/processors/evtx/parser/RecordTest.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.List;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.junit.jupiter.api.Assertions.assertInstanceOf;
 
 @ExtendWith(MockitoExtension.class)
 public class RecordTest {
@@ -67,7 +67,7 @@ public void testInit() {
         RootNode rootNode = record.getRootNode();
         List<BxmlNode> children = rootNode.getChildren();
         assertEquals(1, children.size());
-        assertTrue(children.get(0) instanceof EndOfStreamNode);
+        assertInstanceOf(EndOfStreamNode.class, children.get(0));
         assertEquals(0, rootNode.getSubstitutions().size());
     }
 }

File: nifi-extension-bundles/nifi-evtx-bundle/nifi-evtx-processors/src/test/java/org/apache/nifi/processors/evtx/parser/bxml/AttributeNodeTest.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.List;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.junit.jupiter.api.Assertions.assertInstanceOf;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
@@ -58,10 +58,10 @@ protected String getString() {
     public void testInit() {
         assertEquals(ATTRIBUTE_NAME, attributeNode.getAttributeName());
         BxmlNode attributeNodeValue = attributeNode.getValue();
-        assertTrue(attributeNodeValue instanceof ValueNode);
+        assertInstanceOf(ValueNode.class, attributeNodeValue);
         List<BxmlNode> children = ((ValueNode) attributeNodeValue).getChildren();
         assertEquals(1, children.size());
-        assertTrue(children.get(0) instanceof NullTypeNode);
+        assertInstanceOf(NullTypeNode.class, children.get(0));
     }
 
     @Test

File: nifi-extension-bundles/nifi-evtx-bundle/nifi-evtx-processors/src/test/java/org/apache/nifi/processors/evtx/parser/bxml/OpenStartElementNodeTest.java
Patch:
@@ -27,6 +27,7 @@
 import java.util.List;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertInstanceOf;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
@@ -58,7 +59,7 @@ public void testInit() {
         assertEquals(tagName, openStartElementNode.getTagName());
         List<BxmlNode> children = openStartElementNode.getChildren();
         assertEquals(1, children.size());
-        assertTrue(children.get(0) instanceof CloseEmptyElementNode);
+        assertInstanceOf(CloseEmptyElementNode.class, children.get(0));
     }
 
     @Test

File: nifi-extension-bundles/nifi-evtx-bundle/nifi-evtx-processors/src/test/java/org/apache/nifi/processors/evtx/parser/bxml/RootNodeTest.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.List;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.junit.jupiter.api.Assertions.assertInstanceOf;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
@@ -55,7 +55,7 @@ public void setup() throws IOException {
     public void testInit() {
         List<BxmlNode> children = rootNode.getChildren();
         assertEquals(1, children.size());
-        assertTrue(children.get(0) instanceof EndOfStreamNode);
+        assertInstanceOf(EndOfStreamNode.class, children.get(0));
 
         List<VariantTypeNode> substitutions = rootNode.getSubstitutions();
         assertEquals(1, substitutions.size());

File: nifi-extension-bundles/nifi-evtx-bundle/nifi-evtx-processors/src/test/java/org/apache/nifi/processors/evtx/parser/bxml/ValueNodeTest.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.List;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.junit.jupiter.api.Assertions.assertInstanceOf;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
@@ -52,7 +52,7 @@ public void testInit() {
         assertEquals(getToken(), valueNode.getToken());
         List<BxmlNode> children = valueNode.getChildren();
         assertEquals(1, children.size());
-        assertTrue(children.get(0) instanceof NullTypeNode);
+        assertInstanceOf(NullTypeNode.class, children.get(0));
     }
 
     @Test

File: nifi-extension-bundles/nifi-evtx-bundle/nifi-evtx-processors/src/test/java/org/apache/nifi/processors/evtx/parser/bxml/value/BXmlTypeNodeTest.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.List;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.junit.jupiter.api.Assertions.assertInstanceOf;
 
 public class BXmlTypeNodeTest extends BxmlNodeTestBase {
     private BXmlTypeNode bXmlTypeNode;
@@ -47,7 +47,7 @@ public void testInit() {
         RootNode rootNode = bXmlTypeNode.getRootNode();
         List<BxmlNode> children = rootNode.getChildren();
         assertEquals(1, children.size());
-        assertTrue(children.get(0) instanceof EndOfStreamNode);
+        assertInstanceOf(EndOfStreamNode.class, children.get(0));
         assertEquals(0, rootNode.getSubstitutions().size());
         assertEquals(rootNode.toString(), bXmlTypeNode.getValue());
     }

File: nifi-extension-bundles/nifi-extension-utils/nifi-put-pattern/src/test/java/org/apache/nifi/processor/util/pattern/TestExceptionHandler.java
Patch:
@@ -29,8 +29,8 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertInstanceOf;
 import static org.junit.jupiter.api.Assertions.assertThrows;
-import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.junit.jupiter.api.Assertions.fail;
 
 public class TestExceptionHandler {
@@ -90,7 +90,7 @@ public void testBasicUsage() {
         final Integer nullInput = null;
         ProcessException pe = assertThrows(ProcessException.class, () -> handler.execute(context, nullInput, i -> r.set(p.divide(i, 2))),
                 "Exception should be thrown because input is null.");
-        assertTrue(pe.getCause() instanceof NullPointerException);
+        assertInstanceOf(NullPointerException.class, pe.getCause());
     }
 
     // Reusable Exception mapping function.

File: nifi-extension-bundles/nifi-extension-utils/nifi-record-utils/nifi-avro-record-utils/src/test/java/org/apache/nifi/schema/access/InferenceSchemaStrategyTest.java
Patch:
@@ -36,8 +36,8 @@
 import java.util.Optional;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertInstanceOf;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
-import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.junit.jupiter.api.Assertions.fail;
 
 public class InferenceSchemaStrategyTest {
@@ -89,7 +89,7 @@ public void testSchemaConversionWhenMap() throws Exception {
 
         // then
         assertNotNull(result);
-        assertTrue(RecordDataType.class.isInstance(result.getField("f1").get().getDataType()));
+        assertInstanceOf(RecordDataType.class, result.getField("f1").get().getDataType());
         final RecordDataType recordDataType = (RecordDataType) result.getField("f1").get().getDataType();
 
         final RecordSchema childSchema = recordDataType.getChildSchema();

File: nifi-extension-bundles/nifi-hazelcast-bundle/nifi-hazelcast-services/src/test/java/org/apache/nifi/hazelcast/services/cachemanager/ExternalHazelcastCacheManagerTest.java
Patch:
@@ -26,7 +26,7 @@
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 
-import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.junit.jupiter.api.Assertions.assertInstanceOf;
 
 public class ExternalHazelcastCacheManagerTest extends AbstractHazelcastCacheManagerTest {
     private HazelcastInstance hazelcastInstance;
@@ -55,7 +55,7 @@ public void testExecution() throws Exception {
         testRunner.addControllerService("hazelcast-connection-service", testSubject);
 
         final SocketAddress localAddress = hazelcastInstance.getLocalEndpoint().getSocketAddress();
-        assertTrue(localAddress instanceof InetSocketAddress);
+        assertInstanceOf(InetSocketAddress.class, localAddress);
         final int port = ((InetSocketAddress) localAddress).getPort();
         testRunner.setProperty(testSubject, ExternalHazelcastCacheManager.HAZELCAST_SERVER_ADDRESS, "localhost:" + port);
 

File: nifi-extension-bundles/nifi-jolt-bundle/nifi-jolt-transform-json-ui/src/test/java/org/apache/nifi/web/standard/api/processor/TestProcessorResource.java
Patch:
@@ -44,7 +44,6 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
-import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.mockito.ArgumentMatchers.isNull;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
@@ -103,7 +102,7 @@ public void testSetProperties() {
         assertNotNull(response);
         JsonNode jsonNode = response.readEntity(JsonNode.class);
         assertNotNull(jsonNode);
-        assertTrue(jsonNode.get("properties").get("Jolt Transform").asText().equals("jolt-transform-chain"));
+        assertEquals("jolt-transform-chain", jsonNode.get("properties").get("Jolt Transform").asText());
     }
 
 

File: nifi-extension-bundles/nifi-jolt-bundle/nifi-jolt-transform-json-ui/src/test/java/org/apache/nifi/web/standard/api/processor/TestProcessorWebUtils.java
Patch:
@@ -31,8 +31,8 @@
 import java.lang.reflect.Method;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertInstanceOf;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
-import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
@@ -64,7 +64,7 @@ public void testGetRequestContextForProcessor() throws NoSuchMethodException, IO
         Method method = ProcessorWebUtils.class.getDeclaredMethod("getRequestContext", String.class, HttpServletRequest.class);
         method.setAccessible(true);
         NiFiWebRequestContext requestContext = (NiFiWebRequestContext) method.invoke(null, "1", mock(HttpServletRequest.class));
-        assertTrue(requestContext instanceof HttpServletRequestContext);
+        assertInstanceOf(HttpServletRequestContext.class, requestContext);
         assertEquals("1", requestContext.getId());
 
     }

File: nifi-extension-bundles/nifi-kafka-bundle/nifi-kafka-3-integration/src/test/java/org/apache/nifi/kafka/processors/PublishKafkaValueRecordIT.java
Patch:
@@ -40,9 +40,9 @@
 import java.util.Objects;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertInstanceOf;
 import static org.junit.jupiter.api.Assertions.assertNotEquals;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
-import static org.junit.jupiter.api.Assertions.assertTrue;
 
 @TestMethodOrder(MethodOrderer.MethodName.class)
 public class PublishKafkaValueRecordIT extends AbstractPublishKafkaIT {
@@ -102,7 +102,7 @@ public void test2ConsumeMultipleRecords() throws IOException {
                 assertNotNull(kafkaValue);
                 assertNotEquals(0, kafkaValue.get("id").asInt());
                 assertEquals(1, kafkaValue.get("name").asText().length());
-                assertTrue(kafkaValue.get("address") instanceof ObjectNode);
+                assertInstanceOf(ObjectNode.class, kafkaValue.get("address"));
             }
         }
     }

File: nifi-extension-bundles/nifi-kafka-bundle/nifi-kafka-3-integration/src/test/java/org/apache/nifi/kafka/processors/publish/additional/PublishKafkaContentX1IT.java
Patch:
@@ -43,6 +43,7 @@
 import java.util.Objects;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertInstanceOf;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
@@ -97,7 +98,7 @@ public void test2ConsumeOneRecord() throws IOException {
                 assertNotNull(kafkaValue);
                 assertEquals("1234 First Street", kafkaValue.get("address").textValue());
                 assertEquals("12345", kafkaValue.get("zip").textValue());
-                assertTrue(kafkaValue.get("account") instanceof ObjectNode);
+                assertInstanceOf(ObjectNode.class, kafkaValue.get("account"));
             }
         }
     }

File: nifi-extension-bundles/nifi-kafka-bundle/nifi-kafka-3-integration/src/test/java/org/apache/nifi/kafka/processors/publish/additional/PublishKafkaWrapperX1IT.java
Patch:
@@ -43,6 +43,7 @@
 import java.util.Objects;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertInstanceOf;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
@@ -88,7 +89,7 @@ public void test2ConsumeOneRecord() throws IOException {
                 assertNotNull(kafkaValue);
                 assertEquals("1234 First Street", kafkaValue.get("address").textValue());
                 assertEquals("12345", kafkaValue.get("zip").textValue());
-                assertTrue(kafkaValue.get("account") instanceof ObjectNode);
+                assertInstanceOf(ObjectNode.class, kafkaValue.get("account"));
             }
         }
     }

File: nifi-extension-bundles/nifi-kafka-bundle/nifi-kafka-3-integration/src/test/java/org/apache/nifi/kafka/processors/publish/additional/PublishKafkaWrapperX2IT.java
Patch:
@@ -41,6 +41,7 @@
 import java.util.Objects;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertInstanceOf;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
@@ -94,7 +95,7 @@ public void test2ConsumeOneRecord() throws IOException {
                 assertNotNull(kafkaValue);
                 assertEquals("1234 First Street", kafkaValue.get("address").textValue());
                 assertEquals("12345", kafkaValue.get("zip").textValue());
-                assertTrue(kafkaValue.get("account") instanceof ObjectNode);
+                assertInstanceOf(ObjectNode.class, kafkaValue.get("account"));
             }
         }
     }

File: nifi-extension-bundles/nifi-kafka-bundle/nifi-kafka-3-integration/src/test/java/org/apache/nifi/kafka/processors/publish/additional/PublishKafkaWrapperX3IT.java
Patch:
@@ -43,6 +43,7 @@
 import java.util.Objects;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertInstanceOf;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
@@ -91,7 +92,7 @@ public void test2ConsumeOneRecord() throws IOException {
                 assertNotNull(kafkaValue);
                 assertEquals("1234 First Street", kafkaValue.get("address").textValue());
                 assertEquals("12345", kafkaValue.get("zip").textValue());
-                assertTrue(kafkaValue.get("account") instanceof ObjectNode);
+                assertInstanceOf(ObjectNode.class, kafkaValue.get("account"));
             }
         }
     }

File: nifi-extension-bundles/nifi-kafka-bundle/nifi-kafka-3-integration/src/test/java/org/apache/nifi/kafka/processors/publish/additional/PublishKafkaWrapperX4IT.java
Patch:
@@ -43,6 +43,7 @@
 import java.util.Objects;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertInstanceOf;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -94,7 +95,7 @@ public void test2ConsumeOneRecord() throws IOException {
                 assertNotNull(kafkaValue);
                 assertEquals("1234 First Street", kafkaValue.get("address").textValue());
                 assertEquals("12345", kafkaValue.get("zip").textValue());
-                assertTrue(kafkaValue.get("account") instanceof ObjectNode);
+                assertInstanceOf(ObjectNode.class, kafkaValue.get("account"));
             }
         }
     }

File: nifi-extension-bundles/nifi-kafka-bundle/nifi-kafka-3-integration/src/test/java/org/apache/nifi/kafka/processors/publish/additional/PublishKafkaWrapperX5IT.java
Patch:
@@ -54,6 +54,7 @@
 import java.util.concurrent.TimeoutException;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertInstanceOf;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -135,7 +136,7 @@ public void test2ConsumeOneRecord() throws IOException {
                 assertNotNull(kafkaValue);
                 assertEquals("1234 First Street", kafkaValue.get("address").textValue());
                 assertEquals("12345", kafkaValue.get("zip").textValue());
-                assertTrue(kafkaValue.get("account") instanceof ObjectNode);
+                assertInstanceOf(ObjectNode.class, kafkaValue.get("account"));
             }
         }
     }

File: nifi-extension-bundles/nifi-mongodb-bundle/nifi-mongodb-processors/src/test/java/org/apache/nifi/processors/mongodb/GetMongoIT.java
Patch:
@@ -50,6 +50,7 @@
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertNull;
+import static org.junit.jupiter.api.Assertions.assertSame;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
 public class GetMongoIT extends AbstractMongoIT {
@@ -181,7 +182,7 @@ public void testCleanJson() throws Exception {
         ObjectMapper mapper = new ObjectMapper();
         Map<String, Object> parsed = mapper.readValue(raw, Map.class);
 
-        assertTrue(parsed.get("date_field").getClass() == String.class);
+        assertSame(parsed.get("date_field").getClass(), String.class);
     }
 
     @Test

File: nifi-extension-bundles/nifi-mongodb-bundle/nifi-mongodb-processors/src/test/java/org/apache/nifi/processors/mongodb/RunMongoAggregationIT.java
Patch:
@@ -202,7 +202,7 @@ public void testJsonTypes() throws IOException {
         for (MockFlowFile mockFlowFile : flowFiles) {
             byte[] raw = runner.getContentAsByteArray(mockFlowFile);
             Map<String, List<Long>> read = mapper.readValue(raw, Map.class);
-            assertTrue(read.get("myArray").get(1) == now.getTimeInMillis());
+            assertEquals((long) read.get("myArray").get(1), now.getTimeInMillis());
         }
     }
 

File: nifi-extension-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestFlattenJson.java
Patch:
@@ -32,7 +32,6 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertInstanceOf;
-import static org.junit.jupiter.api.Assertions.assertTrue;
 
 public class TestFlattenJson {
     private static final ObjectMapper mapper = new ObjectMapper();
@@ -86,7 +85,7 @@ void testFlattenRecordSet() throws JsonProcessingException {
 
         final List<String> expected = Arrays.asList("Hello", "World");
         final List parsed = (List) baseTest(testRunner, json, 2);
-        assertTrue(parsed instanceof List, "Not a list");
+        assertInstanceOf(List.class, parsed, "Not a list");
         for (int i = 0; i < parsed.size(); i++) {
             final Map map = (Map) parsed.get(i);
             assertEquals(map.get("first.second"), expected.get(i), "Missing values.");

File: nifi-extension-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestNotify.java
Patch:
@@ -36,6 +36,7 @@
 import java.util.concurrent.ConcurrentMap;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertInstanceOf;
 import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -304,7 +305,7 @@ public void testFailingCacheService() {
         props.put("releaseSignalAttribute", "2");
         runner.enqueue(new byte[] {}, props);
         final AssertionError e = assertThrows(AssertionError.class, () -> runner.run());
-        assertTrue(e.getCause() instanceof RuntimeException);
+        assertInstanceOf(RuntimeException.class, e.getCause());
         service.setFailOnCalls(false);
 
     }

File: nifi-extension-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestReplaceText.java
Patch:
@@ -850,7 +850,7 @@ public void testGetExistingContent() {
         runner.assertAllFlowFilesTransferred(ReplaceText.REL_SUCCESS, 1);
         final MockFlowFile out = runner.getFlowFilesForRelationship(ReplaceText.REL_SUCCESS).get(0);
         final String outContent = new String(out.toByteArray(), StandardCharsets.UTF_8);
-        assertTrue(outContent.equals("attribute header\n\nabc.txt\n\ndata header\n\nHello\nWorld!\n\nfooter"));
+        assertEquals("attribute header\n\nabc.txt\n\ndata header\n\nHello\nWorld!\n\nfooter", outContent);
     }
 
     @Test

File: nifi-extension-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestSplitRecord.java
Patch:
@@ -33,6 +33,7 @@
 import java.util.Optional;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertSame;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
 public class TestSplitRecord {
@@ -193,7 +194,7 @@ public void testReadFailure() throws InitializationException {
 
         runner.assertAllFlowFilesTransferred(SplitRecord.REL_FAILURE, 1);
         final MockFlowFile failed = runner.getFlowFilesForRelationship(SplitRecord.REL_FAILURE).get(0);
-        assertTrue(original == failed);
+        assertSame(original, failed);
 
         final MockComponentLog logger = runner.getLogger();
         final Optional<LogMessage> logMessage = logger.getErrorMessages().stream()

File: nifi-extension-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/enrichment/TestInsertRecordFieldsJoinStrategy.java
Patch:
@@ -37,6 +37,7 @@
 
 import static org.junit.jupiter.api.Assertions.assertArrayEquals;
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertInstanceOf;
 import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
@@ -167,7 +168,7 @@ public void testRecordPathPointingToChildRecord() {
         assertEquals(555, combined.getAsInt("id"));
 
         final Object xyzValue = combined.getValue("xyz");
-        assertTrue(xyzValue instanceof Record);
+        assertInstanceOf(Record.class, xyzValue);
 
         final Record xyzRecord = (Record) xyzValue;
         assertEquals("John Doe", xyzRecord.getValue("name"));

File: nifi-extension-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-dbcp-service/src/test/java/org/apache/nifi/dbcp/TestDBCPConnectionPoolLookup.java
Patch:
@@ -33,9 +33,9 @@
 import java.util.Map;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertInstanceOf;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertThrows;
-import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
@@ -88,7 +88,7 @@ public void testLookupServiceA() {
 
         final Connection connection = dbcpLookupService.getConnection(attributes);
         assertNotNull(connection);
-        assertTrue(connection instanceof MockConnection);
+        assertInstanceOf(MockConnection.class, connection);
 
         final MockConnection mockConnection = (MockConnection) connection;
         assertEquals(connectionA.getName(), mockConnection.getName());
@@ -101,7 +101,7 @@ public void testLookupServiceB() {
 
         final Connection connection = dbcpLookupService.getConnection(attributes);
         assertNotNull(connection);
-        assertTrue(connection instanceof MockConnection);
+        assertInstanceOf(MockConnection.class, connection);
 
         final MockConnection mockConnection = (MockConnection) connection;
         assertEquals(connectionB.getName(), mockConnection.getName());

File: nifi-extension-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/test/java/org/apache/nifi/xml/TestInferXmlSchema.java
Patch:
@@ -39,8 +39,8 @@
 import java.util.Collections;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertInstanceOf;
 import static org.junit.jupiter.api.Assertions.assertSame;
-import static org.junit.jupiter.api.Assertions.assertTrue;
 
 public class TestInferXmlSchema {
 
@@ -103,7 +103,7 @@ public void testStringFieldWithAttributes() throws IOException {
 
         final DataType softwareDataType = schema.getDataType("software").get();
         assertSame(RecordFieldType.RECORD, softwareDataType.getFieldType());
-        assertTrue(softwareDataType instanceof RecordDataType);
+        assertInstanceOf(RecordDataType.class, softwareDataType);
 
         final RecordSchema childSchema = ((RecordDataType) softwareDataType).getChildSchema();
         assertSame(RecordFieldType.BOOLEAN, childSchema.getDataType("favorite").get().getFieldType());

File: nifi-framework-bundle/nifi-framework/nifi-framework-authorization-providers/src/test/java/org/apache/nifi/authorization/StandardManagedAuthorizerTest.java
Patch:
@@ -29,7 +29,6 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertThrows;
-import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;
@@ -479,7 +478,7 @@ public Set<Group> getGroups() {
                 .build();
 
         final StandardManagedAuthorizer managedAuthorizer = getStandardManagedAuthorizer(accessPolicyProvider);
-        assertTrue(AuthorizationResult.denied().getResult().equals(managedAuthorizer.authorize(request).getResult()));
+        assertEquals(AuthorizationResult.denied().getResult(), managedAuthorizer.authorize(request).getResult());
     }
 
     @Test
@@ -525,7 +524,7 @@ public Set<Group> getGroups() {
                 .build();
 
         final StandardManagedAuthorizer managedAuthorizer = getStandardManagedAuthorizer(accessPolicyProvider);
-        assertTrue(AuthorizationResult.denied().getResult().equals(managedAuthorizer.authorize(request).getResult()));
+        assertEquals(AuthorizationResult.denied().getResult(), managedAuthorizer.authorize(request).getResult());
     }
 
     private StandardManagedAuthorizer getStandardManagedAuthorizer(final AccessPolicyProvider accessPolicyProvider) {

File: nifi-framework-bundle/nifi-framework/nifi-framework-components/src/test/java/org/apache/nifi/controller/service/TestStandardControllerServiceInvocationHandler.java
Patch:
@@ -31,6 +31,7 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertInstanceOf;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
@@ -155,7 +156,7 @@ public void assertNotProxied() {
             BaseControllerService nextLevel = getNextLevel();
             for (int i = 0; i < 5; i++) {
                 assertEquals(level + i + 1, nextLevel.getLevel());
-                assertTrue(nextLevel instanceof TestService);
+                assertInstanceOf(TestService.class, nextLevel);
                 assertFalse(Proxy.isProxyClass(nextLevel.getClass()));
 
                 nextLevel = nextLevel.getNextLevel();
@@ -164,7 +165,7 @@ public void assertNotProxied() {
 
         @Override
         public void assertNotProxied(final BaseControllerService service) {
-            assertTrue(service instanceof TestService);
+            assertInstanceOf(TestService.class, service);
             assertFalse(Proxy.isProxyClass(service.getClass()));
         }
     }

File: nifi-framework-bundle/nifi-framework/nifi-nar-utils/src/test/java/org/apache/nifi/nar/LoadNativeLibAspectTest.java
Patch:
@@ -27,6 +27,7 @@
 
 import static org.junit.jupiter.api.Assertions.assertArrayEquals;
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertInstanceOf;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.mockito.Mockito.mock;
@@ -107,7 +108,7 @@ public void testWhenNativeLibraryFileExistsThenCreateATempCopyAndProceedWithThat
         assertNotNull(args);
         assertEquals(1, args.length);
         assertNotNull(args[0]);
-        assertTrue(args[0] instanceof String);
+        assertInstanceOf(String.class, args[0]);
 
         String tempLibFilePathStr = (String) args[0];
         Path tempLibFilePath = Paths.get(tempLibFilePathStr);

File: nifi-framework-bundle/nifi-framework/nifi-site-to-site/src/test/java/org/apache/nifi/remote/protocol/http/TestHttpFlowFileServerProtocol.java
Patch:
@@ -70,6 +70,7 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertInstanceOf;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.mockito.ArgumentMatchers.any;
@@ -223,7 +224,7 @@ public void testShutdown() throws Exception {
         assertTrue(serverProtocol.isHandshakeSuccessful());
 
         final FlowFileCodec negotiatedCoded = serverProtocol.negotiateCodec(peer);
-        assertTrue(negotiatedCoded instanceof StandardFlowFileCodec);
+        assertInstanceOf(StandardFlowFileCodec.class, negotiatedCoded);
 
         assertEquals(negotiatedCoded, serverProtocol.getPreNegotiatedCodec());
         assertEquals(1234, serverProtocol.getRequestExpiration());

File: nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/web/api/TestDataTransferResource.java
Patch:
@@ -48,7 +48,7 @@
 import java.net.URL;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.junit.jupiter.api.Assertions.assertInstanceOf;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.doAnswer;
@@ -344,7 +344,7 @@ public void testTransferFlowFiles() {
         final Object entity = response.getEntity();
 
         assertEquals(202, response.getStatus());
-        assertTrue(entity instanceof StreamingOutput);
+        assertInstanceOf(StreamingOutput.class, entity);
     }
 
     @Test

File: nifi-registry/nifi-registry-core/nifi-registry-framework/src/test/java/org/apache/nifi/registry/serialization/TestFlowContentSerializer.java
Patch:
@@ -70,7 +70,7 @@ public void testSerializeDeserializeFlowContent() {
         // make sure we can read the version from the input stream and it should be the current version
         final Integer version = serializer.readDataModelVersion(in);
         assertEquals(serializer.getCurrentDataModelVersion(), version);
-        assertEquals(false, serializer.isProcessGroupVersion(version));
+        assertFalse(serializer.isProcessGroupVersion(version));
 
         // make sure we can deserialize back to FlowContent
         final FlowContent deserializedFlowContent = serializer.deserializeFlowContent(version, in);

File: nifi-registry/nifi-registry-core/nifi-registry-framework/src/test/java/org/apache/nifi/registry/service/TestRegistryService.java
Patch:
@@ -1359,7 +1359,7 @@ public void testGetDiffReturnsRemovedComponentChanges() {
                 .filter(p -> p.getComponentId().equals("ID-pg1")).findFirst();
 
         assertTrue(removedComponent.isPresent());
-        assertTrue(removedComponent.get().getDifferences().iterator().next().getDifferenceType().equals("COMPONENT_REMOVED"));
+        assertEquals("COMPONENT_REMOVED", removedComponent.get().getDifferences().iterator().next().getDifferenceType());
     }
 
     @Test

File: nifi-registry/nifi-registry-core/nifi-registry-web-api/src/test/java/org/apache/nifi/registry/web/api/BucketsIT.java
Patch:
@@ -31,6 +31,7 @@
 
 import static org.apache.nifi.registry.web.api.IntegrationTestUtils.assertBucketsEqual;
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
@@ -93,7 +94,7 @@ public void testGetBuckets() throws Exception {
         // Then: the pre-populated list of buckets is returned
 
         JSONAssert.assertEquals(expected, bucketsJson, false);
-        assertTrue(!bucketsJson.contains("null")); // JSON serialization from the server should not include null fields, such as "versionedFlows": null
+        assertFalse(bucketsJson.contains("null")); // JSON serialization from the server should not include null fields, such as "versionedFlows": null
     }
 
     @Test

File: nifi-system-tests/nifi-stateless-system-test-suite/src/test/java/org/apache/nifi/stateless/basics/RollbackOnExceptionIT.java
Patch:
@@ -33,7 +33,7 @@
 import java.util.Collections;
 
 import static org.junit.jupiter.api.Assertions.assertFalse;
-import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.junit.jupiter.api.Assertions.assertInstanceOf;
 
 public class RollbackOnExceptionIT extends StatelessSystemIT {
     private static final String EXCEPTION_TEXT = "Intentional Exception to verify behavior in RollbackOnExceptionIT";
@@ -54,7 +54,7 @@ public void testFlowFileCompletelyRemovedWhenExceptionThrown() throws IOExceptio
         final DataflowTrigger trigger = dataflow.trigger();
         final TriggerResult result = trigger.getResult();
         assertFalse(result.isSuccessful());
-        assertTrue(result.getFailureCause().get() instanceof ProcessException);
+        assertInstanceOf(ProcessException.class, result.getFailureCause().get());
 
         // Wait for dataflow to be purged
         while (dataflow.isFlowFileQueued()) {
@@ -79,7 +79,7 @@ public void testFlowFileCompletelyRemovedWhenTransferredToFailurePort() throws I
         final DataflowTrigger trigger = dataflow.trigger();
         final TriggerResult result = trigger.getResult();
         assertFalse(result.isSuccessful());
-        assertTrue(result.getFailureCause().get() instanceof FailurePortEncounteredException);
+        assertInstanceOf(FailurePortEncounteredException.class, result.getFailureCause().get());
 
         assertFalse(dataflow.isFlowFileQueued());
     }

File: nifi-extension-bundles/nifi-aws-bundle/nifi-aws-abstract-processors/src/main/java/org/apache/nifi/processors/aws/AbstractAWSCredentialsProviderProcessor.java
Patch:
@@ -255,7 +255,7 @@ protected AwsClientBuilder.EndpointConfiguration getEndpointConfiguration(final
             return null;
         }
 
-        final String endpointOverride = overrideValue.getValue();
+        final String endpointOverride = overrideValue.evaluateAttributeExpressions().getValue();
         return new AwsClientBuilder.EndpointConfiguration(endpointOverride, region.getName());
     }
 

File: nifi-extension-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-restapi-processors/src/test/java/org/apache/nifi/processors/elasticsearch/integration/ConsumeElasticsearch_IT.java
Patch:
@@ -35,6 +35,7 @@ public void setUp() {
         runner.setProperty(ConsumeElasticsearch.RANGE_FIELD, RANGE_FIELD);
         runner.setProperty(ConsumeElasticsearch.RANGE_FIELD_SORT_ORDER, RANGE_SORT_ORDER);
         runner.removeProperty(ConsumeElasticsearch.RANGE_INITIAL_VALUE);
+        runner.setValidateExpressionUsage(false);
     }
 
     @Test

File: nifi-extension-bundles/nifi-kafka-bundle/nifi-kafka-3-service/src/main/java/org/apache/nifi/kafka/service/Kafka3ConnectionService.java
Patch:
@@ -369,7 +369,7 @@ private Properties getClientProperties(final PropertyContext propertyContext) {
         final int requestTimeoutMs = getRequestTimeoutMs(propertyContext);
         properties.put(AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG, requestTimeoutMs);
 
-        final long timePeriod = propertyContext.getProperty(METADATA_WAIT_TIME).asTimePeriod(TimeUnit.MILLISECONDS);
+        final long timePeriod = propertyContext.getProperty(METADATA_WAIT_TIME).evaluateAttributeExpressions().asTimePeriod(TimeUnit.MILLISECONDS);
         properties.put(ProducerConfig.MAX_BLOCK_MS_CONFIG, timePeriod);
 
         return properties;

File: nifi-extension-bundles/nifi-py4j-extension-bundle/nifi-py4j-integration-tests/src/test/java/org.apache.nifi.py4j/PythonControllerInteractionIT.java
Patch:
@@ -472,6 +472,7 @@ public void testRecordTransformWithDynamicProperties() throws InitializationExce
 
     private TestRunner createRecordTransformRunner(final String type) throws InitializationException {
         final TestRunner runner = createProcessor("SetRecordField");
+        runner.setValidateExpressionUsage(false);
 
         final JsonTreeReader reader = new JsonTreeReader();
         final JsonRecordSetWriter writer = new JsonRecordSetWriter();
@@ -724,6 +725,7 @@ private TestRunner createProcessor(final String type, final String version) {
         final AsyncLoadedProcessor processor = bridge.createProcessor(createId(), type, version, true, true);
 
         final TestRunner runner = TestRunners.newTestRunner(processor);
+        runner.setValidateExpressionUsage(false);
 
         final long maxInitTime = System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(30L);
         while (true) {

File: minifi/minifi-toolkit/minifi-toolkit-schema/src/main/java/org/apache/nifi/minifi/toolkit/schema/ConfigSchema.java
Patch:
@@ -115,7 +115,6 @@ public ConfigSchema(Map map, List<String> validationIssues) {
         List<String> allControllerServiceIds = allProcessGroups.stream().flatMap(p -> p.getControllerServices().stream()).map(ControllerServiceSchema::getId).collect(Collectors.toList());
         List<String> allFunnelIds = allProcessGroups.stream().flatMap(p -> p.getFunnels().stream()).map(FunnelSchema::getId).collect(Collectors.toList());
         List<String> allConnectionIds = allConnectionSchemas.stream().map(ConnectionSchema::getId).collect(Collectors.toList());
-        List<String> allRemoteProcessGroupNames = allRemoteProcessGroups.stream().map(RemoteProcessGroupSchema::getName).collect(Collectors.toList());
         List<String> allRemoteInputPortIds = allRemoteProcessGroups.stream().filter(r -> r.getInputPorts() != null)
                 .flatMap(r -> r.getInputPorts().stream()).map(RemotePortSchema::getId).collect(Collectors.toList());
         List<String> allRemoteOutputPortIds = allRemoteProcessGroups.stream().filter(r -> r.getOutputPorts() != null)

File: nifi-commons/nifi-properties/src/test/java/org/apache/nifi/util/NiFiPropertiesTest.java
Patch:
@@ -188,7 +188,7 @@ public void testShouldVerifyExceptionThrownWhenInValidFormatPortValue() {
         NiFiProperties properties = loadNiFiProperties("/NiFiProperties/conf/nifi.blank.properties", additionalProperties);
 
         // Act
-        Integer clusterProtocolPort = properties.getClusterNodeProtocolPort();
+        properties.getClusterNodeProtocolPort();
         assertThrows(NumberFormatException.class, () -> Integer.parseInt(portValue));
     }
 

File: nifi-extension-bundles/nifi-aws-bundle/nifi-aws-processors/src/test/java/org/apache/nifi/processors/aws/s3/TestDeleteS3Object.java
Patch:
@@ -100,7 +100,6 @@ public void testDeleteObjectS3Exception() {
         runner.run(1);
 
         runner.assertAllFlowFilesTransferred(DeleteS3Object.REL_FAILURE, 1);
-        ArgumentCaptor<DeleteObjectRequest> captureRequest = ArgumentCaptor.forClass(DeleteObjectRequest.class);
         Mockito.verify(mockS3Client, Mockito.never()).deleteVersion(Mockito.any(DeleteVersionRequest.class));
     }
 

File: nifi-extension-bundles/nifi-evtx-bundle/nifi-evtx-processors/src/main/java/org/apache/nifi/processors/evtx/parser/bxml/value/SystemtimeTypeNode.java
Patch:
@@ -38,7 +38,7 @@ public SystemtimeTypeNode(BinaryReader binaryReader, ChunkHeader chunkHeader, Bx
         int year = binaryReader.readWord();
         int month = binaryReader.readWord();
         final int monthOfYear = month + 1;
-        int dayOfWeek = binaryReader.readWord();
+        binaryReader.readWord(); // dayOfWeek
         int day = binaryReader.readWord();
         int hour = binaryReader.readWord();
         int minute = binaryReader.readWord();

File: nifi-extension-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/AbstractDBCPConnectionPool.java
Patch:
@@ -86,7 +86,7 @@ public List<ConfigVerificationResult> verify(final ConfigurationContext context,
                     .explanation("Successfully configured data source")
                     .build());
 
-            try (final Connection conn = getConnection(basicDataSource, kerberosUser)) {
+            try (final Connection ignored = getConnection(basicDataSource, kerberosUser)) {
                 results.add(new ConfigVerificationResult.Builder()
                         .verificationStepName("Establish Connection")
                         .outcome(SUCCESSFUL)

File: nifi-extension-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/test/java/org/apache/nifi/processors/gcp/storage/ListGCSBucketTest.java
Patch:
@@ -769,7 +769,6 @@ public void testFileAcls() {
 
     @Test
     public void testYieldOnBadStateRestore() {
-        final Iterable<Blob> mockList = Collections.emptyList();
 
         runner.getStateManager().setFailOnStateGet(Scope.CLUSTER, true);
         runner.enqueue("test");

File: nifi-extension-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/main/java/org/apache/nifi/processors/hadoop/FlowFileStreamUnpackerSequenceFileWriter.java
Patch:
@@ -41,7 +41,7 @@ public class FlowFileStreamUnpackerSequenceFileWriter extends SequenceFileWriter
     @Override
     protected void processInputStream(final InputStream stream, final FlowFile flowFileStreamPackedFlowFile, final Writer writer) throws IOException {
         final FlowFileUnpackager unpackager = new FlowFileUnpackager();
-        try (final InputStream in = new BufferedInputStream(stream)) {
+        try (final InputStream ignored = new BufferedInputStream(stream)) {
             while (unpackager.hasMoreData()) {
                 unpackager.unpackageFlowFile(stream, writer);
             }

File: nifi-extension-bundles/nifi-hazelcast-bundle/nifi-hazelcast-services/src/main/java/org/apache/nifi/hazelcast/services/cacheclient/HazelcastMapCacheClient.java
Patch:
@@ -139,7 +139,7 @@ public <K, V> boolean replace(final AtomicCacheEntry<K, V, Long> entry, final Se
 
         final String key = serializeCacheEntryKey(entry.getKey(), keySerializer);
 
-        try (final HazelcastCache.HazelcastCacheEntryLock lock = cache.acquireLock(key)) {
+        try (final HazelcastCache.HazelcastCacheEntryLock ignored = cache.acquireLock(key)) {
             final byte[] oldValue = cache.get(key);
 
             if (oldValue == null && (entry.getRevision().isEmpty() || entry.getRevision().get() < STARTING_REVISION)) {

File: nifi-extension-bundles/nifi-kafka-bundle/nifi-kafka-processors/src/main/java/org/apache/nifi/kafka/processors/ConsumeKafka.java
Patch:
@@ -330,7 +330,6 @@ public void onPropertyModified(final PropertyDescriptor descriptor, final String
 
     @OnScheduled
     public void onScheduled(final ProcessContext context) {
-        final KafkaConnectionService connectionService = context.getProperty(CONNECTION_SERVICE).asControllerService(KafkaConnectionService.class);
         pollingContext = createPollingContext(context);
         headerEncoding = Charset.forName(context.getProperty(HEADER_ENCODING).getValue());
 

File: nifi-extension-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/test/java/org/apache/nifi/processors/script/TestScriptedTransformRecord.java
Patch:
@@ -134,6 +134,7 @@ public void testZeroRecordInput() throws InitializationException {
         assertEquals(0, testRunner.getCounterValue("Records Dropped").intValue());
 
         final List<Record> written = recordWriter.getRecordsWritten();
+        assertEquals(0, written.size());
     }
 
     @Test

File: nifi-extension-bundles/nifi-smb-bundle/nifi-smb-smbj-client/src/test/java/org/apache/nifi/services/smb/SmbjClientServiceIT.java
Patch:
@@ -26,7 +26,6 @@
 import static org.apache.nifi.smb.common.SmbProperties.TIMEOUT;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.junit.jupiter.api.Assertions.fail;
-import static org.mockito.Mockito.mock;
 
 import eu.rekawek.toxiproxy.model.ToxicDirection;
 import java.util.HashMap;
@@ -38,7 +37,6 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 import org.apache.nifi.components.PropertyDescriptor;
-import org.apache.nifi.controller.ConfigurationContext;
 import org.apache.nifi.util.MockConfigurationContext;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
@@ -94,7 +92,6 @@ public void shouldRescueAfterConnectionFailure() throws Exception {
         writeFile("testDirectory/directory2/nested_directory/file", "content");
         ContainerProxy sambaProxy = toxiproxy.getProxy("samba", 445);
         SmbjClientProviderService smbjClientProviderService = new SmbjClientProviderService();
-        ConfigurationContext context = mock(ConfigurationContext.class);
 
         Map<PropertyDescriptor, String> properties = new HashMap<>();
         properties.put(HOSTNAME, sambaProxy.getContainerIpAddress());

File: nifi-extension-bundles/nifi-standard-bundle/nifi-standard-parameter-providers/src/main/java/org/apache/nifi/parameter/KubernetesSecretParameterProvider.java
Patch:
@@ -148,7 +148,6 @@ public List<ConfigVerificationResult> verify(final ConfigurationContext context,
 
         try {
             final List<ParameterGroup> parameterGroups = fetchParameters(context);
-            final Set<String> parameterGroupNames = parameterGroups.stream().map(ParameterGroup::getGroupName).collect(Collectors.toSet());
             final long parameterCount = parameterGroups.stream()
                     .flatMap(group -> group.getParameters().stream())
                     .count();

File: nifi-extension-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ReplaceText.java
Patch:
@@ -717,7 +717,6 @@ public FlowFile replace(FlowFile flowFile, final ProcessSession session, final P
                     out.write(updatedValue.getBytes(charset));
                 });
             } else {
-                final Pattern searchPattern = Pattern.compile(searchValue, Pattern.LITERAL);
 
                 flowFile = session.write(flowFile, new StreamReplaceCallback(charset, maxBufferSize, context.getProperty(LINE_BY_LINE_EVALUATION_MODE).getValue(),
                     (bw, oneLine) -> {

File: nifi-extension-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/QueryDatabaseTableTest.java
Patch:
@@ -1104,7 +1104,6 @@ public void testInitialLoadStrategyStartAtCurrentMaximumValues() throws SQLExcep
         // load test data to database
         final Connection con = ((DBCPService) runner.getControllerService("dbcp")).getConnection();
         Statement stmt = con.createStatement();
-        InputStream in;
 
         try {
             stmt.execute("drop table TEST_QUERY_DB_TABLE");

File: nifi-extension-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestExecuteSQLRecord.java
Patch:
@@ -563,7 +563,6 @@ public void invokeOnTriggerRecords(final Integer queryTimeout, final String quer
 
         // ResultSet size will be 1x200x100 = 20 000 rows
         // because of where PER.ID = ${person.id}
-        final int nrOfRows = 20000;
 
         MockRecordWriter recordWriter = new MockRecordWriter(null, true, -1);
         runner.addControllerService("writer", recordWriter);

File: nifi-extension-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestExtractTextNamedGroups.java
Patch:
@@ -48,7 +48,6 @@ public void testProcessor() {
 
         testRunner.assertAllFlowFilesTransferred(ExtractText.REL_MATCH, 1);
         final MockFlowFile out = testRunner.getFlowFilesForRelationship(ExtractText.REL_MATCH).get(0);
-        java.util.Map<String, String> attributes = out.getAttributes();
         out.assertAttributeEquals("regex.result1.ALL", SAMPLE_STRING);
         out.assertAttributeEquals("regex.result2.BAR1", "bar1");
         out.assertAttributeEquals("regex.result3.BAR1", "bar1");

File: nifi-extension-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestListFile.java
Patch:
@@ -140,7 +140,7 @@ private List<File> listFiles(final File file) {
     private void runNext() throws InterruptedException {
         runner.clearTransferState();
 
-        final List<File> files = listFiles(testDir);
+        listFiles(testDir);
         final Long lagMillis;
         if (isMillisecondSupported) {
             lagMillis = AbstractListProcessor.LISTING_LAG_MILLIS.get(TimeUnit.MILLISECONDS);

File: nifi-extension-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestPutTCP.java
Patch:
@@ -352,7 +352,7 @@ private void assertMessagesReceived(final String[] sentData) throws Exception {
 
     private void assertMessagesReceived(final String[] sentData, final int iterations) throws Exception {
         for (int i = 0; i < iterations; i++) {
-            for (String item : sentData) {
+            for (String ignored : sentData) {
                 final ByteArrayMessage message = messages.take();
                 assertNotNull(message, String.format("Message [%d] not found", i));
                 assertTrue(Arrays.asList(sentData).contains(new String(message.getMessage())));

File: nifi-extension-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-hikari-dbcp-service/src/main/java/org/apache/nifi/dbcp/HikariCPConnectionPool.java
Patch:
@@ -353,7 +353,7 @@ public List<ConfigVerificationResult> verify(final ConfigurationContext context,
                     .explanation("Successfully configured data source")
                     .build());
 
-            try (final Connection conn = getConnection(hikariDataSource, kerberosUser)) {
+            try (final Connection ignored = getConnection(hikariDataSource, kerberosUser)) {
                 results.add(new ConfigVerificationResult.Builder()
                         .verificationStepName("Establish Connection")
                         .outcome(SUCCESSFUL)

File: nifi-extension-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/test/java/org/apache/nifi/json/TestInferJsonSchemaAccessStrategy.java
Patch:
@@ -79,7 +79,7 @@ void testPerformanceOfSchemaInferenceWithTimestamp() throws IOException {
 
             for (int i = 0; i < 10_000; i++) {
                 try (final InputStream in = new ByteArrayInputStream(manyCopies)) {
-                    final RecordSchema schema = accessStrategy.getSchema(null, in, null);
+                    accessStrategy.getSchema(null, in, null);
                 }
             }
 
@@ -107,7 +107,7 @@ void testPerformanceOfSchemaInferenceWithoutTimestamp() throws IOException {
                     final InferSchemaAccessStrategy<?> accessStrategy = new InferSchemaAccessStrategy<>((var, content) -> new JsonRecordSource(content),
                             noTimestampInference, Mockito.mock(ComponentLog.class));
 
-                    final RecordSchema schema = accessStrategy.getSchema(null, in, null);
+                    accessStrategy.getSchema(null, in, null);
                 }
             }
 

File: nifi-extension-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/test/java/org/apache/nifi/xml/TestInferXmlSchema.java
Patch:
@@ -131,7 +131,6 @@ private RecordSchema inferSchema(final String filename, final String contentFiel
         final SchemaInferenceEngine<XmlNode> schemaInference = new XmlSchemaInference(timeValueInference);
         final InferSchemaAccessStrategy<XmlNode> inferStrategy = new InferSchemaAccessStrategy<>(xmlSourceFactory, schemaInference, Mockito.mock(ComponentLog.class));
 
-        final RecordSchema schema;
         try (final InputStream fis = new FileInputStream(file);
              final InputStream in = new BufferedInputStream(fis)) {
             return inferStrategy.getSchema(Collections.emptyMap(), in, null);

File: nifi-framework-bundle/nifi-framework-extensions/nifi-provenance-repository-bundle/nifi-persistent-provenance-repository/src/test/java/org/apache/nifi/provenance/toc/TestStandardTocWriter.java
Patch:
@@ -32,7 +32,7 @@ public void testOverwriteEmptyFile() throws IOException {
         try {
             assertTrue(tocFile.createNewFile());
 
-            try (final StandardTocWriter writer = new StandardTocWriter(tocFile, false, false)) {
+            try (final StandardTocWriter ignored = new StandardTocWriter(tocFile, false, false)) {
             }
         } finally {
             FileUtils.deleteFile(tocFile, false);

File: nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/java/org/apache/nifi/authorization/AccessPolicyProviderInvocationHandler.java
Patch:
@@ -42,7 +42,7 @@ public AccessPolicyProviderInvocationHandler(final AccessPolicyProvider accessPo
 
     @Override
     public Object invoke(final Object proxy, final Method method, final Object[] args) throws Throwable {
-        try (final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(classLoader)) {
+        try (final NarCloseable ignored = NarCloseable.withComponentNarLoader(classLoader)) {
             if (getUserGroupProviderMethod.equals(method)) {
                 final UserGroupProvider userGroupProvider = (UserGroupProvider) method.invoke(accessPolicyProvider, args);
                 if (userGroupProvider == null) {

File: nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/java/org/apache/nifi/authorization/AuthorizerInvocationHandler.java
Patch:
@@ -43,7 +43,7 @@ public AuthorizerInvocationHandler(final Authorizer authorizer, final ClassLoade
 
     @Override
     public Object invoke(final Object proxy, final Method method, final Object[] args) throws Throwable {
-        try (final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(classLoader)) {
+        try (final NarCloseable ignored = NarCloseable.withComponentNarLoader(classLoader)) {
             if (getAccessPolicyProviderMethod.equals(method)) {
                 final AccessPolicyProvider accessPolicyProvider = (AccessPolicyProvider) method.invoke(authorizer, args);
                 if (accessPolicyProvider == null) {

File: nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/java/org/apache/nifi/authorization/UserGroupProviderInvocationHandler.java
Patch:
@@ -34,7 +34,7 @@ public UserGroupProviderInvocationHandler(final UserGroupProvider userGroupProvi
 
     @Override
     public Object invoke(final Object proxy, final Method method, final Object[] args) throws Throwable {
-        try (final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(classLoader)) {
+        try (final NarCloseable ignored = NarCloseable.withComponentNarLoader(classLoader)) {
             return method.invoke(userGroupProvider, args);
         } catch (final InvocationTargetException e) {
             // If the proxied instance throws an Exception, it'll be wrapped in an InvocationTargetException. We want

File: nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/test/java/org/apache/nifi/cluster/protocol/jaxb/message/TestJaxbProtocolUtils.java
Patch:
@@ -74,7 +74,6 @@ public void testRoundTripConnectionResponse() throws JAXBException {
         JaxbProtocolUtils.JAXB_CONTEXT.createMarshaller().marshal(msg, baos);
         final Object unmarshalled = JaxbProtocolUtils.JAXB_CONTEXT.createUnmarshaller().unmarshal(new ByteArrayInputStream(baos.toByteArray()));
         assertTrue(unmarshalled instanceof ConnectionResponseMessage);
-        final ConnectionResponseMessage unmarshalledMsg = (ConnectionResponseMessage) unmarshalled;
 
         final ComponentRevisionSnapshot receivedSnapshot = msg.getConnectionResponse().getComponentRevisions();
         final List<ComponentRevision> revisions = receivedSnapshot.getComponentRevisions();

File: nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/coordination/http/endpoints/TestProcessorEndpointMerger.java
Patch:
@@ -34,7 +34,6 @@ public class TestProcessorEndpointMerger {
 
     @Test
     public void testMergeValidationErrors() {
-        final ProcessorEndpointMerger merger = new ProcessorEndpointMerger();
         final Map<String, Set<NodeIdentifier>> validationErrorMap = new HashMap<>();
 
         final NodeIdentifier nodeId1234 = new NodeIdentifier("1234", "localhost", 9000, "localhost", 9001, "localhost", 9002, 9003, false);

File: nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/firewall/impl/FileBasedClusterNodeFirewallTest.java
Patch:
@@ -58,9 +58,8 @@ public class FileBasedClusterNodeFirewallTest {
      */
     @BeforeAll
     public static void ensureBadHostsDoNotWork() {
-        final InetAddress ip;
         try {
-            ip = InetAddress.getByName(NONEXISTENT_HOSTNAME);
+            InetAddress.getByName(NONEXISTENT_HOSTNAME);
         } catch (final UnknownHostException uhe) {
             badHostsDoNotResolve = true;
         }

File: nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/controller/flow/AbstractFlowManager.java
Patch:
@@ -463,7 +463,7 @@ public void removeReportingTask(final ReportingTaskNode reportingTaskNode) {
         reportingTaskNode.verifyCanDelete();
 
         final Class<?> taskClass = reportingTaskNode.getReportingTask().getClass();
-        try (final NarCloseable x = NarCloseable.withComponentNarLoader(getExtensionManager(), taskClass, reportingTaskNode.getReportingTask().getIdentifier())) {
+        try (final NarCloseable ignored = NarCloseable.withComponentNarLoader(getExtensionManager(), taskClass, reportingTaskNode.getReportingTask().getIdentifier())) {
             ReflectionUtils.quietlyInvokeMethodsWithAnnotation(OnRemoved.class, reportingTaskNode.getReportingTask(), reportingTaskNode.getConfigurationContext());
         }
 
@@ -511,7 +511,7 @@ public void removeFlowAnalysisRule(final FlowAnalysisRuleNode flowAnalysisRuleNo
         flowAnalysisRuleNode.verifyCanDelete();
 
         final Class<?> taskClass = flowAnalysisRuleNode.getFlowAnalysisRule().getClass();
-        try (final NarCloseable x = NarCloseable.withComponentNarLoader(getExtensionManager(), taskClass, flowAnalysisRuleNode.getFlowAnalysisRule().getIdentifier())) {
+        try (final NarCloseable ignored = NarCloseable.withComponentNarLoader(getExtensionManager(), taskClass, flowAnalysisRuleNode.getFlowAnalysisRule().getIdentifier())) {
             ReflectionUtils.quietlyInvokeMethodsWithAnnotation(OnRemoved.class, flowAnalysisRuleNode.getFlowAnalysisRule(), flowAnalysisRuleNode.getConfigurationContext());
         }
 
@@ -556,7 +556,7 @@ public void removeParameterProvider(final ParameterProviderNode parameterProvide
         }
 
         final Class<?> taskClass = parameterProvider.getParameterProvider().getClass();
-        try (final NarCloseable x = NarCloseable.withComponentNarLoader(getExtensionManager(), taskClass, parameterProvider.getParameterProvider().getIdentifier())) {
+        try (final NarCloseable ignored = NarCloseable.withComponentNarLoader(getExtensionManager(), taskClass, parameterProvider.getParameterProvider().getIdentifier())) {
             ReflectionUtils.quietlyInvokeMethodsWithAnnotation(OnRemoved.class, parameterProvider.getParameterProvider(), parameterProvider.getConfigurationContext());
         }
 

File: nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/controller/flowanalysis/AbstractFlowAnalysisRuleNode.java
Patch:
@@ -251,7 +251,7 @@ public ParameterLookup getParameterLookup() {
     @Override
     public String toString() {
         FlowAnalysisRule flowAnalysisRule = flowAnalysisRuleRef.get().getFlowAnalysisRule();
-        try (final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(getExtensionManager(), flowAnalysisRule.getClass(), flowAnalysisRule.getIdentifier())) {
+        try (final NarCloseable ignored = NarCloseable.withComponentNarLoader(getExtensionManager(), flowAnalysisRule.getClass(), flowAnalysisRule.getIdentifier())) {
             return getFlowAnalysisRule().toString();
         }
     }
@@ -274,7 +274,7 @@ public void disable() {
     private void setState(FlowAnalysisRuleState newState, Class<? extends Annotation> annotation) {
         final ConfigurationContext configContext = new StandardConfigurationContext(this, this.serviceLookup, null);
 
-        try (final NarCloseable nc = NarCloseable.withComponentNarLoader(getExtensionManager(), getFlowAnalysisRule().getClass(), getIdentifier())) {
+        try (final NarCloseable ignored = NarCloseable.withComponentNarLoader(getExtensionManager(), getFlowAnalysisRule().getClass(), getIdentifier())) {
             ReflectionUtils.invokeMethodsWithAnnotation(annotation, getFlowAnalysisRule(), configContext);
 
             this.state = newState;
@@ -340,7 +340,7 @@ public List<ConfigVerificationResult> verifyConfiguration(final ConfigurationCon
                     }
                 } else {
                     // Verify the configuration, using the component's classloader
-                    try (final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(extensionManager, flowAnalysisRule.getClass(), getIdentifier())) {
+                    try (final NarCloseable ignored = NarCloseable.withComponentNarLoader(extensionManager, flowAnalysisRule.getClass(), getIdentifier())) {
                         results.addAll(verifiable.verify(context, logger));
                     }
                 }

File: nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/controller/parameter/StandardParameterProviderNode.java
Patch:
@@ -280,7 +280,7 @@ public void fetchParameters() {
         final ParameterProvider parameterProvider = parameterProviderRef.get().getParameterProvider();
         final ConfigurationContext configurationContext = getConfigurationContext();
         List<ParameterGroup> fetchedParameterGroups;
-        try (final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(getExtensionManager(), parameterProvider.getClass(), parameterProvider.getIdentifier())) {
+        try (final NarCloseable ignored = NarCloseable.withComponentNarLoader(getExtensionManager(), parameterProvider.getClass(), parameterProvider.getIdentifier())) {
             fetchedParameterGroups = parameterProvider.fetchParameters(configurationContext);
         } catch (final IOException | RuntimeException e) {
             throw new IllegalStateException(String.format("Error fetching parameters for %s: %s", this, e.getMessage()), e);
@@ -440,7 +440,7 @@ public List<ConfigVerificationResult> verifyConfiguration(final ConfigurationCon
                     }
                 } else {
                     // Verify the configuration, using the component's classloader
-                    try (final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(extensionManager, parameterProvider.getClass(), getIdentifier())) {
+                    try (final NarCloseable ignored = NarCloseable.withComponentNarLoader(extensionManager, parameterProvider.getClass(), getIdentifier())) {
                         results.addAll(verifiable.verify(context, logger));
                     }
                 }

File: nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/controller/reporting/AbstractReportingTaskNode.java
Patch:
@@ -381,7 +381,7 @@ public List<ConfigVerificationResult> verifyConfiguration(final ConfigurationCon
                     }
                 } else {
                     // Verify the configuration, using the component's classloader
-                    try (final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(extensionManager, reportingTask.getClass(), getIdentifier())) {
+                    try (final NarCloseable ignored = NarCloseable.withComponentNarLoader(extensionManager, reportingTask.getClass(), getIdentifier())) {
                         results.addAll(verifiable.verify(context, logger));
                     }
                 }
@@ -417,7 +417,7 @@ public void notifyPrimaryNodeChanged(final PrimaryNodeState nodeState, final Lif
 
         lifecycleState.incrementActiveThreadCount(null);
         try {
-            try (final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(getExtensionManager(), taskClass, getIdentifier())) {
+            try (final NarCloseable ignored = NarCloseable.withComponentNarLoader(getExtensionManager(), taskClass, getIdentifier())) {
                 ReflectionUtils.quietlyInvokeMethodsWithAnnotation(OnPrimaryNodeStateChange.class, getReportingTask(), nodeState);
             }
         } finally {
@@ -440,7 +440,7 @@ public void migrateConfiguration(final Map<String, String> originalPropertyValue
         final StandardPropertyConfiguration propertyConfig = new StandardPropertyConfiguration(effectiveValues,
                 originalPropertyValues, this::mapRawValueToEffectiveValue, toString(), serviceFactory);
 
-        try (final NarCloseable nc = NarCloseable.withComponentNarLoader(getExtensionManager(), task.getClass(), getIdentifier())) {
+        try (final NarCloseable ignored = NarCloseable.withComponentNarLoader(getExtensionManager(), task.getClass(), getIdentifier())) {
             task.migrateProperties(propertyConfig);
         } catch (final Exception e) {
             LOG.error("Failed to migrate Property Configuration for {}.", this, e);

File: nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/controller/service/StandardControllerServiceInvocationHandler.java
Patch:
@@ -98,7 +98,7 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
         }
 
         final ClassLoader callerClassLoader = Thread.currentThread().getContextClassLoader();
-        try (final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(extensionManager, originalService.getClass(), originalService.getIdentifier())) {
+        try (final NarCloseable ignored = NarCloseable.withComponentNarLoader(extensionManager, originalService.getClass(), originalService.getIdentifier())) {
             // If any objects are proxied, unwrap them so that we provide the unproxied object to the Controller Service.
             ClassLoader serviceClassLoader = Thread.currentThread().getContextClassLoader();
 

File: nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/groups/StandardProcessGroup.java
Patch:
@@ -666,7 +666,7 @@ private StateManager getStateManager(final String componentId) {
 
     private void shutdown(final ProcessGroup procGroup) {
         for (final ProcessorNode node : procGroup.getProcessors()) {
-            try (final NarCloseable x = NarCloseable.withComponentNarLoader(extensionManager, node.getProcessor().getClass(), node.getIdentifier())) {
+            try (final NarCloseable ignored = NarCloseable.withComponentNarLoader(extensionManager, node.getProcessor().getClass(), node.getIdentifier())) {
                 final StandardProcessContext processContext = new StandardProcessContext(node, controllerServiceProvider,
                     getStateManager(node.getIdentifier()), () -> false, nodeTypeProvider);
                 ReflectionUtils.quietlyInvokeMethodsWithAnnotation(OnShutdown.class, node.getProcessor(), processContext);
@@ -1232,7 +1232,7 @@ public void removeProcessor(final ProcessorNode processor) {
             // with the Python process even after the Python process has been destroyed.
             processor.pauseValidationTrigger();
 
-            try (final NarCloseable x = NarCloseable.withComponentNarLoader(extensionManager, processor.getProcessor().getClass(), processor.getIdentifier())) {
+            try (final NarCloseable ignored = NarCloseable.withComponentNarLoader(extensionManager, processor.getProcessor().getClass(), processor.getIdentifier())) {
                 final StandardProcessContext processContext = new StandardProcessContext(processor, controllerServiceProvider,
                     getStateManager(processor.getIdentifier()), () -> false, nodeTypeProvider);
                 ReflectionUtils.quietlyInvokeMethodsWithAnnotation(OnRemoved.class, processor.getProcessor(), processContext);
@@ -2590,7 +2590,7 @@ public void removeControllerService(final ControllerServiceNode service) {
 
             service.verifyCanDelete();
 
-            try (final NarCloseable x = NarCloseable.withComponentNarLoader(extensionManager, service.getControllerServiceImplementation().getClass(), service.getIdentifier())) {
+            try (final NarCloseable ignored = NarCloseable.withComponentNarLoader(extensionManager, service.getControllerServiceImplementation().getClass(), service.getIdentifier())) {
                 final ConfigurationContext configurationContext = new StandardConfigurationContext(service, controllerServiceProvider, null);
                 ReflectionUtils.quietlyInvokeMethodsWithAnnotation(OnRemoved.class, service.getControllerServiceImplementation(), configurationContext);
             }

File: nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/registry/flow/StandardFlowRegistryClientNode.java
Patch:
@@ -186,7 +186,7 @@ public void setDescription(final String description) {
 
     @Override
     public boolean isStorageLocationApplicable(final String location) {
-        try (final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(getExtensionManager(), client.getClass(), getIdentifier())) {
+        try (final NarCloseable ignored = NarCloseable.withComponentNarLoader(getExtensionManager(), client.getClass(), getIdentifier())) {
             return client.get().getComponent().isStorageLocationApplicable(getConfigurationContext(), location);
         }
     }
@@ -310,7 +310,7 @@ private <T> T execute(final FlowRegistryClientAction<T> action) throws FlowRegis
             throw new FlowRegistryInvalidException(validationProblems);
         }
 
-        try (final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(getExtensionManager(), client.getClass(), getIdentifier())) {
+        try (final NarCloseable ignored = NarCloseable.withComponentNarLoader(getExtensionManager(), client.getClass(), getIdentifier())) {
             return action.execute();
         }
     }

File: nifi-framework-bundle/nifi-framework/nifi-framework-components/src/test/java/org/apache/nifi/parameter/TestStandardParameterContext.java
Patch:
@@ -400,7 +400,6 @@ private static void enableControllerService(final ControllerServiceNode serviceN
     public void testAlertReferencingComponents() {
         final String inheritedParamName = "def";
         final String originalValue = "123";
-        final String changedValue = "321";
 
         final HashMapParameterReferenceManager referenceManager = Mockito.spy(new HashMapParameterReferenceManager());
         final Set<ProcessGroup> processGroups = new HashSet<>();

File: nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/ExtensionBuilder.java
Patch:
@@ -716,7 +716,7 @@ private static void verifyControllerServiceReferences(final ConfigurableComponen
 
        // Find any Controller Service API's that are bundled in the same NAR.
        final Set<Class<?>> cobundledApis = new HashSet<>();
-       try (final NarCloseable closeable = NarCloseable.withComponentNarLoader(component.getClass().getClassLoader())) {
+       try (final NarCloseable ignored = NarCloseable.withComponentNarLoader(component.getClass().getClassLoader())) {
            final List<PropertyDescriptor> descriptors = component.getPropertyDescriptors();
            if (descriptors != null && !descriptors.isEmpty()) {
                for (final PropertyDescriptor descriptor : descriptors) {

File: nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/state/providers/local/WriteAheadLocalStateProvider.java
Patch:
@@ -110,7 +110,6 @@ public WriteAheadLocalStateProvider() {
     @Override
     public synchronized void init(final StateProviderInitializationContext context) throws IOException {
         long checkpointIntervalMillis = context.getProperty(CHECKPOINT_INTERVAL).asTimePeriod(TimeUnit.MILLISECONDS);
-        int numPartitions = context.getProperty(NUM_PARTITIONS).asInteger();
         alwaysSync = context.getProperty(ALWAYS_SYNC).asBoolean();
 
 

File: nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/tasks/ConnectableTask.java
Patch:
@@ -237,7 +237,7 @@ public InvocationResult invoke() {
 
         final String originalThreadName = Thread.currentThread().getName();
         try {
-            try (final AutoCloseable ncl = NarCloseable.withComponentNarLoader(flowController.getExtensionManager(), connectable.getRunnableComponent().getClass(), connectable.getIdentifier())) {
+            try (final AutoCloseable ignored = NarCloseable.withComponentNarLoader(flowController.getExtensionManager(), connectable.getRunnableComponent().getClass(), connectable.getIdentifier())) {
                 boolean shouldRun = connectable.getScheduledState() == ScheduledState.RUNNING || connectable.getScheduledState() == ScheduledState.RUN_ONCE;
                 while (shouldRun) {
                     invocationCount++;

File: nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/tasks/ReportingTaskWrapper.java
Patch:
@@ -43,7 +43,7 @@ public synchronized void run() {
         if (!lifecycleState.tryIncrementActiveThreadCount(null)) {
             return;
         }
-        try (final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(extensionManager, taskNode.getReportingTask().getClass(), taskNode.getIdentifier())) {
+        try (final NarCloseable ignored = NarCloseable.withComponentNarLoader(extensionManager, taskNode.getReportingTask().getClass(), taskNode.getIdentifier())) {
             taskNode.getReportingTask().onTrigger(taskNode.getReportingContext());
         } catch (final Throwable t) {
             final ComponentLog componentLog = new SimpleProcessLogger(taskNode.getIdentifier(), taskNode.getReportingTask(), new StandardLoggingContext(null));
@@ -56,7 +56,7 @@ public synchronized void run() {
                 // if the reporting task is no longer scheduled to run and this is the last thread,
                 // invoke the OnStopped methods
                 if (!lifecycleState.isScheduled() && lifecycleState.getActiveThreadCount() == 1 && lifecycleState.mustCallOnStoppedMethods()) {
-                    try (final NarCloseable x = NarCloseable.withComponentNarLoader(extensionManager, taskNode.getReportingTask().getClass(), taskNode.getIdentifier())) {
+                    try (final NarCloseable ignored = NarCloseable.withComponentNarLoader(extensionManager, taskNode.getReportingTask().getClass(), taskNode.getIdentifier())) {
                         ReflectionUtils.quietlyInvokeMethodsWithAnnotation(OnStopped.class, taskNode.getReportingTask(), taskNode.getConfigurationContext());
                     }
                 }

File: nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/repository/TestFileSystemRepository.java
Patch:
@@ -401,7 +401,7 @@ public void testResourceClaimReused() throws IOException {
         // should not be equal because claim1 may still be in use
         assertNotSame(claim1.getResourceClaim(), claim2.getResourceClaim());
 
-        try (final OutputStream out = repository.write(claim1)) {
+        try (final OutputStream ignored = repository.write(claim1)) {
         }
 
         final ContentClaim claim3 = repository.create(false);
@@ -411,7 +411,7 @@ public void testResourceClaimReused() throws IOException {
     @Test
     public void testResourceClaimNotReusedAfterRestart() throws IOException, InterruptedException {
         final ContentClaim claim1 = repository.create(false);
-        try (final OutputStream out = repository.write(claim1)) {
+        try (final OutputStream ignored = repository.write(claim1)) {
         }
 
         repository.shutdown();
@@ -434,7 +434,7 @@ public void testWriteWithNoContent() throws IOException {
 
         final ContentClaim claim2 = repository.create(false);
         assertEquals(claim1.getResourceClaim(), claim2.getResourceClaim());
-        try (final OutputStream out = repository.write(claim2)) {
+        try (final OutputStream ignored = repository.write(claim2)) {
 
         }
 

File: nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/scheduling/TestStandardProcessScheduler.java
Patch:
@@ -471,6 +471,7 @@ public void validateDisablingOfTheFailedService() {
      */
     @Test
     @Disabled
+    @SuppressWarnings("PMD.UnusedLocalVariable")
     public void validateEnabledDisableMultiThread() throws Exception {
         final StandardProcessScheduler scheduler = createScheduler();
         final StandardControllerServiceProvider provider = new StandardControllerServiceProvider(scheduler, null, flowManager, extensionManager);

File: nifi-framework-bundle/nifi-framework/nifi-framework-external-resource-utils/src/main/java/org/apache/nifi/flow/resource/CollisionAwareResourceProviderWorker.java
Patch:
@@ -55,7 +55,7 @@ protected void acquireResource(final ExternalResourceDescriptor availableResourc
         final File backupFile = new File(getTargetDirectory().getPath() + "/.provider_" + getId() + "_aside.tmp");
 
         try (
-                final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(getProviderClassLoader());
+                final NarCloseable ignored = NarCloseable.withComponentNarLoader(getProviderClassLoader());
                 final InputStream inputStream = getProvider().fetchExternalResource(availableResource);
         ) {
             if (tempFile.exists() && !tempFile.delete()) {

File: nifi-framework-bundle/nifi-framework/nifi-framework-external-resource-utils/src/main/java/org/apache/nifi/flow/resource/ConflictResolvingExternalResourceProviderWorker.java
Patch:
@@ -109,7 +109,7 @@ private void poll() throws IOException {
         LOGGER.debug("Worker starts polling provider for resources");
 
         final Collection<ExternalResourceDescriptor> availableResources;
-        try (final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(providerClassLoader)) {
+        try (final NarCloseable ignored = NarCloseable.withComponentNarLoader(providerClassLoader)) {
             availableResources = provider.listResources();
         }
 

File: nifi-framework-bundle/nifi-framework/nifi-framework-nar-utils/src/main/java/org/apache/nifi/FlowRegistryClientInitializer.java
Patch:
@@ -45,15 +45,15 @@ public FlowRegistryClientInitializer(final ExtensionManager extensionManager) {
     public void initialize(final ConfigurableComponent component) throws InitializationException {
         FlowRegistryClient flowRegistryClient = (FlowRegistryClient) component;
         FlowRegistryClientInitializationContext context = new MockFlowRegistryClientInitializationContext();
-        try (NarCloseable narCloseable = NarCloseable.withComponentNarLoader(extensionManager, component.getClass(), context.getIdentifier())) {
+        try (NarCloseable ignored = NarCloseable.withComponentNarLoader(extensionManager, component.getClass(), context.getIdentifier())) {
             flowRegistryClient.initialize(context);
         }
     }
 
     @Override
     public void teardown(final ConfigurableComponent component) {
         FlowRegistryClient flowRegistryClient = (FlowRegistryClient) component;
-        try (NarCloseable narCloseable = NarCloseable.withComponentNarLoader(extensionManager, component.getClass(), component.getIdentifier())) {
+        try (NarCloseable ignored = NarCloseable.withComponentNarLoader(extensionManager, component.getClass(), component.getIdentifier())) {
             final MockConfigurationContext context = new MockConfigurationContext();
             ReflectionUtils.quietlyInvokeMethodsWithAnnotation(OnShutdown.class, flowRegistryClient, new MockComponentLogger(), context);
         } finally {

File: nifi-framework-bundle/nifi-framework/nifi-framework-nar-utils/src/main/java/org/apache/nifi/init/ControllerServiceInitializer.java
Patch:
@@ -45,14 +45,14 @@ public ControllerServiceInitializer(final ExtensionManager extensionManager) {
     public void initialize(ConfigurableComponent component) throws InitializationException {
         ControllerService controllerService = (ControllerService) component;
         ControllerServiceInitializationContext context = new MockControllerServiceInitializationContext();
-        try (NarCloseable narCloseable = NarCloseable.withComponentNarLoader(extensionManager, component.getClass(), context.getIdentifier())) {
+        try (NarCloseable ignored = NarCloseable.withComponentNarLoader(extensionManager, component.getClass(), context.getIdentifier())) {
             controllerService.initialize(context);
         }
     }
 
     @Override
     public void teardown(ConfigurableComponent component) {
-        try (NarCloseable narCloseable = NarCloseable.withComponentNarLoader(extensionManager, component.getClass(), component.getIdentifier())) {
+        try (NarCloseable ignored = NarCloseable.withComponentNarLoader(extensionManager, component.getClass(), component.getIdentifier())) {
             ControllerService controllerService = (ControllerService) component;
 
             final ComponentLog logger = new MockComponentLogger();

File: nifi-framework-bundle/nifi-framework/nifi-framework-nar-utils/src/main/java/org/apache/nifi/init/FlowAnalysisRuleInitializer.java
Patch:
@@ -42,15 +42,15 @@ public FlowAnalysisRuleInitializer(final ExtensionManager extensionManager) {
     public void initialize(ConfigurableComponent component) throws InitializationException {
         FlowAnalysisRule flowAnalysisRule = (FlowAnalysisRule) component;
         FlowAnalysisRuleInitializationContext context = new MockFlowAnalysisRuleInitializationContext();
-        try (NarCloseable narCloseable = NarCloseable.withComponentNarLoader(extensionManager, component.getClass(), context.getIdentifier())) {
+        try (NarCloseable ignored = NarCloseable.withComponentNarLoader(extensionManager, component.getClass(), context.getIdentifier())) {
             flowAnalysisRule.initialize(context);
         }
     }
 
     @Override
     public void teardown(ConfigurableComponent component) {
         FlowAnalysisRule flowAnalysisRule = (FlowAnalysisRule) component;
-        try (NarCloseable narCloseable = NarCloseable.withComponentNarLoader(extensionManager, component.getClass(), component.getIdentifier())) {
+        try (NarCloseable ignored = NarCloseable.withComponentNarLoader(extensionManager, component.getClass(), component.getIdentifier())) {
 
             final MockConfigurationContext context = new MockConfigurationContext();
             ReflectionUtils.quietlyInvokeMethodsWithAnnotation(OnShutdown.class, flowAnalysisRule, new MockComponentLogger(), context);

File: nifi-framework-bundle/nifi-framework/nifi-framework-nar-utils/src/main/java/org/apache/nifi/init/ParameterProviderInitializer.java
Patch:
@@ -44,15 +44,15 @@ public ParameterProviderInitializer(final ExtensionManager extensionManager) {
     public void initialize(final ConfigurableComponent component) throws InitializationException {
         ParameterProvider parameterProvider = (ParameterProvider) component;
         ParameterProviderInitializationContext context = new MockParameterProviderInitializationContext();
-        try (NarCloseable narCloseable = NarCloseable.withComponentNarLoader(extensionManager, component.getClass(), context.getIdentifier())) {
+        try (NarCloseable ignored = NarCloseable.withComponentNarLoader(extensionManager, component.getClass(), context.getIdentifier())) {
             parameterProvider.initialize(context);
         }
     }
 
     @Override
     public void teardown(final ConfigurableComponent component) {
         ParameterProvider parameterProvider = (ParameterProvider) component;
-        try (NarCloseable narCloseable = NarCloseable.withComponentNarLoader(extensionManager, component.getClass(), component.getIdentifier())) {
+        try (NarCloseable ignored = NarCloseable.withComponentNarLoader(extensionManager, component.getClass(), component.getIdentifier())) {
 
             final MockConfigurationContext context = new MockConfigurationContext();
             ReflectionUtils.quietlyInvokeMethodsWithAnnotation(OnShutdown.class, parameterProvider, new MockComponentLogger(), context);

File: nifi-framework-bundle/nifi-framework/nifi-framework-nar-utils/src/main/java/org/apache/nifi/init/ProcessorInitializer.java
Patch:
@@ -44,15 +44,15 @@ public ProcessorInitializer(final ExtensionManager extensionManager) {
     public void initialize(ConfigurableComponent component) {
         Processor processor = (Processor) component;
         ProcessorInitializationContext initializationContext = new MockProcessorInitializationContext();
-        try (NarCloseable narCloseable = NarCloseable.withComponentNarLoader(extensionManager, component.getClass(), initializationContext.getIdentifier())) {
+        try (NarCloseable ignored = NarCloseable.withComponentNarLoader(extensionManager, component.getClass(), initializationContext.getIdentifier())) {
             processor.initialize(initializationContext);
         }
     }
 
     @Override
     public void teardown(ConfigurableComponent component) {
         Processor processor = (Processor) component;
-        try (NarCloseable narCloseable = NarCloseable.withComponentNarLoader(extensionManager, component.getClass(), component.getIdentifier())) {
+        try (NarCloseable ignored = NarCloseable.withComponentNarLoader(extensionManager, component.getClass(), component.getIdentifier())) {
 
             final ComponentLog logger = new MockComponentLogger();
             final MockProcessContext context = new MockProcessContext();

File: nifi-framework-bundle/nifi-framework/nifi-framework-nar-utils/src/main/java/org/apache/nifi/init/ReportingTaskInitializer.java
Patch:
@@ -44,15 +44,15 @@ public ReportingTaskInitializer(final ExtensionManager extensionManager) {
     public void initialize(ConfigurableComponent component) throws InitializationException {
         ReportingTask reportingTask = (ReportingTask) component;
         ReportingInitializationContext context = new MockReportingInitializationContext();
-        try (NarCloseable narCloseable = NarCloseable.withComponentNarLoader(extensionManager, component.getClass(), context.getIdentifier())) {
+        try (NarCloseable ignored = NarCloseable.withComponentNarLoader(extensionManager, component.getClass(), context.getIdentifier())) {
             reportingTask.initialize(context);
         }
     }
 
     @Override
     public void teardown(ConfigurableComponent component) {
         ReportingTask reportingTask = (ReportingTask) component;
-        try (NarCloseable narCloseable = NarCloseable.withComponentNarLoader(extensionManager, component.getClass(), component.getIdentifier())) {
+        try (NarCloseable ignored = NarCloseable.withComponentNarLoader(extensionManager, component.getClass(), component.getIdentifier())) {
 
             final MockConfigurationContext context = new MockConfigurationContext();
             ReflectionUtils.quietlyInvokeMethodsWithAnnotation(OnShutdown.class, reportingTask, new MockComponentLogger(), context);

File: nifi-framework-bundle/nifi-framework/nifi-framework-nar-utils/src/main/java/org/apache/nifi/nar/StandardExtensionDiscoveringManager.java
Patch:
@@ -493,7 +493,7 @@ public Class<?> getClass(final ExtensionDefinition extensionDefinition) {
         final Bundle bundle = extensionDefinition.getBundle();
         final ClassLoader bundleClassLoader = bundle.getClassLoader();
 
-        try (final NarCloseable x = NarCloseable.withComponentNarLoader(bundleClassLoader)) {
+        try (final NarCloseable ignored = NarCloseable.withComponentNarLoader(bundleClassLoader)) {
             return Class.forName(extensionDefinition.getImplementationClassName(), true, bundleClassLoader);
         } catch (final Exception e) {
             throw new RuntimeException("Could not create Class for " + extensionDefinition, e);
@@ -654,7 +654,7 @@ public synchronized InstanceClassLoader createInstanceClassLoader(final String c
     protected Set<BundleCoordinate> findReachableApiBundles(final ConfigurableComponent component) {
         final Set<BundleCoordinate> reachableApiBundles = new HashSet<>();
 
-        try (final NarCloseable closeable = NarCloseable.withComponentNarLoader(component.getClass().getClassLoader())) {
+        try (final NarCloseable ignored = NarCloseable.withComponentNarLoader(component.getClass().getClassLoader())) {
             final List<PropertyDescriptor> descriptors = component.getPropertyDescriptors();
             if (descriptors != null && !descriptors.isEmpty()) {
                 for (final PropertyDescriptor descriptor : descriptors) {
@@ -854,7 +854,7 @@ public synchronized ConfigurableComponent getTempComponent(final String classTyp
         }
 
         final ClassLoader bundleClassLoader = bundle.getClassLoader();
-        try (final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(bundleClassLoader)) {
+        try (final NarCloseable ignored = NarCloseable.withComponentNarLoader(bundleClassLoader)) {
             final ConfigurableComponent tempComponent;
             if (PythonBundle.isPythonCoordinate(bundle.getBundleDetails().getCoordinate())) {
                 final String procId = getPythonTempComponentId(classType);

File: nifi-framework-bundle/nifi-framework/nifi-headless-server/src/main/java/org/apache/nifi/headless/HeadlessNiFiServer.java
Patch:
@@ -103,7 +103,7 @@ public void start() {
             ExtensionManagerHolder.init(extensionManager);
 
             // Enrich the flow xml using the Extension Manager mapping
-            final FlowParser flowParser = new FlowParser();
+            new FlowParser();
             logger.info("Loading Flow...");
 
             FlowFileEventRepository flowFileEventRepository = new RingBufferEventRepository(5);

File: nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiServiceFacade.java
Patch:
@@ -3463,7 +3463,7 @@ public ParameterProviderEntity updateParameterProvider(final Revision revision,
                 });
 
         final PermissionsDTO permissions = dtoFactory.createPermissionsDto(parameterProvider);
-        final PermissionsDTO operatePermissions = dtoFactory.createPermissionsDto(new OperationAuthorizable(parameterProvider));
+        dtoFactory.createPermissionsDto(new OperationAuthorizable(parameterProvider));
         final List<BulletinDTO> bulletins = dtoFactory.createBulletinDtos(bulletinRepository.findBulletinsForSource(parameterProvider.getIdentifier()));
         final List<BulletinEntity> bulletinEntities = bulletins.stream().map(bulletin -> entityFactory.createBulletinEntity(bulletin, permissions.getCanRead())).collect(Collectors.toList());
         return entityFactory.createParameterProviderEntity(snapshot.getComponent(), dtoFactory.createRevisionDTO(snapshot.getLastModification()), permissions, bulletinEntities);
@@ -3485,7 +3485,7 @@ public ConfigurationAnalysisEntity analyzeParameterProviderConfiguration(final S
     public ParameterProviderEntity deleteParameterProvider(final Revision revision, final String parameterProviderId) {
         final ParameterProviderNode parameterProvider = parameterProviderDAO.getParameterProvider(parameterProviderId);
         final PermissionsDTO permissions = dtoFactory.createPermissionsDto(parameterProvider);
-        final PermissionsDTO operatePermissions = dtoFactory.createPermissionsDto(new OperationAuthorizable(parameterProvider));
+        dtoFactory.createPermissionsDto(new OperationAuthorizable(parameterProvider));
         final ParameterProviderDTO snapshot = deleteComponent(
                 revision,
                 parameterProvider.getResource(),
@@ -5002,7 +5002,7 @@ public PropertyDescriptorDTO getReportingTaskPropertyDescriptor(final String id,
     private ParameterProviderEntity createParameterProviderEntity(final ParameterProviderNode parameterProvider) {
         final RevisionDTO revision = dtoFactory.createRevisionDTO(revisionManager.getRevision(parameterProvider.getIdentifier()));
         final PermissionsDTO permissions = dtoFactory.createPermissionsDto(parameterProvider);
-        final PermissionsDTO operatePermissions = dtoFactory.createPermissionsDto(new OperationAuthorizable(parameterProvider));
+        dtoFactory.createPermissionsDto(new OperationAuthorizable(parameterProvider));
         final List<BulletinDTO> bulletins = dtoFactory.createBulletinDtos(bulletinRepository.findBulletinsForSource(parameterProvider.getIdentifier()));
         final List<BulletinEntity> bulletinEntities = bulletins.stream().map(bulletin -> entityFactory.createBulletinEntity(bulletin, permissions.getCanRead())).collect(Collectors.toList());
         return entityFactory.createParameterProviderEntity(dtoFactory.createParameterProviderDto(parameterProvider),

File: nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/search/attributematchers/SearchableMatcher.java
Patch:
@@ -44,7 +44,7 @@ public void match(final ProcessorNode component, final SearchQuery query, final
             final SearchContext context = new StandardSearchContext(searchTerm, component, flowController.getControllerServiceProvider());
 
             // search the processor using the appropriate thread context classloader
-            try (final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(flowController.getExtensionManager(), component.getClass(), component.getIdentifier())) {
+            try (final NarCloseable ignored = NarCloseable.withComponentNarLoader(flowController.getExtensionManager(), component.getClass(), component.getIdentifier())) {
                 searchable.search(context).stream().forEach(searchResult -> matches.add(searchResult.getLabel() + SEPARATOR + searchResult.getMatch()));
             } catch (final Throwable t) {
                 LOGGER.error("Error happened during searchable matching: {}", t.getMessage());

File: nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/web/api/TestFlowResource.java
Patch:
@@ -392,8 +392,6 @@ public void testGetVersionDifferencesWithOffsetAndOnlyPartialResult() {
     }
 
     private void setUpGetVersionDifference() {
-        final FlowVersionLocation baseLocation = new FlowVersionLocation(SAMPLE_BRANCH_ID_A, SAMPLE_BUCKET_ID_A, SAMPLE_FLOW_ID_A, "1");
-        final FlowVersionLocation comparedLocation = new FlowVersionLocation(SAMPLE_BRANCH_ID_B, SAMPLE_BUCKET_ID_B, SAMPLE_FLOW_ID_B, "2");
         doReturn(getDifferences()).when(serviceFacade).getVersionDifference(anyString(), any(FlowVersionLocation.class), any(FlowVersionLocation.class));
     }
 

File: nifi-registry/nifi-registry-core/nifi-registry-framework/src/test/java/org/apache/nifi/registry/service/TestRegistryService.java
Patch:
@@ -52,7 +52,6 @@
 import java.util.HashSet;
 import java.util.List;
 import java.util.Optional;
-import java.util.Set;
 import java.util.SortedSet;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -1107,8 +1106,6 @@ public void testGetFlowSnapshotsWhenNoSnapshots() {
         existingFlow.setModified(new Date());
         existingFlow.setBucketId(existingBucket.getId());
 
-        final Set<FlowSnapshotEntity> snapshots = new HashSet<>();
-
         when(metadataService.getFlowById(existingFlow.getId())).thenReturn(existingFlow);
 
         final SortedSet<VersionedFlowSnapshotMetadata> retrievedSnapshots = registryService.getFlowSnapshots(existingBucket.getId(), existingFlow.getId());

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/controller/scheduling/StatelessProcessScheduler.java
Patch:
@@ -100,7 +100,7 @@ public void shutdown() {
     @Override
     public void shutdownControllerService(final ControllerServiceNode serviceNode, final ControllerServiceProvider controllerServiceProvider) {
         final Class<?> serviceImplClass = serviceNode.getControllerServiceImplementation().getClass();
-        try (final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(extensionManager, serviceImplClass, serviceNode.getIdentifier())) {
+        try (final NarCloseable ignored = NarCloseable.withComponentNarLoader(extensionManager, serviceImplClass, serviceNode.getIdentifier())) {
             final ConfigurationContext configContext = new StandardConfigurationContext(serviceNode, controllerServiceProvider, null);
             ReflectionUtils.quietlyInvokeMethodsWithAnnotation(OnShutdown.class, serviceNode.getControllerServiceImplementation(), configContext);
         }
@@ -109,7 +109,7 @@ public void shutdownControllerService(final ControllerServiceNode serviceNode, f
     @Override
     public void shutdownReportingTask(final ReportingTaskNode taskNode) {
         final ConfigurationContext configContext = taskNode.getConfigurationContext();
-        try (final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(extensionManager, taskNode.getReportingTask().getClass(), taskNode.getIdentifier())) {
+        try (final NarCloseable ignored = NarCloseable.withComponentNarLoader(extensionManager, taskNode.getReportingTask().getClass(), taskNode.getIdentifier())) {
             ReflectionUtils.quietlyInvokeMethodsWithAnnotation(OnShutdown.class, taskNode.getReportingTask(), configContext);
         }
     }
@@ -290,7 +290,7 @@ private void attemptSchedule(final ReportingTaskNode taskNode) throws Invocation
         }
 
         final ReportingTask reportingTask = taskNode.getReportingTask();
-        try (final NarCloseable x = NarCloseable.withComponentNarLoader(extensionManager, reportingTask.getClass(), taskNode.getIdentifier())) {
+        try (final NarCloseable ignored = NarCloseable.withComponentNarLoader(extensionManager, reportingTask.getClass(), taskNode.getIdentifier())) {
             ReflectionUtils.invokeMethodsWithAnnotation(OnScheduled.class, reportingTask, taskNode.getConfigurationContext());
         }
     }

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/engine/StandardStatelessEngine.java
Patch:
@@ -285,7 +285,7 @@ private List<ValidationResult> validate(final ConfigurableComponent component, f
     }
 
     public Map<PropertyDescriptor, PropertyConfiguration> buildConfiguredAndDefaultPropertyMap(final ConfigurableComponent component, final Map<PropertyDescriptor, PropertyConfiguration> properties) {
-        try (final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(extensionManager, component.getClass(), component.getIdentifier())) {
+        try (final NarCloseable ignored = NarCloseable.withComponentNarLoader(extensionManager, component.getClass(), component.getIdentifier())) {
             final List<PropertyDescriptor> supported = component.getPropertyDescriptors();
             if (supported == null || supported.isEmpty()) {
                 return Collections.unmodifiableMap(properties);

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/engine/StatelessSchedulingAgent.java
Patch:
@@ -79,7 +79,7 @@ public void schedule(final ReportingTaskNode taskNode, final LifecycleState sche
     }
 
     private void triggerReportingTask(final ReportingTaskNode taskNode, final LifecycleState scheduleState) {
-        try (final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(extensionManager, taskNode.getReportingTask().getClass(), taskNode.getIdentifier())) {
+        try (final NarCloseable ignored = NarCloseable.withComponentNarLoader(extensionManager, taskNode.getReportingTask().getClass(), taskNode.getIdentifier())) {
             logger.debug("Triggering {} to run", taskNode);
             scheduleState.incrementActiveThreadCount(null);
 

File: nifi-system-tests/nifi-system-test-suite/src/test/java/org/apache/nifi/tests/system/clustering/AutoResumeStateClusteredIT.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.nifi.tests.system.NiFiSystemIT;
 import org.apache.nifi.toolkit.client.NiFiClientException;
 import org.apache.nifi.util.NiFiProperties;
-import org.apache.nifi.web.api.entity.ConnectionEntity;
 import org.apache.nifi.web.api.entity.ProcessorEntity;
 import org.junit.jupiter.api.Test;
 
@@ -38,7 +37,7 @@ public NiFiInstanceFactory getInstanceFactory() {
     public void testRestartWithAutoResumeStateFalse() throws NiFiClientException, IOException, InterruptedException {
         final ProcessorEntity generate = getClientUtil().createProcessor("GenerateFlowFile");
         final ProcessorEntity terminate = getClientUtil().createProcessor("TerminateFlowFile");
-        final ConnectionEntity connection = getClientUtil().createConnection(generate, terminate, "success");
+        getClientUtil().createConnection(generate, terminate, "success");
         getClientUtil().waitForValidProcessor(generate.getId());
 
         getClientUtil().startProcessor(terminate);

File: nifi-system-tests/nifi-system-test-suite/src/test/java/org/apache/nifi/tests/system/pg/SingleFlowFileConcurrencyIT.java
Patch:
@@ -121,9 +121,9 @@ public void testSingleConcurrencyAndBatchOutput() throws NiFiClientException, IO
 
         // Connect Generate -> Input Port -> Count -> Output Port -> Terminate
         // Also connect InputPort -> Out2 -> Terminate
-        final ConnectionEntity generateToInput = getClientUtil().createConnection(generate, inputPort, "success");
+        getClientUtil().createConnection(generate, inputPort, "success");
         final ConnectionEntity inputToSleep = getClientUtil().createConnection(inputPort, sleep);
-        final ConnectionEntity sleepToOutput = getClientUtil().createConnection(sleep, outputPort, "success");
+        getClientUtil().createConnection(sleep, outputPort, "success");
         final ConnectionEntity inputToSecondOut = getClientUtil().createConnection(inputPort, secondOut);
         final ConnectionEntity outputToTerminate = getClientUtil().createConnection(outputPort, terminate);
         final ConnectionEntity secondOutToTerminate = getClientUtil().createConnection(secondOut, terminate);
@@ -192,7 +192,7 @@ public void testBatchOutputHasCorrectNumbersOnRestart() throws NiFiClientExcepti
 
         // Connect Generate -> Input Port -> Count -> Output Port -> Terminate
         // Also connect InputPort -> Out2 -> Terminate
-        final ConnectionEntity generateToInput = getClientUtil().createConnection(generate, inputPort, "success");
+        getClientUtil().createConnection(generate, inputPort, "success");
         final ConnectionEntity inputToOutput = getClientUtil().createConnection(inputPort, outputPort);
         final ConnectionEntity inputToSecondOut = getClientUtil().createConnection(inputPort, secondOut);
         final ConnectionEntity outputToTerminate = getClientUtil().createConnection(outputPort, terminate);

File: nifi-system-tests/nifi-system-test-suite/src/test/java/org/apache/nifi/tests/system/repositories/ContentAccessIT.java
Patch:
@@ -105,7 +105,7 @@ public void testCorrectContentReadWhenMultipleFlowFilesInClaim(final boolean use
         final ProcessorEntity terminateAa = getClientUtil().createProcessor("TerminateFlowFile");
         final ProcessorEntity terminateBa = getClientUtil().createProcessor("TerminateFlowFile");
         final ProcessorEntity terminateCa = getClientUtil().createProcessor("TerminateFlowFile");
-        final ProcessorEntity terminateUnmatched = getClientUtil().createProcessor("TerminateFlowFile");
+        getClientUtil().createProcessor("TerminateFlowFile");
 
         // Configure Generate
         getClientUtil().updateProcessorSchedulingPeriod(generate, "10 mins");

File: nifi-system-tests/nifi-system-test-suite/src/test/java/org/apache/nifi/tests/system/stateless/StatelessBasicsIT.java
Patch:
@@ -806,7 +806,7 @@ public void testChangeFlowVersion() throws NiFiClientException, IOException, Int
         getClientUtil().createConnection(reverseContents, outputPort, SUCCESS, statelessGroup.getId());
 
         // Save v2 of the flow
-        final VersionControlInformationEntity v2Vci = getClientUtil().saveFlowVersion(statelessGroup, registryClient, vci);
+        getClientUtil().saveFlowVersion(statelessGroup, registryClient, vci);
         waitFor(() -> VersionControlInformationDTO.UP_TO_DATE.equals(getClientUtil().getVersionControlState(statelessGroup.getId())) );
 
         // Let a FlowFile go through and verify the results

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/AccessPolicySummaryDTO.java
Patch:
@@ -36,7 +36,7 @@ public class AccessPolicySummaryDTO extends ComponentDTO {
      * @return The action associated with this access policy.
      */
     @Schema(description = "The action associated with this access policy.",
-            allowableValues = "read, write"
+            allowableValues = {"read", "write"}
     )
     public String getAction() {
         return action;

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/AffectedComponentDTO.java
Patch:
@@ -60,9 +60,9 @@ public void setId(final String id) {
     }
 
     @Schema(description = "The type of this component",
-        allowableValues = COMPONENT_TYPE_PROCESSOR + "," + COMPONENT_TYPE_CONTROLLER_SERVICE + ", "
-            + COMPONENT_TYPE_INPUT_PORT + ", " + COMPONENT_TYPE_OUTPUT_PORT + ", "
-            + COMPONENT_TYPE_REMOTE_INPUT_PORT + ", " + COMPONENT_TYPE_REMOTE_OUTPUT_PORT + ", " + COMPONENT_TYPE_STATELESS_GROUP)
+        allowableValues = {COMPONENT_TYPE_PROCESSOR, COMPONENT_TYPE_CONTROLLER_SERVICE,
+                COMPONENT_TYPE_INPUT_PORT, COMPONENT_TYPE_OUTPUT_PORT,
+                COMPONENT_TYPE_REMOTE_INPUT_PORT, COMPONENT_TYPE_REMOTE_OUTPUT_PORT, COMPONENT_TYPE_STATELESS_GROUP})
     public String getReferenceType() {
         return referenceType;
     }

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ConfigVerificationResultDTO.java
Patch:
@@ -24,7 +24,7 @@ public class ConfigVerificationResultDTO {
     private String verificationStepName;
     private String explanation;
 
-    @Schema(description = "The outcome of the verification", allowableValues = "SUCCESSFUL, FAILED, SKIPPED")
+    @Schema(description = "The outcome of the verification", allowableValues = {"SUCCESSFUL", "FAILED", "SKIPPED"})
     public String getOutcome() {
         return outcome;
     }

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ConnectableDTO.java
Patch:
@@ -65,7 +65,7 @@ public void setVersionedComponentId(final String id) {
      */
     @Schema(description = "The type of component the connectable is.",
             requiredMode = Schema.RequiredMode.REQUIRED,
-            allowableValues = "PROCESSOR, REMOTE_INPUT_PORT, REMOTE_OUTPUT_PORT, INPUT_PORT, OUTPUT_PORT, FUNNEL"
+            allowableValues = {"PROCESSOR", "REMOTE_INPUT_PORT", "REMOTE_OUTPUT_PORT", "INPUT_PORT", "OUTPUT_PORT", "FUNNEL"}
     )
     public String getType() {
         return type;

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ConnectionDTO.java
Patch:
@@ -228,7 +228,7 @@ public void setPrioritizers(List<String> prioritizers) {
     }
 
     @Schema(description = "How to load balance the data in this Connection across the nodes in the cluster.",
-        allowableValues = "DO_NOT_LOAD_BALANCE, PARTITION_BY_ATTRIBUTE, ROUND_ROBIN, SINGLE_NODE")
+        allowableValues = {"DO_NOT_LOAD_BALANCE", "PARTITION_BY_ATTRIBUTE", "ROUND_ROBIN", "SINGLE_NODE"})
     public String getLoadBalanceStrategy() {
         return loadBalanceStrategy;
     }
@@ -247,7 +247,7 @@ public void setLoadBalancePartitionAttribute(String partitionAttribute) {
     }
 
     @Schema(description = "Whether or not data should be compressed when being transferred between nodes in the cluster.",
-        allowableValues = "DO_NOT_COMPRESS, COMPRESS_ATTRIBUTES_ONLY, COMPRESS_ATTRIBUTES_AND_CONTENT")
+        allowableValues = {"DO_NOT_COMPRESS", "COMPRESS_ATTRIBUTES_ONLY", "COMPRESS_ATTRIBUTES_AND_CONTENT"})
     public String getLoadBalanceCompression() {
         return loadBalanceCompression;
     }
@@ -258,7 +258,7 @@ public void setLoadBalanceCompression(String compression) {
 
     @Schema(description = "The current status of the Connection's Load Balancing Activities. Status can indicate that Load Balancing is not configured for the connection, that Load Balancing " +
         "is configured but inactive (not currently transferring data to another node), or that Load Balancing is configured and actively transferring data to another node.",
-        allowableValues = LOAD_BALANCE_NOT_CONFIGURED + ", " + LOAD_BALANCE_INACTIVE + ", " + LOAD_BALANCE_ACTIVE,
+        allowableValues = {LOAD_BALANCE_NOT_CONFIGURED, LOAD_BALANCE_INACTIVE, LOAD_BALANCE_ACTIVE},
         accessMode = Schema.AccessMode.READ_ONLY)
     public String getLoadBalanceStatus() {
         return loadBalanceStatus;

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ControllerServiceDTO.java
Patch:
@@ -224,7 +224,7 @@ public void setSupportsSensitiveDynamicProperties(final Boolean supportsSensitiv
      * @return The state of this controller service. Possible values are ENABLED, ENABLING, DISABLED, DISABLING
      */
     @Schema(description = "The state of the controller service.",
-            allowableValues = "ENABLED, ENABLING, DISABLED, DISABLING"
+            allowableValues = {"ENABLED", "ENABLING", "DISABLED", "DISABLING"}
     )
     public String getState() {
         return state;
@@ -332,7 +332,7 @@ public void setValidationErrors(Collection<String> validationErrors) {
 
     @Schema(description = "Indicates whether the ControllerService is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the ControllerService is valid)",
         accessMode = Schema.AccessMode.READ_ONLY,
-        allowableValues = VALID + ", " + INVALID + ", " + VALIDATING)
+        allowableValues = {VALID, INVALID, VALIDATING})
     public String getValidationStatus() {
         return validationStatus;
     }

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ControllerServiceReferencingComponentDTO.java
Patch:
@@ -118,7 +118,7 @@ public void setState(String state) {
      * @return type of reference this is (Processor, ControllerService, ParameterProvider, or ReportingTask)
      */
     @Schema(description = "The type of reference this is.",
-            allowableValues = "Processor, ControllerService, ReportingTask, FlowRegistryClient"
+            allowableValues = {"Processor", "ControllerService", "ReportingTask", "FlowRegistryClient"}
     )
     public String getReferenceType() {
         return referenceType;

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/FlowAnalysisRuleDTO.java
Patch:
@@ -185,7 +185,7 @@ public void setSupportsSensitiveDynamicProperties(final Boolean supportsSensitiv
      * @return current scheduling state of the flow analysis rule
      */
     @Schema(description = "The state of the flow analysis rule.",
-            allowableValues = "ENABLED, DISABLED"
+            allowableValues = {"ENABLED", "DISABLED"}
     )
     public String getState() {
         return state;
@@ -265,7 +265,7 @@ public void setValidationErrors(Collection<String> validationErrors) {
 
     @Schema(description = "Indicates whether the Flow Analysis Rule is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the Flow Analysis Rule is valid)",
         accessMode = Schema.AccessMode.READ_ONLY,
-        allowableValues = VALID + ", " + INVALID + ", " + VALIDATING)
+        allowableValues = {VALID, INVALID, VALIDATING})
     public String getValidationStatus() {
         return validationStatus;
     }

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/FlowRegistryClientDTO.java
Patch:
@@ -213,7 +213,7 @@ public void setValidationErrors(Collection<String> validationErrors) {
 
     @Schema(description = "Indicates whether the Registry Client is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the Registry Client is valid)",
             accessMode = Schema.AccessMode.READ_ONLY,
-            allowableValues = VALID + ", " + INVALID + ", " + VALIDATING)
+            allowableValues = {VALID, INVALID, VALIDATING})
     public String getValidationStatus() {
         return validationStatus;
     }

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ParameterProviderDTO.java
Patch:
@@ -284,7 +284,7 @@ public void setValidationErrors(Collection<String> validationErrors) {
 
     @Schema(description = "Indicates whether the Parameter Provider is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the Parameter Provider is valid)",
         accessMode = Schema.AccessMode.READ_ONLY,
-        allowableValues = VALID + ", " + INVALID + ", " + VALIDATING)
+        allowableValues = {VALID, INVALID, VALIDATING})
     public String getValidationStatus() {
         return validationStatus;
     }

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/PortDTO.java
Patch:
@@ -55,7 +55,7 @@ public void setName(final String name) {
      * @return The state of this port. Possible states are 'RUNNING', 'STOPPED', and 'DISABLED'
      */
     @Schema(description = "The state of the port.",
-            allowableValues = "RUNNING, STOPPED, DISABLED"
+            allowableValues = {"RUNNING", "STOPPED", "DISABLED"}
     )
     public String getState() {
         return state;
@@ -71,7 +71,7 @@ public void setState(String state) {
      * @return The type of port
      */
     @Schema(description = "The type of port.",
-            allowableValues = "INPUT_PORT, OUTPUT_PORT"
+            allowableValues = {"INPUT_PORT", "OUTPUT_PORT"}
     )
     public String getType() {
         return type;
@@ -150,7 +150,7 @@ public void setAllowRemoteAccess(Boolean allowRemoteAccess) {
     }
 
     @Schema(description = "Specifies how the Port functions",
-        allowableValues = "STANDARD, FAILURE"
+        allowableValues = {"STANDARD", "FAILURE"}
     )
     public String getPortFunction() {
         return portFunction;

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ProcessorConfigDTO.java
Patch:
@@ -332,7 +332,7 @@ public void setRetriedRelationships(Set<String> retriedRelationships) {
     }
 
     @Schema(description = "Determines whether the FlowFile should be penalized or the processor should be yielded between retries.",
-            allowableValues = "PENALIZE_FLOWFILE, YIELD_PROCESSOR"
+            allowableValues = {"PENALIZE_FLOWFILE", "YIELD_PROCESSOR"}
     )
     public String getBackoffMechanism() {
         return backoffMechanism;

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ProcessorDTO.java
Patch:
@@ -108,7 +108,7 @@ public void setBundle(BundleDTO bundle) {
      * @return The state of this processor. Possible states are 'RUNNING', 'STOPPED', and 'DISABLED'
      */
     @Schema(description = "The state of the processor",
-            allowableValues = "RUNNING, STOPPED, DISABLED"
+            allowableValues = {"RUNNING", "STOPPED", "DISABLED"}
     )
     public String getState() {
         return state;
@@ -296,7 +296,7 @@ public void setValidationErrors(Collection<String> validationErrors) {
 
     @Schema(description = "Indicates whether the Processor is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the Processor is valid)",
         accessMode = Schema.AccessMode.READ_ONLY,
-        allowableValues = VALID + ", " + INVALID + ", " + VALIDATING)
+        allowableValues = {VALID, INVALID, VALIDATING})
     public String getValidationStatus() {
         return validationStatus;
     }

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ProcessorRunStatusDetailsDTO.java
Patch:
@@ -56,7 +56,7 @@ public void setName(final String name) {
     }
 
     @Schema(description = "The run status of the processor",
-        allowableValues = RUNNING + ", " + STOPPED + ", " + INVALID + ", " + VALIDATING + ", " + DISABLED
+        allowableValues = {RUNNING, STOPPED, INVALID, VALIDATING, DISABLED}
     )
     public String getRunStatus() {
         return runStatus;

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ReportingTaskDTO.java
Patch:
@@ -210,7 +210,7 @@ public void setSupportsSensitiveDynamicProperties(final Boolean supportsSensitiv
      * @return current scheduling state of the reporting task
      */
     @Schema(description = "The state of the reporting task.",
-            allowableValues = "RUNNING, STOPPED, DISABLED"
+            allowableValues = {"RUNNING", "STOPPED", "DISABLED"}
     )
     public String getState() {
         return state;
@@ -316,7 +316,7 @@ public void setValidationErrors(Collection<String> validationErrors) {
 
     @Schema(description = "Indicates whether the Reporting Task is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the Reporting Task is valid)",
         accessMode = Schema.AccessMode.READ_ONLY,
-        allowableValues = VALID + ", " + INVALID + ", " + VALIDATING)
+        allowableValues = {VALID, INVALID, VALIDATING})
     public String getValidationStatus() {
         return validationStatus;
     }

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/VersionControlInformationDTO.java
Patch:
@@ -145,7 +145,7 @@ public void setStorageLocation(String storageLocation) {
 
     @Schema(accessMode = Schema.AccessMode.READ_ONLY,
         description = "The current state of the Process Group, as it relates to the Versioned Flow",
-        allowableValues = LOCALLY_MODIFIED + ", " + STALE + ", " + LOCALLY_MODIFIED_AND_STALE + ", " + UP_TO_DATE + ", " + SYNC_FAILURE)
+        allowableValues = {LOCALLY_MODIFIED, STALE, LOCALLY_MODIFIED_AND_STALE, UP_TO_DATE, SYNC_FAILURE})
     public String getState() {
         return state;
     }

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/VersionedFlowDTO.java
Patch:
@@ -98,7 +98,7 @@ public void setComments(String comments) {
         this.comments = comments;
     }
 
-    @Schema(description = "The action being performed", allowableValues = COMMIT_ACTION + ", " + FORCE_COMMIT_ACTION)
+    @Schema(description = "The action being performed", allowableValues = {COMMIT_ACTION, FORCE_COMMIT_ACTION})
     public String getAction() {
         return action;
     }

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/provenance/lineage/LineageRequestDTO.java
Patch:
@@ -67,7 +67,7 @@ public void setEventId(Long eventId) {
      */
     @Schema(description = "The type of lineage request. PARENTS will return the lineage for the flowfiles that are parents of the specified event. CHILDREN will return the lineage "
                     + "for the flowfiles that are children of the specified event. FLOWFILE will return the lineage for the specified flowfile.",
-            allowableValues = "PARENTS, CHILDREN, and FLOWFILE"
+            allowableValues = {"PARENTS", "CHILDREN", "FLOWFILE"}
     )
     public LineageRequestType getLineageRequestType() {
         return lineageRequestType;

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/provenance/lineage/ProvenanceNodeDTO.java
Patch:
@@ -109,7 +109,7 @@ public void setClusterNodeIdentifier(String clusterNodeIdentifier) {
      * @return type of node
      */
     @Schema(description = "The type of the node.",
-            allowableValues = "FLOWFILE, EVENT"
+            allowableValues = {"FLOWFILE", "EVENT"}
     )
     public String getType() {
         return type;

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/ComponentStatusDTO.java
Patch:
@@ -44,7 +44,7 @@ public class ComponentStatusDTO {
      */
     @Schema(description = "The run status of this component",
             accessMode = Schema.AccessMode.READ_ONLY,
-            allowableValues = "ENABLED, ENABLING, DISABLED, DISABLING")
+            allowableValues = {"ENABLED", "ENABLING", "DISABLED", "DISABLING"})
     public String getRunStatus() {
         return runStatus;
     }
@@ -56,7 +56,7 @@ public void setRunStatus(String runStatus) {
     @Schema(description = "Indicates whether the component is valid, invalid, or still in the process of validating" +
             " (i.e., it is unknown whether or not the component is valid)",
             accessMode = Schema.AccessMode.READ_ONLY,
-            allowableValues = VALID + ", " + INVALID + ", " + VALIDATING)
+            allowableValues = {VALID, INVALID, VALIDATING})
     public String getValidationStatus() {
         return validationStatus;
     }

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/ControllerServiceStatusDTO.java
Patch:
@@ -29,7 +29,7 @@ public class ControllerServiceStatusDTO extends ComponentStatusDTO {
 
     @Schema(description = "The run status of this ControllerService",
             accessMode = Schema.AccessMode.READ_ONLY,
-            allowableValues = "ENABLED, ENABLING, DISABLED, DISABLING")
+            allowableValues = {"ENABLED", "ENABLING", "DISABLED", "DISABLING"})
     @Override
     public String getRunStatus() {
         return super.getRunStatus();

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/FlowAnalysisRuleStatusDTO.java
Patch:
@@ -29,7 +29,7 @@ public class FlowAnalysisRuleStatusDTO extends ComponentStatusDTO {
 
     @Schema(description = "The run status of this FlowAnalysisRule",
         accessMode = Schema.AccessMode.READ_ONLY,
-        allowableValues = "ENABLED, DISABLED")
+        allowableValues = {"ENABLED", "DISABLED"})
     @Override
     public String getRunStatus() {
         return super.getRunStatus();

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/PortStatusDTO.java
Patch:
@@ -77,7 +77,7 @@ public void setName(String name) {
 
 
     @Schema(description = "The run status of the port.",
-            allowableValues = "Running, Stopped, Validating, Disabled, Invalid")
+            allowableValues = {"Running", "Stopped", "Validating", "Disabled", "Invalid"})
     public String getRunStatus() {
         return runStatus;
     }

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/PortStatusSnapshotDTO.java
Patch:
@@ -106,7 +106,7 @@ public void setName(String name) {
      */
     @Schema(
             description = "The run status of the port.",
-            allowableValues = "Running, Stopped, Validating, Disabled, Invalid"
+            allowableValues = {"Running", "Stopped", "Validating", "Disabled", "Invalid"}
     )
     public String getRunStatus() {
         return runStatus;

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/ProcessGroupStatusSnapshotDTO.java
Patch:
@@ -112,7 +112,7 @@ public void setName(String name) {
 
     @Schema(description = "The current state of the Process Group, as it relates to the Versioned Flow",
             accessMode = Schema.AccessMode.READ_ONLY,
-            allowableValues = "LOCALLY_MODIFIED, STALE, LOCALLY_MODIFIED_AND_STALE, UP_TO_DATE, SYNC_FAILURE")
+            allowableValues = {"LOCALLY_MODIFIED", "STALE", "LOCALLY_MODIFIED_AND_STALE", "UP_TO_DATE", "SYNC_FAILURE"})
     public String getVersionedFlowState() {
         return versionedFlowState;
     }

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/ProcessorStatusDTO.java
Patch:
@@ -78,7 +78,7 @@ public void setType(String type) {
     }
 
     @Schema(description = "The run status of the Processor",
-            allowableValues = "Running, Stopped, Validating, Disabled, Invalid")
+            allowableValues = {"Running", "Stopped", "Validating", "Disabled", "Invalid"})
     public String getRunStatus() {
         return runStatus;
     }

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/ProcessorStatusSnapshotDTO.java
Patch:
@@ -97,7 +97,7 @@ public void setType(String type) {
      * @return run status of this processor
      */
     @Schema(description = "The state of the processor.",
-            allowableValues = "Running, Stopped, Validating, Disabled, Invalid"
+            allowableValues = {"Running", "Stopped", "Validating", "Disabled", "Invalid"}
     )
     public String getRunStatus() {
         return runStatus;
@@ -108,7 +108,7 @@ public void setRunStatus(String runStatus) {
     }
 
     @Schema(description = "Indicates the node where the process will execute.",
-            allowableValues = "ALL, PRIMARY"
+            allowableValues = {"ALL", "PRIMARY"}
     )
     public String getExecutionNode() {
         return executionNode;

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/RemoteProcessGroupStatusDTO.java
Patch:
@@ -123,7 +123,7 @@ public void setStatsLastRefreshed(Date statsLastRefreshed) {
     @Schema(description = "Indicates whether the component is valid, invalid, or still in the process of validating" +
             " (i.e., it is unknown whether or not the component is valid)",
             accessMode = Schema.AccessMode.READ_ONLY,
-            allowableValues = "VALID, INVALID, VALIDATING")
+            allowableValues = {"VALID", "INVALID", "VALIDATING"})
     public String getValidationStatus() {
         return validationStatus;
     }

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/ReportingTaskStatusDTO.java
Patch:
@@ -33,7 +33,7 @@ public class ReportingTaskStatusDTO extends ComponentStatusDTO {
 
     @Schema(description = "The run status of this ReportingTask",
             accessMode = Schema.AccessMode.READ_ONLY,
-            allowableValues = "RUNNING, STOPPED, DISABLED")
+            allowableValues = {"RUNNING", "STOPPED", "DISABLED"})
     @Override
     public String getRunStatus() {
         return super.getRunStatus();

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ActivateControllerServicesEntity.java
Patch:
@@ -45,7 +45,7 @@ public void setId(String id) {
      * @return The desired state of the descendant components. Possible states are 'RUNNING' and 'STOPPED'
      */
     @Schema(description = "The desired state of the descendant components",
-        allowableValues = STATE_ENABLED + ", " + STATE_DISABLED)
+        allowableValues = {STATE_ENABLED, STATE_DISABLED})
     public String getState() {
         return state;
     }

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/AffectedComponentEntity.java
Patch:
@@ -57,9 +57,9 @@ public void setProcessGroup(ProcessGroupNameDTO processGroup) {
     }
 
     @Schema(description = "The type of component referenced",
-        allowableValues = AffectedComponentDTO.COMPONENT_TYPE_PROCESSOR + "," + AffectedComponentDTO.COMPONENT_TYPE_CONTROLLER_SERVICE + ", "
-                + AffectedComponentDTO.COMPONENT_TYPE_INPUT_PORT + ", " + AffectedComponentDTO.COMPONENT_TYPE_OUTPUT_PORT + ", "
-                + AffectedComponentDTO.COMPONENT_TYPE_REMOTE_INPUT_PORT + ", " + AffectedComponentDTO.COMPONENT_TYPE_REMOTE_OUTPUT_PORT)
+        allowableValues = {AffectedComponentDTO.COMPONENT_TYPE_PROCESSOR, AffectedComponentDTO.COMPONENT_TYPE_CONTROLLER_SERVICE,
+                AffectedComponentDTO.COMPONENT_TYPE_INPUT_PORT, AffectedComponentDTO.COMPONENT_TYPE_OUTPUT_PORT,
+                AffectedComponentDTO.COMPONENT_TYPE_REMOTE_INPUT_PORT, AffectedComponentDTO.COMPONENT_TYPE_REMOTE_OUTPUT_PORT})
     public String getReferenceType() {
         return referenceType;
     }

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ConnectionEntity.java
Patch:
@@ -149,7 +149,7 @@ public void setSourceGroupId(String sourceGroupId) {
      */
     @Schema(description = "The type of component the source connectable is.",
             requiredMode = Schema.RequiredMode.REQUIRED,
-            allowableValues = "PROCESSOR, REMOTE_INPUT_PORT, REMOTE_OUTPUT_PORT, INPUT_PORT, OUTPUT_PORT, FUNNEL"
+            allowableValues = {"PROCESSOR", "REMOTE_INPUT_PORT", "REMOTE_OUTPUT_PORT", "INPUT_PORT", "OUTPUT_PORT", "FUNNEL"}
     )
     public String getSourceType() {
         return sourceType;
@@ -177,7 +177,7 @@ public void setDestinationGroupId(String destinationGroupId) {
      */
     @Schema(description = "The type of component the destination connectable is.",
             requiredMode = Schema.RequiredMode.REQUIRED,
-            allowableValues = "PROCESSOR, REMOTE_INPUT_PORT, REMOTE_OUTPUT_PORT, INPUT_PORT, OUTPUT_PORT, FUNNEL"
+            allowableValues = {"PROCESSOR", "REMOTE_INPUT_PORT", "REMOTE_OUTPUT_PORT", "INPUT_PORT", "OUTPUT_PORT", "FUNNEL"}
     )
     public String getDestinationType() {
         return destinationType;

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ControllerServiceRunStatusEntity.java
Patch:
@@ -39,7 +39,7 @@ protected String[] getSupportedState() {
      * @return The run status
      */
     @Schema(description = "The run status of the ControllerService.",
-            allowableValues = "ENABLED, DISABLED"
+            allowableValues = {"ENABLED", "DISABLED"}
     )
     public String getState() {
         return super.getState();

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/FlowAnalysisRuleRunStatusEntity.java
Patch:
@@ -38,7 +38,7 @@ protected String[] getSupportedState() {
      * @return The state
      */
     @Schema(description = "The state of the FlowAnalysisRule.",
-            allowableValues = "ENABLED, DISABLED"
+            allowableValues = {"ENABLED", "DISABLED"}
     )
     public String getState() {
         return super.getState();

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/FlowBreadcrumbEntity.java
Patch:
@@ -96,7 +96,7 @@ public void setParentBreadcrumb(FlowBreadcrumbEntity parentBreadcrumb) {
 
     @Schema(
             description = "The current state of the Process Group, as it relates to the Versioned Flow",
-            allowableValues = "LOCALLY_MODIFIED, STALE, LOCALLY_MODIFIED_AND_STALE, UP_TO_DATE, SYNC_FAILURE",
+            allowableValues = {"LOCALLY_MODIFIED", "STALE", "LOCALLY_MODIFIED_AND_STALE", "UP_TO_DATE", "SYNC_FAILURE"},
             accessMode = Schema.AccessMode.READ_ONLY
     )
     public String getVersionedFlowState() {

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/PortRunStatusEntity.java
Patch:
@@ -38,7 +38,7 @@ protected String[] getSupportedState() {
      * @return The run status
      */
     @Schema(description = "The run status of the Port.",
-            allowableValues = "RUNNING, STOPPED, DISABLED"
+            allowableValues = {"RUNNING", "STOPPED", "DISABLED"}
     )
     public String getState() {
         return super.getState();

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ProcessGroupEntity.java
Patch:
@@ -255,7 +255,7 @@ public void setVersionedFlowSnapshot(RegisteredFlowSnapshot versionedFlowSnapsho
 
     @Schema(
             description = "The current state of the Process Group, as it relates to the Versioned Flow",
-            allowableValues = "LOCALLY_MODIFIED, STALE, LOCALLY_MODIFIED_AND_STALE, UP_TO_DATE, SYNC_FAILURE",
+            allowableValues = {"LOCALLY_MODIFIED", "STALE", "LOCALLY_MODIFIED_AND_STALE", "UP_TO_DATE", "SYNC_FAILURE"},
             accessMode = Schema.AccessMode.READ_ONLY
     )
     public String getVersionedFlowState() {
@@ -321,7 +321,7 @@ public void setParameterContext(ParameterContextReferenceEntity parameterContext
     }
 
     @Schema(description = "Determines the process group update strategy",
-            allowableValues = "CURRENT_GROUP, CURRENT_GROUP_WITH_CHILDREN"
+            allowableValues = {"CURRENT_GROUP", "CURRENT_GROUP_WITH_CHILDREN"}
     )
     public String getProcessGroupUpdateStrategy() {
         return processGroupUpdateStrategy;

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/RemotePortRunStatusEntity.java
Patch:
@@ -38,7 +38,7 @@ protected String[] getSupportedState() {
      * @return The run status
      */
     @Schema(description = "The run status of the RemotePort.",
-            allowableValues = "TRANSMITTING, STOPPED"
+            allowableValues = {"TRANSMITTING", "STOPPED"}
     )
     public String getState() {
         return super.getState();

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ReplayLastEventRequestEntity.java
Patch:
@@ -36,7 +36,7 @@ public void setComponentId(final String componentId) {
     }
 
     @Schema(description = "Which nodes are to replay their last provenance event.",
-        allowableValues = "ALL, PRIMARY"
+        allowableValues = {"ALL", "PRIMARY"}
     )
     public String getNodes() {
         return nodes;

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ReplayLastEventResponseEntity.java
Patch:
@@ -39,7 +39,7 @@ public void setComponentId(final String componentId) {
     }
 
     @Schema(description = "Which nodes were requested to replay their last provenance event.",
-        allowableValues = "ALL, PRIMARY"
+        allowableValues = {"ALL", "PRIMARY"}
     )
     public String getNodes() {
         return nodes;

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ReportingTaskRunStatusEntity.java
Patch:
@@ -38,7 +38,7 @@ protected String[] getSupportedState() {
      * @return The run status
      */
     @Schema(description = "The run status of the ReportingTask.",
-            allowableValues = "RUNNING, STOPPED"
+            allowableValues = {"RUNNING", "STOPPED"}
     )
     public String getState() {
         return super.getState();

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ScheduleComponentsEntity.java
Patch:
@@ -54,7 +54,7 @@ public void setId(String id) {
      * @return The desired state of the descendant components. Possible states are 'RUNNING', 'STOPPED', 'ENABLED', and 'DISABLED'
      */
     @Schema(description = "The desired state of the descendant components",
-        allowableValues = STATE_RUNNING + ", " + STATE_STOPPED + ", " + STATE_ENABLED + ", " + STATE_DISABLED
+        allowableValues = {STATE_RUNNING, STATE_STOPPED, STATE_ENABLED, STATE_DISABLED}
     )
     public String getState() {
         return state;

File: nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/UpdateControllerServiceReferenceRequestEntity.java
Patch:
@@ -45,7 +45,7 @@ public void setId(String id) {
     }
 
     @Schema(description = "The new state of the references for the controller service.",
-        allowableValues = "ENABLED, DISABLED, RUNNING, STOPPED"
+        allowableValues = {"ENABLED", "DISABLED", "RUNNING", "STOPPED"}
     )
     public String getState() {
         return state;

File: nifi-registry/nifi-registry-core/nifi-registry-data-model/src/main/java/org/apache/nifi/registry/authorization/AccessPolicySummary.java
Patch:
@@ -54,7 +54,7 @@ public void setResource(String resource) {
 
     @Schema(
             description = "The action associated with this access policy.",
-            allowableValues = "read, write, delete"
+            allowableValues = {"read", "write", "delete"}
     )
     public String getAction() {
         return action;

File: nifi-toolkit/nifi-toolkit-client/src/main/java/org/apache/nifi/toolkit/client/impl/request/ProxiedEntityRequestConfig.java
Patch:
@@ -33,7 +33,7 @@
  */
 public class ProxiedEntityRequestConfig implements RequestConfig {
 
-    private static final String PROXIED_ENTITIES_CHAIN_HEADER = "X-Proxied-Entities-Chain";
+    private static final String PROXIED_ENTITIES_CHAIN_HEADER = "X-ProxiedEntitiesChain";
 
     private final String[] proxiedEntities;
 

File: nifi-commons/nifi-flowfile-packager/src/main/java/org/apache/nifi/util/FlowFilePackagerV2.java
Patch:
@@ -19,6 +19,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
+import java.nio.charset.StandardCharsets;
 import java.util.Map;
 
 /**
@@ -107,7 +108,7 @@ private void copy(final InputStream in, final OutputStream out) throws IOExcepti
     }
 
     private void writeString(final String val, final OutputStream out) throws IOException {
-        final byte[] bytes = val.getBytes("UTF-8");
+        final byte[] bytes = val.getBytes(StandardCharsets.UTF_8);
         writeFieldLength(out, bytes.length);
         out.write(bytes);
     }

File: nifi-commons/nifi-flowfile-packager/src/main/java/org/apache/nifi/util/FlowFilePackagerV3.java
Patch:
@@ -19,6 +19,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
+import java.nio.charset.StandardCharsets;
 import java.util.Map;
 
 public class FlowFilePackagerV3 implements FlowFilePackager {
@@ -54,7 +55,7 @@ private void copy(final InputStream in, final OutputStream out) throws IOExcepti
     }
 
     private void writeString(final String val, final OutputStream out) throws IOException {
-        final byte[] bytes = val.getBytes("UTF-8");
+        final byte[] bytes = val.getBytes(StandardCharsets.UTF_8);
         writeFieldLength(out, bytes.length);
         out.write(bytes);
     }

File: nifi-commons/nifi-flowfile-packager/src/main/java/org/apache/nifi/util/FlowFileUnpackagerV2.java
Patch:
@@ -20,6 +20,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
+import java.nio.charset.StandardCharsets;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -77,7 +78,7 @@ protected String readString(final InputStream in) throws IOException {
         }
         final byte[] bytes = new byte[numBytes];
         fillBuffer(in, bytes, numBytes);
-        return new String(bytes, "UTF-8");
+        return new String(bytes, StandardCharsets.UTF_8);
     }
 
     private void fillBuffer(final InputStream in, final byte[] buffer, final int length) throws IOException {

File: nifi-commons/nifi-flowfile-packager/src/main/java/org/apache/nifi/util/FlowFileUnpackagerV3.java
Patch:
@@ -20,6 +20,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
+import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.Map;
@@ -94,7 +95,7 @@ protected String readString(final InputStream in) throws IOException {
         }
         final byte[] bytes = new byte[numBytes];
         fillBuffer(in, bytes, numBytes);
-        return new String(bytes, "UTF-8");
+        return new String(bytes, StandardCharsets.UTF_8);
     }
 
     private void fillBuffer(final InputStream in, final byte[] buffer, final int length) throws IOException {

File: nifi-commons/nifi-flowfile-packager/src/main/java/org/apache/nifi/util/Unpackage.java
Patch:
@@ -22,6 +22,7 @@
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.util.Map;
 import java.util.UUID;
 
@@ -93,7 +94,7 @@ public static void main(final String[] args) throws IOException {
                             final BufferedOutputStream bufferedOut = new BufferedOutputStream(fos)) {
 
                         for (final Map.Entry<String, String> entry : attributes.entrySet()) {
-                            bufferedOut.write((entry.getKey() + "=" + entry.getValue() + "\n").getBytes("UTF-8"));
+                            bufferedOut.write((entry.getKey() + "=" + entry.getValue() + "\n").getBytes(StandardCharsets.UTF_8));
                         }
                     }
                 }

File: nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/codec/StandardFlowFileCodec.java
Patch:
@@ -29,6 +29,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
+import java.nio.charset.StandardCharsets;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -93,7 +94,7 @@ public DataPacket decode(final InputStream stream) throws IOException, ProtocolE
     }
 
     private void writeString(final String val, final DataOutputStream out) throws IOException {
-        final byte[] bytes = val.getBytes("UTF-8");
+        final byte[] bytes = val.getBytes(StandardCharsets.UTF_8);
         out.writeInt(bytes.length);
         out.write(bytes);
     }
@@ -102,7 +103,7 @@ private String readString(final DataInputStream in) throws IOException {
         final int numBytes = in.readInt();
         final byte[] bytes = new byte[numBytes];
         StreamUtils.fillBuffer(in, bytes, true);
-        return new String(bytes, "UTF-8");
+        return new String(bytes, StandardCharsets.UTF_8);
     }
 
     @Override

File: nifi-commons/nifi-utils/src/test/java/org/apache/nifi/util/file/monitor/TestCompoundUpdateMonitor.java
Patch:
@@ -22,6 +22,7 @@
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
+import java.nio.charset.StandardCharsets;
 import java.nio.file.Path;
 import java.util.UUID;
 
@@ -58,7 +59,7 @@ public void test() throws IOException {
 
         final long lastModifiedDate = file.lastModified();
         try (final OutputStream out = new FileOutputStream(file)) {
-            out.write("Hello".getBytes("UTF-8"));
+            out.write("Hello".getBytes(StandardCharsets.UTF_8));
         }
 
         file.setLastModified(lastModifiedDate);

File: nifi-commons/nifi-utils/src/test/java/org/apache/nifi/util/file/monitor/TestSynchronousFileWatcher.java
Patch:
@@ -21,6 +21,7 @@
 import java.io.ByteArrayInputStream;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
@@ -34,15 +35,15 @@ public class TestSynchronousFileWatcher {
     @Test
     public void testIt() throws IOException, InterruptedException {
         final Path path = Paths.get("target/1.txt");
-        Files.copy(new ByteArrayInputStream("Hello, World!".getBytes("UTF-8")), path, StandardCopyOption.REPLACE_EXISTING);
+        Files.copy(new ByteArrayInputStream("Hello, World!".getBytes(StandardCharsets.UTF_8)), path, StandardCopyOption.REPLACE_EXISTING);
         final UpdateMonitor monitor = new DigestUpdateMonitor();
 
         final SynchronousFileWatcher watcher = new SynchronousFileWatcher(path, monitor, 0L);
         assertFalse(watcher.checkAndReset());
         assertFalse(watcher.checkAndReset());
 
         try (FileOutputStream fos = new FileOutputStream(path.toFile())) {
-            fos.write("Good-bye, World!".getBytes("UTF-8"));
+            fos.write("Good-bye, World!".getBytes(StandardCharsets.UTF_8));
             fos.getFD().sync();
         }
 

File: nifi-extension-bundles/nifi-evtx-bundle/nifi-evtx-processors/src/main/java/org/apache/nifi/processors/evtx/parser/bxml/value/WStringArrayTypeNode.java
Patch:
@@ -19,6 +19,7 @@
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import javax.xml.stream.XMLOutputFactory;
 import javax.xml.stream.XMLStreamException;
 import javax.xml.stream.XMLStreamWriter;
@@ -57,7 +58,7 @@ public WStringArrayTypeNode(BinaryReader binaryReader, ChunkHeader chunkHeader,
         } catch (XMLStreamException e) {
             throw new IOException(e);
         }
-        value = stream.toString("UTF-8");
+        value = stream.toString(StandardCharsets.UTF_8);
     }
 
     @Override

File: nifi-extension-bundles/nifi-extension-utils/nifi-database-utils/src/main/java/org/apache/nifi/util/db/JdbcCommon.java
Patch:
@@ -49,6 +49,7 @@
 import java.math.BigDecimal;
 import java.math.BigInteger;
 import java.nio.ByteBuffer;
+import java.nio.charset.StandardCharsets;
 import java.sql.Blob;
 import java.sql.Clob;
 import java.sql.PreparedStatement;
@@ -865,7 +866,7 @@ public static void setParameter(final PreparedStatement stmt, final int paramete
                     switch (valueFormat) {
                         case "":
                         case "ascii":
-                            bValue = parameterValue.getBytes("ASCII");
+                            bValue = parameterValue.getBytes(StandardCharsets.US_ASCII);
                             break;
                         case "hex":
                             try {

File: nifi-extension-bundles/nifi-extension-utils/nifi-record-utils/nifi-avro-record-utils/src/test/java/org/apache/nifi/avro/TestAvroTypeUtil.java
Patch:
@@ -762,7 +762,7 @@ public void testAliasCreatedForInvalidField() {
 
     @Test
     public void testListToArrayConversion() {
-        final Charset charset = Charset.forName("UTF-8");
+        final Charset charset = StandardCharsets.UTF_8;
         Object o = AvroTypeUtil.convertToAvroObject(Collections.singletonList("Hello"), Schema.createArray(Schema.create(Type.STRING)), charset);
         assertTrue(o instanceof List);
         assertEquals(1, ((List) o).size());
@@ -771,7 +771,7 @@ public void testListToArrayConversion() {
 
     @Test
     public void testMapToRecordConversion() {
-        final Charset charset = Charset.forName("UTF-8");
+        final Charset charset = StandardCharsets.UTF_8;
         Object o = AvroTypeUtil.convertToAvroObject(Collections.singletonMap("Hello", "World"),
             Schema.createRecord(null, null, null, false, Collections.singletonList(new Field("Hello", Schema.create(Type.STRING), "", ""))), charset);
         assertTrue(o instanceof Record);

File: nifi-extension-bundles/nifi-extension-utils/nifi-syslog-utils/src/test/java/org/apache/nifi/syslog/TestSyslogParser.java
Patch:
@@ -23,6 +23,7 @@
 
 import java.nio.ByteBuffer;
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -34,7 +35,7 @@
 
 public class TestSyslogParser {
 
-    static final Charset CHARSET = Charset.forName("UTF-8");
+    static final Charset CHARSET = StandardCharsets.UTF_8;
 
     private SyslogParser parser;
 

File: nifi-extension-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/test/java/org/apache/nifi/processors/gcp/vision/StartGcpVisionAnnotateImagesOperationTest.java
Patch:
@@ -30,6 +30,7 @@
 import com.google.cloud.vision.v1.ImageAnnotatorClient;
 import java.io.File;
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.util.concurrent.ExecutionException;
 import org.apache.commons.io.FileUtils;
 import org.apache.nifi.gcp.credentials.service.GCPCredentialsService;
@@ -58,7 +59,7 @@ public class StartGcpVisionAnnotateImagesOperationTest {
 
     @BeforeEach
     public void setUp() throws InitializationException, IOException {
-        String jsonPayloadValue = FileUtils.readFileToString(new File("src/test/resources/vision/annotate-image.json"), "UTF-8");
+        String jsonPayloadValue = FileUtils.readFileToString(new File("src/test/resources/vision/annotate-image.json"), StandardCharsets.UTF_8);
         GCPCredentialsService gcpCredentialsService = new GCPCredentialsControllerService();
         StartGcpVisionAnnotateImagesOperation processor = new StartGcpVisionAnnotateImagesOperation() {
             @Override

File: nifi-extension-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/main/java/org/apache/nifi/processors/hadoop/FlowFileStreamUnpackerSequenceFileWriter.java
Patch:
@@ -20,6 +20,7 @@
 import java.io.EOFException;
 import java.io.IOException;
 import java.io.InputStream;
+import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.Map;
@@ -116,7 +117,7 @@ protected String readString(final InputStream in) throws IOException {
             }
             final byte[] bytes = new byte[numBytes];
             fillBuffer(in, bytes, numBytes);
-            return new String(bytes, "UTF-8");
+            return new String(bytes, StandardCharsets.UTF_8);
         }
 
         private void fillBuffer(final InputStream in, final byte[] buffer, final int length) throws IOException {

File: nifi-extension-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestGetSFTP.java
Patch:
@@ -28,6 +28,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 
@@ -155,7 +156,7 @@ public void testGetSFTPIgnoreDottedFiles() throws IOException {
     }
 
     private void touchFile(String file) throws IOException {
-        FileUtils.writeStringToFile(new File(file), "", "UTF-8");
+        FileUtils.writeStringToFile(new File(file), "", StandardCharsets.UTF_8);
     }
 
     private void emptyTestDirectory() throws IOException {

File: nifi-extension-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestPutEmail.java
Patch:
@@ -427,7 +427,7 @@ private String getMessageText(final Message message, final Charset charset) thro
             final MimeMultipart multipart = (MimeMultipart) message.getContent();
             final BodyPart part = multipart.getBodyPart(0);
             final InputStream is = part.getDataHandler().getInputStream();
-            final String encoding = Charset.forName("US-ASCII").equals(charset) ? "7bit" : "base64";
+            final String encoding = StandardCharsets.US_ASCII.equals(charset) ? "7bit" : "base64";
             final byte[] decodedTextBytes = "base64".equals(encoding) ? Base64.decodeBase64(IOUtils.toByteArray(is)) : IOUtils.toByteArray(is);
             final String decodedText = StringUtils.newString(decodedTextBytes, charset.name());
             return decodedText;

File: nifi-extension-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestScanContent.java
Patch:
@@ -25,6 +25,7 @@
 import java.io.ByteArrayOutputStream;
 import java.io.DataOutputStream;
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
@@ -60,7 +61,7 @@ public void testBinaryScan() throws IOException {
 
         try (final DataOutputStream dictionaryOut = new DataOutputStream(baos)) {
             for (final String term : terms) {
-                final byte[] termBytes = term.getBytes("UTF-8");
+                final byte[] termBytes = term.getBytes(StandardCharsets.UTF_8);
                 dictionaryOut.writeInt(termBytes.length);
                 dictionaryOut.write(termBytes);
             }

File: nifi-extension-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/test/java/org/apache/nifi/syslog/TestSyslogRecordReader.java
Patch:
@@ -29,13 +29,14 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertNull;
 
 public class TestSyslogRecordReader {
-    private static final Charset CHARSET = Charset.forName("UTF-8");
+    private static final Charset CHARSET = StandardCharsets.UTF_8;
     private static final String PRI = "34";
     private static final String SEV = "2";
     private static final String FAC = "4";

File: nifi-extension-bundles/nifi-websocket-bundle/nifi-websocket-processors/src/main/java/org/apache/nifi/processors/websocket/PutWebSocket.java
Patch:
@@ -24,7 +24,7 @@
 import static org.apache.nifi.processors.websocket.WebSocketProcessorAttributes.ATTR_WS_MESSAGE_TYPE;
 import static org.apache.nifi.processors.websocket.WebSocketProcessorAttributes.ATTR_WS_REMOTE_ADDRESS;
 import static org.apache.nifi.processors.websocket.WebSocketProcessorAttributes.ATTR_WS_SESSION_ID;
-import static org.apache.nifi.websocket.WebSocketMessage.CHARSET_NAME;
+import static org.apache.nifi.websocket.WebSocketMessage.CHARSET;
 
 import java.io.IOException;
 import java.nio.ByteBuffer;
@@ -206,7 +206,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession process
             webSocketService.sendMessage(webSocketServiceEndpoint, sessionId, sender -> {
                 switch (messageType) {
                     case TEXT:
-                        sender.sendString(new String(messageContent, CHARSET_NAME));
+                        sender.sendString(new String(messageContent, CHARSET));
                         break;
                     case BINARY:
                         sender.sendBinary(ByteBuffer.wrap(messageContent));

File: nifi-registry/nifi-registry-core/nifi-registry-framework/src/test/java/org/apache/nifi/registry/service/extension/docs/TestHtmlExtensionDocWriter.java
Patch:
@@ -90,6 +90,6 @@ private String getSerializedExtension(final File rawExtensionJson) throws IOExce
             extensionSerializer.serialize(tempExtension, serializedExtension);
         }
 
-        return serializedExtension.toString("UTF-8");
+        return serializedExtension.toString(StandardCharsets.UTF_8);
     }
 }

File: nifi-registry/nifi-registry-core/nifi-registry-security-api/src/main/java/org/apache/nifi/registry/security/authentication/BasicAuthIdentityProvider.java
Patch:
@@ -20,7 +20,8 @@
 import org.slf4j.LoggerFactory;
 
 import jakarta.servlet.http.HttpServletRequest;
-import java.nio.charset.Charset;
+
+import java.nio.charset.StandardCharsets;
 import java.util.Base64;
 
 public abstract class BasicAuthIdentityProvider implements IdentityProvider {
@@ -74,7 +75,7 @@ public AuthenticationRequest extractCredentials(HttpServletRequest servletReques
 
             // Authorization: Basic {base64credentials}
             String base64Credentials = authorization.substring(BASIC.length()).trim();
-            String credentials = new String(Base64.getDecoder().decode(base64Credentials), Charset.forName("UTF-8"));
+            String credentials = new String(Base64.getDecoder().decode(base64Credentials), StandardCharsets.UTF_8);
             // credentials = username:password
             final String[] credentialParts = credentials.split(":", 2);
             String username = credentialParts[0];

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/extensions/NexusExtensionClient.java
Patch:
@@ -38,13 +38,15 @@
 import java.net.HttpURLConnection;
 import java.net.URI;
 import java.net.URLEncoder;
+import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.time.Duration;
 import java.util.concurrent.TimeUnit;
 
 public class NexusExtensionClient implements ExtensionClient {
     private static final Logger logger = LoggerFactory.getLogger(NexusExtensionClient.class);
     private static final long DEFAULT_TIMEOUT_MILLIS = TimeUnit.SECONDS.toMillis(30);
-    private static final String URL_CHARSET = "UTF-8";
+    private static final Charset URL_CHARSET = StandardCharsets.UTF_8;
 
     private final String baseUrl;
     private final long timeoutMillis;

File: minifi/minifi-bootstrap/src/test/java/org/apache/nifi/minifi/bootstrap/ShutdownHookTest.java
Patch:
@@ -43,6 +43,7 @@ class ShutdownHookTest {
     private ShutdownHook shutdownHook;
 
     @Test
+    @SuppressWarnings("PMD.DontCallThreadRun")
     void testRunShouldShutdownSchedulersAndProcesses() {
         when(runner.getPeriodicStatusReporterManager()).thenReturn(periodicStatusReporterManager);
 

File: nifi-commons/nifi-record/src/test/java/org/apache/nifi/serialization/record/TestDataTypeUtils.java
Patch:
@@ -553,7 +553,7 @@ public void testConvertToBigDecimalWhenInputStringIsInvalid() {
 
     @Test
     public void testConvertToBigDecimalWhenUnsupportedType() {
-        assertThrows(IllegalTypeConversionException.class, () -> DataTypeUtils.convertType(new ArrayList<Double>(), RecordFieldType.DECIMAL.getDecimalDataType(30, 10),
+        assertThrows(IllegalTypeConversionException.class, () -> DataTypeUtils.convertType(new ArrayList<>(), RecordFieldType.DECIMAL.getDecimalDataType(30, 10),
                 null, StandardCharsets.UTF_8));
     }
 
@@ -716,8 +716,8 @@ public void testConvertDataTypeBigint() {
         final Function<Object, BigInteger> toBigInteger = v -> (BigInteger) DataTypeUtils.convertType(v, RecordFieldType.BIGINT.getDataType(), "field");
         assertEquals(new BigInteger("12345678901234567890"), toBigInteger.apply(new BigInteger("12345678901234567890")));
         assertEquals(new BigInteger("1234567890123456789"), toBigInteger.apply(1234567890123456789L));
-        assertEquals(new BigInteger("1"), toBigInteger.apply(1));
-        assertEquals(new BigInteger("1"), toBigInteger.apply((short) 1));
+        assertEquals(BigInteger.ONE, toBigInteger.apply(1));
+        assertEquals(BigInteger.ONE, toBigInteger.apply((short) 1));
         // Decimals are truncated.
         assertEquals(new BigInteger("3"), toBigInteger.apply(3.4f));
         assertEquals(new BigInteger("3"), toBigInteger.apply(3.9f));

File: nifi-commons/nifi-schema-utils/src/test/java/org/apache/nifi/repository/schema/TestSchemaRecordReaderWriter.java
Patch:
@@ -75,7 +75,7 @@ public void testRoundTrip() throws IOException {
         final FieldMapRecord complexRecord2 = new FieldMapRecord(complexMap2, new RecordSchema(longStringField, longField));
 
         // Create a Union Field that indicates that the type could be either 'complex 1' or 'complex 2'
-        final UnionRecordField unionRecordField = new UnionRecordField("union", Repetition.ZERO_OR_MORE, Arrays.asList(new RecordField[] {complexField1, complexField2}));
+        final UnionRecordField unionRecordField = new UnionRecordField("union", Repetition.ZERO_OR_MORE, List.of(complexField1, complexField2));
 
         // Create a Record Schema
         final List<RecordField> fields = new ArrayList<>();
@@ -123,9 +123,9 @@ public void testRoundTrip() throws IOException {
         values.put(createField("long string present", FieldType.LONG_STRING), "Long Hello");
         values.put(createField("complex present", FieldType.COMPLEX), new FieldMapRecord(complexFieldMap, new RecordSchema(colorField, fruitField)));
         values.put(new MapRecordField("map present", createField("key", FieldType.STRING), createField("value", FieldType.INT), Repetition.EXACTLY_ONE), simpleMap);
-        values.put(unionRecordField, Arrays.asList(new NamedValue[] {
+        values.put(unionRecordField, List.of(
             new NamedValue("complex1", complexRecord1),
-            new NamedValue("complex2", complexRecord2)}));
+            new NamedValue("complex2", complexRecord2)));
 
         final FieldMapRecord originalRecord = new FieldMapRecord(values, schema);
 

File: nifi-commons/nifi-security-ssl/src/test/java/org/apache/nifi/security/ssl/EphemeralKeyStoreBuilderTest.java
Patch:
@@ -45,7 +45,7 @@ class EphemeralKeyStoreBuilderTest {
 
     private static final String KEY_ALGORITHM = "RSA";
 
-    private static final char[] KEY_PASSWORD = EphemeralKeyStoreBuilderTest.class.getSimpleName().toCharArray();;
+    private static final char[] KEY_PASSWORD = EphemeralKeyStoreBuilderTest.class.getSimpleName().toCharArray();
 
     private static KeyPair keyPair;
 

File: nifi-commons/nifi-site-to-site-client/src/test/java/org/apache/nifi/remote/protocol/socket/TestSocketClientTransaction.java
Patch:
@@ -31,8 +31,6 @@
 import org.apache.nifi.remote.protocol.Response;
 import org.apache.nifi.remote.protocol.ResponseCode;
 import org.junit.jupiter.api.Test;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
@@ -57,7 +55,6 @@
 
 public class TestSocketClientTransaction {
 
-    private Logger logger = LoggerFactory.getLogger(TestSocketClientTransaction.class);
     private FlowFileCodec codec = new StandardFlowFileCodec();
 
     private SocketClientTransaction getClientTransaction(ByteArrayInputStream bis, ByteArrayOutputStream bos, TransferDirection direction) throws IOException {

File: nifi-commons/nifi-utils/src/test/java/org/apache/nifi/stream/io/ByteCountingInputStreamTest.java
Patch:
@@ -76,7 +76,9 @@ public void testAvailableShouldReturnCorrectCount() throws Exception {
         int availableBytes = bcis.available();
         assertEquals(ALPHABET.length() - 2, availableBytes);
 
-        bcis.skip(24);
+        final long expectedSkip = 24;
+        final long actualSkip = bcis.skip(expectedSkip);
+        assertEquals(expectedSkip, actualSkip);
 
         // Assert
         int finalAvailableBytes = bcis.available();

File: nifi-extension-bundles/nifi-asn1-bundle/nifi-asn1-services/src/test/java/org/apache/nifi/jasn1/TestJASN1RecordReader.java
Patch:
@@ -103,9 +103,9 @@ public void testComposite() throws Exception {
             // Assert integers
             final Object[] numbers = (Object[]) record.getValue("numbers");
             assertEquals(4, numbers.length);
-            assertEquals(new BigInteger("0"), numbers[0]);
-            assertEquals(new BigInteger("1"), numbers[1]);
-            assertEquals(new BigInteger("2"), numbers[2]);
+            assertEquals(BigInteger.ZERO, numbers[0]);
+            assertEquals(BigInteger.ONE, numbers[1]);
+            assertEquals(BigInteger.TWO, numbers[2]);
             assertEquals(new BigInteger("3"), numbers[3]);
 
             // Assert unordered

File: nifi-extension-bundles/nifi-aws-bundle/nifi-aws-processors/src/test/java/org/apache/nifi/processors/aws/s3/ITPutS3Object.java
Patch:
@@ -565,23 +565,23 @@ public void testLocalStatePersistence() throws IOException {
         final PutS3Object.MultipartState state1new = processor.getLocalStateIfInS3(mockClient, bucket, cacheKey1);
         assertEquals("", state1new.getUploadId());
         assertEquals(0L, state1new.getFilePosition().longValue());
-        assertEquals(new ArrayList<PartETag>(), state1new.getPartETags());
+        assertEquals(new ArrayList<>(), state1new.getPartETags());
         assertEquals(0L, state1new.getPartSize().longValue());
         assertEquals(StorageClass.fromValue(StorageClass.Standard.toString()), state1new.getStorageClass());
         assertEquals(0L, state1new.getContentLength().longValue());
 
         final PutS3Object.MultipartState state2new = processor.getLocalStateIfInS3(mockClient, bucket, cacheKey2);
         assertEquals("1234", state2new.getUploadId());
         assertEquals(0L, state2new.getFilePosition().longValue());
-        assertEquals(new ArrayList<PartETag>(), state2new.getPartETags());
+        assertEquals(new ArrayList<>(), state2new.getPartETags());
         assertEquals(0L, state2new.getPartSize().longValue());
         assertEquals(StorageClass.fromValue(StorageClass.Standard.toString()), state2new.getStorageClass());
         assertEquals(1234L, state2new.getContentLength().longValue());
 
         final PutS3Object.MultipartState state3new = processor.getLocalStateIfInS3(mockClient, bucket, cacheKey3);
         assertEquals("5678", state3new.getUploadId());
         assertEquals(0L, state3new.getFilePosition().longValue());
-        assertEquals(new ArrayList<PartETag>(), state3new.getPartETags());
+        assertEquals(new ArrayList<>(), state3new.getPartETags());
         assertEquals(0L, state3new.getPartSize().longValue());
         assertEquals(StorageClass.fromValue(StorageClass.Standard.toString()), state3new.getStorageClass());
         assertEquals(5678L, state3new.getContentLength().longValue());

File: nifi-extension-bundles/nifi-evtx-bundle/nifi-evtx-processors/src/test/java/org/apache/nifi/processors/evtx/parser/bxml/AttributeNodeTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.nifi.processors.evtx.parser.bxml;
 
-import org.apache.nifi.processors.evtx.parser.BinaryReader;
 import org.apache.nifi.processors.evtx.parser.BxmlNodeVisitor;
 import org.apache.nifi.processors.evtx.parser.bxml.value.NullTypeNode;
 import org.junit.jupiter.api.BeforeEach;
@@ -34,7 +33,6 @@
 
 public class AttributeNodeTest extends BxmlNodeWithTokenAndStringTestBase {
     public static final String ATTRIBUTE_NAME = "AttributeName";
-    private BinaryReader binaryReader;
     private AttributeNode attributeNode;
 
     @Override

File: nifi-extension-bundles/nifi-extension-utils/nifi-database-utils/src/test/java/org/apache/nifi/util/db/TestJdbcCommon.java
Patch:
@@ -418,7 +418,7 @@ public void testInt9ShouldBeLong() throws SQLException, IllegalArgumentException
 
     @Test
     public void testConvertToAvroStreamForBigDecimal() throws SQLException, IOException {
-        final BigDecimal bigDecimal = new BigDecimal(12345D);
+        final BigDecimal bigDecimal = new BigDecimal("12345");
         // If db returns a precision, it should be used.
         testConvertToAvroStreamForBigDecimal(bigDecimal, 38, 10, 38, 0);
     }
@@ -453,7 +453,7 @@ public void testConvertToAvroStreamForBigDecimalWithZeroScale() throws SQLExcept
         final int defaultScale = 15;
 
         final BigDecimal bigDecimal = new BigDecimal("1.123", new MathContext(dbPrecision));
-        final BigDecimal expectedValue = new BigDecimal("1");
+        final BigDecimal expectedValue = BigDecimal.ONE;
         testConvertToAvroStreamForBigDecimal(bigDecimal, expectedValue, dbPrecision, dbScale, defaultPrecision, defaultScale, expectedPrecision, expectedScale);
     }
 

File: nifi-extension-bundles/nifi-extension-utils/nifi-file-transfer/src/test/java/org/apache/nifi/processor/util/file/transfer/TestFileInfo.java
Patch:
@@ -25,14 +25,14 @@ public class TestFileInfo {
 
     @Test
     public void testPermissionModeToString() {
-        String rwxPerm = FileInfo.permissionToString(0567);
+        String rwxPerm = FileInfo.permissionToString(Integer.decode("0567"));
         assertEquals("r-xrw-rwx", rwxPerm);
 
         // Test with sticky bit
-        rwxPerm = FileInfo.permissionToString(01567);
+        rwxPerm = FileInfo.permissionToString(Integer.decode("01567"));
         assertEquals("r-xrw-rwx", rwxPerm);
 
-        rwxPerm = FileInfo.permissionToString(03);
+        rwxPerm = FileInfo.permissionToString(Integer.decode("03"));
         assertEquals("-------wx", rwxPerm);
 
     }

File: nifi-extension-bundles/nifi-extension-utils/nifi-record-utils/nifi-avro-record-utils/src/test/java/org/apache/nifi/avro/TestAvroTypeUtil.java
Patch:
@@ -148,8 +148,8 @@ public void testExtractAvroSchemaWithDefaults() {
         assertEquals(42L, avroSchema.getField("long").defaultVal());
         assertEquals(2.4D, (float) avroSchema.getField("float").defaultVal(), 0.002D); // Even though we provide a Float, avro converts it into a Double value.
         assertEquals(28.1D, (double) avroSchema.getField("double").defaultVal(), 0.002D);
-        assertEquals(new ArrayList<String>(), avroSchema.getField("stringArray").defaultVal());
-        assertEquals(new ArrayList<Integer>(), avroSchema.getField("intArray").defaultVal());
+        assertEquals(new ArrayList<>(), avroSchema.getField("stringArray").defaultVal());
+        assertEquals(new ArrayList<>(), avroSchema.getField("intArray").defaultVal());
     }
 
     @Test

File: nifi-extension-bundles/nifi-extension-utils/nifi-record-utils/nifi-avro-record-utils/src/test/java/org/apache/nifi/schema/access/InferenceSchemaStrategyTest.java
Patch:
@@ -49,7 +49,7 @@ public class InferenceSchemaStrategyTest {
             {"double", 1D, RecordFieldType.DOUBLE.getDataType()},
             {"date", new Date(), RecordFieldType.DATE.getDataType()},
             {"decimal", BigDecimal.valueOf(123.456D), RecordFieldType.DECIMAL.getDecimalDataType(6, 3)},
-            {"array", new ArrayList<String>(), RecordFieldType.ARRAY.getDataType()},
+            {"array", new ArrayList<>(), RecordFieldType.ARRAY.getDataType()},
 
             // date subclasses
             {"time", new Time(System.currentTimeMillis()), RecordFieldType.DATE.getDataType()},

File: nifi-extension-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/test/java/org/apache/nifi/processors/hadoop/util/MockFileSystem.java
Patch:
@@ -245,14 +245,14 @@ public FileStatus newFile(Path p, FsPermission permission) {
     }
 
     public FileStatus newDir(Path p) {
-        return new FileStatus(DIR_LENGTH, true, 3, 128 * 1024 * 1024, 1523456000000L, 1523457000000L, perms((short) 0755), "owner", "group", (Path) null, p, true, false, false);
+        return new FileStatus(DIR_LENGTH, true, 3, 128 * 1024 * 1024, 1523456000000L, 1523457000000L, perms(Integer.decode("0755").shortValue()), "owner", "group", (Path) null, p, true, false, false);
     }
 
     public FileStatus newFile(String p) {
-        return new FileStatus(FILE_LENGTH, false, 3, 128 * 1024 * 1024, 1523456000000L, 1523457000000L, perms((short) 0644), "owner", "group", new Path(p));
+        return new FileStatus(FILE_LENGTH, false, 3, 128 * 1024 * 1024, 1523456000000L, 1523457000000L, perms(Integer.decode("0644").shortValue()), "owner", "group", new Path(p));
     }
     public FileStatus newDir(String p) {
-        return new FileStatus(DIR_LENGTH, true, 3, 128 * 1024 * 1024, 1523456000000L, 1523457000000L, perms((short) 0755), "owner", "group", new Path(p));
+        return new FileStatus(DIR_LENGTH, true, 3, 128 * 1024 * 1024, 1523456000000L, 1523457000000L, perms(Integer.decode("0755").shortValue()), "owner", "group", new Path(p));
     }
 
     @Override

File: nifi-extension-bundles/nifi-kafka-bundle/nifi-kafka-3-integration/src/test/java/org/apache/nifi/kafka/processors/ConsumeKafkaRecordIT.java
Patch:
@@ -52,8 +52,6 @@ class ConsumeKafkaRecordIT extends AbstractConsumeKafkaIT {
 
     private static final int FIRST_PARTITION = 0;
 
-    private static final long FIRST_OFFSET = 0;
-
     private TestRunner runner;
 
     @BeforeEach

File: nifi-extension-bundles/nifi-mongodb-bundle/nifi-mongodb-processors/src/test/java/org/apache/nifi/processors/mongodb/GetMongoIT.java
Patch:
@@ -360,7 +360,7 @@ public void testQueryAttribute() {
      */
     @Test
     public void testReadQueryFromBodyWithEL() {
-        Map attributes = new HashMap();
+        Map<String, String> attributes = new HashMap<>();
         attributes.put("field", "c");
         attributes.put("value", "4");
         String query = "{ \"${field}\": { \"$gte\": ${value}}}";

File: nifi-extension-bundles/nifi-mqtt-bundle/nifi-mqtt-processors/src/test/java/org/apache/nifi/processors/mqtt/common/MqttTestClient.java
Patch:
@@ -31,7 +31,7 @@ public class MqttTestClient implements MqttClient {
 
     public ConnectType type;
 
-    public enum ConnectType { Publisher, Subscriber };
+    public enum ConnectType { Publisher, Subscriber }
 
     public String subscribedTopic;
     public int subscribedQos;

File: nifi-extension-bundles/nifi-parquet-bundle/nifi-parquet-processors/src/test/java/org/apache/nifi/processors/parquet/FetchParquetTest.java
Patch:
@@ -605,7 +605,7 @@ private void writeParquetUsersWithDecimal(final File parquetFile) throws IOExcep
 
         try (final ParquetWriter<GenericRecord> writer = writerBuilder.build()) {
             for (int i = 0; i < USERS; i++) {
-                final BigDecimal incrementedAmount = initialAmount.add(new BigDecimal("1"));
+                final BigDecimal incrementedAmount = initialAmount.add(BigDecimal.ONE);
                 final GenericRecord user = new GenericData.Record(schemaWithDecimal);
                 user.put("name", "Bob" + i);
                 user.put("amount", decimalConversion.toFixed(incrementedAmount, amountSchema, amountSchema.getLogicalType()));

File: nifi-extension-bundles/nifi-smb-bundle/nifi-smb-processors/src/test/java/org/apache/nifi/processors/smb/SambaTestContainers.java
Patch:
@@ -44,7 +44,7 @@ public class SambaTestContainers {
     protected final static Integer DEFAULT_SAMBA_PORT = 445;
 
     protected enum AccessMode {
-        READ_ONLY, READ_WRITE;
+        READ_ONLY, READ_WRITE
     }
 
     protected final GenericContainer<?> sambaContainer = new GenericContainer<>(DockerImageName.parse("dperson/samba"))
@@ -107,7 +107,7 @@ protected void writeFile(final String path, final String content) {
     }
 
     protected void writeFile(final String path, final String content, final AccessMode accessMode) {
-        final int fileMode = accessMode == AccessMode.READ_ONLY ? 0100644 : 0100666;
+        final int fileMode = Integer.decode(accessMode == AccessMode.READ_ONLY ? "0100644" : "0100666");
         sambaContainer.copyFileToContainer(Transferable.of(content, fileMode), getContainerPath(path));
     }
 

File: nifi-extension-bundles/nifi-snmp-bundle/nifi-snmp-processors/src/test/java/org/apache/nifi/snmp/dto/SNMPTreeResponseTest.java
Patch:
@@ -57,7 +57,7 @@ public class SNMPTreeResponseTest {
     private static VariableBinding[] vbs3;
     private static Map<String, String> vbMap;
     @Mock
-    private static Target target;
+    private static Target<UdpAddress> target;
 
     @BeforeAll
     public static void setUp() {
@@ -66,7 +66,7 @@ public static void setUp() {
         vbMap.put(SNMP_PREFIX + OID_2 + SNMP_SEPARATOR + VB_SYNTAX, OID_2_VALUE);
         vbMap.put(SNMP_PREFIX + OID_3 + SNMP_SEPARATOR + VB_SYNTAX, OID_3_VALUE);
 
-        target = new CommunityTarget();
+        target = new CommunityTarget<>();
         target.setAddress(new UdpAddress(TARGET_ADDRESS));
 
         vbs1 = new VariableBinding[]{

File: nifi-extension-bundles/nifi-standard-bundle/nifi-standard-parameter-providers/src/test/java/org/apache/nifi/parameter/TestDatabaseParameterProvider.java
Patch:
@@ -253,13 +253,11 @@ private MockTable(final String tableName, final List<Map<String, String>> rows)
     }
 
     private class ResultSetAnswer implements Answer<Boolean> {
-        private final List<java.util.Map<String, String>> rows;
 
-        private Iterator<java.util.Map<String, String>> rowIterator;
+        private final Iterator<java.util.Map<String, String>> rowIterator;
         private java.util.Map<String, String> currentRow;
 
         private ResultSetAnswer(final List<java.util.Map<String, String>> rows) {
-            this.rows = rows;
             this.rowIterator = rows.iterator();
         }
 

File: nifi-extension-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestExecuteSQLRecord.java
Patch:
@@ -69,7 +69,7 @@
 
 public class TestExecuteSQLRecord {
 
-    private final Logger LOGGER = LoggerFactory.getLogger(TestExecuteSQLRecord.class);;
+    private final Logger LOGGER = LoggerFactory.getLogger(TestExecuteSQLRecord.class);
 
     final static String DB_LOCATION = "target/db";
 

File: nifi-extension-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestReplaceText.java
Patch:
@@ -171,7 +171,7 @@ public void testSimple() throws IOException {
     }
 
     @Test
-    public void testWithEscaped$InReplacement() throws IOException {
+    public void testWithEscapedDollarSignInReplacement() throws IOException {
         final TestRunner runner = getRunner();
         runner.setProperty(ReplaceText.SEARCH_VALUE, "(?s:^.*$)");
         runner.setProperty(ReplaceText.REPLACEMENT_VALUE, "a\\$b");
@@ -185,7 +185,7 @@ public void testSimple() throws IOException {
     }
 
     @Test
-    public void testWithUnEscaped$InReplacement() throws IOException {
+    public void testWithUnEscapedDollarSignInReplacement() throws IOException {
         final TestRunner runner = getRunner();
         runner.setProperty(ReplaceText.SEARCH_VALUE, "(?s:^.*$)");
         runner.setProperty(ReplaceText.REPLACEMENT_VALUE, "a$b");

File: nifi-extension-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/test/java/org/apache/nifi/json/TestJsonPathRowRecordReader.java
Patch:
@@ -357,12 +357,12 @@ void testPrimitiveTypeArrays() throws IOException, MalformedRecordException {
             final JsonPathRowRecordReader reader = new JsonPathRowRecordReader(jsonPaths, schema, in, Mockito.mock(ComponentLog.class), dateFormat, timeFormat, timestampFormat)) {
 
             final List<String> fieldNames = schema.getFieldNames();
-            final List<String> expectedFieldNames = Arrays.asList(new String[] {"id", "name", "balance", "address", "city", "state", "zipCode", "country", "accountIds"});
+            final List<String> expectedFieldNames = Arrays.asList("id", "name", "balance", "address", "city", "state", "zipCode", "country", "accountIds");
             assertEquals(expectedFieldNames, fieldNames);
 
             final List<RecordFieldType> dataTypes = schema.getDataTypes().stream().map(dt -> dt.getFieldType()).collect(Collectors.toList());
-            final List<RecordFieldType> expectedTypes = Arrays.asList(new RecordFieldType[] {RecordFieldType.INT, RecordFieldType.STRING, RecordFieldType.DOUBLE, RecordFieldType.STRING,
-                RecordFieldType.STRING, RecordFieldType.STRING, RecordFieldType.STRING, RecordFieldType.STRING, RecordFieldType.ARRAY});
+            final List<RecordFieldType> expectedTypes = Arrays.asList(RecordFieldType.INT, RecordFieldType.STRING, RecordFieldType.DOUBLE, RecordFieldType.STRING,
+                    RecordFieldType.STRING, RecordFieldType.STRING, RecordFieldType.STRING, RecordFieldType.STRING, RecordFieldType.ARRAY);
             assertEquals(expectedTypes, dataTypes);
 
             final Object[] firstRecordValues = reader.nextRecord().getValues();

File: nifi-extension-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/test/java/org/apache/nifi/util/TestSchemaInferenceUtil.java
Patch:
@@ -57,7 +57,7 @@ private static Stream<Arguments> data() {
             Arguments.of("tRUE", RecordFieldType.BOOLEAN.getDataType()),
             Arguments.of("fALSE", RecordFieldType.BOOLEAN.getDataType()),
 
-            Arguments.of(new BigDecimal(Double.MAX_VALUE - 1).toPlainString() + ".01", RecordFieldType.DOUBLE.getDataType()),
+            Arguments.of(new BigDecimal(Double.toString(Double.MAX_VALUE - 1)).toPlainString() + ".01", RecordFieldType.DOUBLE.getDataType()),
 
             Arguments.of(String.valueOf(1.1D), RecordFieldType.FLOAT.getDataType()),
 

File: nifi-extension-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/test/java/org/apache/nifi/xml/TestXMLRecordSetWriter.java
Patch:
@@ -128,7 +128,7 @@ public void testRootAndRecordNaming() throws IOException, InitializationExceptio
 
     @Test
     public void testSchemaRootRecordNaming() throws IOException, InitializationException {
-        String avroSchemaText = new String(Files.readAllBytes(Paths.get("src/test/resources/xml/testschema3")));;
+        String avroSchemaText = new String(Files.readAllBytes(Paths.get("src/test/resources/xml/testschema3")));
         Schema avroSchema = new Schema.Parser().parse(avroSchemaText);
 
         SchemaIdentifier schemaId = SchemaIdentifier.builder().name("schemaName").build();

File: nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/manager/ControllerServiceEntityMergerTest.java
Patch:
@@ -39,7 +39,7 @@ class ControllerServiceEntityMergerTest {
     void testMergeStatusFields() {
         final ControllerServiceEntity nodeOneControllerserviceEntity = getControllerServiceEntity("id1", RunStatus.Stopped.name(), ValidationStatus.VALIDATING.name());
         final ControllerServiceEntity nodeTwoControllerServiceEntity = getControllerServiceEntity("id2", RunStatus.Validating.name(), ValidationStatus.INVALID.name());
-        final Map<NodeIdentifier, ControllerServiceEntity> entityMap = new HashMap();
+        final Map<NodeIdentifier, ControllerServiceEntity> entityMap = new HashMap<>();
         entityMap.put(getNodeIdentifier("node1", 8000), nodeOneControllerserviceEntity);
         entityMap.put(getNodeIdentifier("node2", 8010), nodeTwoControllerServiceEntity);
 

File: nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/manager/ReportingTaskEntityMergerTest.java
Patch:
@@ -38,7 +38,7 @@ class ReportingTaskEntityMergerTest {
     void testMergeStatusFields() {
         final ReportingTaskEntity nodeOneReportingTaskEntity = getReportingTaskEntity("id1", ReportingTaskStatusDTO.RUNNING, ValidationStatus.VALID.name());
         final ReportingTaskEntity nodeTwoReportingTaskEntity = getReportingTaskEntity("id2", ReportingTaskStatusDTO.RUNNING, ValidationStatus.VALIDATING.name());
-        final Map<NodeIdentifier, ReportingTaskEntity> entityMap = new HashMap();
+        final Map<NodeIdentifier, ReportingTaskEntity> entityMap = new HashMap<>();
         entityMap.put(getNodeIdentifier("node1", 8000), nodeOneReportingTaskEntity);
         entityMap.put(getNodeIdentifier("node2", 8010), nodeTwoReportingTaskEntity);
 

File: nifi-framework-bundle/nifi-framework/nifi-site-to-site/src/test/java/org/apache/nifi/remote/TestStandardRemoteGroupPort.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.nifi.flowfile.FlowFile;
 import org.apache.nifi.flowfile.attributes.CoreAttributes;
 import org.apache.nifi.flowfile.attributes.SiteToSiteAttributes;
-import org.apache.nifi.groups.ProcessGroup;
 import org.apache.nifi.groups.RemoteProcessGroup;
 import org.apache.nifi.processor.Processor;
 import org.apache.nifi.processor.Relationship;
@@ -76,7 +75,6 @@ public class TestStandardRemoteGroupPort {
     private SiteToSiteClient siteToSiteClient;
     private Transaction transaction;
     private EventReporter eventReporter;
-    private ProcessGroup processGroup;
     private static final String REMOTE_CLUSTER_URL = "http://node0.example.com:8080/nifi";
     private StandardRemoteGroupPort port;
     private SharedSessionState sessionState;
@@ -98,7 +96,6 @@ private void setupMock(final SiteToSiteTransportProtocol protocol,
     private void setupMock(final SiteToSiteTransportProtocol protocol,
             final TransferDirection direction,
            final SiteToSiteClientConfig siteToSiteClientConfig) throws Exception {
-        processGroup = null;
         remoteGroup = mock(RemoteProcessGroup.class);
         scheduler = null;
         siteToSiteClient = mock(SiteToSiteClient.class);

File: nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/web/api/streaming/ByteRangeStreamingOutputTest.java
Patch:
@@ -30,7 +30,7 @@
 
 class ByteRangeStreamingOutputTest {
 
-    private static final byte[] INPUT_BYTES = String.class.getSimpleName().getBytes(StandardCharsets.UTF_8);;
+    private static final byte[] INPUT_BYTES = String.class.getSimpleName().getBytes(StandardCharsets.UTF_8);
 
     private static final long NOT_SATISFIABLE_LENGTH = 1000;
 

File: nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/web/api/streaming/StreamingOutputResponseBuilderTest.java
Patch:
@@ -27,7 +27,7 @@
 
 class StreamingOutputResponseBuilderTest {
 
-    private static final byte[] INPUT_BYTES = String.class.getSimpleName().getBytes(StandardCharsets.UTF_8);;
+    private static final byte[] INPUT_BYTES = String.class.getSimpleName().getBytes(StandardCharsets.UTF_8);
 
     private static final String RANGE = "bytes=0-%d".formatted(INPUT_BYTES.length);
 

File: nifi-registry/nifi-registry-core/nifi-registry-framework/src/test/java/org/apache/nifi/registry/security/authorization/database/TestDatabaseUserGroupProvider.java
Patch:
@@ -98,7 +98,7 @@ private void configureWithInitialUsers(final String... initialUserIdentities) {
     private void createUser(final String userIdentifier, final String userIdentity) {
         final JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);
         final String sql = "INSERT INTO UGP_USER(IDENTIFIER, IDENTITY) VALUES (?, ?)";
-        final int updatedRows1 = jdbcTemplate.update(sql, new Object[] {userIdentifier, userIdentity});
+        final int updatedRows1 = jdbcTemplate.update(sql, userIdentifier, userIdentity);
         assertEquals(1, updatedRows1);
     }
 
@@ -111,7 +111,7 @@ private void createUser(final String userIdentifier, final String userIdentity)
     private void createGroup(final String groupIdentifier, final String groupIdentity) {
         final JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);
         final String sql = "INSERT INTO UGP_GROUP(IDENTIFIER, IDENTITY) VALUES (?, ?)";
-        final int updatedRows1 = jdbcTemplate.update(sql, new Object[] {groupIdentifier, groupIdentity});
+        final int updatedRows1 = jdbcTemplate.update(sql, groupIdentifier, groupIdentity);
         assertEquals(1, updatedRows1);
     }
 
@@ -124,7 +124,7 @@ private void createGroup(final String groupIdentifier, final String groupIdentit
     private void addUserToGroup(final String userIdentifier, final String groupIdentifier) {
         final JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);
         final String sql = "INSERT INTO UGP_USER_GROUP(USER_IDENTIFIER, GROUP_IDENTIFIER) VALUES (?, ?)";
-        final int updatedRows1 = jdbcTemplate.update(sql, new Object[] {userIdentifier, groupIdentifier});
+        final int updatedRows1 = jdbcTemplate.update(sql, userIdentifier, groupIdentifier);
         assertEquals(1, updatedRows1);
     }
 

File: nifi-registry/nifi-registry-extensions/nifi-registry-aws/nifi-registry-aws-extensions/src/test/java/org/apache/nifi/registry/aws/S3BundlePersistenceProviderIT.java
Patch:
@@ -95,7 +95,7 @@ public void teardown() {
         try {
             s3Client.close();
         } catch (Exception e) {
-            e.printStackTrace();;
+            e.printStackTrace();
         }
     }
 

File: nifi-system-tests/nifi-system-test-suite/src/test/java/org/apache/nifi/tests/system/processor/DefaultedDynamicClassPathModificationIT.java
Patch:
@@ -36,7 +36,6 @@ class DefaultedDynamicClassPathModificationIT extends NiFiSystemIT {
 
     private ConnectionEntity defaultedModifyClasspathInputConnection;
     private ConnectionEntity successConnection;
-    private ConnectionEntity failureConnection;
 
     @Test
     void testLoadsClassFromDefaultedDynamicModification() throws NiFiClientException, IOException, InterruptedException {
@@ -100,6 +99,6 @@ private void createFlow() throws NiFiClientException, IOException {
 
         defaultedModifyClasspathInputConnection = getClientUtil().createConnection(generateFlowFileProcessor, defaultedModifyClasspathProcessor, "success");
         successConnection = getClientUtil().createConnection(defaultedModifyClasspathProcessor, terminateSuccess, "success");
-        failureConnection = getClientUtil().createConnection(defaultedModifyClasspathProcessor, terminateFailure, "failure");
+        getClientUtil().createConnection(defaultedModifyClasspathProcessor, terminateFailure, "failure");
     }
 }

File: nifi-extension-bundles/nifi-kafka-bundle/nifi-kafka-processors/src/main/java/org/apache/nifi/kafka/processors/producer/key/AttributeKeyFactory.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.nifi.kafka.processors.producer.key;
 
+import org.apache.nifi.kafka.shared.attribute.KafkaFlowFileAttribute;
 import org.apache.nifi.serialization.record.Record;
 
 import java.io.UnsupportedEncodingException;
@@ -29,13 +30,13 @@ public class AttributeKeyFactory implements KeyFactory {
 
     public AttributeKeyFactory(final String keyAttribute,
                                final String keyAttributeEncoding) {
-        this.keyAttribute = keyAttribute;
+        this.keyAttribute = (keyAttribute == null) ? KafkaFlowFileAttribute.KAFKA_KEY : keyAttribute;
         this.keyAttributeEncoding = Optional.ofNullable(keyAttributeEncoding).orElse(StandardCharsets.UTF_8.name());
     }
 
     @Override
     public byte[] getKey(final Map<String, String> attributes, final Record record) throws UnsupportedEncodingException {
-        final String keyAttributeValue = (keyAttribute == null) ? null : attributes.get(keyAttribute);
+        final String keyAttributeValue = attributes.get(keyAttribute);
         return (keyAttributeValue == null) ? null : keyAttributeValue.getBytes(keyAttributeEncoding);
     }
 }

File: nifi-extension-bundles/nifi-kafka-bundle/nifi-kafka-processors/src/main/java/org/apache/nifi/kafka/processors/consumer/convert/FlowFileStreamKafkaMessageConverter.java
Patch:
@@ -61,12 +61,11 @@ public void toFlowFiles(final ProcessSession session, final Iterator<ByteRecord>
 
             final byte[] value = consumerRecord.getValue();
             FlowFile flowFile = session.create();
-            
 
             if (consumerRecord.getValue().length > 0) {
-            	flowFile = session.write(flowFile, outputStream -> outputStream.write(value));
+                flowFile = session.write(flowFile, outputStream -> outputStream.write(value));
             } else {
-            	session.putAttribute(flowFile, KafkaFlowFileAttribute.KAFKA_TOMBSTONE, Boolean.TRUE.toString());
+                session.putAttribute(flowFile, KafkaFlowFileAttribute.KAFKA_TOMBSTONE, Boolean.TRUE.toString());
             }
 
             final Map<String, String> attributes = KafkaUtils.toAttributes(

File: nifi-framework-bundle/nifi-framework/nifi-web/nifi-jetty/src/test/java/org/apache/nifi/web/server/filter/RestApiRequestFilterProviderTest.java
Patch:
@@ -21,7 +21,6 @@
 import org.eclipse.jetty.ee10.servlets.DoSFilter;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
-import org.springframework.security.web.header.HeaderWriterFilter;
 
 import jakarta.servlet.Filter;
 import java.util.Collections;
@@ -56,7 +55,6 @@ public void testGetFilters() {
         assertNotNull(filters);
         assertFalse(filters.isEmpty());
 
-        assertFilterClassFound(filters, HeaderWriterFilter.class);
         assertFilterClassFound(filters, DataTransferExcludedDoSFilter.class);
     }
 

File: nifi-framework-bundle/nifi-framework/nifi-web/nifi-jetty/src/test/java/org/apache/nifi/web/server/filter/StandardRequestFilterProviderTest.java
Patch:
@@ -22,7 +22,6 @@
 import org.eclipse.jetty.ee10.servlet.FilterHolder;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
-import org.springframework.security.web.header.HeaderWriterFilter;
 
 import jakarta.servlet.Filter;
 import java.util.Collections;
@@ -81,7 +80,7 @@ public void testGetFiltersHttpsEnabled() {
 
         assertFilterClassFound(filters, RequestAuthenticationFilter.class);
 
-        final FilterHolder firstFilterHolder = filters.get(0);
+        final FilterHolder firstFilterHolder = filters.getFirst();
         final Class<? extends Filter> firstFilterClass = firstFilterHolder.getHeldClass();
         assertEquals(RequestAuthenticationFilter.class, firstFilterClass);
     }
@@ -90,7 +89,6 @@ private void assertStandardFiltersFound(final List<FilterHolder> filters) {
         assertNotNull(filters);
         assertFalse(filters.isEmpty());
 
-        assertFilterClassFound(filters, HeaderWriterFilter.class);
         assertFilterClassFound(filters, DataTransferExcludedDoSFilter.class);
     }
 

File: nifi-framework-bundle/nifi-framework-extensions/nifi-framework-kubernetes-bundle/nifi-framework-kubernetes-state-provider/src/test/java/org/apache/nifi/kubernetes/state/provider/KubernetesConfigMapStateProviderTest.java
Patch:
@@ -23,7 +23,7 @@
 import io.fabric8.kubernetes.client.server.mock.KubernetesMockServer;
 import io.fabric8.kubernetes.client.server.mock.KubernetesMockServerExtension;
 import io.fabric8.mockwebserver.dsl.HttpMethod;
-import okhttp3.mockwebserver.RecordedRequest;
+import io.fabric8.mockwebserver.http.RecordedRequest;
 import org.apache.nifi.components.ValidationResult;
 import org.apache.nifi.components.state.Scope;
 import org.apache.nifi.components.state.StateMap;

File: nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiServiceFacade.java
Patch:
@@ -524,7 +524,7 @@ public void verifyRevision(final Revision revision, final NiFiUser user) {
             return;
         }
 
-        throw new InvalidRevisionException(revision + " is not the most up-to-date revision. This component appears to have been modified");
+        throw new InvalidRevisionException(revision + " is not the most up-to-date revision. This component appears to have been modified. Retrieve the most up-to-date revision and try again.");
     }
 
     @Override

File: nifi-commons/nifi-write-ahead-log/src/main/java/org/apache/nifi/wali/SnapshotRecovery.java
Patch:
@@ -32,8 +32,8 @@ public interface SnapshotRecovery<T> {
     File getRecoveryFile();
 
 
-    public static <T> SnapshotRecovery<T> emptyRecovery() {
-        return new SnapshotRecovery<T>() {
+    static <T> SnapshotRecovery<T> emptyRecovery() {
+        return new SnapshotRecovery<>() {
             @Override
             public long getMaxTransactionId() {
                 return -1L;

File: nifi-framework-bundle/nifi-framework-extensions/nifi-questdb-bundle/nifi-questdb/src/main/java/org/apache/nifi/questdb/mapping/RequestMappingBuilder.java
Patch:
@@ -62,6 +62,6 @@ public RequestMapping<T> build() {
             throw new IllegalArgumentException("There must be at least one declared field");
         }
 
-        return new SimpleRequestMapping<T>(factory, fieldMappings);
+        return new SimpleRequestMapping<>(factory, fieldMappings);
     }
 }

File: nifi-framework-bundle/nifi-framework/nifi-framework-nar-loading-utils/src/test/java/org/apache/nifi/nar/AbstractTestNarLoader.java
Patch:
@@ -109,7 +109,7 @@ private void deleteDir(String path) throws IOException {
             return;
         }
 
-        Files.walkFileTree(directory, new SimpleFileVisitor<Path>() {
+        Files.walkFileTree(directory, new SimpleFileVisitor<>() {
             @Override
             public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                 Files.delete(file);

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/compile/ExpressionCompiler.java
Patch:
@@ -815,7 +815,7 @@ private Evaluator<?> buildFunctionEvaluator(final Tree tree, final Evaluator<?>
                     toStringEvaluator(argEvaluators.get(0), "first argument to contains")), "contains");
             }
             case IN: {
-                List<Evaluator<String>> list = new ArrayList<Evaluator<String>>();
+                List<Evaluator<String>> list = new ArrayList<>();
                 for (int i = 0; i < argEvaluators.size(); i++) {
                     list.add(toStringEvaluator(argEvaluators.get(i), i + "th argument to in"));
                 }

File: nifi-commons/nifi-hl7-query-language/src/main/java/org/apache/nifi/hl7/query/HL7Query.java
Patch:
@@ -304,7 +304,7 @@ public QueryResult evaluate(final HL7Message message) {
             if (value instanceof List) {
                 possibleValues = (List<Object>) value;
             } else if (value instanceof Collection) {
-                possibleValues = new ArrayList<Object>((Collection<Object>) value);
+                possibleValues = new ArrayList<>((Collection<Object>) value);
             } else {
                 possibleValues = new ArrayList<>(1);
                 possibleValues.add(value);

File: nifi-commons/nifi-metrics/src/main/java/org/apache/nifi/metrics/jvm/JmxJvmMetrics.java
Patch:
@@ -210,7 +210,7 @@ public Set<String> deadlockedThreads() {
     @Override
     public Map<Thread.State, Double> threadStatePercentages() {
         int totalThreadCount = (Integer) getMetric(THREADS_COUNT);
-        final Map<Thread.State, Double> threadStatePercentages = new HashMap<Thread.State, Double>();
+        final Map<Thread.State, Double> threadStatePercentages = new HashMap<>();
         for (Thread.State state : Thread.State.values()) {
             threadStatePercentages.put(state, (Integer) getMetric(REGISTRY_METRICSET_THREADS + "." + state.name().toLowerCase() + ".count") / (double) totalThreadCount);
         }

File: nifi-commons/nifi-record/src/main/java/org/apache/nifi/serialization/record/RecordFieldType.java
Patch:
@@ -225,7 +225,7 @@ public enum RecordFieldType {
     MAP("map", null, new MapDataType(null));
 
 
-    private static final Map<String, RecordFieldType> SIMPLE_NAME_MAP = new HashMap<String, RecordFieldType>();
+    private static final Map<String, RecordFieldType> SIMPLE_NAME_MAP = new HashMap<>();
 
     static {
         for (RecordFieldType value : values()) {

File: nifi-commons/nifi-utils/src/main/java/org/apache/nifi/stream/io/LeakyBucketStreamThrottler.java
Patch:
@@ -31,7 +31,7 @@
 public class LeakyBucketStreamThrottler implements StreamThrottler {
 
     private final int maxBytesPerSecond;
-    private final BlockingQueue<Request> requestQueue = new LinkedBlockingQueue<Request>();
+    private final BlockingQueue<Request> requestQueue = new LinkedBlockingQueue<>();
     private final ScheduledExecutorService executorService;
     private final AtomicBoolean shutdown = new AtomicBoolean(false);
 
@@ -304,7 +304,7 @@ public Request(final InputStream in, final OutputStream out, final long maxBytes
             this.out = out;
             this.in = in;
             this.maxBytesToCopy = maxBytesToCopy;
-            this.responseQueue = new LinkedBlockingQueue<Response>(1);
+            this.responseQueue = new LinkedBlockingQueue<>(1);
         }
 
         public BlockingQueue<Response> getResponseQueue() {

File: nifi-commons/nifi-utils/src/main/java/org/apache/nifi/util/search/ahocorasick/SearchState.java
Patch:
@@ -52,7 +52,7 @@ public Map<SearchTerm<T>, List<Long>> getResults() {
     }
 
     void addResult(final SearchTerm matchingTerm) {
-        final List<Long> indexes = (resultMap.containsKey(matchingTerm)) ? resultMap.get(matchingTerm) : new ArrayList<Long>(5);
+        final List<Long> indexes = (resultMap.containsKey(matchingTerm)) ? resultMap.get(matchingTerm) : new ArrayList<>(5);
         indexes.add(bytesRead);
         resultMap.put(matchingTerm, indexes);
     }

File: nifi-commons/nifi-utils/src/test/java/org/apache/nifi/stream/io/TestLeakyBucketThrottler.java
Patch:
@@ -91,7 +91,7 @@ public void testDirectInterface() throws IOException, InterruptedException {
         try (final LeakyBucketStreamThrottler throttler = new LeakyBucketStreamThrottler(1024 * 1024);
                 final ByteArrayOutputStream baos = new ByteArrayOutputStream()) {
             // create 3 threads, each sending ~2 MB
-            final List<Thread> threads = new ArrayList<Thread>();
+            final List<Thread> threads = new ArrayList<>();
             for (int i = 0; i < 3; i++) {
                 final Thread t = new WriterThread(i, throttler, baos);
                 threads.add(t);

File: nifi-extension-bundles/nifi-amqp-bundle/nifi-amqp-processors/src/test/java/org/apache/nifi/amqp/processors/TestChannel.java
Patch:
@@ -86,7 +86,7 @@ public TestChannel(Map<String, String> exchangeToRoutingKeyMappings,
         if (this.routingKeyToQueueMappings != null) {
             for (List<String> queues : routingKeyToQueueMappings.values()) {
                 for (String queue : queues) {
-                    this.enqueuedMessages.put(queue, new ArrayBlockingQueue<GetResponse>(100));
+                    this.enqueuedMessages.put(queue, new ArrayBlockingQueue<>(100));
                 }
             }
         }

File: nifi-extension-bundles/nifi-asana-bundle/nifi-asana-processors/src/main/java/org/apache/nifi/processors/asana/utils/GenericAsanaObjectFetcher.java
Patch:
@@ -108,7 +108,7 @@ protected Iterator<AsanaObject> fetch() {
                 });
 
         return new FilterIterator<>(
-                new Iterator<AsanaObject>() {
+                new Iterator<>() {
                     Iterator<AsanaObject> it = currentObjects.iterator();
                     Set<String> unseenIds = new HashSet<>(lastFingerprints.keySet()); // copy all previously seen ids.
 

File: nifi-extension-bundles/nifi-asn1-bundle/nifi-asn1-services/src/main/java/org/apache/nifi/jasn1/StandardRecordModelIteratorProvider.java
Patch:
@@ -36,7 +36,7 @@ public class StandardRecordModelIteratorProvider implements RecordModelIteratorP
     @SuppressWarnings("unchecked")
     public Iterator<BerType> iterator(InputStream inputStream, ComponentLog logger, Class<? extends BerType> rootClass, String recordField, Field seqOfField) {
         if (StringUtils.isEmpty(recordField)) {
-            return new Iterator<BerType>() {
+            return new Iterator<>() {
                 @Override
                 public boolean hasNext() {
                     boolean hasNext;

File: nifi-extension-bundles/nifi-avro-bundle/nifi-avro-processors/src/main/java/org/apache/nifi/processors/avro/ExtractAvroMetadata.java
Patch:
@@ -172,7 +172,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
                 @Override
                 public void process(InputStream rawIn) throws IOException {
                     try (final InputStream in = new BufferedInputStream(rawIn);
-                         final DataFileStream<GenericRecord> reader = new DataFileStream<>(in, new GenericDatumReader<GenericRecord>())) {
+                         final DataFileStream<GenericRecord> reader = new DataFileStream<>(in, new GenericDatumReader<>())) {
 
                         final Schema schema = reader.getSchema();
                         if (schema == null) {

File: nifi-extension-bundles/nifi-avro-bundle/nifi-avro-processors/src/main/java/org/apache/nifi/processors/avro/SplitAvro.java
Patch:
@@ -270,15 +270,15 @@ public List<FlowFile> split(final ProcessSession session, final FlowFile origina
                 @Override
                 public void process(InputStream rawIn) throws IOException {
                     try (final InputStream in = new BufferedInputStream(rawIn);
-                         final DataFileStream<GenericRecord> reader = new DataFileStream<>(in, new GenericDatumReader<GenericRecord>())) {
+                         final DataFileStream<GenericRecord> reader = new DataFileStream<>(in, new GenericDatumReader<>())) {
 
                         final AtomicReference<String> codec = new AtomicReference<>(reader.getMetaString(DataFileConstants.CODEC));
                         if (codec.get() == null) {
                             codec.set(DataFileConstants.NULL_CODEC);
                         }
 
                         // while records are left, start a new split by spawning a FlowFile
-                        final AtomicReference<Boolean> hasNextHolder = new AtomicReference<Boolean>(reader.hasNext());
+                        final AtomicReference<Boolean> hasNextHolder = new AtomicReference<>(reader.hasNext());
                         while (hasNextHolder.get()) {
                             FlowFile childFlowFile = session.create(originalFlowFile);
                             childFlowFile = session.write(childFlowFile, new OutputStreamCallback() {
@@ -347,7 +347,7 @@ public DatafileSplitWriter(final boolean transferMetadata) {
 
         @Override
         public void init(final DataFileStream<GenericRecord> reader, final String codec, final OutputStream out) throws IOException {
-            writer = new DataFileWriter<>(new GenericDatumWriter<GenericRecord>());
+            writer = new DataFileWriter<>(new GenericDatumWriter<>());
 
             if (transferMetadata) {
                 for (String metaKey : reader.getMetaKeys()) {

File: nifi-extension-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/credentials/provider/service/AWSCredentialsProviderControllerService.java
Patch:
@@ -346,7 +346,7 @@ private CredentialsStrategy selectPrimaryStrategy(final PropertyContext property
     @Override
     protected Collection<ValidationResult> customValidate(final ValidationContext validationContext) {
         final CredentialsStrategy selectedStrategy = selectPrimaryStrategy(validationContext);
-        final ArrayList<ValidationResult> validationFailureResults = new ArrayList<ValidationResult>();
+        final ArrayList<ValidationResult> validationFailureResults = new ArrayList<>();
 
         for (CredentialsStrategy strategy : strategies) {
             final Collection<ValidationResult> strategyValidationFailures = strategy.validate(validationContext,

File: nifi-extension-bundles/nifi-azure-bundle/nifi-azure-reporting-task/src/test/java/org/apache/nifi/reporting/azure/loganalytics/TestAzureLogAnalyticsProvenanceReportingTask.java
Patch:
@@ -64,7 +64,7 @@ public void testAddField2() {
         final Map<String, Object> config = Collections.emptyMap();
         final JsonBuilderFactory factory = Json.createBuilderFactory(config);
         final JsonObjectBuilder builder = factory.createObjectBuilder();
-        Map<String, String> values = new LinkedHashMap<String, String>();
+        Map<String, String> values = new LinkedHashMap<>();
         values.put("TestKeyString1", "StringValue1");
         values.put("TestKeyString2", "StringValue2");
         AzureLogAnalyticsProvenanceReportingTask.addField(builder, factory, "TestKeyString", values, true);
@@ -80,7 +80,7 @@ public void testAddField3() {
         final Map<String, Object> config = Collections.emptyMap();
         final JsonBuilderFactory factory = Json.createBuilderFactory(config);
         final JsonObjectBuilder builder = factory.createObjectBuilder();
-        Collection<String> values = new ArrayList<String>();
+        Collection<String> values = new ArrayList<>();
         values.add("TestValueString1");
         values.add("TestValueString2");
         AzureLogAnalyticsProvenanceReportingTask.addField(builder, factory, "TestKeyString", values, true);

File: nifi-extension-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-restapi-processors/src/main/java/org/apache/nifi/processors/elasticsearch/ConsumeElasticsearch.java
Patch:
@@ -279,7 +279,7 @@ public void addQueryClause(final Map<String, Object> query, final Map<String, St
                 filters.addAll(mapper.convertValue(additionalFilters, new TypeReference<List<Map<String, Object>>>() {
                 }));
             } else {
-                filters.add(mapper.convertValue(additionalFilters, new TypeReference<Map<String, Object>>() {
+                filters.add(mapper.convertValue(additionalFilters, new TypeReference<>() {
                 }));
             }
         }

File: nifi-extension-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-restapi-processors/src/test/java/org/apache/nifi/processors/elasticsearch/AbstractJsonQueryElasticsearchTest.java
Patch:
@@ -586,7 +586,8 @@ void setQuery(final TestRunner runner, final String query) throws JsonProcessing
         }
 
         if (QueryDefinitionType.BUILD_QUERY.getValue().equals(runner.getProcessContext().getProperty(ElasticsearchRestProcessor.QUERY_DEFINITION_STYLE).getValue())) {
-            final Map<String, Object> queryMap = TEST_MAPPER.readValue(query, new TypeReference<Map<String, Object>>() { });
+            final Map<String, Object> queryMap = TEST_MAPPER.readValue(query, new TypeReference<>() {
+            });
             if (queryMap.containsKey("query")) {
                 if (runner.getProcessor() instanceof ConsumeElasticsearch) {
                     runner.setProperty(ConsumeElasticsearch.RANGE_FIELD, RANGE_FIELD_NAME);

File: nifi-extension-bundles/nifi-extension-utils/nifi-bin-manager/src/main/java/org/apache/nifi/processor/util/bin/BinProcessingResult.java
Patch:
@@ -38,7 +38,7 @@ public class BinProcessingResult {
 
     public BinProcessingResult(boolean isCommitted) {
         this.setCommitted(isCommitted);
-        this.setAttributes(new HashMap<String, String>());
+        this.setAttributes(new HashMap<>());
     }
 
     public BinProcessingResult(boolean isCommitted, Map<String, String> attributes) {

File: nifi-extension-bundles/nifi-extension-utils/nifi-event-listen/src/main/java/org/apache/nifi/processor/util/listen/AbstractListenEventBatchingProcessor.java
Patch:
@@ -174,7 +174,7 @@ protected Map<String, FlowFileEventBatch> getBatches(final ProcessSession sessio
 
             // if we don't have a batch for this key then create a new one
             if (batch == null) {
-                batch = new FlowFileEventBatch(session.create(), new ArrayList<E>());
+                batch = new FlowFileEventBatch(session.create(), new ArrayList<>());
                 batches.put(batchKey, batch);
             }
 

File: nifi-extension-bundles/nifi-extension-utils/nifi-file-transfer/src/main/java/org/apache/nifi/processor/util/file/transfer/GetFileTransfer.java
Patch:
@@ -72,7 +72,7 @@ public abstract class GetFileTransfer extends AbstractProcessor {
     private final AtomicLong lastPollTime = new AtomicLong(-1L);
     private final Lock listingLock = new ReentrantLock();
     private final AtomicReference<BlockingQueue<FileInfo>> fileQueueRef = new AtomicReference<>();
-    private final Set<FileInfo> processing = Collections.synchronizedSet(new HashSet<FileInfo>());
+    private final Set<FileInfo> processing = Collections.synchronizedSet(new HashSet<>());
 
     // Used when transferring filenames from the File Queue to the processing queue; multiple threads can do this
     // simultaneously using the sharableTransferLock; however, in order to check if either has a given file, the
@@ -288,7 +288,7 @@ private void fetchListing(final ProcessContext context, final ProcessSession ses
         BlockingQueue<FileInfo> queue = fileQueueRef.get();
         if (queue == null) {
             final boolean useNaturalOrdering = context.getProperty(FileTransfer.USE_NATURAL_ORDERING).asBoolean();
-            queue = useNaturalOrdering ? new PriorityBlockingQueue<FileInfo>(25000) : new LinkedBlockingQueue<FileInfo>(25000);
+            queue = useNaturalOrdering ? new PriorityBlockingQueue<>(25000) : new LinkedBlockingQueue<>(25000);
             fileQueueRef.set(queue);
         }
 

File: nifi-extension-bundles/nifi-extension-utils/nifi-hadoop-utils/src/main/java/org/apache/nifi/processors/hadoop/CompressionType.java
Patch:
@@ -66,7 +66,7 @@ public String toString() {
     }
 
     public static AllowableValue[] allowableValues() {
-        List<AllowableValue> values = new ArrayList<AllowableValue>();
+        List<AllowableValue> values = new ArrayList<>();
         for (CompressionType type : CompressionType.values()) {
             values.add(new AllowableValue(type.name(), type.name(), type.getDescription()));
         }

File: nifi-extension-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/bigquery/AbstractBigQueryProcessor.java
Patch:
@@ -151,7 +151,7 @@ public List<ConfigVerificationResult> verify(final ProcessContext context, final
 
     @Override
     protected final Collection<ValidationResult> customValidate(ValidationContext validationContext) {
-        final Collection<ValidationResult> results = new ArrayList<ValidationResult>(super.customValidate(validationContext));
+        final Collection<ValidationResult> results = new ArrayList<>(super.customValidate(validationContext));
         ProxyConfiguration.validateProxySpec(validationContext, results, ProxyAwareTransportFactory.PROXY_SPECS);
 
         final boolean projectId = validationContext.getProperty(PROJECT_ID).isSet();

File: nifi-extension-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/credentials/factory/CredentialsFactory.java
Patch:
@@ -45,7 +45,7 @@
  */
 public class CredentialsFactory {
 
-    private final List<CredentialsStrategy> strategies = new ArrayList<CredentialsStrategy>();
+    private final List<CredentialsStrategy> strategies = new ArrayList<>();
 
     public CredentialsFactory() {
         // Primary Credential Strategies
@@ -78,7 +78,7 @@ public CredentialsStrategy selectPrimaryStrategy(final ValidationContext validat
      */
     public Collection<ValidationResult> validate(final ValidationContext validationContext) {
         final CredentialsStrategy selectedStrategy = selectPrimaryStrategy(validationContext);
-        final ArrayList<ValidationResult> validationFailureResults = new ArrayList<ValidationResult>();
+        final ArrayList<ValidationResult> validationFailureResults = new ArrayList<>();
 
         for (CredentialsStrategy strategy : strategies) {
             final Collection<ValidationResult> strategyValidationFailures = strategy.validate(validationContext,

File: nifi-extension-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/credentials/factory/strategies/AbstractBooleanCredentialsStrategy.java
Patch:
@@ -54,7 +54,7 @@ public Collection<ValidationResult> validate(final ValidationContext validationC
         Boolean useStrategy = validationContext.getProperty(strategyProperty).asBoolean();
         if (!thisIsSelectedStrategy && (useStrategy == null ? false : useStrategy)) {
             String failureFormat = "property %1$s cannot be used with %2$s";
-            Collection<ValidationResult> validationFailureResults = new ArrayList<ValidationResult>();
+            Collection<ValidationResult> validationFailureResults = new ArrayList<>();
             String message = String.format(failureFormat, strategyProperty.getDisplayName(),
                     primaryStrategy.getName());
             validationFailureResults.add(new ValidationResult.Builder()

File: nifi-extension-bundles/nifi-graph-bundle/nifi-graph-processors/src/test/java/org/apache/nifi/processors/graph/util/InMemoryGraphClient.java
Patch:
@@ -94,7 +94,7 @@ public Map<String, String> executeQuery(String query, Map<String, Object> parame
                             Map.Entry<String, Object> tempResult = (Map.Entry<String, Object>) resultSet.next();
                             Map<String, Object> tempRetObject = new HashMap<>();
                             tempRetObject.put(tempResult.getKey(), tempResult.getValue());
-                            SimpleEntry returnObject = new SimpleEntry<String, Object>(tempResult.getKey(), tempRetObject);
+                            SimpleEntry<String, Object> returnObject = new SimpleEntry<>(tempResult.getKey(), tempRetObject);
                             Map<String, Object> resultReturnMap = new HashMap<>();
                             resultReturnMap.put(innerResultSet.getKey(), returnObject);
                             if (getLogger().isDebugEnabled()) {

File: nifi-extension-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/test/java/org/apache/nifi/processors/hadoop/TestGetHDFSFileInfo.java
Patch:
@@ -172,7 +172,7 @@ public void testValidELFunction() throws InterruptedException {
         runner.setProperty(GetHDFSFileInfo.IGNORE_DOTTED_DIRS, "true");
         runner.setProperty(GetHDFSFileInfo.IGNORE_DOTTED_FILES, "true");
         runner.setProperty(GetHDFSFileInfo.DESTINATION, GetHDFSFileInfo.DESTINATION_CONTENT);
-        runner.enqueue("foo", new HashMap<String, String>());
+        runner.enqueue("foo", new HashMap<>());
 
         runner.run();
 

File: nifi-extension-bundles/nifi-hl7-bundle/nifi-hl7-processors/src/main/java/org/apache/nifi/processors/hl7/ExtractHL7Attributes.java
Patch:
@@ -242,7 +242,7 @@ public static Map<String, String> getAttributes(final Group group, final boolean
 
     private static Map<String, Segment> getAllSegments(final Group group) throws HL7Exception {
         final Map<String, Segment> segments = new TreeMap<>();
-        addSegments(group, segments, new HashMap<String, Integer>());
+        addSegments(group, segments, new HashMap<>());
         return Collections.unmodifiableMap(segments);
     }
 

File: nifi-extension-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JMSConnectionFactoryHandler.java
Patch:
@@ -133,7 +133,7 @@ void setConnectionFactoryProperties(ConnectionFactory connectionFactory) {
             } else {
                 String[] brokerList = brokerValue.split(",");
                 if (connectionFactoryValue.startsWith("com.ibm.mq.jms")) {
-                    List<String> ibmConList = new ArrayList<String>();
+                    List<String> ibmConList = new ArrayList<>();
                     for (String broker : brokerList) {
                         String[] hostPort = broker.split(":");
                         if (hostPort.length == 2) {

File: nifi-extension-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/processors/ConsumeJMSIT.java
Patch:
@@ -376,7 +376,7 @@ protected void rendezvousWithJms(ProcessContext context, ProcessSession processS
 
             ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("validateNIFI7034://127.0.0.1:" + port);
             final String destinationName = "nifi7034";
-            final AtomicReference<TcpTransport> tcpTransport = new AtomicReference<TcpTransport>();
+            final AtomicReference<TcpTransport> tcpTransport = new AtomicReference<>();
             TcpTransportFactory.registerTransportFactory("validateNIFI7034", new TcpTransportFactory() {
                 @Override
                 protected TcpTransport createTcpTransport(WireFormat wf, SocketFactory socketFactory, URI location, URI localLocation) throws UnknownHostException, IOException {

File: nifi-extension-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/processors/PublishJMSIT.java
Patch:
@@ -53,7 +53,6 @@
 import java.io.IOException;
 import java.lang.reflect.Proxy;
 import java.net.URI;
-import java.net.UnknownHostException;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -392,10 +391,10 @@ protected void rendezvousWithJms(ProcessContext context, ProcessSession processS
 
             ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("validateNIFI7034://127.0.0.1:" + port);
             final String destinationName = "nifi7034";
-            final AtomicReference<TcpTransport> tcpTransport = new AtomicReference<TcpTransport>();
+            final AtomicReference<TcpTransport> tcpTransport = new AtomicReference<>();
             TcpTransportFactory.registerTransportFactory("validateNIFI7034", new TcpTransportFactory() {
                 @Override
-                protected TcpTransport createTcpTransport(WireFormat wf, SocketFactory socketFactory, URI location, URI localLocation) throws UnknownHostException, IOException {
+                protected TcpTransport createTcpTransport(WireFormat wf, SocketFactory socketFactory, URI location, URI localLocation) throws IOException {
                     TcpTransport transport = super.createTcpTransport(wf, socketFactory, location, localLocation);
                     tcpTransport.set(transport);
                     return transport;

File: nifi-extension-bundles/nifi-jolt-bundle/nifi-jolt-transform-json-ui/src/main/java/org/apache/nifi/web/standard/api/transformjson/TransformJSONResource.java
Patch:
@@ -54,7 +54,7 @@ protected Object getSpecificationJsonObject(JoltSpecificationDTO specificationDT
 
             if (evaluateAttributes) {
                 PreparedQuery preparedQuery = Query.prepare(specificationDTO.getSpecification());
-                Map<String, String> attributes = specificationDTO.getExpressionLanguageAttributes() == null ? Collections.unmodifiableMap(new HashMap<String, String>())
+                Map<String, String> attributes = specificationDTO.getExpressionLanguageAttributes() == null ? Collections.unmodifiableMap(new HashMap<>())
                         : specificationDTO.getExpressionLanguageAttributes();
                 specification = preparedQuery.evaluateExpressions(new StandardEvaluationContext(attributes), null);
             } else {

File: nifi-extension-bundles/nifi-mongodb-bundle/nifi-mongodb-processors/src/test/java/org/apache/nifi/processors/mongodb/gridfs/FetchGridFSIT.java
Patch:
@@ -134,9 +134,7 @@ public void testQueryAttribute() {
 
         runner.clearTransferState();
 
-        id = writeTestFile(fileName, content, BUCKET, new HashMap<String, Object>() {{
-            put("lookupKey", "xyz");
-        }});
+        id = writeTestFile(fileName, content, BUCKET, Map.of("lookupKey", "xyz"));
         assertNotNull(id);
 
         String query = "{ \"metadata\": { \"lookupKey\": \"xyz\" }}";

File: nifi-extension-bundles/nifi-site-to-site-reporting-bundle/nifi-site-to-site-reporting-task/src/main/java/org/apache/nifi/reporting/SiteToSiteStatusReportingTask.java
Patch:
@@ -122,7 +122,7 @@ public void onTrigger(final ReportingContext context) {
         componentNameFilter = Pattern.compile(context.getProperty(COMPONENT_NAME_FILTER_REGEX).evaluateAttributeExpressions().getValue());
 
         // initialize the map
-        processGroupIDToPath = new HashMap<String, String>();
+        processGroupIDToPath = new HashMap<>();
 
         final ProcessGroupStatus procGroupStatus = context.getEventAccess().getControllerStatus();
         final String rootGroupName = procGroupStatus == null ? null : procGroupStatus.getName();

File: nifi-extension-bundles/nifi-slack-bundle/nifi-slack-processors/src/test/java/org/apache/nifi/processors/slack/TestConsumeSlack.java
Patch:
@@ -583,7 +583,7 @@ public void addUserMapping(final String userId, final String username) {
 
         @Override
         public Map<String, String> fetchChannelIds() {
-            final Map<String, String> nameIdMapping = new HashMap<String, String>();
+            final Map<String, String> nameIdMapping = new HashMap<>();
             nameIdMapping.put("#cname1", "cid1");
             nameIdMapping.put("#cname2", "cid2");
             return nameIdMapping;

File: nifi-extension-bundles/nifi-smb-bundle/nifi-smb-processors/src/main/java/org/apache/nifi/processors/smb/GetSmbFile.java
Patch:
@@ -241,7 +241,7 @@ public class GetSmbFile extends AbstractProcessor {
 
     @Override
     protected void init(final ProcessorInitializationContext context) {
-        final List<PropertyDescriptor> descriptors = new ArrayList<PropertyDescriptor>();
+        final List<PropertyDescriptor> descriptors = new ArrayList<>();
         descriptors.add(HOSTNAME);
         descriptors.add(SHARE);
         descriptors.add(DIRECTORY);
@@ -262,7 +262,7 @@ protected void init(final ProcessorInitializationContext context) {
         descriptors.add(TIMEOUT);
         this.descriptors = Collections.unmodifiableList(descriptors);
 
-        final Set<Relationship> relationships = new HashSet<Relationship>();
+        final Set<Relationship> relationships = new HashSet<>();
         relationships.add(REL_SUCCESS);
         this.relationships = Collections.unmodifiableSet(relationships);
     }

File: nifi-extension-bundles/nifi-snmp-bundle/nifi-snmp-processors/src/main/java/org/apache/nifi/snmp/utils/UsmJsonParser.java
Patch:
@@ -41,7 +41,7 @@ private UsmJsonParser() {
     }
 
     static List<UsmUser> parse(final String json) throws JsonProcessingException {
-        return MAPPER.readValue(json, new TypeReference<List<UsmUser>>() {
+        return MAPPER.readValue(json, new TypeReference<>() {
         });
     }
 }

File: nifi-extension-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/GenerateFlowFile.java
Patch:
@@ -226,7 +226,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
         }
 
         Map<PropertyDescriptor, String> processorProperties = context.getProperties();
-        Map<String, String> generatedAttributes = new HashMap<String, String>();
+        Map<String, String> generatedAttributes = new HashMap<>();
         for (final Map.Entry<PropertyDescriptor, String> entry : processorProperties.entrySet()) {
             PropertyDescriptor property = entry.getKey();
             if (property.isDynamic() && property.isExpressionLanguageSupported()) {

File: nifi-extension-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/GetFileResource.java
Patch:
@@ -122,7 +122,7 @@ public Set<Relationship> getRelationships() {
     @Override
     public void onTrigger(final ProcessContext context, final ProcessSession session) {
         final Map<PropertyDescriptor, String> processorProperties = context.getProperties();
-        final Map<String, String> generatedAttributes = new HashMap<String, String>();
+        final Map<String, String> generatedAttributes = new HashMap<>();
         for (final Map.Entry<PropertyDescriptor, String> entry : processorProperties.entrySet()) {
             final PropertyDescriptor property = entry.getKey();
             if (property.isDynamic()) {

File: nifi-extension-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ListFile.java
Patch:
@@ -528,7 +528,7 @@ private List<FileInfo> performListing(final ProcessContext context, final Long m
 
         int maxDepth = recurse ? Integer.MAX_VALUE : 1;
 
-        final BiPredicate<Path, BasicFileAttributes> matcher = new BiPredicate<Path, BasicFileAttributes>() {
+        final BiPredicate<Path, BasicFileAttributes> matcher = new BiPredicate<>() {
             private long lastTimestamp = System.currentTimeMillis();
 
             @Override
@@ -579,7 +579,7 @@ public boolean test(final Path path, final BasicFileAttributes attributes) {
             final long start = System.currentTimeMillis();
             final List<FileInfo> result = new LinkedList<>();
 
-            Files.walkFileTree(basePath, Set.of(FileVisitOption.FOLLOW_LINKS), maxDepth, new FileVisitor<Path>() {
+            Files.walkFileTree(basePath, Set.of(FileVisitOption.FOLLOW_LINKS), maxDepth, new FileVisitor<>() {
                 @Override
                 public FileVisitResult preVisitDirectory(final Path dir, final BasicFileAttributes attributes) {
                     if (Files.isReadable(dir)) {
@@ -841,7 +841,7 @@ public RollingMetricPerformanceTracker(final ComponentLog logger, final long max
             this.logger = logger;
             this.maxDiskOperationMillis = maxDiskOperationMillis;
 
-            directoryToTimingInfo = new LinkedHashMap<Tuple<String, String>, TimingInfo>() {
+            directoryToTimingInfo = new LinkedHashMap<>() {
                 @Override
                 protected boolean removeEldestEntry(final Map.Entry<Tuple<String, String>, TimingInfo> eldest) {
                     return size() > maxEntries;

File: nifi-extension-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ListenTCP.java
Patch:
@@ -285,7 +285,7 @@ private String getMessageDemarcator(final ProcessContext context) {
 
     private EventBatcher<ByteArrayMessage> getEventBatcher() {
         if (eventBatcher == null) {
-            eventBatcher = new EventBatcher<ByteArrayMessage>(getLogger(), events, errorEvents) {
+            eventBatcher = new EventBatcher<>(getLogger(), events, errorEvents) {
                 @Override
                 protected String getBatchKey(ByteArrayMessage event) {
                     return event.getSender();

File: nifi-extension-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/sql/DefaultAvroSqlWriter.java
Patch:
@@ -35,7 +35,7 @@ public class DefaultAvroSqlWriter implements SqlWriter {
 
     private final AvroConversionOptions options;
 
-    private final Map<String, String> attributesToAdd = new HashMap<String, String>() {{
+    private final Map<String, String> attributesToAdd = new HashMap<>() {{
         put(CoreAttributes.MIME_TYPE.key(), JdbcCommon.MIME_TYPE_AVRO_BINARY);
     }};
 

File: nifi-extension-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestDebugFlow.java
Patch:
@@ -50,7 +50,7 @@ public void setup() throws IOException {
             String filename = "testFile" + (n + 1) + ".txt";
             String content = "Hello World " + (n + 1) + "!";
             contents.put(n, content);
-            attribs.put(n, new HashMap<String, String>());
+            attribs.put(n, new HashMap<>());
             attribs.get(n).put(CoreAttributes.FILENAME.key(), filename);
             attribs.get(n).put(CoreAttributes.UUID.key(), "TESTING-FILE-" + (n + 1) + "-TESTING");
             namesToContent.put(filename, content);

File: nifi-extension-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestForkRecord.java
Patch:
@@ -298,7 +298,7 @@ public void testForkExtractComplexWithoutParentFields() throws IOException, Malf
         fields.add(new RecordField("accounts", accountsType));
         final RecordSchema schema = new SimpleRecordSchema(fields);
 
-        final List<RecordField> fieldsWrite = new ArrayList<RecordField>();
+        final List<RecordField> fieldsWrite = new ArrayList<>();
         fieldsWrite.add(new RecordField("id", RecordFieldType.INT.getDataType()));
         fieldsWrite.add(new RecordField("amount", RecordFieldType.DOUBLE.getDataType()));
         final RecordSchema schemaWrite = new SimpleRecordSchema(fieldsWrite);

File: nifi-extension-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestPutFile.java
Patch:
@@ -315,7 +315,7 @@ public void testPutFile() throws IOException {
 
 
     private void emptyTestDirectory() throws IOException {
-        Files.walkFileTree(Paths.get("target/test/data/out/PutFile"), new FileVisitor<Path>() {
+        Files.walkFileTree(Paths.get("target/test/data/out/PutFile"), new FileVisitor<>() {
 
             @Override
             public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {

File: nifi-extension-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestUpdateCounter.java
Patch:
@@ -33,7 +33,7 @@ public void testwithFileName() {
         final TestRunner firstrunner = TestRunners.newTestRunner(new UpdateCounter());
         firstrunner.setProperty(UpdateCounter.COUNTER_NAME, "firewall");
         firstrunner.setProperty(UpdateCounter.DELTA, "1");
-        Map<String, String> attributes = new HashMap<String, String>();
+        Map<String, String> attributes = new HashMap<>();
         firstrunner.enqueue("", attributes);
         firstrunner.run();
         firstrunner.assertAllFlowFilesTransferred(UpdateCounter.SUCCESS, 1);

File: nifi-extension-bundles/nifi-standard-services/nifi-distributed-cache-services-bundle/nifi-distributed-cache-server/src/main/java/org/apache/nifi/distributed/cache/server/set/PersistentSetCache.java
Patch:
@@ -170,7 +170,7 @@ public SetRecord deserializeEdit(final DataInputStream in, final Map<Object, Set
 
         @Override
         public SetRecord deserializeRecord(DataInputStream in, int version) throws IOException {
-            return deserializeEdit(in, new HashMap<Object, SetRecord>(), version);
+            return deserializeEdit(in, new HashMap<>(), version);
         }
 
         @Override

File: nifi-extension-bundles/nifi-standard-services/nifi-lookup-services-bundle/nifi-lookup-services/src/test/java/org/apache/nifi/lookup/TestDistributedMapCacheLookupService.java
Patch:
@@ -64,7 +64,7 @@ public void testDistributedMapCacheLookupService() throws InitializationExceptio
 
     static final class EphemeralMapCacheClientService extends AbstractControllerService implements DistributedMapCacheClient {
 
-        private Map<String, String> map = new HashMap<String, String>();
+        private Map<String, String> map = new HashMap<>();
 
         @OnEnabled
         public void onEnabled(final ConfigurationContext context) {

File: nifi-extension-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/avro/EmbeddedAvroSchemaAccessStrategy.java
Patch:
@@ -37,7 +37,7 @@ public class EmbeddedAvroSchemaAccessStrategy implements SchemaAccessStrategy {
 
     @Override
     public RecordSchema getSchema(Map<String, String> variables, final InputStream contentStream, final RecordSchema readSchema) throws SchemaNotFoundException, IOException {
-        final DataFileStream<GenericRecord> dataFileStream = new DataFileStream<>(contentStream, new GenericDatumReader<GenericRecord>());
+        final DataFileStream<GenericRecord> dataFileStream = new DataFileStream<>(contentStream, new GenericDatumReader<>());
         final Schema avroSchema = dataFileStream.getSchema();
         final RecordSchema recordSchema = AvroTypeUtil.createSchema(avroSchema);
         return recordSchema;

File: nifi-extension-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/test/java/org/apache/nifi/xml/TestXMLReaderProcessor.java
Patch:
@@ -33,7 +33,6 @@
 import java.io.InputStream;
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
 
@@ -88,6 +87,6 @@ protected List<PropertyDescriptor> getSupportedPropertyDescriptors() {
 
     @Override
     public Set<Relationship> getRelationships() {
-        return new HashSet<Relationship>() {{ add(SUCCESS); }};
+        return Set.of(SUCCESS);
     }
 }

File: nifi-extension-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/test/java/org/apache/nifi/xml/TestXMLRecordSetWriterProcessor.java
Patch:
@@ -37,7 +37,6 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
-import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -90,12 +89,12 @@ public void onTrigger(ProcessContext context, ProcessSession session) throws Pro
 
     @Override
     protected List<PropertyDescriptor> getSupportedPropertyDescriptors() {
-        return new ArrayList<PropertyDescriptor>() {{ add(XML_WRITER); add(MULTIPLE_RECORDS); }};
+        return List.of(XML_WRITER, MULTIPLE_RECORDS);
     }
 
     @Override
     public Set<Relationship> getRelationships() {
-        return new HashSet<Relationship>() {{ add(SUCCESS); }};
+        return Set.of(SUCCESS);
     }
 
     protected static RecordSet getRecordSet(boolean multipleRecords) {

File: nifi-framework-bundle/nifi-framework-extensions/nifi-provenance-repository-bundle/nifi-persistent-provenance-repository/src/main/java/org/apache/nifi/provenance/IndexConfiguration.java
Patch:
@@ -269,7 +269,7 @@ public List<File> getIndexDirectories(final File provenanceLogFile) {
         try {
             final List<File> indices = indexDirectoryMap.get(provenanceLogFile.getParentFile());
             if (indices == null) {
-                return Collections.<File>emptyList();
+                return Collections.emptyList();
             }
 
             final List<File> sortedIndexDirectories = new ArrayList<>(indices);

File: nifi-framework-bundle/nifi-framework/nifi-framework-authorization-providers/src/main/java/org/apache/nifi/authorization/StandardAuthorizerConfigurationContext.java
Patch:
@@ -34,7 +34,7 @@ public class StandardAuthorizerConfigurationContext implements AuthorizerConfigu
 
     public StandardAuthorizerConfigurationContext(String identifier, Map<String, String> properties) {
         this.identifier = identifier;
-        this.properties = Collections.unmodifiableMap(new HashMap<String, String>(properties));
+        this.properties = Collections.unmodifiableMap(new HashMap<>(properties));
     }
 
     @Override

File: nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/CountersEndpointMerger.java
Patch:
@@ -49,7 +49,7 @@ protected CountersDTO getDto(CountersEntity entity) {
     @Override
     protected void mergeResponses(CountersDTO clientDto, Map<NodeIdentifier, CountersDTO> dtoMap, NodeIdentifier selectedNodeId) {
         final CountersDTO mergedCounters = clientDto;
-        mergedCounters.setNodeSnapshots(new ArrayList<NodeCountersSnapshotDTO>());
+        mergedCounters.setNodeSnapshots(new ArrayList<>());
 
         final NodeCountersSnapshotDTO selectedNodeSnapshot = new NodeCountersSnapshotDTO();
         selectedNodeSnapshot.setSnapshot(clientDto.getAggregateSnapshot().clone());

File: nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/SystemDiagnosticsEndpointMerger.java
Patch:
@@ -49,7 +49,7 @@ protected SystemDiagnosticsDTO getDto(SystemDiagnosticsEntity entity) {
     @Override
     protected void mergeResponses(SystemDiagnosticsDTO clientDto, Map<NodeIdentifier, SystemDiagnosticsDTO> dtoMap, NodeIdentifier selectedNodeId) {
         final SystemDiagnosticsDTO mergedSystemDiagnostics = clientDto;
-        mergedSystemDiagnostics.setNodeSnapshots(new ArrayList<NodeSystemDiagnosticsSnapshotDTO>());
+        mergedSystemDiagnostics.setNodeSnapshots(new ArrayList<>());
 
         final NodeSystemDiagnosticsSnapshotDTO selectedNodeSnapshot = new NodeSystemDiagnosticsSnapshotDTO();
         selectedNodeSnapshot.setSnapshot(clientDto.getAggregateSnapshot().clone());

File: nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/controller/StandardProcessorNode.java
Patch:
@@ -213,7 +213,7 @@ public StandardProcessorNode(final LoggableComponent<Processor> processor, final
         yieldExpiration = new AtomicLong(0L);
         concurrentTaskCount = new AtomicInteger(1);
         position = new AtomicReference<>(new Position(0D, 0D));
-        style = new AtomicReference<>(Collections.unmodifiableMap(new HashMap<String, String>()));
+        style = new AtomicReference<>(Map.of());
         this.processGroup = new AtomicReference<>();
         processScheduler = scheduler;
         penalizationPeriod = new AtomicReference<>(DEFAULT_PENALIZATION_PERIOD);

File: nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/controller/repository/StandardProcessSession.java
Patch:
@@ -984,13 +984,13 @@ protected void updateProvenanceRepo(final Checkpoint checkpoint) {
 
         final long commitNanos = System.nanoTime();
         final List<ProvenanceEventRecord> autoTermEvents = checkpoint.autoTerminatedEvents;
-        final Iterable<ProvenanceEventRecord> iterable = new Iterable<ProvenanceEventRecord>() {
+        final Iterable<ProvenanceEventRecord> iterable = new Iterable<>() {
             final Iterator<ProvenanceEventRecord> recordsToSubmitIterator = recordsToSubmit.iterator();
             final Iterator<ProvenanceEventRecord> autoTermIterator = autoTermEvents == null ? null : autoTermEvents.iterator();
 
             @Override
             public Iterator<ProvenanceEventRecord> iterator() {
-                return new Iterator<ProvenanceEventRecord>() {
+                return new Iterator<>() {
                     @Override
                     public boolean hasNext() {
                         return recordsToSubmitIterator.hasNext() || autoTermIterator != null && autoTermIterator.hasNext();

File: nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/events/VolatileBulletinRepository.java
Patch:
@@ -200,7 +200,7 @@ public List<Bulletin> findBulletinsForGroupBySource(final String groupId, final
 
         final ConcurrentMap<String, RingBuffer<Bulletin>> componentMap = bulletinStoreMap.get(groupId);
         if (componentMap == null) {
-            return Collections.<Bulletin>emptyList();
+            return Collections.emptyList();
         }
 
         final List<Bulletin> allComponentBulletins = new ArrayList<>();

File: nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/util/ReflectionUtils.java
Patch:
@@ -190,7 +190,7 @@ public static List<Method> findMethodsWithAnnotations(final Class<?> clazz, fina
 
     private static List<Method> discoverMethodsWithAnnotations(final Class<?> clazz, final Class<? extends Annotation>[] annotations) {
         // Consider two methods equal if they have the same name and same parameter types.
-        final Comparator<Method> comparator = Comparator.comparing(Method::getName).thenComparing(new Comparator<Method>() {
+        final Comparator<Method> comparator = Comparator.comparing(Method::getName).thenComparing(new Comparator<>() {
             @Override
             public int compare(final Method o1, final Method o2) {
                 return createString(o1.getParameterTypes()).compareTo(createString(o2.getParameterTypes()));

File: nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/queue/clustered/client/async/nio/TestPeerChannel.java
Patch:
@@ -162,7 +162,7 @@ private void assertWriteReadSuccess(final String enabledProtocol) throws IOExcep
 
     private int read(final PeerChannel peerChannel) throws IOException {
         OptionalInt read = peerChannel.read();
-        while (!read.isPresent()) {
+        while (read.isEmpty()) {
             try {
                 TimeUnit.MILLISECONDS.sleep(READ_SLEEP_INTERVAL);
             } catch (InterruptedException e) {
@@ -223,7 +223,7 @@ private Channel startServer(final EventLoopGroup group, final int port, final St
         final ServerBootstrap bootstrap = new ServerBootstrap();
         bootstrap.group(group);
         bootstrap.channel(NioServerSocketChannel.class);
-        bootstrap.childHandler(new ChannelInitializer<Channel>() {
+        bootstrap.childHandler(new ChannelInitializer<>() {
             @Override
             protected void initChannel(final Channel channel) {
                 final ChannelPipeline pipeline = channel.pipeline();

File: nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/persistence/TestFlowConfigurationArchiveManager.java
Patch:
@@ -54,7 +54,7 @@ public void before() throws Exception {
 
         // Clean up old files.
         if (Files.isDirectory(archiveDir.toPath())) {
-            Files.walkFileTree(archiveDir.toPath(), new SimpleFileVisitor<Path>() {
+            Files.walkFileTree(archiveDir.toPath(), new SimpleFileVisitor<>() {
                 @Override
                 public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                     Files.delete(file);

File: nifi-framework-bundle/nifi-framework/nifi-framework-status-history-shared/src/main/java/org/apache/nifi/controller/status/history/NodeStatusDescriptor.java
Patch:
@@ -40,7 +40,7 @@ public enum NodeStatusDescriptor {
             "The percentage of available heap currently used by the Java virtual machine.",
             MetricDescriptor.Formatter.COUNT,
             s -> s.getHeapUtilization(),
-            new ValueReducer<StatusSnapshot, Long>() {
+            new ValueReducer<>() {
                 @Override
                 public Long reduce(final List<StatusSnapshot> values) {
                     return (long) values.stream()
@@ -75,7 +75,7 @@ public Long reduce(final List<StatusSnapshot> values) {
             "The processor load. Every measurement point represents the system load average for the last minute.",
             MetricDescriptor.Formatter.FRACTION,
             s -> Double.valueOf(s.getProcessorLoadAverage() * MetricDescriptor.FRACTION_MULTIPLIER).longValue(),
-            new ValueReducer<StatusSnapshot, Long>() {
+            new ValueReducer<>() {
                 @Override
                 public Long reduce(final List<StatusSnapshot> values) {
                     return (long) values.stream()

File: nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/audit/RemoteProcessGroupAuditor.java
Patch:
@@ -68,9 +68,9 @@ public class RemoteProcessGroupAuditor extends NiFiAuditor {
     private static final List<ConfigurationRecorder<RemoteProcessGroup, RemoteProcessGroupDTO>> CONFIG_RECORDERS = Arrays.asList(
             new ConfigurationRecorder<RemoteProcessGroup, RemoteProcessGroupDTO>("Communications Timeout",
                     dto -> dto.getCommunicationsTimeout() != null, RemoteProcessGroup::getCommunicationsTimeout),
-            new ConfigurationRecorder<RemoteProcessGroup, RemoteProcessGroupDTO>("Yield Duration",
+            new ConfigurationRecorder<>("Yield Duration",
                     dto -> dto.getYieldDuration() != null, RemoteProcessGroup::getYieldDuration),
-            new ConfigurationRecorder<RemoteProcessGroup, RemoteProcessGroupDTO>("Transport Protocol",
+            new ConfigurationRecorder<>("Transport Protocol",
                     IS_TRANSPORT_PROTOCOL_SET, rpg -> rpg.getTransportProtocol().name()),
             new ConfigurationRecorder<>("Proxy Host",
                     IS_TRANSPORT_PROTOCOL_SET, RemoteProcessGroup::getProxyHost),

File: nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java
Patch:
@@ -1958,8 +1958,8 @@ public int compare(final PropertyDescriptor o1, final PropertyDescriptor o2) {
 
        // build the descriptor and property dtos
        dto.setGroupId(processGroupId);
-       dto.setDescriptors(new LinkedHashMap<String, PropertyDescriptorDTO>());
-       dto.setProperties(new LinkedHashMap<String, String>());
+       dto.setDescriptors(new LinkedHashMap<>());
+       dto.setProperties(new LinkedHashMap<>());
        for (final Map.Entry<PropertyDescriptor, String> entry : orderedProperties.entrySet()) {
            final PropertyDescriptor descriptor = entry.getKey();
 

File: nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/util/LocalComponentLifecycle.java
Patch:
@@ -408,7 +408,7 @@ static List<List<ControllerServiceNode>> determineEnablingOrder(final Map<String
 
         for (final ControllerServiceNode node : serviceNodeMap.values()) {
             final List<ControllerServiceNode> branch = new ArrayList<>();
-            determineEnablingOrder(serviceNodeMap, node, branch, new HashSet<ControllerServiceNode>());
+            determineEnablingOrder(serviceNodeMap, node, branch, new HashSet<>());
             orderedNodeLists.add(branch);
         }
 

File: nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/web/api/TestFlowResource.java
Patch:
@@ -454,7 +454,8 @@ private List<CollectorRegistry> getCollectorRegistries() {
     }
 
     private Map<String, List<Sample>> convertJsonResponseToMap(final Response response) throws IOException {
-        final TypeReference<HashMap<String, List<Sample>>> typeReference = new TypeReference<HashMap<String, List<Sample>>>() { };
+        final TypeReference<HashMap<String, List<Sample>>> typeReference = new TypeReference<>() {
+        };
         final ObjectMapper mapper = new ObjectMapper();
         final SimpleModule module = new SimpleModule();
 

File: nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-optimistic-locking/src/test/java/org/apache/nifi/web/revision/TestNaiveRevisionManager.java
Patch:
@@ -33,7 +33,7 @@ public class TestNaiveRevisionManager {
     private static final NiFiUser USER_1 = new Builder().identity("user-1").build();
 
     private RevisionUpdate<Object> components(final Revision revision) {
-        return new StandardRevisionUpdate<Object>(null, new FlowModification(revision, null));
+        return new StandardRevisionUpdate<>(null, new FlowModification(revision, null));
     }
 
     private RevisionUpdate<Object> components(final Revision revision, final Revision... additionalRevisions) {
@@ -47,9 +47,9 @@ private RevisionUpdate<Object> components(final Revision revision, final Revisio
     private RevisionUpdate<Object> components(final Revision revision, final Set<Revision> additionalRevisions) {
         final Set<RevisionUpdate<Object>> components = new HashSet<>();
         for (final Revision rev : additionalRevisions) {
-            components.add(new StandardRevisionUpdate<Object>(null, new FlowModification(rev, null)));
+            components.add(new StandardRevisionUpdate<>(null, new FlowModification(rev, null)));
         }
-        return new StandardRevisionUpdate<Object>(null, new FlowModification(revision, null), additionalRevisions);
+        return new StandardRevisionUpdate<>(null, new FlowModification(revision, null), additionalRevisions);
     }
 
 }
\ No newline at end of file

File: nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/test/java/org/apache/nifi/web/security/x509/X509AuthenticationProviderTest.java
Patch:
@@ -132,7 +132,7 @@ public void testOneProxy() {
     @Test
     public void testAnonymousWithOneProxy() {
         // override the setting to enable anonymous authentication
-        final Map<String, String> additionalProperties = new HashMap<String, String>() {{
+        final Map<String, String> additionalProperties = new HashMap<>() {{
             put(NiFiProperties.SECURITY_ANONYMOUS_AUTHENTICATION, Boolean.TRUE.toString());
         }};
         final NiFiProperties properties = NiFiProperties.createBasicNiFiProperties(null, additionalProperties);

File: nifi-mock/src/main/java/org/apache/nifi/util/MockBulletinRepository.java
Patch:
@@ -46,7 +46,7 @@ public int getComponentBulletinCapacity() {
     @Override
     public List<Bulletin> findBulletins(BulletinQuery bulletinQuery) {
         // TODO: Implement
-        return new ArrayList<Bulletin>();
+        return new ArrayList<>();
     }
 
     @Override

File: nifi-mock/src/main/java/org/apache/nifi/util/MockPropertyValue.java
Patch:
@@ -267,7 +267,7 @@ public PropertyValue evaluateAttributeExpressions(FlowFile flowFile, Map<String,
         }
 
         if (additionalAttributes == null ) {
-            additionalAttributes = new HashMap<String, String>();
+            additionalAttributes = new HashMap<>();
         }
         // we need a new map here because additionalAttributes can be an unmodifiable map when it's the FlowFile attributes
         final Map<String, String> attAndEnvVarRegistry = new HashMap<>(additionalAttributes);

File: nifi-registry/nifi-registry-core/nifi-registry-framework/src/main/java/org/apache/nifi/registry/security/authorization/StandardAuthorizerConfigurationContext.java
Patch:
@@ -33,7 +33,7 @@ public class StandardAuthorizerConfigurationContext implements AuthorizerConfigu
 
     public StandardAuthorizerConfigurationContext(String identifier, Map<String, String> properties) {
         this.identifier = identifier;
-        this.properties = Collections.unmodifiableMap(new HashMap<String, String>(properties));
+        this.properties = Collections.unmodifiableMap(new HashMap<>(properties));
     }
 
     @Override

File: nifi-registry/nifi-registry-core/nifi-registry-framework/src/main/java/org/apache/nifi/registry/security/ldap/tenants/LdapUserGroupProvider.java
Patch:
@@ -480,7 +480,7 @@ private void load(final ContextSource contextSource) {
                 }
 
                 do {
-                    userList.addAll(ldapTemplate.search(userSearchBase, userFilter.encode(), userControls, new AbstractContextMapper<User>() {
+                    userList.addAll(ldapTemplate.search(userSearchBase, userFilter.encode(), userControls, new AbstractContextMapper<>() {
                         @Override
                         protected User doMapFromContext(DirContextOperations ctx) {
                             // get the user identity
@@ -554,7 +554,7 @@ protected User doMapFromContext(DirContextOperations ctx) {
                 }
 
                 do {
-                    groupList.addAll(ldapTemplate.search(groupSearchBase, groupFilter.encode(), groupControls, new AbstractContextMapper<Group>() {
+                    groupList.addAll(ldapTemplate.search(groupSearchBase, groupFilter.encode(), groupControls, new AbstractContextMapper<>() {
                         @Override
                         protected Group doMapFromContext(DirContextOperations ctx) {
                             // get the group identity

File: nifi-registry/nifi-registry-core/nifi-registry-framework/src/main/java/org/apache/nifi/registry/serialization/jackson/JacksonExtensionSerializer.java
Patch:
@@ -27,7 +27,8 @@ public class JacksonExtensionSerializer extends JacksonSerializer<Extension> {
 
     @Override
     TypeReference<SerializationContainer<Extension>> getDeserializeTypeRef() throws SerializationException {
-        return new TypeReference<SerializationContainer<Extension>>() { };
+        return new TypeReference<>() {
+        };
     }
 
 }

File: nifi-registry/nifi-registry-core/nifi-registry-framework/src/main/java/org/apache/nifi/registry/serialization/jackson/JacksonFlowContentSerializer.java
Patch:
@@ -27,6 +27,7 @@ public class JacksonFlowContentSerializer extends JacksonSerializer<FlowContent>
 
     @Override
     TypeReference<SerializationContainer<FlowContent>> getDeserializeTypeRef() throws SerializationException {
-        return new TypeReference<SerializationContainer<org.apache.nifi.registry.serialization.FlowContent>>() { };
+        return new TypeReference<>() {
+        };
     }
 }

File: nifi-registry/nifi-registry-core/nifi-registry-framework/src/main/java/org/apache/nifi/registry/serialization/jackson/JacksonSerializer.java
Patch:
@@ -110,7 +110,8 @@ public int readDataModelVersion(InputStream input) throws SerializationException
         logger.debug("headerObjectStr={}", headerObjectStr);
 
         try {
-            final TypeReference<HashMap<String, String>> typeRef = new TypeReference<HashMap<String, String>>() { };
+            final TypeReference<HashMap<String, String>> typeRef = new TypeReference<>() {
+            };
             final HashMap<String, String> header = objectMapper.readValue(headerObjectStr, typeRef);
             if (!header.containsKey(DATA_MODEL_VERSION)) {
                 throw new SerializationException("Missing " + DATA_MODEL_VERSION);

File: nifi-registry/nifi-registry-core/nifi-registry-framework/src/main/java/org/apache/nifi/registry/serialization/jackson/JacksonVersionedProcessGroupSerializer.java
Patch:
@@ -27,6 +27,7 @@ public class JacksonVersionedProcessGroupSerializer extends JacksonSerializer<Ve
 
     @Override
     TypeReference<SerializationContainer<VersionedProcessGroup>> getDeserializeTypeRef() throws SerializationException {
-        return new TypeReference<SerializationContainer<VersionedProcessGroup>>() { };
+        return new TypeReference<>() {
+        };
     }
 }

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/command/nifi/pg/PGChangeAllVersions.java
Patch:
@@ -79,7 +79,7 @@ public ProcessGroupsVersionChangeResult doExecute(final NiFiClient client, final
         }
 
         final PGList doPGList = new PGList();
-        final List<ProcessGroupDTO> pgList = new ArrayList<ProcessGroupDTO>();
+        final List<ProcessGroupDTO> pgList = new ArrayList<>();
         recursivePGList(pgList, doPGList, client, properties, parentPgId);
 
         final PGChangeVersion doPGChangeVersion = new PGChangeVersion();
@@ -91,7 +91,7 @@ public ProcessGroupsVersionChangeResult doExecute(final NiFiClient client, final
         final boolean forceOperation = properties.containsKey(CommandOption.FORCE.getLongName());
 
         final List<ProcessGroupDTO> processGroups = new ArrayList<>();
-        final Map<String, ChangeVersionResult> changeVersionResults = new HashMap<String, ChangeVersionResult>();
+        final Map<String, ChangeVersionResult> changeVersionResults = new HashMap<>();
 
         for (final ProcessGroupDTO pgDTO : pgList) {
             final VersionControlInformationEntity entity = client.getVersionsClient().getVersionControlInfo(pgDTO.getId());

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/command/nifi/pg/PGListProcessors.java
Patch:
@@ -67,8 +67,7 @@ public ProcessorsResult doExecute(final NiFiClient client, final Properties prop
 
         ProcessGroupFlowEntity entity = client.getFlowClient().getProcessGroup(pgId);
         final FlowDTO flow = entity.getProcessGroupFlow().getFlow();
-        final Set<ProcessorEntity> processors = new HashSet<ProcessorEntity>();
-        processors.addAll(getProcessors(client, flow, filter));
+        final Set<ProcessorEntity> processors = new HashSet<>(getProcessors(client, flow, filter));
 
         ProcessorsEntity processorsEntity = new ProcessorsEntity();
         processorsEntity.setProcessors(processors);
@@ -77,7 +76,7 @@ public ProcessorsResult doExecute(final NiFiClient client, final Properties prop
     }
 
     private Set<ProcessorEntity> getProcessors(final NiFiClient client, final FlowDTO flow, final String filter) throws NiFiClientException, IOException {
-        final Set<ProcessorEntity> processors = new HashSet<ProcessorEntity>();
+        final Set<ProcessorEntity> processors = new HashSet<>();
         for (ProcessGroupEntity pg : flow.getProcessGroups()) {
             processors.addAll(getProcessors(client, pg, filter));
         }

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/command/nifi/processors/ChangeVersionProcessor.java
Patch:
@@ -95,7 +95,7 @@ public ProcessorsResult doExecute(NiFiClient client, Properties properties)
     private Set<ProcessorEntity> recursivelyChangeVersionProcessor(FlowClient flowClient, ProcessorClient processorClient, String pgId, String bundleGroup,
             String bundleArtifact, String bundleVersion, String sourceVersion, String qualifiedName) throws NiFiClientException, IOException {
 
-        Set<ProcessorEntity> updatedComponents = new HashSet<ProcessorEntity>();
+        Set<ProcessorEntity> updatedComponents = new HashSet<>();
 
         final ProcessGroupFlowEntity sourcePgEntity = flowClient.getProcessGroup(pgId);
         final ProcessGroupFlowDTO flow = sourcePgEntity.getProcessGroupFlow();

File: nifi-toolkit/nifi-toolkit-cli/src/test/java/org/apache/nifi/toolkit/cli/impl/client/TestClientTimeout.java
Patch:
@@ -77,7 +77,7 @@ public void tearDown() {
 
     @Test
     public void testNiFiClientTimeoutSettings() {
-        testClientTimeoutSettings(new AbstractNiFiCommand<Result>("test", Result.class) {
+        testClientTimeoutSettings(new AbstractNiFiCommand<>("test", Result.class) {
             @Override
             public Result doExecute(NiFiClient client, Properties properties) {
                 return null;

File: nifi-extension-bundles/nifi-py4j-extension-bundle/nifi-py4j-integration-tests/src/test/java/org.apache.nifi.py4j/PythonControllerInteractionIT.java
Patch:
@@ -160,6 +160,7 @@ public void testGetProcessorDetails() {
             .orElseThrow(() -> new RuntimeException("Could not find ConvertCsvToExcel"));
 
         assertEquals("0.0.1-SNAPSHOT", convertCsvToExcel.getProcessorVersion());
+        assertEquals(List.of("csv", "excel"), convertCsvToExcel.getTags());
         assertEquals(new File("target/python/extensions/ConvertCsvToExcel.py").getAbsolutePath(),
             new File(convertCsvToExcel.getSourceLocation()).getAbsolutePath());
     }

File: nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/manifest/StandardRuntimeManifestService.java
Patch:
@@ -191,6 +191,7 @@ private Extension createExtension(final PythonProcessorDetails pythonProcessorDe
         final Extension extension = new Extension();
         extension.setDescription(pythonProcessorDetails.getCapabilityDescription());
         extension.setName(pythonProcessorDetails.getProcessorType());
+        extension.setTags(pythonProcessorDetails.getTags());
         extension.setInputRequirement(InputRequirement.INPUT_REQUIRED);
         extension.setSupportsBatching(true);
         extension.setType(ExtensionType.PROCESSOR);

File: nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/AbstractComponentNode.java
Patch:
@@ -555,10 +555,11 @@ private String resolveAllowableValue(final String explicitValue, final PropertyD
 
     // Keep setProperty/removeProperty private so that all calls go through setProperties
     private void setProperty(final PropertyDescriptor descriptor, final PropertyConfiguration propertyConfiguration, final Function<PropertyDescriptor, PropertyConfiguration> valueToCompareFunction) {
+        final PropertyConfiguration propertyModComparisonValue = valueToCompareFunction.apply(descriptor);
+
         // Remove current PropertyDescriptor to force updated instance references
         final PropertyConfiguration removed = properties.remove(descriptor);
 
-        final PropertyConfiguration propertyModComparisonValue = valueToCompareFunction.apply(descriptor);
         properties.put(descriptor, propertyConfiguration);
         final String effectiveValue = propertyConfiguration.getEffectiveValue(getParameterContext());
         final String resolvedValue = resolveAllowableValue(effectiveValue, descriptor);

File: nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/StandardHttpResponseMapper.java
Patch:
@@ -65,6 +65,7 @@
 import org.apache.nifi.cluster.coordination.http.endpoints.ParameterProviderEndpointMerger;
 import org.apache.nifi.cluster.coordination.http.endpoints.ParameterProviderFetchRequestsEndpointMerger;
 import org.apache.nifi.cluster.coordination.http.endpoints.ParameterProvidersEndpointMerger;
+import org.apache.nifi.cluster.coordination.http.endpoints.PasteEndpointMerger;
 import org.apache.nifi.cluster.coordination.http.endpoints.PortEndpointMerger;
 import org.apache.nifi.cluster.coordination.http.endpoints.PortStatusEndpointMerger;
 import org.apache.nifi.cluster.coordination.http.endpoints.PrioritizerTypesEndpointMerger;
@@ -145,6 +146,7 @@ public StandardHttpResponseMapper(final NiFiProperties nifiProperties) {
         endpointMergers.add(new ProcessGroupEndpointMerger());
         endpointMergers.add(new ProcessGroupsEndpointMerger());
         endpointMergers.add(new FlowSnippetEndpointMerger());
+        endpointMergers.add(new PasteEndpointMerger());
         endpointMergers.add(new ProvenanceQueryEndpointMerger());
         endpointMergers.add(new ProvenanceEventEndpointMerger());
         endpointMergers.add(new LatestProvenanceEventsMerger());

File: nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/parameter/StandardParameterContext.java
Patch:
@@ -485,7 +485,7 @@ public void configureParameterProvider(final ParameterProviderConfiguration para
 
             if (hasUserEnteredParameters) {
                 throw new IllegalArgumentException(String.format("A Parameter Provider [%s] cannot be set since there are already user-entered parameters " +
-                        "in Context [%s]", parameterProvider.getIdentifier(), name));
+                        "in Context [%s]", parameterProviderNode.getIdentifier(), name));
             }
 
             this.parameterProvider = parameterProviderNode.getParameterProvider();

File: nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/RemoteProcessGroupResource.java
Patch:
@@ -885,7 +885,7 @@ public Response updateRemoteProcessGroupRunStatuses(
                 lookup -> {
                     final ProcessGroupAuthorizable processGroup = lookup.getProcessGroup(processGroupId);
 
-                    authorizeProcessGroup(processGroup, authorizer, lookup, RequestAction.READ, false, false, false, false);
+                    authorizeProcessGroup(processGroup, authorizer, lookup, RequestAction.READ, false, false, false, false, false);
 
                     Set<Authorizable> remoteProcessGroups = processGroup.getEncapsulatedRemoteProcessGroups();
                     for (Authorizable remoteProcessGroup : remoteProcessGroups) {

File: nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/SnippetResource.java
Patch:
@@ -115,7 +115,7 @@ private void authorizeSnippetRequest(final SnippetDTO snippetRequest, final Auth
         snippetRequest.getProcessGroups().keySet().stream().map(id -> lookup.getProcessGroup(id)).forEach(processGroupAuthorizable -> {
             // we are not checking referenced services since we do not know how this snippet will be used. these checks should be performed
             // in a subsequent action with this snippet
-            authorizeProcessGroup(processGroupAuthorizable, authorizer, lookup, action, false, false, false, false);
+            authorizeProcessGroup(processGroupAuthorizable, authorizer, lookup, action, false, false, false, false, false);
         });
         snippetRequest.getRemoteProcessGroups().keySet().stream().map(id -> lookup.getRemoteProcessGroup(id)).forEach(authorize);
         snippetRequest.getProcessors().keySet().stream().map(id -> lookup.getProcessor(id).getAuthorizable()).forEach(authorize);
@@ -282,7 +282,7 @@ public Response updateSnippet(
                     final SnippetAuthorizable snippet = lookup.getSnippet(snippetId);
 
                     // Note: we are explicitly not authorizing parameter references here because they are being authorized below
-                    authorizeSnippet(snippet, authorizer, lookup, RequestAction.WRITE, false, false, false);
+                    authorizeSnippet(snippet, authorizer, lookup, RequestAction.WRITE, false, false, false, false);
 
                     final ProcessGroup destinationGroup = lookup.getProcessGroup(requestSnippetDTO.getParentGroupId()).getProcessGroup();
 
@@ -356,7 +356,7 @@ public Response deleteSnippet(
                 lookup -> {
                     // ensure write permission to every component in the snippet excluding referenced services
                     final SnippetAuthorizable snippet = lookup.getSnippet(snippetId);
-                    authorizeSnippet(snippet, authorizer, lookup, RequestAction.WRITE, true, false, false);
+                    authorizeSnippet(snippet, authorizer, lookup, RequestAction.WRITE, true, false, false, false);
 
                     // ensure write permission to the parent process group
                     snippet.getParentProcessGroup().getAuthorizable().authorize(authorizer, RequestAction.WRITE, NiFiUserUtils.getNiFiUser());

File: nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/EntityFactory.java
Patch:
@@ -219,8 +219,9 @@ public ControllerConfigurationEntity createControllerConfigurationEntity(final C
         return entity;
     }
 
-    public ProcessGroupFlowEntity createProcessGroupFlowEntity(final ProcessGroupFlowDTO dto, final PermissionsDTO permissions) {
+    public ProcessGroupFlowEntity createProcessGroupFlowEntity(final ProcessGroupFlowDTO dto, final RevisionDTO revision, final PermissionsDTO permissions) {
         final ProcessGroupFlowEntity entity = new ProcessGroupFlowEntity();
+        entity.setRevision(revision);
         entity.setProcessGroupFlow(dto);
         entity.setPermissions(permissions);
         return entity;

File: nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/RuntimeManifestEndpointMerger.java
Patch:
@@ -51,7 +51,7 @@ public NodeResponse merge(final URI uri, final String method, final Set<NodeResp
         final Set<Bundle> responseBundles = responseManifest.getBundles() == null ? new LinkedHashSet<>() : new LinkedHashSet<>(responseManifest.getBundles());
 
         for (final NodeResponse nodeResponse : successfulResponses) {
-            final RuntimeManifestEntity nodeResponseEntity = nodeResponse.getClientResponse().readEntity(RuntimeManifestEntity.class);
+            final RuntimeManifestEntity nodeResponseEntity = nodeResponse == clientResponse ? responseEntity : nodeResponse.getClientResponse().readEntity(RuntimeManifestEntity.class);
             final RuntimeManifest nodeResponseManifest = nodeResponseEntity.getRuntimeManifest();
             final List<Bundle> nodeResponseBundles = nodeResponseManifest.getBundles() == null ? Collections.emptyList() : nodeResponseManifest.getBundles();
             responseBundles.retainAll(nodeResponseBundles);

File: nifi-extension-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/ml/textract/GetAwsTextractJobStatus.java
Patch:
@@ -36,6 +36,7 @@
 import software.amazon.awssdk.services.textract.model.GetDocumentTextDetectionRequest;
 import software.amazon.awssdk.services.textract.model.GetExpenseAnalysisRequest;
 import software.amazon.awssdk.services.textract.model.JobStatus;
+import software.amazon.awssdk.services.textract.model.ProvisionedThroughputExceededException;
 import software.amazon.awssdk.services.textract.model.TextractResponse;
 import software.amazon.awssdk.services.textract.model.ThrottlingException;
 
@@ -111,8 +112,9 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
             } else {
                 throw new IllegalStateException("Unrecognized job status");
             }
-        } catch (final ThrottlingException e) {
+        } catch (final ThrottlingException | ProvisionedThroughputExceededException e) {
             getLogger().info("Request Rate Limit exceeded", e);
+            context.yield();
             session.transfer(flowFile, REL_THROTTLED);
         } catch (final Exception e) {
             getLogger().warn("Failed to get Textract Job status", e);

File: nifi-extension-bundles/nifi-standard-services/nifi-ssl-context-bundle/nifi-ssl-context-service/src/main/java/org/apache/nifi/ssl/StandardSSLContextService.java
Patch:
@@ -250,7 +250,7 @@ public SSLContext createContext() {
             final StandardSslContextBuilder sslContextBuilder = new StandardSslContextBuilder().protocol(protocol);
 
             final TrustManager trustManager;
-            final String trustStoreFile = getKeyStoreFile();
+            final String trustStoreFile = getTrustStoreFile();
             if (trustStoreFile == null || trustStoreFile.isBlank()) {
                 getLogger().debug("Trust Store File not configured");
             } else {

File: nifi-extension-bundles/nifi-snmp-bundle/nifi-snmp-processors/src/test/java/org/apache/nifi/snmp/helper/configurations/SNMPV3ConfigurationFactory.java
Patch:
@@ -24,7 +24,7 @@ public class SNMPV3ConfigurationFactory implements SNMPConfigurationFactory {
     // V3 security (users are set in test agents)
     public static final String SECURITY_LEVEL = "authPriv";
     public static final String SECURITY_NAME = "SHAAES128";
-    public static final String AUTH_PROTOCOL = "SHA";
+    public static final String AUTH_PROTOCOL = "HMAC384SHA512";
     public static final String AUTH_PASSPHRASE = "SHAAES128AuthPassphrase";
     public static final String PRIV_PROTOCOL = "AES128";
     public static final String PRIV_PASSPHRASE = "SHAAES128PrivPassphrase";

File: nifi-commons/nifi-record/src/main/java/org/apache/nifi/serialization/RecordReader.java
Patch:
@@ -47,7 +47,7 @@ public interface RecordReader extends Closeable {
      * @throws SchemaValidationException if a Record contains a field that violates the schema and cannot be coerced into the appropriate field type.
      */
     default Record nextRecord() throws IOException, MalformedRecordException {
-        return nextRecord(true, false);
+        return nextRecord(true, true);
     }
 
     /**

File: nifi-extension-bundles/nifi-poi-bundle/nifi-poi-services/src/main/java/org/apache/nifi/processors/excel/SplitExcel.java
Patch:
@@ -111,7 +111,7 @@ public class SplitExcel extends AbstractProcessor {
     private static final List<PropertyDescriptor> DESCRIPTORS = List.of(PROTECTION_TYPE, PASSWORD);
     private static final Set<Relationship> RELATIONSHIPS = Set.of(REL_ORIGINAL, REL_FAILURE, REL_SPLIT);
     private static final CellCopyPolicy CELL_COPY_POLICY = new CellCopyPolicy.Builder()
-            .cellFormula(CellCopyPolicy.DEFAULT_COPY_CELL_FORMULA_POLICY)
+            .cellFormula(false) // NOTE: setting to false allows for copying the evaluated formula value.
             .cellStyle(false) // NOTE: setting to false avoids exceeding the maximum number of cell styles (64000) in a .xlsx Workbook.
             .cellValue(CellCopyPolicy.DEFAULT_COPY_CELL_VALUE_POLICY)
             .condenseRows(CellCopyPolicy.DEFAULT_CONDENSE_ROWS_POLICY)

File: nifi-bootstrap/src/test/java/org/apache/nifi/bootstrap/property/SecurityApplicationPropertyHandlerTest.java
Patch:
@@ -61,7 +61,7 @@ class SecurityApplicationPropertyHandlerTest {
 
     private static final int DNS_NAME_TYPE = 2;
 
-    private static final String FIRST_PROXY_HOST = "nifi.apache.org";
+    private static final String FIRST_PROXY_HOST = "maximum.domain.subject.alternative.name.length.greater.than.sixty.four.characters.nifi.apache.org";
 
     private static final int FIRST_PROXY_HOST_PORT = 443;
 

File: nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/flow/StandardStatelessGroupNodeFactory.java
Patch:
@@ -56,7 +56,6 @@
 import org.apache.nifi.logging.StandardLoggingContext;
 import org.apache.nifi.parameter.ParameterContextManager;
 import org.apache.nifi.processor.SimpleProcessLogger;
-import org.apache.nifi.provenance.ProvenanceRepository;
 import org.apache.nifi.registry.flow.mapping.ComponentIdLookup;
 import org.apache.nifi.registry.flow.mapping.FlowMappingOptions;
 import org.apache.nifi.registry.flow.mapping.InstantiatedVersionedProcessGroup;
@@ -239,7 +238,7 @@ public Future<Set<Bundle>> fetch(final Set<BundleCoordinate> bundleCoordinates,
             .extensionRepository(extensionRepository)
             .flowFileEventRepository(flowFileEventRepository)
             .processScheduler(statelessScheduler)
-            .provenanceRepository((ProvenanceRepository) statelessRepositoryContextFactory.getProvenanceRepository())
+            .provenanceRepository(flowController.getProvenanceRepository())
             .stateManagerProvider(stateManagerProvider)
             .kerberosConfiguration(kerberosConfig)
             .statusTaskInterval(null)

File: nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/groups/StandardStatelessGroupNode.java
Patch:
@@ -255,9 +255,9 @@ private void initialize(final ScheduledExecutorService executor, final Schedulin
             writeLock.lock();
             try {
                 if (desiredState == ScheduledState.RUNNING) {
-                    schedulingAgentCallback.trigger();
                     logger.info("{} has been started", this);
                     currentState = ScheduledState.RUNNING;
+                    schedulingAgentCallback.trigger();
                 } else {
                     logger.info("{} completed setup but is no longer scheduled to run; desired state is now {}; will shutdown", this, desiredState);
                     shutdown = true;

File: nifi-system-tests/nifi-system-test-suite/src/test/java/org/apache/nifi/tests/system/stateless/StatelessBasicsIT.java
Patch:
@@ -87,7 +87,7 @@ public void captureStartClaimantCount() throws NiFiClientException, IOException
     public void testOrderingIntraSession() throws NiFiClientException, IOException, InterruptedException {
         final int batchSize = 100;
 
-        statelessGroup = getClientUtil().createProcessGroup("Stateless", "root");
+        statelessGroup = getClientUtil().createProcessGroup("testOrderingIntraSession", "root");
         getClientUtil().markStateless(statelessGroup, "1 min");
 
         final ProcessorEntity generate = getClientUtil().createProcessor(GENERATE_FLOWFILE, statelessGroup.getId());
@@ -117,6 +117,7 @@ public void testOrderingIntraSession() throws NiFiClientException, IOException,
 
         getClientUtil().waitForValidProcessor(generate.getId());
         getClientUtil().waitForValidProcessor(router.getId());
+        getClientUtil().waitForValidProcessor(verifyProcessor.getId());
         getClientUtil().startProcessGroupComponents(statelessGroup.getId());
 
         waitForQueueCount(outputToTerminate.getId(), batchSize);

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/command/nifi/params/DeleteParam.java
Patch:
@@ -83,6 +83,7 @@ public VoidResult doExecute(final NiFiClient client, final Properties properties
         parameterDTO.setValue(null);
         parameterDTO.setDescription(null);
         parameterDTO.setSensitive(null);
+        parameterDTO.setReferencedAssets(null);
 
         final ParameterEntity parameterEntity = new ParameterEntity();
         parameterEntity.setParameter(parameterDTO);

File: nifi-extension-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/IdentifyMimeType.java
Patch:
@@ -185,7 +185,7 @@ private void setCustomMimeTypes(String configStrategy, ProcessContext context) {
             if (configStrategy.equals(REPLACE.getValue())) {
                 this.detector = MimeTypesFactory.create(customInputStream);
             } else {
-                try (final InputStream nifiInputStream = getClass().getClassLoader().getResourceAsStream("org/apache/tika/mime/custom-mimetypes.xml");
+                try (final InputStream nifiInputStream = getClass().getClassLoader().getResourceAsStream("custom-mimetypes.xml");
                      final InputStream tikaInputStream = MimeTypes.class.getClassLoader().getResourceAsStream("org/apache/tika/mime/tika-mimetypes.xml")) {
                     this.detector = MimeTypesFactory.create(customInputStream, nifiInputStream, tikaInputStream);
                 }

File: nifi-extension-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/processors/JMSPublisher.java
Patch:
@@ -153,7 +153,7 @@ private static Destination buildDestination(final Session session, final String
     }
 
     /**
-     * Implementations of this interface use {@link javax.jms.Message} methods to set strongly typed properties.
+     * Implementations of this interface use {@link jakarta.jms.Message} methods to set strongly typed properties.
      */
     public interface JmsPropertySetter {
         void setProperty(final Message message, final String name, final String value) throws JMSException, NumberFormatException;

File: nifi-extension-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/GetFile.java
Patch:
@@ -182,7 +182,7 @@ public class GetFile extends AbstractProcessor {
             .build();
     public static final PropertyDescriptor BATCH_SIZE = new PropertyDescriptor.Builder()
             .name("Batch Size")
-            .description("The maximum number of files to pull in each iteration")
+            .description("The maximum number of files to pull in each invocation of the processor")
             .required(true)
             .addValidator(StandardValidators.POSITIVE_INTEGER_VALIDATOR)
             .defaultValue("10")

File: minifi/minifi-nar-bundles/minifi-framework-bundle/minifi-framework/minifi-framework-core/src/main/java/org/apache/nifi/minifi/validator/FlowValidator.java
Patch:
@@ -104,7 +104,6 @@ private static void waitForControllerServicesToEnable(List<? extends ComponentNo
         )
         .ifPresent(controllerServices -> {
             LOGGER.error("The following controller services are still in ENABLING state: {}", controllerServices);
-            throw new IllegalStateException("Maximum retry number exceeded while waiting for controller service to be validated");
         });
     }
 

File: minifi/minifi-nar-bundles/minifi-framework-bundle/minifi-framework/minifi-runtime/src/main/java/org/apache/nifi/minifi/MiNiFi.java
Patch:
@@ -226,6 +226,7 @@ public static void main(String[] args) {
             new MiNiFi(properties);
         } catch (final Throwable t) {
             logger.error("Failure to launch MiNiFi", t);
+            System.exit(1);
         }
     }
 

File: nifi-extension-bundles/nifi-poi-bundle/nifi-poi-services/src/main/java/org/apache/nifi/excel/ExcelReader.java
Patch:
@@ -158,7 +158,7 @@ protected List<PropertyDescriptor> getSupportedPropertyDescriptors() {
     @Override
     protected SchemaAccessStrategy getSchemaAccessStrategy(final String allowableValue, final SchemaRegistry schemaRegistry, final PropertyContext context) {
         if (allowableValue.equalsIgnoreCase(ExcelHeaderSchemaStrategy.USE_STARTING_ROW.getValue())) {
-            return new ExcelHeaderSchemaStrategy(context, getLogger(), new TimeValueInference(dateFormat, timeFormat, timestampFormat), null);
+            return new ExcelHeaderSchemaStrategy(context, getLogger(), new TimeValueInference(dateFormat, timeFormat, timestampFormat));
         } else if (SchemaInferenceUtil.INFER_SCHEMA.getValue().equals(allowableValue)) {
             final RecordSourceFactory<Row> sourceFactory = (variables, in) -> new ExcelRecordSource(in, context, variables, getLogger());
             final SchemaInferenceEngine<Row> inference = new ExcelSchemaInference(new TimeValueInference(dateFormat, timeFormat, timestampFormat));

File: nifi-extension-bundles/nifi-aws-bundle/nifi-aws-abstract-processors/src/main/java/org/apache/nifi/processors/aws/v2/AbstractAwsSyncProcessor.java
Patch:
@@ -91,7 +91,7 @@ public void configureTls(final TlsTrustManagersProvider trustManagersProvider, f
             @Override
             public void configureProxy(final ProxyConfiguration proxyConfiguration) {
                 final software.amazon.awssdk.http.apache.ProxyConfiguration.Builder proxyConfigBuilder = software.amazon.awssdk.http.apache.ProxyConfiguration.builder()
-                        .endpoint(URI.create(String.format("%s:%s", proxyConfiguration.getProxyServerHost(), proxyConfiguration.getProxyServerPort())));
+                        .endpoint(URI.create(String.format("http://%s:%s", proxyConfiguration.getProxyServerHost(), proxyConfiguration.getProxyServerPort())));
 
                 if (proxyConfiguration.hasCredential()) {
                     proxyConfigBuilder.username(proxyConfiguration.getProxyUserName());

File: nifi-extension-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/credentials/provider/factory/strategies/AssumeRoleCredentialsStrategy.java
Patch:
@@ -228,7 +228,7 @@ public AwsCredentialsProvider getDerivedAwsCredentialsProvider(final PropertyCon
             final String assumeRoleProxyHost = propertyContext.getProperty(ASSUME_ROLE_PROXY_HOST).getValue();
             final int assumeRoleProxyPort = propertyContext.getProperty(ASSUME_ROLE_PROXY_PORT).asInteger();
             final software.amazon.awssdk.http.apache.ProxyConfiguration proxyConfig = software.amazon.awssdk.http.apache.ProxyConfiguration.builder()
-                    .endpoint(URI.create(String.format("%s:%s", assumeRoleProxyHost, assumeRoleProxyPort)))
+                    .endpoint(URI.create(String.format("http://%s:%s", assumeRoleProxyHost, assumeRoleProxyPort)))
                     .build();
             httpClientBuilder.proxyConfiguration(proxyConfig);
         }

File: nifi-extension-bundles/nifi-aws-bundle/nifi-aws-schema-registry-service/src/main/java/org/apache/nifi/aws/schemaregistry/AmazonGlueSchemaRegistry.java
Patch:
@@ -242,7 +242,7 @@ private SdkHttpClient createSdkHttpClient(final ConfigurationContext context) {
 
         if (Proxy.Type.HTTP.equals(proxyConfig.getProxyType())) {
             final software.amazon.awssdk.http.apache.ProxyConfiguration.Builder proxyConfigBuilder = software.amazon.awssdk.http.apache.ProxyConfiguration.builder()
-                    .endpoint(URI.create(String.format("%s:%s", proxyConfig.getProxyServerHost(), proxyConfig.getProxyServerPort())));
+                    .endpoint(URI.create(String.format("http://%s:%s", proxyConfig.getProxyServerHost(), proxyConfig.getProxyServerPort())));
 
             if (proxyConfig.hasCredential()) {
                 proxyConfigBuilder.username(proxyConfig.getProxyUserName());

File: nifi-extension-bundles/nifi-aws-bundle/nifi-aws-abstract-processors/src/main/java/org/apache/nifi/processors/aws/v2/AbstractAwsAsyncProcessor.java
Patch:
@@ -22,11 +22,11 @@
 import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;
 import software.amazon.awssdk.core.SdkClient;
 import software.amazon.awssdk.http.TlsKeyManagersProvider;
+import software.amazon.awssdk.http.TlsTrustManagersProvider;
 import software.amazon.awssdk.http.async.SdkAsyncHttpClient;
 import software.amazon.awssdk.http.nio.netty.NettyNioAsyncHttpClient;
 import software.amazon.awssdk.regions.Region;
 
-import javax.net.ssl.TrustManager;
 import java.time.Duration;
 
 /**
@@ -78,8 +78,8 @@ public void configureBasicSettings(final Duration communicationsTimeout, final i
             }
 
             @Override
-            public void configureTls(final TrustManager[] trustManagers, final TlsKeyManagersProvider keyManagersProvider) {
-                builder.tlsTrustManagersProvider(() -> trustManagers);
+            public void configureTls(final TlsTrustManagersProvider trustManagersProvider, final TlsKeyManagersProvider keyManagersProvider) {
+                builder.tlsTrustManagersProvider(trustManagersProvider);
                 builder.tlsKeyManagersProvider(keyManagersProvider);
             }
 

File: nifi-extension-bundles/nifi-aws-bundle/nifi-aws-abstract-processors/src/main/java/org/apache/nifi/processors/aws/v2/AbstractAwsSyncProcessor.java
Patch:
@@ -23,10 +23,10 @@
 import software.amazon.awssdk.core.SdkClient;
 import software.amazon.awssdk.http.SdkHttpClient;
 import software.amazon.awssdk.http.TlsKeyManagersProvider;
+import software.amazon.awssdk.http.TlsTrustManagersProvider;
 import software.amazon.awssdk.http.apache.ApacheHttpClient;
 import software.amazon.awssdk.regions.Region;
 
-import javax.net.ssl.TrustManager;
 import java.net.URI;
 import java.time.Duration;
 
@@ -83,8 +83,8 @@ public void configureBasicSettings(final Duration communicationsTimeout, final i
             }
 
             @Override
-            public void configureTls(final TrustManager[] trustManagers, final TlsKeyManagersProvider keyManagersProvider) {
-                builder.tlsTrustManagersProvider(() -> trustManagers);
+            public void configureTls(final TlsTrustManagersProvider trustManagersProvider, final TlsKeyManagersProvider keyManagersProvider) {
+                builder.tlsTrustManagersProvider(trustManagersProvider);
                 builder.tlsKeyManagersProvider(keyManagersProvider);
             }
 

File: nifi-extension-bundles/nifi-aws-bundle/nifi-aws-abstract-processors/src/main/java/org/apache/nifi/processors/aws/v2/AwsHttpClientConfigurer.java
Patch:
@@ -18,15 +18,15 @@
 
 import org.apache.nifi.proxy.ProxyConfiguration;
 import software.amazon.awssdk.http.TlsKeyManagersProvider;
+import software.amazon.awssdk.http.TlsTrustManagersProvider;
 
-import javax.net.ssl.TrustManager;
 import java.time.Duration;
 
 public interface AwsHttpClientConfigurer {
 
     void configureBasicSettings(Duration communicationsTimeout, int maxConcurrentTasks);
 
-    void configureTls(TrustManager[] trustManagers, TlsKeyManagersProvider keyManagersProvider);
+    void configureTls(TlsTrustManagersProvider trustManagersProvider, TlsKeyManagersProvider keyManagersProvider);
 
     void configureProxy(ProxyConfiguration proxyConfiguration);
 }

File: minifi/minifi-bootstrap/src/main/java/org/apache/nifi/minifi/bootstrap/service/MiNiFiPropertiesGenerator.java
Patch:
@@ -96,7 +96,6 @@ public class MiNiFiPropertiesGenerator {
         Triple.of(NiFiProperties.NAR_LIBRARY_DIRECTORY, "./lib", EMPTY),
         Triple.of(NiFiProperties.NAR_WORKING_DIRECTORY, "./work/nar/", EMPTY),
         Triple.of(NiFiProperties.NAR_LIBRARY_AUTOLOAD_DIRECTORY, "./extensions", EMPTY),
-        Triple.of(NiFiProperties.COMPONENT_DOCS_DIRECTORY, "./work/docs/components", EMPTY),
         Triple.of(NiFiProperties.STATE_MANAGEMENT_CONFIG_FILE, "./conf/state-management.xml", "# State Management"),
         Triple.of(NiFiProperties.STATE_MANAGEMENT_LOCAL_PROVIDER_ID, "local-provider", "# The ID of the local state provider"),
         Triple.of(NiFiProperties.REPOSITORY_DATABASE_DIRECTORY, "./database_repository", "# H2 Settings"),

File: nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/nar/NarManager.java
Patch:
@@ -55,7 +55,7 @@ public interface NarManager {
      * @param coordinate the coordinate of the NAR
      * @param narState the new state
      */
-    void updateState(BundleCoordinate coordinate, NarState narState);
+    void updateState(BundleCoordinate coordinate, NarState narState, String failureMessage);
 
     /**
      * @return all NARs contained in the NAR Manager

File: nifi-framework-bundle/nifi-framework/nifi-framework-nar-loading-utils/src/main/java/org/apache/nifi/nar/ExtensionUiLoader.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.nifi.bundle.Bundle;
 
-import java.util.Set;
+import java.util.Collection;
 
 /**
  * Loads WARs from extensions and makes them available to the running application.
@@ -28,10 +28,10 @@ public interface ExtensionUiLoader {
     /**
      * @param bundles the set of bundles to load WARs from
      */
-    void loadExtensionUis(Set<Bundle> bundles);
+    void loadExtensionUis(Collection<Bundle> bundles);
 
     /**
      * @param bundles the set of bundles to unload WARs for
      */
-    void unloadExtensionUis(Set<Bundle> bundles);
+    void unloadExtensionUis(Collection<Bundle> bundles);
 }

File: nifi-framework-bundle/nifi-framework/nifi-framework-nar-loading-utils/src/main/java/org/apache/nifi/nar/NarLoader.java
Patch:
@@ -49,7 +49,7 @@ public interface NarLoader {
      *
      * @param bundles the NARs to unload
      */
-    void unload(Set<Bundle> bundles);
+    void unload(Collection<Bundle> bundles);
 
     /**
      * Unloads the given NAR.

File: nifi-framework-bundle/nifi-framework/nifi-framework-nar-loading-utils/src/test/java/org/apache/nifi/nar/AbstractTestNarLoader.java
Patch:
@@ -32,8 +32,8 @@
 import java.nio.file.Paths;
 import java.nio.file.SimpleFileVisitor;
 import java.nio.file.attribute.BasicFileAttributes;
+import java.util.Collection;
 import java.util.Collections;
-import java.util.Set;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -92,12 +92,12 @@ public void setup() throws IOException, ClassNotFoundException {
                 extensionMapping,
                 new ExtensionUiLoader() {
                     @Override
-                    public void loadExtensionUis(final Set<Bundle> bundles) {
+                    public void loadExtensionUis(final Collection<Bundle> bundles) {
 
                     }
 
                     @Override
-                    public void unloadExtensionUis(final Set<Bundle> bundles) {
+                    public void unloadExtensionUis(final Collection<Bundle> bundles) {
 
                     }
                 },

File: nifi-framework-bundle/nifi-framework/nifi-framework-nar-utils/src/main/java/org/apache/nifi/nar/ExtensionManager.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.nifi.python.PythonProcessorDetails;
 
 import java.net.URL;
+import java.util.Collection;
 import java.util.List;
 import java.util.Set;
 
@@ -116,7 +117,7 @@ default InstanceClassLoader createInstanceClassLoader(String classType, String i
      * @param bundleCoordinates the coordinates
      * @return the removed bundles, or empty if none exists
      */
-    Set<Bundle> removeBundles(Set<BundleCoordinate> bundleCoordinates);
+    Set<Bundle> removeBundles(Collection<BundleCoordinate> bundleCoordinates);
 
     /**
      * Retrieves the bundles that have a dependency on the bundle with the given coordinate.

File: nifi-framework-bundle/nifi-framework/nifi-framework-nar-utils/src/main/java/org/apache/nifi/nar/StandardExtensionDiscoveringManager.java
Patch:
@@ -722,8 +722,8 @@ public synchronized Bundle getBundle(final BundleCoordinate bundleCoordinate) {
     }
 
     @Override
-    public synchronized Set<Bundle> removeBundles(final Set<BundleCoordinate> bundleCoordinates) {
-        final Set<Bundle> removedBundles = new HashSet<>();
+    public synchronized Set<Bundle> removeBundles(final Collection<BundleCoordinate> bundleCoordinates) {
+        final Set<Bundle> removedBundles = new LinkedHashSet<>();
         for (final BundleCoordinate bundleCoordinate : bundleCoordinates) {
             final Bundle removedBundle = removeBundle(bundleCoordinate);
             if (removedBundle != null) {

File: nifi-framework-bundle/nifi-framework/nifi-web/nifi-jetty/src/main/java/org/apache/nifi/web/server/JettyServer.java
Patch:
@@ -337,7 +337,7 @@ private Handler loadInitialWars(final Set<Bundle> bundles) {
     }
 
     @Override
-    public synchronized void loadExtensionUis(final Set<Bundle> bundles) {
+    public synchronized void loadExtensionUis(final Collection<Bundle> bundles) {
         extensionUisToLoad.addAll(bundles);
     }
 
@@ -393,7 +393,7 @@ private void processExtensionUiBundle(final Bundle bundle) {
     }
 
     @Override
-    public synchronized void unloadExtensionUis(final Set<Bundle> bundles) {
+    public synchronized void unloadExtensionUis(final Collection<Bundle> bundles) {
         bundles.forEach(this::unloadExtensionUis);
     }
 

File: nifi-system-tests/nifi-system-test-suite/src/test/java/org/apache/nifi/tests/system/nar/NarUploadStandaloneIT.java
Patch:
@@ -130,8 +130,9 @@ public void testUploadStandardNars() throws NiFiClientException, IOException, In
         assertNotNull(customProcessor.getComponent().getExtensionMissing());
         assertFalse(customProcessor.getComponent().getExtensionMissing());
 
-        // Verify service API NAR can't be replaced while other NARs depend on it
-        assertThrows(NiFiClientException.class, () -> narUploadUtil.uploadNar(narsLocation, CONTROLLER_SERVICE_API_NAR_ID));
+        // Verify service API NAR can be replaced while other NARs depend on it
+        final NarSummaryDTO replacedServiceApiNar = narUploadUtil.uploadNar(narsLocation, CONTROLLER_SERVICE_API_NAR_ID);
+        waitFor(narUploadUtil.getWaitForNarStateSupplier(replacedServiceApiNar.getIdentifier(), NarState.INSTALLED));
 
         // Verify processors NAR can be replaced
         final NarSummaryDTO replacedProcessorsNar = narUploadUtil.uploadNar(narsLocation, PROCESSORS_NAR_ID);

File: nifi-extension-bundles/nifi-kafka-bundle/nifi-kafka-3-service/src/main/java/org/apache/nifi/kafka/service/consumer/Kafka3ConsumerService.java
Patch:
@@ -192,7 +192,8 @@ public ByteRecord next() {
                     consumerRecord.timestamp(),
                     recordHeaders,
                     consumerRecord.key(),
-                    consumerRecord.value()
+                    consumerRecord.value(),
+                    1
             );
         }
     }

File: nifi-extension-bundles/nifi-kafka-bundle/nifi-kafka-processors/src/main/java/org/apache/nifi/kafka/processors/consumer/bundle/ByteRecordBundler.java
Patch:
@@ -66,7 +66,7 @@ private ByteRecord toByteRecord(final BundleKey key, final BundleValue value) {
         key.headers.add(new RecordHeader(KafkaFlowFileAttribute.KAFKA_MAX_OFFSET, Long.toString(value.getLastOffset()).getBytes(StandardCharsets.UTF_8)));
         key.headers.add(new RecordHeader(KafkaFlowFileAttribute.KAFKA_COUNT, Long.toString(value.getCount()).getBytes(StandardCharsets.UTF_8)));
         return new ByteRecord(topicPartition.getTopic(), topicPartition.getPartition(),
-                value.getFirstOffset(), key.getTimestamp(), key.getHeaders(), key.getMessageKey(), value.getData());
+                value.getFirstOffset(), key.getTimestamp(), key.getHeaders(), key.getMessageKey(), value.getData(), value.getCount());
     }
 
     private void update(final Map<BundleKey, BundleValue> bundles, final ByteRecord byteRecord) {

File: nifi-extension-bundles/nifi-kafka-bundle/nifi-kafka-processors/src/main/java/org/apache/nifi/kafka/processors/consumer/convert/FlowFileStreamKafkaMessageConverter.java
Patch:
@@ -70,7 +70,7 @@ public void toFlowFiles(final ProcessSession session, final Iterator<ByteRecord>
             final String transitUri = String.format(TRANSIT_URI_FORMAT, consumerRecord.getTopic(), consumerRecord.getPartition());
             provenanceReporter.receive(flowFile, transitUri);
 
-            session.adjustCounter("Records Received from " + consumerRecord.getTopic(), 1, false);
+            session.adjustCounter("Records Received from " + consumerRecord.getTopic(), consumerRecord.getBundledCount(), false);
 
             session.transfer(flowFile, ConsumeKafka.SUCCESS);
             offsetTracker.update(consumerRecord);

File: nifi-extension-bundles/nifi-iceberg-bundle/nifi-iceberg-services/src/main/java/org/apache/nifi/services/iceberg/AbstractCatalogService.java
Patch:
@@ -53,7 +53,6 @@ public abstract class AbstractCatalogService extends AbstractControllerService i
             .required(false)
             .identifiesExternalResource(ResourceCardinality.MULTIPLE, ResourceType.FILE)
             .expressionLanguageSupported(ExpressionLanguageScope.ENVIRONMENT)
-            .dynamicallyModifiesClasspath(true)
             .build();
 
     public static final PropertyDescriptor WAREHOUSE_PATH = new PropertyDescriptor.Builder()

File: nifi-extension-bundles/nifi-kafka-bundle/nifi-kafka-3-integration/src/test/java/org/apache/nifi/kafka/processors/AbstractConsumeKafkaIT.java
Patch:
@@ -45,8 +45,8 @@ protected Properties getKafkaProducerProperties() {
     }
 
     protected void produceOne(final String topic, final Integer partition,
-                              final String key, final String value, final List<Header> headers)
-            throws ExecutionException, InterruptedException {
+                              final String key, final String value, final List<Header> headers) throws ExecutionException, InterruptedException {
+
         try (final KafkaProducer<String, String> producer = new KafkaProducer<>(getKafkaProducerProperties())) {
             final ProducerRecord<String, String> record = new ProducerRecord<>(topic, partition, key, value, headers);
             final Future<RecordMetadata> future = producer.send(record);

File: nifi-extension-bundles/nifi-kafka-bundle/nifi-kafka-3-integration/src/test/java/org/apache/nifi/kafka/processors/AbstractKafkaBaseIT.java
Patch:
@@ -42,7 +42,7 @@ public abstract class AbstractKafkaBaseIT {
 
     protected static final String CONNECTION_SERVICE_ID = Kafka3ConnectionService.class.getSimpleName();
 
-    protected static final Duration DURATION_POLL = Duration.ofMillis(1000L);
+    protected static final Duration DURATION_POLL = Duration.ofSeconds(3);
 
     protected static final KafkaContainer kafkaContainer;
 

File: nifi-extension-bundles/nifi-kafka-bundle/nifi-kafka-3-integration/src/test/java/org/apache/nifi/kafka/processors/ConsumeKafkaRecordIT.java
Patch:
@@ -118,9 +118,6 @@ void testProcessingStrategyFlowFileOneRecord() throws InterruptedException, Exec
         flowFile.assertContentEquals(flowFileString);
         flowFile.assertAttributeEquals(KafkaFlowFileAttribute.KAFKA_TOPIC, topic);
         flowFile.assertAttributeEquals(KafkaFlowFileAttribute.KAFKA_PARTITION, Integer.toString(FIRST_PARTITION));
-        flowFile.assertAttributeEquals(KafkaFlowFileAttribute.KAFKA_OFFSET, Long.toString(FIRST_OFFSET));
-        flowFile.assertAttributeExists(KafkaFlowFileAttribute.KAFKA_TIMESTAMP);
-        flowFile.assertAttributeEquals(KafkaFlowFileAttribute.KAFKA_HEADER_COUNT, "3");
         flowFile.assertAttributeEquals("record.count", Long.toString(TEST_RECORD_COUNT));
         flowFile.assertAttributeEquals("aaa", "value");
         flowFile.assertAttributeNotExists("bbb");

File: nifi-extension-bundles/nifi-kafka-bundle/nifi-kafka-processors/src/main/java/org/apache/nifi/kafka/processors/common/KafkaUtils.java
Patch:
@@ -25,8 +25,8 @@
 import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.HashMap;
 import java.util.HexFormat;
-import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
@@ -74,7 +74,7 @@ public static String toKeyString(final byte[] key, final KeyEncoding keyEncoding
     public static Map<String, String> toAttributes(final ByteRecord consumerRecord, final KeyEncoding keyEncoding,
                                                    final Pattern headerNamePattern, final Charset headerEncoding,
                                                    final boolean commitOffsets) {
-        final Map<String, String> attributes = new LinkedHashMap<>();
+        final Map<String, String> attributes = new HashMap<>();
         attributes.put(KafkaFlowFileAttribute.KAFKA_TOPIC, consumerRecord.getTopic());
         attributes.put(KafkaFlowFileAttribute.KAFKA_PARTITION, Long.toString(consumerRecord.getPartition()));
         attributes.put(KafkaFlowFileAttribute.KAFKA_OFFSET, Long.toString(consumerRecord.getOffset()));

File: nifi-extension-bundles/nifi-kafka-bundle/nifi-kafka-processors/src/test/java/org/apache/nifi/kafka/processors/ConsumeKafkaTest.java
Patch:
@@ -83,7 +83,7 @@ public void testProperties() throws InitializationException {
     public void testVerifySuccessful() throws InitializationException {
         final PartitionState firstPartitionState = new PartitionState(TEST_TOPIC_NAME, FIRST_PARTITION);
         final List<PartitionState> partitionStates = Collections.singletonList(firstPartitionState);
-        when(kafkaConsumerService.getPartitionStates(any())).thenReturn(partitionStates);
+        when(kafkaConsumerService.getPartitionStates()).thenReturn(partitionStates);
         setConnectionService();
         when(kafkaConnectionService.getConsumerService(any())).thenReturn(kafkaConsumerService);
 
@@ -100,7 +100,7 @@ public void testVerifySuccessful() throws InitializationException {
 
     @Test
     public void testVerifyFailed() throws InitializationException {
-        when(kafkaConsumerService.getPartitionStates(any())).thenThrow(new IllegalStateException());
+        when(kafkaConsumerService.getPartitionStates()).thenThrow(new IllegalStateException());
         when(kafkaConnectionService.getConsumerService(any())).thenReturn(kafkaConsumerService);
         setConnectionService();
 

File: nifi-extension-bundles/nifi-kafka-bundle/nifi-kafka-service-api/src/main/java/org/apache/nifi/kafka/service/api/KafkaConnectionService.java
Patch:
@@ -17,14 +17,14 @@
 package org.apache.nifi.kafka.service.api;
 
 import org.apache.nifi.controller.ControllerService;
-import org.apache.nifi.kafka.service.api.consumer.ConsumerConfiguration;
 import org.apache.nifi.kafka.service.api.consumer.KafkaConsumerService;
+import org.apache.nifi.kafka.service.api.consumer.PollingContext;
 import org.apache.nifi.kafka.service.api.producer.KafkaProducerService;
 import org.apache.nifi.kafka.service.api.producer.ProducerConfiguration;
 
 public interface KafkaConnectionService extends ControllerService {
 
-    KafkaConsumerService getConsumerService(ConsumerConfiguration consumerConfiguration);
+    KafkaConsumerService getConsumerService(PollingContext pollingContext);
 
     KafkaProducerService getProducerService(ProducerConfiguration producerConfiguration);
 }

File: nifi-extension-bundles/nifi-kafka-bundle/nifi-kafka-service-api/src/main/java/org/apache/nifi/kafka/service/api/consumer/KafkaConsumerService.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * Kafka Consumer Service must be closed to avoid leaking connection resources
  */
-public interface KafkaConsumerService extends AutoCloseable {
+public interface KafkaConsumerService {
     /**
      * Commit record information to Kafka Brokers
      *

File: nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/controller/StandardProcessorNode.java
Patch:
@@ -1472,7 +1472,7 @@ private void run(final ScheduledExecutorService taskScheduler, final long admini
 
         final Processor processor = processorRef.get().getProcessor();
         final ComponentLog procLog = new SimpleProcessLogger(StandardProcessorNode.this.getIdentifier(), processor, new StandardLoggingContext(StandardProcessorNode.this));
-        LOG.info("Starting {}", this);
+        LOG.debug("Starting {}", this);
 
         ScheduledState currentState;
         boolean starting;
@@ -1804,7 +1804,7 @@ public CompletableFuture<Void> stop(final ProcessScheduler processScheduler, fin
             final SchedulingAgent schedulingAgent, final LifecycleState lifecycleState, final boolean triggerLifecycleMethods) {
 
         final Processor processor = processorRef.get().getProcessor();
-        LOG.info("Stopping processor: {}", this);
+        LOG.debug("Stopping processor: {}", this);
         desiredState = ScheduledState.STOPPED;
 
         final CompletableFuture<Void> future = new CompletableFuture<>();

File: nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/flow/StandardStatelessGroupNodeFactory.java
Patch:
@@ -74,7 +74,6 @@
 import org.apache.nifi.stateless.repository.StatelessProvenanceRepository;
 import org.apache.nifi.stateless.repository.StatelessRepositoryContextFactory;
 
-import javax.net.ssl.SSLContext;
 import java.time.Duration;
 import java.time.temporal.ChronoUnit;
 import java.util.Collections;
@@ -89,6 +88,7 @@
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.BooleanSupplier;
 import java.util.function.Supplier;
+import javax.net.ssl.SSLContext;
 
 public class StandardStatelessGroupNodeFactory implements StatelessGroupNodeFactory {
     private final FlowController flowController;
@@ -296,9 +296,11 @@ public Future<Set<Bundle>> fetch(final Set<BundleCoordinate> bundleCoordinates,
 
         child.synchronizeFlow(versionedExternalFlow, synchronizationOptions, flowMappingOptions);
         child.setParent(group);
+
         return child;
     }
 
+
     private FlowEngine lazyInitializeThreadPool(final AtomicReference<FlowEngine> reference, final Supplier<FlowEngine> factory) {
         FlowEngine threadPool = reference.get();
         if (threadPool == null) {

File: nifi-stateless/nifi-stateless-api/src/main/java/org/apache/nifi/stateless/flow/StatelessDataflow.java
Patch:
@@ -31,7 +31,7 @@ public interface StatelessDataflow {
      * Triggers the dataflow to run, returning a DataflowTrigger that can be used to wait for the result. Uses the {@link DataflowTriggerContext#IMPLICIT_CONTEXT}.
      * @return a DataflowTrigger that can be used to wait for the result
      *
-     * @throws IllegalStateException if called before {@link #initialize()} is called.
+     * @throws IllegalStateException if called before {@link #initialize(StatelessDataflowInitializationContext)} is called.
      */
     default DataflowTrigger trigger() {
         return trigger(DataflowTriggerContext.IMPLICIT_CONTEXT);
@@ -43,7 +43,7 @@ default DataflowTrigger trigger() {
      * @param triggerContext the trigger context to use
      * @return a DataflowTrigger that can be used to wait for the result
      *
-     * @throws IllegalStateException if called before {@link #initialize()} is called.
+     * @throws IllegalStateException if called before {@link #initialize(StatelessDataflowInitializationContext)} is called.
      */
     DataflowTrigger trigger(DataflowTriggerContext triggerContext);
 
@@ -66,7 +66,7 @@ default DataflowTrigger trigger() {
      *     This method MUST be called prior to calling {@link #trigger()}.
      * </p>
      */
-    void initialize();
+    void initialize(StatelessDataflowInitializationContext initializationContext);
 
     default void shutdown() {
         shutdown(true, false);

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/controller/scheduling/StatelessProcessScheduler.java
Patch:
@@ -147,7 +147,6 @@ public void onTaskComplete() {
         final Supplier<ProcessContext> processContextSupplier = () -> processContextFactory.createProcessContext(procNode);
         procNode.start(componentMonitoringThreadPool, ADMINISTRATIVE_YIELD_MILLIS, this.processorStartTimeoutMillis, processContextSupplier, callback, failIfStopping, true);
         return future;
-
     }
 
     @Override

File: nifi-framework-bundle/nifi-framework-extensions/nifi-py4j-framework-bundle/nifi-python-framework-api/src/main/java/org/apache/nifi/python/processor/PythonProcessorBridge.java
Patch:
@@ -36,7 +36,7 @@ public interface PythonProcessorBridge {
     void replaceController(PythonController controller);
 
     /**
-     * @return the name of the Processor implementation. This will not contain a 'python.' prefix.
+     * @return the name of the Processor implementation.
      */
     String getProcessorType();
 

File: nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/nar/ComponentNodeDefinitionPredicate.java
Patch:
@@ -50,8 +50,7 @@ private <T extends ComponentNode> boolean isComponentFromType(final T componentN
 
         if (PythonBundle.isPythonCoordinate(componentCoordinate)) {
             final String componentType = componentNode.getComponentType();
-            final String pythonComponentType = "python." + componentType;
-            return pythonComponentType.equals(extensionDefinitionClassName) && componentCoordinate.equals(extensionDefinitionCoordinate);
+            return componentType.equals(extensionDefinitionClassName) && componentCoordinate.equals(extensionDefinitionCoordinate);
         } else if (componentNode.isExtensionMissing()) {
             return componentClassName.equals(extensionDefinitionClassName)
                     && componentCoordinate.getGroup().equals(extensionDefinitionCoordinate.getGroup())

File: nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/nar/ComponentNodeDefinitionPredicateTest.java
Patch:
@@ -40,7 +40,6 @@ public class ComponentNodeDefinitionPredicateTest {
     private static final BundleCoordinate STANDARD_BUNDLE_COORDINATE_V2 = new BundleCoordinate("org.apache.nifi", "my-processors-nar", "2.0.0");
 
     private static final String PYTHON_PROCESSOR_TYPE = "PythonProcessor";
-    private static final String FULL_PYTHON_PROCESSOR_TYPE = "python." + PYTHON_PROCESSOR_TYPE;
     private static final String OTHER_PYTHON_PROCESSOR_TYPE = "OtherPythonProcessor";
     private static final BundleCoordinate PYTHON_BUNDLE_COORDINATE = new BundleCoordinate(PythonBundle.GROUP_ID, PythonBundle.ARTIFACT_ID, "0.0.1");
 
@@ -66,7 +65,7 @@ public void setup() {
         when(pythonBundle.getBundleDetails()).thenReturn(pythonBundleDetails);
 
         pythonProcessorDefinition = mock(ExtensionDefinition.class);
-        when(pythonProcessorDefinition.getImplementationClassName()).thenReturn(FULL_PYTHON_PROCESSOR_TYPE);
+        when(pythonProcessorDefinition.getImplementationClassName()).thenReturn(PYTHON_PROCESSOR_TYPE);
         when(pythonProcessorDefinition.getBundle()).thenReturn(pythonBundle);
     }
 

File: nifi-system-tests/nifi-system-test-suite/src/test/java/org/apache/nifi/tests/system/NiFiClientUtil.java
Patch:
@@ -177,7 +177,7 @@ public void stopProcessor(final ProcessorEntity currentEntity) throws NiFiClient
     }
 
     public ProcessorEntity createPythonProcessor(final String typeName) throws NiFiClientException, IOException {
-        return createProcessor( "python." + typeName, NiFiSystemIT.NIFI_GROUP_ID, NiFiSystemIT.TEST_PYTHON_EXTENSIONS_ARTIFACT_ID, "0.0.1-SNAPSHOT");
+        return createProcessor(typeName, NiFiSystemIT.NIFI_GROUP_ID, NiFiSystemIT.TEST_PYTHON_EXTENSIONS_ARTIFACT_ID, "0.0.1-SNAPSHOT");
     }
 
     public ProcessorEntity createProcessor(final String simpleTypeName) throws NiFiClientException, IOException {

File: nifi-system-tests/nifi-system-test-suite/src/test/java/org/apache/nifi/tests/system/nar/NarUploadPythonIT.java
Patch:
@@ -47,7 +47,7 @@ public class NarUploadPythonIT extends NiFiSystemIT {
     private static final Logger logger = LoggerFactory.getLogger(NarUploadPythonIT.class);
 
     private static final String PYTHON_TEXT_EXTENSIONS_NAR_ID = "nifi-python-test-extensions-nar";
-    private static final String PYTHON_WRITE_BECH_32_CHARSET = "python.WriteBech32Charset";
+    private static final String PYTHON_WRITE_BECH_32_CHARSET = "WriteBech32Charset";
     private static final String EXPECTED_FLOW_FILE_CONTENT = "qpzry9x8gf2tvdw0s3jn54khce6mua7l";
 
     @Override

File: nifi-extension-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/DeduplicateRecord.java
Patch:
@@ -391,7 +391,7 @@ public void onScheduled(final ProcessContext context) {
     private FilterWrapper getFilter(ProcessContext context) {
         if (useInMemoryStrategy) {
             boolean useHashSet = context.getProperty(FILTER_TYPE).getValue()
-                    .equals(context.getProperty(HASH_SET_VALUE.getValue()).getValue());
+                    .equals(HASH_SET_VALUE.getValue());
             final int filterCapacity = context.getProperty(FILTER_CAPACITY_HINT).asInteger();
             return useHashSet
                     ? new HashSetFilterWrapper(new HashSet<>(filterCapacity))

File: nifi-commons/nifi-properties/src/main/java/org/apache/nifi/util/NiFiProperties.java
Patch:
@@ -97,7 +97,6 @@ public class NiFiProperties extends ApplicationProperties {
     public static final String CONTENT_ARCHIVE_BACK_PRESSURE_PERCENTAGE = "nifi.content.repository.archive.backpressure.percentage";
     public static final String CONTENT_ARCHIVE_ENABLED = "nifi.content.repository.archive.enabled";
     public static final String CONTENT_ARCHIVE_CLEANUP_FREQUENCY = "nifi.content.repository.archive.cleanup.frequency";
-    public static final String CONTENT_VIEWER_URL = "nifi.content.viewer.url";
 
     // flowfile repository properties
     public static final String FLOWFILE_REPOSITORY_IMPLEMENTATION = "nifi.flowfile.repository.implementation";

File: nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java
Patch:
@@ -632,6 +632,7 @@ public FlowFileSummaryDTO createFlowFileSummaryDTO(final FlowFileSummary summary
        final FlowFileSummaryDTO dto = new FlowFileSummaryDTO();
        dto.setUuid(summary.getUuid());
        dto.setFilename(summary.getFilename());
+       dto.setMimeType(summary.getMimeType());
 
        dto.setPenalized(summary.isPenalized());
        final long penaltyExpiration = summary.getPenaltyExpirationMillis() - now.getTime();
@@ -660,6 +661,7 @@ public FlowFileDTO createFlowFileDTO(final FlowFileRecord record) {
        final FlowFileDTO dto = new FlowFileDTO();
        dto.setUuid(record.getAttribute(CoreAttributes.UUID.key()));
        dto.setFilename(record.getAttribute(CoreAttributes.FILENAME.key()));
+       dto.setMimeType(record.getAttribute(CoreAttributes.MIME_TYPE.key()));
 
        dto.setPenalized(record.isPenalized());
        final long penaltyExpiration = record.getPenaltyExpirationMillis() - now.getTime();

File: nifi-commons/nifi-web-servlet-shared/src/main/java/org/apache/nifi/web/servlet/filter/QueryStringToFragmentFilter.java
Patch:
@@ -40,7 +40,8 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha
             // Some NiFi front ends use hash based routing, so they don't need to know the baseHref. With hash based
             // routing query parameters are implemented within the URL fragment. Because of this any query parameters on the
             // original URL are not considered. This filter captures those and adds them to the fragment.
-            final RequestUriBuilder requestUriBuilder = RequestUriBuilder.fromHttpServletRequest(httpServletRequest).path(httpServletRequest.getContextPath()).fragment("/?" + queryString);
+            final String contextPath = httpServletRequest.getContextPath() + "/";
+            final RequestUriBuilder requestUriBuilder = RequestUriBuilder.fromHttpServletRequest(httpServletRequest).path(contextPath).fragment("/?" + queryString);
             final URI redirectUri = requestUriBuilder.build();
 
             final HttpServletResponse httpServletResponse = (HttpServletResponse) response;

File: nifi-extension-bundles/nifi-iceberg-bundle/nifi-iceberg-services-api/src/main/java/org/apache/nifi/services/iceberg/IcebergCatalogService.java
Patch:
@@ -29,7 +29,7 @@ public interface IcebergCatalogService extends ControllerService {
 
     IcebergCatalogType getCatalogType();
 
-    Map<IcebergCatalogProperty, String> getCatalogProperties();
+    Map<IcebergCatalogProperty, Object> getCatalogProperties();
 
     List<String> getConfigFilePaths();
 }

File: nifi-extension-bundles/nifi-iceberg-bundle/nifi-iceberg-services-api/src/main/java/org/apache/nifi/services/iceberg/IcebergCatalogType.java
Patch:
@@ -19,5 +19,6 @@
 
 public enum IcebergCatalogType {
     HIVE,
-    HADOOP
+    HADOOP,
+    JDBC
 }

File: nifi-extension-bundles/nifi-iceberg-bundle/nifi-iceberg-test-utils/src/main/java/org/apache/nifi/hive/metastore/MetastoreCore.java
Patch:
@@ -73,7 +73,7 @@
  */
 class MetastoreCore {
 
-    private final String DATABASE_NAME = "test_metastore";
+    private final String DATABASE_NAME = "iceberg_test";
 
     private String thriftConnectionUri;
     private Configuration hiveConf;

File: nifi-framework-bundle/nifi-framework/nifi-framework-status-history-shared/src/main/java/org/apache/nifi/controller/status/history/NodeStatusDescriptor.java
Patch:
@@ -79,7 +79,7 @@ public Long reduce(final List<StatusSnapshot> values) {
                 @Override
                 public Long reduce(final List<StatusSnapshot> values) {
                     return (long) values.stream()
-                            .map(snapshot -> snapshot.getStatusMetric(HEAP_UTILIZATION.getDescriptor()))
+                            .map(snapshot -> snapshot.getStatusMetric(PROCESSOR_LOAD_AVERAGE.getDescriptor()))
                             .filter(Objects::nonNull)
                             .mapToLong(value -> value)
                             .average()

File: nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ControllerServiceResource.java
Patch:
@@ -156,7 +156,7 @@ public ControllerServiceDTO populateRemainingControllerServiceContent(final Cont
             final List<UiExtension> uiExtensions = uiExtensionMapping.getUiExtension(controllerService.getType(), bundle.getGroup(), bundle.getArtifact(), bundle.getVersion());
             for (final UiExtension uiExtension : uiExtensions) {
                 if (UiExtensionType.ControllerServiceConfiguration.equals(uiExtension.getExtensionType())) {
-                    controllerService.setCustomUiUrl(generateExternalUiUri(uiExtension.getContextPath(), "configure"));
+                    controllerService.setCustomUiUrl(generateExternalUiUri(uiExtension.getContextPath()));
                 }
             }
         }

File: nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ParameterProviderResource.java
Patch:
@@ -217,7 +217,7 @@ public ParameterProviderDTO populateRemainingParameterProviderContent(final Para
             final List<UiExtension> uiExtensions = uiExtensionMapping.getUiExtension(parameterProvider.getType(), bundle.getGroup(), bundle.getArtifact(), bundle.getVersion());
             for (final UiExtension uiExtension : uiExtensions) {
                 if (UiExtensionType.ParameterProviderConfiguration.equals(uiExtension.getExtensionType())) {
-                    parameterProvider.setCustomUiUrl(generateExternalUiUri(uiExtension.getContextPath(), "configure"));
+                    parameterProvider.setCustomUiUrl(generateExternalUiUri(uiExtension.getContextPath()));
                 }
             }
         }

File: nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessorResource.java
Patch:
@@ -173,7 +173,7 @@ public ProcessorDTO populateRemainingProcessorContent(ProcessorDTO processor) {
                 final List<UiExtension> uiExtensions = uiExtensionMapping.getUiExtension(processor.getType(), bundle.getGroup(), bundle.getArtifact(), bundle.getVersion());
                 for (final UiExtension uiExtension : uiExtensions) {
                     if (UiExtensionType.ProcessorConfiguration.equals(uiExtension.getExtensionType())) {
-                        config.setCustomUiUrl(generateExternalUiUri(uiExtension.getContextPath(), "configure"));
+                        config.setCustomUiUrl(generateExternalUiUri(uiExtension.getContextPath()));
                     }
                 }
             }

File: nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ReportingTaskResource.java
Patch:
@@ -149,7 +149,7 @@ public ReportingTaskDTO populateRemainingReportingTaskContent(final ReportingTas
             final List<UiExtension> uiExtensions = uiExtensionMapping.getUiExtension(reportingTask.getType(), bundle.getGroup(), bundle.getArtifact(), bundle.getVersion());
             for (final UiExtension uiExtension : uiExtensions) {
                 if (UiExtensionType.ReportingTaskConfiguration.equals(uiExtension.getExtensionType())) {
-                    reportingTask.setCustomUiUrl(generateExternalUiUri(uiExtension.getContextPath(), "configure"));
+                    reportingTask.setCustomUiUrl(generateExternalUiUri(uiExtension.getContextPath()));
                 }
             }
         }

File: minifi/minifi-nar-bundles/minifi-framework-bundle/minifi-framework/minifi-framework-core/src/main/java/org/apache/nifi/minifi/c2/C2NifiClientService.java
Patch:
@@ -271,7 +271,7 @@ public void stop() {
         }
     }
 
-    private RuntimeInfoWrapper generateRuntimeInfo() {
+    private synchronized RuntimeInfoWrapper generateRuntimeInfo() {
         AgentManifest agentManifest = new AgentManifest(runtimeManifestService.getManifest());
         agentManifest.setSupportedOperations(supportedOperationsProvider.getSupportedOperations());
         return new RuntimeInfoWrapper(getAgentRepositories(), agentManifest, getQueueStatus());

File: nifi-framework-bundle/nifi-framework/nifi-web/nifi-jetty/src/main/java/org/apache/nifi/web/server/JettyServer.java
Patch:
@@ -969,8 +969,8 @@ public void start() {
                     logger.info("Started Server on {}", applicationUrl);
                 }
             }
-        } catch (Exception ex) {
-            startUpFailure(ex);
+        } catch (Throwable t) {
+            startUpFailure(t);
         }
     }
 

File: nifi-framework-bundle/nifi-framework/nifi-framework-nar-utils/src/main/java/org/apache/nifi/nar/StandardExtensionDiscoveringManager.java
Patch:
@@ -830,7 +830,7 @@ public synchronized Set<ExtensionDefinition> getExtensions(final Class<?> defini
             throw new IllegalArgumentException("Class cannot be null");
         }
         final Set<ExtensionDefinition> extensions = definitionMap.get(definition);
-        return (extensions == null) ? Collections.emptySet() : extensions;
+        return (extensions == null) ? Collections.emptySet() : new HashSet<>(extensions);
     }
 
     @Override

File: nifi-commons/nifi-utils/src/main/java/org/apache/nifi/util/security/MessageDigestUtils.java
Patch:
@@ -63,7 +63,7 @@ public static byte[] getDigest(final InputStream inputStream) throws IOException
         int bytesRead = inputStream.read(buffer, START_READ_INDEX, BUFFER_LENGTH);
 
         while (bytesRead > STREAM_END_INDEX) {
-            messageDigest.update(buffer);
+            messageDigest.update(buffer, 0, bytesRead);
             bytesRead = inputStream.read(buffer, START_READ_INDEX, BUFFER_LENGTH);
         }
 

File: nifi-commons/nifi-web-client-api/src/main/java/org/apache/nifi/web/client/api/HttpResponseStatus.java
Patch:
@@ -42,6 +42,8 @@ public enum HttpResponseStatus {
 
     PROXY_AUTHENTICATION_REQUIRED(407),
 
+    CONFLICT(409),
+
     INTERNAL_SERVER_ERROR(500),
 
     SERVICE_UNAVAILABLE(503);
@@ -55,4 +57,5 @@ public enum HttpResponseStatus {
     public int getCode() {
         return code;
     }
+
 }

File: nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/main/java/org/apache/nifi/authorization/FileAccessPolicyProvider.java
Patch:
@@ -676,6 +676,8 @@ private void populateNodes(Authorizations authorizations) {
             logger.debug("Populating default authorizations for node '{}' ({})", node.getIdentity(), node.getIdentifier());
             // grant access to the proxy resource
             addUserToAccessPolicy(authorizations, ResourceType.Proxy.getValue(), node.getIdentifier(), WRITE_CODE);
+            // grant access to read controller for syncing custom NARs
+            addUserToAccessPolicy(authorizations, ResourceType.Controller.getValue(), node.getIdentifier(), READ_CODE);
 
             // grant the user read/write access data of the root group
             if (rootGroupId != null) {

File: nifi-framework-bundle/nifi-framework/nifi-framework-nar-utils/src/main/java/org/apache/nifi/nar/NarThreadContextClassLoader.java
Patch:
@@ -88,6 +88,7 @@ public class NarThreadContextClassLoader extends URLClassLoader {
         narSpecificClasses.add(ContentRepository.class);
         narSpecificClasses.add(StateProvider.class);
         narSpecificClasses.add(FlowRegistryClient.class);
+        narSpecificClasses.add(NarPersistenceProvider.class);
     }
 
     private NarThreadContextClassLoader() {
@@ -218,14 +219,14 @@ public static <T> T createInstance(final ExtensionManager extensionManager, fina
         final ClassLoader originalClassLoader = Thread.currentThread().getContextClassLoader();
         try {
             final List<Bundle> bundles = extensionManager.getBundles(implementationClassName);
-            if (bundles.size() == 0) {
+            if (bundles.isEmpty()) {
                 throw new IllegalStateException(String.format("The specified implementation class '%s' is not known to this nifi.", implementationClassName));
             }
             if (bundles.size() > 1) {
                 throw new IllegalStateException(String.format("More than one bundle was found for the specified implementation class '%s', only one is allowed.", implementationClassName));
             }
 
-            final Bundle bundle = bundles.get(0);
+            final Bundle bundle = bundles.getFirst();
             final ClassLoader instanceClassLoader = createClassLoader(implementationClassName, instanceId, bundle, extensionManager);
             final Class<?> instanceClass = Class.forName(implementationClassName, true, instanceClassLoader);
 

File: nifi-framework-bundle/nifi-framework/nifi-headless-server/src/main/java/org/apache/nifi/headless/HeadlessNiFiServer.java
Patch:
@@ -159,6 +159,7 @@ public void preDestruction() throws AuthorizerDestructionException {
                     flowController,
                     props,
                     null, // revision manager
+                    null, // NAR Manager
                     authorizer);
 
             diagnosticsFactory = new BootstrapDiagnosticsFactory();

File: nifi-framework-bundle/nifi-framework/nifi-nar-utils/src/main/java/org/apache/nifi/nar/FileDigestUtils.java
Patch:
@@ -54,7 +54,7 @@ public static byte[] getDigest(final File file) throws IOException {
         try (final InputStream inputStream = new FileInputStream(file)) {
             int bytesRead = inputStream.read(buffer, START_READ_INDEX, BUFFER_LENGTH);
             while (bytesRead > STREAM_END_INDEX) {
-                messageDigest.update(buffer);
+                messageDigest.update(buffer, 0, bytesRead);
                 bytesRead = inputStream.read(buffer, START_READ_INDEX, BUFFER_LENGTH);
             }
         }

File: nifi-framework-bundle/nifi-framework/nifi-nar-utils/src/main/java/org/apache/nifi/nar/NarUnpacker.java
Patch:
@@ -256,9 +256,9 @@ private static Map<File, BundleCoordinate> createUnpackedNarBundleCoordinateMap(
 
     private static BundleCoordinate createBundleCoordinate(final Manifest manifest) {
         Attributes mainAttributes = manifest.getMainAttributes();
-        String groupId = mainAttributes.getValue(NarManifestEntry.NAR_GROUP.getManifestName());
-        String narId = mainAttributes.getValue(NarManifestEntry.NAR_ID.getManifestName());
-        String version = mainAttributes.getValue(NarManifestEntry.NAR_VERSION.getManifestName());
+        String groupId = mainAttributes.getValue(NarManifestEntry.NAR_GROUP.getEntryName());
+        String narId = mainAttributes.getValue(NarManifestEntry.NAR_ID.getEntryName());
+        String version = mainAttributes.getValue(NarManifestEntry.NAR_VERSION.getEntryName());
         return new BundleCoordinate(groupId, narId, version);
     }
 

File: nifi-framework-bundle/nifi-framework/nifi-nar-utils/src/main/java/org/apache/nifi/nar/PythonBundle.java
Patch:
@@ -30,7 +30,7 @@ public class PythonBundle {
     public static final String ARTIFACT_ID = "python-extensions";
     public static final String VERSION = BundleCoordinate.DEFAULT_VERSION;
 
-    private static final BundleCoordinate PYTHON_BUNDLE_COORDINATE = new BundleCoordinate(GROUP_ID, ARTIFACT_ID, VERSION);
+    public static final BundleCoordinate PYTHON_BUNDLE_COORDINATE = new BundleCoordinate(GROUP_ID, ARTIFACT_ID, VERSION);
 
     public static Bundle create(final NiFiProperties properties, final ClassLoader classLoader) {
         final File pythonWorkingDirectory = new File(properties.getProperty(NiFiProperties.PYTHON_WORKING_DIRECTORY, NiFiProperties.DEFAULT_PYTHON_WORKING_DIRECTORY));

File: nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/NiFiWebApiResourceConfig.java
Patch:
@@ -45,6 +45,7 @@
 import org.apache.nifi.web.api.config.ResourceNotFoundExceptionMapper;
 import org.apache.nifi.web.api.config.ThrowableMapper;
 import org.apache.nifi.web.api.config.UnknownNodeExceptionMapper;
+import org.apache.nifi.web.api.config.UploadRequestReplicationExceptionMapper;
 import org.apache.nifi.web.api.config.ValidationExceptionMapper;
 import org.apache.nifi.web.api.config.WebApplicationExceptionMapper;
 import org.apache.nifi.web.api.filter.RedirectResourceFilter;
@@ -133,6 +134,7 @@ public NiFiWebApiResourceConfig(@Context ServletContext servletContext) {
         register(ResourceNotFoundExceptionMapper.class);
         register(NotFoundExceptionMapper.class);
         register(UnknownNodeExceptionMapper.class);
+        register(UploadRequestReplicationExceptionMapper.class);
         register(ValidationExceptionMapper.class);
         register(WebApplicationExceptionMapper.class);
         register(ThrowableMapper.class);

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/extensions/DownloadQueue.java
Patch:
@@ -172,9 +172,9 @@ private BundleCoordinate getParentCoordinate(final File narFile) throws IOExcept
                 final Manifest manifest = nar.getManifest();
 
                 final Attributes attributes = manifest.getMainAttributes();
-                final String groupId = attributes.getValue(NarManifestEntry.NAR_DEPENDENCY_GROUP.getManifestName());
-                final String narId = attributes.getValue(NarManifestEntry.NAR_DEPENDENCY_ID.getManifestName());
-                final String version = attributes.getValue(NarManifestEntry.NAR_DEPENDENCY_VERSION.getManifestName());
+                final String groupId = attributes.getValue(NarManifestEntry.NAR_DEPENDENCY_GROUP.getEntryName());
+                final String narId = attributes.getValue(NarManifestEntry.NAR_DEPENDENCY_ID.getEntryName());
+                final String version = attributes.getValue(NarManifestEntry.NAR_DEPENDENCY_VERSION.getEntryName());
 
                 if (groupId == null || narId == null || version == null) {
                     return null;

File: nifi-system-tests/nifi-system-test-suite/src/test/java/org/apache/nifi/tests/system/python/PythonNarIT.java
Patch:
@@ -70,7 +70,7 @@ public void testRunProcessorWithBundledDependencies() throws IOException, NiFiCl
         getNiFiInstance().stop();
         getNiFiInstance().start(true);
 
-        // Create instance of the WriteNumpyVersionBundledDependency processor, and connect a GenerateFlowFile to it
+        // Create instance of the WriteBech32Charset processor, and connect a GenerateFlowFile to it
         final ProcessorEntity generate = getClientUtil().createProcessor("GenerateFlowFile");
         ProcessorEntity writeVersion = getClientUtil().createPythonProcessor("WriteBech32Charset");
         writeVersion = getClientUtil().setAutoTerminatedRelationships(writeVersion, "failure");
@@ -92,7 +92,7 @@ public void testRunProcessorWithBundledDependencies() throws IOException, NiFiCl
 
         // Verify the output
         final String contents = getClientUtil().getFlowFileContentAsUtf8(writeVersionToTerminate.getId(), 0);
-        // Ensure that the contents written to the FlowFile are the the 32 characters used by the bech32 encoding
+        // Ensure that the contents written to the FlowFile are the 32 characters used by the bech32 encoding
         assertEquals("qpzry9x8gf2tvdw0s3jn54khce6mua7l", contents);
     }
 

File: nifi-extension-bundles/nifi-github-bundle/nifi-github-extensions/src/main/java/org/apache/nifi/github/GitHubRepositoryClient.java
Patch:
@@ -212,7 +212,7 @@ public InputStream getContentFromBranch(final String path, final String branch)
         return execute(() -> {
             try {
                 final GHContent ghContent = repository.getFileContent(resolvedPath, branchRef);
-                return ghContent.read();
+                return repository.readBlob(ghContent.getSha());
             } catch (final FileNotFoundException fnf) {
                 throwPathOrBranchNotFound(fnf, resolvedPath, branchRef);
                 return null;
@@ -238,7 +238,7 @@ public InputStream getContentFromCommit(final String path, final String commitSh
         return execute(() -> {
             try {
                 final GHContent ghContent = repository.getFileContent(resolvedPath, commitSha);
-                return ghContent.read();
+                return repository.readBlob(ghContent.getSha());
             } catch (final FileNotFoundException fnf) {
                 throw new FlowRegistryException("Path [" + resolvedPath + "] or Commit [" + commitSha + "] not found", fnf);
             }

File: nifi-extension-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/bigquery/AbstractBigQueryProcessor.java
Patch:
@@ -168,7 +168,7 @@ protected final Collection<ValidationResult> customValidate(ValidationContext va
     }
 
     /**
-     * If sub-classes needs to implement any custom validation, override this method then add
+     * If subclasses needs to implement any custom validation, override this method then add
      * validation result to the results.
      */
     protected void customValidate(ValidationContext validationContext, Collection<ValidationResult> results) {

File: nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/AbstractComponentNode.java
Patch:
@@ -208,7 +208,7 @@ protected Set<URL> getAdditionalClasspathResources(final Collection<PropertyDesc
      *         configured set of properties
      */
     protected boolean isClasspathDifferent(final Map<PropertyDescriptor, String> properties) {
-        // If any property in the given map modifies classpath and is different than the currently configured value,
+        // If any property in the given map modifies classpath and is different from the currently configured value,
         // the given properties will require a different classpath.
         for (final Map.Entry<PropertyDescriptor, String> entry : properties.entrySet()) {
             final PropertyDescriptor descriptor = entry.getKey();
@@ -308,7 +308,7 @@ public void setProperties(final Map<String, String> properties, final boolean al
                     if (propertyName != null && entry.getValue() == null) {
                         removeProperty(propertyName, allowRemovalOfRequiredProperties);
                     } else if (propertyName != null) {
-                        // Use the EL-Agnostic Parameter Parser to gather the list of referenced Parameters. We do this because we want to to keep track of which parameters
+                        // Use the EL-Agnostic Parameter Parser to gather the list of referenced Parameters. We do this because we want to keep track of which parameters
                         // are referenced, regardless of whether or not they are referenced from within an EL Expression. However, we also will need to derive a different ParameterTokenList
                         // that we can provide to the PropertyConfiguration, so that when compiling the Expression Language Expressions, we are able to keep the Parameter Reference within
                         // the Expression's text.

File: nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ApplicationResource.java
Patch:
@@ -355,7 +355,7 @@ protected boolean isTwoPhaseRequest(final HttpServletRequest httpServletRequest)
      * When a two-phase commit style request is used, the first phase (generally referred to
      * as the "commit-request stage") is intended to validate that the request can be completed.
      * In NiFi, we use this phase to validate that the request can complete. This method determines
-     * whether or not the request is the first phase of a two-phase commit.
+     * whether the request is the first phase of a two-phase commit.
      *
      * @param httpServletRequest the request
      * @return <code>true</code> if the request represents a two-phase commit style request and is the
@@ -374,7 +374,7 @@ protected boolean isCancellationPhase(final HttpServletRequest httpServletReques
     }
 
     /**
-     * Checks whether or not the request should be replicated to the cluster
+     * Checks whether the request should be replicated to the cluster
      *
      * @return <code>true</code> if the request should be replicated, <code>false</code> otherwise
      */
@@ -847,7 +847,7 @@ protected Response replicate(final String method, final Object entity, final Str
      * @throws UnknownNodeException if the nodeUuid given does not map to any node in the cluster
      */
     protected Response replicate(final URI path, final String method, final Object entity, final String nodeUuid, final Map<String, String> headersToOverride) {
-        // since we're cluster we must specify the cluster node identifier
+        // since we're in a cluster we must specify the cluster node identifier
         if (nodeUuid == null) {
             throw new IllegalArgumentException("The cluster node identifier must be specified.");
         }

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/command/AbstractCommand.java
Patch:
@@ -95,7 +95,7 @@ public final void initialize(final Context context) {
     }
 
     protected void doInitialize(final Context context) {
-        // sub-classes can override to do additional things like add options
+        // subclasses can override to do additional things like add options
     }
 
     protected void addOption(final Option option) {

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/command/AbstractCommandGroup.java
Patch:
@@ -51,7 +51,7 @@ public final void initialize(final Context context) {
     }
 
     /**
-     * Sub-classes override to provide the appropriate commands for the given group.
+     * Subclasses override to provide the appropriate commands for the given group.
      *
      * @return the list of commands for this group
      */

File: nifi-extension-bundles/nifi-aws-bundle/nifi-aws-processors/src/test/java/org/apache/nifi/processors/aws/kinesis/stream/TestConsumeKinesisStream.java
Patch:
@@ -269,6 +269,7 @@ private void runWorker(final boolean withCredentials, final boolean waitForFailu
         mockConsumeKinesisStreamRunner.setProperty(ConsumeKinesisStream.APPLICATION_NAME, "test-application");
         mockConsumeKinesisStreamRunner.setProperty(ConsumeKinesisStream.REGION, Regions.EU_WEST_2.getName());
         mockConsumeKinesisStreamRunner.setProperty(ConsumeKinesisStream.TIMEOUT, "5 secs");
+        mockConsumeKinesisStreamRunner.setProperty(ConsumeKinesisStream.INITIAL_STREAM_POSITION, "TRIM_HORIZON");
 
         final AWSCredentialsProviderService awsCredentialsProviderService = new AWSCredentialsProviderControllerService();
         mockConsumeKinesisStreamRunner.addControllerService("aws-credentials", awsCredentialsProviderService);
@@ -326,7 +327,8 @@ private void assertSchedulerConfigs(final Scheduler scheduler, final String host
         assertTrue(scheduler.leaseManagementConfig().workerIdentifier().startsWith(hostname));
         assertEquals(scheduler.coordinatorConfig().applicationName(), "test-application");
         assertEquals(scheduler.leaseManagementConfig().streamName(), "test-stream");
-        assertEquals(scheduler.leaseManagementConfig().initialPositionInStream().getInitialPositionInStream(), InitialPositionInStream.LATEST);
+        assertEquals(scheduler.retrievalConfig().streamTracker().streamConfigList().get(0).initialPositionInStreamExtended().getInitialPositionInStream(),
+                InitialPositionInStream.TRIM_HORIZON );
         assertEquals(scheduler.coordinatorConfig().parentShardPollIntervalMillis(), 1);
     }
 

File: nifi-extension-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/TestLogStdErr.java
Patch:
@@ -24,6 +24,7 @@ public class TestLogStdErr {
     public static void main(String[] args) throws IOException, URISyntaxException {
         char[] chars = new char[1024 * 1024];
         Arrays.fill(chars, 'f');
+        System.arraycopy("ÄÖÜäöüß".toCharArray(), 0, chars, 0, 7);
         System.err.println(new String(chars));
     }
 

File: nifi-extension-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestExecuteStreamCommand.java
Patch:
@@ -297,6 +297,7 @@ public void testLoggingToStdErr() throws IOException {
         List<MockFlowFile> flowFiles = controller.getFlowFilesForRelationship(ExecuteStreamCommand.OUTPUT_STREAM_RELATIONSHIP);
         MockFlowFile flowFile = flowFiles.get(0);
         assertEquals(0, flowFile.getSize());
+        assertTrue(flowFile.getAttribute("execution.error").contains("ÄÖÜäöüß"));
         assertTrue(flowFile.getAttribute("execution.error").contains("fffffffffffffffffffffffffffffff"));
     }
 
@@ -329,6 +330,7 @@ public void testLoggingToStdErrDynamicProperties() throws IOException {
         List<MockFlowFile> flowFiles = controller.getFlowFilesForRelationship(ExecuteStreamCommand.OUTPUT_STREAM_RELATIONSHIP);
         MockFlowFile flowFile = flowFiles.get(0);
         assertEquals(0, flowFile.getSize());
+        assertTrue(flowFile.getAttribute("execution.error").contains("ÄÖÜäöüß"));
         assertTrue(flowFile.getAttribute("execution.error").contains("fffffffffffffffffffffffffffffff"));
     }
 

File: minifi/minifi-commons/minifi-commons-api/src/main/java/org/apache/nifi/minifi/commons/api/MiNiFiProperties.java
Patch:
@@ -81,8 +81,8 @@ public enum MiNiFiProperties {
     C2_KEEP_ALIVE_DURATION("c2.rest.keepAliveDuration", "5 min", false, true, TIME_PERIOD_VALIDATOR),
     C2_REST_HTTP_HEADERS("c2.rest.http.headers", "Accept:application/json", false, true, VALID),
     C2_CONFIG_DIRECTORY("c2.config.directory", "./conf", false, true, VALID),
-    C2_RUNTIME_MANIFEST_IDENTIFIER("c2.runtime.manifest.identifier", "", false, true, VALID),
-    C2_RUNTIME_TYPE("c2.runtime.type", "", false, true, VALID),
+    C2_RUNTIME_MANIFEST_IDENTIFIER("c2.runtime.manifest.identifier", "minifi", false, true, VALID),
+    C2_RUNTIME_TYPE("c2.runtime.type", "minifi-java", false, true, VALID),
     C2_ASSET_DIRECTORY("c2.asset.directory", "./asset", false, true, VALID),
     C2_SECURITY_TRUSTSTORE_LOCATION("c2.security.truststore.location", "", false, false, VALID),
     C2_SECURITY_TRUSTSTORE_PASSWORD("c2.security.truststore.password", "", true, false, VALID),

File: nifi-extension-bundles/nifi-standard-services/nifi-lookup-services-bundle/nifi-lookup-services/src/main/java/org/apache/nifi/lookup/configuration2/XXEValidator.java
Patch:
@@ -48,7 +48,7 @@ public ValidationResult validate(final String subject, final String input, final
         }
 
         final String xmlFilePathString = xmlFilePath.toString();
-        logger.info("Validating {} for XXE attack", xmlFilePathString);
+        logger.debug("Validating {} for XXE attack", xmlFilePathString);
 
         if (Files.exists(xmlFilePath)) {
             try (BufferedReader reader = Files.newBufferedReader(xmlFilePath)) {

File: minifi/minifi-bootstrap/src/main/java/org/apache/nifi/minifi/bootstrap/service/MiNiFiPropertiesGenerator.java
Patch:
@@ -92,6 +92,7 @@ public class MiNiFiPropertiesGenerator {
         Triple.of(NiFiProperties.BORED_YIELD_DURATION, "10 millis",
             "# If a component has no work to do (is \"bored\"), how long should we wait before checking again for work"),
         Triple.of(NiFiProperties.LOGIN_IDENTITY_PROVIDER_CONFIGURATION_FILE, "./conf/login-identity-providers.xml", EMPTY),
+        Triple.of(NiFiProperties.UI_BANNER_TEXT, EMPTY, EMPTY),
         Triple.of(NiFiProperties.NAR_LIBRARY_DIRECTORY, "./lib", EMPTY),
         Triple.of(NiFiProperties.NAR_WORKING_DIRECTORY, "./work/nar/", EMPTY),
         Triple.of(NiFiProperties.NAR_LIBRARY_AUTOLOAD_DIRECTORY, "./extensions", EMPTY),

File: nifi-commons/nifi-properties/src/test/java/org/apache/nifi/util/NiFiPropertiesTest.java
Patch:
@@ -44,6 +44,8 @@ public void testProperties() {
 
         NiFiProperties properties = loadNiFiProperties("/NiFiProperties/conf/nifi.properties", null);
 
+        assertEquals("UI Banner Text", properties.getBannerText());
+
         Set<File> expectedDirectories = new HashSet<>();
         expectedDirectories.add(new File("./target/resources/NiFiProperties/lib/"));
         expectedDirectories.add(new File("./target/resources/NiFiProperties/lib2/"));

File: nifi-extension-bundles/nifi-hazelcast-bundle/nifi-hazelcast-services/src/test/java/org/apache/nifi/hazelcast/services/cachemanager/ExternalHazelcastCacheManagerTest.java
Patch:
@@ -37,6 +37,7 @@ public void setUp() {
         final Config config = new Config();
         config.getNetworkConfig().setPort(0);
         config.setClusterName("nifi");
+        config.getNetworkConfig().getJoin().getAutoDetectionConfig().setEnabled(false);
 
         hazelcastInstance = Hazelcast.newHazelcastInstance(config);
         super.setUp();

File: nifi-framework-bundle/nifi-framework/nifi-framework-kubernetes-bundle/nifi-framework-kubernetes-state-provider/src/test/java/org/apache/nifi/kubernetes/state/provider/KubernetesConfigMapStateProviderTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.nifi.components.state.Scope;
 import org.apache.nifi.components.state.StateMap;
 import org.apache.nifi.components.state.StateProviderInitializationContext;
+import org.apache.nifi.kubernetes.client.ServiceAccountNamespaceProvider;
 import org.apache.nifi.logging.ComponentLog;
 import org.apache.nifi.parameter.ParameterLookup;
 import org.apache.nifi.util.MockProcessContext;
@@ -63,7 +64,7 @@ class KubernetesConfigMapStateProviderTest {
 
     private static final String SECOND_VERSION = "2";
 
-    private static final String DEFAULT_NAMESPACE = "default";
+    private static final String DEFAULT_NAMESPACE = new ServiceAccountNamespaceProvider().getNamespace();
 
     private static final String COMPONENT_ID = "COMPONENT-ID";
 

File: nifi-extension-bundles/nifi-hazelcast-bundle/nifi-hazelcast-services/src/test/java/org/apache/nifi/hazelcast/services/cachemanager/ExternalHazelcastCacheManagerTest.java
Patch:
@@ -37,6 +37,7 @@ public void setUp() {
         final Config config = new Config();
         config.getNetworkConfig().setPort(0);
         config.setClusterName("nifi");
+        config.getNetworkConfig().getJoin().getAutoDetectionConfig().setEnabled(false);
 
         hazelcastInstance = Hazelcast.newHazelcastInstance(config);
         super.setUp();

File: nifi-framework-bundle/nifi-framework/nifi-framework-kubernetes-bundle/nifi-framework-kubernetes-state-provider/src/test/java/org/apache/nifi/kubernetes/state/provider/KubernetesConfigMapStateProviderTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.nifi.components.state.Scope;
 import org.apache.nifi.components.state.StateMap;
 import org.apache.nifi.components.state.StateProviderInitializationContext;
+import org.apache.nifi.kubernetes.client.ServiceAccountNamespaceProvider;
 import org.apache.nifi.logging.ComponentLog;
 import org.apache.nifi.parameter.ParameterLookup;
 import org.apache.nifi.util.MockProcessContext;
@@ -63,7 +64,7 @@ class KubernetesConfigMapStateProviderTest {
 
     private static final String SECOND_VERSION = "2";
 
-    private static final String DEFAULT_NAMESPACE = "default";
+    private static final String DEFAULT_NAMESPACE = new ServiceAccountNamespaceProvider().getNamespace();
 
     private static final String COMPONENT_ID = "COMPONENT-ID";
 

File: nifi-extension-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/kinesis/firehose/PutKinesisFirehose.java
Patch:
@@ -130,9 +130,9 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
             for (final FlowFile flowFile : flowFiles) {
                 final String firehoseStreamName = context.getProperty(KINESIS_FIREHOSE_DELIVERY_STREAM_NAME).evaluateAttributeExpressions(flowFile).getValue();
 
+                recordHash.computeIfAbsent(firehoseStreamName, k -> new ArrayList<>());
                 session.read(flowFile, in -> recordHash.get(firehoseStreamName).add(Record.builder().data(SdkBytes.fromInputStream(in)).build()));
 
-                recordHash.computeIfAbsent(firehoseStreamName, k -> new ArrayList<>());
                 final List<FlowFile> flowFilesForStream = hashFlowFiles.computeIfAbsent(firehoseStreamName, k -> new ArrayList<>());
                 flowFilesForStream.add(flowFile);
             }

File: nifi-extension-bundles/nifi-jolt-bundle/nifi-jolt-processors/src/main/java/org/apache/nifi/processors/jolt/AbstractJoltTransform.java
Patch:
@@ -241,7 +241,7 @@ private String readTransform(final PropertyValue propertyValue, final FlowFile f
 
     String readTransform(final PropertyValue propertyValue) {
         final ResourceReference resourceReference = propertyValue.asResource();
-        try (final BufferedReader reader = new BufferedReader(new InputStreamReader(resourceReference.read()))) {
+        try (final BufferedReader reader = new BufferedReader(new InputStreamReader(resourceReference.read(), StandardCharsets.UTF_8))) {
             return reader.lines().collect(Collectors.joining(System.lineSeparator()));
         } catch (final IOException e) {
             throw new UncheckedIOException("Read JOLT Transform failed", e);

File: nifi-extension-bundles/nifi-jolt-bundle/nifi-jolt-transform-json-ui/src/test/java/org/apache/nifi/web/standard/api/processor/TestProcessorResource.java
Patch:
@@ -85,7 +85,7 @@ public void testSetProperties() {
 
         final NiFiWebConfigurationContext niFiWebConfigurationContext = mock(NiFiWebConfigurationContext.class);
         final Map<String, String> properties = new HashMap<>();
-        properties.put("jolt-transform", "jolt-transform-chain");
+        properties.put("Jolt Transform", "jolt-transform-chain");
         final ComponentDetails componentDetails = new ComponentDetails.Builder().properties(properties).build();
 
         Mockito.when(servletContext.getAttribute(Mockito.anyString())).thenReturn(niFiWebConfigurationContext);
@@ -103,7 +103,7 @@ public void testSetProperties() {
         assertNotNull(response);
         JsonNode jsonNode = response.readEntity(JsonNode.class);
         assertNotNull(jsonNode);
-        assertTrue(jsonNode.get("properties").get("jolt-transform").asText().equals("jolt-transform-chain"));
+        assertTrue(jsonNode.get("properties").get("Jolt Transform").asText().equals("jolt-transform-chain"));
     }
 
 
@@ -113,7 +113,7 @@ public void testGetProcessorDetails() {
         final Map<String, String> allowableValues = new HashMap<>();
         final ComponentDescriptor descriptor = new ComponentDescriptor.Builder().name("test-name").allowableValues(allowableValues).build();
         final Map<String, ComponentDescriptor> descriptors = new HashMap<>();
-        descriptors.put("jolt-transform", descriptor);
+        descriptors.put("Jolt Transform", descriptor);
         final ComponentDetails componentDetails = new ComponentDetails.Builder().name("mytransform").type("org.apache.nifi.processors.standard.JoltTransformJSON")
                 .descriptors(descriptors)
                 .build();

File: nifi-extension-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/EvaluateXQuery.java
Patch:
@@ -368,7 +368,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
     private String formatItem(XdmItem item, ProcessContext context) throws IOException {
         ByteArrayOutputStream baos = new ByteArrayOutputStream();
         writeFormattedItem(item, context, baos);
-        return baos.toString();
+        return baos.toString(StandardCharsets.UTF_8);
     }
 
     void writeFormattedItem(XdmItem item, ProcessContext context, OutputStream out) throws IOException {

File: nifi-extension-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestEvaluateXQuery.java
Patch:
@@ -198,7 +198,7 @@ public void testXQueries() throws Exception {
                 "<?xml version=\"1.0\" encoding=\"UTF-8\"?><fruit xmlns:ns=\"http://namespace/1\"><name>banana</name><color>yellow</color></fruit>",
                 "<?xml version=\"1.0\" encoding=\"UTF-8\"?><fruit xmlns:ns=\"http://namespace/1\" taste=\"sweet\"><name>orange</name><color>orange</color></fruit>",
                 "<?xml version=\"1.0\" encoding=\"UTF-8\"?><fruit xmlns:ns=\"http://namespace/1\"><name>blueberry</name><color>blue</color></fruit>",
-                "<?xml version=\"1.0\" encoding=\"UTF-8\"?><fruit xmlns:ns=\"http://namespace/1\" taste=\"tart\"><name>raspberry</name><color>red</color></fruit>",
+                "<?xml version=\"1.0\" encoding=\"UTF-8\"?><fruit xmlns:ns=\"http://namespace/1\" taste=\"ÄÖÜäöüßéèóò\"><name>raspberry</name><color>red</color></fruit>",
                 "<?xml version=\"1.0\" encoding=\"UTF-8\"?><fruit xmlns:ns=\"http://namespace/1\"><name>none</name><color/></fruit>"));
 
         /* XML all matches wrapped (one result)*/
@@ -210,7 +210,7 @@ public void testXQueries() throws Exception {
                 + "<fruit xmlns:ns=\"http://namespace/1\"><name>banana</name><color>yellow</color></fruit>"
                 + "<fruit xmlns:ns=\"http://namespace/1\" taste=\"sweet\"><name>orange</name><color>orange</color></fruit>"
                 + "<fruit xmlns:ns=\"http://namespace/1\"><name>blueberry</name><color>blue</color></fruit>"
-                + "<fruit xmlns:ns=\"http://namespace/1\" taste=\"tart\"><name>raspberry</name><color>red</color></fruit>"
+                + "<fruit xmlns:ns=\"http://namespace/1\" taste=\"ÄÖÜäöüßéèóò\"><name>raspberry</name><color>red</color></fruit>"
                 + "<fruit xmlns:ns=\"http://namespace/1\"><name>none</name><color/></fruit>"
                 + "</wrap>"));
 

File: nifi-extension-bundles/nifi-slack-bundle/nifi-slack-processors/src/main/java/org/apache/nifi/processors/slack/consume/ConsumeSlackClient.java
Patch:
@@ -39,4 +39,6 @@ public interface ConsumeSlackClient {
 
     Map<String, String> fetchChannelIds() throws SlackApiException, IOException;
 
+    String fetchChannelName(String channelId) throws SlackApiException, IOException;
+
 }

File: nifi-extension-bundles/nifi-azure-bundle/nifi-azure-processors/src/test/java/org/apache/nifi/processors/azure/eventhub/checkpoint/AbstractComponentStateCheckpointStoreTest.java
Patch:
@@ -25,11 +25,10 @@
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
-import static org.hamcrest.MatcherAssert.assertThat;
-import static org.hamcrest.Matchers.greaterThan;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNotEquals;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 abstract class AbstractComponentStateCheckpointStoreTest extends AbstractCheckpointStoreTest {
 
@@ -56,7 +55,7 @@ void assertClaimedOwnership(PartitionOwnership requestedOwnership, PartitionOwne
         assertEquals(requestedOwnership.getOwnerId(), claimedOwnership.getOwnerId());
 
         assertNotNull(claimedOwnership.getLastModifiedTime());
-        assertThat(claimedOwnership.getLastModifiedTime(), greaterThan(requestedOwnership.getLastModifiedTime() != null ? requestedOwnership.getLastModifiedTime() : 0));
+        assertTrue(claimedOwnership.getLastModifiedTime() > (requestedOwnership.getLastModifiedTime() != null ? requestedOwnership.getLastModifiedTime() : 0));
 
         assertNotNull(claimedOwnership.getETag());
         assertNotEquals(requestedOwnership.getETag(), claimedOwnership.getETag());

File: nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/flow/synchronization/StandardVersionedComponentSynchronizer.java
Patch:
@@ -344,6 +344,7 @@ private void synchronize(final ProcessGroup group, final VersionedProcessGroup p
             group.disconnectVersionControl(false);
         } else {
             final String registryId = determineRegistryId(remoteCoordinates);
+            final String branch = remoteCoordinates.getBranch();
             final String bucketId = remoteCoordinates.getBucketId();
             final String flowId = remoteCoordinates.getFlowId();
             final String version = remoteCoordinates.getVersion();
@@ -362,6 +363,7 @@ private void synchronize(final ProcessGroup group, final VersionedProcessGroup p
             final VersionControlInformation vci = new StandardVersionControlInformation.Builder()
                 .registryId(registryId)
                 .registryName(registryName)
+                .branch(branch)
                 .bucketId(bucketId)
                 .bucketName(bucketId)
                 .flowId(flowId)

File: nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/registry/flow/mapping/NiFiRegistryFlowMapper.java
Patch:
@@ -180,6 +180,7 @@ private boolean applyVersionControlInformation(final ProcessGroup processGroup,
 
         final String storageLocation = versionControlInfo.getStorageLocation();
         coordinates.setStorageLocation(storageLocation);
+        coordinates.setBranch(versionControlInfo.getBranch());
         coordinates.setBucketId(versionControlInfo.getBucketIdentifier());
         coordinates.setFlowId(versionControlInfo.getFlowIdentifier());
         coordinates.setVersion(versionControlInfo.getVersion());

File: nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/groups/ProcessGroup.java
Patch:
@@ -39,6 +39,7 @@
 import org.apache.nifi.parameter.ParameterContext;
 import org.apache.nifi.parameter.ParameterUpdate;
 import org.apache.nifi.processor.Processor;
+import org.apache.nifi.registry.flow.FlowLocation;
 import org.apache.nifi.registry.flow.VersionControlInformation;
 import org.apache.nifi.registry.flow.mapping.FlowMappingOptions;
 import org.apache.nifi.remote.RemoteGroupPort;
@@ -1009,7 +1010,7 @@ public interface ProcessGroup extends ComponentAuthorizable, Positionable, Versi
      *
      * @throws IllegalStateException if the Process Group cannot currently be saved to a Flow Registry
      */
-    void verifyCanSaveToFlowRegistry(String registryId, String bucketId, String flowId, String saveAction);
+    void verifyCanSaveToFlowRegistry(String registryId, FlowLocation flowLocation, String saveAction);
 
     /**
      * @return the version control information that indicates where this flow is stored in a Flow Registry,

File: nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/service/mock/MockProcessGroup.java
Patch:
@@ -48,6 +48,7 @@
 import org.apache.nifi.groups.StatelessGroupScheduledState;
 import org.apache.nifi.parameter.ParameterContext;
 import org.apache.nifi.parameter.ParameterUpdate;
+import org.apache.nifi.registry.flow.FlowLocation;
 import org.apache.nifi.registry.flow.VersionControlInformation;
 import org.apache.nifi.registry.flow.mapping.FlowMappingOptions;
 import org.apache.nifi.remote.RemoteGroupPort;
@@ -696,7 +697,7 @@ public void verifyCanUpdate(VersionedExternalFlow updatedFlow, boolean verifyCon
     }
 
     @Override
-    public void verifyCanSaveToFlowRegistry(String registryId, String bucketId, String flowId, String action) {
+    public void verifyCanSaveToFlowRegistry(String registryId, FlowLocation flowLocation, String action) {
     }
 
     @Override

File: nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java
Patch:
@@ -951,6 +951,9 @@ public Response createProcessGroup(
                     versionControlInfo.setStorageLocation(versionedFlowCoordinates.getStorageLocation());
                 }
             }
+            if (flowSnapshot.getSnapshotMetadata() != null && flowSnapshot.getSnapshotMetadata().getBranch() != null && versionControlInfo.getBranch() == null) {
+                versionControlInfo.setBranch(flowSnapshot.getSnapshotMetadata().getBranch());
+            }
 
             // Step 4: Replace parameter contexts if necessary
             if (ParameterContextHandlingStrategy.REPLACE.equals(parameterContextHandlingStrategy)) {

File: nifi-extension-bundles/nifi-poi-bundle/nifi-poi-services/src/test/java/org/apache/nifi/excel/TestExcelRecordReader.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.nifi.serialization.record.RecordField;
 import org.apache.nifi.serialization.record.RecordFieldType;
 import org.apache.nifi.serialization.record.RecordSchema;
-import org.apache.poi.openxml4j.exceptions.OpenXML4JRuntimeException;
+import com.github.pjfanning.xlsx.exceptions.ReadException;
 import org.apache.poi.openxml4j.opc.OPCPackage;
 import org.apache.poi.poifs.crypt.EncryptionInfo;
 import org.apache.poi.poifs.crypt.EncryptionMode;
@@ -124,7 +124,7 @@ public void testNonExcelFile() {
 
         MalformedRecordException mre = assertThrows(MalformedRecordException.class, () -> new ExcelRecordReader(configuration, getInputStream("notExcel.txt"), logger));
         final Throwable cause = mre.getCause();
-        assertInstanceOf(OpenXML4JRuntimeException.class, cause);
+        assertInstanceOf(ReadException.class, cause);
     }
 
     @Test

File: nifi-extension-bundles/nifi-aws-bundle/nifi-aws-processors/src/test/java/org/apache/nifi/processors/aws/kinesis/stream/record/TestKinesisRecordProcessorRecord.java
Patch:
@@ -299,8 +299,8 @@ public void testProcessUnparsableRecordWithRawOutputWithCheckpoint() throws Shut
         failureFlowFiles.get(0).assertAttributeExists("record.error.message");
 
         // check the invalid json record was *not* retried a 2nd time
-        assertNull(verify(kinesisRecord, times(2)).partitionKey());
-        assertNull(verify(kinesisRecord, times(2)).sequenceNumber());
+        assertNull(verify(kinesisRecord, times(1)).partitionKey());
+        assertNull(verify(kinesisRecord, times(1)).sequenceNumber());
         assertNull(verify(kinesisRecord, times(1)).approximateArrivalTimestamp());
         assertNull(verify(kinesisRecord, times(1)).data());
         verify(checkpointer, times(1)).checkpoint();

File: nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/flowanalysis/FlowAnalysisRuleProvider.java
Patch:
@@ -63,7 +63,7 @@ public interface FlowAnalysisRuleProvider {
     /**
      * Removes the given flow analysis rule from the flow
      *
-     * @param flowAnalysisRule
+     * @param flowAnalysisRule to remove
      *
      * @throws IllegalStateException if the flow analysis rule cannot be removed
      * because it is not disabled, or if the flow analysis rule is not known in the
@@ -74,7 +74,7 @@ public interface FlowAnalysisRuleProvider {
     /**
      * Enables the flow analysis rule
      *
-     * @param flowAnalysisRule
+     * @param flowAnalysisRule to enable
      *
      * @throws IllegalStateException if the FlowAnalysisRule's state is not
      * DISABLED
@@ -84,7 +84,7 @@ public interface FlowAnalysisRuleProvider {
     /**
      * Disables the flow analysis rule
      *
-     * @param flowAnalysisRule
+     * @param flowAnalysisRule to disable
      *
      * @throws IllegalStateException if the FlowAnalysisRule's state is not
      * ENABLED

File: nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/FlowConfigurationDAO.java
Patch:
@@ -48,7 +48,7 @@ public interface FlowConfigurationDAO {
      * @param dataFlow the flow to load
      * @param flowService the flow service
      * @param bundleUpdateStrategy specifies how to handle bundle updates
-     * @throws java.io.IOException
+     * @throws java.io.IOException for unspecified read/write failure
      *
      * @throws FlowSerializationException if proposed flow is not a valid flow configuration file
      * @throws UninheritableFlowException if the proposed flow cannot be loaded by the controller because in doing so would risk orphaning flow files

File: nifi-extension-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/PutDatabaseRecord.java
Patch:
@@ -369,8 +369,8 @@ public class PutDatabaseRecord extends AbstractProcessor {
     static final PropertyDescriptor MAX_BATCH_SIZE = new Builder()
             .name("put-db-record-max-batch-size")
             .displayName("Maximum Batch Size")
-            .description("Specifies maximum number of statements to be included in each batch. Zero means the batch size is not limited, "
-                    + "which can cause memory usage issues for a large number of statements.")
+            .description("Specifies maximum number of sql statements to be included in each batch sent to the database. Zero means the batch size is not limited, "
+                    + "and all statements are put into a single batch which can cause high memory usage issues for a very large number of statements.")
             .defaultValue("1000")
             .required(false)
             .addValidator(StandardValidators.NON_NEGATIVE_INTEGER_VALIDATOR)

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/configuration/AuthenticationSecurityConfiguration.java
Patch:
@@ -34,7 +34,9 @@
  */
 @Configuration
 @Import({
+        ClientRegistrationConfiguration.class,
         JwtAuthenticationSecurityConfiguration.class,
+        JwtDecoderConfiguration.class,
         KerberosAuthenticationSecurityConfiguration.class,
         KnoxAuthenticationSecurityConfiguration.class,
         OidcSecurityConfiguration.class,

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-administration/src/main/java/org/apache/nifi/admin/service/EntityStoreAuditService.java
Patch:
@@ -135,7 +135,8 @@ public Map<String, List<PreviousValue>> getPreviousValues(final String component
             final Map<String, List<PreviousValue>> previousValuesFound = new LinkedHashMap<>();
 
             final EntityIterable actionEntities = storeTransaction.find(EntityType.ACTION.getEntityType(), ActionEntity.SOURCE_ID.getProperty(), componentId);
-            for (Entity actionEntity : actionEntities) {
+            // Reverse default ordering to return oldest entries before newest entries
+            for (Entity actionEntity : actionEntities.reverse()) {
                 final Entity configureDetails = actionEntity.getLink(ActionLink.CONFIGURE_DETAILS.getProperty());
                 if (configureDetails != null) {
                     final String name = getProperty(configureDetails, ConfigureDetailsEntity.NAME);

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/UpdateDatabaseTable.java
Patch:
@@ -379,7 +379,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
             }
             final DBCPService dbcpService = context.getProperty(DBCP_SERVICE).asControllerService(DBCPService.class);
             final DatabaseAdapter databaseAdapter = dbAdapters.get(context.getProperty(DB_TYPE).getValue());
-            try (final Connection connection = dbcpService.getConnection()) {
+            try (final Connection connection = dbcpService.getConnection(flowFile.getAttributes())) {
                 final boolean quoteTableName = context.getProperty(QUOTE_TABLE_IDENTIFIER).asBoolean();
                 final boolean quoteColumnNames = context.getProperty(QUOTE_COLUMN_IDENTIFIERS).asBoolean();
                 final Map<String, String> attributes = new HashMap<>(flowFile.getAttributes());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/flow/synchronization/StandardVersionedComponentSynchronizer.java
Patch:
@@ -741,7 +741,7 @@ private boolean isTempDestinationNecessary(final Connection existingConnection,
         // If the destination is an Input Port or an Output Port and the group changed, use a temp destination
         final ConnectableType connectableType = newDestination.getConnectableType();
         final boolean port = connectableType == ConnectableType.OUTPUT_PORT || connectableType == ConnectableType.INPUT_PORT;
-        final boolean groupChanged = !newDestination.getProcessGroup().equals(existingConnection.getProcessGroup());
+        final boolean groupChanged = !newDestination.getProcessGroup().equals(existingConnection.getDestination().getProcessGroup());
         if (port && groupChanged) {
             LOG.debug("Will use a temporary destination for {} because its destination is a port whose group has changed", existingConnection);
             return true;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/validation/StandardRuleViolationsManager.java
Patch:
@@ -155,7 +155,7 @@ public Collection<RuleViolation> getRuleViolationsForSubject(String subjectId) {
     public Collection<RuleViolation> getRuleViolationsForGroup(String groupId) {
         Set<RuleViolation> groupViolations = subjectIdToRuleViolation.values().stream()
             .map(Map::values).flatMap(Collection::stream)
-            .filter(violation -> violation.getGroupId().equals(groupId))
+            .filter(violation -> groupId.equals(violation.getGroupId()))
             .collect(Collectors.toSet());
 
         return groupViolations;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/util/FTPTransfer.java
Patch:
@@ -313,12 +313,14 @@ private FileInfo newFileInfo(final FTPFile file, String path) {
         perms.append(file.hasPermission(FTPFile.WORLD_ACCESS, FTPFile.WRITE_PERMISSION) ? "w" : "-");
         perms.append(file.hasPermission(FTPFile.WORLD_ACCESS, FTPFile.EXECUTE_PERMISSION) ? "x" : "-");
 
+        final long lastModifiedTime  = (file.getTimestamp() != null) ? file.getTimestamp().getTimeInMillis() : 0L;
+
         FileInfo.Builder builder = new FileInfo.Builder()
             .filename(file.getName())
             .fullPathFileName(newFullForwardPath)
             .directory(file.isDirectory())
             .size(file.getSize())
-            .lastModifiedTime(file.getTimestamp().getTimeInMillis())
+            .lastModifiedTime(lastModifiedTime)
             .permissions(perms.toString())
             .owner(file.getUser())
             .group(file.getGroup());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/search/attributematchers/ControllerServiceNodeMatcher.java
Patch:
@@ -28,6 +28,7 @@ public class ControllerServiceNodeMatcher implements AttributeMatcher<Controller
     private static final String LABEL_VERSION_CONTROL_ID = "Version Control ID";
     private static final String LABEL_NAME = "Name";
     private static final String LABEL_COMMENTS = "Comments";
+    private static final String LABEL_TYPE = "Type";
 
     @Override
     public void match(final ControllerServiceNode component, final SearchQuery query, final List<String> matches) {
@@ -37,5 +38,7 @@ public void match(final ControllerServiceNode component, final SearchQuery query
         addIfMatching(searchTerm, component.getVersionedComponentId().orElse(null), LABEL_VERSION_CONTROL_ID, matches);
         addIfMatching(searchTerm, component.getName(), LABEL_NAME, matches);
         addIfMatching(searchTerm, component.getComments(), LABEL_COMMENTS, matches);
+        addIfMatching(searchTerm, component.getControllerServiceImplementation().getClass().getSimpleName(), LABEL_TYPE, matches);
+        addIfMatching(searchTerm, component.getComponentType(), LABEL_TYPE, matches);
     }
 }

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/QueryDatabaseTable.java
Patch:
@@ -109,6 +109,7 @@ public QueryDatabaseTable() {
         pds.add(INITIAL_LOAD_STRATEGY);
         pds.add(QUERY_TIMEOUT);
         pds.add(FETCH_SIZE);
+        pds.add(AUTO_COMMIT);
         pds.add(MAX_ROWS_PER_FLOW_FILE);
         pds.add(OUTPUT_BATCH_SIZE);
         pds.add(MAX_FRAGMENTS);

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/QueryDatabaseTableRecord.java
Patch:
@@ -208,6 +208,7 @@ public QueryDatabaseTableRecord() {
         pds.add(INITIAL_LOAD_STRATEGY);
         pds.add(QUERY_TIMEOUT);
         pds.add(FETCH_SIZE);
+        pds.add(AUTO_COMMIT);
         pds.add(MAX_ROWS_PER_FLOW_FILE);
         pds.add(OUTPUT_BATCH_SIZE);
         pds.add(MAX_FRAGMENTS);

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/CompiledExpression.java
Patch:
@@ -44,6 +44,7 @@ public Tree getTree() {
         return tree;
     }
 
+    @Override
     public String getExpression() {
         return expression;
     }

File: nifi-commons/nifi-record-path/src/main/java/org/apache/nifi/record/path/functions/Format.java
Patch:
@@ -16,12 +16,12 @@
  */
 package org.apache.nifi.record.path.functions;
 
+import org.apache.commons.lang3.StringUtils;
 import org.apache.nifi.record.path.FieldValue;
 import org.apache.nifi.record.path.RecordPathEvaluationContext;
 import org.apache.nifi.record.path.StandardFieldValue;
 import org.apache.nifi.record.path.paths.RecordPathSegment;
 import org.apache.nifi.record.path.util.RecordPathUtils;
-import org.apache.nifi.util.StringUtils;
 
 import java.time.Instant;
 import java.time.ZoneId;

File: nifi-commons/nifi-record-path/src/main/java/org/apache/nifi/record/path/functions/PadLeft.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.nifi.record.path.functions;
 
+import org.apache.commons.lang3.StringUtils;
 import org.apache.nifi.record.path.paths.RecordPathSegment;
-import org.apache.nifi.util.StringUtils;
 
 public class PadLeft extends Padding {
 

File: nifi-commons/nifi-record-path/src/main/java/org/apache/nifi/record/path/functions/PadRight.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.nifi.record.path.functions;
 
+import org.apache.commons.lang3.StringUtils;
 import org.apache.nifi.record.path.paths.RecordPathSegment;
-import org.apache.nifi.util.StringUtils;
 
 public class PadRight extends Padding {
 

File: nifi-commons/nifi-record-path/src/main/java/org/apache/nifi/record/path/functions/ToDate.java
Patch:
@@ -16,12 +16,12 @@
  */
 package org.apache.nifi.record.path.functions;
 
+import org.apache.commons.lang3.StringUtils;
 import org.apache.nifi.record.path.FieldValue;
 import org.apache.nifi.record.path.RecordPathEvaluationContext;
 import org.apache.nifi.record.path.StandardFieldValue;
 import org.apache.nifi.record.path.paths.RecordPathSegment;
 import org.apache.nifi.record.path.util.RecordPathUtils;
-import org.apache.nifi.util.StringUtils;
 
 import java.time.Instant;
 import java.time.ZoneId;

File: nifi-commons/nifi-properties/src/main/java/org/apache/nifi/util/NiFiProperties.java
Patch:
@@ -319,15 +319,13 @@ public class NiFiProperties extends ApplicationProperties {
     public static final String PYTHON_FRAMEWORK_SOURCE_DIRECTORY = "nifi.python.framework.source.directory";
     public static final String PYTHON_EXTENSION_DIRECTORY_PREFIX = "nifi.python.extensions.source.directory.";
     public static final String PYTHON_WORKING_DIRECTORY = "nifi.python.working.directory";
-    public static final String PYTHON_LOGS_DIRECTORY = "nifi.python.logs.directory";
     public static final String PYTHON_MAX_PROCESSES = "nifi.python.max.processes";
     public static final String PYTHON_MAX_PROCESSES_PER_TYPE = "nifi.python.max.processes.per.extension.type";
     public static final String PYTHON_COMMS_TIMEOUT = "nifi.python.comms.timeout";
 
     public static final String PYTHON_CONTROLLER_DEBUGPY_ENABLED = "nifi.python.controller.debugpy.enabled";
     public static final String PYTHON_CONTROLLER_DEBUGPY_PORT = "nifi.python.controller.debugpy.port";
     public static final String PYTHON_CONTROLLER_DEBUGPY_HOST = "nifi.python.controller.debugpy.host";
-    public static final String PYTHON_CONTROLLER_DEBUGPY_LOGS_DIR = "nifi.python.controller.debugpy.logs.directory";
 
     // kubernetes properties
     public static final String CLUSTER_LEADER_ELECTION_KUBERNETES_LEASE_PREFIX = "nifi.cluster.leader.election.kubernetes.lease.prefix";

File: nifi-nar-bundles/nifi-py4j-bundle/nifi-py4j-integration-tests/src/test/java/org.apache.nifi.py4j/PythonControllerInteractionIT.java
Patch:
@@ -89,7 +89,6 @@ public static void launchPython() throws IOException {
             .commsTimeout(Duration.ofSeconds(0))
             .maxPythonProcessesPerType(25)
             .maxPythonProcesses(100)
-            .pythonLogsDirectory(logsDir)
             .build();
 
         Files.createDirectories(logsDir.toPath());

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/result/registry/ExtensionMetadataResult.java
Patch:
@@ -34,7 +34,7 @@ public class ExtensionMetadataResult extends AbstractWritableResult<List<Extensi
 
     public ExtensionMetadataResult(final ResultType resultType, final List<ExtensionMetadata> extensionMetadata) {
         super(resultType);
-        this.extensionMetadata = Objects.requireNonNull(this.extensionMetadata);
+        this.extensionMetadata = Objects.requireNonNull(extensionMetadata);
     }
 
     @Override

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/processors/script/InvokeScriptedProcessor.java
Patch:
@@ -606,7 +606,7 @@ public void added() {
     @OnStopped
     public void stop(ProcessContext context) {
         // If the script needs to be reloaded at this point, it is because it was empty
-        if (!scriptNeedsReload.get()) {
+        if (scriptRunner != null) {
             invokeScriptedProcessorMethod("onStopped", context);
         }
         scriptingComponentHelper.stop();

File: nifi-nar-bundles/nifi-py4j-bundle/nifi-py4j-bridge/src/main/java/org/apache/nifi/py4j/client/CommandBuilder.java
Patch:
@@ -104,7 +104,7 @@ private String getArgumentLine(final Object arg) {
     }
 
     private String bind(final Object value) {
-        final String objectId = bindings.bind(value);
+        final String objectId = bindings.bind(value, 1);
         boundIds.add(objectId);
         return objectId;
     }

File: nifi-nar-bundles/nifi-py4j-bundle/nifi-python-framework-api/src/main/java/org/apache/nifi/python/processor/PythonProcessor.java
Patch:
@@ -19,13 +19,14 @@
 
 import org.apache.nifi.components.PropertyDescriptor;
 import org.apache.nifi.processor.ProcessContext;
+import org.apache.nifi.python.PythonObjectProxy;
 
 import java.util.List;
 
 /**
  * Base interface for any Python based processor
  */
-public interface PythonProcessor {
+public interface PythonProcessor extends PythonObjectProxy {
 
     List<PropertyDescriptor> getSupportedPropertyDescriptors();
 

File: nifi-nar-bundles/nifi-py4j-bundle/nifi-python-framework-api/src/main/java/org/apache/nifi/python/processor/PythonProcessorAdapter.java
Patch:
@@ -27,6 +27,7 @@
 import java.util.Set;
 
 public interface PythonProcessorAdapter extends PythonProcessor {
+    @Idempotent
     PythonProcessor getProcessor();
 
     @PreserveJavaBinding
@@ -40,9 +41,11 @@ public interface PythonProcessorAdapter extends PythonProcessor {
 
     void onStopped(ProcessContext context);
 
+    @Idempotent
     String getCapabilityDescription();
 
     PropertyDescriptor getSupportedDynamicPropertyDescriptor(String propertyName);
 
+    @Idempotent
     boolean isDynamicPropertySupported();
 }

File: nifi-commons/nifi-record/src/main/java/org/apache/nifi/serialization/record/util/DataTypeUtils.java
Patch:
@@ -1917,6 +1917,8 @@ public static DataType getDataTypeFromSQLTypeValue(final int sqlType) {
         switch (sqlType) {
             case Types.BIGINT:
                 return RecordFieldType.BIGINT.getDataType();
+            case Types.BIT:
+                return RecordFieldType.INT.getDataType();
             case Types.BOOLEAN:
                 return RecordFieldType.BOOLEAN.getDataType();
             case Types.TINYINT:

File: nifi-commons/nifi-record/src/test/java/org/apache/nifi/serialization/record/TestDataTypeUtils.java
Patch:
@@ -558,6 +558,7 @@ public void testGetSQLTypeValueWithBigDecimal() {
     @Test
     public void testGetDataTypeFromSQLTypeValue() {
         assertEquals(RecordFieldType.STRING.getDataType(), DataTypeUtils.getDataTypeFromSQLTypeValue(Types.CLOB));
+        assertEquals(RecordFieldType.INT.getDataType(), DataTypeUtils.getDataTypeFromSQLTypeValue(Types.BIT));
         assertEquals(RecordFieldType.ARRAY.getArrayDataType(RecordFieldType.BYTE.getDataType()), DataTypeUtils.getDataTypeFromSQLTypeValue(Types.BLOB));
         assertEquals(RecordFieldType.STRING.getDataType(), DataTypeUtils.getDataTypeFromSQLTypeValue(Types.CHAR));
     }

File: nifi-commons/nifi-record/src/main/java/org/apache/nifi/serialization/record/util/DataTypeUtils.java
Patch:
@@ -1103,7 +1103,7 @@ public static boolean isEnumTypeCompatible(final Object value, final EnumDataTyp
         return enumType.getEnums() != null && enumType.getEnums().contains(value);
     }
 
-    private static Object toEnum(Object value, EnumDataType dataType, String fieldName) {
+    public static Object toEnum(Object value, EnumDataType dataType, String fieldName) {
         if(dataType.getEnums() != null && dataType.getEnums().contains(value)) {
             return value.toString();
         }

File: nifi-nar-bundles/nifi-iceberg-bundle/nifi-iceberg-processors/src/test/java/org/apache/nifi/processors/iceberg/TestPutIcebergWithHiveCatalog.java
Patch:
@@ -109,7 +109,7 @@ private void initRecordReader() throws InitializationException {
         RecordSchema recordSchema = AvroTypeUtil.createSchema(inputSchema);
 
         for (RecordField recordField : recordSchema.getFields()) {
-            readerFactory.addSchemaField(recordField.getFieldName(), recordField.getDataType().getFieldType(), recordField.isNullable());
+            readerFactory.addSchemaField(recordField);
         }
 
         readerFactory.addRecord(0, "John", "Finance");

File: nifi-nar-bundles/nifi-slack-bundle/nifi-slack-processors/src/main/java/org/apache/nifi/processors/slack/consume/ConsumeChannel.java
Patch:
@@ -634,7 +634,8 @@ private List<Message> fetchReplies(final Message message, final String startCurs
 
         // If the message's latest reply is before our cutoff, don't bother polling for replies
         if (oldestTs != null) {
-            if (new SlackTimestamp(message.getLatestReply()).before(oldestTs)) {
+            final String latestReply = message.getLatestReply();
+            if (latestReply != null && new SlackTimestamp(latestReply).before(oldestTs)) {
                 return Collections.emptyList();
             }
         }

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/PutDatabaseRecordTest.java
Patch:
@@ -1311,9 +1311,10 @@ void testRecordPathOptions() throws InitializationException, SQLException {
         // CREATE, CREATE, CREATE, DELETE, UPDATE
         parser.addRecord("INSERT", new MapRecord(dataSchema, createValues(1, "John Doe", 55)));
         parser.addRecord("INSERT", new MapRecord(dataSchema, createValues(2, "Jane Doe", 44)));
-        parser.addRecord("INSERT", new MapRecord(dataSchema, createValues(3, "Jim Doe", 2)));
+        parser.addRecord("c", new MapRecord(dataSchema, createValues(3, "Jim Doe", 2)));
         parser.addRecord("DELETE", new MapRecord(dataSchema, createValues(2, "Jane Doe", 44)));
         parser.addRecord("UPDATE", new MapRecord(dataSchema, createValues(1, "John Doe", 201)));
+        parser.addRecord("u", new MapRecord(dataSchema, createValues(3, "Jim Doe", 20)));
 
         runner.setProperty(PutDatabaseRecord.RECORD_READER_FACTORY, "parser");
         runner.setProperty(PutDatabaseRecord.STATEMENT_TYPE, PutDatabaseRecord.USE_RECORD_PATH);
@@ -1337,7 +1338,7 @@ void testRecordPathOptions() throws InitializationException, SQLException {
         assertTrue(rs.next());
         assertEquals(3, rs.getInt(1));
         assertEquals("Jim Doe", rs.getString(2));
-        assertEquals(2, rs.getInt(3));
+        assertEquals(20, rs.getInt(3));
         assertFalse(rs.next());
 
         stmt.close();

File: nifi-mock/src/main/java/org/apache/nifi/util/MockProcessContext.java
Patch:
@@ -406,7 +406,7 @@ public void assertValid() {
 
         for (final ValidationResult result : validate()) {
             if (!result.isValid()) {
-                sb.append(result.toString()).append("\n");
+                sb.append(result).append("\n");
                 failureCount++;
             }
         }

File: nifi-nar-bundles/nifi-py4j-bundle/nifi-python-framework-api/src/main/java/org/apache/nifi/python/processor/PythonProcessorBridge.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.nifi.python.processor;
 
 import org.apache.nifi.components.AsyncLoadedProcessor.LoadState;
+import org.apache.nifi.python.PythonController;
 
 import java.util.Optional;
 
@@ -32,6 +33,8 @@ public interface PythonProcessorBridge {
      */
     Optional<PythonProcessorAdapter> getProcessorAdapter();
 
+    void replaceController(PythonController controller);
+
     /**
      * @return the name of the Processor implementation. This will not contain a 'python.' prefix.
      */

File: nifi-nar-bundles/nifi-py4j-bundle/nifi-py4j-bridge/src/main/java/org/apache/nifi/python/processor/FlowFileTransformResult.java
Patch:
@@ -17,9 +17,11 @@
 
 package org.apache.nifi.python.processor;
 
+import org.apache.nifi.python.PythonObjectProxy;
+
 import java.util.Map;
 
-public interface FlowFileTransformResult {
+public interface FlowFileTransformResult extends PythonObjectProxy {
     String getRelationship();
 
     byte[] getContents();

File: nifi-nar-bundles/nifi-py4j-bundle/nifi-py4j-bridge/src/main/java/org/apache/nifi/python/processor/RecordTransformResult.java
Patch:
@@ -17,11 +17,12 @@
 
 package org.apache.nifi.python.processor;
 
+import org.apache.nifi.python.PythonObjectProxy;
 import org.apache.nifi.serialization.record.RecordSchema;
 
 import java.util.Map;
 
-public interface RecordTransformResult {
+public interface RecordTransformResult extends PythonObjectProxy {
 
     String getRecordJson();
 

File: nifi-nar-bundles/nifi-py4j-bundle/nifi-python-framework-api/src/main/java/org/apache/nifi/python/PythonProcessorDetails.java
Patch:
@@ -23,7 +23,7 @@
 
 import java.util.List;
 
-public interface PythonProcessorDetails {
+public interface PythonProcessorDetails extends PythonObjectProxy {
     /**
      * @return the type of the Processor (i.e., the class name of the Processor class)
      */

File: nifi-nar-bundles/nifi-py4j-bundle/nifi-python-framework-api/src/main/java/org/apache/nifi/python/processor/documentation/MultiProcessorUseCaseDetails.java
Patch:
@@ -17,9 +17,11 @@
 
 package org.apache.nifi.python.processor.documentation;
 
+import org.apache.nifi.python.PythonObjectProxy;
+
 import java.util.List;
 
-public interface MultiProcessorUseCaseDetails {
+public interface MultiProcessorUseCaseDetails extends PythonObjectProxy {
     String getDescription();
 
     String getNotes();

File: nifi-nar-bundles/nifi-py4j-bundle/nifi-python-framework-api/src/main/java/org/apache/nifi/python/processor/documentation/ProcessorConfigurationDetails.java
Patch:
@@ -17,7 +17,9 @@
 
 package org.apache.nifi.python.processor.documentation;
 
-public interface ProcessorConfigurationDetails {
+import org.apache.nifi.python.PythonObjectProxy;
+
+public interface ProcessorConfigurationDetails extends PythonObjectProxy {
     String getProcessorType();
 
     String getConfiguration();

File: nifi-nar-bundles/nifi-py4j-bundle/nifi-python-framework-api/src/main/java/org/apache/nifi/python/processor/documentation/PropertyDescription.java
Patch:
@@ -17,7 +17,9 @@
 
 package org.apache.nifi.python.processor.documentation;
 
-public interface PropertyDescription {
+import org.apache.nifi.python.PythonObjectProxy;
+
+public interface PropertyDescription extends PythonObjectProxy {
     String getName();
 
     String getDisplayName();

File: nifi-nar-bundles/nifi-py4j-bundle/nifi-python-framework-api/src/main/java/org/apache/nifi/python/processor/documentation/UseCaseDetails.java
Patch:
@@ -17,9 +17,11 @@
 
 package org.apache.nifi.python.processor.documentation;
 
+import org.apache.nifi.python.PythonObjectProxy;
+
 import java.util.List;
 
-public interface UseCaseDetails {
+public interface UseCaseDetails extends PythonObjectProxy {
     String getDescription();
 
     String getNotes();

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/credentials/provider/factory/strategies/AssumeRoleCredentialsStrategy.java
Patch:
@@ -178,12 +178,13 @@ public AWSCredentialsProvider getDerivedCredentialsProvider(final PropertyContex
 
         AWSSecurityTokenServiceClientBuilder securityTokenServiceBuilder = AWSSecurityTokenServiceClient.builder()
                 .withCredentials(primaryCredentialsProvider)
-                .withRegion(assumeRoleSTSRegion)
                 .withClientConfiguration(config);
 
         if (assumeRoleSTSEndpoint != null && !assumeRoleSTSEndpoint.isEmpty()) {
             AwsClientBuilder.EndpointConfiguration endpointConfiguration = new AwsClientBuilder.EndpointConfiguration(assumeRoleSTSEndpoint, assumeRoleSTSRegion);
             securityTokenServiceBuilder.withEndpointConfiguration(endpointConfiguration);
+        } else {
+            securityTokenServiceBuilder.withRegion(assumeRoleSTSRegion);
         }
 
         STSAssumeRoleSessionCredentialsProvider.Builder builder = new STSAssumeRoleSessionCredentialsProvider.Builder(assumeRoleArn, assumeRoleName)

File: nifi-nar-bundles/nifi-py4j-bundle/nifi-python-framework-api/src/main/java/org/apache/nifi/python/PythonController.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.nifi.python;
 
+import org.apache.nifi.python.processor.PreserveJavaBinding;
 import org.apache.nifi.python.processor.PythonProcessorAdapter;
 
 import java.util.List;
@@ -79,6 +80,7 @@ public interface PythonController {
      * Controller Services.
      * @param lookup the lookup
      */
+    @PreserveJavaBinding
     void setControllerServiceTypeLookup(ControllerServiceTypeLookup lookup);
 
     /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/web/StandardNiFiServiceFacadeTest.java
Patch:
@@ -926,6 +926,7 @@ private RuleViolation createRuleViolation(String groupId, int ruleViolationCount
                 "scope" + ruleViolationCounter,
                 "subjectId" + ruleViolationCounter,
                 "subjectDisplayName" + ruleViolationCounter,
+                null,
                 groupId,
                 "ruleId" + ruleViolationCounter,
                 "issueId" + ruleViolationCounter,

File: nifi-nar-bundles/nifi-questdb-bundle/nifi-questdb-status-history/src/test/java/org/apache/nifi/controller/status/history/AbstractStatusHistoryRepositoryTest.java
Patch:
@@ -393,4 +393,4 @@ protected void assertGc2Status(final List<GarbageCollectionStatus> gc2) {
         assertEquals(41, status.getCollectionCount());
         assertEquals(42, status.getCollectionMillis());
     }
-}
+}
\ No newline at end of file

File: nifi-nar-bundles/nifi-questdb-bundle/nifi-questdb-status-history/src/test/java/org/apache/nifi/controller/status/history/EmbeddedQuestDbStatusHistoryRepositoryForNodeTest.java
Patch:
@@ -23,7 +23,6 @@
 
 public class EmbeddedQuestDbStatusHistoryRepositoryForNodeTest extends AbstractEmbeddedQuestDbStatusHistoryRepositoryTest {
     private static final long ZERO_BYTES = 0L;
-
     private static final int ZERO_COUNT = 0;
 
     @Test

File: nifi-nar-bundles/nifi-questdb-bundle/nifi-questdb/src/main/java/org/apache/nifi/questdb/embedded/SqlExecutionContextFactory.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.controller.status.history.questdb;
+package org.apache.nifi.questdb.embedded;
 
 import io.questdb.cairo.CairoEngine;
 import io.questdb.cairo.security.AllowAllSecurityContext;
@@ -26,7 +26,7 @@ private SqlExecutionContextFactory() {
         // Not to be instantiated
     }
 
-    public static SqlExecutionContext getInstance(final CairoEngine engine) {
+    static SqlExecutionContext getInstance(final CairoEngine engine) {
         return new SqlExecutionContextImpl(engine, 1).with(AllowAllSecurityContext.INSTANCE, null);
     }
 }

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/avro/AvroReaderWithExplicitSchema.java
Patch:
@@ -91,7 +91,7 @@ protected GenericRecord nextAvroRecord() throws IOException {
         try {
             genericRecord = datumReader.read(null, decoder);
         } catch (final EOFException eof) {
-            return null;
+            throw new IOException("Was expecting more data, but reached EOF.", eof);
         }
 
         return genericRecord;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/controller/repository/StandardProcessSession.java
Patch:
@@ -1003,7 +1003,8 @@ public ProvenanceEventRecord next() {
                             // the representation of the FlowFile as it is committed, as this is the only way in which it really
                             // exists in our system -- all other representations are volatile representations that have not been
                             // exposed.
-                            return enrich(rawEvent, flowFileRecordMap, checkpoint.records, rawEvent.getEventType() != ProvenanceEventType.SEND, commitNanos);
+                            final boolean isUpdateAttributes = rawEvent.getEventType() != ProvenanceEventType.SEND && rawEvent.getEventType() != ProvenanceEventType.UPLOAD;
+                            return enrich(rawEvent, flowFileRecordMap, checkpoint.records, isUpdateAttributes, commitNanos);
                         } else if (autoTermIterator != null && autoTermIterator.hasNext()) {
                             return enrich(autoTermIterator.next(), flowFileRecordMap, checkpoint.records, true, commitNanos);
                         }

File: nifi-mock/src/main/java/org/apache/nifi/util/TestRunner.java
Patch:
@@ -394,6 +394,8 @@ void assertAttributes(
      */
     void assertValid();
 
+    boolean isValid();
+
     /**
      * Assert that the currently configured set of properties/annotation data
      * are NOT valid

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/ParameterProvidersEndpointMerger.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.nifi.web.api.entity.ParameterProvidersEntity;
 
 import java.net.URI;
+import java.util.Date;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Map;
@@ -60,6 +61,7 @@ protected void mergeResponses(final ParameterProvidersEntity clientEntity, final
         }
 
         clientEntity.setParameterProviders(new HashSet<>(providerEntities.values()));
+        clientEntity.setCurrentTime(new Date());
     }
 
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/FlowResource.java
Patch:
@@ -672,6 +672,7 @@ public Response getParameterProviders() {
         // create the response entity
         final ParameterProvidersEntity entity = new ParameterProvidersEntity();
         entity.setParameterProviders(parameterProviders);
+        entity.setCurrentTime(new Date());
 
         // generate the response
         return generateOkResponse(entity).build();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-kubernetes-bundle/nifi-framework-kubernetes-leader-election/src/main/java/org/apache/nifi/kubernetes/leader/election/KubernetesLeaderElectionManager.java
Patch:
@@ -80,7 +80,8 @@ public class KubernetesLeaderElectionManager extends TrackedLeaderElectionManage
      * Kubernetes Leader Election Manager constructor with NiFi Properties
      */
     public KubernetesLeaderElectionManager(final NiFiProperties nifiProperties) {
-        this.roleIdPrefix = nifiProperties.getProperty(NiFiProperties.CLUSTER_LEADER_ELECTION_KUBERNETES_LEASE_PREFIX);
+        final String leasePrefix = nifiProperties.getProperty(NiFiProperties.CLUSTER_LEADER_ELECTION_KUBERNETES_LEASE_PREFIX);
+        this.roleIdPrefix = leasePrefix == null || leasePrefix.isBlank() ? null : leasePrefix;
         executorService = createExecutorService();
         leaderElectionCommandProvider = createLeaderElectionCommandProvider();
     }

File: nifi-commons/nifi-properties/src/main/java/org/apache/nifi/util/NiFiProperties.java
Patch:
@@ -326,6 +326,9 @@ public class NiFiProperties extends ApplicationProperties {
     public static final String PYTHON_CONTROLLER_DEBUGPY_HOST = "nifi.python.controller.debugpy.host";
     public static final String PYTHON_CONTROLLER_DEBUGPY_LOGS_DIR = "nifi.python.controller.debugpy.logs.directory";
 
+    // kubernetes properties
+    public static final String CLUSTER_LEADER_ELECTION_KUBERNETES_LEASE_PREFIX = "nifi.cluster.leader.election.kubernetes.lease.prefix";
+
     public static final String DEFAULT_PYTHON_WORKING_DIRECTORY = "./work/python";
 
     // automatic diagnostic defaults

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/main/java/org/apache/nifi/processors/azure/storage/utils/AzureStorageUtils.java
Patch:
@@ -209,7 +209,6 @@ private AzureStorageUtils() {
     private static final ProxySpec[] PROXY_SPECS = {ProxySpec.HTTP, ProxySpec.SOCKS};
     public static final PropertyDescriptor PROXY_CONFIGURATION_SERVICE = new PropertyDescriptor.Builder()
             .fromPropertyDescriptor(ProxyConfiguration.createProxyConfigPropertyDescriptor(false, PROXY_SPECS))
-            .dependsOn(CREDENTIALS_TYPE, AzureStorageCredentialsType.SERVICE_PRINCIPAL, AzureStorageCredentialsType.MANAGED_IDENTITY)
             .build();
 
     public static void validateProxySpec(ValidationContext context, Collection<ValidationResult> results) {

File: nifi-commons/nifi-record/src/test/java/org/apache/nifi/serialization/record/field/ObjectTimestampFieldConverterTest.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.nifi.serialization.record.field;
 
 import org.apache.nifi.serialization.record.RecordFieldType;
-import org.apache.nifi.serialization.record.util.IllegalTypeConversionException;
 import org.junit.jupiter.api.Test;
 
 import java.sql.Timestamp;
@@ -88,7 +87,7 @@ public void testConvertFieldStringFormatNull() {
     @Test
     public void testConvertFieldStringFormatNullNumberFormatException() {
         final String field = String.class.getSimpleName();
-        final IllegalTypeConversionException exception = assertThrows(IllegalTypeConversionException.class, () -> CONVERTER.convertField(field, Optional.empty(), FIELD_NAME));
+        final FieldConversionException exception = assertThrows(FieldConversionException.class, () -> CONVERTER.convertField(field, Optional.empty(), FIELD_NAME));
         assertTrue(exception.getMessage().contains(field));
     }
 
@@ -108,7 +107,7 @@ public void testConvertFieldStringFormatCustomNanoseconds() {
 
     @Test
     public void testConvertFieldStringFormatCustomFormatterException() {
-        final IllegalTypeConversionException exception = assertThrows(IllegalTypeConversionException.class, () -> CONVERTER.convertField(DATE_TIME_DEFAULT, DATE_TIME_NANOSECONDS_PATTERN, FIELD_NAME));
+        final FieldConversionException exception = assertThrows(FieldConversionException.class, () -> CONVERTER.convertField(DATE_TIME_DEFAULT, DATE_TIME_NANOSECONDS_PATTERN, FIELD_NAME));
         assertTrue(exception.getMessage().contains(DATE_TIME_DEFAULT));
     }
 }

File: nifi-commons/nifi-utils/src/main/java/org/apache/nifi/util/FormatUtils.java
Patch:
@@ -447,7 +447,7 @@ public static DateTimeFormatter prepareLenientCaseInsensitiveDateTimeFormatter(S
     }
 
     /**
-     * Parse text to Instant - support different formats like: zoned date time, date time, date, time (similar to those supported in SimpleDateFormat)
+     * Parse text to Instant - support different formats like: zoned date time, date time, date, time
      * @param formatter configured formatter
      * @param text      text which will be parsed
      * @return parsed Instant

File: nifi-commons/nifi-utils/src/main/java/org/apache/nifi/util/text/DateTimeMatcherCompiler.java
Patch:
@@ -49,8 +49,8 @@ DateTimeMatcher compile(final String format) {
 
         matchers.add(regexMatcher);
 
-        // Use the SimpleDateFormatMatcher only if our regex matches. This allows us to parse the date only to guarantee that we are correct if we say that the input text matches.
-        matchers.add(new SimpleDateFormatMatcher(format));
+        // Use the DateTimeFormatterMatcher only if our regex matches. This allows us to parse the date only to guarantee that we are correct if we say that the input text matches.
+        matchers.add(new DateTimeFormatterMatcher(format));
         return new ListDateTimeMatcher(matchers);
     }
 }

File: nifi-commons/nifi-utils/src/main/java/org/apache/nifi/util/text/RegexDateTimeMatcher.java
Patch:
@@ -487,7 +487,7 @@ private void addGeneralTimeZone() {
         }
 
         private String getGMTOffsetTimeZone() {
-            // From SimpleDateFormat JavaDocs, GMTOffsetTimeZone defined as: GMT Sign Hours : Minutes
+            // From Date Format JavaDocs, GMTOffsetTimeZone defined as: GMT Sign Hours : Minutes
             // Sign defined as '-' or '+'
             // Hours defined as 1 or 2 digits, Minutes defined as 1 or 2 digits
             // Digit defined as number between 0-9

File: nifi-commons/nifi-utils/src/test/java/org/apache/nifi/util/text/TestRegexDateTimeMatcher.java
Patch:
@@ -45,8 +45,6 @@ public void testCommonFormatsExpectedToPass() {
         exampleToPattern.put("12 Dec 2018", "dd MMM yyyy");
         exampleToPattern.put("12 December 2018", "dd MMM yyyy");
 
-        // TODO: The following examples are taken from the SimpleDateFormat's JavaDoc. Ensure that this is not a licensing concern,
-        // since it is not being distributed.
         exampleToPattern.put("2001.07.04 AD at 12:08:56 PDT", "yyyy.MM.dd G 'at' HH:mm:ss z");
         exampleToPattern.put("Wed, Jul 4, '01", "EEE, MMM d, ''yy");
         exampleToPattern.put("12:08 PM", "h:mm a");

File: nifi-nar-bundles/nifi-extension-utils/nifi-record-utils/nifi-json-record-utils/src/main/java/org/apache/nifi/json/JsonPathRowRecordReader.java
Patch:
@@ -196,7 +196,7 @@ record = true;
                 case UUID:
                 case TIMESTAMP:
                     try {
-                        return DataTypeUtils.convertType(value, dataType, getLazyDateFormat(), getLazyTimeFormat(), getLazyTimestampFormat(), fieldName);
+                        return DataTypeUtils.convertType(value, dataType, getDateFormat(), getTimeFormat(), getTimestampFormat(), fieldName);
                     } catch (final Exception e) {
                         return value;
                     }
@@ -249,7 +249,7 @@ protected Object convert(final Object value, final DataType dataType, final Stri
 
             return new MapRecord(childSchema, coercedValues);
         } else {
-            return DataTypeUtils.convertType(value, dataType, getLazyDateFormat(), getLazyTimeFormat(), getLazyTimestampFormat(), fieldName);
+            return DataTypeUtils.convertType(value, dataType, getDateFormat(), getTimeFormat(), getTimestampFormat(), fieldName);
         }
     }
 

File: nifi-nar-bundles/nifi-extension-utils/nifi-record-utils/nifi-json-record-utils/src/main/java/org/apache/nifi/json/JsonTreeRowRecordReader.java
Patch:
@@ -217,7 +217,7 @@ protected Object convertField(final JsonNode fieldNode, final String fieldName,
             case UUID:
             case TIMESTAMP: {
                 final Object rawValue = getRawNodeValue(fieldNode, fieldName);
-                return DataTypeUtils.convertType(rawValue, desiredType, getLazyDateFormat(), getLazyTimeFormat(), getLazyTimestampFormat(), fieldName);
+                return DataTypeUtils.convertType(rawValue, desiredType, getDateFormat(), getTimeFormat(), getTimestampFormat(), fieldName);
             }
             case MAP: {
                 final DataType valueType = ((MapDataType) desiredType).getValueType();

File: nifi-nar-bundles/nifi-extension-utils/nifi-record-utils/nifi-standard-record-utils/src/main/java/org/apache/nifi/serialization/DateTimeUtils.java
Patch:
@@ -28,7 +28,7 @@ public class DateTimeUtils {
             + "If specified, the value must match the Java Simple Date Format (for example, MM/dd/yyyy for a two-digit month, followed by "
             + "a two-digit day, followed by a four-digit year, all separated by '/' characters, as in 01/01/2017).")
         .expressionLanguageSupported(ExpressionLanguageScope.NONE)
-        .addValidator(new SimpleDateFormatValidator())
+        .addValidator(new DateTimeFormatValidator())
         .required(false)
         .build();
 
@@ -39,7 +39,7 @@ public class DateTimeUtils {
             + "If specified, the value must match the Java Simple Date Format (for example, HH:mm:ss for a two-digit hour in 24-hour format, followed by "
             + "a two-digit minute, followed by a two-digit second, all separated by ':' characters, as in 18:04:15).")
         .expressionLanguageSupported(ExpressionLanguageScope.NONE)
-        .addValidator(new SimpleDateFormatValidator())
+        .addValidator(new DateTimeFormatValidator())
         .required(false)
         .build();
 
@@ -51,7 +51,7 @@ public class DateTimeUtils {
             + "a two-digit day, followed by a four-digit year, all separated by '/' characters; and then followed by a two-digit hour in 24-hour format, followed by "
             + "a two-digit minute, followed by a two-digit second, all separated by ':' characters, as in 01/01/2017 18:04:15).")
         .expressionLanguageSupported(ExpressionLanguageScope.NONE)
-        .addValidator(new SimpleDateFormatValidator())
+        .addValidator(new DateTimeFormatValidator())
         .required(false)
         .build();
 }

File: nifi-nar-bundles/nifi-mongodb-bundle/nifi-mongodb-processors/src/test/java/org/apache/nifi/processors/mongodb/GetMongoIT.java
Patch:
@@ -39,7 +39,6 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
-import java.text.SimpleDateFormat;
 import java.util.Arrays;
 import java.util.Calendar;
 import java.util.Collection;
@@ -184,10 +183,8 @@ public void testCleanJson() throws Exception {
         byte[] raw = runner.getContentAsByteArray(flowFiles.get(0));
         ObjectMapper mapper = new ObjectMapper();
         Map<String, Object> parsed = mapper.readValue(raw, Map.class);
-        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
 
         assertTrue(parsed.get("date_field").getClass() == String.class);
-        assertTrue(((String)parsed.get("date_field")).startsWith(format.format(CAL.getTime())));
     }
 
     @Test

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ParseCEF.java
Patch:
@@ -97,7 +97,7 @@ public class ParseCEF extends AbstractProcessor {
     private final static DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
 
     // for some reason Jackson doesnt seem to be able to use DateTieFormater
-    // so we use a SimpleDateFormat to format within flowfile-content
+    // so we use a DateFormat to format within flowfile-content
     private final SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
 
 

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/windowsevent/WindowsEventLogReader.java
Patch:
@@ -39,7 +39,7 @@ public class WindowsEventLogReader extends AbstractControllerService implements
 
     private static final String DATE_FORMAT = RecordFieldType.DATE.getDefaultFormat();
     private static final String TIME_FORMAT = RecordFieldType.TIME.getDefaultFormat();
-    private static final String TIMESTAMP_FORMAT = "yyyy-MM-dd'T'HH:mm:ss.SSS"; // The timestamps have nanoseconds but need a SimpleDateFormat string here
+    private static final String TIMESTAMP_FORMAT = "yyyy-MM-dd'T'HH:mm:ss.SSS";
 
     @Override
     public RecordReader createRecordReader(Map<String, String> variables, InputStream in, long inputLength, ComponentLog logger)

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/test/java/org/apache/nifi/util/TestSchemaInferenceUtil.java
Patch:
@@ -78,8 +78,8 @@ private static Stream<Arguments> dataForTimeInference() {
             Arguments.of("2017.03.19", RecordFieldType.STRING.getDataType()),
 
             Arguments.of("12:13:14", RecordFieldType.TIME.getDataType(TIME_FORMAT)),
-            Arguments.of("12:13:0", RecordFieldType.TIME.getDataType(TIME_FORMAT)),
-            Arguments.of("12:3:0", RecordFieldType.TIME.getDataType(TIME_FORMAT)),
+            Arguments.of("12:13:00", RecordFieldType.TIME.getDataType(TIME_FORMAT)),
+            Arguments.of("12:03:00", RecordFieldType.TIME.getDataType(TIME_FORMAT)),
             Arguments.of("25:13:14", RecordFieldType.STRING.getDataType()),
             Arguments.of("25::14", RecordFieldType.STRING.getDataType()),
 

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/test/java/org/apache/nifi/windowsevent/TestWindowsEventLogRecordReader.java
Patch:
@@ -40,7 +40,7 @@ public class TestWindowsEventLogRecordReader {
 
     private static final String DATE_FORMAT = RecordFieldType.DATE.getDefaultFormat();
     private static final String TIME_FORMAT = RecordFieldType.TIME.getDefaultFormat();
-    private static final String TIMESTAMP_FORMAT = "yyyy-MM-dd'T'HH:mm:ss.SSS"; // The timestamps have nanoseconds but need a SimpleDateFormat string here
+    private static final String TIMESTAMP_FORMAT = "yyyy-MM-dd'T'HH:mm:ss.SSS";
 
     @Test
     public void testSingleEvent() throws IOException, MalformedRecordException {

File: nifi-nar-bundles/nifi-asn1-bundle/nifi-asn1-services/src/main/java/org/apache/nifi/jasn1/convert/converters/BerStringConverter.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.nifi.jasn1.convert.converters;
 
+import com.beanit.asn1bean.ber.types.BerObjectIdentifier;
 import com.beanit.asn1bean.ber.types.BerType;
 import com.beanit.asn1bean.ber.types.string.BerBMPString;
 import com.beanit.asn1bean.ber.types.string.BerGeneralString;
@@ -46,7 +47,8 @@ public class BerStringConverter implements JASN1TypeAndValueConverter {
             BerVisibleString.class,
             BerVideotexString.class,
             BerBMPString.class,
-            BerUTF8String.class
+            BerUTF8String.class,
+            BerObjectIdentifier.class
     );
 
     @Override

File: nifi-api/src/test/java/org/apache/nifi/components/EnumDescribedValue.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.components;
 
-public enum EnumAllowableValue implements DescribedValue {
+public enum EnumDescribedValue implements DescribedValue {
 
     GREEN {
         @Override

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ControllerResource.java
Patch:
@@ -978,6 +978,7 @@ public Response getFlowAnalysisRules() {
         // create the response entity
         final FlowAnalysisRulesEntity entity = new FlowAnalysisRulesEntity();
         entity.setFlowAnalysisRules(flowAnalysisRules);
+        entity.setCurrentTime(new Date());
 
         // generate the response
         return generateOkResponse(entity).build();

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/MergeContent.java
Patch:
@@ -726,8 +726,10 @@ private byte[] getDelimiterContent(final ProcessContext context, final List<Flow
             final String delimiterStrategyValue = context.getProperty(DELIMITER_STRATEGY).getValue();
             if (DELIMITER_STRATEGY_FILENAME.getValue().equals(delimiterStrategyValue)) {
                 return getDelimiterFileContent(context, wrappers, descriptor);
-            } else {
+            } else if (DELIMITER_STRATEGY_TEXT.getValue().equals(delimiterStrategyValue)) {
                 return getDelimiterTextContent(context, wrappers, descriptor);
+            } else {
+                return null;
             }
         }
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestValidateCsv.java
Patch:
@@ -122,7 +122,7 @@ public void testValidDateOptionalDouble() {
         runner.run();
         runner.assertTransferCount(ValidateCsv.REL_INVALID, 1);
         runner.getFlowFilesForRelationship(ValidateCsv.REL_INVALID).get(0).assertAttributeEquals("validation.error.message",
-                "'22/111954' could not be parsed as a Date");
+                "'22/111954' could not be parsed as a Date at {line=1, row=1, column=2}");
     }
 
     @Test
@@ -200,7 +200,7 @@ public void testStrlenStrMinMaxStrRegex() {
         runner.run();
         runner.assertTransferCount(ValidateCsv.REL_INVALID, 1);
         runner.getFlowFilesForRelationship(ValidateCsv.REL_INVALID).get(0).assertAttributeEquals("validation.error.message",
-                "'testapache.org' does not match the regular expression '[a-z0-9\\._]+@[a-z0-9\\.]+'");
+                "'testapache.org' does not match the regular expression '[a-z0-9\\._]+@[a-z0-9\\.]+' at {line=1, row=1, column=3}");
     }
 
     @Test

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java
Patch:
@@ -3417,6 +3417,7 @@ public BulletinDTO createBulletinDto(final Bulletin bulletin) {
        dto.setCategory(bulletin.getCategory());
        dto.setLevel(bulletin.getLevel());
        dto.setMessage(bulletin.getMessage());
+       dto.setSourceType(bulletin.getSourceType().name());
        return dto;
    }
 
@@ -4469,6 +4470,7 @@ public BulletinDTO copy(final BulletinDTO original) {
        copy.setLevel(original.getLevel());
        copy.setMessage(original.getMessage());
        copy.setNodeAddress(original.getNodeAddress());
+       copy.setSourceType(original.getSourceType());
        return copy;
    }
 

File: nifi-nar-bundles/nifi-provenance-repository-bundle/nifi-persistent-provenance-repository/src/main/java/org/apache/nifi/provenance/EncryptedWriteAheadProvenanceRepository.java
Patch:
@@ -106,6 +106,6 @@ public synchronized void initialize(final EventReporter eventReporter, final Aut
         };
 
         // Delegate the init to the parent impl
-        super.init(recordWriterFactory, recordReaderFactory, eventReporter, authorizer, resourceFactory);
+        super.init(recordWriterFactory, recordReaderFactory, eventReporter, authorizer, resourceFactory, fileManager);
     }
 }

File: nifi-nar-bundles/nifi-provenance-repository-bundle/nifi-persistent-provenance-repository/src/main/java/org/apache/nifi/provenance/WriteAheadProvenanceRepository.java
Patch:
@@ -137,13 +137,12 @@ public synchronized void initialize(final EventReporter eventReporter, final Aut
             }
         };
 
-       init(recordWriterFactory, recordReaderFactory, eventReporter, authorizer, resourceFactory);
+       init(recordWriterFactory, recordReaderFactory, eventReporter, authorizer, resourceFactory, fileManager);
     }
 
     synchronized void init(RecordWriterFactory recordWriterFactory, RecordReaderFactory recordReaderFactory,
                            final EventReporter eventReporter, final Authorizer authorizer,
-                           final ProvenanceAuthorizableFactory resourceFactory) throws IOException {
-        final EventFileManager fileManager = new EventFileManager();
+                           final ProvenanceAuthorizableFactory resourceFactory, final EventFileManager fileManager) throws IOException {
 
         eventStore = new PartitionedWriteAheadEventStore(config, recordWriterFactory, recordReaderFactory, eventReporter, fileManager);
 

File: minifi/minifi-c2/minifi-c2-api/src/main/java/org/apache/nifi/minifi/c2/api/security/authorization/Authorizer.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.springframework.security.core.Authentication;
 
-import javax.ws.rs.core.UriInfo;
+import jakarta.ws.rs.core.UriInfo;
 
 /**
  * Interface responsible for authorizing a given authentication to access a given uri

File: minifi/minifi-c2/minifi-c2-integration-tests/src/test/java/org/apache/nifi/minifi/c2/integration/test/AbstractTestUnsecure.java
Patch:
@@ -21,7 +21,7 @@
 
 import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector;
+import com.fasterxml.jackson.module.jakarta.xmlbind.JakartaXmlBindAnnotationIntrospector;
 import com.palantir.docker.compose.DockerComposeExtension;
 import com.palantir.docker.compose.connection.Container;
 import com.palantir.docker.compose.connection.DockerPort;
@@ -104,7 +104,7 @@ protected HttpURLConnection openSuperUserUrlConnection(String url) throws IOExce
 
     protected VersionedDataflow toVersionedDataFlow(InputStream inputStream) throws IOException {
         ObjectMapper objectMapper = new ObjectMapper();
-        objectMapper.setAnnotationIntrospector(new JaxbAnnotationIntrospector(objectMapper.getTypeFactory()));
+        objectMapper.setAnnotationIntrospector(new JakartaXmlBindAnnotationIntrospector(objectMapper.getTypeFactory()));
         objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
         return objectMapper.readValue(IOUtils.toByteArray(inputStream), VersionedDataflow.class);
     }

File: minifi/minifi-c2/minifi-c2-service/src/main/java/org/apache/nifi/minifi/c2/configuration/C2ResourceConfig.java
Patch:
@@ -22,8 +22,8 @@
 import org.springframework.context.ApplicationContext;
 import org.springframework.web.context.support.WebApplicationContextUtils;
 
-import javax.servlet.ServletContext;
-import javax.ws.rs.core.Context;
+import jakarta.servlet.ServletContext;
+import jakarta.ws.rs.core.Context;
 
 public class C2ResourceConfig extends ResourceConfig {
 

File: minifi/minifi-c2/minifi-c2-service/src/main/java/org/apache/nifi/minifi/c2/security/authentication/C2AnonymousAuthenticationFilter.java
Patch:
@@ -21,7 +21,7 @@
 import org.springframework.security.core.authority.SimpleGrantedAuthority;
 import org.springframework.security.web.authentication.AnonymousAuthenticationFilter;
 
-import javax.servlet.http.HttpServletRequest;
+import jakarta.servlet.http.HttpServletRequest;
 import java.util.Arrays;
 
 public class C2AnonymousAuthenticationFilter extends AnonymousAuthenticationFilter {

File: minifi/minifi-c2/minifi-c2-service/src/main/java/org/apache/nifi/minifi/c2/security/authorization/GrantedAuthorityAuthorizer.java
Patch:
@@ -26,8 +26,8 @@
 import org.springframework.security.core.GrantedAuthority;
 import org.yaml.snakeyaml.Yaml;
 
-import javax.ws.rs.core.MultivaluedMap;
-import javax.ws.rs.core.UriInfo;
+import jakarta.ws.rs.core.MultivaluedMap;
+import jakarta.ws.rs.core.UriInfo;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.Arrays;

File: minifi/minifi-c2/minifi-c2-service/src/main/java/org/apache/nifi/minifi/c2/service/ConfigurationProviderInfo.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.nifi.minifi.c2.api.ConfigurationProviderException;
 import org.apache.nifi.minifi.c2.api.util.Pair;
 
-import javax.ws.rs.core.MediaType;
+import jakarta.ws.rs.core.MediaType;
 import java.util.List;
 
 public class ConfigurationProviderInfo {

File: minifi/minifi-c2/minifi-c2-service/src/main/java/org/apache/nifi/minifi/c2/service/ConfigurationProviderKey.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.nifi.minifi.c2.service;
 
-import javax.ws.rs.core.MediaType;
+import jakarta.ws.rs.core.MediaType;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;

File: minifi/minifi-c2/minifi-c2-service/src/main/java/org/apache/nifi/minifi/c2/service/ConfigurationProviderValue.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.nifi.minifi.c2.api.Configuration;
 import org.apache.nifi.minifi.c2.api.ConfigurationProviderException;
 
-import javax.ws.rs.core.MediaType;
+import jakarta.ws.rs.core.MediaType;
 
 public class ConfigurationProviderValue {
     private final Configuration configuration;

File: minifi/minifi-c2/minifi-c2-service/src/main/java/org/apache/nifi/minifi/c2/util/HttpRequestUtil.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.nifi.minifi.c2.util;
 
-import javax.servlet.ServletRequest;
-import javax.servlet.http.HttpServletRequest;
+import jakarta.servlet.ServletRequest;
+import jakarta.servlet.http.HttpServletRequest;
 
 public class HttpRequestUtil {
     public static String getQueryString(HttpServletRequest request) {

File: minifi/minifi-commons/minifi-commons-framework/src/main/java/org/apache/nifi/minifi/commons/service/StandardFlowSerDeService.java
Patch:
@@ -23,7 +23,7 @@
 import com.fasterxml.jackson.core.JsonFactory;
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector;
+import com.fasterxml.jackson.module.jakarta.xmlbind.JakartaXmlBindAnnotationIntrospector;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import org.apache.nifi.controller.flow.VersionedDataflow;
@@ -41,7 +41,7 @@ public static StandardFlowSerDeService defaultInstance() {
         ObjectMapper objectMapper = new ObjectMapper();
         objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
         objectMapper.setDefaultPropertyInclusion(JsonInclude.Value.construct(JsonInclude.Include.NON_NULL, JsonInclude.Include.NON_NULL));
-        objectMapper.setAnnotationIntrospector(new JaxbAnnotationIntrospector(objectMapper.getTypeFactory()));
+        objectMapper.setAnnotationIntrospector(new JakartaXmlBindAnnotationIntrospector(objectMapper.getTypeFactory()));
         objectMapper.configure(FAIL_ON_UNKNOWN_PROPERTIES, false);
         return new StandardFlowSerDeService(objectMapper);
     }

File: minifi/minifi-commons/minifi-commons-framework/src/test/java/org/apache/nifi/minifi/commons/service/StandardFlowEnrichServiceTest.java
Patch:
@@ -31,7 +31,7 @@
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector;
+import com.fasterxml.jackson.module.jakarta.xmlbind.JakartaXmlBindAnnotationIntrospector;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.util.HashMap;
@@ -162,7 +162,7 @@ private VersionedDataflow loadDefaultFlow() {
 
     private VersionedDataflow flowFromString(String flow) {
         ObjectMapper objectMapper = new ObjectMapper();
-        objectMapper.setAnnotationIntrospector(new JaxbAnnotationIntrospector(objectMapper.getTypeFactory()));
+        objectMapper.setAnnotationIntrospector(new JakartaXmlBindAnnotationIntrospector(objectMapper.getTypeFactory()));
         objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
 
         try {
@@ -176,7 +176,7 @@ private String flowToString(VersionedDataflow versionedDataflow) {
         ObjectMapper objectMapper = new ObjectMapper();
         objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
         objectMapper.setDefaultPropertyInclusion(JsonInclude.Value.construct(JsonInclude.Include.NON_NULL, JsonInclude.Include.NON_NULL));
-        objectMapper.setAnnotationIntrospector(new JaxbAnnotationIntrospector(objectMapper.getTypeFactory()));
+        objectMapper.setAnnotationIntrospector(new JakartaXmlBindAnnotationIntrospector(objectMapper.getTypeFactory()));
         objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
 
         try {

File: minifi/minifi-toolkit/minifi-toolkit-configuration/src/main/java/org/apache/nifi/minifi/toolkit/configuration/json/TransformYamlCommandFactory.java
Patch:
@@ -26,7 +26,7 @@
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector;
+import com.fasterxml.jackson.module.jakarta.xmlbind.JakartaXmlBindAnnotationIntrospector;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
@@ -147,7 +147,7 @@ private ObjectMapper createObjectMapper() {
         ObjectMapper objectMapper = new ObjectMapper();
         objectMapper.setDefaultPropertyInclusion(JsonInclude.Value.construct(JsonInclude.Include.NON_NULL, JsonInclude.Include.NON_NULL));
         objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
-        objectMapper.setAnnotationIntrospector(new JaxbAnnotationIntrospector(objectMapper.getTypeFactory()));
+        objectMapper.setAnnotationIntrospector(new JakartaXmlBindAnnotationIntrospector(objectMapper.getTypeFactory()));
         objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
         return objectMapper;
     }

File: nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/cluster/NodeInformationAdapter.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.remote.cluster;
 
-import javax.xml.bind.annotation.adapters.XmlAdapter;
+import jakarta.xml.bind.annotation.adapters.XmlAdapter;
 
 public class NodeInformationAdapter extends XmlAdapter<AdaptedNodeInformation, NodeInformation> {
 

File: nifi-commons/nifi-web-utils/src/main/java/org/apache/nifi/web/util/RequestUriBuilder.java
Patch:
@@ -18,8 +18,8 @@
 
 import org.apache.commons.lang3.StringUtils;
 
-import javax.servlet.ServletContext;
-import javax.servlet.http.HttpServletRequest;
+import jakarta.servlet.ServletContext;
+import jakarta.servlet.http.HttpServletRequest;
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.util.Arrays;

File: nifi-commons/nifi-web-utils/src/test/java/org/apache/nifi/web/util/RequestUriBuilderTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.mockito.Mock;
 import org.mockito.junit.jupiter.MockitoExtension;
 
-import javax.servlet.http.HttpServletRequest;
+import jakarta.servlet.http.HttpServletRequest;
 import java.net.URI;
 import java.util.Arrays;
 import java.util.Collections;

File: nifi-commons/nifi-web-utils/src/test/java/org/apache/nifi/web/util/WebUtilsTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.mockito.Mock;
 import org.mockito.junit.jupiter.MockitoExtension;
 
-import javax.servlet.http.HttpServletRequest;
+import jakarta.servlet.http.HttpServletRequest;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.mockito.ArgumentMatchers.any;

File: nifi-manifest/nifi-extension-manifest-model/src/main/java/org/apache/nifi/extension/manifest/AllowableValue.java
Patch:
@@ -19,8 +19,8 @@
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
 
 @ApiModel
 @XmlAccessorType(XmlAccessType.FIELD)

File: nifi-manifest/nifi-extension-manifest-model/src/main/java/org/apache/nifi/extension/manifest/Attribute.java
Patch:
@@ -19,8 +19,8 @@
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
 
 @ApiModel
 @XmlAccessorType(XmlAccessType.FIELD)

File: nifi-manifest/nifi-extension-manifest-model/src/main/java/org/apache/nifi/extension/manifest/BuildInfo.java
Patch:
@@ -19,8 +19,8 @@
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
 
 @ApiModel
 @XmlAccessorType(XmlAccessType.FIELD)

File: nifi-manifest/nifi-extension-manifest-model/src/main/java/org/apache/nifi/extension/manifest/ControllerServiceDefinition.java
Patch:
@@ -19,8 +19,8 @@
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
 import java.util.Objects;
 
 @ApiModel

File: nifi-manifest/nifi-extension-manifest-model/src/main/java/org/apache/nifi/extension/manifest/DefaultSchedule.java
Patch:
@@ -19,8 +19,8 @@
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
 
 @ApiModel
 @XmlAccessorType(XmlAccessType.FIELD)

File: nifi-manifest/nifi-extension-manifest-model/src/main/java/org/apache/nifi/extension/manifest/DefaultSettings.java
Patch:
@@ -19,8 +19,8 @@
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
 
 @ApiModel
 @XmlAccessorType(XmlAccessType.FIELD)

File: nifi-manifest/nifi-extension-manifest-model/src/main/java/org/apache/nifi/extension/manifest/Dependency.java
Patch:
@@ -19,8 +19,8 @@
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
 
 @ApiModel
 @XmlAccessorType(XmlAccessType.FIELD)

File: nifi-manifest/nifi-extension-manifest-model/src/main/java/org/apache/nifi/extension/manifest/DependentValues.java
Patch:
@@ -19,9 +19,9 @@
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlElement;
 import java.util.List;
 
 @ApiModel

File: nifi-manifest/nifi-extension-manifest-model/src/main/java/org/apache/nifi/extension/manifest/DynamicProperty.java
Patch:
@@ -19,8 +19,8 @@
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
 
 @ApiModel
 @XmlAccessorType(XmlAccessType.FIELD)

File: nifi-manifest/nifi-extension-manifest-model/src/main/java/org/apache/nifi/extension/manifest/DynamicRelationship.java
Patch:
@@ -19,8 +19,8 @@
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
 
 @ApiModel
 @XmlAccessorType(XmlAccessType.FIELD)

File: nifi-manifest/nifi-extension-manifest-model/src/main/java/org/apache/nifi/extension/manifest/ParentNar.java
Patch:
@@ -19,8 +19,8 @@
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
 
 @ApiModel
 @XmlAccessorType(XmlAccessType.FIELD)

File: nifi-manifest/nifi-extension-manifest-model/src/main/java/org/apache/nifi/extension/manifest/ProvidedServiceAPI.java
Patch:
@@ -20,8 +20,8 @@
 import io.swagger.annotations.ApiModelProperty;
 
 import javax.validation.constraints.NotBlank;
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
 import java.util.Objects;
 
 @ApiModel

File: nifi-manifest/nifi-extension-manifest-model/src/main/java/org/apache/nifi/extension/manifest/Relationship.java
Patch:
@@ -19,8 +19,8 @@
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
 
 @ApiModel
 @XmlAccessorType(XmlAccessType.FIELD)

File: nifi-manifest/nifi-extension-manifest-model/src/main/java/org/apache/nifi/extension/manifest/Restriction.java
Patch:
@@ -20,8 +20,8 @@
 import io.swagger.annotations.ApiModelProperty;
 
 import javax.validation.constraints.NotBlank;
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
 import java.util.Objects;
 
 @ApiModel

File: nifi-manifest/nifi-extension-manifest-model/src/main/java/org/apache/nifi/extension/manifest/SystemResourceConsideration.java
Patch:
@@ -19,8 +19,8 @@
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
 
 @ApiModel
 @XmlAccessorType(XmlAccessType.FIELD)

File: nifi-nar-bundles/nifi-extension-utils/nifi-listed-entity/src/main/java/org/apache/nifi/processor/util/list/EntityListing.java
Patch:
@@ -20,8 +20,8 @@
 import java.util.Collection;
 import java.util.Date;
 
-import javax.xml.bind.annotation.XmlTransient;
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlTransient;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * A simple POJO for maintaining state about the last entities listed by an AbstractListProcessor that was performed so that

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/AboutDTO.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.nifi.web.api.dto.util.DateTimeAdapter;
 import org.apache.nifi.web.api.dto.util.TimezoneAdapter;
 
-import javax.xml.bind.annotation.XmlType;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.Date;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/AccessConfigurationDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * Details for the access configuration.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/AccessPolicyDTO.java
Patch:
@@ -19,7 +19,7 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.entity.TenantEntity;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.Set;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/AccessPolicySummaryDTO.java
Patch:
@@ -19,7 +19,7 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.entity.ComponentReferenceEntity;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * Details for the access configuration.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/AccessStatusDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 /**
  * A serialized representation of this class can be placed in the entity body of a response to the API. This particular entity holds the users access status.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/AccessTokenExpirationDTO.java
Patch:
@@ -19,8 +19,8 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.InstantAdapter;
 
-import javax.xml.bind.annotation.XmlRootElement;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.time.Instant;
 
 @XmlRootElement(name = "accessTokenExpiration")

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/AffectedComponentDTO.java
Patch:
@@ -19,7 +19,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.Collection;
 
 @XmlType(name = "affectedComponent")

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/AllowableValueDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * The allowable values for a property with a constrained set of options.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/AnalyzeFlowRequestDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * A request to analyze (a part) of the flow.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/AnalyzeFlowRequestUpdateStepDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 @XmlType(name = "analyzeFlowRequestUpdateStep")
 public class AnalyzeFlowRequestUpdateStepDTO extends UpdateStepDTO {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/AsynchronousRequestDTO.java
Patch:
@@ -19,7 +19,7 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.TimestampAdapter;
 
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.Date;
 import java.util.List;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/BannerDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * Banners that should appear on the top and bottom of this NiFi.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/BatchSettingsDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * Details of batch settings of a remote process group port.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/BulletinBoardDTO.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.nifi.web.api.dto.util.TimeAdapter;
 import org.apache.nifi.web.api.entity.BulletinEntity;
 
-import javax.xml.bind.annotation.XmlType;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.Date;
 import java.util.List;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/BulletinDTO.java
Patch:
@@ -19,8 +19,8 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.TimeAdapter;
 
-import javax.xml.bind.annotation.XmlType;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.Date;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/BulletinQueryDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * A query for bulletin board. Will filter the resulting bulletin board according to the criteria in this query.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/BundleDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.Objects;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ClusterDTO.java
Patch:
@@ -19,8 +19,8 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.TimeAdapter;
 
-import javax.xml.bind.annotation.XmlType;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.Collection;
 import java.util.Date;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ClusterSummaryDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * Details for the controller configuration.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ComponentDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * Base class for all nifi components.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ComponentDifferenceDTO.java
Patch:
@@ -19,7 +19,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.List;
 import java.util.Objects;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ComponentHistoryDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.Map;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ComponentReferenceDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * Details for the access configuration.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ComponentRestrictionPermissionDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.Objects;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ComponentStateDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * State for a given component.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ComponentValidationResultDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.Collection;
 
 @XmlType(name = "componentValidationResult")

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ConfigurationAnalysisDTO.java
Patch:
@@ -19,7 +19,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.Map;
 
 @XmlType(name = "configurationAnalysis")

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ConnectableDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * Details about a connectable component.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ConnectionDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.List;
 import java.util.Set;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ControllerConfigurationDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * Details for the controller configuration.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ControllerDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.Set;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ControllerServiceApiDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.Objects;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ControllerServiceDTO.java
Patch:
@@ -19,7 +19,7 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.entity.ControllerServiceReferencingComponentEntity;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.Collection;
 import java.util.List;
 import java.util.Map;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ControllerServiceReferencingComponentDTO.java
Patch:
@@ -19,7 +19,7 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.entity.ControllerServiceReferencingComponentEntity;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.Collection;
 import java.util.Map;
 import java.util.Set;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/CounterDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * Counter value for a specific component in a specific context. A counter is a value that a component can adjust during processing.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/CountersDTO.java
Patch:
@@ -19,7 +19,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.List;
 
 @XmlType(name = "counters")

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/CountersSnapshotDTO.java
Patch:
@@ -19,8 +19,8 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.TimeAdapter;
 
-import javax.xml.bind.annotation.XmlType;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Date;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/DifferenceDTO.java
Patch:
@@ -19,7 +19,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 @XmlType(name = "difference")
 public class DifferenceDTO {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/DimensionsDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * A position on the canvas.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/DocumentedTypeDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.List;
 import java.util.Objects;
 import java.util.Set;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/DropRequestDTO.java
Patch:
@@ -19,8 +19,8 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.TimestampAdapter;
 
-import javax.xml.bind.annotation.XmlType;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.Date;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ExplicitRestrictionDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * Class used for providing details about a components usage restriction.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/FlowAnalysisRuleDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.Collection;
 import java.util.Map;
 import java.util.Set;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/FlowAnalysisRuleViolationDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * A result of a rule violation produced during a flow analysis

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/FlowConfigurationDTO.java
Patch:
@@ -19,8 +19,8 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.TimeAdapter;
 
-import javax.xml.bind.annotation.XmlType;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.Date;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/FlowFileDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.Map;
 
 @XmlType(name = "flowFile")

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/FlowFileSummaryDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 @XmlType(name = "flowFileSummary")
 public class FlowFileSummaryDTO {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/FlowRegistryBucketDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * Details about a bucket in a registry.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/FlowRegistryClientDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.Collection;
 import java.util.Map;
 import java.util.Set;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/FlowSnippetDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.nio.charset.StandardCharsets;
 import java.util.Comparator;
 import java.util.HashSet;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/FlowUpdateRequestDTO.java
Patch:
@@ -20,7 +20,7 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.TimestampAdapter;
 
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.Date;
 
 public abstract class FlowUpdateRequestDTO {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/FunnelDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * Details of a funnel.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/JmxMetricsResultDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 @XmlType(name = "jmxMetricsResults")
 public class JmxMetricsResultDTO {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/LabelDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.Map;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ListingRequestDTO.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.nifi.web.api.dto.util.TimeAdapter;
 import org.apache.nifi.web.api.dto.util.TimestampAdapter;
 
-import javax.xml.bind.annotation.XmlType;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.Date;
 import java.util.List;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/NodeCountersSnapshotDTO.java
Patch:
@@ -19,7 +19,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 @XmlType(name = "nodeProcessorStatusSnapshot")
 public class NodeCountersSnapshotDTO implements Cloneable {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/NodeDTO.java
Patch:
@@ -19,8 +19,8 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.DateTimeAdapter;
 
-import javax.xml.bind.annotation.XmlType;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.Date;
 import java.util.List;
 import java.util.Set;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/NodeEventDTO.java
Patch:
@@ -19,8 +19,8 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.DateTimeAdapter;
 
-import javax.xml.bind.annotation.XmlType;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.Date;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/NodeSystemDiagnosticsSnapshotDTO.java
Patch:
@@ -19,7 +19,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 @XmlType(name = "nodeSystemDiagnosticsSnapshot")
 public class NodeSystemDiagnosticsSnapshotDTO implements Cloneable {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ParameterContextDTO.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.nifi.web.api.entity.ParameterProviderConfigurationEntity;
 import org.apache.nifi.web.api.entity.ProcessGroupEntity;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.List;
 import java.util.Set;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ParameterContextReferenceDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 @XmlType(name = "parameterContextReference")
 public class ParameterContextReferenceDTO {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ParameterContextUpdateRequestDTO.java
Patch:
@@ -19,7 +19,7 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.entity.AffectedComponentEntity;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.Set;
 
 @XmlType(name = "parameterContextUpdateRequest")

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ParameterContextUpdateStepDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 @XmlType(name = "parameterContextUpdateStep")
 public class ParameterContextUpdateStepDTO extends UpdateStepDTO {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ParameterContextValidationRequestDTO.java
Patch:
@@ -19,7 +19,7 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.entity.ComponentValidationResultsEntity;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 @XmlType(name = "parameterContextValidationRequest")
 public class ParameterContextValidationRequestDTO extends AsynchronousRequestDTO<ParameterContextValidationStepDTO> {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ParameterContextValidationResultsDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.List;
 
 @XmlType(name = "parameterContextValidationResults")

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ParameterContextValidationStepDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 @XmlType(name = "parameterContextValidationStep")
 public class ParameterContextValidationStepDTO extends UpdateStepDTO {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ParameterDTO.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.nifi.web.api.entity.AffectedComponentEntity;
 import org.apache.nifi.web.api.entity.ParameterContextReferenceEntity;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.Set;
 
 @XmlType(name = "parameter")

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ParameterProviderApplyParametersRequestDTO.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.nifi.web.api.entity.AffectedComponentEntity;
 import org.apache.nifi.web.api.entity.ParameterContextUpdateEntity;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.List;
 import java.util.Set;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ParameterProviderApplyParametersUpdateStepDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 @XmlType(name = "parameterProviderApplyParametersUpdateStep")
 public class ParameterProviderApplyParametersUpdateStepDTO extends UpdateStepDTO {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ParameterProviderConfigurationDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 @XmlType(name = "parameterProviderConfiguration")
 public class ParameterProviderConfigurationDTO {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ParameterProviderDTO.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.nifi.web.api.entity.ParameterProviderReferencingComponentEntity;
 import org.apache.nifi.web.api.entity.ParameterGroupConfigurationEntity;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.Collection;
 import java.util.Map;
 import java.util.Set;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ParameterProviderReferencingComponentDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * A component referencing a parameter provider.  The only allowed component at this time is a ParameterContext.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ParameterStatusDTO.java
Patch:
@@ -19,7 +19,7 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.entity.ParameterEntity;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 @XmlType(name = "parameterStatus")
 public class ParameterStatusDTO {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/PermissionsDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * Details for the access configuration.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/PortDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.Collection;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/PositionDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * A position on the canvas.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/PreviousValueDTO.java
Patch:
@@ -19,8 +19,8 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.DateTimeAdapter;
 
-import javax.xml.bind.annotation.XmlType;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.Date;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ProcessGroupDTO.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.nifi.web.api.dto.util.NumberUtil;
 import org.apache.nifi.web.api.entity.ParameterContextReferenceEntity;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * The details for a process group within this NiFi flow.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ProcessGroupNameDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 @XmlType(name="processGroupName")
 public class ProcessGroupNameDTO {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ProcessGroupReplaceRequestDTO.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.nifi.web.api.dto;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 @XmlType(name = "processGroupReplaceRequest")
 public class ProcessGroupReplaceRequestDTO extends FlowUpdateRequestDTO {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ProcessorConfigDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.Map;
 import java.util.Set;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ProcessorDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.Collection;
 import java.util.List;
 import java.util.Map;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ProcessorRunStatusDetailsDTO.java
Patch:
@@ -19,7 +19,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.Set;
 
 @XmlType(name = "runStatusDetails")

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/PropertyDependencyDTO.java
Patch:
@@ -19,7 +19,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.Set;
 
 @XmlType(name = "propertyDependency")

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/PropertyDescriptorDTO.java
Patch:
@@ -19,7 +19,7 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.entity.AllowableValueEntity;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.List;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/PropertyHistoryDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.List;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/QueueSizeDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * The stats for a queue.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/RelationshipDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * Details of a relationship.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/RemoteProcessGroupContentsDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.Set;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/RemoteProcessGroupDTO.java
Patch:
@@ -19,8 +19,8 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.DateTimeAdapter;
 
-import javax.xml.bind.annotation.XmlType;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.Collection;
 import java.util.Date;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/RemoteProcessGroupPortDTO.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.nifi.web.api.dto;
 
 import io.swagger.annotations.ApiModelProperty;
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * Details of a port in a remote process group.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ReportingTaskDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.Collection;
 import java.util.Map;
 import java.util.Set;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/RequiredPermissionDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.Objects;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ResourceDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * Resource that supports access/authorization policies.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/RevisionDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * Current revision for this NiFi.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/SnippetDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.HashMap;
 import java.util.Map;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/StateEntryDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * Mapping of state for a given scope.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/StateMapDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.List;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/SystemDiagnosticsDTO.java
Patch:
@@ -19,7 +19,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.List;
 
 @XmlType(name = "systemDiagnostics")

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/SystemDiagnosticsSnapshotDTO.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.nifi.web.api.dto.util.DateTimeAdapter;
 import org.apache.nifi.web.api.dto.util.TimeAdapter;
 
-import javax.xml.bind.annotation.XmlType;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.Date;
 import java.util.LinkedHashSet;
 import java.util.List;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/TenantDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * A tenant of this NiFi.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/UserDTO.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.nifi.web.api.entity.AccessPolicySummaryEntity;
 import org.apache.nifi.web.api.entity.TenantEntity;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.Set;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/UserGroupDTO.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.nifi.web.api.entity.AccessPolicyEntity;
 import org.apache.nifi.web.api.entity.TenantEntity;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.Set;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/VerifyConfigRequestDTO.java
Patch:
@@ -20,7 +20,7 @@
 import io.swagger.annotations.ApiModelProperty;
 import io.swagger.annotations.ApiModelProperty.AccessMode;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.List;
 import java.util.Map;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/VerifyConfigUpdateStepDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 @XmlType(name = "verifyConfigUpdateStep")
 public class VerifyConfigUpdateStepDTO extends UpdateStepDTO {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/VersionControlInformationDTO.java
Patch:
@@ -19,7 +19,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 @XmlType(name = "versionControlInformation")
 public class VersionControlInformationDTO {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/VersionedFlowDTO.java
Patch:
@@ -19,7 +19,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 @XmlType(name = "versionedFlow")
 public class VersionedFlowDTO {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/VersionedFlowUpdateRequestDTO.java
Patch:
@@ -19,7 +19,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 @XmlType(name = "versionedFlowUpdateRequest")
 public class VersionedFlowUpdateRequestDTO extends FlowUpdateRequestDTO {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/action/ActionDTO.java
Patch:
@@ -21,8 +21,8 @@
 import org.apache.nifi.web.api.dto.action.details.ActionDetailsDTO;
 import org.apache.nifi.web.api.dto.util.DateTimeAdapter;
 
-import javax.xml.bind.annotation.XmlType;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.Date;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/action/HistoryDTO.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.nifi.web.api.dto.util.TimeAdapter;
 import org.apache.nifi.web.api.entity.ActionEntity;
 
-import javax.xml.bind.annotation.XmlType;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.Collection;
 import java.util.Date;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/action/HistoryQueryDTO.java
Patch:
@@ -19,8 +19,8 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.DateTimeAdapter;
 
-import javax.xml.bind.annotation.XmlType;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.Date;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/action/component/details/ComponentDetailsDTO.java
Patch:
@@ -16,8 +16,8 @@
  */
 package org.apache.nifi.web.api.dto.action.component.details;
 
-import javax.xml.bind.annotation.XmlSeeAlso;
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlSeeAlso;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  *

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/action/component/details/ExtensionDetailsDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * Extension details for an action.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/action/component/details/RemoteProcessGroupDetailsDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * Remote process group details for an action.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/action/details/ActionDetailsDTO.java
Patch:
@@ -16,8 +16,8 @@
  */
 package org.apache.nifi.web.api.dto.action.details;
 
-import javax.xml.bind.annotation.XmlSeeAlso;
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlSeeAlso;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  *

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/action/details/ConfigureDetailsDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * Configuration details for an Action.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/action/details/ConnectDetailsDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * Details for connect Actions.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/action/details/MoveDetailsDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * Details of the move operation.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/action/details/PurgeDetailsDTO.java
Patch:
@@ -19,8 +19,8 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.DateTimeAdapter;
 
-import javax.xml.bind.annotation.XmlType;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.Date;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/diagnostics/ClassLoaderDiagnosticsDTO.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.nifi.web.api.dto.diagnostics;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 import org.apache.nifi.web.api.dto.BundleDTO;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/diagnostics/ConnectionDiagnosticsDTO.java
Patch:
@@ -19,7 +19,7 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.ConnectionDTO;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.List;
 
 @XmlType(name="connectionDiagnostics")

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/diagnostics/ConnectionDiagnosticsSnapshotDTO.java
Patch:
@@ -19,7 +19,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.List;
 
 @XmlType(name = "connectionDiagnosticsSnapshot")

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/diagnostics/ControllerServiceDiagnosticsDTO.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.nifi.web.api.dto.diagnostics;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 import org.apache.nifi.web.api.entity.ControllerServiceEntity;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/diagnostics/GCDiagnosticsSnapshotDTO.java
Patch:
@@ -19,7 +19,7 @@
 
 import java.util.Date;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 import io.swagger.annotations.ApiModelProperty;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/diagnostics/GarbageCollectionDiagnosticsDTO.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.List;
 import java.util.stream.Collectors;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 import io.swagger.annotations.ApiModelProperty;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/diagnostics/JVMControllerDiagnosticsSnapshotDTO.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.nifi.web.api.dto.diagnostics;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 import io.swagger.annotations.ApiModelProperty;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/diagnostics/JVMDiagnosticsDTO.java
Patch:
@@ -19,7 +19,7 @@
 
 import java.util.List;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 import io.swagger.annotations.ApiModelProperty;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/diagnostics/JVMDiagnosticsSnapshotDTO.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.nifi.web.api.dto.diagnostics;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 import io.swagger.annotations.ApiModelProperty;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/diagnostics/JVMFlowDiagnosticsSnapshotDTO.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.HashSet;
 import java.util.Set;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 import org.apache.nifi.web.api.dto.BundleDTO;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/diagnostics/JVMSystemDiagnosticsSnapshotDTO.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.Set;
 import java.util.stream.Collectors;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 import io.swagger.annotations.ApiModelProperty;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/diagnostics/LocalQueuePartitionDTO.java
Patch:
@@ -19,7 +19,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 @XmlType(name = "localQueuePartition")
 public class LocalQueuePartitionDTO {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/diagnostics/NodeGCDiagnosticsSnapshotDTO.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.nifi.web.api.dto.diagnostics;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 import io.swagger.annotations.ApiModelProperty;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/diagnostics/NodeJVMDiagnosticsSnapshotDTO.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.nifi.web.api.dto.diagnostics;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 import io.swagger.annotations.ApiModelProperty;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/diagnostics/ProcessorDiagnosticsDTO.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.nifi.web.api.dto.ProcessorDTO;
 import org.apache.nifi.web.api.dto.status.ProcessorStatusDTO;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.List;
 import java.util.Set;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/diagnostics/RemoteQueuePartitionDTO.java
Patch:
@@ -19,7 +19,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 @XmlType(name = "remoteQueuePartition")
 public class RemoteQueuePartitionDTO {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/diagnostics/RepositoryUsageDTO.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.nifi.web.api.dto.diagnostics;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 import io.swagger.annotations.ApiModelProperty;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/diagnostics/ThreadDumpDTO.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.nifi.web.api.dto.diagnostics;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 import io.swagger.annotations.ApiModelProperty;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/flow/FlowBreadcrumbDTO.java
Patch:
@@ -19,7 +19,7 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.VersionControlInformationDTO;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * Breadcrumb for the flow.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/flow/FlowDTO.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.nifi.web.api.entity.ProcessorEntity;
 import org.apache.nifi.web.api.entity.RemoteProcessGroupEntity;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.LinkedHashSet;
 import java.util.Set;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/flow/ProcessGroupFlowDTO.java
Patch:
@@ -21,8 +21,8 @@
 import org.apache.nifi.web.api.entity.FlowBreadcrumbEntity;
 import org.apache.nifi.web.api.entity.ParameterContextReferenceEntity;
 
-import javax.xml.bind.annotation.XmlType;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.Date;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/provenance/AttributeDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * Represents a processor's attribute for a provenance event.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/provenance/ProvenanceDTO.java
Patch:
@@ -19,8 +19,8 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.TimestampAdapter;
 
-import javax.xml.bind.annotation.XmlType;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.Date;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/provenance/ProvenanceEventDTO.java
Patch:
@@ -19,8 +19,8 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.TimestampAdapter;
 
-import javax.xml.bind.annotation.XmlType;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.Collection;
 import java.util.Date;
 import java.util.List;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/provenance/ProvenanceOptionsDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.List;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/provenance/ProvenanceRequestDTO.java
Patch:
@@ -19,8 +19,8 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.DateTimeAdapter;
 
-import javax.xml.bind.annotation.XmlType;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.Date;
 import java.util.Map;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/provenance/ProvenanceResultsDTO.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.nifi.web.api.dto.util.DateTimeAdapter;
 import org.apache.nifi.web.api.dto.util.TimeAdapter;
 
-import javax.xml.bind.annotation.XmlType;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.Date;
 import java.util.List;
 import java.util.Set;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/provenance/ProvenanceSearchValueDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * Provenance value used to query

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/provenance/ProvenanceSearchableFieldDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * A searchable field for provenance queries.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/provenance/lineage/LineageDTO.java
Patch:
@@ -19,8 +19,8 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.TimestampAdapter;
 
-import javax.xml.bind.annotation.XmlType;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.Date;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/provenance/lineage/LineageRequestDTO.java
Patch:
@@ -18,8 +18,8 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlEnum;
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlEnum;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * Represents the request for lineage for a flowfile.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/provenance/lineage/LineageResultsDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.List;
 import java.util.Set;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/provenance/lineage/ProvenanceLinkDTO.java
Patch:
@@ -19,8 +19,8 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.TimestampAdapter;
 
-import javax.xml.bind.annotation.XmlType;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.Date;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/provenance/lineage/ProvenanceNodeDTO.java
Patch:
@@ -19,8 +19,8 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.TimestampAdapter;
 
-import javax.xml.bind.annotation.XmlType;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.Date;
 import java.util.List;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/remote/PeerDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * Details of a Site-to-Site peer within this NiFi.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/search/ComponentSearchResultDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.List;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/search/NodeSearchResultDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * A search result for a matching node.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/search/SearchResultGroupDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * The result's group level of a performed search.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/search/SearchResultsDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.ArrayList;
 import java.util.List;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/ClusterStatusDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.Collection;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/ComponentStatusDTO.java
Patch:
@@ -19,7 +19,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * General DTO for serializing the status of a component.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/ConnectionStatisticsDTO.java
Patch:
@@ -20,8 +20,8 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.TimeAdapter;
 
-import javax.xml.bind.annotation.XmlType;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.List;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/ConnectionStatisticsSnapshotDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto.status;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 import io.swagger.annotations.ApiModelProperty;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/ConnectionStatusDTO.java
Patch:
@@ -20,8 +20,8 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.TimeAdapter;
 
-import javax.xml.bind.annotation.XmlType;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.List;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/ConnectionStatusPredictionsSnapshotDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * DTO for serializing the status predictions of a connection.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/ConnectionStatusSnapshotDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * DTO for serializing the status of a connection.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/ControllerServiceStatusDTO.java
Patch:
@@ -19,7 +19,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * DTO for serializing the status of a ControllerService.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/ControllerStatusDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * The status of this NiFi controller.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/FlowAnalysisRuleStatusDTO.java
Patch:
@@ -19,7 +19,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * DTO for serializing the status of a FlowAnalysisRule.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/NodeConnectionStatisticsSnapshotDTO.java
Patch:
@@ -19,7 +19,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 @XmlType(name = "nodeConnectionStatisticsSnapshot")
 public class NodeConnectionStatisticsSnapshotDTO implements Cloneable {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/NodeConnectionStatusSnapshotDTO.java
Patch:
@@ -19,7 +19,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 @XmlType(name = "nodeConnectionStatusSnapshot")
 public class NodeConnectionStatusSnapshotDTO implements Cloneable {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/NodePortStatusDTO.java
Patch:
@@ -19,7 +19,7 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.NodeDTO;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * DTO for serializing the port status for a particular node.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/NodePortStatusSnapshotDTO.java
Patch:
@@ -19,7 +19,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 @XmlType(name = "nodePortStatusSnapshot")
 public class NodePortStatusSnapshotDTO implements Cloneable {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/NodeProcessorStatusSnapshotDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * DTO for serializing the processor status for a particular node.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/NodeRemoteProcessGroupStatusSnapshotDTO.java
Patch:
@@ -19,7 +19,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 @XmlType(name = "nodeRemoteProcessGroupStatusSnapshot")
 public class NodeRemoteProcessGroupStatusSnapshotDTO implements Cloneable {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/NodeStatusDTO.java
Patch:
@@ -19,7 +19,7 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.NodeDTO;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * DTO for serializing the node status.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/NodeStatusSnapshotsDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.List;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/PortStatusDTO.java
Patch:
@@ -19,8 +19,8 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.TimeAdapter;
 
-import javax.xml.bind.annotation.XmlType;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.Date;
 import java.util.List;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/PortStatusSnapshotDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * The status for a port in this NiFi.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/ProcessGroupStatusDTO.java
Patch:
@@ -20,8 +20,8 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.TimeAdapter;
 
-import javax.xml.bind.annotation.XmlType;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.Date;
 import java.util.List;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/ProcessGroupStatusSnapshotDTO.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.nifi.web.api.entity.ProcessorStatusSnapshotEntity;
 import org.apache.nifi.web.api.entity.RemoteProcessGroupStatusSnapshotEntity;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/ProcessorStatusDTO.java
Patch:
@@ -20,8 +20,8 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.TimeAdapter;
 
-import javax.xml.bind.annotation.XmlType;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.List;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/ProcessorStatusSnapshotDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * DTO for serializing the status of a processor.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/RemoteProcessGroupStatusDTO.java
Patch:
@@ -20,8 +20,8 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.TimeAdapter;
 
-import javax.xml.bind.annotation.XmlType;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.Date;
 import java.util.List;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/RemoteProcessGroupStatusSnapshotDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * The status of a remote process group in this NiFi.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/ReportingTaskStatusDTO.java
Patch:
@@ -19,7 +19,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * DTO for serializing the status of a ReportingTask.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/StatusDescriptorDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.Objects;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/StatusHistoryDTO.java
Patch:
@@ -19,8 +19,8 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.TimeAdapter;
 
-import javax.xml.bind.annotation.XmlType;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.Date;
 import java.util.LinkedHashMap;
 import java.util.List;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/StatusSnapshotDTO.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 import java.util.Date;
 import java.util.Map;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/util/DateTimeAdapter.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.Locale;
 import java.util.TimeZone;
 
-import javax.xml.bind.annotation.adapters.XmlAdapter;
+import jakarta.xml.bind.annotation.adapters.XmlAdapter;
 
 /**
  * XmlAdapter for (un)marshalling a date/time.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/util/InstantAdapter.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto.util;
 
-import javax.xml.bind.annotation.adapters.XmlAdapter;
+import jakarta.xml.bind.annotation.adapters.XmlAdapter;
 import java.time.Instant;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/util/TimeAdapter.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto.util;
 
-import javax.xml.bind.annotation.adapters.XmlAdapter;
+import jakarta.xml.bind.annotation.adapters.XmlAdapter;
 import java.time.LocalDateTime;
 import java.time.ZoneId;
 import java.time.ZonedDateTime;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/util/TimestampAdapter.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.Locale;
 import java.util.TimeZone;
 
-import javax.xml.bind.annotation.adapters.XmlAdapter;
+import jakarta.xml.bind.annotation.adapters.XmlAdapter;
 
 /**
  * XmlAdapter for (un)marshalling a date/time.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/util/TimezoneAdapter.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto.util;
 
-import javax.xml.bind.annotation.adapters.XmlAdapter;
+import jakarta.xml.bind.annotation.adapters.XmlAdapter;
 import java.time.LocalDateTime;
 import java.time.ZoneId;
 import java.time.ZonedDateTime;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/AboutEntity.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
 import org.apache.nifi.web.api.dto.AboutDTO;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/AccessConfigurationEntity.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
 import org.apache.nifi.web.api.dto.AccessConfigurationDTO;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/AccessPolicyEntity.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.nifi.web.api.dto.AccessPolicyDTO;
 import org.apache.nifi.web.api.dto.util.TimeAdapter;
 
-import javax.xml.bind.annotation.XmlRootElement;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.Date;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/AccessPolicySummaryEntity.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.nifi.web.api.dto.AccessPolicySummaryDTO;
 
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 /**
  * A serialized representation of this class can be placed in the entity body of a request or response to or from the API.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/AccessStatusEntity.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
 import org.apache.nifi.web.api.dto.AccessStatusDTO;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/AccessTokenExpirationEntity.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.nifi.web.api.dto.AccessTokenExpirationDTO;
 
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 @XmlRootElement(name = "accessTokenExpirationEntity")
 public class AccessTokenExpirationEntity extends Entity {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ActionEntity.java
Patch:
@@ -21,8 +21,8 @@
 import org.apache.nifi.web.api.dto.action.ActionDTO;
 import org.apache.nifi.web.api.dto.util.DateTimeAdapter;
 
-import javax.xml.bind.annotation.XmlRootElement;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.Date;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ActivateControllerServicesEntity.java
Patch:
@@ -19,7 +19,7 @@
 import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.RevisionDTO;
 
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
 import java.util.Map;
 
 @XmlRootElement(name = "activateControllerServicesEntity")

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/AffectedComponentEntity.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.nifi.web.api.dto.AffectedComponentDTO;
 import org.apache.nifi.web.api.dto.ProcessGroupNameDTO;
 
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
 import java.util.Objects;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/AnalyzeFlowRequestEntity.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.nifi.web.api.dto.AnalyzeFlowRequestDTO;
 
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 /**
  * A serialized representation of this class can be placed in the entity body of a request or response to or from the API. This particular entity holds a reference to an AnalyzeRequestDTO.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/BannerEntity.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 import org.apache.nifi.web.api.dto.BannerDTO;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/BulletinBoardEntity.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
 import org.apache.nifi.web.api.dto.BulletinBoardDTO;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/BulletinEntity.java
Patch:
@@ -21,8 +21,8 @@
 import org.apache.nifi.web.api.dto.ReadablePermission;
 import org.apache.nifi.web.api.dto.util.TimeAdapter;
 
-import javax.xml.bind.annotation.XmlRootElement;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.Date;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ClusterEntity.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
 import org.apache.nifi.web.api.dto.ClusterDTO;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ClusterSearchResultsEntity.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.nifi.web.api.entity;
 
 import java.util.List;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
 import org.apache.nifi.web.api.dto.search.NodeSearchResultDTO;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ClusterStatusEntity.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
 import org.apache.nifi.web.api.dto.status.ClusterStatusDTO;
 
 /**

File: nifi-nar-bundles/nifi-cassandra-bundle/nifi-cassandra-processors/src/main/java/org/apache/nifi/processors/cassandra/AbstractCassandraProcessor.java
Patch:
@@ -182,6 +182,7 @@ public abstract class AbstractCassandraProcessor extends AbstractProcessor {
         descriptors.add(USERNAME);
         descriptors.add(PASSWORD);
         descriptors.add(CONSISTENCY_LEVEL);
+        descriptors.add(COMPRESSION_TYPE);
         descriptors.add(CHARSET);
     }
 

File: nifi-nar-bundles/nifi-extension-utils/nifi-record-utils/nifi-json-record-utils/src/main/java/org/apache/nifi/json/AbstractJsonRowRecordReader.java
Patch:
@@ -35,6 +35,7 @@
 import org.apache.nifi.serialization.record.Record;
 import org.apache.nifi.serialization.record.RecordFieldType;
 import org.apache.nifi.serialization.record.RecordSchema;
+import org.apache.nifi.serialization.record.SerializedForm;
 import org.apache.nifi.serialization.record.type.ArrayDataType;
 import org.apache.nifi.serialization.record.type.ChoiceDataType;
 import org.apache.nifi.serialization.record.type.MapDataType;
@@ -399,7 +400,8 @@ private Record createRecordFromRawValue(final JsonNode fieldNode, final RecordSc
             childValues.put(childFieldName, childValue);
         }
 
-        return new MapRecord(childSchema, childValues);
+        final SerializedForm serializedForm = SerializedForm.of(fieldNode::toString, "application/json");
+        return new MapRecord(childSchema, childValues, serializedForm);
     }
 
     protected JsonNode getNextJsonNode() throws IOException, MalformedRecordException {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ControllerResource.java
Patch:
@@ -1483,6 +1483,7 @@ public Response getFlowRegistryClients() {
 
         final Set<FlowRegistryClientEntity> flowRegistryClients = serviceFacade.getRegistryClients();
         final FlowRegistryClientsEntity flowRegistryClientEntities = new FlowRegistryClientsEntity();
+        flowRegistryClientEntities.setCurrentTime(new Date());
         flowRegistryClientEntities.setRegistries(flowRegistryClients);
 
         return generateOkResponse(populateRemainingRegistryClientEntityContent(flowRegistryClientEntities)).build();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/FlowResource.java
Patch:
@@ -1838,6 +1838,7 @@ public Response getRegistryClients() {
 
         final Set<FlowRegistryClientEntity> registryClients = serviceFacade.getRegistryClientsForUser();
         final FlowRegistryClientsEntity registryClientEntities = new FlowRegistryClientsEntity();
+        registryClientEntities.setCurrentTime(new Date());
         registryClientEntities.setRegistries(registryClients);
 
         return generateOkResponse(populateRemainingRegistryClientEntityContent(registryClientEntities)).build();

File: nifi-nar-bundles/nifi-hazelcast-bundle/nifi-hazelcast-services/src/main/java/org/apache/nifi/hazelcast/services/cacheclient/HazelcastMapCacheClient.java
Patch:
@@ -78,10 +78,11 @@ public class HazelcastMapCacheClient extends AbstractControllerService implement
             .name("hazelcast-entry-ttl")
             .displayName("Hazelcast Entry Lifetime")
             .description("Indicates how long the written entries should exist in Hazelcast. Setting it to '0 secs' means that the data" +
-                    "will exists until its deletion or until the Hazelcast server is shut down.")
+                    "will exists until its deletion or until the Hazelcast server is shut down. Using `EmbeddedHazelcastCacheManager` as" +
+                    "cache manager will not provide policies to limit the size of the cache.")
             .required(true)
             .addValidator(StandardValidators.TIME_PERIOD_VALIDATOR)
-            .defaultValue("0 secs") // Note: in case of Hazelcast IMap, negative value would mean "map default" which might be overridden by a different client.
+            .defaultValue("5 min") // Note: in case of Hazelcast IMap, negative value would mean "map default" which might be overridden by a different client.
             .build();
 
     private static final long STARTING_REVISION = 1;

File: nifi-mock/src/main/java/org/apache/nifi/util/StandardProcessorTestRunner.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.nifi.annotation.lifecycle.OnStopped;
 import org.apache.nifi.annotation.lifecycle.OnUnscheduled;
 import org.apache.nifi.components.AllowableValue;
+import org.apache.nifi.components.DescribedValue;
 import org.apache.nifi.components.PropertyDescriptor;
 import org.apache.nifi.components.ValidationContext;
 import org.apache.nifi.components.ValidationResult;
@@ -579,7 +580,7 @@ public ValidationResult setProperty(final PropertyDescriptor descriptor, final S
     }
 
     @Override
-    public ValidationResult setProperty(final PropertyDescriptor descriptor, final AllowableValue value) {
+    public ValidationResult setProperty(final PropertyDescriptor descriptor, final DescribedValue value) {
         return context.setProperty(descriptor, value.getValue());
     }
 

File: nifi-mock/src/main/java/org/apache/nifi/util/TestRunner.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.nifi.util;
 
 import org.apache.nifi.components.AllowableValue;
+import org.apache.nifi.components.DescribedValue;
 import org.apache.nifi.components.PropertyDescriptor;
 import org.apache.nifi.components.ValidationResult;
 import org.apache.nifi.controller.ControllerService;
@@ -247,7 +248,7 @@ public interface TestRunner {
      * @param value allowable valu
      * @return result
      */
-    ValidationResult setProperty(PropertyDescriptor descriptor, AllowableValue value);
+    ValidationResult setProperty(PropertyDescriptor descriptor, DescribedValue value);
 
     /**
      * Sets the annotation data.

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/main/java/org/apache/nifi/processors/azure/eventhub/PutAzureEventHub.java
Patch:
@@ -99,7 +99,6 @@ public class PutAzureEventHub extends AbstractProcessor implements AzureEventHub
             .required(false)
             .expressionLanguageSupported(ExpressionLanguageScope.NONE)
             .addValidator(StandardValidators.ATTRIBUTE_KEY_VALIDATOR)
-            .defaultValue(null)
             .build();
     static final PropertyDescriptor MAX_BATCH_SIZE = new PropertyDescriptor.Builder()
             .name("max-batch-size")

File: nifi-nar-bundles/nifi-cdc/nifi-cdc-mysql-bundle/nifi-cdc-mysql-processors/src/main/java/org/apache/nifi/cdc/mysql/processors/CaptureChangeMySQL.java
Patch:
@@ -256,7 +256,6 @@ public class CaptureChangeMySQL extends AbstractSessionFactoryProcessor {
             .displayName("MySQL Driver Location(s)")
             .description("Comma-separated list of files/folders and/or URLs containing the MySQL driver JAR and its dependencies (if any). "
                     + "For example '/var/tmp/mysql-connector-java-5.1.38-bin.jar'")
-            .defaultValue(null)
             .required(false)
             .identifiesExternalResource(ResourceCardinality.MULTIPLE, ResourceType.FILE, ResourceType.DIRECTORY, ResourceType.URL)
             .expressionLanguageSupported(ExpressionLanguageScope.ENVIRONMENT)

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-documentation/src/test/java/org/apache/nifi/documentation/example/FullyDocumentedControllerService.java
Patch:
@@ -40,11 +40,11 @@
 @SystemResourceConsideration(resource = SystemResource.MEMORY, description = "")
 public class FullyDocumentedControllerService extends AbstractControllerService implements SampleService {
 
-    public static final PropertyDescriptor KEYSTORE = new PropertyDescriptor.Builder().name("Keystore Filename").description("The fully-qualified filename of the Keystore").defaultValue(null)
+    public static final PropertyDescriptor KEYSTORE = new PropertyDescriptor.Builder().name("Keystore Filename").description("The fully-qualified filename of the Keystore")
             .addValidator(StandardValidators.FILE_EXISTS_VALIDATOR).sensitive(false).build();
     public static final PropertyDescriptor KEYSTORE_TYPE = new PropertyDescriptor.Builder().name("Keystore Type").description("The Type of the Keystore").allowableValues("JKS", "PKCS12")
             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR).defaultValue("JKS").sensitive(false).build();
-    public static final PropertyDescriptor KEYSTORE_PASSWORD = new PropertyDescriptor.Builder().name("Keystore Password").defaultValue(null).description("The password for the Keystore")
+    public static final PropertyDescriptor KEYSTORE_PASSWORD = new PropertyDescriptor.Builder().name("Keystore Password").description("The password for the Keystore")
             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR).sensitive(true).build();
 
     private static final List<PropertyDescriptor> properties;

File: nifi-nar-bundles/nifi-graph-bundle/nifi-other-graph-services/src/main/java/org/apache/nifi/graph/TinkerpopClientService.java
Patch:
@@ -189,7 +189,6 @@ public class TinkerpopClientService extends AbstractControllerService implements
                     "classes specified in the YAML file. Additionally, any custom classes required for the groovy script to " +
                     "work in the bytecode submission setting should also be contained in these JAR files.")
             .dependsOn(CONNECTION_SETTINGS, YAML_SETTINGS)
-            .defaultValue(null)
             .identifiesExternalResource(ResourceCardinality.MULTIPLE, ResourceType.FILE, ResourceType.DIRECTORY, ResourceType.URL)
             .expressionLanguageSupported(ExpressionLanguageScope.ENVIRONMENT)
             .dynamicallyModifiesClasspath(true)

File: nifi-nar-bundles/nifi-hive-bundle/nifi-hive3-processors/src/main/java/org/apache/nifi/dbcp/hive/Hive3ConnectionPool.java
Patch:
@@ -106,7 +106,6 @@ public class Hive3ConnectionPool extends AbstractControllerService implements Hi
             .description("A database connection URL used to connect to a database. May contain database system name, host, port, database name and some parameters."
                     + " The exact syntax of a database connection URL is specified by the Hive documentation. For example, the server principal is often included "
                     + "as a connection parameter when connecting to a secure Hive server.")
-            .defaultValue(null)
             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)
             .required(true)
             .expressionLanguageSupported(ExpressionLanguageScope.ENVIRONMENT)
@@ -127,7 +126,6 @@ public class Hive3ConnectionPool extends AbstractControllerService implements Hi
             .name("hive-db-user")
             .displayName("Database User")
             .description("Database user name")
-            .defaultValue(null)
             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)
             .expressionLanguageSupported(ExpressionLanguageScope.ENVIRONMENT)
             .build();
@@ -136,7 +134,6 @@ public class Hive3ConnectionPool extends AbstractControllerService implements Hi
             .name("hive-db-password")
             .displayName("Password")
             .description("The password for the database user")
-            .defaultValue(null)
             .required(false)
             .sensitive(true)
             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)

File: nifi-nar-bundles/nifi-kudu-bundle/nifi-kudu-processors/src/main/java/org/apache/nifi/processors/kudu/AbstractKuduProcessor.java
Patch:
@@ -375,7 +375,6 @@ protected AlterTableOptions getAddNullableColumnStatement(final String columnNam
 
         alterTable.addColumn(new ColumnSchema.ColumnSchemaBuilder(columnName, toKuduType(nifiType))
                 .nullable(true)
-                .defaultValue(null)
                 .typeAttributes(getKuduTypeAttributes(nifiType))
                 .build());
 

File: nifi-nar-bundles/nifi-snmp-bundle/nifi-snmp-processors/src/main/java/org/apache/nifi/snmp/processors/GetSNMP.java
Patch:
@@ -107,7 +107,6 @@ public class GetSNMP extends AbstractSNMPProcessor {
                     "the outgoing flowfile.")
             .required(false)
             .addValidator(StandardValidators.NON_BLANK_VALIDATOR)
-            .defaultValue(null)
             .build();
 
     public static final Relationship REL_SUCCESS = new Relationship.Builder()

File: nifi-nar-bundles/nifi-spark-bundle/nifi-livy-controller-service/src/main/java/org/apache/nifi/controller/livy/LivySessionController.java
Patch:
@@ -153,7 +153,6 @@ public class LivySessionController extends AbstractControllerService implements
             .required(false)
             .identifiesExternalResource(ResourceCardinality.MULTIPLE, ResourceType.FILE)
             .expressionLanguageSupported(ExpressionLanguageScope.ENVIRONMENT)
-            .defaultValue(null)
             .build();
 
     public static final PropertyDescriptor SSL_CONTEXT_SERVICE = new PropertyDescriptor.Builder()

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ListenHTTP.java
Patch:
@@ -197,7 +197,7 @@ public AllowableValue getAllowableValue() {
         .description("HTTP Protocols supported for Application Layer Protocol Negotiation with TLS")
         .required(true)
         .allowableValues(HttpProtocolStrategy.class)
-        .defaultValue(HttpProtocolStrategy.HTTP_1_1.getValue())
+        .defaultValue(HttpProtocolStrategy.HTTP_1_1)
         .dependsOn(SSL_CONTEXT_SERVICE)
         .build();
     public static final PropertyDescriptor HEADERS_AS_ATTRIBUTES_REGEX = new PropertyDescriptor.Builder()
@@ -414,7 +414,7 @@ synchronized private void createHttpServerFromService(final ProcessContext conte
 
         // get the configured port
         final int port = context.getProperty(PORT).evaluateAttributeExpressions().asInteger();
-        final HttpProtocolStrategy httpProtocolStrategy = HttpProtocolStrategy.valueOf(context.getProperty(HTTP_PROTOCOL_STRATEGY).getValue());
+        final HttpProtocolStrategy httpProtocolStrategy = context.getProperty(HTTP_PROTOCOL_STRATEGY).asDescribedValue(HttpProtocolStrategy.class);
         final ServerConnector connector = createServerConnector(server,
                 port,
                 sslContextService,

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/MergeContent.java
Patch:
@@ -325,7 +325,6 @@ public class MergeContent extends BinFiles {
         .required(false)
         .expressionLanguageSupported(ExpressionLanguageScope.FLOWFILE_ATTRIBUTES)
         .addValidator(StandardValidators.ATTRIBUTE_KEY_VALIDATOR)
-        .defaultValue(null)
         .dependsOn(MERGE_STRATEGY, MERGE_STRATEGY_BIN_PACK)
         .build();
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/MergeRecord.java
Patch:
@@ -220,7 +220,6 @@ public class MergeRecord extends AbstractSessionFactoryProcessor {
         .required(false)
         .expressionLanguageSupported(ExpressionLanguageScope.NONE)
         .addValidator(StandardValidators.ATTRIBUTE_KEY_VALIDATOR)
-        .defaultValue(null)
         .build();
     public static final PropertyDescriptor MIN_SIZE = new PropertyDescriptor.Builder()
         .name("min-bin-size")

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ScanAttribute.java
Patch:
@@ -96,7 +96,6 @@ public class ScanAttribute extends AbstractProcessor {
                     + "the dictionary will be used and each term will consist of the text of the entire line in the file")
             .required(false)
             .addValidator(StandardValidators.createRegexValidator(0, 1, false))
-            .defaultValue(null)
             .build();
 
     private List<PropertyDescriptor> properties;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ValidateRecord.java
Patch:
@@ -201,7 +201,6 @@ public class ValidateRecord extends AbstractProcessor {
         .required(false)
         .expressionLanguageSupported(ExpressionLanguageScope.FLOWFILE_ATTRIBUTES)
         .addValidator(StandardValidators.ATTRIBUTE_KEY_VALIDATOR)
-        .defaultValue(null)
         .build();
     static final PropertyDescriptor MAX_VALIDATION_DETAILS_LENGTH = new PropertyDescriptor.Builder()
         .name("maximum-validation-details-length")

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestListenHTTP.java
Patch:
@@ -236,7 +236,7 @@ public void testSecurePOSTRequestsReceivedWithoutELHttp2AndHttp1() throws Except
         configureProcessorSslContextService(ListenHTTP.ClientAuthentication.AUTO, serverNoTruststoreConfiguration);
 
         runner.setProperty(ListenHTTP.BASE_PATH, HTTP_BASE_PATH);
-        runner.setProperty(ListenHTTP.HTTP_PROTOCOL_STRATEGY, HttpProtocolStrategy.H2_HTTP_1_1.getValue());
+        runner.setProperty(ListenHTTP.HTTP_PROTOCOL_STRATEGY, HttpProtocolStrategy.H2_HTTP_1_1);
         runner.assertValid();
 
         testPOSTRequestsReceived(HttpServletResponse.SC_OK, true, false);
@@ -248,7 +248,7 @@ public void testSecurePOSTRequestsReturnCodeReceivedWithoutELHttp2() throws Exce
 
         runner.setProperty(ListenHTTP.BASE_PATH, HTTP_BASE_PATH);
         runner.setProperty(ListenHTTP.RETURN_CODE, Integer.toString(HttpServletResponse.SC_NO_CONTENT));
-        runner.setProperty(ListenHTTP.HTTP_PROTOCOL_STRATEGY, HttpProtocolStrategy.H2.getValue());
+        runner.setProperty(ListenHTTP.HTTP_PROTOCOL_STRATEGY, HttpProtocolStrategy.H2);
         runner.assertValid();
 
         testPOSTRequestsReceived(HttpServletResponse.SC_NO_CONTENT, true, false);

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-reporting-tasks/src/main/java/org/apache/nifi/controller/MonitorMemory.java
Patch:
@@ -134,7 +134,6 @@ public class MonitorMemory extends AbstractReportingTask {
             .description("Indicates how often this reporting task should report bulletins while the memory utilization exceeds the configured threshold")
             .required(false)
             .addValidator(StandardValidators.TIME_PERIOD_VALIDATOR)
-            .defaultValue(null)
             .build();
 
     public static final Pattern PERCENTAGE_PATTERN = Pattern.compile("\\d{1,2}%");

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-rules/src/main/java/org/apache/nifi/flowanalysis/rules/DisallowComponentType.java
Patch:
@@ -42,7 +42,6 @@ public class DisallowComponentType extends AbstractFlowAnalysisRule {
                     " Either the simple or the fully qualified name of the type should be provided.")
             .required(true)
             .addValidator(StandardValidators.NON_BLANK_VALIDATOR)
-            .defaultValue(null)
             .build();
 
     private final static List<PropertyDescriptor> propertyDescriptors;

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/json/JsonTreeReader.java
Patch:
@@ -94,7 +94,6 @@ public class JsonTreeReader extends SchemaRegistryService implements RecordReade
             .description("Skips forward to the given nested JSON field (array or object) to begin processing.")
             .required(false)
             .addValidator(StandardValidators.NON_BLANK_VALIDATOR)
-            .defaultValue(null)
             .dependsOn(STARTING_FIELD_STRATEGY, StartingFieldStrategy.NESTED_FIELD.name())
             .build();
 

File: nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/processors/JMSConsumer.java
Patch:
@@ -38,6 +38,7 @@
 import javax.jms.TextMessage;
 import javax.jms.Topic;
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Enumeration;
@@ -184,7 +185,8 @@ private JMSResponse receiveMessage(Session session, MessageConsumer msgConsumer,
                 messageBody = MessageBodyToBytesConverter.toBytes((BytesMessage) message);
             } else if (message instanceof ObjectMessage) {
                 messageType = ObjectMessage.class.getSimpleName();
-                messageBody = MessageBodyToBytesConverter.toBytes((ObjectMessage) message);
+                // Return Message Type as body to avoid unsupported class references
+                messageBody = messageType.getBytes(StandardCharsets.UTF_8);
             } else if (message instanceof StreamMessage) {
                 messageType = StreamMessage.class.getSimpleName();
                 messageBody = MessageBodyToBytesConverter.toBytes((StreamMessage) message);

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/GenerateRecord.java
Patch:
@@ -306,7 +306,7 @@ private Object generateValueFromRecordField(RecordField recordField, Faker faker
             case BOOLEAN:
                 return FakerUtils.getFakeData("Bool.bool", faker);
             case BYTE:
-                return faker.number().numberBetween(Byte.MIN_VALUE, Byte.MAX_VALUE);
+                return (byte) faker.number().numberBetween(Byte.MIN_VALUE, Byte.MAX_VALUE);
             case CHAR:
                 return (char) faker.number().numberBetween(Character.MIN_VALUE, Character.MAX_VALUE);
             case DATE:

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/PartitionRecord.java
Patch:
@@ -117,7 +117,7 @@
         Choose a RecordWriter that writes the data in the desired output format.
 
         Add a single additional property. The name of the property should describe the criteria. \
-        The property's value should be a RecordPath that returns `true` if the Record meets the criteria or `false otherwise.
+        The property's value should be a RecordPath that returns `true` if the Record meets the criteria or `false` otherwise.
 
         For example, if we want to separate records based on whether or not they have a transaction total of more than $1,000 we could add a new property named \
         `largeTransaction` with a value of `/transaction/total > 1000`. This will create two FlowFiles. In the first, all records will have a total over `1000`. \

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/FlowResource.java
Patch:
@@ -681,6 +681,7 @@ public Response getReportingTasks() {
 
         // create the response entity
         final ReportingTasksEntity entity = new ReportingTasksEntity();
+        entity.setCurrentTime(new Date());
         entity.setReportingTasks(reportingTasks);
 
         // generate the response
@@ -2826,6 +2827,8 @@ public Response getParameterContexts() {
         }
 
         final Set<ParameterContextEntity> parameterContexts = serviceFacade.getParameterContexts();
+        parameterContexts.forEach(entity -> entity.setUri(generateResourceUri("parameter-contexts", entity.getId())));
+
         final ParameterContextsEntity entity = new ParameterContextsEntity();
         entity.setParameterContexts(parameterContexts);
         entity.setCurrentTime(new Date());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java
Patch:
@@ -1532,6 +1532,9 @@ public ParameterDTO createParameterDto(final ParameterContext parameterContext,
 
        final ParameterContext containingParameterContext = (parameter.getParameterContextId() == null)
                ? parameterContext : parameterContextLookup.getParameterContext(parameter.getParameterContextId());
+
+       dto.setInherited(!containingParameterContext.getIdentifier().equals(parameterContext.getIdentifier()));
+
        ParameterContextReferenceDTO refDto = createParameterContextReference(containingParameterContext);
        dto.setParameterContext(entityFactory.createParameterReferenceEntity(refDto, createPermissionsDto(containingParameterContext)));
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/SplitText.java
Patch:
@@ -132,7 +132,7 @@ public class SplitText extends AbstractProcessor {
     public static final PropertyDescriptor REMOVE_TRAILING_NEWLINES = new PropertyDescriptor.Builder()
             .name("Remove Trailing Newlines")
             .description("Whether to remove newlines at the end of each split file. This should be false if you intend to merge the split files later. If this is set to "
-                    + "'true' and a FlowFile is generated that contains only 'empty lines' (i.e., consists only of \r and \n characters), the FlowFile will not be emitted. "
+                    + "'true' and a FlowFile is generated that contains only 'empty lines' (i.e., consists only of \\r and \\n characters), the FlowFile will not be emitted. "
                     + "Note, however, that if header lines are specified, the resultant FlowFile will never be empty as it will consist of the header lines, so "
                     + "a FlowFile may be emitted that contains only the header lines.")
             .required(true)

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-leader-election-shared/src/main/java/org/apache/nifi/controller/leader/election/TrackedLeaderElectionManager.java
Patch:
@@ -57,7 +57,7 @@ public Map<String, Integer> getLeadershipChangeCount(final long duration, final
             final TimedBuffer<TimestampedLong> buffer = entry.getValue();
 
             final TimestampedLong aggregateValue = buffer.getAggregateValue(System.currentTimeMillis() - TimeUnit.MILLISECONDS.convert(duration, unit));
-            final int leadershipChanges = aggregateValue.getValue().intValue();
+            final int leadershipChanges = (aggregateValue == null) ? 0 : aggregateValue.getValue().intValue();
             leadershipChangesPerRole.put(roleName, leadershipChanges);
         }
 

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/avro/AvroReader.java
Patch:
@@ -103,7 +103,7 @@ public RecordReader createRecordReader(final Map<String, String> variables, fina
 
             final Schema avroSchema;
             try {
-                if (recordSchema.getSchemaFormat().isPresent() & recordSchema.getSchemaFormat().get().equals(AvroTypeUtil.AVRO_SCHEMA_FORMAT)) {
+                if (recordSchema.getSchemaFormat().isPresent() && recordSchema.getSchemaFormat().get().equals(AvroTypeUtil.AVRO_SCHEMA_FORMAT)) {
                     final Optional<String> textOption = recordSchema.getSchemaText();
                     if (textOption.isPresent()) {
                         avroSchema = compiledAvroSchemaCache.get(textOption.get());

File: nifi-nar-bundles/nifi-sql-reporting-bundle/nifi-sql-reporting-tasks/src/main/java/org/apache/nifi/reporting/sql/QueryNiFiReportingTask.java
Patch:
@@ -90,7 +90,7 @@ public void setup(final ConfigurationContext context) {
     @Override
     public void onTrigger(ReportingContext context) {
         final StopWatch stopWatch = new StopWatch(true);
-        String sql = context.getProperty(QueryMetricsUtil.QUERY).getValue();
+        String sql = context.getProperty(QueryMetricsUtil.QUERY).evaluateAttributeExpressions().getValue();
         try {
             sql = processStartAndEndTimes(context, sql, BULLETIN_START_TIME, BULLETIN_END_TIME);
             sql = processStartAndEndTimes(context, sql, PROVENANCE_START_TIME, PROVENANCE_END_TIME);

File: minifi/minifi-bootstrap/src/main/java/org/apache/nifi/minifi/bootstrap/configuration/ListenerHandleResult.java
Patch:
@@ -49,7 +49,7 @@ public String toString() {
         if (failureCause == null) {
             return getDescriptor() + " successfully handled the configuration change";
         } else {
-            return getDescriptor() + " FAILED to handle the configuration change due to: '" + failureCause.getMessage() + "'";
+            return getDescriptor() + " FAILED to handle the configuration change";
         }
     }
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/NiFiAuthenticationFilter.java
Patch:
@@ -138,14 +138,14 @@ protected void unsuccessfulAuthentication(HttpServletRequest request, HttpServle
         // use the type of authentication exception to determine the response code
         if (ae instanceof InvalidAuthenticationException) {
             response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
-            out.println(ae.getMessage());
+            out.println("Authentication credentials invalid");
         } else if (ae instanceof UntrustedProxyException) {
             response.setStatus(HttpServletResponse.SC_FORBIDDEN);
-            out.println(ae.getMessage());
+            out.println("Authentication Proxy Server not trusted");
         } else if (ae instanceof AuthenticationServiceException) {
             log.error("Authentication Service Failed: {}", ae.getMessage(), ae);
             response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
-            out.println(String.format("Unable to authenticate: %s", ae.getMessage()));
+            out.println("Authentication service processing failed");
         } else {
             log.error("Authentication Exception: {}", ae.getMessage(), ae);
             response.setStatus(HttpServletResponse.SC_FORBIDDEN);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/AbstractComponentNode.java
Patch:
@@ -1187,7 +1187,7 @@ public boolean isSensitiveDynamicProperty(final String name) {
     public PropertyDescriptor getPropertyDescriptor(final String name) {
         try (final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(extensionManager, getComponent().getClass(), getComponent().getIdentifier())) {
             final PropertyDescriptor propertyDescriptor = getComponent().getPropertyDescriptor(name);
-            if (propertyDescriptor.isDynamic() && sensitiveDynamicPropertyNames.get().contains(name)) {
+            if (propertyDescriptor.isDynamic() && isSensitiveDynamicProperty(name)) {
                 return new PropertyDescriptor.Builder().fromPropertyDescriptor(propertyDescriptor).sensitive(true).build();
             } else {
                 return propertyDescriptor;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/scheduling/StandardProcessScheduler.java
Patch:
@@ -542,7 +542,7 @@ public synchronized void terminateProcessor(final ProcessorNode procNode) {
 
         try {
             final Set<URL> additionalUrls = procNode.getAdditionalClasspathResources(procNode.getPropertyDescriptors());
-            flowController.getReloadComponent().reload(procNode, procNode.getProcessor().getClass().getName(), procNode.getBundleCoordinate(), additionalUrls);
+            flowController.getReloadComponent().reload(procNode, procNode.getCanonicalClassName(), procNode.getBundleCoordinate(), additionalUrls);
         } catch (final ProcessorInstantiationException e) {
             // This shouldn't happen because we already have been able to instantiate the processor before
             LOG.error("Failed to replace instance of Processor for {} when terminating Processor", procNode);

File: nifi-nar-bundles/nifi-py4j-bundle/nifi-py4j-bridge/src/main/java/org/apache/nifi/python/processor/RecordTransformProxy.java
Patch:
@@ -18,8 +18,8 @@
 package org.apache.nifi.python.processor;
 
 import org.apache.nifi.NullSuppression;
-import org.apache.nifi.annotation.behavior.DefaultRunDuration;
-import org.apache.nifi.annotation.behavior.SupportsBatching;
+import org.apache.nifi.annotation.behavior.InputRequirement;
+import org.apache.nifi.annotation.behavior.InputRequirement.Requirement;
 import org.apache.nifi.annotation.lifecycle.OnScheduled;
 import org.apache.nifi.components.PropertyDescriptor;
 import org.apache.nifi.flowfile.FlowFile;
@@ -57,7 +57,7 @@
 import java.util.Objects;
 import java.util.Optional;
 
-@SupportsBatching(defaultDuration = DefaultRunDuration.TWENTY_FIVE_MILLIS)
+@InputRequirement(Requirement.INPUT_REQUIRED)
 public class RecordTransformProxy extends PythonProcessorProxy {
     private final PythonProcessorBridge bridge;
     private volatile RecordTransform transform;

File: nifi-nar-bundles/nifi-py4j-bundle/nifi-py4j-integration-tests/src/test/java/org.apache.nifi.py4j/PythonControllerInteractionIT.java
Patch:
@@ -177,7 +177,6 @@ public void testGetProcessorDetails() {
             .orElseThrow(() -> new RuntimeException("Could not find ConvertCsvToExcel"));
 
         assertEquals("0.0.1-SNAPSHOT", convertCsvToExcel.getProcessorVersion());
-        assertNull(convertCsvToExcel.getPyPiPackageName());
         assertEquals(new File("target/python/extensions/ConvertCsvToExcel.py").getAbsolutePath(),
             new File(convertCsvToExcel.getSourceLocation()).getAbsolutePath());
     }

File: nifi-nar-bundles/nifi-pgp-bundle/nifi-pgp-processors/src/main/java/org/apache/nifi/processors/pgp/DecryptContentPGP.java
Patch:
@@ -38,7 +38,7 @@
 import org.apache.nifi.processors.pgp.attributes.DecryptionStrategy;
 import org.apache.nifi.processors.pgp.exception.PGPDecryptionException;
 import org.apache.nifi.processors.pgp.exception.PGPProcessException;
-import org.apache.nifi.processors.pgp.io.KeyIdentifierConverter;
+import org.apache.nifi.pgp.service.api.KeyIdentifierConverter;
 import org.apache.nifi.stream.io.StreamUtils;
 
 import org.apache.nifi.util.StringUtils;

File: nifi-nar-bundles/nifi-pgp-bundle/nifi-pgp-processors/src/main/java/org/apache/nifi/processors/pgp/SignContentPGP.java
Patch:
@@ -39,7 +39,7 @@
 import org.apache.nifi.processors.pgp.attributes.SigningStrategy;
 import org.apache.nifi.processors.pgp.exception.PGPProcessException;
 import org.apache.nifi.processors.pgp.io.EncodingStreamCallback;
-import org.apache.nifi.processors.pgp.io.KeyIdentifierConverter;
+import org.apache.nifi.pgp.service.api.KeyIdentifierConverter;
 import org.bouncycastle.openpgp.PGPException;
 import org.bouncycastle.openpgp.PGPLiteralDataGenerator;
 import org.bouncycastle.openpgp.PGPOnePassSignature;

File: nifi-nar-bundles/nifi-pgp-bundle/nifi-pgp-processors/src/main/java/org/apache/nifi/processors/pgp/VerifyContentPGP.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.nifi.processor.Relationship;
 import org.apache.nifi.processor.io.StreamCallback;
 import org.apache.nifi.processors.pgp.exception.PGPProcessException;
-import org.apache.nifi.processors.pgp.io.KeyIdentifierConverter;
+import org.apache.nifi.pgp.service.api.KeyIdentifierConverter;
 import org.apache.nifi.stream.io.StreamUtils;
 import org.bouncycastle.openpgp.PGPCompressedData;
 import org.bouncycastle.openpgp.PGPException;

File: nifi-nar-bundles/nifi-pgp-bundle/nifi-pgp-processors/src/test/java/org/apache/nifi/processors/pgp/EncryptContentPGPTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.nifi.processors.pgp.attributes.DecryptionStrategy;
 import org.apache.nifi.processors.pgp.attributes.FileEncoding;
 import org.apache.nifi.processors.pgp.attributes.SymmetricKeyAlgorithm;
-import org.apache.nifi.processors.pgp.io.KeyIdentifierConverter;
+import org.apache.nifi.pgp.service.api.KeyIdentifierConverter;
 import org.apache.nifi.reporting.InitializationException;
 import org.apache.nifi.stream.io.StreamUtils;
 import org.apache.nifi.util.MockFlowFile;

File: nifi-nar-bundles/nifi-pgp-bundle/nifi-pgp-processors/src/test/java/org/apache/nifi/processors/pgp/SignContentPGPTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.nifi.processors.pgp.attributes.FileEncoding;
 import org.apache.nifi.processors.pgp.attributes.HashAlgorithm;
 import org.apache.nifi.processors.pgp.attributes.SigningStrategy;
-import org.apache.nifi.processors.pgp.io.KeyIdentifierConverter;
+import org.apache.nifi.pgp.service.api.KeyIdentifierConverter;
 import org.apache.nifi.reporting.InitializationException;
 import org.apache.nifi.util.LogMessage;
 import org.apache.nifi.util.MockFlowFile;

File: nifi-nar-bundles/nifi-pgp-bundle/nifi-pgp-processors/src/test/java/org/apache/nifi/processors/pgp/VerifyContentPGPTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.nifi.pgp.util.PGPFileUtils;
 import org.apache.nifi.pgp.util.PGPSecretKeyGenerator;
 import org.apache.nifi.pgp.util.PGPOperationUtils;
-import org.apache.nifi.processors.pgp.io.KeyIdentifierConverter;
+import org.apache.nifi.pgp.service.api.KeyIdentifierConverter;
 import org.apache.nifi.reporting.InitializationException;
 import org.apache.nifi.util.LogMessage;
 import org.apache.nifi.util.MockFlowFile;

File: nifi-nar-bundles/nifi-pgp-bundle/nifi-pgp-service-api/src/test/java/org/apache/nifi/pgp/service/api/KeyIdentifierConverterTest.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.processors.pgp.io;
+package org.apache.nifi.pgp.service.api;
 
 import org.junit.jupiter.api.Test;
 

File: nifi-nar-bundles/nifi-pgp-bundle/nifi-pgp-service/src/main/java/org/apache/nifi/pgp/service/standard/StandardPGPPrivateKeyService.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.nifi.controller.AbstractControllerService;
 import org.apache.nifi.controller.ConfigurationContext;
 import org.apache.nifi.expression.ExpressionLanguageScope;
+import org.apache.nifi.pgp.service.api.KeyIdentifierConverter;
 import org.apache.nifi.pgp.service.api.PGPPrivateKeyService;
 import org.apache.nifi.pgp.service.standard.exception.PGPConfigurationException;
 import org.apache.nifi.processor.util.StandardValidators;
@@ -142,7 +143,7 @@ public void onDisabled() {
      */
     @Override
     public Optional<PGPPrivateKey> findPrivateKey(final long keyIdentifier) {
-        getLogger().debug("Find Private Key [{}]", Long.toHexString(keyIdentifier).toUpperCase());
+        getLogger().debug("Find Private Key [{}]", KeyIdentifierConverter.format(keyIdentifier));
         return Optional.ofNullable(privateKeys.get(keyIdentifier));
     }
 
@@ -256,7 +257,7 @@ private List<PGPPrivateKey> extractPrivateKeys(final PGPSecretKeyRingCollection
         for (final PGPSecretKeyRing keyRing : keyRings) {
             for (final PGPSecretKey secretKey : keyRing) {
                 final long keyId = secretKey.getKeyID();
-                final String keyIdentifier = Long.toHexString(keyId).toUpperCase();
+                final String keyIdentifier = KeyIdentifierConverter.format(keyId);
                 try {
                     final PGPPrivateKey privateKey = secretKey.extractPrivateKey(keyDecryptor);
                     extractedPrivateKeys.add(privateKey);

File: nifi-nar-bundles/nifi-pgp-bundle/nifi-pgp-service/src/main/java/org/apache/nifi/pgp/service/standard/StandardPGPPublicKeyService.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.nifi.controller.AbstractControllerService;
 import org.apache.nifi.controller.ConfigurationContext;
 import org.apache.nifi.expression.ExpressionLanguageScope;
+import org.apache.nifi.pgp.service.api.KeyIdentifierConverter;
 import org.apache.nifi.pgp.service.api.PGPPublicKeyService;
 import org.apache.nifi.pgp.service.standard.exception.PGPConfigurationException;
 import org.apache.nifi.processor.util.StandardValidators;
@@ -186,7 +187,7 @@ protected Collection<ValidationResult> customValidate(final ValidationContext co
 
     private boolean isPublicKeyMatched(final PGPPublicKey publicKey, final String search) {
         boolean matched = false;
-        final String keyId = Long.toHexString(publicKey.getKeyID()).toUpperCase();
+        final String keyId = KeyIdentifierConverter.format(publicKey.getKeyID());
         if (keyId.equals(search)) {
             matched = true;
         } else {

File: nifi-nar-bundles/nifi-pgp-bundle/nifi-pgp-service/src/test/java/org/apche/nifi/pgp/service/standard/StandardPGPPublicKeyServiceTest.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apche.nifi.pgp.service.standard;
 
+import org.apache.nifi.pgp.service.api.KeyIdentifierConverter;
 import org.apache.nifi.pgp.service.standard.StandardPGPPublicKeyService;
 import org.apache.nifi.pgp.util.PGPFileUtils;
 import org.apache.nifi.pgp.util.PGPSecretKeyGenerator;
@@ -129,7 +130,7 @@ public void testFindPublicKeyBinaryKeyringFileAndAsciiKeyring() throws Exception
 
     private void assertPublicKeyFound(final PGPSecretKey secretKey) {
         final long keyIdentifier = secretKey.getKeyID();
-        final String publicKeySearch = Long.toHexString(keyIdentifier).toUpperCase();
+        final String publicKeySearch = KeyIdentifierConverter.format(keyIdentifier);
         final Optional<PGPPublicKey> optionalPublicKey = service.findPublicKey(publicKeySearch);
         assertTrue(optionalPublicKey.isPresent());
         final PGPPublicKey publicKey = optionalPublicKey.get();

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/main/java/org/apache/nifi/processors/azure/storage/PutAzureBlobStorage_v12.java
Patch:
@@ -166,10 +166,10 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
         final String blobName = context.getProperty(BLOB_NAME).evaluateAttributeExpressions(flowFile).getValue();
         final AzureStorageConflictResolutionStrategy conflictResolution = AzureStorageConflictResolutionStrategy.valueOf(context.getProperty(CONFLICT_RESOLUTION).getValue());
         final ResourceTransferSource resourceTransferSource = ResourceTransferSource.valueOf(context.getProperty(RESOURCE_TRANSFER_SOURCE).getValue());
-        final Optional<FileResource> fileResourceFound = getFileResource(resourceTransferSource, context, flowFile.getAttributes());
 
         long startNanos = System.nanoTime();
         try {
+            final Optional<FileResource> fileResourceFound = getFileResource(resourceTransferSource, context, flowFile.getAttributes());
             BlobServiceClient storageClient = getStorageClient(context, flowFile);
             BlobContainerClient containerClient = storageClient.getBlobContainerClient(containerName);
             if (createContainer && !containerClient.exists()) {

File: minifi/minifi-c2/minifi-c2-service/src/main/java/org/apache/nifi/minifi/c2/security/authentication/X509AuthenticationToken.java
Patch:
@@ -20,6 +20,8 @@
 import java.security.cert.X509Certificate;
 import java.util.Arrays;
 import java.util.Collection;
+
+import org.apache.nifi.security.cert.StandardPrincipalFormatter;
 import org.springframework.security.authentication.AbstractAuthenticationToken;
 import org.springframework.security.core.GrantedAuthority;
 
@@ -36,7 +38,7 @@ protected X509AuthenticationToken(X509Certificate[] x509Certificates, Collection
         super(grantedAuthorities);
         this.x509Certificates = Arrays.copyOf(x509Certificates, x509Certificates.length, X509Certificate[].class);
         X509Certificate x509Certificate = x509Certificates[0];
-        this.subjectDn = x509Certificate.getSubjectX500Principal().getName().trim();
+        this.subjectDn = StandardPrincipalFormatter.getInstance().getSubject(x509Certificate);
     }
 
     @Override

File: nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/client/socket/StandardSocketPeerIdentityProvider.java
Patch:
@@ -17,13 +17,14 @@
 package org.apache.nifi.remote.client.socket;
 
 import java.net.Socket;
-import java.security.Principal;
 import java.security.cert.Certificate;
 import java.security.cert.X509Certificate;
 import java.util.Optional;
 import javax.net.ssl.SSLPeerUnverifiedException;
 import javax.net.ssl.SSLSession;
 import javax.net.ssl.SSLSocket;
+
+import org.apache.nifi.security.cert.StandardPrincipalFormatter;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -60,8 +61,7 @@ private Optional<String> getPeerIdentity(final SSLSession sslSession) {
                 logger.warn("Peer Identity not found: Peer Certificates not provided [{}:{}]", peerHost, peerPort);
             } else {
                 final X509Certificate peerCertificate = (X509Certificate) peerCertificates[0];
-                final Principal subjectDistinguishedName = peerCertificate.getSubjectX500Principal();
-                peerIdentity = subjectDistinguishedName.getName();
+                peerIdentity = StandardPrincipalFormatter.getInstance().getSubject(peerCertificate);
             }
         } catch (final SSLPeerUnverifiedException e) {
             logger.warn("Peer Identity not found: Peer Unverified [{}:{}]", peerHost, peerPort);

File: nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/util/SiteToSiteRestApiClient.java
Patch:
@@ -116,6 +116,7 @@
 import org.apache.nifi.remote.protocol.http.HttpHeaders;
 import org.apache.nifi.remote.protocol.http.HttpProxy;
 import org.apache.nifi.reporting.Severity;
+import org.apache.nifi.security.cert.StandardPrincipalFormatter;
 import org.apache.nifi.stream.io.StreamUtils;
 import org.apache.nifi.web.api.dto.ControllerDTO;
 import org.apache.nifi.web.api.dto.remote.PeerDTO;
@@ -317,7 +318,7 @@ public void process(final HttpResponse response, final HttpContext httpContext)
 
                 try {
                     final X509Certificate cert = (X509Certificate) certChain[0];
-                    trustedPeerDn = cert.getSubjectX500Principal().getName().trim();
+                    trustedPeerDn = StandardPrincipalFormatter.getInstance().getSubject(cert);
                 } catch (final RuntimeException e) {
                     final String msg = "Could not extract subject DN from SSL session peer certificate";
                     logger.warn(msg);

File: nifi-commons/nifi-site-to-site-client/src/test/java/org/apache/nifi/remote/client/socket/StandardSocketPeerIdentityProviderTest.java
Patch:
@@ -38,7 +38,7 @@
 
 @ExtendWith(MockitoExtension.class)
 class StandardSocketPeerIdentityProviderTest {
-    private static final String DISTINGUISHED_NAME = "CN=Common Name,OU=Organizational Unit,O=Organization";
+    private static final String DISTINGUISHED_NAME = "CN=Common Name, OU=Organizational Unit, O=Organization";
 
     @Mock
     SSLSocket sslSocket;

File: nifi-nar-bundles/nifi-email-bundle/nifi-email-processors/src/main/java/org/apache/nifi/processors/email/smtp/SmtpConsumer.java
Patch:
@@ -38,6 +38,7 @@
 import org.apache.nifi.processor.ProcessSessionFactory;
 import org.apache.nifi.processor.exception.FlowFileAccessException;
 import org.apache.nifi.processors.email.ListenSMTP;
+import org.apache.nifi.security.cert.StandardPrincipalFormatter;
 import org.apache.nifi.stream.io.LimitingInputStream;
 import org.apache.nifi.util.StopWatch;
 import org.subethamail.smtp.MessageContext;
@@ -141,7 +142,7 @@ private Map<String, String> extractMessageAttributes() {
             for (int i = 0; i < tlsPeerCertificates.length; i++) {
                 if (tlsPeerCertificates[i] instanceof final X509Certificate x509Cert) {
                     attributes.put("smtp.certificate." + i + ".serial", x509Cert.getSerialNumber().toString());
-                    attributes.put("smtp.certificate." + i + ".subjectName", x509Cert.getSubjectX500Principal().getName());
+                    attributes.put("smtp.certificate." + i + ".subjectName", StandardPrincipalFormatter.getInstance().getSubject(x509Cert));
                 }
             }
         }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-site-to-site/src/main/java/org/apache/nifi/remote/SocketRemoteSiteListener.java
Patch:
@@ -27,7 +27,6 @@
 import java.net.Socket;
 import java.net.SocketTimeoutException;
 import java.security.GeneralSecurityException;
-import java.security.Principal;
 import java.security.cert.Certificate;
 import java.security.cert.X509Certificate;
 import java.util.ArrayList;
@@ -54,6 +53,7 @@
 import org.apache.nifi.remote.protocol.CommunicationsSession;
 import org.apache.nifi.remote.protocol.RequestType;
 import org.apache.nifi.remote.protocol.ServerProtocol;
+import org.apache.nifi.security.cert.StandardPrincipalFormatter;
 import org.apache.nifi.security.util.TlsPlatform;
 import org.apache.nifi.util.NiFiProperties;
 import org.slf4j.Logger;
@@ -350,8 +350,7 @@ private String getPeerIdentity(final SSLSocket sslSocket) throws SSLPeerUnverifi
         }
 
         final X509Certificate peerCertificate = (X509Certificate) peerCertificates[0];
-        final Principal subjectDistinguishedName = peerCertificate.getSubjectX500Principal();
-        return subjectDistinguishedName.getName();
+        return StandardPrincipalFormatter.getInstance().getSubject(peerCertificate);
     }
 
     private boolean handleTlsError(String msg) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/test/java/org/apache/nifi/web/security/x509/X509AuthenticationProviderTest.java
Patch:
@@ -277,7 +277,7 @@ private X509Certificate getX509Certificate(final String identity) {
         final X509Certificate certificate = mock(X509Certificate.class);
         when(certificate.getSubjectX500Principal()).then(invocation -> {
             final X500Principal principal = mock(X500Principal.class);
-            when(principal.getName()).thenReturn(identity);
+            when(principal.getName(any())).thenReturn(identity);
             return principal;
         });
         return certificate;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/servlets/ContentAcknowledgmentServlet.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.nifi.processor.Processor;
 import org.apache.nifi.processors.standard.ListenHTTP;
 import org.apache.nifi.processors.standard.ListenHTTP.FlowFileEntryTimeWrapper;
+import org.apache.nifi.security.cert.StandardPrincipalFormatter;
 import org.apache.nifi.util.FormatUtils;
 
 @Path("/holds/*")
@@ -71,12 +72,12 @@ protected void doDelete(final HttpServletRequest request, final HttpServletRespo
         String foundSubject = DEFAULT_FOUND_SUBJECT;
         if (certs != null) {
             for (final X509Certificate cert : certs) {
-                foundSubject = cert.getSubjectX500Principal().getName();
+                foundSubject = StandardPrincipalFormatter.getInstance().getSubject(cert);
 
                 if (authorizedPattern.matcher(foundSubject).matches()) {
                     break;
                 } else {
-                    logger.warn(processor + " rejecting transfer attempt from " + foundSubject + " because the DN is not authorized");
+                    logger.warn("rejecting transfer attempt from [{}] because the DN is not authorized", foundSubject);
                     response.sendError(HttpServletResponse.SC_FORBIDDEN, "not allowed based on dn");
                     return;
                 }

File: nifi-registry/nifi-registry-core/nifi-registry-web-api/src/main/java/org/apache/nifi/registry/web/security/authentication/x509/SubjectDnX509PrincipalExtractor.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.nifi.registry.web.security.authentication.x509;
 
+import org.apache.nifi.security.cert.StandardPrincipalFormatter;
 import org.springframework.security.web.authentication.preauth.x509.X509PrincipalExtractor;
 import org.springframework.stereotype.Component;
 
@@ -28,8 +29,7 @@
 public class SubjectDnX509PrincipalExtractor implements X509PrincipalExtractor {
 
     @Override
-    public Object extractPrincipal(X509Certificate cert) {
-        return cert.getSubjectX500Principal().getName().trim();
+    public Object extractPrincipal(final X509Certificate cert) {
+        return StandardPrincipalFormatter.getInstance().getSubject(cert);
     }
-
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/controller/StandardProcessorNode.java
Patch:
@@ -355,7 +355,6 @@ public boolean isLossTolerant() {
     }
 
     @Override
-    @SuppressWarnings("deprecation")
     public boolean isIsolated() {
         return executionNode == ExecutionNode.PRIMARY;
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/registry/flow/StandardFlowRegistryClientNode.java
Patch:
@@ -367,7 +367,7 @@ private Map<String, VersionedParameterContext> populateVersionedContentsRecursiv
     private RegisteredFlowSnapshot fetchFlowContents(final FlowRegistryClientUserContext context, final VersionedFlowCoordinates coordinates,
                                                      final boolean fetchRemoteFlows) throws FlowRegistryException {
 
-        final String storageLocation = coordinates.getStorageLocation() == null ? coordinates.getRegistryUrl() : coordinates.getStorageLocation();
+        final String storageLocation = coordinates.getStorageLocation();
         final String bucketId = coordinates.getBucketId();
         final String flowId = coordinates.getFlowId();
         final int version = coordinates.getVersion();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/repository/TestWriteAheadFlowFileRepository.java
Patch:
@@ -19,7 +19,6 @@
 import org.apache.nifi.connectable.Connectable;
 import org.apache.nifi.connectable.Connection;
 import org.apache.nifi.controller.queue.DropFlowFileStatus;
-import org.apache.nifi.controller.status.FlowFileAvailability;
 import org.apache.nifi.controller.queue.FlowFileQueue;
 import org.apache.nifi.controller.queue.FlowFileQueueSize;
 import org.apache.nifi.controller.queue.ListFlowFileStatus;
@@ -36,6 +35,7 @@
 import org.apache.nifi.controller.repository.claim.ResourceClaimManager;
 import org.apache.nifi.controller.repository.claim.StandardContentClaim;
 import org.apache.nifi.controller.repository.claim.StandardResourceClaimManager;
+import org.apache.nifi.controller.status.FlowFileAvailability;
 import org.apache.nifi.controller.swap.StandardSwapContents;
 import org.apache.nifi.controller.swap.StandardSwapSummary;
 import org.apache.nifi.flowfile.FlowFilePrioritizer;
@@ -77,7 +77,6 @@
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.when;
 
-@SuppressWarnings("deprecation")
 public class TestWriteAheadFlowFileRepository {
 
     private static NiFiProperties niFiProperties;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardFlowRegistryDAO.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.nifi.bundle.BundleCoordinate;
 import org.apache.nifi.controller.FlowController;
 import org.apache.nifi.registry.flow.FlowRegistryBucket;
-import org.apache.nifi.registry.flow.FlowRegistryClientUserContext;
 import org.apache.nifi.registry.flow.FlowRegistryClientNode;
+import org.apache.nifi.registry.flow.FlowRegistryClientUserContext;
 import org.apache.nifi.registry.flow.FlowRegistryException;
 import org.apache.nifi.registry.flow.RegisteredFlow;
 import org.apache.nifi.registry.flow.RegisteredFlowSnapshotMetadata;
@@ -43,7 +43,6 @@ public class StandardFlowRegistryDAO extends ComponentDAO implements FlowRegistr
 
     @Override
     public FlowRegistryClientNode createFlowRegistryClient(final FlowRegistryClientDTO flowRegistryClientDto) {
-        // ensure the type is specified
         if (flowRegistryClientDto.getType() == null) {
             throw new IllegalArgumentException("The flow registry client type must be specified.");
         }

File: nifi-registry/nifi-registry-core/nifi-registry-flow-diff/src/main/java/org/apache/nifi/registry/flow/diff/ConciseEvolvingDifferenceDescriptor.java
Patch:
@@ -77,7 +77,7 @@ public String describeDifference(final DifferenceType type, final String flowANa
                     final VersionedFlowCoordinates coordinatesB = (VersionedFlowCoordinates) valueB;
 
                     // If the two vary only by version, then use a more concise message. If anything else is different, then use a fully explanation.
-                    if (FlowDifferenceUtil.areRegistryUrlsEqual(coordinatesA, coordinatesB) && Objects.equals(coordinatesA.getBucketId(), coordinatesB.getBucketId())
+                    if (Objects.equals(coordinatesA.getStorageLocation(), coordinatesB.getStorageLocation()) && Objects.equals(coordinatesA.getBucketId(), coordinatesB.getBucketId())
                             && Objects.equals(coordinatesA.getFlowId(), coordinatesB.getFlowId()) && coordinatesA.getVersion() != coordinatesB.getVersion()) {
 
                         description = String.format("Flow Version changed from %s to %s", coordinatesA.getVersion(), coordinatesB.getVersion());

File: nifi-registry/nifi-registry-core/nifi-registry-flow-diff/src/main/java/org/apache/nifi/registry/flow/diff/StaticDifferenceDescriptor.java
Patch:
@@ -71,7 +71,7 @@ public String describeDifference(final DifferenceType type, final String flowANa
                     final VersionedFlowCoordinates coordinatesB = (VersionedFlowCoordinates) valueB;
 
                     // If the two vary only by version, then use a more concise message. If anything else is different, then use a fully explanation.
-                    if (Objects.equals(coordinatesA.getRegistryUrl(), coordinatesB.getRegistryUrl()) && Objects.equals(coordinatesA.getBucketId(), coordinatesB.getBucketId())
+                    if (Objects.equals(coordinatesA.getStorageLocation(), coordinatesB.getStorageLocation()) && Objects.equals(coordinatesA.getBucketId(), coordinatesB.getBucketId())
                             && Objects.equals(coordinatesA.getFlowId(), coordinatesB.getFlowId()) && coordinatesA.getVersion() != coordinatesB.getVersion()) {
 
                         description = String.format("Flow Version is %s in %s but %s in %s", coordinatesA.getVersion(), flowAName, coordinatesB.getVersion(), flowBName);

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/command/CommandOption.java
Patch:
@@ -79,6 +79,7 @@ public enum CommandOption {
     REGISTRY_CLIENT_NAME("rcn", "registryClientName", "The name of the registry client", true),
     REGISTRY_CLIENT_URL("rcu", "registryClientUrl", "The url of the registry client", true),
     REGISTRY_CLIENT_DESC("rcd", "registryClientDesc", "The description of the registry client", true),
+    REGISTRY_CLIENT_TYPE("rct", "registryClientType", "The type of the registry client", true),
 
     // NiFi - PGs
     PG_ID("pgid", "processGroupId", "The id of a process group", true),

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/command/registry/flow/ImportAllFlows.java
Patch:
@@ -272,8 +272,8 @@ private void updateStorageLocation(final VersionedProcessGroup group, final Stri
                     flowCoordinates.getFlowId(), flowCoordinates.getVersion());
 
             flowCoordinates.setStorageLocation(updatedStorageLocation);
-            flowCoordinates.setRegistryUrl(registryUrl);
         }
+
         for (VersionedProcessGroup processGroup : group.getProcessGroups()) {
             updateStorageLocation(processGroup, registryUrl);
         }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/controller/flow/AbstractFlowManager.java
Patch:
@@ -594,8 +594,8 @@ public ParameterContextManager getParameterContextManager() {
     }
 
     @Override
-    public ParameterContext createParameterContext(final String id, final String name, final Map<String, Parameter> parameters,
-                                                   final List<String> inheritedContextIds,
+    public ParameterContext createParameterContext(final String id, final String name, final String description,
+                                                   final Map<String, Parameter> parameters, final List<String> inheritedContextIds,
                                                    final ParameterProviderConfiguration parameterProviderConfiguration) {
         final boolean namingConflict = parameterContextManager.getParameterContexts().stream()
                 .anyMatch(paramContext -> paramContext.getName().equals(name));
@@ -614,6 +614,7 @@ public ParameterContext createParameterContext(final String id, final String nam
                 .parameterProviderConfiguration(parameterProviderConfiguration)
                 .build();
         parameterContext.setParameters(parameters);
+        parameterContext.setDescription(description);
 
         if (inheritedContextIds != null && !inheritedContextIds.isEmpty()) {
             if (!withParameterContextResolution.get()) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/flow/FlowManager.java
Patch:
@@ -360,6 +360,7 @@ ControllerServiceNode createControllerService(String type, String id, BundleCoor
      *
      * @param id                The unique id
      * @param name              The ParameterContext name
+     * @param description       The ParameterContext description
      * @param parameters        The Parameters
      * @param inheritedContextIds The identifiers of any Parameter Contexts that the newly created Parameter Context should inherit from. The order of the identifiers in the List determines the
      * order in which parameters with conflicting names are resolved. I.e., the Parameter Context whose ID comes first in the List is preferred.
@@ -368,8 +369,8 @@ ControllerServiceNode createControllerService(String type, String id, BundleCoor
      * @throws IllegalStateException If <code>parameterContexts</code> is not empty and this method is called without being wrapped
      * by {@link FlowManager#withParameterContextResolution(Runnable)}
      */
-    ParameterContext createParameterContext(String id, String name, Map<String, Parameter> parameters, List<String> inheritedContextIds,
-                                            ParameterProviderConfiguration parameterProviderConfiguration);
+    ParameterContext createParameterContext(String id, String name, String description, Map<String, Parameter> parameters,
+                                            List<String> inheritedContextIds, ParameterProviderConfiguration parameterProviderConfiguration);
 
     /**
      * Performs the given ParameterContext-related action, and then resolves all inherited ParameterContext references.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/VersionedFlowSynchronizer.java
Patch:
@@ -815,8 +815,8 @@ private void addParameterContext(
             parameterProviderConfiguration = new StandardParameterProviderConfiguration(versionedParameterContext.getParameterProvider(),
                     versionedParameterContext.getParameterGroupName(), versionedParameterContext.isSynchronized());
         }
-        flowManager.createParameterContext(versionedParameterContext.getInstanceIdentifier(), versionedParameterContext.getName(), parameters, referenceIds,
-                parameterProviderConfiguration);
+        flowManager.createParameterContext(versionedParameterContext.getInstanceIdentifier(), versionedParameterContext.getName(), versionedParameterContext.getDescription(),
+                parameters, referenceIds, parameterProviderConfiguration);
         logger.info("Added Parameter Context {}", versionedParameterContext.getName());
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardParameterContextDAO.java
Patch:
@@ -99,7 +99,7 @@ public ParameterContext createParameterContext(final ParameterContextDTO paramet
 
             final ParameterProviderConfiguration parameterProviderConfiguration = createParameterProviderConfiguration(parameterProviderConfigurationEntity);
             final ParameterContext parameterContext = flowManager.createParameterContext(parameterContextDto.getId(), parameterContextDto.getName(),
-                    parameters, referencedIds, parameterProviderConfiguration);
+                    parameterContextDto.getDescription(), parameters, referencedIds, parameterProviderConfiguration);
             if (parameterContextDto.getDescription() != null) {
                 parameterContext.setDescription(parameterContextDto.getDescription());
             }

File: minifi/minifi-bootstrap/src/main/java/org/apache/nifi/minifi/bootstrap/service/MiNiFiPropertiesGenerator.java
Patch:
@@ -137,11 +137,11 @@ public class MiNiFiPropertiesGenerator {
         Triple.of(NiFiProperties.SECURITY_OCSP_RESPONDER_URL, EMPTY, EMPTY),
         Triple.of(NiFiProperties.SECURITY_OCSP_RESPONDER_CERTIFICATE, EMPTY, EMPTY),
         Triple.of(NiFiProperties.CLUSTER_IS_NODE, "false", EMPTY),
-        Triple.of(NiFiProperties.FLOW_CONFIGURATION_FILE, "./conf/flow.xml.gz", EMPTY)
+        Triple.of(NiFiProperties.FLOW_CONFIGURATION_FILE, "./conf/flow.json.gz", EMPTY)
     );
 
     static final Map<String, String> MINIFI_TO_NIFI_PROPERTY_MAPPING = Map.of(
-        MiNiFiProperties.NIFI_MINIFI_FLOW_CONFIG.getKey(), NiFiProperties.FLOW_CONFIGURATION_JSON_FILE,
+        MiNiFiProperties.NIFI_MINIFI_FLOW_CONFIG.getKey(), NiFiProperties.FLOW_CONFIGURATION_FILE,
         MiNiFiProperties.NIFI_MINIFI_SECURITY_KEYSTORE.getKey(), NiFiProperties.SECURITY_KEYSTORE,
         MiNiFiProperties.NIFI_MINIFI_SECURITY_KEYSTORE_TYPE.getKey(), NiFiProperties.SECURITY_KEYSTORE_TYPE,
         MiNiFiProperties.NIFI_MINIFI_SECURITY_KEYSTORE_PASSWD.getKey(), NiFiProperties.SECURITY_KEYSTORE_PASSWD,

File: minifi/minifi-nar-bundles/minifi-framework-bundle/minifi-framework/minifi-framework-core/src/main/java/org/apache/nifi/minifi/c2/C2NifiClientService.java
Patch:
@@ -45,7 +45,7 @@
 import static org.apache.nifi.minifi.commons.api.MiNiFiProperties.C2_SECURITY_TRUSTSTORE_LOCATION;
 import static org.apache.nifi.minifi.commons.api.MiNiFiProperties.C2_SECURITY_TRUSTSTORE_PASSWORD;
 import static org.apache.nifi.minifi.commons.api.MiNiFiProperties.C2_SECURITY_TRUSTSTORE_TYPE;
-import static org.apache.nifi.util.NiFiProperties.FLOW_CONFIGURATION_JSON_FILE;
+import static org.apache.nifi.util.NiFiProperties.FLOW_CONFIGURATION_FILE;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import java.io.IOException;
@@ -216,7 +216,7 @@ private C2OperationHandlerProvider c2OperationHandlerProvider(NiFiProperties niF
 
         FlowEnrichService flowEnrichService = new FlowEnrichService(niFiProperties);
         UpdateConfigurationStrategy updateConfigurationStrategy =
-            new DefaultUpdateConfigurationStrategy(flowController, flowService, flowEnrichService, niFiProperties.getProperty(FLOW_CONFIGURATION_JSON_FILE));
+            new DefaultUpdateConfigurationStrategy(flowController, flowService, flowEnrichService, niFiProperties.getProperty(FLOW_CONFIGURATION_FILE));
 
         return new C2OperationHandlerProvider(List.of(
             new UpdateConfigurationOperationHandler(client, flowIdHolder, updateConfigurationStrategy, emptyOperandPropertiesProvider),

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/flow/PopularVoteFlowElection.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.commons.codec.digest.DigestUtils;
 import org.apache.nifi.cluster.protocol.DataFlow;
 import org.apache.nifi.cluster.protocol.NodeIdentifier;
-import org.apache.nifi.controller.serialization.StandardFlowSynchronizer;
+import org.apache.nifi.controller.serialization.VersionedFlowSynchronizer;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -239,7 +239,7 @@ public DataFlow getDataFlow() {
         }
 
         public boolean isFlowEmpty() {
-            return StandardFlowSynchronizer.isFlowEmpty(dataFlow);
+            return VersionedFlowSynchronizer.isFlowEmpty(dataFlow);
         }
 
         public Set<NodeIdentifier> getNodes() {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/flow/synchronization/StandardVersionedComponentSynchronizer.java
Patch:
@@ -1472,7 +1472,7 @@ private static String decrypt(final String value, final PropertyDecryptor decryp
                 return decryptor.decrypt(value.substring(ENC_PREFIX.length(), value.length() - ENC_SUFFIX.length()));
             } catch (EncryptionException e) {
                 final String moreDescriptiveMessage = "There was a problem decrypting a sensitive flow configuration value. " +
-                        "Check that the nifi.sensitive.props.key value in nifi.properties matches the value used to encrypt the flow.xml.gz file";
+                        "Check that the nifi.sensitive.props.key value in nifi.properties matches the value used to encrypt the flow.json.gz file";
                 throw new EncryptionException(moreDescriptiveMessage, e);
             }
         } else {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/services/FlowService.java
Patch:
@@ -86,7 +86,7 @@ public interface FlowService extends LifeCycle {
     void copyCurrentFlow(OutputStream os) throws IOException;
 
     /**
-     * Copies the contents of the current flow.xml.gz to the given file, overwriting the file if it exists
+     * Copies the contents of the current flow.json.gz to the given file, overwriting the file if it exists
      * @param file the file to write the current flow to
      * @throws IOException if unable to read the current flow or unable to write to the given file
      */

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/RunningComponentSetFilter.java
Patch:
@@ -53,7 +53,9 @@ public class RunningComponentSetFilter implements ComponentSetFilter {
     public RunningComponentSetFilter(final VersionedDataflow dataflow) {
         dataflow.getControllerServices().forEach(service -> controllerServices.put(service.getInstanceIdentifier(), service));
         dataflow.getReportingTasks().forEach(task -> reportingTasks.put(task.getInstanceIdentifier(), task));
-        dataflow.getFlowAnalysisRules().forEach(rule -> flowAnalysisRules.put(rule.getInstanceIdentifier(), rule));
+        if (dataflow.getFlowAnalysisRules() != null) {
+            dataflow.getFlowAnalysisRules().forEach(rule -> flowAnalysisRules.put(rule.getInstanceIdentifier(), rule));
+        }
         flatten(dataflow.getRootGroup());
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/spring/StandardFlowServiceFactoryBean.java
Patch:
@@ -20,7 +20,6 @@
 import org.apache.nifi.cluster.coordination.ClusterCoordinator;
 import org.apache.nifi.cluster.protocol.impl.NodeProtocolSenderListener;
 import org.apache.nifi.controller.FlowController;
-import org.apache.nifi.controller.FlowSerializationStrategy;
 import org.apache.nifi.controller.StandardFlowService;
 import org.apache.nifi.encrypt.PropertyEncryptor;
 import org.apache.nifi.services.FlowService;
@@ -64,8 +63,7 @@ public Object getObject() throws Exception {
                     flowController,
                     properties,
                     revisionManager,
-                    authorizer,
-                    FlowSerializationStrategy.WRITE_XML_AND_JSON);
+                    authorizer);
             }
         }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/persistence/TestFlowConfigurationArchiveManager.java
Patch:
@@ -45,7 +45,7 @@
 
 public class TestFlowConfigurationArchiveManager {
 
-    private final File flowXmlFile = new File("./target/flow-archive/flow.xml.gz");
+    private final File flowXmlFile = new File("./target/flow-archive/flow.json.gz");
     private final File archiveDir = new File("./target/flow-archive");
 
     @BeforeEach

File: nifi-system-tests/nifi-system-test-suite/src/test/java/org/apache/nifi/tests/system/clustering/FlowSynchronizationIT.java
Patch:
@@ -425,7 +425,7 @@ public void testRestartWithFlowXmlGzNoJson() throws NiFiClientException, IOExcep
 
     @Test
     public void testRestartWithFlowJsonGzNoXml() throws NiFiClientException, IOException {
-        restartWithOnlySingleFlowPersistenceFile("flow.xml.gz");
+        restartWithOnlySingleFlowPersistenceFile("flow.json.gz");
     }
 
     private void restartWithOnlySingleFlowPersistenceFile(final String filenameToDelete) throws NiFiClientException, IOException {
@@ -437,7 +437,6 @@ private void restartWithOnlySingleFlowPersistenceFile(final String filenameToDel
         node2.stop();
 
         final File confDir = new File(node2.getInstanceDirectory(), "conf");
-        assertEquals(1, confDir.listFiles(file -> file.getName().equals("flow.xml.gz")).length);
         assertEquals(1, confDir.listFiles(file -> file.getName().equals("flow.json.gz")).length);
 
         final File jsonFile = new File(confDir, filenameToDelete);

File: nifi-system-tests/nifi-system-test-suite/src/test/java/org/apache/nifi/tests/system/clustering/JoinClusterAdjustStateIT.java
Patch:
@@ -83,8 +83,8 @@ public void testProcessorsStartWhenAble() throws NiFiClientException, IOExceptio
         final NiFiInstance node2Instance = getNiFiInstance().getNodeInstance(2);
 
         // Copy the flow from Node 1 to Node 2.
-        final File node1Flow = new File(firstNodeInstanceDir, "conf/flow.xml.gz");
-        final File node2Flow = new File(node2Instance.getInstanceDirectory(), "conf/flow.xml.gz");
+        final File node1Flow = new File(firstNodeInstanceDir, "conf/flow.json.gz");
+        final File node2Flow = new File(node2Instance.getInstanceDirectory(), "conf/flow.json.gz");
         Thread.sleep(2000L); // Wait a bit before copying it, since the flow is written out in the background, and we want to ensure that the flow is up-to-date.
         Files.copy(node1Flow.toPath(), node2Flow.toPath());
 

File: nifi-system-tests/nifi-system-test-suite/src/test/java/org/apache/nifi/tests/system/clustering/JoinClusterWithMissingConnectionNoData.java
Patch:
@@ -29,12 +29,12 @@ public NiFiInstanceFactory getInstanceFactory() {
             new InstanceConfiguration.Builder()
                 .bootstrapConfig("src/test/resources/conf/clustered/node1/bootstrap.conf")
                 .instanceDirectory("target/node1")
-                .flowXml("src/test/resources/flows/missing-connection/with-connection.xml.gz")
+                .flowJson("src/test/resources/flows/missing-connection/with-connection.json.gz")
                 .build(),
             new InstanceConfiguration.Builder()
                 .bootstrapConfig("src/test/resources/conf/clustered/node2/bootstrap.conf")
                 .instanceDirectory("target/node2")
-                .flowXml("src/test/resources/flows/missing-connection/without-connection.xml.gz")
+                .flowJson("src/test/resources/flows/missing-connection/without-connection.json.gz")
                 .build()
         );
     }

File: nifi-system-tests/nifi-system-test-suite/src/test/java/org/apache/nifi/tests/system/clustering/JoinClusterWithMissingConnectionWithData.java
Patch:
@@ -41,12 +41,12 @@ public NiFiInstanceFactory getInstanceFactory() {
             new InstanceConfiguration.Builder()
                 .bootstrapConfig("src/test/resources/conf/clustered/node1/bootstrap.conf")
                 .instanceDirectory("target/node1")
-                .flowXml("src/test/resources/flows/missing-connection/with-connection.xml.gz")
+                .flowJson("src/test/resources/flows/missing-connection/with-connection.json.gz")
                 .build(),
             new InstanceConfiguration.Builder()
                 .bootstrapConfig("src/test/resources/conf/clustered/node2/bootstrap.conf")
                 .instanceDirectory("target/node2")
-                .flowXml("src/test/resources/flows/missing-connection/with-connection.xml.gz")
+                .flowJson("src/test/resources/flows/missing-connection/with-connection.json.gz")
                 .build()
         );
     }

File: nifi-system-tests/nifi-system-test-suite/src/test/java/org/apache/nifi/tests/system/restart/FlowFileRestorationIT.java
Patch:
@@ -63,8 +63,6 @@ public void testDataInMissingQueueRestoredWhenQueueRestored() throws NiFiClientE
 
         final File nifiHome = nifiInstance.getInstanceDirectory();
         final File confDir = new File(nifiHome, "conf");
-        final File flowXmlGz = new File(confDir, "flow.xml.gz");
-        assertTrue(flowXmlGz.delete());
 
         final File flowJsonGz = new File(confDir, "flow.json.gz");
         final byte[] flowJsonGzBytes = Files.readAllBytes(flowJsonGz.toPath());

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/credentials/provider/factory/strategies/AnonymousCredentialsStrategy.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.nifi.processors.aws.credentials.provider.factory.strategies;
 
 import com.amazonaws.auth.AWSCredentialsProvider;
+import com.amazonaws.auth.AWSStaticCredentialsProvider;
 import com.amazonaws.auth.AnonymousAWSCredentials;
-import com.amazonaws.internal.StaticCredentialsProvider;
 import org.apache.nifi.context.PropertyContext;
 import org.apache.nifi.processors.aws.credentials.provider.factory.CredentialPropertyDescriptors;
 import software.amazon.awssdk.auth.credentials.AnonymousCredentialsProvider;
@@ -40,7 +40,7 @@ public AnonymousCredentialsStrategy() {
     @Override
     public AWSCredentialsProvider getCredentialsProvider(final PropertyContext propertyContext) {
         AnonymousAWSCredentials credentials = new AnonymousAWSCredentials();
-        return new StaticCredentialsProvider(credentials);
+        return new AWSStaticCredentialsProvider(credentials);
     }
 
     @Override

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/credentials/provider/service/AWSCredentialsProviderControllerService.java
Patch:
@@ -38,7 +38,7 @@
 import java.util.Collections;
 import java.util.List;
 
-import static org.apache.nifi.processors.aws.credentials.provider.factory.CredentialPropertyDescriptors.ACCESS_KEY;
+import static org.apache.nifi.processors.aws.credentials.provider.factory.CredentialPropertyDescriptors.ACCESS_KEY_ID;
 import static org.apache.nifi.processors.aws.credentials.provider.factory.CredentialPropertyDescriptors.ASSUME_ROLE_EXTERNAL_ID;
 import static org.apache.nifi.processors.aws.credentials.provider.factory.CredentialPropertyDescriptors.ASSUME_ROLE_PROXY_HOST;
 import static org.apache.nifi.processors.aws.credentials.provider.factory.CredentialPropertyDescriptors.ASSUME_ROLE_PROXY_PORT;
@@ -83,7 +83,7 @@ public class AWSCredentialsProviderControllerService extends AbstractControllerS
     static {
         final List<PropertyDescriptor> props = new ArrayList<>();
         props.add(USE_DEFAULT_CREDENTIALS);
-        props.add(ACCESS_KEY);
+        props.add(ACCESS_KEY_ID);
         props.add(SECRET_KEY);
         props.add(CREDENTIALS_FILE);
         props.add(PROFILE_NAME);

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/s3/encryption/ServerSideCEncryptionStrategy.java
Patch:
@@ -30,8 +30,7 @@
  * This strategy uses a customer key to perform server-side encryption.  Use this strategy when you want the server to perform the encryption,
  * (meaning you pay cost of processing) and when you want to manage the key material yourself.
  *
- * See https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html
- *
+ * See <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html">Server Side Encryption Customer Keys</a>.
  */
 public class ServerSideCEncryptionStrategy implements S3EncryptionStrategy {
     @Override

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/s3/encryption/ServerSideKMSEncryptionStrategy.java
Patch:
@@ -25,7 +25,7 @@
  * This strategy uses a KMS key to perform server-side encryption.  Use this strategy when you want the server to perform the encryption,
  * (meaning you pay the cost of processing) and when you want to use a KMS key.
  *
- * See https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html
+ * See <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html">Using KMS Encryption</a>
  *
  */
 public class ServerSideKMSEncryptionStrategy implements S3EncryptionStrategy {

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/s3/encryption/ServerSideS3EncryptionStrategy.java
Patch:
@@ -26,7 +26,7 @@
  * perform the encryption (meaning you pay the cost of processing) and you want AWS to completely manage the key.
  *
  *
- * See https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html
+ * See <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html">Using Server Side Encryption</a>
  *
  */
 public class ServerSideS3EncryptionStrategy implements S3EncryptionStrategy {

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/test/java/org/apache/nifi/processors/aws/dynamodb/DeleteDynamoDBTest.java
Patch:
@@ -40,8 +40,6 @@
 import java.util.List;
 import java.util.Map;
 
-import static org.apache.nifi.processors.aws.dynamodb.ITAbstractDynamoDBTest.REGION;
-import static org.apache.nifi.processors.aws.dynamodb.ITAbstractDynamoDBTest.stringHashStringRangeTableName;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 
@@ -101,7 +99,7 @@ protected DynamoDB getDynamoDB(ProcessContext context) {
 
         List<MockFlowFile> flowFiles = deleteRunner.getFlowFilesForRelationship(AbstractDynamoDBProcessor.REL_FAILURE);
         for (MockFlowFile flowFile : flowFiles) {
-            ITAbstractDynamoDBTest.validateServiceExceptionAttribute(flowFile);
+            validateServiceExceptionAttributes(flowFile);
         }
 
     }

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/test/java/org/apache/nifi/processors/aws/s3/encryption/TestStandardS3EncryptionService.java
Patch:
@@ -66,7 +66,7 @@ public void testServiceProperties() {
 
     @Test
     public void testCreateClientReturnsNull() {
-        assertNull(service.createEncryptionClient(null, null));
+        assertNull(service.createEncryptionClient(null));
     }
 
     @Test

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/test/java/org/apache/nifi/processors/aws/wag/TestInvokeAWSGatewayApiCommon.java
Patch:
@@ -73,7 +73,7 @@ protected void setupCredFile() {
     }
 
     public void setupEndpointAndRegion() {
-        runner.setProperty(InvokeAWSGatewayApi.PROP_AWS_GATEWAY_API_REGION, "us-east-1");
+        runner.setProperty(InvokeAWSGatewayApi.REGION, "us-east-1");
         runner.setProperty(InvokeAWSGatewayApi.PROP_AWS_API_KEY, "abcd");
         runner.setProperty(InvokeAWSGatewayApi.PROP_AWS_GATEWAY_API_ENDPOINT, mockWebServer.url("/").toString());
     }
@@ -324,7 +324,6 @@ public void testOutputResponseRegardlessWithOutputInAttributeLarge() throws Exce
 
 
     @Test
-    // NOTE : Amazon does not support multiple headers with the same name!!!
     public void testMultipleSameHeaders() throws Exception {
         mockWebServer.enqueue(new MockResponse().setResponseCode(200).addHeader("double", "2").addHeader("double", "2"));
 
@@ -362,7 +361,7 @@ public void testMultipleSameHeaders() throws Exception {
         // amazon does not support headers with the same name, we'll only get 2 here
         // this is in the amazon layer, we only get Map<String,String> for headers so the 1 has been stripped
         // already
-        bundle1.assertAttributeEquals("double", "2");
+        bundle1.assertAttributeEquals("double", "2,2");
     }
 
     @Test

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/test/java/org/apache/nifi/processors/aws/wag/TestInvokeAmazonGatewayApi.java
Patch:
@@ -22,7 +22,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
-public class TestInvokeInvokeAmazonGatewayApi extends TestInvokeAWSGatewayApiCommon {
+public class TestInvokeAmazonGatewayApi extends TestInvokeAWSGatewayApiCommon {
 
     @BeforeEach
     public void before() throws Exception {

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/test/java/org/apache/nifi/processors/aws/wag/TestInvokeAmazonGatewayApiMock.java
Patch:
@@ -70,7 +70,7 @@ public void setUp() throws Exception {
 
         runner.setProperty(InvokeAWSGatewayApi.AWS_CREDENTIALS_PROVIDER_SERVICE,
                            "awsCredentialsProvider");
-        runner.setProperty(InvokeAWSGatewayApi.PROP_AWS_GATEWAY_API_REGION, "us-east-1");
+        runner.setProperty(InvokeAWSGatewayApi.REGION, "us-east-1");
         runner.setProperty(InvokeAWSGatewayApi.PROP_AWS_API_KEY, "abcd");
         runner.setProperty(InvokeAWSGatewayApi.PROP_RESOURCE_NAME, "/TEST");
         runner.setProperty(InvokeAWSGatewayApi.PROP_AWS_GATEWAY_API_ENDPOINT,

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/controller/service/StandardControllerServiceNode.java
Patch:
@@ -835,7 +835,6 @@ public void notifyPrimaryNodeChanged(final PrimaryNodeState nodeState) {
 
     @Override
     protected void performFlowAnalysisOnThis() {
-        Optional.ofNullable(getValidationContextFactory().getFlowAnalyzer())
-            .ifPresent(flowAnalyzer -> flowAnalyzer.analyzeControllerService(this));
+        getValidationContextFactory().getFlowAnalyzer().ifPresent(flowAnalyzer -> flowAnalyzer.analyzeControllerService(this));
     }
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/controller/service/StandardControllerServiceProvider.java
Patch:
@@ -683,7 +683,9 @@ public void removeControllerService(final ControllerServiceNode serviceNode) {
         extensionManager.removeInstanceClassLoader(serviceNode.getIdentifier());
         serviceCache.remove(serviceNode.getIdentifier());
 
-        flowManager.getRuleViolationsManager().removeRuleViolationsForSubject(serviceNode.getIdentifier());
+        flowManager.getRuleViolationsManager().ifPresent(
+            ruleViolationsManager -> ruleViolationsManager.removeRuleViolationsForSubject(serviceNode.getIdentifier())
+        );
     }
 
     @Override

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/ProcessorNode.java
Patch:
@@ -36,7 +36,6 @@
 
 import java.util.List;
 import java.util.Map;
-import java.util.Optional;
 import java.util.Set;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ScheduledExecutorService;
@@ -286,8 +285,7 @@ public abstract CompletableFuture<Void> stop(ProcessScheduler processScheduler,
 
     @Override
     protected void performFlowAnalysisOnThis() {
-        Optional.ofNullable(getValidationContextFactory().getFlowAnalyzer())
-            .ifPresent(flowAnalyzer -> flowAnalyzer.analyzeProcessor(this));
+        getValidationContextFactory().getFlowAnalyzer().ifPresent(flowAnalyzer -> flowAnalyzer.analyzeProcessor(this));
     }
 
     /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/ValidationContextFactory.java
Patch:
@@ -23,13 +23,14 @@
 import org.apache.nifi.validation.RuleViolationsManager;
 
 import java.util.Map;
+import java.util.Optional;
 
 public interface ValidationContextFactory {
 
     ValidationContext newValidationContext(Map<PropertyDescriptor, PropertyConfiguration> properties, String annotationData, String groupId, String componentId, ParameterContext parameterContext,
                                            boolean validateConnections);
 
-    RuleViolationsManager getRuleViolationsManager();
+    Optional<RuleViolationsManager> getRuleViolationsManager();
 
-    FlowAnalyzer getFlowAnalyzer();
+    Optional<FlowAnalyzer> getFlowAnalyzer();
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/flow/FlowManager.java
Patch:
@@ -435,7 +435,7 @@ FlowAnalysisRuleNode createFlowAnalysisRule(
 
     Set<FlowAnalysisRuleNode> getAllFlowAnalysisRules();
 
-    FlowAnalyzer getFlowAnalyzer();
+    Optional<FlowAnalyzer> getFlowAnalyzer();
 
-    RuleViolationsManager getRuleViolationsManager();
+    Optional<RuleViolationsManager> getRuleViolationsManager();
 }

File: nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/processors/PublishJMS.java
Patch:
@@ -85,7 +85,7 @@
         + "FlowFile attributes will be added as JMS headers and/or properties to the outgoing JMS message.")
 @ReadsAttributes({
         @ReadsAttribute(attribute = JmsHeaders.DELIVERY_MODE, description = "This attribute becomes the JMSDeliveryMode message header. Must be an integer."),
-        @ReadsAttribute(attribute = JmsHeaders.EXPIRATION, description = "This attribute becomes the JMSExpiration message header. Must be an integer."),
+        @ReadsAttribute(attribute = JmsHeaders.EXPIRATION, description = "This attribute becomes the JMSExpiration message header. Must be a long."),
         @ReadsAttribute(attribute = JmsHeaders.PRIORITY, description = "This attribute becomes the JMSPriority message header. Must be an integer."),
         @ReadsAttribute(attribute = JmsHeaders.REDELIVERED, description = "This attribute becomes the JMSRedelivered message header."),
         @ReadsAttribute(attribute = JmsHeaders.TIMESTAMP, description = "This attribute becomes the JMSTimestamp message header. Must be a long."),

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ProcessGroupRecursivity.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.entity;
 
-public enum ProcessGroupUpdateStrategy {
-    CURRENT_GROUP,
-    CURRENT_GROUP_WITH_CHILDREN
+public enum ProcessGroupRecursivity {
+    DIRECT_CHILDREN,
+    ALL_DESCENDANTS
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/ProcessGroupDAO.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.nifi.web.api.dto.ProcessGroupDTO;
 import org.apache.nifi.web.api.dto.VariableRegistryDTO;
 import org.apache.nifi.web.api.dto.VersionControlInformationDTO;
-import org.apache.nifi.web.api.entity.ProcessGroupUpdateStrategy;
+import org.apache.nifi.web.api.entity.ProcessGroupRecursivity;
 
 import java.util.Collection;
 import java.util.Map;
@@ -60,10 +60,10 @@ public interface ProcessGroupDAO {
      * Gets all of the process groups.
      *
      * @param parentGroupId The parent group id
-     * @param processGroupUpdateStrategy if process groups with its child groups should be included
+     * @param processGroupRecursivity how far into child/descendant groups to recurse
      * @return The process groups
      */
-    Set<ProcessGroup> getProcessGroups(String parentGroupId, ProcessGroupUpdateStrategy processGroupUpdateStrategy);
+    Set<ProcessGroup> getProcessGroups(String parentGroupId, ProcessGroupRecursivity processGroupRecursivity);
 
     /**
      * Gets all of the process groups.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardProcessGroupDAO.java
Patch:
@@ -46,7 +46,7 @@
 import org.apache.nifi.web.api.dto.VariableRegistryDTO;
 import org.apache.nifi.web.api.dto.VersionControlInformationDTO;
 import org.apache.nifi.web.api.entity.ParameterContextReferenceEntity;
-import org.apache.nifi.web.api.entity.ProcessGroupUpdateStrategy;
+import org.apache.nifi.web.api.entity.ProcessGroupRecursivity;
 import org.apache.nifi.web.api.entity.VariableEntity;
 import org.apache.nifi.web.dao.ProcessGroupDAO;
 import org.slf4j.Logger;
@@ -156,9 +156,9 @@ public ProcessGroup getProcessGroup(String groupId) {
     }
 
     @Override
-    public Set<ProcessGroup> getProcessGroups(final String parentGroupId, final ProcessGroupUpdateStrategy processGroupUpdateStrategy) {
+    public Set<ProcessGroup> getProcessGroups(final String parentGroupId, final ProcessGroupRecursivity processGroupRecursivity) {
         ProcessGroup group = locateProcessGroup(flowController, parentGroupId);
-        if (processGroupUpdateStrategy == ProcessGroupUpdateStrategy.CURRENT_GROUP_WITH_CHILDREN) {
+        if (processGroupRecursivity == ProcessGroupRecursivity.ALL_DESCENDANTS) {
             return new HashSet<>(group.findAllProcessGroups());
         } else {
             return group.getProcessGroups();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/web/api/TestProcessGroupResource.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.nifi.web.api.dto.ProcessGroupDTO;
 import org.apache.nifi.web.api.dto.RevisionDTO;
 import org.apache.nifi.web.api.entity.ProcessGroupEntity;
-import org.apache.nifi.web.api.entity.ProcessGroupUpdateStrategy;
+import org.apache.nifi.web.api.entity.ProcessGroupRecursivity;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.InjectMocks;
@@ -37,12 +37,12 @@
 import java.util.UUID;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.mockito.Mockito.when;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 @ExtendWith(MockitoExtension.class)
 public class TestProcessGroupResource {
@@ -84,7 +84,7 @@ public void testUpdateProcessGroupNotExecuted_WhenUserNotAuthorized(@Mock HttpSe
         revisionDTO.setVersion(1L);
 
         processGroupEntity.setRevision(revisionDTO);
-        processGroupEntity.setProcessGroupUpdateStrategy(ProcessGroupUpdateStrategy.CURRENT_GROUP.name());
+        processGroupEntity.setProcessGroupUpdateStrategy(ProcessGroupRecursivity.DIRECT_CHILDREN.name());
         processGroupEntity.setComponent(groupDTO);
 
         doThrow(AccessDeniedException.class).when(serviceFacade).authorizeAccess(any(AuthorizeAccess.class));

File: nifi-commons/nifi-record/src/test/java/org/apache/nifi/serialization/record/TestDataTypeUtils.java
Patch:
@@ -519,7 +519,7 @@ public void testIsCompatibleDataTypeBigint() {
     @Test
     public void testIsCompatibleDataTypeInteger() {
         final DataType dataType = RecordFieldType.INT.getDataType();
-        assertTrue(DataTypeUtils.isCompatibleDataType(new Integer("1234567"), dataType));
+        assertTrue(DataTypeUtils.isCompatibleDataType(Integer.valueOf("1234567"), dataType));
         assertTrue(DataTypeUtils.isCompatibleDataType("1234567", dataType));
         assertFalse(DataTypeUtils.isCompatibleDataType(new BigInteger("12345678901234567890"), dataType));
         assertFalse(DataTypeUtils.isCompatibleDataType(1234567890123456789L, dataType));

File: nifi-commons/nifi-security-utils/src/test/java/org/apache/nifi/security/util/crypto/PBKDF2SecureHasherTest.java
Patch:
@@ -290,7 +290,7 @@ void testShouldFailDKLengthBoundary() throws Exception {
         List<Integer> validHLengths = Arrays.asList(32, 64);
 
         // MAX_VALUE + 1 will become MIN_VALUE because of signed integer math
-        List<Integer> invalidDKLengths = Arrays.asList(-1, 0, Integer.MAX_VALUE + 1, new Integer(Integer.MAX_VALUE * 2 - 1));
+        List<Integer> invalidDKLengths = Arrays.asList(-1, 0, Integer.MAX_VALUE + 1, Integer.valueOf(Integer.MAX_VALUE * 2 - 1));
 
         // Act and Assert
         validHLengths.forEach(hLen -> {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/TestFlowController.java
Patch:
@@ -1121,7 +1121,7 @@ public void testInstantiateSnippetWithProcessor() throws ProcessorInstantiationE
         // create a processor dto
         final ProcessorDTO processorDTO = new ProcessorDTO();
         processorDTO.setId(UUID.randomUUID().toString()); // use a different id here
-        processorDTO.setPosition(new PositionDTO(new Double(0), new Double(0)));
+        processorDTO.setPosition(new PositionDTO(Double.valueOf(0), Double.valueOf(0)));
         processorDTO.setStyle(processorNode.getStyle());
         processorDTO.setParentGroupId("1234");
         processorDTO.setInputRequirement(processorNode.getInputRequirement().name());
@@ -1180,7 +1180,7 @@ public void testInstantiateSnippetWithDisabledProcessor() throws ProcessorInstan
         // create a processor dto
         final ProcessorDTO processorDTO = new ProcessorDTO();
         processorDTO.setId(UUID.randomUUID().toString()); // use a different id here
-        processorDTO.setPosition(new PositionDTO(new Double(0), new Double(0)));
+        processorDTO.setPosition(new PositionDTO(Double.valueOf(0), Double.valueOf(0)));
         processorDTO.setStyle(processorNode.getStyle());
         processorDTO.setParentGroupId("1234");
         processorDTO.setInputRequirement(processorNode.getInputRequirement().name());

File: nifi-nar-bundles/nifi-hbase-bundle/nifi-hbase-processors/src/test/java/org/apache/nifi/hbase/TestPutHBaseRecord.java
Patch:
@@ -136,7 +136,7 @@ private void innertTest(PutColumn[] columns) {
         String nameVal = Bytes.toString(name.getBuffer());
         String codeVal = Bytes.toString(code.getBuffer());
         assertTrue(NAMES.contains(nameVal), "Name was not found");
-        assertTrue(CODES.contains(new Long(codeVal)), "Code was not found ");
+        assertTrue(CODES.contains(Long.valueOf(codeVal)), "Code was not found ");
     }
 
     @Test

File: nifi-nar-bundles/nifi-html-bundle/nifi-html-processors/src/main/java/org/apache/nifi/ModifyHTMLElement.java
Patch:
@@ -178,7 +178,7 @@ public void process(InputStream in, OutputStream out) throws IOException {
                     out.write(doc.html().getBytes(StandardCharsets.UTF_8));
                 }
             });
-            ff = session.putAttribute(ff, NUM_ELEMENTS_MODIFIED_ATTR, new Integer(eles.size()).toString());
+            ff = session.putAttribute(ff, NUM_ELEMENTS_MODIFIED_ATTR, Integer.valueOf(eles.size()).toString());
             session.transfer(ff, REL_SUCCESS);
 
             // Transfer the original HTML

File: nifi-nar-bundles/nifi-mongodb-bundle/nifi-mongodb-services/src/test/java/org/apache/nifi/mongodb/MongoDBLookupServiceIT.java
Patch:
@@ -202,7 +202,7 @@ public void testLookupRecord() throws Exception {
             .append("decimalField", Double.MAX_VALUE / 2.0)
             .append("subrecordField", new Document()
                 .append("nestedString", "test")
-                .append("nestedLong", new Long(1000)))
+                .append("nestedLong", Long.valueOf(1000)))
             .append("arrayField", list)
         );
 
@@ -217,15 +217,15 @@ public void testLookupRecord() throws Exception {
 
         assertEquals("Hello, world", record.getValue("stringField"), "The value was wrong.");
         assertEquals("x-y-z", record.getValue("uuid"), "The value was wrong.");
-        assertEquals(new Long(10000), record.getValue("longField"));
+        assertEquals(Long.valueOf(10000), record.getValue("longField"));
         assertEquals((Double.MAX_VALUE / 2.0), record.getValue("decimalField"));
         assertEquals(d, record.getValue("dateField"));
         assertEquals(ts.getTime(), ((Date)record.getValue("timestampField")).getTime());
 
         Record subRecord = record.getAsRecord("subrecordField", subSchema);
         assertNotNull(subRecord);
         assertEquals("test", subRecord.getValue("nestedString"));
-        assertEquals(new Long(1000), subRecord.getValue("nestedLong"));
+        assertEquals(Long.valueOf(1000), subRecord.getValue("nestedLong"));
         assertEquals(list, record.getValue("arrayField"));
 
         Map<String, Object> clean = new HashMap<>();

File: nifi-nar-bundles/nifi-redis-bundle/nifi-redis-extensions/src/main/java/org/apache/nifi/redis/state/RedisStateMap.java
Patch:
@@ -29,8 +29,8 @@
  */
 public class RedisStateMap implements StateMap {
 
-    public static final Long DEFAULT_VERSION = new Long(-1);
-    public static final Integer DEFAULT_ENCODING = new Integer(1);
+    public static final Long DEFAULT_VERSION = Long.valueOf(-1);
+    public static final Integer DEFAULT_ENCODING = Integer.valueOf(1);
 
     private final Long version;
     private final Integer encodingVersion;

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/command/nifi/AbstractNiFiCommand.java
Patch:
@@ -81,7 +81,7 @@ protected RevisionDTO getInitialRevisionDTO() {
         final String clientId = getContext().getSession().getNiFiClientID();
 
         final RevisionDTO revisionDTO = new RevisionDTO();
-        revisionDTO.setVersion(new Long(0));
+        revisionDTO.setVersion(Long.valueOf(0));
         revisionDTO.setClientId(clientId);
         return revisionDTO;
     }

File: nifi-commons/nifi-properties/src/main/java/org/apache/nifi/util/NiFiProperties.java
Patch:
@@ -350,7 +350,7 @@ public class NiFiProperties extends ApplicationProperties {
     public static final String DEFAULT_AUTHORIZER_CONFIGURATION_FILE = "conf/authorizers.xml";
     public static final String DEFAULT_LOGIN_IDENTITY_PROVIDER_CONFIGURATION_FILE = "conf/login-identity-providers.xml";
     public static final Integer DEFAULT_REMOTE_INPUT_PORT = null;
-    private static final String DEFAULT_WEB_HTTPS_APPLICATION_PROTOCOLS = "http/1.1";
+    private static final String DEFAULT_WEB_HTTPS_APPLICATION_PROTOCOLS = "h2 http/1.1";
     public static final int DEFAULT_WEB_THREADS = 200;
     public static final String DEFAULT_WEB_MAX_HEADER_SIZE = "16 KB";
     public static final String DEFAULT_WEB_WORKING_DIR = "./work/jetty";
@@ -725,7 +725,7 @@ public Integer getConfiguredHttpOrHttpsPort() throws RuntimeException {
     }
 
     /**
-     * Get Web HTTPS Application Protocols defaults to HTTP/1.1
+     * Get Web HTTPS Application Protocols defaults to HTTP/2 and HTTP/1.1
      *
      * @return Set of configured HTTPS Application Protocols
      */

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-jetty/src/test/java/org/apache/nifi/web/server/connector/FrameworkServerConnectorFactoryTest.java
Patch:
@@ -36,7 +36,6 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
-import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
@@ -110,15 +109,15 @@ void testGetServerConnectorHttps() {
         assertHttpConnectionFactoryFound(serverConnector);
         final SslConnectionFactory sslConnectionFactory = assertSslConnectionFactoryFound(serverConnector);
 
-        final SslContextFactory.Server sslContextFactory = (SslContextFactory.Server) sslConnectionFactory.getSslContextFactory();
+        final SslContextFactory.Server sslContextFactory = sslConnectionFactory.getSslContextFactory();
         assertTrue(sslContextFactory.getNeedClientAuth());
         assertFalse(sslContextFactory.getWantClientAuth());
 
         assertCipherSuitesConfigured(sslContextFactory);
         assertAutoReloadEnabled(serverConnector);
 
         final HTTP2ServerConnectionFactory http2ServerConnectionFactory = serverConnector.getConnectionFactory(HTTP2ServerConnectionFactory.class);
-        assertNull(http2ServerConnectionFactory);
+        assertNotNull(http2ServerConnectionFactory);
     }
 
     @Test

File: nifi-registry/nifi-registry-core/nifi-registry-properties/src/main/java/org/apache/nifi/registry/properties/NiFiRegistryProperties.java
Patch:
@@ -123,7 +123,7 @@ public class NiFiRegistryProperties extends ApplicationProperties {
 
     // Defaults
     public static final String DEFAULT_WEB_WORKING_DIR = "./work/jetty";
-    public static final String DEFAULT_WEB_HTTPS_APPLICATION_PROTOCOLS = "http/1.1";
+    public static final String DEFAULT_WEB_HTTPS_APPLICATION_PROTOCOLS = "h2 http/1.1";
     public static final String DEFAULT_WAR_DIR = "./lib";
     public static final String DEFAULT_PROVIDERS_CONFIGURATION_FILE = "./conf/providers.xml";
     public static final String DEFAULT_REGISTRY_ALIAS_CONFIGURATION_FILE = "./conf/registry-aliases.xml";
@@ -235,7 +235,7 @@ public File getWebWorkingDirectory() {
     }
 
     /**
-     * Get Web HTTPS Application Protocols defaults to HTTP/1.1
+     * Get Web HTTPS Application Protocols defaults to HTTP/2 and HTTP/1.1
      *
      * @return Set of configured HTTPS Application Protocols
      */

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/logging/repository/StandardLogRepository.java
Patch:
@@ -127,6 +127,7 @@ public void setObservationLevel(LogLevel level) {
         try {
             final Set<LogObserver> observersCopy = new HashSet<>(observers);
             observers.clear();
+            observersPerLogLevel.clear();
 
             for (final LogObserver observer : observersCopy) {
                 addObserver(level, observer);

File: nifi-api/src/main/java/org/apache/nifi/action/Component.java
Patch:
@@ -31,6 +31,7 @@ public enum Component {
     Connection,
     ControllerService,
     ReportingTask,
+    FlowAnalysisRule,
     FlowRegistryClient,
     ParameterContext,
     ParameterProvider,

File: nifi-api/src/main/java/org/apache/nifi/annotation/behavior/Stateful.java
Patch:
@@ -28,7 +28,7 @@
 
 /**
  * <p>
- * Annotation that a Processor, ReportingTask, ParameterProvider, or Controller Service can use to indicate
+ * Annotation that a Processor, ReportingTask, FlowAnalysisRule, ParameterProvider, or Controller Service can use to indicate
  * that the component makes use of the {@link StateManager}. This annotation provides the
  * user with a description of what information is being stored so that the user is able to
  * understand what is shown to them and know what they are clearing should they choose to

File: nifi-api/src/main/java/org/apache/nifi/annotation/documentation/CapabilityDescription.java
Patch:
@@ -26,7 +26,8 @@
 /**
  * Annotation that may be placed on a {@link org.apache.nifi.processor.Processor Processor},
  * {@link org.apache.nifi.controller.ControllerService ControllerService},
- * {@link org.apache.nifi.parameter.ParameterProvider ParameterProvider}, or
+ * {@link org.apache.nifi.parameter.ParameterProvider ParameterProvider},
+ * {@link org.apache.nifi.flowanalysis.FlowAnalysisRule FlowAnalysisRule}, or
  * {@link org.apache.nifi.reporting.ReportingTask ReportingTask} allowing for a
  * description to be provided. This description can be provided to a user in
  * logs, UI, etc.

File: nifi-api/src/main/java/org/apache/nifi/annotation/documentation/SeeAlso.java
Patch:
@@ -27,7 +27,8 @@
 /**
  * Annotation that may be placed on a null {@link org.apache.nifi.processor.Processor Processor},
  * {@link org.apache.nifi.controller.ControllerService ControllerService},
- * {@link org.apache.nifi.parameter.ParameterProvider ParameterProvider}, or
+ * {@link org.apache.nifi.parameter.ParameterProvider ParameterProvider},
+ * {@link org.apache.nifi.flowanalysis.FlowAnalysisRule FlowAnalysisRule}, or
  * {@link org.apache.nifi.reporting.ReportingTask ReportingTask} that indicates
  * this component is related to the components listed.
  *

File: nifi-api/src/main/java/org/apache/nifi/annotation/documentation/Tags.java
Patch:
@@ -26,7 +26,8 @@
 /**
  * Annotation that can be applied to a {@link org.apache.nifi.processor.Processor Processor},
  * {@link org.apache.nifi.controller.ControllerService ControllerService},
- * {@link org.apache.nifi.parameter.ParameterProvider ParameterProvider}, or
+ * {@link org.apache.nifi.parameter.ParameterProvider ParameterProvider},
+ * {@link org.apache.nifi.flowanalysis.FlowAnalysisRule FlowAnalysisRule}, or
  * {@link org.apache.nifi.reporting.ReportingTask ReportingTask} in order to
  * associate tags (keywords) with the component. These tags do not affect the
  * component in any way but serve as additional documentation and can be used to

File: nifi-api/src/main/java/org/apache/nifi/annotation/lifecycle/OnAdded.java
Patch:
@@ -27,8 +27,9 @@
  * <p>
  * Marker annotation a {@link org.apache.nifi.processor.Processor Processor},
  * {@link org.apache.nifi.controller.ControllerService ControllerService},
- * {@link org.apache.nifi.registry.flow.FlowRegistryClient FlowRegistryClient}
- * {@link org.apache.nifi.parameter.ParameterProvider ParameterProvider}, or
+ * {@link org.apache.nifi.registry.flow.FlowRegistryClient FlowRegistryClient},
+ * {@link org.apache.nifi.parameter.ParameterProvider ParameterProvider},
+ * {@link org.apache.nifi.flowanalysis.FlowAnalysisRule FlowAnalysisRule}, or
  * {@link org.apache.nifi.reporting.ReportingTask ReportingTask} implementation
  * can use to indicate a method should be called whenever the component is added
  * to the flow. This method will be called once for the entire life of a

File: nifi-api/src/main/java/org/apache/nifi/annotation/lifecycle/OnRemoved.java
Patch:
@@ -29,8 +29,9 @@
  * <p>
  * Marker annotation a {@link org.apache.nifi.processor.Processor Processor},
  * {@link org.apache.nifi.controller.ControllerService ControllerService},
- * {@link org.apache.nifi.registry.flow.FlowRegistryClient FlowRegistryClient}
- * {@link org.apache.nifi.parameter.ParameterProvider ParameterProvider}, or
+ * {@link org.apache.nifi.registry.flow.FlowRegistryClient FlowRegistryClient},
+ * {@link org.apache.nifi.parameter.ParameterProvider ParameterProvider},
+ * {@link org.apache.nifi.flowanalysis.FlowAnalysisRule FlowAnalysisRule}, or
  * {@link org.apache.nifi.reporting.ReportingTask ReportingTask} implementation
  * can use to indicate a method should be called whenever the component is
  * removed from the flow. This method will be called once for the entire life of

File: nifi-api/src/main/java/org/apache/nifi/controller/ControllerService.java
Patch:
@@ -26,11 +26,12 @@
 import org.apache.nifi.processor.Processor;
 import org.apache.nifi.reporting.InitializationException;
 import org.apache.nifi.reporting.ReportingTask;
+import org.apache.nifi.flowanalysis.FlowAnalysisRule;
 
 /**
  * <p>
  * This interface provides a mechanism for creating services that are shared
- * among all {@link Processor}s, {@link ReportingTask}s, {@link ParameterProvider}s and other
+ * among all {@link Processor}s, {@link ReportingTask}s, {@link FlowAnalysisRule}s, {@link ParameterProvider}s and other
  * {@code ControllerService}s.
  * </p>
  *

File: nifi-api/src/main/java/org/apache/nifi/documentation/ExtensionType.java
Patch:
@@ -23,5 +23,7 @@ public enum ExtensionType {
 
     REPORTING_TASK,
 
+    FLOW_ANALYSIS_RULE,
+
     PARAMETER_PROVIDER;
 }

File: nifi-api/src/main/java/org/apache/nifi/flow/ComponentType.java
Patch:
@@ -31,6 +31,7 @@ public enum ComponentType {
     LABEL("Label"),
     CONTROLLER_SERVICE("Controller Service"),
     REPORTING_TASK("Reporting Task"),
+    FLOW_ANALYSIS_RULE("Flow Analysis Rule"),
     PARAMETER_CONTEXT("Parameter Context"),
     PARAMETER_PROVIDER("Parameter Provider"),
     TEMPLATE("Template"),

File: nifi-api/src/main/java/org/apache/nifi/flow/VersionedConfigurableComponent.java
Patch:
@@ -25,7 +25,7 @@ public interface VersionedConfigurableComponent {
 
     Map<String, VersionedPropertyDescriptor> getPropertyDescriptors();
 
-    void setPropertyDescriptors(Map<String,VersionedPropertyDescriptor> propertyDescriptors);
+    void setPropertyDescriptors(Map<String, VersionedPropertyDescriptor> propertyDescriptors);
 
     Map<String,String> getProperties();
 

File: nifi-commons/nifi-properties/src/main/java/org/apache/nifi/util/NiFiProperties.java
Patch:
@@ -304,6 +304,9 @@ public class NiFiProperties extends ApplicationProperties {
     public static final String ANALYTICS_CONNECTION_MODEL_SCORE_NAME = "nifi.analytics.connection.model.score.name";
     public static final String ANALYTICS_CONNECTION_MODEL_SCORE_THRESHOLD = "nifi.analytics.connection.model.score.threshold";
 
+    // flow analysis properties
+    public static final String BACKGROUND_FLOW_ANALYSIS_SCHEDULE = "nifi.flow.analysis.background.task.schedule";
+
     // runtime monitoring properties
     public static final String MONITOR_LONG_RUNNING_TASK_SCHEDULE = "nifi.monitor.long.running.task.schedule";
     public static final String MONITOR_LONG_RUNNING_TASK_THRESHOLD = "nifi.monitor.long.running.task.threshold";

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-documentation/src/main/java/org/apache/nifi/documentation/DocGenerator.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.nifi.controller.ControllerService;
 import org.apache.nifi.documentation.html.HtmlDocumentationWriter;
 import org.apache.nifi.documentation.html.HtmlProcessorDocumentationWriter;
+import org.apache.nifi.flowanalysis.FlowAnalysisRule;
 import org.apache.nifi.nar.ExtensionDefinition;
 import org.apache.nifi.nar.ExtensionManager;
 import org.apache.nifi.nar.ExtensionMapping;
@@ -63,6 +64,7 @@ public static void generate(final NiFiProperties properties, final ExtensionMana
         documentConfigurableComponent(extensionManager.getExtensions(Processor.class), explodedNiFiDocsDir, extensionManager);
         documentConfigurableComponent(extensionManager.getExtensions(ControllerService.class), explodedNiFiDocsDir, extensionManager);
         documentConfigurableComponent(extensionManager.getExtensions(ReportingTask.class), explodedNiFiDocsDir, extensionManager);
+        documentConfigurableComponent(extensionManager.getExtensions(FlowAnalysisRule.class), explodedNiFiDocsDir, extensionManager);
         documentConfigurableComponent(extensionManager.getExtensions(ParameterProvider.class), explodedNiFiDocsDir, extensionManager);
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-authorization/src/main/java/org/apache/nifi/authorization/resource/ResourceFactory.java
Patch:
@@ -575,6 +575,9 @@ public String getSafeDescription() {
                     case ReportingTask:
                         componentType = "Reporting Task";
                         break;
+                    case FlowAnalysisRule:
+                        componentType = "Flow Analysis Rule";
+                        break;
                     case Label:
                         componentType = "Label";
                         break;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-authorization/src/main/java/org/apache/nifi/authorization/resource/ResourceType.java
Patch:
@@ -34,6 +34,7 @@ public enum ResourceType {
     Proxy("/proxy"),
     RemoteProcessGroup("/remote-process-groups"),
     ReportingTask("/reporting-tasks"),
+    FlowAnalysisRule("/controller/flow-analysis-rules"),
     Resource("/resources"),
     SiteToSite("/site-to-site"),
     DataTransfer("/data-transfer"),

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/ComponentStateEndpointMerger.java
Patch:
@@ -37,6 +37,7 @@ public class ComponentStateEndpointMerger extends AbstractSingleDTOEndpoint<Comp
     public static final Pattern PROCESSOR_STATE_URI_PATTERN = Pattern.compile("/nifi-api/processors/[a-f0-9\\-]{36}/state");
     public static final Pattern CONTROLLER_SERVICE_STATE_URI_PATTERN = Pattern.compile("/nifi-api/controller-services/[a-f0-9\\-]{36}/state");
     public static final Pattern REPORTING_TASK_STATE_URI_PATTERN = Pattern.compile("/nifi-api/reporting-tasks/[a-f0-9\\-]{36}/state");
+    public static final Pattern FLOW_ANALYSIS_RULE_STATE_URI_PATTERN = Pattern.compile("/nifi-api/controller/flow-analysis-rules/[a-f0-9\\-]{36}/state");
 
     @Override
     public boolean canHandle(URI uri, String method) {
@@ -46,7 +47,8 @@ public boolean canHandle(URI uri, String method) {
 
         return PROCESSOR_STATE_URI_PATTERN.matcher(uri.getPath()).matches()
             || CONTROLLER_SERVICE_STATE_URI_PATTERN.matcher(uri.getPath()).matches()
-            || REPORTING_TASK_STATE_URI_PATTERN.matcher(uri.getPath()).matches();
+            || REPORTING_TASK_STATE_URI_PATTERN.matcher(uri.getPath()).matches()
+            || FLOW_ANALYSIS_RULE_STATE_URI_PATTERN.matcher(uri.getPath()).matches();
     }
 
     @Override

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/VerifyConfigEndpointMerger.java
Patch:
@@ -33,6 +33,7 @@ public class VerifyConfigEndpointMerger extends AbstractSingleEntityEndpoint<Ver
     public static final Pattern VERIFY_PROCESSOR_CONFIG_URI_PATTERN = Pattern.compile("/nifi-api/processors/[a-f0-9\\-]{36}/config/verification-requests(/[a-f0-9\\-]{36})?");
     public static final Pattern VERIFY_CONTROLLER_SERVICE_CONFIG_URI_PATTERN = Pattern.compile("/nifi-api/controller-services/[a-f0-9\\-]{36}/config/verification-requests(/[a-f0-9\\-]{36})?");
     public static final Pattern VERIFY_REPORTING_TASK_CONFIG_URI_PATTERN = Pattern.compile("/nifi-api/reporting-tasks/[a-f0-9\\-]{36}/config/verification-requests(/[a-f0-9\\-]{36})?");
+    public static final Pattern VERIFY_FLOW_ANALYSIS_RULE_URI_PATTERN = Pattern.compile("/nifi-api/controller/flow-analysis-rules/[a-f0-9\\-]{36}/config/verification-requests(/[a-f0-9\\-]{36})?");
     public static final Pattern VERIFY_PARAMETER_PROVIDER_CONFIG_URI_PATTERN = Pattern.compile("/nifi-api/parameter-providers/[a-f0-9\\-]{36}/config/verification-requests(/[a-f0-9\\-]{36})?");
 
     @Override
@@ -45,6 +46,7 @@ public boolean canHandle(final URI uri, final String method) {
         return VERIFY_PROCESSOR_CONFIG_URI_PATTERN.matcher(uri.getPath()).matches()
             || VERIFY_CONTROLLER_SERVICE_CONFIG_URI_PATTERN.matcher(uri.getPath()).matches()
             || VERIFY_REPORTING_TASK_CONFIG_URI_PATTERN.matcher(uri.getPath()).matches()
+            || VERIFY_FLOW_ANALYSIS_RULE_URI_PATTERN.matcher(uri.getPath()).matches()
             || VERIFY_PARAMETER_PROVIDER_CONFIG_URI_PATTERN.matcher(uri.getPath()).matches();
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/StandardFlowServiceTest.java
Patch:
@@ -92,7 +92,7 @@ public void setup() throws Exception {
         revisionManager = mock(RevisionManager.class);
         extensionManager = mock(ExtensionDiscoveringManager.class);
         flowController = FlowController.createStandaloneInstance(mockFlowFileEventRepository, properties, authorizer, mockAuditService, mockEncryptor,
-                                        new VolatileBulletinRepository(), variableRegistry, extensionManager, statusHistoryRepository);
+                                        new VolatileBulletinRepository(), variableRegistry, extensionManager, statusHistoryRepository, null);
         flowService = StandardFlowService.createStandaloneInstance(flowController, properties, revisionManager, authorizer,
                 FlowSerializationStrategy.WRITE_XML_AND_JSON);
         statusHistoryRepository = mock(StatusHistoryRepository.class);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/reporting/TestStandardReportingContext.java
Patch:
@@ -129,7 +129,7 @@ public void setup() {
 
         bulletinRepo = Mockito.mock(BulletinRepository.class);
         controller = FlowController.createStandaloneInstance(flowFileEventRepo, nifiProperties, authorizer, auditService, encryptor,
-                bulletinRepo, variableRegistry, extensionManager, statusHistoryRepository);
+                bulletinRepo, variableRegistry, extensionManager, statusHistoryRepository, null);
     }
 
     @AfterEach

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/scheduling/ProcessorLifecycleIT.java
Patch:
@@ -560,7 +560,7 @@ private FlowManagerAndSystemBundle buildFlowControllerForTest(final String propK
         final FlowController flowController = FlowController.createStandaloneInstance(mock(FlowFileEventRepository.class), nifiProperties,
                 mock(Authorizer.class), mock(AuditService.class), null, new VolatileBulletinRepository(),
                 new FileBasedVariableRegistry(nifiProperties.getVariableRegistryPropertiesPaths()),
-                extensionManager, mock(StatusHistoryRepository.class));
+                extensionManager, mock(StatusHistoryRepository.class), null);
 
         final FlowManager flowManager = flowController.getFlowManager();
         this.processScheduler = flowController.getProcessScheduler();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/serialization/StandardFlowSerializerTest.java
Patch:
@@ -99,7 +99,7 @@ public void setUp() throws Exception {
 
         final BulletinRepository bulletinRepo = Mockito.mock(BulletinRepository.class);
         controller = FlowController.createStandaloneInstance(flowFileEventRepo, nifiProperties, authorizer,
-            auditService, encryptor, bulletinRepo, variableRegistry, extensionManager, Mockito.mock(StatusHistoryRepository.class));
+            auditService, encryptor, bulletinRepo, variableRegistry, extensionManager, Mockito.mock(StatusHistoryRepository.class), null);
 
         serializer = new StandardFlowSerializer();
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-nar-utils/src/main/java/org/apache/nifi/init/ConfigurableComponentInitializerFactory.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.nifi.FlowRegistryClientInitializer;
 import org.apache.nifi.components.ConfigurableComponent;
 import org.apache.nifi.controller.ControllerService;
+import org.apache.nifi.flowanalysis.FlowAnalysisRule;
 import org.apache.nifi.nar.ExtensionManager;
 import org.apache.nifi.parameter.ParameterProvider;
 import org.apache.nifi.processor.Processor;
@@ -42,6 +43,8 @@ public static ConfigurableComponentInitializer createComponentInitializer(
             return new ControllerServiceInitializer(extensionManager);
         } else if (ReportingTask.class.isAssignableFrom(componentClass)) {
             return new ReportingTaskInitializer(extensionManager);
+        } else if (FlowAnalysisRule.class.isAssignableFrom(componentClass)) {
+            return new FlowAnalysisRuleInitializer(extensionManager);
         } else if (ParameterProvider.class.isAssignableFrom(componentClass)) {
             return new ParameterProviderInitializer(extensionManager);
         } else if (FlowRegistryClient.class.isAssignableFrom(componentClass)) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-nar-utils/src/main/java/org/apache/nifi/nar/ExtensionDefinition.java
Patch:
@@ -64,7 +64,7 @@ public Bundle getBundle() {
 
     /**
      * @return the type of Extension (e.g., {@link org.apache.nifi.processor.Processor}, {@link org.apache.nifi.controller.ControllerService},
-     * {@link org.apache.nifi.parameter.ParameterProvider}, or {@link org.apache.nifi.reporting.ReportingTask}.
+     * {@link org.apache.nifi.parameter.ParameterProvider}, {@link org.apache.nifi.reporting.ReportingTask} or {@link org.apache.nifi.flowanalysis.FlowAnalysisRule}.
      */
     public Class<?> getExtensionType() {
         return extensionType;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-nar-utils/src/main/java/org/apache/nifi/nar/NarThreadContextClassLoader.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.nifi.controller.repository.FlowFileRepository;
 import org.apache.nifi.controller.repository.FlowFileSwapManager;
 import org.apache.nifi.controller.status.history.StatusHistoryRepository;
+import org.apache.nifi.flowanalysis.FlowAnalysisRule;
 import org.apache.nifi.flowfile.FlowFilePrioritizer;
 import org.apache.nifi.parameter.ParameterProvider;
 import org.apache.nifi.processor.Processor;
@@ -69,6 +70,7 @@ public class NarThreadContextClassLoader extends URLClassLoader {
         narSpecificClasses.add(Processor.class);
         narSpecificClasses.add(FlowFilePrioritizer.class);
         narSpecificClasses.add(ReportingTask.class);
+        narSpecificClasses.add(FlowAnalysisRule.class);
         narSpecificClasses.add(ParameterProvider.class);
         narSpecificClasses.add(Validator.class);
         narSpecificClasses.add(InputStreamCallback.class);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-nar-utils/src/main/java/org/apache/nifi/nar/StandardExtensionDiscoveringManager.java
Patch:
@@ -36,6 +36,7 @@
 import org.apache.nifi.controller.status.analytics.StatusAnalyticsModel;
 import org.apache.nifi.controller.status.history.StatusHistoryRepository;
 import org.apache.nifi.flow.resource.ExternalResourceProvider;
+import org.apache.nifi.flowanalysis.FlowAnalysisRule;
 import org.apache.nifi.flowfile.FlowFilePrioritizer;
 import org.apache.nifi.init.ConfigurableComponentInitializer;
 import org.apache.nifi.init.ConfigurableComponentInitializerFactory;
@@ -114,6 +115,7 @@ public StandardExtensionDiscoveringManager(final Collection<Class<? extends Conf
         definitionMap.put(Processor.class, new HashSet<>());
         definitionMap.put(FlowFilePrioritizer.class, new HashSet<>());
         definitionMap.put(ReportingTask.class, new HashSet<>());
+        definitionMap.put(FlowAnalysisRule.class, new HashSet<>());
         definitionMap.put(ParameterProvider.class, new HashSet<>());
         definitionMap.put(ControllerService.class, new HashSet<>());
         definitionMap.put(Authorizer.class, new HashSet<>());
@@ -439,7 +441,7 @@ public Class<?> getClass(final ExtensionDefinition extensionDefinition) {
      */
     private static boolean multipleVersionsAllowed(Class<?> type) {
         return Processor.class.isAssignableFrom(type) || ControllerService.class.isAssignableFrom(type) || ReportingTask.class.isAssignableFrom(type)
-                || ParameterProvider.class.isAssignableFrom(type) || FlowRegistryClient.class.isAssignableFrom(type);
+                || FlowAnalysisRule.class.isAssignableFrom(type) || ParameterProvider.class.isAssignableFrom(type) || FlowRegistryClient.class.isAssignableFrom(type);
     }
 
     protected boolean isInstanceClassLoaderRequired(final String classType, final Bundle bundle) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-headless-server/src/main/java/org/apache/nifi/headless/HeadlessNiFiServer.java
Patch:
@@ -147,7 +147,8 @@ public void preDestruction() throws AuthorizerDestructionException {
                     bulletinRepository,
                     variableRegistry,
                     extensionManager,
-                    statusHistoryRepository);
+                    statusHistoryRepository,
+                    null);
 
             flowService = StandardFlowService.createStandaloneInstance(
                     flowController,

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-nar-utils/src/main/java/org/apache/nifi/nar/NarUnpacker.java
Patch:
@@ -605,16 +605,18 @@ private static ExtensionMapping determineDocumentedNiFiComponents(final BundleCo
         try (final JarFile jarFile = new JarFile(jar)) {
             final JarEntry processorEntry = jarFile.getJarEntry("META-INF/services/org.apache.nifi.processor.Processor");
             final JarEntry reportingTaskEntry = jarFile.getJarEntry("META-INF/services/org.apache.nifi.reporting.ReportingTask");
+            final JarEntry flowAnalysisRuleEntry = jarFile.getJarEntry("META-INF/services/org.apache.nifi.flowanalysis.FlowAnalysisRule");
             final JarEntry controllerServiceEntry = jarFile.getJarEntry("META-INF/services/org.apache.nifi.controller.ControllerService");
             final JarEntry parameterProviderEntry = jarFile.getJarEntry("META-INF/services/org.apache.nifi.parameter.ParameterProvider");
             final JarEntry flowRegistryClientEntry = jarFile.getJarEntry("META-INF/services/org.apache.nifi.registry.flow.FlowRegistryClient");
 
-            if (processorEntry == null && reportingTaskEntry == null && controllerServiceEntry == null && parameterProviderEntry == null) {
+            if (processorEntry == null && reportingTaskEntry == null && flowAnalysisRuleEntry == null && controllerServiceEntry == null && parameterProviderEntry == null) {
                 return mapping;
             }
 
             mapping.addAllProcessors(coordinate, determineDocumentedNiFiComponents(jarFile, processorEntry));
             mapping.addAllReportingTasks(coordinate, determineDocumentedNiFiComponents(jarFile, reportingTaskEntry));
+            mapping.addAllFlowAnalysisRules(coordinate, determineDocumentedNiFiComponents(jarFile, flowAnalysisRuleEntry));
             mapping.addAllControllerServices(coordinate, determineDocumentedNiFiComponents(jarFile, controllerServiceEntry));
             mapping.addAllParameterProviders(coordinate, determineDocumentedNiFiComponents(jarFile, parameterProviderEntry));
             mapping.addAllFlowRegistryClients(coordinate, determineDocumentedNiFiComponents(jarFile, flowRegistryClientEntry));

File: nifi-registry/nifi-registry-core/nifi-registry-flow-diff/src/main/java/org/apache/nifi/registry/flow/diff/ComparableDataFlow.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.nifi.registry.flow.diff;
 
 import org.apache.nifi.flow.VersionedControllerService;
+import org.apache.nifi.flow.VersionedFlowAnalysisRule;
 import org.apache.nifi.flow.VersionedFlowRegistryClient;
 import org.apache.nifi.flow.VersionedParameterProvider;
 import org.apache.nifi.flow.VersionedProcessGroup;
@@ -35,6 +36,8 @@ public interface ComparableDataFlow {
 
     Set<VersionedReportingTask> getReportingTasks();
 
+    Set<VersionedFlowAnalysisRule> getFlowAnalysisRules();
+
     Set<VersionedParameterContext> getParameterContexts();
 
     Set<VersionedParameterProvider> getParameterProviders();

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/client/nifi/impl/JerseyFlowClient.java
Patch:
@@ -233,7 +233,7 @@ public ClusteSummaryEntity getClusterSummary() throws NiFiClientException, IOExc
 
     @Override
     public ControllerServicesEntity getControllerServices() throws NiFiClientException, IOException {
-        return executeAction("Error retrieving reporting task controller services", () -> {
+        return executeAction("Error retrieving reporting task/flow analysis rule controller services", () -> {
             final WebTarget target = flowTarget.path("controller/controller-services");
             return getRequestBuilder(target).get(ControllerServicesEntity.class);
         });

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-test-utils/src/main/java/org/apache/nifi/elasticsearch/integration/AbstractElasticsearchITBase.java
Patch:
@@ -51,7 +51,7 @@
 public abstract class AbstractElasticsearchITBase {
     // default Elasticsearch version should (ideally) match that in the nifi-elasticsearch-bundle#pom.xml for the integration-tests profile
     protected static final DockerImageName IMAGE = DockerImageName
-            .parse(System.getProperty("elasticsearch.docker.image", "docker.elastic.co/elasticsearch/elasticsearch:8.7.1"));
+            .parse(System.getProperty("elasticsearch.docker.image", "docker.elastic.co/elasticsearch/elasticsearch:8.8.1"));
     protected static final String ELASTIC_USER_PASSWORD = System.getProperty("elasticsearch.elastic_user.password", RandomStringUtils.randomAlphanumeric(10, 20));
     private static final int PORT = 9200;
     protected static final ElasticsearchContainer ELASTICSEARCH_CONTAINER = new ElasticsearchContainer(IMAGE)

File: nifi-system-tests/nifi-system-test-suite/src/test/java/org/apache/nifi/tests/system/NiFiInstanceCache.java
Patch:
@@ -103,6 +103,9 @@ public NiFiInstanceFactory getFactory() {
         }
 
         public void poison(final NiFiInstance toPoison) {
+            if (this.instance == null) {
+                return;
+            }
             final NiFiInstance rawInstance = this.instance.getRawInstance();
 
             if (Objects.equals(rawInstance, toPoison)) {

File: nifi-external/nifi-kafka-connect/nifi-kafka-connector-tests/src/test/java/org/apache/nifi/kafka/connect/StatelessNiFiSourceTaskIT.java
Patch:
@@ -195,7 +195,7 @@ public void testStateProvidedAndRecovered(TestInfo testInfo) throws InterruptedE
         assertEquals(1, sourceOffset.size());
         final String generateProcessorId = sourceOffset.keySet().iterator().next();
 
-        final String serializedStateMap = "{\"version\":0,\"stateValues\":{\"count\":\"1\"}}";
+        final String serializedStateMap = "{\"version\":\"1\",\"stateValues\":{\"count\":\"1\"}}";
         final Map<String, ?> expectedSourceOffset = Collections.singletonMap(generateProcessorId, serializedStateMap);
         assertEquals(expectedSourceOffset, sourceOffset);
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/AffectedComponentDTO.java
Patch:
@@ -30,6 +30,7 @@ public class AffectedComponentDTO {
     public static final String COMPONENT_TYPE_OUTPUT_PORT = "OUTPUT_PORT";
     public static final String COMPONENT_TYPE_REMOTE_INPUT_PORT = "REMOTE_INPUT_PORT";
     public static final String COMPONENT_TYPE_REMOTE_OUTPUT_PORT = "REMOTE_OUTPUT_PORT";
+    public static final String COMPONENT_TYPE_STATELESS_GROUP = "STATELESS_GROUP";
 
     private String processGroupId;
     private String id;
@@ -61,7 +62,7 @@ public void setId(final String id) {
     @ApiModelProperty(value = "The type of this component",
         allowableValues = COMPONENT_TYPE_PROCESSOR + "," + COMPONENT_TYPE_CONTROLLER_SERVICE + ", "
             + COMPONENT_TYPE_INPUT_PORT + ", " + COMPONENT_TYPE_OUTPUT_PORT + ", "
-            + COMPONENT_TYPE_REMOTE_INPUT_PORT + ", " + COMPONENT_TYPE_REMOTE_OUTPUT_PORT)
+            + COMPONENT_TYPE_REMOTE_INPUT_PORT + ", " + COMPONENT_TYPE_REMOTE_OUTPUT_PORT + ", " + COMPONENT_TYPE_STATELESS_GROUP)
     public String getReferenceType() {
         return referenceType;
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/controller/repository/WeakHashMapProcessSessionFactory.java
Patch:
@@ -17,13 +17,13 @@
 
 package org.apache.nifi.controller.repository;
 
-import java.util.Map;
-import java.util.WeakHashMap;
-
 import org.apache.nifi.processor.ProcessSession;
 import org.apache.nifi.processor.ProcessSessionFactory;
 import org.apache.nifi.processor.exception.TerminatedTaskException;
 
+import java.util.Map;
+import java.util.WeakHashMap;
+
 public class WeakHashMapProcessSessionFactory implements ActiveProcessSessionFactory {
     private final ProcessSessionFactory delegate;
     private final Map<ProcessSession, Boolean> sessionMap = new WeakHashMap<>();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/util/FlowDifferenceFilters.java
Patch:
@@ -79,7 +79,8 @@ public static boolean isEnvironmentalChange(final FlowDifference difference, fin
     }
 
     private static boolean isSensitivePropertyDueToGhosting(final FlowDifference difference, final FlowManager flowManager) {
-        if (difference.getDifferenceType() != DifferenceType.PROPERTY_SENSITIVITY_CHANGED) {
+        final DifferenceType differenceType = difference.getDifferenceType();
+        if (differenceType != DifferenceType.PROPERTY_SENSITIVITY_CHANGED && differenceType != DifferenceType.PROPERTY_ADDED) {
             return false;
         }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/test/java/org/apache/nifi/logging/TestStandardLogRepository.java
Patch:
@@ -35,7 +35,7 @@ public class TestStandardLogRepository {
     public void testLogRepository() {
         StandardLogRepository repo = new StandardLogRepository();
         MockLogObserver observer = new MockLogObserver();
-        repo.addObserver("mock", LogLevel.DEBUG, observer);
+        repo.addObserver(LogLevel.DEBUG, observer);
 
         IOException exception = new IOException("exception");
 
@@ -50,7 +50,7 @@ public void testLogRepository() {
     public void testLogRepositoryLogsFirstFlowFileUuid() {
         StandardLogRepository repo = new StandardLogRepository();
         MockLogObserver observer = new MockLogObserver();
-        repo.addObserver("mock", LogLevel.DEBUG, observer);
+        repo.addObserver(LogLevel.DEBUG, observer);
         MockFlowFile mockFlowFile = new MockFlowFile(1L);
 
         repo.addLogMessage(LogLevel.INFO, "Testing {} being shown in exception message", new Object[]{mockFlowFile});
@@ -62,7 +62,7 @@ public void testLogRepositoryLogsFirstFlowFileUuid() {
     public void testLogRepositoryDoesntLogMultipleFlowFileUuids() {
         StandardLogRepository repo = new StandardLogRepository();
         MockLogObserver observer = new MockLogObserver();
-        repo.addObserver("mock", LogLevel.DEBUG, observer);
+        repo.addObserver(LogLevel.DEBUG, observer);
         MockFlowFile mockFlowFile1 = new MockFlowFile(1L);
         MockFlowFile mockFlowFile2 = new MockFlowFile(2L);
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/service/ControllerServiceProvider.java
Patch:
@@ -109,7 +109,7 @@ public interface ControllerServiceProvider extends ControllerServiceLookup {
      * @param serviceNodes the nodes the disable
      * @return a Future that can be used to cancel the task or wait until it is completed
      */
-    Future<Void> disableControllerServicesAsync(Collection<ControllerServiceNode> serviceNodes);
+    CompletableFuture<Void> disableControllerServicesAsync(Collection<ControllerServiceNode> serviceNodes);
 
     /**
      * @return a Set of all Controller Services that exist for this service provider

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/repository/WriteAheadFlowFileRepository.java
Patch:
@@ -542,7 +542,7 @@ protected void updateContentClaims(Collection<RepositoryRecord> repositoryRecord
         }
 
         if (!claimsToAdd.isEmpty()) {
-            // Get / Register a Set<ContentClaim> for the given Partiton Index
+            // Get / Register a Set<ContentClaim> for the given Partition Index
             final Integer partitionKey = Integer.valueOf(partitionIndex);
             BlockingQueue<ResourceClaim> claimQueue = claimsAwaitingDestruction.get(partitionKey);
             if (claimQueue == null) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/repository/TestWriteAheadFlowFileRepository.java
Patch:
@@ -646,7 +646,7 @@ public void testRestartWithOneRecord() throws IOException {
         final FlowFileRecord flowFileRecord = ffBuilder.build();
 
         final List<RepositoryRecord> records = new ArrayList<>();
-        final StandardRepositoryRecord record = new StandardRepositoryRecord(null);
+        final StandardRepositoryRecord record = new StandardRepositoryRecord((FlowFileQueue) null);
         record.setWorking(flowFileRecord, false);
         record.setDestination(connection.getFlowFileQueue());
         records.add(record);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/scheduling/DummyScheduleState.java
Patch:
@@ -19,6 +19,7 @@
 public class DummyScheduleState extends LifecycleState {
 
     public DummyScheduleState(boolean isScheduled) {
+        super("Dummy Component");
         setScheduled(isScheduled);
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/service/TestStandardControllerServiceProvider.java
Patch:
@@ -36,6 +36,7 @@
 import org.apache.nifi.controller.ScheduledState;
 import org.apache.nifi.controller.StandardProcessorNode;
 import org.apache.nifi.controller.flow.FlowManager;
+import org.apache.nifi.controller.scheduling.StandardLifecycleStateManager;
 import org.apache.nifi.controller.scheduling.StandardProcessScheduler;
 import org.apache.nifi.controller.service.mock.DummyProcessor;
 import org.apache.nifi.controller.service.mock.MockProcessGroup;
@@ -149,7 +150,7 @@ public void setup() {
 
     private StandardProcessScheduler createScheduler() {
         return new StandardProcessScheduler(new FlowEngine(1, "Unit Test", true), Mockito.mock(FlowController.class),
-                stateManagerProvider, niFiProperties);
+                stateManagerProvider, niFiProperties, new StandardLifecycleStateManager());
     }
 
     private void setProperty(ControllerServiceNode serviceNode, String propName, String propValue) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/tasks/TestConnectableTask.java
Patch:
@@ -59,7 +59,7 @@ private ConnectableTask createTask(final Connectable connectable) {
         final RepositoryContextFactory contextFactory = Mockito.mock(RepositoryContextFactory.class);
         Mockito.when(contextFactory.newProcessContext(Mockito.any(Connectable.class), Mockito.any(AtomicLong.class))).thenReturn(repoContext);
 
-        final LifecycleState scheduleState = new LifecycleState();
+        final LifecycleState scheduleState = new LifecycleState(connectable.getIdentifier());
 
         return new ConnectableTask(Mockito.mock(SchedulingAgent.class), connectable,
                 flowController, contextFactory, scheduleState);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/integration/FrameworkIntegrationTest.java
Patch:
@@ -40,6 +40,7 @@
 import org.apache.nifi.controller.StandardSnippet;
 import org.apache.nifi.controller.XmlFlowSynchronizer;
 import org.apache.nifi.controller.flow.StandardFlowManager;
+import org.apache.nifi.controller.scheduling.StandardLifecycleStateManager;
 import org.apache.nifi.framework.cluster.leader.zookeeper.CuratorLeaderElectionManager;
 import org.apache.nifi.controller.leader.election.LeaderElectionManager;
 import org.apache.nifi.controller.queue.FlowFileQueue;
@@ -266,7 +267,7 @@ protected final void initialize(final NiFiProperties nifiProperties) throws IOEx
                 VariableRegistry.ENVIRONMENT_SYSTEM_REGISTRY, extensionManager, statusHistoryRepository);
         }
 
-        processScheduler = new StandardProcessScheduler(flowEngine, flowController, flowController.getStateManagerProvider(), nifiProperties);
+        processScheduler = new StandardProcessScheduler(flowEngine, flowController, flowController.getStateManagerProvider(), nifiProperties, new StandardLifecycleStateManager());
 
         final RepositoryContextFactory repositoryContextFactory = flowController.getRepositoryContextFactory();
         final SchedulingAgent timerDrivenSchedulingAgent = new TimerDrivenSchedulingAgent(flowController, flowEngine, repositoryContextFactory, nifiProperties);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/registry/flow/mapping/NiFiRegistryFlowMapperTest.java
Patch:
@@ -44,6 +44,7 @@
 import org.apache.nifi.controller.service.ControllerServiceNode;
 import org.apache.nifi.controller.service.ControllerServiceProvider;
 import org.apache.nifi.flow.ComponentType;
+import org.apache.nifi.flow.ExecutionEngine;
 import org.apache.nifi.flow.ExternalControllerServiceReference;
 import org.apache.nifi.flow.ParameterProviderReference;
 import org.apache.nifi.flow.PortType;
@@ -407,6 +408,7 @@ private ProcessGroup prepareProcessGroup(final int numProcessors, final boolean
         when(parameterContext.getName()).thenReturn("context"+(counter++));
         when(processGroup.getFlowFileConcurrency()).thenReturn(FlowFileConcurrency.UNBOUNDED);
         when(processGroup.getFlowFileOutboundPolicy()).thenReturn(FlowFileOutboundPolicy.STREAM_WHEN_AVAILABLE);
+        when(processGroup.getExecutionEngine()).thenReturn(ExecutionEngine.INHERITED);
 
         // prep funnels
         final Set<Funnel> funnels = new LinkedHashSet<>();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-repository-models/src/main/java/org/apache/nifi/controller/repository/StandardFlowFileRecord.java
Patch:
@@ -141,6 +141,9 @@ public int compareTo(final FlowFile other) {
 
     @Override
     public boolean equals(final Object other) {
+        if (other == null) {
+            return false;
+        }
         if (this == other) {
             return true;
         }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-repository-models/src/test/java/org/apache/nifi/controller/repository/TestStandardRepositoryRecord.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.nifi.controller.repository;
 
+import org.apache.nifi.controller.queue.FlowFileQueue;
 import org.junit.jupiter.api.Test;
 
 import java.util.HashMap;
@@ -30,7 +31,7 @@ public class TestStandardRepositoryRecord {
 
     @Test
     public void testUpdatedAttributesMaintainedWhenFlowFileRemoved() {
-        final StandardRepositoryRecord record = new StandardRepositoryRecord(null);
+        final StandardRepositoryRecord record = new StandardRepositoryRecord((FlowFileQueue) null);
 
         final Map<String, String> updatedAttributes = new HashMap<>();
         updatedAttributes.put("abc", "xyz");

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/concurrent/AsyncRequestManager.java
Patch:
@@ -106,6 +106,8 @@ public void submitRequest(final String type, final String requestId, final Async
             throw new IllegalArgumentException("A requests already exists with this ID and type");
         }
 
+        logger.debug("Submitted request {}", key);
+
         threadPool.submit(new Runnable() {
             @Override
             public void run() {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardProcessorDAO.java
Patch:
@@ -395,11 +395,14 @@ private void verifyUpdate(ProcessorNode processor, ProcessorDTO processorDTO) {
                     // perform the appropriate action
                     switch (purposedScheduledState) {
                         case RUNNING:
+                        case RUN_ONCE:
+                            processor.getProcessGroup().verifyCanScheduleComponentsIndividually();
                             processor.verifyCanStart();
                             break;
                         case STOPPED:
                             switch (processor.getScheduledState()) {
                                 case RUNNING:
+                                    processor.getProcessGroup().verifyCanScheduleComponentsIndividually();
                                     processor.verifyCanStop();
                                     break;
                                 case DISABLED:

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/web/StandardNiFiServiceFacadeTest.java
Patch:
@@ -596,6 +596,7 @@ public void testUpdateProcessGroup_WithProcessorBulletin() {
         ProcessGroupStatus processGroupStatus = new ProcessGroupStatus();
         processGroupStatus.setId(groupId);
         processGroupStatus.setName(GROUP_NAME_1);
+        processGroupStatus.setStatelessActiveThreadCount(1);
 
         final ControllerFacade controllerFacade = mock(ControllerFacade.class);
         when(controllerFacade.getProcessGroupStatus(any())).thenReturn(processGroupStatus);
@@ -648,6 +649,7 @@ public void testUpdateProcessGroup_WithNoBulletinForProcessGroup() {
         ProcessGroupStatus processGroupStatus = new ProcessGroupStatus();
         processGroupStatus.setId(groupId);
         processGroupStatus.setName(GROUP_NAME_1);
+        processGroupStatus.setStatelessActiveThreadCount(1);
 
         final ControllerFacade controllerFacade = mock(ControllerFacade.class);
         when(controllerFacade.getProcessGroupStatus(any())).thenReturn(processGroupStatus);
@@ -695,6 +697,7 @@ public void testUpdateProcessGroup_WithProcessorGroupBulletin() {
         ProcessGroupStatus processGroupStatus = new ProcessGroupStatus();
         processGroupStatus.setId(groupId);
         processGroupStatus.setName(GROUP_NAME_1);
+        processGroupStatus.setStatelessActiveThreadCount(0);
 
         final ControllerFacade controllerFacade = mock(ControllerFacade.class);
         when(controllerFacade.getProcessGroupStatus(any())).thenReturn(processGroupStatus);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-optimistic-locking/src/main/java/org/apache/nifi/web/revision/NaiveRevisionManager.java
Patch:
@@ -119,7 +119,8 @@ public synchronized <T> RevisionUpdate<T> updateRevision(final RevisionClaim ori
 
             if (!verified) {
                 // Throw an Exception indicating that we failed to obtain the locks
-                throw new InvalidRevisionException("Invalid Revision was given for component with ID '" + revision.getComponentId() + "'");
+                throw new InvalidRevisionException("Invalid Revision given for component with ID [" + revision.getComponentId() +
+                    "]. Current Revision: " + currentRevision + " Proposed Revision: " + revision);
             }
         }
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/CompressContent.java
Patch:
@@ -442,11 +442,11 @@ public void process(final InputStream rawIn, final OutputStream rawOut) throws I
             }
 
             logger.info("Successfully {}ed {} using {} compression format; size changed from {} to {} bytes",
-                new Object[]{compressionMode.toLowerCase(), flowFile, compressionFormat, sizeBeforeCompression, sizeAfterCompression});
+                compressionMode.toLowerCase(), flowFile, compressionFormat, sizeBeforeCompression, sizeAfterCompression);
             session.getProvenanceReporter().modifyContent(flowFile, stopWatch.getDuration(TimeUnit.MILLISECONDS));
             session.transfer(flowFile, REL_SUCCESS);
         } catch (final ProcessException e) {
-            logger.error("Unable to {} {} using {} compression format due to {}; routing to failure", new Object[]{compressionMode.toLowerCase(), flowFile, compressionFormat, e});
+            logger.error("Unable to {} {} using {} compression format due to {}; routing to failure", compressionMode.toLowerCase(), flowFile, compressionFormat, e, e);
             session.transfer(flowFile, REL_FAILURE);
         }
     }

File: nifi-nar-bundles/nifi-stateless-processor-bundle/nifi-stateless-processor/src/main/java/org/apache/nifi/processors/stateless/ExecuteStateless.java
Patch:
@@ -132,7 +132,7 @@
     " be the name of the Parameter, and the value of the property will be the value of the Parameter. Because Parameter values may or may not be sensitive, all dynamic properties will be considered" +
     " sensitive in order to protect their integrity.")
 @InputRequirement(Requirement.INPUT_ALLOWED)
-@CapabilityDescription("Runs the configured dataflow using the Stateless NiFi engine. Please see documentation in order to understand the differences between the traditional NiFi runtime engine and" +
+@CapabilityDescription("Runs the configured dataflow using the Stateless NiFi engine. Please see documentation in order to understand the differences between the standard NiFi runtime engine and" +
     " the Stateless NiFi engine. If the Processor is configured with an incoming connection, the incoming FlowFiles will be queued up into the specified Input Port in the dataflow. Data that is" +
     " transferred out of the flow via an Output Port will be sent to the 'output' relationship, and an attribute will be added to indicate which Port that FlowFile was transferred to. See" +
     " Additional Details for more information.")

File: nifi-stateless/nifi-stateless-bootstrap/src/main/java/org/apache/nifi/stateless/bootstrap/StatelessBootstrap.java
Patch:
@@ -140,7 +140,7 @@ public static StatelessBootstrap bootstrap(final StatelessEngineConfiguration en
      * Creates a ClassLoader that is to be used as the 'root'/parent for all NiFi Extensions' ClassLoaders. The ClassLoader will inherit from its parent
      * any classes that exist in JAR files that can be found in the given NAR Directory or within the Java home directory. However, it will not allow any other classes to be loaded from the parent.
      * This approach is important because we need to ensure that the ClassLoader that is provided to extensions when run from NiFi Stateless is the same as the ClassLoader
-     * that will be provided to it in traditional NiFi. Whereas in traditional NiFi, we have the ability to control the System ClassLoader, Stateless NiFi is designed to be
+     * that will be provided to it in a standard NiFi deployment. Whereas in a standard NiFi deployment, we have the ability to control the System ClassLoader, Stateless NiFi is designed to be
      * embedded, so we cannot control the System ClassLoader of the embedding application. This gives us a way to ensure that we control what is available to Extensions and
      * still provides us the ability to load the necessary classes from the System ClassLoader, which prevents ClassCastExceptions that might otherwise occur if we were to
      * load the same classes from another ClassLoader.

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/flow/ExceptionalTriggerResult.java
Patch:
@@ -76,7 +76,7 @@ public void acknowledge() {
 
     @Override
     public void abort(final Throwable cause) {
-        if (cause != null) {
+        if (cause != null && failureCause != cause) {
             failureCause.addSuppressed(cause);
         }
     }

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/RepositoryContextFactory.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.nifi.controller.repository.ContentRepository;
 import org.apache.nifi.controller.repository.CounterRepository;
 import org.apache.nifi.controller.repository.FlowFileEventRepository;
+import org.apache.nifi.controller.repository.FlowFileRepository;
 import org.apache.nifi.controller.repository.RepositoryContext;
 import org.apache.nifi.provenance.ProvenanceEventRepository;
 
@@ -29,6 +30,8 @@ public interface RepositoryContextFactory {
 
     ContentRepository getContentRepository();
 
+    FlowFileRepository getFlowFileRepository();
+
     FlowFileEventRepository getFlowFileEventRepository();
 
     ProvenanceEventRepository getProvenanceRepository();

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/StatelessFlowFileRepository.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.nifi.controller.repository.claim.ContentClaim;
 import org.apache.nifi.controller.repository.claim.ResourceClaimManager;
 
+import java.io.IOException;
 import java.util.Collection;
 import java.util.List;
 import java.util.Set;
@@ -58,7 +59,7 @@ public String getFileStoreName() {
     }
 
     @Override
-    public void updateRepository(final Collection<RepositoryRecord> records) {
+    public void updateRepository(final Collection<RepositoryRecord> records) throws IOException {
         records.forEach(this::updateClaimCounts);
     }
 

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/session/StatelessProcessSessionFactory.java
Patch:
@@ -44,7 +44,8 @@ public StatelessProcessSessionFactory(final Connectable connectable, final Repos
 
     @Override
     public ProcessSession createSession() {
-        final ProcessSession session = new StatelessProcessSession(connectable, contextFactory, processContextFactory, executionProgress, requireSynchronousCommits, tracker);
+        final StatelessProcessSession session = new StatelessProcessSession(connectable, contextFactory, processContextFactory, executionProgress, requireSynchronousCommits, tracker);
+        executionProgress.registerCreatedSession(session);
         return session;
     }
 }

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/test/java/org/apache/nifi/stateless/session/TestAsynchronousCommitTracker.java
Patch:
@@ -36,7 +36,7 @@ public class TestAsynchronousCommitTracker {
 
     @Test
     public void testAddAndGetProvidesCorrectOrder() {
-        final AsynchronousCommitTracker tracker = new AsynchronousCommitTracker();
+        final AsynchronousCommitTracker tracker = new AsynchronousCommitTracker(null);
 
         final Connectable connectable1 = Mockito.mock(Connectable.class);
         final Connectable connectable2 = Mockito.mock(Connectable.class);
@@ -67,7 +67,7 @@ public void testAddAndGetProvidesCorrectOrder() {
 
     @Test
     public void testIsReadyRemovesConnectablesWithNoData() {
-        final AsynchronousCommitTracker tracker = new AsynchronousCommitTracker();
+        final AsynchronousCommitTracker tracker = new AsynchronousCommitTracker(null);
 
         final Connectable connectable1 = Mockito.mock(Connectable.class);
         final Connectable connectable2 = Mockito.mock(Connectable.class);
@@ -108,7 +108,7 @@ public void testIsReadyRemovesConnectablesWithNoData() {
 
     @Test
     public void testRootGroupOutputPortNotReady() {
-        final AsynchronousCommitTracker tracker = new AsynchronousCommitTracker();
+        final AsynchronousCommitTracker tracker = new AsynchronousCommitTracker(null);
 
         final Connectable outputPort = Mockito.mock(Connectable.class);
 

File: nifi-system-tests/nifi-stateless-system-test-suite/src/test/java/org/apache/nifi/stateless/basics/CancelFlowExecutionIT.java
Patch:
@@ -51,6 +51,7 @@ public void testCancelExecution() throws IOException, StatelessConfigurationExce
         flowBuilder.createConnection(sleep, outPort, "success");
 
         final StatelessDataflow dataflow = loadDataflow(flowBuilder.getFlowSnapshot());
+        dataflow.enqueue("Hello World".getBytes(), Collections.emptyMap(), "In");
         final DataflowTrigger trigger = dataflow.trigger();
 
         // Wait up to 250 milliseconds. At that point, the result should not be available.

File: nifi-system-tests/nifi-stateless-system-test-suite/src/test/java/org/apache/nifi/stateless/controller/services/StatelessControllerServiceSystemIT.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.nifi.stateless.controller.services;
 
-import org.apache.nifi.flowfile.FlowFile;
-import org.apache.nifi.processor.Relationship;
 import org.apache.nifi.flow.VersionedControllerService;
 import org.apache.nifi.flow.VersionedPort;
 import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.flow.VersionedProcessor;
+import org.apache.nifi.flowfile.FlowFile;
+import org.apache.nifi.processor.Relationship;
 import org.apache.nifi.stateless.StatelessSystemIT;
 import org.apache.nifi.stateless.VersionedFlowBuilder;
 import org.apache.nifi.stateless.config.StatelessConfigurationException;

File: nifi-system-tests/nifi-stateless-system-test-suite/src/test/java/org/apache/nifi/stateless/parameters/ParameterContextIT.java
Patch:
@@ -17,14 +17,14 @@
 
 package org.apache.nifi.stateless.parameters;
 
-import org.apache.nifi.flowfile.FlowFile;
-import org.apache.nifi.processor.Relationship;
-import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
 import org.apache.nifi.flow.VersionedParameter;
 import org.apache.nifi.flow.VersionedParameterContext;
 import org.apache.nifi.flow.VersionedPort;
 import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.flow.VersionedProcessor;
+import org.apache.nifi.flowfile.FlowFile;
+import org.apache.nifi.processor.Relationship;
+import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
 import org.apache.nifi.stateless.StatelessSystemIT;
 import org.apache.nifi.stateless.VersionedFlowBuilder;
 import org.apache.nifi.stateless.config.ParameterContextDefinition;

File: nifi-commons/nifi-record/src/main/java/org/apache/nifi/serialization/record/ResultSetRecordSet.java
Patch:
@@ -325,7 +325,7 @@ private DataType getDecimalDataType(final ResultSet rs, final int columnIndex) t
             decimalPrecision = resultSetPrecision;
             //For the float data type Oracle return decimalScale < 0 which cause is not expected to org.apache.avro.LogicalTypes
             //Hence falling back to default scale if decimalScale < 0
-            decimalScale = resultSetScale > 0 ? resultSetScale : defaultScale;
+            decimalScale = resultSetScale >= 0 ? resultSetScale : defaultScale;
         } else {
             // If not, use default precision.
             decimalPrecision = defaultPrecision;

File: nifi-system-tests/nifi-system-test-extensions-bundle/nifi-system-test-extensions/src/main/java/org/apache/nifi/processors/tests/system/DefaultedDynamicallyModifyClasspath.java
Patch:
@@ -44,7 +44,7 @@ public class DefaultedDynamicallyModifyClasspath extends AbstractProcessor {
             .name("URLs to Load")
             .description("URLs to load onto the classpath")
             .required(false)
-            .defaultValue("lib/bootstrap/commons-lang3-3.12.0.jar")
+            .defaultValue("lib/bootstrap/commons-lang3-3.13.0.jar")
             .dynamicallyModifiesClasspath(true)
             .identifiesExternalResource(ResourceCardinality.MULTIPLE, ResourceType.URL, ResourceType.FILE, ResourceType.DIRECTORY)
             .build();

File: nifi-nar-bundles/nifi-py4j-bundle/nifi-py4j-integration-tests/src/test/java/org.apache.nifi.py4j/PythonControllerInteractionIT.java
Patch:
@@ -337,7 +337,7 @@ public void testImportRequirements() {
 
         final List<String> dependencies = writeNumpyVersionDetails.getDependencies();
         assertEquals(1, dependencies.size());
-        assertEquals("numpy==1.20.0", dependencies.get(0));
+        assertEquals("numpy==1.25.0", dependencies.get(0));
 
         // Create a PrettyPrintJson Processor
         final PythonProcessorBridge writeNumPyVersion = createProcessor("WriteNumpyVersion");
@@ -352,7 +352,7 @@ public void testImportRequirements() {
         runner.run();
         runner.assertTransferCount("original", 1);
         runner.assertTransferCount("success", 1);
-        runner.getFlowFilesForRelationship("success").get(0).assertContentEquals("1.20.0");
+        runner.getFlowFilesForRelationship("success").get(0).assertContentEquals("1.25.0");
     }
 
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/util/SnippetUtils.java
Patch:
@@ -474,7 +474,7 @@ private void resolveNameConflicts(final FlowSnippetDTO snippetContents, final Pr
         if (snippetContents.getProcessGroups() != null) {
             for (final ProcessGroupDTO processGroupDTO : snippetContents.getProcessGroups()) {
                 String logFileSuffix = processGroupDTO.getLogFileSuffix();
-                if (logFileSuffix != null) {
+                if (logFileSuffix != null && !logFileSuffix.trim().isEmpty()) {
                     while (existingLogFileSuffixes.contains(logFileSuffix)) {
                         logFileSuffix = "Copy_of_" + logFileSuffix;
                     }

File: nifi-system-tests/nifi-system-test-suite/src/test/java/org/apache/nifi/tests/system/NiFiSystemIT.java
Patch:
@@ -448,7 +448,7 @@ private void logQueueSizesEveryMinute() {
         }
     }
 
-    private void logQueueSizes() throws NiFiClientException, IOException {
+    protected void logQueueSizes() throws NiFiClientException, IOException {
         final ProcessGroupStatusEntity groupStatusEntity = getNifiClient().getFlowClient().getProcessGroupStatus("root", true);
         final ProcessGroupStatusSnapshotDTO groupStatusDto = groupStatusEntity.getProcessGroupStatus().getAggregateSnapshot();
 

File: nifi-nar-bundles/nifi-redis-bundle/nifi-redis-extensions/src/test/java/org/apache/nifi/redis/state/TestRedisStateProvider.java
Patch:
@@ -45,6 +45,7 @@ public void init() {
 
         // Set up mock state provider init context
         Mockito.when(context.getProperty(RedisStateProvider.KEY_PREFIX)).thenReturn(new MockPropertyValue("/nifi/components/"));
+        Mockito.when(context.getProperty(RedisStateProvider.MAX_ATTEMPTS)).thenReturn(new MockPropertyValue("20"));
 
         // Set up mock validation context
         Mockito.when(validationContext.getProperty(RedisUtils.CONNECTION_STRING)).thenReturn(new MockPropertyValue("localhost:6379"));

File: nifi-nar-bundles/nifi-iceberg-bundle/nifi-iceberg-processors/src/test/java/org/apache/nifi/processors/iceberg/TestDataFileActions.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.iceberg.types.Types;
 import org.apache.nifi.flowfile.FlowFile;
 import org.apache.nifi.processor.ProcessContext;
+import org.apache.nifi.processors.iceberg.catalog.IcebergCatalogFactory;
 import org.apache.nifi.processors.iceberg.catalog.TestHadoopCatalogService;
 import org.apache.nifi.processors.iceberg.converter.IcebergRecordConverter;
 import org.apache.nifi.processors.iceberg.writer.IcebergTaskWriterFactory;
@@ -193,7 +194,8 @@ public void testMaxCommitDurationExceeded() {
 
     private Table initCatalog() throws IOException {
         TestHadoopCatalogService catalogService = new TestHadoopCatalogService();
-        Catalog catalog = catalogService.getCatalog();
+        IcebergCatalogFactory catalogFactory = new IcebergCatalogFactory(catalogService);
+        Catalog catalog = catalogFactory.create();
 
         return catalog.createTable(TABLE_IDENTIFIER, ABORT_SCHEMA, PartitionSpec.unpartitioned());
     }

File: minifi/minifi-bootstrap/src/main/java/org/apache/nifi/minifi/bootstrap/command/StopRunner.java
Patch:
@@ -45,7 +45,7 @@ public class StopRunner implements CommandRunner {
     private final ProcessUtils processUtils;
 
     public StopRunner(BootstrapFileProvider bootstrapFileProvider, MiNiFiParameters miNiFiParameters, MiNiFiCommandSender miNiFiCommandSender,
-        CurrentPortProvider currentPortProvider, GracefulShutdownParameterProvider gracefulShutdownParameterProvider, ProcessUtils processUtils) {
+                      CurrentPortProvider currentPortProvider, GracefulShutdownParameterProvider gracefulShutdownParameterProvider, ProcessUtils processUtils) {
         this.bootstrapFileProvider = bootstrapFileProvider;
         this.miNiFiParameters = miNiFiParameters;
         this.miNiFiCommandSender = miNiFiCommandSender;
@@ -56,6 +56,7 @@ public StopRunner(BootstrapFileProvider bootstrapFileProvider, MiNiFiParameters
 
     /**
      * Shutdown the MiNiFi and the managing bootstrap process as well.
+     *
      * @param args the input arguments
      * @return status code
      */
@@ -94,6 +95,7 @@ private int stop() throws IOException {
                 status = ERROR.getStatusCode();
             }
         } catch (IOException e) {
+            CMD_LOGGER.warn("An error has occurred while stopping MiNiFi. Force killing process with pid=" + minifiPid, e);
             killProcessTree(minifiPid);
         } finally {
             if (lockFile.exists() && !lockFile.delete()) {

File: nifi-nar-bundles/nifi-snowflake-bundle/nifi-snowflake-processors/src/test/java/org/apache/nifi/processors/snowflake/SnowflakeConfigAware.java
Patch:
@@ -31,7 +31,6 @@
 public interface SnowflakeConfigAware {
 
     Path filePath = Paths.get("???");
-    String stagedFilePath = "???";
 
     String organizationName = "???";
     String accountName = "???";

File: nifi-nar-bundles/nifi-snowflake-bundle/nifi-snowflake-processors/src/test/java/org/apache/nifi/processors/snowflake/SnowflakePipeIT.java
Patch:
@@ -85,7 +85,7 @@ void shouldStartFileIngestion() throws Exception {
                     false);
         }
 
-        final Map<String, String> attributes = Collections.singletonMap(SnowflakeAttributes.ATTRIBUTE_STAGED_FILE_PATH, uuid + "/" + stagedFilePath);
+        final Map<String, String> attributes = Collections.singletonMap(SnowflakeAttributes.ATTRIBUTE_STAGED_FILE_PATH, uuid + "/" + fileName);
         runner.enqueue("", attributes);
 
         runner.run();
@@ -114,7 +114,7 @@ void shouldAwaitSnowflakePipeIngestion() throws Exception {
                     false);
         }
 
-        final String stagedFilePathAttribute = uuid + "/" + stagedFilePath;
+        final String stagedFilePathAttribute = uuid + "/" + fileName;
 
         final StagedFileWrapper stagedFile = new StagedFileWrapper(stagedFilePathAttribute);
         ingestManagerProviderService.getIngestManager().ingestFile(stagedFile, null);

File: nifi-mock/src/test/java/org/apache/nifi/util/CurrentTestStandardProcessorTestRunner.java
Patch:
@@ -20,9 +20,10 @@
 import org.apache.nifi.processor.ProcessContext;
 import org.apache.nifi.processor.ProcessSession;
 import org.apache.nifi.processor.exception.ProcessException;
-import org.junit.Assert;
 import org.junit.jupiter.api.Test;
 
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
 public class CurrentTestStandardProcessorTestRunner {
 
     /**
@@ -36,7 +37,7 @@ public void testOnScheduledCalledAfterRunFinished() {
         runner.run(iterations);
         // if the counter is not equal to iterations, the the processor must have been unscheduled
         // before all the run calls were made, that would be bad.
-        Assert.assertEquals(iterations, processor.getCounter());
+        assertEquals(iterations, processor.getCounter());
     }
 
     /**

File: nifi-nar-bundles/nifi-atlas-bundle/nifi-atlas-reporting-task/src/test/java/org/apache/nifi/atlas/resolver/TestRegexNamespaceResolver.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import static junit.framework.TestCase.assertNull;
+import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.mockito.Mockito.when;

File: nifi-nar-bundles/nifi-influxdb-bundle/nifi-influxdb-processors/src/test/java/org/apache/nifi/processors/influxdb/AbstractITInfluxDB.java
Patch:
@@ -22,7 +22,7 @@
 import org.influxdb.InfluxDBFactory;
 import org.influxdb.dto.Query;
 import org.influxdb.dto.QueryResult;
-import org.junit.After;
+import org.junit.jupiter.api.AfterEach;
 
 import java.lang.reflect.Type;
 import java.util.List;
@@ -72,7 +72,7 @@ protected void checkError(QueryResult result) {
         }
     }
 
-    @After
+    @AfterEach
     public void tearDown() throws Exception {
         runner = null;
         if ( influxDB != null ) {

File: nifi-registry/nifi-registry-core/nifi-registry-framework/src/test/java/org/apache/nifi/registry/security/authorization/TestStandardAuthorizableLookup.java
Patch:
@@ -29,8 +29,8 @@
 
 import java.util.UUID;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.fail;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.argThat;

File: nifi-registry/nifi-registry-core/nifi-registry-framework/src/test/java/org/apache/nifi/registry/serialization/TestExtensionSerializer.java
Patch:
@@ -23,8 +23,8 @@
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
 
 public class TestExtensionSerializer {
 

File: nifi-registry/nifi-registry-core/nifi-registry-framework/src/test/java/org/apache/nifi/registry/service/extension/docs/TestHtmlExtensionDocWriter.java
Patch:
@@ -36,7 +36,7 @@
 import java.nio.charset.StandardCharsets;
 import java.util.UUID;
 
-import static org.junit.Assert.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
 
 public class TestHtmlExtensionDocWriter {
 

File: nifi-registry/nifi-registry-core/nifi-registry-web-api/src/test/java/org/apache/nifi/registry/web/api/IntegrationTestUtils.java
Patch:
@@ -25,9 +25,9 @@
 
 import java.util.Set;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 class IntegrationTestUtils {
 

File: nifi-system-tests/nifi-system-test-suite/src/test/java/org/apache/nifi/tests/system/verification/ClusteredVerifiableParameterProviderSystemIT.java
Patch:
@@ -30,7 +30,7 @@
 import java.util.List;
 import java.util.Map;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class ClusteredVerifiableParameterProviderSystemIT extends VerifiableParameterProviderSystemIT {
     @Override

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/util/SFTPTransfer.java
Patch:
@@ -385,7 +385,7 @@ protected void getListing(final String path, final int depth, final int maxResul
      * @return Included file status
      */
     private boolean isIncludedFile(final RemoteResourceInfo remoteResourceInfo, final boolean symlinksEnabled) {
-        return remoteResourceInfo.isRegularFile() || (symlinksEnabled && isSymlink(remoteResourceInfo));
+        return remoteResourceInfo.isRegularFile() || (remoteResourceInfo.getAttributes().getMode().getType() == FileMode.Type.UNKNOWN) || (symlinksEnabled && isSymlink(remoteResourceInfo));
     }
 
     /**

File: nifi-nar-bundles/nifi-compress-bundle/nifi-compress-processors/src/main/java/org/apache/nifi/processors/compress/ModifyCompression.java
Patch:
@@ -277,7 +277,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
             session.transfer(flowFile, REL_SUCCESS);
         } catch (final RuntimeException e) {
             getLogger().error("Input Compression [{}] Size [{}] Output Compression [{}] Failed {}",
-                    inputCompressionStrategy, inputFileSize, outputCompressionStrategy, flowFile);
+                    inputCompressionStrategy, inputFileSize, outputCompressionStrategy, flowFile, e);
             session.transfer(flowFile, REL_FAILURE);
         }
     }

File: nifi-commons/nifi-record/src/main/java/org/apache/nifi/serialization/record/util/DataTypeUtils.java
Patch:
@@ -2150,6 +2150,7 @@ public static int getSQLTypeValue(final DataType dataType) {
             case SHORT:
                 return Types.SMALLINT;
             case STRING:
+            case UUID:
                 return Types.VARCHAR;
             case ENUM:
                 return Types.OTHER;

File: nifi-nar-bundles/nifi-parquet-bundle/nifi-parquet-processors/src/main/java/org/apache/nifi/parquet/stream/NifiParquetInputFile.java
Patch:
@@ -20,7 +20,6 @@
 import org.apache.parquet.io.InputFile;
 import org.apache.parquet.io.SeekableInputStream;
 
-import java.io.IOException;
 import java.io.InputStream;
 
 public class NifiParquetInputFile implements InputFile {
@@ -42,12 +41,12 @@ public NifiParquetInputFile(final InputStream input, final long length) {
     }
 
     @Override
-    public long getLength() throws IOException {
+    public long getLength() {
         return length;
     }
 
     @Override
-    public SeekableInputStream newStream() throws IOException {
+    public SeekableInputStream newStream() {
         return new NifiSeekableInputStream(input);
     }
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ControllerServiceReferencingComponentDTO.java
Patch:
@@ -124,7 +124,7 @@ public void setState(String state) {
      */
     @ApiModelProperty(
             value = "The type of reference this is.",
-            allowableValues = "Processor, ControllerService, ReportingTask"
+            allowableValues = "Processor, ControllerService, ReportingTask, FlowRegistryClient"
     )
     public String getReferenceType() {
         return referenceType;

File: nifi-nar-bundles/nifi-amqp-bundle/nifi-amqp-processors/src/main/java/org/apache/nifi/amqp/processors/AMQPConsumer.java
Patch:
@@ -58,7 +58,7 @@ final class AMQPConsumer extends AMQPWorker {
             public void handleDelivery(final String consumerTag, final Envelope envelope, final BasicProperties properties, final byte[] body) throws IOException {
                 if (closed) {
                     // simply discard the messages, all unacknowledged messages will be redelivered by the broker when the consumer connects again
-                    processorLog.info("Consumer is closed, discarding message (delivery tag: {}).", new Object[]{envelope.getDeliveryTag()});
+                    processorLog.info("Consumer is closed, discarding message (delivery tag: {}).", envelope.getDeliveryTag());
                     return;
                 }
 
@@ -123,7 +123,7 @@ public void close() throws TimeoutException, IOException {
                 GetResponse response;
                 while ((response = responseQueue.poll()) != null) {
                     // simply discard the messages, all unacknowledged messages will be redelivered by the broker when the consumer connects again
-                    processorLog.info("Consumer is closed, discarding message (delivery tag: {}).", new Object[]{response.getEnvelope().getDeliveryTag()});
+                    processorLog.info("Consumer is closed, discarding message (delivery tag: {}).", response.getEnvelope().getDeliveryTag());
                 }
             } catch (Exception e) {
                 processorLog.error("Failed to drain response queue.");

File: nifi-nar-bundles/nifi-amqp-bundle/nifi-amqp-processors/src/main/java/org/apache/nifi/amqp/processors/AbstractAMQPProcessor.java
Patch:
@@ -325,7 +325,7 @@ protected Connection createConnection(ProcessContext context, ExecutorService ex
         cf.setExceptionHandler(new DefaultExceptionHandler() {
             @Override
             public void handleUnexpectedConnectionDriverException(Connection conn, Throwable exception) {
-                getLogger().error("Connection lost to server {}:{}.", new Object[]{conn.getAddress(), conn.getPort()}, exception);
+                getLogger().error("Connection lost to server {}:{}.", conn.getAddress(), conn.getPort(), exception);
             }
         });
 
@@ -342,7 +342,7 @@ public void handleUnexpectedConnectionDriverException(Connection conn, Throwable
 
             return connection;
         } catch (Exception e) {
-            throw new IllegalStateException("Failed to establish connection with AMQP Broker: " + cf.toString(), e);
+            throw new IllegalStateException(String.format("Failed to establish connection with AMQP Broker: %s:%s", cf.getHost(), cf.getPort()), e);
         }
     }
 }

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/queryrecord/FlowFileTable.java
Patch:
@@ -227,6 +227,8 @@ private RelDataType getRelDataType(final DataType fieldType, final JavaTypeFacto
                 return typeFactory.createJavaType(BigInteger.class);
             case DECIMAL:
                 return typeFactory.createJavaType(BigDecimal.class);
+            case ENUM:
+                return typeFactory.createJavaType(Enum.class);
             case CHOICE:
                 final ChoiceDataType choiceDataType = (ChoiceDataType) fieldType;
                 DataType widestDataType = choiceDataType.getPossibleSubTypes().get(0);

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/queryrecord/FlowFileTable.java
Patch:
@@ -227,8 +227,6 @@ private RelDataType getRelDataType(final DataType fieldType, final JavaTypeFacto
                 return typeFactory.createJavaType(BigInteger.class);
             case DECIMAL:
                 return typeFactory.createJavaType(BigDecimal.class);
-            case ENUM:
-                return typeFactory.createJavaType(Enum.class);
             case CHOICE:
                 final ChoiceDataType choiceDataType = (ChoiceDataType) fieldType;
                 DataType widestDataType = choiceDataType.getPossibleSubTypes().get(0);

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/queryrecord/FlowFileTable.java
Patch:
@@ -227,6 +227,8 @@ private RelDataType getRelDataType(final DataType fieldType, final JavaTypeFacto
                 return typeFactory.createJavaType(BigInteger.class);
             case DECIMAL:
                 return typeFactory.createJavaType(BigDecimal.class);
+            case ENUM:
+                return typeFactory.createJavaType(Enum.class);
             case CHOICE:
                 final ChoiceDataType choiceDataType = (ChoiceDataType) fieldType;
                 DataType widestDataType = choiceDataType.getPossibleSubTypes().get(0);

File: nifi-nar-bundles/nifi-standard-services/nifi-distributed-cache-services-bundle/nifi-distributed-cache-client-service/src/main/java/org/apache/nifi/distributed/cache/client/DistributedMapCacheClientService.java
Patch:
@@ -114,6 +114,7 @@ public void onEnabled(final ConfigurationContext context) {
                 context.getProperty(COMMUNICATIONS_TIMEOUT).asTimePeriod(TimeUnit.MILLISECONDS).intValue(),
                 context.getProperty(SSL_CONTEXT_SERVICE).asControllerService(SSLContextService.class),
                 versionNegotiatorFactory,
+                this.getIdentifier(),
                 getLogger());
     }
 

File: nifi-nar-bundles/nifi-standard-services/nifi-distributed-cache-services-bundle/nifi-distributed-cache-client-service/src/main/java/org/apache/nifi/distributed/cache/client/DistributedSetCacheClientService.java
Patch:
@@ -100,7 +100,8 @@ public void onEnabled(final ConfigurationContext context) {
                 context.getProperty(PORT).asInteger(),
                 context.getProperty(COMMUNICATIONS_TIMEOUT).asTimePeriod(TimeUnit.MILLISECONDS).intValue(),
                 context.getProperty(SSL_CONTEXT_SERVICE).asControllerService(SSLContextService.class),
-                versionNegotiatorFactory);
+                versionNegotiatorFactory,
+                this.getIdentifier());
     }
 
     @OnDisabled

File: nifi-nar-bundles/nifi-standard-services/nifi-distributed-cache-services-bundle/nifi-distributed-cache-client-service/src/main/java/org/apache/nifi/distributed/cache/client/NettyDistributedMapCacheClient.java
Patch:
@@ -53,6 +53,7 @@ public class NettyDistributedMapCacheClient extends DistributedCacheClient {
      * @param sslContextService the SSL context (if any) associated with requests to the service; if not specified,
      *                          communications will not be encrypted
      * @param factory           creator of object used to broker the version of the distributed cache protocol with the service
+     * @param identifier        uniquely identifies this client
      * @param log               Component Log from instantiating Services
      */
     public NettyDistributedMapCacheClient(
@@ -61,9 +62,10 @@ public NettyDistributedMapCacheClient(
             final int timeoutMillis,
             final SSLContextService sslContextService,
             final VersionNegotiatorFactory factory,
+            final String identifier,
             final ComponentLog log
     ) {
-        super(hostname, port, timeoutMillis, sslContextService, factory);
+        super(hostname, port, timeoutMillis, sslContextService, factory, identifier);
         this.log = Objects.requireNonNull(log, "Component Log required");
     }
 

File: nifi-system-tests/nifi-system-test-suite/src/test/java/org/apache/nifi/tests/system/pg/BatchFlowBetweenGroupsIT.java
Patch:
@@ -51,7 +51,7 @@ public void testSingleConcurrencyAndBatchOutputToBatchInputOutput() throws NiFiC
         // Start input port for Group B
         // Wait for all 5 FlowFiles to be ingested into Group B
         // Wait for 5 additional FlowFiles to be queued between A and B
-        // Ensure that queue between A and B has 2 FlowFiles
+        // Ensure that queue Generate and Input Port A has 2 FlowFiles
         // Start Output Port of Group B
         // Wait for count from CountEvents to equal 25
 
@@ -66,7 +66,7 @@ public void testSingleConcurrencyAndBatchOutputToBatchInputOutput() throws NiFiC
         getClientUtil().updateProcessorProperties(duplicate, Collections.singletonMap("Output Count", "5"));
 
         final ProcessorEntity sleep = getClientUtil().createProcessor("Sleep", processGroupA.getId());
-        getClientUtil().updateProcessorProperties(sleep, Collections.singletonMap("onTrigger Sleep Time", "10 ms"));
+        getClientUtil().updateProcessorProperties(sleep, Collections.singletonMap("onTrigger Sleep Time", "2 sec"));
 
         getClientUtil().createConnection(inputPortA, duplicate);
         getClientUtil().createConnection(duplicate, sleep, "success");

File: nifi-nar-bundles/nifi-mongodb-bundle/nifi-mongodb-client-service-api/src/main/java/org/apache/nifi/mongodb/MongoDBClientService.java
Patch:
@@ -21,7 +21,6 @@
 import com.mongodb.client.MongoDatabase;
 import org.apache.nifi.components.AllowableValue;
 import org.apache.nifi.components.PropertyDescriptor;
-import org.apache.nifi.controller.ConfigurationContext;
 import org.apache.nifi.controller.ControllerService;
 import org.apache.nifi.controller.VerifiableControllerService;
 import org.apache.nifi.expression.ExpressionLanguageScope;
@@ -123,14 +122,14 @@ public interface MongoDBClientService extends ControllerService, VerifiableContr
             .allowableValues(WRITE_CONCERN_ACKNOWLEDGED_VALUE, WRITE_CONCERN_UNACKNOWLEDGED_VALUE, WRITE_CONCERN_FSYNCED_VALUE,
                              WRITE_CONCERN_JOURNALED_VALUE, WRITE_CONCERN_REPLICA_ACKNOWLEDGED_VALUE, WRITE_CONCERN_MAJORITY_VALUE,
                              WRITE_CONCERN_W1_VALUE, WRITE_CONCERN_W2_VALUE, WRITE_CONCERN_W3_VALUE)
-            .defaultValue(WRITE_CONCERN_ACKNOWLEDGED)
+            .defaultValue(WRITE_CONCERN_ACKNOWLEDGED_VALUE.getValue())
             .build();
 
 
     default Document convertJson(String query) {
         return Document.parse(query);
     }
-    WriteConcern getWriteConcern(final ConfigurationContext context);
     MongoDatabase getDatabase(String name);
     String getURI();
+    WriteConcern getWriteConcern();
 }

File: nifi-nar-bundles/nifi-mongodb-bundle/nifi-mongodb-processors/src/main/java/org/apache/nifi/processors/mongodb/DeleteMongo.java
Patch:
@@ -98,7 +98,6 @@ public class DeleteMongo extends AbstractMongoProcessor {
         _propertyDescriptors.addAll(descriptors);
         _propertyDescriptors.add(DELETE_MODE);
         _propertyDescriptors.add(FAIL_ON_NO_DELETE);
-        _propertyDescriptors.add(WRITE_CONCERN);
         propertyDescriptors = Collections.unmodifiableList(_propertyDescriptors);
 
         final Set<Relationship> _relationships = new HashSet<>();
@@ -127,7 +126,7 @@ public List<PropertyDescriptor> getSupportedPropertyDescriptors() {
     @Override
     public void onTrigger(ProcessContext context, ProcessSession session) throws ProcessException {
         FlowFile flowFile = session.get();
-        final WriteConcern writeConcern = getWriteConcern(context);
+        final WriteConcern writeConcern = clientService.getWriteConcern();
         final String deleteMode = context.getProperty(DELETE_MODE).getValue();
         final String deleteAttr = flowFile.getAttribute("mongodb.delete.mode");
         final Boolean failMode  = context.getProperty(FAIL_ON_NO_DELETE).asBoolean();

File: nifi-nar-bundles/nifi-mongodb-bundle/nifi-mongodb-processors/src/main/java/org/apache/nifi/processors/mongodb/GetMongo.java
Patch:
@@ -104,8 +104,6 @@ public class GetMongo extends AbstractMongoQueryProcessor {
         _propertyDescriptors.add(BATCH_SIZE);
         _propertyDescriptors.add(RESULTS_PER_FLOWFILE);
         _propertyDescriptors.add(DATE_FORMAT);
-        _propertyDescriptors.add(SSL_CONTEXT_SERVICE);
-        _propertyDescriptors.add(CLIENT_AUTH);
         _propertyDescriptors.add(SEND_EMPTY_RESULTS);
         propertyDescriptors = Collections.unmodifiableList(_propertyDescriptors);
 

File: nifi-nar-bundles/nifi-mongodb-bundle/nifi-mongodb-processors/src/main/java/org/apache/nifi/processors/mongodb/RunMongoAggregation.java
Patch:
@@ -115,8 +115,6 @@ static final List<Bson> buildAggregationQuery(String query) throws IOException {
         _propertyDescriptors.add(BATCH_SIZE);
         _propertyDescriptors.add(RESULTS_PER_FLOWFILE);
         _propertyDescriptors.add(DATE_FORMAT);
-        _propertyDescriptors.add(SSL_CONTEXT_SERVICE);
-        _propertyDescriptors.add(CLIENT_AUTH);
         propertyDescriptors = Collections.unmodifiableList(_propertyDescriptors);
 
         final Set<Relationship> _relationships = new HashSet<>();

File: nifi-nar-bundles/nifi-mongodb-bundle/nifi-mongodb-processors/src/test/java/org/apache/nifi/processors/mongodb/PutMongoTest.java
Patch:
@@ -38,7 +38,6 @@ public class PutMongoTest {
     @Test
     public void testQueryKeyValidation() {
         TestRunner runner = TestRunners.newTestRunner(PutMongo.class);
-        runner.setProperty(PutMongo.URI, "mongodb://localhost:27017");
         runner.setProperty(PutMongo.DATABASE_NAME, "demo");
         runner.setProperty(PutMongo.COLLECTION_NAME, "messages");
         runner.setProperty(PutMongo.MODE, PutMongo.MODE_INSERT);

File: nifi-nar-bundles/nifi-iceberg-bundle/nifi-iceberg-processors/src/main/java/org/apache/nifi/processors/iceberg/writer/IcebergPartitionedWriter.java
Patch:
@@ -35,7 +35,7 @@ public class IcebergPartitionedWriter extends PartitionedFanoutWriter<Record> {
     private final PartitionKey partitionKey;
     private final InternalRecordWrapper wrapper;
 
-    IcebergPartitionedWriter(PartitionSpec spec, FileFormat format, FileAppenderFactory<Record> appenderFactory, OutputFileFactory fileFactory,
+    public IcebergPartitionedWriter(PartitionSpec spec, FileFormat format, FileAppenderFactory<Record> appenderFactory, OutputFileFactory fileFactory,
                              FileIO io, long targetFileSize, Schema schema) {
         super(spec, format, appenderFactory, fileFactory, io, targetFileSize);
         this.partitionKey = new PartitionKey(spec, schema);

File: nifi-registry/nifi-registry-core/nifi-registry-web-api/src/test/java/org/apache/nifi/registry/web/api/UnsecuredITBase.java
Patch:
@@ -17,10 +17,10 @@
 package org.apache.nifi.registry.web.api;
 
 import org.apache.nifi.registry.NiFiRegistryTestApiApplication;
-import org.junit.runner.RunWith;
+import org.junit.jupiter.api.extension.ExtendWith;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.context.jdbc.Sql;
-import org.springframework.test.context.junit4.SpringRunner;
+import org.springframework.test.context.junit.jupiter.SpringExtension;
 
 /**
  * Deploy the Web API Application using an embedded Jetty Server for local integration testing, with the follow characteristics:
@@ -29,7 +29,7 @@
  * - The database is embed H2 using volatile (in-memory) persistence
  * - Custom SQL is clearing the DB before each test method by default, unless method overrides this behavior
  */
-@RunWith(SpringRunner.class)
+@ExtendWith(SpringExtension.class)
 @SpringBootTest(
         classes = NiFiRegistryTestApiApplication.class,
         webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,

File: nifi-registry/nifi-registry-core/nifi-registry-web-api/src/test/java/org/apache/nifi/registry/web/api/UnsecuredNoRevisionsITBase.java
Patch:
@@ -17,10 +17,10 @@
 package org.apache.nifi.registry.web.api;
 
 import org.apache.nifi.registry.NiFiRegistryTestApiApplication;
-import org.junit.runner.RunWith;
+import org.junit.jupiter.api.extension.ExtendWith;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.context.jdbc.Sql;
-import org.springframework.test.context.junit4.SpringRunner;
+import org.springframework.test.context.junit.jupiter.SpringExtension;
 
 /**
  * Deploy the Web API Application using an embedded Jetty Server for local integration testing, with the follow characteristics:
@@ -29,7 +29,7 @@
  * - The database is embed H2 using volatile (in-memory) persistence
  * - Custom SQL is clearing the DB before each test method by default, unless method overrides this behavior
  */
-@RunWith(SpringRunner.class)
+@ExtendWith(SpringExtension.class)
 @SpringBootTest(
         classes = NiFiRegistryTestApiApplication.class,
         webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-test-utils/src/main/java/org/apache/nifi/elasticsearch/integration/AbstractElasticsearchITBase.java
Patch:
@@ -51,7 +51,7 @@
 public abstract class AbstractElasticsearchITBase {
     // default Elasticsearch version should (ideally) match that in the nifi-elasticsearch-bundle#pom.xml for the integration-tests profile
     protected static final DockerImageName IMAGE = DockerImageName
-            .parse(System.getProperty("elasticsearch.docker.image", "docker.elastic.co/elasticsearch/elasticsearch:8.6.1"));
+            .parse(System.getProperty("elasticsearch.docker.image", "docker.elastic.co/elasticsearch/elasticsearch:8.7.0"));
     protected static final String ELASTIC_USER_PASSWORD = System.getProperty("elasticsearch.elastic_user.password", RandomStringUtils.randomAlphanumeric(10, 20));
     private static final int PORT = 9200;
     protected static final ElasticsearchContainer ELASTICSEARCH_CONTAINER = new ElasticsearchContainer(IMAGE)

File: nifi-registry/nifi-registry-core/nifi-registry-web-api/src/main/java/org/apache/nifi/registry/web/service/ServiceFacade.java
Patch:
@@ -70,6 +70,8 @@ public interface ServiceFacade {
 
     Bucket deleteBucket(String bucketIdentifier, RevisionInfo revisionInfo);
 
+    Bucket createBucket(Bucket bucket, boolean preserveSourceProperties);
+
     // ---------------------- BucketItem methods ----------------------------------------------
 
     List<BucketItem> getBucketItems(String bucketIdentifier);

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/command/CommandOption.java
Patch:
@@ -27,7 +27,7 @@ public enum CommandOption {
     CONNECTION_TIMEOUT("cto", "connectionTimeout", "Timeout parameter for creating a connection to NiFi/Registry, specified in milliseconds", true),
     READ_TIMEOUT("rto", "readTimeout", "Timeout parameter for reading from NiFi/Registry, specified in milliseconds", true),
     URL("u", "baseUrl", "The URL to execute the command against", true),
-    INPUT_SOURCE("i", "input", "A local file to read as input contents, or a public URL to fetch", true, true),
+    INPUT_SOURCE("i", "input", "A local file to read as input contents, a directory to read files from or a public URL to fetch", true, true),
     OUTPUT_FILE("o", "outputFile", "A file to write output to, must contain full path and filename", true, true),
     OUTPUT_DIR("od", "outputDirectory", "A directory to write output to", true, true),
     PROPERTIES("p", "properties", "A properties file to load arguments from, " +
@@ -164,7 +164,8 @@ public enum CommandOption {
     OUTPUT_TYPE("ot", "outputType", "The type of output to produce (json or simple)", true),
     VERBOSE("verbose", "verbose", "Indicates that verbose output should be provided", false),
     RECURSIVE("r", "recursive", "Indicates the command should perform the action recursively", false),
-    HELP("h", "help", "Help", false)
+    HELP("h", "help", "Help", false),
+    SKIP_EXISTING("se", "skipExisting", "Indicates to skip an operation if target object exists", false),
     ;
 
     private final String shortName;

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/test/java/org/apache/nifi/processors/azure/eventhub/GetAzureEventHubTest.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.nifi.annotation.notification.PrimaryNodeState;
 import org.apache.nifi.processor.ProcessContext;
 import org.apache.nifi.scheduling.ExecutionNode;
+import org.apache.nifi.shared.azure.eventhubs.AzureEventHubTransportType;
 import org.apache.nifi.util.MockFlowFile;
 import org.apache.nifi.util.TestRunner;
 import org.apache.nifi.util.TestRunners;
@@ -78,6 +79,8 @@ public void testProperties() {
         testRunner.assertValid();
         testRunner.setProperty(GetAzureEventHub.RECEIVER_FETCH_TIMEOUT, "10000");
         testRunner.assertValid();
+        testRunner.setProperty(GetAzureEventHub.TRANSPORT_TYPE, AzureEventHubTransportType.AMQP_WEB_SOCKETS.getValue());
+        testRunner.assertValid();
     }
 
     @Test

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/test/java/org/apache/nifi/processors/azure/eventhub/PutAzureEventHubTest.java
Patch:
@@ -19,6 +19,7 @@
 import com.azure.messaging.eventhubs.EventHubProducerClient;
 import com.azure.messaging.eventhubs.models.SendOptions;
 import org.apache.nifi.processor.ProcessContext;
+import org.apache.nifi.shared.azure.eventhubs.AzureEventHubTransportType;
 import org.apache.nifi.util.TestRunner;
 import org.apache.nifi.util.TestRunners;
 import org.junit.jupiter.api.BeforeEach;
@@ -71,6 +72,8 @@ public void testProperties() {
         testRunner.assertNotValid();
         testRunner.setProperty(PutAzureEventHub.POLICY_PRIMARY_KEY, POLICY_KEY);
         testRunner.assertValid();
+        testRunner.setProperty(PutAzureEventHub.TRANSPORT_TYPE, AzureEventHubTransportType.AMQP_WEB_SOCKETS.getValue());
+        testRunner.assertValid();
     }
 
     @Test

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/test/java/org/apache/nifi/processors/azure/eventhub/TestConsumeAzureEventHub.java
Patch:
@@ -40,6 +40,7 @@
 import org.apache.nifi.serialization.record.Record;
 import org.apache.nifi.serialization.record.RecordField;
 import org.apache.nifi.serialization.record.RecordFieldType;
+import org.apache.nifi.shared.azure.eventhubs.AzureEventHubTransportType;
 import org.apache.nifi.util.MockFlowFile;
 import org.apache.nifi.util.TestRunner;
 import org.apache.nifi.util.TestRunners;
@@ -189,6 +190,8 @@ public void testProcessorConfigValidityWithTokenSet() {
         testRunner.setProperty(ConsumeAzureEventHub.STORAGE_ACCOUNT_NAME, STORAGE_ACCOUNT_NAME);
         testRunner.setProperty(ConsumeAzureEventHub.STORAGE_SAS_TOKEN, STORAGE_TOKEN);
         testRunner.assertValid();
+        testRunner.setProperty(ConsumeAzureEventHub.TRANSPORT_TYPE, AzureEventHubTransportType.AMQP_WEB_SOCKETS.getValue());
+        testRunner.assertValid();
     }
 
     @Test

File: nifi-nar-bundles/nifi-pgp-bundle/nifi-pgp-processors/src/main/java/org/apache/nifi/processors/pgp/io/EncodingStreamCallback.java
Patch:
@@ -37,7 +37,7 @@
  * Encoding Stream Callback handles writing PGP messages using configured properties
  */
 public class EncodingStreamCallback implements StreamCallback {
-    private static final int OUTPUT_BUFFER_SIZE = 8192;
+    protected static final int OUTPUT_BUFFER_SIZE = 8192;
 
     private final FileEncoding fileEncoding;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/FlowUpdateResource.java
Patch:
@@ -377,8 +377,9 @@ private void updateFlow(final String groupId, final ComponentLifecycle component
         asyncRequest.markStepComplete();
 
         // Get the Original Flow Snapshot in case we fail to update and need to rollback
+        // This only applies to flows that were under version control, update may be called without version control
         final VersionControlInformationEntity vciEntity = serviceFacade.getVersionControlInformation(groupId);
-        final RegisteredFlowSnapshot originalFlowSnapshot = serviceFacade.getVersionedFlowSnapshot(vciEntity.getVersionControlInformation(), true);
+        final RegisteredFlowSnapshot originalFlowSnapshot = vciEntity == null ? null : serviceFacade.getVersionedFlowSnapshot(vciEntity.getVersionControlInformation(), true);
 
         try {
             if (replicateRequest) {

File: nifi-commons/nifi-flow-encryptor/src/main/java/org/apache/nifi/flow/encryptor/JsonFlowEncryptor.java
Patch:
@@ -82,7 +82,7 @@ private void processJsonByTokens(final JsonParser parser, final JsonGenerator ge
                     generator.writeNumber(parser.getIntValue());
                     break;
                 case VALUE_NUMBER_FLOAT:
-                    generator.writeNumber(parser.getFloatValue());
+                    generator.writeRawValue(parser.getValueAsString());
                     break;
                 case VALUE_TRUE:
                     generator.writeBoolean(true);

File: nifi-commons/nifi-flow-encryptor/src/test/java/org/apache/nifi/flow/encryptor/StandardFlowEncryptorTest.java
Patch:
@@ -143,7 +143,7 @@ private void compareFlow(final String sampleFlow, final String outputFlow) {
 
     private String getSampleFlowJson(final String password) {
         Objects.requireNonNull(password);
-        return String.format("{\"properties\":{\"username\":\"sample_username\",\"password\":\"%s\"}}", password);
+        return String.format("{\"properties\":{\"username\":\"sample_username\",\"password\":\"%s\",\"position\":1.123456789123456789}}", password);
     }
 
     private String getSampleFlowXml(final String password) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiServiceFacade.java
Patch:
@@ -5447,7 +5447,7 @@ public Set<AffectedComponentEntity> getComponentsAffectedByFlowUpdate(final Stri
 
         final Set<String> ancestorServiceIds = group.getAncestorServiceIds();
         final FlowComparator flowComparator = new StandardFlowComparator(localFlow, proposedFlow, ancestorServiceIds, new StaticDifferenceDescriptor(),
-            Function.identity(), VersionedComponent::getIdentifier, FlowComparatorVersionedStrategy.SHALLOW);
+            Function.identity(), VersionedComponent::getIdentifier, FlowComparatorVersionedStrategy.DEEP);
         final FlowComparison comparison = flowComparator.compare();
 
         final FlowManager flowManager = controllerFacade.getFlowManager();

File: nifi-system-tests/nifi-system-test-extensions-bundle/nifi-system-test-extensions/src/main/java/org/apache/nifi/cs/tests/system/StandardCountService.java
Patch:
@@ -54,6 +54,7 @@ protected List<PropertyDescriptor> getSupportedPropertyDescriptors() {
     @OnEnabled
     public void onEnabled(final ConfigurationContext context) {
         final long startValue = Long.parseLong(context.getProperty(START_VALUE).getValue());
+        getLogger().info("Setting counter to {}", startValue);
         counter.set(startValue);
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/NiFiWebApiResourceConfig.java
Patch:
@@ -98,7 +98,6 @@ public NiFiWebApiResourceConfig(@Context ServletContext servletContext) {
         register(ctx.getBean("countersResource"));
         register(ctx.getBean("systemDiagnosticsResource"));
         register(ctx.getBean("accessResource"));
-        register(ctx.getBean("oidcResource"));
         register(ctx.getBean("accessPolicyResource"));
         register(ctx.getBean("tenantsResource"));
         register(ctx.getBean("versionsResource"));

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/configuration/AuthenticationSecurityConfiguration.java
Patch:
@@ -37,7 +37,7 @@
         JwtAuthenticationSecurityConfiguration.class,
         KerberosAuthenticationSecurityConfiguration.class,
         KnoxAuthenticationSecurityConfiguration.class,
-        OidcAuthenticationSecurityConfiguration.class,
+        OidcSecurityConfiguration.class,
         SamlAuthenticationSecurityConfiguration.class,
         X509AuthenticationSecurityConfiguration.class
 })

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/configuration/JwtAuthenticationSecurityConfiguration.java
Patch:
@@ -59,8 +59,8 @@
 import org.springframework.security.oauth2.jwt.NimbusJwtDecoder;
 import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationProvider;
 import org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationEntryPoint;
-import org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter;
 import org.springframework.security.oauth2.server.resource.web.BearerTokenResolver;
+import org.springframework.security.oauth2.server.resource.web.authentication.BearerTokenAuthenticationFilter;
 
 import java.time.Duration;
 import java.util.Arrays;
@@ -228,7 +228,7 @@ public RevocationExpirationCommand revocationExpirationCommand() {
     @Bean
     public ThreadPoolTaskScheduler commandScheduler() {
         final ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler();
-        scheduler.setThreadNamePrefix(getClass().getSimpleName());
+        scheduler.setThreadNamePrefix(JwtAuthenticationSecurityConfiguration.class.getSimpleName());
         return scheduler;
     }
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/saml2/web/authentication/logout/Saml2SingleLogoutFilter.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.nifi.web.security.logout.LogoutRequest;
 import org.apache.nifi.web.security.logout.LogoutRequestManager;
 import org.apache.nifi.web.security.saml2.SamlUrlPath;
+import org.apache.nifi.web.security.token.LogoutAuthenticationToken;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.security.core.Authentication;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/token/LogoutAuthenticationToken.java
Patch:
@@ -14,15 +14,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.web.security.saml2.web.authentication.logout;
+package org.apache.nifi.web.security.token;
 
 import org.springframework.security.authentication.AbstractAuthenticationToken;
 import org.springframework.security.core.authority.AuthorityUtils;
 
 import java.util.Objects;
 
 /**
- * Logout Authentication Token for processing Logout Requests using Spring Security SAML 2 handlers
+ * Logout Authentication Token for processing Logout Requests using Spring Security handlers
  */
 public class LogoutAuthenticationToken extends AbstractAuthenticationToken {
     private final String name;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/test/java/org/apache/nifi/web/security/saml2/web/authentication/logout/Saml2LocalLogoutFilterTest.java
Patch:
@@ -58,15 +58,15 @@ void setFilter() {
 
     @Test
     void testDoFilterInternalNotMatched() throws ServletException, IOException {
-        filter.doFilterInternal(httpServletRequest, httpServletResponse, filterChain);
+        filter.doFilter(httpServletRequest, httpServletResponse, filterChain);
 
         verifyNoInteractions(logoutSuccessHandler);
     }
 
     @Test
     void testDoFilterInternal() throws ServletException, IOException {
         httpServletRequest.setPathInfo(SamlUrlPath.LOCAL_LOGOUT_REQUEST.getPath());
-        filter.doFilterInternal(httpServletRequest, httpServletResponse, filterChain);
+        filter.doFilter(httpServletRequest, httpServletResponse, filterChain);
 
         verify(logoutSuccessHandler).onLogoutSuccess(eq(httpServletRequest), eq(httpServletResponse), isNull());
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/test/java/org/apache/nifi/web/security/saml2/web/authentication/logout/Saml2SingleLogoutFilterTest.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.nifi.web.security.logout.LogoutRequest;
 import org.apache.nifi.web.security.logout.LogoutRequestManager;
 import org.apache.nifi.web.security.saml2.SamlUrlPath;
+import org.apache.nifi.web.security.token.LogoutAuthenticationToken;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;

File: nifi-commons/nifi-utils/src/main/java/org/apache/nifi/stream/io/LimitingInputStream.java
Patch:
@@ -95,7 +95,8 @@ public int read(byte[] b, int off, int len) throws IOException {
 
     @Override
     public long skip(final long n) throws IOException {
-        final long skipped = in.skip(Math.min(n, limit - bytesRead));
+        final long toSkip = Math.min(n, limit - bytesRead);
+        final long skipped = in.skip(toSkip);
         bytesRead += skipped;
         return skipped;
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/util/ReflectionUtils.java
Patch:
@@ -159,7 +159,7 @@ private static boolean invokeMethodsWithAnnotations(boolean quietly, ComponentLo
         return isSuccess;
     }
 
-    private static List<Method> findMethodsWithAnnotations(final Class<?> clazz, final Class<? extends Annotation>[] annotationClasses) {
+    public static List<Method> findMethodsWithAnnotations(final Class<?> clazz, final Class<? extends Annotation>[] annotationClasses) {
         // We use a cache here to store a mapping of Class & Annotation[] to those methods that contain the annotation.
         // This is done because discovering this using Reflection is fairly expensive (can take up to tens of milliseconds on laptop).
         // While this may not seem like much time, consider deleting a Process Group with thousands of Processors or instantiating

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/AbstractComponentNode.java
Patch:
@@ -1393,4 +1393,5 @@ private String getConfigValue(final PropertyConfiguration config, final boolean
     public boolean isReferencingParameter(final String parameterName) {
         return parameterReferenceCounts.containsKey(parameterName);
     }
+
 }

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/client/nifi/impl/JerseyProcessorClient.java
Patch:
@@ -288,5 +288,4 @@ public ProcessorEntity terminateProcessor(final String processorId) throws NiFiC
             return getRequestBuilder(target).delete(ProcessorEntity.class);
         });
     }
-
 }

File: nifi-stateless/nifi-stateless-bootstrap/src/test/java/org/apache/nifi/stateless/bootstrap/TestStatelessBootstrap.java
Patch:
@@ -66,7 +66,7 @@ public void testClassNotAllowed() throws IOException, ClassNotFoundException {
         final String classToLoad = "org.apache.nifi.stateless.bootstrap.RunStatelessFlow";
 
         // A directory for NARs, jars, etc. that are allowed by the AllowListClassLoader
-        final File narDirectory = new File("target");
+        final File narDirectory = new File("target/generated-sources");
 
         // Create a URLClassLoader to use for the System ClassLoader. This will load the classes from the target/ directory.
         // Then create an AllowListClassLoader that will not allow these classes through.

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/client/nifi/ProcessorClient.java
Patch:
@@ -57,6 +57,8 @@ public interface ProcessorClient {
 
     PropertyDescriptorEntity getPropertyDescriptor(String processorId, String propertyName, Boolean sensitive) throws NiFiClientException, IOException;
 
+    ProcessorEntity terminateProcessor(String processorId) throws NiFiClientException, IOException;
+
     /**
      * Indicates that mutable requests should indicate that the client has acknowledged that the node is disconnected.
      */

File: nifi-nar-bundles/nifi-enrich-bundle/nifi-enrich-processors/src/main/java/org/apache/nifi/processors/ISPEnrichIP.java
Patch:
@@ -47,7 +47,7 @@
 @Tags({"ISP", "enrich", "ip", "maxmind"})
 @InputRequirement(Requirement.INPUT_REQUIRED)
 @CapabilityDescription("Looks up ISP information for an IP address and adds the information to FlowFile attributes. The "
-        + "ISP data is provided as a MaxMind ISP database (Note that this is NOT the same as the GeoLite database utilized" +
+        + "ISP data is provided as a MaxMind ISP database. (Note that this is NOT the same as the GeoLite database utilized " +
         "by some geo enrichment tools). The attribute that contains the IP address to lookup is provided by the " +
         "'IP Address Attribute' property. If the name of the attribute provided is 'X', then the the attributes added by" +
         " enrichment will take the form X.isp.<fieldName>")

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/DistributeLoad.java
Patch:
@@ -61,7 +61,7 @@
 @TriggerWhenAnyDestinationAvailable
 @Tags({"distribute", "load balance", "route", "round robin", "weighted"})
 @CapabilityDescription("Distributes FlowFiles to downstream processors based on a Distribution Strategy. If using the Round Robin "
-        + "strategy, the default is to assign each destination a weighting of 1 (evenly distributed). However, optional properties"
+        + "strategy, the default is to assign each destination a weighting of 1 (evenly distributed). However, optional properties "
         + "can be added to the change this; adding a property with the name '5' and value '10' means that the relationship with name "
         + "'5' will be receive 10 FlowFiles in each iteration instead of 1.")
 @DynamicProperty(name = "The relationship name (positive number)", value = "The relationship Weight (positive number)", description = "Adding a "

File: nifi-maven-archetypes/nifi-processor-bundle-archetype/src/main/resources/archetype-resources/nifi-__artifactBaseName__-processors/src/main/java/MyProcessor.java
Patch:
@@ -26,7 +26,6 @@
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.SeeAlso;
 import org.apache.nifi.annotation.documentation.Tags;
-import org.apache.nifi.processor.exception.ProcessException;
 import org.apache.nifi.processor.AbstractProcessor;
 import org.apache.nifi.processor.ProcessContext;
 import org.apache.nifi.processor.ProcessSession;
@@ -93,7 +92,7 @@ public void onScheduled(final ProcessContext context) {
     @Override
     public void onTrigger(final ProcessContext context, final ProcessSession session) {
         FlowFile flowFile = session.get();
-        if ( flowFile == null ) {
+        if (flowFile == null) {
             return;
         }
         // TODO implement

File: nifi-maven-archetypes/nifi-processor-bundle-archetype/src/main/resources/archetype-resources/nifi-__artifactBaseName__-processors/src/test/java/MyProcessorTest.java
Patch:
@@ -21,7 +21,6 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
-
 public class MyProcessorTest {
 
     private TestRunner testRunner;

File: nifi-maven-archetypes/nifi-service-bundle-archetype/src/main/resources/archetype-resources/nifi-__artifactBaseName__-api/src/main/java/MyService.java
Patch:
@@ -19,12 +19,11 @@
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.Tags;
 import org.apache.nifi.controller.ControllerService;
-import org.apache.nifi.processor.exception.ProcessException;
 
 @Tags({"example"})
 @CapabilityDescription("Example Service API.")
 public interface MyService extends ControllerService {
 
-    public void execute();
+    void execute();
 
 }

File: nifi-maven-archetypes/nifi-service-bundle-archetype/src/main/resources/archetype-resources/nifi-__artifactBaseName__/src/main/java/StandardMyService.java
Patch:
@@ -27,7 +27,6 @@
 import org.apache.nifi.components.PropertyDescriptor;
 import org.apache.nifi.controller.AbstractControllerService;
 import org.apache.nifi.controller.ConfigurationContext;
-import org.apache.nifi.processor.exception.ProcessException;
 import org.apache.nifi.processor.util.StandardValidators;
 import org.apache.nifi.reporting.InitializationException;
 

File: nifi-maven-archetypes/nifi-service-bundle-archetype/src/main/resources/archetype-resources/nifi-__artifactBaseName__/src/test/java/TestProcessor.java
Patch:
@@ -42,4 +42,5 @@ protected List<PropertyDescriptor> getSupportedPropertyDescriptors() {
                 .build());
         return propDescs;
     }
+
 }

File: nifi-commons/nifi-properties/src/main/java/org/apache/nifi/util/NiFiProperties.java
Patch:
@@ -252,6 +252,7 @@ public class NiFiProperties extends ApplicationProperties {
     public static final String CLUSTER_PROTOCOL_HEARTBEAT_INTERVAL = "nifi.cluster.protocol.heartbeat.interval";
     public static final String CLUSTER_PROTOCOL_HEARTBEAT_MISSABLE_MAX = "nifi.cluster.protocol.heartbeat.missable.max";
     public static final String CLUSTER_PROTOCOL_IS_SECURE = "nifi.cluster.protocol.is.secure";
+    public static final String CLUSTER_LEADER_ELECTION_IMPLEMENTATION = "nifi.cluster.leader.election.implementation";
 
     // cluster node properties
     public static final String CLUSTER_IS_NODE = "nifi.cluster.is.node";
@@ -405,6 +406,7 @@ public class NiFiProperties extends ApplicationProperties {
     public static final String DEFAULT_CLUSTER_NODE_READ_TIMEOUT = "5 sec";
     public static final String DEFAULT_CLUSTER_NODE_CONNECTION_TIMEOUT = "5 sec";
     public static final int DEFAULT_CLUSTER_NODE_MAX_CONCURRENT_REQUESTS = 100;
+    public static final String DEFAULT_CLUSTER_LEADER_ELECTION_IMPLEMENTATION = "CuratorLeaderElectionManager";
 
     // cluster node defaults
     public static final int DEFAULT_CLUSTER_NODE_PROTOCOL_THREADS = 10;

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/s3/ListS3.java
Patch:
@@ -414,7 +414,7 @@ private Set<String> extractKeys(final StateMap stateMap) {
 
     private void restoreState(final ProcessSession session) throws IOException {
         final StateMap stateMap = session.getState(Scope.CLUSTER);
-        if (stateMap.getVersion() == -1L || stateMap.get(CURRENT_TIMESTAMP) == null || stateMap.get(CURRENT_KEY_PREFIX+"0") == null) {
+        if (!stateMap.getStateVersion().isPresent() || stateMap.get(CURRENT_TIMESTAMP) == null || stateMap.get(CURRENT_KEY_PREFIX+"0") == null) {
             forcefullyUpdateListing(0L, Collections.emptySet());
         } else {
             final long timestamp = Long.parseLong(stateMap.get(CURRENT_TIMESTAMP));

File: nifi-nar-bundles/nifi-extension-utils/nifi-listed-entity/src/main/java/org/apache/nifi/processor/util/list/AbstractListProcessor.java
Patch:
@@ -398,7 +398,7 @@ public final void updateState(final ProcessContext context) throws IOException {
 
         // Check if state already exists for this path. If so, we have already migrated the state.
         final StateMap stateMap = context.getStateManager().getState(getStateScope(context));
-        if (stateMap.getVersion() == -1L) {
+        if (!stateMap.getStateVersion().isPresent()) {
             try {
                 // Migrate state from the old way of managing state (distributed cache service and local file)
                 // to the new mechanism (State Manager).

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-zookeeper/src/main/java/org/apache/nifi/framework/cluster/zookeeper/SecureClientZooKeeperFactory.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.nifi.controller.cluster;
+package org.apache.nifi.framework.cluster.zookeeper;
 
 import org.apache.curator.utils.ZookeeperFactory;
 import org.apache.zookeeper.Watcher;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-zookeeper/src/main/java/org/apache/nifi/framework/cluster/zookeeper/ZooKeeperClientConfig.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.controller.cluster;
+package org.apache.nifi.framework.cluster.zookeeper;
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.nifi.util.FormatUtils;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/node/CuratorNodeProtocolSender.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.nifi.cluster.protocol.ProtocolContext;
 import org.apache.nifi.cluster.protocol.ProtocolException;
 import org.apache.nifi.cluster.protocol.message.ProtocolMessage;
-import org.apache.nifi.controller.cluster.ZooKeeperClientConfig;
+import org.apache.nifi.framework.cluster.zookeeper.ZooKeeperClientConfig;
 import org.apache.nifi.io.socket.SocketConfiguration;
 import org.apache.nifi.util.NiFiProperties;
 import org.apache.zookeeper.KeeperException.NoNodeException;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/groups/StandardDataValve.java
Patch:
@@ -283,7 +283,7 @@ private synchronized void recoverState() {
             return;
         }
 
-        if (stateMap.getVersion() < 0) {
+        if (!stateMap.getStateVersion().isPresent()) {
             logger.debug("No state to recover for {}", this);
             return;
         }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/state/server/ZooKeeperStateServer.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.nifi.controller.state.server;
 
-import org.apache.nifi.controller.cluster.ZooKeeperClientConfig;
+import org.apache.nifi.framework.cluster.zookeeper.ZooKeeperClientConfig;
 import org.apache.nifi.util.NiFiProperties;
 import org.apache.zookeeper.common.X509Util;
 import org.apache.zookeeper.server.DatadirCleanupManager;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/cluster/ZooKeeperClientConfigTest.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.cluster;
 
-import org.apache.nifi.controller.cluster.ZooKeeperClientConfig;
+import org.apache.nifi.framework.cluster.zookeeper.ZooKeeperClientConfig;
 import org.apache.nifi.util.NiFiProperties;
 import org.junit.jupiter.api.Test;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/leader/election/TestCuratorACLProviderFactory.java
Patch:
@@ -22,7 +22,8 @@
 
 import org.apache.curator.framework.api.ACLProvider;
 import org.apache.curator.framework.imps.DefaultACLProvider;
-import org.apache.nifi.controller.cluster.ZooKeeperClientConfig;
+import org.apache.nifi.framework.cluster.leader.zookeeper.CuratorACLProviderFactory;
+import org.apache.nifi.framework.cluster.zookeeper.ZooKeeperClientConfig;
 import org.apache.nifi.util.NiFiProperties;
 import org.apache.zookeeper.data.ACL;
 import org.junit.jupiter.api.BeforeEach;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/service/TestStandardControllerServiceProvider.java
Patch:
@@ -69,6 +69,7 @@
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Optional;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.TimeUnit;
@@ -86,7 +87,7 @@ public class TestStandardControllerServiceProvider {
         @Override
         public StateManager getStateManager(final String componentId) {
             final StateManager stateManager = Mockito.mock(StateManager.class);
-            final StateMap emptyStateMap = new StandardStateMap(Collections.emptyMap(), -1);
+            final StateMap emptyStateMap = new StandardStateMap(Collections.emptyMap(), Optional.empty());
             try {
                 Mockito.when(stateManager.getState(any(Scope.class))).thenReturn(emptyStateMap);
             } catch (IOException e) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/state/server/ITZooKeeperStateServerTLS.java
Patch:
@@ -22,8 +22,8 @@
 import org.apache.curator.retry.RetryOneTime;
 import org.apache.curator.utils.DefaultZookeeperFactory;
 import org.apache.curator.utils.ZookeeperFactory;
-import org.apache.nifi.controller.cluster.SecureClientZooKeeperFactory;
-import org.apache.nifi.controller.cluster.ZooKeeperClientConfig;
+import org.apache.nifi.framework.cluster.zookeeper.SecureClientZooKeeperFactory;
+import org.apache.nifi.framework.cluster.zookeeper.ZooKeeperClientConfig;
 import org.apache.nifi.security.util.TemporaryKeyStoreBuilder;
 import org.apache.nifi.security.util.TlsConfiguration;
 import org.apache.nifi.util.NiFiProperties;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/integration/FrameworkIntegrationTest.java
Patch:
@@ -40,7 +40,7 @@
 import org.apache.nifi.controller.StandardSnippet;
 import org.apache.nifi.controller.XmlFlowSynchronizer;
 import org.apache.nifi.controller.flow.StandardFlowManager;
-import org.apache.nifi.controller.leader.election.CuratorLeaderElectionManager;
+import org.apache.nifi.framework.cluster.leader.zookeeper.CuratorLeaderElectionManager;
 import org.apache.nifi.controller.leader.election.LeaderElectionManager;
 import org.apache.nifi.controller.queue.ConnectionEventListener;
 import org.apache.nifi.controller.queue.FlowFileQueue;
@@ -240,7 +240,8 @@ protected final void initialize(final NiFiProperties nifiProperties) throws IOEx
             clusterCoordinator = Mockito.mock(ClusterCoordinator.class);
             final HeartbeatMonitor heartbeatMonitor = Mockito.mock(HeartbeatMonitor.class);
             final NodeProtocolSender protocolSender = Mockito.mock(NodeProtocolSender.class);
-            final LeaderElectionManager leaderElectionManager = new CuratorLeaderElectionManager(2, nifiProperties);
+
+            final LeaderElectionManager leaderElectionManager = new CuratorLeaderElectionManager(nifiProperties);
 
             final NodeIdentifier localNodeId = new NodeIdentifier(UUID.randomUUID().toString(), "localhost", 8111, "localhost", 8081,
                 "localhost", 8082, "localhost", 8083, 8084, false, Collections.emptySet());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/leader/election/ITSecureClientZooKeeperFactory.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.curator.framework.CuratorFrameworkFactory;
 import org.apache.curator.retry.RetryOneTime;
 import org.apache.curator.test.InstanceSpec;
-import org.apache.nifi.controller.cluster.SecureClientZooKeeperFactory;
-import org.apache.nifi.controller.cluster.ZooKeeperClientConfig;
+import org.apache.nifi.framework.cluster.zookeeper.SecureClientZooKeeperFactory;
+import org.apache.nifi.framework.cluster.zookeeper.ZooKeeperClientConfig;
 import org.apache.nifi.security.util.CertificateUtils;
 import org.apache.nifi.util.NiFiProperties;
 import org.apache.zookeeper.common.ClientX509Util;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-nar-utils/src/main/java/org/apache/nifi/nar/StandardExtensionDiscoveringManager.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.nifi.components.PropertyDescriptor;
 import org.apache.nifi.components.state.StateProvider;
 import org.apache.nifi.controller.ControllerService;
+import org.apache.nifi.controller.leader.election.LeaderElectionManager;
 import org.apache.nifi.controller.repository.ContentRepository;
 import org.apache.nifi.controller.repository.FlowFileRepository;
 import org.apache.nifi.controller.repository.FlowFileSwapManager;
@@ -117,6 +118,7 @@ public StandardExtensionDiscoveringManager(final Collection<Class<? extends Conf
         definitionMap.put(NarProvider.class, new HashSet<>());
         definitionMap.put(ExternalResourceProvider.class, new HashSet<>());
         definitionMap.put(FlowRegistryClient.class, new HashSet<>());
+        definitionMap.put(LeaderElectionManager.class, new HashSet<>());
 
         additionalExtensionTypes.forEach(type -> definitionMap.putIfAbsent(type, new HashSet<>()));
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-zookeeper-leader-election/src/main/java/org/apache/nifi/framework/cluster/leader/zookeeper/CuratorACLProviderFactory.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.nifi.controller.leader.election;
+package org.apache.nifi.framework.cluster.leader.zookeeper;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -24,7 +24,7 @@
 import org.apache.commons.lang3.StringUtils;
 import org.apache.curator.framework.api.ACLProvider;
 import org.apache.curator.framework.imps.DefaultACLProvider;
-import org.apache.nifi.controller.cluster.ZooKeeperClientConfig;
+import org.apache.nifi.framework.cluster.zookeeper.ZooKeeperClientConfig;
 import org.apache.zookeeper.ZooDefs;
 import org.apache.zookeeper.data.ACL;
 import org.apache.zookeeper.data.Id;

File: nifi-nar-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/storage/ListGCSBucket.java
Patch:
@@ -318,7 +318,7 @@ private Set<String> extractKeys(final StateMap stateMap) {
 
     void restoreState(final ProcessSession session) throws IOException {
         final StateMap stateMap = session.getState(Scope.CLUSTER);
-        if (stateMap.getVersion() == -1L || stateMap.get(CURRENT_TIMESTAMP) == null || stateMap.get(CURRENT_KEY_PREFIX+"0") == null) {
+        if (!stateMap.getStateVersion().isPresent() || stateMap.get(CURRENT_TIMESTAMP) == null || stateMap.get(CURRENT_KEY_PREFIX+"0") == null) {
             currentTimestamp = 0L;
             currentKeys.clear();
         } else {

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/main/java/org/apache/nifi/processors/hadoop/ListHDFS.java
Patch:
@@ -420,7 +420,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
         // Ensure that we are using the latest listing information before we try to perform a listing of HDFS files.
         try {
             final StateMap stateMap = session.getState(Scope.CLUSTER);
-            if (stateMap.getVersion() == -1L) {
+            if (!stateMap.getStateVersion().isPresent()) {
                 latestTimestampEmitted = -1L;
                 latestTimestampListed = -1L;
                 getLogger().debug("Found no state stored");

File: nifi-nar-bundles/nifi-hbase-bundle/nifi-hbase-processors/src/main/java/org/apache/nifi/hbase/GetHBase.java
Patch:
@@ -207,7 +207,7 @@ public void onPropertyModified(final PropertyDescriptor descriptor, final String
     @OnScheduled
     public void parseColumns(final ProcessContext context) throws IOException {
         final StateMap stateMap = context.getStateManager().getState(Scope.CLUSTER);
-        if (stateMap.getVersion() < 0) {
+        if (!stateMap.getStateVersion().isPresent()) {
             // no state has been stored in the State Manager - check if we have state stored in the
             // DistributedMapCacheClient service and migrate it if so
             final DistributedMapCacheClient client = context.getProperty(DISTRIBUTED_CACHE_SERVICE).asControllerService(DistributedMapCacheClient.class);
@@ -461,7 +461,7 @@ private void clearState(final DistributedMapCacheClient client) {
 
     private ScanResult getState(final ProcessSession session) throws IOException {
         final StateMap stateMap = session.getState(Scope.CLUSTER);
-        if (stateMap.getVersion() < 0) {
+        if (!stateMap.getStateVersion().isPresent()) {
             return null;
         }
 

File: nifi-nar-bundles/nifi-redis-bundle/nifi-redis-extensions/src/test/java/org/apache/nifi/redis/state/TestRedisStateMapJsonSerDe.java
Patch:
@@ -22,6 +22,7 @@
 import java.io.IOException;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertNull;
 
@@ -49,7 +50,7 @@ public void testSerializeDeserialize() throws IOException {
 
         final RedisStateMap deserialized = serDe.deserialize(serialized);
         assertNotNull(deserialized);
-        assertEquals(stateMap.getVersion(), deserialized.getVersion());
+        assertEquals(stateMap.getStateVersion(), deserialized.getStateVersion());
         assertEquals(stateMap.getEncodingVersion(), deserialized.getEncodingVersion());
         assertEquals(stateMap.toMap(), deserialized.toMap());
     }
@@ -73,7 +74,7 @@ public void testDefaultSerialization() throws IOException {
 
         final RedisStateMap deserialized = serDe.deserialize(serialized);
         assertNotNull(deserialized);
-        assertEquals(RedisStateMap.DEFAULT_VERSION.longValue(), stateMap.getVersion());
+        assertFalse(stateMap.getStateVersion().isPresent());
         assertEquals(RedisStateMap.DEFAULT_ENCODING, stateMap.getEncodingVersion());
         assertNotNull(deserialized.toMap());
         assertEquals(0, deserialized.toMap().size());

File: nifi-nar-bundles/nifi-splunk-bundle/nifi-splunk-processors/src/main/java/org/apache/nifi/processors/splunk/GetSplunk.java
Patch:
@@ -590,7 +590,7 @@ private void saveState(final ProcessSession session, TimeRange timeRange) throws
     private TimeRange loadState(final ProcessSession session) throws IOException {
         final StateMap stateMap = session.getState(Scope.CLUSTER);
 
-        if (stateMap.getVersion() < 0) {
+        if (!stateMap.getStateVersion().isPresent()) {
             getLogger().debug("No previous state found");
             return null;
         }

File: nifi-nar-bundles/nifi-splunk-bundle/nifi-splunk-processors/src/test/java/org/apache/nifi/processors/splunk/TestGetSplunk.java
Patch:
@@ -329,7 +329,7 @@ public void testGetWithManagedFromCurrentUsingEventTime() throws IOException, Pa
 
         final StateMap state = runner.getStateManager().getState(Scope.CLUSTER);
         assertNotNull(state);
-        assertTrue(state.getVersion() > 0);
+        assertTrue(state.getStateVersion().isPresent());
 
         // save the latest time from the first run which should be earliest time of next run
         final String lastLatest = state.get(GetSplunk.LATEST_TIME_KEY);
@@ -377,7 +377,7 @@ public void testGetWithManagedFromCurrentUsingIndexTime() throws IOException, Pa
 
         final StateMap state = runner.getStateManager().getState(Scope.CLUSTER);
         assertNotNull(state);
-        assertTrue(state.getVersion() > 0);
+        assertTrue(state.getStateVersion().isPresent());
 
         // save the latest time from the first run which should be earliest time of next run
         final String lastLatest = state.get(GetSplunk.LATEST_TIME_KEY);

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/MonitorActivity.java
Patch:
@@ -346,7 +346,7 @@ public void process(final OutputStream out) throws IOException {
                     }
                     newValues.put(STATE_KEY_LATEST_SUCCESS_TRANSFER, String.valueOf(now));
 
-                    if (state == null || state.getVersion() == -1) {
+                    if (state == null || !state.getStateVersion().isPresent()) {
                         session.setState(newValues, Scope.CLUSTER);
                     } else {
                         final String existingTimestamp = state.get(STATE_KEY_LATEST_SUCCESS_TRANSFER);

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/TailFile.java
Patch:
@@ -414,7 +414,7 @@ public void recoverState(final ProcessContext context) throws IOException {
 
         final String startPosition = context.getProperty(START_POSITION).getValue();
 
-        if (stateMap.getVersion() == -1L || stateMap.toMap().isEmpty()) {
+        if (!stateMap.getStateVersion().isPresent() || stateMap.toMap().isEmpty()) {
             //state has been cleared or never stored so recover as 'empty state'
             initStates(filesToTail, Collections.emptyMap(), true, startPosition);
             recoverState(context, filesToTail, Collections.emptyMap());

File: nifi-nar-bundles/nifi-salesforce-bundle/nifi-salesforce-processors/src/main/java/org/apache/nifi/processors/salesforce/QuerySalesforceObject.java
Patch:
@@ -166,7 +166,7 @@ public class QuerySalesforceObject extends AbstractProcessor {
             .displayName("Record Writer")
             .description("Service used for writing records returned from the Salesforce REST API")
             .identifiesControllerService(RecordSetWriterFactory.class)
-            .required(false)
+            .required(true)
             .dependsOn(QUERY_TYPE, PROPERTY_BASED_QUERY)
             .build();
 
@@ -240,6 +240,7 @@ public class QuerySalesforceObject extends AbstractProcessor {
     static final Relationship REL_FAILURE = new Relationship.Builder()
             .name("failure")
             .description("The input flowfile gets sent to this relationship when the query fails.")
+            .autoTerminateDefault(true)
             .build();
 
     private static final String LAST_AGE_FILTER = "last_age_filter";

File: nifi-nar-bundles/nifi-salesforce-bundle/nifi-salesforce-processors/src/test/java/org/apache/nifi/processors/salesforce/util/TestRecordExtender.java
Patch:
@@ -94,15 +94,15 @@ void testGetExtendedRecord() {
         int referenceId = 0;
         String objectType = "Account";
 
-        MapRecord testRecord = new MapRecord(ORIGINAL_SCHEMA, new HashMap<String, Object>() {{
+        MapRecord testRecord = new MapRecord(ORIGINAL_SCHEMA, new HashMap<>() {{
             put("testRecordField1", "testRecordValue1");
             put("testRecordField2", "testRecordValue2");
         }});
 
 
-        MapRecord expectedRecord = new MapRecord(EXPECTED_EXTENDED_SCHEMA, new HashMap<String, Object>() {{
+        MapRecord expectedRecord = new MapRecord(EXPECTED_EXTENDED_SCHEMA, new HashMap<>() {{
             put("attributes",
-                    new MapRecord(ATTRIBUTES_RECORD_SCHEMA, new HashMap<String, Object>() {{
+                    new MapRecord(ATTRIBUTES_RECORD_SCHEMA, new HashMap<>() {{
                         put("type", objectType);
                         put("referenceId", referenceId);
                     }})

File: nifi-commons/nifi-xml-processing/src/main/java/org/apache/nifi/xml/processing/validation/StandardSchemaValidator.java
Patch:
@@ -53,7 +53,7 @@ public void validate(final Schema schema, final Source source) {
         try {
             validator.validate(source);
         } catch (final SAXException|IOException e) {
-            throw new ProcessingException("Validation failed", e);
+            throw new ProcessingException(String.format("Validation failed: %s", e.getMessage()), e);
         }
     }
 }

File: nifi-mock/src/main/java/org/apache/nifi/util/StandardProcessorTestRunner.java
Patch:
@@ -204,8 +204,7 @@ public void run(final int iterations, final boolean stopOnFinish, final boolean
                 try {
                     ReflectionUtils.invokeMethodsWithAnnotation(OnScheduled.class, processor, context);
                 } catch (final Exception e) {
-                    e.printStackTrace();
-                    Assertions.fail("Could not invoke methods annotated with @OnScheduled annotation due to: " + e);
+                    Assertions.fail("Could not invoke methods annotated with @OnScheduled annotation due to: " + e, e);
                 }
             }
 

File: nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/processors/ConsumeJMS.java
Patch:
@@ -298,9 +298,10 @@ public void accept(final JMSResponse response) {
                 }
             });
         } catch(Exception e) {
+            getLogger().error("Error while trying to process JMS message", e);
             consumer.setValid(false);
             context.yield();
-            throw e; // for backward compatibility with exception handling in flows
+            throw e;
         }
     }
 

File: nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/processors/PublishJMS.java
Patch:
@@ -222,7 +222,7 @@ protected void rendezvousWithJms(ProcessContext context, ProcessSession processS
                 processSession.getProvenanceReporter().send(flowFile, destinationName);
             } catch (Exception e) {
                 processSession.transfer(flowFile, REL_FAILURE);
-                this.getLogger().error("Failed while sending message to JMS via " + publisher, e);
+                getLogger().error("Failed while sending message to JMS via " + publisher, e);
                 context.yield();
                 publisher.setValid(false);
             }

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/main/java/org/apache/nifi/processors/azure/storage/FetchAzureBlobStorage_v12.java
Patch:
@@ -80,12 +80,12 @@ public class FetchAzureBlobStorage_v12 extends AbstractAzureBlobProcessor_v12 {
 
     public static final PropertyDescriptor CONTAINER = new PropertyDescriptor.Builder()
             .fromPropertyDescriptor(AzureStorageUtils.CONTAINER)
-            .defaultValue("${azure.container}")
+            .defaultValue(String.format("${%s}", ATTR_NAME_CONTAINER))
             .build();
 
     public static final PropertyDescriptor BLOB_NAME = new PropertyDescriptor.Builder()
             .fromPropertyDescriptor(AbstractAzureBlobProcessor_v12.BLOB_NAME)
-            .defaultValue("${azure.blobname}")
+            .defaultValue(String.format("${%s}", ATTR_NAME_BLOBNAME))
             .build();
 
     public static final PropertyDescriptor RANGE_START = new PropertyDescriptor.Builder()

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/test/java/org/apache/nifi/processors/azure/storage/ITListAzureBlobStorage_v12.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.nifi.flowfile.attributes.CoreAttributes;
 import org.apache.nifi.processor.Processor;
 import org.apache.nifi.processors.azure.storage.utils.AzureStorageUtils;
+import org.apache.nifi.processors.azure.storage.utils.BlobAttributes;
 import org.apache.nifi.serialization.record.MockRecordWriter;
 import org.apache.nifi.util.MockFlowFile;
 import org.junit.jupiter.api.Test;
@@ -198,7 +199,7 @@ private void assertSuccess(String... blobNames) throws Exception {
         Set<String> expectedBlobNames = new HashSet<>(Arrays.asList(blobNames));
 
         for (MockFlowFile flowFile : flowFiles) {
-            String blobName = flowFile.getAttribute("azure.blobname");
+            String blobName = flowFile.getAttribute(BlobAttributes.ATTR_NAME_BLOBNAME);
             assertTrue(expectedBlobNames.remove(blobName), "Blob should not be listed: " + blobName);
 
             assertFlowFile(flowFile, blobName);

File: nifi-nar-bundles/nifi-mqtt-bundle/nifi-mqtt-processors/src/main/java/org/apache/nifi/processors/mqtt/ConsumeMQTT.java
Patch:
@@ -24,7 +24,6 @@
 import org.apache.nifi.annotation.behavior.TriggerSerially;
 import org.apache.nifi.annotation.behavior.WritesAttribute;
 import org.apache.nifi.annotation.behavior.WritesAttributes;
-import org.apache.nifi.annotation.configuration.DefaultSchedule;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.SeeAlso;
 import org.apache.nifi.annotation.documentation.Tags;
@@ -47,7 +46,6 @@
 import org.apache.nifi.processors.mqtt.common.MqttCallback;
 import org.apache.nifi.processors.mqtt.common.MqttException;
 import org.apache.nifi.processors.mqtt.common.ReceivedMqttMessage;
-import org.apache.nifi.scheduling.SchedulingStrategy;
 import org.apache.nifi.serialization.MalformedRecordException;
 import org.apache.nifi.serialization.RecordReader;
 import org.apache.nifi.serialization.RecordReaderFactory;
@@ -106,7 +104,6 @@
             "on the topic.")})
 @SystemResourceConsideration(resource = SystemResource.MEMORY, description = "The 'Max Queue Size' specifies the maximum number of messages that can be hold in memory by NiFi by a single "
         + "instance of this processor. A high value for this property could represent a lot of data being stored in memory.")
-@DefaultSchedule(strategy = SchedulingStrategy.TIMER_DRIVEN, period = "1 min")
 public class ConsumeMQTT extends AbstractMQTTProcessor implements MqttCallback {
 
     public final static String RECORD_COUNT_KEY = "record.count";

File: nifi-nar-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/vision/StartGcpVisionAnnotateFilesOperation.java
Patch:
@@ -56,12 +56,12 @@ public class StartGcpVisionAnnotateFilesOperation extends AbstractStartGcpVision
                     "                \"mimeType\": \"application/pdf\"\n" +
                     "            },\n" +
                     "            \"features\": [{\n" +
-                    "                    \"type\": \"DOCUMENT_TEXT_DETECTION\",\n" +
+                    "                    \"type\": \"${vision-feature-type}\",\n" +
                     "                    \"maxResults\": 4\n" +
                     "                }],\n" +
                     "            \"outputConfig\": {\n" +
                     "                \"gcsDestination\": {\n" +
-                    "                    \"uri\": \"gs://${gcs.bucket}/${filename}/\"\n" +
+                    "                    \"uri\": \"gs://${output-bucket}/${filename}/\"\n" +
                     "                },\n" +
                     "                \"batchSize\": 2\n" +
                     "            }\n" +
@@ -70,7 +70,7 @@ public class StartGcpVisionAnnotateFilesOperation extends AbstractStartGcpVision
             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)
             .build();
     private static final List<PropertyDescriptor> PROPERTIES = Collections.unmodifiableList(Arrays.asList(
-            JSON_PAYLOAD, GCP_CREDENTIALS_PROVIDER_SERVICE));
+            JSON_PAYLOAD, GCP_CREDENTIALS_PROVIDER_SERVICE, OUTPUT_BUCKET, FEATURE_TYPE));
 
     @Override
     public List<PropertyDescriptor> getSupportedPropertyDescriptors() {

File: nifi-nar-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/vision/StartGcpVisionAnnotateImagesOperation.java
Patch:
@@ -55,21 +55,21 @@ public class StartGcpVisionAnnotateImagesOperation extends AbstractStartGcpVisio
                     "            }\n" +
                     "        },\n" +
                     "        \"features\": [{\n" +
-                    "            \"type\": \"FACE_DETECTION\",\n" +
+                    "            \"type\": \"${vision-feature-type}\",\n" +
                     "            \"maxResults\": 4\n" +
                     "        }]\n" +
                     "    }],\n" +
                     "    \"outputConfig\": {\n" +
                     "        \"gcsDestination\": {\n" +
-                    "            \"uri\": \"gs://${gcs.bucket}/${filename}/\"\n" +
+                    "            \"uri\": \"gs://${output-bucket}/${filename}/\"\n" +
                     "        },\n" +
                     "        \"batchSize\": 2\n" +
                     "    }\n" +
                     "}")
             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)
             .build();
     private static final List<PropertyDescriptor> PROPERTIES = Collections.unmodifiableList(Arrays.asList(
-            JSON_PAYLOAD, GCP_CREDENTIALS_PROVIDER_SERVICE));
+            JSON_PAYLOAD, GCP_CREDENTIALS_PROVIDER_SERVICE, OUTPUT_BUCKET, FEATURE_TYPE));
 
     @Override
     public List<PropertyDescriptor> getSupportedPropertyDescriptors() {

File: nifi-nar-bundles/nifi-hive-bundle/nifi-hive-test-utils/src/main/java/org/apache/nifi/hive/metastore/ScriptRunner.java
Patch:
@@ -15,7 +15,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.processors.iceberg.metastore;
+package org.apache.nifi.hive.metastore;
 
 import java.io.IOException;
 import java.io.LineNumberReader;

File: nifi-nar-bundles/nifi-iceberg-bundle/nifi-iceberg-processors/src/test/java/org/apache/nifi/processors/iceberg/TestPutIcebergWithHiveCatalog.java
Patch:
@@ -28,8 +28,8 @@
 import org.apache.iceberg.data.Record;
 import org.apache.iceberg.types.Types;
 import org.apache.nifi.avro.AvroTypeUtil;
+import org.apache.nifi.hive.metastore.ThriftMetastore;
 import org.apache.nifi.processors.iceberg.catalog.TestHiveCatalogService;
-import org.apache.nifi.processors.iceberg.metastore.ThriftMetastore;
 import org.apache.nifi.processors.iceberg.util.IcebergTestUtils;
 import org.apache.nifi.reporting.InitializationException;
 import org.apache.nifi.serialization.record.MockRecordParser;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/flow/synchronization/StandardVersionedComponentSynchronizer.java
Patch:
@@ -1340,7 +1340,7 @@ private Map<String, String> populatePropertiesMap(final ComponentNode componentN
                     || (versionedDescriptor != null && versionedDescriptor.isSensitive());
 
                 String value;
-                if (descriptor != null && referencesService) {
+                if (descriptor != null && referencesService && (proposedProperties.get(propertyName) != null)) {
                     // Need to determine if the component's property descriptor for this service is already set to an id
                     // of an existing service that is outside the current processor group, and if it is we want to leave
                     // the property set to that value

File: nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/util/KeyStoreUtils.java
Patch:
@@ -83,7 +83,7 @@ public class KeyStoreUtils {
         Security.addProvider(new BouncyCastleProvider());
 
         KEY_STORE_TYPE_PROVIDERS.put(KeystoreType.BCFKS.getType(), BouncyCastleProvider.PROVIDER_NAME);
-        KEY_STORE_TYPE_PROVIDERS.put(KeystoreType.PKCS12.getType(), BouncyCastleProvider.PROVIDER_NAME);
+        KEY_STORE_TYPE_PROVIDERS.put(KeystoreType.PKCS12.getType(), SUN_JSSE_PROVIDER_NAME);
         KEY_STORE_TYPE_PROVIDERS.put(KeystoreType.JKS.getType(), SUN_PROVIDER_NAME);
 
         SECRET_KEY_STORE_PROVIDERS.put(KeystoreType.BCFKS, BouncyCastleProvider.PROVIDER_NAME);

File: nifi-toolkit/nifi-toolkit-tls/src/test/java/org/apache/nifi/toolkit/tls/standalone/TlsToolkitStandaloneTest.java
Patch:
@@ -200,8 +200,9 @@ public void testDnArgs() throws Exception {
 
     @Test
     public void testKeyStoreTypeArg() throws Exception {
+        final String certificateAuthorityHostname = "certificate-authority";
         runAndAssertExitCode(ExitCode.SUCCESS, "-o", tempDir.getAbsolutePath(), "-n", TlsConfig.DEFAULT_HOSTNAME, "-T", KeystoreType.PKCS12.toString().toLowerCase(),
-                "-K", "change", "-S", "change", "-P", "change");
+                "-K", "change", "-S", "change", "-P", "change", "-c", certificateAuthorityHostname);
         X509Certificate x509Certificate = checkLoadCertPrivateKey(TlsConfig.DEFAULT_KEY_PAIR_ALGORITHM);
         checkHostDirAndReturnNifiProperties(TlsConfig.DEFAULT_HOSTNAME, x509Certificate);
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/flow/synchronization/StandardVersionedComponentSynchronizer.java
Patch:
@@ -252,7 +252,9 @@ public void synchronize(final ProcessGroup group, final VersionedExternalFlow ve
 
         context.getFlowManager().withParameterContextResolution(() -> {
             try {
-                synchronize(group, versionedExternalFlow.getFlowContents(), versionedExternalFlow.getParameterContexts(), versionedExternalFlow.getParameterProviders());
+                final Map<String, ParameterProviderReference> parameterProviderReferences = versionedExternalFlow.getParameterProviders() == null
+                        ? new HashMap<>() : versionedExternalFlow.getParameterProviders();
+                synchronize(group, versionedExternalFlow.getFlowContents(), versionedExternalFlow.getParameterContexts(), parameterProviderReferences);
             } catch (final ProcessorInstantiationException pie) {
                 throw new RuntimeException(pie);
             }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiServiceFacade.java
Patch:
@@ -5411,6 +5411,7 @@ private static VersionedExternalFlow createVersionedExternalFlow(final Registere
         externalFlow.setExternalControllerServices(flowSnapshot.getExternalControllerServices());
         externalFlow.setParameterContexts(flowSnapshot.getParameterContexts());
         externalFlow.setMetadata(externalFlowMetadata);
+        externalFlow.setParameterProviders(flowSnapshot.getParameterProviders());
 
         return externalFlow;
     }

File: nifi-nar-bundles/nifi-dropbox-bundle/nifi-dropbox-processors/src/main/java/org/apache/nifi/processors/dropbox/DropboxAttributes.java
Patch:
@@ -30,11 +30,11 @@ public class DropboxAttributes {
     public static final String SIZE_DESC = "The size of the file";
 
     public static final String TIMESTAMP = "dropbox.timestamp";
-    public static final String TIMESTAMP_DESC = "The server modified time, when the file was uploaded to Dropbox";
+    public static final String TIMESTAMP_DESC = "The server modified time of the file";
 
     public static final String REVISION = "dropbox.revision";
     public static final String REVISION_DESC = "Revision of the file";
 
     public static final String ERROR_MESSAGE = "error.message";
-    public static final String ERROR_MESSAGE_DESC = "The error message returned by Dropbox when the fetch of a file fails";
+    public static final String ERROR_MESSAGE_DESC = "The error message returned by Dropbox";
 }

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/script/ScriptingComponentHelper.java
Patch:
@@ -236,7 +236,7 @@ public void setupScriptRunners(final boolean newQ, final int numberOfScriptEngin
             }
 
             // Get a list of URLs from the configurator (if present), or just convert modules from Strings to URLs
-            final String[] locations = modules.asLocations().toArray(new String[0]);
+            final String[] locations = (modules == null) ? new String[0] : modules.asLocations().toArray(new String[0]);
             final URL[] additionalClasspathURLs = ScriptRunnerFactory.getInstance().getModuleURLsForClasspath(scriptEngineName, locations, log);
 
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/GenerateRecord.java
Patch:
@@ -296,7 +296,7 @@ protected Map<String, String> getFields(ProcessContext context) {
     }
 
     private Object generateValueFromRecordField(RecordField recordField, Faker faker, int nullPercentage) {
-        if (recordField.isNullable() && faker.number().numberBetween(0, 100) <= nullPercentage) {
+        if (recordField.isNullable() && faker.number().numberBetween(0, 100) < nullPercentage) {
             return null;
         }
         switch (recordField.getDataType().getFieldType()) {

File: nifi-registry/nifi-registry-core/nifi-registry-jetty/src/main/java/org/apache/nifi/registry/jetty/connector/ApplicationServerConnectorFactory.java
Patch:
@@ -162,7 +162,7 @@ private KeyStore buildKeyStore(final NiFiRegistryProperties properties) {
 
     private KeyStore buildTrustStore(final NiFiRegistryProperties properties) {
         final String trustStore = getRequiredProperty(properties, NiFiRegistryProperties.SECURITY_TRUSTSTORE);
-        final String trustStoreType = getRequiredProperty(properties, NiFiRegistryProperties.SECURITY_KEYSTORE_TYPE);
+        final String trustStoreType = getRequiredProperty(properties, NiFiRegistryProperties.SECURITY_TRUSTSTORE_TYPE);
         final String trustStorePassword = getRequiredProperty(properties, NiFiRegistryProperties.SECURITY_TRUSTSTORE_PASSWD);
         return buildStore(trustStore, trustStoreType, trustStorePassword);
     }

File: nifi-registry/nifi-registry-core/nifi-registry-jetty/src/test/java/org/apache/nifi/registry/jetty/connector/ApplicationServerConnectorFactoryTest.java
Patch:
@@ -46,13 +46,15 @@ class ApplicationServerConnectorFactoryTest {
 
     private static final String LOCALHOST = "127.0.0.1";
 
+    private static final String PROPRIETARY_TRUST_STORE_TYPE = "JKS";
+
     static TlsConfiguration tlsConfiguration;
 
     Server server;
 
     @BeforeAll
     static void setTlsConfiguration() {
-        tlsConfiguration = new TemporaryKeyStoreBuilder().build();
+        tlsConfiguration = new TemporaryKeyStoreBuilder().trustStoreType(PROPRIETARY_TRUST_STORE_TYPE).build();
     }
 
     @BeforeEach

File: nifi-nar-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/pubsub/lite/ConsumeGCPubSubLite.java
Patch:
@@ -118,7 +118,7 @@ public class ConsumeGCPubSubLite extends AbstractGCPubSubProcessor implements Ve
             .build();
 
     private Subscriber subscriber = null;
-    private static final BlockingQueue<Message> messages = new LinkedBlockingQueue<>();
+    private BlockingQueue<Message> messages = new LinkedBlockingQueue<>();
 
     @Override
     protected Collection<ValidationResult> customValidate(final ValidationContext validationContext) {

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/test/java/org/apache/nifi/processors/aws/s3/TestDeleteS3Object.java
Patch:
@@ -137,7 +137,7 @@ public void testDeleteVersionFromExpressions() {
     public void testGetPropertyDescriptors() {
         DeleteS3Object processor = new DeleteS3Object();
         List<PropertyDescriptor> pd = processor.getSupportedPropertyDescriptors();
-        assertEquals(23, pd.size(), "size should be eq");
+        assertEquals(25, pd.size(), "size should be eq");
         assertTrue(pd.contains(processor.ACCESS_KEY));
         assertTrue(pd.contains(processor.AWS_CREDENTIALS_PROVIDER_SERVICE));
         assertTrue(pd.contains(processor.BUCKET));
@@ -151,6 +151,8 @@ public void testGetPropertyDescriptors() {
         assertTrue(pd.contains(processor.REGION));
         assertTrue(pd.contains(processor.SECRET_KEY));
         assertTrue(pd.contains(processor.SIGNER_OVERRIDE));
+        assertTrue(pd.contains(processor.S3_CUSTOM_SIGNER_CLASS_NAME));
+        assertTrue(pd.contains(processor.S3_CUSTOM_SIGNER_MODULE_LOCATION));
         assertTrue(pd.contains(processor.SSL_CONTEXT_SERVICE));
         assertTrue(pd.contains(processor.TIMEOUT));
         assertTrue(pd.contains(processor.VERSION_ID));

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/test/java/org/apache/nifi/processors/aws/s3/TestFetchS3Object.java
Patch:
@@ -362,7 +362,7 @@ public void testFlowFileAccessExceptionGoesToFailure() {
     public void testGetPropertyDescriptors() {
         FetchS3Object processor = new FetchS3Object();
         List<PropertyDescriptor> pd = processor.getSupportedPropertyDescriptors();
-        assertEquals("size should be eq", 21, pd.size());
+        assertEquals("size should be eq", 23, pd.size());
         assertTrue(pd.contains(FetchS3Object.ACCESS_KEY));
         assertTrue(pd.contains(FetchS3Object.AWS_CREDENTIALS_PROVIDER_SERVICE));
         assertTrue(pd.contains(FetchS3Object.BUCKET));
@@ -372,6 +372,8 @@ public void testGetPropertyDescriptors() {
         assertTrue(pd.contains(FetchS3Object.REGION));
         assertTrue(pd.contains(FetchS3Object.SECRET_KEY));
         assertTrue(pd.contains(FetchS3Object.SIGNER_OVERRIDE));
+        assertTrue(pd.contains(FetchS3Object.S3_CUSTOM_SIGNER_CLASS_NAME));
+        assertTrue(pd.contains(FetchS3Object.S3_CUSTOM_SIGNER_MODULE_LOCATION));
         assertTrue(pd.contains(FetchS3Object.SSL_CONTEXT_SERVICE));
         assertTrue(pd.contains(FetchS3Object.TIMEOUT));
         assertTrue(pd.contains(FetchS3Object.VERSION_ID));

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/test/java/org/apache/nifi/processors/aws/s3/TestTagS3Object.java
Patch:
@@ -244,7 +244,7 @@ public void testTagObjectS3Exception() {
     public void testGetPropertyDescriptors() throws Exception {
         TagS3Object processor = new TagS3Object();
         List<PropertyDescriptor> pd = processor.getSupportedPropertyDescriptors();
-        assertEquals(20, pd.size(), "size should be eq");
+        assertEquals(22, pd.size(), "size should be eq");
         assertTrue(pd.contains(TagS3Object.ACCESS_KEY));
         assertTrue(pd.contains(TagS3Object.AWS_CREDENTIALS_PROVIDER_SERVICE));
         assertTrue(pd.contains(TagS3Object.BUCKET));
@@ -254,6 +254,8 @@ public void testGetPropertyDescriptors() throws Exception {
         assertTrue(pd.contains(TagS3Object.REGION));
         assertTrue(pd.contains(TagS3Object.SECRET_KEY));
         assertTrue(pd.contains(TagS3Object.SIGNER_OVERRIDE));
+        assertTrue(pd.contains(TagS3Object.S3_CUSTOM_SIGNER_CLASS_NAME));
+        assertTrue(pd.contains(TagS3Object.S3_CUSTOM_SIGNER_MODULE_LOCATION));
         assertTrue(pd.contains(TagS3Object.SSL_CONTEXT_SERVICE));
         assertTrue(pd.contains(TagS3Object.TIMEOUT));
         assertTrue(pd.contains(ProxyConfigurationService.PROXY_CONFIGURATION_SERVICE));

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestGenerateTableFetch.java
Patch:
@@ -1467,9 +1467,7 @@ public void testMultipleColumnTypeMissing() throws ClassNotFoundException, SQLEx
 
 
         // Remove one element from columnTypeMap to simulate it's re-cache partial state
-        Map.Entry<String, Integer> entry = processor.columnTypeMap.entrySet().iterator().next();
-        String key = entry.getKey();
-        processor.columnTypeMap.remove(key);
+        processor.columnTypeMap.remove("TEST_QUERY_DB_TABLE");
 
         // Insert new records
         stmt.execute("insert into TEST_QUERY_DB_TABLE (id, bucket) VALUES (2, 0)");

File: nifi-manifest/nifi-runtime-manifest-core/src/main/java/org/apache/nifi/runtime/manifest/ExtensionManifestProvider.java
Patch:
@@ -16,15 +16,13 @@
  */
 package org.apache.nifi.runtime.manifest;
 
-import org.apache.nifi.extension.manifest.ExtensionManifest;
-
 import java.util.List;
 
 /**
  * Provides a list of extension manifests.
  */
 public interface ExtensionManifestProvider {
 
-    List<ExtensionManifest> getExtensionManifests();
+    List<ExtensionManifestContainer> getExtensionManifests();
 
 }

File: nifi-manifest/nifi-runtime-manifest-core/src/main/java/org/apache/nifi/runtime/manifest/RuntimeManifestBuilder.java
Patch:
@@ -20,7 +20,6 @@
 import org.apache.nifi.c2.protocol.component.api.Bundle;
 import org.apache.nifi.c2.protocol.component.api.RuntimeManifest;
 import org.apache.nifi.c2.protocol.component.api.SchedulingDefaults;
-import org.apache.nifi.extension.manifest.ExtensionManifest;
 
 /**
  * Builder for creating a RuntimeManifest.
@@ -57,15 +56,15 @@ public interface RuntimeManifestBuilder {
      * @param extensionManifest the extension manifest to add
      * @return the builder
      */
-    RuntimeManifestBuilder addBundle(ExtensionManifest extensionManifest);
+    RuntimeManifestBuilder addBundle(ExtensionManifestContainer extensionManifest);
 
     /**
      * Adds a Bundle for each of the given ExtensionManifests.
      *
      * @param extensionManifests the extension manifests to add
      * @return the builder
      */
-    RuntimeManifestBuilder addBundles(Iterable<ExtensionManifest> extensionManifests);
+    RuntimeManifestBuilder addBundles(Iterable<ExtensionManifestContainer> extensionManifests);
 
     /**
      * Adds the given Bundle.

File: nifi-manifest/nifi-runtime-manifest-test/src/test/java/org/apache/nifi/runtime/manifest/TestRuntimeManifest.java
Patch:
@@ -107,6 +107,7 @@ void testRuntimeManifest() throws IOException {
         assertFalse(listHdfsDefinition.getSupportsDynamicProperties());
         assertFalse(listHdfsDefinition.getSupportsDynamicRelationships());
         assertEquals(InputRequirement.Requirement.INPUT_FORBIDDEN, listHdfsDefinition.getInputRequirement());
+        assertTrue(listHdfsDefinition.isAdditionalDetails());
 
         assertEquals("30 sec", listHdfsDefinition.getDefaultPenaltyDuration());
         assertEquals("1 sec", listHdfsDefinition.getDefaultYieldDuration());
@@ -159,6 +160,7 @@ void testRuntimeManifest() throws IOException {
                 "org.apache.nifi.processors.hadoop.FetchHDFS");
         assertNotNull(fetchHdfsDefinition.isRestricted());
         assertTrue(fetchHdfsDefinition.isRestricted());
+        assertFalse(fetchHdfsDefinition.isAdditionalDetails());
 
         final Set<Restriction> restrictions = fetchHdfsDefinition.getExplicitRestrictions();
         assertNotNull(restrictions);
@@ -171,6 +173,7 @@ void testRuntimeManifest() throws IOException {
         // Verify ConsumeKafka_2_6 definition which has properties with dependencies
         final ProcessorDefinition consumeKafkaDefinition = getProcessorDefinition(bundles, "nifi-kafka-2-6-nar",
                 "org.apache.nifi.processors.kafka.pubsub.ConsumeKafka_2_6");
+        assertTrue(consumeKafkaDefinition.isAdditionalDetails());
 
         final PropertyDescriptor maxUncommitProp = getPropertyDescriptor(consumeKafkaDefinition, "max-uncommit-offset-wait");
         final List<PropertyDependency> propertyDependencies = maxUncommitProp.getDependencies();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/registry/flow/GhostFlowRegistryClient.java
Patch:
@@ -51,9 +51,9 @@ public boolean isStorageLocationApplicable(final FlowRegistryClientConfiguration
     public Collection<ValidationResult> validate(final ValidationContext context) {
         return Collections.singleton(new ValidationResult.Builder()
                 .input("Any Property")
-                .subject("Missing Reporting Task")
+                .subject("Missing Registry Client")
                 .valid(false)
-                .explanation("Reporting Task is of type " + canonicalClassName + ", but this is not a valid Reporting Task type")
+                .explanation("Registry Client is of type " + canonicalClassName + ", but this is not a valid Registry Client type")
                 .build());
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/FlowFromDOMFactory.java
Patch:
@@ -161,7 +161,7 @@ public static FlowRegistryClientDTO getFlowRegistryClient(final Element element,
             return getFlowRegistryClientFromOldStyleConfig(element);
         }
 
-        dto.setId(getString(element, "identifier"));
+        dto.setId(getString(element, "id"));
         dto.setName(getString(element, "name"));
         dto.setDescription(getString(element, "description"));
         dto.setUri(getString(element, "uri"));

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java
Patch:
@@ -2810,6 +2810,7 @@ public VersionControlInformationDTO createVersionControlInformationDto(final Pro
         dto.setFlowName(versionControlInfo.getFlowName());
         dto.setFlowDescription(versionControlInfo.getFlowDescription());
         dto.setVersion(versionControlInfo.getVersion());
+        dto.setStorageLocation(versionControlInfo.getStorageLocation());
 
         final VersionedFlowStatus status = versionControlInfo.getStatus();
         final VersionedFlowState state = status.getState();
@@ -4594,6 +4595,7 @@ public VersionControlInformationDTO copy(final VersionControlInformationDTO orig
         copy.setVersion(original.getVersion());
         copy.setState(original.getState());
         copy.setStateExplanation(original.getStateExplanation());
+        copy.setStorageLocation(original.getStorageLocation());
         return copy;
     }
 

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/test/java/org/apache/nifi/processors/aws/wag/TestInvokeAmazonGatewayApiMock.java
Patch:
@@ -178,14 +178,15 @@ public void testSendQueryParams() throws Exception {
 
         // add dynamic property
         runner.setProperty("dynamicHeader", "yes!");
-        runner.setProperty(InvokeAWSGatewayApi.PROP_QUERY_PARAMS, "apples=oranges&dogs=cats");
+        runner.setProperty(InvokeAWSGatewayApi.PROP_QUERY_PARAMS, "apples=oranges&dogs=cats&filename=${filename}");
 
         // set the regex
         runner.setProperty(InvokeAWSGatewayApi.PROP_ATTRIBUTES_TO_SEND, "F.*");
 
         final Map<String, String> attributes = new HashMap<>();
         attributes.put(CoreAttributes.MIME_TYPE.key(), "application/plain-text");
         attributes.put("Foo", "Bar");
+        attributes.put("filename", "testfile");
         runner.enqueue("Hello".getBytes(StandardCharsets.UTF_8), attributes);
         // execute
         runner.assertValid();
@@ -197,7 +198,7 @@ public void testSendQueryParams() throws Exception {
                                 && argument.getFirstHeader("Authorization").getValue().startsWith("AWS4")
                                 && argument.getFirstHeader("dynamicHeader").getValue().equals("yes!")
                                 && argument.getFirstHeader("Foo").getValue().equals("Bar")
-                                && argument.getURI().toString().equals("https://foobar.execute-api.us-east-1.amazonaws.com/TEST?dogs=cats&apples=oranges")),
+                                && argument.getURI().toString().equals("https://foobar.execute-api.us-east-1.amazonaws.com/TEST?filename=testfile&dogs=cats&apples=oranges")),
                         any(HttpContext.class));
         // check
         runner.assertTransferCount(InvokeAWSGatewayApi.REL_SUCCESS_REQ, 1);

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/xml/XMLRecordReader.java
Patch:
@@ -48,6 +48,7 @@
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
@@ -363,7 +364,7 @@ private void parseAttributesForUnknownField(StartElement startElement, RecordSch
     }
 
     private Record parseRecord(StartElement startElement, RecordSchema schema, boolean coerceTypes, boolean dropUnknown) throws XMLStreamException, MalformedRecordException {
-        final Map<String, Object> recordValues = new HashMap<>();
+        final Map<String, Object> recordValues = new LinkedHashMap<>();
 
         // parse attributes
         if (parseXmlAttributes) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/FlowRegistryDAO.java
Patch:
@@ -42,6 +42,8 @@ public interface FlowRegistryDAO {
 
     Set<RegisteredFlow> getFlowsForUser(FlowRegistryClientUserContext context, String registryId, String bucketId);
 
+    RegisteredFlow getFlowForUser(FlowRegistryClientUserContext context, String registryId, String bucketId, String flowId);
+
     Set<RegisteredFlowSnapshotMetadata> getFlowVersionsForUser(FlowRegistryClientUserContext context, String registryId, String bucketId, String flowId);
 
     FlowRegistryClientNode removeFlowRegistry(String registryId);

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ListenHTTP.java
Patch:
@@ -562,7 +562,7 @@ public void onTrigger(final ProcessContext context, final ProcessSessionFactory
         for (final String id : findOldFlowFileIds(context)) {
             final FlowFileEntryTimeWrapper wrapper = flowFileMap.remove(id);
             if (wrapper != null) {
-                getLogger().warn("failed to received acknowledgment for HOLD with ID {} sent by {}; rolling back session", id, wrapper.getClientIP());
+                getLogger().warn("failed to receive acknowledgment for HOLD with ID {} sent by {}; rolling back session", id, wrapper.getClientIP());
                 wrapper.session.rollback();
             }
         }

File: nifi-mock/src/main/java/org/apache/nifi/util/MockProcessSession.java
Patch:
@@ -136,7 +136,7 @@ public void adjustCounter(final String name, final long delta, final boolean imm
     }
 
     public void migrate(final ProcessSession newOwner) {
-        migrate(newOwner, (Collection) currentVersions.values());
+        migrate(newOwner, new ArrayList<>((Collection) currentVersions.values()));
     }
 
     @Override

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/JoinEnrichment.java
Patch:
@@ -172,6 +172,7 @@ public class JoinEnrichment extends BinFiles {
             "does not point to any existing field in the original Record, the enrichment will not be inserted.")
         .required(true)
         .addValidator(new RecordPathValidator())
+        .defaultValue("/")
         .expressionLanguageSupported(ExpressionLanguageScope.FLOWFILE_ATTRIBUTES)
         .dependsOn(JOIN_STRATEGY, JOIN_INSERT_ENRICHMENT_FIELDS)
         .build();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/FlowController.java
Patch:
@@ -1591,7 +1591,7 @@ public void setMaxEventDrivenThreadCount(final int maxThreadCount) {
      */
     private void setMaxThreadCount(final int maxThreadCount, final FlowEngine engine, final AtomicInteger maxThreads) {
         if (maxThreadCount < 1) {
-            throw new IllegalArgumentException("Cannot set max number of threads to less than 2");
+            throw new IllegalArgumentException("Cannot set max number of threads to less than 1");
         }
 
         maxThreads.getAndSet(maxThreadCount);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/VersionedDataflowMapper.java
Patch:
@@ -82,6 +82,7 @@ public VersionedDataflow createMapping() {
         final VersionedDataflow dataflow = new VersionedDataflow();
         dataflow.setEncodingVersion(ENCODING_VERSION);
         dataflow.setMaxTimerDrivenThreadCount(flowController.getMaxTimerDrivenThreadCount());
+        dataflow.setMaxEventDrivenThreadCount(flowController.getMaxEventDrivenThreadCount());
         dataflow.setControllerServices(mapControllerServices());
         dataflow.setParameterContexts(mapParameterContexts());
         dataflow.setRegistries(mapRegistries());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/VersionedFlowSynchronizer.java
Patch:
@@ -370,6 +370,7 @@ private void synchronizeFlow(final FlowController controller, final DataFlow exi
 
             if (versionedFlow != null) {
                 controller.setMaxTimerDrivenThreadCount(versionedFlow.getMaxTimerDrivenThreadCount());
+                controller.setMaxEventDrivenThreadCount(versionedFlow.getMaxEventDrivenThreadCount());
                 ProcessGroup rootGroup = controller.getFlowManager().getRootGroup();
 
                 final Map<String, VersionedParameterContext> versionedParameterContextMap = new HashMap<>();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/controller/StandardProcessorNode.java
Patch:
@@ -205,6 +205,7 @@ public StandardProcessorNode(final LoggableComponent<Processor> processor, final
         schedulingPeriod = new AtomicReference<>("0 sec");
         schedulingNanos = new AtomicLong(MINIMUM_SCHEDULING_NANOS);
         yieldPeriod = new AtomicReference<>(DEFAULT_YIELD_PERIOD);
+        yieldNanos = Math.round(FormatUtils.getPreciseTimeDuration(DEFAULT_YIELD_PERIOD, TimeUnit.NANOSECONDS));
         yieldExpiration = new AtomicLong(0L);
         concurrentTaskCount = new AtomicInteger(1);
         position = new AtomicReference<>(new Position(0D, 0D));
@@ -596,7 +597,7 @@ public synchronized void setYieldPeriod(final String yieldPeriod) {
     public void yield() {
         final Processor processor = processorRef.get().getProcessor();
         final long yieldMillis = getYieldPeriod(TimeUnit.MILLISECONDS);
-        yield(yieldMillis, TimeUnit.MILLISECONDS);
+        this.yield(yieldMillis, TimeUnit.MILLISECONDS);
 
         final String yieldDuration = (yieldMillis > 1000) ? (yieldMillis / 1000) + " seconds" : yieldMillis + " milliseconds";
         LoggerFactory.getLogger(processor.getClass()).trace("{} has chosen to yield its resources; will not be scheduled to run again for {}", processor, yieldDuration);

File: nifi-nar-bundles/nifi-iceberg-bundle/nifi-iceberg-processors/src/test/java/org/apache/nifi/processors/iceberg/metastore/MetastoreCore.java
Patch:
@@ -163,7 +163,7 @@ private void setupDB(String dbURL) throws SQLException, IOException {
         final Connection connection = DriverManager.getConnection(dbURL);
         ScriptRunner scriptRunner = new ScriptRunner(connection);
 
-        final URL initScript = getClass().getClassLoader().getResource("hive-schema-3.2.0.derby.sql");
+        final URL initScript = getClass().getClassLoader().getResource("hive-schema-4.0.0-alpha-2.derby.sql");
         final Reader reader = new BufferedReader(new FileReader(initScript.getFile()));
         scriptRunner.runScript(reader);
     }

File: nifi-nar-bundles/nifi-asn1-bundle/nifi-asn1-services/src/main/java/org/apache/nifi/jasn1/convert/converters/BerBitStringConverter.java
Patch:
@@ -31,7 +31,7 @@ public boolean supportsType(Class<?> berType) {
 
     @Override
     public DataType convertType(Class<?> berType, JASN1Converter converter) {
-        return RecordFieldType.ARRAY.getArrayDataType(RecordFieldType.BOOLEAN.getDataType());
+        return RecordFieldType.STRING.getDataType();
     }
 
     @Override
@@ -43,6 +43,6 @@ public boolean supportsValue(BerType value, DataType dataType) {
     public Object convertValue(BerType value, DataType dataType, JASN1Converter converter) {
         final BerBitString berValue = (BerBitString) value;
 
-        return berValue.getValueAsBooleans();
+        return berValue.toString();
     }
 }

File: nifi-nar-bundles/nifi-asn1-bundle/nifi-asn1-services/src/test/java/org/apache/nifi/jasn1/ExampleDataGenerator.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.nifi.jasn1;
 
 import com.beanit.asn1bean.ber.ReverseByteArrayOutputStream;
+import com.beanit.asn1bean.ber.types.BerBitString;
 import com.beanit.asn1bean.ber.types.BerBoolean;
 import com.beanit.asn1bean.ber.types.BerInteger;
 import com.beanit.asn1bean.ber.types.BerOctetString;
@@ -62,6 +63,7 @@ private static void generateBasicTypes(File dir) throws IOException {
             basicTypes.setI(new BerInteger(789));
             basicTypes.setOctStr(new BerOctetString(new byte[]{1, 2, 3, 4, 5}));
             basicTypes.setUtf8Str(new BerUTF8String("Some UTF-8 String. こんにちは世界。"));
+            basicTypes.setBitStr(new BerBitString(new boolean[]{false, true, true, false, true, false, false, false}));
             final int encoded = basicTypes.encode(rev);
             out.write(rev.getArray(), 0, encoded);
             LOG.info("Generated {} bytes to {}", encoded, file);

File: nifi-nar-bundles/nifi-asn1-bundle/nifi-asn1-services/src/test/java/org/apache/nifi/jasn1/TestJASN1RecordReader.java
Patch:
@@ -59,6 +59,7 @@ public void testBasicTypes() throws Exception {
             assertEquals(789, record.getAsInt("i").intValue());
             assertEquals("0102030405", record.getValue("octStr"));
             assertEquals("Some UTF-8 String. こんにちは世界。", record.getValue("utf8Str"));
+            assertEquals("01101000", record.getValue("bitStr"));
 
             record = reader.nextRecord(true, false);
             assertNull(record);

File: nifi-nar-bundles/nifi-asn1-bundle/nifi-asn1-services/src/test/java/org/apache/nifi/jasn1/TestJASN1RecordReaderWithSimpleTypes.java
Patch:
@@ -106,11 +106,11 @@ public void testBitString() throws Exception {
         berValue.setValue(new BerBitString(new boolean[]{false, true, false, false, true, true, true, true, false, true, false, false}));
 
         Map<String, Object> expectedValues = new HashMap<String, Object>() {{
-            put("value", new boolean[]{false, true, false, false, true, true, true, true, false, true, false, false});
+            put("value", "010011110100");
         }};
 
         RecordSchema expectedSchema = new SimpleRecordSchema(Arrays.asList(
-                new RecordField("value", RecordFieldType.ARRAY.getArrayDataType(RecordFieldType.BOOLEAN.getDataType())))
+                new RecordField("value", RecordFieldType.STRING.getDataType()))
         );
 
         testReadRecord(dataFile, berValue, expectedValues, expectedSchema);

File: nifi-nar-bundles/nifi-smb-bundle/nifi-smb-processors/src/main/java/org/apache/nifi/processors/smb/GetSmbFile.java
Patch:
@@ -545,6 +545,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
         } catch (Exception e) {
             logger.error("Could not establish smb connection because of error {}", new Object[]{e});
             context.yield();
+            smbClient.getServerList().unregister(hostname);
         }
     }
 }

File: nifi-nar-bundles/nifi-smb-bundle/nifi-smb-processors/src/main/java/org/apache/nifi/processors/smb/PutSmbFile.java
Patch:
@@ -401,6 +401,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
         } catch (Exception e) {
             session.transfer(flowFiles, REL_FAILURE);
             logger.error("Could not establish smb connection because of error {}", new Object[]{e});
+            smbClient.getServerList().unregister(hostname);
         }
     }
 }

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestPartitionRecord.java
Patch:
@@ -83,7 +83,7 @@ public void groupByStringMixedNumberOfRecords() {
         assertEquals(1L, out.stream().filter(ff -> ff.getAttribute("record.count").equals("2")).count());
         out.forEach(ff -> ff.assertAttributeEquals("fragment.count", "4"));
         IntStream.of(1, 3).forEach((i) -> out.get(i).assertAttributeEquals("fragment.id", out.get(0).getAttribute("fragment.id")));
-        IntStream.of(0, 3).forEach((i) -> out.get(i).assertAttributeEquals("fragment.index", String.valueOf(i)));
+        IntStream.of(0, 3).forEach((i) -> assertEquals(1L, out.stream().filter(ff -> ff.getAttribute("fragment.index").equals(String.valueOf(i))).count()));
 
         out.stream().filter(ff -> ff.getAttribute("record.count").equals("2")).forEach(ff -> ff.assertContentEquals("Jake,49,\nJake,14,\n"));
 

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/processors/script/ExecuteScript.java
Patch:
@@ -247,6 +247,9 @@ public void onTrigger(ProcessContext context, ProcessSessionFactory sessionFacto
                 throw new ProcessException(t);
             }
         } catch (final Throwable t) {
+            if (getLogger().isDebugEnabled()) {
+                getLogger().debug("Script as executed by NiFi with preloads {}", scriptRunner.getScript());
+            }
             // Mimic AbstractProcessor behavior here
             getLogger().error("{} failed to process due to {}; rolling back session", this, t);
 

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/processors/script/InvokeScriptedProcessor.java
Patch:
@@ -582,6 +582,9 @@ public void onTrigger(ProcessContext context, ProcessSessionFactory sessionFacto
                 // run the processor
                 instance.onTrigger(context, sessionFactory);
             } catch (final ProcessException e) {
+                if (getLogger().isDebugEnabled()) {
+                    getLogger().debug("Script as executed by NiFi with preloads {}", scriptRunner.getScript());
+                }
                 final String message = String.format("An error occurred executing the configured Processor [%s]: %s",
                         context.getProperty(ScriptingComponentUtils.SCRIPT_FILE).getValue(), e);
                 log.error(message);

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/processors/script/ScriptRunner.java
Patch:
@@ -22,6 +22,7 @@
 import javax.script.ScriptException;
 
 public interface ScriptRunner {
+    String getScript();
 
     String getScriptEngineName();
 

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/processors/script/ScriptedPartitionRecord.java
Patch:
@@ -132,6 +132,9 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
                 final ScriptEngine scriptEngine = scriptRunner.getScriptEngine();
                 evaluator = createEvaluator(scriptEngine, flowFile);
             } catch (final ScriptException se) {
+                if (getLogger().isDebugEnabled()) {
+                    getLogger().debug("Script as executed by NiFi with preloads {}", scriptRunner.getScript());
+                }
                 getLogger().error("Failed to initialize script engine", se);
                 session.transfer(flowFile, RELATIONSHIP_FAILURE);
                 return;

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/processors/script/ScriptedRouterProcessor.java
Patch:
@@ -99,6 +99,9 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
                 final ScriptEngine scriptEngine = scriptRunner.getScriptEngine();
                 evaluator = createEvaluator(scriptEngine, flowFile);
             } catch (final ScriptException se) {
+                if (getLogger().isDebugEnabled()) {
+                    getLogger().debug("Script as executed by NiFi with preloads {}", scriptRunner.getScript());
+                }
                 getLogger().error("Failed to initialize script engine", se);
                 session.transfer(flowFile, getFailureRelationship());
                 return;

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/processors/script/ScriptedTransformRecord.java
Patch:
@@ -118,6 +118,9 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
                 final ScriptEngine scriptEngine = scriptRunner.getScriptEngine();
                 evaluator = createEvaluator(scriptEngine, flowFile);
             } catch (final ScriptException se) {
+                if (getLogger().isDebugEnabled()) {
+                    getLogger().debug("Script as executed by NiFi with preloads {}", scriptRunner.getScript());
+                }
                 getLogger().error("Failed to initialize script engine", se);
                 session.transfer(flowFile, REL_FAILURE);
                 return;

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/record/script/AbstractScriptedRecordFactory.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.nifi.record.script;
 
 import org.apache.nifi.processor.exception.ProcessException;
-import org.apache.nifi.script.ScriptingComponentHelper;
 import org.apache.nifi.script.AbstractScriptedControllerService;
+import org.apache.nifi.script.ScriptingComponentHelper;
 
 import java.util.concurrent.atomic.AtomicReference;
 

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/script/impl/GroovyScriptRunner.java
Patch:
@@ -37,7 +37,7 @@ public class GroovyScriptRunner extends BaseScriptRunner {
                     + "import org.apache.nifi.lookup.*\n";
 
     public GroovyScriptRunner(ScriptEngine engine, String scriptBody, String[] modulePaths) {
-        super(engine, scriptBody, modulePaths);
+        super(engine, scriptBody, PRELOADS, modulePaths);
     }
 
     @Override
@@ -48,6 +48,6 @@ public String getScriptEngineName() {
     @Override
     public void run(Bindings bindings) throws ScriptException {
         scriptEngine.setBindings(bindings, ScriptContext.ENGINE_SCOPE);
-        scriptEngine.eval(PRELOADS + scriptBody);
+        scriptEngine.eval(scriptBody);
     }
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/flow/synchronization/StandardVersionedComponentSynchronizer.java
Patch:
@@ -2252,7 +2252,7 @@ public void synchronize(final Port port, final VersionedPort proposed, final Pro
             final Set<Connectable> toRestart = new HashSet<>();
             if (port != null) {
                 final boolean stopped = stopOrTerminate(port, timeout, synchronizationOptions);
-                if (stopped && proposed != null) {
+                if (stopped && proposed != null && proposed.getScheduledState() == org.apache.nifi.flow.ScheduledState.RUNNING) {
                     toRestart.add(port);
                 }
             }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiServiceFacade.java
Patch:
@@ -5190,10 +5190,9 @@ private RegisteredFlowSnapshot getVersionedFlowSnapshot(final String registryId,
         } catch (final FlowRegistryException e) {
             logger.error(e.getMessage(), e);
             throw new IllegalArgumentException("The Flow Registry with ID " + registryId + " reports that no Flow exists with Bucket "
-                    + bucketId + ", Flow " + flowId + ", Version " + flowVersion);
+                    + bucketId + ", Flow " + flowId + ", Version " + flowVersion, e);
         } catch (final IOException ioe) {
-            throw new IllegalStateException(
-                    "Failed to communicate with Flow Registry when attempting to retrieve a versioned flow");
+            throw new IllegalStateException("Failed to communicate with Flow Registry when attempting to retrieve a versioned flow", ioe);
         }
 
         return snapshot;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/VersionsResource.java
Patch:
@@ -1082,7 +1082,7 @@ public Response initiateVersionControlUpdate(
         @ApiResponse(code = 409, message = "The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.")
     })
     public Response initiateRevertFlowVersion(@ApiParam("The process group id.") @PathParam("id") final String groupId,
-        @ApiParam(value = "The controller service configuration details.", required = true) final VersionControlInformationEntity requestEntity) {
+        @ApiParam(value = "The Version Control Information to revert to.", required = true) final VersionControlInformationEntity requestEntity) {
 
         if (requestEntity == null) {
             throw new IllegalArgumentException("Version control information must be specified.");

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-restapi-processors/src/main/java/org/apache/nifi/processors/elasticsearch/PutElasticsearchJson.java
Patch:
@@ -167,7 +167,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
             final String indexOp = context.getProperty(INDEX_OP).evaluateAttributeExpressions(input).getValue();
             final String index = context.getProperty(INDEX).evaluateAttributeExpressions(input).getValue();
             final String type = context.getProperty(TYPE).evaluateAttributeExpressions(input).getValue();
-            final String id = StringUtils.isNotBlank(idAttribute) ? input.getAttribute(idAttribute) : null;
+            final String id = StringUtils.isNotBlank(idAttribute) && StringUtils.isNotBlank(input.getAttribute(idAttribute)) ? input.getAttribute(idAttribute) : null;
 
             final String charset = context.getProperty(CHARSET).evaluateAttributeExpressions(input).getValue();
 

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-restapi-processors/src/main/java/org/apache/nifi/processors/elasticsearch/PutElasticsearchRecord.java
Patch:
@@ -333,10 +333,10 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
         final String atTimestampPath = context.getProperty(AT_TIMESTAMP_RECORD_PATH).evaluateAttributeExpressions(input).getValue();
 
         final RecordPath ioPath = indexOpPath != null ? recordPathCache.getCompiled(indexOpPath) : null;
-        final RecordPath path = idPath != null ? recordPathCache.getCompiled(idPath) : null;
+        final RecordPath path = StringUtils.isNotBlank(idPath) ? recordPathCache.getCompiled(idPath) : null;
         final RecordPath iPath = indexPath != null ? recordPathCache.getCompiled(indexPath) : null;
         final RecordPath tPath = typePath != null ? recordPathCache.getCompiled(typePath) : null;
-        final RecordPath atPath = atTimestampPath != null ? recordPathCache.getCompiled(atTimestampPath) : null;
+        final RecordPath atPath = StringUtils.isNotBlank(atTimestampPath) ? recordPathCache.getCompiled(atTimestampPath) : null;
 
         final boolean retainId = context.getProperty(RETAIN_ID_FIELD).evaluateAttributeExpressions(input).asBoolean();
         final boolean retainTimestamp = context.getProperty(RETAIN_AT_TIMESTAMP_FIELD).evaluateAttributeExpressions(input).asBoolean();
@@ -562,7 +562,7 @@ private String getFromRecordPath(final Record record, final RecordPath path, fin
                 fieldValue.updateValue(null);
             }
 
-            return fieldValue.getValue().toString();
+            return fieldValue.toString();
         } else {
             return fallback;
         }

File: nifi-nar-bundles/nifi-accumulo-bundle/nifi-accumulo-processors/src/main/java/org/apache/nifi/accumulo/processors/ScanAccumulo.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.nifi.annotation.behavior.EventDriven;
 import org.apache.nifi.annotation.behavior.InputRequirement;
 import org.apache.nifi.annotation.behavior.SupportsBatching;
+import org.apache.nifi.annotation.configuration.DefaultSchedule;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.Tags;
 import org.apache.nifi.annotation.lifecycle.OnScheduled;
@@ -45,6 +46,7 @@
 import org.apache.nifi.processor.exception.ProcessException;
 import org.apache.nifi.processor.io.StreamCallback;
 import org.apache.nifi.processor.util.StandardValidators;
+import org.apache.nifi.scheduling.SchedulingStrategy;
 import org.apache.nifi.schema.access.SchemaNotFoundException;
 import org.apache.nifi.serialization.RecordSetWriter;
 import org.apache.nifi.serialization.RecordSetWriterFactory;
@@ -79,6 +81,7 @@
 @InputRequirement(InputRequirement.Requirement.INPUT_ALLOWED)
 @CapabilityDescription("Scan the given table and writes result in a flowfile. Value will be represented as UTF-8 Encoded String.")
 @Tags({"hadoop", "accumulo", "scan", "record"})
+@DefaultSchedule(strategy = SchedulingStrategy.TIMER_DRIVEN, period = "1 min")
 /**
  * Purpose and Design: Requires a connector be defined by way of an AccumuloService object. This class
  * simply extends BaseAccumuloProcessor to scan accumulo based on aspects and expression executed against

File: nifi-nar-bundles/nifi-airtable-bundle/nifi-airtable-processors/src/main/java/org/apache/nifi/processors/airtable/QueryAirtableTable.java
Patch:
@@ -44,6 +44,7 @@
 import org.apache.nifi.annotation.behavior.TriggerWhenEmpty;
 import org.apache.nifi.annotation.behavior.WritesAttribute;
 import org.apache.nifi.annotation.behavior.WritesAttributes;
+import org.apache.nifi.annotation.configuration.DefaultSchedule;
 import org.apache.nifi.annotation.configuration.DefaultSettings;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.Tags;
@@ -64,6 +65,7 @@
 import org.apache.nifi.processors.airtable.service.AirtableGetRecordsParameters;
 import org.apache.nifi.processors.airtable.service.AirtableRestService;
 import org.apache.nifi.processors.airtable.service.RateLimitExceededException;
+import org.apache.nifi.scheduling.SchedulingStrategy;
 import org.apache.nifi.web.client.provider.api.WebClientServiceProvider;
 
 @PrimaryNodeOnly
@@ -92,6 +94,7 @@
                 + "FlowFiles were produced"),
 })
 @DefaultSettings(yieldDuration = "15 sec")
+@DefaultSchedule(strategy = SchedulingStrategy.TIMER_DRIVEN, period = "1 min")
 public class QueryAirtableTable extends AbstractProcessor {
 
     static final PropertyDescriptor API_URL = new PropertyDescriptor.Builder()

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/main/java/org/apache/nifi/processors/azure/storage/ListAzureBlobStorage.java
Patch:
@@ -45,6 +45,7 @@
 import org.apache.nifi.annotation.behavior.TriggerSerially;
 import org.apache.nifi.annotation.behavior.WritesAttribute;
 import org.apache.nifi.annotation.behavior.WritesAttributes;
+import org.apache.nifi.annotation.configuration.DefaultSchedule;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.SeeAlso;
 import org.apache.nifi.annotation.documentation.Tags;
@@ -61,6 +62,7 @@
 import org.apache.nifi.processors.azure.storage.utils.AzureStorageUtils;
 import org.apache.nifi.processors.azure.storage.utils.BlobInfo;
 import org.apache.nifi.processors.azure.storage.utils.BlobInfo.Builder;
+import org.apache.nifi.scheduling.SchedulingStrategy;
 import org.apache.nifi.serialization.record.RecordSchema;
 
 import java.util.Optional;
@@ -87,6 +89,7 @@
         "This allows the Processor to list only blobs that have been added or modified after this date the next time that the Processor is run.  State is " +
         "stored across the cluster so that this Processor can be run on Primary Node only and if a new Primary Node is selected, the new node can pick up " +
         "where the previous node left off, without duplicating the data.")
+@DefaultSchedule(strategy = SchedulingStrategy.TIMER_DRIVEN, period = "1 min")
 public class ListAzureBlobStorage extends AbstractListAzureProcessor<BlobInfo> {
 
     private static final PropertyDescriptor PROP_PREFIX = new PropertyDescriptor.Builder()

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/main/java/org/apache/nifi/processors/azure/storage/ListAzureBlobStorage_v12.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.nifi.annotation.behavior.TriggerSerially;
 import org.apache.nifi.annotation.behavior.WritesAttribute;
 import org.apache.nifi.annotation.behavior.WritesAttributes;
+import org.apache.nifi.annotation.configuration.DefaultSchedule;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.SeeAlso;
 import org.apache.nifi.annotation.documentation.Tags;
@@ -45,6 +46,7 @@
 import org.apache.nifi.processors.azure.storage.utils.AzureStorageUtils;
 import org.apache.nifi.processors.azure.storage.utils.BlobInfo;
 import org.apache.nifi.processors.azure.storage.utils.BlobInfo.Builder;
+import org.apache.nifi.scheduling.SchedulingStrategy;
 import org.apache.nifi.serialization.record.RecordSchema;
 
 import java.io.IOException;
@@ -98,6 +100,7 @@
         "(by default). This allows the Processor to list only blobs that have been added or modified after this date the next time that the Processor is run. State is " +
         "stored across the cluster so that this Processor can be run on Primary Node only and if a new Primary Node is selected, the new node can pick up " +
         "where the previous node left off, without duplicating the data.")
+@DefaultSchedule(strategy = SchedulingStrategy.TIMER_DRIVEN, period = "1 min")
 public class ListAzureBlobStorage_v12 extends AbstractListAzureProcessor<BlobInfo> {
 
     public static final PropertyDescriptor CONTAINER = new PropertyDescriptor.Builder()

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/main/java/org/apache/nifi/processors/azure/storage/ListAzureDataLakeStorage.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.nifi.annotation.behavior.TriggerSerially;
 import org.apache.nifi.annotation.behavior.WritesAttribute;
 import org.apache.nifi.annotation.behavior.WritesAttributes;
+import org.apache.nifi.annotation.configuration.DefaultSchedule;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.SeeAlso;
 import org.apache.nifi.annotation.documentation.Tags;
@@ -44,6 +45,7 @@
 import org.apache.nifi.processors.azure.storage.utils.ADLSFileInfo;
 import org.apache.nifi.processors.azure.storage.utils.AzureStorageUtils;
 import org.apache.nifi.processors.azure.storage.utils.DataLakeServiceClientFactory;
+import org.apache.nifi.scheduling.SchedulingStrategy;
 import org.apache.nifi.serialization.record.RecordSchema;
 import org.apache.nifi.services.azure.storage.ADLSCredentialsDetails;
 import org.apache.nifi.services.azure.storage.ADLSCredentialsService;
@@ -103,6 +105,7 @@
         "This allows the Processor to list only files that have been added or modified after this date the next time that the Processor is run. State is " +
         "stored across the cluster so that this Processor can be run on Primary Node only and if a new Primary Node is selected, the new node can pick up " +
         "where the previous node left off, without duplicating the data.")
+@DefaultSchedule(strategy = SchedulingStrategy.TIMER_DRIVEN, period = "1 min")
 public class ListAzureDataLakeStorage extends AbstractListAzureProcessor<ADLSFileInfo> {
 
     public static final PropertyDescriptor RECURSE_SUBDIRECTORIES = new PropertyDescriptor.Builder()

File: nifi-nar-bundles/nifi-box-bundle/nifi-box-processors/src/main/java/org/apache/nifi/processors/box/ListBoxFile.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.nifi.annotation.behavior.TriggerSerially;
 import org.apache.nifi.annotation.behavior.WritesAttribute;
 import org.apache.nifi.annotation.behavior.WritesAttributes;
+import org.apache.nifi.annotation.configuration.DefaultSchedule;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.SeeAlso;
 import org.apache.nifi.annotation.documentation.Tags;
@@ -40,6 +41,7 @@
 import org.apache.nifi.processor.util.StandardValidators;
 import org.apache.nifi.processor.util.list.AbstractListProcessor;
 import org.apache.nifi.processor.util.list.ListedEntityTracker;
+import org.apache.nifi.scheduling.SchedulingStrategy;
 import org.apache.nifi.serialization.record.RecordSchema;
 
 import java.io.IOException;
@@ -71,6 +73,7 @@
     @WritesAttribute(attribute = BoxFileInfo.TIMESTAMP, description = "The last modified time of the file.")})
 @Stateful(scopes = {Scope.CLUSTER}, description = "The processor stores necessary data to be able to keep track what files have been listed already." +
     " What exactly needs to be stored depends on the 'Listing Strategy'.")
+@DefaultSchedule(strategy = SchedulingStrategy.TIMER_DRIVEN, period = "1 min")
 public class ListBoxFile extends AbstractListProcessor<BoxFileInfo> {
     public static final PropertyDescriptor FOLDER_ID = new PropertyDescriptor.Builder()
         .name("box-folder-id")

File: nifi-nar-bundles/nifi-dropbox-bundle/nifi-dropbox-processors/src/main/java/org/apache/nifi/processors/dropbox/ListDropbox.java
Patch:
@@ -42,6 +42,7 @@
 import org.apache.nifi.annotation.behavior.TriggerSerially;
 import org.apache.nifi.annotation.behavior.WritesAttribute;
 import org.apache.nifi.annotation.behavior.WritesAttributes;
+import org.apache.nifi.annotation.configuration.DefaultSchedule;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.SeeAlso;
 import org.apache.nifi.annotation.documentation.Tags;
@@ -56,6 +57,7 @@
 import org.apache.nifi.processor.util.list.ListedEntityTracker;
 import org.apache.nifi.proxy.ProxyConfiguration;
 import org.apache.nifi.proxy.ProxySpec;
+import org.apache.nifi.scheduling.SchedulingStrategy;
 import org.apache.nifi.serialization.record.RecordSchema;
 
 @PrimaryNodeOnly
@@ -76,6 +78,7 @@
 @Stateful(scopes = {Scope.CLUSTER}, description = "The processor stores necessary data to be able to keep track what files have been listed already. " +
         "What exactly needs to be stored depends on the 'Listing Strategy'.")
 @SeeAlso(FetchDropbox.class)
+@DefaultSchedule(strategy = SchedulingStrategy.TIMER_DRIVEN, period = "1 min")
 public class ListDropbox extends AbstractListProcessor<DropboxFileInfo> implements DropboxTrait {
     public static final PropertyDescriptor FOLDER = new PropertyDescriptor.Builder()
             .name("folder")

File: nifi-nar-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/drive/ListGoogleDrive.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.nifi.annotation.behavior.TriggerSerially;
 import org.apache.nifi.annotation.behavior.WritesAttribute;
 import org.apache.nifi.annotation.behavior.WritesAttributes;
+import org.apache.nifi.annotation.configuration.DefaultSchedule;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.SeeAlso;
 import org.apache.nifi.annotation.documentation.Tags;
@@ -46,6 +47,7 @@
 import org.apache.nifi.processors.gcp.ProxyAwareTransportFactory;
 import org.apache.nifi.processors.gcp.util.GoogleUtils;
 import org.apache.nifi.proxy.ProxyConfiguration;
+import org.apache.nifi.scheduling.SchedulingStrategy;
 import org.apache.nifi.serialization.record.RecordSchema;
 
 import java.io.IOException;
@@ -86,6 +88,7 @@
         " What exactly needs to be stored depends on the 'Listing Strategy'." +
         " State is stored across the cluster so that this Processor can be run on Primary Node only and if a new Primary Node is selected, the new node can pick up" +
         " where the previous node left off, without duplicating the data.")
+@DefaultSchedule(strategy = SchedulingStrategy.TIMER_DRIVEN, period = "1 min")
 public class ListGoogleDrive extends AbstractListProcessor<GoogleDriveFileInfo> implements GoogleDriveTrait {
     public static final PropertyDescriptor FOLDER_ID = new PropertyDescriptor.Builder()
             .name("folder-id")

File: nifi-nar-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/storage/ListGCSBucket.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.nifi.annotation.behavior.TriggerWhenEmpty;
 import org.apache.nifi.annotation.behavior.WritesAttribute;
 import org.apache.nifi.annotation.behavior.WritesAttributes;
+import org.apache.nifi.annotation.configuration.DefaultSchedule;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.SeeAlso;
 import org.apache.nifi.annotation.documentation.Tags;
@@ -52,6 +53,7 @@
 import org.apache.nifi.processor.util.list.ListableEntityWrapper;
 import org.apache.nifi.processor.util.list.ListedEntity;
 import org.apache.nifi.processor.util.list.ListedEntityTracker;
+import org.apache.nifi.scheduling.SchedulingStrategy;
 import org.apache.nifi.schema.access.SchemaNotFoundException;
 import org.apache.nifi.serialization.RecordSetWriter;
 import org.apache.nifi.serialization.RecordSetWriterFactory;
@@ -165,6 +167,7 @@
         @WritesAttribute(attribute = OWNER_TYPE_ATTR, description = OWNER_TYPE_DESC),
         @WritesAttribute(attribute = URI_ATTR, description = URI_DESC)
 })
+@DefaultSchedule(strategy = SchedulingStrategy.TIMER_DRIVEN, period = "1 min")
 public class ListGCSBucket extends AbstractGCSProcessor {
     public static final AllowableValue BY_TIMESTAMPS = new AllowableValue("timestamps", "Tracking Timestamps",
         "This strategy tracks the latest timestamp of listed entity to determine new/updated entities." +

File: nifi-nar-bundles/nifi-hbase-bundle/nifi-hbase-processors/src/main/java/org/apache/nifi/hbase/GetHBase.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.nifi.annotation.behavior.TriggerWhenEmpty;
 import org.apache.nifi.annotation.behavior.WritesAttribute;
 import org.apache.nifi.annotation.behavior.WritesAttributes;
+import org.apache.nifi.annotation.configuration.DefaultSchedule;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.Tags;
 import org.apache.nifi.annotation.lifecycle.OnRemoved;
@@ -71,6 +72,7 @@
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+import org.apache.nifi.scheduling.SchedulingStrategy;
 
 @TriggerWhenEmpty
 @TriggerSerially
@@ -87,6 +89,7 @@
 @Stateful(scopes = Scope.CLUSTER, description = "After performing a fetching from HBase, stores a timestamp of the last-modified cell that was found. In addition, it stores the ID of the row(s) "
     + "and the value of each cell that has that timestamp as its modification date. This is stored across the cluster and allows the next fetch to avoid duplicating data, even if this Processor is "
     + "run on Primary Node only and the Primary Node changes.")
+@DefaultSchedule(strategy = SchedulingStrategy.TIMER_DRIVEN, period = "1 min")
 public class GetHBase extends AbstractProcessor implements VisibilityFetchSupport {
 
     static final Pattern COLUMNS_PATTERN = Pattern.compile("\\w+(:\\w+)?(?:,\\w+(:\\w+)?)*");

File: nifi-nar-bundles/nifi-hubspot-bundle/nifi-hubspot-processors/src/main/java/org/apache/nifi/processors/hubspot/GetHubSpot.java
Patch:
@@ -30,6 +30,7 @@
 import org.apache.nifi.annotation.behavior.PrimaryNodeOnly;
 import org.apache.nifi.annotation.behavior.Stateful;
 import org.apache.nifi.annotation.behavior.TriggerSerially;
+import org.apache.nifi.annotation.configuration.DefaultSchedule;
 import org.apache.nifi.annotation.configuration.DefaultSettings;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.Tags;
@@ -46,6 +47,7 @@
 import org.apache.nifi.processor.exception.ProcessException;
 import org.apache.nifi.processor.io.OutputStreamCallback;
 import org.apache.nifi.processor.util.StandardValidators;
+import org.apache.nifi.scheduling.SchedulingStrategy;
 import org.apache.nifi.web.client.api.HttpResponseEntity;
 import org.apache.nifi.web.client.api.HttpResponseStatus;
 import org.apache.nifi.web.client.provider.api.WebClientServiceProvider;
@@ -79,6 +81,7 @@
         " executing a request. Only the objects after the paging cursor will be retrieved. The maximum number of retrieved" +
         " objects can be set in the 'Result Limit' property.")
 @DefaultSettings(yieldDuration = "10 sec")
+@DefaultSchedule(strategy = SchedulingStrategy.TIMER_DRIVEN, period = "1 min")
 public class GetHubSpot extends AbstractProcessor {
 
     static final PropertyDescriptor OBJECT_TYPE = new PropertyDescriptor.Builder()

File: nifi-nar-bundles/nifi-ignite-bundle/nifi-ignite-processors/src/main/java/org/apache/nifi/processors/ignite/cache/GetIgniteCache.java
Patch:
@@ -44,6 +44,7 @@
 @EventDriven
 @SupportsBatching
 @Tags({ "Ignite", "get", "read", "cache", "key" })
+@SeeAlso({PutIgniteCache.class})
 @InputRequirement(Requirement.INPUT_REQUIRED)
 @CapabilityDescription("Get the byte array from Ignite Cache and adds it as the content of a FlowFile." +
     "The processor uses the value of FlowFile attribute (Ignite cache entry key) as the cache key lookup. " +
@@ -53,7 +54,6 @@
 @WritesAttributes({
     @WritesAttribute(attribute = GetIgniteCache.IGNITE_GET_FAILED_REASON_ATTRIBUTE_KEY, description = "The reason for getting entry from cache"),
     })
-@SeeAlso({PutIgniteCache.class})
 public class GetIgniteCache extends AbstractIgniteCacheProcessor {
 
     /** Flow file attribute keys and messages */

File: nifi-nar-bundles/nifi-mqtt-bundle/nifi-mqtt-processors/src/main/java/org/apache/nifi/processors/mqtt/ConsumeMQTT.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.nifi.annotation.behavior.TriggerSerially;
 import org.apache.nifi.annotation.behavior.WritesAttribute;
 import org.apache.nifi.annotation.behavior.WritesAttributes;
+import org.apache.nifi.annotation.configuration.DefaultSchedule;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.SeeAlso;
 import org.apache.nifi.annotation.documentation.Tags;
@@ -46,6 +47,7 @@
 import org.apache.nifi.processors.mqtt.common.MqttCallback;
 import org.apache.nifi.processors.mqtt.common.MqttException;
 import org.apache.nifi.processors.mqtt.common.ReceivedMqttMessage;
+import org.apache.nifi.scheduling.SchedulingStrategy;
 import org.apache.nifi.serialization.MalformedRecordException;
 import org.apache.nifi.serialization.RecordReader;
 import org.apache.nifi.serialization.RecordReaderFactory;
@@ -104,7 +106,7 @@
             "on the topic.")})
 @SystemResourceConsideration(resource = SystemResource.MEMORY, description = "The 'Max Queue Size' specifies the maximum number of messages that can be hold in memory by NiFi by a single "
         + "instance of this processor. A high value for this property could represent a lot of data being stored in memory.")
-
+@DefaultSchedule(strategy = SchedulingStrategy.TIMER_DRIVEN, period = "1 min")
 public class ConsumeMQTT extends AbstractMQTTProcessor implements MqttCallback {
 
     public final static String RECORD_COUNT_KEY = "record.count";

File: nifi-nar-bundles/nifi-salesforce-bundle/nifi-salesforce-processors/src/main/java/org/apache/nifi/processors/salesforce/QuerySalesforceObject.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.nifi.annotation.behavior.TriggerWhenEmpty;
 import org.apache.nifi.annotation.behavior.WritesAttribute;
 import org.apache.nifi.annotation.behavior.WritesAttributes;
+import org.apache.nifi.annotation.configuration.DefaultSchedule;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.Tags;
 import org.apache.nifi.annotation.lifecycle.OnScheduled;
@@ -47,6 +48,7 @@
 import org.apache.nifi.processor.util.StandardValidators;
 import org.apache.nifi.processors.salesforce.util.SalesforceRestService;
 import org.apache.nifi.processors.salesforce.util.SalesforceToRecordSchemaConverter;
+import org.apache.nifi.scheduling.SchedulingStrategy;
 import org.apache.nifi.schema.access.SchemaNotFoundException;
 import org.apache.nifi.serialization.MalformedRecordException;
 import org.apache.nifi.serialization.RecordSetWriter;
@@ -96,6 +98,7 @@
         @WritesAttribute(attribute = "mime.type", description = "Sets the mime.type attribute to the MIME Type specified by the Record Writer."),
         @WritesAttribute(attribute = "record.count", description = "Sets the number of records in the FlowFile.")
 })
+@DefaultSchedule(strategy = SchedulingStrategy.TIMER_DRIVEN, period = "1 min")
 public class QuerySalesforceObject extends AbstractProcessor {
 
     static final PropertyDescriptor API_URL = new PropertyDescriptor.Builder()

File: nifi-nar-bundles/nifi-shopify-bundle/nifi-shopify-processors/src/main/java/org/apache/nifi/processors/shopify/GetShopify.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.nifi.annotation.behavior.PrimaryNodeOnly;
 import org.apache.nifi.annotation.behavior.Stateful;
 import org.apache.nifi.annotation.behavior.TriggerSerially;
+import org.apache.nifi.annotation.configuration.DefaultSchedule;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.Tags;
 import org.apache.nifi.annotation.lifecycle.OnScheduled;
@@ -47,6 +48,7 @@
 import org.apache.nifi.processors.shopify.model.ShopifyResource;
 import org.apache.nifi.processors.shopify.rest.ShopifyRestService;
 import org.apache.nifi.processors.shopify.util.IncrementalTimers;
+import org.apache.nifi.scheduling.SchedulingStrategy;
 import org.apache.nifi.web.client.api.HttpResponseEntity;
 import org.apache.nifi.web.client.api.HttpResponseStatus;
 import org.apache.nifi.web.client.provider.api.WebClientServiceProvider;
@@ -75,6 +77,7 @@
 @Stateful(scopes = Scope.CLUSTER, description = "For a few resources the processor supports incremental loading." +
         " The list of the resources with the supported parameters can be found in the additional details.")
 @CapabilityDescription("Retrieves objects from a custom Shopify store. The processor yield time must be set to the account's rate limit accordingly.")
+@DefaultSchedule(strategy = SchedulingStrategy.TIMER_DRIVEN, period = "1 min")
 public class GetShopify extends AbstractProcessor {
 
     static final PropertyDescriptor STORE_DOMAIN = new PropertyDescriptor.Builder()

File: nifi-nar-bundles/nifi-smb-bundle/nifi-smb-processors/src/main/java/org/apache/nifi/processors/smb/ListSmb.java
Patch:
@@ -56,6 +56,7 @@
 import org.apache.nifi.annotation.behavior.TriggerSerially;
 import org.apache.nifi.annotation.behavior.WritesAttribute;
 import org.apache.nifi.annotation.behavior.WritesAttributes;
+import org.apache.nifi.annotation.configuration.DefaultSchedule;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.SeeAlso;
 import org.apache.nifi.annotation.documentation.Tags;
@@ -71,6 +72,7 @@
 import org.apache.nifi.processor.ProcessContext;
 import org.apache.nifi.processor.util.list.AbstractListProcessor;
 import org.apache.nifi.processor.util.list.ListedEntityTracker;
+import org.apache.nifi.scheduling.SchedulingStrategy;
 import org.apache.nifi.serialization.record.RecordSchema;
 import org.apache.nifi.services.smb.SmbClientProviderService;
 import org.apache.nifi.services.smb.SmbClientService;
@@ -114,6 +116,7 @@
         "After performing a listing of files, the state of the previous listing can be stored in order to list files "
                 + "continuously without duplication."
 )
+@DefaultSchedule(strategy = SchedulingStrategy.TIMER_DRIVEN, period = "1 min")
 public class ListSmb extends AbstractListProcessor<SmbListableEntity> {
 
     public static final PropertyDescriptor DIRECTORY = new PropertyDescriptor.Builder()

File: nifi-nar-bundles/nifi-solr-bundle/nifi-solr-processors/src/main/java/org/apache/nifi/processors/solr/GetSolr.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.nifi.annotation.behavior.InputRequirement;
 import org.apache.nifi.annotation.behavior.InputRequirement.Requirement;
 import org.apache.nifi.annotation.behavior.Stateful;
+import org.apache.nifi.annotation.configuration.DefaultSchedule;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.Tags;
 import org.apache.nifi.annotation.lifecycle.OnScheduled;
@@ -39,6 +40,7 @@
 import org.apache.nifi.processor.exception.ProcessException;
 import org.apache.nifi.processor.io.OutputStreamCallback;
 import org.apache.nifi.processor.util.StandardValidators;
+import org.apache.nifi.scheduling.SchedulingStrategy;
 import org.apache.nifi.schema.access.SchemaNotFoundException;
 import org.apache.nifi.serialization.RecordSetWriter;
 import org.apache.nifi.serialization.RecordSetWriterFactory;
@@ -93,6 +95,7 @@
 @InputRequirement(Requirement.INPUT_FORBIDDEN)
 @CapabilityDescription("Queries Solr and outputs the results as a FlowFile in the format of XML or using a Record Writer")
 @Stateful(scopes = {Scope.CLUSTER}, description = "Stores latest date of Date Field so that the same data will not be fetched multiple times.")
+@DefaultSchedule(strategy = SchedulingStrategy.TIMER_DRIVEN, period = "1 min")
 public class GetSolr extends SolrProcessor {
 
     public static final String STATE_MANAGER_FILTER = "stateManager_filter";

File: nifi-nar-bundles/nifi-solr-bundle/nifi-solr-processors/src/main/java/org/apache/nifi/processors/solr/QuerySolr.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.nifi.annotation.behavior.InputRequirement;
 import org.apache.nifi.annotation.behavior.WritesAttribute;
 import org.apache.nifi.annotation.behavior.WritesAttributes;
+import org.apache.nifi.annotation.configuration.DefaultSchedule;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.Tags;
 import org.apache.nifi.components.AllowableValue;
@@ -41,6 +42,7 @@
 import org.apache.nifi.processor.Relationship;
 import org.apache.nifi.processor.exception.ProcessException;
 import org.apache.nifi.processor.util.StandardValidators;
+import org.apache.nifi.scheduling.SchedulingStrategy;
 import org.apache.nifi.schema.access.SchemaNotFoundException;
 import org.apache.nifi.serialization.RecordSetWriter;
 import org.apache.nifi.serialization.RecordSetWriterFactory;
@@ -111,6 +113,7 @@
         @WritesAttribute(attribute = "querysolr.exeption.class", description = "The Java exception class raised when the processor fails"),
         @WritesAttribute(attribute = "querysolr.exeption.message", description = "The Java exception message raised when the processor fails")
 })
+@DefaultSchedule(strategy = SchedulingStrategy.TIMER_DRIVEN, period = "1 min")
 public class QuerySolr extends SolrProcessor {
 
     public static final AllowableValue MODE_XML = new AllowableValue("XML");

File: nifi-nar-bundles/nifi-splunk-bundle/nifi-splunk-processors/src/main/java/org/apache/nifi/processors/splunk/GetSplunk.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.nifi.annotation.behavior.TriggerSerially;
 import org.apache.nifi.annotation.behavior.WritesAttribute;
 import org.apache.nifi.annotation.behavior.WritesAttributes;
+import org.apache.nifi.annotation.configuration.DefaultSchedule;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.Tags;
 import org.apache.nifi.annotation.lifecycle.OnRemoved;
@@ -67,6 +68,7 @@
 import java.util.TimeZone;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
+import org.apache.nifi.scheduling.SchedulingStrategy;
 
 @TriggerSerially
 @InputRequirement(InputRequirement.Requirement.INPUT_FORBIDDEN)
@@ -80,6 +82,7 @@
 @Stateful(scopes = Scope.CLUSTER, description = "If using one of the managed Time Range Strategies, this processor will " +
         "store the values of the latest and earliest times from the previous execution so that the next execution of the " +
         "can pick up where the last execution left off. The state will be cleared and start over if the query is changed.")
+@DefaultSchedule(strategy = SchedulingStrategy.TIMER_DRIVEN, period = "1 min")
 public class GetSplunk extends AbstractProcessor {
 
     public static final String HTTP_SCHEME = "http";

File: nifi-nar-bundles/nifi-splunk-bundle/nifi-splunk-processors/src/main/java/org/apache/nifi/processors/splunk/QuerySplunkIndexingStatus.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.nifi.annotation.behavior.InputRequirement;
 import org.apache.nifi.annotation.behavior.ReadsAttribute;
 import org.apache.nifi.annotation.behavior.ReadsAttributes;
+import org.apache.nifi.annotation.configuration.DefaultSchedule;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.SeeAlso;
 import org.apache.nifi.annotation.documentation.Tags;
@@ -47,6 +48,7 @@
 import java.util.Optional;
 import java.util.Set;
 import java.util.concurrent.TimeUnit;
+import org.apache.nifi.scheduling.SchedulingStrategy;
 
 @InputRequirement(InputRequirement.Requirement.INPUT_REQUIRED)
 @Tags({"splunk", "logs", "http", "acknowledgement"})
@@ -55,6 +57,7 @@
         @ReadsAttribute(attribute = "splunk.acknowledgement.id", description = "The indexing acknowledgement id provided by Splunk."),
         @ReadsAttribute(attribute = "splunk.responded.at", description = "The time of the response of put request for Splunk.")})
 @SeeAlso(PutSplunkHTTP.class)
+@DefaultSchedule(strategy = SchedulingStrategy.TIMER_DRIVEN, period = "1 min")
 public class QuerySplunkIndexingStatus extends SplunkAPICall {
     private static final String ENDPOINT = "/services/collector/ack";
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/DetectDuplicate.java
Patch:
@@ -27,6 +27,7 @@
 import java.util.concurrent.TimeUnit;
 
 import org.apache.commons.lang3.StringUtils;
+import org.apache.nifi.annotation.behavior.DefaultRunDuration;
 import org.apache.nifi.annotation.behavior.EventDriven;
 import org.apache.nifi.annotation.behavior.InputRequirement;
 import org.apache.nifi.annotation.behavior.SupportsBatching;
@@ -53,7 +54,7 @@
 import org.apache.nifi.processor.util.StandardValidators;
 
 @EventDriven
-@SupportsBatching
+@SupportsBatching(defaultDuration = DefaultRunDuration.TWENTY_FIVE_MILLIS)
 @Tags({"hash", "dupe", "duplicate", "dedupe"})
 @InputRequirement(Requirement.INPUT_REQUIRED)
 @CapabilityDescription("Caches a value, computed from FlowFile attributes, for each incoming FlowFile and determines if the cached value has already been seen. "

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/DistributeLoad.java
Patch:
@@ -30,6 +30,7 @@
 import java.util.concurrent.atomic.AtomicReference;
 
 import org.apache.commons.lang3.StringUtils;
+import org.apache.nifi.annotation.behavior.DefaultRunDuration;
 import org.apache.nifi.annotation.behavior.DynamicProperty;
 import org.apache.nifi.annotation.behavior.DynamicRelationship;
 import org.apache.nifi.annotation.behavior.EventDriven;
@@ -61,7 +62,7 @@
 
 @EventDriven
 @SideEffectFree
-@SupportsBatching
+@SupportsBatching(defaultDuration = DefaultRunDuration.TWENTY_FIVE_MILLIS)
 @InputRequirement(Requirement.INPUT_REQUIRED)
 @TriggerWhenAnyDestinationAvailable
 @Tags({"distribute", "load balance", "route", "round robin", "weighted"})

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ForkEnrichment.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.nifi.processors.standard;
 
+import org.apache.nifi.annotation.behavior.DefaultRunDuration;
 import org.apache.nifi.annotation.behavior.InputRequirement;
 import org.apache.nifi.annotation.behavior.SideEffectFree;
 import org.apache.nifi.annotation.behavior.SupportsBatching;
@@ -41,7 +42,7 @@
 import java.util.Set;
 import java.util.UUID;
 
-@SupportsBatching
+@SupportsBatching(defaultDuration = DefaultRunDuration.TWENTY_FIVE_MILLIS)
 @SideEffectFree
 @SeeAlso(JoinEnrichment.class)
 @WritesAttributes({

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/GenerateFlowFile.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.nifi.annotation.behavior.InputRequirement;
 import org.apache.nifi.annotation.behavior.InputRequirement.Requirement;
 import org.apache.nifi.annotation.behavior.SupportsBatching;
+import org.apache.nifi.annotation.configuration.DefaultSchedule;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.Tags;
 import org.apache.nifi.annotation.lifecycle.OnScheduled;
@@ -52,6 +53,7 @@
 import org.apache.nifi.processor.Relationship;
 import org.apache.nifi.processor.io.OutputStreamCallback;
 import org.apache.nifi.processor.util.StandardValidators;
+import org.apache.nifi.scheduling.SchedulingStrategy;
 
 @SupportsBatching
 @Tags({"test", "random", "generate", "load"})
@@ -62,6 +64,7 @@
         expressionLanguageScope = ExpressionLanguageScope.VARIABLE_REGISTRY,
         description = "Specifies an attribute on generated FlowFiles defined by the Dynamic Property's key and value." +
         " If Expression Language is used, evaluation will be performed only once per batch of generated FlowFiles.")
+@DefaultSchedule(strategy = SchedulingStrategy.TIMER_DRIVEN, period = "1 min")
 public class GenerateFlowFile extends AbstractProcessor {
 
     private final AtomicReference<byte[]> data = new AtomicReference<>();

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/HashAttribute.java
Patch:
@@ -30,6 +30,7 @@
 import java.util.regex.Pattern;
 import org.apache.commons.codec.digest.DigestUtils;
 import org.apache.commons.lang3.StringUtils;
+import org.apache.nifi.annotation.behavior.DefaultRunDuration;
 import org.apache.nifi.annotation.behavior.DynamicProperty;
 import org.apache.nifi.annotation.behavior.EventDriven;
 import org.apache.nifi.annotation.behavior.InputRequirement;
@@ -98,7 +99,7 @@
  */
 @EventDriven
 @SideEffectFree
-@SupportsBatching
+@SupportsBatching(defaultDuration = DefaultRunDuration.TWENTY_FIVE_MILLIS)
 @Tags({"attributes", "hash"})
 @InputRequirement(Requirement.INPUT_REQUIRED)
 @CapabilityDescription("Hashes together the key/value pairs of several flowfile attributes and adds the hash as a new attribute. "

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ListDatabaseTables.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.nifi.annotation.behavior.TriggerSerially;
 import org.apache.nifi.annotation.behavior.WritesAttribute;
 import org.apache.nifi.annotation.behavior.WritesAttributes;
+import org.apache.nifi.annotation.configuration.DefaultSchedule;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.Tags;
 import org.apache.nifi.components.PropertyDescriptor;
@@ -37,6 +38,7 @@
 import org.apache.nifi.processor.Relationship;
 import org.apache.nifi.processor.exception.ProcessException;
 import org.apache.nifi.processor.util.StandardValidators;
+import org.apache.nifi.scheduling.SchedulingStrategy;
 import org.apache.nifi.schema.access.SchemaNotFoundException;
 import org.apache.nifi.serialization.RecordSetWriter;
 import org.apache.nifi.serialization.RecordSetWriterFactory;
@@ -92,6 +94,7 @@
         + "This allows the Processor to not re-list tables the next time that the Processor is run. Specifying the refresh interval in the processor properties will "
         + "indicate that when the processor detects the interval has elapsed, the state will be reset and tables will be re-listed as a result. "
         + "This processor is meant to be run on the primary node only.")
+@DefaultSchedule(strategy = SchedulingStrategy.TIMER_DRIVEN, period = "1 min")
 public class ListDatabaseTables extends AbstractProcessor {
 
     // Attribute names

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ListFTP.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.nifi.annotation.behavior.TriggerSerially;
 import org.apache.nifi.annotation.behavior.WritesAttribute;
 import org.apache.nifi.annotation.behavior.WritesAttributes;
+import org.apache.nifi.annotation.configuration.DefaultSchedule;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.SeeAlso;
 import org.apache.nifi.annotation.documentation.Tags;
@@ -40,6 +41,7 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
+import org.apache.nifi.scheduling.SchedulingStrategy;
 
 @PrimaryNodeOnly
 @TriggerSerially
@@ -65,6 +67,7 @@
     + "This allows the Processor to list only files that have been added or modified after "
     + "this date the next time that the Processor is run. State is stored across the cluster so that this Processor can be run on Primary Node only and if "
     + "a new Primary Node is selected, the new node will not duplicate the data that was listed by the previous Primary Node.")
+@DefaultSchedule(strategy = SchedulingStrategy.TIMER_DRIVEN, period = "1 min")
 public class ListFTP extends ListFileTransfer {
 
     @Override

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ListFile.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.nifi.annotation.behavior.TriggerSerially;
 import org.apache.nifi.annotation.behavior.WritesAttribute;
 import org.apache.nifi.annotation.behavior.WritesAttributes;
+import org.apache.nifi.annotation.configuration.DefaultSchedule;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.SeeAlso;
 import org.apache.nifi.annotation.documentation.Tags;
@@ -44,6 +45,7 @@
 import org.apache.nifi.processor.util.list.AbstractListProcessor;
 import org.apache.nifi.processor.util.list.ListedEntityTracker;
 import org.apache.nifi.processors.standard.util.FileInfo;
+import org.apache.nifi.scheduling.SchedulingStrategy;
 import org.apache.nifi.serialization.record.RecordSchema;
 import org.apache.nifi.util.Tuple;
 
@@ -126,6 +128,7 @@
     + "This allows the Processor to list only files that have been added or modified after "
     + "this date the next time that the Processor is run. Whether the state is stored with a Local or Cluster scope depends on the value of the "
     + "<Input Directory Location> property.")
+@DefaultSchedule(strategy = SchedulingStrategy.TIMER_DRIVEN, period = "1 min")
 public class ListFile extends AbstractListProcessor<FileInfo> {
     static final AllowableValue LOCATION_LOCAL = new AllowableValue("Local", "Local", "Input Directory is located on a local disk. State will be stored locally on each node in the cluster.");
     static final AllowableValue LOCATION_REMOTE = new AllowableValue("Remote", "Remote", "Input Directory is located on a remote system. State will be stored across the cluster so that "

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ListSFTP.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.nifi.annotation.behavior.TriggerSerially;
 import org.apache.nifi.annotation.behavior.WritesAttribute;
 import org.apache.nifi.annotation.behavior.WritesAttributes;
+import org.apache.nifi.annotation.configuration.DefaultSchedule;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.SeeAlso;
 import org.apache.nifi.annotation.documentation.Tags;
@@ -48,6 +49,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.function.Predicate;
 import java.util.stream.Collectors;
+import org.apache.nifi.scheduling.SchedulingStrategy;
 
 @PrimaryNodeOnly
 @TriggerSerially
@@ -74,6 +76,7 @@
     + "This allows the Processor to list only files that have been added or modified after "
     + "this date the next time that the Processor is run. State is stored across the cluster so that this Processor can be run on Primary Node only and if "
     + "a new Primary Node is selected, the new node will not duplicate the data that was listed by the previous Primary Node.")
+@DefaultSchedule(strategy = SchedulingStrategy.TIMER_DRIVEN, period = "1 min")
 public class ListSFTP extends ListFileTransfer {
 
     private volatile Predicate<FileInfo> fileFilter;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/LogAttribute.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang3.StringUtils;
+import org.apache.nifi.annotation.behavior.DefaultRunDuration;
 import org.apache.nifi.annotation.behavior.EventDriven;
 import org.apache.nifi.annotation.behavior.InputRequirement;
 import org.apache.nifi.annotation.behavior.InputRequirement.Requirement;
@@ -58,7 +59,7 @@
 
 @EventDriven
 @SideEffectFree
-@SupportsBatching
+@SupportsBatching(defaultDuration = DefaultRunDuration.TWENTY_FIVE_MILLIS)
 @Tags({"attributes", "logging"})
 @InputRequirement(Requirement.INPUT_REQUIRED)
 @CapabilityDescription("Emits attributes of the FlowFile at the specified log level")

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/LogMessage.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.nifi.processors.standard;
 
+import org.apache.nifi.annotation.behavior.DefaultRunDuration;
 import org.apache.nifi.annotation.behavior.EventDriven;
 import org.apache.nifi.annotation.behavior.InputRequirement;
 import org.apache.nifi.annotation.behavior.InputRequirement.Requirement;
@@ -45,7 +46,7 @@
 
 @EventDriven
 @SideEffectFree
-@SupportsBatching
+@SupportsBatching(defaultDuration = DefaultRunDuration.TWENTY_FIVE_MILLIS)
 @Tags({"attributes", "logging"})
 @InputRequirement(Requirement.INPUT_REQUIRED)
 @CapabilityDescription("Emits a log message at the specified log level")

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/QueryDatabaseTable.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.nifi.annotation.behavior.TriggerSerially;
 import org.apache.nifi.annotation.behavior.WritesAttribute;
 import org.apache.nifi.annotation.behavior.WritesAttributes;
+import org.apache.nifi.annotation.configuration.DefaultSchedule;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.SeeAlso;
 import org.apache.nifi.annotation.documentation.Tags;
@@ -35,6 +36,7 @@
 import org.apache.nifi.processor.Relationship;
 import org.apache.nifi.processors.standard.sql.DefaultAvroSqlWriter;
 import org.apache.nifi.processors.standard.sql.SqlWriter;
+import org.apache.nifi.scheduling.SchedulingStrategy;
 import org.apache.nifi.util.db.JdbcCommon;
 
 import java.util.ArrayList;
@@ -85,6 +87,7 @@
         expressionLanguageScope = ExpressionLanguageScope.VARIABLE_REGISTRY, description = "Specifies an initial max value for max value column(s). Properties should "
         + "be added in the format `initial.maxvalue.<max_value_column>`. This value is only used the first time the table is accessed (when a Maximum Value Column is specified).")
 @PrimaryNodeOnly
+@DefaultSchedule(strategy = SchedulingStrategy.TIMER_DRIVEN, period = "1 min")
 public class QueryDatabaseTable extends AbstractQueryDatabaseTable {
 
     public QueryDatabaseTable() {

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/QueryDatabaseTableRecord.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.nifi.annotation.behavior.TriggerSerially;
 import org.apache.nifi.annotation.behavior.WritesAttribute;
 import org.apache.nifi.annotation.behavior.WritesAttributes;
+import org.apache.nifi.annotation.configuration.DefaultSchedule;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.SeeAlso;
 import org.apache.nifi.annotation.documentation.Tags;
@@ -35,6 +36,7 @@
 import org.apache.nifi.processor.Relationship;
 import org.apache.nifi.processors.standard.sql.RecordSqlWriter;
 import org.apache.nifi.processors.standard.sql.SqlWriter;
+import org.apache.nifi.scheduling.SchedulingStrategy;
 import org.apache.nifi.serialization.RecordSetWriterFactory;
 import org.apache.nifi.util.db.JdbcCommon;
 
@@ -88,6 +90,7 @@
         expressionLanguageScope = ExpressionLanguageScope.VARIABLE_REGISTRY, description = "Specifies an initial max value for max value column(s). Properties should "
         + "be added in the format `initial.maxvalue.<max_value_column>`. This value is only used the first time the table is accessed (when a Maximum Value Column is specified).")
 @PrimaryNodeOnly
+@DefaultSchedule(strategy = SchedulingStrategy.TIMER_DRIVEN, period = "1 min")
 public class QueryDatabaseTableRecord extends AbstractQueryDatabaseTable {
 
     public static final PropertyDescriptor RECORD_WRITER_FACTORY = new PropertyDescriptor.Builder()

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/RouteOnAttribute.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.atomic.AtomicReference;
+import org.apache.nifi.annotation.behavior.DefaultRunDuration;
 import org.apache.nifi.annotation.behavior.DynamicProperty;
 import org.apache.nifi.annotation.behavior.DynamicRelationship;
 import org.apache.nifi.annotation.behavior.EventDriven;
@@ -62,7 +63,7 @@
  */
 @EventDriven
 @SideEffectFree
-@SupportsBatching
+@SupportsBatching(defaultDuration = DefaultRunDuration.TWENTY_FIVE_MILLIS)
 @InputRequirement(Requirement.INPUT_REQUIRED)
 @Tags({"attributes", "routing", "Attribute Expression Language", "regexp", "regex", "Regular Expression", "Expression Language", "find", "text", "string", "search", "filter", "detect"})
 @CapabilityDescription("Routes FlowFiles based on their Attributes using the Attribute Expression Language")

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/TailFile.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.nifi.annotation.behavior.Stateful;
 import org.apache.nifi.annotation.behavior.TriggerSerially;
 import org.apache.nifi.annotation.behavior.WritesAttribute;
+import org.apache.nifi.annotation.configuration.DefaultSchedule;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.Tags;
 import org.apache.nifi.annotation.lifecycle.OnScheduled;
@@ -50,6 +51,7 @@
 import org.apache.nifi.processor.io.OutputStreamCallback;
 import org.apache.nifi.processor.util.StandardValidators;
 import org.apache.nifi.processors.standard.TailFile.TailFileState.StateKeys;
+import org.apache.nifi.scheduling.SchedulingStrategy;
 import org.apache.nifi.stream.io.NullOutputStream;
 import org.apache.nifi.stream.io.StreamUtils;
 
@@ -112,6 +114,7 @@
                         explanation = "Provides operator the ability to read from any file that NiFi has access to.")
         }
 )
+@DefaultSchedule(strategy = SchedulingStrategy.TIMER_DRIVEN, period = "30 sec")
 public class TailFile extends AbstractProcessor {
 
     static final String MAP_PREFIX = "file.";

File: nifi-nar-bundles/nifi-update-attribute-bundle/nifi-update-attribute-processor/src/main/java/org/apache/nifi/processors/attributes/UpdateAttribute.java
Patch:
@@ -19,6 +19,7 @@
 import com.github.benmanes.caffeine.cache.Caffeine;
 import com.github.benmanes.caffeine.cache.LoadingCache;
 import org.apache.commons.lang3.StringUtils;
+import org.apache.nifi.annotation.behavior.DefaultRunDuration;
 import org.apache.nifi.annotation.behavior.DynamicProperty;
 import org.apache.nifi.annotation.behavior.EventDriven;
 import org.apache.nifi.annotation.behavior.InputRequirement;
@@ -78,7 +79,7 @@
 
 @EventDriven
 @SideEffectFree
-@SupportsBatching
+@SupportsBatching(defaultDuration = DefaultRunDuration.TWENTY_FIVE_MILLIS)
 @InputRequirement(Requirement.INPUT_REQUIRED)
 @Tags({"attributes", "modification", "update", "delete", "Attribute Expression Language", "state"})
 @CapabilityDescription("Updates the Attributes for a FlowFile by using the Attribute Expression Language and/or deletes the attributes based on a regular expression")

File: nifi-nar-bundles/nifi-zendesk-bundle/nifi-zendesk-processors/src/main/java/org/apache/nifi/processors/zendesk/GetZendesk.java
Patch:
@@ -59,6 +59,7 @@
 import org.apache.nifi.annotation.behavior.TriggerSerially;
 import org.apache.nifi.annotation.behavior.WritesAttribute;
 import org.apache.nifi.annotation.behavior.WritesAttributes;
+import org.apache.nifi.annotation.configuration.DefaultSchedule;
 import org.apache.nifi.annotation.configuration.DefaultSettings;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.Tags;
@@ -73,6 +74,7 @@
 import org.apache.nifi.processor.Relationship;
 import org.apache.nifi.processor.exception.ProcessException;
 import org.apache.nifi.processor.io.OutputStreamCallback;
+import org.apache.nifi.scheduling.SchedulingStrategy;
 import org.apache.nifi.web.client.api.HttpResponseEntity;
 import org.apache.nifi.web.client.api.HttpUriBuilder;
 import org.apache.nifi.web.client.provider.api.WebClientServiceProvider;
@@ -86,6 +88,7 @@
 @Stateful(scopes = CLUSTER, description = "Paging cursor for Zendesk API is stored. Cursor is updated after each successful request.")
 @WritesAttributes({
     @WritesAttribute(attribute = RECORD_COUNT_ATTRIBUTE_NAME, description = "The number of records fetched by the processor.")})
+@DefaultSchedule(strategy = SchedulingStrategy.TIMER_DRIVEN, period = "1 min")
 public class GetZendesk extends AbstractProcessor {
 
     static final int HTTP_TOO_MANY_REQUESTS = 429;

File: c2/c2-client-bundle/c2-client-service/src/main/java/org/apache/nifi/c2/client/service/operation/DebugOperationHandler.java
Patch:
@@ -34,6 +34,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.io.UncheckedIOException;
+import java.nio.charset.Charset;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
@@ -156,12 +157,13 @@ private List<Path> filterContent(String operationId, List<Path> bundleFilePaths)
         List<Path> contentFilteredFilePaths = new ArrayList<>();
         for (Path path : bundleFilePaths) {
             String fileName = path.getFileName().toString();
-            try (Stream<String> fileStream = lines(path)) {
+            try (Stream<String> fileStream = lines(path, Charset.defaultCharset())) {
                 Path tempDirectory = createTempDirectory(operationId);
                 Path tempFile = Paths.get(tempDirectory.toAbsolutePath().toString(), fileName);
                 Files.write(tempFile, (Iterable<String>) fileStream.filter(contentFilter)::iterator);
                 contentFilteredFilePaths.add(tempFile);
             } catch (IOException e) {
+                LOG.error("Error during filtering file content: " + path.toAbsolutePath(), e);
                 throw new UncheckedIOException(e);
             }
         }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/flow/synchronization/StandardVersionedComponentSynchronizer.java
Patch:
@@ -2640,7 +2640,7 @@ private boolean stopOrTerminate(final ProcessorNode processor, final long timeou
     }
 
     private boolean stopProcessor(final ProcessorNode processor, final long timeout) throws FlowSynchronizationException, TimeoutException {
-        if (!processor.isRunning()) {
+        if (!processor.isRunning() && processor.getPhysicalScheduledState() != ScheduledState.STARTING) {
             return false;
         }
 

File: nifi-commons/nifi-record/src/main/java/org/apache/nifi/serialization/record/util/DataTypeUtils.java
Patch:
@@ -2131,6 +2131,8 @@ public static int getSQLTypeValue(final DataType dataType) {
                 return Types.SMALLINT;
             case STRING:
                 return Types.VARCHAR;
+            case ENUM:
+                return Types.OTHER;
             case TIME:
                 return Types.TIME;
             case TIMESTAMP:

File: nifi-nar-bundles/nifi-mqtt-bundle/nifi-mqtt-processors/src/main/java/org/apache/nifi/processors/mqtt/ConsumeMQTT.java
Patch:
@@ -431,8 +431,10 @@ private void transferQueueDemarcator(final ProcessContext context, final Process
             int i = 0;
             while (!mqttQueue.isEmpty() && i < MAX_MESSAGES_PER_FLOW_FILE) {
                 final ReceivedMqttMessage mqttMessage = mqttQueue.poll();
+                if (i > 0) {
+                    out.write(demarcator);
+                }
                 out.write(mqttMessage.getPayload() == null ? new byte[0] : mqttMessage.getPayload());
-                out.write(demarcator);
                 session.adjustCounter(COUNTER_RECORDS_RECEIVED, 1L, false);
                 i++;
             }

File: nifi-nar-bundles/nifi-mqtt-bundle/nifi-mqtt-processors/src/test/java/org/apache/nifi/processors/mqtt/TestConsumeMQTT.java
Patch:
@@ -516,7 +516,7 @@ public void testConsumeDemarcator() throws Exception {
         assertEquals(flowFiles.size(), 1);
         assertEquals("{\"name\":\"Apache NiFi\"}\\n"
                         + THIS_IS_NOT_JSON + "\\n"
-                        + "{\"name\":\"Apache NiFi\"}\\n",
+                        + "{\"name\":\"Apache NiFi\"}",
                 new String(flowFiles.get(0).toByteArray()));
 
         final List<MockFlowFile> badFlowFiles = testRunner.getFlowFilesForRelationship(ConsumeMQTT.REL_PARSE_FAILURE);

File: nifi-nar-bundles/nifi-hubspot-bundle/nifi-hubspot-processors/src/main/java/org/apache/nifi/processors/hubspot/GetHubSpot.java
Patch:
@@ -201,7 +201,7 @@ public Set<Relationship> getRelationships() {
 
     @Override
     public void onPropertyModified(final PropertyDescriptor descriptor, final String oldValue, final String newValue) {
-        if (OBJECT_TYPE.equals(descriptor) || IS_INCREMENTAL.equals(descriptor)) {
+        if (isConfigurationRestored() && (OBJECT_TYPE.equals(descriptor) || IS_INCREMENTAL.equals(descriptor))) {
             isObjectTypeModified = true;
         }
     }

File: nifi-nar-bundles/nifi-shopify-bundle/nifi-shopify-processors/src/main/java/org/apache/nifi/processors/shopify/GetShopify.java
Patch:
@@ -231,7 +231,7 @@ private static List<PropertyDescriptor> createPropertyDescriptors() {
     private volatile boolean isResetState;
 
     public void onPropertyModified(final PropertyDescriptor descriptor, final String oldValue, final String newValue) {
-        if (RESET_STATE_PROPERTY_NAMES.contains(descriptor.getName())) {
+        if (isConfigurationRestored() && RESET_STATE_PROPERTY_NAMES.contains(descriptor.getName())) {
             isResetState = true;
         }
     }

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/s3/ListS3.java
Patch:
@@ -181,7 +181,7 @@ public class ListS3 extends AbstractS3Processor implements VerifiableProcessor {
             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)
             .required(false)
             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)
-            .description("The prefix used to filter the object list. In most cases, it should end with a forward slash ('/').")
+            .description("The prefix used to filter the object list. Do not begin with a forward slash '/'. In most cases, it should end with a forward slash '/'.")
             .build();
 
     public static final PropertyDescriptor USE_VERSIONS = new Builder()

File: minifi/minifi-c2/minifi-c2-integration-tests/src/test/java/org/apache/nifi/minifi/c2/integration/test/AbstractTestUnsecure.java
Patch:
@@ -36,7 +36,7 @@ public abstract class AbstractTestUnsecure {
     protected String c2Url;
 
     public static String getUnsecureConfigUrl(Container container) {
-        DockerPort dockerPort = container.port(10080);
+        DockerPort dockerPort = container.port(10090);
         return "http://" + dockerPort.getIp() + ":" + dockerPort.getExternalPort() + "/c2/config";
     }
 

File: minifi/minifi-c2/minifi-c2-jetty/src/main/java/org/apache/nifi/minifi/c2/jetty/JettyServer.java
Patch:
@@ -56,7 +56,7 @@ public static void main(String[] args) throws Exception {
         }
 
         Server server;
-        int port = Integer.parseInt(properties.getProperty("minifi.c2.server.port", "10080"));
+        int port = Integer.parseInt(properties.getProperty("minifi.c2.server.port", "10090"));
         if (properties.isSecure()) {
             SslContextFactory sslContextFactory = properties.getSslContextFactory();
             HttpConfiguration config = new HttpConfiguration();

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-reporting-task/src/test/java/org/apache/nifi/reporting/azure/loganalytics/TestAzureLogAnalyticsProvenanceReportingTask.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -64,12 +64,12 @@ public void testAddField2() {
         final Map<String, Object> config = Collections.emptyMap();
         final JsonBuilderFactory factory = Json.createBuilderFactory(config);
         final JsonObjectBuilder builder = factory.createObjectBuilder();
-        Map<String, String> values = new HashMap<String, String>();
+        Map<String, String> values = new LinkedHashMap<String, String>();
         values.put("TestKeyString1", "StringValue1");
         values.put("TestKeyString2", "StringValue2");
         AzureLogAnalyticsProvenanceReportingTask.addField(builder, factory, "TestKeyString", values, true);
         javax.json.JsonObject actualJson = builder.build();
-        String expectedjsonString = "{\"TestKeyString\":{\"TestKeyString2\":\"StringValue2\",\"TestKeyString1\":\"StringValue1\"}}";
+        String expectedjsonString = "{\"TestKeyString\":{\"TestKeyString1\":\"StringValue1\",\"TestKeyString2\":\"StringValue2\"}}";
         JsonObject expectedJson = new Gson().fromJson(expectedjsonString, JsonObject.class);
         assertEquals(expectedJson.toString(), actualJson.toString());
     }

File: nifi-nar-bundles/nifi-standard-services/nifi-distributed-cache-services-bundle/nifi-distributed-cache-server/src/test/java/org/apache/nifi/distributed/cache/server/map/DistributedMapCacheTest.java
Patch:
@@ -36,7 +36,7 @@
 import java.io.OutputStream;
 import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
-import java.util.HashSet;
+import java.util.LinkedHashSet;
 import java.util.Map;
 import java.util.Set;
 
@@ -149,7 +149,7 @@ public void testSubMap() throws IOException {
         for (int i = 0; (i < 3); ++i) {
             client.put(key + i, value + i, serializer, serializer);
         }
-        final Set<String> keys = new HashSet<>(Arrays.asList("keySubMap0", "keySubMap1", "keySubMap2"));
+        final Set<String> keys = new LinkedHashSet<>(Arrays.asList("keySubMap0", "keySubMap1", "keySubMap2"));
         final Map<String, String> subMap = client.subMap(keys, serializer, deserializer);
         assertEquals(3, subMap.size());
         for (int i = 0; (i < 3); ++i) {

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/main/java/org/apache/nifi/processors/azure/storage/PutAzureDataLakeStorage.java
Patch:
@@ -215,7 +215,8 @@ static void uploadContent(DataLakeFileClient fileClient, InputStream in, long le
             chunkStart += chunkSize;
         }
 
-        fileClient.flush(length);
+        // use overwrite mode due to https://github.com/Azure/azure-sdk-for-java/issues/31248
+        fileClient.flush(length, true);
     }
 
     //Visible for testing

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/controller/parameter/StandardParameterProviderNode.java
Patch:
@@ -277,8 +277,8 @@ public void fetchParameters() {
         List<ParameterGroup> fetchedParameterGroups;
         try (final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(getExtensionManager(), parameterProvider.getClass(), parameterProvider.getIdentifier())) {
             fetchedParameterGroups = parameterProvider.fetchParameters(configurationContext);
-        } catch (final IOException e) {
-            throw new RuntimeException(String.format("Error fetching parameters for %s", this), e);
+        } catch (final IOException | RuntimeException e) {
+            throw new IllegalStateException(String.format("Error fetching parameters for %s: %s", this, e.getMessage()), e);
         }
 
         if (fetchedParameterGroups == null || fetchedParameterGroups.isEmpty()) {

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/db/impl/Oracle12DatabaseAdapter.java
Patch:
@@ -150,7 +150,8 @@ private List<String> getConflictColumnsClause(Collection<String> uniqueKeyColumn
                         uniqueKey -> column.equalsIgnoreCase(getColumnAssignment(table, uniqueKey, newTableAlias))))
                 .collect(Collectors.toList());
 
-        if (conflictColumnsClause.isEmpty()) {
+        // Compare list sizes instead of emptyness
+        if (conflictColumnsClause.size() != uniqueKeyColumnNames.size()) {
 
             // Try it with normalized columns
             conflictColumnsClause = conflictColumns.stream()

File: nifi-nar-bundles/nifi-flow-registry-client-bundle/nifi-flow-registry-client-services/src/main/java/org/apache/nifi/registry/flow/NifiRegistryFlowRegistryClient.java
Patch:
@@ -133,7 +133,7 @@ protected Collection<ValidationResult> customValidate(final ValidationContext co
             final SSLContextService sslContextService = context.getProperty(SSL_CONTEXT_SERVICE).asControllerService(SSLContextService.class);
 
 
-            if (!(sslContextService.isTrustStoreConfigured() ^ sslContextService.isKeyStoreConfigured())) {
+            if (sslContextService.isTrustStoreConfigured() ^ sslContextService.isKeyStoreConfigured()) {
                 result.add(new ValidationResult.Builder().subject(this.getClass().getSimpleName())
                     .valid(false)
                     .explanation("It is expected to either set all the properties for the SSLContext or set none")

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/command/nifi/params/SetParam.java
Patch:
@@ -33,6 +33,7 @@
 
 import java.io.IOException;
 import java.util.Collections;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.Properties;
 
@@ -88,7 +89,7 @@ public VoidResult doExecute(final NiFiClient client, final Properties properties
             throw new IllegalArgumentException("A parameter value is required when creating a new parameter");
         }
 
-        if (existingParam.isPresent() && existingParam.get().getValue().equals(paramValue)) {
+        if (existingParam.isPresent() && Objects.equals(existingParam.get().getValue(), paramValue)) {
             throw new IllegalArgumentException(String.format("Parameter value supplied for parameter [%s] is the same as its current value", paramName));
         }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/service/GhostControllerService.java
Patch:
@@ -47,7 +47,7 @@ public Collection<ValidationResult> validate(final ValidationContext context) {
             .input("Any Property")
             .subject("Missing Controller Service")
             .valid(false)
-            .explanation("Controller Service is of type " + canonicalClassName + ", but this is not a valid Reporting Task type")
+            .explanation("Controller Service is of type " + canonicalClassName + ", but this is not a valid Controller Service type")
             .build());
     }
 

File: nifi-api/src/main/java/org/apache/nifi/annotation/behavior/SupportsBatching.java
Patch:
@@ -41,11 +41,13 @@
  * ProcessSession.commit() to ensure data is persisted before deleting the data
  * from a remote source.
  *
+ * When the defaultDuration parameter is set, the processor is created with the supplied duration time, which can be adjusted afterwards.
+ * The supplied values can be selected from {@link org.apache.nifi.annotation.behavior.DefaultRunDuration}.
  */
 @Documented
 @Target({ElementType.TYPE})
 @Retention(RetentionPolicy.RUNTIME)
 @Inherited
 public @interface SupportsBatching {
-
+    DefaultRunDuration defaultDuration() default DefaultRunDuration.NO_BATCHING;
 }

File: c2/c2-protocol/c2-protocol-api/src/main/java/org/apache/nifi/c2/protocol/api/OperandType.java
Patch:
@@ -39,4 +39,3 @@ public String toString() {
         return super.toString().toLowerCase();
     }
 }
-

File: minifi/minifi-c2/minifi-c2-service/src/main/java/org/apache/nifi/minifi/c2/service/ConfigService.java
Patch:
@@ -228,8 +228,8 @@ public Response heartbeat(
                 try {
                     configuration = configurationProviderValue.getConfiguration();
                 } catch (ConfigurationProviderException cpe) {
-                    logger.warn("No flow available for agent class " + agentClass + ", returning No Content (204)");
-                    response = Response.noContent().build();
+                    logger.warn("No flow available for agent class " + agentClass + ", returning OK (200) with no update request");
+                    response = Response.ok(new C2HeartbeatResponse()).build();
                     return response;
                 }
                 try (InputStream inputStream = configuration.getInputStream();

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/lookup/script/BaseScriptedLookupService.java
Patch:
@@ -241,9 +241,9 @@ public void onDisabled(final ConfigurationContext context) {
     public void setup() {
         if (scriptNeedsReload.get() || lookupService.get() == null) {
             if (ScriptingComponentHelper.isFile(scriptingComponentHelper.getScriptPath())) {
-                scriptNeedsReload.set(reloadScriptFile(scriptingComponentHelper.getScriptPath()));
+                scriptNeedsReload.set(!reloadScriptFile(scriptingComponentHelper.getScriptPath()));
             } else {
-                scriptNeedsReload.set(reloadScriptBody(scriptingComponentHelper.getScriptBody()));
+                scriptNeedsReload.set(!reloadScriptBody(scriptingComponentHelper.getScriptBody()));
             }
         }
     }

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/processors/script/InvokeScriptedProcessor.java
Patch:
@@ -225,9 +225,9 @@ public void onConfigurationRestored(final ProcessContext context) {
     public void setup() {
         if (scriptNeedsReload.get() || processor.get() == null) {
             if (ScriptingComponentHelper.isFile(scriptingComponentHelper.getScriptPath())) {
-                scriptNeedsReload.set(reloadScriptFile(scriptingComponentHelper.getScriptPath()));
+                scriptNeedsReload.set(!reloadScriptFile(scriptingComponentHelper.getScriptPath()));
             } else {
-                scriptNeedsReload.set(reloadScriptBody(scriptingComponentHelper.getScriptBody()));
+                scriptNeedsReload.set(!reloadScriptBody(scriptingComponentHelper.getScriptBody()));
             }
         }
     }

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/record/sink/script/ScriptedRecordSink.java
Patch:
@@ -107,9 +107,9 @@ protected Collection<ValidationResult> customValidate(ValidationContext validati
     public void setup() {
         if (scriptNeedsReload.get() || recordSink.get() == null) {
             if (ScriptingComponentHelper.isFile(scriptingComponentHelper.getScriptPath())) {
-                scriptNeedsReload.set(reloadScriptFile(scriptingComponentHelper.getScriptPath()));
+                scriptNeedsReload.set(!reloadScriptFile(scriptingComponentHelper.getScriptPath()));
             } else {
-                scriptNeedsReload.set(reloadScriptBody(scriptingComponentHelper.getScriptBody()));
+                scriptNeedsReload.set(!reloadScriptBody(scriptingComponentHelper.getScriptBody()));
             }
         }
     }

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/rules/engine/script/ScriptedRulesEngine.java
Patch:
@@ -78,9 +78,9 @@ protected List<PropertyDescriptor> getSupportedPropertyDescriptors() {
     public void setup() {
         if (scriptNeedsReload.get() || rulesEngine.get() == null) {
             if (ScriptingComponentHelper.isFile(scriptingComponentHelper.getScriptPath())) {
-                scriptNeedsReload.set(reloadScriptFile(scriptingComponentHelper.getScriptPath()));
+                scriptNeedsReload.set(!reloadScriptFile(scriptingComponentHelper.getScriptPath()));
             } else {
-                scriptNeedsReload.set(reloadScriptBody(scriptingComponentHelper.getScriptBody()));
+                scriptNeedsReload.set(!reloadScriptBody(scriptingComponentHelper.getScriptBody()));
             }
         }
     }

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/rules/handlers/script/ScriptedActionHandler.java
Patch:
@@ -80,9 +80,9 @@ protected List<PropertyDescriptor> getSupportedPropertyDescriptors() {
     public void setup() {
         if (scriptNeedsReload.get() || actionHandler.get() == null) {
             if (ScriptingComponentHelper.isFile(scriptingComponentHelper.getScriptPath())) {
-                scriptNeedsReload.set(reloadScriptFile(scriptingComponentHelper.getScriptPath()));
+                scriptNeedsReload.set(!reloadScriptFile(scriptingComponentHelper.getScriptPath()));
             } else {
-                scriptNeedsReload.set(reloadScriptBody(scriptingComponentHelper.getScriptBody()));
+                scriptNeedsReload.set(!reloadScriptBody(scriptingComponentHelper.getScriptBody()));
             }
         }
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/integration/FrameworkIntegrationTest.java
Patch:
@@ -409,7 +409,9 @@ protected final ProcessorNode createProcessorNode(final String processorType, fi
         final String uuid = getSimpleTypeName(processorType) + "-" + UUID.randomUUID().toString();
         final BundleCoordinate bundleCoordinate = SystemBundle.SYSTEM_BUNDLE_COORDINATE;
         final ProcessorNode procNode = flowController.getFlowManager().createProcessor(processorType, uuid, bundleCoordinate, Collections.emptySet(), true, true, null);
-        destination.addProcessor(procNode);
+        if (destination != null) {
+            destination.addProcessor(procNode);
+        }
 
         return procNode;
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ApplicationResource.java
Patch:
@@ -371,7 +371,7 @@ private String getFirstHeaderValue(final String... keys) {
      */
     protected boolean isTwoPhaseRequest(final HttpServletRequest httpServletRequest) {
         final String transactionId = httpServletRequest.getHeader(RequestReplicator.REQUEST_TRANSACTION_ID_HEADER);
-        return transactionId != null && isConnectedToCluster();
+        return transactionId != null && isClustered();
     }
 
     /**

File: nifi-system-tests/nifi-system-test-suite/src/test/java/org/apache/nifi/tests/system/clustering/FlowSynchronizationIT.java
Patch:
@@ -245,6 +245,7 @@ public void testComponentsRecreatedOnRejoinCluster() throws NiFiClientException,
         getClientUtil().enableControllerService(countService);
         getClientUtil().enableControllerService(sleepService);
         getClientUtil().startReportingTask(reportingTask);
+        getClientUtil().waitForValidProcessor(count.getId()); // Now that service was enabled, wait for processor to become valid.
         getClientUtil().startProcessGroupComponents(group.getId());
         getClientUtil().startProcessor(terminate);
         getClientUtil().startProcessor(generate);
@@ -603,6 +604,7 @@ public void testComponentsRecreatedOnRestart() throws NiFiClientException, IOExc
         getClientUtil().enableControllerService(countService);
         getClientUtil().enableControllerService(sleepService);
         getClientUtil().startReportingTask(reportingTask);
+        getClientUtil().waitForValidProcessor(count.getId()); // Now that service was enabled, wait for processor to become valid.
         getClientUtil().startProcessGroupComponents(group.getId());
         getClientUtil().startProcessor(terminate);
         getClientUtil().startProcessor(generate);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/oidc/StandardOidcIdentityProvider.java
Patch:
@@ -24,6 +24,7 @@
 import com.nimbusds.jwt.JWT;
 import com.nimbusds.jwt.JWTClaimsSet;
 import com.nimbusds.oauth2.sdk.AuthorizationGrant;
+import com.nimbusds.oauth2.sdk.ErrorObject;
 import com.nimbusds.oauth2.sdk.ParseException;
 import com.nimbusds.oauth2.sdk.Request;
 import com.nimbusds.oauth2.sdk.Scope;
@@ -425,8 +426,9 @@ private TokenResponse authorizeClientRequest(HTTPRequest tokenHttpRequest) throw
         } else {
             // If the response was not successful
             final TokenErrorResponse errorResponse = (TokenErrorResponse) response;
+            final ErrorObject errorObject = errorResponse.getErrorObject();
             throw new RuntimeException("An error occurred while invoking the Token endpoint: " +
-                    errorResponse.getErrorObject().getDescription());
+                    errorObject.getDescription() + " (" + errorObject.getCode() + ")");
         }
     }
 

File: nifi-nar-bundles/nifi-salesforce-bundle/nifi-salesforce-processors/src/main/java/org/apache/nifi/processors/salesforce/QuerySalesforceObject.java
Patch:
@@ -83,7 +83,7 @@
 @Tags({"salesforce", "sobject", "soql", "query"})
 @CapabilityDescription("Retrieves records from a Salesforce sObject. Users can add arbitrary filter conditions by setting the 'Custom WHERE Condition' property."
         + " Supports incremental retrieval: users can define a field in the 'Age Field' property that will be used to determine when the record was created."
-        + " When this property is set the processor will retrieve new records. It's also possible to define an initial cutoff value for the age, fitering out all older records"
+        + " When this property is set the processor will retrieve new records. It's also possible to define an initial cutoff value for the age, filtering out all older records"
         + " even for the first run. This processor is intended to be run on the Primary Node only."
         + " FlowFile attribute 'record.count' indicates how many records were retrieved and written to the output.")
 @Stateful(scopes = Scope.CLUSTER, description = "When 'Age Field' is set, after performing a query the time of execution is stored. Subsequent queries will be augmented"

File: nifi-nar-bundles/nifi-stateless-processor-bundle/nifi-stateless-processor-tests/src/test/java/org/apache/nifi/processors/stateless/TestExecuteStateless.java
Patch:
@@ -88,7 +88,6 @@ public void testRouteToFailure() {
         runner.assertAllFlowFilesTransferred(ExecuteStateless.REL_OUTPUT, 0);
     }
 
-
     @Test
     public void testRouteToFailureWithInput() {
         runner.setProperty(ExecuteStateless.DATAFLOW_FILE, "src/test/resources/route-to-desired-port.json");
@@ -99,7 +98,7 @@ public void testRouteToFailureWithInput() {
         runner.enqueue("B", Collections.singletonMap("desired.port", "B"));
         runner.enqueue("C", Collections.singletonMap("desired.port", "C"));
 
-        runner.run(3, true, true, 60000L);
+        runner.run(3, true, true, 300_000L);
 
         runner.assertTransferCount(ExecuteStateless.REL_OUTPUT, 3);
         runner.assertTransferCount(ExecuteStateless.REL_ORIGINAL, 3);

File: nifi-system-tests/nifi-stateless-system-test-suite/src/test/java/org/apache/nifi/stateless/basics/RollbackOnExceptionIT.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.nifi.stateless.basics;
 
-import org.apache.nifi.processor.exception.ProcessException;
 import org.apache.nifi.flow.VersionedPort;
 import org.apache.nifi.flow.VersionedProcessor;
+import org.apache.nifi.processor.exception.ProcessException;
 import org.apache.nifi.stateless.StatelessSystemIT;
 import org.apache.nifi.stateless.VersionedFlowBuilder;
 import org.apache.nifi.stateless.config.StatelessConfigurationException;
@@ -28,7 +28,6 @@
 import org.apache.nifi.stateless.flow.StatelessDataflow;
 import org.apache.nifi.stateless.flow.TriggerResult;
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.Timeout;
 
 import java.io.IOException;
 import java.util.Collections;
@@ -39,7 +38,6 @@
 public class RollbackOnExceptionIT extends StatelessSystemIT {
     private static final String EXCEPTION_TEXT = "Intentional Exception to verify behavior in RollbackOnExceptionIT";
 
-    @Timeout(30)
     @Test
     public void testFlowFileCompletelyRemovedWhenExceptionThrown() throws IOException, StatelessConfigurationException, InterruptedException {
         final VersionedFlowBuilder builder = new VersionedFlowBuilder();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/NiFiWebApiSecurityConfiguration.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.nifi.web;
 
 import org.apache.nifi.util.NiFiProperties;
+import org.apache.nifi.web.security.StandardAuthenticationEntryPoint;
 import org.apache.nifi.web.security.anonymous.NiFiAnonymousAuthenticationFilter;
 import org.apache.nifi.web.security.csrf.CsrfCookieRequestMatcher;
 import org.apache.nifi.web.security.csrf.StandardCookieCsrfTokenRepository;
@@ -28,7 +29,6 @@
 import org.apache.nifi.web.security.x509.X509AuthenticationFilter;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
-import org.springframework.http.HttpStatus;
 import org.springframework.security.authentication.AuthenticationManager;
 import org.springframework.security.authentication.AuthenticationProvider;
 import org.springframework.security.authentication.ProviderManager;
@@ -44,7 +44,6 @@
 import org.springframework.security.web.SecurityFilterChain;
 import org.springframework.security.web.access.ExceptionTranslationFilter;
 import org.springframework.security.web.authentication.AnonymousAuthenticationFilter;
-import org.springframework.security.web.authentication.HttpStatusEntryPoint;
 import org.springframework.security.web.csrf.CsrfFilter;
 import org.springframework.security.web.util.matcher.AndRequestMatcher;
 
@@ -72,6 +71,7 @@ public AuthenticationManager authenticationManager(final List<AuthenticationProv
     public SecurityFilterChain securityFilterChain(
             final HttpSecurity http,
             final NiFiProperties properties,
+            final StandardAuthenticationEntryPoint authenticationEntryPoint,
             final X509AuthenticationFilter x509AuthenticationFilter,
             final BearerTokenAuthenticationFilter bearerTokenAuthenticationFilter,
             final KnoxAuthenticationFilter knoxAuthenticationFilter,
@@ -118,7 +118,7 @@ public SecurityFilterChain securityFilterChain(
                         )
                 )
                 .exceptionHandling(exceptionHandling -> exceptionHandling
-                        .authenticationEntryPoint(new HttpStatusEntryPoint(HttpStatus.UNAUTHORIZED))
+                        .authenticationEntryPoint(authenticationEntryPoint)
                 )
                 .addFilterBefore(x509AuthenticationFilter, AnonymousAuthenticationFilter.class)
                 .addFilterBefore(bearerTokenAuthenticationFilter, AnonymousAuthenticationFilter.class)

File: nifi-commons/nifi-web-utils/src/main/java/org/apache/nifi/web/util/WebUtils.java
Patch:
@@ -128,7 +128,7 @@ public static void verifyContextPath(final List<String> allowedContextPaths, fin
 
         // Check it against the allowed list
         if (!allowedContextPaths.contains(determinedContextPath)) {
-            final String msg = "The provided context path [" + determinedContextPath + "] was not registered as allowed [" + allowedContextPaths + "]";
+            final String msg = "The provided context path [" + determinedContextPath + "] was not registered as allowed " + allowedContextPaths;
             throw new UriBuilderException(msg);
         }
     }

File: nifi-nar-bundles/nifi-rocksdb-bundle/nifi-rocksdb-repository/src/main/java/org/apache/nifi/controller/repository/RocksDBFlowFileRepository.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.nifi.controller.repository.claim.ResourceClaim;
 import org.apache.nifi.controller.repository.claim.ResourceClaimManager;
 import org.apache.nifi.processor.DataUnit;
-import org.apache.nifi.rocksdb.RocksDBMetronome;
 import org.apache.nifi.util.FormatUtils;
 import org.apache.nifi.util.NiFiProperties;
 import org.rocksdb.RocksDBException;
@@ -75,6 +74,7 @@
  * Implements FlowFile Repository using RocksDB as the backing store.
  * </p>
  */
+@Deprecated
 public class RocksDBFlowFileRepository implements FlowFileRepository {
 
     private static final Logger logger = LoggerFactory.getLogger(RocksDBFlowFileRepository.class);
@@ -286,6 +286,8 @@ public RocksDBFlowFileRepository() {
     }
 
     public RocksDBFlowFileRepository(final NiFiProperties niFiProperties) {
+        logger.warn("*** " + RocksDBFlowFileRepository.class.getSimpleName() + " is deprecated and will be removed in future versions of Apache NiFi. ***");
+
         deserializationThreads = RocksDbProperty.DESERIALIZATION_THREADS.getIntValue(niFiProperties);
         deserializationBufferSize = RocksDbProperty.DESERIALIZATION_BUFFER_SIZE.getIntValue(niFiProperties);
 

File: nifi-nar-bundles/nifi-rocksdb-bundle/nifi-rocksdb-repository/src/main/java/org/apache/nifi/controller/repository/RocksDBMetronome.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.rocksdb;
+package org.apache.nifi.controller.repository;
 
 import org.apache.nifi.processor.DataUnit;
 import org.apache.nifi.util.StringUtils;
@@ -63,7 +63,7 @@
  * Like when a metronome ticks.
  */
 
-public class RocksDBMetronome implements Closeable {
+class RocksDBMetronome implements Closeable {
 
     private static final Logger logger = LoggerFactory.getLogger(RocksDBMetronome.class);
 
@@ -742,10 +742,10 @@ protected void log(final InfoLogLevel infoLogLevel, final String logMsg) {
                 case WARN_LEVEL:
                     logger.warn(logMsg);
                     break;
+                case INFO_LEVEL:
                 case DEBUG_LEVEL:
                     logger.debug(logMsg);
                     break;
-                case INFO_LEVEL:
                 case HEADER_LEVEL:
                 default:
                     logger.info(logMsg);

File: nifi-nar-bundles/nifi-rocksdb-bundle/nifi-rocksdb-repository/src/test/java/org/apache/nifi/controller/repository/TestRocksDBFlowFileRepository.java
Patch:
@@ -30,7 +30,6 @@
 import org.apache.nifi.controller.repository.claim.StandardResourceClaimManager;
 import org.apache.nifi.controller.swap.StandardSwapContents;
 import org.apache.nifi.controller.swap.StandardSwapSummary;
-import org.apache.nifi.rocksdb.RocksDBMetronome;
 import org.apache.nifi.util.NiFiProperties;
 import org.apache.nifi.util.file.FileUtils;
 import org.junit.Assume;

File: nifi-nar-bundles/nifi-rocksdb-bundle/nifi-rocksdb-repository/src/test/java/org/apache/nifi/controller/repository/TestRocksDBMetronome.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.rocksdb;
+package org.apache.nifi.controller.repository;
 
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/merge/RecordBin.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.nifi.serialization.RecordSetWriterFactory;
 import org.apache.nifi.serialization.WriteResult;
 import org.apache.nifi.serialization.record.Record;
+import org.apache.nifi.serialization.record.RecordSchema;
 import org.apache.nifi.stream.io.ByteCountingOutputStream;
 
 import java.io.IOException;
@@ -130,7 +131,8 @@ public boolean offer(final FlowFile flowFile, final RecordReader recordReader, f
 
                 this.out = new ByteCountingOutputStream(rawOut);
 
-                recordWriter = writerFactory.createWriter(logger, recordReader.getSchema(), out, flowFile);
+                RecordSchema outputSchema = writerFactory.getSchema(flowFile.getAttributes(), recordReader.getSchema());
+                recordWriter = writerFactory.createWriter(logger, outputSchema, out, flowFile);
                 recordWriter.beginRecordSet();
             }
 

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/json/JsonPathRowRecordReader.java
Patch:
@@ -184,6 +184,7 @@ record = true;
             switch (dataType.getFieldType()) {
                 case DATE:
                 case TIME:
+                case UUID:
                 case TIMESTAMP:
                     try {
                         return DataTypeUtils.convertType(value, dataType, getLazyDateFormat(), getLazyTimeFormat(), getLazyTimestampFormat(), fieldName);

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/json/JsonTreeRowRecordReader.java
Patch:
@@ -198,6 +198,7 @@ protected Object convertField(final JsonNode fieldNode, final String fieldName,
             case ENUM:
             case DATE:
             case TIME:
+            case UUID:
             case TIMESTAMP: {
                 final Object rawValue = getRawNodeValue(fieldNode, fieldName);
                 return DataTypeUtils.convertType(rawValue, desiredType, getLazyDateFormat(), getLazyTimeFormat(), getLazyTimestampFormat(), fieldName);

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/json/WriteJsonResult.java
Patch:
@@ -374,6 +374,7 @@ private void writeValue(final JsonGenerator generator, final Object value, final
             case SHORT:
                 generator.writeNumber(DataTypeUtils.toInteger(coercedValue, fieldName));
                 break;
+            case UUID:
             case CHAR:
             case STRING:
                 generator.writeString(coercedValue.toString());

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/xml/WriteXMLResult.java
Patch:
@@ -263,6 +263,7 @@ private boolean writeFieldForType(Deque<String> tagsToOpen, Object coercedValue,
             case INT:
             case LONG:
             case SHORT:
+            case UUID:
             case STRING: {
                 writeAllTags(tagsToOpen, fieldName);
                 writer.writeCharacters(coercedValue.toString());

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/xml/XMLRecordReader.java
Patch:
@@ -154,6 +154,7 @@ private Object parseFieldForType(StartElement startElement, String fieldName, Da
             case STRING:
             case DATE:
             case TIME:
+            case UUID:
             case TIMESTAMP: {
 
                 StringBuilder content = new StringBuilder();

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/test/java/org/apache/nifi/csv/TestWriteCSVResult.java
Patch:
@@ -134,6 +134,7 @@ public void testDataTypes() throws IOException {
             valueMap.put("choice", 48L);
             valueMap.put("array", null);
             valueMap.put("enum", null);
+            valueMap.put("uuid", "8bb20bf2-ec41-4b94-80a4-922f4dba009c");
 
             final Record record = new MapRecord(schema, valueMap);
             final RecordSet rs = RecordSet.of(schema, record);
@@ -156,7 +157,8 @@ public void testDataTypes() throws IOException {
 
         final String values = splits[1];
         final StringBuilder expectedBuilder = new StringBuilder();
-        expectedBuilder.append("\"true\",\"1\",\"8\",\"9\",\"8\",\"8\",\"8.0\",\"8.0\",\"8.1\",\"" + timestampValue + "\",\"" + dateValue + "\",\"" + timeValue + "\",\"c\",,\"a孟bc李12儒3\",,\"48\",,");
+        expectedBuilder.append("\"true\",\"1\",\"8\",\"9\",\"8\",\"8\",\"8.0\",\"8.0\",\"8.1\",\"" + timestampValue +
+                "\",\"" + dateValue + "\",\"" + timeValue + "\",\"8bb20bf2-ec41-4b94-80a4-922f4dba009c\",\"c\",,\"a孟bc李12儒3\",,\"48\",,");
 
         final String expectedValues = expectedBuilder.toString();
 

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/test/java/org/apache/nifi/json/TestWriteJsonResult.java
Patch:
@@ -102,6 +102,7 @@ void testDataTypes() throws IOException, ParseException {
         valueMap.put("enum", null);
         valueMap.put("choice", 48L);
         valueMap.put("map", map);
+        valueMap.put("uuid", "8bb20bf2-ec41-4b94-80a4-922f4dba009c");
 
         final Record record = new MapRecord(schema, valueMap);
         final RecordSet rs = RecordSet.of(schema, record);

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/test/java/org/apache/nifi/xml/TestWriteXMLResult.java
Patch:
@@ -197,6 +197,7 @@ public void testDataTypes() throws IOException, ParseException {
         valueMap.put("enum", null);
         valueMap.put("choice", 48L);
         valueMap.put("map", map);
+        valueMap.put("uuid", "8bb20bf2-ec41-4b94-80a4-922f4dba009c");
 
         final Record record = new MapRecord(schema, valueMap);
         final RecordSet rs = RecordSet.of(schema, record);
@@ -207,7 +208,7 @@ public void testDataTypes() throws IOException, ParseException {
         writer.write(rs);
         writer.flush();
 
-        String xmlResult = "<ROOT><RECORD><string>string</string><boolean>true</boolean><byte>1</byte><char>c</char><enum /><short>8</short>" +
+        String xmlResult = "<ROOT><RECORD><string>string</string><boolean>true</boolean><byte>1</byte><uuid>8bb20bf2-ec41-4b94-80a4-922f4dba009c</uuid><char>c</char><enum /><short>8</short>" +
                 "<int>9</int><bigint>8</bigint><long>8</long><float>8.0</float><double>8.0</double><decimal>8.1</decimal>" +
                 "<date>2017-01-01</date><time>17:00:00</time><timestamp>2017-01-01 17:00:00</timestamp><record /><choice>48</choice><array />" +
                 "<map><height>48</height><width>96</width></map></RECORD></ROOT>";

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/queue/StandardFlowFileQueue.java
Patch:
@@ -175,7 +175,7 @@ public long getMinLastQueueDate() {
 
     @Override
     public boolean isEmpty() {
-        return queue.getFlowFileQueueSize().isEmpty();
+        return queue.isEmpty();
     }
 
     @Override

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/json/WriteJsonResult.java
Patch:
@@ -218,7 +218,7 @@ private void writeRecord(final Record record, final RecordSchema writeSchema, fi
 
             endTask.apply(generator);
         } catch (final Exception e) {
-            logger.error("Failed to write {} with schema {} as a JSON Object due to {}", new Object[] {record, record.getSchema(), e.toString(), e});
+            logger.error("Failed to write {} with reader schema {} and writer schema {} as a JSON Object due to {}", record, record.getSchema(), writeSchema, e.toString(), e);
             throw e;
         }
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-documentation/src/test/java/org/apache/nifi/documentation/example/FullyDocumentedProcessor.java
Patch:
@@ -89,8 +89,8 @@ public class FullyDocumentedProcessor extends AbstractProcessor {
             .description("Indicates whether or not to pull files from subdirectories")
             .required(true)
             .allowableValues(
-                    new AllowableValue("true", "true", "Should pull from sub directories"),
-                    new AllowableValue("false", "false", "Should not pull from sub directories")
+                    new AllowableValue("true", "Enabled", "Should pull from sub directories"),
+                    new AllowableValue("false", "Disabled", "Should not pull from sub directories")
             )
             .defaultValue("true")
             .build();

File: nifi-commons/nifi-jetty-configuration/src/main/java/org/apache/nifi/jetty/configuration/connector/alpn/StandardALPNProcessor.java
Patch:
@@ -117,7 +117,7 @@ public void handshakeSucceeded(final Event event) {
          */
         @Override
         public void handshakeFailed(final Event event, final Throwable failure) {
-            logger.warn("Connection Remote Address [{}] Handshake Failed", serverConnection.getEndPoint().getRemoteAddress(), failure);
+            logger.debug("Connection Remote Address [{}] Handshake Failed", serverConnection.getEndPoint().getRemoteAddress(), failure);
         }
     }
 }

File: nifi-commons/nifi-record/src/main/java/org/apache/nifi/serialization/record/ResultSetRecordSet.java
Patch:
@@ -526,6 +526,7 @@ private static RecordFieldType getFieldType(final int sqlType, final String valu
             case Types.TIMESTAMP_WITH_TIMEZONE:
             case -101: // Oracle's TIMESTAMP WITH TIME ZONE
             case -102: // Oracle's TIMESTAMP WITH LOCAL TIME ZONE
+            case -155: // SQL Server's DATETIMEOFFSET
                 return getRecordFieldType(TIMESTAMP, useLogicalTypes);
         }
 

File: nifi-nar-bundles/nifi-extension-utils/nifi-database-utils/src/main/java/org/apache/nifi/util/db/JdbcCommon.java
Patch:
@@ -635,6 +635,7 @@ public static Schema createSchema(final ResultSet rs, AvroConversionOptions opti
                 case TIMESTAMP_WITH_TIMEZONE:
                 case -101: // Oracle's TIMESTAMP WITH TIME ZONE
                 case -102: // Oracle's TIMESTAMP WITH LOCAL TIME ZONE
+                case -155: // SQL Server's DATETIMEOFFSET
                     addNullableField(builder, columnName,
                             u -> options.useLogicalTypes
                                     ? u.type(LogicalTypes.timestampMillis().addToSchema(SchemaBuilder.builder().longType()))

File: minifi/minifi-c2/minifi-c2-service/src/main/java/org/apache/nifi/minifi/c2/configuration/C2ResourceConfig.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.nifi.minifi.c2.configuration;
 
+import org.apache.nifi.minifi.c2.service.C2JsonProviderFeature;
 import org.glassfish.jersey.server.ResourceConfig;
 import org.springframework.context.ApplicationContext;
 import org.springframework.web.context.support.WebApplicationContextUtils;
@@ -29,6 +30,8 @@ public class C2ResourceConfig extends ResourceConfig {
     public C2ResourceConfig(@Context ServletContext servletContext) {
         final ApplicationContext appCtx = WebApplicationContextUtils.getWebApplicationContext(servletContext);
 
+        // register Jackson Object Mapper Resolver
+        register(C2JsonProviderFeature.class);
         register(appCtx.getBean("configService"));
     }
 }

File: nifi-nar-bundles/nifi-smb-bundle/nifi-smb-processors/src/main/java/org/apache/nifi/processors/smb/PutSmbFile.java
Patch:
@@ -229,7 +229,7 @@ public void onScheduled(final ProcessContext context) {
 
     @Override
     protected Collection<ValidationResult> customValidate(ValidationContext validationContext) {
-        Collection<ValidationResult> set = Collections.emptySet();
+        Collection<ValidationResult> set = new ArrayList<>();
         if (validationContext.getProperty(USERNAME).isSet() && !validationContext.getProperty(PASSWORD).isSet()) {
             set.add(new ValidationResult.Builder().explanation("Password must be set if username is supplied.").build());
         }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/controller/service/StandardControllerServiceProvider.java
Patch:
@@ -539,7 +539,6 @@ public String getControllerServiceName(final String serviceIdentifier) {
     @Override
     public void removeControllerService(final ControllerServiceNode serviceNode) {
         requireNonNull(serviceNode);
-        serviceCache.remove(serviceNode.getIdentifier());
 
         final ProcessGroup group = serviceNode.getProcessGroup();
         if (group == null) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/controller/flow/AbstractFlowManager.java
Patch:
@@ -281,6 +281,8 @@ public void purge() {
         for (final ParameterContext parameterContext : parameterContextManager.getParameterContexts()) {
             parameterContextManager.removeParameterContext(parameterContext.getIdentifier());
         }
+
+        LogRepositoryFactory.purge();
     }
 
     private void verifyCanPurge() {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/test/java/org/apache/nifi/flow/synchronization/StandardVersionedComponentSynchronizerTest.java
Patch:
@@ -39,6 +39,7 @@
 import org.apache.nifi.flow.ConnectableComponentType;
 import org.apache.nifi.flow.Position;
 import org.apache.nifi.flow.ScheduledState;
+import org.apache.nifi.flow.VersionedComponent;
 import org.apache.nifi.flow.VersionedConnection;
 import org.apache.nifi.flow.VersionedControllerService;
 import org.apache.nifi.flow.VersionedParameter;
@@ -191,6 +192,7 @@ public void setup() {
 
         synchronizationOptions = new FlowSynchronizationOptions.Builder()
             .componentIdGenerator(componentIdGenerator)
+            .componentComparisonIdLookup(VersionedComponent::getIdentifier)
             .componentScheduler(componentScheduler)
             .build();
 
@@ -202,6 +204,7 @@ public void setup() {
     private FlowSynchronizationOptions createQuickFailSynchronizationOptions(final FlowSynchronizationOptions.ComponentStopTimeoutAction timeoutAction) {
         return new FlowSynchronizationOptions.Builder()
             .componentIdGenerator(componentIdGenerator)
+            .componentComparisonIdLookup(VersionedComponent::getIdentifier)
             .componentScheduler(componentScheduler)
             .componentStopTimeout(Duration.ofMillis(10))
             .componentStopTimeoutAction(timeoutAction)

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/AffectedComponentSet.java
Patch:
@@ -459,9 +459,10 @@ public AffectedComponentSet toActiveSet() {
 
     private boolean isActive(final ProcessorNode processor) {
         // We consider component active if it's starting, running, or has active threads. The call to ProcessorNode.isRunning() will only return true if it has active threads or a scheduled
-        // state of RUNNING but not if it has a scheduled state of STARTING.
+        // state of RUNNING but not if it has a scheduled state of STARTING. We also consider if the processor is to be started once the flow controller has been fully initialized, as
+        // the state of the processor may not yet have been set
         final ScheduledState scheduledState = processor.getPhysicalScheduledState();
-        return scheduledState == ScheduledState.STARTING || scheduledState == ScheduledState.RUNNING || processor.isRunning();
+        return scheduledState == ScheduledState.STARTING || scheduledState == ScheduledState.RUNNING || processor.isRunning() || flowController.isStartAfterInitialization(processor);
     }
 
     private boolean isStopped(final ProcessorNode processor) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/integration/versioned/ImportFlowIT.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.nifi.controller.service.ControllerServiceNode;
 import org.apache.nifi.flow.Bundle;
 import org.apache.nifi.flow.VersionedControllerService;
+import org.apache.nifi.flow.VersionedComponent;
 import org.apache.nifi.flow.VersionedExternalFlow;
 import org.apache.nifi.flow.VersionedParameterContext;
 import org.apache.nifi.flow.VersionedProcessGroup;
@@ -738,7 +739,8 @@ private Set<FlowDifference> getLocalModifications(final ProcessGroup processGrou
         final ComparableDataFlow registryFlow = new StandardComparableDataFlow("Versioned Flow", registryGroup);
 
         final Set<String> ancestorServiceIds = processGroup.getAncestorServiceIds();
-        final FlowComparator flowComparator = new StandardFlowComparator(registryFlow, localFlow, ancestorServiceIds, new ConciseEvolvingDifferenceDescriptor(), Function.identity());
+        final FlowComparator flowComparator = new StandardFlowComparator(registryFlow, localFlow, ancestorServiceIds, new ConciseEvolvingDifferenceDescriptor(), Function.identity(),
+            VersionedComponent::getIdentifier);
         final FlowComparison flowComparison = flowComparator.compare();
         final Set<FlowDifference> differences = flowComparison.getDifferences().stream()
             .filter(FlowDifferenceFilters.FILTER_ADDED_REMOVED_REMOTE_PORTS)

File: nifi-registry/nifi-registry-core/nifi-registry-framework/src/main/java/org/apache/nifi/registry/service/RegistryService.java
Patch:
@@ -931,7 +931,7 @@ public VersionedFlowDifference getFlowDiff(final String bucketIdentifier, final
 
         // Compare the two versions of the flow
         final FlowComparator flowComparator = new StandardFlowComparator(comparableFlowA, comparableFlowB,
-                null, new ConciseEvolvingDifferenceDescriptor(), Function.identity());
+                null, new ConciseEvolvingDifferenceDescriptor(), Function.identity(), VersionedComponent::getIdentifier);
         final FlowComparison flowComparison = flowComparator.compare();
 
         final VersionedFlowDifference result = new VersionedFlowDifference();

File: nifi-nar-bundles/nifi-asn1-bundle/nifi-asn1-services/src/main/java/org/apache/nifi/jasn1/JASN1RecordReader.java
Patch:
@@ -144,7 +144,6 @@ public Record nextRecord(boolean coerceTypes, boolean dropUnknownFields) throws
             } else {
                 return null;
             }
-
         });
     }
 

File: nifi-nar-bundles/nifi-cassandra-bundle/nifi-cassandra-processors/src/test/java/org/apache/nifi/processors/cassandra/QueryCassandraTest.java
Patch:
@@ -28,13 +28,13 @@
 import com.datastax.driver.core.exceptions.InvalidQueryException;
 import com.datastax.driver.core.exceptions.NoHostAvailableException;
 import com.datastax.driver.core.exceptions.ReadTimeoutException;
+import com.fasterxml.jackson.databind.ObjectMapper;
 import org.apache.avro.Schema;
 import org.apache.nifi.processor.exception.ProcessException;
 import org.apache.nifi.util.MockFlowFile;
 import org.apache.nifi.util.MockProcessContext;
 import org.apache.nifi.util.TestRunner;
 import org.apache.nifi.util.TestRunners;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 

File: nifi-nar-bundles/nifi-extension-utils/nifi-record-utils/nifi-avro-record-utils/src/main/java/org/apache/nifi/avro/AvroTypeUtil.java
Patch:
@@ -326,7 +326,7 @@ private static Schema nullable(final Schema schema) {
             return Schema.createUnion(unionTypes);
         }
 
-        return Schema.createUnion(Schema.create(Type.NULL), schema);
+        return Schema.createUnion(schema, Schema.create(Type.NULL));
     }
 
     /**

File: nifi-nar-bundles/nifi-extension-utils/nifi-record-utils/nifi-avro-record-utils/src/main/java/org/apache/nifi/schema/access/InferenceSchemaStrategy.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.nifi.schema.access;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import org.apache.nifi.serialization.SimpleRecordSchema;
 import org.apache.nifi.serialization.record.RecordField;
 import org.apache.nifi.serialization.record.RecordFieldType;
 import org.apache.nifi.serialization.record.RecordSchema;
 import org.apache.nifi.serialization.record.type.RecordDataType;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.apache.commons.io.IOUtils;
 
 import java.io.IOException;

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/main/java/org/apache/nifi/processors/hadoop/inotify/GetHDFSEvents.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.nifi.processors.hadoop.inotify;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.fs.PathFilter;
 import org.apache.hadoop.hdfs.DFSInotifyEventInputStream;
@@ -50,7 +51,6 @@
 import org.apache.nifi.processors.hadoop.GetHDFS;
 import org.apache.nifi.processors.hadoop.ListHDFS;
 import org.apache.nifi.processors.hadoop.PutHDFS;
-import org.codehaus.jackson.map.ObjectMapper;
 
 import java.io.IOException;
 import java.io.OutputStream;

File: nifi-nar-bundles/nifi-hive-bundle/nifi-hive-processors/src/main/java/org/apache/nifi/processors/hive/PutHiveStreaming.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.nifi.processors.hive;
 
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
+import org.apache.avro.AvroRuntimeException;
 import org.apache.avro.file.CodecFactory;
 import org.apache.avro.file.DataFileConstants;
 import org.apache.avro.file.DataFileStream;
@@ -776,6 +777,7 @@ private void onTrigger(ProcessContext context, ProcessSession session, FunctionC
                 throw s;
 
             } catch (IllegalArgumentException
+                    | AvroRuntimeException
                     | HiveWriter.WriteFailure
                     | SerializationError inputError) {
 

File: nifi-nar-bundles/nifi-hive-bundle/nifi-hive-processors/src/test/java/org/apache/nifi/util/orc/TestNiFiOrcUtils.java
Patch:
@@ -377,10 +377,11 @@ public static Schema buildComplexAvroSchema() {
 
     public static GenericData.Record buildComplexAvroRecord(Integer i, Map<String, Double> m, String e, Object unionVal, List<Integer> intArray, ByteBuffer decimal) {
         Schema schema = buildComplexAvroSchema();
+        Schema enumSchema = schema.getField("myEnum").schema();
         GenericData.Record row = new GenericData.Record(schema);
         row.put("myInt", i);
         row.put("myMap", m);
-        row.put("myEnum", e);
+        row.put("myEnum", new GenericData.EnumSymbol(enumSchema, e));
         row.put("myLongOrFloat", unionVal);
         row.put("myIntList", intArray);
         row.put("myDecimal", decimal);

File: nifi-nar-bundles/nifi-salesforce-bundle/nifi-salesforce-processors/src/main/java/org/apache/nifi/processors/salesforce/QuerySalesforceObject.java
Patch:
@@ -345,7 +345,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
                     JsonTreeRowRecordReader jsonReader = new JsonTreeRowRecordReader(
                             querySObjectResultInputStream,
                             getLogger(),
-                            convertedSalesforceSchema.querySObjectResultSchema,
+                            convertedSalesforceSchema.recordSchema,
                             DATE_FORMAT,
                             TIME_FORMAT,
                             DATE_TIME_FORMAT,

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/script/ScriptRunnerFactory.java
Patch:
@@ -79,7 +79,7 @@ public URL[] getModuleURLsForClasspath(String scriptEngineName, String[] moduleP
 
         if (!"Clojure".equals(scriptEngineName)
                 && !"Groovy".equals(scriptEngineName)
-                && "ECMAScript".equals(scriptEngineName)) {
+                && !"ECMAScript".equals(scriptEngineName)) {
             return new URL[0];
         }
 

File: nifi-registry/nifi-registry-core/nifi-registry-framework/src/main/java/org/apache/nifi/registry/db/CustomFlywayConfiguration.java
Patch:
@@ -23,6 +23,7 @@
 import org.flywaydb.core.internal.database.postgresql.PostgreSQLDatabaseType;
 import org.flywaydb.core.internal.jdbc.JdbcUtils;
 import org.flywaydb.database.mysql.MySQLDatabaseType;
+import org.flywaydb.database.mysql.mariadb.MariaDBDatabaseType;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.boot.autoconfigure.flyway.FlywayConfigurationCustomizer;
@@ -58,7 +59,7 @@ public void customize(final FluentConfiguration configuration) {
         final DatabaseType databaseType = getDatabaseType(configuration.getDataSource());
         LOGGER.info("Determined database type is {}", databaseType.getName());
 
-        if (databaseType instanceof MySQLDatabaseType) {
+        if (databaseType instanceof MySQLDatabaseType || databaseType instanceof MariaDBDatabaseType) {
             LOGGER.info("Setting migration locations to {}", Arrays.asList(LOCATIONS_MYSQL));
             configuration.locations(LOCATIONS_MYSQL);
         } else if (databaseType instanceof PostgreSQLDatabaseType) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/tasks/ReportingTaskWrapper.java
Patch:
@@ -39,7 +39,9 @@ public ReportingTaskWrapper(final ReportingTaskNode taskNode, final LifecycleSta
 
     @Override
     public synchronized void run() {
-        lifecycleState.incrementActiveThreadCount(null);
+        if (!lifecycleState.tryIncrementActiveThreadCount(null)) {
+            return;
+        }
         try (final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(extensionManager, taskNode.getReportingTask().getClass(), taskNode.getIdentifier())) {
             taskNode.getReportingTask().onTrigger(taskNode.getReportingContext());
         } catch (final Throwable t) {

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-2-6-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/InFlightMessageTracker.java
Patch:
@@ -70,7 +70,7 @@ public int getSentCount(final FlowFile flowFile) {
 
     public void fail(final FlowFile flowFile, final Exception exception) {
         failures.putIfAbsent(flowFile, exception);
-        logger.error("Failed to send " + flowFile + " to Kafka", exception);
+        logger.error("Failed to send {} to Kafka", flowFile, exception);
 
         synchronized (progressMutex) {
             progressMutex.notify();

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-1-0-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/PublishKafkaRecord_1_0.java
Patch:
@@ -99,8 +99,8 @@ public class PublishKafkaRecord_1_0 extends AbstractProcessor {
             + "whether or not it is replicated. This is faster than <Guarantee Replicated Delivery> "
             + "but can result in data loss if a Kafka node crashes");
     static final AllowableValue DELIVERY_BEST_EFFORT = new AllowableValue("0", "Best Effort",
-        "FlowFile will be routed to success after successfully writing the content to a Kafka node, "
-            + "without waiting for a response. This provides the best performance but may result in data loss.");
+        "FlowFile will be routed to success after successfully sending the content to a Kafka node, "
+            + "without waiting for any acknowledgment from the node at all. This provides the best performance but may result in data loss.");
 
     static final AllowableValue ROUND_ROBIN_PARTITIONING = new AllowableValue(Partitioners.RoundRobinPartitioner.class.getName(),
         Partitioners.RoundRobinPartitioner.class.getSimpleName(),

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-1-0-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/PublishKafka_1_0.java
Patch:
@@ -87,8 +87,8 @@ public class PublishKafka_1_0 extends AbstractProcessor {
             + "whether or not it is replicated. This is faster than <Guarantee Replicated Delivery> "
             + "but can result in data loss if a Kafka node crashes");
     static final AllowableValue DELIVERY_BEST_EFFORT = new AllowableValue("0", "Best Effort",
-        "FlowFile will be routed to success after successfully writing the content to a Kafka node, "
-            + "without waiting for a response. This provides the best performance but may result in data loss.");
+        "FlowFile will be routed to success after successfully sending the content to a Kafka node, "
+            + "without waiting for any acknowledgment from the node at all. This provides the best performance but may result in data loss.");
 
     static final AllowableValue ROUND_ROBIN_PARTITIONING = new AllowableValue(Partitioners.RoundRobinPartitioner.class.getName(),
         Partitioners.RoundRobinPartitioner.class.getSimpleName(),

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-2-0-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/PublishKafkaRecord_2_0.java
Patch:
@@ -106,8 +106,8 @@ public class PublishKafkaRecord_2_0 extends AbstractProcessor {
             + "whether or not it is replicated. This is faster than <Guarantee Replicated Delivery> "
             + "but can result in data loss if a Kafka node crashes");
     static final AllowableValue DELIVERY_BEST_EFFORT = new AllowableValue("0", "Best Effort",
-        "FlowFile will be routed to success after successfully writing the content to a Kafka node, "
-            + "without waiting for a response. This provides the best performance but may result in data loss.");
+        "FlowFile will be routed to success after successfully sending the content to a Kafka node, "
+            + "without waiting for any acknowledgment from the node at all. This provides the best performance but may result in data loss.");
 
     static final AllowableValue ROUND_ROBIN_PARTITIONING = new AllowableValue(Partitioners.RoundRobinPartitioner.class.getName(),
         Partitioners.RoundRobinPartitioner.class.getSimpleName(),

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-2-0-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/PublishKafka_2_0.java
Patch:
@@ -94,8 +94,8 @@ public class PublishKafka_2_0 extends AbstractProcessor {
             + "whether or not it is replicated. This is faster than <Guarantee Replicated Delivery> "
             + "but can result in data loss if a Kafka node crashes");
     static final AllowableValue DELIVERY_BEST_EFFORT = new AllowableValue("0", "Best Effort",
-        "FlowFile will be routed to success after successfully writing the content to a Kafka node, "
-            + "without waiting for a response. This provides the best performance but may result in data loss.");
+        "FlowFile will be routed to success after successfully sending the content to a Kafka node, "
+            + "without waiting for any acknowledgment from the node at all. This provides the best performance but may result in data loss.");
 
     static final AllowableValue ROUND_ROBIN_PARTITIONING = new AllowableValue(Partitioners.RoundRobinPartitioner.class.getName(),
         Partitioners.RoundRobinPartitioner.class.getSimpleName(),

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-2-6-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/PublishKafkaRecord_2_6.java
Patch:
@@ -108,8 +108,8 @@ public class PublishKafkaRecord_2_6 extends AbstractProcessor implements Verifia
             + "whether or not it is replicated. This is faster than <Guarantee Replicated Delivery> "
             + "but can result in data loss if a Kafka node crashes");
     static final AllowableValue DELIVERY_BEST_EFFORT = new AllowableValue("0", "Best Effort",
-        "FlowFile will be routed to success after successfully writing the content to a Kafka node, "
-            + "without waiting for a response. This provides the best performance but may result in data loss.");
+        "FlowFile will be routed to success after successfully sending the content to a Kafka node, "
+            + "without waiting for any acknowledgment from the node at all. This provides the best performance but may result in data loss.");
 
     static final AllowableValue ROUND_ROBIN_PARTITIONING = new AllowableValue(Partitioners.RoundRobinPartitioner.class.getName(),
         Partitioners.RoundRobinPartitioner.class.getSimpleName(),

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-2-6-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/PublishKafka_2_6.java
Patch:
@@ -94,8 +94,8 @@ public class PublishKafka_2_6 extends AbstractProcessor implements VerifiablePro
             + "whether or not it is replicated. This is faster than <Guarantee Replicated Delivery> "
             + "but can result in data loss if a Kafka node crashes");
     static final AllowableValue DELIVERY_BEST_EFFORT = new AllowableValue("0", "Best Effort",
-        "FlowFile will be routed to success after successfully writing the content to a Kafka node, "
-            + "without waiting for a response. This provides the best performance but may result in data loss.");
+        "FlowFile will be routed to success after successfully sending the content to a Kafka node, "
+            + "without waiting for any acknowledgment from the node at all. This provides the best performance but may result in data loss.");
 
     static final AllowableValue ROUND_ROBIN_PARTITIONING = new AllowableValue(Partitioners.RoundRobinPartitioner.class.getName(),
         Partitioners.RoundRobinPartitioner.class.getSimpleName(),

File: nifi-nar-bundles/nifi-standard-services/nifi-lookup-services-bundle/nifi-lookup-services/src/main/java/org/apache/nifi/lookup/XMLFileLookupService.java
Patch:
@@ -19,7 +19,7 @@
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.Tags;
 import org.apache.nifi.lookup.configuration2.CommonsConfigurationLookupService;
-import org.apache.nifi.security.xml.SafeXMLConfiguration;
+import org.apache.nifi.lookup.configuration2.SafeXMLConfiguration;
 
 
 @Tags({"lookup", "cache", "enrich", "join", "xml", "reloadable", "key", "value"})

File: nifi-nar-bundles/nifi-standard-services/nifi-lookup-services-bundle/nifi-lookup-services/src/main/java/org/apache/nifi/lookup/configuration2/CommonsConfigurationLookupService.java
Patch:
@@ -36,7 +36,6 @@
 import org.apache.nifi.lookup.LookupFailureException;
 import org.apache.nifi.lookup.StringLookupService;
 import org.apache.nifi.reporting.InitializationException;
-import org.apache.nifi.security.xml.XXEValidator;
 
 import java.io.File;
 import java.lang.reflect.ParameterizedType;

File: nifi-nar-bundles/nifi-standard-services/nifi-lookup-services-bundle/nifi-lookup-services/src/main/java/org/apache/nifi/lookup/configuration2/XXEValidator.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.security.xml;
+package org.apache.nifi.lookup.configuration2;
 
 import java.io.BufferedReader;
 import java.io.IOException;

File: nifi-nar-bundles/nifi-standard-services/nifi-lookup-services-bundle/nifi-lookup-services/src/test/java/org/apache/nifi/lookup/configuration2/XXEValidatorTest.java
Patch:
@@ -14,11 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.security;
+package org.apache.nifi.lookup.configuration2;
 
 import org.apache.nifi.components.ValidationContext;
 import org.apache.nifi.components.ValidationResult;
-import org.apache.nifi.security.xml.XXEValidator;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 

File: nifi-nar-bundles/nifi-extension-utils/nifi-hadoop-utils/src/main/java/org/apache/nifi/processors/hadoop/AbstractHadoopProcessor.java
Patch:
@@ -696,7 +696,7 @@ private Path getNormalizedPath(final String rawPath, final Optional<String> prop
         final String path;
 
         if (uri.getScheme() != null) {
-            if (!uri.getScheme().equals(fileSystemUri.getScheme()) || !uri.getAuthority().equals(fileSystemUri.getAuthority())) {
+            if (!uri.getScheme().equals(fileSystemUri.getScheme()) || (uri.getAuthority() != null && !uri.getAuthority().equals(fileSystemUri.getAuthority()))) {
                 if (propertyName.isPresent()) {
                     getLogger().warn(NORMALIZE_ERROR_WITH_PROPERTY, propertyName, uri, fileSystemUri);
                 } else {

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/processors/script/InvokeScriptedProcessor.java
Patch:
@@ -256,8 +256,6 @@ public void onPropertyModified(final PropertyDescriptor descriptor, final String
                 scriptingComponentHelper.setScriptPath(newValue);
             } else if (ScriptingComponentUtils.SCRIPT_BODY.equals(descriptor)) {
                 scriptingComponentHelper.setScriptBody(newValue);
-            } else if (ScriptingComponentUtils.MODULES.equals(descriptor)) {
-                scriptingComponentHelper.setScriptBody(newValue);
             } else if (scriptingComponentHelper.SCRIPT_ENGINE.equals(descriptor)) {
                 scriptingComponentHelper.setScriptEngineName(newValue);
             }

File: nifi-registry/nifi-registry-core/nifi-registry-test/src/main/java/org/apache/nifi/registry/db/Postgres14DataSourceFactory.java
Patch:
@@ -29,10 +29,10 @@
 import java.sql.SQLException;
 
 @Configuration
-@Profile("postgres")
-public class PostgresDataSourceFactory extends TestDataSourceFactory {
+@Profile("postgres-14")
+public class Postgres14DataSourceFactory extends TestDataSourceFactory {
 
-    private static final PostgreSQLContainer POSTGRESQL_CONTAINER = new PostgreSQLContainer();
+    private static final PostgreSQLContainer POSTGRESQL_CONTAINER = new PostgreSQLContainer("postgres:14");
 
     static {
         POSTGRESQL_CONTAINER.start();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/controller/StandardProcessorNode.java
Patch:
@@ -1818,7 +1818,7 @@ public void run() {
                                 deactivateThread();
                             }
 
-                            scheduleState.decrementActiveThreadCount(null);
+                            scheduleState.decrementActiveThreadCount();
                             hasActiveThreads = false;
                             scheduledState.set(ScheduledState.STOPPED);
                             future.complete(null);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/scheduling/StandardProcessScheduler.java
Patch:
@@ -343,7 +343,7 @@ public Future<?> scheduleTask(final Callable<?> task) {
 
             @Override
             public void onTaskComplete() {
-                lifecycleState.decrementActiveThreadCount(null);
+                lifecycleState.decrementActiveThreadCount();
             }
         };
 
@@ -383,7 +383,7 @@ public Future<?> scheduleTask(final Callable<?> task) {
 
             @Override
             public void onTaskComplete() {
-                lifecycleState.decrementActiveThreadCount(null);
+                lifecycleState.decrementActiveThreadCount();
             }
         };
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/tasks/ConnectableTask.java
Patch:
@@ -283,7 +283,7 @@ public InvocationResult invoke() {
                     logger.error("", e);
                 }
             } finally {
-                scheduleState.decrementActiveThreadCount(activeSessionFactory);
+                scheduleState.decrementActiveThreadCount();
                 Thread.currentThread().setName(originalThreadName);
             }
         }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/tasks/ReportingTaskWrapper.java
Patch:
@@ -58,7 +58,7 @@ public synchronized void run() {
                     }
                 }
             } finally {
-                lifecycleState.decrementActiveThreadCount(null);
+                lifecycleState.decrementActiveThreadCount();
             }
         }
     }

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/engine/StatelessSchedulingAgent.java
Patch:
@@ -88,7 +88,7 @@ private void triggerReportingTask(final ReportingTaskNode taskNode, final Lifecy
             try {
                 taskNode.getReportingTask().onTrigger(taskNode.getReportingContext());
             } finally {
-                scheduleState.decrementActiveThreadCount(null);
+                scheduleState.decrementActiveThreadCount();
             }
 
         } catch (final Throwable t) {

File: nifi-nar-bundles/nifi-kudu-bundle/nifi-kudu-processors/src/main/java/org/apache/nifi/processors/kudu/AbstractKuduProcessor.java
Patch:
@@ -142,11 +142,11 @@ public abstract class AbstractKuduProcessor extends AbstractProcessor {
             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)
             .build();
 
-    private static final int DEFAULT_WORKER_COUNT = 2 * Runtime.getRuntime().availableProcessors();
+    private static final int DEFAULT_WORKER_COUNT = Runtime.getRuntime().availableProcessors();
     static final PropertyDescriptor WORKER_COUNT = new Builder()
             .name("worker-count")
             .displayName("Kudu Client Worker Count")
-            .description("The maximum number of worker threads handling Kudu client read and write operations. Defaults to the number of available processors multiplied by 2.")
+            .description("The maximum number of worker threads handling Kudu client read and write operations. Defaults to the number of available processors.")
             .required(true)
             .defaultValue(Integer.toString(DEFAULT_WORKER_COUNT))
             .addValidator(StandardValidators.POSITIVE_INTEGER_VALIDATOR)

File: nifi-registry/nifi-registry-core/nifi-registry-framework/src/main/java/org/apache/nifi/registry/db/CustomFlywayConfiguration.java
Patch:
@@ -58,10 +58,10 @@ public void customize(final FluentConfiguration configuration) {
         final DatabaseType databaseType = getDatabaseType(configuration.getDataSource());
         LOGGER.info("Determined database type is {}", databaseType.getName());
 
-        if (databaseType.equals(new MySQLDatabaseType())) {
+        if (databaseType instanceof MySQLDatabaseType) {
             LOGGER.info("Setting migration locations to {}", Arrays.asList(LOCATIONS_MYSQL));
             configuration.locations(LOCATIONS_MYSQL);
-        } else if (databaseType.equals(new PostgreSQLDatabaseType())) {
+        } else if (databaseType instanceof PostgreSQLDatabaseType) {
             LOGGER.info("Setting migration locations to {}", Arrays.asList(LOCATIONS_POSTGRES));
             configuration.locations(LOCATIONS_POSTGRES);
         } else {

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ListSFTP.java
Patch:
@@ -68,6 +68,7 @@
                   "last modified as 'yyyy-MM-dd'T'HH:mm:ssZ'"),
     @WritesAttribute(attribute = "filename", description = "The name of the file on the SFTP Server"),
     @WritesAttribute(attribute = "path", description = "The fully qualified name of the directory on the SFTP Server from which the file was pulled"),
+    @WritesAttribute(attribute = "mime.type", description = "The MIME Type that is provided by the configured Record Writer"),
 })
 @Stateful(scopes = {Scope.CLUSTER}, description = "After performing a listing of files, the timestamp of the newest file is stored. "
     + "This allows the Processor to list only files that have been added or modified after "

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestListSFTP.java
Patch:
@@ -30,6 +30,7 @@
 import org.apache.nifi.components.ConfigVerificationResult;
 import org.apache.nifi.components.ConfigVerificationResult.Outcome;
 import org.apache.nifi.distributed.cache.client.DistributedMapCacheClient;
+import org.apache.nifi.flowfile.attributes.CoreAttributes;
 import org.apache.nifi.processor.VerifiableProcessor;
 import org.apache.nifi.processor.util.list.AbstractListProcessor;
 import org.apache.nifi.processor.util.list.ListedEntityTracker;
@@ -109,6 +110,7 @@ public void testRunWithRecordWriter() throws InitializationException, Interrupte
         runner.assertValid(recordWriter);
         runner.run(2);
         runner.assertTransferCount(ListSFTP.REL_SUCCESS, 1);
+        runner.assertAllFlowFilesContainAttribute(CoreAttributes.MIME_TYPE.key());
     }
 
     @Test

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/groups/StandardProcessGroup.java
Patch:
@@ -1446,7 +1446,7 @@ public boolean isEmpty() {
         readLock.lock();
         try {
             return inputPorts.isEmpty() && outputPorts.isEmpty() && connections.isEmpty()
-                && processGroups.isEmpty() && labels.isEmpty() && processors.isEmpty() && remoteGroups.isEmpty();
+                && processGroups.isEmpty() && labels.isEmpty() && processors.isEmpty() && remoteGroups.isEmpty() && controllerServices.isEmpty();
         } finally {
             readLock.unlock();
         }

File: nifi-commons/nifi-security-kerberos/src/test/java/org/apache/nifi/security/krb/TestKerberosKeytabUser.java
Patch:
@@ -16,12 +16,12 @@
  */
 package org.apache.nifi.security.krb;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.security.auth.login.AppConfigurationEntry;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
 
 public class TestKerberosKeytabUser {
 

File: nifi-commons/nifi-security-kerberos/src/test/java/org/apache/nifi/security/krb/TestKerberosPasswordUser.java
Patch:
@@ -16,12 +16,12 @@
  */
 package org.apache.nifi.security.krb;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.security.auth.login.AppConfigurationEntry;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
 
 public class TestKerberosPasswordUser {
 

File: nifi-commons/nifi-security-kerberos/src/test/java/org/apache/nifi/security/krb/TestKeytabConfiguration.java
Patch:
@@ -16,12 +16,12 @@
  */
 package org.apache.nifi.security.krb;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.security.auth.login.AppConfigurationEntry;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
 
 public class TestKeytabConfiguration {
 

File: nifi-commons/nifi-utils/src/test/java/org/apache/nifi/stream/io/TestNonFlushableOutputStream.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.nifi.stream.io;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 
 import java.io.IOException;

File: nifi-maven-archetypes/nifi-processor-bundle-archetype/src/main/resources/archetype-resources/nifi-__artifactBaseName__-processors/src/test/java/MyProcessorTest.java
Patch:
@@ -18,15 +18,15 @@
 
 import org.apache.nifi.util.TestRunner;
 import org.apache.nifi.util.TestRunners;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 
 public class MyProcessorTest {
 
     private TestRunner testRunner;
 
-    @Before
+    @BeforeEach
     public void init() {
         testRunner = TestRunners.newTestRunner(MyProcessor.class);
     }

File: nifi-maven-archetypes/nifi-service-bundle-archetype/src/main/resources/archetype-resources/nifi-__artifactBaseName__/src/test/java/TestStandardMyService.java
Patch:
@@ -19,12 +19,12 @@
 import org.apache.nifi.reporting.InitializationException;
 import org.apache.nifi.util.TestRunner;
 import org.apache.nifi.util.TestRunners;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class TestStandardMyService {
 
-    @Before
+    @BeforeEach
     public void init() {
 
     }

File: nifi-stateless/nifi-stateless-api/src/test/java/org/apache/nifi/stateless/config/PropertiesFileEngineConfigurationParserTest.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.Collection;
 import java.util.Properties;
 
-import static org.junit.Assert.assertTrue;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertNotNull;

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/test/java/org/apache/nifi/stateless/engine/TestStandardStatelessEngine.java
Patch:
@@ -16,12 +16,12 @@
  */
 package org.apache.nifi.stateless.engine;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.time.Duration;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
 
 public class TestStandardStatelessEngine {
 

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/test/java/org/apache/nifi/stateless/repository/TestStatelessFileSystemContentRepository.java
Patch:
@@ -35,7 +35,7 @@
 import java.io.OutputStream;
 import java.util.Arrays;
 
-import static org.junit.Assert.assertTrue;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertThrows;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/controller/repository/StandardProcessSession.java
Patch:
@@ -543,7 +543,7 @@ public void commitAsync(final Runnable onSuccess, final Consumer<Throwable> onFa
         LOG.debug("Successfully committed session {} for {}", this, connectableDescription);
     }
 
-    private void commit(final boolean asynchronous) {
+    private synchronized void commit(final boolean asynchronous) {
         checkpoint(this.checkpoint != null); // If a checkpoint already exists, we need to copy the collection
         commit(this.checkpoint, asynchronous);
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/queue/clustered/client/async/nio/TestLoadBalanceSession.java
Patch:
@@ -136,7 +136,7 @@ public void testSunnyCase() throws InterruptedException, IOException {
         while (transaction.communicate()) {
         }
 
-        assertTrue(transaction.isComplete());
+        assertTrue(transaction.getSessionState().isComplete());
         socketChannel.close();
 
         final Checksum expectedChecksum = new CRC32();

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/MergeRecord.java
Patch:
@@ -195,7 +195,7 @@ public class MergeRecord extends AbstractSessionFactoryProcessor {
         .name("max.bin.count")
         .displayName("Maximum Number of Bins")
         .description("Specifies the maximum number of bins that can be held in memory at any one time. "
-            + "This number should not be smaller than the maximum number of conurrent threads for this Processor, "
+            + "This number should not be smaller than the maximum number of concurrent threads for this Processor, "
             + "or the bins that are created will often consist only of a single incoming FlowFile.")
         .defaultValue("10")
         .required(true)

File: nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/util/KeyStoreUtils.java
Patch:
@@ -401,6 +401,7 @@ public static boolean isStoreValid(final URL keystore, final KeystoreType keysto
             return true;
 
         } catch (Exception e) {
+            logger.debug("Keystore [{}] Type [{}] load failed", keystore, keystoreType, e);
             return false;
         } finally {
             if (bis != null) {

File: nifi-commons/nifi-record/src/main/java/org/apache/nifi/serialization/record/util/DataTypeUtils.java
Patch:
@@ -548,7 +548,7 @@ public static DataType inferDataType(final Object value, final DataType defaultT
                 map = (Map<String, Object>) value;
             } else {
                 final Map<?, ?> m = (Map<?, ?>) value;
-                map = new HashMap<>(m.size());
+                map = new LinkedHashMap<>(m.size());
                 m.forEach((k, v) -> map.put(k == null ? null : k.toString(), v));
             }
             return inferRecordDataType(map);

File: nifi-commons/nifi-record/src/test/java/org/apache/nifi/serialization/record/TestDataTypeUtils.java
Patch:
@@ -43,6 +43,7 @@
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
@@ -611,7 +612,7 @@ private void testChooseDataType(List<DataType> dataTypes, Object value, DataType
 
     @Test
     public void testInferTypeWithMapStringKeys() {
-        Map<String, String> map = new HashMap<>();
+        Map<String, String> map = new LinkedHashMap<>();
         map.put("a", "Hello");
         map.put("b", "World");
 
@@ -626,7 +627,7 @@ public void testInferTypeWithMapStringKeys() {
 
     @Test
     public void testInferTypeWithMapNonStringKeys() {
-        Map<Integer, String> map = new HashMap<>();
+        Map<Integer, String> map = new LinkedHashMap<>();
         map.put(1, "Hello");
         map.put(2, "World");
 

File: minifi/minifi-bootstrap/src/main/java/org/apache/nifi/minifi/bootstrap/status/reporters/StatusLogger.java
Patch:
@@ -36,7 +36,7 @@ public class StatusLogger extends PeriodicStatusReporter {
     private volatile LogLevel logLevel;
     private volatile String statusQuery;
 
-    private static final Logger logger = LoggerFactory.getLogger(StatusLogger.class);
+    protected static Logger logger = LoggerFactory.getLogger(StatusLogger.class);
 
 
     public static final String LOGGER_STATUS_REPORTER_PROPERTY_PREFIX = STATUS_REPORTER_PROPERTY_PREFIX + ".log";

File: minifi/minifi-c2/minifi-c2-cache/minifi-c2-cache-filesystem/src/main/java/org/apache/nifi/minifi/c2/cache/filesystem/FileSystemConfigurationCache.java
Patch:
@@ -52,7 +52,9 @@ public class FileSystemConfigurationCache implements ConfigurationCache {
      * @throws IOException Thrown if the path cannot be created.
      */
     public FileSystemConfigurationCache(String pathRoot, String pathPattern) throws IOException {
-        this.pathRoot = Paths.get(System.getenv("C2_SERVER_HOME")).resolve(pathRoot).toAbsolutePath();
+        final String serverHome = System.getenv("C2_SERVER_HOME");
+        final String homePath = serverHome == null ? "." : serverHome;
+        this.pathRoot = Paths.get(homePath).resolve(pathRoot).toAbsolutePath();
         Files.createDirectories(this.pathRoot);
         this.pathPattern = pathPattern;
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/status/history/EmbeddedQuestDbStatusHistoryRepository.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.nifi.controller.status.history;
 
-import io.questdb.MessageBusImpl;
 import io.questdb.cairo.CairoConfiguration;
 import io.questdb.cairo.CairoEngine;
 import io.questdb.cairo.DefaultCairoConfiguration;
@@ -123,7 +122,7 @@ public EmbeddedQuestDbStatusHistoryRepository(final NiFiProperties niFiPropertie
         this.persistFrequency = persistFrequency;
         daysToKeepNodeData = getDaysToKeepNodeData(niFiProperties);
         daysToKeepComponentData = getDaysToKeepComponentData(niFiProperties);
-        dbContext = new QuestDbContext(new CairoEngine(configuration), new MessageBusImpl());
+        dbContext = new QuestDbContext(new CairoEngine(configuration));
 
         nodeStatusStorage = new QuestDbNodeStatusStorage(dbContext);
         garbageCollectionStatusStorage = new QuestDbGarbageCollectionStatusStorage(dbContext);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/status/history/questdb/QuestDbWritingTemplate.java
Patch:
@@ -54,7 +54,7 @@ public void insert(final CairoEngine engine, final SqlExecutionContext context,
         }
 
         try (
-            final TableWriter tableWriter = engine.getWriter(context.getCairoSecurityContext(), tableName);
+            final TableWriter tableWriter = engine.getWriter(context.getCairoSecurityContext(), tableName, "adding rows")
         ) {
             addRows(tableWriter, entries);
             tableWriter.commit();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/status/history/EmbeddedQuestDbStatusHistoryRepositoryForComponentsTest.java
Patch:
@@ -27,7 +27,7 @@
 public class EmbeddedQuestDbStatusHistoryRepositoryForComponentsTest extends AbstractEmbeddedQuestDbStatusHistoryRepositoryTest {
 
     @Test
-    public void testReadingEmptyRepository() throws Exception {
+    public void testReadingEmptyRepository() {
         // when
         final StatusHistory result = testSubject.getProcessGroupStatusHistory(ROOT_GROUP_ID, START, END, PREFERRED_DATA_POINTS);
 
@@ -105,4 +105,4 @@ private void assertCorrectStatusHistory(final StatusHistory rootGroupStatus, fin
         Assert.assertEquals(name, rootGroupStatus.getComponentDetails().get("Name"));
         Assert.assertEquals(1, rootGroupStatus.getStatusSnapshots().size());
     }
-}
\ No newline at end of file
+}

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/status/history/EmbeddedQuestDbStatusHistoryRepositoryForNodeTest.java
Patch:
@@ -23,7 +23,7 @@
 public class EmbeddedQuestDbStatusHistoryRepositoryForNodeTest extends AbstractEmbeddedQuestDbStatusHistoryRepositoryTest {
 
     @Test
-    public void testReadingEmptyRepository() throws Exception {
+    public void testReadingEmptyRepository() {
         // when
         final StatusHistory nodeStatusHistory = testSubject.getNodeStatusHistory(START, END);
         final GarbageCollectionHistory garbageCollectionHistory = testSubject.getGarbageCollectionHistory(START, END);
@@ -49,4 +49,4 @@ public void testWritingThenReadingComponents() throws Exception {
         assertGc1Status(garbageCollectionHistory.getGarbageCollectionStatuses("gc1"));
         assertGc2Status(garbageCollectionHistory.getGarbageCollectionStatuses("gc2"));
     }
-}
\ No newline at end of file
+}

File: nifi-nar-bundles/nifi-hive-bundle/nifi-hive3-processors/src/test/java/org/apache/hive/streaming/TestNiFiRecordSerDe.java
Patch:
@@ -31,6 +31,8 @@
 import org.apache.nifi.serialization.record.RecordSchema;
 import org.apache.nifi.util.MockComponentLog;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.condition.DisabledOnJre;
+import org.junit.jupiter.api.condition.JRE;
 
 import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
@@ -43,6 +45,7 @@
 import static org.junit.jupiter.api.Assertions.assertArrayEquals;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
+@DisabledOnJre(value = JRE.JAVA_17, disabledReason = "Hive3 StringInternUtils illegal reflective access")
 public class TestNiFiRecordSerDe {
 
     @Test

File: nifi-nar-bundles/nifi-hive-bundle/nifi-hive3-processors/src/test/java/org/apache/nifi/processors/hive/TestPutHive3Streaming.java
Patch:
@@ -76,7 +76,9 @@
 import org.junit.Assert;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.condition.DisabledOnJre;
 import org.junit.jupiter.api.condition.DisabledOnOs;
+import org.junit.jupiter.api.condition.JRE;
 import org.junit.jupiter.api.condition.OS;
 
 import java.io.ByteArrayInputStream;
@@ -122,6 +124,7 @@
  * Unit tests for PutHive3Streaming processor.
  */
 @DisabledOnOs(OS.WINDOWS)
+@DisabledOnJre(value = JRE.JAVA_17, disabledReason = "Hive3 StringInternUtils illegal reflective access")
 public class TestPutHive3Streaming {
 
     private static final String TEST_CONF_PATH = "src/test/resources/core-site.xml";

File: nifi-nar-bundles/nifi-ignite-bundle/nifi-ignite-processors/src/test/java/org/apache/nifi/processors/ignite/cache/TestGetIgniteCache.java
Patch:
@@ -142,9 +142,8 @@ protected IgniteCache<String, byte[]> getIgniteCache() {
         List<MockFlowFile> getFailureFlowFiles = getRunner.getFlowFilesForRelationship(GetIgniteCache.REL_FAILURE);
         assertEquals(1, getFailureFlowFiles.size());
 
-        final MockFlowFile getOut = getRunner.getFlowFilesForRelationship(GetIgniteCache.REL_FAILURE).get(0);
-        getOut.assertAttributeEquals(GetIgniteCache.IGNITE_GET_FAILED_REASON_ATTRIBUTE_KEY,
-            GetIgniteCache.IGNITE_GET_FAILED_MESSAGE_PREFIX + "java.lang.NullPointerException");
+        final MockFlowFile failureFlowFile = getFailureFlowFiles.get(0);
+        failureFlowFile.assertAttributeExists(GetIgniteCache.IGNITE_GET_FAILED_REASON_ATTRIBUTE_KEY);
 
         getRunner.shutdown();
     }

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/test/java/org/apache/nifi/processors/script/TestExecuteJavascript.java
Patch:
@@ -22,10 +22,13 @@
 import org.apache.nifi.util.TestRunners;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.condition.DisabledForJreRange;
+import org.junit.jupiter.api.condition.JRE;
 
 import java.nio.charset.StandardCharsets;
 import java.util.List;
 
+@DisabledForJreRange(min = JRE.JAVA_15, disabledReason = "Java 15 removed Nashorn Engine")
 public class TestExecuteJavascript extends BaseScriptTest {
 
     @BeforeEach

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/test/java/org/apache/nifi/processors/script/TestInvokeJavascript.java
Patch:
@@ -27,6 +27,8 @@
 import org.apache.nifi.util.TestRunners;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.condition.DisabledForJreRange;
+import org.junit.jupiter.api.condition.JRE;
 
 import java.nio.charset.StandardCharsets;
 import java.util.List;
@@ -37,6 +39,7 @@
 import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
+@DisabledForJreRange(min = JRE.JAVA_15, disabledReason = "Java 15 removed Nashorn Engine")
 public class TestInvokeJavascript extends BaseScriptTest {
 
     @BeforeEach

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestHashContent.java
Patch:
@@ -43,7 +43,7 @@ public void testSHA256() throws IOException {
     @Test
     public void testSHA1() throws IOException {
         // Expected hash value obtained by running Linux sha1sum against the file
-        test("SHA", "0a0a9f2a6772942557ab5355d76af442f8f65e01");
+        test("SHA-1", "0a0a9f2a6772942557ab5355d76af442f8f65e01");
     }
 
     private void test(final String hashAlgorithm, final String expectedHash) throws IOException {

File: nifi-system-tests/nifi-system-test-suite/src/test/java/org/apache/nifi/tests/system/clustering/OffloadIT.java
Patch:
@@ -31,7 +31,6 @@
 import org.slf4j.LoggerFactory;
 
 import java.io.IOException;
-import java.util.Collection;
 import java.util.Collections;
 
 public class OffloadIT extends NiFiSystemIT {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/queue/SwappablePriorityQueue.java
Patch:
@@ -460,6 +460,8 @@ public FlowFileAvailability getFlowFileAvailability() {
                     // Because we cannot obtain the write lock while already holding the read lock, we set a flag so that we
                     // can migrate swap to active queue only after we've released the read lock.
                     mustMigrateSwapToActive = true;
+                } else if (swapQueue.isEmpty()) {
+                    return FlowFileAvailability.ACTIVE_QUEUE_EMPTY;
                 } else {
                     top = swapQueue.get(0);
                 }

File: nifi-registry/nifi-registry-core/nifi-registry-web-api/src/main/java/org/apache/nifi/registry/web/NiFiRegistryResourceConfig.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.nifi.registry.web.api.FlowResource;
 import org.apache.nifi.registry.web.api.ItemResource;
 import org.apache.nifi.registry.web.api.TenantResource;
+import org.apache.nifi.registry.web.api.RegistryAboutResource;
 import org.glassfish.jersey.media.multipart.MultiPartFeature;
 import org.glassfish.jersey.server.ResourceConfig;
 import org.glassfish.jersey.server.ServerProperties;
@@ -70,6 +71,7 @@ public NiFiRegistryResourceConfig(@Context ServletContext servletContext) {
         register(ItemResource.class);
         register(TenantResource.class);
         register(ConfigResource.class);
+        register(RegistryAboutResource.class);
 
         // register multipart feature
         register(MultiPartFeature.class);

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/queryrecord/FlowFileEnumerator.java
Patch:
@@ -107,7 +107,7 @@ private Object filterColumns(final Record record) {
         // the actual value, NOT a 1-element array of values.
         if (fields.length == 1) {
             final int desiredCellIndex = fields[0];
-            return row[desiredCellIndex];
+            return cast(row[desiredCellIndex]);
         }
 
         // Create a new Object array that contains only the desired fields.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardControllerServiceDAO.java
Patch:
@@ -410,7 +410,7 @@ public List<ConfigVerificationResultDTO> verifyConfiguration(final String contro
 
         final ParameterLookup parameterLookup = serviceNode.getProcessGroup() == null ? ParameterLookup.EMPTY : serviceNode.getProcessGroup().getParameterContext();
         final ConfigurationContext configurationContext = new StandardConfigurationContext(serviceNode, properties, serviceNode.getAnnotationData(),
-            parameterLookup, flowController.getControllerServiceProvider(), null, flowController.getVariableRegistry());
+            parameterLookup, flowController.getControllerServiceProvider(), null, serviceNode.getProcessGroup().getVariableRegistry());
 
         final List<ConfigVerificationResult> verificationResults = serviceNode.verifyConfiguration(configurationContext, configVerificationLog, variables, extensionManager);
         final List<ConfigVerificationResultDTO> resultsDtos = verificationResults.stream()

File: nifi-api/src/main/java/org/apache/nifi/flow/ExternalControllerServiceReference.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.registry.flow;
+package org.apache.nifi.flow;
 
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;

File: nifi-api/src/main/java/org/apache/nifi/flow/VersionedParameter.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.registry.flow;
+package org.apache.nifi.flow;
 
 import io.swagger.annotations.ApiModelProperty;
 

File: nifi-api/src/main/java/org/apache/nifi/flow/VersionedParameterContext.java
Patch:
@@ -14,11 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.registry.flow;
+package org.apache.nifi.flow;
 
 import io.swagger.annotations.ApiModelProperty;
-import org.apache.nifi.flow.ComponentType;
-import org.apache.nifi.flow.VersionedComponent;
 
 import java.util.List;
 import java.util.Set;

File: nifi-external/nifi-kafka-connect/nifi-kafka-connector/src/main/java/org/apache/nifi/kafka/connect/StatelessKafkaConnectorUtil.java
Patch:
@@ -155,7 +155,7 @@ public static StatelessDataflow createDataflow(final Map<String, String> propert
         final List<ParameterOverride> parameterOverrides = parseParameterOverrides(properties);
         final String dataflowName = properties.get(DATAFLOW_NAME);
 
-        final DataflowDefinition<?> dataflowDefinition;
+        final DataflowDefinition dataflowDefinition;
         final StatelessBootstrap bootstrap;
         try {
             final Map<String, String> dataflowDefinitionProperties = new HashMap<>();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/groups/ProcessGroupSynchronizer.java
Patch:
@@ -18,18 +18,18 @@
 package org.apache.nifi.groups;
 
 import org.apache.nifi.controller.exception.ProcessorInstantiationException;
+import org.apache.nifi.flow.VersionedExternalFlow;
 import org.apache.nifi.flow.VersionedProcessGroup;
-import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
 
 public interface ProcessGroupSynchronizer {
 
     /**
      * Synchronize the given Process Group to match the proposed snaphsot
      * @param group the Process Group to update
-     * @param proposedSnapshot the proposed/desired state for the process group
+     * @param proposedFlow the proposed/desired state for the process group
      * @param synchronizationOptions options for how to synchronize the group
      */
-    void synchronize(ProcessGroup group, VersionedFlowSnapshot proposedSnapshot, GroupSynchronizationOptions synchronizationOptions) throws ProcessorInstantiationException;
+    void synchronize(ProcessGroup group, VersionedExternalFlow proposedFlow, GroupSynchronizationOptions synchronizationOptions) throws ProcessorInstantiationException;
 
     void verifyCanSynchronize(ProcessGroup group, VersionedProcessGroup proposed, boolean verifyConnectionRemoval);
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/registry/flow/RestBasedFlowRegistry.java
Patch:
@@ -18,7 +18,9 @@
 package org.apache.nifi.registry.flow;
 
 import org.apache.nifi.authorization.user.NiFiUser;
+import org.apache.nifi.flow.ExternalControllerServiceReference;
 import org.apache.nifi.flow.VersionedFlowCoordinates;
+import org.apache.nifi.flow.VersionedParameterContext;
 import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.registry.bucket.Bucket;
 import org.apache.nifi.registry.client.BucketClient;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/registry/flow/mapping/InstantiatedVersionedProcessGroup.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.nifi.registry.flow.mapping;
 
-import org.apache.nifi.registry.flow.ExternalControllerServiceReference;
+import org.apache.nifi.flow.ExternalControllerServiceReference;
 import org.apache.nifi.flow.VersionedProcessGroup;
 
 import javax.xml.bind.annotation.XmlTransient;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/registry/flow/mapping/NiFiRegistryFlowMapper.java
Patch:
@@ -67,12 +67,12 @@
 import org.apache.nifi.parameter.ParameterDescriptor;
 import org.apache.nifi.processor.Relationship;
 import org.apache.nifi.registry.VariableDescriptor;
-import org.apache.nifi.registry.flow.ExternalControllerServiceReference;
+import org.apache.nifi.flow.ExternalControllerServiceReference;
 import org.apache.nifi.registry.flow.FlowRegistry;
 import org.apache.nifi.registry.flow.FlowRegistryClient;
 import org.apache.nifi.registry.flow.VersionControlInformation;
-import org.apache.nifi.registry.flow.VersionedParameter;
-import org.apache.nifi.registry.flow.VersionedParameterContext;
+import org.apache.nifi.flow.VersionedParameter;
+import org.apache.nifi.flow.VersionedParameterContext;
 import org.apache.nifi.remote.PublicPort;
 import org.apache.nifi.remote.RemoteGroupPort;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/registry/flow/mapping/StandardComparableDataFlow.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.nifi.flow.VersionedControllerService;
 import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.flow.VersionedReportingTask;
-import org.apache.nifi.registry.flow.VersionedParameterContext;
+import org.apache.nifi.flow.VersionedParameterContext;
 import org.apache.nifi.registry.flow.diff.ComparableDataFlow;
 
 import java.util.Collections;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/flow/VersionedDataflow.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.nifi.flow.VersionedControllerService;
 import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.flow.VersionedReportingTask;
-import org.apache.nifi.registry.flow.VersionedParameterContext;
+import org.apache.nifi.flow.VersionedParameterContext;
 
 import java.util.List;
 import java.util.Set;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/registry/flow/FlowRegistry.java
Patch:
@@ -18,6 +18,8 @@
 package org.apache.nifi.registry.flow;
 
 import org.apache.nifi.authorization.user.NiFiUser;
+import org.apache.nifi.flow.ExternalControllerServiceReference;
+import org.apache.nifi.flow.VersionedParameterContext;
 import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.registry.bucket.Bucket;
 import org.apache.nifi.registry.client.NiFiRegistryException;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/VersionedDataflowMapper.java
Patch:
@@ -36,7 +36,7 @@
 import org.apache.nifi.parameter.ParameterContext;
 import org.apache.nifi.registry.flow.FlowRegistry;
 import org.apache.nifi.registry.flow.FlowRegistryClient;
-import org.apache.nifi.registry.flow.VersionedParameterContext;
+import org.apache.nifi.flow.VersionedParameterContext;
 import org.apache.nifi.registry.flow.mapping.ComponentIdLookup;
 import org.apache.nifi.registry.flow.mapping.FlowMappingOptions;
 import org.apache.nifi.registry.flow.mapping.NiFiRegistryFlowMapper;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/integration/MockSingleFlowRegistryClient.java
Patch:
@@ -19,13 +19,13 @@
 import org.apache.nifi.authorization.user.NiFiUser;
 import org.apache.nifi.registry.bucket.Bucket;
 import org.apache.nifi.registry.client.NiFiRegistryException;
-import org.apache.nifi.registry.flow.ExternalControllerServiceReference;
+import org.apache.nifi.flow.ExternalControllerServiceReference;
 import org.apache.nifi.registry.flow.FlowRegistry;
 import org.apache.nifi.registry.flow.FlowRegistryClient;
 import org.apache.nifi.registry.flow.VersionedFlow;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshotMetadata;
-import org.apache.nifi.registry.flow.VersionedParameterContext;
+import org.apache.nifi.flow.VersionedParameterContext;
 import org.apache.nifi.flow.VersionedProcessGroup;
 
 import java.io.IOException;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/registry/flow/mapping/NiFiRegistryFlowMapperTest.java
Patch:
@@ -51,7 +51,7 @@
 import org.apache.nifi.registry.ComponentVariableRegistry;
 import org.apache.nifi.registry.VariableDescriptor;
 import org.apache.nifi.flow.ComponentType;
-import org.apache.nifi.registry.flow.ExternalControllerServiceReference;
+import org.apache.nifi.flow.ExternalControllerServiceReference;
 import org.apache.nifi.registry.flow.FlowRegistry;
 import org.apache.nifi.registry.flow.FlowRegistryClient;
 import org.apache.nifi.flow.PortType;
@@ -61,8 +61,8 @@
 import org.apache.nifi.flow.VersionedFlowCoordinates;
 import org.apache.nifi.flow.VersionedFunnel;
 import org.apache.nifi.flow.VersionedLabel;
-import org.apache.nifi.registry.flow.VersionedParameter;
-import org.apache.nifi.registry.flow.VersionedParameterContext;
+import org.apache.nifi.flow.VersionedParameter;
+import org.apache.nifi.flow.VersionedParameterContext;
 import org.apache.nifi.flow.VersionedPort;
 import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.flow.VersionedProcessor;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/AuthorizeParameterReference.java
Patch:
@@ -25,8 +25,8 @@
 import org.apache.nifi.parameter.ParameterDescriptor;
 import org.apache.nifi.parameter.ParameterParser;
 import org.apache.nifi.parameter.ParameterTokenList;
-import org.apache.nifi.registry.flow.VersionedParameter;
-import org.apache.nifi.registry.flow.VersionedParameterContext;
+import org.apache.nifi.flow.VersionedParameter;
+import org.apache.nifi.flow.VersionedParameterContext;
 import org.apache.nifi.web.NiFiServiceFacade;
 import org.apache.nifi.web.api.dto.ControllerServiceDTO;
 import org.apache.nifi.web.api.dto.FlowSnippetDTO;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/NiFiServiceFacade.java
Patch:
@@ -29,10 +29,10 @@
 import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.groups.ProcessGroup;
 import org.apache.nifi.parameter.ParameterContext;
-import org.apache.nifi.registry.flow.ExternalControllerServiceReference;
+import org.apache.nifi.flow.ExternalControllerServiceReference;
 import org.apache.nifi.registry.flow.VersionedFlow;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
-import org.apache.nifi.registry.flow.VersionedParameterContext;
+import org.apache.nifi.flow.VersionedParameterContext;
 import org.apache.nifi.web.api.dto.AccessPolicyDTO;
 import org.apache.nifi.web.api.dto.AffectedComponentDTO;
 import org.apache.nifi.web.api.dto.BulletinBoardDTO;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/FlowUpdateResource.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.registry.flow.FlowRegistryUtils;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
-import org.apache.nifi.registry.flow.VersionedParameterContext;
+import org.apache.nifi.flow.VersionedParameterContext;
 import org.apache.nifi.web.NiFiServiceFacade;
 import org.apache.nifi.web.ResourceNotFoundException;
 import org.apache.nifi.web.ResumeFlowException;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java
Patch:
@@ -108,7 +108,7 @@
 import org.apache.nifi.registry.flow.VersionedFlow;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
 import org.apache.nifi.registry.flow.VersionedFlowState;
-import org.apache.nifi.registry.flow.VersionedParameterContext;
+import org.apache.nifi.flow.VersionedParameterContext;
 import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.registry.variable.VariableRegistryUpdateRequest;
 import org.apache.nifi.registry.variable.VariableRegistryUpdateStep;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/ProcessGroupDAO.java
Patch:
@@ -19,8 +19,8 @@
 import org.apache.nifi.controller.ScheduledState;
 import org.apache.nifi.controller.queue.DropFlowFileStatus;
 import org.apache.nifi.controller.service.ControllerServiceState;
+import org.apache.nifi.flow.VersionedExternalFlow;
 import org.apache.nifi.groups.ProcessGroup;
-import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
 import org.apache.nifi.web.api.dto.ProcessGroupDTO;
 import org.apache.nifi.web.api.dto.VariableRegistryDTO;
 import org.apache.nifi.web.api.dto.VersionControlInformationDTO;
@@ -136,7 +136,7 @@ public interface ProcessGroupDAO {
      *            update the contents of that Process Group
      * @return the process group
      */
-    ProcessGroup updateProcessGroupFlow(String groupId, VersionedFlowSnapshot proposedSnapshot, VersionControlInformationDTO versionControlInformation, String componentIdSeed,
+    ProcessGroup updateProcessGroupFlow(String groupId, VersionedExternalFlow proposedSnapshot, VersionControlInformationDTO versionControlInformation, String componentIdSeed,
                                         boolean verifyNotModified, boolean updateSettings, boolean updateDescendantVersionedFlows);
 
     /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardProcessGroupDAO.java
Patch:
@@ -28,6 +28,8 @@
 import org.apache.nifi.controller.queue.DropFlowFileStatus;
 import org.apache.nifi.controller.service.ControllerServiceNode;
 import org.apache.nifi.controller.service.ControllerServiceState;
+import org.apache.nifi.flow.VersionedExternalFlow;
+import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.groups.FlowFileConcurrency;
 import org.apache.nifi.groups.FlowFileOutboundPolicy;
 import org.apache.nifi.groups.ProcessGroup;
@@ -36,8 +38,6 @@
 import org.apache.nifi.registry.flow.FlowRegistry;
 import org.apache.nifi.registry.flow.StandardVersionControlInformation;
 import org.apache.nifi.registry.flow.VersionControlInformation;
-import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
-import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.registry.flow.mapping.NiFiRegistryFlowMapper;
 import org.apache.nifi.remote.RemoteGroupPort;
 import org.apache.nifi.web.ResourceNotFoundException;
@@ -424,7 +424,7 @@ public ProcessGroup disconnectVersionControl(final String groupId) {
     }
 
     @Override
-    public ProcessGroup updateProcessGroupFlow(final String groupId, final VersionedFlowSnapshot proposedSnapshot, final VersionControlInformationDTO versionControlInformation,
+    public ProcessGroup updateProcessGroupFlow(final String groupId, final VersionedExternalFlow proposedSnapshot, final VersionControlInformationDTO versionControlInformation,
                                                final String componentIdSeed, final boolean verifyNotModified, final boolean updateSettings, final boolean updateDescendantVersionedFlows) {
 
         final ProcessGroup group = locateProcessGroup(flowController, groupId);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/web/StandardNiFiServiceFacadeTest.java
Patch:
@@ -40,11 +40,11 @@
 import org.apache.nifi.history.History;
 import org.apache.nifi.history.HistoryQuery;
 import org.apache.nifi.nar.ExtensionManager;
-import org.apache.nifi.registry.flow.ExternalControllerServiceReference;
+import org.apache.nifi.flow.ExternalControllerServiceReference;
 import org.apache.nifi.registry.flow.RestBasedFlowRegistry;
 import org.apache.nifi.registry.flow.VersionControlInformation;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
-import org.apache.nifi.registry.flow.VersionedParameterContext;
+import org.apache.nifi.flow.VersionedParameterContext;
 import org.apache.nifi.registry.flow.mapping.InstantiatedVersionedProcessGroup;
 import org.apache.nifi.registry.flow.mapping.NiFiRegistryFlowMapper;
 import org.apache.nifi.web.api.dto.DtoFactory;

File: nifi-registry/nifi-registry-core/nifi-registry-data-model/src/main/java/org/apache/nifi/registry/flow/VersionedFlowSnapshot.java
Patch:
@@ -19,6 +19,8 @@
 
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;
+import org.apache.nifi.flow.ExternalControllerServiceReference;
+import org.apache.nifi.flow.VersionedParameterContext;
 import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.registry.bucket.Bucket;
 
@@ -117,7 +119,7 @@ public void setBucket(Bucket bucket) {
     @ApiModelProperty(value = "The parameter contexts referenced by process groups in the flow contents. " +
             "The mapping is from the name of the context to the context instance, and it is expected that any " +
             "context in this map is referenced by at least one process group in this flow.")
-    public Map<String,VersionedParameterContext> getParameterContexts() {
+    public Map<String, VersionedParameterContext> getParameterContexts() {
         return parameterContexts;
     }
 

File: nifi-registry/nifi-registry-core/nifi-registry-flow-diff/src/main/java/org/apache/nifi/registry/flow/diff/ComparableDataFlow.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.nifi.flow.VersionedControllerService;
 import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.flow.VersionedReportingTask;
-import org.apache.nifi.registry.flow.VersionedParameterContext;
+import org.apache.nifi.flow.VersionedParameterContext;
 
 import java.util.Set;
 

File: nifi-registry/nifi-registry-core/nifi-registry-flow-diff/src/main/java/org/apache/nifi/registry/flow/diff/StandardComparableDataFlow.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.nifi.flow.VersionedControllerService;
 import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.flow.VersionedReportingTask;
-import org.apache.nifi.registry.flow.VersionedParameterContext;
+import org.apache.nifi.flow.VersionedParameterContext;
 
 import java.util.Collections;
 import java.util.HashSet;

File: nifi-registry/nifi-registry-core/nifi-registry-flow-diff/src/main/java/org/apache/nifi/registry/flow/diff/StandardFlowComparator.java
Patch:
@@ -30,8 +30,8 @@
 import org.apache.nifi.flow.VersionedRemoteGroupPort;
 import org.apache.nifi.flow.VersionedRemoteProcessGroup;
 import org.apache.nifi.flow.VersionedReportingTask;
-import org.apache.nifi.registry.flow.VersionedParameter;
-import org.apache.nifi.registry.flow.VersionedParameterContext;
+import org.apache.nifi.flow.VersionedParameter;
+import org.apache.nifi.flow.VersionedParameterContext;
 
 import java.util.Collection;
 import java.util.Collections;

File: nifi-registry/nifi-registry-core/nifi-registry-framework/src/test/java/org/apache/nifi/registry/serialization/TestFlowContentSerializer.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.registry.serialization;
 
-import org.apache.nifi.registry.flow.ExternalControllerServiceReference;
+import org.apache.nifi.flow.ExternalControllerServiceReference;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
 import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.flow.VersionedProcessor;

File: nifi-registry/nifi-registry-core/nifi-registry-web-api/src/test/java/org/apache/nifi/registry/web/api/UnsecuredNiFiRegistryClientIT.java
Patch:
@@ -60,12 +60,12 @@
 import org.apache.nifi.registry.extension.repo.ExtensionRepoVersion;
 import org.apache.nifi.registry.extension.repo.ExtensionRepoVersionSummary;
 import org.apache.nifi.registry.field.Fields;
-import org.apache.nifi.registry.flow.ExternalControllerServiceReference;
+import org.apache.nifi.flow.ExternalControllerServiceReference;
 import org.apache.nifi.registry.flow.VersionedFlow;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshotMetadata;
-import org.apache.nifi.registry.flow.VersionedParameter;
-import org.apache.nifi.registry.flow.VersionedParameterContext;
+import org.apache.nifi.flow.VersionedParameter;
+import org.apache.nifi.flow.VersionedParameterContext;
 import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.flow.VersionedProcessor;
 import org.apache.nifi.flow.VersionedPropertyDescriptor;

File: nifi-stateless/nifi-stateless-api/src/main/java/org/apache/nifi/stateless/flow/DataflowDefinition.java
Patch:
@@ -17,15 +17,16 @@
 
 package org.apache.nifi.stateless.flow;
 
+import org.apache.nifi.flow.VersionedExternalFlow;
 import org.apache.nifi.stateless.config.ParameterContextDefinition;
 import org.apache.nifi.stateless.config.ParameterValueProviderDefinition;
 import org.apache.nifi.stateless.config.ReportingTaskDefinition;
 
 import java.util.List;
 import java.util.Set;
 
-public interface DataflowDefinition<T> {
-    T getFlowSnapshot();
+public interface DataflowDefinition {
+    VersionedExternalFlow getVersionedExternalFlow();
 
     String getFlowName();
 

File: nifi-stateless/nifi-stateless-api/src/main/java/org/apache/nifi/stateless/flow/DataflowDefinitionParser.java
Patch:
@@ -27,9 +27,9 @@
 import java.util.Map;
 
 public interface DataflowDefinitionParser {
-    DataflowDefinition<?> parseFlowDefinition(File configurationFile, StatelessEngineConfiguration engineConfiguration, List<ParameterOverride> parameterOverrides)
+    DataflowDefinition parseFlowDefinition(File configurationFile, StatelessEngineConfiguration engineConfiguration, List<ParameterOverride> parameterOverrides)
         throws StatelessConfigurationException, IOException;
 
-    DataflowDefinition<?> parseFlowDefinition(Map<String, String> configurationProperties, StatelessEngineConfiguration engineConfiguration, List<ParameterOverride> parameterOverrides)
+    DataflowDefinition parseFlowDefinition(Map<String, String> configurationProperties, StatelessEngineConfiguration engineConfiguration, List<ParameterOverride> parameterOverrides)
         throws StatelessConfigurationException, IOException;
 }

File: nifi-stateless/nifi-stateless-api/src/main/java/org/apache/nifi/stateless/flow/StatelessDataflowFactory.java
Patch:
@@ -22,7 +22,7 @@
 
 import java.io.IOException;
 
-public interface StatelessDataflowFactory<T> {
-    StatelessDataflow createDataflow(StatelessEngineConfiguration statelessEngineConfiguration, DataflowDefinition<T> dataflowDefinition, ClassLoader extensionClassLoader)
+public interface StatelessDataflowFactory {
+    StatelessDataflow createDataflow(StatelessEngineConfiguration statelessEngineConfiguration, DataflowDefinition dataflowDefinition, ClassLoader extensionClassLoader)
         throws IOException, StatelessConfigurationException;
 }

File: nifi-stateless/nifi-stateless-bootstrap/src/main/java/org/apache/nifi/stateless/bootstrap/RunStatelessFlow.java
Patch:
@@ -89,7 +89,7 @@ public static StatelessDataflow createDataflow(final StatelessEngineConfiguratio
         final long initializeStart = System.currentTimeMillis();
 
         final StatelessBootstrap bootstrap = StatelessBootstrap.bootstrap(engineConfiguration);
-        final DataflowDefinition<?> dataflowDefinition = bootstrap.parseDataflowDefinition(flowDefinitionFile, parameterOverrides);
+        final DataflowDefinition dataflowDefinition = bootstrap.parseDataflowDefinition(flowDefinitionFile, parameterOverrides);
 
         final StatelessDataflow dataflow = bootstrap.createDataflow(dataflowDefinition);
         dataflow.initialize();

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/controller/reporting/StatelessReportingContext.java
Patch:
@@ -30,10 +30,10 @@
 import java.util.Map;
 
 public class StatelessReportingContext extends AbstractReportingContext implements ReportingContext {
-    private final StatelessEngine<?> statelessEngine;
+    private final StatelessEngine statelessEngine;
     private final FlowManager flowManager;
 
-    public StatelessReportingContext(final StatelessEngine<?> statelessEngine, final FlowManager flowManager,
+    public StatelessReportingContext(final StatelessEngine statelessEngine, final FlowManager flowManager,
                                      final Map<PropertyDescriptor, String> properties, final ReportingTask reportingTask,
                                      final VariableRegistry variableRegistry, final ParameterLookup parameterLookup) {
         super(reportingTask, statelessEngine.getBulletinRepository(), properties, statelessEngine.getControllerServiceProvider(), parameterLookup, variableRegistry);

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/controller/reporting/StatelessReportingTaskNode.java
Patch:
@@ -35,9 +35,9 @@
 
 public class StatelessReportingTaskNode extends AbstractReportingTaskNode implements ReportingTaskNode {
     private final FlowManager flowManager;
-    private final StatelessEngine<?> statelessEngine;
+    private final StatelessEngine statelessEngine;
 
-    public StatelessReportingTaskNode(final LoggableComponent<ReportingTask> reportingTask, final String id, final StatelessEngine<?> statelessEngine,
+    public StatelessReportingTaskNode(final LoggableComponent<ReportingTask> reportingTask, final String id, final StatelessEngine statelessEngine,
                                       final FlowManager flowManager, final ProcessScheduler processScheduler, final ValidationContextFactory validationContextFactory,
                                       final ComponentVariableRegistry variableRegistry, final ReloadComponent reloadComponent, final ExtensionManager extensionManager,
                                       final ValidationTrigger validationTrigger) {

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/controller/scheduling/StatelessProcessScheduler.java
Patch:
@@ -104,7 +104,7 @@ public void shutdownReportingTask(final ReportingTaskNode taskNode) {
         }
     }
 
-    public void initialize(final ProcessContextFactory processContextFactory, final DataflowDefinition<?> dataflowDefinition) {
+    public void initialize(final ProcessContextFactory processContextFactory, final DataflowDefinition dataflowDefinition) {
         this.processContextFactory = processContextFactory;
 
         final String threadNameSuffix = dataflowDefinition.getFlowName() == null ? "" : " for dataflow " + dataflowDefinition.getFlowName();

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/engine/ComponentBuilder.java
Patch:
@@ -56,7 +56,6 @@
 import org.apache.nifi.processor.StandardValidationContextFactory;
 import org.apache.nifi.registry.ComponentVariableRegistry;
 import org.apache.nifi.registry.VariableRegistry;
-import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
 import org.apache.nifi.registry.variable.StandardComponentVariableRegistry;
 import org.apache.nifi.reporting.ReportingInitializationContext;
 import org.apache.nifi.reporting.ReportingTask;
@@ -74,14 +73,14 @@
 public class ComponentBuilder {
     private static final Logger logger = LoggerFactory.getLogger(ComponentBuilder.class);
 
-    private StatelessEngine<VersionedFlowSnapshot> statelessEngine;
+    private StatelessEngine statelessEngine;
     private FlowManager flowManager;
     private String identifier;
     private String type;
     private BundleCoordinate bundleCoordinate;
     private Set<URL> additionalClassPathUrls;
 
-    public ComponentBuilder statelessEngine(final StatelessEngine<VersionedFlowSnapshot> statelessEngine) {
+    public ComponentBuilder statelessEngine(final StatelessEngine statelessEngine) {
         this.statelessEngine = statelessEngine;
         return this;
     }

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/engine/StatelessEngine.java
Patch:
@@ -37,11 +37,11 @@
 
 import java.time.Duration;
 
-public interface StatelessEngine<T> {
+public interface StatelessEngine {
 
     void initialize(StatelessEngineInitializationContext initializationContext);
 
-    StatelessDataflow createFlow(DataflowDefinition<T> dataflowDefinition);
+    StatelessDataflow createFlow(DataflowDefinition dataflowDefinition);
 
     ExtensionManager getExtensionManager();
 

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/engine/StatelessFlowManager.java
Patch:
@@ -65,7 +65,6 @@
 import org.apache.nifi.parameter.ParameterContextManager;
 import org.apache.nifi.processor.Relationship;
 import org.apache.nifi.processor.StandardProcessContext;
-import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
 import org.apache.nifi.registry.variable.MutableVariableRegistry;
 import org.apache.nifi.remote.StandardRemoteProcessGroup;
 import org.apache.nifi.reporting.BulletinRepository;
@@ -91,12 +90,12 @@
 public class StatelessFlowManager extends AbstractFlowManager implements FlowManager {
     private static final Logger logger = LoggerFactory.getLogger(StatelessFlowManager.class);
 
-    private final StatelessEngine<VersionedFlowSnapshot> statelessEngine;
+    private final StatelessEngine statelessEngine;
     private final SSLContext sslContext;
     private final BulletinRepository bulletinRepository;
 
     public StatelessFlowManager(final FlowFileEventRepository flowFileEventRepository, final ParameterContextManager parameterContextManager,
-                                final StatelessEngine<VersionedFlowSnapshot> statelessEngine, final BooleanSupplier flowInitializedCheck,
+                                final StatelessEngine statelessEngine, final BooleanSupplier flowInitializedCheck,
                                 final SSLContext sslContext, final BulletinRepository bulletinRepository) {
         super(flowFileEventRepository, parameterContextManager, statelessEngine.getFlowRegistryClient(), flowInitializedCheck);
 

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/flow/StandardStatelessFlow.java
Patch:
@@ -107,7 +107,7 @@ public class StandardStatelessFlow implements StatelessDataflow {
     private final ProcessContextFactory processContextFactory;
     private final RepositoryContextFactory repositoryContextFactory;
     private final List<FlowFileQueue> internalFlowFileQueues;
-    private final DataflowDefinition<?> dataflowDefinition;
+    private final DataflowDefinition dataflowDefinition;
     private final StatelessStateManagerProvider stateManagerProvider;
     private final ObjectMapper objectMapper = new ObjectMapper();
     private final ProcessScheduler processScheduler;
@@ -122,7 +122,7 @@ public class StandardStatelessFlow implements StatelessDataflow {
     private volatile Boolean stateful = null;
 
     public StandardStatelessFlow(final ProcessGroup rootGroup, final List<ReportingTaskNode> reportingTasks, final ControllerServiceProvider controllerServiceProvider,
-                                 final ProcessContextFactory processContextFactory, final RepositoryContextFactory repositoryContextFactory, final DataflowDefinition<?> dataflowDefinition,
+                                 final ProcessContextFactory processContextFactory, final RepositoryContextFactory repositoryContextFactory, final DataflowDefinition dataflowDefinition,
                                  final StatelessStateManagerProvider stateManagerProvider, final ProcessScheduler processScheduler, final BulletinRepository bulletinRepository) {
         this.rootGroup = rootGroup;
         this.allConnections = rootGroup.findAllConnections();

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/test/java/org/apache/nifi/stateless/config/TestPropertiesFileFlowDefinitionParser.java
Patch:
@@ -45,7 +45,7 @@ public void testParse() throws IOException, StatelessConfigurationException {
 
         final List<ParameterOverride> parameterOverrides = new ArrayList<>();
         final StatelessEngineConfiguration engineConfig = createStatelessEngineConfiguration();
-        final DataflowDefinition<?> dataflowDefinition = parser.parseFlowDefinition(new File("src/test/resources/flow-configuration.properties"), engineConfig, parameterOverrides);
+        final DataflowDefinition dataflowDefinition = parser.parseFlowDefinition(new File("src/test/resources/flow-configuration.properties"), engineConfig, parameterOverrides);
         assertEquals(new HashSet<>(Arrays.asList("foo", "bar", "baz")), dataflowDefinition.getFailurePortNames());
 
         final List<ParameterContextDefinition> contextDefinitions = dataflowDefinition.getParameterContexts();

File: nifi-system-tests/nifi-stateless-system-test-suite/src/test/java/org/apache/nifi/stateless/VersionedFlowBuilder.java
Patch:
@@ -29,7 +29,7 @@
 import org.apache.nifi.flow.VersionedConnection;
 import org.apache.nifi.flow.VersionedControllerService;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
-import org.apache.nifi.registry.flow.VersionedParameterContext;
+import org.apache.nifi.flow.VersionedParameterContext;
 import org.apache.nifi.flow.VersionedPort;
 import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.flow.VersionedProcessor;

File: nifi-system-tests/nifi-stateless-system-test-suite/src/test/java/org/apache/nifi/stateless/parameters/ParameterContextIT.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.nifi.flowfile.FlowFile;
 import org.apache.nifi.processor.Relationship;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
-import org.apache.nifi.registry.flow.VersionedParameter;
-import org.apache.nifi.registry.flow.VersionedParameterContext;
+import org.apache.nifi.flow.VersionedParameter;
+import org.apache.nifi.flow.VersionedParameterContext;
 import org.apache.nifi.flow.VersionedPort;
 import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.flow.VersionedProcessor;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/connectable/StandardConnection.java
Patch:
@@ -59,6 +59,7 @@
  * component.
  */
 public final class StandardConnection implements Connection, ConnectionEventListener {
+    public static final long DEFAULT_Z_INDEX = 0;
 
     private final String id;
     private final AtomicReference<ProcessGroup> processGroup;
@@ -68,7 +69,7 @@ public final class StandardConnection implements Connection, ConnectionEventList
     private final AtomicReference<Connectable> destination;
     private final AtomicReference<Collection<Relationship>> relationships;
     private final AtomicInteger labelIndex = new AtomicInteger(1);
-    private final AtomicLong zIndex = new AtomicLong(0L);
+    private final AtomicLong zIndex = new AtomicLong(DEFAULT_Z_INDEX);
     private final AtomicReference<String> versionedComponentId = new AtomicReference<>();
     private final ProcessScheduler scheduler;
     private final int hashCode;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/registry/flow/mapping/NiFiRegistryFlowMapper.java
Patch:
@@ -637,6 +637,7 @@ public VersionedLabel mapLabel(final Label label) {
         versionedLabel.setLabel(label.getValue());
         versionedLabel.setPosition(mapPosition(label.getPosition()));
         versionedLabel.setStyle(label.getStyle());
+        versionedLabel.setzIndex(label.getZIndex());
 
         return versionedLabel;
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/FlowFromDOMFactory.java
Patch:
@@ -399,6 +399,7 @@ public static LabelDTO getLabel(final Element element) {
         final Size size = getSize(DomUtils.getChild(element, "size"));
         dto.setWidth(size.getWidth());
         dto.setHeight(size.getHeight());
+        dto.setzIndex(getLong(element, "zIndex"));
         dto.setStyle(getStyle(DomUtils.getChild(element, "styles")));
 
         return dto;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/StandardFlowSerializer.java
Patch:
@@ -363,6 +363,7 @@ private void addLabel(final Element parentElement, final Label label) {
         parentElement.appendChild(element);
         addTextElement(element, "id", label.getIdentifier());
         addTextElement(element, "versionedComponentId", label.getVersionedComponentId());
+        addTextElement(element, "zIndex", label.getZIndex());
 
         addPosition(element, label.getPosition());
         addSize(element, label.getSize());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java
Patch:
@@ -811,6 +811,7 @@ public LabelDTO createLabelDto(final Label label) {
         dto.setLabel(label.getValue());
         dto.setParentGroupId(label.getProcessGroup().getIdentifier());
         dto.setVersionedComponentId(label.getVersionedComponentId().orElse(null));
+        dto.setzIndex(label.getZIndex());
 
         return dto;
     }
@@ -4103,6 +4104,7 @@ public LabelDTO copy(final LabelDTO original) {
         copy.setWidth(original.getWidth());
         copy.setHeight(original.getHeight());
         copy.setVersionedComponentId(original.getVersionedComponentId());
+        copy.setzIndex(original.getzIndex());
 
         return copy;
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/EntityFactory.java
Patch:
@@ -319,6 +319,7 @@ public LabelEntity createLabelEntity(final LabelDTO dto, final RevisionDTO revis
             dimensions.setHeight(dto.getHeight());
             dimensions.setWidth(dto.getWidth());
             entity.setDimensions(dimensions);
+            entity.setzIndex(dto.getzIndex());
 
             if (permissions != null && permissions.getCanRead()) {
                 entity.setComponent(dto);

File: nifi-registry/nifi-registry-core/nifi-registry-flow-diff/src/main/java/org/apache/nifi/registry/flow/diff/StandardFlowComparator.java
Patch:
@@ -375,6 +375,7 @@ private void compare(final VersionedLabel labelA, final VersionedLabel labelB, f
         addIfDifferent(differences, DifferenceType.POSITION_CHANGED, labelA, labelB, VersionedLabel::getHeight);
         addIfDifferent(differences, DifferenceType.POSITION_CHANGED, labelA, labelB, VersionedLabel::getWidth);
         addIfDifferent(differences, DifferenceType.STYLE_CHANGED, labelA, labelB, VersionedLabel::getStyle);
+        addIfDifferent(differences, DifferenceType.ZINDEX_CHANGED, labelA, labelB, VersionedLabel::getzIndex);
     }
 
     private void compare(final VersionedPort portA, final VersionedPort portB, final Set<FlowDifference> differences) {
@@ -500,6 +501,7 @@ private void compare(final VersionedConnection connectionA, final VersionedConne
         addIfDifferent(differences, DifferenceType.PRIORITIZERS_CHANGED, connectionA, connectionB, VersionedConnection::getPrioritizers);
         addIfDifferent(differences, DifferenceType.SELECTED_RELATIONSHIPS_CHANGED, connectionA, connectionB, VersionedConnection::getSelectedRelationships);
         addIfDifferent(differences, DifferenceType.SOURCE_CHANGED, connectionA, connectionB, c -> c.getSource().getId());
+        addIfDifferent(differences, DifferenceType.ZINDEX_CHANGED, connectionA, connectionB, VersionedConnection::getzIndex);
 
         addIfDifferent(differences, DifferenceType.LOAD_BALANCE_STRATEGY_CHANGED, connectionA, connectionB,
                 conn -> conn.getLoadBalanceStrategy() == null ? DEFAULT_LOAD_BALANCE_STRATEGY : conn.getLoadBalanceStrategy());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/controller/StandardProcessorNode.java
Patch:
@@ -127,7 +127,6 @@ public class StandardProcessorNode extends ProcessorNode implements Connectable
     public static final TimeUnit DEFAULT_TIME_UNIT = TimeUnit.MILLISECONDS;
     public static final String DEFAULT_YIELD_PERIOD = "1 sec";
     public static final String DEFAULT_PENALIZATION_PERIOD = "30 sec";
-    private static final String DEFAULT_MAX_BACKOFF_PERIOD = "10 mins";
     private final AtomicReference<ProcessGroup> processGroup;
     private final AtomicReference<ProcessorDetails> processorRef;
     private final AtomicReference<String> identifier;
@@ -208,9 +207,9 @@ public StandardProcessorNode(final LoggableComponent<Processor> processor, final
         executionNode = isExecutionNodeRestricted() ? ExecutionNode.PRIMARY : ExecutionNode.ALL;
         this.hashCode = new HashCodeBuilder(7, 67).append(identifier).toHashCode();
 
-        retryCount = 10;
+        retryCount = DEFAULT_RETRY_COUNT;
         retriedRelationships = new HashSet<>();
-        backoffMechanism = BackoffMechanism.PENALIZE_FLOWFILE;
+        backoffMechanism = DEFAULT_BACKOFF_MECHANISM;
         maxBackoffPeriod = DEFAULT_MAX_BACKOFF_PERIOD;
 
         try {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/ProcessorNode.java
Patch:
@@ -45,6 +45,9 @@
 import java.util.function.Supplier;
 
 public abstract class ProcessorNode extends AbstractComponentNode implements Connectable {
+    public static final int DEFAULT_RETRY_COUNT = 10;
+    public static final BackoffMechanism DEFAULT_BACKOFF_MECHANISM = BackoffMechanism.PENALIZE_FLOWFILE;
+    public static final String DEFAULT_MAX_BACKOFF_PERIOD = "10 mins";
 
     protected final AtomicReference<ScheduledState> scheduledState;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/connectable/StandardConnection.java
Patch:
@@ -529,7 +529,7 @@ private void verifySourceStoppedOrFunnel(final Connection connection) {
         }
 
         // Source is a funnel and is running. We need to then check all of its upstream components.
-        for (final Connection incoming : source.getIncomingConnections()) {
+        for (final Connection incoming : sourceComponent.getIncomingConnections()) {
             verifySourceStoppedOrFunnel(incoming);
         }
     }

File: nifi-nar-bundles/nifi-graph-bundle/nifi-other-graph-services/src/test/java/org/apache/nifi/graph/GremlinClientServiceIT.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.nifi.graph;
 
 import org.apache.commons.io.IOUtils;
+import org.apache.nifi.util.NoOpProcessor;
 import org.apache.nifi.util.TestRunner;
 import org.apache.nifi.util.TestRunners;
 import org.junit.After;
@@ -39,10 +40,9 @@ public class GremlinClientServiceIT {
     @Before
     public void setup() throws Exception {
         clientService = new TestableGremlinClientService();
-        runner = TestRunners.newTestRunner(MockProcessor.class);
+        runner = TestRunners.newTestRunner(NoOpProcessor.class);
         runner.addControllerService("gremlinService", clientService);
         runner.setProperty(clientService, AbstractTinkerpopClientService.CONTACT_POINTS, "localhost");
-        runner.setProperty(MockProcessor.GREMLIN_CLIENT, "gremlinService");
         runner.enableControllerService(clientService);
         runner.assertValid();
 

File: nifi-nar-bundles/nifi-graph-bundle/nifi-other-graph-services/src/test/java/org/apache/nifi/graph/OpenCypherClientServiceIT.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.nifi.graph;
 
+import org.apache.nifi.util.NoOpProcessor;
 import org.apache.nifi.util.TestRunner;
 import org.apache.nifi.util.TestRunners;
 
@@ -57,10 +58,9 @@ public class OpenCypherClientServiceIT {
     @BeforeEach
     public void before() throws Exception {
         service = new OpenCypherClientService();
-        runner = TestRunners.newTestRunner(MockProcessor.class);
+        runner = TestRunners.newTestRunner(NoOpProcessor.class);
         runner.addControllerService("clientService", service);
         runner.setProperty(service, AbstractTinkerpopClientService.CONTACT_POINTS, "localhost");
-        runner.setProperty(MockProcessor.CLIENT, "clientService");
         runner.enableControllerService(service);
         runner.assertValid();
 

File: nifi-bootstrap/src/main/java/org/apache/nifi/bootstrap/NiFiListener.java
Patch:
@@ -33,9 +33,9 @@ public class NiFiListener {
     private ServerSocket serverSocket;
     private volatile Listener listener;
 
-    int start(final RunNiFi runner) throws IOException {
+    int start(final RunNiFi runner, final int listenPort) throws IOException {
         serverSocket = new ServerSocket();
-        serverSocket.bind(new InetSocketAddress("localhost", 0));
+        serverSocket.bind(new InetSocketAddress("localhost", listenPort));
 
         final int localPort = serverSocket.getLocalPort();
         listener = new Listener(serverSocket, runner);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-runtime/src/main/java/org/apache/nifi/BootstrapListener.java
Patch:
@@ -56,11 +56,11 @@ public BootstrapListener(final NiFiEntryPoint nifi, final int bootstrapPort) {
         secretKey = UUID.randomUUID().toString();
     }
 
-    public void start() throws IOException {
+    public void start(final int listenPort) throws IOException {
         logger.debug("Starting Bootstrap Listener to communicate with Bootstrap Port {}", bootstrapPort);
 
         serverSocket = new ServerSocket();
-        serverSocket.bind(new InetSocketAddress("localhost", 0));
+        serverSocket.bind(new InetSocketAddress("localhost", listenPort));
         serverSocket.setSoTimeout(2000);
 
         final int localPort = serverSocket.getLocalPort();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-runtime/src/main/java/org/apache/nifi/NiFi.java
Patch:
@@ -111,7 +111,7 @@ public NiFi(final NiFiProperties properties, ClassLoader rootClassLoader)
                 }
 
                 bootstrapListener = new BootstrapListener(this, port);
-                bootstrapListener.start();
+                bootstrapListener.start(properties.getDefaultListenerBootstrapPort());
             } catch (final NumberFormatException nfe) {
                 throw new RuntimeException("Failed to start NiFi because system property '" + BOOTSTRAP_PORT_PROPERTY + "' is not a valid integer in the range 1 - 65535");
             }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/util/SnippetUtils.java
Patch:
@@ -16,8 +16,6 @@
  */
 package org.apache.nifi.web.util;
 
-
-
 import org.apache.commons.lang3.StringUtils;
 import org.apache.nifi.authorization.AccessPolicy;
 import org.apache.nifi.authorization.RequestAction;
@@ -1014,5 +1012,4 @@ private void normalizeCoordinates(Collection<? extends ComponentDTO> components)
             }
         }
     }
-
 }

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/script/impl/JythonScriptRunner.java
Patch:
@@ -38,7 +38,7 @@ public JythonScriptRunner(ScriptEngine engine, String scriptBody, String[] modul
         // Add prefix for import sys and all jython modules
         String prefix = "import sys\n"
                 + Arrays.stream(modulePaths).map((modulePath) -> "sys.path.append(" + PyString.encode_UnicodeEscape(modulePath, true) + ")")
-                .collect(Collectors.joining("\n"));
+                .collect(Collectors.joining("\n")) + "\n";
         compiledScript = ((Compilable) engine).compile(prefix + scriptBody);
     }
 

File: nifi-manifest/nifi-extension-manifest-parser/src/test/java/org/apache/nifi/extension/manifest/parser/jaxb/TestJAXBExtensionManifestParser.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.extension.manifest.parser.jackson;
+package org.apache.nifi.extension.manifest.parser.jaxb;
 
 import org.apache.nifi.extension.manifest.Cardinality;
 import org.apache.nifi.extension.manifest.DefaultSchedule;
@@ -44,13 +44,13 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 
-public class TestJacksonExtensionManifestParser {
+public class TestJAXBExtensionManifestParser {
 
     private ExtensionManifestParser parser;
 
     @Before
     public void setup() {
-        parser = new JacksonExtensionManifestParser();
+        parser = new JAXBExtensionManifestParser();
     }
 
     @Test

File: nifi-manifest/nifi-runtime-manifest-core/src/main/java/org/apache/nifi/runtime/manifest/impl/RuntimeManifestGenerator.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.nifi.c2.protocol.component.api.BuildInfo;
 import org.apache.nifi.c2.protocol.component.api.RuntimeManifest;
 import org.apache.nifi.extension.manifest.parser.ExtensionManifestParser;
-import org.apache.nifi.extension.manifest.parser.jackson.JacksonExtensionManifestParser;
+import org.apache.nifi.extension.manifest.parser.jaxb.JAXBExtensionManifestParser;
 import org.apache.nifi.runtime.manifest.ExtensionManifestProvider;
 import org.apache.nifi.runtime.manifest.RuntimeManifestSerializer;
 import org.slf4j.Logger;
@@ -97,7 +97,7 @@ public void execute() throws IOException {
     }
 
     private ExtensionManifestProvider createExtensionManifestProvider() {
-        final ExtensionManifestParser extensionManifestParser = new JacksonExtensionManifestParser();
+        final ExtensionManifestParser extensionManifestParser = new JAXBExtensionManifestParser();
         return new DirectoryExtensionManifestProvider(extensionManifestBaseDir, extensionManifestParser);
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/StandardHttpResponseMapper.java
Patch:
@@ -68,6 +68,7 @@
 import org.apache.nifi.cluster.coordination.http.endpoints.ReportingTaskEndpointMerger;
 import org.apache.nifi.cluster.coordination.http.endpoints.ReportingTaskTypesEndpointMerger;
 import org.apache.nifi.cluster.coordination.http.endpoints.ReportingTasksEndpointMerger;
+import org.apache.nifi.cluster.coordination.http.endpoints.RuntimeManifestEndpointMerger;
 import org.apache.nifi.cluster.coordination.http.endpoints.SearchUsersEndpointMerger;
 import org.apache.nifi.cluster.coordination.http.endpoints.StatusHistoryEndpointMerger;
 import org.apache.nifi.cluster.coordination.http.endpoints.SystemDiagnosticsEndpointMerger;
@@ -171,6 +172,7 @@ public StandardHttpResponseMapper(final NiFiProperties nifiProperties) {
         endpointMergers.add(new ParameterContextEndpointMerger());
         endpointMergers.add(new ParameterContextUpdateEndpointMerger());
         endpointMergers.add(new VerifyConfigEndpointMerger());
+        endpointMergers.add(new RuntimeManifestEndpointMerger());
     }
 
     @Override

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-nar-utils/src/main/java/org/apache/nifi/nar/ExtensionManager.java
Patch:
@@ -160,4 +160,5 @@ default InstanceClassLoader createInstanceClassLoader(String classType, String i
      * Logs details about the files loaded by the class loaders
      */
     void logClassLoaderDetails();
+
 }

File: nifi-nar-bundles/nifi-extension-utils/nifi-record-utils/nifi-avro-record-utils/src/main/java/org/apache/nifi/avro/AvroTypeUtil.java
Patch:
@@ -626,8 +626,7 @@ public static GenericRecord createAvroRecord(final Record record, final Schema a
                 continue;
             }
 
-            final Optional<RecordField> recordField = recordSchema.getField(field.name());
-            if (!recordField.isPresent() && rec.get(field.name()) == null) {
+            if (rec.get(field.name()) == null) {
                 rec.put(field.name(), field.defaultVal());
             }
         }

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/LookupRecord.java
Patch:
@@ -308,9 +308,9 @@ protected Set<Relationship> route(final Record record, final RecordSchema writeS
     private Set<Relationship> doInPlaceReplacement(Record record, FlowFile flowFile, ProcessContext context, Tuple<Map<String, RecordPath>, RecordPath> flowFileContext) {
         final Map<String, RecordPath> recordPaths = flowFileContext.getKey();
         final Map<String, Object> lookupCoordinates = new HashMap<>(recordPaths.size());
+        final String coordinateKey = lookupService.getRequiredKeys().iterator().next();
 
         for (final Map.Entry<String, RecordPath> entry : recordPaths.entrySet()) {
-            final String coordinateKey = entry.getKey();
             final RecordPath recordPath = entry.getValue();
 
             final RecordPathResult pathResult = recordPath.evaluate(record);

File: nifi-nar-bundles/nifi-websocket-bundle/nifi-websocket-processors/src/main/java/org/apache/nifi/processors/websocket/AbstractWebSocketGatewayProcessor.java
Patch:
@@ -128,9 +128,8 @@ public void onWebSocketServiceReady(final WebSocketService webSocketService, fin
             if (context.hasIncomingConnection()) {
                 final ProcessSession session = processSessionFactory.createSession();
                 final FlowFile flowFile = session.get();
-                final Map<String, String> attributes = flowFile.getAttributes();
                 try {
-                    webSocketClientService.connect(endpointId, attributes);
+                    webSocketClientService.connect(endpointId, flowFile.getAttributes());
                 } finally {
                     session.remove(flowFile);
                     session.commitAsync();
@@ -195,7 +194,7 @@ public final void onTrigger(final ProcessContext context, final ProcessSessionFa
                 throw new ProcessException("Failed to register processor to WebSocket service due to: " + e, e);
             }
 
-        } else {
+        } else if (context.hasIncomingConnection()) {
             try {
                 onWebSocketServiceReady(webSocketService, context);
             } catch (IOException e) {

File: nifi-nar-bundles/nifi-extension-utils/nifi-processor-utils/src/main/java/org/apache/nifi/processor/util/put/AbstractPutEventProcessor.java
Patch:
@@ -193,7 +193,7 @@ protected void init(final ProcessorInitializationContext context) {
      * @return a list of relationships
      */
     protected List<Relationship> getAdditionalRelationships() {
-        return Collections.EMPTY_LIST;
+        return Collections.emptyList();
     }
 
     /**
@@ -202,7 +202,7 @@ protected List<Relationship> getAdditionalRelationships() {
      * @return a list of properties
      */
     protected List<PropertyDescriptor> getAdditionalProperties() {
-        return Collections.EMPTY_LIST;
+        return Collections.emptyList();
     }
 
     @Override
@@ -251,6 +251,7 @@ protected EventSender<?> getEventSender(final ProcessContext context) {
         factory.setMaxConnections(context.getMaxConcurrentTasks());
         factory.setSocketSendBufferSize(context.getProperty(MAX_SOCKET_SEND_BUFFER_SIZE).asDataSize(DataUnit.B).intValue());
         factory.setSingleEventPerConnection(singleEventPerConnection);
+        factory.setShutdownQuietPeriod(Duration.ZERO); // Quiet period not necessary since sending threads will have completed before shutting down event sender
 
         final int timeout = context.getProperty(TIMEOUT).evaluateAttributeExpressions().asTimePeriod(TimeUnit.MILLISECONDS).intValue();
         factory.setTimeout(Duration.ofMillis(timeout));

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestPutTCP.java
Patch:
@@ -149,7 +149,6 @@ public void testRunSuccessPruneSenders() throws Exception {
         assertMessagesReceived(VALID_FILES);
 
         runner.setProperty(PutTCP.IDLE_EXPIRATION, "500 ms");
-        Thread.sleep(1000);
         runner.run(1, false, false);
         runner.clearTransferState();
         sendTestData(VALID_FILES);
@@ -181,7 +180,6 @@ public void testRunSuccessConnectionFailure() throws Exception {
 
         shutdownServer();
         sendTestData(VALID_FILES);
-        Thread.sleep(500);
         runner.assertQueueEmpty();
 
         configureProperties(TCP_SERVER_ADDRESS, OUTGOING_MESSAGE_DELIMITER, false);
@@ -212,7 +210,6 @@ public void testRunSuccessLargeValidFile() throws Exception {
     public void testRunSuccessFiveHundredMessages() throws Exception {
         configureProperties(TCP_SERVER_ADDRESS, OUTGOING_MESSAGE_DELIMITER, false);
         createTestServer(port);
-        Thread.sleep(1000);
         final String[] testData = createContent(VALID_SMALL_FILE_SIZE);
         sendTestData(testData, LOAD_TEST_ITERATIONS, LOAD_TEST_THREAD_COUNT);
         assertMessagesReceived(testData, LOAD_TEST_ITERATIONS);

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ExecuteSQL.java
Patch:
@@ -134,6 +134,7 @@ public ExecuteSQL() {
         pds.add(MAX_ROWS_PER_FLOW_FILE);
         pds.add(OUTPUT_BATCH_SIZE);
         pds.add(FETCH_SIZE);
+        pds.add(AUTO_COMMIT);
         propDescriptors = Collections.unmodifiableList(pds);
     }
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ExecuteSQLRecord.java
Patch:
@@ -140,6 +140,7 @@ public ExecuteSQLRecord() {
         pds.add(MAX_ROWS_PER_FLOW_FILE);
         pds.add(OUTPUT_BATCH_SIZE);
         pds.add(FETCH_SIZE);
+        pds.add(AUTO_COMMIT);
         propDescriptors = Collections.unmodifiableList(pds);
     }
 

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-2-0-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/PublishKafkaRecord_2_0.java
Patch:
@@ -166,7 +166,7 @@ public class PublishKafkaRecord_2_0 extends AbstractProcessor {
         .required(true)
         .expressionLanguageSupported(NONE)
         .allowableValues(DELIVERY_BEST_EFFORT, DELIVERY_ONE_NODE, DELIVERY_REPLICATED)
-        .defaultValue(DELIVERY_BEST_EFFORT.getValue())
+        .defaultValue(DELIVERY_REPLICATED.getValue())
         .build();
 
     static final PropertyDescriptor METADATA_WAIT_TIME = new Builder()

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-2-0-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/PublishKafka_2_0.java
Patch:
@@ -127,7 +127,7 @@ public class PublishKafka_2_0 extends AbstractProcessor {
         .required(true)
         .expressionLanguageSupported(NONE)
         .allowableValues(DELIVERY_BEST_EFFORT, DELIVERY_ONE_NODE, DELIVERY_REPLICATED)
-        .defaultValue(DELIVERY_BEST_EFFORT.getValue())
+        .defaultValue(DELIVERY_REPLICATED.getValue())
         .build();
 
     static final PropertyDescriptor METADATA_WAIT_TIME = new Builder()

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-2-6-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/PublishKafkaRecord_2_6.java
Patch:
@@ -169,7 +169,7 @@ public class PublishKafkaRecord_2_6 extends AbstractProcessor implements Verifia
         .required(true)
         .expressionLanguageSupported(NONE)
         .allowableValues(DELIVERY_BEST_EFFORT, DELIVERY_ONE_NODE, DELIVERY_REPLICATED)
-        .defaultValue(DELIVERY_BEST_EFFORT.getValue())
+        .defaultValue(DELIVERY_REPLICATED.getValue())
         .build();
 
     static final PropertyDescriptor METADATA_WAIT_TIME = new Builder()

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-2-6-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/PublishKafka_2_6.java
Patch:
@@ -128,7 +128,7 @@ public class PublishKafka_2_6 extends AbstractProcessor implements VerifiablePro
         .required(true)
         .expressionLanguageSupported(ExpressionLanguageScope.NONE)
         .allowableValues(DELIVERY_BEST_EFFORT, DELIVERY_ONE_NODE, DELIVERY_REPLICATED)
-        .defaultValue(DELIVERY_BEST_EFFORT.getValue())
+        .defaultValue(DELIVERY_REPLICATED.getValue())
         .build();
 
     static final PropertyDescriptor METADATA_WAIT_TIME = new PropertyDescriptor.Builder()

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-2-6-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/PublishKafkaRecord_2_6.java
Patch:
@@ -116,7 +116,8 @@ public class PublishKafkaRecord_2_6 extends AbstractProcessor implements Verifia
         "Messages will be assigned partitions in a round-robin fashion, sending the first message to Partition 1, "
             + "the next Partition to Partition 2, and so on, wrapping as necessary.");
     static final AllowableValue RANDOM_PARTITIONING = new AllowableValue("org.apache.kafka.clients.producer.internals.DefaultPartitioner",
-        "DefaultPartitioner", "Messages will be assigned to random partitions.");
+        "DefaultPartitioner", "The default partitioning strategy will choose the sticky partition that changes when the batch is full "
+                + "(See KIP-480 for details about sticky partitioning).");
     static final AllowableValue RECORD_PATH_PARTITIONING = new AllowableValue(Partitioners.RecordPathPartitioner.class.getName(),
         "RecordPath Partitioner", "Interprets the <Partition> property as a RecordPath that will be evaluated against each Record to determine which partition the Record will go to. All Records " +
         "that have the same value for the given RecordPath will go to the same Partition.");

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-2-6-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/PublishKafka_2_6.java
Patch:
@@ -102,7 +102,8 @@ public class PublishKafka_2_6 extends AbstractProcessor implements VerifiablePro
         "Messages will be assigned partitions in a round-robin fashion, sending the first message to Partition 1, "
             + "the next Partition to Partition 2, and so on, wrapping as necessary.");
     static final AllowableValue RANDOM_PARTITIONING = new AllowableValue("org.apache.kafka.clients.producer.internals.DefaultPartitioner",
-        "DefaultPartitioner", "Messages will be assigned to random partitions.");
+        "DefaultPartitioner", "The default partitioning strategy will choose the sticky partition that changes when the batch is full "
+                + "(See KIP-480 for details about sticky partitioning).");
     static final AllowableValue EXPRESSION_LANGUAGE_PARTITIONING = new AllowableValue(Partitioners.ExpressionLanguagePartitioner.class.getName(), "Expression Language Partitioner",
         "Interprets the <Partition> property as Expression Language that will be evaluated against each FlowFile. This Expression will be evaluated once against the FlowFile, " +
             "so all Records in a given FlowFile will go to the same partition.");

File: nifi-nar-bundles/nifi-extension-utils/nifi-hadoop-utils/src/main/java/org/apache/nifi/processors/hadoop/AbstractHadoopProcessor.java
Patch:
@@ -205,7 +205,7 @@ protected List<PropertyDescriptor> getSupportedPropertyDescriptors() {
 
     @Override
     public String getClassloaderIsolationKey(final PropertyContext context) {
-        final String explicitKerberosPrincipal = context.getProperty(kerberosProperties.getKerberosPrincipal()).getValue();
+        final String explicitKerberosPrincipal = context.getProperty(kerberosProperties.getKerberosPrincipal()).evaluateAttributeExpressions().getValue();
         if (explicitKerberosPrincipal != null) {
             return explicitKerberosPrincipal;
         }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/controller/service/StandardControllerServiceNode.java
Patch:
@@ -338,8 +338,9 @@ public void verifyCanDisable(final Set<ControllerServiceNode> ignoreReferences)
 
     @Override
     public void verifyCanEnable() {
-        if (getState() != ControllerServiceState.DISABLED) {
-            throw new IllegalStateException(getControllerServiceImplementation().getIdentifier() + " cannot be enabled because it is not disabled");
+        final ControllerServiceState state = getState();
+        if (state != ControllerServiceState.DISABLED) {
+            throw new IllegalStateException(getControllerServiceImplementation().getIdentifier() + " cannot be enabled because it is not disabled - it has a state of " + state);
         }
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-nar-utils/src/main/java/org/apache/nifi/nar/NarThreadContextClassLoader.java
Patch:
@@ -266,6 +266,7 @@ public static <T> T createInstance(final ExtensionManager extensionManager, fina
 
     private static ClassLoader createClassLoader(final String implementationClassName, final String instanceId, final Bundle bundle, final ExtensionManager extensionManager)
                 throws ClassNotFoundException {
+
         final ClassLoader bundleClassLoader = bundle.getClassLoader();
         final Class<?> rawClass = Class.forName(implementationClassName, true, bundleClassLoader);
 

File: nifi-nar-bundles/nifi-snmp-bundle/nifi-snmp-processors/src/test/java/org/apache/nifi/snmp/configuration/SNMPConfigurationTest.java
Patch:
@@ -32,7 +32,7 @@
 
 public class SNMPConfigurationTest {
 
-    private static final int MANAGER_PORT = NetworkUtils.availablePort();
+    private static final int MANAGER_PORT = NetworkUtils.getAvailableUdpPort();
     private static final String TARGET_PORT = "55556";
     private static final int RETRIES = 3;
     private static final int VERSION = SnmpConstants.version3;

File: nifi-nar-bundles/nifi-snmp-bundle/nifi-snmp-processors/src/test/java/org/apache/nifi/snmp/operations/SNMPTrapReceiverHandlerTest.java
Patch:
@@ -58,7 +58,7 @@ public void testTrapReceiverCreatesCommandResponder() {
         final ProcessSessionFactory mockProcessSessionFactory = mock(ProcessSessionFactory.class);
         final MockComponentLog mockComponentLog = new MockComponentLog("componentId", new Object());
         final Snmp mockSnmpManager = mock(Snmp.class);
-        when(snmpConfiguration.getManagerPort()).thenReturn(NetworkUtils.availablePort());
+        when(snmpConfiguration.getManagerPort()).thenReturn(NetworkUtils.getAvailableUdpPort());
         when(snmpConfiguration.getVersion()).thenReturn(SnmpConstants.version1);
 
         final SNMPTrapReceiverHandler trapReceiverHandler = new SNMPTrapReceiverHandler(snmpConfiguration, null);
@@ -80,7 +80,7 @@ public void testCloseTrapReceiverCleansUpResources() throws IOException {
         final Snmp mockSnmpManager = mock(Snmp.class);
 
         when(mockSnmpManager.getUSM()).thenReturn(mockUsm);
-        when(snmpConfiguration.getManagerPort()).thenReturn(NetworkUtils.availablePort());
+        when(snmpConfiguration.getManagerPort()).thenReturn(NetworkUtils.getAvailableUdpPort());
         when(snmpConfiguration.getVersion()).thenReturn(SnmpConstants.version1);
 
         final SNMPTrapReceiverHandler trapReceiverHandler = new SNMPTrapReceiverHandler(snmpConfiguration, null);
@@ -118,7 +118,7 @@ public void testAddUsmUsers() throws JsonProcessingException, FileNotFoundExcept
         final Snmp mockSnmpManager = mock(Snmp.class);
         final USM mockUsm = mock(USM.class);
 
-        when(snmpConfiguration.getManagerPort()).thenReturn(NetworkUtils.availablePort());
+        when(snmpConfiguration.getManagerPort()).thenReturn(NetworkUtils.getAvailableUdpPort());
         when(snmpConfiguration.getVersion()).thenReturn(SnmpConstants.version3);
         doAnswer(invocation -> {
             UsmUser usmUser = (UsmUser) invocation.getArgument(0);

File: nifi-nar-bundles/nifi-snmp-bundle/nifi-snmp-processors/src/test/java/org/apache/nifi/snmp/processors/AbstractSNMPProcessorTest.java
Patch:
@@ -53,7 +53,7 @@ public class AbstractSNMPProcessorTest {
 
     @Before
     public void init() {
-        getTestRunner = new SNMPV1TestRunnerFactory().createSnmpGetTestRunner(NetworkUtils.availablePort(), TEST_OID, "GET");
+        getTestRunner = new SNMPV1TestRunnerFactory().createSnmpGetTestRunner(NetworkUtils.getAvailableUdpPort(), TEST_OID, "GET");
         getSNMP = (GetSNMP) getTestRunner.getProcessor();
         mockProcessContext = new MockProcessContext(getSNMP);
         mockProcessSession = new MockProcessSession(new SharedSessionState(getSNMP, new AtomicLong(0L)), getSNMP);

File: nifi-nar-bundles/nifi-snmp-bundle/nifi-snmp-processors/src/test/java/org/apache/nifi/snmp/processors/GetSNMPTest.java
Patch:
@@ -36,7 +36,7 @@ public class GetSNMPTest {
 
     @Test
     public void testOnTriggerWithGetStrategyPerformsSnmpGet() {
-        final TestRunner getSnmpTestRunner = new SNMPV1TestRunnerFactory().createSnmpGetTestRunner(NetworkUtils.availablePort(), OID, "GET");
+        final TestRunner getSnmpTestRunner = new SNMPV1TestRunnerFactory().createSnmpGetTestRunner(NetworkUtils.getAvailableUdpPort(), OID, "GET");
         final GetSNMP spyGetSNMP = spy((GetSNMP) getSnmpTestRunner.getProcessor());
         final MockProcessSession mockProcessSession = new MockProcessSession(new SharedSessionState(spyGetSNMP, new AtomicLong(0L)), spyGetSNMP);
 
@@ -49,7 +49,7 @@ public void testOnTriggerWithGetStrategyPerformsSnmpGet() {
 
     @Test
     public void testOnTriggerWithWalkStrategyPerformsSnmpWalk() {
-        final TestRunner getSnmpTestRunner = new SNMPV1TestRunnerFactory().createSnmpGetTestRunner(NetworkUtils.availablePort(), OID, "WALK");
+        final TestRunner getSnmpTestRunner = new SNMPV1TestRunnerFactory().createSnmpGetTestRunner(NetworkUtils.getAvailableUdpPort(), OID, "WALK");
         final GetSNMP spyGetSNMP = spy((GetSNMP) getSnmpTestRunner.getProcessor());
         final MockProcessSession mockProcessSession = new MockProcessSession(new SharedSessionState(spyGetSNMP, new AtomicLong(0L)), spyGetSNMP);
 

File: nifi-nar-bundles/nifi-snmp-bundle/nifi-snmp-processors/src/test/java/org/apache/nifi/snmp/processors/TrapSNMPIntegrationTest.java
Patch:
@@ -40,7 +40,7 @@ public class TrapSNMPIntegrationTest {
 
     @Test
     public void testSendReceiveV1Trap() throws InterruptedException {
-        final int listenPort = NetworkUtils.availablePort();
+        final int listenPort = NetworkUtils.getAvailableUdpPort();
 
         final V1TrapConfiguration v1TrapConfiguration = TrapConfigurationFactory.getV1TrapConfiguration();
         final SNMPTestRunnerFactory v1TestRunnerFactory = new SNMPV1TestRunnerFactory();
@@ -72,7 +72,7 @@ public void testSendReceiveV1Trap() throws InterruptedException {
 
     @Test
     public void testSendReceiveV2Trap() throws InterruptedException {
-        final int listenPort = NetworkUtils.availablePort();
+        final int listenPort = NetworkUtils.getAvailableUdpPort();
 
         final V2TrapConfiguration v2TrapConfiguration = TrapConfigurationFactory.getV2TrapConfiguration();
         final SNMPTestRunnerFactory v2cTestRunnerFactory = new SNMPV2cTestRunnerFactory();

File: nifi-api/src/main/java/org/apache/nifi/flow/ScheduledState.java
Patch:
@@ -18,5 +18,6 @@
 
 public enum ScheduledState {
     ENABLED,
-    DISABLED;
+    DISABLED,
+    RUNNING;
 }

File: nifi-api/src/main/java/org/apache/nifi/flow/VersionedProcessGroup.java
Patch:
@@ -47,6 +47,7 @@ public class VersionedProcessGroup extends VersionedComponent {
     private Long defaultBackPressureObjectThreshold;
     private String defaultBackPressureDataSizeThreshold;
 
+
     @ApiModelProperty("The child Process Groups")
     public Set<VersionedProcessGroup> getProcessGroups() {
         return processGroups;

File: nifi-api/src/main/java/org/apache/nifi/flow/VersionedProcessor.java
Patch:
@@ -53,7 +53,7 @@ public void setSchedulingPeriod(String setSchedulingPeriod) {
         this.schedulingPeriod = setSchedulingPeriod;
     }
 
-    @ApiModelProperty("Indcates whether the prcessor should be scheduled to run in event or timer driven mode.")
+    @ApiModelProperty("Indicates whether the processor should be scheduled to run in event or timer driven mode.")
     public String getSchedulingStrategy() {
         return schedulingStrategy;
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/controller/StandardProcessorNode.java
Patch:
@@ -1509,9 +1509,8 @@ private void run(ScheduledExecutorService taskScheduler, long administrativeYiel
         if (starting) { // will ensure that the Processor represented by this node can only be started once
             initiateStart(taskScheduler, administrativeYieldMillis, timeoutMillis, processContextFactory, schedulingAgentCallback);
         } else {
-            final String procName = processorRef.get().toString();
-            LOG.warn("Cannot start {} because it is not currently stopped. Current state is {}", procName, currentState);
-            procLog.warn("Cannot start {} because it is not currently stopped. Current state is {}", new Object[]{procName, currentState});
+            final String procName = processorRef.get().getProcessor().toString();
+            procLog.warn("Cannot start {} because it is not currently stopped. Current state is {}", procName, currentState);
         }
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/registry/flow/mapping/InstantiatedConnectableComponent.java
Patch:
@@ -29,7 +29,7 @@ public InstantiatedConnectableComponent(final String instanceId, final String in
     }
 
     @Override
-    public String getInstanceId() {
+    public String getInstanceIdentifier() {
         return instanceId;
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/registry/flow/mapping/InstantiatedVersionedComponent.java
Patch:
@@ -21,9 +21,7 @@
 
 public interface InstantiatedVersionedComponent {
 
-    // mark transient so fields are ignored when serializing all versioned component types
-    @XmlTransient
-    String getInstanceId();
+    String getInstanceIdentifier();
 
     @XmlTransient
     String getInstanceGroupId();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/registry/flow/mapping/InstantiatedVersionedConnection.java
Patch:
@@ -29,7 +29,7 @@ public InstantiatedVersionedConnection(final String instanceId, final String ins
     }
 
     @Override
-    public String getInstanceId() {
+    public String getInstanceIdentifier() {
         return instanceId;
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/registry/flow/mapping/InstantiatedVersionedControllerService.java
Patch:
@@ -29,7 +29,7 @@ public InstantiatedVersionedControllerService(final String instanceId, final Str
     }
 
     @Override
-    public String getInstanceId() {
+    public String getInstanceIdentifier() {
         return instanceId;
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/registry/flow/mapping/InstantiatedVersionedFunnel.java
Patch:
@@ -29,7 +29,7 @@ public InstantiatedVersionedFunnel(final String instanceId, final String instanc
     }
 
     @Override
-    public String getInstanceId() {
+    public String getInstanceIdentifier() {
         return instanceId;
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/registry/flow/mapping/InstantiatedVersionedLabel.java
Patch:
@@ -29,7 +29,7 @@ public InstantiatedVersionedLabel(final String instanceId, final String instance
     }
 
     @Override
-    public String getInstanceId() {
+    public String getInstanceIdentifier() {
         return instanceId;
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/registry/flow/mapping/InstantiatedVersionedPort.java
Patch:
@@ -29,7 +29,7 @@ public InstantiatedVersionedPort(final String instanceId, final String instanceG
     }
 
     @Override
-    public String getInstanceId() {
+    public String getInstanceIdentifier() {
         return instanceId;
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/registry/flow/mapping/InstantiatedVersionedProcessGroup.java
Patch:
@@ -35,7 +35,7 @@ public InstantiatedVersionedProcessGroup(final String instanceId, final String i
     }
 
     @Override
-    public String getInstanceId() {
+    public String getInstanceIdentifier() {
         return instanceId;
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/registry/flow/mapping/InstantiatedVersionedProcessor.java
Patch:
@@ -29,7 +29,7 @@ public InstantiatedVersionedProcessor(final String instanceId, final String inst
     }
 
     @Override
-    public String getInstanceId() {
+    public String getInstanceIdentifier() {
         return instanceId;
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/registry/flow/mapping/InstantiatedVersionedRemoteGroupPort.java
Patch:
@@ -29,7 +29,7 @@ public InstantiatedVersionedRemoteGroupPort(final String instanceId, final Strin
     }
 
     @Override
-    public String getInstanceId() {
+    public String getInstanceIdentifier() {
         return instanceId;
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/registry/flow/mapping/InstantiatedVersionedRemoteProcessGroup.java
Patch:
@@ -29,7 +29,7 @@ public InstantiatedVersionedRemoteProcessGroup(final String instanceId, final St
     }
 
     @Override
-    public String getInstanceId() {
+    public String getInstanceIdentifier() {
         return instanceId;
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/ProcessorNode.java
Patch:
@@ -174,7 +174,7 @@ public ScheduledState getScheduledState() {
      * states such as STOPPING and STARTING.
      *
      * @return the physical state of this processor [DISABLED, STOPPED, RUNNING,
-     *         STARTIING, STOPIING]
+     *         STARTING, STOPPING]
      */
     public ScheduledState getPhysicalScheduledState() {
         return this.scheduledState.get();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/repository/WriteAheadFlowFileRepository.java
Patch:
@@ -830,7 +830,9 @@ private Optional<Collection<SerializedRepositoryRecord>> migrateFromMinimalLocki
 
     @Override
     public Set<String> findQueuesWithFlowFiles(final FlowFileSwapManager swapManager) throws IOException {
-        recoveredRecords = wal.recoverRecords();
+        if (recoveredRecords == null) {
+            recoveredRecords = wal.recoverRecords();
+        }
 
         final Set<String> queueIds = new HashSet<>();
         for (final SerializedRepositoryRecord record : recoveredRecords) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/FlowSynchronizer.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.nifi.controller.MissingBundleException;
 import org.apache.nifi.controller.UninheritableFlowException;
 import org.apache.nifi.encrypt.PropertyEncryptor;
+import org.apache.nifi.groups.BundleUpdateStrategy;
 import org.apache.nifi.services.FlowService;
 
 /**
@@ -43,7 +44,7 @@ public interface FlowSynchronizer {
      * @throws FlowSynchronizationException if updates to the controller failed. If this exception is thrown, then the controller should be considered unsafe to be used
      * @throws MissingBundleException if the proposed flow cannot be loaded by the controller because it contains a bundle that is not available to the controller
      */
-    void sync(FlowController controller, DataFlow dataFlow, PropertyEncryptor encryptor, FlowService flowService)
+    void sync(FlowController controller, DataFlow dataFlow, PropertyEncryptor encryptor, FlowService flowService, BundleUpdateStrategy bundleUpdateStrategy)
             throws FlowSerializationException, UninheritableFlowException, FlowSynchronizationException, MissingBundleException;
 
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/ScheduledStateLookup.java
Patch:
@@ -27,7 +27,8 @@ public interface ScheduledStateLookup {
 
     ScheduledState getScheduledState(Port port);
 
-    public static final ScheduledStateLookup IDENTITY_LOOKUP = new ScheduledStateLookup() {
+
+    ScheduledStateLookup IDENTITY_LOOKUP = new ScheduledStateLookup() {
         @Override
         public ScheduledState getScheduledState(final ProcessorNode procNode) {
             return procNode.getDesiredState();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/registry/flow/mapping/NiFiRegistryFlowMapperTest.java
Patch:
@@ -454,7 +454,6 @@ private ProcessorNode prepareProcessor(final ProcessGroup processGroup, final Co
         prepareComponentAuthorizable(processorNode, processGroup.getIdentifier());
         preparePositionable(processorNode);
         prepareConnectable(processorNode, ConnectableType.PROCESSOR);
-        when(processorNode.getProcessGroup()).thenReturn(processGroup);
         when(processorNode.getAutoTerminatedRelationships()).thenReturn(Collections.emptySet());
         when(processorNode.getBulletinLevel()).thenReturn(LogLevel.INFO);
         when(processorNode.getExecutionNode()).thenReturn(ExecutionNode.ALL);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-headless-server/src/main/java/org/apache/nifi/headless/HeadlessNiFiServer.java
Patch:
@@ -98,8 +98,6 @@ public void start() {
 
             // Enrich the flow xml using the Extension Manager mapping
             final FlowParser flowParser = new FlowParser();
-            final FlowEnricher flowEnricher = new FlowEnricher(this, flowParser, props);
-            flowEnricher.enrichFlowWithBundleInformation();
             logger.info("Loading Flow...");
 
             FlowFileEventRepository flowFileEventRepository = new RingBufferEventRepository(5);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/registry/flow/FlowRegistryUtils.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.nifi.flow.Bundle;
 import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.util.Tuple;
-import org.apache.nifi.web.NiFiCoreException;
 import org.apache.nifi.web.NiFiServiceFacade;
 import org.apache.nifi.web.api.dto.BundleDTO;
 
@@ -41,7 +40,7 @@ public static Set<ConfigurableComponent> getRestrictedComponents(final Versioned
         for (final Tuple<String, BundleCoordinate> tuple : componentTypes) {
             final ConfigurableComponent component = serviceFacade.getTempComponent(tuple.getKey(), tuple.getValue());
             if (component == null) {
-                throw new NiFiCoreException("Could not create an instance of component " + tuple.getKey() + " using bundle coordinates " + tuple.getValue());
+                continue;
             }
 
             final boolean isRestricted = component.getClass().isAnnotationPresent(Restricted.class);

File: nifi-registry/nifi-registry-core/nifi-registry-framework/src/main/java/org/apache/nifi/registry/service/RegistryService.java
Patch:
@@ -72,6 +72,7 @@
 import java.util.Set;
 import java.util.SortedSet;
 import java.util.TreeSet;
+import java.util.function.Function;
 import java.util.stream.Collectors;
 
 /**
@@ -930,7 +931,7 @@ public VersionedFlowDifference getFlowDiff(final String bucketIdentifier, final
 
         // Compare the two versions of the flow
         final FlowComparator flowComparator = new StandardFlowComparator(comparableFlowA, comparableFlowB,
-                null, new ConciseEvolvingDifferenceDescriptor());
+                null, new ConciseEvolvingDifferenceDescriptor(), Function.identity());
         final FlowComparison flowComparison = flowComparator.compare();
 
         final VersionedFlowDifference result = new VersionedFlowDifference();

File: nifi-system-tests/nifi-system-test-suite/src/test/java/org/apache/nifi/tests/system/clustering/JoinClusterWithMissingConnectionWithData.java
Patch:
@@ -31,7 +31,7 @@
 
 import java.io.IOException;
 
-public class JoinCluslterWithMissingConnectionWithData  extends NiFiSystemIT {
+public class JoinClusterWithMissingConnectionWithData extends NiFiSystemIT {
     private static final String GENERATE_UUID = "6be9a7e7-016e-1000-0000-00004700499d";
     private static final String CONNECTION_UUID = "6be9a991-016e-1000-ffff-fffffebf0217";
 

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/client/nifi/ReportingTasksClient.java
Patch:
@@ -40,4 +40,6 @@ public interface ReportingTasksClient {
 
     VerifyConfigRequestEntity deleteConfigVerificationRequest(String taskId, String verificationRequestId) throws NiFiClientException, IOException;
 
+    ReportingTaskEntity deleteReportingTask(ReportingTaskEntity reportingTask) throws NiFiClientException, IOException;
+
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/diagnostics/bootstrap/tasks/FlowConfigurationDiagnosticTask.java
Patch:
@@ -52,7 +52,7 @@ public DiagnosticsDumpElement captureDump(final boolean verbose) {
         details.add("Local Input Ports: " + counts.getLocalInputPortCount());
         details.add("Local Output Ports: " + counts.getLocalOutputPortCount());
         details.add("Site-to-Site Input Ports: " + counts.getPublicInputPortCount());
-        details.add("Site-to-Site Input Ports: " + counts.getPublicOutputPortCount());
+        details.add("Site-to-Site Output Ports: " + counts.getPublicOutputPortCount());
         details.add("Active RPG Ports: " + counts.getActiveRemotePortCount());
         details.add("Inactive RPG Ports: " + counts.getInactiveRemotePortCount());
         details.add("");

File: nifi-commons/nifi-record/src/main/java/org/apache/nifi/serialization/record/ResultSetRecordSet.java
Patch:
@@ -455,7 +455,7 @@ private static RecordFieldType getFieldType(final int sqlType, final String valu
             case Types.BOOLEAN:
                 return RecordFieldType.BOOLEAN;
             case Types.CHAR:
-                return RecordFieldType.CHAR;
+                return RecordFieldType.STRING;
             case Types.DATE:
                 return getRecordFieldType(RecordFieldType.DATE, useLogicalTypes);
             case Types.NUMERIC:

File: nifi-commons/nifi-record/src/test/java/org/apache/nifi/serialization/record/ResultSetRecordSetTest.java
Patch:
@@ -87,7 +87,7 @@ public class ResultSetRecordSetTest {
             new TestColumn(3, COLUMN_NAME_ROWID, Types.ROWID, RecordFieldType.LONG.getDataType()),
             new TestColumn(4, COLUMN_NAME_BIT, Types.BIT, RecordFieldType.BOOLEAN.getDataType()),
             new TestColumn(5, COLUMN_NAME_BOOLEAN, Types.BOOLEAN, RecordFieldType.BOOLEAN.getDataType()),
-            new TestColumn(6, COLUMN_NAME_CHAR, Types.CHAR, RecordFieldType.CHAR.getDataType()),
+            new TestColumn(6, COLUMN_NAME_CHAR, Types.CHAR, RecordFieldType.STRING.getDataType()),
             new TestColumn(7, COLUMN_NAME_DATE, Types.DATE, RecordFieldType.DATE.getDataType()),
             new TestColumn(8, COLUMN_NAME_INTEGER, Types.INTEGER, RecordFieldType.INT.getDataType()),
             new TestColumn(9, COLUMN_NAME_DOUBLE, Types.DOUBLE, RecordFieldType.DOUBLE.getDataType()),

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/events/VolatileBulletinRepository.java
Patch:
@@ -179,6 +179,7 @@ private List<Bulletin> findBulletinsForSource(final String sourceId, final Bulle
             }
 
             final List<Bulletin> bulletinsForComponent = ringBuffer.getSelectedElements(filter, max);
+            Collections.sort(bulletinsForComponent);
             return bulletinsForComponent;
         }
 

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/test/java/org/apache/nifi/processors/azure/storage/ITPutAzureDataLakeStorage.java
Patch:
@@ -301,8 +301,9 @@ private void assertFlowFile(byte[] fileData, String fileName, String directory)
 
         String urlEscapedDirectory = UrlEscapers.urlPathSegmentEscaper().escape(directory);
         String urlEscapedFileName = UrlEscapers.urlPathSegmentEscaper().escape(fileName);
+        String urlEscapedPathSeparator = UrlEscapers.urlPathSegmentEscaper().escape("/");
         String primaryUri = StringUtils.isNotEmpty(directory)
-                ? String.format("https://%s.dfs.core.windows.net/%s/%s/%s", getAccountName(), fileSystemName, urlEscapedDirectory, urlEscapedFileName)
+                ? String.format("https://%s.dfs.core.windows.net/%s/%s%s%s", getAccountName(), fileSystemName, urlEscapedDirectory, urlEscapedPathSeparator, urlEscapedFileName)
                 : String.format("https://%s.dfs.core.windows.net/%s/%s", getAccountName(), fileSystemName, urlEscapedFileName);
         flowFile.assertAttributeEquals(ATTR_NAME_PRIMARY_URI, primaryUri);
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/NiFiServiceFacade.java
Patch:
@@ -642,7 +642,7 @@ Set<DocumentedTypeDTO> getControllerServiceTypes(final String serviceType, final
      * @param attributes a map of values that can be used for resolving FlowFile attributes for Expression Language
      * @return verification results
      */
-    List<ConfigVerificationResultDTO> verifyProcessorConfiguration(String processorId, Map<String, String> properties, Map<String, String> attributes);
+    List<ConfigVerificationResultDTO> performProcessorConfigVerification(String processorId, Map<String, String> properties, Map<String, String> attributes);
 
     /**
      * Performs analysis of the given properties, determining which attributes are referenced by properties
@@ -2058,7 +2058,7 @@ ControllerServiceReferencingComponentsEntity updateControllerServiceReferencingC
      * @param variables a map of values that can be used for resolving FlowFile attributes for Expression Language
      * @return verification results
      */
-    List<ConfigVerificationResultDTO> verifyControllerServiceConfiguration(String controllerServiceId, Map<String, String> properties, Map<String, String> variables);
+    List<ConfigVerificationResultDTO> performControllerServiceConfigVerification(String controllerServiceId, Map<String, String> properties, Map<String, String> variables);
 
     /**
      * Performs analysis of the given properties, determining which attributes are referenced by properties
@@ -2159,7 +2159,7 @@ ControllerServiceReferencingComponentsEntity updateControllerServiceReferencingC
      * @param properties the configured properties to verify
      * @return verification results
      */
-    List<ConfigVerificationResultDTO> verifyReportingTaskConfiguration(String reportingTaskId, Map<String, String> properties);
+    List<ConfigVerificationResultDTO> performReportingTaskConfigVerification(String reportingTaskId, Map<String, String> properties);
 
     /**
      * Performs analysis of the given properties, determining which attributes are referenced by properties

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ControllerServiceResource.java
Patch:
@@ -1086,7 +1086,7 @@ public Response performAsyncConfigVerification(final VerifyConfigRequestEntity c
         final Consumer<AsynchronousWebRequest<VerifyConfigRequestEntity, List<ConfigVerificationResultDTO>>> updateTask = asyncRequest -> {
             try {
                 final Map<String, String> attributes = requestDto.getAttributes() == null ? Collections.emptyMap() : requestDto.getAttributes();
-                final List<ConfigVerificationResultDTO> results = serviceFacade.verifyControllerServiceConfiguration(serviceId, requestDto.getProperties(), attributes);
+                final List<ConfigVerificationResultDTO> results = serviceFacade.performControllerServiceConfigVerification(serviceId, requestDto.getProperties(), attributes);
                 asyncRequest.markStepComplete(results);
             } catch (final Exception e) {
                 logger.error("Failed to verify Controller Service configuration", e);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessorResource.java
Patch:
@@ -1066,7 +1066,7 @@ public Response performAsyncConfigVerification(final VerifyConfigRequestEntity p
         final Consumer<AsynchronousWebRequest<VerifyConfigRequestEntity, List<ConfigVerificationResultDTO>>> updateTask = asyncRequest -> {
             try {
                 final Map<String, String> attributes = requestDto.getAttributes() == null ? Collections.emptyMap() : requestDto.getAttributes();
-                final List<ConfigVerificationResultDTO> results = serviceFacade.verifyProcessorConfiguration(processorId, requestDto.getProperties(), attributes);
+                final List<ConfigVerificationResultDTO> results = serviceFacade.performProcessorConfigVerification(processorId, requestDto.getProperties(), attributes);
                 asyncRequest.markStepComplete(results);
             } catch (final Exception e) {
                 logger.error("Failed to verify Processor configuration", e);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ReportingTaskResource.java
Patch:
@@ -891,7 +891,7 @@ public Response performAsyncConfigVerification(final VerifyConfigRequestEntity c
         // Submit the request to be performed in the background
         final Consumer<AsynchronousWebRequest<VerifyConfigRequestEntity, List<ConfigVerificationResultDTO>>> updateTask = asyncRequest -> {
             try {
-                final List<ConfigVerificationResultDTO> results = serviceFacade.verifyReportingTaskConfiguration(taskId, requestDto.getProperties());
+                final List<ConfigVerificationResultDTO> results = serviceFacade.performReportingTaskConfigVerification(taskId, requestDto.getProperties());
                 asyncRequest.markStepComplete(results);
             } catch (final Exception e) {
                 logger.error("Failed to verify Reporting Task configuration", e);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/concurrent/AsyncRequestManager.java
Patch:
@@ -56,8 +56,8 @@ public AsyncRequestManager(final int maxConcurrentRequests, final long requestEx
         this.requestExpirationMillis = requestExpirationMillis;
         this.maxConcurrentRequests = maxConcurrentRequests;
 
-        this.threadPool = new ThreadPoolExecutor(1, 50, 5L, TimeUnit.SECONDS,
-            new ArrayBlockingQueue<>(maxConcurrentRequests),
+        this.threadPool = new ThreadPoolExecutor(1, maxConcurrentRequests, 5L, TimeUnit.SECONDS,
+            new ArrayBlockingQueue<>(1),
             new ThreadFactory() {
                 private final AtomicLong counter = new AtomicLong(0L);
 

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/extensions/ExtensionRepository.java
Patch:
@@ -26,6 +26,8 @@
 import java.util.concurrent.Future;
 
 public interface ExtensionRepository {
+    void initialize() throws IOException;
+
     BundleAvailability getBundleAvailability(BundleCoordinate bundleCoordinate) throws IOException;
 
     Future<Set<Bundle>> fetch(Set<BundleCoordinate> bundleCoordinates, ExecutorService executorService, int concurrentDownloads);

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/flow/StandardStatelessDataflowFactory.java
Patch:
@@ -142,8 +142,9 @@ public StatelessDataflow createDataflow(final StatelessEngineConfiguration engin
                 extensionClients.add(extensionClient);
             }
 
-            final ExtensionRepository extensionRepository = new FileSystemExtensionRepository(extensionManager, engineConfiguration.getExtensionsDirectory(), engineConfiguration.getWorkingDirectory(),
-                narClassLoaders, extensionClients);
+            final ExtensionRepository extensionRepository = new FileSystemExtensionRepository(extensionManager, engineConfiguration.getExtensionsDirectory(),
+                engineConfiguration.getReadOnlyExtensionsDirectories(), engineConfiguration.getWorkingDirectory(), narClassLoaders, extensionClients);
+            extensionRepository.initialize();
 
             final VariableRegistry variableRegistry = VariableRegistry.EMPTY_REGISTRY;
             final PropertyEncryptor lazyInitializedEncryptor = new PropertyEncryptor() {

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/flow/StandardStatelessFlow.java
Patch:
@@ -433,7 +433,7 @@ public DataflowTrigger trigger(final DataflowTriggerContext triggerContext) {
         final BlockingQueue<TriggerResult> resultQueue = new LinkedBlockingQueue<>();
 
         final ExecutionProgress executionProgress = new StandardExecutionProgress(rootGroup, internalFlowFileQueues, resultQueue,
-            repositoryContextFactory, dataflowDefinition.getFailurePortNames(), tracker, stateManagerProvider, triggerContext);
+            repositoryContextFactory, dataflowDefinition.getFailurePortNames(), tracker, stateManagerProvider, triggerContext, this::purge);
 
         final AtomicReference<Future<?>> processFuture = new AtomicReference<>();
         final DataflowTrigger trigger = new DataflowTrigger() {
@@ -598,6 +598,8 @@ public void purge() {
             ((DrainableFlowFileQueue) connection.getFlowFileQueue()).drainTo(flowFiles);
             flowFiles.clear();
         }
+
+        repositoryContextFactory.getContentRepository().purge();
     }
 
     @Override

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/AbstractComponentNode.java
Patch:
@@ -563,7 +563,9 @@ private Map<PropertyDescriptor, String> getPropertyValues(final Function<Propert
 
             final Map<PropertyDescriptor, String> props = new LinkedHashMap<>();
             for (final PropertyDescriptor descriptor : supported) {
-                props.put(descriptor, null);
+                if (descriptor != null) {
+                    props.put(descriptor, descriptor.getDefaultValue());
+                }
             }
 
             properties.forEach((descriptor, config) -> props.put(descriptor, valueFunction.apply(config)));

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/TemplateUtils.java
Patch:
@@ -238,7 +238,6 @@ private static void scrubProcessors(final Set<ProcessorDTO> processors) {
                 processorConfig.setCustomUiUrl(null);
                 processorConfig.setDefaultConcurrentTasks(null);
                 processorConfig.setDefaultSchedulingPeriod(null);
-                processorConfig.setReferencedAttributes(null);
                 processorConfig.setAutoTerminatedRelationships(null);
             }
 
@@ -307,7 +306,6 @@ private static void scrubControllerServices(final Set<ControllerServiceDTO> cont
             serviceDTO.setCustomUiUrl(null);
             serviceDTO.setValidationErrors(null);
             serviceDTO.setValidationStatus(null);
-            serviceDTO.setReferencedAttributes(null);
         }
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/concurrent/StandardUpdateStep.java
Patch:
@@ -37,7 +37,7 @@ public synchronized boolean isComplete() {
 
     @Override
     public synchronized String getFailureReason() {
-        return null;
+        return failureReason;
     }
 
     @Override

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/ControllerServiceDAO.java
Patch:
@@ -140,11 +140,11 @@ public interface ControllerServiceDAO {
     /**
      * Performs verification of the Configuration for the Controller Service with the given ID
      * @param controllerServiceId the id of the controller service
-     * @param controllerService the configuration to verify
+     * @param properties the configured properties to verify
      * @param variables a map of values that can be used for resolving FlowFile attributes for Expression Language
      * @return verification results
      */
-    List<ConfigVerificationResultDTO> verifyConfiguration(String controllerServiceId, ControllerServiceDTO controllerService, Map<String, String> variables);
+    List<ConfigVerificationResultDTO> verifyConfiguration(String controllerServiceId, Map<String, String> properties, Map<String, String> variables);
 
     /**
      * Clears the state of the specified controller service.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/ProcessorDAO.java
Patch:
@@ -20,7 +20,6 @@
 import org.apache.nifi.components.state.StateMap;
 import org.apache.nifi.controller.ProcessorNode;
 import org.apache.nifi.web.api.dto.ConfigVerificationResultDTO;
-import org.apache.nifi.web.api.dto.ProcessorConfigDTO;
 import org.apache.nifi.web.api.dto.ProcessorDTO;
 
 import java.util.List;
@@ -106,11 +105,11 @@ public interface ProcessorDAO {
     /**
      * Performs verification of the given Processor Configuration for the Processor with the given ID
      * @param processorId the id of the processor
-     * @param processorConfig the configuration to verify
+     * @param properties the property configuration to verify
      * @param attributes a map of values that can be used for resolving FlowFile attributes for Expression Language
      * @return verification results
      */
-    List<ConfigVerificationResultDTO> verifyProcessorConfiguration(String processorId, ProcessorConfigDTO processorConfig, Map<String, String> attributes);
+    List<ConfigVerificationResultDTO> verifyProcessorConfiguration(String processorId, Map<String, String> properties, Map<String, String> attributes);
 
     /**
      * Verifies the specified processor can be removed.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/ReportingTaskDAO.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.nifi.web.api.dto.ReportingTaskDTO;
 
 import java.util.List;
+import java.util.Map;
 import java.util.Set;
 
 public interface ReportingTaskDAO {
@@ -89,10 +90,10 @@ public interface ReportingTaskDAO {
     /**
      * Performs verification of the Configuration for the Reporting Task with the given ID
      * @param reportingTaskId the id of the Reporting Task
-     * @param reportingTask the configuration to verify
+     * @param properties the configured properties to verify
      * @return verification results
      */
-    List<ConfigVerificationResultDTO> verifyConfiguration(String reportingTaskId, ReportingTaskDTO reportingTask);
+    List<ConfigVerificationResultDTO> verifyConfiguration(String reportingTaskId, Map<String, String> properties);
 
     /**
      * Determines whether this reporting task can be removed.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardControllerServiceDAO.java
Patch:
@@ -401,15 +401,15 @@ public void verifyConfigVerification(final String controllerServiceId) {
     }
 
     @Override
-    public List<ConfigVerificationResultDTO> verifyConfiguration(final String controllerServiceId, final ControllerServiceDTO controllerService, final Map<String, String> variables) {
+    public List<ConfigVerificationResultDTO> verifyConfiguration(final String controllerServiceId, final Map<String, String> properties, final Map<String, String> variables) {
         final ControllerServiceNode serviceNode = locateControllerService(controllerServiceId);
 
         final LogRepository logRepository = new NopLogRepository();
         final ComponentLog configVerificationLog = new SimpleProcessLogger(serviceNode.getControllerServiceImplementation(), logRepository);
         final ExtensionManager extensionManager = flowController.getExtensionManager();
 
         final ParameterLookup parameterLookup = serviceNode.getProcessGroup() == null ? ParameterLookup.EMPTY : serviceNode.getProcessGroup().getParameterContext();
-        final ConfigurationContext configurationContext = new StandardConfigurationContext(serviceNode, controllerService.getProperties(), controllerService.getAnnotationData(),
+        final ConfigurationContext configurationContext = new StandardConfigurationContext(serviceNode, properties, serviceNode.getAnnotationData(),
             parameterLookup, flowController.getControllerServiceProvider(), null, flowController.getVariableRegistry());
 
         final List<ConfigVerificationResult> verificationResults = serviceNode.verifyConfiguration(configurationContext, configVerificationLog, variables, extensionManager);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardProcessorDAO.java
Patch:
@@ -442,10 +442,10 @@ private void verifyUpdate(ProcessorNode processor, ProcessorDTO processorDTO) {
     }
 
     @Override
-    public List<ConfigVerificationResultDTO> verifyProcessorConfiguration(final String processorId, final ProcessorConfigDTO processorConfig, final Map<String, String> attributes) {
+    public List<ConfigVerificationResultDTO> verifyProcessorConfiguration(final String processorId, final Map<String, String> properties, final Map<String, String> attributes) {
         final ProcessorNode processor = locateProcessor(processorId);
 
-        final ProcessContext processContext = new StandardProcessContext(processor, processorConfig.getProperties(), processorConfig.getAnnotationData(),
+        final ProcessContext processContext = new StandardProcessContext(processor, properties, processor.getAnnotationData(),
             processor.getProcessGroup().getParameterContext(), flowController.getControllerServiceProvider(),  flowController.getEncryptor(),
             new NopStateManager(), () -> false, flowController);
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardReportingTaskDAO.java
Patch:
@@ -261,15 +261,15 @@ public void verifyConfigVerification(final String reportingTaskId) {
     }
 
     @Override
-    public List<ConfigVerificationResultDTO> verifyConfiguration(final String reportingTaskId, final ReportingTaskDTO reportingTask) {
+    public List<ConfigVerificationResultDTO> verifyConfiguration(final String reportingTaskId, final Map<String, String> properties) {
         final ReportingTaskNode taskNode = locateReportingTask(reportingTaskId);
 
         final LogRepository logRepository = new NopLogRepository();
         final ComponentLog configVerificationLog = new SimpleProcessLogger(taskNode.getReportingTask(), logRepository);
         final ExtensionManager extensionManager = flowController.getExtensionManager();
 
         final ParameterLookup parameterLookup = ParameterLookup.EMPTY;
-        final ConfigurationContext configurationContext = new StandardConfigurationContext(taskNode, reportingTask.getProperties(), reportingTask.getAnnotationData(),
+        final ConfigurationContext configurationContext = new StandardConfigurationContext(taskNode, properties, taskNode.getAnnotationData(),
             parameterLookup, flowController.getControllerServiceProvider(), null, flowController.getVariableRegistry());
 
         final List<ConfigVerificationResult> verificationResults = taskNode.verifyConfiguration(configurationContext, configVerificationLog, extensionManager);

File: nifi-api/src/main/java/org/apache/nifi/components/PropertyValue.java
Patch:
@@ -122,7 +122,7 @@ public interface PropertyValue {
     ResourceReference asResource();
 
     /**
-     * @return a ResourceReferences for the configured property value. If no property value is set, a ResourceRferences will be returned that references no resources.
+     * @return a ResourceReferences for the configured property value. If no property value is set, a ResourceReferences will be returned that references no resources.
      * I.e., this method will never return <code>null</code>.
      */
     ResourceReferences asResources();

File: nifi-api/src/main/java/org/apache/nifi/components/resource/StandardResourceReferences.java
Patch:
@@ -25,10 +25,10 @@
 import java.util.Objects;
 
 public class StandardResourceReferences implements ResourceReferences {
-    public List<ResourceReference> resourceReferences;
+    public final List<ResourceReference> resourceReferences;
 
     public StandardResourceReferences(final List<ResourceReference> resourceReferences) {
-        this.resourceReferences = Objects.requireNonNull(resourceReferences);
+        this.resourceReferences = new ArrayList<>(Objects.requireNonNull(resourceReferences));
     }
 
     @Override

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/StandardProcessorNodeIT.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.nifi.controller.reporting.ReportingTaskInstantiationException;
 import org.apache.nifi.controller.repository.FlowFileEventRepository;
 import org.apache.nifi.controller.service.ControllerServiceNode;
+import org.apache.nifi.controller.status.history.StatusHistoryRepository;
 import org.apache.nifi.engine.FlowEngine;
 import org.apache.nifi.events.VolatileBulletinRepository;
 import org.apache.nifi.expression.ExpressionLanguageCompiler;
@@ -231,7 +232,7 @@ public void testNativeLibLoadedFromDynamicallyModifiesClasspathProperty() throws
         final FlowController flowController = FlowController.createStandaloneInstance(mock(FlowFileEventRepository.class), nifiProperties,
             mock(Authorizer.class), mock(AuditService.class), null, new VolatileBulletinRepository(),
             new FileBasedVariableRegistry(nifiProperties.getVariableRegistryPropertiesPaths()),
-            mock(FlowRegistryClient.class), extensionManager);
+            mock(FlowRegistryClient.class), extensionManager, mock(StatusHistoryRepository.class));
 
         // Init processor
         final PropertyDescriptor classpathProp = new PropertyDescriptor.Builder().name("Classpath Resources")

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/serialization/StandardFlowSerializerTest.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.nifi.controller.FlowController;
 import org.apache.nifi.controller.ProcessorNode;
 import org.apache.nifi.controller.repository.FlowFileEventRepository;
+import org.apache.nifi.controller.status.history.StatusHistoryRepository;
 import org.apache.nifi.encrypt.PropertyEncryptor;
 import org.apache.nifi.encrypt.PropertyEncryptorFactory;
 import org.apache.nifi.nar.ExtensionDiscoveringManager;
@@ -100,7 +101,7 @@ public void setUp() throws Exception {
 
         final BulletinRepository bulletinRepo = Mockito.mock(BulletinRepository.class);
         controller = FlowController.createStandaloneInstance(flowFileEventRepo, nifiProperties, authorizer,
-            auditService, encryptor, bulletinRepo, variableRegistry, Mockito.mock(FlowRegistryClient.class), extensionManager);
+            auditService, encryptor, bulletinRepo, variableRegistry, Mockito.mock(FlowRegistryClient.class), extensionManager, Mockito.mock(StatusHistoryRepository.class));
 
         serializer = new StandardFlowSerializer(encryptor);
     }

File: nifi-server-api/src/main/java/org/apache/nifi/NiFiServer.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.nifi.bundle.Bundle;
 import org.apache.nifi.controller.DecommissionTask;
+import org.apache.nifi.controller.status.history.StatusHistoryDumpFactory;
 import org.apache.nifi.diagnostics.DiagnosticsFactory;
 import org.apache.nifi.nar.ExtensionMapping;
 import org.apache.nifi.util.NiFiProperties;
@@ -40,4 +41,6 @@ public interface NiFiServer {
     DiagnosticsFactory getThreadDumpFactory();
 
     DecommissionTask getDecommissionTask();
+
+    StatusHistoryDumpFactory getStatusHistoryDumpFactory();
 }

File: nifi-mock/src/main/java/org/apache/nifi/util/MockValidationContext.java
Patch:
@@ -293,12 +293,12 @@ public boolean isParameterSet(final String parameterName) {
 
             @Override
             public PropertyValue getProperty(final PropertyDescriptor descriptor) {
-                return null;
+                return MockValidationContext.this.getProperty(descriptor);
             }
 
             @Override
             public Map<String, String> getAllProperties() {
-                return null;
+                return MockValidationContext.this.getAllProperties();
             }
         };
 

File: nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/PropertyEncryptionMethod.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * Property Encryption Method enumerates supported values in addition to {@link org.apache.nifi.security.util.EncryptionMethod}
  */
-enum PropertyEncryptionMethod {
+public enum PropertyEncryptionMethod {
     NIFI_ARGON2_AES_GCM_128(KeyDerivationFunction.ARGON2, EncryptionMethod.AES_GCM,128),
 
     NIFI_ARGON2_AES_GCM_256(KeyDerivationFunction.ARGON2, EncryptionMethod.AES_GCM, 256),

File: nifi-nar-bundles/nifi-extension-utils/nifi-event-transport/src/main/java/org/apache/nifi/event/transport/netty/NettyEventServerFactory.java
Patch:
@@ -37,6 +37,7 @@
 import org.apache.nifi.security.util.ClientAuth;
 
 import javax.net.ssl.SSLContext;
+import java.net.InetAddress;
 import java.time.Duration;
 import java.util.Collections;
 import java.util.List;
@@ -47,7 +48,7 @@
  * Netty Event Server Factory
  */
 public class NettyEventServerFactory extends EventLoopGroupFactory implements EventServerFactory {
-    private final String address;
+    private final InetAddress address;
 
     private final int port;
 
@@ -65,7 +66,7 @@ public class NettyEventServerFactory extends EventLoopGroupFactory implements Ev
 
     private Duration shutdownTimeout = ShutdownTimeout.DEFAULT.getDuration();
 
-    public NettyEventServerFactory(final String address, final int port, final TransportProtocol protocol) {
+    public NettyEventServerFactory(final InetAddress address, final int port, final TransportProtocol protocol) {
         this.address = address;
         this.port = port;
         this.protocol = protocol;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/EntityFactory.java
Patch:
@@ -575,7 +575,7 @@ public ParameterContextEntity createParameterContextEntity(final ParameterContex
         final ParameterContextEntity entity = new ParameterContextEntity();
         entity.setRevision(revision);
         if (dto != null) {
-            entity.setPermissions(permissions);;
+            entity.setPermissions(permissions);
             entity.setId(dto.getId());
 
             if (permissions != null && permissions.getCanRead()) {

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/sql/RecordSqlWriter.java
Patch:
@@ -70,7 +70,7 @@ public long writeResultSet(ResultSet resultSet, OutputStream outputStream, Compo
             if (fullRecordSet == null) {
                 final Schema avroSchema = JdbcCommon.createSchema(resultSet, options);
                 final RecordSchema recordAvroSchema = AvroTypeUtil.createSchema(avroSchema);
-                fullRecordSet = new ResultSetRecordSetWithCallback(resultSet, recordAvroSchema, callback, options.getDefaultPrecision(), options.getDefaultScale());
+                fullRecordSet = new ResultSetRecordSetWithCallback(resultSet, recordAvroSchema, callback, options.getDefaultPrecision(), options.getDefaultScale(), options.isUseLogicalTypes());
                 writeSchema = recordSetWriterFactory.getSchema(originalAttributes, fullRecordSet.getSchema());
             }
             recordSet = (maxRowsPerFlowFile > 0) ? fullRecordSet.limit(maxRowsPerFlowFile) : fullRecordSet;
@@ -135,8 +135,8 @@ private static class ResultSetRecordSetWithCallback extends ResultSetRecordSet {
         private final ResultSetRowCallback callback;
 
         ResultSetRecordSetWithCallback(ResultSet rs, RecordSchema readerSchema, ResultSetRowCallback callback,
-                                       final int defaultPrecision, final int defaultScale) throws SQLException {
-            super(rs, readerSchema, defaultPrecision, defaultScale);
+                                       final int defaultPrecision, final int defaultScale, final boolean useLogicalTypes) throws SQLException {
+            super(rs, readerSchema, defaultPrecision, defaultScale, useLogicalTypes);
             this.callback = callback;
         }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/web/api/TestDataTransferResource.java
Patch:
@@ -147,6 +147,7 @@ private UriInfo mockUriInfo(final String locationUriStr) throws URISyntaxExcepti
         final URI locationUri = new URI(locationUriStr);
         doReturn(uriBuilder).when(uriInfo).getBaseUriBuilder();
         doReturn(uriBuilder).when(uriBuilder).path(any(String.class));
+        doReturn(uriBuilder).when(uriBuilder).segment(any(String.class));
         doReturn(locationUri).when(uriBuilder).build();
         return uriInfo;
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/http/SecurityCookieName.java
Patch:
@@ -20,7 +20,8 @@
  * Enumeration of HTTP Cookie Names for Security
  */
 public enum SecurityCookieName {
-    AUTHORIZATION_BEARER("__Host-Authorization-Bearer");
+    /** See IETF Cookie Prefixes Draft Section 3.1 related to Secure prefix handling */
+    AUTHORIZATION_BEARER("__Secure-Authorization-Bearer");
 
     private String name;
 

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/test/java/org/apache/nifi/processors/script/TestScriptedPartitionRecord.java
Patch:
@@ -37,7 +37,7 @@ public class TestScriptedPartitionRecord extends TestScriptedRouterProcessor {
     private static final String PARTITION_1 = "partition1";
     private static final String PARTITION_2 = "partition2";
     private static final Integer PARTITION_3 = 3;
-    private static final String PARTITION_4 = null;
+    private static final String PARTITION_4 = "<null partition>";
 
     @Test
     public void testIncomingFlowFileContainsNoRecords() {

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/AttributesToJSON.java
Patch:
@@ -115,7 +115,7 @@ public class AttributesToJSON extends AbstractProcessor {
 
     public static final PropertyDescriptor NULL_VALUE_FOR_EMPTY_STRING = new PropertyDescriptor.Builder()
             .name(("Null Value"))
-            .description("If true a non existing or empty attribute will be NULL in the resulting JSON. If false an empty " +
+            .description("If true a non existing selected attribute will be NULL in the resulting JSON. If false an empty " +
                     "string will be placed in the JSON")
             .required(true)
             .allowableValues("true", "false")

File: nifi-nar-bundles/nifi-splunk-bundle/nifi-splunk-processors/src/main/java/org/apache/nifi/processors/splunk/SplunkAPICall.java
Patch:
@@ -102,7 +102,7 @@ abstract class SplunkAPICall extends AbstractProcessor {
     static final PropertyDescriptor TOKEN = new PropertyDescriptor.Builder()
             .name("Token")
             .displayName("HTTP Event Collector Token")
-            .description("HTTP Event Collector token starting with the string Splunk. For example Splunk 1234578-abcd-1234-abcd-1234abcd")
+            .description("HTTP Event Collector token starting with the string Splunk. For example \'Splunk 1234578-abcd-1234-abcd-1234abcd\'")
             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)
             .required(false)
             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/test/java/org/apache/nifi/avro/TestAvroReaderWithEmbeddedSchema.java
Patch:
@@ -38,7 +38,6 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.TimeZone;
 
 import org.apache.avro.Schema;
 import org.apache.avro.Schema.Field;
@@ -78,7 +77,6 @@ private void testLogicalTypes(Schema schema) throws ParseException, IOException,
         final int epochDay = 17260;
         final String expectedTime = "2017-04-04 14:20:33.000";
         final DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
-        df.setTimeZone(TimeZone.getTimeZone("gmt"));
         final long timeLong = df.parse(expectedTime).getTime();
 
         final long secondsSinceMidnight = 33 + (20 * 60) + (14 * 60 * 60);
@@ -342,7 +340,7 @@ private Object[] toObjectArray(final byte[] bytes) {
         return array;
     }
 
-    public static enum Status {
+    public enum Status {
         GOOD, BAD;
     }
 }

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/test/java/org/apache/nifi/csv/TestCSVRecordReader.java
Patch:
@@ -45,7 +45,6 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
-import java.util.TimeZone;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
@@ -204,7 +203,6 @@ public void testDateEmptyFormat() throws IOException, MalformedRecordException {
     public void testTimeNoCoersionExpectedFormat() throws IOException, MalformedRecordException, ParseException {
         final String timeFormat = "HH!mm!ss";
         DateFormat dateFmt = new SimpleDateFormat(timeFormat);
-        dateFmt.setTimeZone(TimeZone.getTimeZone("gmt"));
         final String timeVal = "19!02!03";
         final String text = "time\n" + timeVal;
 
@@ -278,7 +276,6 @@ public void testTimeEmptyFormat() throws IOException, MalformedRecordException {
     public void testTimestampNoCoersionExpectedFormat() throws IOException, MalformedRecordException, ParseException {
         final String timeFormat = "HH!mm!ss";
         DateFormat dateFmt = new SimpleDateFormat(timeFormat);
-        dateFmt.setTimeZone(TimeZone.getTimeZone("gmt"));
         final String timeVal = "19!02!03";
         final String text = "timestamp\n" + timeVal;
 

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/test/java/org/apache/nifi/csv/TestWriteCSVResult.java
Patch:
@@ -45,7 +45,6 @@
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.TimeZone;
 
 import static org.junit.Assert.assertEquals;
 
@@ -389,7 +388,6 @@ public void testEmptyEscapeCharWriteRecord() throws IOException {
 
     private DateFormat getDateFormat(final String format) {
         final DateFormat df = new SimpleDateFormat(format);
-        df.setTimeZone(TimeZone.getTimeZone("gmt"));
         return df;
     }
 

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/test/java/org/apache/nifi/json/TestWriteJsonResult.java
Patch:
@@ -51,7 +51,6 @@
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.TimeZone;
 
 import static org.junit.Assert.assertEquals;
 
@@ -77,7 +76,6 @@ public void testDataTypes() throws IOException, ParseException {
 
         final ByteArrayOutputStream baos = new ByteArrayOutputStream();
         final DateFormat df = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss.SSS");
-        df.setTimeZone(TimeZone.getTimeZone("gmt"));
         final long time = df.parse("2017/01/01 17:00:00.000").getTime();
 
         final Map<String, Object> map = new LinkedHashMap<>();

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/test/java/org/apache/nifi/xml/TestWriteXMLResult.java
Patch:
@@ -46,7 +46,6 @@
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.TimeZone;
 
 import static org.apache.nifi.record.NullSuppression.ALWAYS_SUPPRESS;
 import static org.apache.nifi.record.NullSuppression.NEVER_SUPPRESS;
@@ -171,7 +170,6 @@ public void testDataTypes() throws IOException, ParseException {
         final RecordSchema schema = new SimpleRecordSchema(fields, SCHEMA_IDENTIFIER_RECORD);
 
         final DateFormat df = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss.SSS");
-        df.setTimeZone(TimeZone.getTimeZone("gmt"));
         final long time = df.parse("2017/01/01 17:00:00.000").getTime();
         final String date = "2017-01-01";
 

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/test/java/org/apache/nifi/avro/TestAvroReaderWithEmbeddedSchema.java
Patch:
@@ -38,7 +38,6 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.TimeZone;
 
 import org.apache.avro.Schema;
 import org.apache.avro.Schema.Field;
@@ -78,7 +77,6 @@ private void testLogicalTypes(Schema schema) throws ParseException, IOException,
         final int epochDay = 17260;
         final String expectedTime = "2017-04-04 14:20:33.000";
         final DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
-        df.setTimeZone(TimeZone.getTimeZone("gmt"));
         final long timeLong = df.parse(expectedTime).getTime();
 
         final long secondsSinceMidnight = 33 + (20 * 60) + (14 * 60 * 60);
@@ -342,7 +340,7 @@ private Object[] toObjectArray(final byte[] bytes) {
         return array;
     }
 
-    public static enum Status {
+    public enum Status {
         GOOD, BAD;
     }
 }

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/test/java/org/apache/nifi/csv/TestCSVRecordReader.java
Patch:
@@ -45,7 +45,6 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
-import java.util.TimeZone;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
@@ -204,7 +203,6 @@ public void testDateEmptyFormat() throws IOException, MalformedRecordException {
     public void testTimeNoCoersionExpectedFormat() throws IOException, MalformedRecordException, ParseException {
         final String timeFormat = "HH!mm!ss";
         DateFormat dateFmt = new SimpleDateFormat(timeFormat);
-        dateFmt.setTimeZone(TimeZone.getTimeZone("gmt"));
         final String timeVal = "19!02!03";
         final String text = "time\n" + timeVal;
 
@@ -278,7 +276,6 @@ public void testTimeEmptyFormat() throws IOException, MalformedRecordException {
     public void testTimestampNoCoersionExpectedFormat() throws IOException, MalformedRecordException, ParseException {
         final String timeFormat = "HH!mm!ss";
         DateFormat dateFmt = new SimpleDateFormat(timeFormat);
-        dateFmt.setTimeZone(TimeZone.getTimeZone("gmt"));
         final String timeVal = "19!02!03";
         final String text = "timestamp\n" + timeVal;
 

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/test/java/org/apache/nifi/csv/TestWriteCSVResult.java
Patch:
@@ -45,7 +45,6 @@
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.TimeZone;
 
 import static org.junit.Assert.assertEquals;
 
@@ -389,7 +388,6 @@ public void testEmptyEscapeCharWriteRecord() throws IOException {
 
     private DateFormat getDateFormat(final String format) {
         final DateFormat df = new SimpleDateFormat(format);
-        df.setTimeZone(TimeZone.getTimeZone("gmt"));
         return df;
     }
 

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/test/java/org/apache/nifi/json/TestWriteJsonResult.java
Patch:
@@ -51,7 +51,6 @@
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.TimeZone;
 
 import static org.junit.Assert.assertEquals;
 
@@ -77,7 +76,6 @@ public void testDataTypes() throws IOException, ParseException {
 
         final ByteArrayOutputStream baos = new ByteArrayOutputStream();
         final DateFormat df = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss.SSS");
-        df.setTimeZone(TimeZone.getTimeZone("gmt"));
         final long time = df.parse("2017/01/01 17:00:00.000").getTime();
 
         final Map<String, Object> map = new LinkedHashMap<>();

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/test/java/org/apache/nifi/xml/TestWriteXMLResult.java
Patch:
@@ -46,7 +46,6 @@
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.TimeZone;
 
 import static org.apache.nifi.record.NullSuppression.ALWAYS_SUPPRESS;
 import static org.apache.nifi.record.NullSuppression.NEVER_SUPPRESS;
@@ -171,7 +170,6 @@ public void testDataTypes() throws IOException, ParseException {
         final RecordSchema schema = new SimpleRecordSchema(fields, SCHEMA_IDENTIFIER_RECORD);
 
         final DateFormat df = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss.SSS");
-        df.setTimeZone(TimeZone.getTimeZone("gmt"));
         final long time = df.parse("2017/01/01 17:00:00.000").getTime();
         final String date = "2017-01-01";
 

File: nifi-commons/nifi-properties/src/main/java/org/apache/nifi/util/NiFiProperties.java
Patch:
@@ -274,6 +274,7 @@ public class NiFiProperties extends ApplicationProperties {
     public static final String ZOOKEEPER_AUTH_TYPE = "nifi.zookeeper.auth.type";
     public static final String ZOOKEEPER_KERBEROS_REMOVE_HOST_FROM_PRINCIPAL = "nifi.zookeeper.kerberos.removeHostFromPrincipal";
     public static final String ZOOKEEPER_KERBEROS_REMOVE_REALM_FROM_PRINCIPAL = "nifi.zookeeper.kerberos.removeRealmFromPrincipal";
+    public static final String ZOOKEEPER_JUTE_MAXBUFFER = "nifi.zookeeper.jute.maxbuffer";
 
     // kerberos properties
     public static final String KERBEROS_KRB5_FILE = "nifi.kerberos.krb5.file";
@@ -350,6 +351,8 @@ public class NiFiProperties extends ApplicationProperties {
     public static final String DEFAULT_ZOOKEEPER_AUTH_TYPE = "default";
     public static final String DEFAULT_ZOOKEEPER_KERBEROS_REMOVE_HOST_FROM_PRINCIPAL = "true";
     public static final String DEFAULT_ZOOKEEPER_KERBEROS_REMOVE_REALM_FROM_PRINCIPAL = "true";
+    // Based on org.apache.jute.BinaryInputArchive.maxBuffer hexadecimal 0xfffff from ZooKeeper NIOServerCnxn
+    public static final int DEFAULT_ZOOKEEPER_JUTE_MAXBUFFER = 1048575;
     public static final String DEFAULT_SECURITY_AUTO_RELOAD_INTERVAL = "10 secs";
     public static final String DEFAULT_SITE_TO_SITE_HTTP_TRANSACTION_TTL = "30 secs";
     public static final String DEFAULT_FLOW_CONFIGURATION_ARCHIVE_ENABLED = "true";

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-administration/src/main/java/org/apache/nifi/admin/IdpDataSourceFactoryBean.java
Patch:
@@ -31,7 +31,7 @@
 
 public class IdpDataSourceFactoryBean implements FactoryBean<JdbcConnectionPool> {
 
-    private static final Logger logger = LoggerFactory.getLogger(KeyDataSourceFactoryBean.class);
+    private static final Logger logger = LoggerFactory.getLogger(IdpDataSourceFactoryBean.class);
     private static final String NF_USERNAME_PASSWORD = "nf";
     private static final int MAX_CONNECTIONS = 5;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-administration/src/main/java/org/apache/nifi/admin/dao/DAOFactory.java
Patch:
@@ -23,8 +23,6 @@ public interface DAOFactory {
 
     ActionDAO getActionDAO();
 
-    KeyDAO getKeyDAO();
-
     IdpCredentialDAO getIdpCredentialDAO();
 
     IdpUserGroupDAO getIdpUserGroupDAO();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ApplicationResource.java
Patch:
@@ -55,7 +55,7 @@
 import org.apache.nifi.web.api.entity.Entity;
 import org.apache.nifi.web.api.entity.TransactionResultEntity;
 import org.apache.nifi.web.security.ProxiedEntitiesUtils;
-import org.apache.nifi.web.security.jwt.NiFiBearerTokenResolver;
+import org.apache.nifi.web.security.http.SecurityCookieName;
 import org.apache.nifi.web.security.util.CacheKey;
 import org.apache.nifi.web.util.WebUtils;
 import org.eclipse.jetty.http.HttpCookie;
@@ -1285,7 +1285,7 @@ public Response locationResponse(UriInfo uriInfo, String portType, String portId
 
     protected Response generateTokenResponse(ResponseBuilder builder, String token) {
         // currently there is no way to use javax.servlet-api to set SameSite=Strict, so we do this using Jetty
-        HttpCookie jwtCookie = new HttpCookie(NiFiBearerTokenResolver.JWT_COOKIE_NAME, token, null, "/", VALID_FOR_SESSION_ONLY, true, true, null, 0, HttpCookie.SameSite.STRICT);
+        HttpCookie jwtCookie = new HttpCookie(SecurityCookieName.AUTHORIZATION_BEARER.getName(), token, null, "/", VALID_FOR_SESSION_ONLY, true, true, null, 0, HttpCookie.SameSite.STRICT);
         return builder.header(HttpHeader.SET_COOKIE.asString(), jwtCookie.getRFC6265SetCookie()).build();
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/knox/KnoxServiceFactoryBean.java
Patch:
@@ -25,7 +25,7 @@ public class KnoxServiceFactoryBean implements FactoryBean<KnoxService> {
     private NiFiProperties properties = null;
 
     @Override
-    public KnoxService getObject() throws Exception {
+    public KnoxService getObject() {
         if (knoxService == null) {
             // ensure we only allow knox if login and oidc are disabled
             if (properties.isKnoxSsoEnabled() && (properties.isLoginIdentityProviderEnabled() || properties.isOidcEnabled() || properties.isSamlEnabled())) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/spring/LoginIdentityProviderFactoryBean.java
Patch:
@@ -35,8 +35,6 @@
 import org.apache.nifi.properties.SensitivePropertyProviderFactoryAware;
 import org.apache.nifi.security.xml.XmlUtils;
 import org.apache.nifi.util.NiFiProperties;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.DisposableBean;
 import org.springframework.beans.factory.FactoryBean;
 import org.xml.sax.SAXException;
@@ -65,7 +63,6 @@
 public class LoginIdentityProviderFactoryBean extends SensitivePropertyProviderFactoryAware
         implements FactoryBean, DisposableBean, LoginIdentityProviderLookup {
 
-    private static final Logger logger = LoggerFactory.getLogger(LoginIdentityProviderFactoryBean.class);
     private static final String LOGIN_IDENTITY_PROVIDERS_XSD = "/login-identity-providers.xsd";
     private static final String JAXB_GENERATED_PATH = "org.apache.nifi.authentication.generated";
     private static final JAXBContext JAXB_CONTEXT = initializeJaxbContext();

File: minifi/minifi-toolkit/minifi-toolkit-configuration/src/main/java/org/apache/nifi/minifi/toolkit/configuration/registry/NiFiRegConfigSchemaFunction.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.nifi.minifi.commons.schema.common.CommonPropertyKeys;
 import org.apache.nifi.minifi.commons.schema.common.StringUtil;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
-import org.apache.nifi.registry.flow.VersionedProcessGroup;
+import org.apache.nifi.flow.VersionedProcessGroup;
 
 import java.util.Comparator;
 import java.util.HashMap;

File: minifi/minifi-toolkit/minifi-toolkit-configuration/src/main/java/org/apache/nifi/minifi/toolkit/configuration/registry/NiFiRegConnectionSchemaFunction.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.nifi.connectable.ConnectableType;
 import org.apache.nifi.minifi.commons.schema.ConnectionSchema;
-import org.apache.nifi.registry.flow.VersionedConnection;
+import org.apache.nifi.flow.VersionedConnection;
 
 import java.util.HashMap;
 import java.util.List;

File: minifi/minifi-toolkit/minifi-toolkit-configuration/src/main/java/org/apache/nifi/minifi/toolkit/configuration/registry/NiFiRegControllerServiceSchemaFunction.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.nifi.minifi.toolkit.configuration.registry;
 
 import org.apache.nifi.minifi.commons.schema.ControllerServiceSchema;
-import org.apache.nifi.registry.flow.VersionedControllerService;
+import org.apache.nifi.flow.VersionedControllerService;
 
 import java.util.HashMap;
 import java.util.Map;

File: minifi/minifi-toolkit/minifi-toolkit-configuration/src/main/java/org/apache/nifi/minifi/toolkit/configuration/registry/NiFiRegFunnelSchemaFunction.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.nifi.minifi.toolkit.configuration.registry;
 
 import org.apache.nifi.minifi.commons.schema.FunnelSchema;
-import org.apache.nifi.registry.flow.VersionedFunnel;
+import org.apache.nifi.flow.VersionedFunnel;
 
 import java.util.HashMap;
 import java.util.Map;

File: minifi/minifi-toolkit/minifi-toolkit-configuration/src/main/java/org/apache/nifi/minifi/toolkit/configuration/registry/NiFiRegPortSchemaFunction.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.nifi.minifi.toolkit.configuration.registry;
 
 import org.apache.nifi.minifi.commons.schema.PortSchema;
-import org.apache.nifi.registry.flow.VersionedPort;
+import org.apache.nifi.flow.VersionedPort;
 
 import java.util.HashMap;
 import java.util.Map;

File: minifi/minifi-toolkit/minifi-toolkit-configuration/src/main/java/org/apache/nifi/minifi/toolkit/configuration/registry/NiFiRegProcessorSchemaFunction.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.nifi.minifi.commons.schema.ProcessorSchema;
 import org.apache.nifi.minifi.commons.schema.common.CommonPropertyKeys;
-import org.apache.nifi.registry.flow.VersionedProcessor;
+import org.apache.nifi.flow.VersionedProcessor;
 
 import java.util.ArrayList;
 import java.util.HashMap;

File: minifi/minifi-toolkit/minifi-toolkit-configuration/src/main/java/org/apache/nifi/minifi/toolkit/configuration/registry/NiFiRegRemotePortSchemaFunction.java
Patch:
@@ -19,7 +19,7 @@
 import org.apache.commons.lang3.StringUtils;
 import org.apache.nifi.minifi.commons.schema.RemotePortSchema;
 import org.apache.nifi.minifi.commons.schema.common.CommonPropertyKeys;
-import org.apache.nifi.registry.flow.VersionedRemoteGroupPort;
+import org.apache.nifi.flow.VersionedRemoteGroupPort;
 
 import java.util.HashMap;
 import java.util.Map;

File: minifi/minifi-toolkit/minifi-toolkit-configuration/src/main/java/org/apache/nifi/minifi/toolkit/configuration/registry/NiFiRegRemoteProcessGroupSchemaFunction.java
Patch:
@@ -19,8 +19,8 @@
 import org.apache.nifi.minifi.commons.schema.RemotePortSchema;
 import org.apache.nifi.minifi.commons.schema.RemoteProcessGroupSchema;
 import org.apache.nifi.minifi.commons.schema.common.CommonPropertyKeys;
-import org.apache.nifi.registry.flow.VersionedRemoteGroupPort;
-import org.apache.nifi.registry.flow.VersionedRemoteProcessGroup;
+import org.apache.nifi.flow.VersionedRemoteGroupPort;
+import org.apache.nifi.flow.VersionedRemoteProcessGroup;
 
 import java.util.HashMap;
 import java.util.Map;

File: nifi-api/src/main/java/org/apache/nifi/flow/BatchSize.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.nifi.registry.flow;
+package org.apache.nifi.flow;
 
 import io.swagger.annotations.ApiModelProperty;
 import java.util.Objects;

File: nifi-api/src/main/java/org/apache/nifi/flow/Bundle.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.nifi.registry.flow;
+package org.apache.nifi.flow;
 
 import java.util.Objects;
 

File: nifi-api/src/main/java/org/apache/nifi/flow/ComponentType.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.nifi.registry.flow;
+package org.apache.nifi.flow;
 
 public enum ComponentType {
 

File: nifi-api/src/main/java/org/apache/nifi/flow/ConnectableComponent.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.nifi.registry.flow;
+package org.apache.nifi.flow;
 
 import io.swagger.annotations.ApiModelProperty;
 import java.util.Objects;

File: nifi-api/src/main/java/org/apache/nifi/flow/ConnectableComponentType.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.nifi.registry.flow;
+package org.apache.nifi.flow;
 
 public enum ConnectableComponentType {
     PROCESSOR,

File: nifi-api/src/main/java/org/apache/nifi/flow/ControllerServiceAPI.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.nifi.registry.flow;
+package org.apache.nifi.flow;
 
 import java.util.Objects;
 

File: nifi-api/src/main/java/org/apache/nifi/flow/PortType.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.nifi.registry.flow;
+package org.apache.nifi.flow;
 
 public enum PortType {
     INPUT_PORT,

File: nifi-api/src/main/java/org/apache/nifi/flow/Position.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.nifi.registry.flow;
+package org.apache.nifi.flow;
 
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;

File: nifi-api/src/main/java/org/apache/nifi/flow/ScheduledState.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.registry.flow;
+package org.apache.nifi.flow;
 
 public enum ScheduledState {
     ENABLED,

File: nifi-api/src/main/java/org/apache/nifi/flow/VersionedComponent.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.nifi.registry.flow;
+package org.apache.nifi.flow;
 
 import java.util.Objects;
 

File: nifi-api/src/main/java/org/apache/nifi/flow/VersionedConfigurableComponent.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.registry.flow;
+package org.apache.nifi.flow;
 
 import java.util.Map;
 
@@ -23,7 +23,7 @@
  */
 public interface VersionedConfigurableComponent {
 
-    Map<String,VersionedPropertyDescriptor> getPropertyDescriptors();
+    Map<String, VersionedPropertyDescriptor> getPropertyDescriptors();
 
     void setPropertyDescriptors(Map<String,VersionedPropertyDescriptor> propertyDescriptors);
 

File: nifi-api/src/main/java/org/apache/nifi/flow/VersionedConnection.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.nifi.registry.flow;
+package org.apache.nifi.flow;
 
 import java.util.List;
 import java.util.Set;

File: nifi-api/src/main/java/org/apache/nifi/flow/VersionedControllerService.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.nifi.registry.flow;
+package org.apache.nifi.flow;
 
 import java.util.List;
 import java.util.Map;

File: nifi-api/src/main/java/org/apache/nifi/flow/VersionedExtensionComponent.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.registry.flow;
+package org.apache.nifi.flow;
 
 /**
  * A component that is an extension and has a type and bundle.

File: nifi-api/src/main/java/org/apache/nifi/flow/VersionedFlowCoordinates.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.nifi.registry.flow;
+package org.apache.nifi.flow;
 
 import java.util.Objects;
 

File: nifi-api/src/main/java/org/apache/nifi/flow/VersionedFunnel.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.nifi.registry.flow;
+package org.apache.nifi.flow;
 
 public class VersionedFunnel extends VersionedComponent {
     @Override

File: nifi-api/src/main/java/org/apache/nifi/flow/VersionedLabel.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.nifi.registry.flow;
+package org.apache.nifi.flow;
 
 import java.util.Map;
 

File: nifi-api/src/main/java/org/apache/nifi/flow/VersionedPort.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.nifi.registry.flow;
+package org.apache.nifi.flow;
 
 import io.swagger.annotations.ApiModelProperty;
 

File: nifi-api/src/main/java/org/apache/nifi/flow/VersionedProcessGroup.java
Patch:
@@ -15,17 +15,15 @@
  * limitations under the License.
  */
 
-package org.apache.nifi.registry.flow;
+package org.apache.nifi.flow;
 
 import io.swagger.annotations.ApiModelProperty;
 
-import javax.xml.bind.annotation.XmlRootElement;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
 
-@XmlRootElement
 public class VersionedProcessGroup extends VersionedComponent {
 
     private Set<VersionedProcessGroup> processGroups = new HashSet<>();

File: nifi-api/src/main/java/org/apache/nifi/flow/VersionedProcessor.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.nifi.registry.flow;
+package org.apache.nifi.flow;
 
 import io.swagger.annotations.ApiModelProperty;
 

File: nifi-api/src/main/java/org/apache/nifi/flow/VersionedPropertyDescriptor.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.nifi.registry.flow;
+package org.apache.nifi.flow;
 
 import io.swagger.annotations.ApiModelProperty;
 

File: nifi-api/src/main/java/org/apache/nifi/flow/VersionedRemoteGroupPort.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.nifi.registry.flow;
+package org.apache.nifi.flow;
 
 import io.swagger.annotations.ApiModelProperty;
 

File: nifi-api/src/main/java/org/apache/nifi/flow/VersionedRemoteProcessGroup.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.nifi.registry.flow;
+package org.apache.nifi.flow;
 
 import io.swagger.annotations.ApiModelProperty;
 

File: nifi-api/src/main/java/org/apache/nifi/flow/VersionedResourceCardinality.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.nifi.registry.flow;
+package org.apache.nifi.flow;
 
 public enum VersionedResourceCardinality {
 

File: nifi-api/src/main/java/org/apache/nifi/flow/VersionedResourceDefinition.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.nifi.registry.flow;
+package org.apache.nifi.flow;
 
 import io.swagger.annotations.ApiModelProperty;
 

File: nifi-api/src/main/java/org/apache/nifi/flow/VersionedResourceType.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.nifi.registry.flow;
+package org.apache.nifi.flow;
 
 public enum VersionedResourceType {
     /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/registry/flow/RestBasedFlowRegistry.java
Patch:
@@ -18,6 +18,8 @@
 package org.apache.nifi.registry.flow;
 
 import org.apache.nifi.authorization.user.NiFiUser;
+import org.apache.nifi.flow.VersionedFlowCoordinates;
+import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.registry.bucket.Bucket;
 import org.apache.nifi.registry.client.BucketClient;
 import org.apache.nifi.registry.client.FlowClient;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/registry/flow/StandardVersionControlInformation.java
Patch:
@@ -19,6 +19,7 @@
 
 import java.util.Objects;
 
+import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.web.api.dto.VersionControlInformationDTO;
 
 public class StandardVersionControlInformation implements VersionControlInformation {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/registry/flow/mapping/InstantiatedConnectableComponent.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.nifi.registry.flow.mapping;
 
-import org.apache.nifi.registry.flow.ConnectableComponent;
+import org.apache.nifi.flow.ConnectableComponent;
 
 public class InstantiatedConnectableComponent extends ConnectableComponent implements InstantiatedVersionedComponent {
     private final String instanceId;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/registry/flow/mapping/InstantiatedVersionedConnection.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.nifi.registry.flow.mapping;
 
-import org.apache.nifi.registry.flow.VersionedConnection;
+import org.apache.nifi.flow.VersionedConnection;
 
 public class InstantiatedVersionedConnection extends VersionedConnection implements InstantiatedVersionedComponent {
     private final String instanceId;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/registry/flow/mapping/InstantiatedVersionedControllerService.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.nifi.registry.flow.mapping;
 
-import org.apache.nifi.registry.flow.VersionedControllerService;
+import org.apache.nifi.flow.VersionedControllerService;
 
 public class InstantiatedVersionedControllerService extends VersionedControllerService implements InstantiatedVersionedComponent {
     private final String instanceId;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/registry/flow/mapping/InstantiatedVersionedFunnel.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.nifi.registry.flow.mapping;
 
-import org.apache.nifi.registry.flow.VersionedFunnel;
+import org.apache.nifi.flow.VersionedFunnel;
 
 public class InstantiatedVersionedFunnel extends VersionedFunnel implements InstantiatedVersionedComponent {
     private final String instanceId;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/registry/flow/mapping/InstantiatedVersionedLabel.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.nifi.registry.flow.mapping;
 
-import org.apache.nifi.registry.flow.VersionedLabel;
+import org.apache.nifi.flow.VersionedLabel;
 
 public class InstantiatedVersionedLabel extends VersionedLabel implements InstantiatedVersionedComponent {
     private final String instanceId;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/registry/flow/mapping/InstantiatedVersionedPort.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.nifi.registry.flow.mapping;
 
-import org.apache.nifi.registry.flow.VersionedPort;
+import org.apache.nifi.flow.VersionedPort;
 
 public class InstantiatedVersionedPort extends VersionedPort implements InstantiatedVersionedComponent {
     private final String instanceId;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/registry/flow/mapping/InstantiatedVersionedProcessGroup.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.nifi.registry.flow.mapping;
 
 import org.apache.nifi.registry.flow.ExternalControllerServiceReference;
-import org.apache.nifi.registry.flow.VersionedProcessGroup;
+import org.apache.nifi.flow.VersionedProcessGroup;
 
 import javax.xml.bind.annotation.XmlTransient;
 import java.util.Map;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/registry/flow/mapping/InstantiatedVersionedProcessor.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.nifi.registry.flow.mapping;
 
-import org.apache.nifi.registry.flow.VersionedProcessor;
+import org.apache.nifi.flow.VersionedProcessor;
 
 public class InstantiatedVersionedProcessor extends VersionedProcessor implements InstantiatedVersionedComponent {
     private final String instanceId;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/registry/flow/mapping/InstantiatedVersionedRemoteGroupPort.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.nifi.registry.flow.mapping;
 
-import org.apache.nifi.registry.flow.VersionedRemoteGroupPort;
+import org.apache.nifi.flow.VersionedRemoteGroupPort;
 
 public class InstantiatedVersionedRemoteGroupPort extends VersionedRemoteGroupPort implements InstantiatedVersionedComponent {
     private final String instanceId;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/registry/flow/mapping/InstantiatedVersionedRemoteProcessGroup.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.nifi.registry.flow.mapping;
 
-import org.apache.nifi.registry.flow.VersionedRemoteProcessGroup;
+import org.apache.nifi.flow.VersionedRemoteProcessGroup;
 
 public class InstantiatedVersionedRemoteProcessGroup extends VersionedRemoteProcessGroup implements InstantiatedVersionedComponent {
     private final String instanceId;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/registry/flow/mapping/StandardComparableDataFlow.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.nifi.registry.flow.mapping;
 
-import org.apache.nifi.registry.flow.VersionedProcessGroup;
+import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.registry.flow.diff.ComparableDataFlow;
 
 public class StandardComparableDataFlow implements ComparableDataFlow {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/registry/flow/FlowRegistry.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.nifi.registry.flow;
 
 import org.apache.nifi.authorization.user.NiFiUser;
+import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.registry.bucket.Bucket;
 import org.apache.nifi.registry.client.NiFiRegistryException;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/registry/flow/VersionControlInformation.java
Patch:
@@ -17,6 +17,8 @@
 
 package org.apache.nifi.registry.flow;
 
+import org.apache.nifi.flow.VersionedProcessGroup;
+
 /**
  * <p>
  * Provides a mechanism for conveying which Flow Registry a flow is stored in, and

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/integration/MockSingleFlowRegistryClient.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshotMetadata;
 import org.apache.nifi.registry.flow.VersionedParameterContext;
-import org.apache.nifi.registry.flow.VersionedProcessGroup;
+import org.apache.nifi.flow.VersionedProcessGroup;
 
 import java.io.IOException;
 import java.util.Collections;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/registry/flow/FlowRegistryUtils.java
Patch:
@@ -20,6 +20,8 @@
 import org.apache.nifi.annotation.behavior.Restricted;
 import org.apache.nifi.bundle.BundleCoordinate;
 import org.apache.nifi.components.ConfigurableComponent;
+import org.apache.nifi.flow.Bundle;
+import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.util.Tuple;
 import org.apache.nifi.web.NiFiCoreException;
 import org.apache.nifi.web.NiFiServiceFacade;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/NiFiServiceFacade.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.nifi.registry.flow.VersionedFlow;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
 import org.apache.nifi.registry.flow.VersionedParameterContext;
-import org.apache.nifi.registry.flow.VersionedProcessGroup;
+import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.web.api.dto.AccessPolicyDTO;
 import org.apache.nifi.web.api.dto.AffectedComponentDTO;
 import org.apache.nifi.web.api.dto.BulletinBoardDTO;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/FlowUpdateResource.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.nifi.registry.flow.FlowRegistryUtils;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
 import org.apache.nifi.registry.flow.VersionedParameterContext;
-import org.apache.nifi.registry.flow.VersionedProcessGroup;
+import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.web.NiFiServiceFacade;
 import org.apache.nifi.web.ResourceNotFoundException;
 import org.apache.nifi.web.ResumeFlowException;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java
Patch:
@@ -109,7 +109,7 @@
 import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
 import org.apache.nifi.registry.flow.VersionedFlowState;
 import org.apache.nifi.registry.flow.VersionedParameterContext;
-import org.apache.nifi.registry.flow.VersionedProcessGroup;
+import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.registry.variable.VariableRegistryUpdateRequest;
 import org.apache.nifi.registry.variable.VariableRegistryUpdateStep;
 import org.apache.nifi.remote.util.SiteToSiteRestApiClient;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/VersionsResource.java
Patch:
@@ -37,7 +37,7 @@
 import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshotMetadata;
 import org.apache.nifi.registry.flow.VersionedFlowState;
-import org.apache.nifi.registry.flow.VersionedProcessGroup;
+import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.web.Revision;
 import org.apache.nifi.web.api.dto.RevisionDTO;
 import org.apache.nifi.web.api.dto.VersionControlInformationDTO;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java
Patch:
@@ -141,10 +141,10 @@
 import org.apache.nifi.registry.VariableDescriptor;
 import org.apache.nifi.registry.flow.FlowRegistry;
 import org.apache.nifi.registry.flow.VersionControlInformation;
-import org.apache.nifi.registry.flow.VersionedComponent;
+import org.apache.nifi.flow.VersionedComponent;
 import org.apache.nifi.registry.flow.VersionedFlowState;
 import org.apache.nifi.registry.flow.VersionedFlowStatus;
-import org.apache.nifi.registry.flow.VersionedProcessGroup;
+import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.registry.flow.diff.DifferenceType;
 import org.apache.nifi.registry.flow.diff.FlowComparison;
 import org.apache.nifi.registry.flow.diff.FlowDifference;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/controller/ControllerFacade.java
Patch:
@@ -80,7 +80,7 @@
 import org.apache.nifi.provenance.search.SearchTerm;
 import org.apache.nifi.provenance.search.SearchTerms;
 import org.apache.nifi.provenance.search.SearchableField;
-import org.apache.nifi.registry.flow.VersionedProcessGroup;
+import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.remote.PublicPort;
 import org.apache.nifi.remote.RemoteGroupPort;
 import org.apache.nifi.reporting.BulletinRepository;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardProcessGroupDAO.java
Patch:
@@ -37,7 +37,7 @@
 import org.apache.nifi.registry.flow.StandardVersionControlInformation;
 import org.apache.nifi.registry.flow.VersionControlInformation;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
-import org.apache.nifi.registry.flow.VersionedProcessGroup;
+import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.registry.flow.mapping.NiFiRegistryFlowMapper;
 import org.apache.nifi.remote.RemoteGroupPort;
 import org.apache.nifi.web.ResourceNotFoundException;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/web/api/TestProcessGroupResource.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.nifi.web.api;
 
 import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
-import org.apache.nifi.registry.flow.VersionedProcessGroup;
+import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.web.NiFiServiceFacade;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/web/api/TestVersionsResource.java
Patch:
@@ -19,7 +19,7 @@
 import com.google.common.collect.Sets;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshotMetadata;
-import org.apache.nifi.registry.flow.VersionedProcessGroup;
+import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.web.NiFiServiceFacade;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: nifi-registry/nifi-registry-core/nifi-registry-data-model/src/main/java/org/apache/nifi/registry/flow/VersionedFlowSnapshot.java
Patch:
@@ -19,6 +19,7 @@
 
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;
+import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.registry.bucket.Bucket;
 
 import javax.validation.Valid;

File: nifi-registry/nifi-registry-core/nifi-registry-data-model/src/test/java/org/apache/nifi/registry/flow/TestVersionedRemoteProcessGroup.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.nifi.registry.flow;
 
+import org.apache.nifi.flow.VersionedRemoteProcessGroup;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;

File: nifi-registry/nifi-registry-core/nifi-registry-flow-diff/src/main/java/org/apache/nifi/registry/flow/diff/ComparableDataFlow.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.nifi.registry.flow.diff;
 
-import org.apache.nifi.registry.flow.VersionedProcessGroup;
+import org.apache.nifi.flow.VersionedProcessGroup;
 
 public interface ComparableDataFlow {
     String getName();

File: nifi-registry/nifi-registry-core/nifi-registry-flow-diff/src/main/java/org/apache/nifi/registry/flow/diff/ConciseEvolvingDifferenceDescriptor.java
Patch:
@@ -19,9 +19,9 @@
 
 import java.util.Objects;
 
-import org.apache.nifi.registry.flow.ScheduledState;
-import org.apache.nifi.registry.flow.VersionedComponent;
-import org.apache.nifi.registry.flow.VersionedFlowCoordinates;
+import org.apache.nifi.flow.ScheduledState;
+import org.apache.nifi.flow.VersionedComponent;
+import org.apache.nifi.flow.VersionedFlowCoordinates;
 
 /**
  * Describes differences between flows as if Flow A is an 'earlier version' of the same flow than Flow B.

File: nifi-registry/nifi-registry-core/nifi-registry-flow-diff/src/main/java/org/apache/nifi/registry/flow/diff/DifferenceDescriptor.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.nifi.registry.flow.diff;
 
-import org.apache.nifi.registry.flow.VersionedComponent;
+import org.apache.nifi.flow.VersionedComponent;
 
 public interface DifferenceDescriptor {
     /**

File: nifi-registry/nifi-registry-core/nifi-registry-flow-diff/src/main/java/org/apache/nifi/registry/flow/diff/EvolvingDifferenceDescriptor.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.nifi.registry.flow.diff;
 
-import org.apache.nifi.registry.flow.ScheduledState;
-import org.apache.nifi.registry.flow.VersionedComponent;
+import org.apache.nifi.flow.ScheduledState;
+import org.apache.nifi.flow.VersionedComponent;
 
 /**
  * Describes differences between flows as if Flow A is an 'earlier version' of the same flow than Flow B.

File: nifi-registry/nifi-registry-core/nifi-registry-flow-diff/src/main/java/org/apache/nifi/registry/flow/diff/FlowComparator.java
Patch:
@@ -19,7 +19,7 @@
 
 import java.util.Set;
 
-import org.apache.nifi.registry.flow.VersionedControllerService;
+import org.apache.nifi.flow.VersionedControllerService;
 
 public interface FlowComparator {
     FlowComparison compare();

File: nifi-registry/nifi-registry-core/nifi-registry-flow-diff/src/main/java/org/apache/nifi/registry/flow/diff/FlowDifference.java
Patch:
@@ -19,7 +19,7 @@
 
 import java.util.Optional;
 
-import org.apache.nifi.registry.flow.VersionedComponent;
+import org.apache.nifi.flow.VersionedComponent;
 
 public interface FlowDifference {
     DifferenceType getDifferenceType();

File: nifi-registry/nifi-registry-core/nifi-registry-flow-diff/src/main/java/org/apache/nifi/registry/flow/diff/StandardComparableDataFlow.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.nifi.registry.flow.diff;
 
-import org.apache.nifi.registry.flow.VersionedProcessGroup;
+import org.apache.nifi.flow.VersionedProcessGroup;
 
 public class StandardComparableDataFlow implements ComparableDataFlow {
     private final String name;

File: nifi-registry/nifi-registry-core/nifi-registry-flow-diff/src/main/java/org/apache/nifi/registry/flow/diff/StandardFlowDifference.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Objects;
 import java.util.Optional;
 
-import org.apache.nifi.registry.flow.VersionedComponent;
+import org.apache.nifi.flow.VersionedComponent;
 
 public class StandardFlowDifference implements FlowDifference {
     private final DifferenceType type;

File: nifi-registry/nifi-registry-core/nifi-registry-flow-diff/src/main/java/org/apache/nifi/registry/flow/diff/StaticDifferenceDescriptor.java
Patch:
@@ -19,9 +19,9 @@
 
 import java.util.Objects;
 
-import org.apache.nifi.registry.flow.ScheduledState;
-import org.apache.nifi.registry.flow.VersionedComponent;
-import org.apache.nifi.registry.flow.VersionedFlowCoordinates;
+import org.apache.nifi.flow.ScheduledState;
+import org.apache.nifi.flow.VersionedComponent;
+import org.apache.nifi.flow.VersionedFlowCoordinates;
 
 /**
  * Describes differences between flows as if the flows are two disparate flows that are being

File: nifi-registry/nifi-registry-core/nifi-registry-framework/src/main/java/org/apache/nifi/registry/serialization/FlowContentSerializer.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.registry.serialization;
 
-import org.apache.nifi.registry.flow.VersionedProcessGroup;
+import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.registry.serialization.jackson.JacksonFlowContentSerializer;
 import org.apache.nifi.registry.serialization.jackson.JacksonVersionedProcessGroupSerializer;
 import org.apache.nifi.registry.serialization.jaxb.JAXBVersionedProcessGroupSerializer;

File: nifi-registry/nifi-registry-core/nifi-registry-framework/src/main/java/org/apache/nifi/registry/serialization/jackson/JacksonVersionedProcessGroupSerializer.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.nifi.registry.serialization.jackson;
 
 import com.fasterxml.jackson.core.type.TypeReference;
-import org.apache.nifi.registry.flow.VersionedProcessGroup;
+import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.registry.serialization.SerializationException;
 
 /**

File: nifi-registry/nifi-registry-core/nifi-registry-framework/src/main/java/org/apache/nifi/registry/serialization/jaxb/JAXBVersionedProcessGroupSerializer.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.registry.serialization.jaxb;
 
-import org.apache.nifi.registry.flow.VersionedProcessGroup;
+import org.apache.nifi.flow.VersionedProcessGroup;
 
 /**
  * A JAXB serializer for VersionedFlowSnapshots.

File: nifi-registry/nifi-registry-core/nifi-registry-framework/src/main/java/org/apache/nifi/registry/service/RegistryService.java
Patch:
@@ -33,11 +33,11 @@
 import org.apache.nifi.registry.extension.BundlePersistenceProvider;
 import org.apache.nifi.registry.flow.FlowPersistenceProvider;
 import org.apache.nifi.registry.flow.FlowSnapshotContext;
-import org.apache.nifi.registry.flow.VersionedComponent;
+import org.apache.nifi.flow.VersionedComponent;
 import org.apache.nifi.registry.flow.VersionedFlow;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshotMetadata;
-import org.apache.nifi.registry.flow.VersionedProcessGroup;
+import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.registry.flow.diff.ComparableDataFlow;
 import org.apache.nifi.registry.flow.diff.ConciseEvolvingDifferenceDescriptor;
 import org.apache.nifi.registry.flow.diff.FlowComparator;

File: nifi-registry/nifi-registry-core/nifi-registry-framework/src/main/java/org/apache/nifi/registry/service/alias/RegistryUrlAliasService.java
Patch:
@@ -16,8 +16,8 @@
  */
 package org.apache.nifi.registry.service.alias;
 
-import org.apache.nifi.registry.flow.VersionedFlowCoordinates;
-import org.apache.nifi.registry.flow.VersionedProcessGroup;
+import org.apache.nifi.flow.VersionedFlowCoordinates;
+import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.registry.properties.NiFiRegistryProperties;
 import org.apache.nifi.registry.provider.ProviderFactoryException;
 import org.apache.nifi.registry.provider.StandardProviderFactory;

File: nifi-registry/nifi-registry-core/nifi-registry-framework/src/main/java/org/apache/nifi/registry/service/mapper/FlowMappings.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.nifi.registry.db.entity.FlowSnapshotEntity;
 import org.apache.nifi.registry.diff.ComponentDifference;
 import org.apache.nifi.registry.diff.ComponentDifferenceGroup;
-import org.apache.nifi.registry.flow.VersionedComponent;
+import org.apache.nifi.flow.VersionedComponent;
 import org.apache.nifi.registry.flow.VersionedFlow;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshotMetadata;
 import org.apache.nifi.registry.flow.diff.FlowDifference;

File: nifi-registry/nifi-registry-core/nifi-registry-framework/src/test/java/org/apache/nifi/registry/event/TestEventFactory.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.nifi.registry.flow.VersionedFlow;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshotMetadata;
-import org.apache.nifi.registry.flow.VersionedProcessGroup;
+import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.registry.hook.Event;
 import org.apache.nifi.registry.hook.EventFieldName;
 import org.apache.nifi.registry.hook.EventType;

File: nifi-registry/nifi-registry-core/nifi-registry-framework/src/test/java/org/apache/nifi/registry/serialization/TestFlowContentSerializer.java
Patch:
@@ -18,8 +18,8 @@
 
 import org.apache.nifi.registry.flow.ExternalControllerServiceReference;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
-import org.apache.nifi.registry.flow.VersionedProcessGroup;
-import org.apache.nifi.registry.flow.VersionedProcessor;
+import org.apache.nifi.flow.VersionedProcessGroup;
+import org.apache.nifi.flow.VersionedProcessor;
 import org.junit.Before;
 import org.junit.Test;
 

File: nifi-registry/nifi-registry-core/nifi-registry-framework/src/test/java/org/apache/nifi/registry/serialization/jaxb/TestJAXBVersionedProcessGroupSerializer.java
Patch:
@@ -16,8 +16,8 @@
  */
 package org.apache.nifi.registry.serialization.jaxb;
 
-import org.apache.nifi.registry.flow.VersionedProcessGroup;
-import org.apache.nifi.registry.flow.VersionedProcessor;
+import org.apache.nifi.flow.VersionedProcessGroup;
+import org.apache.nifi.flow.VersionedProcessor;
 import org.apache.nifi.registry.serialization.SerializationException;
 import org.apache.nifi.registry.serialization.VersionedSerializer;
 import org.junit.Assert;

File: nifi-registry/nifi-registry-core/nifi-registry-framework/src/test/java/org/apache/nifi/registry/service/TestRegistryService.java
Patch:
@@ -29,8 +29,8 @@
 import org.apache.nifi.registry.flow.VersionedFlow;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshotMetadata;
-import org.apache.nifi.registry.flow.VersionedProcessGroup;
-import org.apache.nifi.registry.flow.VersionedProcessor;
+import org.apache.nifi.flow.VersionedProcessGroup;
+import org.apache.nifi.flow.VersionedProcessor;
 import org.apache.nifi.registry.serialization.FlowContent;
 import org.apache.nifi.registry.serialization.FlowContentSerializer;
 import org.apache.nifi.registry.service.alias.RegistryUrlAliasService;

File: nifi-registry/nifi-registry-core/nifi-registry-web-api/src/test/java/org/apache/nifi/registry/web/TestRestAPI.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.nifi.registry.flow.VersionedFlow;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshotMetadata;
-import org.apache.nifi.registry.flow.VersionedProcessGroup;
+import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.registry.revision.entity.RevisionInfo;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: nifi-registry/nifi-registry-core/nifi-registry-web-api/src/test/java/org/apache/nifi/registry/web/api/DBFlowStorageIT.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.nifi.registry.flow.VersionedFlow;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshotMetadata;
-import org.apache.nifi.registry.flow.VersionedProcessGroup;
+import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.registry.revision.entity.RevisionInfo;
 import org.junit.After;
 import org.junit.Before;

File: nifi-registry/nifi-registry-core/nifi-registry-web-api/src/test/java/org/apache/nifi/registry/web/api/FlowsIT.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.nifi.registry.flow.VersionedFlow;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshotMetadata;
-import org.apache.nifi.registry.flow.VersionedProcessGroup;
+import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.registry.revision.entity.RevisionInfo;
 import org.junit.Assert;
 import org.junit.Test;

File: nifi-registry/nifi-registry-core/nifi-registry-web-api/src/test/java/org/apache/nifi/registry/web/api/IntegrationTestUtils.java
Patch:
@@ -17,11 +17,11 @@
 package org.apache.nifi.registry.web.api;
 
 import org.apache.nifi.registry.bucket.Bucket;
-import org.apache.nifi.registry.flow.VersionedComponent;
+import org.apache.nifi.flow.VersionedComponent;
 import org.apache.nifi.registry.flow.VersionedFlow;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshotMetadata;
-import org.apache.nifi.registry.flow.VersionedProcessGroup;
+import org.apache.nifi.flow.VersionedProcessGroup;
 
 import java.util.Set;
 

File: nifi-registry/nifi-registry-core/nifi-registry-web-api/src/test/java/org/apache/nifi/registry/web/api/NoRevisionsIT.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.nifi.registry.flow.VersionedFlow;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshotMetadata;
-import org.apache.nifi.registry.flow.VersionedProcessGroup;
+import org.apache.nifi.flow.VersionedProcessGroup;
 import org.junit.Test;
 
 import javax.ws.rs.client.Entity;

File: nifi-registry/nifi-registry-core/nifi-registry-web-api/src/test/java/org/apache/nifi/registry/web/api/SecureNiFiRegistryClientIT.java
Patch:
@@ -36,7 +36,7 @@
 import org.apache.nifi.registry.flow.VersionedFlow;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshotMetadata;
-import org.apache.nifi.registry.flow.VersionedProcessGroup;
+import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.registry.revision.entity.RevisionInfo;
 import org.junit.After;
 import org.junit.Assert;

File: nifi-registry/nifi-registry-core/nifi-registry-web-api/src/test/java/org/apache/nifi/registry/web/api/UnsecuredNiFiRegistryClientIT.java
Patch:
@@ -66,9 +66,9 @@
 import org.apache.nifi.registry.flow.VersionedFlowSnapshotMetadata;
 import org.apache.nifi.registry.flow.VersionedParameter;
 import org.apache.nifi.registry.flow.VersionedParameterContext;
-import org.apache.nifi.registry.flow.VersionedProcessGroup;
-import org.apache.nifi.registry.flow.VersionedProcessor;
-import org.apache.nifi.registry.flow.VersionedPropertyDescriptor;
+import org.apache.nifi.flow.VersionedProcessGroup;
+import org.apache.nifi.flow.VersionedProcessor;
+import org.apache.nifi.flow.VersionedPropertyDescriptor;
 import org.apache.nifi.registry.revision.entity.RevisionInfo;
 import org.apache.nifi.registry.util.FileUtils;
 import org.bouncycastle.util.encoders.Hex;

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/registry/flow/InMemoryFlowRegistry.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.nifi.registry.flow;
 
 import org.apache.nifi.authorization.user.NiFiUser;
+import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.registry.bucket.Bucket;
 import org.apache.nifi.registry.client.NiFiRegistryException;
 

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/core/RegistryUtil.java
Patch:
@@ -23,9 +23,9 @@
 import org.apache.nifi.registry.client.NiFiRegistryClientConfig;
 import org.apache.nifi.registry.client.NiFiRegistryException;
 import org.apache.nifi.registry.client.impl.JerseyNiFiRegistryClient;
-import org.apache.nifi.registry.flow.VersionedFlowCoordinates;
+import org.apache.nifi.flow.VersionedFlowCoordinates;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
-import org.apache.nifi.registry.flow.VersionedProcessGroup;
+import org.apache.nifi.flow.VersionedProcessGroup;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/engine/StandardStatelessEngine.java
Patch:
@@ -56,7 +56,7 @@
 import org.apache.nifi.registry.flow.FlowRegistryClient;
 import org.apache.nifi.registry.flow.VersionedFlow;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
-import org.apache.nifi.registry.flow.VersionedProcessGroup;
+import org.apache.nifi.flow.VersionedProcessGroup;
 import org.apache.nifi.reporting.BulletinRepository;
 import org.apache.nifi.reporting.ReportingTask;
 import org.apache.nifi.scheduling.SchedulingStrategy;
@@ -345,7 +345,7 @@ private void gatherRequiredBundles(final VersionedProcessGroup group, final Set<
         }
     }
 
-    private BundleCoordinate toBundleCoordinate(final org.apache.nifi.registry.flow.Bundle bundle) {
+    private BundleCoordinate toBundleCoordinate(final org.apache.nifi.flow.Bundle bundle) {
         return new BundleCoordinate(bundle.getGroup(), bundle.getArtifact(), bundle.getVersion());
     }
 

File: nifi-system-tests/nifi-stateless-system-test-suite/src/test/java/org/apache/nifi/stateless/StatelessSystemIT.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.nifi.stateless;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
-import org.apache.nifi.registry.flow.Bundle;
+import org.apache.nifi.flow.Bundle;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
 import org.apache.nifi.stateless.bootstrap.StatelessBootstrap;
 import org.apache.nifi.stateless.config.ExtensionClientDefinition;

File: nifi-system-tests/nifi-stateless-system-test-suite/src/test/java/org/apache/nifi/stateless/basics/AsyncCommitCallbackIT.java
Patch:
@@ -19,8 +19,8 @@
 
 import org.apache.nifi.flowfile.FlowFile;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
-import org.apache.nifi.registry.flow.VersionedPort;
-import org.apache.nifi.registry.flow.VersionedProcessor;
+import org.apache.nifi.flow.VersionedPort;
+import org.apache.nifi.flow.VersionedProcessor;
 import org.apache.nifi.stateless.StatelessSystemIT;
 import org.apache.nifi.stateless.VersionedFlowBuilder;
 import org.apache.nifi.stateless.config.StatelessConfigurationException;

File: nifi-system-tests/nifi-stateless-system-test-suite/src/test/java/org/apache/nifi/stateless/basics/CancelFlowExecutionIT.java
Patch:
@@ -18,8 +18,8 @@
 package org.apache.nifi.stateless.basics;
 
 import org.apache.nifi.processor.Relationship;
-import org.apache.nifi.registry.flow.VersionedPort;
-import org.apache.nifi.registry.flow.VersionedProcessor;
+import org.apache.nifi.flow.VersionedPort;
+import org.apache.nifi.flow.VersionedProcessor;
 import org.apache.nifi.stateless.StatelessSystemIT;
 import org.apache.nifi.stateless.VersionedFlowBuilder;
 import org.apache.nifi.stateless.config.StatelessConfigurationException;

File: nifi-system-tests/nifi-stateless-system-test-suite/src/test/java/org/apache/nifi/stateless/basics/CloneFlowFileIT.java
Patch:
@@ -19,8 +19,8 @@
 
 import org.apache.nifi.flowfile.FlowFile;
 import org.apache.nifi.processor.Relationship;
-import org.apache.nifi.registry.flow.VersionedPort;
-import org.apache.nifi.registry.flow.VersionedProcessor;
+import org.apache.nifi.flow.VersionedPort;
+import org.apache.nifi.flow.VersionedProcessor;
 import org.apache.nifi.stateless.StatelessSystemIT;
 import org.apache.nifi.stateless.VersionedFlowBuilder;
 import org.apache.nifi.stateless.config.StatelessConfigurationException;

File: nifi-system-tests/nifi-stateless-system-test-suite/src/test/java/org/apache/nifi/stateless/basics/CreatesFlowFileIT.java
Patch:
@@ -18,8 +18,8 @@
 package org.apache.nifi.stateless.basics;
 
 import org.apache.nifi.flowfile.FlowFile;
-import org.apache.nifi.registry.flow.VersionedPort;
-import org.apache.nifi.registry.flow.VersionedProcessor;
+import org.apache.nifi.flow.VersionedPort;
+import org.apache.nifi.flow.VersionedProcessor;
 import org.apache.nifi.stateless.StatelessSystemIT;
 import org.apache.nifi.stateless.VersionedFlowBuilder;
 import org.apache.nifi.stateless.config.StatelessConfigurationException;

File: nifi-system-tests/nifi-stateless-system-test-suite/src/test/java/org/apache/nifi/stateless/basics/InputOutputIT.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.nifi.flowfile.FlowFile;
 import org.apache.nifi.processor.Relationship;
 import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
-import org.apache.nifi.registry.flow.VersionedPort;
-import org.apache.nifi.registry.flow.VersionedProcessor;
+import org.apache.nifi.flow.VersionedPort;
+import org.apache.nifi.flow.VersionedProcessor;
 import org.apache.nifi.stateless.StatelessSystemIT;
 import org.apache.nifi.stateless.VersionedFlowBuilder;
 import org.apache.nifi.stateless.config.StatelessConfigurationException;

File: nifi-system-tests/nifi-stateless-system-test-suite/src/test/java/org/apache/nifi/stateless/basics/LoopingIT.java
Patch:
@@ -18,8 +18,8 @@
 package org.apache.nifi.stateless.basics;
 
 import org.apache.nifi.flowfile.FlowFile;
-import org.apache.nifi.registry.flow.VersionedPort;
-import org.apache.nifi.registry.flow.VersionedProcessor;
+import org.apache.nifi.flow.VersionedPort;
+import org.apache.nifi.flow.VersionedProcessor;
 import org.apache.nifi.stateless.StatelessSystemIT;
 import org.apache.nifi.stateless.VersionedFlowBuilder;
 import org.apache.nifi.stateless.config.StatelessConfigurationException;

File: nifi-system-tests/nifi-stateless-system-test-suite/src/test/java/org/apache/nifi/stateless/basics/MergingIT.java
Patch:
@@ -18,8 +18,8 @@
 package org.apache.nifi.stateless.basics;
 
 import org.apache.nifi.flowfile.FlowFile;
-import org.apache.nifi.registry.flow.VersionedPort;
-import org.apache.nifi.registry.flow.VersionedProcessor;
+import org.apache.nifi.flow.VersionedPort;
+import org.apache.nifi.flow.VersionedProcessor;
 import org.apache.nifi.stateless.StatelessSystemIT;
 import org.apache.nifi.stateless.VersionedFlowBuilder;
 import org.apache.nifi.stateless.config.StatelessConfigurationException;

File: nifi-system-tests/nifi-stateless-system-test-suite/src/test/java/org/apache/nifi/stateless/basics/RequiresAdditionalInputIT.java
Patch:
@@ -19,8 +19,8 @@
 
 import org.apache.nifi.flowfile.FlowFile;
 import org.apache.nifi.processor.DataUnit;
-import org.apache.nifi.registry.flow.VersionedPort;
-import org.apache.nifi.registry.flow.VersionedProcessor;
+import org.apache.nifi.flow.VersionedPort;
+import org.apache.nifi.flow.VersionedProcessor;
 import org.apache.nifi.stateless.StatelessSystemIT;
 import org.apache.nifi.stateless.VersionedFlowBuilder;
 import org.apache.nifi.stateless.config.StatelessConfigurationException;

File: nifi-system-tests/nifi-stateless-system-test-suite/src/test/java/org/apache/nifi/stateless/basics/RollbackOnExceptionIT.java
Patch:
@@ -18,8 +18,8 @@
 package org.apache.nifi.stateless.basics;
 
 import org.apache.nifi.processor.exception.ProcessException;
-import org.apache.nifi.registry.flow.VersionedPort;
-import org.apache.nifi.registry.flow.VersionedProcessor;
+import org.apache.nifi.flow.VersionedPort;
+import org.apache.nifi.flow.VersionedProcessor;
 import org.apache.nifi.stateless.StatelessSystemIT;
 import org.apache.nifi.stateless.VersionedFlowBuilder;
 import org.apache.nifi.stateless.config.StatelessConfigurationException;

File: nifi-system-tests/nifi-stateless-system-test-suite/src/test/java/org/apache/nifi/stateless/basics/SplittingIT.java
Patch:
@@ -18,8 +18,8 @@
 package org.apache.nifi.stateless.basics;
 
 import org.apache.nifi.flowfile.FlowFile;
-import org.apache.nifi.registry.flow.VersionedPort;
-import org.apache.nifi.registry.flow.VersionedProcessor;
+import org.apache.nifi.flow.VersionedPort;
+import org.apache.nifi.flow.VersionedProcessor;
 import org.apache.nifi.stateless.StatelessSystemIT;
 import org.apache.nifi.stateless.VersionedFlowBuilder;
 import org.apache.nifi.stateless.config.StatelessConfigurationException;

File: nifi-system-tests/nifi-stateless-system-test-suite/src/test/java/org/apache/nifi/stateless/basics/StateStorageIT.java
Patch:
@@ -18,9 +18,9 @@
 package org.apache.nifi.stateless.basics;
 
 import org.apache.nifi.components.state.Scope;
-import org.apache.nifi.registry.flow.VersionedConnection;
-import org.apache.nifi.registry.flow.VersionedPort;
-import org.apache.nifi.registry.flow.VersionedProcessor;
+import org.apache.nifi.flow.VersionedConnection;
+import org.apache.nifi.flow.VersionedPort;
+import org.apache.nifi.flow.VersionedProcessor;
 import org.apache.nifi.stateless.StatelessSystemIT;
 import org.apache.nifi.stateless.VersionedFlowBuilder;
 import org.apache.nifi.stateless.config.StatelessConfigurationException;

File: nifi-system-tests/nifi-stateless-system-test-suite/src/test/java/org/apache/nifi/stateless/classloader/InstanceClassLoaderIT.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.nifi.stateless.classloader;
 
 import org.apache.nifi.processor.Processor;
-import org.apache.nifi.registry.flow.VersionedProcessor;
+import org.apache.nifi.flow.VersionedProcessor;
 import org.apache.nifi.stateless.StatelessSystemIT;
 import org.apache.nifi.stateless.VersionedFlowBuilder;
 import org.apache.nifi.stateless.config.StatelessConfigurationException;

File: nifi-system-tests/nifi-stateless-system-test-suite/src/test/java/org/apache/nifi/stateless/parameters/ParameterContextIT.java
Patch:
@@ -22,9 +22,9 @@
 import org.apache.nifi.registry.flow.VersionedFlowSnapshot;
 import org.apache.nifi.registry.flow.VersionedParameter;
 import org.apache.nifi.registry.flow.VersionedParameterContext;
-import org.apache.nifi.registry.flow.VersionedPort;
-import org.apache.nifi.registry.flow.VersionedProcessGroup;
-import org.apache.nifi.registry.flow.VersionedProcessor;
+import org.apache.nifi.flow.VersionedPort;
+import org.apache.nifi.flow.VersionedProcessGroup;
+import org.apache.nifi.flow.VersionedProcessor;
 import org.apache.nifi.stateless.StatelessSystemIT;
 import org.apache.nifi.stateless.VersionedFlowBuilder;
 import org.apache.nifi.stateless.config.ParameterContextDefinition;

File: nifi-system-tests/nifi-stateless-system-test-suite/src/test/java/org/apache/nifi/stateless/performance/StatelessPerformanceIT.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.nifi.stateless.performance;
 
-import org.apache.nifi.registry.flow.VersionedProcessor;
+import org.apache.nifi.flow.VersionedProcessor;
 import org.apache.nifi.stateless.StatelessSystemIT;
 import org.apache.nifi.stateless.VersionedFlowBuilder;
 import org.apache.nifi.stateless.flow.DataflowTrigger;

File: nifi-external/nifi-kafka-connect/nifi-kafka-connector/src/main/java/org/apache/nifi/kafka/connect/StatelessKafkaConnectorUtil.java
Patch:
@@ -49,6 +49,8 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
+import static org.apache.kafka.common.config.ConfigDef.NonEmptyStringWithoutControlChars.nonEmptyStringWithoutControlChars;
+
 public class StatelessKafkaConnectorUtil {
     private static final String UNKNOWN_VERSION = "<Unable to determine Stateless NiFi Kafka Connector Version>";
     private static final Logger logger = LoggerFactory.getLogger(StatelessKafkaConnectorUtil.class);
@@ -96,7 +98,7 @@ public static void addCommonConfigElements(final ConfigDef configDef) {
             "Specifies the temporary working directory for expanding NiFi Archives (NARs)");
         configDef.define(FLOW_SNAPSHOT, ConfigDef.Type.STRING, null, new FlowSnapshotValidator(), ConfigDef.Importance.HIGH,
             "Specifies the dataflow to run. This may be a file containing the dataflow, a URL that points to a dataflow, or a String containing the entire dataflow as an escaped JSON.");
-        configDef.define(DATAFLOW_NAME, ConfigDef.Type.STRING, null, ConfigDef.Importance.HIGH, "The name of the dataflow.");
+        configDef.define(DATAFLOW_NAME, ConfigDef.Type.STRING, ConfigDef.NO_DEFAULT_VALUE, nonEmptyStringWithoutControlChars(), ConfigDef.Importance.HIGH, "The name of the dataflow.");
 
         configDef.define(StatelessKafkaConnectorUtil.KRB5_FILE, ConfigDef.Type.STRING, StatelessKafkaConnectorUtil.DEFAULT_KRB5_FILE, ConfigDef.Importance.MEDIUM,
             "Specifies the krb5.conf file to use if connecting to Kerberos-enabled services");

File: minifi/minifi-bootstrap/src/main/java/org/apache/nifi/minifi/bootstrap/util/ConfigTransformer.java
Patch:
@@ -209,7 +209,7 @@ protected static void writeNiFiProperties(ConfigSchema configSchema, OutputStrea
 
             orderedProperties.setProperty("nifi.database.directory", "./database_repository", System.lineSeparator() + "# H2 Settings");
             orderedProperties.setProperty("nifi.h2.url.append", ";LOCK_TIMEOUT=25000;WRITE_DELAY=0;AUTO_SERVER=FALSE");
-            orderedProperties.setProperty("nifi.flowfile.repository.implementation", "org.apache.nifi.controller.repository.WriteAheadFlowFileRepository",
+            orderedProperties.setProperty("nifi.flowfile.repository.implementation", String.valueOf(flowfileRepoSchema.getFlowFileRepository()),
                     System.lineSeparator() + "# FlowFile Repository");
             orderedProperties.setProperty("nifi.flowfile.repository.directory", "./flowfile_repository");
             orderedProperties.setProperty("nifi.flowfile.repository.partitions", String.valueOf(flowfileRepoSchema.getPartitions()));

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestTailFile.java
Patch:
@@ -848,7 +848,7 @@ public void testMultiLineWaitsForRegexMatchWithoutShutdownBetweenReads() throws
     }
 
     private void testMultiLineWaitsForRegexMatch(final boolean shutdownBetweenReads) throws IOException {
-        runner.setProperty(TailFile.LINE_START_REGEX, "<\\d>");
+        runner.setProperty(TailFile.LINE_START_PATTERN, "<\\d>");
         runner.setProperty(TailFile.ROLLING_FILENAME_PATTERN, "log.*");
 
         final String line1 = "<1>Hello, World\n";

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/QueryDatabaseTable.java
Patch:
@@ -124,7 +124,7 @@ protected SqlWriter configureSqlWriter(ProcessSession session, ProcessContext co
         final Boolean useAvroLogicalTypes = context.getProperty(USE_AVRO_LOGICAL_TYPES).asBoolean();
         final Integer maxRowsPerFlowFile = context.getProperty(MAX_ROWS_PER_FLOW_FILE).evaluateAttributeExpressions().asInteger();
         final Integer defaultPrecision = context.getProperty(VARIABLE_REGISTRY_ONLY_DEFAULT_PRECISION).evaluateAttributeExpressions().asInteger();
-        final Integer defaultScale = context.getProperty(VARIABLE_REGISTRY_ONLY_DEFAULT_PRECISION).evaluateAttributeExpressions().asInteger();
+        final Integer defaultScale = context.getProperty(VARIABLE_REGISTRY_ONLY_DEFAULT_SCALE).evaluateAttributeExpressions().asInteger();
 
         final JdbcCommon.AvroConversionOptions options = JdbcCommon.AvroConversionOptions.builder()
                 .recordName(tableName)

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/QueryDatabaseTableRecord.java
Patch:
@@ -144,7 +144,7 @@ protected SqlWriter configureSqlWriter(ProcessSession session, ProcessContext co
         final boolean convertNamesForAvro = context.getProperty(NORMALIZE_NAMES).asBoolean();
         final Boolean useAvroLogicalTypes = context.getProperty(USE_AVRO_LOGICAL_TYPES).asBoolean();
         final Integer defaultPrecision = context.getProperty(VARIABLE_REGISTRY_ONLY_DEFAULT_PRECISION).evaluateAttributeExpressions().asInteger();
-        final Integer defaultScale = context.getProperty(VARIABLE_REGISTRY_ONLY_DEFAULT_PRECISION).evaluateAttributeExpressions().asInteger();
+        final Integer defaultScale = context.getProperty(VARIABLE_REGISTRY_ONLY_DEFAULT_SCALE).evaluateAttributeExpressions().asInteger();
 
         final JdbcCommon.AvroConversionOptions options = JdbcCommon.AvroConversionOptions.builder()
                 .convertNames(convertNamesForAvro)

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/leader/election/CuratorLeaderElectionManager.java
Patch:
@@ -330,8 +330,8 @@ public synchronized long getMaxPollTime(final TimeUnit timeUnit) {
             return 0L;
         }
 
-        final long minNanos = aggregation.getMin();
-        return timeUnit.convert(minNanos, TimeUnit.NANOSECONDS);
+        final long maxNanos = aggregation.getMax();
+        return timeUnit.convert(maxNanos, TimeUnit.NANOSECONDS);
     }
 
     @Override
@@ -578,7 +578,6 @@ public void takeLeadership(final CuratorFramework client) throws Exception {
                     listener.onLeaderElection();
                 } catch (final Exception e) {
                     logger.error("This node was elected Leader for Role '{}' but failed to take leadership. Will relinquish leadership role. Failure was due to: {}", roleName, e);
-                    logger.error("", e);
                     setLeader(false);
                     Thread.sleep(1000L);
                     return;

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-processors/src/main/java/org/apache/nifi/processors/elasticsearch/PutElasticsearchHttpRecord.java
Patch:
@@ -78,6 +78,7 @@
 import java.math.BigInteger;
 import java.net.URL;
 import java.nio.charset.Charset;
+import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
@@ -645,7 +646,8 @@ private void writeValue(final JsonGenerator generator, final Object value, final
 
         switch (chosenDataType.getFieldType()) {
             case DATE: {
-                final String stringValue = DataTypeUtils.toString(coercedValue, () -> DataTypeUtils.getDateFormat(this.dateFormat));
+                // Use SimpleDateFormat with system default time zone for string conversion
+                final String stringValue = DataTypeUtils.toString(coercedValue, () -> new SimpleDateFormat(dateFormat));
                 if (DataTypeUtils.isLongTypeCompatible(stringValue)) {
                     generator.writeNumber(DataTypeUtils.toLong(coercedValue, fieldName));
                 } else {

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-processors/src/test/java/org/apache/nifi/processors/elasticsearch/TestPutElasticsearchHttpRecord.java
Patch:
@@ -818,7 +818,7 @@ private void generateTestData(int numRecords) throws IOException {
         parser.addSchemaField("amount", RecordFieldType.DECIMAL);
 
         for(int i=1; i<=numRecords; i++) {
-            parser.addRecord(i, "reç" + i, 100 + i, new Date(1545282000000L), new Time(68150000), new Timestamp(1545332150000L), new BigDecimal(Double.MAX_VALUE).multiply(BigDecimal.TEN));
+            parser.addRecord(i, "reç" + i, 100 + i, Date.valueOf("2018-12-20"), new Time(68150000), new Timestamp(1545332150000L), new BigDecimal(Double.MAX_VALUE).multiply(BigDecimal.TEN));
         }
     }
 

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/json/WriteJsonResult.java
Patch:
@@ -44,6 +44,7 @@
 import java.io.OutputStream;
 import java.math.BigInteger;
 import java.text.DateFormat;
+import java.text.SimpleDateFormat;
 import java.util.Map;
 import java.util.Optional;
 import java.util.Set;
@@ -80,7 +81,8 @@ public WriteJsonResult(final ComponentLog logger, final RecordSchema recordSchem
         this.outputGrouping = outputGrouping;
         this.mimeType = mimeType;
 
-        final DateFormat df = dateFormat == null ? null : DataTypeUtils.getDateFormat(dateFormat);
+        // Use DateFormat with default TimeZone to avoid unexpected conversion of year-month-day
+        final DateFormat df = dateFormat == null ? null : new SimpleDateFormat(dateFormat);
         final DateFormat tf = timeFormat == null ? null : DataTypeUtils.getDateFormat(timeFormat);
         final DateFormat tsf = timestampFormat == null ? null : DataTypeUtils.getDateFormat(timestampFormat);
 

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/xml/WriteXMLResult.java
Patch:
@@ -41,6 +41,7 @@
 import java.io.IOException;
 import java.io.OutputStream;
 import java.text.DateFormat;
+import java.text.SimpleDateFormat;
 import java.util.ArrayDeque;
 import java.util.Deque;
 import java.util.Map;
@@ -105,7 +106,8 @@ public WriteXMLResult(final RecordSchema recordSchema, final SchemaAccessWriter
         this.allowWritingMultipleRecords = !(this.rootTagName == null);
         hasWrittenRecord = false;
 
-        final DateFormat df = dateFormat == null ? null : DataTypeUtils.getDateFormat(dateFormat);
+        // Use DateFormat with default TimeZone to avoid unexpected conversion of year-month-day
+        final DateFormat df = dateFormat == null ? null : new SimpleDateFormat(dateFormat);
         final DateFormat tf = timeFormat == null ? null : DataTypeUtils.getDateFormat(timeFormat);
         final DateFormat tsf = timestampFormat == null ? null : DataTypeUtils.getDateFormat(timestampFormat);
 

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/test/java/org/apache/nifi/xml/TestWriteXMLResult.java
Patch:
@@ -173,6 +173,7 @@ public void testDataTypes() throws IOException, ParseException {
         final DateFormat df = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss.SSS");
         df.setTimeZone(TimeZone.getTimeZone("gmt"));
         final long time = df.parse("2017/01/01 17:00:00.000").getTime();
+        final String date = "2017-01-01";
 
         final Map<String, Object> map = new LinkedHashMap<>();
         map.put("height", 48);
@@ -190,7 +191,7 @@ public void testDataTypes() throws IOException, ParseException {
         valueMap.put("float", 8.0F);
         valueMap.put("double", 8.0D);
         valueMap.put("decimal", 8.1D);
-        valueMap.put("date", new Date(time));
+        valueMap.put("date", Date.valueOf(date));
         valueMap.put("time", new Time(time));
         valueMap.put("timestamp", new Timestamp(time));
         valueMap.put("record", null);

File: nifi-nar-bundles/nifi-extension-utils/nifi-database-utils/src/main/java/org/apache/nifi/util/db/JdbcCommon.java
Patch:
@@ -582,7 +582,7 @@ public static Schema createSchema(final ResultSet rs, AvroConversionOptions opti
                             decimalPrecision = meta.getPrecision(i);
                             //For the float data type Oracle return decimalScale < 0 which cause is not expected to org.apache.avro.LogicalTypes
                             //Hence falling back to default scale if decimalScale < 0
-                            decimalScale = meta.getScale(i) > 0 ? meta.getScale(i) : options.defaultScale;
+                            decimalScale = meta.getScale(i) >= 0 ? meta.getScale(i) : options.defaultScale;
                         } else {
                             // If not, use default precision.
                             decimalPrecision = options.defaultPrecision;

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/engine/StatelessFlowManager.java
Patch:
@@ -216,7 +216,8 @@ public ProcessGroup createProcessGroup(final String id) {
             statelessEngine.getFlowRegistryClient(),
             statelessEngine.getReloadComponent(),
             mutableVariableRegistry,
-            new StatelessNodeTypeProvider());
+            new StatelessNodeTypeProvider(),
+            null);
     }
 
     @Override
@@ -242,6 +243,7 @@ public FlowFileQueue createFlowFileQueue(final LoadBalanceStrategy loadBalanceSt
             .source(requireNonNull(source))
             .destination(destination)
             .flowFileQueueFactory(flowFileQueueFactory)
+            .processGroup(destination.getProcessGroup())
             .build();
 
         return connection;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/controller/queue/FlowFileQueueFactory.java
Patch:
@@ -17,6 +17,8 @@
 
 package org.apache.nifi.controller.queue;
 
+import org.apache.nifi.groups.ProcessGroup;
+
 public interface FlowFileQueueFactory {
-    FlowFileQueue createFlowFileQueue(LoadBalanceStrategy loadBalanceStrategy, String partitioningAttribute, ConnectionEventListener connectionEventListener);
+    FlowFileQueue createFlowFileQueue(LoadBalanceStrategy loadBalanceStrategy, String partitioningAttribute, ConnectionEventListener connectionEventListener, ProcessGroup processGroup);
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/registry/flow/RestBasedFlowRegistry.java
Patch:
@@ -261,6 +261,9 @@ private void populateVersionedContentsRecursively(final VersionedProcessGroup gr
             group.setParameterContextName(contents.getParameterContextName());
             group.setFlowFileConcurrency(contents.getFlowFileConcurrency());
             group.setFlowFileOutboundPolicy(contents.getFlowFileOutboundPolicy());
+            group.setDefaultFlowFileExpiration(contents.getDefaultFlowFileExpiration());
+            group.setDefaultBackPressureObjectThreshold(contents.getDefaultBackPressureObjectThreshold());
+            group.setDefaultBackPressureDataSizeThreshold(contents.getDefaultBackPressureDataSizeThreshold());
             coordinates.setLatest(snapshot.isLatest());
         }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/registry/flow/mapping/NiFiRegistryFlowMapper.java
Patch:
@@ -197,6 +197,9 @@ private InstantiatedVersionedProcessGroup mapGroup(final ProcessGroup group, fin
         versionedGroup.setPosition(mapPosition(group.getPosition()));
         versionedGroup.setFlowFileConcurrency(group.getFlowFileConcurrency().name());
         versionedGroup.setFlowFileOutboundPolicy(group.getFlowFileOutboundPolicy().name());
+        versionedGroup.setDefaultFlowFileExpiration(group.getDefaultFlowFileExpiration());
+        versionedGroup.setDefaultBackPressureObjectThreshold(group.getDefaultBackPressureObjectThreshold());
+        versionedGroup.setDefaultBackPressureDataSizeThreshold(group.getDefaultBackPressureDataSizeThreshold());
 
         final ParameterContext parameterContext = group.getParameterContext();
         versionedGroup.setParameterContextName(parameterContext == null ? null : parameterContext.getName());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/flow/StandardFlowManager.java
Patch:
@@ -259,7 +259,7 @@ public ProcessGroup createProcessGroup(final String id) {
 
         final ProcessGroup group = new StandardProcessGroup(requireNonNull(id), flowController.getControllerServiceProvider(), processScheduler, flowController.getEncryptor(),
             flowController.getExtensionManager(), flowController.getStateManagerProvider(), this, flowController.getFlowRegistryClient(),
-            flowController.getReloadComponent(), mutableVariableRegistry, flowController);
+            flowController.getReloadComponent(), mutableVariableRegistry, flowController, nifiProperties);
         onProcessGroupAdded(group);
 
         return group;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/queue/AbstractFlowFileQueue.java
Patch:
@@ -56,7 +56,7 @@ public abstract class AbstractFlowFileQueue implements FlowFileQueue {
     private final ResourceClaimManager resourceClaimManager;
     private final ProcessScheduler scheduler;
 
-    private final AtomicReference<TimePeriod> expirationPeriod = new AtomicReference<>(new TimePeriod("0 mins", 0L));
+    private final AtomicReference<TimePeriod> expirationPeriod = new AtomicReference<>(new TimePeriod("0 sec", 0L));
     private final AtomicReference<MaxQueueSize> maxQueueSize = new AtomicReference<>(new MaxQueueSize("1 GB", 1024 * 1024 * 1024, 10000));
 
     private final ConcurrentMap<String, ListFlowFileRequest> listRequestMap = new ConcurrentHashMap<>();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/queue/StandardFlowFileQueue.java
Patch:
@@ -53,9 +53,10 @@ public class StandardFlowFileQueue extends AbstractFlowFileQueue implements Flow
 
     public StandardFlowFileQueue(final String identifier, final ConnectionEventListener eventListener, final FlowFileRepository flowFileRepo, final ProvenanceEventRepository provRepo,
                                  final ResourceClaimManager resourceClaimManager, final ProcessScheduler scheduler, final FlowFileSwapManager swapManager, final EventReporter eventReporter,
-                                 final int swapThreshold, final long defaultBackPressureObjectThreshold, final String defaultBackPressureDataSizeThreshold) {
+                                 final int swapThreshold, final String expirationPeriod, final long defaultBackPressureObjectThreshold, final String defaultBackPressureDataSizeThreshold) {
 
         super(identifier, scheduler, flowFileRepo, provRepo, resourceClaimManager);
+        super.setFlowFileExpiration(expirationPeriod);
         this.swapManager = swapManager;
         this.queue = new SwappablePriorityQueue(swapManager, swapThreshold, eventReporter, this, this::drop, null);
         this.eventListener = eventListener;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/StandardFlowSerializer.java
Patch:
@@ -235,6 +235,9 @@ private void addProcessGroup(final Element parentElement, final ProcessGroup gro
         addTextElement(element, "comment", group.getComments());
         addTextElement(element, "flowfileConcurrency", group.getFlowFileConcurrency().name());
         addTextElement(element, "flowfileOutboundPolicy", group.getFlowFileOutboundPolicy().name());
+        addTextElement(element, "defaultFlowFileExpiration", group.getDefaultFlowFileExpiration());
+        addTextElement(element, "defaultBackPressureObjectThreshold", group.getDefaultBackPressureObjectThreshold());
+        addTextElement(element, "defaultBackPressureDataSizeThreshold", group.getDefaultBackPressureDataSizeThreshold());
 
         final VersionControlInformation versionControlInfo = group.getVersionControlInformation();
         if (versionControlInfo != null) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/TestStandardFlowFileQueue.java
Patch:
@@ -103,7 +103,7 @@ public Object answer(final InvocationOnMock invocation) throws Throwable {
             }
         }).when(provRepo).registerEvents(Mockito.any(Iterable.class));
 
-        queue = new StandardFlowFileQueue("id", new NopConnectionEventListener(), flowFileRepo, provRepo, claimManager, scheduler, swapManager, null, 10000, 0L, "0 B");
+        queue = new StandardFlowFileQueue("id", new NopConnectionEventListener(), flowFileRepo, provRepo, claimManager, scheduler, swapManager, null, 10000, "0 sec", 0L, "0 B");
         MockFlowFileRecord.resetIdGenerator();
     }
 
@@ -357,7 +357,7 @@ public void testSwapIn() {
     @Test
     public void testSwapInWhenThresholdIsLessThanSwapSize() {
         // create a queue where the swap threshold is less than 10k
-        queue = new StandardFlowFileQueue("id", new NopConnectionEventListener(), flowFileRepo, provRepo, claimManager, scheduler, swapManager, null, 1000, 0L, "0 B");
+        queue = new StandardFlowFileQueue("id", new NopConnectionEventListener(), flowFileRepo, provRepo, claimManager, scheduler, swapManager, null, 1000, "0 sec", 0L, "0 B");
 
         for (int i = 1; i <= 20000; i++) {
             queue.put(new MockFlowFileRecord());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/repository/StandardProcessSessionIT.java
Patch:
@@ -224,7 +224,7 @@ private FlowFileQueue createFlowFileQueueSpy(Connection connection) {
         final ProcessScheduler processScheduler = Mockito.mock(ProcessScheduler.class);
 
         final StandardFlowFileQueue actualQueue = new StandardFlowFileQueue("1", new NopConnectionEventListener(), flowFileRepo, provenanceRepo, null,
-                processScheduler, swapManager, null, 10000, 0L, "0 B");
+                processScheduler, swapManager, null, 10000, "0 sec", 0L, "0 B");
         return Mockito.spy(actualQueue);
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/repository/TestRocksDBFlowFileRepository.java
Patch:
@@ -206,7 +206,7 @@ public void testResourceClaimsIncremented() throws IOException {
         when(connection.getDestination()).thenReturn(Mockito.mock(Connectable.class));
 
         final FlowFileSwapManager swapMgr = new TestRocksDBFlowFileRepository.MockFlowFileSwapManager();
-        final FlowFileQueue queue = new StandardFlowFileQueue("1234", new NopConnectionEventListener(), null, null, claimManager, null, swapMgr, null, 10000, 0L, "0 B");
+        final FlowFileQueue queue = new StandardFlowFileQueue("1234", new NopConnectionEventListener(), null, null, claimManager, null, swapMgr, null, 10000, "0 sec", 0L, "0 B");
 
         when(connection.getFlowFileQueue()).thenReturn(queue);
         queueProvider.addConnection(connection);
@@ -651,7 +651,7 @@ private class TestQueue {
             provider = new TestQueueProvider();
             queuedFlowFiles = new ConcurrentSkipListSet<>(); // potentially accessed from multiple threads
 
-            final FlowFileQueue queue = new StandardFlowFileQueue("1234", null, null, null, null, null, null, null, 0, 0, "0 B") {
+            final FlowFileQueue queue = new StandardFlowFileQueue("1234", null, null, null, null, null, null, null, 0, "0 sec",0, "0 B") {
                 @Override
                 public void put(final FlowFileRecord file) {
                     queuedFlowFiles.add(file);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/repository/TestWriteAheadFlowFileRepository.java
Patch:
@@ -520,7 +520,7 @@ public void testResourceClaimsIncremented() throws IOException {
         when(connection.getDestination()).thenReturn(Mockito.mock(Connectable.class));
 
         final FlowFileSwapManager swapMgr = new MockFlowFileSwapManager();
-        final FlowFileQueue queue = new StandardFlowFileQueue("1234", new NopConnectionEventListener(), null, null, claimManager, null, swapMgr, null, 10000, 0L, "0 B");
+        final FlowFileQueue queue = new StandardFlowFileQueue("1234", new NopConnectionEventListener(), null, null, claimManager, null, swapMgr, null, 10000, "0 sec", 0L, "0 B");
 
         when(connection.getFlowFileQueue()).thenReturn(queue);
         queueProvider.addConnection(connection);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/integration/lifecycle/FlowFileRepositoryLifecycleIT.java
Patch:
@@ -74,7 +74,7 @@ public void testFlowFilesReloadedIntoQueuesUponRestart() throws ExecutionExcepti
 
         shutdown();
 
-        final FlowFileQueue restoredQueue = createFlowFileQueue(queue.getIdentifier());
+        final FlowFileQueue restoredQueue = createFlowFileQueue(queue.getIdentifier(), getRootGroup());
         initialize();
         getFlowController().initializeFlow(() -> Collections.singleton(restoredQueue));
 

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/core/RegistryUtil.java
Patch:
@@ -152,6 +152,9 @@ private void populateVersionedContentsRecursively(final VersionedProcessGroup gr
             group.setVariables(contents.getVariables());
             group.setFlowFileConcurrency(contents.getFlowFileConcurrency());
             group.setFlowFileOutboundPolicy(contents.getFlowFileOutboundPolicy());
+            group.setDefaultFlowFileExpiration(contents.getDefaultFlowFileExpiration());
+            group.setDefaultBackPressureObjectThreshold(contents.getDefaultBackPressureObjectThreshold());
+            group.setDefaultBackPressureDataSizeThreshold(contents.getDefaultBackPressureDataSizeThreshold());
             coordinates.setLatest(snapshot.isLatest());
         }
 

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/engine/StatelessFlowManager.java
Patch:
@@ -230,7 +230,8 @@ public Connection createConnection(final String id, final String name, final Con
 
         final FlowFileQueueFactory flowFileQueueFactory = new FlowFileQueueFactory() {
             @Override
-            public FlowFileQueue createFlowFileQueue(final LoadBalanceStrategy loadBalanceStrategy, final String partitioningAttribute, final ConnectionEventListener eventListener) {
+            public FlowFileQueue createFlowFileQueue(final LoadBalanceStrategy loadBalanceStrategy, final String partitioningAttribute, final ConnectionEventListener eventListener,
+                                                     final ProcessGroup processGroup) {
                 return new StatelessFlowFileQueue(id);
             }
         };

File: nifi-stateless/nifi-stateless-api/src/main/java/org/apache/nifi/stateless/flow/DataflowDefinition.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.nifi.stateless.flow;
 
 import org.apache.nifi.stateless.config.ParameterContextDefinition;
+import org.apache.nifi.stateless.config.ParameterProviderDefinition;
 import org.apache.nifi.stateless.config.ReportingTaskDefinition;
 
 import java.util.List;
@@ -34,5 +35,7 @@ public interface DataflowDefinition<T> {
 
     List<ReportingTaskDefinition> getReportingTaskDefinitions();
 
+    List<ParameterProviderDefinition> getParameterProviderDefinitions();
+
     TransactionThresholds getTransactionThresholds();
 }

File: nifi-stateless/nifi-stateless-api/src/main/java/org/apache/nifi/stateless/flow/StatelessDataflowFactory.java
Patch:
@@ -17,13 +17,11 @@
 
 package org.apache.nifi.stateless.flow;
 
-import org.apache.nifi.stateless.config.ParameterProvider;
 import org.apache.nifi.stateless.config.StatelessConfigurationException;
 import org.apache.nifi.stateless.engine.StatelessEngineConfiguration;
 
 import java.io.IOException;
 
 public interface StatelessDataflowFactory<T> {
-    StatelessDataflow createDataflow(StatelessEngineConfiguration statelessEngineConfiguration, DataflowDefinition<T> dataflowDefinition,
-                                     ParameterProvider parameterProvider) throws IOException, StatelessConfigurationException;
+    StatelessDataflow createDataflow(StatelessEngineConfiguration statelessEngineConfiguration, DataflowDefinition<T> dataflowDefinition) throws IOException, StatelessConfigurationException;
 }

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/bootstrap/ExtensionDiscovery.java
Patch:
@@ -20,11 +20,13 @@
 import org.apache.nifi.nar.ExtensionDiscoveringManager;
 import org.apache.nifi.nar.NarClassLoaders;
 import org.apache.nifi.nar.StandardExtensionDiscoveringManager;
+import org.apache.nifi.stateless.parameter.ParameterProvider;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import java.io.File;
 import java.io.IOException;
+import java.util.Collections;
 import java.util.Set;
 import java.util.concurrent.TimeUnit;
 
@@ -43,7 +45,7 @@ public static ExtensionDiscoveringManager discover(final File narWorkingDirector
         final Set<Bundle> narBundles = narClassLoaders.getBundles();
 
         final long discoveryStart = System.nanoTime();
-        final StandardExtensionDiscoveringManager extensionManager = new StandardExtensionDiscoveringManager();
+        final StandardExtensionDiscoveringManager extensionManager = new StandardExtensionDiscoveringManager(Collections.singleton(ParameterProvider.class));
         extensionManager.discoverExtensions(narBundles);
 
         final long discoveryMillis = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - discoveryStart);

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/engine/StatelessEngine.java
Patch:
@@ -32,15 +32,14 @@
 import org.apache.nifi.registry.VariableRegistry;
 import org.apache.nifi.registry.flow.FlowRegistryClient;
 import org.apache.nifi.reporting.BulletinRepository;
-import org.apache.nifi.stateless.config.ParameterProvider;
 import org.apache.nifi.stateless.flow.DataflowDefinition;
 import org.apache.nifi.stateless.flow.StatelessDataflow;
 
 public interface StatelessEngine<T> {
 
     void initialize(StatelessEngineInitializationContext initializationContext);
 
-    StatelessDataflow createFlow(DataflowDefinition<T> dataflowDefinition, ParameterProvider parameterProvider);
+    StatelessDataflow createFlow(DataflowDefinition<T> dataflowDefinition);
 
     ExtensionManager getExtensionManager();
 

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/flow/StandardStatelessFlow.java
Patch:
@@ -218,7 +218,7 @@ public void initialize() {
 
             // Create executor for dataflow
             final String flowName = dataflowDefinition.getFlowName();
-            final String threadName = (flowName == null) ? "Run Dataflow" : "Run Dataflow " + flowName;
+            final String threadName = (flowName == null || flowName.trim().isEmpty()) ? "Run Dataflow" : "Run Dataflow " + flowName;
             runDataflowExecutor = Executors.newFixedThreadPool(1, createNamedThreadFactory(threadName, false));
 
             // Periodically log component statuses
@@ -354,7 +354,7 @@ private void enableControllerServices(final ProcessGroup processGroup) {
                 future.get(COMPONENT_ENABLE_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);
             } catch (final Exception e) {
                 throw new IllegalStateException("Controller Service " + serviceNode + " has not fully enabled. Current Validation Status is "
-                    + serviceNode.getValidationStatus() + " with validation Errors: " + serviceNode.getValidationErrors());
+                    + serviceNode.getValidationStatus() + " with validation Errors: " + serviceNode.getValidationErrors(), e);
             }
         }
 

File: nifi-maven-archetypes/nifi-service-bundle-archetype/src/main/resources/archetype-resources/nifi-__artifactBaseName__-api/src/main/java/MyService.java
Patch:
@@ -25,6 +25,6 @@
 @CapabilityDescription("Example Service API.")
 public interface MyService extends ControllerService {
 
-    public void execute()  throws ProcessException;
+    public void execute();
 
 }

File: nifi-maven-archetypes/nifi-service-bundle-archetype/src/main/resources/archetype-resources/nifi-__artifactBaseName__/src/main/java/StandardMyService.java
Patch:
@@ -73,7 +73,7 @@ public void shutdown() {
     }
 
     @Override
-    public void execute() throws ProcessException {
+    public void execute() {
 
     }
 

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/Query.java
Patch:
@@ -336,6 +336,7 @@ private static PreparedQuery prepare(final String rawQuery, final boolean escape
                 }
 
                 addLiteralsAndParameters(parameterParser, treeText, expressions, true);
+                lastIndex = range.getEnd() + 1;
             }
 
             if (escapedRanges.isEmpty()) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/groups/StandardProcessGroup.java
Patch:
@@ -2513,7 +2513,7 @@ public void remove(final Snippet snippet) {
                 if (procNode.isRunning()) {
                     throw new IllegalStateException("Processor " + procNode.getIdentifier() + " cannot be removed because it is running");
                 }
-                final int activeThreadCount = scheduler.getActiveThreadCount(procNode);
+                final int activeThreadCount = procNode.getActiveThreadCount();
                 if (activeThreadCount != 0) {
                     throw new IllegalStateException("Processor " + procNode.getIdentifier() + " cannot be removed because it still has " + activeThreadCount + " active threads");
                 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/reporting/AbstractEventAccess.java
Patch:
@@ -621,15 +621,15 @@ protected ProcessorStatus getProcessorStatus(final FlowFileEvent flowFileEvent,
             status.setRunStatus(RunStatus.Running);
         } else if (procNode.getValidationStatus() == ValidationStatus.VALIDATING) {
             status.setRunStatus(RunStatus.Validating);
-        } else if (procNode.getValidationStatus() == ValidationStatus.INVALID) {
+        } else if (procNode.getValidationStatus() == ValidationStatus.INVALID && procNode.getActiveThreadCount() == 0) {
             status.setRunStatus(RunStatus.Invalid);
         } else {
             status.setRunStatus(RunStatus.Stopped);
         }
 
         status.setExecutionNode(procNode.getExecutionNode());
         status.setTerminatedThreadCount(procNode.getTerminatedThreadCount());
-        status.setActiveThreadCount(processScheduler.getActiveThreadCount(procNode));
+        status.setActiveThreadCount(procNode.getActiveThreadCount());
 
         return status;
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/FlowUpdateResource.java
Patch:
@@ -323,7 +323,7 @@ private void updateFlow(final String groupId, final ComponentLifecycle component
         logger.info("Stopping {} Processors", runningComponents.size());
         final CancellableTimedPause stopComponentsPause = new CancellableTimedPause(250, Long.MAX_VALUE, TimeUnit.MILLISECONDS);
         asyncRequest.setCancelCallback(stopComponentsPause::cancel);
-        componentLifecycle.scheduleComponents(requestUri, groupId, runningComponents, ScheduledState.STOPPED, stopComponentsPause, InvalidComponentAction.WAIT);
+        componentLifecycle.scheduleComponents(requestUri, groupId, runningComponents, ScheduledState.STOPPED, stopComponentsPause, InvalidComponentAction.SKIP);
 
         if (asyncRequest.isCancelled()) {
             return;
@@ -339,7 +339,7 @@ private void updateFlow(final String groupId, final ComponentLifecycle component
         logger.info("Disabling {} Controller Services", enabledServices.size());
         final CancellableTimedPause disableServicesPause = new CancellableTimedPause(250, Long.MAX_VALUE, TimeUnit.MILLISECONDS);
         asyncRequest.setCancelCallback(disableServicesPause::cancel);
-        componentLifecycle.activateControllerServices(requestUri, groupId, enabledServices, ControllerServiceState.DISABLED, disableServicesPause, InvalidComponentAction.WAIT);
+        componentLifecycle.activateControllerServices(requestUri, groupId, enabledServices, ControllerServiceState.DISABLED, disableServicesPause, InvalidComponentAction.SKIP);
 
         if (asyncRequest.isCancelled()) {
             return;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ParameterContextResource.java
Patch:
@@ -965,7 +965,7 @@ private void stopProcessors(final Set<AffectedComponentEntity> processors, final
         logger.info("Stopping {} Processors in order to update Parameter Context", processors.size());
         final CancellableTimedPause stopComponentsPause = new CancellableTimedPause(250, Long.MAX_VALUE, TimeUnit.MILLISECONDS);
         asyncRequest.setCancelCallback(stopComponentsPause::cancel);
-        componentLifecycle.scheduleComponents(uri, "root", processors, ScheduledState.STOPPED, stopComponentsPause, InvalidComponentAction.WAIT);
+        componentLifecycle.scheduleComponents(uri, "root", processors, ScheduledState.STOPPED, stopComponentsPause, InvalidComponentAction.SKIP);
     }
 
     private void restartProcessors(final Set<AffectedComponentEntity> processors, final AsynchronousWebRequest<?, ?> asyncRequest, final ComponentLifecycle componentLifecycle, final URI uri)

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/controller/scheduling/StatelessProcessScheduler.java
Patch:
@@ -149,7 +149,7 @@ public Future<Void> stopProcessor(final ProcessorNode procNode) {
         logger.info("Stopping {}", procNode);
         final ProcessContext processContext = processContextFactory.createProcessContext(procNode);
         final LifecycleState lifecycleState = new LifecycleState();
-        lifecycleState.setScheduled(true);
+        lifecycleState.setScheduled(false);
         return procNode.stop(this, this.componentLifeCycleThreadPool, processContext, schedulingAgent, lifecycleState);
     }
 

File: nifi-nar-bundles/nifi-extension-utils/nifi-record-utils/nifi-hadoop-record-utils/src/main/java/org/apache/nifi/processors/hadoop/AbstractFetchHDFSRecord.java
Patch:
@@ -179,7 +179,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
             FlowFile child = null;
             final String filenameValue = context.getProperty(FILENAME).evaluateAttributeExpressions(originalFlowFile).getValue();
             try {
-                final Path path = new Path(filenameValue);
+                final Path path = getNormalizedPath(context, FILENAME, originalFlowFile);
                 final AtomicReference<Throwable> exceptionHolder = new AtomicReference<>(null);
                 final AtomicReference<WriteResult> writeResult = new AtomicReference<>();
 

File: nifi-nar-bundles/nifi-extension-utils/nifi-record-utils/nifi-hadoop-record-utils/src/main/java/org/apache/nifi/processors/hadoop/AbstractPutHDFSRecord.java
Patch:
@@ -273,10 +273,9 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
             FlowFile putFlowFile = flowFile;
             try {
                 final String filenameValue = putFlowFile.getAttribute(CoreAttributes.FILENAME.key()); // TODO codec extension
-                final String directoryValue = context.getProperty(DIRECTORY).evaluateAttributeExpressions(putFlowFile).getValue();
 
                 // create the directory if it doesn't exist
-                final Path directoryPath = new Path(directoryValue);
+                final Path directoryPath = getNormalizedPath(context, DIRECTORY, putFlowFile);
                 createDirectory(fileSystem, directoryPath, remoteOwner, remoteGroup);
 
                 // write to tempFile first and on success rename to destFile

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/main/java/org/apache/nifi/processors/hadoop/DeleteHDFS.java
Patch:
@@ -145,7 +145,7 @@ public void onTrigger(ProcessContext context, ProcessSession session) throws Pro
         // We need a FlowFile to report provenance correctly.
         final FlowFile finalFlowFile = originalFlowFile != null ? originalFlowFile : session.create();
 
-        final String fileOrDirectoryName = context.getProperty(FILE_OR_DIRECTORY).evaluateAttributeExpressions(finalFlowFile).getValue();
+        final String fileOrDirectoryName = getNormalizedPath(context, FILE_OR_DIRECTORY, finalFlowFile).toString();
 
         final FileSystem fileSystem = getFileSystem();
         final UserGroupInformation ugi = getUserGroupInformation();

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/main/java/org/apache/nifi/processors/hadoop/FetchHDFS.java
Patch:
@@ -125,7 +125,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
 
         final Path path;
         try {
-            path = new Path(filenameValue);
+            path = getNormalizedPath(context, FILENAME, flowFile);
         } catch (IllegalArgumentException e) {
             getLogger().error("Failed to retrieve content from {} for {} due to {}; routing to failure", new Object[] {filenameValue, flowFile, e});
             flowFile = session.putAttribute(flowFile, "hdfs.failure.reason", e.getMessage());

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/main/java/org/apache/nifi/processors/hadoop/GetHDFS.java
Patch:
@@ -345,7 +345,7 @@ protected void processBatchOfFiles(final List<Path> files, final ProcessContext
         final Double bufferSizeProp = context.getProperty(BUFFER_SIZE).asDataSize(DataUnit.B);
         int bufferSize = bufferSizeProp != null ? bufferSizeProp.intValue() : conf.getInt(BUFFER_SIZE_KEY,
                 BUFFER_SIZE_DEFAULT);
-        final Path rootDir = new Path(context.getProperty(DIRECTORY).evaluateAttributeExpressions().getValue());
+        final Path rootDir = getNormalizedPath(context, DIRECTORY);
 
         final CompressionType compressionType = CompressionType.valueOf(context.getProperty(COMPRESSION_CODEC).toString());
         final boolean inferCompressionCodec = compressionType == CompressionType.AUTOMATIC;
@@ -427,7 +427,7 @@ protected Set<Path> performListing(final ProcessContext context) throws IOExcept
         if (System.currentTimeMillis() >= nextPollTime && listingLock.tryLock()) {
             try {
                 final FileSystem hdfs = getFileSystem();
-                final Path directoryPath = new Path(context.getProperty(DIRECTORY).evaluateAttributeExpressions().getValue());
+                final Path directoryPath = getNormalizedPath(context, DIRECTORY);
 
                 if (!hdfs.exists(directoryPath)) {
                     context.yield();

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/main/java/org/apache/nifi/processors/hadoop/GetHDFSFileInfo.java
Patch:
@@ -582,7 +582,8 @@ protected String getPerms(final FsPermission permission) {
      */
     protected HDFSFileInfoRequest buildRequestDetails(ProcessContext context, FlowFile ff) {
         HDFSFileInfoRequest req = new HDFSFileInfoRequest();
-        req.setFullPath(context.getProperty(FULL_PATH).evaluateAttributeExpressions(ff).getValue());
+        String fullPath = getNormalizedPath(context, FULL_PATH, ff).toString();
+        req.setFullPath(fullPath);
         req.setRecursive(context.getProperty(RECURSE_SUBDIRS).asBoolean());
 
         PropertyValue pv;

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/main/java/org/apache/nifi/processors/hadoop/ListHDFS.java
Patch:
@@ -402,8 +402,6 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
         }
         lastRunTimestamp = now;
 
-        final String directory = context.getProperty(DIRECTORY).evaluateAttributeExpressions().getValue();
-
         // Ensure that we are using the latest listing information before we try to perform a listing of HDFS files.
         try {
             final StateMap stateMap = session.getState(Scope.CLUSTER);
@@ -443,7 +441,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
 
         final Set<FileStatus> statuses;
         try {
-            final Path rootPath = new Path(directory);
+            final Path rootPath = getNormalizedPath(context, DIRECTORY);
             statuses = getStatuses(rootPath, recursive, hdfs, createPathFilter(context), fileFilterMode);
             getLogger().debug("Found a total of {} files in HDFS", new Object[] {statuses.size()});
         } catch (final IOException | IllegalArgumentException e) {

File: nifi-commons/nifi-sensitive-property-provider/src/main/java/org/apache/nifi/properties/AESSensitivePropertyProvider.java
Patch:
@@ -81,7 +81,7 @@ protected PropertyProtectionScheme getProtectionScheme() {
     }
 
     @Override
-    protected boolean isSupported(final BootstrapProperties bootstrapProperties) {
+    public boolean isSupported() {
         return true; // AES protection is always supported
     }
 

File: nifi-commons/nifi-sensitive-property-provider/src/main/java/org/apache/nifi/properties/PropertyProtectionScheme.java
Patch:
@@ -24,7 +24,8 @@
  * SensitivePropertyProvider.
  */
 public enum PropertyProtectionScheme {
-    AES_GCM("aes/gcm/(128|192|256)", "aes/gcm/%s", "AES Sensitive Property Provider", true);
+    AES_GCM("aes/gcm/(128|192|256)", "aes/gcm/%s", "AES Sensitive Property Provider", true),
+    HASHICORP_VAULT_TRANSIT("hashicorp/vault/transit/[a-zA-Z0-9_-]+", "hashicorp/vault/transit/%s", "HashiCorp Vault Transit Engine Sensitive Property Provider", false);
 
     PropertyProtectionScheme(final String identifierPattern, final String identifierFormat, final String name, final boolean requiresSecretKey) {
         this.identifierPattern = identifierPattern;

File: nifi-commons/nifi-vault-utils/src/main/java/org/apache/nifi/vault/hashicorp/config/HashiCorpVaultProperties.java
Patch:
@@ -79,6 +79,7 @@ public HashiCorpVaultSslProperties getSsl() {
         return ssl;
     }
 
+    @HashiCorpVaultProperty(key = "authentication.properties.file")
     public String getAuthPropertiesFilename() {
         return authPropertiesFilename;
     }

File: nifi-commons/nifi-vault-utils/src/main/java/org/apache/nifi/vault/hashicorp/config/HashiCorpVaultProperty.java
Patch:
@@ -28,4 +28,5 @@
 @Target(ElementType.METHOD)
 @Retention(RetentionPolicy.RUNTIME)
 public @interface HashiCorpVaultProperty {
+    String key() default "";
 }

File: nifi-commons/nifi-vault-utils/src/main/java/org/apache/nifi/vault/hashicorp/config/HashiCorpVaultPropertySource.java
Patch:
@@ -30,10 +30,10 @@ public class HashiCorpVaultPropertySource extends PropertySource<HashiCorpVaultP
 
     private PropertyLookup propertyLookup;
 
-    public HashiCorpVaultPropertySource(HashiCorpVaultProperties source) {
+    public HashiCorpVaultPropertySource(final HashiCorpVaultProperties source) {
         super(HashiCorpVaultPropertySource.class.getName(), source);
 
-        propertyLookup = new BeanPropertyLookup(PREFIX, HashiCorpVaultProperties.class, HashiCorpVaultProperty.class);
+        propertyLookup = new BeanPropertyLookup(PREFIX, HashiCorpVaultProperties.class);
     }
 
     @Override

File: nifi-registry/nifi-registry-core/nifi-registry-properties/src/main/java/org/apache/nifi/registry/properties/NiFiRegistryPropertiesLoader.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.registry.properties;
 
-import org.apache.nifi.properties.SensitivePropertyProtectionException;
+import org.apache.nifi.properties.BootstrapProperties;
 import org.apache.nifi.properties.SensitivePropertyProvider;
 import org.apache.nifi.properties.SensitivePropertyProviderFactory;
 import org.apache.nifi.properties.StandardSensitivePropertyProviderFactory;
@@ -82,7 +82,8 @@ private SensitivePropertyProviderFactory getSensitivePropertyProviderFactory() {
                         try {
                             return NiFiRegistryBootstrapUtils.loadBootstrapProperties();
                         } catch (IOException e) {
-                            throw new SensitivePropertyProtectionException("Could not load bootstrap.conf for sensitive property provider configuration.", e);
+                            logger.debug("Cannot read bootstrap.conf -- file is missing or not readable.  Defaulting to empty bootstrap.conf");
+                            return BootstrapProperties.EMPTY;
                         }
                     });
         }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/controller/queue/FlowFileQueueFactory.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.nifi.controller.queue;
 
-import org.apache.nifi.groups.ProcessGroup;
-
 public interface FlowFileQueueFactory {
-    FlowFileQueue createFlowFileQueue(LoadBalanceStrategy loadBalanceStrategy, String partitioningAttribute, ConnectionEventListener connectionEventListener, ProcessGroup processGroup);
+    FlowFileQueue createFlowFileQueue(LoadBalanceStrategy loadBalanceStrategy, String partitioningAttribute, ConnectionEventListener connectionEventListener);
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/flow/StandardFlowManager.java
Patch:
@@ -259,7 +259,7 @@ public ProcessGroup createProcessGroup(final String id) {
 
         final ProcessGroup group = new StandardProcessGroup(requireNonNull(id), flowController.getControllerServiceProvider(), processScheduler, flowController.getEncryptor(),
             flowController.getExtensionManager(), flowController.getStateManagerProvider(), this, flowController.getFlowRegistryClient(),
-            flowController.getReloadComponent(), mutableVariableRegistry, flowController, nifiProperties);
+            flowController.getReloadComponent(), mutableVariableRegistry, flowController);
         onProcessGroupAdded(group);
 
         return group;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/queue/AbstractFlowFileQueue.java
Patch:
@@ -56,7 +56,7 @@ public abstract class AbstractFlowFileQueue implements FlowFileQueue {
     private final ResourceClaimManager resourceClaimManager;
     private final ProcessScheduler scheduler;
 
-    private final AtomicReference<TimePeriod> expirationPeriod = new AtomicReference<>(new TimePeriod("0 sec", 0L));
+    private final AtomicReference<TimePeriod> expirationPeriod = new AtomicReference<>(new TimePeriod("0 mins", 0L));
     private final AtomicReference<MaxQueueSize> maxQueueSize = new AtomicReference<>(new MaxQueueSize("1 GB", 1024 * 1024 * 1024, 10000));
 
     private final ConcurrentMap<String, ListFlowFileRequest> listRequestMap = new ConcurrentHashMap<>();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/queue/StandardFlowFileQueue.java
Patch:
@@ -53,10 +53,9 @@ public class StandardFlowFileQueue extends AbstractFlowFileQueue implements Flow
 
     public StandardFlowFileQueue(final String identifier, final ConnectionEventListener eventListener, final FlowFileRepository flowFileRepo, final ProvenanceEventRepository provRepo,
                                  final ResourceClaimManager resourceClaimManager, final ProcessScheduler scheduler, final FlowFileSwapManager swapManager, final EventReporter eventReporter,
-                                 final int swapThreshold, final String expirationPeriod, final long defaultBackPressureObjectThreshold, final String defaultBackPressureDataSizeThreshold) {
+                                 final int swapThreshold, final long defaultBackPressureObjectThreshold, final String defaultBackPressureDataSizeThreshold) {
 
         super(identifier, scheduler, flowFileRepo, provRepo, resourceClaimManager);
-        super.setFlowFileExpiration(expirationPeriod);
         this.swapManager = swapManager;
         this.queue = new SwappablePriorityQueue(swapManager, swapThreshold, eventReporter, this, this::drop, null);
         this.eventListener = eventListener;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/StandardFlowSerializer.java
Patch:
@@ -235,9 +235,6 @@ private void addProcessGroup(final Element parentElement, final ProcessGroup gro
         addTextElement(element, "comment", group.getComments());
         addTextElement(element, "flowfileConcurrency", group.getFlowFileConcurrency().name());
         addTextElement(element, "flowfileOutboundPolicy", group.getFlowFileOutboundPolicy().name());
-        addTextElement(element, "defaultFlowFileExpiration", group.getDefaultFlowFileExpiration());
-        addTextElement(element, "defaultBackPressureObjectThreshold", group.getDefaultBackPressureObjectThreshold());
-        addTextElement(element, "defaultBackPressureDataSizeThreshold", group.getDefaultBackPressureDataSizeThreshold());
 
         final VersionControlInformation versionControlInfo = group.getVersionControlInformation();
         if (versionControlInfo != null) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/TestStandardFlowFileQueue.java
Patch:
@@ -103,7 +103,7 @@ public Object answer(final InvocationOnMock invocation) throws Throwable {
             }
         }).when(provRepo).registerEvents(Mockito.any(Iterable.class));
 
-        queue = new StandardFlowFileQueue("id", new NopConnectionEventListener(), flowFileRepo, provRepo, claimManager, scheduler, swapManager, null, 10000, "0 sec", 0L, "0 B");
+        queue = new StandardFlowFileQueue("id", new NopConnectionEventListener(), flowFileRepo, provRepo, claimManager, scheduler, swapManager, null, 10000, 0L, "0 B");
         MockFlowFileRecord.resetIdGenerator();
     }
 
@@ -357,7 +357,7 @@ public void testSwapIn() {
     @Test
     public void testSwapInWhenThresholdIsLessThanSwapSize() {
         // create a queue where the swap threshold is less than 10k
-        queue = new StandardFlowFileQueue("id", new NopConnectionEventListener(), flowFileRepo, provRepo, claimManager, scheduler, swapManager, null, 1000, "0 sec", 0L, "0 B");
+        queue = new StandardFlowFileQueue("id", new NopConnectionEventListener(), flowFileRepo, provRepo, claimManager, scheduler, swapManager, null, 1000, 0L, "0 B");
 
         for (int i = 1; i <= 20000; i++) {
             queue.put(new MockFlowFileRecord());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/repository/StandardProcessSessionIT.java
Patch:
@@ -224,7 +224,7 @@ private FlowFileQueue createFlowFileQueueSpy(Connection connection) {
         final ProcessScheduler processScheduler = Mockito.mock(ProcessScheduler.class);
 
         final StandardFlowFileQueue actualQueue = new StandardFlowFileQueue("1", new NopConnectionEventListener(), flowFileRepo, provenanceRepo, null,
-                processScheduler, swapManager, null, 10000, "0 sec", 0L, "0 B");
+                processScheduler, swapManager, null, 10000, 0L, "0 B");
         return Mockito.spy(actualQueue);
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/repository/TestRocksDBFlowFileRepository.java
Patch:
@@ -206,7 +206,7 @@ public void testResourceClaimsIncremented() throws IOException {
         when(connection.getDestination()).thenReturn(Mockito.mock(Connectable.class));
 
         final FlowFileSwapManager swapMgr = new TestRocksDBFlowFileRepository.MockFlowFileSwapManager();
-        final FlowFileQueue queue = new StandardFlowFileQueue("1234", new NopConnectionEventListener(), null, null, claimManager, null, swapMgr, null, 10000, "0 sec", 0L, "0 B");
+        final FlowFileQueue queue = new StandardFlowFileQueue("1234", new NopConnectionEventListener(), null, null, claimManager, null, swapMgr, null, 10000, 0L, "0 B");
 
         when(connection.getFlowFileQueue()).thenReturn(queue);
         queueProvider.addConnection(connection);
@@ -651,7 +651,7 @@ private class TestQueue {
             provider = new TestQueueProvider();
             queuedFlowFiles = new ConcurrentSkipListSet<>(); // potentially accessed from multiple threads
 
-            final FlowFileQueue queue = new StandardFlowFileQueue("1234", null, null, null, null, null, null, null, 0, "0 sec",0, "0 B") {
+            final FlowFileQueue queue = new StandardFlowFileQueue("1234", null, null, null, null, null, null, null, 0, 0, "0 B") {
                 @Override
                 public void put(final FlowFileRecord file) {
                     queuedFlowFiles.add(file);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/repository/TestWriteAheadFlowFileRepository.java
Patch:
@@ -520,7 +520,7 @@ public void testResourceClaimsIncremented() throws IOException {
         when(connection.getDestination()).thenReturn(Mockito.mock(Connectable.class));
 
         final FlowFileSwapManager swapMgr = new MockFlowFileSwapManager();
-        final FlowFileQueue queue = new StandardFlowFileQueue("1234", new NopConnectionEventListener(), null, null, claimManager, null, swapMgr, null, 10000, "0 sec", 0L, "0 B");
+        final FlowFileQueue queue = new StandardFlowFileQueue("1234", new NopConnectionEventListener(), null, null, claimManager, null, swapMgr, null, 10000, 0L, "0 B");
 
         when(connection.getFlowFileQueue()).thenReturn(queue);
         queueProvider.addConnection(connection);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/integration/lifecycle/FlowFileRepositoryLifecycleIT.java
Patch:
@@ -74,7 +74,7 @@ public void testFlowFilesReloadedIntoQueuesUponRestart() throws ExecutionExcepti
 
         shutdown();
 
-        final FlowFileQueue restoredQueue = createFlowFileQueue(queue.getIdentifier(), getRootGroup());
+        final FlowFileQueue restoredQueue = createFlowFileQueue(queue.getIdentifier());
         initialize();
         getFlowController().initializeFlow(() -> Collections.singleton(restoredQueue));
 

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/engine/StatelessFlowManager.java
Patch:
@@ -230,8 +230,7 @@ public Connection createConnection(final String id, final String name, final Con
 
         final FlowFileQueueFactory flowFileQueueFactory = new FlowFileQueueFactory() {
             @Override
-            public FlowFileQueue createFlowFileQueue(final LoadBalanceStrategy loadBalanceStrategy, final String partitioningAttribute, final ConnectionEventListener eventListener,
-                                                     final ProcessGroup processGroup) {
+            public FlowFileQueue createFlowFileQueue(final LoadBalanceStrategy loadBalanceStrategy, final String partitioningAttribute, final ConnectionEventListener eventListener) {
                 return new StatelessFlowFileQueue(id);
             }
         };

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/controller/queue/FlowFileQueueFactory.java
Patch:
@@ -17,6 +17,8 @@
 
 package org.apache.nifi.controller.queue;
 
+import org.apache.nifi.groups.ProcessGroup;
+
 public interface FlowFileQueueFactory {
-    FlowFileQueue createFlowFileQueue(LoadBalanceStrategy loadBalanceStrategy, String partitioningAttribute, ConnectionEventListener connectionEventListener);
+    FlowFileQueue createFlowFileQueue(LoadBalanceStrategy loadBalanceStrategy, String partitioningAttribute, ConnectionEventListener connectionEventListener, ProcessGroup processGroup);
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/flow/StandardFlowManager.java
Patch:
@@ -259,7 +259,7 @@ public ProcessGroup createProcessGroup(final String id) {
 
         final ProcessGroup group = new StandardProcessGroup(requireNonNull(id), flowController.getControllerServiceProvider(), processScheduler, flowController.getEncryptor(),
             flowController.getExtensionManager(), flowController.getStateManagerProvider(), this, flowController.getFlowRegistryClient(),
-            flowController.getReloadComponent(), mutableVariableRegistry, flowController);
+            flowController.getReloadComponent(), mutableVariableRegistry, flowController, nifiProperties);
         onProcessGroupAdded(group);
 
         return group;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/queue/AbstractFlowFileQueue.java
Patch:
@@ -56,7 +56,7 @@ public abstract class AbstractFlowFileQueue implements FlowFileQueue {
     private final ResourceClaimManager resourceClaimManager;
     private final ProcessScheduler scheduler;
 
-    private final AtomicReference<TimePeriod> expirationPeriod = new AtomicReference<>(new TimePeriod("0 mins", 0L));
+    private final AtomicReference<TimePeriod> expirationPeriod = new AtomicReference<>(new TimePeriod("0 sec", 0L));
     private final AtomicReference<MaxQueueSize> maxQueueSize = new AtomicReference<>(new MaxQueueSize("1 GB", 1024 * 1024 * 1024, 10000));
 
     private final ConcurrentMap<String, ListFlowFileRequest> listRequestMap = new ConcurrentHashMap<>();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/queue/StandardFlowFileQueue.java
Patch:
@@ -53,9 +53,10 @@ public class StandardFlowFileQueue extends AbstractFlowFileQueue implements Flow
 
     public StandardFlowFileQueue(final String identifier, final ConnectionEventListener eventListener, final FlowFileRepository flowFileRepo, final ProvenanceEventRepository provRepo,
                                  final ResourceClaimManager resourceClaimManager, final ProcessScheduler scheduler, final FlowFileSwapManager swapManager, final EventReporter eventReporter,
-                                 final int swapThreshold, final long defaultBackPressureObjectThreshold, final String defaultBackPressureDataSizeThreshold) {
+                                 final int swapThreshold, final String expirationPeriod, final long defaultBackPressureObjectThreshold, final String defaultBackPressureDataSizeThreshold) {
 
         super(identifier, scheduler, flowFileRepo, provRepo, resourceClaimManager);
+        super.setFlowFileExpiration(expirationPeriod);
         this.swapManager = swapManager;
         this.queue = new SwappablePriorityQueue(swapManager, swapThreshold, eventReporter, this, this::drop, null);
         this.eventListener = eventListener;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/StandardFlowSerializer.java
Patch:
@@ -235,6 +235,9 @@ private void addProcessGroup(final Element parentElement, final ProcessGroup gro
         addTextElement(element, "comment", group.getComments());
         addTextElement(element, "flowfileConcurrency", group.getFlowFileConcurrency().name());
         addTextElement(element, "flowfileOutboundPolicy", group.getFlowFileOutboundPolicy().name());
+        addTextElement(element, "defaultFlowFileExpiration", group.getDefaultFlowFileExpiration());
+        addTextElement(element, "defaultBackPressureObjectThreshold", group.getDefaultBackPressureObjectThreshold());
+        addTextElement(element, "defaultBackPressureDataSizeThreshold", group.getDefaultBackPressureDataSizeThreshold());
 
         final VersionControlInformation versionControlInfo = group.getVersionControlInformation();
         if (versionControlInfo != null) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/TestStandardFlowFileQueue.java
Patch:
@@ -103,7 +103,7 @@ public Object answer(final InvocationOnMock invocation) throws Throwable {
             }
         }).when(provRepo).registerEvents(Mockito.any(Iterable.class));
 
-        queue = new StandardFlowFileQueue("id", new NopConnectionEventListener(), flowFileRepo, provRepo, claimManager, scheduler, swapManager, null, 10000, 0L, "0 B");
+        queue = new StandardFlowFileQueue("id", new NopConnectionEventListener(), flowFileRepo, provRepo, claimManager, scheduler, swapManager, null, 10000, "0 sec", 0L, "0 B");
         MockFlowFileRecord.resetIdGenerator();
     }
 
@@ -357,7 +357,7 @@ public void testSwapIn() {
     @Test
     public void testSwapInWhenThresholdIsLessThanSwapSize() {
         // create a queue where the swap threshold is less than 10k
-        queue = new StandardFlowFileQueue("id", new NopConnectionEventListener(), flowFileRepo, provRepo, claimManager, scheduler, swapManager, null, 1000, 0L, "0 B");
+        queue = new StandardFlowFileQueue("id", new NopConnectionEventListener(), flowFileRepo, provRepo, claimManager, scheduler, swapManager, null, 1000, "0 sec", 0L, "0 B");
 
         for (int i = 1; i <= 20000; i++) {
             queue.put(new MockFlowFileRecord());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/repository/StandardProcessSessionIT.java
Patch:
@@ -224,7 +224,7 @@ private FlowFileQueue createFlowFileQueueSpy(Connection connection) {
         final ProcessScheduler processScheduler = Mockito.mock(ProcessScheduler.class);
 
         final StandardFlowFileQueue actualQueue = new StandardFlowFileQueue("1", new NopConnectionEventListener(), flowFileRepo, provenanceRepo, null,
-                processScheduler, swapManager, null, 10000, 0L, "0 B");
+                processScheduler, swapManager, null, 10000, "0 sec", 0L, "0 B");
         return Mockito.spy(actualQueue);
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/repository/TestRocksDBFlowFileRepository.java
Patch:
@@ -206,7 +206,7 @@ public void testResourceClaimsIncremented() throws IOException {
         when(connection.getDestination()).thenReturn(Mockito.mock(Connectable.class));
 
         final FlowFileSwapManager swapMgr = new TestRocksDBFlowFileRepository.MockFlowFileSwapManager();
-        final FlowFileQueue queue = new StandardFlowFileQueue("1234", new NopConnectionEventListener(), null, null, claimManager, null, swapMgr, null, 10000, 0L, "0 B");
+        final FlowFileQueue queue = new StandardFlowFileQueue("1234", new NopConnectionEventListener(), null, null, claimManager, null, swapMgr, null, 10000, "0 sec", 0L, "0 B");
 
         when(connection.getFlowFileQueue()).thenReturn(queue);
         queueProvider.addConnection(connection);
@@ -651,7 +651,7 @@ private class TestQueue {
             provider = new TestQueueProvider();
             queuedFlowFiles = new ConcurrentSkipListSet<>(); // potentially accessed from multiple threads
 
-            final FlowFileQueue queue = new StandardFlowFileQueue("1234", null, null, null, null, null, null, null, 0, 0, "0 B") {
+            final FlowFileQueue queue = new StandardFlowFileQueue("1234", null, null, null, null, null, null, null, 0, "0 sec",0, "0 B") {
                 @Override
                 public void put(final FlowFileRecord file) {
                     queuedFlowFiles.add(file);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/repository/TestWriteAheadFlowFileRepository.java
Patch:
@@ -520,7 +520,7 @@ public void testResourceClaimsIncremented() throws IOException {
         when(connection.getDestination()).thenReturn(Mockito.mock(Connectable.class));
 
         final FlowFileSwapManager swapMgr = new MockFlowFileSwapManager();
-        final FlowFileQueue queue = new StandardFlowFileQueue("1234", new NopConnectionEventListener(), null, null, claimManager, null, swapMgr, null, 10000, 0L, "0 B");
+        final FlowFileQueue queue = new StandardFlowFileQueue("1234", new NopConnectionEventListener(), null, null, claimManager, null, swapMgr, null, 10000, "0 sec", 0L, "0 B");
 
         when(connection.getFlowFileQueue()).thenReturn(queue);
         queueProvider.addConnection(connection);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/integration/lifecycle/FlowFileRepositoryLifecycleIT.java
Patch:
@@ -74,7 +74,7 @@ public void testFlowFilesReloadedIntoQueuesUponRestart() throws ExecutionExcepti
 
         shutdown();
 
-        final FlowFileQueue restoredQueue = createFlowFileQueue(queue.getIdentifier());
+        final FlowFileQueue restoredQueue = createFlowFileQueue(queue.getIdentifier(), getRootGroup());
         initialize();
         getFlowController().initializeFlow(() -> Collections.singleton(restoredQueue));
 

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/engine/StatelessFlowManager.java
Patch:
@@ -230,7 +230,8 @@ public Connection createConnection(final String id, final String name, final Con
 
         final FlowFileQueueFactory flowFileQueueFactory = new FlowFileQueueFactory() {
             @Override
-            public FlowFileQueue createFlowFileQueue(final LoadBalanceStrategy loadBalanceStrategy, final String partitioningAttribute, final ConnectionEventListener eventListener) {
+            public FlowFileQueue createFlowFileQueue(final LoadBalanceStrategy loadBalanceStrategy, final String partitioningAttribute, final ConnectionEventListener eventListener,
+                                                     final ProcessGroup processGroup) {
                 return new StatelessFlowFileQueue(id);
             }
         };

File: nifi-nar-bundles/nifi-redis-bundle/nifi-redis-extensions/src/main/java/org/apache/nifi/redis/service/RedisDistributedMapCacheClientService.java
Patch:
@@ -161,8 +161,9 @@ public <K, V> V getAndPutIfAbsent(final K key, final V value, final Serializer<K
                 final List<Object> results = redisConnection.exec();
 
                 // if the results list was empty, then the transaction failed (i.e. key was modified after we started watching), so keep looping to retry
+                // if the results list was null, then the transaction failed
                 // if the results list has results, then the transaction succeeded and it should have the result of the setNX operation
-                if (results.size() > 0) {
+                if (results != null && results.size() > 0) {
                     final Object firstResult = results.get(0);
                     if (firstResult instanceof Boolean) {
                         final Boolean absent = (Boolean) firstResult;
@@ -337,7 +338,7 @@ public <K, V> boolean replace(final AtomicCacheEntry<K, V, byte[]> entry, final
             final List<Object> results = redisConnection.exec();
 
             // if we have a result then the replace succeeded
-            if (results.size() > 0) {
+            if (results != null && results.size() > 0) {
                 replaced = true;
             }
 

File: nifi-commons/nifi-single-user-utils/src/main/java/org/apache/nifi/authentication/single/user/writer/LoginCredentialsWriter.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.authentication.single.user.writer;
 
-import org.apache.nifi.authentication.LoginCredentials;
+import org.apache.nifi.authentication.single.user.SingleUserCredentials;
 
 /**
  * Writer for Login Identity Providers Configuration
@@ -25,7 +25,7 @@ public interface LoginCredentialsWriter {
     /**
      * Write Login Credentials
      *
-     * @param loginCredentials Login Credentials
+     * @param singleUserCredentials Single User Credentials
      */
-    void writeLoginCredentials(LoginCredentials loginCredentials);
+    void writeLoginCredentials(SingleUserCredentials singleUserCredentials);
 }

File: nifi-toolkit/nifi-toolkit-tls/src/main/java/org/apache/nifi/toolkit/tls/configuration/TlsConfig.java
Patch:
@@ -27,7 +27,7 @@
 public class TlsConfig {
     public static final String DEFAULT_HOSTNAME = "localhost";
     public static final String DEFAULT_KEY_STORE_TYPE = "jks";
-    public static final int DEFAULT_PORT = 8443;
+    public static final int DEFAULT_PORT = 9443;
     public static final int DEFAULT_DAYS = 825;
     public static final int DEFAULT_KEY_SIZE = 2048;
     public static final String DEFAULT_KEY_PAIR_ALGORITHM = "RSA";

File: nifi-toolkit/nifi-toolkit-tls/src/main/java/org/apache/nifi/toolkit/tls/status/TlsToolkitGetStatusCommandLine.java
Patch:
@@ -56,7 +56,7 @@ public class TlsToolkitGetStatusCommandLine extends BaseCommandLine {
 
     public TlsToolkitGetStatusCommandLine() {
         super(DESCRIPTION);
-        addOptionWithArg("u", URL_ARG, "The full url to connect to, for example: https://localhost:8443/v1/api");
+        addOptionWithArg("u", URL_ARG, "The full url to connect to, for example: https://localhost:9443/v1/api");
         addOptionWithArg("ks", KEYSTORE_ARG, "The key store to use");
         addOptionWithArg("kst", KEYSTORE_TYPE_ARG, "The type of key store being used (PKCS12 or JKS)", DEFAULT_KEYSTORE_TYPE);
         addOptionWithArg("ksp", KEYSTORE_PASSWORD_ARG, "The password of the key store being used");

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/avro/AvroReaderWithExplicitSchema.java
Patch:
@@ -89,7 +89,7 @@ protected GenericRecord nextAvroRecord() throws IOException {
         }
 
         try {
-            genericRecord = datumReader.read(genericRecord, decoder);
+            genericRecord = datumReader.read(null, decoder);
         } catch (final EOFException eof) {
             return null;
         }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/controller/service/StandardControllerServiceNode.java
Patch:
@@ -331,8 +331,9 @@ public void verifyCanEnable() {
 
     @Override
     public void verifyCanEnable(final Set<ControllerServiceNode> ignoredReferences) {
-        if (getState() != ControllerServiceState.DISABLED) {
-            throw new IllegalStateException(getControllerServiceImplementation().getIdentifier() + " cannot be enabled because it is not disabled");
+        final ControllerServiceState state = getState();
+        if (state != ControllerServiceState.DISABLED) {
+            throw new IllegalStateException(getControllerServiceImplementation().getIdentifier() + " cannot be enabled because it is not disabled - it has a state of " + state);
         }
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/FlowResource.java
Patch:
@@ -910,16 +910,16 @@ public Response activateControllerServices(
                         OperationAuthorizable.authorizeOperation(authorizable, authorizer, NiFiUserUtils.getNiFiUser());
                     });
                 },
-            () -> serviceFacade.verifyActivateControllerServices(id, desiredState, requestComponentRevisions.keySet()),
+                () -> serviceFacade.verifyActivateControllerServices(id, desiredState, requestComponentRevisions.keySet()),
                 (revisions, scheduleComponentsEntity) -> {
-                final ControllerServiceState serviceState = ControllerServiceState.valueOf(scheduleComponentsEntity.getState());
+                    final ControllerServiceState serviceState = ControllerServiceState.valueOf(scheduleComponentsEntity.getState());
 
                     final Map<String, RevisionDTO> componentsToSchedule = scheduleComponentsEntity.getComponents();
                     final Map<String, Revision> componentRevisions =
                             componentsToSchedule.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey, e -> getRevision(e.getValue(), e.getKey())));
 
                     // update the controller services
-                final ActivateControllerServicesEntity entity = serviceFacade.activateControllerServices(id, serviceState, componentRevisions);
+                    final ActivateControllerServicesEntity entity = serviceFacade.activateControllerServices(id, serviceState, componentRevisions);
                     return generateOkResponse(entity).build();
                 }
         );

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/FlowUpdateResource.java
Patch:
@@ -323,7 +323,7 @@ private void updateFlow(final String groupId, final ComponentLifecycle component
         logger.info("Stopping {} Processors", runningComponents.size());
         final CancellableTimedPause stopComponentsPause = new CancellableTimedPause(250, Long.MAX_VALUE, TimeUnit.MILLISECONDS);
         asyncRequest.setCancelCallback(stopComponentsPause::cancel);
-        componentLifecycle.scheduleComponents(requestUri, groupId, runningComponents, ScheduledState.STOPPED, stopComponentsPause, InvalidComponentAction.SKIP);
+        componentLifecycle.scheduleComponents(requestUri, groupId, runningComponents, ScheduledState.STOPPED, stopComponentsPause, InvalidComponentAction.WAIT);
 
         if (asyncRequest.isCancelled()) {
             return;
@@ -339,7 +339,7 @@ private void updateFlow(final String groupId, final ComponentLifecycle component
         logger.info("Disabling {} Controller Services", enabledServices.size());
         final CancellableTimedPause disableServicesPause = new CancellableTimedPause(250, Long.MAX_VALUE, TimeUnit.MILLISECONDS);
         asyncRequest.setCancelCallback(disableServicesPause::cancel);
-        componentLifecycle.activateControllerServices(requestUri, groupId, enabledServices, ControllerServiceState.DISABLED, disableServicesPause, InvalidComponentAction.SKIP);
+        componentLifecycle.activateControllerServices(requestUri, groupId, enabledServices, ControllerServiceState.DISABLED, disableServicesPause, InvalidComponentAction.WAIT);
 
         if (asyncRequest.isCancelled()) {
             return;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ParameterContextResource.java
Patch:
@@ -854,7 +854,7 @@ private ParameterContextEntity updateParameterContext(final AsynchronousWebReque
         final Set<AffectedComponentEntity> enabledControllerServices = affectedComponents.stream()
             .filter(entity -> entity.getComponent() != null)
             .filter(dto -> AffectedComponentDTO.COMPONENT_TYPE_CONTROLLER_SERVICE.equals(dto.getComponent().getReferenceType()))
-            .filter(dto -> "Enabled".equalsIgnoreCase(dto.getComponent().getState()))
+            .filter(dto -> "Enabling".equalsIgnoreCase(dto.getComponent().getState()) || "Enabled".equalsIgnoreCase(dto.getComponent().getState()))
             .collect(Collectors.toSet());
 
         stopProcessors(runningProcessors, asyncRequest, componentLifecycle, uri);
@@ -965,7 +965,7 @@ private void stopProcessors(final Set<AffectedComponentEntity> processors, final
         logger.info("Stopping {} Processors in order to update Parameter Context", processors.size());
         final CancellableTimedPause stopComponentsPause = new CancellableTimedPause(250, Long.MAX_VALUE, TimeUnit.MILLISECONDS);
         asyncRequest.setCancelCallback(stopComponentsPause::cancel);
-        componentLifecycle.scheduleComponents(uri, "root", processors, ScheduledState.STOPPED, stopComponentsPause, InvalidComponentAction.SKIP);
+        componentLifecycle.scheduleComponents(uri, "root", processors, ScheduledState.STOPPED, stopComponentsPause, InvalidComponentAction.WAIT);
     }
 
     private void restartProcessors(final Set<AffectedComponentEntity> processors, final AsynchronousWebRequest<?, ?> asyncRequest, final ComponentLifecycle componentLifecycle, final URI uri)
@@ -1000,7 +1000,7 @@ private void disableControllerServices(final Set<AffectedComponentEntity> contro
         logger.info("Disabling {} Controller Services in order to update Parameter Context", controllerServices.size());
         final CancellableTimedPause disableServicesPause = new CancellableTimedPause(250, Long.MAX_VALUE, TimeUnit.MILLISECONDS);
         asyncRequest.setCancelCallback(disableServicesPause::cancel);
-        componentLifecycle.activateControllerServices(uri, "root", controllerServices, ControllerServiceState.DISABLED, disableServicesPause, InvalidComponentAction.SKIP);
+        componentLifecycle.activateControllerServices(uri, "root", controllerServices, ControllerServiceState.DISABLED, disableServicesPause, InvalidComponentAction.WAIT);
     }
 
     private void enableControllerServices(final Set<AffectedComponentEntity> controllerServices, final AsynchronousWebRequest<?, ?> asyncRequest, final ComponentLifecycle componentLifecycle,

File: nifi-system-tests/nifi-system-test-suite/src/test/java/org/apache/nifi/tests/system/NiFiSystemIT.java
Patch:
@@ -307,6 +307,7 @@ private ConnectionStatusEntity getConnectionStatus(final String connectionId) {
         try {
             return getNifiClient().getFlowClient().getConnectionStatus(connectionId, true);
         } catch (final Exception e) {
+            e.printStackTrace();
             Assert.fail("Failed to obtain connection status");
             return null;
         }

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/engine/StatelessEngine.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.nifi.controller.ReloadComponent;
 import org.apache.nifi.controller.flow.FlowManager;
 import org.apache.nifi.controller.kerberos.KerberosConfig;
+import org.apache.nifi.controller.repository.CounterRepository;
 import org.apache.nifi.controller.repository.FlowFileEventRepository;
 import org.apache.nifi.controller.service.ControllerServiceProvider;
 import org.apache.nifi.encrypt.PropertyEncryptor;
@@ -68,4 +69,6 @@ public interface StatelessEngine<T> {
     ProvenanceRepository getProvenanceRepository();
 
     FlowFileEventRepository getFlowFileEventRepository();
+
+    CounterRepository getCounterRepository();
 }
\ No newline at end of file

File: nifi-stateless/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/flow/StandardStatelessDataflowFactory.java
Patch:
@@ -171,6 +171,8 @@ private synchronized PropertyEncryptor getEncryptor() {
                 }
             };
 
+            final CounterRepository counterRepo = new StandardCounterRepository();
+
             final File krb5File = engineConfiguration.getKrb5File();
             final KerberosConfig kerberosConfig = new KerberosConfig(null, null, krb5File);
             logger.info("Setting java.security.krb5.conf to {}", krb5File.getAbsolutePath());
@@ -188,6 +190,7 @@ private synchronized PropertyEncryptor getEncryptor() {
                 .flowFileEventRepository(flowFileEventRepo)
                 .provenanceRepository(provenanceRepo)
                 .extensionRepository(extensionRepository)
+                .counterRepository(counterRepo)
                 .build();
 
             final StatelessFlowManager flowManager = new StatelessFlowManager(flowFileEventRepo, parameterContextManager, statelessEngine, () -> true, sslContext);
@@ -197,7 +200,6 @@ private synchronized PropertyEncryptor getEncryptor() {
             final ProcessContextFactory processContextFactory = new CachingProcessContextFactory(rawProcessContextFactory);
             contentRepo = new ByteArrayContentRepository();
             flowFileRepo = new StatelessFlowFileRepository();
-            final CounterRepository counterRepo = new StandardCounterRepository();
 
             final RepositoryContextFactory repositoryContextFactory = new StatelessRepositoryContextFactory(contentRepo, flowFileRepo, flowFileEventRepo,
                 counterRepo, provenanceRepo, stateManagerProvider);

File: nifi-nar-bundles/nifi-parquet-bundle/nifi-parquet-processors/src/test/java/org/apache/nifi/processors/parquet/TestConvertAvroToParquet.java
Patch:
@@ -244,8 +244,8 @@ public void test_Data() throws Exception {
         assertEquals(firstRecord.getGroup("myarray",0).getGroup("list",1).getInteger("element", 0), 2);
 
         // Map
-        assertEquals(firstRecord.getGroup("mymap",0).getGroup("map",0).getInteger("value", 0), 1);
-        assertEquals(firstRecord.getGroup("mymap",0).getGroup("map",1).getInteger("value", 0), 2);
+        assertEquals(firstRecord.getGroup("mymap",0).getGroup("key_value",0).getInteger("value", 0), 1);
+        assertEquals(firstRecord.getGroup("mymap",0).getGroup("key_value",1).getInteger("value", 0), 2);
 
         // Fixed
         assertEquals(firstRecord.getString("myfixed",0), "A");

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/ConversionWithSchemaInferenceIT.java
Patch:
@@ -41,7 +41,7 @@ protected String xmlPostfix() {
     public void testJsonToAvro() throws Exception {
         fromJson(jsonPostfix());
 
-        // JSON schema inference doesn't discern INT and FLOAT but uses LONG and DOUBLE instead.
+        // JSON schema inference doesn't discern FLOAT but uses DOUBLE instead.
         //  So the expected avro is a little bit different as the deserialized values also end up in
         //      Long and Double objects
         toAvro("with_schema.json.to.avro");

File: nifi-nar-bundles/nifi-kudu-bundle/nifi-kudu-processors/src/test/java/org/apache/nifi/processors/kudu/MockPutKudu.java
Patch:
@@ -72,8 +72,8 @@ public void queue(Operation... operations) {
 
     @Override
     protected Operation createKuduOperation(OperationType operationType, Record record,
-                                            List<String> fieldNames, Boolean ignoreNull,
-                                            Boolean lowercaseFields, KuduTable kuduTable) {
+                                            List<String> fieldNames, boolean ignoreNull,
+                                            boolean lowercaseFields, KuduTable kuduTable) {
         Operation operation = opQueue.poll();
         if (operation == null) {
             switch (operationType) {

File: nifi-api/src/main/java/org/apache/nifi/processor/AbstractProcessor.java
Patch:
@@ -25,7 +25,7 @@ public final void onTrigger(final ProcessContext context, final ProcessSessionFa
         final ProcessSession session = sessionFactory.createSession();
         try {
             onTrigger(context, session);
-            session.commit();
+            session.commitAsync();
         } catch (final Throwable t) {
             session.rollback(true);
             throw t;

File: nifi-api/src/main/java/org/apache/nifi/processor/Processor.java
Patch:
@@ -16,10 +16,11 @@
  */
 package org.apache.nifi.processor;
 
-import java.util.Set;
 import org.apache.nifi.components.ConfigurableComponent;
 import org.apache.nifi.processor.exception.ProcessException;
 
+import java.util.Set;
+
 /**
  * <p>
  * Processor objects operate on FlowFile objects where the processors are linked
@@ -86,5 +87,4 @@ public interface Processor extends ConfigurableComponent {
      * indicate a probable coding defect.
      */
     void onTrigger(ProcessContext context, ProcessSessionFactory sessionFactory) throws ProcessException;
-
 }

File: nifi-nar-bundles/nifi-cybersecurity-bundle/nifi-cybersecurity-processors/src/main/java/org/apache/nifi/processors/cybersecurity/CompareFuzzyHash.java
Patch:
@@ -252,11 +252,9 @@ public void onTrigger(ProcessContext context, ProcessSession session) throws Pro
                 // Finally, append the attributes to the flowfile and sent to match
                 flowFile = session.putAllAttributes(flowFile, attributes);
                 session.transfer(flowFile, REL_FOUND);
-                session.commit();
             } else {
                 // Otherwise send it to non-match
                 session.transfer(flowFile, REL_NOT_FOUND);
-                session.commit();
             }
         } catch (final IOException e) {
             logger.error("Error while reading the hash input source for {}", flowFile, e);

File: nifi-nar-bundles/nifi-email-bundle/nifi-email-processors/src/main/java/org/apache/nifi/processors/email/ConsumeEWS.java
Patch:
@@ -559,7 +559,7 @@ protected void flushRemainingMessages(ProcessContext processContext) {
         try {
             while ((emailMessage = this.messageQueue.poll(1, TimeUnit.MILLISECONDS)) != null) {
                 this.transfer(emailMessage, processContext, this.processSession);
-                this.processSession.commit();
+                this.processSession.commitAsync();
             }
         } catch (InterruptedException e) {
             Thread.currentThread().interrupt();

File: nifi-nar-bundles/nifi-extension-utils/nifi-processor-utils/src/main/java/org/apache/nifi/processor/util/bin/BinFiles.java
Patch:
@@ -233,7 +233,7 @@ private int processBins(final ProcessContext context) {
                 for (final FlowFile flowFile : bin.getContents()) {
                     binSession.transfer(flowFile, REL_FAILURE);
                 }
-                binSession.commit();
+                binSession.commitAsync();
                 continue;
             } catch (final Exception e) {
                 logger.error("Failed to process bundle of {} files due to {}; rolling back sessions", new Object[] {bin.getContents().size(), e});
@@ -247,7 +247,7 @@ private int processBins(final ProcessContext context) {
                 final ProcessSession binSession = bin.getSession();
                 bin.getContents().forEach(ff -> binSession.putAllAttributes(ff, binProcessingResult.getAttributes()));
                 binSession.transfer(bin.getContents(), REL_ORIGINAL);
-                binSession.commit();
+                binSession.commitAsync();
             }
 
             processedBins++;

File: nifi-nar-bundles/nifi-extension-utils/nifi-processor-utils/src/main/java/org/apache/nifi/processor/util/bin/BinManager.java
Patch:
@@ -297,4 +297,5 @@ public boolean containsOldBins() {
         }
         return false;
     }
+
 }

File: nifi-nar-bundles/nifi-extension-utils/nifi-processor-utils/src/main/java/org/apache/nifi/processor/util/list/AbstractListProcessor.java
Patch:
@@ -811,7 +811,7 @@ public void listByTrackingTimestamps(final ProcessContext context, final Process
                 latestIdentifiersProcessed.addAll(orderedEntries.lastEntry().getValue().stream().map(T::getIdentifier).collect(Collectors.toList()));
                 lastProcessedLatestEntryTimestampMillis = orderedEntries.lastKey();
                 getLogger().info("Successfully created listing with {} new objects", new Object[]{entitiesListed});
-                session.commit();
+                session.commitAsync();
             }
 
             lastRunTimeNanos = currentRunTimeNanos;
@@ -823,8 +823,6 @@ public void listByTrackingTimestamps(final ProcessContext context, final Process
             if (lastListedLatestEntryTimestampMillis == null) {
                 lastListedLatestEntryTimestampMillis = 0L;
             }
-
-            return;
         }
     }
 

File: nifi-nar-bundles/nifi-extension-utils/nifi-processor-utils/src/main/java/org/apache/nifi/processor/util/pattern/PartialFunctions.java
Patch:
@@ -118,7 +118,7 @@ public static void onTrigger(
         final ProcessSession session = sessionFactory.createSession();
         try {
             onTrigger.execute(session);
-            session.commit();
+            session.commitAsync();
         } catch (final Throwable t) {
             logger.error("{} failed to process due to {}; rolling back session", new Object[]{onTrigger, t});
             rollbackSession.rollback(session, t);

File: nifi-nar-bundles/nifi-flume-bundle/nifi-flume-processors/src/main/java/org/apache/nifi/processors/flume/NifiTransaction.java
Patch:
@@ -43,7 +43,7 @@ protected Event doTake() throws InterruptedException {
 
     @Override
     protected void doCommit() throws InterruptedException {
-        session.commit();
+        session.commitAsync();
     }
 
     @Override

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/connectable/LocalPort.java
Patch:
@@ -208,7 +208,7 @@ private void transferInputBatch(final ProcessSession session) {
         while (session.getQueueSize().getObjectCount() > 0) {
             final List<FlowFile> flowFiles = session.get(10000);
             session.transfer(flowFiles, Relationship.ANONYMOUS);
-            session.commit();
+            session.commitAsync();
             logger.debug("{} Successfully transferred {} FlowFiles into {}", this, flowFiles.size(), processGroup);
         }
     }
@@ -243,7 +243,7 @@ protected void transferUnboundedConcurrency(final ProcessContext context, final
             }
 
             session.transfer(flowFiles, Relationship.ANONYMOUS);
-            session.commit();
+            session.commitAsync();
 
             logger.debug("{} Transferred {} FlowFiles", this, flowFiles.size());
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/AbstractPort.java
Patch:
@@ -242,11 +242,12 @@ public void onTrigger(final ProcessContext context, final ProcessSessionFactory
 
         try {
             onTrigger(context, session);
-            session.commit();
         } catch (final Throwable t) {
             session.rollback();
             throw t;
         }
+
+        session.commitAsync();
     }
 
     public abstract void onTrigger(final ProcessContext context, final ProcessSession session) throws ProcessException;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/StandardFunnel.java
Patch:
@@ -358,7 +358,7 @@ public void onTrigger(final ProcessContext context, final ProcessSessionFactory
 
         try {
             onTrigger(context, session);
-            session.commit();
+            session.commitAsync();
         } catch (final ProcessException e) {
             session.rollback();
             throw e;
@@ -380,7 +380,7 @@ private void onTrigger(final ProcessContext context, final ProcessSession sessio
                 }
 
                 session.transfer(flowFiles, Relationship.ANONYMOUS);
-                session.commit();
+                session.commitAsync();
 
                 // If there are fewer than 1,000 FlowFiles available to transfer, or if we
                 // have hit the configured FlowFile cap, we want to stop. This prevents us from

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/scheduling/EventDrivenSchedulingAgent.java
Patch:
@@ -264,7 +264,7 @@ public void run() {
                         } finally {
                             if (batch && rawSession != null) {
                                 try {
-                                    rawSession.commit();
+                                    rawSession.commitAsync();
                                 } catch (final RuntimeException re) {
                                     logger.error("Unable to commit process session", re);
                                 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/tasks/ExpireFlowFiles.java
Patch:
@@ -82,7 +82,7 @@ private void expireFlowFiles(final Connectable connectable) {
 
         final StandardProcessSession session = createSession(connectable);
         session.expireFlowFiles();
-        session.commit();
+        session.commitAsync();
     }
 
     private void expireFlowFiles(final ProcessGroup group) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-site-to-site/src/main/java/org/apache/nifi/remote/protocol/AbstractFlowFileServerProtocol.java
Patch:
@@ -375,7 +375,7 @@ protected int commitTransferTransaction(Peer peer, FlowFileTransaction transacti
             throw new ProtocolException("After sending data, expected TRANSACTION_FINISHED response but got " + transactionResponse);
         }
 
-        session.commit();
+        session.commitAsync();
 
         StopWatch stopWatch = transaction.getStopWatch();
         long bytesSent = transaction.getBytesSent();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-api/src/main/java/org/apache/nifi/stateless/flow/DataflowDefinition.java
Patch:
@@ -33,4 +33,6 @@ public interface DataflowDefinition<T> {
     List<ParameterContextDefinition> getParameterContexts();
 
     List<ReportingTaskDefinition> getReportingTaskDefinitions();
+
+    TransactionThresholds getTransactionThresholds();
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/engine/StatelessEngine.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.nifi.components.validation.ValidationTrigger;
 import org.apache.nifi.controller.ProcessScheduler;
 import org.apache.nifi.controller.ReloadComponent;
+import org.apache.nifi.controller.flow.FlowManager;
 import org.apache.nifi.controller.kerberos.KerberosConfig;
 import org.apache.nifi.controller.repository.FlowFileEventRepository;
 import org.apache.nifi.controller.service.ControllerServiceProvider;
@@ -52,6 +53,8 @@ public interface StatelessEngine<T> {
 
     FlowRegistryClient getFlowRegistryClient();
 
+    FlowManager getFlowManager();
+
     VariableRegistry getRootVariableRegistry();
 
     ProcessScheduler getProcessScheduler();

File: nifi-nar-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/storage/ListGCSBucket.java
Patch:
@@ -366,7 +366,7 @@ private void commit(final ProcessSession session, final int listCount, final lon
             persistState(session, currentTimestamp, currentKeys);
 
             getLogger().info("Successfully listed {} new files from GCS; routing to success", new Object[] {listCount});
-            session.commit();
+            session.commitAsync();
         }
     }
 

File: nifi-nar-bundles/nifi-groovyx-bundle/nifi-groovyx-processors/src/main/java/org/apache/nifi/processors/groovyx/ExecuteGroovyScript.java
Patch:
@@ -474,7 +474,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession _sessio
             bindings.clear();
 
             onCommitSQL(SQL);
-            session.commit();
+            session.commitAsync();
         } catch (Throwable t) {
             getLogger().error(t.toString(), t);
             onFailSQL(SQL);

File: nifi-nar-bundles/nifi-hbase-bundle/nifi-hbase-processors/src/main/java/org/apache/nifi/hbase/AbstractDeleteHBase.java
Patch:
@@ -94,9 +94,7 @@ public void onTrigger(ProcessContext context, ProcessSession session) throws Pro
         try {
             doDelete(context, session);
         } catch (Exception e) {
-            getLogger().error("Error", e);
-        } finally {
-            session.commit();
+            getLogger().error("Failed to perform delete", e);
         }
     }
 

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-2-0-processors/src/test/java/org/apache/nifi/processors/kafka/pubsub/ConsumerPoolTest.java
Patch:
@@ -153,7 +153,7 @@ public void validatePoolSimpleCreatePollClose() throws Exception {
         }
         testPool.close();
         verify(mockSession, times(3)).create();
-        verify(mockSession, times(1)).commit();
+        verify(mockSession, times(1)).commitAsync(Mockito.any(Runnable.class));
         final PoolStats stats = testPool.getPoolStats();
         assertEquals(1, stats.consumerCreatedCount);
         assertEquals(1, stats.consumerClosedCount);
@@ -279,7 +279,7 @@ public void validatePoolBatchCreatePollClose() throws Exception {
         }
         testDemarcatedPool.close();
         verify(mockSession, times(1)).create();
-        verify(mockSession, times(1)).commit();
+        verify(mockSession, times(1)).commitAsync(Mockito.any(Runnable.class));
         final PoolStats stats = testDemarcatedPool.getPoolStats();
         assertEquals(1, stats.consumerCreatedCount);
         assertEquals(1, stats.consumerClosedCount);

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-2-6-processors/src/test/java/org/apache/nifi/processors/kafka/pubsub/ConsumerPoolTest.java
Patch:
@@ -153,7 +153,7 @@ public void validatePoolSimpleCreatePollClose() throws Exception {
         }
         testPool.close();
         verify(mockSession, times(3)).create();
-        verify(mockSession, times(1)).commit();
+        verify(mockSession, times(1)).commitAsync(Mockito.any(Runnable.class));
         final PoolStats stats = testPool.getPoolStats();
         assertEquals(1, stats.consumerCreatedCount);
         assertEquals(1, stats.consumerClosedCount);
@@ -278,7 +278,7 @@ public void validatePoolBatchCreatePollClose() throws Exception {
         }
         testDemarcatedPool.close();
         verify(mockSession, times(1)).create();
-        verify(mockSession, times(1)).commit();
+        verify(mockSession, times(1)).commitAsync(Mockito.any(Runnable.class));
         final PoolStats stats = testDemarcatedPool.getPoolStats();
         assertEquals(1, stats.consumerCreatedCount);
         assertEquals(1, stats.consumerClosedCount);

File: nifi-nar-bundles/nifi-mongodb-bundle/nifi-mongodb-processors/src/main/java/org/apache/nifi/processors/mongodb/PutMongoRecord.java
Patch:
@@ -159,7 +159,6 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
                 getLogger().info("Inserted {} records into MongoDB", new Object[]{ added });
             }
         }
-        session.commit();
     }
 
     private Document convertArrays(Document doc) {

File: nifi-nar-bundles/nifi-mongodb-bundle/nifi-mongodb-processors/src/main/java/org/apache/nifi/processors/mongodb/gridfs/FetchGridFS.java
Patch:
@@ -167,7 +167,7 @@ public void onTrigger(ProcessContext context, ProcessSession session) throws Pro
                 handleFile(bucket, session, context, parent, gridFSFile, queryPtr);
 
                 if (operatingMode.equals(MODE_MANY_COMMITS.getValue())) {
-                    session.commit();
+                    session.commitAsync();
                 }
             }
 

File: nifi-nar-bundles/nifi-mqtt-bundle/nifi-mqtt-processors/src/main/java/org/apache/nifi/processors/mqtt/common/AbstractMQTTProcessor.java
Patch:
@@ -382,7 +382,7 @@ public final void onTrigger(final ProcessContext context, final ProcessSessionFa
         ProcessSession session = sessionFactory.createSession();
         try {
             onTrigger(context, session);
-            session.commit();
+            session.commitAsync();
         } catch (final Throwable t) {
             getLogger().error("{} failed to process due to {}; rolling back session", new Object[]{this, t});
             session.rollback(true);

File: nifi-nar-bundles/nifi-mqtt-bundle/nifi-mqtt-processors/src/test/java/org/apache/nifi/processors/mqtt/TestConsumeMQTT.java
Patch:
@@ -119,7 +119,7 @@ public void testMessageNotConsumedOnCommitFail() throws NoSuchFieldException, Il
             ProcessSession session = testRunner.getProcessSessionFactory().createSession();
             transferQueue(processor,
                     (ProcessSession) Proxy.newProxyInstance(getClass().getClassLoader(), new Class[] { ProcessSession.class }, (proxy, method, args) -> {
-                        if (method.getName().equals("commit")) {
+                        if (method.getName().equals("commitAsync")) {
                             throw new RuntimeException();
                         } else {
                             return method.invoke(session, args);

File: nifi-nar-bundles/nifi-riemann-bundle/nifi-riemann-processors/src/main/java/org/apache/nifi/processors/riemann/PutRiemann.java
Patch:
@@ -316,11 +316,9 @@ public void onTrigger(ProcessContext context, ProcessSession session) throws Pro
       }
       riemannClient.flush();
       session.transfer(successfulFlowFiles, REL_SUCCESS);
-      session.commit();
     } catch (Exception e) {
       context.yield();
       session.transfer(incomingFlowFiles);
-      session.commit();
       throw new ProcessException("Failed writing to Riemann\n" + e.getMessage());
     }
   }

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/processors/script/ExecuteScript.java
Patch:
@@ -270,7 +270,7 @@ public void onTrigger(ProcessContext context, ProcessSessionFactory sessionFacto
                 // Commit this session for the user. This plus the outermost catch statement mimics the behavior
                 // of AbstractProcessor. This class doesn't extend AbstractProcessor in order to share a base
                 // class with InvokeScriptedProcessor
-                session.commit();
+                session.commitAsync();
             } catch (ScriptException e) {
                 // Reset the configurator on error, this can indicate to the configurator to recompile the script on next init()
                 ScriptEngineConfigurator configurator =

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/AbstractQueryDatabaseTable.java
Patch:
@@ -322,7 +322,7 @@ public void onTrigger(final ProcessContext context, final ProcessSessionFactory
                         // If we've reached the batch size, send out the flow files
                         if (outputBatchSize > 0 && resultSetFlowFiles.size() >= outputBatchSize) {
                             session.transfer(resultSetFlowFiles, REL_SUCCESS);
-                            session.commit();
+                            session.commitAsync();
                             resultSetFlowFiles.clear();
                         }
                     } else {
@@ -392,7 +392,7 @@ public void onTrigger(final ProcessContext context, final ProcessSessionFactory
                 getLogger().error("{} failed to update State Manager, maximum observed values will not be recorded", new Object[]{this, ioe});
             }
 
-            session.commit();
+            session.commitAsync();
         }
     }
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ExecuteProcess.java
Patch:
@@ -301,9 +301,6 @@ public void process(final OutputStream flowFileOut) throws IOException {
             getLogger().info("Created {} and routed to success", new Object[] { flowFile });
             session.transfer(flowFile, REL_SUCCESS);
         }
-
-        // Commit the session so that the FlowFile is transferred to the next processor
-        session.commit();
     }
 
     protected List<String> createCommandStrings(final ProcessContext context, final String command, final String arguments) {

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/GenerateTableFetch.java
Patch:
@@ -555,7 +555,7 @@ public void onTrigger(final ProcessContext context, final ProcessSessionFactory
                                 + "Also, any generated SQL statements may be duplicated.", this, ioe);
             }
 
-            session.commit();
+            session.commitAsync();
 
         } catch (final ProcessException pe) {
             // Log the cause of the ProcessException if it is available

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/GetFile.java
Patch:
@@ -470,7 +470,6 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
                     }
                 }
             }
-            session.commit();
         } catch (final Exception e) {
             logger.error("Failed to retrieve files due to {}", e);
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/GetHTTP.java
Patch:
@@ -465,15 +465,15 @@ public void onTrigger(final ProcessContext context, final ProcessSessionFactory
                         logger.info("content not retrieved because server returned HTTP Status Code {}: Not Modified", new Object[]{NOT_MODIFIED});
                         context.yield();
                         // doing a commit in case there were flow files in the input queue
-                        session.commit();
+                        session.commitAsync();
                         return;
                     }
                     final String statusExplanation = response.getStatusLine().getReasonPhrase();
 
                     if ((statusCode >= 300) || (statusCode == 204)) {
                         logger.error("received status code {}:{} from {}", new Object[]{statusCode, statusExplanation, url});
                         // doing a commit in case there were flow files in the input queue
-                        session.commit();
+                        session.commitAsync();
                         return;
                     }
 
@@ -496,9 +496,9 @@ public void onTrigger(final ProcessContext context, final ProcessSessionFactory
                     session.getProvenanceReporter().receive(flowFile, url, stopWatch.getDuration(TimeUnit.MILLISECONDS));
                     session.transfer(flowFile, REL_SUCCESS);
                     logger.info("Successfully received {} from {} at a rate of {}; transferred to success", new Object[]{flowFile, url, dataRate});
-                    session.commit();
 
                     updateStateMap(context, session, response, beforeStateMap, url);
+                    session.commitAsync();
 
                 } catch (final IOException e) {
                     context.yield();

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/MergeContent.java
Patch:
@@ -510,7 +510,7 @@ protected BinProcessingResult processBin(final Bin bin, final ProcessContext con
                 final String binDescription = contents.size() <= 10 ? contents.toString() : contents.size() + " FlowFiles";
                 getLogger().error(error + "; routing {} to failure", new Object[]{binDescription});
                 binSession.transfer(contents, REL_FAILURE);
-                binSession.commit();
+                binSession.commitAsync();
 
                 return binProcessingResult;
             }

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/MergeRecord.java
Patch:
@@ -350,7 +350,7 @@ public void onTrigger(final ProcessContext context, final ProcessSessionFactory
                 }
             }
         } finally {
-            session.commit();
+            session.commitAsync();
         }
 
         // If there is no more data queued up, or strategy is defragment, complete any bin that meets our minimum threshold
@@ -419,4 +419,5 @@ protected String getGroupId(final ProcessContext context, final FlowFile flowFil
     int getBinCount() {
         return binManager.get().getBinCount();
     }
+
 }

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/merge/RecordBin.java
Patch:
@@ -189,7 +189,7 @@ public boolean offer(final FlowFile flowFile, final RecordReader recordReader, f
                 complete = true;
                 session.remove(merged);
                 session.transfer(flowFiles, MergeRecord.REL_FAILURE);
-                session.commit();
+                session.commitAsync();
             }
 
             return true;
@@ -298,7 +298,7 @@ private void fail() {
 
             session.remove(merged);
             session.transfer(flowFiles, MergeRecord.REL_FAILURE);
-            session.commit();
+            session.commitAsync();
         } finally {
             writeLock.unlock();
         }
@@ -400,7 +400,7 @@ public void complete(final String completionReason) throws IOException {
             session.transfer(merged, MergeRecord.REL_MERGED);
             session.transfer(flowFiles, MergeRecord.REL_ORIGINAL);
             session.adjustCounter("Records Merged", writeResult.getRecordCount(), false);
-            session.commit();
+            session.commitAsync();
 
             if (logger.isDebugEnabled()) {
                 final List<String> ids = flowFiles.stream().map(ff -> "id=" + ff.getId()).collect(Collectors.toList());

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/servlets/ListenHTTPServlet.java
Patch:
@@ -418,7 +418,7 @@ protected void proceedFlow(final HttpServletRequest request, final HttpServletRe
                 new Object[]{request.getRemoteHost(), request.getRemotePort(), foundSubject, foundIssuer});
 
             session.transfer(flowFileSet, ListenHTTP.RELATIONSHIP_SUCCESS);
-            session.commit();
+            session.commitAsync();
         }
     }
 

File: nifi-nar-bundles/nifi-websocket-bundle/nifi-websocket-processors/src/main/java/org/apache/nifi/processors/websocket/AbstractWebSocketGatewayProcessor.java
Patch:
@@ -225,7 +225,7 @@ private void enqueueMessage(final WebSocketMessage incomingMessage){
                         break;
                 }
             }
-            session.commit();
+            session.commitAsync();
 
         } catch (Exception e) {
             logger.error("Unable to fully process input due to " + e, e);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/FileSystemSwapManager.java
Patch:
@@ -167,7 +167,7 @@ public SwapContents swapIn(final String swapLocation, final FlowFileQueue flowFi
             warn("Cannot swap in FlowFiles from location " + swapLocation + " because the FlowFile Repository does not know about this Swap Location. " +
                 "This file should be manually removed. This typically occurs when a Swap File is written but the FlowFile Repository is not updated yet to reflect this. " +
                 "This is generally not a cause for concern, but may be indicative of a failure to update the FlowFile Repository.");
-            final SwapSummary swapSummary = new StandardSwapSummary(new QueueSize(0, 0), 0L, Collections.emptyList());
+            final SwapSummary swapSummary = new StandardSwapSummary(new QueueSize(0, 0), 0L, Collections.emptyList(), 0L, 0L);
             return new StandardSwapContents(swapSummary, Collections.emptyList());
         }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/swap/SimpleSwapDeserializer.java
Patch:
@@ -104,7 +104,7 @@ public SwapContents deserializeFlowFiles(final DataInputStream in, final String
             }
         } catch (final EOFException eof) {
             final QueueSize queueSize = new QueueSize(numRecords, contentSize);
-            final SwapSummary summary = new StandardSwapSummary(queueSize, maxRecordId, Collections.emptyList());
+            final SwapSummary summary = new StandardSwapSummary(queueSize, maxRecordId, Collections.emptyList(), 0L, 0L);
             final SwapContents partialContents = new StandardSwapContents(summary, Collections.emptyList());
             throw new IncompleteSwapFileException(swapLocation, partialContents);
         }
@@ -247,13 +247,13 @@ private static SwapContents deserializeFlowFiles(final DataInputStream in, final
 
                 flowFiles.add(record);
             } catch (final EOFException eof) {
-                final SwapSummary swapSummary = new StandardSwapSummary(queueSize, maxId, resourceClaims);
+                final SwapSummary swapSummary = new StandardSwapSummary(queueSize, maxId, resourceClaims, 0L, 0L);
                 final SwapContents partialContents = new StandardSwapContents(swapSummary, flowFiles);
                 throw new IncompleteSwapFileException(location, partialContents);
             }
         }
 
-        final SwapSummary swapSummary = new StandardSwapSummary(queueSize, maxId, resourceClaims);
+        final SwapSummary swapSummary = new StandardSwapSummary(queueSize, maxId, resourceClaims, 0L, 0L);
         return new StandardSwapContents(swapSummary, flowFiles);
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/repository/TestRocksDBFlowFileRepository.java
Patch:
@@ -786,7 +786,7 @@ public SwapSummary getSwapSummary(String swapLocation) {
                 }
             }
 
-            return new StandardSwapSummary(new QueueSize(records.size(), size), maxId, resourceClaims);
+            return new StandardSwapSummary(new QueueSize(records.size(), size), maxId, resourceClaims, 0L, 0L);
         }
 
         @Override

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/swap/MockFlowFile.java
Patch:
@@ -34,7 +34,7 @@ public class MockFlowFile implements FlowFileRecord {
 
     private final long id;
     private final long entryDate = System.currentTimeMillis();
-    private final long lastQueueDate = System.currentTimeMillis();
+    private final long lastQueueDate = System.currentTimeMillis() + 1;
     private final Map<String, String> attributes;
     private final long size;
     private final ContentClaim contentClaim;

File: nifi-commons/nifi-record/src/main/java/org/apache/nifi/serialization/record/util/DataTypeUtils.java
Patch:
@@ -1974,8 +1974,6 @@ public static DataType getDataTypeFromSQLTypeValue(final int sqlType) {
                 return RecordFieldType.BOOLEAN.getDataType();
             case Types.TINYINT:
                 return RecordFieldType.BYTE.getDataType();
-            case Types.CHAR:
-                return RecordFieldType.CHAR.getDataType();
             case Types.DATE:
                 return RecordFieldType.DATE.getDataType();
             case Types.DOUBLE:
@@ -1988,6 +1986,7 @@ public static DataType getDataTypeFromSQLTypeValue(final int sqlType) {
                 return RecordFieldType.INT.getDataType();
             case Types.SMALLINT:
                 return RecordFieldType.SHORT.getDataType();
+            case Types.CHAR:
             case Types.VARCHAR:
             case Types.LONGNVARCHAR:
             case Types.LONGVARCHAR:

File: nifi-commons/nifi-record/src/test/java/org/apache/nifi/serialization/record/TestDataTypeUtils.java
Patch:
@@ -366,6 +366,7 @@ public void testGetSQLTypeValueWithBigDecimal() {
     public void testGetDataTypeFromSQLTypeValue() {
         assertEquals(RecordFieldType.STRING.getDataType(), DataTypeUtils.getDataTypeFromSQLTypeValue(Types.CLOB));
         assertEquals(RecordFieldType.ARRAY.getArrayDataType(RecordFieldType.BYTE.getDataType()), DataTypeUtils.getDataTypeFromSQLTypeValue(Types.BLOB));
+        assertEquals(RecordFieldType.STRING.getDataType(), DataTypeUtils.getDataTypeFromSQLTypeValue(Types.CHAR));
     }
 
     @Test

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/lookup/script/BaseScriptedLookupService.java
Patch:
@@ -273,6 +273,7 @@ protected boolean reloadScript(final String scriptBody) {
                 // Find a custom configurator and invoke their eval() method
                 ScriptEngineConfigurator configurator = scriptingComponentHelper.scriptEngineConfiguratorMap.get(scriptingComponentHelper.getScriptEngineName().toLowerCase());
                 if (configurator != null) {
+                    configurator.reset();
                     configurator.init(scriptEngine, scriptBody, scriptingComponentHelper.getModules());
                     configurator.eval(scriptEngine, scriptBody, scriptingComponentHelper.getModules());
                 } else {

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/processors/script/InvokeScriptedProcessor.java
Patch:
@@ -349,6 +349,7 @@ private boolean reloadScript(final String scriptBody) {
                 // Find a custom configurator and invoke their eval() method
                 ScriptEngineConfigurator configurator = scriptingComponentHelper.scriptEngineConfiguratorMap.get(scriptingComponentHelper.getScriptEngineName().toLowerCase());
                 if (configurator != null) {
+                    configurator.reset();
                     configurator.init(scriptEngine, scriptBody, scriptingComponentHelper.getModules());
                     configurator.eval(scriptEngine, scriptBody, scriptingComponentHelper.getModules());
                 } else {

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/processors/script/ScriptEngineConfigurator.java
Patch:
@@ -37,4 +37,6 @@ public interface ScriptEngineConfigurator {
 
     Object eval(ScriptEngine engine, String scriptBody, String[] modulePaths) throws ScriptException;
 
+    default void reset() {
+    }
 }

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/record/script/ScriptedReader.java
Patch:
@@ -91,6 +91,7 @@ protected boolean reloadScript(final String scriptBody) {
                 // Find a custom configurator and invoke their eval() method
                 ScriptEngineConfigurator configurator = scriptingComponentHelper.scriptEngineConfiguratorMap.get(scriptingComponentHelper.getScriptEngineName().toLowerCase());
                 if (configurator != null) {
+                    configurator.reset();
                     configurator.init(scriptEngine, scriptBody, scriptingComponentHelper.getModules());
                     configurator.eval(scriptEngine, scriptBody, scriptingComponentHelper.getModules());
                 } else {

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/record/script/ScriptedRecordSetWriter.java
Patch:
@@ -95,6 +95,7 @@ protected boolean reloadScript(final String scriptBody) {
                 // Find a custom configurator and invoke their eval() method
                 ScriptEngineConfigurator configurator = scriptingComponentHelper.scriptEngineConfiguratorMap.get(scriptingComponentHelper.getScriptEngineName().toLowerCase());
                 if (configurator != null) {
+                    configurator.reset();
                     configurator.init(scriptEngine, scriptBody, scriptingComponentHelper.getModules());
                     configurator.eval(scriptEngine, scriptBody, scriptingComponentHelper.getModules());
                 } else {

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/record/sink/script/ScriptedRecordSink.java
Patch:
@@ -144,6 +144,7 @@ protected boolean reloadScript(final String scriptBody) {
                 // Find a custom configurator and invoke their eval() method
                 ScriptEngineConfigurator configurator = scriptingComponentHelper.scriptEngineConfiguratorMap.get(scriptingComponentHelper.getScriptEngineName().toLowerCase());
                 if (configurator != null) {
+                    configurator.reset();
                     configurator.init(scriptEngine, scriptBody, scriptingComponentHelper.getModules());
                     configurator.eval(scriptEngine, scriptBody, scriptingComponentHelper.getModules());
                 } else {

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/rules/engine/script/ScriptedRulesEngine.java
Patch:
@@ -115,6 +115,7 @@ protected boolean reloadScript(final String scriptBody) {
                 // Find a custom configurator and invoke their eval() method
                 ScriptEngineConfigurator configurator = scriptingComponentHelper.scriptEngineConfiguratorMap.get(scriptingComponentHelper.getScriptEngineName().toLowerCase());
                 if (configurator != null) {
+                    configurator.reset();
                     configurator.init(scriptEngine, scriptBody, scriptingComponentHelper.getModules());
                     configurator.eval(scriptEngine, scriptBody, scriptingComponentHelper.getModules());
                 } else {

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/rules/handlers/script/ScriptedActionHandler.java
Patch:
@@ -117,6 +117,7 @@ protected boolean reloadScript(final String scriptBody) {
                 // Find a custom configurator and invoke their eval() method
                 ScriptEngineConfigurator configurator = scriptingComponentHelper.scriptEngineConfiguratorMap.get(scriptingComponentHelper.getScriptEngineName().toLowerCase());
                 if (configurator != null) {
+                    configurator.reset();
                     configurator.init(scriptEngine, scriptBody, scriptingComponentHelper.getModules());
                     configurator.eval(scriptEngine, scriptBody, scriptingComponentHelper.getModules());
                 } else {

File: nifi-commons/nifi-property-encryptor/src/test/java/org/apache/nifi/encrypt/PropertyEncryptorFactoryTest.java
Patch:
@@ -49,8 +49,7 @@ public void testGetPropertyEncryptorPropertiesBlankPassword() {
         properties.setProperty(NiFiProperties.SENSITIVE_PROPS_KEY, StringUtils.EMPTY);
         final NiFiProperties niFiProperties = NiFiProperties.createBasicNiFiProperties(null, properties);
 
-        final PropertyEncryptor encryptor = PropertyEncryptorFactory.getPropertyEncryptor(niFiProperties);
-        assertNotNull(encryptor);
+        assertThrows(IllegalArgumentException.class, () -> PropertyEncryptorFactory.getPropertyEncryptor(niFiProperties));
     }
 
     @Test

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/test/java/org/apache/nifi/processors/azure/storage/ITFetchAzureDataLakeStorage.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.nifi.provenance.ProvenanceEventRecord;
 import org.apache.nifi.provenance.ProvenanceEventType;
 import org.apache.nifi.util.MockFlowFile;
-import org.junit.Ignore;
 import org.junit.Test;
 
 import java.util.Collections;
@@ -211,7 +210,6 @@ public void testFetchNonExistentFile() {
         testFailedFetch(fileSystemName, directory, filename, inputFlowFileContent, inputFlowFileContent, 404);
     }
 
-    @Ignore("Takes some time, only recommended for manual testing.")
     @Test
     public void testFetchLargeFile() {
         // GIVEN

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/test/java/org/apache/nifi/processors/azure/storage/ITListAzureBlobStorage.java
Patch:
@@ -60,7 +60,7 @@ private void assertResult() {
         runner.assertAllFlowFilesTransferred(ListAzureBlobStorage.REL_SUCCESS, 1);
 
         for (MockFlowFile entry : runner.getFlowFilesForRelationship(ListAzureBlobStorage.REL_SUCCESS)) {
-            entry.assertAttributeEquals("azure.length", "10");
+            entry.assertAttributeEquals("azure.length", "36");
             entry.assertAttributeEquals("mime.type", "application/octet-stream");
         }
     }

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/test/java/org/apache/nifi/processors/azure/storage/ITPutAzureDataLakeStorage.java
Patch:
@@ -26,7 +26,6 @@
 import org.apache.nifi.provenance.ProvenanceEventType;
 import org.apache.nifi.util.MockFlowFile;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 
 import java.io.InputStream;
@@ -140,8 +139,6 @@ public void testPutEmptyFile() throws Exception {
         assertSuccess(DIRECTORY, FILE_NAME, fileData);
     }
 
-    @Ignore
-    // ignore excessive test with larger file size
     @Test
     public void testPutBigFile() throws Exception {
         Random random = new Random();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/components/LongRunningTaskMonitorTest.java
Patch:
@@ -29,7 +29,9 @@
 import org.mockito.ArgumentCaptor;
 import org.slf4j.Logger;
 
+import java.text.NumberFormat;
 import java.util.Arrays;
+import java.util.Locale;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
@@ -88,8 +90,7 @@ protected ThreadDetails captureThreadDetails() {
         assertEquals("Long running task detected on processor [id=Processor-1-ID, name=Processor-1-Name, type=Processor-1-Type]. Task time: 60 seconds. Stack trace:\n" + STACKTRACE,
                 logMessages.getAllValues().get(0));
         assertEquals("Long running task detected on processor [id=Processor-2-ID, name=Processor-2-Name, type=Processor-2-Type]. Task time: 1,000 seconds. Stack trace:\n" + STACKTRACE,
-                logMessages.getAllValues().get(1));
-
+                logMessages.getAllValues().get(1).replace(NumberFormat.getInstance(Locale.getDefault()).format(1000), NumberFormat.getInstance(Locale.US).format(1000)));
         ArgumentCaptor<String> controllerBulletinMessages = ArgumentCaptor.forClass(String.class);
         verify(eventReporter, times(2)).reportEvent(eq(Severity.WARNING), eq("Long Running Task"), controllerBulletinMessages.capture());
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/InvokeHTTP.java
Patch:
@@ -40,6 +40,7 @@
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 import java.util.UUID;
@@ -556,7 +557,8 @@ public class InvokeHTTP extends AbstractProcessor {
             REL_SUCCESS_REQ, REL_RESPONSE, REL_RETRY, REL_NO_RETRY, REL_FAILURE)));
 
     // RFC 2616 Date Time Formatter with hard-coded GMT Zone
-    private static final DateTimeFormatter RFC_2616_DATE_TIME = DateTimeFormatter.ofPattern("EEE, dd MMM yyyy HH:mm:ss 'GMT'");
+    // https://tools.ietf.org/html/rfc2616#section-3.3 - date format header should not be localized
+    private static final DateTimeFormatter RFC_2616_DATE_TIME = DateTimeFormatter.ofPattern("EEE, dd MMM yyyy HH:mm:ss 'GMT'", Locale.US);
 
     // Multiple Header Delimiter
     private static final String MULTIPLE_HEADER_DELIMITER = ", ";

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/NiFiWebApiSecurityConfiguration.java
Patch:
@@ -48,7 +48,6 @@
 import org.springframework.security.web.authentication.preauth.x509.X509PrincipalExtractor;
 import org.springframework.security.web.csrf.CsrfFilter;
 import org.springframework.security.web.util.matcher.AndRequestMatcher;
-import org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher;
 import org.springframework.web.cors.CorsConfiguration;
 import org.springframework.web.cors.CorsConfigurationSource;
 import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
@@ -130,7 +129,7 @@ protected void configure(HttpSecurity http) throws Exception {
                 .rememberMe().disable()
                 .authorizeRequests().anyRequest().fullyAuthenticated().and()
                 .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()
-                .csrf().requireCsrfProtectionMatcher(new AndRequestMatcher(CsrfFilter.DEFAULT_CSRF_MATCHER, new RequestHeaderRequestMatcher("Cookie"))).csrfTokenRepository(csrfRepository);
+                .csrf().requireCsrfProtectionMatcher(new AndRequestMatcher(CsrfFilter.DEFAULT_CSRF_MATCHER, new CsrfCookieRequestMatcher())).csrfTokenRepository(csrfRepository);
 
         // x509
         http.addFilterBefore(x509FilterBean(), AnonymousAuthenticationFilter.class);

File: minifi/minifi-c2/minifi-c2-api/src/main/java/org/apache/nifi/minifi/c2/api/properties/C2Properties.java
Patch:
@@ -63,7 +63,7 @@ public boolean isSecure() {
     }
 
     public SslContextFactory getSslContextFactory() throws GeneralSecurityException, IOException {
-        SslContextFactory sslContextFactory = new SslContextFactory();
+        SslContextFactory sslContextFactory = new SslContextFactory.Server();
         KeyStore keyStore = KeyStore.getInstance(properties.getProperty(MINIFI_C2_SERVER_KEYSTORE_TYPE));
         Path keyStorePath = Paths.get(C2_SERVER_HOME).resolve(properties.getProperty(MINIFI_C2_SERVER_KEYSTORE)).toAbsolutePath();
         logger.debug("keystore path: " + keyStorePath);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java
Patch:
@@ -1158,7 +1158,7 @@ private boolean waitForControllerServiceStatus(final URI originalUri, final Stri
         URI groupUri;
         try {
             groupUri = new URI(originalUri.getScheme(), originalUri.getUserInfo(), originalUri.getHost(),
-                originalUri.getPort(), "/nifi-api/flow/process-groups/" + groupId + "/controller-services", "includeAncestorGroups=false,includeDescendantGroups=true", originalUri.getFragment());
+                originalUri.getPort(), "/nifi-api/flow/process-groups/" + groupId + "/controller-services", "includeAncestorGroups=false&includeDescendantGroups=true", originalUri.getFragment());
         } catch (URISyntaxException e) {
             throw new RuntimeException(e);
         }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/util/ClusterReplicationComponentLifecycle.java
Patch:
@@ -454,7 +454,7 @@ private boolean waitForControllerServiceValidation(final NiFiUser user, final UR
         URI groupUri;
         try {
             groupUri = new URI(originalUri.getScheme(), originalUri.getUserInfo(), originalUri.getHost(),
-                    originalUri.getPort(), "/nifi-api/flow/process-groups/" + groupId + "/controller-services", "includeAncestorGroups=false,includeDescendantGroups=true", originalUri.getFragment());
+                    originalUri.getPort(), "/nifi-api/flow/process-groups/" + groupId + "/controller-services", "includeAncestorGroups=false&includeDescendantGroups=true", originalUri.getFragment());
         } catch (URISyntaxException e) {
             throw new RuntimeException(e);
         }
@@ -482,6 +482,7 @@ private boolean waitForControllerServiceValidation(final NiFiUser user, final UR
             final Set<ControllerServiceEntity> serviceEntities = controllerServicesEntity.getControllerServices();
 
             final Map<String, AffectedComponentEntity> affectedServices = serviceEntities.stream()
+                    .filter(s -> serviceIds.contains(s.getId()))
                     .collect(Collectors.toMap(ControllerServiceEntity::getId, dtoFactory::createAffectedComponentEntity));
 
             if (isControllerServiceValidationComplete(serviceEntities, affectedServices)) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/util/LocalComponentLifecycle.java
Patch:
@@ -386,11 +386,11 @@ private boolean waitForControllerServiceState(final String groupId, final Map<St
 
             boolean allReachedDesiredState = true;
             for (final ControllerServiceEntity serviceEntity : serviceEntities) {
-                final ControllerServiceDTO serviceDto = serviceEntity.getComponent();
-                if (!affectedServices.containsKey(serviceDto.getId())) {
+                if (!affectedServices.containsKey(serviceEntity.getId())) {
                     continue;
                 }
 
+                final ControllerServiceDTO serviceDto = serviceEntity.getComponent();
                 final String validationStatus = serviceDto.getValidationStatus();
                 if (ControllerServiceDTO.INVALID.equals(validationStatus)) {
                     switch (invalidComponentAction) {

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-abstract-processors/src/main/java/org/apache/nifi/processors/aws/credentials/provider/factory/CredentialPropertyDescriptors.java
Patch:
@@ -17,6 +17,8 @@
 package org.apache.nifi.processors.aws.credentials.provider.factory;
 
 import org.apache.nifi.components.PropertyDescriptor;
+import org.apache.nifi.components.resource.ResourceCardinality;
+import org.apache.nifi.components.resource.ResourceType;
 import org.apache.nifi.expression.ExpressionLanguageScope;
 import org.apache.nifi.processor.util.StandardValidators;
 
@@ -53,7 +55,7 @@ public class CredentialPropertyDescriptors {
             .displayName("Credentials File")
             .expressionLanguageSupported(ExpressionLanguageScope.NONE)
             .required(false)
-            .addValidator(StandardValidators.FILE_EXISTS_VALIDATOR)
+            .identifiesExternalResource(ResourceCardinality.SINGLE, ResourceType.FILE)
             .description("Path to a file containing AWS access key and secret key in properties file format.")
             .build();
 

File: nifi-nar-bundles/nifi-easyrules-bundle/nifi-easyrules-service/src/main/java/org/apache/nifi/rules/engine/AbstractEasyRulesEngineController.java
Patch:
@@ -22,11 +22,12 @@
 import org.apache.nifi.components.ValidationContext;
 import org.apache.nifi.components.ValidationResult;
 import org.apache.nifi.components.Validator;
+import org.apache.nifi.components.resource.ResourceCardinality;
+import org.apache.nifi.components.resource.ResourceType;
 import org.apache.nifi.controller.AbstractControllerService;
 import org.apache.nifi.controller.ConfigurationContext;
 import org.apache.nifi.controller.ControllerServiceInitializationContext;
 import org.apache.nifi.expression.ExpressionLanguageScope;
-import org.apache.nifi.processor.util.StandardValidators;
 import org.apache.nifi.reporting.InitializationException;
 import org.apache.nifi.rules.Rule;
 import org.apache.nifi.rules.RulesFactory;
@@ -53,7 +54,7 @@ public abstract class AbstractEasyRulesEngineController extends AbstractControll
             .displayName("Rules File Path")
             .description("Path to location of rules file. Only one of Rules File or Rules Body may be used")
             .required(false)
-            .addValidator(StandardValidators.FILE_EXISTS_VALIDATOR)
+            .identifiesExternalResource(ResourceCardinality.SINGLE, ResourceType.FILE)
             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)
             .build();
 

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-5-processors/src/main/java/org/apache/nifi/processors/elasticsearch/AbstractElasticsearch5TransportClientProcessor.java
Patch:
@@ -17,6 +17,8 @@
 package org.apache.nifi.processors.elasticsearch;
 
 import org.apache.nifi.components.PropertyDescriptor;
+import org.apache.nifi.components.resource.ResourceCardinality;
+import org.apache.nifi.components.resource.ResourceType;
 import org.apache.nifi.expression.ExpressionLanguageScope;
 import org.apache.nifi.logging.ComponentLog;
 import org.apache.nifi.processor.ProcessContext;
@@ -74,7 +76,7 @@ abstract class AbstractElasticsearch5TransportClientProcessor extends AbstractEl
                     + "JARs must also be available to this processor. Note: Do NOT place the X-Pack JARs into NiFi's "
                     + "lib/ directory, doing so will prevent the X-Pack Transport JARs from being loaded.")
             .required(false)
-            .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)
+            .identifiesExternalResource(ResourceCardinality.MULTIPLE, ResourceType.FILE, ResourceType.DIRECTORY)
             .dynamicallyModifiesClasspath(true)
             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)
             .build();

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-processors/src/main/java/org/apache/nifi/processors/elasticsearch/AbstractElasticsearchTransportClientProcessor.java
Patch:
@@ -17,6 +17,8 @@
 package org.apache.nifi.processors.elasticsearch;
 
 import org.apache.nifi.components.PropertyDescriptor;
+import org.apache.nifi.components.resource.ResourceCardinality;
+import org.apache.nifi.components.resource.ResourceType;
 import org.apache.nifi.expression.ExpressionLanguageScope;
 import org.apache.nifi.logging.ComponentLog;
 import org.apache.nifi.processor.ProcessContext;
@@ -70,7 +72,7 @@ public abstract class AbstractElasticsearchTransportClientProcessor extends Abst
                     + "JAR must also be available to this processor. Note: Do NOT place the Shield JAR into NiFi's "
                     + "lib/ directory, doing so will prevent the Shield plugin from being loaded.")
             .required(false)
-            .addValidator(StandardValidators.FILE_EXISTS_VALIDATOR)
+            .identifiesExternalResource(ResourceCardinality.SINGLE, ResourceType.FILE, ResourceType.DIRECTORY)
             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)
             .build();
 

File: nifi-nar-bundles/nifi-extension-utils/nifi-hadoop-utils/src/main/java/org/apache/nifi/hadoop/KerberosProperties.java
Patch:
@@ -21,6 +21,8 @@
 import org.apache.nifi.components.ValidationContext;
 import org.apache.nifi.components.ValidationResult;
 import org.apache.nifi.components.Validator;
+import org.apache.nifi.components.resource.ResourceCardinality;
+import org.apache.nifi.components.resource.ResourceType;
 import org.apache.nifi.expression.ExpressionLanguageScope;
 import org.apache.nifi.logging.ComponentLog;
 import org.apache.nifi.processor.util.StandardValidators;
@@ -86,17 +88,15 @@ public ValidationResult validate(String subject, String input, ValidationContext
                 .required(false)
                 .description("Kerberos principal to authenticate as. Requires nifi.kerberos.krb5.file to be set in your nifi.properties")
                 .addValidator(kerberosConfigValidator)
-                .addValidator(StandardValidators.ATTRIBUTE_EXPRESSION_LANGUAGE_VALIDATOR)
                 .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)
                 .build();
 
         this.kerberosKeytab = new PropertyDescriptor.Builder()
                 .name("Kerberos Keytab")
                 .required(false)
                 .description("Kerberos keytab associated with the principal. Requires nifi.kerberos.krb5.file to be set in your nifi.properties")
-                .addValidator(StandardValidators.FILE_EXISTS_VALIDATOR)
+                .identifiesExternalResource(ResourceCardinality.SINGLE, ResourceType.FILE)
                 .addValidator(kerberosConfigValidator)
-                .addValidator(StandardValidators.ATTRIBUTE_EXPRESSION_LANGUAGE_VALIDATOR)
                 .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)
                 .build();
 

File: nifi-nar-bundles/nifi-extension-utils/nifi-kerberos-test-utils/src/main/java/org/apache/nifi/kerberos/MockKerberosCredentialsService.java
Patch:
@@ -18,6 +18,8 @@
 
 import org.apache.nifi.annotation.lifecycle.OnEnabled;
 import org.apache.nifi.components.PropertyDescriptor;
+import org.apache.nifi.components.resource.ResourceCardinality;
+import org.apache.nifi.components.resource.ResourceType;
 import org.apache.nifi.controller.AbstractControllerService;
 import org.apache.nifi.controller.ConfigurationContext;
 import org.apache.nifi.expression.ExpressionLanguageScope;
@@ -46,7 +48,7 @@ public class MockKerberosCredentialsService extends AbstractControllerService im
     public static final PropertyDescriptor KEYTAB = new PropertyDescriptor.Builder()
             .name("Kerberos Keytab")
             .description("Kerberos keytab associated with the principal. Requires nifi.kerberos.krb5.file to be set in your nifi.properties")
-            .addValidator(StandardValidators.FILE_EXISTS_VALIDATOR)
+            .identifiesExternalResource(ResourceCardinality.SINGLE, ResourceType.FILE)
             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)
             .required(true)
             .build();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/test/java/org/apache/nifi/processor/TestStandardPropertyValue.java
Patch:
@@ -127,7 +127,7 @@ public void testFlowFileEntryYear() {
     @Test
     public void testisExpressionLanguagePresentShouldHandleNPE() {
         // Arrange
-        final PropertyValue value = new StandardPropertyValue(null, lookup, ParameterLookup.EMPTY, null, null);
+        final PropertyValue value = new StandardPropertyValue(null, lookup, ParameterLookup.EMPTY);
 
         // Act
         boolean elPresent = value.isExpressionLanguagePresent();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/status/history/EmbeddedQuestDbRolloverHandlerTest.java
Patch:
@@ -30,6 +30,7 @@
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -43,6 +44,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.function.Supplier;
 
+@Ignore("Buggy tests depend on time of day")
 public class EmbeddedQuestDbRolloverHandlerTest {
     private static final Logger LOGGER = LoggerFactory.getLogger(EmbeddedQuestDbRolloverHandlerTest.class);
 

File: nifi-nar-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/credentials/factory/CredentialPropertyDescriptors.java
Patch:
@@ -17,6 +17,8 @@
 package org.apache.nifi.processors.gcp.credentials.factory;
 
 import org.apache.nifi.components.PropertyDescriptor;
+import org.apache.nifi.components.resource.ResourceCardinality;
+import org.apache.nifi.components.resource.ResourceType;
 import org.apache.nifi.expression.ExpressionLanguageScope;
 import org.apache.nifi.processor.util.JsonValidator;
 import org.apache.nifi.processor.util.StandardValidators;
@@ -75,7 +77,7 @@ private CredentialPropertyDescriptors() {}
             .displayName("Service Account JSON File")
             .expressionLanguageSupported(ExpressionLanguageScope.NONE)
             .required(false)
-            .addValidator(StandardValidators.FILE_EXISTS_VALIDATOR)
+            .identifiesExternalResource(ResourceCardinality.SINGLE, ResourceType.FILE)
             .description("Path to a file containing a Service Account key file in JSON format.")
             .build();
 

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/test/java/org/apache/nifi/processors/hadoop/GetHDFSSequenceFileTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.security.UserGroupInformation;
+import org.apache.nifi.components.resource.ResourceReferences;
 import org.apache.nifi.hadoop.KerberosProperties;
 import org.apache.nifi.processor.ProcessContext;
 import org.apache.nifi.processor.ProcessorInitializationContext;
@@ -95,7 +96,7 @@ public void testGetFlowFilesNoUgiShouldntCallDoAs() throws Exception {
 
     public class TestableGetHDFSSequenceFile extends GetHDFSSequenceFile {
         @Override
-        HdfsResources resetHDFSResources(String configResources, ProcessContext context) throws IOException {
+        HdfsResources resetHDFSResources(ResourceReferences configResources, ProcessContext context) throws IOException {
             return hdfsResources;
         }
 

File: nifi-nar-bundles/nifi-hive-bundle/nifi-hive3-processors/src/main/java/org/apache/nifi/processors/hive/PutHive3Streaming.java
Patch:
@@ -40,6 +40,8 @@
 import org.apache.nifi.components.PropertyDescriptor;
 import org.apache.nifi.components.ValidationContext;
 import org.apache.nifi.components.ValidationResult;
+import org.apache.nifi.components.resource.ResourceCardinality;
+import org.apache.nifi.components.resource.ResourceType;
 import org.apache.nifi.expression.AttributeExpression;
 import org.apache.nifi.expression.ExpressionLanguageScope;
 import org.apache.nifi.flowfile.FlowFile;
@@ -65,7 +67,6 @@
 import org.apache.nifi.util.hive.AuthenticationFailedException;
 import org.apache.nifi.util.hive.HiveConfigurator;
 import org.apache.nifi.util.hive.HiveOptions;
-import org.apache.nifi.util.hive.HiveUtils;
 import org.apache.nifi.util.hive.ValidationResources;
 
 import javax.security.auth.login.LoginException;
@@ -137,7 +138,7 @@ public class PutHive3Streaming extends AbstractProcessor {
                     + "to a number greater than one, the 'hcatalog.hive.client.cache.disabled' property will be forced to 'true' to avoid concurrency issues. "
                     + "Please see the Hive documentation for more details.")
             .required(false)
-            .addValidator(HiveUtils.createMultipleFilesExistValidator())
+            .identifiesExternalResource(ResourceCardinality.MULTIPLE, ResourceType.FILE)
             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)
             .build();
 

File: nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JMSConnectionFactoryProperties.java
Patch:
@@ -20,6 +20,8 @@
 import org.apache.nifi.components.ValidationContext;
 import org.apache.nifi.components.ValidationResult;
 import org.apache.nifi.components.Validator;
+import org.apache.nifi.components.resource.ResourceCardinality;
+import org.apache.nifi.components.resource.ResourceType;
 import org.apache.nifi.expression.ExpressionLanguageScope;
 import org.apache.nifi.processor.util.StandardValidators;
 import org.apache.nifi.ssl.SSLContextService;
@@ -50,7 +52,7 @@ public class JMSConnectionFactoryProperties {
                     + "to the classpath (defined as a comma separated list of values). Such resources typically represent target JMS client libraries "
                     + "for the ConnectionFactory implementation.")
             .required(false)
-            .addValidator(StandardValidators.createListValidator(true, true, StandardValidators.createURLorFileValidator()))
+            .identifiesExternalResource(ResourceCardinality.MULTIPLE, ResourceType.FILE, ResourceType.DIRECTORY, ResourceType.URL)
             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)
             .dynamicallyModifiesClasspath(true)
             .build();

File: nifi-nar-bundles/nifi-jolt-record-bundle/nifi-jolt-record-processors/src/main/java/org/apache/nifi/processors/jolt/record/JoltTransformRecord.java
Patch:
@@ -35,6 +35,8 @@
 import org.apache.nifi.components.PropertyDescriptor;
 import org.apache.nifi.components.ValidationContext;
 import org.apache.nifi.components.ValidationResult;
+import org.apache.nifi.components.resource.ResourceCardinality;
+import org.apache.nifi.components.resource.ResourceType;
 import org.apache.nifi.expression.ExpressionLanguageScope;
 import org.apache.nifi.flowfile.FlowFile;
 import org.apache.nifi.flowfile.attributes.CoreAttributes;
@@ -159,7 +161,7 @@ public class JoltTransformRecord extends AbstractProcessor {
             .description("Comma-separated list of paths to files and/or directories which contain modules containing custom transformations (that are not included on NiFi's classpath).")
             .required(false)
             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)
-            .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)
+            .identifiesExternalResource(ResourceCardinality.MULTIPLE, ResourceType.FILE, ResourceType.DIRECTORY)
             .dynamicallyModifiesClasspath(true)
             .build();
 

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-2-0-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/KafkaProcessorUtils.java
Patch:
@@ -29,6 +29,8 @@
 import org.apache.nifi.components.ValidationContext;
 import org.apache.nifi.components.ValidationResult;
 import org.apache.nifi.components.Validator;
+import org.apache.nifi.components.resource.ResourceCardinality;
+import org.apache.nifi.components.resource.ResourceType;
 import org.apache.nifi.expression.ExpressionLanguageScope;
 import org.apache.nifi.kerberos.KerberosCredentialsService;
 import org.apache.nifi.processor.ProcessContext;
@@ -154,7 +156,7 @@ public final class KafkaProcessorUtils {
             .description("The Kerberos keytab that will be used to connect to brokers. If not set, it is expected to set a JAAS configuration file "
                     + "in the JVM properties defined in the bootstrap.conf file. This principal will be set into 'sasl.jaas.config' Kafka's property.")
             .required(false)
-            .addValidator(StandardValidators.FILE_EXISTS_VALIDATOR)
+            .identifiesExternalResource(ResourceCardinality.SINGLE, ResourceType.FILE)
             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)
             .build();
     static final PropertyDescriptor USERNAME = new PropertyDescriptor.Builder()

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-2-0-processors/src/test/java/org/apache/nifi/processors/kafka/pubsub/TestConsumeKafka_2_0.java
Patch:
@@ -120,7 +120,7 @@ public void testJaasConfiguration() throws Exception {
         runner.setVariable("principal", "nifi@APACHE.COM");
         runner.setVariable("service", "kafka");
         runner.setProperty(KafkaProcessorUtils.USER_PRINCIPAL, "${principal}");
-        runner.setProperty(KafkaProcessorUtils.USER_KEYTAB, "${keytab}s");
+        runner.setProperty(KafkaProcessorUtils.USER_KEYTAB, "${keytab}");
         runner.setProperty(KafkaProcessorUtils.JAAS_SERVICE_NAME, "${service}");
         runner.assertValid();
     }

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-2-6-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/KafkaProcessorUtils.java
Patch:
@@ -29,6 +29,8 @@
 import org.apache.nifi.components.ValidationContext;
 import org.apache.nifi.components.ValidationResult;
 import org.apache.nifi.components.Validator;
+import org.apache.nifi.components.resource.ResourceCardinality;
+import org.apache.nifi.components.resource.ResourceType;
 import org.apache.nifi.expression.ExpressionLanguageScope;
 import org.apache.nifi.kerberos.KerberosCredentialsService;
 import org.apache.nifi.processor.ProcessContext;
@@ -154,7 +156,7 @@ public final class KafkaProcessorUtils {
             .description("The Kerberos keytab that will be used to connect to brokers. If not set, it is expected to set a JAAS configuration file "
                     + "in the JVM properties defined in the bootstrap.conf file. This principal will be set into 'sasl.jaas.config' Kafka's property.")
             .required(false)
-            .addValidator(StandardValidators.FILE_EXISTS_VALIDATOR)
+            .identifiesExternalResource(ResourceCardinality.SINGLE, ResourceType.FILE)
             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)
             .build();
     static final PropertyDescriptor USERNAME = new PropertyDescriptor.Builder()

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-2-6-processors/src/test/java/org/apache/nifi/processors/kafka/pubsub/TestConsumeKafka_2_6.java
Patch:
@@ -120,7 +120,7 @@ public void testJaasConfiguration() throws Exception {
         runner.setVariable("principal", "nifi@APACHE.COM");
         runner.setVariable("service", "kafka");
         runner.setProperty(KafkaProcessorUtils.USER_PRINCIPAL, "${principal}");
-        runner.setProperty(KafkaProcessorUtils.USER_KEYTAB, "${keytab}s");
+        runner.setProperty(KafkaProcessorUtils.USER_KEYTAB, "${keytab}");
         runner.setProperty(KafkaProcessorUtils.JAAS_SERVICE_NAME, "${service}");
         runner.assertValid();
     }

File: nifi-nar-bundles/nifi-solr-bundle/nifi-solr-processors/src/test/java/org/apache/nifi/processors/solr/TestGetSolr.java
Patch:
@@ -102,6 +102,7 @@ private static TestRunner createDefaultTestRunner(GetSolr processor) {
         runner.setProperty(GetSolr.DATE_FIELD, "created");
         runner.setProperty(GetSolr.RETURN_FIELDS, "id,created");
         runner.setProperty(SolrUtils.COLLECTION, "testCollection");
+        runner.setValidateExpressionUsage(false);
         return runner;
     }
 

File: nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-dbcp-service/src/main/java/org/apache/nifi/dbcp/DBCPConnectionPool.java
Patch:
@@ -29,6 +29,8 @@
 import org.apache.nifi.components.PropertyValue;
 import org.apache.nifi.components.ValidationContext;
 import org.apache.nifi.components.ValidationResult;
+import org.apache.nifi.components.resource.ResourceCardinality;
+import org.apache.nifi.components.resource.ResourceType;
 import org.apache.nifi.controller.AbstractControllerService;
 import org.apache.nifi.controller.ConfigurationContext;
 import org.apache.nifi.expression.AttributeExpression;
@@ -127,7 +129,7 @@ public class DBCPConnectionPool extends AbstractControllerService implements DBC
         .description("Comma-separated list of files/folders and/or URLs containing the driver JAR and its dependencies (if any). For example '/var/tmp/mariadb-java-client-1.1.7.jar'")
         .defaultValue(null)
         .required(false)
-        .addValidator(StandardValidators.createListValidator(true, true, StandardValidators.createURLorFileValidator()))
+        .identifiesExternalResource(ResourceCardinality.MULTIPLE, ResourceType.FILE, ResourceType.DIRECTORY, ResourceType.URL)
         .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)
         .build();
 

File: nifi-nar-bundles/nifi-standard-services/nifi-lookup-services-bundle/nifi-lookup-services/src/main/java/org/apache/nifi/lookup/db/AbstractDatabaseLookupService.java
Patch:
@@ -68,6 +68,7 @@ public class AbstractDatabaseLookupService extends AbstractControllerService {
                     + "Setting this property to zero means no caching will be done and the table will be queried for each lookup value in each record. If the lookup "
                     + "table changes often or the most recent data must be retrieved, do not use the cache.")
             .addValidator(StandardValidators.NON_NEGATIVE_INTEGER_VALIDATOR)
+            .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)
             .defaultValue("0")
             .required(true)
             .build();

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/xml/XMLReader.java
Patch:
@@ -77,6 +77,7 @@ public class XMLReader extends SchemaRegistryService implements RecordReaderFact
                 + "XML blob  with a \"wrapper element\". This property dictates whether the reader expects a FlowFile to consist of a single Record or a series of Records with a \"wrapper element\" "
                 + "that will be ignored.")
             .allowableValues(RECORD_SINGLE, RECORD_ARRAY, RECORD_EVALUATE)
+            .expressionLanguageSupported(ExpressionLanguageScope.FLOWFILE_ATTRIBUTES)
             .defaultValue(RECORD_SINGLE.getValue())
             .required(true)
             .build();

File: nifi-nar-bundles/nifi-websocket-bundle/nifi-websocket-services-jetty/src/main/java/org/apache/nifi/websocket/jetty/JettyWebSocketServer.java
Patch:
@@ -25,6 +25,8 @@
 import org.apache.nifi.components.PropertyDescriptor;
 import org.apache.nifi.components.ValidationContext;
 import org.apache.nifi.components.ValidationResult;
+import org.apache.nifi.components.resource.ResourceCardinality;
+import org.apache.nifi.components.resource.ResourceType;
 import org.apache.nifi.controller.ConfigurationContext;
 import org.apache.nifi.expression.ExpressionLanguageScope;
 import org.apache.nifi.processor.util.StandardValidators;
@@ -158,7 +160,7 @@ public class JettyWebSocketServer extends AbstractJettyWebSocketService implemen
                     + "See http://www.eclipse.org/jetty/documentation/current/configuring-security.html for detail.")
             .required(false)
             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)
-            .addValidator(StandardValidators.FILE_EXISTS_VALIDATOR)
+            .identifiesExternalResource(ResourceCardinality.SINGLE, ResourceType.FILE)
             .build();
 
     private static final List<PropertyDescriptor> properties;

File: nifi-system-tests/nifi-system-test-extensions-bundle/nifi-system-test-extensions/src/main/java/org/apache/nifi/processors/tests/system/ValidateFileExists.java
Patch:
@@ -17,13 +17,14 @@
 package org.apache.nifi.processors.tests.system;
 
 import org.apache.nifi.components.PropertyDescriptor;
+import org.apache.nifi.components.resource.ResourceCardinality;
+import org.apache.nifi.components.resource.ResourceType;
 import org.apache.nifi.flowfile.FlowFile;
 import org.apache.nifi.processor.AbstractProcessor;
 import org.apache.nifi.processor.ProcessContext;
 import org.apache.nifi.processor.ProcessSession;
 import org.apache.nifi.processor.Relationship;
 import org.apache.nifi.processor.exception.ProcessException;
-import org.apache.nifi.processor.util.StandardValidators;
 
 import java.util.Collections;
 import java.util.List;
@@ -35,7 +36,7 @@ public class ValidateFileExists extends AbstractProcessor {
         .displayName("Filename")
         .description("A file that should exist")
         .required(true)
-        .addValidator(StandardValidators.FILE_EXISTS_VALIDATOR)
+        .identifiesExternalResource(ResourceCardinality.SINGLE, ResourceType.FILE, ResourceType.DIRECTORY)
         .build();
 
     private static final Relationship REL_SUCCESS = new Relationship.Builder().name("success").build();

File: nifi-external/nifi-kafka-connect/nifi-kafka-connector/src/main/java/org/apache/nifi/kafka/connect/StatelessNiFiSinkTask.java
Patch:
@@ -78,6 +78,7 @@ public void start(final Map<String, String> properties) {
         headerNamePrefix = properties.getOrDefault(StatelessNiFiSinkConnector.HEADER_ATTRIBUTE_NAME_PREFIX, "");
 
         dataflow = StatelessKafkaConnectorUtil.createDataflow(properties);
+        dataflow.initialize();
 
         // Determine input port name. If input port is explicitly set, use the value given. Otherwise, if only one port exists, use that. Otherwise, throw ConfigException.
         final String dataflowName = properties.get(StatelessKafkaConnectorUtil.DATAFLOW_NAME);

File: nifi-external/nifi-kafka-connect/nifi-kafka-connector/src/main/java/org/apache/nifi/kafka/connect/StatelessNiFiSourceTask.java
Patch:
@@ -88,6 +88,7 @@ public void start(final Map<String, String> properties) {
         headerAttributeNamePattern = headerRegex == null ? null : Pattern.compile(headerRegex);
 
         dataflow = StatelessKafkaConnectorUtil.createDataflow(properties);
+        dataflow.initialize();
 
         // Determine the name of the Output Port to retrieve data from
         dataflowName = properties.get(StatelessKafkaConnectorUtil.DATAFLOW_NAME);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-api/src/main/java/org/apache/nifi/stateless/engine/StatelessEngineConfiguration.java
Patch:
@@ -28,6 +28,8 @@ public interface StatelessEngineConfiguration {
 
     File getNarDirectory();
 
+    File getExtensionsDirectory();
+
     File getKrb5File();
 
     SslContextDefinition getSslContext();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-bootstrap/src/main/java/org/apache/nifi/stateless/bootstrap/RunStatelessFlow.java
Patch:
@@ -102,6 +102,8 @@ public static StatelessDataflow createDataflow(final StatelessEngineConfiguratio
         final DataflowDefinition<?> dataflowDefinition = bootstrap.parseDataflowDefinition(flowDefinitionFile);
 
         final StatelessDataflow dataflow = bootstrap.createDataflow(dataflowDefinition, parameterOverrides);
+        dataflow.initialize();
+
         final StatelessDataflowValidation validation = dataflow.performValidation();
         if (!validation.isValid()) {
             logger.error(validation.toString());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/engine/StandardStatelessEngine.java
Patch:
@@ -169,8 +169,7 @@ public StatelessDataflow createFlow(final DataflowDefinition<VersionedFlowSnapsh
 
         final List<ReportingTaskNode> reportingTaskNodes = createReportingTasks(dataflowDefinition);
         final StandardStatelessFlow dataflow = new StandardStatelessFlow(childGroup, reportingTaskNodes, controllerServiceProvider, processContextFactory,
-            repositoryContextFactory, dataflowDefinition, stateManagerProvider);
-        dataflow.initialize(processScheduler);
+            repositoryContextFactory, dataflowDefinition, stateManagerProvider, processScheduler);
         return dataflow;
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/flow/StandardStatelessDataflowFactory.java
Patch:
@@ -144,7 +144,7 @@ public StatelessDataflow createDataflow(final StatelessEngineConfiguration engin
                 extensionClients.add(extensionClient);
             }
 
-            final ExtensionRepository extensionRepository = new FileSystemExtensionRepository(extensionManager, engineConfiguration.getNarDirectory(), engineConfiguration.getWorkingDirectory(),
+            final ExtensionRepository extensionRepository = new FileSystemExtensionRepository(extensionManager, engineConfiguration.getExtensionsDirectory(), engineConfiguration.getWorkingDirectory(),
                 narClassLoaders, extensionClients);
 
             final VariableRegistry variableRegistry = VariableRegistry.EMPTY_REGISTRY;

File: nifi-nar-bundles/nifi-accumulo-bundle/nifi-accumulo-processors/src/main/java/org/apache/nifi/accumulo/processors/ScanAccumulo.java
Patch:
@@ -273,7 +273,7 @@ public void process(final InputStream in, final OutputStream out) throws IOExcep
                             try{
                                 final RecordSchema writeSchema = determineRecordSchema(writerFactory, flowAttributes, valueIncluded);
 
-                                try (final RecordSetWriter writer = writerFactory.createWriter(getLogger(), writeSchema, out)) {
+                                try (final RecordSetWriter writer = writerFactory.createWriter(getLogger(), writeSchema, out, Collections.emptyMap())) {
 
                                     int i = 0;
                                     writer.beginRecordSet();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiServiceFacade.java
Patch:
@@ -2834,7 +2834,8 @@ private ControllerServiceReferencingComponentsEntity createControllerServiceRefe
                 }
             }
 
-            componentEntities.add(entityFactory.createControllerServiceReferencingComponentEntity(refComponent.getIdentifier(), dto, revisionDto, permissions, operatePermissions));
+            final List<BulletinDTO> bulletins = dtoFactory.createBulletinDtos(bulletinRepository.findBulletinsForSource(refComponent.getIdentifier()));
+            componentEntities.add(entityFactory.createControllerServiceReferencingComponentEntity(refComponent.getIdentifier(), dto, revisionDto, permissions, operatePermissions, bulletins));
         }
 
         final ControllerServiceReferencingComponentsEntity entity = new ControllerServiceReferencingComponentsEntity();

File: nifi-commons/nifi-utils/src/main/java/org/apache/nifi/util/NaiveSearchRingBuffer.java
Patch:
@@ -50,7 +50,7 @@ public class NaiveSearchRingBuffer {
     private final byte[] lookingFor;
     private final int[] buffer;
     private int insertionPointer = 0;
-    private int bufferSize = 0;
+    private long bufferSize = 0;
 
     public NaiveSearchRingBuffer(final byte[] lookingFor) {
         this.lookingFor = lookingFor;
@@ -63,7 +63,7 @@ public NaiveSearchRingBuffer(final byte[] lookingFor) {
      * sequence for which we are looking
      */
     public byte[] getBufferContents() {
-        final int contentLength = Math.min(lookingFor.length, bufferSize);
+        final int contentLength = (int) Math.min(lookingFor.length, bufferSize);
         final byte[] contents = new byte[contentLength];
         for (int i = 0; i < contentLength; i++) {
             final byte nextByte = (byte) buffer[(insertionPointer + i) % lookingFor.length];

File: nifi-framework-api/src/main/java/org/apache/nifi/controller/queue/LoadBalancedFlowFileQueue.java
Patch:
@@ -25,8 +25,10 @@ public interface LoadBalancedFlowFileQueue extends FlowFileQueue {
     /**
      * Adds the given FlowFiles to this queue, as they have been received from another node in the cluster
      * @param flowFiles the FlowFiles received from the peer
+     *
+     * @throws IllegalClusterStateException if the node is not currently in a state in which it can receive data from other nodes
      */
-    void receiveFromPeer(Collection<FlowFileRecord> flowFiles);
+    void receiveFromPeer(Collection<FlowFileRecord> flowFiles) throws IllegalClusterStateException;
 
     /**
      * Distributes the given FlowFiles to the appropriate partitions. Unlike the {@link #putAll(Collection)} method,

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/FlowController.java
Patch:
@@ -763,7 +763,7 @@ public void run() {
 
             final int connectionsPerNode = nifiProperties.getIntegerProperty(NiFiProperties.LOAD_BALANCE_CONNECTIONS_PER_NODE, NiFiProperties.DEFAULT_LOAD_BALANCE_CONNECTIONS_PER_NODE);
             final NioAsyncLoadBalanceClientFactory asyncClientFactory = new NioAsyncLoadBalanceClientFactory(sslContext, timeoutMillis, new ContentRepositoryFlowFileAccess(contentRepository),
-                    eventReporter, new StandardLoadBalanceFlowFileCodec());
+                    eventReporter, new StandardLoadBalanceFlowFileCodec(), clusterCoordinator);
             loadBalanceClientRegistry = new NioAsyncLoadBalanceClientRegistry(asyncClientFactory, connectionsPerNode);
 
             final int loadBalanceClientThreadCount = nifiProperties.getIntegerProperty(NiFiProperties.LOAD_BALANCE_MAX_THREAD_COUNT, NiFiProperties.DEFAULT_LOAD_BALANCE_MAX_THREAD_COUNT);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/controller/repository/StandardProcessSession.java
Patch:
@@ -2300,9 +2300,9 @@ private InputStream getInputStream(final FlowFile flowFile, final ContentClaim c
 
                 currentReadClaim = claim.getResourceClaim();
                 final InputStream contentRepoStream = context.getContentRepository().read(claim.getResourceClaim());
-                StreamUtils.skip(contentRepoStream, claim.getOffset());
+                StreamUtils.skip(contentRepoStream, claim.getOffset() + contentClaimOffset);
                 final InputStream bufferedContentStream = new BufferedInputStream(contentRepoStream);
-                final ByteCountingInputStream byteCountingInputStream = new ByteCountingInputStream(bufferedContentStream, claim.getOffset());
+                final ByteCountingInputStream byteCountingInputStream = new ByteCountingInputStream(bufferedContentStream, claim.getOffset() + contentClaimOffset);
                 currentReadClaimStream = byteCountingInputStream;
 
                 // Use a non-closeable stream (DisableOnCloseInputStream) because we want to keep it open after the callback has finished so that we can

File: nifi-system-tests/nifi-system-test-extensions-bundle/nifi-system-test-extensions/src/main/java/org/apache/nifi/processors/tests/system/ReverseContents.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.nifi.processors.tests.system;
 
+import org.apache.nifi.annotation.behavior.SupportsBatching;
 import org.apache.nifi.flowfile.FlowFile;
 import org.apache.nifi.processor.AbstractProcessor;
 import org.apache.nifi.processor.ProcessContext;
@@ -31,6 +32,7 @@
 import java.util.Collections;
 import java.util.Set;
 
+@SupportsBatching
 public class ReverseContents extends AbstractProcessor {
     public static final Relationship REL_SUCCESS = new Relationship.Builder()
         .name("success")

File: nifi-system-tests/nifi-system-test-suite/src/test/java/org/apache/nifi/tests/system/processor/RunOnceIT.java
Patch:
@@ -30,18 +30,15 @@ public class RunOnceIT extends NiFiSystemIT {
 
     @Test
     public void testRunOnce() throws NiFiClientException, IOException, InterruptedException {
-        // GIVEN
         ProcessorEntity generate = getClientUtil().createProcessor("GenerateFlowFile");
         getClientUtil().updateProcessorSchedulingPeriod(generate, "1 sec");
 
         ProcessorEntity terminate = getClientUtil().createProcessor("TerminateFlowFile");
 
         ConnectionEntity generateToTerminate = getClientUtil().createConnection(generate, terminate, "success");
 
-        // WHEN
         getNifiClient().getProcessorClient().runProcessorOnce(generate);
 
-        // THEN
         waitForQueueCount(generateToTerminate.getId(), 1);
 
         ProcessorEntity actualGenerate = getNifiClient().getProcessorClient().getProcessor(generate.getId());

File: nifi-nar-bundles/nifi-standard-services/nifi-hwx-schema-registry-bundle/nifi-hwx-schema-registry-service/src/main/java/org/apache/nifi/schemaregistry/hortonworks/HortonworksSchemaRegistry.java
Patch:
@@ -202,10 +202,10 @@ public void enable(final ConfigurationContext context) throws InitializationExce
         }
 
         schemaRegistryConfig.put(SchemaRegistryClient.Configuration.SCHEMA_REGISTRY_URL.name(), urlValue);
-        schemaRegistryConfig.put(SchemaRegistryClient.Configuration.CLASSLOADER_CACHE_SIZE.name(), 10L);
-        schemaRegistryConfig.put(SchemaRegistryClient.Configuration.CLASSLOADER_CACHE_EXPIRY_INTERVAL_SECS.name(), context.getProperty(CACHE_EXPIRATION).asTimePeriod(TimeUnit.SECONDS));
+        schemaRegistryConfig.put(SchemaRegistryClient.Configuration.CLASSLOADER_CACHE_SIZE.name(), 10);
+        schemaRegistryConfig.put(SchemaRegistryClient.Configuration.CLASSLOADER_CACHE_EXPIRY_INTERVAL_SECS.name(), context.getProperty(CACHE_EXPIRATION).asTimePeriod(TimeUnit.SECONDS).intValue());
         schemaRegistryConfig.put(SchemaRegistryClient.Configuration.SCHEMA_VERSION_CACHE_SIZE.name(), context.getProperty(CACHE_SIZE).asInteger());
-        schemaRegistryConfig.put(SchemaRegistryClient.Configuration.SCHEMA_VERSION_CACHE_EXPIRY_INTERVAL_SECS.name(), context.getProperty(CACHE_EXPIRATION).asTimePeriod(TimeUnit.SECONDS));
+        schemaRegistryConfig.put(SchemaRegistryClient.Configuration.SCHEMA_VERSION_CACHE_EXPIRY_INTERVAL_SECS.name(), context.getProperty(CACHE_EXPIRATION).asTimePeriod(TimeUnit.SECONDS).intValue());
         Map<String, String> sslProperties = buildSslProperties(context);
         if (!sslProperties.isEmpty()) {
             schemaRegistryConfig.put(CLIENT_SSL_PROPERTY_PREFIX, sslProperties);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/inheritance/FlowFingerprintCheck.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.nifi.cluster.protocol.DataFlow;
 import org.apache.nifi.controller.FlowController;
 import org.apache.nifi.encrypt.PropertyEncryptor;
+import org.apache.nifi.encrypt.SensitiveValueEncoder;
 import org.apache.nifi.fingerprint.FingerprintFactory;
 import org.apache.nifi.nar.ExtensionManager;
 import org.slf4j.Logger;
@@ -38,8 +39,9 @@ public FlowInheritability checkInheritability(final DataFlow existingFlow, final
 
         final PropertyEncryptor encryptor = flowController.getEncryptor();
         final ExtensionManager extensionManager = flowController.getExtensionManager();
+        final SensitiveValueEncoder sensitiveValueEncoder = flowController.getSensitiveValueEncoder();
 
-        final FingerprintFactory fingerprintFactory = new FingerprintFactory(encryptor, extensionManager);
+        final FingerprintFactory fingerprintFactory = new FingerprintFactory(encryptor, extensionManager, sensitiveValueEncoder);
         final String existingFlowFingerprintBeforeHash = fingerprintFactory.createFingerprint(existingFlowBytes, flowController);
         if (existingFlowFingerprintBeforeHash.trim().isEmpty()) {
             return null;  // no existing flow, so equivalent to proposed flow

File: nifi-external/nifi-kafka-connect/nifi-kafka-connector/src/main/java/org/apache/nifi/kafka/connect/StatelessNiFiSourceConnector.java
Patch:
@@ -83,8 +83,8 @@ public ConfigDef config() {
 
         configDef.define(TOPIC_NAME_ATTRIBUTE, ConfigDef.Type.STRING, null, ConfigDef.Importance.MEDIUM,
             "Specifies the name of a FlowFile attribute to use for determining which Kafka Topic a FlowFile"
-            + " will be sent to. Either the topic.name or topic.name.attribute configuration must be specified. If both are specified, the topic.name.attribute will be preferred, but if a FlowFile"
-            + " does not have the specified attribute name, then the topic.name property will serve as the default topic name to use.");
+                + " will be sent to. Either the " + TOPIC_NAME + " or " + TOPIC_NAME_ATTRIBUTE + " configuration must be specified. If both are specified, the " + TOPIC_NAME_ATTRIBUTE
+                + " will be preferred, but if a FlowFile does not have the specified attribute name, then the " + TOPIC_NAME + " property will serve as the default topic name to use.");
 
         configDef.define(KEY_ATTRIBUTE, ConfigDef.Type.STRING, null, ConfigDef.Importance.MEDIUM, "Specifies the name of a FlowFile attribute to use for determining the Kafka Message key. If not"
             + " specified, the message key will be null. If specified, the value of the attribute with the given name will be used as the message key.");

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/AbstractExecuteSQL.java
Patch:
@@ -357,8 +357,9 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
 
                                 fragmentIndex++;
                             } catch (Exception e) {
-                                // Remove the result set flow file and propagate the exception
+                                // Remove any result set flow file(s) and propagate the exception
                                 session.remove(resultSetFF);
+                                session.remove(resultSetFlowFiles);
                                 if (e instanceof ProcessException) {
                                     throw (ProcessException) e;
                                 } else {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/AbstractHeartbeatMonitor.java
Patch:
@@ -292,6 +292,8 @@ private void processHeartbeat(final NodeHeartbeat heartbeat) {
             clusterCoordinator.finishNodeConnection(nodeId);
             clusterCoordinator.reportEvent(nodeId, Severity.INFO, "Received first heartbeat from connecting node. Node connected.");
         }
+
+        clusterCoordinator.validateHeartbeat(heartbeat);
     }
 
     /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/ClusterProtocolHeartbeatMonitor.java
Patch:
@@ -102,7 +102,7 @@ public void onStart() {
         heartbeatMessages.clear();
         for (final NodeIdentifier nodeId : clusterCoordinator.getNodeIdentifiers()) {
             final NodeHeartbeat heartbeat = new StandardNodeHeartbeat(nodeId, System.currentTimeMillis(),
-                    clusterCoordinator.getConnectionStatus(nodeId), 0, 0L, 0, System.currentTimeMillis());
+                    clusterCoordinator.getConnectionStatus(nodeId), 0, 0L, 0, System.currentTimeMillis(), 0L);
             heartbeatMessages.put(nodeId, heartbeat);
         }
     }
@@ -158,9 +158,10 @@ private ProtocolMessage handleHeartbeat(final HeartbeatMessage msg) {
         final int flowFileCount = (int) payload.getTotalFlowFileCount();
         final long flowFileBytes = payload.getTotalFlowFileBytes();
         final long systemStartTime = payload.getSystemStartTime();
+        final long revisionUpdateCount = payload.getRevisionUpdateCount();
 
         final NodeHeartbeat nodeHeartbeat = new StandardNodeHeartbeat(nodeId, System.currentTimeMillis(),
-                connectionStatus, flowFileCount, flowFileBytes, activeThreadCount, systemStartTime);
+                connectionStatus, flowFileCount, flowFileBytes, activeThreadCount, systemStartTime, revisionUpdateCount);
         heartbeatMessages.put(heartbeat.getNodeIdentifier(), nodeHeartbeat);
         logger.debug("Received new heartbeat from {}", nodeId);
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/coordination/heartbeat/TestAbstractHeartbeatMonitor.java
Patch:
@@ -209,7 +209,7 @@ public boolean isActiveClusterCoordinator() {
 
     private NodeHeartbeat createHeartbeat(final NodeIdentifier nodeId, final NodeConnectionState state) {
         final NodeConnectionStatus status = new NodeConnectionStatus(nodeId, state);
-        return new StandardNodeHeartbeat(nodeId, System.currentTimeMillis(), status, 0, 0, 0, 0);
+        return new StandardNodeHeartbeat(nodeId, System.currentTimeMillis(), status, 0, 0, 0, 0, 0L);
     }
 
     private TestFriendlyHeartbeatMonitor createMonitor(final ClusterCoordinator coordinator) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/integration/FrameworkIntegrationTest.java
Patch:
@@ -99,6 +99,7 @@
 import org.apache.nifi.services.FlowService;
 import org.apache.nifi.util.FileUtils;
 import org.apache.nifi.util.NiFiProperties;
+import org.apache.nifi.web.revision.RevisionManager;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Rule;
@@ -265,7 +266,7 @@ protected final void initialize(final NiFiProperties nifiProperties) throws IOEx
             Mockito.when(clusterCoordinator.getLocalNodeIdentifier()).thenReturn(localNodeId);
 
             flowController = FlowController.createClusteredInstance(flowFileEventRepository, nifiProperties, authorizer, auditService, encryptor, protocolSender, bulletinRepo, clusterCoordinator,
-                heartbeatMonitor, leaderElectionManager, VariableRegistry.ENVIRONMENT_SYSTEM_REGISTRY, flowRegistryClient, extensionManager);
+                heartbeatMonitor, leaderElectionManager, VariableRegistry.ENVIRONMENT_SYSTEM_REGISTRY, flowRegistryClient, extensionManager, Mockito.mock(RevisionManager.class));
 
             flowController.setClustered(true, UUID.randomUUID().toString());
             flowController.setNodeId(localNodeId);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-headless-server/src/main/java/org/apache/nifi/headless/HeadlessNiFiServer.java
Patch:
@@ -140,8 +140,7 @@ public void preDestruction() throws AuthorizerDestructionException {
                     bulletinRepository,
                     variableRegistry,
                     flowRegistryClient,
-                    extensionManager
-                    );
+                    extensionManager);
 
             flowService = StandardFlowService.createStandaloneInstance(
                     flowController,

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/oidc/StandardOidcIdentityProvider.java
Patch:
@@ -110,7 +110,7 @@ public StandardOidcIdentityProvider(final JwtService jwtService, final NiFiPrope
     public void initializeProvider() {
         // attempt to process the oidc configuration if configured
         if (!properties.isOidcEnabled()) {
-            logger.warn("The OIDC provider is not configured or enabled");
+            logger.debug("The OIDC provider is not configured or enabled");
             return;
         }
 

File: nifi-nar-bundles/nifi-extension-utils/nifi-processor-utils/src/test/java/org/apache/nifi/processor/util/list/TestAbstractListProcessor.java
Patch:
@@ -54,11 +54,11 @@
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
-import java.util.Map;
-import java.util.List;
 import java.util.ArrayList;
-import java.util.HashMap;
 import java.util.Comparator;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
 import java.util.UUID;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicReference;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ListFTP.java
Patch:
@@ -72,7 +72,7 @@ protected List<PropertyDescriptor> getSupportedPropertyDescriptors() {
         final PropertyDescriptor port = new PropertyDescriptor.Builder().fromPropertyDescriptor(UNDEFAULTED_PORT).defaultValue("21").build();
 
         final List<PropertyDescriptor> properties = new ArrayList<>();
-        properties.add(LISTING_STRATEGY);
+        properties.add(FILE_TRANSFER_LISTING_STRATEGY);
         properties.add(HOSTNAME);
         properties.add(port);
         properties.add(USERNAME);

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ListSFTP.java
Patch:
@@ -82,7 +82,7 @@ protected List<PropertyDescriptor> getSupportedPropertyDescriptors() {
         final PropertyDescriptor port = new PropertyDescriptor.Builder().fromPropertyDescriptor(UNDEFAULTED_PORT).defaultValue("22").build();
 
         final List<PropertyDescriptor> properties = new ArrayList<>();
-        properties.add(LISTING_STRATEGY);
+        properties.add(FILE_TRANSFER_LISTING_STRATEGY);
         properties.add(HOSTNAME);
         properties.add(port);
         properties.add(USERNAME);

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/util/SFTPTransfer.java
Patch:
@@ -202,7 +202,7 @@ public List<FileInfo> getListing() throws IOException {
         return listing;
     }
 
-    private void getListing(final String path, final int depth, final int maxResults, final List<FileInfo> listing) throws IOException {
+    protected void getListing(final String path, final int depth, final int maxResults, final List<FileInfo> listing) throws IOException {
         if (maxResults < 1 || listing.size() >= maxResults) {
             return;
         }

File: nifi-commons/nifi-security-utils/src/test/java/org/apache/nifi/security/util/KeyStoreUtilsTest.java
Patch:
@@ -17,9 +17,6 @@
 
 package org.apache.nifi.security.util;
 
-import org.junit.BeforeClass;
-import org.junit.Test;
-
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
@@ -31,6 +28,8 @@
 import java.security.cert.Certificate;
 import java.security.cert.CertificateException;
 import java.security.cert.X509Certificate;
+import org.junit.BeforeClass;
+import org.junit.Test;
 
 import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;

File: nifi-mock/src/main/java/org/apache/nifi/util/MockProcessSession.java
Patch:
@@ -274,6 +274,7 @@ public void commit() {
         }
 
         sharedState.addProvenanceEvents(provenanceReporter.getEvents());
+        provenanceReporter.clear();
         counterMap.clear();
     }
 

File: nifi-mock/src/main/java/org/apache/nifi/util/SharedSessionState.java
Patch:
@@ -18,9 +18,7 @@
 
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.LinkedHashSet;
 import java.util.List;
-import java.util.Set;
 import java.util.UUID;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
@@ -37,7 +35,8 @@ public class SharedSessionState {
     private final Processor processor;
     private final AtomicLong flowFileIdGenerator;
     private final ConcurrentMap<String, AtomicLong> counterMap = new ConcurrentHashMap<>();
-    private final Set<ProvenanceEventRecord> events = new LinkedHashSet<>();
+    // list of provenance events as they were in the provenance repository (events emitted with force=true or committed with the session)
+    private final List<ProvenanceEventRecord> events = new ArrayList<>();
 
     public SharedSessionState(final Processor processor, final AtomicLong flowFileIdGenerator) {
         flowFileQueue = new MockFlowFileQueue();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/groups/StandardProcessGroup.java
Patch:
@@ -443,7 +443,7 @@ public ProcessGroupCounts getCounts() {
                 syncFailure += childCounts.getSyncFailureCount();
             }
 
-            for (final RemoteProcessGroup remoteGroup : findAllRemoteProcessGroups()) {
+            for (final RemoteProcessGroup remoteGroup : getRemoteProcessGroups()) {
                 // Count only input ports that have incoming connections
                 for (final Port port : remoteGroup.getInputPorts()) {
                     if (port.hasIncomingConnection()) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/state/providers/zookeeper/ITZooKeeperStateProvider.java
Patch:
@@ -49,7 +49,7 @@
 import java.util.Map;
 
 import static org.apache.nifi.leader.election.ITSecureClientZooKeeperFactory.createAndStartServer;
-import static org.apache.nifi.leader.election.ITSecureClientZooKeeperFactory.createClientProperties;
+import static org.apache.nifi.leader.election.ITSecureClientZooKeeperFactory.createSecureClientProperties;
 
 public class ITZooKeeperStateProvider extends AbstractTestStateProvider {
 
@@ -94,7 +94,7 @@ public void setup() throws Exception {
         zkServer = serverConnectionFactory.getZooKeeperServer();
 
         // Set up state provider (client) TLS properties, normally injected through StateProviderContext annotation
-        nifiProperties = createClientProperties(
+        nifiProperties = createSecureClientProperties(
                 clientPort,
                 Paths.get(CLIENT_KEYSTORE),
                 CLIENT_KEYSTORE_TYPE,

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/csv/CSVReader.java
Patch:
@@ -52,8 +52,8 @@
 
 @Tags({"csv", "parse", "record", "row", "reader", "delimited", "comma", "separated", "values"})
 @CapabilityDescription("Parses CSV-formatted data, returning each row in the CSV file as a separate record. "
-    + "This reader assumes that the first line in the content is the column names and all subsequent lines are "
-    + "the values. See Controller Service's Usage for further documentation.")
+    + "This reader allows for inferring a schema based on the first line of the CSV, if a 'header line' is present, or providing an explicit schema "
+    + "for interpreting the values. See Controller Service's Usage for further documentation.")
 public class CSVReader extends SchemaRegistryService implements RecordReaderFactory {
 
     private static final AllowableValue HEADER_DERIVED = new AllowableValue("csv-header-derived", "Use String Fields From Header",

File: nifi-nar-bundles/nifi-sql-reporting-bundle/nifi-sql-reporting-tasks/src/main/java/org/apache/nifi/reporting/sql/util/QueryMetricsUtil.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.nifi.rules.PropertyContextActionHandler;
 import org.apache.nifi.rules.engine.RulesEngineService;
 
+
 public class QueryMetricsUtil {
 
     public static final PropertyDescriptor RECORD_SINK = new PropertyDescriptor.Builder()

File: nifi-nar-bundles/nifi-sql-reporting-bundle/nifi-sql-reporting-tasks/src/test/java/org/apache/nifi/reporting/sql/TestMetricsEventReportingTask.java
Patch:
@@ -42,6 +42,7 @@
 import org.apache.nifi.state.MockStateManager;
 import org.apache.nifi.util.MockPropertyValue;
 import org.apache.nifi.util.Tuple;
+import org.apache.nifi.util.db.JdbcProperties;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.Mockito;
@@ -213,6 +214,8 @@ private MockMetricsEventReportingTask initTask(Map<PropertyDescriptor, String> c
         ConfigurationContext configContext = Mockito.mock(ConfigurationContext.class);
         Mockito.when(configContext.getProperty(QueryMetricsUtil.RULES_ENGINE)).thenReturn(resValue);
         Mockito.when(configContext.getProperty(QueryMetricsUtil.ACTION_HANDLER)).thenReturn(pValue);
+        Mockito.when(configContext.getProperty(JdbcProperties.VARIABLE_REGISTRY_ONLY_DEFAULT_PRECISION)).thenReturn(new MockPropertyValue("10"));
+        Mockito.when(configContext.getProperty(JdbcProperties.VARIABLE_REGISTRY_ONLY_DEFAULT_SCALE)).thenReturn(new MockPropertyValue("0"));
         reportingTask.setup(configContext);
 
         return reportingTask;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/QueryDatabaseTableRecordTest.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.nifi.util.MockFlowFile;
 import org.apache.nifi.util.TestRunner;
 import org.apache.nifi.util.TestRunners;
+import org.apache.nifi.util.db.JdbcProperties;
 import org.apache.nifi.util.file.FileUtils;
 import org.junit.After;
 import org.junit.AfterClass;
@@ -122,6 +123,8 @@ public void setup() throws InitializationException, IOException {
         MockRecordWriter recordWriter = new MockRecordWriter(null, true, -1);
         runner.addControllerService("writer", recordWriter);
         runner.setProperty(QueryDatabaseTableRecord.RECORD_WRITER_FACTORY, "writer");
+        runner.setProperty(JdbcProperties.VARIABLE_REGISTRY_ONLY_DEFAULT_PRECISION, "8");
+        runner.setProperty(JdbcProperties.VARIABLE_REGISTRY_ONLY_DEFAULT_SCALE, "2");
         runner.enableControllerService(recordWriter);
     }
 

File: nifi-nar-bundles/nifi-atlas-bundle/nifi-atlas-reporting-task/src/main/java/org/apache/nifi/atlas/reporting/ReportLineageToAtlas.java
Patch:
@@ -70,6 +70,7 @@
 import org.apache.nifi.reporting.EventAccess;
 import org.apache.nifi.reporting.ReportingContext;
 import org.apache.nifi.reporting.util.provenance.ProvenanceEventConsumer;
+import org.apache.nifi.security.util.KeystoreType;
 import org.apache.nifi.ssl.SSLContextService;
 import org.apache.nifi.util.StringSelector;
 
@@ -360,8 +361,6 @@ public class ReportLineageToAtlas extends AbstractReportingTask {
 
     private static final String TRUSTSTORE_PASSWORD_ALIAS = "ssl.client.truststore.password";
 
-    private static final String KEYSTORE_TYPE_JKS = "JKS";
-
     private final ServiceLoader<NamespaceResolver> namespaceResolverLoader = ServiceLoader.load(NamespaceResolver.class);
     private volatile AtlasAuthN atlasAuthN;
     private volatile Properties atlasProperties;
@@ -698,7 +697,7 @@ private void setAtlasSSLConfig(Properties atlasProperties, ConfigurationContext
                 getLogger().warn("No SSLContextService configured, the system default truststore will be used.");
             } else if (!sslContextService.isTrustStoreConfigured()) {
                 getLogger().warn("No truststore configured on SSLContextService, the system default truststore will be used.");
-            } else if (!KEYSTORE_TYPE_JKS.equalsIgnoreCase(sslContextService.getTrustStoreType())) {
+            } else if (!KeystoreType.JKS.getType().equalsIgnoreCase(sslContextService.getTrustStoreType())) {
                 getLogger().warn("The configured truststore type is not supported by Atlas (not JKS), the system default truststore will be used.");
             } else {
                 atlasProperties.put(ATLAS_PROPERTY_TRUSTSTORE_FILE, sslContextService.getTrustStoreFile());

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/command/CommandOption.java
Patch:
@@ -123,11 +123,11 @@ public enum CommandOption {
 
     // Security related
     KEYSTORE("ks", "keystore", "A keystore to use for TLS/SSL connections", true),
-    KEYSTORE_TYPE("kst", "keystoreType", "The type of key store being used (JKS or PKCS12)", true),
+    KEYSTORE_TYPE("kst", "keystoreType", "The type of key store being used such as PKCS12", true),
     KEYSTORE_PASSWORD("ksp", "keystorePasswd", "The password of the keystore being used", true),
     KEY_PASSWORD("kp", "keyPasswd", "The key password of the keystore being used", true),
     TRUSTSTORE("ts", "truststore", "A truststore to use for TLS/SSL connections", true),
-    TRUSTSTORE_TYPE("tst", "truststoreType", "The type of trust store being used (JKS or PKCS12)", true),
+    TRUSTSTORE_TYPE("tst", "truststoreType", "The type of trust store being used such as PKCS12", true),
     TRUSTSTORE_PASSWORD("tsp", "truststorePasswd", "The password of the truststore being used", true),
     PROXIED_ENTITY("pe", "proxiedEntity", "The identity of an entity to proxy", true),
     PROTOCOL("pro", "protocol", "The security protocol to use, such as TLSv.1.2", true),

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/test/java/org/apache/nifi/processors/hadoop/TestCreateHadoopSequenceFile.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.nifi.components.AllowableValue;
 import org.apache.nifi.components.PropertyDescriptor;
 import org.apache.nifi.flowfile.attributes.CoreAttributes;
+import org.apache.nifi.flowfile.attributes.StandardFlowFileMediaType;
 import org.apache.nifi.hadoop.KerberosProperties;
 import org.apache.nifi.util.MockFlowFile;
 import org.apache.nifi.util.NiFiProperties;
@@ -183,7 +184,7 @@ public void testMergedZipData() throws IOException {
     @Test
     public void testMergedFlowfilePackagedData() throws IOException {
         Map<String, String> attributes = new HashMap<>();
-        attributes.put(CoreAttributes.MIME_TYPE.key(), "application/flowfile-v3");
+        attributes.put(CoreAttributes.MIME_TYPE.key(), StandardFlowFileMediaType.VERSION_3.getMediaType());
         try ( final FileInputStream fin = new FileInputStream("src/test/resources/testdata/13545479542069498.pkg")) {
             controller.enqueue(fin, attributes);
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestIdentifyMimeType.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.Map;
 
 import org.apache.nifi.flowfile.attributes.CoreAttributes;
+import org.apache.nifi.flowfile.attributes.StandardFlowFileMediaType;
 import org.apache.nifi.util.MockFlowFile;
 import org.apache.nifi.util.TestRunner;
 import org.apache.nifi.util.TestRunners;
@@ -71,8 +72,8 @@ public void testFiles() throws IOException {
         expectedMimeTypes.put("1.tar.gz", "application/gzip");
         expectedMimeTypes.put("1.jar", "application/java-archive");
         expectedMimeTypes.put("1.xml", "application/xml");
-        expectedMimeTypes.put("flowfilev3", "application/flowfile-v3");
-        expectedMimeTypes.put("flowfilev1.tar", "application/flowfile-v1");
+        expectedMimeTypes.put("flowfilev3", StandardFlowFileMediaType.VERSION_3.getMediaType());
+        expectedMimeTypes.put("flowfilev1.tar", StandardFlowFileMediaType.VERSION_1.getMediaType());
         expectedMimeTypes.put("fake.csv", "text/csv");
         expectedMimeTypes.put("2.custom", "text/plain");
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestMergeContent.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.commons.io.IOUtils;
 import org.apache.nifi.components.ValidationResult;
 import org.apache.nifi.flowfile.attributes.CoreAttributes;
+import org.apache.nifi.flowfile.attributes.StandardFlowFileMediaType;
 import org.apache.nifi.processor.ProcessContext;
 import org.apache.nifi.processors.standard.merge.AttributeStrategyUtil;
 import org.apache.nifi.util.MockFlowFile;
@@ -839,7 +840,7 @@ public void testFlowFileStream() throws IOException {
         runner.assertTransferCount(MergeContent.REL_ORIGINAL, 2);
 
         final MockFlowFile merged = runner.getFlowFilesForRelationship(MergeContent.REL_MERGED).get(0);
-        merged.assertAttributeEquals(CoreAttributes.MIME_TYPE.key(), "application/flowfile-v3");
+        merged.assertAttributeEquals(CoreAttributes.MIME_TYPE.key(), StandardFlowFileMediaType.VERSION_3.getMediaType());
     }
 
     @Test

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/util/SFTPTransfer.java
Patch:
@@ -86,7 +86,7 @@ public class SFTPTransfer implements FileTransfer {
         .name("Private Key Path")
         .description("The fully qualified path to the Private Key file")
         .required(false)
-        .addValidator(StandardValidators.FILE_EXISTS_VALIDATOR)
+        .addValidator(new StandardValidators.FileExistsValidator(true,true))
         .expressionLanguageSupported(ExpressionLanguageScope.FLOWFILE_ATTRIBUTES)
         .build();
     public static final PropertyDescriptor PRIVATE_KEY_PASSPHRASE = new PropertyDescriptor.Builder()
@@ -103,7 +103,7 @@ public class SFTPTransfer implements FileTransfer {
                 " otherwise, if 'Strict Host Key Checking' property is applied (set to true)" +
                 " then uses the 'known_hosts' and 'known_hosts2' files from ~/.ssh directory" +
                 " else no host key file will be used")
-        .addValidator(StandardValidators.FILE_EXISTS_VALIDATOR)
+        .addValidator(new StandardValidators.FileExistsValidator(true,true))
         .required(false)
         .build();
     public static final PropertyDescriptor STRICT_HOST_KEY_CHECKING = new PropertyDescriptor.Builder()

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/s3/PutS3Object.java
Patch:
@@ -317,7 +317,7 @@ protected PropertyDescriptor getSupportedDynamicPropertyDescriptor(final String
     }
 
     protected File getPersistenceFile() {
-        return new File(this.tempDirMultipart + File.pathSeparator + getIdentifier());
+        return new File(this.tempDirMultipart + File.separator + getIdentifier());
     }
 
     protected boolean localUploadExistsInS3(final AmazonS3Client s3, final String bucket, final MultipartState localState) {

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ReplaceText.java
Patch:
@@ -172,7 +172,7 @@ public class ReplaceText extends AbstractProcessor {
         .description("Run the 'Replacement Strategy' against each line separately (Line-by-Line) or buffer the entire file "
             + "into memory (Entire Text) and run against that.")
         .allowableValues(LINE_BY_LINE, ENTIRE_TEXT)
-        .defaultValue(ENTIRE_TEXT)
+        .defaultValue(LINE_BY_LINE)
         .required(true)
         .build();
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestReplaceText.java
Patch:
@@ -770,6 +770,7 @@ public void testRoutesToFailureIfTooLarge() throws IOException {
         runner.setProperty(ReplaceText.SEARCH_VALUE, "[123]");
         runner.setProperty(ReplaceText.MAX_BUFFER_SIZE, "1 b");
         runner.setProperty(ReplaceText.REPLACEMENT_VALUE, "${abc}");
+        runner.setProperty(ReplaceText.EVALUATION_MODE, ReplaceText.ENTIRE_TEXT);
 
         final Map<String, String> attributes = new HashMap<>();
         attributes.put("abc", "Good");
@@ -823,6 +824,7 @@ public void testGetExistingContent() throws IOException {
         final TestRunner runner = getRunner();
         runner.setProperty(ReplaceText.SEARCH_VALUE, "(?s)(^.*)");
         runner.setProperty(ReplaceText.REPLACEMENT_VALUE, "attribute header\n\n${filename}\n\ndata header\n\n$1\n\nfooter");
+        runner.setProperty(ReplaceText.EVALUATION_MODE, ReplaceText.ENTIRE_TEXT);
 
         final Map<String, String> attributes = new HashMap<>();
         attributes.put("filename", "abc.txt");
@@ -879,6 +881,7 @@ public void testDefaultMultilineReplacement() throws Exception {
         // leave the default regex settings
         final TestRunner runner = getRunner();
         runner.setProperty(ReplaceText.REPLACEMENT_VALUE, defaultValue);
+        runner.setProperty(ReplaceText.EVALUATION_MODE, ReplaceText.ENTIRE_TEXT);
 
         final Map<String, String> attributes = new HashMap<>();
         runner.enqueue(("original-text-line-1" + System.lineSeparator() + "original-text-line-2").getBytes(StandardCharsets.UTF_8), attributes);

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/main/java/org/apache/nifi/services/azure/cosmos/document/AzureCosmosDBClientService.java
Patch:
@@ -150,7 +150,7 @@ protected Collection<ValidationResult> customValidate(ValidationContext validati
 
         if (StringUtils.isBlank(uri) || StringUtils.isBlank(accessKey)) {
             results.add(new ValidationResult.Builder()
-                    .subject("AzureStorageCredentialsControllerService")
+                    .subject(this.getClass().getSimpleName())
                     .valid(false)
                     .explanation(
                         "either " + AzureCosmosDBUtils.URI.getDisplayName()

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ReplaceText.java
Patch:
@@ -602,8 +602,7 @@ private static class LiteralReplace implements ReplacementStrategyExecutor {
         @Override
         public FlowFile replace(FlowFile flowFile, final ProcessSession session, final ProcessContext context, final String evaluateMode, final Charset charset, final int maxBufferSize) {
             final String replacementValue = context.getProperty(REPLACEMENT_VALUE).evaluateAttributeExpressions(flowFile).getValue();
-            final AttributeValueDecorator quotedAttributeDecorator = Pattern::quote;
-            final String searchValue = context.getProperty(SEARCH_VALUE).evaluateAttributeExpressions(flowFile, quotedAttributeDecorator).getValue();
+            final String searchValue = context.getProperty(SEARCH_VALUE).evaluateAttributeExpressions(flowFile).getValue();
 
             if (evaluateMode.equalsIgnoreCase(ENTIRE_TEXT)) {
                 final int flowFileSize = (int) flowFile.getSize();

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/AbstractQueryDatabaseTable.java
Patch:
@@ -316,7 +316,7 @@ public void onTrigger(final ProcessContext context, final ProcessSessionFactory
                         fileToProcess = session.putAllAttributes(fileToProcess, attributesToAdd);
                         sqlWriter.updateCounters(session);
 
-                        logger.info("{} contains {} records; transferring to 'success'",
+                        logger.debug("{} contains {} records; transferring to 'success'",
                                 new Object[]{fileToProcess, nrOfRows.get()});
 
                         session.getProvenanceReporter().receive(fileToProcess, jdbcURL, stopWatch.getElapsed(TimeUnit.MILLISECONDS));

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-processors/src/test/java/org/apache/nifi/processors/elasticsearch/ITQueryElasticsearchHttp.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import org.apache.nifi.processors.elasticsearch.AbstractElasticsearchHttpProcessor.ElasticsearchVersion;
 import org.apache.nifi.util.MockFlowFile;
 import org.apache.nifi.util.TestRunner;
 import org.apache.nifi.util.TestRunners;
@@ -43,7 +42,6 @@ public void testFetchElasticsearchOnTrigger() throws IOException {
         runner = TestRunners.newTestRunner(QueryElasticsearchHttp.class); // all docs are found
         runner.setProperty(AbstractElasticsearchHttpProcessor.ES_URL,
                 "http://localhost.internal:9200");
-        runner.setProperty(QueryElasticsearchHttp.ES_VERSION, ElasticsearchVersion.ES_LESS_THAN_7.name());
 
         runner.setProperty(QueryElasticsearchHttp.INDEX, "prod-accounting");
         runner.assertNotValid();
@@ -70,7 +68,6 @@ public void testFetchElasticsearchOnTrigger_IncomingFile() throws IOException {
         runner = TestRunners.newTestRunner(QueryElasticsearchHttp.class); // all docs are found
         runner.setProperty(AbstractElasticsearchHttpProcessor.ES_URL,
                 "http://localhost.internal:9200");
-        runner.setProperty(QueryElasticsearchHttp.ES_VERSION, ElasticsearchVersion.ES_LESS_THAN_7.name());
 
         runner.setProperty(QueryElasticsearchHttp.INDEX, "prod-accounting");
         runner.assertNotValid();

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-processors/src/test/java/org/apache/nifi/processors/elasticsearch/ITScrollElasticsearchHttp.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.IOException;
 
-import org.apache.nifi.processors.elasticsearch.AbstractElasticsearchHttpProcessor.ElasticsearchVersion;
 import org.apache.nifi.util.MockFlowFile;
 import org.apache.nifi.util.TestRunner;
 import org.apache.nifi.util.TestRunners;
@@ -41,7 +40,6 @@ public void testFetchElasticsearchOnTrigger() throws IOException {
         runner = TestRunners.newTestRunner(ScrollElasticsearchHttp.class); // all docs are found
         runner.setProperty(AbstractElasticsearchHttpProcessor.ES_URL,
                 "http://ip-172-31-49-152.ec2.internal:9200");
-        runner.setProperty(ScrollElasticsearchHttp.ES_VERSION, ElasticsearchVersion.ES_LESS_THAN_7.name());
 
         runner.setProperty(ScrollElasticsearchHttp.INDEX, "prod-accounting");
         runner.assertNotValid();

File: nifi-mock/src/main/java/org/apache/nifi/util/MockValidationContext.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.util;
 
-import org.apache.nifi.AbstractValidationContext;
+import org.apache.nifi.components.validation.AbstractValidationContext;
 import org.apache.nifi.attribute.expression.language.Query;
 import org.apache.nifi.attribute.expression.language.Query.Range;
 import org.apache.nifi.attribute.expression.language.StandardExpressionLanguageCompiler;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-authorization/src/main/java/org/apache/nifi/authorization/user/StandardNiFiUser.java
Patch:
@@ -16,8 +16,6 @@
  */
 package org.apache.nifi.authorization.user;
 
-import org.apache.commons.lang3.StringUtils;
-
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.Objects;
@@ -130,7 +128,7 @@ public String toString() {
         if (groups == null) {
             formattedGroups = "none";
         } else {
-            formattedGroups = StringUtils.join(groups, ", ");
+            formattedGroups = String.join(", ", groups);
         }
 
         return String.format("identity[%s], groups[%s]", getIdentity(), formattedGroups);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/controller/StandardProcessorNode.java
Patch:
@@ -74,7 +74,6 @@
 import org.quartz.CronExpression;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.springframework.util.Assert;
 
 import java.lang.management.ThreadInfo;
 import java.lang.reflect.InvocationTargetException;
@@ -1184,7 +1183,9 @@ public ConnectableType getConnectableType() {
 
     @Override
     public void setAnnotationData(final String data) {
-        Assert.state(!isRunning(), "Cannot set AnnotationData while processor is running");
+        if (isRunning()) {
+            throw new IllegalStateException("Cannot set AnnotationData while processor is running");
+        }
         super.setAnnotationData(data);
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/controller/reporting/AbstractReportingTaskNode.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.nifi.controller.reporting;
 
 import org.apache.nifi.annotation.configuration.DefaultSchedule;
-import org.apache.nifi.parameter.ParameterLookup;
 import org.apache.nifi.bundle.BundleCoordinate;
 import org.apache.nifi.components.ConfigurableComponent;
 import org.apache.nifi.components.ValidationResult;
@@ -37,6 +36,7 @@
 import org.apache.nifi.controller.service.ControllerServiceProvider;
 import org.apache.nifi.controller.service.StandardConfigurationContext;
 import org.apache.nifi.nar.ExtensionManager;
+import org.apache.nifi.parameter.ParameterLookup;
 import org.apache.nifi.registry.ComponentVariableRegistry;
 import org.apache.nifi.reporting.ReportingTask;
 import org.apache.nifi.scheduling.SchedulingStrategy;
@@ -45,7 +45,6 @@
 import org.apache.nifi.util.file.classloader.ClassLoaderUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.springframework.core.annotation.AnnotationUtils;
 
 import java.net.URL;
 import java.util.Collection;
@@ -92,7 +91,7 @@ public AbstractReportingTaskNode(final LoggableComponent<ReportingTask> reportin
 
         final Class<?> reportingClass = reportingTask.getComponent().getClass();
 
-        DefaultSchedule dsc = AnnotationUtils.findAnnotation(reportingClass, DefaultSchedule.class);
+        final DefaultSchedule dsc = reportingClass.getAnnotation(DefaultSchedule.class);
         if(dsc != null) {
             try {
                 this.setSchedulingStrategy(dsc.strategy());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/controller/repository/scheduling/ConnectableProcessContext.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.controller.scheduling;
+package org.apache.nifi.controller.repository.scheduling;
 
 import java.util.Collection;
 import java.util.Collections;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/controller/state/manager/StandardStateManagerProvider.java
Patch:
@@ -75,8 +75,7 @@ public class StandardStateManagerProvider implements StateManagerProvider {
     private final StateProvider localStateProvider;
     private final StateProvider clusterStateProvider;
 
-
-    private StandardStateManagerProvider(final StateProvider localStateProvider, final StateProvider clusterStateProvider) {
+    public StandardStateManagerProvider(final StateProvider localStateProvider, final StateProvider clusterStateProvider) {
         this.localStateProvider = localStateProvider;
         this.clusterStateProvider = clusterStateProvider;
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/processor/StandardValidationContext.java
Patch:
@@ -17,7 +17,7 @@
  */
 package org.apache.nifi.processor;
 
-import org.apache.nifi.AbstractValidationContext;
+import org.apache.nifi.components.validation.AbstractValidationContext;
 import org.apache.nifi.attribute.expression.language.PreparedQuery;
 import org.apache.nifi.attribute.expression.language.Query;
 import org.apache.nifi.attribute.expression.language.Query.Range;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/test/java/org/apache/nifi/controller/repository/TestRingBufferEventRepository.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.nifi.controller.repository;
 
 import org.apache.nifi.controller.repository.metrics.RingBufferEventRepository;
+import org.junit.Assert;
 import org.junit.Test;
-import org.testng.Assert;
 
 import java.io.IOException;
 import java.util.Collections;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/test/java/org/apache/nifi/parameter/TestStandardParameterContext.java
Patch:
@@ -33,7 +33,6 @@
 import static junit.framework.TestCase.assertTrue;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
-import static org.testng.Assert.assertNull;
 
 public class TestStandardParameterContext {
 
@@ -54,12 +53,12 @@ public void testUpdatesApply() {
 
         final Parameter abcParam = context.getParameter("abc").get();
         assertEquals(abcDescriptor, abcParam.getDescriptor());
-        assertNull(abcParam.getDescriptor().getDescription());
+        Assert.assertNull(abcParam.getDescriptor().getDescription());
         assertEquals("123", abcParam.getValue());
 
         final Parameter xyzParam = context.getParameter("xyz").get();
         assertEquals(xyzDescriptor, xyzParam.getDescriptor());
-        assertNull(xyzParam.getDescriptor().getDescription());
+        Assert.assertNull(xyzParam.getDescriptor().getDescription());
         assertEquals("242526", xyzParam.getValue());
 
         final Map<String, Parameter> secondParameters = new HashMap<>();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/components/validation/AbstractValidationContext.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.nifi;
+package org.apache.nifi.components.validation;
 
 import org.apache.nifi.components.PropertyDependency;
 import org.apache.nifi.components.PropertyDescriptor;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/groups/ProcessGroup.java
Patch:
@@ -47,7 +47,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
-import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.Future;
 import java.util.function.Predicate;
 
 /**
@@ -203,7 +203,7 @@ public interface ProcessGroup extends ComponentAuthorizable, Positionable, Versi
      * @throws IllegalStateException if the processor is not valid, or is
      *             already running
      */
-    CompletableFuture<Void> startProcessor(ProcessorNode processor, boolean failIfStopping);
+    Future<Void> startProcessor(ProcessorNode processor, boolean failIfStopping);
 
     /**
      * Starts the given Input Port
@@ -231,7 +231,7 @@ public interface ProcessGroup extends ComponentAuthorizable, Positionable, Versi
      *
      * @param processor to stop
      */
-    CompletableFuture<Void> stopProcessor(ProcessorNode processor);
+    Future<Void> stopProcessor(ProcessorNode processor);
 
     /**
      * Terminates the given Processor

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/scheduling/EventDrivenSchedulingAgent.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.nifi.controller.repository.StandardProcessSessionFactory;
 import org.apache.nifi.controller.repository.WeakHashMapProcessSessionFactory;
 import org.apache.nifi.controller.repository.metrics.StandardFlowFileEvent;
+import org.apache.nifi.controller.repository.scheduling.ConnectableProcessContext;
 import org.apache.nifi.controller.service.ControllerServiceProvider;
 import org.apache.nifi.encrypt.StringEncryptor;
 import org.apache.nifi.engine.FlowEngine;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/scheduling/RepositoryContextFactory.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.nifi.controller.repository.FlowFileEventRepository;
 import org.apache.nifi.controller.repository.FlowFileRepository;
 import org.apache.nifi.controller.repository.RepositoryContext;
+import org.apache.nifi.controller.repository.StandardRepositoryContext;
 import org.apache.nifi.provenance.ProvenanceRepository;
 
 import java.util.concurrent.atomic.AtomicLong;
@@ -46,7 +47,7 @@ public RepositoryContextFactory(final ContentRepository contentRepository, final
     }
 
     public RepositoryContext newProcessContext(final Connectable connectable, final AtomicLong connectionIndex) {
-        return new RepositoryContext(connectable, connectionIndex, contentRepo, flowFileRepo, flowFileEventRepo, counterRepo, provenanceRepo);
+        return new StandardRepositoryContext(connectable, connectionIndex, contentRepo, flowFileRepo, flowFileEventRepo, counterRepo, provenanceRepo);
     }
 
     public ContentRepository getContentRepository() {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/scheduling/StandardProcessScheduler.java
Patch:
@@ -35,6 +35,7 @@
 import org.apache.nifi.controller.SchedulingAgentCallback;
 import org.apache.nifi.controller.StandardProcessorNode;
 import org.apache.nifi.controller.exception.ProcessorInstantiationException;
+import org.apache.nifi.controller.repository.scheduling.ConnectableProcessContext;
 import org.apache.nifi.controller.service.ControllerServiceNode;
 import org.apache.nifi.controller.service.ControllerServiceProvider;
 import org.apache.nifi.encrypt.StringEncryptor;
@@ -231,7 +232,7 @@ public void run() {
 
                     LOG.error("Failed to invoke the On-Scheduled Lifecycle methods of {} due to {}; administratively yielding this "
                             + "ReportingTask and will attempt to schedule it again after {}",
-                            new Object[]{reportingTask, e.toString(), administrativeYieldDuration}, e);
+                            reportingTask, e.toString(), administrativeYieldDuration, e);
 
 
                     try (final NarCloseable x = NarCloseable.withComponentNarLoader(flowController.getExtensionManager(), reportingTask.getClass(), reportingTask.getIdentifier())) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/tasks/ConnectableTask.java
Patch:
@@ -32,7 +32,7 @@
 import org.apache.nifi.controller.repository.StandardProcessSessionFactory;
 import org.apache.nifi.controller.repository.WeakHashMapProcessSessionFactory;
 import org.apache.nifi.controller.repository.metrics.StandardFlowFileEvent;
-import org.apache.nifi.controller.scheduling.ConnectableProcessContext;
+import org.apache.nifi.controller.repository.scheduling.ConnectableProcessContext;
 import org.apache.nifi.controller.scheduling.LifecycleState;
 import org.apache.nifi.controller.scheduling.RepositoryContextFactory;
 import org.apache.nifi.controller.scheduling.SchedulingAgent;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/repository/claim/TestContentClaimWriteCache.java
Patch:
@@ -60,7 +60,7 @@ public void shutdown() throws IOException {
 
     @Test
     public void testFlushWriteCorrectData() throws IOException {
-        final ContentClaimWriteCache cache = new ContentClaimWriteCache(repository, 4);
+        final ContentClaimWriteCache cache = new StandardContentClaimWriteCache(repository, 4);
 
         final ContentClaim claim1 = cache.getContentClaim();
         assertNotNull(claim1);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/scheduling/TestStandardProcessScheduler.java
Patch:
@@ -162,7 +162,7 @@ public void setup() throws InitializationException {
         when(controller.getFlowManager()).thenReturn(flowManager);
         Mockito.when(controller.getExtensionManager()).thenReturn(extensionManager);
 
-        serviceProvider = new StandardControllerServiceProvider(controller, scheduler, null);
+        serviceProvider = new StandardControllerServiceProvider(scheduler, null, flowManager, extensionManager);
 
         final ConcurrentMap<String, ProcessorNode> processorMap = new ConcurrentHashMap<>();
         Mockito.doAnswer(new Answer<ProcessorNode>() {
@@ -184,7 +184,7 @@ public Object answer(InvocationOnMock invocation) {
 
         when(controller.getControllerServiceProvider()).thenReturn(serviceProvider);
 
-        rootGroup = new MockProcessGroup(controller);
+        rootGroup = new MockProcessGroup(flowManager);
         when(flowManager.getGroup(Mockito.anyString())).thenReturn(rootGroup);
 
         when(controller.getReloadComponent()).thenReturn(Mockito.mock(ReloadComponent.class));
@@ -493,7 +493,7 @@ public void validateDisablingOfTheFailedService() throws Exception {
     @Ignore
     public void validateEnabledDisableMultiThread() throws Exception {
         final StandardProcessScheduler scheduler = createScheduler();
-        final StandardControllerServiceProvider provider = new StandardControllerServiceProvider(controller, scheduler, null);
+        final StandardControllerServiceProvider provider = new StandardControllerServiceProvider(scheduler, null, flowManager, extensionManager);
         final ExecutorService executor = Executors.newCachedThreadPool();
         for (int i = 0; i < 200; i++) {
             final ControllerServiceNode serviceNode = flowManager.createControllerService(RandomShortDelayEnablingService.class.getName(), "1",

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/tasks/TestConnectableTask.java
Patch:
@@ -37,6 +37,7 @@
 import org.apache.nifi.controller.queue.FlowFileQueue;
 import org.apache.nifi.controller.repository.FlowFileEventRepository;
 import org.apache.nifi.controller.repository.RepositoryContext;
+import org.apache.nifi.controller.repository.StandardRepositoryContext;
 import org.apache.nifi.controller.scheduling.RepositoryContextFactory;
 import org.apache.nifi.controller.scheduling.LifecycleState;
 import org.apache.nifi.controller.scheduling.SchedulingAgent;
@@ -52,7 +53,7 @@ private ConnectableTask createTask(final Connectable connectable) {
         final FlowController flowController = Mockito.mock(FlowController.class);
         Mockito.when(flowController.getStateManagerProvider()).thenReturn(Mockito.mock(StateManagerProvider.class));
 
-        final RepositoryContext repoContext = Mockito.mock(RepositoryContext.class);
+        final RepositoryContext repoContext = Mockito.mock(StandardRepositoryContext.class);
         Mockito.when(repoContext.getFlowFileEventRepository()).thenReturn(Mockito.mock(FlowFileEventRepository.class));
 
         final RepositoryContextFactory contextFactory = Mockito.mock(RepositoryContextFactory.class);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-nar-utils/src/main/java/org/apache/nifi/nar/NarClassLoaders.java
Patch:
@@ -228,7 +228,8 @@ private InitContext load(final ClassLoader rootClassloader,
                     // see if this class loader is eligible for loading
                     ClassLoader narClassLoader = null;
                     if (narDependencyCoordinate == null) {
-                        narClassLoader = createNarClassLoader(narDetail.getWorkingDirectory(), jettyClassLoader);
+                        final ClassLoader parentClassLoader = jettyClassLoader == null ? ClassLoader.getSystemClassLoader() : jettyClassLoader;
+                        narClassLoader = createNarClassLoader(narDetail.getWorkingDirectory(), parentClassLoader);
                     } else {
                         final String dependencyCoordinateStr = narDependencyCoordinate.getCoordinate();
 
@@ -279,7 +280,7 @@ private InitContext load(final ClassLoader rootClassloader,
 
             // Ensure exactly one NiFiServer implementation, otherwise report none or multiples found
             if (niFiServers.size() == 0) {
-                throw new IOException("No implementations of NiFiServer found, there must be exactly one implementation.");
+                serverInstance = null;
             } else if (niFiServers.size() > 1) {
                 String sb = "Expected exactly one implementation of NiFiServer but found " + niFiServers.size() + ": " +
                         niFiServers.entrySet().stream().map((entry) -> entry.getKey().getClass().getName() + " from " + entry.getValue()).collect(Collectors.joining(", "));

File: nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/bootstrap/ExtensionDiscovery.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.nifi.stateless.bootstrap;
 
 import org.apache.nifi.bundle.Bundle;
-import org.apache.nifi.nar.ExtensionManager;
+import org.apache.nifi.nar.ExtensionDiscoveringManager;
 import org.apache.nifi.nar.NarClassLoaders;
 import org.apache.nifi.nar.NarClassLoadersHolder;
 import org.apache.nifi.nar.StandardExtensionDiscoveringManager;
@@ -32,7 +32,7 @@
 public class ExtensionDiscovery {
     private static final Logger logger = LoggerFactory.getLogger(ExtensionDiscovery.class);
 
-    public static ExtensionManager discover(final File narWorkingDirectory, final ClassLoader systemClassLoader) throws IOException {
+    public static ExtensionDiscoveringManager discover(final File narWorkingDirectory, final ClassLoader systemClassLoader) throws IOException {
         NarClassLoaders narClassLoaders = NarClassLoadersHolder.getInstance();
 
         final long discoveryStart = System.nanoTime();

File: nifi-framework-api/src/main/java/org/apache/nifi/authorization/resource/Authorizable.java
Patch:
@@ -97,7 +97,7 @@ default AuthorizationResult checkAuthorization(Authorizer authorizer, RequestAct
         final Resource requestedResource = getRequestedResource();
         final AuthorizationRequest request = new AuthorizationRequest.Builder()
                 .identity(user.getIdentity())
-                .groups(user.getGroups())
+                .groups(user.getAllGroups())
                 .anonymous(user.isAnonymous())
                 .accessAttempt(false)
                 .action(action)
@@ -209,7 +209,7 @@ default void authorize(Authorizer authorizer, RequestAction action, NiFiUser use
         final Resource requestedResource = getRequestedResource();
         final AuthorizationRequest request = new AuthorizationRequest.Builder()
                 .identity(user.getIdentity())
-                .groups(user.getGroups())
+                .groups(user.getAllGroups())
                 .anonymous(user.isAnonymous())
                 .accessAttempt(true)
                 .action(action)

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiServiceFacade.java
Patch:
@@ -3725,7 +3725,7 @@ private boolean isUserAuthorized(final NiFiUser user, final Port port) {
         final AuthorizationRequest request = new AuthorizationRequest.Builder()
                 .resource(ResourceFactory.getDataTransferResource(port.getResource()))
                 .identity(user.getIdentity())
-                .groups(user.getGroups())
+                .groups(user.getAllGroups())
                 .anonymous(user.isAnonymous())
                 .accessAttempt(false)
                 .action(RequestAction.WRITE)

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/knox/KnoxServiceFactoryBean.java
Patch:
@@ -28,8 +28,8 @@ public class KnoxServiceFactoryBean implements FactoryBean<KnoxService> {
     public KnoxService getObject() throws Exception {
         if (knoxService == null) {
             // ensure we only allow knox if login and oidc are disabled
-            if (properties.isKnoxSsoEnabled() && (properties.isLoginIdentityProviderEnabled() || properties.isOidcEnabled())) {
-                throw new RuntimeException("Apache Knox SSO support cannot be enabled if the Login Identity Provider or OpenId Connect is configured.");
+            if (properties.isKnoxSsoEnabled() && (properties.isLoginIdentityProviderEnabled() || properties.isOidcEnabled() || properties.isSamlEnabled())) {
+                throw new RuntimeException("Apache Knox SSO support cannot be enabled if the Login Identity Provider or OpenId Connect or SAML is configured.");
             }
 
             final KnoxConfiguration configuration = new StandardKnoxConfiguration(properties);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/util/CacheKey.java
Patch:
@@ -19,9 +19,6 @@
 import java.nio.charset.StandardCharsets;
 import java.security.MessageDigest;
 
-/**
- * An authentication token that represents an Authenticated and Authorized user of the NiFi Apis. The authorities are based off the specified UserDetails.
- */
 /**
  * Key for the cache. Necessary to override the default String.equals() to utilize MessageDigest.isEquals() to prevent timing attacks.
  */

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/state/server/TestZooKeeperStateServer.java
Patch:
@@ -23,7 +23,6 @@
 
 import org.apache.nifi.util.NiFiProperties;
 import org.apache.nifi.properties.StandardNiFiProperties;
-import org.apache.nifi.controller.state.server.ZooKeeperStateServer;
 
 import org.apache.zookeeper.client.FourLetterWordMain;
 import org.apache.zookeeper.common.X509Exception.SSLContextException;
@@ -72,7 +71,7 @@ public static void setup() throws IOException, ConfigException {
 
         final Properties properties = new Properties();
         properties.setProperty(NiFiProperties.STATE_MANAGEMENT_ZOOKEEPER_PROPERTIES, zkServerConfig.toString());
-        properties.setProperty(NiFiProperties.STATE_MANAGEMENT_START_EMBEDDED_ZOOKEEPER, "true");
+        properties.setProperty(NiFiProperties.STATE_MANAGEMENT_START_EMBEDDED_ZOOKEEPER, Boolean.TRUE.toString());
 
         zkServer = ZooKeeperStateServer.create(new StandardNiFiProperties(properties));
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ReportingTaskEntity.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.nifi.web.api.dto.ReportingTaskDTO;
 import org.apache.nifi.web.api.dto.status.ReportingTaskStatusDTO;
 
-import javax.xml.bind.annotation.XmlRootElement;
 
 /**
  * A serialized representation of this class can be placed in the entity body of a response to the API. This particular entity holds a reference to a reporting task.

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/test/java/org/apache/nifi/csv/TestWriteCSVResult.java
Patch:
@@ -134,6 +134,7 @@ public void testDataTypes() throws IOException {
             valueMap.put("record", null);
             valueMap.put("choice", 48L);
             valueMap.put("array", null);
+            valueMap.put("enum", null);
 
             final Record record = new MapRecord(schema, valueMap);
             final RecordSet rs = RecordSet.of(schema, record);
@@ -156,7 +157,7 @@ public void testDataTypes() throws IOException {
 
         final String values = splits[1];
         final StringBuilder expectedBuilder = new StringBuilder();
-        expectedBuilder.append("\"true\",\"1\",\"8\",\"9\",\"8\",\"8\",\"8.0\",\"8.0\",\"8.1\",\"" + timestampValue + "\",\"" + dateValue + "\",\"" + timeValue + "\",\"c\",\"a孟bc李12儒3\",,\"48\",,");
+        expectedBuilder.append("\"true\",\"1\",\"8\",\"9\",\"8\",\"8\",\"8.0\",\"8.0\",\"8.1\",\"" + timestampValue + "\",\"" + dateValue + "\",\"" + timeValue + "\",\"c\",,\"a孟bc李12儒3\",,\"48\",,");
 
         final String expectedValues = expectedBuilder.toString();
 

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/test/java/org/apache/nifi/json/TestWriteJsonResult.java
Patch:
@@ -101,6 +101,7 @@ public void testDataTypes() throws IOException, ParseException {
         valueMap.put("timestamp", new Timestamp(time));
         valueMap.put("record", null);
         valueMap.put("array", null);
+        valueMap.put("enum", null);
         valueMap.put("choice", 48L);
         valueMap.put("map", map);
 

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/test/java/org/apache/nifi/lookup/TestRecordSetWriterLookup.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.nifi.logging.ComponentLog;
 import org.apache.nifi.processor.exception.ProcessException;
 import org.apache.nifi.reporting.InitializationException;
-import org.apache.nifi.schema.access.SchemaNotFoundException;;
+import org.apache.nifi.schema.access.SchemaNotFoundException;
 import org.apache.nifi.serialization.RecordSetWriter;
 import org.apache.nifi.serialization.RecordSetWriterFactory;
 import org.apache.nifi.serialization.SimpleRecordSchema;

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/test/java/org/apache/nifi/xml/TestWriteXMLResult.java
Patch:
@@ -195,6 +195,7 @@ public void testDataTypes() throws IOException, ParseException {
         valueMap.put("timestamp", new Timestamp(time));
         valueMap.put("record", null);
         valueMap.put("array", null);
+        valueMap.put("enum", null);
         valueMap.put("choice", 48L);
         valueMap.put("map", map);
 
@@ -207,7 +208,7 @@ public void testDataTypes() throws IOException, ParseException {
         writer.write(rs);
         writer.flush();
 
-        String xmlResult = "<ROOT><RECORD><string>string</string><boolean>true</boolean><byte>1</byte><char>c</char><short>8</short>" +
+        String xmlResult = "<ROOT><RECORD><string>string</string><boolean>true</boolean><byte>1</byte><char>c</char><enum /><short>8</short>" +
                 "<int>9</int><bigint>8</bigint><long>8</long><float>8.0</float><double>8.0</double><decimal>8.1</decimal>" +
                 "<date>2017-01-01</date><time>17:00:00</time><timestamp>2017-01-01 17:00:00</timestamp><record /><choice>48</choice><array />" +
                 "<map><height>48</height><width>96</width></map></RECORD></ROOT>";

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/test/java/org/apache/nifi/json/TestInferJsonSchemaAccessStrategy.java
Patch:
@@ -182,7 +182,7 @@ public void testDocsExample() throws IOException {
         assertEquals(2, possibleTypes.size());
         assertTrue(possibleTypes.contains(RecordFieldType.STRING.getDataType()));
         assertTrue(possibleTypes.contains(RecordFieldType.ARRAY.getArrayDataType(RecordFieldType.CHOICE.getChoiceDataType(
-                RecordFieldType.LONG.getDataType(),
+                RecordFieldType.INT.getDataType(),
                 RecordFieldType.STRING.getDataType()
         ))));
 

File: nifi-nar-bundles/nifi-extension-utils/nifi-record-utils/nifi-avro-record-utils/src/main/java/org/apache/nifi/schema/access/SchemaAccessUtils.java
Patch:
@@ -88,7 +88,7 @@ public class SchemaAccessUtils {
                     "If the chosen Schema Registry does not support branching, this value will be ignored.")
             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)
             .expressionLanguageSupported(ExpressionLanguageScope.FLOWFILE_ATTRIBUTES)
-            .dependsOn(SCHEMA_ACCESS_STRATEGY, HWX_SCHEMA_REF_ATTRIBUTES, HWX_CONTENT_ENCODED_SCHEMA)
+            .dependsOn(SCHEMA_ACCESS_STRATEGY, SCHEMA_NAME_PROPERTY)
             .required(false)
             .build();
 
@@ -99,7 +99,7 @@ public class SchemaAccessUtils {
                     "If not specified then the latest version of the schema will be retrieved.")
             .addValidator(StandardValidators.POSITIVE_INTEGER_VALIDATOR)
             .expressionLanguageSupported(ExpressionLanguageScope.FLOWFILE_ATTRIBUTES)
-            .dependsOn(SCHEMA_ACCESS_STRATEGY, HWX_SCHEMA_REF_ATTRIBUTES, HWX_CONTENT_ENCODED_SCHEMA)
+            .dependsOn(SCHEMA_ACCESS_STRATEGY, SCHEMA_NAME_PROPERTY)
             .required(false)
             .build();
 

File: nifi-nar-bundles/nifi-spark-bundle/nifi-livy-controller-service/src/main/java/org/apache/nifi/controller/livy/LivySessionController.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.nifi.controller.livy;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import java.io.BufferedReader;
 import java.io.FileInputStream;
 import java.io.IOException;
@@ -78,7 +79,6 @@
 import org.apache.nifi.processor.util.StandardValidators;
 import org.apache.nifi.security.util.ClientAuth;
 import org.apache.nifi.ssl.SSLContextService;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.codehaus.jettison.json.JSONException;
 import org.codehaus.jettison.json.JSONObject;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/state/server/TestZooKeeperStateServer.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.controller.state.server.zookeeper;
+package org.apache.nifi.controller.state.server;
 
 import org.apache.curator.retry.RetryOneTime;
 import org.apache.curator.test.InstanceSpec;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/NiFiWebApiSecurityConfiguration.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.nifi.web;
 
+import java.util.Arrays;
 import org.apache.nifi.util.NiFiProperties;
 import org.apache.nifi.web.security.anonymous.NiFiAnonymousAuthenticationFilter;
 import org.apache.nifi.web.security.anonymous.NiFiAnonymousAuthenticationProvider;
@@ -48,8 +49,6 @@
 import org.springframework.web.cors.CorsConfigurationSource;
 import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
 
-import java.util.Arrays;
-
 /**
  * NiFi Web Api Spring security. Applies the various NiFiAuthenticationFilter servlet filters which will extract authentication
  * credentials from API requests.
@@ -92,7 +91,7 @@ public void configure(WebSecurity webSecurity) throws Exception {
         webSecurity
                 .ignoring()
                     .antMatchers("/access", "/access/config", "/access/token", "/access/kerberos",
-                            "/access/oidc/exchange", "/access/oidc/callback", "/access/oidc/request",
+                            "/access/oidc/exchange", "/access/oidc/callback", "/access/oidc/logoutCallback", "/access/oidc/request",
                             "/access/knox/callback", "/access/knox/request");
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/groups/StandardProcessGroup.java
Patch:
@@ -959,7 +959,7 @@ private void updateControllerServiceReferences(final ComponentNode component) {
             final Class<? extends ControllerService> serviceClass = propertyDescriptor.getControllerServiceDefinition();
 
             if (serviceClass != null) {
-                final boolean validReference = isValidServiceReference(serviceId, serviceClass);
+                final boolean validReference = isValidServiceReference(serviceId, serviceClass, component);
                 final ControllerServiceNode serviceNode = controllerServiceProvider.getControllerServiceNode(serviceId);
                 if (serviceNode != null) {
                     if (validReference) {
@@ -972,8 +972,8 @@ private void updateControllerServiceReferences(final ComponentNode component) {
         }
     }
 
-    private boolean isValidServiceReference(final String serviceId, final Class<? extends ControllerService> serviceClass) {
-        final Set<String> validServiceIds = controllerServiceProvider.getControllerServiceIdentifiers(serviceClass, getIdentifier());
+    private boolean isValidServiceReference(final String serviceId, final Class<? extends ControllerService> serviceClass, final ComponentNode component) {
+        final Set<String> validServiceIds = controllerServiceProvider.getControllerServiceIdentifiers(serviceClass, component.getProcessGroupIdentifier());
         return validServiceIds.contains(serviceId);
     }
 

File: nifi-mock/src/main/java/org/apache/nifi/util/MockControllerServiceInitializationContext.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.nifi.util;
 
-import java.io.File;
 import org.apache.nifi.components.state.StateManager;
 import org.apache.nifi.controller.ControllerService;
 import org.apache.nifi.controller.ControllerServiceInitializationContext;
@@ -26,6 +25,8 @@
 import org.apache.nifi.logging.ComponentLog;
 import org.apache.nifi.state.MockStateManager;
 
+import java.io.File;
+
 public class MockControllerServiceInitializationContext extends MockControllerServiceLookup implements ControllerServiceInitializationContext, ControllerServiceLookup, NodeTypeProvider {
 
     private final String identifier;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-nar-utils/src/main/java/org/apache/nifi/mock/MockNodeTypeProvider.java
Patch:
@@ -36,5 +36,4 @@ public boolean isClustered() {
     public boolean isPrimary() {
         return false;
     }
-
 }

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-processors/src/main/java/org/apache/nifi/processors/elasticsearch/PutElasticsearchHttp.java
Patch:
@@ -357,6 +357,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
                                                     new Object[]{flowFile, errorReason});
                                         }
                                         flowFile = session.penalize(flowFile);
+                                        flowFile = session.putAttribute(flowFile, "reason", errorReason);
                                         session.transfer(flowFile, REL_FAILURE);
 
                                     } else {

File: nifi-maven-archetypes/nifi-processor-bundle-archetype/src/main/resources/archetype-resources/nifi-__artifactBaseName__-processors/src/main/java/MyProcessor.java
Patch:
@@ -66,11 +66,11 @@ public class MyProcessor extends AbstractProcessor {
 
     @Override
     protected void init(final ProcessorInitializationContext context) {
-        final List<PropertyDescriptor> descriptors = new ArrayList<PropertyDescriptor>();
+        final List<PropertyDescriptor> descriptors = new ArrayList<>();
         descriptors.add(MY_PROPERTY);
         this.descriptors = Collections.unmodifiableList(descriptors);
 
-        final Set<Relationship> relationships = new HashSet<Relationship>();
+        final Set<Relationship> relationships = new HashSet<>();
         relationships.add(MY_RELATIONSHIP);
         this.relationships = Collections.unmodifiableSet(relationships);
     }

File: nifi-nar-bundles/nifi-kudu-bundle/nifi-kudu-controller-service/src/main/java/org/apache/nifi/controller/kudu/KuduLookupService.java
Patch:
@@ -333,6 +333,9 @@ private RecordSchema kuduSchemaToNiFiSchema(Schema kuduTableSchema, List<String>
                 case FLOAT:
                     fields.add(new RecordField(cs.getName(), RecordFieldType.FLOAT.getDataType()));
                     break;
+                case DATE:
+                    fields.add(new RecordField(cs.getName(), RecordFieldType.DATE.getDataType()));
+                    break;
             }
         }
         return new SimpleRecordSchema(fields);

File: nifi-commons/nifi-schema-utils/src/test/java/org/apache/nifi/repository/schema/TestSchemaRecordReader.java
Patch:
@@ -63,7 +63,7 @@ public void testReadExactlyOnceFields() throws IOException {
         })));
         final RecordSchema schema = new RecordSchema(fields);
 
-        final SchemaRecordReader reader = SchemaRecordReader.fromSchema(schema);
+        final SchemaRecordReader reader = SchemaRecordReader.fromSchema(schema, new NoOpFieldCache());
 
         final byte[] buffer;
         try (final ByteArrayOutputStream baos = new ByteArrayOutputStream();
@@ -167,7 +167,7 @@ public void testReadZeroOrOneFields() throws IOException {
 
         final RecordSchema schema = new RecordSchema(fields);
 
-        final SchemaRecordReader reader = SchemaRecordReader.fromSchema(schema);
+        final SchemaRecordReader reader = SchemaRecordReader.fromSchema(schema, new NoOpFieldCache());
 
         // for each field, make the first one missing and the second one present.
         final byte[] buffer;

File: nifi-commons/nifi-schema-utils/src/test/java/org/apache/nifi/repository/schema/TestSchemaRecordReaderWriter.java
Patch:
@@ -142,7 +142,7 @@ public void testRoundTrip() throws IOException {
             try (final InputStream in = new ByteArrayInputStream(baos.toByteArray())) {
                 // Read the Schema from the stream and create a Record Reader for reading records, based on this schema
                 final RecordSchema readSchema = RecordSchema.readFrom(in);
-                final SchemaRecordReader reader = SchemaRecordReader.fromSchema(readSchema);
+                final SchemaRecordReader reader = SchemaRecordReader.fromSchema(readSchema, new NoOpFieldCache());
 
                 // Read two records and verify the values.
                 for (int i=0; i < 2; i++) {
@@ -216,7 +216,7 @@ public void testUTFLargerThan64k() throws IOException {
             try (final InputStream in = new ByteArrayInputStream(baos.toByteArray())) {
                 // Read the Schema from the stream and create a Record Reader for reading records, based on this schema
                 final RecordSchema readSchema = RecordSchema.readFrom(in);
-                final SchemaRecordReader reader = SchemaRecordReader.fromSchema(readSchema);
+                final SchemaRecordReader reader = SchemaRecordReader.fromSchema(readSchema, new NoOpFieldCache());
 
                 // Read the records and verify the values.
                 for (int i=0; i < 2; i++) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/repository/SchemaRepositoryRecordSerdeTest.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.nifi.controller.queue.FlowFileQueue;
 import org.apache.nifi.controller.repository.claim.StandardResourceClaimManager;
 import org.apache.nifi.controller.repository.schema.RepositoryRecordSchema;
+import org.apache.nifi.repository.schema.NoOpFieldCache;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -49,7 +50,7 @@ public class SchemaRepositoryRecordSerdeTest {
     @Before
     public void setup() {
         resourceClaimManager = new StandardResourceClaimManager();
-        schemaRepositoryRecordSerde = new SchemaRepositoryRecordSerde(resourceClaimManager);
+        schemaRepositoryRecordSerde = new SchemaRepositoryRecordSerde(resourceClaimManager, new NoOpFieldCache());
         flowFileQueue = createMockQueue(TEST_QUEUE_IDENTIFIER);
         byteArrayOutputStream = new ByteArrayOutputStream();
         dataOutputStream = new DataOutputStream(byteArrayOutputStream);

File: nifi-nar-bundles/nifi-provenance-repository-bundle/nifi-persistent-provenance-repository/src/main/java/org/apache/nifi/provenance/ByteArraySchemaRecordReader.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.nifi.provenance.schema.EventRecord;
 import org.apache.nifi.provenance.serialization.CompressableRecordReader;
 import org.apache.nifi.provenance.toc.TocReader;
+import org.apache.nifi.repository.schema.NoOpFieldCache;
 import org.apache.nifi.repository.schema.Record;
 import org.apache.nifi.repository.schema.RecordSchema;
 import org.apache.nifi.repository.schema.SchemaRecordReader;
@@ -62,7 +63,7 @@ protected void readHeader(final DataInputStream in, final int serializationVersi
             schema = RecordSchema.readFrom(bais);
         }
 
-        recordReader = SchemaRecordReader.fromSchema(schema);
+        recordReader = SchemaRecordReader.fromSchema(schema, new NoOpFieldCache());
     }
 
     @Override

File: nifi-nar-bundles/nifi-provenance-repository-bundle/nifi-persistent-provenance-repository/src/main/java/org/apache/nifi/provenance/EventIdFirstSchemaRecordReader.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.nifi.provenance.schema.LookupTableEventRecord;
 import org.apache.nifi.provenance.serialization.CompressableRecordReader;
 import org.apache.nifi.provenance.toc.TocReader;
+import org.apache.nifi.repository.schema.NoOpFieldCache;
 import org.apache.nifi.repository.schema.Record;
 import org.apache.nifi.repository.schema.RecordSchema;
 import org.apache.nifi.repository.schema.SchemaRecordReader;
@@ -100,7 +101,7 @@ protected synchronized void readHeader(final DataInputStream in, final int seria
             schema = RecordSchema.readFrom(bais);
         }
 
-        recordReader = SchemaRecordReader.fromSchema(schema);
+        recordReader = SchemaRecordReader.fromSchema(schema, new NoOpFieldCache());
 
         final int headerSchemaLength = in.readInt();
         final byte[] headerSchemaBuffer = new byte[headerSchemaLength];
@@ -111,7 +112,7 @@ protected synchronized void readHeader(final DataInputStream in, final int seria
             headerSchema = RecordSchema.readFrom(bais);
         }
 
-        final SchemaRecordReader headerReader = SchemaRecordReader.fromSchema(headerSchema);
+        final SchemaRecordReader headerReader = SchemaRecordReader.fromSchema(headerSchema, new NoOpFieldCache());
         final Record headerRecord = headerReader.readRecord(in);
         componentIds = (List<String>) headerRecord.getFieldValue(EventIdFirstHeaderSchema.FieldNames.COMPONENT_IDS);
         componentTypes = (List<String>) headerRecord.getFieldValue(EventIdFirstHeaderSchema.FieldNames.COMPONENT_TYPES);

File: nifi-commons/nifi-site-to-site-client/src/test/java/org/apache/nifi/remote/client/http/TestHttpClient.java
Patch:
@@ -453,7 +453,7 @@ public static void setup() throws Exception {
         final ServletHandler wrongPathServletHandler = new ServletHandler();
         wrongPathContextHandler.insertHandler(wrongPathServletHandler);
 
-        final SslContextFactory sslContextFactory = new SslContextFactory();
+        final SslContextFactory sslContextFactory = new SslContextFactory.Server();
         sslContextFactory.setKeyStorePath("src/test/resources/certs/keystore.jks");
         sslContextFactory.setKeyStorePassword("passwordpassword");
         sslContextFactory.setKeyStoreType("JKS");

File: nifi-nar-bundles/nifi-prometheus-bundle/nifi-prometheus-reporting-task/src/main/java/org/apache/nifi/reporting/prometheus/PrometheusServer.java
Patch:
@@ -113,7 +113,7 @@ public PrometheusServer(int addr, SSLContextService sslContextService, Component
     }
 
     private SslContextFactory createSslFactory(final SSLContextService sslService, boolean needClientAuth, boolean wantClientAuth) {
-        SslContextFactory sslFactory = new SslContextFactory();
+        SslContextFactory sslFactory = new SslContextFactory.Server();
 
         sslFactory.setNeedClientAuth(needClientAuth);
         sslFactory.setWantClientAuth(wantClientAuth);

File: nifi-nar-bundles/nifi-websocket-bundle/nifi-websocket-services-jetty/src/main/java/org/apache/nifi/websocket/jetty/AbstractJettyWebSocketService.java
Patch:
@@ -67,7 +67,7 @@ static List<PropertyDescriptor> getAbstractPropertyDescriptors() {
 
 
     protected SslContextFactory createSslFactory(final SSLContextService sslService, final boolean needClientAuth, final boolean wantClientAuth, final String endpointIdentificationAlgorithm) {
-        final SslContextFactory sslFactory = new SslContextFactory();
+        final SslContextFactory sslFactory = new SslContextFactory.Server();
 
         sslFactory.setNeedClientAuth(needClientAuth);
         sslFactory.setWantClientAuth(wantClientAuth);

File: nifi-nar-bundles/nifi-websocket-bundle/nifi-websocket-services-jetty/src/test/java/org/apache/nifi/websocket/example/WebSocketClientExample.java
Patch:
@@ -46,7 +46,7 @@ public void test() {
         String destUri = "wss://localhost:50010/test";
 
         final CountDownLatch replyLatch = new CountDownLatch(1);
-        final SslContextFactory sslContextFactory = new SslContextFactory();
+        final SslContextFactory sslContextFactory = new SslContextFactory.Client();
         sslContextFactory.setKeyStorePath("src/test/resources/certs/keystore.jks");
         sslContextFactory.setKeyStorePassword("passwordpassword");
         sslContextFactory.setKeyStoreType("JKS");

File: nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/util/CertificateUtils.java
Patch:
@@ -50,6 +50,7 @@
 import org.bouncycastle.asn1.ASN1Encodable;
 import org.bouncycastle.asn1.ASN1ObjectIdentifier;
 import org.bouncycastle.asn1.ASN1Set;
+import org.bouncycastle.asn1.DLSequence;
 import org.bouncycastle.asn1.DERSequence;
 import org.bouncycastle.asn1.pkcs.Attribute;
 import org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers;
@@ -598,7 +599,7 @@ public static Extensions getExtensionsFromCSR(JcaPKCS10CertificationRequest csr)
                 ASN1Encodable extension = attValue.getObjectAt(0);
                 if (extension instanceof Extensions) {
                     return (Extensions) extension;
-                } else if (extension instanceof DERSequence) {
+                } else if (extension instanceof DERSequence || extension instanceof DLSequence) {
                     return Extensions.getInstance(extension);
                 }
             }

File: nifi-nar-bundles/nifi-hive-bundle/nifi-hive3-processors/src/test/java/org/apache/nifi/processors/hive/TestPutHive3Streaming.java
Patch:
@@ -1142,7 +1142,7 @@ private MockPutHive3Streaming(UserGroupInformation ugi) {
         }
 
         @Override
-        StreamingConnection makeStreamingConnection(HiveOptions options, RecordReader reader) throws StreamingException {
+        StreamingConnection makeStreamingConnection(HiveOptions options, RecordReader reader, int recordsPerTransaction) throws StreamingException {
 
             // Test here to ensure the 'hive.metastore.uris' property matches the options.getMetastoreUri() value (if it is set)
             String userDefinedMetastoreURI = options.getMetaStoreURI();
@@ -1154,7 +1154,7 @@ StreamingConnection makeStreamingConnection(HiveOptions options, RecordReader re
                 throw new StubConnectionError("Unit Test - Connection Error");
             }
 
-            HiveRecordWriter hiveRecordWriter = new HiveRecordWriter(reader, getLogger());
+            HiveRecordWriter hiveRecordWriter = new HiveRecordWriter(reader, getLogger(), 0);
             if (generatePermissionsFailure) {
                 throw new StreamingException("Permission denied");
             }

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestExecuteStreamCommand.java
Patch:
@@ -274,7 +274,7 @@ public void testLoggingToStdErr() throws IOException {
         List<MockFlowFile> flowFiles = controller.getFlowFilesForRelationship(ExecuteStreamCommand.OUTPUT_STREAM_RELATIONSHIP);
         MockFlowFile flowFile = flowFiles.get(0);
         assertEquals(0, flowFile.getSize());
-        assertEquals("fffffffffffffffffffffffffffffff", flowFile.getAttribute("execution.error").substring(0, 31));
+        assertTrue(flowFile.getAttribute("execution.error").contains("fffffffffffffffffffffffffffffff"));
     }
 
     @Test
@@ -306,7 +306,7 @@ public void testLoggingToStdErrDynamicProperties() throws IOException {
         List<MockFlowFile> flowFiles = controller.getFlowFilesForRelationship(ExecuteStreamCommand.OUTPUT_STREAM_RELATIONSHIP);
         MockFlowFile flowFile = flowFiles.get(0);
         assertEquals(0, flowFile.getSize());
-        assertEquals("fffffffffffffffffffffffffffffff", flowFile.getAttribute("execution.error").substring(0, 31));
+        assertTrue(flowFile.getAttribute("execution.error").contains("fffffffffffffffffffffffffffffff"));
     }
 
     @Test

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/UpdateCounter.java
Patch:
@@ -48,7 +48,7 @@ public class UpdateCounter extends AbstractProcessor {
     static final PropertyDescriptor COUNTER_NAME = new PropertyDescriptor.Builder()
             .name("counter-name")
             .displayName("Counter Name")
-            .description("The name of the counter you want to set the value off - supports expression language like ${counterName}")
+            .description("The name of the counter you want to set the value of - supports expression language like ${counterName}")
             .required(true)
             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)
             .addValidator(StandardValidators.ATTRIBUTE_EXPRESSION_LANGUAGE_VALIDATOR)

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/StandardHttpResponseMapper.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.nifi.cluster.coordination.http.endpoints.ControllerStatusEndpointMerger;
 import org.apache.nifi.cluster.coordination.http.endpoints.CountersEndpointMerger;
 import org.apache.nifi.cluster.coordination.http.endpoints.CurrentUserEndpointMerger;
+import org.apache.nifi.cluster.coordination.http.endpoints.DropAllFlowFilesRequestEndpointMerger;
 import org.apache.nifi.cluster.coordination.http.endpoints.DropRequestEndpointMerger;
 import org.apache.nifi.cluster.coordination.http.endpoints.FlowConfigurationEndpointMerger;
 import org.apache.nifi.cluster.coordination.http.endpoints.FlowMerger;
@@ -135,6 +136,7 @@ public StandardHttpResponseMapper(final NiFiProperties nifiProperties) {
         endpointMergers.add(new ReportingTaskEndpointMerger());
         endpointMergers.add(new ReportingTasksEndpointMerger());
         endpointMergers.add(new DropRequestEndpointMerger());
+        endpointMergers.add(new DropAllFlowFilesRequestEndpointMerger());
         endpointMergers.add(new ListFlowFilesEndpointMerger());
         endpointMergers.add(new ComponentStateEndpointMerger());
         endpointMergers.add(new BulletinBoardEndpointMerger());

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/command/CommandOption.java
Patch:
@@ -24,6 +24,8 @@
 public enum CommandOption {
 
     // General
+    CONNECTION_TIMEOUT("cto", "connectionTimeout", "Timeout parameter for creating a connection to NiFi/Registry, specified in milliseconds", true),
+    READ_TIMEOUT("rto", "readTimeout", "Timeout parameter for reading from NiFi/Registry, specified in milliseconds", true),
     URL("u", "baseUrl", "The URL to execute the command against", true),
     INPUT_SOURCE("i", "input", "A local file to read as input contents, or a public URL to fetch", true, true),
     OUTPUT_FILE("o", "outputFile", "A file to write output to, must contain full path and filename", true, true),

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/command/registry/NiFiRegistryCommandGroup.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.nifi.toolkit.cli.impl.command.registry.bucket.CreateBucket;
 import org.apache.nifi.toolkit.cli.impl.command.registry.bucket.DeleteBucket;
 import org.apache.nifi.toolkit.cli.impl.command.registry.bucket.ListBuckets;
+import org.apache.nifi.toolkit.cli.impl.command.registry.bucket.UpdateBucketPolicy;
 import org.apache.nifi.toolkit.cli.impl.command.registry.extension.DownloadBundle;
 import org.apache.nifi.toolkit.cli.impl.command.registry.extension.GetBundleChecksum;
 import org.apache.nifi.toolkit.cli.impl.command.registry.extension.ListBundleArtifacts;
@@ -96,6 +97,7 @@ protected List<Command> createCommands() {
         commandList.add(new UpdateUserGroup());
         commandList.add(new GetAccessPolicy());
         commandList.add(new CreateOrUpdateAccessPolicy());
+        commandList.add(new UpdateBucketPolicy());
         return new ArrayList<>(commandList);
     }
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/FlowController.java
Patch:
@@ -1438,7 +1438,7 @@ public void synchronize(final FlowSynchronizer synchronizer, final DataFlow data
             }
 
             flowSynchronized.set(true);
-            LOG.info("Successfully synchronized controller with proposed flow");
+            LOG.info("Successfully synchronized controller with proposed flow. Flow contains the following number of components: {}", flowManager.getComponentCounts());
         } finally {
             writeLock.unlock("synchronize");
         }

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/client/nifi/ConnectionClient.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.nifi.web.api.entity.ListingRequestEntity;
 
 import java.io.IOException;
+import java.io.InputStream;
 
 public interface ConnectionClient {
     ConnectionEntity getConnection(String id) throws NiFiClientException, IOException;
@@ -49,4 +50,6 @@ public interface ConnectionClient {
     FlowFileEntity getFlowFile(String connectionId, String flowFileUuid) throws NiFiClientException, IOException;
 
     FlowFileEntity getFlowFile(String connectionId, String flowFileUuid, String nodeId) throws NiFiClientException, IOException;
+
+    InputStream getFlowFileContent(String connectionId, String flowFileUuid, String nodeId) throws NiFiClientException, IOException;
 }

File: nifi-commons/nifi-utils/src/main/java/org/apache/nifi/processor/util/StandardValidators.java
Patch:
@@ -414,6 +414,8 @@ public ValidationResult validate(final String subject, final String input, final
 
     public static final Validator REGULAR_EXPRESSION_VALIDATOR = createRegexValidator(0, Integer.MAX_VALUE, false);
 
+    public static final Validator REGULAR_EXPRESSION_WITH_EL_VALIDATOR = createRegexValidator(0, Integer.MAX_VALUE, true);
+
     public static final Validator ATTRIBUTE_EXPRESSION_LANGUAGE_VALIDATOR = new Validator() {
         @Override
         public ValidationResult validate(final String subject, final String input, final ValidationContext context) {

File: nifi-nar-bundles/nifi-amqp-bundle/nifi-amqp-processors/src/test/java/org/apache/nifi/amqp/processors/AMQPPublisherTest.java
Patch:
@@ -43,7 +43,7 @@ public void failOnNullConnection() {
         new AMQPPublisher(null, null);
     }
 
-    @Test(expected = IllegalStateException.class)
+    @Test(expected = AMQPRollbackException.class)
     public void failPublishIfChannelClosed() throws Exception {
         Connection conn = new TestConnection(null, null);
         try (AMQPPublisher sender = new AMQPPublisher(conn, mock(ComponentLog.class))) {
@@ -52,7 +52,7 @@ public void failPublishIfChannelClosed() throws Exception {
         }
     }
 
-    @Test(expected = IllegalStateException.class)
+    @Test(expected = AMQPException.class)
     public void failPublishIfChannelFails() throws Exception {
         TestConnection conn = new TestConnection(null, null);
         try (AMQPPublisher sender = new AMQPPublisher(conn, mock(ComponentLog.class))) {

File: nifi-nar-bundles/nifi-amqp-bundle/nifi-amqp-processors/src/test/java/org/apache/nifi/amqp/processors/PublishAMQPTest.java
Patch:
@@ -27,6 +27,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.ExecutorService;
 
 import org.apache.nifi.processor.ProcessContext;
 import org.apache.nifi.util.MockFlowFile;
@@ -135,7 +136,7 @@ public LocalPublishAMQP() {
         }
 
         @Override
-        protected Connection createConnection(ProcessContext context) {
+        protected Connection createConnection(ProcessContext context, ExecutorService executor) {
             return connection;
         }
 

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/test/java/org/apache/nifi/processors/aws/s3/TestPutS3Object.java
Patch:
@@ -209,7 +209,7 @@ private void prepareTest(String filename) {
     public void testGetPropertyDescriptors() {
         PutS3Object processor = new PutS3Object();
         List<PropertyDescriptor> pd = processor.getSupportedPropertyDescriptors();
-        assertEquals("size should be eq", 36, pd.size());
+        assertEquals("size should be eq", 37, pd.size());
         assertTrue(pd.contains(PutS3Object.ACCESS_KEY));
         assertTrue(pd.contains(PutS3Object.AWS_CREDENTIALS_PROVIDER_SERVICE));
         assertTrue(pd.contains(PutS3Object.BUCKET));
@@ -242,6 +242,7 @@ public void testGetPropertyDescriptors() {
         assertTrue(pd.contains(PutS3Object.OBJECT_TAGS_PREFIX));
         assertTrue(pd.contains(PutS3Object.REMOVE_TAG_PREFIX));
         assertTrue(pd.contains(PutS3Object.CONTENT_TYPE));
+        assertTrue(pd.contains(PutS3Object.CACHE_CONTROL));
         assertTrue(pd.contains(PutS3Object.MULTIPART_THRESHOLD));
         assertTrue(pd.contains(PutS3Object.MULTIPART_PART_SIZE));
         assertTrue(pd.contains(PutS3Object.MULTIPART_S3_AGEOFF_INTERVAL));

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-stateless/src/main/java/org/apache/nifi/stateless/core/StatelessComponent.java
Patch:
@@ -19,14 +19,15 @@
 import org.apache.nifi.stateless.bootstrap.InMemoryFlowFile;
 import org.apache.nifi.processor.Relationship;
 
+import java.util.Collection;
 import java.util.List;
 import java.util.Queue;
 
 public interface StatelessComponent {
 
     void shutdown();
 
-    void enqueueAll(Queue<StatelessFlowFile> list);
+    void enqueueAll(Collection<StatelessFlowFile> list);
 
     boolean runRecursive(Queue<InMemoryFlowFile> queue);
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-stateless/src/main/java/org/apache/nifi/stateless/core/StatelessPassThroughComponent.java
Patch:
@@ -16,10 +16,11 @@
  */
 package org.apache.nifi.stateless.core;
 
-import org.apache.nifi.stateless.bootstrap.InMemoryFlowFile;
 import org.apache.nifi.logging.ComponentLog;
 import org.apache.nifi.processor.Relationship;
+import org.apache.nifi.stateless.bootstrap.InMemoryFlowFile;
 
+import java.util.Collection;
 import java.util.Collections;
 import java.util.Queue;
 import java.util.Set;
@@ -52,7 +53,7 @@ public void shutdown() {
     }
 
     @Override
-    public void enqueueAll(final Queue<StatelessFlowFile> list) {
+    public void enqueueAll(final Collection<StatelessFlowFile> list) {
         getChildren().get(RELATIONSHIP).forEach(child -> child.enqueueAll(list));
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-stateless/src/main/java/org/apache/nifi/stateless/core/StatelessRemoteInputPort.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.nifi.stateless.core;
 
 import org.apache.nifi.events.EventReporter;
-import org.apache.nifi.stateless.bootstrap.InMemoryFlowFile;
 import org.apache.nifi.logging.ComponentLog;
 import org.apache.nifi.processor.Relationship;
 import org.apache.nifi.registry.flow.VersionedRemoteGroupPort;
@@ -28,9 +27,11 @@
 import org.apache.nifi.remote.protocol.DataPacket;
 import org.apache.nifi.remote.protocol.SiteToSiteTransportProtocol;
 import org.apache.nifi.remote.util.StandardDataPacket;
+import org.apache.nifi.stateless.bootstrap.InMemoryFlowFile;
 import org.apache.nifi.util.FormatUtils;
 
 import javax.net.ssl.SSLContext;
+import java.util.Collection;
 import java.util.Collections;
 import java.util.LinkedList;
 import java.util.Queue;
@@ -94,7 +95,7 @@ public void shutdown() {
     }
 
     @Override
-    public void enqueueAll(final Queue<StatelessFlowFile> list) {
+    public void enqueueAll(final Collection<StatelessFlowFile> list) {
         inputQueue.addAll(list);
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-stateless/src/main/java/org/apache/nifi/stateless/core/StatelessRemoteOutputPort.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.nifi.stateless.core;
 
 import org.apache.nifi.events.EventReporter;
-import org.apache.nifi.stateless.bootstrap.InMemoryFlowFile;
 import org.apache.nifi.logging.ComponentLog;
 import org.apache.nifi.processor.DataUnit;
 import org.apache.nifi.processor.Relationship;
@@ -29,11 +28,13 @@
 import org.apache.nifi.remote.client.SiteToSiteClient;
 import org.apache.nifi.remote.protocol.DataPacket;
 import org.apache.nifi.remote.protocol.SiteToSiteTransportProtocol;
+import org.apache.nifi.stateless.bootstrap.InMemoryFlowFile;
 import org.apache.nifi.stream.io.StreamUtils;
 import org.apache.nifi.util.FormatUtils;
 
 import javax.net.ssl.SSLContext;
 import java.io.InputStream;
+import java.util.Collection;
 import java.util.Collections;
 import java.util.LinkedList;
 import java.util.Map;
@@ -105,7 +106,7 @@ public void shutdown() {
     }
 
     @Override
-    public void enqueueAll(final Queue<StatelessFlowFile> list) {
+    public void enqueueAll(final Collection<StatelessFlowFile> list) {
         throw new UnsupportedOperationException("Cannot enqueue FlowFiles for a Remote Output Port");
     }
 

File: nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/processors/AbstractJMSProcessor.java
Patch:
@@ -109,6 +109,7 @@ public abstract class AbstractJMSProcessor<T extends JMSWorker> extends Abstract
             .build();
     static final PropertyDescriptor SESSION_CACHE_SIZE = new PropertyDescriptor.Builder()
             .name("Session Cache size")
+            .displayName("Session Cache Size")
             .description("This property is deprecated and no longer has any effect on the Processor. It will be removed in a later version.")
             .required(false)
             .defaultValue("1")

File: nifi-api/src/main/java/org/apache/nifi/flowfile/FlowFile.java
Patch:
@@ -108,6 +108,7 @@ public interface FlowFile extends Comparable<FlowFile> {
      */
     Map<String, String> getAttributes();
 
+    // All classes defined in an interface are public static, but keeping the definition to be explicit
     public static class KeyValidator {
 
         public static String validateKey(final String key) {

File: nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/util/EncryptionMethod.java
Patch:
@@ -26,6 +26,7 @@
  */
 public enum EncryptionMethod {
 
+    // TODO: Reorder so keyed ciphers are first moving forward (default PD value, sorting, etc.)
     MD5_128AES("PBEWITHMD5AND128BITAES-CBC-OPENSSL", "BC", false, false),
     MD5_192AES("PBEWITHMD5AND192BITAES-CBC-OPENSSL", "BC", true, false),
     MD5_256AES("PBEWITHMD5AND256BITAES-CBC-OPENSSL", "BC", true, false),

File: nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/util/crypto/AESKeyedCipherProvider.java
Patch:
@@ -16,13 +16,11 @@
  */
 package org.apache.nifi.security.util.crypto;
 
-import java.io.UnsupportedEncodingException;
 import java.security.InvalidAlgorithmParameterException;
 import java.security.InvalidKeyException;
 import java.security.NoSuchAlgorithmException;
 import java.security.NoSuchProviderException;
 import java.security.SecureRandom;
-import java.security.spec.InvalidKeySpecException;
 import java.util.Arrays;
 import java.util.List;
 import javax.crypto.Cipher;
@@ -83,7 +81,7 @@ public Cipher getCipher(EncryptionMethod encryptionMethod, SecretKey key, boolea
 
     protected Cipher getInitializedCipher(EncryptionMethod encryptionMethod, SecretKey key, byte[] iv,
                                           boolean encryptMode) throws NoSuchAlgorithmException, NoSuchProviderException,
-            InvalidKeySpecException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, UnsupportedEncodingException {
+            NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException {
         if (encryptionMethod == null) {
             throw new IllegalArgumentException("The encryption method must be specified");
         }

File: nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/util/crypto/CipherProviderFactory.java
Patch:
@@ -36,6 +36,7 @@ public class CipherProviderFactory {
         registeredCipherProviders.put(KeyDerivationFunction.PBKDF2, PBKDF2CipherProvider.class);
         registeredCipherProviders.put(KeyDerivationFunction.BCRYPT, BcryptCipherProvider.class);
         registeredCipherProviders.put(KeyDerivationFunction.SCRYPT, ScryptCipherProvider.class);
+        registeredCipherProviders.put(KeyDerivationFunction.ARGON2, Argon2CipherProvider.class);
         registeredCipherProviders.put(KeyDerivationFunction.NONE, AESKeyedCipherProvider.class);
     }
 
@@ -47,11 +48,11 @@ public static CipherProvider getCipherProvider(KeyDerivationFunction kdf) {
             try {
                 return clazz.newInstance();
             } catch (Exception e) {
-               logger.error("Error instantiating new {} with default parameters for {}", clazz.getName(), kdf.getName());
+               logger.error("Error instantiating new {} with default parameters for {}", clazz.getName(), kdf.getKdfName());
                 throw new ProcessException("Error instantiating cipher provider");
             }
         }
 
-        throw new IllegalArgumentException("No cipher provider registered for " + kdf.getName());
+        throw new IllegalArgumentException("No cipher provider registered for " + kdf.getKdfName());
     }
 }

File: nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/util/crypto/RandomIVPBECipherProvider.java
Patch:
@@ -26,9 +26,9 @@
 import org.slf4j.Logger;
 
 public abstract class RandomIVPBECipherProvider implements PBECipherProvider {
-    static final byte[] SALT_DELIMITER = "NiFiSALT".getBytes(StandardCharsets.UTF_8);
+    public static final byte[] SALT_DELIMITER = "NiFiSALT".getBytes(StandardCharsets.UTF_8);
     static final int MAX_SALT_LIMIT = 128;
-    static final byte[] IV_DELIMITER = "NiFiIV".getBytes(StandardCharsets.UTF_8);
+    public static final byte[] IV_DELIMITER = "NiFiIV".getBytes(StandardCharsets.UTF_8);
     // This is 16 bytes for AES but can vary for other ciphers
     static final int MAX_IV_LIMIT = 16;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/repository/FileSystemRepository.java
Patch:
@@ -85,7 +85,8 @@
 public class FileSystemRepository implements ContentRepository {
 
     public static final int SECTIONS_PER_CONTAINER = 1024;
-    public static final long MIN_CLEANUP_INTERVAL_MILLIS = 1000;
+    public static final long MIN_CLEANUP_INTERVAL_MILLIS = TimeUnit.SECONDS.toMillis(1L);
+    public static final long DEFAULT_CLEANUP_INTERVAL_MILLIS = TimeUnit.MINUTES.toMillis(1L);
     public static final String ARCHIVE_DIR_NAME = "archive";
     // 100 MB cap for the configurable NiFiProperties.MAX_APPENDABLE_CLAIM_SIZE property to prevent
     // unnecessarily large resource claim files
@@ -1707,7 +1708,7 @@ public boolean equals(final Object obj) {
      * warning will be logged and the method will return minimum value of 1000
      */
     private long determineCleanupInterval(NiFiProperties properties) {
-        long cleanupInterval = MIN_CLEANUP_INTERVAL_MILLIS;
+        long cleanupInterval = DEFAULT_CLEANUP_INTERVAL_MILLIS;
         String archiveCleanupFrequency = properties.getProperty(NiFiProperties.CONTENT_ARCHIVE_CLEANUP_FREQUENCY);
         if (archiveCleanupFrequency != null) {
             try {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/registry/flow/mapping/NiFiRegistryFlowMapper.java
Patch:
@@ -33,8 +33,6 @@
 import org.apache.nifi.controller.queue.FlowFileQueue;
 import org.apache.nifi.controller.service.ControllerServiceNode;
 import org.apache.nifi.controller.service.ControllerServiceProvider;
-import org.apache.nifi.groups.FlowFileConcurrency;
-import org.apache.nifi.groups.FlowFileOutboundPolicy;
 import org.apache.nifi.groups.ProcessGroup;
 import org.apache.nifi.groups.RemoteProcessGroup;
 import org.apache.nifi.nar.ExtensionManager;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-jetty/src/main/java/org/apache/nifi/web/server/JettyServer.java
Patch:
@@ -694,7 +694,7 @@ private static void addDenialOfServiceFilters(String path, WebAppContext webAppC
         if (maxRequestSize > 0) {
             addContentLengthFilter(path, webAppContext, maxRequestSize);
         } else {
-            logger.info("Not adding content-length filter because {} is not set in nifi.properties", NiFiProperties.WEB_MAX_CONTENT_SIZE);
+            logger.debug("Not adding content-length filter because {} is not set in nifi.properties", NiFiProperties.WEB_MAX_CONTENT_SIZE);
         }
     }
 
@@ -736,7 +736,7 @@ private static int determineMaxRequestSize(NiFiProperties props) {
                 logger.debug("Parsed max content length as {} bytes", configuredMaxRequestSize);
                 return configuredMaxRequestSize;
             } else {
-                logger.info("Can't parse valid max content length from {}", webMaxContentSize);
+                logger.debug("{} read from nifi.properties is empty", NiFiProperties.WEB_MAX_CONTENT_SIZE);
             }
         } catch (final IllegalArgumentException e) {
             logger.warn("Exception parsing property {}; disabling content length filter", NiFiProperties.WEB_MAX_CONTENT_SIZE);

File: nifi-system-tests/nifi-system-test-suite/src/test/java/org/apache/nifi/tests/system/pg/SingleFlowFileConcurrencyIT.java
Patch:
@@ -21,18 +21,15 @@
 import org.apache.nifi.groups.FlowFileOutboundPolicy;
 import org.apache.nifi.tests.system.NiFiSystemIT;
 import org.apache.nifi.toolkit.cli.impl.client.nifi.NiFiClientException;
-import org.apache.nifi.web.api.dto.FlowFileSummaryDTO;
 import org.apache.nifi.web.api.entity.ConnectionEntity;
 import org.apache.nifi.web.api.entity.FlowFileEntity;
-import org.apache.nifi.web.api.entity.ListingRequestEntity;
 import org.apache.nifi.web.api.entity.PortEntity;
 import org.apache.nifi.web.api.entity.ProcessGroupEntity;
 import org.apache.nifi.web.api.entity.ProcessorEntity;
 import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Collections;
-import java.util.List;
 import java.util.Map;
 
 import static org.junit.Assert.assertEquals;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/connectable/LocalPort.java
Patch:
@@ -20,7 +20,6 @@
 import org.apache.nifi.controller.AbstractPort;
 import org.apache.nifi.controller.ProcessScheduler;
 import org.apache.nifi.flowfile.FlowFile;
-import org.apache.nifi.groups.BatchCounts;
 import org.apache.nifi.groups.FlowFileConcurrency;
 import org.apache.nifi.groups.FlowFileGate;
 import org.apache.nifi.groups.FlowFileOutboundPolicy;

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/test/java/org/apache/nifi/xml/TestInferXmlSchema.java
Patch:
@@ -34,7 +34,6 @@
 import java.io.BufferedInputStream;
 import java.io.File;
 import java.io.FileInputStream;
-import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.Collections;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-jetty/src/main/java/org/apache/nifi/web/server/JettyServer.java
Patch:
@@ -676,7 +676,9 @@ private void addDocsServlets(WebAppContext docsContext) {
     }
 
     /**
-     * Adds configurable filters relating to preventing denial of service attacks to the given context. Currently, this implementation adds {@link org.eclipse.jetty.servlets.DoSFilter} and {@link ContentLengthFilter} filters.
+     * Adds configurable filters relating to preventing denial of service attacks to the given context.
+     * Currently, this implementation adds
+     * {@link org.eclipse.jetty.servlets.DoSFilter} and {@link ContentLengthFilter} filters.
      *
      * @param path          path spec for filters ({@code /*} by convention in this class)
      * @param webAppContext context to which filters will be added

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/util/ClusterReplicationComponentLifecycle.java
Patch:
@@ -203,7 +203,7 @@ private boolean waitForProcessorValidation(final NiFiUser user, final URI origin
             final ProcessorsRunStatusDetailsEntity runStatusDetailsEntity = getResponseEntity(clusterResponse, ProcessorsRunStatusDetailsEntity.class);
 
             if (isProcessorValidationComplete(runStatusDetailsEntity, processors)) {
-                logger.debug("All {} processors of interest now have been validated", processors.size());
+                logger.debug("All {} processors of interest now have been validated: {}", processors.size(), processorIds);
                 return true;
             }
 
@@ -219,6 +219,8 @@ private boolean isProcessorValidationComplete(final ProcessorsRunStatusDetailsEn
 
         for (final ProcessorRunStatusDetailsEntity statusDetailsEntity : runStatusDetailsEntity.getRunStatusDetails()) {
             final ProcessorRunStatusDetailsDTO runStatusDetails = statusDetailsEntity.getRunStatusDetails();
+
+            logger.debug("Processor {} now has Run Status of {}", runStatusDetails.getId(), runStatusDetails.getRunStatus());
             if (!affectedComponents.containsKey(runStatusDetails.getId())) {
                 continue;
             }

File: nifi-system-tests/nifi-system-test-suite/src/test/java/org/apache/nifi/tests/system/NiFiSystemIT.java
Patch:
@@ -151,7 +151,7 @@ protected void waitForAllNodesConnected(final int expectedNumberOfNodes, final l
                     return;
                 }
 
-                logEverySecond("Waiting for {} nodes to connect but currently on {} nodes are connected", expectedNumberOfNodes, connectedNodeCount);
+                logEverySecond("Waiting for {} nodes to connect but currently only {} nodes are connected", expectedNumberOfNodes, connectedNodeCount);
 
                 if (System.currentTimeMillis() > maxTime) {
                     throw new RuntimeException("Waited up to 60 seconds for both nodes to connect but only " + connectedNodeCount + " nodes connected");

File: nifi-commons/nifi-properties/src/test/java/org/apache/nifi/util/NiFiPropertiesTest.java
Patch:
@@ -17,8 +17,9 @@
 package org.apache.nifi.util;
 
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
@@ -269,7 +270,7 @@ public void testShouldHaveReasonableMaxContentLengthValues() {
         }});
 
         // Assert defaults match expectations:
-        assertEquals(properties.getWebMaxContentSize(), "20 MB");
+        assertNull(properties.getWebMaxContentSize());
 
         // Re-arrange with specific values:
         final String size = "size value";

File: nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/kms/FileBasedKeyProvider.java
Patch:
@@ -25,10 +25,10 @@
 public class FileBasedKeyProvider extends StaticKeyProvider {
     private static final Logger logger = LoggerFactory.getLogger(FileBasedKeyProvider.class);
 
-    private String filepath;
+    private final String filepath;
 
-    public FileBasedKeyProvider(String location, SecretKey masterKey) throws KeyManagementException {
-        super(CryptoUtils.readKeys(location, masterKey));
+    public FileBasedKeyProvider(String location, SecretKey rootKey) throws KeyManagementException {
+        super(CryptoUtils.readKeys(location, rootKey));
         this.filepath = location;
     }
 

File: nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/repository/config/RepositoryEncryptionConfiguration.java
Patch:
@@ -71,7 +71,7 @@ public String getEncryptionKeyId() {
      * Returns a map of all available encryption keys indexed by the key id if using
      * {@link StaticKeyProvider}. For
      * {@link FileBasedKeyProvider}, this method will return an
-     * empty map because the keys must be loaded using the {@code master key} to decrypt them
+     * empty map because the keys must be loaded using the {@code root key} to decrypt them
      * via {@link CryptoUtils#readKeys(String, SecretKey)}.
      *
      * @return a map of key ids & keys

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-properties-loader/src/main/java/org/apache/nifi/properties/NiFiPropertiesLoader.java
Patch:
@@ -87,7 +87,7 @@ public void setKeyHex(String keyHex) {
      */
     public static NiFiProperties loadDefaultWithKeyFromBootstrap() throws IOException {
         try {
-            String keyHex = extractKeyFromBootstrapFile();
+            String keyHex = CryptoUtils.extractKeyFromBootstrapFile();
             return NiFiPropertiesLoader.withKey(keyHex).loadDefault();
         } catch (IOException e) {
             logger.error("Encountered an exception loading the default nifi.properties file {} with the key provided in bootstrap.conf", CryptoUtils.getDefaultFilePath(), e);

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/UnpackContent.java
Patch:
@@ -309,7 +309,7 @@ public void process(final InputStream in) throws IOException {
                             }
                             final File file = new File(tarEntry.getName());
                             final Path filePath = file.toPath();
-                            final String filePathString = filePath.getParent() + "/";
+                            String filePathString = filePath.getParent() == null ? "/" : filePath.getParent() + "/";
                             final Path absPath = filePath.toAbsolutePath();
                             final String absPathString = absPath.getParent().toString() + "/";
 

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/credentials/provider/factory/strategies/AssumeRoleCredentialsStrategy.java
Patch:
@@ -114,7 +114,7 @@ public Collection<ValidationResult> validate(final ValidationContext validationC
                     .explanation("Assume role requires both arn and name to be set with External ID")
                     .build());
         }
-        
+
         // STS Endpoint should only be provided with viable Assume Role ARN and Name
         if (assumeRoleSTSEndpointIsSet && (!assumeRoleArnIsSet || !assumeRoleNameIsSet)) {
             validationFailureResults.add(new ValidationResult.Builder().input("Assume Role STS Endpoint")
@@ -162,7 +162,7 @@ public AWSCredentialsProvider getDerivedCredentialsProvider(Map<PropertyDescript
 
         AWSSecurityTokenService securityTokenService = new AWSSecurityTokenServiceClient(primaryCredentialsProvider, config);
         if (assumeRoleSTSEndpoint != null && !assumeRoleSTSEndpoint.isEmpty()) {
-        	securityTokenService.setEndpoint(assumeRoleSTSEndpoint);
+            securityTokenService.setEndpoint(assumeRoleSTSEndpoint);
         }
         builder = new STSAssumeRoleSessionCredentialsProvider
                 .Builder(assumeRoleArn, assumeRoleName)

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/test/java/org/apache/nifi/processors/aws/credentials/provider/factory/TestCredentialsProviderFactory.java
Patch:
@@ -161,7 +161,7 @@ public void testAssumeRoleExternalIdMissingArnAndName() throws Throwable {
         runner.setProperty(CredentialPropertyDescriptors.ASSUME_ROLE_EXTERNAL_ID, "BogusExternalId");
         runner.assertNotValid();
     }
-    
+
     @Test
     public void testAssumeRoleSTSEndpointMissingArnAndName() throws Throwable {
         final TestRunner runner = TestRunners.newTestRunner(MockAWSProcessor.class);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/FlowController.java
Patch:
@@ -2784,7 +2784,7 @@ public ProvenanceEventRecord replayFlowFile(final ProvenanceEventRecord event, f
 
         // Update the FlowFile Repository to indicate that we have added the FlowFile to the flow
         final StandardRepositoryRecord record = new StandardRepositoryRecord(queue);
-        record.setWorking(flowFileRecord);
+        record.setWorking(flowFileRecord, false);
         record.setDestination(queue);
         flowFileRepository.updateRepository(Collections.singleton(record));
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/repository/WriteAheadFlowFileRepository.java
Patch:
@@ -565,13 +565,12 @@ protected void updateContentClaims(Collection<RepositoryRecord> repositoryRecord
     private void updateClaimCounts(final RepositoryRecord record) {
         final ContentClaim currentClaim = record.getCurrentClaim();
         final ContentClaim originalClaim = record.getOriginalClaim();
-        final boolean claimChanged = !Objects.equals(currentClaim, originalClaim);
 
         if (record.getType() == RepositoryRecordType.DELETE || record.getType() == RepositoryRecordType.CONTENTMISSING) {
             decrementClaimCount(currentClaim);
         }
 
-        if (claimChanged) {
+        if (record.isContentModified()) {
             // records which have been updated - remove original if exists
             decrementClaimCount(originalClaim);
         }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/repository/SchemaRepositoryRecordSerdeTest.java
Patch:
@@ -253,7 +253,7 @@ private StandardRepositoryRecord createCreateFlowFileRecord(Map<String, String>
         StandardRepositoryRecord standardRepositoryRecord = new StandardRepositoryRecord(flowFileQueue);
         StandardFlowFileRecord.Builder flowFileRecordBuilder = new StandardFlowFileRecord.Builder();
         flowFileRecordBuilder.addAttributes(attributes);
-        standardRepositoryRecord.setWorking(flowFileRecordBuilder.build());
+        standardRepositoryRecord.setWorking(flowFileRecordBuilder.build(), false);
         return standardRepositoryRecord;
     }
 

File: nifi-commons/nifi-site-to-site-client/src/test/java/org/apache/nifi/remote/client/http/TestHttpClient.java
Patch:
@@ -1376,7 +1376,7 @@ public void testReceiveTimeoutAfterDataExchange() throws Exception {
 
         try (
                 SiteToSiteClient client = getDefaultBuilder()
-                        .timeout(1, TimeUnit.SECONDS)
+                        .timeout(5, TimeUnit.SECONDS)
                         .portName("output-timeout-data-ex")
                         .build()
         ) {

File: nifi-nar-bundles/nifi-extension-utils/nifi-record-utils/nifi-mock-record-utils/src/main/java/org/apache/nifi/serialization/record/ArrayListRecordWriter.java
Patch:
@@ -84,7 +84,7 @@ public void beginRecordSet() {
 
         @Override
         public WriteResult finishRecordSet() {
-            return null;
+            return WriteResult.of(records.size(), Collections.emptyMap());
         }
 
         @Override

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/AbstractComponentNode.java
Patch:
@@ -347,7 +347,8 @@ private void setProperty(final String name, final PropertyConfiguration property
         if (!propertyConfiguration.equals(oldConfiguration)) {
             if (descriptor.getControllerServiceDefinition() != null) {
                 if (oldConfiguration != null) {
-                    final ControllerServiceNode oldNode = serviceProvider.getControllerServiceNode(effectiveValue);
+                    final String oldEffectiveValue = oldConfiguration.getEffectiveValue(getParameterContext());
+                    final ControllerServiceNode oldNode = serviceProvider.getControllerServiceNode(oldEffectiveValue);
                     if (oldNode != null) {
                         oldNode.removeReference(this, descriptor);
                     }

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/command/nifi/NiFiCommandGroup.java
Patch:
@@ -61,6 +61,7 @@
 import org.apache.nifi.toolkit.cli.impl.command.nifi.pg.PGStart;
 import org.apache.nifi.toolkit.cli.impl.command.nifi.pg.PGStatus;
 import org.apache.nifi.toolkit.cli.impl.command.nifi.pg.PGStop;
+import org.apache.nifi.toolkit.cli.impl.command.nifi.pg.PGCreate;
 import org.apache.nifi.toolkit.cli.impl.command.nifi.policies.GetAccessPolicy;
 import org.apache.nifi.toolkit.cli.impl.command.nifi.policies.UpdateAccessPolicy;
 import org.apache.nifi.toolkit.cli.impl.command.nifi.registry.CreateRegistryClient;
@@ -110,6 +111,7 @@ protected List<Command> createCommands() {
         commands.add(new PGImport());
         commands.add(new PGStart());
         commands.add(new PGStop());
+        commands.add(new PGCreate());
         commands.add(new PGGetVars());
         commands.add(new PGSetVar());
         commands.add(new PGGetVersion());

File: nifi-nar-bundles/nifi-atlas-bundle/nifi-atlas-reporting-task/src/test/java/org/apache/nifi/atlas/reporting/ITReportLineageToAtlas.java
Patch:
@@ -37,7 +37,6 @@
 import org.apache.nifi.provenance.lineage.LineageEdge;
 import org.apache.nifi.provenance.lineage.LineageNode;
 import org.apache.nifi.reporting.EventAccess;
-import org.apache.nifi.reporting.InitializationException;
 import org.apache.nifi.reporting.ReportingContext;
 import org.apache.nifi.reporting.ReportingInitializationContext;
 import org.apache.nifi.state.MockStateManager;
@@ -76,8 +75,8 @@
 import static org.apache.nifi.atlas.reporting.ReportLineageToAtlas.ATLAS_PASSWORD;
 import static org.apache.nifi.atlas.reporting.ReportLineageToAtlas.ATLAS_URLS;
 import static org.apache.nifi.atlas.reporting.ReportLineageToAtlas.ATLAS_USER;
-import static org.apache.nifi.atlas.reporting.ReportLineageToAtlas.LINEAGE_STRATEGY_COMPLETE_PATH;
 import static org.apache.nifi.atlas.reporting.ReportLineageToAtlas.LINEAGE_STRATEGY;
+import static org.apache.nifi.atlas.reporting.ReportLineageToAtlas.LINEAGE_STRATEGY_COMPLETE_PATH;
 import static org.apache.nifi.atlas.reporting.SimpleProvenanceRecord.pr;
 import static org.apache.nifi.provenance.ProvenanceEventType.ATTRIBUTES_MODIFIED;
 import static org.apache.nifi.provenance.ProvenanceEventType.CREATE;
@@ -423,7 +422,7 @@ private void addLineage(ComputeLineageResult lineage) {
         }
     }
 
-    private void test(TestConfiguration tc) throws InitializationException, IOException {
+    private void test(TestConfiguration tc) throws Exception {
         final ReportLineageToAtlas reportingTask = new ReportLineageToAtlas();
         final MockComponentLog logger = new MockComponentLog("reporting-task-id", reportingTask);
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-jetty/src/main/java/org/apache/nifi/web/server/JettyServer.java
Patch:
@@ -274,7 +274,7 @@ private Handler loadInitialWars(final Set<Bundle> bundles) {
         final WebAppContext webUiContext = loadWar(webUiWar, "/nifi", frameworkClassLoader);
         webUiContext.getInitParams().put("oidc-supported", String.valueOf(props.isOidcEnabled()));
         webUiContext.getInitParams().put("knox-supported", String.valueOf(props.isKnoxSsoEnabled()));
-        webUiContext.getInitParams().put("whitelistedContextPaths", props.getWhitelistedContextPaths());
+        webUiContext.getInitParams().put("allowedContextPaths", props.getAllowedContextPaths());
         webAppContextHandlers.addHandler(webUiContext);
 
         // load the web api app
@@ -299,7 +299,7 @@ private Handler loadInitialWars(final Set<Bundle> bundles) {
 
         // load the web error app
         final WebAppContext webErrorContext = loadWar(webErrorWar, "/", frameworkClassLoader);
-        webErrorContext.getInitParams().put("whitelistedContextPaths", props.getWhitelistedContextPaths());
+        webErrorContext.getInitParams().put("allowedContextPaths", props.getAllowedContextPaths());
         webAppContextHandlers.addHandler(webErrorContext);
 
         // deploy the web apps

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-error/src/main/java/org/apache/nifi/web/filter/CatchAllFilter.java
Patch:
@@ -39,11 +39,13 @@ public class CatchAllFilter extends SanitizeContextPathFilter {
 
     @Override
     public void init(FilterConfig filterConfig) throws ServletException {
+        super.init(filterConfig);
+
         // TODO: Perform path validation (against what set of rules)?
         forwardPath = filterConfig.getInitParameter("forwardPath");
         displayPath = filterConfig.getInitParameter("displayPath");
 
-        logger.debug("CatchAllFilter  [" + displayPath + "] received provided whitelisted context paths from NiFi properties: " + getWhitelistedContextPaths());
+        logger.debug("CatchAllFilter [" + displayPath + "] received provided allowed context paths from NiFi properties: " + getAllowedContextPaths());
     }
 
     @Override

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/StandardHttpResponseMapper.java
Patch:
@@ -55,6 +55,7 @@
 import org.apache.nifi.cluster.coordination.http.endpoints.ProcessGroupsEndpointMerger;
 import org.apache.nifi.cluster.coordination.http.endpoints.ProcessorDiagnosticsEndpointMerger;
 import org.apache.nifi.cluster.coordination.http.endpoints.ProcessorEndpointMerger;
+import org.apache.nifi.cluster.coordination.http.endpoints.ProcessorRunStatusDetailsEndpointMerger;
 import org.apache.nifi.cluster.coordination.http.endpoints.ProcessorStatusEndpointMerger;
 import org.apache.nifi.cluster.coordination.http.endpoints.ProcessorTypesEndpointMerger;
 import org.apache.nifi.cluster.coordination.http.endpoints.ProcessorsEndpointMerger;
@@ -115,6 +116,7 @@ public StandardHttpResponseMapper(final NiFiProperties nifiProperties) {
         endpointMergers.add(new RemoteProcessGroupStatusEndpointMerger());
         endpointMergers.add(new ProcessorEndpointMerger());
         endpointMergers.add(new ProcessorsEndpointMerger());
+        endpointMergers.add(new ProcessorRunStatusDetailsEndpointMerger());
         endpointMergers.add(new ConnectionEndpointMerger());
         endpointMergers.add(new ConnectionsEndpointMerger());
         endpointMergers.add(new PortEndpointMerger());

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/main/java/org/apache/nifi/processors/azure/AbstractAzureBlobProcessor.java
Patch:
@@ -60,6 +60,7 @@ public abstract class AbstractAzureBlobProcessor extends AbstractProcessor {
                     AzureStorageUtils.ACCOUNT_NAME,
                     AzureStorageUtils.ACCOUNT_KEY,
                     AzureStorageUtils.PROP_SAS_TOKEN,
+                    AzureStorageUtils.ENDPOINT_SUFFIX,
                     BLOB,
                     AzureStorageUtils.PROXY_CONFIGURATION_SERVICE));
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/otp/OtpAuthenticationProvider.java
Patch:
@@ -28,7 +28,7 @@
 import org.springframework.security.core.AuthenticationException;
 
 /**
- *
+ * This provider will be used when the request is attempting to authenticate with a download or ui extension OTP/token.
  */
 public class OtpAuthenticationProvider extends NiFiAuthenticationProvider {
 

File: nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/client/PeerStatusProvider.java
Patch:
@@ -16,13 +16,12 @@
  */
 package org.apache.nifi.remote.client;
 
+import java.io.IOException;
+import java.util.Set;
 import org.apache.nifi.remote.PeerDescription;
 import org.apache.nifi.remote.PeerStatus;
 import org.apache.nifi.remote.protocol.SiteToSiteTransportProtocol;
 
-import java.io.IOException;
-import java.util.Set;
-
 /**
  * This interface defines methods used from {@link PeerSelector}.
  */
@@ -52,6 +51,7 @@ public interface PeerStatusProvider {
      * Fetch peer statuses from a remote NiFi cluster.
      * Implementation of this method should fetch peer statuses from the node
      * represented by the passed PeerDescription using its transport protocol.
+     *
      * @param peerDescription a bootstrap node or one of query-able nodes lastly fetched successfully
      * @return Remote peer statuses
      * @throws IOException thrown when it fails to fetch peer statuses of the remote cluster from the specified peer

File: nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/protocol/CommunicationsSession.java
Patch:
@@ -19,9 +19,10 @@
 import java.io.Closeable;
 import java.io.IOException;
 
+// TODO: Possibly refactor shared interface between this class and SiteToSiteRestApiClient
 public interface CommunicationsSession extends Closeable {
 
-    public static final byte[] MAGIC_BYTES = {(byte) 'N', (byte) 'i', (byte) 'F', (byte) 'i'};
+    byte[] MAGIC_BYTES = {(byte) 'N', (byte) 'i', (byte) 'F', (byte) 'i'};
 
     CommunicationsInput getInput();
 

File: nifi-system-tests/nifi-system-test-suite/src/test/java/org/apache/nifi/tests/system/NiFiSystemIT.java
Patch:
@@ -40,7 +40,6 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.TimeUnit;
-import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.BooleanSupplier;
 import java.util.regex.Matcher;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/FlowFromDOMFactory.java
Patch:
@@ -183,6 +183,8 @@ public static ProcessGroupDTO getProcessGroup(final String parentId, final Eleme
         dto.setName(getString(element, "name"));
         dto.setPosition(getPosition(DomUtils.getChild(element, "position")));
         dto.setComments(getString(element, "comment"));
+        dto.setFlowfileConcurrency(getString(element, "flowfileConcurrency"));
+        dto.setFlowfileOutboundPolicy(getString(element, "flowfileOutboundPolicy"));
 
         final Map<String, String> variables = new HashMap<>();
         final NodeList variableList = DomUtils.getChildNodesByTagName(element, "variable");

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/StandardFlowSerializer.java
Patch:
@@ -234,6 +234,8 @@ private void addProcessGroup(final Element parentElement, final ProcessGroup gro
         addTextElement(element, "name", group.getName());
         addPosition(element, group.getPosition());
         addTextElement(element, "comment", group.getComments());
+        addTextElement(element, "flowfileConcurrency", group.getFlowFileConcurrency().name());
+        addTextElement(element, "flowfileOutboundPolicy", group.getFlowFileOutboundPolicy().name());
 
         final VersionControlInformation versionControlInfo = group.getVersionControlInformation();
         if (versionControlInfo != null) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/fingerprint/FingerprintFactory.java
Patch:
@@ -350,6 +350,8 @@ StringBuilder addProcessGroupFingerprint(final StringBuilder builder, final Elem
         appendFirstValue(builder, DomUtils.getChildNodesByTagName(processGroupElem, "id"));
         appendFirstValue(builder, DomUtils.getChildNodesByTagName(processGroupElem, "versionedComponentId"));
         appendFirstValue(builder, DomUtils.getChildNodesByTagName(processGroupElem, "parameterContextId"));
+        appendFirstValue(builder, DomUtils.getChildNodesByTagName(processGroupElem, "flowfileConcurrency"));
+        appendFirstValue(builder, DomUtils.getChildNodesByTagName(processGroupElem, "flowfileOutboundPolicy"));
 
         final Element versionControlInfo = DomUtils.getChild(processGroupElem, "versionControlInformation");
         if (versionControlInfo == null) {

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/queryrecord/FlowFileTable.java
Patch:
@@ -279,6 +279,7 @@ private boolean isNumeric(final DataType dataType) {
         switch (dataType.getFieldType()) {
             case BIGINT:
             case BYTE:
+            case DECIMAL:
             case DOUBLE:
             case FLOAT:
             case INT:

File: nifi-nar-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/pubsub/ConsumeGCPubSub.java
Patch:
@@ -98,7 +98,6 @@ public void onScheduled(ProcessContext context) {
 
         pullRequest = PullRequest.newBuilder()
                 .setMaxMessages(batchSize)
-                .setReturnImmediately(false)
                 .setSubscription(getSubscriptionName(context))
                 .build();
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/FetchFTP.java
Patch:
@@ -37,7 +37,7 @@
 // Note that we do not use @SupportsBatching annotation. This processor cannot support batching because it must ensure that session commits happen before remote files are deleted.
 @InputRequirement(Requirement.INPUT_REQUIRED)
 @Tags({"ftp", "get", "retrieve", "files", "fetch", "remote", "ingest", "source", "input"})
-@CapabilityDescription("Fetches the content of a file from a remote SFTP server and overwrites the contents of an incoming FlowFile with the content of the remote file.")
+@CapabilityDescription("Fetches the content of a file from a remote FTP server and overwrites the contents of an incoming FlowFile with the content of the remote file.")
 @SeeAlso({GetSFTP.class, PutSFTP.class, GetFTP.class, PutFTP.class})
 @WritesAttributes({
     @WritesAttribute(attribute = "ftp.remote.host", description = "The hostname or IP address from which the file was pulled"),

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ListFTP.java
Patch:
@@ -57,8 +57,8 @@
     @WritesAttribute(attribute = ListFile.FILE_SIZE_ATTRIBUTE, description = "The number of bytes in the source file"),
     @WritesAttribute(attribute = ListFile.FILE_LAST_MODIFY_TIME_ATTRIBUTE, description = "The timestamp of when the file in the filesystem was" +
             "last modified as 'yyyy-MM-dd'T'HH:mm:ssZ'"),
-    @WritesAttribute(attribute = "filename", description = "The name of the file on the SFTP Server"),
-    @WritesAttribute(attribute = "path", description = "The fully qualified name of the directory on the SFTP Server from which the file was pulled"),
+    @WritesAttribute(attribute = "filename", description = "The name of the file on the FTP Server"),
+    @WritesAttribute(attribute = "path", description = "The fully qualified name of the directory on the FTP Server from which the file was pulled"),
 })
 @Stateful(scopes = {Scope.CLUSTER}, description = "After performing a listing of files, the timestamp of the newest file is stored. "
     + "This allows the Processor to list only files that have been added or modified after "

File: nifi-nar-bundles/nifi-stateful-analysis-bundle/nifi-stateful-analysis-processors/src/test/java/org/apache/nifi/processors/stateful/analysis/AttributeRollingWindowIT.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.nifi.util.MockFlowFile;
 import org.apache.nifi.util.TestRunner;
 import org.apache.nifi.util.TestRunners;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import java.io.IOException;
@@ -192,7 +193,7 @@ public void testVerifyCount() throws InterruptedException {
 
     }
 
-
+    @Ignore("this test is too unstable in terms of timing on different size/types of testing envs")
     @Test
     public void testMicroBatching() throws InterruptedException {
         assumeFalse(isWindowsEnvironment());

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-abstract-processors/src/main/java/org/apache/nifi/processors/aws/AbstractAWSProcessor.java
Patch:
@@ -20,6 +20,7 @@
 import com.amazonaws.ClientConfiguration;
 import com.amazonaws.Protocol;
 import com.amazonaws.auth.AWSCredentials;
+import com.amazonaws.auth.AWSCredentialsProvider;
 import com.amazonaws.auth.AnonymousAWSCredentials;
 import com.amazonaws.auth.BasicAWSCredentials;
 import com.amazonaws.auth.PropertiesCredentials;
@@ -57,6 +58,7 @@
 import org.apache.nifi.processors.aws.credentials.provider.factory.CredentialPropertyDescriptors;
 import org.apache.nifi.proxy.ProxyConfiguration;
 import org.apache.nifi.proxy.ProxySpec;
+import org.apache.nifi.security.util.SslContextFactory;
 import org.apache.nifi.ssl.SSLContextService;
 
 /**
@@ -225,7 +227,7 @@ protected ClientConfiguration createConfiguration(final ProcessContext context)
         if(this.getSupportedPropertyDescriptors().contains(SSL_CONTEXT_SERVICE)) {
             final SSLContextService sslContextService = context.getProperty(SSL_CONTEXT_SERVICE).asControllerService(SSLContextService.class);
             if (sslContextService != null) {
-                final SSLContext sslContext = sslContextService.createSSLContext(SSLContextService.ClientAuth.NONE);
+                final SSLContext sslContext = sslContextService.createSSLContext(SslContextFactory.ClientAuth.NONE);
                 // NIFI-3788: Changed hostnameVerifier from null to DHV (BrowserCompatibleHostnameVerifier is deprecated)
                 SdkTLSSocketFactory sdkTLSSocketFactory = new SdkTLSSocketFactory(sslContext, new DefaultHostnameVerifier());
                 config.getApacheHttpClientConfig().setSslSocketFactory(sdkTLSSocketFactory);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/repository/claim/TestContentClaimWriteCache.java
Patch:
@@ -24,7 +24,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
-
 import org.apache.nifi.controller.repository.FileSystemRepository;
 import org.apache.nifi.controller.repository.TestFileSystemRepository;
 import org.apache.nifi.controller.repository.util.DiskUtils;
@@ -44,8 +43,7 @@ public class TestContentClaimWriteCache {
 
     @Before
     public void setup() throws IOException {
-        System.setProperty(NiFiProperties.PROPERTIES_FILE_PATH, TestFileSystemRepository.class.getResource("/conf/nifi.properties").getFile());
-        nifiProperties = NiFiProperties.createBasicNiFiProperties(null, null);
+        nifiProperties = NiFiProperties.createBasicNiFiProperties(TestFileSystemRepository.class.getResource("/conf/nifi.properties").getFile());
         if (rootFile.exists()) {
             DiskUtils.deleteRecursively(rootFile);
         }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/test/java/org/apache/nifi/web/security/x509/X509AuthenticationProviderTest.java
Patch:
@@ -95,7 +95,7 @@ public void setup() {
             return AuthorizationResult.approved();
         });
 
-        x509AuthenticationProvider = new X509AuthenticationProvider(certificateIdentityProvider, authorizer, NiFiProperties.createBasicNiFiProperties(null, null));
+        x509AuthenticationProvider = new X509AuthenticationProvider(certificateIdentityProvider, authorizer, NiFiProperties.createBasicNiFiProperties(null));
     }
 
     @Test(expected = InvalidAuthenticationException.class)
@@ -322,4 +322,4 @@ private X509Certificate getX509Certificate(final String identity) {
         return certificate;
     }
 
-}
+}
\ No newline at end of file

File: nifi-nar-bundles/nifi-mongodb-bundle/nifi-mongodb-client-service-api/src/main/java/org/apache/nifi/mongodb/MongoDBClientService.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.nifi.controller.ControllerService;
 import org.apache.nifi.expression.ExpressionLanguageScope;
 import org.apache.nifi.processor.util.StandardValidators;
+import org.apache.nifi.security.util.SslContextFactory;
 import org.apache.nifi.ssl.SSLContextService;
 import org.bson.Document;
 
@@ -58,7 +59,7 @@ public interface MongoDBClientService extends ControllerService {
                     + "Possible values are REQUIRED, WANT, NONE. This property is only used when an SSL Context "
                     + "has been defined and enabled.")
             .required(false)
-            .allowableValues(SSLContextService.ClientAuth.values())
+            .allowableValues(SslContextFactory.ClientAuth.values())
             .defaultValue("REQUIRED")
             .build();
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/GetHTTP.java
Patch:
@@ -99,8 +99,8 @@
 import org.apache.nifi.processor.util.StandardValidators;
 import org.apache.nifi.processors.standard.util.HTTPUtils;
 import org.apache.nifi.security.util.KeyStoreUtils;
+import org.apache.nifi.security.util.SslContextFactory.ClientAuth;
 import org.apache.nifi.ssl.SSLContextService;
-import org.apache.nifi.ssl.SSLContextService.ClientAuth;
 import org.apache.nifi.util.StopWatch;
 import org.apache.nifi.util.Tuple;
 

File: nifi-nar-bundles/nifi-standard-services/nifi-distributed-cache-services-bundle/nifi-distributed-cache-client-service/src/main/java/org/apache/nifi/distributed/cache/client/DistributedMapCacheClientService.java
Patch:
@@ -29,7 +29,6 @@
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.TimeUnit;
-
 import org.apache.commons.io.IOUtils;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.SeeAlso;
@@ -44,8 +43,8 @@
 import org.apache.nifi.processor.util.StandardValidators;
 import org.apache.nifi.remote.StandardVersionNegotiator;
 import org.apache.nifi.remote.VersionNegotiator;
+import org.apache.nifi.security.util.SslContextFactory.ClientAuth;
 import org.apache.nifi.ssl.SSLContextService;
-import org.apache.nifi.ssl.SSLContextService.ClientAuth;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -503,7 +502,7 @@ private <T> T withCommsSession(final CommsAction<T> action) throws IOException {
         }
     }
 
-    private static interface CommsAction<T> {
+    private interface CommsAction<T> {
 
         T execute(CommsSession commsSession) throws IOException;
     }

File: nifi-nar-bundles/nifi-standard-services/nifi-distributed-cache-services-bundle/nifi-distributed-cache-client-service/src/main/java/org/apache/nifi/distributed/cache/client/DistributedSetCacheClientService.java
Patch:
@@ -25,7 +25,6 @@
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.TimeUnit;
-
 import org.apache.commons.io.IOUtils;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.SeeAlso;
@@ -40,8 +39,8 @@
 import org.apache.nifi.processor.util.StandardValidators;
 import org.apache.nifi.remote.StandardVersionNegotiator;
 import org.apache.nifi.remote.VersionNegotiator;
+import org.apache.nifi.security.util.SslContextFactory.ClientAuth;
 import org.apache.nifi.ssl.SSLContextService;
-import org.apache.nifi.ssl.SSLContextService.ClientAuth;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: nifi-nar-bundles/nifi-standard-services/nifi-distributed-cache-services-bundle/nifi-distributed-cache-server/src/main/java/org/apache/nifi/distributed/cache/server/DistributedSetCacheServer.java
Patch:
@@ -17,14 +17,12 @@
 package org.apache.nifi.distributed.cache.server;
 
 import java.io.File;
-
 import javax.net.ssl.SSLContext;
-
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.Tags;
 import org.apache.nifi.controller.ConfigurationContext;
+import org.apache.nifi.security.util.SslContextFactory.ClientAuth;
 import org.apache.nifi.ssl.SSLContextService;
-import org.apache.nifi.ssl.SSLContextService.ClientAuth;
 
 @Tags({"distributed", "set", "distinct", "cache", "server"})
 @CapabilityDescription("Provides a set (collection of unique values) cache that can be accessed over a socket. "

File: nifi-nar-bundles/nifi-standard-services/nifi-distributed-cache-services-bundle/nifi-distributed-cache-server/src/main/java/org/apache/nifi/distributed/cache/server/map/DistributedMapCacheServer.java
Patch:
@@ -18,18 +18,16 @@
 
 import java.io.File;
 import java.io.IOException;
-
 import javax.net.ssl.SSLContext;
-
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.SeeAlso;
 import org.apache.nifi.annotation.documentation.Tags;
 import org.apache.nifi.controller.ConfigurationContext;
 import org.apache.nifi.distributed.cache.server.CacheServer;
 import org.apache.nifi.distributed.cache.server.DistributedCacheServer;
 import org.apache.nifi.distributed.cache.server.EvictionPolicy;
+import org.apache.nifi.security.util.SslContextFactory.ClientAuth;
 import org.apache.nifi.ssl.SSLContextService;
-import org.apache.nifi.ssl.SSLContextService.ClientAuth;
 
 @Tags({"distributed", "cluster", "map", "cache", "server", "key/value"})
 @CapabilityDescription("Provides a map (key/value) cache that can be accessed over a socket. Interaction with this service"

File: nifi-nar-bundles/nifi-standard-services/nifi-ssl-context-bundle/nifi-ssl-context-service/src/main/java/org/apache/nifi/ssl/StandardRestrictedSSLContextService.java
Patch:
@@ -43,7 +43,8 @@ public class StandardRestrictedSSLContextService extends StandardSSLContextServi
             .defaultValue("TLS")
             .required(false)
             .allowableValues(RestrictedSSLContextService.buildAlgorithmAllowableValues())
-            .description("The algorithm to use for this SSL context. By default, this will choose the highest supported TLS protocol version.")
+            .description(StandardSSLContextService.COMMON_TLS_PROTOCOL_DESCRIPTION +
+                    "On Java 11, for example, TLSv1.3 will be the default, but if a client does not support it, TLSv1.2 will be offered as a fallback. TLSv1.0 and TLSv1.1 are not supported at all. ")
             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)
             .sensitive(false)
             .build();

File: nifi-nar-bundles/nifi-standard-services/nifi-ssl-context-bundle/nifi-ssl-context-service/src/test/java/org/apache/nifi/ssl/RestrictedSSLContextServiceTest.java
Patch:
@@ -21,9 +21,11 @@
 import static org.hamcrest.core.IsNull.notNullValue;
 import static org.junit.Assert.assertTrue;
 
+import java.util.Arrays;
 import java.util.HashSet;
 import java.util.Set;
 import org.apache.nifi.components.AllowableValue;
+import org.apache.nifi.security.util.CertificateUtils;
 import org.junit.Test;
 
 public class RestrictedSSLContextServiceTest {
@@ -32,7 +34,7 @@ public class RestrictedSSLContextServiceTest {
     public void testTLSAlgorithms() {
         final Set<String> expected = new HashSet<>();
         expected.add("TLS");
-        expected.add("TLSv1.2");
+        expected.addAll(Arrays.asList(CertificateUtils.getCurrentSupportedTlsProtocolVersions()));
 
         final AllowableValue[] allowableValues = RestrictedSSLContextService.buildAlgorithmAllowableValues();
         assertThat(allowableValues, notNullValue());

File: nifi-nar-bundles/nifi-standard-services/nifi-ssl-context-service-api/src/main/java/org/apache/nifi/ssl/RestrictedSSLContextService.java
Patch:
@@ -17,12 +17,13 @@
 package org.apache.nifi.ssl;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
-
 import org.apache.nifi.components.AllowableValue;
+import org.apache.nifi.security.util.CertificateUtils;
 
 /**
  * Simple extension of the regular {@link SSLContextService} to allow for restricted implementations
@@ -47,7 +48,7 @@ static AllowableValue[] buildAlgorithmAllowableValues() {
         /*
          * Add specifically supported TLS versions
          */
-        supportedProtocols.add("TLSv1.2");
+        supportedProtocols.addAll(Arrays.asList(CertificateUtils.getCurrentSupportedTlsProtocolVersions()));
 
         final int numProtocols = supportedProtocols.size();
 

File: nifi-toolkit/nifi-toolkit-tls/src/main/java/org/apache/nifi/toolkit/tls/service/client/TlsCertificateSigningRequestPerformer.java
Patch:
@@ -99,7 +99,7 @@ public X509Certificate[] perform(KeyPair keyPair) throws IOException {
 
             HttpClientBuilder httpClientBuilder = httpClientBuilderSupplier.get();
             SSLContextBuilder sslContextBuilder = SSLContextBuilder.create();
-            sslContextBuilder.useProtocol("TLSv1.2");
+            sslContextBuilder.useProtocol(CertificateUtils.getHighestCurrentSupportedTlsProtocolVersion());
 
             // We will be validating that we are talking to the correct host once we get the response's hmac of the token and public key of the ca
             sslContextBuilder.loadTrustMaterial(null, new TrustSelfSignedStrategy());

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/main/java/org/apache/nifi/processors/azure/storage/FetchAzureDataLakeStorage.java
Patch:
@@ -63,8 +63,8 @@ public void onTrigger(ProcessContext context, ProcessSession session) throws Pro
             }
 
             final DataLakeServiceClient storageClient = getStorageClient(context, flowFile);
-            final DataLakeFileSystemClient dataLakeFileSystemClient = storageClient.getFileSystemClient(fileSystem);
-            final DataLakeDirectoryClient directoryClient = dataLakeFileSystemClient.getDirectoryClient(directory);
+            final DataLakeFileSystemClient fileSystemClient = storageClient.getFileSystemClient(fileSystem);
+            final DataLakeDirectoryClient directoryClient = fileSystemClient.getDirectoryClient(directory);
             final DataLakeFileClient fileClient = directoryClient.getFileClient(fileName);
 
             if (fileClient.getProperties().isDirectory()) {

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/main/java/org/apache/nifi/processors/azure/storage/DeleteAzureDataLakeStorage.java
Patch:
@@ -64,7 +64,7 @@ public void onTrigger(ProcessContext context, ProcessSession session) throws Pro
             final long transferMillis = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startNanos);
             session.getProvenanceReporter().invokeRemoteProcess(flowFile, fileClient.getFileUrl(), "File deleted");
         } catch (Exception e) {
-            getLogger().error("Failed to delete the specified file from Azure Data Lake Storage,  due to {}", e);
+            getLogger().error("Failed to delete the specified file from Azure Data Lake Storage", e);
             flowFile = session.penalize(flowFile);
             session.transfer(flowFile, REL_FAILURE);
         }

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/main/java/org/apache/nifi/processors/azure/storage/PutAzureDataLakeStorage.java
Patch:
@@ -98,7 +98,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
             final long transferMillis = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startNanos);
             session.getProvenanceReporter().send(flowFile, fileClient.getFileUrl(), transferMillis);
         } catch (Exception e) {
-            getLogger().error("Failed to create file, due to {}", e);
+            getLogger().error("Failed to create file", e);
             flowFile = session.penalize(flowFile);
             session.transfer(flowFile, REL_FAILURE);
         }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-jetty/src/main/java/org/apache/nifi/web/server/JettyServer.java
Patch:
@@ -760,6 +760,7 @@ private void configureConnectors(final Server server) throws ServerConfiguration
         final int headerSize = DataUnit.parseDataSize(props.getWebMaxHeaderSize(), DataUnit.B).intValue();
         httpConfiguration.setRequestHeaderSize(headerSize);
         httpConfiguration.setResponseHeaderSize(headerSize);
+        httpConfiguration.setSendServerVersion(props.shouldSendServerVersion());
 
         // Check if both HTTP and HTTPS connectors are configured and fail if both are configured
         if (bothHttpAndHttpsConnectorsConfigured(props)) {
@@ -908,6 +909,7 @@ private ServerConnector createUnconfiguredSslServerConnector(Server server, Http
         final HttpConfiguration httpsConfiguration = new HttpConfiguration(httpConfiguration);
         httpsConfiguration.setSecureScheme("https");
         httpsConfiguration.setSecurePort(port);
+        httpsConfiguration.setSendServerVersion(props.shouldSendServerVersion());
         httpsConfiguration.addCustomizer(new SecureRequestCustomizer());
 
         // build the connector

File: nifi-nar-bundles/nifi-extension-utils/nifi-record-utils/nifi-avro-record-utils/src/main/java/org/apache/nifi/avro/AvroTypeUtil.java
Patch:
@@ -747,7 +747,7 @@ private static Object convertToAvroObject(final Object rawValue, final Schema fi
                     for (final RecordField recordField : recordValue.getSchema().getFields()) {
                         final Object v = recordValue.getValue(recordField);
                         if (v != null) {
-                            map.put(recordField.getFieldName(), v);
+                            map.put(recordField.getFieldName(), convertToAvroObject(v, fieldSchema.getValueType(), fieldName + "[" + recordField.getFieldName() + "]", charset));
                         }
                     }
 

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/main/java/org/apache/nifi/processors/azure/storage/DeleteAzureDataLakeStorage.java
Patch:
@@ -62,7 +62,7 @@ public void onTrigger(ProcessContext context, ProcessSession session) throws Pro
             session.transfer(flowFile, REL_SUCCESS);
 
             final long transferMillis = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startNanos);
-            session.getProvenanceReporter().send(flowFile, fileClient.getFileUrl(), transferMillis);
+            session.getProvenanceReporter().invokeRemoteProcess(flowFile, fileClient.getFileUrl(), "File deleted");
         } catch (Exception e) {
             getLogger().error("Failed to delete the specified file from Azure Data Lake Storage,  due to {}", e);
             flowFile = session.penalize(flowFile);

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/main/java/org/apache/nifi/processors/azure/storage/FetchAzureDataLakeStorage.java
Patch:
@@ -65,7 +65,7 @@ public void onTrigger(ProcessContext context, ProcessSession session) throws Pro
             session.transfer(flowFile, REL_SUCCESS);
 
             final long transferMillis = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startNanos);
-            session.getProvenanceReporter().send(flowFile, fileClient.getFileUrl(), transferMillis);
+            session.getProvenanceReporter().fetch(flowFile, fileClient.getFileUrl(), transferMillis);
         } catch (Exception e) {
             getLogger().error("Failure to fetch file from Azure Data Lake Storage, due to {}", e);
             flowFile = session.penalize(flowFile);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/diagnostics/bootstrap/tasks/NiFiPropertiesDiagnosticTask.java
Patch:
@@ -35,6 +35,7 @@ public class NiFiPropertiesDiagnosticTask implements DiagnosticTask {
         "nifi.ui.autorefresh.interval",
         "nifi.cluster.node.protocol.max.threads",
         "nifi.cluster.node.protocol.threads",
+        "nifi.security.allow.anonymous.authentication",
         "nifi.security.user.login.identity.provider",
         "nifi.security.user.authorizer",
         "nifi.provenance.repository.implementation",

File: nifi-commons/nifi-properties/src/main/java/org/apache/nifi/util/NiFiProperties.java
Patch:
@@ -126,6 +126,7 @@ public abstract class NiFiProperties {
     public static final String PROVENANCE_MAX_STORAGE_SIZE = "nifi.provenance.repository.max.storage.size";
     public static final String PROVENANCE_ROLLOVER_TIME = "nifi.provenance.repository.rollover.time";
     public static final String PROVENANCE_ROLLOVER_SIZE = "nifi.provenance.repository.rollover.size";
+    public static final String PROVENANCE_ROLLOVER_EVENT_COUNT = "nifi.provenance.repository.rollover.events";
     public static final String PROVENANCE_QUERY_THREAD_POOL_SIZE = "nifi.provenance.repository.query.threads";
     public static final String PROVENANCE_INDEX_THREAD_POOL_SIZE = "nifi.provenance.repository.index.threads";
     public static final String PROVENANCE_COMPRESS_ON_ROLLOVER = "nifi.provenance.repository.compress.on.rollover";

File: nifi-nar-bundles/nifi-provenance-repository-bundle/nifi-persistent-provenance-repository/src/main/java/org/apache/nifi/provenance/store/PartitionedEventStore.java
Patch:
@@ -62,7 +62,8 @@ public PartitionedEventStore(final RepositoryConfiguration config, final EventRe
     @Override
     public void initialize() throws IOException {
         maintenanceExecutor = Executors.newScheduledThreadPool(1, new NamedThreadFactory("Provenance Repository Maintenance"));
-        maintenanceExecutor.scheduleWithFixedDelay(() -> performMaintenance(), 1, 1, TimeUnit.MINUTES);
+        final long maintenanceMillis = repoConfig.getMaintenanceFrequency(TimeUnit.MILLISECONDS);
+        maintenanceExecutor.scheduleWithFixedDelay(this::performMaintenance, maintenanceMillis, maintenanceMillis, TimeUnit.MILLISECONDS);
 
         for (final EventStorePartition partition : getPartitions()) {
             partition.initialize();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-flowfile-repo-serialization/src/main/java/org/apache/nifi/controller/repository/EncryptedRepositoryRecordSerdeFactory.java
Patch:
@@ -48,11 +48,11 @@ public EncryptedRepositoryRecordSerdeFactory(final ResourceClaimManager claimMan
     }
 
     @Override
-    public SerDe<RepositoryRecord> createSerDe(String encodingName) {
+    public SerDe<SerializedRepositoryRecord> createSerDe(String encodingName) {
         // If no encoding is provided, use the encrypted as the default
         if (encodingName == null || EncryptedSchemaRepositoryRecordSerde.class.getName().equals(encodingName)) {
             // Delegate the creation of the wrapped serde to the standard factory
-            final SerDe<RepositoryRecord> serde = super.createSerDe(null);
+            final SerDe<SerializedRepositoryRecord> serde = super.createSerDe(null);
 
             // Retrieve encryption configuration
             try {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/FlowSynchronizer.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.nifi.controller.MissingBundleException;
 import org.apache.nifi.controller.UninheritableFlowException;
 import org.apache.nifi.encrypt.StringEncryptor;
+import org.apache.nifi.services.FlowService;
 
 /**
  */
@@ -35,13 +36,14 @@ public interface FlowSynchronizer {
      * @param controller the flow controller
      * @param dataFlow the flow to load the controller with. If the flow is null or zero length, then the controller must not have a flow or else an UninheritableFlowException will be thrown.
      * @param encryptor used for the encryption/decryption of sensitive property values
+     * @param flowService the flow service
      *
      * @throws FlowSerializationException if proposed flow is not a valid flow configuration file
      * @throws UninheritableFlowException if the proposed flow cannot be loaded by the controller because in doing so would risk orphaning flow files
      * @throws FlowSynchronizationException if updates to the controller failed. If this exception is thrown, then the controller should be considered unsafe to be used
      * @throws MissingBundleException if the proposed flow cannot be loaded by the controller because it contains a bundle that is not available to the controller
      */
-    void sync(FlowController controller, DataFlow dataFlow, StringEncryptor encryptor)
+    void sync(FlowController controller, DataFlow dataFlow, StringEncryptor encryptor, FlowService flowService)
             throws FlowSerializationException, UninheritableFlowException, FlowSynchronizationException, MissingBundleException;
 
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/logging/repository/StandardLogRepository.java
Patch:
@@ -134,7 +134,7 @@ public void addObserver(final String observerIdentifier, final LogLevel minimumL
         try {
             // ensure observer does not exists
             if (observerLookup.containsKey(observerIdentifier)) {
-                throw new IllegalStateException("The specified observer identifier already exists.");
+                throw new IllegalStateException("The specified observer identifier (" + observerIdentifier + ") already exists.");
             }
 
             final LogLevel[] allLevels = LogLevel.values();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/integration/FrameworkIntegrationTest.java
Patch:
@@ -96,6 +96,7 @@
 import org.apache.nifi.registry.flow.StandardFlowRegistryClient;
 import org.apache.nifi.reporting.BulletinRepository;
 import org.apache.nifi.scheduling.SchedulingStrategy;
+import org.apache.nifi.services.FlowService;
 import org.apache.nifi.util.FileUtils;
 import org.apache.nifi.util.NiFiProperties;
 import org.junit.After;
@@ -345,7 +346,7 @@ protected void restart() throws IOException, ExecutionException, InterruptedExce
 
         // Reload the flow
         final FlowSynchronizer flowSynchronizer = new StandardFlowSynchronizer(flowController.getEncryptor(), nifiProperties, extensionManager);
-        flowController.synchronize(flowSynchronizer, new StandardDataFlow(flowBytes, null, null, Collections.emptySet()));
+        flowController.synchronize(flowSynchronizer, new StandardDataFlow(flowBytes, null, null, Collections.emptySet()), Mockito.mock(FlowService.class));
 
         // Reload FlowFiles / initialize flow
         final ProcessGroup newRootGroup = flowController.getFlowManager().getRootGroup();

File: nifi-nar-bundles/nifi-atlas-bundle/nifi-atlas-reporting-task/src/main/java/org/apache/nifi/atlas/provenance/analyzer/DatabaseAnalyzerUtil.java
Patch:
@@ -52,7 +52,8 @@ private static  Tuple<String, String> parseTableName(String connectedDatabaseNam
         }
         final String databaseName = tableNameSplit.length == 2 ? tableNameSplit[0] : connectedDatabaseName;
         final String tableName = tableNameSplit.length == 2 ? tableNameSplit[1] : tableNameSplit[0];
-        return new Tuple<>(databaseName, tableName);
+        // Handle case insensitivity of database and table names in Hive: send names uniformly in lower case
+        return new Tuple<>(databaseName.toLowerCase(), tableName.toLowerCase());
     }
 
     public static String toTableNameStr(Tuple<String, String> tableName) {

File: nifi-nar-bundles/nifi-atlas-bundle/nifi-atlas-reporting-task/src/main/java/org/apache/nifi/atlas/provenance/analyzer/Hive2JDBC.java
Patch:
@@ -94,8 +94,8 @@ public DataSetRefs analyze(AnalysisContext context, ProvenanceEventRecord event)
 
         if (inputTables.isEmpty() && outputTables.isEmpty()) {
             // If input/output tables are unknown, create database level lineage.
-            return getDatabaseRef(event.getComponentId(), event.getEventType(),
-                    clusterName, connectedDatabaseName);
+            // Handle case insensitivity of database and table names in Hive: send names uniformly in lower case
+            return getDatabaseRef(event.getComponentId(), event.getEventType(), clusterName, connectedDatabaseName.toLowerCase());
         }
 
         final DataSetRefs refs = new DataSetRefs(event.getComponentId());

File: nifi-nar-bundles/nifi-atlas-bundle/nifi-atlas-reporting-task/src/test/java/org/apache/nifi/atlas/provenance/analyzer/TestPutHiveStreaming.java
Patch:
@@ -53,7 +53,7 @@ private void testTableLineage(String processorName) {
         when(record.getComponentType()).thenReturn(processorName);
         when(record.getTransitUri()).thenReturn(transitUri);
         when(record.getEventType()).thenReturn(ProvenanceEventType.SEND);
-        when(record.getAttribute(ATTR_OUTPUT_TABLES)).thenReturn("databaseA.tableA");
+        when(record.getAttribute(ATTR_OUTPUT_TABLES)).thenReturn("database_A.table_A");
 
         final ClusterResolvers clusterResolvers = Mockito.mock(ClusterResolvers.class);
         when(clusterResolvers.fromHostNames(matches(".+\\.example\\.com"))).thenReturn("cluster1");
@@ -69,7 +69,7 @@ private void testTableLineage(String processorName) {
         assertEquals(1, refs.getOutputs().size());
         Referenceable ref = refs.getOutputs().iterator().next();
         assertEquals("hive_table", ref.getTypeName());
-        assertEquals("tableA", ref.get(ATTR_NAME));
-        assertEquals("databaseA.tableA@cluster1", ref.get(ATTR_QUALIFIED_NAME));
+        assertEquals("table_a", ref.get(ATTR_NAME));
+        assertEquals("database_a.table_a@cluster1", ref.get(ATTR_QUALIFIED_NAME));
     }
 }

File: nifi-nar-bundles/nifi-prometheus-bundle/nifi-prometheus-reporting-task/src/test/java/org/apache/nifi/reporting/prometheus/TestPrometheusRecordSink.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.nifi.controller.ControllerServiceInitializationContext;
 import org.apache.nifi.logging.ComponentLog;
 import org.apache.nifi.reporting.InitializationException;
-import org.apache.nifi.reporting.prometheus.api.PrometheusMetricsUtil;
+import org.apache.nifi.prometheus.util.PrometheusMetricsUtil;
 import org.apache.nifi.serialization.SimpleRecordSchema;
 import org.apache.nifi.serialization.WriteResult;
 import org.apache.nifi.serialization.record.ListRecordSet;
@@ -128,7 +128,7 @@ private PrometheusRecordSink initTask() throws InitializationException {
 
         final PropertyValue pValue = mock(StandardPropertyValue.class);
         when(context.getProperty(PrometheusMetricsUtil.METRICS_ENDPOINT_PORT)).thenReturn(new MockPropertyValue(portString));
-        when(context.getProperty(PrometheusMetricsUtil.SSL_CONTEXT)).thenReturn(pValue);
+        when(context.getProperty(PrometheusRecordSink.SSL_CONTEXT)).thenReturn(pValue);
         when(pValue.asControllerService(SSLContextService.class)).thenReturn(null);
 
         final ControllerServiceInitializationContext initContext = new MockControllerServiceInitializationContext(task, UUID.randomUUID().toString(), logger, stateManager);

File: nifi-nar-bundles/nifi-prometheus-bundle/nifi-prometheus-reporting-task/src/test/java/org/apache/nifi/reporting/prometheus/TestPrometheusReportingTask.java
Patch:
@@ -33,7 +33,7 @@
 import org.apache.nifi.controller.status.ProcessGroupStatus;
 import org.apache.nifi.controller.status.RunStatus;
 import org.apache.nifi.reporting.InitializationException;
-import org.apache.nifi.reporting.prometheus.api.PrometheusMetricsUtil;
+import org.apache.nifi.prometheus.util.PrometheusMetricsUtil;
 import org.apache.nifi.state.MockStateManager;
 import org.apache.nifi.util.MockComponentLog;
 import org.apache.nifi.util.MockConfigurationContext;

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/test/java/org/apache/nifi/processors/azure/storage/AbstractAzureBlobStorageIT.java
Patch:
@@ -31,6 +31,7 @@ public abstract class AbstractAzureBlobStorageIT extends AbstractAzureStorageIT
 
     protected static final String TEST_CONTAINER_NAME_PREFIX = "nifi-test-container";
     protected static final String TEST_BLOB_NAME = "nifi-test-blob";
+    protected static final String TEST_FILE_NAME = "nifi-test-file";
 
     protected CloudBlobContainer container;
 

File: nifi-nar-bundles/nifi-solr-bundle/nifi-solr-processors/src/test/java/org/apache/nifi/processors/solr/TestGetSolr.java
Patch:
@@ -48,8 +48,8 @@
 import java.util.Locale;
 import java.util.TimeZone;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertThat;
 
 public class TestGetSolr {
 

File: nifi-nar-bundles/nifi-solr-bundle/nifi-solr-processors/src/test/java/org/apache/nifi/processors/solr/TestPutSolrContentStream.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.solr.client.solrj.SolrQuery;
 import org.apache.solr.client.solrj.SolrRequest;
 import org.apache.solr.client.solrj.SolrServerException;
-import org.apache.solr.client.solrj.impl.HttpSolrClient;
+import org.apache.solr.client.solrj.impl.BaseHttpSolrClient;
 import org.apache.solr.client.solrj.response.QueryResponse;
 import org.apache.solr.common.SolrDocument;
 import org.apache.solr.common.SolrException;
@@ -318,7 +318,7 @@ public void testSolrExceptionShouldRouteToFailure() throws IOException, SolrServ
 
     @Test
     public void testRemoteSolrExceptionShouldRouteToFailure() throws IOException, SolrServerException {
-        final Throwable throwable = new HttpSolrClient.RemoteSolrException(
+        final Throwable throwable = new BaseHttpSolrClient.RemoteSolrException(
                 "host", 401, "error", new NumberFormatException());
         final ExceptionThrowingProcessor proc = new ExceptionThrowingProcessor(throwable);
 

File: nifi-nar-bundles/nifi-solr-bundle/nifi-solr-processors/src/test/java/org/apache/nifi/processors/solr/TestPutSolrRecord.java
Patch:
@@ -36,7 +36,7 @@
 import org.apache.solr.client.solrj.SolrQuery;
 import org.apache.solr.client.solrj.SolrRequest;
 import org.apache.solr.client.solrj.SolrServerException;
-import org.apache.solr.client.solrj.impl.HttpSolrClient;
+import org.apache.solr.client.solrj.impl.BaseHttpSolrClient;
 import org.apache.solr.client.solrj.response.QueryResponse;
 import org.apache.solr.common.SolrDocument;
 import org.apache.solr.common.SolrException;
@@ -440,7 +440,7 @@ public void testSolrExceptionShouldRouteToFailure() throws IOException, SolrServ
 
     @Test
     public void testRemoteSolrExceptionShouldRouteToFailure() throws IOException, SolrServerException, InitializationException {
-        final Throwable throwable = new HttpSolrClient.RemoteSolrException(
+        final Throwable throwable = new BaseHttpSolrClient.RemoteSolrException(
                 "host", 401, "error", new NumberFormatException());
         final ExceptionThrowingProcessor proc = new ExceptionThrowingProcessor(throwable);
 

File: nifi-nar-bundles/nifi-solr-bundle/nifi-solr-processors/src/test/java/org/apache/nifi/processors/solr/TestQuerySolr.java
Patch:
@@ -48,9 +48,9 @@
 import java.util.Map;
 import java.util.TimeZone;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertThat;
 
 public class TestQuerySolr {
     static final String DEFAULT_SOLR_CORE = "testCollection";

File: nifi-nar-bundles/nifi-solr-bundle/nifi-solr-processors/src/test/java/org/apache/nifi/processors/solr/QuerySolrIT.java
Patch:
@@ -30,6 +30,7 @@
 import org.apache.solr.client.solrj.SolrClient;
 import org.apache.solr.client.solrj.SolrServerException;
 import org.apache.solr.client.solrj.impl.CloudSolrClient;
+import org.apache.solr.client.solrj.impl.ZkClientClusterStateProvider;
 import org.apache.solr.client.solrj.request.CollectionAdminRequest;
 import org.apache.solr.common.SolrInputDocument;
 import org.junit.AfterClass;
@@ -82,7 +83,8 @@ public class QuerySolrIT {
     public static void setup() throws IOException, SolrServerException {
         CloudSolrClient solrClient = createSolrClient();
         Path currentDir = Paths.get(ZK_CONFIG_PATH);
-        solrClient.uploadConfig(currentDir, ZK_CONFIG_NAME);
+        ZkClientClusterStateProvider stateProvider = new ZkClientClusterStateProvider(SOLR_LOCATION);
+        stateProvider.uploadConfig(currentDir, ZK_CONFIG_NAME);
         solrClient.setDefaultCollection(SOLR_COLLECTION);
 
         if (!solrClient.getZkStateReader().getClusterState().hasCollection(SOLR_COLLECTION)) {

File: nifi-nar-bundles/nifi-solr-bundle/nifi-solr-processors/src/test/java/org/apache/nifi/processors/solr/TestGetSolr.java
Patch:
@@ -355,7 +355,7 @@ public void testForValidXml() throws IOException, SolrServerException, Initializ
         runner.assertAllFlowFilesTransferred(GetSolr.REL_SUCCESS, 1);
         runner.assertAllFlowFilesContainAttribute(CoreAttributes.MIME_TYPE.key());
 
-        String expectedXml = "<docs><doc boost=\"1.0\"><field name=\"id\">doc1</field></doc></docs>";
+        String expectedXml = "<docs><doc><field name=\"id\">doc1</field></doc></docs>";
         assertThat(expectedXml, CompareMatcher.isIdenticalTo(new String(runner.getContentAsByteArray(runner.getFlowFilesForRelationship(GetSolr.REL_SUCCESS).get(0)))));
     }
 

File: nifi-nar-bundles/nifi-extension-utils/nifi-database-utils/src/main/java/org/apache/nifi/util/db/JdbcCommon.java
Patch:
@@ -788,7 +788,7 @@ public static void setParameter(final PreparedStatement stmt, final String attrN
                     } else {
                         final DateTimeFormatter dtFormatter = getDateTimeFormatter(valueFormat);
                         LocalDateTime ldt = LocalDateTime.parse(parameterValue, dtFormatter);
-                        ts = Timestamp.from(ldt.atZone(ZoneId.of("UTC")).toInstant());
+                        ts = Timestamp.from(ldt.atZone(ZoneId.systemDefault()).toInstant());
                     }
 
                     stmt.setTimestamp(parameterIndex, ts);

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/test/java/org/apache/nifi/avro/TestWriteAvroResult.java
Patch:
@@ -194,7 +194,6 @@ private void testLogicalTypes(Schema schema) throws ParseException, IOException
             assertEquals(millisSinceMidnight * 1000L, avroRecord.get("timeMicros"));
             assertEquals(timeLong, avroRecord.get("timestampMillis"));
             assertEquals(timeLong * 1000L, avroRecord.get("timestampMicros"));
-            assertEquals(17260, avroRecord.get("date"));
             // Double value will be converted into logical decimal if Avro schema is defined as logical decimal.
             final Schema decimalSchema = schema.getField("decimal").schema();
             final LogicalType logicalType = decimalSchema.getLogicalType() != null

File: nifi-nar-bundles/nifi-accumulo-bundle/nifi-accumulo-processors/src/test/java/org/apache/nifi/accumulo/processors/PutRecordIT.java
Patch:
@@ -52,7 +52,7 @@
 import java.util.Set;
 import java.util.UUID;
 
-public class TestPutRecord {
+public class PutRecordIT {
 
     public static final String DEFAULT_COLUMN_FAMILY = "family1";
 

File: nifi-nar-bundles/nifi-accumulo-bundle/nifi-accumulo-processors/src/test/java/org/apache/nifi/accumulo/processors/ScanAccumuloIT.java
Patch:
@@ -54,7 +54,7 @@
 import java.util.Set;
 import java.util.UUID;
 
-public class TestScanAccumulo {
+public class ScanAccumuloIT {
 
     public static final String DEFAULT_COLUMN_FAMILY = "family1";
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/service/mock/MockProcessGroup.java
Patch:
@@ -36,6 +36,7 @@
 import org.apache.nifi.groups.ProcessGroupCounts;
 import org.apache.nifi.groups.RemoteProcessGroup;
 import org.apache.nifi.parameter.ParameterContext;
+import org.apache.nifi.parameter.ParameterUpdate;
 import org.apache.nifi.registry.VariableRegistry;
 import org.apache.nifi.registry.flow.FlowRegistryClient;
 import org.apache.nifi.registry.flow.VersionControlInformation;
@@ -710,7 +711,7 @@ public void verifyCanSetParameterContext(ParameterContext context) {
     }
 
     @Override
-    public void onParameterContextUpdated() {
+    public void onParameterContextUpdated(final Map<String, ParameterUpdate> updatedParameters) {
     }
 
     @Override

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/json/AbstractJsonRowRecordReader.java
Patch:
@@ -160,9 +160,9 @@ protected Object getRawNodeValue(final JsonNode fieldNode, final DataType dataTy
                     } catch (final Exception e) {
                         return textValue;
                     }
+                default:
+                    return textValue;
             }
-
-            return textValue;
         }
 
         if (fieldNode.isArray()) {

File: nifi-nar-bundles/nifi-mongodb-bundle/nifi-mongodb-processors/src/main/java/org/apache/nifi/processors/mongodb/AbstractMongoProcessor.java
Patch:
@@ -347,7 +347,9 @@ protected void writeBatch(String payload, FlowFile parent, ProcessContext contex
         FlowFile flowFile = parent != null ? session.create(parent) : session.create();
         flowFile = session.importFrom(new ByteArrayInputStream(payload.getBytes(charset)), flowFile);
         flowFile = session.putAllAttributes(flowFile, extraAttributes);
-        session.getProvenanceReporter().receive(flowFile, getURI(context));
+        if (parent == null) {
+            session.getProvenanceReporter().receive(flowFile, getURI(context));
+        }
         session.transfer(flowFile, rel);
     }
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/AbstractDatabaseFetchProcessor.java
Patch:
@@ -316,8 +316,8 @@ public void setup(final ProcessContext context, boolean shouldCleanCache, FlowFi
         }
     }
 
-    protected static StringBuilder getWrappedQuery(DatabaseAdapter dbAdaper, String sqlQuery, String tableName) {
-       return new StringBuilder("SELECT * FROM (" + sqlQuery + ") " + dbAdaper.getTableAliasClause(tableName));
+    protected static StringBuilder getWrappedQuery(DatabaseAdapter dbAdapter, String sqlQuery, String tableName) {
+       return new StringBuilder("SELECT * FROM (" + sqlQuery + ") " + dbAdapter.getTableAliasClause(tableName));
     }
 
     protected static String getMaxValueFromRow(ResultSet resultSet,

File: nifi-nar-bundles/nifi-hive-bundle/nifi-hive-processors/src/main/java/org/apache/nifi/util/hive/HiveConfigurator.java
Patch:
@@ -50,7 +50,7 @@ public Collection<ValidationResult> validate(String configFiles, String principa
 
         final Configuration hiveConfig = resources.getConfiguration();
 
-        problems.addAll(KerberosProperties.validatePrincipalAndKeytab(this.getClass().getSimpleName(), hiveConfig, principal, keyTab, log));
+        problems.addAll(KerberosProperties.validatePrincipalWithKeytabOrPassword(this.getClass().getSimpleName(), hiveConfig, principal, keyTab, null, log));
 
         return problems;
     }

File: nifi-nar-bundles/nifi-hive-bundle/nifi-hive3-processors/src/main/java/org/apache/nifi/util/hive/HiveConfigurator.java
Patch:
@@ -53,7 +53,7 @@ public Collection<ValidationResult> validate(String configFiles, String principa
 
         final Configuration hiveConfig = resources.getConfiguration();
 
-        problems.addAll(KerberosProperties.validatePrincipalAndKeytab(this.getClass().getSimpleName(), hiveConfig, principal, keyTab, log));
+        problems.addAll(KerberosProperties.validatePrincipalWithKeytabOrPassword(this.getClass().getSimpleName(), hiveConfig, principal, keyTab, null, log));
 
         return problems;
     }

File: nifi-nar-bundles/nifi-hive-bundle/nifi-hive_1_1-processors/src/main/java/org/apache/nifi/util/hive/HiveConfigurator.java
Patch:
@@ -50,7 +50,7 @@ public Collection<ValidationResult> validate(String configFiles, String principa
 
         final Configuration hiveConfig = resources.getConfiguration();
 
-        problems.addAll(KerberosProperties.validatePrincipalAndKeytab(this.getClass().getSimpleName(), hiveConfig, principal, keyTab, log));
+        problems.addAll(KerberosProperties.validatePrincipalWithKeytabOrPassword(this.getClass().getSimpleName(), hiveConfig, principal, keyTab, null, log));
 
         return problems;
     }

File: nifi-nar-bundles/nifi-standard-services/nifi-hbase_1_1_2-client-service-bundle/nifi-hbase_1_1_2-client-service/src/main/java/org/apache/nifi/hbase/HBase_1_1_2_ClientService.java
Patch:
@@ -261,7 +261,7 @@ protected Collection<ValidationResult> customValidate(ValidationContext validati
 
             final Configuration hbaseConfig = resources.getConfiguration();
 
-            problems.addAll(KerberosProperties.validatePrincipalAndKeytab(getClass().getSimpleName(), hbaseConfig, resolvedPrincipal, resolvedKeytab, getLogger()));
+            problems.addAll(KerberosProperties.validatePrincipalWithKeytabOrPassword(getClass().getSimpleName(), hbaseConfig, resolvedPrincipal, resolvedKeytab, null, getLogger()));
         }
 
         if (credentialsService != null && (explicitPrincipal != null || explicitKeytab != null)) {

File: nifi-nar-bundles/nifi-standard-services/nifi-hbase_2-client-service-bundle/nifi-hbase_2-client-service/src/main/java/org/apache/nifi/hbase/HBase_2_ClientService.java
Patch:
@@ -260,7 +260,7 @@ protected Collection<ValidationResult> customValidate(ValidationContext validati
 
             final Configuration hbaseConfig = resources.getConfiguration();
 
-            problems.addAll(KerberosProperties.validatePrincipalAndKeytab(getClass().getSimpleName(), hbaseConfig, resolvedPrincipal, resolvedKeytab, getLogger()));
+            problems.addAll(KerberosProperties.validatePrincipalWithKeytabOrPassword(getClass().getSimpleName(), hbaseConfig, resolvedPrincipal, resolvedKeytab, null, getLogger()));
         }
 
         if (credentialsService != null && (explicitPrincipal != null || explicitKeytab != null)) {

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ConvertRecord.java
Patch:
@@ -41,7 +41,8 @@
 @Tags({"convert", "record", "generic", "schema", "json", "csv", "avro", "log", "logs", "freeform", "text"})
 @WritesAttributes({
     @WritesAttribute(attribute = "mime.type", description = "Sets the mime.type attribute to the MIME Type specified by the Record Writer"),
-    @WritesAttribute(attribute = "record.count", description = "The number of records in the FlowFile")
+    @WritesAttribute(attribute = "record.count", description = "The number of records in the FlowFile"),
+    @WritesAttribute(attribute = "record.error.message", description = "This attribute provides on failure the error message encountered by the Reader or Writer.")
 })
 @CapabilityDescription("Converts records from one data format to another using configured Record Reader and Record Write Controller Services. "
     + "The Reader and Writer must be configured with \"matching\" schemas. By this, we mean the schemas must have the same field names. The types of the fields "

File: nifi-nar-bundles/nifi-easyrules-bundle/nifi-easyrules-service/src/main/java/org/apache/nifi/rules/RulesMVELCondition.java
Patch:
@@ -19,7 +19,6 @@
 
 import org.jeasy.rules.api.Condition;
 import org.jeasy.rules.api.Facts;
-import org.jeasy.rules.mvel.MVELCondition;
 import org.mvel2.MVEL;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -28,7 +27,7 @@
 
 public class RulesMVELCondition implements Condition {
 
-    private static final Logger LOGGER = LoggerFactory.getLogger(MVELCondition.class);
+    private static final Logger LOGGER = LoggerFactory.getLogger(RulesMVELCondition.class);
     private String expression;
     private Serializable compiledExpression;
     private boolean ignoreConditionErrors;

File: nifi-nar-bundles/nifi-easyrules-bundle/nifi-easyrules-service/src/main/java/org/apache/nifi/rules/RulesSPELCondition.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.jeasy.rules.api.Condition;
 import org.jeasy.rules.api.Facts;
-import org.jeasy.rules.spel.SpELCondition;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.expression.Expression;
@@ -28,7 +27,7 @@
 import org.springframework.expression.spel.support.StandardEvaluationContext;
 
 public class RulesSPELCondition implements Condition {
-    private static final Logger LOGGER = LoggerFactory.getLogger(SpELCondition.class);
+    private static final Logger LOGGER = LoggerFactory.getLogger(RulesSPELCondition.class);
     private final ExpressionParser parser = new SpelExpressionParser();
     private String expression;
     private Expression compiledExpression;

File: nifi-nar-bundles/nifi-standard-services/nifi-rules-engine-service-api/src/main/java/org/apache/nifi/rules/engine/RulesEngineService.java
Patch:
@@ -26,7 +26,7 @@
 
 /**
  * <p>
- * A Controller Service that is responsible for executing rules engine against provided facts.  The subsequent
+ * A Controller Service that is responsible for executing a rules engine against provided facts.  The subsequent
  * actions can be executed either by the rules engine or a list of {@link Action} can be returned and interrogated/executed by
  * the caller.
  * </p>

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-properties-loader/src/main/java/org/apache/nifi/properties/sensitive/MultipleSensitivePropertyProtectionException.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.properties;
+package org.apache.nifi.properties.sensitive;
 
 import java.util.Collection;
 import java.util.HashSet;
@@ -66,7 +66,6 @@ public MultipleSensitivePropertyProtectionException(String message) {
      *                {@link #getCause()} method).  (A {@code null} value is
      *                permitted, and indicates that the cause is nonexistent or
      *                unknown.)
-     * @since 1.4
      */
     public MultipleSensitivePropertyProtectionException(String message, Throwable cause) {
         super(message, cause);
@@ -86,7 +85,6 @@ public MultipleSensitivePropertyProtectionException(String message, Throwable ca
      *              {@link #getCause()} method).  (A {@code null} value is
      *              permitted, and indicates that the cause is nonexistent or
      *              unknown.)
-     * @since 1.4
      */
     public MultipleSensitivePropertyProtectionException(Throwable cause) {
         super(cause);

File: nifi-nar-bundles/nifi-standard-services/nifi-distributed-cache-services-bundle/nifi-distributed-cache-client-service/src/main/java/org/apache/nifi/distributed/cache/client/StandardCommsSession.java
Patch:
@@ -71,6 +71,8 @@ public void interrupt() {
     @Override
     public void close() throws IOException {
         socketChannel.close();
+        bufferedIn.close();
+        bufferedOut.close();
     }
 
     @Override

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-processors/src/test/java/org/apache/nifi/processors/elasticsearch/TestQueryElasticsearchHttpNoHits.java
Patch:
@@ -257,7 +257,7 @@ private void runAndVerify(int expectedResults,int expectedQueryInfoResults,int e
                             if (expectHitCountOnQueryInfo) {
                                 out.assertAttributeEquals("es.query.hitcount", String.valueOf(expectedHits));
                             }
-                            Assert.assertTrue(out.getAttribute("es.query.url").startsWith("http://127.0.0.1:9200/doc/status/_search?q=source:Twitter%20AND%20identifier:%22%22&size=2"));
+                            Assert.assertTrue(out.getAttribute("es.query.url").startsWith("http://127.0.0.1:9200/doc/status/_search?q=source%3ATwitter%20AND%20identifier%3A%22%22&size=2"));
                         }
                     }
                 }

File: nifi-nar-bundles/nifi-kudu-bundle/nifi-kudu-processors/src/test/java/org/apache/nifi/processors/kudu/TestPutKudu.java
Patch:
@@ -60,6 +60,7 @@
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.sql.Timestamp;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -424,15 +425,15 @@ private PartialRow buildPartialRow(Long id, String name, Short age, String kuduI
             new RecordField(recordIdName, RecordFieldType.BIGINT.getDataType()),
             new RecordField("name", RecordFieldType.STRING.getDataType()),
             new RecordField("age", RecordFieldType.SHORT.getDataType()),
-            new RecordField("updated_at", RecordFieldType.BIGINT.getDataType()),
+            new RecordField("updated_at", RecordFieldType.TIMESTAMP.getDataType()),
             new RecordField("score", RecordFieldType.LONG.getDataType())));
 
         Map<String, Object> values = new HashMap<>();
         PartialRow row = kuduSchema.newPartialRow();
         values.put(recordIdName, id);
         values.put("name", name);
         values.put("age", age);
-        values.put("updated_at", System.currentTimeMillis() * 1000);
+        values.put("updated_at", new Timestamp(System.currentTimeMillis()));
         values.put("score", 10000L);
         processor.buildPartialRow(
             kuduSchema,

File: nifi-api/src/main/java/org/apache/nifi/components/VersionedComponent.java
Patch:
@@ -23,7 +23,8 @@ public interface VersionedComponent {
 
     /**
      * @return the unique identifier that maps this component to a component that is versioned
-     *         in a Flow Registry, or <code>Optional.empty</code> if this component has not been saved to a Flow Registry.
+     *         in a Flow Registry or has been imported, or <code>Optional.empty</code> if this component has not
+     *         been saved to a Flow Registry or imported.
      */
     Optional<String> getVersionedComponentId();
 

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/client/nifi/ConnectionClient.java
Patch:
@@ -47,4 +47,6 @@ public interface ConnectionClient {
     ListingRequestEntity deleteListingRequest(String connectionId, String listingRequestId) throws NiFiClientException, IOException;
 
     FlowFileEntity getFlowFile(String connectionId, String flowFileUuid) throws NiFiClientException, IOException;
+
+    FlowFileEntity getFlowFile(String connectionId, String flowFileUuid, String nodeId) throws NiFiClientException, IOException;
 }

File: nifi-toolkit/nifi-toolkit-tls/src/main/java/org/apache/nifi/toolkit/tls/configuration/TlsConfig.java
Patch:
@@ -28,7 +28,7 @@ public class TlsConfig {
     public static final String DEFAULT_HOSTNAME = "localhost";
     public static final String DEFAULT_KEY_STORE_TYPE = "jks";
     public static final int DEFAULT_PORT = 8443;
-    public static final int DEFAULT_DAYS = 3 * 365;
+    public static final int DEFAULT_DAYS = 825;
     public static final int DEFAULT_KEY_SIZE = 2048;
     public static final String DEFAULT_KEY_PAIR_ALGORITHM = "RSA";
     public static final String DEFAULT_SIGNING_ALGORITHM = "SHA256WITHRSA";

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/groups/StandardProcessGroup.java
Patch:
@@ -4633,9 +4633,9 @@ private void updateProcessor(final ProcessorNode processor, final VersionedProce
             processor.setPosition(new Position(proposed.getPosition().getX(), proposed.getPosition().getY()));
 
             if (proposed.getScheduledState() == org.apache.nifi.registry.flow.ScheduledState.DISABLED) {
-                disableProcessor(processor);
+                processor.getProcessGroup().disableProcessor(processor);
             } else if (processor.getScheduledState() == ScheduledState.DISABLED) {
-                enableProcessor(processor);
+                processor.getProcessGroup().enableProcessor(processor);
             }
 
             if (!isEqual(processor.getBundleCoordinate(), proposed.getBundle())) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/node/NodeClusterCoordinator.java
Patch:
@@ -259,6 +259,8 @@ public void setLocalNodeIdentifier(final NodeIdentifier nodeId) {
         this.nodeId = nodeId;
         nodeStatuses.computeIfAbsent(nodeId.getId(), id -> new NodeConnectionStatus(nodeId, DisconnectionCode.NOT_YET_CONNECTED));
         eventListeners.forEach(listener -> listener.onLocalNodeIdentifierSet(nodeId));
+
+        storeState();
     }
 
     @Override

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-shell-authorizer/src/main/java/org/apache/nifi/authorization/NssShellCommands.java
Patch:
@@ -85,6 +85,6 @@ public String getGroupById(String groupId) {
      * @return Shell command string that will exit normally (0) on a suitable system.
      */
     public String getSystemCheck() {
-        return "getent passwd";
+        return "getent --version";
     }
 }

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-restapi-processors/src/main/java/org/apache/nifi/processors/elasticsearch/PutElasticsearchRecord.java
Patch:
@@ -224,8 +224,6 @@ public void onTrigger(ProcessContext context, ProcessSession session) throws Pro
                     badRecords.add(bad);
                 }
             }
-
-            session.transfer(input, REL_SUCCESS);
         } catch (ElasticsearchError ese) {
             String msg = String.format("Encountered a server-side problem with Elasticsearch. %s",
                     ese.isElastic() ? "Moving to retry." : "Moving to failure");
@@ -234,11 +232,14 @@ public void onTrigger(ProcessContext context, ProcessSession session) throws Pro
             session.penalize(input);
             session.transfer(input, rel);
             removeBadRecordFlowFiles(badRecords, session);
+            return;
         } catch (Exception ex) {
             getLogger().error("Could not index documents.", ex);
             session.transfer(input, REL_FAILURE);
             removeBadRecordFlowFiles(badRecords, session);
+            return;
         }
+        session.transfer(input, REL_SUCCESS);
     }
 
     private void removeBadRecordFlowFiles(List<FlowFile> bad, ProcessSession session) {

File: nifi-nar-bundles/nifi-hbase-bundle/nifi-hbase-processors/src/main/java/org/apache/nifi/hbase/DeleteHBaseCells.java
Patch:
@@ -109,6 +109,7 @@ protected void doDelete(ProcessContext context, ProcessSession session) throws E
                 String[] parts = line.split(separator);
                 if (parts.length < 3 || parts.length > 4) {
                     final String msg = String.format("Invalid line length. It must have 3 or 4 components. It had %d.", parts.length);
+                    is.close();
                     input = writeErrorAttributes(lineNum, msg, input, session);
                     session.transfer(input, REL_FAILURE);
                     getLogger().error(msg);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-security/src/main/java/org/apache/nifi/framework/security/util/SslContextFactory.java
Patch:
@@ -98,7 +98,6 @@ private static boolean hasKeystoreProperties(final NiFiProperties props) {
 
     private static boolean hasTruststoreProperties(final NiFiProperties props) {
         return (StringUtils.isNotBlank(props.getProperty(NiFiProperties.SECURITY_TRUSTSTORE))
-                && StringUtils.isNotBlank(props.getProperty(NiFiProperties.SECURITY_TRUSTSTORE_PASSWD))
                 && StringUtils.isNotBlank(props.getProperty(NiFiProperties.SECURITY_TRUSTSTORE_TYPE)));
     }
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestListenHTTP.java
Patch:
@@ -92,6 +92,7 @@ public void setup() throws IOException {
     @After
     public void teardown() {
         proc.shutdownHttpServer();
+        new File("/Users/alopresto/Workspace/nifi/nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/my-file-text.txt").delete();
     }
 
     @Test
@@ -482,7 +483,7 @@ private byte[] generateRandomBinaryData(int i) {
       return bytes;
     }
      private File createTextFile(String fileName, String... lines) throws IOException {
-      File file = new File(fileName);
+      File file = new File("target/" + fileName);
       file.deleteOnExit();
       for (String string : lines) {
         Files.append(string, file, Charsets.UTF_8);

File: nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/processors/AbstractJMSProcessor.java
Patch:
@@ -179,6 +179,8 @@ public void onTrigger(ProcessContext context, ProcessSession session) throws Pro
 
         try {
             rendezvousWithJms(context, session, worker);
+        } catch (Exception e) {
+            getLogger().error("Error while trying to process JMS message", e);
         } finally {
             //in case of exception during worker's connection (consumer or publisher),
             //an appropriate service is responsible to invalidate the worker.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/repository/StandardProcessSession.java
Patch:
@@ -56,7 +56,6 @@
 import org.apache.nifi.stream.io.ByteCountingInputStream;
 import org.apache.nifi.stream.io.ByteCountingOutputStream;
 import org.apache.nifi.stream.io.StreamUtils;
-import org.rocksdb.Checkpoint;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/integration/swap/StandaloneSwapFileIT.java
Patch:
@@ -35,10 +35,8 @@
 import static org.testng.Assert.assertNull;
 
 public class StandaloneSwapFileIT extends FrameworkIntegrationTest {
-    @Test
+    @Test(timeout=60_000)
     public void testSwapOnRestart() throws ExecutionException, InterruptedException, IOException {
-        Thread.sleep(20000L);
-
         final ProcessorNode generator = createProcessorNode(GenerateProcessor.class);
         generator.setProperties(Collections.singletonMap(GenerateProcessor.COUNT.getName(), "60000"));
 

File: nifi-nar-bundles/nifi-extension-utils/nifi-hadoop-utils/src/main/java/org/apache/nifi/processors/hadoop/AbstractHadoopProcessor.java
Patch:
@@ -112,8 +112,8 @@ public abstract class AbstractHadoopProcessor extends AbstractProcessor {
 
     public static final PropertyDescriptor ADDITIONAL_CLASSPATH_RESOURCES = new PropertyDescriptor.Builder()
             .name("Additional Classpath Resources")
-            .description("A comma-separated list of paths to files and/or directories that will be added to the classpath. When specifying a " +
-                    "directory, all files with in the directory will be added to the classpath, but further sub-directories will not be included.")
+            .description("A comma-separated list of paths to files and/or directories that will be added to the classpath and used for loading native libraries. " +
+                    "When specifying a directory, all files with in the directory will be added to the classpath, but further sub-directories will not be included.")
             .required(false)
             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)
             .dynamicallyModifiesClasspath(true)

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/test/java/org/apache/nifi/controller/TestAbstractComponentNode.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.nifi.controller;
 
+import org.apache.nifi.nar.ExtensionManager;
 import org.apache.nifi.parameter.ParameterLookup;
 import org.apache.nifi.authorization.Resource;
 import org.apache.nifi.authorization.resource.Authorizable;
@@ -27,7 +28,6 @@
 import org.apache.nifi.components.validation.ValidationStatus;
 import org.apache.nifi.components.validation.ValidationTrigger;
 import org.apache.nifi.controller.service.ControllerServiceProvider;
-import org.apache.nifi.nar.StandardExtensionDiscoveringManager;
 import org.apache.nifi.parameter.ParameterContext;
 import org.apache.nifi.registry.ComponentVariableRegistry;
 import org.junit.Test;
@@ -88,7 +88,7 @@ private static class ValidationControlledAbstractComponentNode extends AbstractC
         public ValidationControlledAbstractComponentNode(final long pauseMillis, final ValidationTrigger validationTrigger) {
             super("id", Mockito.mock(ValidationContextFactory.class), Mockito.mock(ControllerServiceProvider.class), "unit test component",
                 ValidationControlledAbstractComponentNode.class.getCanonicalName(), Mockito.mock(ComponentVariableRegistry.class), Mockito.mock(ReloadComponent.class),
-                Mockito.mock(StandardExtensionDiscoveringManager.class), validationTrigger, false);
+                Mockito.mock(ExtensionManager.class), validationTrigger, false);
 
             this.pauseMillis = pauseMillis;
         }

File: nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/kms/EncryptionException.java
Patch:
@@ -18,6 +18,9 @@
 
 import java.security.PrivilegedActionException;
 
+/**
+ * Class used to denote a problem configuring encryption services or encrypting/decrypting data.
+ */
 public class EncryptionException extends Exception {
     /**
      * Constructs a new exception with the specified detail message.  The

File: nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/repository/config/RepositoryEncryptionConfiguration.java
Patch:
@@ -107,6 +107,7 @@ public static RepositoryEncryptionConfiguration fromNiFiProperties(NiFiPropertie
             case PROVENANCE:
                 return new ProvenanceRepositoryEncryptionConfiguration(niFiProperties);
             case FLOWFILE:
+                return new FlowFileRepositoryEncryptionConfiguration(niFiProperties);
             default:
                 throw new IllegalArgumentException("The specified repository does not support encryption");
         }

File: nifi-commons/nifi-write-ahead-log/src/main/java/org/apache/nifi/wali/ByteArrayDataOutputStream.java
Patch:
@@ -30,8 +30,8 @@ public class ByteArrayDataOutputStream {
     private final ByteArrayOutputStream baos;
     private final DataOutputStream dos;
 
-    public ByteArrayDataOutputStream(final int intiialBufferSize) {
-        this.baos = new ByteArrayOutputStream(intiialBufferSize);
+    public ByteArrayDataOutputStream(final int initialBufferSize) {
+        this.baos = new ByteArrayOutputStream(initialBufferSize);
         this.dos = new DataOutputStream(baos);
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-flowfile-repo-serialization/src/main/java/org/apache/nifi/controller/repository/StandardRepositoryRecordSerdeFactory.java
Patch:
@@ -17,13 +17,12 @@
 
 package org.apache.nifi.controller.repository;
 
+import java.util.Map;
 import org.apache.nifi.controller.queue.FlowFileQueue;
 import org.apache.nifi.controller.repository.claim.ResourceClaimManager;
 import org.wali.SerDe;
 import org.wali.UpdateType;
 
-import java.util.Map;
-
 public class StandardRepositoryRecordSerdeFactory implements RepositoryRecordSerdeFactory {
     private final String LEGACY_SERDE_ENCODING_NAME = "org.apache.nifi.controller.repository.WriteAheadFlowFileRepository$WriteAheadRecordSerde";
     private final ResourceClaimManager resourceClaimManager;

File: nifi-nar-bundles/nifi-provenance-repository-bundle/nifi-persistent-provenance-repository/src/main/java/org/apache/nifi/provenance/RepositoryConfiguration.java
Patch:
@@ -52,6 +52,7 @@ public class RepositoryConfiguration {
     private int maxAttributeChars = 65536;
     private int debugFrequency = 1_000_000;
 
+    // TODO: Delegaate to RepositoryEncryptionConfiguration in NIFI-6617
     private Map<String, String> encryptionKeys;
     private String keyId;
     private String keyProviderImplementation;
@@ -494,6 +495,7 @@ public static RepositoryConfiguration create(final NiFiProperties nifiProperties
 
         config.setDebugFrequency(nifiProperties.getIntegerProperty(NiFiProperties.PROVENANCE_REPO_DEBUG_FREQUENCY, config.getDebugFrequency()));
 
+        // TODO: Check for multiple key loading (NIFI-6617)
         // Encryption values may not be present but are only required for EncryptedWriteAheadProvenanceRepository
         final String implementationClassName = nifiProperties.getProperty(NiFiProperties.PROVENANCE_REPO_IMPLEMENTATION_CLASS);
         if (EncryptedWriteAheadProvenanceRepository.class.getName().equals(implementationClassName)) {

File: nifi-nar-bundles/nifi-provenance-repository-bundle/nifi-persistent-provenance-repository/src/main/java/org/apache/nifi/provenance/serialization/RecordReaders.java
Patch:
@@ -38,7 +38,8 @@
 import org.apache.nifi.provenance.toc.StandardTocReader;
 import org.apache.nifi.provenance.toc.TocReader;
 import org.apache.nifi.provenance.toc.TocUtil;
-import org.apache.nifi.security.kms.CryptoUtils;
+import org.apache.nifi.security.repository.RepositoryEncryptorUtils;
+import org.apache.nifi.security.repository.RepositoryType;
 import org.apache.nifi.util.NiFiProperties;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -195,7 +196,7 @@ private static boolean isEncryptionAvailable() {
         } else {
             try {
                 NiFiProperties niFiProperties = NiFiPropertiesLoader.loadDefaultWithKeyFromBootstrap();
-                isEncryptionAvailable = CryptoUtils.isProvenanceRepositoryEncryptionConfigured(niFiProperties);
+                isEncryptionAvailable = RepositoryEncryptorUtils.isRepositoryEncryptionConfigured(niFiProperties, RepositoryType.PROVENANCE);
                 encryptionPropertiesRead = true;
             } catch (IOException e) {
                 logger.error("Encountered an error checking the provenance repository encryption configuration: ", e);

File: nifi-nar-bundles/nifi-extension-utils/nifi-record-utils/nifi-avro-record-utils/src/main/java/org/apache/nifi/avro/AvroTypeUtil.java
Patch:
@@ -626,7 +626,7 @@ private static void addFieldToList(final List<RecordField> recordFields, final F
             recordFields.add(new RecordField(fieldName, dataType, field.aliases(), nullable));
         } else {
             Object defaultValue = field.defaultVal();
-            if (fieldSchema.getType() == Schema.Type.ARRAY && !DataTypeUtils.isArrayTypeCompatible(defaultValue, ((ArrayDataType) dataType).getElementType())) {
+            if (defaultValue != null && fieldSchema.getType() == Schema.Type.ARRAY && !DataTypeUtils.isArrayTypeCompatible(defaultValue, ((ArrayDataType) dataType).getElementType())) {
                 defaultValue = defaultValue instanceof List ? ((List<?>) defaultValue).toArray() : new Object[0];
             }
             recordFields.add(new RecordField(fieldName, dataType, defaultValue, field.aliases(), nullable));

File: nifi-nar-bundles/nifi-site-to-site-reporting-bundle/nifi-site-to-site-reporting-task/src/main/java/org/apache/nifi/reporting/AbstractSiteToSiteReportingTask.java
Patch:
@@ -117,7 +117,7 @@ protected List<PropertyDescriptor> getSupportedPropertyDescriptors() {
     }
 
     public void setup(final ReportingContext reportContext) throws IOException {
-        if (siteToSiteClient != null) {
+        if (siteToSiteClient == null) {
             siteToSiteClient = SiteToSiteUtils.getClient(reportContext, getLogger());
         }
     }
@@ -127,6 +127,7 @@ public void shutdown() throws IOException {
         final SiteToSiteClient client = getClient();
         if (client != null) {
             client.close();
+            siteToSiteClient = null;
         }
     }
 

File: nifi-nar-bundles/nifi-site-to-site-reporting-bundle/nifi-site-to-site-reporting-task/src/main/java/org/apache/nifi/reporting/SiteToSiteMetricsReportingTask.java
Patch:
@@ -192,6 +192,9 @@ public void onTrigger(final ReportingContext context) {
             }
 
             try {
+                // Lazily create SiteToSiteClient to provide a StateManager
+                setup(context);
+
                 long start = System.nanoTime();
                 final Transaction transaction = getClient().createTransaction(TransferDirection.SEND);
                 if (transaction == null) {

File: nifi-nar-bundles/nifi-site-to-site-reporting-bundle/nifi-site-to-site-reporting-task/src/main/java/org/apache/nifi/reporting/SiteToSiteProvenanceReportingTask.java
Patch:
@@ -305,6 +305,9 @@ public void onTrigger(final ReportingContext context) {
 
             // Send the JSON document for the current batch
             try {
+                // Lazily create SiteToSiteClient to provide a StateManager
+                setup(context);
+
                 final Transaction transaction = getClient().createTransaction(TransferDirection.SEND);
                 if (transaction == null) {
                     // Throw an exception to avoid provenance event id will not proceed so that those can be consumed again.

File: nifi-nar-bundles/nifi-site-to-site-reporting-bundle/nifi-site-to-site-reporting-task/src/main/java/org/apache/nifi/reporting/SiteToSiteStatusReportingTask.java
Patch:
@@ -158,6 +158,9 @@ public void onTrigger(final ReportingContext context) {
         while(!jsonBatch.isEmpty()) {
             // Send the JSON document for the current batch
             try {
+                // Lazily create SiteToSiteClient to provide a StateManager
+                setup(context);
+
                 long start = System.nanoTime();
                 final Transaction transaction = getClient().createTransaction(TransferDirection.SEND);
                 if (transaction == null) {

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/main/java/org/apache/nifi/processors/hadoop/PutHDFS.java
Patch:
@@ -152,8 +152,8 @@ public class PutHDFS extends AbstractHadoopProcessor {
             .name("Permissions umask")
             .description(
                    "A umask represented as an octal number which determines the permissions of files written to HDFS. " +
-                           "This overrides the Hadoop property \"fs.permission.umask-mode\".  " +
-                           "If this property and \"fs.permission.umask-mode\" are undefined, the Hadoop default \"022\" will be used.")
+                           "This overrides the Hadoop property \"fs.permissions.umask-mode\".  " +
+                           "If this property and \"fs.permissions.umask-mode\" are undefined, the Hadoop default \"022\" will be used.")
             .addValidator(HadoopValidators.UMASK_VALIDATOR)
             .build();
 

File: nifi-commons/nifi-parameter/src/main/java/org/apache/nifi/parameter/ExpressionLanguageAgnosticParameterParser.java
Patch:
@@ -65,7 +65,6 @@ public ParameterTokenList parseTokens(final String input) {
             }
         }
 
-        logger.debug("For input {} found {} Parameter references: {}", input, references.size(), references);
         return new StandardParameterTokenList(input, references);
     }
 }

File: nifi-commons/nifi-parameter/src/main/java/org/apache/nifi/parameter/ExpressionLanguageAwareParameterParser.java
Patch:
@@ -103,7 +103,6 @@ public ParameterTokenList parseTokens(final String input) {
             lastChar = c;
         }
 
-        logger.debug("For input {} found {} Parameter references: {}", input, tokens.size(), tokens);
         return new StandardParameterTokenList(input, tokens);
     }
 

File: nifi-commons/nifi-properties/src/test/java/org/apache/nifi/util/NiFiPropertiesTest.java
Patch:
@@ -191,7 +191,7 @@ public void testShouldVerifyExceptionThrownWhenInValidFormatPortValue() {
 
         // Arrange
         // Port Value is invalid Format
-        String portValue = "8000";
+        String portValue = "8000a";
         Map<String, String> additionalProperties = new HashMap<>();
         additionalProperties.put(NiFiProperties.CLUSTER_NODE_PROTOCOL_PORT, portValue);
         NiFiProperties properties = loadNiFiProperties("/NiFiProperties/conf/nifi.blank.properties", additionalProperties);

File: nifi-commons/nifi-properties/src/main/java/org/apache/nifi/util/NiFiProperties.java
Patch:
@@ -744,7 +744,7 @@ public InetSocketAddress getClusterNodeProtocolAddress() {
             }
             int socketPort = getClusterNodeProtocolPort();
             if (socketPort == 0) {
-                throw new RuntimeException("Load balance port cannot be 0. Port must be inclusively in the range [1, 65535].");
+                throw new RuntimeException("Cluster Node Protocol port cannot be 0. Port must be inclusively in the range [1, 65535].");
             }
             return InetSocketAddress.createUnresolved(socketAddress, socketPort);
         } catch (Exception ex) {

File: nifi-commons/nifi-properties/src/test/java/org/apache/nifi/util/NiFiPropertiesTest.java
Patch:
@@ -191,7 +191,7 @@ public void testShouldVerifyExceptionThrownWhenInValidFormatPortValue() {
 
         // Arrange
         // Port Value is invalid Format
-        String portValue = "8000a";
+        String portValue = "8000";
         Map<String, String> additionalProperties = new HashMap<>();
         additionalProperties.put(NiFiProperties.CLUSTER_NODE_PROTOCOL_PORT, portValue);
         NiFiProperties properties = loadNiFiProperties("/NiFiProperties/conf/nifi.blank.properties", additionalProperties);

File: nifi-mock/src/main/java/org/apache/nifi/util/MockProcessSession.java
Patch:
@@ -589,6 +589,7 @@ public InputStream read(FlowFile flowFile) {
         final MockFlowFile mock = validateState(flowFile);
 
         final ByteArrayInputStream bais = new ByteArrayInputStream(mock.getData());
+        incrementReadCount(flowFile);
         final InputStream errorHandlingStream = new InputStream() {
             @Override
             public int read() throws IOException {
@@ -602,6 +603,7 @@ public int read(byte[] b, int off, int len) throws IOException {
 
             @Override
             public void close() throws IOException {
+                decrementReadCount(flowFile);
                 openInputStreams.remove(mock);
                 bais.close();
             }

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/command/registry/flow/ImportFlowVersion.java
Patch:
@@ -95,7 +95,9 @@ public StringResult doExecute(final NiFiRegistryClient client, final Properties
         final VersionedFlowSnapshot snapshot = new VersionedFlowSnapshot();
         snapshot.setSnapshotMetadata(metadata);
         snapshot.setFlowContents(deserializedSnapshot.getFlowContents());
-
+        snapshot.setExternalControllerServices(deserializedSnapshot.getExternalControllerServices());
+        snapshot.setParameterContexts(deserializedSnapshot.getParameterContexts());
+        snapshot.setFlowEncodingVersion(deserializedSnapshot.getFlowEncodingVersion());
 
         final VersionedFlowSnapshot createdSnapshot = snapshotClient.create(snapshot);
         final VersionedFlowSnapshotMetadata createdMetadata = createdSnapshot.getSnapshotMetadata();

File: nifi-nar-bundles/nifi-atlas-bundle/nifi-atlas-reporting-task/src/main/java/org/apache/nifi/atlas/hook/NotificationSender.java
Patch:
@@ -191,6 +191,8 @@ private Collection<Referenceable> mergeRefs(Collection<Referenceable> r1, Collec
      * @param notifier responsible for sending notification messages, its accept method can be called multiple times
      */
     void send(final List<HookNotification.HookNotificationMessage> messages, final Consumer<List<HookNotification.HookNotificationMessage>> notifier) {
+        logger.info("Sending {} messages to Atlas", messages.size());
+
         final Metrics metrics = new Metrics();
         try {
             metrics.totalMessages = messages.size();

File: nifi-nar-bundles/nifi-couchbase-bundle/nifi-couchbase-processors/src/main/java/org/apache/nifi/couchbase/CouchbaseMapCacheClient.java
Patch:
@@ -145,7 +145,7 @@ public <K, V> V getAndPutIfAbsent(K key, V value, Serializer<K> keySerializer, S
 
     @Override
     public <K, V> boolean replace(AtomicCacheEntry<K, V, Long> entry, Serializer<K> keySerializer, Serializer<V> valueSerializer) throws IOException {
-        final Long revision = entry.getRevision().orElse(0L);
+        final Long revision = entry.getRevision().orElse(-1L);
         final String docId = toDocumentId(entry.getKey(), keySerializer);
         final Document doc = toDocument(docId, entry.getValue(), valueSerializer, revision);
         try {

File: nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JMSConnectionFactoryProvider.java
Patch:
@@ -63,7 +63,8 @@
 @DynamicProperty(name = "The name of a Connection Factory configuration property.", value = "The value of a given Connection Factory configuration property.",
         description = "The properties that are set following Java Beans convention where a property name is derived from the 'set*' method of the vendor "
                 + "specific ConnectionFactory's implementation. For example, 'com.ibm.mq.jms.MQConnectionFactory.setChannel(String)' would imply 'channel' "
-                + "property and 'com.ibm.mq.jms.MQConnectionFactory.setTransportType(int)' would imply 'transportType' property.")
+                + "property and 'com.ibm.mq.jms.MQConnectionFactory.setTransportType(int)' would imply 'transportType' property.",
+                expressionLanguageScope = ExpressionLanguageScope.VARIABLE_REGISTRY)
 @SeeAlso(classNames = {"org.apache.nifi.jms.processors.ConsumeJMS", "org.apache.nifi.jms.processors.PublishJMS"})
 public class JMSConnectionFactoryProvider extends AbstractControllerService implements JMSConnectionFactoryProviderDefinition {
 
@@ -134,6 +135,7 @@ protected PropertyDescriptor getSupportedDynamicPropertyDescriptor(final String
                         + "' property to be set on the provided ConnectionFactory implementation.")
                 .name(propertyDescriptorName)
                 .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)
+                .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)
                 .dynamic(true)
                 .build();
     }

File: nifi-nar-bundles/nifi-kudu-bundle/nifi-kudu-processors/src/main/java/org/apache/nifi/processors/kudu/AbstractKuduProcessor.java
Patch:
@@ -121,8 +121,8 @@ public void createKuduClient(ProcessContext context) throws LoginException {
 
 
     protected KuduClient buildClient(final String masters, final ProcessContext context) {
-        final Integer operationTimeout = context.getProperty(KUDU_OPERATION_TIMEOUT_MS).asTimePeriod(TimeUnit.MILLISECONDS).intValue();
-        final Integer adminOperationTimeout = context.getProperty(KUDU_KEEP_ALIVE_PERIOD_TIMEOUT_MS).asTimePeriod(TimeUnit.MILLISECONDS).intValue();
+        final Integer operationTimeout = context.getProperty(KUDU_OPERATION_TIMEOUT_MS).evaluateAttributeExpressions().asTimePeriod(TimeUnit.MILLISECONDS).intValue();
+        final Integer adminOperationTimeout = context.getProperty(KUDU_KEEP_ALIVE_PERIOD_TIMEOUT_MS).evaluateAttributeExpressions().asTimePeriod(TimeUnit.MILLISECONDS).intValue();
 
         return new KuduClient.KuduClientBuilder(masters)
                 .defaultOperationTimeoutMs(operationTimeout)

File: nifi-nar-bundles/nifi-kudu-bundle/nifi-kudu-processors/src/test/java/org/apache/nifi/processors/kudu/MockPutKudu.java
Patch:
@@ -162,7 +162,7 @@ public String getPrincipal() {
     }
 
     @Override
-    protected KuduSession getKuduSession(KuduClient client) {
+    protected KuduSession createKuduSession(KuduClient client) {
         return session;
     }
 }
\ No newline at end of file

File: nifi-nar-bundles/nifi-extension-utils/nifi-hadoop-utils/src/main/java/org/apache/nifi/processors/hadoop/AbstractHadoopProcessor.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.nifi.processors.hadoop;
 
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;

File: nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/processors/JMSPublisher.java
Patch:
@@ -105,14 +105,14 @@ void setMessageHeaderAndProperties(final Message message, final Map<String, Stri
                         if (destination != null) {
                             message.setJMSReplyTo(destination);
                         } else {
-                            logUnbuildableDestination(entry.getKey(), JmsHeaders.REPLY_TO);
+                            logUnbuildableDestination(entry.getValue(), JmsHeaders.REPLY_TO);
                         }
                     } else if (entry.getKey().equals(JmsHeaders.DESTINATION)) {
                         Destination destination = buildDestination(entry.getValue());
                         if (destination != null) {
                             message.setJMSDestination(destination);
                         } else {
-                            logUnbuildableDestination(entry.getKey(), JmsHeaders.DESTINATION);
+                            logUnbuildableDestination(entry.getValue(), JmsHeaders.DESTINATION);
                         }
                     } else {
                         // not a special attribute handled above, so send it as a property using the specified property type

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-restapi-processors/src/main/java/org/apache/nifi/processors/elasticsearch/DeleteByQueryElasticsearch.java
Patch:
@@ -43,14 +43,14 @@
 import java.util.Set;
 
 @InputRequirement(InputRequirement.Requirement.INPUT_ALLOWED)
-@CapabilityDescription("Delete from an ElasticSearch index using a query. The query can be loaded from a flowfile body " +
+@CapabilityDescription("Delete from an Elasticsearch index using a query. The query can be loaded from a flowfile body " +
         "or from the Query parameter.")
 @Tags({ "elastic", "elasticsearch", "delete", "query"})
 @WritesAttributes({
     @WritesAttribute(attribute = "elasticsearch.delete.took", description = "The amount of time that it took to complete the delete operation in ms."),
-    @WritesAttribute(attribute = "elasticsearch.delete.error", description = "The error message provided by ElasticSearch if there is an error running the delete.")
+    @WritesAttribute(attribute = "elasticsearch.delete.error", description = "The error message provided by Elasticsearch if there is an error running the delete.")
 })
-public class DeleteByQueryElasticsearch extends AbstractProcessor implements ElasticSearchRestProcessor {
+public class DeleteByQueryElasticsearch extends AbstractProcessor implements ElasticsearchRestProcessor {
     public static final Relationship REL_FAILURE = new Relationship.Builder().name("failure")
         .description("If the delete by query fails, and a flowfile was read, it will be sent to this relationship.").build();
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/MergeRecord.java
Patch:
@@ -353,9 +353,10 @@ public void onTrigger(final ProcessContext context, final ProcessSessionFactory
             session.commit();
         }
 
-        // If there is no more data queued up, complete any bin that meets our minimum threshold
+        // If there is no more data queued up, or strategy is defragment, complete any bin that meets our minimum threshold
+        // Otherwise, run one more cycle to process queued FlowFiles to add more fragment into available bins.
         int completedBins = 0;
-        if (flowFiles.isEmpty()) {
+        if (flowFiles.isEmpty() || MERGE_STRATEGY_DEFRAGMENT.getValue().equals(mergeStrategy)) {
             try {
                 completedBins += manager.completeFullEnoughBins();
             } catch (final Exception e) {

File: nifi-commons/nifi-utils/src/main/java/org/apache/nifi/util/file/FileUtils.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.nifi.util.file;
 
+import org.slf4j.Logger;
+
 import java.io.Closeable;
 import java.io.File;
 import java.io.FileInputStream;
@@ -36,8 +38,6 @@
 import java.util.List;
 import java.util.Random;
 
-import org.slf4j.Logger;
-
 /**
  * A utility class containing a few useful static methods to do typical IO operations.
  *
@@ -249,7 +249,7 @@ public static void deleteFile(final File file, final boolean recurse) throws IOE
         }
         //now delete the file itself regardless of whether it is plain file or a directory
         if (!FileUtils.deleteFile(file, null, 5)) {
-            throw new IOException("Unable to delete " + file.getAbsolutePath());
+            Files.delete(file.toPath());
         }
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/integration/versioned/ImportFlowIT.java
Patch:
@@ -162,7 +162,7 @@ public void testLocalModificationWhenSensitivePropReferencesParameter() {
         processor.setProperties(Collections.singletonMap(UsernamePasswordProcessor.PASSWORD.getName(), "#{secret-parameter}"));
         differences = getLocalModifications(innerGroup, versionedFlowWithExplicitValue);
         assertEquals(1, differences.size());
-        assertEquals(DifferenceType.PROPERTY_ADDED, differences.iterator().next().getDifferenceType());
+        assertEquals(DifferenceType.PROPERTY_PARAMETERIZED, differences.iterator().next().getDifferenceType());
 
         // Create a Versioned Flow that contains the Parameter Reference.
         final VersionedFlowSnapshot versionedFlowWithParameterReference = createFlowSnapshot(Collections.emptyList(), Collections.singletonList(processor), null);
@@ -174,7 +174,7 @@ public void testLocalModificationWhenSensitivePropReferencesParameter() {
         processor.setProperties(Collections.singletonMap(UsernamePasswordProcessor.PASSWORD.getName(), "secret"));
         differences = getLocalModifications(innerGroup, versionedFlowWithParameterReference);
         assertEquals(1, differences.size());
-        assertEquals(DifferenceType.PROPERTY_REMOVED, differences.iterator().next().getDifferenceType());
+        assertEquals(DifferenceType.PROPERTY_PARAMETERIZATION_REMOVED, differences.iterator().next().getDifferenceType());
     }
 
     @Test

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-runtime/src/main/java/org/apache/nifi/BootstrapListener.java
Patch:
@@ -179,6 +179,7 @@ public void run() {
                                     case SHUTDOWN:
                                         logger.info("Received SHUTDOWN request from Bootstrap");
                                         echoShutdown(socket.getOutputStream());
+                                        socket.close();
                                         nifi.shutdownHook();
                                         return;
                                     case DUMP:

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/client/nifi/ProcessGroupClient.java
Patch:
@@ -53,5 +53,4 @@ ControllerServiceEntity createControllerService(String processGroupId, Controlle
             throws NiFiClientException, IOException;
 
     TemplateEntity uploadTemplate(String processGroupId, TemplateDTO templateDTO) throws NiFiClientException, IOException;
-
 }

File: nifi-nar-bundles/nifi-easyrules-bundle/nifi-easyrules-service/src/test/java/org/apache/nifi/rules/TestRulesFactory.java
Patch:
@@ -128,7 +128,7 @@ private boolean confirmEntries(List<Rule> rules){
                 && rule1.getPriority() == 1 && rule1.getCondition().equals("predictedQueuedCount > 50");
 
         checkDiagnostic = rule2.getName().equals("Time To Back Pressure") && rule2.getDescription().equals("Back pressure time less than 5 minutes")
-                && rule2.getPriority() == 2 && rule2.getCondition().equals("predictedTimeToBytesBackpressureMillis >= 300000") && checkDiagnostic;
+                && rule2.getPriority() == 2 && rule2.getCondition().equals("predictedTimeToBytesBackpressureMillis < 300000 && predictedTimeToBytesBackpressureMillis >= 0") && checkDiagnostic;
 
         return checkDiagnostic;
 

File: nifi-nar-bundles/nifi-extension-utils/nifi-database-utils/src/main/java/org/apache/nifi/util/db/JdbcCommon.java
Patch:
@@ -569,7 +569,9 @@ public static Schema createSchema(final ResultSet rs, AvroConversionOptions opti
                         if (meta.getPrecision(i) > 0) {
                             // When database returns a certain precision, we can rely on that.
                             decimalPrecision = meta.getPrecision(i);
-                            decimalScale = meta.getScale(i);
+                            //For the float data type Oracle return decimalScale < 0 which cause is not expected to org.apache.avro.LogicalTypes
+                            //Hence falling back to default scale if decimalScale < 0
+                            decimalScale = meta.getScale(i) > 0 ? meta.getScale(i) : options.defaultScale;
                         } else {
                             // If not, use default precision.
                             decimalPrecision = options.defaultPrecision;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/repository/TestStandardProcessSession.java
Patch:
@@ -394,7 +394,7 @@ public void testReadCountCorrectWhenSkippingWithReadInputStream() throws IOExcep
             assertEquals(5, in.skip(5L));
             assertEquals('n', (char) in.read());
             in.reset();
-        };
+        }
 
         session.transfer(flowFile);
         session.commit();

File: nifi-nar-bundles/nifi-cdc/nifi-cdc-mysql-bundle/nifi-cdc-mysql-processors/src/main/java/org/apache/nifi/cdc/mysql/processors/CaptureChangeMySQL.java
Patch:
@@ -489,7 +489,7 @@ public void setup(ProcessContext context) {
                 currentSequenceId.set(seqIdProp.evaluateAttributeExpressions().asInteger());
             }
         } else {
-            currentSequenceId.set(Integer.parseInt(seqIdString));
+            currentSequenceId.set(Long.parseLong(seqIdString));
         }
 
         // Get reference to Distributed Cache if one exists. If it does not, no enrichment (resolution of column names, e.g.) will be performed

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/status/analytics/ConnectionStatusAnalytics.java
Patch:
@@ -57,7 +57,7 @@ public class ConnectionStatusAnalytics implements StatusAnalytics {
     private final Boolean supportOnlineLearning;
     private Boolean extendWindow = false;
     private long intervalMillis = 3L * 60 * 1000; // Default is 3 minutes
-    private long queryIntervalMillis = 3L * 60 * 1000;  //Default is 3 minutes
+    private long queryIntervalMillis = 5L * 60 * 1000;  //Default is 3 minutes
     private String scoreName = "rSquared";
     private double scoreThreshold = .90;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/status/analytics/TestStatusAnalyticsModelMapFactory.java
Patch:
@@ -51,9 +51,8 @@ public void setup() {
 
     @Test
     public void getConnectionStatusModelMap() {
-        Map<String, Tuple<StatusAnalyticsModel, StatusMetricExtractFunction>> modelMap = StatusAnalyticsModelMapFactory
-                .getConnectionStatusModelMap(extensionManager, nifiProperties);
-
+        StatusAnalyticsModelMapFactory factory = new StatusAnalyticsModelMapFactory(extensionManager,nifiProperties);
+        Map<String, Tuple<StatusAnalyticsModel, StatusMetricExtractFunction>> modelMap = factory.getConnectionStatusModelMap();
         assertNotNull(modelMap.get("queuedCount"));
         assertNotNull(modelMap.get("queuedBytes"));
         StatusAnalyticsModel countModel = modelMap.get("queuedCount").getKey();

File: nifi-nar-bundles/nifi-site-to-site-reporting-bundle/nifi-site-to-site-reporting-task/src/main/java/org/apache/nifi/reporting/SiteToSiteMetricsReportingTask.java
Patch:
@@ -54,6 +54,7 @@
 import org.apache.nifi.processor.util.StandardValidators;
 import org.apache.nifi.remote.Transaction;
 import org.apache.nifi.remote.TransferDirection;
+import org.apache.nifi.reporting.s2s.SiteToSiteUtils;
 import org.apache.nifi.reporting.util.metrics.MetricNames;
 import org.apache.nifi.reporting.util.metrics.MetricsService;
 import org.apache.nifi.reporting.util.metrics.api.MetricsBuilder;
@@ -113,7 +114,7 @@ protected List<PropertyDescriptor> getSupportedPropertyDescriptors() {
         properties.add(HOSTNAME);
         properties.add(APPLICATION_ID);
         properties.add(FORMAT);
-        properties.remove(BATCH_SIZE);
+        properties.remove(SiteToSiteUtils.BATCH_SIZE);
         return properties;
     }
 

File: nifi-nar-bundles/nifi-site-to-site-reporting-bundle/nifi-site-to-site-reporting-task/src/main/java/org/apache/nifi/reporting/SiteToSiteStatusReportingTask.java
Patch:
@@ -56,6 +56,7 @@
 import org.apache.nifi.processor.util.StandardValidators;
 import org.apache.nifi.remote.Transaction;
 import org.apache.nifi.remote.TransferDirection;
+import org.apache.nifi.reporting.s2s.SiteToSiteUtils;
 
 @Tags({"status", "metrics", "history", "site", "site to site"})
 @CapabilityDescription("Publishes Status events using the Site To Site protocol.  "
@@ -124,7 +125,7 @@ public void onTrigger(final ReportingContext context) {
         final ProcessGroupStatus procGroupStatus = context.getEventAccess().getControllerStatus();
         final String rootGroupName = procGroupStatus == null ? null : procGroupStatus.getName();
 
-        final String nifiUrl = context.getProperty(INSTANCE_URL).evaluateAttributeExpressions().getValue();
+        final String nifiUrl = context.getProperty(SiteToSiteUtils.INSTANCE_URL).evaluateAttributeExpressions().getValue();
         URL url;
         try {
             url = new URL(nifiUrl);
@@ -149,7 +150,7 @@ public void onTrigger(final ReportingContext context) {
 
         final JsonArray jsonArray = arrayBuilder.build();
 
-        final int batchSize = context.getProperty(BATCH_SIZE).asInteger();
+        final int batchSize = context.getProperty(SiteToSiteUtils.BATCH_SIZE).asInteger();
         int fromIndex = 0;
         int toIndex = Math.min(batchSize, jsonArray.size());
         List<JsonValue> jsonBatch = jsonArray.subList(fromIndex, toIndex);

File: nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/kms/KeyProvider.java
Patch:
@@ -57,4 +57,6 @@ public interface KeyProvider {
      * @throws KeyManagementException if the key is invalid, the ID conflicts, etc.
      */
      boolean addKey(String keyId, SecretKey key) throws OperationNotSupportedException, KeyManagementException;
+
+     // TODO: Add #getActiveKeyId() method
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/firewall/impl/FileBasedClusterNodeFirewallTest.java
Patch:
@@ -24,9 +24,9 @@
 import java.io.File;
 import java.net.InetAddress;
 import java.net.UnknownHostException;
-
 import org.junit.Before;
 import org.junit.BeforeClass;
+import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TemporaryFolder;
@@ -80,6 +80,7 @@ public void setup() throws Exception {
     /**
      * We have two garbage lines in our test config file, ensure they didn't get turned into hosts.
      */
+    @Ignore("This does not run consistently on different environments")
     @Test
     public void ensureBadDataWasIgnored() {
         assumeTrue(badHostsDoNotResolve);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-stateless/src/main/java/org/apache/nifi/stateless/runtimes/Program.java
Patch:
@@ -39,7 +39,6 @@ public class Program {
     public static final String RUN_YARN_SERVICE_FROM_REGISTRY = "RunYARNServiceFromRegistry";
     public static final String RUN_OPENWHISK_ACTION_SERVER = "RunOpenwhiskActionServer";
 
-
     public static void launch(final String[] args, final ClassLoader systemClassLoader, final File narWorkingDirectory) throws Exception {
 
         //Workaround for YARN
@@ -60,6 +59,7 @@ public static void launch(final String[] args, final ClassLoader systemClassLoad
             System.out.println("Created empty hadoop token file: " + System.getenv("HADOOP_TOKEN_FILE_LOCATION"));
         }
 
+
         if (args.length == 0) {
             printUsage();
             System.exit(1);

File: nifi-nar-bundles/nifi-email-bundle/nifi-email-processors/src/main/java/org/apache/nifi/processors/email/ConsumeEWS.java
Patch:
@@ -454,7 +454,8 @@ public MimeMessage parseMessage(EmailMessage item, List<String> hdrIncludeList,
                     FileAttachment file = (FileAttachment)x;
                     file.load();
 
-                    ByteArrayDataSource bds = new ByteArrayDataSource(file.getContent(), file.getContentType());
+                    String type = file.getContentType() == null ? "text/plain" : file.getContentType();
+                    ByteArrayDataSource bds = new ByteArrayDataSource(file.getContent(), type);
 
                     mm.attach(bds,file.getName(), "", EmailAttachment.ATTACHMENT);
                 } catch (MessagingException e) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/queue/clustered/server/StandardLoadBalanceProtocol.java
Patch:
@@ -499,7 +499,7 @@ private ContentClaimTriple consumeContent(final DataInputStream in, final Output
             throw new IOException("Expected a Data Frame Indicator from Peer " + peerDescription + " but received a value of " + dataFrameIndicator);
         }
 
-        int dataFrameLength = in.readUnsignedShort();
+        int dataFrameLength = in.readInt();
         logger.trace("Received Data Frame Length of {} for {}", dataFrameLength, peerDescription);
 
         byte[] buffer = getDataBuffer();
@@ -535,7 +535,7 @@ private ContentClaimTriple consumeContent(final DataInputStream in, final Output
                 throw new IOException("Expected a Data Frame Indicator from Peer " + peerDescription + " but received a value of " + dataFrameIndicator);
             }
 
-            dataFrameLength = in.readUnsignedShort();
+            dataFrameLength = in.readInt();
             logger.trace("Received Data Frame Length of {} for {}", dataFrameLength, peerDescription);
         }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/queue/clustered/server/TestStandardLoadBalanceProtocol.java
Patch:
@@ -655,7 +655,7 @@ private void writeContent(final byte[] content, final DataOutputStream out) thro
             final int length = Math.min(content.length - offset, 65535);
 
             out.write(DATA_FRAME_FOLLOWS);
-            out.writeShort(length);
+            out.writeInt(length);
             out.write(content, offset, length);
         }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/parameter/ParameterContext.java
Patch:
@@ -16,12 +16,12 @@
  */
 package org.apache.nifi.parameter;
 
-import org.apache.nifi.authorization.resource.Authorizable;
+import org.apache.nifi.authorization.resource.ComponentAuthorizable;
 
 import java.util.Map;
 import java.util.Optional;
 
-public interface ParameterContext extends ParameterLookup, Authorizable {
+public interface ParameterContext extends ParameterLookup, ComponentAuthorizable {
 
     /**
      * @return the UUID for this Parameter Context

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/groups/StandardProcessGroup.java
Patch:
@@ -1397,8 +1397,6 @@ public CompletableFuture<Void> stopProcessor(final ProcessorNode processor) {
             final ScheduledState state = processor.getScheduledState();
             if (state == ScheduledState.DISABLED) {
                 throw new IllegalStateException("Processor is disabled");
-            } else if (state == ScheduledState.STOPPED) {
-                return CompletableFuture.completedFuture(null);
             }
 
             return scheduler.stopProcessor(processor);
@@ -2954,7 +2952,7 @@ public void verifyCanSetParameterContext(final ParameterContext parameterContext
                 }
 
                 if (service.getState() != ControllerServiceState.DISABLED) {
-                    throw new IllegalStateException("Cannot change Parameter Context for " + this + " because " + service + " is referencing at least one Parameter is is not disabled");
+                    throw new IllegalStateException("Cannot change Parameter Context for " + this + " because " + service + " is referencing at least one Parameter and is not disabled");
                 }
 
                 verifyParameterSensitivityIsValid(service, parameterContext);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ControllerServiceReferencingComponentDTO.java
Patch:
@@ -124,7 +124,7 @@ public void setState(String state) {
      */
     @ApiModelProperty(
             value = "The type of reference this is.",
-            allowableValues = "Processor, ControllerService, or ReportingTask"
+            allowableValues = "Processor, ControllerService, ReportingTask"
     )
     public String getReferenceType() {
         return referenceType;

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-abstract-processors/src/main/java/org/apache/nifi/processors/aws/s3/AbstractS3Processor.java
Patch:
@@ -130,8 +130,9 @@ public abstract class AbstractS3Processor extends AbstractAWSCredentialsProvider
     public static final PropertyDescriptor ENCRYPTION_SERVICE = new PropertyDescriptor.Builder()
             .name("encryption-service")
             .displayName("Encryption Service")
-            .description("Specifies the Encryption Service Controller used configure requests.  "
-                    + "For backward compatibility, this value is ignored when 'Server Side Encryption' is set.")
+            .description("Specifies the Encryption Service Controller used to configure requests. " +
+                    "PutS3Object: For backward compatibility, this value is ignored when 'Server Side Encryption' is set. " +
+                    "FetchS3Object: Only needs to be configured in case of Server-side Customer Key, Client-side KMS and Client-side Customer Key encryptions.")
             .required(false)
             .identifiesControllerService(AmazonS3EncryptionService.class)
             .build();

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/s3/encryption/S3EncryptionStrategy.java
Patch:
@@ -76,7 +76,7 @@ default void configureUploadPartRequest(UploadPartRequest request, ObjectMetadat
      * @param clientConfiguration Client configuration.
      * @return {@link AmazonS3Client}, perhaps an {@link com.amazonaws.services.s3.AmazonS3EncryptionClient}
      */
-    default AmazonS3Client createEncryptionClient(AWSCredentialsProvider credentialsProvider, ClientConfiguration clientConfiguration, String region, String keyIdOrMaterial) throws SecurityException {
+    default AmazonS3Client createEncryptionClient(AWSCredentialsProvider credentialsProvider, ClientConfiguration clientConfiguration, String kmsRegion, String keyIdOrMaterial) {
         return null;
     }
 

File: nifi-nar-bundles/nifi-hive-bundle/nifi-hive3-processors/src/main/java/org/apache/nifi/dbcp/hive/Hive3ConnectionPool.java
Patch:
@@ -59,7 +59,6 @@
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicReference;
-import java.util.regex.Pattern;
 
 import org.apache.nifi.controller.ControllerServiceInitializationContext;
 

File: nifi-mock/src/main/java/org/apache/nifi/util/MockProcessContext.java
Patch:
@@ -399,7 +399,7 @@ public String encrypt(final String unencrypted) {
     @Override
     public String decrypt(final String encrypted) {
         if (encrypted.startsWith("enc{") && encrypted.endsWith("}")) {
-            return encrypted.substring(4, encrypted.length() - 2);
+            return encrypted.substring(4, encrypted.length() - 1);
         }
         return encrypted;
     }

File: nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/client/socket/SocketClient.java
Patch:
@@ -52,7 +52,7 @@ public SocketClient(final SiteToSiteClientConfig config) {
                 createRemoteDestination(config.getPortIdentifier(), config.getPortName()),
                 commsTimeout,
                 (int) config.getIdleConnectionExpiration(TimeUnit.MILLISECONDS),
-                config.getSslContext(), config.getEventReporter(), config.getPeerPersistenceFile(),
+                config.getSslContext(), config.getEventReporter(), config.getPeerPersistence(),
                 siteInfoProvider, config.getLocalAddress()
         );
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/groups/RemoteProcessGroup.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.nifi.authorization.resource.ComponentAuthorizable;
 import org.apache.nifi.components.ValidationResult;
 import org.apache.nifi.components.VersionedComponent;
+import org.apache.nifi.components.state.StateManager;
 import org.apache.nifi.connectable.Positionable;
 import org.apache.nifi.controller.exception.CommunicationsException;
 import org.apache.nifi.events.EventReporter;
@@ -240,4 +241,6 @@ public interface RemoteProcessGroup extends ComponentAuthorizable, Positionable,
     void verifyCanStopTransmitting();
 
     void verifyCanUpdate();
+
+    StateManager getStateManager();
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/flow/StandardFlowManager.java
Patch:
@@ -211,7 +211,9 @@ private Optional<Port> findPort(final String portName, final Set<Port> ports) {
     }
 
     public RemoteProcessGroup createRemoteProcessGroup(final String id, final String uris) {
-        return new StandardRemoteProcessGroup(requireNonNull(id), uris, null, processScheduler, bulletinRepository, sslContext, nifiProperties);
+        return new StandardRemoteProcessGroup(requireNonNull(id), uris, null,
+            processScheduler, bulletinRepository, sslContext, nifiProperties,
+            flowController.getStateManagerProvider().getStateManager(id));
     }
 
     public void setRootGroup(final ProcessGroup rootGroup) {

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/UpdateRecord.java
Patch:
@@ -203,8 +203,6 @@ private Record processRelativePath(final RecordPath replacementRecordPath, final
             final List<FieldValue> selectedFields = replacementResult.getSelectedFields().collect(Collectors.toList());
             final Object replacementObject = getReplacementObject(selectedFields);
             updateFieldValue(fieldVal, replacementObject);
-
-            record = updateRecord(destinationFieldValues, selectedFields, record);
         }
 
         return record;

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/test/java/org/apache/nifi/csv/TestWriteCSVResult.java
Patch:
@@ -117,7 +117,7 @@ public void testDataTypes() throws IOException {
 
         final String values = splits[1];
         final StringBuilder expectedBuilder = new StringBuilder();
-        expectedBuilder.append("\"true\",\"1\",\"8\",\"9\",\"8\",\"8\",\"8.0\",\"8.0\",\"" + dateValue + "\",\"" + timeValue + "\",\"" + timestampValue + "\",\"c\",\"a孟bc李12儒3\",,\"48\",,");
+        expectedBuilder.append("\"true\",\"1\",\"8\",\"9\",\"8\",\"8\",\"8.0\",\"8.0\",\"" + timestampValue + "\",\"" + dateValue + "\",\"" + timeValue + "\",\"c\",\"a孟bc李12儒3\",,\"48\",,");
 
         final String expectedValues = expectedBuilder.toString();
 

File: nifi-nar-bundles/nifi-provenance-repository-bundle/nifi-persistent-provenance-repository/src/test/java/org/apache/nifi/provenance/index/lucene/TestIndexDirectoryManager.java
Patch:
@@ -149,8 +149,8 @@ public void testGetDirectoriesBefore() throws InterruptedException {
         }
 
         assertTrue(index1.mkdirs());
-        final long timestamp = System.currentTimeMillis();
         assertTrue(index2.mkdirs());
+        final long timestamp = System.currentTimeMillis();
 
         try {
             final IndexDirectoryManager mgr = new IndexDirectoryManager(config);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/status/analytics/ConnectionStatusAnalytics.java
Patch:
@@ -97,7 +97,7 @@ public void refresh() {
                     LOG.debug("Refreshing model with new data for connection id: {} ", connectionIdentifier);
                     model.learn(Stream.of(features), Stream.of(values));
 
-                    if(MapUtils.isNotEmpty(model.getScores())){
+                    if(LOG.isDebugEnabled() && MapUtils.isNotEmpty(model.getScores())){
                         model.getScores().forEach((key, value) -> {
                             LOG.debug("Model Scores for prediction metric {} for connection id {}: {}={} ", metric, connectionIdentifier, key, value);
                         });

File: nifi-commons/nifi-properties/src/main/java/org/apache/nifi/util/NiFiProperties.java
Patch:
@@ -241,6 +241,7 @@ public abstract class NiFiProperties {
     // analytics properties
     public static final String ANALYTICS_PREDICTION_ENABLED = "nifi.analytics.predict.enabled";
     public static final String ANALYTICS_PREDICTION_INTERVAL = "nifi.analytics.predict.interval";
+    public static final String ANALYTICS_QUERY_INTERVAL = "nifi.analytics.query.interval";
     public static final String ANALYTICS_CONNECTION_MODEL_IMPLEMENTATION = "nifi.analytics.connection.model.implementation";
     public static final String ANALYTICS_CONNECTION_MODEL_SCORE_NAME= "nifi.analytics.connection.model.score.name";
     public static final String ANALYTICS_CONNECTION_MODEL_SCORE_THRESHOLD = "nifi.analytics.connection.model.score.threshold";
@@ -318,6 +319,7 @@ public abstract class NiFiProperties {
     // analytics defaults
     public static final String DEFAULT_ANALYTICS_PREDICTION_ENABLED = "false";
     public static final String DEFAULT_ANALYTICS_PREDICTION_INTERVAL = "3 mins";
+    public static final String DEFAULT_ANALYTICS_QUERY_INTERVAL = "3 mins";
     public final static String DEFAULT_ANALYTICS_CONNECTION_MODEL_IMPLEMENTATION = "org.apache.nifi.controller.status.analytics.models.OrdinaryLeastSquares";
     public static final String DEFAULT_ANALYTICS_CONNECTION_SCORE_NAME = "rSquared";
     public static final double DEFAULT_ANALYTICS_CONNECTION_SCORE_THRESHOLD = .90;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/status/analytics/CachingConnectionStatusAnalyticsEngine.java
Patch:
@@ -40,9 +40,10 @@ public class CachingConnectionStatusAnalyticsEngine extends ConnectionStatusAnal
 
     public CachingConnectionStatusAnalyticsEngine(FlowManager flowManager, ComponentStatusRepository statusRepository,
             FlowFileEventRepository flowFileEventRepository, Map<String, Tuple<StatusAnalyticsModel, StatusMetricExtractFunction>> modelMap,
-            long predictionIntervalMillis, String scoreName, double scoreThreshold) {
+            long predictionIntervalMillis, long queryIntervalMillis, String scoreName, double scoreThreshold) {
 
-        super(flowManager,statusRepository,flowFileEventRepository,modelMap,predictionIntervalMillis,scoreName,scoreThreshold);
+        super(flowManager, statusRepository, flowFileEventRepository, modelMap, predictionIntervalMillis,
+                           queryIntervalMillis, scoreName, scoreThreshold);
         this.cache = Caffeine.newBuilder()
                 .expireAfterWrite(30, TimeUnit.MINUTES)
                 .build();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/status/analytics/TestConnectionStatusAnalyticsEngine.java
Patch:
@@ -28,8 +28,9 @@ public class TestConnectionStatusAnalyticsEngine extends TestStatusAnalyticsEngi
     @Override
     public StatusAnalyticsEngine getStatusAnalyticsEngine(FlowManager flowManager, FlowFileEventRepository flowFileEventRepository,
                                                           ComponentStatusRepository statusRepository, Map<String, Tuple<StatusAnalyticsModel, StatusMetricExtractFunction>> modelMap,
-                                                            long predictIntervalMillis, String scoreName, double scoreThreshold) {
-        return new ConnectionStatusAnalyticsEngine(flowManager, statusRepository, flowFileEventRepository,modelMap, DEFAULT_PREDICT_INTERVAL_MILLIS, scoreName, scoreThreshold);
+                                                            long predictIntervalMillis, long queryIntervalMillis, String scoreName, double scoreThreshold) {
+        return new ConnectionStatusAnalyticsEngine(flowManager, statusRepository, flowFileEventRepository,modelMap,
+                                                   DEFAULT_PREDICT_INTERVAL_MILLIS, DEFAULT_QUERY_INTERVAL_MILLIS, scoreName, scoreThreshold);
     }
 
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/status/analytics/TestStatusAnalyticsEngine.java
Patch:
@@ -43,6 +43,7 @@
 public abstract class TestStatusAnalyticsEngine {
 
     static final long DEFAULT_PREDICT_INTERVAL_MILLIS = 3L * 60 * 1000;
+    static final long DEFAULT_QUERY_INTERVAL_MILLIS = 3L * 60 * 1000;
     static final String DEFAULT_SCORE_NAME = "rSquared";
     static final double DEFAULT_SCORE_THRESHOLD = .9;
 
@@ -89,13 +90,13 @@ public Tuple<Stream<Double[]>, Stream<Double>> answer(InvocationOnMock invocatio
     @Test
     public void testGetStatusAnalytics() {
         StatusAnalyticsEngine statusAnalyticsEngine = getStatusAnalyticsEngine(flowManager,flowFileEventRepository, statusRepository, modelMap, DEFAULT_PREDICT_INTERVAL_MILLIS,
-                                                                                DEFAULT_SCORE_NAME, DEFAULT_SCORE_THRESHOLD);
+                                                                                DEFAULT_QUERY_INTERVAL_MILLIS, DEFAULT_SCORE_NAME, DEFAULT_SCORE_THRESHOLD);
         StatusAnalytics statusAnalytics = statusAnalyticsEngine.getStatusAnalytics("1");
         assertNotNull(statusAnalytics);
     }
 
     public abstract StatusAnalyticsEngine getStatusAnalyticsEngine(FlowManager flowManager, FlowFileEventRepository flowFileEventRepository,
                                                                    ComponentStatusRepository componentStatusRepository, Map<String, Tuple<StatusAnalyticsModel, StatusMetricExtractFunction>>  modelMap,
-                                                                    long predictIntervalMillis, String scoreName, double scoreThreshold);
+                                                                    long predictIntervalMillis, long queryIntervalMillis, String scoreName, double scoreThreshold);
 
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/parameter/StandardParameterContext.java
Patch:
@@ -172,7 +172,7 @@ private ParameterDescriptor getFullyPopulatedDescriptor(final Parameter proposed
 
         // We know that the Parameters have the same name, since this is what the Descriptor's hashCode & equality are based on. The only thing that may be different
         // is the description. And since the proposed Parameter does not have a Description, we want to use whatever is currently set.
-        return oldParameter == null ? null : oldParameter.getDescriptor();
+        return oldParameter == null ? descriptor : oldParameter.getDescriptor();
     }
 
     @Override

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/parameter/TestStandardParameterContext.java
Patch:
@@ -125,7 +125,7 @@ public void testUpdateDescription() {
         abcParam = context.getParameter("abc").get();
         assertEquals(abcDescriptor, abcParam.getDescriptor());
         assertEquals("Updated Again", abcParam.getDescriptor().getDescription());
-        assertNull(abcParam.getValue());
+        assertEquals("321", abcParam.getValue());
     }
 
     @Test

File: nifi-nar-bundles/nifi-druid-bundle/nifi-druid-controller-service/src/test/java/org/apache/nifi/controller/druid/DruidTranquilityControllerTest.java
Patch:
@@ -55,8 +55,6 @@ public void testValid() {
         runner.setProperty(service, DruidTranquilityController.ZOOKEEPER_CONNECTION_STRING, "localhost:2181");
         runner.assertNotValid(service);
         runner.setProperty(service, DruidTranquilityController.AGGREGATOR_JSON, "[{\"type\": \"count\", \"name\": \"count\"}]");
-        runner.assertNotValid(service);
-        runner.setProperty(service, DruidTranquilityController.DIMENSIONS_LIST, "dim1,dim2");
         runner.assertValid(service);
     }
 

File: nifi-nar-bundles/nifi-druid-bundle/nifi-druid-processors/src/test/java/org/apache/nifi/controller/druid/MockDruidTranquilityController.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.nifi.controller.druid;
 
 import com.metamx.tranquility.beam.Beam;
+import com.metamx.tranquility.druid.DruidDimensions;
 import com.metamx.tranquility.tranquilizer.MessageDroppedException;
 import com.metamx.tranquility.tranquilizer.Tranquilizer;
 import com.metamx.tranquility.typeclass.Timestamper;
@@ -137,7 +138,7 @@ Tranquilizer<Map<String, Object>> buildTranquilizer(int maxBatchSize, int maxPen
     @SuppressWarnings("unchecked")
     @Override
     Beam<Map<String, Object>> buildBeam(String dataSource, String indexService, String discoveryPath, int clusterPartitions, int clusterReplication,
-                                        String segmentGranularity, String queryGranularity, String windowPeriod, String firehoseGracePeriod, String indexRetryPeriod, List<String> dimensions,
+                                        String segmentGranularity, String queryGranularity, String windowPeriod, String firehoseGracePeriod, String indexRetryPeriod, DruidDimensions dimensions,
                                         List<AggregatorFactory> aggregator, Timestamper<Map<String, Object>> timestamper, TimestampSpec timestampSpec) {
         return mock(Beam.class);
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/groups/StandardProcessGroup.java
Patch:
@@ -4737,6 +4737,7 @@ private Set<FlowDifference> getModifications() {
                 .filter(FlowDifferenceFilters.FILTER_IGNORABLE_VERSIONED_FLOW_COORDINATE_CHANGES)
                 .filter(diff -> !FlowDifferenceFilters.isNewPropertyWithDefaultValue(diff, flowManager))
                 .filter(diff -> !FlowDifferenceFilters.isNewRelationshipAutoTerminatedAndDefaulted(diff, versionedGroup, flowManager))
+                .filter(diff -> !FlowDifferenceFilters.isScheduledStateNew(diff))
                 .collect(Collectors.toCollection(HashSet::new));
 
         LOG.debug("There are {} differences between this Local Flow and the Versioned Flow: {}", differences.size(), differences);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiServiceFacade.java
Patch:
@@ -4569,6 +4569,7 @@ public Set<AffectedComponentEntity> getComponentsAffectedByVersionChange(final S
             .filter(FlowDifferenceFilters.FILTER_IGNORABLE_VERSIONED_FLOW_COORDINATE_CHANGES)
             .filter(diff -> !FlowDifferenceFilters.isNewPropertyWithDefaultValue(diff, flowManager))
             .filter(diff -> !FlowDifferenceFilters.isNewRelationshipAutoTerminatedAndDefaulted(diff, proposedFlow.getContents(), flowManager))
+            .filter(diff -> !FlowDifferenceFilters.isScheduledStateNew(diff))
             .map(difference -> {
                 final VersionedComponent localComponent = difference.getComponentA();
 

File: nifi-nar-bundles/nifi-site-to-site-reporting-bundle/nifi-site-to-site-reporting-task/src/main/java/org/apache/nifi/reporting/SiteToSiteMetricsReportingTask.java
Patch:
@@ -157,6 +157,7 @@ public void onTrigger(final ReportingContext context) {
         final String applicationId = context.getProperty(APPLICATION_ID).evaluateAttributeExpressions().getValue();
         final String hostname = context.getProperty(HOSTNAME).evaluateAttributeExpressions().getValue();
         final ProcessGroupStatus status = context.getEventAccess().getControllerStatus();
+        final Boolean allowNullValues = context.getProperty(ALLOW_NULL_VALUES).asBoolean();
 
         if(status != null) {
             final Map<String,String> statusMetrics = metricsService.getMetrics(status, false);
@@ -179,13 +180,13 @@ public void onTrigger(final ReportingContext context) {
                         .addAllMetrics(jvmMetrics)
                         .metric(MetricNames.CORES, String.valueOf(os.getAvailableProcessors()))
                         .metric(MetricNames.LOAD1MN, String.valueOf(systemLoad >= 0 ? systemLoad : -1))
-                        .build();
+                        .build(allowNullValues);
 
                 data = metricsObject.toString().getBytes(StandardCharsets.UTF_8);
                 attributes.put(CoreAttributes.MIME_TYPE.key(), "application/json");
             } else {
                 final JsonObject metricsObject = metricsService.getMetrics(factory, status, virtualMachineMetrics, applicationId, status.getId(),
-                        hostname, System.currentTimeMillis(), os.getAvailableProcessors(), systemLoad >= 0 ? systemLoad : -1);
+                        hostname, System.currentTimeMillis(), os.getAvailableProcessors(), systemLoad >= 0 ? systemLoad : -1, allowNullValues);
                 data = getData(context, new ByteArrayInputStream(metricsObject.toString().getBytes(StandardCharsets.UTF_8)), attributes);
             }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/service/StandardControllerServiceNode.java
Patch:
@@ -422,7 +422,7 @@ public void run() {
                     if (validationStatus != ValidationStatus.VALID) {
                         LOG.debug("Cannot enable {} because it is not currently valid. Will try again in 5 seconds", StandardControllerServiceNode.this);
                         scheduler.schedule(this, 5, TimeUnit.SECONDS);
-                        future.completeExceptionally(new RuntimeException(this + " cannot be enabled because it is not currently valid. Will try again in 5 seconds."));
+                        future.completeExceptionally(new ControllerServiceNotValidException(this + " cannot be enabled because it is not currently valid. Will try again in 5 seconds."));
                         return;
                     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/ParameterContextUpdateEndpointMerger.java
Patch:
@@ -66,7 +66,7 @@ protected void mergeResponses(final ParameterContextUpdateRequestEntity clientEn
             clientUpdateRequestDto.setPercentCompleted(Math.min(clientUpdateRequestDto.getPercentCompleted(), updateRequestDto.getPercentCompleted()));
 
             // Merge the Affected Components.
-            for (final AffectedComponentEntity entity : requestEntity.getRequest().getAffectedComponents()) {
+            for (final AffectedComponentEntity entity : requestEntity.getRequest().getReferencingComponents()) {
                 final AffectedComponentEntity mergedAffectedComponentEntity = affectedComponentEntities.get(entity.getId());
                 if (mergedAffectedComponentEntity == null) {
                     affectedComponentEntities.put(entity.getId(), entity);
@@ -81,7 +81,7 @@ protected void mergeResponses(final ParameterContextUpdateRequestEntity clientEn
         entityMap.forEach( (nodeId, entity) -> contextDtoMap.put(nodeId, entity.getRequest().getParameterContext()));
 
         ParameterContextMerger.merge(clientUpdateRequestDto.getParameterContext(), contextDtoMap);
-        clientUpdateRequestDto.setAffectedComponents(new HashSet<>(affectedComponentEntities.values()));
+        clientUpdateRequestDto.setReferencingComponents(new HashSet<>(affectedComponentEntities.values()));
     }
 
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ParameterContextResource.java
Patch:
@@ -802,7 +802,7 @@ private Response submitUpdateRequest(final Revision requestRevision, final Initi
         final Consumer<AsynchronousWebRequest<ParameterContextEntity, ParameterContextEntity>> updateTask = asyncRequest -> {
             try {
                 final ParameterContextEntity updatedParameterContextEntity = updateParameterContext(asyncRequest, requestWrapper.getComponentLifecycle(), requestWrapper.getExampleUri(),
-                    requestWrapper.getAffectedComponents(), requestWrapper.isReplicateRequest(), requestRevision, requestWrapper.getParameterContextEntity());
+                    requestWrapper.getReferencingComponents(), requestWrapper.isReplicateRequest(), requestRevision, requestWrapper.getParameterContextEntity());
 
                 asyncRequest.markStepComplete(updatedParameterContextEntity);
             } catch (final ResumeFlowException rfe) {
@@ -1162,7 +1162,7 @@ private ParameterContextUpdateRequestEntity createUpdateRequestEntity(final Asyn
             }
         }
 
-        updateRequestDto.setAffectedComponents(new HashSet<>(affectedComponents.values()));
+        updateRequestDto.setReferencingComponents(new HashSet<>(affectedComponents.values()));
 
         // Populate the Affected Components
         final ParameterContextEntity contextEntity = serviceFacade.getParameterContext(asyncRequest.getComponentId(), NiFiUserUtils.getNiFiUser());
@@ -1211,7 +1211,7 @@ public URI getExampleUri() {
             return exampleUri;
         }
 
-        public Set<AffectedComponentEntity> getAffectedComponents() {
+        public Set<AffectedComponentEntity> getReferencingComponents() {
             return affectedComponents;
         }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/concurrent/AsyncRequestManager.java
Patch:
@@ -144,10 +144,11 @@ public AsynchronousWebRequest<R, T> removeRequest(final String type, final Strin
         }
 
         if (!request.isComplete()) {
-            throw new IllegalStateException("Cannot remove the request because it is not yet complete");
+            request.cancel();
         }
 
-        return requests.remove(key);
+        requests.remove(key);
+        return request;
     }
 
     @Override

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardParameterContextDAO.java
Patch:
@@ -81,10 +81,10 @@ private Map<String, Parameter> getParameters(final ParameterContextDTO parameter
 
             final boolean deletion = parameterDto.getDescription() == null && parameterDto.getSensitive() == null && parameterDto.getValue() == null;
             if (deletion) {
-                parameterMap.put(parameterDto.getName(), null);
+                parameterMap.put(parameterDto.getName().trim(), null);
             } else {
                 final Parameter parameter = createParameter(parameterDto);
-                parameterMap.put(parameterDto.getName(), parameter);
+                parameterMap.put(parameterDto.getName().trim(), parameter);
             }
         }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/groups/StandardProcessGroup.java
Patch:
@@ -3465,7 +3465,7 @@ public void synchronizeWithFlowRegistry(final FlowRegistryClient flowRegistryCli
             if (latestVersion == vci.getVersion()) {
                 versionControlFields.setStale(false);
                 if (latestVersion == 0) {
-                    LOG.debug("{} does not have any version in the Registry", this, latestVersion);
+                    LOG.debug("{} does not have any version in the Registry", this);
                     versionControlFields.setLocallyModified(true);
                 } else {
                     LOG.debug("{} is currently at the most recent version ({}) of the flow that is under Version Control", this, latestVersion);
@@ -4725,6 +4725,8 @@ private Set<FlowDifference> getModifications() {
                 .filter(FlowDifferenceFilters.FILTER_ADDED_REMOVED_REMOTE_PORTS)
                 .filter(FlowDifferenceFilters.FILTER_PUBLIC_PORT_NAME_CHANGES)
                 .filter(FlowDifferenceFilters.FILTER_IGNORABLE_VERSIONED_FLOW_COORDINATE_CHANGES)
+                .filter(diff -> !FlowDifferenceFilters.isNewPropertyWithDefaultValue(diff, flowManager))
+                .filter(diff -> !FlowDifferenceFilters.isNewRelationshipAutoTerminatedAndDefaulted(diff, versionedGroup, flowManager))
                 .collect(Collectors.toCollection(HashSet::new));
 
         LOG.debug("There are {} differences between this Local Flow and the Versioned Flow: {}", differences.size(), differences);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/status/history/VolatileComponentStatusRepositoryTest.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.nifi.controller.status.history;
 
 import java.time.LocalDateTime;
-import java.time.ZoneId;
+import java.time.ZoneOffset;
 import java.util.Date;
 import java.util.List;
 
@@ -75,7 +75,7 @@ public static void createBuffers() {
   }
 
   private Date asDate(LocalDateTime localDateTime) {
-    return Date.from(localDateTime.atZone(ZoneId.systemDefault()).toInstant());
+    return Date.from(localDateTime.toInstant(ZoneOffset.UTC));
   }
 
   @Test

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/AbstractPort.java
Patch:
@@ -70,7 +70,7 @@ public abstract class AbstractPort implements Port {
     private final AtomicReference<String> name;
     private final AtomicReference<Position> position;
     private final AtomicReference<String> comments;
-    private final AtomicReference<ProcessGroup> processGroup;
+    private final AtomicReference<ProcessGroup> processGroup = new AtomicReference<>();
     private final AtomicBoolean lossTolerant;
     private final AtomicReference<ScheduledState> scheduledState;
     private final AtomicInteger concurrentTaskCount;
@@ -89,7 +89,7 @@ public abstract class AbstractPort implements Port {
     private final Lock readLock = rwLock.readLock();
     private final Lock writeLock = rwLock.writeLock();
 
-    public AbstractPort(final String id, final String name, final ProcessGroup processGroup, final ConnectableType type, final ProcessScheduler scheduler) {
+    public AbstractPort(final String id, final String name, final ConnectableType type, final ProcessScheduler scheduler) {
         this.id = requireNonNull(id);
         this.name = new AtomicReference<>(requireNonNull(name));
         position = new AtomicReference<>(new Position(0D, 0D));
@@ -103,7 +103,6 @@ public AbstractPort(final String id, final String name, final ProcessGroup proce
         final List<Relationship> relationshipList = new ArrayList<>();
         relationshipList.add(PORT_RELATIONSHIP);
         relationships = Collections.unmodifiableList(relationshipList);
-        this.processGroup = new AtomicReference<>(processGroup);
         this.type = type;
         penalizationPeriod = new AtomicReference<>("30 sec");
         yieldPeriod = new AtomicReference<>("1 sec");

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/remote/RemoteGroupPort.java
Patch:
@@ -20,13 +20,12 @@
 import org.apache.nifi.connectable.Port;
 import org.apache.nifi.controller.AbstractPort;
 import org.apache.nifi.controller.ProcessScheduler;
-import org.apache.nifi.groups.ProcessGroup;
 import org.apache.nifi.groups.RemoteProcessGroup;
 
 public abstract class RemoteGroupPort extends AbstractPort implements Port, RemoteDestination {
 
-    public RemoteGroupPort(String id, String name, ProcessGroup processGroup, ConnectableType type, ProcessScheduler scheduler) {
-        super(id, name, processGroup, type, scheduler);
+    public RemoteGroupPort(String id, String name, ConnectableType type, ProcessScheduler scheduler) {
+        super(id, name, type, scheduler);
     }
 
     public abstract RemoteProcessGroup getRemoteProcessGroup();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/connectable/LocalPort.java
Patch:
@@ -54,7 +54,7 @@ public class LocalPort extends AbstractPort {
     final int maxIterations;
 
     public LocalPort(final String id, final String name, final ConnectableType type, final ProcessScheduler scheduler, final NiFiProperties nifiProperties) {
-        super(id, name, null, type, scheduler);
+        super(id, name, type, scheduler);
 
         int maxConcurrentTasks = Integer.parseInt(nifiProperties.getProperty(MAX_CONCURRENT_TASKS_PROP_NAME, "1"));
         setMaxConcurrentTasks(maxConcurrentTasks);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/flow/StandardFlowManager.java
Patch:
@@ -139,7 +139,7 @@ public Port createPublicInputPort(String id, String name) {
         id = requireNonNull(id).intern();
         name = requireNonNull(name).intern();
         verifyPortIdDoesNotExist(id);
-        return new StandardPublicPort(id, name, null,
+        return new StandardPublicPort(id, name,
             TransferDirection.RECEIVE, ConnectableType.INPUT_PORT, authorizer, bulletinRepository,
             processScheduler, isSiteToSiteSecure, nifiProperties.getBoredYieldDuration(),
             IdentityMappingUtil.getIdentityMappings(nifiProperties));
@@ -149,7 +149,7 @@ public Port createPublicOutputPort(String id, String name) {
         id = requireNonNull(id).intern();
         name = requireNonNull(name).intern();
         verifyPortIdDoesNotExist(id);
-        return new StandardPublicPort(id, name, null,
+        return new StandardPublicPort(id, name,
             TransferDirection.SEND, ConnectableType.OUTPUT_PORT, authorizer, bulletinRepository,
             processScheduler, isSiteToSiteSecure, nifiProperties.getBoredYieldDuration(),
             IdentityMappingUtil.getIdentityMappings(nifiProperties));

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-site-to-site/src/main/java/org/apache/nifi/remote/StandardRemoteGroupPort.java
Patch:
@@ -28,7 +28,6 @@
 import org.apache.nifi.flowfile.FlowFile;
 import org.apache.nifi.flowfile.attributes.CoreAttributes;
 import org.apache.nifi.flowfile.attributes.SiteToSiteAttributes;
-import org.apache.nifi.groups.ProcessGroup;
 import org.apache.nifi.groups.RemoteProcessGroup;
 import org.apache.nifi.processor.DataUnit;
 import org.apache.nifi.processor.ProcessContext;
@@ -99,13 +98,13 @@ SiteToSiteClient getSiteToSiteClient() {
         return clientRef.get();
     }
 
-    public StandardRemoteGroupPort(final String id, final String targetId, final String name, final ProcessGroup processGroup, final RemoteProcessGroup remoteGroup,
+    public StandardRemoteGroupPort(final String id, final String targetId, final String name, final RemoteProcessGroup remoteGroup,
             final TransferDirection direction, final ConnectableType type, final SSLContext sslContext, final ProcessScheduler scheduler,
         final NiFiProperties nifiProperties) {
         // remote group port id needs to be unique but cannot just be the id of the port
         // in the remote group instance. this supports referencing the same remote
         // instance more than once.
-        super(id, name, processGroup, type, scheduler);
+        super(id, name, type, scheduler);
 
         this.targetId = targetId;
         this.remoteGroup = remoteGroup;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-site-to-site/src/test/java/org/apache/nifi/remote/TestStandardRemoteGroupPort.java
Patch:
@@ -121,7 +121,7 @@ private void setupMock(final SiteToSiteTransportProtocol protocol,
         }
 
         port = spy(new StandardRemoteGroupPort(ID, ID, NAME,
-                processGroup, remoteGroup, direction, connectableType, null, scheduler, NiFiProperties.createBasicNiFiProperties(null, null)));
+                remoteGroup, direction, connectableType, null, scheduler, NiFiProperties.createBasicNiFiProperties(null, null)));
 
         doReturn(true).when(remoteGroup).isTransmitting();
         doReturn(protocol).when(remoteGroup).getTransportProtocol();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/AbstractComponentNode.java
Patch:
@@ -658,6 +658,8 @@ private List<ValidationResult> validateParameterReferences(final ValidationConte
                         .valid(false)
                         .explanation("Property references Parameter '" + paramName + "' but the currently selected Parameter Context does not have a Parameter with that name")
                         .build());
+
+                    continue;
                 }
 
                 if (!validationContext.isParameterSet(paramName)) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/StandardFlowSerializer.java
Patch:
@@ -180,7 +180,8 @@ private void addParameter(final Element parentElement, final Parameter parameter
         addStringElement(parameterElement, "sensitive", String.valueOf(descriptor.isSensitive()));
 
         if (descriptor.isSensitive()) {
-            addStringElement(parameterElement, "value", ENC_PREFIX + encryptor.encrypt(parameter.getValue()) + ENC_SUFFIX);
+            final String parameterValue = parameter.getValue();
+            addStringElement(parameterElement, "value", parameterValue == null ? null : ENC_PREFIX + encryptor.encrypt(parameterValue) + ENC_SUFFIX);
         } else {
             addStringElement(parameterElement, "value", parameter.getValue());
         }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/groups/StandardVersionedFlowStatus.java
Patch:
@@ -20,11 +20,11 @@
 import org.apache.nifi.registry.flow.VersionedFlowState;
 import org.apache.nifi.registry.flow.VersionedFlowStatus;
 
-class StandardVersionedFlowStatus implements VersionedFlowStatus {
+public class StandardVersionedFlowStatus implements VersionedFlowStatus {
     private final VersionedFlowState state;
     private final String explanation;
 
-    StandardVersionedFlowStatus(final VersionedFlowState state, final String explanation) {
+    public StandardVersionedFlowStatus(final VersionedFlowState state, final String explanation) {
         this.state = state;
         this.explanation = explanation;
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/registry/flow/RestBasedFlowRegistry.java
Patch:
@@ -36,6 +36,7 @@
 import java.util.stream.Collectors;
 
 public class RestBasedFlowRegistry implements FlowRegistry {
+    private static final String FLOW_ENCODING_VERSION = "1.0";
 
     private final FlowRegistryClient flowRegistryClient;
     private final String identifier;
@@ -189,6 +190,7 @@ public VersionedFlowSnapshot registerVersionedFlowSnapshot(final VersionedFlow f
         versionedFlowSnapshot.setFlowContents(snapshot);
         versionedFlowSnapshot.setExternalControllerServices(externalControllerServices);
         versionedFlowSnapshot.setParameterContexts(parameterContextMap);
+        versionedFlowSnapshot.setFlowEncodingVersion(FLOW_ENCODING_VERSION);
 
         final VersionedFlowSnapshotMetadata metadata = new VersionedFlowSnapshotMetadata();
         metadata.setBucketIdentifier(flow.getBucketIdentifier());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java
Patch:
@@ -1405,7 +1405,9 @@ public ParameterDTO createParameterDto(final ParameterContext parameterContext,
         dto.setName(descriptor.getName());
         dto.setDescription(descriptor.getDescription());
         dto.setSensitive(descriptor.isSensitive());
-        dto.setValue(descriptor.isSensitive() ? SENSITIVE_VALUE_MASK : parameter.getValue());
+        if (parameter.getValue() != null) {
+            dto.setValue(descriptor.isSensitive() ? SENSITIVE_VALUE_MASK : parameter.getValue());
+        }
 
         final ParameterReferenceManager parameterReferenceManager = parameterContext.getParameterReferenceManager();
 

File: nifi-nar-bundles/nifi-mongodb-bundle/nifi-mongodb-processors/src/test/java/org/apache/nifi/processors/mongodb/MongoWriteTestBase.java
Patch:
@@ -32,6 +32,8 @@ public class MongoWriteTestBase {
     protected static final String COLLECTION_NAME = "test";
     protected String DATABASE_NAME;
 
+    protected static Document oidDocument = Document.parse("{\"_id\": {\"$oid\": \"5cd1a7376264b959a71588c1\"}}");
+
     protected static final List<Document> DOCUMENTS = Arrays.asList(
             new Document("_id", "doc_1").append("a", 1).append("b", 2).append("c", 3),
             new Document("_id", "doc_2").append("a", 1).append("b", 2).append("c", 4),

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/repository/WriteAheadFlowFileRepository.java
Patch:
@@ -515,7 +515,7 @@ public void swapFlowFilesIn(final String swapLocation, final List<FlowFileRecord
         updateRepository(repoRecords, true);
 
         synchronized (this.swapLocationSuffixes) {
-            this.swapLocationSuffixes.remove(normalizeSwapLocation(swapLocation));
+            this.swapLocationSuffixes.add(normalizeSwapLocation(swapLocation));
         }
 
         logger.info("Repository updated to reflect that {} FlowFiles were swapped in to {}", new Object[]{swapRecords.size(), queue});

File: nifi-nar-bundles/nifi-enrich-bundle/nifi-enrich-processors/src/main/java/org/apache/nifi/processors/enrich/QueryDNS.java
Patch:
@@ -109,7 +109,7 @@ public class QueryDNS extends AbstractEnrichProcessor {
     private DirContext ictx;
 
     // Assign the default and generally used contextFactory value
-    private String contextFactory = com.sun.jndi.dns.DnsContextFactory.class.getName();;
+    private String contextFactory = "com.sun.jndi.dns.DnsContextFactory";
 
     static {
         List<PropertyDescriptor> props = new ArrayList<>();

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestListenRELP.java
Patch:
@@ -152,6 +152,7 @@ public void testBatching() throws IOException, InterruptedException {
     public void testTLS() throws InitializationException, IOException, InterruptedException {
         final SSLContextService sslContextService = new StandardSSLContextService();
         runner.addControllerService("ssl-context", sslContextService);
+        runner.setProperty(sslContextService, StandardSSLContextService.SSL_ALGORITHM, "TLSv1.2");
         runner.setProperty(sslContextService, StandardSSLContextService.TRUSTSTORE, "src/test/resources/truststore.jks");
         runner.setProperty(sslContextService, StandardSSLContextService.TRUSTSTORE_PASSWORD, "passwordpassword");
         runner.setProperty(sslContextService, StandardSSLContextService.TRUSTSTORE_TYPE, "JKS");

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestListenTCPRecord.java
Patch:
@@ -168,7 +168,7 @@ public void testTLSClientAuthRequiredAndClientCertProvided() throws Initializati
                 "passwordpassword".toCharArray(),
                 "jks",
                 org.apache.nifi.security.util.SslContextFactory.ClientAuth.valueOf("NONE"),
-                "TLS");
+                "TLSv1.2");
 
         runTCP(DATA, 1, clientSslContext);
 
@@ -212,7 +212,7 @@ public void testTLSClientAuthNoneAndClientCertNotProvided() throws Initializatio
                 "src/test/resources/truststore.jks",
                 "passwordpassword".toCharArray(),
                 "jks",
-                "TLS");
+                "TLSv1.2");
 
         runTCP(DATA, 1, clientSslContext);
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestPutTcpSSL.java
Patch:
@@ -63,6 +63,7 @@ private static Map<String, String> createSslProperties() {
         map.put(StandardSSLContextService.TRUSTSTORE.getName(), "src/test/resources/truststore.jks");
         map.put(StandardSSLContextService.TRUSTSTORE_PASSWORD.getName(), "passwordpassword");
         map.put(StandardSSLContextService.TRUSTSTORE_TYPE.getName(), "JKS");
+        map.put(StandardSSLContextService.SSL_ALGORITHM.getName(), "TLSv1.2");
         return map;
     }
 }

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/test/java/org/apache/nifi/processors/aws/s3/TestFetchS3Object.java
Patch:
@@ -238,7 +238,7 @@ public void testGetObjectExceptionGoesToFailure() throws IOException {
     public void testGetPropertyDescriptors() throws Exception {
         FetchS3Object processor = new FetchS3Object();
         List<PropertyDescriptor> pd = processor.getSupportedPropertyDescriptors();
-        assertEquals("size should be eq", 18, pd.size());
+        assertEquals("size should be eq", 19, pd.size());
         assertTrue(pd.contains(FetchS3Object.ACCESS_KEY));
         assertTrue(pd.contains(FetchS3Object.AWS_CREDENTIALS_PROVIDER_SERVICE));
         assertTrue(pd.contains(FetchS3Object.BUCKET));

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/test/java/org/apache/nifi/processors/aws/s3/TestListS3.java
Patch:
@@ -458,7 +458,7 @@ public void testWriteUserMetadata() {
     public void testGetPropertyDescriptors() throws Exception {
         ListS3 processor = new ListS3();
         List<PropertyDescriptor> pd = processor.getSupportedPropertyDescriptors();
-        assertEquals("size should be eq", 22, pd.size());
+        assertEquals("size should be eq", 23, pd.size());
         assertTrue(pd.contains(ListS3.ACCESS_KEY));
         assertTrue(pd.contains(ListS3.AWS_CREDENTIALS_PROVIDER_SERVICE));
         assertTrue(pd.contains(ListS3.BUCKET));

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/AbstractComponentNode.java
Patch:
@@ -346,13 +346,13 @@ private void setProperty(final String name, final PropertyConfiguration property
                 if (oldConfiguration != null) {
                     final ControllerServiceNode oldNode = serviceProvider.getControllerServiceNode(effectiveValue);
                     if (oldNode != null) {
-                        oldNode.removeReference(this);
+                        oldNode.removeReference(this, descriptor);
                     }
                 }
 
                 final ControllerServiceNode newNode = serviceProvider.getControllerServiceNode(effectiveValue);
                 if (newNode != null) {
-                    newNode.addReference(this);
+                    newNode.addReference(this, descriptor);
                 }
             }
         }
@@ -404,7 +404,7 @@ private boolean removeProperty(final String name, final boolean allowRemovalOfRe
             if (value != null) {
                 final ControllerServiceNode oldNode = serviceProvider.getControllerServiceNode(value);
                 if (oldNode != null) {
-                    oldNode.removeReference(this);
+                    oldNode.removeReference(this, descriptor);
                 }
             }
         }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/flow/StandardFlowManager.java
Patch:
@@ -598,7 +598,7 @@ public void removeReportingTask(final ReportingTaskNode reportingTaskNode) {
                 if (value != null) {
                     final ControllerServiceNode serviceNode = flowController.getControllerServiceProvider().getControllerServiceNode(value);
                     if (serviceNode != null) {
-                        serviceNode.removeReference(reportingTaskNode);
+                        serviceNode.removeReference(reportingTaskNode, descriptor);
                     }
                 }
             }
@@ -654,7 +654,7 @@ public void removeRootControllerService(final ControllerServiceNode service) {
                 if (value != null) {
                     final ControllerServiceNode referencedNode = getRootControllerService(value);
                     if (referencedNode != null) {
-                        referencedNode.removeReference(service);
+                        referencedNode.removeReference(service, descriptor);
                     }
                 }
             }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/service/TestStandardControllerServiceProvider.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.nifi.bundle.Bundle;
 import org.apache.nifi.bundle.BundleCoordinate;
+import org.apache.nifi.components.PropertyDescriptor;
 import org.apache.nifi.components.state.StateManager;
 import org.apache.nifi.components.state.StateManagerProvider;
 import org.apache.nifi.components.validation.ValidationStatus;
@@ -459,7 +460,7 @@ public void testEnableReferencingComponents() {
         final ControllerServiceNode serviceNode = createControllerService(ServiceA.class.getName(), "1", systemBundle.getBundleDetails().getCoordinate(), provider);
 
         final ProcessorNode procNode = createProcessor(scheduler, provider);
-        serviceNode.addReference(procNode);
+        serviceNode.addReference(procNode, PropertyDescriptor.NULL_DESCRIPTOR);
 
         // procNode.setScheduledState(ScheduledState.STOPPED);
         provider.unscheduleReferencingComponents(serviceNode);

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/script/impl/ClojureScriptEngineConfigurator.java
Patch:
@@ -32,7 +32,7 @@ public class ClojureScriptEngineConfigurator extends AbstractModuleClassloaderCo
                     + "[org.apache.nifi.flowfile FlowFile]\n"
                     + "[org.apache.nifi.processor "
                     + "AbstractProcessor AbstractSessionFactoryProcessor DataUnit FlowFileFilter ProcessContext Processor "
-                    + "ProcessorInitializationContext ProcessSession ProcessSessionFactory Relationship SchedulingContext"
+                    + "ProcessorInitializationContext ProcessSession ProcessSessionFactory Relationship ProcessContext"
                     + "]\n"
                     + "[org.apache.nifi.processor.exception FlowFileAccessException FlowFileHandlingException MissingFlowFileException ProcessException]\n"
                     + "[org.apache.nifi.processor.io InputStreamCallback OutputStreamCallback StreamCallback]\n"

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/VersionsResource.java
Patch:
@@ -25,7 +25,6 @@
 import io.swagger.annotations.Authorization;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.nifi.authorization.AccessDeniedException;
-import org.apache.nifi.authorization.AuthorizeParameterReference;
 import org.apache.nifi.authorization.Authorizer;
 import org.apache.nifi.authorization.ComponentAuthorizable;
 import org.apache.nifi.authorization.ProcessGroupAuthorizable;

File: nifi-api/src/main/java/org/apache/nifi/components/AbstractConfigurableComponent.java
Patch:
@@ -84,12 +84,14 @@ public final Collection<ValidationResult> validate(final ValidationContext conte
         // goes through supported properties
         final Collection<ValidationResult> results = new ArrayList<>();
         final List<PropertyDescriptor> supportedDescriptors = getSupportedPropertyDescriptors();
+
         if (null != supportedDescriptors) {
             for (final PropertyDescriptor descriptor : supportedDescriptors) {
                 String value = context.getProperty(descriptor).getValue();
                 if (value == null) {
                     value = descriptor.getDefaultValue();
                 }
+
                 if (value == null && descriptor.isRequired()) {
                     String displayName = descriptor.getDisplayName();
                     ValidationResult.Builder builder = new ValidationResult.Builder().valid(false).input(null).subject(displayName != null ? displayName : descriptor.getName());

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/StringLiteralExpression.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.nifi.attribute.expression.language;
 
-import java.util.Map;
-
 import org.apache.nifi.expression.AttributeValueDecorator;
 
 public class StringLiteralExpression implements Expression {
@@ -29,7 +27,7 @@ public StringLiteralExpression(final String value) {
     }
 
     @Override
-    public String evaluate(Map<String, String> variables, AttributeValueDecorator decorator, Map<String, String> stateVariables) {
+    public String evaluate(final EvaluationContext evaluationContext, AttributeValueDecorator decorator) {
         return value;
     }
 }

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/BooleanEvaluator.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.nifi.attribute.expression.language.evaluation;
 
+import org.apache.nifi.attribute.expression.language.EvaluationContext;
 import org.apache.nifi.expression.AttributeExpression.ResultType;
 
 public abstract class BooleanEvaluator implements Evaluator<Boolean> {
@@ -27,7 +28,7 @@ public ResultType getResultType() {
     }
 
     @Override
-    public int getEvaluationsRemaining(final EvaluatorState context) {
+    public int getEvaluationsRemaining(final EvaluationContext context) {
         return 0;
     }
 

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/DateQueryResult.java
Patch:
@@ -16,10 +16,10 @@
  */
 package org.apache.nifi.attribute.expression.language.evaluation;
 
-import java.util.Date;
-
 import org.apache.nifi.expression.AttributeExpression.ResultType;
 
+import java.util.Date;
+
 public class DateQueryResult implements QueryResult<Date> {
 
     private final Date date;

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/DecimalEvaluator.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.nifi.attribute.expression.language.evaluation;
 
+import org.apache.nifi.attribute.expression.language.EvaluationContext;
 import org.apache.nifi.expression.AttributeExpression.ResultType;
 
 public abstract class DecimalEvaluator implements Evaluator<Double> {
@@ -27,7 +28,7 @@ public ResultType getResultType() {
     }
 
     @Override
-    public int getEvaluationsRemaining(final EvaluatorState context) {
+    public int getEvaluationsRemaining(final EvaluationContext context) {
         return 0;
     }
 

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/NumberEvaluator.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.nifi.attribute.expression.language.evaluation;
 
+import org.apache.nifi.attribute.expression.language.EvaluationContext;
 import org.apache.nifi.expression.AttributeExpression.ResultType;
 
 public abstract class NumberEvaluator implements Evaluator<Number> {
@@ -27,7 +28,7 @@ public ResultType getResultType() {
     }
 
     @Override
-    public int getEvaluationsRemaining(final EvaluatorState context) {
+    public int getEvaluationsRemaining(final EvaluationContext context) {
         return 0;
     }
 

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/StringEvaluator.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.nifi.attribute.expression.language.evaluation;
 
+import org.apache.nifi.attribute.expression.language.EvaluationContext;
 import org.apache.nifi.expression.AttributeExpression.ResultType;
 
 public abstract class StringEvaluator implements Evaluator<String> {
@@ -27,7 +28,7 @@ public ResultType getResultType() {
     }
 
     @Override
-    public int getEvaluationsRemaining(EvaluatorState context) {
+    public int getEvaluationsRemaining(EvaluationContext context) {
         return 0;
     }
 

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/WholeNumberEvaluator.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.nifi.attribute.expression.language.evaluation;
 
+import org.apache.nifi.attribute.expression.language.EvaluationContext;
 import org.apache.nifi.expression.AttributeExpression.ResultType;
 
 public abstract class WholeNumberEvaluator implements Evaluator<Long> {
@@ -27,7 +28,7 @@ public ResultType getResultType() {
     }
 
     @Override
-    public int getEvaluationsRemaining(final EvaluatorState context) {
+    public int getEvaluationsRemaining(final EvaluationContext context) {
         return 0;
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/TemplateDTO.java
Patch:
@@ -29,7 +29,7 @@
  */
 @XmlRootElement(name = "template")
 public class TemplateDTO {
-    public static final String MAX_ENCODING_VERSION = "1.2";
+    public static final String MAX_ENCODING_VERSION = "1.3";
 
     private String uri;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/main/java/org/apache/nifi/authorization/FileUserGroupProvider.java
Patch:
@@ -93,7 +93,7 @@ private static JAXBContext initializeJaxbContext(final String contextPath) {
         try {
             return JAXBContext.newInstance(contextPath, FileAuthorizer.class.getClassLoader());
         } catch (JAXBException e) {
-            throw new RuntimeException("Unable to create JAXBContext.");
+            throw new RuntimeException("Unable to create JAXBContext.", e);
         }
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-authorization/src/main/java/org/apache/nifi/authorization/StandardAuthorizerConfigurationContext.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.nifi.authorization;
 
+import org.apache.nifi.parameter.ParameterLookup;
 import org.apache.nifi.attribute.expression.language.StandardPropertyValue;
 import org.apache.nifi.components.PropertyValue;
 
@@ -48,7 +49,7 @@ public Map<String, String> getProperties() {
 
     @Override
     public PropertyValue getProperty(String property) {
-        return new StandardPropertyValue(properties.get(property), null);
+        return new StandardPropertyValue(properties.get(property), null, ParameterLookup.EMPTY);
     }
 
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-authorization/src/main/java/org/apache/nifi/authorization/resource/ResourceType.java
Patch:
@@ -41,7 +41,8 @@ public enum ResourceType {
     RestrictedComponents("/restricted-components"),
     Operation("/operation"),
     Template("/templates"),
-    Tenant("/tenants");
+    Tenant("/tenants"),
+    ParameterContext("/parameter-contexts");
 
     final String value;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-authorization/src/test/java/org/apache/nifi/authorization/CompositeUserGroupProviderTest.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.nifi.authorization;
 
+import org.apache.nifi.parameter.ParameterLookup;
 import org.apache.nifi.attribute.expression.language.StandardPropertyValue;
 import org.apache.nifi.authorization.exception.AuthorizerCreationException;
 import org.junit.Test;
@@ -54,7 +55,7 @@ public UserGroupProvider getUserGroupProvider(String identifier) {
 
         // configuration
         final AuthorizerConfigurationContext configurationContext = mock(AuthorizerConfigurationContext.class);
-        when(configurationContext.getProperty(eq(PROP_USER_GROUP_PROVIDER_PREFIX + "1"))).thenReturn(new StandardPropertyValue(String.valueOf("1"), null));
+        when(configurationContext.getProperty(eq(PROP_USER_GROUP_PROVIDER_PREFIX + "1"))).thenReturn(new StandardPropertyValue(String.valueOf("1"), null, ParameterLookup.EMPTY));
         mockProperties(configurationContext);
 
         final CompositeUserGroupProvider compositeUserGroupProvider = new CompositeUserGroupProvider();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-authorization/src/test/java/org/apache/nifi/authorization/CompositeUserGroupProviderTestBase.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.nifi.authorization;
 
+import org.apache.nifi.parameter.ParameterLookup;
 import org.apache.nifi.attribute.expression.language.StandardPropertyValue;
 import org.apache.nifi.components.PropertyValue;
 
@@ -220,7 +221,7 @@ protected UserGroupProvider initCompositeUserGroupProvider(
         final AuthorizerConfigurationContext configurationContext = mock(AuthorizerConfigurationContext.class);
 
         for (int i = 1; i <= providers.length; i++) {
-            when(configurationContext.getProperty(eq(PROP_USER_GROUP_PROVIDER_PREFIX + i))).thenReturn(new StandardPropertyValue(String.valueOf(i), null));
+            when(configurationContext.getProperty(eq(PROP_USER_GROUP_PROVIDER_PREFIX + i))).thenReturn(new StandardPropertyValue(String.valueOf(i), null, ParameterLookup.EMPTY));
         }
 
         // allow callers to mock additional properties

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-authorization/src/test/java/org/apache/nifi/authorization/StandardManagedAuthorizerTest.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.authorization;
 
-
+import org.apache.nifi.parameter.ParameterLookup;
 import org.apache.nifi.attribute.expression.language.StandardPropertyValue;
 import org.apache.nifi.authorization.exception.AuthorizationAccessException;
 import org.apache.nifi.authorization.exception.AuthorizerCreationException;
@@ -422,7 +422,7 @@ private StandardManagedAuthorizer getStandardManagedAuthorizer(final AccessPolic
         final StandardManagedAuthorizer managedAuthorizer = new StandardManagedAuthorizer();
 
         final AuthorizerConfigurationContext configurationContext = mock(AuthorizerConfigurationContext.class);
-        when(configurationContext.getProperty("Access Policy Provider")).thenReturn(new StandardPropertyValue("access-policy-provider", null));
+        when(configurationContext.getProperty("Access Policy Provider")).thenReturn(new StandardPropertyValue("access-policy-provider", null, ParameterLookup.EMPTY));
 
         final AccessPolicyProviderLookup accessPolicyProviderLookup = mock(AccessPolicyProviderLookup.class);
         when(accessPolicyProviderLookup.getAccessPolicyProvider("access-policy-provider")).thenReturn(accessPolicyProvider);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/queue/clustered/LoadBalancedQueueIT.java
Patch:
@@ -1340,7 +1340,7 @@ public InputStream answer(final InvocationOnMock invocation) {
 
                 return new ByteArrayInputStream(bytes);
             }
-        }).when(contentRepo).read(any(ContentClaim.class));
+        }).when(contentRepo).read(Mockito.nullable(ContentClaim.class));
 
         return contentRepo;
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/integration/versioned/ImportFlowIT.java
Patch:
@@ -101,7 +101,7 @@ public void testImportFlowWithProcessorAndControllerService() throws ExecutionEx
         assertEquals(ValidationStatus.VALID, procValidationStatus);
 
         // Ensure that the reference to the controller service was properly updated
-        final String referencedServiceId = procNode.getProperty(NopServiceReferencingProcessor.SERVICE);
+        final String referencedServiceId = procNode.getEffectivePropertyValue(NopServiceReferencingProcessor.SERVICE);
         assertEquals(serviceNode.getIdentifier(), referencedServiceId);
         assertNotEquals("service-id", referencedServiceId);
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/audit/ControllerServiceAuditor.java
Patch:
@@ -412,8 +412,9 @@ private Map<String, String> extractConfiguredPropertyValues(ControllerServiceNod
         }
         if (controllerServiceDTO.getProperties() != null) {
             // for each property specified, extract its configured value
-            Map<String, String> properties = controllerServiceDTO.getProperties();
-            Map<PropertyDescriptor, String> configuredProperties = controllerService.getProperties();
+            final Map<String, String> properties = controllerServiceDTO.getProperties();
+            final Map<PropertyDescriptor, String> configuredProperties = controllerService.getRawPropertyValues();
+
             for (String propertyName : properties.keySet()) {
                 // build a descriptor for getting the configured value
                 PropertyDescriptor propertyDescriptor = new PropertyDescriptor.Builder().name(propertyName).build();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/audit/ProcessorAuditor.java
Patch:
@@ -356,7 +356,7 @@ private Map<String, String> extractConfiguredPropertyValues(ProcessorNode proces
             if (newConfig.getProperties() != null) {
                 // for each property specified, extract its configured value
                 Map<String, String> properties = newConfig.getProperties();
-                Map<PropertyDescriptor, String> configuredProperties = processor.getProperties();
+                Map<PropertyDescriptor, String> configuredProperties = processor.getRawPropertyValues();
                 for (String propertyName : properties.keySet()) {
                     // build a descriptor for getting the configured value
                     PropertyDescriptor propertyDescriptor = new PropertyDescriptor.Builder().name(propertyName).build();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/audit/ReportingTaskAuditor.java
Patch:
@@ -315,7 +315,7 @@ private Map<String, String> extractConfiguredPropertyValues(ReportingTaskNode re
         if (reportingTaskDTO.getProperties() != null) {
             // for each property specified, extract its configured value
             Map<String, String> properties = reportingTaskDTO.getProperties();
-            Map<PropertyDescriptor, String> configuredProperties = reportingTask.getProperties();
+            Map<PropertyDescriptor, String> configuredProperties = reportingTask.getRawPropertyValues();
             for (String propertyName : properties.keySet()) {
                 // build a descriptor for getting the configured value
                 PropertyDescriptor propertyDescriptor = new PropertyDescriptor.Builder().name(propertyName).build();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/SnippetAuthorizable.java
Patch:
@@ -29,7 +29,7 @@ public interface SnippetAuthorizable {
      *
      * @return authorizable for parent process group of this snippet
      */
-    Authorizable getParentProcessGroup();
+    ProcessGroupAuthorizable getParentProcessGroup();
 
     /**
      * The authorizables for selected processors. Non null

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/NiFiWebApiResourceConfig.java
Patch:
@@ -99,6 +99,7 @@ public NiFiWebApiResourceConfig(@Context ServletContext servletContext) {
         register(ctx.getBean("accessPolicyResource"));
         register(ctx.getBean("tenantsResource"));
         register(ctx.getBean("versionsResource"));
+        register(ctx.getBean("parameterContextResource"));
 
         // exception mappers
         register(AccessDeniedExceptionMapper.class);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ControllerServiceResource.java
Patch:
@@ -24,6 +24,7 @@
 import io.swagger.annotations.Authorization;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.nifi.authorization.AuthorizeControllerServiceReference;
+import org.apache.nifi.authorization.AuthorizeParameterReference;
 import org.apache.nifi.authorization.Authorizer;
 import org.apache.nifi.authorization.ComponentAuthorizable;
 import org.apache.nifi.authorization.RequestAction;
@@ -635,6 +636,8 @@ public Response updateControllerService(
 
                     // authorize any referenced services
                     AuthorizeControllerServiceReference.authorizeControllerServiceReferences(requestControllerServiceDTO.getProperties(), authorizable, authorizer, lookup);
+                        AuthorizeParameterReference.authorizeParameterReferences(requestControllerServiceDTO.getProperties(), authorizer, authorizable.getParameterContext(),
+                            NiFiUserUtils.getNiFiUser());
                 },
                 () -> serviceFacade.verifyUpdateControllerService(requestControllerServiceDTO),
                 (revision, controllerServiceEntity) -> {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessorResource.java
Patch:
@@ -24,6 +24,7 @@
 import io.swagger.annotations.Authorization;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.nifi.authorization.AuthorizeControllerServiceReference;
+import org.apache.nifi.authorization.AuthorizeParameterReference;
 import org.apache.nifi.authorization.Authorizer;
 import org.apache.nifi.authorization.ComponentAuthorizable;
 import org.apache.nifi.authorization.RequestAction;
@@ -518,7 +519,7 @@ public Response updateProcessor(
             @ApiParam(
                     value = "The processor configuration details.",
                     required = true
-            ) final ProcessorEntity requestProcessorEntity) throws InterruptedException {
+            ) final ProcessorEntity requestProcessorEntity) {
 
         if (requestProcessorEntity == null || requestProcessorEntity.getComponent() == null) {
             throw new IllegalArgumentException("Processor details must be specified.");
@@ -563,6 +564,7 @@ public Response updateProcessor(
                     final ProcessorConfigDTO config = requestProcessorDTO.getConfig();
                     if (config != null) {
                         AuthorizeControllerServiceReference.authorizeControllerServiceReferences(config.getProperties(), authorizable, authorizer, lookup);
+                        AuthorizeParameterReference.authorizeParameterReferences(config.getProperties(), authorizer, authorizable.getParameterContext(), user);
                     }
                 },
                 () -> serviceFacade.verifyUpdateProcessor(requestProcessorDTO),

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/controller/ControllerSearchService.java
Patch:
@@ -261,7 +261,7 @@ private ComponentSearchResultDTO search(final String searchStr, final ProcessorN
         addIfAppropriate(searchStr, processor.getClass().getSimpleName(), "Type", matches);
         addIfAppropriate(searchStr, procNode.getComponentType(), "Type", matches);
 
-        for (final Map.Entry<PropertyDescriptor, String> entry : procNode.getProperties().entrySet()) {
+        for (final Map.Entry<PropertyDescriptor, String> entry : procNode.getRawPropertyValues().entrySet()) {
             final PropertyDescriptor descriptor = entry.getKey();
 
             addIfAppropriate(searchStr, descriptor.getName(), "Property name", matches);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardSnippetDAO.java
Patch:
@@ -294,7 +294,7 @@ private void lookupSensitiveProcessorProperties(final Set<ProcessorDTO> processo
                 }
 
                 // look for sensitive properties get the actual value
-                for (Entry<PropertyDescriptor, String> entry : processorNode.getProperties().entrySet()) {
+                for (Entry<PropertyDescriptor, String> entry : processorNode.getRawPropertyValues().entrySet()) {
                     final PropertyDescriptor descriptor = entry.getKey();
 
                     if (descriptor.isSensitive()) {
@@ -319,7 +319,7 @@ private void lookupSensitiveControllerServiceProperties(final Set<ControllerServ
                 }
 
                 // look for sensitive properties get the actual value
-                for (Entry<PropertyDescriptor, String> entry : serviceNode.getProperties().entrySet()) {
+                for (Entry<PropertyDescriptor, String> entry : serviceNode.getRawPropertyValues().entrySet()) {
                     final PropertyDescriptor descriptor = entry.getKey();
 
                     if (descriptor.isSensitive()) {

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/merge/RecordBinManager.java
Patch:
@@ -182,8 +182,8 @@ public void add(final String groupIdentifier, final FlowFile flowFile, final Rec
 
 
     private RecordBinThresholds createThresholds(FlowFile flowfile) {
-        int minRecords = context.getProperty(MergeRecord.MIN_RECORDS).asInteger();
-        final int maxRecords = context.getProperty(MergeRecord.MAX_RECORDS).asInteger();
+        int minRecords = context.getProperty(MergeRecord.MIN_RECORDS).evaluateAttributeExpressions().asInteger();
+        final int maxRecords = context.getProperty(MergeRecord.MAX_RECORDS).evaluateAttributeExpressions().asInteger();
         final long minBytes = context.getProperty(MergeRecord.MIN_SIZE).asDataSize(DataUnit.B).longValue();
 
         final PropertyValue maxSizeValue = context.getProperty(MergeRecord.MAX_SIZE);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/groups/StandardProcessGroup.java
Patch:
@@ -3371,7 +3371,8 @@ public void updateFlow(final VersionedFlowSnapshot proposedSnapshot, final Strin
                     if (ComponentType.CONTROLLER_SERVICE == component.getComponentType()) {
                         final ControllerServiceNode serviceNode = getVersionedControllerService(this, component.getIdentifier());
                         if (serviceNode != null) {
-                            final VersionedControllerService versionedService = mapper.mapControllerService(serviceNode, controllerServiceProvider);
+                            final VersionedControllerService versionedService = mapper.mapControllerService(serviceNode, controllerServiceProvider,
+                                Collections.singleton(serviceNode.getProcessGroupIdentifier()), new HashMap<>());
                             final Set<FlowDifference> differences = flowComparator.compareControllerServices(versionedService, (VersionedControllerService) component);
 
                             if (!differences.isEmpty()) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/integration/versioned/ImportFlowIT.java
Patch:
@@ -41,6 +41,7 @@
 
 import java.util.Collection;
 import java.util.Collections;
+import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
@@ -136,13 +137,13 @@ private VersionedFlowSnapshot createFlowSnapshot(final List<ControllerServiceNod
 
         final Set<VersionedProcessor> versionedProcessors = new HashSet<>();
         for (final ProcessorNode processor : processors) {
-            final VersionedProcessor versionedProcessor = flowMapper.mapProcessor(processor, getFlowController().getControllerServiceProvider());
+            final VersionedProcessor versionedProcessor = flowMapper.mapProcessor(processor, getFlowController().getControllerServiceProvider(), Collections.emptySet(), new HashMap<>());
             versionedProcessors.add(versionedProcessor);
         }
 
         final Set<VersionedControllerService> services = new HashSet<>();
         for (final ControllerServiceNode serviceNode : controllerServices) {
-            final VersionedControllerService service = flowMapper.mapControllerService(serviceNode, getFlowController().getControllerServiceProvider());
+            final VersionedControllerService service = flowMapper.mapControllerService(serviceNode, getFlowController().getControllerServiceProvider(), Collections.emptySet(), new HashMap<>());
             services.add(service);
         }
 

File: nifi-mock/src/main/java/org/apache/nifi/util/MockPropertyValue.java
Patch:
@@ -294,7 +294,7 @@ public String toString() {
 
     @Override
     public boolean isExpressionLanguagePresent() {
-        if (!Boolean.TRUE.equals(expectExpressions)) {
+        if (rawValue == null) {
             return false;
         }
 

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/main/java/org/apache/nifi/processors/azure/eventhub/ConsumeAzureEventHub.java
Patch:
@@ -465,7 +465,7 @@ private void writeRecords(PartitionContext context, Iterable<EventData> messages
                                 // Initialize the writer when the first record is read.
                                 final RecordSchema readerSchema = record.getSchema();
                                 final RecordSchema writeSchema = writerFactory.getSchema(schemaRetrievalVariables, readerSchema);
-                                writer = writerFactory.createWriter(logger, writeSchema, out);
+                                writer = writerFactory.createWriter(logger, writeSchema, out, flowFile);
                                 writer.beginRecordSet();
                             }
 

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/test/java/org/apache/nifi/processors/azure/eventhub/TestConsumeAzureEventHub.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.microsoft.azure.eventhubs.EventData;
 import com.microsoft.azure.eventprocessorhost.PartitionContext;
+import org.apache.nifi.flowfile.FlowFile;
 import org.apache.nifi.processor.ProcessSessionFactory;
 import org.apache.nifi.processor.ProcessorInitializationContext;
 import org.apache.nifi.provenance.ProvenanceEventRecord;
@@ -180,7 +181,7 @@ private void setupRecordWriter(String throwErrorWith) throws SchemaNotFoundExcep
         processor.setWriterFactory(writerFactory);
         final RecordSetWriter writer = mock(RecordSetWriter.class);
         final AtomicReference<OutputStream> outRef = new AtomicReference<>();
-        when(writerFactory.createWriter(any(), any(), any())).thenAnswer(invocation -> {
+        when(writerFactory.createWriter(any(), any(), any(), any(FlowFile.class))).thenAnswer(invocation -> {
             outRef.set(invocation.getArgument(2));
             return writer;
         });

File: nifi-nar-bundles/nifi-druid-bundle/nifi-druid-processors/src/main/java/org/apache/nifi/processors/druid/PutDruidRecord.java
Patch:
@@ -187,11 +187,11 @@ private void processFlowFile(ProcessContext context, final ProcessSession sessio
 
             final RecordReader reader = recordParserFactory.createRecordReader(flowFile, in, getLogger());
             final RecordSchema outSchema = writerFactory.getSchema(attributes, reader.getSchema());
-            droppedRecordWriter = writerFactory.createWriter(log, outSchema, droppedOutputStream);
+            droppedRecordWriter = writerFactory.createWriter(log, outSchema, droppedOutputStream, flowFile);
             droppedRecordWriter.beginRecordSet();
-            failedRecordWriter = writerFactory.createWriter(log, outSchema, failedOutputStream);
+            failedRecordWriter = writerFactory.createWriter(log, outSchema, failedOutputStream, flowFile);
             failedRecordWriter.beginRecordSet();
-            successfulRecordWriter = writerFactory.createWriter(log, outSchema, successfulOutputStream);
+            successfulRecordWriter = writerFactory.createWriter(log, outSchema, successfulOutputStream, flowFile);
             successfulRecordWriter.beginRecordSet();
 
             Record r;

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-processors/src/main/java/org/apache/nifi/processors/elasticsearch/PutElasticsearchHttpRecord.java
Patch:
@@ -558,8 +558,8 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
 
                 final RecordSchema schema = writerFactory.getSchema(inputFlowFile.getAttributes(), reader.getSchema());
 
-                try (final RecordSetWriter successWriter = writerFactory.createWriter(getLogger(), schema, successOut);
-                     final RecordSetWriter failedWriter = writerFactory.createWriter(getLogger(), schema, failedOut)) {
+                try (final RecordSetWriter successWriter = writerFactory.createWriter(getLogger(), schema, successOut, successFlowFile);
+                     final RecordSetWriter failedWriter = writerFactory.createWriter(getLogger(), schema, failedOut, failedFlowFile)) {
 
                     successWriter.beginRecordSet();
                     failedWriter.beginRecordSet();

File: nifi-nar-bundles/nifi-extension-utils/nifi-record-utils/nifi-hadoop-record-utils/src/main/java/org/apache/nifi/processors/hadoop/AbstractFetchHDFSRecord.java
Patch:
@@ -199,7 +199,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
                         final RecordSchema schema = recordSetWriterFactory.getSchema(originalFlowFile.getAttributes(),
                                 record == null ? null : record.getSchema());
 
-                        try (final RecordSetWriter recordSetWriter = recordSetWriterFactory.createWriter(getLogger(), schema, out)) {
+                        try (final RecordSetWriter recordSetWriter = recordSetWriterFactory.createWriter(getLogger(), schema, out, originalFlowFile)) {
                             recordSetWriter.beginRecordSet();
                             if (record != null) {
                                 recordSetWriter.write(record);

File: nifi-nar-bundles/nifi-extension-utils/nifi-record-utils/nifi-mock-record-utils/src/main/java/org/apache/nifi/serialization/record/ArrayListRecordWriter.java
Patch:
@@ -30,8 +30,8 @@
 import java.util.Map;
 
 /**
- * An implementation that is suitable for testing that does not serialize the data to an Output Stream but insted just buffers the data into an
- * ArrayList and then provides that List of written records to the user
+ * An implementation that is suitable for testing that does not serialize the data to an Output Stream but instead just buffers the data into an
+ * ArrayList and then provides that List of written records to the user.
  */
 public class ArrayListRecordWriter extends AbstractControllerService implements RecordSetWriterFactory {
     private final List<Record> records = new ArrayList<>();
@@ -48,7 +48,7 @@ public RecordSchema getSchema(final Map<String, String> variables, final RecordS
     }
 
     @Override
-    public RecordSetWriter createWriter(final ComponentLog logger, final RecordSchema schema, final OutputStream out) {
+    public RecordSetWriter createWriter(final ComponentLog logger, final RecordSchema schema, final OutputStream out, final Map<String, String> variables) {
         return new ArrayListRecordSetWriter(records);
     }
 

File: nifi-nar-bundles/nifi-extension-utils/nifi-record-utils/nifi-mock-record-utils/src/main/java/org/apache/nifi/serialization/record/MockRecordWriter.java
Patch:
@@ -70,7 +70,7 @@ public RecordSchema getSchema(Map<String, String> variables, RecordSchema readSc
     }
 
     @Override
-    public RecordSetWriter createWriter(final ComponentLog logger, final RecordSchema schema, final OutputStream rawOut) {
+    public RecordSetWriter createWriter(final ComponentLog logger, final RecordSchema schema, final OutputStream rawOut, Map<String, String> variables) {
         final OutputStream out = bufferOutput ? new BufferedOutputStream(rawOut) : rawOut;
 
         return new RecordSetWriter() {

File: nifi-nar-bundles/nifi-jolt-record-bundle/nifi-jolt-record-processors/src/main/java/org/apache/nifi/processors/jolt/record/JoltTransformRecord.java
Patch:
@@ -312,7 +312,7 @@ public void onTrigger(final ProcessContext context, ProcessSession session) thro
                 final Record firstRecord = reader.nextRecord();
                 if (firstRecord == null) {
                     try (final OutputStream out = session.write(transformed);
-                         final RecordSetWriter writer = writerFactory.createWriter(getLogger(), schema, out)) {
+                         final RecordSetWriter writer = writerFactory.createWriter(getLogger(), schema, out, transformed)) {
 
                         writer.beginRecordSet();
                         writeResult = writer.finishRecordSet();
@@ -339,7 +339,7 @@ public void onTrigger(final ProcessContext context, ProcessSession session) thro
                 // and instead use a Map<RecordSchema, RecordSetWriter>. This way, even if many different output schemas are possible,
                 // the output FlowFiles will each only contain records that have the same schema.
                 try (final OutputStream out = session.write(transformed);
-                     final RecordSetWriter writer = writerFactory.createWriter(getLogger(), writeSchema, out)) {
+                     final RecordSetWriter writer = writerFactory.createWriter(getLogger(), writeSchema, out, transformed)) {
 
                     writer.beginRecordSet();
 

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-0-10-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/ConsumerLease.java
Patch:
@@ -508,7 +508,7 @@ private void writeRecordData(final ProcessSession session, final List<ConsumerRe
                             throw new ProcessException(e);
                         }
 
-                        writer = writerFactory.createWriter(logger, writeSchema, rawOut);
+                        writer = writerFactory.createWriter(logger, writeSchema, rawOut, flowFile);
                         writer.beginRecordSet();
 
                         tracker = new BundleTracker(consumerRecord, topicPartition, keyEncoding, writer);

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-0-10-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/PublisherLease.java
Patch:
@@ -122,7 +122,7 @@ void publish(final FlowFile flowFile, final RecordSet recordSet, final RecordSet
                 recordCount++;
                 baos.reset();
 
-                try (final RecordSetWriter writer = writerFactory.createWriter(logger, schema, baos)) {
+                try (final RecordSetWriter writer = writerFactory.createWriter(logger, schema, baos, flowFile)) {
                     writer.write(record);
                     writer.flush();
                 }

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-0-10-processors/src/test/java/org/apache/nifi/processors/kafka/pubsub/TestPublisherLease.java
Patch:
@@ -282,11 +282,11 @@ public void testRecordsSentToRecordWriterAndThenToProducer() throws IOException,
         final RecordSetWriterFactory writerFactory = Mockito.mock(RecordSetWriterFactory.class);
         final RecordSetWriter writer = Mockito.mock(RecordSetWriter.class);
 
-        Mockito.when(writerFactory.createWriter(eq(logger), eq(schema), any())).thenReturn(writer);
+        Mockito.when(writerFactory.createWriter(eq(logger), eq(schema), any(), eq(flowFile))).thenReturn(writer);
 
         lease.publish(flowFile, recordSet, writerFactory, schema, keyField, topic);
 
-        verify(writerFactory, times(2)).createWriter(eq(logger), eq(schema), any());
+        verify(writerFactory, times(2)).createWriter(eq(logger), eq(schema), any(), eq(flowFile));
         verify(writer, times(2)).write(any(Record.class));
         verify(producer, times(2)).send(any(), any());
     }

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-0-10-processors/src/test/java/org/apache/nifi/processors/kafka/pubsub/util/MockRecordWriter.java
Patch:
@@ -57,7 +57,7 @@ public RecordSchema getSchema(Map<String, String> variables, RecordSchema readSc
     }
 
     @Override
-    public RecordSetWriter createWriter(final ComponentLog logger, final RecordSchema schema, final OutputStream out) {
+    public RecordSetWriter createWriter(final ComponentLog logger, final RecordSchema schema, final OutputStream out, final Map<String, String> variables) {
         return new RecordSetWriter() {
 
             @Override

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-0-11-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/ConsumerLease.java
Patch:
@@ -558,7 +558,7 @@ private void writeRecordData(final ProcessSession session, final List<ConsumerRe
                                     throw new ProcessException(e);
                                 }
 
-                                writer = writerFactory.createWriter(logger, writeSchema, rawOut);
+                                writer = writerFactory.createWriter(logger, writeSchema, rawOut, flowFile);
                                 writer.beginRecordSet();
 
                                 tracker = new BundleTracker(consumerRecord, topicPartition, keyEncoding, writer);

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-0-11-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/PublisherLease.java
Patch:
@@ -167,7 +167,7 @@ void publish(final FlowFile flowFile, final RecordSet recordSet, final RecordSet
                 baos.reset();
 
                 Map<String, String> additionalAttributes = Collections.emptyMap();
-                try (final RecordSetWriter writer = writerFactory.createWriter(logger, schema, baos)) {
+                try (final RecordSetWriter writer = writerFactory.createWriter(logger, schema, baos, flowFile)) {
                     final WriteResult writeResult = writer.write(record);
                     additionalAttributes = writeResult.getAttributes();
                     writer.flush();

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-0-11-processors/src/test/java/org/apache/nifi/processors/kafka/pubsub/TestPublisherLease.java
Patch:
@@ -277,11 +277,11 @@ public void testRecordsSentToRecordWriterAndThenToProducer() throws IOException,
         final RecordSetWriter writer = Mockito.mock(RecordSetWriter.class);
         Mockito.when(writer.write(Mockito.any(Record.class))).thenReturn(WriteResult.of(1, Collections.emptyMap()));
 
-        Mockito.when(writerFactory.createWriter(eq(logger), eq(schema), any())).thenReturn(writer);
+        Mockito.when(writerFactory.createWriter(eq(logger), eq(schema), any(), eq(flowFile))).thenReturn(writer);
 
         lease.publish(flowFile, recordSet, writerFactory, schema, keyField, topic);
 
-        verify(writerFactory, times(2)).createWriter(eq(logger), eq(schema), any());
+        verify(writerFactory, times(2)).createWriter(eq(logger), eq(schema), any(), eq(flowFile));
         verify(writer, times(2)).write(any(Record.class));
         verify(producer, times(2)).send(any(), any());
     }

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-0-11-processors/src/test/java/org/apache/nifi/processors/kafka/pubsub/util/MockRecordWriter.java
Patch:
@@ -57,7 +57,7 @@ public RecordSchema getSchema(Map<String, String> variables, RecordSchema readSc
     }
 
     @Override
-    public RecordSetWriter createWriter(final ComponentLog logger, final RecordSchema schema, final OutputStream out) {
+    public RecordSetWriter createWriter(final ComponentLog logger, final RecordSchema schema, final OutputStream out, final Map<String, String> variables) {
         return new RecordSetWriter() {
 
             @Override

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-1-0-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/ConsumerLease.java
Patch:
@@ -558,7 +558,7 @@ private void writeRecordData(final ProcessSession session, final List<ConsumerRe
                                     throw new ProcessException(e);
                                 }
 
-                                writer = writerFactory.createWriter(logger, writeSchema, rawOut);
+                                writer = writerFactory.createWriter(logger, writeSchema, rawOut, flowFile);
                                 writer.beginRecordSet();
 
                                 tracker = new BundleTracker(consumerRecord, topicPartition, keyEncoding, writer);

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-1-0-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/PublisherLease.java
Patch:
@@ -166,7 +166,7 @@ void publish(final FlowFile flowFile, final RecordSet recordSet, final RecordSet
                 baos.reset();
 
                 Map<String, String> additionalAttributes = Collections.emptyMap();
-                try (final RecordSetWriter writer = writerFactory.createWriter(logger, schema, baos)) {
+                try (final RecordSetWriter writer = writerFactory.createWriter(logger, schema, baos, flowFile)) {
                     final WriteResult writeResult = writer.write(record);
                     additionalAttributes = writeResult.getAttributes();
                     writer.flush();

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-1-0-processors/src/test/java/org/apache/nifi/processors/kafka/pubsub/TestPublisherLease.java
Patch:
@@ -277,11 +277,11 @@ public void testRecordsSentToRecordWriterAndThenToProducer() throws IOException,
         final RecordSetWriter writer = Mockito.mock(RecordSetWriter.class);
         Mockito.when(writer.write(Mockito.any(Record.class))).thenReturn(WriteResult.of(1, Collections.emptyMap()));
 
-        Mockito.when(writerFactory.createWriter(eq(logger), eq(schema), any())).thenReturn(writer);
+        Mockito.when(writerFactory.createWriter(eq(logger), eq(schema), any(), eq(flowFile))).thenReturn(writer);
 
         lease.publish(flowFile, recordSet, writerFactory, schema, keyField, topic);
 
-        verify(writerFactory, times(2)).createWriter(eq(logger), eq(schema), any());
+        verify(writerFactory, times(2)).createWriter(eq(logger), eq(schema), any(), eq(flowFile));
         verify(writer, times(2)).write(any(Record.class));
         verify(producer, times(2)).send(any(), any());
     }

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-1-0-processors/src/test/java/org/apache/nifi/processors/kafka/pubsub/util/MockRecordWriter.java
Patch:
@@ -57,7 +57,7 @@ public RecordSchema getSchema(Map<String, String> variables, RecordSchema readSc
     }
 
     @Override
-    public RecordSetWriter createWriter(final ComponentLog logger, final RecordSchema schema, final OutputStream out) {
+    public RecordSetWriter createWriter(final ComponentLog logger, final RecordSchema schema, final OutputStream out, final Map<String, String> variables) {
         return new RecordSetWriter() {
 
             @Override

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-2-0-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/ConsumerLease.java
Patch:
@@ -558,7 +558,7 @@ private void writeRecordData(final ProcessSession session, final List<ConsumerRe
                                     throw new ProcessException(e);
                                 }
 
-                                writer = writerFactory.createWriter(logger, writeSchema, rawOut);
+                                writer = writerFactory.createWriter(logger, writeSchema, rawOut, flowFile);
                                 writer.beginRecordSet();
 
                                 tracker = new BundleTracker(consumerRecord, topicPartition, keyEncoding, writer);

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-2-0-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/PublisherLease.java
Patch:
@@ -166,7 +166,7 @@ void publish(final FlowFile flowFile, final RecordSet recordSet, final RecordSet
                 baos.reset();
 
                 Map<String, String> additionalAttributes = Collections.emptyMap();
-                try (final RecordSetWriter writer = writerFactory.createWriter(logger, schema, baos)) {
+                try (final RecordSetWriter writer = writerFactory.createWriter(logger, schema, baos, flowFile)) {
                     final WriteResult writeResult = writer.write(record);
                     additionalAttributes = writeResult.getAttributes();
                     writer.flush();

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-2-0-processors/src/test/java/org/apache/nifi/processors/kafka/pubsub/TestPublisherLease.java
Patch:
@@ -278,11 +278,11 @@ public void testRecordsSentToRecordWriterAndThenToProducer() throws IOException,
         final RecordSetWriter writer = Mockito.mock(RecordSetWriter.class);
         Mockito.when(writer.write(Mockito.any(Record.class))).thenReturn(WriteResult.of(1, Collections.emptyMap()));
 
-        Mockito.when(writerFactory.createWriter(eq(logger), eq(schema), any())).thenReturn(writer);
+        Mockito.when(writerFactory.createWriter(eq(logger), eq(schema), any(), eq(flowFile))).thenReturn(writer);
 
         lease.publish(flowFile, recordSet, writerFactory, schema, keyField, topic);
 
-        verify(writerFactory, times(2)).createWriter(eq(logger), eq(schema), any());
+        verify(writerFactory, times(2)).createWriter(eq(logger), eq(schema), any(), eq(flowFile));
         verify(writer, times(2)).write(any(Record.class));
         verify(producer, times(2)).send(any(), any());
     }

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-2-0-processors/src/test/java/org/apache/nifi/processors/kafka/pubsub/util/MockRecordWriter.java
Patch:
@@ -57,7 +57,7 @@ public RecordSchema getSchema(Map<String, String> variables, RecordSchema readSc
     }
 
     @Override
-    public RecordSetWriter createWriter(final ComponentLog logger, final RecordSchema schema, final OutputStream out) {
+    public RecordSetWriter createWriter(final ComponentLog logger, final RecordSchema schema, final OutputStream out, final Map<String, String> variables) {
         return new RecordSetWriter() {
 
             @Override

File: nifi-nar-bundles/nifi-mongodb-bundle/nifi-mongodb-processors/src/main/java/org/apache/nifi/processors/mongodb/GetMongoRecord.java
Patch:
@@ -165,7 +165,7 @@ public void onTrigger(ProcessContext context, ProcessSession session) throws Pro
                     put("schema.name", schemaName);
                 }};
                 RecordSchema schema = writerFactory.getSchema(attrs, null);
-                RecordSetWriter writer = writerFactory.createWriter(getLogger(), schema, out);
+                RecordSetWriter writer = writerFactory.createWriter(getLogger(), schema, out, attrs);
                 long count = 0L;
                 writer.beginRecordSet();
                 while (cursor.hasNext()) {

File: nifi-nar-bundles/nifi-parquet-bundle/nifi-parquet-processors/src/test/java/org/apache/nifi/processors/parquet/FetchParquetTest.java
Patch:
@@ -230,7 +230,8 @@ public void testIOExceptionWhileWritingShouldRouteToRetry() throws Initializatio
 
         final RecordSetWriterFactory recordSetWriterFactory = Mockito.mock(RecordSetWriterFactory.class);
         when(recordSetWriterFactory.getIdentifier()).thenReturn("mock-writer-factory");
-        when(recordSetWriterFactory.createWriter(any(ComponentLog.class), AdditionalMatchers.or(any(RecordSchema.class), isNull()), any(OutputStream.class))).thenReturn(recordSetWriter);
+        when(recordSetWriterFactory.createWriter(any(ComponentLog.class), AdditionalMatchers.or(any(RecordSchema.class), isNull()), any(OutputStream.class), any(FlowFile.class)))
+                .thenReturn(recordSetWriter);
 
         testRunner.addControllerService("mock-writer-factory", recordSetWriterFactory);
         testRunner.enableControllerService(recordSetWriterFactory);

File: nifi-nar-bundles/nifi-poi-bundle/nifi-poi-processors/src/main/java/org/apache/nifi/processors/poi/ConvertExcelToCSVProcessor.java
Patch:
@@ -202,7 +202,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
         final String desiredSheetsDelimited = context.getProperty(DESIRED_SHEETS).evaluateAttributeExpressions(flowFile).getValue();
         final boolean formatValues = context.getProperty(FORMAT_VALUES).asBoolean();
 
-        final CSVFormat csvFormat = CSVUtils.createCSVFormat(context);
+        final CSVFormat csvFormat = CSVUtils.createCSVFormat(context, flowFile.getAttributes());
 
         //Switch to 0 based index
         final int firstRow = context.getProperty(ROWS_TO_SKIP).evaluateAttributeExpressions(flowFile).asInteger() - 1;

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/record/script/ScriptedRecordSetWriter.java
Patch:
@@ -62,10 +62,10 @@ public void onEnabled(final ConfigurationContext context) {
 
 
     @Override
-    public RecordSetWriter createWriter(ComponentLog logger, RecordSchema schema, OutputStream out) throws SchemaNotFoundException, IOException {
+    public RecordSetWriter createWriter(ComponentLog logger, RecordSchema schema, OutputStream out, Map<String, String> variables) throws SchemaNotFoundException, IOException {
         if (recordFactory.get() != null) {
             try {
-                return recordFactory.get().createWriter(logger, schema, out);
+                return recordFactory.get().createWriter(logger, schema, out, variables);
             } catch (UndeclaredThrowableException ute) {
                 throw new IOException(ute.getCause());
             }

File: nifi-nar-bundles/nifi-site-to-site-reporting-bundle/nifi-site-to-site-reporting-task/src/main/java/org/apache/nifi/reporting/AbstractSiteToSiteReportingTask.java
Patch:
@@ -285,7 +285,7 @@ protected byte[] getData(final ReportingContext context, InputStream in, Map<Str
             final RecordSchema writeSchema = writerFactory.getSchema(null, recordSchema);
             final ByteArrayOutputStream out = new ByteArrayOutputStream();
 
-            try (final RecordSetWriter writer = writerFactory.createWriter(getLogger(), writeSchema, out)) {
+            try (final RecordSetWriter writer = writerFactory.createWriter(getLogger(), writeSchema, out, attributes)) {
                 writer.beginRecordSet();
 
                 Record record;

File: nifi-nar-bundles/nifi-solr-bundle/nifi-solr-processors/src/main/java/org/apache/nifi/processors/solr/GetSolr.java
Patch:
@@ -376,11 +376,12 @@ public void doOnTrigger(final ProcessContext context, final ProcessSession sessi
                         final RecordSchema schema = writerFactory.getSchema(null, null);
                         final RecordSet recordSet = SolrUtils.solrDocumentsToRecordSet(response.getResults(), schema);
                         final StringBuffer mimeType = new StringBuffer();
+                        final FlowFile flowFileRef = flowFile;
                         flowFile = session.write(flowFile, new OutputStreamCallback() {
                             @Override
                             public void process(final OutputStream out) throws IOException {
                                 try {
-                                    final RecordSetWriter writer = writerFactory.createWriter(getLogger(), schema, out);
+                                    final RecordSetWriter writer = writerFactory.createWriter(getLogger(), schema, out, flowFileRef);
                                     writer.write(recordSet);
                                     writer.flush();
                                     mimeType.append(writer.getMimeType());

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/AbstractRecordProcessor.java
Patch:
@@ -131,7 +131,7 @@ public void process(final InputStream in, final OutputStream out) throws IOExcep
                         Record firstRecord = reader.nextRecord();
                         if (firstRecord == null) {
                             final RecordSchema writeSchema = writerFactory.getSchema(originalAttributes, reader.getSchema());
-                            try (final RecordSetWriter writer = writerFactory.createWriter(getLogger(), writeSchema, out)) {
+                            try (final RecordSetWriter writer = writerFactory.createWriter(getLogger(), writeSchema, out, originalAttributes)) {
                                 writer.beginRecordSet();
 
                                 final WriteResult writeResult = writer.finishRecordSet();
@@ -147,7 +147,7 @@ public void process(final InputStream in, final OutputStream out) throws IOExcep
                         firstRecord = AbstractRecordProcessor.this.process(firstRecord, original, context);
 
                         final RecordSchema writeSchema = writerFactory.getSchema(originalAttributes, firstRecord.getSchema());
-                        try (final RecordSetWriter writer = writerFactory.createWriter(getLogger(), writeSchema, out)) {
+                        try (final RecordSetWriter writer = writerFactory.createWriter(getLogger(), writeSchema, out, originalAttributes)) {
                             writer.beginRecordSet();
 
                             writer.write(firstRecord);

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/AbstractRouteRecord.java
Patch:
@@ -219,11 +219,11 @@ private void writeRecord(final Record record, final Relationship relationship, f
         Tuple<FlowFile, RecordSetWriter> tuple = writers.get(relationship);
 
         if (tuple == null) {
-            FlowFile outFlowFile = session.create(original);
+            final FlowFile outFlowFile = session.create(original);
             final OutputStream out = session.write(outFlowFile);
 
             final RecordSchema recordWriteSchema = writerFactory.getSchema(originalAttributes, record.getSchema());
-            recordSetWriter = writerFactory.createWriter(getLogger(), recordWriteSchema, out);
+            recordSetWriter = writerFactory.createWriter(getLogger(), recordWriteSchema, out, outFlowFile);
             recordSetWriter.beginRecordSet();
 
             tuple = new Tuple<>(outFlowFile, recordSetWriter);

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ForkRecord.java
Patch:
@@ -243,7 +243,7 @@ public void process(final InputStream in) throws IOException {
                         final RecordSchema writeSchema = writerFactory.getSchema(originalAttributes, reader.getSchema());
                         final OutputStream out = session.write(outFlowFile);
 
-                        try (final RecordSetWriter recordSetWriter = writerFactory.createWriter(getLogger(), writeSchema, out)) {
+                        try (final RecordSetWriter recordSetWriter = writerFactory.createWriter(getLogger(), writeSchema, out, outFlowFile)) {
 
                             recordSetWriter.beginRecordSet();
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ListenTCPRecord.java
Patch:
@@ -379,7 +379,7 @@ record = recordReader.nextRecord();
 
                 final RecordSchema recordSchema = recordSetWriterFactory.getSchema(Collections.EMPTY_MAP, record.getSchema());
                 try (final OutputStream out = session.write(flowFile);
-                     final RecordSetWriter recordWriter = recordSetWriterFactory.createWriter(getLogger(), recordSchema, out)) {
+                     final RecordSetWriter recordWriter = recordSetWriterFactory.createWriter(getLogger(), recordSchema, out, flowFile)) {
 
                     // start the record set and write the first record from above
                     recordWriter.beginRecordSet();

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ListenUDPRecord.java
Patch:
@@ -274,7 +274,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
                     final RecordSchema recordSchema = firstRecord.getSchema();
                     final RecordSchema writeSchema = writerFactory.getSchema(Collections.emptyMap(), recordSchema);
 
-                    writer = writerFactory.createWriter(getLogger(), writeSchema, rawOut);
+                    writer = writerFactory.createWriter(getLogger(), writeSchema, rawOut, flowFile);
                     writer.beginRecordSet();
 
                     flowFileRecordWriter = new FlowFileRecordWriter(flowFile, writer);

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/PartitionRecord.java
Patch:
@@ -230,7 +230,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
 
                     final OutputStream out = session.write(childFlowFile);
 
-                    writer = writerFactory.createWriter(getLogger(), writeSchema, out);
+                    writer = writerFactory.createWriter(getLogger(), writeSchema, out, childFlowFile);
                     writer.beginRecordSet();
                     writerMap.put(recordValueMap, writer);
                 }

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/QueryRecord.java
Patch:
@@ -336,7 +336,7 @@ public void process(final OutputStream out) throws IOException {
                                     throw new ProcessException(e);
                                 }
 
-                                try (final RecordSetWriter resultSetWriter = recordSetWriterFactory.createWriter(getLogger(), writeSchema, out)) {
+                                try (final RecordSetWriter resultSetWriter = recordSetWriterFactory.createWriter(getLogger(), writeSchema, out, original)) {
                                     writeResultRef.set(resultSetWriter.write(recordSet));
                                     mimeTypeRef.set(resultSetWriter.getMimeType());
                                 } catch (final Exception e) {

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/SplitRecord.java
Patch:
@@ -169,7 +169,7 @@ public void process(final InputStream in) throws IOException {
                                 final WriteResult writeResult;
 
                                 try (final OutputStream out = session.write(split);
-                                    final RecordSetWriter writer = writerFactory.createWriter(getLogger(), schema, out)) {
+                                    final RecordSetWriter writer = writerFactory.createWriter(getLogger(), schema, out, split)) {
                                         if (maxRecords == 1) {
                                             final Record record = pushbackSet.next();
                                             writeResult = writer.write(record);

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ValidateRecord.java
Patch:
@@ -445,7 +445,7 @@ private RecordSetWriter createIfNecessary(final RecordSetWriter writer, final Re
         }
 
         final OutputStream out = session.write(flowFile);
-        final RecordSetWriter created = factory.createWriter(getLogger(), outputSchema, out);
+        final RecordSetWriter created = factory.createWriter(getLogger(), outputSchema, out, flowFile);
         created.beginRecordSet();
         return created;
     }

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/merge/RecordBin.java
Patch:
@@ -132,7 +132,7 @@ public boolean offer(final FlowFile flowFile, final RecordReader recordReader, f
 
                     this.out = new ByteCountingOutputStream(rawOut);
 
-                    recordWriter = writerFactory.createWriter(logger, record.getSchema(), out);
+                    recordWriter = writerFactory.createWriter(logger, record.getSchema(), out, flowFile);
                     recordWriter.beginRecordSet();
                 }
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/sql/RecordSqlWriter.java
Patch:
@@ -36,6 +36,7 @@
 import java.io.OutputStream;
 import java.sql.ResultSet;
 import java.sql.SQLException;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicReference;
@@ -77,7 +78,7 @@ public long writeResultSet(ResultSet resultSet, OutputStream outputStream, Compo
         } catch (final SQLException | SchemaNotFoundException | IOException e) {
             throw new ProcessException(e);
         }
-        try (final RecordSetWriter resultSetWriter = recordSetWriterFactory.createWriter(logger, writeSchema, outputStream)) {
+        try (final RecordSetWriter resultSetWriter = recordSetWriterFactory.createWriter(logger, writeSchema, outputStream, Collections.emptyMap())) {
             writeResultRef.set(resultSetWriter.write(recordSet));
             if (mimeType == null) {
                 mimeType = resultSetWriter.getMimeType();
@@ -115,7 +116,7 @@ public void updateCounters(ProcessSession session) {
 
     @Override
     public void writeEmptyResultSet(OutputStream outputStream, ComponentLog logger) throws IOException {
-        try (final RecordSetWriter resultSetWriter = recordSetWriterFactory.createWriter(logger, writeSchema, outputStream)) {
+        try (final RecordSetWriter resultSetWriter = recordSetWriterFactory.createWriter(logger, writeSchema, outputStream, Collections.emptyMap())) {
             mimeType = resultSetWriter.getMimeType();
             resultSetWriter.beginRecordSet();
             resultSetWriter.finishRecordSet();

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestQueryRecord.java
Patch:
@@ -824,7 +824,7 @@ public RecordSchema getSchema(Map<String, String> variables, RecordSchema readSc
         }
 
         @Override
-        public RecordSetWriter createWriter(final ComponentLog logger, final RecordSchema schema, final OutputStream out) {
+        public RecordSetWriter createWriter(final ComponentLog logger, final RecordSchema schema, final OutputStream out, final Map<String, String> variables) {
             return new RecordSetWriter() {
 
                 @Override

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/avro/AvroRecordSetWriter.java
Patch:
@@ -49,6 +49,7 @@
 import java.util.Collection;
 import java.util.EnumSet;
 import java.util.List;
+import java.util.Map;
 import java.util.Optional;
 import java.util.Set;
 import java.util.concurrent.BlockingQueue;
@@ -123,7 +124,7 @@ public void cleanup() {
     }
 
     @Override
-    public RecordSetWriter createWriter(final ComponentLog logger, final RecordSchema recordSchema, final OutputStream out) throws IOException {
+    public RecordSetWriter createWriter(final ComponentLog logger, final RecordSchema recordSchema, final OutputStream out, final Map<String, String> variables) throws IOException {
         final String strategyValue = getConfigurationContext().getProperty(getSchemaWriteStrategyDescriptor()).getValue();
         final String compressionFormat = getConfigurationContext().getProperty(COMPRESSION_FORMAT).getValue();
 

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/csv/CSVHeaderSchemaStrategy.java
Patch:
@@ -54,7 +54,7 @@ public RecordSchema getSchema(Map<String, String> variables, final InputStream c
         }
 
         try {
-            final CSVFormat csvFormat = CSVUtils.createCSVFormat(context).withFirstRecordAsHeader();
+            final CSVFormat csvFormat = CSVUtils.createCSVFormat(context, variables).withFirstRecordAsHeader();
             try (final Reader reader = new InputStreamReader(new BOMInputStream(contentStream));
                 final CSVParser csvParser = new CSVParser(reader, csvFormat)) {
 

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/csv/CSVRecordSource.java
Patch:
@@ -33,12 +33,13 @@
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Map;
 
 public class CSVRecordSource implements RecordSource<CSVRecordAndFieldNames> {
     private final Iterator<CSVRecord> csvRecordIterator;
     private final List<String> fieldNames;
 
-    public CSVRecordSource(final InputStream in, final PropertyContext context) throws IOException {
+    public CSVRecordSource(final InputStream in, final PropertyContext context, final Map<String, String> variables) throws IOException {
         final String charset = context.getProperty(CSVUtils.CHARSET).getValue();
 
         final Reader reader;
@@ -48,7 +49,7 @@ public CSVRecordSource(final InputStream in, final PropertyContext context) thro
             throw new ProcessException(e);
         }
 
-        final CSVFormat csvFormat = CSVUtils.createCSVFormat(context).withFirstRecordAsHeader().withTrim();
+        final CSVFormat csvFormat = CSVUtils.createCSVFormat(context, variables).withFirstRecordAsHeader().withTrim();
         final CSVParser csvParser = new CSVParser(reader, csvFormat);
         fieldNames = Collections.unmodifiableList(new ArrayList<>(csvParser.getHeaderMap().keySet()));
 

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/json/JsonRecordSetWriter.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
+import java.util.Map;
 
 import org.apache.commons.compress.compressors.CompressorException;
 import org.apache.commons.compress.compressors.CompressorStreamFactory;
@@ -173,7 +174,7 @@ public void onEnabled(final ConfigurationContext context) {
     }
 
     @Override
-    public RecordSetWriter createWriter(final ComponentLog logger, final RecordSchema schema, final OutputStream out) throws SchemaNotFoundException, IOException {
+    public RecordSetWriter createWriter(final ComponentLog logger, final RecordSchema schema, final OutputStream out, final Map<String, String> variables) throws SchemaNotFoundException, IOException {
 
         final OutputStream bufferedOut = new BufferedOutputStream(out, 65536);
         final OutputStream compressionOut;

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/text/FreeFormTextRecordSetWriter.java
Patch:
@@ -39,6 +39,7 @@
 import java.nio.charset.Charset;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Map;
 
 @Tags({"text", "freeform", "expression", "language", "el", "record", "recordset", "resultset", "writer", "serialize"})
 @CapabilityDescription("Writes the contents of a RecordSet as free-form text. The configured "
@@ -79,7 +80,7 @@ public void onEnabled(final ConfigurationContext context) {
     }
 
     @Override
-    public RecordSetWriter createWriter(final ComponentLog logger, final RecordSchema schema, final OutputStream out) {
+    public RecordSetWriter createWriter(final ComponentLog logger, final RecordSchema schema, final OutputStream out, final Map<String, String> variables) {
         return new FreeFormTextWriter(textValue, characterSet, out);
     }
 

File: nifi-nar-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/bigquery/AbstractBigQueryProcessor.java
Patch:
@@ -35,6 +35,7 @@
 import org.apache.nifi.proxy.ProxyConfiguration;
 import org.apache.nifi.util.StringUtils;
 
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
@@ -135,7 +136,7 @@ protected BigQueryOptions getServiceOptions(ProcessContext context, GoogleCreden
 
     @Override
     protected final Collection<ValidationResult> customValidate(ValidationContext validationContext) {
-        final Collection<ValidationResult> results = super.customValidate(validationContext);
+        final Collection<ValidationResult> results = new ArrayList<ValidationResult>(super.customValidate(validationContext));
         ProxyConfiguration.validateProxySpec(validationContext, results, ProxyAwareTransportFactory.PROXY_SPECS);
 
         final boolean projectId = validationContext.getProperty(PROJECT_ID).isSet();

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/main/java/org/apache/nifi/processors/hadoop/GetHDFSFileInfo.java
Patch:
@@ -369,8 +369,7 @@ protected HDFSObjectInfoDetails walkHDFSTree(final ProcessContext context, final
                 // Decide what to do with child: if requested FF per object or per dir - just emit new FF with info in 'o' object
                 if (vo != null && !statsOnly) {
                     parent.addChild(vo);
-                    if (p != null && req.isRecursive
-                            && vo.isFile() && !vo.isSymlink()) {
+                    if (vo.isFile() && !vo.isSymlink()) {
                         processHDFSObject(context, session, origFF, req, vo, false);
                     }
                 }

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-client-service-api/src/main/java/org/apache/nifi/elasticsearch/ElasticSearchClientService.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.Tags;
 import org.apache.nifi.components.PropertyDescriptor;
+import org.apache.nifi.components.Validator;
 import org.apache.nifi.controller.ControllerService;
 import org.apache.nifi.expression.ExpressionLanguageScope;
 import org.apache.nifi.processor.util.StandardValidators;
@@ -46,6 +47,7 @@ public interface ElasticSearchClientService extends ControllerService {
                     + "connections. This service only applies if the Elasticsearch endpoint(s) have been secured with TLS/SSL.")
             .required(false)
             .identifiesControllerService(SSLContextService.class)
+            .addValidator(Validator.VALID)
             .build();
     PropertyDescriptor USERNAME = new PropertyDescriptor.Builder()
             .name("el-cs-username")

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-client-service/src/main/java/org/apache/nifi/elasticsearch/ElasticSearchClientServiceImpl.java
Patch:
@@ -128,7 +128,7 @@ private void setupClient(ConfigurationContext context) throws MalformedURLExcept
 
         final SSLContext sslContext;
         try {
-            sslContext = (sslService != null && sslService.isKeyStoreConfigured() || sslService.isTrustStoreConfigured())
+            sslContext = (sslService != null && (sslService.isKeyStoreConfigured() || sslService.isTrustStoreConfigured()))
                 ? sslService.createSSLContext(SSLContextService.ClientAuth.NONE) : null;
         } catch (Exception e) {
             getLogger().error("Error building up SSL Context from the supplied configuration.", e);

File: nifi-commons/nifi-site-to-site-client/src/test/java/org/apache/nifi/remote/client/TestPeerSelector.java
Patch:
@@ -40,7 +40,7 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.doReturn;
 
@@ -204,7 +204,7 @@ public void testFetchRemotePeerStatuses() throws IOException {
 
         doReturn(bootstrapNode).when(peerStatusProvider).getBootstrapPeerDescription();
         doAnswer(invocation -> {
-            final PeerDescription peerFetchStatusesFrom = invocation.getArgumentAt(0, PeerDescription.class);
+            final PeerDescription peerFetchStatusesFrom = invocation.getArgument(0);
             if (peerStatuses.stream().filter(ps -> ps.getPeerDescription().equals(peerFetchStatusesFrom)).collect(Collectors.toSet()).size() > 0) {
                 // If the remote peer is running, then return available peer statuses.
                 return peerStatuses;

File: nifi-commons/nifi-site-to-site-client/src/test/java/org/apache/nifi/remote/protocol/http/TestHttpClientTransaction.java
Patch:
@@ -29,8 +29,8 @@
 import static org.apache.nifi.remote.protocol.SiteToSiteTestUtils.execSendZeroFlowFile;
 import static org.apache.nifi.remote.protocol.SiteToSiteTestUtils.readContents;
 import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.doNothing;
 import static org.mockito.Mockito.doReturn;

File: nifi-nar-bundles/nifi-ambari-bundle/nifi-ambari-reporting-task/src/test/java/org/apache/nifi/reporting/ambari/TestAmbariReportingTask.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.nifi.util.MockPropertyValue;
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.Matchers;
+import org.mockito.ArgumentMatchers;
 import org.mockito.Mockito;
 
 import javax.ws.rs.client.Client;
@@ -91,7 +91,7 @@ public void testOnTrigger() throws InitializationException, IOException {
 
         Mockito.when(client.target(metricsUrl)).thenReturn(target);
         Mockito.when(target.request()).thenReturn(builder);
-        Mockito.when(builder.post(Matchers.any(Entity.class))).thenReturn(response);
+        Mockito.when(builder.post(ArgumentMatchers.any(Entity.class))).thenReturn(response);
 
         // mock the ReportingInitializationContext for initialize(...)
         final ComponentLog logger = Mockito.mock(ComponentLog.class);

File: nifi-nar-bundles/nifi-atlas-bundle/nifi-atlas-reporting-task/src/test/java/org/apache/nifi/atlas/hook/TestNotificationSender.java
Patch:
@@ -52,7 +52,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: nifi-nar-bundles/nifi-atlas-bundle/nifi-atlas-reporting-task/src/test/java/org/apache/nifi/atlas/provenance/analyzer/TestHBaseTable.java
Patch:
@@ -31,7 +31,7 @@
 import static org.apache.nifi.atlas.NiFiTypes.ATTR_QUALIFIED_NAME;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
-import static org.mockito.Matchers.matches;
+import static org.mockito.ArgumentMatchers.matches;
 import static org.mockito.Mockito.when;
 
 public class TestHBaseTable {

File: nifi-nar-bundles/nifi-atlas-bundle/nifi-atlas-reporting-task/src/test/java/org/apache/nifi/atlas/provenance/analyzer/TestHDFSPath.java
Patch:
@@ -31,7 +31,7 @@
 import static org.apache.nifi.atlas.NiFiTypes.ATTR_QUALIFIED_NAME;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
-import static org.mockito.Matchers.matches;
+import static org.mockito.ArgumentMatchers.matches;
 import static org.mockito.Mockito.when;
 
 public class TestHDFSPath {

File: nifi-nar-bundles/nifi-atlas-bundle/nifi-atlas-reporting-task/src/test/java/org/apache/nifi/atlas/provenance/analyzer/TestHive2JDBC.java
Patch:
@@ -37,8 +37,8 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Matchers.matches;
+import static org.mockito.ArgumentMatchers.eq;
+import static org.mockito.ArgumentMatchers.matches;
 import static org.mockito.Mockito.when;
 
 public class TestHive2JDBC {

File: nifi-nar-bundles/nifi-atlas-bundle/nifi-atlas-reporting-task/src/test/java/org/apache/nifi/atlas/provenance/analyzer/TestKafkaTopic.java
Patch:
@@ -31,8 +31,8 @@
 import static org.apache.nifi.atlas.NiFiTypes.ATTR_QUALIFIED_NAME;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Matchers.matches;
+import static org.mockito.ArgumentMatchers.eq;
+import static org.mockito.ArgumentMatchers.matches;
 import static org.mockito.Mockito.when;
 
 public class TestKafkaTopic {

File: nifi-nar-bundles/nifi-atlas-bundle/nifi-atlas-reporting-task/src/test/java/org/apache/nifi/atlas/provenance/analyzer/TestNiFiRemotePort.java
Patch:
@@ -40,7 +40,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.matches;
+import static org.mockito.ArgumentMatchers.matches;
 import static org.mockito.Mockito.when;
 
 /**

File: nifi-nar-bundles/nifi-atlas-bundle/nifi-atlas-reporting-task/src/test/java/org/apache/nifi/atlas/provenance/analyzer/TestNiFiRootGroupPort.java
Patch:
@@ -39,7 +39,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.matches;
+import static org.mockito.ArgumentMatchers.matches;
 import static org.mockito.Mockito.when;
 
 /**

File: nifi-nar-bundles/nifi-atlas-bundle/nifi-atlas-reporting-task/src/test/java/org/apache/nifi/atlas/provenance/analyzer/TestPutHiveStreaming.java
Patch:
@@ -32,7 +32,7 @@
 import static org.apache.nifi.atlas.provenance.analyzer.DatabaseAnalyzerUtil.ATTR_OUTPUT_TABLES;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
-import static org.mockito.Matchers.matches;
+import static org.mockito.ArgumentMatchers.matches;
 import static org.mockito.Mockito.when;
 
 public class TestPutHiveStreaming {

File: nifi-nar-bundles/nifi-atlas-bundle/nifi-atlas-reporting-task/src/test/java/org/apache/nifi/atlas/provenance/analyzer/TestUnknownDataSet.java
Patch:
@@ -36,7 +36,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
-import static org.mockito.Matchers.matches;
+import static org.mockito.ArgumentMatchers.matches;
 import static org.mockito.Mockito.when;
 
 public class TestUnknownDataSet {

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/test/java/org/apache/nifi/processors/aws/dynamodb/GetDynamoDBTest.java
Patch:
@@ -33,7 +33,7 @@
 import org.apache.nifi.util.TestRunners;
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.Matchers;
+import org.mockito.ArgumentMatchers;
 import org.mockito.Mockito;
 
 import com.amazonaws.AmazonClientException;
@@ -404,7 +404,7 @@ public void testStringHashStringRangeGetOnlyHashFailure() {
         // Inject a mock DynamoDB to create the exception condition
         final DynamoDB mockDynamoDb = Mockito.mock(DynamoDB.class);
         // When writing, mock thrown service exception from AWS
-        Mockito.when(mockDynamoDb.batchGetItem(Matchers.<TableKeysAndAttributes>anyVararg())).thenThrow(getSampleAwsServiceException());
+        Mockito.when(mockDynamoDb.batchGetItem(ArgumentMatchers.<TableKeysAndAttributes>any())).thenThrow(getSampleAwsServiceException());
 
         getDynamoDB = new GetDynamoDB() {
             @Override

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/test/java/org/apache/nifi/processors/aws/dynamodb/PutDynamoDBTest.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.nifi.util.TestRunners;
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.Matchers;
+import org.mockito.ArgumentMatchers;
 import org.mockito.Mockito;
 
 import com.amazonaws.AmazonClientException;
@@ -76,7 +76,7 @@ public void testStringHashStringRangePutOnlyHashFailure() {
         // Inject a mock DynamoDB to create the exception condition
         final DynamoDB mockDynamoDb = Mockito.mock(DynamoDB.class);
         // When writing, mock thrown service exception from AWS
-        Mockito.when(mockDynamoDb.batchWriteItem(Matchers.<TableWriteItems>anyVararg())).thenThrow(getSampleAwsServiceException());
+        Mockito.when(mockDynamoDb.batchWriteItem(ArgumentMatchers.<TableWriteItems>any())).thenThrow(getSampleAwsServiceException());
 
         putDynamoDB = new PutDynamoDB() {
             @Override

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/test/java/org/apache/nifi/processors/aws/s3/TestTagS3Object.java
Patch:
@@ -314,6 +314,6 @@ public void testTagValEvaluatedAsBlank() {
 
     private void mockGetExistingTags(Tag... currentTag) {
         List<Tag> currentTags = new ArrayList<>(Arrays.asList(currentTag));
-        Mockito.when(mockS3Client.getObjectTagging(Mockito.anyObject())).thenReturn(new GetObjectTaggingResult(currentTags));
+        Mockito.when(mockS3Client.getObjectTagging(Mockito.any())).thenReturn(new GetObjectTaggingResult(currentTags));
     }
 }

File: nifi-nar-bundles/nifi-cassandra-bundle/nifi-cassandra-processors/src/main/java/org/apache/nifi/processors/cassandra/AbstractCassandraProcessor.java
Patch:
@@ -293,7 +293,8 @@ void connectToCassandra(ProcessContext context) {
             PropertyValue keyspaceProperty = context.getProperty(KEYSPACE).evaluateAttributeExpressions();
 
             final Session newSession;
-            if (keyspaceProperty != null) {
+            // For Java 11, the getValue() call was added so the test could pass
+            if (keyspaceProperty != null && keyspaceProperty.getValue() != null) {
                 newSession = newCluster.connect(keyspaceProperty.getValue());
             } else {
                 newSession = newCluster.connect();

File: nifi-nar-bundles/nifi-cassandra-bundle/nifi-cassandra-processors/src/test/java/org/apache/nifi/processors/cassandra/CassandraQueryTestUtil.java
Patch:
@@ -35,9 +35,9 @@
 import java.util.Set;
 import java.util.TimeZone;
 
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyInt;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: nifi-nar-bundles/nifi-cassandra-bundle/nifi-cassandra-processors/src/test/java/org/apache/nifi/processors/cassandra/PutCassandraQLTest.java
Patch:
@@ -43,9 +43,9 @@
 import java.util.concurrent.TimeoutException;
 
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyLong;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyLong;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.doReturn;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.mock;

File: nifi-nar-bundles/nifi-cassandra-bundle/nifi-cassandra-processors/src/test/java/org/apache/nifi/processors/cassandra/PutCassandraRecordTest.java
Patch:
@@ -40,9 +40,9 @@
 import java.util.concurrent.TimeoutException;
 
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyLong;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyLong;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.doReturn;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.mock;

File: nifi-nar-bundles/nifi-cassandra-bundle/nifi-cassandra-processors/src/test/java/org/apache/nifi/processors/cassandra/QueryCassandraTest.java
Patch:
@@ -19,9 +19,9 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyLong;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyLong;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.doReturn;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;

File: nifi-nar-bundles/nifi-couchbase-bundle/nifi-couchbase-processors/src/test/java/org/apache/nifi/couchbase/TestCouchbaseMapCacheClient.java
Patch:
@@ -34,8 +34,8 @@
 import static org.apache.nifi.couchbase.CouchbaseConfigurationProperties.BUCKET_NAME;
 import static org.apache.nifi.couchbase.CouchbaseConfigurationProperties.COUCHBASE_CLUSTER_SERVICE;
 import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: nifi-nar-bundles/nifi-couchbase-bundle/nifi-couchbase-processors/src/test/java/org/apache/nifi/processors/couchbase/TestGetCouchbaseKey.java
Patch:
@@ -58,7 +58,7 @@
 import static org.apache.nifi.processors.couchbase.GetCouchbaseKey.PUT_VALUE_TO_ATTRIBUTE;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: nifi-nar-bundles/nifi-datadog-bundle/nifi-datadog-reporting-task/src/test/java/org/apache/nifi/reporting/datadog/TestDataDogReportingTask.java
Patch:
@@ -43,7 +43,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.logging.Logger;
 
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.atLeast;
 import static org.mockito.Mockito.verify;
 

File: nifi-nar-bundles/nifi-druid-bundle/nifi-druid-processors/src/test/java/org/apache/nifi/controller/druid/MockDruidTranquilityController.java
Patch:
@@ -37,7 +37,7 @@
 import java.util.List;
 import java.util.Map;
 
-import static org.mockito.Matchers.anyObject;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
@@ -112,7 +112,7 @@ public <B> Future<B> transform(Function1<Try<BoxedUnit>, Future<B>> f) {
                 return null;
             }
         };
-        when(t.send(anyObject())).thenReturn(future);
+        when(t.send(any())).thenReturn(future);
         when(t.status()).thenReturn(new Status() {
         });
         cf = mock(CuratorFramework.class);

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-5-processors/src/test/java/org/apache/nifi/processors/elasticsearch/TestFetchElasticsearch5.java
Patch:
@@ -56,7 +56,7 @@
 
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.doReturn;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.mock;

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-5-processors/src/test/java/org/apache/nifi/processors/elasticsearch/TestPutElasticsearch5.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.nifi.processors.elasticsearch;
 
 import static org.junit.Assert.assertNotNull;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.doReturn;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.mock;

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-processors/src/test/java/org/apache/nifi/processors/elasticsearch/TestFetchElasticsearch.java
Patch:
@@ -20,7 +20,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.doReturn;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.mock;

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-processors/src/test/java/org/apache/nifi/processors/elasticsearch/TestFetchElasticsearchHttp.java
Patch:
@@ -19,7 +19,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-processors/src/test/java/org/apache/nifi/processors/elasticsearch/TestPutElasticsearch.java
Patch:
@@ -19,7 +19,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.doReturn;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.mock;

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-processors/src/test/java/org/apache/nifi/processors/elasticsearch/TestPutElasticsearchHttp.java
Patch:
@@ -18,7 +18,7 @@
 
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-processors/src/test/java/org/apache/nifi/processors/elasticsearch/TestPutElasticsearchHttpRecord.java
Patch:
@@ -53,7 +53,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-processors/src/test/java/org/apache/nifi/processors/elasticsearch/TestQueryElasticsearchHttp.java
Patch:
@@ -19,7 +19,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-processors/src/test/java/org/apache/nifi/processors/elasticsearch/TestQueryElasticsearchHttpNoHits.java
Patch:
@@ -18,7 +18,7 @@
 
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-processors/src/test/java/org/apache/nifi/processors/elasticsearch/TestScrollElasticsearchHttp.java
Patch:
@@ -18,7 +18,7 @@
 
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: nifi-nar-bundles/nifi-evtx-bundle/nifi-evtx-processors/src/test/java/org/apache/nifi/processors/evtx/MalformedChunkHandlerTest.java
Patch:
@@ -26,13 +26,13 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import java.io.ByteArrayOutputStream;
 
 import static org.junit.Assert.assertArrayEquals;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;

File: nifi-nar-bundles/nifi-evtx-bundle/nifi-evtx-processors/src/test/java/org/apache/nifi/processors/evtx/ParseEvtxTest.java
Patch:
@@ -35,7 +35,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 import org.w3c.dom.Node;

File: nifi-nar-bundles/nifi-evtx-bundle/nifi-evtx-processors/src/test/java/org/apache/nifi/processors/evtx/XmlBxmlNodeVisitorTest.java
Patch:
@@ -37,7 +37,7 @@
 import org.mockito.ArgumentCaptor;
 import org.mockito.InOrder;
 import org.mockito.Mock;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import javax.xml.stream.XMLStreamException;
 import javax.xml.stream.XMLStreamWriter;

File: nifi-nar-bundles/nifi-evtx-bundle/nifi-evtx-processors/src/test/java/org/apache/nifi/processors/evtx/XmlRootNodeHandlerTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import javax.xml.stream.XMLStreamException;
 import javax.xml.stream.XMLStreamWriter;

File: nifi-nar-bundles/nifi-evtx-bundle/nifi-evtx-processors/src/test/java/org/apache/nifi/processors/evtx/parser/RecordTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import java.io.IOException;
 import java.util.Date;

File: nifi-nar-bundles/nifi-evtx-bundle/nifi-evtx-processors/src/test/java/org/apache/nifi/processors/evtx/parser/bxml/BxmlNodeTestBase.java
Patch:
@@ -22,7 +22,7 @@
 import org.junit.Before;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import java.io.IOException;
 

File: nifi-nar-bundles/nifi-evtx-bundle/nifi-evtx-processors/src/test/java/org/apache/nifi/processors/evtx/parser/bxml/OpenStartElementNodeTest.java
Patch:
@@ -88,8 +88,6 @@ public void testWithFlagAndEmbeddedNameStringNode() throws IOException {
         testBinaryReaderBuilder.put((byte) BxmlNode.CLOSE_EMPTY_ELEMENT_TOKEN);
 
         BinaryReader binaryReader = testBinaryReaderBuilder.build();
-        NameStringNode nameStringNode = mock(NameStringNode.class);
-        when(nameStringNode.getString()).thenReturn(tagName);
         when(chunkHeader.addNameStringNode(stringOffset, binaryReader)).thenAnswer(invocation -> new NameStringNode(binaryReader, chunkHeader));
         openStartElementNode = new OpenStartElementNode(binaryReader, chunkHeader, parent);
 

File: nifi-nar-bundles/nifi-evtx-bundle/nifi-evtx-processors/src/test/java/org/apache/nifi/processors/evtx/parser/bxml/TemplateInstanceNodeTest.java
Patch:
@@ -83,7 +83,6 @@ public void testResidentTemplate() throws IOException {
         BinaryReader binaryReader = testBinaryReaderBuilder.build();
         TemplateNode templateNode = mock(TemplateNode.class);
         when(templateNode.getTemplateId()).thenReturn(UnsignedInteger.valueOf(templateId));
-        when(templateNode.hasEndOfStream()).thenReturn(true).thenReturn(false);
         when(chunkHeader.addTemplateNode(5, binaryReader)).thenAnswer(invocation -> {
             binaryReader.skip(templateLength);
             return templateNode;

File: nifi-nar-bundles/nifi-extension-utils/nifi-database-utils/src/test/java/org/apache/nifi/util/db/TestJdbcCommon.java
Patch:
@@ -20,7 +20,7 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.anyInt;
+import static org.mockito.ArgumentMatchers.anyInt;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: nifi-nar-bundles/nifi-extension-utils/nifi-record-utils/nifi-standard-record-utils/src/test/java/org/apache/nifi/schema/access/TestConfluentSchemaRegistryStrategy.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.Collections;
 
 import static org.junit.Assert.assertNotNull;
-import static org.mockito.Matchers.argThat;
+import static org.mockito.ArgumentMatchers.argThat;
 import static org.mockito.Mockito.when;
 
 public class TestConfluentSchemaRegistryStrategy extends AbstractSchemaAccessStrategyTest {

File: nifi-nar-bundles/nifi-extension-utils/nifi-record-utils/nifi-standard-record-utils/src/test/java/org/apache/nifi/schema/access/TestHortonworksAttributeSchemaReferenceStrategy.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.Map;
 
 import static org.junit.Assert.assertNotNull;
-import static org.mockito.Matchers.argThat;
+import static org.mockito.ArgumentMatchers.argThat;
 import static org.mockito.Mockito.when;
 
 public class TestHortonworksAttributeSchemaReferenceStrategy extends AbstractSchemaAccessStrategyTest {

File: nifi-nar-bundles/nifi-extension-utils/nifi-record-utils/nifi-standard-record-utils/src/test/java/org/apache/nifi/schema/access/TestHortonworksEncodedSchemaReferenceStrategy.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.Collections;
 
 import static org.junit.Assert.assertNotNull;
-import static org.mockito.Matchers.argThat;
+import static org.mockito.ArgumentMatchers.argThat;
 import static org.mockito.Mockito.when;
 
 public class TestHortonworksEncodedSchemaReferenceStrategy extends AbstractSchemaAccessStrategyTest {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/test/java/org/apache/nifi/authorization/FileAccessPolicyProviderTest.java
Patch:
@@ -45,8 +45,8 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.anyString;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/test/java/org/apache/nifi/authorization/FileAuthorizerTest.java
Patch:
@@ -47,7 +47,7 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/test/java/org/apache/nifi/authorization/FileUserGroupProviderTest.java
Patch:
@@ -41,8 +41,8 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.anyString;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-authorization/src/test/java/org/apache/nifi/authorization/CompositeConfigurableUserGroupProviderTest.java
Patch:
@@ -32,7 +32,7 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-authorization/src/test/java/org/apache/nifi/authorization/CompositeUserGroupProviderTest.java
Patch:
@@ -25,7 +25,7 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-authorization/src/test/java/org/apache/nifi/authorization/CompositeUserGroupProviderTestBase.java
Patch:
@@ -30,7 +30,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-authorization/src/test/java/org/apache/nifi/authorization/StandardManagedAuthorizerTest.java
Patch:
@@ -30,7 +30,7 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/coordination/flow/TestPopularVoteFlowElection.java
Patch:
@@ -22,7 +22,7 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
@@ -91,7 +91,7 @@ public void testDifferentEmptyFlows() throws IOException {
         Mockito.when(fingerprintFactory.createFingerprint(Mockito.any(byte[].class))).thenAnswer(new Answer<String>() {
             @Override
             public String answer(final InvocationOnMock invocation) throws Throwable {
-                final byte[] flow = invocation.getArgumentAt(0, byte[].class);
+                final byte[] flow = invocation.getArgument(0);
                 final String xml = new String(flow);
 
                 // Return the ID of the root group as the fingerprint.
@@ -217,7 +217,7 @@ private NiFiProperties getNiFiProperties() {
         final NiFiProperties nifiProperties = mock(NiFiProperties.class);
         when(nifiProperties.getProperty(StringEncryptor.NF_SENSITIVE_PROPS_ALGORITHM)).thenReturn("PBEWITHMD5AND256BITAES-CBC-OPENSSL");
         when(nifiProperties.getProperty(StringEncryptor.NF_SENSITIVE_PROPS_PROVIDER)).thenReturn("BC");
-        when(nifiProperties.getProperty(anyString(), anyString())).then(invocation -> invocation.getArgumentAt(1, String.class));
+        when(nifiProperties.getProperty(anyString(), anyString())).then(invocation -> invocation.getArgument(1));
         return nifiProperties;
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/coordination/http/replication/TestThreadPoolRequestReplicator.java
Patch:
@@ -286,7 +286,7 @@ private ClusterCoordinator createClusterCoordinator() {
         when(coordinator.getConnectionStatus(Mockito.any(NodeIdentifier.class))).thenAnswer(new Answer<NodeConnectionStatus>() {
             @Override
             public NodeConnectionStatus answer(InvocationOnMock invocation) throws Throwable {
-                return new NodeConnectionStatus(invocation.getArgumentAt(0, NodeIdentifier.class), NodeConnectionState.CONNECTED);
+                return new NodeConnectionStatus(invocation.getArgument(0), NodeConnectionState.CONNECTED);
             }
         });
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/coordination/node/TestNodeClusterCoordinator.java
Patch:
@@ -61,8 +61,8 @@
 import static org.junit.Assert.assertNotSame;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.when;
 
 public class TestNodeClusterCoordinator {
@@ -181,7 +181,7 @@ public void testUnknownNodeAskedToConnectOnAttemptedConnectionComplete() throws
         when(senderListener.requestReconnection(any(ReconnectionRequestMessage.class))).thenAnswer(new Answer<Object>() {
             @Override
             public Object answer(InvocationOnMock invocation) throws Throwable {
-                final ReconnectionRequestMessage msg = invocation.getArgumentAt(0, ReconnectionRequestMessage.class);
+                final ReconnectionRequestMessage msg = invocation.getArgument(0);
                 requestRef.set(msg);
                 return null;
             }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/TestFileSystemSwapManager.java
Patch:
@@ -44,8 +44,8 @@
 import java.util.concurrent.TimeUnit;
 
 import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.anyCollection;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.ArgumentMatchers.anyCollection;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.when;
 
 public class TestFileSystemSwapManager {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/queue/clustered/TestSocketLoadBalancedFlowFileQueue.java
Patch:
@@ -115,7 +115,7 @@ public Set<NodeIdentifier> answer(InvocationOnMock invocation) throws Throwable
         doAnswer(new Answer() {
             @Override
             public Object answer(final InvocationOnMock invocation) throws Throwable {
-                clusterTopologyEventListener = invocation.getArgumentAt(0, ClusterTopologyEventListener.class);
+                clusterTopologyEventListener = invocation.getArgument(0);
                 return null;
             }
         }).when(clusterCoordinator).registerEventListener(Mockito.any(ClusterTopologyEventListener.class));

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/repository/TestVolatileContentRepository.java
Patch:
@@ -38,7 +38,7 @@
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.Matchers;
+import org.mockito.ArgumentMatchers;
 import org.mockito.Mockito;
 
 public class TestVolatileContentRepository {
@@ -85,10 +85,10 @@ public void testRedirects() throws IOException {
         contentRepo.setBackupRepository(mockRepo);
         final ResourceClaim resourceClaim = claimManager.newResourceClaim("container", "section", "1000", true, false);
         final ContentClaim contentClaim = new StandardContentClaim(resourceClaim, 0L);
-        Mockito.when(mockRepo.create(Matchers.anyBoolean())).thenReturn(contentClaim);
+        Mockito.when(mockRepo.create(ArgumentMatchers.anyBoolean())).thenReturn(contentClaim);
 
         final ByteArrayOutputStream overflowStream = new ByteArrayOutputStream();
-        Mockito.when(mockRepo.write(Matchers.any(ContentClaim.class))).thenReturn(overflowStream);
+        Mockito.when(mockRepo.write(ArgumentMatchers.any(ContentClaim.class))).thenReturn(overflowStream);
         out.write(10);
 
         assertEquals(1024 * 1024 * 10 + 1, overflowStream.size());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/repository/TestWriteAheadFlowFileRepository.java
Patch:
@@ -73,7 +73,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.when;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/service/TestStandardControllerServiceProvider.java
Patch:
@@ -131,15 +131,15 @@ public void setup() {
         Mockito.doAnswer(new Answer<ProcessorNode>() {
             @Override
             public ProcessorNode answer(InvocationOnMock invocation) throws Throwable {
-                final String id = invocation.getArgumentAt(0, String.class);
+                final String id = invocation.getArgument(0);
                 return processorMap.get(id);
             }
         }).when(flowManager).getProcessorNode(Mockito.anyString());
 
         Mockito.doAnswer(new Answer<Object>() {
             @Override
             public Object answer(InvocationOnMock invocation) throws Throwable {
-                final ProcessorNode procNode = invocation.getArgumentAt(0, ProcessorNode.class);
+                final ProcessorNode procNode = invocation.getArgument(0);
                 processorMap.putIfAbsent(procNode.getIdentifier(), procNode);
                 return null;
             }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-site-to-site/src/test/java/org/apache/nifi/remote/TestSocketRemoteSiteListener.java
Patch:
@@ -28,7 +28,7 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.spy;
@@ -62,7 +62,7 @@ public void testRequestPeerList() throws Exception {
 
         final ServerProtocol serverProtocol = mock(ServerProtocol.class);
         doAnswer(invocation -> {
-            final NodeInformation self = invocation.getArgumentAt(2, NodeInformation.class);
+            final NodeInformation self = invocation.getArgument(2);
             // Listener should inform about itself properly:
             assertEquals(remoteInputHost, self.getSiteToSiteHostname());
             assertEquals(remoteSocketPort, self.getSiteToSitePort().intValue());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-site-to-site/src/test/java/org/apache/nifi/remote/TestStandardPublicPort.java
Patch:
@@ -31,8 +31,8 @@
 import java.util.LinkedHashSet;
 import java.util.Set;
 
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.doReturn;
 import static org.mockito.Mockito.mock;
@@ -45,7 +45,7 @@ private PublicPort createPublicPort(NiFiProperties nifiProperties) {
 
         final Authorizer authorizer = mock(Authorizer.class);
         doAnswer(invocation -> {
-            final AuthorizationRequest request = invocation.getArgumentAt(0, AuthorizationRequest.class);
+            final AuthorizationRequest request = invocation.getArgument(0);
             if ("node1@nifi.test".equals(request.getIdentity())) {
                 return AuthorizationResult.approved();
             } else if ("NODE1@NIFI.TEST".equals(request.getIdentity())) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-site-to-site/src/test/java/org/apache/nifi/remote/protocol/http/TestHttpFlowFileServerProtocol.java
Patch:
@@ -71,8 +71,8 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.doReturn;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-jetty/src/test/java/org/apache/nifi/web/server/JettyServerTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.nifi.web.server;
 
 import static org.apache.nifi.security.util.KeyStoreUtils.SUN_PROVIDER_NAME;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/authorization/StandardAuthorizableLookupTest.java
Patch:
@@ -30,7 +30,7 @@
 import org.junit.Test;
 
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/web/api/TestDataTransferResource.java
Patch:
@@ -51,8 +51,8 @@
 import static org.apache.nifi.web.api.ApplicationResource.PROXY_SCHEME_HTTP_HEADER;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.doReturn;
 import static org.mockito.Mockito.doThrow;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/web/api/TestSiteToSiteResource.java
Patch:
@@ -41,7 +41,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.doReturn;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/web/api/filter/TestRedirectResourceFilter.java
Patch:
@@ -28,7 +28,7 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/web/dao/impl/TestStandardRemoteProcessGroupDAO.java
Patch:
@@ -32,8 +32,8 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/test/java/org/apache/nifi/web/security/jwt/JwtServiceTest.java
Patch:
@@ -50,8 +50,8 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.ArgumentMatchers.anyInt;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/test/java/org/apache/nifi/web/security/oidc/OidcServiceTest.java
Patch:
@@ -29,7 +29,7 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/test/java/org/apache/nifi/web/security/otp/OtpAuthenticationProviderTest.java
Patch:
@@ -26,7 +26,7 @@
 import org.mockito.stubbing.Answer;
 
 import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/test/java/org/apache/nifi/web/security/x509/X509AuthenticationProviderTest.java
Patch:
@@ -42,7 +42,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
@@ -72,7 +72,7 @@ public void setup() {
 
         certificateIdentityProvider = mock(X509IdentityProvider.class);
         when(certificateIdentityProvider.authenticate(any(X509Certificate[].class))).then(invocation -> {
-            final X509Certificate[] certChain = invocation.getArgumentAt(0, X509Certificate[].class);
+            final X509Certificate[] certChain = invocation.getArgument(0);
             final String identity = extractor.extractPrincipal(certChain[0]).toString();
 
             if (INVALID_CERTIFICATE.equals(identity)) {
@@ -84,7 +84,7 @@ public void setup() {
 
         authorizer = mock(Authorizer.class);
         when(authorizer.authorize(any(AuthorizationRequest.class))).then(invocation -> {
-            final AuthorizationRequest request = invocation.getArgumentAt(0, AuthorizationRequest.class);
+            final AuthorizationRequest request = invocation.getArgument(0);
 
             if (UNTRUSTED_PROXY.equals(request.getIdentity())) {
                 return AuthorizationResult.denied();

File: nifi-nar-bundles/nifi-hive-bundle/nifi-hive-processors/src/test/java/org/apache/nifi/dbcp/hive/HiveConnectionPoolTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.nifi.dbcp.hive;
 
 import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.isA;
+import static org.mockito.ArgumentMatchers.isA;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: nifi-nar-bundles/nifi-hive-bundle/nifi-hive-processors/src/test/java/org/apache/nifi/util/hive/HiveWriterTest.java
Patch:
@@ -40,9 +40,9 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyLong;
-import static org.mockito.Matchers.isA;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyLong;
+import static org.mockito.ArgumentMatchers.isA;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: nifi-nar-bundles/nifi-hive-bundle/nifi-hive3-processors/src/test/java/org/apache/nifi/dbcp/hive/Hive3ConnectionPoolTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.nifi.dbcp.hive;
 
 import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.isA;
+import static org.mockito.ArgumentMatchers.isA;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: nifi-nar-bundles/nifi-hive-bundle/nifi-hive3-processors/src/test/java/org/apache/nifi/processors/hive/TestPutHive3Streaming.java
Patch:
@@ -103,8 +103,8 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.anyString;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: nifi-nar-bundles/nifi-hive-bundle/nifi-hive3-processors/src/test/java/org/apache/nifi/processors/orc/PutORCTest.java
Patch:
@@ -81,7 +81,7 @@
 import java.util.function.BiFunction;
 
 import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.when;
 
 public class PutORCTest {

File: nifi-nar-bundles/nifi-hive-bundle/nifi-hive_1_1-processors/src/test/java/org/apache/nifi/dbcp/hive/Hive_1_1ConnectionPoolTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.nifi.dbcp.hive;
 
 import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.isA;
+import static org.mockito.ArgumentMatchers.isA;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-0-10-processors/src/test/java/org/apache/nifi/processors/kafka/pubsub/ConsumerPoolTest.java
Patch:
@@ -39,7 +39,7 @@
 import org.junit.Test;
 import org.mockito.Mockito;
 
-import static org.mockito.Matchers.anyLong;
+import static org.mockito.ArgumentMatchers.anyLong;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-0-10-processors/src/test/java/org/apache/nifi/processors/kafka/pubsub/TestPublishKafka.java
Patch:
@@ -19,8 +19,8 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-0-11-processors/src/test/java/org/apache/nifi/processors/kafka/pubsub/ConsumerPoolTest.java
Patch:
@@ -41,7 +41,7 @@
 import org.junit.Test;
 import org.mockito.Mockito;
 
-import static org.mockito.Matchers.anyLong;
+import static org.mockito.ArgumentMatchers.anyLong;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-0-11-processors/src/test/java/org/apache/nifi/processors/kafka/pubsub/TestPublishKafka.java
Patch:
@@ -19,8 +19,8 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-0-9-processors/src/test/java/org/apache/nifi/processors/kafka/pubsub/ConsumerPoolTest.java
Patch:
@@ -36,7 +36,7 @@
 import static org.junit.Assert.fail;
 import org.junit.Before;
 import org.junit.Test;
-import static org.mockito.Matchers.anyLong;
+import static org.mockito.ArgumentMatchers.anyLong;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-0-9-processors/src/test/java/org/apache/nifi/processors/kafka/pubsub/TestPublishKafka.java
Patch:
@@ -19,8 +19,8 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-1-0-processors/src/test/java/org/apache/nifi/processors/kafka/pubsub/ConsumerPoolTest.java
Patch:
@@ -41,7 +41,7 @@
 import org.junit.Test;
 import org.mockito.Mockito;
 
-import static org.mockito.Matchers.anyLong;
+import static org.mockito.ArgumentMatchers.anyLong;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-1-0-processors/src/test/java/org/apache/nifi/processors/kafka/pubsub/TestPublishKafka.java
Patch:
@@ -19,8 +19,8 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-2-0-processors/src/test/java/org/apache/nifi/processors/kafka/pubsub/ConsumerPoolTest.java
Patch:
@@ -43,7 +43,7 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.anyLong;
+import static org.mockito.ArgumentMatchers.anyLong;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-2-0-processors/src/test/java/org/apache/nifi/processors/kafka/pubsub/TestPublishKafka_2_0.java
Patch:
@@ -38,8 +38,8 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;

File: nifi-nar-bundles/nifi-kudu-bundle/nifi-kudu-processors/src/test/java/org/apache/nifi/processors/kudu/MockPutKudu.java
Patch:
@@ -33,7 +33,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import static org.mockito.Matchers.anyString;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: nifi-nar-bundles/nifi-kudu-bundle/nifi-kudu-processors/src/test/java/org/apache/nifi/processors/kudu/TestPutKudu.java
Patch:
@@ -74,7 +74,7 @@
 import static org.apache.nifi.processors.kudu.TestPutKudu.ResultCode.OK;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: nifi-nar-bundles/nifi-ldap-iaa-providers-bundle/nifi-ldap-iaa-providers/src/test/java/org/apache/nifi/ldap/tenants/LdapUserGroupProviderTest.java
Patch:
@@ -67,7 +67,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: nifi-nar-bundles/nifi-metrics-reporting-bundle/nifi-metrics-reporting-task/src/test/java/org/apache/nifi/metrics/reporting/reporter/service/GraphiteMetricReporterServiceTest.java
Patch:
@@ -27,13 +27,13 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
 
-import static org.mockito.Matchers.anyLong;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.anyLong;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 

File: nifi-nar-bundles/nifi-metrics-reporting-bundle/nifi-metrics-reporting-task/src/test/java/org/apache/nifi/metrics/reporting/task/MetricsReportingTaskTest.java
Patch:
@@ -39,7 +39,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
 import org.mockito.Mock;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import java.util.Arrays;
 import java.util.HashMap;
@@ -49,7 +49,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
@@ -147,7 +147,6 @@ public void setUp() throws Exception {
         rootGroupStatus = new ProcessGroupStatus();
         innerGroupStatus = new ProcessGroupStatus();
         when(reporterServiceStub.createReporter(any())).thenReturn(reporterMock);
-        when(reporterServiceStub.getIdentifier()).thenReturn(REPORTER_SERVICE_IDENTIFIER);
         reportingContextStub.setProperty(MetricsReportingTask.REPORTER_SERVICE.getName(), REPORTER_SERVICE_IDENTIFIER);
         reportingContextStub.addControllerService(reporterServiceStub, REPORTER_SERVICE_IDENTIFIER);
 

File: nifi-nar-bundles/nifi-parquet-bundle/nifi-parquet-processors/src/test/java/org/apache/nifi/processors/parquet/PutParquetTest.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.processors.parquet;
 
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.when;
 
 import java.io.File;

File: nifi-nar-bundles/nifi-provenance-repository-bundle/nifi-persistent-provenance-repository/src/test/java/org/apache/nifi/provenance/index/lucene/TestLuceneEventIndex.java
Patch:
@@ -407,9 +407,9 @@ public void testExpiration() throws IOException {
         Mockito.doAnswer(new Answer<List<ProvenanceEventRecord>>() {
             @Override
             public List<ProvenanceEventRecord> answer(final InvocationOnMock invocation) {
-                final Long eventId = invocation.getArgumentAt(0, Long.class);
+                final Long eventId = invocation.getArgument(0);
                 assertEquals(0, eventId.longValue());
-                assertEquals(1, invocation.getArgumentAt(1, Integer.class).intValue());
+                assertEquals(1, invocation.<Integer>getArgument(1).intValue());
                 return Collections.singletonList(events.get(0));
             }
         }).when(eventStore).getEvents(Mockito.anyLong(), Mockito.anyInt());

File: nifi-nar-bundles/nifi-provenance-repository-bundle/nifi-persistent-provenance-repository/src/test/java/org/apache/nifi/provenance/store/TestWriteAheadStorePartition.java
Patch:
@@ -80,7 +80,7 @@ public void testReindex() throws IOException {
         Mockito.doAnswer(new Answer<Object>() {
             @Override
             public Object answer(final InvocationOnMock invocation) throws Throwable {
-                final Map<ProvenanceEventRecord, StorageSummary> events = invocation.getArgumentAt(0, Map.class);
+                final Map<ProvenanceEventRecord, StorageSummary> events = invocation.getArgument(0);
                 reindexedEvents.putAll(events);
                 return null;
             }

File: nifi-nar-bundles/nifi-ranger-bundle/nifi-ranger-plugin/src/test/java/org/apache/nifi/ranger/authorization/ManagedRangerAuthorizerTest.java
Patch:
@@ -34,8 +34,8 @@
 
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.anyString;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;

File: nifi-nar-bundles/nifi-site-to-site-reporting-bundle/nifi-site-to-site-reporting-task/src/test/java/org/apache/nifi/reporting/TestSiteToSiteBulletinReportingTask.java
Patch:
@@ -100,7 +100,7 @@ public void testSerializedForm() throws IOException, InitializationException {
         Mockito.doAnswer(new Answer<PropertyValue>() {
             @Override
             public PropertyValue answer(final InvocationOnMock invocation) throws Throwable {
-                final PropertyDescriptor descriptor = invocation.getArgumentAt(0, PropertyDescriptor.class);
+                final PropertyDescriptor descriptor = invocation.getArgument(0, PropertyDescriptor.class);
                 return new MockPropertyValue(properties.get(descriptor));
             }
         }).when(context).getProperty(Mockito.any(PropertyDescriptor.class));
@@ -140,11 +140,11 @@ protected SiteToSiteClient getClient() {
                 Mockito.doAnswer(new Answer<Object>() {
                     @Override
                     public Object answer(final InvocationOnMock invocation) throws Throwable {
-                        final byte[] data = invocation.getArgumentAt(0, byte[].class);
+                        final byte[] data = invocation.getArgument(0, byte[].class);
                         dataSent.add(data);
                         return null;
                     }
-                }).when(transaction).send(Mockito.any(byte[].class), Mockito.anyMapOf(String.class, String.class));
+                }).when(transaction).send(Mockito.any(byte[].class), Mockito.anyMap());
 
                 Mockito.when(client.createTransaction(Mockito.any(TransferDirection.class))).thenReturn(transaction);
             } catch (final Exception e) {

File: nifi-nar-bundles/nifi-site-to-site-reporting-bundle/nifi-site-to-site-reporting-task/src/test/java/org/apache/nifi/reporting/TestSiteToSiteStatusReportingTask.java
Patch:
@@ -74,7 +74,7 @@ public MockSiteToSiteStatusReportingTask initTask(Map<PropertyDescriptor, String
         Mockito.doAnswer(new Answer<PropertyValue>() {
             @Override
             public PropertyValue answer(final InvocationOnMock invocation) throws Throwable {
-                final PropertyDescriptor descriptor = invocation.getArgumentAt(0, PropertyDescriptor.class);
+                final PropertyDescriptor descriptor = invocation.getArgument(0, PropertyDescriptor.class);
                 return new MockPropertyValue(properties.get(descriptor));
             }
         }).when(context).getProperty(Mockito.any(PropertyDescriptor.class));
@@ -353,7 +353,7 @@ protected SiteToSiteClient getClient() {
                 Mockito.doAnswer(new Answer<Object>() {
                     @Override
                     public Object answer(final InvocationOnMock invocation) throws Throwable {
-                        final byte[] data = invocation.getArgumentAt(0, byte[].class);
+                        final byte[] data = invocation.getArgument(0, byte[].class);
                         dataSent.add(data);
                         return null;
                     }

File: nifi-nar-bundles/nifi-standard-bundle/nifi-jolt-transform-json-ui/src/test/java/org/apache/nifi/web/standard/api/transformjson/TestTransformJSONResource.java
Patch:
@@ -47,7 +47,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestExecuteSQL.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.nifi.processors.standard;
 
 import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestExecuteSQLRecord.java
Patch:
@@ -61,8 +61,8 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestGenerateTableFetch.java
Patch:
@@ -56,7 +56,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.doNothing;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.spy;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestHandleHttpResponse.java
Patch:
@@ -229,8 +229,8 @@ public void write(byte[] b, int off, int len) throws IOException {
                 Mockito.doAnswer(new Answer<Object>() {
                     @Override
                     public Object answer(final InvocationOnMock invocation) throws Throwable {
-                        final String key = invocation.getArgumentAt(0, String.class);
-                        final String value = invocation.getArgumentAt(1, String.class);
+                        final String key = invocation.getArgument(0);
+                        final String value = invocation.getArgument(1);
                         if (value == null) {
                             headersWithNoValue.add(key);
                         } else {
@@ -244,7 +244,7 @@ public Object answer(final InvocationOnMock invocation) throws Throwable {
                 Mockito.doAnswer(new Answer<Object>() {
                     @Override
                     public Object answer(final InvocationOnMock invocation) throws Throwable {
-                        statusCode = invocation.getArgumentAt(0, int.class);
+                        statusCode = invocation.getArgument(0);
                         return null;
                     }
                 }).when(response).setStatus(Mockito.anyInt());

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestPutJMS.java
Patch:
@@ -20,7 +20,7 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.spy;
@@ -46,11 +46,13 @@
 import org.apache.nifi.util.MockFlowFile;
 import org.apache.nifi.util.TestRunner;
 import org.apache.nifi.util.TestRunners;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 
 @SuppressWarnings("deprecation")
+@Ignore("Processor requires updates to work with Mockito 2.x, but is deprecated.")
 public class TestPutJMS {
 
     private final String TEST_PROVIDER = JmsProperties.ACTIVEMQ_PROVIDER;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestWaitNotifyProtocol.java
Patch:
@@ -45,7 +45,7 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 
@@ -56,7 +56,7 @@ public class TestWaitNotifyProtocol {
     private AtomicDistributedMapCacheClient<Long> cache;
     @SuppressWarnings("unchecked")
     private final Answer successfulReplace = invocation -> {
-        final AtomicCacheEntry<String, String, Long> entry = invocation.getArgumentAt(0, AtomicCacheEntry.class);
+        final AtomicCacheEntry<String, String, Long> entry = invocation.getArgument(0);
         cacheEntries.put(entry.getKey(), new AtomicCacheEntry<>(entry.getKey(), entry.getValue(), entry.getRevision().orElse(0L) + 1));
         return true;
     };

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/util/TestSFTPTransfer.java
Patch:
@@ -36,7 +36,7 @@
 import static com.jcraft.jsch.ChannelSftp.SSH_FX_PERMISSION_DENIED;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.mock;

File: nifi-nar-bundles/nifi-standard-services/nifi-hwx-schema-registry-bundle/nifi-hwx-schema-registry-service/src/test/java/org/apache/nifi/schemaregistry/hortonworks/TestHortonworksSchemaRegistry.java
Patch:
@@ -42,7 +42,7 @@
 import java.util.Map;
 
 import static org.junit.Assert.assertNotNull;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 
@@ -62,7 +62,7 @@ public void setup() throws SchemaNotFoundException {
         doAnswer(new Answer<SchemaVersionInfo>() {
             @Override
             public SchemaVersionInfo answer(final InvocationOnMock invocation) throws Throwable {
-                final String schemaName = invocation.getArgumentAt(0, String.class);
+                final String schemaName = invocation.getArgument(0);
                 final SchemaVersionInfo info = schemaVersionInfoMap.get(schemaName);
 
                 if (info == null) {
@@ -76,7 +76,7 @@ public SchemaVersionInfo answer(final InvocationOnMock invocation) throws Throwa
         doAnswer(new Answer<SchemaMetadataInfo>() {
             @Override
             public SchemaMetadataInfo answer(InvocationOnMock invocation) throws Throwable {
-                final String schemaName = invocation.getArgumentAt(0, String.class);
+                final String schemaName = invocation.getArgument(0);
                 final SchemaMetadataInfo info = schemaMetadataInfoMap.get(schemaName);
 
                 if (info == null) {

File: nifi-nar-bundles/nifi-websocket-bundle/nifi-websocket-processors/src/test/java/org/apache/nifi/processors/websocket/TestListenWebSocket.java
Patch:
@@ -52,7 +52,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.spy;

File: nifi-nar-bundles/nifi-websocket-bundle/nifi-websocket-services-api/src/test/java/org/apache/nifi/websocket/TestWebSocketMessageRouter.java
Patch:
@@ -23,7 +23,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
@@ -69,7 +69,7 @@ public void testSendMessage() throws Exception {
         final AbstractWebSocketSession session = mock(AbstractWebSocketSession.class);
         when(session.getSessionId()).thenReturn("session-1");
         doAnswer(invocation -> {
-            assertEquals("message", invocation.getArgumentAt(0, String.class));
+            assertEquals("message", invocation.getArgument(0));
             return null;
         }).when(session).sendString(anyString());
 

File: nifi-nar-bundles/nifi-websocket-bundle/nifi-websocket-services-jetty/src/test/java/org/apache/nifi/websocket/jetty/ControllerServiceTestContext.java
Patch:
@@ -23,8 +23,8 @@
 import org.apache.nifi.util.MockControllerServiceInitializationContext;
 import org.apache.nifi.util.MockPropertyValue;
 
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
@@ -38,7 +38,7 @@ public class ControllerServiceTestContext {
 
     public ControllerServiceTestContext(ControllerService controllerService, String id) {
         initializationContext = new MockControllerServiceInitializationContext(controllerService, id);
-        doAnswer(invocation -> configurationContext.getProperty(invocation.getArgumentAt(0, PropertyDescriptor.class)))
+        doAnswer(invocation -> configurationContext.getProperty(invocation.getArgument(0)))
                 .when(validationContext).getProperty(any(PropertyDescriptor.class));
         controllerService.getPropertyDescriptors().forEach(prop -> setDefaultValue(prop));
     }

File: nifi-nar-bundles/nifi-windows-event-log-bundle/nifi-windows-event-log-processors/src/test/java/org/apache/nifi/processors/windows/event/log/JNAOverridingJUnitRunner.java
Patch:
@@ -25,7 +25,7 @@
 import org.junit.runner.Runner;
 import org.junit.runner.notification.RunNotifier;
 import org.junit.runners.model.InitializationError;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import java.net.URLClassLoader;
 import java.util.Map;
@@ -67,7 +67,7 @@ protected synchronized Class<?> loadClass(String name, boolean resolve) throws C
                     } catch (Exception e) {
                         throw new ClassNotFoundException(name, e);
                     }
-                } else if (name.startsWith("org.junit.")) {
+                } else if (name.startsWith("org.junit.") || name.startsWith("org.mockito")) {
                     Class<?> result = JNAOverridingJUnitRunner.class.getClassLoader().loadClass(name);
                     if (resolve) {
                         resolveClass(result);

File: nifi-nar-bundles/nifi-windows-event-log-bundle/nifi-windows-event-log-processors/src/test/java/org/apache/nifi/processors/windows/event/log/jna/EventSubscribeXmlRenderingCallbackTest.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.Arrays;
 import java.util.function.Consumer;
 
-import static org.mockito.Matchers.anyString;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;

File: nifi-toolkit/nifi-toolkit-s2s/src/test/java/org/apache/nifi/toolkit/s2s/SiteToSiteReceiverTest.java
Patch:
@@ -28,7 +28,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;

File: nifi-toolkit/nifi-toolkit-s2s/src/test/java/org/apache/nifi/toolkit/s2s/SiteToSiteSenderTest.java
Patch:
@@ -27,7 +27,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
@@ -39,7 +39,7 @@
 import java.util.stream.Collectors;
 
 import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;

File: nifi-toolkit/nifi-toolkit-tls/src/test/java/org/apache/nifi/toolkit/tls/manager/writer/NifiPropertiesTlsClientConfigWriterTest.java
Patch:
@@ -27,7 +27,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;

File: nifi-toolkit/nifi-toolkit-tls/src/test/java/org/apache/nifi/toolkit/tls/service/TlsCertificateAuthorityTest.java
Patch:
@@ -56,7 +56,7 @@
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 import static org.mockito.AdditionalMatchers.or;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: nifi-toolkit/nifi-toolkit-tls/src/test/java/org/apache/nifi/toolkit/tls/service/server/TlsCertificateAuthorityServiceCommandLineTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import java.io.IOException;
 

File: nifi-toolkit/nifi-toolkit-tls/src/test/java/org/apache/nifi/toolkit/tls/standalone/TlsToolkitStandaloneCommandLineTest.java
Patch:
@@ -23,7 +23,7 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 

File: nifi-toolkit/nifi-toolkit-tls/src/test/java/org/apache/nifi/toolkit/tls/util/PasswordUtilTest.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.function.Supplier;
 
 import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 

File: nifi-toolkit/nifi-toolkit-tls/src/test/java/org/apache/nifi/toolkit/tls/util/TlsHelperTest.java
Patch:
@@ -42,7 +42,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.AdditionalMatchers;
 import org.mockito.Mock;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -86,7 +86,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;

File: nifi-nar-bundles/nifi-atlas-bundle/nifi-atlas-reporting-task/src/main/java/org/apache/nifi/atlas/security/AtlasAuthN.java
Patch:
@@ -35,7 +35,7 @@ public interface AtlasAuthN {
      * Populate required Atlas application properties.
      * This method is called when Atlas reporting task generates atlas-application.properties.
      */
-    default void populateProperties(final Properties properties){};
+    default void populateProperties(final Properties properties){}
 
     default Optional<ValidationResult> validateRequiredField(ValidationContext context, PropertyDescriptor prop) {
         if (!context.getProperty(prop).isSet()) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/replication/RequestReplicator.java
Patch:
@@ -22,6 +22,8 @@
 import java.util.Set;
 
 import org.apache.nifi.authorization.user.NiFiUser;
+import org.apache.nifi.cluster.manager.exception.ConnectingNodeMutableRequestException;
+import org.apache.nifi.cluster.manager.exception.DisconnectedNodeMutableRequestException;
 import org.apache.nifi.cluster.protocol.NodeIdentifier;
 
 public interface RequestReplicator {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/concurrent/RequestManager.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.function.Consumer;
 
 import org.apache.nifi.authorization.user.NiFiUser;
+import org.apache.nifi.web.ResourceNotFoundException;
 
 public interface RequestManager<T> {
 

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-0-10-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/KafkaProcessorUtils.java
Patch:
@@ -270,7 +270,7 @@ public ValidationResult validate(final String subject, final String value, final
             final boolean knownValue = KafkaProcessorUtils.isStaticStringFieldNamePresent(subject, classType, CommonClientConfigs.class, SslConfigs.class, SaslConfigs.class);
             return new ValidationResult.Builder().subject(subject).explanation("Must be a known configuration parameter for this kafka client").valid(knownValue).build();
         }
-    };
+    }
 
     /**
      * Builds transit URI for provenance event. The transit URI will be in the

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-0-11-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/KafkaProcessorUtils.java
Patch:
@@ -272,7 +272,7 @@ public ValidationResult validate(final String subject, final String value, final
             final boolean knownValue = KafkaProcessorUtils.isStaticStringFieldNamePresent(subject, classType, CommonClientConfigs.class, SslConfigs.class, SaslConfigs.class);
             return new ValidationResult.Builder().subject(subject).explanation("Must be a known configuration parameter for this kafka client").valid(knownValue).build();
         }
-    };
+    }
 
     /**
      * Builds transit URI for provenance event. The transit URI will be in the

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-0-9-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/KafkaProcessorUtils.java
Patch:
@@ -193,7 +193,7 @@ public ValidationResult validate(final String subject, final String value, final
             final boolean knownValue = KafkaProcessorUtils.isStaticStringFieldNamePresent(subject, classType, CommonClientConfigs.class, SslConfigs.class, SaslConfigs.class);
             return new ValidationResult.Builder().subject(subject).explanation("Must be a known configuration parameter for this kafka client").valid(knownValue).build();
         }
-    };
+    }
 
     /**
      * Builds transit URI for provenance event. The transit URI will be in the

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-1-0-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/KafkaProcessorUtils.java
Patch:
@@ -272,7 +272,7 @@ public ValidationResult validate(final String subject, final String value, final
             final boolean knownValue = KafkaProcessorUtils.isStaticStringFieldNamePresent(subject, classType, CommonClientConfigs.class, SslConfigs.class, SaslConfigs.class);
             return new ValidationResult.Builder().subject(subject).explanation("Must be a known configuration parameter for this kafka client").valid(knownValue).build();
         }
-    };
+    }
 
     /**
      * Builds transit URI for provenance event. The transit URI will be in the

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-2-0-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/KafkaProcessorUtils.java
Patch:
@@ -272,7 +272,7 @@ public ValidationResult validate(final String subject, final String value, final
             final boolean knownValue = KafkaProcessorUtils.isStaticStringFieldNamePresent(subject, classType, CommonClientConfigs.class, SslConfigs.class, SaslConfigs.class);
             return new ValidationResult.Builder().subject(subject).explanation("Must be a known configuration parameter for this kafka client").valid(knownValue).build();
         }
-    };
+    }
 
     /**
      * Builds transit URI for provenance event. The transit URI will be in the

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/CompiledExpression.java
Patch:
@@ -55,6 +55,6 @@ public Set<Evaluator<?>> getAllEvaluators() {
 
     @Override
     public String evaluate(final Map<String, String> variables, final AttributeValueDecorator decorator, final Map<String, String> stateVariables) {
-        return Query.evaluateExpression(getTree(), expression, variables, decorator, stateVariables);
+        return Query.evaluateExpression(tree, rootEvaluator, expression, variables, decorator, stateVariables);
     }
 }

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/StandardPreparedQuery.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.nifi.attribute.expression.language;
 
+import org.apache.nifi.attribute.expression.language.evaluation.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.literals.StringLiteralEvaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.selection.AllAttributesEvaluator;
@@ -99,7 +100,7 @@ public VariableImpact getVariableImpact() {
                     final Evaluator<String> nameEval = attributeEval.getNameEvaluator();
 
                     if (nameEval instanceof StringLiteralEvaluator) {
-                        final String referencedVar = nameEval.evaluate(Collections.emptyMap()).getValue();
+                        final String referencedVar = nameEval.evaluate(Collections.emptyMap(), new EvaluationContext()).getValue();
                         variables.add(referencedVar);
                     }
                 } else if (evaluator instanceof AllAttributesEvaluator) {

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/compile/ExpressionCompiler.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser;
 import org.apache.nifi.attribute.expression.language.evaluation.BooleanEvaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.DateEvaluator;
+import org.apache.nifi.attribute.expression.language.evaluation.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.cast.BooleanCastEvaluator;
@@ -947,7 +948,7 @@ public Evaluator<?> buildEvaluator(final Tree tree) {
 
                 final List<String> attributeNames = new ArrayList<>();
                 for (int i = 1; i < tree.getChildCount(); i++) {  // skip the first child because that's the name of the multi-attribute function
-                    attributeNames.add(newStringLiteralEvaluator(tree.getChild(i).getText()).evaluate(null).getValue());
+                    attributeNames.add(newStringLiteralEvaluator(tree.getChild(i).getText()).evaluate(null, new EvaluationContext()).getValue());
                 }
 
                 switch (multiAttrType) {

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/BooleanEvaluator.java
Patch:
@@ -27,7 +27,7 @@ public ResultType getResultType() {
     }
 
     @Override
-    public int getEvaluationsRemaining() {
+    public int getEvaluationsRemaining(final EvaluationContext context) {
         return 0;
     }
 

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/DateEvaluator.java
Patch:
@@ -29,7 +29,7 @@ public ResultType getResultType() {
     }
 
     @Override
-    public int getEvaluationsRemaining() {
+    public int getEvaluationsRemaining(final EvaluationContext context) {
         return 0;
     }
 

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/DecimalEvaluator.java
Patch:
@@ -27,7 +27,7 @@ public ResultType getResultType() {
     }
 
     @Override
-    public int getEvaluationsRemaining() {
+    public int getEvaluationsRemaining(final EvaluationContext context) {
         return 0;
     }
 

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/Evaluator.java
Patch:
@@ -22,11 +22,11 @@
 
 public interface Evaluator<T> {
 
-    QueryResult<T> evaluate(Map<String, String> attributes);
+    QueryResult<T> evaluate(Map<String, String> attributes, EvaluationContext context);
 
     ResultType getResultType();
 
-    int getEvaluationsRemaining();
+    int getEvaluationsRemaining(EvaluationContext context);
 
     Evaluator<?> getSubjectEvaluator();
 

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/NumberEvaluator.java
Patch:
@@ -27,7 +27,7 @@ public ResultType getResultType() {
     }
 
     @Override
-    public int getEvaluationsRemaining() {
+    public int getEvaluationsRemaining(final EvaluationContext context) {
         return 0;
     }
 

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/StringEvaluator.java
Patch:
@@ -27,7 +27,7 @@ public ResultType getResultType() {
     }
 
     @Override
-    public int getEvaluationsRemaining() {
+    public int getEvaluationsRemaining(EvaluationContext context) {
         return 0;
     }
 

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/WholeNumberEvaluator.java
Patch:
@@ -27,7 +27,7 @@ public ResultType getResultType() {
     }
 
     @Override
-    public int getEvaluationsRemaining() {
+    public int getEvaluationsRemaining(final EvaluationContext context) {
         return 0;
     }
 

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/cast/BooleanCastEvaluator.java
Patch:
@@ -20,6 +20,7 @@
 
 import org.apache.nifi.attribute.expression.language.evaluation.BooleanEvaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.BooleanQueryResult;
+import org.apache.nifi.attribute.expression.language.evaluation.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
 import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;
@@ -33,8 +34,8 @@ public BooleanCastEvaluator(final StringEvaluator subjectEvaluator) {
     }
 
     @Override
-    public QueryResult<Boolean> evaluate(final Map<String, String> attributes) {
-        final QueryResult<String> result = subjectEvaluator.evaluate(attributes);
+    public QueryResult<Boolean> evaluate(final Map<String, String> attributes, final EvaluationContext context) {
+        final QueryResult<String> result = subjectEvaluator.evaluate(attributes, context);
         if (result.getValue() == null) {
             return new BooleanQueryResult(null);
         }

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/cast/DateCastEvaluator.java
Patch:
@@ -26,6 +26,7 @@
 
 import org.apache.nifi.attribute.expression.language.evaluation.DateEvaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.DateQueryResult;
+import org.apache.nifi.attribute.expression.language.evaluation.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.NumberQueryResult;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
@@ -56,8 +57,8 @@ public DateCastEvaluator(final Evaluator<?> subjectEvaluator) {
     }
 
     @Override
-    public QueryResult<Date> evaluate(final Map<String, String> attributes) {
-        final QueryResult<?> result = subjectEvaluator.evaluate(attributes);
+    public QueryResult<Date> evaluate(final Map<String, String> attributes, final EvaluationContext context) {
+        final QueryResult<?> result = subjectEvaluator.evaluate(attributes, context);
         if (result.getValue() == null) {
             return new DateQueryResult(null);
         }

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/cast/DecimalCastEvaluator.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.nifi.attribute.expression.language.evaluation.DateQueryResult;
 import org.apache.nifi.attribute.expression.language.evaluation.DecimalEvaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.DecimalQueryResult;
+import org.apache.nifi.attribute.expression.language.evaluation.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.NumberQueryResult;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
@@ -42,8 +43,8 @@ public DecimalCastEvaluator(final Evaluator<?> subjectEvaluator) {
     }
 
     @Override
-    public QueryResult<Double> evaluate(final Map<String, String> attributes) {
-        final QueryResult<?> result = subjectEvaluator.evaluate(attributes);
+    public QueryResult<Double> evaluate(final Map<String, String> attributes, final EvaluationContext context) {
+        final QueryResult<?> result = subjectEvaluator.evaluate(attributes, context);
         if (result.getValue() == null) {
             return new DecimalQueryResult(null);
         }

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/cast/NumberCastEvaluator.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.nifi.attribute.expression.language.evaluation.DateQueryResult;
 import org.apache.nifi.attribute.expression.language.evaluation.DecimalQueryResult;
+import org.apache.nifi.attribute.expression.language.evaluation.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.NumberEvaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.NumberQueryResult;
@@ -42,8 +43,8 @@ public NumberCastEvaluator(final Evaluator<?> subjectEvaluator) {
     }
 
     @Override
-    public QueryResult<Number> evaluate(final Map<String, String> attributes) {
-        final QueryResult<?> result = subjectEvaluator.evaluate(attributes);
+    public QueryResult<Number> evaluate(final Map<String, String> attributes, final EvaluationContext context) {
+        final QueryResult<?> result = subjectEvaluator.evaluate(attributes, context);
         if (result.getValue() == null) {
             return new NumberQueryResult(null);
         }

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/cast/StringCastEvaluator.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.Map;
 
+import org.apache.nifi.attribute.expression.language.evaluation.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
 import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;
@@ -32,8 +33,8 @@ public StringCastEvaluator(final Evaluator<?> subjectEvaluator) {
     }
 
     @Override
-    public QueryResult<String> evaluate(final Map<String, String> attributes) {
-        final QueryResult<?> result = subjectEvaluator.evaluate(attributes);
+    public QueryResult<String> evaluate(final Map<String, String> attributes, final EvaluationContext context) {
+        final QueryResult<?> result = subjectEvaluator.evaluate(attributes, context);
         if (result.getValue() == null) {
             return new StringQueryResult(null);
         }

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/cast/WholeNumberCastEvaluator.java
Patch:
@@ -20,6 +20,7 @@
 
 import org.apache.nifi.attribute.expression.language.evaluation.DateQueryResult;
 import org.apache.nifi.attribute.expression.language.evaluation.DecimalQueryResult;
+import org.apache.nifi.attribute.expression.language.evaluation.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.NumberQueryResult;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
@@ -42,8 +43,8 @@ public WholeNumberCastEvaluator(final Evaluator<?> subjectEvaluator) {
     }
 
     @Override
-    public QueryResult<Long> evaluate(final Map<String, String> attributes) {
-        final QueryResult<?> result = subjectEvaluator.evaluate(attributes);
+    public QueryResult<Long> evaluate(final Map<String, String> attributes, final EvaluationContext context) {
+        final QueryResult<?> result = subjectEvaluator.evaluate(attributes, context);
         if (result.getValue() == null) {
             return new WholeNumberQueryResult(null);
         }

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/Base64DecodeEvaluator.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Base64;
 import java.util.Map;
 
+import org.apache.nifi.attribute.expression.language.evaluation.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
 import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;
@@ -34,8 +35,8 @@ public Base64DecodeEvaluator(final Evaluator<String> subject) {
     }
 
     @Override
-    public QueryResult<String> evaluate(final Map<String, String> attributes) {
-        final String subjectValue = subject.evaluate(attributes).getValue();
+    public QueryResult<String> evaluate(final Map<String, String> attributes, final EvaluationContext context) {
+        final String subjectValue = subject.evaluate(attributes, context).getValue();
         if (subjectValue == null) {
             return new StringQueryResult(null);
         }

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/Base64EncodeEvaluator.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Base64;
 import java.util.Map;
 
+import org.apache.nifi.attribute.expression.language.evaluation.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
 import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;
@@ -34,8 +35,8 @@ public Base64EncodeEvaluator(final Evaluator<String> subject) {
     }
 
     @Override
-    public QueryResult<String> evaluate(final Map<String, String> attributes) {
-        final String subjectValue = subject.evaluate(attributes).getValue();
+    public QueryResult<String> evaluate(final Map<String, String> attributes, final EvaluationContext context) {
+        final String subjectValue = subject.evaluate(attributes, context).getValue();
         if (subjectValue == null) {
             return new StringQueryResult(null);
         }

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/CharSequenceTranslatorEvaluator.java
Patch:
@@ -20,6 +20,7 @@
 
 import org.apache.commons.text.StringEscapeUtils;
 import org.apache.commons.text.translate.CharSequenceTranslator;
+import org.apache.nifi.attribute.expression.language.evaluation.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
 import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;
@@ -75,8 +76,8 @@ public CharSequenceTranslatorEvaluator(final Evaluator<String> subject, CharSequ
     }
 
     @Override
-    public QueryResult<String> evaluate(final Map<String, String> attributes) {
-        final String subjectValue = subject.evaluate(attributes).getValue();
+    public QueryResult<String> evaluate(final Map<String, String> attributes, final EvaluationContext context) {
+        final String subjectValue = subject.evaluate(attributes, context).getValue();
         return new StringQueryResult(subjectValue == null ? "" : method.translate(subjectValue));
     }
 

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/HostnameEvaluator.java
Patch:
@@ -20,6 +20,7 @@
 import java.net.UnknownHostException;
 import java.util.Map;
 
+import org.apache.nifi.attribute.expression.language.evaluation.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
 import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;
@@ -46,7 +47,7 @@ public HostnameEvaluator(final boolean preferFQDN) throws UnknownHostException {
     }
 
     @Override
-    public QueryResult<String> evaluate(final Map<String, String> attributes) {
+    public QueryResult<String> evaluate(final Map<String, String> attributes, final EvaluationContext context) {
         return hostname;
     }
 

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/IPEvaluator.java
Patch:
@@ -20,6 +20,7 @@
 import java.net.UnknownHostException;
 import java.util.Map;
 
+import org.apache.nifi.attribute.expression.language.evaluation.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
 import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;
@@ -34,7 +35,7 @@ public IPEvaluator() throws UnknownHostException {
     }
 
     @Override
-    public QueryResult<String> evaluate(final Map<String, String> attributes) {
+    public QueryResult<String> evaluate(final Map<String, String> attributes, final EvaluationContext context) {
         return ipAddress;
     }
 

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/IsEmptyEvaluator.java
Patch:
@@ -20,6 +20,7 @@
 
 import org.apache.nifi.attribute.expression.language.evaluation.BooleanEvaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.BooleanQueryResult;
+import org.apache.nifi.attribute.expression.language.evaluation.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
 
@@ -32,8 +33,8 @@ public IsEmptyEvaluator(final Evaluator<?> subjectEvaluator) {
     }
 
     @Override
-    public QueryResult<Boolean> evaluate(final Map<String, String> attributes) {
-        final Object subjectValue = subjectEvaluator.evaluate(attributes).getValue();
+    public QueryResult<Boolean> evaluate(final Map<String, String> attributes, final EvaluationContext context) {
+        final Object subjectValue = subjectEvaluator.evaluate(attributes, context).getValue();
         return new BooleanQueryResult(subjectValue == null || subjectValue.toString().trim().isEmpty());
     }
 

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/IsNullEvaluator.java
Patch:
@@ -20,6 +20,7 @@
 
 import org.apache.nifi.attribute.expression.language.evaluation.BooleanEvaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.BooleanQueryResult;
+import org.apache.nifi.attribute.expression.language.evaluation.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
 
@@ -32,8 +33,8 @@ public IsNullEvaluator(final Evaluator<?> subject) {
     }
 
     @Override
-    public QueryResult<Boolean> evaluate(final Map<String, String> attributes) {
-        final Object subjectValue = subject.evaluate(attributes).getValue();
+    public QueryResult<Boolean> evaluate(final Map<String, String> attributes, final EvaluationContext context) {
+        final Object subjectValue = subject.evaluate(attributes, context).getValue();
         return new BooleanQueryResult(subjectValue == null);
     }
 

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/LengthEvaluator.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.Map;
 
+import org.apache.nifi.attribute.expression.language.evaluation.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
 import org.apache.nifi.attribute.expression.language.evaluation.WholeNumberEvaluator;
@@ -32,8 +33,8 @@ public LengthEvaluator(final Evaluator<String> subject) {
     }
 
     @Override
-    public QueryResult<Long> evaluate(final Map<String, String> attributes) {
-        final String subjectValue = subject.evaluate(attributes).getValue();
+    public QueryResult<Long> evaluate(final Map<String, String> attributes, final EvaluationContext context) {
+        final String subjectValue = subject.evaluate(attributes, context).getValue();
         return new WholeNumberQueryResult((long) (subjectValue == null ? 0 : subjectValue.length()));
     }
 

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/NotEvaluator.java
Patch:
@@ -20,6 +20,7 @@
 
 import org.apache.nifi.attribute.expression.language.evaluation.BooleanEvaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.BooleanQueryResult;
+import org.apache.nifi.attribute.expression.language.evaluation.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
 
@@ -32,8 +33,8 @@ public NotEvaluator(final Evaluator<Boolean> subjectEvaluator) {
     }
 
     @Override
-    public QueryResult<Boolean> evaluate(final Map<String, String> attributes) {
-        final QueryResult<Boolean> subjectValue = subjectEvaluator.evaluate(attributes);
+    public QueryResult<Boolean> evaluate(final Map<String, String> attributes, final EvaluationContext context) {
+        final QueryResult<Boolean> subjectValue = subjectEvaluator.evaluate(attributes, context);
         if (subjectValue == null) {
             return new BooleanQueryResult(null);
         }

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/NotNullEvaluator.java
Patch:
@@ -20,6 +20,7 @@
 
 import org.apache.nifi.attribute.expression.language.evaluation.BooleanEvaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.BooleanQueryResult;
+import org.apache.nifi.attribute.expression.language.evaluation.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
 
@@ -32,8 +33,8 @@ public NotNullEvaluator(final Evaluator<?> subject) {
     }
 
     @Override
-    public QueryResult<Boolean> evaluate(final Map<String, String> attributes) {
-        final Object subjectValue = subject.evaluate(attributes).getValue();
+    public QueryResult<Boolean> evaluate(final Map<String, String> attributes, final EvaluationContext context) {
+        final Object subjectValue = subject.evaluate(attributes, context).getValue();
         return new BooleanQueryResult(subjectValue != null);
     }
 

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/NowEvaluator.java
Patch:
@@ -21,13 +21,14 @@
 
 import org.apache.nifi.attribute.expression.language.evaluation.DateEvaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.DateQueryResult;
+import org.apache.nifi.attribute.expression.language.evaluation.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
 
 public class NowEvaluator extends DateEvaluator {
 
     @Override
-    public QueryResult<Date> evaluate(final Map<String, String> attributes) {
+    public QueryResult<Date> evaluate(final Map<String, String> attributes, final EvaluationContext context) {
         return new DateQueryResult(new Date());
     }
 

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/NumberToDateEvaluator.java
Patch:
@@ -21,6 +21,7 @@
 
 import org.apache.nifi.attribute.expression.language.evaluation.DateEvaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.DateQueryResult;
+import org.apache.nifi.attribute.expression.language.evaluation.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
 
@@ -33,8 +34,8 @@ public NumberToDateEvaluator(final Evaluator<Long> subject) {
     }
 
     @Override
-    public QueryResult<Date> evaluate(final Map<String, String> attributes) {
-        final QueryResult<Long> result = subject.evaluate(attributes);
+    public QueryResult<Date> evaluate(final Map<String, String> attributes, final EvaluationContext context) {
+        final QueryResult<Long> result = subject.evaluate(attributes, context);
         final Long value = result.getValue();
         if (value == null) {
             return new DateQueryResult(null);

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/OneUpSequenceEvaluator.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicLong;
 
+import org.apache.nifi.attribute.expression.language.evaluation.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
 import org.apache.nifi.attribute.expression.language.evaluation.WholeNumberEvaluator;
@@ -29,7 +30,7 @@ public class OneUpSequenceEvaluator extends WholeNumberEvaluator {
     private static final AtomicLong value = new AtomicLong(0L);
 
     @Override
-    public QueryResult<Long> evaluate(final Map<String, String> attributes) {
+    public QueryResult<Long> evaluate(final Map<String, String> attributes, final EvaluationContext context) {
         return new WholeNumberQueryResult(value.getAndIncrement());
     }
 

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/RandomNumberGeneratorEvaluator.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.Map;
 import java.util.Random;
 
+import org.apache.nifi.attribute.expression.language.evaluation.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
 import org.apache.nifi.attribute.expression.language.evaluation.WholeNumberEvaluator;
@@ -30,7 +31,7 @@ public class RandomNumberGeneratorEvaluator extends WholeNumberEvaluator {
 
 
     @Override
-    public QueryResult<Long> evaluate(final Map<String, String> attributes) {
+    public QueryResult<Long> evaluate(final Map<String, String> attributes, final EvaluationContext context) {
         return new WholeNumberQueryResult(Math.abs(RNG.nextLong()));
     }
 

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/ThreadEvaluator.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.Map;
 
+import org.apache.nifi.attribute.expression.language.evaluation.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
 import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;
@@ -26,7 +27,7 @@
 public class ThreadEvaluator extends StringEvaluator {
 
     @Override
-    public QueryResult<String> evaluate(final Map<String, String> attributes) {
+    public QueryResult<String> evaluate(final Map<String, String> attributes, final EvaluationContext context) {
         // See org.apache.nifi.engine.FlowEngine
         return new StringQueryResult(Thread.currentThread().getName());
     }

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/ToLowerEvaluator.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.Map;
 
+import org.apache.nifi.attribute.expression.language.evaluation.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
 import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;
@@ -32,8 +33,8 @@ public ToLowerEvaluator(final Evaluator<String> subject) {
     }
 
     @Override
-    public QueryResult<String> evaluate(final Map<String, String> attributes) {
-        final String subjectValue = subject.evaluate(attributes).getValue();
+    public QueryResult<String> evaluate(final Map<String, String> attributes, final EvaluationContext context) {
+        final String subjectValue = subject.evaluate(attributes, context).getValue();
         return new StringQueryResult(subjectValue == null ? null : subjectValue.toLowerCase());
     }
 

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/ToStringEvaluator.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.Map;
 
+import org.apache.nifi.attribute.expression.language.evaluation.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
 import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;
@@ -32,8 +33,8 @@ public ToStringEvaluator(final Evaluator<?> subject) {
     }
 
     @Override
-    public QueryResult<String> evaluate(final Map<String, String> attributes) {
-        final Object result = subject.evaluate(attributes).getValue();
+    public QueryResult<String> evaluate(final Map<String, String> attributes, final EvaluationContext context) {
+        final Object result = subject.evaluate(attributes, context).getValue();
         return new StringQueryResult(result == null ? null : result.toString());
     }
 

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/ToUpperEvaluator.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.Map;
 
+import org.apache.nifi.attribute.expression.language.evaluation.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
 import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;
@@ -32,8 +33,8 @@ public ToUpperEvaluator(final Evaluator<String> subject) {
     }
 
     @Override
-    public QueryResult<String> evaluate(final Map<String, String> attributes) {
-        final String subjectValue = subject.evaluate(attributes).getValue();
+    public QueryResult<String> evaluate(final Map<String, String> attributes, final EvaluationContext context) {
+        final String subjectValue = subject.evaluate(attributes, context).getValue();
         return new StringQueryResult(subjectValue == null ? null : subjectValue.toUpperCase());
     }
 

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/TrimEvaluator.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.Map;
 
+import org.apache.nifi.attribute.expression.language.evaluation.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
 import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;
@@ -32,8 +33,8 @@ public TrimEvaluator(final Evaluator<String> subject) {
     }
 
     @Override
-    public QueryResult<String> evaluate(Map<String, String> attributes) {
-        final String subjectValue = subject.evaluate(attributes).getValue();
+    public QueryResult<String> evaluate(Map<String, String> attributes, final EvaluationContext context) {
+        final String subjectValue = subject.evaluate(attributes, context).getValue();
         return new StringQueryResult(subjectValue == null ? null : subjectValue.trim());
     }
 

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/UrlDecodeEvaluator.java
Patch:
@@ -20,6 +20,7 @@
 import java.net.URLDecoder;
 import java.util.Map;
 
+import org.apache.nifi.attribute.expression.language.evaluation.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
 import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;
@@ -34,8 +35,8 @@ public UrlDecodeEvaluator(final Evaluator<String> subject) {
     }
 
     @Override
-    public QueryResult<String> evaluate(final Map<String, String> attributes) {
-        final String subjectValue = subject.evaluate(attributes).getValue();
+    public QueryResult<String> evaluate(final Map<String, String> attributes, final EvaluationContext context) {
+        final String subjectValue = subject.evaluate(attributes, context).getValue();
         if (subjectValue == null) {
             return new StringQueryResult(null);
         }

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/UrlEncodeEvaluator.java
Patch:
@@ -20,6 +20,7 @@
 import java.net.URLEncoder;
 import java.util.Map;
 
+import org.apache.nifi.attribute.expression.language.evaluation.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
 import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;
@@ -34,8 +35,8 @@ public UrlEncodeEvaluator(final Evaluator<String> subject) {
     }
 
     @Override
-    public QueryResult<String> evaluate(final Map<String, String> attributes) {
-        final String subjectValue = subject.evaluate(attributes).getValue();
+    public QueryResult<String> evaluate(final Map<String, String> attributes, final EvaluationContext context) {
+        final String subjectValue = subject.evaluate(attributes, context).getValue();
         if (subjectValue == null) {
             return new StringQueryResult(null);
         }

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/UuidEvaluator.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.Map;
 import java.util.UUID;
 
+import org.apache.nifi.attribute.expression.language.evaluation.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
 import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;
@@ -27,7 +28,7 @@
 public class UuidEvaluator extends StringEvaluator {
 
     @Override
-    public QueryResult<String> evaluate(final Map<String, String> attributes) {
+    public QueryResult<String> evaluate(final Map<String, String> attributes, final EvaluationContext context) {
         return new StringQueryResult(UUID.randomUUID().toString());
     }
 

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/literals/BooleanLiteralEvaluator.java
Patch:
@@ -20,6 +20,7 @@
 
 import org.apache.nifi.attribute.expression.language.evaluation.BooleanEvaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.BooleanQueryResult;
+import org.apache.nifi.attribute.expression.language.evaluation.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
 
@@ -32,7 +33,7 @@ public BooleanLiteralEvaluator(final boolean value) {
     }
 
     @Override
-    public QueryResult<Boolean> evaluate(final Map<String, String> attributes) {
+    public QueryResult<Boolean> evaluate(final Map<String, String> attributes, final EvaluationContext context) {
         return new BooleanQueryResult(value);
     }
 

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/literals/DecimalLiteralEvaluator.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.nifi.attribute.expression.language.evaluation.DecimalEvaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.DecimalQueryResult;
+import org.apache.nifi.attribute.expression.language.evaluation.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
 
@@ -33,7 +34,7 @@ public DecimalLiteralEvaluator(final String value) {
     }
 
     @Override
-    public QueryResult<Double> evaluate(final Map<String, String> attributes) {
+    public QueryResult<Double> evaluate(final Map<String, String> attributes, final EvaluationContext context) {
         return new DecimalQueryResult(literal);
     }
 

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/literals/StringLiteralEvaluator.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.Map;
 
+import org.apache.nifi.attribute.expression.language.evaluation.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
 import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;
@@ -65,7 +66,7 @@ public StringLiteralEvaluator(final String value) {
     }
 
     @Override
-    public QueryResult<String> evaluate(final Map<String, String> attributes) {
+    public QueryResult<String> evaluate(final Map<String, String> attributes, final EvaluationContext context) {
         return new StringQueryResult(value);
     }
 

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/literals/ToLiteralEvaluator.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.Map;
 
+import org.apache.nifi.attribute.expression.language.evaluation.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
 import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;
@@ -31,8 +32,8 @@ public ToLiteralEvaluator(final Evaluator<?> argEvaluator) {
     }
 
     @Override
-    public QueryResult<String> evaluate(final Map<String, String> attributes) {
-        final Object result = argEvaluator.evaluate(attributes);
+    public QueryResult<String> evaluate(final Map<String, String> attributes, final EvaluationContext context) {
+        final Object result = argEvaluator.evaluate(attributes, context);
         return new StringQueryResult(result == null ? null : result.toString());
     }
 

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/literals/WholeNumberLiteralEvaluator.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.Map;
 
+import org.apache.nifi.attribute.expression.language.evaluation.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
 import org.apache.nifi.attribute.expression.language.evaluation.WholeNumberEvaluator;
@@ -32,7 +33,7 @@ public WholeNumberLiteralEvaluator(final String value) {
     }
 
     @Override
-    public QueryResult<Long> evaluate(final Map<String, String> attributes) {
+    public QueryResult<Long> evaluate(final Map<String, String> attributes, final EvaluationContext context) {
         return new WholeNumberQueryResult(literal);
     }
 

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/selection/AttributeEvaluator.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.Map;
 
+import org.apache.nifi.attribute.expression.language.evaluation.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
 import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;
@@ -32,8 +33,8 @@ public AttributeEvaluator(final Evaluator<String> nameEvaluator) {
     }
 
     @Override
-    public QueryResult<String> evaluate(final Map<String, String> attributes) {
-        final String nameValue = nameEvaluator.evaluate(attributes).getValue();
+    public QueryResult<String> evaluate(final Map<String, String> attributes, final EvaluationContext context) {
+        final String nameValue = nameEvaluator.evaluate(attributes, context).getValue();
         final String attributeValue = attributes.get(nameValue);
         return new StringQueryResult(attributeValue);
     }

File: nifi-nar-bundles/nifi-standard-services/nifi-lookup-services-bundle/nifi-lookup-services/src/main/java/org/apache/nifi/lookup/configuration2/CommonsConfigurationLookupService.java
Patch:
@@ -47,6 +47,7 @@
 import org.apache.nifi.lookup.StringLookupService;
 import org.apache.nifi.processor.util.StandardValidators;
 import org.apache.nifi.reporting.InitializationException;
+import org.apache.nifi.security.xml.XXEValidator;
 
 /**
  * This abstract class defines a generic {@link LookupService} backed by an
@@ -66,6 +67,7 @@ public abstract class CommonsConfigurationLookupService<T extends FileBasedConfi
             .description("A configuration file")
             .required(true)
             .addValidator(StandardValidators.FILE_EXISTS_VALIDATOR)
+            .addValidator(new XXEValidator())
             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)
             .build();
 

File: nifi-nar-bundles/nifi-enrich-bundle/nifi-enrich-processors/src/main/java/org/apache/nifi/processors/AbstractEnrichIP.java
Patch:
@@ -50,6 +50,7 @@ public abstract class AbstractEnrichIP extends AbstractProcessor {
             .description("Path to Maxmind IP Enrichment Database File")
             .required(true)
             .addValidator(StandardValidators.FILE_EXISTS_VALIDATOR)
+            .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)
             .build();
 
     public static final PropertyDescriptor IP_ADDRESS_ATTRIBUTE = new PropertyDescriptor.Builder()
@@ -88,7 +89,7 @@ protected List<PropertyDescriptor> getSupportedPropertyDescriptors() {
 
     @OnScheduled
     public void onScheduled(final ProcessContext context) throws IOException {
-        final String dbFileString = context.getProperty(GEO_DATABASE_FILE).getValue();
+        final String dbFileString = context.getProperty(GEO_DATABASE_FILE).evaluateAttributeExpressions().getValue();
         final File dbFile = new File(dbFileString);
         final StopWatch stopWatch = new StopWatch(true);
         final DatabaseReader reader = new DatabaseReader.Builder(dbFile).build();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/queue/clustered/client/async/nio/LoadBalanceSession.java
Patch:
@@ -578,7 +578,8 @@ private boolean receiveSpaceAvailableResponse() throws IOException {
             logger.debug("Peer {} has confirmed that the queue is full for Connection {}", peerDescription, connectionId);
             phase = TransactionPhase.RECOMMEND_PROTOCOL_VERSION;
             checksum.reset(); // We are restarting the session entirely so we need to reset our checksum
-            penalize();
+            complete = true; // consider complete because there's nothing else that we can do in this session. Allow client to move on to a different session.
+            partition.penalize(1000L);
         } else {
             throw new TransactionAbortedException("After requesting to know whether or not Peer " + peerDescription + " has space available in Connection " + connectionId
                 + ", received unexpected response of " + response + ". Aborting transaction.");

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/queue/clustered/client/async/nio/NioAsyncLoadBalanceClient.java
Patch:
@@ -347,7 +347,7 @@ private synchronized RegisteredPartition getReadyPartition(final Predicate<Regis
         try {
             RegisteredPartition partition;
             while ((partition = partitionQueue.poll()) != null) {
-                if (partition.isEmpty() || !filter.test(partition)) {
+                if (partition.isEmpty() || partition.isPenalized() || !filter.test(partition)) {
                     polledPartitions.add(partition);
                     continue;
                 }

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-2-0-processors/src/test/java/org/apache/nifi/processors/kafka/pubsub/TestPublisherPool.java
Patch:
@@ -37,7 +37,7 @@ public void testLeaseCloseReturnsToPool() {
         kafkaProperties.put("key.serializer", ByteArraySerializer.class.getName());
         kafkaProperties.put("value.serializer", ByteArraySerializer.class.getName());
 
-        final PublisherPool pool = new PublisherPool(kafkaProperties, Mockito.mock(ComponentLog.class), 1024 * 1024, 1000L, false, null, StandardCharsets.UTF_8);
+        final PublisherPool pool = new PublisherPool(kafkaProperties, Mockito.mock(ComponentLog.class), 1024 * 1024, 1000L, false, null, null, StandardCharsets.UTF_8);
         assertEquals(0, pool.available());
 
         final PublisherLease lease = pool.obtainPublisher();
@@ -54,7 +54,7 @@ public void testPoisonedLeaseNotReturnedToPool() {
         kafkaProperties.put("key.serializer", ByteArraySerializer.class.getName());
         kafkaProperties.put("value.serializer", ByteArraySerializer.class.getName());
 
-        final PublisherPool pool = new PublisherPool(kafkaProperties, Mockito.mock(ComponentLog.class), 1024 * 1024, 1000L, false, null, StandardCharsets.UTF_8);
+        final PublisherPool pool = new PublisherPool(kafkaProperties, Mockito.mock(ComponentLog.class), 1024 * 1024, 1000L, false, null, null, StandardCharsets.UTF_8);
         assertEquals(0, pool.available());
 
         final PublisherLease lease = pool.obtainPublisher();
@@ -64,5 +64,4 @@ public void testPoisonedLeaseNotReturnedToPool() {
         lease.close();
         assertEquals(0, pool.available());
     }
-
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ApplicationResource.java
Patch:
@@ -881,7 +881,7 @@ protected Response replicate(final String method, final String nodeUuid) {
 
     private void ensureFlowInitialized() {
         if (!flowController.isInitialized()) {
-            throw new IllegalClusterStateException("Cluster is still in the process of voting on the appropriate Data Flow.");
+            throw new IllegalClusterStateException("The Flow Controller is initializing the Data Flow.");
         }
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/StandardProcessorNode.java
Patch:
@@ -144,8 +144,7 @@ public class StandardProcessorNode extends ProcessorNode implements Connectable
     private volatile ScheduledState desiredState = ScheduledState.STOPPED;
     private volatile LogLevel bulletinLevel = LogLevel.WARN;
 
-    private SchedulingStrategy schedulingStrategy; // guarded by read/write lock
-                                                   // ??????? NOT any more
+    private SchedulingStrategy schedulingStrategy; // guarded by synchronized keyword
     private ExecutionNode executionNode;
     private final Map<Thread, ActiveTask> activeThreads = new HashMap<>(48);
     private final int hashCode;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/db/impl/MSSQLDatabaseAdapter.java
Patch:
@@ -83,8 +83,7 @@ public String getSelectStatement(String tableName, String columnNames, String wh
         if (StringUtils.isEmpty(columnForPartitioning)) {
             if (offset != null && limit != null && limit > 0) {
                 if (StringUtils.isEmpty(orderByClause)) {
-                    // Add a default ORDER BY clause using the newid() function
-                    query.append(" ORDER BY newid()");
+                    throw new IllegalArgumentException("Order by clause cannot be null or empty when using row paging");
                 }
 
                 query.append(" OFFSET ");

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/integration/accesscontrol/ITAccessTokenEndpoint.java
Patch:
@@ -410,7 +410,6 @@ public void testLogOutUnknownToken() throws Exception {
         String logoutUrl = BASE_URL + "/access/logout";
 
         Response response = TOKEN_USER.testCreateToken(accessTokenUrl, user, password);
-        Response responseA = TOKEN_USER.testCreateToken(accessTokenUrl, "jack", password);
 
         // ensure the request is successful
         Assert.assertEquals(201, response.getStatus());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/test/java/org/apache/nifi/web/security/jwt/JwtServiceTest.java
Patch:
@@ -511,7 +511,7 @@ public void testShouldLogOutUser() throws Exception {
     public void testLogoutWhenAuthTokenIsEmptyShouldThrowError() throws Exception {
         // Arrange
         expectedException.expect(JwtException.class);
-        expectedException.expectMessage("Log out failed: The required Authorization header was not present in the request to log out user.");
+        expectedException.expectMessage("Log out failed: The user identity was not present in the request token to log out user.");
 
         // Act
         jwtService.logOut(null);
@@ -520,5 +520,4 @@ public void testLogoutWhenAuthTokenIsEmptyShouldThrowError() throws Exception {
         // Should throw exception when authorization header is null
     }
 
-
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/remote/protocol/ServerProtocol.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.nifi.processor.ProcessContext;
 import org.apache.nifi.processor.ProcessSession;
 import org.apache.nifi.remote.Peer;
-import org.apache.nifi.remote.RootGroupPort;
+import org.apache.nifi.remote.PublicPort;
 import org.apache.nifi.remote.VersionedRemoteResource;
 import org.apache.nifi.remote.cluster.ClusterNodeInformation;
 import org.apache.nifi.remote.cluster.NodeInformant;
@@ -40,7 +40,7 @@ public interface ServerProtocol extends VersionedRemoteResource {
      */
     void setRootProcessGroup(ProcessGroup rootGroup);
 
-    RootGroupPort getPort();
+    PublicPort getPort();
 
     /**
      * Optional operation. Sets the NodeInformant to use in this Protocol, if a

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/FlowFromDOMFactory.java
Patch:
@@ -358,6 +358,7 @@ public static PortDTO getPort(final Element element) {
         portDTO.setPosition(getPosition(DomUtils.getChild(element, "position")));
         portDTO.setName(getString(element, "name"));
         portDTO.setComments(getString(element, "comments"));
+        portDTO.setAllowRemoteAccess(getBoolean(element, "allowRemoteAccess"));
         final ScheduledState scheduledState = getScheduledState(element);
         portDTO.setState(scheduledState.toString());
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/fingerprint/FingerprintFactory.java
Patch:
@@ -472,6 +472,7 @@ private StringBuilder addPortFingerprint(final StringBuilder builder, final Elem
         appendFirstValue(builder, DomUtils.getChildNodesByTagName(portElem, "id"));
         appendFirstValue(builder, DomUtils.getChildNodesByTagName(portElem, "versionedComponentId"));
         appendFirstValue(builder, DomUtils.getChildNodesByTagName(portElem, "name"));
+        appendFirstValue(builder, DomUtils.getChildNodesByTagName(portElem, "allowRemoteAccess"));
 
         final NodeList userAccessControlNodeList = DomUtils.getChildNodesByTagName(portElem, "userAccessControl");
         if (userAccessControlNodeList == null || userAccessControlNodeList.getLength() == 0) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/PublicPortAuthorizable.java
Patch:
@@ -20,11 +20,11 @@
 import org.apache.nifi.authorization.user.NiFiUser;
 
 /**
- * Authorizable for a RootGroupPort.
+ * Authorizable for a PublicPort.
  */
-public interface RootGroupPortAuthorizable {
+public interface PublicPortAuthorizable {
     /**
-     * Returns the authorizable for this RootGroupPort. Non null
+     * Returns the authorizable for this PublicGroupPort. Non null
      *
      * @return authorizable
      */

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/web/api/TestDataTransferResource.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.nifi.authorization.resource.ResourceType;
 import org.apache.nifi.remote.HttpRemoteSiteListener;
 import org.apache.nifi.remote.Peer;
-import org.apache.nifi.remote.RootGroupPort;
+import org.apache.nifi.remote.PublicPort;
 import org.apache.nifi.remote.VersionNegotiator;
 import org.apache.nifi.remote.exception.HandshakeException;
 import org.apache.nifi.remote.io.http.HttpServerCommunicationsSession;
@@ -251,7 +251,7 @@ public void testReceiveFlowFiles() throws Exception {
         final DataTransferResource resource = getDataTransferResource();
         final HttpFlowFileServerProtocol serverProtocol = resource.getHttpFlowFileServerProtocol(null);
 
-        final RootGroupPort port = mock(RootGroupPort.class);
+        final PublicPort port = mock(PublicPort.class);
         doReturn(port).when(serverProtocol).getPort();
         doAnswer(invocation -> {
             Peer peer = (Peer) invocation.getArguments()[0];
@@ -282,7 +282,7 @@ public void testReceiveZeroFlowFiles() throws Exception {
         final DataTransferResource resource = getDataTransferResource();
         final HttpFlowFileServerProtocol serverProtocol = resource.getHttpFlowFileServerProtocol(null);
 
-        final RootGroupPort port = mock(RootGroupPort.class);
+        final PublicPort port = mock(PublicPort.class);
         doReturn(port).when(serverProtocol).getPort();
         doAnswer(invocation -> 0).when(port).receiveFlowFiles(any(Peer.class), any());
 

File: nifi-commons/nifi-record-path/src/test/java/org/apache/nifi/record/path/TestRecordPath.java
Patch:
@@ -1306,7 +1306,8 @@ public void testFormatDateFromString() throws ParseException {
             .evaluate(record).getSelectedFields().findFirst().get();
         assertEquals("2017-10-20", fieldValue2.getValue());
 
-        final FieldValue fieldValue3 = RecordPath.compile("format( toDate(/date, \"yyyy-MM-dd'T'HH:mm:ss'Z'\"), 'yyyy-MM-dd HH:mm', 'GMT+8:00')").evaluate(record).getSelectedFields().findFirst().get();
+        final FieldValue fieldValue3 = RecordPath.compile("format( toDate(/date, \"yyyy-MM-dd'T'HH:mm:ss'Z'\"), 'yyyy-MM-dd HH:mm', 'GMT+8:00')")
+            .evaluate(record).getSelectedFields().findFirst().get();
         assertEquals("2017-10-20 19:00", fieldValue3.getValue());
 
         final FieldValue fieldValueUnchanged = RecordPath.compile("format( toDate(/date, \"yyyy-MM-dd'T'HH:mm:ss'Z'\"), 'INVALID' )").evaluate(record).getSelectedFields().findFirst().get();

File: nifi-stateless/nifi-stateless-core/src/main/java/org/apache/nifi/stateless/core/StatelessControllerServiceInitializationContext.java
Patch:
@@ -77,4 +77,5 @@ public File getKerberosServiceKeytab() {
 
     public File getKerberosConfigurationFile() {
         return null; //this needs to be wired in.
-    }}
+    }
+}

File: nifi-stateless/nifi-stateless-core/src/main/java/org/apache/nifi/stateless/core/StatelessValidationContext.java
Patch:
@@ -40,7 +40,8 @@ public class StatelessValidationContext implements ValidationContext {
     private final VariableRegistry variableRegistry;
     private final StatelessProcessContext processContext;
 
-    public StatelessValidationContext(final StatelessProcessContext processContext, final StatelessControllerServiceLookup lookup, final StateManager stateManager, final VariableRegistry variableRegistry) {
+    public StatelessValidationContext(final StatelessProcessContext processContext, final StatelessControllerServiceLookup lookup, final StateManager stateManager,
+                                      final VariableRegistry variableRegistry) {
         this.processContext = processContext;
         this.lookup = lookup;
         this.stateManager = stateManager;

File: nifi-stateless/nifi-stateless-core/src/test/java/org/apache/nifi/stateless/core/BatchTest.java
Patch:
@@ -60,7 +60,8 @@ public void testScenario1_Test() throws Exception {
         ///////////////////////////////////////////
         // Build Flow
         ///////////////////////////////////////////
-        StatelessProcessorWrapper getFile = new StatelessProcessorWrapper(UUID.randomUUID().toString(), new GetFile(), null, serviceLookup, registry, materializeData, ClassLoader.getSystemClassLoader());
+        StatelessProcessorWrapper getFile = new StatelessProcessorWrapper(UUID.randomUUID().toString(), new GetFile(), null, serviceLookup, registry,
+            materializeData, ClassLoader.getSystemClassLoader());
         getFile.setProperty(GetFile.DIRECTORY,"/tmp/nifistateless/input/");
         getFile.setProperty(GetFile.FILE_FILTER,"test.txt");
         getFile.setProperty(GetFile.KEEP_SOURCE_FILE,"true");

File: nifi-stateless/nifi-stateless-core/src/main/java/org/apache/nifi/stateless/core/StatelessProcessorWrapper.java
Patch:
@@ -66,7 +66,7 @@ public class StatelessProcessorWrapper extends AbstractStatelessComponent implem
     private volatile boolean initialized = false;
 
 
-    StatelessProcessorWrapper(final String id, final Processor processor, final StatelessProcessorWrapper parent, final StatelessControllerServiceLookup lookup, final VariableRegistry registry,
+    public StatelessProcessorWrapper(final String id, final Processor processor, final StatelessProcessorWrapper parent, final StatelessControllerServiceLookup lookup, final VariableRegistry registry,
                               final boolean materializeContent, final ClassLoader classLoader) throws InvocationTargetException, IllegalAccessException {
 
         this.processor = processor;

File: nifi-stateless/nifi-stateless-bootstrap/src/main/java/org/apache/nifi/stateless/NiFiStateless.java
Patch:
@@ -43,8 +43,9 @@ public class NiFiStateless {
     public static void main(final String[] args) throws IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {
 
         String nifi_home = System.getenv("NIFI_HOME");
-        if(nifi_home == null || nifi_home.equals(""))
+        if(nifi_home == null || nifi_home.equals("")) {
             nifi_home = ".";
+        }
 
         final File libDir = new File(nifi_home+"/lib");
         final File statelesslibDir = new File(nifi_home+"/stateless-lib");

File: nifi-stateless/nifi-stateless-core/src/main/java/org/apache/nifi/stateless/core/AbstractStatelessComponent.java
Patch:
@@ -87,7 +87,7 @@ public boolean validate() {
             boolean hasSuccessOutputPort = this.successOutputPorts.contains(relationship);
 
             if (!(hasChildren || hasAutoterminate || hasFailureOutputPort || hasSuccessOutputPort)) {
-                getLogger().error("Component: {}, Relationship: {}, needs either auto terminate, child processors, or an output port", new Object[] {toString(), relationship.getName()});
+                getLogger().error("Component: {}, Relationship: {}, either needs to be auto-terminated or connected to another component", new Object[] {toString(), relationship.getName()});
                 return false;
             }
         }

File: nifi-stateless/nifi-stateless-core/src/main/java/org/apache/nifi/stateless/core/StatelessProcessSession.java
Patch:
@@ -777,12 +777,13 @@ public OutputStream write(FlowFile flowFile) {
             throw new IllegalArgumentException("Cannot export a flow file that I did not create");
         }
 
-        final StatelessFlowFile StatelessFlowFile = validateState(flowFile);
+        validateState(flowFile);
         final ByteArrayOutputStream baos = new ByteArrayOutputStream() {
             @Override
             public void close() throws IOException {
                 super.close();
                 final StatelessFlowFile newFlowFile = new StatelessFlowFile((StatelessFlowFile) flowFile, materializeContent);
+                newFlowFile.setData(toByteArray());
                 currentVersions.put(newFlowFile.getId(), newFlowFile);
             }
         };

File: nifi-stateless/nifi-stateless-core/src/main/java/org/apache/nifi/stateless/core/StatelessProcessorWrapper.java
Patch:
@@ -107,8 +107,8 @@ private void initialize() {
         //Validate context
         final Collection<ValidationResult> validationResult = context.validate();
         if (validationResult.stream().anyMatch(a -> !a.isValid()) || !this.validate()) {
-            throw new IllegalArgumentException("Processor is not valid: "
-                + String.join("\n", validationResult.stream().map(ValidationResult::toString).collect(Collectors.toList())));
+            throw new IllegalArgumentException(processor + " is not valid: "
+                + validationResult.stream().map(ValidationResult::toString).collect(Collectors.joining("\n")));
         }
 
         try (final CloseableNarLoader c = withNarClassLoader()) {
@@ -147,7 +147,7 @@ public boolean runRecursive(final Queue<InMemoryFlowFile> output) {
             final AtomicBoolean nextStepCalled = new AtomicBoolean(false);
 
             try {
-                logger.info("Running " + this.processor.getClass().getSimpleName() + ".onTrigger with " + inputQueue.size() + " FlowFiles");
+                logger.debug("Running {}.onTrigger with {} FlowFiles", new Object[] {this.processor.getClass().getSimpleName(), inputQueue.size()});
 
                 try (final CloseableNarLoader c = withNarClassLoader()) { // Trigger processor with the appropriate class loader
                     processor.onTrigger(context, () -> {

File: nifi-stateless/nifi-stateless-core/src/main/java/org/apache/nifi/stateless/bootstrap/ExtensionDiscovery.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.fn.bootstrap;
+package org.apache.nifi.stateless.bootstrap;
 
 import org.apache.nifi.bundle.Bundle;
 import org.apache.nifi.nar.ExtensionManager;

File: nifi-stateless/nifi-stateless-core/src/main/java/org/apache/nifi/stateless/bootstrap/InMemoryFlowFile.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.fn.bootstrap;
+package org.apache.nifi.stateless.bootstrap;
 
 import org.apache.nifi.controller.repository.FlowFileRecord;
 

File: nifi-stateless/nifi-stateless-core/src/main/java/org/apache/nifi/stateless/bootstrap/RunnableFlow.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.fn.bootstrap;
+package org.apache.nifi.stateless.bootstrap;
 
 import java.util.Queue;
 

File: nifi-stateless/nifi-stateless-core/src/main/java/org/apache/nifi/stateless/core/ProvenanceCollector.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.fn.core;
+package org.apache.nifi.stateless.core;
 
 import org.apache.nifi.flowfile.FlowFile;
 import org.apache.nifi.processor.Relationship;
@@ -33,12 +33,12 @@
 
 public class ProvenanceCollector implements ProvenanceReporter {
     private static final Logger logger = LoggerFactory.getLogger(ProvenanceCollector.class);
-    private final FnProcessSession session;
+    private final StatelessProcessSession session;
     private final String processorId;
     private final String processorType;
     private final Collection<ProvenanceEventRecord> events;
 
-    public ProvenanceCollector(final FnProcessSession session, final Collection<ProvenanceEventRecord> events, final String processorId, final String processorType) {
+    public ProvenanceCollector(final StatelessProcessSession session, final Collection<ProvenanceEventRecord> events, final String processorId, final String processorType) {
         this.session = session;
         this.events = events;
         this.processorId = processorId;

File: nifi-stateless/nifi-stateless-core/src/main/java/org/apache/nifi/stateless/core/ReflectionUtils.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.fn.core;
+package org.apache.nifi.stateless.core;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: nifi-stateless/nifi-stateless-core/src/main/java/org/apache/nifi/stateless/core/RegistryUtil.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.fn.core;
+package org.apache.nifi.stateless.core;
 
 import org.apache.nifi.authorization.user.NiFiUser;
 import org.apache.nifi.registry.client.FlowClient;

File: nifi-stateless/nifi-stateless-core/src/main/java/org/apache/nifi/stateless/core/SLF4JComponentLog.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.fn.core;
+package org.apache.nifi.stateless.core;
 
 import org.apache.nifi.logging.ComponentLog;
 import org.apache.nifi.logging.LogLevel;

File: nifi-stateless/nifi-stateless-core/src/main/java/org/apache/nifi/stateless/core/StatelessConnectionContext.java
Patch:
@@ -14,11 +14,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.fn.core;
+package org.apache.nifi.stateless.core;
 
 import org.apache.nifi.processor.Relationship;
 
-public interface FnConnectionContext {
+public interface StatelessConnectionContext {
 
     void addConnection(Relationship relationship);
 

File: nifi-stateless/nifi-stateless-core/src/main/java/org/apache/nifi/stateless/core/StatelessControllerServiceConfiguration.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.fn.core;
+package org.apache.nifi.stateless.core;
 
 import org.apache.nifi.components.PropertyDescriptor;
 import org.apache.nifi.controller.ControllerService;
@@ -24,14 +24,14 @@
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicBoolean;
 
-public class FnControllerServiceConfiguration {
+public class StatelessControllerServiceConfiguration {
 
     private final ControllerService service;
     private final AtomicBoolean enabled = new AtomicBoolean(false);
     private String annotationData;
     private Map<PropertyDescriptor, String> properties = new HashMap<>();
 
-    public FnControllerServiceConfiguration(final ControllerService service) {
+    public StatelessControllerServiceConfiguration(final ControllerService service) {
         this.service = service;
     }
 

File: nifi-stateless/nifi-stateless-core/src/main/java/org/apache/nifi/stateless/core/StatelessPassThroughConnectionContext.java
Patch:
@@ -14,14 +14,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.fn.core;
+package org.apache.nifi.stateless.core;
 
 import org.apache.nifi.processor.Relationship;
 
 import java.util.HashSet;
 import java.util.Set;
 
-public class FnPassThroughConnectionContext implements FnConnectionContext {
+public class StatelessPassThroughConnectionContext implements StatelessConnectionContext {
     private final Set<Relationship> connectedRelationships = new HashSet<>();
 
     @Override
@@ -31,6 +31,6 @@ public void addConnection(final Relationship relationship) {
 
     @Override
     public boolean isValid() {
-        return connectedRelationships.size() == 1 && connectedRelationships.contains(FnPassThroughComponent.RELATIONSHIP);
+        return connectedRelationships.size() == 1 && connectedRelationships.contains(StatelessPassThroughComponent.RELATIONSHIP);
     }
 }

File: nifi-stateless/nifi-stateless-core/src/main/java/org/apache/nifi/stateless/core/StatelessStateMap.java
Patch:
@@ -14,19 +14,19 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.fn.core;
+package org.apache.nifi.stateless.core;
 
 import org.apache.nifi.components.state.StateMap;
 
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
 
-public class FnStateMap implements StateMap {
+public class StatelessStateMap implements StateMap {
     private final Map<String, String> stateValues;
     private final long version;
 
-    public FnStateMap(final Map<String, String> stateValues, final long version) {
+    public StatelessStateMap(final Map<String, String> stateValues, final long version) {
         this.stateValues = stateValues == null ? Collections.<String, String>emptyMap() : new HashMap<>(stateValues);
         this.version = version;
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/FileSystemSwapManager.java
Patch:
@@ -463,6 +463,7 @@ public String changePartitionName(final String swapLocation, final String newPar
         // Use Files.move and convert to Path's instead of File.rename so that we get an IOException on failure that describes why we failed.
         Files.move(existingFile.toPath(), newFile.toPath());
 
+        logger.debug("Changed Partition for Swap File by renaming from {} to {}", swapLocation, newPartitionName);
         return newFile.getAbsolutePath();
     }
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/integration/lifecycle/FlowFileRepositoryLifecycleIT.java
Patch:
@@ -75,7 +75,8 @@ public void testFlowFilesReloadedIntoQueuesUponRestart() throws ExecutionExcepti
         shutdown();
 
         final FlowFileQueue restoredQueue = createFlowFileQueue(queue.getIdentifier());
-        initialize(() -> Collections.singleton(restoredQueue));
+        initialize();
+        getFlowController().initializeFlow(() -> Collections.singleton(restoredQueue));
 
         for (int i=0; i < queueSize; i++) {
             final FlowFileRecord flowFileRecord = restoredQueue.poll(Collections.emptySet());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-administration/src/main/java/org/apache/nifi/admin/dao/impl/StandardKeyDAO.java
Patch:
@@ -161,6 +161,7 @@ public void deleteKeys(String identity) {
         try {
             // add each authority for the specified user
             statement = connection.prepareStatement(DELETE_KEYS);
+            statement.setString(1, identity);
             statement.executeUpdate();
         } catch (SQLException sqle) {
             throw new DataAccessException(sqle);

File: nifi-toolkit/nifi-toolkit-tls/src/main/java/org/apache/nifi/toolkit/tls/util/TlsHelper.java
Patch:
@@ -49,6 +49,7 @@
 import org.bouncycastle.pkcs.PKCS10CertificationRequest;
 import org.bouncycastle.pkcs.jcajce.JcaPKCS10CertificationRequest;
 import org.bouncycastle.pkcs.jcajce.JcaPKCS10CertificationRequestBuilder;
+import org.bouncycastle.util.IPAddress;
 import org.bouncycastle.util.io.pem.PemWriter;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -366,7 +367,7 @@ public static Extensions createDomainAlternativeNamesExtensions(String domainAlt
 
         if (StringUtils.isNotBlank(domainAlternativeNames)) {
             for (String alternativeName : domainAlternativeNames.split(",")) {
-                namesList.add(new GeneralName(GeneralName.dNSName, alternativeName));
+                namesList.add(new GeneralName(IPAddress.isValid(alternativeName) ? GeneralName.iPAddress : GeneralName.dNSName, alternativeName));
             }
         }
 

File: nifi-commons/nifi-record/src/main/java/org/apache/nifi/serialization/record/util/DataTypeUtils.java
Patch:
@@ -736,7 +736,7 @@ public static Object[] convertRecordArrayToJavaArray(final Object[] array, DataT
     }
 
     public static boolean isMapTypeCompatible(final Object value) {
-        return value != null && value instanceof Map;
+        return value != null && (value instanceof Map || value instanceof MapRecord);
     }
 
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/db/impl/MSSQLDatabaseAdapter.java
Patch:
@@ -83,7 +83,8 @@ public String getSelectStatement(String tableName, String columnNames, String wh
         if (StringUtils.isEmpty(columnForPartitioning)) {
             if (offset != null && limit != null && limit > 0) {
                 if (StringUtils.isEmpty(orderByClause)) {
-                    throw new IllegalArgumentException("Order by clause cannot be null or empty when using row paging");
+                    // Add a default ORDER BY clause using the newid() function
+                    query.append(" ORDER BY newid()");
                 }
 
                 query.append(" OFFSET ");

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/groups/StandardProcessGroup.java
Patch:
@@ -252,7 +252,7 @@ public String getName() {
     @Override
     public void setName(final String name) {
         if (StringUtils.isBlank(name)) {
-            throw new IllegalArgumentException("The name cannot be blank.");
+            throw new IllegalArgumentException("The name of the process group must be specified.");
         }
 
         this.name.set(name);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardInputPortDAO.java
Patch:
@@ -162,7 +162,7 @@ private List<String> validateProposedConfiguration(PortDTO portDTO) {
         List<String> validationErrors = new ArrayList<>();
 
         if (isNotNull(portDTO.getName()) && portDTO.getName().trim().isEmpty()) {
-            validationErrors.add("Port name cannot be blank.");
+            validationErrors.add("The name of the port must be specified.");
         }
         if (isNotNull(portDTO.getConcurrentlySchedulableTaskCount()) && portDTO.getConcurrentlySchedulableTaskCount() <= 0) {
             validationErrors.add("Concurrent tasks must be a positive integer.");

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardOutputPortDAO.java
Patch:
@@ -158,7 +158,7 @@ private List<String> validateProposedConfiguration(PortDTO portDTO) {
         List<String> validationErrors = new ArrayList<>();
 
         if (isNotNull(portDTO.getName()) && portDTO.getName().trim().isEmpty()) {
-            validationErrors.add("Port name cannot be blank.");
+            validationErrors.add("The name of the port must be specified.");
         }
         if (isNotNull(portDTO.getConcurrentlySchedulableTaskCount()) && portDTO.getConcurrentlySchedulableTaskCount() <= 0) {
             validationErrors.add("Concurrent tasks must be a positive integer.");

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/ExtensionBuilder.java
Patch:
@@ -381,7 +381,7 @@ private ControllerServiceNode createControllerServiceNode() throws ClassNotFound
 
             final StateManager stateManager = stateManagerProvider.getStateManager(identifier);
             final ControllerServiceInitializationContext initContext = new StandardControllerServiceInitializationContext(identifier, terminationAwareLogger,
-                    serviceProvider, stateManager, kerberosConfig);
+                    serviceProvider, stateManager, kerberosConfig, nodeTypeProvider);
             serviceImpl.initialize(initContext);
 
             final LoggableComponent<ControllerService> originalLoggableComponent = new LoggableComponent<>(serviceImpl, bundleCoordinate, terminationAwareLogger);

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/kinesis/stream/PutKinesisStream.java
Patch:
@@ -83,7 +83,7 @@ public class PutKinesisStream extends AbstractKinesisStreamProcessor {
                 AWS_CREDENTIALS_PROVIDER_SERVICE, TIMEOUT, PROXY_CONFIGURATION_SERVICE, PROXY_HOST, PROXY_HOST_PORT, PROXY_USERNAME, PROXY_PASSWORD, ENDPOINT_OVERRIDE));
 
     /** A random number generator for cases where partition key is not available */
-    protected Random randomParitionKeyGenerator = new Random();
+    protected Random randomPartitionKeyGenerator = new Random();
 
     @Override
     protected List<PropertyDescriptor> getSupportedPropertyDescriptors() {
@@ -125,7 +125,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
                 if (StringUtils.isBlank(partitionKey) == false) {
                     record.setPartitionKey(partitionKey);
                 } else {
-                    record.setPartitionKey(Integer.toString(randomParitionKeyGenerator.nextInt()));
+                    record.setPartitionKey(Integer.toString(randomPartitionKeyGenerator.nextInt()));
                 }
 
                 if (recordHash.containsKey(streamName) == false) {

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/test/java/org/apache/nifi/processors/aws/kinesis/stream/ITPutKinesisStream.java
Patch:
@@ -92,7 +92,7 @@ public void testIntegrationWithFixedPartitionSuccess() throws Exception {
 
     @Test
     public void testIntegrationWithDynamicPartitionSuccess() throws Exception {
-        runner.setProperty(PutKinesisStream.KINESIS_PARTITION_KEY, "${parition}");
+        runner.setProperty(PutKinesisStream.KINESIS_PARTITION_KEY, "${partition}");
         runner.assertValid();
         Map<String,String> properties = new HashMap<>();
         properties.put("partition", "px");

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-0-10-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/ConsumerLease.java
Patch:
@@ -133,7 +133,7 @@ private void resetInternalState() {
      */
     @Override
     public void onPartitionsRevoked(final Collection<TopicPartition> partitions) {
-        logger.debug("Rebalance Alert: Paritions '{}' revoked for lease '{}' with consumer '{}'", new Object[]{partitions, this, kafkaConsumer});
+        logger.debug("Rebalance Alert: Partitions '{}' revoked for lease '{}' with consumer '{}'", new Object[]{partitions, this, kafkaConsumer});
         //force a commit here.  Can reuse the session and consumer after this but must commit now to avoid duplicates if kafka reassigns partition
         commit();
     }
@@ -147,7 +147,7 @@ public void onPartitionsRevoked(final Collection<TopicPartition> partitions) {
      */
     @Override
     public void onPartitionsAssigned(final Collection<TopicPartition> partitions) {
-        logger.debug("Rebalance Alert: Paritions '{}' assigned for lease '{}' with consumer '{}'", new Object[]{partitions, this, kafkaConsumer});
+        logger.debug("Rebalance Alert: Partitions '{}' assigned for lease '{}' with consumer '{}'", new Object[]{partitions, this, kafkaConsumer});
     }
 
     /**

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-0-11-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/ConsumerLease.java
Patch:
@@ -142,7 +142,7 @@ private void resetInternalState() {
      */
     @Override
     public void onPartitionsRevoked(final Collection<TopicPartition> partitions) {
-        logger.debug("Rebalance Alert: Paritions '{}' revoked for lease '{}' with consumer '{}'", new Object[]{partitions, this, kafkaConsumer});
+        logger.debug("Rebalance Alert: Partitions '{}' revoked for lease '{}' with consumer '{}'", new Object[]{partitions, this, kafkaConsumer});
         //force a commit here.  Can reuse the session and consumer after this but must commit now to avoid duplicates if kafka reassigns partition
         commit();
     }
@@ -156,7 +156,7 @@ public void onPartitionsRevoked(final Collection<TopicPartition> partitions) {
      */
     @Override
     public void onPartitionsAssigned(final Collection<TopicPartition> partitions) {
-        logger.debug("Rebalance Alert: Paritions '{}' assigned for lease '{}' with consumer '{}'", new Object[]{partitions, this, kafkaConsumer});
+        logger.debug("Rebalance Alert: Partitions '{}' assigned for lease '{}' with consumer '{}'", new Object[]{partitions, this, kafkaConsumer});
     }
 
     /**

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-0-9-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/ConsumerLease.java
Patch:
@@ -110,7 +110,7 @@ private void resetInternalState() {
      */
     @Override
     public void onPartitionsRevoked(final Collection<TopicPartition> partitions) {
-        logger.debug("Rebalance Alert: Paritions '{}' revoked for lease '{}' with consumer '{}'", new Object[]{partitions, this, kafkaConsumer});
+        logger.debug("Rebalance Alert: Partitions '{}' revoked for lease '{}' with consumer '{}'", new Object[]{partitions, this, kafkaConsumer});
         //force a commit here.  Can reuse the session and consumer after this but must commit now to avoid duplicates if kafka reassigns parittion
         commit();
     }
@@ -124,7 +124,7 @@ public void onPartitionsRevoked(final Collection<TopicPartition> partitions) {
      */
     @Override
     public void onPartitionsAssigned(final Collection<TopicPartition> partitions) {
-        logger.debug("Rebalance Alert: Paritions '{}' assigned for lease '{}' with consumer '{}'", new Object[]{partitions, this, kafkaConsumer});
+        logger.debug("Rebalance Alert: Partitions '{}' assigned for lease '{}' with consumer '{}'", new Object[]{partitions, this, kafkaConsumer});
     }
 
     /**

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-1-0-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/ConsumerLease.java
Patch:
@@ -142,7 +142,7 @@ private void resetInternalState() {
      */
     @Override
     public void onPartitionsRevoked(final Collection<TopicPartition> partitions) {
-        logger.debug("Rebalance Alert: Paritions '{}' revoked for lease '{}' with consumer '{}'", new Object[]{partitions, this, kafkaConsumer});
+        logger.debug("Rebalance Alert: Partitions '{}' revoked for lease '{}' with consumer '{}'", new Object[]{partitions, this, kafkaConsumer});
         //force a commit here.  Can reuse the session and consumer after this but must commit now to avoid duplicates if kafka reassigns partition
         commit();
     }
@@ -156,7 +156,7 @@ public void onPartitionsRevoked(final Collection<TopicPartition> partitions) {
      */
     @Override
     public void onPartitionsAssigned(final Collection<TopicPartition> partitions) {
-        logger.debug("Rebalance Alert: Paritions '{}' assigned for lease '{}' with consumer '{}'", new Object[]{partitions, this, kafkaConsumer});
+        logger.debug("Rebalance Alert: Partitions '{}' assigned for lease '{}' with consumer '{}'", new Object[]{partitions, this, kafkaConsumer});
     }
 
     /**

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-2-0-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/ConsumerLease.java
Patch:
@@ -142,7 +142,7 @@ private void resetInternalState() {
      */
     @Override
     public void onPartitionsRevoked(final Collection<TopicPartition> partitions) {
-        logger.debug("Rebalance Alert: Paritions '{}' revoked for lease '{}' with consumer '{}'", new Object[]{partitions, this, kafkaConsumer});
+        logger.debug("Rebalance Alert: Partitions '{}' revoked for lease '{}' with consumer '{}'", new Object[]{partitions, this, kafkaConsumer});
         //force a commit here.  Can reuse the session and consumer after this but must commit now to avoid duplicates if kafka reassigns partition
         commit();
     }
@@ -156,7 +156,7 @@ public void onPartitionsRevoked(final Collection<TopicPartition> partitions) {
      */
     @Override
     public void onPartitionsAssigned(final Collection<TopicPartition> partitions) {
-        logger.debug("Rebalance Alert: Paritions '{}' assigned for lease '{}' with consumer '{}'", new Object[]{partitions, this, kafkaConsumer});
+        logger.debug("Rebalance Alert: Partitions '{}' assigned for lease '{}' with consumer '{}'", new Object[]{partitions, this, kafkaConsumer});
     }
 
     /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/service/ServiceStateTransition.java
Patch:
@@ -99,7 +99,7 @@ public void disable() {
         writeLock.lock();
         try {
             state = ControllerServiceState.DISABLED;
-            disabledFutures.stream().forEach(future -> future.complete(null));
+            disabledFutures.forEach(future -> future.complete(null));
         } finally {
             writeLock.unlock();
         }

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/FetchFTP.java
Patch:
@@ -73,6 +73,7 @@ protected List<PropertyDescriptor> getSupportedPropertyDescriptors() {
         properties.add(FTPTransfer.HTTP_PROXY_USERNAME);
         properties.add(FTPTransfer.HTTP_PROXY_PASSWORD);
         properties.add(FTPTransfer.BUFFER_SIZE);
+        properties.add(FILE_NOT_FOUND_LOG_LEVEL);
         return properties;
     }
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/FetchSFTP.java
Patch:
@@ -86,6 +86,7 @@ protected List<PropertyDescriptor> getSupportedPropertyDescriptors() {
         properties.add(FTPTransfer.PROXY_PORT);
         properties.add(FTPTransfer.HTTP_PROXY_USERNAME);
         properties.add(FTPTransfer.HTTP_PROXY_PASSWORD);
+        properties.add(FILE_NOT_FOUND_LOG_LEVEL);
         return properties;
     }
 

File: nifi-nar-bundles/nifi-cassandra-bundle/nifi-cassandra-processors/src/main/java/org/apache/nifi/processors/cassandra/PutCassandraRecord.java
Patch:
@@ -167,6 +167,7 @@ public void onTrigger(ProcessContext context, ProcessSession session) throws Pro
                 if (recordsAdded.incrementAndGet() == batchSize) {
                     connectionSession.execute(batchStatement);
                     batchStatement.clear();
+                    recordsAdded.set(0);
                 }
             }
 

File: nifi-nar-bundles/nifi-druid-bundle/nifi-druid-controller-service/src/main/java/org/apache/nifi/controller/druid/DruidTranquilityController.java
Patch:
@@ -259,7 +259,7 @@ public class DruidTranquilityController extends AbstractControllerService implem
     public static final PropertyDescriptor INDEX_RETRY_PERIOD = new PropertyDescriptor.Builder()
             .name("druid-cs-index-retry-period")
             .displayName("Index Retry Period")
-            .description("Grace period to allow late arriving events for real time ingest.")
+            .description("Time period, until a transiently failing indexing service overlord call is retried, before giving up.")
             .required(true)
             .allowableValues(PT1M, PT10M, PT60M)
             .defaultValue(PT10M.getValue())
@@ -330,6 +330,7 @@ public class DruidTranquilityController extends AbstractControllerService implem
         props.add(AGGREGATOR_JSON);
         props.add(SEGMENT_GRANULARITY);
         props.add(QUERY_GRANULARITY);
+        props.add(INDEX_RETRY_PERIOD);
         props.add(WINDOW_PERIOD);
         props.add(TIMESTAMP_FIELD);
         props.add(MAX_BATCH_SIZE);

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/result/ControllerServicesResult.java
Patch:
@@ -62,12 +62,13 @@ protected void writeSimpleResult(final PrintStream output) throws IOException {
         final Table table = new Table.Builder()
                 .column("#", 3, 3, false)
                 .column("Name", 5, 40, false)
+                .column("ID", 36, 36, false)
                 .column("State", 5, 40, false)
                 .build();
 
         for (int i=0; i < serviceDTOS.size(); i++) {
             final ControllerServiceDTO serviceDTO = serviceDTOS.get(i);
-            table.addRow(String.valueOf(i+1), serviceDTO.getName(), serviceDTO.getState());
+            table.addRow(String.valueOf(i+1), serviceDTO.getName(), serviceDTO.getId(), serviceDTO.getState());
         }
 
         final TableWriter tableWriter = new DynamicTableWriter();

File: nifi-nar-bundles/nifi-evtx-bundle/nifi-evtx-processors/src/main/java/org/apache/nifi/processors/evtx/parser/ChunkHeader.java
Patch:
@@ -158,7 +158,7 @@ public String toString() {
     }
 
     public boolean hasNext() {
-        return fileLastRecordNumber.compareTo(recordNumber) > 0;
+        return logLastRecordNumber.compareTo(recordNumber) > 0;
     }
 
     public String getString(int offset) {

File: nifi-nar-bundles/nifi-evtx-bundle/nifi-evtx-processors/src/main/java/org/apache/nifi/processors/evtx/parser/FileHeader.java
Patch:
@@ -141,10 +141,10 @@ public UnsignedInteger getChecksum() {
 
     /**
      * Tests whether there are more chunks
-     * @return true iff there are chunks left
+     * @return true if there are chunks left
      */
     public boolean hasNext() {
-        return count < chunkCount;
+        return count <= chunkCount;
     }
 
     /**

File: nifi-nar-bundles/nifi-evtx-bundle/nifi-evtx-processors/src/test/java/org/apache/nifi/processors/evtx/parser/ChunkHeaderTest.java
Patch:
@@ -102,7 +102,7 @@ public void setup() throws IOException {
             offset += 11;
         }
 
-        RecordTest.putNode(testBinaryReaderBuilder, fileLastRecordNumber, new Date());
+        RecordTest.putNode(testBinaryReaderBuilder, logLastRecordNumber, new Date());
 
         testBinaryReaderBuilder.put(dataBuilder.toByteArray());
 
@@ -133,7 +133,7 @@ public void testInit() throws IOException {
         assertTrue(chunkHeader.hasNext());
 
         Record next = chunkHeader.next();
-        assertEquals(fileLastRecordNumber, next.getRecordNum().intValue());
+        assertEquals(logLastRecordNumber, next.getRecordNum().intValue());
         RootNode rootNode = next.getRootNode();
         List<BxmlNode> children = rootNode.getChildren();
         assertEquals(1, children.size());

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/test/java/org/apache/nifi/processors/azure/eventhub/PutAzureEventHubTest.java
Patch:
@@ -99,7 +99,9 @@ public void testBadConnectionString() {
     private static class MockPutAzureEventHub extends PutAzureEventHub{
 
         byte[] receivedBuffer = null;
-        byte[] getReceivedBuffer(){return receivedBuffer;}
+        byte[] getReceivedBuffer(){
+            return receivedBuffer;
+        }
 
         @Override
         protected EventHubClient createEventHubClient(final String namespace, final String eventHubName, final String policyName, final String policyKey) throws ProcessException {

File: nifi-commons/nifi-utils/src/main/java/org/apache/nifi/util/FormatUtils.java
Patch:
@@ -399,8 +399,8 @@ private static String join(final String delimiter, final String... values) {
     public static String formatNanos(final long nanos, final boolean includeTotalNanos) {
         final StringBuilder sb = new StringBuilder();
 
-        final long seconds = nanos > 1000000000L ? nanos / 1000000000L : 0L;
-        long millis = nanos > 1000000L ? nanos / 1000000L : 0L;
+        final long seconds = nanos >= 1000000000L ? nanos / 1000000000L : 0L;
+        long millis = nanos >= 1000000L ? nanos / 1000000L : 0L;
         final long nanosLeft = nanos % 1000000L;
 
         if (seconds > 0) {

File: nifi-api/src/main/java/org/apache/nifi/documentation/ServiceAPI.java
Patch:
@@ -28,7 +28,7 @@
  * <b>NOTE WELL:</b> At this time, while this class is part of nifi-api, it is still evolving and may change in a non-backward-compatible manner or even be
  * removed from one incremental release to the next. Use at your own risk!
  */
-public interface ProvidedServiceAPI {
+public interface ServiceAPI {
     /**
      * @return the fully qualified class name of the interface implemented by the Controller Service
      */

File: nifi-api/src/main/java/org/apache/nifi/documentation/StandardServiceAPI.java
Patch:
@@ -16,13 +16,13 @@
  */
 package org.apache.nifi.documentation;
 
-public class StandardProvidedServiceAPI implements ProvidedServiceAPI {
+public class StandardServiceAPI implements ServiceAPI {
     private final String className;
     private final String groupId;
     private final String artifactId;
     private final String version;
 
-    public StandardProvidedServiceAPI(final String className, final String groupId, final String artifactId, final String version) {
+    public StandardServiceAPI(final String className, final String groupId, final String artifactId, final String version) {
         this.className = className;
         this.groupId = groupId;
         this.artifactId = artifactId;

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/json/JsonSchemaInference.java
Patch:
@@ -56,13 +56,13 @@ protected DataType getDataType(final JsonNode jsonNode) {
         }
 
         if (jsonNode.isIntegralNumber()) {
+            if (jsonNode.isBigInteger()) {
+                return RecordFieldType.BIGINT.getDataType();
+            }
             return RecordFieldType.LONG.getDataType();
         }
 
         if (jsonNode.isFloatingPointNumber()) {
-            return RecordFieldType.FLOAT.getDataType();
-        }
-        if (jsonNode.isDouble()) {
             return RecordFieldType.DOUBLE.getDataType();
         }
         if (jsonNode.isBinary()) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/fingerprint/FingerprintFactory.java
Patch:
@@ -766,7 +766,7 @@ public int compare(final Element e1, final Element e2) {
             }
         };
     }
-    
+
     private Comparator<Element> getElementTextComparator() {
         return new Comparator<Element>() {
             @Override

File: nifi-nar-bundles/nifi-cassandra-bundle/nifi-cassandra-processors/src/main/java/org/apache/nifi/processors/cassandra/AbstractCassandraProcessor.java
Patch:
@@ -31,7 +31,6 @@
 import org.apache.avro.SchemaBuilder;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.nifi.annotation.lifecycle.OnScheduled;
-import org.apache.nifi.authentication.exception.ProviderCreationException;
 import org.apache.nifi.cassandra.CassandraSessionProviderService;
 import org.apache.nifi.components.PropertyDescriptor;
 import org.apache.nifi.components.PropertyValue;
@@ -255,7 +254,7 @@ void connectToCassandra(ProcessContext context) {
                     try {
                         clientAuth = SSLContextService.ClientAuth.valueOf(rawClientAuth);
                     } catch (final IllegalArgumentException iae) {
-                        throw new ProviderCreationException(String.format("Unrecognized client auth '%s'. Possible values are [%s]",
+                        throw new IllegalStateException(String.format("Unrecognized client auth '%s'. Possible values are [%s]",
                                 rawClientAuth, StringUtils.join(SslContextFactory.ClientAuth.values(), ", ")));
                     }
                 }

File: nifi-nar-bundles/nifi-cassandra-bundle/nifi-cassandra-processors/src/test/java/org/apache/nifi/processors/cassandra/AbstractCassandraProcessorTest.java
Patch:
@@ -23,7 +23,6 @@
 import com.datastax.driver.core.Row;
 import com.google.common.collect.Sets;
 import org.apache.nifi.annotation.lifecycle.OnEnabled;
-import org.apache.nifi.authentication.exception.ProviderCreationException;
 import org.apache.nifi.components.PropertyDescriptor;
 import org.apache.nifi.controller.ConfigurationContext;
 import org.apache.nifi.processor.ProcessContext;
@@ -233,7 +232,7 @@ public void testConnectToCassandraWithSSL() throws Exception {
         assertNotNull(processor.getCluster());
     }
 
-    @Test(expected = ProviderCreationException.class)
+    @Test(expected = IllegalStateException.class)
     public void testConnectToCassandraWithSSLBadClientAuth() throws Exception {
         SSLContextService sslService = mock(SSLContextService.class);
         when(sslService.getIdentifier()).thenReturn("ssl-context");

File: nifi-nar-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/storage/AbstractGCSProcessor.java
Patch:
@@ -93,7 +93,7 @@ protected StorageOptions getServiceOptions(ProcessContext context, GoogleCredent
                         .setMaxAttempts(retryCount)
                         .build());
 
-        if (!projectId.isEmpty()) {
+        if (projectId != null && !projectId.isEmpty()) {
             storageOptionsBuilder.setProjectId(projectId);
         }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/StandardProcessorNode.java
Patch:
@@ -1367,7 +1367,6 @@ public void start(final ScheduledExecutorService taskScheduler, final long admin
         }
 
         if (starting) { // will ensure that the Processor represented by this node can only be started once
-            hasActiveThreads = true;
             initiateStart(taskScheduler, administrativeYieldMillis, timeoutMillis, processContext, schedulingAgentCallback);
         } else {
             final String procName = processorRef.get().toString();
@@ -1395,7 +1394,7 @@ public synchronized List<ActiveThreadInfo> getActiveThreads() {
         final long[] monitorDeadlockThreadIds = mbean.findMonitorDeadlockedThreads();
 
         final Map<Long, ThreadInfo> threadInfoMap = Stream.of(infos)
-            .collect(Collectors.toMap(info -> info.getThreadId(), Function.identity(), (a, b) -> a));
+            .collect(Collectors.toMap(ThreadInfo::getThreadId, Function.identity(), (a, b) -> a));
 
         final List<ActiveThreadInfo> threadList = new ArrayList<>(activeThreads.size());
         for (final Map.Entry<Thread, ActiveTask> entry : activeThreads.entrySet()) {
@@ -1509,6 +1508,8 @@ private void initiateStart(final ScheduledExecutorService taskScheduler, final l
 
             try (final NarCloseable nc = NarCloseable.withComponentNarLoader(getExtensionManager(), processor.getClass(), processor.getIdentifier())) {
                 try {
+                    hasActiveThreads = true;
+
                     activateThread();
                     try {
                         ReflectionUtils.invokeMethodsWithAnnotation(OnScheduled.class, processor, processContext);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/repository/StandardProcessSession.java
Patch:
@@ -2173,8 +2173,8 @@ private InputStream getInputStream(final FlowFile flowFile, final ContentClaim c
             // callback for reading FlowFile 1 and if we used the same stream we'd be destroying the ability to read from FlowFile 1.
             if (allowCachingOfStream && readRecursionSet.isEmpty() && writeRecursionSet.isEmpty()) {
                 if (currentReadClaim == claim) {
-                    if (currentReadClaimStream != null && currentReadClaimStream.getBytesConsumed() <= offset) {
-                        final long bytesToSkip = offset - currentReadClaimStream.getBytesConsumed();
+                    if (currentReadClaimStream != null && currentReadClaimStream.getCurrentOffset() <= offset) {
+                        final long bytesToSkip = offset - currentReadClaimStream.getCurrentOffset();
                         if (bytesToSkip > 0) {
                             StreamUtils.skip(currentReadClaimStream, bytesToSkip);
                         }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/queue/clustered/LoadBalancedQueueIT.java
Patch:
@@ -307,7 +307,7 @@ public void testNewNodeAdded() throws IOException, InterruptedException {
         }
     }
 
-    @Test(timeout = 60_000)
+    @Test(timeout = 90_000)
     public void testFailover() throws IOException, InterruptedException {
         localNodeId = new NodeIdentifier("unit-test-local", "localhost", 7090, "localhost", 7090, "localhost", 7090, null, null, null, false, null);
         nodeIdentifiers.add(localNodeId);
@@ -371,7 +371,7 @@ public void testFailover() throws IOException, InterruptedException {
                 final int expectedFlowFileReceiveCount = flowFilesPerNode + flowFilesPerNode / 2;
 
                 // Wait up to 10 seconds for the server's FlowFile Repository to be updated
-                final long endTime = System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(30L);
+                final long endTime = System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(60L);
                 while (serverRepoRecords.size() < expectedFlowFileReceiveCount && System.currentTimeMillis() < endTime) {
                     Thread.sleep(10L);
                 }

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/MergeRecord.java
Patch:
@@ -314,7 +314,7 @@ public void onTrigger(final ProcessContext context, final ProcessSessionFactory
 
         final String mergeStrategy = context.getProperty(MERGE_STRATEGY).getValue();
         final boolean block;
-        if (MERGE_STRATEGY_DEFRAGMENT.equals(mergeStrategy)) {
+        if (MERGE_STRATEGY_DEFRAGMENT.getValue().equals(mergeStrategy)) {
             block = true;
         } else if (context.getProperty(CORRELATION_ATTRIBUTE_NAME).isSet()) {
             block = true;
@@ -378,12 +378,12 @@ private void binFlowFile(final ProcessContext context, final FlowFile flowFile,
 
     protected String getGroupId(final ProcessContext context, final FlowFile flowFile, final RecordSchema schema, final ProcessSession session) {
         final String mergeStrategy = context.getProperty(MERGE_STRATEGY).getValue();
-        if (MERGE_STRATEGY_DEFRAGMENT.equals(mergeStrategy)) {
+        if (MERGE_STRATEGY_DEFRAGMENT.getValue().equals(mergeStrategy)) {
             return flowFile.getAttribute(FRAGMENT_ID_ATTRIBUTE);
         }
 
         final Optional<String> optionalText = schema.getSchemaText();
-        final String schemaText = optionalText.isPresent() ? optionalText.get() : AvroTypeUtil.extractAvroSchema(schema).toString();
+        final String schemaText = optionalText.orElseGet(() -> AvroTypeUtil.extractAvroSchema(schema).toString());
 
         final String groupId;
         final String correlationshipAttributeName = context.getProperty(CORRELATION_ATTRIBUTE_NAME).getValue();

File: nifi-nar-bundles/nifi-hive-bundle/nifi-hive-processors/src/main/java/org/apache/hadoop/hive/ql/io/orc/NiFiOrcUtils.java
Patch:
@@ -244,6 +244,7 @@ public static TypeInfo getOrcField(Schema fieldSchema) throws IllegalArgumentExc
             case DOUBLE:
             case FLOAT:
             case STRING:
+            case NULL:
                 return getPrimitiveOrcTypeFromPrimitiveAvroType(fieldType);
 
             case UNION:
@@ -335,6 +336,7 @@ public static TypeInfo getPrimitiveOrcTypeFromPrimitiveAvroType(Schema.Type avro
             case LONG:
                 return TypeInfoFactory.getPrimitiveTypeInfo("bigint");
             case BOOLEAN:
+            case NULL: // ORC has no null type, so just pick the smallest. All values are necessarily null.
                 return TypeInfoFactory.getPrimitiveTypeInfo("boolean");
             case BYTES:
                 return TypeInfoFactory.getPrimitiveTypeInfo("binary");
@@ -362,6 +364,7 @@ public static String getHiveTypeFromAvroType(Schema avroSchema) {
             case LONG:
                 return "BIGINT";
             case BOOLEAN:
+            case NULL: // Hive has no null type, we picked boolean as the ORC type so use it for Hive DDL too. All values are necessarily null.
                 return "BOOLEAN";
             case BYTES:
                 return "BINARY";

File: nifi-nar-bundles/nifi-hive-bundle/nifi-hive-processors/src/main/java/org/apache/nifi/processors/hive/ConvertAvroToORC.java
Patch:
@@ -283,8 +283,8 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
             session.transfer(flowFile, REL_SUCCESS);
             session.getProvenanceReporter().modifyContent(flowFile, "Converted "+totalRecordCount.get()+" records", System.currentTimeMillis() - startTime);
 
-        } catch (final ProcessException pe) {
-            getLogger().error("Failed to convert {} from Avro to ORC due to {}; transferring to failure", new Object[]{flowFile, pe});
+        } catch (ProcessException | IllegalArgumentException e) {
+            getLogger().error("Failed to convert {} from Avro to ORC due to {}; transferring to failure", new Object[]{flowFile, e});
             session.transfer(flowFile, REL_FAILURE);
         }
     }

File: nifi-nar-bundles/nifi-mongodb-bundle/nifi-mongodb-services/src/main/java/org/apache/nifi/mongodb/MongoDBControllerService.java
Patch:
@@ -40,8 +40,8 @@
 
 @Tags({"mongo", "mongodb", "service"})
 @CapabilityDescription(
-    "Provides a controller service that configures a connection to MongoDB and provides access to that connection to " +
-    "other Mongo-related components."
+        "Provides a controller service that configures a connection to MongoDB and provides access to that connection to " +
+                "other Mongo-related components."
 )
 public class MongoDBControllerService extends AbstractControllerService implements MongoDBClientService {
     private String uri;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/queryrecord/FlowFileTableScan.java
Patch:
@@ -68,7 +68,7 @@ public RelWriter explainTerms(final RelWriter pw) {
     @Override
     public RelDataType deriveRowType() {
         final List<RelDataTypeField> fieldList = table.getRowType().getFieldList();
-        final RelDataTypeFactory.FieldInfoBuilder builder = getCluster().getTypeFactory().builder();
+        final RelDataTypeFactory.Builder builder = getCluster().getTypeFactory().builder();
         for (int field : fields) {
             builder.add(fieldList.get(field));
         }

File: nifi-commons/nifi-record/src/main/java/org/apache/nifi/serialization/SimpleRecordSchema.java
Patch:
@@ -43,11 +43,11 @@ public class SimpleRecordSchema implements RecordSchema {
     private volatile int hashCode;
 
     public SimpleRecordSchema(final List<RecordField> fields) {
-        this(fields, createText(fields), null, false, SchemaIdentifier.EMPTY);
+        this(fields, null, null, false, SchemaIdentifier.EMPTY);
     }
 
     public SimpleRecordSchema(final List<RecordField> fields, final SchemaIdentifier id) {
-        this(fields, createText(fields), null, false, id);
+        this(fields, null, null, false, id);
     }
 
     public SimpleRecordSchema(final String text, final String schemaFormat, final SchemaIdentifier id) {

File: nifi-commons/nifi-record/src/main/java/org/apache/nifi/serialization/WriteResult.java
Patch:
@@ -51,7 +51,7 @@ public interface WriteResult {
      * @param attributes the attributes to add to the FlowFile
      * @return A {@link WriteResult} representing the given parameters
      */
-    public static WriteResult of(final int recordCount, final Map<String, String> attributes) {
+    static WriteResult of(final int recordCount, final Map<String, String> attributes) {
         return new WriteResult() {
             @Override
             public int getRecordCount() {
@@ -65,5 +65,5 @@ public Map<String, String> getAttributes() {
         };
     }
 
-    public static final WriteResult EMPTY = of(0, Collections.emptyMap());
+    WriteResult EMPTY = of(0, Collections.emptyMap());
 }

File: nifi-commons/nifi-record/src/main/java/org/apache/nifi/serialization/record/RecordField.java
Patch:
@@ -71,7 +71,7 @@ public RecordField(final String fieldName, final DataType dataType, final Object
 
         // If aliases is the empty set, don't bother with the expense of wrapping in an unmodifiableSet.
         Objects.requireNonNull(aliases);
-        if ((Set<?>) aliases == Collections.EMPTY_SET) {
+        if (aliases == Collections.EMPTY_SET) {
             this.aliases = aliases;
         } else {
             this.aliases = Collections.unmodifiableSet(aliases);

File: nifi-commons/nifi-record/src/main/java/org/apache/nifi/serialization/record/type/ArrayDataType.java
Patch:
@@ -57,7 +57,7 @@ public boolean equals(final Object obj) {
         }
 
         final ArrayDataType other = (ArrayDataType) obj;
-        return getFieldType().equals(other.getFieldType()) && Objects.equals(elementType, other.elementType);
+        return Objects.equals(elementType, other.elementType);
     }
 
     @Override

File: nifi-commons/nifi-record/src/main/java/org/apache/nifi/serialization/record/type/MapDataType.java
Patch:
@@ -57,11 +57,11 @@ public boolean equals(final Object obj) {
         }
 
         final MapDataType other = (MapDataType) obj;
-        return getValueType().equals(other.getValueType()) && Objects.equals(valueType, other.valueType);
+        return Objects.equals(valueType, other.valueType);
     }
 
     @Override
     public String toString() {
-        return "MAP[" + valueType + "]";
+        return "MAP<" + valueType + ">";
     }
 }

File: nifi-commons/nifi-record/src/main/java/org/apache/nifi/serialization/record/type/RecordDataType.java
Patch:
@@ -58,7 +58,7 @@ public boolean equals(final Object obj) {
         }
 
         final RecordDataType other = (RecordDataType) obj;
-        return getFieldType().equals(other.getFieldType()) && Objects.equals(childSchema, other.childSchema);
+        return Objects.equals(childSchema, other.childSchema);
     }
 
     @Override

File: nifi-nar-bundles/nifi-extension-utils/nifi-record-utils/nifi-avro-record-utils/src/main/java/org/apache/nifi/serialization/JsonInferenceSchemaRegistryService.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.nifi.components.AllowableValue;
 import org.apache.nifi.components.PropertyDescriptor;
 import org.apache.nifi.components.PropertyValue;
+import org.apache.nifi.context.PropertyContext;
 import org.apache.nifi.controller.ConfigurationContext;
 import org.apache.nifi.schema.access.AvroSchemaTextStrategy;
 import org.apache.nifi.schema.access.InferenceSchemaStrategy;
@@ -60,7 +61,7 @@ protected AllowableValue getDefaultSchemaAccessStrategy() {
     }
 
     @Override
-    protected SchemaAccessStrategy getSchemaAccessStrategy(final String strategy, final SchemaRegistry schemaRegistry, final ConfigurationContext context) {
+    protected SchemaAccessStrategy getSchemaAccessStrategy(final String strategy, final SchemaRegistry schemaRegistry, final PropertyContext context) {
         if (strategy == null) {
             return null;
         }
@@ -102,7 +103,7 @@ public RecordSchema getSchema(Map<String, String> variables, Map<String, Object>
         if (schemaAccess.equalsIgnoreCase(SCHEMA_NAME_PROPERTY.getValue()) || schemaAccess.equalsIgnoreCase(SCHEMA_TEXT_PROPERTY.getValue())) {
             return getSchema(variables, readSchema);
         } else {
-            return ((JsonSchemaAccessStrategy)schemaAccessStrategy).getSchema(variables, content, readSchema);
+            return ((JsonSchemaAccessStrategy) schemaAccessStrategy).getSchema(variables, content, readSchema);
         }
     }
 }

File: nifi-nar-bundles/nifi-extension-utils/nifi-record-utils/nifi-standard-record-utils/src/main/java/org/apache/nifi/record/listen/SSLSocketChannelRecordReader.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.nifi.serialization.RecordReader;
 import org.apache.nifi.serialization.RecordReaderFactory;
 
+import java.io.BufferedInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.InetAddress;
@@ -58,7 +59,8 @@ public RecordReader createRecordReader(final FlowFile flowFile, final ComponentL
             throw new IllegalStateException("Cannot create RecordReader because already created");
         }
 
-        final InputStream in = new SSLSocketChannelInputStream(sslSocketChannel);
+        final InputStream socketIn = new SSLSocketChannelInputStream(sslSocketChannel);
+        final InputStream in = new BufferedInputStream(socketIn);
         recordReader = readerFactory.createRecordReader(flowFile, in, logger);
         return recordReader;
     }

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-2-0-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/PublishKafkaRecord_2_0.java
Patch:
@@ -49,7 +49,6 @@
 import org.apache.nifi.serialization.record.RecordSchema;
 import org.apache.nifi.serialization.record.RecordSet;
 
-import java.io.BufferedInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.nio.charset.Charset;
@@ -404,8 +403,8 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
                 try {
                     session.read(flowFile, new InputStreamCallback() {
                         @Override
-                        public void process(final InputStream rawIn) throws IOException {
-                            try (final InputStream in = new BufferedInputStream(rawIn)) {
+                        public void process(final InputStream in) throws IOException {
+                            try {
                                 final RecordReader reader = readerFactory.createRecordReader(flowFile, in, getLogger());
                                 final RecordSet recordSet = reader.createRecordSet();
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ConvertRecord.java
Patch:
@@ -30,7 +30,6 @@
 import org.apache.nifi.flowfile.FlowFile;
 import org.apache.nifi.processor.ProcessContext;
 import org.apache.nifi.serialization.record.Record;
-import org.apache.nifi.serialization.record.RecordSchema;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -60,7 +59,7 @@ protected List<PropertyDescriptor> getSupportedPropertyDescriptors() {
     }
 
     @Override
-    protected Record process(final Record record, final RecordSchema writeSchema, final FlowFile flowFile, final ProcessContext context) {
+    protected Record process(final Record record, final FlowFile flowFile, final ProcessContext context) {
         return record;
     }
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/queryrecord/FlowFileEnumerator.java
Patch:
@@ -28,7 +28,7 @@
 
 import java.io.InputStream;
 
-public class FlowFileEnumerator<InternalType> implements Enumerator<Object> {
+public class FlowFileEnumerator implements Enumerator<Object> {
     private final ProcessSession session;
     private final FlowFile flowFile;
     private final ComponentLog logger;

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/xml/XMLRecordSetWriter.java
Patch:
@@ -166,7 +166,6 @@ protected Collection<ValidationResult> customValidate(final ValidationContext va
 
     @Override
     public RecordSetWriter createWriter(final ComponentLog logger, final RecordSchema schema, final OutputStream out) throws SchemaNotFoundException, IOException {
-
         final String nullSuppression = getConfigurationContext().getProperty(SUPPRESS_NULLS).getValue();
         final NullSuppression nullSuppressionEnum;
         if (nullSuppression.equals(ALWAYS_SUPPRESS.getValue())) {
@@ -203,7 +202,7 @@ public RecordSetWriter createWriter(final ComponentLog logger, final RecordSchem
 
         final String charSet = getConfigurationContext().getProperty(CHARACTER_SET).getValue();
 
-        return new WriteXMLResult(logger, schema, getSchemaAccessWriter(schema),
+        return new WriteXMLResult(schema, getSchemaAccessWriter(schema),
                 out, prettyPrint, nullSuppressionEnum, arrayWrappingEnum, arrayTagName, rootTagName, recordTagName, charSet,
                 getDateFormat().orElse(null), getTimeFormat().orElse(null), getTimestampFormat().orElse(null));
     }

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/test/java/org/apache/nifi/csv/TestCSVRecordReader.java
Patch:
@@ -437,7 +437,7 @@ public void testReadRawWithDifferentFieldName() throws IOException, MalformedRec
         try (final InputStream bais = new ByteArrayInputStream(inputData);
             final CSVRecordReader reader = createReader(bais, schema, format)) {
 
-            final Record record = reader.nextRecord();
+            final Record record = reader.nextRecord(true, true);
             assertNotNull(record);
 
             assertEquals("1", record.getValue("id"));

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/test/java/org/apache/nifi/csv/TestJacksonCSVRecordReader.java
Patch:
@@ -235,7 +235,7 @@ public void testReadRawWithDifferentFieldName() throws IOException, MalformedRec
         try (final InputStream bais = new ByteArrayInputStream(inputData);
             final JacksonCSVRecordReader reader = createReader(bais, schema, format)) {
 
-            final Record record = reader.nextRecord();
+            final Record record = reader.nextRecord(true, true);
             assertNotNull(record);
 
             assertEquals("1", record.getValue("id"));

File: nifi-commons/nifi-security-utils/src/test/java/org/apache/nifi/security/krb/KerberosUserIT.java
Patch:
@@ -29,7 +29,7 @@
 import javax.security.auth.login.LoginException;
 import java.io.File;
 import java.security.Principal;
-import java.security.PrivilegedAction;
+import java.security.PrivilegedExceptionAction;
 import java.util.Set;
 import java.util.concurrent.atomic.AtomicReference;
 
@@ -174,7 +174,7 @@ public void testKeytabAction() {
         final KerberosUser user1 = new KerberosKeytabUser(principal1.getName(), principal1KeytabFile.getAbsolutePath());
 
         final AtomicReference<String> resultHolder = new AtomicReference<>(null);
-        final PrivilegedAction privilegedAction = () -> {
+        final PrivilegedExceptionAction<Void> privilegedAction = () -> {
             resultHolder.set("SUCCESS");
             return null;
         };
@@ -183,7 +183,7 @@ public void testKeytabAction() {
         final ComponentLog logger = Mockito.mock(ComponentLog.class);
 
         // create the action to test and execute it
-        final KerberosAction kerberosAction = new KerberosAction(user1, privilegedAction, context, logger);
+        final KerberosAction kerberosAction = new KerberosAction<>(user1, privilegedAction, logger);
         kerberosAction.execute();
 
         // if the result holder has the string success then we know the action executed

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/headers/ContentSecurityPolicyFilter.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.web.security;
+package org.apache.nifi.web.security.headers;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -28,7 +28,7 @@
 import javax.servlet.FilterConfig;
 
 /**
- * A filter to apply the Content Security Policy (which supersedes the X-Frame-Options header).
+ * A filter to apply the Content Security Policy header.
  *
  */
 public class ContentSecurityPolicyFilter implements Filter {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/VersionsResource.java
Patch:
@@ -820,7 +820,7 @@ public Response updateFlowVersion(@ApiParam("The process group id.") @PathParam(
                 versionControlInfoDto.setState(flowState.name());
 
                 final ProcessGroupEntity updatedGroup = serviceFacade.updateProcessGroupContents(rev, groupId, versionControlInfoDto, flowSnapshot, getIdGenerationSeed().orElse(null), false,
-                    true, entity.getUpdateDescendantVersionedFlows());
+                    false, entity.getUpdateDescendantVersionedFlows());
                 final VersionControlInformationDTO updatedVci = updatedGroup.getComponent().getVersionControlInformation();
 
                 final VersionControlInformationEntity responseEntity = new VersionControlInformationEntity();

File: nifi-nar-bundles/nifi-hive-bundle/nifi-hive-processors/src/main/java/org/apache/nifi/processors/hive/PutHiveQL.java
Patch:
@@ -278,6 +278,9 @@ private OnError<FunctionContext, FlowFile> onFlowFileError(final ProcessContext
                     getLogger().error("Failed to update Hive for {} due to {}; it is possible that retrying the operation will succeed, so routing to retry",
                             new Object[] {i, e}, e);
                     break;
+                case Self:
+                    getLogger().error("Failed to update Hive for {} due to {};", new Object[] {i, e}, e);
+                    break;
             }
         });
         return RollbackOnFailure.createOnError(onFlowFileError);

File: nifi-nar-bundles/nifi-hive-bundle/nifi-hive-processors/src/main/java/org/apache/nifi/processors/hive/PutHiveStreaming.java
Patch:
@@ -631,6 +631,7 @@ private ExceptionHandler.OnError<FunctionContext, List<HiveStreamingRecord>> onH
                     throw new ShouldRetryException("Hive Streaming connect/write error, flow file will be penalized and routed to retry. " + e, e);
 
                 case Self:
+                    getLogger().error(String.format("Error writing %s to Hive Streaming transaction due to %s", input, e), e);
                     abortAndCloseWriters(writers);
                     break;
 

File: nifi-nar-bundles/nifi-hive-bundle/nifi-hive3-processors/src/main/java/org/apache/nifi/processors/hive/PutHive3QL.java
Patch:
@@ -281,6 +281,9 @@ private OnError<FunctionContext, FlowFile> onFlowFileError(final ProcessContext
                     getLogger().error("Failed to update Hive for {} due to {}; it is possible that retrying the operation will succeed, so routing to retry",
                             new Object[] {i, e}, e);
                     break;
+                case Self:
+                    getLogger().error("Failed to update Hive for {} due to {};", new Object[] {i, e}, e);
+                    break;
             }
         });
         return RollbackOnFailure.createOnError(onFlowFileError);

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/PutSQL.java
Patch:
@@ -452,6 +452,9 @@ private ExceptionHandler.OnError<FunctionContext, FlowFile> onFlowFileError(fina
                     getLogger().error("Failed to update database for {} due to {}; it is possible that retrying the operation will succeed, so routing to retry",
                             new Object[] {i, e}, e);
                     break;
+                case Self:
+                    getLogger().error("Failed to update database for {} due to {};", new Object[] {i, e}, e);
+                    break;
             }
         });
         return RollbackOnFailure.createOnError(onFlowFileError);

File: nifi-commons/nifi-security-utils/src/test/java/org/apache/nifi/security/krb/TestKeytabConfiguration.java
Patch:
@@ -39,7 +39,7 @@ public void testCreatingKeytabConfiguration() {
         assertEquals(1, entries.length);
 
         final AppConfigurationEntry entry = entries[0];
-        assertEquals(KeytabConfiguration.SUN_KRB5_LOGIN_MODULE, entry.getLoginModuleName());
+        assertEquals(ConfigurationUtil.SUN_KRB5_LOGIN_MODULE, entry.getLoginModuleName());
         assertEquals(principal, entry.getOptions().get("principal"));
         assertEquals(keytab, entry.getOptions().get("keyTab"));
     }

File: nifi-nar-bundles/nifi-hive-bundle/nifi-hive3-processors/src/main/java/org/apache/nifi/processors/hive/PutHive3Streaming.java
Patch:
@@ -17,11 +17,9 @@
 package org.apache.nifi.processors.hive;
 
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
-import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.hive.conf.HiveConf;
 import org.apache.hadoop.hive.metastore.conf.MetastoreConf;
 import org.apache.hadoop.security.UserGroupInformation;
-import org.apache.hive.common.util.ShutdownHookManager;
 import org.apache.hive.streaming.ConnectionError;
 import org.apache.hive.streaming.HiveStreamingConnection;
 import org.apache.hive.streaming.InvalidTable;

File: nifi-nar-bundles/nifi-hive-bundle/nifi-hive3-processors/src/main/java/org/apache/nifi/processors/hive/PutHive3Streaming.java
Patch:
@@ -412,9 +412,6 @@ public void onTrigger(ProcessContext context, ProcessSession session) throws Pro
                 }
 
                 hiveStreamingConnection = makeStreamingConnection(options, reader);
-                // Add shutdown handler with higher priority than FileSystem shutdown hook so that streaming connection gets closed first before
-                // filesystem close (to avoid ClosedChannelException)
-                ShutdownHookManager.addShutdownHook(hiveStreamingConnection::close, FileSystem.SHUTDOWN_HOOK_PRIORITY + 1);
 
                 // Write records to Hive streaming, then commit and close
                 hiveStreamingConnection.beginTransaction();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/repository/StandardProcessSession.java
Patch:
@@ -2267,7 +2267,9 @@ public InputStream read(FlowFile source) {
         final StandardRepositoryRecord record = getRecord(source);
 
         try {
-            ensureNotAppending(record.getCurrentClaim());
+            final ContentClaim currentClaim = record.getCurrentClaim();
+            ensureNotAppending(currentClaim);
+            claimCache.flush(currentClaim);
         } catch (final IOException e) {
             throw new FlowFileAccessException("Failed to access ContentClaim for " + source.toString(), e);
         }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-content-viewer/src/main/java/org/apache/nifi/web/ContentViewerController.java
Patch:
@@ -57,6 +57,7 @@ public class ContentViewerController extends HttpServlet {
 
     private static final String PROXY_CONTEXT_PATH_HTTP_HEADER = "X-ProxyContextPath";
     private static final String FORWARDED_CONTEXT_HTTP_HEADER = "X-Forwarded-Context";
+    private static final String FORWARDED_PREFIX_HTTP_HEADER = "X-Forwarded-Prefix";
 
   /**
      * Gets the content and defers to registered viewers to generate the markup.
@@ -311,7 +312,7 @@ private ContentRequestContext getContentRequest(final HttpServletRequest request
         refUriBuilder.scheme(request.getScheme());
 
         // If there is path context from a proxy, remove it since this request will be used inside the cluster
-        final String proxyContextPath = getFirstHeaderValue(request, PROXY_CONTEXT_PATH_HTTP_HEADER, FORWARDED_CONTEXT_HTTP_HEADER);
+        final String proxyContextPath = getFirstHeaderValue(request, PROXY_CONTEXT_PATH_HTTP_HEADER, FORWARDED_CONTEXT_HTTP_HEADER, FORWARDED_PREFIX_HTTP_HEADER);
         if (StringUtils.isNotBlank(proxyContextPath)) {
             refUriBuilder.replacePath(StringUtils.substringAfter(UriBuilder.fromUri(ref).build().getPath(), proxyContextPath));
         }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-documentation/src/main/java/org/apache/nifi/documentation/DocGenerator.java
Patch:
@@ -142,7 +142,7 @@ private static void document(final ExtensionManager extensionManager,
      * that specific type of class
      */
     private static DocumentationWriter getDocumentWriter(final ExtensionManager extensionManager,
-                                                         final Class<? extends ConfigurableComponent> componentClass) {
+                                                                  final Class<? extends ConfigurableComponent> componentClass) {
         if (Processor.class.isAssignableFrom(componentClass)) {
             return new HtmlProcessorDocumentationWriter(extensionManager);
         } else if (ControllerService.class.isAssignableFrom(componentClass)) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-documentation/src/test/java/org/apache/nifi/documentation/html/HtmlDocumentationWriterTest.java
Patch:
@@ -16,8 +16,8 @@
  */
 package org.apache.nifi.documentation.html;
 
-import org.apache.nifi.annotation.behavior.SystemResourceConsideration;
 import org.apache.nifi.annotation.behavior.SystemResource;
+import org.apache.nifi.annotation.behavior.SystemResourceConsideration;
 import org.apache.nifi.controller.ControllerService;
 import org.apache.nifi.documentation.DocumentationWriter;
 import org.apache.nifi.documentation.example.ControllerServiceWithLogger;

File: nifi-nar-bundles/nifi-mongodb-bundle/nifi-mongodb-processors/src/main/java/org/apache/nifi/processors/mongodb/AbstractMongoProcessor.java
Patch:
@@ -29,7 +29,6 @@
 import org.apache.commons.lang3.StringUtils;
 import org.apache.nifi.annotation.lifecycle.OnScheduled;
 import org.apache.nifi.annotation.lifecycle.OnStopped;
-import org.apache.nifi.authentication.exception.ProviderCreationException;
 import org.apache.nifi.components.AllowableValue;
 import org.apache.nifi.components.PropertyDescriptor;
 import org.apache.nifi.components.ValidationContext;
@@ -254,7 +253,7 @@ public final void createClient(ProcessContext context) throws IOException {
                 try {
                     clientAuth = SSLContextService.ClientAuth.valueOf(rawClientAuth);
                 } catch (final IllegalArgumentException iae) {
-                    throw new ProviderCreationException(String.format("Unrecognized client auth '%s'. Possible values are [%s]",
+                    throw new IllegalStateException(String.format("Unrecognized client auth '%s'. Possible values are [%s]",
                             rawClientAuth, StringUtils.join(SslContextFactory.ClientAuth.values(), ", ")));
                 }
             }

File: nifi-nar-bundles/nifi-mongodb-bundle/nifi-mongodb-services/src/main/java/org/apache/nifi/mongodb/MongoDBControllerService.java
Patch:
@@ -28,7 +28,6 @@
 import org.apache.nifi.annotation.lifecycle.OnDisabled;
 import org.apache.nifi.annotation.lifecycle.OnEnabled;
 import org.apache.nifi.annotation.lifecycle.OnStopped;
-import org.apache.nifi.authentication.exception.ProviderCreationException;
 import org.apache.nifi.components.PropertyDescriptor;
 import org.apache.nifi.controller.AbstractControllerService;
 import org.apache.nifi.controller.ConfigurationContext;
@@ -83,7 +82,7 @@ protected final void createClient(ConfigurationContext context) {
                 try {
                     clientAuth = SSLContextService.ClientAuth.valueOf(rawClientAuth);
                 } catch (final IllegalArgumentException iae) {
-                    throw new ProviderCreationException(String.format("Unrecognized client auth '%s'. Possible values are [%s]",
+                    throw new IllegalStateException(String.format("Unrecognized client auth '%s'. Possible values are [%s]",
                             rawClientAuth, StringUtils.join(SslContextFactory.ClientAuth.values(), ", ")));
                 }
             }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/queue/AbstractFlowFileQueue.java
Patch:
@@ -190,7 +190,6 @@ public ListFlowFileStatus listFlowFiles(final String requestIdentifier, final in
             @Override
             public void run() {
                 int position = 0;
-                int resultCount = 0;
                 final List<FlowFileSummary> summaries = new ArrayList<>();
 
                 // Create an ArrayList that contains all of the contents of the active queue.
@@ -216,7 +215,7 @@ public void run() {
                     }
                 }
 
-                logger.debug("{} Finished listing FlowFiles for active queue with a total of {} results", this, resultCount);
+                logger.debug("{} Finished listing FlowFiles for active queue with a total of {} results out of {} FlowFiles", this, summaries.size(), allFlowFiles.size());
                 listRequest.setFlowFileSummaries(summaries);
                 listRequest.setState(ListFlowFileState.COMPLETE);
             }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/java/org/apache/nifi/web/filter/LogoutFilter.java
Patch:
@@ -50,7 +50,7 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha
             final ServletContext apiContext = servletContext.getContext("/nifi-api");
             apiContext.getRequestDispatcher("/access/knox/logout").forward(request, response);
         } else {
-            ((HttpServletResponse) response).sendRedirect("../login");
+            ((HttpServletResponse) response).sendRedirect("login");
         }
     }
 

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/script/ScriptingComponentHelper.java
Patch:
@@ -127,8 +127,8 @@ public Collection<ValidationResult> customValidate(ValidationContext validationC
         // Verify that exactly one of "script file" or "script body" is set
         Map<PropertyDescriptor, String> propertyMap = validationContext.getProperties();
         if (StringUtils.isEmpty(propertyMap.get(ScriptingComponentUtils.SCRIPT_FILE)) == StringUtils.isEmpty(propertyMap.get(ScriptingComponentUtils.SCRIPT_BODY))) {
-            results.add(new ValidationResult.Builder().valid(false).explanation(
-                    "Exactly one of Script File or Script Body must be set").build());
+            results.add(new ValidationResult.Builder().subject("Script Body or Script File").valid(false).explanation(
+                    "exactly one of Script File or Script Body must be set").build());
         }
 
         return results;

File: nifi-nar-bundles/nifi-enrich-bundle/nifi-enrich-processors/src/main/java/org/apache/nifi/processors/ISPEnrichIP.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.nifi.processors;
 
-import com.maxmind.geoip2.exception.GeoIp2Exception;
 import com.maxmind.geoip2.model.IspResponse;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.nifi.annotation.behavior.EventDriven;
@@ -94,7 +93,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
         try {
             response = dbReader.isp(inetAddress);
             stopWatch.stop();
-        } catch (final IOException | GeoIp2Exception ex) {
+        } catch (final IOException ex) {
             // Note IOException is captured again as dbReader also makes InetAddress.getByName() calls.
             // Most name or IP resolutions failure should have been triggered in the try loop above but
             // environmental conditions may trigger errors during the second resolution as well.

File: nifi-nar-bundles/nifi-enrich-bundle/nifi-enrich-processors/src/test/java/org/apache/nifi/processors/TestGeoEnrichIP.java
Patch:
@@ -19,7 +19,6 @@
 import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.fasterxml.jackson.databind.InjectableValues;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.maxmind.geoip2.exception.GeoIp2Exception;
 import com.maxmind.geoip2.model.CityResponse;
 import org.apache.nifi.annotation.lifecycle.OnScheduled;
 import org.apache.nifi.flowfile.FlowFile;
@@ -239,11 +238,11 @@ public void shouldFlowToNotFoundWhenIOExceptionThrownFromMaxMind() throws Except
 
     @SuppressWarnings("unchecked")
     @Test
-    public void shouldFlowToNotFoundWhenGeoIp2ExceptionThrownFromMaxMind() throws Exception {
+    public void shouldFlowToNotFoundWhenExceptionThrownFromMaxMind() throws Exception {
         testRunner.setProperty(GeoEnrichIP.GEO_DATABASE_FILE, "./");
         testRunner.setProperty(GeoEnrichIP.IP_ADDRESS_ATTRIBUTE, "ip");
 
-        when(databaseReader.city(InetAddress.getByName("1.2.3.4"))).thenThrow(GeoIp2Exception.class);
+        when(databaseReader.city(InetAddress.getByName("1.2.3.4"))).thenThrow(IOException.class);
 
         final Map<String, String> attributes = new HashMap<>();
         attributes.put("ip", "1.2.3.4");

File: nifi-nar-bundles/nifi-enrich-bundle/nifi-enrich-processors/src/test/java/org/apache/nifi/processors/TestISPEnrichIP.java
Patch:
@@ -19,7 +19,6 @@
 import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.fasterxml.jackson.databind.InjectableValues;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.maxmind.geoip2.exception.GeoIp2Exception;
 import com.maxmind.geoip2.model.IspResponse;
 import org.apache.nifi.annotation.lifecycle.OnScheduled;
 import org.apache.nifi.flowfile.FlowFile;
@@ -224,11 +223,11 @@ public void shouldFlowToNotFoundWhenIOExceptionThrownFromMaxMind() throws Except
 
     @SuppressWarnings("unchecked")
     @Test
-    public void shouldFlowToNotFoundWhenGeoIp2ExceptionThrownFromMaxMind() throws Exception {
+    public void shouldFlowToNotFoundWhenExceptionThrownFromMaxMind() throws Exception {
         testRunner.setProperty(ISPEnrichIP.GEO_DATABASE_FILE, "./");
         testRunner.setProperty(ISPEnrichIP.IP_ADDRESS_ATTRIBUTE, "ip");
 
-        when(databaseReader.isp(InetAddress.getByName("1.2.3.4"))).thenThrow(GeoIp2Exception.class);
+        when(databaseReader.isp(InetAddress.getByName("1.2.3.4"))).thenThrow(IOException.class);
 
         final Map<String, String> attributes = new HashMap<>();
         attributes.put("ip", "1.2.3.4");

File: nifi-nar-bundles/nifi-extension-utils/nifi-record-utils/nifi-avro-record-utils/src/main/java/org/apache/nifi/avro/AvroTypeUtil.java
Patch:
@@ -631,7 +631,9 @@ private static Object convertToAvroObject(final Object rawValue, final Schema fi
                     final int desiredScale = decimalType.getScale();
                     final BigDecimal decimal = rawDecimal.scale() == desiredScale
                             ? rawDecimal : rawDecimal.setScale(desiredScale, BigDecimal.ROUND_HALF_UP);
-                    return new Conversions.DecimalConversion().toBytes(decimal, fieldSchema, logicalType);
+                    return fieldSchema.getType() == Type.BYTES
+                        ? new Conversions.DecimalConversion().toBytes(decimal, fieldSchema, logicalType) //return GenericByte
+                        : new Conversions.DecimalConversion().toFixed(decimal, fieldSchema, logicalType); //return GenericFixed
                 }
                 if (rawValue instanceof byte[]) {
                     return ByteBuffer.wrap((byte[]) rawValue);

File: nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-dbcp-service/src/main/java/org/apache/nifi/dbcp/DBCPConnectionPool.java
Patch:
@@ -194,7 +194,7 @@ public ValidationResult validate(final String subject, final String input, final
 
     public static final PropertyDescriptor MIN_IDLE = new PropertyDescriptor.Builder()
             .displayName("Minimum Idle Connections")
-            .name("dbcp-mim-idle-conns")
+            .name("dbcp-min-idle-conns")
             .description("The minimum number of connections that can remain idle in the pool, without extra ones being " +
                     "created, or zero to create none.")
             .defaultValue(DEFAULT_MIN_IDLE)
@@ -438,4 +438,4 @@ public String toString() {
     BasicDataSource getDataSource() {
         return dataSource;
     }
-}
\ No newline at end of file
+}

File: nifi-commons/nifi-record/src/main/java/org/apache/nifi/serialization/record/type/RecordDataType.java
Patch:
@@ -42,7 +42,7 @@ public RecordSchema getChildSchema() {
 
     @Override
     public int hashCode() {
-        return 31 + 41 * getFieldType().hashCode() + 41 * (childSchema == null ? 0 : childSchema.hashCode());
+        return 31 + 41 * getFieldType().hashCode();
     }
 
     @Override

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/FlattenJson.java
Patch:
@@ -162,7 +162,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
             final String flattened = new JsonFlattener(raw)
                     .withFlattenMode(flattenMode)
                     .withSeparator(separator.charAt(0))
-                    .withStringEscapePolicy(() -> StringEscapeUtils.ESCAPE_JAVA)
+                    .withStringEscapePolicy(() -> StringEscapeUtils.ESCAPE_JSON)
                     .flatten();
 
             flowFile = session.write(flowFile, os -> os.write(flattened.getBytes()));

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/repository/metrics/EventSumValue.java
Patch:
@@ -180,7 +180,7 @@ public synchronized void subtract(final EventSumValue other) {
                     final String counterName = entry.getKey();
                     final Long counterValue = entry.getValue();
 
-                    counters.compute(counterName, (key, value) -> value == null ? counterValue : counterValue - value);
+                    counters.compute(counterName, (key, value) -> value == null ? -counterValue : value - counterValue);
                 }
             }
         }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/util/ComponentMetrics.java
Patch:
@@ -21,11 +21,11 @@
 import org.apache.nifi.controller.status.ProcessorStatus;
 import org.apache.nifi.controller.status.RemoteProcessGroupStatus;
 import org.apache.nifi.controller.status.history.ConnectionStatusDescriptor;
+import org.apache.nifi.controller.status.history.CounterMetricDescriptor;
 import org.apache.nifi.controller.status.history.MetricDescriptor;
 import org.apache.nifi.controller.status.history.ProcessGroupStatusDescriptor;
 import org.apache.nifi.controller.status.history.ProcessorStatusDescriptor;
 import org.apache.nifi.controller.status.history.RemoteProcessGroupStatusDescriptor;
-import org.apache.nifi.controller.status.history.StandardMetricDescriptor;
 import org.apache.nifi.controller.status.history.StandardStatusSnapshot;
 import org.apache.nifi.controller.status.history.StatusSnapshot;
 
@@ -84,7 +84,7 @@ public static StatusSnapshot createSnapshot(final ProcessorStatus status, final
                 final String counterName = entry.getKey();
 
                 final String label = entry.getKey() + " (5 mins)";
-                final MetricDescriptor<ProcessorStatus> metricDescriptor = new StandardMetricDescriptor<>(() -> 0, entry.getKey(), label, label, MetricDescriptor.Formatter.COUNT,
+                final MetricDescriptor<ProcessorStatus> metricDescriptor = new CounterMetricDescriptor<>(entry.getKey(), label, label, MetricDescriptor.Formatter.COUNT,
                         s -> s.getCounters() == null ? null : s.getCounters().get(counterName));
 
                 snapshot.addCounterStatusMetric(metricDescriptor, entry.getValue());

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-processors/src/main/java/org/apache/nifi/processors/elasticsearch/PutElasticsearchHttpRecord.java
Patch:
@@ -569,7 +569,7 @@ private void writeValue(final JsonGenerator generator, final Object value, final
             default:
                 if (coercedValue instanceof Object[]) {
                     final Object[] values = (Object[]) coercedValue;
-                    final ArrayDataType arrayDataType = (ArrayDataType) dataType;
+                    final ArrayDataType arrayDataType = (ArrayDataType) chosenDataType;
                     final DataType elementType = arrayDataType.getElementType();
                     writeArray(values, fieldName, generator, elementType);
                 } else {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/queue/clustered/client/async/TransactionCompleteCallback.java
Patch:
@@ -17,10 +17,11 @@
 
 package org.apache.nifi.controller.queue.clustered.client.async;
 
+import org.apache.nifi.cluster.protocol.NodeIdentifier;
 import org.apache.nifi.controller.repository.FlowFileRecord;
 
 import java.util.List;
 
 public interface TransactionCompleteCallback {
-    void onTransactionComplete(List<FlowFileRecord> flowFilesSent);
+    void onTransactionComplete(List<FlowFileRecord> flowFilesSent, NodeIdentifier nodeIdentifier);
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/queue/clustered/client/async/nio/NioAsyncLoadBalanceClient.java
Patch:
@@ -256,7 +256,7 @@ public boolean communicate() throws IOException {
             } while (success);
 
             if (loadBalanceSession.isComplete()) {
-                loadBalanceSession.getPartition().getSuccessCallback().onTransactionComplete(loadBalanceSession.getFlowFilesSent());
+                loadBalanceSession.getPartition().getSuccessCallback().onTransactionComplete(loadBalanceSession.getFlowFilesSent(), nodeIdentifier);
             }
 
             return anySuccess;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/queue/clustered/server/ClusterLoadBalanceAuthorizer.java
Patch:
@@ -40,10 +40,10 @@ public ClusterLoadBalanceAuthorizer(final ClusterCoordinator clusterCoordinator,
     }
 
     @Override
-    public void authorize(final Collection<String> clientIdentities) throws NotAuthorizedException {
+    public String authorize(final Collection<String> clientIdentities) throws NotAuthorizedException {
         if (clientIdentities == null) {
             logger.debug("Client Identities is null, so assuming that Load Balancing communications are not secure. Authorizing client to participate in Load Balancing");
-            return;
+            return null;
         }
 
         final Set<String> nodeIds = clusterCoordinator.getNodeIdentifiers().stream()
@@ -53,7 +53,7 @@ public void authorize(final Collection<String> clientIdentities) throws NotAutho
         for (final String clientId : clientIdentities) {
             if (nodeIds.contains(clientId)) {
                 logger.debug("Client ID '{}' is in the list of Nodes in the Cluster. Authorizing Client to Load Balance data", clientId);
-                return;
+                return clientId;
             }
         }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/queue/clustered/LoadBalancedQueueIT.java
Patch:
@@ -101,7 +101,7 @@
 import static org.mockito.Mockito.when;
 
 public class LoadBalancedQueueIT {
-    private final LoadBalanceAuthorizer ALWAYS_AUTHORIZED = nodeIds -> {};
+    private final LoadBalanceAuthorizer ALWAYS_AUTHORIZED = nodeIds -> nodeIds == null ? null : nodeIds.iterator().next();
     private final LoadBalanceAuthorizer NEVER_AUTHORIZED = nodeIds -> {
         throw new NotAuthorizedException("Intentional Unit Test Failure - Not Authorized");
     };
@@ -269,7 +269,7 @@ public void testNewNodeAdded() throws IOException, InterruptedException {
                 }
             }
 
-            final int totalFlowFileCount = 6;
+            final int totalFlowFileCount = 7;
 
             // Wait up to 10 seconds for the server's FlowFile Repository to be updated
             final long endTime = System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(10L);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/queue/clustered/client/async/nio/TestLoadBalanceSession.java
Patch:
@@ -122,7 +122,7 @@ public void testSunnyCase() throws InterruptedException, IOException {
         final FlowFileContentAccess contentAccess = contentMap::get;
 
         final RegisteredPartition partition = new RegisteredPartition("unit-test-connection", () -> false,
-            flowFiles::poll, NOP_FAILURE_CALLBACK, (ff) -> {}, () -> LoadBalanceCompression.DO_NOT_COMPRESS, () -> true);
+            flowFiles::poll, NOP_FAILURE_CALLBACK, (ff, nodeId) -> {}, () -> LoadBalanceCompression.DO_NOT_COMPRESS, () -> true);
 
         final SocketChannel socketChannel = SocketChannel.open(new InetSocketAddress("localhost", port));
 
@@ -209,7 +209,7 @@ public void testLargeContent() throws InterruptedException, IOException {
         final FlowFileContentAccess contentAccess = contentMap::get;
 
         final RegisteredPartition partition = new RegisteredPartition("unit-test-connection", () -> false,
-            flowFiles::poll, NOP_FAILURE_CALLBACK, (ff) -> {}, () -> LoadBalanceCompression.DO_NOT_COMPRESS, () -> true);
+            flowFiles::poll, NOP_FAILURE_CALLBACK, (ff, nodeId) -> {}, () -> LoadBalanceCompression.DO_NOT_COMPRESS, () -> true);
 
         final SocketChannel socketChannel = SocketChannel.open(new InetSocketAddress("localhost", port));
 

File: nifi-nar-bundles/nifi-hive-bundle/nifi-hive-processors/src/main/java/org/apache/nifi/dbcp/hive/HiveConnectionPool.java
Patch:
@@ -306,10 +306,12 @@ public void onConfigured(final ConfigurationContext context) throws Initializati
             }
 
             log.info("Hive Security Enabled, logging in as principal {} with keytab {}", new Object[] {resolvedPrincipal, resolvedKeytab});
+
             try {
                 ugi = hiveConfigurator.authenticate(hiveConfig, resolvedPrincipal, resolvedKeytab);
             } catch (AuthenticationFailedException ae) {
                 log.error(ae.getMessage(), ae);
+                throw new InitializationException(ae);
             }
 
             getLogger().info("Successfully logged in as principal {} with keytab {}", new Object[] {resolvedPrincipal, resolvedKeytab});

File: nifi-nar-bundles/nifi-hive-bundle/nifi-hive3-processors/src/main/java/org/apache/nifi/dbcp/hive/Hive3ConnectionPool.java
Patch:
@@ -304,10 +304,12 @@ public void onConfigured(final ConfigurationContext context) throws Initializati
             }
 
             log.info("Hive Security Enabled, logging in as principal {} with keytab {}", new Object[] {resolvedPrincipal, resolvedKeytab});
+
             try {
                 ugi = hiveConfigurator.authenticate(hiveConfig, resolvedPrincipal, resolvedKeytab);
             } catch (AuthenticationFailedException ae) {
                 log.error(ae.getMessage(), ae);
+                throw new InitializationException(ae);
             }
 
             getLogger().info("Successfully logged in as principal {} with keytab {}", new Object[] {resolvedPrincipal, resolvedKeytab});

File: nifi-nar-bundles/nifi-mqtt-bundle/nifi-mqtt-processors/src/test/java/org/apache/nifi/processors/mqtt/TestConsumeMQTT.java
Patch:
@@ -54,7 +54,7 @@ public UnitTestableConsumeMqtt(){
         }
 
         @Override
-        public IMqttClient getMqttClient(String broker, String clientID, MemoryPersistence persistence) throws MqttException {
+        public IMqttClient createMqttClient(String broker, String clientID, MemoryPersistence persistence) throws MqttException {
             mqttTestClient =  new MqttTestClient(broker, clientID, MqttTestClient.ConnectType.Subscriber);
             return mqttTestClient;
         }

File: nifi-nar-bundles/nifi-mqtt-bundle/nifi-mqtt-processors/src/test/java/org/apache/nifi/processors/mqtt/TestPublishMQTT.java
Patch:
@@ -56,7 +56,7 @@ public UnitTestablePublishMqtt(){
         }
 
         @Override
-        public IMqttClient getMqttClient(String broker, String clientID, MemoryPersistence persistence) throws MqttException {
+        public IMqttClient createMqttClient(String broker, String clientID, MemoryPersistence persistence) throws MqttException {
             mqttTestClient =  new MqttTestClient(broker, clientID, MqttTestClient.ConnectType.Publisher);
             return mqttTestClient;
         }

File: nifi-nar-bundles/nifi-mqtt-bundle/nifi-mqtt-processors/src/test/java/org/apache/nifi/processors/mqtt/integration/TestConsumeMQTT.java
Patch:
@@ -107,7 +107,7 @@ public void testRetainedQoS2() throws Exception {
 
         ConsumeMQTT consumeMQTT = (ConsumeMQTT) testRunner.getProcessor();
         consumeMQTT.onScheduled(testRunner.getProcessContext());
-        reconnect(consumeMQTT);
+        reconnect(consumeMQTT, testRunner.getProcessContext());
 
         Thread.sleep(PUBLISH_WAIT_MS);
 

File: nifi-nar-bundles/nifi-mqtt-bundle/nifi-mqtt-processors/src/test/java/org/apache/nifi/processors/mqtt/integration/TestConsumeMqttSSL.java
Patch:
@@ -122,7 +122,7 @@ public void testRetainedQoS2() throws Exception {
 
         ConsumeMQTT consumeMQTT = (ConsumeMQTT) testRunner.getProcessor();
         consumeMQTT.onScheduled(testRunner.getProcessContext());
-        reconnect(consumeMQTT);
+        reconnect(consumeMQTT, testRunner.getProcessContext());
 
         Thread.sleep(PUBLISH_WAIT_MS);
 

File: nifi-nar-bundles/nifi-mqtt-bundle/nifi-mqtt-processors/src/test/java/org/apache/nifi/processors/mqtt/integration/TestPublishAndSubscribeMqttIntegration.java
Patch:
@@ -128,7 +128,7 @@ private void subscribe() throws IOException, ClassNotFoundException, MqttExcepti
 
         ConsumeMQTT consumeMQTT = (ConsumeMQTT) testSubscribeRunner.getProcessor();
         consumeMQTT.onScheduled(testSubscribeRunner.getProcessContext());
-        reconnect(consumeMQTT);
+        reconnect(consumeMQTT, testSubscribeRunner.getProcessContext());
     }
 
     private void subscribeVerify(){

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/service/StandardControllerServiceProvider.java
Patch:
@@ -157,12 +157,13 @@ public ControllerServiceNode createControllerService(final String type, final St
 
             originalService.initialize(new StandardControllerServiceInitializationContext(id, terminationAwareLogger, this, getStateManager(id), nifiProperties));
 
-            final ValidationContextFactory validationContextFactory = new StandardValidationContextFactory(this, variableRegistry);
+
 
             final LoggableComponent<ControllerService> originalLoggableComponent = new LoggableComponent<>(originalService, bundleCoordinate, terminationAwareLogger);
             final LoggableComponent<ControllerService> proxiedLoggableComponent = new LoggableComponent<>(proxiedService, bundleCoordinate, terminationAwareLogger);
 
             final ComponentVariableRegistry componentVarRegistry = new StandardComponentVariableRegistry(this.variableRegistry);
+            final ValidationContextFactory validationContextFactory = new StandardValidationContextFactory(this, componentVarRegistry);
             final ControllerServiceNode serviceNode = new StandardControllerServiceNode(originalLoggableComponent, proxiedLoggableComponent, invocationHandler,
                 id, validationContextFactory, this, componentVarRegistry, flowController, validationTrigger);
             serviceNode.setName(rawClass.getSimpleName());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/StatusMerger.java
Patch:
@@ -61,6 +61,7 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
+import java.util.Comparator;
 import java.util.Date;
 import java.util.HashMap;
 import java.util.List;
@@ -731,7 +732,7 @@ private static List<GarbageCollectionDiagnosticsDTO> mergeGarbageCollectionDiagn
             gcDiagnosticsDto.setMemoryManagerName(memoryManagerName);
 
             final List<GCDiagnosticsSnapshotDTO> gcDiagnosticsSnapshots = new ArrayList<>(snapshotMap.values());
-            Collections.sort(gcDiagnosticsSnapshots, (a, b) -> a.getTimestamp().compareTo(b.getTimestamp()));
+            gcDiagnosticsSnapshots.sort(Comparator.comparing(GCDiagnosticsSnapshotDTO::getTimestamp).reversed());
 
             gcDiagnosticsDto.setSnapshots(gcDiagnosticsSnapshots);
             gcDiagnosticsDtos.add(gcDiagnosticsDto);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/scheduling/ProcessorLifecycleIT.java
Patch:
@@ -81,9 +81,9 @@
  * Validate Processor's life-cycle operation within the context of
  * {@link FlowController} and {@link StandardProcessScheduler}
  */
-public class TestProcessorLifecycle {
+public class ProcessorLifecycleIT {
 
-    private static final Logger logger = LoggerFactory.getLogger(TestProcessorLifecycle.class);
+    private static final Logger logger = LoggerFactory.getLogger(ProcessorLifecycleIT.class);
     private static final long SHORT_DELAY_TOLERANCE = 10000L;
     private static final long MEDIUM_DELAY_TOLERANCE = 15000L;
     private static final long LONG_DELAY_TOLERANCE = 20000L;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/NodeIdentifier.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.nifi.cluster.protocol;
 
 import org.apache.commons.lang3.StringUtils;
+import org.apache.nifi.util.NiFiProperties;
 
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorType;
@@ -107,7 +108,8 @@ public class NodeIdentifier {
 
     public NodeIdentifier(final String id, final String apiAddress, final int apiPort, final String socketAddress, final int socketPort,
                           final String siteToSiteAddress, final Integer siteToSitePort, final Integer siteToSiteHttpApiPort, final boolean siteToSiteSecure) {
-        this(id, apiAddress, apiPort, socketAddress, socketPort, socketAddress, 6342, siteToSiteAddress, siteToSitePort, siteToSiteHttpApiPort, siteToSiteSecure, null);
+        this(id, apiAddress, apiPort, socketAddress, socketPort, socketAddress, NiFiProperties.DEFAULT_LOAD_BALANCE_PORT, siteToSiteAddress, siteToSitePort, siteToSiteHttpApiPort, siteToSiteSecure,
+                null);
     }
 
     public NodeIdentifier(final String id, final String apiAddress, final int apiPort, final String socketAddress, final int socketPort, final String loadBalanceAddress, final int loadBalancePort,

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/GenerateFlowFile.java
Patch:
@@ -56,7 +56,7 @@
 @Tags({"test", "random", "generate"})
 @InputRequirement(Requirement.INPUT_FORBIDDEN)
 @CapabilityDescription("This processor creates FlowFiles with random data or custom content. GenerateFlowFile is useful" +
-        "for load testing, configuration, and simulation.")
+        " for load testing, configuration, and simulation.")
 @DynamicProperty(name = "Generated FlowFile attribute name", value = "Generated FlowFile attribute value",
         expressionLanguageScope = ExpressionLanguageScope.VARIABLE_REGISTRY,
         description = "Specifies an attribute on generated FlowFiles defined by the Dynamic Property's key and value." +

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/replication/ThreadPoolRequestReplicator.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.nifi.cluster.manager.exception.DisconnectedNodeMutableRequestException;
 import org.apache.nifi.cluster.manager.exception.IllegalClusterStateException;
 import org.apache.nifi.cluster.manager.exception.NoConnectedNodesException;
+import org.apache.nifi.cluster.manager.exception.OffloadedNodeMutableRequestException;
 import org.apache.nifi.cluster.manager.exception.UnknownNodeException;
 import org.apache.nifi.cluster.manager.exception.UriConstructionException;
 import org.apache.nifi.cluster.protocol.NodeIdentifier;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/node/NodeClusterCoordinator.java
Patch:
@@ -486,11 +486,12 @@ public void finishNodeOffload(final NodeIdentifier nodeId) {
         }
 
         if (state != NodeConnectionState.OFFLOADING) {
-            logger.warn("Attempted to finish node offload for {} but node is not in a offload state, it is currently {}.", nodeId, state);
+            logger.warn("Attempted to finish node offload for {} but node is not in the offloading state, it is currently {}.", nodeId, state);
             return;
         }
 
         logger.info("{} is now offloaded", nodeId);
+
         updateNodeStatus(new NodeConnectionStatus(nodeId, NodeConnectionState.OFFLOADED));
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/StandardFlowService.java
Patch:
@@ -691,20 +691,19 @@ private void handleOffloadRequest(final OffloadMessage request) throws Interrupt
     private void offload(final String explanation) throws InterruptedException {
         writeLock.lock();
         try {
-
             logger.info("Offloading node due to " + explanation);
 
             // mark node as offloading
             controller.setConnectionStatus(new NodeConnectionStatus(nodeId, NodeConnectionState.OFFLOADING, OffloadCode.OFFLOADED, explanation));
             // request to stop all processors on node
             controller.stopAllProcessors();
-            // request to stop all remote process groups
-            controller.getRootGroup().findAllRemoteProcessGroups().forEach(RemoteProcessGroup::stopTransmitting);
             // terminate all processors
             controller.getRootGroup().findAllProcessors()
                     // filter stream, only stopped processors can be terminated
                     .stream().filter(pn -> pn.getScheduledState() == ScheduledState.STOPPED)
                     .forEach(pn -> pn.getProcessGroup().terminateProcessor(pn));
+            // request to stop all remote process groups
+            controller.getRootGroup().findAllRemoteProcessGroups().forEach(RemoteProcessGroup::stopTransmitting);
             // offload all queues on node
             controller.getAllQueues().forEach(FlowFileQueue::offloadQueue);
             // wait for rebalance of flowfiles on all queues
@@ -713,6 +712,7 @@ private void offload(final String explanation) throws InterruptedException {
                 Thread.sleep(1000);
             }
             // finish offload
+            controller.getAllQueues().forEach(FlowFileQueue::resetOffloadedQueue);
             controller.setConnectionStatus(new NodeConnectionStatus(nodeId, NodeConnectionState.OFFLOADED, OffloadCode.OFFLOADED, explanation));
             clusterCoordinator.finishNodeOffload(getNodeId());
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiServiceFacade.java
Patch:
@@ -4707,7 +4707,8 @@ public void deleteNode(final String nodeId) {
 
         final NodeConnectionStatus nodeConnectionStatus = clusterCoordinator.getConnectionStatus(nodeIdentifier);
         if (!nodeConnectionStatus.getState().equals(NodeConnectionState.OFFLOADED) && !nodeConnectionStatus.getState().equals(NodeConnectionState.DISCONNECTED)) {
-            throw new IllegalNodeDeletionException("Cannot remove Node with ID " + nodeId + " because it is not disconnected, current state = " + nodeConnectionStatus.getState());
+            throw new IllegalNodeDeletionException("Cannot remove Node with ID " + nodeId +
+                    " because it is not disconnected or offloaded, current state = " + nodeConnectionStatus.getState());
         }
 
         clusterCoordinator.removeNode(nodeIdentifier, userDn);

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/command/nifi/nodes/DisconnectNode.java
Patch:
@@ -57,7 +57,7 @@ public NodeResult doExecute(NiFiClient client, Properties properties) throws NiF
 
         NodeDTO nodeDto = new NodeDTO();
         nodeDto.setNodeId(nodeId);
-        // TODO There's no constant for node status in
+        // TODO There are no constants for the DISCONNECT node status
         nodeDto.setStatus("DISCONNECTING");
         NodeEntity nodeEntity = new NodeEntity();
         nodeEntity.setNode(nodeDto);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/coordination/ClusterTopologyEventListener.java
Patch:
@@ -17,15 +17,16 @@
 
 package org.apache.nifi.cluster.coordination;
 
+import org.apache.nifi.cluster.coordination.node.NodeConnectionState;
 import org.apache.nifi.cluster.protocol.NodeIdentifier;
 
 public interface ClusterTopologyEventListener {
 
     void onNodeAdded(NodeIdentifier nodeId);
 
-    void onNodeOffloaded(NodeIdentifier nodeId);
-
     void onNodeRemoved(NodeIdentifier nodeId);
 
     void onLocalNodeIdentifierSet(NodeIdentifier localNodeId);
+
+    void onNodeStateChange(NodeIdentifier nodeId, NodeConnectionState newState);
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/queue/clustered/partition/NonLocalPartitionPartitioner.java
Patch:
@@ -47,7 +47,7 @@ public QueuePartition getPartition(final FlowFileRecord flowFile, final QueuePar
 
     @Override
     public boolean isRebalanceOnClusterResize() {
-        return false;
+        return true;
     }
 
 

File: nifi-commons/nifi-write-ahead-log/src/main/java/org/wali/MinimalLockingWriteAheadLog.java
Patch:
@@ -1103,6 +1103,9 @@ public Set<Object> recoverNextTransaction(final Map<Object, S> currentRecordMap,
                 final S record;
                 try {
                     record = serde.deserializeEdit(recoveryIn, currentRecordMap, recoveryVersion);
+                    if (record == null) {
+                        throw new EOFException();
+                    }
                 } catch (final EOFException eof) {
                     throw eof;
                 } catch (final Exception e) {

File: nifi-commons/nifi-write-ahead-log/src/main/java/org/wali/WriteAheadRepository.java
Patch:
@@ -89,7 +89,7 @@ public interface WriteAheadRepository<T> {
      * <p>
      * Recovers all External Swap locations that were persisted. If this method
      * is to be called, it must be called AFTER {@link #recoverRecords()} and
-     * BEFORE {@link update}.
+     * BEFORE {@link #update(Collection, boolean)}}.
      * </p>
      *
      * @return swap location

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/repository/FileSystemRepository.java
Patch:
@@ -578,7 +578,7 @@ public ContentClaim create(final boolean lossTolerant) throws IOException {
             }
 
             final long modulatedSectionIndex = currentIndex % SECTIONS_PER_CONTAINER;
-            final String section = String.valueOf(modulatedSectionIndex);
+            final String section = String.valueOf(modulatedSectionIndex).intern();
             final String claimId = System.currentTimeMillis() + "-" + currentIndex;
 
             resourceClaim = resourceClaimManager.newResourceClaim(containerName, section, claimId, lossTolerant, true);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/jaxb/message/NodeIdentifierAdapter.java
Patch:
@@ -34,6 +34,8 @@ public AdaptedNodeIdentifier marshal(final NodeIdentifier ni) {
             aNi.setApiPort(ni.getApiPort());
             aNi.setSocketAddress(ni.getSocketAddress());
             aNi.setSocketPort(ni.getSocketPort());
+            aNi.setLoadBalanceAddress(ni.getLoadBalanceAddress());
+            aNi.setLoadBalancePort(ni.getLoadBalancePort());
             aNi.setSiteToSiteAddress(ni.getSiteToSiteAddress());
             aNi.setSiteToSitePort(ni.getSiteToSitePort());
             aNi.setSiteToSiteHttpApiPort(ni.getSiteToSiteHttpApiPort());
@@ -47,7 +49,7 @@ public NodeIdentifier unmarshal(final AdaptedNodeIdentifier aNi) {
         if (aNi == null) {
             return null;
         } else {
-            return new NodeIdentifier(aNi.getId(), aNi.getApiAddress(), aNi.getApiPort(), aNi.getSocketAddress(), aNi.getSocketPort(),
+            return new NodeIdentifier(aNi.getId(), aNi.getApiAddress(), aNi.getApiPort(), aNi.getSocketAddress(), aNi.getSocketPort(), aNi.getLoadBalanceAddress(), aNi.getLoadBalancePort(),
                 aNi.getSiteToSiteAddress(), aNi.getSiteToSitePort(),aNi.getSiteToSiteHttpApiPort(), aNi.isSiteToSiteSecure());
         }
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/AbstractHeartbeatMonitor.java
Patch:
@@ -29,6 +29,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java.util.Collections;
 import java.util.Map;
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
@@ -198,7 +199,7 @@ private void processHeartbeat(final NodeHeartbeat heartbeat) {
         final NodeIdentifier nodeId = heartbeat.getNodeIdentifier();
 
         // Do not process heartbeat if it's blocked by firewall.
-        if (clusterCoordinator.isBlockedByFirewall(nodeId.getSocketAddress())) {
+        if (clusterCoordinator.isBlockedByFirewall(Collections.singleton(nodeId.getSocketAddress()))) {
             clusterCoordinator.reportEvent(nodeId, Severity.WARNING, "Firewall blocked received heartbeat. Issuing disconnection request.");
 
             // request node to disconnect

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/coordination/flow/TestPopularVoteFlowElection.java
Patch:
@@ -218,7 +218,7 @@ private NiFiProperties getNiFiProperties() {
     }
 
     private NodeIdentifier createNodeId(final int index) {
-        return new NodeIdentifier(UUID.randomUUID().toString(), "localhost", 9000 + index, "localhost", 9000 + index, "localhost", 9000 + index, 9000 + index, true);
+        return new NodeIdentifier(UUID.randomUUID().toString(), "localhost", 9000 + index, "localhost", 9000 + index, "localhost", 9000 + index, "localhost", 9000 + index, 9000 + index, true);
     }
 
     private DataFlow createDataFlow(final byte[] flow) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/coordination/http/endpoints/CurrentUserEndpointMergerTest.java
Patch:
@@ -39,7 +39,7 @@ public class CurrentUserEndpointMergerTest {
 
     @Test
     public void testMergeUserPermissions() {
-        final NodeIdentifier nodeId1 = new NodeIdentifier("1", "localhost", 9000, "localhost", 9001, "localhost", 9002, 9003, false);
+        final NodeIdentifier nodeId1 = new NodeIdentifier("1", "localhost", 9000, "localhost", 9001, "localhost", 9006, "localhost", 9002, 9003, false);
         final CurrentUserEntity userNode1 = new CurrentUserEntity();
         userNode1.setControllerPermissions(buildPermissions(true, false));
         userNode1.setCountersPermissions(buildPermissions(true, true));
@@ -55,7 +55,7 @@ public void testMergeUserPermissions() {
         componentRestrictionsNode1.add(buildComponentRestriction(RequiredPermission.READ_FILESYSTEM, true, true));
         userNode1.setComponentRestrictionPermissions(componentRestrictionsNode1);
 
-        final NodeIdentifier nodeId2 = new NodeIdentifier("2", "localhost", 8000, "localhost", 8001, "localhost", 8002, 8003, false);
+        final NodeIdentifier nodeId2 = new NodeIdentifier("2", "localhost", 8000, "localhost", 8001, "localhost", 9006,"localhost", 8002, 8003, false);
         final CurrentUserEntity userNode2 = new CurrentUserEntity();
         userNode2.setControllerPermissions(buildPermissions(false, true));
         userNode2.setCountersPermissions(buildPermissions(true, false));

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/integration/ClusterConnectionIT.java
Patch:
@@ -219,7 +219,7 @@ public void testNodeInheritsClusterTopologyOnHeartbeat() throws InterruptedExcep
         cluster.waitUntilAllNodesConnected(10, TimeUnit.SECONDS);
         final Node coordinator = cluster.waitForClusterCoordinator(10, TimeUnit.SECONDS);
 
-        final NodeIdentifier node4NotReallyInCluster = new NodeIdentifier(UUID.randomUUID().toString(), "localhost", 9283, "localhost", 9284, "localhost", 9285, null, false, null);
+        final NodeIdentifier node4NotReallyInCluster = new NodeIdentifier(UUID.randomUUID().toString(), "localhost", 9283, "localhost", 9284, "localhost", 9286, "localhost", 9285, null, false, null);
 
         final Map<NodeIdentifier, NodeConnectionStatus> replacementStatuses = new HashMap<>();
         replacementStatuses.put(node1.getIdentifier(), new NodeConnectionStatus(node1.getIdentifier(), DisconnectionCode.USER_DISCONNECTED));

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/StandardFlowService.java
Patch:
@@ -202,6 +202,7 @@ private StandardFlowService(
 
             final InetSocketAddress nodeApiAddress = nifiProperties.getNodeApiAddress();
             final InetSocketAddress nodeSocketAddress = nifiProperties.getClusterNodeProtocolAddress();
+            final InetSocketAddress loadBalanceAddress = nifiProperties.getClusterLoadBalanceAddress();
 
             String nodeUuid = null;
             final StateManager stateManager = controller.getStateManagerProvider().getStateManager(CLUSTER_NODE_CONFIG);
@@ -217,6 +218,7 @@ private StandardFlowService(
             this.nodeId = new NodeIdentifier(nodeUuid,
                     nodeApiAddress.getHostName(), nodeApiAddress.getPort(),
                     nodeSocketAddress.getHostName(), nodeSocketAddress.getPort(),
+                    loadBalanceAddress.getHostName(), loadBalanceAddress.getPort(),
                     nifiProperties.getRemoteInputHost(), nifiProperties.getRemoteInputPort(),
                     nifiProperties.getRemoteInputHttpPort(), nifiProperties.isSiteToSiteSecure());
 
@@ -388,7 +390,7 @@ public boolean canHandle(final ProtocolMessage msg) {
     }
 
     @Override
-    public ProtocolMessage handle(final ProtocolMessage request) throws ProtocolException {
+    public ProtocolMessage handle(final ProtocolMessage request, final Set<String> nodeIdentities) throws ProtocolException {
         final long startNanos = System.nanoTime();
         try {
             switch (request.getType()) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/repository/RepositoryContext.java
Patch:
@@ -32,9 +32,6 @@
 import org.apache.nifi.provenance.ProvenanceEventRepository;
 import org.apache.nifi.util.Connectables;
 
-/**
- *
- */
 public class RepositoryContext {
 
     private final Connectable connectable;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-repository-models/src/main/java/org/apache/nifi/controller/repository/claim/StandardResourceClaim.java
Patch:
@@ -17,15 +17,15 @@
 package org.apache.nifi.controller.repository.claim;
 
 public class StandardResourceClaim implements ResourceClaim, Comparable<ResourceClaim> {
-    private final StandardResourceClaimManager claimManager;
+    private final ResourceClaimManager claimManager;
     private final String id;
     private final String container;
     private final String section;
     private final boolean lossTolerant;
     private final int hashCode;
     private volatile boolean writable = true;
 
-    public StandardResourceClaim(final StandardResourceClaimManager claimManager, final String container, final String section, final String id, final boolean lossTolerant) {
+    public StandardResourceClaim(final ResourceClaimManager claimManager, final String container, final String section, final String id, final boolean lossTolerant) {
         this.claimManager = claimManager;
         this.container = container.intern();
         this.section = section.intern();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/StandardHttpResponseMapper.java
Patch:
@@ -166,7 +166,7 @@ public NodeResponse mapResponses(final URI uri, final String httpMethod, final S
             // If we have a response that is a 3xx, 4xx, or 5xx, then we want to choose that.
             // Otherwise, it doesn't matter which one we choose. We do this because if we replicate
             // a mutable request, it's possible that one node will respond with a 409, for instance, while
-            // others respond with a 150-Continue. We do not want to pick the 150-Continue; instead, we want
+            // others respond with a 202-Accepted. We do not want to pick the 202-Accepted; instead, we want
             // the failed response.
             final NodeResponse clientResponse = nodeResponses.stream().filter(p -> p.getStatus() > 299).findAny().orElse(nodeResponses.iterator().next());
 
@@ -236,7 +236,7 @@ private void drainResponses(final Set<NodeResponse> responses, final NodeRespons
         responses.stream()
                 .parallel() // "parallelize" the draining of the responses, since we have multiple streams to consume
                 .filter(response -> response != exclude) // don't include the explicitly excluded node
-                .filter(response -> response.getStatus() != RequestReplicator.NODE_CONTINUE_STATUS_CODE) // don't include any 150-NodeContinue responses because they contain no content
+                .filter(response -> response.getStatus() != RequestReplicator.NODE_CONTINUE_STATUS_CODE) // don't include any continue responses because they contain no content
                 .forEach(response -> drainResponse(response)); // drain all node responses that didn't get filtered out
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/replication/okhttp/OkHttpReplicationClient.java
Patch:
@@ -308,7 +308,8 @@ private OkHttpClient createOkHttpClient(final NiFiProperties properties) {
         okHttpClientBuilder.connectTimeout(connectionTimeoutMs, TimeUnit.MILLISECONDS);
         okHttpClientBuilder.readTimeout(readTimeoutMs, TimeUnit.MILLISECONDS);
         okHttpClientBuilder.followRedirects(true);
-        okHttpClientBuilder.connectionPool(new ConnectionPool(0, 5, TimeUnit.MINUTES));
+        final int connectionPoolSize = properties.getClusterNodeMaxConcurrentRequests();
+        okHttpClientBuilder.connectionPool(new ConnectionPool(connectionPoolSize, 5, TimeUnit.MINUTES));
 
         final Tuple<SSLSocketFactory, X509TrustManager> tuple = createSslSocketFactory(properties);
         if (tuple != null) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/coordination/http/replication/TestThreadPoolRequestReplicator.java
Patch:
@@ -248,7 +248,7 @@ protected NodeResponse replicateRequest(final PreparedRequest request, final Nod
                 final int statusCode;
                 if (requestCount.incrementAndGet() == 1) {
                     assertEquals(ThreadPoolRequestReplicator.NODE_CONTINUE, expectsHeader);
-                    statusCode = 150;
+                    statusCode = Status.ACCEPTED.getStatusCode();
                 } else {
                     assertNull(expectsHeader);
                     statusCode = Status.OK.getStatusCode();
@@ -390,7 +390,7 @@ protected NodeResponse replicateRequest(final PreparedRequest request, final Nod
 
                 if (requestIndex == 1) {
                     final Response clientResponse = mock(Response.class);
-                    when(clientResponse.getStatus()).thenReturn(150);
+                    when(clientResponse.getStatus()).thenReturn(202);
                     return new NodeResponse(nodeId, request.getMethod(), uri, clientResponse, -1L, requestId);
                 } else {
                     final IllegalClusterStateException explanation = new IllegalClusterStateException("Intentional Exception for Unit Testing");

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ApplicationResource.java
Patch:
@@ -272,9 +272,9 @@ protected ResponseBuilder generateNotAuthorizedResponse() {
     }
 
     /**
-     * Generates a 150 Node Continue response to be used within the cluster request handshake.
+     * Generates a 202 Accepted (Node Continue) response to be used within the cluster request handshake.
      *
-     * @return a 150 Node Continue response to be used within the cluster request handshake
+     * @return a 202 Accepted (Node Continue) response to be used within the cluster request handshake
      */
     protected ResponseBuilder generateContinueResponse() {
         return Response.status(RequestReplicator.NODE_CONTINUE_STATUS_CODE);

File: nifi-nar-bundles/nifi-kite-bundle/nifi-kite-processors/src/main/java/org/apache/nifi/processors/kite/ConvertAvroSchema.java
Patch:
@@ -48,6 +48,7 @@
 import org.apache.nifi.components.Validator;
 import org.apache.nifi.expression.ExpressionLanguageScope;
 import org.apache.nifi.flowfile.FlowFile;
+import org.apache.nifi.flowfile.attributes.CoreAttributes;
 import org.apache.nifi.processor.ProcessContext;
 import org.apache.nifi.processor.ProcessSession;
 import org.apache.nifi.processor.Relationship;
@@ -351,6 +352,7 @@ public void process(InputStream in, OutputStream out)
             session.adjustCounter("Conversion errors", errors, false);
 
             if (written.get() > 0L) {
+                outgoingAvro = session.putAttribute(outgoingAvro, CoreAttributes.MIME_TYPE.key(), InferAvroSchema.AVRO_MIME_TYPE);
                 session.transfer(outgoingAvro, SUCCESS);
             } else {
                 session.remove(outgoingAvro);

File: nifi-nar-bundles/nifi-kite-bundle/nifi-kite-processors/src/main/java/org/apache/nifi/processors/kite/ConvertCSVToAvro.java
Patch:
@@ -41,6 +41,7 @@
 import org.apache.nifi.components.Validator;
 import org.apache.nifi.expression.ExpressionLanguageScope;
 import org.apache.nifi.flowfile.FlowFile;
+import org.apache.nifi.flowfile.attributes.CoreAttributes;
 import org.apache.nifi.processor.ProcessContext;
 import org.apache.nifi.processor.ProcessSession;
 import org.apache.nifi.processor.Relationship;
@@ -260,6 +261,7 @@ public void process(InputStream in, OutputStream out) throws IOException {
                     false /* update only if file transfer is successful */);
 
                 if (written.get() > 0L) {
+                    outgoingAvro = session.putAttribute(outgoingAvro, CoreAttributes.MIME_TYPE.key(), InferAvroSchema.AVRO_MIME_TYPE);
                     session.transfer(outgoingAvro, SUCCESS);
 
                     if (errors > 0L) {

File: nifi-nar-bundles/nifi-kite-bundle/nifi-kite-processors/src/main/java/org/apache/nifi/processors/kite/ConvertJSONToAvro.java
Patch:
@@ -35,6 +35,7 @@
 import org.apache.nifi.components.PropertyDescriptor;
 import org.apache.nifi.expression.ExpressionLanguageScope;
 import org.apache.nifi.flowfile.FlowFile;
+import org.apache.nifi.flowfile.attributes.CoreAttributes;
 import org.apache.nifi.processor.ProcessContext;
 import org.apache.nifi.processor.ProcessSession;
 import org.apache.nifi.processor.Relationship;
@@ -167,6 +168,7 @@ public void process(InputStream in, OutputStream out) throws IOException {
                     false /* update only if file transfer is successful */);
 
             if (written.get() > 0L) {
+                outgoingAvro = session.putAttribute(outgoingAvro, CoreAttributes.MIME_TYPE.key(), InferAvroSchema.AVRO_MIME_TYPE);
                 session.transfer(outgoingAvro, SUCCESS);
 
                 if (errors > 0L) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ControllerServiceDTO.java
Patch:
@@ -302,7 +302,7 @@ public void setValidationErrors(Collection<String> validationErrors) {
         this.validationErrors = validationErrors;
     }
 
-    @ApiModelProperty(value = "Indicates whether the Processor is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the Processor is valid)",
+    @ApiModelProperty(value = "Indicates whether the ControllerService is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the ControllerService is valid)",
         readOnly = true,
         allowableValues = VALID + ", " + INVALID + ", " + VALIDATING)
     public String getValidationStatus() {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ControllerServiceReferencingComponentDTO.java
Patch:
@@ -94,7 +94,7 @@ public void setName(String name) {
      * @return type for this component referencing a controller service
      */
     @ApiModelProperty(
-            value = "The type of the component referencing a controller service."
+            value = "The type of the component referencing a controller service in simple Java class name format without package name."
     )
     public String getType() {
         return type;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/PermissionsDtoMerger.java
Patch:
@@ -27,6 +27,9 @@ public class PermissionsDtoMerger {
      * @param entityPermissions       an {@link PermissionsDTO} to be merged
      */
     public static void mergePermissions(PermissionsDTO mergedEntityPermissions, PermissionsDTO entityPermissions) {
+        if (mergedEntityPermissions == null || entityPermissions == null) {
+            return;
+        }
         if (mergedEntityPermissions.getCanRead() && !entityPermissions.getCanRead()) {
             mergedEntityPermissions.setCanRead(false);
         }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/StatusMerger.java
Patch:
@@ -304,6 +304,7 @@ public static void merge(final RemoteProcessGroupStatusDTO target, final boolean
             target.setId(toMerge.getId());
             target.setName(toMerge.getName());
             target.setTargetUri(toMerge.getTargetUri());
+            target.setValidationStatus(toMerge.getValidationStatus());
         }
 
         merge(target.getAggregateSnapshot(), targetReadablePermission, toMerge.getAggregateSnapshot(), toMergeReadablePermission);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-jetty/src/test/java/org/apache/nifi/web/server/JettyServerTest.java
Patch:
@@ -37,6 +37,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import static org.apache.nifi.security.util.KeyStoreUtils.SUN_PROVIDER_NAME;
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.mock;
@@ -107,7 +108,7 @@ public void testConfigureSslContextFactoryWithJksKeyStore() {
         JettyServer.configureSslContextFactory(contextFactory, nifiProperties);
 
         verify(contextFactory).setKeyStoreType(keyStoreType);
-        verify(contextFactory, never()).setKeyStoreProvider(anyString());
+        verify(contextFactory).setKeyStoreProvider(SUN_PROVIDER_NAME);
     }
 
     @Test
@@ -137,7 +138,7 @@ public void testConfigureSslContextFactoryWithJksTrustStore() {
         JettyServer.configureSslContextFactory(contextFactory, nifiProperties);
 
         verify(contextFactory).setTrustStoreType(trustStoreType);
-        verify(contextFactory, never()).setTrustStoreProvider(anyString());
+        verify(contextFactory).setTrustStoreProvider(SUN_PROVIDER_NAME);
     }
 
     @Test

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-jetty/src/main/java/org/apache/nifi/web/server/JettyServer.java
Patch:
@@ -384,7 +384,7 @@ private Map<File, Bundle> findWars(final Set<Bundle> bundles) {
         // consider each nar working directory
         bundles.forEach(bundle -> {
             final BundleDetails details = bundle.getBundleDetails();
-            final File narDependencies = new File(details.getWorkingDirectory(), "META-INF/bundled-dependencies");
+            final File narDependencies = new File(details.getWorkingDirectory(), "NAR-INF/bundled-dependencies");
             if (narDependencies.isDirectory()) {
                 // list the wars from this nar
                 final File[] narDependencyDirs = narDependencies.listFiles(WAR_FILTER);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/flow/PopularVoteFlowElectionFactoryBean.java
Patch:
@@ -31,7 +31,7 @@ public class PopularVoteFlowElectionFactoryBean implements FactoryBean<PopularVo
     private NiFiProperties properties;
 
     @Override
-    public PopularVoteFlowElection getObject() throws Exception {
+    public PopularVoteFlowElection getObject() {
         final String maxWaitTime = properties.getFlowElectionMaxWaitTime();
         long maxWaitMillis;
         try {

File: nifi-toolkit/nifi-toolkit-tls/src/main/java/org/apache/nifi/toolkit/tls/configuration/StandaloneConfig.java
Patch:
@@ -17,10 +17,9 @@
 
 package org.apache.nifi.toolkit.tls.configuration;
 
-import org.apache.nifi.toolkit.tls.properties.NiFiPropertiesWriterFactory;
-
 import java.io.File;
 import java.util.List;
+import org.apache.nifi.toolkit.tls.properties.NiFiPropertiesWriterFactory;
 
 /**
  * Configuration object of the standalone service
@@ -34,6 +33,8 @@ public class StandaloneConfig extends TlsConfig {
     private boolean clientPasswordsGenerated;
     private boolean overwrite;
 
+    // TODO: A lot of these fields are null and cause NPEs in {@link TlsToolkitStandalone} when not executed with expected input
+
     public List<String> getClientDns() {
         return clientDns;
     }

File: nifi-commons/nifi-web-utils/src/main/java/org/apache/nifi/web/util/WebUtils.java
Patch:
@@ -32,6 +32,7 @@
 import org.glassfish.jersey.jackson.internal.jackson.jaxrs.json.JacksonJaxbJsonProvider;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.apache.http.conn.ssl.DefaultHostnameVerifier;
 
 /**
  * Common utilities related to web development.
@@ -93,8 +94,8 @@ private static Client createClientHelper(final ClientConfig config, final SSLCon
 
         if (ctx != null) {
 
-            // custom hostname verifier that checks subject alternative names against the hostname of the URI
-            clientBuilder = clientBuilder.sslContext(ctx).hostnameVerifier(new NiFiHostnameVerifier());
+            // Apache http DefaultHostnameVerifier that checks subject alternative names against the hostname of the URI
+            clientBuilder = clientBuilder.sslContext(ctx).hostnameVerifier(new DefaultHostnameVerifier());
         }
 
         clientBuilder = clientBuilder.register(ObjectMapperResolver.class).register(JacksonJaxbJsonProvider.class);

File: nifi-nar-bundles/nifi-extension-utils/nifi-syslog-utils/src/main/java/org/apache/nifi/syslog/events/SyslogEvent.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.processors.standard.syslog;
+package org.apache.nifi.syslog.events;
 
 /**
  * Encapsulates the parsed information for a single Syslog event.

File: nifi-nar-bundles/nifi-extension-utils/nifi-syslog-utils/src/main/java/org/apache/nifi/syslog/parsers/SyslogParser.java
Patch:
@@ -14,7 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.processors.standard.syslog;
+package org.apache.nifi.syslog.parsers;
+
+import org.apache.nifi.syslog.events.SyslogEvent;
 
 import java.nio.ByteBuffer;
 import java.nio.charset.Charset;

File: nifi-nar-bundles/nifi-extension-utils/nifi-syslog-utils/src/test/java/org/apache/nifi/syslog/TestSyslogParser.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.processors.standard.util;
+package org.apache.nifi.syslog;
 
-import org.apache.nifi.processors.standard.syslog.SyslogEvent;
-import org.apache.nifi.processors.standard.syslog.SyslogParser;
+import org.apache.nifi.syslog.events.SyslogEvent;
+import org.apache.nifi.syslog.parsers.SyslogParser;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/PutSyslog.java
Patch:
@@ -39,8 +39,8 @@
 import org.apache.nifi.processor.util.put.sender.DatagramChannelSender;
 import org.apache.nifi.processor.util.put.sender.SSLSocketChannelSender;
 import org.apache.nifi.processor.util.put.sender.SocketChannelSender;
-import org.apache.nifi.processors.standard.syslog.SyslogParser;
 import org.apache.nifi.ssl.SSLContextService;
+import org.apache.nifi.syslog.parsers.SyslogParser;
 import org.apache.nifi.util.StopWatch;
 
 import javax.net.ssl.SSLContext;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ConvertJSONToSQL.java
Patch:
@@ -907,14 +907,15 @@ public static ColumnDescription from(final ResultSet resultSet) throws SQLExcept
             for (int i = 1; i < md.getColumnCount() + 1; i++) {
                 columns.add(md.getColumnName(i));
             }
-
+            // COLUMN_DEF must be read first to work around Oracle bug
+            final String defaultValue = resultSet.getString("COLUMN_DEF");
             final String columnName = resultSet.getString("COLUMN_NAME");
             final int dataType = resultSet.getInt("DATA_TYPE");
             final int colSize = resultSet.getInt("COLUMN_SIZE");
 
             final String nullableValue = resultSet.getString("IS_NULLABLE");
             final boolean isNullable = "YES".equalsIgnoreCase(nullableValue) || nullableValue.isEmpty();
-            final String defaultValue = resultSet.getString("COLUMN_DEF");
+
             String autoIncrementValue = "NO";
 
             if(columns.contains("IS_AUTOINCREMENT")){

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/PutDatabaseRecord.java
Patch:
@@ -1080,14 +1080,14 @@ public static ColumnDescription from(final ResultSet resultSet) throws SQLExcept
             for (int i = 1; i < md.getColumnCount() + 1; i++) {
                 columns.add(md.getColumnName(i));
             }
-
+            // COLUMN_DEF must be read first to work around Oracle bug
+            final String defaultValue = resultSet.getString("COLUMN_DEF");
             final String columnName = resultSet.getString("COLUMN_NAME");
             final int dataType = resultSet.getInt("DATA_TYPE");
             final int colSize = resultSet.getInt("COLUMN_SIZE");
 
             final String nullableValue = resultSet.getString("IS_NULLABLE");
             final boolean isNullable = "YES".equalsIgnoreCase(nullableValue) || nullableValue.isEmpty();
-            final String defaultValue = resultSet.getString("COLUMN_DEF");
             String autoIncrementValue = "NO";
 
             if (columns.contains("IS_AUTOINCREMENT")) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/AbstractNodeProtocolSender.java
Patch:
@@ -62,7 +62,7 @@ public ConnectionResponseMessage requestConnection(final ConnectionRequestMessag
                 response = unmarshaller.unmarshal(socket.getInputStream());
             } catch (final IOException ioe) {
                 throw new ProtocolException("Failed unmarshalling '" + MessageType.CONNECTION_RESPONSE + "' protocol message from "
-                    + socket.getRemoteSocketAddress() + " due to: " + ioe, ioe);
+                        + socket.getRemoteSocketAddress() + " due to: " + ioe, ioe);
             }
 
             if (MessageType.CONNECTION_RESPONSE == response.getType()) {
@@ -155,7 +155,7 @@ private ProtocolMessage sendProtocolMessage(final ProtocolMessage msg, final Str
                 response = unmarshaller.unmarshal(socket.getInputStream());
             } catch (final IOException ioe) {
                 throw new ProtocolException("Failed unmarshalling '" + MessageType.CONNECTION_RESPONSE + "' protocol message from "
-                    + socket.getRemoteSocketAddress() + " due to: " + ioe, ioe);
+                        + socket.getRemoteSocketAddress() + " due to: " + ioe, ioe);
             }
 
             return response;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/spring/ThreadPoolRequestReplicatorFactoryBean.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.nifi.cluster.coordination.http.replication.okhttp.OkHttpReplicationClient;
 import org.apache.nifi.events.EventReporter;
 import org.apache.nifi.util.NiFiProperties;
-import org.apache.nifi.web.util.NiFiHostnameVerifier;
 import org.springframework.beans.BeansException;
 import org.springframework.beans.factory.FactoryBean;
 import org.springframework.context.ApplicationContext;
@@ -46,7 +45,7 @@ public ThreadPoolRequestReplicator getObject() throws Exception {
             final int maxPoolSize = nifiProperties.getClusterNodeProtocolMaxPoolSize();
             final int maxConcurrentRequests = nifiProperties.getClusterNodeMaxConcurrentRequests();
 
-            final OkHttpReplicationClient replicationClient = new OkHttpReplicationClient(nifiProperties, new NiFiHostnameVerifier());
+            final OkHttpReplicationClient replicationClient = new OkHttpReplicationClient(nifiProperties);
 
             replicator = new ThreadPoolRequestReplicator(corePoolSize, maxPoolSize, maxConcurrentRequests, replicationClient, clusterCoordinator,
                 requestCompletionCallback, eventReporter, nifiProperties);

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/util/JdbcCommon.java
Patch:
@@ -176,7 +176,6 @@ public class JdbcCommon {
             .required(true)
             .build();
 
-
     public static long convertToAvroStream(final ResultSet rs, final OutputStream outStream, boolean convertNames) throws SQLException, IOException {
         return convertToAvroStream(rs, outStream, null, null, convertNames);
     }

File: nifi-nar-bundles/nifi-extension-utils/nifi-record-utils/nifi-avro-record-utils/src/main/java/org/apache/nifi/schema/access/SchemaAccessUtils.java
Patch:
@@ -50,7 +50,7 @@ public class SchemaAccessUtils {
         "The content of the FlowFile contains a reference to a schema in the Schema Registry service. The reference is encoded as a single "
             + "'Magic Byte' followed by 4 bytes representing the identifier of the schema, as outlined at http://docs.confluent.io/current/schema-registry/docs/serializer-formatter.html. "
             + "This is based on version 3.2.x of the Confluent Schema Registry.");
-
+    public static final AllowableValue INFER_SCHEMA = new AllowableValue("infer", "Infer from Result");
 
     public static final PropertyDescriptor SCHEMA_REGISTRY = new PropertyDescriptor.Builder()
             .name("schema-registry")

File: nifi-nar-bundles/nifi-mongodb-bundle/nifi-mongodb-processors/src/main/java/org/apache/nifi/processors/mongodb/GetMongo.java
Patch:
@@ -281,7 +281,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
                                     log.debug("Writing batch...");
                                 }
                                 String payload = buildBatch(batch, jsonTypeSetting, usePrettyPrint);
-                                writeBatch(payload, null, context, session, attributes, REL_SUCCESS);
+                                writeBatch(payload, input, context, session, attributes, REL_SUCCESS);
                                 batch = new ArrayList<>();
                             } catch (Exception ex) {
                                 getLogger().error("Error building batch", ex);
@@ -290,7 +290,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
                     }
                     if (batch.size() > 0) {
                         try {
-                            writeBatch(buildBatch(batch, jsonTypeSetting, usePrettyPrint), null, context, session, attributes, REL_SUCCESS);
+                            writeBatch(buildBatch(batch, jsonTypeSetting, usePrettyPrint), input, context, session, attributes, REL_SUCCESS);
                         } catch (Exception ex) {
                             getLogger().error("Error sending remainder of batch", ex);
                         }

File: nifi-commons/nifi-write-ahead-log/src/test/java/org/wali/TestMinimalLockingWriteAheadLog.java
Patch:
@@ -495,7 +495,7 @@ public void testRecoverAfterIOException() throws IOException {
     @Test
     public void testRecoverFileThatHasTrailingNULBytesAndTruncation() throws IOException {
         final int numPartitions = 5;
-        final Path path = Paths.get("target/testRecoverFileThatHasTrailingNULBytes");
+        final Path path = Paths.get("target/testRecoverFileThatHasTrailingNULBytesAndTruncation");
         deleteRecursively(path.toFile());
         Files.createDirectories(path);
 
@@ -569,7 +569,7 @@ public void testRecoverFileThatHasTrailingNULBytesAndTruncation() throws IOExcep
     @Test
     public void testRecoverFileThatHasTrailingNULBytesNoTruncation() throws IOException {
         final int numPartitions = 5;
-        final Path path = Paths.get("target/testRecoverFileThatHasTrailingNULBytes");
+        final Path path = Paths.get("target/testRecoverFileThatHasTrailingNULBytesNoTruncation");
         deleteRecursively(path.toFile());
         Files.createDirectories(path);
 

File: nifi-nar-bundles/nifi-spark-bundle/nifi-livy-processors/src/main/java/org/apache/nifi/processors/livy/ExecuteSparkInteractive.java
Patch:
@@ -33,7 +33,7 @@
 import java.util.concurrent.TimeUnit;
 
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.StringEscapeUtils;
+import org.apache.commons.text.StringEscapeUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
@@ -207,7 +207,7 @@ public void onTrigger(ProcessContext context, final ProcessSession session) thro
             }
         }
 
-        code = StringEscapeUtils.escapeJavaScript(code);
+        code = StringEscapeUtils.escapeJson(code);
         String payload = "{\"code\":\"" + code + "\"}";
         try {
             final JSONObject result = submitAndHandleJob(livyUrl, livySessionService, sessionId, payload, statusCheckInterval);

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/queryrecord/FlowFileEnumerator.java
Patch:
@@ -62,7 +62,7 @@ public boolean moveNext() {
                 currentRow = filterColumns(recordParser.nextRecord());
                 break;
             } catch (final Exception e) {
-                throw new ProcessException("Failed to read next record in stream for " + flowFile, e);
+                throw new ProcessException("Failed to read next record in stream for " + flowFile + " due to " + e.getMessage(), e);
             }
         }
 

File: nifi-nar-bundles/nifi-couchbase-bundle/nifi-couchbase-processors/src/main/java/org/apache/nifi/processors/couchbase/CouchbaseAttributes.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.couchbase;
+package org.apache.nifi.processors.couchbase;
 
 import org.apache.nifi.flowfile.attributes.FlowFileAttributeKey;
 

File: nifi-nar-bundles/nifi-couchbase-bundle/nifi-couchbase-processors/src/main/java/org/apache/nifi/processors/couchbase/ErrorHandlingStrategy.java
Patch:
@@ -55,20 +55,20 @@ public enum ErrorHandlingStrategy {
 
     private final Result result;
     private final Penalty penalty;
-    private ErrorHandlingStrategy(Result result, Penalty penalty){
+    ErrorHandlingStrategy(Result result, Penalty penalty){
         this.result = result;
         this.penalty = penalty;
     }
 
     public enum Result {
-        ProcessException, Failure, Retry;
+        ProcessException, Failure, Retry
     }
 
     /**
      * Indicating yield or penalize the processing when transfer the input FlowFile.
      */
     public enum Penalty {
-        Yield, Penalize, None;
+        Yield, Penalize, None
     }
 
     public Result result(){

File: nifi-nar-bundles/nifi-couchbase-bundle/nifi-couchbase-services-api/src/main/java/org/apache/nifi/couchbase/CouchbaseClusterControllerService.java
Patch:
@@ -31,6 +31,6 @@ public interface CouchbaseClusterControllerService extends ControllerService {
      * @param bucketName the bucket name to access
      * @return a connected bucket instance
      */
-    public Bucket openBucket(String bucketName);
+    Bucket openBucket(String bucketName);
 
 }

File: nifi-nar-bundles/nifi-couchbase-bundle/nifi-couchbase-services-api/src/main/java/org/apache/nifi/couchbase/DocumentType.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.processors.couchbase;
+package org.apache.nifi.couchbase;
 
 
 /**

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/test/java/org/apache/nifi/processors/aws/wag/TestInvokeAWSGatewayApiCommon.java
Patch:
@@ -34,12 +34,12 @@
 import org.apache.nifi.flowfile.attributes.CoreAttributes;
 import org.apache.nifi.processors.aws.AbstractAWSProcessor;
 import org.apache.nifi.processors.aws.credentials.provider.service.AWSCredentialsProviderControllerService;
-import org.apache.nifi.processors.standard.TestServer;
 import org.apache.nifi.provenance.ProvenanceEventRecord;
 import org.apache.nifi.provenance.ProvenanceEventType;
 import org.apache.nifi.reporting.InitializationException;
 import org.apache.nifi.util.MockFlowFile;
 import org.apache.nifi.util.TestRunner;
+import org.apache.nifi.web.util.TestServer;
 import org.eclipse.jetty.server.Handler;
 import org.eclipse.jetty.server.Request;
 import org.eclipse.jetty.server.handler.AbstractHandler;

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/test/java/org/apache/nifi/processors/aws/wag/TestInvokeInvokeAmazonGatewayApiWithControllerService.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.nifi.processors.aws.wag;
 
 import java.io.IOException;
-import org.apache.nifi.processors.standard.TestServer;
 import org.apache.nifi.util.TestRunners;
+import org.apache.nifi.web.util.TestServer;
 import org.junit.After;
 import org.junit.AfterClass;
 import org.junit.Before;

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/test/java/org/apache/nifi/processors/aws/wag/TestInvokeInvokeAmazonGatewayApiWithCredFile.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.nifi.processors.aws.wag;
 
 import java.io.IOException;
-import org.apache.nifi.processors.standard.TestServer;
 import org.apache.nifi.util.TestRunners;
+import org.apache.nifi.web.util.TestServer;
 import org.junit.After;
 import org.junit.AfterClass;
 import org.junit.Before;

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/test/java/org/apache/nifi/processors/aws/wag/TestInvokeInvokeAmazonGatewayApiWithStaticAuth.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.nifi.processors.aws.wag;
 
 import java.io.IOException;
-import org.apache.nifi.processors.standard.TestServer;
 import org.apache.nifi.util.TestRunners;
+import org.apache.nifi.web.util.TestServer;
 import org.junit.After;
 import org.junit.AfterClass;
 import org.junit.Before;

File: nifi-nar-bundles/nifi-slack-bundle/nifi-slack-processors/src/test/java/org/apache/nifi/processors/slack/PutSlackTest.java
Patch:
@@ -19,9 +19,9 @@
 import org.apache.nifi.components.PropertyDescriptor;
 import org.apache.nifi.flowfile.FlowFile;
 import org.apache.nifi.processor.ProcessSession;
-import org.apache.nifi.processors.standard.TestServer;
 import org.apache.nifi.util.TestRunner;
 import org.apache.nifi.util.TestRunners;
+import org.apache.nifi.web.util.TestServer;
 import org.eclipse.jetty.servlet.ServletHandler;
 import org.junit.Before;
 import org.junit.Test;

File: nifi-nar-bundles/nifi-spark-bundle/nifi-livy-processors/src/test/java/org/apache/nifi/processors/livy/TestExecuteSparkInteractive.java
Patch:
@@ -17,10 +17,10 @@
 package org.apache.nifi.processors.livy;
 
 import org.apache.nifi.controller.livy.LivySessionController;
-import org.apache.nifi.processors.standard.TestServer;
 import org.apache.nifi.util.MockFlowFile;
 import org.apache.nifi.util.TestRunner;
 import org.apache.nifi.util.TestRunners;
+import org.apache.nifi.web.util.TestServer;
 import org.eclipse.jetty.server.Handler;
 import org.junit.After;
 import org.junit.AfterClass;

File: nifi-nar-bundles/nifi-spark-bundle/nifi-livy-processors/src/test/java/org/apache/nifi/processors/livy/TestExecuteSparkInteractiveSSL.java
Patch:
@@ -17,11 +17,11 @@
 package org.apache.nifi.processors.livy;
 
 import org.apache.nifi.controller.livy.LivySessionController;
-import org.apache.nifi.processors.standard.TestServer;
 import org.apache.nifi.ssl.StandardSSLContextService;
 import org.apache.nifi.util.MockFlowFile;
 import org.apache.nifi.util.TestRunner;
 import org.apache.nifi.util.TestRunners;
+import org.apache.nifi.web.util.TestServer;
 import org.eclipse.jetty.server.Handler;
 import org.junit.After;
 import org.junit.AfterClass;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestGetHTTP.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.nifi.components.state.Scope;
 import org.apache.nifi.flowfile.attributes.CoreAttributes;
+import org.apache.nifi.web.util.TestServer;
 import org.apache.nifi.reporting.InitializationException;
 import org.apache.nifi.ssl.SSLContextService;
 import org.apache.nifi.ssl.StandardSSLContextService;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestInvokeHTTP.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.nifi.processors.standard;
 
 import org.apache.nifi.processors.standard.util.TestInvokeHttpCommon;
+import org.apache.nifi.web.util.TestServer;
 import org.apache.nifi.ssl.StandardSSLContextService;
 import org.apache.nifi.util.MockFlowFile;
 import org.apache.nifi.util.TestRunners;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestInvokeHttpSSL.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.nifi.processors.standard;
 
 import org.apache.nifi.processors.standard.util.TestInvokeHttpCommon;
+import org.apache.nifi.web.util.TestServer;
 import org.apache.nifi.ssl.StandardSSLContextService;
 import org.apache.nifi.util.TestRunners;
 import org.junit.After;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestPostHTTP.java
Patch:
@@ -31,6 +31,7 @@
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.nifi.flowfile.attributes.CoreAttributes;
+import org.apache.nifi.web.util.TestServer;
 import org.apache.nifi.ssl.SSLContextService;
 import org.apache.nifi.ssl.StandardSSLContextService;
 import org.apache.nifi.util.FlowFileUnpackagerV3;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/util/TestInvokeHttpCommon.java
Patch:
@@ -19,11 +19,11 @@
 
 import org.apache.nifi.flowfile.attributes.CoreAttributes;
 import org.apache.nifi.processors.standard.InvokeHTTP;
-import org.apache.nifi.processors.standard.TestServer;
 import org.apache.nifi.provenance.ProvenanceEventRecord;
 import org.apache.nifi.provenance.ProvenanceEventType;
 import org.apache.nifi.util.MockFlowFile;
 import org.apache.nifi.util.TestRunner;
+import org.apache.nifi.web.util.TestServer;
 import org.eclipse.jetty.security.ConstraintSecurityHandler;
 import org.eclipse.jetty.security.DefaultIdentityService;
 import org.eclipse.jetty.security.HashLoginService;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-web-test-utils/src/main/java/org/apache/nifi/web/util/TestServer.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.processors.standard;
+package org.apache.nifi.web.util;
 
 import java.util.Map;
 import org.apache.nifi.ssl.StandardSSLContextService;
@@ -135,14 +135,14 @@ public void shutdownServer() throws Exception {
         jetty.destroy();
     }
 
-    private int getPort() {
+    public int getPort() {
         if (!jetty.isStarted()) {
             throw new IllegalStateException("Jetty server not started");
         }
         return ((ServerConnector) jetty.getConnectors()[0]).getLocalPort();
     }
 
-    private int getSecurePort() {
+    public int getSecurePort() {
         if (!jetty.isStarted()) {
             throw new IllegalStateException("Jetty server not started");
         }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/replication/okhttp/OkHttpReplicationClient.java
Patch:
@@ -68,6 +68,7 @@
 import com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector;
 
 import okhttp3.Call;
+import okhttp3.ConnectionPool;
 import okhttp3.Headers;
 import okhttp3.HttpUrl;
 import okhttp3.MediaType;
@@ -289,6 +290,8 @@ private OkHttpClient createOkHttpClient(final NiFiProperties properties, final H
         okHttpClientBuilder.connectTimeout(connectionTimeoutMs, TimeUnit.MILLISECONDS);
         okHttpClientBuilder.readTimeout(readTimeoutMs, TimeUnit.MILLISECONDS);
         okHttpClientBuilder.followRedirects(true);
+        final int connectionPoolSize = properties.getClusterNodeMaxConcurrentRequests();
+        okHttpClientBuilder.connectionPool(new ConnectionPool(connectionPoolSize, 5, TimeUnit.MINUTES));
 
         final Tuple<SSLSocketFactory, X509TrustManager> tuple = createSslSocketFactory(properties);
         if (tuple != null) {

File: nifi-nar-bundles/nifi-extension-utils/nifi-record-utils/nifi-mock-record-utils/src/main/java/org/apache/nifi/serialization/record/MockSchemaRegistry.java
Patch:
@@ -46,7 +46,7 @@ private RecordSchema retrieveSchemaByName(final SchemaIdentifier schemaIdentifie
             throw new org.apache.nifi.schema.access.SchemaNotFoundException("Cannot retrieve schema because Schema Name is not present");
         }
 
-        return schemaNameMap.get(schemaName);
+        return schemaNameMap.get(schemaName.get());
     }
 
     private RecordSchema retrieveSchemaByIdAndVersion(final SchemaIdentifier schemaIdentifier) throws IOException, SchemaNotFoundException {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/service/StandardControllerServiceNode.java
Patch:
@@ -222,6 +222,7 @@ public void setProcessGroup(final ProcessGroup group) {
         writeLock.lock();
         try {
             this.processGroup = group;
+            LOG.debug("Resetting Validation State of {} due to setting process group", this);
             resetValidationState();
         } finally {
             writeLock.unlock();

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/s3/ListS3.java
Patch:
@@ -28,6 +28,7 @@
 
 import org.apache.nifi.annotation.behavior.InputRequirement;
 import org.apache.nifi.annotation.behavior.InputRequirement.Requirement;
+import org.apache.nifi.annotation.behavior.PrimaryNodeOnly;
 import org.apache.nifi.annotation.behavior.Stateful;
 import org.apache.nifi.annotation.behavior.TriggerSerially;
 import org.apache.nifi.annotation.behavior.TriggerWhenEmpty;
@@ -58,6 +59,7 @@
 import com.amazonaws.services.s3.model.ListObjectsV2Request;
 import com.amazonaws.services.s3.model.ListObjectsV2Result;
 
+@PrimaryNodeOnly
 @TriggerSerially
 @TriggerWhenEmpty
 @InputRequirement(Requirement.INPUT_FORBIDDEN)

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/main/java/org/apache/nifi/processors/azure/storage/ListAzureBlobStorage.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.commons.lang3.exception.ExceptionUtils;
 import org.apache.nifi.annotation.behavior.InputRequirement;
 import org.apache.nifi.annotation.behavior.InputRequirement.Requirement;
+import org.apache.nifi.annotation.behavior.PrimaryNodeOnly;
 import org.apache.nifi.annotation.behavior.Stateful;
 import org.apache.nifi.annotation.behavior.TriggerSerially;
 import org.apache.nifi.annotation.behavior.WritesAttribute;
@@ -57,6 +58,7 @@
 import java.util.List;
 import java.util.Map;
 
+@PrimaryNodeOnly
 @TriggerSerially
 @Tags({ "azure", "microsoft", "cloud", "storage", "blob" })
 @SeeAlso({ FetchAzureBlobStorage.class, PutAzureBlobStorage.class, DeleteAzureBlobStorage.class })

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ProcessorConfigDTO.java
Patch:
@@ -107,7 +107,7 @@ public void setExecutionNode(String executionNode) {
      * @return the amount of time that is used when this processor penalizes a flowfile
      */
     @ApiModelProperty(
-            value = "The amout of time that is used when the process penalizes a flowfile."
+            value = "The amount of time that is used when the process penalizes a flowfile."
     )
     public String getPenaltyDuration() {
         return penaltyDuration;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/ProcessorNode.java
Patch:
@@ -68,6 +68,8 @@ public ProcessorNode(final String id,
 
     public abstract boolean isEventDrivenSupported();
 
+    public abstract boolean isExecutionNodeRestricted();
+
     public abstract Requirement getInputRequirement();
 
     public abstract List<ActiveThreadInfo> getActiveThreads();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java
Patch:
@@ -2786,6 +2786,7 @@ public ProcessorDTO createProcessorDto(final ProcessorNode node) {
         dto.setPersistsState(node.getProcessor().getClass().isAnnotationPresent(Stateful.class));
         dto.setRestricted(node.isRestricted());
         dto.setDeprecated(node.isDeprecated());
+        dto.setExecutionNodeRestricted(node.isExecutionNodeRestricted());
         dto.setExtensionMissing(node.isExtensionMissing());
         dto.setMultipleVersionsAvailable(compatibleBundles.size() > 1);
         dto.setVersionedComponentId(node.getVersionedComponentId().orElse(null));
@@ -3767,6 +3768,7 @@ public ProcessorDTO copy(final ProcessorDTO original) {
         copy.setSupportsEventDriven(original.getSupportsEventDriven());
         copy.setSupportsBatching(original.getSupportsBatching());
         copy.setPersistsState(original.getPersistsState());
+        copy.setExecutionNodeRestricted(original.isExecutionNodeRestricted());
         copy.setExtensionMissing(original.getExtensionMissing());
         copy.setMultipleVersionsAvailable(original.getMultipleVersionsAvailable());
         copy.setValidationErrors(copy(original.getValidationErrors()));

File: nifi-nar-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/storage/ListGCSBucket.java
Patch:
@@ -24,6 +24,7 @@
 import com.google.common.collect.ImmutableList;
 import org.apache.nifi.annotation.behavior.InputRequirement;
 import org.apache.nifi.annotation.behavior.InputRequirement.Requirement;
+import org.apache.nifi.annotation.behavior.PrimaryNodeOnly;
 import org.apache.nifi.annotation.behavior.TriggerSerially;
 import org.apache.nifi.annotation.behavior.TriggerWhenEmpty;
 import org.apache.nifi.annotation.behavior.Stateful;
@@ -103,6 +104,7 @@
 /**
  * List objects in a google cloud storage bucket by object name pattern.
  */
+@PrimaryNodeOnly
 @TriggerSerially
 @TriggerWhenEmpty
 @InputRequirement(Requirement.INPUT_FORBIDDEN)

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/main/java/org/apache/nifi/processors/hadoop/ListHDFS.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.hadoop.fs.permission.FsPermission;
 import org.apache.nifi.annotation.behavior.InputRequirement;
 import org.apache.nifi.annotation.behavior.InputRequirement.Requirement;
+import org.apache.nifi.annotation.behavior.PrimaryNodeOnly;
 import org.apache.nifi.annotation.behavior.Stateful;
 import org.apache.nifi.annotation.behavior.TriggerSerially;
 import org.apache.nifi.annotation.behavior.TriggerWhenEmpty;
@@ -62,6 +63,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.regex.Pattern;
 
+@PrimaryNodeOnly
 @TriggerSerially
 @TriggerWhenEmpty
 @InputRequirement(Requirement.INPUT_FORBIDDEN)

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/GetJMSTopic.java
Patch:
@@ -43,6 +43,7 @@
 
 import org.apache.nifi.annotation.behavior.InputRequirement;
 import org.apache.nifi.annotation.behavior.InputRequirement.Requirement;
+import org.apache.nifi.annotation.behavior.PrimaryNodeOnly;
 import org.apache.nifi.annotation.behavior.TriggerSerially;
 import org.apache.nifi.annotation.behavior.TriggerWhenEmpty;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
@@ -61,6 +62,7 @@
 import org.apache.nifi.processors.standard.util.JmsProperties;
 import org.apache.nifi.processors.standard.util.WrappedMessageConsumer;
 
+@PrimaryNodeOnly
 @Deprecated
 @DeprecationNotice(classNames = {"org.apache.nifi.jms.processors.ConsumeJMS"}, reason = "This processor is deprecated and may be removed in future releases.")
 @TriggerSerially

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ListDatabaseTables.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.nifi.processors.standard;
 
 import org.apache.nifi.annotation.behavior.InputRequirement;
+import org.apache.nifi.annotation.behavior.PrimaryNodeOnly;
 import org.apache.nifi.annotation.behavior.Stateful;
 import org.apache.nifi.annotation.behavior.TriggerSerially;
 import org.apache.nifi.annotation.behavior.WritesAttribute;
@@ -59,6 +60,7 @@
 /**
  * A processor to retrieve a list of tables (and their metadata) from a database connection
  */
+@PrimaryNodeOnly
 @TriggerSerially
 @InputRequirement(InputRequirement.Requirement.INPUT_FORBIDDEN)
 @Tags({"sql", "list", "jdbc", "table", "database"})

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ListFTP.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.Collection;
 import java.util.List;
 import org.apache.nifi.annotation.behavior.InputRequirement;
+import org.apache.nifi.annotation.behavior.PrimaryNodeOnly;
 import org.apache.nifi.annotation.behavior.Stateful;
 import org.apache.nifi.annotation.behavior.InputRequirement.Requirement;
 import org.apache.nifi.annotation.behavior.TriggerSerially;
@@ -37,6 +38,7 @@
 import org.apache.nifi.processors.standard.util.FileTransfer;
 import org.apache.nifi.processors.standard.util.FTPTransfer;
 
+@PrimaryNodeOnly
 @TriggerSerially
 @InputRequirement(Requirement.INPUT_FORBIDDEN)
 @Tags({"list", "ftp", "remote", "ingest", "source", "input", "files"})

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ListSFTP.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.List;
 
 import org.apache.nifi.annotation.behavior.InputRequirement;
+import org.apache.nifi.annotation.behavior.PrimaryNodeOnly;
 import org.apache.nifi.annotation.behavior.Stateful;
 import org.apache.nifi.annotation.behavior.InputRequirement.Requirement;
 import org.apache.nifi.annotation.behavior.TriggerSerially;
@@ -39,6 +40,7 @@
 import org.apache.nifi.processors.standard.util.FileTransfer;
 import org.apache.nifi.processors.standard.util.SFTPTransfer;
 
+@PrimaryNodeOnly
 @TriggerSerially
 @InputRequirement(Requirement.INPUT_FORBIDDEN)
 @Tags({"list", "sftp", "remote", "ingest", "source", "input", "files"})

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/groups/ProcessGroup.java
Patch:
@@ -75,7 +75,7 @@ public interface ProcessGroup extends ComponentAuthorizable, Positionable, Versi
     /**
      * Predicate for disabling eligible Processors.
      */
-    Predicate<ProcessorNode> DISABLE_PROCESSORS_FILTER = node -> !node.isRunning();
+    Predicate<ProcessorNode> DISABLE_PROCESSORS_FILTER = node -> !node.isRunning() && !ScheduledState.DISABLED.equals(node.getScheduledState());
 
     /**
      * Predicate for starting eligible Ports.
@@ -95,7 +95,7 @@ public interface ProcessGroup extends ComponentAuthorizable, Positionable, Versi
     /**
      * Predicate for disabling eligible Ports.
      */
-    Predicate<Port> DISABLE_PORTS_FILTER = port -> !port.isRunning();
+    Predicate<Port> DISABLE_PORTS_FILTER = port -> !port.isRunning() && !ScheduledState.DISABLED.equals(port.getScheduledState());
 
     /**
      * @return a reference to this ProcessGroup's parent. This will be

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ForkRecord.java
Patch:
@@ -98,9 +98,9 @@ public class ForkRecord extends AbstractProcessor {
     private volatile RecordPathCache recordPathCache = new RecordPathCache(25);
 
     static final AllowableValue MODE_EXTRACT = new AllowableValue("extract", "Extract",
-            "Generated records will preserve the input schema and will contain a one-element array");
+        "Generated records will be the elements of the array");
     static final AllowableValue MODE_SPLIT = new AllowableValue("split", "Split",
-            "Generated records will be the elements of the array");
+        "Generated records will preserve the input schema and will contain a one-element array");
 
     public static final PropertyDescriptor RECORD_READER = new PropertyDescriptor.Builder()
             .name("record-reader")
@@ -209,7 +209,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
             return;
         }
 
-        final List<RecordPath> recordPaths = new ArrayList<RecordPath>();
+        final List<RecordPath> recordPaths = new ArrayList<>();
         Map<PropertyDescriptor, String> processorProperties = context.getProperties();
         for (final Map.Entry<PropertyDescriptor, String> entry : processorProperties.entrySet()) {
             PropertyDescriptor property = entry.getKey();

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/processors/script/InvokeScriptedProcessor.java
Patch:
@@ -237,7 +237,7 @@ public void setup() {
     @Override
     public void onPropertyModified(final PropertyDescriptor descriptor, final String oldValue, final String newValue) {
 
-        validationResults.set(null);
+        validationResults.set(new HashSet<>());
 
         final ComponentLog logger = getLogger();
         final Processor instance = processor.get();
@@ -455,7 +455,7 @@ protected Collection<ValidationResult> customValidate(final ValidationContext co
 
         // do not try to build processor/compile/etc until onPropertyModified clear the validation error/s
         // and don't print anything into log.
-        if (validationResults.get() != null){
+        if (!validationResults.get().isEmpty()) {
             return validationResults.get();
         }
 

File: nifi-nar-bundles/nifi-standard-services/nifi-hbase_1_1_2-client-service-bundle/nifi-hbase_1_1_2-client-service/src/main/java/org/apache/nifi/hbase/VisibilityLabelUtils.java
Patch:
@@ -26,8 +26,8 @@
 import java.util.Arrays;
 import java.util.List;
 
-public interface VisibilityLabelService {
-    PropertyDescriptor AUTHORIZATIONS = new PropertyDescriptor.Builder()
+class VisibilityLabelUtils {
+    static final PropertyDescriptor AUTHORIZATIONS = new PropertyDescriptor.Builder()
         .name("hb-lu-authorizations")
         .displayName("Authorizations")
         .description("The list of authorization tokens to be used with cell visibility if it is enabled. These will be used to " +
@@ -36,7 +36,7 @@ public interface VisibilityLabelService {
         .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)
         .build();
 
-    default List<String> getAuthorizations(ConfigurationContext context) {
+    static List<String> getAuthorizations(ConfigurationContext context) {
         List<String> tokens = new ArrayList<>();
         String authorizationString = context.getProperty(AUTHORIZATIONS).isSet()
                 ? context.getProperty(AUTHORIZATIONS).getValue()

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/cloudwatch/PutCloudWatchMetric.java
Patch:
@@ -174,7 +174,7 @@ public ValidationResult validate(String subject, String input, ValidationContext
             Collections.unmodifiableList(
                     Arrays.asList(NAMESPACE, METRIC_NAME, VALUE, MAXIMUM, MINIMUM, SAMPLECOUNT, SUM, TIMESTAMP,
                             UNIT, REGION, ACCESS_KEY, SECRET_KEY, CREDENTIALS_FILE, AWS_CREDENTIALS_PROVIDER_SERVICE,
-                            TIMEOUT, SSL_CONTEXT_SERVICE, ENDPOINT_OVERRIDE, PROXY_HOST, PROXY_HOST_PORT)
+                            TIMEOUT, SSL_CONTEXT_SERVICE, ENDPOINT_OVERRIDE, PROXY_HOST, PROXY_HOST_PORT, PROXY_USERNAME, PROXY_PASSWORD)
             );
 
     private volatile Set<String> dynamicPropertyNames = new HashSet<>();

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/dynamodb/DeleteDynamoDB.java
Patch:
@@ -74,7 +74,8 @@ public class DeleteDynamoDB extends AbstractWriteDynamoDBProcessor {
     public static final List<PropertyDescriptor> properties = Collections.unmodifiableList(
             Arrays.asList(TABLE, HASH_KEY_NAME, RANGE_KEY_NAME, HASH_KEY_VALUE, RANGE_KEY_VALUE,
                 HASH_KEY_VALUE_TYPE, RANGE_KEY_VALUE_TYPE, BATCH_SIZE, REGION, ACCESS_KEY, SECRET_KEY,
-                CREDENTIALS_FILE, AWS_CREDENTIALS_PROVIDER_SERVICE, TIMEOUT, SSL_CONTEXT_SERVICE));
+                CREDENTIALS_FILE, AWS_CREDENTIALS_PROVIDER_SERVICE, TIMEOUT, SSL_CONTEXT_SERVICE,
+                PROXY_CONFIGURATION_SERVICE, PROXY_HOST, PROXY_HOST_PORT, PROXY_USERNAME, PROXY_PASSWORD));
 
     @Override
     protected List<PropertyDescriptor> getSupportedPropertyDescriptors() {

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/dynamodb/GetDynamoDB.java
Patch:
@@ -80,7 +80,8 @@ public class GetDynamoDB extends AbstractDynamoDBProcessor {
     public static final List<PropertyDescriptor> properties = Collections.unmodifiableList(
             Arrays.asList(TABLE, HASH_KEY_NAME, RANGE_KEY_NAME, HASH_KEY_VALUE, RANGE_KEY_VALUE,
                 HASH_KEY_VALUE_TYPE, RANGE_KEY_VALUE_TYPE, JSON_DOCUMENT, BATCH_SIZE, REGION, ACCESS_KEY, SECRET_KEY,
-                CREDENTIALS_FILE, AWS_CREDENTIALS_PROVIDER_SERVICE, TIMEOUT, SSL_CONTEXT_SERVICE));
+                CREDENTIALS_FILE, AWS_CREDENTIALS_PROVIDER_SERVICE, TIMEOUT, SSL_CONTEXT_SERVICE,
+                PROXY_CONFIGURATION_SERVICE, PROXY_HOST, PROXY_HOST_PORT, PROXY_USERNAME, PROXY_PASSWORD));
 
     public static final Relationship REL_NOT_FOUND = new Relationship.Builder().name("not found")
             .description("FlowFiles are routed to not found relationship if key not found in the table").build();

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/dynamodb/PutDynamoDB.java
Patch:
@@ -84,7 +84,8 @@ public class PutDynamoDB extends AbstractWriteDynamoDBProcessor {
     public static final List<PropertyDescriptor> properties = Collections.unmodifiableList(
         Arrays.asList(TABLE, HASH_KEY_NAME, RANGE_KEY_NAME, HASH_KEY_VALUE, RANGE_KEY_VALUE,
             HASH_KEY_VALUE_TYPE, RANGE_KEY_VALUE_TYPE, JSON_DOCUMENT, DOCUMENT_CHARSET, BATCH_SIZE,
-            REGION, ACCESS_KEY, SECRET_KEY, CREDENTIALS_FILE, AWS_CREDENTIALS_PROVIDER_SERVICE, TIMEOUT, SSL_CONTEXT_SERVICE));
+            REGION, ACCESS_KEY, SECRET_KEY, CREDENTIALS_FILE, AWS_CREDENTIALS_PROVIDER_SERVICE, TIMEOUT, SSL_CONTEXT_SERVICE,
+            PROXY_CONFIGURATION_SERVICE, PROXY_HOST, PROXY_HOST_PORT, PROXY_USERNAME, PROXY_PASSWORD));
 
     /**
      * Dyamodb max item size limit 400 kb

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/kinesis/firehose/PutKinesisFirehose.java
Patch:
@@ -72,7 +72,7 @@ public class PutKinesisFirehose extends AbstractKinesisFirehoseProcessor {
 
     public static final List<PropertyDescriptor> properties = Collections.unmodifiableList(
             Arrays.asList(KINESIS_FIREHOSE_DELIVERY_STREAM_NAME, BATCH_SIZE, MAX_MESSAGE_BUFFER_SIZE_MB, REGION, ACCESS_KEY, SECRET_KEY, CREDENTIALS_FILE, AWS_CREDENTIALS_PROVIDER_SERVICE, TIMEOUT,
-                  PROXY_HOST, PROXY_HOST_PORT, ENDPOINT_OVERRIDE));
+                    PROXY_CONFIGURATION_SERVICE, PROXY_HOST, PROXY_HOST_PORT, PROXY_USERNAME, PROXY_PASSWORD, ENDPOINT_OVERRIDE));
 
     /**
      * Max buffer size 1 MB

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/kinesis/stream/PutKinesisStream.java
Patch:
@@ -80,7 +80,7 @@ public class PutKinesisStream extends AbstractKinesisStreamProcessor {
 
     public static final List<PropertyDescriptor> properties = Collections.unmodifiableList(
             Arrays.asList(KINESIS_STREAM_NAME, KINESIS_PARTITION_KEY, BATCH_SIZE, MAX_MESSAGE_BUFFER_SIZE_MB, REGION, ACCESS_KEY, SECRET_KEY, CREDENTIALS_FILE,
-                AWS_CREDENTIALS_PROVIDER_SERVICE, TIMEOUT, PROXY_HOST, PROXY_HOST_PORT, ENDPOINT_OVERRIDE));
+                AWS_CREDENTIALS_PROVIDER_SERVICE, TIMEOUT, PROXY_CONFIGURATION_SERVICE, PROXY_HOST, PROXY_HOST_PORT, PROXY_USERNAME, PROXY_PASSWORD, ENDPOINT_OVERRIDE));
 
     /** A random number generator for cases where partition key is not available */
     protected Random randomParitionKeyGenerator = new Random();

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/lambda/PutLambda.java
Patch:
@@ -127,8 +127,8 @@ public class PutLambda extends AbstractAWSLambdaProcessor {
     public static final long MAX_REQUEST_SIZE = 6 * 1000 * 1000;
 
     public static final List<PropertyDescriptor> properties = Collections.unmodifiableList(
-            Arrays.asList(AWS_LAMBDA_FUNCTION_NAME, AWS_LAMBDA_FUNCTION_QUALIFIER, REGION, ACCESS_KEY, SECRET_KEY, CREDENTIALS_FILE, AWS_CREDENTIALS_PROVIDER_SERVICE, TIMEOUT
-            ));
+            Arrays.asList(AWS_LAMBDA_FUNCTION_NAME, AWS_LAMBDA_FUNCTION_QUALIFIER, REGION, ACCESS_KEY, SECRET_KEY, CREDENTIALS_FILE, AWS_CREDENTIALS_PROVIDER_SERVICE, TIMEOUT,
+                    PROXY_CONFIGURATION_SERVICE, PROXY_HOST, PROXY_HOST_PORT, PROXY_USERNAME, PROXY_PASSWORD));
 
     @Override
     protected List<PropertyDescriptor> getSupportedPropertyDescriptors() {

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/s3/DeleteS3Object.java
Patch:
@@ -59,7 +59,7 @@ public class DeleteS3Object extends AbstractS3Processor {
     public static final List<PropertyDescriptor> properties = Collections.unmodifiableList(
             Arrays.asList(KEY, BUCKET, ACCESS_KEY, SECRET_KEY, CREDENTIALS_FILE, AWS_CREDENTIALS_PROVIDER_SERVICE, REGION, TIMEOUT, VERSION_ID,
                     FULL_CONTROL_USER_LIST, READ_USER_LIST, WRITE_USER_LIST, READ_ACL_LIST, WRITE_ACL_LIST, OWNER,
-                    SSL_CONTEXT_SERVICE, ENDPOINT_OVERRIDE, SIGNER_OVERRIDE, PROXY_HOST, PROXY_HOST_PORT));
+                    SSL_CONTEXT_SERVICE, ENDPOINT_OVERRIDE, SIGNER_OVERRIDE, PROXY_CONFIGURATION_SERVICE, PROXY_HOST, PROXY_HOST_PORT, PROXY_USERNAME, PROXY_PASSWORD));
 
     @Override
     protected List<PropertyDescriptor> getSupportedPropertyDescriptors() {

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/s3/FetchS3Object.java
Patch:
@@ -76,7 +76,7 @@ public class FetchS3Object extends AbstractS3Processor {
 
     public static final List<PropertyDescriptor> properties = Collections.unmodifiableList(
             Arrays.asList(BUCKET, KEY, REGION, ACCESS_KEY, SECRET_KEY, CREDENTIALS_FILE, AWS_CREDENTIALS_PROVIDER_SERVICE, TIMEOUT, VERSION_ID,
-                SSL_CONTEXT_SERVICE, ENDPOINT_OVERRIDE, SIGNER_OVERRIDE, PROXY_HOST, PROXY_HOST_PORT));
+                SSL_CONTEXT_SERVICE, ENDPOINT_OVERRIDE, SIGNER_OVERRIDE, PROXY_CONFIGURATION_SERVICE, PROXY_HOST, PROXY_HOST_PORT, PROXY_USERNAME, PROXY_PASSWORD));
 
     @Override
     protected List<PropertyDescriptor> getSupportedPropertyDescriptors() {

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/s3/ListS3.java
Patch:
@@ -137,7 +137,8 @@ public class ListS3 extends AbstractS3Processor {
     public static final List<PropertyDescriptor> properties = Collections.unmodifiableList(
             Arrays.asList(BUCKET, REGION, ACCESS_KEY, SECRET_KEY, CREDENTIALS_FILE,
                     AWS_CREDENTIALS_PROVIDER_SERVICE, TIMEOUT, SSL_CONTEXT_SERVICE, ENDPOINT_OVERRIDE,
-                    SIGNER_OVERRIDE, PROXY_HOST, PROXY_HOST_PORT, DELIMITER, PREFIX, USE_VERSIONS, LIST_TYPE, MIN_AGE));
+                    SIGNER_OVERRIDE, PROXY_CONFIGURATION_SERVICE, PROXY_HOST, PROXY_HOST_PORT, PROXY_USERNAME, PROXY_PASSWORD,
+                    DELIMITER, PREFIX, USE_VERSIONS, LIST_TYPE, MIN_AGE));
 
     public static final Set<Relationship> relationships = Collections.unmodifiableSet(
             new HashSet<>(Collections.singletonList(REL_SUCCESS)));

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/s3/PutS3Object.java
Patch:
@@ -209,7 +209,7 @@ public class PutS3Object extends AbstractS3Processor {
         Arrays.asList(KEY, BUCKET, CONTENT_TYPE, ACCESS_KEY, SECRET_KEY, CREDENTIALS_FILE, AWS_CREDENTIALS_PROVIDER_SERVICE, STORAGE_CLASS, REGION, TIMEOUT, EXPIRATION_RULE_ID,
             FULL_CONTROL_USER_LIST, READ_USER_LIST, WRITE_USER_LIST, READ_ACL_LIST, WRITE_ACL_LIST, OWNER, CANNED_ACL, SSL_CONTEXT_SERVICE,
             ENDPOINT_OVERRIDE, SIGNER_OVERRIDE, MULTIPART_THRESHOLD, MULTIPART_PART_SIZE, MULTIPART_S3_AGEOFF_INTERVAL, MULTIPART_S3_MAX_AGE,
-            SERVER_SIDE_ENCRYPTION, PROXY_HOST, PROXY_HOST_PORT));
+            SERVER_SIDE_ENCRYPTION, PROXY_CONFIGURATION_SERVICE, PROXY_HOST, PROXY_HOST_PORT, PROXY_USERNAME, PROXY_PASSWORD));
 
     final static String S3_BUCKET_KEY = "s3.bucket";
     final static String S3_OBJECT_KEY = "s3.key";

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/sns/PutSNS.java
Patch:
@@ -77,7 +77,7 @@ public class PutSNS extends AbstractSNSProcessor {
 
     public static final List<PropertyDescriptor> properties = Collections.unmodifiableList(
             Arrays.asList(ARN, ARN_TYPE, SUBJECT, REGION, ACCESS_KEY, SECRET_KEY, CREDENTIALS_FILE, AWS_CREDENTIALS_PROVIDER_SERVICE, TIMEOUT,
-                    USE_JSON_STRUCTURE, CHARACTER_ENCODING, PROXY_HOST, PROXY_HOST_PORT));
+                    USE_JSON_STRUCTURE, CHARACTER_ENCODING, PROXY_HOST, PROXY_HOST_PORT, PROXY_USERNAME, PROXY_PASSWORD));
 
     public static final int MAX_SIZE = 256 * 1024;
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/util/FTPUtils.java
Patch:
@@ -297,4 +297,5 @@ public void setTransferMode(final String val) {
         }
 
     }
+
 }

File: nifi-mock/src/main/java/org/apache/nifi/util/MockPropertyValue.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.nifi.util;
 
-import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
@@ -210,7 +209,7 @@ public PropertyValue evaluateAttributeExpressions(final FlowFile flowFile) throw
          * raises an error which makes it not mimick real world behavior.
          */
         if (flowFile == null) {
-            return evaluateAttributeExpressions(new HashMap<>());
+            return evaluateAttributeExpressions(null, (Map<String,String>)null);
         }
         return evaluateAttributeExpressions(flowFile, null, null);
     }

File: nifi-nar-bundles/nifi-mongodb-bundle/nifi-mongodb-processors/src/main/java/org/apache/nifi/processors/mongodb/DeleteMongo.java
Patch:
@@ -128,7 +128,7 @@ public List<PropertyDescriptor> getSupportedPropertyDescriptors() {
     public void onTrigger(ProcessContext context, ProcessSession session) throws ProcessException {
         FlowFile flowFile = session.get();
         final WriteConcern writeConcern = getWriteConcern(context);
-        final MongoCollection<Document> collection = getCollection(context).withWriteConcern(writeConcern);
+        final MongoCollection<Document> collection = getCollection(context, flowFile).withWriteConcern(writeConcern);
         final String deleteMode = context.getProperty(DELETE_MODE).getValue();
         final String deleteAttr = flowFile.getAttribute("mongodb.delete.mode");
         final Boolean failMode  = context.getProperty(FAIL_ON_NO_DELETE).asBoolean();

File: nifi-nar-bundles/nifi-mongodb-bundle/nifi-mongodb-processors/src/main/java/org/apache/nifi/processors/mongodb/GetMongo.java
Patch:
@@ -297,7 +297,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
         configureMapper(jsonTypeSetting);
 
 
-        final MongoCollection<Document> collection = getCollection(context);
+        final MongoCollection<Document> collection = getCollection(context, input);
 
         try {
             final FindIterable<Document> it = query != null ? collection.find(query) : collection.find();

File: nifi-nar-bundles/nifi-mongodb-bundle/nifi-mongodb-processors/src/main/java/org/apache/nifi/processors/mongodb/PutMongoRecord.java
Patch:
@@ -113,7 +113,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
 
         final WriteConcern writeConcern = getWriteConcern(context);
 
-        final MongoCollection<Document> collection = getCollection(context).withWriteConcern(writeConcern);
+        final MongoCollection<Document> collection = getCollection(context, flowFile).withWriteConcern(writeConcern);
 
         List<Document> inserts = new ArrayList<>();
         int ceiling = context.getProperty(INSERT_COUNT).asInteger();

File: nifi-nar-bundles/nifi-mongodb-bundle/nifi-mongodb-processors/src/main/java/org/apache/nifi/processors/mongodb/RunMongoAggregation.java
Patch:
@@ -172,7 +172,7 @@ public void onTrigger(ProcessContext context, ProcessSession session) throws Pro
             attrs.put(queryAttr, query);
         }
 
-        MongoCollection<Document> collection = getCollection(context);
+        MongoCollection<Document> collection = getCollection(context, flowFile);
         MongoCursor<Document> iter = null;
 
         try {

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/AttributesToJSON.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.nifi.annotation.documentation.Tags;
 import org.apache.nifi.annotation.lifecycle.OnScheduled;
 import org.apache.nifi.components.PropertyDescriptor;
+import org.apache.nifi.expression.ExpressionLanguageScope;
 import org.apache.nifi.flowfile.FlowFile;
 import org.apache.nifi.flowfile.attributes.CoreAttributes;
 import org.apache.nifi.processor.AbstractProcessor;
@@ -88,7 +89,7 @@ public class AttributesToJSON extends AbstractProcessor {
                     + "the matching attributes. This property can be used in combination with the attributes "
                     + "list property.")
             .required(false)
-            .expressionLanguageSupported(true)
+            .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)
             .addValidator(StandardValidators.createRegexValidator(0, Integer.MAX_VALUE, true))
             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)
             .build();

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/EncryptContent.java
Patch:
@@ -42,6 +42,7 @@
 import org.apache.nifi.components.PropertyDescriptor;
 import org.apache.nifi.components.ValidationContext;
 import org.apache.nifi.components.ValidationResult;
+import org.apache.nifi.expression.ExpressionLanguageScope;
 import org.apache.nifi.flowfile.FlowFile;
 import org.apache.nifi.flowfile.attributes.CoreAttributes;
 import org.apache.nifi.logging.ComponentLog;
@@ -134,7 +135,7 @@ public class EncryptContent extends AbstractProcessor {
             .description("In a PGP decrypt mode, this is the private keyring passphrase")
             .required(false)
             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)
-            .expressionLanguageSupported(true)
+            .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)
             .sensitive(true)
             .build();
     public static final PropertyDescriptor RAW_KEY_HEX = new PropertyDescriptor.Builder()

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/InvokeHTTP.java
Patch:
@@ -233,7 +233,7 @@ public final class InvokeHTTP extends AbstractProcessor {
             .displayName("Proxy Type")
             .description("The type of the proxy we are connecting to. Must be either " + HTTP + " or " + HTTPS)
             .defaultValue(HTTP)
-            .expressionLanguageSupported(true)
+            .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)
             .addValidator(StandardValidators.NON_EMPTY_EL_VALIDATOR)
             .build();
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ListenTCPRecord.java
Patch:
@@ -30,6 +30,7 @@
 import org.apache.nifi.components.PropertyDescriptor;
 import org.apache.nifi.components.ValidationContext;
 import org.apache.nifi.components.ValidationResult;
+import org.apache.nifi.expression.ExpressionLanguageScope;
 import org.apache.nifi.flowfile.FlowFile;
 import org.apache.nifi.flowfile.attributes.CoreAttributes;
 import org.apache.nifi.processor.AbstractProcessor;
@@ -102,7 +103,7 @@ public class ListenTCPRecord extends AbstractProcessor {
             .description("The port to listen on for communication.")
             .required(true)
             .addValidator(StandardValidators.PORT_VALIDATOR)
-            .expressionLanguageSupported(true)
+            .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)
             .build();
 
     static final PropertyDescriptor READ_TIMEOUT = new PropertyDescriptor.Builder()

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ListenUDP.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.nifi.components.ValidationContext;
 import org.apache.nifi.components.ValidationResult;
 import org.apache.nifi.components.Validator;
+import org.apache.nifi.expression.ExpressionLanguageScope;
 import org.apache.nifi.processor.DataUnit;
 import org.apache.nifi.processor.ProcessContext;
 import org.apache.nifi.processor.util.StandardValidators;
@@ -69,15 +70,15 @@ public class ListenUDP extends AbstractListenEventBatchingProcessor<StandardEven
             .description("IP, or name, of a remote host. Only Datagrams from the specified Sending Host Port and this host will "
                     + "be accepted. Improves Performance. May be a system property or an environment variable.")
             .addValidator(new HostValidator())
-            .expressionLanguageSupported(true)
+            .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)
             .build();
 
     public static final PropertyDescriptor SENDING_HOST_PORT = new PropertyDescriptor.Builder()
             .name("Sending Host Port")
             .description("Port being used by remote host to send Datagrams. Only Datagrams from the specified Sending Host and "
                     + "this port will be accepted. Improves Performance. May be a system property or an environment variable.")
             .addValidator(StandardValidators.PORT_VALIDATOR)
-            .expressionLanguageSupported(true)
+            .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)
             .build();
 
     public static final String UDP_PORT_ATTR = "udp.port";

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/LogAttribute.java
Patch:
@@ -38,6 +38,7 @@
 import org.apache.nifi.annotation.behavior.SupportsBatching;
 import org.apache.nifi.annotation.documentation.Tags;
 import org.apache.nifi.components.PropertyDescriptor;
+import org.apache.nifi.expression.ExpressionLanguageScope;
 import org.apache.nifi.flowfile.FlowFile;
 import org.apache.nifi.logging.ComponentLog;
 import org.apache.nifi.processor.AbstractProcessor;
@@ -110,14 +111,14 @@ public class LogAttribute extends AbstractProcessor {
             .required(false)
             .description("Log prefix appended to the log lines. It helps to distinguish the output of multiple LogAttribute processors.")
             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)
-            .expressionLanguageSupported(true)
+            .expressionLanguageSupported(ExpressionLanguageScope.FLOWFILE_ATTRIBUTES)
             .build();
 
     public static final PropertyDescriptor CHARSET = new PropertyDescriptor.Builder()
             .name("character-set")
             .displayName("Character Set")
             .description("The name of the CharacterSet to use")
-            .expressionLanguageSupported(true)
+            .expressionLanguageSupported(ExpressionLanguageScope.FLOWFILE_ATTRIBUTES)
             .addValidator(StandardValidators.CHARACTER_SET_VALIDATOR)
             .defaultValue(Charset.defaultCharset().name())
             .required(true)

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ValidateRecord.java
Patch:
@@ -35,6 +35,7 @@
 import org.apache.nifi.components.PropertyDescriptor;
 import org.apache.nifi.components.ValidationContext;
 import org.apache.nifi.components.ValidationResult;
+import org.apache.nifi.expression.ExpressionLanguageScope;
 import org.apache.nifi.flowfile.FlowFile;
 import org.apache.nifi.flowfile.attributes.CoreAttributes;
 import org.apache.nifi.processor.AbstractProcessor;
@@ -142,7 +143,7 @@ public class ValidateRecord extends AbstractProcessor {
         .displayName("Schema Name")
         .description("Specifies the name of the schema to lookup in the Schema Registry property")
         .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)
-        .expressionLanguageSupported(true)
+        .expressionLanguageSupported(ExpressionLanguageScope.FLOWFILE_ATTRIBUTES)
         .defaultValue("${schema.name}")
         .required(false)
         .build();
@@ -151,7 +152,7 @@ public class ValidateRecord extends AbstractProcessor {
         .displayName("Schema Text")
         .description("The text of an Avro-formatted Schema")
         .addValidator(new AvroSchemaValidator())
-        .expressionLanguageSupported(true)
+        .expressionLanguageSupported(ExpressionLanguageScope.FLOWFILE_ATTRIBUTES)
         .defaultValue("${avro.schema}")
         .required(false)
         .build();

File: nifi-nar-bundles/nifi-standard-services/nifi-kerberos-credentials-service-bundle/nifi-kerberos-credentials-service/src/main/java/org/apache/nifi/kerberos/KeytabCredentialsService.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.nifi.controller.AbstractControllerService;
 import org.apache.nifi.controller.ConfigurationContext;
 import org.apache.nifi.controller.ControllerServiceInitializationContext;
+import org.apache.nifi.expression.ExpressionLanguageScope;
 import org.apache.nifi.processor.util.StandardValidators;
 import org.apache.nifi.reporting.InitializationException;
 
@@ -51,15 +52,15 @@ public class KeytabCredentialsService extends AbstractControllerService implemen
         .name("Kerberos Principal")
         .description("Kerberos principal to authenticate as. Requires nifi.kerberos.krb5.file to be set in your nifi.properties")
         .addValidator(StandardValidators.NON_BLANK_VALIDATOR)
-        .expressionLanguageSupported(true)
+        .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)
         .required(true)
         .build();
 
     static final PropertyDescriptor KEYTAB = new PropertyDescriptor.Builder()
         .name("Kerberos Keytab")
         .description("Kerberos keytab associated with the principal. Requires nifi.kerberos.krb5.file to be set in your nifi.properties")
         .addValidator(StandardValidators.FILE_EXISTS_VALIDATOR)
-        .expressionLanguageSupported(true)
+        .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)
         .required(true)
         .build();
 

File: nifi-api/src/main/java/org/apache/nifi/components/ConfigurableComponent.java
Patch:
@@ -26,13 +26,13 @@ public interface ConfigurableComponent {
     /**
      * Validates a set of properties, returning ValidationResults for any
      * invalid properties. All defined properties will be validated. If they are
-     * not included in the in the purposed configuration, the default value will
+     * not included in the purposed configuration, the default value will
      * be used.
      *
      * @param context of validation
      * @return Collection of validation result objects for any invalid findings
-     * only. If the collection is empty then the component is valid. Guaranteed
-     * non-null
+     *         only. If the collection is empty then the component is valid. Guaranteed
+     *         non-null
      */
     Collection<ValidationResult> validate(ValidationContext context);
 

File: nifi-api/src/main/java/org/apache/nifi/components/ValidationResult.java
Patch:
@@ -30,7 +30,7 @@ public class ValidationResult {
     private final String explanation;
     private final boolean valid;
 
-    private ValidationResult(final Builder builder) {
+    protected ValidationResult(final Builder builder) {
         this.subject = builder.subject;
         this.input = builder.input;
         this.explanation = builder.explanation;

File: nifi-api/src/main/java/org/apache/nifi/components/Validator.java
Patch:
@@ -28,7 +28,7 @@ public interface Validator {
     Validator INVALID = new Validator() {
         @Override
         public ValidationResult validate(final String subject, final String input, final ValidationContext context) {
-            return new ValidationResult.Builder().subject(subject).explanation(String.format("'%s' is not a supported property", subject)).input(input).build();
+            return new ValidationResult.Builder().subject(subject).explanation(String.format("'%s' is not a supported property or has no Validator associated with it", subject)).input(input).build();
         }
     };
 

File: nifi-nar-bundles/nifi-extension-utils/nifi-record-utils/nifi-avro-record-utils/src/main/java/org/apache/nifi/schema/access/SchemaAccessUtils.java
Patch:
@@ -85,7 +85,7 @@ public class SchemaAccessUtils {
             .description("Specifies the name of the branch to use when looking up the schema in the Schema Registry property. " +
                     "If the chosen Schema Registry does not support branching, this value will be ignored.")
             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)
-            .expressionLanguageSupported(true)
+            .expressionLanguageSupported(ExpressionLanguageScope.FLOWFILE_ATTRIBUTES)
             .required(false)
             .build();
 
@@ -95,7 +95,7 @@ public class SchemaAccessUtils {
             .description("Specifies the version of the schema to lookup in the Schema Registry. " +
                     "If not specified then the latest version of the schema will be retrieved.")
             .addValidator(StandardValidators.POSITIVE_INTEGER_VALIDATOR)
-            .expressionLanguageSupported(true)
+            .expressionLanguageSupported(ExpressionLanguageScope.FLOWFILE_ATTRIBUTES)
             .required(false)
             .build();
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/FlowSnippetDTO.java
Patch:
@@ -196,7 +196,7 @@ private <T extends ComponentDTO> Set<T> orderedById(Set<T> dtos) {
         TreeSet<T> components = new TreeSet<>(new Comparator<ComponentDTO>() {
             @Override
             public int compare(ComponentDTO c1, ComponentDTO c2) {
-                return UUID.fromString(c1.getId()).compareTo(UUID.fromString(c2.getId()));
+                return c1.getId().compareTo(c2.getId());
             }
         });
         components.addAll(dtos);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/ReportingTaskNode.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.Set;
 import java.util.concurrent.TimeUnit;
 
-public interface ReportingTaskNode extends ConfiguredComponent {
+public interface ReportingTaskNode extends ComponentNode {
 
     void setSchedulingStrategy(SchedulingStrategy schedulingStrategy);
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/service/ControllerServiceReference.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.List;
 import java.util.Set;
 
-import org.apache.nifi.controller.ConfiguredComponent;
+import org.apache.nifi.controller.ComponentNode;
 
 /**
  * Provides a collection of components that are referencing a Controller Service
@@ -35,15 +35,15 @@ public interface ControllerServiceReference {
      * @return a {@link Set} of all components that are referencing this
      * Controller Service
      */
-    Set<ConfiguredComponent> getReferencingComponents();
+    Set<ComponentNode> getReferencingComponents();
 
     /**
      * @return a {@link Set} of all Processors, Reporting Tasks, and Controller
      * Services that are referencing the Controller Service and are running (in
      * the case of Processors and Reporting Tasks) or enabled (in the case of
      * Controller Services)
      */
-    Set<ConfiguredComponent> getActiveReferences();
+    Set<ComponentNode> getActiveReferences();
 
     /**
      * Returns a List of all components that reference this Controller Service (recursively) that

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/TemplateUtils.java
Patch:
@@ -182,6 +182,7 @@ private static void scrubProcessors(final Set<ProcessorDTO> processors) {
             processorDTO.setExtensionMissing(null);
             processorDTO.setMultipleVersionsAvailable(null);
             processorDTO.setValidationErrors(null);
+            processorDTO.setValidationStatus(null);
             processorDTO.setInputRequirement(null);
             processorDTO.setDescription(null);
             processorDTO.setInputRequirement(null);
@@ -236,6 +237,7 @@ private static void scrubControllerServices(final Set<ControllerServiceDTO> cont
 
             serviceDTO.setCustomUiUrl(null);
             serviceDTO.setValidationErrors(null);
+            serviceDTO.setValidationStatus(null);
         }
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/service/StandardConfigurationContext.java
Patch:
@@ -27,21 +27,21 @@
 import org.apache.nifi.components.PropertyDescriptor;
 import org.apache.nifi.components.PropertyValue;
 import org.apache.nifi.controller.ConfigurationContext;
-import org.apache.nifi.controller.ConfiguredComponent;
+import org.apache.nifi.controller.ComponentNode;
 import org.apache.nifi.controller.ControllerServiceLookup;
 import org.apache.nifi.registry.VariableRegistry;
 import org.apache.nifi.util.FormatUtils;
 
 public class StandardConfigurationContext implements ConfigurationContext {
 
-    private final ConfiguredComponent component;
+    private final ComponentNode component;
     private final ControllerServiceLookup serviceLookup;
     private final Map<PropertyDescriptor, PreparedQuery> preparedQueries;
     private final VariableRegistry variableRegistry;
     private final String schedulingPeriod;
     private final Long schedulingNanos;
 
-    public StandardConfigurationContext(final ConfiguredComponent component, final ControllerServiceLookup serviceLookup, final String schedulingPeriod,
+    public StandardConfigurationContext(final ComponentNode component, final ControllerServiceLookup serviceLookup, final String schedulingPeriod,
                                         final VariableRegistry variableRegistry) {
         this.component = component;
         this.serviceLookup = serviceLookup;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/registry/flow/mapping/NiFiRegistryFlowMapper.java
Patch:
@@ -37,7 +37,7 @@
 import org.apache.nifi.connectable.Connection;
 import org.apache.nifi.connectable.Funnel;
 import org.apache.nifi.connectable.Port;
-import org.apache.nifi.controller.ConfiguredComponent;
+import org.apache.nifi.controller.ComponentNode;
 import org.apache.nifi.controller.ControllerService;
 import org.apache.nifi.controller.ProcessorNode;
 import org.apache.nifi.controller.label.Label;
@@ -315,7 +315,7 @@ public VersionedControllerService mapControllerService(final ControllerServiceNo
         return versionedService;
     }
 
-    private Map<String, String> mapProperties(final ConfiguredComponent component, final ControllerServiceProvider serviceProvider) {
+    private Map<String, String> mapProperties(final ComponentNode component, final ControllerServiceProvider serviceProvider) {
         final Map<String, String> mapped = new HashMap<>();
 
         component.getProperties().keySet().stream()
@@ -341,7 +341,7 @@ private Map<String, String> mapProperties(final ConfiguredComponent component, f
         return mapped;
     }
 
-    private Map<String, VersionedPropertyDescriptor> mapPropertyDescriptors(final ConfiguredComponent component) {
+    private Map<String, VersionedPropertyDescriptor> mapPropertyDescriptors(final ComponentNode component) {
         final Map<String, VersionedPropertyDescriptor> descriptors = new HashMap<>();
         for (final PropertyDescriptor descriptor : component.getProperties().keySet()) {
             final VersionedPropertyDescriptor versionedDescriptor = new VersionedPropertyDescriptor();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/serialization/StandardFlowSerializerTest.java
Patch:
@@ -36,6 +36,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.Mockito;
+import org.w3c.dom.Document;
 
 import java.io.ByteArrayOutputStream;
 import java.io.File;
@@ -101,7 +102,8 @@ public void testSerializationEscapingAndFiltering() throws Exception {
 
         // serialize the controller
         final ByteArrayOutputStream os = new ByteArrayOutputStream();
-        serializer.serialize(controller, os, ScheduledStateLookup.IDENTITY_LOOKUP);
+        final Document doc = serializer.transform(controller, ScheduledStateLookup.IDENTITY_LOOKUP);
+        serializer.serialize(doc, os);
 
         // verify the results contain the serialized string
         final String serializedFlow = os.toString(StandardCharsets.UTF_8.name());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/service/StandardControllerServiceProviderIT.java
Patch:
@@ -40,6 +40,7 @@
 import org.apache.nifi.nar.SystemBundle;
 import org.apache.nifi.registry.VariableRegistry;
 import org.apache.nifi.util.NiFiProperties;
+import org.apache.nifi.util.SynchronousValidationTrigger;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.mockito.Mockito;
@@ -101,7 +102,8 @@ public void testEnableReferencingServicesGraph(final StandardProcessScheduler sc
         final ProcessGroup procGroup = new MockProcessGroup(controller);
         Mockito.when(controller.getGroup(Mockito.anyString())).thenReturn(procGroup);
 
-        final StandardControllerServiceProvider provider = new StandardControllerServiceProvider(controller, scheduler, null, stateManagerProvider, variableRegistry, niFiProperties);
+        final StandardControllerServiceProvider provider = new StandardControllerServiceProvider(controller, scheduler, null,
+            stateManagerProvider, variableRegistry, niFiProperties, new SynchronousValidationTrigger());
 
         // build a graph of controller services with dependencies as such:
         //

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/service/StandardControllerServiceProviderTest.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.nifi.registry.variable.FileBasedVariableRegistry;
 import org.apache.nifi.reporting.InitializationException;
 import org.apache.nifi.util.NiFiProperties;
+import org.apache.nifi.util.SynchronousValidationTrigger;
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
@@ -80,7 +81,7 @@ public void disableClusterProvider() {
             @Override
             public void onComponentRemoved(String componentId) {
             }
-        }, variableRegistry, nifiProperties);
+        }, variableRegistry, nifiProperties, new SynchronousValidationTrigger());
         ControllerServiceNode node = provider.createControllerService(clazz, id, systemBundle.getBundleDetails().getCoordinate(), null, true);
         proxied = node.getProxiedControllerService();
         implementation = node.getControllerServiceImplementation();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/service/mock/MockProcessGroup.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.nifi.connectable.Port;
 import org.apache.nifi.connectable.Position;
 import org.apache.nifi.connectable.Positionable;
-import org.apache.nifi.controller.ConfiguredComponent;
+import org.apache.nifi.controller.ComponentNode;
 import org.apache.nifi.controller.FlowController;
 import org.apache.nifi.controller.ProcessorNode;
 import org.apache.nifi.controller.Snippet;
@@ -627,7 +627,7 @@ public void setVariables(Map<String, String> variables) {
     }
 
     @Override
-    public Set<ConfiguredComponent> getComponentsAffectedByVariable(String variableName) {
+    public Set<ComponentNode> getComponentsAffectedByVariable(String variableName) {
         return Collections.emptySet();
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-nar-utils/src/main/java/org/apache/nifi/nar/ExtensionManager.java
Patch:
@@ -381,7 +381,7 @@ public static InstanceClassLoader createInstanceClassLoader(final String classTy
 
         if (logger.isTraceEnabled()) {
             for (URL url : instanceClassLoader.getURLs()) {
-                logger.trace("URL resource {} for {}...", new Object[]{url.toExternalForm(), instanceIdentifier});
+                logger.trace("URL resource {} for {}...", new Object[] {url.toExternalForm(), instanceIdentifier});
             }
         }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/audit/ControllerServiceAuditor.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.nifi.authorization.user.NiFiUserUtils;
 import org.apache.nifi.bundle.BundleCoordinate;
 import org.apache.nifi.components.PropertyDescriptor;
-import org.apache.nifi.controller.ConfiguredComponent;
+import org.apache.nifi.controller.ComponentNode;
 import org.apache.nifi.controller.ProcessorNode;
 import org.apache.nifi.controller.ReportingTaskNode;
 import org.apache.nifi.controller.ScheduledState;
@@ -259,9 +259,9 @@ public Object updateControllerServiceReferenceAdvice(ProceedingJoinPoint proceed
      * @param referencingComponents components
      */
     private void getUpdateActionsForReferencingComponents(
-            final NiFiUser user, final Collection<Action> actions, final Collection<String> visitedServices, final Set<ConfiguredComponent> referencingComponents) {
+            final NiFiUser user, final Collection<Action> actions, final Collection<String> visitedServices, final Set<ComponentNode> referencingComponents) {
         // consider each component updates
-        for (final ConfiguredComponent component : referencingComponents) {
+        for (final ComponentNode component : referencingComponents) {
             if (component instanceof ProcessorNode) {
                 final ProcessorNode processor = ((ProcessorNode) component);
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java
Patch:
@@ -3232,7 +3232,7 @@ public Response instantiateTemplate(
                 instantiateTemplateRequestEntity -> {
                     // create the template and generate the json
                     final FlowEntity entity = serviceFacade.createTemplateInstance(groupId, instantiateTemplateRequestEntity.getOriginX(), instantiateTemplateRequestEntity.getOriginY(),
-                            instantiateTemplateRequestEntity.getEncodingVersion(), instantiateTemplateRequestEntity.getSnippet(), getIdGenerationSeed().orElse(null));
+                        instantiateTemplateRequestEntity.getEncodingVersion(), instantiateTemplateRequestEntity.getSnippet(), getIdGenerationSeed().orElse(null));
 
                     final FlowDTO flowSnippet = entity.getFlow();
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/ControllerServiceDAO.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.nifi.components.state.Scope;
 import org.apache.nifi.components.state.StateMap;
-import org.apache.nifi.controller.ConfiguredComponent;
+import org.apache.nifi.controller.ComponentNode;
 import org.apache.nifi.controller.ScheduledState;
 import org.apache.nifi.controller.service.ControllerServiceNode;
 import org.apache.nifi.controller.service.ControllerServiceState;
@@ -81,7 +81,7 @@ public interface ControllerServiceDAO {
      * @param controllerServiceState the value of state
      * @return the set of all components that were modified as a result of this action
      */
-    Set<ConfiguredComponent> updateControllerServiceReferencingComponents(String controllerServiceId, ScheduledState scheduledState, ControllerServiceState controllerServiceState);
+    Set<ComponentNode> updateControllerServiceReferencingComponents(String controllerServiceId, ScheduledState scheduledState, ControllerServiceState controllerServiceState);
 
     /**
      * Determines whether this controller service can be updated.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardControllerServiceDAO.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.nifi.components.ConfigurableComponent;
 import org.apache.nifi.components.state.Scope;
 import org.apache.nifi.components.state.StateMap;
-import org.apache.nifi.controller.ConfiguredComponent;
+import org.apache.nifi.controller.ComponentNode;
 import org.apache.nifi.controller.FlowController;
 import org.apache.nifi.controller.ScheduledState;
 import org.apache.nifi.controller.exception.ControllerServiceInstantiationException;
@@ -180,7 +180,7 @@ public ControllerServiceNode updateControllerService(final ControllerServiceDTO
             // and notify the Process Group that a component has been modified. This way, we know to re-calculate
             // whether or not the Process Group has local modifications.
             controllerService.getReferences().getReferencingComponents().stream()
-                .map(ConfiguredComponent::getProcessGroupIdentifier)
+                .map(ComponentNode::getProcessGroupIdentifier)
                 .filter(id -> !id.equals(group.getIdentifier()))
                 .forEach(groupId -> {
                     final ProcessGroup descendant = group.findProcessGroup(groupId);
@@ -213,7 +213,7 @@ private void updateBundle(final ControllerServiceNode controllerService, final C
     }
 
     @Override
-    public Set<ConfiguredComponent> updateControllerServiceReferencingComponents(
+    public Set<ComponentNode> updateControllerServiceReferencingComponents(
             final String controllerServiceId, final ScheduledState scheduledState, final ControllerServiceState controllerServiceState) {
         // get the controller service
         final ControllerServiceNode controllerService = locateControllerService(controllerServiceId);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardProcessorDAO.java
Patch:
@@ -313,7 +313,7 @@ public Set<ProcessorNode> getProcessors(String groupId, boolean includeDescendan
         if (includeDescendants) {
             return group.findAllProcessors().stream().collect(Collectors.toSet());
         } else {
-            return group.getProcessors();
+            return new HashSet<>(group.getProcessors());
         }
     }
 

File: nifi-nar-bundles/nifi-mongodb-bundle/nifi-mongodb-processors/src/main/java/org/apache/nifi/processors/mongodb/AbstractMongoProcessor.java
Patch:
@@ -267,8 +267,7 @@ protected WriteConcern getWriteConcern(final ProcessContext context) {
 
     protected void writeBatch(String payload, FlowFile parent, ProcessContext context, ProcessSession session,
             Map<String, String> extraAttributes, Relationship rel) throws UnsupportedEncodingException {
-        String charset = parent != null ? context.getProperty(CHARSET).evaluateAttributeExpressions(parent).getValue()
-                : context.getProperty(CHARSET).evaluateAttributeExpressions().getValue();
+        String charset = context.getProperty(CHARSET).evaluateAttributeExpressions(parent).getValue();
 
         FlowFile flowFile = parent != null ? session.create(parent) : session.create();
         flowFile = session.importFrom(new ByteArrayInputStream(payload.getBytes(charset)), flowFile);

File: nifi-nar-bundles/nifi-mongodb-bundle/nifi-mongodb-processors/src/main/java/org/apache/nifi/processors/mongodb/GetMongo.java
Patch:
@@ -96,7 +96,7 @@ public class GetMongo extends AbstractMongoProcessor {
                 "the flowfile's body. If this field is left blank and a timer is enabled instead of an incoming connection, " +
                 "that will result in a full collection fetch using a \"{}\" query.")
         .required(false)
-        .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)
+        .expressionLanguageSupported(ExpressionLanguageScope.FLOWFILE_ATTRIBUTES)
         .addValidator(DOCUMENT_VALIDATOR)
         .build();
 
@@ -346,6 +346,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
                     }
                 } else {
                     while (cursor.hasNext()) {
+                        final FlowFile ffPtr = input;
                         flowFile = session.create();
                         flowFile = session.write(flowFile, out -> {
                             String json;
@@ -354,7 +355,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
                             } else {
                                 json = cursor.next().toJson();
                             }
-                            out.write(json.getBytes(context.getProperty(CHARSET).evaluateAttributeExpressions().getValue()));
+                            out.write(json.getBytes(context.getProperty(CHARSET).evaluateAttributeExpressions(ffPtr).getValue()));
                         });
                         flowFile = session.putAllAttributes(flowFile, attributes);
 

File: nifi-nar-bundles/nifi-mongodb-bundle/nifi-mongodb-processors/src/main/java/org/apache/nifi/processors/mongodb/PutMongo.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.nifi.components.PropertyDescriptor;
 import org.apache.nifi.components.ValidationContext;
 import org.apache.nifi.components.ValidationResult;
+import org.apache.nifi.expression.ExpressionLanguageScope;
 import org.apache.nifi.flowfile.FlowFile;
 import org.apache.nifi.logging.ComponentLog;
 import org.apache.nifi.processor.ProcessContext;
@@ -92,15 +93,15 @@ public class PutMongo extends AbstractMongoProcessor {
                 + "otherwise it is ignored. Example: _id")
         .required(false)
         .addValidator(StandardValidators.NON_BLANK_VALIDATOR)
-        .expressionLanguageSupported(true)
+        .expressionLanguageSupported(ExpressionLanguageScope.FLOWFILE_ATTRIBUTES)
         .build();
     static final PropertyDescriptor UPDATE_QUERY = new PropertyDescriptor.Builder()
         .name("putmongo-update-query")
         .displayName("Update Query")
         .description("Specify a full MongoDB query to be used for the lookup query to do an update/upsert.")
         .required(false)
         .addValidator(StandardValidators.NON_BLANK_VALIDATOR)
-        .expressionLanguageSupported(true)
+        .expressionLanguageSupported(ExpressionLanguageScope.FLOWFILE_ATTRIBUTES)
         .build();
 
     static final PropertyDescriptor UPDATE_MODE = new PropertyDescriptor.Builder()

File: nifi-nar-bundles/nifi-hbase-bundle/nifi-hbase-processors/src/test/java/org/apache/nifi/hbase/TestGetHBase.java
Patch:
@@ -76,6 +76,9 @@ public void setup() throws InitializationException {
         runner.setProperty(GetHBase.TABLE_NAME, "nifi");
         runner.setProperty(GetHBase.DISTRIBUTED_CACHE_SERVICE, "cacheClient");
         runner.setProperty(GetHBase.HBASE_CLIENT_SERVICE, "hbaseClient");
+        runner.setProperty(GetHBase.AUTHORIZATIONS, "");
+
+        runner.setValidateExpressionUsage(true);
     }
 
     @After

File: nifi-nar-bundles/nifi-hbase-bundle/nifi-hbase-processors/src/test/java/org/apache/nifi/hbase/TestPutHBaseJSON.java
Patch:
@@ -505,6 +505,7 @@ private TestRunner getTestRunner(String table, String columnFamily, String batch
         runner.setProperty(PutHBaseJSON.TABLE_NAME, table);
         runner.setProperty(PutHBaseJSON.COLUMN_FAMILY, columnFamily);
         runner.setProperty(PutHBaseJSON.BATCH_SIZE, batchSize);
+
         return runner;
     }
 

File: nifi-nar-bundles/nifi-hbase-bundle/nifi-hbase-processors/src/test/java/org/apache/nifi/hbase/TestPutHBaseRecord.java
Patch:
@@ -64,6 +64,8 @@ private void generateTestData(TestRunner runner) throws IOException {
         }
         runner.enableControllerService(parser);
         runner.setProperty(PutHBaseRecord.RECORD_READER_FACTORY, "parser");
+        runner.setProperty(PutHBaseRecord.DEFAULT_VISIBILITY_STRING, "");
+        runner.setProperty(PutHBaseRecord.VISIBILITY_RECORD_PATH, "");
 
         parser.addSchemaField("id", RecordFieldType.INT);
         parser.addSchemaField("name", RecordFieldType.STRING);

File: nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/processors/AbstractJMSProcessor.java
Patch:
@@ -78,7 +78,7 @@ abstract class AbstractJMSProcessor<T extends JMSWorker> extends AbstractProcess
             .build();
     static final PropertyDescriptor DESTINATION_TYPE = new PropertyDescriptor.Builder()
             .name("Destination Type")
-            .description("The type of the JMS Destination. Could be one of 'QUEUE' or 'TOPIC'. Usually provided by the administrator. Defaults to 'TOPIC")
+            .description("The type of the JMS Destination. Could be one of 'QUEUE' or 'TOPIC'. Usually provided by the administrator. Defaults to 'QUEUE'")
             .required(true)
             .allowableValues(QUEUE, TOPIC)
             .defaultValue(QUEUE)

File: nifi-commons/nifi-record-path/src/main/java/org/apache/nifi/record/path/StandardFieldValue.java
Patch:
@@ -78,7 +78,7 @@ public String toString() {
             return Arrays.toString((Object[]) value);
         }
 
-        return value.toString();
+        return String.valueOf(value);
     }
 
     protected static FieldValue validateParentRecord(final FieldValue parent) {

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/json/JsonTreeRowRecordReader.java
Patch:
@@ -222,7 +222,7 @@ protected Object convertField(final JsonNode fieldNode, final String fieldName,
                 }
             }
             case CHOICE: {
-                return DataTypeUtils.convertType(getRawNodeValue(fieldNode), desiredType, fieldName);
+                return DataTypeUtils.convertType(getRawNodeValue(fieldNode, desiredType), desiredType, fieldName);
             }
         }
 

File: nifi-toolkit/nifi-toolkit-tls/src/test/java/org/apache/nifi/toolkit/tls/standalone/TlsToolkitStandaloneTest.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.nifi.toolkit.tls.commandLine.ExitCode;
 import org.apache.nifi.toolkit.tls.configuration.TlsConfig;
 import org.apache.nifi.toolkit.tls.service.TlsCertificateAuthorityTest;
+import org.apache.nifi.toolkit.tls.util.TlsHelper;
 import org.apache.nifi.toolkit.tls.util.TlsHelperTest;
 import org.apache.nifi.util.NiFiProperties;
 import org.junit.After;
@@ -293,7 +294,7 @@ private Properties checkHostDirAndReturnNifiProperties(String hostname, String d
     }
 
     private void checkClientCert(String clientDn, X509Certificate rootCert) throws Exception {
-        String clientDnFile = TlsToolkitStandalone.getClientDnFile(CertificateUtils.reorderDn(clientDn));
+        String clientDnFile = TlsHelper.escapeFilename(CertificateUtils.reorderDn(clientDn));
         String password;
         try (FileReader fileReader = new FileReader(new File(tempDir, clientDnFile + ".password"))) {
             List<String> lines = IOUtils.readLines(fileReader);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/repository/StandardProcessSession.java
Patch:
@@ -2677,7 +2677,7 @@ public FlowFile append(FlowFile source, final OutputStreamCallback writer) {
             if (outStream == null) {
                 claimCache.flush(oldClaim);
 
-                try (final InputStream oldClaimIn = context.getContentRepository().read(oldClaim)) {
+                try (final InputStream oldClaimIn = read(source)) {
                     newClaim = context.getContentRepository().create(context.getConnectable().isLossTolerant());
                     claimLog.debug("Creating ContentClaim {} for 'append' for {}", newClaim, source);
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/StandardFunnel.java
Patch:
@@ -190,7 +190,7 @@ public void updateConnection(final Connection connection) throws IllegalStateExc
             writeLock.lock();
             try {
                 if (!outgoingConnections.remove(connection)) {
-                    throw new IllegalStateException("No Connection with ID " + connection.getIdentifier() + " is currently registered with this Port");
+                    throw new IllegalStateException("No Connection with ID " + connection.getIdentifier() + " is currently registered with this Funnel");
                 }
                 outgoingConnections.add(connection);
             } finally {
@@ -202,7 +202,7 @@ public void updateConnection(final Connection connection) throws IllegalStateExc
             writeLock.lock();
             try {
                 if (!incomingConnections.remove(connection)) {
-                    throw new IllegalStateException("No Connection with ID " + connection.getIdentifier() + " is currently registered with this Port");
+                    throw new IllegalStateException("No Connection with ID " + connection.getIdentifier() + " is currently registered with this Funnel");
                 }
                 incomingConnections.add(connection);
             } finally {
@@ -218,7 +218,7 @@ public void removeConnection(final Connection connection) throws IllegalArgument
             if (!requireNonNull(connection).getSource().equals(this)) {
                 final boolean existed = incomingConnections.remove(connection);
                 if (!existed) {
-                    throw new IllegalStateException("The given connection is not currently registered for this ProcessorNode");
+                    throw new IllegalStateException("The given connection is not currently registered for this Funnel");
                 }
                 return;
             }

File: nifi-commons/nifi-record/src/main/java/org/apache/nifi/serialization/record/ResultSetRecordSet.java
Patch:
@@ -350,6 +350,8 @@ private static RecordFieldType getFieldType(final int sqlType) {
                 return RecordFieldType.TIME;
             case Types.TIMESTAMP:
             case Types.TIMESTAMP_WITH_TIMEZONE:
+            case -101: // Oracle's TIMESTAMP WITH TIME ZONE
+            case -102: // Oracle's TIMESTAMP WITH LOCAL TIME ZONE
                 return RecordFieldType.TIMESTAMP;
         }
 

File: nifi-nar-bundles/nifi-ambari-bundle/nifi-ambari-reporting-task/src/main/java/org/apache/nifi/reporting/ambari/AmbariReportingTask.java
Patch:
@@ -29,8 +29,8 @@
 import org.apache.nifi.processor.util.StandardValidators;
 import org.apache.nifi.reporting.AbstractReportingTask;
 import org.apache.nifi.reporting.ReportingContext;
-import org.apache.nifi.reporting.ambari.api.MetricsBuilder;
-import org.apache.nifi.reporting.ambari.metrics.MetricsService;
+import org.apache.nifi.reporting.util.metrics.MetricsService;
+import org.apache.nifi.reporting.util.metrics.api.MetricsBuilder;
 import org.apache.nifi.scheduling.SchedulingStrategy;
 
 import javax.json.Json;

File: nifi-nar-bundles/nifi-ambari-bundle/nifi-ambari-reporting-task/src/test/java/org/apache/nifi/reporting/ambari/api/TestMetricsBuilder.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.nifi.reporting.ambari.api;
 
+import org.apache.nifi.reporting.util.metrics.api.MetricFields;
+import org.apache.nifi.reporting.util.metrics.api.MetricsBuilder;
 import org.junit.Assert;
 import org.junit.Test;
 

File: nifi-nar-bundles/nifi-ambari-bundle/nifi-ambari-reporting-task/src/test/java/org/apache/nifi/reporting/ambari/metrics/TestMetricsService.java
Patch:
@@ -19,6 +19,8 @@
 import com.yammer.metrics.core.VirtualMachineMetrics;
 import org.apache.nifi.controller.status.ProcessGroupStatus;
 import org.apache.nifi.controller.status.ProcessorStatus;
+import org.apache.nifi.reporting.util.metrics.MetricNames;
+import org.apache.nifi.reporting.util.metrics.MetricsService;
 import org.junit.Assert;
 import org.junit.Test;
 

File: nifi-nar-bundles/nifi-extension-utils/nifi-reporting-utils/src/main/java/org/apache/nifi/reporting/util/metrics/api/MetricBuilder.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.reporting.ambari.api;
+package org.apache.nifi.reporting.util.metrics.api;
 
 import javax.json.JsonBuilderFactory;
 import javax.json.JsonObject;

File: nifi-nar-bundles/nifi-extension-utils/nifi-reporting-utils/src/main/java/org/apache/nifi/reporting/util/metrics/api/MetricFields.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.reporting.ambari.api;
+package org.apache.nifi.reporting.util.metrics.api;
 
 public interface MetricFields {
 

File: nifi-nar-bundles/nifi-extension-utils/nifi-reporting-utils/src/main/java/org/apache/nifi/reporting/util/metrics/api/MetricsBuilder.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.reporting.ambari.api;
+package org.apache.nifi.reporting.util.metrics.api;
 
 import javax.json.JsonArrayBuilder;
 import javax.json.JsonBuilderFactory;

File: nifi-nar-bundles/nifi-mongodb-bundle/nifi-mongodb-processors/src/test/java/org/apache/nifi/processors/mongodb/PutMongoIT.java
Patch:
@@ -104,6 +104,7 @@ public void testValidators() {
     @Test
     public void testQueryAndUpdateKey() {
         TestRunner runner = init(PutMongo.class);
+        runner.setProperty(PutMongo.MODE, PutMongo.MODE_UPDATE);
         runner.setProperty(PutMongo.UPDATE_QUERY_KEY, "_id");
         runner.setProperty(PutMongo.UPDATE_QUERY, "{}");
         runner.assertNotValid();
@@ -112,6 +113,7 @@ public void testQueryAndUpdateKey() {
     @Test
     public void testNoQueryAndNoUpdateKey() {
         TestRunner runner = init(PutMongo.class);
+        runner.setProperty(PutMongo.MODE, PutMongo.MODE_UPDATE);
         runner.removeProperty(PutMongo.UPDATE_QUERY);
         runner.setProperty(PutMongo.UPDATE_QUERY_KEY, "");
         runner.assertNotValid();

File: nifi-nar-bundles/nifi-hive-bundle/nifi-hive-processors/src/test/java/org/apache/nifi/processors/hive/TestPutHiveQL.java
Patch:
@@ -773,7 +773,8 @@ public Connection getConnection() throws ProcessException {
             try {
                 if (++successful > allowedBeforeFailure) {
                     final Connection conn = Mockito.mock(Connection.class);
-                    Mockito.when(conn.prepareStatement(Mockito.any(String.class))).thenThrow(new SQLException("Unit Test Generated SQLException"));
+                    // Throw a retryable error
+                    Mockito.when(conn.prepareStatement(Mockito.any(String.class))).thenThrow(new SQLException("Unit Test Generated SQLException", "42000", 20000));
                     return conn;
                 } else {
                     return service.getConnection();

File: nifi-api/src/main/java/org/apache/nifi/processor/AbstractProcessor.java
Patch:
@@ -27,7 +27,6 @@ public final void onTrigger(final ProcessContext context, final ProcessSessionFa
             onTrigger(context, session);
             session.commit();
         } catch (final Throwable t) {
-            getLogger().error("{} failed to process due to {}; rolling back session", new Object[]{this, t});
             session.rollback(true);
             throw t;
         }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/ProcessorDetails.java
Patch:
@@ -24,7 +24,6 @@
 import org.apache.nifi.annotation.behavior.TriggerWhenAnyDestinationAvailable;
 import org.apache.nifi.annotation.behavior.TriggerWhenEmpty;
 import org.apache.nifi.bundle.BundleCoordinate;
-import org.apache.nifi.logging.ComponentLog;
 import org.apache.nifi.processor.Processor;
 
 /**
@@ -41,7 +40,7 @@ public class ProcessorDetails {
     private final boolean eventDrivenSupported;
     private final boolean batchSupported;
     private final InputRequirement.Requirement inputRequirement;
-    private final ComponentLog componentLog;
+    private final TerminationAwareLogger componentLog;
     private final BundleCoordinate bundleCoordinate;
 
     public ProcessorDetails(final LoggableComponent<Processor> processor) {
@@ -101,7 +100,7 @@ public InputRequirement.Requirement getInputRequirement() {
         return inputRequirement;
     }
 
-    public ComponentLog getComponentLog() {
+    public TerminationAwareLogger getComponentLog() {
         return componentLog;
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/reporting/AbstractReportingTaskNode.java
Patch:
@@ -36,11 +36,11 @@
 import org.apache.nifi.controller.ReloadComponent;
 import org.apache.nifi.controller.ReportingTaskNode;
 import org.apache.nifi.controller.ScheduledState;
+import org.apache.nifi.controller.TerminationAwareLogger;
 import org.apache.nifi.controller.ValidationContextFactory;
 import org.apache.nifi.controller.service.ControllerServiceNode;
 import org.apache.nifi.controller.service.ControllerServiceProvider;
 import org.apache.nifi.controller.service.StandardConfigurationContext;
-import org.apache.nifi.logging.ComponentLog;
 import org.apache.nifi.registry.ComponentVariableRegistry;
 import org.apache.nifi.reporting.ReportingTask;
 import org.apache.nifi.scheduling.SchedulingStrategy;
@@ -115,7 +115,7 @@ public BundleCoordinate getBundleCoordinate() {
     }
 
     @Override
-    public ComponentLog getLogger() {
+    public TerminationAwareLogger getLogger() {
         return reportingTaskRef.get().getComponentLog();
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/reporting/ReportingTaskDetails.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.nifi.bundle.BundleCoordinate;
 import org.apache.nifi.controller.LoggableComponent;
-import org.apache.nifi.logging.ComponentLog;
+import org.apache.nifi.controller.TerminationAwareLogger;
 import org.apache.nifi.reporting.ReportingTask;
 
 /**
@@ -27,7 +27,7 @@
 class ReportingTaskDetails {
 
     private final ReportingTask reportingTask;
-    private final ComponentLog componentLog;
+    private final TerminationAwareLogger componentLog;
     private final BundleCoordinate bundleCoordinate;
 
     public ReportingTaskDetails(final LoggableComponent<ReportingTask> reportingTask) {
@@ -40,7 +40,7 @@ public ReportingTask getReportingTask() {
         return reportingTask;
     }
 
-    public ComponentLog getComponentLog() {
+    public TerminationAwareLogger getComponentLog() {
         return componentLog;
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/repository/RepositoryContext.java
Patch:
@@ -35,7 +35,7 @@
 /**
  *
  */
-public class ProcessContext {
+public class RepositoryContext {
 
     private final Connectable connectable;
     private final ContentRepository contentRepo;
@@ -45,7 +45,7 @@ public class ProcessContext {
     private final ProvenanceEventRepository provenanceRepo;
     private final AtomicLong connectionIndex;
 
-    public ProcessContext(final Connectable connectable, final AtomicLong connectionIndex, final ContentRepository contentRepository,
+    public RepositoryContext(final Connectable connectable, final AtomicLong connectionIndex, final ContentRepository contentRepository,
             final FlowFileRepository flowFileRepository, final FlowFileEventRepository flowFileEventRepository,
             final CounterRepository counterRepository, final ProvenanceEventRepository provenanceRepository) {
         this.connectable = connectable;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/repository/claim/ContentClaimWriteCache.java
Patch:
@@ -20,16 +20,16 @@
 import java.io.BufferedOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
-import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.Map;
 import java.util.Queue;
+import java.util.concurrent.ConcurrentHashMap;
 
 import org.apache.nifi.controller.repository.ContentRepository;
 
 public class ContentClaimWriteCache {
     private final ContentRepository contentRepo;
-    private final Map<ResourceClaim, OutputStream> streamMap = new HashMap<>();
+    private final Map<ResourceClaim, OutputStream> streamMap = new ConcurrentHashMap<>();
     private final Queue<ContentClaim> queue = new LinkedList<>();
     private final int bufferSize;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/service/ControllerServiceDetails.java
Patch:
@@ -19,7 +19,7 @@
 import org.apache.nifi.bundle.BundleCoordinate;
 import org.apache.nifi.controller.ControllerService;
 import org.apache.nifi.controller.LoggableComponent;
-import org.apache.nifi.logging.ComponentLog;
+import org.apache.nifi.controller.TerminationAwareLogger;
 
 /**
  * Holder for StandardControllerServiceNode to atomically swap out the component.
@@ -28,7 +28,7 @@ public class ControllerServiceDetails {
 
     private final ControllerService proxiedControllerService;
     private final ControllerService implementation;
-    private final ComponentLog componentLog;
+    private final TerminationAwareLogger componentLog;
     private final BundleCoordinate bundleCoordinate;
     private final ControllerServiceInvocationHandler invocationHandler;
 
@@ -50,7 +50,7 @@ public ControllerService getImplementation() {
         return implementation;
     }
 
-    public ComponentLog getComponentLog() {
+    public TerminationAwareLogger getComponentLog() {
         return componentLog;
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/service/StandardControllerServiceNode.java
Patch:
@@ -54,6 +54,7 @@
 import org.apache.nifi.controller.ControllerService;
 import org.apache.nifi.controller.LoggableComponent;
 import org.apache.nifi.controller.ReloadComponent;
+import org.apache.nifi.controller.TerminationAwareLogger;
 import org.apache.nifi.controller.ValidationContextFactory;
 import org.apache.nifi.controller.exception.ControllerServiceInstantiationException;
 import org.apache.nifi.groups.ProcessGroup;
@@ -112,7 +113,7 @@ public ConfigurableComponent getComponent() {
     }
 
     @Override
-    public ComponentLog getLogger() {
+    public TerminationAwareLogger getLogger() {
         return controllerServiceHolder.get().getComponentLog();
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/TestFlowController.java
Patch:
@@ -769,7 +769,7 @@ public void testInstantiateSnippetWhenProcessorMissingBundle() throws Exception
         processorDTO.setDescription("description");
         processorDTO.setSupportsParallelProcessing(!processorNode.isTriggeredSerially());
         processorDTO.setSupportsEventDriven(processorNode.isEventDrivenSupported());
-        processorDTO.setSupportsBatching(processorNode.isHighThroughputSupported());
+        processorDTO.setSupportsBatching(processorNode.isSessionBatchingSupported());
 
         ProcessorConfigDTO configDTO = new ProcessorConfigDTO();
         configDTO.setSchedulingPeriod(processorNode.getSchedulingPeriod());
@@ -822,7 +822,7 @@ public void testInstantiateSnippetWithProcessor() throws ProcessorInstantiationE
         processorDTO.setDescription("description");
         processorDTO.setSupportsParallelProcessing(!processorNode.isTriggeredSerially());
         processorDTO.setSupportsEventDriven(processorNode.isEventDrivenSupported());
-        processorDTO.setSupportsBatching(processorNode.isHighThroughputSupported());
+        processorDTO.setSupportsBatching(processorNode.isSessionBatchingSupported());
 
         ProcessorConfigDTO configDTO = new ProcessorConfigDTO();
         configDTO.setSchedulingPeriod(processorNode.getSchedulingPeriod());
@@ -877,7 +877,7 @@ public void testInstantiateSnippetWithDisabledProcessor() throws ProcessorInstan
         processorDTO.setDescription("description");
         processorDTO.setSupportsParallelProcessing(!processorNode.isTriggeredSerially());
         processorDTO.setSupportsEventDriven(processorNode.isEventDrivenSupported());
-        processorDTO.setSupportsBatching(processorNode.isHighThroughputSupported());
+        processorDTO.setSupportsBatching(processorNode.isSessionBatchingSupported());
 
         ProcessorConfigDTO configDTO = new ProcessorConfigDTO();
         configDTO.setSchedulingPeriod(processorNode.getSchedulingPeriod());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/scheduling/DummyScheduleState.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.controller.scheduling;
 
-public class DummyScheduleState extends ScheduleState {
+public class DummyScheduleState extends LifecycleState {
 
     public DummyScheduleState(boolean isScheduled) {
         setScheduled(isScheduled);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/scheduling/TestStandardProcessScheduler.java
Patch:
@@ -51,13 +51,13 @@
 import org.apache.nifi.controller.ReloadComponent;
 import org.apache.nifi.controller.ReportingTaskNode;
 import org.apache.nifi.controller.StandardProcessorNode;
+import org.apache.nifi.controller.TerminationAwareLogger;
 import org.apache.nifi.controller.ValidationContextFactory;
 import org.apache.nifi.controller.cluster.Heartbeater;
 import org.apache.nifi.controller.reporting.StandardReportingInitializationContext;
 import org.apache.nifi.controller.reporting.StandardReportingTaskNode;
 import org.apache.nifi.controller.scheduling.processors.FailOnScheduledProcessor;
 import org.apache.nifi.controller.service.ControllerServiceNode;
-import org.apache.nifi.controller.service.ControllerServiceProvider;
 import org.apache.nifi.controller.service.ControllerServiceState;
 import org.apache.nifi.controller.service.StandardControllerServiceNode;
 import org.apache.nifi.controller.service.StandardControllerServiceProvider;
@@ -115,7 +115,7 @@ public void setup() throws InitializationException {
         systemBundle = SystemBundle.create(nifiProperties);
         ExtensionManager.discoverExtensions(systemBundle, Collections.emptySet());
 
-        scheduler = new StandardProcessScheduler(new FlowEngine(1, "Unit Test", true), Mockito.mock(ControllerServiceProvider.class), null, stateMgrProvider, nifiProperties);
+        scheduler = new StandardProcessScheduler(new FlowEngine(1, "Unit Test", true), Mockito.mock(FlowController.class), null, stateMgrProvider, nifiProperties);
         scheduler.setSchedulingAgent(SchedulingStrategy.TIMER_DRIVEN, Mockito.mock(SchedulingAgent.class));
 
         reportingTask = new TestReportingTask();
@@ -124,7 +124,7 @@ public void setup() throws InitializationException {
         reportingTask.initialize(config);
 
         final ValidationContextFactory validationContextFactory = new StandardValidationContextFactory(null, variableRegistry);
-        final ComponentLog logger = Mockito.mock(ComponentLog.class);
+        final TerminationAwareLogger logger = Mockito.mock(TerminationAwareLogger.class);
         final ReloadComponent reloadComponent = Mockito.mock(ReloadComponent.class);
         final LoggableComponent<ReportingTask> loggableComponent = new LoggableComponent<>(reportingTask, systemBundle.getBundleDetails().getCoordinate(), logger);
         taskNode = new StandardReportingTaskNode(loggableComponent, UUID.randomUUID().toString(), null, scheduler, validationContextFactory,

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java
Patch:
@@ -2799,7 +2799,7 @@ public int compare(final RelationshipDTO r1, final RelationshipDTO r2) {
         dto.setDescription(getCapabilityDescription(node.getClass()));
         dto.setSupportsParallelProcessing(!node.isTriggeredSerially());
         dto.setSupportsEventDriven(node.isEventDrivenSupported());
-        dto.setSupportsBatching(node.isHighThroughputSupported());
+        dto.setSupportsBatching(node.isSessionBatchingSupported());
         dto.setConfig(createProcessorConfigDto(node));
 
         final Collection<ValidationResult> validationErrors = node.getValidationErrors();
@@ -3243,6 +3243,7 @@ private Set<ControllerServiceDiagnosticsDTO> createReferencedServiceDiagnostics(
      * Creates a ControllerServiceDiagnosticsDTO from the given Controller Service with some additional supporting information
      *
      * @param serviceNode the controller service to create diagnostics for
+     * @param serviceEntityFactory a function to convert a controller service id to a controller service entity
      * @param serviceProvider the controller service provider
      * @return ControllerServiceDiagnosticsDTO for the given Controller Service
      */
@@ -3471,6 +3472,7 @@ private List<ThreadDumpDTO> createThreadDumpDtos(final ProcessorNode procNode) {
             dto.setStackTrace(threadInfo.getStackTrace());
             dto.setThreadActiveMillis(threadInfo.getActiveMillis());
             dto.setThreadName(threadInfo.getThreadName());
+            dto.setTaskTerminated(threadInfo.isTerminated());
             threadDumps.add(dto);
         }
 

File: nifi-nar-bundles/nifi-flume-bundle/nifi-flume-processors/src/main/java/org/apache/nifi/processors/flume/ExecuteFlumeSink.java
Patch:
@@ -48,7 +48,7 @@
  * This processor runs a Flume sink
  */
 @TriggerSerially
-@Tags({"flume", "hadoop", "put", "sink", "restricted"})
+@Tags({"flume", "hadoop", "put", "sink"})
 @InputRequirement(Requirement.INPUT_REQUIRED)
 @CapabilityDescription("Execute a Flume sink. Each input FlowFile is converted into a Flume Event for processing by the sink.")
 @Restricted(

File: nifi-nar-bundles/nifi-flume-bundle/nifi-flume-processors/src/main/java/org/apache/nifi/processors/flume/ExecuteFlumeSource.java
Patch:
@@ -54,7 +54,7 @@
  * This processor runs a Flume source
  */
 @TriggerSerially
-@Tags({"flume", "hadoop", "get", "source", "restricted"})
+@Tags({"flume", "hadoop", "get", "source"})
 @InputRequirement(Requirement.INPUT_FORBIDDEN)
 @CapabilityDescription("Execute a Flume source. Each Flume Event is sent to the success relationship as a FlowFile")
 @Restricted(

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/main/java/org/apache/nifi/processors/hadoop/DeleteHDFS.java
Patch:
@@ -51,7 +51,7 @@
 
 @TriggerWhenEmpty
 @InputRequirement(InputRequirement.Requirement.INPUT_ALLOWED)
-@Tags({"hadoop", "HDFS", "delete", "remove", "filesystem", "restricted"})
+@Tags({"hadoop", "HDFS", "delete", "remove", "filesystem"})
 @CapabilityDescription("Deletes one or more files or directories from HDFS. The path can be provided as an attribute from an incoming FlowFile, "
         + "or a statically set path that is periodically removed. If this processor has an incoming connection, it"
         + "will ignore running on a periodic basis and instead rely on incoming FlowFiles to trigger a delete. "

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/main/java/org/apache/nifi/processors/hadoop/FetchHDFS.java
Patch:
@@ -57,7 +57,7 @@
 
 @SupportsBatching
 @InputRequirement(Requirement.INPUT_REQUIRED)
-@Tags({"hadoop", "hdfs", "get", "ingest", "fetch", "source", "restricted"})
+@Tags({"hadoop", "hdfs", "get", "ingest", "fetch", "source"})
 @CapabilityDescription("Retrieves a file from HDFS. The content of the incoming FlowFile is replaced by the content of the file in HDFS. "
         + "The file in HDFS is left intact without any changes being made to it.")
 @WritesAttribute(attribute="hdfs.failure.reason", description="When a FlowFile is routed to 'failure', this attribute is added indicating why the file could "

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/main/java/org/apache/nifi/processors/hadoop/GetHDFS.java
Patch:
@@ -70,7 +70,7 @@
 
 @TriggerWhenEmpty
 @InputRequirement(Requirement.INPUT_FORBIDDEN)
-@Tags({"hadoop", "HDFS", "get", "fetch", "ingest", "source", "filesystem", "restricted"})
+@Tags({"hadoop", "HDFS", "get", "fetch", "ingest", "source", "filesystem"})
 @CapabilityDescription("Fetch files from Hadoop Distributed File System (HDFS) into FlowFiles. This Processor will delete the file from HDFS after fetching it.")
 @WritesAttributes({
     @WritesAttribute(attribute = "filename", description = "The name of the file that was read from HDFS."),

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/main/java/org/apache/nifi/processors/hadoop/MoveHDFS.java
Patch:
@@ -64,7 +64,7 @@
 /**
  * This processor renames files on HDFS.
  */
-@Tags({"hadoop", "HDFS", "put", "move", "filesystem", "restricted", "moveHDFS"})
+@Tags({"hadoop", "HDFS", "put", "move", "filesystem", "moveHDFS"})
 @CapabilityDescription("Rename existing files or a directory of files (non-recursive) on Hadoop Distributed File System (HDFS).")
 @ReadsAttribute(attribute = "filename", description = "The name of the file written to HDFS comes from the value of this attribute.")
 @WritesAttributes({

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/main/java/org/apache/nifi/processors/hadoop/PutHDFS.java
Patch:
@@ -66,7 +66,7 @@
  * This processor copies FlowFiles to HDFS.
  */
 @InputRequirement(Requirement.INPUT_REQUIRED)
-@Tags({"hadoop", "HDFS", "put", "copy", "filesystem", "restricted"})
+@Tags({"hadoop", "HDFS", "put", "copy", "filesystem"})
 @CapabilityDescription("Write FlowFile data to Hadoop Distributed File System (HDFS)")
 @ReadsAttribute(attribute = "filename", description = "The name of the file written to HDFS comes from the value of this attribute.")
 @WritesAttributes({

File: nifi-nar-bundles/nifi-parquet-bundle/nifi-parquet-processors/src/main/java/org/apache/nifi/processors/parquet/FetchParquet.java
Patch:
@@ -41,7 +41,7 @@
 
 @SupportsBatching
 @InputRequirement(InputRequirement.Requirement.INPUT_REQUIRED)
-@Tags({"parquet", "hadoop", "HDFS", "get", "ingest", "fetch", "source", "restricted", "record"})
+@Tags({"parquet", "hadoop", "HDFS", "get", "ingest", "fetch", "source", "record"})
 @CapabilityDescription("Reads from a given Parquet file and writes records to the content of the flow file using " +
         "the selected record writer. The original Parquet file will remain unchanged, and the content of the flow file " +
         "will be replaced with records of the selected type. This processor can be used with ListHDFS or ListFile to obtain " +

File: nifi-nar-bundles/nifi-parquet-bundle/nifi-parquet-processors/src/main/java/org/apache/nifi/processors/parquet/PutParquet.java
Patch:
@@ -55,7 +55,7 @@
 import java.util.List;
 
 @InputRequirement(InputRequirement.Requirement.INPUT_REQUIRED)
-@Tags({"put", "parquet", "hadoop", "HDFS", "filesystem", "restricted", "record"})
+@Tags({"put", "parquet", "hadoop", "HDFS", "filesystem", "record"})
 @CapabilityDescription("Reads records from an incoming FlowFile using the provided Record Reader, and writes those records " +
         "to a Parquet file. The schema for the Parquet file must be provided in the processor properties. This processor will " +
         "first write a temporary dot file and upon successfully writing every record to the dot file, it will rename the " +
@@ -71,7 +71,7 @@
 })
 @Restricted(restrictions = {
     @Restriction(
-        requiredPermission = RequiredPermission.READ_FILESYSTEM,
+        requiredPermission = RequiredPermission.WRITE_FILESYSTEM,
         explanation = "Provides operator the ability to write any file that NiFi has access to in HDFS or the local filesystem.")
 })
 public class PutParquet extends AbstractPutHDFSRecord {

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/lookup/script/ScriptedLookupService.java
Patch:
@@ -56,7 +56,7 @@
 /**
  * A Controller service that allows the user to script the lookup operation to be performed (by LookupRecord, e.g.)
  */
-@Tags({"lookup", "record", "script", "invoke", "groovy", "python", "jython", "jruby", "ruby", "javascript", "js", "lua", "luaj", "restricted"})
+@Tags({"lookup", "record", "script", "invoke", "groovy", "python", "jython", "jruby", "ruby", "javascript", "js", "lua", "luaj"})
 @CapabilityDescription("Allows the user to provide a scripted LookupService instance in order to enrich records from an incoming flow file.")
 @Restricted(
         restrictions = {

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/processors/script/ExecuteScript.java
Patch:
@@ -58,7 +58,7 @@
 import java.util.Map;
 import java.util.Set;
 
-@Tags({"script", "execute", "groovy", "python", "jython", "jruby", "ruby", "javascript", "js", "lua", "luaj", "clojure", "restricted"})
+@Tags({"script", "execute", "groovy", "python", "jython", "jruby", "ruby", "javascript", "js", "lua", "luaj", "clojure"})
 @CapabilityDescription("Experimental - Executes a script given the flow file and a process session.  The script is responsible for "
         + "handling the incoming flow file (transfer to SUCCESS or remove, e.g.) as well as any flow files created by "
         + "the script. If the handling is incomplete or incorrect, the session will be rolled back. Experimental: "

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/processors/script/InvokeScriptedProcessor.java
Patch:
@@ -61,7 +61,7 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicReference;
 
-@Tags({"script", "invoke", "groovy", "python", "jython", "jruby", "ruby", "javascript", "js", "lua", "luaj", "restricted"})
+@Tags({"script", "invoke", "groovy", "python", "jython", "jruby", "ruby", "javascript", "js", "lua", "luaj"})
 @CapabilityDescription("Experimental - Invokes a script engine for a Processor defined in the given script. The script must define "
         + "a valid class that implements the Processor interface, and it must set a variable 'processor' to an instance of "
         + "the class. Processor methods such as onTrigger() will be delegated to the scripted Processor instance. Also any "

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/record/script/ScriptedReader.java
Patch:
@@ -43,7 +43,7 @@
 /**
  * A RecordReader implementation that allows the user to script the RecordReader instance
  */
-@Tags({"record", "recordFactory", "script", "invoke", "groovy", "python", "jython", "jruby", "ruby", "javascript", "js", "lua", "luaj", "restricted"})
+@Tags({"record", "recordFactory", "script", "invoke", "groovy", "python", "jython", "jruby", "ruby", "javascript", "js", "lua", "luaj"})
 @CapabilityDescription("Allows the user to provide a scripted RecordReaderFactory instance in order to read/parse/generate records from an incoming flow file.")
 @Restricted(
         restrictions = {

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/record/script/ScriptedRecordSetWriter.java
Patch:
@@ -43,7 +43,7 @@
 /**
  * A RecordSetWriter implementation that allows the user to script the RecordWriter instance
  */
-@Tags({"record", "writer", "script", "invoke", "groovy", "python", "jython", "jruby", "ruby", "javascript", "js", "lua", "luaj", "restricted"})
+@Tags({"record", "writer", "script", "invoke", "groovy", "python", "jython", "jruby", "ruby", "javascript", "js", "lua", "luaj"})
 @CapabilityDescription("Allows the user to provide a scripted RecordSetWriterFactory instance in order to write records to an outgoing flow file.")
 @Restricted(
         restrictions = {

File: nifi-nar-bundles/nifi-site-to-site-reporting-bundle/nifi-site-to-site-reporting-task/src/main/java/org/apache/nifi/reporting/SiteToSiteBulletinReportingTask.java
Patch:
@@ -52,7 +52,7 @@
 import java.util.UUID;
 import java.util.concurrent.TimeUnit;
 
-@Tags({"bulletin", "site", "site to site", "restricted"})
+@Tags({"bulletin", "site", "site to site"})
 @CapabilityDescription("Publishes Bulletin events using the Site To Site protocol. Note: only up to 5 bulletins are stored per component and up to "
         + "10 bulletins at controller level for a duration of up to 5 minutes. If this reporting task is not scheduled frequently enough some bulletins "
         + "may not be sent.")

File: nifi-nar-bundles/nifi-site-to-site-reporting-bundle/nifi-site-to-site-reporting-task/src/main/java/org/apache/nifi/reporting/SiteToSiteProvenanceReportingTask.java
Patch:
@@ -63,7 +63,7 @@
 import java.util.UUID;
 import java.util.concurrent.TimeUnit;
 
-@Tags({"provenance", "lineage", "tracking", "site", "site to site", "restricted"})
+@Tags({"provenance", "lineage", "tracking", "site", "site to site"})
 @CapabilityDescription("Publishes Provenance events using the Site To Site protocol.")
 @Stateful(scopes = Scope.LOCAL, description = "Stores the Reporting Task's last event Id so that on restart the task knows where it left off.")
 @Restricted(

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ExecuteProcess.java
Patch:
@@ -68,7 +68,7 @@
 import java.util.concurrent.locks.ReentrantLock;
 
 @InputRequirement(Requirement.INPUT_FORBIDDEN)
-@Tags({"command", "process", "source", "external", "invoke", "script", "restricted"})
+@Tags({"command", "process", "source", "external", "invoke", "script"})
 @CapabilityDescription("Runs an operating system command specified by the user and writes the output of that command to a FlowFile. If the command is expected "
         + "to be long-running, the Processor can output the partial data on a specified interval. When this option is used, the output is expected to be in textual "
         + "format, as it typically does not make sense to split binary data on arbitrary time-based intervals.")

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ExecuteStreamCommand.java
Patch:
@@ -132,7 +132,7 @@
 @EventDriven
 @SupportsBatching
 @InputRequirement(Requirement.INPUT_REQUIRED)
-@Tags({"command execution", "command", "stream", "execute", "restricted"})
+@Tags({"command execution", "command", "stream", "execute"})
 @CapabilityDescription("Executes an external command on the contents of a flow file, and creates a new flow file with the results of the command.")
 @DynamicProperty(name = "An environment variable name", value = "An environment variable value", description = "These environment variables are passed to the process spawned by this Processor")
 @WritesAttributes({

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/FetchFile.java
Patch:
@@ -56,7 +56,7 @@
 import java.util.concurrent.TimeUnit;
 
 @InputRequirement(Requirement.INPUT_REQUIRED)
-@Tags({"local", "files", "filesystem", "ingest", "ingress", "get", "source", "input", "fetch", "restricted"})
+@Tags({"local", "files", "filesystem", "ingest", "ingress", "get", "source", "input", "fetch"})
 @CapabilityDescription("Reads the contents of a file from disk and streams it into the contents of an incoming FlowFile. Once this is done, the file is optionally moved elsewhere or deleted "
     + "to help keep the file system organized.")
 @SeeAlso({GetFile.class, PutFile.class, ListFile.class})

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/GetFile.java
Patch:
@@ -76,7 +76,7 @@
 
 @TriggerWhenEmpty
 @InputRequirement(Requirement.INPUT_FORBIDDEN)
-@Tags({"local", "files", "filesystem", "ingest", "ingress", "get", "source", "input", "restricted"})
+@Tags({"local", "files", "filesystem", "ingest", "ingress", "get", "source", "input"})
 @CapabilityDescription("Creates FlowFiles from files in a directory.  NiFi will ignore files it doesn't have at least read permissions for.")
 @WritesAttributes({
     @WritesAttribute(attribute = "filename", description = "The filename is set to the name of the file on disk"),

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/PutFile.java
Patch:
@@ -61,7 +61,7 @@
 @EventDriven
 @SupportsBatching
 @InputRequirement(Requirement.INPUT_REQUIRED)
-@Tags({"put", "local", "copy", "archive", "files", "filesystem", "restricted"})
+@Tags({"put", "local", "copy", "archive", "files", "filesystem"})
 @CapabilityDescription("Writes the contents of a FlowFile to the local file system")
 @SeeAlso({FetchFile.class, GetFile.class})
 @ReadsAttribute(attribute = "filename", description = "The filename to use when writing the FlowFile to disk.")

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/TailFile.java
Patch:
@@ -83,7 +83,7 @@
 // note: it is important that this Processor is not marked as @SupportsBatching because the session commits must complete before persisting state locally; otherwise, data loss may occur
 @TriggerSerially
 @InputRequirement(Requirement.INPUT_FORBIDDEN)
-@Tags({"tail", "file", "log", "text", "source", "restricted"})
+@Tags({"tail", "file", "log", "text", "source"})
 @CapabilityDescription("\"Tails\" a file, or a list of files, ingesting data from the file as it is written to the file. The file is expected to be textual. Data is ingested only when a "
         + "new line is encountered (carriage return or new-line character or combination). If the file to tail is periodically \"rolled over\", as is generally the case "
         + "with log files, an optional Rolling Filename Pattern can be used to retrieve data from files that have rolled over, even if the rollover occurred while NiFi "

File: nifi-nar-bundles/nifi-atlas-bundle/nifi-atlas-reporting-task/src/test/java/org/apache/nifi/atlas/reporting/ITReportLineageToAtlas.java
Patch:
@@ -442,6 +442,7 @@ private void test(TestConfiguration tc) throws InitializationException, IOExcept
         reportingTask.setup(configurationContext);
         reportingTask.onTrigger(reportingContext);
         reportingTask.onUnscheduled();
+        reportingTask.onStopped();
     }
 
     private boolean useEmbeddedEmulator;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java
Patch:
@@ -3240,7 +3240,6 @@ private Set<ControllerServiceDiagnosticsDTO> createReferencedServiceDiagnostics(
      * Creates a ControllerServiceDiagnosticsDTO from the given Controller Service with some additional supporting information
      *
      * @param serviceNode the controller service to create diagnostics for
-     * @param bulletinRepo the bulletin repository
      * @param serviceProvider the controller service provider
      * @return ControllerServiceDiagnosticsDTO for the given Controller Service
      */

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/StandardHttpResponseMapper.java
Patch:
@@ -49,6 +49,7 @@
 import org.apache.nifi.cluster.coordination.http.endpoints.PrioritizerTypesEndpointMerger;
 import org.apache.nifi.cluster.coordination.http.endpoints.ProcessGroupEndpointMerger;
 import org.apache.nifi.cluster.coordination.http.endpoints.ProcessGroupsEndpointMerger;
+import org.apache.nifi.cluster.coordination.http.endpoints.ProcessorDiagnosticsEndpointMerger;
 import org.apache.nifi.cluster.coordination.http.endpoints.ProcessorEndpointMerger;
 import org.apache.nifi.cluster.coordination.http.endpoints.ProcessorStatusEndpointMerger;
 import org.apache.nifi.cluster.coordination.http.endpoints.ProcessorTypesEndpointMerger;
@@ -155,6 +156,7 @@ public StandardHttpResponseMapper(final NiFiProperties nifiProperties) {
         endpointMergers.add(new AccessPolicyEndpointMerger());
         endpointMergers.add(new SearchUsersEndpointMerger());
         endpointMergers.add(new VariableRegistryEndpointMerger());
+        endpointMergers.add(new ProcessorDiagnosticsEndpointMerger(snapshotMillis));
     }
 
     @Override

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/ProcessorNode.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.nifi.controller;
 
+import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.CompletableFuture;
@@ -68,6 +69,8 @@ public ProcessorNode(final String id,
 
     public abstract Requirement getInputRequirement();
 
+    public abstract List<ActiveThreadInfo> getActiveThreads();
+
     @Override
     public abstract boolean isValid();
 

File: nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/processors/JMSPublisherConsumerIT.java
Patch:
@@ -99,7 +99,7 @@ public void validateJmsHeadersAndPropertiesAreTransferredFromFFAttributes() thro
      * used. The may change to the point where all message types are supported
      * at which point this test will no be longer required.
      */
-    @Test(expected = IllegalStateException.class)
+    @Test
     public void validateFailOnUnsupportedMessageType() throws Exception {
         final String destinationName = "validateFailOnUnsupportedMessageType";
         JmsTemplate jmsTemplate = CommonTest.buildJmsTemplateForDestination(false);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/FlowController.java
Patch:
@@ -3447,7 +3447,7 @@ public void startReportingTask(final ReportingTaskNode reportingTaskNode) {
         if (isTerminated()) {
             throw new IllegalStateException("Cannot start reporting task " + reportingTaskNode.getIdentifier() + " because the controller is terminated");
         }
-
+        reportingTaskNode.reloadAdditionalResourcesIfNecessary();
         reportingTaskNode.verifyCanStart();
         processScheduler.schedule(reportingTaskNode);
     }
@@ -3571,6 +3571,7 @@ public void reload(final ControllerServiceNode existingNode, final String newTyp
     @Override
     public void enableReportingTask(final ReportingTaskNode reportingTaskNode) {
         reportingTaskNode.verifyCanEnable();
+        reportingTaskNode.reloadAdditionalResourcesIfNecessary();
         processScheduler.enableReportingTask(reportingTaskNode);
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/StandardProcessorNode.java
Patch:
@@ -86,6 +86,7 @@
 import org.apache.nifi.util.FormatUtils;
 import org.apache.nifi.util.NiFiProperties;
 import org.apache.nifi.util.ReflectionUtils;
+import org.apache.nifi.util.file.classloader.ClassLoaderUtils;
 import org.quartz.CronExpression;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -890,7 +891,8 @@ public synchronized void reload(final Set<URL> additionalUrls) throws ProcessorI
         if (isRunning()) {
             throw new IllegalStateException("Cannot reload Processor while the Processor is running");
         }
-
+        String additionalResourcesFingerprint = ClassLoaderUtils.generateAdditionalUrlsFingerprint(additionalUrls);
+        setAdditionalResourcesFingerprint(additionalResourcesFingerprint);
         getReloadComponent().reload(this, getCanonicalClassName(), getBundleCoordinate(), additionalUrls);
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/reporting/AbstractReportingTaskNode.java
Patch:
@@ -46,6 +46,7 @@
 import org.apache.nifi.scheduling.SchedulingStrategy;
 import org.apache.nifi.util.CharacterFilterUtils;
 import org.apache.nifi.util.FormatUtils;
+import org.apache.nifi.util.file.classloader.ClassLoaderUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.core.annotation.AnnotationUtils;
@@ -161,7 +162,8 @@ public void reload(final Set<URL> additionalUrls) throws ReportingTaskInstantiat
         if (isRunning()) {
             throw new IllegalStateException("Cannot reload Reporting Task while Reporting Task is running");
         }
-
+        String additionalResourcesFingerprint = ClassLoaderUtils.generateAdditionalUrlsFingerprint(additionalUrls);
+        setAdditionalResourcesFingerprint(additionalResourcesFingerprint);
         getReloadComponent().reload(this, getCanonicalClassName(), getBundleCoordinate(), additionalUrls);
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/service/StandardControllerServiceNode.java
Patch:
@@ -63,6 +63,7 @@
 import org.apache.nifi.registry.ComponentVariableRegistry;
 import org.apache.nifi.util.CharacterFilterUtils;
 import org.apache.nifi.util.ReflectionUtils;
+import org.apache.nifi.util.file.classloader.ClassLoaderUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -195,7 +196,8 @@ public void reload(final Set<URL> additionalUrls) throws ControllerServiceInstan
             if (isActive()) {
                 throw new IllegalStateException("Cannot reload Controller Service while service is active");
             }
-
+            String additionalResourcesFingerprint = ClassLoaderUtils.generateAdditionalUrlsFingerprint(additionalUrls);
+            setAdditionalResourcesFingerprint(additionalResourcesFingerprint);
             getReloadComponent().reload(this, getCanonicalClassName(), getBundleCoordinate(), additionalUrls);
         }
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/service/StandardControllerServiceProvider.java
Patch:
@@ -72,6 +72,7 @@
 import org.apache.nifi.reporting.Severity;
 import org.apache.nifi.util.NiFiProperties;
 import org.apache.nifi.util.ReflectionUtils;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -341,6 +342,7 @@ public Set<ConfiguredComponent> unscheduleReferencingComponents(final Controller
     @Override
     public CompletableFuture<Void> enableControllerService(final ControllerServiceNode serviceNode) {
         serviceNode.verifyCanEnable();
+        serviceNode.reloadAdditionalResourcesIfNecessary();
         return processScheduler.enableControllerService(serviceNode);
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/groups/StandardProcessGroup.java
Patch:
@@ -1220,6 +1220,7 @@ public CompletableFuture<Void> startProcessor(final ProcessorNode processor, fin
             } else if (state == ScheduledState.RUNNING) {
                 return CompletableFuture.completedFuture(null);
             }
+            processor.reloadAdditionalResourcesIfNecessary();
 
             return scheduler.startProcessor(processor, failIfStopping);
         } finally {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/StandardProcessorNode.java
Patch:
@@ -627,7 +627,8 @@ public synchronized void setMaxConcurrentTasks(final int taskCount) {
             throw new IllegalStateException("Cannot modify Processor configuration while the Processor is running");
         }
         if (taskCount < 1 && getSchedulingStrategy() != SchedulingStrategy.EVENT_DRIVEN) {
-            throw new IllegalArgumentException();
+            throw new IllegalArgumentException("Cannot set Concurrent Tasks to " + taskCount + " for component "
+                    + getIdentifier() + " because Scheduling Strategy is not Event Driven");
         }
         if (!isTriggeredSerially()) {
             concurrentTaskCount.set(taskCount);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/groups/StandardProcessGroup.java
Patch:
@@ -4072,8 +4072,6 @@ private void updateProcessor(final ProcessorNode processor, final VersionedProce
         processor.setAnnotationData(proposed.getAnnotationData());
         processor.setBulletinLevel(LogLevel.valueOf(proposed.getBulletinLevel()));
         processor.setComments(proposed.getComments());
-        processor.setMaxConcurrentTasks(proposed.getConcurrentlySchedulableTaskCount());
-        processor.setExecutionNode(ExecutionNode.valueOf(proposed.getExecutionNode()));
         processor.setName(proposed.getName());
         processor.setPenalizationPeriod(proposed.getPenaltyDuration());
 
@@ -4082,6 +4080,8 @@ private void updateProcessor(final ProcessorNode processor, final VersionedProce
         processor.setRunDuration(proposed.getRunDurationMillis(), TimeUnit.MILLISECONDS);
         processor.setSchedulingStrategy(SchedulingStrategy.valueOf(proposed.getSchedulingStrategy()));
         processor.setScheduldingPeriod(proposed.getSchedulingPeriod());
+        processor.setMaxConcurrentTasks(proposed.getConcurrentlySchedulableTaskCount());
+        processor.setExecutionNode(ExecutionNode.valueOf(proposed.getExecutionNode()));
         processor.setStyle(proposed.getStyle());
         processor.setYieldPeriod(proposed.getYieldDuration());
         processor.setPosition(new Position(proposed.getPosition().getX(), proposed.getPosition().getY()));

File: nifi-nar-bundles/nifi-hbase-bundle/nifi-hbase-processors/src/main/java/org/apache/nifi/hbase/FetchHBaseRow.java
Patch:
@@ -268,7 +268,7 @@ public void onTrigger(ProcessContext context, ProcessSession session) throws Pro
 
         FlowFile handlerFlowFile = handler.getFlowFile();
         if (!handler.handledRow()) {
-            getLogger().error("Row {} not found in {}, transferring to not found", new Object[] {rowId, tableName});
+            getLogger().debug("Row {} not found in {}, transferring to not found", new Object[] {rowId, tableName});
             session.transfer(handlerFlowFile, REL_NOT_FOUND);
             return;
         }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/util/BundleUtils.java
Patch:
@@ -182,8 +182,8 @@ public static void discoverCompatibleBundles(final VersionedProcessGroup version
     public static BundleDTO createBundleDto(final org.apache.nifi.registry.flow.Bundle bundle) {
         final BundleDTO dto = new BundleDTO();
         dto.setArtifact(bundle.getArtifact());
-        dto.setGroup(dto.getGroup());
-        dto.setVersion(dto.getVersion());
+        dto.setGroup(bundle.getGroup());
+        dto.setVersion(bundle.getVersion());
         return dto;
     }
 }

File: nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/processors/PublishJMSTest.java
Patch:
@@ -43,7 +43,7 @@ public class PublishJMSTest {
     public void validateSuccessfulPublishAndTransferToSuccess() throws Exception {
         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
 
-        final String destinationName = "fooQueue";
+        final String destinationName = "validateSuccessfulPublishAndTransferToSuccess";
         PublishJMS pubProc = new PublishJMS();
         TestRunner runner = TestRunners.newTestRunner(pubProc);
         JMSConnectionFactoryProviderDefinition cs = mock(JMSConnectionFactoryProviderDefinition.class);
@@ -128,7 +128,7 @@ public void validateFailedPublishAndTransferToFailure() throws Exception {
         runner.enableControllerService(cs);
 
         runner.setProperty(PublishJMS.CF_SERVICE, "cfProvider");
-        runner.setProperty(PublishJMS.DESTINATION, "fooQueue");
+        runner.setProperty(PublishJMS.DESTINATION, "validateFailedPublishAndTransferToFailure");
 
         runner.enqueue("Hello Joe".getBytes());
 

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/result/ProcessGroupsResult.java
Patch:
@@ -61,7 +61,7 @@ protected void writeSimpleResult(final PrintStream output) {
                 .column("Id", 36, 36, false)
                 .column("Running", 7, 7, false)
                 .column("Stopped", 7, 7, false)
-                .column("Disabled", 7, 7, false)
+                .column("Disabled", 8, 8, false)
                 .column("Invalid", 7, 7, false)
                 .build();
 

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/command/nifi/NiFiCommandGroup.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.nifi.toolkit.cli.impl.command.nifi.pg.PGList;
 import org.apache.nifi.toolkit.cli.impl.command.nifi.pg.PGSetVar;
 import org.apache.nifi.toolkit.cli.impl.command.nifi.pg.PGStart;
+import org.apache.nifi.toolkit.cli.impl.command.nifi.pg.PGStatus;
 import org.apache.nifi.toolkit.cli.impl.command.nifi.pg.PGStop;
 import org.apache.nifi.toolkit.cli.impl.command.nifi.registry.CreateRegistryClient;
 import org.apache.nifi.toolkit.cli.impl.command.nifi.registry.GetRegistryClientId;
@@ -66,6 +67,7 @@ protected List<Command> createCommands() {
         commands.add(new PGChangeVersion());
         commands.add(new PGGetAllVersions());
         commands.add(new PGList());
+        commands.add(new PGStatus());
         return new ArrayList<>(commands);
     }
 }

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/command/nifi/pg/PGList.java
Patch:
@@ -24,9 +24,9 @@
 import org.apache.nifi.toolkit.cli.impl.command.CommandOption;
 import org.apache.nifi.toolkit.cli.impl.command.nifi.AbstractNiFiCommand;
 import org.apache.nifi.toolkit.cli.impl.result.ProcessGroupsResult;
+import org.apache.nifi.web.api.dto.ProcessGroupDTO;
 import org.apache.nifi.web.api.dto.flow.FlowDTO;
 import org.apache.nifi.web.api.dto.flow.ProcessGroupFlowDTO;
-import org.apache.nifi.web.api.entity.ProcessGroupEntity;
 import org.apache.nifi.web.api.entity.ProcessGroupFlowEntity;
 
 import java.io.IOException;
@@ -70,9 +70,9 @@ public ProcessGroupsResult doExecute(final NiFiClient client, final Properties p
         final ProcessGroupFlowDTO processGroupFlowDTO = processGroupFlowEntity.getProcessGroupFlow();
         final FlowDTO flowDTO = processGroupFlowDTO.getFlow();
 
-        final List<ProcessGroupEntity> processGroups = new ArrayList<>();
+        final List<ProcessGroupDTO> processGroups = new ArrayList<>();
         if (flowDTO.getProcessGroups() != null) {
-            flowDTO.getProcessGroups().stream().forEach(pg -> processGroups.add(pg));
+            flowDTO.getProcessGroups().stream().map(pge -> pge.getComponent()).forEach(dto -> processGroups.add(dto));
         }
 
         return new ProcessGroupsResult(getResultType(properties), processGroups);

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/result/VersionedFlowSnapshotMetadataSetResult.java
Patch:
@@ -55,8 +55,10 @@ protected void writeSimpleResult(final PrintStream output) throws IOException {
             return;
         }
 
+        // this will be sorted by the child result below
         final List<VersionedFlowSnapshotMetadata> snapshots = entities.stream()
-                .map(v -> v.getVersionedFlowSnapshotMetadata()).collect(Collectors.toList());
+                .map(v -> v.getVersionedFlowSnapshotMetadata())
+                .collect(Collectors.toList());
 
         final WritableResult<List<VersionedFlowSnapshotMetadata>> result = new VersionedFlowSnapshotMetadataResult(resultType, snapshots);
         result.write(output);

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/client/nifi/impl/JerseyFlowClient.java
Patch:
@@ -37,6 +37,7 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Set;
 import java.util.stream.Collectors;
 
@@ -116,6 +117,7 @@ public ProcessGroupBox getSuggestedProcessGroupCoordinates(final String parentId
         }
 
         final List<ProcessGroupBox> coords = positions.stream()
+                .filter(Objects::nonNull)
                 .map(p -> new ProcessGroupBox(p.getX().intValue(), p.getY().intValue()))
                 .collect(Collectors.toList());
 

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/api/Context.java
Patch:
@@ -36,6 +36,4 @@ public interface Context {
 
     boolean isInteractive();
 
-    ResultWriter getResultWriter(ResultType resultType);
-
 }

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/client/NiFiRegistryClientFactory.java
Patch:
@@ -97,7 +97,6 @@ public NiFiRegistryClient createClient(final Properties properties) throws Missi
 
         // if a proxied entity was specified then return a wrapped client, otherwise return the regular client
         if (!StringUtils.isBlank(proxiedEntity)) {
-            System.out.println("Creating client for proxied entity: " + proxiedEntity);
             return new ProxiedNiFiRegistryClient(client, proxiedEntity);
         } else {
             return client;

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/command/CommandFactory.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.nifi.toolkit.cli.api.Command;
 import org.apache.nifi.toolkit.cli.api.CommandGroup;
 import org.apache.nifi.toolkit.cli.api.Context;
+import org.apache.nifi.toolkit.cli.impl.command.composite.DemoCommandGroup;
 import org.apache.nifi.toolkit.cli.impl.command.misc.Exit;
 import org.apache.nifi.toolkit.cli.impl.command.misc.Help;
 import org.apache.nifi.toolkit.cli.impl.command.nifi.NiFiCommandGroup;
@@ -55,6 +56,7 @@ public static Map<String,CommandGroup> createCommandGroups(final Context context
         final List<CommandGroup> groups = new ArrayList<>();
         groups.add(new NiFiRegistryCommandGroup());
         groups.add(new NiFiCommandGroup());
+        groups.add(new DemoCommandGroup());
         groups.add(new SessionCommandGroup());
 
         final Map<String,CommandGroup> groupMap = new TreeMap<>();

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/command/CommandOption.java
Patch:
@@ -30,6 +30,9 @@ public enum CommandOption {
     PROPERTIES("p", "properties", "A properties file to load arguments from, " +
             "command line values will override anything in the properties file, must contain full path to file", true),
 
+    NIFI_PROPS("nifiProps", "nifiProps", "A properties file to load for NiFi config", true),
+    NIFI_REG_PROPS("nifiRegProps", "nifiRegProps", "A properties file to load for NiFi Registry config", true),
+
     // Registry - Buckets
     BUCKET_ID("b", "bucketIdentifier", "A bucket identifier", true),
     BUCKET_NAME("bn", "bucketName", "A bucket name", true),

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/CLICompleter.java
Patch:
@@ -48,7 +48,7 @@ public class CLICompleter implements Completer {
     static {
         final Set<String> args = new HashSet<>();
         args.add("-" + CommandOption.PROPERTIES.getShortName());
-        args.add("-" + CommandOption.INPUT_FILE.getShortName());
+        args.add("-" + CommandOption.INPUT_SOURCE.getShortName());
         args.add("-" + CommandOption.OUTPUT_FILE.getShortName());
         FILE_COMPLETION_ARGS = Collections.unmodifiableSet(args);
     }

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/client/nifi/ProcessGroupBox.java
Patch:
@@ -58,7 +58,7 @@ public int distance() {
 
 
     public boolean intersects(ProcessGroupBox other) {
-        // adapted for java.awt Rectangle, we don't want to import it
+        // adapted from java.awt Rectangle, we don't want to import it
         // assume everything to be of the PG size for simplicity
         int tw = PG_SIZE_WIDTH;
         int th = PG_SIZE_HEIGHT;

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/command/CommandOption.java
Patch:
@@ -25,7 +25,7 @@ public enum CommandOption {
 
     // General
     URL("u", "baseUrl", "The URL to execute the command against", true),
-    INPUT_FILE("i", "inputFile", "A file to read as input, must contain full path and filename", true),
+    INPUT_SOURCE("i", "input", "A local file to read as input contents, or a public URL to fetch", true),
     OUTPUT_FILE("o", "outputFile", "A file to write output to, must contain full path and filename", true),
     PROPERTIES("p", "properties", "A properties file to load arguments from, " +
             "command line values will override anything in the properties file, must contain full path to file", true),

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/CLIMain.java
Patch:
@@ -74,7 +74,7 @@ public static void main(String[] args) throws IOException {
     }
 
     /**
-     * Runs the interactive CLIE.
+     * Runs the interactive CLI.
      *
      * @throws IOException if an error occurs
      */
@@ -191,6 +191,7 @@ private static Context createContext(final PrintStream output, final boolean isI
                 .session(session)
                 .nifiClientFactory(niFiClientFactory)
                 .nifiRegistryClientFactory(nifiRegClientFactory)
+                .interactive(isInteractive)
                 .build();
     }
 

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/api/Context.java
Patch:
@@ -34,4 +34,6 @@ public interface Context {
 
     PrintStream getOutput();
 
+    boolean isInteractive();
+
 }

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/command/registry/NiFiRegistryCommandGroup.java
Patch:
@@ -35,8 +35,10 @@
  */
 public class NiFiRegistryCommandGroup extends AbstractCommandGroup {
 
+    public static String REGISTRY_COMMAND_GROUP = "registry";
+
     public NiFiRegistryCommandGroup() {
-        super("registry");
+        super(REGISTRY_COMMAND_GROUP);
     }
 
     @Override

File: nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/command/registry/flow/ImportFlowVersion.java
Patch:
@@ -64,7 +64,7 @@ protected void doExecute(final NiFiRegistryClient client, final Properties prope
 
             // determine the bucket for the provided flow id
             final String bucketId = getBucketId(client, flowId);
-            
+
             // determine the latest existing version in the destination system
             Integer version;
             try {

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/AbstractDatabaseFetchProcessor.java
Patch:
@@ -446,7 +446,7 @@ protected static String getLiteralByType(int type, String value, String database
             case TIME:
                 return "'" + value + "'";
             case TIMESTAMP:
-                if ("Oracle".equals(databaseType)) {
+                if (!StringUtils.isEmpty(databaseType) && databaseType.contains("Oracle")) {
                     // For backwards compatibility, the type might be TIMESTAMP but the state value is in DATE format. This should be a one-time occurrence as the next maximum value
                     // should be stored as a full timestamp. Even so, check to see if the value is missing time-of-day information, and use the "date" coercion rather than the
                     // "timestamp" coercion in that case

File: nifi-nar-bundles/nifi-site-to-site-reporting-bundle/nifi-site-to-site-reporting-task/src/main/java/org/apache/nifi/reporting/SiteToSiteBulletinReportingTask.java
Patch:
@@ -159,6 +159,9 @@ public void onTrigger(final ReportingContext context) {
             final Map<String, String> attributes = new HashMap<>();
             final String transactionId = UUID.randomUUID().toString();
             attributes.put("reporting.task.transaction.id", transactionId);
+            attributes.put("reporting.task.name", getName());
+            attributes.put("reporting.task.uuid", getIdentifier());
+            attributes.put("reporting.task.type", this.getClass().getSimpleName());
             attributes.put("mime.type", "application/json");
 
             final byte[] data = jsonArray.toString().getBytes(StandardCharsets.UTF_8);

File: nifi-nar-bundles/nifi-site-to-site-reporting-bundle/nifi-site-to-site-reporting-task/src/main/java/org/apache/nifi/reporting/SiteToSiteProvenanceReportingTask.java
Patch:
@@ -277,6 +277,9 @@ public void onTrigger(final ReportingContext context) {
                 final Map<String, String> attributes = new HashMap<>();
                 final String transactionId = UUID.randomUUID().toString();
                 attributes.put("reporting.task.transaction.id", transactionId);
+                attributes.put("reporting.task.name", getName());
+                attributes.put("reporting.task.uuid", getIdentifier());
+                attributes.put("reporting.task.type", this.getClass().getSimpleName());
                 attributes.put("mime.type", "application/json");
 
                 final byte[] data = jsonArray.toString().getBytes(StandardCharsets.UTF_8);

File: nifi-nar-bundles/nifi-site-to-site-reporting-bundle/nifi-site-to-site-reporting-task/src/main/java/org/apache/nifi/reporting/SiteToSiteStatusReportingTask.java
Patch:
@@ -158,6 +158,9 @@ public void onTrigger(final ReportingContext context) {
                 final Map<String, String> attributes = new HashMap<>();
                 final String transactionId = UUID.randomUUID().toString();
                 attributes.put("reporting.task.transaction.id", transactionId);
+                attributes.put("reporting.task.name", getName());
+                attributes.put("reporting.task.uuid", getIdentifier());
+                attributes.put("reporting.task.type", this.getClass().getSimpleName());
                 attributes.put("mime.type", "application/json");
 
                 JsonArrayBuilder jsonBatchArrayBuilder = factory.createArrayBuilder();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/web/controller/ControllerSearchServiceTest.java
Patch:
@@ -33,6 +33,7 @@
 import org.mockito.Mockito;
 
 import java.util.HashSet;
+import java.util.Optional;
 
 import static org.junit.Assert.assertTrue;
 import static org.mockito.Matchers.any;
@@ -354,6 +355,7 @@ private static void setupMockedProcessor(final String processorName, final Proce
         Mockito.doReturn(processor1).when(processorNode1).getProcessor();
         // set processor node's attributes
         Mockito.doReturn(processorId).when(processorNode1).getIdentifier();
+        Mockito.doReturn(Optional.ofNullable(null)).when(processorNode1).getVersionedComponentId(); // not actually searching based on versioned component id
         Mockito.doReturn(processorName).when(processorNode1).getName();
 
         // assign processor node to its PG
@@ -380,6 +382,7 @@ private static ProcessGroup setupMockedProcessGroup(final String processGroupNam
         final ProcessGroup processGroup = mock(ProcessGroup.class);
 
         Mockito.doReturn(processGroupId).when(processGroup).getIdentifier();
+        Mockito.doReturn(Optional.ofNullable(null)).when(processGroup).getVersionedComponentId(); // not actually searching based on versioned component id
         Mockito.doReturn(processGroupName).when(processGroup).getName();
         Mockito.doReturn(parent).when(processGroup).getParent();
         Mockito.doReturn(versionControlInformation).when(processGroup).getVersionControlInformation();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/groups/StandardProcessGroup.java
Patch:
@@ -4080,8 +4080,8 @@ private void updateProcessor(final ProcessorNode processor, final VersionedProce
         final Map<String, String> properties = populatePropertiesMap(processor.getProperties(), proposed.getProperties(), proposed.getPropertyDescriptors(), processor.getProcessGroup());
         processor.setProperties(properties, true);
         processor.setRunDuration(proposed.getRunDurationMillis(), TimeUnit.MILLISECONDS);
-        processor.setScheduldingPeriod(proposed.getSchedulingPeriod());
         processor.setSchedulingStrategy(SchedulingStrategy.valueOf(proposed.getSchedulingStrategy()));
+        processor.setScheduldingPeriod(proposed.getSchedulingPeriod());
         processor.setStyle(proposed.getStyle());
         processor.setYieldPeriod(proposed.getYieldDuration());
         processor.setPosition(new Position(proposed.getPosition().getX(), proposed.getPosition().getY()));

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/remote/StandardRemoteProcessGroup.java
Patch:
@@ -672,6 +672,7 @@ private StandardRemoteGroupPort addOutputPort(final RemoteProcessGroupPortDescri
             if (!StringUtils.isBlank(descriptor.getBatchDuration())) {
                 port.setBatchDuration(descriptor.getBatchDuration());
             }
+            port.setVersionedComponentId(descriptor.getVersionedComponentId());
 
             return port;
         } finally {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java
Patch:
@@ -1535,6 +1535,7 @@ public RemoteProcessGroupPortDTO createRemoteProcessGroupPortDto(final RemoteGro
 
         final RemoteProcessGroupPortDTO dto = new RemoteProcessGroupPortDTO();
         dto.setId(port.getIdentifier());
+        dto.setGroupId(port.getRemoteProcessGroup().getIdentifier());
         dto.setTargetId(port.getTargetIdentifier());
         dto.setName(port.getName());
         dto.setComments(port.getComments());
@@ -2227,7 +2228,7 @@ public Set<ComponentDifferenceDTO> createComponentDifferenceDtos(final FlowCompa
             }
 
             // Ignore differences for adding remote ports
-            if (FlowDifferenceFilters.isAddedRemotePort(difference)) {
+            if (FlowDifferenceFilters.isAddedOrRemovedRemotePort(difference)) {
                 continue;
             }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/VersionsResource.java
Patch:
@@ -1539,7 +1539,9 @@ private Set<AffectedComponentEntity> getUpdatedEntities(final Set<AffectedCompon
         for (final AffectedComponentEntity original : originalEntities) {
             try {
                 final AffectedComponentEntity updatedEntity = AffectedComponentUtils.updateEntity(original, serviceFacade, dtoFactory, user);
-                entities.add(updatedEntity);
+                if (updatedEntity != null) {
+                    entities.add(updatedEntity);
+                }
             } catch (final ResourceNotFoundException rnfe) {
                 // Component was removed. Just continue on without adding anything to the entities.
                 // We do this because the intent is to get updated versions of the entities with current

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/util/AffectedComponentUtils.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.nifi.web.util;
 
-import java.util.Optional;
-
 import org.apache.nifi.authorization.user.NiFiUser;
 import org.apache.nifi.web.NiFiServiceFacade;
 import org.apache.nifi.web.api.dto.AffectedComponentDTO;
@@ -31,6 +29,8 @@
 import org.apache.nifi.web.api.entity.ProcessorEntity;
 import org.apache.nifi.web.api.entity.RemoteProcessGroupEntity;
 
+import java.util.Optional;
+
 public class AffectedComponentUtils {
 
     public static AffectedComponentEntity updateEntity(final AffectedComponentEntity componentEntity, final NiFiServiceFacade serviceFacade,
@@ -81,4 +81,5 @@ public static AffectedComponentEntity updateEntity(final AffectedComponentEntity
 
         return null;
     }
+
 }

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/util/JdbcCommon.java
Patch:
@@ -280,7 +280,7 @@ public static long convertToAvroStream(final ResultSet rs, final OutputStream ou
                             InputStream is = clob.getAsciiStream();
                             int index = 0;
                             int c = is.read();
-                            while (c > 0) {
+                            while (c >= 0) {
                                 buffer[index++] = (char) c;
                                 c = is.read();
                             }
@@ -316,7 +316,7 @@ public static long convertToAvroStream(final ResultSet rs, final OutputStream ou
                             InputStream is = blob.getBinaryStream();
                             int index = 0;
                             int c = is.read();
-                            while (c > 0) {
+                            while (c >= 0) {
                                 buffer[index++] = (byte) c;
                                 c = is.read();
                             }

File: nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/processors/JMSPublisherConsumerTest.java
Patch:
@@ -154,8 +154,7 @@ public void accept(JMSResponse response) {
         }
     }
 
-
-    @Test(timeout = 2000000)
+    @Test(timeout = 20000)
     public void testMultipleThreads() throws Exception {
         String destinationName = "testQueue";
         JmsTemplate publishTemplate = CommonTest.buildJmsTemplateForDestination(false);

File: nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/processors/PublishJMSTest.java
Patch:
@@ -73,7 +73,7 @@ public void validateSuccessfulPublishAndTransferToSuccess() throws Exception {
         assertEquals("cooQueue", ((Queue) message.getJMSReplyTo()).getQueueName());
         assertEquals("foo", message.getStringProperty("foo"));
 
-        runner.run(1, true); // Run once just so that we can trigger the shutdown of the Connection Factory
+        runner.run(1, true, false); // Run once just so that we can trigger the shutdown of the Connection Factory
     }
 
     @Test
@@ -111,7 +111,7 @@ public void validateSuccessfulPublishAndTransferToSuccessWithEL() throws Excepti
         assertEquals("cooQueue", ((Queue) message.getJMSReplyTo()).getQueueName());
         assertEquals("foo", message.getStringProperty("foo"));
 
-        runner.run(1, true); // Run once just so that we can trigger the shutdown of the Connection Factory
+        runner.run(1, true, false); // Run once just so that we can trigger the shutdown of the Connection Factory
     }
 
     @Test

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/DebugFlow.java
Patch:
@@ -28,7 +28,6 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicReference;
 
-import org.apache.http.annotation.ThreadSafe;
 import org.apache.nifi.annotation.behavior.EventDriven;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.Tags;
@@ -51,7 +50,6 @@
 import org.apache.nifi.processor.io.OutputStreamCallback;
 import org.apache.nifi.processor.util.StandardValidators;
 
-@ThreadSafe()
 @EventDriven()
 @Tags({"test", "debug", "processor", "utility", "flow", "FlowFile"})
 @CapabilityDescription("The DebugFlow processor aids testing and debugging the FlowFile framework by allowing various "

File: nifi-nar-bundles/nifi-atlas-bundle/nifi-atlas-reporting-task/src/test/java/org/apache/nifi/atlas/provenance/analyzer/TestKafkaTopic.java
Patch:
@@ -31,6 +31,7 @@
 import static org.apache.nifi.atlas.NiFiTypes.ATTR_QUALIFIED_NAME;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
+import static org.mockito.Matchers.eq;
 import static org.mockito.Matchers.matches;
 import static org.mockito.Mockito.when;
 
@@ -73,7 +74,7 @@ public void testPublishKafkaMultipleBrokers() {
         when(record.getEventType()).thenReturn(ProvenanceEventType.SEND);
 
         final ClusterResolvers clusterResolvers = Mockito.mock(ClusterResolvers.class);
-        when(clusterResolvers.fromHostNames(matches(".+\\.example\\.com"))).thenReturn("cluster1");
+        when(clusterResolvers.fromHostNames(eq("0.example.com"), eq("1.example.com"))).thenReturn("cluster1");
 
         final AnalysisContext context = Mockito.mock(AnalysisContext.class);
         when(context.getClusterResolver()).thenReturn(clusterResolvers);

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/main/java/org/apache/nifi/processors/azure/storage/ListAzureBlobStorage.java
Patch:
@@ -106,7 +106,8 @@ protected Map<String, String> createAttributes(BlobInfo entity, ProcessContext c
         attributes.put("azure.etag", entity.getEtag());
         attributes.put("azure.primaryUri", entity.getPrimaryUri());
         attributes.put("azure.secondaryUri", entity.getSecondaryUri());
-        attributes.put("azure.blobname", entity.getName());
+        attributes.put("azure.blobname", entity.getBlobName());
+        attributes.put("filename", entity.getName());
         attributes.put("azure.blobtype", entity.getBlobType());
         attributes.put("azure.length", String.valueOf(entity.getLength()));
         attributes.put("azure.timestamp", String.valueOf(entity.getTimestamp()));
@@ -163,6 +164,7 @@ protected List<BlobInfo> performListing(final ProcessContext context, final Long
 
                     Builder builder = new BlobInfo.Builder()
                                               .primaryUri(uri.getPrimaryUri().toString())
+                                              .blobName(cloudBlob.getName())
                                               .containerName(containerName)
                                               .contentType(properties.getContentType())
                                               .contentLanguage(properties.getContentLanguage())

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/CreateTemplateRequestEntity.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * A serialized representation of this class can be placed in the entity body of a request to the API.
  */
-@XmlRootElement(name = "copySnippetRequestEntity")
+@XmlRootElement(name = "createTemplateRequestEntity")
 public class CreateTemplateRequestEntity extends Entity {
 
     private String name;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/AccessPolicySummaryDTO.java
Patch:
@@ -37,7 +37,7 @@ public class AccessPolicySummaryDTO extends ComponentDTO {
      */
     @ApiModelProperty(
             value = "The action associated with this access policy.",
-            allowableValues = "READ, WRITE"
+            allowableValues = "read, write"
     )
     public String getAction() {
         return action;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/ProcessorStatusDTO.java
Patch:
@@ -77,7 +77,8 @@ public void setType(String type) {
         this.type = type;
     }
 
-    @ApiModelProperty("The run status of the Processor")
+    @ApiModelProperty(value="The run status of the Processor",
+            allowableValues = "Running, Stopped, Disabled, Invalid")
     public String getRunStatus() {
         return runStatus;
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/ProcessorStatusSnapshotDTO.java
Patch:
@@ -94,7 +94,7 @@ public void setType(String type) {
      */
     @ApiModelProperty(
             value = "The state of the processor.",
-            allowableValues = "RUNNING, STOPPED, DISABLED, INVALID"
+            allowableValues = "Running, Stopped, Disabled, Invalid"
     )
     public String getRunStatus() {
         return runStatus;

File: nifi-commons/nifi-record-path/src/main/java/org/apache/nifi/record/path/paths/MultiMapKeyPath.java
Patch:
@@ -49,7 +49,7 @@ public Stream<FieldValue> evaluate(final RecordPathEvaluationContext context) {
                 final Map<String, ?> map = (Map<String, ?>) fieldValue.getValue();
                 return mapKeys.stream().map(key -> {
                     final DataType valueType = ((MapDataType) fieldValue.getField().getDataType()).getValueType();
-                    final RecordField elementField = new RecordField(fieldValue.getField().getFieldName() + "['" + key + "']", valueType);
+                    final RecordField elementField = new RecordField(fieldValue.getField().getFieldName(), valueType);
                     return new MapEntryFieldValue(map.get(key), elementField, fieldValue, key);
                 });
             });

File: nifi-commons/nifi-record-path/src/main/java/org/apache/nifi/record/path/paths/SingularMapKeyPath.java
Patch:
@@ -45,7 +45,7 @@ public Stream<FieldValue> evaluate(final RecordPathEvaluationContext context) {
             .filter(Filters.fieldTypeFilter(RecordFieldType.MAP))
             .map(fieldValue -> {
                 final DataType valueType = ((MapDataType) fieldValue.getField().getDataType()).getValueType();
-                final RecordField elementField = new RecordField(fieldValue.getField().getFieldName() + "['" + mapKey + "']", valueType);
+                final RecordField elementField = new RecordField(fieldValue.getField().getFieldName(), valueType);
                 return new MapEntryFieldValue(getMapValue(fieldValue), elementField, fieldValue, mapKey);
             });
     }

File: nifi-commons/nifi-record-path/src/main/java/org/apache/nifi/record/path/paths/WildcardIndexPath.java
Patch:
@@ -59,7 +59,7 @@ public Stream<FieldValue> evaluate(final RecordPathEvaluationContext context) {
                     return map.entrySet().stream()
                         .map(entry -> {
                             final DataType valueType = ((MapDataType) fieldValue.getField().getDataType()).getValueType();
-                            final RecordField elementField = new RecordField(fieldValue.getField().getFieldName() + "['" + entry.getKey() + "']", valueType);
+                            final RecordField elementField = new RecordField(fieldValue.getField().getFieldName(), valueType);
                             return new MapEntryFieldValue(entry.getValue(), elementField, fieldValue, entry.getKey());
                         });
                 } else {

File: nifi-nar-bundles/nifi-provenance-repository-bundle/nifi-persistent-provenance-repository/src/main/java/org/apache/nifi/provenance/lucene/SimpleIndexManager.java
Patch:
@@ -53,7 +53,7 @@ public class SimpleIndexManager implements IndexManager {
 
     public SimpleIndexManager(final RepositoryConfiguration repoConfig) {
         this.repoConfig = repoConfig;
-        this.searchExecutor = Executors.newFixedThreadPool(repoConfig.getQueryThreadPoolSize(), new NamedThreadFactory("Search Lucene Index"));
+        this.searchExecutor = Executors.newFixedThreadPool(repoConfig.getQueryThreadPoolSize(), new NamedThreadFactory("Search Lucene Index", true));
     }
 
     @Override

File: nifi-nar-bundles/nifi-provenance-repository-bundle/nifi-persistent-provenance-repository/src/main/java/org/apache/nifi/provenance/store/WriteAheadStorePartition.java
Patch:
@@ -632,6 +632,8 @@ public void run() {
             logger.error("Failed to re-index Provenance Events for partition " + partitionName, e);
         }
 
+        executor.shutdown();
+
         final long millis = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);
         final long seconds = millis / 1000L;
         final long millisRemainder = millis % 1000L;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/AffectedComponentDTO.java
Patch:
@@ -26,6 +26,8 @@
 public class AffectedComponentDTO {
     public static final String COMPONENT_TYPE_PROCESSOR = "PROCESSOR";
     public static final String COMPONENT_TYPE_CONTROLLER_SERVICE = "CONTROLLER_SERVICE";
+    public static final String COMPONENT_TYPE_INPUT_PORT = "INPUT_PORT";
+    public static final String COMPONENT_TYPE_OUTPUT_PORT = "OUTPUT_PORT";
     public static final String COMPONENT_TYPE_REMOTE_INPUT_PORT = "REMOTE_INPUT_PORT";
     public static final String COMPONENT_TYPE_REMOTE_OUTPUT_PORT = "REMOTE_OUTPUT_PORT";
 
@@ -58,6 +60,7 @@ public void setId(final String id) {
 
     @ApiModelProperty(value = "The type of this component",
         allowableValues = COMPONENT_TYPE_PROCESSOR + "," + COMPONENT_TYPE_CONTROLLER_SERVICE + ", "
+            + COMPONENT_TYPE_INPUT_PORT + ", " + COMPONENT_TYPE_OUTPUT_PORT + ", "
             + COMPONENT_TYPE_REMOTE_INPUT_PORT + ", " + COMPONENT_TYPE_REMOTE_OUTPUT_PORT)
     public String getReferenceType() {
         return referenceType;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java
Patch:
@@ -620,7 +620,7 @@ public Response updateVariableRegistry(
         final VariableRegistryDTO requestRegistryDto = requestVariableRegistryEntity.getVariableRegistry();
         if (!groupId.equals(requestRegistryDto.getProcessGroupId())) {
             throw new IllegalArgumentException(String.format("The process group id (%s) in the request body does "
-                    + "not equal the process group id of the requested resource (%s).", registryDto.getProcessGroupId(), groupId));
+                    + "not equal the process group id of the requested resource (%s).", requestRegistryDto.getProcessGroupId(), groupId));
         }
 
         if (isReplicateRequest()) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/StandardFlowSynchronizer.java
Patch:
@@ -240,7 +240,7 @@ public void sync(final FlowController controller, final DataFlow proposedFlow, f
                     existingFlowEmpty = taskElements.isEmpty()
                         && unrootedControllerServiceElements.isEmpty()
                         && isEmpty(rootGroupDto)
-                        && registriesPresent;
+                        && !registriesPresent;
                     logger.debug("Existing Flow Empty = {}", existingFlowEmpty);
                 }
             }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/groups/StandardProcessGroup.java
Patch:
@@ -3470,7 +3470,7 @@ private void updateProcessGroup(final ProcessGroup group, final VersionedProcess
                 added.findAllRemoteProcessGroups().stream().forEach(RemoteProcessGroup::initialize);
                 LOG.info("Added {} to {}", added, this);
             } else if (childCoordinates == null || updateDescendantVersionedGroups) {
-                updateProcessGroup(childGroup, proposedChildGroup, componentIdSeed, updatedVersionedComponentIds, true, updateName, updateDescendantVersionedGroups, variablesToSkip);
+                updateProcessGroup(childGroup, proposedChildGroup, componentIdSeed, updatedVersionedComponentIds, true, true, updateDescendantVersionedGroups, variablesToSkip);
                 LOG.info("Updated {}", childGroup);
             }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ControllerConfigurationDTO.java
Patch:
@@ -28,7 +28,6 @@ public class ControllerConfigurationDTO {
 
     private Integer maxTimerDrivenThreadCount;
     private Integer maxEventDrivenThreadCount;
-    private String registryUrl;
 
     /**
      * @return maximum number of timer driven threads this NiFi has available

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/FlowConfigurationDTO.java
Patch:
@@ -127,5 +127,4 @@ public Integer getTimeOffset() {
     public void setTimeOffset(Integer timeOffset) {
         this.timeOffset = timeOffset;
     }
-
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/CreateActiveRequestEntity.java
Patch:
@@ -21,7 +21,7 @@
 
 import javax.xml.bind.annotation.XmlRootElement;
 
-@XmlRootElement(name = "createActiveRequest")
+@XmlRootElement(name = "createActiveRequestEntity")
 public class CreateActiveRequestEntity extends Entity {
     private String processGroupId;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/StartVersionControlRequestEntity.java
Patch:
@@ -23,7 +23,7 @@
 
 import javax.xml.bind.annotation.XmlRootElement;
 
-@XmlRootElement(name = "versionedFlow")
+@XmlRootElement(name = "startVersionControlRequestEntity")
 public class StartVersionControlRequestEntity extends Entity {
     private VersionedFlowDTO versionedFlow;
     private RevisionDTO processGroupRevision;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/VersionedFlowEntity.java
Patch:
@@ -22,7 +22,7 @@
 
 import javax.xml.bind.annotation.XmlRootElement;
 
-@XmlRootElement(name = "versionedFlow")
+@XmlRootElement(name = "versionedFlowEntity")
 public class VersionedFlowEntity extends Entity {
     private VersionedFlowDTO versionedFlow;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/VersionedFlowSnapshotEntity.java
Patch:
@@ -23,7 +23,7 @@
 
 import javax.xml.bind.annotation.XmlRootElement;
 
-@XmlRootElement(name = "versionedFlowSnapshot")
+@XmlRootElement(name = "versionedFlowSnapshotEntity")
 public class VersionedFlowSnapshotEntity extends Entity {
     private VersionedFlowSnapshot versionedFlowSnapshot;
     private RevisionDTO processGroupRevision;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/VersionedFlowSnapshotMetadataEntity.java
Patch:
@@ -22,7 +22,7 @@
 
 import javax.xml.bind.annotation.XmlRootElement;
 
-@XmlRootElement(name = "versionedFlowSnapshotMetadata")
+@XmlRootElement(name = "versionedFlowSnapshotMetadataEntity")
 public class VersionedFlowSnapshotMetadataEntity extends Entity {
     private VersionedFlowSnapshotMetadata versionedFlowSnapshotMetadata;
     private String registryId;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardProcessGroupDAO.java
Patch:
@@ -275,6 +275,7 @@ public ProcessGroup updateVersionControlInformation(final VersionControlInformat
     public ProcessGroup disconnectVersionControl(final String groupId) {
         final ProcessGroup group = locateProcessGroup(flowController, groupId);
         group.disconnectVersionControl(true);
+        group.onComponentModified();
         return group;
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/NiFiServiceFacade.java
Patch:
@@ -1289,7 +1289,7 @@ Set<DocumentedTypeDTO> getControllerServiceTypes(final String serviceType, final
      * Returns a FlowComparisonEntity that contains all of the local modifications since the Process Group
      * was last synchronized with the Flow Registry
      *
-     * @param processGroupId
+     * @param processGroupId the ID of the Process Group
      * @return a FlowComparisonEntity that contains all of the local modifications since the Process Group
      *         was last synchronized with the Flow Registry
      * @throws IllegalStateException if the Process Group with the given ID is not under version control
@@ -1455,8 +1455,8 @@ VersionControlInformationEntity setVersionControlInformation(Revision processGro
      *            update the contents of that Process Group
      * @return the Process Group
      */
-    ProcessGroupEntity updateProcessGroupContents(NiFiUser user, Revision revision, String groupId, VersionControlInformationDTO versionControlInfo, VersionedFlowSnapshot snapshot, String componentIdSeed,
-        boolean verifyNotModified, boolean updateSettings, boolean updateDescendantVersionedFlows);
+    ProcessGroupEntity updateProcessGroupContents(NiFiUser user, Revision revision, String groupId, VersionControlInformationDTO versionControlInfo, VersionedFlowSnapshot snapshot,
+                                                  String componentIdSeed, boolean verifyNotModified, boolean updateSettings, boolean updateDescendantVersionedFlows);
 
     // ----------------------------------------
     // Component state methods

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiServiceFacade.java
Patch:
@@ -87,6 +87,7 @@
 import org.apache.nifi.history.HistoryQuery;
 import org.apache.nifi.history.PreviousValue;
 import org.apache.nifi.registry.ComponentVariableRegistry;
+import org.apache.nifi.registry.authorization.Permissions;
 import org.apache.nifi.registry.bucket.Bucket;
 import org.apache.nifi.registry.client.NiFiRegistryException;
 import org.apache.nifi.registry.flow.FlowRegistry;
@@ -115,7 +116,6 @@
 import org.apache.nifi.registry.flow.mapping.InstantiatedVersionedProcessor;
 import org.apache.nifi.registry.flow.mapping.InstantiatedVersionedRemoteGroupPort;
 import org.apache.nifi.registry.flow.mapping.NiFiRegistryFlowMapper;
-import org.apache.nifi.registry.model.authorization.Permissions;
 import org.apache.nifi.remote.RemoteGroupPort;
 import org.apache.nifi.remote.RootGroupPort;
 import org.apache.nifi.reporting.Bulletin;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/VersionsResource.java
Patch:
@@ -437,7 +437,7 @@ public Response saveToFlowRegistry(
         if (StringUtils.isEmpty(versionedFlowDto.getFlowName()) && StringUtils.isEmpty(versionedFlowDto.getFlowId())) {
             throw new IllegalArgumentException("The Flow Name or Flow ID must be supplied.");
         }
-        if (versionedFlowDto.getFlowName().length() > 1000) {
+        if (versionedFlowDto.getFlowName() != null && versionedFlowDto.getFlowName().length() > 1000) {
             throw new IllegalArgumentException("The Flow Name cannot exceed 1,000 characters");
         }
         if (StringUtils.isEmpty(versionedFlowDto.getRegistryId())) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/EntityFactory.java
Patch:
@@ -241,7 +241,7 @@ public ProcessGroupEntity createProcessGroupEntity(final ProcessGroupDTO dto, fi
             entity.setSyncFailureCount(dto.getSyncFailureCount());
 
             if (dto.getVersionControlInformation() != null) {
-                entity.setState(dto.getVersionControlInformation().getState());
+                entity.setVersionedFlowState(dto.getVersionControlInformation().getState());
             }
 
             entity.setBulletins(bulletins); // include bulletins as authorized descendant component bulletins should be available
@@ -513,7 +513,7 @@ public FlowBreadcrumbEntity createFlowBreadcrumbEntity(final FlowBreadcrumbDTO d
             entity.setId(dto.getId());
 
             if (dto.getVersionControlInformation() != null) {
-                entity.setState(dto.getVersionControlInformation().getState());
+                entity.setVersionedFlowState(dto.getVersionControlInformation().getState());
             }
 
             if (permissions != null && permissions.getCanRead()) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/ProcessGroupEntityMerger.java
Patch:
@@ -48,6 +48,9 @@ public void mergeStatus(ProcessGroupStatusDTO clientStatus, boolean clientStatus
     private void mergeVersionControlInformation(ProcessGroupEntity targetGroup, ProcessGroupEntity toMerge) {
         final ProcessGroupDTO targetGroupDto = targetGroup.getComponent();
         final ProcessGroupDTO toMergeGroupDto = toMerge.getComponent();
+        if (targetGroupDto == null || toMergeGroupDto == null) {
+            return;
+        }
 
         final VersionControlInformationDTO targetVersionControl = targetGroupDto.getVersionControlInformation();
         final VersionControlInformationDTO toMergeVersionControl = toMergeGroupDto.getVersionControlInformation();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/groups/ProcessGroup.java
Patch:
@@ -965,7 +965,7 @@ public interface ProcessGroup extends ComponentAuthorizable, Positionable, Versi
     /**
      * Disconnects this Process Group from version control. If not currently under version control, this method does nothing.
      */
-    void disconnectVersionControl();
+    void disconnectVersionControl(boolean removeVersionedComponentIds);
 
     /**
      * Synchronizes the Process Group with the given Flow Registry, determining whether or not the local flow

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/registry/flow/FlowRegistry.java
Patch:
@@ -212,6 +212,5 @@ VersionedFlowSnapshot registerVersionedFlowSnapshot(VersionedFlow flow, Versione
      * @throws IOException if unable to communicate with the Flow Registry
      * @throws NiFiRegistryException if unable to find a flow with the given bucket ID and flow ID
      */
-    // TODO: Do we still need this?
     VersionedFlow getVersionedFlow(String bucketId, String flowId) throws IOException, NiFiRegistryException;
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/service/mock/MockProcessGroup.java
Patch:
@@ -667,7 +667,7 @@ public void setVersionControlInformation(VersionControlInformation versionContro
     }
 
     @Override
-    public void disconnectVersionControl() {
+    public void disconnectVersionControl(final boolean removeVersionedComponentIds) {
         this.versionControlInfo = null;
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/VersionsResource.java
Patch:
@@ -1110,7 +1110,7 @@ public Response initiateVersionControlUpdate(
                 // Create an asynchronous request that will occur in the background, because this request may
                 // result in stopping components, which can take an indeterminate amount of time.
                 final String requestId = UUID.randomUUID().toString();
-                final AsynchronousWebRequest<VersionControlInformationEntity> request = new StandardAsynchronousWebRequest<>(requestId, groupId, user, "Stopping Processors");
+                final AsynchronousWebRequest<VersionControlInformationEntity> request = new StandardAsynchronousWebRequest<>(requestId, groupId, user, "Stopping Affected Processors");
 
                 // Submit the request to be performed in the background
                 final Consumer<AsynchronousWebRequest<VersionControlInformationEntity>> updateTask = vcur -> {
@@ -1275,7 +1275,7 @@ public Response initiateRevertFlowVersion(@ApiParam("The process group id.") @Pa
                 // Create an asynchronous request that will occur in the background, because this request may
                 // result in stopping components, which can take an indeterminate amount of time.
                 final String requestId = UUID.randomUUID().toString();
-                final AsynchronousWebRequest<VersionControlInformationEntity> request = new StandardAsynchronousWebRequest<>(requestId, groupId, user, "Stopping Processors");
+                final AsynchronousWebRequest<VersionControlInformationEntity> request = new StandardAsynchronousWebRequest<>(requestId, groupId, user, "Stopping Affected Processors");
 
                 // Submit the request to be performed in the background
                 final Consumer<AsynchronousWebRequest<VersionControlInformationEntity>> updateTask = vcur -> {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardProcessGroupDAO.java
Patch:
@@ -274,7 +274,7 @@ public ProcessGroup updateVersionControlInformation(final VersionControlInformat
     @Override
     public ProcessGroup disconnectVersionControl(final String groupId) {
         final ProcessGroup group = locateProcessGroup(flowController, groupId);
-        group.disconnectVersionControl();
+        group.disconnectVersionControl(true);
         return group;
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/util/SnippetUtils.java
Patch:
@@ -90,7 +90,6 @@ public final class SnippetUtils {
     private DtoFactory dtoFactory;
     private AccessPolicyDAO accessPolicyDAO;
 
-
     /**
      * Populates the specified snippet and returns the details.
      *

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/ProcessGroupEntityMerger.java
Patch:
@@ -55,7 +55,7 @@ private void mergeVersionControlInformation(ProcessGroupEntity targetGroup, Proc
         if (targetVersionControl == null) {
             targetGroupDto.setVersionControlInformation(toMergeGroupDto.getVersionControlInformation());
         } else if (toMergeVersionControl != null) {
-            targetVersionControl.setCurrent(Boolean.TRUE.equals(targetVersionControl.getCurrent()) && Boolean.TRUE.equals(toMergeVersionControl.getCurrent()));
+            VersionControlInformationEntityMerger.updateFlowState(targetVersionControl, toMergeVersionControl);
         }
     }
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/StandardFlowSynchronizer.java
Patch:
@@ -88,6 +88,7 @@
 import org.apache.nifi.registry.flow.FlowRegistry;
 import org.apache.nifi.registry.flow.FlowRegistryClient;
 import org.apache.nifi.registry.flow.StandardVersionControlInformation;
+import org.apache.nifi.registry.flow.VersionedFlowState;
 import org.apache.nifi.remote.RemoteGroupPort;
 import org.apache.nifi.remote.RootGroupPort;
 import org.apache.nifi.remote.protocol.SiteToSiteTransportProtocol;
@@ -1116,10 +1117,10 @@ private ProcessGroup addProcessGroup(final FlowController controller, final Proc
             final FlowRegistry flowRegistry = controller.getFlowRegistryClient().getFlowRegistry(versionControlInfoDto.getRegistryId());
             final String registryName = flowRegistry == null ? versionControlInfoDto.getRegistryId() : flowRegistry.getName();
 
+            versionControlInfoDto.setState(VersionedFlowState.SYNC_FAILURE.name());
+            versionControlInfoDto.setStateExplanation("Process Group has not yet been synchronized with the Flow Registry");
             final StandardVersionControlInformation versionControlInformation = StandardVersionControlInformation.Builder.fromDto(versionControlInfoDto)
                 .registryName(registryName)
-                .modified(false)
-                .current(true)
                 .build();
 
             // pass empty map for the version control mapping because the VersionedComponentId has already been set on the components

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/remote/StandardRemoteProcessGroup.java
Patch:
@@ -178,9 +178,7 @@ public void reportEvent(final Severity severity, final String category, final St
             }
         };
 
-        final Runnable checkAuthorizations = new InitializationTask();
         backgroundThreadExecutor = new FlowEngine(1, "Remote Process Group " + id, true);
-        backgroundThreadExecutor.scheduleWithFixedDelay(checkAuthorizations, 30L, 30L, TimeUnit.SECONDS);
     }
 
     @Override
@@ -197,6 +195,9 @@ public void initialize() {
                 logger.warn("Unable to communicate with remote instance {}", new Object[] {this, e});
             }
         });
+
+        final Runnable checkAuthorizations = new InitializationTask();
+        backgroundThreadExecutor.scheduleWithFixedDelay(checkAuthorizations, 0L, 60L, TimeUnit.SECONDS);
     }
 
     @Override

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-administration/src/main/java/org/apache/nifi/admin/dao/impl/StandardActionDAO.java
Patch:
@@ -219,8 +219,8 @@ public Action createAction(Action action) throws DataAccessException {
             statement.setString(1, StringUtils.left(action.getUserIdentity(), 4096));
             statement.setString(2, action.getSourceId());
             statement.setString(3, StringUtils.left(action.getSourceName(), 1000));
-            statement.setString(4, action.getSourceType().toString());
-            statement.setString(5, action.getOperation().toString());
+            statement.setString(4, action.getSourceType().name());
+            statement.setString(5, action.getOperation().name());
             statement.setTimestamp(6, new java.sql.Timestamp(action.getTimestamp().getTime()));
 
             // insert the action

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/RegistriesEntity.java
Patch:
@@ -22,13 +22,13 @@
 /**
  * A serialized representation of this class can be placed in the entity body of a response to the API. This particular entity holds a reference to a set of RegistryEntity's.
  */
-@XmlRootElement(name = "registriesEntity")
+@XmlRootElement(name = "registryClientsEntity")
 public class RegistriesEntity extends Entity {
 
     private Set<RegistryEntity> registries;
 
     /**
-     * @return collection of LabelEntity's that are being serialized
+     * @return collection of RegistryEntity's that are being serialized
      */
     public Set<RegistryEntity> getRegistries() {
         return registries;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/FlowResource.java
Patch:
@@ -88,6 +88,7 @@
 import org.apache.nifi.web.api.entity.ProcessorStatusEntity;
 import org.apache.nifi.web.api.entity.ProcessorTypesEntity;
 import org.apache.nifi.web.api.entity.RegistriesEntity;
+import org.apache.nifi.web.api.entity.RegistryClientsEntity;
 import org.apache.nifi.web.api.entity.RegistryEntity;
 import org.apache.nifi.web.api.entity.RemoteProcessGroupStatusEntity;
 import org.apache.nifi.web.api.entity.ReportingTaskEntity;
@@ -1316,7 +1317,7 @@ public Response getAboutInfo() {
     @Consumes(MediaType.WILDCARD)
     @Produces(MediaType.APPLICATION_JSON)
     @Path("registries")
-    @ApiOperation(value = "Gets the listing of available registries", response = RegistriesEntity.class, authorizations = {
+    @ApiOperation(value = "Gets the listing of available registries", response = RegistryClientsEntity.class, authorizations = {
             @Authorization(value = "Read - /flow")
     })
     @ApiResponses(value = {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java
Patch:
@@ -272,10 +272,10 @@ public ActionDTO createActionDto(final Action action) {
         actionDto.setId(action.getId());
         actionDto.setSourceId(action.getSourceId());
         actionDto.setSourceName(action.getSourceName());
-        actionDto.setSourceType(action.getSourceType().name());
+        actionDto.setSourceType(action.getSourceType().toString());
         actionDto.setTimestamp(action.getTimestamp());
         actionDto.setUserIdentity(action.getUserIdentity());
-        actionDto.setOperation(action.getOperation().name());
+        actionDto.setOperation(action.getOperation().toString());
         actionDto.setActionDetails(createActionDetailsDto(action.getActionDetails()));
         actionDto.setComponentDetails(createComponentDetailsDto(action.getComponentDetails()));
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/groups/RemoteProcessGroup.java
Patch:
@@ -33,6 +33,8 @@
 
 public interface RemoteProcessGroup extends ComponentAuthorizable, Positionable, VersionedComponent {
 
+    void initialize();
+
     @Override
     String getIdentifier();
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/FlowController.java
Patch:
@@ -1779,6 +1779,7 @@ private Position toPosition(final PositionDTO dto) {
      */
     public void instantiateSnippet(final ProcessGroup group, final FlowSnippetDTO dto) throws ProcessorInstantiationException {
         instantiateSnippet(group, dto, true);
+        group.findAllRemoteProcessGroups().stream().forEach(RemoteProcessGroup::initialize);
     }
 
     private void instantiateSnippet(final ProcessGroup group, final FlowSnippetDTO dto, final boolean topLevel) throws ProcessorInstantiationException {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/StandardFlowSynchronizer.java
Patch:
@@ -360,6 +360,8 @@ && isEmpty(rootGroupDto)
                         rootGroup = updateProcessGroup(controller, /* parent group */ null, rootGroupElement, encryptor, encodingVersion);
                     }
 
+                    rootGroup.findAllRemoteProcessGroups().forEach(RemoteProcessGroup::initialize);
+
                     // If there are any Templates that do not exist in the Proposed Flow that do exist in the 'existing flow', we need
                     // to ensure that we also add those to the appropriate Process Groups, so that we don't lose them.
                     final Document existingFlowConfiguration = parseFlowBytes(existingFlow);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java
Patch:
@@ -1792,7 +1792,7 @@ public AffectedComponentEntity createAffectedComponentEntity(final ProcessorEnti
         componentDto.setId(processorDto.getId());
         componentDto.setName(processorDto.getName());
         componentDto.setProcessGroupId(processorDto.getParentGroupId());
-        componentDto.setReferenceType(AffectedComponentDTO.COMPONENT_TYPE_CONTROLLER_SERVICE);
+        componentDto.setReferenceType(AffectedComponentDTO.COMPONENT_TYPE_PROCESSOR);
         componentDto.setState(processorDto.getState());
         componentDto.setValidationErrors(processorDto.getValidationErrors());
         component.setComponent(componentDto);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardRemoteProcessGroupDAO.java
Patch:
@@ -85,6 +85,7 @@ public RemoteProcessGroup createRemoteProcessGroup(String groupId, RemoteProcess
 
         // create the remote process group
         RemoteProcessGroup remoteProcessGroup = flowController.createRemoteProcessGroup(remoteProcessGroupDTO.getId(), targetUris);
+        remoteProcessGroup.initialize();
 
         // set other properties
         updateRemoteProcessGroup(remoteProcessGroup, remoteProcessGroupDTO);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/service/ControllerServiceNode.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.nifi.controller.service;
 
+import org.apache.nifi.components.ConfigurableComponent;
 import org.apache.nifi.components.VersionedComponent;
 import org.apache.nifi.controller.ConfiguredComponent;
 import org.apache.nifi.controller.ControllerService;
@@ -27,7 +28,7 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ScheduledExecutorService;
 
-public interface ControllerServiceNode extends ConfiguredComponent, VersionedComponent {
+public interface ControllerServiceNode extends ConfiguredComponent, ConfigurableComponent, VersionedComponent {
 
     /**
      * @return the Process Group that this Controller Service belongs to, or <code>null</code> if the Controller Service

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/StandardFlowSynchronizer.java
Patch:
@@ -931,6 +931,7 @@ private ProcessGroup updateProcessGroup(final FlowController controller, final P
             final Label label = controller.createLabel(labelDTO.getId(), labelDTO.getLabel());
             label.setStyle(labelDTO.getStyle());
             label.setPosition(new Position(labelDTO.getPosition().getX(), labelDTO.getPosition().getY()));
+            label.setVersionedComponentId(labelDTO.getVersionedComponentId());
             if (labelDTO.getWidth() != null && labelDTO.getHeight() != null) {
                 label.setSize(new Size(labelDTO.getWidth(), labelDTO.getHeight()));
             }
@@ -1327,13 +1328,13 @@ private ProcessGroup addProcessGroup(final FlowController controller, final Proc
             for (final Element portElement : getChildrenByTagName(remoteProcessGroupElement, "inputPort")) {
                 inputPorts.add(FlowFromDOMFactory.getRemoteProcessGroupPort(portElement));
             }
-            remoteGroup.setInputPorts(inputPorts);
+            remoteGroup.setInputPorts(inputPorts, false);
 
             final Set<RemoteProcessGroupPortDescriptor> outputPorts = new HashSet<>();
             for (final Element portElement : getChildrenByTagName(remoteProcessGroupElement, "outputPort")) {
                 outputPorts.add(FlowFromDOMFactory.getRemoteProcessGroupPort(portElement));
             }
-            remoteGroup.setOutputPorts(outputPorts);
+            remoteGroup.setOutputPorts(outputPorts, false);
             processGroup.addRemoteProcessGroup(remoteGroup);
 
             for (final RemoteProcessGroupPortDescriptor remoteGroupPortDTO : outputPorts) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java
Patch:
@@ -1717,7 +1717,7 @@ public Response createProcessGroup(
                         // To accomplish this, we call updateProcessGroupContents() passing 'true' for the updateSettings flag but null out the position.
                         flowSnapshot.getFlowContents().setPosition(null);
                         entity = serviceFacade.updateProcessGroupContents(NiFiUserUtils.getNiFiUser(), newGroupRevision, newGroupId,
-                        versionControlInfo, flowSnapshot, getIdGenerationSeed().orElse(null), false, true, true);
+                            versionControlInfo, flowSnapshot, getIdGenerationSeed().orElse(null), false, true, true);
                     }
 
                     populateRemainingProcessGroupEntityContent(entity);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardFunnelDAO.java
Patch:
@@ -91,6 +91,8 @@ public Funnel updateFunnel(FunnelDTO funnelDTO) {
             }
         }
 
+        funnel.getProcessGroup().onComponentModified();
+
         return funnel;
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardInputPortDAO.java
Patch:
@@ -237,6 +237,7 @@ public Port updatePort(PortDTO portDTO) {
             inputPort.setMaxConcurrentTasks(concurrentTasks);
         }
 
+        inputPort.getProcessGroup().onComponentModified();
         return inputPort;
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardLabelDAO.java
Patch:
@@ -102,6 +102,7 @@ public Label updateLabel(LabelDTO labelDTO) {
             label.setSize(new Size(labelDTO.getWidth(), labelDTO.getHeight()));
         }
 
+        label.getProcessGroup().onComponentModified();
         return label;
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardOutputPortDAO.java
Patch:
@@ -233,6 +233,7 @@ public Port updatePort(PortDTO portDTO) {
             outputPort.setMaxConcurrentTasks(concurrentTasks);
         }
 
+        outputPort.getProcessGroup().onComponentModified();
         return outputPort;
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardProcessorDAO.java
Patch:
@@ -411,6 +411,7 @@ public ProcessorNode updateProcessor(ProcessorDTO processorDTO) {
 
         // configure the processor
         configureProcessor(processor, processorDTO);
+        parentGroup.onComponentModified();
 
         // attempt to change the underlying processor if an updated bundle is specified
         // updating the bundle must happen after configuring so that any additional classpath resources are set first

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardRemoteProcessGroupDAO.java
Patch:
@@ -314,6 +314,7 @@ public RemoteGroupPort updateRemoteProcessGroupInputPort(String remoteProcessGro
         // perform the update
         updatePort(port, remoteProcessGroupPortDto, remoteProcessGroup);
 
+        remoteProcessGroup.getProcessGroup().onComponentModified();
         return port;
     }
 
@@ -332,6 +333,7 @@ public RemoteGroupPort updateRemoteProcessGroupOutputPort(String remoteProcessGr
 
         // perform the update
         updatePort(port, remoteProcessGroupPortDto, remoteProcessGroup);
+        remoteProcessGroup.getProcessGroup().onComponentModified();
 
         return port;
     }
@@ -373,8 +375,6 @@ private void updatePort(RemoteGroupPort port, RemoteProcessGroupPortDTO remotePr
     public RemoteProcessGroup updateRemoteProcessGroup(RemoteProcessGroupDTO remoteProcessGroupDTO) {
         RemoteProcessGroup remoteProcessGroup = locateRemoteProcessGroup(remoteProcessGroupDTO.getId());
         return updateRemoteProcessGroup(remoteProcessGroup, remoteProcessGroupDTO);
-
-
     }
 
     private RemoteProcessGroup updateRemoteProcessGroup(RemoteProcessGroup remoteProcessGroup, RemoteProcessGroupDTO remoteProcessGroupDTO) {
@@ -447,6 +447,7 @@ private RemoteProcessGroup updateRemoteProcessGroup(RemoteProcessGroup remotePro
             }
         }
 
+        remoteProcessGroup.getProcessGroup().onComponentModified();
         return remoteProcessGroup;
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/groups/RemoteProcessGroup.java
Patch:
@@ -73,7 +73,7 @@ public interface RemoteProcessGroup extends ComponentAuthorizable, Positionable,
 
     RemoteGroupPort getOutputPort(String id);
 
-    ProcessGroupCounts getCounts();
+    RemoteProcessGroupCounts getCounts();
 
     void refreshFlowContents() throws CommunicationsException;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/registry/flow/RestBasedFlowRegistry.java
Patch:
@@ -231,6 +231,7 @@ private void populateVersionedContentsRecursively(final VersionedProcessGroup gr
             group.setProcessors(contents.getProcessors());
             group.setRemoteProcessGroups(contents.getRemoteProcessGroups());
             group.setVariables(contents.getVariables());
+            coordinates.setLatest(snapshot.isLatest());
         }
 
         for (final VersionedProcessGroup child : group.getProcessGroups()) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/registry/flow/mapping/NiFiRegistryDtoMapper.java
Patch:
@@ -309,10 +309,11 @@ public VersionedRemoteGroupPort mapRemotePort(final RemoteProcessGroupPortDTO dt
         port.setGroupIdentifier(getGroupId(dto.getGroupId()));
         port.setComments(dto.getComments());
         port.setConcurrentlySchedulableTaskCount(dto.getConcurrentlySchedulableTaskCount());
-        port.setGroupId(dto.getGroupId());
+        port.setRemoteGroupId(dto.getGroupId());
         port.setName(dto.getName());
         port.setUseCompression(dto.getUseCompression());
-        port.setBatchSettings(mapBatchSettings(dto.getBatchSettings()));
+        port.setBatchSize(mapBatchSettings(dto.getBatchSettings()));
+        port.setTargetId(dto.getTargetId());
         port.setComponentType(componentType);
         return port;
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/remote/StandardRemoteProcessGroup.java
Patch:
@@ -780,6 +780,7 @@ private StandardRemoteGroupPort addInputPort(final RemoteProcessGroupPortDescrip
             if (!StringUtils.isBlank(descriptor.getBatchDuration())) {
                 port.setBatchDuration(descriptor.getBatchDuration());
             }
+            port.setVersionedComponentId(descriptor.getVersionedComponentId());
 
             inputPorts.put(descriptor.getId(), port);
             return port;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/fingerprint/FingerprintFactoryTest.java
Patch:
@@ -299,6 +299,7 @@ public void testRemotePortFingerprint() throws Exception {
 
         // Assert fingerprints with expected one.
         final String expected = "portId" +
+                "NO_VALUE" +
                 "NO_VALUE" +
                 "3" +
                 "true" +

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java
Patch:
@@ -1641,7 +1641,7 @@ public Response createProcessGroup(
         // Step 6: Replicate the request or call serviceFacade.updateProcessGroup
 
         final VersionControlInformationDTO versionControlInfo = requestProcessGroupEntity.getComponent().getVersionControlInformation();
-        if (versionControlInfo != null) {
+        if (versionControlInfo != null && requestProcessGroupEntity.getVersionedFlowSnapshot() == null) {
             // Step 1: Ensure that user has write permissions to the Process Group. If not, then immediately fail.
             // Step 2: Retrieve flow from Flow Registry
             final VersionedFlowSnapshot flowSnapshot = serviceFacade.getVersionedFlowSnapshot(versionControlInfo, true);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/VersionsResource.java
Patch:
@@ -709,7 +709,7 @@ public Response updateFlowVersion(@ApiParam("The process group id.") @PathParam(
                 final VersionControlInformationDTO versionControlInfoDto = new VersionControlInformationDTO();
                 versionControlInfoDto.setBucketId(snapshotMetadata.getBucketIdentifier());
                 versionControlInfoDto.setBucketName(bucket.getName());
-                versionControlInfoDto.setCurrent(true);
+                versionControlInfoDto.setCurrent(snapshotMetadata.getVersion() == flow.getVersionCount());
                 versionControlInfoDto.setFlowId(snapshotMetadata.getFlowIdentifier());
                 versionControlInfoDto.setFlowName(flow.getName());
                 versionControlInfoDto.setFlowDescription(flow.getDescription());
@@ -1152,7 +1152,7 @@ public Response initiateRevertFlowVersion(@ApiParam("The process group id.") @Pa
         final String idGenerationSeed = getIdGenerationSeed().orElse(null);
 
         // Step 0: Get the Versioned Flow Snapshot from the Flow Registry
-        final VersionedFlowSnapshot flowSnapshot = serviceFacade.getVersionedFlowSnapshot(requestEntity.getVersionControlInformation(), false);
+        final VersionedFlowSnapshot flowSnapshot = serviceFacade.getVersionedFlowSnapshot(requestEntity.getVersionControlInformation(), true);
 
         // The flow in the registry may not contain the same versions of components that we have in our flow. As a result, we need to update
         // the flow snapshot to contain compatible bundles.
@@ -1217,7 +1217,7 @@ public Response initiateRevertFlowVersion(@ApiParam("The process group id.") @Pa
                 final Consumer<AsynchronousWebRequest<VersionControlInformationEntity>> updateTask = vcur -> {
                     try {
                         final VersionControlInformationEntity updatedVersionControlEntity = updateFlowVersion(groupId, componentLifecycle, exampleUri,
-                            affectedComponents, user, replicateRequest, requestEntity, flowSnapshot, request, idGenerationSeed, false, false);
+                            affectedComponents, user, replicateRequest, requestEntity, flowSnapshot, request, idGenerationSeed, false, true);
 
                         vcur.markComplete(updatedVersionControlEntity);
                     } catch (final LifecycleManagementException e) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java
Patch:
@@ -3428,6 +3428,7 @@ public RemoteProcessGroupPortDTO copy(final RemoteProcessGroupPortDTO original)
             batchCopy.setCount(batchOrg.getCount());
             batchCopy.setSize(batchOrg.getSize());
             batchCopy.setDuration(batchOrg.getDuration());
+            copy.setBatchSettings(batchCopy);
         }
         return copy;
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/ProcessGroupDAO.java
Patch:
@@ -114,10 +114,12 @@ public interface ProcessGroupDAO {
      * @param versionControlInformation the new Version Control Information
      * @param componentIdSeed the seed value to use for generating ID's for new components
      * @param updateSettings whether or not to update the process group's name and position
+     * @param updateDescendantVersionedFlows if a child/descendant Process Group is under Version Control, specifies whether or not to
+     *            update the contents of that Process Group
      * @return the process group
      */
     ProcessGroup updateProcessGroupFlow(String groupId, VersionedFlowSnapshot proposedSnapshot, VersionControlInformationDTO versionControlInformation, String componentIdSeed,
-        boolean verifyNotModified, boolean updateSettings);
+        boolean verifyNotModified, boolean updateSettings, boolean updateDescendantVersionedFlows);
 
     /**
      * Applies the given Version Control Information to the Process Group

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/util/CancellableTimedPause.java
Patch:
@@ -43,7 +43,7 @@ public boolean pause() {
 
         long sysTime = System.nanoTime();
         final long maxWaitTime = System.nanoTime() + pauseNanos;
-        while (sysTime < maxWaitTime) {
+        while (sysTime < maxWaitTime && !cancelled) {
             try {
                 TimeUnit.NANOSECONDS.sleep(pauseNanos);
             } catch (final InterruptedException ie) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/groups/ProcessGroup.java
Patch:
@@ -783,8 +783,9 @@ public interface ProcessGroup extends ComponentAuthorizable, Positionable, Versi
      * @param verifyNotDirty whether or not to verify that the Process Group is not 'dirty'. If this value is <code>true</code>,
      *            and the Process Group has been modified since it was last synchronized with the Flow Registry, then this method will
      *            throw an IllegalStateException
+     * @param updateSettings whether or not to update the process group's name and positions
      */
-    void updateFlow(VersionedFlowSnapshot proposedSnapshot, String componentIdSeed, boolean verifyNotDirty);
+    void updateFlow(VersionedFlowSnapshot proposedSnapshot, String componentIdSeed, boolean verifyNotDirty, boolean updateSettings);
 
     /**
      * Verifies a template with the specified name can be created.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/service/mock/MockProcessGroup.java
Patch:
@@ -654,7 +654,7 @@ public void synchronizeWithFlowRegistry(FlowRegistryClient flowRegistry) {
     }
 
     @Override
-    public void updateFlow(VersionedFlowSnapshot proposedFlow, String componentIdSeed, boolean verifyNotDirty) {
+    public void updateFlow(VersionedFlowSnapshot proposedFlow, String componentIdSeed, boolean verifyNotDirty, boolean updateSettings) {
     }
 
     @Override

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/ProcessGroupDAO.java
Patch:
@@ -113,10 +113,11 @@ public interface ProcessGroupDAO {
      * @param proposedSnapshot Flow the new version of the flow
      * @param versionControlInformation the new Version Control Information
      * @param componentIdSeed the seed value to use for generating ID's for new components
+     * @param updateSettings whether or not to update the process group's name and position
      * @return the process group
      */
     ProcessGroup updateProcessGroupFlow(String groupId, VersionedFlowSnapshot proposedSnapshot, VersionControlInformationDTO versionControlInformation, String componentIdSeed,
-        boolean verifyNotModified);
+        boolean verifyNotModified, boolean updateSettings);
 
     /**
      * Applies the given Version Control Information to the Process Group

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardProcessGroupDAO.java
Patch:
@@ -246,6 +246,7 @@ public ProcessGroup updateVersionControlInformation(final VersionControlInformat
         return group;
     }
 
+    @Override
     public ProcessGroup disconnectVersionControl(final String groupId) {
         final ProcessGroup group = locateProcessGroup(flowController, groupId);
         group.disconnectVersionControl();
@@ -254,9 +255,9 @@ public ProcessGroup disconnectVersionControl(final String groupId) {
 
     @Override
     public ProcessGroup updateProcessGroupFlow(final String groupId, final VersionedFlowSnapshot proposedSnapshot, final VersionControlInformationDTO versionControlInformation,
-        final String componentIdSeed, final boolean verifyNotModified) {
+        final String componentIdSeed, final boolean verifyNotModified, final boolean updateSettings) {
         final ProcessGroup group = locateProcessGroup(flowController, groupId);
-        group.updateFlow(proposedSnapshot, componentIdSeed, verifyNotModified);
+        group.updateFlow(proposedSnapshot, componentIdSeed, verifyNotModified, updateSettings);
 
         final StandardVersionControlInformation svci = new StandardVersionControlInformation(
             versionControlInformation.getRegistryId(),

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ControllerConfigurationDTO.java
Patch:
@@ -28,6 +28,7 @@ public class ControllerConfigurationDTO {
 
     private Integer maxTimerDrivenThreadCount;
     private Integer maxEventDrivenThreadCount;
+    private String registryUrl;
 
     /**
      * @return maximum number of timer driven threads this NiFi has available

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/VersionControlInformationEntity.java
Patch:
@@ -25,16 +25,16 @@
 
 @XmlRootElement(name = "versionControlInformationEntity")
 public class VersionControlInformationEntity extends Entity {
-    private VersionControlInformationDTO versionControlDto;
+    private VersionControlInformationDTO versionControlInformation;
     private RevisionDTO processGroupRevision;
 
     @ApiModelProperty("The Version Control information")
     public VersionControlInformationDTO getVersionControlInformation() {
-        return versionControlDto;
+        return versionControlInformation;
     }
 
     public void setVersionControlInformation(VersionControlInformationDTO versionControlDto) {
-        this.versionControlDto = versionControlDto;
+        this.versionControlInformation = versionControlDto;
     }
 
     @ApiModelProperty("The Revision for the Process Group")

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/NiFiWebApiResourceConfig.java
Patch:
@@ -98,6 +98,7 @@ public NiFiWebApiResourceConfig(@Context ServletContext servletContext) {
         register(ctx.getBean("accessResource"));
         register(ctx.getBean("accessPolicyResource"));
         register(ctx.getBean("tenantsResource"));
+        register(ctx.getBean("versionsResource"));
 
         // exception mappers
         register(AccessDeniedExceptionMapper.class);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/concurrent/AsynchronousWebRequest.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.apache.nifi.web.api.concurrent;
 
-import java.util.Date;
-
 import org.apache.nifi.authorization.user.NiFiUser;
 
+import java.util.Date;
+
 public interface AsynchronousWebRequest<T> {
 
     /**
@@ -67,7 +67,7 @@ public interface AsynchronousWebRequest<T> {
     /**
      * Indicates the reason that the request failed, or <code>null</code> if the request has not failed
      *
-     * @param explanation the reason that the request failed, or <code>null</code> if the request has not failed
+     * @return the reason that the request failed, or <code>null</code> if the request has not failed
      */
     String getFailureReason();
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/EntityFactory.java
Patch:
@@ -213,6 +213,7 @@ public PortEntity createPortEntity(final PortDTO dto, final RevisionDTO revision
 
     public ProcessGroupEntity createProcessGroupEntity(final ProcessGroupDTO dto, final RevisionDTO revision, final PermissionsDTO permissions,
                                                        final ProcessGroupStatusDTO status, final List<BulletinEntity> bulletins) {
+
         final ProcessGroupEntity entity = new ProcessGroupEntity();
         entity.setRevision(revision);
         if (dto != null) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/AffectedComponentEntity.java
Patch:
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.nifi.web.api.entity;
 
 import org.apache.nifi.web.api.dto.AffectedComponentDTO;
@@ -33,12 +32,13 @@ public class AffectedComponentEntity extends ComponentEntity implements Permissi
     /**
      * @return variable referencing components that is being serialized
      */
+    @Override
     public AffectedComponentDTO getComponent() {
         return component;
     }
 
+    @Override
     public void setComponent(AffectedComponentDTO component) {
         this.component = component;
     }
-
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/ControllerEndpointMerger.java
Patch:
@@ -33,7 +33,6 @@
 
 public class ControllerEndpointMerger extends AbstractSingleDTOEndpoint<ControllerEntity, ControllerDTO> {
     public static final Pattern CONTROLLER_URI_PATTERN = Pattern.compile("/nifi-api/site-to-site");
-    private PortEntityMerger portMerger = new PortEntityMerger();
 
     @Override
     protected Class<ControllerEntity> getEntityClass() {
@@ -47,7 +46,6 @@ protected ControllerDTO getDto(ControllerEntity entity) {
 
     @Override
     protected void mergeResponses(ControllerDTO clientDto, Map<NodeIdentifier, ControllerDTO> dtoMap, Set<NodeResponse> successfulResponses, Set<NodeResponse> problematicResponses) {
-        ControllerDTO mergedController = clientDto;
         final Map<String, Map<NodeIdentifier, PortDTO>> inputPortMap = new HashMap<>(); // map of port id to map of node id to port dto
         final Map<String, Map<NodeIdentifier, PortDTO>> outputPortMap = new HashMap<>(); // map of port id to map of node id to port dto
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/FlowConfigurationEndpointMerger.java
Patch:
@@ -47,7 +47,6 @@ protected FlowConfigurationDTO getDto(FlowConfigurationEntity entity) {
     protected void mergeResponses(FlowConfigurationDTO clientDto, Map<NodeIdentifier, FlowConfigurationDTO> dtoMap, NodeIdentifier selectedNodeId) {
 
         for (final Map.Entry<NodeIdentifier, FlowConfigurationDTO> entry : dtoMap.entrySet()) {
-            final NodeIdentifier nodeId = entry.getKey();
             final FlowConfigurationDTO toMerge = entry.getValue();
             if (toMerge != clientDto) {
                 clientDto.setSupportsConfigurableAuthorizer(clientDto.getSupportsConfigurableAuthorizer() && toMerge.getSupportsConfigurableAuthorizer());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/ConnectionEntityMerger.java
Patch:
@@ -28,7 +28,6 @@ public class ConnectionEntityMerger implements ComponentEntityMerger<ConnectionE
     public void merge(ConnectionEntity clientEntity, Map<NodeIdentifier, ConnectionEntity> entityMap) {
         ComponentEntityMerger.super.merge(clientEntity, entityMap);
         for (Map.Entry<NodeIdentifier, ConnectionEntity> entry : entityMap.entrySet()) {
-            final NodeIdentifier nodeId = entry.getKey();
             final ConnectionEntity entityStatus = entry.getValue();
             if (entityStatus != clientEntity) {
                 mergeStatus(clientEntity.getStatus(), clientEntity.getPermissions().getCanRead(), entry.getValue().getStatus(), entry.getValue().getPermissions().getCanRead(), entry.getKey());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/PortEntityMerger.java
Patch:
@@ -31,7 +31,6 @@ public class PortEntityMerger implements ComponentEntityMerger<PortEntity>, Comp
     public void merge(PortEntity clientEntity, Map<NodeIdentifier, PortEntity> entityMap) {
         ComponentEntityMerger.super.merge(clientEntity, entityMap);
         for (Map.Entry<NodeIdentifier, PortEntity> entry : entityMap.entrySet()) {
-            final NodeIdentifier nodeId = entry.getKey();
             final PortEntity entityStatus = entry.getValue();
             if (entityStatus != clientEntity) {
                 mergeStatus(clientEntity.getStatus(), clientEntity.getPermissions().getCanRead(), entry.getValue().getStatus(), entry.getValue().getPermissions().getCanRead(), entry.getKey());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/ProcessorEntityMerger.java
Patch:
@@ -32,7 +32,6 @@ public class ProcessorEntityMerger implements ComponentEntityMerger<ProcessorEnt
     public void merge(ProcessorEntity clientEntity, Map<NodeIdentifier, ProcessorEntity> entityMap) {
         ComponentEntityMerger.super.merge(clientEntity, entityMap);
         for (Map.Entry<NodeIdentifier, ProcessorEntity> entry : entityMap.entrySet()) {
-            final NodeIdentifier nodeId = entry.getKey();
             final ProcessorEntity entityStatus = entry.getValue();
             if (entityStatus != clientEntity) {
                 mergeStatus(clientEntity.getStatus(), clientEntity.getPermissions().getCanRead(), entry.getValue().getStatus(), entry.getValue().getPermissions().getCanRead(), entry.getKey());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/spring/FileBasedClusterNodeFirewallFactoryBean.java
Patch:
@@ -25,14 +25,14 @@
 /**
  * Factory bean for creating a singleton FileBasedClusterNodeFirewall instance.
  */
-public class FileBasedClusterNodeFirewallFactoryBean implements FactoryBean {
+public class FileBasedClusterNodeFirewallFactoryBean implements FactoryBean<FileBasedClusterNodeFirewall> {
 
     private FileBasedClusterNodeFirewall firewall;
 
     private NiFiProperties properties;
 
     @Override
-    public Object getObject() throws Exception {
+    public FileBasedClusterNodeFirewall getObject() throws Exception {
         if (firewall == null) {
             final File config = properties.getClusterNodeFirewallFile();
             final File restoreDirectory = properties.getRestoreDirectory();
@@ -44,7 +44,7 @@ public Object getObject() throws Exception {
     }
 
     @Override
-    public Class getObjectType() {
+    public Class<FileBasedClusterNodeFirewall> getObjectType() {
         return FileBasedClusterNodeFirewall.class;
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/integration/Node.java
Patch:
@@ -66,6 +66,7 @@
 import org.apache.nifi.nar.ExtensionManager;
 import org.apache.nifi.nar.SystemBundle;
 import org.apache.nifi.registry.VariableRegistry;
+import org.apache.nifi.registry.flow.FlowRegistryClient;
 import org.apache.nifi.reporting.BulletinRepository;
 import org.apache.nifi.reporting.Severity;
 import org.apache.nifi.util.NiFiProperties;
@@ -147,7 +148,7 @@ public synchronized void start() {
         final HeartbeatMonitor heartbeatMonitor = createHeartbeatMonitor();
         flowController = FlowController.createClusteredInstance(Mockito.mock(FlowFileEventRepository.class), nodeProperties,
             null, null, StringEncryptor.createEncryptor(nodeProperties), protocolSender, Mockito.mock(BulletinRepository.class), clusterCoordinator,
-            heartbeatMonitor, electionManager, VariableRegistry.EMPTY_REGISTRY);
+            heartbeatMonitor, electionManager, VariableRegistry.EMPTY_REGISTRY, Mockito.mock(FlowRegistryClient.class));
 
         try {
             flowController.initializeFlow();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/connectable/Connectable.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.nifi.authorization.resource.ComponentAuthorizable;
 import org.apache.nifi.components.ValidationResult;
+import org.apache.nifi.components.VersionedComponent;
 import org.apache.nifi.controller.Triggerable;
 import org.apache.nifi.groups.ProcessGroup;
 import org.apache.nifi.processor.ProcessSession;
@@ -32,11 +33,12 @@
 /**
  * Represents a connectable component to which or from which data can flow.
  */
-public interface Connectable extends Triggerable, ComponentAuthorizable, Positionable {
+public interface Connectable extends Triggerable, ComponentAuthorizable, Positionable, VersionedComponent {
 
     /**
      * @return the unique identifier for this <code>Connectable</code>
      */
+    @Override
     String getIdentifier();
 
     /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/connectable/Connection.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.nifi.connectable;
 
 import org.apache.nifi.authorization.resource.Authorizable;
+import org.apache.nifi.components.VersionedComponent;
 import org.apache.nifi.controller.queue.FlowFileQueue;
 import org.apache.nifi.controller.repository.FlowFileRecord;
 import org.apache.nifi.groups.ProcessGroup;
@@ -27,7 +28,7 @@
 import java.util.List;
 import java.util.Set;
 
-public interface Connection extends Authorizable {
+public interface Connection extends Authorizable, VersionedComponent {
 
     void enqueue(FlowFileRecord flowFile);
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/label/Label.java
Patch:
@@ -17,14 +17,16 @@
 package org.apache.nifi.controller.label;
 
 import org.apache.nifi.authorization.resource.ComponentAuthorizable;
+import org.apache.nifi.components.VersionedComponent;
 import org.apache.nifi.connectable.Positionable;
 import org.apache.nifi.connectable.Size;
 import org.apache.nifi.groups.ProcessGroup;
 
 import java.util.Map;
 
-public interface Label extends ComponentAuthorizable, Positionable {
+public interface Label extends ComponentAuthorizable, Positionable, VersionedComponent {
 
+    @Override
     String getIdentifier();
 
     Map<String, String> getStyle();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/service/ControllerServiceNode.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.nifi.controller.service;
 
+import org.apache.nifi.components.VersionedComponent;
 import org.apache.nifi.controller.ConfiguredComponent;
 import org.apache.nifi.controller.ControllerService;
 import org.apache.nifi.controller.LoggableComponent;
@@ -26,7 +27,7 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ScheduledExecutorService;
 
-public interface ControllerServiceNode extends ConfiguredComponent {
+public interface ControllerServiceNode extends ConfiguredComponent, VersionedComponent {
 
     /**
      * @return the Process Group that this Controller Service belongs to, or <code>null</code> if the Controller Service

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/groups/RemoteProcessGroup.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.nifi.authorization.resource.ComponentAuthorizable;
 import org.apache.nifi.components.ValidationResult;
+import org.apache.nifi.components.VersionedComponent;
 import org.apache.nifi.connectable.Positionable;
 import org.apache.nifi.controller.exception.CommunicationsException;
 import org.apache.nifi.events.EventReporter;
@@ -30,7 +31,7 @@
 import java.util.Set;
 import java.util.concurrent.TimeUnit;
 
-public interface RemoteProcessGroup extends ComponentAuthorizable, Positionable {
+public interface RemoteProcessGroup extends ComponentAuthorizable, Positionable, VersionedComponent {
 
     @Override
     String getIdentifier();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/service/ControllerServiceLoader.java
Patch:
@@ -198,6 +198,7 @@ private static ControllerServiceNode createControllerService(final ControllerSer
         final ControllerServiceNode node = provider.createControllerService(dto.getType(), dto.getId(), coordinate, Collections.emptySet(), false);
         node.setName(dto.getName());
         node.setComments(dto.getComments());
+        node.setVersionedComponentId(dto.getVersionedComponentId());
         return node;
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/StandardFlowServiceTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.nifi.encrypt.StringEncryptor;
 import org.apache.nifi.events.VolatileBulletinRepository;
 import org.apache.nifi.registry.VariableRegistry;
+import org.apache.nifi.registry.flow.FlowRegistryClient;
 import org.apache.nifi.registry.variable.FileBasedVariableRegistry;
 import org.apache.nifi.util.NiFiProperties;
 import org.apache.nifi.web.api.dto.ConnectableDTO;
@@ -86,7 +87,7 @@ public void setup() throws Exception {
         mockAuditService = mock(AuditService.class);
         revisionManager = mock(RevisionManager.class);
         flowController = FlowController.createStandaloneInstance(mockFlowFileEventRepository, properties, authorizer, mockAuditService, mockEncryptor,
-                                        new VolatileBulletinRepository(), variableRegistry);
+                                        new VolatileBulletinRepository(), variableRegistry, mock(FlowRegistryClient.class));
         flowService = StandardFlowService.createStandaloneInstance(flowController, properties, mockEncryptor, revisionManager, authorizer);
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/scheduling/TestProcessorLifecycle.java
Patch:
@@ -46,6 +46,7 @@
 import org.apache.nifi.processor.Relationship;
 import org.apache.nifi.processor.exception.ProcessException;
 import org.apache.nifi.provenance.MockProvenanceRepository;
+import org.apache.nifi.registry.flow.FlowRegistryClient;
 import org.apache.nifi.registry.variable.FileBasedVariableRegistry;
 import org.apache.nifi.util.NiFiProperties;
 import org.junit.After;
@@ -714,7 +715,8 @@ private FlowControllerAndSystemBundle buildFlowControllerForTest(final String pr
 
         final FlowController flowController = FlowController.createStandaloneInstance(mock(FlowFileEventRepository.class), nifiProperties,
                 mock(Authorizer.class), mock(AuditService.class), null, new VolatileBulletinRepository(),
-                new FileBasedVariableRegistry(nifiProperties.getVariableRegistryPropertiesPaths()));
+            new FileBasedVariableRegistry(nifiProperties.getVariableRegistryPropertiesPaths()),
+            mock(FlowRegistryClient.class));
 
         return new FlowControllerAndSystemBundle(flowController, systemBundle);
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/serialization/StandardFlowSerializerTest.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.nifi.nar.SystemBundle;
 import org.apache.nifi.provenance.MockProvenanceRepository;
 import org.apache.nifi.registry.VariableRegistry;
+import org.apache.nifi.registry.flow.FlowRegistryClient;
 import org.apache.nifi.registry.variable.FileBasedVariableRegistry;
 import org.apache.nifi.reporting.BulletinRepository;
 import org.apache.nifi.util.NiFiProperties;
@@ -80,7 +81,8 @@ public void setUp() throws Exception {
         final VariableRegistry variableRegistry = new FileBasedVariableRegistry(nifiProperties.getVariableRegistryPropertiesPaths());
 
         final BulletinRepository bulletinRepo = Mockito.mock(BulletinRepository.class);
-        controller = FlowController.createStandaloneInstance(flowFileEventRepo, nifiProperties, authorizer, auditService, encryptor, bulletinRepo, variableRegistry);
+        controller = FlowController.createStandaloneInstance(flowFileEventRepo, nifiProperties, authorizer,
+            auditService, encryptor, bulletinRepo, variableRegistry, Mockito.mock(FlowRegistryClient.class));
 
         serializer = new StandardFlowSerializer(encryptor);
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java
Patch:
@@ -763,7 +763,6 @@ public boolean pause() {
     private void updateVariableRegistryReplicated(final String groupId, final URI originalUri, final Collection<AffectedComponentDTO> affectedProcessors,
                                                   final Collection<AffectedComponentDTO> affectedServices, final VariableRegistryUpdateRequest updateRequest,
                                                   final VariableRegistryEntity requestEntity) throws InterruptedException, IOException {
-
         final Pause pause = createPause(updateRequest);
 
         // stop processors
@@ -805,8 +804,6 @@ private void updateVariableRegistryReplicated(final String groupId, final URI or
             logger.info("In order to update Variable Registry for Process Group with ID {}, no Processors are affected.", groupId);
             updateRequest.getStartProcessorsStep().setComplete(true);
         }
-
-        updateRequest.setComplete(true);
     }
 
     /**
@@ -1414,6 +1411,7 @@ private void applyVariableRegistryUpdate(final String groupId, final URI origina
      * @param <T> type of class
      * @return the response entity
      */
+    @SuppressWarnings("unchecked")
     private <T> T getResponseEntity(final NodeResponse nodeResponse, final Class<T> clazz) {
         T entity = (T) nodeResponse.getUpdatedEntity();
         if (entity == null) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-optimistic-locking/src/main/java/org/apache/nifi/web/revision/NaiveRevisionManager.java
Patch:
@@ -102,14 +102,13 @@ public <T> RevisionUpdate<T> updateRevision(final RevisionClaim originalClaim, f
         final List<Revision> revisionList = new ArrayList<>(originalClaim.getRevisions());
         revisionList.sort(new RevisionComparator());
 
-        String failedId = null;
         for (final Revision revision : revisionList) {
             final Revision currentRevision = getRevision(revision.getComponentId());
             final boolean verified = revision.equals(currentRevision);
 
             if (!verified) {
                 // Throw an Exception indicating that we failed to obtain the locks
-                throw new InvalidRevisionException("Invalid Revision was given for component with ID '" + failedId + "'");
+                throw new InvalidRevisionException("Invalid Revision was given for component with ID '" + revision.getComponentId() + "'");
             }
         }
 

File: nifi-nar-bundles/nifi-extension-utils/nifi-hadoop-utils/src/main/java/org/apache/nifi/processors/hadoop/AbstractHadoopProcessor.java
Patch:
@@ -96,8 +96,8 @@ public abstract class AbstractHadoopProcessor extends AbstractProcessor {
 
     public static final PropertyDescriptor KERBEROS_RELOGIN_PERIOD = new PropertyDescriptor.Builder()
             .name("Kerberos Relogin Period").required(false)
-            .description("Period of time which should pass before attempting a kerberos relogin.\n\nThis property has been deprecated, and has no effect on processing.  Relogins"
-                    + "now occur automatically.")
+            .description("Period of time which should pass before attempting a kerberos relogin.\n\nThis property has been deprecated, and has no effect on processing. " +
+                    "Relogins now occur automatically.")
             .defaultValue("4 hours")
             .addValidator(StandardValidators.TIME_PERIOD_VALIDATOR)
             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/test/java/org/apache/nifi/authorization/FileAuthorizerTest.java
Patch:
@@ -1150,7 +1150,7 @@ public void testAddGroupWithUser() throws Exception {
         assertEquals(3, groups.size());
     }
 
-    @Test(expected = IllegalStateException.class)
+    @Test
     public void testAddGroupWhenUserDoesNotExist() throws Exception {
         writeFile(primaryAuthorizations, EMPTY_AUTHORIZATIONS);
         writeFile(primaryTenants, EMPTY_TENANTS);
@@ -1164,6 +1164,8 @@ public void testAddGroupWhenUserDoesNotExist() throws Exception {
                 .build();
 
         authorizer.addGroup(group);
+
+        assertEquals(1, authorizer.getGroups().size());
     }
 
     @Test

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/test/java/org/apache/nifi/authorization/FileUserGroupProviderTest.java
Patch:
@@ -551,7 +551,7 @@ public void testAddGroupWithUser() throws Exception {
         assertEquals(3, groups.size());
     }
 
-    @Test(expected = IllegalStateException.class)
+    @Test
     public void testAddGroupWhenUserDoesNotExist() throws Exception {
         writeFile(primaryTenants, EMPTY_TENANTS);
         userGroupProvider.onConfigured(configurationContext);
@@ -564,6 +564,7 @@ public void testAddGroupWhenUserDoesNotExist() throws Exception {
                 .build();
 
         userGroupProvider.addGroup(group);
+        assertEquals(1, userGroupProvider.getGroups().size());
     }
 
     @Test

File: nifi-nar-bundles/nifi-atlas-bundle/nifi-atlas-reporting-task/src/main/java/org/apache/nifi/atlas/security/Kerberos.java
Patch:
@@ -73,7 +73,8 @@ public AtlasClientV2 createClient(String[] baseUrls) {
         UserGroupInformation.setConfiguration(hadoopConf);
         final UserGroupInformation ugi;
         try {
-            ugi = UserGroupInformation.loginUserFromKeytabAndReturnUGI(principal, keytab);
+            UserGroupInformation.loginUserFromKeytab(principal, keytab);
+            ugi = UserGroupInformation.getCurrentUser();
         } catch (IOException e) {
             throw new RuntimeException("Failed to login with Kerberos due to: " + e, e);
         }

File: nifi-nar-bundles/nifi-atlas-bundle/nifi-atlas-reporting-task/src/test/java/org/apache/nifi/atlas/ITNiFiAtlasClient.java
Patch:
@@ -39,14 +39,14 @@ public class ITNiFiAtlasClient {
 
     @Before
     public void setup() {
-        atlasClient = NiFiAtlasClient.getInstance();
         // Add your atlas server ip address into /etc/hosts as atlas.example.com
         PropertyContext propertyContext = mock(PropertyContext.class);
         when(propertyContext.getProperty(ReportLineageToAtlas.ATLAS_USER)).thenReturn(new MockPropertyValue("admin"));
         when(propertyContext.getProperty(ReportLineageToAtlas.ATLAS_PASSWORD)).thenReturn(new MockPropertyValue("admin"));
         final AtlasAuthN atlasAuthN = new Basic();
         atlasAuthN.configure(propertyContext);
-        atlasClient.initialize(new String[]{"http://atlas.example.com:21000/"}, atlasAuthN, null);
+
+        atlasClient = new NiFiAtlasClient(atlasAuthN.createClient(new String[]{"http://atlas.example.com:21000/"}));
     }
 
     @Test

File: nifi-nar-bundles/nifi-atlas-bundle/nifi-atlas-reporting-task/src/test/java/org/apache/nifi/atlas/reporting/ITReportLineageToAtlas.java
Patch:
@@ -409,6 +409,7 @@ private void test(TestConfiguration tc) throws InitializationException, IOExcept
         when(eventAccess.getGroupStatus(eq("root"))).thenReturn(tc.rootPgStatus);
 
         final ProvenanceRepository provenanceRepository = mock(ProvenanceRepository.class);
+        when(eventAccess.getControllerStatus()).thenReturn(tc.rootPgStatus);
         when(eventAccess.getProvenanceRepository()).thenReturn(provenanceRepository);
         when(eventAccess.getProvenanceEvents(eq(-1L), anyInt())).thenReturn(tc.provenanceRecords);
         when(provenanceRepository.getMaxEventId()).thenReturn((long) tc.provenanceRecords.size() - 1);

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestUpdateRecord.java
Patch:
@@ -467,6 +467,7 @@ public void testSetAbsolutePathWithAnotherRecord() throws InitializationExceptio
     public void testUpdateSimpleArray() throws InitializationException, IOException {
         final JsonTreeReader jsonReader = new JsonTreeReader();
         runner.addControllerService("reader", jsonReader);
+        runner.setValidateExpressionUsage(false);
 
         final String inputSchemaText = new String(Files.readAllBytes(Paths.get("src/test/resources/TestUpdateRecord/schema/multi-arrays.avsc")));
         final String outputSchemaText = new String(Files.readAllBytes(Paths.get("src/test/resources/TestUpdateRecord/schema/multi-arrays.avsc")));
@@ -557,6 +558,7 @@ public void testUpdateSimpleArray() throws InitializationException, IOException
     public void testUpdateComplexArrays() throws InitializationException, IOException {
         final JsonTreeReader jsonReader = new JsonTreeReader();
         runner.addControllerService("reader", jsonReader);
+        runner.setValidateExpressionUsage(false);
 
         final String inputSchemaText = new String(Files.readAllBytes(Paths.get("src/test/resources/TestUpdateRecord/schema/multi-arrays.avsc")));
         final String outputSchemaText = new String(Files.readAllBytes(Paths.get("src/test/resources/TestUpdateRecord/schema/multi-arrays.avsc")));

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/util/JdbcCommon.java
Patch:
@@ -494,7 +494,7 @@ public static Schema createSchema(final ResultSet rs, AvroConversionOptions opti
                     break;
 
                 case INTEGER:
-                    if (meta.isSigned(i) || (meta.getPrecision(i) > 0 && meta.getPrecision(i) <= MAX_DIGITS_IN_INT)) {
+                    if (meta.isSigned(i) || (meta.getPrecision(i) > 0 && meta.getPrecision(i) < MAX_DIGITS_IN_INT)) {
                         builder.name(columnName).type().unionOf().nullBuilder().endNull().and().intType().endUnion().noDefault();
                     } else {
                         builder.name(columnName).type().unionOf().nullBuilder().endNull().and().longType().endUnion().noDefault();

File: nifi-commons/nifi-record-path/src/main/java/org/apache/nifi/record/path/paths/ArrayIndexPath.java
Patch:
@@ -49,7 +49,7 @@ public Stream<FieldValue> evaluate(final RecordPathEvaluationContext context) {
                 final RecordField arrayField = new RecordField(fieldValue.getField().getFieldName(), elementDataType);
                 final Object[] values = (Object[]) fieldValue.getValue();
                 final int arrayIndex = getArrayIndex(values.length);
-                final RecordField elementField = new RecordField(arrayField.getFieldName() + "[" + arrayIndex + "]", elementDataType);
+                final RecordField elementField = new RecordField(arrayField.getFieldName(), elementDataType);
                 final FieldValue result = new ArrayIndexFieldValue(values[arrayIndex], elementField, fieldValue, arrayIndex);
                 return result;
             });

File: nifi-commons/nifi-record-path/src/main/java/org/apache/nifi/record/path/paths/WildcardIndexPath.java
Patch:
@@ -67,7 +67,7 @@ public Stream<FieldValue> evaluate(final RecordPathEvaluationContext context) {
                     return IntStream.range(0, array.length)
                         .mapToObj(index -> {
                             final DataType elementDataType = ((ArrayDataType) fieldValue.getField().getDataType()).getElementType();
-                            final RecordField elementField = new RecordField(fieldValue.getField().getFieldName() + "[" + index + "]", elementDataType);
+                            final RecordField elementField = new RecordField(fieldValue.getField().getFieldName(), elementDataType);
                             return new ArrayIndexFieldValue(array[index], elementField, fieldValue, index);
                         });
                 }

File: nifi-nar-bundles/nifi-couchbase-bundle/nifi-couchbase-processors/src/main/java/org/apache/nifi/processors/couchbase/GetCouchbaseKey.java
Patch:
@@ -32,11 +32,9 @@
 import org.apache.nifi.annotation.behavior.WritesAttribute;
 import org.apache.nifi.annotation.behavior.WritesAttributes;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
-import org.apache.nifi.annotation.documentation.SeeAlso;
 import org.apache.nifi.annotation.documentation.Tags;
 import org.apache.nifi.components.PropertyDescriptor;
 import org.apache.nifi.couchbase.CouchbaseAttributes;
-import org.apache.nifi.couchbase.CouchbaseClusterControllerService;
 import org.apache.nifi.flowfile.FlowFile;
 import org.apache.nifi.logging.ComponentLog;
 import org.apache.nifi.processor.ProcessContext;
@@ -59,7 +57,6 @@
 @CapabilityDescription("Get a document from Couchbase Server via Key/Value access. The ID of the document to fetch may be supplied by setting the <Document Id> property. "
     + "NOTE: if the Document Id property is not set, the contents of the FlowFile will be read to determine the Document Id, which means that the contents of the entire "
     + "FlowFile will be buffered in memory.")
-@SeeAlso({CouchbaseClusterControllerService.class})
 @WritesAttributes({
     @WritesAttribute(attribute = "couchbase.cluster", description = "Cluster where the document was retrieved from."),
     @WritesAttribute(attribute = "couchbase.bucket", description = "Bucket where the document was retrieved from."),

File: nifi-nar-bundles/nifi-couchbase-bundle/nifi-couchbase-processors/src/main/java/org/apache/nifi/processors/couchbase/PutCouchbaseKey.java
Patch:
@@ -32,11 +32,9 @@
 import org.apache.nifi.annotation.behavior.WritesAttribute;
 import org.apache.nifi.annotation.behavior.WritesAttributes;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
-import org.apache.nifi.annotation.documentation.SeeAlso;
 import org.apache.nifi.annotation.documentation.Tags;
 import org.apache.nifi.components.PropertyDescriptor;
 import org.apache.nifi.couchbase.CouchbaseAttributes;
-import org.apache.nifi.couchbase.CouchbaseClusterControllerService;
 import org.apache.nifi.flowfile.FlowFile;
 import org.apache.nifi.flowfile.attributes.CoreAttributes;
 import org.apache.nifi.logging.ComponentLog;
@@ -58,7 +56,6 @@
 
 @Tags({"nosql", "couchbase", "database", "put"})
 @CapabilityDescription("Put a document to Couchbase Server via Key/Value access.")
-@SeeAlso({CouchbaseClusterControllerService.class})
 @InputRequirement(Requirement.INPUT_REQUIRED)
 @ReadsAttributes({
     @ReadsAttribute(attribute = "uuid", description = "Used as a document id if 'Document Id' is not specified"),

File: nifi-nar-bundles/nifi-couchbase-bundle/nifi-couchbase-services-api/src/main/java/org/apache/nifi/couchbase/CouchbaseClusterControllerService.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.nifi.couchbase;
 
-import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.controller.ControllerService;
 
 import com.couchbase.client.java.Bucket;
@@ -25,7 +24,6 @@
  * Provides a connection to a Couchbase Server cluster throughout a NiFi Data
  * flow.
  */
-@CapabilityDescription("Provides a centralized Couchbase connection.")
 public interface CouchbaseClusterControllerService extends ControllerService {
 
     /**

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/HandleHttpRequest.java
Patch:
@@ -107,8 +107,7 @@
     @WritesAttribute(attribute = "http.headers.XXX", description = "Each of the HTTP Headers that is received in the request will be added as an "
             + "attribute, prefixed with \"http.headers.\" For example, if the request contains an HTTP Header named \"x-my-header\", then the value "
             + "will be added to an attribute named \"http.headers.x-my-header\"")})
-@SeeAlso(value = {HandleHttpResponse.class},
-        classNames = {"org.apache.nifi.http.StandardHttpContextMap", "org.apache.nifi.ssl.RestrictedStandardSSLContextService"})
+@SeeAlso(value = {HandleHttpResponse.class})
 public class HandleHttpRequest extends AbstractProcessor {
 
     private static final Pattern URL_QUERY_PARAM_DELIMITER = Pattern.compile("&");

File: nifi-nar-bundles/nifi-standard-services/nifi-hbase_1_1_2-client-service-bundle/nifi-hbase_1_1_2-client-service/src/main/java/org/apache/nifi/hbase/HBase_1_1_2_ClientMapCacheService.java
Patch:
@@ -46,7 +46,7 @@
 import org.apache.nifi.processor.util.StandardValidators;
 
 @Tags({"distributed", "cache", "state", "map", "cluster","hbase"})
-@SeeAlso(classNames = {"org.apache.nifi.distributed.cache.server.map.DistributedMapCacheClient", "org.apache.nifi.hbase.HBase_1_1_2_ClientService"})
+@SeeAlso(classNames = {"org.apache.nifi.hbase.HBase_1_1_2_ClientService"})
 @CapabilityDescription("Provides the ability to use an HBase table as a cache, in place of a DistributedMapCache."
     + " Uses a HBase_1_1_2_ClientService controller to communicate with HBase.")
 

File: nifi-nar-bundles/nifi-extension-utils/nifi-hadoop-utils/src/main/java/org/apache/nifi/hadoop/KerberosTicketRenewer.java
Patch:
@@ -30,6 +30,7 @@
  * relogin attempts this thread will sleep for the provided amount of time.
  *
  */
+@Deprecated
 public class KerberosTicketRenewer implements Runnable {
 
     private final UserGroupInformation ugi;

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/test/java/org/apache/nifi/processors/hadoop/AbstractHadoopTest.java
Patch:
@@ -144,13 +144,11 @@ public void testKerberosOptionsWithEL() throws Exception {
         // initialize the runner with EL for the kerberos properties
         runner.setProperty(AbstractHadoopProcessor.HADOOP_CONFIGURATION_RESOURCES, "${variableHadoopConfigResources}");
         runner.setProperty(kerberosProperties.getKerberosPrincipal(), "${variablePrincipal}");
-        runner.setProperty(AbstractHadoopProcessor.KERBEROS_RELOGIN_PERIOD, "${variableReloginPeriod}");
         runner.setProperty(kerberosProperties.getKerberosKeytab(), "${variableKeytab}");
 
         // add variables for all the kerberos properties except for the keytab
         runner.setVariable("variableHadoopConfigResources", "src/test/resources/core-site-security.xml");
         runner.setVariable("variablePrincipal", "principal");
-        runner.setVariable("variableReloginPeriod", "4m");
         // test that the config is not valid, since the EL for keytab will return nothing, no keytab
         runner.assertNotValid();
 

File: nifi-nar-bundles/nifi-hive-bundle/nifi-hive-processors/src/test/java/org/apache/nifi/processors/hive/TestPutHiveStreaming.java
Patch:
@@ -66,8 +66,6 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyLong;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
@@ -131,7 +129,7 @@ public void testUgiGetsCleared() {
     public void testUgiGetsSetIfSecure() throws AuthenticationFailedException, IOException {
         when(hiveConf.get(SecurityUtil.HADOOP_SECURITY_AUTHENTICATION)).thenReturn(SecurityUtil.KERBEROS);
         ugi = mock(UserGroupInformation.class);
-        when(hiveConfigurator.authenticate(eq(hiveConf), anyString(), anyString(), anyLong(), any())).thenReturn(ugi);
+        when(hiveConfigurator.authenticate(eq(hiveConf), anyString(), anyString())).thenReturn(ugi);
         runner.setProperty(PutHiveStreaming.METASTORE_URI, "thrift://localhost:9083");
         runner.setProperty(PutHiveStreaming.DB_NAME, "default");
         runner.setProperty(PutHiveStreaming.TABLE_NAME, "users");

File: nifi-nar-bundles/nifi-atlas-bundle/nifi-atlas-reporting-task/src/main/java/org/apache/nifi/atlas/reporting/ReportLineageToAtlas.java
Patch:
@@ -640,7 +640,7 @@ private void consumeNiFiProvenanceEvents(ReportingContext context, NiFiFlow nifi
         final AnalysisContext analysisContext = new StandardAnalysisContext(nifiFlow, clusterResolvers,
                 // FIXME: This class cast shouldn't be necessary to query lineage. Possible refactor target in next major update.
                 (ProvenanceRepository)eventAccess.getProvenanceRepository());
-        consumer.consumeEvents(eventAccess, context.getStateManager(), events -> {
+        consumer.consumeEvents(context, context.getStateManager(), (componentMapHolder, events) -> {
             for (ProvenanceEventRecord event : events) {
                 try {
                     lineageStrategy.processEvent(analysisContext, nifiFlow, event);

File: nifi-commons/nifi-record/src/main/java/org/apache/nifi/serialization/record/util/DataTypeUtils.java
Patch:
@@ -891,6 +891,9 @@ public static RecordSchema merge(final RecordSchema thisSchema, final RecordSche
         if (otherSchema == null) {
             return thisSchema;
         }
+        if (thisSchema == otherSchema) {
+            return thisSchema;
+        }
 
         final List<RecordField> otherFields = otherSchema.getFields();
         if (otherFields.isEmpty()) {

File: nifi-mock/src/main/java/org/apache/nifi/util/MockPropertyValue.java
Patch:
@@ -225,7 +225,7 @@ public String toString() {
 
     @Override
     public boolean isExpressionLanguagePresent() {
-        if (!expectExpressions) {
+        if (!Boolean.TRUE.equals(expectExpressions)) {
             return false;
         }
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/QueryRecord.java
Patch:
@@ -453,6 +453,8 @@ protected QueryResult queryWithCache(final ProcessSession session, final FlowFil
         return new QueryResult() {
             @Override
             public void close() throws IOException {
+                table.close();
+
                 final BlockingQueue<CachedStatement> statementQueue = statementQueues.get(sql);
                 if (statementQueue == null || !statementQueue.offer(cachedStatement)) {
                     try {

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestUpdateRecord.java
Patch:
@@ -64,6 +64,7 @@ public void setup() throws InitializationException {
     public void testLiteralReplacementValue() {
         runner.setProperty("/name", "Jane Doe");
         runner.enqueue("");
+        runner.setValidateExpressionUsage(false);
 
         readerService.addRecord("John Doe", 35);
         runner.run();
@@ -188,6 +189,7 @@ public void testChangingSchema() throws InitializationException, IOException {
     public void testUpdateInArray() throws InitializationException, IOException {
         final JsonTreeReader jsonReader = new JsonTreeReader();
         runner.addControllerService("reader", jsonReader);
+        runner.setValidateExpressionUsage(false);
 
         final String inputSchemaText = new String(Files.readAllBytes(Paths.get("src/test/resources/TestUpdateRecord/schema/person-with-address.avsc")));
         final String outputSchemaText = new String(Files.readAllBytes(Paths.get("src/test/resources/TestUpdateRecord/schema/person-with-address.avsc")));
@@ -218,6 +220,7 @@ public void testUpdateInArray() throws InitializationException, IOException {
     public void testUpdateInNullArray() throws InitializationException, IOException {
         final JsonTreeReader jsonReader = new JsonTreeReader();
         runner.addControllerService("reader", jsonReader);
+        runner.setValidateExpressionUsage(false);
 
         final String inputSchemaText = new String(Files.readAllBytes(Paths.get("src/test/resources/TestUpdateRecord/schema/person-with-address.avsc")));
         final String outputSchemaText = new String(Files.readAllBytes(Paths.get("src/test/resources/TestUpdateRecord/schema/person-with-address.avsc")));

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/main/java/org/apache/nifi/processors/azure/storage/FetchAzureBlobStorage.java
Patch:
@@ -36,7 +36,7 @@
 import org.apache.nifi.processor.ProcessSession;
 import org.apache.nifi.processor.exception.ProcessException;
 import org.apache.nifi.processors.azure.AbstractAzureBlobProcessor;
-import org.apache.nifi.processors.azure.storage.utils.Azure;
+import org.apache.nifi.processors.azure.storage.utils.AzureStorageUtils;
 
 import com.microsoft.azure.storage.StorageException;
 import com.microsoft.azure.storage.blob.CloudBlob;
@@ -61,12 +61,12 @@ public void onTrigger(ProcessContext context, ProcessSession session) throws Pro
 
         final long startNanos = System.nanoTime();
 
-        String containerName = context.getProperty(Azure.CONTAINER).evaluateAttributeExpressions(flowFile).getValue();
+        String containerName = context.getProperty(AzureStorageUtils.CONTAINER).evaluateAttributeExpressions(flowFile).getValue();
         String blobPath = context.getProperty(BLOB).evaluateAttributeExpressions(flowFile).getValue();
 
         AtomicReference<Exception> storedException = new AtomicReference<>();
         try {
-            CloudBlobClient blobClient = Azure.createCloudBlobClient(context, getLogger());
+            CloudBlobClient blobClient = AzureStorageUtils.createCloudBlobClient(context, getLogger());
             CloudBlobContainer container = blobClient.getContainerReference(containerName);
 
             final Map<String, String> attributes = new HashMap<>();

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/main/java/org/apache/nifi/processors/azure/storage/PutAzureBlobStorage.java
Patch:
@@ -38,7 +38,7 @@
 import org.apache.nifi.processor.ProcessSession;
 import org.apache.nifi.processor.exception.ProcessException;
 import org.apache.nifi.processors.azure.AbstractAzureBlobProcessor;
-import org.apache.nifi.processors.azure.storage.utils.Azure;
+import org.apache.nifi.processors.azure.storage.utils.AzureStorageUtils;
 
 import com.microsoft.azure.storage.StorageException;
 import com.microsoft.azure.storage.blob.BlobProperties;
@@ -66,13 +66,13 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
 
         final long startNanos = System.nanoTime();
 
-        String containerName = context.getProperty(Azure.CONTAINER).evaluateAttributeExpressions(flowFile).getValue();
+        String containerName = context.getProperty(AzureStorageUtils.CONTAINER).evaluateAttributeExpressions(flowFile).getValue();
 
         String blobPath = context.getProperty(BLOB).evaluateAttributeExpressions(flowFile).getValue();
 
         AtomicReference<Exception> storedException = new AtomicReference<>();
         try {
-            CloudBlobClient blobClient = Azure.createCloudBlobClient(context, getLogger());
+            CloudBlobClient blobClient = AzureStorageUtils.createCloudBlobClient(context, getLogger());
             CloudBlobContainer container = blobClient.getContainerReference(containerName);
 
             CloudBlob blob = container.getBlockBlobReference(blobPath);

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/test/java/org/apache/nifi/processors/azure/storage/AzureTestUtil.java
Patch:
@@ -25,7 +25,7 @@
 import java.security.InvalidKeyException;
 import java.util.Properties;
 
-import org.apache.nifi.processors.azure.storage.utils.Azure;
+import org.apache.nifi.processors.azure.storage.utils.AzureStorageUtils;
 import org.apache.nifi.util.file.FileUtils;
 
 import com.microsoft.azure.storage.CloudStorageAccount;
@@ -67,7 +67,7 @@ static String getAccountKey() {
     }
 
     static CloudBlobContainer getContainer(String containerName) throws InvalidKeyException, URISyntaxException, StorageException {
-        String storageConnectionString = String.format(Azure.FORMAT_BLOB_CONNECTION_STRING, getAccountName(), getAccountKey());
+        String storageConnectionString = String.format(AzureStorageUtils.FORMAT_BLOB_CONNECTION_STRING, getAccountName(), getAccountKey());
         CloudStorageAccount storageAccount = CloudStorageAccount.parse(storageConnectionString);
         CloudBlobClient blobClient = storageAccount.createCloudBlobClient();
         return blobClient.getContainerReference(containerName);

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/lookup/script/ScriptedLookupService.java
Patch:
@@ -66,7 +66,7 @@ public class ScriptedLookupService extends AbstractScriptedControllerService imp
     private volatile File kerberosServiceKeytab = null;
 
     @Override
-    public Optional<Object> lookup(Map<String, String> coordinates) throws LookupFailureException {
+    public Optional<Object> lookup(Map<String, Object> coordinates) throws LookupFailureException {
         // Delegate the lookup() call to the scripted LookupService
         return lookupService.get().lookup(coordinates);
     }

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/LookupRecord.java
Patch:
@@ -259,7 +259,7 @@ protected Set<Relationship> route(final Record record, final RecordSchema writeS
         final Tuple<Map<String, RecordPath>, RecordPath> flowFileContext) {
 
         final Map<String, RecordPath> recordPaths = flowFileContext.getKey();
-        final Map<String, String> lookupCoordinates = new HashMap<>(recordPaths.size());
+        final Map<String, Object> lookupCoordinates = new HashMap<>(recordPaths.size());
 
         for (final Map.Entry<String, RecordPath> entry : recordPaths.entrySet()) {
             final String coordinateKey = entry.getKey();
@@ -284,7 +284,8 @@ protected Set<Relationship> route(final Record record, final RecordSchema writeS
             }
 
             final FieldValue fieldValue = lookupFieldValues.get(0);
-            final String coordinateValue = DataTypeUtils.toString(fieldValue.getValue(), (String) null);
+            final Object coordinateValue = (fieldValue.getValue() instanceof Number || fieldValue.getValue() instanceof Boolean)
+                    ? fieldValue.getValue() : DataTypeUtils.toString(fieldValue.getValue(), (String) null);
             lookupCoordinates.put(coordinateKey, coordinateValue);
         }
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestLookupAttribute.java
Patch:
@@ -142,7 +142,7 @@ public void testCustomValidateMissingDynamicProps() throws InitializationExcepti
 
     private static class InvalidLookupService extends AbstractControllerService implements StringLookupService {
       @Override
-      public Optional<String> lookup(Map<String, String> coordinates) {
+      public Optional<String> lookup(Map<String, Object> coordinates) {
           return Optional.empty();
       }
 

File: nifi-nar-bundles/nifi-standard-services/nifi-hbase_1_1_2-client-service-bundle/nifi-hbase_1_1_2-client-service/src/test/java/org/apache/nifi/hbase/TestRecordLookupProcessor.java
Patch:
@@ -88,7 +88,7 @@ public void onTrigger(ProcessContext context, ProcessSession session) throws Pro
 
         final String rowKey = context.getProperty(HBASE_ROW).getValue();
 
-        final Map<String,String> coordinates = new HashMap<>();
+        final Map<String,Object> coordinates = new HashMap<>();
         coordinates.put(HBase_1_1_2_RecordLookupService.ROW_KEY_KEY, rowKey);
 
         final LookupService<Record> lookupService = context.getProperty(HBASE_LOOKUP_SERVICE).asControllerService(LookupService.class);

File: nifi-nar-bundles/nifi-standard-services/nifi-lookup-service-api/src/main/java/org/apache/nifi/lookup/LookupService.java
Patch:
@@ -33,7 +33,7 @@ public interface LookupService<T> extends ControllerService {
      *
      * @throws LookupFailureException if unable to lookup a value for the given coordinates
      */
-    Optional<T> lookup(Map<String, String> coordinates) throws LookupFailureException;
+    Optional<T> lookup(Map<String, Object> coordinates) throws LookupFailureException;
 
     /**
      * @return the Class that represents the type of value that will be returned by {@link #lookup(Map)}

File: nifi-nar-bundles/nifi-standard-services/nifi-lookup-services-bundle/nifi-lookup-services/src/main/java/org/apache/nifi/lookup/CSVRecordLookupService.java
Patch:
@@ -206,12 +206,12 @@ public void onEnabled(final ConfigurationContext context) throws InitializationE
     }
 
     @Override
-    public Optional<Record> lookup(final Map<String, String> coordinates) throws LookupFailureException {
+    public Optional<Record> lookup(final Map<String, Object> coordinates) throws LookupFailureException {
         if (coordinates == null) {
             return Optional.empty();
         }
 
-        final String key = coordinates.get(KEY);
+        final String key = (String)coordinates.get(KEY);
         if (StringUtils.isBlank(key)) {
             return Optional.empty();
         }

File: nifi-nar-bundles/nifi-standard-services/nifi-lookup-services-bundle/nifi-lookup-services/src/main/java/org/apache/nifi/lookup/SimpleCsvFileLookupService.java
Patch:
@@ -194,12 +194,12 @@ public void onEnabled(final ConfigurationContext context) throws InitializationE
     }
 
     @Override
-    public Optional<String> lookup(final Map<String, String> coordinates) throws LookupFailureException {
+    public Optional<String> lookup(final Map<String, Object> coordinates) throws LookupFailureException {
         if (coordinates == null) {
             return Optional.empty();
         }
 
-        final String key = coordinates.get(KEY);
+        final String key = coordinates.get(KEY).toString();
         if (StringUtils.isBlank(key)) {
             return Optional.empty();
         }

File: nifi-nar-bundles/nifi-standard-services/nifi-lookup-services-bundle/nifi-lookup-services/src/main/java/org/apache/nifi/lookup/SimpleKeyValueLookupService.java
Patch:
@@ -58,12 +58,12 @@ public void cacheConfiguredValues(final ConfigurationContext context) {
     }
 
     @Override
-    public Optional<String> lookup(final Map<String, String> coordinates) {
+    public Optional<String> lookup(final Map<String, Object> coordinates) {
         if (coordinates == null) {
             return Optional.empty();
         }
 
-        final String key = coordinates.get(KEY);
+        final String key = coordinates.get(KEY).toString();
         if (key == null) {
             return Optional.empty();
         }

File: nifi-nar-bundles/nifi-standard-services/nifi-lookup-services-bundle/nifi-lookup-services/src/main/java/org/apache/nifi/lookup/configuration2/CommonsConfigurationLookupService.java
Patch:
@@ -122,12 +122,12 @@ public void onEvent(ConfigurationBuilderEvent event) {
     }
 
     @Override
-    public Optional<String> lookup(final Map<String, String> coordinates) throws LookupFailureException {
+    public Optional<String> lookup(final Map<String, Object> coordinates) throws LookupFailureException {
         if (coordinates == null) {
             return Optional.empty();
         }
 
-        final String key = coordinates.get(KEY);
+        final String key = coordinates.get(KEY).toString();
         if (StringUtils.isBlank(key)) {
             return Optional.empty();
         }

File: nifi-nar-bundles/nifi-standard-services/nifi-mongodb-services-bundle/nifi-mongodb-services/src/main/java/org/apache/nifi/mongodb/MongoDBLookupService.java
Patch:
@@ -74,7 +74,7 @@ public class MongoDBLookupService extends MongoDBControllerService implements Lo
     }
 
     @Override
-    public Optional<Object> lookup(Map<String, String> coordinates) throws LookupFailureException {
+    public Optional<Object> lookup(Map<String, Object> coordinates) throws LookupFailureException {
         Map<String, Object> clean = new HashMap<>();
         clean.putAll(coordinates);
         Document query = new Document(clean);

File: nifi-nar-bundles/nifi-standard-services/nifi-mongodb-services-bundle/nifi-mongodb-services/src/test/java/org/apache/nifi/mongodb/TestMongoDBLookupService.java
Patch:
@@ -71,7 +71,7 @@ public void testLookupSingle() throws Exception {
         Document document = service.convertJson("{ \"uuid\": \"x-y-z\", \"message\": \"Hello, world\" }");
         service.insert(document);
 
-        Map<String, String> criteria = new HashMap<>();
+        Map<String, Object> criteria = new HashMap<>();
         criteria.put("uuid", "x-y-z");
         Optional result = service.lookup(criteria);
 
@@ -99,7 +99,7 @@ public void testLookupRecord() throws Exception {
         Document document = service.convertJson("{ \"uuid\": \"x-y-z\", \"message\": \"Hello, world\" }");
         service.insert(document);
 
-        Map<String, String> criteria = new HashMap<>();
+        Map<String, Object> criteria = new HashMap<>();
         criteria.put("uuid", "x-y-z");
         Optional result = service.lookup(criteria);
 
@@ -129,7 +129,7 @@ public void testServiceParameters() throws Exception {
         Document document = service.convertJson("{ \"uuid\": \"x-y-z\", \"message\": \"Hello, world\" }");
         service.insert(document);
 
-        Map<String, String> criteria = new HashMap<>();
+        Map<String, Object> criteria = new HashMap<>();
         criteria.put("uuid", "x-y-z");
 
         boolean error = false;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/ITListenAndPutSyslog.java
Patch:
@@ -38,9 +38,9 @@
  * Tests PutSyslog sending messages to ListenSyslog to simulate a syslog server forwarding
  * to ListenSyslog, or PutSyslog sending to a syslog server.
  */
-public class TestListenAndPutSyslog {
+public class ITListenAndPutSyslog {
 
-    static final Logger LOGGER = LoggerFactory.getLogger(TestListenAndPutSyslog.class);
+    static final Logger LOGGER = LoggerFactory.getLogger(ITListenAndPutSyslog.class);
 
     private ListenSyslog listenSyslog;
     private TestRunner listenSyslogRunner;

File: nifi-nar-bundles/nifi-websocket-bundle/nifi-websocket-services-jetty/src/test/java/org/apache/nifi/websocket/jetty/ITJettyWebSocketCommunication.java
Patch:
@@ -46,7 +46,7 @@
 import static org.mockito.Mockito.mock;
 
 
-public class TestJettyWebSocketCommunication {
+public class ITJettyWebSocketCommunication {
 
     protected int serverPort;
     protected String serverPath = "/test";

File: nifi-nar-bundles/nifi-websocket-bundle/nifi-websocket-services-jetty/src/test/java/org/apache/nifi/websocket/jetty/ITJettyWebSocketSecureCommunication.java
Patch:
@@ -22,12 +22,12 @@
 import org.junit.Test;
 
 
-public class TestJettyWebSocketSecureCommunication extends TestJettyWebSocketCommunication{
+public class ITJettyWebSocketSecureCommunication extends ITJettyWebSocketCommunication{
 
     private final StandardSSLContextService sslContextService = new StandardSSLContextService();
     private final ControllerServiceTestContext sslTestContext = new ControllerServiceTestContext(sslContextService, "SSLContextService");
 
-    public TestJettyWebSocketSecureCommunication() {
+    public ITJettyWebSocketSecureCommunication() {
         try {
             sslTestContext.setCustomValue(StandardSSLContextService.KEYSTORE, "src/test/resources/certs/localhost-ks.jks");
             sslTestContext.setCustomValue(StandardSSLContextService.KEYSTORE_PASSWORD, "localtest");

File: nifi-nar-bundles/nifi-grpc-bundle/nifi-grpc-processors/src/test/java/org/apache/nifi/processors/grpc/ITListenGRPC.java
Patch:
@@ -48,7 +48,7 @@
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.when;
 
-public class TestListenGRPC {
+public class ITListenGRPC {
     private static final String HOST = "localhost";
     private static final String CERT_DN = "CN=localhost, OU=Apache NiFi, O=Apache, L=Santa Monica, ST=CA, C=US";
     private static final String SOURCE_SYSTEM_UUID = "FAKE_UUID";

File: nifi-nar-bundles/nifi-slack-bundle/nifi-slack-processors/src/test/java/org/apache/nifi/processors/slack/PutSlackTest.java
Patch:
@@ -47,12 +47,13 @@ public void init() throws Exception {
         // set up web service
         ServletHandler handler = new ServletHandler();
         handler.addServletWithMapping(CaptureServlet.class, "/*");
-        servlet = (CaptureServlet) handler.getServlets()[0].getServlet();
 
         // create the service
         server = new TestServer();
         server.addHandler(handler);
         server.startServer();
+
+        servlet = (CaptureServlet) handler.getServlets()[0].getServlet();
     }
 
     @Test(expected = AssertionError.class)

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestGetHTTP.java
Patch:
@@ -323,14 +323,14 @@ public final void testHttpErrors() throws Exception {
         // set up web service
         ServletHandler handler = new ServletHandler();
         handler.addServletWithMapping(HttpErrorServlet.class, "/*");
-        HttpErrorServlet servlet = (HttpErrorServlet) handler.getServlets()[0].getServlet();
 
         // create the service
         TestServer server = new TestServer();
         server.addHandler(handler);
 
         try {
             server.startServer();
+            HttpErrorServlet servlet = (HttpErrorServlet) handler.getServlets()[0].getServlet();
             String destination = server.getUrl();
 
             this.controller = TestRunners.newTestRunner(GetHTTP.class);

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestPostHTTP.java
Patch:
@@ -46,13 +46,13 @@ private void setup(final Map<String, String> sslProperties) throws Exception {
         // set up web service
         ServletHandler handler = new ServletHandler();
         handler.addServletWithMapping(CaptureServlet.class, "/*");
-        servlet = (CaptureServlet) handler.getServlets()[0].getServlet();
 
         // create the service
         server = new TestServer(sslProperties);
         server.addHandler(handler);
         server.startServer();
 
+        servlet = (CaptureServlet) handler.getServlets()[0].getServlet();
         runner = TestRunners.newTestRunner(PostHTTP.class);
     }
 

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-5-processors/src/main/java/org/apache/nifi/processors/elasticsearch/FetchElasticsearch5.java
Patch:
@@ -176,7 +176,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
             final GetResponse getResponse = getRequestBuilder.execute().actionGet();
 
             if (getResponse == null || !getResponse.isExists()) {
-                logger.warn("Failed to read {}/{}/{} from Elasticsearch: Document not found",
+                logger.debug("Failed to read {}/{}/{} from Elasticsearch: Document not found",
                         new Object[]{index, docType, docId});
 
                 // We couldn't find the document, so penalize it and send it to "not found"

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-processors/src/main/java/org/apache/nifi/processors/elasticsearch/FetchElasticsearch.java
Patch:
@@ -176,7 +176,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
             final GetResponse getResponse = getRequestBuilder.execute().actionGet();
 
             if (getResponse == null || !getResponse.isExists()) {
-                logger.warn("Failed to read {}/{}/{} from Elasticsearch: Document not found",
+                logger.debug("Failed to read {}/{}/{} from Elasticsearch: Document not found",
                         new Object[]{index, docType, docId});
 
                 // We couldn't find the document, so penalize it and send it to "not found"

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-processors/src/main/java/org/apache/nifi/processors/elasticsearch/FetchElasticsearchHttp.java
Patch:
@@ -253,7 +253,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
                     }
                     session.transfer(flowFile, REL_SUCCESS);
                 } else {
-                    logger.warn("Failed to read {}/{}/{} from Elasticsearch: Document not found",
+                    logger.debug("Failed to read {}/{}/{} from Elasticsearch: Document not found",
                             new Object[]{index, docType, docId});
 
                     // We couldn't find the document, so send it to "not found"

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-processors/src/test/java/org/apache/nifi/processors/elasticsearch/TestFetchElasticsearch.java
Patch:
@@ -101,7 +101,7 @@ public void testFetchElasticsearchOnTrigger() throws IOException {
 
         runner.assertAllFlowFilesTransferred(FetchElasticsearch.REL_SUCCESS, 1);
         assertFalse(runner.getProvenanceEvents().isEmpty());
-        runner.getProvenanceEvents().forEach(event -> { assertEquals(event.getEventType(), ProvenanceEventType.FETCH); });
+        runner.getProvenanceEvents().forEach(event -> assertEquals(event.getEventType(), ProvenanceEventType.FETCH) );
         final MockFlowFile out = runner.getFlowFilesForRelationship(FetchElasticsearch.REL_SUCCESS).get(0);
         assertNotNull(out);
         out.assertAttributeEquals("doc_id", "28039652140");

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-processors/src/test/java/org/apache/nifi/processors/elasticsearch/TestPutElasticsearch.java
Patch:
@@ -101,7 +101,7 @@ public void testPutElasticSearchOnTrigger() throws IOException {
 
         runner.assertAllFlowFilesTransferred(PutElasticsearch.REL_SUCCESS, 1);
         assertFalse(runner.getProvenanceEvents().isEmpty());
-        runner.getProvenanceEvents().forEach(event -> { assertEquals(event.getEventType(), ProvenanceEventType.SEND); });
+        runner.getProvenanceEvents().forEach(event -> assertEquals(event.getEventType(), ProvenanceEventType.SEND));
         final MockFlowFile out = runner.getFlowFilesForRelationship(PutElasticsearch.REL_SUCCESS).get(0);
         assertNotNull(out);
         out.assertAttributeEquals("doc_id", "28039652140");

File: nifi-nar-bundles/nifi-enrich-bundle/nifi-enrich-processors/src/test/java/org/apache/nifi/processors/TestISPEnrichIP.java
Patch:
@@ -284,7 +284,9 @@ private IspResponse getIspResponse() throws Exception {
 
         return new ObjectMapper().reader(IspResponse.class).with(inject).readValue(maxMindIspResponse);
 
-    }    private IspResponse getIspResponseWithoutASNDetail() throws Exception {
+    }
+
+    private IspResponse getIspResponseWithoutASNDetail() throws Exception {
         final String maxMindIspResponse = "{\n" +
             "         \"isp\" : \"Apache NiFi - Test ISP\",\n" +
             "         \"organization\" : \"Apache NiFi - Test Organization\",\n" +

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/scheduling/ScheduleState.java
Patch:
@@ -74,8 +74,7 @@ public String toString() {
      * scheduled to run will receive a <code>true</code> and MUST call the methods annotated with
      * {@link OnStopped @OnStopped}
      *
-     * @return <code>true</code> if the caller is required to call Processor methods annotated with
-     *         @OnStopped, <code>false</code> otherwise
+     * @return <code>true</code> if the caller is required to call Processor methods annotated with @OnStopped
      */
     public boolean mustCallOnStoppedMethods() {
         return mustCallOnStoppedMethods.getAndSet(false);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/scheduling/StandardProcessScheduler.java
Patch:
@@ -294,7 +294,7 @@ public void run() {
      * {@link ProcessorNode#start(ScheduledExecutorService, long, org.apache.nifi.processor.ProcessContext, Runnable)}
      * method.
      *
-     * @see StandardProcessorNode#start(ScheduledExecutorService, long, org.apache.nifi.processor.ProcessContext, Runnable).
+     * @see StandardProcessorNode#start(ScheduledExecutorService, long, org.apache.nifi.processor.ProcessContext, Runnable)
      */
     @Override
     public synchronized CompletableFuture<Void> startProcessor(final ProcessorNode procNode) {

File: nifi-nar-bundles/nifi-grpc-bundle/nifi-grpc-processors/src/test/java/org/apache/nifi/processors/grpc/TestGRPCServer.java
Patch:
@@ -86,7 +86,7 @@ public static int randomPort() throws IOException {
     /**
      * Starts the gRPC server @localhost:port.
      */
-    public void start(final int port) throws Exception {
+    public int start(final int port) throws Exception {
         final NettyServerBuilder nettyServerBuilder = NettyServerBuilder
                 .forPort(port)
                 .directExecutor()
@@ -132,6 +132,7 @@ public void start(final int port) throws Exception {
         }
 
         server = nettyServerBuilder.build().start();
+        final int actualPort = server.getPort();
 
         Runtime.getRuntime().addShutdownHook(new Thread() {
             @Override
@@ -142,6 +143,7 @@ public void run() {
                 System.err.println("*** server shut down");
             }
         });
+        return actualPort;
     }
 
     /**

File: nifi-nar-bundles/nifi-provenance-repository-bundle/nifi-persistent-provenance-repository/src/test/java/org/apache/nifi/provenance/TestEventIdFirstSchemaRecordReaderWriter.java
Patch:
@@ -63,7 +63,7 @@ public void setup() {
         journalFile = new File("target/storage/" + UUID.randomUUID().toString() + "/testEventIdFirstSchemaRecordReaderWriter");
         tocFile = TocUtil.getTocFile(journalFile);
         idGenerator.set(0L);
-    };
+    }
 
     @Test
     public void testContentClaimUnchanged() throws IOException {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java
Patch:
@@ -2050,7 +2050,7 @@ private ProcessGroupDTO createConciseProcessGroupDto(final ProcessGroup group) {
 
         final Map<String, String> variables = group.getVariableRegistry().getVariableMap().entrySet().stream()
             .collect(Collectors.toMap(entry -> entry.getKey().getName(), entry -> entry.getValue()));
-        group.setVariables(variables);
+        dto.setVariables(variables);
 
         final ProcessGroup parentGroup = group.getParent();
         if (parentGroup != null) {

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/servlets/ListenHTTPServlet.java
Patch:
@@ -95,6 +95,7 @@ public class ListenHTTPServlet extends HttpServlet {
     private ConcurrentMap<String, FlowFileEntryTimeWrapper> flowFileMap;
     private StreamThrottler streamThrottler;
     private String basePath;
+    private int returnCode;
 
     @SuppressWarnings("unchecked")
     @Override
@@ -108,6 +109,7 @@ public void init(final ServletConfig config) throws ServletException {
         this.flowFileMap = (ConcurrentMap<String, FlowFileEntryTimeWrapper>) context.getAttribute(ListenHTTP.CONTEXT_ATTRIBUTE_FLOWFILE_MAP);
         this.streamThrottler = (StreamThrottler) context.getAttribute(ListenHTTP.CONTEXT_ATTRIBUTE_STREAM_THROTTLER);
         this.basePath = (String) context.getAttribute(ListenHTTP.CONTEXT_ATTRIBUTE_BASE_PATH);
+        this.returnCode = (int) context.getAttribute(ListenHTTP.CONTEXT_ATTRIBUTE_RETURN_CODE);
     }
 
     @Override
@@ -301,7 +303,7 @@ public void process(final OutputStream rawOut) throws IOException {
                             new Object[]{flowFileSet, request.getRemoteHost(), request.getRemotePort(), foundSubject, flowFileSet.size(), uuid});
                 }
             } else {
-                response.setStatus(HttpServletResponse.SC_OK);
+                response.setStatus(this.returnCode);
                 logger.info("Received from Remote Host: [{}] Port [{}] SubjectDN [{}]; transferring to 'success' {}",
                         new Object[]{request.getRemoteHost(), request.getRemotePort(), foundSubject, flowFile});
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/RemoteProcessGroupPortDTO.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.nifi.web.api.dto;
 
 import io.swagger.annotations.ApiModelProperty;
-
 import javax.xml.bind.annotation.XmlType;
 
 /**
@@ -80,12 +79,12 @@ public String getId() {
     public void setId(String id) {
         this.id = id;
     }
-    
+
     @ApiModelProperty("The id of the target port.")
     public String getTargetId() {
         return targetId;
     }
-    
+
     public void setTargetId(String targetId) {
         this.targetId = targetId;
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/encrypt/StringEncryptor.java
Patch:
@@ -113,7 +113,7 @@ public class StringEncryptor {
      * @param provider  the JCA Security provider ({@link EncryptionMethod#provider})
      * @param key       the UTF-8 characters from nifi.properties -- nifi.sensitive.props.key
      */
-    protected StringEncryptor(final String algorithm, final String provider, final String key) {
+    public StringEncryptor(final String algorithm, final String provider, final String key) {
         this.algorithm = algorithm;
         this.provider = provider;
         this.key = null;

File: nifi-commons/nifi-properties/src/main/java/org/apache/nifi/util/NiFiProperties.java
Patch:
@@ -73,6 +73,7 @@ public abstract class NiFiProperties {
     public static final String SITE_TO_SITE_SECURE = "nifi.remote.input.secure";
     public static final String SITE_TO_SITE_HTTP_ENABLED = "nifi.remote.input.http.enabled";
     public static final String SITE_TO_SITE_HTTP_TRANSACTION_TTL = "nifi.remote.input.http.transaction.ttl";
+    public static final String REMOTE_CONTENTS_CACHE_EXPIRATION = "nifi.remote.contents.cache.expiration";
     public static final String TEMPLATE_DIRECTORY = "nifi.templates.directory";
     public static final String ADMINISTRATIVE_YIELD_DURATION = "nifi.administrative.yield.duration";
     public static final String PERSISTENT_STATE_DIRECTORY = "nifi.persistent.state.directory";

File: nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/client/AbstractSiteToSiteClient.java
Patch:
@@ -32,6 +32,7 @@ public AbstractSiteToSiteClient(final SiteToSiteClientConfig config) {
         siteInfoProvider.setSslContext(config.getSslContext());
         siteInfoProvider.setConnectTimeoutMillis(commsTimeout);
         siteInfoProvider.setReadTimeoutMillis(commsTimeout);
+        siteInfoProvider.setCachedContentsExpirationMillis(config.getCacheExpiration(TimeUnit.MILLISECONDS));
         siteInfoProvider.setProxy(config.getHttpProxy());
         siteInfoProvider.setLocalAddress(config.getLocalAddress());
     }

File: nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/client/PeerSelector.java
Patch:
@@ -22,10 +22,10 @@
 import org.apache.nifi.remote.PeerStatus;
 import org.apache.nifi.remote.TransferDirection;
 import org.apache.nifi.remote.util.PeerStatusCache;
-import org.apache.nifi.stream.io.BufferedOutputStream;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java.io.BufferedOutputStream;
 import java.io.BufferedReader;
 import java.io.File;
 import java.io.FileInputStream;

File: nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/client/http/HttpClient.java
Patch:
@@ -106,6 +106,7 @@ public Set<PeerStatus> fetchRemotePeerStatuses(PeerDescription peerDescription)
             final int timeoutMillis = (int) config.getTimeout(TimeUnit.MILLISECONDS);
             apiClient.setConnectTimeoutMillis(timeoutMillis);
             apiClient.setReadTimeoutMillis(timeoutMillis);
+            apiClient.setCacheExpirationMillis(config.getCacheExpiration(TimeUnit.MILLISECONDS));
             apiClient.setLocalAddress(config.getLocalAddress());
 
             final Collection<PeerDTO> peers = apiClient.getPeers();
@@ -154,6 +155,7 @@ public Transaction createTransaction(final TransferDirection direction) throws H
             apiClient.setBaseUrl(peer.getUrl());
             apiClient.setConnectTimeoutMillis(timeoutMillis);
             apiClient.setReadTimeoutMillis(timeoutMillis);
+            apiClient.setCacheExpirationMillis(config.getCacheExpiration(TimeUnit.MILLISECONDS));
             apiClient.setLocalAddress(config.getLocalAddress());
 
             apiClient.setCompress(config.isUseCompression());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/remote/RemoteGroupPort.java
Patch:
@@ -40,6 +40,8 @@ public RemoteGroupPort(String id, String name, ProcessGroup processGroup, Connec
 
     public abstract boolean getTargetExists();
 
+    public abstract String getTargetIdentifier();
+
     public abstract boolean isTargetRunning();
 
     public abstract Integer getBatchCount();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/FlowController.java
Patch:
@@ -2061,6 +2061,7 @@ private Set<RemoteProcessGroupPortDescriptor> convertRemotePort(final Set<Remote
             for (final RemoteProcessGroupPortDTO port : ports) {
                 final StandardRemoteProcessGroupPortDescriptor descriptor = new StandardRemoteProcessGroupPortDescriptor();
                 descriptor.setId(port.getId());
+                descriptor.setTargetId(port.getTargetId());
                 descriptor.setName(port.getName());
                 descriptor.setComments(port.getComments());
                 descriptor.setTargetRunning(port.isTargetRunning());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/StandardFlowSerializer.java
Patch:
@@ -326,6 +326,7 @@ private void addRemoteGroupPort(final Element parentElement, final RemoteGroupPo
         addPosition(element, port.getPosition());
         addTextElement(element, "comments", port.getComments());
         addTextElement(element, "scheduledState", scheduledStateLookup.getScheduledState(port).name());
+        addTextElement(element, "targetId", port.getTargetIdentifier());
         addTextElement(element, "maxConcurrentTasks", port.getMaxConcurrentTasks());
         addTextElement(element, "useCompression", String.valueOf(port.isUseCompression()));
         final Integer batchCount = port.getBatchCount();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/fingerprint/FingerprintFactory.java
Patch:
@@ -544,7 +544,7 @@ public int compare(final Element o1, final Element o2) {
     }
 
     private StringBuilder addRemoteGroupPortFingerprint(final StringBuilder builder, final Element remoteGroupPortElement) {
-        for (final String childName : new String[] {"id", "maxConcurrentTasks", "useCompression", "batchCount", "batchSize", "batchDuration"}) {
+        for (final String childName : new String[] {"id", "targetId", "maxConcurrentTasks", "useCompression", "batchCount", "batchSize", "batchDuration"}) {
             appendFirstValue(builder, DomUtils.getChildNodesByTagName(remoteGroupPortElement, childName));
         }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-site-to-site/src/test/java/org/apache/nifi/remote/TestStandardRemoteGroupPort.java
Patch:
@@ -120,7 +120,7 @@ private void setupMock(final SiteToSiteTransportProtocol protocol,
                 break;
         }
 
-        port = spy(new StandardRemoteGroupPort(ID, NAME,
+        port = spy(new StandardRemoteGroupPort(ID, ID, NAME,
                 processGroup, remoteGroup, direction, connectableType, null, scheduler, NiFiProperties.createBasicNiFiProperties(null, null)));
 
         doReturn(true).when(remoteGroup).isTransmitting();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java
Patch:
@@ -1502,6 +1502,7 @@ public RemoteProcessGroupPortDTO createRemoteProcessGroupPortDto(final RemoteGro
 
         final RemoteProcessGroupPortDTO dto = new RemoteProcessGroupPortDTO();
         dto.setId(port.getIdentifier());
+        dto.setTargetId(port.getTargetIdentifier());
         dto.setName(port.getName());
         dto.setComments(port.getComments());
         dto.setTransmitting(port.isRunning());
@@ -3168,6 +3169,7 @@ public PortDTO copy(final PortDTO original) {
     public RemoteProcessGroupPortDTO copy(final RemoteProcessGroupPortDTO original) {
         final RemoteProcessGroupPortDTO copy = new RemoteProcessGroupPortDTO();
         copy.setId(original.getId());
+        copy.setTargetId(original.getTargetId());
         copy.setGroupId(original.getGroupId());
         copy.setName(original.getName());
         copy.setComments(original.getComments());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/audit/TestRemoteProcessGroupAuditor.java
Patch:
@@ -415,6 +415,7 @@ private Collection<Action> updateProcessGroupInputPortConfiguration(RemoteProces
         final ProceedingJoinPoint joinPoint = mock(ProceedingJoinPoint.class);
         final String remoteProcessGroupId = "remote-process-group-id";
         inputRPGPortDTO.setId(remoteProcessGroupId);
+        inputRPGPortDTO.setTargetId(remoteProcessGroupId);
 
         final String targetUrl = "http://localhost:8080/nifi";
         when(existingRPG.getIdentifier()).thenReturn(remoteProcessGroupId);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/web/dao/impl/TestStandardRemoteProcessGroupDAO.java
Patch:
@@ -79,6 +79,7 @@ public void testVerifyUpdateInputPort() {
         final RemoteProcessGroupPortDTO dto = new RemoteProcessGroupPortDTO();
         dto.setGroupId(remoteProcessGroupId);
         dto.setId(remoteProcessGroupInputPortId);
+        dto.setTargetId(remoteProcessGroupInputPortId);
         final BatchSettingsDTO batchSettings = new BatchSettingsDTO();
         dto.setBatchSettings(batchSettings);
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/FlowController.java
Patch:
@@ -3150,7 +3150,7 @@ public ReportingTaskNode createReportingTask(final String type, final String id,
 
         if (firstTimeAdded) {
             final ReportingInitializationContext config = new StandardReportingInitializationContext(id, taskNode.getName(),
-                    SchedulingStrategy.TIMER_DRIVEN, "1 min", taskNode.getLogger(), this, nifiProperties);
+                    SchedulingStrategy.TIMER_DRIVEN, "1 min", taskNode.getLogger(), this, nifiProperties, this);
 
             try {
                 taskNode.getReportingTask().initialize(config);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/StandardFlowSynchronizer.java
Patch:
@@ -620,7 +620,7 @@ private ReportingTaskNode getOrCreateReportingTask(final FlowController controll
 
             final ComponentLog componentLog = new SimpleProcessLogger(dto.getId(), reportingTask.getReportingTask());
             final ReportingInitializationContext config = new StandardReportingInitializationContext(dto.getId(), dto.getName(),
-                    SchedulingStrategy.valueOf(dto.getSchedulingStrategy()), dto.getSchedulingPeriod(), componentLog, controller, nifiProperties);
+                    SchedulingStrategy.valueOf(dto.getSchedulingStrategy()), dto.getSchedulingPeriod(), componentLog, controller, nifiProperties, controller);
 
             try {
                 reportingTask.getReportingTask().initialize(config);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/scheduling/TestStandardProcessScheduler.java
Patch:
@@ -116,7 +116,7 @@ public void setup() throws InitializationException {
 
         reportingTask = new TestReportingTask();
         final ReportingInitializationContext config = new StandardReportingInitializationContext(UUID.randomUUID().toString(), "Test", SchedulingStrategy.TIMER_DRIVEN, "5 secs",
-                Mockito.mock(ComponentLog.class), null, nifiProperties);
+                Mockito.mock(ComponentLog.class), null, nifiProperties, null);
         reportingTask.initialize(config);
 
         final ValidationContextFactory validationContextFactory = new StandardValidationContextFactory(null, variableRegistry);

File: nifi-nar-bundles/nifi-provenance-repository-bundle/nifi-persistent-provenance-repository/src/test/java/org/apache/nifi/provenance/store/TestWriteAheadStorePartition.java
Patch:
@@ -22,10 +22,10 @@
 import java.io.File;
 import java.io.IOException;
 import java.util.Collections;
-import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.UUID;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.stream.Collectors;
@@ -72,7 +72,7 @@ public void testReindex() throws IOException {
             partition.addEvents(Collections.singleton(TestUtil.createEvent()));
         }
 
-        final Map<ProvenanceEventRecord, StorageSummary> reindexedEvents = new HashMap<>();
+        final Map<ProvenanceEventRecord, StorageSummary> reindexedEvents = new ConcurrentHashMap<>();
         final EventIndex eventIndex = Mockito.mock(EventIndex.class);
         Mockito.doAnswer(new Answer<Object>() {
             @Override

File: nifi-nar-bundles/nifi-hive-bundle/nifi-hive-processors/src/main/java/org/apache/nifi/processors/hive/SelectHiveQL.java
Patch:
@@ -329,7 +329,7 @@ private void onTrigger(final ProcessContext context, final ProcessSession sessio
                     int paramCount = StringUtils.countMatches(selectQuery, "?");
 
                     if (paramCount > 0) {
-                        setParameters(1, (PreparedStatement) st, paramCount, flowfile.getAttributes());
+                        setParameters(1, (PreparedStatement) st, paramCount, fileToProcess.getAttributes());
                     }
                 }
 

File: nifi-commons/nifi-site-to-site-client/src/test/java/org/apache/nifi/remote/client/http/TestHttpClient.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.nifi.remote.client.http;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import org.apache.nifi.controller.ScheduledState;
 import org.apache.nifi.remote.Peer;
 import org.apache.nifi.remote.Transaction;
@@ -41,7 +42,6 @@
 import org.apache.nifi.web.api.entity.ControllerEntity;
 import org.apache.nifi.web.api.entity.PeersEntity;
 import org.apache.nifi.web.api.entity.TransactionResultEntity;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.eclipse.jetty.server.Connector;
 import org.eclipse.jetty.server.Handler;
 import org.eclipse.jetty.server.HttpConfiguration;

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-processors/src/main/java/org/apache/nifi/processors/elasticsearch/AbstractElasticsearchHttpProcessor.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.nifi.processors.elasticsearch;
 
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
 import okhttp3.Credentials;
 import okhttp3.OkHttpClient;
 import okhttp3.Request;
@@ -30,8 +32,6 @@
 import org.apache.nifi.processor.util.StandardValidators;
 import org.apache.nifi.ssl.SSLContextService;
 import org.apache.nifi.util.StringUtils;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.map.ObjectMapper;
 
 import javax.net.ssl.SSLContext;
 import java.io.IOException;

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-processors/src/main/java/org/apache/nifi/processors/elasticsearch/FetchElasticsearchHttp.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.nifi.processors.elasticsearch;
 
+import com.fasterxml.jackson.databind.JsonNode;
 import okhttp3.HttpUrl;
 import okhttp3.OkHttpClient;
 import okhttp3.Response;
@@ -38,7 +39,6 @@
 import org.apache.nifi.processor.Relationship;
 import org.apache.nifi.processor.exception.ProcessException;
 import org.apache.nifi.processor.util.StandardValidators;
-import org.codehaus.jackson.JsonNode;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-processors/src/main/java/org/apache/nifi/processors/elasticsearch/PutElasticsearchHttp.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.nifi.processors.elasticsearch;
 
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.node.ArrayNode;
 import okhttp3.HttpUrl;
 import okhttp3.MediaType;
 import okhttp3.OkHttpClient;
@@ -42,8 +44,6 @@
 import org.apache.nifi.processor.exception.ProcessException;
 import org.apache.nifi.processor.util.StandardValidators;
 import org.apache.nifi.util.StringUtils;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.node.ArrayNode;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/AbstractSingleDTOEndpoint.java
Patch:
@@ -35,12 +35,12 @@ public final NodeResponse merge(final URI uri, final String method, final Set<No
             throw new IllegalArgumentException("Cannot use Endpoint Mapper of type " + getClass().getSimpleName() + " to map responses for URI " + uri + ", HTTP Method " + method);
         }
 
-        final EntityType responseEntity = clientResponse.getClientResponse().getEntity(getEntityClass());
+        final EntityType responseEntity = clientResponse.getClientResponse().readEntity(getEntityClass());
         final DtoType dto = getDto(responseEntity);
 
         final Map<NodeIdentifier, DtoType> dtoMap = new HashMap<>();
         for (final NodeResponse nodeResponse : successfulResponses) {
-            final EntityType nodeResponseEntity = nodeResponse == clientResponse ? responseEntity : nodeResponse.getClientResponse().getEntity(getEntityClass());
+            final EntityType nodeResponseEntity = nodeResponse == clientResponse ? responseEntity : nodeResponse.getClientResponse().readEntity(getEntityClass());
             final DtoType nodeDto = getDto(nodeResponseEntity);
             dtoMap.put(nodeResponse.getNodeId(), nodeDto);
         }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/AbstractSingleEntityEndpoint.java
Patch:
@@ -34,11 +34,11 @@ public final NodeResponse merge(final URI uri, final String method, final Set<No
             throw new IllegalArgumentException("Cannot use Endpoint Mapper of type " + getClass().getSimpleName() + " to map responses for URI " + uri + ", HTTP Method " + method);
         }
 
-        final EntityType responseEntity = clientResponse.getClientResponse().getEntity(getEntityClass());
+        final EntityType responseEntity = clientResponse.getClientResponse().readEntity(getEntityClass());
 
         final Map<NodeIdentifier, EntityType> entityMap = new HashMap<>();
         for (final NodeResponse nodeResponse : successfulResponses) {
-            final EntityType nodeResponseEntity = nodeResponse == clientResponse ? responseEntity : nodeResponse.getClientResponse().getEntity(getEntityClass());
+            final EntityType nodeResponseEntity = nodeResponse == clientResponse ? responseEntity : nodeResponse.getClientResponse().readEntity(getEntityClass());
             entityMap.put(nodeResponse.getNodeId(), nodeResponseEntity);
         }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/ConnectionsEndpointMerger.java
Patch:
@@ -44,12 +44,12 @@ public final NodeResponse merge(final URI uri, final String method, final Set<No
             throw new IllegalArgumentException("Cannot use Endpoint Mapper of type " + getClass().getSimpleName() + " to map responses for URI " + uri + ", HTTP Method " + method);
         }
 
-        final ConnectionsEntity responseEntity = clientResponse.getClientResponse().getEntity(ConnectionsEntity.class);
+        final ConnectionsEntity responseEntity = clientResponse.getClientResponse().readEntity(ConnectionsEntity.class);
         final Set<ConnectionEntity> connectionEntities = responseEntity.getConnections();
 
         final Map<String, Map<NodeIdentifier, ConnectionEntity>> entityMap = new HashMap<>();
         for (final NodeResponse nodeResponse : successfulResponses) {
-            final ConnectionsEntity nodeResponseEntity = nodeResponse == clientResponse ? responseEntity : nodeResponse.getClientResponse().getEntity(ConnectionsEntity.class);
+            final ConnectionsEntity nodeResponseEntity = nodeResponse == clientResponse ? responseEntity : nodeResponse.getClientResponse().readEntity(ConnectionsEntity.class);
             final Set<ConnectionEntity> nodeConnectionEntities = nodeResponseEntity.getConnections();
 
             for (final ConnectionEntity nodeConnectionEntity : nodeConnectionEntities) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/ControllerServiceReferenceEndpointMerger.java
Patch:
@@ -48,13 +48,13 @@ public NodeResponse merge(URI uri, String method, Set<NodeResponse> successfulRe
             throw new IllegalArgumentException("Cannot use Endpoint Mapper of type " + getClass().getSimpleName() + " to map responses for URI " + uri + ", HTTP Method " + method);
         }
 
-        final ControllerServiceReferencingComponentsEntity responseEntity = clientResponse.getClientResponse().getEntity(ControllerServiceReferencingComponentsEntity.class);
+        final ControllerServiceReferencingComponentsEntity responseEntity = clientResponse.getClientResponse().readEntity(ControllerServiceReferencingComponentsEntity.class);
         final Set<ControllerServiceReferencingComponentEntity> referencingComponents = responseEntity.getControllerServiceReferencingComponents();
 
         final Map<NodeIdentifier, Set<ControllerServiceReferencingComponentEntity>> resultsMap = new HashMap<>();
         for (final NodeResponse nodeResponse : successfulResponses) {
             final ControllerServiceReferencingComponentsEntity nodeResponseEntity = nodeResponse == clientResponse ? responseEntity
-                : nodeResponse.getClientResponse().getEntity(ControllerServiceReferencingComponentsEntity.class);
+                : nodeResponse.getClientResponse().readEntity(ControllerServiceReferencingComponentsEntity.class);
             final Set<ControllerServiceReferencingComponentEntity> nodeReferencingComponents = nodeResponseEntity.getControllerServiceReferencingComponents();
 
             resultsMap.put(nodeResponse.getNodeId(), nodeReferencingComponents);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/ControllerServicesEndpointMerger.java
Patch:
@@ -45,12 +45,12 @@ public final NodeResponse merge(final URI uri, final String method, final Set<No
             throw new IllegalArgumentException("Cannot use Endpoint Mapper of type " + getClass().getSimpleName() + " to map responses for URI " + uri + ", HTTP Method " + method);
         }
 
-        final ControllerServicesEntity responseEntity = clientResponse.getClientResponse().getEntity(ControllerServicesEntity.class);
+        final ControllerServicesEntity responseEntity = clientResponse.getClientResponse().readEntity(ControllerServicesEntity.class);
         final Set<ControllerServiceEntity> controllerServiceEntities = responseEntity.getControllerServices();
 
         final Map<String, Map<NodeIdentifier, ControllerServiceEntity>> entityMap = new HashMap<>();
         for (final NodeResponse nodeResponse : successfulResponses) {
-            final ControllerServicesEntity nodeResponseEntity = nodeResponse == clientResponse ? responseEntity : nodeResponse.getClientResponse().getEntity(ControllerServicesEntity.class);
+            final ControllerServicesEntity nodeResponseEntity = nodeResponse == clientResponse ? responseEntity : nodeResponse.getClientResponse().readEntity(ControllerServicesEntity.class);
             final Set<ControllerServiceEntity> nodeControllerServiceEntities = nodeResponseEntity.getControllerServices();
 
             for (final ControllerServiceEntity nodeControllerServiceEntity : nodeControllerServiceEntities) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/FunnelsEndpointMerger.java
Patch:
@@ -43,12 +43,12 @@ public NodeResponse merge(URI uri, String method, Set<NodeResponse> successfulRe
             throw new IllegalArgumentException("Cannot use Endpoint Mapper of type " + getClass().getSimpleName() + " to map responses for URI " + uri + ", HTTP Method " + method);
         }
 
-        final FunnelsEntity responseEntity = clientResponse.getClientResponse().getEntity(FunnelsEntity.class);
+        final FunnelsEntity responseEntity = clientResponse.getClientResponse().readEntity(FunnelsEntity.class);
         final Set<FunnelEntity> funnelEntities = responseEntity.getFunnels();
 
         final Map<String, Map<NodeIdentifier, FunnelEntity>> entityMap = new HashMap<>();
         for (final NodeResponse nodeResponse : successfulResponses) {
-            final FunnelsEntity nodeResponseEntity = nodeResponse == clientResponse ? responseEntity : nodeResponse.getClientResponse().getEntity(FunnelsEntity.class);
+            final FunnelsEntity nodeResponseEntity = nodeResponse == clientResponse ? responseEntity : nodeResponse.getClientResponse().readEntity(FunnelsEntity.class);
             final Set<FunnelEntity> nodeFunnelEntities = nodeResponseEntity.getFunnels();
 
             for (final FunnelEntity nodeFunnelEntity : nodeFunnelEntities) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/InputPortsEndpointMerger.java
Patch:
@@ -44,12 +44,12 @@ public final NodeResponse merge(final URI uri, final String method, final Set<No
             throw new IllegalArgumentException("Cannot use Endpoint Mapper of type " + getClass().getSimpleName() + " to map responses for URI " + uri + ", HTTP Method " + method);
         }
 
-        final InputPortsEntity responseEntity = clientResponse.getClientResponse().getEntity(InputPortsEntity.class);
+        final InputPortsEntity responseEntity = clientResponse.getClientResponse().readEntity(InputPortsEntity.class);
         final Set<PortEntity> portEntities = responseEntity.getInputPorts();
 
         final Map<String, Map<NodeIdentifier, PortEntity>> entityMap = new HashMap<>();
         for (final NodeResponse nodeResponse : successfulResponses) {
-            final InputPortsEntity nodeResponseEntity = nodeResponse == clientResponse ? responseEntity : nodeResponse.getClientResponse().getEntity(InputPortsEntity.class);
+            final InputPortsEntity nodeResponseEntity = nodeResponse == clientResponse ? responseEntity : nodeResponse.getClientResponse().readEntity(InputPortsEntity.class);
             final Set<PortEntity> nodePortEntities = nodeResponseEntity.getInputPorts();
 
             for (final PortEntity nodePortEntity : nodePortEntities) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/LabelsEndpointMerger.java
Patch:
@@ -43,12 +43,12 @@ public NodeResponse merge(URI uri, String method, Set<NodeResponse> successfulRe
             throw new IllegalArgumentException("Cannot use Endpoint Mapper of type " + getClass().getSimpleName() + " to map responses for URI " + uri + ", HTTP Method " + method);
         }
 
-        final LabelsEntity responseEntity = clientResponse.getClientResponse().getEntity(LabelsEntity.class);
+        final LabelsEntity responseEntity = clientResponse.getClientResponse().readEntity(LabelsEntity.class);
         final Set<LabelEntity> labelEntities = responseEntity.getLabels();
 
         final Map<String, Map<NodeIdentifier, LabelEntity>> entityMap = new HashMap<>();
         for (final NodeResponse nodeResponse : successfulResponses) {
-            final LabelsEntity nodeResponseEntity = nodeResponse == clientResponse ? responseEntity : nodeResponse.getClientResponse().getEntity(LabelsEntity.class);
+            final LabelsEntity nodeResponseEntity = nodeResponse == clientResponse ? responseEntity : nodeResponse.getClientResponse().readEntity(LabelsEntity.class);
             final Set<LabelEntity> nodeLabelEntities = nodeResponseEntity.getLabels();
 
             for (final LabelEntity nodeLabelEntity : nodeLabelEntities) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/OutputPortsEndpointMerger.java
Patch:
@@ -44,12 +44,12 @@ public final NodeResponse merge(final URI uri, final String method, final Set<No
             throw new IllegalArgumentException("Cannot use Endpoint Mapper of type " + getClass().getSimpleName() + " to map responses for URI " + uri + ", HTTP Method " + method);
         }
 
-        final OutputPortsEntity responseEntity = clientResponse.getClientResponse().getEntity(OutputPortsEntity.class);
+        final OutputPortsEntity responseEntity = clientResponse.getClientResponse().readEntity(OutputPortsEntity.class);
         final Set<PortEntity> portEntities = responseEntity.getOutputPorts();
 
         final Map<String, Map<NodeIdentifier, PortEntity>> entityMap = new HashMap<>();
         for (final NodeResponse nodeResponse : successfulResponses) {
-            final OutputPortsEntity nodeResponseEntity = nodeResponse == clientResponse ? responseEntity : nodeResponse.getClientResponse().getEntity(OutputPortsEntity.class);
+            final OutputPortsEntity nodeResponseEntity = nodeResponse == clientResponse ? responseEntity : nodeResponse.getClientResponse().readEntity(OutputPortsEntity.class);
             final Set<PortEntity> nodePortEntities = nodeResponseEntity.getOutputPorts();
 
             for (final PortEntity nodePortEntity : nodePortEntities) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/ProcessGroupsEndpointMerger.java
Patch:
@@ -44,12 +44,12 @@ public final NodeResponse merge(final URI uri, final String method, final Set<No
             throw new IllegalArgumentException("Cannot use Endpoint Mapper of type " + getClass().getSimpleName() + " to map responses for URI " + uri + ", HTTP Method " + method);
         }
 
-        final ProcessGroupsEntity responseEntity = clientResponse.getClientResponse().getEntity(ProcessGroupsEntity.class);
+        final ProcessGroupsEntity responseEntity = clientResponse.getClientResponse().readEntity(ProcessGroupsEntity.class);
         final Set<ProcessGroupEntity> processGroupEntities = responseEntity.getProcessGroups();
 
         final Map<String, Map<NodeIdentifier, ProcessGroupEntity>> entityMap = new HashMap<>();
         for (final NodeResponse nodeResponse : successfulResponses) {
-            final ProcessGroupsEntity nodeResponseEntity = nodeResponse == clientResponse ? responseEntity : nodeResponse.getClientResponse().getEntity(ProcessGroupsEntity.class);
+            final ProcessGroupsEntity nodeResponseEntity = nodeResponse == clientResponse ? responseEntity : nodeResponse.getClientResponse().readEntity(ProcessGroupsEntity.class);
             final Set<ProcessGroupEntity> nodeProcessGroupEntities = nodeResponseEntity.getProcessGroups();
 
             for (final ProcessGroupEntity nodeProcessGroupEntity : nodeProcessGroupEntities) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/ProcessorsEndpointMerger.java
Patch:
@@ -44,12 +44,12 @@ public final NodeResponse merge(final URI uri, final String method, final Set<No
             throw new IllegalArgumentException("Cannot use Endpoint Mapper of type " + getClass().getSimpleName() + " to map responses for URI " + uri + ", HTTP Method " + method);
         }
 
-        final ProcessorsEntity responseEntity = clientResponse.getClientResponse().getEntity(ProcessorsEntity.class);
+        final ProcessorsEntity responseEntity = clientResponse.getClientResponse().readEntity(ProcessorsEntity.class);
         final Set<ProcessorEntity> processorEntities = responseEntity.getProcessors();
 
         final Map<String, Map<NodeIdentifier, ProcessorEntity>> entityMap = new HashMap<>();
         for (final NodeResponse nodeResponse : successfulResponses) {
-            final ProcessorsEntity nodeResponseEntity = nodeResponse == clientResponse ? responseEntity : nodeResponse.getClientResponse().getEntity(ProcessorsEntity.class);
+            final ProcessorsEntity nodeResponseEntity = nodeResponse == clientResponse ? responseEntity : nodeResponse.getClientResponse().readEntity(ProcessorsEntity.class);
             final Set<ProcessorEntity> nodeProcessorEntities = nodeResponseEntity.getProcessors();
 
             for (final ProcessorEntity nodeProcessorEntity : nodeProcessorEntities) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/RemoteProcessGroupsEndpointMerger.java
Patch:
@@ -44,12 +44,12 @@ public NodeResponse merge(URI uri, String method, Set<NodeResponse> successfulRe
             throw new IllegalArgumentException("Cannot use Endpoint Mapper of type " + getClass().getSimpleName() + " to map responses for URI " + uri + ", HTTP Method " + method);
         }
 
-        final RemoteProcessGroupsEntity responseEntity = clientResponse.getClientResponse().getEntity(RemoteProcessGroupsEntity.class);
+        final RemoteProcessGroupsEntity responseEntity = clientResponse.getClientResponse().readEntity(RemoteProcessGroupsEntity.class);
         final Set<RemoteProcessGroupEntity> rpgEntities = responseEntity.getRemoteProcessGroups();
 
         final Map<String, Map<NodeIdentifier, RemoteProcessGroupEntity>> entityMap = new HashMap<>();
         for (final NodeResponse nodeResponse : successfulResponses) {
-            final RemoteProcessGroupsEntity nodeResponseEntity = nodeResponse == clientResponse ? responseEntity : nodeResponse.getClientResponse().getEntity(RemoteProcessGroupsEntity.class);
+            final RemoteProcessGroupsEntity nodeResponseEntity = nodeResponse == clientResponse ? responseEntity : nodeResponse.getClientResponse().readEntity(RemoteProcessGroupsEntity.class);
             final Set<RemoteProcessGroupEntity> nodeRpgEntities = nodeResponseEntity.getRemoteProcessGroups();
 
             for (final RemoteProcessGroupEntity nodeRpgEntity : nodeRpgEntities) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/ReportingTasksEndpointMerger.java
Patch:
@@ -43,12 +43,12 @@ public final NodeResponse merge(final URI uri, final String method, final Set<No
             throw new IllegalArgumentException("Cannot use Endpoint Mapper of type " + getClass().getSimpleName() + " to map responses for URI " + uri + ", HTTP Method " + method);
         }
 
-        final ReportingTasksEntity responseEntity = clientResponse.getClientResponse().getEntity(ReportingTasksEntity.class);
+        final ReportingTasksEntity responseEntity = clientResponse.getClientResponse().readEntity(ReportingTasksEntity.class);
         final Set<ReportingTaskEntity> reportingTasksEntities = responseEntity.getReportingTasks();
 
         final Map<String, Map<NodeIdentifier, ReportingTaskEntity>> entityMap = new HashMap<>();
         for (final NodeResponse nodeResponse : successfulResponses) {
-            final ReportingTasksEntity nodeResponseEntity = nodeResponse == clientResponse ? responseEntity : nodeResponse.getClientResponse().getEntity(ReportingTasksEntity.class);
+            final ReportingTasksEntity nodeResponseEntity = nodeResponse == clientResponse ? responseEntity : nodeResponse.getClientResponse().readEntity(ReportingTasksEntity.class);
             final Set<ReportingTaskEntity> nodeReportingTaskEntities = nodeResponseEntity.getReportingTasks();
 
             for (final ReportingTaskEntity nodeReportingTaskEntity : nodeReportingTaskEntities) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/SearchUsersEndpointMerger.java
Patch:
@@ -41,12 +41,12 @@ public final NodeResponse merge(final URI uri, final String method, final Set<No
             throw new IllegalArgumentException("Cannot use Endpoint Mapper of type " + getClass().getSimpleName() + " to map responses for URI " + uri + ", HTTP Method " + method);
         }
 
-        final TenantsEntity responseEntity = clientResponse.getClientResponse().getEntity(TenantsEntity.class);
+        final TenantsEntity responseEntity = clientResponse.getClientResponse().readEntity(TenantsEntity.class);
         final Collection<TenantEntity> userEntities = responseEntity.getUsers();
         final Collection<TenantEntity> userGroupEntities = responseEntity.getUserGroups();
 
         for (final NodeResponse nodeResponse : successfulResponses) {
-            final TenantsEntity nodeResponseEntity = nodeResponse == clientResponse ? responseEntity : nodeResponse.getClientResponse().getEntity(TenantsEntity.class);
+            final TenantsEntity nodeResponseEntity = nodeResponse == clientResponse ? responseEntity : nodeResponse.getClientResponse().readEntity(TenantsEntity.class);
 
             // only retain users/groups that all nodes agree on
             userEntities.retainAll(nodeResponseEntity.getUsers());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/StatusHistoryEndpointMerger.java
Patch:
@@ -102,7 +102,7 @@ public boolean canHandle(URI uri, String method) {
     public NodeResponse merge(URI uri, String method, Set<NodeResponse> successfulResponses, Set<NodeResponse> problematicResponses, NodeResponse clientResponse) {
         final Map<String, MetricDescriptor<?>> metricDescriptors = getStandardMetricDescriptors(uri);
 
-        final StatusHistoryEntity responseEntity = clientResponse.getClientResponse().getEntity(StatusHistoryEntity.class);
+        final StatusHistoryEntity responseEntity = clientResponse.getClientResponse().readEntity(StatusHistoryEntity.class);
 
         final Set<StatusDescriptorDTO> fieldDescriptors = new LinkedHashSet<>();
 
@@ -111,7 +111,7 @@ public NodeResponse merge(URI uri, String method, Set<NodeResponse> successfulRe
         final List<NodeStatusSnapshotsDTO> nodeStatusSnapshots = new ArrayList<>(successfulResponses.size());
         LinkedHashMap<String, String> noReadPermissionsComponentDetails = null;
         for (final NodeResponse nodeResponse : successfulResponses) {
-            final StatusHistoryEntity nodeResponseEntity = nodeResponse == clientResponse ? responseEntity : nodeResponse.getClientResponse().getEntity(StatusHistoryEntity.class);
+            final StatusHistoryEntity nodeResponseEntity = nodeResponse == clientResponse ? responseEntity : nodeResponse.getClientResponse().readEntity(StatusHistoryEntity.class);
             final StatusHistoryDTO nodeStatus = nodeResponseEntity.getStatusHistory();
             lastStatusHistory = nodeStatus;
             if (noReadPermissionsComponentDetails == null && !nodeResponseEntity.getCanRead()) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/UserGroupsEndpointMerger.java
Patch:
@@ -45,12 +45,12 @@ public final NodeResponse merge(final URI uri, final String method, final Set<No
             throw new IllegalArgumentException("Cannot use Endpoint Mapper of type " + getClass().getSimpleName() + " to map responses for URI " + uri + ", HTTP Method " + method);
         }
 
-        final UserGroupsEntity responseEntity = clientResponse.getClientResponse().getEntity(UserGroupsEntity.class);
+        final UserGroupsEntity responseEntity = clientResponse.getClientResponse().readEntity(UserGroupsEntity.class);
         final Collection<UserGroupEntity> userGroupEntities = responseEntity.getUserGroups();
 
         final Map<String, Map<NodeIdentifier, UserGroupEntity>> entityMap = new HashMap<>();
         for (final NodeResponse nodeResponse : successfulResponses) {
-            final UserGroupsEntity nodeResponseEntity = nodeResponse == clientResponse ? responseEntity : nodeResponse.getClientResponse().getEntity(UserGroupsEntity.class);
+            final UserGroupsEntity nodeResponseEntity = nodeResponse == clientResponse ? responseEntity : nodeResponse.getClientResponse().readEntity(UserGroupsEntity.class);
             final Collection<UserGroupEntity> nodeUserGroupEntities = nodeResponseEntity.getUserGroups();
 
             // only retain user groups that all nodes agree on

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/UsersEndpointMerger.java
Patch:
@@ -45,12 +45,12 @@ public final NodeResponse merge(final URI uri, final String method, final Set<No
             throw new IllegalArgumentException("Cannot use Endpoint Mapper of type " + getClass().getSimpleName() + " to map responses for URI " + uri + ", HTTP Method " + method);
         }
 
-        final UsersEntity responseEntity = clientResponse.getClientResponse().getEntity(UsersEntity.class);
+        final UsersEntity responseEntity = clientResponse.getClientResponse().readEntity(UsersEntity.class);
         final Collection<UserEntity> userEntities = responseEntity.getUsers();
 
         final Map<String, Map<NodeIdentifier, UserEntity>> entityMap = new HashMap<>();
         for (final NodeResponse nodeResponse : successfulResponses) {
-            final UsersEntity nodeResponseEntity = nodeResponse == clientResponse ? responseEntity : nodeResponse.getClientResponse().getEntity(UsersEntity.class);
+            final UsersEntity nodeResponseEntity = nodeResponse == clientResponse ? responseEntity : nodeResponse.getClientResponse().readEntity(UsersEntity.class);
             final Collection<UserEntity> nodeUserEntities = nodeResponseEntity.getUsers();
 
             // only retain users that all nodes agree on

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/spring/ThreadPoolRequestReplicatorFactoryBean.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.nifi.cluster.spring;
 
-import com.sun.jersey.api.client.Client;
-import com.sun.jersey.api.client.config.DefaultClientConfig;
 import org.apache.nifi.cluster.coordination.ClusterCoordinator;
 import org.apache.nifi.cluster.coordination.http.replication.RequestCompletionCallback;
 import org.apache.nifi.cluster.coordination.http.replication.ThreadPoolRequestReplicator;
@@ -31,6 +29,8 @@
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.ApplicationContextAware;
 
+import javax.ws.rs.client.Client;
+
 public class ThreadPoolRequestReplicatorFactoryBean implements FactoryBean<ThreadPoolRequestReplicator>, ApplicationContextAware {
     private ApplicationContext applicationContext;
     private NiFiProperties nifiProperties;
@@ -47,7 +47,7 @@ public ThreadPoolRequestReplicator getObject() throws Exception {
             final int corePoolSize = nifiProperties.getClusterNodeProtocolCorePoolSize();
             final int maxPoolSize = nifiProperties.getClusterNodeProtocolMaxPoolSize();
             final int maxConcurrentRequests = nifiProperties.getClusterNodeMaxConcurrentRequests();
-            final Client jerseyClient = WebUtils.createClient(new DefaultClientConfig(), SslContextFactory.createSslContext(nifiProperties));
+            final Client jerseyClient = WebUtils.createClient(null, SslContextFactory.createSslContext(nifiProperties));
             final String connectionTimeout = nifiProperties.getClusterNodeConnectionTimeout();
             final String readTimeout = nifiProperties.getClusterNodeReadTimeout();
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-jetty/src/main/java/org/apache/nifi/web/server/JettyServer.java
Patch:
@@ -858,7 +858,8 @@ public void start() {
                     if (flowService != null && flowService.isRunning()) {
                         flowService.stop(false);
                     }
-                    throw new Exception("Unable to load flow due to: " + e, e);
+                    logger.error("Unable to load flow due to: " + e, e);
+                    throw new Exception("Unable to load flow due to: " + e); // cannot wrap the exception as they are not defined in a classloader accessible to the caller
                 }
             }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/integration/accesscontrol/AccessControlHelper.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.nifi.integration.accesscontrol;
 
-import com.sun.jersey.api.client.ClientResponse;
 import org.apache.nifi.bundle.Bundle;
 import org.apache.nifi.integration.NiFiWebApiTest;
 import org.apache.nifi.integration.util.NiFiTestAuthorizer;
@@ -27,6 +26,7 @@
 import org.apache.nifi.nar.SystemBundle;
 import org.apache.nifi.util.NiFiProperties;
 
+import javax.ws.rs.core.Response;
 import java.io.File;
 
 import static org.junit.Assert.assertEquals;
@@ -109,7 +109,7 @@ public NiFiTestUser getPrivilegedUser() {
     }
 
     public void testGenericGetUri(final String uri) throws Exception {
-        ClientResponse response;
+        Response response;
 
         // read
         response = getReadUser().testGet(uri);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/integration/accesscontrol/ITCountersAccessControl.java
Patch:
@@ -16,11 +16,11 @@
  */
 package org.apache.nifi.integration.accesscontrol;
 
-import com.sun.jersey.api.client.ClientResponse;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
+import javax.ws.rs.core.Response;
 import java.util.Collections;
 
 import static org.junit.Assert.assertEquals;
@@ -58,7 +58,7 @@ public void testGetCounters() throws Exception {
     public void testUpdateCounters() throws Exception {
         final String counterUri = uri + "/my-counter";
 
-        ClientResponse response;
+        Response response;
 
         // read
         response = helper.getReadUser().testPut(counterUri, Collections.emptyMap());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/integration/util/NiFiTestServer.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.nifi.integration.util;
 
-import com.sun.jersey.api.client.Client;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.nifi.framework.security.util.SslContextFactory;
 import org.apache.nifi.services.FlowService;
@@ -36,6 +35,7 @@
 import org.springframework.web.context.support.WebApplicationContextUtils;
 
 import javax.servlet.ServletContext;
+import javax.ws.rs.client.Client;
 import java.io.File;
 import java.util.Collections;
 

File: nifi-nar-bundles/nifi-mongodb-bundle/nifi-mongodb-processors/src/main/java/org/apache/nifi/processors/mongodb/GetMongo.java
Patch:
@@ -18,6 +18,7 @@
  */
 package org.apache.nifi.processors.mongodb;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.mongodb.client.FindIterable;
 import com.mongodb.client.MongoCollection;
 import com.mongodb.client.MongoCursor;
@@ -42,7 +43,6 @@
 import org.apache.nifi.processor.util.StandardValidators;
 import org.bson.Document;
 import org.bson.json.JsonWriterSettings;
-import org.codehaus.jackson.map.ObjectMapper;
 
 import java.io.IOException;
 import java.io.OutputStream;

File: nifi-nar-bundles/nifi-standard-services/nifi-mongodb-services-bundle/nifi-mongodb-services/src/test/java/org/apache/nifi/mongodb/TestMongoDBControllerService.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.apache.nifi.mongodb;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import org.apache.nifi.util.TestRunner;
 import org.apache.nifi.util.TestRunners;
 import org.bson.Document;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;

File: nifi-toolkit/nifi-toolkit-s2s/src/main/java/org/apache/nifi/toolkit/s2s/SiteToSiteCliMain.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.nifi.toolkit.s2s;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
+import com.fasterxml.jackson.annotation.JsonInclude.Value;
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import org.apache.commons.cli.CommandLine;
@@ -87,7 +88,7 @@ public static void printUsage(String errorMessage, Options options) {
         }
         ObjectMapper objectMapper = new ObjectMapper();
         objectMapper.disable(JsonGenerator.Feature.AUTO_CLOSE_TARGET);
-        objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
+        objectMapper.setDefaultPropertyInclusion(Value.construct(JsonInclude.Include.NON_NULL, JsonInclude.Include.ALWAYS));
         System.out.println("s2s is a command line tool that can either read a list of DataPackets from stdin to send over site-to-site or write the received DataPackets to stdout");
         System.out.println();
         System.out.println("The s2s cli input/output format is a JSON list of DataPackets.  They can have the following formats:");

File: nifi-toolkit/nifi-toolkit-s2s/src/main/java/org/apache/nifi/toolkit/s2s/SiteToSiteReceiver.java
Patch:
@@ -23,8 +23,8 @@
 import org.apache.nifi.remote.TransferDirection;
 import org.apache.nifi.remote.client.SiteToSiteClient;
 import org.apache.nifi.remote.protocol.DataPacket;
-import org.codehaus.jackson.JsonFactory;
-import org.codehaus.jackson.JsonGenerator;
+import com.fasterxml.jackson.core.JsonFactory;
+import com.fasterxml.jackson.core.JsonGenerator;
 
 import java.io.IOException;
 import java.io.InputStream;

File: nifi-toolkit/nifi-toolkit-s2s/src/test/java/org/apache/nifi/toolkit/s2s/SiteToSiteReceiverTest.java
Patch:
@@ -17,7 +17,8 @@
 
 package org.apache.nifi.toolkit.s2s;
 
-import com.fasterxml.jackson.annotation.JsonInclude;
+import com.fasterxml.jackson.annotation.JsonInclude.Include;
+import com.fasterxml.jackson.annotation.JsonInclude.Value;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import org.apache.nifi.remote.Transaction;
 import org.apache.nifi.remote.TransactionCompletion;
@@ -42,7 +43,7 @@
 
 @RunWith(MockitoJUnitRunner.class)
 public class SiteToSiteReceiverTest {
-    private final ObjectMapper objectMapper = new ObjectMapper().setSerializationInclusion(JsonInclude.Include.NON_NULL);
+    private final ObjectMapper objectMapper = new ObjectMapper().setDefaultPropertyInclusion(Value.construct(Include.NON_NULL, Include.ALWAYS));;
     @Mock
     SiteToSiteClient siteToSiteClient;
     @Mock

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/AboutDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.DateTimeAdapter;
 import org.apache.nifi.web.api.dto.util.TimezoneAdapter;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/AccessConfigurationDTO.java
Patch:
@@ -16,7 +16,8 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
+
 import javax.xml.bind.annotation.XmlType;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/AccessPolicyDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.entity.TenantEntity;
 
 import javax.xml.bind.annotation.XmlType;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/AccessPolicySummaryDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.entity.ComponentReferenceEntity;
 
 import javax.xml.bind.annotation.XmlType;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/AccessStatusDTO.java
Patch:
@@ -16,7 +16,8 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
+
 import javax.xml.bind.annotation.XmlRootElement;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/AffectedComponentDTO.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
 import java.util.Collection;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/AllowableValueDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/BannerDTO.java
Patch:
@@ -16,7 +16,8 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
+
 import javax.xml.bind.annotation.XmlType;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/BatchSettingsDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/BulletinDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.TimeAdapter;
 
 import javax.xml.bind.annotation.XmlType;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/BulletinQueryDTO.java
Patch:
@@ -16,7 +16,8 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
+
 import javax.xml.bind.annotation.XmlType;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/BundleDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
 import java.util.Objects;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ClusterSummaryDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ComponentDTO.java
Patch:
@@ -16,7 +16,8 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
+
 import javax.xml.bind.annotation.XmlType;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ComponentHistoryDTO.java
Patch:
@@ -16,9 +16,10 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
-import java.util.Map;
+import io.swagger.annotations.ApiModelProperty;
+
 import javax.xml.bind.annotation.XmlType;
+import java.util.Map;
 
 /**
  * History of a component's properties.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ComponentReferenceDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ComponentStateDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ConnectableDTO.java
Patch:
@@ -16,7 +16,8 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
+
 import javax.xml.bind.annotation.XmlType;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ConnectionDTO.java
Patch:
@@ -16,10 +16,11 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
+
+import javax.xml.bind.annotation.XmlType;
 import java.util.List;
 import java.util.Set;
-import javax.xml.bind.annotation.XmlType;
 
 /**
  * A connection between two connectable components.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ControllerConfigurationDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ControllerDTO.java
Patch:
@@ -16,9 +16,10 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
-import java.util.Set;
+import io.swagger.annotations.ApiModelProperty;
+
 import javax.xml.bind.annotation.XmlType;
+import java.util.Set;
 
 /**
  * Configuration details for a NiFi controller. Primary use of this DTO is for consumption by a remote NiFi instance to initiate site to site communications.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ControllerServiceApiDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
 import java.util.Objects;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ControllerServiceDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.entity.ControllerServiceReferencingComponentEntity;
 
 import javax.xml.bind.annotation.XmlType;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ControllerServiceReferencingComponentDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.entity.ControllerServiceReferencingComponentEntity;
 
 import javax.xml.bind.annotation.XmlType;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/CounterDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/CountersDTO.java
Patch:
@@ -17,11 +17,10 @@
 
 package org.apache.nifi.web.api.dto;
 
-import java.util.List;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
-
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import java.util.List;
 
 @XmlType(name = "counters")
 public class CountersDTO {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/DimensionsDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/DocumentedTypeDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
 import java.util.List;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/FlowConfigurationDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.TimeAdapter;
 
 import javax.xml.bind.annotation.XmlType;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/FlowFileDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
 import java.util.Map;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/FlowFileSummaryDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/FlowSnippetDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
 import java.nio.charset.StandardCharsets;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/LabelDTO.java
Patch:
@@ -16,10 +16,10 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
-import java.util.Map;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
+import java.util.Map;
 
 /**
  * Details of a label.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/NodeCountersSnapshotDTO.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.nifi.web.api.dto;
 
-import javax.xml.bind.annotation.XmlType;
+import io.swagger.annotations.ApiModelProperty;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import javax.xml.bind.annotation.XmlType;
 
 @XmlType(name = "nodeProcessorStatusSnapshot")
 public class NodeCountersSnapshotDTO implements Cloneable {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/NodeDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.DateTimeAdapter;
 
 import javax.xml.bind.annotation.XmlType;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/NodeSystemDiagnosticsSnapshotDTO.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.nifi.web.api.dto;
 
-import javax.xml.bind.annotation.XmlType;
+import io.swagger.annotations.ApiModelProperty;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import javax.xml.bind.annotation.XmlType;
 
 @XmlType(name = "nodeSystemDiagnosticsSnapshot")
 public class NodeSystemDiagnosticsSnapshotDTO implements Cloneable {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/PermissionsDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/PortDTO.java
Patch:
@@ -16,10 +16,11 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
+
+import javax.xml.bind.annotation.XmlType;
 import java.util.Collection;
 import java.util.Set;
-import javax.xml.bind.annotation.XmlType;
 
 /**
  * The details for a port within this NiFi flow.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/PositionDTO.java
Patch:
@@ -16,7 +16,8 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
+
 import javax.xml.bind.annotation.XmlType;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/PreviousValueDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.DateTimeAdapter;
 
 import javax.xml.bind.annotation.XmlType;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ProcessGroupDTO.java
Patch:
@@ -16,11 +16,10 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
-
-import java.util.Map;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
+import java.util.Map;
 
 /**
  * The details for a process group within this NiFi flow.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ProcessorConfigDTO.java
Patch:
@@ -16,11 +16,11 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
-import java.util.Map;
-import java.util.Set;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
+import java.util.Map;
+import java.util.Set;
 
 /**
  * Configuration details for a processor in this NiFi.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ProcessorDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
 import java.util.Collection;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/PropertyDescriptorDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.entity.AllowableValueEntity;
 
 import javax.xml.bind.annotation.XmlType;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/PropertyHistoryDTO.java
Patch:
@@ -16,9 +16,10 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
-import java.util.List;
+import io.swagger.annotations.ApiModelProperty;
+
 import javax.xml.bind.annotation.XmlType;
+import java.util.List;
 
 /**
  * History of a processor property.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/QueueSizeDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ReadablePermission.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 public interface ReadablePermission {
     @ApiModelProperty(

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/RelationshipDTO.java
Patch:
@@ -16,7 +16,8 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
+
 import javax.xml.bind.annotation.XmlType;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/RemoteProcessGroupContentsDTO.java
Patch:
@@ -16,9 +16,10 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
-import java.util.Set;
+import io.swagger.annotations.ApiModelProperty;
+
 import javax.xml.bind.annotation.XmlType;
+import java.util.Set;
 
 /**
  * Contents of a remote process group.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/RemoteProcessGroupDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.DateTimeAdapter;
 
 import javax.xml.bind.annotation.XmlType;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/RemoteProcessGroupPortDTO.java
Patch:
@@ -16,7 +16,8 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
+
 import javax.xml.bind.annotation.XmlType;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ReportingTaskDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
 import java.util.Collection;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ResourceDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/RevisionDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/StateEntryDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/StateMapDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
 import java.util.List;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/SystemDiagnosticsDTO.java
Patch:
@@ -17,11 +17,10 @@
 
 package org.apache.nifi.web.api.dto;
 
-import java.util.List;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
-
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import java.util.List;
 
 @XmlType(name = "systemDiagnostics")
 public class SystemDiagnosticsDTO {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/SystemDiagnosticsSnapshotDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.DateTimeAdapter;
 import org.apache.nifi.web.api.dto.util.TimeAdapter;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/TemplateDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.DateTimeAdapter;
 
 import javax.xml.bind.annotation.XmlAttribute;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/TenantDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/UserDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.entity.AccessPolicySummaryEntity;
 import org.apache.nifi.web.api.entity.TenantEntity;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/UserGroupDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.entity.AccessPolicyEntity;
 import org.apache.nifi.web.api.entity.TenantEntity;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/VariableDTO.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.entity.AffectedComponentEntity;
 
 import javax.xml.bind.annotation.XmlType;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/VariableRegistryDTO.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.entity.VariableEntity;
 
 import javax.xml.bind.annotation.XmlType;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/VariableRegistryUpdateRequestDTO.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.TimestampAdapter;
 import org.apache.nifi.web.api.entity.AffectedComponentEntity;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/VariableRegistryUpdateStepDTO.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.nifi.web.api.dto;
 
-import javax.xml.bind.annotation.XmlType;
+import io.swagger.annotations.ApiModelProperty;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import javax.xml.bind.annotation.XmlType;
 
 @XmlType(name = "varaibleRegistryUpdateStep")
 public class VariableRegistryUpdateStepDTO {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/WritablePermission.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 public interface WritablePermission {
     @ApiModelProperty(

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/action/ActionDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto.action;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.action.component.details.ComponentDetailsDTO;
 import org.apache.nifi.web.api.dto.action.details.ActionDetailsDTO;
 import org.apache.nifi.web.api.dto.util.DateTimeAdapter;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/action/HistoryQueryDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto.action;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.DateTimeAdapter;
 
 import javax.xml.bind.annotation.XmlType;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/action/component/details/ExtensionDetailsDTO.java
Patch:
@@ -16,7 +16,8 @@
  */
 package org.apache.nifi.web.api.dto.action.component.details;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
+
 import javax.xml.bind.annotation.XmlType;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/action/component/details/RemoteProcessGroupDetailsDTO.java
Patch:
@@ -16,7 +16,8 @@
  */
 package org.apache.nifi.web.api.dto.action.component.details;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
+
 import javax.xml.bind.annotation.XmlType;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/action/details/ConfigureDetailsDTO.java
Patch:
@@ -16,7 +16,8 @@
  */
 package org.apache.nifi.web.api.dto.action.details;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
+
 import javax.xml.bind.annotation.XmlType;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/action/details/ConnectDetailsDTO.java
Patch:
@@ -16,7 +16,8 @@
  */
 package org.apache.nifi.web.api.dto.action.details;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
+
 import javax.xml.bind.annotation.XmlType;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/action/details/MoveDetailsDTO.java
Patch:
@@ -16,7 +16,8 @@
  */
 package org.apache.nifi.web.api.dto.action.details;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
+
 import javax.xml.bind.annotation.XmlType;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/flow/FlowBreadcrumbDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto.flow;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/flow/FlowDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto.flow;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.entity.ConnectionEntity;
 import org.apache.nifi.web.api.entity.FunnelEntity;
 import org.apache.nifi.web.api.entity.LabelEntity;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/flow/ProcessGroupFlowDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto.flow;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.TimeAdapter;
 import org.apache.nifi.web.api.entity.FlowBreadcrumbEntity;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/provenance/AttributeDTO.java
Patch:
@@ -16,7 +16,8 @@
  */
 package org.apache.nifi.web.api.dto.provenance;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
+
 import javax.xml.bind.annotation.XmlType;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/provenance/ProvenanceDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto.provenance;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.TimestampAdapter;
 
 import javax.xml.bind.annotation.XmlType;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/provenance/ProvenanceOptionsDTO.java
Patch:
@@ -16,9 +16,10 @@
  */
 package org.apache.nifi.web.api.dto.provenance;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
-import java.util.List;
+import io.swagger.annotations.ApiModelProperty;
+
 import javax.xml.bind.annotation.XmlType;
+import java.util.List;
 
 /**
  * A provenance search options.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/provenance/ProvenanceRequestDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto.provenance;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.DateTimeAdapter;
 
 import javax.xml.bind.annotation.XmlType;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/provenance/ProvenanceResultsDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto.provenance;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.DateTimeAdapter;
 import org.apache.nifi.web.api.dto.util.TimeAdapter;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/provenance/ProvenanceSearchableFieldDTO.java
Patch:
@@ -16,7 +16,8 @@
  */
 package org.apache.nifi.web.api.dto.provenance;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
+
 import javax.xml.bind.annotation.XmlType;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/provenance/lineage/LineageRequestDTO.java
Patch:
@@ -16,7 +16,8 @@
  */
 package org.apache.nifi.web.api.dto.provenance.lineage;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
+
 import javax.xml.bind.annotation.XmlEnum;
 import javax.xml.bind.annotation.XmlType;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/provenance/lineage/LineageResultsDTO.java
Patch:
@@ -16,10 +16,11 @@
  */
 package org.apache.nifi.web.api.dto.provenance.lineage;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
+
+import javax.xml.bind.annotation.XmlType;
 import java.util.List;
 import java.util.Set;
-import javax.xml.bind.annotation.XmlType;
 
 /**
  * Represents the lineage results.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/remote/PeerDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto.remote;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/search/ComponentSearchResultDTO.java
Patch:
@@ -16,9 +16,10 @@
  */
 package org.apache.nifi.web.api.dto.search;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
-import java.util.List;
+import io.swagger.annotations.ApiModelProperty;
+
 import javax.xml.bind.annotation.XmlType;
+import java.util.List;
 
 /**
  * The components that match a search performed on this NiFi.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/search/NodeSearchResultDTO.java
Patch:
@@ -16,7 +16,8 @@
  */
 package org.apache.nifi.web.api.dto.search;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
+
 import javax.xml.bind.annotation.XmlType;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/search/SearchResultsDTO.java
Patch:
@@ -16,10 +16,11 @@
  */
 package org.apache.nifi.web.api.dto.search;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
+
+import javax.xml.bind.annotation.XmlType;
 import java.util.ArrayList;
 import java.util.List;
-import javax.xml.bind.annotation.XmlType;
 
 /**
  * The results of a search on this NiFi.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/ClusterStatusDTO.java
Patch:
@@ -16,10 +16,10 @@
  */
 package org.apache.nifi.web.api.dto.status;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
-import java.util.Collection;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
+import java.util.Collection;
 
 /**
  * DTO for serializing the controller status.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/ConnectionStatusDTO.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.nifi.web.api.dto.status;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.TimeAdapter;
 
 import javax.xml.bind.annotation.XmlType;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/ConnectionStatusSnapshotDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto.status;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/ControllerStatusDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto.status;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/NodeConnectionStatusSnapshotDTO.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.nifi.web.api.dto.status;
 
-import javax.xml.bind.annotation.XmlType;
+import io.swagger.annotations.ApiModelProperty;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import javax.xml.bind.annotation.XmlType;
 
 @XmlType(name = "nodeConnectionStatusSnapshot")
 public class NodeConnectionStatusSnapshotDTO implements Cloneable {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/NodePortStatusDTO.java
Patch:
@@ -16,10 +16,11 @@
  */
 package org.apache.nifi.web.api.dto.status;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
-import javax.xml.bind.annotation.XmlType;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.NodeDTO;
 
+import javax.xml.bind.annotation.XmlType;
+
 /**
  * DTO for serializing the port status for a particular node.
  */

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/NodePortStatusSnapshotDTO.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.nifi.web.api.dto.status;
 
-import javax.xml.bind.annotation.XmlType;
+import io.swagger.annotations.ApiModelProperty;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import javax.xml.bind.annotation.XmlType;
 
 @XmlType(name = "nodePortStatusSnapshot")
 public class NodePortStatusSnapshotDTO implements Cloneable {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/NodeProcessGroupStatusSnapshotDTO.java
Patch:
@@ -14,10 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.nifi.web.api.dto.status;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 public class NodeProcessGroupStatusSnapshotDTO implements Cloneable {
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/NodeProcessorStatusSnapshotDTO.java
Patch:
@@ -16,9 +16,9 @@
  */
 package org.apache.nifi.web.api.dto.status;
 
-import javax.xml.bind.annotation.XmlType;
+import io.swagger.annotations.ApiModelProperty;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import javax.xml.bind.annotation.XmlType;
 
 /**
  * DTO for serializing the processor status for a particular node.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/NodeRemoteProcessGroupStatusSnapshotDTO.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.nifi.web.api.dto.status;
 
-import javax.xml.bind.annotation.XmlType;
+import io.swagger.annotations.ApiModelProperty;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import javax.xml.bind.annotation.XmlType;
 
 @XmlType(name = "nodeRemoteProcessGroupStatusSnapshot")
 public class NodeRemoteProcessGroupStatusSnapshotDTO implements Cloneable {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/NodeStatusDTO.java
Patch:
@@ -16,10 +16,11 @@
  */
 package org.apache.nifi.web.api.dto.status;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
-import javax.xml.bind.annotation.XmlType;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.NodeDTO;
 
+import javax.xml.bind.annotation.XmlType;
+
 /**
  * DTO for serializing the node status.
  */

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/NodeStatusSnapshotsDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto.status;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
 import java.util.List;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/PortStatusDTO.java
Patch:
@@ -14,10 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.nifi.web.api.dto.status;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.TimeAdapter;
 
 import javax.xml.bind.annotation.XmlType;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/PortStatusSnapshotDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto.status;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/ProcessGroupStatusDTO.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.nifi.web.api.dto.status;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.TimeAdapter;
 
 import javax.xml.bind.annotation.XmlType;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/ProcessGroupStatusSnapshotDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto.status;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.entity.ConnectionStatusSnapshotEntity;
 import org.apache.nifi.web.api.entity.PortStatusSnapshotEntity;
 import org.apache.nifi.web.api.entity.ProcessGroupStatusSnapshotEntity;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/ProcessorStatusDTO.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.nifi.web.api.dto.status;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.TimeAdapter;
 
 import javax.xml.bind.annotation.XmlType;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/ProcessorStatusSnapshotDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto.status;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/RemoteProcessGroupStatusDTO.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.nifi.web.api.dto.status;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.TimeAdapter;
 
 import javax.xml.bind.annotation.XmlType;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/RemoteProcessGroupStatusSnapshotDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto.status;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/StatusDescriptorDTO.java
Patch:
@@ -16,11 +16,10 @@
  */
 package org.apache.nifi.web.api.dto.status;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
-
-import java.util.Objects;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlType;
+import java.util.Objects;
 
 /**
  * DTO for serializing a status descriptor.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/StatusHistoryDTO.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.dto.status;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.TimeAdapter;
 
 import javax.xml.bind.annotation.XmlType;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/StatusSnapshotDTO.java
Patch:
@@ -16,10 +16,11 @@
  */
 package org.apache.nifi.web.api.dto.status;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
+
+import javax.xml.bind.annotation.XmlType;
 import java.util.Date;
 import java.util.Map;
-import javax.xml.bind.annotation.XmlType;
 
 /**
  * A snapshot of the status at a given time.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/AccessPolicyEntity.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.AccessPolicyDTO;
 import org.apache.nifi.web.api.dto.util.TimeAdapter;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/BulletinEntity.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.BulletinDTO;
 import org.apache.nifi.web.api.dto.ReadablePermission;
 import org.apache.nifi.web.api.dto.util.TimeAdapter;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ComponentEntity.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.PermissionsDTO;
 import org.apache.nifi.web.api.dto.PositionDTO;
 import org.apache.nifi.web.api.dto.RevisionDTO;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ComponentReferenceEntity.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.ComponentReferenceDTO;
 
 import javax.xml.bind.annotation.XmlRootElement;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ComponentStateEntity.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.ComponentStateDTO;
 
 import javax.xml.bind.annotation.XmlRootElement;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ConnectionEntity.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.ConnectionDTO;
 import org.apache.nifi.web.api.dto.PositionDTO;
 import org.apache.nifi.web.api.dto.status.ConnectionStatusDTO;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ConnectionStatusSnapshotEntity.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.ReadablePermission;
 import org.apache.nifi.web.api.dto.status.ConnectionStatusSnapshotDTO;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ControllerBulletinsEntity.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlRootElement;
 import java.util.ArrayList;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ControllerConfigurationEntity.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.ControllerConfigurationDTO;
 import org.apache.nifi.web.api.dto.PermissionsDTO;
 import org.apache.nifi.web.api.dto.RevisionDTO;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ControllerServicesEntity.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.TimeAdapter;
 
 import javax.xml.bind.annotation.XmlRootElement;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/CopySnippetRequestEntity.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlRootElement;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/CreateTemplateRequestEntity.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlRootElement;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/CurrentUserEntity.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.PermissionsDTO;
 
 import javax.xml.bind.annotation.XmlRootElement;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/FlowBreadcrumbEntity.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.PermissionsDTO;
 import org.apache.nifi.web.api.dto.flow.FlowBreadcrumbDTO;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/FlowConfigurationEntity.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.FlowConfigurationDTO;
 
 import javax.xml.bind.annotation.XmlRootElement;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/InstantiateTemplateRequestEntity.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.FlowSnippetDTO;
 
 import javax.xml.bind.annotation.XmlRootElement;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/PortEntity.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.PortDTO;
 import org.apache.nifi.web.api.dto.status.PortStatusDTO;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/PortStatusSnapshotEntity.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.ReadablePermission;
 import org.apache.nifi.web.api.dto.status.PortStatusSnapshotDTO;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ProcessGroupEntity.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.ProcessGroupDTO;
 import org.apache.nifi.web.api.dto.status.ProcessGroupStatusDTO;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ProcessGroupFlowEntity.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.PermissionsDTO;
 import org.apache.nifi.web.api.dto.flow.ProcessGroupFlowDTO;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ProcessGroupStatusSnapshotEntity.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.ReadablePermission;
 import org.apache.nifi.web.api.dto.status.ProcessGroupStatusSnapshotDTO;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ProcessorEntity.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.ProcessorDTO;
 import org.apache.nifi.web.api.dto.status.ProcessorStatusDTO;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ProcessorStatusSnapshotEntity.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.ReadablePermission;
 import org.apache.nifi.web.api.dto.status.ProcessorStatusSnapshotDTO;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/RemoteProcessGroupEntity.java
Patch:
@@ -16,12 +16,12 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import javax.xml.bind.annotation.XmlRootElement;
-
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.RemoteProcessGroupDTO;
 import org.apache.nifi.web.api.dto.status.RemoteProcessGroupStatusDTO;
 
+import javax.xml.bind.annotation.XmlRootElement;
+
 /**
  * A serialized representation of this class can be placed in the entity body of a request or response to or from the API. This particular entity holds a reference to a RemoteProcessGroupDTO.
  */

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/RemoteProcessGroupStatusSnapshotEntity.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.ReadablePermission;
 import org.apache.nifi.web.api.dto.status.RemoteProcessGroupStatusSnapshotDTO;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/SnippetEntity.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.SnippetDTO;
 
 import javax.xml.bind.annotation.XmlRootElement;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/SubmitReplayRequestEntity.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 import javax.xml.bind.annotation.XmlRootElement;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/TemplatesEntity.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.TimeAdapter;
 
 import javax.xml.bind.annotation.XmlRootElement;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/UpdateControllerServiceReferenceRequestEntity.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.RevisionDTO;
 
 import javax.xml.bind.annotation.XmlRootElement;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/UsersEntity.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.util.TimeAdapter;
 
 import javax.xml.bind.annotation.XmlRootElement;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/VariableRegistryEntity.java
Patch:
@@ -14,10 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.nifi.web.api.entity;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.RevisionDTO;
 import org.apache.nifi.web.api.dto.VariableRegistryDTO;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/VariableRegistryUpdateRequestEntity.java
Patch:
@@ -14,10 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.nifi.web.api.entity;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.apache.nifi.web.api.dto.RevisionDTO;
 import org.apache.nifi.web.api.dto.VariableRegistryUpdateRequestDTO;
 

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-0-10-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/ConsumerLease.java
Patch:
@@ -423,7 +423,7 @@ private void writeDemarcatedData(final ProcessSession session, final List<Consum
                 }
                 final byte[] value = record.value();
                 if (value != null) {
-                	out.write(record.value());
+                    out.write(record.value());
                 }
                 useDemarcator = true;
             }
@@ -447,8 +447,8 @@ private void handleParseFailure(final ConsumerRecord<byte[], byte[]> consumerRec
         FlowFile failureFlowFile = session.create();
         final byte[] value = consumerRecord.value();
         if (value != null) {
-        	failureFlowFile = session.write(failureFlowFile, out -> out.write(value));
-        }        
+            failureFlowFile = session.write(failureFlowFile, out -> out.write(value));
+        }
         failureFlowFile = session.putAllAttributes(failureFlowFile, attributes);
 
         final String transitUri = KafkaProcessorUtils.buildTransitURI(securityProtocol, bootstrapServers, consumerRecord.topic());

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-0-11-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/ConsumerLease.java
Patch:
@@ -441,7 +441,7 @@ private void writeDemarcatedData(final ProcessSession session, final List<Consum
                     }
                     final byte[] value = record.value();
                     if (value != null) {
-                    	out.write(record.value());
+                        out.write(record.value());
                     }
                     useDemarcator = true;
                 }
@@ -468,7 +468,7 @@ private void handleParseFailure(final ConsumerRecord<byte[], byte[]> consumerRec
 
         final byte[] value = consumerRecord.value();
         if (value != null) {
-        	failureFlowFile = session.write(failureFlowFile, out -> out.write(value));
+            failureFlowFile = session.write(failureFlowFile, out -> out.write(value));
         }
         failureFlowFile = session.putAllAttributes(failureFlowFile, attributes);
 

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-0-9-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/ConsumerLease.java
Patch:
@@ -392,7 +392,7 @@ private void writeData(final ProcessSession session, final List<ConsumerRecord<b
                 }
                 final byte[] value = record.value();
                 if (value != null) {
-                	out.write(record.value());
+                    out.write(record.value());
                 }
                 useDemarcator = true;
             }

File: nifi-commons/nifi-record-path/src/main/java/org/apache/nifi/record/path/StandardFieldValue.java
Patch:
@@ -122,6 +122,8 @@ public void updateValue(final Object newValue) {
             if (value instanceof Record) {
                 ((Record) value).setValue(getField().getFieldName(), newValue);
                 return;
+            } else if (value == null) {
+                return; // value is null, nothing to update
             } else {
                 throw new UnsupportedOperationException("Cannot update the field value because the value is not associated with any record");
             }

File: nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/util/crypto/KeyedCipherProvider.java
Patch:
@@ -42,7 +42,7 @@ public abstract class KeyedCipherProvider implements CipherProvider {
      * @return the initialized cipher
      * @throws Exception if there is a problem initializing the cipher
      */
-    abstract Cipher getCipher(EncryptionMethod encryptionMethod, SecretKey key, byte[] iv, boolean encryptMode) throws Exception;
+    public abstract Cipher getCipher(EncryptionMethod encryptionMethod, SecretKey key, byte[] iv, boolean encryptMode) throws Exception;
 
     /**
      * Returns an initialized cipher for the specified algorithm. The IV will be generated internally (for encryption). If decryption is requested, it will throw an exception.
@@ -53,7 +53,7 @@ public abstract class KeyedCipherProvider implements CipherProvider {
      * @return the initialized cipher
      * @throws Exception if there is a problem initializing the cipher or if decryption is requested
      */
-    abstract Cipher getCipher(EncryptionMethod encryptionMethod, SecretKey key, boolean encryptMode) throws Exception;
+    public abstract Cipher getCipher(EncryptionMethod encryptionMethod, SecretKey key, boolean encryptMode) throws Exception;
 
     /**
      * Generates a new random IV of the correct length.

File: nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/util/crypto/bcrypt/BCrypt.java
Patch:
@@ -537,8 +537,8 @@ private static int streamtoword(byte data[], int offp[]) {
      * Initialise the Blowfish key schedule
      */
     private void init_key() {
-        P = (int[]) P_orig.clone();
-        S = (int[]) S_orig.clone();
+        P = P_orig.clone();
+        S = S_orig.clone();
     }
 
     /**
@@ -690,7 +690,7 @@ public static String hashpw(String password, String salt) {
 
         B = new BCrypt();
         hashed = B.crypt_raw(passwordb, saltb, rounds,
-                (int[]) bf_crypt_ciphertext.clone());
+                bf_crypt_ciphertext.clone());
 
         rs.append("$2");
         if (minor >= 'a')

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/FlowFromDOMFactory.java
Patch:
@@ -48,7 +48,6 @@
 import org.apache.nifi.web.api.dto.ProcessorDTO;
 import org.apache.nifi.web.api.dto.RemoteProcessGroupDTO;
 import org.apache.nifi.web.api.dto.ReportingTaskDTO;
-import org.jasypt.exceptions.EncryptionOperationNotPossibleException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.w3c.dom.Element;
@@ -508,7 +507,7 @@ private static String decrypt(final String value, final StringEncryptor encrypto
         if (value != null && value.startsWith(FlowSerializer.ENC_PREFIX) && value.endsWith(FlowSerializer.ENC_SUFFIX)) {
             try {
                 return encryptor.decrypt(value.substring(FlowSerializer.ENC_PREFIX.length(), value.length() - FlowSerializer.ENC_SUFFIX.length()));
-            } catch (EncryptionException | EncryptionOperationNotPossibleException e) {
+            } catch (EncryptionException e) {
                 final String moreDescriptiveMessage = "There was a problem decrypting a sensitive flow configuration value. " +
                         "Check that the nifi.sensitive.props.key value in nifi.properties matches the value used to encrypt the flow.xml.gz file";
                 logger.error(moreDescriptiveMessage, e);

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/PutSQL.java
Patch:
@@ -191,7 +191,7 @@ public class PutSQL extends AbstractSessionFactoryProcessor {
     private static final String FRAGMENT_INDEX_ATTR = FragmentAttributes.FRAGMENT_INDEX.key();
     private static final String FRAGMENT_COUNT_ATTR = FragmentAttributes.FRAGMENT_COUNT.key();
 
-    private static final Pattern LONG_PATTERN = Pattern.compile("^\\d{1,19}$");
+    private static final Pattern LONG_PATTERN = Pattern.compile("^-?\\d{1,19}$");
 
     @Override
     protected List<PropertyDescriptor> getSupportedPropertyDescriptors() {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java
Patch:
@@ -1305,7 +1305,8 @@ private void scheduleProcessors(final String groupId, final URI originalUri, fin
     }
 
     private void activateControllerServices(final String groupId, final URI originalUri, final VariableRegistryUpdateRequest updateRequest,
-        final Pause pause, final Collection<AffectedComponentDTO> affectedServices, final ControllerServiceState desiredState, final VariableRegistryUpdateStep updateStep) throws InterruptedException {
+        final Pause pause, final Collection<AffectedComponentDTO> affectedServices, final ControllerServiceState desiredState, final VariableRegistryUpdateStep updateStep)
+            throws InterruptedException {
 
         final Set<String> affectedServiceIds = affectedServices.stream()
             .map(component -> component.getId())

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/PutDatabaseRecord.java
Patch:
@@ -761,7 +761,7 @@ SqlAndIncludedColumns generateInsert(final RecordSchema recordSchema, final Stri
 
             // complete the SQL statements by adding ?'s for all of the values to be escaped.
             sqlBuilder.append(") VALUES (");
-            sqlBuilder.append(StringUtils.repeat("?", ",", fieldCount));
+            sqlBuilder.append(StringUtils.repeat("?", ",", includedColumns.size()));
             sqlBuilder.append(")");
 
             if (fieldsFound.get() == 0) {

File: nifi-nar-bundles/nifi-grpc-bundle/nifi-grpc-processors/src/main/java/org/apache/nifi/processors/grpc/ListenGRPC.java
Patch:
@@ -242,5 +242,6 @@ public void stopServer(final ProcessContext context) {
     @Override
     public void onTrigger(ProcessContext context, ProcessSessionFactory sessionFactory) throws ProcessException {
         sessionFactoryReference.compareAndSet(null, sessionFactory);
+        context.yield();
     }
 }

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/csv/CSVUtils.java
Patch:
@@ -33,7 +33,7 @@ public class CSVUtils {
     static final AllowableValue EXCEL = new AllowableValue("excel", "Microsoft Excel", "CSV data follows the format used by Microsoft Excel");
     static final AllowableValue TDF = new AllowableValue("tdf", "Tab-Delimited", "CSV data is Tab-Delimited instead of Comma Delimited");
     static final AllowableValue INFORMIX_UNLOAD = new AllowableValue("informix-unload", "Informix Unload", "The format used by Informix when issuing the UNLOAD TO file_name command");
-    static final AllowableValue INFORMIX_UNLOAD_CSV = new AllowableValue("informix-unload", "Informix Unload Escape Disabled",
+    static final AllowableValue INFORMIX_UNLOAD_CSV = new AllowableValue("informix-unload-csv", "Informix Unload Escape Disabled",
         "The format used by Informix when issuing the UNLOAD TO file_name command with escaping disabled");
     static final AllowableValue MYSQL = new AllowableValue("mysql", "MySQL Format", "CSV data follows the format used by MySQL");
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/GetFileTransfer.java
Patch:
@@ -208,7 +208,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
 
                     if (deleteOriginal) {
                         try {
-                            transfer.deleteFile(null, file.getFullPathFileName());
+                            transfer.deleteFile(flowFile, null, file.getFullPathFileName());
                         } catch (final IOException e) {
                             logger.error("Failed to remove remote file {} due to {}; deleting local copy",
                                     new Object[]{file.getFullPathFileName(), e});

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ListFileTransfer.java
Patch:
@@ -94,7 +94,7 @@ protected Map<String, String> createAttributes(final FileInfo fileInfo, final Pr
 
     @Override
     protected String getPath(final ProcessContext context) {
-        return context.getProperty(REMOTE_PATH).getValue();
+        return context.getProperty(REMOTE_PATH).evaluateAttributeExpressions().getValue();
     }
 
     @Override

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/PutFileTransfer.java
Patch:
@@ -230,7 +230,7 @@ private ConflictResult identifyAndResolveConflictFile(
                 logger.warn("Resolving conflict by rejecting {} due to conflicting filename with a directory or file already on remote server", new Object[]{flowFile});
                 break;
             case FileTransfer.CONFLICT_RESOLUTION_REPLACE:
-                transfer.deleteFile(path, fileName);
+                transfer.deleteFile(flowFile, path, fileName);
                 destinationRelationship = REL_SUCCESS;
                 transferFile = true;
                 penalizeFile = false;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/GenerateTableFetch.java
Patch:
@@ -318,12 +318,12 @@ public void onTrigger(final ProcessContext context, final ProcessSessionFactory
                     throw new SQLException("No rows returned from metadata query: " + selectQuery);
                 }
 
-                final long numberOfFetches = (partitionSize == 0) ? rowCount : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);
+                final long numberOfFetches = (partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);
 
                 // Generate SQL statements to read "pages" of data
                 for (long i = 0; i < numberOfFetches; i++) {
-                    long limit = partitionSize == 0 ? null : partitionSize;
-                    long offset = partitionSize == 0 ? null : i * partitionSize;
+                    Long limit = partitionSize == 0 ? null : (long) partitionSize;
+                    Long offset = partitionSize == 0 ? null : i * partitionSize;
                     final String maxColumnNames = StringUtils.join(maxValueColumnNameList, ", ");
                     final String query = dbAdapter.getSelectStatement(tableName, columnNames, whereClause, maxColumnNames, limit, offset);
                     FlowFile sqlFlowFile = (fileToProcess == null) ? session.create() : session.create(fileToProcess);

File: nifi-commons/nifi-record/src/main/java/org/apache/nifi/serialization/record/util/IllegalTypeConversionException.java
Patch:
@@ -17,7 +17,9 @@
 
 package org.apache.nifi.serialization.record.util;
 
-public class IllegalTypeConversionException extends RuntimeException {
+import org.apache.nifi.serialization.SchemaValidationException;
+
+public class IllegalTypeConversionException extends SchemaValidationException {
 
     public IllegalTypeConversionException(final String message) {
         super(message);

File: nifi-nar-bundles/nifi-extension-utils/nifi-record-utils/nifi-mock-record-utils/src/main/java/org/apache/nifi/serialization/record/CommaSeparatedRecordReader.java
Patch:
@@ -70,7 +70,7 @@ public void close() throws IOException {
             }
 
             @Override
-            public Record nextRecord() throws IOException, MalformedRecordException {
+            public Record nextRecord(final boolean coerceTypes, final boolean dropUnknown) throws IOException, MalformedRecordException {
                 if (failAfterN > -1 && recordCount >= failAfterN) {
                     throw new MalformedRecordException("Intentional Unit Test Exception because " + recordCount + " records have been read");
                 }

File: nifi-nar-bundles/nifi-extension-utils/nifi-record-utils/nifi-mock-record-utils/src/main/java/org/apache/nifi/serialization/record/MockRecordParser.java
Patch:
@@ -76,7 +76,7 @@ public void close() throws IOException {
             }
 
             @Override
-            public Record nextRecord() throws IOException, MalformedRecordException {
+            public Record nextRecord(final boolean coerceTypes, final boolean dropUnknown) throws IOException, MalformedRecordException {
                 if (failAfterN >= recordCount) {
                     throw new MalformedRecordException("Intentional Unit Test Exception because " + recordCount + " records have been read");
                 }

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-0-10-processors/src/test/java/org/apache/nifi/processors/kafka/pubsub/util/MockRecordParser.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.nifi.serialization.MalformedRecordException;
 import org.apache.nifi.serialization.RecordReader;
 import org.apache.nifi.serialization.RecordReaderFactory;
+import org.apache.nifi.serialization.SchemaValidationException;
 import org.apache.nifi.serialization.SimpleRecordSchema;
 import org.apache.nifi.serialization.record.MapRecord;
 import org.apache.nifi.serialization.record.Record;
@@ -74,7 +75,7 @@ public void close() throws IOException {
             }
 
             @Override
-            public Record nextRecord() throws IOException, MalformedRecordException {
+            public Record nextRecord(boolean coerceTypes, boolean dropUnknown) throws IOException, MalformedRecordException, SchemaValidationException {
                 if (failAfterN >= recordCount) {
                     throw new MalformedRecordException("Intentional Unit Test Exception because " + recordCount + " records have been read");
                 }

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/avro/AvroRecordReader.java
Patch:
@@ -32,7 +32,7 @@ public abstract class AvroRecordReader implements RecordReader {
     protected abstract GenericRecord nextAvroRecord() throws IOException;
 
     @Override
-    public Record nextRecord() throws IOException, MalformedRecordException {
+    public Record nextRecord(final boolean coerceTypes, final boolean dropUnknownFields) throws IOException, MalformedRecordException {
         GenericRecord record = nextAvroRecord();
         if (record == null) {
             return null;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-jetty/src/main/java/org/apache/nifi/web/server/JettyServer.java
Patch:
@@ -289,7 +289,9 @@ private void loadWars(final Set<Bundle> bundles) {
         }
 
         // load the web ui app
-        handlers.addHandler(loadWar(webUiWar, "/nifi", frameworkClassLoader));
+        final WebAppContext webUiContext = loadWar(webUiWar, "/nifi", frameworkClassLoader);
+        webUiContext.getInitParams().put("oidc-supported", String.valueOf(props.isOidcEnabled()));
+        handlers.addHandler(webUiContext);
 
         // load the web api app
         webApiContext = loadWar(webApiWar, "/nifi-api", frameworkClassLoader);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/NiFiWebApiSecurityConfiguration.java
Patch:
@@ -78,7 +78,7 @@ public void configure(WebSecurity webSecurity) throws Exception {
         // the /access/download-token and /access/ui-extension-token endpoints
         webSecurity
                 .ignoring()
-                    .antMatchers("/access", "/access/config", "/access/token", "/access/kerberos");
+                    .antMatchers("/access", "/access/config", "/access/token", "/access/kerberos", "/access/oidc/**");
     }
 
     @Override

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/jwt/JwtAuthenticationRequestToken.java
Patch:
@@ -53,7 +53,7 @@ public String getToken() {
 
     @Override
     public String toString() {
-        return getName();
+        return "<JWT token>";
     }
 
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/otp/OtpAuthenticationRequestToken.java
Patch:
@@ -60,7 +60,7 @@ public boolean isDownloadToken() {
 
     @Override
     public String toString() {
-        return getName();
+        return "<OTP token>";
     }
 
 }

File: nifi-toolkit/nifi-toolkit-tls/src/main/java/org/apache/nifi/toolkit/tls/standalone/TlsToolkitStandalone.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.nifi.toolkit.tls.standalone;
 
-import org.apache.commons.lang3.StringUtils;
 import org.apache.nifi.security.util.CertificateUtils;
 import org.apache.nifi.security.util.KeystoreType;
 import org.apache.nifi.security.util.KeyStoreUtils;
@@ -181,8 +180,7 @@ public void createNifiKeystoresAndTrustStores(StandaloneConfig standaloneConfig)
             tlsClientConfig.setTrustStorePassword(instanceDefinition.getTrustStorePassword());
             TlsClientManager tlsClientManager = new TlsClientManager(tlsClientConfig);
             KeyPair keyPair = TlsHelper.generateKeyPair(keyPairAlgorithm, keySize);
-            Extensions sanDnsExtensions = StringUtils.isBlank(tlsClientConfig.getDomainAlternativeNames())
-                    ? null : TlsHelper.createDomainAlternativeNamesExtensions(tlsClientConfig.getDomainAlternativeNames());
+            Extensions sanDnsExtensions = TlsHelper.createDomainAlternativeNamesExtensions(tlsClientConfig.getDomainAlternativeNames(), tlsClientConfig.calcDefaultDn(hostname));
             tlsClientManager.addPrivateKeyToKeyStore(keyPair, NIFI_KEY, CertificateUtils.generateIssuedCertificate(tlsClientConfig.calcDefaultDn(hostname),
                     keyPair.getPublic(), sanDnsExtensions, certificate, caKeyPair, signingAlgorithm, days), certificate);
             tlsClientManager.setCertificateEntry(NIFI_CERT, certificate);

File: nifi-nar-bundles/nifi-mongodb-bundle/nifi-mongodb-processors/src/main/java/org/apache/nifi/processors/mongodb/PutMongo.java
Patch:
@@ -148,7 +148,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
         final String mode = context.getProperty(MODE).getValue();
         final WriteConcern writeConcern = getWriteConcern(context);
 
-        final MongoCollection<Document> collection = getCollection(context).withWriteConcern(writeConcern);
+        final MongoCollection<Document> collection = getCollection(context, flowFile).withWriteConcern(writeConcern);
 
         try {
             // Read the contents of the FlowFile into a byte array
@@ -176,7 +176,7 @@ public void process(final InputStream in) throws IOException {
                 logger.info("updated {} into MongoDB", new Object[] { flowFile });
             }
 
-            session.getProvenanceReporter().send(flowFile, context.getProperty(URI).getValue());
+            session.getProvenanceReporter().send(flowFile, getURI(context));
             session.transfer(flowFile, REL_SUCCESS);
         } catch (Exception e) {
             logger.error("Failed to insert {} into MongoDB due to {}", new Object[] {flowFile, e}, e);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/integration/accesscontrol/ITConnectionAccessControl.java
Patch:
@@ -358,11 +358,13 @@ private ConnectionEntity createConnection(final String name) throws Exception {
         // create the source connectable
         ConnectableDTO source = new ConnectableDTO();
         source.setId(one.getId());
+        source.setGroupId(one.getComponent().getParentGroupId());
         source.setType(ConnectableType.PROCESSOR.name());
 
         // create the target connectable
         ConnectableDTO target = new ConnectableDTO();
         target.setId(two.getId());
+        target.setGroupId(two.getComponent().getParentGroupId());
         target.setType(ConnectableType.PROCESSOR.name());
 
         // create the relationships

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/NiFiAuthenticationProvider.java
Patch:
@@ -46,6 +46,7 @@ public abstract class NiFiAuthenticationProvider implements AuthenticationProvid
     public NiFiAuthenticationProvider(final NiFiProperties properties, final Authorizer authorizer) {
         this.properties = properties;
         this.mappings = Collections.unmodifiableList(IdentityMappingUtil.getIdentityMappings(properties));
+        this.authorizer = authorizer;
     }
 
     public List<IdentityMapping> getMappings() {

File: nifi-framework-api/src/main/java/org/apache/nifi/controller/status/history/ComponentStatusRepository.java
Patch:
@@ -103,10 +103,12 @@ public interface ComponentStatusRepository {
      * If the date range is large, the total number of data points could be far
      * too many to process. Therefore, this parameter allows the requestor to
      * indicate how many samples to return.
+     * @param includeCounters specifies whether or not metrics from Processor counters
+     * should be included in the StatusHistory.
      * @return a {@link StatusHistory} that provides the status information
      * about the Processor with the given ID during the given time period
      */
-    StatusHistory getProcessorStatusHistory(String processorId, Date start, Date end, int preferredDataPoints);
+    StatusHistory getProcessorStatusHistory(String processorId, Date start, Date end, int preferredDataPoints, boolean includeCounters);
 
     /**
      * @param remoteGroupId to get history of

File: nifi-framework-api/src/main/java/org/apache/nifi/controller/status/history/StatusHistory.java
Patch:
@@ -41,4 +41,5 @@ public interface StatusHistory {
      * @return List of snapshots for a given component
      */
     List<StatusSnapshot> getStatusSnapshots();
+
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/scheduling/EventDrivenSchedulingAgent.java
Patch:
@@ -33,9 +33,9 @@
 import org.apache.nifi.controller.ReportingTaskNode;
 import org.apache.nifi.controller.repository.BatchingSessionFactory;
 import org.apache.nifi.controller.repository.ProcessContext;
-import org.apache.nifi.controller.repository.StandardFlowFileEvent;
 import org.apache.nifi.controller.repository.StandardProcessSession;
 import org.apache.nifi.controller.repository.StandardProcessSessionFactory;
+import org.apache.nifi.controller.repository.metrics.StandardFlowFileEvent;
 import org.apache.nifi.controller.service.ControllerServiceProvider;
 import org.apache.nifi.encrypt.StringEncryptor;
 import org.apache.nifi.engine.FlowEngine;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/tasks/ContinuallyRunProcessorTask.java
Patch:
@@ -25,9 +25,9 @@
 import org.apache.nifi.controller.ProcessorNode;
 import org.apache.nifi.controller.repository.BatchingSessionFactory;
 import org.apache.nifi.controller.repository.ProcessContext;
-import org.apache.nifi.controller.repository.StandardFlowFileEvent;
 import org.apache.nifi.controller.repository.StandardProcessSession;
 import org.apache.nifi.controller.repository.StandardProcessSessionFactory;
+import org.apache.nifi.controller.repository.metrics.StandardFlowFileEvent;
 import org.apache.nifi.controller.scheduling.ProcessContextFactory;
 import org.apache.nifi.controller.scheduling.ScheduleState;
 import org.apache.nifi.controller.scheduling.SchedulingAgent;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/spring/RingBufferEventRepositoryBean.java
Patch:
@@ -16,8 +16,7 @@
  */
 package org.apache.nifi.spring;
 
-import org.apache.nifi.controller.repository.RingBufferEventRepository;
-
+import org.apache.nifi.controller.repository.metrics.RingBufferEventRepository;
 import org.springframework.beans.factory.FactoryBean;
 
 public class RingBufferEventRepositoryBean implements FactoryBean<RingBufferEventRepository> {

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/TailFile.java
Patch:
@@ -689,8 +689,7 @@ private void processTailFile(final ProcessContext context, final ProcessSession
 
         // Check if file has rotated
         if (rolloverOccurred
-                || (timestamp <= file.lastModified() && length > file.length())
-                || (timestamp < file.lastModified() && length >= file.length())) {
+                || (timestamp <= file.lastModified() && length > file.length())) {
 
             // Since file has rotated, we close the reader, create a new one, and then reset our state.
             try {

File: nifi-nar-bundles/nifi-update-attribute-bundle/nifi-update-attribute-processor/src/test/java/org/apache/nifi/update/attributes/TestUpdateAttribute.java
Patch:
@@ -25,7 +25,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.UUID;
-import java.util.regex.PatternSyntaxException;
 
 import org.apache.nifi.components.state.Scope;
 import org.apache.nifi.processor.ProcessSessionFactory;

File: nifi-mock/src/main/java/org/apache/nifi/util/MockProcessSession.java
Patch:
@@ -756,10 +756,10 @@ public void transfer(FlowFile flowFile) {
             throw new IllegalArgumentException("I only accept MockFlowFile");
         }
 
-        // if the flowfile provided was created in this session (i.e. it's in currentVersions),
+        // if the flowfile provided was created in this session (i.e. it's in currentVersions and not in original versions),
         // then throw an exception indicating that you can't transfer flowfiles back to self.
-        // this mimics the behavior of StandardProcessSession
-        if(currentVersions.get(flowFile.getId()) != null) {
+        // this mimics the same behavior in StandardProcessSession
+        if(currentVersions.get(flowFile.getId()) != null && originalVersions.get(flowFile.getId()) == null) {
             throw new IllegalArgumentException("Cannot transfer FlowFiles that are created in this Session back to self");
         }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ControllerServiceResource.java
Patch:
@@ -268,7 +268,7 @@ public Response getPropertyDescriptor(
     @Path("{id}/state")
     @ApiOperation(
             value = "Gets the state for a controller service",
-            response = ComponentStateDTO.class,
+            response = ComponentStateEntity.class,
             authorizations = {
                     @Authorization(value = "Write - /controller-services/{uuid}", type = "")
             }
@@ -323,7 +323,7 @@ public Response getState(
     @Path("{id}/state/clear-requests")
     @ApiOperation(
             value = "Clears the state for a controller service",
-            response = ComponentStateDTO.class,
+            response = ComponentStateEntity.class,
             authorizations = {
                     @Authorization(value = "Write - /controller-services/{uuid}", type = "")
             }
@@ -385,7 +385,7 @@ public Response clearState(
     @Path("{id}/references")
     @ApiOperation(
             value = "Gets a controller service",
-            response = ControllerServiceEntity.class,
+            response = ControllerServiceReferencingComponentsEntity.class,
             authorizations = {
                     @Authorization(value = "Read - /controller-services/{uuid}", type = "")
             }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/FlowFileQueueResource.java
Patch:
@@ -126,6 +126,7 @@ public FlowFileSummaryDTO populateRemainingFlowFileContent(final String connecti
     @Path("{id}/flowfiles/{flowfile-uuid}")
     @ApiOperation(
             value = "Gets a FlowFile from a Connection.",
+            response = FlowFileEntity.class,
             authorizations = {
                     @Authorization(value = "Read Source Data - /data/{component-type}/{uuid}", type = "")
             }
@@ -201,6 +202,7 @@ public Response getFlowFile(
     @Path("{id}/flowfiles/{flowfile-uuid}/content")
     @ApiOperation(
             value = "Gets the content for a FlowFile in a Connection.",
+            response = StreamingOutput.class,
             authorizations = {
                     @Authorization(value = "Read Source Data - /data/{component-type}/{uuid}", type = "")
             }
@@ -429,7 +431,7 @@ public Response getListingRequest(
     @Path("{id}/listing-requests/{listing-request-id}")
     @ApiOperation(
             value = "Cancels and/or removes a request to list the contents of this connection.",
-            response = DropRequestEntity.class,
+            response = ListingRequestEntity.class,
             authorizations = {
                     @Authorization(value = "Read Source Data - /data/{component-type}/{uuid}", type = "")
             }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/FlowResource.java
Patch:
@@ -540,7 +540,6 @@ public Response getReportingTasks() {
     @Path("process-groups/{id}")
     @ApiOperation(
             value = "Schedule or unschedule comopnents in the specified Process Group.",
-            notes = "",
             response = ScheduleComponentsEntity.class,
             authorizations = {
                     @Authorization(value = "Read - /flow", type = ""),
@@ -1547,7 +1546,7 @@ public Response getOutputPortStatus(
     @Path("remote-process-groups/{id}/status")
     @ApiOperation(
             value = "Gets status for a remote process group",
-            response = ProcessorStatusEntity.class,
+            response = RemoteProcessGroupStatusEntity.class,
             authorizations = {
                     @Authorization(value = "Read - /flow", type = "")
             }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java
Patch:
@@ -61,7 +61,6 @@
 import org.apache.nifi.web.api.entity.CopySnippetRequestEntity;
 import org.apache.nifi.web.api.entity.CreateTemplateRequestEntity;
 import org.apache.nifi.web.api.entity.FlowEntity;
-import org.apache.nifi.web.api.entity.FlowSnippetEntity;
 import org.apache.nifi.web.api.entity.FunnelEntity;
 import org.apache.nifi.web.api.entity.FunnelsEntity;
 import org.apache.nifi.web.api.entity.InputPortsEntity;
@@ -519,7 +518,7 @@ public Response createProcessGroup(
     @Path("{id}/process-groups")
     @ApiOperation(
             value = "Gets all process groups",
-            response = ProcessorsEntity.class,
+            response = ProcessGroupsEntity.class,
             authorizations = {
                     @Authorization(value = "Read - /process-groups/{uuid}", type = "")
             }
@@ -1756,7 +1755,7 @@ public Response getConnections(
     @Path("{id}/snippet-instance")
     @ApiOperation(
             value = "Copies a snippet and discards it.",
-            response = FlowSnippetEntity.class,
+            response = FlowEntity.class,
             authorizations = {
                     @Authorization(value = "Write - /process-groups/{uuid}", type = ""),
                     @Authorization(value = "Read - /{component-type}/{uuid} - For each component in the snippet and their descendant components", type = ""),

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessorResource.java
Patch:
@@ -276,7 +276,7 @@ public Response getPropertyDescriptor(
     @Path("/{id}/state")
     @ApiOperation(
             value = "Gets the state for a processor",
-            response = ComponentStateDTO.class,
+            response = ComponentStateEntity.class,
             authorizations = {
                     @Authorization(value = "Write - /processors/{uuid}", type = "")
             }
@@ -332,7 +332,7 @@ public Response getState(
     @Path("{id}/state/clear-requests")
     @ApiOperation(
             value = "Clears the state for a processor",
-            response = ComponentStateDTO.class,
+            response = ComponentStateEntity.class,
             authorizations = {
                     @Authorization(value = "Write - /processors/{uuid}", type = "")
             }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProvenanceEventResource.java
Patch:
@@ -79,6 +79,7 @@ public class ProvenanceEventResource extends ApplicationResource {
     @Path("{id}/content/input")
     @ApiOperation(
             value = "Gets the input content for a provenance event",
+            response = StreamingOutput.class,
             authorizations = {
                     @Authorization(value = "Read Component Data - /data/{component-type}/{uuid}", type = "")
             }
@@ -161,6 +162,7 @@ public void write(OutputStream output) throws IOException, WebApplicationExcepti
     @Path("{id}/content/output")
     @ApiOperation(
             value = "Gets the output content for a provenance event",
+            response = StreamingOutput.class,
             authorizations = {
                     @Authorization(value = "Read Component Data - /data/{component-type}/{uuid}", type = "")
             }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ReportingTaskResource.java
Patch:
@@ -255,7 +255,7 @@ public Response getPropertyDescriptor(
     @Path("{id}/state")
     @ApiOperation(
             value = "Gets the state for a reporting task",
-            response = ComponentStateDTO.class,
+            response = ComponentStateEntity.class,
             authorizations = {
                     @Authorization(value = "Write - /reporting-tasks/{uuid}", type = "")
             }
@@ -310,7 +310,7 @@ public Response getState(
     @Path("{id}/state/clear-requests")
     @ApiOperation(
             value = "Clears the state for a reporting task",
-            response = ComponentStateDTO.class,
+            response = ComponentStateEntity.class,
             authorizations = {
                     @Authorization(value = "Write - /reporting-tasks/{uuid}", type = "")
             }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/TemplateResource.java
Patch:
@@ -95,7 +95,7 @@ public TemplateDTO populateRemainingTemplateContent(TemplateDTO template) {
     @Path("{id}/download")
     @ApiOperation(
             value = "Exports a template",
-            response = TemplateDTO.class,
+            response = String.class,
             authorizations = {
                     @Authorization(value = "Read - /templates/{uuid}", type = "")
             }

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/PutSQL.java
Patch:
@@ -456,8 +456,8 @@ private ExceptionHandler.OnError<FunctionContext, StatementFlowFileEnclosure> on
                     }
                 }
 
-                getLogger().error("Failed to update database due to a failed batch update. There were a total of {} FlowFiles that failed, {} that succeeded, "
-                        + "and {} that were not execute and will be routed to retry; ", new Object[]{failureCount, successCount, retryCount});
+                getLogger().error("Failed to update database due to a failed batch update, {}. There were a total of {} FlowFiles that failed, {} that succeeded, "
+                        + "and {} that were not execute and will be routed to retry; ", new Object[]{e, failureCount, successCount, retryCount}, e);
 
                 return;
 

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/serialization/SchemaRegistryService.java
Patch:
@@ -51,6 +51,7 @@
 import static org.apache.nifi.schema.access.SchemaAccessUtils.SCHEMA_REGISTRY;
 import static org.apache.nifi.schema.access.SchemaAccessUtils.SCHEMA_TEXT;
 import static org.apache.nifi.schema.access.SchemaAccessUtils.SCHEMA_TEXT_PROPERTY;
+import static org.apache.nifi.schema.access.SchemaAccessUtils.CONFLUENT_ENCODED_SCHEMA;
 
 public abstract class SchemaRegistryService extends AbstractControllerService {
 
@@ -59,7 +60,7 @@ public abstract class SchemaRegistryService extends AbstractControllerService {
     private static final InputStream EMPTY_INPUT_STREAM = new ByteArrayInputStream(new byte[0]);
 
     private final List<AllowableValue> strategyList = Collections.unmodifiableList(Arrays.asList(
-        SCHEMA_NAME_PROPERTY, SCHEMA_TEXT_PROPERTY, HWX_SCHEMA_REF_ATTRIBUTES, HWX_CONTENT_ENCODED_SCHEMA));
+        SCHEMA_NAME_PROPERTY, SCHEMA_TEXT_PROPERTY, HWX_SCHEMA_REF_ATTRIBUTES, HWX_CONTENT_ENCODED_SCHEMA, CONFLUENT_ENCODED_SCHEMA));
 
     protected PropertyDescriptor getSchemaAcessStrategyDescriptor() {
         return getPropertyDescriptor(SCHEMA_ACCESS_STRATEGY.getName());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/provenance/lineage/LineageRequestDTO.java
Patch:
@@ -47,7 +47,8 @@ public enum LineageRequestType {
      * @return event id that was used to generate this lineage
      */
     @ApiModelProperty(
-            value = ""
+            value = "The event id that was used to generate this lineage, if applicable. The event id is allowed for any type of lineageRequestType. If the lineageRequestType is FLOWFILE and the "
+                    + "flowfile uuid is also included in the request, the event id will be ignored."
     )
     public Long getEventId() {
         return eventId;
@@ -90,7 +91,7 @@ public void setClusterNodeId(String clusterNodeId) {
      * @return uuid that was used to generate this lineage
      */
     @ApiModelProperty(
-            value = "The uuid that was used to generate the lineage."
+            value = "The flowfile uuid that was used to generate the lineage. The flowfile uuid is only allowed when the lineageRequestType is FLOWFILE and will take precedence over event id."
     )
     public String getUuid() {
         return uuid;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProvenanceResource.java
Patch:
@@ -485,7 +485,7 @@ public Response submitLineageRequest(
                 }
                 break;
             case FLOWFILE:
-                // ensure the uuid has been specified
+                // ensure the uuid or event id has been specified
                 if (requestDto.getUuid() == null && requestDto.getEventId() == null) {
                     throw new IllegalArgumentException("The flowfile uuid or event id must be specified when the event type is FLOWFILE.");
                 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java
Patch:
@@ -2432,6 +2432,7 @@ public LineageDTO createLineageDto(final ComputeLineageSubmission computeLineage
                 if (uuids.size() == 1) {
                     requestDto.setUuid(uuids.iterator().next());
                 }
+                requestDto.setEventId(computeLineageSubmission.getExpandedEventId());
                 requestDto.setLineageRequestType(LineageRequestType.FLOWFILE);
                 break;
         }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/controller/ControllerFacade.java
Patch:
@@ -1105,12 +1105,12 @@ public LineageDTO submitLineage(LineageDTO lineageDto) {
         final ProvenanceRepository provenanceRepository = flowController.getProvenanceRepository();
         final ComputeLineageSubmission result;
 
-        // submit the event
         if (LineageRequestType.FLOWFILE.equals(requestDto.getLineageRequestType())) {
-            // submit uuid
-            if (requestDto.getEventId() == null) {
+            if (requestDto.getUuid() != null) {
+                // submit uuid if it is specified
                 result = provenanceRepository.submitLineageComputation(requestDto.getUuid(), NiFiUserUtils.getNiFiUser());
             } else {
+                // submit the event if the flowfile uuid needs to be looked up
                 result = provenanceRepository.submitLineageComputation(requestDto.getEventId(), NiFiUserUtils.getNiFiUser());
             }
         } else {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/replication/ThreadPoolRequestReplicator.java
Patch:
@@ -822,7 +822,7 @@ public void run() {
                 nodeResponse = replicateRequest(resourceBuilder, nodeId, method, uri, requestId, headers, clusterResponse);
             } catch (final Exception e) {
                 nodeResponse = new NodeResponse(nodeId, method, uri, e);
-                logger.warn("Failed to replicate request {} {} to {} due to {}", method, uri.getPath(), nodeId, e);
+                logger.warn("Failed to replicate request {} {} to {} due to {}", method, uri.getPath(), nodeId, e.toString());
                 logger.warn("", e);
             }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/AccessResource.java
Patch:
@@ -122,7 +122,7 @@ public Response getLoginConfig(@Context HttpServletRequest httpServletRequest) {
         entity.setConfig(accessConfiguration);
 
         // generate the response
-        return clusterContext(generateOkResponse(entity)).build();
+        return generateOkResponse(entity).build();
     }
 
     /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ConnectionResource.java
Patch:
@@ -143,7 +143,7 @@ public Response getConnection(
         populateRemainingConnectionEntityContent(entity);
 
         // generate the response
-        return clusterContext(generateOkResponse(entity)).build();
+        return generateOkResponse(entity).build();
     }
 
     /**
@@ -272,7 +272,7 @@ public Response updateConnection(
                     populateRemainingConnectionEntityContent(entity);
 
                     // generate the response
-                    return clusterContext(generateOkResponse(entity)).build();
+                    return generateOkResponse(entity).build();
                 });
     }
 
@@ -358,7 +358,7 @@ public Response deleteConnection(
                     final ConnectionEntity entity = serviceFacade.deleteConnection(revision, connectionEntity.getId());
 
                     // generate the response
-                    return clusterContext(generateOkResponse(entity)).build();
+                    return generateOkResponse(entity).build();
                 }
         );
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/CountersResource.java
Patch:
@@ -205,7 +205,7 @@ public Response getCounters(
         entity.setCounters(countersReport);
 
         // generate the response
-        return clusterContext(generateOkResponse(entity)).build();
+        return generateOkResponse(entity).build();
     }
 
     /**
@@ -266,7 +266,7 @@ public Response updateCounter(
                     entity.setCounter(counter);
 
                     // generate the response
-                    return clusterContext(generateOkResponse(entity)).build();
+                    return generateOkResponse(entity).build();
                 }
         );
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/FunnelResource.java
Patch:
@@ -135,7 +135,7 @@ public Response getFunnel(
         final FunnelEntity entity = serviceFacade.getFunnel(id);
         populateRemainingFunnelEntityContent(entity);
 
-        return clusterContext(generateOkResponse(entity)).build();
+        return generateOkResponse(entity).build();
     }
 
     /**
@@ -220,7 +220,7 @@ public Response updateFunnel(
                     final FunnelEntity entity = serviceFacade.updateFunnel(revision, funnelEntity.getComponent());
                     populateRemainingFunnelEntityContent(entity);
 
-                    return clusterContext(generateOkResponse(entity)).build();
+                    return generateOkResponse(entity).build();
                 }
         );
     }
@@ -302,7 +302,7 @@ public Response removeFunnel(
                 (revision, funnelEntity) -> {
                     // delete the specified funnel
                     final FunnelEntity entity = serviceFacade.deleteFunnel(revision, funnelEntity.getId());
-                    return clusterContext(generateOkResponse(entity)).build();
+                    return generateOkResponse(entity).build();
                 }
         );
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/InputPortResource.java
Patch:
@@ -135,7 +135,7 @@ public Response getInputPort(
         final PortEntity entity = serviceFacade.getInputPort(id);
         populateRemainingInputPortEntityContent(entity);
 
-        return clusterContext(generateOkResponse(entity)).build();
+        return generateOkResponse(entity).build();
     }
 
     /**
@@ -222,7 +222,7 @@ public Response updateInputPort(
                     final PortEntity entity = serviceFacade.updateInputPort(revision, portDTO);
                     populateRemainingInputPortEntityContent(entity);
 
-                    return clusterContext(generateOkResponse(entity)).build();
+                    return generateOkResponse(entity).build();
                 }
         );
     }
@@ -301,7 +301,7 @@ public Response removeInputPort(
                 (revision, portEntity) -> {
                     // delete the specified input port
                     final PortEntity entity = serviceFacade.deleteInputPort(revision, portEntity.getId());
-                    return clusterContext(generateOkResponse(entity)).build();
+                    return generateOkResponse(entity).build();
                 }
         );
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/LabelResource.java
Patch:
@@ -135,7 +135,7 @@ public Response getLabel(
         final LabelEntity entity = serviceFacade.getLabel(id);
         populateRemainingLabelEntityContent(entity);
 
-        return clusterContext(generateOkResponse(entity)).build();
+        return generateOkResponse(entity).build();
     }
 
     /**
@@ -222,7 +222,7 @@ public Response updateLabel(
                     final LabelEntity entity = serviceFacade.updateLabel(revision, labelDTO);
                     populateRemainingLabelEntityContent(entity);
 
-                    return clusterContext(generateOkResponse(entity)).build();
+                    return generateOkResponse(entity).build();
                 }
         );
     }
@@ -301,7 +301,7 @@ public Response removeLabel(
                 (revision, labelEntity) -> {
                     // delete the specified label
                     final LabelEntity entity = serviceFacade.deleteLabel(revision, labelEntity.getId());
-                    return clusterContext(generateOkResponse(entity)).build();
+                    return generateOkResponse(entity).build();
                 }
         );
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/OutputPortResource.java
Patch:
@@ -135,7 +135,7 @@ public Response getOutputPort(
         final PortEntity entity = serviceFacade.getOutputPort(id);
         populateRemainingOutputPortEntityContent(entity);
 
-        return clusterContext(generateOkResponse(entity)).build();
+        return generateOkResponse(entity).build();
     }
 
     /**
@@ -222,7 +222,7 @@ public Response updateOutputPort(
                     final PortEntity entity = serviceFacade.updateOutputPort(revision, portDTO);
                     populateRemainingOutputPortEntityContent(entity);
 
-                    return clusterContext(generateOkResponse(entity)).build();
+                    return generateOkResponse(entity).build();
                 }
         );
     }
@@ -301,7 +301,7 @@ public Response removeOutputPort(
                 (revision, portEntity) -> {
                     // delete the specified output port
                     final PortEntity entity = serviceFacade.deleteOutputPort(revision, portEntity.getId());
-                    return clusterContext(generateOkResponse(entity)).build();
+                    return generateOkResponse(entity).build();
                 }
         );
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProvenanceEventResource.java
Patch:
@@ -300,7 +300,7 @@ public Response getProvenanceEvent(
         entity.setProvenanceEvent(event);
 
         // generate the response
-        return clusterContext(generateOkResponse(entity)).build();
+        return generateOkResponse(entity).build();
     }
 
     /**
@@ -376,7 +376,7 @@ public Response submitReplay(
 
         // generate the response
         URI uri = URI.create(generateResourceUri("provenance-events", event.getId()));
-        return clusterContext(generateCreatedResponse(uri, entity)).build();
+        return generateCreatedResponse(uri, entity).build();
     }
 
     // setters

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ResourceResource.java
Patch:
@@ -123,7 +123,7 @@ public Response getResources() {
         entity.setResources(resources);
 
         // generate the response
-        return clusterContext(generateOkResponse(entity)).build();
+        return generateOkResponse(entity).build();
     }
 
     // setters

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/SiteToSiteResource.java
Patch:
@@ -173,7 +173,7 @@ public Response getSiteToSiteDetails(@Context HttpServletRequest req) {
         }
 
         // generate the response
-        return clusterContext(noCache(Response.ok(entity))).build();
+        return noCache(Response.ok(entity)).build();
     }
 
     /**
@@ -263,7 +263,7 @@ public Response getPeers(@Context HttpServletRequest req) {
         final PeersEntity entity = new PeersEntity();
         entity.setPeers(peers);
 
-        return clusterContext(noCache(setCommonHeaders(Response.ok(entity), transportProtocolVersion, transactionManager))).build();
+        return noCache(setCommonHeaders(Response.ok(entity), transportProtocolVersion, transactionManager)).build();
     }
 
     // setters

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/SnippetResource.java
Patch:
@@ -199,7 +199,7 @@ public Response createSnippet(
                     populateRemainingSnippetEntityContent(entity);
 
                     // build the response
-                    return clusterContext(generateCreatedResponse(URI.create(entity.getSnippet().getUri()), entity)).build();
+                    return generateCreatedResponse(URI.create(entity.getSnippet().getUri()), entity).build();
                 }
         );
     }
@@ -281,7 +281,7 @@ public Response updateSnippet(
                     // update the snippet
                     final SnippetEntity entity = serviceFacade.updateSnippet(revisions, snippetEntity.getSnippet());
                     populateRemainingSnippetEntityContent(entity);
-                    return clusterContext(generateOkResponse(entity)).build();
+                    return generateOkResponse(entity).build();
                 }
         );
     }
@@ -347,7 +347,7 @@ public Response deleteSnippet(
                 (revisions, entity) -> {
                     // delete the specified snippet
                     final SnippetEntity snippetEntity = serviceFacade.deleteSnippet(revisions, entity.getId());
-                    return clusterContext(generateOkResponse(snippetEntity)).build();
+                    return generateOkResponse(snippetEntity).build();
                 }
         );
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/SystemDiagnosticsResource.java
Patch:
@@ -165,7 +165,7 @@ public Response getSystemDiagnostics(
         entity.setSystemDiagnostics(systemDiagnosticsDto);
 
         // generate the response
-        return clusterContext(generateOkResponse(entity)).build();
+        return generateOkResponse(entity).build();
     }
 
     // setters

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/TemplateResource.java
Patch:
@@ -213,7 +213,7 @@ public Response removeTemplate(
                     // build the response entity
                     final TemplateEntity entity = new TemplateEntity();
 
-                    return clusterContext(generateOkResponse(entity)).build();
+                    return generateOkResponse(entity).build();
                 }
         );
     }

File: nifi-framework-api/src/main/java/org/apache/nifi/authorization/AuthorizerConfigurationContext.java
Patch:
@@ -42,9 +42,7 @@ public interface AuthorizerConfigurationContext {
 
     /**
      * @param property to lookup the descriptor and value of
-     * @return the value the component currently understands for the given
-     * PropertyDescriptor. This method does not substitute default
-     * PropertyDescriptor values, so the value returned will be null if not set
+     * @return the value the component currently understands for the given PropertyDescriptor
      */
     PropertyValue getProperty(String property);
 }

File: nifi-framework-api/src/main/java/org/apache/nifi/authorization/resource/Authorizable.java
Patch:
@@ -84,6 +84,7 @@ default AuthorizationResult checkAuthorization(Authorizer authorizer, RequestAct
         final Resource resource = getResource();
         final AuthorizationRequest request = new AuthorizationRequest.Builder()
                 .identity(user.getIdentity())
+                .groups(user.getGroups())
                 .anonymous(user.isAnonymous())
                 .accessAttempt(false)
                 .action(action)
@@ -188,6 +189,7 @@ default void authorize(Authorizer authorizer, RequestAction action, NiFiUser use
         final Resource resource = getResource();
         final AuthorizationRequest request = new AuthorizationRequest.Builder()
                 .identity(user.getIdentity())
+                .groups(user.getGroups())
                 .anonymous(user.isAnonymous())
                 .accessAttempt(true)
                 .action(action)

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/AccessPolicyEntity.java
Patch:
@@ -28,7 +28,7 @@
  * A serialized representation of this class can be placed in the entity body of a request or response to or from the API. This particular entity holds a reference to an {@link AccessPolicyDTO}.
  */
 @XmlRootElement(name = "accessPolicyEntity")
-public class AccessPolicyEntity extends ComponentEntity {
+public class AccessPolicyEntity extends ComponentEntity implements Permissible<AccessPolicyDTO> {
 
     private Date generated;
     private AccessPolicyDTO component;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/TenantsEntity.java
Patch:
@@ -24,7 +24,7 @@
  * TenantEntity objects.
  */
 @XmlRootElement(name = "tenantsEntity")
-public class TenantsEntity {
+public class TenantsEntity extends Entity {
 
     private Collection<TenantEntity> users;
     private Collection<TenantEntity> userGroups;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/UserEntity.java
Patch:
@@ -24,7 +24,7 @@
  * A serialized representation of this class can be placed in the entity body of a request or response to or from the API. This particular entity holds a reference to a UserDTO.
  */
 @XmlRootElement(name = "userEntity")
-public class UserEntity extends ComponentEntity {
+public class UserEntity extends ComponentEntity implements Permissible<UserDTO> {
 
     private UserDTO component;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/UserGroupEntity.java
Patch:
@@ -16,14 +16,15 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import javax.xml.bind.annotation.XmlRootElement;
 import org.apache.nifi.web.api.dto.UserGroupDTO;
 
+import javax.xml.bind.annotation.XmlRootElement;
+
 /**
  * A serialized representation of this class can be placed in the entity body of a request or response to or from the API. This particular entity holds a reference to a UserGroupDTO.
  */
 @XmlRootElement(name = "userGroupEntity")
-public class UserGroupEntity extends ComponentEntity {
+public class UserGroupEntity extends ComponentEntity implements Permissible<UserGroupDTO> {
 
     private UserGroupDTO component;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/UserGroupsEntity.java
Patch:
@@ -24,7 +24,7 @@
  * UserGroupEntity objects.
  */
 @XmlRootElement(name = "userGroupsEntity")
-public class UserGroupsEntity {
+public class UserGroupsEntity extends Entity {
 
     private Collection<UserGroupEntity> userGroups;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/cluster/protocol/DataFlow.java
Patch:
@@ -32,7 +32,7 @@ public interface DataFlow {
 
     /**
      * @return the raw byte array of the Authorizer's fingerprint,
-     *              null when not using a sub-class of AbstractPolicyBasedAuthorizer
+     *              null when not using a ManagedAuthorizer
      */
     public byte[] getAuthorizerFingerprint();
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiServiceFacade.java
Patch:
@@ -2559,6 +2559,7 @@ private boolean isUserAuthorized(final NiFiUser user, final RootGroupPort port)
         final AuthorizationRequest request = new AuthorizationRequest.Builder()
                 .resource(ResourceFactory.getDataTransferResource(port.getResource()))
                 .identity(user.getIdentity())
+                .groups(user.getGroups())
                 .anonymous(user.isAnonymous())
                 .accessAttempt(false)
                 .action(RequestAction.WRITE)

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ControllerResource.java
Patch:
@@ -110,6 +110,7 @@ private void authorizeController(final RequestAction action) {
         final AuthorizationRequest request = new AuthorizationRequest.Builder()
                 .resource(ResourceFactory.getControllerResource())
                 .identity(user.getIdentity())
+                .groups(user.getGroups())
                 .anonymous(user.isAnonymous())
                 .accessAttempt(true)
                 .action(action)

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/CountersResource.java
Patch:
@@ -94,6 +94,7 @@ private void authorizeCounters(final RequestAction action) {
         final AuthorizationRequest request = new AuthorizationRequest.Builder()
                 .resource(ResourceFactory.getCountersResource())
                 .identity(user.getIdentity())
+                .groups(user.getGroups())
                 .anonymous(user.isAnonymous())
                 .accessAttempt(true)
                 .action(action)

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/FlowResource.java
Patch:
@@ -217,6 +217,7 @@ private void authorizeFlow() {
         final AuthorizationRequest request = new AuthorizationRequest.Builder()
                 .resource(ResourceFactory.getFlowResource())
                 .identity(user.getIdentity())
+                .groups(user.getGroups())
                 .anonymous(user.isAnonymous())
                 .accessAttempt(true)
                 .action(RequestAction.READ)
@@ -2236,6 +2237,7 @@ public Response getComponentHistory(
             final AuthorizationRequest request = new AuthorizationRequest.Builder()
                     .resource(ResourceFactory.getControllerResource())
                     .identity(user.getIdentity())
+                    .groups(user.getGroups())
                     .anonymous(user.isAnonymous())
                     .accessAttempt(true)
                     .action(RequestAction.READ)

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProvenanceResource.java
Patch:
@@ -114,6 +114,7 @@ private void authorizeProvenanceRequest() {
         final AuthorizationRequest request = new AuthorizationRequest.Builder()
                 .resource(ResourceFactory.getProvenanceResource())
                 .identity(user.getIdentity())
+                .groups(user.getGroups())
                 .anonymous(user.isAnonymous())
                 .accessAttempt(true)
                 .action(RequestAction.READ)

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ResourceResource.java
Patch:
@@ -74,6 +74,7 @@ private void authorizeResource() {
         final AuthorizationRequest request = new AuthorizationRequest.Builder()
                 .resource(ResourceFactory.getResourceResource())
                 .identity(user.getIdentity())
+                .groups(user.getGroups())
                 .anonymous(user.isAnonymous())
                 .accessAttempt(true)
                 .action(RequestAction.READ)

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/SiteToSiteResource.java
Patch:
@@ -112,6 +112,7 @@ protected void authorizeSiteToSite() {
         final AuthorizationRequest request = new AuthorizationRequest.Builder()
                 .resource(ResourceFactory.getSiteToSiteResource())
                 .identity(user.getIdentity())
+                .groups(user.getGroups())
                 .anonymous(user.isAnonymous())
                 .accessAttempt(true)
                 .action(RequestAction.READ)

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/SystemDiagnosticsResource.java
Patch:
@@ -77,6 +77,7 @@ private void authorizeSystem() {
         final AuthorizationRequest request = new AuthorizationRequest.Builder()
                 .resource(ResourceFactory.getSystemResource())
                 .identity(user.getIdentity())
+                .groups(user.getGroups())
                 .anonymous(user.isAnonymous())
                 .accessAttempt(true)
                 .action(RequestAction.READ)

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/config/AccessDeniedExceptionMapper.java
Patch:
@@ -55,7 +55,7 @@ public Response toResponse(AccessDeniedException exception) {
         if (user == null) {
             identity = "<no user found>";
         } else {
-            identity = user.getIdentity();
+            identity = user.toString();
         }
 
         logger.info(String.format("%s does not have permission to access the requested resource. %s Returning %s response.", identity, exception.getMessage(), status));

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/AccessPolicyDAO.java
Patch:
@@ -23,7 +23,9 @@
 
 public interface AccessPolicyDAO {
 
-    String MSG_NON_ABSTRACT_POLICY_BASED_AUTHORIZER = "This NiFi is not configured to internally manage users, groups, and policies.  Please contact your system administrator.";
+    String MSG_NON_MANAGED_AUTHORIZER = "This NiFi is not configured to internally manage users, groups, or policies.  Please contact your system administrator.";
+    String MSG_NON_CONFIGURABLE_POLICIES = "This NiFi is not configured to allow configurable policies. Please contact your system administrator.";
+    String MSG_NON_CONFIGURABLE_USERS = "This NiFi is not configured to allow configurable users and groups. Please contact your system administrator.";
 
     /**
      * Whether or not NiFi supports a configurable authorizer.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/audit/TestRemoteProcessGroupAuditor.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.nifi.admin.service.AuditService;
 import org.apache.nifi.authorization.user.NiFiUser;
 import org.apache.nifi.authorization.user.NiFiUserDetails;
-import org.apache.nifi.authorization.user.StandardNiFiUser;
+import org.apache.nifi.authorization.user.StandardNiFiUser.Builder;
 import org.apache.nifi.groups.RemoteProcessGroup;
 import org.apache.nifi.remote.RemoteGroupPort;
 import org.apache.nifi.remote.protocol.SiteToSiteTransportProtocol;
@@ -62,7 +62,7 @@ public void setup() {
         final SecurityContext securityContext = SecurityContextHolder.getContext();
         final Authentication authentication = mock(Authentication.class);
         securityContext.setAuthentication(authentication);
-        final NiFiUser user = new StandardNiFiUser("user-id");
+        final NiFiUser user = new Builder().identity("user-id").build();
         final NiFiUserDetails userDetail = new NiFiUserDetails(user);
         when(authentication.getPrincipal()).thenReturn(userDetail);
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/test/java/org/apache/nifi/web/security/otp/OtpAuthenticationProviderTest.java
Patch:
@@ -16,12 +16,12 @@
  */
 package org.apache.nifi.web.security.otp;
 
+import org.apache.nifi.authorization.Authorizer;
 import org.apache.nifi.authorization.user.NiFiUserDetails;
 import org.apache.nifi.util.NiFiProperties;
 import org.apache.nifi.web.security.token.NiFiAuthenticationToken;
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.Mockito;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 
@@ -75,7 +75,7 @@ public String answer(InvocationOnMock invocation) throws Throwable {
             }
         }).when(otpService).getAuthenticationFromUiExtensionToken(anyString());
 
-        otpAuthenticationProvider = new OtpAuthenticationProvider(otpService, Mockito.mock(NiFiProperties.class));
+        otpAuthenticationProvider = new OtpAuthenticationProvider(otpService, mock(NiFiProperties.class), mock(Authorizer.class));
     }
 
     @Test

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/QueryRecord.java
Patch:
@@ -472,7 +472,7 @@ protected QueryResult query(final ProcessSession session, final FlowFile flowFil
         final RecordReaderFactory recordParserFactory) throws SQLException {
 
         final Properties properties = new Properties();
-        properties.put(CalciteConnectionProperty.LEX.camelName(), Lex.JAVA.name());
+        properties.put(CalciteConnectionProperty.LEX.camelName(), Lex.MYSQL_ANSI.name());
 
         Connection connection = null;
         ResultSet resultSet = null;

File: nifi-nar-bundles/nifi-site-to-site-reporting-bundle/nifi-site-to-site-reporting-task/src/main/java/org/apache/nifi/reporting/SiteToSiteProvenanceReportingTask.java
Patch:
@@ -92,7 +92,7 @@ public class SiteToSiteProvenanceReportingTask extends AbstractSiteToSiteReporti
         .name("s2s-prov-task-event-filter")
         .displayName("Event Type")
         .description("Comma-separated list of event types that will be used to filter the provenance events sent by the reporting task. "
-                + "Available event types are " + ProvenanceEventType.values() + ". If no filter is set, all the events are sent. If "
+                + "Available event types are " + Arrays.deepToString(ProvenanceEventType.values()) + ". If no filter is set, all the events are sent. If "
                         + "multiple filters are set, the filters are cumulative.")
         .required(false)
         .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)

File: nifi-nar-bundles/nifi-standard-services/nifi-lookup-services-bundle/nifi-lookup-services/src/main/java/org/apache/nifi/lookup/SimpleCsvFileLookupService.java
Patch:
@@ -52,7 +52,7 @@
 import org.apache.nifi.util.file.monitor.SynchronousFileWatcher;
 
 @Tags({"lookup", "cache", "enrich", "join", "csv", "reloadable", "key", "value"})
-@CapabilityDescription("A reloadable properties file-based lookup service")
+@CapabilityDescription("A reloadable CSV file-based lookup service")
 public class SimpleCsvFileLookupService extends AbstractControllerService implements StringLookupService {
 
     private static final String KEY = "key";

File: nifi-nar-bundles/nifi-standard-services/nifi-lookup-services-bundle/nifi-lookup-services/src/main/java/org/apache/nifi/lookup/SimpleKeyValueLookupService.java
Patch:
@@ -54,7 +54,7 @@ protected PropertyDescriptor getSupportedDynamicPropertyDescriptor(final String
     @OnEnabled
     public void cacheConfiguredValues(final ConfigurationContext context) {
         lookupValues = context.getProperties().entrySet().stream()
-            .collect(Collectors.toMap(entry -> entry.getKey().getName(), entry -> context.getProperty(entry.getKey()).getValue()));
+            .collect(Collectors.toMap(entry -> entry.getKey().getName(), entry -> context.getProperty(entry.getKey()).evaluateAttributeExpressions().getValue()));
     }
 
     @Override

File: nifi-nar-bundles/nifi-standard-services/nifi-lookup-services-bundle/nifi-lookup-services/src/test/java/org/apache/nifi/lookup/TestPropertiesFileLookupService.java
Patch:
@@ -34,7 +34,7 @@ public class TestPropertiesFileLookupService {
     final static Optional<String> EMPTY_STRING = Optional.empty();
 
     @Test
-    public void testPropertiesFileLookupService() throws InitializationException {
+    public void testPropertiesFileLookupService() throws InitializationException, LookupFailureException {
         final TestRunner runner = TestRunners.newTestRunner(TestProcessor.class);
         final PropertiesFileLookupService service = new PropertiesFileLookupService();
 

File: nifi-nar-bundles/nifi-standard-services/nifi-lookup-services-bundle/nifi-lookup-services/src/test/java/org/apache/nifi/lookup/TestXMLFileLookupService.java
Patch:
@@ -34,7 +34,7 @@ public class TestXMLFileLookupService {
     final static Optional<String> EMPTY_STRING = Optional.empty();
 
     @Test
-    public void testXMLFileLookupService() throws InitializationException {
+    public void testXMLFileLookupService() throws InitializationException, LookupFailureException {
         final TestRunner runner = TestRunners.newTestRunner(TestProcessor.class);
         final XMLFileLookupService service = new XMLFileLookupService();
 

File: nifi-nar-bundles/nifi-email-bundle/nifi-email-processors/src/main/java/org/apache/nifi/processors/email/ConsumeIMAP.java
Patch:
@@ -70,6 +70,7 @@ protected ImapMailReceiver buildMessageReceiver(ProcessContext processContext) {
         ImapMailReceiver receiver = new ImapMailReceiver(this.buildUrl(processContext));
         boolean shouldMarkAsRead = processContext.getProperty(SHOULD_MARK_READ).asBoolean();
         receiver.setShouldMarkMessagesAsRead(shouldMarkAsRead);
+        receiver.setShouldDeleteMessages(processContext.getProperty(AbstractEmailProcessor.SHOULD_DELETE_MESSAGES).asBoolean());
         return receiver;
     }
 

File: nifi-nar-bundles/nifi-email-bundle/nifi-email-processors/src/main/java/org/apache/nifi/processors/email/ConsumePOP3.java
Patch:
@@ -55,7 +55,9 @@ protected String getProtocol(ProcessContext processContext) {
      */
     @Override
     protected Pop3MailReceiver buildMessageReceiver(ProcessContext context) {
-        return new Pop3MailReceiver(this.buildUrl(context));
+        final Pop3MailReceiver receiver = new Pop3MailReceiver(this.buildUrl(context));
+        receiver.setShouldDeleteMessages(context.getProperty(AbstractEmailProcessor.SHOULD_DELETE_MESSAGES).asBoolean());
+        return receiver;
     }
 
     /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/repository/StandardProcessSession.java
Patch:
@@ -1883,12 +1883,12 @@ public void transfer(Collection<FlowFile> flowFiles, final Relationship relation
             record.setTransferRelationship(relationship);
             updateLastQueuedDate(record);
 
-            contentSize += flowFile.getSize() * multiplier;
+            contentSize += flowFile.getSize();
         }
 
         if (autoTerminated) {
             removedCount += multiplier * flowFiles.size();
-            removedBytes += contentSize;
+            removedBytes += multiplier * contentSize;
         } else if (!selfRelationship) {
             flowFilesOut += multiplier * flowFiles.size();
             contentSizeOut += multiplier * contentSize;

File: nifi-nar-bundles/nifi-standard-services/nifi-hbase_1_1_2-client-service-bundle/nifi-hbase_1_1_2-client-service/src/main/java/org/apache/nifi/hbase/HBase_1_1_2_ClientMapCacheService.java
Patch:
@@ -19,6 +19,7 @@
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.List;
 
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
@@ -229,7 +230,7 @@ private class HBaseRowHandler implements ResultHandler {
         public void handle(byte[] row, ResultCell[] resultCells) {
             numRows += 1;
             for( final ResultCell resultCell : resultCells ){
-                lastResultBytes = resultCell.getValueArray();
+                lastResultBytes = Arrays.copyOfRange(resultCell.getValueArray(), resultCell.getValueOffset(), resultCell.getValueLength() + resultCell.getValueOffset());
             }
         }
         public int numRows() {

File: nifi-nar-bundles/nifi-site-to-site-reporting-bundle/nifi-site-to-site-reporting-task/src/main/java/org/apache/nifi/reporting/SiteToSiteProvenanceReportingTask.java
Patch:
@@ -212,6 +212,7 @@ public void onTrigger(final ReportingContext context) {
                 final Map<String, String> attributes = new HashMap<>();
                 final String transactionId = UUID.randomUUID().toString();
                 attributes.put("reporting.task.transaction.id", transactionId);
+                attributes.put("mime.type", "application/json");
 
                 final byte[] data = jsonArray.toString().getBytes(StandardCharsets.UTF_8);
                 transaction.send(data, attributes);

File: nifi-nar-bundles/nifi-hive-bundle/nifi-hive-processors/src/test/java/org/apache/nifi/dbcp/hive/HiveConnectionPoolTest.java
Patch:
@@ -133,5 +133,6 @@ public void testExpressionLanguageSupport() throws Exception {
         assertEquals(PASS, basicDataSource.getPassword());
         assertEquals(MAX_CONN, basicDataSource.getMaxActive());
         assertEquals(10000L, basicDataSource.getMaxWait());
+        assertEquals(URL, hiveConnectionPool.getConnectionURL());
     }
 }

File: nifi-nar-bundles/nifi-provenance-repository-bundle/nifi-persistent-provenance-repository/src/test/java/org/apache/nifi/provenance/TestPersistentProvenanceRepository.java
Patch:
@@ -393,8 +393,9 @@ public void testAddAndRecover() throws IOException, InterruptedException {
         repo.initialize(getEventReporter(), null, null, IdentifierLookup.EMPTY);
         final List<ProvenanceEventRecord> recoveredRecords = repo.getEvents(0L, 12);
 
-        assertEquals(10, recoveredRecords.size());
-        for (int i = 0; i < 10; i++) {
+        //just test however many were actually recovered since it is timing sensitive
+        final int numRecovered = recoveredRecords.size();
+        for (int i = 0; i < numRecovered; i++) {
             final ProvenanceEventRecord recovered = recoveredRecords.get(i);
             assertEquals(i, recovered.getEventId());
             assertEquals("nifi://unit-test", recovered.getTransitUri());

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/csv/CSVUtils.java
Patch:
@@ -70,7 +70,7 @@ public class CSVUtils {
         .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)
         .expressionLanguageSupported(false)
         .allowableValues("true", "false")
-        .defaultValue("true")
+        .defaultValue("false")
         .required(true)
         .build();
     static final PropertyDescriptor COMMENT_MARKER = new PropertyDescriptor.Builder()

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/avro/AvroReader.java
Patch:
@@ -34,7 +34,6 @@
 import org.apache.nifi.flowfile.FlowFile;
 import org.apache.nifi.logging.ComponentLog;
 import org.apache.nifi.schema.access.SchemaAccessStrategy;
-import org.apache.nifi.schema.access.SchemaAccessUtils;
 import org.apache.nifi.schema.access.SchemaNotFoundException;
 import org.apache.nifi.schemaregistry.services.SchemaRegistry;
 import org.apache.nifi.serialization.MalformedRecordException;
@@ -86,7 +85,7 @@ protected SchemaAccessStrategy getSchemaAccessStrategy(String allowableValue, Sc
 
     @Override
     public RecordReader createRecordReader(final FlowFile flowFile, final InputStream in, final ComponentLog logger) throws MalformedRecordException, IOException, SchemaNotFoundException {
-        final String schemaAccessStrategy = getConfigurationContext().getProperty(SchemaAccessUtils.SCHEMA_ACCESS_STRATEGY).getValue();
+        final String schemaAccessStrategy = getConfigurationContext().getProperty(getSchemaAcessStrategyDescriptor()).getValue();
         if (EMBEDDED_AVRO_SCHEMA.getValue().equals(schemaAccessStrategy)) {
             return new AvroReaderWithEmbeddedSchema(in);
         } else {

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/serialization/SchemaRegistryService.java
Patch:
@@ -57,7 +57,7 @@ public abstract class SchemaRegistryService extends AbstractControllerService {
 
     private final List<AllowableValue> strategyList = Collections.unmodifiableList(Arrays.asList(SCHEMA_NAME_PROPERTY, SCHEMA_TEXT_PROPERTY, HWX_SCHEMA_REF_ATTRIBUTES, HWX_CONTENT_ENCODED_SCHEMA));
 
-    private PropertyDescriptor getSchemaAcessStrategyDescriptor() {
+    protected PropertyDescriptor getSchemaAcessStrategyDescriptor() {
         return getPropertyDescriptor(SCHEMA_ACCESS_STRATEGY.getName());
     }
 

File: nifi-nar-bundles/nifi-hive-bundle/nifi-hive-processors/src/main/java/org/apache/nifi/processors/hive/PutHiveStreaming.java
Patch:
@@ -179,7 +179,6 @@ public class PutHiveStreaming extends AbstractSessionFactoryProcessor {
             .description("A comma-delimited list of column names on which the table has been partitioned. The order of values in this list must "
                     + "correspond exactly to the order of partition columns specified during the table creation.")
             .required(false)
-            .expressionLanguageSupported(false)
             .addValidator(StandardValidators.createRegexMatchingValidator(Pattern.compile("[^,]+(,[^,]+)*"))) // comma-separated list with non-empty entries
             .build();
 
@@ -329,7 +328,7 @@ public void setup(final ProcessContext context) {
         final boolean autoCreatePartitions = context.getProperty(AUTOCREATE_PARTITIONS).asBoolean();
         final Integer maxConnections = context.getProperty(MAX_OPEN_CONNECTIONS).asInteger();
         final Integer heartbeatInterval = context.getProperty(HEARTBEAT_INTERVAL).asInteger();
-        final Integer txnsPerBatch = context.getProperty(TXNS_PER_BATCH).asInteger();
+        final Integer txnsPerBatch = context.getProperty(TXNS_PER_BATCH).evaluateAttributeExpressions().asInteger();
         final String configFiles = context.getProperty(HIVE_CONFIGURATION_RESOURCES).getValue();
         hiveConfig = hiveConfigurator.getConfigurationFromFiles(configFiles);
 
@@ -559,7 +558,7 @@ private void onTrigger(ProcessContext context, ProcessSession session, FunctionC
         }
 
         final ComponentLog log = getLogger();
-        final Integer recordsPerTxn = context.getProperty(RECORDS_PER_TXN).asInteger();
+        final Integer recordsPerTxn = context.getProperty(RECORDS_PER_TXN).evaluateAttributeExpressions(flowFile).asInteger();
 
         // Store the original class loader, then explicitly set it to this class's classloader (for use by the Hive Metastore)
         ClassLoader originalClassloader = Thread.currentThread().getContextClassLoader();

File: nifi-nar-bundles/nifi-extension-utils/nifi-record-utils/nifi-hadoop-record-utils/src/main/java/org/apache/nifi/processors/hadoop/AbstractFetchHDFSRecord.java
Patch:
@@ -187,7 +187,8 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
                 final AtomicReference<WriteResult> writeResult = new AtomicReference<>();
 
                 final RecordSetWriterFactory recordSetWriterFactory = context.getProperty(RECORD_WRITER).asControllerService(RecordSetWriterFactory.class);
-                final RecordSetWriter recordSetWriter = recordSetWriterFactory.createWriter(getLogger(), originalFlowFile, new NullInputStream(0));
+                final RecordSchema schema = recordSetWriterFactory.getSchema(originalFlowFile, new NullInputStream(0));
+                final RecordSetWriter recordSetWriter = recordSetWriterFactory.createWriter(getLogger(), schema);
 
                 final StopWatch stopWatch = new StopWatch(true);
 

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-0-10-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/ConsumerLease.java
Patch:
@@ -415,7 +415,8 @@ private void writeRecordData(final ProcessSession session, final List<ConsumerRe
         try {
             final RecordSetWriter writer;
             try {
-                writer = writerFactory.createWriter(logger, flowFile, new ByteArrayInputStream(records.get(0).value()));
+                final RecordSchema schema = writerFactory.getSchema(flowFile, new ByteArrayInputStream(records.get(0).value()));
+                writer = writerFactory.createWriter(logger, schema);
             } catch (final Exception e) {
                 logger.error(
                     "Failed to obtain a Record Writer for serializing Kafka messages. This generally happens because the "

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/QueryRecord.java
Patch:
@@ -254,7 +254,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
             final RecordSetWriter resultSetWriter;
             try (final InputStream rawIn = session.read(original);
                 final InputStream in = new BufferedInputStream(rawIn)) {
-                resultSetWriter = resultSetWriterFactory.createWriter(getLogger(), original, in);
+                resultSetWriter = resultSetWriterFactory.createWriter(getLogger(), resultSetWriterFactory.getSchema(original, in));
             }
 
             for (final PropertyDescriptor descriptor : context.getProperties().keySet()) {

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/SplitRecord.java
Patch:
@@ -136,7 +136,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
         final RecordSetWriter writer;
         try (final InputStream rawIn = session.read(original);
             final InputStream in = new BufferedInputStream(rawIn)) {
-            writer = writerFactory.createWriter(getLogger(), original, in);
+            writer = writerFactory.createWriter(getLogger(), writerFactory.getSchema(original, in));
         } catch (final Exception e) {
             getLogger().error("Failed to create Record Writer for {}; routing to failure", new Object[] {original, e});
             session.transfer(original, REL_FAILURE);

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/avro/AvroReaderWithExplicitSchema.java
Patch:
@@ -33,7 +33,6 @@
 
 public class AvroReaderWithExplicitSchema extends AvroRecordReader {
     private final InputStream in;
-    private final Schema avroSchema;
     private final RecordSchema recordSchema;
     private final DatumReader<GenericRecord> datumReader;
     private final BinaryDecoder decoder;
@@ -43,7 +42,6 @@ public AvroReaderWithExplicitSchema(final InputStream in, final RecordSchema rec
         this.in = in;
         this.recordSchema = recordSchema;
 
-        this.avroSchema = avroSchema;
         datumReader = new GenericDatumReader<GenericRecord>(avroSchema);
         decoder = DecoderFactory.get().binaryDecoder(in, null);
     }

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/csv/CSVRecordReader.java
Patch:
@@ -112,7 +112,7 @@ protected Object convert(final String value, final DataType dataType, final Stri
             return null;
         }
 
-        return DataTypeUtils.convertType(trimmed, dataType, dateFormat, timeFormat, timestampFormat, fieldName);
+        return DataTypeUtils.convertType(trimmed, dataType, () -> dateFormat, () -> timeFormat, () -> timestampFormat, fieldName);
     }
 
     @Override

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/json/JsonPathRowRecordReader.java
Patch:
@@ -162,7 +162,7 @@ protected Object convert(final Object value, final DataType dataType, final Stri
 
             return new MapRecord(childSchema, coercedValues);
         } else {
-            return DataTypeUtils.convertType(value, dataType, dateFormat, timeFormat, timestampFormat, fieldName);
+            return DataTypeUtils.convertType(value, dataType, () -> dateFormat, () -> timeFormat, () -> timestampFormat, fieldName);
         }
     }
 

File: nifi-nar-bundles/nifi-extension-utils/nifi-record-utils/nifi-avro-record-utils/src/main/java/org/apache/nifi/avro/AvroTypeUtil.java
Patch:
@@ -481,7 +481,7 @@ private static Object normalizeValue(final Object value, final Schema avroSchema
                 if (LOGICAL_TYPE_DATE.equals(logicalName)) {
                     // date logical name means that the value is number of days since Jan 1, 1970
                     return new java.sql.Date(TimeUnit.DAYS.toMillis((int) value));
-                } else if (LOGICAL_TYPE_TIMESTAMP_MILLIS.equals(logicalName)) {
+                } else if (LOGICAL_TYPE_TIME_MILLIS.equals(logicalName)) {
                     // time-millis logical name means that the value is number of milliseconds since midnight.
                     return new java.sql.Time((int) value);
                 }

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/avro/AvroRecordSetWriter.java
Patch:
@@ -60,7 +60,7 @@ protected boolean removeEldestEntry(final Map.Entry<String, Schema> eldest) {
 
     @Override
     public RecordSetWriter createWriter(final ComponentLog logger, final FlowFile flowFile, final InputStream in) throws IOException {
-        final String strategyValue = getConfigurationContext().getProperty(SCHEMA_WRITE_STRATEGY).getValue();
+        final String strategyValue = getConfigurationContext().getProperty(getSchemaWriteStrategyDescriptor()).getValue();
 
         try {
             final RecordSchema recordSchema = getSchema(flowFile, in);
@@ -130,7 +130,7 @@ protected AllowableValue getDefaultSchemaWriteStrategy() {
 
     @Override
     protected Set<SchemaField> getRequiredSchemaFields(final ValidationContext validationContext) {
-        final String writeStrategyValue = validationContext.getProperty(SCHEMA_WRITE_STRATEGY).getValue();
+        final String writeStrategyValue = validationContext.getProperty(getSchemaWriteStrategyDescriptor()).getValue();
         if (writeStrategyValue.equalsIgnoreCase(AVRO_EMBEDDED.getValue())) {
             return requiredSchemaFields;
         }

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/test/java/org/apache/nifi/avro/TestAvroReaderWithEmbeddedSchema.java
Patch:
@@ -109,7 +109,7 @@ public void testLogicalTypes() throws IOException, ParseException, MalformedReco
             assertEquals(new java.sql.Timestamp(timeLong), record.getValue("timestampMicros"));
             final DateFormat noTimeOfDayDateFormat = new SimpleDateFormat("yyyy-MM-dd");
             noTimeOfDayDateFormat.setTimeZone(TimeZone.getTimeZone("gmt"));
-            assertEquals(new java.sql.Date(timeLong).toString(), noTimeOfDayDateFormat.format(record.getValue("date")));
+            assertEquals(noTimeOfDayDateFormat.format(new java.sql.Date(timeLong)), noTimeOfDayDateFormat.format(record.getValue("date")));
         }
     }
 

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/main/java/org/apache/nifi/processors/azure/AbstractAzureBlobProcessor.java
Patch:
@@ -25,8 +25,8 @@
 
 public abstract class AbstractAzureBlobProcessor extends AbstractAzureProcessor {
 
-    public static final PropertyDescriptor BLOB = new PropertyDescriptor.Builder().name("Blob").description("The filename of the blob").addValidator(StandardValidators.NON_EMPTY_VALIDATOR)
-            .expressionLanguageSupported(true).required(true).defaultValue("${azure.blobname}").build();
+    public static final PropertyDescriptor BLOB = new PropertyDescriptor.Builder().name("blob").displayName("Blob").description("The filename of the blob")
+            .addValidator(StandardValidators.NON_EMPTY_VALIDATOR).expressionLanguageSupported(true).required(true).defaultValue("${azure.blobname}").build();
 
     private static final List<PropertyDescriptor> PROPERTIES = Collections
             .unmodifiableList(Arrays.asList(AzureConstants.ACCOUNT_NAME, AzureConstants.ACCOUNT_KEY, AzureConstants.CONTAINER, BLOB));

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/main/java/org/apache/nifi/processors/azure/storage/utils/BlobInfo.java
Patch:
@@ -18,7 +18,7 @@
 
 import java.io.Serializable;
 
-import org.apache.nifi.processors.standard.util.ListableEntity;
+import org.apache.nifi.processor.util.list.ListableEntity;
 
 public class BlobInfo implements Comparable<BlobInfo>, Serializable, ListableEntity {
     private static final long serialVersionUID = 1L;

File: nifi-nar-bundles/nifi-extension-utils/nifi-processor-utils/src/main/java/org/apache/nifi/processor/util/list/EntityListing.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.nifi.processors.standard.util;
+package org.apache.nifi.processor.util.list;
 
 import java.util.Collection;
 import java.util.Date;

File: nifi-nar-bundles/nifi-extension-utils/nifi-processor-utils/src/main/java/org/apache/nifi/processor/util/list/ListableEntity.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.nifi.processors.standard.util;
+package org.apache.nifi.processor.util.list;
 
 public interface ListableEntity {
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ListFile.java
Patch:
@@ -36,6 +36,7 @@
 import org.apache.nifi.processor.ProcessorInitializationContext;
 import org.apache.nifi.processor.Relationship;
 import org.apache.nifi.processor.util.StandardValidators;
+import org.apache.nifi.processor.util.list.AbstractListProcessor;
 import org.apache.nifi.processors.standard.util.FileInfo;
 
 import java.io.File;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ListFileTransfer.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.nifi.flowfile.attributes.CoreAttributes;
 import org.apache.nifi.processor.ProcessContext;
 import org.apache.nifi.processor.util.StandardValidators;
+import org.apache.nifi.processor.util.list.AbstractListProcessor;
 import org.apache.nifi.processors.standard.util.FileInfo;
 import org.apache.nifi.processors.standard.util.FileTransfer;
 import java.util.Map;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/util/FileInfo.java
Patch:
@@ -18,6 +18,8 @@
 
 import java.io.Serializable;
 
+import org.apache.nifi.processor.util.list.ListableEntity;
+
 public class FileInfo implements Comparable<FileInfo>, Serializable, ListableEntity {
 
     private static final long serialVersionUID = 1L;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestListFile.java
Patch:
@@ -40,6 +40,7 @@
 import org.apache.nifi.flowfile.attributes.CoreAttributes;
 import org.apache.nifi.processor.ProcessContext;
 import org.apache.nifi.processor.Relationship;
+import org.apache.nifi.processor.util.list.AbstractListProcessor;
 import org.apache.nifi.util.MockFlowFile;
 import org.apache.nifi.util.TestRunner;
 import org.apache.nifi.util.TestRunners;

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/main/java/org/apache/nifi/processors/azure/AbstractAzureBlobProcessor.java
Patch:
@@ -27,13 +27,13 @@ public abstract class AbstractAzureBlobProcessor extends AbstractAzureProcessor
 
     public static final PropertyDescriptor BLOB = new PropertyDescriptor.Builder().name("Blob").description("The filename of the blob").addValidator(StandardValidators.NON_EMPTY_VALIDATOR)
             .expressionLanguageSupported(true).required(true).defaultValue("${azure.blobname}").build();
-    
-    public static final List<PropertyDescriptor> properties = Collections
+
+    private static final List<PropertyDescriptor> PROPERTIES = Collections
             .unmodifiableList(Arrays.asList(AzureConstants.ACCOUNT_NAME, AzureConstants.ACCOUNT_KEY, AzureConstants.CONTAINER, BLOB));
 
     @Override
     protected List<PropertyDescriptor> getSupportedPropertyDescriptors() {
-        return properties;
+        return PROPERTIES;
     }
 
 }

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/main/java/org/apache/nifi/processors/azure/AzureConstants.java
Patch:
@@ -32,6 +32,9 @@ public final class AzureConstants {
     public static final PropertyDescriptor CONTAINER = new PropertyDescriptor.Builder().name("Container name").description("Name of the azure storage container")
             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR).expressionLanguageSupported(true).required(true).build();
 
+    // use HTTPS by default as per MSFT recommendation
+    public static final String FORMAT_DEFAULT_CONNECTION_STRING = "DefaultEndpointsProtocol=https;AccountName=%s;AccountKey=%s";
+
     private AzureConstants() {
         // do not instantiate
     }

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/main/java/org/apache/nifi/processors/azure/storage/utils/BlobInfo.java
Patch:
@@ -159,7 +159,7 @@ public int compareTo(BlobInfo o) {
         return etag.compareTo(o.etag);
     }
 
-    protected BlobInfo(final Builder builder) {
+    private BlobInfo(final Builder builder) {
         this.primaryUri = builder.primaryUri;
         this.secondaryUri = builder.secondaryUri;
         this.contentType = builder.contentType;

File: nifi-nar-bundles/nifi-azure-bundle/nifi-azure-processors/src/test/java/org/apache/nifi/processors/azure/storage/ITFetchAzureBlobStorage.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.List;
 import java.util.Map;
 
+import org.apache.nifi.processors.azure.AbstractAzureProcessor;
 import org.apache.nifi.processors.azure.AzureConstants;
 import org.apache.nifi.util.MockFlowFile;
 import org.apache.nifi.util.TestRunner;
@@ -51,7 +52,7 @@ public void testFetchingBlob() throws InvalidKeyException, URISyntaxException, S
         runner.enqueue(new byte[0], attributes);
         runner.run();
 
-        runner.assertAllFlowFilesTransferred(FetchAzureBlobStorage.REL_SUCCESS, 1);
+        runner.assertAllFlowFilesTransferred(AbstractAzureProcessor.REL_SUCCESS, 1);
         List<MockFlowFile> flowFilesForRelationship = runner.getFlowFilesForRelationship(FetchAzureBlobStorage.REL_SUCCESS);
         for (MockFlowFile flowFile : flowFilesForRelationship) {
             flowFile.assertContentEquals("0123456789".getBytes());

File: nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/util/crypto/CipherProvider.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.processors.standard.util.crypto;
+package org.apache.nifi.security.util.crypto;
 
 /**
  * Marker interface for cipher providers.

File: nifi-nar-bundles/nifi-provenance-repository-bundle/nifi-persistent-provenance-repository/src/main/java/org/apache/nifi/provenance/schema/LookupTableEventRecordFields.java
Patch:
@@ -66,12 +66,12 @@ public class LookupTableEventRecordFields {
     public static final RecordField CONTENT_CLAIM_SIZE = new SimpleRecordField(EventFieldNames.CONTENT_CLAIM_SIZE, FieldType.LONG, EXACTLY_ONE);
 
     public static final RecordField PREVIOUS_CONTENT_CLAIM = new ComplexRecordField(EventFieldNames.PREVIOUS_CONTENT_CLAIM, ZERO_OR_ONE,
-        CONTENT_CLAIM_CONTAINER, CONTENT_CLAIM_SECTION, CONTENT_CLAIM_IDENTIFIER, CONTENT_CLAIM_OFFSET, CONTENT_CLAIM_SIZE);
+            CONTENT_CLAIM_CONTAINER, CONTENT_CLAIM_SECTION, CONTENT_CLAIM_IDENTIFIER, CONTENT_CLAIM_OFFSET, CONTENT_CLAIM_SIZE);
 
     public static final RecordField CURRENT_CONTENT_CLAIM_EXPLICIT = new ComplexRecordField(EventFieldNames.EXPLICIT_VALUE, EXACTLY_ONE,
-        CONTENT_CLAIM_CONTAINER, CONTENT_CLAIM_SECTION, CONTENT_CLAIM_IDENTIFIER, CONTENT_CLAIM_OFFSET, CONTENT_CLAIM_SIZE);
+            CONTENT_CLAIM_CONTAINER, CONTENT_CLAIM_SECTION, CONTENT_CLAIM_IDENTIFIER, CONTENT_CLAIM_OFFSET, CONTENT_CLAIM_SIZE);
     public static final RecordField CURRENT_CONTENT_CLAIM = new UnionRecordField(EventFieldNames.CONTENT_CLAIM,
-        Repetition.EXACTLY_ONE, NO_VALUE, UNCHANGED_VALUE, CURRENT_CONTENT_CLAIM_EXPLICIT);
+            Repetition.EXACTLY_ONE, NO_VALUE, UNCHANGED_VALUE, CURRENT_CONTENT_CLAIM_EXPLICIT);
 
 
     // EventType-Specific fields

File: nifi-nar-bundles/nifi-provenance-repository-bundle/nifi-persistent-provenance-repository/src/main/java/org/apache/nifi/provenance/schema/LookupTableEventSchema.java
Patch:
@@ -45,7 +45,6 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
-
 import org.apache.nifi.repository.schema.RecordField;
 import org.apache.nifi.repository.schema.RecordSchema;
 
@@ -90,5 +89,4 @@ private static RecordSchema buildSchemaV1(final boolean includeEventId) {
         final RecordSchema schema = new RecordSchema(fields);
         return schema;
     }
-
 }

File: nifi-nar-bundles/nifi-provenance-repository-bundle/nifi-persistent-provenance-repository/src/main/java/org/apache/nifi/provenance/serialization/CompressableRecordReader.java
Patch:
@@ -25,7 +25,6 @@
 import java.nio.charset.StandardCharsets;
 import java.util.Optional;
 import java.util.zip.GZIPInputStream;
-
 import org.apache.nifi.provenance.ProvenanceEventRecord;
 import org.apache.nifi.provenance.StandardProvenanceEventRecord;
 import org.apache.nifi.provenance.toc.TocReader;
@@ -333,7 +332,7 @@ public Optional<ProvenanceEventRecord> skipToEvent(final long eventId) throws IO
         try {
             boolean read = true;
             while (read) {
-                final Optional<StandardProvenanceEventRecord> eventOptional = readToEvent(eventId, dis, serializationVersion);
+                final Optional<StandardProvenanceEventRecord> eventOptional = this.readToEvent(eventId, dis, serializationVersion);
                 if (eventOptional.isPresent()) {
                     pushbackEvent = eventOptional.get();
                     return Optional.of(pushbackEvent);

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/security/util/crypto/bcrypt/BCrypt.java
Patch:
@@ -12,7 +12,7 @@
 // ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 // OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 
-package org.apache.nifi.processors.standard.util.crypto.bcrypt;
+package org.apache.nifi.security.util.crypto.bcrypt;
 
 import java.io.UnsupportedEncodingException;
 import java.security.SecureRandom;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/connectable/Connection.java
Patch:
@@ -77,6 +77,8 @@ public interface Connection extends Authorizable {
 
     List<FlowFileRecord> poll(FlowFileFilter filter, Set<FlowFileRecord> expiredRecords);
 
+    FlowFileRecord poll(Set<FlowFileRecord> expiredRecords);
+
     void verifyCanUpdate() throws IllegalStateException;
 
     void verifyCanDelete() throws IllegalStateException;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/repository/TestFileSystemRepository.java
Patch:
@@ -54,6 +54,7 @@
 import org.apache.nifi.util.NiFiProperties;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.slf4j.LoggerFactory;
 
@@ -93,6 +94,7 @@ public void shutdown() throws IOException {
     }
 
     @Test
+    @Ignore("Intended for manual testing only, in order to judge changes to performance")
     public void testWritePerformance() throws IOException {
         final long bytesToWrite = 1_000_000_000L;
         final int contentSize = 100;

File: nifi-commons/nifi-record/src/main/java/org/apache/nifi/serialization/record/MapRecord.java
Patch:
@@ -17,13 +17,13 @@
 
 package org.apache.nifi.serialization.record;
 
+import org.apache.nifi.serialization.record.util.DataTypeUtils;
+
 import java.util.Date;
 import java.util.Map;
 import java.util.Objects;
 import java.util.Optional;
 
-import org.apache.nifi.serialization.record.util.DataTypeUtils;
-
 public class MapRecord implements Record {
     private final RecordSchema schema;
     private final Map<String, Object> values;

File: nifi-commons/nifi-record/src/main/java/org/apache/nifi/serialization/record/RecordField.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.nifi.serialization.record;
 
+import org.apache.nifi.serialization.record.util.DataTypeUtils;
+
 import java.util.Collections;
 import java.util.Objects;
 import java.util.Set;
 
-import org.apache.nifi.serialization.record.util.DataTypeUtils;
-
 public class RecordField {
     private final String fieldName;
     private final DataType dataType;

File: nifi-commons/nifi-record/src/main/java/org/apache/nifi/serialization/record/type/ArrayDataType.java
Patch:
@@ -17,11 +17,11 @@
 
 package org.apache.nifi.serialization.record.type;
 
-import java.util.Objects;
-
 import org.apache.nifi.serialization.record.DataType;
 import org.apache.nifi.serialization.record.RecordFieldType;
 
+import java.util.Objects;
+
 public class ArrayDataType extends DataType {
     private final DataType elementType;
 

File: nifi-commons/nifi-record/src/main/java/org/apache/nifi/serialization/record/type/ChoiceDataType.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.nifi.serialization.record.type;
 
-import java.util.List;
-import java.util.Objects;
-
 import org.apache.nifi.serialization.record.DataType;
 import org.apache.nifi.serialization.record.RecordFieldType;
 
+import java.util.List;
+import java.util.Objects;
+
 public class ChoiceDataType extends DataType {
     private final List<DataType> possibleSubTypes;
 

File: nifi-commons/nifi-record/src/main/java/org/apache/nifi/serialization/record/type/MapDataType.java
Patch:
@@ -17,11 +17,11 @@
 
 package org.apache.nifi.serialization.record.type;
 
-import java.util.Objects;
-
 import org.apache.nifi.serialization.record.DataType;
 import org.apache.nifi.serialization.record.RecordFieldType;
 
+import java.util.Objects;
+
 public class MapDataType extends DataType {
     private final DataType valueType;
 

File: nifi-commons/nifi-record/src/main/java/org/apache/nifi/serialization/record/type/RecordDataType.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.nifi.serialization.record.type;
 
-import java.util.Objects;
-
 import org.apache.nifi.serialization.record.DataType;
 import org.apache.nifi.serialization.record.RecordFieldType;
 import org.apache.nifi.serialization.record.RecordSchema;
 
+import java.util.Objects;
+
 public class RecordDataType extends DataType {
     private final RecordSchema childSchema;
 

File: nifi-nar-bundles/nifi-extension-utils/nifi-record-utils/nifi-mock-record-utils/src/main/java/org/apache/nifi/serialization/record/MockRecordParser.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.nifi.processors.standard.util.record;
+package org.apache.nifi.serialization.record;
 
 import java.io.IOException;
 import java.io.InputStream;

File: nifi-nar-bundles/nifi-extension-utils/nifi-record-utils/nifi-standard-record-utils/src/main/java/org/apache/nifi/schema/access/HortonworksAttributeSchemaReferenceWriter.java
Patch:
@@ -17,16 +17,16 @@
 
 package org.apache.nifi.schema.access;
 
+import org.apache.nifi.serialization.record.RecordSchema;
+import org.apache.nifi.serialization.record.SchemaIdentifier;
+
 import java.io.IOException;
 import java.io.OutputStream;
 import java.util.EnumSet;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Set;
 
-import org.apache.nifi.serialization.record.RecordSchema;
-import org.apache.nifi.serialization.record.SchemaIdentifier;
-
 public class HortonworksAttributeSchemaReferenceWriter implements SchemaAccessWriter {
     private static final Set<SchemaField> requiredSchemaFields = EnumSet.of(SchemaField.SCHEMA_IDENTIFIER, SchemaField.SCHEMA_VERSION);
     private static final int LATEST_PROTOCOL_VERSION = 1;

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/test/java/org/apache/nifi/processors/hadoop/TestCreateHadoopSequenceFile.java
Patch:
@@ -206,7 +206,7 @@ public void testMergedFlowfilePackagedData() throws IOException {
     @Test
     public void testSequenceFileBzipCompressionCodec() throws UnsupportedEncodingException, IOException {
 
-        controller.setProperty(AbstractHadoopProcessor.COMPRESSION_CODEC, AbstractHadoopProcessor.CompressionType.BZIP.name());
+        controller.setProperty(AbstractHadoopProcessor.COMPRESSION_CODEC, CompressionType.BZIP.name());
         controller.setProperty(CreateHadoopSequenceFile.COMPRESSION_TYPE, SequenceFile.CompressionType.BLOCK.name());
 
         File inFile = inFiles[0];
@@ -253,7 +253,7 @@ public void testSequenceFileBzipCompressionCodec() throws UnsupportedEncodingExc
     @Test
     public void testSequenceFileDefaultCompressionCodec() throws UnsupportedEncodingException, IOException {
 
-        controller.setProperty(AbstractHadoopProcessor.COMPRESSION_CODEC, AbstractHadoopProcessor.CompressionType.DEFAULT.name());
+        controller.setProperty(AbstractHadoopProcessor.COMPRESSION_CODEC, CompressionType.DEFAULT.name());
         controller.setProperty(CreateHadoopSequenceFile.COMPRESSION_TYPE, SequenceFile.CompressionType.BLOCK.name());
 
         File inFile = inFiles[0];
@@ -300,7 +300,7 @@ public void testSequenceFileDefaultCompressionCodec() throws UnsupportedEncoding
     @Test
     public void testSequenceFileNoneCompressionCodec() throws UnsupportedEncodingException, IOException {
 
-        controller.setProperty(AbstractHadoopProcessor.COMPRESSION_CODEC, AbstractHadoopProcessor.CompressionType.NONE.name());
+        controller.setProperty(AbstractHadoopProcessor.COMPRESSION_CODEC, CompressionType.NONE.name());
         controller.setProperty(CreateHadoopSequenceFile.COMPRESSION_TYPE, SequenceFile.CompressionType.BLOCK.name());
 
         File inFile = inFiles[0];

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/avro/AvroReader.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.nifi.components.AllowableValue;
 import org.apache.nifi.flowfile.FlowFile;
 import org.apache.nifi.logging.ComponentLog;
+import org.apache.nifi.schema.access.SchemaAccessUtils;
 import org.apache.nifi.schema.access.SchemaNotFoundException;
 import org.apache.nifi.serialization.MalformedRecordException;
 import org.apache.nifi.serialization.RecordReader;
@@ -50,7 +51,7 @@ protected List<AllowableValue> getSchemaAccessStrategyValues() {
 
     @Override
     public RecordReader createRecordReader(final FlowFile flowFile, final InputStream in, final ComponentLog logger) throws MalformedRecordException, IOException, SchemaNotFoundException {
-        final String schemaAccessStrategy = getConfigurationContext().getProperty(SCHEMA_ACCESS_STRATEGY).getValue();
+        final String schemaAccessStrategy = getConfigurationContext().getProperty(SchemaAccessUtils.SCHEMA_ACCESS_STRATEGY).getValue();
         if (EMBEDDED_AVRO_SCHEMA.getValue().equals(schemaAccessStrategy)) {
             return new AvroReaderWithEmbeddedSchema(in);
         } else {

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/avro/AvroRecordSetWriter.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.nifi.flowfile.FlowFile;
 import org.apache.nifi.logging.ComponentLog;
 import org.apache.nifi.processor.exception.ProcessException;
+import org.apache.nifi.schema.access.SchemaAccessUtils;
 import org.apache.nifi.schema.access.SchemaField;
 import org.apache.nifi.schema.access.SchemaNotFoundException;
 import org.apache.nifi.schemaregistry.services.SchemaRegistry;
@@ -60,7 +61,7 @@ public class AvroRecordSetWriter extends SchemaRegistryRecordSetWriter implement
     @Override
     protected List<PropertyDescriptor> getSupportedPropertyDescriptors() {
         final List<PropertyDescriptor> properties = new ArrayList<>(super.getSupportedPropertyDescriptors());
-        properties.add(SCHEMA_ACCESS_STRATEGY);
+        properties.add(SchemaAccessUtils.SCHEMA_ACCESS_STRATEGY);
         properties.add(SCHEMA_REGISTRY);
         return properties;
     }

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/avro/WriteAvroResultWithExternalSchema.java
Patch:
@@ -61,7 +61,7 @@ public WriteResult write(final RecordSet rs, final OutputStream outStream) throw
         final BinaryEncoder encoder = EncoderFactory.get().blockingBinaryEncoder(bufferedOut, null);
 
         do {
-            final GenericRecord rec = createAvroRecord(record, schema);
+            final GenericRecord rec = AvroTypeUtil.createAvroRecord(record, schema);
 
             datumWriter.write(rec, encoder);
             encoder.flush();

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/avro/WriteAvroResultWithSchema.java
Patch:
@@ -51,7 +51,7 @@ public WriteResult write(final RecordSet rs, final OutputStream outStream) throw
             dataFileWriter.create(schema, outStream);
 
             do {
-                final GenericRecord rec = createAvroRecord(record, schema);
+                final GenericRecord rec = AvroTypeUtil.createAvroRecord(record, schema);
                 dataFileWriter.append(rec);
                 nrOfRows++;
             } while ((record = rs.next()) != null);

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/csv/CSVUtils.java
Patch:
@@ -176,7 +176,8 @@ private static CSVFormat buildCustomFormat(final ConfigurationContext context) {
             .withAllowMissingColumnNames()
             .withIgnoreEmptyLines();
 
-        if (context.getProperty(SKIP_HEADER_LINE).asBoolean()) {
+        final PropertyValue skipHeaderPropertyValue = context.getProperty(SKIP_HEADER_LINE);
+        if (skipHeaderPropertyValue.getValue() != null && skipHeaderPropertyValue.asBoolean()) {
             format = format.withFirstRecordAsHeader();
         }
 

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/grok/GrokReader.java
Patch:
@@ -178,13 +178,13 @@ protected AllowableValue getDefaultSchemaAccessStrategy() {
     }
 
     @Override
-    protected SchemaAccessStrategy getSchemaAccessStrategy(final String allowableValue, final SchemaRegistry schemaRegistry) {
+    protected SchemaAccessStrategy getSchemaAccessStrategy(final String allowableValue, final SchemaRegistry schemaRegistry, final ConfigurationContext context) {
         if (allowableValue.equalsIgnoreCase(STRING_FIELDS_FROM_GROK_EXPRESSION.getValue())) {
             return new SchemaAccessStrategy() {
                 private final Set<SchemaField> schemaFields = EnumSet.noneOf(SchemaField.class);
 
                 @Override
-                public RecordSchema getSchema(final FlowFile flowFile, final InputStream contentStream, final ConfigurationContext context) throws SchemaNotFoundException {
+                public RecordSchema getSchema(final FlowFile flowFile, final InputStream contentStream) throws SchemaNotFoundException {
                     return recordSchema;
                 }
 
@@ -194,7 +194,7 @@ public Set<SchemaField> getSuppliedSchemaFields() {
                 }
             };
         } else {
-            return super.getSchemaAccessStrategy(allowableValue, schemaRegistry);
+            return super.getSchemaAccessStrategy(allowableValue, schemaRegistry, context);
         }
     }
 

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/text/FreeFormTextWriter.java
Patch:
@@ -50,11 +50,11 @@ public WriteResult write(final RecordSet recordSet, final OutputStream out) thro
         int count = 0;
 
         try {
-            final RecordSchema schema = recordSet.getSchema();
-            final List<String> colNames = getColumnNames(schema);
-
             Record record;
             while ((record = recordSet.next()) != null) {
+                final RecordSchema schema = record.getSchema();
+                final List<String> colNames = getColumnNames(schema);
+
                 count++;
                 write(record, out, colNames);
             }

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/test/java/org/apache/nifi/csv/TestCSVHeaderSchemaStrategy.java
Patch:
@@ -40,7 +40,6 @@ public class TestCSVHeaderSchemaStrategy {
 
     @Test
     public void testSimple() throws SchemaNotFoundException, IOException {
-        final CSVHeaderSchemaStrategy strategy = new CSVHeaderSchemaStrategy();
         final String headerLine = "a, b, c, d, e\\,z, f";
         final byte[] headerBytes = headerLine.getBytes();
 
@@ -53,10 +52,11 @@ public void testSimple() throws SchemaNotFoundException, IOException {
         properties.put(CSVUtils.ESCAPE_CHAR, "\\");
 
         final ConfigurationContext context = new MockConfigurationContext(properties, null);
+        final CSVHeaderSchemaStrategy strategy = new CSVHeaderSchemaStrategy(context);
 
         final RecordSchema schema;
         try (final InputStream bais = new ByteArrayInputStream(headerBytes)) {
-            schema = strategy.getSchema(null, bais, context);
+            schema = strategy.getSchema(null, bais);
         }
 
         final List<String> expectedFieldNames = Arrays.asList("a", "b", "c", "d", "e,z", "f");

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ListenSyslog.java
Patch:
@@ -91,7 +91,7 @@
                     @WritesAttribute(attribute="syslog.facility", description="The facility of the Syslog message derived from the priority."),
                     @WritesAttribute(attribute="syslog.version", description="The optional version from the Syslog message."),
                     @WritesAttribute(attribute="syslog.timestamp", description="The timestamp of the Syslog message."),
-                    @WritesAttribute(attribute="syslog.hostname", description="The hostname of the Syslog message."),
+                    @WritesAttribute(attribute="syslog.hostname", description="The hostname or IP address of the Syslog message."),
                     @WritesAttribute(attribute="syslog.sender", description="The hostname of the Syslog server that sent the message."),
                     @WritesAttribute(attribute="syslog.body", description="The body of the Syslog message, everything after the hostname."),
                     @WritesAttribute(attribute="syslog.valid", description="An indicator of whether this message matched the expected formats. " +

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/syslog/SyslogParser.java
Patch:
@@ -52,7 +52,7 @@ public class SyslogParser {
                     // stamp MMM d HH:mm:ss, single digit date has two spaces
                     "([A-Z][a-z][a-z]\\s{1,2}\\d{1,2}\\s\\d{2}[:]\\d{2}[:]\\d{2})" +
                     "\\s" + // separator
-                    "([\\w][\\w\\d\\.@-]*)" + // host
+                    "([\\w][\\w\\d(\\.|\\:)@-]*)" + // host
                     "\\s(.*)$";  // body
 
     public static final Collection<Pattern> MESSAGE_PATTERNS;

File: nifi-nar-bundles/nifi-cdc/nifi-cdc-mysql-bundle/nifi-cdc-mysql-processors/src/main/java/org/apache/nifi/cdc/mysql/processors/CaptureChangeMySQL.java
Patch:
@@ -640,6 +640,7 @@ protected void connect(List<InetSocketAddress> hosts, String username, String pa
         int connectionAttempts = 0;
         final int numHosts = hosts.size();
         InetSocketAddress connectedHost = null;
+        Exception lastConnectException = new Exception("Unknown connection error");
 
         while (connectedHost == null && connectionAttempts < numHosts) {
             if (binlogClient == null) {
@@ -682,11 +683,12 @@ protected void connect(List<InetSocketAddress> hosts, String username, String pa
                 transitUri = "<unknown>";
                 currentHost = (currentHost + 1) % numHosts;
                 connectionAttempts++;
+                lastConnectException = te;
             }
         }
         if (!binlogClient.isConnected()) {
             binlogClient = null;
-            throw new IOException("Could not connect binlog client to any of the specified hosts");
+            throw new IOException("Could not connect binlog client to any of the specified hosts due to: " + lastConnectException.getMessage(), lastConnectException);
         }
 
         if (createEnrichmentConnection) {

File: nifi-nar-bundles/nifi-hive-bundle/nifi-hive-processors/src/test/java/org/apache/nifi/processors/hive/TestPutHiveStreaming.java
Patch:
@@ -521,7 +521,7 @@ public void onTriggerWithExceptionOnFlushAndClose() throws Exception {
 
     @Test
     public void cleanup() throws Exception {
-
+        processor.cleanup();
     }
 
     @Test

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/QueryDatabaseTableTest.java
Patch:
@@ -157,7 +157,7 @@ public void testGetQuery() throws Exception {
         // Test Oracle strategy
         dbAdapter = new OracleDatabaseAdapter();
         query = processor.getQuery(dbAdapter, "myTable", null, Arrays.asList("id", "DATE_CREATED"), stateManager.getState(Scope.CLUSTER).toMap());
-        assertEquals("SELECT * FROM myTable WHERE id > 509 AND DATE_CREATED >= to_date('2016-03-07 12:34:56', 'yyyy-mm-dd HH24:MI:SS')", query);
+        assertEquals("SELECT * FROM myTable WHERE id > 509 AND DATE_CREATED >= timestamp '2016-03-07 12:34:56'", query);
     }
 
     @Test(expected = IllegalArgumentException.class)

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/PreparedQuery.java
Patch:
@@ -26,4 +26,6 @@ public interface PreparedQuery {
     String evaluateExpressions(Map<String, String> valueLookup, AttributeValueDecorator decorator) throws ProcessException;
 
     String evaluateExpressions(final Map<String, String> valueLookup, final AttributeValueDecorator decorator, final Map<String, String> stateVariables) throws ProcessException;
+
+    boolean isExpressionLanguagePresent();
 }

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/queryrecord/FlowFileProjectTableScanRule.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.queryflowfile;
+package org.apache.nifi.queryrecord;
 
 import java.util.List;
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/queryrecord/FlowFileTableScan.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.queryflowfile;
+package org.apache.nifi.queryrecord;
 
 import java.util.List;
 

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-service-api/src/main/java/org/apache/nifi/serialization/record/type/ArrayDataType.java
Patch:
@@ -52,7 +52,7 @@ public boolean equals(final Object obj) {
         if (obj == null) {
             return false;
         }
-        if (!(obj instanceof RecordDataType)) {
+        if (!(obj instanceof ArrayDataType)) {
             return false;
         }
 

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-service-api/src/main/java/org/apache/nifi/serialization/record/type/ChoiceDataType.java
Patch:
@@ -53,7 +53,7 @@ public boolean equals(final Object obj) {
         if (obj == null) {
             return false;
         }
-        if (!(obj instanceof RecordDataType)) {
+        if (!(obj instanceof ChoiceDataType)) {
             return false;
         }
 

File: nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/client/AbstractSiteToSiteClient.java
Patch:
@@ -33,7 +33,7 @@ public AbstractSiteToSiteClient(final SiteToSiteClientConfig config) {
         siteInfoProvider.setConnectTimeoutMillis(commsTimeout);
         siteInfoProvider.setReadTimeoutMillis(commsTimeout);
         siteInfoProvider.setProxy(config.getHttpProxy());
-
+        siteInfoProvider.setLocalAddress(config.getLocalAddress());
     }
 
     @Override

File: nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/client/http/HttpClient.java
Patch:
@@ -106,6 +106,7 @@ public Set<PeerStatus> fetchRemotePeerStatuses(PeerDescription peerDescription)
             final int timeoutMillis = (int) config.getTimeout(TimeUnit.MILLISECONDS);
             apiClient.setConnectTimeoutMillis(timeoutMillis);
             apiClient.setReadTimeoutMillis(timeoutMillis);
+            apiClient.setLocalAddress(config.getLocalAddress());
 
             final Collection<PeerDTO> peers = apiClient.getPeers();
             if(peers == null || peers.size() == 0){
@@ -153,6 +154,7 @@ public Transaction createTransaction(final TransferDirection direction) throws H
             apiClient.setBaseUrl(peer.getUrl());
             apiClient.setConnectTimeoutMillis(timeoutMillis);
             apiClient.setReadTimeoutMillis(timeoutMillis);
+            apiClient.setLocalAddress(config.getLocalAddress());
 
             apiClient.setCompress(config.isUseCompression());
             apiClient.setRequestExpirationMillis(config.getIdleConnectionExpiration(TimeUnit.MILLISECONDS));

File: nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/util/SiteToSiteRestApiClient.java
Patch:
@@ -1206,12 +1206,10 @@ public void setBaseUrl(final String baseUrl) {
 
     public void setConnectTimeoutMillis(final int connectTimeoutMillis) {
         this.connectTimeoutMillis = connectTimeoutMillis;
-        setupRequestConfig();
     }
 
     public void setReadTimeoutMillis(final int readTimeoutMillis) {
         this.readTimeoutMillis = readTimeoutMillis;
-        setupRequestConfig();
     }
 
     public static String getFirstUrl(final String clusterUrlStr) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-site-to-site/src/main/java/org/apache/nifi/remote/protocol/http/StandardHttpFlowFileServerProtocol.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.nifi.remote.Transaction;
 import org.apache.nifi.remote.VersionNegotiator;
 import org.apache.nifi.remote.cluster.ClusterNodeInformation;
+import org.apache.nifi.remote.cluster.NodeInformation;
 import org.apache.nifi.remote.codec.FlowFileCodec;
 import org.apache.nifi.remote.codec.StandardFlowFileCodec;
 import org.apache.nifi.remote.exception.HandshakeException;
@@ -228,8 +229,7 @@ public VersionNegotiator getVersionNegotiator() {
     }
 
     @Override
-    public void sendPeerList(Peer peer, Optional<ClusterNodeInformation> clusterNodeInfo, String remoteInputHost, Integer remoteInputPort, Integer remoteInputHttpPort,
-                             boolean isSiteToSiteSecure) throws IOException {
+    public void sendPeerList(Peer peer, Optional<ClusterNodeInformation> clusterNodeInfo, final NodeInformation self) throws IOException {
     }
 
     @Override

File: nifi-mock/src/main/java/org/apache/nifi/util/MockProcessSession.java
Patch:
@@ -218,8 +218,8 @@ public void commit() {
                 }
             }
 
-            //            throw new FlowFileHandlingException("Cannot commit session because the following Input Streams were created via "
-            //                + "calls to ProcessSession.read(FlowFile) and never closed: " + openStreamCopy);
+            throw new FlowFileHandlingException("Cannot commit session because the following Input Streams were created via "
+                + "calls to ProcessSession.read(FlowFile) and never closed: " + openStreamCopy);
         }
 
         committed = true;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/queryflowfile/FlowFileTable.java
Patch:
@@ -136,7 +136,7 @@ public RelDataType getRowType(final RelDataTypeFactory typeFactory) {
 
         RecordSchema schema;
         try (final InputStream in = session.read(flowFile)) {
-            final RecordReader recordParser = recordParserFactory.createRecordReader(in, logger);
+            final RecordReader recordParser = recordParserFactory.createRecordReader(flowFile, in, logger);
             schema = recordParser.getSchema();
         } catch (final MalformedRecordException | IOException e) {
             throw new ProcessException("Failed to determine schema of data records for " + flowFile, e);
@@ -189,7 +189,7 @@ private RelDataType getRelDataType(final DataType fieldType, final JavaTypeFacto
                 return typeFactory.createJavaType(String.class);
             case ARRAY:
                 return typeFactory.createJavaType(Object[].class);
-            case OBJECT:
+            case RECORD:
                 return typeFactory.createJavaType(Object.class);
         }
 

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-service-api/src/main/java/org/apache/nifi/serialization/RecordReader.java
Patch:
@@ -39,7 +39,6 @@ public interface RecordReader extends Closeable {
     /**
      * Returns the next record in the stream or <code>null</code> if no more records are available.
      *
-     * @param schema the schema to use in order to determine how to interprets the fields in a record
      * @return the next record in the stream or <code>null</code> if no more records are available.
      *
      * @throws IOException if unable to read from the underlying data

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-service-api/src/main/java/org/apache/nifi/serialization/RecordWriter.java
Patch:
@@ -26,7 +26,7 @@ public interface RecordWriter {
     /**
      * Writes the given result set to the given output stream
      *
-     * @param recordSet the record set to serialize
+     * @param record the record set to serialize
      * @param out the OutputStream to write to
      * @return the results of writing the data
      * @throws IOException if unable to write to the given OutputStream

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-service-api/src/main/java/org/apache/nifi/serialization/record/Record.java
Patch:
@@ -50,12 +50,10 @@ public interface Record {
 
     Float getAsFloat(String fieldName);
 
-    Record getAsRecord(String fieldName);
+    Record getAsRecord(String fieldName, RecordSchema schema);
 
     Boolean getAsBoolean(String fieldName);
 
-    Date getAsDate(String fieldName);
-
     Date getAsDate(String fieldName, String format);
 
     Object[] getAsArray(String fieldName);

File: nifi-nar-bundles/nifi-standard-services/nifi-record-serialization-services-bundle/nifi-record-serialization-services/src/main/java/org/apache/nifi/text/FreeFormTextRecordSetWriter.java
Patch:
@@ -33,10 +33,10 @@
 import org.apache.nifi.serialization.RecordSetWriter;
 import org.apache.nifi.serialization.RecordSetWriterFactory;
 
-@Tags({"text", "freeform", "expression", "language", "el", "resultset", "writer", "serialize"})
-@CapabilityDescription("Writes the contents of a Database ResultSet as free-form text. The configured "
+@Tags({"text", "freeform", "expression", "language", "el", "record", "recordset", "resultset", "writer", "serialize"})
+@CapabilityDescription("Writes the contents of a RecordSet as free-form text. The configured "
     + "text is able to make use of the Expression Language to reference each of the columns that are available "
-    + "in the ResultSet. Each record in the ResultSet will be separated by a single newline character.")
+    + "in a Record. Each record in the RecordSet will be separated by a single newline character.")
 public class FreeFormTextRecordSetWriter extends AbstractControllerService implements RecordSetWriterFactory {
     static final PropertyDescriptor TEXT = new PropertyDescriptor.Builder()
         .name("Text")

File: nifi-mock/src/main/java/org/apache/nifi/util/MockProcessSession.java
Patch:
@@ -218,8 +218,8 @@ public void commit() {
                 }
             }
 
-            throw new FlowFileHandlingException("Cannot commit session because the following Input Streams were created via "
-                + "calls to ProcessSession.read(FlowFile) and never closed: " + openStreamCopy);
+            //            throw new FlowFileHandlingException("Cannot commit session because the following Input Streams were created via "
+            //                + "calls to ProcessSession.read(FlowFile) and never closed: " + openStreamCopy);
         }
 
         committed = true;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/NodeResponse.java
Patch:
@@ -239,7 +239,7 @@ private Response createResponse() {
 
         // if no client response was created, then generate a 500 response
         if (hasThrowable()) {
-            return Response.status(Status.INTERNAL_SERVER_ERROR).build();
+            return Response.status(Status.INTERNAL_SERVER_ERROR).entity(getThrowable().toString()).build();
         }
 
         // set the status

File: nifi-nar-bundles/nifi-websocket-bundle/nifi-websocket-services-jetty/src/main/java/org/apache/nifi/websocket/jetty/JettyWebSocketServer.java
Patch:
@@ -127,7 +127,7 @@ public void configure(WebSocketServletFactory webSocketServletFactory) {
         @Override
         public Object createWebSocket(ServletUpgradeRequest servletUpgradeRequest, ServletUpgradeResponse servletUpgradeResponse) {
             final URI requestURI = servletUpgradeRequest.getRequestURI();
-            final int port = requestURI.getPort();
+            final int port = servletUpgradeRequest.getLocalPort();
             final JettyWebSocketServer service = portToControllerService.get(port);
 
             if (service == null) {

File: nifi-framework-api/src/test/java/org/apache/nifi/bundle/BundleDetailsTest.java
Patch:
@@ -38,6 +38,8 @@ public void testBuilder() {
         final String buildJdk = "JDK8";
         final String builtBy = "bbende";
 
+        final boolean cloneDuringInstanceClassLoading = true;
+
         final BundleDetails bundleDetails = new BundleDetails.Builder()
                 .workingDir(workingDirectory)
                 .coordinate(coordinate)

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-documentation/src/test/java/org/apache/nifi/documentation/DocGeneratorTest.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.nifi.nar.ExtensionMapping;
 import org.apache.nifi.nar.NarClassLoaders;
 import org.apache.nifi.nar.NarUnpacker;
+import org.apache.nifi.nar.SystemBundle;
 import org.apache.nifi.util.NiFiProperties;
 import org.junit.Assert;
 import org.junit.Test;
@@ -47,7 +48,7 @@ public void testProcessorLoadsNarResources() throws IOException, ClassNotFoundEx
                 NiFiProperties.COMPONENT_DOCS_DIRECTORY,
                 temporaryFolder.getRoot().getAbsolutePath());
 
-        final Bundle systemBundle = ExtensionManager.createSystemBundle(properties);
+        final Bundle systemBundle = SystemBundle.create(properties);
         final ExtensionMapping mapping = NarUnpacker.unpackNars(properties, systemBundle);
 
         NarClassLoaders.getInstance().init(properties.getFrameworkWorkingDirectory(), properties.getExtensionsWorkingDirectory());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/integration/Node.java
Patch:
@@ -64,6 +64,7 @@
 import org.apache.nifi.io.socket.ServerSocketConfiguration;
 import org.apache.nifi.io.socket.SocketConfiguration;
 import org.apache.nifi.nar.ExtensionManager;
+import org.apache.nifi.nar.SystemBundle;
 import org.apache.nifi.registry.VariableRegistry;
 import org.apache.nifi.reporting.BulletinRepository;
 import org.apache.nifi.reporting.Severity;
@@ -120,7 +121,7 @@ public Set<String> getPropertyKeys() {
             }
         };
 
-        final Bundle systemBundle = ExtensionManager.createSystemBundle(properties);
+        final Bundle systemBundle = SystemBundle.create(properties);
         ExtensionManager.discoverExtensions(systemBundle, Collections.emptySet());
 
         revisionManager = Mockito.mock(RevisionManager.class);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/ProcessorNode.java
Patch:
@@ -47,8 +47,8 @@ public abstract class ProcessorNode extends AbstractConfiguredComponent implemen
     public ProcessorNode(final String id,
                          final ValidationContextFactory validationContextFactory, final ControllerServiceProvider serviceProvider,
                          final String componentType, final String componentCanonicalClass, final VariableRegistry variableRegistry,
-                         final boolean isExtensionMissing) {
-        super(id, validationContextFactory, serviceProvider, componentType, componentCanonicalClass, variableRegistry, isExtensionMissing);
+                         final ReloadComponent reloadComponent, final boolean isExtensionMissing) {
+        super(id, validationContextFactory, serviceProvider, componentType, componentCanonicalClass, variableRegistry, reloadComponent, isExtensionMissing);
         this.scheduledState = new AtomicReference<>(ScheduledState.STOPPED);
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/service/ControllerServiceProvider.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.nifi.controller.service;
 
+import java.net.URL;
 import java.util.Collection;
 import java.util.Set;
 
@@ -38,10 +39,11 @@ public interface ControllerServiceProvider extends ControllerServiceLookup {
      * @param type of service
      * @param id of service
      * @param bundleCoordinate the coordinate of the bundle for the service
+     * @param additionalUrls optional additional URL resources to add to the class loader of the component
      * @param firstTimeAdded for service
      * @return the service node
      */
-    ControllerServiceNode createControllerService(String type, String id, BundleCoordinate bundleCoordinate, boolean firstTimeAdded);
+    ControllerServiceNode createControllerService(String type, String id, BundleCoordinate bundleCoordinate, Set<URL> additionalUrls, boolean firstTimeAdded);
 
     /**
      * @param id of the service

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/groups/StandardProcessGroup.java
Patch:
@@ -767,7 +767,7 @@ public void run() {
         } finally {
             if (removed) {
                 try {
-                    ExtensionManager.removeInstanceClassLoaderIfExists(id);
+                    ExtensionManager.removeInstanceClassLoader(id);
                 } catch (Throwable t) {
                 }
             }
@@ -1914,7 +1914,7 @@ public void removeControllerService(final ControllerServiceNode service) {
         } finally {
             if (removed) {
                 try {
-                    ExtensionManager.removeInstanceClassLoaderIfExists(service.getIdentifier());
+                    ExtensionManager.removeInstanceClassLoader(service.getIdentifier());
                 } catch (Throwable t) {
                 }
             }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/service/StandardControllerServiceProviderTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.nifi.controller.ControllerService;
 import org.apache.nifi.nar.ExtensionManager;
 import org.apache.nifi.nar.NarClassLoaders;
+import org.apache.nifi.nar.SystemBundle;
 import org.apache.nifi.registry.VariableRegistry;
 import org.apache.nifi.reporting.InitializationException;
 import org.apache.nifi.util.FileBasedVariableRegistry;
@@ -48,7 +49,7 @@ public static void setupSuite() throws Exception {
         NarClassLoaders.getInstance().init(nifiProperties.getFrameworkWorkingDirectory(), nifiProperties.getExtensionsWorkingDirectory());
 
         // load the system bundle
-        systemBundle = ExtensionManager.createSystemBundle(nifiProperties);
+        systemBundle = SystemBundle.create(nifiProperties);
         ExtensionManager.discoverExtensions(systemBundle, NarClassLoaders.getInstance().getBundles());
 
         variableRegistry = new FileBasedVariableRegistry(nifiProperties.getVariableRegistryPropertiesPaths());
@@ -80,7 +81,7 @@ public void disableClusterProvider() {
             public void onComponentRemoved(String componentId) {
             }
         }, variableRegistry, nifiProperties);
-        ControllerServiceNode node = provider.createControllerService(clazz, id, systemBundle.getBundleDetails().getCoordinate(), true);
+        ControllerServiceNode node = provider.createControllerService(clazz, id, systemBundle.getBundleDetails().getCoordinate(), null, true);
         proxied = node.getProxiedControllerService();
         implementation = node.getControllerServiceImplementation();
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-nar-utils/src/main/java/org/apache/nifi/init/ControllerServiceInitializer.java
Patch:
@@ -53,7 +53,7 @@ public void teardown(ConfigurableComponent component) {
             final MockConfigurationContext context = new MockConfigurationContext();
             ReflectionUtils.quietlyInvokeMethodsWithAnnotation(OnShutdown.class, controllerService, logger, context);
         } finally {
-            ExtensionManager.removeInstanceClassLoaderIfExists(component.getIdentifier());
+            ExtensionManager.removeInstanceClassLoader(component.getIdentifier());
         }
     }
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-nar-utils/src/main/java/org/apache/nifi/init/ProcessorInitializer.java
Patch:
@@ -52,7 +52,7 @@ public void teardown(ConfigurableComponent component) {
             final MockProcessContext context = new MockProcessContext();
             ReflectionUtils.quietlyInvokeMethodsWithAnnotation(OnShutdown.class, processor, logger, context);
         } finally {
-            ExtensionManager.removeInstanceClassLoaderIfExists(component.getIdentifier());
+            ExtensionManager.removeInstanceClassLoader(component.getIdentifier());
         }
     }
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-nar-utils/src/main/java/org/apache/nifi/init/ReportingTaskingInitializer.java
Patch:
@@ -51,7 +51,7 @@ public void teardown(ConfigurableComponent component) {
             final MockConfigurationContext context = new MockConfigurationContext();
             ReflectionUtils.quietlyInvokeMethodsWithAnnotation(OnShutdown.class, reportingTask, new MockComponentLogger(), context);
         } finally {
-            ExtensionManager.removeInstanceClassLoaderIfExists(component.getIdentifier());
+            ExtensionManager.removeInstanceClassLoader(component.getIdentifier());
         }
     }
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-nar-utils/src/test/java/org/apache/nifi/nar/NarThreadContextClassLoaderTest.java
Patch:
@@ -36,7 +36,7 @@ public class NarThreadContextClassLoaderTest {
     @Test
     public void validateWithPropertiesConstructor() throws Exception {
         NiFiProperties properties = NiFiProperties.createBasicNiFiProperties("src/test/resources/nifi.properties", null);
-        Bundle systemBundle = ExtensionManager.createSystemBundle(properties);
+        Bundle systemBundle = SystemBundle.create(properties);
         ExtensionManager.discoverExtensions(systemBundle, Collections.emptySet());
 
         Object obj = NarThreadContextClassLoader.createInstance(WithPropertiesConstructor.class.getName(),
@@ -51,15 +51,15 @@ public void validateWithPropertiesConstructorInstantiationFailure() throws Excep
         Map<String, String> additionalProperties = new HashMap<>();
         additionalProperties.put("fail", "true");
         NiFiProperties properties = NiFiProperties.createBasicNiFiProperties("src/test/resources/nifi.properties", additionalProperties);
-        Bundle systemBundle = ExtensionManager.createSystemBundle(properties);
+        Bundle systemBundle = SystemBundle.create(properties);
         ExtensionManager.discoverExtensions(systemBundle, Collections.emptySet());
         NarThreadContextClassLoader.createInstance(WithPropertiesConstructor.class.getName(), WithPropertiesConstructor.class, properties);
     }
 
     @Test
     public void validateWithDefaultConstructor() throws Exception {
         NiFiProperties properties = NiFiProperties.createBasicNiFiProperties("src/test/resources/nifi.properties", null);
-        Bundle systemBundle = ExtensionManager.createSystemBundle(properties);
+        Bundle systemBundle = SystemBundle.create(properties);
         ExtensionManager.discoverExtensions(systemBundle, Collections.emptySet());
         assertTrue(NarThreadContextClassLoader.createInstance(WithDefaultConstructor.class.getName(),
                 WithDefaultConstructor.class, properties) instanceof WithDefaultConstructor);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-nar-utils/src/main/java/org/apache/nifi/nar/NarClassLoaders.java
Patch:
@@ -184,6 +184,7 @@ private InitContext load(final File frameworkWorkingDir, final File extensionsWo
                     jettyClassLoader = createNarClassLoader(narDetail.getWorkingDirectory(), systemClassLoader);
 
                     // remove the jetty nar since its already loaded
+                    narDirectoryBundleLookup.put(narDetail.getWorkingDirectory().getCanonicalPath(), new Bundle(narDetail, jettyClassLoader));
                     narCoordinateClassLoaderLookup.put(narDetail.getCoordinate().getCoordinate(), jettyClassLoader);
                     narDetailsIter.remove();
                 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-nar-utils/src/main/java/org/apache/nifi/nar/NarManifestEntry.java
Patch:
@@ -32,7 +32,7 @@ public enum NarManifestEntry {
     BUILD_BRANCH("Build-Branch"),
     BUILD_TIMESTAMP("Build-Timestamp"),
     BUILD_JDK("Build-Jdk"),
-    BUILT_BY("Built-By")
+    BUILT_BY("Built-By"),
     ;
 
     final String manifestName;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-nar-utils/src/test/java/org/apache/nifi/nar/NarBundleUtilTest.java
Patch:
@@ -16,16 +16,16 @@
  */
 package org.apache.nifi.nar;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-
 import org.apache.nifi.bundle.BundleCoordinate;
 import org.apache.nifi.bundle.BundleDetails;
 import org.junit.Test;
 
 import java.io.File;
 import java.io.IOException;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
+
 public class NarBundleUtilTest {
 
     @Test

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/AuthorizeControllerServiceReference.java
Patch:
@@ -37,7 +37,7 @@ public final class AuthorizeControllerServiceReference {
      * @param authorizer authorizer
      * @param lookup lookup
      */
-    public static void authorizeControllerServiceReferences(final ConfigurableComponentAuthorizable authorizable, final Authorizer authorizer,
+    public static void authorizeControllerServiceReferences(final ComponentAuthorizable authorizable, final Authorizer authorizer,
                                                             final AuthorizableLookup lookup, final boolean authorizeTransitiveServices) {
 
         // consider each property when looking for service references
@@ -50,7 +50,7 @@ public static void authorizeControllerServiceReferences(final ConfigurableCompon
                 // authorize the service if configured
                 if (serviceId != null) {
                     try {
-                        final ConfigurableComponentAuthorizable currentServiceAuthorizable = lookup.getControllerService(serviceId);
+                        final ComponentAuthorizable currentServiceAuthorizable = lookup.getControllerService(serviceId);
                         currentServiceAuthorizable.getAuthorizable().authorize(authorizer, RequestAction.READ, NiFiUserUtils.getNiFiUser());
 
                         if (authorizeTransitiveServices) {
@@ -72,7 +72,7 @@ public static void authorizeControllerServiceReferences(final ConfigurableCompon
      * @param authorizer authorizer
      * @param lookup lookup
      */
-    public static void authorizeControllerServiceReferences(final Map<String, String> proposedProperties, final ConfigurableComponentAuthorizable authorizable,
+    public static void authorizeControllerServiceReferences(final Map<String, String> proposedProperties, final ComponentAuthorizable authorizable,
                                                             final Authorizer authorizer, final AuthorizableLookup lookup) {
 
         // only attempt to authorize if properties are changing

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/ComponentAuthorizable.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * Authorizable for a component that references a ControllerService.
  */
-public interface ConfigurableComponentAuthorizable {
+public interface ComponentAuthorizable {
     /**
      * Returns the base authorizable for this ControllerServiceReference. Non null
      *

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/ProcessGroupAuthorizable.java
Patch:
@@ -36,7 +36,7 @@ public interface ProcessGroupAuthorizable {
      *
      * @return all encapsulated processors
      */
-    Set<ConfigurableComponentAuthorizable> getEncapsulatedProcessors();
+    Set<ComponentAuthorizable> getEncapsulatedProcessors();
 
     /**
      * The authorizables for all encapsulated connections. Non null
@@ -99,6 +99,6 @@ public interface ProcessGroupAuthorizable {
      *
      * @return all encapsulated input ports
      */
-    Set<ConfigurableComponentAuthorizable> getEncapsulatedControllerServices();
+    Set<ComponentAuthorizable> getEncapsulatedControllerServices();
 
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/SnippetAuthorizable.java
Patch:
@@ -36,7 +36,7 @@ public interface SnippetAuthorizable {
      *
      * @return processors
      */
-    Set<ConfigurableComponentAuthorizable> getSelectedProcessors();
+    Set<ComponentAuthorizable> getSelectedProcessors();
 
     /**
      * The authorizables for selected connections. Non null

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/TemplateContentsAuthorizable.java
Patch:
@@ -27,13 +27,13 @@ public interface TemplateContentsAuthorizable {
      *
      * @return temporary instances of all encapsulated processors
      */
-    Set<ConfigurableComponentAuthorizable> getEncapsulatedProcessors();
+    Set<ComponentAuthorizable> getEncapsulatedProcessors();
 
     /**
      * Returns temporary instances of all encapsulated controller services. Non null
      *
      * @return temporary instances of all encapsulated controller services
      */
-    Set<ConfigurableComponentAuthorizable> getEncapsulatedControllerServices();
+    Set<ComponentAuthorizable> getEncapsulatedControllerServices();
 
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ControllerServiceResource.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.commons.lang3.StringUtils;
 import org.apache.nifi.authorization.AuthorizeControllerServiceReference;
 import org.apache.nifi.authorization.Authorizer;
-import org.apache.nifi.authorization.ConfigurableComponentAuthorizable;
+import org.apache.nifi.authorization.ComponentAuthorizable;
 import org.apache.nifi.authorization.RequestAction;
 import org.apache.nifi.authorization.resource.Authorizable;
 import org.apache.nifi.authorization.user.NiFiUserUtils;
@@ -624,7 +624,7 @@ public Response updateControllerService(
                 requestRevision,
                 lookup -> {
                     // authorize the service
-                    final ConfigurableComponentAuthorizable authorizable = lookup.getControllerService(id);
+                    final ComponentAuthorizable authorizable = lookup.getControllerService(id);
                     authorizable.getAuthorizable().authorize(authorizer, RequestAction.WRITE, NiFiUserUtils.getNiFiUser());
 
                     // authorize any referenced services
@@ -710,7 +710,7 @@ public Response removeControllerService(
                 requestControllerServiceEntity,
                 requestRevision,
                 lookup -> {
-                    final ConfigurableComponentAuthorizable controllerService = lookup.getControllerService(id);
+                    final ComponentAuthorizable controllerService = lookup.getControllerService(id);
 
                     // ensure write permission to the controller service
                     controllerService.getAuthorizable().authorize(authorizer, RequestAction.WRITE, NiFiUserUtils.getNiFiUser());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessorResource.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.commons.lang3.StringUtils;
 import org.apache.nifi.authorization.AuthorizeControllerServiceReference;
 import org.apache.nifi.authorization.Authorizer;
-import org.apache.nifi.authorization.ConfigurableComponentAuthorizable;
+import org.apache.nifi.authorization.ComponentAuthorizable;
 import org.apache.nifi.authorization.RequestAction;
 import org.apache.nifi.authorization.resource.Authorizable;
 import org.apache.nifi.authorization.user.NiFiUser;
@@ -459,7 +459,7 @@ public Response updateProcessor(
                 lookup -> {
                     final NiFiUser user = NiFiUserUtils.getNiFiUser();
 
-                    final ConfigurableComponentAuthorizable authorizable = lookup.getProcessor(id);
+                    final ComponentAuthorizable authorizable = lookup.getProcessor(id);
                     authorizable.getAuthorizable().authorize(authorizer, RequestAction.WRITE, user);
 
                     final ProcessorConfigDTO config = requestProcessorDTO.getConfig();
@@ -543,7 +543,7 @@ public Response deleteProcessor(
                 requestProcessorEntity,
                 requestRevision,
                 lookup -> {
-                    final ConfigurableComponentAuthorizable processor = lookup.getProcessor(id);
+                    final ComponentAuthorizable processor = lookup.getProcessor(id);
 
                     // ensure write permission to the processor
                     processor.getAuthorizable().authorize(authorizer, RequestAction.WRITE, NiFiUserUtils.getNiFiUser());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ReportingTaskResource.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.commons.lang3.StringUtils;
 import org.apache.nifi.authorization.AuthorizeControllerServiceReference;
 import org.apache.nifi.authorization.Authorizer;
-import org.apache.nifi.authorization.ConfigurableComponentAuthorizable;
+import org.apache.nifi.authorization.ComponentAuthorizable;
 import org.apache.nifi.authorization.RequestAction;
 import org.apache.nifi.authorization.resource.Authorizable;
 import org.apache.nifi.authorization.user.NiFiUserUtils;
@@ -428,7 +428,7 @@ public Response updateReportingTask(
                 requestRevision,
                 lookup -> {
                     // authorize reporting task
-                    final ConfigurableComponentAuthorizable authorizable = lookup.getReportingTask(id);
+                    final ComponentAuthorizable authorizable = lookup.getReportingTask(id);
                     authorizable.getAuthorizable().authorize(authorizer, RequestAction.WRITE, NiFiUserUtils.getNiFiUser());
 
                     // authorize any referenced services
@@ -513,7 +513,7 @@ public Response removeReportingTask(
                 requestReportingTaskEntity,
                 requestRevision,
                 lookup -> {
-                    final ConfigurableComponentAuthorizable reportingTask = lookup.getReportingTask(id);
+                    final ComponentAuthorizable reportingTask = lookup.getReportingTask(id);
 
                     // ensure write permission to the reporting task
                     reportingTask.getAuthorizable().authorize(authorizer, RequestAction.WRITE, NiFiUserUtils.getNiFiUser());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardControllerServiceDAO.java
Patch:
@@ -77,7 +77,8 @@ public ControllerServiceNode createControllerService(final ControllerServiceDTO
         try {
             // create the controller service
             final ControllerServiceNode controllerService = serviceProvider.createControllerService(
-                    controllerServiceDTO.getType(), controllerServiceDTO.getId(), BundleUtils.getBundle(controllerServiceDTO.getType(), controllerServiceDTO.getBundle()), true);
+                    controllerServiceDTO.getType(), controllerServiceDTO.getId(), BundleUtils.getBundle(controllerServiceDTO.getType(),
+                            controllerServiceDTO.getBundle()), Collections.emptySet(), true);
 
             // ensure we can perform the update
             verifyUpdate(controllerService, controllerServiceDTO);
@@ -170,7 +171,7 @@ private void updateBundle(final ControllerServiceNode controllerService, final C
         if (bundleDTO != null) {
             final BundleCoordinate incomingCoordinate = BundleUtils.getBundle(controllerService.getCanonicalClassName(), bundleDTO);
             try {
-                flowController.changeControllerServiceType(controllerService, controllerService.getCanonicalClassName(), incomingCoordinate);
+                flowController.reload(controllerService, controllerService.getCanonicalClassName(), incomingCoordinate, Collections.emptySet());
             } catch (ControllerServiceInstantiationException e) {
                 throw new NiFiCoreException(String.format("Unable to update controller service %s from %s to %s due to: %s",
                         controllerServiceDTO.getId(), controllerService.getBundleCoordinate().getCoordinate(), incomingCoordinate.getCoordinate(), e.getMessage()), e);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardProcessorDAO.java
Patch:
@@ -48,6 +48,7 @@
 
 import java.text.ParseException;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
@@ -453,7 +454,7 @@ private void updateBundle(ProcessorNode processor, ProcessorDTO processorDTO) {
         if (bundleDTO != null) {
             BundleCoordinate incomingCoordinate = BundleUtils.getBundle(processor.getCanonicalClassName(), bundleDTO);
             try {
-                flowController.changeProcessorType(processor, processor.getCanonicalClassName(), incomingCoordinate);
+                flowController.reload(processor, processor.getCanonicalClassName(), incomingCoordinate, Collections.emptySet());
             } catch (ProcessorInstantiationException e) {
                 throw new NiFiCoreException(String.format("Unable to update processor %s from %s to %s due to: %s",
                         processorDTO.getId(), processor.getBundleCoordinate().getCoordinate(), incomingCoordinate.getCoordinate(), e.getMessage()), e);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/integration/accesscontrol/AccessControlHelper.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.nifi.integration.util.NiFiTestUser;
 import org.apache.nifi.nar.ExtensionManager;
 import org.apache.nifi.nar.NarClassLoaders;
+import org.apache.nifi.nar.SystemBundle;
 import org.apache.nifi.util.NiFiProperties;
 
 import java.io.File;
@@ -64,7 +65,7 @@ public AccessControlHelper(final String nifiPropertiesPath) throws Exception {
         flowXmlPath = props.getProperty(NiFiProperties.FLOW_CONFIGURATION_FILE);
 
         // load extensions
-        final Bundle systemBundle = ExtensionManager.createSystemBundle(props);
+        final Bundle systemBundle = SystemBundle.create(props);
         NarClassLoaders.getInstance().init(props.getFrameworkWorkingDirectory(), props.getExtensionsWorkingDirectory());
         ExtensionManager.discoverExtensions(systemBundle, NarClassLoaders.getInstance().getBundles());
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/integration/accesscontrol/ITAccessTokenEndpoint.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.nifi.integration.util.SourceTestProcessor;
 import org.apache.nifi.nar.ExtensionManager;
 import org.apache.nifi.nar.NarClassLoaders;
+import org.apache.nifi.nar.SystemBundle;
 import org.apache.nifi.security.util.SslContextFactory;
 import org.apache.nifi.util.NiFiProperties;
 import org.apache.nifi.web.api.dto.AccessConfigurationDTO;
@@ -71,7 +72,7 @@ public static void setup() throws Exception {
         FileUtils.deleteDirectory(props.getDatabaseRepositoryPath().toFile());
 
         // load extensions
-        final Bundle systemBundle = ExtensionManager.createSystemBundle(props);
+        final Bundle systemBundle = SystemBundle.create(props);
         NarClassLoaders.getInstance().init(props.getFrameworkWorkingDirectory(), props.getExtensionsWorkingDirectory());
         ExtensionManager.discoverExtensions(systemBundle, NarClassLoaders.getInstance().getBundles());
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/web/StandardNiFiServiceFacadeTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.nifi.authorization.AuthorizationRequest;
 import org.apache.nifi.authorization.AuthorizationResult;
 import org.apache.nifi.authorization.Authorizer;
-import org.apache.nifi.authorization.ConfigurableComponentAuthorizable;
+import org.apache.nifi.authorization.ComponentAuthorizable;
 import org.apache.nifi.authorization.Resource;
 import org.apache.nifi.authorization.resource.Authorizable;
 import org.apache.nifi.authorization.resource.ResourceFactory;
@@ -114,7 +114,7 @@ public void setUp() throws Exception {
             }
 
             // component authorizable
-            final ConfigurableComponentAuthorizable componentAuthorizable = mock(ConfigurableComponentAuthorizable.class);
+            final ComponentAuthorizable componentAuthorizable = mock(ComponentAuthorizable.class);
             when(componentAuthorizable.getAuthorizable()).then(getAuthorizableInvocation -> {
 
                 // authorizable

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-reporting-tasks/src/test/java/org/apache/nifi/controller/MonitorMemoryTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.nifi.bundle.Bundle;
 import org.apache.nifi.controller.repository.FlowFileEventRepository;
 import org.apache.nifi.nar.ExtensionManager;
+import org.apache.nifi.nar.SystemBundle;
 import org.apache.nifi.provenance.MockProvenanceRepository;
 import org.apache.nifi.util.CapturingLogger;
 import org.apache.nifi.util.NiFiProperties;
@@ -151,7 +152,7 @@ private Tuple<FlowController, Bundle> buildFlowControllerForTest(final Map<Strin
         final NiFiProperties nifiProperties = NiFiProperties.createBasicNiFiProperties(null, addProps);
 
         // build the system bundle
-        final Bundle bundle = ExtensionManager.createSystemBundle(nifiProperties);
+        final Bundle bundle = SystemBundle.create(nifiProperties);
         ExtensionManager.discoverExtensions(bundle, Collections.emptySet());
 
         return new Tuple<>(FlowController.createStandaloneInstance(

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/main/java/org/apache/nifi/processors/hadoop/ListHDFS.java
Patch:
@@ -64,7 +64,7 @@
 @InputRequirement(Requirement.INPUT_FORBIDDEN)
 @Tags({"hadoop", "HDFS", "get", "list", "ingest", "source", "filesystem"})
 @CapabilityDescription("Retrieves a listing of files from HDFS. For each file that is listed in HDFS, creates a FlowFile that represents "
-        + "the HDFS file so that it can be fetched in conjunction with ListHDFS. This Processor is designed to run on Primary Node only "
+        + "the HDFS file so that it can be fetched in conjunction with FetchHDFS. This Processor is designed to run on Primary Node only "
         + "in a cluster. If the primary node changes, the new Primary Node will pick up where the previous node left off without duplicating "
         + "all of the data. Unlike GetHDFS, this Processor does not delete any data from HDFS.")
 @WritesAttributes({

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/main/java/org/apache/nifi/authorization/FlowParser.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.commons.io.IOUtils;
 import org.apache.nifi.controller.serialization.FlowFromDOMFactory;
+import org.apache.nifi.util.LoggingXmlParserErrorHandler;
 import org.apache.nifi.web.api.dto.PortDTO;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -101,6 +102,7 @@ public FlowInfo parse(final File flowConfigurationFile) {
 
             // parse the flow
             final DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
+            docBuilder.setErrorHandler(new LoggingXmlParserErrorHandler("Flow Configuration", logger));
             final Document document = docBuilder.parse(new ByteArrayInputStream(flowBytes));
 
             // extract the root group id

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/StandardFlowSynchronizer.java
Patch:
@@ -65,6 +65,7 @@
 import org.apache.nifi.scheduling.SchedulingStrategy;
 import org.apache.nifi.util.BundleUtils;
 import org.apache.nifi.util.DomUtils;
+import org.apache.nifi.util.LoggingXmlParserErrorHandler;
 import org.apache.nifi.util.NiFiProperties;
 import org.apache.nifi.util.file.FileUtils;
 import org.apache.nifi.web.api.dto.BundleDTO;
@@ -544,6 +545,7 @@ private static Document parseFlowBytes(final byte[] flow) throws FlowSerializati
             docFactory.setSchema(schema);
 
             final DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
+            docBuilder.setErrorHandler(new LoggingXmlParserErrorHandler("Flow Configuration", logger));
 
             // parse flow
             return (flow == null || flow.length == 0) ? null : docBuilder.parse(new ByteArrayInputStream(flow));

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/fingerprint/FingerprintFactory.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.nifi.controller.FlowController;
 import org.apache.nifi.controller.exception.ProcessorInstantiationException;
 import org.apache.nifi.controller.serialization.FlowFromDOMFactory;
+import org.apache.nifi.util.LoggingXmlParserErrorHandler;
 import org.apache.nifi.encrypt.StringEncryptor;
 import org.apache.nifi.nar.ExtensionManager;
 import org.apache.nifi.processor.Processor;
@@ -105,6 +106,7 @@ public FingerprintFactory(final StringEncryptor encryptor) {
         try {
             documentBuilderFactory.setSchema(schema);
             flowConfigDocBuilder = documentBuilderFactory.newDocumentBuilder();
+            flowConfigDocBuilder.setErrorHandler(new LoggingXmlParserErrorHandler("Flow Configuration", logger));
         } catch (final Exception e) {
             throw new RuntimeException("Failed to create document builder for flow configuration.", e);
         }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-documentation/src/main/java/org/apache/nifi/documentation/html/HtmlDocumentationWriter.java
Patch:
@@ -366,7 +366,7 @@ protected void writeProperties(final ConfigurableComponent configurableComponent
                     xmlStreamWriter.writeCharacters(", ");
                 }
                 xmlStreamWriter.writeCharacters("whether a property supports the ");
-                writeLink(xmlStreamWriter, "NiFi Expression Language", "../../html/expression-language-guide.html");
+                writeLink(xmlStreamWriter, "NiFi Expression Language", "/nifi-docs/html/expression-language-guide.html");
             }
             if (containsSensitiveProperties) {
                 xmlStreamWriter.writeCharacters(", and whether a property is considered " + "\"sensitive\", meaning that its value will be encrypted. Before entering a "
@@ -524,7 +524,7 @@ private void writeValidValueDescription(XMLStreamWriter xmlStreamWriter, String
             throws XMLStreamException {
         xmlStreamWriter.writeCharacters(" ");
         xmlStreamWriter.writeStartElement("img");
-        xmlStreamWriter.writeAttribute("src", "../../html/images/iconInfo.png");
+        xmlStreamWriter.writeAttribute("src", "/nifi-docs/html/images/iconInfo.png");
         xmlStreamWriter.writeAttribute("alt", description);
         xmlStreamWriter.writeAttribute("title", description);
         xmlStreamWriter.writeEndElement();

File: nifi-api/src/main/java/org/apache/nifi/components/ConfigurableComponent.java
Patch:
@@ -80,4 +80,5 @@ public interface ConfigurableComponent {
      * component
      */
     String getIdentifier();
+
 }

File: nifi-bootstrap/src/main/java/org/apache/nifi/bootstrap/notification/AbstractNotificationService.java
Patch:
@@ -34,4 +34,5 @@ protected void init(final NotificationInitializationContext context) {
     public String getIdentifier() {
         return identifier;
     }
+
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/TemplateDTO.java
Patch:
@@ -29,7 +29,7 @@
  */
 @XmlRootElement(name = "template")
 public class TemplateDTO {
-    public static final String MAX_ENCODING_VERSION = "1.0";
+    public static final String MAX_ENCODING_VERSION = "1.1";
 
     private String uri;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-documentation/src/main/java/org/apache/nifi/documentation/html/HtmlDocumentationWriter.java
Patch:
@@ -91,7 +91,7 @@ protected void writeHead(final ConfigurableComponent configurableComponent,
 
         xmlStreamWriter.writeStartElement("link");
         xmlStreamWriter.writeAttribute("rel", "stylesheet");
-        xmlStreamWriter.writeAttribute("href", "../../css/component-usage.css");
+        xmlStreamWriter.writeAttribute("href", "/nifi-docs/css/component-usage.css");
         xmlStreamWriter.writeAttribute("type", "text/css");
         xmlStreamWriter.writeEndElement();
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-documentation/src/test/java/org/apache/nifi/documentation/html/ProcessorDocumentationWriterTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.nifi.documentation.example.FullyDocumentedProcessor;
 import org.apache.nifi.documentation.example.NakedProcessor;
 import org.apache.nifi.documentation.example.ProcessorWithLogger;
-import org.apache.nifi.documentation.init.ProcessorInitializer;
+import org.apache.nifi.init.ProcessorInitializer;
 import org.junit.Assert;
 import org.junit.Test;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/jaxb/message/DataFlowAdapter.java
Patch:
@@ -33,14 +33,15 @@ public AdaptedDataFlow marshal(final DataFlow df) {
             aDf.setFlow(df.getFlow());
             aDf.setSnippets(df.getSnippets());
             aDf.setAuthorizerFingerprint(df.getAuthorizerFingerprint());
+            aDf.setMissingComponents(df.getMissingComponents());
         }
 
         return aDf;
     }
 
     @Override
     public DataFlow unmarshal(final AdaptedDataFlow aDf) {
-        final StandardDataFlow dataFlow = new StandardDataFlow(aDf.getFlow(), aDf.getSnippets(), aDf.getAuthorizerFingerprint());
+        final StandardDataFlow dataFlow = new StandardDataFlow(aDf.getFlow(), aDf.getSnippets(), aDf.getAuthorizerFingerprint(), aDf.getMissingComponents());
         return dataFlow;
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/test/java/org/apache/nifi/cluster/protocol/jaxb/message/TestJaxbProtocolUtils.java
Patch:
@@ -24,6 +24,7 @@
 import java.io.ByteArrayOutputStream;
 import java.util.Collections;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.stream.IntStream;
@@ -57,7 +58,7 @@ public void testRoundTripConnectionResponse() throws JAXBException {
 
         final ConnectionResponseMessage msg = new ConnectionResponseMessage();
         final NodeIdentifier nodeId = new NodeIdentifier("id", "localhost", 8000, "localhost", 8001, "localhost", 8002, 8003, true);
-        final DataFlow dataFlow = new StandardDataFlow(new byte[0], new byte[0], new byte[0]);
+        final DataFlow dataFlow = new StandardDataFlow(new byte[0], new byte[0], new byte[0], new HashSet<>());
         final List<NodeConnectionStatus> nodeStatuses = Collections.singletonList(new NodeConnectionStatus(nodeId, DisconnectionCode.NOT_YET_CONNECTED));
         final List<ComponentRevision> componentRevisions = Collections.singletonList(ComponentRevision.fromRevision(new Revision(8L, "client-1", "component-1")));
         msg.setConnectionResponse(new ConnectionResponse(nodeId, dataFlow, "instance-1", nodeStatuses, componentRevisions));

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/node/NodeClusterCoordinator.java
Patch:
@@ -703,7 +703,7 @@ public void run() {
                         }
 
                         if (includeDataFlow) {
-                            request.setDataFlow(new StandardDataFlow(flowService.createDataFlow()));
+                            request.setDataFlow(new StandardDataFlow(flowService.createDataFlowFromController()));
                         }
 
                         request.setNodeConnectionStatuses(getConnectionStatuses());
@@ -889,7 +889,7 @@ private ConnectionResponseMessage createConnectionResponse(final ConnectionReque
         DataFlow dataFlow = null;
         if (flowService != null) {
             try {
-                dataFlow = flowService.createDataFlow();
+                dataFlow = flowService.createDataFlowFromController();
             } catch (final IOException ioe) {
                 logger.error("Unable to obtain current dataflow from FlowService in order to provide the flow to "
                     + resolvedNodeIdentifier + ". Will tell node to try again later", ioe);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/coordination/flow/TestPopularVoteFlowElection.java
Patch:
@@ -26,6 +26,7 @@
 import java.io.IOException;
 import java.nio.file.Files;
 import java.nio.file.Paths;
+import java.util.HashSet;
 import java.util.UUID;
 import java.util.concurrent.TimeUnit;
 
@@ -139,6 +140,6 @@ private NodeIdentifier createNodeId(final int index) {
     }
 
     private DataFlow createDataFlow(final byte[] flow) {
-        return new StandardDataFlow(flow, new byte[0], new byte[0]);
+        return new StandardDataFlow(flow, new byte[0], new byte[0], new HashSet<>());
     }
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/integration/NopStateProvider.java
Patch:
@@ -112,4 +112,5 @@ public boolean isEnabled() {
     public Scope[] getSupportedScopes() {
         return new Scope[] {Scope.LOCAL};
     }
+
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/ReportingTaskNode.java
Patch:
@@ -47,6 +47,8 @@ public interface ReportingTaskNode extends ConfiguredComponent {
 
     ReportingTask getReportingTask();
 
+    void setReportingTask(LoggableComponent<ReportingTask> reportingTask);
+
     ReportingContext getReportingContext();
 
     ConfigurationContext getConfigurationContext();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/exception/ProcessorInstantiationException.java
Patch:
@@ -24,4 +24,7 @@ public ProcessorInstantiationException(final String className, final Throwable t
         super(className, t);
     }
 
+    public ProcessorInstantiationException(final String className) {
+        super(className);
+    }
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/service/ControllerServiceProvider.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Set;
 
 import org.apache.nifi.annotation.lifecycle.OnAdded;
+import org.apache.nifi.bundle.BundleCoordinate;
 import org.apache.nifi.controller.ConfiguredComponent;
 import org.apache.nifi.controller.ControllerService;
 import org.apache.nifi.controller.ControllerServiceLookup;
@@ -36,10 +37,11 @@ public interface ControllerServiceProvider extends ControllerServiceLookup {
      *
      * @param type of service
      * @param id of service
+     * @param bundleCoordinate the coordinate of the bundle for the service
      * @param firstTimeAdded for service
      * @return the service node
      */
-    ControllerServiceNode createControllerService(String type, String id, boolean firstTimeAdded);
+    ControllerServiceNode createControllerService(String type, String id, BundleCoordinate bundleCoordinate, boolean firstTimeAdded);
 
     /**
      * @param id of the service

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/FlowSynchronizer.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.nifi.cluster.protocol.DataFlow;
 import org.apache.nifi.controller.FlowController;
+import org.apache.nifi.controller.MissingBundleException;
 import org.apache.nifi.controller.UninheritableFlowException;
 import org.apache.nifi.encrypt.StringEncryptor;
 
@@ -38,8 +39,9 @@ public interface FlowSynchronizer {
      * @throws FlowSerializationException if proposed flow is not a valid flow configuration file
      * @throws UninheritableFlowException if the proposed flow cannot be loaded by the controller because in doing so would risk orphaning flow files
      * @throws FlowSynchronizationException if updates to the controller failed. If this exception is thrown, then the controller should be considered unsafe to be used
+     * @throws MissingBundleException if the proposed flow cannot be loaded by the controller because it contains a bundle that is not available to the controller
      */
     void sync(FlowController controller, DataFlow dataFlow, StringEncryptor encryptor)
-            throws FlowSerializationException, UninheritableFlowException, FlowSynchronizationException;
+            throws FlowSerializationException, UninheritableFlowException, FlowSynchronizationException, MissingBundleException;
 
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/FlowConfigurationDAO.java
Patch:
@@ -22,6 +22,7 @@
 
 import org.apache.nifi.cluster.protocol.DataFlow;
 import org.apache.nifi.controller.FlowController;
+import org.apache.nifi.controller.MissingBundleException;
 import org.apache.nifi.controller.UninheritableFlowException;
 import org.apache.nifi.controller.serialization.FlowSerializationException;
 import org.apache.nifi.controller.serialization.FlowSynchronizationException;
@@ -49,9 +50,10 @@ public interface FlowConfigurationDAO {
      * @throws FlowSerializationException if proposed flow is not a valid flow configuration file
      * @throws UninheritableFlowException if the proposed flow cannot be loaded by the controller because in doing so would risk orphaning flow files
      * @throws FlowSynchronizationException if updates to the controller failed. If this exception is thrown, then the controller should be considered unsafe to be used
+     * @throws MissingBundleException if the proposed flow cannot be loaded by the controller because it contains a bundle that does not exist in the controller
      */
     void load(FlowController controller, DataFlow dataFlow)
-            throws IOException, FlowSerializationException, FlowSynchronizationException, UninheritableFlowException;
+            throws IOException, FlowSerializationException, FlowSynchronizationException, UninheritableFlowException, MissingBundleException;
 
     /**
      * Loads the stored flow onto the given stream.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/StandardXMLFlowConfigurationDAO.java
Patch:
@@ -28,6 +28,7 @@
 
 import org.apache.nifi.cluster.protocol.DataFlow;
 import org.apache.nifi.controller.FlowController;
+import org.apache.nifi.controller.MissingBundleException;
 import org.apache.nifi.controller.StandardFlowSynchronizer;
 import org.apache.nifi.controller.UninheritableFlowException;
 import org.apache.nifi.controller.serialization.FlowSerializationException;
@@ -77,7 +78,7 @@ public boolean isFlowPresent() {
 
     @Override
     public synchronized void load(final FlowController controller, final DataFlow dataFlow)
-            throws IOException, FlowSerializationException, FlowSynchronizationException, UninheritableFlowException {
+            throws IOException, FlowSerializationException, FlowSynchronizationException, UninheritableFlowException, MissingBundleException {
 
         final FlowSynchronizer flowSynchronizer = new StandardFlowSynchronizer(encryptor, nifiProperties);
         controller.synchronize(flowSynchronizer, dataFlow);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/processor/GhostProcessor.java
Patch:
@@ -79,6 +79,7 @@ public String getIdentifier() {
 
     @Override
     public void initialize(final ProcessorInitializationContext context) {
+
     }
 
     @Override
@@ -96,4 +97,5 @@ public void onTrigger(ProcessContext context, ProcessSessionFactory sessionFacto
     public String toString() {
         return "GhostProcessor[id=" + id + "]";
     }
+
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/reporting/GhostReportingTask.java
Patch:
@@ -24,12 +24,14 @@
 import org.apache.nifi.components.PropertyDescriptor;
 import org.apache.nifi.components.ValidationContext;
 import org.apache.nifi.components.ValidationResult;
+import org.apache.nifi.logging.ComponentLog;
 import org.apache.nifi.processor.exception.ProcessException;
 
 public class GhostReportingTask implements ReportingTask {
 
     private String id;
     private String canonicalClassName;
+    private ComponentLog logger;
 
     public void setIdentifier(final String id) {
         this.id = id;
@@ -84,6 +86,7 @@ public String toString() {
 
     @Override
     public void initialize(ReportingInitializationContext config) throws InitializationException {
+        this.logger = config.getLogger();
     }
 
     @Override

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-nar-utils/src/main/java/org/apache/nifi/init/ConfigurableComponentInitializer.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.documentation;
+package org.apache.nifi.init;
 
 import org.apache.nifi.components.ConfigurableComponent;
 import org.apache.nifi.reporting.InitializationException;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-nar-utils/src/main/java/org/apache/nifi/mock/MockComponentLogger.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.documentation.mock;
+package org.apache.nifi.mock;
 
 import org.apache.nifi.logging.ComponentLog;
 import org.apache.nifi.logging.LogLevel;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-nar-utils/src/main/java/org/apache/nifi/mock/MockControllerServiceInitializationContext.java
Patch:
@@ -14,14 +14,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.documentation.mock;
+package org.apache.nifi.mock;
 
-import java.io.File;
 import org.apache.nifi.components.state.StateManager;
 import org.apache.nifi.controller.ControllerServiceInitializationContext;
 import org.apache.nifi.controller.ControllerServiceLookup;
 import org.apache.nifi.logging.ComponentLog;
 
+import java.io.File;
+
 /**
  * A Mock ControllerServiceInitializationContext so that ControllerServices can
  * be initialized for the purpose of generating documentation.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-nar-utils/src/main/java/org/apache/nifi/mock/MockNodeTypeProvider.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.documentation.mock;
+package org.apache.nifi.mock;
 
 import org.apache.nifi.controller.NodeTypeProvider;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-nar-utils/src/main/java/org/apache/nifi/mock/MockProcessorInitializationContext.java
Patch:
@@ -14,14 +14,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.documentation.mock;
+package org.apache.nifi.mock;
 
-import java.io.File;
 import org.apache.nifi.controller.ControllerServiceLookup;
 import org.apache.nifi.controller.NodeTypeProvider;
 import org.apache.nifi.logging.ComponentLog;
 import org.apache.nifi.processor.ProcessorInitializationContext;
 
+import java.io.File;
+
 /**
  * A Mock ProcessorInitializationContext that can be used so that Processors can
  * be initialized for the purpose of generating documentation.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/audit/SnippetAuditor.java
Patch:
@@ -94,7 +94,7 @@ public class SnippetAuditor extends NiFiAuditor {
      * @throws Throwable ex
      */
     @Around("within(org.apache.nifi.web.dao.SnippetDAO+) && "
-            + "execution(org.apache.nifi.web.api.dto.FlowSnippetDTO copySnippet(java.lang.String, java.lang.String, java.lang.Double, java.lang.Double))")
+            + "execution(org.apache.nifi.web.api.dto.FlowSnippetDTO copySnippet(java.lang.String, java.lang.String, java.lang.Double, java.lang.Double, java.lang.String))")
     public FlowSnippetDTO copySnippetAdvice(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {
         // perform the underlying operation
         FlowSnippetDTO snippet = (FlowSnippetDTO) proceedingJoinPoint.proceed();
@@ -110,7 +110,8 @@ public FlowSnippetDTO copySnippetAdvice(ProceedingJoinPoint proceedingJoinPoint)
      * @throws Throwable ex
      */
     @Around("within(org.apache.nifi.web.dao.TemplateDAO+) && "
-            + "execution(org.apache.nifi.web.api.dto.FlowSnippetDTO instantiateTemplate(java.lang.String, java.lang.Double, java.lang.Double, java.lang.String))")
+            + "execution(org.apache.nifi.web.api.dto.FlowSnippetDTO instantiateTemplate("
+            + "java.lang.String, java.lang.Double, java.lang.Double, java.lang.String, org.apache.nifi.web.api.dto.FlowSnippetDTO, java.lang.String))")
     public FlowSnippetDTO instantiateTemplateAdvice(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {
         // perform the underlying operation
         FlowSnippetDTO snippet = (FlowSnippetDTO) proceedingJoinPoint.proceed();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/TemplateResource.java
Patch:
@@ -122,7 +122,7 @@ public Response exportTemplate(
 
         // authorize access
         serviceFacade.authorizeAccess(lookup -> {
-            final Authorizable template = lookup.getTemplate(id).getAuthorizable();
+            final Authorizable template = lookup.getTemplate(id);
             template.authorize(authorizer, RequestAction.READ, NiFiUserUtils.getNiFiUser());
         });
 
@@ -197,7 +197,7 @@ public Response removeTemplate(
                 serviceFacade,
                 requestTemplateEntity,
                 lookup -> {
-                    final Authorizable template = lookup.getTemplate(id).getAuthorizable();
+                    final Authorizable template = lookup.getTemplate(id);
 
                     // ensure write permission to the template
                     template.authorize(authorizer, RequestAction.WRITE, NiFiUserUtils.getNiFiUser());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/TemplateDAO.java
Patch:
@@ -63,11 +63,12 @@ public interface TemplateDAO {
      * @param groupId group id
      * @param originX x
      * @param originY y
-     * @param templateId template id
+     * @param templateEncodingVersion template encoding version
+     * @param snippet template snippet
      * @param idGenerationSeed the seed to use for generating UUID's. May be null.
      * @return flow snippet
      */
-    FlowSnippetDTO instantiateTemplate(String groupId, Double originX, Double originY, String templateId, String idGenerationSeed);
+    FlowSnippetDTO instantiateTemplate(String groupId, Double originX, Double originY, String templateEncodingVersion, FlowSnippetDTO snippet, String idGenerationSeed);
 
     /**
      * Gets the specified template.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/integration/accesscontrol/AccessControlHelper.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.nifi.integration.accesscontrol;
 
 import com.sun.jersey.api.client.ClientResponse;
+import org.apache.nifi.bundle.Bundle;
 import org.apache.nifi.integration.NiFiWebApiTest;
 import org.apache.nifi.integration.util.NiFiTestAuthorizer;
 import org.apache.nifi.integration.util.NiFiTestServer;
@@ -63,8 +64,9 @@ public AccessControlHelper(final String nifiPropertiesPath) throws Exception {
         flowXmlPath = props.getProperty(NiFiProperties.FLOW_CONFIGURATION_FILE);
 
         // load extensions
+        final Bundle systemBundle = ExtensionManager.createSystemBundle(props);
         NarClassLoaders.getInstance().init(props.getFrameworkWorkingDirectory(), props.getExtensionsWorkingDirectory());
-        ExtensionManager.discoverExtensions(NarClassLoaders.getInstance().getExtensionClassLoaders());
+        ExtensionManager.discoverExtensions(systemBundle, NarClassLoaders.getInstance().getBundles());
 
         // start the server
         server = new NiFiTestServer("src/main/webapp", CONTEXT_PATH, props);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/integration/accesscontrol/ITAccessTokenEndpoint.java
Patch:
@@ -19,6 +19,7 @@
 import com.sun.jersey.api.client.Client;
 import com.sun.jersey.api.client.ClientResponse;
 import org.apache.commons.io.FileUtils;
+import org.apache.nifi.bundle.Bundle;
 import org.apache.nifi.integration.util.NiFiTestServer;
 import org.apache.nifi.integration.util.NiFiTestUser;
 import org.apache.nifi.integration.util.SourceTestProcessor;
@@ -70,8 +71,9 @@ public static void setup() throws Exception {
         FileUtils.deleteDirectory(props.getDatabaseRepositoryPath().toFile());
 
         // load extensions
+        final Bundle systemBundle = ExtensionManager.createSystemBundle(props);
         NarClassLoaders.getInstance().init(props.getFrameworkWorkingDirectory(), props.getExtensionsWorkingDirectory());
-        ExtensionManager.discoverExtensions(NarClassLoaders.getInstance().getExtensionClassLoaders());
+        ExtensionManager.discoverExtensions(systemBundle, NarClassLoaders.getInstance().getBundles());
 
         // start the server
         SERVER = new NiFiTestServer("src/main/webapp", CONTEXT_PATH, props);

File: nifi-nar-bundles/nifi-standard-services/nifi-distributed-cache-services-bundle/nifi-distributed-cache-server/src/main/java/org/apache/nifi/distributed/cache/server/map/PersistentMapCache.java
Patch:
@@ -23,7 +23,6 @@
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -80,7 +79,7 @@ protected void putWriteAheadLog(ByteBuffer key, ByteBuffer value, MapPutResult p
                 records.add(new MapWaliRecord(UpdateType.DELETE, evicted.getKey(), evicted.getValue()));
             }
 
-            wali.update(Collections.singletonList(record), false);
+            wali.update(records, false);
 
             final long modCount = modifications.getAndIncrement();
             if ( modCount > 0 && modCount % 100000 == 0 ) {

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/main/java/org/apache/nifi/processors/hadoop/PutHDFS.java
Patch:
@@ -27,7 +27,6 @@
 import org.apache.nifi.annotation.behavior.InputRequirement.Requirement;
 import org.apache.nifi.annotation.behavior.ReadsAttribute;
 import org.apache.nifi.annotation.behavior.Restricted;
-import org.apache.nifi.annotation.behavior.RequiresInstanceClassLoading;
 import org.apache.nifi.annotation.behavior.WritesAttribute;
 import org.apache.nifi.annotation.behavior.WritesAttributes;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
@@ -68,7 +67,6 @@
 /**
  * This processor copies FlowFiles to HDFS.
  */
-@RequiresInstanceClassLoading
 @InputRequirement(Requirement.INPUT_REQUIRED)
 @Tags({"hadoop", "HDFS", "put", "copy", "filesystem", "restricted"})
 @CapabilityDescription("Write FlowFile data to Hadoop Distributed File System (HDFS)")

File: nifi-nar-bundles/nifi-hive-bundle/nifi-hive-processors/src/main/java/org/apache/nifi/dbcp/hive/HiveConnectionPool.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.security.UserGroupInformation;
 import org.apache.hive.jdbc.HiveDriver;
+import org.apache.nifi.annotation.behavior.RequiresInstanceClassLoading;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.Tags;
 import org.apache.nifi.annotation.lifecycle.OnDisabled;
@@ -59,6 +60,7 @@
  * Implementation for Database Connection Pooling Service used for Apache Hive
  * connections. Apache DBCP is used for connection pooling functionality.
  */
+@RequiresInstanceClassLoading
 @Tags({"hive", "dbcp", "jdbc", "database", "connection", "pooling", "store"})
 @CapabilityDescription("Provides Database Connection Pooling Service for Apache Hive. Connections can be asked from pool and returned after usage.")
 public class HiveConnectionPool extends AbstractControllerService implements HiveDBCPService {

File: nifi-commons/nifi-hadoop-utils/src/main/java/org/apache/nifi/hadoop/SecurityUtil.java
Patch:
@@ -28,6 +28,8 @@
  * interfering with each other.
  */
 public class SecurityUtil {
+    public static final String HADOOP_SECURITY_AUTHENTICATION = "hadoop.security.authentication";
+    public static final String KERBEROS = "kerberos";
 
     /**
      * Initializes UserGroupInformation with the given Configuration and performs the login for the given principal
@@ -81,7 +83,7 @@ public static synchronized UserGroupInformation loginSimple(final Configuration
      */
     public static boolean isSecurityEnabled(final Configuration config) {
         Validate.notNull(config);
-        return "kerberos".equalsIgnoreCase(config.get("hadoop.security.authentication"));
+        return KERBEROS.equalsIgnoreCase(config.get(HADOOP_SECURITY_AUTHENTICATION));
     }
 
     /**

File: nifi-nar-bundles/nifi-hive-bundle/nifi-hive-processors/src/main/java/org/apache/nifi/util/hive/HiveConfigurator.java
Patch:
@@ -74,7 +74,8 @@ public HiveConf getConfigurationFromFiles(final String configFiles) {
 
     public void preload(Configuration configuration) {
         try {
-            FileSystem.get(configuration);
+            FileSystem.get(configuration).close();
+            UserGroupInformation.setConfiguration(configuration);
         } catch (IOException ioe) {
             // Suppress exception as future uses of this configuration will fail
         }

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ValidateCsv.java
Patch:
@@ -250,15 +250,17 @@ private void parseSchema(String schema) {
 
     private String setProcessor(String remaining, List<CellProcessor> processorsList) {
         StringBuffer buffer = new StringBuffer();
+        String inputString = remaining;
         int i = 0;
         int opening = 0;
         int closing = 0;
-        while(buffer.length() != remaining.length()) {
+        while(buffer.length() != inputString.length()) {
             char c = remaining.charAt(i);
             i++;
 
             if(opening == 0 && c == ',') {
                 if(i == 1) {
+                    inputString = inputString.substring(1);
                     continue;
                 }
                 break;

File: nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/util/SiteToSiteRestApiClient.java
Patch:
@@ -245,7 +245,7 @@ private void setupRequestConfig() {
         if (localAddress != null) {
             requestConfigBuilder.setLocalAddress(localAddress);
         }
-        
+
         if (proxy != null) {
             requestConfigBuilder.setProxy(proxy.getHttpHost());
         }
@@ -1347,7 +1347,7 @@ private void setBaseUrl(final String scheme, final String host, final int port,
     public void setCompress(final boolean compress) {
         this.compress = compress;
     }
-    
+
     public void setLocalAddress(final InetAddress localAddress) {
         this.localAddress = localAddress;
     }

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestWait.java
Patch:
@@ -30,10 +30,8 @@
 import java.util.Map;
 import java.util.UUID;
 import java.util.function.BiConsumer;
-import java.util.function.Consumer;
 import java.util.stream.IntStream;
 
-import org.apache.nifi.processor.Relationship;
 import org.apache.nifi.processor.exception.ProcessException;
 import org.apache.nifi.processors.standard.TestNotify.MockCacheClient;
 import org.apache.nifi.reporting.InitializationException;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/UnpackContent.java
Patch:
@@ -124,7 +124,7 @@ public class UnpackContent extends AbstractProcessor {
 
     public static final PropertyDescriptor FILE_FILTER = new PropertyDescriptor.Builder()
             .name("File Filter")
-            .description("Only files whose names match the given regular expression will be extracted (tar/zip only)")
+            .description("Only files contained in the archive whose names match the given regular expression will be extracted (tar/zip only)")
             .required(true)
             .defaultValue(".*")
             .addValidator(StandardValidators.REGULAR_EXPRESSION_VALIDATOR)

File: nifi-nar-bundles/nifi-email-bundle/nifi-email-processors/src/main/java/org/apache/nifi/processors/email/ExtractEmailHeaders.java
Patch:
@@ -213,7 +213,7 @@ public void process(final InputStream rawIn) throws IOException {
 
         if (attributes.size() > 0) {
             FlowFile updatedFlowFile = session.putAllAttributes(originalFlowFile, attributes);
-            logger.info("Extracted {} into {} files", new Object[]{attributes.size(), updatedFlowFile});
+            logger.info("Extracted {} headers into {} file", new Object[]{attributes.size(), updatedFlowFile});
             processedFlowFilesList.add(updatedFlowFile);
         }
 

File: nifi-commons/nifi-data-provenance-utils/src/main/java/org/apache/nifi/provenance/lineage/EventNode.java
Patch:
@@ -18,7 +18,6 @@
 
 import java.util.List;
 
-import org.apache.nifi.flowfile.attributes.CoreAttributes;
 import org.apache.nifi.provenance.ProvenanceEventRecord;
 import org.apache.nifi.provenance.ProvenanceEventType;
 
@@ -58,7 +57,7 @@ public long getEventIdentifier() {
 
     @Override
     public String getFlowFileUuid() {
-        return record.getAttributes().get(CoreAttributes.UUID.key());
+        return record.getFlowFileUuid();
     }
 
     @Override

File: nifi-commons/nifi-schema-utils/src/main/java/org/apache/nifi/repository/schema/RecordSchema.java
Patch:
@@ -120,8 +120,8 @@ public static RecordSchema readFrom(final InputStream in) throws IOException {
 
     @SuppressWarnings("unchecked")
     private static RecordField readField(final DataInputStream dis) throws IOException {
-        final Map<String, Object> schemaFieldMap = new HashMap<>();
         final int numElementsToRead = dis.readInt();
+        final Map<String, Object> schemaFieldMap = new HashMap<>(numElementsToRead);
         for (int i = 0; i < numElementsToRead; i++) {
             final String fieldName = dis.readUTF();
             final String typeName = dis.readUTF();

File: nifi-framework-api/src/main/java/org/apache/nifi/controller/Triggerable.java
Patch:
@@ -25,7 +25,7 @@
 
 public interface Triggerable {
 
-    public static final long MINIMUM_SCHEDULING_NANOS = 30000L;
+    public static final long MINIMUM_SCHEDULING_NANOS = 1L;
 
     /**
      * <p>

File: nifi-framework-api/src/main/java/org/apache/nifi/provenance/lineage/ComputeLineageResult.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.Date;
 import java.util.List;
+import java.util.concurrent.TimeUnit;
 
 /**
  *
@@ -55,4 +56,6 @@ public interface ComputeLineageResult {
      * @return Indicates whether or not the lineage has finished running
      */
     boolean isFinished();
+
+    boolean awaitCompletion(long time, TimeUnit unit) throws InterruptedException;
 }

File: nifi-framework-api/src/main/java/org/apache/nifi/provenance/search/QueryResult.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.Date;
 import java.util.List;
+import java.util.concurrent.TimeUnit;
 
 import org.apache.nifi.provenance.ProvenanceEventRecord;
 
@@ -60,4 +61,6 @@ public interface QueryResult {
      * @return Indicates whether or not the query has finished running
      */
     boolean isFinished();
+
+    boolean awaitCompletion(long time, TimeUnit unit) throws InterruptedException;
 }

File: nifi-mock/src/main/java/org/apache/nifi/provenance/MockProvenanceRepository.java
Patch:
@@ -56,7 +56,7 @@ public void registerEvent(final ProvenanceEventRecord event) {
     }
 
     @Override
-    public void initialize(EventReporter eventReporter, Authorizer authorizer, ProvenanceAuthorizableFactory resourceFactory) throws IOException {
+    public void initialize(EventReporter eventReporter, Authorizer authorizer, ProvenanceAuthorizableFactory resourceFactory, IdentifierLookup idLookup) throws IOException {
 
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/AbstractPort.java
Patch:
@@ -111,7 +111,7 @@ public AbstractPort(final String id, final String name, final ProcessGroup proce
         yieldPeriod = new AtomicReference<>("1 sec");
         yieldExpiration = new AtomicLong(0L);
         schedulingPeriod = new AtomicReference<>("0 millis");
-        schedulingNanos = new AtomicLong(30000);
+        schedulingNanos = new AtomicLong(MINIMUM_SCHEDULING_NANOS);
         scheduledState = new AtomicReference<>(ScheduledState.STOPPED);
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/StandardFunnel.java
Patch:
@@ -100,7 +100,7 @@ public StandardFunnel(final String identifier, final ProcessGroup processGroup,
         yieldPeriod = new AtomicReference<>("250 millis");
         yieldExpiration = new AtomicLong(0L);
         schedulingPeriod = new AtomicReference<>("0 millis");
-        schedulingNanos = new AtomicLong(30000);
+        schedulingNanos = new AtomicLong(MINIMUM_SCHEDULING_NANOS);
         name = new AtomicReference<>("Funnel");
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/repository/FileSystemRepository.java
Patch:
@@ -911,6 +911,7 @@ public synchronized void write(final byte[] b, final int off, final int len) thr
                 }
 
                 bytesWritten += len;
+
                 scc.setLength(bytesWritten + initialLength);
             }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/scheduling/EventDrivenSchedulingAgent.java
Patch:
@@ -83,7 +83,7 @@ public EventDrivenSchedulingAgent(final FlowEngine flowEngine, final ControllerS
 
         for (int i = 0; i < maxThreadCount; i++) {
             final Runnable eventDrivenTask = new EventDrivenTask(workerQueue);
-            flowEngine.scheduleWithFixedDelay(eventDrivenTask, 0L, 30000, TimeUnit.NANOSECONDS);
+            flowEngine.scheduleWithFixedDelay(eventDrivenTask, 0L, 1L, TimeUnit.NANOSECONDS);
         }
     }
 
@@ -132,7 +132,7 @@ public void setMaxThreadCount(final int maxThreadCount) {
             final int tasksToAdd = maxThreadCount - oldMax;
             for (int i = 0; i < tasksToAdd; i++) {
                 final Runnable eventDrivenTask = new EventDrivenTask(workerQueue);
-                flowEngine.scheduleWithFixedDelay(eventDrivenTask, 0L, 30000, TimeUnit.NANOSECONDS);
+                flowEngine.scheduleWithFixedDelay(eventDrivenTask, 0L, 1L, TimeUnit.NANOSECONDS);
             }
         }
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/status/history/VolatileComponentStatusRepository.java
Patch:
@@ -93,7 +93,9 @@ public boolean evaluate(final Capture capture) {
                 snapshot.setTimestamp(capture.getCaptureDate());
 
                 for (final ProcessorStatusDescriptor descriptor : ProcessorStatusDescriptor.values()) {
-                    snapshot.addStatusMetric(descriptor.getDescriptor(), descriptor.getDescriptor().getValueFunction().getValue(status));
+                    if (descriptor.isVisible()) {
+                        snapshot.addStatusMetric(descriptor.getDescriptor(), descriptor.getDescriptor().getValueFunction().getValue(status));
+                    }
                 }
 
                 history.addStatusSnapshot(snapshot);

File: nifi-nar-bundles/nifi-provenance-repository-bundle/nifi-persistent-provenance-repository/src/main/java/org/apache/nifi/provenance/toc/TocUtil.java
Patch:
@@ -32,7 +32,7 @@ public class TocUtil {
      */
     public static File getTocFile(final File journalFile) {
         final File tocDir = new File(journalFile.getParentFile(), "toc");
-        final String basename = LuceneUtil.substringBefore(journalFile.getName(), ".");
+        final String basename = LuceneUtil.substringBefore(journalFile.getName(), ".prov");
         final File tocFile = new File(tocDir, basename + ".toc");
         return tocFile;
     }

File: nifi-nar-bundles/nifi-mongodb-bundle/nifi-mongodb-processors/src/main/java/org/apache/nifi/processors/mongodb/AbstractMongoProcessor.java
Patch:
@@ -131,7 +131,7 @@ public final void createClient(ProcessContext context) throws IOException {
                 mongoClient = new MongoClient(new MongoClientURI(uri, getClientOptions(sslContext)));
             }
         } catch (Exception e) {
-            getLogger().error("Failed to schedule PutMongo due to {}", new Object[] { e }, e);
+            getLogger().error("Failed to schedule {} due to {}", new Object[] { this.getClass().getName(), e }, e);
             throw e;
         }
     }

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/AbstractListProcessor.java
Patch:
@@ -336,6 +336,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
         }
 
         final List<T> entityList;
+        final long currentListingTimestamp = System.nanoTime();
         try {
             // track of when this last executed for consideration of the lag nanos
             entityList = performListing(context, minTimestamp);
@@ -385,7 +386,8 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
                     context.yield();
                     return;
                 }
-            } else {
+
+            } else if (latestListingTimestamp >= currentListingTimestamp - LISTING_LAG_NANOS) {
                 // Otherwise, newest entries are held back one cycle to avoid issues in writes occurring exactly when the listing is being performed to avoid missing data
                 orderedEntries.remove(latestListingTimestamp);
             }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/StandardXMLFlowConfigurationDAO.java
Patch:
@@ -173,9 +173,9 @@ public synchronized void save(final FlowController controller, final boolean arc
             try {
                 archiveManager.archive();
             } catch (final Exception ex) {
-                LOG.warn("Unable to archive flow configuration as requested due to " + ex);
+                LOG.error("Unable to archive flow configuration as requested due to " + ex);
                 if (LOG.isDebugEnabled()) {
-                    LOG.warn("", ex);
+                    LOG.error("", ex);
                 }
             }
         }

File: nifi-toolkit/nifi-toolkit-tls/src/main/java/org/apache/nifi/toolkit/tls/service/server/TlsCertificateAuthorityServiceHandler.java
Patch:
@@ -86,8 +86,8 @@ public void handle(String target, Request baseRequest, HttpServletRequest reques
                 if (logger.isInfoEnabled()) {
                     logger.info("Received CSR with DN " + dn);
                 }
-                X509Certificate x509Certificate = CertificateUtils.generateIssuedCertificate(dn,
-                        jcaPKCS10CertificationRequest.getPublicKey(), caCert, keyPair, signingAlgorithm, days);
+                X509Certificate x509Certificate = CertificateUtils.generateIssuedCertificate(dn, jcaPKCS10CertificationRequest.getPublicKey(),
+                        CertificateUtils.getExtensionsFromCSR(jcaPKCS10CertificationRequest), caCert, keyPair, signingAlgorithm, days);
                 writeResponse(objectMapper, request, response, new TlsCertificateAuthorityResponse(TlsHelper.calculateHMac(token, caCert.getPublicKey()),
                         TlsHelper.pemEncodeJcaObject(x509Certificate)), Response.SC_OK);
                 return;

File: nifi-toolkit/nifi-toolkit-tls/src/main/java/org/apache/nifi/toolkit/tls/standalone/TlsToolkitStandalone.java
Patch:
@@ -180,7 +180,7 @@ public void createNifiKeystoresAndTrustStores(StandaloneConfig standaloneConfig)
             TlsClientManager tlsClientManager = new TlsClientManager(tlsClientConfig);
             KeyPair keyPair = TlsHelper.generateKeyPair(keyPairAlgorithm, keySize);
             tlsClientManager.addPrivateKeyToKeyStore(keyPair, NIFI_KEY, CertificateUtils.generateIssuedCertificate(tlsClientConfig.calcDefaultDn(hostname),
-                    keyPair.getPublic(), certificate, caKeyPair, signingAlgorithm, days), certificate);
+                    keyPair.getPublic(), null, certificate, caKeyPair, signingAlgorithm, days), certificate);
             tlsClientManager.setCertificateEntry(NIFI_CERT, certificate);
             tlsClientManager.addClientConfigurationWriter(new NifiPropertiesTlsClientConfigWriter(niFiPropertiesWriterFactory, new File(hostDir, "nifi.properties"),
                     hostname, instanceDefinition.getNumber()));
@@ -213,7 +213,7 @@ public void createNifiKeystoresAndTrustStores(StandaloneConfig standaloneConfig)
                 logger.info("Generating new client certificate " + clientCertFile);
             }
             KeyPair keyPair = TlsHelper.generateKeyPair(keyPairAlgorithm, keySize);
-            X509Certificate clientCert = CertificateUtils.generateIssuedCertificate(reorderedDn, keyPair.getPublic(), certificate, caKeyPair, signingAlgorithm, days);
+            X509Certificate clientCert = CertificateUtils.generateIssuedCertificate(reorderedDn, keyPair.getPublic(), null, certificate, caKeyPair, signingAlgorithm, days);
             KeyStore keyStore = KeyStoreUtils.getKeyStore(KeystoreType.PKCS12.toString());
             keyStore.load(null, null);
             keyStore.setKeyEntry(NIFI_KEY, keyPair.getPrivate(), null, new Certificate[]{clientCert, certificate});

File: nifi-toolkit/nifi-toolkit-tls/src/test/java/org/apache/nifi/toolkit/tls/service/client/TlsCertificateSigningRequestPerformerTest.java
Patch:
@@ -106,7 +106,7 @@ public void setup() throws GeneralSecurityException, OperatorCreationException,
         when(tlsClientConfig.getPort()).thenReturn(testPort);
         when(tlsClientConfig.createCertificateSigningRequestPerformer()).thenReturn(tlsCertificateSigningRequestPerformer);
         when(tlsClientConfig.getSigningAlgorithm()).thenReturn(TlsConfig.DEFAULT_SIGNING_ALGORITHM);
-        JcaPKCS10CertificationRequest jcaPKCS10CertificationRequest = TlsHelper.generateCertificationRequest(tlsClientConfig.getDn(), keyPair, TlsConfig.DEFAULT_SIGNING_ALGORITHM);
+        JcaPKCS10CertificationRequest jcaPKCS10CertificationRequest = TlsHelper.generateCertificationRequest(tlsClientConfig.getDn(), null, keyPair, TlsConfig.DEFAULT_SIGNING_ALGORITHM);
         String testCsrPem = TlsHelper.pemEncodeJcaObject(jcaPKCS10CertificationRequest);
         when(httpClientBuilderSupplier.get()).thenReturn(httpClientBuilder);
         when(httpClientBuilder.build()).thenAnswer(invocation -> {

File: nifi-toolkit/nifi-toolkit-tls/src/test/java/org/apache/nifi/toolkit/tls/service/server/TlsCertificateAuthorityServiceHandlerTest.java
Patch:
@@ -122,7 +122,7 @@ public void setup() throws Exception {
         caCert = CertificateUtils.generateSelfSignedX509Certificate(keyPair, "CN=fakeCa", TlsConfig.DEFAULT_SIGNING_ALGORITHM, TlsConfig.DEFAULT_DAYS);
         requestedDn = new TlsConfig().calcDefaultDn(TlsConfig.DEFAULT_HOSTNAME);
         certificateKeyPair = TlsHelper.generateKeyPair(TlsConfig.DEFAULT_KEY_PAIR_ALGORITHM, TlsConfig.DEFAULT_KEY_SIZE);
-        jcaPKCS10CertificationRequest = TlsHelper.generateCertificationRequest(requestedDn, certificateKeyPair, TlsConfig.DEFAULT_SIGNING_ALGORITHM);
+        jcaPKCS10CertificationRequest = TlsHelper.generateCertificationRequest(requestedDn, null, certificateKeyPair, TlsConfig.DEFAULT_SIGNING_ALGORITHM);
         testPemEncodedCsr = TlsHelper.pemEncodeJcaObject(jcaPKCS10CertificationRequest);
         tlsCertificateAuthorityServiceHandler = new TlsCertificateAuthorityServiceHandler(TlsConfig.DEFAULT_SIGNING_ALGORITHM, TlsConfig.DEFAULT_DAYS, testToken, caCert, keyPair, objectMapper);
         testHmac = TlsHelper.calculateHMac(testToken, jcaPKCS10CertificationRequest.getPublicKey());

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/util/JdbcCommon.java
Patch:
@@ -347,7 +347,8 @@ public static Schema createSchema(final ResultSet rs, String recordName, boolean
 
 
                 default:
-                    throw new IllegalArgumentException("createSchema: Unknown SQL type " + meta.getColumnType(i) + " cannot be converted to Avro type");
+                    throw new IllegalArgumentException("createSchema: Unknown SQL type " + meta.getColumnType(i) + " / " + meta.getColumnTypeName(i)
+                            + " (table: " + tableName + ", column: " + columnName + ") cannot be converted to Avro type");
             }
         }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/repository/schema/RepositoryRecordUpdate.java
Patch:
@@ -38,7 +38,7 @@ public RecordSchema getSchema() {
 
     @Override
     public Object getFieldValue(final String fieldName) {
-        if (RepositoryRecordSchema.REPOSITORY_RECORD_UPDATE_V1.equals(fieldName)) {
+        if (RepositoryRecordSchema.REPOSITORY_RECORD_UPDATE_V2.equals(fieldName)) {
             final String actionType = (String) fieldMap.getFieldValue(RepositoryRecordSchema.ACTION_TYPE);
             final UpdateType updateType = UpdateType.valueOf(actionType);
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/swap/SchemaSwapSerializer.java
Patch:
@@ -46,7 +46,7 @@
 public class SchemaSwapSerializer implements SwapSerializer {
     static final String SERIALIZATION_NAME = "Schema Swap Serialization";
 
-    private final RecordSchema schema = SwapSchema.FULL_SWAP_FILE_SCHEMA_V1;
+    private final RecordSchema schema = SwapSchema.FULL_SWAP_FILE_SCHEMA_V2;
     private final RecordSchema flowFileSchema = new RecordSchema(schema.getField(SwapSchema.FLOWFILE_CONTENTS).getSubFields());
 
     @Override
@@ -78,7 +78,7 @@ public void serializeFlowFiles(final List<FlowFileRecord> toSwap, final FlowFile
 
         // Create a simple record to hold the summary and the flowfile contents
         final RecordField summaryField = new SimpleRecordField(SwapSchema.SWAP_SUMMARY, FieldType.COMPLEX, Repetition.EXACTLY_ONE);
-        final RecordField contentsField = new ComplexRecordField(SwapSchema.FLOWFILE_CONTENTS, Repetition.ZERO_OR_MORE, FlowFileSchema.FLOWFILE_SCHEMA_V1.getFields());
+        final RecordField contentsField = new ComplexRecordField(SwapSchema.FLOWFILE_CONTENTS, Repetition.ZERO_OR_MORE, FlowFileSchema.FLOWFILE_SCHEMA_V2.getFields());
         final List<RecordField> fields = new ArrayList<>(2);
         fields.add(summaryField);
         fields.add(contentsField);

File: nifi-nar-bundles/nifi-lumberjack-bundle/nifi-lumberjack-processors/src/main/java/org/apache/nifi/processors/lumberjack/frame/LumberjackDecoder.java
Patch:
@@ -161,7 +161,7 @@ private List<LumberjackFrame> processDECOMPRESSED(byte[] decompressedData) {
 
         // Lumberjack has a weird approach to frames, where compressed frames embed D(ata) or J(SON) frames.
         // inside a compressed input.
-        //  Or astated in the documentation:
+        //  Or as stated in the documentation:
         //
         // "As an example, you could have 3 data frames compressed into a single
         // 'compressed' frame type: 1D{k,v}{k,v}1D{k,v}{k,v}1D{k,v}{k,v}"

File: nifi-nar-bundles/nifi-lumberjack-bundle/nifi-lumberjack-processors/src/main/java/org/apache/nifi/processors/lumberjack/response/LumberjackResponse.java
Patch:
@@ -51,7 +51,7 @@ public LumberjackFrame toFrame() {
         return new LumberjackFrame.Builder()
                 .version(version)
                 .frameType(frameType)
-                .payload(ByteBuffer.allocate(8).putLong(seqNumber).array())
+                .payload(ByteBuffer.allocate(4).putInt((int) seqNumber).array())
                 .build();
     }
 

File: nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-dbcp-service/src/test/java/org/apache/nifi/dbcp/DBCPServiceTest.java
Patch:
@@ -187,7 +187,7 @@ public void testDropInvalidConnectionsH2_Default() throws Exception {
         final DBCPConnectionPool service = new DBCPConnectionPool();
         runner.addControllerService("test-dropcreate", service);
 
-        runner.setProperty(service, DBCPConnectionPool.DATABASE_URL, "jdbc:h2:tcp://localhost/~/test");
+        runner.setProperty(service, DBCPConnectionPool.DATABASE_URL, "jdbc:h2:tcp://localhost:" + server.getPort() + "/~/test");
         runner.setProperty(service, DBCPConnectionPool.DB_DRIVERNAME, "org.h2.Driver");
         runner.enableControllerService(service);
 
@@ -238,7 +238,7 @@ public void testDropInvalidConnectionsH2_Better() throws Exception {
         final DBCPConnectionPool service = new DBCPConnectionPool();
         runner.addControllerService("test-dropcreate", service);
 
-        runner.setProperty(service, DBCPConnectionPool.DATABASE_URL, "jdbc:h2:tcp://localhost/~/test");
+        runner.setProperty(service, DBCPConnectionPool.DATABASE_URL, "jdbc:h2:tcp://localhost:" + server.getPort() + "/~/test");
         runner.setProperty(service, DBCPConnectionPool.DB_DRIVERNAME, "org.h2.Driver");
         runner.setProperty(service, DBCPConnectionPool.VALIDATION_QUERY, "SELECT 5");
         runner.enableControllerService(service);

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/InvokeHTTP.java
Patch:
@@ -863,7 +863,7 @@ private Request.Builder setHeaderProperties(final ProcessContext context, Reques
         // iterate through the flowfile attributes, adding any attribute that
         // matches the attributes-to-send pattern. if the pattern is not set
         // (it's an optional property), ignore that attribute entirely
-        if (regexAttributesToSend != null) {
+        if (regexAttributesToSend != null && requestFlowFile != null) {
             Map<String, String> attributes = requestFlowFile.getAttributes();
             Matcher m = regexAttributesToSend.matcher("");
             for (Map.Entry<String, String> entry : attributes.entrySet()) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/audit/RemoteProcessGroupAuditor.java
Patch:
@@ -353,7 +353,9 @@ public void removeRemoteProcessGroupAdvice(ProceedingJoinPoint proceedingJoinPoi
         }
     }
 
-    private RemoteGroupPort auditUpdateProcessGroupPortConfiguration(ProceedingJoinPoint proceedingJoinPoint, RemoteProcessGroupPortDTO remoteProcessGroupPortDto, RemoteProcessGroup remoteProcessGroup, RemoteGroupPort remoteProcessGroupPort) throws Throwable {
+    private RemoteGroupPort auditUpdateProcessGroupPortConfiguration(ProceedingJoinPoint proceedingJoinPoint, RemoteProcessGroupPortDTO remoteProcessGroupPortDto,
+                                                                     RemoteProcessGroup remoteProcessGroup, RemoteGroupPort remoteProcessGroupPort) throws Throwable {
+
         final Map<String, Object> previousValues = ConfigurationRecorder.capturePreviousValues(PORT_CONFIG_RECORDERS, remoteProcessGroupPort);
 
         // perform the underlying operation

File: nifi-nar-bundles/nifi-tcp-bundle/nifi-tcp-processors/src/main/java/org/apache/nifi/processors/gettcp/GetTCP.java
Patch:
@@ -28,7 +28,6 @@
 import java.util.Set;
 import java.util.concurrent.ScheduledThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
-
 import org.apache.nifi.annotation.behavior.InputRequirement;
 import org.apache.nifi.annotation.behavior.SideEffectFree;
 import org.apache.nifi.annotation.behavior.TriggerSerially;
@@ -269,7 +268,9 @@ public void run() {
     }
 
     /**
-     *
+     * This handles taking the message that has been received off the wire and writing it to the
+     * content of a flowfile. If only a partial message is received then the flowfile is sent to
+     * the Partial relationship. If a full message is received then it is sent to the Success relationship.
      */
     private class NiFiDelegatingMessageHandler implements MessageHandler {
         private final ProcessSessionFactory sessionFactory;

File: nifi-nar-bundles/nifi-tcp-bundle/nifi-tcp-processors/src/test/java/org/apache/nifi/processors/gettcp/Server.java
Patch:
@@ -35,9 +35,9 @@ public static void main(String[] args) throws Exception {
     }
 
     /**
-     *
-     * @param address
-     * @param readingBufferSize
+     * @param address           the socket address
+     * @param readingBufferSize the buffer size
+     * @param endOfMessageByte  the byte indicating the EOM
      */
     public Server(InetSocketAddress address, int readingBufferSize, byte endOfMessageByte) {
         super(address, readingBufferSize, endOfMessageByte);

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/NumberToDateEvaluator.java
Patch:
@@ -37,7 +37,7 @@ public QueryResult<Date> evaluate(final Map<String, String> attributes) {
         final QueryResult<Long> result = subject.evaluate(attributes);
         final Long value = result.getValue();
         if (value == null) {
-            return null;
+            return new DateQueryResult(null);
         }
 
         return new DateQueryResult(new Date(value));

File: nifi-commons/nifi-expression-language/src/test/java/org/apache/nifi/attribute/expression/language/TestQuery.java
Patch:
@@ -898,6 +898,9 @@ public void testDate() {
 
         verifyEquals("${entryDate:toNumber():toDate():format('yyyy')}", attributes, String.valueOf(year));
 
+        // test for not existing attribute (NIFI-1962)
+        assertEquals("", Query.evaluateExpressions("${notExistingAtt:toDate()}", attributes, null));
+
         attributes.clear();
         attributes.put("month", "3");
         attributes.put("day", "4");

File: nifi-nar-bundles/nifi-lumberjack-bundle/nifi-lumberjack-processors/src/main/java/org/apache/nifi/processors/lumberjack/frame/LumberjackDecoder.java
Patch:
@@ -161,7 +161,7 @@ private List<LumberjackFrame> processDECOMPRESSED(byte[] decompressedData) {
 
         // Lumberjack has a weird approach to frames, where compressed frames embed D(ata) or J(SON) frames.
         // inside a compressed input.
-        //  Or as stated in the documentation:
+        //  Or astated in the documentation:
         //
         // "As an example, you could have 3 data frames compressed into a single
         // 'compressed' frame type: 1D{k,v}{k,v}1D{k,v}{k,v}1D{k,v}{k,v}"

File: nifi-nar-bundles/nifi-lumberjack-bundle/nifi-lumberjack-processors/src/main/java/org/apache/nifi/processors/lumberjack/response/LumberjackResponse.java
Patch:
@@ -51,7 +51,7 @@ public LumberjackFrame toFrame() {
         return new LumberjackFrame.Builder()
                 .version(version)
                 .frameType(frameType)
-                .payload(ByteBuffer.allocate(4).putInt((int) seqNumber).array())
+                .payload(ByteBuffer.allocate(8).putLong(seqNumber).array())
                 .build();
     }
 

File: nifi-bootstrap/src/main/java/org/apache/nifi/bootstrap/BootstrapCodec.java
Patch:
@@ -57,7 +57,7 @@ public void communicate() throws IOException {
         try {
             processRequest(cmd, args);
         } catch (final InvalidCommandException ice) {
-            throw new IOException("Received invalid command from NiFi: " + line + " : " + ice.getMessage() == null ? "" : "Details: " + ice.toString());
+            throw new IOException("Received invalid command from NiFi: " + line + (ice.getMessage() == null ? "" : " - Details: " + ice.toString()));
         }
     }
 

File: nifi-nar-bundles/nifi-lumberjack-bundle/nifi-lumberjack-processors/src/main/java/org/apache/nifi/processors/lumberjack/frame/LumberjackDecoder.java
Patch:
@@ -161,7 +161,7 @@ private List<LumberjackFrame> processDECOMPRESSED(byte[] decompressedData) {
 
         // Lumberjack has a weird approach to frames, where compressed frames embed D(ata) or J(SON) frames.
         // inside a compressed input.
-        //  Or astated in the documentation:
+        //  Or as stated in the documentation:
         //
         // "As an example, you could have 3 data frames compressed into a single
         // 'compressed' frame type: 1D{k,v}{k,v}1D{k,v}{k,v}1D{k,v}{k,v}"

File: nifi-nar-bundles/nifi-lumberjack-bundle/nifi-lumberjack-processors/src/main/java/org/apache/nifi/processors/lumberjack/response/LumberjackResponse.java
Patch:
@@ -51,7 +51,7 @@ public LumberjackFrame toFrame() {
         return new LumberjackFrame.Builder()
                 .version(version)
                 .frameType(frameType)
-                .payload(ByteBuffer.allocate(8).putLong(seqNumber).array())
+                .payload(ByteBuffer.allocate(4).putInt((int) seqNumber).array())
                 .build();
     }
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/util/JmsFactory.java
Patch:
@@ -382,6 +382,9 @@ private static ConnectionFactory createConnectionFactory(final ProcessContext co
     private static boolean isSSL(URI uri) {
         try {
             CompositeData compositeData = URISupport.parseComposite(uri);
+            if ("ssl".equals(compositeData.getScheme())) {
+                return true;
+            }
             for(URI component : compositeData.getComponents()){
                 if ("ssl".equals(component.getScheme())) {
                     return true;

File: nifi-nar-bundles/nifi-update-attribute-bundle/nifi-update-attribute-processor/src/main/java/org/apache/nifi/processors/attributes/UpdateAttribute.java
Patch:
@@ -283,7 +283,7 @@ protected Collection<ValidationResult> customValidate(final ValidationContext co
             String initValue = context.getProperty(STATEFUL_VARIABLES_INIT_VALUE).getValue();
             if (initValue == null){
                 reasons.add(new ValidationResult.Builder().subject(STATEFUL_VARIABLES_INIT_VALUE.getDisplayName()).valid(false)
-                        .explanation("initial state value much be set if the processor is configured to store state.").build());
+                        .explanation("initial state value must be set if the processor is configured to store state.").build());
             }
         }
 

File: nifi-framework-api/src/main/java/org/apache/nifi/authorization/AbstractPolicyBasedAuthorizer.java
Patch:
@@ -158,8 +158,7 @@ public final AuthorizationResult authorize(AuthorizationRequest request) throws
             return AuthorizationResult.approved();
         }
 
-
-        return AuthorizationResult.denied();
+        return AuthorizationResult.denied(request.getExplanationSupplier().get());
     }
 
     /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-authorization/src/main/java/org/apache/nifi/authorization/resource/AccessPolicyAuthorizable.java
Patch:
@@ -89,7 +89,7 @@ private Authorizable getEffectiveAuthorizable() {
     @Override
     public AuthorizationResult checkAuthorization(Authorizer authorizer, RequestAction action, NiFiUser user, Map<String, String> resourceContext) {
         if (user == null) {
-            throw new AccessDeniedException("Unknown user");
+            throw new AccessDeniedException("Unknown user.");
         }
 
         final AuthorizationResult resourceResult = Authorizable.super.checkAuthorization(authorizer, action, user, resourceContext);
@@ -105,7 +105,7 @@ public AuthorizationResult checkAuthorization(Authorizer authorizer, RequestActi
     @Override
     public void authorize(Authorizer authorizer, RequestAction action, NiFiUser user, Map<String, String> resourceContext) throws AccessDeniedException {
         if (user == null) {
-            throw new AccessDeniedException("Unknown user");
+            throw new AccessDeniedException("Unknown user.");
         }
 
         try {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-authorization/src/main/java/org/apache/nifi/authorization/resource/DataAuthorizable.java
Patch:
@@ -62,7 +62,7 @@ public Resource getResource() {
     @Override
     public AuthorizationResult checkAuthorization(Authorizer authorizer, RequestAction action, NiFiUser user, Map<String, String> resourceContext) {
         if (user == null) {
-            return AuthorizationResult.denied("Unknown user");
+            return AuthorizationResult.denied("Unknown user.");
         }
 
         AuthorizationResult result = null;
@@ -100,7 +100,7 @@ public boolean isAnonymous() {
     @Override
     public void authorize(Authorizer authorizer, RequestAction action, NiFiUser user, Map<String, String> resourceContext) throws AccessDeniedException {
         if (user == null) {
-            throw new AccessDeniedException("Unknown user");
+            throw new AccessDeniedException("Unknown user.");
         }
 
         // calculate the dn chain

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiWebConfigurationContext.java
Patch:
@@ -115,12 +115,12 @@ private void authorizeFlowAccess(final NiFiUser user) {
                     .accessAttempt(true)
                     .action(RequestAction.READ)
                     .userContext(userContext)
+                    .explanationSupplier(() -> "Unable to view the user interface.")
                     .build();
 
             final AuthorizationResult result = authorizer.authorize(request);
             if (!Result.Approved.equals(result.getResult())) {
-                final String message = StringUtils.isNotBlank(result.getExplanation()) ? result.getExplanation() : "Access is denied";
-                throw new AccessDeniedException(message);
+                throw new AccessDeniedException(result.getExplanation());
             }
         });
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/AccessResource.java
Patch:
@@ -252,7 +252,7 @@ public Response createDownloadToken(@Context HttpServletRequest httpServletReque
 
         final NiFiUser user = NiFiUserUtils.getNiFiUser();
         if (user == null) {
-            throw new AccessDeniedException("Unable to determine user details.");
+            throw new AccessDeniedException("No user authenticated in the request.");
         }
 
         final OtpAuthenticationToken authenticationToken = new OtpAuthenticationToken(user.getIdentity());
@@ -297,7 +297,7 @@ public Response createUiExtensionToken(@Context HttpServletRequest httpServletRe
 
         final NiFiUser user = NiFiUserUtils.getNiFiUser();
         if (user == null) {
-            throw new AccessDeniedException("Unable to determine user details.");
+            throw new AccessDeniedException("No user authenticated in the request.");
         }
 
         final OtpAuthenticationToken authenticationToken = new OtpAuthenticationToken(user.getIdentity());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/FlowResource.java
Patch:
@@ -218,12 +218,12 @@ private void authorizeFlow() {
                 .accessAttempt(true)
                 .action(RequestAction.READ)
                 .userContext(userContext)
+                .explanationSupplier(() -> "Unable to view the user interface.")
                 .build();
 
         final AuthorizationResult result = authorizer.authorize(request);
         if (!Result.Approved.equals(result.getResult())) {
-            final String message = StringUtils.isNotBlank(result.getExplanation()) ? result.getExplanation() : "Access is denied";
-            throw new AccessDeniedException(message);
+            throw new AccessDeniedException(result.getExplanation());
         }
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProvenanceResource.java
Patch:
@@ -108,12 +108,12 @@ private void authorizeProvenanceRequest() {
                 .accessAttempt(true)
                 .action(RequestAction.READ)
                 .userContext(userContext)
+                .explanationSupplier(() -> "Unable to query provenance.")
                 .build();
 
         final AuthorizationResult result = authorizer.authorize(request);
         if (!Result.Approved.equals(result.getResult())) {
-            final String message = StringUtils.isNotBlank(result.getExplanation()) ? result.getExplanation() : "Access is denied";
-            throw new AccessDeniedException(message);
+            throw new AccessDeniedException(result.getExplanation());
         }
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ResourceResource.java
Patch:
@@ -78,12 +78,12 @@ private void authorizeResource() {
                 .accessAttempt(true)
                 .action(RequestAction.READ)
                 .userContext(userContext)
+                .explanationSupplier(() -> "Unable to retrieve resources.")
                 .build();
 
         final AuthorizationResult result = authorizer.authorize(request);
         if (!Result.Approved.equals(result.getResult())) {
-            final String message = StringUtils.isNotBlank(result.getExplanation()) ? result.getExplanation() : "Access is denied";
-            throw new AccessDeniedException(message);
+            throw new AccessDeniedException(result.getExplanation());
         }
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/SiteToSiteResource.java
Patch:
@@ -116,12 +116,12 @@ protected void authorizeSiteToSite() {
                 .accessAttempt(true)
                 .action(RequestAction.READ)
                 .userContext(userContext)
+                .explanationSupplier(() -> "Unable to retrieve site to site details.")
                 .build();
 
         final AuthorizationResult result = authorizer.authorize(request);
         if (!Result.Approved.equals(result.getResult())) {
-            final String message = StringUtils.isNotBlank(result.getExplanation()) ? result.getExplanation() : "Access is denied";
-            throw new AccessDeniedException(message);
+            throw new AccessDeniedException(result.getExplanation());
         }
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/SystemDiagnosticsResource.java
Patch:
@@ -81,12 +81,12 @@ private void authorizeSystem() {
                 .accessAttempt(true)
                 .action(RequestAction.READ)
                 .userContext(userContext)
+                .explanationSupplier(() -> "Unable to view system diagnostics.")
                 .build();
 
         final AuthorizationResult result = authorizer.authorize(request);
         if (!Result.Approved.equals(result.getResult())) {
-            final String message = StringUtils.isNotBlank(result.getExplanation()) ? result.getExplanation() : "Access is denied";
-            throw new AccessDeniedException(message);
+            throw new AccessDeniedException(result.getExplanation());
         }
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/controller/ControllerFacade.java
Patch:
@@ -1241,7 +1241,7 @@ public ProvenanceEventDTO submitReplay(final Long eventId) {
     private AuthorizationResult checkAuthorizationForReplay(final ProvenanceEventRecord event) {
         // if the connection id isn't specified, then the replay wouldn't be available anyways and we have nothing to authorize against so deny it`
         if (event.getSourceQueueIdentifier() == null) {
-            return AuthorizationResult.denied();
+            return AuthorizationResult.denied("The connection id in the provenance event is unknown.");
         }
 
         final NiFiUser user = NiFiUserUtils.getNiFiUser();
@@ -1272,7 +1272,7 @@ private AuthorizationResult checkAuthorizationForReplay(final ProvenanceEventRec
     private void authorizeReplay(final ProvenanceEventRecord event) {
         // if the connection id isn't specified, then the replay wouldn't be available anyways and we have nothing to authorize against so deny it`
         if (event.getSourceQueueIdentifier() == null) {
-            throw new AccessDeniedException("The connection id is unknown.");
+            throw new AccessDeniedException("The connection id in the provenance event is unknown.");
         }
 
         final NiFiUser user = NiFiUserUtils.getNiFiUser();

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/s3/PutS3Object.java
Patch:
@@ -39,7 +39,6 @@
 import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantLock;
 
-import com.amazonaws.services.s3.model.AmazonS3Exception;
 import org.apache.nifi.annotation.behavior.DynamicProperty;
 import org.apache.nifi.annotation.behavior.InputRequirement;
 import org.apache.nifi.annotation.behavior.InputRequirement.Requirement;
@@ -64,6 +63,7 @@
 import com.amazonaws.services.s3.AmazonS3Client;
 import com.amazonaws.services.s3.model.AbortMultipartUploadRequest;
 import com.amazonaws.services.s3.model.AccessControlList;
+import com.amazonaws.services.s3.model.AmazonS3Exception;
 import com.amazonaws.services.s3.model.CannedAccessControlList;
 import com.amazonaws.services.s3.model.CompleteMultipartUploadRequest;
 import com.amazonaws.services.s3.model.CompleteMultipartUploadResult;
@@ -426,6 +426,7 @@ public void process(final InputStream rawIn) throws IOException {
                                 .evaluateAttributeExpressions(ff).getValue();
                         if (contentType != null) {
                             objectMetadata.setContentType(contentType);
+                            attributes.put(S3_CONTENT_TYPE, contentType);
                         }
 
                         final String expirationRule = context.getProperty(EXPIRATION_RULE_ID)
@@ -882,6 +883,7 @@ public void setTimestamp(Long timestamp) {
             _timestamp = timestamp;
         }
 
+        @Override
         public String toString() {
             StringBuilder buf = new StringBuilder();
             buf.append(_uploadId).append(SEPARATOR)

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/StandardFlowFileQueue.java
Patch:
@@ -448,7 +448,8 @@ private void migrateSwapToActive() {
         // Swap Queue to the Active Queue. However, we don't do this if there are FlowFiles already swapped out
         // to disk, because we want them to be swapped back in in the same order that they were swapped out.
 
-        if (activeQueue.size() > swapThreshold - SWAP_RECORD_POLL_SIZE) {
+        final int activeQueueSize = activeQueue.size();
+        if (activeQueueSize > 0 && activeQueueSize > swapThreshold - SWAP_RECORD_POLL_SIZE) {
             return;
         }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/remote/StandardRemoteProcessGroup.java
Patch:
@@ -95,7 +95,7 @@ public class StandardRemoteProcessGroup implements RemoteProcessGroup {
     private final NiFiProperties nifiProperties;
 
     private final AtomicReference<String> name = new AtomicReference<>();
-    private final AtomicReference<Position> position = new AtomicReference<>();
+    private final AtomicReference<Position> position = new AtomicReference<>(new Position(0D, 0D));
     private final AtomicReference<String> comments = new AtomicReference<>();
     private final AtomicReference<ProcessGroup> processGroup;
     private final AtomicBoolean transmitting = new AtomicBoolean(false);

File: nifi-nar-bundles/nifi-provenance-repository-bundle/nifi-persistent-provenance-repository/src/main/java/org/apache/nifi/provenance/ByteArraySchemaRecordReader.java
Patch:
@@ -73,6 +73,9 @@ protected StandardProvenanceEventRecord nextRecord(final DataInputStream in, fin
 
         final InputStream limitedIn = new LimitingInputStream(in, recordLength);
         final Record eventRecord = recordReader.readRecord(limitedIn);
+        if (eventRecord == null) {
+            return null;
+        }
 
         return EventRecord.getEvent(eventRecord, getFilename(), byteOffset, getMaxAttributeLength());
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/FlowResource.java
Patch:
@@ -651,7 +651,7 @@ public Response scheduleComponents(
 
                     // ensure access to every component being scheduled
                     requestComponentsToSchedule.keySet().forEach(componentId -> {
-                        final Authorizable connectable = lookup.getConnectable(componentId);
+                        final Authorizable connectable = lookup.getLocalConnectable(componentId);
                         connectable.authorize(authorizer, RequestAction.WRITE, NiFiUserUtils.getNiFiUser());
                     });
                 },

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardProcessGroupDAO.java
Patch:
@@ -80,7 +80,7 @@ public void verifyScheduleComponents(final String groupId, final ScheduledState
 
         final Set<Connectable> connectables = new HashSet<>(componentIds.size());
         for (final String componentId : componentIds) {
-            final Connectable connectable = group.findConnectable(componentId);
+            final Connectable connectable = group.findLocalConnectable(componentId);
             if (connectable == null) {
                 throw new ResourceNotFoundException("Unable to find component with id " + componentId);
             }
@@ -103,7 +103,7 @@ public void scheduleComponents(final String groupId, final ScheduledState state,
         final ProcessGroup group = locateProcessGroup(flowController, groupId);
 
         for (final String componentId : componentIds) {
-            final Connectable connectable = group.findConnectable(componentId);
+            final Connectable connectable = group.findLocalConnectable(componentId);
             if (ScheduledState.RUNNING.equals(state)) {
                 if (ConnectableType.PROCESSOR.equals(connectable.getConnectableType())) {
                     connectable.getProcessGroup().startProcessor((ProcessorNode) connectable);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/StatusMerger.java
Patch:
@@ -307,6 +307,8 @@ public static void merge(final PortStatusDTO target, final boolean targetReadabl
 
         merge(target.getAggregateSnapshot(), targetReadablePermission, toMerge.getAggregateSnapshot(), toMergeReadablePermission);
 
+        target.setTransmitting(Boolean.TRUE.equals(target.isTransmitting()) || Boolean.TRUE.equals(toMerge.isTransmitting()));
+
         if (target.getNodeSnapshots() != null) {
             final NodePortStatusSnapshotDTO nodeSnapshot = new NodePortStatusSnapshotDTO();
             nodeSnapshot.setStatusSnapshot(toMerge.getAggregateSnapshot());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ControllerResource.java
Patch:
@@ -283,7 +283,7 @@ public Response createReportingTask(
                 lookup -> {
                     authorizeController(RequestAction.WRITE);
 
-                    final ConfigurableComponentAuthorizable authorizable = lookup.getProcessorByType(requestReportingTask.getType());
+                    final ConfigurableComponentAuthorizable authorizable = lookup.getReportingTaskByType(requestReportingTask.getType());
                     if (authorizable.isRestricted()) {
                         lookup.getRestrictedComponents().authorize(authorizer, RequestAction.WRITE, NiFiUserUtils.getNiFiUser());
                     }
@@ -380,7 +380,7 @@ public Response createControllerService(
                 lookup -> {
                     authorizeController(RequestAction.WRITE);
 
-                    final ConfigurableComponentAuthorizable authorizable = lookup.getProcessorByType(requestControllerService.getType());
+                    final ConfigurableComponentAuthorizable authorizable = lookup.getControllerServiceByType(requestControllerService.getType());
                     if (authorizable.isRestricted()) {
                         lookup.getRestrictedComponents().authorize(authorizer, RequestAction.WRITE, NiFiUserUtils.getNiFiUser());
                     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java
Patch:
@@ -2135,7 +2135,7 @@ public Response createControllerService(
                     final Authorizable processGroup = lookup.getProcessGroup(groupId).getAuthorizable();
                     processGroup.authorize(authorizer, RequestAction.WRITE, user);
 
-                    final ConfigurableComponentAuthorizable authorizable = lookup.getProcessorByType(requestControllerService.getType());
+                    final ConfigurableComponentAuthorizable authorizable = lookup.getControllerServiceByType(requestControllerService.getType());
                     if (authorizable.isRestricted()) {
                         lookup.getRestrictedComponents().authorize(authorizer, RequestAction.WRITE, user);
                     }

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/util/JdbcCommon.java
Patch:
@@ -72,6 +72,7 @@
 public class JdbcCommon {
 
     private static final int MAX_DIGITS_IN_BIGINT = 19;
+    private static final int MAX_DIGITS_IN_INT = 9;
 
     public static long convertToAvroStream(final ResultSet rs, final OutputStream outStream, boolean convertNames) throws SQLException, IOException {
         return convertToAvroStream(rs, outStream, null, null, convertNames);
@@ -284,7 +285,7 @@ public static Schema createSchema(final ResultSet rs, String recordName, boolean
                     break;
 
                 case INTEGER:
-                    if (meta.isSigned(i)) {
+                    if (meta.isSigned(i) || (meta.getPrecision(i) > 0 && meta.getPrecision(i) <= MAX_DIGITS_IN_INT)) {
                         builder.name(columnName).type().unionOf().nullBuilder().endNull().and().intType().endUnion().noDefault();
                     } else {
                         builder.name(columnName).type().unionOf().nullBuilder().endNull().and().longType().endUnion().noDefault();

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-processors/src/main/java/org/apache/nifi/processors/elasticsearch/PutElasticsearchHttp.java
Patch:
@@ -328,7 +328,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
                         if (itemNodeArray.size() > 0) {
                             // All items are returned whether they succeeded or failed, so iterate through the item array
                             // at the same time as the flow file list, moving each to success or failure accordingly
-                            for (int i = 0; i < itemNodeArray.size(); i++) {
+                            for (int i = itemNodeArray.size() - 1; i >= 0; i--) {
                                 JsonNode itemNode = itemNodeArray.get(i);
                                 FlowFile flowFile = flowFilesToTransfer.remove(i);
                                 int status = itemNode.findPath("status").asInt();

File: nifi-nar-bundles/nifi-provenance-repository-bundle/nifi-persistent-provenance-repository/src/main/java/org/apache/nifi/provenance/serialization/RecordReaders.java
Patch:
@@ -118,6 +118,7 @@ public static RecordReader newRecordReader(File file, final Collection<Path> pro
                 serializationName = dis.readUTF();
                 bufferedInStream.reset();
             } catch (final EOFException eof) {
+                fis.close();
                 return new EmptyRecordReader();
             }
 

File: nifi-nar-bundles/nifi-provenance-repository-bundle/nifi-persistent-provenance-repository/src/test/java/org/apache/nifi/provenance/TestPersistentProvenanceRepository.java
Patch:
@@ -1585,6 +1585,8 @@ public void run() {
         builder.fromFlowFile(createFlowFile(15, 3000L, attributes));
         attributes.put("uuid", "00000000-0000-0000-0000-00000000000" + 15);
         repo.registerEvent(builder.build());
+
+        Thread.sleep(3000L);
     }
 
 

File: nifi-commons/nifi-processor-utilities/src/main/java/org/apache/nifi/processor/util/bin/BinFiles.java
Patch:
@@ -278,7 +278,7 @@ private int binFlowFiles(final ProcessContext context, final ProcessSessionFacto
             for (final Map.Entry<String, List<FlowFile>> entry : flowFileGroups.entrySet()) {
                 final Set<FlowFile> unbinned = binManager.offer(entry.getKey(), entry.getValue(), session, sessionFactory);
                 for (final FlowFile flowFile : unbinned) {
-                    Bin bin = new Bin(session, 0, Long.MAX_VALUE, 0, Integer.MAX_VALUE, null);
+                    Bin bin = new Bin(sessionFactory.createSession(), 0, Long.MAX_VALUE, 0, Integer.MAX_VALUE, null);
                     bin.offer(flowFile, session);
                     this.readyBins.add(bin);
                 }

File: nifi-nar-bundles/nifi-ldap-iaa-providers-bundle/nifi-ldap-iaa-providers/src/main/java/org/apache/nifi/ldap/ReferralStrategy.java
Patch:
@@ -31,8 +31,7 @@ private ReferralStrategy(String value) {
         this.value = value;
     }
 
-    @Override
-    public String toString() {
+    public String getValue() {
         return value;
     }
 

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/util/NumberParsing.java
Patch:
@@ -21,7 +21,6 @@
 
 public class NumberParsing {
 
-    private static final Pattern NUMBER_PATTERN = Pattern.compile("-?\\d+");
 
     public static enum ParseResultType {
         NOT_NUMBER, WHOLE_NUMBER, DECIMAL;
@@ -69,6 +68,8 @@ public static enum ParseResultType {
 
     private static final Pattern DOUBLE_PATTERN = Pattern.compile(fpRegex);
 
+    private static final Pattern NUMBER_PATTERN = Pattern.compile("-?((\\d+)|(0[xX]" + HexDigits + "))");
+
     private NumberParsing(){
     }
 

File: nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/client/SiteToSiteClient.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.nifi.remote.protocol.DataPacket;
 import org.apache.nifi.remote.protocol.SiteToSiteTransportProtocol;
 import org.apache.nifi.remote.protocol.http.HttpProxy;
+import org.apache.nifi.security.util.KeyStoreUtils;
 
 import javax.net.ssl.KeyManagerFactory;
 import javax.net.ssl.SSLContext;
@@ -768,7 +769,7 @@ public SSLContext getSslContext() {
             if (keystoreFilename != null && keystorePass != null && keystoreType != null) {
                 try {
                     // prepare the keystore
-                    final KeyStore keyStore = KeyStore.getInstance(getKeystoreType().name());
+                    final KeyStore keyStore = KeyStoreUtils.getKeyStore(getKeystoreType().name());
                     try (final InputStream keyStoreStream = new FileInputStream(new File(getKeystoreFilename()))) {
                         keyStore.load(keyStoreStream, keystorePass.toCharArray());
                     }
@@ -785,7 +786,7 @@ public SSLContext getSslContext() {
             if (truststoreFilename != null && truststorePass != null && truststoreType != null) {
                 try {
                     // prepare the truststore
-                    final KeyStore trustStore = KeyStore.getInstance(getTruststoreType().name());
+                    final KeyStore trustStore = KeyStoreUtils.getTrustStore(getTruststoreType().name());
                     try (final InputStream trustStoreStream = new FileInputStream(new File(getTruststoreFilename()))) {
                         trustStore.load(trustStoreStream, truststorePass.toCharArray());
                     }

File: nifi-commons/nifi-socket-utils/src/main/java/org/apache/nifi/io/socket/SSLContextFactory.java
Patch:
@@ -33,6 +33,7 @@
 import javax.net.ssl.TrustManager;
 import javax.net.ssl.TrustManagerFactory;
 
+import org.apache.nifi.security.util.KeyStoreUtils;
 import org.apache.nifi.util.NiFiProperties;
 import org.apache.nifi.util.file.FileUtils;
 
@@ -58,7 +59,7 @@ public SSLContextFactory(final NiFiProperties properties) throws NoSuchAlgorithm
         truststoreType = properties.getProperty(NiFiProperties.SECURITY_TRUSTSTORE_TYPE);
 
         // prepare the keystore
-        final KeyStore keyStore = KeyStore.getInstance(keystoreType);
+        final KeyStore keyStore = KeyStoreUtils.getKeyStore(keystoreType);
         final FileInputStream keyStoreStream = new FileInputStream(keystore);
         try {
             keyStore.load(keyStoreStream, keystorePass);
@@ -69,7 +70,7 @@ public SSLContextFactory(final NiFiProperties properties) throws NoSuchAlgorithm
         keyManagerFactory.init(keyStore, keystorePass);
 
         // prepare the truststore
-        final KeyStore trustStore = KeyStore.getInstance(truststoreType);
+        final KeyStore trustStore = KeyStoreUtils.getTrustStore(truststoreType);
         final FileInputStream trustStoreStream = new FileInputStream(truststore);
         try {
             trustStore.load(trustStoreStream, truststorePass);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/x509/ocsp/OcspCertificateValidator.java
Patch:
@@ -29,6 +29,7 @@
 import com.sun.jersey.api.client.config.DefaultClientConfig;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.nifi.framework.security.util.SslContextFactory;
+import org.apache.nifi.security.util.KeyStoreUtils;
 import org.apache.nifi.util.FormatUtils;
 import org.apache.nifi.util.NiFiProperties;
 import org.apache.nifi.web.security.x509.ocsp.OcspStatus.ValidationStatus;
@@ -192,7 +193,7 @@ private Map<String, X509Certificate> getTrustedCAs(final NiFiProperties properti
 
         // load the configured truststore
         try (final FileInputStream fis = new FileInputStream(truststorePath)) {
-            final KeyStore truststore = KeyStore.getInstance(KeyStore.getDefaultType());
+            final KeyStore truststore = KeyStoreUtils.getTrustStore(KeyStore.getDefaultType());
             truststore.load(fis, truststorePassword);
 
             TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/GetHTTP.java
Patch:
@@ -89,6 +89,7 @@
 import org.apache.nifi.processor.Relationship;
 import org.apache.nifi.processor.exception.ProcessException;
 import org.apache.nifi.processor.util.StandardValidators;
+import org.apache.nifi.security.util.KeyStoreUtils;
 import org.apache.nifi.ssl.SSLContextService;
 import org.apache.nifi.ssl.SSLContextService.ClientAuth;
 import org.apache.nifi.util.StopWatch;
@@ -311,15 +312,15 @@ private SSLContext createSSLContext(final SSLContextService service)
         final SSLContextBuilder sslContextBuilder = new SSLContextBuilder();
 
         if (StringUtils.isNotBlank(service.getTrustStoreFile())) {
-            final KeyStore truststore = KeyStore.getInstance(service.getTrustStoreType());
+            final KeyStore truststore = KeyStoreUtils.getTrustStore(service.getTrustStoreType());
             try (final InputStream in = new FileInputStream(new File(service.getTrustStoreFile()))) {
                 truststore.load(in, service.getTrustStorePassword().toCharArray());
             }
             sslContextBuilder.loadTrustMaterial(truststore, new TrustSelfSignedStrategy());
         }
 
         if (StringUtils.isNotBlank(service.getKeyStoreFile())){
-            final KeyStore keystore = KeyStore.getInstance(service.getKeyStoreType());
+            final KeyStore keystore = KeyStoreUtils.getKeyStore(service.getKeyStoreType());
             try (final InputStream in = new FileInputStream(new File(service.getKeyStoreFile()))) {
                 keystore.load(in, service.getKeyStorePassword().toCharArray());
             }

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/PostHTTP.java
Patch:
@@ -106,6 +106,7 @@
 import org.apache.nifi.processor.io.InputStreamCallback;
 import org.apache.nifi.processor.util.StandardValidators;
 import org.apache.nifi.security.util.CertificateUtils;
+import org.apache.nifi.security.util.KeyStoreUtils;
 import org.apache.nifi.ssl.SSLContextService;
 import org.apache.nifi.stream.io.BufferedInputStream;
 import org.apache.nifi.stream.io.BufferedOutputStream;
@@ -422,7 +423,7 @@ private SSLContext createSSLContext(final SSLContextService service)
         SSLContextBuilder builder = SSLContexts.custom();
         final String trustFilename = service.getTrustStoreFile();
         if (trustFilename != null) {
-            final KeyStore truststore = KeyStore.getInstance(service.getTrustStoreType());
+            final KeyStore truststore = KeyStoreUtils.getTrustStore(service.getTrustStoreType());
             try (final InputStream in = new FileInputStream(new File(service.getTrustStoreFile()))) {
                 truststore.load(in, service.getTrustStorePassword().toCharArray());
             }
@@ -431,7 +432,7 @@ private SSLContext createSSLContext(final SSLContextService service)
 
         final String keyFilename = service.getKeyStoreFile();
         if (keyFilename != null) {
-            final KeyStore keystore = KeyStore.getInstance(service.getKeyStoreType());
+            final KeyStore keystore = KeyStoreUtils.getKeyStore(service.getKeyStoreType());
             try (final InputStream in = new FileInputStream(new File(service.getKeyStoreFile()))) {
                 keystore.load(in, service.getKeyStorePassword().toCharArray());
             }

File: nifi-toolkit/nifi-toolkit-tls/src/main/java/org/apache/nifi/toolkit/tls/configuration/TlsClientConfig.java
Patch:
@@ -38,7 +38,6 @@ public TlsClientConfig(TlsConfig tlsConfig) {
         setCaHostname(tlsConfig.getCaHostname());
         setPort(tlsConfig.getPort());
         setKeyStoreType(tlsConfig.getKeyStoreType());
-        setTrustStoreType(tlsConfig.getKeyStoreType());
         setKeyPairAlgorithm(tlsConfig.getKeyPairAlgorithm());
         setKeySize(tlsConfig.getKeySize());
         setSigningAlgorithm(tlsConfig.getSigningAlgorithm());

File: nifi-toolkit/nifi-toolkit-tls/src/main/java/org/apache/nifi/toolkit/tls/service/server/TlsCertificateAuthorityServiceCommandLine.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.nifi.toolkit.tls.configuration.TlsConfig;
 import org.apache.nifi.toolkit.tls.service.BaseCertificateAuthorityCommandLine;
 import org.apache.nifi.toolkit.tls.util.InputStreamFactory;
-import org.apache.nifi.toolkit.tls.util.TlsHelper;
 import org.apache.nifi.util.StringUtils;
 
 import java.io.File;
@@ -49,7 +48,6 @@ public TlsCertificateAuthorityServiceCommandLine(InputStreamFactory inputStreamF
     }
 
     public static void main(String[] args) throws Exception {
-        TlsHelper.addBouncyCastleProvider();
         TlsCertificateAuthorityServiceCommandLine tlsCertificateAuthorityServiceCommandLine = new TlsCertificateAuthorityServiceCommandLine();
         try {
             tlsCertificateAuthorityServiceCommandLine.parse(args);

File: nifi-toolkit/nifi-toolkit-tls/src/main/java/org/apache/nifi/toolkit/tls/standalone/TlsToolkitStandalone.java
Patch:
@@ -18,17 +18,17 @@
 package org.apache.nifi.toolkit.tls.standalone;
 
 import org.apache.nifi.security.util.CertificateUtils;
+import org.apache.nifi.security.util.KeystoreType;
+import org.apache.nifi.security.util.KeyStoreUtils;
 import org.apache.nifi.toolkit.tls.configuration.InstanceDefinition;
 import org.apache.nifi.toolkit.tls.configuration.StandaloneConfig;
 import org.apache.nifi.toolkit.tls.configuration.TlsClientConfig;
-import org.apache.nifi.toolkit.tls.manager.BaseTlsManager;
 import org.apache.nifi.toolkit.tls.manager.TlsCertificateAuthorityManager;
 import org.apache.nifi.toolkit.tls.manager.TlsClientManager;
 import org.apache.nifi.toolkit.tls.manager.writer.NifiPropertiesTlsClientConfigWriter;
 import org.apache.nifi.toolkit.tls.properties.NiFiPropertiesWriterFactory;
 import org.apache.nifi.toolkit.tls.util.OutputStreamFactory;
 import org.apache.nifi.toolkit.tls.util.TlsHelper;
-import org.bouncycastle.jce.provider.BouncyCastleProvider;
 import org.bouncycastle.openssl.jcajce.JcaMiscPEMGenerator;
 import org.bouncycastle.util.io.pem.PemWriter;
 import org.slf4j.Logger;
@@ -214,7 +214,7 @@ public void createNifiKeystoresAndTrustStores(StandaloneConfig standaloneConfig)
             }
             KeyPair keyPair = TlsHelper.generateKeyPair(keyPairAlgorithm, keySize);
             X509Certificate clientCert = CertificateUtils.generateIssuedCertificate(reorderedDn, keyPair.getPublic(), certificate, caKeyPair, signingAlgorithm, days);
-            KeyStore keyStore = KeyStore.getInstance(BaseTlsManager.PKCS_12, BouncyCastleProvider.PROVIDER_NAME);
+            KeyStore keyStore = KeyStoreUtils.getKeyStore(KeystoreType.PKCS12.toString());
             keyStore.load(null, null);
             keyStore.setKeyEntry(NIFI_KEY, keyPair.getPrivate(), null, new Certificate[]{clientCert, certificate});
             String password = TlsHelper.writeKeyStore(keyStore, outputStreamFactory, clientCertFile, clientPasswords.get(i), standaloneConfig.isClientPasswordsGenerated());

File: nifi-toolkit/nifi-toolkit-tls/src/main/java/org/apache/nifi/toolkit/tls/standalone/TlsToolkitStandaloneCommandLine.java
Patch:
@@ -26,7 +26,6 @@
 import org.apache.nifi.toolkit.tls.configuration.TlsConfig;
 import org.apache.nifi.toolkit.tls.properties.NiFiPropertiesWriterFactory;
 import org.apache.nifi.toolkit.tls.util.PasswordUtil;
-import org.apache.nifi.toolkit.tls.util.TlsHelper;
 import org.apache.nifi.util.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -100,7 +99,6 @@ protected TlsToolkitStandaloneCommandLine(PasswordUtil passwordUtil) {
     }
 
     public static void main(String[] args) {
-        TlsHelper.addBouncyCastleProvider();
         TlsToolkitStandaloneCommandLine tlsToolkitStandaloneCommandLine = new TlsToolkitStandaloneCommandLine();
         try {
             tlsToolkitStandaloneCommandLine.parse(args);

File: nifi-nar-bundles/nifi-websocket-bundle/nifi-websocket-services-jetty/src/test/java/org/apache/nifi/websocket/TestJettyWebSocketClient.java
Patch:
@@ -35,7 +35,7 @@ public void testValidationRequiredProperties() throws Exception {
         final Collection<ValidationResult> results = service.validate(context.getValidationContext());
         assertEquals(1, results.size());
         final ValidationResult result = results.iterator().next();
-        assertEquals(JettyWebSocketClient.WS_URI.getName(), result.getSubject());
+        assertEquals(JettyWebSocketClient.WS_URI.getDisplayName(), result.getSubject());
     }
 
     @Test

File: nifi-nar-bundles/nifi-websocket-bundle/nifi-websocket-services-jetty/src/test/java/org/apache/nifi/websocket/TestJettyWebSocketServer.java
Patch:
@@ -35,7 +35,7 @@ public void testValidationRequiredProperties() throws Exception {
         final Collection<ValidationResult> results = service.validate(context.getValidationContext());
         assertEquals(1, results.size());
         final ValidationResult result = results.iterator().next();
-        assertEquals(JettyWebSocketServer.LISTEN_PORT.getName(), result.getSubject());
+        assertEquals(JettyWebSocketServer.LISTEN_PORT.getDisplayName(), result.getSubject());
     }
 
     @Test

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/FlowController.java
Patch:
@@ -3859,7 +3859,8 @@ public ProvenanceEventRecord replayFlowFile(final ProvenanceEventRecord event, f
         provenanceRepository.registerEvent(replayEvent);
 
         // Update the FlowFile Repository to indicate that we have added the FlowFile to the flow
-        final StandardRepositoryRecord record = new StandardRepositoryRecord(queue, flowFileRecord);
+        final StandardRepositoryRecord record = new StandardRepositoryRecord(queue);
+        record.setWorking(flowFileRecord);
         record.setDestination(queue);
         flowFileRepository.updateRepository(Collections.<RepositoryRecord>singleton(record));
 

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-0-10-processors/src/test/java/org/apache/nifi/processors/kafka/pubsub/ConsumeKafkaTest.java
Patch:
@@ -82,7 +82,7 @@ public void validatePropertiesValidation() throws Exception {
             runner.assertValid();
             fail();
         } catch (AssertionError e) {
-            assertTrue(e.getMessage().contains("invalid because group.id is required"));
+            assertTrue(e.getMessage().contains("invalid because Group ID is required"));
         }
 
         runner.setProperty(ConsumeKafka_0_10.GROUP_ID, "");

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-0-9-processors/src/test/java/org/apache/nifi/processors/kafka/pubsub/ConsumeKafkaTest.java
Patch:
@@ -82,7 +82,7 @@ public void validatePropertiesValidation() throws Exception {
             runner.assertValid();
             fail();
         } catch (AssertionError e) {
-            assertTrue(e.getMessage().contains("invalid because group.id is required"));
+            assertTrue(e.getMessage().contains("invalid because Group ID is required"));
         }
 
         runner.setProperty(ConsumeKafka.GROUP_ID, "");

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-documentation/src/main/java/org/apache/nifi/documentation/init/ControllerServiceInitializer.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.nifi.documentation.mock.MockComponentLogger;
 import org.apache.nifi.documentation.util.ReflectionUtils;
 import org.apache.nifi.logging.ComponentLog;
+import org.apache.nifi.nar.ExtensionManager;
 import org.apache.nifi.nar.NarCloseable;
 import org.apache.nifi.reporting.InitializationException;
 
@@ -53,6 +54,8 @@ public void teardown(ConfigurableComponent component) {
             final ComponentLog logger = new MockComponentLogger();
             final MockConfigurationContext context = new MockConfigurationContext();
             ReflectionUtils.quietlyInvokeMethodsWithAnnotation(OnShutdown.class, controllerService, logger, context);
+        } finally {
+            ExtensionManager.removeInstanceClassLoaderIfExists(component.getIdentifier());
         }
     }
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-documentation/src/main/java/org/apache/nifi/documentation/init/ProcessorInitializer.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.nifi.documentation.mock.MockComponentLogger;
 import org.apache.nifi.documentation.util.ReflectionUtils;
 import org.apache.nifi.logging.ComponentLog;
+import org.apache.nifi.nar.ExtensionManager;
 import org.apache.nifi.nar.NarCloseable;
 import org.apache.nifi.processor.Processor;
 import org.apache.nifi.processor.ProcessorInitializationContext;
@@ -52,6 +53,8 @@ public void teardown(ConfigurableComponent component) {
             final ComponentLog logger = new MockComponentLogger();
             final MockProcessContext context = new MockProcessContext();
             ReflectionUtils.quietlyInvokeMethodsWithAnnotation(OnShutdown.class, processor, logger, context);
+        } finally {
+            ExtensionManager.removeInstanceClassLoaderIfExists(component.getIdentifier());
         }
     }
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-documentation/src/main/java/org/apache/nifi/documentation/init/ReportingTaskingInitializer.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.nifi.documentation.mock.MockComponentLogger;
 import org.apache.nifi.documentation.mock.MockReportingInitializationContext;
 import org.apache.nifi.documentation.util.ReflectionUtils;
+import org.apache.nifi.nar.ExtensionManager;
 import org.apache.nifi.nar.NarCloseable;
 import org.apache.nifi.reporting.InitializationException;
 import org.apache.nifi.reporting.ReportingInitializationContext;
@@ -51,6 +52,8 @@ public void teardown(ConfigurableComponent component) {
 
             final MockConfigurationContext context = new MockConfigurationContext();
             ReflectionUtils.quietlyInvokeMethodsWithAnnotation(OnShutdown.class, reportingTask, new MockComponentLogger(), context);
+        } finally {
+            ExtensionManager.removeInstanceClassLoaderIfExists(component.getIdentifier());
         }
     }
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-properties-loader/src/main/java/org/apache/nifi/properties/AESSensitivePropertyProvider.java
Patch:
@@ -217,6 +217,8 @@ public String unprotect(String protectedValue) throws SensitivePropertyProtectio
             throw new IllegalArgumentException("The cipher text does not contain the delimiter " + DELIMITER + " -- it should be of the form Base64(IV) || Base64(cipherText)");
         }
 
+        protectedValue = protectedValue.trim();
+
         final String IV_B64 = protectedValue.substring(0, protectedValue.indexOf(DELIMITER));
         byte[] iv = Base64.decode(IV_B64);
         if (iv.length < IV_LENGTH) {

File: nifi-commons/nifi-utils/src/main/java/org/apache/nifi/stream/io/util/TextLineDemarcator.java
Patch:
@@ -214,7 +214,7 @@ private void fill() {
      *                            {@link InputStream} (i.e., EOF) and such line does not terminate with CR or LF or the combination of the two.
      *                            Value 1 is returned if text line ends with '\n' or '\r'.
      *                            Value 2 is returned if line ends with '\r\n').</li>
-     *    <li><i>startsWithMatch</i> - <code>true</code> by default unless <code>startWith</code> bytes are provided and not matched. 
+     *    <li><i>startsWithMatch</i> - <code>true</code> by default unless <code>startWith</code> bytes are provided and not matched.
      *                                 See {@link #nextOffsetInfo(byte[])} for more info.</li>
      *  </ul>
      **/

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiServiceFacade.java
Patch:
@@ -2529,7 +2529,7 @@ public ControllerDTO getSiteToSiteDetails() {
         controllerDTO.setInstanceId(controllerFacade.getInstanceId());
         controllerDTO.setInputPorts(inputPortDtos);
         controllerDTO.setOutputPorts(outputPortDtos);
-        controllerDTO.setInputPortCount(inputPorts.size());
+        controllerDTO.setInputPortCount(inputPortDtos.size());
         controllerDTO.setOutputPortCount(outputPortDtos.size());
         controllerDTO.setRunningCount(counts.getRunningCount());
         controllerDTO.setStoppedCount(counts.getStoppedCount());

File: nifi-nar-bundles/nifi-snmp-bundle/nifi-snmp-processors/src/main/java/org/apache/nifi/snmp/processors/AbstractSNMPProcessor.java
Patch:
@@ -361,6 +361,8 @@ private void buildTargetResource(ProcessContext context) {
         }
         if (this.snmpTarget == null) {
             this.snmpTarget = this.createSnmpTarget(context);
+        }
+        if (this.targetResource == null) {
             this.targetResource = this.finishBuildingTargetResource(context);
         }
     }

File: nifi-toolkit/nifi-toolkit-tls/src/main/java/org/apache/nifi/toolkit/tls/configuration/TlsClientConfig.java
Patch:
@@ -42,6 +42,9 @@ public TlsClientConfig(TlsConfig tlsConfig) {
         setKeyPairAlgorithm(tlsConfig.getKeyPairAlgorithm());
         setKeySize(tlsConfig.getKeySize());
         setSigningAlgorithm(tlsConfig.getSigningAlgorithm());
+        setDnPrefix(tlsConfig.getDnPrefix());
+        setDnSuffix(tlsConfig.getDnSuffix());
+        setReorderDn(tlsConfig.getReorderDn());
     }
 
 

File: nifi-toolkit/nifi-toolkit-tls/src/main/java/org/apache/nifi/toolkit/tls/service/BaseCertificateAuthorityCommandLine.java
Patch:
@@ -53,7 +53,7 @@ public BaseCertificateAuthorityCommandLine(String header) {
         addOptionNoArg("F", USE_CONFIG_JSON_ARG, "Flag specifying that all configuration is read from " + CONFIG_JSON_ARG + " to facilitate automated use (otherwise "
                 + CONFIG_JSON_ARG + " will only be written to.");
         addOptionWithArg("p", PORT_ARG, getPortDescription(), TlsConfig.DEFAULT_PORT);
-        addOptionWithArg("D", DN_ARG, getDnDescription(), TlsConfig.calcDefaultDn(getDnHostname()));
+        addOptionWithArg("D", DN_ARG, getDnDescription(), new TlsConfig().calcDefaultDn(getDnHostname()));
     }
 
     protected abstract String getTokenDescription();
@@ -82,7 +82,7 @@ protected CommandLine doParse(String[] args) throws CommandLineParseException {
             printUsageAndThrow(TOKEN_ARG + " argument must not be empty unless " + USE_CONFIG_JSON_ARG + " or " + READ_CONFIG_JSON_ARG+ " set", ExitCode.ERROR_TOKEN_ARG_EMPTY);
         }
         port = getIntValue(commandLine, PORT_ARG, TlsConfig.DEFAULT_PORT);
-        dn = commandLine.getOptionValue(DN_ARG, TlsConfig.calcDefaultDn(getDnHostname()));
+        dn = commandLine.getOptionValue(DN_ARG, new TlsConfig().calcDefaultDn(getDnHostname()));
         return commandLine;
     }
 

File: nifi-toolkit/nifi-toolkit-tls/src/main/java/org/apache/nifi/toolkit/tls/standalone/TlsToolkitStandalone.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.nifi.toolkit.tls.configuration.InstanceDefinition;
 import org.apache.nifi.toolkit.tls.configuration.StandaloneConfig;
 import org.apache.nifi.toolkit.tls.configuration.TlsClientConfig;
-import org.apache.nifi.toolkit.tls.configuration.TlsConfig;
 import org.apache.nifi.toolkit.tls.manager.BaseTlsManager;
 import org.apache.nifi.toolkit.tls.manager.TlsCertificateAuthorityManager;
 import org.apache.nifi.toolkit.tls.manager.TlsClientManager;
@@ -180,7 +179,7 @@ public void createNifiKeystoresAndTrustStores(StandaloneConfig standaloneConfig)
             tlsClientConfig.setTrustStorePassword(instanceDefinition.getTrustStorePassword());
             TlsClientManager tlsClientManager = new TlsClientManager(tlsClientConfig);
             KeyPair keyPair = TlsHelper.generateKeyPair(keyPairAlgorithm, keySize);
-            tlsClientManager.addPrivateKeyToKeyStore(keyPair, NIFI_KEY, CertificateUtils.generateIssuedCertificate(TlsConfig.calcDefaultDn(hostname),
+            tlsClientManager.addPrivateKeyToKeyStore(keyPair, NIFI_KEY, CertificateUtils.generateIssuedCertificate(tlsClientConfig.calcDefaultDn(hostname),
                     keyPair.getPublic(), certificate, caKeyPair, signingAlgorithm, days), certificate);
             tlsClientManager.setCertificateEntry(NIFI_CERT, certificate);
             tlsClientManager.addClientConfigurationWriter(new NifiPropertiesTlsClientConfigWriter(niFiPropertiesWriterFactory, new File(hostDir, "nifi.properties"),

File: nifi-toolkit/nifi-toolkit-tls/src/test/java/org/apache/nifi/toolkit/tls/service/client/TlsCertificateAuthorityClientCommandLineTest.java
Patch:
@@ -60,7 +60,7 @@ public void testDefaults() throws CommandLineParseException, IOException {
         TlsClientConfig clientConfig = tlsCertificateAuthorityClientCommandLine.createClientConfig();
 
         assertEquals(TlsConfig.DEFAULT_HOSTNAME, clientConfig.getCaHostname());
-        Assert.assertEquals(TlsConfig.calcDefaultDn(InetAddress.getLocalHost().getHostName()), clientConfig.getDn());
+        Assert.assertEquals(new TlsConfig().calcDefaultDn(InetAddress.getLocalHost().getHostName()), clientConfig.getDn());
         assertEquals(TlsCertificateAuthorityClientCommandLine.KEYSTORE + TlsConfig.DEFAULT_KEY_STORE_TYPE.toLowerCase(), clientConfig.getKeyStore());
         assertEquals(TlsConfig.DEFAULT_KEY_STORE_TYPE, clientConfig.getKeyStoreType());
         assertNull(clientConfig.getKeyStorePassword());

File: nifi-toolkit/nifi-toolkit-tls/src/test/java/org/apache/nifi/toolkit/tls/service/client/TlsCertificateSigningRequestPerformerTest.java
Patch:
@@ -108,7 +108,7 @@ public void setup() throws GeneralSecurityException, OperatorCreationException,
 
         when(tlsClientConfig.getToken()).thenReturn(testToken);
         when(tlsClientConfig.getCaHostname()).thenReturn(testCaHostname);
-        when(tlsClientConfig.getDn()).thenReturn(TlsConfig.calcDefaultDn(testCaHostname));
+        when(tlsClientConfig.getDn()).thenReturn(new TlsConfig().calcDefaultDn(testCaHostname));
         when(tlsClientConfig.getPort()).thenReturn(testPort);
         when(tlsClientConfig.createCertificateSigningRequestPerformer()).thenReturn(tlsCertificateSigningRequestPerformer);
         when(tlsClientConfig.getSigningAlgorithm()).thenReturn(TlsConfig.DEFAULT_SIGNING_ALGORITHM);

File: nifi-toolkit/nifi-toolkit-tls/src/test/java/org/apache/nifi/toolkit/tls/service/server/TlsCertificateAuthorityServiceHandlerTest.java
Patch:
@@ -126,7 +126,7 @@ public void setup() throws Exception {
             return new PrintWriter(response);
         });
         caCert = CertificateUtils.generateSelfSignedX509Certificate(keyPair, "CN=fakeCa", TlsConfig.DEFAULT_SIGNING_ALGORITHM, TlsConfig.DEFAULT_DAYS);
-        requestedDn = TlsConfig.calcDefaultDn(TlsConfig.DEFAULT_HOSTNAME);
+        requestedDn = new TlsConfig().calcDefaultDn(TlsConfig.DEFAULT_HOSTNAME);
         certificateKeyPair = TlsHelper.generateKeyPair(TlsConfig.DEFAULT_KEY_PAIR_ALGORITHM, TlsConfig.DEFAULT_KEY_SIZE);
         jcaPKCS10CertificationRequest = TlsHelper.generateCertificationRequest(requestedDn, certificateKeyPair, TlsConfig.DEFAULT_SIGNING_ALGORITHM);
         testPemEncodedCsr = TlsHelper.pemEncodeJcaObject(jcaPKCS10CertificationRequest);

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/FetchFile.java
Patch:
@@ -186,7 +186,8 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
         // Verify that file system is reachable and file exists
         Path filePath = file.toPath();
         if (!Files.exists(filePath) && !Files.notExists(filePath)){ // see https://docs.oracle.com/javase/tutorial/essential/io/check.html for more details
-            getLogger().log(levelFileNotFound, "Could not fetch file {} from file system for {} because the existence of the file cannot be verified; routing to failure", new Object[] {file, flowFile});
+            getLogger().log(levelFileNotFound, "Could not fetch file {} from file system for {} because the existence of the file cannot be verified; routing to failure",
+                    new Object[] {file, flowFile});
             session.transfer(session.penalize(flowFile), REL_FAILURE);
             return;
         } else if (!Files.exists(filePath)) {

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-processors/src/main/java/org/apache/nifi/processors/elasticsearch/AbstractElasticsearchHttpProcessor.java
Patch:
@@ -53,7 +53,7 @@ public abstract class AbstractElasticsearchHttpProcessor extends AbstractElastic
     public static final PropertyDescriptor ES_URL = new PropertyDescriptor.Builder()
             .name("elasticsearch-http-url")
             .displayName("Elasticsearch URL")
-            .description("Elasticsearch URL which will be connected to, including scheme, host, port, path. The default port for the REST API is 9200.")
+            .description("Elasticsearch URL which will be connected to, including scheme (http, e.g.), host, and port. The default port for the REST API is 9200.")
             .required(true)
             .addValidator(StandardValidators.URL_VALIDATOR)
             .build();

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ExecuteProcess.java
Patch:
@@ -316,8 +316,7 @@ protected Future<?> launchProcess(final ProcessContext context, final List<Strin
                 @Override
                 public void run() {
                     try (final BufferedReader reader = new BufferedReader(new InputStreamReader(externalProcess.getErrorStream()))) {
-                        while (reader.read() >= 0) {
-                        }
+                        reader.lines().filter(line -> line != null && line.length() > 0).forEach(getLogger()::warn);
                     } catch (final IOException ioe) {
                     }
                 }

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/s3/AbstractS3Processor.java
Patch:
@@ -121,7 +121,7 @@ public abstract class AbstractS3Processor extends AbstractAWSCredentialsProvider
             .required(false)
             .allowableValues(
                     new AllowableValue("Default Signature", "Default Signature"),
-                    new AllowableValue("AWSS3V4Signer", "Signature v4"),
+                    new AllowableValue("AWSS3V4SignerType", "Signature v4"),
                     new AllowableValue("S3SignerType", "Signature v2"))
             .defaultValue("Default Signature")
             .build();

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/PutSQL.java
Patch:
@@ -116,7 +116,7 @@ public class PutSQL extends AbstractProcessor {
     static final PropertyDescriptor SUPPORT_TRANSACTIONS = new PropertyDescriptor.Builder()
             .name("Support Fragmented Transactions")
             .description("If true, when a FlowFile is consumed by this Processor, the Processor will first check the fragment.identifier and fragment.count attributes of that FlowFile. "
-                    + "If the fragment.count value is greater than 1, the Processor will not process any FlowFile will that fragment.identifier until all are available; "
+                    + "If the fragment.count value is greater than 1, the Processor will not process any FlowFile with that fragment.identifier until all are available; "
                     + "at that point, it will process all FlowFiles with that fragment.identifier as a single transaction, in the order specified by the FlowFiles' fragment.index attributes. "
                     + "This Provides atomicity of those SQL statements. If this value is false, these attributes will be ignored and the updates will occur independent of one another.")
             .allowableValues("true", "false")

File: nifi-nar-bundles/nifi-hive-bundle/nifi-hive-processors/src/main/java/org/apache/nifi/processors/hive/PutHiveStreaming.java
Patch:
@@ -323,6 +323,8 @@ public void setup(final ProcessContext context) {
                 .withMaxOpenConnections(maxConnections)
                 .withHeartBeatInterval(heartbeatInterval);
 
+        hiveConfigurator.preload(hiveConfig);
+
         if (SecurityUtil.isSecurityEnabled(hiveConfig)) {
             final String principal = context.getProperty(kerberosProperties.getKerberosPrincipal()).getValue();
             final String keyTab = context.getProperty(kerberosProperties.getKerberosKeytab()).getValue();

File: nifi-commons/nifi-processor-utilities/src/main/java/org/apache/nifi/processor/util/bin/BinFiles.java
Patch:
@@ -71,14 +71,15 @@ public abstract class BinFiles extends AbstractSessionFactoryProcessor {
     public static final PropertyDescriptor MAX_ENTRIES = new PropertyDescriptor.Builder()
             .name("Maximum Number of Entries")
             .description("The maximum number of files to include in a bundle. If not specified, there is no maximum.")
+            .defaultValue("1000")
             .required(false)
             .addValidator(StandardValidators.POSITIVE_INTEGER_VALIDATOR)
             .build();
 
     public static final PropertyDescriptor MAX_BIN_COUNT = new PropertyDescriptor.Builder()
             .name("Maximum number of Bins")
             .description("Specifies the maximum number of bins that can be held in memory at any one time")
-            .defaultValue("100")
+            .defaultValue("5")
             .required(true)
             .addValidator(StandardValidators.POSITIVE_INTEGER_VALIDATOR)
             .build();

File: nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/client/SiteInfoProvider.java
Patch:
@@ -59,7 +59,7 @@ private ControllerDTO refreshRemoteInfo() throws IOException {
         final ControllerDTO controller;
 
         try (final SiteToSiteRestApiClient apiClient = new SiteToSiteRestApiClient(sslContext, proxy, EventReporter.NO_OP)) {
-            apiClient.resolveBaseUrl(clusterUrl);
+            apiClient.setBaseUrl(SiteToSiteRestApiClient.resolveBaseUrl(clusterUrl));
             apiClient.setConnectTimeoutMillis(connectTimeoutMillis);
             apiClient.setReadTimeoutMillis(readTimeoutMillis);
             controller = apiClient.getController();

File: nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/client/http/HttpClient.java
Patch:
@@ -107,15 +107,15 @@ public Set<PeerStatus> fetchRemotePeerStatuses(PeerDescription peerDescription)
         // Each node should has the same URL structure and network reach-ability with the proxy configuration.
         try (final SiteToSiteRestApiClient apiClient = new SiteToSiteRestApiClient(config.getSslContext(), config.getHttpProxy(), config.getEventReporter())) {
             final String scheme = peerDescription.isSecure() ? "https" : "http";
-            final String clusterApiUrl = apiClient.resolveBaseUrl(scheme, peerDescription.getHostname(), peerDescription.getPort());
+            apiClient.setBaseUrl(scheme, peerDescription.getHostname(), peerDescription.getPort());
 
             final int timeoutMillis = (int) config.getTimeout(TimeUnit.MILLISECONDS);
             apiClient.setConnectTimeoutMillis(timeoutMillis);
             apiClient.setReadTimeoutMillis(timeoutMillis);
 
             final Collection<PeerDTO> peers = apiClient.getPeers();
             if(peers == null || peers.size() == 0){
-                throw new IOException("Couldn't get any peer to communicate with. " + clusterApiUrl + " returned zero peers.");
+                throw new IOException("Couldn't get any peer to communicate with. " + apiClient.getBaseUrl() + " returned zero peers.");
             }
 
             // Convert the PeerDTO's to PeerStatus objects. Use 'true' for the query-peer-for-peers flag because Site-to-Site over HTTP

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/PropertyDescriptorDtoMerger.java
Patch:
@@ -33,7 +33,7 @@ public static void merge(PropertyDescriptorDTO clientPropertyDescriptor, Map<Nod
         for (final Map.Entry<NodeIdentifier, PropertyDescriptorDTO> nodeEntry : dtoMap.entrySet()) {
             final PropertyDescriptorDTO nodePropertyDescriptor = nodeEntry.getValue();
             final List<AllowableValueEntity> nodePropertyDescriptorAllowableValues = nodePropertyDescriptor.getAllowableValues();
-            if (clientPropertyDescriptor != nodePropertyDescriptor && nodePropertyDescriptorAllowableValues != null) {
+            if (nodePropertyDescriptorAllowableValues != null) {
                 nodePropertyDescriptorAllowableValues.stream().forEach(allowableValueEntity -> {
                     allowableValueMap.computeIfAbsent(nodePropertyDescriptorAllowableValues.indexOf(allowableValueEntity), propertyDescriptorToAllowableValue -> new ArrayList<>())
                             .add(allowableValueEntity);

File: nifi-commons/nifi-utils/src/main/java/org/apache/nifi/stream/io/util/StreamDemarcator.java
Patch:
@@ -145,6 +145,7 @@ private void fill() throws IOException {
                 System.arraycopy(this.buffer, this.mark, this.buffer, 0, length);
                 this.index = length;
                 this.mark = 0;
+                this.readAheadLength = length;
             }
         }
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/PutEmail.java
Patch:
@@ -318,7 +318,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
             if (context.getProperty(ATTACH_FILE).asBoolean()) {
                 final MimeBodyPart mimeText = new PreencodedMimeBodyPart("base64");
                 mimeText.setDataHandler(new DataHandler(new ByteArrayDataSource(
-                        Base64.encodeBase64(messageText.getBytes("UTF-8")), "text/plain; charset=\"utf-8\"")));
+                        Base64.encodeBase64(messageText.getBytes("UTF-8")), contentType + "; charset=\"utf-8\"")));
                 final MimeBodyPart mimeFile = new MimeBodyPart();
                 session.read(flowFile, new InputStreamCallback() {
                     @Override

File: nifi-nar-bundles/nifi-kite-bundle/nifi-kite-processors/src/main/java/org/apache/nifi/processors/kite/ConvertCSVToAvro.java
Patch:
@@ -27,7 +27,6 @@
 import java.util.Set;
 
 import org.apache.avro.Schema;
-import org.apache.avro.file.CodecFactory;
 import org.apache.avro.file.DataFileWriter;
 import org.apache.avro.generic.GenericData.Record;
 import org.apache.commons.lang3.StringEscapeUtils;
@@ -63,7 +62,7 @@
 @Tags({"kite", "csv", "avro"})
 @InputRequirement(Requirement.INPUT_REQUIRED)
 @CapabilityDescription("Converts CSV files to Avro according to an Avro Schema")
-public class ConvertCSVToAvro extends AbstractKiteProcessor {
+public class ConvertCSVToAvro extends AbstractKiteConvertProcessor {
 
     private static final CSVProperties DEFAULTS = new CSVProperties.Builder().build();
 
@@ -164,6 +163,7 @@ public ValidationResult validate(String subject, String input, ValidationContext
         .add(ESCAPE)
         .add(HAS_HEADER)
         .add(LINES_TO_SKIP)
+        .add(COMPRESSION_TYPE)
         .build();
 
     private static final Set<Relationship> RELATIONSHIPS = ImmutableSet.<Relationship> builder()
@@ -221,7 +221,7 @@ public void onTrigger(ProcessContext context, final ProcessSession session)
         }
 
         try (final DataFileWriter<Record> writer = new DataFileWriter<>(AvroUtil.newDatumWriter(schema, Record.class))) {
-            writer.setCodec(CodecFactory.snappyCodec());
+            writer.setCodec(getCodecFactory(context.getProperty(COMPRESSION_TYPE).getValue()));
 
             try {
                 final AtomicLong written = new AtomicLong(0L);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/message/ProtocolMessage.java
Patch:
@@ -35,7 +35,9 @@ public static enum MessageType {
         HEARTBEAT_RESPONSE,
         NODE_CONNECTION_STATUS_REQUEST,
         NODE_CONNECTION_STATUS_RESPONSE,
-        NODE_STATUS_CHANGE;
+        NODE_STATUS_CHANGE,
+        CLUSTER_WORKLOAD_REQUEST,
+        CLUSTER_WORKLOAD_RESPONSE
     }
 
     public abstract MessageType getType();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/spring/NodeClusterCoordinatorFactoryBean.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.nifi.cluster.coordination.flow.FlowElection;
 import org.apache.nifi.cluster.coordination.node.NodeClusterCoordinator;
 import org.apache.nifi.cluster.firewall.ClusterNodeFirewall;
+import org.apache.nifi.cluster.protocol.NodeProtocolSender;
 import org.apache.nifi.cluster.protocol.impl.ClusterCoordinationProtocolSenderListener;
 import org.apache.nifi.controller.leader.election.LeaderElectionManager;
 import org.apache.nifi.events.EventReporter;
@@ -46,8 +47,8 @@ public NodeClusterCoordinator getObject() throws Exception {
             final RevisionManager revisionManager = applicationContext.getBean("revisionManager", RevisionManager.class);
             final LeaderElectionManager electionManager = applicationContext.getBean("leaderElectionManager", LeaderElectionManager.class);
             final FlowElection flowElection = applicationContext.getBean("flowElection", FlowElection.class);
-
-            nodeClusterCoordinator = new NodeClusterCoordinator(protocolSenderListener, eventReporter, electionManager, flowElection, clusterFirewall, revisionManager, properties);
+            final NodeProtocolSender nodeProtocolSender = applicationContext.getBean("nodeProtocolSender", NodeProtocolSender.class);
+            nodeClusterCoordinator = new NodeClusterCoordinator(protocolSenderListener, eventReporter, electionManager, flowElection, clusterFirewall, revisionManager, properties, nodeProtocolSender);
         }
 
         return nodeClusterCoordinator;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/integration/Node.java
Patch:
@@ -277,7 +277,8 @@ public void reportEvent(Severity severity, String category, String message) {
         }
 
         final ClusterCoordinationProtocolSenderListener protocolSenderListener = new ClusterCoordinationProtocolSenderListener(createCoordinatorProtocolSender(), protocolListener);
-        return new NodeClusterCoordinator(protocolSenderListener, eventReporter, electionManager, flowElection, null, revisionManager, nodeProperties);
+        return new NodeClusterCoordinator(protocolSenderListener, eventReporter, electionManager, flowElection, null,
+                revisionManager, nodeProperties, protocolSender);
     }
 
 

File: nifi-maven-archetypes/nifi-service-bundle-archetype/src/main/resources/archetype-resources/nifi-__artifactBaseName__/src/main/java/StandardMyService.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
-import java.util.concurrent.TimeUnit;
 
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.Tags;
@@ -37,7 +36,8 @@
 public class StandardMyService extends AbstractControllerService implements MyService {
 
     public static final PropertyDescriptor MY_PROPERTY = new PropertyDescriptor
-            .Builder().name("My Property")
+            .Builder().name("MY_PROPERTY")
+            .displayName("My Property")
             .description("Example Property")
             .required(true)
             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)

File: nifi-maven-archetypes/nifi-service-bundle-archetype/src/main/resources/archetype-resources/nifi-__artifactBaseName__/src/test/java/TestStandardMyService.java
Patch:
@@ -19,7 +19,6 @@
 import org.apache.nifi.reporting.InitializationException;
 import org.apache.nifi.util.TestRunner;
 import org.apache.nifi.util.TestRunners;
-import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 

File: nifi-nar-bundles/nifi-solr-bundle/nifi-solr-processors/src/main/java/org/apache/nifi/processors/solr/PutSolrContentStream.java
Patch:
@@ -88,6 +88,7 @@ public class PutSolrContentStream extends SolrProcessor {
             .required(false)
             .addValidator(StandardValidators.POSITIVE_LONG_VALIDATOR)
             .expressionLanguageSupported(true)
+            .defaultValue("5000")
             .build();
 
     public static final Relationship REL_SUCCESS = new Relationship.Builder()
@@ -123,6 +124,8 @@ protected void init(final ProcessorInitializationContext context) {
         descriptors.add(CONTENT_STREAM_PATH);
         descriptors.add(CONTENT_TYPE);
         descriptors.add(COMMIT_WITHIN);
+        descriptors.add(JAAS_CLIENT_APP_NAME);
+        descriptors.add(SSL_CONTEXT_SERVICE);
         descriptors.add(SOLR_SOCKET_TIMEOUT);
         descriptors.add(SOLR_CONNECTION_TIMEOUT);
         descriptors.add(SOLR_MAX_CONNECTIONS);

File: nifi-nar-bundles/nifi-solr-bundle/nifi-solr-processors/src/test/java/org/apache/nifi/processors/solr/TestGetSolr.java
Patch:
@@ -63,7 +63,7 @@ public void setup() {
                     .getLocation().getFile() + "../../target";
 
             solrClient = EmbeddedSolrServerFactory.create(EmbeddedSolrServerFactory.DEFAULT_SOLR_HOME,
-                    EmbeddedSolrServerFactory.DEFAULT_CORE_HOME, DEFAULT_SOLR_CORE, relPath);
+                    DEFAULT_SOLR_CORE, relPath);
 
             // create some test documents
             SolrInputDocument doc1 = new SolrInputDocument();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiServiceFacade.java
Patch:
@@ -2919,6 +2919,7 @@ public CurrentUserEntity getCurrentUser() {
         entity.setTenantsPermissions(dtoFactory.createPermissionsDto(authorizableLookup.getTenant()));
         entity.setControllerPermissions(dtoFactory.createPermissionsDto(authorizableLookup.getController()));
         entity.setPoliciesPermissions(dtoFactory.createPermissionsDto(authorizableLookup.getPolicies()));
+        entity.setSystemPermissions(dtoFactory.createPermissionsDto(authorizableLookup.getSystem()));
         return entity;
     }
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/GenerateTableFetch.java
Patch:
@@ -230,7 +230,7 @@ public void onTrigger(final ProcessContext context, final ProcessSessionFactory
 
                 Integer limit = partitionSize == 0 ? null : partitionSize;
                 Integer offset = partitionSize == 0 ? null : i * partitionSize;
-                final String query = dbAdapter.getSelectStatement(tableName, columnNames, StringUtils.join(maxValueClauses, " AND "), null, limit, offset);
+                final String query = dbAdapter.getSelectStatement(tableName, columnNames, whereClause, StringUtils.join(maxValueColumnNameList, ", "), limit, offset);
                 sqlFlowFile = session.create();
                 sqlFlowFile = session.write(sqlFlowFile, out -> {
                     out.write(query.getBytes());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ClusteSummaryEntity.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * A serialized representation of this class can be placed in the entity body of a request or response to or from the API. This particular entity holds a reference to a ClusterSummaryDTO.
  */
-@XmlRootElement(name = "controllerStatusEntity")
+@XmlRootElement(name = "clusterSummaryEntity")
 public class ClusteSummaryEntity extends Entity {
 
     private ClusterSummaryDTO clusterSummary;

File: nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/processors/AbstractJMSProcessor.java
Patch:
@@ -202,7 +202,6 @@ private void buildTargetResource(ProcessContext context) {
             JmsTemplate jmsTemplate = new JmsTemplate();
             jmsTemplate.setConnectionFactory(this.cachingConnectionFactory);
             this.destinationName = context.getProperty(DESTINATION).evaluateAttributeExpressions().getValue();
-            jmsTemplate.setDefaultDestinationName(this.destinationName);
             jmsTemplate.setPubSubDomain(TOPIC.equals(context.getProperty(DESTINATION_TYPE).getValue()));
 
             // set of properties that may be good candidates for exposure via configuration

File: nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/processors/JMSConsumer.java
Patch:
@@ -61,8 +61,8 @@ final class JMSConsumer extends JMSWorker {
     /**
      *
      */
-    public JMSResponse consume() {
-        Message message = this.jmsTemplate.receive();
+    public JMSResponse consume(final String destinationName) {
+        Message message = this.jmsTemplate.receive(destinationName);
         if (message != null) {
             byte[] messageBody = null;
             try {

File: nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/processors/PublishJMS.java
Patch:
@@ -98,7 +98,8 @@ protected void rendezvousWithJms(ProcessContext context, ProcessSession processS
         FlowFile flowFile = processSession.get();
         if (flowFile != null) {
             try {
-                this.targetResource.publish(this.extractMessageBody(flowFile, processSession),
+                final String destinationName = context.getProperty(DESTINATION).evaluateAttributeExpressions(flowFile).getValue();
+                this.targetResource.publish(destinationName, this.extractMessageBody(flowFile, processSession),
                         flowFile.getAttributes());
                 processSession.transfer(flowFile, REL_SUCCESS);
                 processSession.getProvenanceReporter().send(flowFile, context.getProperty(DESTINATION).evaluateAttributeExpressions().getValue());

File: nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/processors/CommonTest.java
Patch:
@@ -48,13 +48,12 @@ public void validateServiceIsLocatableViaServiceLoader() {
         assertTrue(consumeJmsPresent);
     }
 
-    static JmsTemplate buildJmsTemplateForDestination(String destinationName, boolean pubSub) {
+    static JmsTemplate buildJmsTemplateForDestination(boolean pubSub) {
         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(
                 "vm://localhost?broker.persistent=false");
         CachingConnectionFactory cf = new CachingConnectionFactory(connectionFactory);
 
         JmsTemplate jmsTemplate = new JmsTemplate(cf);
-        jmsTemplate.setDefaultDestinationName(destinationName);
         jmsTemplate.setPubSubDomain(pubSub);
         return jmsTemplate;
     }

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/PostHTTP.java
Patch:
@@ -82,6 +82,7 @@
 import org.apache.http.protocol.HttpContext;
 import org.apache.http.protocol.HttpCoreContext;
 import org.apache.http.util.EntityUtils;
+import org.apache.http.util.VersionInfo;
 import org.apache.nifi.annotation.behavior.InputRequirement;
 import org.apache.nifi.annotation.behavior.InputRequirement.Requirement;
 import org.apache.nifi.annotation.behavior.SupportsBatching;
@@ -194,6 +195,7 @@ public class PostHTTP extends AbstractProcessor {
             .description("What to report as the User Agent when we connect to the remote server")
             .required(false)
             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)
+            .defaultValue(VersionInfo.getUserAgent("Apache-HttpClient", "org.apache.http.client", HttpClientBuilder.class))
             .build();
     public static final PropertyDescriptor COMPRESSION_LEVEL = new PropertyDescriptor.Builder()
             .name("Compression Level")

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-0-10-processors/src/test/java/org/apache/nifi/processors/kafka/pubsub/PublishKafkaTest.java
Patch:
@@ -358,7 +358,7 @@ public void validateHexKey() {
         TestRunner runner = TestRunners.newTestRunner(putKafka);
         runner.setProperty(PublishKafka_0_10.TOPIC, topicName);
         runner.setProperty(KafkaProcessorUtils.BOOTSTRAP_SERVERS, "localhost:1234");
-        runner.setProperty(PublishKafka_0_10.KEY_ATTRIBUTE_ENCODING, PublishKafka_0_10.HEX_ENCODING);
+        runner.setProperty(PublishKafka_0_10.KEY_ATTRIBUTE_ENCODING, KafkaProcessorUtils.HEX_ENCODING);
         runner.setProperty(PublishKafka_0_10.KEY, "${myKey}");
 
         final Map<String, String> attributes = Collections.singletonMap("myKey", "6B657931");

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/RemoteProcessGroupResource.java
Patch:
@@ -299,7 +299,7 @@ public Response updateRemoteProcessGroupInputPort(
                     final RemoteProcessGroupPortDTO remoteProcessGroupPort = remoteProcessGroupPortEntity.getRemoteProcessGroupPort();
 
                     // update the specified remote process group
-                    final RemoteProcessGroupPortEntity controllerResponse = serviceFacade.updateRemoteProcessGroupInputPort(revision, remoteProcessGroupPort.getId(), remoteProcessGroupPort);
+                    final RemoteProcessGroupPortEntity controllerResponse = serviceFacade.updateRemoteProcessGroupInputPort(revision, id, remoteProcessGroupPort);
 
                     // get the updated revision
                     final RevisionDTO updatedRevision = controllerResponse.getRevision();
@@ -401,7 +401,7 @@ public Response updateRemoteProcessGroupOutputPort(
                     final RemoteProcessGroupPortDTO remoteProcessGroupPort = remoteProcessGroupPortEntity.getRemoteProcessGroupPort();
 
                     // update the specified remote process group
-                    final RemoteProcessGroupPortEntity controllerResponse = serviceFacade.updateRemoteProcessGroupOutputPort(revision, remoteProcessGroupPort.getId(), remoteProcessGroupPort);
+                    final RemoteProcessGroupPortEntity controllerResponse = serviceFacade.updateRemoteProcessGroupOutputPort(revision, id, remoteProcessGroupPort);
 
                     // get the updated revision
                     final RevisionDTO updatedRevision = controllerResponse.getRevision();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/FlowSnippetDTO.java
Patch:
@@ -214,7 +214,7 @@ private void removeInstanceIdentifierIfNecessary(Set<? extends ComponentDTO> com
                     Map<String, PropertyDescriptorDTO> map = csDTO.getDescriptors();
                     Map<String, String> props = csDTO.getProperties();
                     for (Entry<String, PropertyDescriptorDTO> entry : map.entrySet()) {
-                        if (entry.getValue().getIdentifiesControllerService() != null) {
+                        if (entry.getValue().getIdentifiesControllerService() != null && props.get(entry.getKey()) != null) {
                             String key = entry.getKey();
                             String value = props.get(key);
                             id = UUID.fromString(value);

File: nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/client/SiteToSiteClient.java
Patch:
@@ -157,7 +157,7 @@ public static class Builder implements Serializable {
         private String truststoreFilename;
         private String truststorePass;
         private KeystoreType truststoreType;
-        private EventReporter eventReporter;
+        private EventReporter eventReporter = EventReporter.NO_OP;
         private File peerPersistenceFile;
         private boolean useCompression;
         private String portName;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/remote/StandardRemoteProcessGroup.java
Patch:
@@ -835,8 +835,7 @@ public void refreshFlowContents() throws CommunicationsException {
         try {
             // perform the request
             final ControllerDTO dto;
-            try (
-                    final SiteToSiteRestApiClient apiClient = getSiteToSiteRestApiClient()) {
+            try (final SiteToSiteRestApiClient apiClient = getSiteToSiteRestApiClient()) {
                 dto = apiClient.getController();
             } catch (IOException e) {
                 writeLock.lock();
@@ -928,7 +927,7 @@ public void refreshFlowContents() throws CommunicationsException {
     }
 
     private SiteToSiteRestApiClient getSiteToSiteRestApiClient() {
-        SiteToSiteRestApiClient apiClient = new SiteToSiteRestApiClient(sslContext, new HttpProxy(proxyHost, proxyPort, proxyUser, proxyPassword));
+        SiteToSiteRestApiClient apiClient = new SiteToSiteRestApiClient(sslContext, new HttpProxy(proxyHost, proxyPort, proxyUser, proxyPassword), getEventReporter());
         apiClient.setBaseUrl(getApiUri());
         apiClient.setConnectTimeoutMillis(getCommunicationsTimeout(TimeUnit.MILLISECONDS));
         apiClient.setReadTimeoutMillis(getCommunicationsTimeout(TimeUnit.MILLISECONDS));

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/BulletinEntity.java
Patch:
@@ -18,7 +18,9 @@
 
 import org.apache.nifi.web.api.dto.BulletinDTO;
 import org.apache.nifi.web.api.dto.ReadablePermission;
+import org.apache.nifi.web.api.dto.util.TimeAdapter;
 
+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import java.util.Date;
 
 /**
@@ -84,6 +86,7 @@ public void setSourceId(String sourceId) {
     /**
      * @return When this bulletin was generated.
      */
+    @XmlJavaTypeAdapter(TimeAdapter.class)
     public Date getTimestamp() {
         return timestamp;
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiServiceFacade.java
Patch:
@@ -3029,7 +3029,7 @@ public PropertyDescriptorDTO getReportingTaskPropertyDescriptor(final String id,
             descriptor = new PropertyDescriptor.Builder().name(property).addValidator(Validator.INVALID).dynamic(true).build();
         }
 
-        return dtoFactory.createPropertyDescriptorDto(descriptor, "root");
+        return dtoFactory.createPropertyDescriptorDto(descriptor, null);
     }
 
     @Override

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ControllerResource.java
Patch:
@@ -348,7 +348,8 @@ public Response createControllerService(
             throw new IllegalArgumentException("Controller service details must be specified.");
         }
 
-        if (requestControllerServiceEntity.getRevision() == null || (requestControllerServiceEntity.getRevision().getVersion() == null || requestControllerServiceEntity.getRevision().getVersion() != 0)) {
+        if (requestControllerServiceEntity.getRevision() == null
+                || (requestControllerServiceEntity.getRevision().getVersion() == null || requestControllerServiceEntity.getRevision().getVersion() != 0)) {
             throw new IllegalArgumentException("A revision of 0 must be specified when creating a new Controller service.");
         }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/replication/RequestReplicator.java
Patch:
@@ -110,10 +110,10 @@ public interface RequestReplicator {
      */
     AsyncClusterResponse replicate(Set<NodeIdentifier> nodeIds, String method, URI uri, Object entity, Map<String, String> headers, boolean indicateReplicated, boolean performVerification);
 
-    
+
     /**
      * Forwards a request to the Cluster Coordinator so that it is able to replicate the request to all nodes in the cluster.
-     * 
+     *
      * @param coordinatorNodeId the node identifier of the Cluster Coordinator
      * @param method the HTTP method (e.g., POST, PUT)
      * @param uri the base request URI (up to, but not including, the query string)
@@ -123,7 +123,7 @@ public interface RequestReplicator {
      * @return an AsyncClusterResponse that indicates the current status of the request and provides an identifier for obtaining an updated response later
      */
     AsyncClusterResponse forwardToCoordinator(NodeIdentifier coordinatorNodeId, String method, URI uri, Object entity, Map<String, String> headers);
-    
+
     /**
      * <p>
      * Returns an AsyncClusterResponse that provides the most up-to-date status of the request with the given identifier.

File: nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/AbstractTransaction.java
Patch:
@@ -296,7 +296,7 @@ public final TransactionCompletion complete() throws IOException {
                         transactionResponse = readTransactionResponse();
                     } catch (final IOException e) {
                         throw new IOException(this + " Failed to receive a response from " + peer + " when expecting a TransactionFinished Indicator. "
-                                + "It is unknown whether or not the peer successfully received/processed the data.", e);
+                                + "It is unknown whether or not the peer successfully received/processed the data. " + e, e);
                     }
 
                     logger.debug("{} Received {} from {}", this, transactionResponse, peer);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/node/CuratorNodeProtocolSender.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.curator.framework.CuratorFramework;
 import org.apache.curator.framework.CuratorFrameworkFactory;
 import org.apache.curator.retry.RetryNTimes;
-import org.apache.nifi.cluster.manager.exception.NoClusterCoordinatorException;
+import org.apache.nifi.cluster.exception.NoClusterCoordinatorException;
 import org.apache.nifi.cluster.protocol.AbstractNodeProtocolSender;
 import org.apache.nifi.cluster.protocol.ProtocolContext;
 import org.apache.nifi.cluster.protocol.ProtocolException;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/node/LeaderElectionNodeProtocolSender.java
Patch:
@@ -21,7 +21,7 @@
 import java.net.InetSocketAddress;
 
 import org.apache.commons.lang3.StringUtils;
-import org.apache.nifi.cluster.manager.exception.NoClusterCoordinatorException;
+import org.apache.nifi.cluster.exception.NoClusterCoordinatorException;
 import org.apache.nifi.cluster.protocol.AbstractNodeProtocolSender;
 import org.apache.nifi.cluster.protocol.ProtocolContext;
 import org.apache.nifi.cluster.protocol.ProtocolException;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/node/NodeClusterCoordinator.java
Patch:
@@ -39,10 +39,10 @@
 import org.apache.nifi.cluster.coordination.http.replication.RequestCompletionCallback;
 import org.apache.nifi.cluster.event.Event;
 import org.apache.nifi.cluster.event.NodeEvent;
+import org.apache.nifi.cluster.exception.NoClusterCoordinatorException;
 import org.apache.nifi.cluster.firewall.ClusterNodeFirewall;
 import org.apache.nifi.cluster.manager.NodeResponse;
 import org.apache.nifi.cluster.manager.exception.IllegalNodeDisconnectionException;
-import org.apache.nifi.cluster.manager.exception.NoClusterCoordinatorException;
 import org.apache.nifi.cluster.protocol.ComponentRevision;
 import org.apache.nifi.cluster.protocol.ConnectionRequest;
 import org.apache.nifi.cluster.protocol.ConnectionResponse;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/exception/BlockedByFirewallException.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.nifi.cluster.manager.exception;
 
+import org.apache.nifi.cluster.exception.ClusterException;
 import org.apache.nifi.cluster.protocol.NodeIdentifier;
 
 /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/exception/IllegalClusterStateException.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.nifi.cluster.manager.exception;
 
+import org.apache.nifi.cluster.exception.ClusterException;
+
 /**
  * Signals that an operation to be performed on a cluster has been invoked at an illegal or inappropriate time.
  *

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/exception/NoConnectedNodesException.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.nifi.cluster.manager.exception;
 
+import org.apache.nifi.cluster.exception.ClusterException;
+
 /**
  * Represents the exceptional case when the cluster is unable to service a request because no nodes are connected.
  *

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/exception/NoResponseFromNodesException.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.nifi.cluster.manager.exception;
 
+import org.apache.nifi.cluster.exception.ClusterException;
+
 /**
  * Represents the exceptional case when the cluster is unable to service a request because no nodes returned a response. When the given request is not mutable the nodes are left in their previous
  * state.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/exception/NodeDisconnectionException.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.nifi.cluster.manager.exception;
 
+import org.apache.nifi.cluster.exception.ClusterException;
+
 /**
  * Represents the exceptional case when a disconnection request to a node failed.
  *

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/exception/NodeReconnectionException.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.nifi.cluster.manager.exception;
 
+import org.apache.nifi.cluster.exception.ClusterException;
+
 /**
  * Represents the exceptional case when a reconnection request to a node failed.
  *

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/exception/UnknownNodeException.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.nifi.cluster.manager.exception;
 
+import org.apache.nifi.cluster.exception.ClusterException;
+
 /**
  * Represents the exceptional case when a request is made for a node that does not exist.
  *

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/cluster/exception/ClusterException.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.cluster.manager.exception;
+package org.apache.nifi.cluster.exception;
 
 /**
  * The base exception class for cluster related exceptions.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/cluster/exception/NoClusterCoordinatorException.java
Patch:
@@ -15,7 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.nifi.cluster.manager.exception;
+package org.apache.nifi.cluster.exception;
+
+import org.apache.nifi.cluster.exception.ClusterException;
 
 public class NoClusterCoordinatorException extends ClusterException {
     private static final long serialVersionUID = -1782098541351698293L;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-nar-utils/src/main/java/org/apache/nifi/nar/NarCloseable.java
Patch:
@@ -45,7 +45,7 @@ public static NarCloseable withFrameworkNar() {
             frameworkClassLoader = NarClassLoaders.getInstance().getFrameworkClassLoader();
         } catch (final Exception e) {
             // This should never happen in a running instance, but it will occur in unit tests
-            logger.error("Unable to access Framework ClassLoader due to " + e + ". Will continue without change ClassLoaders.");
+            logger.error("Unable to access Framework ClassLoader due to " + e + ". Will continue without changing ClassLoaders.");
             if (logger.isDebugEnabled()) {
                 logger.error("", e);
             }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiContentAccess.java
Patch:
@@ -23,9 +23,9 @@
 import org.apache.nifi.authorization.AccessDeniedException;
 import org.apache.nifi.cluster.coordination.ClusterCoordinator;
 import org.apache.nifi.cluster.coordination.http.replication.RequestReplicator;
+import org.apache.nifi.cluster.exception.NoClusterCoordinatorException;
 import org.apache.nifi.cluster.manager.NodeResponse;
 import org.apache.nifi.cluster.manager.exception.IllegalClusterStateException;
-import org.apache.nifi.cluster.manager.exception.NoClusterCoordinatorException;
 import org.apache.nifi.cluster.protocol.NodeIdentifier;
 import org.apache.nifi.controller.repository.claim.ContentDirection;
 import org.apache.nifi.util.NiFiProperties;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiWebConfigurationContext.java
Patch:
@@ -40,9 +40,9 @@
 import org.apache.nifi.authorization.user.NiFiUserUtils;
 import org.apache.nifi.cluster.coordination.ClusterCoordinator;
 import org.apache.nifi.cluster.coordination.http.replication.RequestReplicator;
+import org.apache.nifi.cluster.exception.NoClusterCoordinatorException;
 import org.apache.nifi.cluster.manager.NodeResponse;
 import org.apache.nifi.cluster.manager.exception.IllegalClusterStateException;
-import org.apache.nifi.cluster.manager.exception.NoClusterCoordinatorException;
 import org.apache.nifi.cluster.protocol.NodeIdentifier;
 import org.apache.nifi.controller.ControllerService;
 import org.apache.nifi.controller.reporting.ReportingTaskProvider;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ApplicationResource.java
Patch:
@@ -30,8 +30,8 @@
 import org.apache.nifi.authorization.user.NiFiUserUtils;
 import org.apache.nifi.cluster.coordination.ClusterCoordinator;
 import org.apache.nifi.cluster.coordination.http.replication.RequestReplicator;
+import org.apache.nifi.cluster.exception.NoClusterCoordinatorException;
 import org.apache.nifi.cluster.manager.NodeResponse;
-import org.apache.nifi.cluster.manager.exception.NoClusterCoordinatorException;
 import org.apache.nifi.cluster.manager.exception.UnknownNodeException;
 import org.apache.nifi.cluster.protocol.NodeIdentifier;
 import org.apache.nifi.controller.Snippet;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/config/ClusterExceptionMapper.java
Patch:
@@ -19,7 +19,8 @@
 import javax.ws.rs.core.Response;
 import javax.ws.rs.ext.ExceptionMapper;
 import javax.ws.rs.ext.Provider;
-import org.apache.nifi.cluster.manager.exception.ClusterException;
+
+import org.apache.nifi.cluster.exception.ClusterException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/config/NoClusterCoordinatorExceptionMapper.java
Patch:
@@ -20,7 +20,7 @@
 import javax.ws.rs.core.Response;
 import javax.ws.rs.ext.ExceptionMapper;
 
-import org.apache.nifi.cluster.manager.exception.NoClusterCoordinatorException;
+import org.apache.nifi.cluster.exception.NoClusterCoordinatorException;
 import org.apache.nifi.cluster.manager.exception.NoConnectedNodesException;
 import org.apache.nifi.util.StringUtils;
 import org.slf4j.Logger;

File: nifi-nar-bundles/nifi-datadog-bundle/nifi-datadog-reporting-task/src/main/java/org/apache/nifi/reporting/datadog/metrics/MetricsService.java
Patch:
@@ -108,7 +108,7 @@ public Map<String, Double> getDataFlowMetrics(ProcessGroupStatus status) {
         return metrics;
     }
 
-    public List<String> getAllTagsList () {
+    public List<String> getAllTagsList() {
         List<String> tagsList = new ArrayList<>();
         tagsList.add("env");
         tagsList.add("dataflow_id");

File: nifi-nar-bundles/nifi-datadog-bundle/nifi-datadog-reporting-task/src/test/java/org/apache/nifi/reporting/datadog/TestDataDogReportingTask.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.nifi.controller.ConfigurationContext;
 import org.apache.nifi.controller.status.ProcessGroupStatus;
 import org.apache.nifi.controller.status.ProcessorStatus;
-import org.apache.nifi.logging.ComponentLog;
 import org.apache.nifi.reporting.EventAccess;
 import org.apache.nifi.reporting.InitializationException;
 import org.apache.nifi.reporting.ReportingContext;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java
Patch:
@@ -2042,6 +2042,7 @@ public Response importTemplate(
         }
         if (validationPhase) {
             serviceFacade.verifyCanAddTemplate(groupId, templateEntity.getTemplate().getName());
+            serviceFacade.verifyComponentTypes(templateEntity.getTemplate().getSnippet());
             return generateContinueResponse().build();
         }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java
Patch:
@@ -2446,6 +2446,8 @@ public int compare(final PropertyDescriptor o1, final PropertyDescriptor o2) {
             String propertyValue = entry.getValue();
             if (propertyValue != null && descriptor.isSensitive()) {
                 propertyValue = SENSITIVE_VALUE_MASK;
+            } else if (propertyValue == null && descriptor.getDefaultValue() != null) {
+                propertyValue = descriptor.getDefaultValue();
             }
 
             // set the property value

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/controller/ControllerFacade.java
Patch:
@@ -211,7 +211,7 @@ public ProcessorNode createTemporaryProcessor(String type) throws ProcessorInsta
      * @throws ReportingTaskInstantiationException when unable to instantiate the reporting task
      */
     public ReportingTaskNode createTemporaryReportingTask(String type) throws ReportingTaskInstantiationException {
-        return flowController.createReportingTask(type, UUID.randomUUID().toString(), false);
+        return flowController.createReportingTask(type, UUID.randomUUID().toString(), false, false);
     }
 
     /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/integration/accesscontrol/ITConnectionAccessControl.java
Patch:
@@ -52,13 +52,11 @@
  */
 public class ITConnectionAccessControl {
 
-    private static final String FLOW_XML_PATH = "target/test-classes/access-control/flow-connections.xml";
-
     private static AccessControlHelper helper;
 
     @BeforeClass
     public static void setup() throws Exception {
-        helper = new AccessControlHelper(FLOW_XML_PATH);
+        helper = new AccessControlHelper();
     }
 
     /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/integration/accesscontrol/ITCountersAccessControl.java
Patch:
@@ -30,14 +30,12 @@
  */
 public class ITCountersAccessControl {
 
-    private static final String FLOW_XML_PATH = "target/test-classes/access-control/flow-counters.xml";
-
     private static AccessControlHelper helper;
     private static String uri;
 
     @BeforeClass
     public static void setup() throws Exception {
-        helper = new AccessControlHelper(FLOW_XML_PATH);
+        helper = new AccessControlHelper();
         uri = helper.getBaseUrl() + "/counters";
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/integration/accesscontrol/ITFunnelAccessControl.java
Patch:
@@ -48,13 +48,11 @@
  */
 public class ITFunnelAccessControl {
 
-    private static final String FLOW_XML_PATH = "target/test-classes/access-control/flow-funnels.xml";
-
     private static AccessControlHelper helper;
 
     @BeforeClass
     public static void setup() throws Exception {
-        helper = new AccessControlHelper(FLOW_XML_PATH);
+        helper = new AccessControlHelper();
     }
 
     /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/integration/accesscontrol/ITInputPortAccessControl.java
Patch:
@@ -48,14 +48,12 @@
  */
 public class ITInputPortAccessControl {
 
-    private static final String FLOW_XML_PATH = "target/test-classes/access-control/flow-input-ports.xml";
-
     private static AccessControlHelper helper;
     private static int count = 0;
 
     @BeforeClass
     public static void setup() throws Exception {
-        helper = new AccessControlHelper(FLOW_XML_PATH);
+        helper = new AccessControlHelper();
     }
 
     /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/integration/accesscontrol/ITLabelAccessControl.java
Patch:
@@ -48,13 +48,11 @@
  */
 public class ITLabelAccessControl {
 
-    private static final String FLOW_XML_PATH = "target/test-classes/access-control/flow-labels.xml";
-
     private static AccessControlHelper helper;
 
     @BeforeClass
     public static void setup() throws Exception {
-        helper = new AccessControlHelper(FLOW_XML_PATH);
+        helper = new AccessControlHelper();
     }
 
     /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/integration/accesscontrol/ITOutputPortAccessControl.java
Patch:
@@ -48,14 +48,12 @@
  */
 public class ITOutputPortAccessControl {
 
-    private static final String FLOW_XML_PATH = "target/test-classes/access-control/flow-output-ports.xml";
-
     private static AccessControlHelper helper;
     private static int count = 0;
 
     @BeforeClass
     public static void setup() throws Exception {
-        helper = new AccessControlHelper(FLOW_XML_PATH);
+        helper = new AccessControlHelper();
     }
 
     /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/integration/accesscontrol/ITProcessGroupAccessControl.java
Patch:
@@ -48,14 +48,12 @@
  */
 public class ITProcessGroupAccessControl {
 
-    private static final String FLOW_XML_PATH = "target/test-classes/access-control/flow-processors.xml";
-
     private static AccessControlHelper helper;
     private static int count = 0;
 
     @BeforeClass
     public static void setup() throws Exception {
-        helper = new AccessControlHelper(FLOW_XML_PATH);
+        helper = new AccessControlHelper();
     }
 
     /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/integration/accesscontrol/ITProcessorAccessControl.java
Patch:
@@ -49,13 +49,11 @@
  */
 public class ITProcessorAccessControl {
 
-    private static final String FLOW_XML_PATH = "target/test-classes/access-control/flow-processors.xml";
-
     private static AccessControlHelper helper;
 
     @BeforeClass
     public static void setup() throws Exception {
-        helper = new AccessControlHelper(FLOW_XML_PATH);
+        helper = new AccessControlHelper();
     }
 
     /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/reporting/StandardReportingInitializationContext.java
Patch:
@@ -127,7 +127,7 @@ public String getKerberosServicePrincipal() {
 
     @Override
     public File getKerberosServiceKeytab() {
-        return new File(nifiProperties.getKerberosServiceKeytabLocation());
+        return nifiProperties.getKerberosServiceKeytabLocation() == null ? null : new File(nifiProperties.getKerberosServiceKeytabLocation());
     }
 
     @Override

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/service/StandardControllerServiceInitializationContext.java
Patch:
@@ -102,7 +102,7 @@ public String getKerberosServicePrincipal() {
 
     @Override
     public File getKerberosServiceKeytab() {
-        return new File(nifiProperties.getKerberosServiceKeytabLocation());
+        return nifiProperties.getKerberosServiceKeytabLocation() == null ? null : new File(nifiProperties.getKerberosServiceKeytabLocation());
     }
 
     @Override

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/processor/StandardProcessorInitializationContext.java
Patch:
@@ -69,7 +69,7 @@ public String getKerberosServicePrincipal() {
 
     @Override
     public File getKerberosServiceKeytab() {
-        return new File(nifiProperties.getKerberosServiceKeytabLocation());
+        return nifiProperties.getKerberosServiceKeytabLocation() == null ? null : new File(nifiProperties.getKerberosServiceKeytabLocation());
     }
 
     @Override

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/test/java/org/apache/nifi/processors/hadoop/GetHDFSSequenceFileTest.java
Patch:
@@ -30,6 +30,7 @@
 import org.junit.Test;
 import org.mockito.ArgumentCaptor;
 
+import java.io.File;
 import java.io.IOException;
 import java.security.PrivilegedExceptionAction;
 
@@ -113,7 +114,7 @@ public void onScheduled(ProcessContext context) throws IOException {
         }
 
         @Override
-        protected KerberosProperties getKerberosProperties() {
+        protected KerberosProperties getKerberosProperties(File kerberosConfigFile) {
             return kerberosProperties;
         }
 

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/test/java/org/apache/nifi/processors/hadoop/GetHDFSTest.java
Patch:
@@ -30,6 +30,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
+import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.Collection;
@@ -246,7 +247,7 @@ public TestableGetHDFS(KerberosProperties testKerberosProperties) {
         }
 
         @Override
-        protected KerberosProperties getKerberosProperties() {
+        protected KerberosProperties getKerberosProperties(File kerberosConfigFile) {
             return testKerberosProperties;
         }
     }

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/test/java/org/apache/nifi/processors/hadoop/PutHDFSTest.java
Patch:
@@ -273,7 +273,7 @@ protected void changeOwner(ProcessContext context, FileSystem hdfs, Path name) {
             }
 
             @Override
-            protected KerberosProperties getKerberosProperties() {
+            protected KerberosProperties getKerberosProperties(File kerberosConfigFile) {
                 return testKerberosProperties;
             }
         });
@@ -375,7 +375,7 @@ public TestablePutHDFS(KerberosProperties testKerberosProperties) {
         }
 
         @Override
-        protected KerberosProperties getKerberosProperties() {
+        protected KerberosProperties getKerberosProperties(File kerberosConfigFile) {
             return testKerberosProperties;
         }
     }

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/test/java/org/apache/nifi/processors/hadoop/SimpleHadoopProcessor.java
Patch:
@@ -21,6 +21,8 @@
 import org.apache.nifi.processor.ProcessSession;
 import org.apache.nifi.processor.exception.ProcessException;
 
+import java.io.File;
+
 public class SimpleHadoopProcessor extends AbstractHadoopProcessor {
 
     private KerberosProperties testKerberosProperties;
@@ -34,7 +36,7 @@ public void onTrigger(ProcessContext context, ProcessSession session) throws Pro
     }
 
     @Override
-    protected KerberosProperties getKerberosProperties() {
+    protected KerberosProperties getKerberosProperties(File kerberosConfigFile) {
         return testKerberosProperties;
     }
 

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/test/java/org/apache/nifi/processors/hadoop/TestCreateHadoopSequenceFile.java
Patch:
@@ -213,7 +213,7 @@ public TestableCreateHadoopSequenceFile(KerberosProperties testKerbersProperties
         }
 
         @Override
-        protected KerberosProperties getKerberosProperties() {
+        protected KerberosProperties getKerberosProperties(File kerberosConfigFile) {
             return testKerbersProperties;
         }
     }

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/test/java/org/apache/nifi/processors/hadoop/TestFetchHDFS.java
Patch:
@@ -23,6 +23,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
+import java.io.File;
 import java.io.IOException;
 import java.util.HashMap;
 import java.util.Map;
@@ -111,7 +112,7 @@ public TestableFetchHDFS(KerberosProperties testKerberosProps) {
         }
 
         @Override
-        protected KerberosProperties getKerberosProperties() {
+        protected KerberosProperties getKerberosProperties(File kerberosConfigFile) {
             return testKerberosProps;
         }
 

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/test/java/org/apache/nifi/processors/hadoop/TestListHDFS.java
Patch:
@@ -308,7 +308,7 @@ public ListHDFSWithMockedFileSystem(KerberosProperties kerberosProperties) {
         }
 
         @Override
-        protected KerberosProperties getKerberosProperties() {
+        protected KerberosProperties getKerberosProperties(File kerberosConfigFile) {
             return testKerberosProps;
         }
 

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/test/java/org/apache/nifi/processors/hadoop/inotify/TestGetHDFSEvents.java
Patch:
@@ -34,6 +34,7 @@
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
 
+import java.io.File;
 import java.util.Arrays;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
@@ -252,7 +253,7 @@ protected FileSystem getFileSystem() {
         }
 
         @Override
-        protected KerberosProperties getKerberosProperties() {
+        protected KerberosProperties getKerberosProperties(File kerberosConfigFile) {
             return testKerberosProperties;
         }
 

File: nifi-nar-bundles/nifi-standard-services/nifi-hbase_1_1_2-client-service-bundle/nifi-hbase_1_1_2-client-service/src/test/java/org/apache/nifi/hbase/TestHBase_1_1_2_ClientService.java
Patch:
@@ -451,7 +451,7 @@ public MockHBaseClientService(final Table table, final KerberosProperties kerber
         }
 
         @Override
-        protected KerberosProperties getKerberosProperties() {
+        protected KerberosProperties getKerberosProperties(File kerberosConfigFile) {
             return kerberosProperties;
         }
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ListFile.java
Patch:
@@ -69,7 +69,7 @@
 @InputRequirement(Requirement.INPUT_FORBIDDEN)
 @Tags({"file", "get", "list", "ingest", "source", "filesystem"})
 @CapabilityDescription("Retrieves a listing of files from the local filesystem. For each file that is listed, " +
-        "creates a FlowFile that represents the file so that it can be fetched in conjunction with ListFile. This " +
+        "creates a FlowFile that represents the file so that it can be fetched in conjunction with FetchFile. This " +
         "Processor is designed to run on Primary Node only in a cluster. If the primary node changes, the new " +
         "Primary Node will pick up where the previous node left off without duplicating all of the data. Unlike " +
         "GetFile, this Processor does not delete any data from the local filesystem.")

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/PutSQL.java
Patch:
@@ -779,7 +779,7 @@ private void setParameter(final PreparedStatement stmt, final String attrName, f
                     if(LONG_PATTERN.matcher(parameterValue).matches()){
                         lTimestamp = Long.parseLong(parameterValue);
                     }else {
-                        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss.SSS");
+                        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
                         java.util.Date parsedDate = dateFormat.parse(parameterValue);
                         lTimestamp = parsedDate.getTime();
                     }

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestPutSQL.java
Patch:
@@ -276,9 +276,9 @@ public void testUsingTimestampValuesEpochAndString() throws InitializationExcept
         runner.enableControllerService(service);
         runner.setProperty(PutSQL.CONNECTION_POOL, "dbcp");
 
-        final String arg2TS = "2001-01-01 23:01:01.001";
-        final String art3TS = "2002-02-02 22:02:02.002";
-        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss.SSS");
+        final String arg2TS = "2001-01-01 00:01:01.001";
+        final String art3TS = "2002-02-02 12:02:02.002";
+        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
         java.util.Date parsedDate = dateFormat.parse(arg2TS);
 
         final Map<String, String> attributes = new HashMap<>();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ControllerResource.java
Patch:
@@ -509,7 +509,6 @@ public Response getNode(
     @Consumes(MediaType.APPLICATION_JSON)
     @Produces(MediaType.APPLICATION_JSON)
     @Path("cluster/nodes/{id}")
-    // TODO - @PreAuthorize("hasAnyRole('ROLE_ADMIN')")
     @ApiOperation(
             value = "Updates a node in the cluster",
             response = NodeEntity.class,

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/CountersResource.java
Patch:
@@ -208,7 +208,6 @@ public Response getCounters(
     @Consumes(MediaType.WILDCARD)
     @Produces(MediaType.APPLICATION_JSON)
     @Path("{id}")
-    // TODO - @PreAuthorize("hasRole('ROLE_DFM')")
     @ApiOperation(
             value = "Updates the specified counter. This will reset the counter value to 0",
             notes = NON_GUARANTEED_ENDPOINT,

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/FlowResource.java
Patch:
@@ -235,7 +235,6 @@ private void authorizeFlow() {
     @Consumes(MediaType.WILDCARD)
     @Produces(MediaType.TEXT_PLAIN)
     @Path("client-id")
-    // TODO - @PreAuthorize("hasAnyRole('ROLE_MONITOR', 'ROLE_DFM', 'ROLE_ADMIN')")
     @ApiOperation(
             value = "Generates a client id.",
             response = String.class,

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/FlowController.java
Patch:
@@ -915,6 +915,7 @@ public EventReporter getEventReporter() {
                 .source(requireNonNull(source))
                 .destination(destination)
                 .swapManager(swapManager)
+                .queueSwapThreshold(nifiProperties.getQueueSwapThreshold())
                 .eventReporter(eventReporter)
                 .resourceClaimManager(resourceClaimManager)
                 .flowFileRepository(flowFileRepository)

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-reporting-tasks/src/main/java/org/apache/nifi/controller/MonitorDiskUsage.java
Patch:
@@ -73,6 +73,7 @@ protected List<PropertyDescriptor> getSupportedPropertyDescriptors() {
         final List<PropertyDescriptor> descriptors = new ArrayList<>(2);
         descriptors.add(DIR_THRESHOLD);
         descriptors.add(DIR_LOCATION);
+        descriptors.add(DIR_DISPLAY_NAME);
         return descriptors;
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/impl/NodeProtocolSenderListener.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.nifi.cluster.protocol.message.ConnectionRequestMessage;
 import org.apache.nifi.cluster.protocol.message.ConnectionResponseMessage;
 import org.apache.nifi.cluster.protocol.message.HeartbeatMessage;
+import org.apache.nifi.cluster.protocol.message.HeartbeatResponseMessage;
 import org.apache.nifi.reporting.BulletinRepository;
 
 public class NodeProtocolSenderListener implements NodeProtocolSender, ProtocolListener {
@@ -92,7 +93,7 @@ public void setBulletinRepository(final BulletinRepository bulletinRepository) {
     }
 
     @Override
-    public void heartbeat(HeartbeatMessage msg, String address) throws ProtocolException {
-        sender.heartbeat(msg, address);
+    public HeartbeatResponseMessage heartbeat(final HeartbeatMessage msg, final String address) throws ProtocolException {
+        return sender.heartbeat(msg, address);
     }
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/jaxb/message/NodeConnectionStatusAdapter.java
Patch:
@@ -30,8 +30,7 @@ public NodeConnectionStatus unmarshal(final AdaptedNodeConnectionStatus adapted)
             adapted.getState(),
             adapted.getDisconnectCode(),
             adapted.getDisconnectReason(),
-            adapted.getConnectionRequestTime(),
-            adapted.getRoles());
+            adapted.getConnectionRequestTime());
     }
 
     @Override
@@ -44,7 +43,6 @@ public AdaptedNodeConnectionStatus marshal(final NodeConnectionStatus toAdapt) t
             adapted.setDisconnectCode(toAdapt.getDisconnectCode());
             adapted.setDisconnectReason(toAdapt.getDisconnectReason());
             adapted.setState(toAdapt.getState());
-            adapted.setRoles(toAdapt.getRoles());
         }
         return adapted;
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/message/ProtocolMessage.java
Patch:
@@ -32,6 +32,7 @@ public static enum MessageType {
         RECONNECTION_RESPONSE,
         SERVICE_BROADCAST,
         HEARTBEAT,
+        HEARTBEAT_RESPONSE,
         NODE_CONNECTION_STATUS_REQUEST,
         NODE_CONNECTION_STATUS_RESPONSE,
         NODE_STATUS_CHANGE;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/AbstractHeartbeatMonitor.java
Patch:
@@ -256,8 +256,6 @@ private void processHeartbeat(final NodeHeartbeat heartbeat) {
             clusterCoordinator.finishNodeConnection(nodeId);
             clusterCoordinator.reportEvent(nodeId, Severity.INFO, "Received first heartbeat from connecting node. Node connected.");
         }
-
-        clusterCoordinator.updateNodeRoles(nodeId, heartbeat.getRoles());
     }
 
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/spring/NodeClusterCoordinatorFactoryBean.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.nifi.cluster.coordination.node.NodeClusterCoordinator;
 import org.apache.nifi.cluster.firewall.ClusterNodeFirewall;
 import org.apache.nifi.cluster.protocol.impl.ClusterCoordinationProtocolSenderListener;
+import org.apache.nifi.controller.leader.election.LeaderElectionManager;
 import org.apache.nifi.events.EventReporter;
 import org.apache.nifi.util.NiFiProperties;
 import org.apache.nifi.web.revision.RevisionManager;
@@ -42,8 +43,9 @@ public NodeClusterCoordinator getObject() throws Exception {
             final EventReporter eventReporter = applicationContext.getBean("eventReporter", EventReporter.class);
             final ClusterNodeFirewall clusterFirewall = applicationContext.getBean("clusterFirewall", ClusterNodeFirewall.class);
             final RevisionManager revisionManager = applicationContext.getBean("revisionManager", RevisionManager.class);
+            final LeaderElectionManager electionManager = applicationContext.getBean("leaderElectionManager", LeaderElectionManager.class);
 
-            nodeClusterCoordinator = new NodeClusterCoordinator(protocolSenderListener, eventReporter, clusterFirewall, revisionManager, properties);
+            nodeClusterCoordinator = new NodeClusterCoordinator(protocolSenderListener, eventReporter, electionManager, clusterFirewall, revisionManager);
         }
 
         return nodeClusterCoordinator;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/coordination/http/replication/TestThreadPoolRequestReplicator.java
Patch:
@@ -28,7 +28,6 @@
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
@@ -164,7 +163,7 @@ public void testMultipleRequestWithTwoPhaseCommit() {
         nodeIds.add(nodeId);
 
         final ClusterCoordinator coordinator = Mockito.mock(ClusterCoordinator.class);
-        Mockito.when(coordinator.getConnectionStatus(Mockito.any(NodeIdentifier.class))).thenReturn(new NodeConnectionStatus(nodeId, NodeConnectionState.CONNECTED, Collections.emptySet()));
+        Mockito.when(coordinator.getConnectionStatus(Mockito.any(NodeIdentifier.class))).thenReturn(new NodeConnectionStatus(nodeId, NodeConnectionState.CONNECTED));
 
         final AtomicInteger requestCount = new AtomicInteger(0);
         final ThreadPoolRequestReplicator replicator = new ThreadPoolRequestReplicator(2, new Client(), coordinator, "1 sec", "1 sec", null, null) {
@@ -210,7 +209,7 @@ private ClusterCoordinator createClusterCoordinator() {
         Mockito.when(coordinator.getConnectionStatus(Mockito.any(NodeIdentifier.class))).thenAnswer(new Answer<NodeConnectionStatus>() {
             @Override
             public NodeConnectionStatus answer(InvocationOnMock invocation) throws Throwable {
-                return new NodeConnectionStatus(invocation.getArgumentAt(0, NodeIdentifier.class), NodeConnectionState.CONNECTED, Collections.emptySet());
+                return new NodeConnectionStatus(invocation.getArgumentAt(0, NodeIdentifier.class), NodeConnectionState.CONNECTED);
             }
         });
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/fingerprint/FingerprintFactory.java
Patch:
@@ -908,6 +908,7 @@ private void addControllerServiceFingerprint(final StringBuilder builder, final
         builder.append(dto.getName());
         builder.append(dto.getComments());
         builder.append(dto.getAnnotationData());
+        builder.append(dto.getState());
 
         final Map<String, String> properties = dto.getProperties();
         if (properties == null) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/cluster/HeartbeatPayloadTest.java
Patch:
@@ -21,6 +21,7 @@
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 
+import org.apache.nifi.cluster.protocol.HeartbeatPayload;
 import org.apache.nifi.util.NiFiProperties;
 import org.junit.Before;
 import org.junit.BeforeClass;

File: nifi-nar-bundles/nifi-hive-bundle/nifi-hive-processors/src/main/java/org/apache/nifi/processors/hive/ConvertAvroToORC.java
Patch:
@@ -103,7 +103,7 @@ public class ConvertAvroToORC extends AbstractProcessor {
             .description("The size of the memory buffer (in bytes) for writing stripes to an ORC file")
             .required(true)
             .addValidator(StandardValidators.DATA_SIZE_VALIDATOR)
-            .defaultValue("100 KB")
+            .defaultValue("64 MB")
             .build();
 
     public static final PropertyDescriptor BUFFER_SIZE = new PropertyDescriptor.Builder()

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/FlowController.java
Patch:
@@ -125,7 +125,6 @@
 import org.apache.nifi.controller.repository.claim.ResourceClaim;
 import org.apache.nifi.controller.repository.claim.ResourceClaimManager;
 import org.apache.nifi.controller.repository.claim.StandardContentClaim;
-import org.apache.nifi.controller.repository.claim.StandardResourceClaim;
 import org.apache.nifi.controller.repository.claim.StandardResourceClaimManager;
 import org.apache.nifi.controller.repository.io.LimitedInputStream;
 import org.apache.nifi.controller.scheduling.EventDrivenSchedulingAgent;
@@ -3532,7 +3531,7 @@ private ContentClaim createClaim(final String container, final String section, f
                     return null;
                 }
 
-                final StandardResourceClaim resourceClaim = new StandardResourceClaim(container, section, identifier, false);
+                final ResourceClaim resourceClaim = resourceClaimManager.newResourceClaim(container, section, identifier, false);
                 return new StandardContentClaim(resourceClaim, offset == null ? 0L : offset.longValue());
             }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/repository/TestWriteAheadFlowFileRepository.java
Patch:
@@ -44,7 +44,6 @@
 import org.apache.nifi.controller.repository.claim.ResourceClaim;
 import org.apache.nifi.controller.repository.claim.ResourceClaimManager;
 import org.apache.nifi.controller.repository.claim.StandardContentClaim;
-import org.apache.nifi.controller.repository.claim.StandardResourceClaim;
 import org.apache.nifi.controller.repository.claim.StandardResourceClaimManager;
 import org.apache.nifi.controller.swap.StandardSwapContents;
 import org.apache.nifi.controller.swap.StandardSwapSummary;
@@ -87,10 +86,10 @@ public void testResourceClaimsIncremented() throws IOException {
         when(connection.getFlowFileQueue()).thenReturn(queue);
         queueProvider.addConnection(connection);
 
-        final ResourceClaim resourceClaim1 = new StandardResourceClaim("container", "section", "1", false);
+        final ResourceClaim resourceClaim1 = claimManager.newResourceClaim("container", "section", "1", false);
         final ContentClaim claim1 = new StandardContentClaim(resourceClaim1, 0L);
 
-        final ResourceClaim resourceClaim2 = new StandardResourceClaim("container", "section", "2", false);
+        final ResourceClaim resourceClaim2 = claimManager.newResourceClaim("container", "section", "2", false);
         final ContentClaim claim2 = new StandardContentClaim(resourceClaim2, 0L);
 
         // Create a flowfile repo, update it once with a FlowFile that points to one resource claim. Then,

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/FlowSnippetDTO.java
Patch:
@@ -227,7 +227,7 @@ private void removeInstanceIdentifierIfNecessary(Set<? extends ComponentDTO> com
                     Map<String, PropertyDescriptorDTO> map = processorDTO.getConfig().getDescriptors();
                     Map<String, String> props = processorDTO.getConfig().getProperties();
                     for (Entry<String, PropertyDescriptorDTO> entry : map.entrySet()) {
-                        if (entry.getValue().getIdentifiesControllerService() != null) {
+                        if (entry.getValue().getIdentifiesControllerService() != null && props.get(entry.getKey()) != null) {
                             String key = entry.getKey();
                             String value = props.get(key);
                             id = UUID.fromString(value);

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/test/java/org/apache/nifi/processors/hadoop/AbstractHadoopTest.java
Patch:
@@ -112,7 +112,7 @@ public void testTimeoutDetection() throws Exception {
         SimpleHadoopProcessor processor = new SimpleHadoopProcessor(kerberosProperties);
         TestRunner runner = TestRunners.newTestRunner(processor);
         try {
-            processor.resetHDFSResources("src/test/resources/core-site-broken.xml", "/target", runner.getProcessContext());
+            processor.resetHDFSResources("src/test/resources/core-site-broken.xml", runner.getProcessContext());
             Assert.fail("Should have thrown SocketTimeoutException");
         } catch (IOException e) {
         }

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/test/java/org/apache/nifi/processors/hadoop/GetHDFSSequenceFileTest.java
Patch:
@@ -103,7 +103,7 @@ public void testGetFlowFilesNoUgiShouldntCallDoAs() throws Exception {
 
     public class TestableGetHDFSSequenceFile extends GetHDFSSequenceFile {
         @Override
-        HdfsResources resetHDFSResources(String configResources, String dir, ProcessContext context) throws IOException {
+        HdfsResources resetHDFSResources(String configResources, ProcessContext context) throws IOException {
             return hdfsResources;
         }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/node/NodeClusterCoordinator.java
Patch:
@@ -83,7 +83,7 @@ public class NodeClusterCoordinator implements ClusterCoordinator, ProtocolHandl
     private static final Logger logger = LoggerFactory.getLogger(NodeClusterCoordinator.class);
     private static final String EVENT_CATEGORY = "Clustering";
 
-    private static final Pattern COUNTER_URI_PATTERN = Pattern.compile("/nifi-api/controller/counters/[a-f0-9\\-]{36}");
+    private static final Pattern COUNTER_URI_PATTERN = Pattern.compile("/nifi-api/counters/[a-f0-9\\-]{36}");
 
     private final String instanceId = UUID.randomUUID().toString();
     private volatile NodeIdentifier nodeId;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/ConnectionStatusSnapshotDTO.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.nifi.web.api.dto.status;
 
 import com.wordnik.swagger.annotations.ApiModelProperty;
+
 import javax.xml.bind.annotation.XmlType;
 
 /**
@@ -250,7 +251,6 @@ public void setBytesQueued(Long bytesQueued) {
         this.bytesQueued = bytesQueued;
     }
 
-
     @Override
     public ConnectionStatusSnapshotDTO clone() {
         final ConnectionStatusSnapshotDTO other = new ConnectionStatusSnapshotDTO();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/PortStatusSnapshotDTO.java
Patch:
@@ -16,10 +16,10 @@
  */
 package org.apache.nifi.web.api.dto.status;
 
-import javax.xml.bind.annotation.XmlType;
-
 import com.wordnik.swagger.annotations.ApiModelProperty;
 
+import javax.xml.bind.annotation.XmlType;
+
 /**
  * The status for a port in this NiFi.
  */

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/ProcessorStatusSnapshotDTO.java
Patch:
@@ -16,10 +16,10 @@
  */
 package org.apache.nifi.web.api.dto.status;
 
-import javax.xml.bind.annotation.XmlType;
-
 import com.wordnik.swagger.annotations.ApiModelProperty;
 
+import javax.xml.bind.annotation.XmlType;
+
 /**
  * DTO for serializing the status of a processor.
  */

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/status/RemoteProcessGroupStatusSnapshotDTO.java
Patch:
@@ -31,7 +31,7 @@ public class RemoteProcessGroupStatusSnapshotDTO implements Cloneable {
     private String name;
     private String targetUri;
     private String transmissionStatus;
-    private Integer activeThreadCount;
+    private Integer activeThreadCount = 0;
 
     private Integer flowFilesSent = 0;
     private Long bytesSent = 0L;
@@ -174,7 +174,6 @@ public void setBytesReceived(Long bytesReceived) {
         this.bytesReceived = bytesReceived;
     }
 
-
     @Override
     public RemoteProcessGroupStatusSnapshotDTO clone() {
         final RemoteProcessGroupStatusSnapshotDTO other = new RemoteProcessGroupStatusSnapshotDTO();
@@ -193,5 +192,4 @@ public RemoteProcessGroupStatusSnapshotDTO clone() {
 
         return other;
     }
-
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ConnectionEntity.java
Patch:
@@ -28,7 +28,7 @@
  * A serialized representation of this class can be placed in the entity body of a response to the API. This particular entity holds a reference to a ConnectionDTO.
  */
 @XmlRootElement(name = "connectionEntity")
-public class ConnectionEntity extends ComponentEntity {
+public class ConnectionEntity extends ComponentEntity implements Permissible<ConnectionDTO> {
 
     private ConnectionDTO component;
     private ConnectionStatusDTO status;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ControllerConfigurationEntity.java
Patch:
@@ -30,7 +30,7 @@
  * A serialized representation of this class can be placed in the entity body of a request or response to or from the API. This particular entity holds a reference to a ControllerConfigurationDTO.
  */
 @XmlRootElement(name = "controllerConfigurationEntity")
-public class ControllerConfigurationEntity extends Entity {
+public class ControllerConfigurationEntity extends Entity implements Permissible<ControllerConfigurationDTO> {
 
     private Date currentTime;
     private ControllerConfigurationDTO controllerConfiguration;
@@ -63,11 +63,11 @@ public void setRevision(RevisionDTO revision) {
     @ApiModelProperty(
         value = "The controller configuration."
     )
-    public ControllerConfigurationDTO getControllerConfiguration() {
+    public ControllerConfigurationDTO getComponent() {
         return controllerConfiguration;
     }
 
-    public void setControllerConfiguration(ControllerConfigurationDTO controllerConfiguration) {
+    public void setComponent(ControllerConfigurationDTO controllerConfiguration) {
         this.controllerConfiguration = controllerConfiguration;
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ControllerServiceEntity.java
Patch:
@@ -23,7 +23,7 @@
  * A serialized representation of this class can be placed in the entity body of a response to the API. This particular entity holds a reference to a controller service.
  */
 @XmlRootElement(name = "controllerServiceEntity")
-public class ControllerServiceEntity extends ComponentEntity {
+public class ControllerServiceEntity extends ComponentEntity implements Permissible<ControllerServiceDTO> {
 
     private ControllerServiceDTO component;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/FunnelEntity.java
Patch:
@@ -23,7 +23,7 @@
  * A serialized representation of this class can be placed in the entity body of a request or response to or from the API. This particular entity holds a reference to a FunnelDTO.
  */
 @XmlRootElement(name = "funnelEntity")
-public class FunnelEntity extends ComponentEntity {
+public class FunnelEntity extends ComponentEntity implements Permissible<FunnelDTO> {
 
     private FunnelDTO component;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/LabelEntity.java
Patch:
@@ -25,7 +25,7 @@
  * A serialized representation of this class can be placed in the entity body of a request or response to or from the API. This particular entity holds a reference to a LabelDTO.
  */
 @XmlRootElement(name = "labelEntity")
-public class LabelEntity extends ComponentEntity {
+public class LabelEntity extends ComponentEntity implements Permissible<LabelDTO> {
 
     private DimensionsDTO dimensions;
     private LabelDTO component;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/PortEntity.java
Patch:
@@ -26,7 +26,7 @@
  * A serialized representation of this class can be placed in the entity body of a response to the API. This particular entity holds a reference to an input PortDTO.
  */
 @XmlRootElement(name = "portEntity")
-public class PortEntity extends ComponentEntity {
+public class PortEntity extends ComponentEntity implements Permissible<PortDTO> {
 
     private PortDTO component;
     private PortStatusDTO status;
@@ -35,10 +35,12 @@ public class PortEntity extends ComponentEntity {
     /**
      * @return input PortDTO that are being serialized
      */
+    @Override
     public PortDTO getComponent() {
         return component;
     }
 
+    @Override
     public void setComponent(PortDTO component) {
         this.component = component;
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ProcessGroupEntity.java
Patch:
@@ -29,7 +29,7 @@
  * A serialized representation of this class can be placed in the entity body of a request or response to or from the API. This particular entity holds a reference to a ProcessGroupDTO.
  */
 @XmlRootElement(name = "processGroupEntity")
-public class ProcessGroupEntity extends ComponentEntity {
+public class ProcessGroupEntity extends ComponentEntity implements Permissible<ProcessGroupDTO> {
 
     private ProcessGroupDTO component;
     private ProcessGroupStatusDTO status;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ProcessorEntity.java
Patch:
@@ -26,7 +26,7 @@
  * A serialized representation of this class can be placed in the entity body of a request or response to or from the API. This particular entity holds a reference to a ProcessorDTO.
  */
 @XmlRootElement(name = "processorEntity")
-public class ProcessorEntity extends ComponentEntity {
+public class ProcessorEntity extends ComponentEntity implements Permissible<ProcessorDTO> {
 
     private ProcessorDTO component;
     private String inputRequirement;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/RemoteProcessGroupEntity.java
Patch:
@@ -26,7 +26,7 @@
  * A serialized representation of this class can be placed in the entity body of a request or response to or from the API. This particular entity holds a reference to a RemoteProcessGroupDTO.
  */
 @XmlRootElement(name = "remoteProcessGroupEntity")
-public class RemoteProcessGroupEntity extends ComponentEntity {
+public class RemoteProcessGroupEntity extends ComponentEntity implements Permissible<RemoteProcessGroupDTO> {
 
     private RemoteProcessGroupDTO component;
     private RemoteProcessGroupStatusDTO status;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ReportingTaskEntity.java
Patch:
@@ -24,17 +24,19 @@
  * A serialized representation of this class can be placed in the entity body of a response to the API. This particular entity holds a reference to a reporting task.
  */
 @XmlRootElement(name = "reportingTaskEntity")
-public class ReportingTaskEntity extends ComponentEntity {
+public class ReportingTaskEntity extends ComponentEntity implements Permissible<ReportingTaskDTO> {
 
     private ReportingTaskDTO component;
 
     /**
      * @return reporting task that is being serialized
      */
+    @Override
     public ReportingTaskDTO getComponent() {
         return component;
     }
 
+    @Override
     public void setComponent(ReportingTaskDTO component) {
         this.component = component;
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/ConnectionsEndpointMerger.java
Patch:
@@ -53,11 +53,11 @@ public final NodeResponse merge(final URI uri, final String method, final Set<No
             final Set<ConnectionEntity> nodeConnectionEntities = nodeResponseEntity.getConnections();
 
             for (final ConnectionEntity nodeConnectionEntity : nodeConnectionEntities) {
-                final NodeIdentifier nodeId = nodeResponse.getNodeId();
-                Map<NodeIdentifier, ConnectionEntity> innerMap = entityMap.get(nodeId);
+                final String nodeConnectionEntityId = nodeConnectionEntity.getId();
+                Map<NodeIdentifier, ConnectionEntity> innerMap = entityMap.get(nodeConnectionEntityId);
                 if (innerMap == null) {
                     innerMap = new HashMap<>();
-                    entityMap.put(nodeConnectionEntity.getId(), innerMap);
+                    entityMap.put(nodeConnectionEntityId, innerMap);
                 }
 
                 innerMap.put(nodeResponse.getNodeId(), nodeConnectionEntity);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/ControllerServiceEndpointMerger.java
Patch:
@@ -32,6 +32,7 @@ public class ControllerServiceEndpointMerger extends AbstractSingleEntityEndpoin
     public static final String CONTROLLER_CONTROLLER_SERVICES_URI = "/nifi-api/controller/controller-services";
     public static final Pattern PROCESS_GROUPS_CONTROLLER_SERVICES_URI = Pattern.compile("/nifi-api/process-groups/(?:(?:root)|(?:[a-f0-9\\-]{36}))/controller-services");
     public static final Pattern CONTROLLER_SERVICE_URI_PATTERN = Pattern.compile("/nifi-api/controller-services/[a-f0-9\\-]{36}");
+    private final ControllerServiceEntityMerger controllerServiceEntityMerger = new ControllerServiceEntityMerger();
 
     @Override
     public boolean canHandle(URI uri, String method) {
@@ -53,6 +54,6 @@ protected Class<ControllerServiceEntity> getEntityClass() {
     protected void mergeResponses(ControllerServiceEntity clientEntity, Map<NodeIdentifier, ControllerServiceEntity> entityMap,
                                   Set<NodeResponse> successfulResponses, Set<NodeResponse> problematicResponses) {
 
-        ControllerServiceEntityMerger.mergeControllerServices(clientEntity, entityMap);
+        controllerServiceEntityMerger.merge(clientEntity, entityMap);
     }
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/CountersEndpointMerger.java
Patch:
@@ -29,7 +29,7 @@
 import org.apache.nifi.web.api.entity.CountersEntity;
 
 public class CountersEndpointMerger extends AbstractNodeStatusEndpoint<CountersEntity, CountersDTO> {
-    public static final Pattern COUNTERS_URI_PATTERN = Pattern.compile("/nifi-api/controller/counters");
+    public static final Pattern COUNTERS_URI_PATTERN = Pattern.compile("/nifi-api/counters");
 
     @Override
     public boolean canHandle(URI uri, String method) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/PortEndpointMerger.java
Patch:
@@ -34,6 +34,7 @@ public class PortEndpointMerger extends AbstractSingleEntityEndpoint<PortEntity>
 
     public static final Pattern OUTPUT_PORTS_URI_PATTERN = Pattern.compile("/nifi-api/process-groups/(?:(?:root)|(?:[a-f0-9\\-]{36}))/output-ports");
     public static final Pattern OUTPUT_PORT_URI_PATTERN = Pattern.compile("/nifi-api/output-ports/[a-f0-9\\-]{36}");
+    private final PortEntityMerger portEntityMerger = new PortEntityMerger();
 
     @Override
     public boolean canHandle(final URI uri, final String method) {
@@ -65,11 +66,10 @@ protected Class<PortEntity> getEntityClass() {
         return PortEntity.class;
     }
 
-
     @Override
     protected void mergeResponses(final PortEntity clientEntity, final Map<NodeIdentifier, PortEntity> entityMap,
                                   final Set<NodeResponse> successfulResponses, final Set<NodeResponse> problematicResponses) {
 
-        PortEntityMerger.mergePorts(clientEntity, entityMap);
+        portEntityMerger.merge(clientEntity, entityMap);
     }
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/ProcessorEndpointMerger.java
Patch:
@@ -31,6 +31,7 @@
 public class ProcessorEndpointMerger extends AbstractSingleEntityEndpoint<ProcessorEntity> implements EndpointResponseMerger {
     public static final Pattern PROCESSORS_URI_PATTERN = Pattern.compile("/nifi-api/process-groups/(?:(?:root)|(?:[a-f0-9\\-]{36}))/processors");
     public static final Pattern PROCESSOR_URI_PATTERN = Pattern.compile("/nifi-api/processors/[a-f0-9\\-]{36}");
+    private final ProcessorEntityMerger processorEntityMerger = new ProcessorEntityMerger();
 
     @Override
     public boolean canHandle(final URI uri, final String method) {
@@ -48,11 +49,10 @@ protected Class<ProcessorEntity> getEntityClass() {
         return ProcessorEntity.class;
     }
 
-
     @Override
     protected void mergeResponses(final ProcessorEntity clientEntity, final Map<NodeIdentifier, ProcessorEntity> entityMap, final Set<NodeResponse> successfulResponses,
         final Set<NodeResponse> problematicResponses) {
 
-        ProcessorEntityMerger.mergeProcessors(clientEntity, entityMap);
+        processorEntityMerger.merge(clientEntity, entityMap);
     }
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/RemoteProcessGroupEndpointMerger.java
Patch:
@@ -31,6 +31,7 @@
 public class RemoteProcessGroupEndpointMerger extends AbstractSingleEntityEndpoint<RemoteProcessGroupEntity> implements EndpointResponseMerger {
     public static final Pattern REMOTE_PROCESS_GROUPS_URI_PATTERN = Pattern.compile("/nifi-api/process-groups/(?:(?:root)|(?:[a-f0-9\\-]{36}))/remote-process-groups");
     public static final Pattern REMOTE_PROCESS_GROUP_URI_PATTERN = Pattern.compile("/nifi-api/remote-process-groups/[a-f0-9\\-]{36}");
+    private final RemoteProcessGroupEntityMerger remoteProcessGroupEntityMerger = new RemoteProcessGroupEntityMerger();
 
     @Override
     public boolean canHandle(final URI uri, final String method) {
@@ -52,6 +53,6 @@ protected Class<RemoteProcessGroupEntity> getEntityClass() {
     protected void mergeResponses(RemoteProcessGroupEntity clientEntity, Map<NodeIdentifier, RemoteProcessGroupEntity> entityMap,
                                   Set<NodeResponse> successfulResponses, Set<NodeResponse> problematicResponses) {
 
-        RemoteProcessGroupEntityMerger.mergeRemoteProcessGroups(clientEntity, entityMap);
+        remoteProcessGroupEntityMerger.merge(clientEntity, entityMap);
     }
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/ReportingTaskEndpointMerger.java
Patch:
@@ -31,6 +31,7 @@
 public class ReportingTaskEndpointMerger  extends AbstractSingleEntityEndpoint<ReportingTaskEntity> implements EndpointResponseMerger {
     public static final String REPORTING_TASKS_URI = "/nifi-api/controller/reporting-tasks";
     public static final Pattern REPORTING_TASK_URI_PATTERN = Pattern.compile("/nifi-api/reporting-tasks/[a-f0-9\\-]{36}");
+    private final ReportingTaskEntityMerger reportingTaskEntityMerger = new ReportingTaskEntityMerger();
 
     @Override
     public boolean canHandle(URI uri, String method) {
@@ -50,6 +51,6 @@ protected Class<ReportingTaskEntity> getEntityClass() {
 
     @Override
     protected void mergeResponses(ReportingTaskEntity clientEntity, Map<NodeIdentifier, ReportingTaskEntity> entityMap, Set<NodeResponse> successfulResponses, Set<NodeResponse> problematicResponses) {
-        ReportingTaskEntityMerger.mergeReportingTasks(clientEntity, entityMap);
+        reportingTaskEntityMerger.merge(clientEntity, entityMap);
     }
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/ConnectionsEntityMerger.java
Patch:
@@ -24,6 +24,8 @@
 
 public class ConnectionsEntityMerger {
 
+    private static final ConnectionEntityMerger connectionEntityMerger = new ConnectionEntityMerger();
+
     /**
      * Merges multiple ConnectionEntity responses.
      *
@@ -32,7 +34,7 @@ public class ConnectionsEntityMerger {
      */
     public static void mergeConnections(final Set<ConnectionEntity> connectionEntities, final Map<String, Map<NodeIdentifier, ConnectionEntity>> entityMap) {
         for (final ConnectionEntity entity : connectionEntities) {
-            ConnectionEntityMerger.mergeConnections(entity, entityMap.get(entity.getId()));
+            connectionEntityMerger.merge(entity, entityMap.get(entity.getId()));
         }
     }
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/ControllerServicesEntityMerger.java
Patch:
@@ -24,6 +24,8 @@
 
 public class ControllerServicesEntityMerger {
 
+    private static final ControllerServiceEntityMerger controllerServiceEntityMerger = new ControllerServiceEntityMerger();
+
     /**
      * Merges multiple ControllerServiceEntity responses.
      *
@@ -32,7 +34,7 @@ public class ControllerServicesEntityMerger {
      */
     public static void mergeControllerServices(final Set<ControllerServiceEntity> controllerServiceEntities, final Map<String, Map<NodeIdentifier, ControllerServiceEntity>> entityMap) {
         for (final ControllerServiceEntity entity : controllerServiceEntities) {
-            ControllerServiceEntityMerger.mergeControllerServices(entity, entityMap.get(entity.getId()));
+            controllerServiceEntityMerger.merge(entity, entityMap.get(entity.getId()));
         }
     }
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/PortsEntityMerger.java
Patch:
@@ -24,6 +24,8 @@
 
 public class PortsEntityMerger {
 
+    private static final PortEntityMerger portEntityMerger = new PortEntityMerger();
+
     /**
      * Merges multiple PortEntity responses.
      *
@@ -32,7 +34,7 @@ public class PortsEntityMerger {
      */
     public static void mergePorts(final Set<PortEntity> portEntities, final Map<String, Map<NodeIdentifier, PortEntity>> entityMap) {
         for (final PortEntity entity : portEntities) {
-            PortEntityMerger.mergePorts(entity, entityMap.get(entity.getId()));
+            portEntityMerger.merge(entity, entityMap.get(entity.getId()));
         }
     }
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/ProcessGroupsEntityMerger.java
Patch:
@@ -24,6 +24,8 @@
 
 public class ProcessGroupsEntityMerger {
 
+    private static final ProcessGroupEntityMerger processGroupEntityMerger = new ProcessGroupEntityMerger();
+
     /**
      * Merges multiple ProcessGroupEntity responses.
      *
@@ -32,7 +34,7 @@ public class ProcessGroupsEntityMerger {
      */
     public static void mergeProcessGroups(final Set<ProcessGroupEntity> processGroupEntities, final Map<String, Map<NodeIdentifier, ProcessGroupEntity>> entityMap) {
         for (final ProcessGroupEntity entity : processGroupEntities) {
-            ProcessGroupEntityMerger.mergeProcessGroups(entity, entityMap.get(entity.getId()));
+            processGroupEntityMerger.merge(entity, entityMap.get(entity.getId()));
         }
     }
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/ProcessorsEntityMerger.java
Patch:
@@ -24,6 +24,8 @@
 
 public class ProcessorsEntityMerger {
 
+    private static final ProcessorEntityMerger processorEntityMerger = new ProcessorEntityMerger();
+
     /**
      * Merges multiple ProcessorEntity responses.
      *
@@ -32,7 +34,7 @@ public class ProcessorsEntityMerger {
      */
     public static void mergeProcessors(final Set<ProcessorEntity> processorEntities, final Map<String, Map<NodeIdentifier, ProcessorEntity>> entityMap) {
         for (final ProcessorEntity entity : processorEntities) {
-            ProcessorEntityMerger.mergeProcessors(entity, entityMap.get(entity.getId()));
+            processorEntityMerger.merge(entity, entityMap.get(entity.getId()));
         }
     }
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/RemoteProcessGroupsEntityMerger.java
Patch:
@@ -24,6 +24,8 @@
 
 public class RemoteProcessGroupsEntityMerger {
 
+    private static final RemoteProcessGroupEntityMerger remoteProcessGroupEntityMerger = new RemoteProcessGroupEntityMerger();
+
     /**
      * Merges multiple RemoteProcessGroupEntity responses.
      *
@@ -32,7 +34,7 @@ public class RemoteProcessGroupsEntityMerger {
      */
     public static void mergeRemoteProcessGroups(final Set<RemoteProcessGroupEntity> remoteProcessGroupEntities, final Map<String, Map<NodeIdentifier, RemoteProcessGroupEntity>> entityMap) {
         for (final RemoteProcessGroupEntity entity : remoteProcessGroupEntities) {
-            RemoteProcessGroupEntityMerger.mergeRemoteProcessGroups(entity, entityMap.get(entity.getId()));
+            remoteProcessGroupEntityMerger.merge(entity, entityMap.get(entity.getId()));
         }
     }
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/ReportingTasksEntityMerger.java
Patch:
@@ -24,6 +24,8 @@
 
 public class ReportingTasksEntityMerger {
 
+    private static final ReportingTaskEntityMerger reportingTaskEntityMerger = new ReportingTaskEntityMerger();
+
     /**
      * Merges multiple ReportingTaskEntity responses.
      *
@@ -32,7 +34,7 @@ public class ReportingTasksEntityMerger {
      */
     public static void mergeReportingTasks(final Set<ReportingTaskEntity> reportingTaskEntities, final Map<String, Map<NodeIdentifier, ReportingTaskEntity>> entityMap) {
         for (final ReportingTaskEntity entity : reportingTaskEntities) {
-            ReportingTaskEntityMerger.mergeReportingTasks(entity, entityMap.get(entity.getId()));
+            reportingTaskEntityMerger.merge(entity, entityMap.get(entity.getId()));
         }
     }
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/status/history/RemoteProcessGroupStatusDescriptor.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.nifi.controller.status.history;
 
-import java.util.List;
-import java.util.concurrent.TimeUnit;
-
 import org.apache.nifi.controller.status.RemoteProcessGroupStatus;
 import org.apache.nifi.controller.status.history.MetricDescriptor.Formatter;
 
+import java.util.List;
+import java.util.concurrent.TimeUnit;
+
 public enum RemoteProcessGroupStatusDescriptor {
     SENT_BYTES(new StandardMetricDescriptor<RemoteProcessGroupStatus>("sentBytes",
         "Bytes Sent (5 mins)",

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiWebConfigurationContext.java
Patch:
@@ -47,6 +47,7 @@
 import org.apache.nifi.registry.VariableRegistry;
 import org.apache.nifi.controller.service.ControllerServiceProvider;
 import org.apache.nifi.util.NiFiProperties;
+import org.apache.nifi.web.api.dto.AllowableValueDTO;
 import org.apache.nifi.web.api.dto.ControllerServiceDTO;
 import org.apache.nifi.web.api.dto.ProcessorConfigDTO;
 import org.apache.nifi.web.api.dto.ProcessorDTO;
@@ -476,11 +477,11 @@ private Map<String,ComponentDescriptor> buildComponentDescriptorMap(final Proces
             for(String key : processorConfig.getDescriptors().keySet()){
 
                 PropertyDescriptorDTO descriptor = processorConfig.getDescriptors().get(key);
-                List<PropertyDescriptorDTO.AllowableValueDTO> allowableValuesDTO = descriptor.getAllowableValues();
+                List<AllowableValueDTO> allowableValuesDTO = descriptor.getAllowableValues();
                 Map<String,String> allowableValues = new HashMap<>();
 
                 if(allowableValuesDTO != null) {
-                    for (PropertyDescriptorDTO.AllowableValueDTO value : allowableValuesDTO) {
+                    for (AllowableValueDTO value : allowableValuesDTO) {
                         allowableValues.put(value.getValue(), value.getDisplayName());
                     }
                 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ControllerResource.java
Patch:
@@ -184,7 +184,7 @@ public Response updateControllerConfig(
                     required = true
             ) final ControllerConfigurationEntity configEntity) {
 
-        if (configEntity == null || configEntity.getControllerConfiguration() == null) {
+        if (configEntity == null || configEntity.getComponent() == null) {
             throw new IllegalArgumentException("Controller configuration must be specified");
         }
 
@@ -205,7 +205,7 @@ public Response updateControllerConfig(
                 },
                 null,
                 () -> {
-                    final ControllerConfigurationEntity entity = serviceFacade.updateControllerConfiguration(revision, configEntity.getControllerConfiguration());
+                    final ControllerConfigurationEntity entity = serviceFacade.updateControllerConfiguration(revision, configEntity.getComponent());
                     return clusterContext(generateOkResponse(entity)).build();
                 }
         );

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/Query.java
Patch:
@@ -926,7 +926,7 @@ private static Evaluator<?> buildFunctionEvaluator(final Tree tree, final Evalua
             }
             case ESCAPE_JSON: {
                 verifyArgCount(argEvaluators, 0, "escapeJson");
-                return addToken(new EscapeJsonEvaluator(toStringEvaluator(subjectEvaluator)), "urlDecode");
+                return addToken(new EscapeJsonEvaluator(toStringEvaluator(subjectEvaluator)), "escapeJson");
             }
             case SUBSTRING_BEFORE: {
                 verifyArgCount(argEvaluators, 1, "substringBefore");

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/coordination/node/TestNodeClusterCoordinator.java
Patch:
@@ -77,7 +77,7 @@ public void setup() throws IOException {
 
         coordinator = new NodeClusterCoordinator(senderListener, eventReporter, null, revisionManager, createProperties()) {
             @Override
-            void notifyOthersOfNodeStatusChange(NodeConnectionStatus updatedStatus, boolean notifyAllNodes) {
+            void notifyOthersOfNodeStatusChange(NodeConnectionStatus updatedStatus, boolean notifyAllNodes, boolean waitForCoordinator) {
                 nodeStatuses.add(updatedStatus);
             }
         };
@@ -132,7 +132,7 @@ public void testTryAgainIfNoFlowServiceSet() {
 
         final NodeClusterCoordinator coordinator = new NodeClusterCoordinator(senderListener, eventReporter, null, revisionManager, createProperties()) {
             @Override
-            void notifyOthersOfNodeStatusChange(NodeConnectionStatus updatedStatus, boolean notifyAllNodes) {
+            void notifyOthersOfNodeStatusChange(NodeConnectionStatus updatedStatus, boolean notifyAllNodes, boolean waitForCoordinator) {
             }
         };
 
@@ -170,7 +170,7 @@ public Object answer(InvocationOnMock invocation) throws Throwable {
 
         final NodeClusterCoordinator coordinator = new NodeClusterCoordinator(senderListener, eventReporter, null, revisionManager, createProperties()) {
             @Override
-            void notifyOthersOfNodeStatusChange(NodeConnectionStatus updatedStatus, boolean notifyAllNodes) {
+            void notifyOthersOfNodeStatusChange(NodeConnectionStatus updatedStatus, boolean notifyAllNodes, boolean waitForCoordinator) {
             }
         };
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/FlowController.java
Patch:
@@ -581,7 +581,7 @@ public void run() {
         heartbeatBeanRef.set(new HeartbeatBean(rootGroup, false));
 
         if (configuredForClustering) {
-            leaderElectionManager = new CuratorLeaderElectionManager(4);
+            leaderElectionManager = new CuratorLeaderElectionManager(4, properties);
             heartbeater = new ClusterProtocolHeartbeater(protocolSender, properties);
 
             // Check if there is already a cluster coordinator elected. If not, go ahead

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ConnectionDTO.java
Patch:
@@ -149,7 +149,7 @@ public void setSelectedRelationships(Set<String> relationships) {
      * @return relationships that the source of the connection currently supports. This property is read only
      */
     @ApiModelProperty(
-            value = "The relationships that the source of the connection currently supports. This property is read only.",
+            value = "The relationships that the source of the connection currently supports.",
             readOnly = true
     )
     public Set<String> getAvailableRelationships() {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ProcessorDTO.java
Patch:
@@ -185,7 +185,8 @@ public void setSupportsBatching(Boolean supportsBatching) {
      * @return The available relationships
      */
     @ApiModelProperty(
-            value = "The available relationships that the processor currently supports."
+            value = "The available relationships that the processor currently supports.",
+            readOnly = true
     )
     public List<RelationshipDTO> getRelationships() {
         return relationships;

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-pubsub-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/ConsumeKafka.java
Patch:
@@ -238,7 +238,7 @@ protected Consumer<byte[], byte[]> buildKafkaResource(ProcessContext context, Pr
          * broker is possible we need a mechanism to be able to disable it.
          * 'check.connection' property will serve as such mechanism
          */
-        if (!kafkaProperties.getProperty("check.connection").equals("false")) {
+        if (!"false".equals(kafkaProperties.get("check.connection"))) {
             this.checkIfInitialConnectionPossible();
         }
 

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-pubsub-processors/src/test/java/org/apache/nifi/processors/kafka/pubsub/ConsumeKafkaTest.java
Patch:
@@ -84,6 +84,7 @@ public void validateGetAllMessages() throws Exception {
         runner.setProperty(ConsumeKafka.CLIENT_ID, "foo");
         runner.setProperty(ConsumeKafka.GROUP_ID, "foo");
         runner.setProperty(ConsumeKafka.AUTO_OFFSET_RESET, ConsumeKafka.OFFSET_EARLIEST);
+        runner.setProperty("check.connection", "false");
 
         byte[][] values = new byte[][] { "Hello-1".getBytes(StandardCharsets.UTF_8),
                 "Hello-2".getBytes(StandardCharsets.UTF_8), "Hello-3".getBytes(StandardCharsets.UTF_8) };
@@ -130,6 +131,7 @@ public void validateGetAllMessagesWithProvidedDemarcator() throws Exception {
         runner.setProperty(ConsumeKafka.GROUP_ID, "foo");
         runner.setProperty(ConsumeKafka.AUTO_OFFSET_RESET, ConsumeKafka.OFFSET_EARLIEST);
         runner.setProperty(ConsumeKafka.MESSAGE_DEMARCATOR, "blah");
+        runner.setProperty("check.connection", "false");
 
         byte[][] values = new byte[][] { "Hello-1".getBytes(StandardCharsets.UTF_8),
                 "Hi-2".getBytes(StandardCharsets.UTF_8) };

File: nifi-toolkit/nifi-toolkit-tls/src/test/java/org/apache/nifi/toolkit/tls/standalone/TlsToolkitStandaloneCommandLineTest.java
Patch:
@@ -28,6 +28,7 @@
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
+import java.io.File;
 import java.io.IOException;
 import java.security.SecureRandom;
 import java.util.List;
@@ -129,9 +130,9 @@ public void testKeyStoreType() throws CommandLineParseException {
 
     @Test
     public void testOutputDirectory() throws CommandLineParseException {
-        String testPath = "/fake/path/doesnt/exist";
+        String testPath = File.separator + "fake" + File.separator + "path" + File.separator + "doesnt" + File.separator + "exist";
         tlsToolkitStandaloneCommandLine.parse("-o", testPath);
-        assertEquals(testPath, tlsToolkitStandaloneCommandLine.getBaseDir().getAbsolutePath());
+        assertEquals(testPath, tlsToolkitStandaloneCommandLine.getBaseDir().getPath());
     }
 
     @Test

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/FlowResource.java
Patch:
@@ -1075,6 +1075,7 @@ public Response getAboutInfo() {
         aboutDTO.setTitle("NiFi");
         aboutDTO.setVersion(getProperties().getUiTitle());
         aboutDTO.setUri(generateResourceUri());
+        aboutDTO.setTimezone(new Date());
 
         // get the content viewer url
         aboutDTO.setContentViewerUrl(getProperties().getProperty(NiFiProperties.CONTENT_VIEWER_URL));

File: nifi-toolkit/nifi-toolkit-tls/src/test/java/org/apache/nifi/toolkit/tls/standalone/TlsToolkitStandaloneCommandLineTest.java
Patch:
@@ -149,8 +149,8 @@ public void testHostnames() throws CommandLineParseException {
 
     @Test
     public void testHttpsPort() throws CommandLineParseException {
-        String testPort = "8998";
-        tlsToolkitStandaloneCommandLine.parse("-p", testPort);
+        int testPort = 8998;
+        tlsToolkitStandaloneCommandLine.parse("-p", Integer.toString(testPort));
         assertEquals(testPort, tlsToolkitStandaloneCommandLine.getHttpsPort());
     }
 

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/test/java/org/apache/nifi/processors/hadoop/GetHDFSSequenceFileTest.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.security.UserGroupInformation;
-import org.apache.nifi.components.PropertyValue;
 import org.apache.nifi.hadoop.KerberosProperties;
 import org.apache.nifi.processor.ProcessContext;
 import org.apache.nifi.processor.ProcessorInitializationContext;
@@ -39,7 +38,6 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.mockito.Mockito.when;
 
 public class GetHDFSSequenceFileTest {
     private AbstractHadoopProcessor.HdfsResources hdfsResources;

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/main/java/org/apache/nifi/processors/hadoop/ListHDFS.java
Patch:
@@ -159,6 +159,7 @@ protected String getKey(final String directory) {
 
     @Override
     public void onPropertyModified(final PropertyDescriptor descriptor, final String oldValue, final String newValue) {
+        super.onPropertyModified(descriptor, oldValue, newValue);
         if (isConfigurationRestored() && descriptor.equals(DIRECTORY)) {
             latestTimestampEmitted = -1L;
             latestTimestampListed = -1L;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/leader/election/CuratorLeaderElectionManager.java
Patch:
@@ -95,7 +95,7 @@ public synchronized void register(final String roleName, final LeaderElectionSta
         }
 
         final String rootPath = zkConfig.getRootPath();
-        final String leaderPath = (rootPath.endsWith("/") ? "" : "/") + "leaders/" + roleName;
+        final String leaderPath = rootPath + (rootPath.endsWith("/") ? "" : "/") + "leaders/" + roleName;
 
         try {
             PathUtils.validatePath(rootPath);

File: nifi-nar-bundles/nifi-standard-services/nifi-ssl-context-service-api/src/main/java/org/apache/nifi/ssl/SSLContextService.java
Patch:
@@ -55,6 +55,8 @@ public static enum ClientAuth {
 
     public String getKeyStorePassword();
 
+    public String getKeyPassword();
+
     public boolean isKeyStoreConfigured();
 
     String getSslAlgorithm();

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-processors/src/main/java/org/apache/nifi/processors/kafka/PutKafka.java
Patch:
@@ -388,8 +388,7 @@ public Set<Relationship> getRelationships() {
     @Override
     protected KafkaPublisher buildKafkaResource(ProcessContext context, ProcessSession session)
             throws ProcessException {
-        KafkaPublisher kafkaPublisher = new KafkaPublisher(this.buildKafkaConfigProperties(context));
-        kafkaPublisher.setProcessLog(this.getLogger());
+        KafkaPublisher kafkaPublisher = new KafkaPublisher(this.buildKafkaConfigProperties(context), this.getLogger());
         return kafkaPublisher;
     }
 

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-pubsub-processors/src/main/java/org/apache/nifi/processors/kafka/pubsub/PublishKafka.java
Patch:
@@ -228,7 +228,8 @@ protected KafkaPublisher buildKafkaResource(ProcessContext context, ProcessSessi
         kafkaProperties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());
         kafkaProperties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());
         this.brokers = context.getProperty(BOOTSTRAP_SERVERS).evaluateAttributeExpressions().getValue();
-        return new KafkaPublisher(kafkaProperties);
+        KafkaPublisher publisher = new KafkaPublisher(kafkaProperties, this.getLogger());
+        return publisher;
     }
 
     /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/TemplateUtils.java
Patch:
@@ -188,7 +188,6 @@ private static void scrubProcessors(final Set<ProcessorDTO> processors) {
                 processorConfig.setCustomUiUrl(null);
                 processorConfig.setDefaultConcurrentTasks(null);
                 processorConfig.setDefaultSchedulingPeriod(null);
-                processorConfig.setDescriptors(null);
                 processorConfig.setAutoTerminatedRelationships(null);
             }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ConnectableDTO.java
Patch:
@@ -152,6 +152,6 @@ public void setComments(String comments) {
 
     @Override
     public String toString() {
-        return "ConnectableDTO [Type=" + type + ", Name=" + name + ", Id=" + id + "]";
+        return "ConnectableDTO [Id=" + id + "]";
     }
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ConnectionDTO.java
Patch:
@@ -232,6 +232,6 @@ public void setPrioritizers(List<String> prioritizers) {
 
     @Override
     public String toString() {
-        return "ConnectionDTO [name: " + name + " from " + source + " to " + destination + "]";
+        return "ConnectionDTO [id: " + getId() + "]";
     }
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/StandardFunnel.java
Patch:
@@ -217,7 +217,7 @@ public void removeConnection(final Connection connection) throws IllegalArgument
 
             final boolean removed = outgoingConnections.remove(connection);
             if (!removed) {
-                throw new IllegalStateException(connection + " is not registered with " + this);
+                throw new IllegalStateException(connection.getIdentifier() + " is not registered with " + this.getIdentifier());
             }
         } finally {
             writeLock.unlock();
@@ -505,7 +505,7 @@ public void verifyCanDelete(boolean ignoreConnections) throws IllegalStateExcept
                 if (connection.getSource().equals(this)) {
                     connection.verifyCanDelete();
                 } else {
-                    throw new IllegalStateException(this + " is the destination of another component");
+                    throw new IllegalStateException("Funnel " + this.getIdentifier() + " is the destination of another component");
                 }
             }
         } finally {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/FlowController.java
Patch:
@@ -1957,14 +1957,14 @@ private void validateSnippetContents(final ProcessGroup group, final FlowSnippet
         // validate the names of Input Ports
         for (final PortDTO port : templateContents.getInputPorts()) {
             if (group.getInputPortByName(port.getName()) != null) {
-                throw new IllegalStateException("ProcessGroup already has an Input Port with name " + port.getName());
+                throw new IllegalStateException("One or more of the proposed Port names is not available in the process group");
             }
         }
 
         // validate the names of Output Ports
         for (final PortDTO port : templateContents.getOutputPorts()) {
             if (group.getOutputPortByName(port.getName()) != null) {
-                throw new IllegalStateException("ProcessGroup already has an Output Port with name " + port.getName());
+                throw new IllegalStateException("One or more of the proposed Port names is not available in the process group");
             }
         }
 
@@ -2906,7 +2906,7 @@ public ReportingTaskNode getReportingTaskNode(final String taskId) {
     @Override
     public void startReportingTask(final ReportingTaskNode reportingTaskNode) {
         if (isTerminated()) {
-            throw new IllegalStateException("Cannot start reporting task " + reportingTaskNode + " because the controller is terminated");
+            throw new IllegalStateException("Cannot start reporting task " + reportingTaskNode.getIdentifier() + " because the controller is terminated");
         }
 
         reportingTaskNode.verifyCanStart();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/scheduling/QuartzSchedulingAgent.java
Patch:
@@ -77,15 +77,15 @@ public void shutdown() {
     public void doSchedule(final ReportingTaskNode taskNode, final ScheduleState scheduleState) {
         final List<AtomicBoolean> existingTriggers = canceledTriggers.get(taskNode);
         if (existingTriggers != null) {
-            throw new IllegalStateException("Cannot schedule " + taskNode.getReportingTask() + " because it is already scheduled to run");
+            throw new IllegalStateException("Cannot schedule " + taskNode.getReportingTask().getIdentifier() + " because it is already scheduled to run");
         }
 
         final String cronSchedule = taskNode.getSchedulingPeriod();
         final CronExpression cronExpression;
         try {
             cronExpression = new CronExpression(cronSchedule);
         } catch (final Exception pe) {
-            throw new IllegalStateException("Cannot schedule Reporting Task " + taskNode.getReportingTask() + " to run because its scheduling period is not valid");
+            throw new IllegalStateException("Cannot schedule Reporting Task " + taskNode.getReportingTask().getIdentifier() + " to run because its scheduling period is not valid");
         }
 
         final ReportingTaskWrapper taskWrapper = new ReportingTaskWrapper(taskNode, scheduleState);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/scheduling/StandardProcessScheduler.java
Patch:
@@ -380,7 +380,7 @@ public int getActiveThreadCount(final Object scheduled) {
     @Override
     public void startPort(final Port port) {
         if (!port.isValid()) {
-            throw new IllegalStateException("Port " + port.getName() + " is not in a valid state");
+            throw new IllegalStateException("Port " + port.getIdentifier() + " is not in a valid state");
         }
 
         port.onSchedulingStart();
@@ -407,7 +407,7 @@ public void stopFunnel(final Funnel funnel) {
 
     private synchronized void startConnectable(final Connectable connectable) {
         if (connectable.getScheduledState() == ScheduledState.DISABLED) {
-            throw new IllegalStateException(connectable + " is disabled, so it cannot be started");
+            throw new IllegalStateException(connectable.getIdentifier() + " is disabled, so it cannot be started");
         }
 
         final ScheduleState scheduleState = getScheduleState(requireNonNull(connectable));

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/processor/GhostProcessor.java
Patch:
@@ -94,6 +94,6 @@ public void onTrigger(ProcessContext context, ProcessSessionFactory sessionFacto
 
     @Override
     public String toString() {
-        return "GhostProcessor[id=" + id + ", class=" + canonicalClassName + "]";
+        return "GhostProcessor[id=" + id + "]";
     }
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/processor/StandardSchedulingContext.java
Patch:
@@ -53,11 +53,11 @@ public void leaseControllerService(final String identifier) {
         }
 
         if (serviceNode.getState() != ControllerServiceState.ENABLED) {
-            throw new IllegalStateException("Cannot lease Controller Service because Controller Service " + serviceNode.getProxiedControllerService() + " is not currently enabled");
+            throw new IllegalStateException("Cannot lease Controller Service because Controller Service " + serviceNode.getProxiedControllerService().getIdentifier() + " is not currently enabled");
         }
 
         if (!serviceNode.isValid()) {
-            throw new IllegalStateException("Cannot lease Controller Service because Controller Service " + serviceNode.getProxiedControllerService() + " is not currently valid");
+            throw new IllegalStateException("Cannot lease Controller Service because Controller Service " + serviceNode.getProxiedControllerService().getIdentifier() + " is not currently valid");
         }
 
         serviceNode.addReference(processorNode);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/reporting/GhostReportingTask.java
Patch:
@@ -79,7 +79,7 @@ public String getIdentifier() {
 
     @Override
     public String toString() {
-        return "GhostReportingTask[id=" + id + ", class=" + canonicalClassName + "]";
+        return "GhostReportingTask[id=" + id + "]";
     }
 
     @Override

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-site-to-site/src/main/java/org/apache/nifi/remote/protocol/AbstractFlowFileServerProtocol.java
Patch:
@@ -63,7 +63,7 @@ public abstract class AbstractFlowFileServerProtocol implements ServerProtocol {
     protected boolean shutdown = false;
     protected FlowFileCodec negotiatedFlowFileCodec = null;
 
-    protected HandshakenProperties handshakenProperties;
+    protected HandshakeProperties handshakenProperties;
 
     protected static final long DEFAULT_BATCH_NANOS = TimeUnit.SECONDS.toNanos(5L);
 
@@ -82,7 +82,7 @@ public boolean isHandshakeSuccessful() {
         return handshakeCompleted;
     }
 
-    protected void validateHandshakeRequest(HandshakenProperties confirmed, final Peer peer, final Map<String, String> properties) throws HandshakeException {
+    protected void validateHandshakeRequest(HandshakeProperties confirmed, final Peer peer, final Map<String, String> properties) throws HandshakeException {
         Boolean useGzip = null;
         for (final Map.Entry<String, String> entry : properties.entrySet()) {
             final String propertyName = entry.getKey();
@@ -201,7 +201,7 @@ public final void handshake(final Peer peer) throws IOException, HandshakeExcept
         handshakeCompleted = true;
     }
 
-    abstract protected HandshakenProperties doHandshake(final Peer peer) throws  IOException, HandshakeException;
+    abstract protected HandshakeProperties doHandshake(final Peer peer) throws  IOException, HandshakeException;
 
     @Override
     public int transferFlowFiles(final Peer peer, final ProcessContext context, final ProcessSession session, final FlowFileCodec codec) throws IOException, ProtocolException {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-site-to-site/src/main/java/org/apache/nifi/remote/protocol/HandshakeProperties.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.nifi.remote.exception.HandshakeException;
 
-public class HandshakenProperties {
+public class HandshakeProperties {
 
     private String commsIdentifier;
     private String transitUriPrefix = null;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-site-to-site/src/main/java/org/apache/nifi/remote/protocol/socket/SocketFlowFileServerProtocol.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.nifi.remote.exception.ProtocolException;
 import org.apache.nifi.remote.protocol.AbstractFlowFileServerProtocol;
 import org.apache.nifi.remote.protocol.CommunicationsSession;
-import org.apache.nifi.remote.protocol.HandshakenProperties;
+import org.apache.nifi.remote.protocol.HandshakeProperties;
 import org.apache.nifi.remote.protocol.RequestType;
 import org.apache.nifi.remote.protocol.ResponseCode;
 import org.apache.nifi.util.NiFiProperties;
@@ -51,9 +51,9 @@ public class SocketFlowFileServerProtocol extends AbstractFlowFileServerProtocol
     private final VersionNegotiator versionNegotiator = new StandardVersionNegotiator(6, 5, 4, 3, 2, 1);
 
     @Override
-    protected HandshakenProperties doHandshake(Peer peer) throws IOException, HandshakeException {
+    protected HandshakeProperties doHandshake(Peer peer) throws IOException, HandshakeException {
 
-        HandshakenProperties confirmed = new HandshakenProperties();
+        HandshakeProperties confirmed = new HandshakeProperties();
 
         final CommunicationsSession commsSession = peer.getCommunicationsSession();
         final DataInputStream dis = new DataInputStream(commsSession.getInput().getInputStream());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-site-to-site/src/test/java/org/apache/nifi/remote/TestHttpRemoteSiteListener.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.nifi.processor.ProcessSession;
 import org.apache.nifi.remote.protocol.FlowFileTransaction;
-import org.apache.nifi.remote.protocol.HandshakenProperties;
+import org.apache.nifi.remote.protocol.HandshakeProperties;
 import org.apache.nifi.util.NiFiProperties;
 import org.junit.BeforeClass;
 import org.junit.Test;
@@ -46,7 +46,7 @@ public void testNormalTransactionProgress() {
 
         ProcessSession processSession = Mockito.mock(ProcessSession.class);
         FlowFileTransaction transaction = new FlowFileTransaction(processSession, null, null, 0, null, null);
-        transactionManager.holdTransaction(transactionId, transaction, new HandshakenProperties());
+        transactionManager.holdTransaction(transactionId, transaction, new HandshakeProperties());
 
         assertNotNull(transactionManager.getHandshakenProperties(transactionId));
 

File: nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/client/http/HttpClient.java
Patch:
@@ -126,7 +126,6 @@ public Transaction createTransaction(final TransferDirection direction) throws H
 
             final CommunicationsSession commSession = new HttpCommunicationsSession();
             final String nodeApiUrl = resolveNodeApiUrl(peerStatus.getPeerDescription());
-            commSession.setUri(nodeApiUrl);
             final String clusterUrl = config.getUrl();
             final Peer peer = new Peer(peerStatus.getPeerDescription(), commSession, nodeApiUrl, clusterUrl);
 

File: nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/io/socket/SocketChannelCommunicationsSession.java
Patch:
@@ -28,8 +28,8 @@ public class SocketChannelCommunicationsSession extends AbstractCommunicationsSe
     private final SocketChannelOutput response;
     private int timeout = 30000;
 
-    public SocketChannelCommunicationsSession(final SocketChannel socketChannel, final String uri) throws IOException {
-        super(uri);
+    public SocketChannelCommunicationsSession(final SocketChannel socketChannel) throws IOException {
+        super();
         request = new SocketChannelInput(socketChannel);
         response = new SocketChannelOutput(socketChannel);
         channel = socketChannel;

File: nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/io/socket/ssl/SSLSocketChannelCommunicationsSession.java
Patch:
@@ -26,8 +26,8 @@ public class SSLSocketChannelCommunicationsSession extends AbstractCommunication
     private final SSLSocketChannelInput request;
     private final SSLSocketChannelOutput response;
 
-    public SSLSocketChannelCommunicationsSession(final SSLSocketChannel channel, final String uri) {
-        super(uri);
+    public SSLSocketChannelCommunicationsSession(final SSLSocketChannel channel) {
+        super();
         request = new SSLSocketChannelInput(channel);
         response = new SSLSocketChannelOutput(channel);
         this.channel = channel;

File: nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/protocol/http/HttpClientTransaction.java
Patch:
@@ -48,9 +48,9 @@ public void initialize(SiteToSiteRestApiClient apiUtil, String transactionUrl) t
         this.transactionUrl = transactionUrl;
         this.apiClient = apiUtil;
         if(TransferDirection.RECEIVE.equals(direction)){
-            dataAvailable = apiUtil.openConnectionForReceive(transactionUrl, peer.getCommunicationsSession());
+            dataAvailable = apiUtil.openConnectionForReceive(transactionUrl, peer);
         } else {
-            apiUtil.openConnectionForSend(transactionUrl, peer.getCommunicationsSession());
+            apiUtil.openConnectionForSend(transactionUrl, peer);
         }
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-site-to-site/src/main/java/org/apache/nifi/remote/SocketRemoteSiteListener.java
Patch:
@@ -154,12 +154,12 @@ public void run() {
                                     sslSocketChannel.connect();
                                     LOG.trace("Channel connected");
 
-                                    commsSession = new SSLSocketChannelCommunicationsSession(sslSocketChannel, peerUri);
+                                    commsSession = new SSLSocketChannelCommunicationsSession(sslSocketChannel);
                                     dn = sslSocketChannel.getDn();
                                     commsSession.setUserDn(dn);
                                 } else {
                                     LOG.trace("{} Channel is not secure", this);
-                                    commsSession = new SocketChannelCommunicationsSession(socketChannel, peerUri);
+                                    commsSession = new SocketChannelCommunicationsSession(socketChannel);
                                     dn = null;
                                 }
                             } catch (final Exception e) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-site-to-site/src/main/java/org/apache/nifi/remote/protocol/http/StandardHttpFlowFileServerProtocol.java
Patch:
@@ -48,7 +48,7 @@ public class StandardHttpFlowFileServerProtocol extends AbstractFlowFileServerPr
     private final VersionNegotiator versionNegotiator;
     private final HttpRemoteSiteListener transactionManager = HttpRemoteSiteListener.getInstance();
 
-    public StandardHttpFlowFileServerProtocol(VersionNegotiator versionNegotiator) {
+    public StandardHttpFlowFileServerProtocol(final VersionNegotiator versionNegotiator) {
         super();
         this.versionNegotiator = versionNegotiator;
     }
@@ -222,4 +222,5 @@ public void sendPeerList(final Peer peer, final Optional<ClusterNodeInformation>
     public String getResourceName() {
         return RESOURCE_NAME;
     }
+
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/web/api/TestDataTransferResource.java
Patch:
@@ -64,6 +64,9 @@ public static void setup() throws Exception {
     private HttpServletRequest createCommonHttpServletRequest() {
         final HttpServletRequest req = mock(HttpServletRequest.class);
         doReturn("1").when(req).getHeader(eq(HttpHeaders.PROTOCOL_VERSION));
+        doReturn(new StringBuffer("http://nifi.example.com:8080")
+                .append("/nifi-api/data-transfer/output-ports/port-id/transactions/tx-id/flow-files"))
+                .when(req).getRequestURL();
         return req;
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/replication/ThreadPoolRequestReplicator.java
Patch:
@@ -41,7 +41,7 @@
 import org.apache.nifi.events.EventReporter;
 import org.apache.nifi.reporting.Severity;
 import org.apache.nifi.util.FormatUtils;
-import org.apache.nifi.util.TypeOneUUIDGenerator;
+import org.apache.nifi.util.ComponentIdGenerator;
 import org.apache.nifi.web.security.ProxiedEntitiesUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -219,7 +219,7 @@ public AsyncClusterResponse replicate(Set<NodeIdentifier> nodeIds, String method
             final boolean indicateReplicated, final boolean performVerification) {
         final Map<String, String> updatedHeaders = new HashMap<>(headers);
 
-        updatedHeaders.put(RequestReplicator.CLUSTER_ID_GENERATION_SEED_HEADER, TypeOneUUIDGenerator.generateId().toString());
+        updatedHeaders.put(RequestReplicator.CLUSTER_ID_GENERATION_SEED_HEADER, ComponentIdGenerator.generateId().toString());
         if (indicateReplicated) {
             updatedHeaders.put(RequestReplicator.REPLICATION_INDICATOR_HEADER, "true");
         }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/persistence/TemplateSerializerTest.java
Patch:
@@ -33,7 +33,7 @@
 import javax.xml.bind.Unmarshaller;
 import javax.xml.transform.stream.StreamSource;
 
-import org.apache.nifi.util.TypeOneUUIDGenerator;
+import org.apache.nifi.util.ComponentIdGenerator;
 import org.apache.nifi.web.api.dto.FlowSnippetDTO;
 import org.apache.nifi.web.api.dto.ProcessorDTO;
 import org.apache.nifi.web.api.dto.TemplateDTO;
@@ -55,7 +55,7 @@ public void validateDiffWithChangingComponentIdAndAdditionalElements() throws Ex
         for (int i = 4; i > 0; i--) {
             ProcessorDTO procDTO = new ProcessorDTO();
             procDTO.setType("Processor" + i + ".class");
-            procDTO.setId(TypeOneUUIDGenerator.generateId().toString());
+            procDTO.setId(ComponentIdGenerator.generateId().toString());
             procs.add(procDTO);
         }
         snippet.setProcessors(procs);
@@ -86,7 +86,7 @@ public void validateDiffWithChangingComponentIdAndAdditionalElements() throws Ex
         // add new Processor
         ProcessorDTO procDTO = new ProcessorDTO();
         procDTO.setType("ProcessorNew" + ".class");
-        procDTO.setId(TypeOneUUIDGenerator.generateId().toString());
+        procDTO.setId(ComponentIdGenerator.generateId().toString());
         deserProcs.add(procDTO);
 
         // Serialize modified template

File: nifi-mock/src/test/java/org/apache/nifi/util/CurrentTestStandardProcessorTestRunner.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.nifi.processor.ProcessContext;
 import org.apache.nifi.processor.ProcessSession;
 import org.apache.nifi.processor.exception.ProcessException;
+import org.apache.nifi.registry.VariableRegistryUtils;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -31,7 +32,7 @@ public class CurrentTestStandardProcessorTestRunner {
     @Test
     public void testOnScheduledCalledAfterRunFinished() {
         SlowRunProcessor processor = new SlowRunProcessor();
-        StandardProcessorTestRunner runner = new StandardProcessorTestRunner(processor);
+        StandardProcessorTestRunner runner = new StandardProcessorTestRunner(processor, VariableRegistryUtils.createSystemVariableRegistry());
         final int iterations = 5;
         runner.run(iterations);
         // if the counter is not equal to iterations, the the processor must have been unscheduled

File: nifi-mock/src/test/java/org/apache/nifi/util/TestMockProcessContext.java
Patch:
@@ -32,14 +32,15 @@
 import org.apache.nifi.processor.ProcessSession;
 import org.apache.nifi.processor.exception.ProcessException;
 import org.apache.nifi.processor.util.StandardValidators;
+import org.apache.nifi.registry.VariableRegistryUtils;
 import org.junit.Test;
 
 public class TestMockProcessContext {
 
     @Test
     public void testRemoveProperty() {
         final DummyProcessor proc = new DummyProcessor();
-        final MockProcessContext context = new MockProcessContext(proc);
+        final MockProcessContext context = new MockProcessContext(proc, VariableRegistryUtils.createSystemVariableRegistry());
         context.setProperty(DummyProcessor.REQUIRED_PROP, "req-value");
         context.setProperty(DummyProcessor.OPTIONAL_PROP, "opt-value");
         context.setProperty(DummyProcessor.DEFAULTED_PROP, "custom-value");

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/scheduling/TestProcessorLifecycle.java
Patch:
@@ -43,6 +43,7 @@
 import org.apache.nifi.processor.Relationship;
 import org.apache.nifi.processor.exception.ProcessException;
 import org.apache.nifi.provenance.MockProvenanceRepository;
+import org.apache.nifi.registry.VariableRegistryUtils;
 import org.apache.nifi.util.NiFiProperties;
 import org.junit.After;
 import org.junit.Before;
@@ -661,7 +662,8 @@ private FlowController buildFlowControllerForTest() throws Exception {
         properties.setProperty("nifi.remote.input.secure", "");
 
         return FlowController.createStandaloneInstance(mock(FlowFileEventRepository.class), properties,
-            mock(Authorizer.class), mock(AuditService.class), null, new VolatileBulletinRepository());
+            mock(Authorizer.class), mock(AuditService.class), null, new VolatileBulletinRepository(),
+                VariableRegistryUtils.createCustomVariableRegistry(properties.getVariableRegistryPropertiesPaths()));
     }
 
     /**

File: nifi-nar-bundles/nifi-site-to-site-reporting-bundle/nifi-site-to-site-reporting-task/src/test/java/org/apache/nifi/reporting/TestSiteToSiteProvenanceReportingTask.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.nifi.provenance.ProvenanceEventRepository;
 import org.apache.nifi.provenance.ProvenanceEventType;
 import org.apache.nifi.provenance.StandardProvenanceEventRecord;
+import org.apache.nifi.registry.VariableRegistryUtils;
 import org.apache.nifi.remote.Transaction;
 import org.apache.nifi.remote.TransferDirection;
 import org.apache.nifi.remote.client.SiteToSiteClient;
@@ -94,7 +95,7 @@ public void testSerializedForm() throws IOException, InitializationException {
             @Override
             public PropertyValue answer(final InvocationOnMock invocation) throws Throwable {
                 final PropertyDescriptor descriptor = invocation.getArgumentAt(0, PropertyDescriptor.class);
-                return new MockPropertyValue(properties.get(descriptor), null);
+                return new MockPropertyValue(properties.get(descriptor), null, VariableRegistryUtils.createSystemVariableRegistry());
             }
         }).when(context).getProperty(Mockito.any(PropertyDescriptor.class));
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-reporting-tasks/src/test/java/org/apache/nifi/controller/MonitorMemoryTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.nifi.authorization.Authorizer;
 import org.apache.nifi.controller.repository.FlowFileEventRepository;
 import org.apache.nifi.provenance.MockProvenanceRepository;
+import org.apache.nifi.registry.VariableRegistryUtils;
 import org.apache.nifi.util.CapturingLogger;
 import org.apache.nifi.util.NiFiProperties;
 import org.junit.After;
@@ -136,6 +137,6 @@ private FlowController buildFlowControllerForTest() throws Exception {
         properties.setProperty("nifi.remote.input.secure", "");
 
         return FlowController.createStandaloneInstance(mock(FlowFileEventRepository.class), properties,
-                mock(Authorizer.class), mock(AuditService.class), null, null);
+                mock(Authorizer.class), mock(AuditService.class), null, null, VariableRegistryUtils.createCustomVariableRegistry(properties.getVariableRegistryPropertiesPaths()));
     }
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/test/java/org/apache/nifi/authorization/FileAuthorizerTest.java
Patch:
@@ -254,7 +254,7 @@ public void testOnConfiguredWhenLegacyUsersFileProvided() throws Exception {
 
         // verify user3's policies
         final Map<String,Set<RequestAction>> user3Policies = getResourceActions(policies, user3);
-        assertEquals(4, user3Policies.size());
+        assertEquals(5, user3Policies.size());
 
         assertTrue(user3Policies.containsKey(ResourceType.Flow.getValue()));
         assertEquals(1, user3Policies.get(ResourceType.Flow.getValue()).size());
@@ -286,7 +286,7 @@ public void testOnConfiguredWhenLegacyUsersFileProvided() throws Exception {
 
         // verify user5's policies
         final Map<String,Set<RequestAction>> user5Policies = getResourceActions(policies, user5);
-        assertEquals(1, user5Policies.size());
+        assertEquals(2, user5Policies.size());
 
         assertTrue(user5Policies.containsKey(ResourceType.Proxy.getValue()));
         assertEquals(2, user5Policies.get(ResourceType.Proxy.getValue()).size());
@@ -384,7 +384,7 @@ public void testOnConfiguredWhenInitialAdminProvided() throws Exception {
         assertEquals(adminIdentity, adminUser.getIdentity());
 
         final Set<AccessPolicy> policies = authorizer.getAccessPolicies();
-        assertEquals(9, policies.size());
+        assertEquals(11, policies.size());
 
         final String rootGroupResource = ResourceType.ProcessGroup.getValue() + "/" + ROOT_GROUP_ID;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-authorization/src/main/java/org/apache/nifi/authorization/resource/DataTransferAuthorizable.java
Patch:
@@ -19,12 +19,13 @@
 import org.apache.nifi.authorization.Resource;
 
 /**
- * Authorizable for policies of an Authorizable.
+ * Authorizable for authorizing data transfers.
  */
-public class DataTransferAuthorizable implements Authorizable {
+public class DataTransferAuthorizable extends DataAuthorizable implements EnforcePolicyPermissionsThroughBaseResource {
     final Authorizable authorizable;
 
     public DataTransferAuthorizable(Authorizable authorizable) {
+        super(authorizable);
         this.authorizable = authorizable;
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-authorization/src/main/java/org/apache/nifi/authorization/resource/ResourceType.java
Patch:
@@ -29,7 +29,7 @@ public enum ResourceType {
     Processor("/processors"),
     ProcessGroup("/process-groups"),
     Provenance("/provenance"),
-    ProvenanceEvent("/provenance-events"),
+    Data("/data"),
     Proxy("/proxy"),
     RemoteProcessGroup("/remote-process-groups"),
     ReportingTask("/reporting-tasks"),

File: nifi-nar-bundles/nifi-provenance-repository-bundle/nifi-persistent-provenance-repository/src/main/java/org/apache/nifi/provenance/PersistentProvenanceRepository.java
Patch:
@@ -411,7 +411,7 @@ public boolean isAuthorized(final ProvenanceEventRecord event, final NiFiUser us
 
         final Authorizable eventAuthorizable;
         try {
-            eventAuthorizable = resourceFactory.createProvenanceAuthorizable(event.getComponentId());
+            eventAuthorizable = resourceFactory.createDataAuthorizable(event.getComponentId());
         } catch (final ResourceNotFoundException rnfe) {
             return false;
         }
@@ -425,7 +425,7 @@ protected void authorize(final ProvenanceEventRecord event, final NiFiUser user)
             return;
         }
 
-        final Authorizable eventAuthorizable = resourceFactory.createProvenanceAuthorizable(event.getComponentId());
+        final Authorizable eventAuthorizable = resourceFactory.createDataAuthorizable(event.getComponentId());
         eventAuthorizable.authorize(authorizer, RequestAction.READ, user, event.getAttributes());
     }
 

File: nifi-nar-bundles/nifi-provenance-repository-bundle/nifi-volatile-provenance-repository/src/main/java/org/apache/nifi/provenance/VolatileProvenanceRepository.java
Patch:
@@ -243,7 +243,7 @@ public boolean isAuthorized(final ProvenanceEventRecord event, final NiFiUser us
 
         final Authorizable eventAuthorizable;
         try {
-            eventAuthorizable = resourceFactory.createProvenanceAuthorizable(event.getComponentId());
+            eventAuthorizable = resourceFactory.createDataAuthorizable(event.getComponentId());
         } catch (final ResourceNotFoundException rnfe) {
             return false;
         }
@@ -257,7 +257,7 @@ protected void authorize(final ProvenanceEventRecord event, final NiFiUser user)
             return;
         }
 
-        final Authorizable eventAuthorizable = resourceFactory.createProvenanceAuthorizable(event.getComponentId());
+        final Authorizable eventAuthorizable = resourceFactory.createDataAuthorizable(event.getComponentId());
         eventAuthorizable.authorize(authorizer, RequestAction.READ, user, event.getAttributes());
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/service/StandardControllerServiceNode.java
Patch:
@@ -170,7 +170,7 @@ public List<ControllerServiceNode> getRequiredControllerServices() {
         Set<ControllerServiceNode> requiredServices = new HashSet<>();
         for (Entry<PropertyDescriptor, String> pEntry : this.getProperties().entrySet()) {
             PropertyDescriptor descriptor = pEntry.getKey();
-            if (descriptor.getControllerServiceDefinition() != null && descriptor.isRequired()) {
+            if (descriptor.getControllerServiceDefinition() != null && pEntry.getValue() != null) {
                 ControllerServiceNode rNode = this.processGroup.getControllerService(pEntry.getValue());
                 requiredServices.add(rNode);
                 requiredServices.addAll(rNode.getRequiredControllerServices());

File: nifi-framework-api/src/main/java/org/apache/nifi/authorization/resource/Authorizable.java
Patch:
@@ -97,7 +97,7 @@ default AuthorizationResult checkAuthorization(Authorizer authorizer, RequestAct
             if (parent == null) {
                 return AuthorizationResult.denied();
             } else {
-                return parent.checkAuthorization(authorizer, action, user);
+                return parent.checkAuthorization(authorizer, action, user, resourceContext);
             }
         } else {
             return result;
@@ -152,7 +152,7 @@ default void authorize(Authorizer authorizer, RequestAction action, NiFiUser use
             if (parent == null) {
                 throw new AccessDeniedException("Access is denied");
             } else {
-                parent.authorize(authorizer, action, user);
+                parent.authorize(authorizer, action, user, resourceContext);
             }
         } else if (Result.Denied.equals(result.getResult())) {
             throw new AccessDeniedException(result.getExplanation());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-authorization/src/main/java/org/apache/nifi/authorization/resource/ResourceType.java
Patch:
@@ -17,11 +17,10 @@
 package org.apache.nifi.authorization.resource;
 
 public enum ResourceType {
-    Connection("/connections"),
     Controller("/controller"),
     ControllerService("/controller-services"),
     Counters("/counters"),
-    Funnel("/funnel"),
+    Funnel("/funnels"),
     Flow("/flow"),
     InputPort("/input-ports"),
     Label("/labels"),

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/AuthorizableLookup.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.web;
+package org.apache.nifi.authorization;
 
 import org.apache.nifi.authorization.resource.Authorizable;
 import org.apache.nifi.controller.Snippet;
@@ -72,7 +72,7 @@ public interface AuthorizableLookup {
      * @param id connection id
      * @return authorizable
      */
-    Authorizable getConnection(String id);
+    ConnectionAuthorizable getConnection(String id);
 
     /**
      * Get the authorizable ProcessGroup.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/AuthorizeAccess.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.web;
+package org.apache.nifi.authorization;
 
 public interface AuthorizeAccess {
     void authorize(AuthorizableLookup lookup);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/NiFiServiceFacade.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.nifi.web;
 
+import org.apache.nifi.authorization.AuthorizeAccess;
 import org.apache.nifi.authorization.RequestAction;
 import org.apache.nifi.authorization.user.NiFiUser;
 import org.apache.nifi.controller.ScheduledState;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/integration/accesscontrol/ITFlowAccessControl.java
Patch:
@@ -66,7 +66,7 @@ public void testGenerateClientId() throws Exception {
      */
     @Test
     public void testGetIdentity() throws Exception {
-        helper.testGenericGetUri(helper.getBaseUrl() + "/flow/identity");
+        helper.testGenericGetUri(helper.getBaseUrl() + "/flow/current-user");
     }
 
     /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-documentation/src/test/java/org/apache/nifi/documentation/DocGeneratorTest.java
Patch:
@@ -43,9 +43,9 @@ public void testProcessorLoadsNarResources() throws IOException, ClassNotFoundEx
 
         NarUnpacker.unpackNars(properties);
 
-        NarClassLoaders.load(properties);
+        NarClassLoaders.getInstance().init(properties.getFrameworkWorkingDirectory(), properties.getExtensionsWorkingDirectory());
 
-        ExtensionManager.discoverExtensions();
+        ExtensionManager.discoverExtensions(NarClassLoaders.getInstance().getExtensionClassLoaders());
 
         DocGenerator.generate(properties);
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/StandardFlowService.java
Patch:
@@ -913,7 +913,7 @@ private class SaveReportingTask implements Runnable {
         @Override
         public void run() {
             final ClassLoader currentCl = Thread.currentThread().getContextClassLoader();
-            final ClassLoader cl = NarClassLoaders.getFrameworkClassLoader();
+            final ClassLoader cl = NarClassLoaders.getInstance().getFrameworkClassLoader();
             Thread.currentThread().setContextClassLoader(cl);
             try {
                 //Hang onto the SaveHolder here rather than setting it to null because if the save fails we will try again

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/StandardFlowSerializer.java
Patch:
@@ -68,6 +68,7 @@
  * NOT THREAD-SAFE.
  */
 public class StandardFlowSerializer implements FlowSerializer {
+
     private static final String MAX_ENCODING_VERSION = "1.0";
 
     private final StringEncryptor encryptor;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/service/StandardControllerServiceProviderTest.java
Patch:
@@ -38,8 +38,8 @@ public class StandardControllerServiceProviderTest {
     public static void setupSuite() throws Exception {
         System.setProperty(NiFiProperties.PROPERTIES_FILE_PATH, StandardFlowServiceTest.class.getResource("/conf/nifi.properties").getFile());
         NiFiProperties properties = NiFiProperties.getInstance();
-        NarClassLoaders.load(properties);
-        ExtensionManager.discoverExtensions();
+        NarClassLoaders.getInstance().init(properties.getFrameworkWorkingDirectory(), properties.getExtensionsWorkingDirectory());
+        ExtensionManager.discoverExtensions(NarClassLoaders.getInstance().getExtensionClassLoaders());
     }
 
     @Before

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-nar-utils/src/main/java/org/apache/nifi/nar/ExtensionManager.java
Patch:
@@ -68,8 +68,9 @@ public class ExtensionManager {
 
     /**
      * Loads all FlowFileProcessor, FlowFileComparator, ReportingTask class types that can be found on the bootstrap classloader and by creating classloaders for all NARs found within the classpath.
+     * @param extensionLoaders the loaders to scan through in search of extensions
      */
-    public static void discoverExtensions() {
+    public static void discoverExtensions(final Set<ClassLoader> extensionLoaders) {
         final ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();
 
         // get the current context class loader
@@ -79,7 +80,7 @@ public static void discoverExtensions() {
         loadExtensions(systemClassLoader);
 
         // consider each nar class loader
-        for (final ClassLoader ncl : NarClassLoaders.getExtensionClassLoaders()) {
+        for (final ClassLoader ncl : extensionLoaders) {
 
             // Must set the context class loader to the nar classloader itself
             // so that static initialization techniques that depend on the context class loader will work properly

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-runtime/src/main/java/org/apache/nifi/NiFi.java
Patch:
@@ -108,16 +108,16 @@ public void run() {
         final ExtensionMapping extensionMapping = NarUnpacker.unpackNars(properties);
 
         // load the extensions classloaders
-        NarClassLoaders.load(properties);
+        NarClassLoaders.getInstance().init(properties.getFrameworkWorkingDirectory(), properties.getExtensionsWorkingDirectory());
 
         // load the framework classloader
-        final ClassLoader frameworkClassLoader = NarClassLoaders.getFrameworkClassLoader();
+        final ClassLoader frameworkClassLoader = NarClassLoaders.getInstance().getFrameworkClassLoader();
         if (frameworkClassLoader == null) {
             throw new IllegalStateException("Unable to find the framework NAR ClassLoader.");
         }
 
         // discover the extensions
-        ExtensionManager.discoverExtensions();
+        ExtensionManager.discoverExtensions(NarClassLoaders.getInstance().getExtensionClassLoaders());
         ExtensionManager.logClassLoaderMapping();
 
         DocGenerator.generate(properties);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-jetty/src/main/java/org/apache/nifi/web/server/JettyServer.java
Patch:
@@ -238,7 +238,7 @@ private void loadWars(final Set<File> narWorkingDirectories) {
                     String warContextPath = String.format("/%s", warName);
 
                     // attempt to locate the nar class loader for this war
-                    ClassLoader narClassLoaderForWar = NarClassLoaders.getExtensionClassLoader(warToNarWorkingDirectoryLookup.get(war));
+                    ClassLoader narClassLoaderForWar = NarClassLoaders.getInstance().getExtensionClassLoader(warToNarWorkingDirectoryLookup.get(war));
 
                     // this should never be null
                     if (narClassLoaderForWar == null) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/integration/accesscontrol/AccessControlHelper.java
Patch:
@@ -76,8 +76,8 @@ public AccessControlHelper(final String flowXmlPath, final String overrideAuthor
         }
 
         // load extensions
-        NarClassLoaders.load(props);
-        ExtensionManager.discoverExtensions();
+        NarClassLoaders.getInstance().init(props.getFrameworkWorkingDirectory(), props.getExtensionsWorkingDirectory());
+        ExtensionManager.discoverExtensions(NarClassLoaders.getInstance().getExtensionClassLoaders());
 
         // start the server
         server = new NiFiTestServer("src/main/webapp", CONTEXT_PATH);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/integration/accesscontrol/ITAccessTokenEndpoint.java
Patch:
@@ -71,8 +71,8 @@ public static void setup() throws Exception {
         FileUtils.deleteDirectory(props.getDatabaseRepositoryPath().toFile());
 
         // load extensions
-        NarClassLoaders.load(props);
-        ExtensionManager.discoverExtensions();
+        NarClassLoaders.getInstance().init(props.getFrameworkWorkingDirectory(), props.getExtensionsWorkingDirectory());
+        ExtensionManager.discoverExtensions(NarClassLoaders.getInstance().getExtensionClassLoaders());
 
         // start the server
         SERVER = new NiFiTestServer("src/main/webapp", CONTEXT_PATH);

File: nifi-commons/nifi-utils/src/main/java/org/apache/nifi/util/TypeOneUUIDGenerator.java
Patch:
@@ -49,11 +49,11 @@ public final static UUID generateId(long currentTime, int lsbInt) {
         long time;
 
         synchronized (lock) {
-            if (currentTime > lastTime) {
+            if (currentTime == lastTime) {
+                ++clockSequence;
+            } else {
                 lastTime = currentTime;
                 clockSequence = 0;
-            } else {
-                ++clockSequence;
             }
         }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiServiceFacade.java
Patch:
@@ -1402,7 +1402,7 @@ public TemplateDTO createTemplate(final String name, final String description, f
         templateDTO.setName(name);
         templateDTO.setDescription(description);
         templateDTO.setTimestamp(new Date());
-        templateDTO.setSnippet(snippetUtils.populateFlowSnippet(snippet, true, true));
+        templateDTO.setSnippet(snippetUtils.populateFlowSnippet(snippet, true, true, true));
         templateDTO.setEncodingVersion(TemplateDTO.MAX_ENCODING_VERSION);
 
         // set the id based on the specified seed

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ApplicationResource.java
Patch:
@@ -205,7 +205,7 @@ protected String generateUuid() {
         if (seed.isPresent()) {
             try {
                 UUID seedId = UUID.fromString(seed.get());
-                uuid = TypeOneUUIDGenerator.generateId(seedId.getMostSignificantBits(), Math.abs(seed.get().hashCode()));
+                uuid = new UUID(seedId.getMostSignificantBits(), Math.abs(seed.get().hashCode()));
             } catch (Exception e) {
                 logger.warn("Provided 'seed' does not represent UUID. Will not be able to extract most significant bits for ID generation.");
                 uuid = UUID.nameUUIDFromBytes(seed.get().getBytes(StandardCharsets.UTF_8));

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardSnippetDAO.java
Patch:
@@ -79,13 +79,13 @@ public FlowSnippetDTO copySnippet(final String groupId, final String snippetId,
             }
 
             // generate the snippet contents
-            FlowSnippetDTO snippetContents = snippetUtils.populateFlowSnippet(existingSnippet, true, false);
+            FlowSnippetDTO snippetContents = snippetUtils.populateFlowSnippet(existingSnippet, true, false, false);
 
             // resolve sensitive properties
             lookupSensitiveProperties(snippetContents);
 
             // copy snippet
-            snippetContents = snippetUtils.copy(snippetContents, processGroup, idGenerationSeed);
+            snippetContents = snippetUtils.copy(snippetContents, processGroup, idGenerationSeed, true);
 
             // move the snippet if necessary
             if (originX != null && originY != null) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardTemplateDAO.java
Patch:
@@ -89,7 +89,7 @@ public FlowSnippetDTO instantiateTemplate(String groupId, Double originX, Double
         try {
             // copy the template which pre-processes all ids
             TemplateDTO templateDetails = template.getDetails();
-            FlowSnippetDTO snippet = snippetUtils.copy(templateDetails.getSnippet(), group, idGenerationSeed);
+            FlowSnippetDTO snippet = snippetUtils.copy(templateDetails.getSnippet(), group, idGenerationSeed, false);
 
             // calculate scaling factors based on the template encoding version
             // attempt to parse the encoding version

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ControllerResource.java
Patch:
@@ -646,9 +646,7 @@ public Response deleteHistory(
             throw new IllegalArgumentException("The end date must be specified.");
         }
 
-        if (isReplicateRequest()) {
-            return replicate(HttpMethod.DELETE);
-        }
+        // Note: History requests are not replicated throughout the cluster and are instead handled by the nodes independently
 
         // handle expects request (usually from the cluster manager)
         final boolean validationPhase = isValidationPhase(httpServletRequest);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiContentAccess.java
Patch:
@@ -52,7 +52,7 @@ public class StandardNiFiContentAccess implements ContentAccess {
         .compile("/flowfile-queues/([a-f0-9\\-]{36})/flowfiles/([a-f0-9\\-]{36})/content.*");
 
     private static final Pattern PROVENANCE_CONTENT_URI_PATTERN = Pattern
-        .compile("/provenance/events/([0-9]+)/content/((?:input)|(?:output)).*");
+        .compile("/provenance-events/([0-9]+)/content/((?:input)|(?:output)).*");
 
     private NiFiProperties properties;
     private NiFiServiceFacade serviceFacade;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProvenanceEventResource.java
Patch:
@@ -305,6 +305,7 @@ public Response getProvenanceEvent(
 
         // get the provenance event
         final ProvenanceEventDTO event = serviceFacade.getProvenanceEvent(id.getLong());
+        event.setClusterNodeId(clusterNodeId);
 
         // create a response entity
         final ProvenanceEventEntity entity = new ProvenanceEventEntity();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/controller/ControllerFacade.java
Patch:
@@ -1147,12 +1147,12 @@ public ProvenanceEventDTO submitReplay(final Long eventId) {
                 throw new ResourceNotFoundException("Unable to find the specified event.");
             }
 
+            // authorize the replay
+            authorizeReplay(originalEvent.getComponentId(), originalEvent.getAttributes(), originalEvent.getSourceQueueIdentifier());
+
             // replay the flow file
             final ProvenanceEventRecord event = flowController.replayFlowFile(originalEvent, user);
 
-            // authorize the replay
-            authorizeReplay(event.getComponentId(), event.getAttributes(), event.getSourceQueueIdentifier());
-
             // convert the event record
             return createProvenanceEventDto(event);
         } catch (final IOException ioe) {

File: nifi-nar-bundles/nifi-ldap-iaa-providers-bundle/nifi-ldap-iaa-providers/src/main/java/org/apache/nifi/ldap/ReferralStrategy.java
Patch:
@@ -22,7 +22,7 @@
 public enum ReferralStrategy {
 
     FOLLOW("follow"),
-    INGORE("ignore"),
+    IGNORE("ignore"),
     THROW("throw");
 
     private final String value;

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/test/java/org/apache/nifi/processors/aws/s3/ITPutS3Object.java
Patch:
@@ -796,6 +796,7 @@ public void testMultipartLargerThanObjectMaximum() throws IOException {
         Assert.assertTrue(ff1.getSize() > S3_MAXIMUM_OBJECT_SIZE);
     }
 
+    @Ignore
     @Test
     public void testS3MultipartAgeoff() throws InterruptedException, IOException {
         final PutS3Object processor = new PutS3Object();

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/test/java/org/apache/nifi/processors/aws/sns/ITPutSNS.java
Patch:
@@ -39,6 +39,7 @@ public class ITPutSNS {
     @Test
     public void testPublish() throws IOException {
         final TestRunner runner = TestRunners.newTestRunner(new PutSNS());
+        runner.setValidateExpressionUsage(false);
         runner.setProperty(PutSNS.CREDENTIALS_FILE, CREDENTIALS_FILE);
         runner.setProperty(PutSNS.ARN, "arn:aws:sns:us-west-2:100515378163:test-topic-1");
         assertTrue(runner.setProperty("DynamicProperty", "hello!").isValid());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ApplicationResource.java
Patch:
@@ -697,7 +697,7 @@ boolean isConnectedToCluster() {
         return isClustered() && clusterCoordinator.isConnected();
     }
 
-    boolean isClustered () {
+    boolean isClustered() {
         return clusterCoordinator != null;
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ControllerResource.java
Patch:
@@ -416,7 +416,7 @@ public Response createControllerService(
         }
 
         if (isReplicateRequest()) {
-            return replicate(HttpMethod.GET);
+            return replicate(HttpMethod.POST, controllerServiceEntity);
         }
 
         // handle expects request (usually from the cluster manager)
@@ -437,7 +437,7 @@ public Response createControllerService(
         // create the controller service and generate the json
         final Revision revision = getRevision(controllerServiceEntity, controllerServiceEntity.getComponent().getId());
         final ControllerServiceEntity entity = serviceFacade.createControllerService(revision, null, controllerServiceEntity.getComponent());
-        controllerServiceResource.populateRemainingControllerServiceContent(entity.getComponent());
+        controllerServiceResource.populateRemainingControllerServiceEntityContent(entity);
 
         // build the response
         return clusterContext(generateCreatedResponse(URI.create(entity.getUri()), entity)).build();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ControllerServiceResource.java
Patch:
@@ -616,7 +616,7 @@ public Response updateControllerService(
             () -> {
                 // update the controller service
                 final ControllerServiceEntity entity = serviceFacade.updateControllerService(revision, requestControllerServiceDTO);
-                populateRemainingControllerServiceContent(entity.getComponent());
+                populateRemainingControllerServiceEntityContent(entity);
 
                 return clusterContext(generateOkResponse(entity)).build();
             }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java
Patch:
@@ -2125,7 +2125,7 @@ public Response createControllerService(
         // create the controller service and generate the json
         final Revision revision = getRevision(controllerServiceEntity, controllerServiceEntity.getComponent().getId());
         final ControllerServiceEntity entity = serviceFacade.createControllerService(revision, groupId, controllerServiceEntity.getComponent());
-        controllerServiceResource.populateRemainingControllerServiceContent(entity.getComponent());
+        controllerServiceResource.populateRemainingControllerServiceEntityContent(entity);
 
         // build the response
         return clusterContext(generateCreatedResponse(URI.create(entity.getUri()), entity)).build();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/AbstractNodeProtocolSender.java
Patch:
@@ -95,7 +95,7 @@ public void heartbeat(final HeartbeatMessage msg, final String address) throws P
 
     private String getCoordinatorDN(Socket socket) {
         try {
-            return CertificateUtils.extractClientDNFromSSLSocket(socket);
+            return CertificateUtils.extractPeerDNFromSSLSocket(socket);
         } catch (CertificateException e) {
             throw new ProtocolException(e);
         }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/impl/SocketProtocolListener.java
Patch:
@@ -187,7 +187,7 @@ public void dispatchRequest(final Socket socket) {
 
     private String getRequestorDN(Socket socket) {
         try {
-            return CertificateUtils.extractClientDNFromSSLSocket(socket);
+            return CertificateUtils.extractPeerDNFromSSLSocket(socket);
         } catch (CertificateException e) {
             throw new ProtocolException(e);
         }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/NiFiAuthenticationFilter.java
Patch:
@@ -48,8 +48,9 @@ public abstract class NiFiAuthenticationFilter extends GenericFilterBean {
 
     @Override
     public void doFilter(final ServletRequest request, final ServletResponse response, final FilterChain chain) throws IOException, ServletException {
+        final Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
         if (log.isDebugEnabled()) {
-            log.debug("Checking secure context token: " + SecurityContextHolder.getContext().getAuthentication());
+            log.debug("Checking secure context token: " + authentication);
         }
 
         if (requiresAuthentication((HttpServletRequest) request)) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/service/StandardControllerServiceNode.java
Patch:
@@ -22,8 +22,8 @@
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.List;
-import java.util.Set;
 import java.util.Map.Entry;
+import java.util.Set;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
@@ -170,7 +170,7 @@ public void addReference(final ConfiguredComponent referencingComponent) {
 
     @Override
     public List<ControllerServiceNode> getRequiredControllerServices() {
-        List<ControllerServiceNode> requiredServices = new ArrayList<>();
+        Set<ControllerServiceNode> requiredServices = new HashSet<>();
         for (Entry<PropertyDescriptor, String> pEntry : this.getProperties().entrySet()) {
             PropertyDescriptor descriptor = pEntry.getKey();
             if (descriptor.getControllerServiceDefinition() != null && descriptor.isRequired()) {
@@ -179,7 +179,7 @@ public List<ControllerServiceNode> getRequiredControllerServices() {
                 requiredServices.addAll(rNode.getRequiredControllerServices());
             }
         }
-        return requiredServices;
+        return new ArrayList<>(requiredServices);
     }
 
 

File: nifi-external/nifi-storm-spout/src/main/java/org/apache/nifi/storm/NiFiDataPacketBuilder.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.storm;
 
-import backtype.storm.tuple.Tuple;
+import org.apache.storm.tuple.Tuple;
 
 /**
  * Converts a Tuple into a NiFiDataPacket.

File: nifi-external/nifi-storm-spout/src/test/java/org/apache/nifi/storm/MockTupleHelpers.java
Patch:
@@ -17,8 +17,8 @@
  */
 package org.apache.nifi.storm;
 
-import backtype.storm.Constants;
-import backtype.storm.tuple.Tuple;
+import org.apache.storm.Constants;
+import org.apache.storm.tuple.Tuple;
 import org.mockito.Mockito;
 
 public final class MockTupleHelpers {

File: nifi-external/nifi-storm-spout/src/test/java/org/apache/nifi/storm/TestNiFiBolt.java
Patch:
@@ -16,13 +16,13 @@
  */
 package org.apache.nifi.storm;
 
-import backtype.storm.task.OutputCollector;
-import backtype.storm.task.TopologyContext;
-import backtype.storm.tuple.Tuple;
 import org.apache.nifi.remote.Transaction;
 import org.apache.nifi.remote.TransferDirection;
 import org.apache.nifi.remote.client.SiteToSiteClient;
 import org.apache.nifi.remote.client.SiteToSiteClientConfig;
+import org.apache.storm.task.OutputCollector;
+import org.apache.storm.task.TopologyContext;
+import org.apache.storm.tuple.Tuple;
 import org.junit.Before;
 import org.junit.Test;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/SystemDiagnosticsResource.java
Patch:
@@ -122,7 +122,7 @@ public Response getSystemDiagnostics(
             throw new IllegalArgumentException("Nodewise requests cannot be directed at a specific node.");
         }
 
-        if (isConnectedToCluster()) {
+        if (isReplicateRequest()) {
             // determine where this request should be sent
             if (clusterNodeId == null) {
                 final NodeResponse nodeResponse = getRequestReplicator().replicate(HttpMethod.GET, getAbsolutePath(), getRequestParameters(true), getHeaders()).awaitMergedResponse();

File: nifi-api/src/main/java/org/apache/nifi/action/Action.java
Patch:
@@ -33,8 +33,6 @@ public interface Action extends Serializable {
 
     String getUserIdentity();
 
-    String getUserName();
-
     String getSourceId();
 
     String getSourceName();

File: nifi-api/src/main/java/org/apache/nifi/authorization/Authorizer.java
Patch:
@@ -30,7 +30,7 @@ public interface Authorizer {
      *
      * @param   request The authorization request
      * @return  the authorization result
-     * @throws  AuthorizationAccessException if unable to access the authorities
+     * @throws  AuthorizationAccessException if unable to access the policies
      */
     AuthorizationResult authorize(AuthorizationRequest request) throws AuthorizationAccessException;
 

File: nifi-commons/nifi-properties/src/main/java/org/apache/nifi/util/NiFiProperties.java
Patch:
@@ -518,7 +518,7 @@ public File getAuthorizerConfigurationFile() {
     }
 
     /**
-     * @return the user authorities file
+     * @return the user login identity provider file
      */
     public File getLoginIdentityProviderConfigurationFile() {
         final String value = getProperty(LOGIN_IDENTITY_PROVIDER_CONFIGURATION_FILE);
@@ -774,7 +774,6 @@ public boolean isKerberosServiceSupportEnabled() {
      * Returns true if client certificates are required for REST API. Determined if the following conditions are all true:
      *
      * - login identity provider is not populated
-     * - anonymous authorities is empty
      * - Kerberos service support is not enabled
      *
      * @return true if client certificates are required for access to the REST API

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/TemplateEntity.java
Patch:
@@ -16,14 +16,15 @@
  */
 package org.apache.nifi.web.api.entity;
 
-import javax.xml.bind.annotation.XmlRootElement;
 import org.apache.nifi.web.api.dto.TemplateDTO;
 
+import javax.xml.bind.annotation.XmlRootElement;
+
 /**
  * A serialized representation of this class can be placed in the entity body of a request or response to or from the API. This particular entity holds a reference to a TemplateDTO.
  */
 @XmlRootElement(name = "templateEntity")
-public class TemplateEntity extends Entity {
+public class TemplateEntity extends ComponentEntity {
 
     private TemplateDTO template;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/main/java/org/apache/nifi/authorization/FileAuthorizer.java
Patch:
@@ -69,7 +69,7 @@
 import java.util.zip.GZIPInputStream;
 
 /**
- * Provides identity checks and grants authorities.
+ * Provides authorizes requests to resources using policies persisted in a file.
  */
 public class FileAuthorizer extends AbstractPolicyBasedAuthorizer {
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-authorization/src/main/java/org/apache/nifi/authorization/user/NiFiUserUtils.java
Patch:
@@ -47,13 +47,13 @@ public static NiFiUser getNiFiUser() {
         return user;
     }
 
-    public static String getNiFiUserName() {
+    public static String getNiFiUserIdentity() {
         // get the nifi user to extract the username
         NiFiUser user = NiFiUserUtils.getNiFiUser();
         if (user == null) {
             return "unknown";
         } else {
-            return user.getUserName();
+            return user.getIdentity();
         }
     }
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/audit/ComponentStateAuditor.java
Patch:
@@ -73,7 +73,6 @@ public StateMap clearProcessorStateAdvice(ProceedingJoinPoint proceedingJoinPoin
             // create the clear action
             FlowChangeAction configAction = new FlowChangeAction();
             configAction.setUserIdentity(user.getIdentity());
-            configAction.setUserName(user.getUserName());
             configAction.setOperation(Operation.ClearState);
             configAction.setTimestamp(new Date());
             configAction.setSourceId(processor.getIdentifier());
@@ -120,7 +119,6 @@ public StateMap clearControllerServiceStateAdvice(ProceedingJoinPoint proceeding
             // create the clear action
             FlowChangeAction configAction = new FlowChangeAction();
             configAction.setUserIdentity(user.getIdentity());
-            configAction.setUserName(user.getUserName());
             configAction.setOperation(Operation.ClearState);
             configAction.setTimestamp(new Date());
             configAction.setSourceId(controllerService.getIdentifier());
@@ -167,7 +165,6 @@ public StateMap clearReportingTaskStateAdvice(ProceedingJoinPoint proceedingJoin
             // create the clear action
             FlowChangeAction configAction = new FlowChangeAction();
             configAction.setUserIdentity(user.getIdentity());
-            configAction.setUserName(user.getUserName());
             configAction.setOperation(Operation.ClearState);
             configAction.setTimestamp(new Date());
             configAction.setSourceId(reportingTask.getIdentifier());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/audit/ControllerAuditor.java
Patch:
@@ -80,7 +80,6 @@ public void updateControllerTimerDrivenThreadsAdvice(ProceedingJoinPoint proceed
                 // create the config action
                 FlowChangeAction configAction = new FlowChangeAction();
                 configAction.setUserIdentity(user.getIdentity());
-                configAction.setUserName(user.getUserName());
                 configAction.setOperation(Operation.Configure);
                 configAction.setTimestamp(new Date());
                 configAction.setSourceId("Flow Controller");
@@ -133,7 +132,6 @@ public void updateControllerEventDrivenThreadsAdvice(ProceedingJoinPoint proceed
                 // create the config action
                 FlowChangeAction configAction = new FlowChangeAction();
                 configAction.setUserIdentity(user.getIdentity());
-                configAction.setUserName(user.getUserName());
                 configAction.setOperation(Operation.Configure);
                 configAction.setTimestamp(new Date());
                 configAction.setSourceId("Flow Controller");

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/audit/PortAuditor.java
Patch:
@@ -204,7 +204,6 @@ public Port updatePortAdvice(ProceedingJoinPoint proceedingJoinPoint, PortDTO po
                     // create the port action for updating the name
                     FlowChangeAction portAction = new FlowChangeAction();
                     portAction.setUserIdentity(user.getIdentity());
-                    portAction.setUserName(user.getUserName());
                     portAction.setOperation(Operation.Configure);
                     portAction.setTimestamp(timestamp);
                     portAction.setSourceId(updatedPort.getIdentifier());
@@ -224,7 +223,6 @@ public Port updatePortAdvice(ProceedingJoinPoint proceedingJoinPoint, PortDTO po
                 // create a processor action
                 FlowChangeAction processorAction = new FlowChangeAction();
                 processorAction.setUserIdentity(user.getIdentity());
-                processorAction.setUserName(user.getUserName());
                 processorAction.setTimestamp(new Date());
                 processorAction.setSourceId(updatedPort.getIdentifier());
                 processorAction.setSourceName(updatedPort.getName());
@@ -321,7 +319,6 @@ public Action generateAuditRecord(Port port, Operation operation, ActionDetails
             // create the port action for adding this processor
             action = new FlowChangeAction();
             action.setUserIdentity(user.getIdentity());
-            action.setUserName(user.getUserName());
             action.setOperation(operation);
             action.setTimestamp(new Date());
             action.setSourceId(port.getIdentifier());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/audit/ProcessGroupAuditor.java
Patch:
@@ -143,7 +143,6 @@ public ProcessGroup updateProcessGroupAdvice(ProceedingJoinPoint proceedingJoinP
                     // create the port action for updating the name
                     FlowChangeAction processGroupAction = new FlowChangeAction();
                     processGroupAction.setUserIdentity(user.getIdentity());
-                    processGroupAction.setUserName(user.getUserName());
                     processGroupAction.setOperation(operation);
                     processGroupAction.setTimestamp(timestamp);
                     processGroupAction.setSourceId(updatedProcessGroup.getIdentifier());
@@ -188,7 +187,6 @@ public void scheduleComponentsAdvice(ProceedingJoinPoint proceedingJoinPoint, St
         // if the user was starting/stopping this process group
         FlowChangeAction action = new FlowChangeAction();
         action.setUserIdentity(user.getIdentity());
-        action.setUserName(user.getUserName());
         action.setSourceId(processGroup.getIdentifier());
         action.setSourceName(processGroup.getName());
         action.setSourceType(Component.ProcessGroup);
@@ -264,7 +262,6 @@ public Action generateAuditRecord(ProcessGroup processGroup, Operation operation
             // create the process group action for adding this process group
             action = new FlowChangeAction();
             action.setUserIdentity(user.getIdentity());
-            action.setUserName(user.getUserName());
             action.setOperation(operation);
             action.setTimestamp(new Date());
             action.setSourceId(processGroup.getIdentifier());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/audit/RemoteProcessGroupAuditor.java
Patch:
@@ -247,7 +247,6 @@ public RemoteProcessGroup auditUpdateProcessGroupConfiguration(
                     // create the port action for updating the name
                     FlowChangeAction remoteProcessGroupAction = new FlowChangeAction();
                     remoteProcessGroupAction.setUserIdentity(user.getIdentity());
-                    remoteProcessGroupAction.setUserName(user.getUserName());
                     remoteProcessGroupAction.setOperation(Operation.Configure);
                     remoteProcessGroupAction.setTimestamp(timestamp);
                     remoteProcessGroupAction.setSourceId(updatedRemoteProcessGroup.getIdentifier());
@@ -268,7 +267,6 @@ public RemoteProcessGroup auditUpdateProcessGroupConfiguration(
                 // create a processor action
                 FlowChangeAction remoteProcessGroupAction = new FlowChangeAction();
                 remoteProcessGroupAction.setUserIdentity(user.getIdentity());
-                remoteProcessGroupAction.setUserName(user.getUserName());
                 remoteProcessGroupAction.setTimestamp(new Date());
                 remoteProcessGroupAction.setSourceId(updatedRemoteProcessGroup.getIdentifier());
                 remoteProcessGroupAction.setSourceName(updatedRemoteProcessGroup.getName());
@@ -356,7 +354,6 @@ public Action generateAuditRecord(RemoteProcessGroup remoteProcessGroup, Operati
             // create the remote process group action
             action = new FlowChangeAction();
             action.setUserIdentity(user.getIdentity());
-            action.setUserName(user.getUserName());
             action.setOperation(operation);
             action.setTimestamp(new Date());
             action.setSourceId(remoteProcessGroup.getIdentifier());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/audit/SnippetAuditor.java
Patch:
@@ -232,7 +232,6 @@ private FlowChangeAction generateAuditRecord(String id, String name, Component t
             // create the action for adding this funnel
             action = new FlowChangeAction();
             action.setUserIdentity(user.getIdentity());
-            action.setUserName(user.getUserName());
             action.setOperation(operation);
             action.setTimestamp(timestamp);
             action.setSourceId(id);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardConnectionDAO.java
Patch:
@@ -604,7 +604,7 @@ public DownloadableContent getContent(String id, String flowFileUuid, String req
                         .accessAttempt(false)
                         .action(RequestAction.WRITE)
                         .resource(connection.getResource())
-                        .eventAttributes(attributes)
+                        .resourceContext(attributes)
                         .build();
 
                 // perform the authorization

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-optimistic-locking/src/main/java/org/apache/nifi/web/revision/NaiveRevisionManager.java
Patch:
@@ -217,7 +217,7 @@ public <T> T deleteRevision(final RevisionClaim claim, final NiFiUser user, fina
 
                 for (final Revision revision : revisionList) {
                     final RevisionLock revisionLock = getRevisionLock(revision);
-                    revisionLock.unlock(revision, revision, user.getUserName());
+                    revisionLock.unlock(revision, revision, user.getIdentity());
                     logger.debug("Relinquished lock for {}", revision);
                 }
 
@@ -300,7 +300,7 @@ public <T> RevisionUpdate<T> updateRevision(final RevisionClaim originalClaim, f
 
                 for (final Revision revision : revisionList) {
                     final Revision updatedRevision = updatedRevisions.get(revision);
-                    getRevisionLock(revision).unlock(revision, updatedRevision, user.getUserName());
+                    getRevisionLock(revision).unlock(revision, updatedRevision, user.getIdentity());
 
                     if (updatedRevision.getVersion() != revision.getVersion()) {
                         logger.debug("Unlocked Revision {} and updated associated Version to {}", revision, updatedRevision.getVersion());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/x509/X509AuthenticationProvider.java
Patch:
@@ -65,7 +65,7 @@ public Authentication authenticate(Authentication authentication) throws Authent
         }
 
         if (StringUtils.isBlank(request.getProxiedEntitiesChain())) {
-            return new NiFiAuthenticationToken(new NiFiUserDetails(new StandardNiFiUser(authenticationResponse.getIdentity(), authenticationResponse.getUsername(), null)));
+            return new NiFiAuthenticationToken(new NiFiUserDetails(new StandardNiFiUser(authenticationResponse.getIdentity())));
         } else {
             // build the entire proxy chain if applicable - <end-user><proxy1><proxy2>
             final List<String> proxyChain = new ArrayList<>(ProxiedEntitiesUtils.tokenizeProxiedEntitiesChain(request.getProxiedEntitiesChain()));

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ComponentEntity.java
Patch:
@@ -24,6 +24,7 @@
 
 import javax.xml.bind.annotation.XmlRootElement;
 import java.util.List;
+import java.util.Objects;
 
 /**
  * A base type for request/response entities.
@@ -117,7 +118,7 @@ public void setBulletins(List<BulletinDTO> bulletins) {
 
     @Override
     public int hashCode() {
-        return id.hashCode();
+        return Objects.hash(id);
     }
 
     @Override
@@ -134,6 +135,6 @@ public boolean equals(Object obj) {
             return false;
         }
 
-        return id.equals(((ComponentEntity) obj).getId());
+        return Objects.equals(id, ((ComponentEntity)obj).id);
     }
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/AccessPolicyResource.java
Patch:
@@ -188,7 +188,7 @@ public Response createAccessPolicy(
         }
 
         if (accessPolicyEntity.getRevision() == null || (accessPolicyEntity.getRevision().getVersion() == null || accessPolicyEntity.getRevision().getVersion() != 0)) {
-            throw new IllegalArgumentException("A revision of 0 must be specified when creating a new Processor.");
+            throw new IllegalArgumentException("A revision of 0 must be specified when creating a new Policy.");
         }
 
         if (accessPolicyEntity.getComponent().getId() != null) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/scheduling/TestProcessorLifecycle.java
Patch:
@@ -91,9 +91,9 @@ public void before() throws Exception {
 
     @After
     public void after() throws Exception {
+        fc.shutdown(true);
         FileUtils.deleteDirectory(new File("./target/test-repo"));
         FileUtils.deleteDirectory(new File("./target/content_repository"));
-        fc.shutdown(true);
     }
 
     @Test

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-reporting-tasks/src/test/java/org/apache/nifi/controller/MonitorMemoryTest.java
Patch:
@@ -51,9 +51,9 @@ public void before() throws Exception {
 
     @After
     public void after() throws Exception {
+        fc.shutdown(true);
         FileUtils.deleteDirectory(new File("./target/test-repo"));
         FileUtils.deleteDirectory(new File("./target/content_repository"));
-        fc.shutdown(true);
     }
 
     @Test(expected = IllegalStateException.class)

File: nifi-api/src/main/java/org/apache/nifi/authorization/Group.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * A group that users can belong to.
  */
-public class Group {
+public class Group { // TODO rename to UserGroup
 
     private final String identifier;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/integration/accesscontrol/AdminAccessControlTest.java
Patch:
@@ -44,7 +44,6 @@
 import org.apache.nifi.web.api.entity.ProcessorEntity;
 import org.apache.nifi.web.api.entity.ProcessorTypesEntity;
 import org.apache.nifi.web.api.entity.ProcessorsEntity;
-import org.apache.nifi.web.api.entity.UserEntity;
 import org.apache.nifi.web.api.entity.UsersEntity;
 import org.junit.AfterClass;
 import org.junit.Assert;
@@ -993,7 +992,7 @@ public void testUserUpdate() throws Exception {
 
         // ensure the request succeeded
         Assert.assertEquals(200, putResponse.getStatus());
-        Assert.assertEquals("ACTIVE", putResponse.getEntity(UserEntity.class).getUser().getStatus());
+        Assert.assertEquals("ACTIVE", null);  // FIXME test should fail, needs to be updated to test updating user by changing the groups the user is in and the name of the user
     }
 
     @AfterClass

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiServiceFacade.java
Patch:
@@ -2664,7 +2664,8 @@ public PropertyDescriptorDTO getControllerServicePropertyDescriptor(final String
                 descriptor = new PropertyDescriptor.Builder().name(property).addValidator(Validator.INVALID).dynamic(true).build();
             }
 
-            return dtoFactory.createPropertyDescriptorDto(descriptor, controllerService.getProcessGroup().getIdentifier());
+            final String groupId = controllerService.getProcessGroup() == null ? null : controllerService.getProcessGroup().getIdentifier();
+            return dtoFactory.createPropertyDescriptorDto(descriptor, groupId);
         });
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/node/NodeClusterCoordinator.java
Patch:
@@ -278,7 +278,7 @@ public boolean isBlockedByFirewall(final String hostname) {
 
     @Override
     public void reportEvent(final NodeIdentifier nodeId, final Severity severity, final String event) {
-        eventReporter.reportEvent(severity, EVENT_CATEGORY, "Event Reported for " + nodeId.toString() + " -- " + event);
+        eventReporter.reportEvent(severity, EVENT_CATEGORY, nodeId == null ? event : "Event Reported for " + nodeId + " -- " + event);
         if (nodeId != null) {
             addNodeEvent(nodeId, severity, event);
         }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/FlowController.java
Patch:
@@ -1523,6 +1523,8 @@ public void instantiateSnippet(final ProcessGroup group, final FlowSnippetDTO dt
                 serviceNode.setAnnotationData(controllerServiceDTO.getAnnotationData());
                 serviceNode.setComments(controllerServiceDTO.getComments());
                 serviceNode.setName(controllerServiceDTO.getName());
+
+                group.addControllerService(serviceNode);
             }
 
             // configure controller services. We do this after creating all of them in case 1 service
@@ -1717,6 +1719,7 @@ public void instantiateSnippet(final ProcessGroup group, final FlowSnippetDTO dt
                 childTemplateDTO.setProcessors(contents.getProcessors());
                 childTemplateDTO.setFunnels(contents.getFunnels());
                 childTemplateDTO.setRemoteProcessGroups(contents.getRemoteProcessGroups());
+                childTemplateDTO.setControllerServices(contents.getControllerServices());
                 instantiateSnippet(childGroup, childTemplateDTO);
             }
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/JmsConsumer.java
Patch:
@@ -197,7 +197,7 @@ public void process(final OutputStream rawOut) throws IOException {
                             final byte[] messageBody = JmsFactory.createByteArray(message);
                             out.write(messageBody);
                         } catch (final JMSException e) {
-                            throw new ProcessException("Failed to receive JMS Message due to {}", e);
+                            throw new ProcessException("Failed to receive JMS Message due to " + e.getMessage(), e);
                         }
                     }
                 });

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/EncryptContent.java
Patch:
@@ -511,7 +511,6 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
         } catch (final ProcessException e) {
             logger.error("Cannot {}crypt {} - ", new Object[]{encrypt ? "en" : "de", flowFile, e});
             session.transfer(flowFile, REL_FAILURE);
-            return;
         }
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ControllerResource.java
Patch:
@@ -33,7 +33,6 @@
 import org.apache.nifi.authorization.resource.ResourceFactory;
 import org.apache.nifi.authorization.user.NiFiUser;
 import org.apache.nifi.authorization.user.NiFiUserUtils;
-import org.apache.nifi.cluster.coordination.ClusterCoordinator;
 import org.apache.nifi.cluster.coordination.http.replication.RequestReplicator;
 import org.apache.nifi.cluster.manager.NodeResponse;
 import org.apache.nifi.cluster.manager.exception.UnknownNodeException;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/util/SnippetUtils.java
Patch:
@@ -596,7 +596,7 @@ private String generateId(final String currentId, final String seed) {
         if (seed == null) {
             return UUID.randomUUID().toString();
         } else {
-            return UUID.nameUUIDFromBytes(seed.getBytes(StandardCharsets.UTF_8)).toString();
+            return UUID.nameUUIDFromBytes((currentId + seed).getBytes(StandardCharsets.UTF_8)).toString();
         }
     }
 

File: nifi-nar-bundles/nifi-provenance-repository-bundle/nifi-persistent-provenance-repository/src/test/java/org/apache/nifi/provenance/TestPersistentProvenanceRepository.java
Patch:
@@ -1225,6 +1225,7 @@ public void testTruncateAttributes() throws IOException, InterruptedException {
 
         final Map<String, String> attributes = new HashMap<>();
         attributes.put("75chars", "123456789012345678901234567890123456789012345678901234567890123456789012345");
+        attributes.put("nullChar", null);
 
         final ProvenanceEventBuilder builder = new StandardProvenanceEventRecord.Builder();
         builder.setEventTime(System.currentTimeMillis());

File: nifi-commons/nifi-properties/src/main/java/org/apache/nifi/util/NiFiProperties.java
Patch:
@@ -186,7 +186,7 @@ public class NiFiProperties extends Properties {
     // defaults
     public static final String DEFAULT_TITLE = "NiFi";
     public static final Boolean DEFAULT_AUTO_RESUME_STATE = true;
-    public static final String DEFAULT_AUTHORITY_PROVIDER_CONFIGURATION_FILE = "conf/authority-providers.xml";
+    public static final String DEFAULT_AUTHORIZER_CONFIGURATION_FILE = "conf/authorizers.xml";
     public static final String DEFAULT_LOGIN_IDENTITY_PROVIDER_CONFIGURATION_FILE = "conf/login-identity-providers.xml";
     public static final String DEFAULT_USER_CREDENTIAL_CACHE_DURATION = "24 hours";
     public static final Integer DEFAULT_REMOTE_INPUT_PORT = null;
@@ -511,7 +511,7 @@ public File getRestoreDirectory() {
     public File getAuthorizerConfiguraitonFile() {
         final String value = getProperty(AUTHORIZER_CONFIGURATION_FILE);
         if (StringUtils.isBlank(value)) {
-            return new File(DEFAULT_AUTHORITY_PROVIDER_CONFIGURATION_FILE);
+            return new File(DEFAULT_AUTHORIZER_CONFIGURATION_FILE);
         } else {
             return new File(value);
         }

File: nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/ClientTransactionCompletion.java
Patch:
@@ -14,20 +14,20 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.remote.protocol.socket;
+package org.apache.nifi.remote;
 
 import java.util.concurrent.TimeUnit;
 
 import org.apache.nifi.remote.TransactionCompletion;
 
-public class SocketClientTransactionCompletion implements TransactionCompletion {
+public class ClientTransactionCompletion implements TransactionCompletion {
 
     private final boolean backoff;
     private final int dataPacketsTransferred;
     private final long bytesTransferred;
     private final long durationNanos;
 
-    public SocketClientTransactionCompletion(final boolean backoff, final int dataPacketsTransferred, final long bytesTransferred, final long durationNanos) {
+    public ClientTransactionCompletion(final boolean backoff, final int dataPacketsTransferred, final long bytesTransferred, final long durationNanos) {
         this.backoff = backoff;
         this.dataPacketsTransferred = dataPacketsTransferred;
         this.bytesTransferred = bytesTransferred;

File: nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/cluster/NodeInformationAdapter.java
Patch:
@@ -24,14 +24,16 @@ public class NodeInformationAdapter extends XmlAdapter<AdaptedNodeInformation, N
 
     @Override
     public NodeInformation unmarshal(final AdaptedNodeInformation adapted) throws Exception {
-        return new NodeInformation(adapted.getHostname(), adapted.getSiteToSitePort(), adapted.getApiPort(), adapted.isSiteToSiteSecure(), adapted.getTotalFlowFiles());
+        return new NodeInformation(adapted.getHostname(), adapted.getSiteToSitePort(), adapted.getSiteToSiteHttpApiPort(),
+                adapted.getApiPort(), adapted.isSiteToSiteSecure(), adapted.getTotalFlowFiles());
     }
 
     @Override
     public AdaptedNodeInformation marshal(final NodeInformation nodeInformation) throws Exception {
         final AdaptedNodeInformation adapted = new AdaptedNodeInformation();
         adapted.setHostname(nodeInformation.getSiteToSiteHostname());
         adapted.setSiteToSitePort(nodeInformation.getSiteToSitePort());
+        adapted.setSiteToSiteHttpApiPort(nodeInformation.getSiteToSiteHttpApiPort());
         adapted.setApiPort(nodeInformation.getAPIPort());
         adapted.setSiteToSiteSecure(nodeInformation.isSiteToSiteSecure());
         adapted.setTotalFlowFiles(nodeInformation.getTotalFlowFiles());

File: nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/protocol/HandshakeProperty.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.remote.protocol.socket;
+package org.apache.nifi.remote.protocol;
 
 /**
  * Enumeration of Properties that can be used for the Site-to-Site Socket

File: nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/protocol/Response.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.remote.protocol.socket;
+package org.apache.nifi.remote.protocol;
 
 import java.io.DataInputStream;
 import java.io.IOException;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/jaxb/message/ConnectionResponseAdapter.java
Patch:
@@ -32,6 +32,7 @@ public AdaptedConnectionResponse marshal(final ConnectionResponse cr) {
             aCr.setTryLaterSeconds(cr.getTryLaterSeconds());
             aCr.setRejectionReason(cr.getRejectionReason());
             aCr.setManagerRemoteInputPort(cr.getManagerRemoteInputPort());
+            aCr.setManagerRemoteInputHttpPort(cr.getManagerRemoteInputHttpPort());
             aCr.setManagerRemoteCommsSecure(cr.isManagerRemoteCommsSecure());
             aCr.setInstanceId(cr.getInstanceId());
             aCr.setNodeConnectionStatuses(cr.getNodeConnectionStatuses());
@@ -48,7 +49,7 @@ public ConnectionResponse unmarshal(final AdaptedConnectionResponse aCr) {
             return ConnectionResponse.createRejectionResponse(aCr.getRejectionReason());
         } else {
             return new ConnectionResponse(aCr.getNodeIdentifier(), aCr.getDataFlow(),
-                aCr.getManagerRemoteInputPort(), aCr.isManagerRemoteCommsSecure(),
+                aCr.getManagerRemoteInputPort(), aCr.getManagerRemoteInputHttpPort(), aCr.isManagerRemoteCommsSecure(),
                 aCr.getInstanceId(), aCr.getNodeConnectionStatuses(), aCr.getComponentRevisions());
         }
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/jaxb/message/NodeIdentifierAdapter.java
Patch:
@@ -36,6 +36,7 @@ public AdaptedNodeIdentifier marshal(final NodeIdentifier ni) {
             aNi.setSocketPort(ni.getSocketPort());
             aNi.setSiteToSiteAddress(ni.getSiteToSiteAddress());
             aNi.setSiteToSitePort(ni.getSiteToSitePort());
+            aNi.setSiteToSiteHttpApiPort(ni.getSiteToSiteHttpApiPort());
             aNi.setSiteToSiteSecure(ni.isSiteToSiteSecure());
             return aNi;
         }
@@ -47,7 +48,7 @@ public NodeIdentifier unmarshal(final AdaptedNodeIdentifier aNi) {
             return null;
         } else {
             return new NodeIdentifier(aNi.getId(), aNi.getApiAddress(), aNi.getApiPort(), aNi.getSocketAddress(), aNi.getSocketPort(),
-                aNi.getSiteToSiteAddress(), aNi.getSiteToSitePort(), aNi.isSiteToSiteSecure());
+                aNi.getSiteToSiteAddress(), aNi.getSiteToSitePort(),aNi.getSiteToSiteHttpApiPort(), aNi.isSiteToSiteSecure());
         }
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/test/java/org/apache/nifi/cluster/protocol/jaxb/message/TestJaxbProtocolUtils.java
Patch:
@@ -45,11 +45,11 @@ public void testRoundTripConnectionResponse() throws JAXBException {
         final ByteArrayOutputStream baos = new ByteArrayOutputStream();
 
         final ConnectionResponseMessage msg = new ConnectionResponseMessage();
-        final NodeIdentifier nodeId = new NodeIdentifier("id", "localhost", 8000, "localhost", 8001, "localhost", 8002, true);
+        final NodeIdentifier nodeId = new NodeIdentifier("id", "localhost", 8000, "localhost", 8001, "localhost", 8002, 8003, true);
         final DataFlow dataFlow = new StandardDataFlow(new byte[0], new byte[0]);
         final List<NodeConnectionStatus> nodeStatuses = Collections.singletonList(new NodeConnectionStatus(nodeId, DisconnectionCode.NOT_YET_CONNECTED));
         final List<ComponentRevision> componentRevisions = Collections.singletonList(ComponentRevision.fromRevision(new Revision(8L, "client-1", "component-1")));
-        msg.setConnectionResponse(new ConnectionResponse(nodeId, dataFlow, 80, false, "instance-1", nodeStatuses, componentRevisions));
+        msg.setConnectionResponse(new ConnectionResponse(nodeId, dataFlow, 9990, 8080, false, "instance-1", nodeStatuses, componentRevisions));
 
         JaxbProtocolUtils.JAXB_CONTEXT.createMarshaller().marshal(msg, baos);
         final Object unmarshalled = JaxbProtocolUtils.JAXB_CONTEXT.createUnmarshaller().unmarshal(new ByteArrayInputStream(baos.toByteArray()));

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/coordination/heartbeat/TestAbstractHeartbeatMonitor.java
Patch:
@@ -51,7 +51,7 @@ public class TestAbstractHeartbeatMonitor {
 
     @Before
     public void setup() throws Exception {
-        nodeId = new NodeIdentifier(UUID.randomUUID().toString(), "localhost", 9999, "localhost", 8888, "localhost", null, false);
+        nodeId = new NodeIdentifier(UUID.randomUUID().toString(), "localhost", 9999, "localhost", 8888, "localhost", null, null, false);
     }
 
     @After

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/coordination/http/endpoints/TestProcessorEndpointMerger.java
Patch:
@@ -36,14 +36,14 @@ public void testMergeValidationErrors() {
         final ProcessorEndpointMerger merger = new ProcessorEndpointMerger();
         final Map<String, Set<NodeIdentifier>> validationErrorMap = new HashMap<>();
 
-        final NodeIdentifier nodeId1234 = new NodeIdentifier("1234", "localhost", 9000, "localhost", 9001, "localhost", 9002, false);
+        final NodeIdentifier nodeId1234 = new NodeIdentifier("1234", "localhost", 9000, "localhost", 9001, "localhost", 9002, 9003, false);
         final List<String> nodeValidationErrors1234 = new ArrayList<>();
         nodeValidationErrors1234.add("error 1");
         nodeValidationErrors1234.add("error 2");
 
         merger.mergeValidationErrors(validationErrorMap, nodeId1234, nodeValidationErrors1234);
 
-        final NodeIdentifier nodeXyz = new NodeIdentifier("xyz", "localhost", 8000, "localhost", 8001, "localhost", 8002, false);
+        final NodeIdentifier nodeXyz = new NodeIdentifier("xyz", "localhost", 8000, "localhost", 8001, "localhost", 8002, 8003, false);
         final List<String> nodeValidationErrorsXyz = new ArrayList<>();
         nodeValidationErrorsXyz.add("error 1");
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/coordination/node/TestNodeClusterCoordinator.java
Patch:
@@ -450,8 +450,8 @@ public void testUpdateNodeRoles() throws InterruptedException {
 
     @Test
     public void testProposedIdentifierResolvedIfConflict() {
-        final NodeIdentifier id1 = new NodeIdentifier("1234", "localhost", 8000, "localhost", 9000, "localhost", 10000, false);
-        final NodeIdentifier conflictingId = new NodeIdentifier("1234", "localhost", 8001, "localhost", 9000, "localhost", 10000, false);
+        final NodeIdentifier id1 = new NodeIdentifier("1234", "localhost", 8000, "localhost", 9000, "localhost", 10000, 11000, false);
+        final NodeIdentifier conflictingId = new NodeIdentifier("1234", "localhost", 8001, "localhost", 9000, "localhost", 10000, 11000, false);
 
         final ConnectionRequest connectionRequest = new ConnectionRequest(id1);
         final ConnectionRequestMessage crm = new ConnectionRequestMessage();
@@ -484,7 +484,7 @@ public void testProposedIdentifierResolvedIfConflict() {
 
 
     private NodeIdentifier createNodeId(final int index) {
-        return new NodeIdentifier(String.valueOf(index), "localhost", 8000 + index, "localhost", 9000 + index, "localhost", 10000 + index, false);
+        return new NodeIdentifier(String.valueOf(index), "localhost", 8000 + index, "localhost", 9000 + index, "localhost", 10000 + index, 11000 + index, false);
     }
 
     private ProtocolMessage requestConnection(final NodeIdentifier requestedNodeId, final NodeClusterCoordinator coordinator) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/TemplateUtils.java
Patch:
@@ -247,6 +247,7 @@ private static void scrubRemoteProcessGroups(final Set<RemoteProcessGroupDTO> re
             remoteProcessGroupDTO.setInputPortCount(null);
             remoteProcessGroupDTO.setOutputPortCount(null);
             remoteProcessGroupDTO.setTransmitting(null);
+            remoteProcessGroupDTO.setProxyPassword(null);
 
             // if this remote process group has contents
             if (remoteProcessGroupDTO.getContents() != null) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-site-to-site/src/main/java/org/apache/nifi/remote/protocol/socket/ClusterManagerServerProtocol.java
Patch:
@@ -34,7 +34,9 @@
 import org.apache.nifi.remote.codec.FlowFileCodec;
 import org.apache.nifi.remote.exception.HandshakeException;
 import org.apache.nifi.remote.protocol.CommunicationsSession;
+import org.apache.nifi.remote.protocol.HandshakeProperty;
 import org.apache.nifi.remote.protocol.RequestType;
+import org.apache.nifi.remote.protocol.ResponseCode;
 import org.apache.nifi.remote.protocol.ServerProtocol;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiServiceFacade.java
Patch:
@@ -2338,9 +2338,11 @@ public ControllerDTO getController() {
         // determine the site to site configuration
         if (isClustered()) {
             controllerDTO.setRemoteSiteListeningPort(controllerFacade.getClusterManagerRemoteSiteListeningPort());
+            controllerDTO.setRemoteSiteHttpListeningPort(controllerFacade.getClusterManagerRemoteSiteListeningHttpPort());
             controllerDTO.setSiteToSiteSecure(controllerFacade.isClusterManagerRemoteSiteCommsSecure());
         } else {
             controllerDTO.setRemoteSiteListeningPort(controllerFacade.getRemoteSiteListeningPort());
+            controllerDTO.setRemoteSiteHttpListeningPort(controllerFacade.getRemoteSiteListeningHttpPort());
             controllerDTO.setSiteToSiteSecure(controllerFacade.isRemoteSiteCommsSecure());
         }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ApplicationResource.java
Patch:
@@ -103,7 +103,7 @@ public abstract class ApplicationResource {
     @Context
     private HttpContext httpContext;
 
-    private NiFiProperties properties;
+    protected NiFiProperties properties;
     private RequestReplicator requestReplicator;
     private ClusterCoordinator clusterCoordinator;
 

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/Query.java
Patch:
@@ -1359,9 +1359,8 @@ private static Evaluator<?> buildFunctionEvaluator(final Tree tree, final Evalua
                 return addToken(new JsonPathEvaluator(toStringEvaluator(subjectEvaluator),
                         toStringEvaluator(argEvaluators.get(0), "first argument to jsonPath")), "jsonPath");
             }
-                default:
-                throw new AttributeExpressionLanguageParsingException(
-                        "Expected a Function-type expression but got " + tree.toString());
+            default:
+                throw new AttributeExpressionLanguageParsingException("Expected a Function-type expression but got " + tree.toString());
             }
     }
 

File: nifi-nar-bundles/nifi-provenance-repository-bundle/nifi-persistent-provenance-repository/src/main/java/org/apache/nifi/provenance/PersistentProvenanceRepository.java
Patch:
@@ -672,7 +672,7 @@ private void persistRecord(final Iterable<ProvenanceEventRecord> records) {
                 final int numDirty = dirtyWriterCount.get();
                 if (numDirty >= recordWriters.length) {
                     throw new IllegalStateException("Cannot update repository because all partitions are unusable at this time. Writing to the repository would cause corruption. "
-                        + "This most often happens as a result of the repository running out of disk space or the JMV running out of memory.");
+                        + "This most often happens as a result of the repository running out of disk space or the JVM running out of memory.");
                 }
 
                 final long idx = writerIndex.getAndIncrement();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/NiFiWebApiConfiguration.java
Patch:
@@ -27,7 +27,7 @@
 @Import({NiFiWebApiSecurityConfiguration.class})
 @ImportResource({"classpath:nifi-context.xml",
     "classpath:nifi-administration-context.xml",
-    "classpath:nifi-framework-authorization-context.xml",
+    "classpath:nifi-authorizer-context.xml",
     "classpath:nifi-cluster-manager-context.xml",
     "classpath:nifi-cluster-protocol-context.xml",
     "classpath:nifi-web-security-context.xml",

File: nifi-api/src/main/java/org/apache/nifi/web/Revision.java
Patch:
@@ -27,6 +27,7 @@
  * @Threadsafe
  */
 public class Revision implements Serializable {
+    private static final long serialVersionUID = 988658790374170022L;
 
     /**
      * the version number

File: nifi-mock/src/main/java/org/apache/nifi/util/StandardProcessorTestRunner.java
Patch:
@@ -435,7 +435,7 @@ public void enqueue(final byte[] data) {
 
     @Override
     public void enqueue(final String data) {
-        enqueue(data.getBytes(StandardCharsets.UTF_8), Collections.emptyMap());
+        enqueue(data.getBytes(StandardCharsets.UTF_8), Collections.<String, String> emptyMap());
     }
 
     @Override

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/impl/NodeProtocolSenderListener.java
Patch:
@@ -30,7 +30,6 @@
 import org.apache.nifi.reporting.BulletinRepository;
 
 public class NodeProtocolSenderListener implements NodeProtocolSender, ProtocolListener {
-
     private final NodeProtocolSender sender;
     private final ProtocolListener listener;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/jaxb/message/HeartbeatAdapter.java
Patch:
@@ -35,7 +35,7 @@ public AdaptedHeartbeat marshal(final Heartbeat hb) {
             aHb.setPayload(hb.getPayload());
 
             // set leader flag
-            aHb.setPrimary(hb.isPrimary());
+            aHb.setRoles(hb.getRoles());
 
             // set connected flag
             aHb.setConnectionStatus(hb.getConnectionStatus());
@@ -46,7 +46,7 @@ public AdaptedHeartbeat marshal(final Heartbeat hb) {
 
     @Override
     public Heartbeat unmarshal(final AdaptedHeartbeat aHb) {
-        return new Heartbeat(aHb.getNodeIdentifier(), aHb.isPrimary(), aHb.getConnectionStatus(), aHb.getPayload());
+        return new Heartbeat(aHb.getNodeIdentifier(), aHb.getRoles(), aHb.getConnectionStatus(), aHb.getPayload());
     }
 
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/jaxb/message/JaxbProtocolUtils.java
Patch:
@@ -37,5 +37,4 @@ private static JAXBContext initializeJaxbContext() {
             throw new RuntimeException("Unable to create JAXBContext.", e);
         }
     }
-
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/BulletinBoardEndpointMerger.java
Patch:
@@ -32,7 +32,7 @@
 import org.apache.nifi.web.api.dto.BulletinDTO;
 import org.apache.nifi.web.api.entity.BulletinBoardEntity;
 
-public class BulletinBoardEndpointMerger extends AbstractSingleEntityEndpoint<BulletinBoardEntity, BulletinBoardDTO> {
+public class BulletinBoardEndpointMerger extends AbstractSingleDTOEndpoint<BulletinBoardEntity, BulletinBoardDTO> {
     public static final Pattern BULLETIN_BOARD_URI_PATTERN = Pattern.compile("/nifi-api/flow/bulletin-board");
 
     @Override

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/ComponentStateEndpointMerger.java
Patch:
@@ -33,7 +33,7 @@
 import org.apache.nifi.web.api.dto.StateMapDTO;
 import org.apache.nifi.web.api.entity.ComponentStateEntity;
 
-public class ComponentStateEndpointMerger extends AbstractSingleEntityEndpoint<ComponentStateEntity, ComponentStateDTO> {
+public class ComponentStateEndpointMerger extends AbstractSingleDTOEndpoint<ComponentStateEntity, ComponentStateDTO> {
     public static final Pattern PROCESSOR_STATE_URI_PATTERN = Pattern.compile("/nifi-api/processors/[a-f0-9\\-]{36}/state");
     public static final Pattern CONTROLLER_SERVICE_STATE_URI_PATTERN = Pattern.compile("/nifi-api/controller-services/node/[a-f0-9\\-]{36}/state");
     public static final Pattern REPORTING_TASK_STATE_URI_PATTERN = Pattern.compile("/nifi-api/reporting-tasks/node/[a-f0-9\\-]{36}/state");

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/ControllerServiceEndpointMerger.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.Set;
 import java.util.regex.Pattern;
 
-public class ControllerServiceEndpointMerger extends AbstractSingleEntityEndpoint<ControllerServiceEntity, ControllerServiceDTO> {
+public class ControllerServiceEndpointMerger extends AbstractSingleDTOEndpoint<ControllerServiceEntity, ControllerServiceDTO> {
     public static final String CONTROLLER_SERVICES_URI = "/nifi-api/controller-services/node";
     public static final Pattern CONTROLLER_SERVICE_URI_PATTERN = Pattern.compile("/nifi-api/controller-services/node/[a-f0-9\\-]{36}");
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/DropRequestEndpiontMerger.java
Patch:
@@ -29,7 +29,7 @@
 import org.apache.nifi.web.api.dto.DropRequestDTO;
 import org.apache.nifi.web.api.entity.DropRequestEntity;
 
-public class DropRequestEndpiontMerger extends AbstractSingleEntityEndpoint<DropRequestEntity, DropRequestDTO> {
+public class DropRequestEndpiontMerger extends AbstractSingleDTOEndpoint<DropRequestEntity, DropRequestDTO> {
     public static final Pattern DROP_REQUESTS_URI = Pattern.compile("/nifi-api/flowfile-queues/[a-f0-9\\-]{36}/drop-requests");
     public static final Pattern DROP_REQUEST_URI = Pattern.compile("/nifi-api/flowfile-queues/[a-f0-9\\-]{36}/drop-requests/[a-f0-9\\-]{36}");
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/ListFlowFilesEndpointMerger.java
Patch:
@@ -35,7 +35,7 @@
 import org.apache.nifi.web.api.dto.QueueSizeDTO;
 import org.apache.nifi.web.api.entity.ListingRequestEntity;
 
-public class ListFlowFilesEndpointMerger extends AbstractSingleEntityEndpoint<ListingRequestEntity, ListingRequestDTO> {
+public class ListFlowFilesEndpointMerger extends AbstractSingleDTOEndpoint<ListingRequestEntity, ListingRequestDTO> {
     public static final Pattern LISTING_REQUESTS_URI = Pattern.compile("/nifi-api/flowfile-queues/[a-f0-9\\-]{36}/listing-requests");
     public static final Pattern LISTING_REQUEST_URI = Pattern.compile("/nifi-api/flowfile-queues/[a-f0-9\\-]{36}/listing-requests/[a-f0-9\\-]{36}");
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/ProvenanceEventEndpointMerger.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.nifi.web.api.dto.provenance.ProvenanceEventDTO;
 import org.apache.nifi.web.api.entity.ProvenanceEventEntity;
 
-public class ProvenanceEventEndpointMerger extends AbstractSingleEntityEndpoint<ProvenanceEventEntity, ProvenanceEventDTO> {
+public class ProvenanceEventEndpointMerger extends AbstractSingleDTOEndpoint<ProvenanceEventEntity, ProvenanceEventDTO> {
     public static final Pattern PROVENANCE_EVENT_URI = Pattern.compile("/nifi-api/provenance/events/[0-9]+");
 
     @Override

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/RemoteProcessGroupEndpointMerger.java
Patch:
@@ -33,7 +33,7 @@
 import org.apache.nifi.web.api.dto.RemoteProcessGroupPortDTO;
 import org.apache.nifi.web.api.entity.RemoteProcessGroupEntity;
 
-public class RemoteProcessGroupEndpointMerger extends AbstractSingleEntityEndpoint<RemoteProcessGroupEntity, RemoteProcessGroupDTO> {
+public class RemoteProcessGroupEndpointMerger extends AbstractSingleDTOEndpoint<RemoteProcessGroupEntity, RemoteProcessGroupDTO> {
     public static final Pattern REMOTE_PROCESS_GROUPS_URI_PATTERN = Pattern.compile("/nifi-api/remote-process-groups");
     public static final Pattern REMOTE_PROCESS_GROUP_URI_PATTERN = Pattern.compile("/nifi-api/remote-process-groups/[a-f0-9\\-]{36}");
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/ReportingTaskEndpointMerger.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.Set;
 import java.util.regex.Pattern;
 
-public class ReportingTaskEndpointMerger extends AbstractSingleEntityEndpoint<ReportingTaskEntity, ReportingTaskDTO> {
+public class ReportingTaskEndpointMerger extends AbstractSingleDTOEndpoint<ReportingTaskEntity, ReportingTaskDTO> {
     public static final String REPORTING_TASKS_URI = "/nifi-api/controller/reporting-tasks/node";
     public static final Pattern REPORTING_TASK_URI_PATTERN = Pattern.compile("/nifi-api/reporting-tasks/node/[a-f0-9\\-]{36}");
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/exception/BlockedByFirewallException.java
Patch:
@@ -22,7 +22,7 @@
  *
  */
 public class BlockedByFirewallException extends ClusterException {
-
+    private static final long serialVersionUID = 1L;
     private final NodeIdentifier nodeId;
     private final boolean isExistingNode;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/spring/FileBasedClusterNodeFirewallFactoryBean.java
Patch:
@@ -34,7 +34,7 @@ public class FileBasedClusterNodeFirewallFactoryBean implements FactoryBean {
     @Override
     public Object getObject() throws Exception {
         if (firewall == null) {
-            final File config = properties.getClusterManagerNodeFirewallFile();
+            final File config = properties.getClusterNodeFirewallFile();
             final File restoreDirectory = properties.getRestoreDirectory();
             if (config != null) {
                 firewall = new FileBasedClusterNodeFirewall(config, restoreDirectory);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/cluster/ClusterProtocolHeartbeater.java
Patch:
@@ -63,7 +63,8 @@ public ClusterProtocolHeartbeater(final NodeProtocolSender protocolSender, final
         coordinatorPath = nodesPathPrefix + "/coordinator";
     }
 
-    private String getHeartbeatAddress() throws IOException {
+    @Override
+    public String getHeartbeatAddress() throws IOException {
         final String curAddress = coordinatorAddress;
         if (curAddress != null) {
             return curAddress;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/groups/StandardProcessGroup.java
Patch:
@@ -784,6 +784,7 @@ public void inheritConnection(final Connection connection) {
         writeLock.lock();
         try {
             connections.put(connection.getIdentifier(), connection);
+            connection.setProcessGroup(this);
         } finally {
             writeLock.unlock();
         }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/scheduling/TestProcessorLifecycle.java
Patch:
@@ -56,6 +56,7 @@
 import org.apache.nifi.controller.ScheduledState;
 import org.apache.nifi.controller.repository.FlowFileEventRepository;
 import org.apache.nifi.controller.service.ControllerServiceNode;
+import org.apache.nifi.events.VolatileBulletinRepository;
 import org.apache.nifi.groups.ProcessGroup;
 import org.apache.nifi.processor.AbstractProcessor;
 import org.apache.nifi.processor.ProcessContext;
@@ -712,7 +713,7 @@ private FlowController buildFlowControllerForTest() throws Exception {
         properties.setProperty("nifi.remote.input.secure", "");
 
         return FlowController.createStandaloneInstance(mock(FlowFileEventRepository.class), properties,
-                mock(KeyService.class), mock(AuditService.class), null);
+            mock(KeyService.class), mock(AuditService.class), null, new VolatileBulletinRepository());
     }
 
     /**

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/AccessStatusDTO.java
Patch:
@@ -28,8 +28,6 @@ public class AccessStatusDTO {
     public static enum Status {
 
         UNKNOWN,
-        UNREGISTERED,
-        NOT_ACTIVE,
         ACTIVE
     }
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestInvokeHTTP.java
Patch:
@@ -124,7 +124,7 @@ public void testSslSetHttpRequest() throws Exception {
         bundle1.assertAttributeEquals(InvokeHTTP.STATUS_CODE, "200");
         bundle1.assertAttributeEquals(InvokeHTTP.STATUS_MESSAGE, "OK");
         bundle1.assertAttributeEquals("Foo", "Bar");
-        bundle1.assertAttributeEquals("Content-Type", "text/plain; charset=ISO-8859-1");
+        bundle1.assertAttributeEquals("Content-Type", "text/plain;charset=iso-8859-1");
     }
 
     // Currently InvokeHttp does not support Proxy via Https
@@ -171,7 +171,7 @@ public void testProxy() throws Exception {
         bundle1.assertAttributeEquals(InvokeHTTP.STATUS_CODE, "200");
         bundle1.assertAttributeEquals(InvokeHTTP.STATUS_MESSAGE, "OK");
         bundle1.assertAttributeEquals("Foo", "Bar");
-        bundle1.assertAttributeEquals("Content-Type", "text/plain; charset=ISO-8859-1");
+        bundle1.assertAttributeEquals("Content-Type", "text/plain;charset=iso-8859-1");
     }
 
     public static class MyProxyHandler extends AbstractHandler {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java
Patch:
@@ -746,6 +746,8 @@ public TemplateDTO createTemplateDTO(final Template template) {
         copy.setDescription(original.getDescription());
         copy.setTimestamp(original.getTimestamp());
         copy.setUri(original.getUri());
+        copy.setEncodingVersion(original.getEncodingVersion());
+
         return copy;
     }
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/HashContent.java
Patch:
@@ -57,7 +57,7 @@
 @CapabilityDescription("Calculates a hash value for the Content of a FlowFile and puts that hash value on the FlowFile as an attribute whose name "
         + "is determined by the <Hash Attribute Name> property")
 @WritesAttribute(attribute = "<Hash Attribute Name>", description = "This Processor adds an attribute whose value is the result of Hashing the "
-        + "existing FlowFile attributes. The name of this attribute is specified by the <Hash Attribute Name> property")
+        + "existing FlowFile content. The name of this attribute is specified by the <Hash Attribute Name> property")
 public class HashContent extends AbstractProcessor {
 
     public static final PropertyDescriptor ATTRIBUTE_NAME = new PropertyDescriptor.Builder()

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/groups/StandardProcessGroup.java
Patch:
@@ -74,7 +74,6 @@
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
-import java.util.stream.Collectors;
 
 import static java.util.Objects.requireNonNull;
 
@@ -2149,7 +2148,6 @@ public Set<Positionable> findAllPositionables() {
         positionables.addAll(findAllConnectables(this, true));
         List<ProcessGroup> allProcessGroups = findAllProcessGroups();
         positionables.addAll(allProcessGroups);
-        positionables.addAll(allProcessGroups.stream().flatMap(processGroup -> processGroup.findAllPositionables().stream()).collect(Collectors.toSet()));
         positionables.addAll(findAllRemoteProcessGroups());
         positionables.addAll(findAllLabels());
         return positionables;

File: nifi-nar-bundles/nifi-flume-bundle/nifi-flume-processors/src/main/java/org/apache/nifi/processors/flume/ExecuteFlumeSink.java
Patch:
@@ -35,7 +35,6 @@
 import org.apache.nifi.processor.ProcessSession;
 import org.apache.nifi.processor.ProcessorInitializationContext;
 import org.apache.nifi.processor.Relationship;
-import org.apache.nifi.processor.SchedulingContext;
 import org.apache.nifi.processor.exception.ProcessException;
 import org.apache.nifi.processor.util.StandardValidators;
 
@@ -107,7 +106,7 @@ public Set<Relationship> getRelationships() {
     }
 
     @OnScheduled
-    public void onScheduled(final SchedulingContext context) {
+    public void onScheduled(final ProcessContext context) {
         try {
             channel = new NifiSinkSessionChannel(SUCCESS, FAILURE);
             channel.start();

File: nifi-nar-bundles/nifi-flume-bundle/nifi-flume-processors/src/main/java/org/apache/nifi/processors/flume/ExecuteFlumeSource.java
Patch:
@@ -41,7 +41,6 @@
 import org.apache.nifi.processor.ProcessSessionFactory;
 import org.apache.nifi.processor.ProcessorInitializationContext;
 import org.apache.nifi.processor.Relationship;
-import org.apache.nifi.processor.SchedulingContext;
 import org.apache.nifi.processor.exception.ProcessException;
 import org.apache.nifi.processor.util.StandardValidators;
 
@@ -117,7 +116,7 @@ public Set<Relationship> getRelationships() {
     }
 
     @OnScheduled
-    public void onScheduled(final SchedulingContext context) {
+    public void onScheduled(final ProcessContext context) {
         try {
             source = SOURCE_FACTORY.create(
                     context.getProperty(SOURCE_NAME).getValue(),

File: nifi-mock/src/main/java/org/apache/nifi/util/StandardProcessorTestRunner.java
Patch:
@@ -43,7 +43,6 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicLong;
-
 import org.apache.nifi.annotation.behavior.TriggerSerially;
 import org.apache.nifi.annotation.lifecycle.OnAdded;
 import org.apache.nifi.annotation.lifecycle.OnConfigurationRestored;
@@ -436,7 +435,7 @@ public void enqueue(final byte[] data) {
 
     @Override
     public void enqueue(final String data) {
-        enqueue(data.getBytes(StandardCharsets.UTF_8), Collections.<String, String> emptyMap());
+        enqueue(data.getBytes(StandardCharsets.UTF_8), Collections.emptyMap());
     }
 
     @Override
@@ -565,7 +564,7 @@ public void setThreadCount(final int threadCount) {
         }
 
         this.numThreads = threadCount;
-        this.context.setNumThreads(threadCount);
+        this.context.setMaxConcurrentTasks(threadCount);
     }
 
     @Override

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/ControllerServiceReferenceEndpointMerger.java
Patch:
@@ -26,7 +26,6 @@
 import org.apache.nifi.cluster.coordination.http.EndpointResponseMerger;
 import org.apache.nifi.cluster.manager.NodeResponse;
 import org.apache.nifi.cluster.protocol.NodeIdentifier;
-import org.apache.nifi.web.api.dto.ControllerServiceReferencingComponentDTO;
 import org.apache.nifi.web.api.entity.ControllerServiceReferencingComponentEntity;
 import org.apache.nifi.web.api.entity.ControllerServiceReferencingComponentsEntity;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/services/FlowService.java
Patch:
@@ -117,7 +117,7 @@ void load(DataFlow proposedFlow)
 
     /**
      * Creates a copy of the current flow and saves it in the configured 'archive' directory
-     * 
+     *
      * @throws IOException if unable to write to the archive directory
      */
     void archiveFlow() throws IOException;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiServiceFacade.java
Patch:
@@ -477,7 +477,6 @@ public UpdateResult<FunnelEntity> updateFunnel(final Revision revision, final Fu
      * @param <C> the Component Type of the updated component
      *
      * @return A ConfigurationSnapshot that represents the new configuration
-     * @throws ExpiredRevisionClaimException
      */
     private <D, C> RevisionUpdate<D> updateComponent(final Revision revision, final Authorizable authorizable, final Supplier<C> daoUpdate, final Function<C, D> dtoCreation) {
         final String modifier = NiFiUserUtils.getNiFiUserName();
@@ -1547,7 +1546,8 @@ public ControllerServiceReferencingComponentsEntity updateControllerServiceRefer
         final RevisionClaim claim = new StandardRevisionClaim(requiredRevisions);
         final String modifier = NiFiUserUtils.getNiFiUserName();
 
-        final RevisionUpdate<ControllerServiceReferencingComponentsEntity> update = revisionManager.updateRevision(claim, modifier, new UpdateRevisionTask<ControllerServiceReferencingComponentsEntity>() {
+        final RevisionUpdate<ControllerServiceReferencingComponentsEntity> update = revisionManager.updateRevision(claim, modifier,
+                new UpdateRevisionTask<ControllerServiceReferencingComponentsEntity>() {
             @Override
             public RevisionUpdate<ControllerServiceReferencingComponentsEntity> update() {
                 final Set<ConfiguredComponent> updated = controllerServiceDAO.updateControllerServiceReferencingComponents(controllerServiceId, scheduledState, controllerServiceState);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/FunnelResource.java
Patch:
@@ -43,7 +43,6 @@
 import org.apache.nifi.web.Revision;
 import org.apache.nifi.web.UpdateResult;
 import org.apache.nifi.web.api.dto.FunnelDTO;
-import org.apache.nifi.web.api.dto.RevisionDTO;
 import org.apache.nifi.web.api.entity.FunnelEntity;
 import org.apache.nifi.web.api.request.ClientIdParameter;
 import org.apache.nifi.web.api.request.LongParameter;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-optimistic-locking/src/main/java/org/apache/nifi/web/revision/NaiveRevisionManager.java
Patch:
@@ -65,7 +65,8 @@ public NaiveRevisionManager() {
      * Constructs a new NaiveRevisionManager that uses the given number of Nanoseconds as the expiration time
      * for a Revision Claims
      *
-     * @param claimNanos the number of nanoseconds that a Revision Claim should last
+     * @param claimExpiration how long a Revision Claim should last
+     * @param timeUnit the TimeUnit of 'claimExpiration'
      */
     public NaiveRevisionManager(final long claimExpiration, final TimeUnit timeUnit) {
         this.claimExpirationNanos = timeUnit.toNanos(claimExpiration);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-optimistic-locking/src/main/java/org/apache/nifi/web/revision/RevisionManager.java
Patch:
@@ -107,7 +107,7 @@ public interface RevisionManager {
      * Returns the current Revision for the component with the given ID. If no Revision yet exists for the
      * component with the given ID, one will be created with a Version of 0 and no Client ID.
      *
-     * @param componentId
+     * @param componentId the ID of the component
      * @return the current Revision for the component with the given ID
      */
     Revision getRevision(String componentId);

File: nifi-api/src/main/java/org/apache/nifi/controller/status/ProcessGroupStatus.java
Patch:
@@ -445,6 +445,7 @@ public static void merge(final ProcessGroupStatus target, final ProcessGroupStat
             merged.setOutputBytes(merged.getOutputBytes() + statusToMerge.getOutputBytes());
             merged.setOutputCount(merged.getOutputCount() + statusToMerge.getOutputCount());
             merged.setProcessingNanos(merged.getProcessingNanos() + statusToMerge.getProcessingNanos());
+            merged.setFlowFilesRemoved(merged.getFlowFilesRemoved() + statusToMerge.getFlowFilesRemoved());
 
             // if the status to merge is invalid allow it to take precedence. whether the
             // processor run status is disabled/stopped/running is part of the flow configuration

File: nifi-commons/nifi-properties/src/main/java/org/apache/nifi/util/NiFiProperties.java
Patch:
@@ -172,7 +172,6 @@ public class NiFiProperties extends Properties {
     public static final String ZOOKEEPER_CONNECT_TIMEOUT = "nifi.zookeeper.connect.timeout";
     public static final String ZOOKEEPER_SESSION_TIMEOUT = "nifi.zookeeper.session.timeout";
     public static final String ZOOKEEPER_ROOT_NODE = "nifi.zookeeper.root.node";
-    public static final String ZOOKEEPER_ACCESS_CONTROL = "nifi.zookeeper.access.control";
 
     // cluster manager properties
     public static final String CLUSTER_IS_MANAGER = "nifi.cluster.is.manager";

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/flow/ProcessGroupFlowDTO.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * The NiFi flow starting at a given Process Group.
  */
-@XmlType(name = "processGroupflow")
+@XmlType(name = "processGroupFlow")
 public class ProcessGroupFlowDTO {
 
     private String id;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/RemoteProcessGroupPortEntity.java
Patch:
@@ -17,13 +17,14 @@
 package org.apache.nifi.web.api.entity;
 
 import javax.xml.bind.annotation.XmlRootElement;
+
 import org.apache.nifi.web.api.dto.RemoteProcessGroupPortDTO;
 
 /**
  * A serialized representation of this class can be placed in the entity body of a request or response to or from the API. This particular entity holds a reference to a RemoteProcessGroupPortDTO.
  */
 @XmlRootElement(name = "remoteProcessGroupPortEntity")
-public class RemoteProcessGroupPortEntity extends Entity {
+public class RemoteProcessGroupPortEntity extends ComponentEntity {
 
     private RemoteProcessGroupPortDTO remoteProcessGroupPort;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ReportingTaskEntity.java
Patch:
@@ -17,13 +17,14 @@
 package org.apache.nifi.web.api.entity;
 
 import javax.xml.bind.annotation.XmlRootElement;
+
 import org.apache.nifi.web.api.dto.ReportingTaskDTO;
 
 /**
  * A serialized representation of this class can be placed in the entity body of a response to the API. This particular entity holds a reference to a reporting task.
  */
 @XmlRootElement(name = "reportingTaskEntity")
-public class ReportingTaskEntity extends Entity {
+public class ReportingTaskEntity extends ComponentEntity {
 
     private ReportingTaskDTO reportingTask;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/SnippetEntity.java
Patch:
@@ -23,7 +23,7 @@
  * A serialized representation of this class can be placed in the entity body of a request or response to or from the API. This particular entity holds a reference to a SnippetDTO.
  */
 @XmlRootElement(name = "snippetEntity")
-public class SnippetEntity extends Entity {
+public class SnippetEntity extends ComponentEntity {
 
     private SnippetDTO snippet;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/impl/NodeProtocolSenderImpl.java
Patch:
@@ -94,6 +94,7 @@ public ConnectionResponseMessage requestConnection(final ConnectionRequestMessag
         }
     }
 
+    @Override
     public void heartbeat(final HeartbeatMessage msg, final String address) throws ProtocolException {
         final String hostname;
         final int port;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/message/ProtocolMessage.java
Patch:
@@ -27,11 +27,11 @@ public static enum MessageType {
         EXCEPTION,
         FLOW_REQUEST,
         FLOW_RESPONSE,
-        HEARTBEAT,
         PING,
         RECONNECTION_REQUEST,
         RECONNECTION_RESPONSE,
         SERVICE_BROADCAST,
+        HEARTBEAT,
         NODE_STATUS_CHANGE;
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/impl/HttpRequestReplicatorImpl.java
Patch:
@@ -40,6 +40,7 @@
 import javax.ws.rs.core.MultivaluedMap;
 
 import org.apache.commons.lang3.StringUtils;
+import org.apache.nifi.cluster.coordination.http.StandardHttpResponseMerger;
 import org.apache.nifi.cluster.manager.HttpRequestReplicator;
 import org.apache.nifi.cluster.manager.NodeResponse;
 import org.apache.nifi.cluster.manager.exception.UriConstructionException;
@@ -475,7 +476,7 @@ private WebResource.Builder getResourceBuilder() {
             // create the resource
             WebResource resource = client.resource(uri);
 
-            if (WebClusterManager.isResponseInterpreted(uri, method)) {
+            if (new StandardHttpResponseMerger().isResponseInterpreted(uri, method)) {
                 resource.addFilter(new GZIPContentEncodingFilter(false));
             }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/manager/impl/HttpRequestReplicatorImplTest.java
Patch:
@@ -44,6 +44,7 @@
 import org.apache.nifi.cluster.manager.testutils.HttpResponseAction;
 import org.apache.nifi.cluster.manager.testutils.HttpServer;
 import org.apache.nifi.cluster.protocol.NodeIdentifier;
+import org.apache.nifi.util.NiFiProperties;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -69,6 +70,7 @@ public class HttpRequestReplicatorImplTest {
 
     @Before
     public void setUp() throws IOException, URISyntaxException {
+        System.setProperty(NiFiProperties.PROPERTIES_FILE_PATH, getClass().getResource("/conf/nifi.properties").getFile());
 
         executorThreadCount = 5;
         serverThreadCount = 3;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/FlowFileQueueResource.java
Patch:
@@ -77,6 +77,7 @@
     value = "/flowfile-queues",
     description = "Endpoint for managing a FlowFile Queue."
 )
+// TODO: Need revisions of the Connections for these endpoints!
 public class FlowFileQueueResource extends ApplicationResource {
 
     private NiFiServiceFacade serviceFacade;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/TemplateResource.java
Patch:
@@ -195,8 +195,9 @@ public Response removeTemplate(
         }
 
         // handle expects request (usually from the cluster manager)
-        final String expects = httpServletRequest.getHeader(WebClusterManager.NCM_EXPECTS_HTTP_HEADER);
-        if (expects != null) {
+        // TODO: NEED VERSION FOR REVISION!
+        final boolean validationPhase = isValidationPhase(httpServletRequest);
+        if (validationPhase) {
             return generateContinueResponse().build();
         }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-optimistic-locking/src/main/java/org/apache/nifi/web/StandardOptimisticLockingManager.java
Patch:
@@ -22,13 +22,16 @@
 import org.apache.nifi.authorization.user.NiFiUserUtils;
 import org.apache.nifi.cluster.context.ClusterContext;
 import org.apache.nifi.cluster.context.ClusterContextThreadLocal;
+import org.apache.nifi.web.revision.NaiveRevisionManager;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 /**
  * Implements the OptimisticLockingManager interface.
  *
+ * @deprecated This class has been deprecated in favor of {@link NaiveRevisionManager}
  */
+@Deprecated
 public class StandardOptimisticLockingManager implements OptimisticLockingManager {
 
     private static final Logger logger = LoggerFactory.getLogger(StandardOptimisticLockingManager.class);

File: nifi-api/src/main/java/org/apache/nifi/controller/AbstractControllerService.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.Map;
 
+import org.apache.nifi.annotation.lifecycle.OnEnabled;
 import org.apache.nifi.components.AbstractConfigurableComponent;
 import org.apache.nifi.components.PropertyDescriptor;
 import org.apache.nifi.components.PropertyValue;
@@ -81,7 +82,7 @@ protected final ControllerServiceLookup getControllerServiceLookup() {
 
     /**
      * Provides a mechanism by which subclasses can perform initialization of
-     * the Reporting Task before it is scheduled to be run
+     * the Controller Service before it is scheduled to be run
      *
      * @param config of initialization context
      * @throws InitializationException if unable to init

File: nifi-nar-bundles/nifi-ldap-iaa-providers-bundle/nifi-ldap-iaa-providers/src/main/java/org/apache/nifi/ldap/LdapProvider.java
Patch:
@@ -191,8 +191,8 @@ public final void onConfigured(final LoginIdentityProviderConfigurationContext c
         try {
             referralStrategy = ReferralStrategy.valueOf(rawReferralStrategy);
         } catch (final IllegalArgumentException iae) {
-            throw new ProviderCreationException(String.format("Unrecgonized authentication strategy '%s'. Possible values are [%s]",
-                    rawAuthenticationStrategy, StringUtils.join(ReferralStrategy.values(), ", ")));
+            throw new ProviderCreationException(String.format("Unrecognized referral strategy '%s'. Possible values are [%s]",
+                    rawReferralStrategy, StringUtils.join(ReferralStrategy.values(), ", ")));
         }
 
         context.setReferral(referralStrategy.toString());

File: nifi-commons/nifi-properties/src/main/java/org/apache/nifi/util/NiFiProperties.java
Patch:
@@ -172,6 +172,7 @@ public class NiFiProperties extends Properties {
     public static final String ZOOKEEPER_CONNECT_TIMEOUT = "nifi.zookeeper.connect.timeout";
     public static final String ZOOKEEPER_SESSION_TIMEOUT = "nifi.zookeeper.session.timeout";
     public static final String ZOOKEEPER_ROOT_NODE = "nifi.zookeeper.root.node";
+    public static final String ZOOKEEPER_ACCESS_CONTROL = "nifi.zookeeper.access.control";
 
     // cluster manager properties
     public static final String CLUSTER_IS_MANAGER = "nifi.cluster.is.manager";

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/jaxb/message/ConnectionResponseAdapter.java
Patch:
@@ -31,7 +31,6 @@ public AdaptedConnectionResponse marshal(final ConnectionResponse cr) {
             aCr.setNodeIdentifier(cr.getNodeIdentifier());
             aCr.setTryLaterSeconds(cr.getTryLaterSeconds());
             aCr.setRejectionReason(cr.getRejectionReason());
-            aCr.setPrimary(cr.isPrimary());
             aCr.setManagerRemoteInputPort(cr.getManagerRemoteInputPort());
             aCr.setManagerRemoteCommsSecure(cr.isManagerRemoteCommsSecure());
             aCr.setInstanceId(cr.getInstanceId());
@@ -46,7 +45,7 @@ public ConnectionResponse unmarshal(final AdaptedConnectionResponse aCr) {
         } else if (aCr.getRejectionReason() != null) {
             return ConnectionResponse.createRejectionResponse(aCr.getRejectionReason());
         } else {
-            return new ConnectionResponse(aCr.getNodeIdentifier(), aCr.getDataFlow(), aCr.isPrimary(),
+            return new ConnectionResponse(aCr.getNodeIdentifier(), aCr.getDataFlow(),
                 aCr.getManagerRemoteInputPort(), aCr.isManagerRemoteCommsSecure(), aCr.getInstanceId());
         }
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/jaxb/message/HeartbeatAdapter.java
Patch:
@@ -25,7 +25,6 @@ public class HeartbeatAdapter extends XmlAdapter<AdaptedHeartbeat, Heartbeat> {
 
     @Override
     public AdaptedHeartbeat marshal(final Heartbeat hb) {
-
         final AdaptedHeartbeat aHb = new AdaptedHeartbeat();
 
         if (hb != null) {
@@ -39,15 +38,15 @@ public AdaptedHeartbeat marshal(final Heartbeat hb) {
             aHb.setPrimary(hb.isPrimary());
 
             // set connected flag
-            aHb.setConnected(hb.isConnected());
+            aHb.setConnectionStatus(hb.getConnectionStatus());
         }
 
         return aHb;
     }
 
     @Override
     public Heartbeat unmarshal(final AdaptedHeartbeat aHb) {
-        return new Heartbeat(aHb.getNodeIdentifier(), aHb.isPrimary(), aHb.isConnected(), aHb.getPayload());
+        return new Heartbeat(aHb.getNodeIdentifier(), aHb.isPrimary(), aHb.getConnectionStatus(), aHb.getPayload());
     }
 
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/message/ProtocolMessage.java
Patch:
@@ -23,8 +23,6 @@ public abstract class ProtocolMessage {
     public static enum MessageType {
         CONNECTION_REQUEST,
         CONNECTION_RESPONSE,
-        CONTROLLER_STARTUP_FAILURE,
-        RECONNECTION_FAILURE,
         DISCONNECTION_REQUEST,
         EXCEPTION,
         FLOW_REQUEST,
@@ -34,6 +32,7 @@ public static enum MessageType {
         RECONNECTION_REQUEST,
         RECONNECTION_RESPONSE,
         SERVICE_BROADCAST,
+        NODE_STATUS_CHANGE;
     }
 
     public abstract MessageType getType();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/FlowSynchronizationException.java
Patch:
@@ -16,11 +16,13 @@
  */
 package org.apache.nifi.controller;
 
+import org.apache.nifi.cluster.ConnectionException;
+
 /**
  * Represents the exceptional case when a controller managing an existing flow fails to fully load a different flow.
  *
  */
-public class FlowSynchronizationException extends RuntimeException {
+public class FlowSynchronizationException extends ConnectionException {
 
     private static final long serialVersionUID = 109234802938L;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/UninheritableFlowException.java
Patch:
@@ -16,11 +16,13 @@
  */
 package org.apache.nifi.controller;
 
+import org.apache.nifi.cluster.ConnectionException;
+
 /**
  * Represents the exceptional case when a controller is to be loaded with a flow that is fundamentally different than its existing flow.
  *
  */
-public class UninheritableFlowException extends RuntimeException {
+public class UninheritableFlowException extends ConnectionException {
 
     private static final long serialVersionUID = 198234798234794L;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/scheduling/StandardProcessScheduler.java
Patch:
@@ -120,8 +120,8 @@ public void run() {
      *
      * @param task the task to perform
      */
-    public void submitFrameworkTask(final Runnable task) {
-        frameworkTaskExecutor.submit(task);
+    public Future<?> submitFrameworkTask(final Runnable task) {
+        return frameworkTaskExecutor.submit(task);
     }
 
     @Override

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ControllerServiceResource.java
Patch:
@@ -620,7 +620,7 @@ public Response updateControllerServiceReferences(
 
         // replicate if cluster manager
         if (properties.isClusterManager() && Availability.NODE.equals(avail)) {
-            return clusterManager.applyRequest(HttpMethod.PUT, getAbsolutePath(), getRequestParameters(true), getHeaders()).getResponse();
+            return clusterManager.applyRequest(HttpMethod.PUT, getAbsolutePath(), updateClientId(updateReferenceRequest), getHeaders()).getResponse();
         }
 
         // handle expects request (usually from the cluster manager)

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-documentation/src/main/java/org/apache/nifi/documentation/DocGenerator.java
Patch:
@@ -24,7 +24,6 @@
 import java.io.OutputStream;
 import java.util.HashSet;
 import java.util.Set;
-
 import org.apache.nifi.components.ConfigurableComponent;
 import org.apache.nifi.controller.ControllerService;
 import org.apache.nifi.documentation.html.HtmlDocumentationWriter;
@@ -82,7 +81,7 @@ public static void generate(final NiFiProperties properties) {
     }
 
     /**
-     * Generates the documentation for a particular configurable comopnent. Will
+     * Generates the documentation for a particular configurable component. Will
      * check to see if an "additionalDetails.html" file exists and will link
      * that from the generated documentation.
      *

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestPutUDP.java
Patch:
@@ -19,14 +19,15 @@
 import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
+
 import java.net.DatagramPacket;
 import java.net.InetAddress;
 import java.util.concurrent.ArrayBlockingQueue;
-
 import org.apache.nifi.util.TestRunner;
 import org.apache.nifi.util.TestRunners;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 
 public class TestPutUDP {
@@ -141,6 +142,7 @@ public void testInvalidIPAddress() throws Exception {
         checkInputQueueIsEmpty();
     }
 
+    @Ignore("This test is failing incorrectly as documented in NIFI-1795")
     @Test(timeout = LONG_TEST_TIMEOUT_PERIOD)
     public void testUnknownHostname() throws Exception {
         configureProperties(UNKNOWN_HOST, true);

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/main/java/org/apache/nifi/processors/hadoop/CreateHadoopSequenceFile.java
Patch:
@@ -90,7 +90,7 @@ public class CreateHadoopSequenceFile extends AbstractHadoopProcessor {
     static final PropertyDescriptor COMPRESSION_TYPE = new PropertyDescriptor.Builder()
             .name("compression type")
             .description("Type of compression to use when creating Sequence File")
-            .allowableValues(CompressionType.values())
+            .allowableValues(SequenceFile.CompressionType.values())
             .build();
 
     // Default Values.

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/RouteOnAttribute.java
Patch:
@@ -83,7 +83,7 @@ public class RouteOnAttribute extends AbstractProcessor {
     // keep the word 'match' instead of 'matched' to maintain backward compatibility (there was a typo originally)
     public static final AllowableValue ROUTE_ANY_MATCHES = new AllowableValue(routeAnyMatches,
             "Route to 'matched' if any matches",
-            "Requires that at least one user-defined expression evaluate to 'true' for hte FlowFile to be considered a match");
+            "Requires that at least one user-defined expression evaluate to 'true' for the FlowFile to be considered a match");
 
     public static final PropertyDescriptor ROUTE_STRATEGY = new PropertyDescriptor.Builder()
             .name("Routing Strategy")

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-reporting-tasks/src/test/java/org/apache/nifi/controller/TestControllerStatusReportingTask.java
Patch:
@@ -39,7 +39,7 @@ public void testConnectionLoggerName() throws Exception {
     }
 
     private static Logger getLogger(String fieldName) throws Exception {
-        Field f = ControllerStatusReportingTask.class.getField(fieldName);
+        Field f = ControllerStatusReportingTask.class.getDeclaredField(fieldName);
         f.setAccessible(true);
         return (Logger) f.get(null);
     }

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/CompressContent.java
Patch:
@@ -154,6 +154,7 @@ protected void init(final ProcessorInitializationContext context) {
 
         final Map<String, String> mimeTypeMap = new HashMap<>();
         mimeTypeMap.put("application/gzip", COMPRESSION_FORMAT_GZIP);
+        mimeTypeMap.put("application/x-gzip", COMPRESSION_FORMAT_GZIP);
         mimeTypeMap.put("application/bzip2", COMPRESSION_FORMAT_BZIP2);
         mimeTypeMap.put("application/x-bzip2", COMPRESSION_FORMAT_BZIP2);
         mimeTypeMap.put("application/x-lzma", COMPRESSION_FORMAT_LZMA);

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/GetHTTP.java
Patch:
@@ -49,6 +49,7 @@
 import org.apache.http.auth.AuthScope;
 import org.apache.http.auth.UsernamePasswordCredentials;
 import org.apache.http.client.CredentialsProvider;
+import org.apache.http.client.config.CookieSpecs;
 import org.apache.http.client.config.RequestConfig;
 import org.apache.http.client.methods.HttpGet;
 import org.apache.http.config.Registry;
@@ -361,6 +362,7 @@ public void onTrigger(final ProcessContext context, final ProcessSessionFactory
             requestConfigBuilder.setRedirectsEnabled(false);
             requestConfigBuilder.setSocketTimeout(context.getProperty(DATA_TIMEOUT).asTimePeriod(TimeUnit.MILLISECONDS).intValue());
             requestConfigBuilder.setRedirectsEnabled(context.getProperty(FOLLOW_REDIRECTS).asBoolean());
+            requestConfigBuilder.setCookieSpec(CookieSpecs.STANDARD);
 
             // build the http client
             final HttpClientBuilder clientBuilder = HttpClientBuilder.create();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/message/ProtocolMessage.java
Patch:
@@ -21,8 +21,6 @@ public abstract class ProtocolMessage {
     private volatile String requestorDN;
 
     public static enum MessageType {
-
-        BULLETINS,
         CONNECTION_REQUEST,
         CONNECTION_RESPONSE,
         CONTROLLER_STARTUP_FAILURE,

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/impl/ClusteredEventAccess.java
Patch:
@@ -46,7 +46,7 @@ public ClusteredEventAccess(final WebClusterManager clusterManager, final AuditS
 
     @Override
     public ProcessGroupStatus getControllerStatus() {
-        return clusterManager.getProcessGroupStatus(WebClusterManager.ROOT_GROUP_ID_ALIAS);
+        return new ProcessGroupStatus();
     }
 
     @Override

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/status/history/StatusHistoryUtil.java
Patch:
@@ -44,9 +44,9 @@ public static StatusHistoryDTO createStatusHistoryDTO(final StatusHistory status
 
         final StatusHistoryDTO dto = new StatusHistoryDTO();
         dto.setGenerated(new Date());
-        dto.setDetails(componentDetails);
+        dto.setComponentDetails(componentDetails);
         dto.setFieldDescriptors(StatusHistoryUtil.createFieldDescriptorDtos(metricDescriptors));
-        dto.setStatusSnapshots(snapshotDtos);
+        dto.setAggregateSnapshots(snapshotDtos);
         return dto;
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/TestStandardFlowFileQueue.java
Patch:
@@ -108,7 +108,7 @@ public Object answer(final InvocationOnMock invocation) throws Throwable {
             }
         }).when(provRepo).registerEvents(Mockito.any(Iterable.class));
 
-        queue = new StandardFlowFileQueue("id", connection, flowFileRepo, provRepo, claimManager, scheduler, swapManager, null, 10000, null);
+        queue = new StandardFlowFileQueue("id", connection, flowFileRepo, provRepo, claimManager, scheduler, swapManager, null, 10000);
         TestFlowFile.idGenerator.set(0L);
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/repository/TestStandardProcessSession.java
Patch:
@@ -139,7 +139,7 @@ public void setup() throws IOException {
         final ProcessScheduler processScheduler = Mockito.mock(ProcessScheduler.class);
 
         final FlowFileSwapManager swapManager = Mockito.mock(FlowFileSwapManager.class);
-        flowFileQueue = new StandardFlowFileQueue("1", connection, flowFileRepo, provenanceRepo, null, processScheduler, swapManager, null, 10000, null);
+        flowFileQueue = new StandardFlowFileQueue("1", connection, flowFileRepo, provenanceRepo, null, processScheduler, swapManager, null, 10000);
         when(connection.getFlowFileQueue()).thenReturn(flowFileQueue);
 
         Mockito.doAnswer(new Answer<Object>() {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/repository/TestWriteAheadFlowFileRepository.java
Patch:
@@ -82,7 +82,7 @@ public void testResourceClaimsIncremented() throws IOException {
         when(connection.getDestination()).thenReturn(Mockito.mock(Connectable.class));
 
         final FlowFileSwapManager swapMgr = new MockFlowFileSwapManager();
-        final FlowFileQueue queue = new StandardFlowFileQueue("1234", connection, null, null, claimManager, null, swapMgr, null, 10000, null);
+        final FlowFileQueue queue = new StandardFlowFileQueue("1234", connection, null, null, claimManager, null, swapMgr, null, 10000);
 
         when(connection.getFlowFileQueue()).thenReturn(queue);
         queueProvider.addConnection(connection);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/service/TestStandardControllerServiceProvider.java
Patch:
@@ -29,7 +29,6 @@
 
 import org.apache.nifi.components.state.StateManager;
 import org.apache.nifi.components.state.StateManagerProvider;
-import org.apache.nifi.controller.Heartbeater;
 import org.apache.nifi.controller.ProcessScheduler;
 import org.apache.nifi.controller.ProcessorNode;
 import org.apache.nifi.controller.ScheduledState;
@@ -76,8 +75,7 @@ public static void setNiFiProps() {
     }
 
     private StandardProcessScheduler createScheduler() {
-        final Heartbeater heartbeater = Mockito.mock(Heartbeater.class);
-        return new StandardProcessScheduler(heartbeater, null, null, stateManagerProvider);
+        return new StandardProcessScheduler(null, null, stateManagerProvider);
     }
 
     @Test

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ApplicationResource.java
Patch:
@@ -79,6 +79,8 @@ public abstract class ApplicationResource {
     private static final int CLUSTER_CONTEXT_HEADER_VALUE_MAX_BYTES = (int) (0.75 * HEADER_BUFFER_SIZE);
     private static final Logger logger = LoggerFactory.getLogger(ApplicationResource.class);
 
+    public static final String NODEWISE = "false";
+
     @Context
     private HttpServletRequest httpServletRequest;
 

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-processors/src/main/java/org/apache/nifi/processors/kafka/PutKafka.java
Patch:
@@ -55,8 +55,6 @@
 import org.apache.nifi.processor.io.InputStreamCallback;
 import org.apache.nifi.processor.util.StandardValidators;
 
-import kafka.producer.DefaultPartitioner;
-
 @InputRequirement(Requirement.INPUT_REQUIRED)
 @Tags({ "Apache", "Kafka", "Put", "Send", "Message", "PubSub" })
 @CapabilityDescription("Sends the contents of a FlowFile as a message to Apache Kafka. The messages to send may be individual FlowFiles or may be delimited, using a "
@@ -454,7 +452,7 @@ private Properties buildKafkaConfigProperties(final ProcessContext context) {
         if (partitionStrategy.equalsIgnoreCase(ROUND_ROBIN_PARTITIONING.getValue())) {
             partitionerClass = Partitioners.RoundRobinPartitioner.class.getName();
         } else if (partitionStrategy.equalsIgnoreCase(RANDOM_PARTITIONING.getValue())) {
-            partitionerClass = DefaultPartitioner.class.getName();
+            partitionerClass = Partitioners.RandomPartitioner.class.getName();
         }
         properties.setProperty("partitioner.class", partitionerClass);
 

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-processors/src/main/java/org/apache/nifi/processors/kafka/PutKafka.java
Patch:
@@ -408,7 +408,7 @@ private SplittableMessageContext buildMessageContext(FlowFile flowFile, ProcessC
         String failedSegmentsString = flowFile.getAttribute(ATTR_FAILED_SEGMENTS);
         if (flowFile.getAttribute(ATTR_PROC_ID) != null && flowFile.getAttribute(ATTR_PROC_ID).equals(this.getIdentifier()) && failedSegmentsString != null) {
             topicName = flowFile.getAttribute(ATTR_TOPIC);
-            key = flowFile.getAttribute(ATTR_KEY).getBytes();
+            key = flowFile.getAttribute(ATTR_KEY) == null ? null : flowFile.getAttribute(ATTR_KEY).getBytes();
             delimiterPattern = flowFile.getAttribute(ATTR_DELIMITER);
         } else {
             failedSegmentsString = null;

File: nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-processors/src/main/java/org/apache/nifi/processors/kafka/GetKafka.java
Patch:
@@ -323,9 +323,6 @@ protected PropertyDescriptor getSupportedDynamicPropertyDescriptor(final String
     @OnScheduled
     public void schedule(ProcessContext context) {
         this.deadlockTimeout = context.getProperty(KAFKA_TIMEOUT).asTimePeriod(TimeUnit.MILLISECONDS) * 2;
-        if (this.executor == null || this.executor.isShutdown()) {
-            this.executor = Executors.newCachedThreadPool();
-        }
     }
 
     @Override
@@ -335,6 +332,9 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
          * of onTrigger. Will be reset to 'false' in the event of exception
          */
         synchronized (this.consumerStreamsReady) {
+            if (this.executor == null || this.executor.isShutdown()) {
+                this.executor = Executors.newCachedThreadPool();
+            }
             if (!this.consumerStreamsReady.get()) {
                 Future<Void> f = this.executor.submit(new Callable<Void>() {
                     @Override

File: nifi-nar-bundles/nifi-elasticsearch-bundle/nifi-elasticsearch-processors/src/main/java/org/apache/nifi/processors/elasticsearch/PutElasticsearch.java
Patch:
@@ -146,9 +146,7 @@ public void setup(ProcessContext context) {
     @Override
     public void onTrigger(final ProcessContext context, final ProcessSession session) throws ProcessException {
         final int batchSize = context.getProperty(BATCH_SIZE).asInteger();
-        final String index = context.getProperty(INDEX).evaluateAttributeExpressions().getValue();
         final String id_attribute = context.getProperty(ID_ATTRIBUTE).getValue();
-        final String docType = context.getProperty(TYPE).evaluateAttributeExpressions().getValue();
         final Charset charset = Charset.forName(context.getProperty(CHARSET).getValue());
 
         final List<FlowFile> flowFiles = session.get(batchSize);
@@ -166,6 +164,9 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
             }
 
             for (FlowFile file : flowFiles) {
+                final String index = context.getProperty(INDEX).evaluateAttributeExpressions(file).getValue();
+                final String docType = context.getProperty(TYPE).evaluateAttributeExpressions(file).getValue();
+
                 final String id = file.getAttribute(id_attribute);
                 if (id == null) {
                     logger.error("No value in identifier attribute {} for {}, transferring to failure", new Object[]{id_attribute, file});

File: nifi-nar-bundles/nifi-kite-bundle/nifi-kite-processors/src/test/java/org/apache/nifi/processors/kite/TestAvroRecordConverter.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.avro.Schema;
 import org.apache.avro.SchemaBuilder;
 import org.apache.avro.generic.GenericData.Record;
+import org.apache.commons.lang.LocaleUtils;
 import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
@@ -87,7 +88,7 @@ public void testDefaultConversion() throws Exception {
                 .endRecord();
 
         AvroRecordConverter converter = new AvroRecordConverter(input, output,
-                EMPTY_MAPPING);
+                EMPTY_MAPPING, LocaleUtils.toLocale("en_US"));
 
         Record inputRecord = new Record(input);
         inputRecord.put("s1", null);

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestIdentifyMimeType.java
Patch:
@@ -58,6 +58,7 @@ public void testFiles() throws IOException {
         expectedMimeTypes.put("1.7z", "application/x-7z-compressed");
         expectedMimeTypes.put("1.mdb", "application/x-msaccess");
         expectedMimeTypes.put("1.txt", "text/plain");
+        expectedMimeTypes.put("1.csv", "text/csv");
         expectedMimeTypes.put("1.txt.bz2", "application/x-bzip2");
         expectedMimeTypes.put("1.txt.gz", "application/gzip");
         expectedMimeTypes.put("1.zip", "application/zip");
@@ -76,6 +77,7 @@ public void testFiles() throws IOException {
         expectedExtensions.put("1.7z", ".7z");
         expectedExtensions.put("1.mdb", ".mdb");
         expectedExtensions.put("1.txt", ".txt");
+        expectedExtensions.put("1.csv", ".csv");
         expectedExtensions.put("1.txt.bz2", ".bz2");
         expectedExtensions.put("1.txt.gz", ".gz");
         expectedExtensions.put("1.zip", ".zip");

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/GetHTTP.java
Patch:
@@ -439,7 +439,7 @@ public void onTrigger(final ProcessContext context, final ProcessSessionFactory
                     }
                     final String statusExplanation = response.getStatusLine().getReasonPhrase();
 
-                    if (statusCode >= 300) {
+                    if ((statusCode >= 300) || (statusCode == 204)) {
                         logger.error("received status code {}:{} from {}", new Object[]{statusCode, statusExplanation, url});
                         // doing a commit in case there were flow files in the input queue
                         session.commit();

File: nifi-nar-bundles/nifi-cassandra-bundle/nifi-cassandra-processors/src/test/java/org/apache/nifi/processors/cassandra/AbstractCassandraProcessorTest.java
Patch:
@@ -175,13 +175,13 @@ public void testGetContactPoints() throws Exception {
         contactPoints = processor.getContactPoints("192.168.99.100:9042");
         assertNotNull(contactPoints);
         assertEquals(1, contactPoints.size());
-        assertEquals("192.168.99.100", contactPoints.get(0).getHostName());
+        assertEquals("192.168.99.100", contactPoints.get(0).getAddress().getHostAddress());
         assertEquals(9042, contactPoints.get(0).getPort());
 
         contactPoints = processor.getContactPoints("192.168.99.100:9042, mydomain.com : 4000");
         assertNotNull(contactPoints);
         assertEquals(2, contactPoints.size());
-        assertEquals("192.168.99.100", contactPoints.get(0).getHostName());
+        assertEquals("192.168.99.100", contactPoints.get(0).getAddress().getHostAddress());
         assertEquals(9042, contactPoints.get(0).getPort());
         assertEquals("mydomain.com", contactPoints.get(1).getHostName());
         assertEquals(4000, contactPoints.get(1).getPort());

File: nifi-commons/nifi-processor-utilities/src/main/java/org/apache/nifi/processor/util/put/AbstractPutEventProcessor.java
Patch:
@@ -104,7 +104,7 @@ public abstract class AbstractPutEventProcessor extends AbstractSessionFactoryPr
             .description("The protocol for communication.")
             .required(true)
             .allowableValues(TCP_VALUE, UDP_VALUE)
-            .defaultValue(UDP_VALUE.getValue())
+            .defaultValue(TCP_VALUE.getValue())
             .build();
     public static final PropertyDescriptor MESSAGE_DELIMITER = new PropertyDescriptor.Builder()
             .name("Message Delimiter")

File: nifi-nar-bundles/nifi-splunk-bundle/nifi-splunk-processors/src/main/java/org/apache/nifi/processors/splunk/PutSplunk.java
Patch:
@@ -160,6 +160,7 @@ public void onTrigger(ProcessContext context, ProcessSessionFactory sessionFacto
                 getLogger().error("No available connections, and unable to create a new one, transferring {} to failure",
                         new Object[]{flowFile}, e);
                 session.transfer(flowFile, REL_FAILURE);
+                session.commit();
                 context.yield();
                 return;
             }

File: nifi-commons/nifi-properties/src/main/java/org/apache/nifi/util/NiFiProperties.java
Patch:
@@ -71,7 +71,7 @@ public class NiFiProperties extends Properties {
     public static final String ADMINISTRATIVE_YIELD_DURATION = "nifi.administrative.yield.duration";
     public static final String PERSISTENT_STATE_DIRECTORY = "nifi.persistent.state.directory";
     public static final String BORED_YIELD_DURATION = "nifi.bored.yield.duration";
-    public static final String PROCESSOR_START_TIMEOUT = "nifi.processor.start.timeout";
+    public static final String PROCESSOR_SCHEDULING_TIMEOUT = "nifi.processor.scheduling.timeout";
 
     // content repository properties
     public static final String REPOSITORY_CONTENT_PREFIX = "nifi.content.repository.directory.";

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/scheduling/TestProcessorLifecycle.java
Patch:
@@ -409,7 +409,7 @@ public void validateProcessorCanBeStoppedWhenOnScheduledConstantlyFails() throws
      */
     @Test
     public void validateProcessorCanBeStoppedWhenOnScheduledBlocksIndefinitelyInterruptable() throws Exception {
-        NiFiProperties.getInstance().setProperty(NiFiProperties.PROCESSOR_START_TIMEOUT, "5 sec");
+        NiFiProperties.getInstance().setProperty(NiFiProperties.PROCESSOR_SCHEDULING_TIMEOUT, "5 sec");
         FlowController fc = this.buildFlowControllerForTest();
         ProcessGroup testGroup = fc.createProcessGroup(UUID.randomUUID().toString());
         this.setControllerRootGroup(fc, testGroup);
@@ -439,7 +439,7 @@ public void validateProcessorCanBeStoppedWhenOnScheduledBlocksIndefinitelyInterr
      */
     @Test
     public void validateProcessorCanBeStoppedWhenOnScheduledBlocksIndefinitelyUninterruptable() throws Exception {
-        NiFiProperties.getInstance().setProperty(NiFiProperties.PROCESSOR_START_TIMEOUT, "5 sec");
+        NiFiProperties.getInstance().setProperty(NiFiProperties.PROCESSOR_SCHEDULING_TIMEOUT, "5 sec");
         FlowController fc = this.buildFlowControllerForTest();
         ProcessGroup testGroup = fc.createProcessGroup(UUID.randomUUID().toString());
         this.setControllerRootGroup(fc, testGroup);

File: nifi-commons/nifi-properties/src/main/java/org/apache/nifi/util/NiFiProperties.java
Patch:
@@ -71,6 +71,7 @@ public class NiFiProperties extends Properties {
     public static final String ADMINISTRATIVE_YIELD_DURATION = "nifi.administrative.yield.duration";
     public static final String PERSISTENT_STATE_DIRECTORY = "nifi.persistent.state.directory";
     public static final String BORED_YIELD_DURATION = "nifi.bored.yield.duration";
+    public static final String PROCESSOR_START_TIMEOUT = "nifi.processor.start.timeout";
 
     // content repository properties
     public static final String REPOSITORY_CONTENT_PREFIX = "nifi.content.repository.directory.";
@@ -539,6 +540,7 @@ public boolean getSupportNewAccountRequests() {
         return shouldSupport;
     }
 
+    @SuppressWarnings("unchecked")
     public Set<String> getAnonymousAuthorities() {
         final Set<String> authorities;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/service/StandardControllerServiceProvider.java
Patch:
@@ -457,6 +457,7 @@ public ControllerServiceNode getControllerServiceNode(final String serviceIdenti
     public Set<String> getControllerServiceIdentifiers(final Class<? extends ControllerService> serviceType) {
         final Set<String> identifiers = new HashSet<>();
         for (final Map.Entry<String, ControllerServiceNode> entry : controllerServices.entrySet()) {
+            Class<? extends ControllerService> c = entry.getValue().getProxiedControllerService().getClass();
             if (requireNonNull(serviceType).isAssignableFrom(entry.getValue().getProxiedControllerService().getClass())) {
                 identifiers.add(entry.getKey());
             }

File: nifi-commons/nifi-processor-utilities/src/main/java/org/apache/nifi/processor/util/listen/handler/ChannelHandler.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.nifi.processor.util.listen.dispatcher.ChannelDispatcher;
 import org.apache.nifi.processor.util.listen.event.Event;
 import org.apache.nifi.processor.util.listen.event.EventFactory;
+import org.apache.nifi.processor.util.listen.event.EventQueue;
 
 import java.nio.channels.SelectionKey;
 import java.nio.charset.Charset;
@@ -34,7 +35,7 @@ public abstract class ChannelHandler<E extends Event, D extends ChannelDispatche
     protected final D dispatcher;
     protected final Charset charset;
     protected final EventFactory<E> eventFactory;
-    protected final BlockingQueue<E> events;
+    protected final EventQueue<E> events;
     protected final ProcessorLog logger;
 
 
@@ -48,8 +49,8 @@ public ChannelHandler(final SelectionKey key,
         this.dispatcher = dispatcher;
         this.charset = charset;
         this.eventFactory = eventFactory;
-        this.events = events;
         this.logger = logger;
+        this.events = new EventQueue<E>(events, logger);
     }
 
 }

File: nifi-commons/nifi-processor-utilities/src/main/java/org/apache/nifi/processor/util/listen/handler/socket/SSLSocketChannelHandler.java
Patch:
@@ -135,10 +135,8 @@ protected void processBuffer(final SSLSocketChannel sslSocketChannel, final Sock
                 if (currBytes.size() > 0) {
                     final SSLSocketChannelResponder response = new SSLSocketChannelResponder(socketChannel, sslSocketChannel);
                     final Map<String, String> metadata = EventFactoryUtil.createMapWithSender(sender.toString());
-
-                    // queue the raw event blocking until space is available, reset the temporary buffer
                     final E event = eventFactory.create(currBytes.toByteArray(), metadata, response);
-                    events.put(event);
+                    events.offer(event);
                     currBytes.reset();
                 }
             } else {

File: nifi-commons/nifi-processor-utilities/src/main/java/org/apache/nifi/processor/util/listen/handler/socket/StandardSocketChannelHandler.java
Patch:
@@ -137,10 +137,8 @@ protected void processBuffer(final SocketChannel socketChannel, final ByteBuffer
                 if (currBytes.size() > 0) {
                     final SocketChannelResponder response = new SocketChannelResponder(socketChannel);
                     final Map<String, String> metadata = EventFactoryUtil.createMapWithSender(sender.toString());
-
-                    // queue the raw event blocking until space is available, reset the buffer
                     final E event = eventFactory.create(currBytes.toByteArray(), metadata, response);
-                    events.put(event);
+                    events.offer(event);
                     currBytes.reset();
 
                     // Mark this as the start of the next message

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/relp/handler/RELPSSLSocketChannelHandler.java
Patch:
@@ -50,7 +50,7 @@ public RELPSSLSocketChannelHandler(final SelectionKey key,
                                        final ProcessorLog logger) {
         super(key, dispatcher, charset, eventFactory, events, logger);
         this.decoder = new RELPDecoder(charset);
-        this.frameHandler = new RELPFrameHandler<>(key, charset, eventFactory, events, dispatcher);
+        this.frameHandler = new RELPFrameHandler<>(key, charset, eventFactory, events, dispatcher, logger);
     }
 
     @Override

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/relp/handler/RELPSocketChannelHandler.java
Patch:
@@ -50,7 +50,7 @@ public RELPSocketChannelHandler(final SelectionKey key,
                                     final ProcessorLog logger) {
         super(key, dispatcher, charset, eventFactory, events, logger);
         this.decoder = new RELPDecoder(charset);
-        this.frameHandler = new RELPFrameHandler<>(key, charset, eventFactory, events, dispatcher);
+        this.frameHandler = new RELPFrameHandler<>(key, charset, eventFactory, events, dispatcher, logger);
     }
 
     @Override

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestListenSyslog.java
Patch:
@@ -95,7 +95,7 @@ public void testUDP() throws IOException, InterruptedException {
             while (numTransfered < numMessages && System.currentTimeMillis() < timeout) {
                 Thread.sleep(10);
                 proc.onTrigger(context, processSessionFactory);
-                numTransfered = runner.getFlowFilesForRelationship(ListenUDP.RELATIONSHIP_SUCCESS).size();
+                numTransfered = runner.getFlowFilesForRelationship(ListenSyslog.REL_SUCCESS).size();
             }
             Assert.assertEquals("Did not process all the datagrams", numMessages, numTransfered);
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/relp/handler/TestRELPSocketChannelHandler.java
Patch:
@@ -127,7 +127,7 @@ protected void run(List<String> messages) throws IOException, InterruptedExcepti
         final ByteBuffer buffer = ByteBuffer.allocate(1024);
         try {
             // starts the dispatcher listening on port 0 so it selects a random port
-            dispatcher.open(0, 4096);
+            dispatcher.open(null, 0, 4096);
 
             // starts a thread to run the dispatcher which will accept/read connections
             Thread dispatcherThread = new Thread(dispatcher);

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/util/JdbcCommon.java
Patch:
@@ -130,7 +130,7 @@ public static Schema createSchema(final ResultSet rs) throws SQLException {
         String tableName = "NiFi_ExecuteSQL_Record";
         if(nrOfColumns > 0) {
             String tableNameFromMeta = meta.getTableName(1);
-            if (!StringUtils.isBlank(tableName)) {
+            if (!StringUtils.isBlank(tableNameFromMeta)) {
                 tableName = tableNameFromMeta;
             }
         }

File: nifi-api/src/main/java/org/apache/nifi/processor/Relationship.java
Patch:
@@ -44,7 +44,7 @@ public final class Relationship implements Comparable<Relationship> {
     protected Relationship(final Builder builder) {
         this.name = builder.name == null ? null : builder.name.intern();
         this.description = builder.description;
-        this.hashCode = 301 + this.name.hashCode(); // compute only once, since it gets called a bunch and will never change
+        this.hashCode = 301 + ( (name == null) ? 0 :this.name.hashCode() ); // compute only once, since it gets called a bunch and will never change
     }
 
     @Override

File: nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/GetDelimitedFieldEvaluator.java
Patch:
@@ -99,7 +99,7 @@ public QueryResult<String> evaluate(final Map<String, String> attributes) {
         if (escapeString == null || escapeString.isEmpty()) {
             throw new AttributeExpressionLanguageException("Cannot evaluate getDelimitedField function because the escape character "
                 + "(which character is used to escape the quote character or delimiter) was not specified");
-        } else if (quoteString.length() > 1) {
+        } else if (escapeString.length() > 1) {
             throw new AttributeExpressionLanguageException("Cannot evaluate getDelimitedField function because the escape character "
                 + "(which character is used to escape the quote character or delimiter) evaluated to \"" + escapeString + "\", but only a single character is allowed.");
         }

File: nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/client/SiteToSiteClient.java
Patch:
@@ -610,7 +610,7 @@ public SSLContext getSslContext() {
                 trustManagerFactory = null;
             }
 
-            if (keyManagerFactory != null || trustManagerFactory != null) {
+            if (keyManagerFactory != null && trustManagerFactory != null) {
                 try {
                     // initialize the ssl context
                     final SSLContext sslContext = SSLContext.getInstance("TLS");

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/impl/WebClusterManager.java
Patch:
@@ -3015,8 +3015,9 @@ public int compare(final FlowFileSummaryDTO dto1, final FlowFileSummaryDTO dto2)
 
         final List<FlowFileSummaryDTO> summaryDTOs = new ArrayList<>(flowFileSummaries);
         listingRequest.setFlowFileSummaries(summaryDTOs);
-
-        final int percentCompleted = numStepsCompleted / numStepsTotal;
+        // depends on invariant if numStepsTotal is 0, so is numStepsCompleted, all steps being completed
+        // would be 1
+        final int percentCompleted = (numStepsTotal == 0) ? 1 : numStepsCompleted / numStepsTotal;
         listingRequest.setPercentCompleted(percentCompleted);
         listingRequest.setFinished(finished);
 

File: nifi-nar-bundles/nifi-scripting-bundle/nifi-scripting-processors/src/main/java/org/apache/nifi/processors/script/ExecuteScript.java
Patch:
@@ -133,7 +133,9 @@ public void setup(final ProcessContext context) {
 
         try {
             if (scriptToRun == null && scriptPath != null) {
-                scriptToRun = IOUtils.toString(new FileInputStream(scriptPath));
+                try (final FileInputStream scriptStream = new FileInputStream(scriptPath)) {
+                    scriptToRun = IOUtils.toString(scriptStream);
+                }
             }
         } catch (IOException ioe) {
             throw new ProcessException(ioe);

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/util/crypto/scrypt/Scrypt.java
Patch:
@@ -285,6 +285,8 @@ protected static byte[] deriveScryptKey(byte[] password, byte[] salt, int n, int
             // Do not enforce this check here. According to the scrypt spec, the salt can be empty. However, in the user-facing ScryptCipherProvider, enforce an arbitrary check to avoid empty salts
             logger.warn("An empty salt was used for scrypt key derivation");
 //            throw new IllegalArgumentException("Salt cannot be empty");
+            // as the Exception is not being thrown, prevent NPE if salt is null by setting it to empty array
+            if( salt == null ) salt = new byte[]{};
         }
 
         if (saltLength < 8 || saltLength > 32) {

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-reporting-tasks/src/main/java/org/apache/nifi/controller/ControllerStatusReportingTask.java
Patch:
@@ -105,7 +105,6 @@ public void onConfigured(final ConfigurationContext context) {
     @Override
     public void onTrigger(final ReportingContext context) {
         final ProcessGroupStatus controllerStatus = context.getEventAccess().getControllerStatus();
-        controllerStatus.clone();
 
         final boolean showDeltas = context.getProperty(SHOW_DELTAS).asBoolean();
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-content-viewer/src/main/java/org/apache/nifi/web/ContentViewerController.java
Patch:
@@ -154,7 +154,7 @@ protected void doGet(final HttpServletRequest request, final HttpServletResponse
 
             // when standalone and we don't know the type is null as we were able to directly access the content bypassing the rest endpoint,
             // when clustered and we don't know the type set to octet stream since the content was retrieved from the node's rest endpoint
-            if (downloadableContent.getType() == null || downloadableContent.getType().equals(MediaType.OCTET_STREAM.toString())) {
+            if (downloadableContent.getType() == null || StringUtils.startsWithIgnoreCase(downloadableContent.getType(), MediaType.OCTET_STREAM.toString())) {
                 // attempt to detect the content stream if we don't know what it is ()
                 final DefaultDetector detector = new DefaultDetector();
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/FileSystemSwapManager.java
Patch:
@@ -239,8 +239,8 @@ public boolean accept(final File dir, final String name) {
         return swapLocations;
     }
 
-    @SuppressWarnings("deprecation")
     @Override
+    @SuppressWarnings("deprecation")
     public SwapSummary getSwapSummary(final String swapLocation) throws IOException {
         final File swapFile = new File(swapLocation);
 
@@ -274,7 +274,7 @@ public SwapSummary getSwapSummary(final String swapLocation) throws IOException
             // Before swap encoding version 8, we did not write out the max record id, so we have to read all
             // swap files to determine the max record id
             final List<ResourceClaim> resourceClaims = new ArrayList<>(numRecords);
-            final List<FlowFileRecord> records = deserializeFlowFiles(in, numRecords, swapEncodingVersion, true, claimManager);
+            final List<FlowFileRecord> records = deserializeFlowFiles(in, numRecords, swapEncodingVersion, false, claimManager);
             for (final FlowFileRecord record : records) {
                 if (maxRecordId == null || record.getId() > maxRecordId) {
                     maxRecordId = record.getId();

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/main/java/org/apache/nifi/processors/hadoop/PutHDFS.java
Patch:
@@ -344,7 +344,7 @@ public void process(InputStream in) throws IOException {
                     getLogger().error("Unable to remove temporary file {} due to {}", new Object[]{tempDotCopyFile, e});
                 }
             }
-            getLogger().error("Failed to write to HDFS due to {}", t);
+            getLogger().error("Failed to write to HDFS due to {}", new Object[]{t});
             session.transfer(session.penalize(flowFile), REL_FAILURE);
             context.yield();
         }

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ExecuteStreamCommand.java
Patch:
@@ -299,11 +299,11 @@ public void onTrigger(ProcessContext context, final ProcessSession session) thro
 
         final String executeCommand = context.getProperty(EXECUTION_COMMAND).evaluateAttributeExpressions(inputFlowFile).getValue();
         args.add(executeCommand);
-        final String commandArguments = context.getProperty(EXECUTION_ARGUMENTS).getValue();
+        final String commandArguments = context.getProperty(EXECUTION_ARGUMENTS).evaluateAttributeExpressions(inputFlowFile).getValue();
         final boolean ignoreStdin = Boolean.parseBoolean(context.getProperty(IGNORE_STDIN).getValue());
         if (!StringUtils.isBlank(commandArguments)) {
             for (String arg : ArgumentUtils.splitArgs(commandArguments, context.getProperty(ARG_DELIMITER).getValue().charAt(0))) {
-                args.add(context.newPropertyValue(arg).evaluateAttributeExpressions(inputFlowFile).getValue());
+                args.add(arg);
             }
         }
         final String workingDir = context.getProperty(WORKING_DIR).evaluateAttributeExpressions(inputFlowFile).getValue();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/SnippetResource.java
Patch:
@@ -59,7 +59,6 @@
 import org.apache.nifi.web.api.request.ClientIdParameter;
 import org.apache.nifi.web.api.request.LongParameter;
 import org.apache.commons.lang3.StringUtils;
-import org.apache.nifi.web.api.entity.PropertyDescriptorEntity;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.security.access.prepost.PreAuthorize;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/EncryptContent.java
Patch:
@@ -89,7 +89,7 @@ public class EncryptContent extends AbstractProcessor {
             .description("Specifies the key derivation function to generate the key from the password (and salt)")
             .required(true)
             .allowableValues(buildKeyDerivationFunctionAllowableValues())
-            .defaultValue(KeyDerivationFunction.NIFI_LEGACY.name())
+            .defaultValue(KeyDerivationFunction.BCRYPT.name())
             .build();
     public static final PropertyDescriptor ENCRYPTION_ALGORITHM = new PropertyDescriptor.Builder()
             .name("Encryption Algorithm")

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/util/crypto/OpenPGPKeyBasedEncryptor.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.processors.standard.util;
+package org.apache.nifi.processors.standard.util.crypto;
 
 import org.apache.nifi.processor.exception.ProcessException;
 import org.apache.nifi.processor.io.StreamCallback;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/util/crypto/OpenPGPPasswordBasedEncryptor.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.processors.standard.util;
+package org.apache.nifi.processors.standard.util.crypto;
 
 import org.apache.nifi.processor.exception.ProcessException;
 import org.apache.nifi.processor.io.StreamCallback;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/util/crypto/OpenPGPKeyBasedEncryptorTest.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.processors.standard.util;
+package org.apache.nifi.processors.standard.util.crypto;
 
 import org.apache.commons.codec.binary.Hex;
 import org.apache.nifi.processor.io.StreamCallback;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/util/crypto/OpenPGPPasswordBasedEncryptorTest.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.processors.standard.util;
+package org.apache.nifi.processors.standard.util.crypto;
 
 import org.apache.commons.codec.binary.Hex;
 import org.apache.nifi.processor.io.StreamCallback;

File: nifi-api/src/main/java/org/apache/nifi/annotation/behavior/Stateful.java
Patch:
@@ -50,5 +50,5 @@
     /**
      * Indicates the Scope(s) associated with the State that is stored and retrieved.
      */
-    Scope[]scopes();
+    Scope[] scopes();
 }

File: nifi-commons/nifi-properties/src/main/java/org/apache/nifi/util/NiFiProperties.java
Patch:
@@ -1000,9 +1000,6 @@ public File getStateManagementConfigFile() {
         return new File(getProperty(STATE_MANAGEMENT_CONFIG_FILE, DEFAULT_STATE_MANAGEMENT_CONFIG_FILE));
     }
 
-    /*
-     * public static final String STATE_MANAGEMENT_MAX_ZOOKEEPER_SERVERS = "nifi.state.management.embedded.zookeeper.max.instances";
-     */
     public String getLocalStateProviderId() {
         return getProperty(STATE_MANAGEMENT_LOCAL_PROVIDER_ID);
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/state/providers/zookeeper/ZooKeeperStateProvider.java
Patch:
@@ -60,7 +60,8 @@ public class ZooKeeperStateProvider extends AbstractStateProvider {
 
     static final PropertyDescriptor CONNECTION_STRING = new PropertyDescriptor.Builder()
         .name("Connect String")
-        .description("The ZooKeeper Connect String to use. This is a comma-separated list of hostnames/IP addresses, such as \"host1, host2, 127.0.0.1, host4, host5\"")
+        .description("The ZooKeeper Connect String to use. This is a comma-separated list of hostname/IP and port tuples, such as \"host1:2181,host2:2181,127.0.0.1:2181\". If a port is not " +
+            "specified it defaults to the ZooKeeper client port default of 2181")
         .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)
         .required(false)
         .build();
@@ -216,7 +217,7 @@ private String getComponentPath(final String componentId) {
 
     private void verifyEnabled() throws IOException {
         if (!isEnabled()) {
-            throw new IOException("Cannot update or retrieve cluster state becuase node is no longer connected to a cluster");
+            throw new IOException("Cannot update or retrieve cluster state because node is no longer connected to a cluster");
         }
     }
 

File: nifi-nar-bundles/nifi-kite-bundle/nifi-kite-processors/src/test/java/org/apache/nifi/processors/kite/TestInferAvroSchema.java
Patch:
@@ -74,7 +74,7 @@ public void inferAvroSchemaFromHeaderDefinitionOfCSVFile() throws Exception {
         runner.assertTransferCount(InferAvroSchema.REL_SUCCESS, 1);
 
         MockFlowFile flowFile = runner.getFlowFilesForRelationship(InferAvroSchema.REL_SUCCESS).get(0);
-        flowFile.assertContentEquals(new File("src/test/resources/Shapes_Header.csv.avro").toPath());
+        flowFile.assertContentEquals(new File("src/test/resources/Shapes_header.csv.avro").toPath());
         flowFile.assertAttributeEquals(CoreAttributes.MIME_TYPE.key(), "application/avro-binary");
     }
 
@@ -130,7 +130,7 @@ public void inferAvroSchemaFromCSVFile() throws Exception {
         runner.assertTransferCount(InferAvroSchema.REL_SUCCESS, 1);
 
         MockFlowFile data = runner.getFlowFilesForRelationship(InferAvroSchema.REL_SUCCESS).get(0);
-        data.assertContentEquals(Paths.get("src/test/resources/Shapes_Header.csv.avro"));
+        data.assertContentEquals(Paths.get("src/test/resources/Shapes_header.csv.avro"));
         data.assertAttributeEquals(CoreAttributes.MIME_TYPE.key(), "application/avro-binary");
     }
 

File: nifi-nar-bundles/nifi-provenance-repository-bundle/nifi-persistent-provenance-repository/src/main/java/org/apache/nifi/provenance/PersistentProvenanceRepository.java
Patch:
@@ -1028,7 +1028,9 @@ private long determineFirstEventTimestamp() {
         for (final File logFile : logFiles) {
             try (final RecordReader reader = RecordReaders.newRecordReader(logFile, null, Integer.MAX_VALUE)) {
                 final StandardProvenanceEventRecord event = reader.nextRecord();
-                return event.getEventTime();
+                if (event != null) {
+                    return event.getEventTime();
+                }
             } catch (final IOException ioe) {
                 logger.warn("Failed to obtain timestamp of first event from Provenance Event Log File {}", logFile);
             }

File: nifi-mock/src/main/java/org/apache/nifi/util/TestRunner.java
Patch:
@@ -824,7 +824,7 @@ public interface TestRunner {
      * Clears the Provenance Events that have been emitted by the Processor
      */
     void clearProvenanceEvents();
-    
+
     /**
      * Returns the {@link MockProcessorLog} that is used by the Processor under test.
      * @return the logger
@@ -833,7 +833,7 @@ public interface TestRunner {
 
     /**
      * Returns the {@link MockProcessorLog} that is used by the specified controller service.
-     * 
+     *
      * @param identifier a controller service identifier
      * @return the logger
      */

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/PutJMS.java
Patch:
@@ -241,7 +241,7 @@ public void process(final InputStream in) throws IOException {
                 }
 
                 successfulFlowFiles.add(flowFile);
-                session.getProvenanceReporter().send(flowFile, "jms://" + context.getProperty(URL).getValue());
+                session.getProvenanceReporter().send(flowFile, context.getProperty(URL).getValue());
             }
 
             try {

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/HandleHttpResponse.java
Patch:
@@ -125,7 +125,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
         final String statusCodeValue = context.getProperty(STATUS_CODE).evaluateAttributeExpressions(flowFile).getValue();
         if (!isNumber(statusCodeValue)) {
             session.transfer(flowFile, REL_FAILURE);
-            getLogger().error("Failed to response to HTTP request for {} because status code was '{}', which is not a valid number", new Object[]{flowFile, statusCodeValue});
+            getLogger().error("Failed to respond to HTTP request for {} because status code was '{}', which is not a valid number", new Object[]{flowFile, statusCodeValue});
         }
 
         final HttpContextMap contextMap = context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ParseSyslog.java
Patch:
@@ -46,9 +46,9 @@
 import org.apache.nifi.processor.exception.ProcessException;
 import org.apache.nifi.processor.io.InputStreamCallback;
 import org.apache.nifi.processor.util.StandardValidators;
-import org.apache.nifi.processors.standard.AbstractSyslogProcessor.SyslogAttributes;
-import org.apache.nifi.processors.standard.util.SyslogEvent;
-import org.apache.nifi.processors.standard.util.SyslogParser;
+import org.apache.nifi.processors.standard.syslog.SyslogAttributes;
+import org.apache.nifi.processors.standard.syslog.SyslogEvent;
+import org.apache.nifi.processors.standard.syslog.SyslogParser;
 import org.apache.nifi.stream.io.StreamUtils;
 
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/PutSyslog.java
Patch:
@@ -35,7 +35,7 @@
 import org.apache.nifi.processor.Relationship;
 import org.apache.nifi.processor.exception.ProcessException;
 import org.apache.nifi.processor.util.StandardValidators;
-import org.apache.nifi.processors.standard.util.SyslogParser;
+import org.apache.nifi.processors.standard.syslog.SyslogParser;
 import org.apache.nifi.remote.io.socket.ssl.SSLSocketChannel;
 import org.apache.nifi.ssl.SSLContextService;
 import org.apache.nifi.util.ObjectHolder;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/syslog/SyslogEvent.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.processors.standard.util;
+package org.apache.nifi.processors.standard.syslog;
 
 /**
  * Encapsulates the parsed information for a single Syslog event.

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/syslog/SyslogParser.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.processors.standard.util;
+package org.apache.nifi.processors.standard.syslog;
 
 import java.nio.ByteBuffer;
 import java.nio.charset.Charset;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestParseSyslog.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.nifi.processors.standard;
 
-import org.apache.nifi.processors.standard.AbstractSyslogProcessor.SyslogAttributes;
+import org.apache.nifi.processors.standard.syslog.SyslogAttributes;
 import org.apache.nifi.util.MockFlowFile;
 import org.apache.nifi.util.TestRunner;
 import org.apache.nifi.util.TestRunners;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/util/TestSyslogParser.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.nifi.processors.standard.util;
 
+import org.apache.nifi.processors.standard.syslog.SyslogEvent;
+import org.apache.nifi.processors.standard.syslog.SyslogParser;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardComponentStateDAO.java
Patch:
@@ -41,7 +41,7 @@ private StateMap getState(final String componentId, final Scope scope) {
 
             return manager.getState(scope);
         } catch (final IOException ioe) {
-            throw new IllegalStateException(String.format("Unable to get the state for the specified component %s: %s", componentId, ioe));
+            throw new IllegalStateException(String.format("Unable to get the state for the specified component %s: %s", componentId, ioe), ioe);
         }
     }
 
@@ -56,7 +56,7 @@ private void clearState(final String componentId) {
             manager.clear(Scope.CLUSTER);
             manager.clear(Scope.LOCAL);
         } catch (final IOException ioe) {
-            throw new IllegalStateException(String.format("Unable to clear the state for the specified component %s: %s", componentId, ioe));
+            throw new IllegalStateException(String.format("Unable to clear the state for the specified component %s: %s", componentId, ioe), ioe);
         }
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/impl/WebClusterManager.java
Patch:
@@ -3467,8 +3467,8 @@ private NodeResponse mergeResponses(final URI uri, final String method, final Se
             final boolean allNodesFailed = problematicNodeResponses.size() == nodeResponses.size();
 
             // some nodes had a problematic response because of a missing counter, ensure the are not disconnected
-            final boolean someNodesFailedMissingCounter = !problematicNodeResponses.isEmpty() &&
-                problematicNodeResponses.size() < nodeResponses.size() && isMissingCounter(problematicNodeResponses, uri);
+            final boolean someNodesFailedMissingCounter = !problematicNodeResponses.isEmpty()
+                && problematicNodeResponses.size() < nodeResponses.size() && isMissingCounter(problematicNodeResponses, uri);
 
             // ensure nodes stay connected in certain scenarios
             if (allNodesFailed || someNodesFailedMissingCounter) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/FlowFileEntity.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * A serialized representation of this class can be placed in the entity body of a request or response to or from the API. This particular entity holds a reference to a FlowFileDTO.
  */
-@XmlRootElement(name = "listingRequestEntity")
+@XmlRootElement(name = "flowFileEntity")
 public class FlowFileEntity extends Entity {
 
     private FlowFileDTO flowFile;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/FlowController.java
Patch:
@@ -770,6 +770,7 @@ public EventReporter getEventReporter() {
             .resourceClaimManager(resourceClaimManager)
             .flowFileRepository(flowFileRepository)
             .provenanceRepository(provenanceEventRepository)
+            .heartbeater(this)
             .build();
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/repository/TestStandardProcessSession.java
Patch:
@@ -139,7 +139,7 @@ public void setup() throws IOException {
         final ProcessScheduler processScheduler = Mockito.mock(ProcessScheduler.class);
 
         final FlowFileSwapManager swapManager = Mockito.mock(FlowFileSwapManager.class);
-        flowFileQueue = new StandardFlowFileQueue("1", connection, flowFileRepo, provenanceRepo, null, processScheduler, swapManager, null, 10000);
+        flowFileQueue = new StandardFlowFileQueue("1", connection, flowFileRepo, provenanceRepo, null, processScheduler, swapManager, null, 10000, null);
         when(connection.getFlowFileQueue()).thenReturn(flowFileQueue);
 
         Mockito.doAnswer(new Answer<Object>() {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/state/StateMapSerDe.java
Patch:
@@ -52,10 +52,12 @@ public void serializeRecord(final StateMapUpdate record, final DataOutputStream
         for (final Map.Entry<String, String> entry : map.entrySet()) {
             final boolean hasKey = entry.getKey() != null;
             final boolean hasValue = entry.getValue() != null;
+            out.writeBoolean(hasKey);
             if (hasKey) {
                 out.writeUTF(entry.getKey());
             }
 
+            out.writeBoolean(hasValue);
             if (hasValue) {
                 out.writeUTF(entry.getValue());
             }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/state/providers/zookeeper/ZooKeeperStateProvider.java
Patch:
@@ -115,7 +115,6 @@ public class ZooKeeperStateProvider extends AbstractStateProvider {
 
 
     public ZooKeeperStateProvider() throws Exception {
-        // TODO: Provide SSL Context??
     }
 
 

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/s3/DeleteS3Object.java
Patch:
@@ -56,7 +56,7 @@ public class DeleteS3Object extends AbstractS3Processor {
             .build();
 
     public static final List<PropertyDescriptor> properties = Collections.unmodifiableList(
-            Arrays.asList(KEY, BUCKET, ACCESS_KEY, SECRET_KEY, CREDENTIALS_FILE, REGION, TIMEOUT, VERSION_ID,
+            Arrays.asList(KEY, BUCKET, ACCESS_KEY, SECRET_KEY, CREDENTIALS_FILE, AWS_CREDENTIALS_PROVIDER_SERVICE, REGION, TIMEOUT, VERSION_ID,
                     FULL_CONTROL_USER_LIST, READ_USER_LIST, WRITE_USER_LIST, READ_ACL_LIST, WRITE_ACL_LIST, OWNER,
                     SSL_CONTEXT_SERVICE, ENDPOINT_OVERRIDE));
 

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/s3/FetchS3Object.java
Patch:
@@ -73,7 +73,7 @@ public class FetchS3Object extends AbstractS3Processor {
             .build();
 
     public static final List<PropertyDescriptor> properties = Collections.unmodifiableList(
-            Arrays.asList(BUCKET, KEY, REGION, ACCESS_KEY, SECRET_KEY, CREDENTIALS_FILE, TIMEOUT, VERSION_ID, SSL_CONTEXT_SERVICE, ENDPOINT_OVERRIDE));
+            Arrays.asList(BUCKET, KEY, REGION, ACCESS_KEY, SECRET_KEY, CREDENTIALS_FILE, AWS_CREDENTIALS_PROVIDER_SERVICE, TIMEOUT, VERSION_ID, SSL_CONTEXT_SERVICE, ENDPOINT_OVERRIDE));
 
     @Override
     protected List<PropertyDescriptor> getSupportedPropertyDescriptors() {

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/s3/PutS3Object.java
Patch:
@@ -90,7 +90,7 @@ public class PutS3Object extends AbstractS3Processor {
         .build();
 
     public static final List<PropertyDescriptor> properties = Collections.unmodifiableList(
-        Arrays.asList(KEY, BUCKET, ACCESS_KEY, SECRET_KEY, CREDENTIALS_FILE, STORAGE_CLASS, REGION, TIMEOUT, EXPIRATION_RULE_ID,
+        Arrays.asList(KEY, BUCKET, ACCESS_KEY, SECRET_KEY, CREDENTIALS_FILE, AWS_CREDENTIALS_PROVIDER_SERVICE, STORAGE_CLASS, REGION, TIMEOUT, EXPIRATION_RULE_ID,
             FULL_CONTROL_USER_LIST, READ_USER_LIST, WRITE_USER_LIST, READ_ACL_LIST, WRITE_ACL_LIST, OWNER, SSL_CONTEXT_SERVICE, ENDPOINT_OVERRIDE));
 
     final static String S3_BUCKET_KEY = "s3.bucket";

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/sns/PutSNS.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.List;
 import java.util.Map;
 
+import org.apache.commons.lang3.StringUtils;
 import org.apache.nifi.annotation.behavior.InputRequirement;
 import org.apache.nifi.annotation.behavior.InputRequirement.Requirement;
 import org.apache.nifi.annotation.behavior.SupportsBatching;
@@ -74,7 +75,7 @@ public class PutSNS extends AbstractSNSProcessor {
             .build();
 
     public static final List<PropertyDescriptor> properties = Collections.unmodifiableList(
-            Arrays.asList(ARN, ARN_TYPE, SUBJECT, REGION, ACCESS_KEY, SECRET_KEY, CREDENTIALS_FILE, TIMEOUT,
+            Arrays.asList(ARN, ARN_TYPE, SUBJECT, REGION, ACCESS_KEY, SECRET_KEY, CREDENTIALS_FILE, AWS_CREDENTIALS_PROVIDER_SERVICE, TIMEOUT,
                     USE_JSON_STRUCTURE, CHARACTER_ENCODING));
 
     public static final int MAX_SIZE = 256 * 1024;
@@ -136,7 +137,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
         }
 
         for (final Map.Entry<PropertyDescriptor, String> entry : context.getProperties().entrySet()) {
-            if (entry.getKey().isDynamic() && !isEmpty(entry.getValue())) {
+            if (entry.getKey().isDynamic() && !StringUtils.isEmpty(entry.getValue())) {
                 final MessageAttributeValue value = new MessageAttributeValue();
                 value.setStringValue(context.getProperty(entry.getKey()).evaluateAttributeExpressions(flowFile).getValue());
                 value.setDataType("String");

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/sqs/DeleteSQS.java
Patch:
@@ -54,7 +54,7 @@ public class DeleteSQS extends AbstractSQSProcessor {
             .build();
 
     public static final List<PropertyDescriptor> properties = Collections.unmodifiableList(
-            Arrays.asList(ACCESS_KEY, SECRET_KEY, REGION, QUEUE_URL, TIMEOUT));
+            Arrays.asList(ACCESS_KEY, SECRET_KEY, CREDENTIALS_FILE, AWS_CREDENTIALS_PROVIDER_SERVICE, REGION, QUEUE_URL, TIMEOUT));
 
     @Override
     protected List<PropertyDescriptor> getSupportedPropertyDescriptors() {

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/sqs/GetSQS.java
Patch:
@@ -114,7 +114,8 @@ public class GetSQS extends AbstractSQSProcessor {
             .build();
 
     public static final List<PropertyDescriptor> properties = Collections.unmodifiableList(
-            Arrays.asList(STATIC_QUEUE_URL, AUTO_DELETE, ACCESS_KEY, SECRET_KEY, CREDENTIALS_FILE, REGION, BATCH_SIZE, TIMEOUT, CHARSET, VISIBILITY_TIMEOUT, RECEIVE_MSG_WAIT_TIME));
+            Arrays.asList(STATIC_QUEUE_URL, AUTO_DELETE, ACCESS_KEY, SECRET_KEY, CREDENTIALS_FILE,
+                AWS_CREDENTIALS_PROVIDER_SERVICE, REGION, BATCH_SIZE, TIMEOUT, CHARSET, VISIBILITY_TIMEOUT, RECEIVE_MSG_WAIT_TIME));
 
     @Override
     protected List<PropertyDescriptor> getSupportedPropertyDescriptors() {

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/sqs/PutSQS.java
Patch:
@@ -65,7 +65,7 @@ public class PutSQS extends AbstractSQSProcessor {
             .build();
 
     public static final List<PropertyDescriptor> properties = Collections.unmodifiableList(
-            Arrays.asList(QUEUE_URL, ACCESS_KEY, SECRET_KEY, CREDENTIALS_FILE, REGION, DELAY, TIMEOUT));
+            Arrays.asList(QUEUE_URL, ACCESS_KEY, SECRET_KEY, CREDENTIALS_FILE, AWS_CREDENTIALS_PROVIDER_SERVICE, REGION, DELAY, TIMEOUT));
 
     private volatile List<PropertyDescriptor> userDefinedProperties = Collections.emptyList();
 

File: nifi-mock/src/main/java/org/apache/nifi/util/StandardProcessorTestRunner.java
Patch:
@@ -46,6 +46,7 @@
 
 import org.apache.nifi.annotation.behavior.TriggerSerially;
 import org.apache.nifi.annotation.lifecycle.OnAdded;
+import org.apache.nifi.annotation.lifecycle.OnConfigurationRestored;
 import org.apache.nifi.annotation.lifecycle.OnDisabled;
 import org.apache.nifi.annotation.lifecycle.OnEnabled;
 import org.apache.nifi.annotation.lifecycle.OnRemoved;
@@ -119,6 +120,8 @@ public class StandardProcessorTestRunner implements TestRunner {
         }
 
         triggerSerially = null != processor.getClass().getAnnotation(TriggerSerially.class);
+
+        ReflectionUtils.quietlyInvokeMethodsWithAnnotation(OnConfigurationRestored.class, processor);
     }
 
     @SuppressWarnings("deprecation")

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/service/ControllerServiceLoader.java
Patch:
@@ -155,9 +155,9 @@ private static void configureControllerService(final ControllerServiceNode node,
 
         for (final Map.Entry<String, String> entry : dto.getProperties().entrySet()) {
             if (entry.getValue() == null) {
-                node.removeProperty(entry.getKey(), false);
+                node.removeProperty(entry.getKey());
             } else {
-                node.setProperty(entry.getKey(), entry.getValue(), false);
+                node.setProperty(entry.getKey(), entry.getValue());
             }
         }
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/scheduling/TestStandardProcessScheduler.java
Patch:
@@ -124,7 +124,7 @@ public void testDisableControllerServiceWithProcessorTryingToStartUsingIt() thro
         final ProcessorNode procNode = new StandardProcessorNode(proc, UUID.randomUUID().toString(),
                 new StandardValidationContextFactory(serviceProvider), scheduler, serviceProvider);
 
-        procNode.setProperty(ServiceReferencingProcessor.SERVICE_DESC.getName(), service.getIdentifier(), true);
+        procNode.setProperty(ServiceReferencingProcessor.SERVICE_DESC.getName(), service.getIdentifier());
 
         scheduler.enableControllerService(service);
         scheduler.startProcessor(procNode);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardControllerServiceDAO.java
Patch:
@@ -246,9 +246,9 @@ private void configureControllerService(final ControllerServiceNode controllerSe
                 final String propName = entry.getKey();
                 final String propVal = entry.getValue();
                 if (isNotNull(propName) && propVal == null) {
-                    controllerService.removeProperty(propName, true);
+                    controllerService.removeProperty(propName);
                 } else if (isNotNull(propName)) {
-                    controllerService.setProperty(propName, propVal, true);
+                    controllerService.setProperty(propName, propVal);
                 }
             }
         }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardProcessorDAO.java
Patch:
@@ -175,9 +175,9 @@ private void configureProcessor(ProcessorNode processor, ProcessorDTO processorD
                     final String propName = entry.getKey();
                     final String propVal = entry.getValue();
                     if (isNotNull(propName) && propVal == null) {
-                        processor.removeProperty(propName, true);
+                        processor.removeProperty(propName);
                     } else if (isNotNull(propName)) {
-                        processor.setProperty(propName, propVal, true);
+                        processor.setProperty(propName, propVal);
                     }
                 }
             }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardReportingTaskDAO.java
Patch:
@@ -289,9 +289,9 @@ private void configureReportingTask(final ReportingTaskNode reportingTask, final
                 final String propName = entry.getKey();
                 final String propVal = entry.getValue();
                 if (isNotNull(propName) && propVal == null) {
-                    reportingTask.removeProperty(propName, true);
+                    reportingTask.removeProperty(propName);
                 } else if (isNotNull(propName)) {
-                    reportingTask.setProperty(propName, propVal, true);
+                    reportingTask.setProperty(propName, propVal);
                 }
             }
         }

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/main/java/org/apache/nifi/processors/hadoop/ListHDFS.java
Patch:
@@ -167,7 +167,7 @@ public void onPrimaryNodeChange(final PrimaryNodeState newState) {
 
     @Override
     public void onPropertyModified(final PropertyDescriptor descriptor, final String oldValue, final String newValue) {
-        if ( descriptor.equals(DIRECTORY) ) {
+        if (isConfigurationRestored() && descriptor.equals(DIRECTORY)) {
             lastListingTime = null; // clear lastListingTime so that we have to fetch new time
             latestPathsListed = new HashSet<>();
         }

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/AbstractListProcessor.java
Patch:
@@ -182,7 +182,7 @@ protected List<PropertyDescriptor> getSupportedPropertyDescriptors() {
 
     @Override
     public void onPropertyModified(final PropertyDescriptor descriptor, final String oldValue, final String newValue) {
-        if (isListingResetNecessary(descriptor)) {
+        if (isConfigurationRestored() && isListingResetNecessary(descriptor)) {
             lastListingTime = null; // clear lastListingTime so that we have to fetch new time
             latestIdentifiersListed = new HashSet<>();
             resetListing = true;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/TailFile.java
Patch:
@@ -161,7 +161,7 @@ public Set<Relationship> getRelationships() {
 
     @Override
     public void onPropertyModified(final PropertyDescriptor descriptor, final String oldValue, final String newValue) {
-        if (FILENAME.equals(descriptor)) {
+        if (isConfigurationRestored() && FILENAME.equals(descriptor)) {
             state = new TailFileState(newValue, null, null, 0L, 0L, null, ByteBuffer.allocate(65536));
             tailFileChanged = true;
         }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ControllerServiceResource.java
Patch:
@@ -623,7 +623,7 @@ public Response getState(
      * @return a componentStateEntity
      */
     @POST
-    @Consumes(MediaType.WILDCARD)
+    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
     @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})
     @Path("/{availability}/{id}/state/clear-requests")
     @PreAuthorize("hasAnyRole('ROLE_DFM')")

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessorResource.java
Patch:
@@ -631,7 +631,7 @@ public Response getState(
      * @return a componentStateEntity
      */
     @POST
-    @Consumes(MediaType.WILDCARD)
+    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
     @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})
     @Path("/{id}/state/clear-requests")
     @PreAuthorize("hasAnyRole('ROLE_DFM')")

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ReportingTaskResource.java
Patch:
@@ -616,7 +616,7 @@ public Response getState(
      * @return a componentStateEntity
      */
     @POST
-    @Consumes(MediaType.WILDCARD)
+    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
     @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})
     @Path("/{availability}/{id}/state/clear-requests")
     @PreAuthorize("hasAnyRole('ROLE_DFM')")

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/impl/WebClusterManager.java
Patch:
@@ -2557,7 +2557,8 @@ static boolean isResponseInterpreted(final URI uri, final String method) {
                 || isProcessGroupEndpoint(uri, method)
                 || isTemplateEndpoint(uri, method) || isFlowSnippetEndpoint(uri, method)
                 || isProvenanceQueryEndpoint(uri, method) || isProvenanceEventEndpoint(uri, method)
-                || isControllerServicesEndpoint(uri, method) || isControllerServiceEndpoint(uri, method) || isControllerServiceReferenceEndpoint(uri, method) || isControllerServiceStateEndpoint(uri, method)
+                || isControllerServicesEndpoint(uri, method) || isControllerServiceEndpoint(uri, method)
+                || isControllerServiceReferenceEndpoint(uri, method) || isControllerServiceStateEndpoint(uri, method)
                 || isReportingTasksEndpoint(uri, method) || isReportingTaskEndpoint(uri, method) || isReportingTaskStateEndpoint(uri, method)
                 || isDropRequestEndpoint(uri, method);
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiServiceFacade.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.apache.commons.collections4.CollectionUtils;
 import org.apache.commons.lang3.StringUtils;
-import org.apache.log4j.lf5.util.Resource;
 import org.apache.nifi.action.Action;
 import org.apache.nifi.action.Component;
 import org.apache.nifi.action.FlowChangeAction;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/state/providers/zookeeper/ZooKeeperStateProvider.java
Patch:
@@ -310,6 +310,9 @@ private void setState(final Map<String, String> stateValues, final int version,
                 invalidateClient();
                 setState(stateValues, version, componentId);
             }
+            if (Code.NODEEXISTS == ke.code()) {
+                setState(stateValues, version, componentId);
+            }
 
             throw new IOException("Failed to set cluster-wide state in ZooKeeper for component with ID " + componentId, ke);
         } catch (final IOException ioe) {

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/TailFile.java
Patch:
@@ -150,6 +150,7 @@ protected List<PropertyDescriptor> getSupportedPropertyDescriptors() {
         properties.add(ROLLING_FILENAME_PATTERN);
         properties.add(new PropertyDescriptor.Builder().fromPropertyDescriptor(STATE_FILE).defaultValue("./conf/state/" + getIdentifier()).build());
         properties.add(START_POSITION);
+        properties.add(FILE_LOCATION);
         return properties;
     }
 

File: nifi-api/src/main/java/org/apache/nifi/components/state/StateManager.java
Patch:
@@ -69,8 +69,8 @@ public interface StateManager {
      * If the state has not yet been set, the StateMap's version will be -1, and the map of values will be empty.
      *
      * @param scope the scope to use when fetching the state
-     * @return
-     * @throws IOException
+     * @return the current state for the component
+     * @throws IOException if unable to communicate with the underlying storage mechanism
      */
     StateMap getState(Scope scope) throws IOException;
 

File: nifi-api/src/main/java/org/apache/nifi/components/state/StateMap.java
Patch:
@@ -35,7 +35,7 @@ public interface StateMap {
 
     /**
      * Returns the value associated with the given key
-     * 
+     *
      * @param key the key whose value should be retrieved
      * @return the value associated with the given key, or <code>null</code> if no value is associated
      *         with this key.

File: nifi-api/src/main/java/org/apache/nifi/processor/ProcessSession.java
Patch:
@@ -25,7 +25,6 @@
 import java.util.Set;
 import java.util.regex.Pattern;
 
-import org.apache.nifi.components.state.StateManager;
 import org.apache.nifi.controller.queue.QueueSize;
 import org.apache.nifi.flowfile.FlowFile;
 import org.apache.nifi.processor.exception.FlowFileAccessException;

File: nifi-mock/src/main/java/org/apache/nifi/util/StandardProcessorTestRunner.java
Patch:
@@ -798,8 +798,8 @@ public MockStateManager getStateManager() {
     /**
      * Returns the State Manager for the given Controller Service.
      *
-     * @param controllerService
-     * @return
+     * @param controllerService the Controller Service whose State Manager should be returned
+     * @return the State Manager for the given Controller Service
      */
     @Override
     public MockStateManager getStateManager(final ControllerService controllerService) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/ConfiguredComponent.java
Patch:
@@ -36,7 +36,7 @@ public interface ConfiguredComponent {
 
     /**
      * Sets the property with the given name to the given value
-     * 
+     *
      * @param name the name of the property to update
      * @param value the value to update the property to
      * @param triggerOnPropertyModified if <code>true</code>, will trigger the #onPropertyModified method of the component

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/logging/LogRepository.java
Patch:
@@ -67,7 +67,7 @@ public interface LogRepository {
 
     /**
      * Sets the current logger for the component
-     * 
+     *
      * @param logger the logger to use
      */
     void setLogger(ComponentLog logger);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/scheduling/StandardProcessScheduler.java
Patch:
@@ -122,7 +122,7 @@ public void run() {
 
     /**
      * Submits the given task to be executed exactly once in a background thread
-     * 
+     *
      * @param task the task to perform
      */
     public void submitFrameworkTask(final Runnable task) {

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/main/java/org/apache/nifi/processors/hadoop/util/HDFSListing.java
Patch:
@@ -89,9 +89,9 @@ public void setMatchingPaths(Collection<String> matchingPaths) {
     }
 
     /**
-     * Converts this HDFSListing into a Map<String, String> so that it can be stored in a StateManager.
+     * Converts this HDFSListing into a Map&lt;String, String&gt; so that it can be stored in a StateManager.
      *
-     * @return a Map<String, String> that represents the same information as this HDFSListing
+     * @return a Map that represents the same information as this HDFSListing
      */
     public Map<String, String> toMap() {
         final Map<String, String> map = new HashMap<>(1 + matchingPaths.size());

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/TailFile.java
Patch:
@@ -192,7 +192,7 @@ public void recoverState(final ProcessContext context) throws IOException {
      * Recovers values for the State that was stored in a local file.
      *
      * @param context the ProcessContext that indicates where the state is stored
-     * @return a Map<String, String> that contains the keys defined in {@link TailFileState.StateKeys}
+     * @return a Map that contains the keys defined in {@link TailFileState.StateKeys}
      * @throws IOException if the state file exists but was unable to be read
      */
     private Map<String, String> recoverStateValuesFromFile(final ProcessContext context) throws IOException {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/state/providers/zookeeper/ZooKeeperStateProvider.java
Patch:
@@ -102,7 +102,7 @@ public class ZooKeeperStateProvider extends AbstractStateProvider {
         .sensitive(true)
         .build();
 
-    private static final int ENCODING_VERSION = 1;
+    private static final byte ENCODING_VERSION = 1;
 
     private ZooKeeper zooKeeper;
 
@@ -251,7 +251,7 @@ public void setState(final Map<String, String> state, final String componentId)
     private byte[] serialize(final Map<String, String> stateValues) throws IOException {
         try (final ByteArrayOutputStream baos = new ByteArrayOutputStream();
             final DataOutputStream dos = new DataOutputStream(baos)) {
-            dos.writeInt(ENCODING_VERSION);
+            dos.writeByte(ENCODING_VERSION);
             dos.writeInt(stateValues.size());
             for (final Map.Entry<String, String> entry : stateValues.entrySet()) {
                 dos.writeUTF(entry.getKey());
@@ -265,7 +265,7 @@ private StateMap deserialize(final byte[] data, final int recordVersion, final S
         try (final ByteArrayInputStream bais = new ByteArrayInputStream(data);
             final DataInputStream dis = new DataInputStream(bais)) {
 
-            final int encodingVersion = dis.readInt();
+            final byte encodingVersion = dis.readByte();
             if (encodingVersion > ENCODING_VERSION) {
                 throw new IOException("Retrieved a response from ZooKeeper when retrieving state for component with ID " + componentId
                     + ", but the response was encoded using the ZooKeeperStateProvider Encoding Version of " + encodingVersion

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/AbstractListProcessor.java
Patch:
@@ -402,7 +402,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
                 }
                 persist(latestListingTimestamp, identifiers, context.getStateManager());
             } catch (final IOException ioe) {
-                getLogger().warn("Unable to save state due to {}. If NiFi restarted before state is saved, or "
+                getLogger().warn("Unable to save state due to {}. If NiFi is restarted before state is saved, or "
                     + "if another node begins executing this Processor, data duplication may occur.", ioe);
             }
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestEncryptContent.java
Patch:
@@ -249,7 +249,7 @@ public void testShouldValidatePGPPublicKeyringExists() {
         // Assert
         Assert.assertEquals(1, results.size());
         ValidationResult vr = (ValidationResult) results.toArray()[0];
-        String expectedResult = " (No such file or directory)";
+        String expectedResult = "java.io.FileNotFoundException";
         String message = "'" + vr.toString() + "' contains '" + expectedResult + "'";
         Assert.assertTrue(message, vr.toString().contains(expectedResult));
     }

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/util/OpenPGPKeyBasedEncryptor.java
Patch:
@@ -97,7 +97,8 @@ public StreamCallback getDecryptionCallback() throws Exception {
     /**
      * Returns true if the passphrase is valid.
      * <p>
-     * This is used in the EncryptContent custom validation to check if the passphrase can extract a private key from the secret key ring. After BC was upgraded from 1.46 to 1.53, the API changed so this is performed differently but the functionality is equivalent.
+     * This is used in the EncryptContent custom validation to check if the passphrase can extract a private key from the secret key ring. After BC was upgraded from 1.46 to 1.53, the API changed
+     * so this is performed differently but the functionality is equivalent.
      *
      * @param provider the provider name
      * @param secretKeyringFile the file path to the keyring

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/util/PGPUtil.java
Patch:
@@ -46,7 +46,9 @@ public class PGPUtil {
     public static final int BUFFER_SIZE = 65536;
     public static final int BLOCK_SIZE = 4096;
 
-    public static void encrypt(InputStream in, OutputStream out, String algorithm, String provider, int cipher, String filename, PGPKeyEncryptionMethodGenerator encryptionMethodGenerator) throws IOException, PGPException {
+    public static void encrypt(InputStream in, OutputStream out, String algorithm, String provider, int cipher, String filename,
+                               PGPKeyEncryptionMethodGenerator encryptionMethodGenerator) throws IOException, PGPException {
+
         final boolean isArmored = EncryptContent.isPGPArmoredAlgorithm(algorithm);
         OutputStream output = out;
         if (isArmored) {

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-reporting-tasks/src/main/java/org/apache/nifi/controller/ControllerStatusReportingTask.java
Patch:
@@ -53,8 +53,8 @@ public class ControllerStatusReportingTask extends AbstractReportingTask {
             .defaultValue("true")
             .build();
 
-    private static final Logger processorLogger = LoggerFactory.getLogger(ControllerStatusReportingTask.class.getSimpleName() + ".Processors");
-    private static final Logger connectionLogger = LoggerFactory.getLogger(ControllerStatusReportingTask.class.getSimpleName() + ".Connections");
+    private static final Logger processorLogger = LoggerFactory.getLogger(ControllerStatusReportingTask.class + ".Processors");
+    private static final Logger connectionLogger = LoggerFactory.getLogger(ControllerStatusReportingTask.class + ".Connections");
 
     private static final String PROCESSOR_LINE_FORMAT_NO_DELTA = "| %1$-30.30s | %2$-36.36s | %3$-24.24s | %4$10.10s | %5$19.19s | %6$19.19s | %7$12.12s | %8$13.13s | %9$5.5s | %10$12.12s |\n";
     private static final String PROCESSOR_LINE_FORMAT_WITH_DELTA = "| %1$-30.30s | %2$-36.36s | %3$-24.24s | %4$10.10s | %5$43.43s | %6$43.43s | %7$28.28s | %8$30.30s | %9$14.14s | %10$28.28s |\n";

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/PutJMS.java
Patch:
@@ -251,8 +251,9 @@ public void process(final InputStream in) throws IOException {
                 final String flowFileDescription = successfulFlowFiles.size() > 10 ? successfulFlowFiles.size() + " FlowFiles" : successfulFlowFiles.toString();
                 logger.info("Sent {} to JMS Server and transferred to 'success'", new Object[]{flowFileDescription});
             } catch (JMSException e) {
-                logger.error("Failed to commit JMS Session due to {}; rolling back session", new Object[]{e});
-                session.rollback();
+                logger.error("Failed to commit JMS Session due to {} and transferred to 'failure'", new Object[]{e});
+                session.transfer(flowFiles, REL_FAILURE);
+                context.yield();
                 wrappedProducer.close(logger);
             }
         } finally {

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/UnpackContent.java
Patch:
@@ -175,6 +175,9 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
                 case "application/tar":
                     packagingFormat = TAR_FORMAT;
                     break;
+                case "application/x-tar":
+                    packagingFormat = TAR_FORMAT;
+                    break;
                 case "application/zip":
                     packagingFormat = ZIP_FORMAT;
                     break;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/service/StandardControllerServiceReference.java
Patch:
@@ -66,8 +66,7 @@ public Set<ConfiguredComponent> getActiveReferences() {
             if (component instanceof ControllerServiceNode) {
                 serviceNodes.add((ControllerServiceNode) component);
 
-                final ControllerServiceState state = ((ControllerServiceNode) component).getState();
-                if (state != ControllerServiceState.DISABLED) {
+                if (((ControllerServiceNode) component).isActive()) {
                     activeReferences.add(component);
                 }
             } else if (isRunning(component)) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/service/TestStandardControllerServiceProvider.java
Patch:
@@ -120,7 +120,7 @@ private void waitForServiceState(final ControllerServiceNode service, final Cont
     @Test(timeout = 10000)
     public void testConcurrencyWithEnablingReferencingServicesGraph() {
         final ProcessScheduler scheduler = createScheduler();
-        for (int i = 0; i < 1000; i++) {
+        for (int i = 0; i < 10000; i++) {
             testEnableReferencingServicesGraph(scheduler);
         }
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/scheduling/TestStandardProcessScheduler.java
Patch:
@@ -48,6 +48,7 @@
 import org.apache.nifi.reporting.ReportingContext;
 import org.apache.nifi.reporting.ReportingInitializationContext;
 import org.apache.nifi.scheduling.SchedulingStrategy;
+import org.apache.nifi.util.NiFiProperties;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.Mockito;
@@ -60,6 +61,7 @@ public class TestStandardProcessScheduler {
     @Before
     public void setup() throws InitializationException {
         System.setProperty("nifi.properties.file.path", "src/test/resources/nifi.properties");
+        NiFiProperties.getNewInstance(); // ensures that properties have been reloaded
         scheduler = new StandardProcessScheduler(Mockito.mock(Heartbeater.class), Mockito.mock(ControllerServiceProvider.class), null);
         scheduler.setSchedulingAgent(SchedulingStrategy.TIMER_DRIVEN, Mockito.mock(SchedulingAgent.class));
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/remote/RemoteNiFiUtils.java
Patch:
@@ -188,7 +188,7 @@ public ControllerDTO getController(final URI uri, final int timeoutMillis) throw
      * @return response
      */
     public ClientResponse issueRegistrationRequest(String baseApiUri) {
-        final URI uri = URI.create(String.format("%s/%s", baseApiUri, "/controller/users"));
+        final URI uri = URI.create(String.format("%s/controller/users", baseApiUri));
 
         // set up the query params
         MultivaluedMapImpl entity = new MultivaluedMapImpl();
@@ -198,6 +198,6 @@ public ClientResponse issueRegistrationRequest(String baseApiUri) {
         WebResource webResource = client.resource(uri);
 
         // get the client utils and make the request
-        return webResource.accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_FORM_URLENCODED).entity(entity).post(ClientResponse.class);
+        return webResource.type(MediaType.APPLICATION_FORM_URLENCODED).entity(entity).post(ClientResponse.class);
     }
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-site-to-site/src/main/java/org/apache/nifi/controller/util/RemoteProcessGroupUtils.java
Patch:
@@ -203,7 +203,7 @@ private ControllerDTO getController(final URI uri, final int timeoutMillis) thro
      * @return the response of the request
      */
     public ClientResponse issueRegistrationRequest(String baseApiUri) {
-        final URI uri = URI.create(String.format("%s/%s", baseApiUri, "/controller/users"));
+        final URI uri = URI.create(String.format("%s/controller/users", baseApiUri));
 
         // set up the query params
         MultivaluedMapImpl entity = new MultivaluedMapImpl();
@@ -213,6 +213,6 @@ public ClientResponse issueRegistrationRequest(String baseApiUri) {
         WebResource webResource = client.resource(uri);
 
         // get the client utils and make the request
-        return webResource.accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_FORM_URLENCODED).entity(entity).post(ClientResponse.class);
+        return webResource.type(MediaType.APPLICATION_FORM_URLENCODED).entity(entity).post(ClientResponse.class);
     }
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/repository/StandardProcessSession.java
Patch:
@@ -1210,7 +1210,7 @@ public List<FlowFileRecord> poll(final FlowFileQueue queue, final Set<FlowFileRe
 
                     @Override
                     public FlowFileFilterResult filter(final FlowFile flowFile) {
-                        if (++polled <= maxResults) {
+                        if (++polled < maxResults) {
                             return FlowFileFilterResult.ACCEPT_AND_CONTINUE;
                         } else {
                             return FlowFileFilterResult.ACCEPT_AND_TERMINATE;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/JmsConsumer.java
Patch:
@@ -21,7 +21,6 @@
 import static org.apache.nifi.processors.standard.util.JmsProperties.BATCH_SIZE;
 import static org.apache.nifi.processors.standard.util.JmsProperties.CLIENT_ID_PREFIX;
 import static org.apache.nifi.processors.standard.util.JmsProperties.DESTINATION_NAME;
-import static org.apache.nifi.processors.standard.util.JmsProperties.DESTINATION_TYPE;
 import static org.apache.nifi.processors.standard.util.JmsProperties.JMS_PROPS_TO_ATTRIBUTES;
 import static org.apache.nifi.processors.standard.util.JmsProperties.JMS_PROVIDER;
 import static org.apache.nifi.processors.standard.util.JmsProperties.MESSAGE_SELECTOR;
@@ -90,7 +89,6 @@ public JmsConsumer() {
         descriptors.add(USERNAME);
         descriptors.add(PASSWORD);
         descriptors.add(SSL_CONTEXT_SERVICE);
-        descriptors.add(DESTINATION_TYPE);
         descriptors.add(ACKNOWLEDGEMENT_MODE);
         descriptors.add(MESSAGE_SELECTOR);
         descriptors.add(JMS_PROPS_TO_ATTRIBUTES);

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ConvertJSONToSQL.java
Patch:
@@ -172,7 +172,7 @@ public class ConvertJSONToSQL extends AbstractProcessor {
 
         @Override
         protected boolean removeEldestEntry(Map.Entry<SchemaKey,TableSchema> eldest) {
-            return true;
+            return size() >= 100;
         }
     };
 

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/sqs/GetSQS.java
Patch:
@@ -105,9 +105,10 @@ public class GetSQS extends AbstractSQSProcessor {
 
     public static final PropertyDescriptor RECEIVE_MSG_WAIT_TIME = new PropertyDescriptor.Builder()
             .name("Receive Message Wait Time")
-            .description("The maximum amount of time to wait on a long polling receive call. Setting this to a value of 1 second or greater will reduce the number of SQS requests and decrease fetch latency at the cost of a constantly active thread.")
+            .description("The maximum amount of time to wait on a long polling receive call. Setting this to a value of 1 second or greater will "
+                + "reduce the number of SQS requests and decrease fetch latency at the cost of a constantly active thread.")
             .expressionLanguageSupported(false)
-            .required(false)
+            .required(true)
             .defaultValue("0 sec")
             .addValidator(StandardValidators.createTimePeriodValidator(0, TimeUnit.SECONDS, 20, TimeUnit.SECONDS))  // 20 seconds is the maximum allowed by SQS
             .build();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/x509/X509IdentityProvider.java
Patch:
@@ -79,7 +79,7 @@ public AuthenticationResponse authenticate(final X509Certificate[] certificates)
         }
 
         // build the authentication response
-        return new AuthenticationResponse(principal, principal, TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS), issuer);
+        return new AuthenticationResponse(principal, principal, TimeUnit.MILLISECONDS.convert(12, TimeUnit.HOURS), issuer);
     }
 
     /* setters */

File: nifi-bootstrap/src/main/java/org/apache/nifi/bootstrap/RunNiFi.java
Patch:
@@ -705,9 +705,9 @@ public void stop() throws IOException {
         } catch (final IOException ioe) {
             if (pid == null) {
                 logger.error("Failed to send shutdown command to port {} due to {}. No PID found for the NiFi process, so unable to kill process; "
-                    + "the process should be killed manually.", new Object[] {port, ioe.toString(), ioe});
+                    + "the process should be killed manually.", new Object[] {port, ioe.toString()});
             } else {
-                logger.error("Failed to send shutdown command to port {} due to {}. Will kill the NiFi Process with PID {}.", new Object[] {port, ioe.toString(), ioe, pid});
+                logger.error("Failed to send shutdown command to port {} due to {}. Will kill the NiFi Process with PID {}.", new Object[] {port, ioe.toString(), pid});
                 killProcessTree(pid, logger);
             }
         } finally {

File: nifi-api/src/main/java/org/apache/nifi/web/NiFiWebConfigurationContext.java
Patch:
@@ -54,7 +54,7 @@ public interface NiFiWebConfigurationContext {
     void saveActions(NiFiWebRequestContext requestContext, Collection<ConfigurationAction> actions);
 
     /**
-     * @return the current user dn. Returns null if no user is found
+     * @return the current user identity. The value may be a DN, an email, a username, or any string that identities the user. Returns null if no user is found
      */
     String getCurrentUserDn();
 

File: nifi-api/src/main/java/org/apache/nifi/web/NiFiWebContext.java
Patch:
@@ -51,7 +51,7 @@ public interface NiFiWebContext {
     void saveActions(Collection<ProcessorConfigurationAction> actions);
 
     /**
-     * @return the current user dn. Returns null if no user is found
+     * @return the current user identity. It may be a dn, an email, a username, or any string that identities the user. Returns null if no user is found
      */
     String getCurrentUserDn();
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-administration/src/main/java/org/apache/nifi/admin/dao/DAOFactory.java
Patch:
@@ -26,4 +26,6 @@ public interface DAOFactory {
     ActionDAO getActionDAO();
 
     AuthorityDAO getAuthorityDAO();
+
+    KeyDAO getKeyDAO();
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-administration/src/main/java/org/apache/nifi/admin/service/action/AbstractUserAction.java
Patch:
@@ -76,14 +76,14 @@ protected Set<Authority> determineAuthoritiesToRemove(NiFiUser user, Set<Authori
      */
     protected void verifyAccount(AuthorityProvider authorityProvider, NiFiUser user) {
         // load the roles for the user
-        Set<Authority> authorities = authorityProvider.getAuthorities(user.getDn());
+        Set<Authority> authorities = authorityProvider.getAuthorities(user.getIdentity());
 
         // update the user's authorities
         user.getAuthorities().clear();
         user.getAuthorities().addAll(authorities);
 
         // get the user group
-        user.setUserGroup(authorityProvider.getGroupForUser(user.getDn()));
+        user.setUserGroup(authorityProvider.getGroupForUser(user.getIdentity()));
 
         // update the users status in case they were previously pending or disabled
         user.setStatus(AccountStatus.ACTIVE);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-administration/src/main/java/org/apache/nifi/admin/service/action/DisableUserAction.java
Patch:
@@ -63,12 +63,12 @@ public NiFiUser execute(DAOFactory daoFactory, AuthorityProvider authorityProvid
 
         try {
             // revoke the user in the authority provider
-            authorityProvider.revokeUser(user.getDn());
+            authorityProvider.revokeUser(user.getIdentity());
         } catch (UnknownIdentityException uie) {
             // user identity is not known
-            logger.info(String.format("User %s has already been removed from the authority provider.", user.getDn()));
+            logger.info(String.format("User %s has already been removed from the authority provider.", user.getIdentity()));
         } catch (AuthorityAccessException aae) {
-            throw new AdministrationException(String.format("Unable to revoke user '%s': %s", user.getDn(), aae.getMessage()), aae);
+            throw new AdministrationException(String.format("Unable to revoke user '%s': %s", user.getIdentity(), aae.getMessage()), aae);
         }
 
         return user;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-administration/src/main/java/org/apache/nifi/admin/service/action/UngroupUserAction.java
Patch:
@@ -56,11 +56,11 @@ public Void execute(DAOFactory daoFactory, AuthorityProvider authorityProvider)
 
         try {
             // update the authority provider
-            authorityProvider.ungroupUser(user.getDn());
+            authorityProvider.ungroupUser(user.getIdentity());
         } catch (UnknownIdentityException uie) {
-            throw new AccountNotFoundException(String.format("Unable to ungroup user '%s': %s", user.getDn(), uie.getMessage()), uie);
+            throw new AccountNotFoundException(String.format("Unable to ungroup user '%s': %s", user.getIdentity(), uie.getMessage()), uie);
         } catch (AuthorityAccessException aae) {
-            throw new AdministrationException(String.format("Unable to ungroup user '%s': %s", user.getDn(), aae.getMessage()), aae);
+            throw new AdministrationException(String.format("Unable to ungroup user '%s': %s", user.getIdentity(), aae.getMessage()), aae);
         }
 
         return null;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-nar-utils/src/main/java/org/apache/nifi/nar/NarThreadContextClassLoader.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.ArrayList;
 import java.util.Enumeration;
 import java.util.List;
+import org.apache.nifi.authentication.LoginIdentityProvider;
 
 import org.apache.nifi.authorization.AuthorityProvider;
 import org.apache.nifi.components.Validator;
@@ -58,6 +59,7 @@ public class NarThreadContextClassLoader extends URLClassLoader {
         narSpecificClasses.add(StreamCallback.class);
         narSpecificClasses.add(ControllerService.class);
         narSpecificClasses.add(AuthorityProvider.class);
+        narSpecificClasses.add(LoginIdentityProvider.class);
         narSpecificClasses.add(ProvenanceEventRepository.class);
         narSpecificClasses.add(ComponentStatusRepository.class);
         narSpecificClasses.add(FlowFileRepository.class);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/audit/FunnelAuditor.java
Patch:
@@ -121,7 +121,7 @@ public Action generateAuditRecord(Funnel funnel, Operation operation, ActionDeta
         if (user != null) {
             // create the action for adding this funnel
             action = new FlowChangeAction();
-            action.setUserIdentity(user.getDn());
+            action.setUserIdentity(user.getIdentity());
             action.setUserName(user.getUserName());
             action.setOperation(operation);
             action.setTimestamp(new Date());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/audit/PortAuditor.java
Patch:
@@ -205,7 +205,7 @@ public Port updatePortAdvice(ProceedingJoinPoint proceedingJoinPoint, String gro
                 for (ActionDetails detail : configurationDetails) {
                     // create the port action for updating the name
                     FlowChangeAction portAction = new FlowChangeAction();
-                    portAction.setUserIdentity(user.getDn());
+                    portAction.setUserIdentity(user.getIdentity());
                     portAction.setUserName(user.getUserName());
                     portAction.setOperation(Operation.Configure);
                     portAction.setTimestamp(timestamp);
@@ -225,7 +225,7 @@ public Port updatePortAdvice(ProceedingJoinPoint proceedingJoinPoint, String gro
             if (scheduledState != updatedScheduledState) {
                 // create a processor action
                 FlowChangeAction processorAction = new FlowChangeAction();
-                processorAction.setUserIdentity(user.getDn());
+                processorAction.setUserIdentity(user.getIdentity());
                 processorAction.setUserName(user.getUserName());
                 processorAction.setTimestamp(new Date());
                 processorAction.setSourceId(updatedPort.getIdentifier());
@@ -323,7 +323,7 @@ public Action generateAuditRecord(Port port, Operation operation, ActionDetails
 
             // create the port action for adding this processor
             action = new FlowChangeAction();
-            action.setUserIdentity(user.getDn());
+            action.setUserIdentity(user.getIdentity());
             action.setUserName(user.getUserName());
             action.setOperation(operation);
             action.setTimestamp(new Date());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/audit/ProcessGroupAuditor.java
Patch:
@@ -140,7 +140,7 @@ public ProcessGroup updateProcessGroupAdvice(ProceedingJoinPoint proceedingJoinP
 
                     // create the port action for updating the name
                     FlowChangeAction processGroupAction = new FlowChangeAction();
-                    processGroupAction.setUserIdentity(user.getDn());
+                    processGroupAction.setUserIdentity(user.getIdentity());
                     processGroupAction.setUserName(user.getUserName());
                     processGroupAction.setOperation(operation);
                     processGroupAction.setTimestamp(timestamp);
@@ -157,7 +157,7 @@ public ProcessGroup updateProcessGroupAdvice(ProceedingJoinPoint proceedingJoinP
             if (processGroupDTO.isRunning() != null) {
                 // create a process group action
                 FlowChangeAction processGroupAction = new FlowChangeAction();
-                processGroupAction.setUserIdentity(user.getDn());
+                processGroupAction.setUserIdentity(user.getIdentity());
                 processGroupAction.setUserName(user.getUserName());
                 processGroupAction.setSourceId(processGroup.getIdentifier());
                 processGroupAction.setSourceName(processGroup.getName());
@@ -242,7 +242,7 @@ public Action generateAuditRecord(ProcessGroup processGroup, Operation operation
 
             // create the process group action for adding this process group
             action = new FlowChangeAction();
-            action.setUserIdentity(user.getDn());
+            action.setUserIdentity(user.getIdentity());
             action.setUserName(user.getUserName());
             action.setOperation(operation);
             action.setTimestamp(new Date());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/audit/ProcessorAuditor.java
Patch:
@@ -177,7 +177,7 @@ public ProcessorNode updateProcessorAdvice(ProceedingJoinPoint proceedingJoinPoi
 
                     // create a configuration action
                     FlowChangeAction configurationAction = new FlowChangeAction();
-                    configurationAction.setUserIdentity(user.getDn());
+                    configurationAction.setUserIdentity(user.getIdentity());
                     configurationAction.setUserName(user.getUserName());
                     configurationAction.setOperation(operation);
                     configurationAction.setTimestamp(actionTimestamp);
@@ -197,7 +197,7 @@ public ProcessorNode updateProcessorAdvice(ProceedingJoinPoint proceedingJoinPoi
             if (scheduledState != updatedScheduledState) {
                 // create a processor action
                 FlowChangeAction processorAction = new FlowChangeAction();
-                processorAction.setUserIdentity(user.getDn());
+                processorAction.setUserIdentity(user.getIdentity());
                 processorAction.setUserName(user.getUserName());
                 processorAction.setTimestamp(new Date());
                 processorAction.setSourceId(processor.getIdentifier());
@@ -294,7 +294,7 @@ public Action generateAuditRecord(ProcessorNode processor, Operation operation,
 
             // create the processor action for adding this processor
             action = new FlowChangeAction();
-            action.setUserIdentity(user.getDn());
+            action.setUserIdentity(user.getIdentity());
             action.setUserName(user.getUserName());
             action.setOperation(operation);
             action.setTimestamp(new Date());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/audit/RelationshipAuditor.java
Patch:
@@ -188,7 +188,7 @@ public Connection updateConnectionAdvice(ProceedingJoinPoint proceedingJoinPoint
 
                     // create a configuration action
                     FlowChangeAction configurationAction = new FlowChangeAction();
-                    configurationAction.setUserIdentity(user.getDn());
+                    configurationAction.setUserIdentity(user.getIdentity());
                     configurationAction.setUserName(user.getUserName());
                     configurationAction.setOperation(Operation.Configure);
                     configurationAction.setTimestamp(actionTimestamp);
@@ -353,7 +353,7 @@ public Action generateAuditRecordForConnection(Connection connection, Operation
 
             // create a new relationship action
             action = new FlowChangeAction();
-            action.setUserIdentity(user.getDn());
+            action.setUserIdentity(user.getIdentity());
             action.setUserName(user.getUserName());
             action.setOperation(operation);
             action.setTimestamp(actionTimestamp);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/audit/RemoteProcessGroupAuditor.java
Patch:
@@ -246,7 +246,7 @@ public RemoteProcessGroup auditUpdateProcessGroupConfiguration(
                 for (ActionDetails detail : details) {
                     // create the port action for updating the name
                     FlowChangeAction remoteProcessGroupAction = new FlowChangeAction();
-                    remoteProcessGroupAction.setUserIdentity(user.getDn());
+                    remoteProcessGroupAction.setUserIdentity(user.getIdentity());
                     remoteProcessGroupAction.setUserName(user.getUserName());
                     remoteProcessGroupAction.setOperation(Operation.Configure);
                     remoteProcessGroupAction.setTimestamp(timestamp);
@@ -267,7 +267,7 @@ public RemoteProcessGroup auditUpdateProcessGroupConfiguration(
             if (transmissionState != updatedTransmissionState) {
                 // create a processor action
                 FlowChangeAction remoteProcessGroupAction = new FlowChangeAction();
-                remoteProcessGroupAction.setUserIdentity(user.getDn());
+                remoteProcessGroupAction.setUserIdentity(user.getIdentity());
                 remoteProcessGroupAction.setUserName(user.getUserName());
                 remoteProcessGroupAction.setTimestamp(new Date());
                 remoteProcessGroupAction.setSourceId(updatedRemoteProcessGroup.getIdentifier());
@@ -356,7 +356,7 @@ public Action generateAuditRecord(RemoteProcessGroup remoteProcessGroup, Operati
 
             // create the remote process group action
             action = new FlowChangeAction();
-            action.setUserIdentity(user.getDn());
+            action.setUserIdentity(user.getIdentity());
             action.setUserName(user.getUserName());
             action.setOperation(operation);
             action.setTimestamp(new Date());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/audit/ReportingTaskAuditor.java
Patch:
@@ -160,7 +160,7 @@ public Object updateReportingTaskAdvice(ProceedingJoinPoint proceedingJoinPoint,
 
                     // create a configuration action
                     FlowChangeAction configurationAction = new FlowChangeAction();
-                    configurationAction.setUserIdentity(user.getDn());
+                    configurationAction.setUserIdentity(user.getIdentity());
                     configurationAction.setUserName(user.getUserName());
                     configurationAction.setOperation(operation);
                     configurationAction.setTimestamp(actionTimestamp);
@@ -180,7 +180,7 @@ public Object updateReportingTaskAdvice(ProceedingJoinPoint proceedingJoinPoint,
             if (scheduledState != updatedScheduledState) {
                 // create a reporting task action
                 FlowChangeAction taskAction = new FlowChangeAction();
-                taskAction.setUserIdentity(user.getDn());
+                taskAction.setUserIdentity(user.getIdentity());
                 taskAction.setUserName(user.getUserName());
                 taskAction.setTimestamp(new Date());
                 taskAction.setSourceId(reportingTask.getIdentifier());
@@ -276,7 +276,7 @@ public Action generateAuditRecord(ReportingTaskNode reportingTask, Operation ope
 
             // create the reporting task action for adding this reporting task
             action = new FlowChangeAction();
-            action.setUserIdentity(user.getDn());
+            action.setUserIdentity(user.getIdentity());
             action.setUserName(user.getUserName());
             action.setOperation(operation);
             action.setTimestamp(new Date());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/audit/SnippetAuditor.java
Patch:
@@ -232,7 +232,7 @@ private FlowChangeAction generateAuditRecord(String id, String name, Component t
         if (user != null) {
             // create the action for adding this funnel
             action = new FlowChangeAction();
-            action.setUserIdentity(user.getDn());
+            action.setUserIdentity(user.getIdentity());
             action.setUserName(user.getUserName());
             action.setOperation(operation);
             action.setTimestamp(timestamp);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/config/AccessDeniedExceptionMapper.java
Patch:
@@ -39,7 +39,7 @@ public Response toResponse(AccessDeniedException exception) {
         // get the current user
         NiFiUser user = NiFiUserUtils.getNiFiUser();
         if (user != null) {
-            logger.info(String.format("%s does not have permission to access the requested resource. Returning %s response.", user.getDn(), Response.Status.FORBIDDEN));
+            logger.info(String.format("%s does not have permission to access the requested resource. Returning %s response.", user.getIdentity(), Response.Status.FORBIDDEN));
         } else {
             logger.info(String.format("User does not have permission to access the requested resource. Returning %s response.", Response.Status.FORBIDDEN));
         }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java
Patch:
@@ -2382,7 +2382,7 @@ public UserDTO createUserDTO(NiFiUser user) {
         // create the user
         UserDTO userDTO = new UserDTO();
         userDTO.setId(String.valueOf(user.getId()));
-        userDTO.setDn(user.getDn());
+        userDTO.setDn(user.getIdentity());
         userDTO.setUserName(user.getUserName());
         userDTO.setUserGroup(user.getUserGroup());
         userDTO.setJustification(user.getJustification());

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardConnectionDAO.java
Patch:
@@ -321,7 +321,7 @@ public DropFlowFileStatus createFileFlowDropRequest(String groupId, String id, S
             throw new WebApplicationException(new Throwable("Unable to access details for current user."));
         }
 
-        return queue.dropFlowFiles(dropRequestId, user.getDn());
+        return queue.dropFlowFiles(dropRequestId, user.getIdentity());
     }
 
     @Override

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/filter/RequestLogger.java
Patch:
@@ -52,13 +52,13 @@ public void doFilter(final ServletRequest req, final ServletResponse resp, final
             final NiFiUser user = NiFiUserUtils.getNiFiUser();
 
             // get the user details for the log message
-            String dn = "<no user found>";
+            String identity = "<no user found>";
             if (user != null) {
-                dn = user.getDn();
+                identity = user.getIdentity();
             }
 
             // log the request attempt - response details will be logged later
-            logger.info(String.format("Attempting request for (%s) %s %s (source ip: %s)", dn, request.getMethod(),
+            logger.info(String.format("Attempting request for (%s) %s %s (source ip: %s)", identity, request.getMethod(),
                     request.getRequestURL().toString(), request.getRemoteAddr()));
         }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/integration/util/NiFiTestAuthorizationProvider.java
Patch:
@@ -37,7 +37,7 @@
  */
 public class NiFiTestAuthorizationProvider implements AuthorityProvider {
 
-    private Map<String, Set<Authority>> users;
+    private final Map<String, Set<Authority>> users;
 
     /**
      * Creates a new FileAuthorizationProvider.
@@ -48,6 +48,7 @@ public NiFiTestAuthorizationProvider() {
         users.put("CN=Lastname Firstname Middlename monitor, OU=Unknown, OU=Unknown, OU=Unknown, O=Unknown, C=Unknown", EnumSet.of(Authority.ROLE_MONITOR));
         users.put("CN=Lastname Firstname Middlename dfm, OU=Unknown, OU=Unknown, OU=Unknown, O=Unknown, C=Unknown", EnumSet.of(Authority.ROLE_DFM));
         users.put("CN=Lastname Firstname Middlename admin, OU=Unknown, OU=Unknown, OU=Unknown, O=Unknown, C=Unknown", EnumSet.of(Authority.ROLE_ADMIN));
+        users.put("user@nifi", EnumSet.of(Authority.ROLE_DFM));
     }
 
     @Override

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/user/NiFiUserDetails.java
Patch:
@@ -73,10 +73,9 @@ public String getPassword() {
 
     @Override
     public String getUsername() {
-        return user.getDn();
+        return user.getIdentity();
     }
 
-    // TODO: not sure how to handle these yet
     @Override
     public boolean isAccountNonExpired() {
         return true;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/x509/X509CertificateExtractor.java
Patch:
@@ -35,11 +35,11 @@ public class X509CertificateExtractor {
      * @param request http request
      * @return cert
      */
-    public X509Certificate extractClientCertificate(HttpServletRequest request) {
+    public X509Certificate[] extractClientCertificate(HttpServletRequest request) {
         X509Certificate[] certs = (X509Certificate[]) request.getAttribute("javax.servlet.request.X509Certificate");
 
         if (certs != null && certs.length > 0) {
-            return certs[0];
+            return certs;
         }
 
         if (logger.isDebugEnabled()) {

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/AbstractSyslogProcessor.java
Patch:
@@ -66,7 +66,7 @@ public enum SyslogAttributes implements FlowFileAttributeKey {
         BODY("syslog.body"),
         VALID("syslog.valid"),
         PROTOCOL("syslog.protocol"),
-        PORT("syslog.pprt");
+        PORT("syslog.port");
 
         private String key;
 

File: nifi-nar-bundles/nifi-hbase-bundle/nifi-hbase-processors/src/main/java/org/apache/nifi/hbase/GetHBase.java
Patch:
@@ -41,6 +41,7 @@
 import org.apache.nifi.hbase.scan.ResultHandler;
 import org.apache.nifi.hbase.util.ObjectSerDe;
 import org.apache.nifi.hbase.util.StringSerDe;
+import org.apache.nifi.processor.AbstractProcessor;
 import org.apache.nifi.processor.ProcessContext;
 import org.apache.nifi.processor.ProcessSession;
 import org.apache.nifi.processor.Relationship;
@@ -83,7 +84,7 @@
     @WritesAttribute(attribute = "hbase.table", description = "The name of the HBase table that the data was pulled from"),
     @WritesAttribute(attribute = "mime.type", description = "Set to application/json to indicate that output is JSON")
 })
-public class GetHBase extends AbstractHBaseProcessor {
+public class GetHBase extends AbstractProcessor {
 
     static final Pattern COLUMNS_PATTERN = Pattern.compile("\\w+(:\\w+)?(?:,\\w+(:\\w+)?)*");
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-administration/src/main/java/org/apache/nifi/key/Key.java
Patch:
@@ -29,7 +29,7 @@ public class Key implements Serializable {
 
     /**
      * The key id.
-     * 
+     *
      * @return the id
      */
     public int getId() {
@@ -42,7 +42,7 @@ public void setId(int id) {
 
     /**
      * The identity of the user this key is associated with.
-     * 
+     *
      * @return the identity
      */
     public String getIdentity() {
@@ -55,7 +55,7 @@ public void setIdentity(String identity) {
 
     /**
      * The signing key.
-     * 
+     *
      * @return the signing key
      */
     public String getKey() {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/x509/X509IdentityProvider.java
Patch:
@@ -31,9 +31,9 @@
 public class X509IdentityProvider {
 
     private static final Logger logger = LoggerFactory.getLogger(X509IdentityProvider.class);
-    
+
     private final String issuer = getClass().getSimpleName();
-    
+
     private X509CertificateValidator certificateValidator;
     private X509PrincipalExtractor principalExtractor;
 

File: nifi-nar-bundles/nifi-ldap-iaa-providers-bundle/nifi-ldap-iaa-providers/src/main/java/org/apache/nifi/ldap/LdapProvider.java
Patch:
@@ -227,7 +227,7 @@ private void setTimeout(final LoginIdentityProviderConfigurationContext configur
             final Map<String, Object> baseEnvironment,
             final String configurationProperty,
             final String environmentKey) {
-        
+
         final String rawTimeout = configurationContext.getProperty(configurationProperty);
         if (StringUtils.isNotBlank(rawTimeout)) {
             try {
@@ -238,7 +238,7 @@ private void setTimeout(final LoginIdentityProviderConfigurationContext configur
             }
         }
     }
-    
+
     @Override
     public final AuthenticationResponse authenticate(final LoginCredentials credentials) throws InvalidLoginCredentialsException, IdentityAccessException {
         if (provider == null) {

File: nifi-nar-bundles/nifi-update-attribute-bundle/nifi-update-attribute-processor/src/main/java/org/apache/nifi/processors/attributes/UpdateAttribute.java
Patch:
@@ -133,7 +133,7 @@ public class UpdateAttribute extends AbstractProcessor implements Searchable {
     private final Set<Relationship> relationships;
 
     private static final Validator DELETE_PROPERTY_VALIDATOR = new Validator() {
-        private static final Validator DPV_RE_VALIDATOR = StandardValidators.createRegexValidator(0, Integer.MAX_VALUE, true);
+        private final Validator DPV_RE_VALIDATOR = StandardValidators.createRegexValidator(0, Integer.MAX_VALUE, true);
         @Override
         public ValidationResult validate(String subject, String input, ValidationContext context) {
             if (context.isExpressionLanguageSupported(subject) && context.isExpressionLanguagePresent(input)) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/integration/util/NiFiTestLoginIdentityProvider.java
Patch:
@@ -57,7 +57,7 @@ private void checkUser(final String user, final String password) {
     @Override
     public AuthenticationResponse authenticate(LoginCredentials credentials) throws InvalidLoginCredentialsException, IdentityAccessException {
         checkUser(credentials.getUsername(), credentials.getPassword());
-        return new AuthenticationResponse(credentials.getUsername(), credentials.getUsername(), TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS));
+        return new AuthenticationResponse(credentials.getUsername(), credentials.getUsername(), TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS), getClass().getSimpleName());
     }
 
     @Override

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/AccessResource.java
Patch:
@@ -191,7 +191,7 @@ public Response getAccessStatus(
                     final String principal = jwtService.getAuthentication(httpServletRequest);
 
                     // TODO - catch jwt exception?
-                    // ensure we have something we can work with (certificate or crendentials)
+                    // ensure we have something we can work with (certificate or credentials)
                     if (principal == null) {
                         throw new IllegalArgumentException("The specific token is not valid.");
                     } else {
@@ -334,7 +334,7 @@ public Response createAccessToken(
                 }
                 
                 // create the authentication token
-                loginAuthenticationToken = new LoginAuthenticationToken(authenticationResponse.getIdentity(), expiration);
+                loginAuthenticationToken = new LoginAuthenticationToken(authenticationResponse.getIdentity(), expiration, loginIdentityProvider.getClass().getSimpleName());
             } catch (final InvalidLoginCredentialsException ilce) {
                 throw new IllegalArgumentException("The supplied username and password are not valid.", ilce);
             } catch (final IdentityAccessException iae) {
@@ -355,7 +355,7 @@ public Response createAccessToken(
             authorizeProxyIfNecessary(proxyChain);
 
             // create the authentication token
-            loginAuthenticationToken = new LoginAuthenticationToken(proxyChain.get(0), authenticationResponse.getExpiration());
+            loginAuthenticationToken = new LoginAuthenticationToken(proxyChain.get(0), authenticationResponse.getExpiration(), certificateIdentityProvider.getClass().getSimpleName());
         }
 
         // generate JWT for response

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java
Patch:
@@ -148,7 +148,7 @@ public int compare(Class class1, Class class2) {
         }
     };
 
-    final int MAX_BULLETINS_PER_COMPONENT = 5;
+    final static int MAX_BULLETINS_PER_COMPONENT = 5;
 
     private ControllerServiceLookup controllerServiceLookup;
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/AttributesToJSON.java
Patch:
@@ -66,7 +66,7 @@ public class AttributesToJSON extends AbstractProcessor {
 
     public static final String DESTINATION_ATTRIBUTE = "flowfile-attribute";
     public static final String DESTINATION_CONTENT = "flowfile-content";
-    private final String APPLICATION_JSON = "application/json";
+    private static final String APPLICATION_JSON = "application/json";
 
 
     public static final PropertyDescriptor ATTRIBUTES_LIST = new PropertyDescriptor.Builder()

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/GetHTTP.java
Patch:
@@ -56,7 +56,6 @@
 import org.apache.http.auth.AuthScope;
 import org.apache.http.auth.UsernamePasswordCredentials;
 import org.apache.http.client.CredentialsProvider;
-import org.apache.http.client.HttpClient;
 import org.apache.http.client.config.RequestConfig;
 import org.apache.http.client.methods.HttpGet;
 import org.apache.http.config.Registry;
@@ -67,6 +66,7 @@
 import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
 import org.apache.http.conn.ssl.TrustSelfSignedStrategy;
 import org.apache.http.impl.client.BasicCredentialsProvider;
+import org.apache.http.impl.client.CloseableHttpClient;
 import org.apache.http.impl.client.HttpClientBuilder;
 import org.apache.http.impl.conn.BasicHttpClientConnectionManager;
 import org.apache.http.ssl.SSLContextBuilder;
@@ -438,7 +438,7 @@ public void onTrigger(final ProcessContext context, final ProcessSessionFactory
             }
 
             // create the http client
-            final HttpClient client = clientBuilder.build();
+            final CloseableHttpClient client = clientBuilder.build();
 
             // create request
             final HttpGet get = new HttpGet(url);
@@ -539,7 +539,6 @@ public void onTrigger(final ProcessContext context, final ProcessSessionFactory
                 logger.error("Failed to process due to {}; rolling back session", new Object[]{t.getMessage()}, t);
                 throw t;
             }
-
         } finally {
             conMan.shutdown();
         }

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/PostHTTP.java
Patch:
@@ -49,6 +49,7 @@
 import javax.security.cert.X509Certificate;
 import javax.servlet.http.HttpServletResponse;
 
+import org.apache.commons.io.IOUtils;
 import org.apache.http.Header;
 import org.apache.http.HttpException;
 import org.apache.http.HttpHost;
@@ -637,6 +638,7 @@ public void process(final InputStream rawIn) throws IOException {
                         + "configured to deliver FlowFiles; rolling back session", new Object[]{url});
                 session.rollback();
                 context.yield();
+                IOUtils.closeQuietly(client);
                 return;
             }
         } else {

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/SplitText.java
Patch:
@@ -353,7 +353,7 @@ private void finishFragmentAttributes(final ProcessSession session, final FlowFi
         }
     }
 
-    private class SplitInfo {
+    private static class SplitInfo {
 
         public long offsetBytes;
         public long lengthBytes;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/util/OpenPGPKeyBasedEncryptor.java
Patch:
@@ -134,7 +134,7 @@ public static PGPPublicKey getPublicKey(String userId, String publicKeyring) thr
         return null;
     }
 
-    private class OpenPGPDecryptCallback implements StreamCallback {
+    private static class OpenPGPDecryptCallback implements StreamCallback {
 
         private String provider;
         private String secretKeyring;
@@ -216,7 +216,7 @@ public void process(InputStream in, OutputStream out) throws IOException {
 
     }
 
-    private class OpenPGPEncryptCallback implements StreamCallback {
+    private static class OpenPGPEncryptCallback implements StreamCallback {
 
         private String algorithm;
         private String provider;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/util/OpenPGPPasswordBasedEncryptor.java
Patch:
@@ -65,7 +65,7 @@ public StreamCallback getDecryptionCallback() throws Exception {
         return new OpenPGPDecryptCallback(provider, password);
     }
 
-    private class OpenPGPDecryptCallback implements StreamCallback {
+    private static class OpenPGPDecryptCallback implements StreamCallback {
 
         private String provider;
         private char[] password;
@@ -120,7 +120,7 @@ public void process(InputStream in, OutputStream out) throws IOException {
 
     }
 
-    private class OpenPGPEncryptCallback implements StreamCallback {
+    private static class OpenPGPEncryptCallback implements StreamCallback {
 
         private String algorithm;
         private String provider;

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestGetHTTP.java
Patch:
@@ -375,7 +375,7 @@ public final void testSecure_twoWaySsl() throws Exception {
             // Use context service with a keystore and a truststore
             useSSLContextService(twoWaySslProperties);
 
-            controller.setProperty(GetHTTP.CONNECTION_TIMEOUT, "5 secs");
+            controller.setProperty(GetHTTP.CONNECTION_TIMEOUT, "10 secs");
             controller.setProperty(GetHTTP.URL, destination);
             controller.setProperty(GetHTTP.FILENAME, "testFile");
             controller.setProperty(GetHTTP.ACCEPT_CONTENT_TYPE, "application/json");

File: nifi-nar-bundles/nifi-provenance-repository-bundle/nifi-persistent-provenance-repository/src/main/java/org/apache/nifi/provenance/PersistentProvenanceRepository.java
Patch:
@@ -1784,6 +1784,7 @@ QueryResult queryEvents(final Query query) throws IOException {
             try {
                 Thread.sleep(100L);
             } catch (final InterruptedException ie) {
+                Thread.currentThread().interrupt();
             }
         }
 

File: nifi-nar-bundles/nifi-provenance-repository-bundle/nifi-persistent-provenance-repository/src/main/java/org/apache/nifi/provenance/lucene/IndexSearch.java
Patch:
@@ -89,7 +89,7 @@ public StandardQueryResult search(final org.apache.nifi.provenance.search.Query
                 return sqr;
             }
 
-            final DocsReader docsReader = new DocsReader(repository.getConfiguration().getStorageDirectories());
+            final DocsReader docsReader = new DocsReader();
             matchingRecords = docsReader.read(topDocs, searcher.getIndexReader(), repository.getAllLogFiles(), retrievedCount,
                 provenanceQuery.getMaxResults(), maxAttributeChars);
 

File: nifi-nar-bundles/nifi-provenance-repository-bundle/nifi-persistent-provenance-repository/src/main/java/org/apache/nifi/provenance/lucene/LineageQuery.java
Patch:
@@ -93,7 +93,7 @@ public static Set<ProvenanceEventRecord> computeLineageForFlowFiles(final Persis
                 final TopDocs uuidQueryTopDocs = searcher.search(query, MAX_QUERY_RESULTS);
                 final long searchEnd = System.nanoTime();
 
-                final DocsReader docsReader = new DocsReader(repo.getConfiguration().getStorageDirectories());
+                final DocsReader docsReader = new DocsReader();
                 final Set<ProvenanceEventRecord> recs = docsReader.read(uuidQueryTopDocs, searcher.getIndexReader(), repo.getAllLogFiles(),
                     new AtomicInteger(0), Integer.MAX_VALUE, maxAttributeChars);
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/StandardFlowFileQueue.java
Patch:
@@ -764,7 +764,7 @@ public void setFlowFileExpiration(final String flowExpirationPeriod) {
         if (millis < 0) {
             throw new IllegalArgumentException("FlowFile Expiration Period must be positive");
         }
-        
+
         expirationPeriod.set(new TimePeriod(flowExpirationPeriod, millis));
     }
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/PutSyslog.java
Patch:
@@ -114,6 +114,7 @@ public class PutSyslog extends AbstractSyslogProcessor {
                     "\"yyyy-MM-dd'T'HH:mm:ss.SZ\" or \"yyyy-MM-dd'T'HH:mm:ss.S+hh:mm\", \" or it can be an RFC3164 timestamp " +
                     "with a format of \"MMM d HH:mm:ss\".")
             .required(true)
+            .defaultValue("${now():format('MMM d HH:mm:ss')}")
             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)
             .expressionLanguageSupported(true)
             .build();

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/login/LoginAuthenticationFilter.java
Patch:
@@ -205,7 +205,7 @@ protected void unsuccessfulAuthentication(final HttpServletRequest request, fina
         } else {
             response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
         }
-        
+
         response.setContentType("text/plain");
 
         final PrintWriter out = response.getWriter();

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/main/java/org/apache/nifi/processors/hadoop/PutHDFS.java
Patch:
@@ -345,7 +345,7 @@ public void process(InputStream in) throws IOException {
                 }
             }
             getLogger().error("Failed to write to HDFS due to {}", t);
-            session.rollback();
+            session.transfer(flowFile, REL_FAILURE);
             context.yield();
         }
     }

File: nifi-nar-bundles/nifi-avro-bundle/nifi-avro-processors/src/main/java/org/apache/nifi/processors/avro/SplitAvro.java
Patch:
@@ -218,7 +218,7 @@ private interface Splitter {
     /**
      * Splits the incoming Avro datafile into batches of records by reading and de-serializing each record.
      */
-    private class RecordSplitter implements Splitter {
+    static private class RecordSplitter implements Splitter {
 
         private final int splitSize;
         private final boolean transferMetadata;
@@ -300,7 +300,7 @@ private interface SplitWriter {
     /**
      * Writes a binary Avro Datafile to the OutputStream.
      */
-    private class DatafileSplitWriter implements SplitWriter {
+    static private class DatafileSplitWriter implements SplitWriter {
 
         private final boolean transferMetadata;
         private DataFileWriter<GenericRecord> writer;
@@ -344,7 +344,7 @@ public void close() throws IOException {
     /**
      * Writes bare Avro records to the OutputStream.
      */
-    private class BareRecordSplitWriter implements SplitWriter {
+    static private class BareRecordSplitWriter implements SplitWriter {
         private Encoder encoder;
         private DatumWriter<GenericRecord> writer;
 

File: nifi-api/src/main/java/org/apache/nifi/flowfile/FlowFile.java
Patch:
@@ -64,7 +64,7 @@ public interface FlowFile extends Comparable<FlowFile> {
      * @return a set of identifiers that are unique to this FlowFile's lineage.
      * If FlowFile X is derived from FlowFile Y, both FlowFiles will have the
      * same value for the Lineage Claim ID.
-     * 
+     *
      * @deprecated this collection was erroneously unbounded and caused a lot of OutOfMemoryError problems
      *             when dealing with FlowFiles with many ancestors. This Collection is
      *             now capped at 100 lineage identifiers. This method was introduced with the idea of providing

File: nifi-api/src/main/java/org/apache/nifi/provenance/ProvenanceEventRecord.java
Patch:
@@ -51,7 +51,7 @@ public interface ProvenanceEventRecord {
     /**
      * @return the set of all lineage identifiers that are associated with the
      * FlowFile for which this Event was created
-     * 
+     *
      * @deprecated this collection was erroneously unbounded and caused a lot of OutOfMemoryError problems
      *             when querying Provenance Events about FlowFiles with many ancestors. This Collection is
      *             now capped at 100 lineage identifiers. This method was introduced with the idea of providing

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestGetJMSQueue.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.nifi.processors.standard;
 
-import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
 import java.util.List;
@@ -34,8 +33,6 @@
 import org.apache.nifi.processors.standard.util.JmsProperties;
 import org.apache.nifi.processors.standard.util.WrappedMessageProducer;
 import org.apache.nifi.util.MockFlowFile;
-import org.apache.nifi.util.MockProcessSession;
-import org.apache.nifi.util.StandardProcessorTestRunner;
 import org.apache.nifi.util.TestRunner;
 import org.apache.nifi.util.TestRunners;
 import org.apache.nifi.web.Revision;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/FlowController.java
Patch:
@@ -3397,7 +3397,7 @@ public ProvenanceEventRecord replayFlowFile(final ProvenanceEventRecord event, f
             .addParentUuid(parentUUID)
             .setFlowFileUUID(parentUUID)
             .setAttributes(Collections.<String, String> emptyMap(), flowFileRecord.getAttributes())
-            .setCurrentContentClaim(event.getContentClaimSection(), event.getContentClaimContainer(), event.getContentClaimIdentifier(), event.getContentClaimOffset(), event.getFileSize())
+            .setCurrentContentClaim(event.getContentClaimContainer(), event.getContentClaimSection(), event.getContentClaimIdentifier(), event.getContentClaimOffset(), event.getFileSize())
             .setDetails("Replay requested by " + requestor)
             .setEventTime(System.currentTimeMillis())
             .setFlowFileEntryDate(System.currentTimeMillis())

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/test/java/org/apache/nifi/web/security/authorization/NiFiAuthorizationServiceTest.java
Patch:
@@ -107,7 +107,7 @@ public Object answer(InvocationOnMock invocation) throws Throwable {
     private NiFiAuthenticationRequestToken createRequestAuthentication(final String... identities) {
         return new NiFiAuthenticationRequestToken(Arrays.asList(identities));
     }
-    
+
     /**
      * Ensures the authorization service correctly handles users invalid identity chain.
      *
@@ -183,8 +183,7 @@ public void testInvalidProxy() throws Exception {
     }
 
     /**
-     * Ensures the authorization service correctly handles proxy not found by
-     * attempting to create an account request for the proxy.
+     * Ensures the authorization service correctly handles proxy not found by attempting to create an account request for the proxy.
      *
      * @throws Exception ex
      */

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/authorization/NiFiAuthorizationService.java
Patch:
@@ -111,7 +111,7 @@ public synchronized UserDetails loadUserDetails(NiFiAuthenticationRequestToken r
                             userService.createPendingUserAccount(dn, "Automatic account request generated for unknown proxy.");
 
                             // propagate the exception to return the appropriate response
-                            throw new UntrustedProxyException(String.format("An account request was generated for the proxy '%s'.", dn));
+                            throw new UsernameNotFoundException(String.format("An account request was generated for the proxy '%s'.", dn));
                         } catch (AdministrationException ae) {
                             throw new AuthenticationServiceException(String.format("Unable to create an account request for '%s': %s", dn, ae.getMessage()), ae);
                         } catch (IllegalArgumentException iae) {

File: nifi-nar-bundles/nifi-avro-bundle/nifi-avro-processors/src/main/java/org/apache/nifi/processors/avro/ConvertAvroToJSON.java
Patch:
@@ -138,7 +138,7 @@ public void process(final InputStream rawIn, final OutputStream rawOut) throws I
                             if (containerOption.equals(CONTAINER_ARRAY)) {
                                 out.write(',');
                             } else {
-                                out.write(System.lineSeparator().getBytes(StandardCharsets.UTF_8));
+                                out.write('\n');
                             }
 
                             final GenericRecord nextRecord = reader.next(record);

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/s3/DeleteS3Object.java
Patch:
@@ -41,7 +41,7 @@
 @SeeAlso({PutS3Object.class})
 @Tags({"Amazon", "S3", "AWS", "Archive", "Delete"})
 @CapabilityDescription("Deletes FlowFiles on an Amazon S3 Bucket. " +
-        "And the FlowFiles are checked if exists or not before deleting.")
+        "If attempting to delete a file that does not exist, FlowFile is routed to success.")
 public class DeleteS3Object extends AbstractS3Processor {
 
     public static final PropertyDescriptor VERSION_ID = new PropertyDescriptor.Builder()
@@ -80,6 +80,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
         try {
             if (versionId == null) {
                 final DeleteObjectRequest r = new DeleteObjectRequest(bucket, key);
+                // This call returns success if object doesn't exist
                 s3.deleteObject(r);
             } else {
                 final DeleteVersionRequest r = new DeleteVersionRequest(bucket, key, versionId);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/NiFiWebApiSecurityConfiguration.java
Patch:
@@ -94,7 +94,7 @@ protected void configure(HttpSecurity http) throws Exception {
                 http.addFilterBefore(buildRegistrationFilter("/registration"), UsernamePasswordAuthenticationFilter.class);
             }
         }
-        
+
         // login authentication for /token - exchanges for JWT for subsequent API usage
         http.addFilterBefore(buildLoginFilter("/token"), UsernamePasswordAuthenticationFilter.class);
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/form/LoginAuthenticationFilter.java
Patch:
@@ -134,7 +134,7 @@ public Authentication attemptAuthentication(final HttpServletRequest request, fi
                 return new LoginAuthenticationToken(preAuthenticatedCredentials);
             }
         } else {
-            // if not configuration for login, don't consider credentials 
+            // if not configuration for login, don't consider credentials
             if (loginIdentityProvider == null) {
                 throw new BadCredentialsException("Login not supported.");
             }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/anonymous/NiFiAnonymousUserFilter.java
Patch:
@@ -57,7 +57,7 @@ protected Authentication createAuthentication(HttpServletRequest request) {
             if (!request.isSecure()) {
                 user.getAuthorities().addAll(EnumSet.allOf(Authority.class));
             }
-            
+
             // only create an authentication token if the anonymous user has some authorities
             if (!user.getAuthorities().isEmpty()) {
                 NiFiUserDetails userDetails = new NiFiUserDetails(user);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/StandardFlowFileQueue.java
Patch:
@@ -1233,8 +1233,8 @@ private void incrementUnacknowledgedQueueSize(final int count, final long bytes)
     }
 
     private void logIfNegative(final FlowFileQueueSize original, final FlowFileQueueSize newSize, final String counterName) {
-        if (newSize.activeQueueBytes < 0 || newSize.activeQueueCount < 0 || newSize.swappedBytes < 0 || newSize.swappedCount < 0 ||
-            newSize.unacknowledgedBytes < 0 || newSize.unacknowledgedCount < 0) {
+        if (newSize.activeQueueBytes < 0 || newSize.activeQueueCount < 0 || newSize.swappedBytes < 0 || newSize.swappedCount < 0
+                || newSize.unacknowledgedBytes < 0 || newSize.unacknowledgedCount < 0) {
 
             logger.error("Updated Size of Queue " + counterName + " from " + original + " to " + newSize, new RuntimeException("Cannot create negative queue size"));
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ReportingTaskResource.java
Patch:
@@ -273,7 +273,7 @@ public Response createReportingTask(
     @Path("/{availability}")
     @PreAuthorize("hasRole('ROLE_DFM')")
     @ApiOperation(
-            value = "Creates a new remote process group",
+            value = "Creates a new reporting task",
             response = ReportingTaskEntity.class,
             authorizations = {
                 @Authorization(value = "Data Flow Manager", type = "ROLE_DFM")

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/AbstractSyslogProcessor.java
Patch:
@@ -64,7 +64,9 @@ public enum SyslogAttributes implements FlowFileAttributeKey {
         HOSTNAME("syslog.hostname"),
         SENDER("syslog.sender"),
         BODY("syslog.body"),
-        VALID("syslog.valid");
+        VALID("syslog.valid"),
+        PROTOCOL("syslog.protocol"),
+        PORT("syslog.pprt");
 
         private String key;
 

File: nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestListenSyslog.java
Patch:
@@ -391,7 +391,8 @@ public MockProcessor(List<SyslogEvent> eventList) {
         }
 
         @Override
-        protected ChannelReader createChannelReader(String protocol, BufferPool bufferPool, SyslogParser syslogParser, final BlockingQueue<SyslogEvent> syslogEvents) throws IOException {
+        protected ChannelReader createChannelReader(final String protocol, final BufferPool bufferPool, final SyslogParser syslogParser,
+                final BlockingQueue<SyslogEvent> syslogEvents, int maxConnections) {
             return new ChannelReader() {
                 @Override
                 public void open(int port, int maxBufferSize) throws IOException {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/NiFiWebApiSecurityConfiguration.java
Patch:
@@ -33,7 +33,6 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
-import org.springframework.http.HttpMethod;
 import org.springframework.security.authentication.AuthenticationManager;
 import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
 import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/NiFiAuthenticationEntryPoint.java
Patch:
@@ -40,7 +40,7 @@ public class NiFiAuthenticationEntryPoint implements AuthenticationEntryPoint {
     public NiFiAuthenticationEntryPoint(NiFiProperties properties) {
         this.properties = properties;
     }
-    
+
     /**
      * Always returns a 403 error code to the client.
      *

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/form/LoginAuthenticationFilter.java
Patch:
@@ -111,7 +111,7 @@ public Authentication attemptAuthentication(final HttpServletRequest request, fi
 
     /**
      * Ensures the proxyChain is authorized before allowing the user to be authenticated.
-     * 
+     *
      * @param proxyChain the proxy chain
      * @throws AuthenticationException if the proxy chain is not authorized
      */
@@ -149,7 +149,7 @@ protected void successfulAuthentication(final HttpServletRequest request, final
 
         // generate JWT for response
         jwtService.addToken(response, authentication);
-        
+
         // mark as successful
         response.setStatus(HttpServletResponse.SC_OK);
         response.setContentType("text/plain");

File: nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/client/socket/EndpointConnectionPool.java
Patch:
@@ -820,12 +820,13 @@ public void shutdown() {
         for (final BlockingQueue<EndpointConnection> connectionQueue : connectionQueueMap.values()) {
             EndpointConnection state;
             while ((state = connectionQueue.poll()) != null) {
-                cleanup(state.getSocketClientProtocol(), state.getPeer());
+                terminate(state);
             }
         }
     }
 
     public void terminate(final EndpointConnection connection) {
+        activeConnections.remove(connection);
         cleanup(connection.getSocketClientProtocol(), connection.getPeer());
     }
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/scheduling/StandardProcessScheduler.java
Patch:
@@ -655,7 +655,7 @@ public void run() {
                             final Throwable cause = e instanceof InvocationTargetException ? e.getCause() : e;
 
                             final ComponentLog componentLog = new SimpleProcessLogger(service.getIdentifier(), service);
-                            componentLog.error("failed to invoke @OnEnabled method due to {}", new Object[]{cause.toString()});
+                            componentLog.error("Failed to invoke @OnEnabled method due to {}", cause);
                             LOG.error("Failed to invoke @OnEnabled method of {} due to {}", service.getControllerServiceImplementation(), cause.toString());
                             if (LOG.isDebugEnabled()) {
                                 LOG.error("", cause);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/scheduling/StandardProcessScheduler.java
Patch:
@@ -655,7 +655,7 @@ public void run() {
                             final Throwable cause = e instanceof InvocationTargetException ? e.getCause() : e;
 
                             final ComponentLog componentLog = new SimpleProcessLogger(service.getIdentifier(), service);
-                            componentLog.error("Failed to invoke @OnEnabled method due to {}", cause);
+                            componentLog.error("failed to invoke @OnEnabled method due to {}", new Object[]{cause.toString()});
                             LOG.error("Failed to invoke @OnEnabled method of {} due to {}", service.getControllerServiceImplementation(), cause.toString());
                             if (LOG.isDebugEnabled()) {
                                 LOG.error("", cause);

File: nifi-api/src/main/java/org/apache/nifi/action/component/details/ComponentDetails.java
Patch:
@@ -19,8 +19,8 @@
 import java.io.Serializable;
 
 /**
- *
+ * Base interface for providing component details to an Action.
  */
-public abstract class ComponentDetails implements Serializable {
+public interface ComponentDetails extends Serializable {
 
 }

File: nifi-api/src/main/java/org/apache/nifi/action/details/ActionDetails.java
Patch:
@@ -19,8 +19,8 @@
 import java.io.Serializable;
 
 /**
- *
+ * Provides additional details about a given action.
  */
-public abstract class ActionDetails implements Serializable {
+public interface ActionDetails extends Serializable {
 
 }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-administration/src/main/java/org/apache/nifi/admin/dao/UserDAO.java
Patch:
@@ -80,8 +80,9 @@ public interface UserDAO {
      * Creates a new user based off the specified NiFiUser.
      *
      * @param user to create
+     * @return the created user with it's id
      */
-    void createUser(NiFiUser user) throws DataAccessException;
+    NiFiUser createUser(NiFiUser user) throws DataAccessException;
 
     /**
      * Updates the specified NiFiUser.

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-administration/src/main/java/org/apache/nifi/admin/dao/impl/StandardUserDAO.java
Patch:
@@ -462,7 +462,7 @@ public NiFiUser findUserByDn(String dn) throws DataAccessException {
     }
 
     @Override
-    public void createUser(NiFiUser user) throws DataAccessException {
+    public NiFiUser createUser(NiFiUser user) throws DataAccessException {
         if (user.getDn() == null) {
             throw new IllegalArgumentException("User dn must be specified.");
         }
@@ -493,6 +493,8 @@ public void createUser(NiFiUser user) throws DataAccessException {
             } else {
                 throw new DataAccessException("Unable to insert user.");
             }
+
+            return user;
         } catch (SQLException sqle) {
             throw new DataAccessException(sqle);
         } catch (DataAccessException dae) {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-administration/src/main/java/org/apache/nifi/admin/service/action/AddActionsAction.java
Patch:
@@ -16,12 +16,13 @@
  */
 package org.apache.nifi.admin.service.action;
 
-import java.util.Collection;
 import org.apache.nifi.action.Action;
 import org.apache.nifi.admin.dao.ActionDAO;
 import org.apache.nifi.admin.dao.DAOFactory;
 import org.apache.nifi.authorization.AuthorityProvider;
 
+import java.util.Collection;
+
 /**
  * Adds the specified actions.
  */

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-administration/src/main/java/org/apache/nifi/admin/service/action/PurgeActionsAction.java
Patch:
@@ -16,12 +16,13 @@
  */
 package org.apache.nifi.admin.service.action;
 
-import java.util.Date;
 import org.apache.nifi.action.Action;
 import org.apache.nifi.admin.dao.ActionDAO;
 import org.apache.nifi.admin.dao.DAOFactory;
 import org.apache.nifi.authorization.AuthorityProvider;
 
+import java.util.Date;
+
 /**
  * Purges actions up to a specified end date.
  */

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/impl/WebClusterManager.java
Patch:
@@ -1075,7 +1075,7 @@ public ReportingTaskNode createReportingTask(final String type, final String id,
 
         final ValidationContextFactory validationContextFactory = new StandardValidationContextFactory(this);
         final ReportingTaskNode taskNode = new ClusteredReportingTaskNode(task, id, processScheduler,
-                new ClusteredEventAccess(this), bulletinRepository, controllerServiceProvider, validationContextFactory);
+                new ClusteredEventAccess(this, auditService), bulletinRepository, controllerServiceProvider, validationContextFactory);
         taskNode.setName(task.getClass().getSimpleName());
 
         reportingTasks.put(id, taskNode);

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-user-actions/src/main/java/org/apache/nifi/action/details/FlowChangePurgeDetails.java
Patch:
@@ -21,7 +21,7 @@
 /**
  *
  */
-public class PurgeDetails extends ActionDetails {
+public class FlowChangePurgeDetails implements PurgeDetails {
 
     private Date endDate;
 
@@ -30,6 +30,7 @@ public class PurgeDetails extends ActionDetails {
      *
      * @return date at which the purge ends
      */
+    @Override
     public Date getEndDate() {
         return endDate;
     }

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ApplicationResource.java
Patch:
@@ -40,6 +40,7 @@
 import javax.ws.rs.core.UriBuilderException;
 import javax.ws.rs.core.UriInfo;
 import org.apache.nifi.action.Action;
+import org.apache.nifi.action.FlowChangeAction;
 import org.apache.nifi.action.Operation;
 import org.apache.nifi.cluster.context.ClusterContext;
 import org.apache.nifi.cluster.context.ClusterContextThreadLocal;
@@ -203,12 +204,12 @@ protected ResponseBuilder clusterContext(ResponseBuilder response) {
                 clusterCtx.getActions().clear();
 
                 // create the batch action
-                Action batchAction = new Action();
+                FlowChangeAction batchAction = new FlowChangeAction();
                 batchAction.setOperation(Operation.Batch);
 
                 // copy values from prototype action
                 batchAction.setTimestamp(prototypeAction.getTimestamp());
-                batchAction.setUserDn(prototypeAction.getUserDn());
+                batchAction.setUserIdentity(prototypeAction.getUserIdentity());
                 batchAction.setUserName(prototypeAction.getUserName());
                 batchAction.setSourceId(prototypeAction.getSourceId());
                 batchAction.setSourceName(prototypeAction.getSourceName());

File: nifi-api/src/main/java/org/apache/nifi/provenance/ProvenanceReporter.java
Patch:
@@ -159,7 +159,7 @@ public interface ProvenanceReporter {
      * the data
      */
     void fetch(FlowFile flowFile, String transitUri, String details, long transmissionMillis);
-    
+
     /**
      * Emits a Provenance Event of type {@link ProvenanceEventType#SEND SEND}
      * that indicates that a copy of the given FlowFile was sent to an external

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/s3/FetchS3Object.java
Patch:
@@ -152,7 +152,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
         session.transfer(flowFile, REL_SUCCESS);
         final long transferMillis = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startNanos);
         getLogger().info("Successfully retrieved S3 Object for {} in {} millis; routing to success", new Object[]{flowFile, transferMillis});
-        session.getProvenanceReporter().receive(flowFile, "http://" + bucket + ".amazonaws.com/" + key, transferMillis);
+        session.getProvenanceReporter().fetch(flowFile, "http://" + bucket + ".amazonaws.com/" + key, transferMillis);
     }
 
 }

File: nifi-nar-bundles/nifi-kite-bundle/nifi-kite-processors/src/test/java/org/apache/nifi/processors/kite/TestCSVToAvroProcessor.java
Patch:
@@ -58,7 +58,6 @@ public class TestCSVToAvroProcessor {
 
     /**
      * Basic test for tab separated files, similar to #test
-     * @throws IOException
      */
     @Test
     public void testTabSeparatedConversion() throws IOException {

File: nifi-api/src/main/java/org/apache/nifi/controller/queue/DropFlowFileState.java
Patch:
@@ -21,11 +21,11 @@
  */
 public enum DropFlowFileState {
 
-    WAITING_FOR_LOCK("Waiting for Destination Component to complete its action"),
+    WAITING_FOR_LOCK("Waiting for destination component to complete its action"),
     DROPPING_FLOWFILES("Dropping FlowFiles from queue"),
     FAILURE("Failed"),
-    CANCELED("Canceled by User"),
-    COMPLETE("Completed Successfully");
+    CANCELED("Canceled by user"),
+    COMPLETE("Completed successfully");
 
     private final String description;
 

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/DropFlowFileRequest.java
Patch:
@@ -64,7 +64,7 @@ public QueueSize getCurrentSize() {
     }
 
     void setCurrentSize(final QueueSize queueSize) {
-        this.currentSize = currentSize;
+        this.currentSize = queueSize;
     }
 
     @Override

File: nifi-api/src/main/java/org/apache/nifi/controller/queue/QueueSize.java
Patch:
@@ -50,7 +50,7 @@ public long getByteCount() {
 
     /**
      * Returns a new QueueSize that is the sum of this QueueSize and the provided QueueSize
-     * 
+     *
      * @param other the other QueueSize to add to this QueueSize
      * @return a new QueueSize that is the sum of this QueueSize and the provided QueueSize
      */

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ConnectionResource.java
Patch:
@@ -1036,7 +1036,7 @@ public Response getDropRequest(
 
     /**
      * Deletes the specified drop request.
-     * 
+     *
      * @param clientId Optional client id. If the client id is not specified, a new one will be generated. This value (whether specified or generated) is included in the response.
      * @param connectionId The connection id
      * @param dropRequestId The drop request id

File: nifi-api/src/main/java/org/apache/nifi/controller/queue/DropFlowFileState.java
Patch:
@@ -27,13 +27,13 @@ public enum DropFlowFileState {
     COMPLETE("Completed Successfully"),
     FAILURE("Failed"),
     CANCELED("Cancelled by User");
-    
+
     private final String description;
-    
+
     private DropFlowFileState(final String description) {
         this.description = description;
     }
-    
+
     @Override
     public String toString() {
         return description;

File: nifi-nar-bundles/nifi-couchbase-bundle/nifi-couchbase-processors/src/test/java/org/apache/nifi/processors/couchbase/TestCouchbaseClusterService.java
Patch:
@@ -45,7 +45,7 @@ public void init() throws Exception {
 
     @Test
     public void testConnectionFailure() throws InitializationException {
-        String connectionString = "couchbase://invalid-hostname";
+        String connectionString = "invalid-protocol://invalid-hostname";
         CouchbaseClusterControllerService service = new CouchbaseClusterService();
         testRunner.addControllerService(SERVICE_ID, service);
         testRunner.setProperty(service, CouchbaseClusterService.CONNECTION_STRING, connectionString);

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/main/java/org/apache/nifi/processors/hadoop/CreateHadoopSequenceFile.java
Patch:
@@ -153,8 +153,8 @@ public void onTrigger(ProcessContext context, ProcessSession session) throws Pro
                 sequenceFileWriter = new SequenceFileWriterImpl();
         }
         String value = context.getProperty(COMPRESSION_TYPE).getValue();
-        SequenceFile.CompressionType compressionType = value == null ?
-          SequenceFile.CompressionType.valueOf(DEFAULT_COMPRESSION_TYPE) : SequenceFile.CompressionType.valueOf(value);
+        SequenceFile.CompressionType compressionType = value == null
+            ? SequenceFile.CompressionType.valueOf(DEFAULT_COMPRESSION_TYPE) : SequenceFile.CompressionType.valueOf(value);
         final String fileName = flowFile.getAttribute(CoreAttributes.FILENAME.key()) + ".sf";
         flowFile = session.putAttribute(flowFile, CoreAttributes.FILENAME.key(), fileName);
         try {

File: nifi-nar-bundles/nifi-solr-bundle/nifi-solr-processors/src/main/java/org/apache/nifi/processors/solr/PutSolrContentStream.java
Patch:
@@ -161,7 +161,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
         final ObjectHolder<Exception> connectionError = new ObjectHolder<>(null);
 
         final boolean isSolrCloud = SOLR_TYPE_CLOUD.equals(context.getProperty(SOLR_TYPE).getValue());
-        final String collection = context.getProperty(COLLECTION_PARAM_NAME).evaluateAttributeExpressions(flowFile).getValue();
+        final String collection = context.getProperty(COLLECTION).evaluateAttributeExpressions(flowFile).getValue();
         final Long commitWithin = context.getProperty(COMMIT_WITHIN).evaluateAttributeExpressions(flowFile).asLong();
 
         final MultiMapSolrParams requestParams = new MultiMapSolrParams(getRequestParams(context, flowFile));

File: nifi-api/src/main/java/org/apache/nifi/controller/annotation/OnConfigured.java
Patch:
@@ -28,7 +28,7 @@
  * method should be called after all of the properties have been set for the
  * Controller Service. Methods using this annotation must take either 0
  * arguments or a single argument of type
- * {@link nifi.controller.ConfigurationContext ConfigurationContext}.
+ * {@link org.apache.nifi.controller.ConfigurationContext ConfigurationContext}.
  *
  *
  * @deprecated This annotation has been replaced by those in the

File: nifi-api/src/main/java/org/apache/nifi/controller/repository/FlowFileRecord.java
Patch:
@@ -42,7 +42,7 @@ public interface FlowFileRecord extends FlowFile {
      * FlowFile's content occurs. This mechanism allows multiple FlowFiles to
      * have the same ContentClaim, which can be significantly more efficient for
      * some implementations of
-     * {@link nifi.controller.repository.ContentRepository ContentRepository}
+     * {@link org.apache.nifi.controller.repository.ContentRepository ContentRepository}
      */
     long getContentClaimOffset();
 }

File: nifi-api/src/main/java/org/apache/nifi/processor/ProcessorInitializationContext.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * <p>
  * The <code>ProcessorInitializationContext</code> provides
- * {@link nifi.processor.Processor Processor}s access to objects that may be of
+ * {@link org.apache.nifi.processor.Processor Processor}s access to objects that may be of
  * use throughout the life of the Processor.
  * </p>
  */

File: nifi-api/src/main/java/org/apache/nifi/processor/annotation/OnScheduled.java
Patch:
@@ -29,7 +29,7 @@
  * will be called before any 'onTrigger' calls and will be called once each time
  * a processor instance is scheduled to run. Methods using this annotation must
  * take either 0 arguments or a single argument of type
- * {@link nifi.processor.SchedulingContext SchedulingContext}.
+ * {@link org.apache.nifi.processor.SchedulingContext SchedulingContext}.
  *
  * If any method annotated with this annotation throws, the processor will not
  * be scheduled to run.

File: nifi-api/src/main/java/org/apache/nifi/processor/annotation/SupportsBatching.java
Patch:
@@ -27,13 +27,13 @@
  * Marker annotation a Processor implementation can use to indicate that users
  * should be able to supply a Batch Duration for the Processor. If a Processor
  * uses this annotation, it is allowing the Framework to batch
- * {@link nifi.processor.ProcessSession ProcessSession}s' commits, as well as
+ * {@link org.apache.nifi.processor.ProcessSession ProcessSession}s' commits, as well as
  * allowing the Framework to return the same ProcessSession multiple times from
  * subsequent calls to
- * {@link nifi.processor.ProcessSessionFactory ProcessSessionFactory}.{@link nifi.processor.ProcessSessionFactory#createSession() createSession()}.
+ * {@link org.apache.nifi.processor.ProcessSessionFactory ProcessSessionFactory}.{@link org.apache.nifi.processor.ProcessSessionFactory#createSession() createSession()}.
  *
  * When this Annotation is used, it is important to note that calls to
- * {@link nifi.processor.ProcessSession#commit() ProcessSession.commit()} may
+ * {@link org.apache.nifi.processor.ProcessSession#commit() ProcessSession.commit()} may
  * not provide a guarantee that the data has been safely stored in NiFi's
  * Content Repository or FlowFile Repository. Therefore, it is not appropriate,
  * for instance, to use this annotation if the Processor will call

File: nifi-api/src/main/java/org/apache/nifi/provenance/ProvenanceEventType.java
Patch:
@@ -71,7 +71,7 @@ public enum ProvenanceEventType {
     ATTRIBUTES_MODIFIED,
     /**
      * ROUTE is used to show that a FlowFile was routed to a specified
-     * {@link nifi.processor.Relationship Relationship} and should provide
+     * {@link org.apache.nifi.processor.Relationship Relationship} and should provide
      * information about why the FlowFile was routed to this relationship.
      */
     ROUTE,

File: nifi-mock/src/main/java/org/apache/nifi/util/MockProcessSession.java
Patch:
@@ -141,7 +141,7 @@ public void commit() {
 
     /**
      * Clear the 'committed' flag so that we can test that the next iteration of
-     * {@link nifi.processor.Processor#onTrigger} commits or rolls back the
+     * {@link org.apache.nifi.processor.Processor#onTrigger} commits or rolls back the
      * session
      */
     public void clearCommited() {
@@ -150,7 +150,7 @@ public void clearCommited() {
 
     /**
      * Clear the 'rolledBack' flag so that we can test that the next iteration
-     * of {@link nifi.processor.Processor#onTrigger} commits or rolls back the
+     * of {@link org.apache.nifi.processor.Processor#onTrigger} commits or rolls back the
      * session
      */
     public void clearRollback() {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/StandardFunnel.java
Patch:
@@ -401,7 +401,7 @@ public Collection<ValidationResult> getValidationErrors() {
     /**
      * Updates the amount of time that this processor should avoid being
      * scheduled when the processor calls
-     * {@link nifi.processor.ProcessContext#yield() ProcessContext.yield()}
+     * {@link org.apache.nifi.processor.ProcessContext#yield() ProcessContext.yield()}
      *
      * @param yieldPeriod new period
      */
@@ -439,7 +439,7 @@ public String getPenalizationPeriod() {
      * Causes the processor not to be scheduled for some period of time. This
      * duration can be obtained and set via the
      * {@link #getYieldPeriod(TimeUnit)} and
-     * {@link #setYieldPeriod(long, TimeUnit)} methods.
+     * {@link #setYieldPeriod(String)} methods.
      */
     @Override
     public void yield() {

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/groups/ProcessGroup.java
Patch:
@@ -328,7 +328,7 @@ public interface ProcessGroup {
      * Removes the given processor from this group, destroying the Processor.
      * The Processor is removed from the ProcessorRegistry, and any method in
      * the Processor that is annotated with the
-     * {@link nifi.processor.annotation.OnRemoved OnRemoved} annotation will be
+     * {@link org.apache.nifi.processor.annotation.OnRemoved OnRemoved} annotation will be
      * invoked. All outgoing connections will also be destroyed
      *
      * @param processor the Processor to remove

File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/scheduling/StandardProcessScheduler.java
Patch:
@@ -278,7 +278,7 @@ public void run() {
     }
 
     /**
-     * Starts scheduling the given processor to run after invoking all methods on the underlying {@link nifi.processor.Processor
+     * Starts scheduling the given processor to run after invoking all methods on the underlying {@link org.apache.nifi.processor.Processor
      * FlowFileProcessor} that are annotated with the {@link OnScheduled} annotation.
      */
     @Override
@@ -406,8 +406,8 @@ public void yield(final ProcessorNode procNode) {
     }
 
     /**
-     * Stops scheduling the given processor to run and invokes all methods on the underlying {@link nifi.processor.Processor FlowFileProcessor} that are annotated with the {@link OnUnscheduled}
-     * annotation.
+     * Stops scheduling the given processor to run and invokes all methods on the underlying {@link org.apache.nifi.processor.Processor FlowFileProcessor} that are annotated with the
+     * {@link OnUnscheduled} annotation.
      */
     @Override
     public synchronized void stopProcessor(final ProcessorNode procNode) {

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/test/java/org/apache/nifi/processors/aws/s3/TestDeleteS3Object.java
Patch:
@@ -56,7 +56,7 @@ public static void oneTimeSetUp() {
             CreateBucketRequest request = new CreateBucketRequest(TEST_BUCKET, TEST_REGION);
             client.createBucket(request);
         } catch (final AmazonS3Exception e) {
-            System.out.println(TEST_BUCKET + " already exists.");
+            System.out.println("Can't create the key " + TEST_BUCKET + ":" + e.toString());
         } catch (final IOException e) {
             System.out.println(CREDENTIALS_FILE + " doesn't exist.");
         }

File: nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/s3/DeleteS3Object.java
Patch:
@@ -94,7 +94,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
         try {
           s3.getObjectMetadata(bucket, key);
         } catch (final AmazonServiceException ase) {
-            getLogger().error("Not found sucha a file and folder on Amazon S3 {}", new Object[]{flowFile, ase});
+            getLogger().error("Not found such a S3 object for {}; routing to not found", new Object[]{flowFile, ase});
             session.transfer(flowFile, REL_NOT_FOUND);
             return;
         }

File: nifi-nar-bundles/nifi-hadoop-bundle/nifi-hdfs-processors/src/main/java/org/apache/nifi/processors/hadoop/CreateHadoopSequenceFile.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.List;
 import java.util.Set;
 
+import org.apache.hadoop.io.SequenceFile;
 import org.apache.hadoop.io.SequenceFile.CompressionType;
 import org.apache.nifi.annotation.behavior.SideEffectFree;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
@@ -152,7 +153,8 @@ public void onTrigger(ProcessContext context, ProcessSession session) throws Pro
                 sequenceFileWriter = new SequenceFileWriterImpl();
         }
         String value = context.getProperty(COMPRESSION_TYPE).getValue();
-        CompressionType compressionType = value == null ? CompressionType.valueOf(DEFAULT_COMPRESSION_TYPE) : CompressionType.valueOf(value);
+        SequenceFile.CompressionType compressionType = value == null ?
+          SequenceFile.CompressionType.valueOf(DEFAULT_COMPRESSION_TYPE) : SequenceFile.CompressionType.valueOf(value);
         final String fileName = flowFile.getAttribute(CoreAttributes.FILENAME.key()) + ".sf";
         flowFile = session.putAttribute(flowFile, CoreAttributes.FILENAME.key(), fileName);
         try {

File: nifi-mock/src/main/java/org/apache/nifi/util/StandardProcessorTestRunner.java
Patch:
@@ -534,6 +534,7 @@ public void addControllerService(final String identifier, final ControllerServic
 
         final ComponentLog logger = new MockProcessorLog(identifier, service);
         final MockControllerServiceInitializationContext initContext = new MockControllerServiceInitializationContext(requireNonNull(service), requireNonNull(identifier), logger);
+        initContext.addControllerServices(context);
         service.initialize(initContext);
 
         final Map<PropertyDescriptor, String> resolvedProps = new HashMap<>();

File: nifi-nar-bundles/nifi-image-bundle/nifi-image-processors/src/test/java/org/apache/nifi/processors/image/ExtractImageMetadataTest.java
Patch:
@@ -139,7 +139,7 @@ public MockFlowFile verifyTestRunnerFlow(String pathStr,Relationship rel, String
         Path path = Paths.get(pathStr);
         testRunner.enqueue(path);
         if(max != null) {
-            testRunner.setProperty(ExtractImageMetadata.MaxAttributes, max);
+            testRunner.setProperty(ExtractImageMetadata.MAX_NUMBER_OF_ATTRIBUTES, max);
         }
 
         testRunner.run();

File: nifi-mock/src/main/java/org/apache/nifi/util/TestRunner.java
Patch:
@@ -742,10 +742,10 @@ public interface TestRunner {
 
     /**
      * Removes the {@link PropertyDescriptor} from the {@link ProcessContext},
-     * effectively setting its value to null.
+     * effectively setting its value to null, or the property's default value, if it has one.
      *
      * @param descriptor of property to remove
-     * @return true if removed
+     * @return <code>true</code> if removed, <code>false</code> if the property was not set
      */
     boolean removeProperty(PropertyDescriptor descriptor);
 

File: nifi/nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/GetFTP.java
Patch:
@@ -27,12 +27,10 @@
 import org.apache.nifi.annotation.documentation.SeeAlso;
 import org.apache.nifi.annotation.behavior.WritesAttribute;
 import org.apache.nifi.annotation.behavior.WritesAttributes;
-import org.apache.nifi.annotation.behavior.SideEffectFree;
 import org.apache.nifi.annotation.documentation.Tags;
 import org.apache.nifi.processors.standard.util.FTPTransfer;
 import org.apache.nifi.processors.standard.util.FileTransfer;
 
-@SideEffectFree
 @Tags({"FTP", "get", "retrieve", "files", "fetch", "remote", "ingest", "source", "input"})
 @CapabilityDescription("Fetches files from an FTP Server and creates FlowFiles from them")
 @WritesAttributes({

File: nifi/nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/GetSFTP.java
Patch:
@@ -21,7 +21,6 @@
 import java.util.Collections;
 import java.util.List;
 
-import org.apache.nifi.annotation.behavior.SideEffectFree;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.SeeAlso;
 import org.apache.nifi.annotation.documentation.Tags;
@@ -35,7 +34,6 @@
 import org.apache.nifi.processors.standard.util.FileTransfer;
 import org.apache.nifi.processors.standard.util.SFTPTransfer;
 
-@SideEffectFree
 @Tags({"sftp", "get", "retrieve", "files", "fetch", "remote", "ingest", "source", "input"})
 @CapabilityDescription("Fetches files from an SFTP Server and creates FlowFiles from them")
 @WritesAttributes({

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-optimistic-locking/src/main/java/org/apache/nifi/web/ConfigurationRequest.java
Patch:
@@ -31,5 +31,5 @@ public interface ConfigurationRequest<T> {
      *
      * @return The resulting configuration
      */
-    T execute();
+    ConfigurationResult<T> execute();
 }

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-optimistic-locking/src/main/java/org/apache/nifi/web/StandardOptimisticLockingManager.java
Patch:
@@ -80,13 +80,13 @@ public <T> ConfigurationSnapshot<T> configureFlow(Revision revision, Configurati
             checkRevision(revision);
 
             // execute the configuration request
-            final T result = configurationRequest.execute();
+            final ConfigurationResult<T> result = configurationRequest.execute();
 
             // update the revision
             final Revision newRevision = updateRevision(incrementRevision(revision.getClientId()));
 
             // build the result
-            return new ConfigurationSnapshot(newRevision.getVersion(), result);
+            return new ConfigurationSnapshot(newRevision.getVersion(), result.getConfiguration(), result.isNew());
         } finally {
             unlock();
         }

File: nifi/nifi-api/src/main/java/org/apache/nifi/authorization/DownloadAuthorization.java
Patch:
@@ -25,7 +25,7 @@ private static enum Result {
 
         Approved,
         Denied;
-    };
+    }
 
     private static final DownloadAuthorization APPROVED = new DownloadAuthorization(Result.Approved, null);
 

File: nifi/nifi-commons/nifi-utils/src/main/java/org/apache/nifi/stream/io/ByteCountingInputStream.java
Patch:
@@ -100,6 +100,7 @@ public boolean markSupported() {
     public void reset() throws IOException {
         in.reset();
         bytesRead -= bytesSinceMark;
+        bytesSinceMark = 0L;
     }
 
     @Override

File: nifi/nifi-nar-bundles/nifi-flume-bundle/nifi-flume-processors/src/main/java/org/apache/nifi/processors/flume/ExecuteFlumeSink.java
Patch:
@@ -50,7 +50,8 @@ public class ExecuteFlumeSink extends AbstractFlumeProcessor {
 
     public static final PropertyDescriptor SINK_TYPE = new PropertyDescriptor.Builder()
             .name("Sink Type")
-            .description("The component type name for the sink. For some sinks, this is a short, symbolic name (e.g. hdfs). For others, it's the fully-qualified name of the Sink class. See the Flume User Guide for details.")
+            .description("The component type name for the sink. For some sinks, this is a short, symbolic name (e.g. hdfs)."
+                    + " For others, it's the fully-qualified name of the Sink class. See the Flume User Guide for details.")
             .required(true)
             .addValidator(createSinkValidator())
             .build();

File: nifi/nifi-nar-bundles/nifi-flume-bundle/nifi-flume-processors/src/main/java/org/apache/nifi/processors/flume/ExecuteFlumeSource.java
Patch:
@@ -56,7 +56,8 @@ public class ExecuteFlumeSource extends AbstractFlumeProcessor {
 
     public static final PropertyDescriptor SOURCE_TYPE = new PropertyDescriptor.Builder()
         .name("Source Type")
-        .description("The component type name for the source. For some sources, this is a short, symbolic name (e.g. spooldir). For others, it's the fully-qualified name of the Source class. See the Flume User Guide for details.")
+        .description("The component type name for the source. For some sources, this is a short, symbolic name"
+                + " (e.g. spooldir). For others, it's the fully-qualified name of the Source class. See the Flume User Guide for details.")
         .required(true)
         .addValidator(createSourceValidator())
         .build();

File: nifi/nifi-nar-bundles/nifi-flume-bundle/nifi-flume-processors/src/main/java/org/apache/nifi/processors/flume/AbstractFlumeProcessor.java
Patch:
@@ -77,7 +77,7 @@ protected static Validator createSourceValidator() {
             public ValidationResult validate(final String subject, final String value, final ValidationContext context) {
                 String reason = null;
                 try {
-                    FlumeSourceProcessor.SOURCE_FACTORY.create("NiFi Source", value);
+                    ExecuteFlumeSource.SOURCE_FACTORY.create("NiFi Source", value);
                 } catch (Exception ex) {
                     reason = ex.getLocalizedMessage();
                     reason = Character.toLowerCase(reason.charAt(0)) + reason.substring(1);
@@ -97,7 +97,7 @@ protected static Validator createSinkValidator() {
             public ValidationResult validate(final String subject, final String value, final ValidationContext context) {
                 String reason = null;
                 try {
-                    FlumeSinkProcessor.SINK_FACTORY.create("NiFi Sink", value);
+                    ExecuteFlumeSink.SINK_FACTORY.create("NiFi Sink", value);
                 } catch (Exception ex) {
                     reason = ex.getLocalizedMessage();
                     reason = Character.toLowerCase(reason.charAt(0)) + reason.substring(1);

File: nifi/nifi-nar-bundles/nifi-flume-bundle/nifi-flume-processors/src/main/java/org/apache/nifi/processors/flume/ExecuteFlumeSink.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.flume.EventDeliveryException;
 import org.apache.flume.Sink;
 import org.apache.flume.conf.Configurables;
+import org.apache.nifi.annotation.behavior.TriggerSerially;
 import org.apache.nifi.annotation.documentation.CapabilityDescription;
 import org.apache.nifi.annotation.documentation.Tags;
 import org.apache.nifi.annotation.lifecycle.OnScheduled;
@@ -45,7 +46,8 @@
  */
 @Tags({"flume", "hadoop", "get", "sink"})
 @CapabilityDescription("Write FlowFile data to a Flume sink")
-public class FlumeSinkProcessor extends AbstractFlumeProcessor {
+@TriggerSerially
+public class ExecuteFlumeSink extends AbstractFlumeProcessor {
 
     public static final PropertyDescriptor SINK_TYPE = new PropertyDescriptor.Builder()
             .name("Sink Type")

File: nifi/nifi-nar-bundles/nifi-flume-bundle/nifi-flume-processors/src/main/java/org/apache/nifi/processors/flume/NifiSessionFactoryChannel.java
Patch:
@@ -39,7 +39,6 @@ protected BasicTransactionSemantics createTransaction() {
         LifecycleState lifecycleState = getLifecycleState();
         if (lifecycleState == LifecycleState.STOP) {
             throw new ChannelFullException("Can't write to a stopped channel");
-            //return null;
         }
         return new NifiTransaction(sessionFactory.createSession(), relationship);
     }

File: nifi/nifi-nar-bundles/nifi-flume-bundle/nifi-flume-processors/src/test/java/org/apache/nifi/processors/flume/FlumeSinkProcessorTest.java
Patch:
@@ -126,13 +126,12 @@ public void testNullSink() throws IOException {
     public void testBatchSize() throws IOException {
         TestRunner runner = TestRunners.newTestRunner(FlumeSinkProcessor.class);
         runner.setProperty(FlumeSinkProcessor.SINK_TYPE, NullSink.class.getName());
-        runner.setProperty(FlumeSinkProcessor.BATCH_SIZE, "1000");
         runner.setProperty(FlumeSinkProcessor.FLUME_CONFIG,
             "tier1.sinks.sink-1.batchSize = 1000\n");
         for (int i = 0; i < 100000; i++) {
           runner.enqueue(String.valueOf(i).getBytes());
         }
-        runner.run();
+        runner.run(100);
     }
 
     @Test

File: nifi/nifi-nar-bundles/nifi-flume-bundle/nifi-flume-processors/src/test/java/org/apache/nifi/processors/flume/FlumeSinkProcessorTest.java
Patch:
@@ -18,7 +18,6 @@
 
 import java.io.File;
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
 
 import java.io.FileInputStream;
 import java.io.FilenameFilter;
@@ -40,7 +39,6 @@
 import org.apache.nifi.util.file.FileUtils;
 
 import org.junit.Assert;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/logging/ControllerServiceLogObserver.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.nifi.reporting.Severity;
 
 public class ControllerServiceLogObserver implements LogObserver {
+
     private final BulletinRepository bulletinRepository;
     private final ControllerServiceNode serviceNode;
 
@@ -38,8 +39,8 @@ public void onLogMessage(final LogMessage message) {
         // the LogLevel is (INFO and ERROR map directly and all others we will just accept as they are).
         final String bulletinLevel = message.getLevel() == LogLevel.WARN ? Severity.WARNING.name() : message.getLevel().toString();
 
-        final Bulletin bulletin = BulletinFactory.createBulletin(null, serviceNode.getIdentifier(), ComponentType.REPORTING_TASK,
-            serviceNode.getName(), "Log Message", bulletinLevel, message.getMessage());
+        final Bulletin bulletin = BulletinFactory.createBulletin(null, serviceNode.getIdentifier(), ComponentType.CONTROLLER_SERVICE,
+                serviceNode.getName(), "Log Message", bulletinLevel, message.getMessage());
         bulletinRepository.addBulletin(bulletin);
     }
 }

File: nifi/nifi-nar-bundles/nifi-standard-services/nifi-ssl-context-service-api/src/main/java/org/apache/nifi/ssl/SSLContextService.java
Patch:
@@ -57,4 +57,5 @@ public static enum ClientAuth {
 
     public boolean isKeyStoreConfigured();
 
+    String getSslAlgorithm();
 }

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-content-viewer/src/main/java/org/apache/nifi/web/ContentViewerController.java
Patch:
@@ -64,6 +64,9 @@ public class ContentViewerController extends HttpServlet {
      */
     @Override
     protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException {
+        // specify the charset in a response header
+        response.addHeader("Content-Type", "text/html; charset=UTF-8");
+
         // get the content
         final ServletContext servletContext = request.getServletContext();
         final ContentAccess contentAccess = (ContentAccess) servletContext.getAttribute("nifi-content-access");

File: nifi/nifi-nar-bundles/nifi-standard-bundle/nifi-standard-content-viewer/src/main/java/org/apache/nifi/web/StandardContentViewerController.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.nifi.web;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.io.StringWriter;
@@ -33,7 +34,6 @@
 import javax.xml.transform.stream.StreamResult;
 import javax.xml.transform.stream.StreamSource;
 import org.apache.nifi.web.ViewableContent.DisplayMode;
-import org.codehaus.jackson.map.ObjectMapper;
 
 @WebServlet(name = "StandardContentViewer", urlPatterns = {"/view-content"})
 public class StandardContentViewerController extends HttpServlet {
@@ -60,7 +60,7 @@ protected void doGet(HttpServletRequest request, HttpServletResponse response) t
                 if ("application/json".equals(content.getContentType())) {
                     // format json
                     final ObjectMapper mapper = new ObjectMapper();
-                    final Object objectJson = mapper.readValue(content.getContent(), Object.class);
+                    final Object objectJson = mapper.readValue(content.getContentStream(), Object.class);
                     formatted = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(objectJson);
                 } else if ("application/xml".equals(content.getContentType())) {
                     // format xml

File: nifi/nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-dbcp-service/src/main/java/org/apache/nifi/dbcp/DatabaseSystemDescriptor.java
Patch:
@@ -24,6 +24,7 @@
  * An immutable object for holding information about a database system.
  *
  */
+@Deprecated
 public class DatabaseSystemDescriptor extends AllowableValue {
 
     public final String driverClassName;

File: nifi/nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-dbcp-service/src/main/java/org/apache/nifi/dbcp/DatabaseSystems.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.nifi.dbcp;
 
+@Deprecated
 public class DatabaseSystems {
 
     /**

File: nifi/nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/AbstractJsonPathProcessor.java
Patch:
@@ -19,9 +19,8 @@
 import com.jayway.jsonpath.Configuration;
 import com.jayway.jsonpath.DocumentContext;
 import com.jayway.jsonpath.JsonPath;
+import com.jayway.jsonpath.spi.json.JacksonJsonProvider;
 import com.jayway.jsonpath.spi.json.JsonProvider;
-import com.jayway.jsonpath.spi.json.JsonSmartJsonProvider;
-import net.minidev.json.parser.JSONParser;
 import org.apache.nifi.components.PropertyDescriptor;
 import org.apache.nifi.components.ValidationContext;
 import org.apache.nifi.components.ValidationResult;
@@ -50,7 +49,7 @@
  */
 public abstract class AbstractJsonPathProcessor extends AbstractProcessor {
 
-    private static final Configuration STRICT_PROVIDER_CONFIGURATION = Configuration.builder().jsonProvider(new JsonSmartJsonProvider(JSONParser.MODE_RFC4627)).build();
+    private static final Configuration STRICT_PROVIDER_CONFIGURATION = Configuration.builder().jsonProvider(new JacksonJsonProvider()).build();
 
     private static final JsonProvider JSON_PROVIDER = STRICT_PROVIDER_CONFIGURATION.jsonProvider();
 

File: nifi/nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestMergeContent.java
Patch:
@@ -73,7 +73,7 @@ public void testSimpleBinaryConcat() throws IOException, InterruptedException {
         bundle.assertContentEquals("Hello, World!".getBytes("UTF-8"));
         bundle.assertAttributeEquals(CoreAttributes.MIME_TYPE.key(), "application/plain-text");
     }
-    
+
     @Test
     public void testSimpleBinaryConcatSingleBin() throws IOException, InterruptedException {
         final TestRunner runner = TestRunners.newTestRunner(new MergeContent());
@@ -92,7 +92,7 @@ public void testSimpleBinaryConcatSingleBin() throws IOException, InterruptedExc
         final MockFlowFile bundle = runner.getFlowFilesForRelationship(MergeContent.REL_MERGED).get(0);
         bundle.assertContentEquals("Hello, World!".getBytes("UTF-8"));
         bundle.assertAttributeEquals(CoreAttributes.MIME_TYPE.key(), "application/plain-text");
-    }    
+    }
 
     @Test
     public void testSimpleBinaryConcatWithTextDelimiters() throws IOException, InterruptedException {

File: nifi/nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestScanContent.java
Patch:
@@ -18,7 +18,6 @@
 
 import java.io.DataOutputStream;
 import java.io.IOException;
-import java.io.StringWriter;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;

File: nifi/nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/ScanContent.java
Patch:
@@ -261,7 +261,7 @@ public TextualTermLoader(final InputStream inStream) {
         @Override
         public SearchTerm<byte[]> nextTerm() throws IOException {
             final String nextLine = reader.readLine();
-            if (nextLine == null) {
+            if (nextLine == null || nextLine.isEmpty()) {
                 return null;
             }
             return new SearchTerm<>(nextLine.getBytes("UTF-8"));

File: nifi/nifi-nar-bundles/nifi-kite-bundle/nifi-kite-processors/src/main/java/org/apache/nifi/processors/kite/AbstractKiteProcessor.java
Patch:
@@ -106,8 +106,7 @@ public ValidationResult validate(String subject, String uri, ValidationContext c
     };
 
     /**
-     * Resolves a {@link Schema} for the given string, either a URI or a JSON
-     * literal.
+     * Resolves a {@link Schema} for the given string, either a URI or a JSON literal.
      */
     protected static Schema getSchema(String uriOrLiteral, Configuration conf) {
         URI uri;

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProvenanceResource.java
Patch:
@@ -276,7 +276,7 @@ public Response submitReplay(
      */
     @GET
     @Consumes(MediaType.WILDCARD)
-    @Produces(MediaType.APPLICATION_OCTET_STREAM)
+    @Produces(MediaType.WILDCARD)
     @Path("/events/{id}/content/input")
     @PreAuthorize("hasRole('ROLE_PROVENANCE')")
     @ApiOperation(
@@ -375,7 +375,7 @@ public void write(OutputStream output) throws IOException, WebApplicationExcepti
      */
     @GET
     @Consumes(MediaType.WILDCARD)
-    @Produces(MediaType.APPLICATION_OCTET_STREAM)
+    @Produces(MediaType.WILDCARD)
     @Path("/events/{id}/content/output")
     @PreAuthorize("hasRole('ROLE_PROVENANCE')")
     @ApiOperation(

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-documentation/src/main/java/org/apache/nifi/documentation/mock/MockControllerServiceInitializationContext.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.nifi.controller.ControllerServiceInitializationContext;
 import org.apache.nifi.controller.ControllerServiceLookup;
 import org.apache.nifi.logging.ComponentLog;
+import org.apache.nifi.processor.SimpleProcessLogger;
 
 /**
  * A Mock ControllerServiceInitializationContext so that ControllerServices can
@@ -30,7 +31,7 @@ public class MockControllerServiceInitializationContext implements ControllerSer
 
     @Override
     public String getIdentifier() {
-        return "";
+        return "mock-controller-service";
     }
 
     @Override
@@ -40,7 +41,7 @@ public ControllerServiceLookup getControllerServiceLookup() {
 
     @Override
     public ComponentLog getLogger() {
-        return null;
+        return new SimpleProcessLogger(getIdentifier(), getIdentifier());
     }
 
 }

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-documentation/src/main/java/org/apache/nifi/documentation/mock/MockProcessorInitializationContext.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.nifi.controller.ControllerServiceLookup;
 import org.apache.nifi.logging.ProcessorLog;
 import org.apache.nifi.processor.ProcessorInitializationContext;
+import org.apache.nifi.processor.SimpleProcessLogger;
 
 /**
  * A Mock ProcessorInitializationContext that can be used so that Processors can
@@ -30,12 +31,12 @@ public class MockProcessorInitializationContext implements ProcessorInitializati
 
     @Override
     public String getIdentifier() {
-        return "";
+        return "mock-processor";
     }
 
     @Override
     public ProcessorLog getLogger() {
-        return null;
+        return new SimpleProcessLogger(getIdentifier(), getIdentifier());
     }
 
     @Override

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-documentation/src/main/java/org/apache/nifi/documentation/mock/MockReportingInitializationContext.java
Patch:
@@ -20,6 +20,7 @@
 
 import org.apache.nifi.controller.ControllerServiceLookup;
 import org.apache.nifi.logging.ComponentLog;
+import org.apache.nifi.processor.SimpleProcessLogger;
 import org.apache.nifi.reporting.ReportingInitializationContext;
 import org.apache.nifi.scheduling.SchedulingStrategy;
 
@@ -32,7 +33,7 @@ public class MockReportingInitializationContext implements ReportingInitializati
 
     @Override
     public String getIdentifier() {
-        return "";
+        return "mock-reporting-task";
     }
 
     @Override
@@ -62,6 +63,6 @@ public SchedulingStrategy getSchedulingStrategy() {
 
     @Override
     public ComponentLog getLogger() {
-        return null;
+        return new SimpleProcessLogger(getIdentifier(), getIdentifier());
     }
 }

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/test/java/org/apache/nifi/cluster/protocol/impl/SocketProtocolListenerTest.java
Patch:
@@ -27,8 +27,8 @@
 import org.apache.nifi.cluster.protocol.jaxb.message.JaxbProtocolUtils;
 import org.apache.nifi.cluster.protocol.message.PingMessage;
 import org.apache.nifi.cluster.protocol.message.ProtocolMessage;
-import org.apache.nifi.cluster.protocol.testutils.DelayedProtocolHandler;
-import org.apache.nifi.cluster.protocol.testutils.ReflexiveProtocolHandler;
+import org.apache.nifi.cluster.protocol.impl.testutils.DelayedProtocolHandler;
+import org.apache.nifi.cluster.protocol.impl.testutils.ReflexiveProtocolHandler;
 import org.apache.nifi.io.socket.ServerSocketConfiguration;
 import org.apache.nifi.io.socket.SocketConfiguration;
 import org.apache.nifi.io.socket.SocketUtils;

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/SystemDiagnosticsResource.java
Patch:
@@ -67,7 +67,6 @@ public class SystemDiagnosticsResource extends ApplicationResource {
     @GET
     @Consumes(MediaType.WILDCARD)
     @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})
-    @Path("") // due to a bug in swagger
     @PreAuthorize("hasAnyRole('ROLE_MONITOR', 'ROLE_DFM', 'ROLE_ADMIN')")
     @ApiOperation(
             value = "Gets the diagnostics for the system NiFi is running on",

File: nifi/nifi-api/src/main/java/org/apache/nifi/annotation/notification/OnPrimaryNodeStateChange.java
Patch:
@@ -25,10 +25,10 @@
 
 /**
  * <p>
- * Marker annotation that a component can use to indicate that a method should be 
+ * Marker annotation that a component can use to indicate that a method should be
  * called whenever the state of the Primary Node in a cluster has changed.
  * </p>
- * 
+ *
  * <p>
  * Methods with this annotation should take either no arguments or one argument of type
  * {@link PrimaryNodeState}. The {@link PrimaryNodeState} provides context about what changed

File: nifi/nifi-nar-bundles/nifi-solr-bundle/nifi-solr-processors/src/test/java/org/apache/nifi/processors/solr/EmbeddedSolrServerFactory.java
Patch:
@@ -40,8 +40,8 @@ public class EmbeddedSolrServerFactory {
     /**
      * Use the defaults to create the core.
      *
-     * @param coreName
-     * @return
+     * @param coreName the name of the core
+     * @return an EmbeddedSolrServer for the given core
      */
     public static SolrClient create(String coreName) throws IOException {
         return create(DEFAULT_SOLR_HOME, DEFAULT_CORE_HOME,

File: nifi/nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/GetHTTP.java
Patch:
@@ -446,7 +446,7 @@ public void onTrigger(final ProcessContext context, final ProcessSessionFactory
                                     } catch (IOException e) {
                                         getLogger().error("Failed to persist ETag and LastMod due to " + e, e);
                                     }
-                                } 
+                                }
                             }
                             finally {
                                 readLock.lock();

File: nifi/nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/client/socket/EndpointConnectionPool.java
Patch:
@@ -258,7 +258,7 @@ public EndpointConnection getEndpointConnection(final TransferDirection directio
         }
 
         final PeerDescription peerDescription = peerStatus.getPeerDescription();
-        BlockingQueue<EndpointConnection> connectionQueue = connectionQueueMap.get(peerStatus);
+        BlockingQueue<EndpointConnection> connectionQueue = connectionQueueMap.get(peerDescription);
         if (connectionQueue == null) {
             connectionQueue = new LinkedBlockingQueue<>();
             BlockingQueue<EndpointConnection> existing = connectionQueueMap.putIfAbsent(peerDescription, connectionQueue);

File: nifi-nar-maven-plugin/src/main/java/org/apache/nifi/NarMojo.java
Patch:
@@ -290,8 +290,8 @@ public class NarMojo extends AbstractMojo {
      */
     @Parameter(property = "overWriteIfNewer", required = false, defaultValue = "true")
     protected boolean overWriteIfNewer;
-    
-    @Parameter( property = "projectBuildDirectory", required = false, defaultValue = "${project.build.directory}")
+
+    @Parameter(property = "projectBuildDirectory", required = false, defaultValue = "${project.build.directory}")
     protected File projectBuildDirectory;
 
     /**

File: nifi/nifi-api/src/main/java/org/apache/nifi/controller/annotation/OnConfigured.java
Patch:
@@ -31,8 +31,9 @@
  * {@link nifi.controller.ConfigurationContext ConfigurationContext}.
  *
  * @author none
- * 
- * @deprecated This annotation has been replaced by those in the {@link org.apache.nifi.annotation.lifecycle} package.
+ *
+ * @deprecated This annotation has been replaced by those in the
+ * {@link org.apache.nifi.annotation.lifecycle} package.
  */
 @Documented
 @Target({ElementType.METHOD})

File: nifi/nifi-api/src/main/java/org/apache/nifi/controller/repository/FlowFileSwapManager.java
Patch:
@@ -55,9 +55,9 @@ public interface FlowFileSwapManager {
      * Notifies FlowFile queues of the number of FlowFiles and content size of
      * all FlowFiles that are currently swapped out
      *
-     * @param connectionProvider
-     * @param claimManager
-     * @return
+     * @param connectionProvider provider
+     * @param claimManager manager
+     * @return how many flowfiles have been recovered
      */
     long recoverSwappedFlowFiles(QueueProvider connectionProvider, ContentClaimManager claimManager);
 }

File: nifi/nifi-api/src/main/java/org/apache/nifi/controller/repository/QueueProvider.java
Patch:
@@ -27,9 +27,7 @@
 public interface QueueProvider {
 
     /**
-     * Returns all <code>FlowFileQueue</code>s that currently exist in the flow
-     *
-     * @return
+     * @return all <code>FlowFileQueue</code>s that currently exist in the flow
      */
     Collection<FlowFileQueue> getAllQueues();
 }

File: nifi/nifi-api/src/main/java/org/apache/nifi/expression/AttributeValueDecorator.java
Patch:
@@ -22,8 +22,8 @@ public interface AttributeValueDecorator {
      * Decorates the value of a FlowFile Attribute or System/JVM property in
      * some way
      *
-     * @param attributeValue
-     * @return
+     * @param attributeValue to decorate
+     * @return decorated value
      */
     String decorate(String attributeValue);
 }

File: nifi/nifi-api/src/main/java/org/apache/nifi/processor/DataUnit.java
Patch:
@@ -21,9 +21,6 @@
 
 public enum DataUnit {
 
-    // 1024 * 1024 = 
-    // 1024 * 1024 * 1024
-    // 1024 * 1024 * 1024 * 1024 
     /**
      * Bytes
      */

File: nifi/nifi-api/src/main/java/org/apache/nifi/processor/Processor.java
Patch:
@@ -54,7 +54,7 @@ public interface Processor extends ConfigurableComponent {
      * Provides the processor with access to objects that may be of use
      * throughout the life of the Processor
      *
-     * @param context
+     * @param context of initialization
      */
     void initialize(ProcessorInitializationContext context);
 

File: nifi/nifi-api/src/main/java/org/apache/nifi/processor/annotation/CapabilityDescription.java
Patch:
@@ -28,7 +28,8 @@
  * provided. This description can be provided to a user in logs, UI, etc.
  *
  * @author none
- * @deprecated This Annotation has been replaced by the {@link org.apache.nifi.annotation.documentation.CapabilityDescription}
+ * @deprecated This Annotation has been replaced by the
+ * {@link org.apache.nifi.annotation.documentation.CapabilityDescription}
  * annotation.
  */
 @Documented

File: nifi/nifi-api/src/main/java/org/apache/nifi/processor/annotation/EventDriven.java
Patch:
@@ -39,8 +39,8 @@
  * </p>
  *
  * @author none
- * @deprecated This Annotation has been replaced by the {@link org.apache.nifi.annotation.behavior.EventDriven}
- * annotation.
+ * @deprecated This Annotation has been replaced by the
+ * {@link org.apache.nifi.annotation.behavior.EventDriven} annotation.
  */
 @Documented
 @Target({ElementType.TYPE})

File: nifi/nifi-api/src/main/java/org/apache/nifi/processor/annotation/OnAdded.java
Patch:
@@ -32,7 +32,8 @@
  * be added to the graph.
  *
  * @author none
- * @deprecated This Annotation has been replaced by the {@link org.apache.nifi.annotation.lifecycle.OnAdded} annotation.
+ * @deprecated This Annotation has been replaced by the
+ * {@link org.apache.nifi.annotation.lifecycle.OnAdded} annotation.
  */
 @Documented
 @Target({ElementType.METHOD})

File: nifi/nifi-api/src/main/java/org/apache/nifi/processor/annotation/OnRemoved.java
Patch:
@@ -33,7 +33,8 @@
  * be removed from the graph.
  *
  * @author none
- * @deprecated This Annotation has been replaced by the {@link org.apache.nifi.annotation.lifecycle.OnRemoved} annotation.
+ * @deprecated This Annotation has been replaced by the
+ * {@link org.apache.nifi.annotation.lifecycle.OnRemoved} annotation.
  */
 @Documented
 @Target({ElementType.METHOD})

File: nifi/nifi-api/src/main/java/org/apache/nifi/processor/annotation/OnScheduled.java
Patch:
@@ -35,8 +35,9 @@
  * be scheduled to run.
  *
  * @author none
- * @deprecated This Annotation has been replaced by the {@link org.apache.nifi.annotation.lifecycle.OnScheduled} annotation.
-*/
+ * @deprecated This Annotation has been replaced by the
+ * {@link org.apache.nifi.annotation.lifecycle.OnScheduled} annotation.
+ */
 @Documented
 @Target({ElementType.METHOD})
 @Retention(RetentionPolicy.RUNTIME)

File: nifi/nifi-api/src/main/java/org/apache/nifi/processor/annotation/OnShutdown.java
Patch:
@@ -29,7 +29,8 @@
  * most once for each processor instance in a process lifetime.
  *
  * @author none
- * @deprecated This Annotation has been replaced by the {@link org.apache.nifi.annotation.lifecycle.OnShutdown} annotation.
+ * @deprecated This Annotation has been replaced by the
+ * {@link org.apache.nifi.annotation.lifecycle.OnShutdown} annotation.
  */
 @Documented
 @Target({ElementType.METHOD})

File: nifi/nifi-api/src/main/java/org/apache/nifi/processor/annotation/OnStopped.java
Patch:
@@ -46,7 +46,8 @@
  * </p>
  *
  * @author none
- * @deprecated This Annotation has been replaced by the {@link org.apache.nifi.annotation.lifecycle.OnStopped} annotation.
+ * @deprecated This Annotation has been replaced by the
+ * {@link org.apache.nifi.annotation.lifecycle.OnStopped} annotation.
  */
 @Documented
 @Target({ElementType.METHOD})

File: nifi/nifi-api/src/main/java/org/apache/nifi/processor/annotation/OnUnscheduled.java
Patch:
@@ -37,7 +37,8 @@
  * be scheduled to run.
  *
  * @author none
- * @deprecated This Annotation has been replaced by the {@link org.apache.nifi.annotation.lifecycle.OnUnscheduled} annotation.
+ * @deprecated This Annotation has been replaced by the
+ * {@link org.apache.nifi.annotation.lifecycle.OnUnscheduled} annotation.
  */
 @Documented
 @Target({ElementType.METHOD})

File: nifi/nifi-api/src/main/java/org/apache/nifi/processor/annotation/SideEffectFree.java
Patch:
@@ -36,7 +36,8 @@
  * repeated (implied idempotent behavior).
  *
  * @author none
- * @deprecated This Annotation has been replaced by the {@link org.apache.nifi.annotation.behavior.SideEffectFree} annotation.
+ * @deprecated This Annotation has been replaced by the
+ * {@link org.apache.nifi.annotation.behavior.SideEffectFree} annotation.
  */
 @Documented
 @Target({ElementType.TYPE})

File: nifi/nifi-api/src/main/java/org/apache/nifi/processor/annotation/SupportsBatching.java
Patch:
@@ -41,7 +41,8 @@
  * from a remote source.
  *
  * @author none
- * @deprecated This Annotation has been replaced by the {@link org.apache.nifi.annotation.behavior.SupportsBatching} annotation.
+ * @deprecated This Annotation has been replaced by the
+ * {@link org.apache.nifi.annotation.behavior.SupportsBatching} annotation.
  */
 @Documented
 @Target({ElementType.TYPE})

File: nifi/nifi-api/src/main/java/org/apache/nifi/processor/annotation/TriggerSerially.java
Patch:
@@ -30,8 +30,9 @@
  * execution.
  *
  * @author none
- * @deprecated This Annotation has been replaced by the {@link org.apache.nifi.annotation.behavior.TriggerSerially} annotation.
-*/
+ * @deprecated This Annotation has been replaced by the
+ * {@link org.apache.nifi.annotation.behavior.TriggerSerially} annotation.
+ */
 @Documented
 @Target({ElementType.TYPE})
 @Retention(RetentionPolicy.RUNTIME)

File: nifi/nifi-api/src/main/java/org/apache/nifi/processor/annotation/TriggerWhenAnyDestinationAvailable.java
Patch:
@@ -30,7 +30,9 @@
  * destinations report that they have available space.
  *
  * @author none
- * @deprecated This Annotation has been replaced by the {@link org.apache.nifi.annotation.behavior.TriggerWhenAnyDestinationAvailable} annotation.
+ * @deprecated This Annotation has been replaced by the
+ * {@link org.apache.nifi.annotation.behavior.TriggerWhenAnyDestinationAvailable}
+ * annotation.
  */
 @Documented
 @Target({ElementType.TYPE})

File: nifi/nifi-api/src/main/java/org/apache/nifi/processor/annotation/TriggerWhenEmpty.java
Patch:
@@ -32,7 +32,8 @@
  * their queue or they present this annotation.
  *
  * @author none
- * @deprecated This Annotation has been replaced by the {@link org.apache.nifi.annotation.behavior.TriggerWhenEmpty} annotation.
+ * @deprecated This Annotation has been replaced by the
+ * {@link org.apache.nifi.annotation.behavior.TriggerWhenEmpty} annotation.
  */
 @Documented
 @Target({ElementType.TYPE})

File: nifi/nifi-api/src/main/java/org/apache/nifi/processor/io/InputStreamCallback.java
Patch:
@@ -30,8 +30,8 @@ public interface InputStreamCallback {
      * automatically opened and closed though it is ok to close the stream
      * manually.
      *
-     * @param in
-     * @throws IOException
+     * @param in the stream to read bytes from
+     * @throws IOException if issues reading from the underlying stream
      */
     void process(InputStream in) throws IOException;
 

File: nifi/nifi-api/src/main/java/org/apache/nifi/processor/io/OutputStreamCallback.java
Patch:
@@ -31,8 +31,8 @@ public interface OutputStreamCallback {
      * manually - and quite important if any streams wrapping these streams open
      * resources which should be cleared.
      *
-     * @param out
-     * @throws IOException
+     * @param out the stream to write bytes to
+     * @throws IOException if issues writing to output stream
      */
     void process(OutputStream out) throws IOException;
 

File: nifi/nifi-api/src/main/java/org/apache/nifi/reporting/ReportingTask.java
Patch:
@@ -60,16 +60,16 @@ public interface ReportingTask extends ConfigurableComponent {
      * Provides the Reporting Task with access to objects that may be of use
      * throughout the life of the service
      *
-     * @param config
-     * @throws org.apache.nifi.reporting.InitializationException
+     * @param config of initialization context
+     * @throws org.apache.nifi.reporting.InitializationException if unable to init
      */
     void initialize(ReportingInitializationContext config) throws InitializationException;
 
     /**
      * This method is called on a scheduled interval to allow the Reporting Task
      * to perform its tasks.
      *
-     * @param context
+     * @param context reporting context
      */
     void onTrigger(ReportingContext context);
 }

File: nifi/nifi-api/src/main/java/org/apache/nifi/web/NiFiWebConfigurationRequestContext.java
Patch:
@@ -17,13 +17,14 @@
 package org.apache.nifi.web;
 
 /**
- * Contextual details required to make a configuration request from a UI extension.
+ * Contextual details required to make a configuration request from a UI
+ * extension.
  */
 public interface NiFiWebConfigurationRequestContext extends NiFiWebRequestContext {
 
     /**
      * The revision to include in the request.
-     * 
+     *
      * @return the revision
      */
     Revision getRevision();

File: nifi/nifi-api/src/main/java/org/apache/nifi/web/Revision.java
Patch:
@@ -37,12 +37,12 @@ public class Revision implements Serializable {
      * the client ID
      */
     private final String clientId;
-    
+
     public Revision(Long revision, String clientId) {
         this.version = revision;
         this.clientId = clientId;
     }
-    
+
     public String getClientId() {
         return clientId;
     }

File: nifi/nifi-commons/nifi-data-provenance-utils/src/main/java/org/apache/nifi/provenance/AsyncLineageSubmission.java
Patch:
@@ -27,6 +27,7 @@
  *
  */
 public class AsyncLineageSubmission implements ComputeLineageSubmission {
+
     private final String lineageIdentifier = UUID.randomUUID().toString();
     private final Date submissionTime = new Date();
 

File: nifi/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/GreaterThanEvaluator.java
Patch:
@@ -49,9 +49,6 @@ public QueryResult<Boolean> evaluate(final Map<String, String> attributes) {
         return new BooleanQueryResult(subjectValue > comparisonValue);
     }
 
-    ;
-    
-
     @Override
     public Evaluator<?> getSubjectEvaluator() {
         return subject;

File: nifi/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/GreaterThanOrEqualEvaluator.java
Patch:
@@ -49,9 +49,6 @@ public QueryResult<Boolean> evaluate(final Map<String, String> attributes) {
         return new BooleanQueryResult(subjectValue >= comparisonValue);
     }
 
-    ;
-    
-
     @Override
     public Evaluator<?> getSubjectEvaluator() {
         return subject;

File: nifi/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/IsEmptyEvaluator.java
Patch:
@@ -24,12 +24,13 @@
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
 
 public class IsEmptyEvaluator extends BooleanEvaluator {
+
     private final Evaluator<?> subjectEvaluator;
-    
+
     public IsEmptyEvaluator(final Evaluator<?> subjectEvaluator) {
         this.subjectEvaluator = subjectEvaluator;
     }
-    
+
     @Override
     public QueryResult<Boolean> evaluate(final Map<String, String> attributes) {
         final Object subjectValue = subjectEvaluator.evaluate(attributes).getValue();

File: nifi/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/LessThanEvaluator.java
Patch:
@@ -49,9 +49,6 @@ public QueryResult<Boolean> evaluate(final Map<String, String> attributes) {
         return new BooleanQueryResult(subjectValue < comparisonValue);
     }
 
-    ;
-    
-
     @Override
     public Evaluator<?> getSubjectEvaluator() {
         return subject;

File: nifi/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/LessThanOrEqualEvaluator.java
Patch:
@@ -49,9 +49,6 @@ public QueryResult<Boolean> evaluate(final Map<String, String> attributes) {
         return new BooleanQueryResult(subjectValue <= comparisonValue);
     }
 
-    ;
-    
-
     @Override
     public Evaluator<?> getSubjectEvaluator() {
         return subject;

File: nifi/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/selection/MultiMatchAttributeEvaluator.java
Patch:
@@ -44,7 +44,7 @@ public MultiMatchAttributeEvaluator(final List<String> attributeRegexes, final i
     /**
      * Can be called only after the first call to evaluate
      *
-     * @return
+     * @return number of remaining evaluations
      */
     @Override
     public int getEvaluationsRemaining() {

File: nifi/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/exception/IllegalAttributeException.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.nifi.attribute.expression.language.exception;
 
 public class IllegalAttributeException extends RuntimeException {
+
     private static final long serialVersionUID = 12348721897342L;
 
     public IllegalAttributeException() {

File: nifi/nifi-commons/nifi-flowfile-packager/src/main/java/org/apache/nifi/util/FlowFilePackagerV1.java
Patch:
@@ -78,7 +78,7 @@ private void writeContentEntry(final TarArchiveOutputStream tarOut, final InputS
         entry.setMode(tarPermissions);
         entry.setSize(fileSize);
         tarOut.putArchiveEntry(entry);
-        final byte[] buffer = new byte[512 << 10];//512KB            
+        final byte[] buffer = new byte[512 << 10];//512KB
         int bytesRead = 0;
         while ((bytesRead = inStream.read(buffer)) != -1) { //still more data to read
             if (bytesRead > 0) {

File: nifi/nifi-commons/nifi-flowfile-packager/src/main/java/org/apache/nifi/util/FlowFileUnpackagerV1.java
Patch:
@@ -51,7 +51,7 @@ public Map<String, String> unpackageFlowFile(final InputStream in, final OutputS
         final TarArchiveEntry contentEntry = tarIn.getNextTarEntry();
 
         if (contentEntry != null && contentEntry.getName().equals(FlowFilePackagerV1.FILENAME_CONTENT)) {
-            final byte[] buffer = new byte[512 << 10];//512KB            
+            final byte[] buffer = new byte[512 << 10];//512KB
             int bytesRead = 0;
             while ((bytesRead = tarIn.read(buffer)) != -1) { //still more data to read
                 if (bytesRead > 0) {

File: nifi/nifi-commons/nifi-hl7-query-language/src/main/java/org/apache/nifi/hl7/io/HL7Reader.java
Patch:
@@ -22,6 +22,6 @@
 
 public interface HL7Reader {
 
-	HL7Message nextMessage() throws IOException;
-	
+    HL7Message nextMessage() throws IOException;
+
 }

File: nifi/nifi-commons/nifi-hl7-query-language/src/main/java/org/apache/nifi/hl7/model/HL7Field.java
Patch:
@@ -16,6 +16,5 @@
  */
 package org.apache.nifi.hl7.model;
 
-
 public interface HL7Field extends HL7Component {
 }

File: nifi/nifi-commons/nifi-hl7-query-language/src/main/java/org/apache/nifi/hl7/query/evaluator/BooleanEvaluator.java
Patch:
@@ -18,7 +18,7 @@
 
 public abstract class BooleanEvaluator implements Evaluator<Boolean> {
 
-	public Class<? extends Boolean> getType() {
-		return Boolean.class;
-	}
+    public Class<? extends Boolean> getType() {
+        return Boolean.class;
+    }
 }

File: nifi/nifi-commons/nifi-processor-utilities/src/main/java/org/apache/nifi/processor/util/FlowFileFilters.java
Patch:
@@ -32,7 +32,7 @@ public class FlowFileFilters {
      * @param maxSize the maximum size of the group of FlowFiles
      * @param unit the unit of the <code>maxSize</code> argument
      * @param maxCount the maximum number of FlowFiles to pull
-     * @return
+     * @return filter
      */
     public static FlowFileFilter newSizeBasedFilter(final double maxSize, final DataUnit unit, final int maxCount) {
         final double maxBytes = DataUnit.B.convert(maxSize, unit);

File: nifi/nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/exception/ProtocolException.java
Patch:
@@ -19,8 +19,8 @@
 import java.io.IOException;
 
 /**
- * A ProtocolException occurs when unexpected data is received, for example
- * an invalid Response Code.
+ * A ProtocolException occurs when unexpected data is received, for example an
+ * invalid Response Code.
  */
 public class ProtocolException extends IOException {
 

File: nifi/nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/io/socket/ssl/SSLSocketChannelOutput.java
Patch:
@@ -24,9 +24,10 @@
 import org.apache.nifi.remote.protocol.CommunicationsOutput;
 
 public class SSLSocketChannelOutput implements CommunicationsOutput {
+
     private final OutputStream out;
     private final ByteCountingOutputStream countingOut;
-    
+
     public SSLSocketChannelOutput(final SSLSocketChannel channel) {
         countingOut = new ByteCountingOutputStream(new SSLSocketChannelOutputStream(channel));
         out = new BufferedOutputStream(countingOut);
@@ -36,7 +37,7 @@ public SSLSocketChannelOutput(final SSLSocketChannel channel) {
     public OutputStream getOutputStream() throws IOException {
         return out;
     }
-    
+
     @Override
     public long getBytesWritten() {
         return countingOut.getBytesWritten();

File: nifi/nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/protocol/CommunicationsInput.java
Patch:
@@ -23,10 +23,11 @@ public interface CommunicationsInput {
 
     /**
      * Reads all data currently on the socket and throws it away
-     * @throws IOException
+     *
+     * @throws IOException if unable to consume
      */
     void consume() throws IOException;
-    
+
     InputStream getInputStream() throws IOException;
 
     long getBytesRead();

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/impl/WebClusterManager.java
Patch:
@@ -424,6 +424,9 @@ public void run() {
                     }
                 } catch(final Throwable t) {
                     logger.warn("Unable to capture component metrics from Node heartbeats: " + t);
+                    if (logger.isDebugEnabled()) {
+                        logger.warn("", t);
+                    }
                 } finally {
                     readLock.unlock("capture component metrics from node heartbeats");
                 }

File: nifi/nifi-nar-bundles/nifi-solr-bundle/nifi-solr-processors/src/main/java/org/apache/nifi/processors/solr/SolrProcessor.java
Patch:
@@ -57,8 +57,8 @@ public abstract class SolrProcessor extends AbstractProcessor {
 
     public static final PropertyDescriptor SOLR_LOCATION = new PropertyDescriptor
             .Builder().name("Solr Location")
-            .description("The Solr url for a Solr Type of Standard, " +
-                    "or the ZooKeeper hosts for a Solr Type of Cloud.")
+            .description("The Solr url for a Solr Type of Standard (ex: http://localhost:8984/solr/gettingstarted), " +
+                    "or the ZooKeeper hosts for a Solr Type of Cloud (ex: localhost:9983).")
             .required(true)
             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)
             .build();

File: nifi/nifi-nar-bundles/nifi-solr-bundle/nifi-solr-processors/src/main/java/org/apache/nifi/processors/solr/GetSolr.java
Patch:
@@ -241,7 +241,7 @@ public void onTrigger(ProcessContext context, ProcessSession session) throws Pro
 
             lastEndDatedRef.set(currDate);
             writeLastEndDate();
-        } catch (SolrServerException e) {
+        } catch (SolrServerException | IOException e) {
             context.yield();
             session.rollback();
             logger.error("Failed to execute query {} due to {}", new Object[]{query, e}, e);

File: nifi/nifi-nar-bundles/nifi-hl7-bundle/nifi-hl7-processors/src/test/java/org/apache/nifi/processors/hl7/TestExtractHL7Attributes.java
Patch:
@@ -34,7 +34,7 @@ public class TestExtractHL7Attributes {
 	public void testExtract() throws IOException {
 		System.setProperty("org.slf4j.simpleLogger.log.org.apache.nifi", "DEBUG");
 		final TestRunner runner = TestRunners.newTestRunner(ExtractHL7Attributes.class);
-		runner.enqueue(Paths.get("src/test/resources/1.hl7"));
+		runner.enqueue(Paths.get("src/test/resources/hypoglycemia.hl7"));
 		
 		runner.run();
 		runner.assertAllFlowFilesTransferred(ExtractHL7Attributes.REL_SUCCESS, 1);

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/tasks/ContinuallyRunConnectableTask.java
Patch:
@@ -107,6 +107,6 @@ public Boolean call() {
             return true;
         }
         
-        return true;
+        return false;	// do not yield
     }
 }

File: nifi/nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/client/socket/SocketClient.java
Patch:
@@ -84,6 +84,7 @@ private String getPortIdentifier(final TransferDirection direction) throws IOExc
 		    logger.debug("Unable to resolve port [{}] to an identifier", portName);
 		} else {
 		    logger.debug("Resolved port [{}] to identifier [{}]", portName, portId);
+		    this.portIdentifier = portId;
 		}
 		
 		return portId;
@@ -136,7 +137,7 @@ public Transaction createTransaction(final TransferDirection direction) throws I
 				connectionState.getPeer(), connectionState.getCodec(), direction);
 		} catch (final Throwable t) {
 			pool.terminate(connectionState);
-			throw t;
+			throw new IOException("Unable to create Transaction to communicate with " + connectionState.getPeer(), t);
 		}
 		
 		// Wrap the transaction in a new one that will return the EndpointConnectionState back to the pool whenever

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-site-to-site/src/main/java/org/apache/nifi/remote/StandardRemoteGroupPort.java
Patch:
@@ -183,6 +183,7 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
             remoteGroup.getEventReporter().reportEvent(Severity.ERROR, CATEGORY, message);
             return;
         } catch (final IOException e) {
+        	context.yield();
             final String message = String.format("%s failed to communicate with %s due to %s", this, url, e.toString());
             logger.error(message);
             if ( logger.isDebugEnabled() ) {

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/NiFiServiceFacade.java
Patch:
@@ -252,9 +252,10 @@ public interface NiFiServiceFacade {
     /**
      * Returns the list of controller service types.
      * 
+     * @param serviceType Filters only service types that implement this type
      * @return The list of available controller types
      */
-    Set<DocumentedTypeDTO> getControllerServiceTypes();
+    Set<DocumentedTypeDTO> getControllerServiceTypes(String serviceType);
     
     /**
      * Returns the list of reporting task types.

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiServiceFacade.java
Patch:
@@ -1718,8 +1718,8 @@ public Set<DocumentedTypeDTO> getProcessorTypes() {
     }
 
     @Override
-    public Set<DocumentedTypeDTO> getControllerServiceTypes() {
-        return controllerFacade.getControllerServiceTypes();
+    public Set<DocumentedTypeDTO> getControllerServiceTypes(final String serviceType) {
+        return controllerFacade.getControllerServiceTypes(serviceType);
     }
 
     @Override

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/util/SnippetUtils.java
Patch:
@@ -222,7 +222,7 @@ private void addControllerServicesToSnippet(final FlowSnippetDTO snippet, final
                 }
                 
                 final PropertyDescriptorDTO propertyDescriptorDto = descriptors.get(propName);
-                if ( propertyDescriptorDto != null && propertyDescriptorDto.isIdentifiesControllerService() ) {
+                if ( propertyDescriptorDto != null && propertyDescriptorDto.getIdentifiesControllerService() != null ) {
                     final ControllerServiceNode serviceNode = flowController.getControllerServiceNode(propValue);
                     if ( serviceNode != null ) {
                         addControllerServicesToSnippet(snippet, serviceNode);
@@ -363,7 +363,7 @@ private FlowSnippetDTO copyContentsForGroup(final FlowSnippetDTO snippetContents
                 final Map<String, PropertyDescriptorDTO> descriptors = serviceDTO.getDescriptors();
                 if ( properties != null && descriptors != null ) {
                     for ( final PropertyDescriptorDTO descriptor : descriptors.values() ) {
-                        if ( descriptor.isIdentifiesControllerService() ) {
+                        if ( descriptor.getIdentifiesControllerService() != null ) {
                             final String currentServiceId = properties.get(descriptor.getName());
                             if ( currentServiceId == null ) {
                                 continue;
@@ -558,7 +558,7 @@ private void updateControllerServiceIdentifiers(final ProcessorConfigDTO configD
         final Map<String, PropertyDescriptorDTO> descriptors = configDto.getDescriptors();
         if ( properties != null && descriptors != null ) {
             for ( final PropertyDescriptorDTO descriptor : descriptors.values() ) {
-                if ( descriptor.isIdentifiesControllerService() ) {
+                if ( descriptor.getIdentifiesControllerService() != null ) {
                     final String currentServiceId = properties.get(descriptor.getName());
                     if ( currentServiceId == null ) {
                         continue;

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/scheduling/StandardProcessScheduler.java
Patch:
@@ -339,8 +339,8 @@ public void run() {
                             final ProcessorLog procLog = new SimpleProcessLogger(procNode.getIdentifier(), procNode.getProcessor());
 
                             procLog.error("{} failed to invoke @OnScheduled method due to {}; processor will not be scheduled to run for {}",
-                                    new Object[]{procNode.getProcessor(), cause.getCause(), administrativeYieldDuration}, cause.getCause());
-                            LOG.error("Failed to invoke @OnScheduled method due to {}", cause.getCause().toString(), cause.getCause());
+                                    new Object[]{procNode.getProcessor(), cause, administrativeYieldDuration}, cause);
+                            LOG.error("Failed to invoke @OnScheduled method due to {}", cause.toString(), cause);
 
                             ReflectionUtils.quietlyInvokeMethodsWithAnnotation(OnUnscheduled.class, procNode.getProcessor(), processContext);
                             ReflectionUtils.quietlyInvokeMethodsWithAnnotation(OnStopped.class, procNode.getProcessor(), processContext);

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/processor/SimpleProcessLogger.java
Patch:
@@ -243,7 +243,7 @@ private Object[] addProcessorAndThrowable(final Object[] os, final Throwable t)
         for (int i = 0; i < os.length; i++) {
             modifiedArgs[i + 1] = os[i];
         }
-        modifiedArgs[modifiedArgs.length - 1] = t.toString();
+        modifiedArgs[modifiedArgs.length - 1] = (t == null) ? "" : t.toString();
 
         return modifiedArgs;
     }

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/scheduling/StandardProcessScheduler.java
Patch:
@@ -297,7 +297,9 @@ public void run() {
                         final Class<? extends ControllerService> serviceDefinition = descriptor.getControllerServiceDefinition();
                         if ( serviceDefinition != null ) {
                             final String serviceId = processContext.getProperty(descriptor).getValue();
-                            serviceIds.add(serviceId);
+                            if ( serviceId != null ) {
+                            	serviceIds.add(serviceId);
+                            }
                         }
                     }
                     

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/scheduling/StandardProcessScheduler.java
Patch:
@@ -297,7 +297,9 @@ public void run() {
                         final Class<? extends ControllerService> serviceDefinition = descriptor.getControllerServiceDefinition();
                         if ( serviceDefinition != null ) {
                             final String serviceId = processContext.getProperty(descriptor).getValue();
-                            serviceIds.add(serviceId);
+                            if ( serviceId != null ) {
+                            	serviceIds.add(serviceId);
+                            }
                         }
                     }
                     

File: nifi/nifi-api/src/main/java/org/apache/nifi/annotation/lifecycle/OnUnscheduled.java
Patch:
@@ -47,8 +47,6 @@
  * If using 1 argument and the component using the annotation is a Reporting Task, that argument must
  * be of type {@link org.apache.nifi.controller.ConfigurationContext ConfigurationContext}.
  * </p>
- *
- * @author none
  */
 @Documented
 @Target({ElementType.METHOD})

File: nifi/nifi-api/src/main/java/org/apache/nifi/web/ClusterRequestException.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.nifi.web;
 
 /**
+ * An general error occurred when attempting to communicate with the cluster.
  */
 public class ClusterRequestException extends RuntimeException {
 

File: nifi/nifi-api/src/main/java/org/apache/nifi/web/NiFiWebContext.java
Patch:
@@ -24,6 +24,7 @@
  * NiFi web context providing limited access to dataflow configuration for
  * processor custom UIs.
  */
+@Deprecated
 public interface NiFiWebContext {
 
     /**

File: nifi/nifi-api/src/main/java/org/apache/nifi/web/NiFiWebContextConfig.java
Patch:
@@ -19,6 +19,7 @@
 /**
  * Context configuration for methods invoked from the NiFiWebContext.
  */
+@Deprecated
 public interface NiFiWebContextConfig {
 
     /**

File: nifi/nifi-api/src/main/java/org/apache/nifi/web/ProcessorConfigurationAction.java
Patch:
@@ -19,6 +19,7 @@
 /**
  *
  */
+@Deprecated
 public class ProcessorConfigurationAction {
 
     private final String processorId;

File: nifi/nifi-api/src/main/java/org/apache/nifi/web/ProcessorInfo.java
Patch:
@@ -22,6 +22,7 @@
 /**
  *
  */
+@Deprecated
 public class ProcessorInfo {
 
     private final String id;

File: nifi/nifi-commons/nifi-properties/src/main/java/org/apache/nifi/util/NiFiProperties.java
Patch:
@@ -42,8 +42,6 @@ public class NiFiProperties extends Properties {
     public static final String PROPERTIES_FILE_PATH = "nifi.properties.file.path";
     public static final String FLOW_CONFIGURATION_FILE = "nifi.flow.configuration.file";
     public static final String FLOW_CONFIGURATION_ARCHIVE_FILE = "nifi.flow.configuration.archive.file";
-    public static final String TASK_CONFIGURATION_FILE = "nifi.reporting.task.configuration.file";
-    public static final String SERVICE_CONFIGURATION_FILE = "nifi.controller.service.configuration.file";
     public static final String AUTHORITY_PROVIDER_CONFIGURATION_FILE = "nifi.authority.provider.configuration.file";
     public static final String REPOSITORY_DATABASE_DIRECTORY = "nifi.database.directory";
     public static final String RESTORE_DIRECTORY = "nifi.restore.directory";

File: nifi/nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/client/socket/EndpointConnectionPool.java
Patch:
@@ -700,7 +700,7 @@ static List<PeerStatus> formulateDestinationList(final ClusterNodeInformation cl
             final int flowFileCount = nodeInfo.getTotalFlowFiles();
             // don't allow any node to get more than 80% of the data
             final double percentageOfFlowFiles = Math.min(0.8D, ((double) flowFileCount / (double) totalFlowFileCount));
-            final double relativeWeighting = (direction == TransferDirection.RECEIVE) ? (1 - percentageOfFlowFiles) : percentageOfFlowFiles;
+            final double relativeWeighting = (direction == TransferDirection.SEND) ? (1 - percentageOfFlowFiles) : percentageOfFlowFiles;
             final int entries = Math.max(1, (int) (numDestinations * relativeWeighting));
             
             entryCountMap.put(nodeInfo, Math.max(1, entries));

File: nifi/nifi-commons/nifi-site-to-site-client/src/test/java/org/apache/nifi/remote/client/socket/TestEndpointConnectionStatePool.java
Patch:
@@ -39,7 +39,7 @@ public void testFormulateDestinationListForOutput() throws IOException {
         collection.add(new NodeInformation("ShouldGetMedium", 5, 5555, true, 4096));
 
         clusterNodeInfo.setNodeInformation(collection);
-        final List<PeerStatus> destinations = EndpointConnectionPool.formulateDestinationList(clusterNodeInfo, TransferDirection.SEND);
+        final List<PeerStatus> destinations = EndpointConnectionPool.formulateDestinationList(clusterNodeInfo, TransferDirection.RECEIVE);
         for ( final PeerStatus peerStatus : destinations ) {
             System.out.println(peerStatus.getPeerDescription());
         }
@@ -53,7 +53,7 @@ public void testFormulateDestinationListForOutputHugeDifference() throws IOExcep
         collection.add(new NodeInformation("ShouldGetLots", 2, 2222, true, 50000));
 
         clusterNodeInfo.setNodeInformation(collection);
-        final List<PeerStatus> destinations = EndpointConnectionPool.formulateDestinationList(clusterNodeInfo, TransferDirection.SEND);
+        final List<PeerStatus> destinations = EndpointConnectionPool.formulateDestinationList(clusterNodeInfo, TransferDirection.RECEIVE);
         for ( final PeerStatus peerStatus : destinations ) {
             System.out.println(peerStatus.getPeerDescription());
         }

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-administration/src/main/java/org/apache/nifi/admin/dao/ActionDAO.java
Patch:
@@ -48,12 +48,12 @@ public interface ActionDAO {
 
     /**
      * Finds the previous values for the specified property in the specified
-     * processor. Returns empty list if there are none.
+     * component. Returns empty list if there are none.
      *
-     * @param processorId
+     * @param componentId
      * @return
      */
-    Map<String, List<PreviousValue>> getPreviousValues(String processorId);
+    Map<String, List<PreviousValue>> getPreviousValues(String componentId);
 
     /**
      * Finds the specified action.

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-administration/src/main/java/org/apache/nifi/admin/service/AuditService.java
Patch:
@@ -40,12 +40,12 @@ public interface AuditService {
 
     /**
      * Finds the previous values for the specified property in the specified
-     * processor. Returns null if there are none.
+     * component. Returns null if there are none.
      *
-     * @param processorId
+     * @param componentId
      * @return
      */
-    Map<String, List<PreviousValue>> getPreviousValues(String processorId);
+    Map<String, List<PreviousValue>> getPreviousValues(String componentId);
 
     /**
      * Get the actions within the given date range.

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-administration/src/main/java/org/apache/nifi/admin/service/impl/StandardAuditService.java
Patch:
@@ -81,7 +81,7 @@ public void addActions(Collection<Action> actions) {
     }
 
     @Override
-    public Map<String, List<PreviousValue>> getPreviousValues(String processorId) {
+    public Map<String, List<PreviousValue>> getPreviousValues(String componentId) {
         Transaction transaction = null;
         Map<String, List<PreviousValue>> previousValues = null;
 
@@ -91,7 +91,7 @@ public Map<String, List<PreviousValue>> getPreviousValues(String processorId) {
             transaction = transactionBuilder.start();
 
             // seed the accounts
-            GetPreviousValues getActions = new GetPreviousValues(processorId);
+            GetPreviousValues getActions = new GetPreviousValues(componentId);
             previousValues = transaction.execute(getActions);
 
             // commit the transaction

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/NiFiComponentDTO.java
Patch:
@@ -55,7 +55,7 @@ public void setId(final String id) {
     }
 
     /**
-     * The id for the parent group of this component.
+     * The id for the parent group of this component if applicable, null otherwise.
      *
      * @return
      */
@@ -85,7 +85,7 @@ public void setPosition(final PositionDTO position) {
     }
 
     /**
-     * The position of this component in the UI.
+     * The position of this component in the UI if applicable, null otherwise.
      *
      * @return The position
      */

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/action/component/details/ComponentDetailsDTO.java
Patch:
@@ -24,7 +24,7 @@
  */
 @XmlType(name = "componentDetails")
 @XmlSeeAlso({
-    ProcessorDetailsDTO.class,
+    ExtensionDetailsDTO.class,
     RemoteProcessGroupDetailsDTO.class
 })
 public class ComponentDetailsDTO {

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/processor/StandardSchedulingContext.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.nifi.controller.ProcessorNode;
 import org.apache.nifi.controller.service.ControllerServiceNode;
 import org.apache.nifi.controller.service.ControllerServiceProvider;
+import org.apache.nifi.controller.service.ControllerServiceState;
 
 public class StandardSchedulingContext implements SchedulingContext {
 
@@ -45,8 +46,8 @@ public void leaseControllerService(final String identifier) {
             throw new IllegalArgumentException("Cannot lease Controller Service because no Controller Service exists with identifier " + identifier);
         }
 
-        if (serviceNode.isDisabled()) {
-            throw new IllegalStateException("Cannot lease Controller Service because Controller Service " + serviceNode.getProxiedControllerService() + " is currently disabled");
+        if ( serviceNode.getState() != ControllerServiceState.ENABLED ) {
+            throw new IllegalStateException("Cannot lease Controller Service because Controller Service " + serviceNode.getProxiedControllerService() + " is not currently enabled");
         }
 
         if (!serviceNode.isValid()) {

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/service/StandardControllerServiceProviderTest.java
Patch:
@@ -43,7 +43,7 @@ public static void setupSuite() throws Exception {
     public void setup() throws Exception {
     	String id = "id";
     	String clazz = "org.apache.nifi.controller.service.util.TestControllerService";  
-    	ControllerServiceProvider provider = new StandardControllerServiceProvider();
+    	ControllerServiceProvider provider = new StandardControllerServiceProvider(null, null);
     	ControllerServiceNode node = provider.createControllerService(clazz,id,true);
     	proxied = node.getProxiedControllerService();
     	implementation = node.getControllerServiceImplementation();

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-user-actions/src/main/java/org/apache/nifi/action/Component.java
Patch:
@@ -27,5 +27,7 @@ public enum Component {
     ProcessGroup,
     RemoteProcessGroup,
 	Funnel,
-    Connection;
+    Connection,
+    ControllerService,
+    ReportingTask;
 }

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-user-actions/src/main/java/org/apache/nifi/action/component/details/ExtensionDetails.java
Patch:
@@ -19,7 +19,7 @@
 /**
  *
  */
-public class ProcessorDetails extends ComponentDetails {
+public class ExtensionDetails extends ComponentDetails {
 
     private String type;
 

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-custom-ui-utilities/src/main/java/org/apache/nifi/web/HttpServletRequestContextConfig.java
Patch:
@@ -23,6 +23,7 @@
  * An implementation of the NiFiWebContextConfig that retrieves configuration
  * from a HttpServletRequest instance.
  */
+@Deprecated
 public class HttpServletRequestContextConfig implements NiFiWebContextConfig {
 
     public static final String PROCESSOR_ID_PARAM = "processorId";

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ClusterResource.java
Patch:
@@ -379,7 +379,7 @@ public Response updateProcessor(
             // update the revision
             RevisionDTO updatedRevision = new RevisionDTO();
             updatedRevision.setClientId(revision.getClientId());
-            updatedRevision.setVersion(controllerResponse.getRevision());
+            updatedRevision.setVersion(controllerResponse.getVersion());
 
             // generate the response entity
             final ProcessorEntity entity = new ProcessorEntity();

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ConnectionResource.java
Patch:
@@ -450,7 +450,7 @@ public Response createConnection(
         // get the updated revision
         final RevisionDTO updatedRevision = new RevisionDTO();
         updatedRevision.setClientId(revision.getClientId());
-        updatedRevision.setVersion(controllerResponse.getRevision());
+        updatedRevision.setVersion(controllerResponse.getVersion());
 
         // create the response entity
         ConnectionEntity entity = new ConnectionEntity();
@@ -684,7 +684,7 @@ public Response updateConnection(
         // get the updated revision
         final RevisionDTO updatedRevision = new RevisionDTO();
         updatedRevision.setClientId(revision.getClientId());
-        updatedRevision.setVersion(controllerResponse.getRevision());
+        updatedRevision.setVersion(controllerResponse.getVersion());
 
         // create the response entity
         ConnectionEntity entity = new ConnectionEntity();
@@ -742,7 +742,7 @@ public Response deleteRelationshipTarget(
         // create the revision
         final RevisionDTO updatedRevision = new RevisionDTO();
         updatedRevision.setClientId(clientId.getClientId());
-        updatedRevision.setVersion(controllerResponse.getRevision());
+        updatedRevision.setVersion(controllerResponse.getVersion());
 
         // create the response entity
         final ConnectionEntity entity = new ConnectionEntity();

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/FunnelResource.java
Patch:
@@ -244,7 +244,7 @@ public Response createFunnel(
         // get the updated revision
         final RevisionDTO updatedRevision = new RevisionDTO();
         updatedRevision.setClientId(revision.getClientId());
-        updatedRevision.setVersion(controllerResponse.getRevision());
+        updatedRevision.setVersion(controllerResponse.getVersion());
 
         // build the response entity
         final FunnelEntity entity = new FunnelEntity();
@@ -408,7 +408,7 @@ public Response updateFunnel(
         // get the updated revision
         final RevisionDTO updatedRevision = new RevisionDTO();
         updatedRevision.setClientId(revision.getClientId());
-        updatedRevision.setVersion(controllerResponse.getRevision());
+        updatedRevision.setVersion(controllerResponse.getVersion());
 
         // build the response entity
         final FunnelEntity entity = new FunnelEntity();
@@ -465,7 +465,7 @@ public Response removeFunnel(
         // get the updated revision
         final RevisionDTO revision = new RevisionDTO();
         revision.setClientId(clientId.getClientId());
-        revision.setVersion(controllerResponse.getRevision());
+        revision.setVersion(controllerResponse.getVersion());
 
         // build the response entity
         final FunnelEntity entity = new FunnelEntity();

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/InputPortResource.java
Patch:
@@ -251,7 +251,7 @@ public Response createInputPort(
         // get the updated revision
         final RevisionDTO updatedRevision = new RevisionDTO();
         updatedRevision.setClientId(revision.getClientId());
-        updatedRevision.setVersion(controllerResponse.getRevision());
+        updatedRevision.setVersion(controllerResponse.getVersion());
 
         // build the response entity
         final InputPortEntity entity = new InputPortEntity();
@@ -446,7 +446,7 @@ public Response updateInputPort(
         // get the updated revision
         final RevisionDTO updatedRevision = new RevisionDTO();
         updatedRevision.setClientId(revision.getClientId());
-        updatedRevision.setVersion(controllerResponse.getRevision());
+        updatedRevision.setVersion(controllerResponse.getVersion());
 
         // build the response entity
         final InputPortEntity entity = new InputPortEntity();
@@ -503,7 +503,7 @@ public Response removeInputPort(
         // get the updated revision
         final RevisionDTO revision = new RevisionDTO();
         revision.setClientId(clientId.getClientId());
-        revision.setVersion(controllerResponse.getRevision());
+        revision.setVersion(controllerResponse.getVersion());
 
         // build the response entity
         final InputPortEntity entity = new InputPortEntity();

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/LabelResource.java
Patch:
@@ -260,7 +260,7 @@ public Response createLabel(
         // get the updated revision
         final RevisionDTO updatedRevision = new RevisionDTO();
         updatedRevision.setClientId(revision.getClientId());
-        updatedRevision.setVersion(controllerResponse.getRevision());
+        updatedRevision.setVersion(controllerResponse.getVersion());
 
         // build the response entity
         final LabelEntity entity = new LabelEntity();
@@ -463,7 +463,7 @@ public Response updateLabel(
         // get the updated revision
         final RevisionDTO updatedRevision = new RevisionDTO();
         updatedRevision.setClientId(revision.getClientId());
-        updatedRevision.setVersion(controllerResponse.getRevision());
+        updatedRevision.setVersion(controllerResponse.getVersion());
 
         // build the response entity
         final LabelEntity entity = new LabelEntity();
@@ -519,7 +519,7 @@ public Response removeLabel(
         // get the updated revision
         final RevisionDTO revision = new RevisionDTO();
         revision.setClientId(clientId.getClientId());
-        revision.setVersion(controllerResponse.getRevision());
+        revision.setVersion(controllerResponse.getVersion());
 
         // build the response entity
         final LabelEntity entity = new LabelEntity();

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/OutputPortResource.java
Patch:
@@ -251,7 +251,7 @@ public Response createOutputPort(
         // get the updated revision
         final RevisionDTO updatedRevision = new RevisionDTO();
         updatedRevision.setClientId(revision.getClientId());
-        updatedRevision.setVersion(controllerResponse.getRevision());
+        updatedRevision.setVersion(controllerResponse.getVersion());
 
         // build the response entity
         final OutputPortEntity entity = new OutputPortEntity();
@@ -447,7 +447,7 @@ public Response updateOutputPort(
         // get the updated revision
         final RevisionDTO updatedRevision = new RevisionDTO();
         updatedRevision.setClientId(revision.getClientId());
-        updatedRevision.setVersion(controllerResponse.getRevision());
+        updatedRevision.setVersion(controllerResponse.getVersion());
 
         // build the response entity
         final OutputPortEntity entity = new OutputPortEntity();
@@ -504,7 +504,7 @@ public Response removeOutputPort(
         // get the updated revision
         final RevisionDTO revision = new RevisionDTO();
         revision.setClientId(clientId.getClientId());
-        revision.setVersion(controllerResponse.getRevision());
+        revision.setVersion(controllerResponse.getVersion());
 
         // build the response entity
         final OutputPortEntity entity = new OutputPortEntity();

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/SnippetResource.java
Patch:
@@ -340,7 +340,7 @@ public Response createSnippet(
         // get the updated revision
         final RevisionDTO updatedRevision = new RevisionDTO();
         updatedRevision.setClientId(revision.getClientId());
-        updatedRevision.setVersion(response.getRevision());
+        updatedRevision.setVersion(response.getVersion());
 
         // build the response entity
         SnippetEntity entity = new SnippetEntity();
@@ -520,7 +520,7 @@ public Response updateSnippet(
         // get the updated revision
         final RevisionDTO updatedRevision = new RevisionDTO();
         updatedRevision.setClientId(revision.getClientId());
-        updatedRevision.setVersion(controllerResponse.getRevision());
+        updatedRevision.setVersion(controllerResponse.getVersion());
 
         // build the response entity
         SnippetEntity entity = new SnippetEntity();
@@ -577,7 +577,7 @@ public Response removeSnippet(
         // get the updated revision
         final RevisionDTO revision = new RevisionDTO();
         revision.setClientId(clientId.getClientId());
-        revision.setVersion(controllerResponse.getRevision());
+        revision.setVersion(controllerResponse.getVersion());
 
         // build the response entity
         SnippetEntity entity = new SnippetEntity();

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/NiFiServiceFacade.java
Patch:
@@ -65,7 +65,6 @@
 import org.apache.nifi.web.api.dto.status.NodeStatusDTO;
 import org.apache.nifi.web.api.dto.status.ProcessGroupStatusDTO;
 import org.apache.nifi.web.api.dto.status.StatusHistoryDTO;
-import org.apache.nifi.web.util.DownloadableContent;
 
 /**
  * Defines the NiFiServiceFacade interface.

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiServiceFacade.java
Patch:
@@ -16,8 +16,6 @@
  */
 package org.apache.nifi.web;
 
-import org.apache.nifi.web.OptimisticLockingManager;
-import org.apache.nifi.web.ConfigurationSnapshot;
 import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -150,7 +148,6 @@
 import org.apache.nifi.web.dao.RemoteProcessGroupDAO;
 import org.apache.nifi.web.dao.SnippetDAO;
 import org.apache.nifi.web.dao.TemplateDAO;
-import org.apache.nifi.web.util.DownloadableContent;
 import org.apache.nifi.web.util.SnippetUtils;
 
 import org.apache.commons.collections4.CollectionUtils;

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiWebContext.java
Patch:
@@ -89,7 +89,7 @@ public ControllerService getControllerService(String serviceIdentifier) {
     }
 
     @Override
-    @PreAuthorize("hasAnyRole('ROLE_DFM')")
+    @PreAuthorize("hasRole('ROLE_DFM')")
     public void saveActions(final Collection<ProcessorConfigurationAction> processorActions) {
         Objects.requireNonNull(processorActions, "Actions cannot be null.");
 

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProvenanceResource.java
Patch:
@@ -74,7 +74,7 @@
 import org.apache.nifi.web.api.request.DateTimeParameter;
 import org.apache.nifi.web.api.request.IntegerParameter;
 import org.apache.nifi.web.api.request.LongParameter;
-import org.apache.nifi.web.util.DownloadableContent;
+import org.apache.nifi.web.DownloadableContent;
 
 import org.apache.commons.lang3.StringUtils;
 import org.codehaus.enunciate.jaxrs.TypeHint;

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/controller/ControllerFacade.java
Patch:
@@ -108,7 +108,7 @@
 import org.apache.nifi.web.api.dto.status.ControllerStatusDTO;
 import org.apache.nifi.web.api.dto.status.ProcessGroupStatusDTO;
 import org.apache.nifi.web.api.dto.status.StatusHistoryDTO;
-import org.apache.nifi.web.util.DownloadableContent;
+import org.apache.nifi.web.DownloadableContent;
 import org.apache.commons.collections4.CollectionUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.nifi.admin.service.UserService;

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-user-actions/src/main/java/org/apache/nifi/action/Action.java
Patch:
@@ -30,12 +30,12 @@ public class Action implements Serializable {
     private String userDn;
     private String userName;
     private Date timestamp;
-    
+
     private String sourceId;
     private String sourceName;
     private Component sourceType;
     private ComponentDetails componentDetails;
-    
+
     private Operation operation;
     private ActionDetails actionDetails;
 

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-user-actions/src/main/java/org/apache/nifi/action/Component.java
Patch:
@@ -20,12 +20,13 @@
  * Defines possible components for a given action.
  */
 public enum Component {
+
     Controller,
     Processor,
     InputPort,
     OutputPort,
     ProcessGroup,
     RemoteProcessGroup,
-	Funnel,
+    Funnel,
     Connection;
 }

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-user-actions/src/main/java/org/apache/nifi/action/Operation.java
Patch:
@@ -20,6 +20,7 @@
  * Defines possible operations for a given action.
  */
 public enum Operation {
+
     Add,
     Remove,
     Paste,

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-user-actions/src/main/java/org/apache/nifi/action/component/details/ComponentDetails.java
Patch:
@@ -22,5 +22,5 @@
  *
  */
 public abstract class ComponentDetails implements Serializable {
-    
+
 }

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-user-actions/src/main/java/org/apache/nifi/action/component/details/ProcessorDetails.java
Patch:
@@ -30,5 +30,5 @@ public String getType() {
     public void setType(String type) {
         this.type = type;
     }
-    
+
 }

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-user-actions/src/main/java/org/apache/nifi/action/component/details/RemoteProcessGroupDetails.java
Patch:
@@ -30,5 +30,5 @@ public String getUri() {
     public void setUri(String uri) {
         this.uri = uri;
     }
-    
+
 }

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-user-actions/src/main/java/org/apache/nifi/action/details/ActionDetails.java
Patch:
@@ -22,5 +22,5 @@
  *
  */
 public abstract class ActionDetails implements Serializable {
-    
+
 }

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-user-actions/src/main/java/org/apache/nifi/action/details/ConfigureDetails.java
Patch:
@@ -48,5 +48,5 @@ public String getValue() {
     public void setValue(String value) {
         this.value = value;
     }
-    
+
 }

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-user-actions/src/main/java/org/apache/nifi/action/details/ConnectDetails.java
Patch:
@@ -86,5 +86,5 @@ public String getRelationship() {
     public void setRelationship(String relationship) {
         this.relationship = relationship;
     }
-    
+
 }

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-user-actions/src/main/java/org/apache/nifi/action/details/MoveDetails.java
Patch:
@@ -57,5 +57,5 @@ public String getPreviousGroupId() {
     public void setPreviousGroupId(String previousGroupId) {
         this.previousGroupId = previousGroupId;
     }
-    
+
 }

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-documentation/src/main/java/org/apache/nifi/documentation/html/HtmlDocumentationWriter.java
Patch:
@@ -167,7 +167,7 @@ private void writeSeeAlso(ConfigurableComponent configurableComponent, XMLStream
 
                 final String link = "../" + linkedComponent + "/index.html";
 
-                final int indexOfLastPeriod = Math.max(0,  linkedComponent.lastIndexOf("."));
+                final int indexOfLastPeriod = linkedComponent.lastIndexOf(".") + 1;
                 
                 writeLink(xmlStreamWriter, linkedComponent.substring(indexOfLastPeriod), link);
 

File: nifi/nifi-nar-bundles/nifi-kite-bundle/nifi-kite-processors/src/test/java/org/apache/nifi/processors/kite/TestGetSchema.java
Patch:
@@ -66,6 +66,9 @@ public void testSchemaFromFileSystem() throws IOException {
   @Ignore("Does not work on windows")
   public void testSchemaFromKiteURIs() throws IOException {
     String location = temp.newFolder("ns", "temp").toString();
+    if (location.endsWith("/")) {
+      location = location.substring(0, location.length() - 1);
+    }
     String datasetUri = "dataset:" + location;
     DatasetDescriptor descriptor = new DatasetDescriptor.Builder()
         .schema(SCHEMA)

File: nifi/nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/client/socket/EndpointConnectionPool.java
Patch:
@@ -314,7 +314,6 @@ public EndpointConnection getEndpointConnection(final TransferDirection directio
                         if ( protocol.isDestinationFull() ) {
                             logger.warn("{} {} indicates that port's destination is full; penalizing peer", this, peer);
                             penalize(peer, penalizationMillis);
-                            connectionQueue.offer(connection);
                             continue;
                         } else if ( protocol.isPortInvalid() ) {
                         	penalize(peer, penalizationMillis);

File: nifi/nifi-nar-bundles/nifi-kite-bundle/nifi-kite-processors/src/main/java/org/apache/nifi/processors/kite/AvroUtil.java
Patch:
@@ -20,13 +20,10 @@
 package org.apache.nifi.processors.kite;
 
 import org.apache.avro.Schema;
-import org.apache.avro.SchemaBuilder;
 import org.apache.avro.generic.GenericData;
-import org.apache.avro.generic.IndexedRecord;
 import org.apache.avro.io.DatumReader;
 import org.apache.avro.io.DatumWriter;
 
-import static org.apache.avro.generic.GenericData.StringType;
 
 class AvroUtil {
 

File: nifi/nifi-nar-bundles/nifi-kite-bundle/nifi-kite-processors/src/main/java/org/apache/nifi/processors/kite/StoreInKiteDataset.java
Patch:
@@ -50,17 +50,17 @@
 @Tags({"kite", "avro", "parquet", "hive", "hdfs", "hbase"})
 @CapabilityDescription("Stores Avro records in a Kite dataset")
 public class StoreInKiteDataset extends AbstractKiteProcessor {
-  private static Relationship SUCCESS = new Relationship.Builder()
+  private static final Relationship SUCCESS = new Relationship.Builder()
       .name("success")
       .description("FlowFile content has been successfully saved")
       .build();
 
-  private static Relationship INCOMPATIBLE = new Relationship.Builder()
+  private static final Relationship INCOMPATIBLE = new Relationship.Builder()
       .name("incompatible")
       .description("FlowFile content is not compatible with the target dataset")
       .build();
 
-  private static Relationship FAILURE = new Relationship.Builder()
+  private static final Relationship FAILURE = new Relationship.Builder()
       .name("failure")
       .description("FlowFile content could not be processed")
       .build();

File: nifi/nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestExecuteProcess.java
Patch:
@@ -59,12 +59,12 @@ public void testSplitArgs() {
     }
     
     @Test
-    public void testPing() {
+    public void testEcho() {
         System.setProperty("org.slf4j.simpleLogger.log.org.apache.nifi", "TRACE");
         
         final TestRunner runner = TestRunners.newTestRunner(ExecuteProcess.class);
-        runner.setProperty(ExecuteProcess.COMMAND, "ping");
-        runner.setProperty(ExecuteProcess.COMMAND_ARGUMENTS, "127.0.0.1");
+        runner.setProperty(ExecuteProcess.COMMAND, "echo");
+        runner.setProperty(ExecuteProcess.COMMAND_ARGUMENTS, "test-args");
         runner.setProperty(ExecuteProcess.BATCH_DURATION, "500 millis");
         
         runner.run();

File: nifi/nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestExecuteProcess.java
Patch:
@@ -59,12 +59,12 @@ public void testSplitArgs() {
     }
     
     @Test
-    public void testPing() {
+    public void testEcho() {
         System.setProperty("org.slf4j.simpleLogger.log.org.apache.nifi", "TRACE");
         
         final TestRunner runner = TestRunners.newTestRunner(ExecuteProcess.class);
-        runner.setProperty(ExecuteProcess.COMMAND, "ping");
-        runner.setProperty(ExecuteProcess.COMMAND_ARGUMENTS, "127.0.0.1");
+        runner.setProperty(ExecuteProcess.COMMAND, "echo");
+        runner.setProperty(ExecuteProcess.COMMAND_ARGUMENTS, "test-args");
         runner.setProperty(ExecuteProcess.BATCH_DURATION, "500 millis");
         
         runner.run();

File: nifi/nifi-commons/nifi-utils/src/main/java/org/apache/nifi/util/RingBuffer.java
Patch:
@@ -185,7 +185,7 @@ public T getOldestElement() {
     public T getNewestElement() {
         readLock.lock();
         try {
-            int index = (insertionPointer == 0) ? buffer.length : insertionPointer - 1;
+            int index = (insertionPointer == 0) ? buffer.length - 1 : insertionPointer - 1;
             return getElementData(index);
         } finally {
             readLock.unlock();

File: nifi/nifi-mock/src/main/java/org/apache/nifi/util/MockControllerServiceLookup.java
Patch:
@@ -47,6 +47,9 @@ public void removeControllerService(ControllerService service) {
         controllerServiceMap.remove(service.getIdentifier());
     }
 
+    protected void addControllerServices(final MockControllerServiceLookup other) {
+        this.controllerServiceMap.putAll(other.controllerServiceMap);
+    }
     
     protected ControllerServiceConfiguration getConfiguration(final String identifier) {
         return controllerServiceMap.get(identifier);

File: nifi/nifi-mock/src/main/java/org/apache/nifi/util/MockProcessContext.java
Patch:
@@ -67,11 +67,13 @@ public MockProcessContext(final ControllerService component, final MockProcessCo
             annotationData = context.getControllerServiceAnnotationData(component);
             final Map<PropertyDescriptor, String> props = context.getControllerServiceProperties(component);
             properties.putAll(props);
+
+            super.addControllerServices(context);
         } catch (IllegalArgumentException e) {
             // do nothing...the service is being loaded
         }
     }
-
+    
     @Override
     public PropertyValue getProperty(final PropertyDescriptor descriptor) {
         return getProperty(descriptor.getName());

File: nifi/nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/HandleHttpRequest.java
Patch:
@@ -397,6 +397,7 @@ public void shutdown() throws Exception {
         if ( server != null ) {
             getLogger().debug("Shutting down server");
             server.stop();
+            server.destroy();
             server.join();
             getLogger().info("Shut down {}", new Object[] {server});
         }

File: nifi/nifi-commons/nifi-utils/src/main/java/org/apache/nifi/remote/io/CompressionInputStream.java
Patch:
@@ -142,7 +142,7 @@ public int read() throws IOException {
             return -1;
         }
 
-        return buffer[bufferIndex++];
+        return buffer[bufferIndex++] & 0xFF;
     }
 
     @Override

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/RemoteProcessGroupResource.java
Patch:
@@ -372,7 +372,7 @@ public Response createRemoteProcessGroup(
         }
         
         if (!(uri.getScheme().equalsIgnoreCase("http") || uri.getScheme().equalsIgnoreCase("https"))) {
-            throw new IllegalArgumentException("The specified remote process group URL is invalid, only http and https are supported: " + requestProcessGroupDTO.getTargetUri());
+            throw new IllegalArgumentException("The specified remote process group URL is invalid because it is not http or https: " + requestProcessGroupDTO.getTargetUri());
         }
 
         // normalize the uri to the other controller
@@ -866,7 +866,7 @@ public Response updateRemoteProcessGroup(
             }
             
             if (!(uri.getScheme().equalsIgnoreCase("http") || uri.getScheme().equalsIgnoreCase("https"))) {
-                throw new IllegalArgumentException("The specified remote process group URL is invalid, only http and https are supported: " + requestRemoteProcessGroup.getTargetUri());
+                throw new IllegalArgumentException("The specified remote process group URL is invalid because it is not http or https: " + requestRemoteProcessGroup.getTargetUri());
             }
 
             // normalize the uri to the other controller

File: nifi/nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/test/java/org/apache/nifi/processors/standard/TestEvaluateJsonPath.java
Patch:
@@ -100,6 +100,7 @@ public void testExtractPath_destinationAttribute() throws Exception {
     public void testExtractPath_destinationAttributes_twoPaths() throws Exception {
         final TestRunner testRunner = TestRunners.newTestRunner(new EvaluateJsonPath());
         testRunner.setProperty(EvaluateJsonPath.DESTINATION, EvaluateJsonPath.DESTINATION_ATTRIBUTE);
+        testRunner.setProperty(EvaluateJsonPath.RETURN_TYPE, EvaluateJsonPath.RETURN_TYPE_JSON);
 
         String jsonPathIdAttrKey = "evaluatejson.id";
         String jsonPathNameAttrKey = "evaluatejson.name";

File: nifi/nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/EvaluateJsonPath.java
Patch:
@@ -72,7 +72,7 @@ public class EvaluateJsonPath extends AbstractProcessor {
             .name("Return Type")
             .description("Indicates the desired return type of the JSON Path expressions.  Selecting 'auto-detect' will set the return type to 'json' for a Destination of 'flowfile-content', and 'string' for a Destination of 'flowfile-attribute'.")
             .required(true)
-            .allowableValues(RETURN_TYPE_AUTO, RETURN_TYPE_AUTO, RETURN_TYPE_STRING)
+            .allowableValues(RETURN_TYPE_AUTO, RETURN_TYPE_JSON, RETURN_TYPE_STRING)
             .defaultValue(RETURN_TYPE_AUTO)
             .build();
 

File: nifi/nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/protocol/socket/SocketClientProtocol.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.nifi.processor.Relationship;
 import org.apache.nifi.processor.io.InputStreamCallback;
 import org.apache.nifi.remote.Peer;
+import org.apache.nifi.remote.PeerDescription;
 import org.apache.nifi.remote.PeerStatus;
 import org.apache.nifi.remote.RemoteDestination;
 import org.apache.nifi.remote.RemoteResourceInitiator;
@@ -117,7 +118,7 @@ public void handshake(final Peer peer, final String destinationId) throws IOExce
         properties.put(HandshakeProperty.GZIP, String.valueOf(useCompression));
         
         if ( destinationId != null ) {
-        	properties.put(HandshakeProperty.PORT_IDENTIFIER, destination.getIdentifier());
+        	properties.put(HandshakeProperty.PORT_IDENTIFIER, destinationId);
         }
         
         properties.put(HandshakeProperty.REQUEST_EXPIRATION_MILLIS, String.valueOf(timeoutMillis) );
@@ -229,7 +230,7 @@ public Set<PeerStatus> getPeerStatuses(final Peer peer) throws IOException {
             final int port = dis.readInt();
             final boolean secure = dis.readBoolean();
             final int flowFileCount = dis.readInt();
-            peers.add(new PeerStatus(hostname, port, secure, flowFileCount));
+            peers.add(new PeerStatus(new PeerDescription(hostname, port, secure), flowFileCount));
         }
         
         logger.debug("{} Received {} Peer Statuses from {}", this, peers.size(), peer);

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-site-to-site/src/main/java/org/apache/nifi/remote/SocketRemoteSiteListener.java
Patch:
@@ -206,7 +206,8 @@ public void run() {
                             	protocol.setRootProcessGroup(rootGroup.get());
                           	    protocol.setNodeInformant(nodeInformant);
                             	
-                            	peer = new Peer(commsSession, peerUri, "nifi://localhost:" + getPort());
+                          	    final PeerDescription description = new PeerDescription("localhost", getPort(), sslContext != null);
+                            	peer = new Peer(description, commsSession, peerUri, "nifi://localhost:" + getPort());
                             	LOG.debug("Handshaking....");
                             	protocol.handshake(peer);
                             	

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-documentation/src/main/java/org/apache/nifi/documentation/html/HtmlDocumentationWriter.java
Patch:
@@ -284,7 +284,8 @@ protected void writeProperties(final ConfigurableComponent configurableComponent
 				xmlStreamWriter.writeEndElement();
 				xmlStreamWriter.writeStartElement("tr");
 				xmlStreamWriter.writeStartElement("td");
-				xmlStreamWriter.writeAttribute("span", "4");
+				xmlStreamWriter.writeAttribute("colspan", "4");
+				xmlStreamWriter.writeAttribute("class", "description-row");
 				xmlStreamWriter.writeCharacters("Description:");
 				
 				xmlStreamWriter.writeCharacters(property.getDescription());

File: nifi/nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/cluster/AdaptedNodeInformation.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.cluster;
+package org.apache.nifi.remote.cluster;
 
 public class AdaptedNodeInformation {
 

File: nifi/nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/cluster/ClusterNodeInformation.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.cluster;
+package org.apache.nifi.remote.cluster;
 
 import java.io.InputStream;
 import java.io.OutputStream;

File: nifi/nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/cluster/NodeInformation.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.cluster;
+package org.apache.nifi.remote.cluster;
 
 public class NodeInformation {
 

File: nifi/nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/cluster/NodeInformationAdapter.java
Patch:
@@ -14,10 +14,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.cluster;
+package org.apache.nifi.remote.cluster;
 
 import javax.xml.bind.annotation.adapters.XmlAdapter;
 
+import org.apache.nifi.remote.cluster.NodeInformation;
+
 public class NodeInformationAdapter extends XmlAdapter<AdaptedNodeInformation, NodeInformation> {
 
     @Override

File: nifi/nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/exception/ProtocolException.java
Patch:
@@ -16,7 +16,9 @@
  */
 package org.apache.nifi.remote.exception;
 
-public class ProtocolException extends Exception {
+import java.io.IOException;
+
+public class ProtocolException extends IOException {
 
     private static final long serialVersionUID = 5763900324505818495L;
 

File: nifi/nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/protocol/socket/ResponseCode.java
Patch:
@@ -40,6 +40,7 @@ public enum ResponseCode {
     CONFIRM_TRANSACTION(12, "Confirm Transaction", true),   // "Explanation" of this code is the checksum
     TRANSACTION_FINISHED(13, "Transaction Finished", false),
     TRANSACTION_FINISHED_BUT_DESTINATION_FULL(14, "Transaction Finished But Destination is Full", false),
+    CANCEL_TRANSACTION(15, "Cancel Transaction", true),
     BAD_CHECKSUM(19, "Bad Checksum", false),
 
     // data availability indicators

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/remote/cluster/NodeInformant.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.cluster;
+package org.apache.nifi.remote.cluster;
 
 public interface NodeInformant {
 

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/remote/protocol/ServerProtocol.java
Patch:
@@ -18,13 +18,13 @@
 
 import java.io.IOException;
 
-import org.apache.nifi.cluster.NodeInformant;
 import org.apache.nifi.groups.ProcessGroup;
 import org.apache.nifi.processor.ProcessContext;
 import org.apache.nifi.processor.ProcessSession;
 import org.apache.nifi.remote.Peer;
 import org.apache.nifi.remote.RootGroupPort;
 import org.apache.nifi.remote.VersionedRemoteResource;
+import org.apache.nifi.remote.cluster.NodeInformant;
 import org.apache.nifi.remote.codec.FlowFileCodec;
 import org.apache.nifi.remote.exception.BadRequestException;
 import org.apache.nifi.remote.exception.HandshakeException;

File: nifi/nifi-mock/src/test/java/org/apache/nifi/util/TestStandardProcessorTestRunner.java
Patch:
@@ -20,8 +20,10 @@
 import org.apache.nifi.processor.ProcessContext;
 import org.apache.nifi.processor.ProcessSession;
 import org.apache.nifi.processor.exception.ProcessException;
+import org.junit.Ignore;
 import org.junit.Test;
 
+@Ignore("This should not be enabled until we actually fail processor unit tests for using deprecated methods, which should happen in 0.1.0")
 public class TestStandardProcessorTestRunner {
 
     @Test(expected=AssertionError.class)

File: nifi/nifi-maven-archetypes/nifi-processor-bundle-archetype/src/main/resources/archetype-resources/nifi-__artifactBaseName__-processors/src/main/java/MyProcessor.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.processors;
+package ${package};
 
 import org.apache.nifi.components.PropertyDescriptor;
 import org.apache.nifi.components.PropertyValue;

File: nifi/nifi-maven-archetypes/nifi-processor-bundle-archetype/src/main/resources/archetype-resources/nifi-__artifactBaseName__-processors/src/test/java/MyProcessorTest.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.processors;
+package ${package};
 
 import org.apache.nifi.util.TestRunner;
 import org.apache.nifi.util.TestRunners;

File: nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/service/StandardControllerServiceNode.java
Patch:
@@ -154,6 +154,7 @@ public boolean removeProperty(String name) {
         return removed;
     }
     
+    @SuppressWarnings("deprecation")
     private void onConfigured() {
         try (final NarCloseable x = NarCloseable.withNarLoader()) {
             final ConfigurationContext configContext = new StandardConfigurationContext(this, serviceProvider);

File: nifi/nifi-maven-archetypes/nifi-processor-bundle-archetype/src/main/resources/archetype-resources/nifi-__artifactBaseName__-processors/src/main/java/MyProcessor.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.processors;
+package ${package};
 
 import org.apache.nifi.components.PropertyDescriptor;
 import org.apache.nifi.components.PropertyValue;

File: nifi/nifi-maven-archetypes/nifi-processor-bundle-archetype/src/main/resources/archetype-resources/nifi-__artifactBaseName__-processors/src/test/java/MyProcessorTest.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.nifi.processors;
+package ${package};
 
 import org.apache.nifi.util.TestRunner;
 import org.apache.nifi.util.TestRunners;

File: nifi/nifi-api/src/main/java/org/apache/nifi/annotation/lifecycle/OnScheduled.java
Patch:
@@ -41,7 +41,7 @@
  * 
  * <p>
  * If using 1 argument and the component using the annotation is a Reporting Task, that argument must
- * be of type {@link org.apache.nifi.reporting.ReportingContext ReportingContext}.
+ * be of type {@link org.apache.nifi.controller.ConfigurationContext ConfigurationContext}.
  * </p>
  *
  * If any method annotated with this annotation throws any Throwable, the framework will wait a while

File: nar-bundles/hadoop-bundle/hdfs-processors/src/main/java/org/apache/nifi/processors/hadoop/GetHDFS.java
Patch:
@@ -363,7 +363,8 @@ protected void processBatchOfFiles(final List<Path> files, final ProcessContext
                     continue;
                 }
 
-                session.getProvenanceReporter().receive(flowFile, file.toString());
+                final String transitUri = (filename.startsWith("/")) ? "hdfs:/" + filename : "hdfs://" + filename;
+                session.getProvenanceReporter().receive(flowFile, transitUri);
                 session.transfer(flowFile, REL_SUCCESS);
                 getLogger().info("retrieved {} from HDFS {} in {} milliseconds at a rate of {}",
                         new Object[]{flowFile, file, millis, dataRate});

File: nar-bundles/hadoop-bundle/hdfs-processors/src/main/java/org/apache/nifi/processors/hadoop/PutHDFS.java
Patch:
@@ -47,7 +47,6 @@
 import org.apache.nifi.processor.util.StandardValidators;
 import org.apache.nifi.util.StopWatch;
 import org.apache.nifi.util.Tuple;
-
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.FSDataOutputStream;
 import org.apache.hadoop.fs.FileSystem;
@@ -322,7 +321,9 @@ public void process(InputStream in) throws IOException {
             getLogger().info("copied {} to HDFS at {} in {} milliseconds at a rate of {}",
                     new Object[]{flowFile, copyFile, millis, dataRate});
 
-            session.getProvenanceReporter().send(flowFile, copyFile.toString());
+            final String filename = copyFile.toString();
+            final String transitUri = (filename.startsWith("/")) ? "hdfs:/" + filename : "hdfs://" + filename;
+            session.getProvenanceReporter().send(flowFile, transitUri);
             session.transfer(flowFile, REL_SUCCESS);
 
         } catch (final Throwable t) {

File: nar-bundles/standard-bundle/standard-processors/src/main/java/org/apache/nifi/processors/standard/SplitXml.java
Patch:
@@ -284,7 +284,7 @@ public void startElement(final String uri, final String localName, final String
                 int attCount = atts.getLength();
                 for (int i = 0; i < attCount; i++) {
                     String attName = atts.getQName(i);
-                    String attValue = StringEscapeUtils.escapeXml(atts.getValue(i));
+                    String attValue = StringEscapeUtils.escapeXml10(atts.getValue(i));
                     sb.append(" ").append(attName).append("=").append("\"").append(attValue).append("\"");
                 }
 

File: nar-bundles/standard-bundle/standard-processors/src/main/java/org/apache/nifi/processors/standard/InvokeHTTP.java
Patch:
@@ -34,6 +34,7 @@
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.TimeUnit;
@@ -61,7 +62,6 @@
 import org.apache.nifi.processor.util.StandardValidators;
 import org.apache.nifi.ssl.SSLContextService;
 import org.apache.nifi.ssl.SSLContextService.ClientAuth;
-
 import org.apache.commons.lang3.StringUtils;
 import org.joda.time.format.DateTimeFormat;
 import org.joda.time.format.DateTimeFormatter;
@@ -314,7 +314,7 @@ private static class Transaction implements Config {
          * requires it to be in GMT (preferring the literal 'GMT' string).
          */
         private static final String rfc1123 = "EEE, dd MMM yyyy HH:mm:ss 'GMT'";
-        private static final DateTimeFormatter dateFormat = DateTimeFormat.forPattern(rfc1123).withZoneUTC();
+        private static final DateTimeFormatter dateFormat = DateTimeFormat.forPattern(rfc1123).withLocale(Locale.US).withZoneUTC();
 
         /**
          * Every request/response cycle from this client has a unique

File: commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/reduce/JoinEvaluator.java
Patch:
@@ -37,9 +37,9 @@ public JoinEvaluator(final StringEvaluator subject, final StringEvaluator delimi
     
     @Override
     public QueryResult<String> evaluate(final Map<String, String> attributes) {
-        final String subject = subjectEvaluator.evaluate(attributes).getValue();
+        String subject = subjectEvaluator.evaluate(attributes).getValue();
         if ( subject == null ) {
-            return new StringQueryResult("");
+            subject = "";
         }
         
         final String delimiter = delimiterEvaluator.evaluate(attributes).getValue();

File: commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/selection/MappingEvaluator.java
Patch:
@@ -55,7 +55,7 @@ public int getEvaluationsRemaining() {
 
     @Override
     public Evaluator<?> getSubjectEvaluator() {
-        return mappingEvaluator;
+        return null;
     }
 
 }

File: commons/nifi-expression-language/src/test/java/org/apache/nifi/attribute/expression/language/TestQuery.java
Patch:
@@ -235,8 +235,8 @@ public void testEmbeddedExpressionsAndQuotes() {
     public void testJoin() {
         final Map<String, String> attributes = new HashMap<>();
         attributes.put("a.a", "a");
-        attributes.put("b.b", "b");
-        attributes.put("c.c", "c");
+        attributes.put("a.b", "b");
+        attributes.put("a.c", "c");
         verifyEquals("${allAttributes( 'a.a', 'a.b', 'a.c' ):join(', ')}", attributes, "a, b, c");
         verifyEquals("${x:join(', ')}", attributes, "");
         verifyEquals("${a.a:join(', ')}", attributes, "a");
@@ -282,7 +282,7 @@ public void testReplaceEmpty() {
     public void testCount() {
         final Map<String, String> attributes = new HashMap<>();
         attributes.put("a", "a");
-        attributes.put("b", "");
+        attributes.put("b", "abc");
         attributes.put("c", "        \n");
         attributes.put("n1", "111");
         attributes.put("n2", "222");

File: commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/cast/DateCastEvaluator.java
Patch:
@@ -72,7 +72,8 @@ public QueryResult<Date> evaluate(final Map<String, String> attributes) {
                         final Date date = sdf.parse(value);
                         return new DateQueryResult(date);
                     } catch (final ParseException pe) {
-                        throw new AttributeExpressionLanguageException("Could not parse input as date", pe);
+                        final String details = "Format: '" + DATE_TO_STRING_FORMAT + "' Value: '" + value + "'";
+                        throw new AttributeExpressionLanguageException("Could not parse date using " + details, pe);
                     }
                 } else if (NUMBER_PATTERN.matcher(value).matches()) {
                     return new DateQueryResult(new Date(Long.valueOf(value)));

File: nar-bundles/framework-bundle/framework/web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProvenanceResource.java
Patch:
@@ -166,7 +166,7 @@ public Response getSearchOptions(@QueryParam(CLIENT_ID) @DefaultValue(StringUtil
     public Response submitReplay(
             @Context HttpServletRequest httpServletRequest,
             @FormParam(CLIENT_ID) @DefaultValue(StringUtils.EMPTY) ClientIdParameter clientId,
-            @QueryParam("clusterNodeId") String clusterNodeId,
+            @FormParam("clusterNodeId") String clusterNodeId,
             @FormParam("eventId") LongParameter eventId) {
 
         // ensure the event id is specified
@@ -190,7 +190,7 @@ public Response submitReplay(
                 targetNodes.add(targetNode.getNodeId());
 
                 // replicate the request to the specific node
-                return clusterManager.applyRequest(HttpMethod.GET, getAbsolutePath(), getRequestParameters(true), getHeaders(), targetNodes).getResponse();
+                return clusterManager.applyRequest(HttpMethod.POST, getAbsolutePath(), getRequestParameters(true), getHeaders(), targetNodes).getResponse();
             }
         }
 

File: nar-bundles/framework-bundle/framework/core-api/src/main/java/org/apache/nifi/groups/RemoteProcessGroup.java
Patch:
@@ -47,6 +47,8 @@ public interface RemoteProcessGroup {
 
     void setComments(String comments);
 
+    void shutdown();
+    
     /**
      * Returns the name of this RemoteProcessGroup. The value returned will
      * never be null. If unable to communicate with the remote instance, the URI

File: nar-bundles/framework-bundle/framework/core/src/main/java/org/apache/nifi/controller/StandardProcessorNode.java
Patch:
@@ -1024,7 +1024,7 @@ public Collection<ValidationResult> getValidationErrors() {
             for (final Relationship relationship : getUndefinedRelationships()) {
                 if (!isAutoTerminated(relationship)) {
                     final ValidationResult error = new ValidationResult.Builder()
-                            .explanation(relationship.getName() + " is not defined")
+                            .explanation("Relationship '" + relationship.getName() + "' is not connected to any component and is not auto-terminated")
                             .subject("Relationship " + relationship.getName())
                             .valid(false)
                             .build();

File: nar-bundles/framework-bundle/framework/web/nifi-jetty/src/main/java/org/apache/nifi/web/server/JettyServer.java
Patch:
@@ -273,7 +273,7 @@ private Map<File, File> findWars(final Set<File> narWorkingDirectories) {
 
         // consider each nar working directory
         for (final File narWorkingDirectory : narWorkingDirectories) {
-            final File narDependencies = new File(narWorkingDirectory, "META-INF/dependencies");
+            final File narDependencies = new File(narWorkingDirectory, "META-INF/bundled-dependencies");
             if (narDependencies.isDirectory()) {
                 // list the wars from this nar
                 final File[] narDependencyDirs = narDependencies.listFiles(WAR_FILTER);

File: nar-bundles/framework-bundle/framework/core/src/main/java/org/apache/nifi/controller/FileSystemSwapManager.java
Patch:
@@ -549,7 +549,7 @@ public void run() {
 
                         swapQueue.getQueue().add(swapFile);
                     } else {
-                        swapFile.delete();
+                        swapTempFile.delete();
                     }
                 }
             }

File: nifi-api/src/main/java/org/apache/nifi/components/PropertyDescriptor.java
Patch:
@@ -425,7 +425,7 @@ public PropertyDescriptor build() {
                 throw new IllegalStateException("Must specify a name");
             }
             if (!isValueAllowed(defaultValue)) {
-                throw new IllegalStateException("Default value is not in the set of allowable values");
+                throw new IllegalStateException("Default value ["+ defaultValue +"] is not in the set of allowable values");
             }
 
             return new PropertyDescriptor(this);

File: nifi-api/src/main/java/org/apache/nifi/components/PropertyDescriptor.java
Patch:
@@ -425,7 +425,7 @@ public PropertyDescriptor build() {
                 throw new IllegalStateException("Must specify a name");
             }
             if (!isValueAllowed(defaultValue)) {
-                throw new IllegalStateException("Default value is not in the set of allowable values");
+                throw new IllegalStateException("Default value '" + defaultValue + "' is not in the set of allowable values");
             }
 
             return new PropertyDescriptor(this);

File: commons/flowfile-packager/src/main/java/org/apache/nifi/util/FlowFilePackagerV1.java
Patch:
@@ -58,8 +58,8 @@ private void writeAttributesEntry(final Map<String, String> attributes, final Ta
         sb.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE properties\n  SYSTEM \"http://java.sun.com/dtd/properties.dtd\">\n");
         sb.append("<properties>");
         for (final Map.Entry<String, String> entry : attributes.entrySet()) {
-            final String escapedKey = StringEscapeUtils.escapeXml(entry.getKey());
-            final String escapedValue = StringEscapeUtils.escapeXml(entry.getValue());
+            final String escapedKey = StringEscapeUtils.escapeXml11(entry.getKey());
+            final String escapedValue = StringEscapeUtils.escapeXml11(entry.getValue());
             sb.append("\n  <entry key=\"").append(escapedKey).append("\">").append(escapedValue).append("</entry>");
         }
         sb.append("</properties>");

File: nar-bundles/framework-bundle/framework/file-authorization-provider/src/main/java/org/apache/nifi/authorization/FileAuthorizationProvider.java
Patch:
@@ -42,7 +42,7 @@
 import org.apache.nifi.user.generated.User;
 import org.apache.nifi.user.generated.Users;
 import org.apache.nifi.util.NiFiProperties;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.xml.sax.SAXException;

File: nar-bundles/standard-bundle/standard-processors/src/main/java/org/apache/nifi/processors/standard/DetectDuplicate.java
Patch:
@@ -46,7 +46,7 @@
 import org.apache.nifi.processor.exception.ProcessException;
 import org.apache.nifi.processor.util.StandardValidators;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 @EventDriven
 @SupportsBatching

File: nar-bundles/standard-bundle/standard-processors/src/main/java/org/apache/nifi/processors/standard/DistributeLoad.java
Patch:
@@ -51,7 +51,7 @@
 import org.apache.nifi.processor.annotation.TriggerWhenAnyDestinationAvailable;
 import org.apache.nifi.processor.util.StandardValidators;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 @EventDriven
 @SideEffectFree

File: nar-bundles/standard-bundle/standard-processors/src/main/java/org/apache/nifi/processors/standard/EvaluateRegularExpression.java
Patch:
@@ -47,7 +47,7 @@
 import org.apache.nifi.processor.io.InputStreamCallback;
 import org.apache.nifi.processor.util.StandardValidators;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 @EventDriven
 @SideEffectFree

File: nar-bundles/standard-bundle/standard-processors/src/main/java/org/apache/nifi/processors/standard/ExecuteStreamCommand.java
Patch:
@@ -56,7 +56,7 @@
 import org.apache.nifi.processor.util.StandardValidators;
 
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 /**
  * <p>

File: nar-bundles/standard-bundle/standard-processors/src/main/java/org/apache/nifi/processors/standard/HashAttribute.java
Patch:
@@ -45,7 +45,7 @@
 import org.apache.nifi.processor.util.StandardValidators;
 
 import org.apache.commons.codec.digest.DigestUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 /**
  * <p>

File: nar-bundles/standard-bundle/standard-processors/src/main/java/org/apache/nifi/processors/standard/InvokeHTTP.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.nifi.processors.standard;
 
-import static org.apache.commons.lang.StringUtils.*;
+import static org.apache.commons.lang3.StringUtils.*;
 
 import java.io.BufferedInputStream;
 import java.io.BufferedOutputStream;
@@ -62,7 +62,7 @@
 import org.apache.nifi.ssl.SSLContextService;
 import org.apache.nifi.ssl.SSLContextService.ClientAuth;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.joda.time.format.DateTimeFormat;
 import org.joda.time.format.DateTimeFormatter;
 

File: nar-bundles/standard-bundle/standard-processors/src/main/java/org/apache/nifi/processors/standard/ListenUDP.java
Patch:
@@ -69,7 +69,7 @@
 import org.apache.nifi.processors.standard.util.UDPStreamConsumer;
 import org.apache.nifi.util.Tuple;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 /**
  * <p>

File: nar-bundles/standard-bundle/standard-processors/src/main/java/org/apache/nifi/processors/standard/LogAttribute.java
Patch:
@@ -44,7 +44,7 @@
 import org.apache.nifi.processor.util.StandardValidators;
 
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 @EventDriven
 @SideEffectFree

File: nar-bundles/standard-bundle/standard-processors/src/main/java/org/apache/nifi/processors/standard/ReplaceTextWithMapping.java
Patch:
@@ -62,7 +62,7 @@
 import org.apache.nifi.processor.util.StandardValidators;
 import org.apache.nifi.util.StopWatch;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 @EventDriven
 @SideEffectFree

File: nar-bundles/standard-bundle/standard-processors/src/main/java/org/apache/nifi/processors/standard/SplitXml.java
Patch:
@@ -49,7 +49,7 @@
 import org.apache.nifi.processors.standard.util.XmlElementNotifier;
 import org.apache.nifi.util.BooleanHolder;
 
-import org.apache.commons.lang.StringEscapeUtils;
+import org.apache.commons.lang3.StringEscapeUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.xml.sax.Attributes;

File: nar-bundles/standard-bundle/standard-processors/src/main/java/org/apache/nifi/processors/standard/servlets/ListenHTTPServlet.java
Patch:
@@ -58,7 +58,7 @@
 import org.apache.nifi.util.FlowFileUnpackagerV3;
 
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 @Path(ListenHTTP.URI)
 public class ListenHTTPServlet extends HttpServlet {

File: nar-bundles/standard-bundle/standard-processors/src/main/java/org/apache/nifi/processors/standard/util/UDPStreamConsumer.java
Patch:
@@ -35,9 +35,9 @@
 import org.apache.nifi.processor.ProcessSession;
 import org.apache.nifi.processor.io.OutputStreamCallback;
 
-import org.apache.commons.lang.builder.EqualsBuilder;
-import org.apache.commons.lang.builder.HashCodeBuilder;
-import org.apache.commons.lang.builder.ToStringBuilder;
+import org.apache.commons.lang3.builder.EqualsBuilder;
+import org.apache.commons.lang3.builder.HashCodeBuilder;
+import org.apache.commons.lang3.builder.ToStringBuilder;
 
 /**
  *

File: nar-bundles/standard-bundle/standard-processors/src/test/java/org/apache/nifi/processors/standard/TestDetectDuplicate.java
Patch:
@@ -37,7 +37,7 @@
 import org.apache.nifi.util.TestRunner;
 import org.apache.nifi.util.TestRunners;
 
-import org.apache.commons.lang.SerializationException;
+import org.apache.commons.lang3.SerializationException;
 import org.junit.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: nar-bundles/update-attribute-bundle/ui/src/main/java/org/apache/nifi/update/attributes/api/RuleResource.java
Patch:
@@ -64,7 +64,7 @@
 import org.apache.nifi.web.ProcessorInfo;
 import org.apache.nifi.web.Revision;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import com.sun.jersey.api.NotFoundException;
 import org.apache.nifi.update.attributes.FlowFilePolicy;

File: nifi-mock/src/main/java/org/apache/nifi/util/MockProcessSession.java
Patch:
@@ -40,7 +40,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.regex.Pattern;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import org.apache.nifi.flowfile.FlowFile;
 import org.apache.nifi.flowfile.attributes.CoreAttributes;
 import org.apache.nifi.processor.FlowFileFilter;

File: nar-bundles/volatile-provenance-repository-bundle/volatile-provenance-repository/src/main/java/org/apache/nifi/provenance/VolatileProvenanceRepository.java
Patch:
@@ -169,6 +169,8 @@ public boolean select(final ProvenanceEventRecord event) {
 
     @Override
     public void close() throws IOException {
+        queryExecService.shutdownNow();
+        scheduledExecService.shutdown();
     }
 
     @Override

File: nar-bundles/framework-bundle/framework/core/src/main/java/org/apache/nifi/controller/repository/VolatileContentRepository.java
Patch:
@@ -92,7 +92,7 @@ public class VolatileContentRepository implements ContentRepository {
     public static final String MAX_SIZE_PROPERTY = "nifi.volatile.content.repository.max.size";
     public static final String BLOCK_SIZE_PROPERTY = "nifi.volatile.content.repository.block.size";
 
-    private final ScheduledExecutorService executor = new FlowEngine(3, "VolatileContentRepository Workers");
+    private final ScheduledExecutorService executor = new FlowEngine(3, "VolatileContentRepository Workers", true);
     private final ConcurrentMap<ContentClaim, ContentBlock> claimMap = new ConcurrentHashMap<>(256);
     private final AtomicLong repoSize = new AtomicLong(0L);
 

File: nar-bundles/framework-bundle/framework/runtime/src/main/java/org/apache/nifi/NiFi.java
Patch:
@@ -36,7 +36,6 @@
 import org.apache.nifi.nar.NarUnpacker;
 import org.apache.nifi.util.FileUtils;
 import org.apache.nifi.util.NiFiProperties;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.slf4j.bridge.SLF4JBridgeHandler;
@@ -61,7 +60,6 @@ public void uncaughtException(final Thread t, final Throwable e) {
 
         // register the shutdown hook
         Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {
-
             @Override
             public void run() {
                 // shutdown the jetty server

File: nar-bundles/framework-bundle/framework/core/src/main/java/org/apache/nifi/controller/repository/StandardProcessSession.java
Patch:
@@ -579,7 +579,8 @@ private void updateProvenanceRepo(final Checkpoint checkpoint) {
                 continue;
             }
             
-            if ( contentChanged ) {
+            final boolean newFlowFile = repoRecord.getOriginal() == null;
+            if ( contentChanged && !newFlowFile ) {
                 recordsToSubmit.add(provenanceReporter.build(curFlowFile, ProvenanceEventType.CONTENT_MODIFIED).build());
                 addEventType(eventTypesPerFlowFileId, flowFileId, ProvenanceEventType.CONTENT_MODIFIED);
                 eventAdded = true;

File: nar-bundles/framework-bundle/framework/core/src/main/java/org/apache/nifi/controller/repository/FileSystemRepository.java
Patch:
@@ -92,7 +92,7 @@ public class FileSystemRepository implements ContentRepository {
     private final List<String> containerNames;
     private final AtomicLong index;
 
-    private final ScheduledExecutorService executor = new FlowEngine(4, "FileSystemRepository Workers");
+    private final ScheduledExecutorService executor = new FlowEngine(4, "FileSystemRepository Workers", true);
     private final ConcurrentMap<String, BlockingQueue<ContentClaim>> reclaimable = new ConcurrentHashMap<>();
     private final Map<String, ContainerState> containerStateMap = new HashMap<>();
 
@@ -209,7 +209,7 @@ public FileSystemRepository() throws IOException {
             }
         }
 
-        containerCleanupExecutor = new FlowEngine(containers.size(), "Cleanup FileSystemRepository Container");
+        containerCleanupExecutor = new FlowEngine(containers.size(), "Cleanup FileSystemRepository Container", true);
         for (final Map.Entry<String, Path> containerEntry : containers.entrySet()) {
             final String containerName = containerEntry.getKey();
             final Path containerPath = containerEntry.getValue();

File: nar-bundles/framework-bundle/framework/core/src/main/java/org/apache/nifi/controller/scheduling/StandardProcessScheduler.java
Patch:
@@ -138,6 +138,9 @@ public void shutdown() {
                 LOG.error("", t);
             }
         }
+        
+        frameworkTaskExecutor.shutdown();
+        componentLifeCycleThreadPool.shutdown();
     }
 
     public void schedule(final ReportingTaskNode taskNode) {

