File: impl/maven-logging/src/main/java/org/apache/maven/slf4j/MavenLoggerFactory.java
Patch:
@@ -21,13 +21,14 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 
+import org.apache.maven.logging.api.LogLevelRecorder;
 import org.slf4j.ILoggerFactory;
 import org.slf4j.Logger;
 
 /**
  * LogFactory for Maven which can create a simple logger or one which, if set, fails the build on a severity threshold.
  */
-public class MavenLoggerFactory implements org.apache.maven.logging.api.LogLevelRecorder, ILoggerFactory {
+public class MavenLoggerFactory implements LogLevelRecorder, ILoggerFactory {
     final DefaultLogLevelRecorder logLevelRecorder = new DefaultLogLevelRecorder();
     final ConcurrentMap<String, Logger> loggerMap = new ConcurrentHashMap<>();
 

File: impl/maven-logging/src/main/java/org/apache/maven/slf4j/MavenSimpleLogger.java
Patch:
@@ -41,6 +41,8 @@ public class MavenSimpleLogger extends MavenBaseLogger {
 
     static Consumer<String> logSink;
 
+    public static final String DEFAULT_LOG_LEVEL_KEY = "org.slf4j.simpleLogger.defaultLogLevel";
+
     public static void setLogSink(Consumer<String> logSink) {
         MavenSimpleLogger.logSink = logSink;
     }

File: compat/maven-compat/src/test/java/org/apache/maven/project/AbstractMavenProjectTestCase.java
Patch:
@@ -135,12 +135,12 @@ protected MavenProject getProjectWithDependencies(File pom) throws Exception {
         } catch (Exception e) {
             Throwable cause = e.getCause();
             if (cause instanceof ModelBuildingException) {
-                String message = "In: " + pom + "\n\n";
+                StringBuilder message = new StringBuilder("In: " + pom + "\n\n");
                 for (ModelProblem problem : ((ModelBuildingException) cause).getProblems()) {
-                    message += problem + "\n";
+                    message.append(problem).append("\n");
                 }
                 System.out.println(message);
-                fail(message);
+                fail(message.toString());
             }
 
             throw e;

File: impl/maven-executor/src/test/java/org/apache/maven/cling/executor/impl/HelperImplTest.java
Patch:
@@ -42,7 +42,7 @@ public class HelperImplTest {
     private static final ForkedMavenExecutor FORKED_MAVEN_EXECUTOR = new ForkedMavenExecutor();
 
     @TempDir
-    private Path userHome;
+    private static Path userHome;
 
     @ParameterizedTest
     @EnumSource(ExecutorHelper.Mode.class)

File: impl/maven-core/src/main/java/org/apache/maven/ReactorReader.java
Patch:
@@ -70,7 +70,7 @@ class ReactorReader implements MavenWorkspaceReader {
     public static final String PROJECT_LOCAL_REPO = "project-local-repo";
 
     private static final Collection<String> COMPILE_PHASE_TYPES = new HashSet<>(
-            Arrays.asList("jar", "ejb-client", "war", "rar", "ejb3", "par", "sar", "wsr", "har", "app-client"));
+            Arrays.asList("jar", "ejb-client", "war", "rar", "ejb", "par", "sar", "wsr", "har", "app-client"));
 
     private static final Logger LOGGER = LoggerFactory.getLogger(ReactorReader.class);
 

File: impl/maven-cli/src/test/java/org/apache/maven/cling/invoker/mvn/MavenInvokerTestSupport.java
Patch:
@@ -80,7 +80,7 @@ public static void main(String... args) {
             }
             """;
 
-    protected void invoke(Path cwd, Collection<String> goals) throws Exception {
+    protected void invoke(Path cwd, Path userHome, Collection<String> goals) throws Exception {
         // works only in recent Maven4
         Assumptions.assumeTrue(
                 Files.isRegularFile(Paths.get(System.getProperty("maven.home"))
@@ -104,6 +104,7 @@ protected void invoke(Path cwd, Collection<String> goals) throws Exception {
                                 new ProtoLogger(),
                                 new JLineMessageBuilderFactory())
                         .cwd(cwd)
+                        .userHome(userHome)
                         .build()));
                 String log = Files.readString(logFile);
                 System.out.println(log);

File: its/core-it-support/maven-it-helper/src/main/java/org/apache/maven/it/Verifier.java
Patch:
@@ -140,6 +140,7 @@ public Verifier(String basedir, List<String> defaultCliArguments) throws Verific
             this.executorHelper = new HelperImpl(
                     VERIFIER_FORK_MODE,
                     Paths.get(System.getProperty("maven.home")),
+                    this.userHomeDirectory,
                     EMBEDDED_MAVEN_EXECUTOR,
                     FORKED_MAVEN_EXECUTOR);
             this.defaultCliArguments =

File: impl/maven-impl/src/test/java/org/apache/maven/internal/impl/model/DefaultModelInterpolatorTest.java
Patch:
@@ -53,6 +53,7 @@
 import org.apache.maven.internal.impl.model.profile.SimpleProblemCollector;
 import org.apache.maven.internal.impl.standalone.ApiRunner;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -549,6 +550,7 @@ public void testRecursiveExpressionCycleNPE() throws Exception {
         assertTrue(collector.getErrors().get(0).contains("recursive variable reference"));
     }
 
+    @Disabled("per def cannot be recursive: ${basedir} is immediately going for project.basedir")
     @Test
     public void testRecursiveExpressionCycleBaseDir() throws Exception {
         Map<String, String> props = new HashMap<>();

File: its/core-it-suite/src/test/java/org/apache/maven/it/TestSuiteOrdering.java
Patch:
@@ -100,6 +100,7 @@ public TestSuiteOrdering() {
          * the tests are to finishing. Newer tests are also more likely to fail, so this is
          * a fail fast technique as well.
          */
+        suite.addTestSuite(MavenITmng8469InterpolationPrecendenceTest.class);
         suite.addTestSuite(MavenITmng8461SpySettingsEventTest.class);
         suite.addTestSuite(MavenITmng8414ConsumerPomWithNewFeaturesTest.class);
         suite.addTestSuite(MavenITmng8245BeforePhaseCliTest.class);

File: its/core-it-suite/src/test/java/org/apache/maven/it/TestSuiteOrdering.java
Patch:
@@ -100,6 +100,7 @@ public TestSuiteOrdering() {
          * the tests are to finishing. Newer tests are also more likely to fail, so this is
          * a fail fast technique as well.
          */
+        suite.addTestSuite(MavenITmng8461SpySettingsEventTest.class);
         suite.addTestSuite(MavenITmng8414ConsumerPomWithNewFeaturesTest.class);
         suite.addTestSuite(MavenITmng8245BeforePhaseCliTest.class);
         suite.addTestSuite(MavenITmng8244PhaseAllTest.class);

File: impl/maven-impl/src/main/java/org/apache/maven/internal/impl/model/DefaultModelInterpolator.java
Patch:
@@ -211,7 +211,7 @@ String projectProperty(Model model, Path projectDir, String subExpr, boolean pre
                 return projectDir.toAbsolutePath().toString();
             } else if (subExpr.startsWith("basedir.")) {
                 try {
-                    Object value = ReflectionValueExtractor.evaluate(subExpr, projectDir.toAbsolutePath(), false);
+                    Object value = ReflectionValueExtractor.evaluate(subExpr, projectDir.toAbsolutePath(), true);
                     if (value != null) {
                         return value.toString();
                     }

File: impl/maven-impl/src/test/java/org/apache/maven/internal/impl/model/DefaultModelValidatorTest.java
Patch:
@@ -805,7 +805,7 @@ void repositoryWithExpression() throws Exception {
         SimpleProblemCollector result = validateFile("raw-model/repository-with-expression.xml");
         assertViolations(result, 0, 1, 0);
         assertEquals(
-                "'repositories.repository.[repo].url' contains an expression but should be a constant.",
+                "'repositories.repository.[repo].url' contains an unsupported expression (only expressions starting with 'project.basedir' or 'project.rootDirectory' are supported).",
                 result.getErrors().get(0));
     }
 

File: impl/maven-core/src/main/java/org/apache/maven/internal/impl/DefaultLifecycleRegistry.java
Patch:
@@ -349,7 +349,7 @@ static class SiteLifecycleProvider extends BaseLifecycleProvider {
 
     static class CleanLifecycle implements Lifecycle {
 
-        private static final String MAVEN_CLEAN_PLUGIN_VERSION = "3.2.0";
+        private static final String MAVEN_CLEAN_PLUGIN_VERSION = "3.4.0";
 
         @Override
         public String id() {
@@ -455,7 +455,7 @@ public Collection<Alias> aliases() {
 
     static class SiteLifecycle implements Lifecycle {
 
-        private static final String MAVEN_SITE_PLUGIN_VERSION = "3.12.1";
+        private static final String MAVEN_SITE_PLUGIN_VERSION = "3.21.0";
         private static final String MAVEN_SITE_PLUGIN =
                 MAVEN_PLUGINS + "maven-site-plugin:" + MAVEN_SITE_PLUGIN_VERSION + ":";
         private static final String PHASE_SITE = "site";

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/ModelBuilderResult.java
Patch:
@@ -91,12 +91,12 @@ public interface ModelBuilderResult {
     List<Profile> getActiveExternalProfiles();
 
     /**
-     * Gets the problems that were encountered during the project building.
+     * Gets the problem collector that collected problems encountered during the project building.
      *
-     * @return the problems that were encountered during the project building, can be empty but never {@code null}
+     * @return the problem collector that collected problems encountered during the project building
      */
     @Nonnull
-    List<ModelProblem> getProblems();
+    ProblemCollector<ModelProblem> getProblemCollector();
 
     /**
      * Gets the children of this result.

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/SettingsBuilder.java
Patch:
@@ -19,7 +19,6 @@
 package org.apache.maven.api.services;
 
 import java.nio.file.Path;
-import java.util.List;
 
 import org.apache.maven.api.Service;
 import org.apache.maven.api.Session;
@@ -108,7 +107,7 @@ default SettingsBuilderResult build(
      * @return The list of problems that were encountered, must not be {@code null}.
      */
     @Nonnull
-    default List<BuilderProblem> validate(@Nonnull Settings settings) {
+    default ProblemCollector<BuilderProblem> validate(@Nonnull Settings settings) {
         return validate(settings, false);
     }
 
@@ -120,7 +119,7 @@ default List<BuilderProblem> validate(@Nonnull Settings settings) {
      * @return The list of problems that were encountered, must not be {@code null}.
      */
     @Nonnull
-    List<BuilderProblem> validate(@Nonnull Settings settings, boolean isProjectSettings);
+    ProblemCollector<BuilderProblem> validate(@Nonnull Settings settings, boolean isProjectSettings);
 
     /**
      * Convert a model profile to a settings profile.

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/SettingsBuilderException.java
Patch:
@@ -19,7 +19,6 @@
 package org.apache.maven.api.services;
 
 import java.io.Serial;
-import java.util.List;
 
 import org.apache.maven.api.annotations.Experimental;
 
@@ -42,7 +41,7 @@ public SettingsBuilderException(String message, Exception e) {
         super(message, e);
     }
 
-    public SettingsBuilderException(String message, List<BuilderProblem> problems) {
+    public SettingsBuilderException(String message, ProblemCollector<BuilderProblem> problems) {
         super(message, problems);
     }
 }

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/SettingsBuilderResult.java
Patch:
@@ -18,8 +18,6 @@
  */
 package org.apache.maven.api.services;
 
-import java.util.List;
-
 import org.apache.maven.api.annotations.Experimental;
 import org.apache.maven.api.annotations.Nonnull;
 import org.apache.maven.api.settings.Settings;
@@ -47,5 +45,5 @@ public interface SettingsBuilderResult {
      * @return the problems that were encountered during the settings building, can be empty but never {@code null}
      */
     @Nonnull
-    List<BuilderProblem> getProblems();
+    ProblemCollector<BuilderProblem> getProblems();
 }

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/ToolchainsBuilderException.java
Patch:
@@ -19,7 +19,6 @@
 package org.apache.maven.api.services;
 
 import java.io.Serial;
-import java.util.List;
 
 import org.apache.maven.api.annotations.Experimental;
 
@@ -42,7 +41,7 @@ public ToolchainsBuilderException(String message, Exception e) {
         super(message, e);
     }
 
-    public ToolchainsBuilderException(String message, List<BuilderProblem> problems) {
+    public ToolchainsBuilderException(String message, ProblemCollector<BuilderProblem> problems) {
         super(message, problems);
     }
 }

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/ToolchainsBuilderResult.java
Patch:
@@ -18,8 +18,6 @@
  */
 package org.apache.maven.api.services;
 
-import java.util.List;
-
 import org.apache.maven.api.annotations.Experimental;
 import org.apache.maven.api.annotations.Nonnull;
 import org.apache.maven.api.toolchain.PersistedToolchains;
@@ -46,5 +44,5 @@ public interface ToolchainsBuilderResult {
      * @return the problems that were encountered during the settings building, can be empty but never {@code null}
      */
     @Nonnull
-    List<BuilderProblem> getProblems();
+    ProblemCollector<BuilderProblem> getProblems();
 }

File: compat/maven-settings-builder/src/main/java/org/apache/maven/settings/validation/DefaultSettingsValidator.java
Patch:
@@ -22,10 +22,10 @@
 import javax.inject.Named;
 import javax.inject.Singleton;
 
-import java.util.List;
 import java.util.regex.Pattern;
 
 import org.apache.maven.api.services.BuilderProblem;
+import org.apache.maven.api.services.ProblemCollector;
 import org.apache.maven.api.services.SettingsBuilder;
 import org.apache.maven.settings.Settings;
 import org.apache.maven.settings.building.SettingsProblem.Severity;
@@ -56,8 +56,8 @@ public void validate(Settings settings, SettingsProblemCollector problems) {
 
     @Override
     public void validate(Settings settings, boolean isProjectSettings, SettingsProblemCollector problems) {
-        List<BuilderProblem> list = settingsBuilder.validate(settings.getDelegate(), isProjectSettings);
-        for (BuilderProblem problem : list) {
+        ProblemCollector<BuilderProblem> list = settingsBuilder.validate(settings.getDelegate(), isProjectSettings);
+        for (BuilderProblem problem : list.problems().toList()) {
             addViolation(problems, Severity.valueOf(problem.getSeverity().name()), problem.getMessage());
         }
     }

File: impl/maven-impl/src/test/java/org/apache/maven/internal/impl/model/ComplexActivationTest.java
Patch:
@@ -76,7 +76,8 @@ public void testConditionExistingAndMissingInActivation() throws Exception {
                 .build();
         ModelBuilderResult result = builder.newSession().build(request);
         assertNotNull(result);
-        assertTrue(result.getProblems().stream()
+        assertTrue(result.getProblemCollector()
+                .problems()
                 .anyMatch(p -> p.getSeverity() == BuilderProblem.Severity.WARNING
                         && p.getMessage().contains("The 'missing' assertion will be ignored.")));
     }

File: api/maven-api-cli/src/main/java/org/apache/maven/api/cli/Tools.java
Patch:
@@ -36,4 +36,7 @@ private Tools() {}
 
     public static final String MVNENC_CMD = "mvnenc";
     public static final String MVNENC_NAME = "Maven Password Encrypting Tool";
+
+    public static final String MVNSHELL_CMD = "mvnsh";
+    public static final String MVNSHELL_NAME = "Maven Shell Tool";
 }

File: impl/maven-cli/src/main/java/org/apache/maven/cling/MavenCling.java
Patch:
@@ -26,8 +26,8 @@
 import org.apache.maven.api.cli.ParserRequest;
 import org.apache.maven.cling.invoker.ProtoLogger;
 import org.apache.maven.cling.invoker.ProtoLookup;
+import org.apache.maven.cling.invoker.mvn.MavenInvoker;
 import org.apache.maven.cling.invoker.mvn.MavenParser;
-import org.apache.maven.cling.invoker.mvn.local.LocalMavenInvoker;
 import org.apache.maven.jline.JLineMessageBuilderFactory;
 import org.codehaus.plexus.classworlds.ClassWorld;
 
@@ -61,7 +61,7 @@ public MavenCling(ClassWorld classWorld) {
 
     @Override
     protected Invoker createInvoker() {
-        return new LocalMavenInvoker(
+        return new MavenInvoker(
                 ProtoLookup.builder().addMapping(ClassWorld.class, classWorld).build());
     }
 

File: api/maven-api-core/src/main/java/org/apache/maven/api/Constants.java
Patch:
@@ -440,7 +440,7 @@ public final class Constants {
     /**
      * User property used to store the build timestamp.
      *
-     * @since 4.1.0
+     * @since 4.0.0
      */
     @Config(type = "java.time.Instant")
     public static final String MAVEN_START_INSTANT = "maven.startInstant";

File: impl/maven-core/src/main/java/org/apache/maven/lifecycle/internal/concurrent/BuildPlanExecutor.java
Patch:
@@ -927,7 +927,7 @@ protected void stop() {
         }
 
         protected Duration wallTime() {
-            return Duration.between(start, end);
+            return start != null && end != null ? Duration.between(start, end) : Duration.ZERO;
         }
 
         protected Duration execTime() {

File: impl/maven-cli/src/main/java/org/apache/maven/cling/invoker/PlexusContainerCapsuleFactory.java
Patch:
@@ -75,7 +75,7 @@ public ContainerCapsule createContainerCapsule(LookupInvoker<C> invoker, C conte
             return new PlexusContainerCapsule(
                     context, Thread.currentThread().getContextClassLoader(), container(invoker, context));
         } catch (Exception e) {
-            throw new InvokerException("Failed to create plexus container capsule", e);
+            throw new InvokerException("Failed to create Plexus DI Container", e);
         }
     }
 
@@ -279,7 +279,7 @@ protected void configure() {
             container.getLoggerManager().setThresholds(toPlexusLoggingLevel(context.loggerLevel));
             Thread.currentThread().setContextClassLoader(container.getContainerRealm());
 
-            invoker.settings(context, container.lookup(SettingsBuilder.class));
+            invoker.settings(context, false, container.lookup(SettingsBuilder.class));
 
             MavenExecutionRequest mer = new DefaultMavenExecutionRequest();
             invoker.populateRequest(context, new DefaultLookup(container), mer);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0553SettingsAuthzEncryptionTest.java
Patch:
@@ -122,7 +122,7 @@ public void testitBasic() throws Exception {
         verifier.deleteArtifacts("org.apache.maven.its.mng0553");
         verifier.verifyArtifactNotPresent("org.apache.maven.its.mng0553", "a", "0.1-SNAPSHOT", "jar");
         verifier.filterFile("settings-template.xml", "settings.xml", filterProps);
-        ItUtils.setUserHome(verifier, new File(testDir, "userhome"));
+        verifier.setUserHomeDirectory(new File(testDir, "userhome").toPath());
         verifier.addCliArgument("--settings");
         verifier.addCliArgument("settings.xml");
         verifier.addCliArgument("validate");
@@ -185,7 +185,7 @@ public void testitEncryption() throws Exception {
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);
-        ItUtils.setUserHome(verifier, new File(testDir, "userhome"));
+        verifier.setUserHomeDirectory(new File(testDir, "userhome").toPath());
         verifier.addCliArgument("--encrypt-master-password");
         verifier.addCliArgument("test");
         verifier.setLogFileName("log-emp.txt");
@@ -198,7 +198,7 @@ public void testitEncryption() throws Exception {
 
         verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);
-        ItUtils.setUserHome(verifier, new File(testDir, "userhome"));
+        verifier.setUserHomeDirectory(new File(testDir, "userhome").toPath());
         verifier.addCliArgument("--encrypt-password");
         verifier.addCliArgument("testpass");
         verifier.setLogFileName("log-ep.txt");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3955EffectiveSettingsTest.java
Patch:
@@ -48,7 +48,9 @@ public void testitMNG3955() throws Exception {
         File testDir = extractResources("/mng-3955");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
+        String localRepo = verifier.getLocalRepository();
         verifier.setAutoclean(false);
+        verifier.addCliArgument("-Dmaven.repo.local.tail=" + localRepo);
         verifier.addCliArgument("--settings");
         verifier.addCliArgument("settings.xml");
         verifier.addCliArgument("--offline");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5669ReadPomsOnce.java
Patch:
@@ -50,7 +50,7 @@ public void testWithoutBuildConsumer() throws Exception {
         Verifier verifier = newVerifier(testDir.getAbsolutePath(), false);
         Map<String, String> filterProperties = Collections.singletonMap(
                 "${javaAgentJar}",
-                verifier.getArtifactPath("org.apache.maven.its", "core-it-javaagent", "2.1-SNAPSHOT", "jar"));
+                verifier.getSupportArtifactPath("org.apache.maven.its", "core-it-javaagent", "2.1-SNAPSHOT", "jar"));
         verifier.filterFile(".mvn/jvm.config", ".mvn/jvm.config", null, filterProperties);
 
         verifier.setForkJvm(true); // pick up agent

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng7772CoreExtensionsNotFoundTest.java
Patch:
@@ -38,7 +38,7 @@ public void testCoreExtensionsNotFound() throws Exception {
         File testDir = extractResources("/mng-7772-core-extensions-not-found");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
-        ItUtils.setUserHome(verifier, Paths.get(testDir.toPath().toString(), "home"));
+        verifier.setUserHomeDirectory(Paths.get(testDir.toPath().toString(), "home"));
 
         try {
             verifier.addCliArgument("validate");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng8379SettingsDecryptTest.java
Patch:
@@ -40,7 +40,7 @@ void testLegacy() throws Exception {
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setLogFileName("log-legacy.txt");
-        ItUtils.setUserHome(verifier, new File(testDir, "legacyhome"));
+        verifier.setUserHomeDirectory(new File(testDir, "legacyhome").toPath());
         verifier.addCliArgument("org.apache.maven.plugins:maven-help-plugin:3.3.0:effective-settings");
         verifier.addCliArgument("-DshowPasswords");
         verifier.execute();
@@ -62,7 +62,7 @@ void testModern() throws Exception {
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setLogFileName("log-modern.txt");
         verifier.setEnvironmentVariable("MAVEN_MASTER_PASSWORD", "master");
-        ItUtils.setUserHome(verifier, new File(testDir, "home"));
+        verifier.setUserHomeDirectory(new File(testDir, "home").toPath());
         verifier.addCliArgument("org.apache.maven.plugins:maven-help-plugin:3.3.0:effective-settings");
         verifier.addCliArgument("-DshowPasswords");
         verifier.execute();

File: impl/maven-cli/src/main/java/org/apache/maven/cling/invoker/LookupContext.java
Patch:
@@ -35,6 +35,7 @@
 import org.apache.maven.api.services.Lookup;
 import org.apache.maven.api.settings.Settings;
 import org.apache.maven.cling.logging.Slf4jConfiguration;
+import org.apache.maven.logging.BuildEventListener;
 import org.jline.terminal.Terminal;
 import org.slf4j.ILoggerFactory;
 
@@ -86,6 +87,8 @@ protected LookupContext(InvokerRequest invokerRequest) {
     public ContainerCapsule containerCapsule;
     public Lookup lookup;
 
+    public BuildEventListener buildEventListener;
+
     // paths user can override from CLI, and we need to set on MavenExReq
     public Path installationSettingsPath;
     public Path projectSettingsPath;

File: impl/maven-cli/src/main/java/org/apache/maven/cling/invoker/mvn/MavenContext.java
Patch:
@@ -22,15 +22,13 @@
 import org.apache.maven.api.cli.InvokerRequest;
 import org.apache.maven.cling.invoker.LookupContext;
 import org.apache.maven.eventspy.internal.EventSpyDispatcher;
-import org.apache.maven.logging.BuildEventListener;
 
 @SuppressWarnings("VisibilityModifier")
 public class MavenContext extends LookupContext {
     public MavenContext(InvokerRequest invokerRequest) {
         super(invokerRequest);
     }
 
-    public BuildEventListener buildEventListener;
     public EventSpyDispatcher eventSpyDispatcher;
     public Maven maven;
 

File: impl/maven-cli/src/main/java/org/apache/maven/cling/invoker/mvnenc/EncryptContext.java
Patch:
@@ -23,7 +23,6 @@
 
 import org.apache.maven.api.cli.InvokerRequest;
 import org.apache.maven.cling.invoker.LookupContext;
-import org.jline.consoleui.prompt.ConsolePrompt;
 import org.jline.reader.LineReader;
 import org.jline.utils.AttributedString;
 import org.jline.utils.AttributedStringBuilder;
@@ -40,7 +39,6 @@ protected EncryptContext(InvokerRequest invokerRequest) {
     public List<AttributedString> header;
     public AttributedStyle style;
     public LineReader reader;
-    public ConsolePrompt prompt;
 
     public void addInHeader(String text) {
         addInHeader(AttributedStyle.DEFAULT, text);

File: impl/maven-executor/src/main/java/org/apache/maven/cling/executor/internal/HelperImpl.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
-import java.util.Objects;
 import java.util.concurrent.ConcurrentHashMap;
 
 import org.apache.maven.api.annotations.Nullable;
@@ -112,8 +111,7 @@ protected Executor getExecutor(Mode mode, ExecutorRequest request) throws Execut
     }
 
     private Executor getExecutorByRequest(ExecutorRequest request) {
-        if (Objects.equals(request.command(), ExecutorRequest.MVN)
-                && request.environmentVariables().orElse(Collections.emptyMap()).isEmpty()
+        if (request.environmentVariables().orElse(Collections.emptyMap()).isEmpty()
                 && request.jvmArguments().orElse(Collections.emptyList()).isEmpty()) {
             return getExecutor(Mode.EMBEDDED, request);
         } else {

File: its/core-it-suite/src/test/java/org/apache/maven/it/TestSuiteOrdering.java
Patch:
@@ -100,6 +100,7 @@ public TestSuiteOrdering() {
          * the tests are to finishing. Newer tests are also more likely to fail, so this is
          * a fail fast technique as well.
          */
+        suite.addTestSuite(MavenITmng8421MavenEncryptionTest.class);
         suite.addTestSuite(MavenITmng8400CanonicalMavenHomeTest.class);
         suite.addTestSuite(MavenITmng8385PropertyContributoSPITest.class);
         suite.addTestSuite(MavenITmng8383UnknownTypeDependenciesTest.class);

File: impl/maven-cli/src/main/java/org/apache/maven/cling/invoker/mvnenc/goals/Init.java
Patch:
@@ -54,7 +54,7 @@
  */
 @Singleton
 @Named("init")
-public class Init extends GoalSupport {
+public class Init extends InteractiveGoalSupport {
     private static final String NONE = "__none__";
 
     @Inject
@@ -63,7 +63,7 @@ public Init(MessageBuilderFactory messageBuilderFactory, SecDispatcher secDispat
     }
 
     @Override
-    public int execute(EncryptContext context) throws Exception {
+    public int doExecute(EncryptContext context) throws Exception {
         context.addInHeader(context.style.italic().bold().foreground(Colors.rgbColor("yellow")), "goal: init");
         context.addInHeader("");
 

File: impl/maven-impl/src/main/java/org/apache/maven/internal/impl/DefaultSettingsBuilder.java
Patch:
@@ -274,7 +274,7 @@ private Settings decrypt(
         }
         SecDispatcher secDispatcher = new DefaultSecDispatcher(dispatchers, getSecuritySettings(request.getSession()));
         Function<String, String> decryptFunction = str -> {
-            if (secDispatcher.isAnyEncryptedString(str)) {
+            if (str != null && !str.isEmpty() && !str.contains("${") && secDispatcher.isAnyEncryptedString(str)) {
                 if (secDispatcher.isLegacyEncryptedString(str)) {
                     // add a problem
                     problems.add(new DefaultBuilderProblem(

File: impl/maven-impl/src/main/java/org/apache/maven/internal/impl/model/DefaultInterpolator.java
Patch:
@@ -420,7 +420,7 @@ public static String unescape(@Nullable String val) {
         int escape = val.indexOf(ESCAPE_CHAR);
         while (escape >= 0 && escape < val.length() - 1) {
             char c = val.charAt(escape + 1);
-            if (c == '{' || c == '}' || c == ESCAPE_CHAR) {
+            if (c == '{' || c == '}') {
                 val = val.substring(0, escape) + val.substring(escape + 1);
             }
             escape = val.indexOf(ESCAPE_CHAR, escape + 1);

File: impl/maven-impl/src/test/java/org/apache/maven/internal/impl/model/DefaultInterpolatorTest.java
Patch:
@@ -98,6 +98,7 @@ void testSubstitutionEscape() {
         assertEquals("${a}", substVars("$\\{a${#}\\}", "b"));
         assertEquals("${a}", substVars("$\\{a\\}${#}", "b"));
         assertEquals("${a}", substVars("$\\{a\\}", "b"));
+        assertEquals("\\\\", substVars("\\\\", "b"));
     }
 
     @Test

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0008SimplePluginTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 public class MavenIT0008SimplePluginTest extends AbstractMavenIntegrationTestCase {
@@ -39,7 +38,7 @@ public MavenIT0008SimplePluginTest() {
      */
     @Test
     public void testit0008() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0008");
+        File testDir = extractResources("/it0008");
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);
         verifier.deleteDirectory("target");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0009GoalConfigurationTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 public class MavenIT0009GoalConfigurationTest extends AbstractMavenIntegrationTestCase {
@@ -40,7 +39,7 @@ public void testit0009() throws Exception {
 
         boolean supportSpaceInXml = matchesVersionRange("[3.1.0,)");
 
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0009");
+        File testDir = extractResources("/it0009");
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);
         verifier.deleteDirectory("target");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0010DependencyClosureResolutionTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -40,7 +39,7 @@ public MavenIT0010DependencyClosureResolutionTest() {
      */
     @Test
     public void testit0010() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0010");
+        File testDir = extractResources("/it0010");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0011DefaultVersionByDependencyManagementTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -38,7 +37,7 @@ public MavenIT0011DefaultVersionByDependencyManagementTest() {
      */
     @Test
     public void testit0011() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0011");
+        File testDir = extractResources("/it0011");
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);
         verifier.deleteDirectory("target");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0012PomInterpolationTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 public class MavenIT0012PomInterpolationTest extends AbstractMavenIntegrationTestCase {
@@ -35,7 +34,7 @@ public MavenIT0012PomInterpolationTest() {
      */
     @Test
     public void testit0012() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0012");
+        File testDir = extractResources("/it0012");
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);
         verifier.deleteDirectory("target");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0018DependencyManagementTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 public class MavenIT0018DependencyManagementTest extends AbstractMavenIntegrationTestCase {
@@ -37,7 +36,7 @@ public MavenIT0018DependencyManagementTest() {
      */
     @Test
     public void testit0018() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0018");
+        File testDir = extractResources("/it0018");
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);
         verifier.deleteArtifacts("org.apache.maven.its.it0018");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0019PluginVersionMgmtBySuperPomTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 public class MavenIT0019PluginVersionMgmtBySuperPomTest extends AbstractMavenIntegrationTestCase {
@@ -35,7 +34,7 @@ public MavenIT0019PluginVersionMgmtBySuperPomTest() {
      */
     @Test
     public void testit0019() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0019");
+        File testDir = extractResources("/it0019");
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);
         verifier.deleteDirectory("target");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0021PomProfileTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 public class MavenIT0021PomProfileTest extends AbstractMavenIntegrationTestCase {
@@ -36,7 +35,7 @@ public MavenIT0021PomProfileTest() {
      */
     @Test
     public void testit0021() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0021");
+        File testDir = extractResources("/it0021");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0023SettingsProfileTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 public class MavenIT0023SettingsProfileTest extends AbstractMavenIntegrationTestCase {
@@ -36,7 +35,7 @@ public MavenIT0023SettingsProfileTest() {
      */
     @Test
     public void testit0023() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0023");
+        File testDir = extractResources("/it0023");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0024MultipleGoalExecutionsTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -42,7 +41,7 @@ public MavenIT0024MultipleGoalExecutionsTest() {
      */
     @Test
     public void testit0024() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0024");
+        File testDir = extractResources("/it0024");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0025MultipleExecutionLevelConfigsTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -41,7 +40,7 @@ public MavenIT0025MultipleExecutionLevelConfigsTest() {
      */
     @Test
     public void testit0025() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0025");
+        File testDir = extractResources("/it0025");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0030DepPomDepMgmtInheritanceTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 public class MavenIT0030DepPomDepMgmtInheritanceTest extends AbstractMavenIntegrationTestCase {
@@ -36,7 +35,7 @@ public MavenIT0030DepPomDepMgmtInheritanceTest() {
      */
     @Test
     public void testit0030() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0030");
+        File testDir = extractResources("/it0030");
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.deleteArtifact("org.apache.maven.it", "maven-it-it0030", "1.0-SNAPSHOT", "jar");
         verifier.deleteArtifact("org.apache.maven.it", "maven-it-it0030-child-hierarchy", "1.0-SNAPSHOT", "jar");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0032MavenPrerequisiteTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 public class MavenIT0032MavenPrerequisiteTest extends AbstractMavenIntegrationTestCase {
@@ -35,7 +34,7 @@ public MavenIT0032MavenPrerequisiteTest() {
      */
     @Test
     public void testit0032() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0032");
+        File testDir = extractResources("/it0032");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0037AlternatePomFileSameDirTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -41,7 +40,7 @@ public MavenIT0037AlternatePomFileSameDirTest() {
      */
     @Test
     public void testit0037() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0037");
+        File testDir = extractResources("/it0037");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0038AlternatePomFileDifferentDirTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -41,7 +40,7 @@ public MavenIT0038AlternatePomFileDifferentDirTest() {
      */
     @Test
     public void testit0038() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0038");
+        File testDir = extractResources("/it0038");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0040PackagingFromPluginExtensionTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -42,7 +41,7 @@ public MavenIT0040PackagingFromPluginExtensionTest() {
      */
     @Test
     public void testit0040() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0040");
+        File testDir = extractResources("/it0040");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0041ArtifactTypeFromPluginExtensionTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -41,7 +40,7 @@ public MavenIT0041ArtifactTypeFromPluginExtensionTest() {
      */
     @Test
     public void testit0041() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0041");
+        File testDir = extractResources("/it0041");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0051ReleaseProfileTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 public class MavenIT0051ReleaseProfileTest extends AbstractMavenIntegrationTestCase {
@@ -36,7 +35,7 @@ public MavenIT0051ReleaseProfileTest() {
      */
     @Test
     public void testit0051() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0051");
+        File testDir = extractResources("/it0051");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0052ReleaseProfileTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 public class MavenIT0052ReleaseProfileTest extends AbstractMavenIntegrationTestCase {
@@ -36,7 +35,7 @@ public MavenIT0052ReleaseProfileTest() {
      */
     @Test
     public void testit0052() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0052");
+        File testDir = extractResources("/it0052");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0056MultipleGoalExecutionsTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 public class MavenIT0056MultipleGoalExecutionsTest extends AbstractMavenIntegrationTestCase {
@@ -36,7 +35,7 @@ public MavenIT0056MultipleGoalExecutionsTest() {
      */
     @Test
     public void testit0056() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0056");
+        File testDir = extractResources("/it0056");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0063SystemScopeDependencyTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -38,7 +37,7 @@ public MavenIT0063SystemScopeDependencyTest() {
      */
     @Test
     public void testit0063() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0063");
+        File testDir = extractResources("/it0063");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0064MojoConfigViaSettersTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 public class MavenIT0064MojoConfigViaSettersTest extends AbstractMavenIntegrationTestCase {
@@ -36,7 +35,7 @@ public MavenIT0064MojoConfigViaSettersTest() {
      */
     @Test
     public void testit0064() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0064");
+        File testDir = extractResources("/it0064");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0071PluginConfigWithDottedPropertyTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -42,7 +41,7 @@ public MavenIT0071PluginConfigWithDottedPropertyTest() {
      */
     @Test
     public void testit0071() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0071");
+        File testDir = extractResources("/it0071");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0072InterpolationWithDottedPropertyTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -45,7 +44,7 @@ public MavenIT0072InterpolationWithDottedPropertyTest() {
      */
     @Test
     public void testit0072() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0072");
+        File testDir = extractResources("/it0072");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0085TransitiveSystemScopeTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Collection;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -41,7 +40,7 @@ public MavenIT0085TransitiveSystemScopeTest() {
      */
     @Test
     public void testit0085() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0085");
+        File testDir = extractResources("/it0085");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0086PluginRealmTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -47,7 +46,7 @@ public MavenIT0086PluginRealmTest() {
      */
     @Test
     public void testit0086() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0086");
+        File testDir = extractResources("/it0086");
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);
         verifier.deleteDirectory("target");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0087PluginRealmWithProjectLevelDepsTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -47,7 +46,7 @@ public MavenIT0087PluginRealmWithProjectLevelDepsTest() {
      */
     @Test
     public void testit0087() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0087");
+        File testDir = extractResources("/it0087");
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);
         verifier.deleteDirectory("target");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0090EnvVarInterpolationTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -39,7 +38,7 @@ public MavenIT0090EnvVarInterpolationTest() {
      */
     @Test
     public void testit0090() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0090");
+        File testDir = extractResources("/it0090");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0108SnapshotUpdateTest.java
Patch:
@@ -26,8 +26,6 @@
 import java.util.Date;
 import java.util.Locale;
 
-import org.apache.maven.shared.verifier.VerificationException;
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.codehaus.plexus.util.FileUtils;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Disabled;
@@ -57,7 +55,7 @@ public MavenIT0108SnapshotUpdateTest() {
 
     @BeforeEach
     protected void setUp() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0108");
+        File testDir = extractResources("/it0108");
         verifier = newVerifier(testDir.getAbsolutePath());
         localRepoFile = getLocalRepoFile(verifier);
         deleteLocalArtifact(verifier, localRepoFile);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0113ServerAuthzAvailableToWagonMgrInPluginTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -39,7 +38,7 @@ public MavenIT0113ServerAuthzAvailableToWagonMgrInPluginTest() {
      */
     @Test
     public void testit0113() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0113");
+        File testDir = extractResources("/it0113");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0130CleanLifecycleTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -41,7 +40,7 @@ public MavenIT0130CleanLifecycleTest() {
      */
     @Test
     public void testit0130() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0130");
+        File testDir = extractResources("/it0130");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.deleteDirectory("target");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0131SiteLifecycleTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -41,7 +40,7 @@ public MavenIT0131SiteLifecycleTest() {
      */
     @Test
     public void testit0131() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0131");
+        File testDir = extractResources("/it0131");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.deleteDirectory("target");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0132PomLifecycleTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -41,7 +40,7 @@ public MavenIT0132PomLifecycleTest() {
      */
     @Test
     public void testit0132() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0132");
+        File testDir = extractResources("/it0132");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.deleteDirectory("target");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0133JarLifecycleTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -41,7 +40,7 @@ public MavenIT0133JarLifecycleTest() {
      */
     @Test
     public void testit0133() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0133");
+        File testDir = extractResources("/it0133");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.deleteDirectory("target");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0134WarLifecycleTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -41,7 +40,7 @@ public MavenIT0134WarLifecycleTest() {
      */
     @Test
     public void testit0134() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0134");
+        File testDir = extractResources("/it0134");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.deleteDirectory("target");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0135EjbLifecycleTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -41,7 +40,7 @@ public MavenIT0135EjbLifecycleTest() {
      */
     @Test
     public void testit0135() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0135");
+        File testDir = extractResources("/it0135");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.deleteDirectory("target");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0136RarLifecycleTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -41,7 +40,7 @@ public MavenIT0136RarLifecycleTest() {
      */
     @Test
     public void testit0136() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0136");
+        File testDir = extractResources("/it0136");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.deleteDirectory("target");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0137EarLifecycleTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -41,7 +40,7 @@ public MavenIT0137EarLifecycleTest() {
      */
     @Test
     public void testit0137() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0137");
+        File testDir = extractResources("/it0137");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.deleteDirectory("target");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0138PluginLifecycleTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -41,7 +40,7 @@ public MavenIT0138PluginLifecycleTest() {
      */
     @Test
     public void testit0138() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0138");
+        File testDir = extractResources("/it0138");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.deleteDirectory("target");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0139InterpolationWithProjectPrefixTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -44,7 +43,7 @@ public MavenIT0139InterpolationWithProjectPrefixTest() {
      */
     @Test
     public void testit0139() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0139");
+        File testDir = extractResources("/it0139");
         File child = new File(testDir, "child");
 
         Verifier verifier = newVerifier(child.getAbsolutePath());

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0140InterpolationWithPomPrefixTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -46,7 +45,7 @@ public MavenIT0140InterpolationWithPomPrefixTest() {
      */
     @Test
     public void testit0140() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0140");
+        File testDir = extractResources("/it0140");
         File child = new File(testDir, "child");
 
         Verifier verifier = newVerifier(child.getAbsolutePath());

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0142DirectDependencyScopesTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -49,7 +48,7 @@ public MavenIT0142DirectDependencyScopesTest() {
      */
     @Test
     public void testit0142() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0142");
+        File testDir = extractResources("/it0142");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0143TransitiveDependencyScopesTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.List;
 import java.util.Map;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -242,7 +241,7 @@ public void testitTestScope() throws Exception {
     }
 
     private Verifier run(String scope) throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0143");
+        File testDir = extractResources("/it0143");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0144LifecycleExecutionOrderTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -44,7 +43,7 @@ public MavenIT0144LifecycleExecutionOrderTest() {
      */
     @Test
     public void testit0144() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0144");
+        File testDir = extractResources("/it0144");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.deleteDirectory("target");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0146InstallerSnapshotNaming.java
Patch:
@@ -23,7 +23,6 @@
 import java.net.InetAddress;
 import java.util.Map;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.eclipse.jetty.server.Handler;
 import org.eclipse.jetty.server.NetworkConnector;
 import org.eclipse.jetty.server.Server;
@@ -43,7 +42,7 @@ public class MavenIT0146InstallerSnapshotNaming extends AbstractMavenIntegration
 
     public MavenIT0146InstallerSnapshotNaming() throws IOException {
         super("(2.0.2,)");
-        testDir = ResourceExtractor.simpleExtractResources(getClass(), "/it0146");
+        testDir = extractResources("/it0146");
     }
 
     @BeforeEach

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0199CyclicImportScopeTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 public class MavenIT0199CyclicImportScopeTest extends AbstractMavenIntegrationTestCase {
@@ -44,7 +43,7 @@ public void testit0199() throws Exception {
     }
 
     private void build(String module, String expectedArtifact) throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/cyclic-import-scope");
+        File testDir = extractResources("/cyclic-import-scope");
         Verifier verifier = newVerifier(new File(testDir.getAbsolutePath(), module).getAbsolutePath());
         verifier.setAutoclean(false);
         verifier.deleteDirectory("target");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITBootstrapTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -42,7 +41,7 @@ public MavenITBootstrapTest() {
      */
     @Test
     public void testBootstrap() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/bootstrap");
+        File testDir = extractResources("/bootstrap");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath(), "remote");
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0187CollectedProjectsTest.java
Patch:
@@ -25,7 +25,6 @@
 import java.util.List;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -49,7 +48,7 @@ public MavenITmng0187CollectedProjectsTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0187");
+        File testDir = extractResources("/mng-0187");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0249ResolveDepsFromReactorTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -44,7 +43,7 @@ public MavenITmng0249ResolveDepsFromReactorTest() {
      */
     @Test
     public void testitMNG0249() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0249");
+        File testDir = extractResources("/mng-0249");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0282NonReactorExecWhenProjectIndependentTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -41,7 +40,7 @@ public MavenITmng0282NonReactorExecWhenProjectIndependentTest() {
      */
     @Test
     public void testitMNG282() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0282");
+        File testDir = extractResources("/mng-0282");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0294MergeGlobalAndUserSettingsTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -42,7 +41,7 @@ public MavenITmng0294MergeGlobalAndUserSettingsTest() {
      */
     @Test
     public void testitMNG294() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0294");
+        File testDir = extractResources("/mng-0294");
 
         Verifier verifier = new Verifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0377PluginLookupFromPrefixTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -42,7 +41,7 @@ public MavenITmng0377PluginLookupFromPrefixTest() {
      */
     @Test
     public void testitMNG377() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0377");
+        File testDir = extractResources("/mng-0377");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0449PluginVersionResolutionTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -43,7 +42,7 @@ public MavenITmng0449PluginVersionResolutionTest() {
      */
     @Test
     public void testitLifecycleInvocation() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0449");
+        File testDir = extractResources("/mng-0449");
         testDir = new File(testDir, "lifecycle");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
@@ -80,7 +79,7 @@ public void testitLifecycleInvocation() throws Exception {
      */
     @Test
     public void testitCliInvocation() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0449");
+        File testDir = extractResources("/mng-0449");
         testDir = new File(testDir, "direct");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0461TolerateMissingDependencyPomTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -44,7 +43,7 @@ public MavenITmng0461TolerateMissingDependencyPomTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0461");
+        File testDir = extractResources("/mng-0461");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0469ReportConfigTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -46,7 +45,7 @@ public MavenITmng0469ReportConfigTest() {
      */
     @Test
     public void testitBuildConfigDominantDuringBuild() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0469/test1");
+        File testDir = extractResources("/mng-0469/test1");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.deleteDirectory("target");
@@ -65,7 +64,7 @@ public void testitBuildConfigDominantDuringBuild() throws Exception {
      */
     @Test
     public void testitBuildConfigIrrelevantForReports() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0469/test2");
+        File testDir = extractResources("/mng-0469/test2");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.deleteDirectory("target");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0471CustomLifecycleTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -41,7 +40,7 @@ public MavenITmng0471CustomLifecycleTest() {
      */
     @Test
     public void testitMNG471() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0471");
+        File testDir = extractResources("/mng-0471");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0496IgnoreUnknownPluginParametersTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -42,7 +41,7 @@ public MavenITmng0496IgnoreUnknownPluginParametersTest() {
      */
     @Test
     public void testitMNG496() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0496");
+        File testDir = extractResources("/mng-0496");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0505VersionRangeTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Collection;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -49,7 +48,7 @@ public MavenITmng0505VersionRangeTest() {
      */
     @Test
     public void testitMNG505() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0505");
+        File testDir = extractResources("/mng-0505");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0507ArtifactRelocationTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -44,7 +43,7 @@ public MavenITmng0507ArtifactRelocationTest() {
      */
     @Test
     public void testitMNG507() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0507");
+        File testDir = extractResources("/mng-0507");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0522InheritedPluginMgmtConfigTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -41,7 +40,7 @@ public MavenITmng0522InheritedPluginMgmtConfigTest() {
      */
     @Test
     public void testitMNG522() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0522");
+        File testDir = extractResources("/mng-0522");
 
         Verifier verifier = newVerifier(new File(testDir, "child-project").getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0553SettingsAuthzEncryptionTest.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.List;
 import java.util.Map;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.eclipse.jetty.security.ConstraintMapping;
 import org.eclipse.jetty.security.ConstraintSecurityHandler;
 import org.eclipse.jetty.security.HashLoginService;
@@ -61,7 +60,7 @@ public MavenITmng0553SettingsAuthzEncryptionTest() {
 
     @BeforeEach
     protected void setUp() throws Exception {
-        testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0553");
+        testDir = extractResources("/mng-0553");
 
         Constraint constraint = new Constraint(__BASIC_AUTH, "user");
         constraint.setAuthenticate(true);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0557UserSettingsCliOptionTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -41,7 +40,7 @@ public MavenITmng0557UserSettingsCliOptionTest() {
      */
     @Test
     public void testitMNG557() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0557");
+        File testDir = extractResources("/mng-0557");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0666IgnoreLegacyPomTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -45,7 +44,7 @@ public MavenITmng0666IgnoreLegacyPomTest() {
      */
     @Test
     public void testitMNG666() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0666");
+        File testDir = extractResources("/mng-0666");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0674PluginParameterAliasTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -46,7 +45,7 @@ public MavenITmng0674PluginParameterAliasTest() {
      */
     @Test
     public void testitLifecycle() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0674");
+        File testDir = extractResources("/mng-0674");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);
@@ -69,7 +68,7 @@ public void testitLifecycle() throws Exception {
      */
     @Test
     public void testitCli() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0674");
+        File testDir = extractResources("/mng-0674");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0680ParentBasedirTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -44,7 +43,7 @@ public MavenITmng0680ParentBasedirTest() {
      */
     @Test
     public void testitMNG680() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0680");
+        File testDir = extractResources("/mng-0680");
 
         testDir = testDir.getCanonicalFile();
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0761MissingSnapshotDistRepoTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -43,7 +42,7 @@ public MavenITmng0761MissingSnapshotDistRepoTest() {
      */
     @Test
     public void testitMNG761() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0761");
+        File testDir = extractResources("/mng-0761");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0768OfflineModeTest.java
Patch:
@@ -29,8 +29,6 @@
 import java.util.List;
 import java.util.Map;
 
-import org.apache.maven.shared.verifier.VerificationException;
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.eclipse.jetty.server.Handler;
 import org.eclipse.jetty.server.NetworkConnector;
 import org.eclipse.jetty.server.Request;
@@ -59,7 +57,7 @@ public MavenITmng0768OfflineModeTest() {
      */
     @Test
     public void testitMNG768() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0768");
+        File testDir = extractResources("/mng-0768");
 
         final List<String> requestedUris = Collections.synchronizedList(new ArrayList<>());
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0773SettingsProfileReactorPollutionTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -41,7 +40,7 @@ public MavenITmng0773SettingsProfileReactorPollutionTest() {
      */
     @Test
     public void testitMNG773() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0773");
+        File testDir = extractResources("/mng-0773");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0781PluginConfigVsExecConfigTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -42,7 +41,7 @@ public MavenITmng0781PluginConfigVsExecConfigTest() {
      */
     @Test
     public void testitMNG0781() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0781");
+        File testDir = extractResources("/mng-0781");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0786ProfileAwareReactorTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -42,7 +41,7 @@ public MavenITmng0786ProfileAwareReactorTest() {
      */
     @Test
     public void testitMNG0786() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0786");
+        File testDir = extractResources("/mng-0786");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0814ExplicitProfileActivationTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -44,7 +43,7 @@ public MavenITmng0814ExplicitProfileActivationTest() {
      */
     @Test
     public void testitMNG814() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0814");
+        File testDir = extractResources("/mng-0814");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0818WarDepsNotTransitiveTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.Collection;
 import java.util.Collections;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -45,7 +44,7 @@ public MavenITmng0818WarDepsNotTransitiveTest() {
      */
     @Test
     public void testitMNG0818() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0818");
+        File testDir = extractResources("/mng-0818");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0820ConflictResolutionTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Collection;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -46,7 +45,7 @@ public MavenITmng0820ConflictResolutionTest() {
      */
     @Test
     public void testitMNG0820() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0820");
+        File testDir = extractResources("/mng-0820");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0823MojoContextPassingTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -41,7 +40,7 @@ public MavenITmng0823MojoContextPassingTest() {
      */
     @Test
     public void testitMNG0823() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0823");
+        File testDir = extractResources("/mng-0823");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0828PluginConfigValuesInDebugTest.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.Date;
 import java.util.Locale;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -48,7 +47,7 @@ public MavenITmng0828PluginConfigValuesInDebugTest() {
      */
     @Test
     public void testitMNG0828() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0828");
+        File testDir = extractResources("/mng-0828");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0836PluginParentResolutionTest.java
Patch:
@@ -20,8 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.VerificationException;
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -44,7 +42,7 @@ public MavenITmng0836PluginParentResolutionTest() {
      */
     @Test
     public void testitMNG836() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0836");
+        File testDir = extractResources("/mng-0836");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0848UserPropertyOverridesDefaultValueTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -45,7 +44,7 @@ public MavenITmng0848UserPropertyOverridesDefaultValueTest() {
      */
     @Test
     public void testitMNG848() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0848");
+        File testDir = extractResources("/mng-0848");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0866EvaluateDefaultValueTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -46,7 +45,7 @@ public MavenITmng0866EvaluateDefaultValueTest() {
      */
     @Test
     public void testitMNG866() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0866");
+        File testDir = extractResources("/mng-0866");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0870ReactorAwarePluginDiscoveryTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -43,7 +42,7 @@ public MavenITmng0870ReactorAwarePluginDiscoveryTest() {
      */
     @Test
     public void testitMNG0870() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0870");
+        File testDir = extractResources("/mng-0870");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0947OptionalDependencyTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -48,7 +47,7 @@ public MavenITmng0947OptionalDependencyTest() {
     public void testit() throws Exception {
         // failingMavenVersions("(,3.1.0-alpha-1)");
 
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0947");
+        File testDir = extractResources("/mng-0947");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0956ComponentInjectionViaProjectLevelPluginDepTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -44,7 +43,7 @@ public MavenITmng0956ComponentInjectionViaProjectLevelPluginDepTest() {
      */
     @Test
     public void testitMNG0956() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0956");
+        File testDir = extractResources("/mng-0956");
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);
         verifier.deleteDirectory("target");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0985NonExecutedPluginMgmtGoalsTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -43,7 +42,7 @@ public MavenITmng0985NonExecutedPluginMgmtGoalsTest() {
      */
     @Test
     public void testitMNG0985() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-0985");
+        File testDir = extractResources("/mng-0985");
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);
         verifier.deleteDirectory("target");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1021EqualAttachmentBuildNumberTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -44,7 +43,7 @@ public MavenITmng1021EqualAttachmentBuildNumberTest() {
      */
     @Test
     public void testitMNG1021() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-1021");
+        File testDir = extractResources("/mng-1021");
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);
         verifier.deleteDirectory("repo");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1052PluginMgmtConfigTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -43,7 +42,7 @@ public MavenITmng1052PluginMgmtConfigTest() {
      */
     @Test
     public void testitMNG1052() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-1052");
+        File testDir = extractResources("/mng-1052");
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);
         verifier.deleteDirectory("target");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1073AggregatorForksReactorTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -44,7 +43,7 @@ public void testitForkLifecycle() throws Exception {
         // excluded 2.1.x and 2.2.x due to MNG-4325
         requiresMavenVersion("[2.0,2.1.0),[3.0-alpha-3,)");
 
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-1073");
+        File testDir = extractResources("/mng-1073");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);
@@ -69,7 +68,7 @@ public void testitForkLifecycle() throws Exception {
      */
     @Test
     public void testitForkGoal() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-1073");
+        File testDir = extractResources("/mng-1073");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1088ReactorPluginResolutionTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
@@ -46,7 +45,7 @@ public MavenITmng1088ReactorPluginResolutionTest() {
      */
     @Test
     public void testitMNG1088() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-1088");
+        File testDir = extractResources("/mng-1088");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1142VersionRangeIntersectionTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertFalse;
@@ -61,7 +60,7 @@ public void testitBA() throws Exception {
     }
 
     private void testit(String project) throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-1142");
+        File testDir = extractResources("/mng-1142");
 
         Verifier verifier = newVerifier(new File(testDir, project).getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1144MultipleDefaultGoalsTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -41,7 +40,7 @@ public MavenITmng1144MultipleDefaultGoalsTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-1144");
+        File testDir = extractResources("/mng-1144");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1233WarDepWithProvidedScopeTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Collection;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertFalse;
@@ -45,7 +44,7 @@ public MavenITmng1233WarDepWithProvidedScopeTest() {
      */
     @Test
     public void testitMNG1233() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-1233");
+        File testDir = extractResources("/mng-1233");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1323AntrunDependenciesTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertNotNull;
@@ -47,7 +46,7 @@ public MavenITmng1323AntrunDependenciesTest() {
      */
     @Test
     public void testitMNG1323() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-1323");
+        File testDir = extractResources("/mng-1323");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1349ChecksumFormatsTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -42,7 +41,7 @@ public MavenITmng1349ChecksumFormatsTest() {
      */
     @Test
     public void testitMNG1349() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-1349");
+        File testDir = extractResources("/mng-1349");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1412DependenciesOrderTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -41,7 +40,7 @@ public MavenITmng1412DependenciesOrderTest() {
 
     @Test
     public void testitMNG1412() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-1412");
+        File testDir = extractResources("/mng-1412");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1415QuotedSystemPropertiesTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -43,7 +42,7 @@ public MavenITmng1415QuotedSystemPropertiesTest() {
      */
     @Test
     public void testitMNG1415() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-1415");
+        File testDir = extractResources("/mng-1415");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1491ReactorArtifactIdCollisionTest.java
Patch:
@@ -20,8 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.VerificationException;
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -37,7 +35,7 @@ public MavenITmng1491ReactorArtifactIdCollisionTest() {
 
     @Test
     public void testitMNG1491() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-1491");
+        File testDir = extractResources("/mng-1491");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1493NonStandardModulePomNamesTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -33,7 +32,7 @@ public MavenITmng1493NonStandardModulePomNamesTest() {
 
     @Test
     public void testitMNG1493() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-1493");
+        File testDir = extractResources("/mng-1493");
 
         Verifier verifier;
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1701DuplicatePluginTest.java
Patch:
@@ -21,8 +21,6 @@
 import java.io.File;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.VerificationException;
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -45,7 +43,7 @@ public MavenITmng1701DuplicatePluginTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-1701");
+        File testDir = extractResources("/mng-1701");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1703PluginMgmtDepInheritanceTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -47,7 +46,7 @@ public MavenITmng1703PluginMgmtDepInheritanceTest() {
      */
     @Test
     public void testitMNG1703() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-1703");
+        File testDir = extractResources("/mng-1703");
 
         Verifier verifier = newVerifier(new File(testDir, "child").getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1751ForcedMetadataUpdateDuringDeploymentTest.java
Patch:
@@ -23,7 +23,6 @@
 import java.nio.file.StandardCopyOption;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -48,7 +47,7 @@ public MavenITmng1751ForcedMetadataUpdateDuringDeploymentTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-1751");
+        File testDir = extractResources("/mng-1751");
 
         File dir = new File(testDir, "repo/org/apache/maven/its/mng1751/dep/0.1-SNAPSHOT");
         File templateMetadataFile = new File(dir, "template-metadata.xml");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1803PomValidationErrorIncludesLineNumberTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.List;
 
 import org.apache.maven.artifact.versioning.DefaultArtifactVersion;
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -45,7 +44,7 @@ public MavenITmng1803PomValidationErrorIncludesLineNumberTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-1803");
+        File testDir = extractResources("/mng-1803");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1895ScopeConflictResolutionTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.List;
 import java.util.Map;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertFalse;
@@ -47,7 +46,7 @@ public MavenITmng1895ScopeConflictResolutionTest() {
      */
     @Test
     public void testitDirectVsIndirect() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-1895/direct-vs-indirect");
+        File testDir = extractResources("/mng-1895/direct-vs-indirect");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);
@@ -214,7 +213,7 @@ public void testitProvidedVsTest() throws Exception {
     }
 
     private Verifier run(String scopeB, String scopeA) throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-1895/strong-vs-weak");
+        File testDir = extractResources("/mng-1895/strong-vs-weak");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1957JdkActivationWithVersionRangeTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -46,7 +45,7 @@ public MavenITmng1957JdkActivationWithVersionRangeTest() {
      */
     @Test
     public void testitMNG1957() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-1957");
+        File testDir = extractResources("/mng-1957");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1992SystemPropOverridesPomPropTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -47,7 +46,7 @@ public MavenITmng1992SystemPropOverridesPomPropTest() {
      */
     @Test
     public void testitMNG1992() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-1992");
+        File testDir = extractResources("/mng-1992");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1995InterpolateBooleanModelElementsTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -46,7 +45,7 @@ public MavenITmng1995InterpolateBooleanModelElementsTest() {
      */
     @Test
     public void testitMNG1995() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-1995");
+        File testDir = extractResources("/mng-1995");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2006ChildPathAwareUrlInheritanceTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -46,7 +45,7 @@ public MavenITmng2006ChildPathAwareUrlInheritanceTest() {
      */
     @Test
     public void testitMNG2006() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2006");
+        File testDir = extractResources("/mng-2006");
 
         Verifier verifier = newVerifier(new File(testDir, "child").getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2045testJarDependenciesBrokenInReactorTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertFalse;
@@ -44,7 +43,7 @@ public MavenITmng2045testJarDependenciesBrokenInReactorTest() {
 
     @Test
     public void testitMNG2045() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2045");
+        File testDir = extractResources("/mng-2045");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2052InterpolateWithSettingsProfilePropertiesTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -42,7 +41,7 @@ public MavenITmng2052InterpolateWithSettingsProfilePropertiesTest() {
      */
     @Test
     public void testitMNG2052() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2052");
+        File testDir = extractResources("/mng-2052");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2054PluginExecutionInheritanceTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.Arrays;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -45,7 +44,7 @@ public MavenITmng2054PluginExecutionInheritanceTest() {
      */
     @Test
     public void testitMNG2054() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2054");
+        File testDir = extractResources("/mng-2054");
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);
         verifier.deleteDirectory("project/project-level2/project-level3/project-jar/target");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2098VersionRangeSatisfiedFromWrongRepoTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -44,7 +43,7 @@ public MavenITmng2098VersionRangeSatisfiedFromWrongRepoTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2098");
+        File testDir = extractResources("/mng-2098");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2103PluginExecutionInheritanceTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.Arrays;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -45,7 +44,7 @@ public MavenITmng2103PluginExecutionInheritanceTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2103");
+        File testDir = extractResources("/mng-2103");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2123VersionRangeDependencyTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -37,7 +36,7 @@ public MavenITmng2123VersionRangeDependencyTest() {
 
     @Test
     public void testitMNG2123() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2123");
+        File testDir = extractResources("/mng-2123");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2124PomInterpolationWithParentValuesTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -41,7 +40,7 @@ public MavenITmng2124PomInterpolationWithParentValuesTest() {
      */
     @Test
     public void testitMNG2124() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2124");
+        File testDir = extractResources("/mng-2124");
         File child = new File(testDir, "parent/child");
 
         Verifier verifier = newVerifier(child.getAbsolutePath());

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2130ParentLookupFromReactorCacheTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -39,7 +38,7 @@ public MavenITmng2130ParentLookupFromReactorCacheTest() {
      */
     @Test
     public void testitMNG2130() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2130");
+        File testDir = extractResources("/mng-2130");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2135PluginBuildInReactorTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -41,7 +40,7 @@ public MavenITmng2135PluginBuildInReactorTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2135");
+        File testDir = extractResources("/mng-2135");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2136ActiveByDefaultProfileTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -45,7 +44,7 @@ public MavenITmng2136ActiveByDefaultProfileTest() {
      */
     @Test
     public void testitMNG2136() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2136");
+        File testDir = extractResources("/mng-2136");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2140ReactorAwareDepResolutionWhenForkTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -44,7 +43,7 @@ public MavenITmng2140ReactorAwareDepResolutionWhenForkTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2140");
+        File testDir = extractResources("/mng-2140");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2174PluginDepsManagedByParentProfileTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -47,7 +46,7 @@ public MavenITmng2174PluginDepsManagedByParentProfileTest() {
      */
     @Test
     public void testitMNG2174() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2174");
+        File testDir = extractResources("/mng-2174");
 
         Verifier verifier = newVerifier(new File(testDir, "sub").getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2196ParentResolutionTest.java
Patch:
@@ -20,8 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.VerificationException;
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -42,7 +40,7 @@ public MavenITmng2196ParentResolutionTest() {
      */
     @Test
     public void testitMNG2196() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2196");
+        File testDir = extractResources("/mng-2196");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2201PluginConfigInterpolationTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -44,7 +43,7 @@ public MavenITmng2201PluginConfigInterpolationTest() {
      */
     @Test
     public void testitMNG2201() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2201");
+        File testDir = extractResources("/mng-2201");
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);
         verifier.deleteDirectory("target");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2222OutputDirectoryReactorResolutionTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -46,7 +45,7 @@ public MavenITmng2222OutputDirectoryReactorResolutionTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2222");
+        File testDir = extractResources("/mng-2222");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2228ComponentInjectionTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -46,7 +45,7 @@ public MavenITmng2228ComponentInjectionTest() {
      */
     @Test
     public void testitMNG2228() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2228");
+        File testDir = extractResources("/mng-2228");
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);
         verifier.deleteDirectory("target");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2234ActiveProfilesFromSettingsTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -40,7 +39,7 @@ public MavenITmng2234ActiveProfilesFromSettingsTest() {
      */
     @Test
     public void testitMNG2234() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2234");
+        File testDir = extractResources("/mng-2234");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2254PomEncodingTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -46,7 +45,7 @@ public MavenITmng2254PomEncodingTest() {
      */
     @Test
     public void testitMNG2254() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2254");
+        File testDir = extractResources("/mng-2254");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2276ProfileActivationBySettingsPropertyTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -44,7 +43,7 @@ public MavenITmng2276ProfileActivationBySettingsPropertyTest() {
      */
     @Test
     public void testitActivation() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2276");
+        File testDir = extractResources("/mng-2276");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);
@@ -68,7 +67,7 @@ public void testitActivation() throws Exception {
      */
     @Test
     public void testitCliWins() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2276");
+        File testDir = extractResources("/mng-2276");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2277AggregatorAndResolutionPluginsTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -37,7 +36,7 @@ public MavenITmng2277AggregatorAndResolutionPluginsTest() {
 
     @Test
     public void testitMNG2277() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2277");
+        File testDir = extractResources("/mng-2277");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2305MultipleProxiesTest.java
Patch:
@@ -27,7 +27,6 @@
 import java.util.List;
 import java.util.Map;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.eclipse.jetty.server.HttpConfiguration;
 import org.eclipse.jetty.server.HttpConnectionFactory;
 import org.eclipse.jetty.server.NetworkConnector;
@@ -62,7 +61,7 @@ public MavenITmng2305MultipleProxiesTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2305");
+        File testDir = extractResources("/mng-2305");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2309ProfileInjectionOrderTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -45,7 +44,7 @@ public MavenITmng2309ProfileInjectionOrderTest() {
      */
     @Test
     public void testitMNG2309() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2309");
+        File testDir = extractResources("/mng-2309");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2318LocalParentResolutionTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -41,7 +40,7 @@ public MavenITmng2318LocalParentResolutionTest() {
      */
     @Test
     public void testitMNG2318() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2318");
+        File testDir = extractResources("/mng-2318");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2339BadProjectInterpolationTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -35,7 +34,7 @@ public MavenITmng2339BadProjectInterpolationTest() {
 
     @Test
     public void testitMNG2339a() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2339/a");
+        File testDir = extractResources("/mng-2339/a");
 
         Verifier verifier;
 
@@ -53,7 +52,7 @@ public void testitMNG2339a() throws Exception {
     @Test
     public void testitMNG2339b() throws Exception {
         requiresMavenVersion("(2.0.8,4.0.0-alpha-1)");
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2339/b");
+        File testDir = extractResources("/mng-2339/b");
 
         Verifier verifier;
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2362DeployedPomEncodingTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -46,7 +45,7 @@ public MavenITmng2362DeployedPomEncodingTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2362");
+        File testDir = extractResources("/mng-2362");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2363BasedirAwareFileActivatorTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -42,7 +41,7 @@ public MavenITmng2363BasedirAwareFileActivatorTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2363");
+        File testDir = extractResources("/mng-2363");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2387InactiveProxyTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.net.InetAddress;
 import java.util.Map;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.eclipse.jetty.server.Handler;
 import org.eclipse.jetty.server.NetworkConnector;
 import org.eclipse.jetty.server.Server;
@@ -56,7 +55,7 @@ public MavenITmng2387InactiveProxyTest() {
 
     @BeforeEach
     protected void setUp() throws Exception {
-        testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2387");
+        testDir = extractResources("/mng-2387");
 
         ResourceHandler resourceHandler = new ResourceHandler();
         resourceHandler.setResourceBase(new File(testDir, "repo").getAbsolutePath());

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2432PluginPrefixOrderTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -43,7 +42,7 @@ public MavenITmng2432PluginPrefixOrderTest() {
      */
     @Test
     public void testitMNG2432() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2432");
+        File testDir = extractResources("/mng-2432");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2486TimestampedDependencyVersionInterpolationTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -46,7 +45,7 @@ public MavenITmng2486TimestampedDependencyVersionInterpolationTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2486");
+        File testDir = extractResources("/mng-2486");
 
         Verifier verifier;
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2577SettingsXmlInterpolationTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -44,7 +43,7 @@ public MavenITmng2577SettingsXmlInterpolationTest() {
      */
     @Test
     public void testitEnvVars() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2577");
+        File testDir = extractResources("/mng-2577");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);
@@ -70,7 +69,7 @@ public void testitEnvVars() throws Exception {
     public void testitSystemProps() throws Exception {
         requiresMavenVersion("[3.0-alpha-1,)");
 
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2577");
+        File testDir = extractResources("/mng-2577");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2591MergeInheritedPluginConfigTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -61,7 +60,7 @@ public void testitWithProfile() throws Exception {
     }
 
     private void testit(String project) throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2591/" + project);
+        File testDir = extractResources("/mng-2591/" + project);
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);
         verifier.deleteDirectory("subproject/target");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2605BogusProfileActivationTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertNull;
@@ -46,7 +45,7 @@ public MavenITmng2605BogusProfileActivationTest() {
      */
     @Test
     public void testitMNG2605() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2605");
+        File testDir = extractResources("/mng-2605");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2668UsePluginDependenciesForSortingTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -36,7 +35,7 @@ public MavenITmng2668UsePluginDependenciesForSortingTest() {
 
     @Test
     public void testitMNG2668() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2668");
+        File testDir = extractResources("/mng-2668");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2693SitePluginRealmTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -45,7 +44,7 @@ public MavenITmng2693SitePluginRealmTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2693");
+        File testDir = extractResources("/mng-2693");
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);
         verifier.deleteDirectory("target");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2695OfflinePluginSnapshotsTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -44,7 +43,7 @@ public MavenITmng2695OfflinePluginSnapshotsTest() {
      */
     @Test
     public void testitMNG2695() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2695");
+        File testDir = extractResources("/mng-2695");
 
         {
             // phase 1: run build in online mode to fill local repo

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2720SiblingClasspathArtifactsTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertFalse;
@@ -48,7 +47,7 @@ public MavenITmng2720SiblingClasspathArtifactsTest() {
 
     @Test
     public void testIT() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2720");
+        File testDir = extractResources("/mng-2720");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2738ProfileIdCollidesWithCliOptionTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -42,7 +41,7 @@ public MavenITmng2738ProfileIdCollidesWithCliOptionTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2738");
+        File testDir = extractResources("/mng-2738");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2741PluginMetadataResolutionErrorMessageTest.java
Patch:
@@ -21,8 +21,6 @@
 import java.io.File;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.VerificationException;
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -59,7 +57,7 @@ public void testitVersion() throws Exception {
     }
 
     private void testit(String test, String goal) throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2741");
+        File testDir = extractResources("/mng-2741");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2744checksumVerificationTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -42,7 +41,7 @@ public MavenITmng2744checksumVerificationTest() {
      */
     @Test
     public void testitMNG2744() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2744");
+        File testDir = extractResources("/mng-2744");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2749ExtensionAvailableToPluginTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -46,7 +45,7 @@ public MavenITmng2749ExtensionAvailableToPluginTest() {
      */
     @Test
     public void testitMNG2749() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2749");
+        File testDir = extractResources("/mng-2749");
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);
         verifier.deleteDirectory("target");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2790LastUpdatedMetadataTest.java
Patch:
@@ -24,7 +24,6 @@
 import java.util.Date;
 import java.util.TimeZone;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -48,7 +47,7 @@ public MavenITmng2790LastUpdatedMetadataTest() {
      */
     @Test
     public void testitMNG2790() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2790");
+        File testDir = extractResources("/mng-2790");
 
         Date now = new Date();
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2820PomCommentsTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.nio.file.Files;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -44,7 +43,7 @@ public MavenITmng2820PomCommentsTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2820");
+        File testDir = extractResources("/mng-2820");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2831CustomArtifactHandlerAndCustomLifecycleTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -41,7 +40,7 @@ public MavenITmng2831CustomArtifactHandlerAndCustomLifecycleTest() {
      */
     @Test
     public void testitMNG2831() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2831");
+        File testDir = extractResources("/mng-2831");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2843PluginConfigPropertiesInjectionTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -45,7 +44,7 @@ public MavenITmng2843PluginConfigPropertiesInjectionTest() {
      */
     @Test
     public void testitMNG2843() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2843");
+        File testDir = extractResources("/mng-2843");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2848ProfileActivationByEnvironmentVariableTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -44,7 +43,7 @@ public MavenITmng2848ProfileActivationByEnvironmentVariableTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2848");
+        File testDir = extractResources("/mng-2848");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2861RelocationsAndRangesTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -39,7 +38,7 @@ public MavenITmng2861RelocationsAndRangesTest() {
 
     @Test
     public void testitMNG2861() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2861");
+        File testDir = extractResources("/mng-2861");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2865MirrorWildcardTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -76,7 +75,7 @@ public void testitCentralRepo() throws Exception {
     }
 
     private void testit(String project) throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2865");
+        File testDir = extractResources("/mng-2865");
 
         Verifier verifier = newVerifier(new File(testDir, project).getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2871PrePackageSubartifactResolutionTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -46,7 +45,7 @@ public MavenITmng2871PrePackageSubartifactResolutionTest() {
      */
     @Test
     public void testitMNG2871() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2871");
+        File testDir = extractResources("/mng-2871");
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);
         verifier.deleteDirectory("consumer/target");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2892HideCorePlexusUtilsTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -46,7 +45,7 @@ public MavenITmng2892HideCorePlexusUtilsTest() {
      */
     @Test
     public void testitMNG2892() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2892");
+        File testDir = extractResources("/mng-2892");
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);
         verifier.deleteDirectory("target");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2921ActiveAttachedArtifactsTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Collection;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertFalse;
@@ -53,7 +52,7 @@ public MavenITmng2921ActiveAttachedArtifactsTest() {
      */
     @Test
     public void testitMNG2921() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2921");
+        File testDir = extractResources("/mng-2921");
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);
         verifier.deleteDirectory("consumer/target");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2926PluginPrefixOrderTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -43,7 +42,7 @@ public MavenITmng2926PluginPrefixOrderTest() {
      */
     @Test
     public void testitMNG2926() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2926");
+        File testDir = extractResources("/mng-2926");
 
         Verifier verifier;
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2972OverridePluginDependencyTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -47,7 +46,7 @@ public MavenITmng2972OverridePluginDependencyTest() {
      */
     @Test
     public void testitLifecycleInvocation() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2972/test1");
+        File testDir = extractResources("/mng-2972/test1");
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);
         verifier.deleteDirectory("target");
@@ -77,7 +76,7 @@ public void testitLifecycleInvocation() throws Exception {
      */
     @Test
     public void testitCommandLineInvocation() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2972/test2");
+        File testDir = extractResources("/mng-2972/test2");
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);
         verifier.deleteDirectory("target");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2994SnapshotRangeRepositoryTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -42,7 +41,7 @@ public MavenITmng2994SnapshotRangeRepositoryTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-2994");
+        File testDir = extractResources("/mng-2994");
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.deleteArtifacts("org.apache.maven.its.mng2994");
         verifier.filterFile("settings-template.xml", "settings.xml");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3012CoreClassImportTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -45,7 +44,7 @@ public MavenITmng3012CoreClassImportTest() {
      */
     @Test
     public void testitMNG3012() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3012");
+        File testDir = extractResources("/mng-3012");
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);
         verifier.deleteDirectory("target");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3038TransitiveDepManVersionTest.java
Patch:
@@ -21,8 +21,6 @@
 import java.io.File;
 import java.io.IOException;
 
-import org.apache.maven.shared.verifier.VerificationException;
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
@@ -40,7 +38,7 @@ public MavenITmng3038TransitiveDepManVersionTest() {
 
     @Test
     public void testitMNG3038() throws Exception {
-        File testDirBase = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3038");
+        File testDirBase = extractResources("/mng-3038");
 
         compileDDep(testDirBase, "D1", "1.0");
         compileDDep(testDirBase, "D2", "2.0");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3052DepRepoAggregationTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -45,8 +44,7 @@ public MavenITmng3052DepRepoAggregationTest() {
 
     @Test
     public void testitMNG3052() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3052")
-                .getCanonicalFile();
+        File testDir = extractResources("/mng-3052").getCanonicalFile();
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3092SnapshotsExcludedFromVersionRangeTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
@@ -47,7 +46,7 @@ public MavenITmng3092SnapshotsExcludedFromVersionRangeTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3092");
+        File testDir = extractResources("/mng-3092");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3099SettingsProfilesWithNoPomTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -43,7 +42,7 @@ public MavenITmng3099SettingsProfilesWithNoPomTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3099");
+        File testDir = extractResources("/mng-3099");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3118TestClassPathOrderTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.Arrays;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -45,7 +44,7 @@ public MavenITmng3118TestClassPathOrderTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3118");
+        File testDir = extractResources("/mng-3118");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3122ActiveProfilesNoDuplicatesTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -46,7 +45,7 @@ public MavenITmng3122ActiveProfilesNoDuplicatesTest() {
      */
     @Test
     public void testitMNG3122() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3122");
+        File testDir = extractResources("/mng-3122");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3133UrlNormalizationNotBeforeInterpolationTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -46,7 +45,7 @@ public MavenITmng3133UrlNormalizationNotBeforeInterpolationTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3133");
+        File testDir = extractResources("/mng-3133");
 
         Verifier verifier = newVerifier(new File(testDir, "child").getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3139UseCachedMetadataOfBlacklistedRepoTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Collections;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -43,7 +42,7 @@ public MavenITmng3139UseCachedMetadataOfBlacklistedRepoTest() {
      */
     @Test
     public void testitMNG3139() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3139");
+        File testDir = extractResources("/mng-3139");
 
         // phase 1: get the metadata into the local repo
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3183LoggingToFileTest.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.Iterator;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
@@ -50,7 +49,7 @@ public MavenITmng3183LoggingToFileTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3183");
+        File testDir = extractResources("/mng-3183");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3203DefaultLifecycleExecIdTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -42,7 +41,7 @@ public MavenITmng3203DefaultLifecycleExecIdTest() {
     public void testitMNG3203() throws Exception {
         // The testdir is computed from the location of this
         // file.
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3203");
+        File testDir = extractResources("/mng-3203");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3208ProfileAwareReactorSortingTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.Arrays;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -45,7 +44,7 @@ public MavenITmng3208ProfileAwareReactorSortingTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3208");
+        File testDir = extractResources("/mng-3208");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3217InterPluginDependencyTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -43,7 +42,7 @@ public MavenITmng3217InterPluginDependencyTest() {
      */
     @Test
     public void testitMNG3217() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3217");
+        File testDir = extractResources("/mng-3217");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3259DepsDroppedInMultiModuleBuildTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -40,7 +39,7 @@ public MavenITmng3259DepsDroppedInMultiModuleBuildTest() {
 
     @Test
     public void testitMNG3259() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3259");
+        File testDir = extractResources("/mng-3259");
 
         Verifier verifier;
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3268MultipleHyphenPCommandLineTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -36,7 +35,7 @@ public MavenITmng3268MultipleHyphenPCommandLineTest() {
 
     @Test
     public void testMultipleProfileParams() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3268");
+        File testDir = extractResources("/mng-3268");
 
         Verifier verifier;
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3284UsingCachedPluginsTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -41,7 +40,7 @@ public MavenITmng3284UsingCachedPluginsTest() {
      */
     @Test
     public void testitMNG3284() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3284");
+        File testDir = extractResources("/mng-3284");
 
         /*
          * Phase 1: Ensure both plugin versions are already in the local repo. This is a crucial prerequisite for the

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3288SystemScopeDirTest.java
Patch:
@@ -20,8 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.VerificationException;
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertThrows;
@@ -43,7 +41,7 @@ public MavenITmng3288SystemScopeDirTest() {
      */
     @Test
     public void testitMNG3288() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3288");
+        File testDir = extractResources("/mng-3288");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3297DependenciesNotLeakedToMojoTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.List;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -46,7 +45,7 @@ public MavenITmng3297DependenciesNotLeakedToMojoTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3297");
+        File testDir = extractResources("/mng-3297");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3314OfflineSnapshotsTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -44,7 +43,7 @@ public MavenITmng3314OfflineSnapshotsTest() {
      */
     @Test
     public void testitMNG3314() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3314");
+        File testDir = extractResources("/mng-3314");
 
         {
             // phase 1: run build in online mode to fill local repo

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3331ModulePathNormalizationTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -37,7 +36,7 @@ public MavenITmng3331ModulePathNormalizationTest() {
     @Test
     public void testitMNG3331a() throws Exception {
         // testMNG3331ModuleWithSpaces
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3331/with-spaces");
+        File testDir = extractResources("/mng-3331/with-spaces");
 
         Verifier verifier;
 
@@ -61,7 +60,7 @@ public void testitMNG3331a() throws Exception {
     @Test
     public void testitMNG3331b() throws Exception {
         // testMNG3331ModuleWithRelativeParentDirRef
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3331/with-relative-parentDir-ref");
+        File testDir = extractResources("/mng-3331/with-relative-parentDir-ref");
 
         Verifier verifier;
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3355TranslatedPathInterpolationTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -35,7 +34,7 @@ public MavenITmng3355TranslatedPathInterpolationTest() {
 
     @Test
     public void testitMNG3355() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3355");
+        File testDir = extractResources("/mng-3355");
 
         Verifier verifier;
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3372DirectInvocationOfPluginsTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -38,7 +37,7 @@ public MavenITmng3372DirectInvocationOfPluginsTest() {
     public void testitMNG3372() throws Exception {
         // The testdir is computed from the location of this
         // file.
-        File testBaseDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3372/direct-using-prefix");
+        File testBaseDir = extractResources("/mng-3372/direct-using-prefix");
         File plugin = new File(testBaseDir, "plugin");
         File project = new File(testBaseDir, "project");
         File settingsFile = new File(testBaseDir, "settings.xml");
@@ -67,7 +66,7 @@ public void testitMNG3372() throws Exception {
     public void testDependencyTreeInvocation() throws Exception {
         // The testdir is computed from the location of this
         // file.
-        File testBaseDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3372/dependency-tree");
+        File testBaseDir = extractResources("/mng-3372/dependency-tree");
 
         Verifier verifier = newVerifier(testBaseDir.getAbsolutePath());
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3379ParallelArtifactDownloadsTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -46,7 +45,7 @@ public MavenITmng3379ParallelArtifactDownloadsTest() {
      */
     @Test
     public void testitMNG3379() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3379");
+        File testDir = extractResources("/mng-3379");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3380ManagedRelocatedTransdepsTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -51,7 +50,7 @@ public MavenITmng3380ManagedRelocatedTransdepsTest() {
      */
     @Test
     public void testitMNG3380() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3380");
+        File testDir = extractResources("/mng-3380");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3401CLIDefaultExecIdTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -61,7 +60,7 @@ public void testitWithPluginManagement() throws Exception {
     }
 
     private void testit(String project) throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3401/" + project);
+        File testDir = extractResources("/mng-3401/" + project);
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3415JunkRepositoryMetadataTest.java
Patch:
@@ -29,7 +29,6 @@
 import java.util.Map;
 import java.util.concurrent.ConcurrentLinkedDeque;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.eclipse.jetty.server.Handler;
 import org.eclipse.jetty.server.NetworkConnector;
 import org.eclipse.jetty.server.Request;
@@ -83,7 +82,7 @@ public MavenITmng3415JunkRepositoryMetadataTest() {
     public void testitTransferFailed() throws Exception {
         String methodName = getMethodName();
 
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), RESOURCE_BASE);
+        File testDir = extractResources(RESOURCE_BASE);
 
         Verifier verifier;
 
@@ -154,7 +153,7 @@ private String getMethodName() {
     public void testShouldNotRepeatedlyUpdateOnResourceNotFoundException() throws Exception {
         String methodName = getMethodName();
 
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), RESOURCE_BASE);
+        File testDir = extractResources(RESOURCE_BASE);
 
         Verifier verifier;
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3422ActiveComponentCollectionTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertNotEquals;
@@ -45,7 +44,7 @@ public MavenITmng3422ActiveComponentCollectionTest() {
      */
     @Test
     public void testitMNG3422() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3422");
+        File testDir = extractResources("/mng-3422");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3441MetadataUpdatedFromDeploymentRepositoryTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.io.FileReader;
 import java.io.IOException;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.codehaus.plexus.util.FileUtils;
 import org.codehaus.plexus.util.xml.Xpp3Dom;
 import org.codehaus.plexus.util.xml.Xpp3DomBuilder;
@@ -43,7 +42,7 @@ public MavenITmng3441MetadataUpdatedFromDeploymentRepositoryTest() {
 
     @Test
     public void testitMNG3441() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3441");
+        File testDir = extractResources("/mng-3441");
 
         File targetRepository = new File(testDir, "target-repo");
         FileUtils.deleteDirectory(targetRepository);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3470StrictChecksumVerificationOfDependencyPomTest.java
Patch:
@@ -20,8 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.VerificationException;
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -42,7 +40,7 @@ public MavenITmng3470StrictChecksumVerificationOfDependencyPomTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3470");
+        File testDir = extractResources("/mng-3470");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3475BaseAlignedDirTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.io.IOException;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -47,7 +46,7 @@ public MavenITmng3475BaseAlignedDirTest() {
      */
     @Test
     public void testitMNG3475() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3475");
+        File testDir = extractResources("/mng-3475");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3477DependencyResolutionErrorMessageTest.java
Patch:
@@ -23,8 +23,6 @@
 import java.util.List;
 import java.util.Map;
 
-import org.apache.maven.shared.verifier.VerificationException;
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.eclipse.jetty.server.NetworkConnector;
 import org.eclipse.jetty.server.Server;
 import org.junit.jupiter.api.Test;
@@ -48,7 +46,7 @@ public MavenITmng3477DependencyResolutionErrorMessageTest() {
      * @throws Exception in case of failure
      */
     void testit(int port, String[] logExpectPatterns, String projectFile) throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3477");
+        File testDir = extractResources("/mng-3477");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath(), "");
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3482DependencyPomInterpolationTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -40,7 +39,7 @@ public MavenITmng3482DependencyPomInterpolationTest() {
 
     @Test
     public void testitMNG3482() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3482");
+        File testDir = extractResources("/mng-3482");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3485OverrideWagonExtensionTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -35,7 +34,7 @@ public MavenITmng3485OverrideWagonExtensionTest() {
 
     @Test
     public void testitMNG3485() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3485");
+        File testDir = extractResources("/mng-3485");
 
         Verifier verifier;
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3498ForkToOtherMojoTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -41,7 +40,7 @@ public MavenITmng3498ForkToOtherMojoTest() {
     public void testitMNG3498() throws Exception {
         // The testdir is computed from the location of this
         // file.
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3498");
+        File testDir = extractResources("/mng-3498");
 
         File pluginDir = new File(testDir, "maven-mng3498-plugin");
         File projectDir = new File(testDir, "mng-3498-project");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3503Xpp3ShadingTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.nio.file.Files;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -38,7 +37,7 @@ public MavenITmng3503Xpp3ShadingTest() {
 
     @Test
     public void testitMNG3503NoLinkageErrors() throws Exception {
-        File dir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3503/mng-3503-xpp3Shading-pu11");
+        File dir = extractResources("/mng-3503/mng-3503-xpp3Shading-pu11");
 
         Verifier verifier;
 
@@ -54,7 +53,7 @@ public void testitMNG3503NoLinkageErrors() throws Exception {
 
     @Test
     public void testitMNG3503Xpp3Shading() throws Exception {
-        File dir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3503/mng-3503-xpp3Shading-pu-new");
+        File dir = extractResources("/mng-3503/mng-3503-xpp3Shading-pu-new");
         Verifier verifier = newVerifier(dir.getAbsolutePath());
 
         verifier.addCliArgument("validate");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3506ArtifactHandlersFromPluginsTest.java
Patch:
@@ -21,8 +21,6 @@
 import java.io.File;
 import java.io.IOException;
 
-import org.apache.maven.shared.verifier.VerificationException;
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertFalse;
@@ -49,7 +47,7 @@ public MavenITmng3506ArtifactHandlersFromPluginsTest() {
 
     @Test
     public void testProjectPackagingUsage() throws IOException, VerificationException {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/" + AID);
+        File testDir = extractResources("/" + AID);
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3529QuotedCliArgTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -44,7 +43,7 @@ public MavenITmng3529QuotedCliArgTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3529");
+        File testDir = extractResources("/mng-3529");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setForkJvm(true); // NOTE: We want to go through the launcher script

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3535SelfReferentialPropertiesTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertThrows;
@@ -36,7 +35,7 @@ public MavenITmng3535SelfReferentialPropertiesTest() {
 
     @Test
     public void testitMNG3535_ShouldSucceed() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3535/success");
+        File testDir = extractResources("/mng-3535/success");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
 
@@ -61,7 +60,7 @@ public void testitMNG3535_ShouldSucceed() throws Exception {
 
     @Test
     public void testitMNG3535_ShouldFail() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3535/failure");
+        File testDir = extractResources("/mng-3535/failure");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3536AppendedAbsolutePathsTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -36,7 +35,7 @@ public MavenITmng3536AppendedAbsolutePathsTest() {
 
     @Test
     public void testitMNG3536() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3536");
+        File testDir = extractResources("/mng-3536");
         File pluginDir = new File(testDir, "plugin");
         Verifier verifier = newVerifier(pluginDir.getAbsolutePath());
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3575HexadecimalOctalPluginParameterConfigTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -42,7 +41,7 @@ public MavenITmng3575HexadecimalOctalPluginParameterConfigTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3575");
+        File testDir = extractResources("/mng-3575");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3581PluginUsesWagonDependencyTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -42,7 +41,7 @@ public MavenITmng3581PluginUsesWagonDependencyTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3581");
+        File testDir = extractResources("/mng-3581");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3586SystemScopePluginDependencyTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -46,7 +45,7 @@ public MavenITmng3586SystemScopePluginDependencyTest() {
      */
     @Test
     public void testitFromPlugin() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3586/test-1");
+        File testDir = extractResources("/mng-3586/test-1");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);
@@ -72,7 +71,7 @@ public void testitFromPlugin() throws Exception {
      */
     @Test
     public void testitFromProject() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3586/test-2");
+        File testDir = extractResources("/mng-3586/test-2");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3599useHttpProxyForWebDAVMk2Test.java
Patch:
@@ -25,7 +25,6 @@
 import java.io.IOException;
 import java.nio.file.Files;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.codehaus.plexus.util.StringUtils;
 import org.eclipse.jetty.server.Handler;
 import org.eclipse.jetty.server.NetworkConnector;
@@ -133,7 +132,7 @@ protected void tearDown() throws Exception {
 
     @Test
     public void testitUseHttpProxyForHttp() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3599-mk2");
+        File testDir = extractResources("/mng-3599-mk2");
 
         /*
          * NOTE: Make sure the WebDAV extension required by the test project has been pulled down into the local
@@ -175,7 +174,7 @@ public void testitUseHttpProxyForHttp() throws Exception {
      */
     @Test
     public void testitUseHttpProxyForWebDAV() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3599-mk2");
+        File testDir = extractResources("/mng-3599-mk2");
 
         /*
          * NOTE: Make sure the WebDAV extension required by the test project has been pulled down into the local

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3607ClassLoadersUseValidUrlsTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.net.URI;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertNotNull;
@@ -47,7 +46,7 @@ public MavenITmng3607ClassLoadersUseValidUrlsTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3607");
+        File testDir = extractResources("/mng-3607");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3621UNCInheritedPathsTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -45,7 +44,7 @@ public MavenITmng3621UNCInheritedPathsTest() {
      */
     @Test
     public void testitMNG3621() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3621");
+        File testDir = extractResources("/mng-3621");
 
         Verifier verifier = newVerifier(new File(testDir, "child").getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3641ProfileActivationWarningTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.List;
 import java.util.regex.Pattern;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertNotNull;
@@ -41,7 +40,7 @@ public MavenITmng3641ProfileActivationWarningTest() {
     @Test
     public void testitMNG3641() throws Exception {
         // (0) Initialize.
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3641");
+        File testDir = extractResources("/mng-3641");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3642DynamicResourcesTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -43,7 +42,7 @@ public MavenITmng3642DynamicResourcesTest() {
     public void testitMNG3642() throws Exception {
         // The testdir is computed from the location of this
         // file.
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3642");
+        File testDir = extractResources("/mng-3642");
 
         Verifier verifier;
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3645POMSyntaxErrorTest.java
Patch:
@@ -20,8 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.VerificationException;
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -46,7 +44,7 @@ public MavenITmng3645POMSyntaxErrorTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3645");
+        File testDir = extractResources("/mng-3645");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3667ResolveDepsWithBadPomVersionTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -47,7 +46,7 @@ public MavenITmng3667ResolveDepsWithBadPomVersionTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3667");
+        File testDir = extractResources("/mng-3667");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3671PluginLevelDepInterpolationTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -43,7 +42,7 @@ public MavenITmng3671PluginLevelDepInterpolationTest() {
     public void testitMNG3671() throws Exception {
         // The testdir is computed from the location of this
         // file.
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3671");
+        File testDir = extractResources("/mng-3671");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3679PluginExecIdInterpolationTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -38,7 +37,7 @@ public MavenITmng3679PluginExecIdInterpolationTest() {
 
     @Test
     public void testitMNG3679() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3679");
+        File testDir = extractResources("/mng-3679");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3680InvalidDependencyPOMTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -44,7 +43,7 @@ public MavenITmng3680InvalidDependencyPOMTest() {
      */
     @Test
     public void testitMNG3680() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3680");
+        File testDir = extractResources("/mng-3680");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3684BuildPluginParameterTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -37,7 +36,7 @@ public MavenITmng3684BuildPluginParameterTest() {
 
     @Test
     public void testitMNG3684() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3684");
+        File testDir = extractResources("/mng-3684");
         File pluginDir = new File(testDir, "maven-mng3684-plugin");
         File projectDir = new File(testDir, "project");
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3693PomFileBasedirChangeTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.codehaus.plexus.util.FileUtils;
 import org.junit.jupiter.api.Test;
 
@@ -40,7 +39,7 @@ public MavenITmng3693PomFileBasedirChangeTest() {
 
     @Test
     public void testitMNG3693() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3693");
+        File testDir = extractResources("/mng-3693");
 
         File pluginDir = new File(testDir, "maven-mng3693-plugin");
         File projectsDir = new File(testDir, "projects");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3694ReactorProjectsDynamismTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -37,7 +36,7 @@ public MavenITmng3694ReactorProjectsDynamismTest() {
 
     @Test
     public void testitMNG3694() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3694");
+        File testDir = extractResources("/mng-3694");
 
         File pluginDir = new File(testDir, "maven-mng3694-plugin");
         File projectDir = new File(testDir, "projects");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3701ImplicitProfileIdTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -43,7 +42,7 @@ public MavenITmng3701ImplicitProfileIdTest() {
      */
     @Test
     public void testitMNG3701() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3701");
+        File testDir = extractResources("/mng-3701");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3703ExecutionProjectWithRelativePathsTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -38,7 +37,7 @@ public MavenITmng3703ExecutionProjectWithRelativePathsTest() {
 
     @Test
     public void testForkFromMojo() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3703");
+        File testDir = extractResources("/mng-3703");
         File pluginDir = new File(testDir, "maven-mng3703-plugin");
         File projectDir = new File(testDir, "project");
 
@@ -62,7 +61,7 @@ public void testForkFromMojo() throws Exception {
 
     @Test
     public void testForkFromReport() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3703");
+        File testDir = extractResources("/mng-3703");
         File pluginDir = new File(testDir, "maven-mng3703-plugin");
         File projectDir = new File(testDir, "project");
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3710PollutedClonedPluginsTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertFalse;
@@ -42,7 +41,7 @@ public MavenITmng3710PollutedClonedPluginsTest() {
 
     @Test
     public void testitMNG3710_POMInheritance() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3710/pom-inheritance");
+        File testDir = extractResources("/mng-3710/pom-inheritance");
         File pluginDir = new File(testDir, "maven-mng3710-pomInheritance-plugin");
         File projectsDir = new File(testDir, "projects");
 
@@ -72,7 +71,7 @@ public void testitMNG3710_POMInheritance() throws Exception {
 
     @Test
     public void testitMNG3710_OriginalModel() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3710/original-model");
+        File testDir = extractResources("/mng-3710/original-model");
         File pluginsDir = new File(testDir, "plugins");
         File projectDir = new File(testDir, "project");
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3714ToolchainsCliOptionTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.Map;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -45,7 +44,7 @@ public MavenITmng3714ToolchainsCliOptionTest() {
      */
     @Test
     public void testitMNG3714() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3714");
+        File testDir = extractResources("/mng-3714");
 
         File javaHome = new File(testDir, "javaHome");
         javaHome.mkdirs();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3716AggregatorForkingTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -39,7 +38,7 @@ public MavenITmng3716AggregatorForkingTest() {
 
     @Test
     public void testitMNG3716() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3716");
+        File testDir = extractResources("/mng-3716");
         File pluginDir = new File(testDir, "maven-mng3716-plugin");
         File projectsDir = new File(testDir, "projects");
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3719PomExecutionOrderingTest.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -47,7 +46,7 @@ public MavenITmng3719PomExecutionOrderingTest() {
      */
     @Test
     public void testitMNG3719() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3719");
+        File testDir = extractResources("/mng-3719");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3723ConcreteParentProjectTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -44,7 +43,7 @@ public MavenITmng3723ConcreteParentProjectTest() {
     public void testitMNG3723() throws Exception {
         // The testdir is computed from the location of this
         // file.
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3723");
+        File testDir = extractResources("/mng-3723");
         File pluginDir = new File(testDir, "maven-mng3723-plugin");
         File projectDir = new File(testDir, "projects");
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3724ExecutionProjectSyncTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -39,7 +38,7 @@ public MavenITmng3724ExecutionProjectSyncTest() {
 
     @Test
     public void testitMNG3724() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3724");
+        File testDir = extractResources("/mng-3724");
         File pluginDir = new File(testDir, "maven-mng3724-plugin");
         File projectDir = new File(testDir, "project");
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3729MultiForkAggregatorsTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -53,7 +52,7 @@ public MavenITmng3729MultiForkAggregatorsTest() {
 
     @Test
     public void testitMNG3729() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3729");
+        File testDir = extractResources("/mng-3729");
         File pluginDir = new File(testDir, "maven-mng3729-plugin");
         File projectDir = new File(testDir, "projects");
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3732ActiveProfilesTest.java
Patch:
@@ -25,7 +25,6 @@
 import java.util.List;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -48,7 +47,7 @@ public MavenITmng3732ActiveProfilesTest() {
      */
     @Test
     public void testitMNG3732() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3732");
+        File testDir = extractResources("/mng-3732");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3740SelfReferentialReactorProjectsTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -41,7 +40,7 @@ public MavenITmng3740SelfReferentialReactorProjectsTest() {
 
     @Test
     public void testitMNG3740() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3740");
+        File testDir = extractResources("/mng-3740");
         File v1 = new File(testDir, "projects.v1");
         File v2 = new File(testDir, "projects.v2");
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3746POMPropertyOverrideTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -40,7 +39,7 @@ public MavenITmng3746POMPropertyOverrideTest() {
     public void testitMNG3746_UsingDefaultSystemProperty() throws Exception {
         // The testdir is computed from the location of this
         // file.
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3746");
+        File testDir = extractResources("/mng-3746");
         File pluginDir = new File(testDir, "maven-mng3746-plugin");
         File projectDir = new File(testDir, "project");
 
@@ -63,7 +62,7 @@ public void testitMNG3746_UsingDefaultSystemProperty() throws Exception {
     public void testitMNG3746_UsingCLIProperty() throws Exception {
         // The testdir is computed from the location of this
         // file.
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3746");
+        File testDir = extractResources("/mng-3746");
         File pluginDir = new File(testDir, "maven-mng3746-plugin");
         File projectDir = new File(testDir, "project");
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3747PrefixedPathExpressionTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -42,7 +41,7 @@ public MavenITmng3747PrefixedPathExpressionTest() {
 
     @Test
     public void testitMNG3747() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3747");
+        File testDir = extractResources("/mng-3747");
 
         Verifier verifier = newVerifier(testDir.getCanonicalPath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3748BadSettingsXmlTest.java
Patch:
@@ -21,8 +21,6 @@
 import java.io.File;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.VerificationException;
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -44,7 +42,7 @@ public MavenITmng3748BadSettingsXmlTest() {
 
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3748");
+        File testDir = extractResources("/mng-3748");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3766ToolchainsFromExtensionTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -44,7 +43,7 @@ public MavenITmng3766ToolchainsFromExtensionTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3766");
+        File testDir = extractResources("/mng-3766");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3769ExclusionRelocatedTransdepsTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.Collections;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -46,7 +45,7 @@ public MavenITmng3769ExclusionRelocatedTransdepsTest() {
      */
     @Test
     public void testitMNG3769() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3769");
+        File testDir = extractResources("/mng-3769");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3775ConflictResolutionBacktrackingTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -73,7 +72,7 @@ public void testitCBA() throws Exception {
      * be revised.
      */
     private void testit(String project) throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3775");
+        File testDir = extractResources("/mng-3775");
 
         Verifier verifier = newVerifier(new File(testDir, project).getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3796ClassImportInconsistencyTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -46,7 +45,7 @@ public MavenITmng3796ClassImportInconsistencyTest() {
      */
     @Test
     public void testitMNG3796() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3796");
+        File testDir = extractResources("/mng-3796");
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);
         verifier.deleteDirectory("target");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3805ExtensionClassPathOrderingTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -47,7 +46,7 @@ public MavenITmng3805ExtensionClassPathOrderingTest() {
      */
     @Test
     public void testitMNG3805() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3805");
+        File testDir = extractResources("/mng-3805");
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);
         verifier.deleteDirectory("target");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3807PluginConfigExpressionEvaluationTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertFalse;
@@ -47,7 +46,7 @@ public MavenITmng3807PluginConfigExpressionEvaluationTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3807");
+        File testDir = extractResources("/mng-3807");
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);
         verifier.deleteDirectory("target");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3808ReportInheritanceOrderingTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -45,7 +44,7 @@ public MavenITmng3808ReportInheritanceOrderingTest() {
      */
     @Test
     public void testitMNG3808() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3808");
+        File testDir = extractResources("/mng-3808");
         testDir = new File(testDir, "child");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3810BadProfileActivationTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -37,7 +36,7 @@ public MavenITmng3810BadProfileActivationTest() {
 
     @Test
     public void testitMNG3810Property() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3810/property");
+        File testDir = extractResources("/mng-3810/property");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3811ReportingPluginConfigurationInheritanceTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -45,7 +44,7 @@ public MavenITmng3811ReportingPluginConfigurationInheritanceTest() {
      */
     @Test
     public void testitMNG3811() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3811");
+        File testDir = extractResources("/mng-3811");
 
         Verifier verifier = newVerifier(new File(testDir, "child").getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3813PluginClassPathOrderingTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -46,7 +45,7 @@ public MavenITmng3813PluginClassPathOrderingTest() {
      */
     @Test
     public void testitMNG3813() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3813");
+        File testDir = extractResources("/mng-3813");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3814BogusProjectCycleTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -42,7 +41,7 @@ public MavenITmng3814BogusProjectCycleTest() {
      */
     @Test
     public void testitMNG3814() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3814");
+        File testDir = extractResources("/mng-3814");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3821EqualPluginExecIdsTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -43,7 +42,7 @@ public MavenITmng3821EqualPluginExecIdsTest() {
      */
     @Test
     public void testitMNG3821() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3821");
+        File testDir = extractResources("/mng-3821");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3822BasedirAlignedInterpolationTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -46,7 +45,7 @@ public MavenITmng3822BasedirAlignedInterpolationTest() {
      */
     @Test
     public void testitMNG3822() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3822");
+        File testDir = extractResources("/mng-3822");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3827PluginConfigTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -45,7 +44,7 @@ public MavenITmng3827PluginConfigTest() {
      */
     @Test
     public void testitMNG3827() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3827");
+        File testDir = extractResources("/mng-3827");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3831PomInterpolationTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -46,7 +45,7 @@ public MavenITmng3831PomInterpolationTest() {
      */
     @Test
     public void testitMNG3831() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3831");
+        File testDir = extractResources("/mng-3831");
         File child = new File(testDir, "child");
 
         Verifier verifier = newVerifier(child.getAbsolutePath());

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3833PomInterpolationDataFlowChainTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -46,7 +45,7 @@ public MavenITmng3833PomInterpolationDataFlowChainTest() {
      */
     @Test
     public void testitMNG3833() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3833");
+        File testDir = extractResources("/mng-3833");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3836PluginConfigInheritanceTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -45,7 +44,7 @@ public MavenITmng3836PluginConfigInheritanceTest() {
      */
     @Test
     public void testitMNG3836() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3836");
+        File testDir = extractResources("/mng-3836");
 
         Verifier verifier = newVerifier(new File(testDir, "child").getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3838EqualPluginDepsTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -41,7 +40,7 @@ public MavenITmng3838EqualPluginDepsTest() {
      */
     @Test
     public void testitMNG3838() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3838");
+        File testDir = extractResources("/mng-3838");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3839PomParsingCoalesceTextTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -45,7 +44,7 @@ public MavenITmng3839PomParsingCoalesceTextTest() {
      */
     @Test
     public void testitMNG3839() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3839");
+        File testDir = extractResources("/mng-3839");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3843PomInheritanceTest.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.Properties;
 import java.util.TreeSet;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -50,7 +49,7 @@ public MavenITmng3843PomInheritanceTest() {
      */
     @Test
     public void testitMNG3843() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3843");
+        File testDir = extractResources("/mng-3843");
 
         testDir = testDir.getCanonicalFile();
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3845LimitedPomInheritanceTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -45,7 +44,7 @@ public MavenITmng3845LimitedPomInheritanceTest() {
      */
     @Test
     public void testitMNG3845() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3845");
+        File testDir = extractResources("/mng-3845");
 
         Verifier verifier = newVerifier(new File(testDir, "child").getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3846PomInheritanceUrlAdjustmentTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -45,7 +44,7 @@ public MavenITmng3846PomInheritanceUrlAdjustmentTest() {
      */
     @Test
     public void testitOneParent() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3846");
+        File testDir = extractResources("/mng-3846");
 
         Verifier verifier = newVerifier(new File(testDir, "sub").getAbsolutePath());
         verifier.setAutoclean(false);
@@ -78,7 +77,7 @@ public void testitOneParent() throws Exception {
      */
     @Test
     public void testitTwoParents() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3846");
+        File testDir = extractResources("/mng-3846");
 
         Verifier verifier = newVerifier(new File(testDir, "another-parent/sub").getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3852PluginConfigWithHeterogeneousListTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -46,7 +45,7 @@ public MavenITmng3852PluginConfigWithHeterogeneousListTest() {
      */
     @Test
     public void testitMNG3852() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3852");
+        File testDir = extractResources("/mng-3852");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3853ProfileInjectedDistReposTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -49,7 +48,7 @@ public MavenITmng3853ProfileInjectedDistReposTest() {
      */
     @Test
     public void testitMNG3853() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3853");
+        File testDir = extractResources("/mng-3853");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3863AutoPluginGroupIdTest.java
Patch:
@@ -20,8 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.VerificationException;
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
@@ -45,7 +43,7 @@ public MavenITmng3863AutoPluginGroupIdTest() {
      */
     @Test
     public void testitMNG3853() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3863");
+        File testDir = extractResources("/mng-3863");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3864PerExecPluginConfigTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -45,7 +44,7 @@ public MavenITmng3864PerExecPluginConfigTest() {
      */
     @Test
     public void testitMNG3864() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3864");
+        File testDir = extractResources("/mng-3864");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3866PluginConfigInheritanceTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -46,7 +45,7 @@ public MavenITmng3866PluginConfigInheritanceTest() {
      */
     @Test
     public void testitMNG3866() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3866");
+        File testDir = extractResources("/mng-3866");
 
         Verifier verifier = newVerifier(new File(testDir, "sub").getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3872ProfileActivationInRelocatedPomTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertFalse;
@@ -45,7 +44,7 @@ public MavenITmng3872ProfileActivationInRelocatedPomTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3872");
+        File testDir = extractResources("/mng-3872");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3873MultipleExecutionGoalsTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -61,7 +60,7 @@ public void testitWithPluginMngt() throws Exception {
     }
 
     private void testitMNG3873(String project) throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3873");
+        File testDir = extractResources("/mng-3873");
 
         Verifier verifier = newVerifier(new File(testDir, project).getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3877BasedirAlignedModelTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.io.IOException;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -46,7 +45,7 @@ public MavenITmng3877BasedirAlignedModelTest() {
      */
     @Test
     public void testitMNG3877() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3877");
+        File testDir = extractResources("/mng-3877");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3886ExecutionGoalsOrderTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.Arrays;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -62,7 +61,7 @@ public void testitWithPluginMngt() throws Exception {
     }
 
     private void testitMNG3886(String project) throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3886");
+        File testDir = extractResources("/mng-3886");
 
         Verifier verifier = newVerifier(new File(testDir, project).getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3887PluginExecutionOrderTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.Arrays;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -62,7 +61,7 @@ public void testitWithPluginMngt() throws Exception {
     }
 
     private void testitMNG3887(String project) throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3887");
+        File testDir = extractResources("/mng-3887");
 
         Verifier verifier = newVerifier(new File(testDir, project).getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3890TransitiveDependencyScopeUpdateTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
@@ -49,7 +48,7 @@ public MavenITmng3890TransitiveDependencyScopeUpdateTest() {
      */
     @Test
     public void testitMNG3890() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3890");
+        File testDir = extractResources("/mng-3890");
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);
         verifier.deleteDirectory("target");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3892ReleaseDeploymentTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.nio.file.Files;
 import java.util.Locale;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -47,7 +46,7 @@ public MavenITmng3892ReleaseDeploymentTest() {
      */
     @Test
     public void testitMNG3892() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3892");
+        File testDir = extractResources("/mng-3892");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3899ExtensionInheritanceTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -45,7 +44,7 @@ public MavenITmng3899ExtensionInheritanceTest() {
      */
     @Test
     public void testitMNG3899() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3899");
+        File testDir = extractResources("/mng-3899");
 
         Verifier verifier = newVerifier(new File(testDir, "sub").getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3900ProfilePropertiesInterpolationTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -45,7 +44,7 @@ public MavenITmng3900ProfilePropertiesInterpolationTest() {
      */
     @Test
     public void testitMNG3900() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3900");
+        File testDir = extractResources("/mng-3900");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3904NestedBuildDirInterpolationTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -44,7 +43,7 @@ public MavenITmng3904NestedBuildDirInterpolationTest() {
      */
     @Test
     public void testitMNG3904() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3904");
+        File testDir = extractResources("/mng-3904");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3906MergedPluginClassPathOrderingTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -46,7 +45,7 @@ public MavenITmng3906MergedPluginClassPathOrderingTest() {
      */
     @Test
     public void testitMNG3906() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3906");
+        File testDir = extractResources("/mng-3906");
 
         Verifier verifier = newVerifier(new File(testDir, "sub").getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3916PluginExecutionInheritanceTest.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.Collections;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -48,7 +47,7 @@ public MavenITmng3916PluginExecutionInheritanceTest() {
      */
     @Test
     public void testitMNG3916() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3916");
+        File testDir = extractResources("/mng-3916");
 
         Verifier verifier = newVerifier(new File(testDir, "sub").getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3924XmlMarkupInterpolationTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -46,7 +45,7 @@ public MavenITmng3924XmlMarkupInterpolationTest() {
      */
     @Test
     public void testitMNG3924() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3924");
+        File testDir = extractResources("/mng-3924");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3925MergedPluginExecutionOrderTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.Arrays;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -62,7 +61,7 @@ public void testitWithPluginMngt() throws Exception {
     }
 
     private void testitMNG3925(String project) throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3925");
+        File testDir = extractResources("/mng-3925");
 
         Verifier verifier = newVerifier(new File(new File(testDir, project), "sub").getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3927PluginDefaultExecutionConfigTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -43,7 +42,7 @@ public MavenITmng3927PluginDefaultExecutionConfigTest() {
      */
     @Test
     public void testitMNG3927() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3927");
+        File testDir = extractResources("/mng-3927");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3937MergedPluginExecutionGoalsTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.Arrays;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -62,7 +61,7 @@ public void testitWithPluginMngt() throws Exception {
     }
 
     private void testitMNG3937(String project) throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3937");
+        File testDir = extractResources("/mng-3937");
 
         Verifier verifier = newVerifier(new File(new File(testDir, project), "sub").getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3938MergePluginExecutionsTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.Arrays;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -64,7 +63,7 @@ public void testitWithPluginMngt() throws Exception {
     }
 
     private void testitMNG3938(String project) throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3938/" + project);
+        File testDir = extractResources("/mng-3938/" + project);
 
         Verifier verifier = newVerifier(new File(testDir, "sub").getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3940EnvVarInterpolationTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.codehaus.plexus.util.Os;
 import org.junit.jupiter.api.Test;
 
@@ -47,7 +46,7 @@ public MavenITmng3940EnvVarInterpolationTest() {
      */
     @Test
     public void testitMNG3940() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3940");
+        File testDir = extractResources("/mng-3940");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         /*

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3941ExecutionProjectRestrictedToForkingMojoTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -46,7 +45,7 @@ public MavenITmng3941ExecutionProjectRestrictedToForkingMojoTest() {
      */
     @Test
     public void testit() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3941");
+        File testDir = extractResources("/mng-3941");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3943PluginExecutionInheritanceTest.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.Collections;
 import java.util.List;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -48,7 +47,7 @@ public MavenITmng3943PluginExecutionInheritanceTest() {
      */
     @Test
     public void testitMNG3943() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3943");
+        File testDir = extractResources("/mng-3943");
 
         Verifier verifier = newVerifier(new File(testDir, "sub").getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3944BasedirInterpolationTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -43,7 +42,7 @@ public MavenITmng3944BasedirInterpolationTest() {
      */
     @Test
     public void testitMNG3944() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3944");
+        File testDir = extractResources("/mng-3944");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3947PluginDefaultExecutionConfigTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -43,7 +42,7 @@ public MavenITmng3947PluginDefaultExecutionConfigTest() {
      */
     @Test
     public void testitMNG3947() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3947");
+        File testDir = extractResources("/mng-3947");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3948ParentResolutionFromProfileReposTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -44,7 +43,7 @@ public MavenITmng3948ParentResolutionFromProfileReposTest() {
     public void testitFromPom() throws Exception {
         requiresMavenVersion("[2.0,3.0-alpha-1),[3.0-beta-1,)");
 
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3948/test-2");
+        File testDir = extractResources("/mng-3948/test-2");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3951AbsolutePathsTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -44,7 +43,7 @@ public MavenITmng3951AbsolutePathsTest() {
      */
     @Test
     public void testitMNG3951() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3951");
+        File testDir = extractResources("/mng-3951");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3953AuthenticatedDeploymentTest.java
Patch:
@@ -23,7 +23,6 @@
 
 import java.io.File;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.eclipse.jetty.security.ConstraintMapping;
 import org.eclipse.jetty.security.ConstraintSecurityHandler;
 import org.eclipse.jetty.security.HashLoginService;
@@ -142,7 +141,7 @@ public void testitSnapshot() throws Exception {
     }
 
     private void testitMNG3953(String project) throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3953/" + project);
+        File testDir = extractResources("/mng-3953/" + project);
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3955EffectiveSettingsTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -46,7 +45,7 @@ public MavenITmng3955EffectiveSettingsTest() {
      */
     @Test
     public void testitMNG3955() throws Exception {
-        File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-3955");
+        File testDir = extractResources("/mng-3955");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
         verifier.setAutoclean(false);

File: impl/maven-logging/src/main/java/org/apache/maven/logging/api/LogLevelRecorder.java
Patch:
@@ -34,4 +34,6 @@ enum Level {
     Level getMaxLevelAllowed();
 
     void setMaxLevelAllowed(Level level);
+
+    void reset();
 }

File: impl/maven-logging/src/test/java/org/apache/maven/slf4j/MavenLoggerFactoryTest.java
Patch:
@@ -18,6 +18,7 @@
  */
 package org.apache.maven.slf4j;
 
+import org.apache.maven.logging.api.LogLevelRecorder;
 import org.junit.jupiter.api.Test;
 import org.slf4j.Logger;
 
@@ -56,7 +57,7 @@ void loggerCachingWorks() {
     @Test
     void reportsWhenFailOnSeverityThresholdHasBeenHit() {
         MavenLoggerFactory mavenLoggerFactory = new MavenLoggerFactory();
-        mavenLoggerFactory.logLevelRecorder = new DefaultLogLevelRecorder("ERROR");
+        mavenLoggerFactory.logLevelRecorder.setMaxLevelAllowed(LogLevelRecorder.Level.ERROR);
 
         MavenFailOnSeverityLogger logger = (MavenFailOnSeverityLogger) mavenLoggerFactory.getLogger("Test");
         assertFalse(mavenLoggerFactory.logLevelRecorder.metThreshold());

File: impl/maven-executor/src/main/java/org/apache/maven/api/cli/Executor.java
Patch:
@@ -34,7 +34,7 @@ public interface Executor extends AutoCloseable {
     boolean IS_WINDOWS = System.getProperty("os.name", "unknown").startsWith("Windows");
 
     /**
-     * Maven version string returned when the actual version of Maven cannot be determinet.
+     * Maven version string returned when the actual version of Maven cannot be determined.
      */
     String UNKNOWN_VERSION = "unknown";
 
@@ -50,7 +50,7 @@ public interface Executor extends AutoCloseable {
     int execute(@Nonnull ExecutorRequest executorRequest) throws ExecutorException;
 
     /**
-     * Returns the Maven version that provided {@link ExecutorRequest} point at (would use). Please not, that this
+     * Returns the Maven version that provided {@link ExecutorRequest} point at (would use). Please note, that this
      * operation, depending on underlying implementation may be costly. If caller use this method often, it is
      * caller responsibility to properly cache returned values (key can be {@link ExecutorRequest#installationDirectory()}.
      *

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3183LoggingToFileTest.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.List;
 
 import org.apache.maven.shared.verifier.util.ResourceExtractor;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -34,6 +35,8 @@
  *
  * @author Benjamin Bentmann
  */
+@Disabled(
+        "This IT is testing -l, while new Verifier uses same switch to make Maven4 log to file; in short, if that is broken, all ITs would be broken as well")
 public class MavenITmng3183LoggingToFileTest extends AbstractMavenIntegrationTestCase {
 
     public MavenITmng3183LoggingToFileTest() {

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3951AbsolutePathsTest.java
Patch:
@@ -54,8 +54,7 @@ public void testitMNG3951() throws Exception {
          */
         String repoDir = new File(verifier.getLocalRepository()).getAbsolutePath();
         if (getRoot(new File(repoDir)).equals(getRoot(testDir))) {
-            // NOTE: We can only test the local repo if it resides on the same drive as the test
-            verifier.setLocalRepo(repoDir.substring(repoDir.indexOf(File.separator)));
+            verifier.addCliArgument("-Dmaven.repo.local=" + repoDir.substring(repoDir.indexOf(File.separator)));
         }
 
         verifier.setAutoclean(false);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3955EffectiveSettingsTest.java
Patch:
@@ -62,7 +62,7 @@ public void testitMNG3955() throws Exception {
         assertEquals("true", props.getProperty("settings.offline"));
         assertEquals("false", props.getProperty("settings.interactiveMode"));
         assertEquals(
-                new File(verifier.getLocalRepository()).getAbsoluteFile(),
+                new File(verifier.getLocalRepositoryWithSettings("settings.xml")).getAbsoluteFile(),
                 new File(props.getProperty("settings.localRepository")).getAbsoluteFile());
     }
 }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5868NoDuplicateAttachedArtifacts.java
Patch:
@@ -114,7 +114,6 @@ public void testNoDeployNotDuplicate() throws Exception {
         verifier.deleteArtifacts("org.apache.maven.its.mng5868");
         verifier.addCliArgument("-Dartifact.attachedFile=" + tmp.toFile().getCanonicalPath());
         verifier.addCliArgument("-DdeploymentPort=" + port);
-        verifier.displayStreamBuffers();
         verifier.addCliArguments("org.apache.maven.its.plugins:maven-it-plugin-artifact:2.1-SNAPSHOT:attach", "deploy");
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng8106OverlappingDirectoryRolesTest.java
Patch:
@@ -41,22 +41,22 @@ public void testDirectoryOverlap() throws Exception {
         String tailRepo = System.getProperty("user.home") + File.separator + ".m2" + File.separator + "repository";
 
         Verifier verifier = newVerifier(new File(testDir, "plugin").getAbsolutePath());
-        verifier.setLocalRepo(repo);
         verifier.addCliArgument("-X");
+        verifier.addCliArgument("-Dmaven.repo.local=" + repo);
         verifier.addCliArgument("-Dmaven.repo.local.tail=" + tailRepo);
         verifier.addCliArgument("install");
         verifier.execute();
         verifier.verifyErrorFreeLog();
 
         verifier = newVerifier(new File(testDir, "jar").getAbsolutePath());
-        verifier.setLocalRepo(repo);
         verifier.addCliArgument("-X");
+        verifier.addCliArgument("-Dmaven.repo.local=" + repo);
         verifier.addCliArgument("-Dmaven.repo.local.tail=" + tailRepo);
         verifier.addCliArgument("install");
         verifier.execute();
         verifier.verifyErrorFreeLog();
 
-        File metadataFile = new File(new File(verifier.getLocalRepository()), "mng-8106/it/maven-metadata-local.xml");
+        File metadataFile = new File(new File(repo), "mng-8106/it/maven-metadata-local.xml");
         Xpp3Dom dom;
         try (FileReader reader = new FileReader(metadataFile)) {
             dom = Xpp3DomBuilder.build(reader);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng8181CentralRepoTest.java
Patch:
@@ -51,6 +51,7 @@ public void testitModel() throws Exception {
         verifier.addCliArgument("-Dmaven.repo.local.tail=target/null");
         verifier.addCliArgument("-Dmaven.repo.central=http://repo1.maven.org/");
         verifier.addCliArgument("validate");
+        verifier.setHandleLocalRepoTail(false); // we want isolation to have Maven fail due non-HTTPS repo
         assertThrows(VerificationException.class, verifier::execute);
         verifier.verifyTextInLog("central (http://repo1.maven.org/, default, releases)");
     }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng8331VersionedAndUnversionedDependenciesTest.java
Patch:
@@ -50,7 +50,8 @@ void allDependenciesArePresentInTheProject() throws Exception {
 
         Verifier verifier = new Verifier(testDir.getAbsolutePath());
         verifier.setLogFileName("allDependenciesArePresentInTheProject.txt");
-        verifier.executeGoal("test-compile");
+        verifier.addCliArgument("test-compile");
+        verifier.execute();
 
         verifier.verifyErrorFreeLog();
     }

File: its/core-it-support/maven-it-helper/src/main/java/org/apache/maven/it/AbstractMavenIntegrationTestCase.java
Patch:
@@ -252,7 +252,7 @@ protected Verifier newVerifier(String basedir, boolean debug) throws Verificatio
     }
 
     protected Verifier newVerifier(String basedir, String settings, boolean debug) throws VerificationException {
-        Verifier verifier = new Verifier(basedir, debug);
+        Verifier verifier = new Verifier(basedir);
 
         verifier.setAutoclean(false);
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/TestSuiteOrdering.java
Patch:
@@ -100,6 +100,7 @@ public TestSuiteOrdering() {
          * the tests are to finishing. Newer tests are also more likely to fail, so this is
          * a fail fast technique as well.
          */
+        suite.addTestSuite(MavenITmng8400CanonicalMavenHomeTest.class);
         suite.addTestSuite(MavenITmng8385PropertyContributoSPITest.class);
         suite.addTestSuite(MavenITmng8383UnknownTypeDependenciesTest.class);
         suite.addTestSuite(MavenITmng8379SettingsDecryptTest.class);

File: compat/maven-compat/src/main/java/org/apache/maven/ArtifactFilterManager.java
Patch:
@@ -34,6 +34,7 @@ public interface ArtifactFilterManager {
      * @deprecated use {@code META-INF/maven/extension.xml} to define artifacts exported by Maven core and plugin
      *             extensions.
      */
+    @Deprecated
     ArtifactFilter getArtifactFilter();
 
     /**
@@ -50,6 +51,7 @@ public interface ArtifactFilterManager {
      * @deprecated use {@code META-INF/maven/extension.xml} to define artifacts exported by Maven core and plugin
      *             extensions.
      */
+    @Deprecated
     void excludeArtifact(String artifactId);
 
     Set<String> getCoreArtifactExcludes();

File: compat/maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java
Patch:
@@ -34,6 +34,7 @@
  */
 @Named
 @Singleton
+@Deprecated
 public class DefaultMirrorSelector implements MirrorSelector {
 
     private static final String WILDCARD = "*";

File: compat/maven-embedder/src/test/java/org/apache/maven/cli/CLIManagerDocumentationTest.java
Patch:
@@ -37,6 +37,7 @@
  * Pseudo test to generate documentation fragment about supported CLI options. TODO such documentation generation code
  * should not be necessary as unit test but should be run during site generation (Velocity? Doxia macro?)
  */
+@Deprecated
 class CLIManagerDocumentationTest {
     private static final String LS = System.lineSeparator();
 

File: compat/maven-embedder/src/test/java/org/apache/maven/cli/CLIReportingUtilsTest.java
Patch:
@@ -22,6 +22,7 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
+@Deprecated
 class CLIReportingUtilsTest {
 
     @Test

File: compat/maven-embedder/src/test/java/org/apache/maven/cli/CleanArgumentTest.java
Patch:
@@ -24,6 +24,7 @@
 
 /**
  */
+@Deprecated
 class CleanArgumentTest {
 
     @Test

File: compat/maven-embedder/src/test/java/org/apache/maven/cli/MavenCliTest.java
Patch:
@@ -84,6 +84,7 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;
 
+@Deprecated
 class MavenCliTest {
     private MavenCli cli;
 

File: compat/maven-embedder/src/test/java/org/apache/maven/cli/event/ExecutionEventLoggerTest.java
Patch:
@@ -40,6 +40,7 @@
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.when;
 
+@Deprecated
 class ExecutionEventLoggerTest {
 
     private Logger logger;

File: compat/maven-embedder/src/test/java/org/apache/maven/cli/props/MavenPropertiesLoaderTest.java
Patch:
@@ -32,6 +32,7 @@
 import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 
+@Deprecated
 class MavenPropertiesLoaderTest {
 
     @Test

File: compat/maven-embedder/src/test/java/org/apache/maven/cli/props/MavenPropertiesTest.java
Patch:
@@ -38,6 +38,7 @@
 /**
  * Unit tests on <code>MavenProperties</code>.
  */
+@Deprecated
 public class MavenPropertiesTest {
 
     private static final String LINE_SEPARATOR = System.getProperty("line.separator");

File: compat/maven-embedder/src/test/java/org/apache/maven/cli/transfer/ConsoleMavenTransferListenerTest.java
Patch:
@@ -36,6 +36,7 @@
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
+@Deprecated
 class ConsoleMavenTransferListenerTest {
 
     private CountDownLatch startLatch;

File: compat/maven-embedder/src/test/java/org/apache/maven/cli/transfer/FileSizeFormatTest.java
Patch:
@@ -24,6 +24,7 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 
+@Deprecated
 class FileSizeFormatTest {
 
     @Test

File: compat/maven-embedder/src/test/java/org/apache/maven/cli/transfer/SimplexTransferListenerTest.java
Patch:
@@ -31,6 +31,7 @@
 
 import static org.junit.jupiter.api.Assertions.assertThrows;
 
+@Deprecated
 class SimplexTransferListenerTest {
     @Test
     void cancellation() throws InterruptedException {

File: impl/maven-cli/src/main/java/org/apache/maven/cling/invoker/mvn/MavenInvoker.java
Patch:
@@ -171,7 +171,7 @@ protected BuildEventListener doDetermineBuildEventListener(C context) {
     }
 
     @Override
-    protected void customizeSettingsRequest(C context, SettingsBuilderRequest settingsBuilderRequest) {
+    protected void customizeSettingsRequest(C context, SettingsBuilderRequest settingsBuilderRequest) throws Exception {
         if (context.eventSpyDispatcher != null) {
             context.eventSpyDispatcher.onEvent(settingsBuilderRequest);
         }
@@ -186,7 +186,6 @@ protected void customizeSettingsResult(C context, SettingsBuilderResult settings
 
     protected void toolchains(C context, MavenExecutionRequest request) throws Exception {
         Path userToolchainsFile = null;
-
         if (context.invokerRequest.options().altUserToolchains().isPresent()) {
             userToolchainsFile = context.cwdResolver.apply(
                     context.invokerRequest.options().altUserToolchains().get());
@@ -204,7 +203,6 @@ protected void toolchains(C context, MavenExecutionRequest request) throws Excep
         }
 
         Path installationToolchainsFile = null;
-
         if (context.invokerRequest.options().altInstallationToolchains().isPresent()) {
             installationToolchainsFile = context.cwdResolver.apply(
                     context.invokerRequest.options().altInstallationToolchains().get());

File: impl/maven-cli/src/main/java/org/apache/maven/cling/invoker/LookupContext.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 import java.util.function.Consumer;
 import java.util.function.Function;
 
@@ -72,6 +73,8 @@ protected LookupContext(InvokerRequest invokerRequest) {
 
     // this one "evolves" as process progresses (instance is immutable but instances are replaced)
     public ProtoSession protoSession;
+    // here we track which user properties we pushed to Java System Properties (internal only)
+    public Set<String> pushedUserProperties;
 
     public Logger logger;
     public ILoggerFactory loggerFactory;

File: impl/maven-core/src/main/java/org/apache/maven/execution/ExecutionEvent.java
Patch:
@@ -29,6 +29,9 @@ public interface ExecutionEvent {
 
     /**
      * The possible types of execution events.
+     *
+     * Note: do not modify this enum, or, make sure that this enum and
+     * {@link org.apache.maven.api.EventType} have same elements in same order.
      */
     enum Type {
         ProjectDiscoveryStarted,

File: impl/maven-cli/src/test/java/org/apache/maven/cling/invoker/mvn/forked/ForkedMavenInvokerTest.java
Patch:
@@ -25,16 +25,15 @@
 import org.apache.maven.api.cli.Parser;
 import org.apache.maven.cling.invoker.mvn.MavenInvokerTestSupport;
 import org.apache.maven.cling.invoker.mvn.MavenParser;
-import org.junit.jupiter.api.Disabled;
+import org.junit.jupiter.api.Order;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.io.CleanupMode;
 import org.junit.jupiter.api.io.TempDir;
 
 /**
  * Forked UT: it cannot use jimFS as it runs in child process.
  */
-@Disabled(
-        "The tests reuse properties from the JVM being launched, thus may lead to failures depending on which options are used")
+@Order(300)
 public class ForkedMavenInvokerTest extends MavenInvokerTestSupport {
 
     @Override

File: impl/maven-cli/src/test/java/org/apache/maven/cling/invoker/mvn/local/LocalMavenInvokerTest.java
Patch:
@@ -31,16 +31,16 @@
 import org.apache.maven.cling.invoker.mvn.MavenParser;
 import org.codehaus.plexus.classworlds.ClassWorld;
 import org.junit.jupiter.api.Disabled;
+import org.junit.jupiter.api.Order;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.io.CleanupMode;
 import org.junit.jupiter.api.io.TempDir;
 
 /**
  * Local UT.
  */
-@Disabled(
-        "The tests reuse properties from the JVM being launched, thus may lead to failures depending on which options are used")
-public class DefaultLocalMavenInvokerTest extends MavenInvokerTestSupport {
+@Order(200)
+public class LocalMavenInvokerTest extends MavenInvokerTestSupport {
     @Override
     protected Invoker createInvoker() {
         return new LocalMavenInvoker(ProtoLookup.builder()

File: impl/maven-cli/src/test/java/org/apache/maven/cling/invoker/mvn/resident/ResidentMavenInvokerTest.java
Patch:
@@ -31,16 +31,16 @@
 import org.apache.maven.cling.invoker.mvn.MavenParser;
 import org.codehaus.plexus.classworlds.ClassWorld;
 import org.junit.jupiter.api.Disabled;
+import org.junit.jupiter.api.Order;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.io.CleanupMode;
 import org.junit.jupiter.api.io.TempDir;
 
 /**
  * Resident UT.
  */
-@Disabled(
-        "The tests reuse properties from the JVM being launched, thus may lead to failures depending on which options are used")
-public class DefaultResidentMavenInvokerTest extends MavenInvokerTestSupport {
+@Order(100)
+public class ResidentMavenInvokerTest extends MavenInvokerTestSupport {
 
     @Override
     protected Invoker createInvoker() {

File: impl/maven-executor/src/main/java/org/apache/maven/api/cli/ExecutorException.java
Patch:
@@ -20,7 +20,6 @@
 
 import org.apache.maven.api.annotations.Experimental;
 import org.apache.maven.api.annotations.Nullable;
-import org.apache.maven.api.services.MavenException;
 
 /**
  * Represents an exception that occurs during the execution of a Maven build or command.
@@ -30,7 +29,7 @@
  * @since 4.0.0
  */
 @Experimental
-public class ExecutorException extends MavenException {
+public class ExecutorException extends RuntimeException {
     /**
      * Constructs a new {@code InvokerException} with the specified detail message.
      *

File: src/graph/ReactorGraph.java
Patch:
@@ -42,7 +42,7 @@ public class ReactorGraph {
         CLUSTER_PATTERNS.put("JLine", Pattern.compile("^org\\.jline:.*"));
         CLUSTER_PATTERNS.put("Maven API", Pattern.compile("^org\\.apache\\.maven:maven-api-(?!impl).*"));
         CLUSTER_PATTERNS.put("Maven Resolver", Pattern.compile("^org\\.apache\\.maven\\.resolver:.*"));
-        CLUSTER_PATTERNS.put("Maven Implementation", Pattern.compile("^org\\.apache\\.maven:maven-(impl|di|core|cli|xml|jline|logging):.*"));
+        CLUSTER_PATTERNS.put("Maven Implementation", Pattern.compile("^org\\.apache\\.maven:maven-(impl|di|core|cli|xml|jline|logging|executor):.*"));
         CLUSTER_PATTERNS.put("Maven Compatibility", Pattern.compile("^org\\.apache\\.maven:maven-(artifact|builder-support|compat|embedder|model|model-builder|plugin-api|repository-metadata|resolver-provider|settings|settings-builder|toolchain-builder|toolchain-model):.*"));
         CLUSTER_PATTERNS.put("Sisu", Pattern.compile("(^org\\.eclipse\\.sisu:.*)|(.*:guice:.*)|(.*:javax.inject:.*)|(.*:javax.annotation-api:.*)"));
         CLUSTER_PATTERNS.put("Plexus", Pattern.compile("^org\\.codehaus\\.plexus:.*"));

File: impl/maven-impl/src/main/java/org/apache/maven/internal/impl/model/rootlocator/DefaultRootLocator.java
Patch:
@@ -48,7 +48,7 @@ public DefaultRootLocator() {
 
     @Override
     public Path findRoot(Path basedir) {
-        requireNonNull(basedir, "basedir is null");
+        requireNonNull(basedir, getNoRootMessage());
         Path rootDirectory = basedir;
         while (rootDirectory != null && !isRootDirectory(rootDirectory)) {
             rootDirectory = rootDirectory.getParent();

File: impl/maven-impl/src/test/java/org/apache/maven/internal/impl/model/profile/ConditionProfileActivatorTest.java
Patch:
@@ -33,8 +33,8 @@
 import org.apache.maven.internal.impl.model.DefaultInterpolator;
 import org.apache.maven.internal.impl.model.DefaultPathTranslator;
 import org.apache.maven.internal.impl.model.DefaultProfileActivationContext;
-import org.apache.maven.internal.impl.model.DefaultRootLocator;
 import org.apache.maven.internal.impl.model.ProfileActivationFilePathInterpolator;
+import org.apache.maven.internal.impl.model.rootlocator.DefaultRootLocator;
 import org.eclipse.aether.util.version.GenericVersionScheme;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Disabled;
@@ -57,7 +57,7 @@ void setUp() throws Exception {
         activator = new ConditionProfileActivator(
                 new DefaultVersionParser(new DefaultModelVersionParser(new GenericVersionScheme())),
                 new ProfileActivationFilePathInterpolator(
-                        new DefaultPathTranslator(), bd -> true, new DefaultInterpolator()),
+                        new DefaultPathTranslator(), new FakeRootLocator(), new DefaultInterpolator()),
                 new DefaultRootLocator());
 
         Path file = tempDir.resolve("file.txt");

File: impl/maven-impl/src/test/java/org/apache/maven/internal/impl/model/profile/FileProfileActivatorTest.java
Patch:
@@ -53,7 +53,7 @@ class FileProfileActivatorTest extends AbstractProfileActivatorTest<FileProfileA
     @Override
     void setUp() throws Exception {
         activator = new FileProfileActivator(new ProfileActivationFilePathInterpolator(
-                new DefaultPathTranslator(), bd -> true, new DefaultInterpolator()));
+                new DefaultPathTranslator(), new FakeRootLocator(), new DefaultInterpolator()));
 
         context.setModel(Model.newBuilder().pomFile(tempDir.resolve("pom.xml")).build());
 
@@ -67,8 +67,8 @@ void setUp() throws Exception {
     void testRootDirectoryWithNull() {
         context.setModel(Model.newInstance());
 
-        IllegalStateException e = assertThrows(
-                IllegalStateException.class,
+        NullPointerException e = assertThrows(
+                NullPointerException.class,
                 () -> assertActivation(false, newExistsProfile("${project.rootDirectory}"), context));
         assertEquals(RootLocator.UNABLE_TO_FIND_ROOT_PROJECT_MESSAGE, e.getMessage());
     }

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/ArtifactCoordinatesFactoryRequest.java
Patch:
@@ -167,7 +167,7 @@ public ArtifactCoordinatesFactoryRequest build() {
                     session, groupId, artifactId, version, classifier, extension, type, coordinateString);
         }
 
-        private static class DefaultArtifactFactoryRequestArtifact extends BaseRequest
+        private static class DefaultArtifactFactoryRequestArtifact extends BaseRequest<Session>
                 implements ArtifactCoordinatesFactoryRequest {
             private final String groupId;
             private final String artifactId;

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/ArtifactDeployerRequest.java
Patch:
@@ -101,7 +101,8 @@ public ArtifactDeployerRequest build() {
             return new DefaultArtifactDeployerRequest(session, repository, artifacts, retryFailedDeploymentCount);
         }
 
-        private static class DefaultArtifactDeployerRequest extends BaseRequest implements ArtifactDeployerRequest {
+        private static class DefaultArtifactDeployerRequest extends BaseRequest<Session>
+                implements ArtifactDeployerRequest {
 
             private final RemoteRepository repository;
             private final Collection<ProducedArtifact> artifacts;

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/ArtifactFactoryRequest.java
Patch:
@@ -136,7 +136,8 @@ public ArtifactFactoryRequest build() {
                     session, groupId, artifactId, version, classifier, extension, type);
         }
 
-        private static class DefaultArtifactFactoryRequest extends BaseRequest implements ArtifactFactoryRequest {
+        private static class DefaultArtifactFactoryRequest extends BaseRequest<Session>
+                implements ArtifactFactoryRequest {
             private final String groupId;
             private final String artifactId;
             private final String version;

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/ArtifactInstallerRequest.java
Patch:
@@ -83,7 +83,7 @@ public ArtifactInstallerRequest build() {
             return new DefaultArtifactInstallerRequest(session, artifacts);
         }
 
-        static class DefaultArtifactInstallerRequest extends BaseRequest implements ArtifactInstallerRequest {
+        static class DefaultArtifactInstallerRequest extends BaseRequest<Session> implements ArtifactInstallerRequest {
 
             private final Collection<ProducedArtifact> artifacts;
 

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/ArtifactResolverRequest.java
Patch:
@@ -106,7 +106,8 @@ public ArtifactResolverRequest build() {
             return new DefaultArtifactResolverRequest(session, coordinates, repositories);
         }
 
-        private static class DefaultArtifactResolverRequest extends BaseRequest implements ArtifactResolverRequest {
+        private static class DefaultArtifactResolverRequest extends BaseRequest<Session>
+                implements ArtifactResolverRequest {
             @Nonnull
             private final Collection<? extends ArtifactCoordinates> coordinates;
 

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/DependencyCoordinatesFactoryRequest.java
Patch:
@@ -202,7 +202,7 @@ public DependencyCoordinatesFactoryRequest build() {
                     exclusions);
         }
 
-        private static class DefaultDependencyCoordinatesFactoryRequest extends BaseRequest
+        private static class DefaultDependencyCoordinatesFactoryRequest extends BaseRequest<Session>
                 implements DependencyCoordinatesFactoryRequest {
             private final String groupId;
             private final String artifactId;

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/DependencyResolverRequest.java
Patch:
@@ -360,7 +360,8 @@ public DependencyResolverRequest build() {
                     repositories);
         }
 
-        static class DefaultDependencyResolverRequest extends BaseRequest implements DependencyResolverRequest {
+        static class DefaultDependencyResolverRequest extends BaseRequest<Session>
+                implements DependencyResolverRequest {
             private final RequestType requestType;
             private final Project project;
             private final Artifact rootArtifact;

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/ModelBuilderRequest.java
Patch:
@@ -290,7 +290,7 @@ public ModelBuilderRequest build() {
                     lifecycleBindingsInjector);
         }
 
-        private static class DefaultModelBuilderRequest extends BaseRequest implements ModelBuilderRequest {
+        private static class DefaultModelBuilderRequest extends BaseRequest<Session> implements ModelBuilderRequest {
             private final RequestType requestType;
             private final boolean locationTracking;
             private final boolean recursive;

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/ProjectBuilderRequest.java
Patch:
@@ -125,7 +125,8 @@ public ProjectBuilderRequest build() {
                     session, path, source, allowStubModel, recursive, processPlugins, repositories);
         }
 
-        private static class DefaultProjectBuilderRequest extends BaseRequest implements ProjectBuilderRequest {
+        private static class DefaultProjectBuilderRequest extends BaseRequest<Session>
+                implements ProjectBuilderRequest {
             private final Path path;
             private final Source source;
             private final boolean allowStubModel;

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/VersionRangeResolverRequest.java
Patch:
@@ -94,7 +94,8 @@ public VersionRangeResolverRequest build() {
             return new DefaultVersionResolverRequest(session, artifactCoordinates, repositories);
         }
 
-        private static class DefaultVersionResolverRequest extends BaseRequest implements VersionRangeResolverRequest {
+        private static class DefaultVersionResolverRequest extends BaseRequest<Session>
+                implements VersionRangeResolverRequest {
             private final ArtifactCoordinates artifactCoordinates;
             private final List<RemoteRepository> repositories;
 

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/VersionResolverRequest.java
Patch:
@@ -96,7 +96,8 @@ public VersionResolverRequest build() {
             return new DefaultVersionResolverRequest(session, artifactCoordinates, repositories);
         }
 
-        private static class DefaultVersionResolverRequest extends BaseRequest implements VersionResolverRequest {
+        private static class DefaultVersionResolverRequest extends BaseRequest<Session>
+                implements VersionResolverRequest {
             private final ArtifactCoordinates artifactCoordinates;
             private final List<RemoteRepository> repositories;
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/TestSuiteOrdering.java
Patch:
@@ -100,6 +100,7 @@ public TestSuiteOrdering() {
          * the tests are to finishing. Newer tests are also more likely to fail, so this is
          * a fail fast technique as well.
          */
+        suite.addTestSuite(MavenITmng8385PropertyContributoSPITest.class);
         suite.addTestSuite(MavenITmng8383UnknownTypeDependenciesTest.class);
         suite.addTestSuite(MavenITmng8379SettingsDecryptTest.class);
         suite.addTestSuite(MavenITmng8336UnknownPackagingTest.class);

File: impl/maven-core/src/main/java/org/apache/maven/internal/impl/DefaultTypeRegistry.java
Patch:
@@ -95,8 +95,9 @@ public Type require(String id) {
                         handler.getExtension(),
                         handler.getClassifier(),
                         handler.isIncludesDependencies(),
-                        JavaPathType.CLASSES,
-                        JavaPathType.MODULES);
+                        handler.isAddedToClasspath()
+                                ? new JavaPathType[] {JavaPathType.CLASSES, JavaPathType.MODULES}
+                                : new JavaPathType[] {});
             }
             return type;
         });

File: its/core-it-suite/src/test/java/org/apache/maven/it/TestSuiteOrdering.java
Patch:
@@ -100,6 +100,7 @@ public TestSuiteOrdering() {
          * the tests are to finishing. Newer tests are also more likely to fail, so this is
          * a fail fast technique as well.
          */
+        suite.addTestSuite(MavenITmng8383UnknownTypeDependenciesTest.class);
         suite.addTestSuite(MavenITmng8379SettingsDecryptTest.class);
         suite.addTestSuite(MavenITmng8336UnknownPackagingTest.class);
         suite.addTestSuite(MavenITmng8340GeneratedPomInTargetTest.class);

File: impl/maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java
Patch:
@@ -198,7 +198,7 @@ public SessionBuilder newRepositorySessionBuilder(MavenExecutionRequest request)
         sessionBuilder.setArtifactDescriptorPolicy(new SimpleArtifactDescriptorPolicy(
                 request.isIgnoreMissingArtifactDescriptor(), request.isIgnoreInvalidArtifactDescriptor()));
 
-        VersionFilter versionFilter = buildVersionFilter(mergedProps.get(Constants.MAVEN_VERSION_FILTERS));
+        VersionFilter versionFilter = buildVersionFilter(mergedProps.get(Constants.MAVEN_VERSION_FILTER));
         if (versionFilter != null) {
             sessionBuilder.setVersionFilter(versionFilter);
         }

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/ModelBuilder.java
Patch:
@@ -38,5 +38,5 @@ interface ModelBuilderSession {
         ModelBuilderResult build(ModelBuilderRequest request) throws ModelBuilderException;
     }
 
-    Model buildRawModel(ModelBuilderRequest request);
+    Model buildRawModel(ModelBuilderRequest request) throws ModelBuilderException;
 }

File: impl/maven-core/src/main/java/org/apache/maven/internal/transformation/impl/ConsumerPomBuilder.java
Patch:
@@ -24,7 +24,7 @@
 import java.nio.file.Path;
 
 import org.apache.maven.api.model.Model;
-import org.apache.maven.model.building.ModelBuildingException;
+import org.apache.maven.api.services.ModelBuilderException;
 import org.apache.maven.project.MavenProject;
 import org.eclipse.aether.RepositorySystemSession;
 
@@ -35,5 +35,5 @@
 interface ConsumerPomBuilder {
 
     Model build(RepositorySystemSession session, MavenProject project, Path src)
-            throws ModelBuildingException, IOException, XMLStreamException;
+            throws ModelBuilderException, IOException, XMLStreamException;
 }

File: impl/maven-core/src/main/java/org/apache/maven/internal/transformation/impl/DefaultConsumerPomArtifactTransformer.java
Patch:
@@ -36,8 +36,8 @@
 
 import org.apache.maven.api.feature.Features;
 import org.apache.maven.api.model.Model;
+import org.apache.maven.api.services.ModelBuilderException;
 import org.apache.maven.internal.transformation.ConsumerPomArtifactTransformer;
-import org.apache.maven.model.building.ModelBuildingException;
 import org.apache.maven.model.v4.MavenStaxWriter;
 import org.apache.maven.project.MavenProject;
 import org.apache.maven.project.artifact.ProjectArtifact;
@@ -112,7 +112,7 @@ TransformedArtifact createConsumerPomArtifact(
     }
 
     void transform(MavenProject project, RepositorySystemSession session, Path src, Path tgt)
-            throws ModelBuildingException, XMLStreamException, IOException {
+            throws ModelBuilderException, XMLStreamException, IOException {
         Model model = builder.build(session, project, src);
         write(model, tgt);
     }

File: compat/maven-settings-builder/src/main/java/org/apache/maven/settings/crypto/DefaultSettingsDecrypter.java
Patch:
@@ -46,7 +46,7 @@ public class DefaultSettingsDecrypter implements SettingsDecrypter {
     private final SecDispatcher securityDispatcher;
 
     @Inject
-    public DefaultSettingsDecrypter(SecDispatcher securityDispatcher) {
+    public DefaultSettingsDecrypter(MavenSecDispatcher securityDispatcher) {
         this.securityDispatcher = securityDispatcher;
     }
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4459InMemorySettingsKeptEncryptedTest.java
Patch:
@@ -34,7 +34,7 @@
 public class MavenITmng4459InMemorySettingsKeptEncryptedTest extends AbstractMavenIntegrationTestCase {
 
     public MavenITmng4459InMemorySettingsKeptEncryptedTest() {
-        super("[2.1.0,3.0-alpha-1),[3.0-alpha-5,)");
+        super("[2.1.0,3.0-alpha-1),[3.0-alpha-5,4.0.0-beta-6)");
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/TestSuiteOrdering.java
Patch:
@@ -100,6 +100,7 @@ public TestSuiteOrdering() {
          * the tests are to finishing. Newer tests are also more likely to fail, so this is
          * a fail fast technique as well.
          */
+        suite.addTestSuite(MavenITmng8379SettingsDecryptTest.class);
         suite.addTestSuite(MavenITmng8336UnknownPackagingTest.class);
         suite.addTestSuite(MavenITmng8340GeneratedPomInTargetTest.class);
         suite.addTestSuite(MavenITmng8360SubprojectProfileActivationTest.class);

File: compat/maven-settings-builder/src/main/java/org/apache/maven/settings/crypto/DefaultSettingsDecrypter.java
Patch:
@@ -64,7 +64,8 @@ public SettingsDecryptionResult decrypt(SettingsDecryptionRequest request) {
                 try {
                     if (securityDispatcher.isLegacyEncryptedString(password)) {
                         problems.add(new DefaultSettingsProblem(
-                                "Legacy/insecurely encrypted password detected for server " + server.getId(),
+                                "Pre-Maven 4 legacy encrypted password detected for server " + server.getId()
+                                        + " - configure password encryption with the help of mvnenc to be compatible with Maven 4.",
                                 Severity.WARNING,
                                 "server: " + server.getId(),
                                 -1,

File: impl/maven-cli/src/main/java/org/apache/maven/cling/invoker/ProtoLogger.java
Patch:
@@ -61,7 +61,7 @@ private PrintStream toPsOrDef(OutputStream outputStream, PrintStream def) {
     public void log(Level level, String message, Throwable error) {
         PrintWriter pw = level == Level.ERROR ? err : level == Level.WARN ? out : null;
         if (pw != null) {
-            pw.print(level.name() + " " + message);
+            pw.println(level.name() + " " + message);
             if (error != null) {
                 error.printStackTrace(pw);
             }

File: impl/maven-cli/src/main/java/org/apache/maven/cling/invoker/mvnenc/CommonsCliEncryptOptions.java
Patch:
@@ -35,6 +35,9 @@
 
 import static org.apache.maven.cling.invoker.Utils.createInterpolator;
 
+/**
+ * Implementation of {@link EncryptOptions} (base + mvnenc).
+ */
 public class CommonsCliEncryptOptions extends CommonsCliOptions implements EncryptOptions {
     public static CommonsCliEncryptOptions parse(String[] args) throws ParseException {
         CLIManager cliManager = new CLIManager();

File: impl/maven-cli/src/main/java/org/apache/maven/cling/invoker/mvnenc/Goal.java
Patch:
@@ -22,5 +22,5 @@
  * The mvnenc tool goal.
  */
 public interface Goal {
-    int execute(DefaultEncryptInvoker.LocalContext context) throws Exception;
+    int execute(EncryptContext context) throws Exception;
 }

File: impl/maven-cli/src/main/java/org/apache/maven/cling/invoker/mvnenc/goals/Diag.java
Patch:
@@ -23,10 +23,10 @@
 import javax.inject.Singleton;
 
 import org.apache.maven.api.services.MessageBuilderFactory;
-import org.apache.maven.cling.invoker.mvnenc.DefaultEncryptInvoker;
+import org.apache.maven.cling.invoker.mvnenc.EncryptContext;
 import org.codehaus.plexus.components.secdispatcher.SecDispatcher;
 
-import static org.apache.maven.cling.invoker.mvnenc.DefaultEncryptInvoker.OK;
+import static org.apache.maven.cling.invoker.mvnenc.EncryptInvoker.OK;
 
 /**
  * The "diag" goal.
@@ -40,7 +40,7 @@ public Diag(MessageBuilderFactory messageBuilderFactory, SecDispatcher secDispat
     }
 
     @Override
-    protected int doExecute(DefaultEncryptInvoker.LocalContext context) {
+    protected int doExecute(EncryptContext context) {
         dumpResponse(context, "", secDispatcher.validateConfiguration());
         return OK;
     }

File: impl/maven-cli/src/main/java/org/apache/maven/cling/invoker/mvnenc/goals/Encrypt.java
Patch:
@@ -23,10 +23,10 @@
 import javax.inject.Singleton;
 
 import org.apache.maven.api.services.MessageBuilderFactory;
-import org.apache.maven.cling.invoker.mvnenc.DefaultEncryptInvoker;
+import org.apache.maven.cling.invoker.mvnenc.EncryptContext;
 import org.codehaus.plexus.components.secdispatcher.SecDispatcher;
 
-import static org.apache.maven.cling.invoker.mvnenc.DefaultEncryptInvoker.OK;
+import static org.apache.maven.cling.invoker.mvnenc.EncryptInvoker.OK;
 
 /**
  * The "encrypt" goal.
@@ -40,7 +40,7 @@ public Encrypt(MessageBuilderFactory messageBuilderFactory, SecDispatcher secDis
     }
 
     @Override
-    protected int doExecute(DefaultEncryptInvoker.LocalContext context) throws Exception {
+    protected int doExecute(EncryptContext context) throws Exception {
         String cleartext = context.reader.readLine("Enter the password to encrypt: ", '*');
         context.terminal.writer().println(secDispatcher.encrypt(cleartext, null));
         return OK;

File: compat/maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java
Patch:
@@ -34,6 +34,7 @@
 
 /**
  */
+@Deprecated
 public class CLIManager {
     public static final char ALTERNATE_POM_FILE = 'f';
 

File: compat/maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java
Patch:
@@ -33,6 +33,7 @@
  * Utility class used to report errors, statistics, application version info, etc.
  *
  */
+@Deprecated
 public final class CLIReportingUtils {
     // CHECKSTYLE_OFF: MagicNumber
     public static final long MB = 1024 * 1024;

File: compat/maven-embedder/src/main/java/org/apache/maven/cli/CleanArgument.java
Patch:
@@ -24,6 +24,7 @@
 /**
  * CleanArgument
  */
+@Deprecated
 public class CleanArgument {
     public static String[] cleanArgs(String[] args) {
         try {

File: compat/maven-embedder/src/main/java/org/apache/maven/cli/CliRequest.java
Patch:
@@ -30,6 +30,7 @@
 /**
  * CliRequest
  */
+@Deprecated
 public class CliRequest {
     String[] args;
 

File: compat/maven-embedder/src/main/java/org/apache/maven/cli/ExtensionConfigurationModule.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.maven.model.v4.MavenTransformer;
 import org.codehaus.plexus.configuration.PlexusConfiguration;
 
+@Deprecated
 public class ExtensionConfigurationModule implements Module {
 
     private final CoreExtensionEntry extension;

File: compat/maven-embedder/src/main/java/org/apache/maven/cli/ResolveFile.java
Patch:
@@ -24,6 +24,7 @@
 /**
  * Resolve relative file path against the given base directory
  */
+@Deprecated
 public class ResolveFile {
     public static File resolveFile(File file, String baseDirectory) {
         if (file == null) {

File: compat/maven-embedder/src/main/java/org/apache/maven/cli/configuration/ConfigurationProcessor.java
Patch:
@@ -23,6 +23,7 @@
 /**
  * ConfigurationProcessor
  */
+@Deprecated
 public interface ConfigurationProcessor {
     void process(CliRequest request) throws Exception;
 }

File: compat/maven-embedder/src/main/java/org/apache/maven/cli/configuration/SettingsXmlConfigurationProcessor.java
Patch:
@@ -58,6 +58,7 @@
  */
 @Named(SettingsXmlConfigurationProcessor.HINT)
 @Singleton
+@Deprecated
 public class SettingsXmlConfigurationProcessor implements ConfigurationProcessor {
     public static final String HINT = "settings";
 

File: compat/maven-embedder/src/main/java/org/apache/maven/cli/event/DefaultEventSpyContext.java
Patch:
@@ -26,6 +26,7 @@
 /**
  * DefaultEventSpyContext
  */
+@Deprecated
 public class DefaultEventSpyContext implements EventSpy.Context {
 
     private final Map<String, Object> data = new HashMap<>();

File: compat/maven-embedder/src/main/java/org/apache/maven/cli/event/ExecutionEventLogger.java
Patch:
@@ -46,6 +46,7 @@
  * Logs execution events to logger, eventually user-supplied.
  *
  */
+@Deprecated
 public class ExecutionEventLogger extends AbstractExecutionListener {
     private static final int MAX_LOG_PREFIX_SIZE = 8; // "[ERROR] "
     private static final int PROJECT_STATUS_SUFFIX_SIZE = 20; // "SUCCESS [  0.000 s]"

File: compat/maven-embedder/src/main/java/org/apache/maven/cli/internal/BootstrapCoreExtensionManager.java
Patch:
@@ -87,6 +87,7 @@
 /**
  * BootstrapCoreExtensionManager
  */
+@Deprecated
 @Named
 public class BootstrapCoreExtensionManager {
     public static final String STRATEGY_PARENT_FIRST = "parent-first";

File: compat/maven-embedder/src/main/java/org/apache/maven/cli/internal/ExtensionResolutionException.java
Patch:
@@ -24,6 +24,7 @@
  * Exception occurring trying to resolve a plugin.
  *
  */
+@Deprecated
 public class ExtensionResolutionException extends Exception {
 
     private final CoreExtension extension;

File: compat/maven-embedder/src/main/java/org/apache/maven/cli/logging/Slf4jStdoutLogger.java
Patch:
@@ -28,6 +28,7 @@
 /**
  * @since 3.1.0
  */
+@Deprecated
 public class Slf4jStdoutLogger implements Logger {
     private static final String ERROR = "[ERROR] ";
 

File: compat/maven-embedder/src/main/java/org/apache/maven/cli/props/MavenProperties.java
Patch:
@@ -50,6 +50,7 @@
  * Enhancement of the standard <code>Properties</code>
  * managing the maintain of comments, etc.
  */
+@Deprecated
 public class MavenProperties extends AbstractMap<String, String> {
 
     /** Constant for the supported comment characters.*/

File: compat/maven-embedder/src/main/java/org/apache/maven/cli/props/MavenPropertiesLoader.java
Patch:
@@ -28,6 +28,7 @@
 
 import org.apache.maven.internal.impl.model.DefaultInterpolator;
 
+@Deprecated
 public class MavenPropertiesLoader {
 
     public static final String INCLUDES_PROPERTY = "${includes}"; // includes

File: compat/maven-embedder/src/main/java/org/apache/maven/cli/transfer/AbstractMavenTransferListener.java
Patch:
@@ -31,6 +31,7 @@
 /**
  * AbstractMavenTransferListener
  */
+@Deprecated
 public abstract class AbstractMavenTransferListener extends AbstractTransferListener {
     public static final String STYLE = ".transfer:-faint";
 

File: compat/maven-embedder/src/main/java/org/apache/maven/cli/transfer/ConsoleMavenTransferListener.java
Patch:
@@ -34,6 +34,7 @@
  * <p>
  * This listener is not thread-safe and should be wrapped in the {@link SimplexTransferListener} in a multi-threaded scenario.
  */
+@Deprecated
 public class ConsoleMavenTransferListener extends AbstractMavenTransferListener {
 
     private final Map<TransferResourceIdentifier, TransferResourceAndSize> transfers = new LinkedHashMap<>();

File: compat/maven-embedder/src/main/java/org/apache/maven/cli/transfer/FileSizeFormat.java
Patch:
@@ -30,6 +30,7 @@
  * @see <a
  *      href="https://en.wikipedia.org/wiki/Octet_%28computing%29">https://en.wikipedia.org/wiki/Octet_(computing)</a>
  */
+@Deprecated
 public class FileSizeFormat {
     public enum ScaleUnit {
         BYTE {

File: compat/maven-embedder/src/main/java/org/apache/maven/cli/transfer/QuietMavenTransferListener.java
Patch:
@@ -22,4 +22,5 @@
 
 /**
  */
+@Deprecated
 public class QuietMavenTransferListener extends AbstractTransferListener {}

File: compat/maven-embedder/src/main/java/org/apache/maven/cli/transfer/SimplexTransferListener.java
Patch:
@@ -42,6 +42,7 @@
  *
  * @since 4.0.0
  */
+@Deprecated
 public final class SimplexTransferListener extends AbstractTransferListener {
     private static final Logger LOGGER = LoggerFactory.getLogger(SimplexTransferListener.class);
     private static final int QUEUE_SIZE = 1024;

File: compat/maven-embedder/src/main/java/org/apache/maven/cli/transfer/Slf4jMavenTransferListener.java
Patch:
@@ -28,6 +28,7 @@
 /**
  * Slf4jMavenTransferListener
  */
+@Deprecated
 public class Slf4jMavenTransferListener extends AbstractTransferListener {
 
     protected final Logger out;

File: compat/maven-embedder/src/main/java/org/apache/maven/cli/transfer/TransferResourceIdentifier.java
Patch:
@@ -28,6 +28,7 @@
  * The {@link TransferResource} is not immutable and does not implement {@code Objects#equals} and {@code Objects#hashCode} methods,
  * making it not very suitable for usage in collections.
  */
+@Deprecated
 record TransferResourceIdentifier(String repositoryId, String repositoryUrl, String resourceName, @Nullable File file) {
     TransferResourceIdentifier(TransferResource resource) {
         this(resource.getRepositoryId(), resource.getRepositoryUrl(), resource.getResourceName(), resource.getFile());

File: compat/maven-embedder/src/main/java/org/eclipse/sisu/plexus/PlexusXmlBeanConverter.java
Patch:
@@ -53,6 +53,7 @@
  */
 @Singleton
 @Priority(10)
+@Deprecated
 public final class PlexusXmlBeanConverter implements PlexusBeanConverter {
     // ----------------------------------------------------------------------
     // Constants

File: compat/maven-embedder/src/main/java/org/fusesource/jansi/Ansi.java
Patch:
@@ -28,6 +28,7 @@
  * with maven-shared-utils, while Maven has migrated to JLine (into which Jansi has been merged
  * since JLine 3.25.0).
  */
+@Deprecated
 @SuppressWarnings("unused")
 public class Ansi implements Appendable {
 

File: impl/maven-cli/src/main/java/org/apache/maven/cling/invoker/BaseParser.java
Patch:
@@ -42,9 +42,9 @@
 import org.apache.maven.api.cli.ParserException;
 import org.apache.maven.api.cli.ParserRequest;
 import org.apache.maven.api.cli.extensions.CoreExtension;
-import org.apache.maven.cli.CLIReportingUtils;
-import org.apache.maven.cli.internal.extension.io.CoreExtensionsStaxReader;
-import org.apache.maven.cli.props.MavenPropertiesLoader;
+import org.apache.maven.cling.internal.extension.io.CoreExtensionsStaxReader;
+import org.apache.maven.cling.props.MavenPropertiesLoader;
+import org.apache.maven.cling.utils.CLIReportingUtils;
 import org.apache.maven.properties.internal.EnvironmentUtils;
 import org.apache.maven.properties.internal.SystemProperties;
 

File: impl/maven-cli/src/main/java/org/apache/maven/cling/invoker/CommonsCliOptions.java
Patch:
@@ -34,7 +34,6 @@
 import org.apache.commons.cli.ParseException;
 import org.apache.maven.api.cli.Options;
 import org.apache.maven.api.cli.ParserRequest;
-import org.apache.maven.cli.CleanArgument;
 import org.apache.maven.jline.MessageUtils;
 
 import static java.util.Objects.requireNonNull;

File: impl/maven-cli/src/main/java/org/apache/maven/cling/invoker/PlexusContainerCapsuleFactory.java
Patch:
@@ -37,9 +37,9 @@
 import org.apache.maven.api.cli.extensions.CoreExtension;
 import org.apache.maven.api.services.MessageBuilderFactory;
 import org.apache.maven.api.services.SettingsBuilder;
-import org.apache.maven.cli.ExtensionConfigurationModule;
-import org.apache.maven.cli.internal.BootstrapCoreExtensionManager;
-import org.apache.maven.cli.logging.Slf4jLoggerManager;
+import org.apache.maven.cling.extensions.BootstrapCoreExtensionManager;
+import org.apache.maven.cling.extensions.ExtensionConfigurationModule;
+import org.apache.maven.cling.logging.Slf4jLoggerManager;
 import org.apache.maven.di.Injector;
 import org.apache.maven.execution.DefaultMavenExecutionRequest;
 import org.apache.maven.execution.MavenExecutionRequest;

File: impl/maven-cli/src/main/java/org/apache/maven/cling/invoker/Utils.java
Patch:
@@ -32,7 +32,7 @@
 import org.apache.maven.api.annotations.Nonnull;
 import org.apache.maven.api.annotations.Nullable;
 import org.apache.maven.api.services.model.RootLocator;
-import org.apache.maven.cli.logging.Slf4jConfiguration;
+import org.apache.maven.cling.logging.Slf4jConfiguration;
 import org.apache.maven.execution.MavenExecutionRequest;
 import org.codehaus.plexus.interpolation.AbstractValueSource;
 import org.codehaus.plexus.interpolation.BasicInterpolator;

File: impl/maven-cli/src/main/java/org/apache/maven/cling/invoker/mvn/DefaultMavenInvoker.java
Patch:
@@ -46,11 +46,11 @@
 import org.apache.maven.api.services.ToolchainsBuilderRequest;
 import org.apache.maven.api.services.ToolchainsBuilderResult;
 import org.apache.maven.api.services.model.ModelProcessor;
-import org.apache.maven.cli.CLIReportingUtils;
-import org.apache.maven.cli.event.ExecutionEventLogger;
+import org.apache.maven.cling.event.ExecutionEventLogger;
 import org.apache.maven.cling.invoker.LookupInvoker;
 import org.apache.maven.cling.invoker.ProtoLookup;
 import org.apache.maven.cling.invoker.Utils;
+import org.apache.maven.cling.utils.CLIReportingUtils;
 import org.apache.maven.eventspy.internal.EventSpyDispatcher;
 import org.apache.maven.exception.DefaultExceptionHandler;
 import org.apache.maven.exception.ExceptionHandler;

File: impl/maven-cli/src/main/java/org/apache/maven/cling/invoker/mvnenc/DefaultEncryptInvoker.java
Patch:
@@ -26,9 +26,9 @@
 import org.apache.maven.api.cli.mvnenc.EncryptInvoker;
 import org.apache.maven.api.cli.mvnenc.EncryptInvokerRequest;
 import org.apache.maven.api.cli.mvnenc.EncryptOptions;
-import org.apache.maven.cli.CLIReportingUtils;
 import org.apache.maven.cling.invoker.LookupInvoker;
 import org.apache.maven.cling.invoker.ProtoLookup;
+import org.apache.maven.cling.utils.CLIReportingUtils;
 import org.jline.consoleui.prompt.ConsolePrompt;
 import org.jline.reader.LineReader;
 import org.jline.reader.LineReaderBuilder;

File: impl/maven-cli/src/main/java/org/apache/maven/cling/logging/BaseSlf4jConfiguration.java
Patch:
@@ -16,7 +16,7 @@
  * specific language governing permissions and limitations
  * under the License.
  */
-package org.apache.maven.cli.logging;
+package org.apache.maven.cling.logging;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -29,10 +29,12 @@
 public class BaseSlf4jConfiguration implements Slf4jConfiguration {
     private static final Logger LOGGER = LoggerFactory.getLogger(BaseSlf4jConfiguration.class);
 
+    @Override
     public void setRootLoggerLevel(Level level) {
         LOGGER.warn("setRootLoggerLevel: operation not supported");
     }
 
+    @Override
     public void activate() {
         LOGGER.warn("activate(): operation not supported");
     }

File: impl/maven-cli/src/main/java/org/apache/maven/cling/logging/Slf4jConfiguration.java
Patch:
@@ -16,7 +16,7 @@
  * specific language governing permissions and limitations
  * under the License.
  */
-package org.apache.maven.cli.logging;
+package org.apache.maven.cling.logging;
 
 /**
  * Interface for configuration operations on loggers, which are not available in slf4j, then require per-slf4f-binding

File: impl/maven-cli/src/main/java/org/apache/maven/cling/logging/impl/Log4j2Configuration.java
Patch:
@@ -16,9 +16,9 @@
  * specific language governing permissions and limitations
  * under the License.
  */
-package org.apache.maven.cli.logging.impl;
+package org.apache.maven.cling.logging.impl;
 
-import org.apache.maven.cli.logging.BaseSlf4jConfiguration;
+import org.apache.maven.cling.logging.BaseSlf4jConfiguration;
 
 /**
  * Configuration for slf4j-log4j2.

File: impl/maven-cli/src/main/java/org/apache/maven/cling/logging/impl/LogbackConfiguration.java
Patch:
@@ -16,9 +16,9 @@
  * specific language governing permissions and limitations
  * under the License.
  */
-package org.apache.maven.cli.logging.impl;
+package org.apache.maven.cling.logging.impl;
 
-import org.apache.maven.cli.logging.BaseSlf4jConfiguration;
+import org.apache.maven.cling.logging.BaseSlf4jConfiguration;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: impl/maven-cli/src/main/java/org/apache/maven/cling/logging/impl/MavenSimpleConfiguration.java
Patch:
@@ -16,9 +16,9 @@
  * specific language governing permissions and limitations
  * under the License.
  */
-package org.apache.maven.cli.logging.impl;
+package org.apache.maven.cling.logging.impl;
 
-import org.apache.maven.cli.logging.BaseSlf4jConfiguration;
+import org.apache.maven.cling.logging.BaseSlf4jConfiguration;
 import org.apache.maven.slf4j.MavenLoggerFactory;
 import org.slf4j.ILoggerFactory;
 import org.slf4j.LoggerFactory;

File: impl/maven-cli/src/main/java/org/apache/maven/cling/logging/impl/UnsupportedSlf4jBindingConfiguration.java
Patch:
@@ -16,13 +16,13 @@
  * specific language governing permissions and limitations
  * under the License.
  */
-package org.apache.maven.cli.logging.impl;
+package org.apache.maven.cling.logging.impl;
 
 import java.net.URL;
 import java.util.Map;
 import java.util.Set;
 
-import org.apache.maven.cli.logging.BaseSlf4jConfiguration;
+import org.apache.maven.cling.logging.BaseSlf4jConfiguration;
 
 /**
  * Pseudo-configuration for unsupported SLF4J binding.

File: impl/maven-impl/src/main/java/org/apache/maven/internal/impl/resolver/DefaultVersionResolver.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.Map;
 import java.util.Objects;
 
+import org.apache.maven.api.Constants;
 import org.apache.maven.api.di.Inject;
 import org.apache.maven.api.di.Named;
 import org.apache.maven.api.di.Singleton;
@@ -104,7 +105,7 @@ public VersionResult resolveVersion(RepositorySystemSession session, VersionRequ
 
         Key cacheKey = null;
         RepositoryCache cache = session.getCache();
-        if (cache != null && !ConfigUtils.getBoolean(session, false, "aether.versionResolver.noCache")) {
+        if (cache != null && !ConfigUtils.getBoolean(session, false, Constants.MAVEN_VERSION_RESOLVER_NO_CACHE)) {
             cacheKey = new Key(session, request);
 
             Object obj = cache.get(session, cacheKey);

File: impl/maven-impl/src/main/java/org/apache/maven/internal/impl/resolver/RemoteSnapshotMetadataGenerator.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.LinkedHashMap;
 import java.util.Map;
 
+import org.apache.maven.api.Constants;
 import org.eclipse.aether.RepositorySystemSession;
 import org.eclipse.aether.artifact.Artifact;
 import org.eclipse.aether.deployment.DeployRequest;
@@ -46,7 +47,7 @@ class RemoteSnapshotMetadataGenerator implements MetadataGenerator {
 
     RemoteSnapshotMetadataGenerator(RepositorySystemSession session, DeployRequest request) {
         timestamp = (Date) ConfigUtils.getObject(session, new Date(), "maven.startTime");
-        Object bn = ConfigUtils.getObject(session, null, "maven.buildNumber");
+        Object bn = ConfigUtils.getObject(session, null, Constants.MAVEN_DEPLOY_SNAPSHOT_BUILD_NUMBER);
         if (bn instanceof Integer) {
             this.buildNumber = (Integer) bn;
         } else if (bn instanceof String) {

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/MessageBuilder.java
Patch:
@@ -98,7 +98,7 @@ default MessageBuilder error(Object message) {
      */
     @Nonnull
     default MessageBuilder success(Object message) {
-        return style("." + Constants.MAVEN_STYLE_DEBUG_NAME + ":-" + Constants.MAVEN_STYLE_DEBUG_DEFAULT, message);
+        return style("." + Constants.MAVEN_STYLE_SUCCESS_NAME + ":-" + Constants.MAVEN_STYLE_SUCCESS_DEFAULT, message);
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng8341DeadlockTest.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.maven.shared.verifier.Verifier;
 import org.apache.maven.shared.verifier.util.ResourceExtractor;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.Timeout;
 
 /**
  * This is a test set for <a href="https://issues.apache.org/jira/browse/MNG-8341">MNG-8341</a>.
@@ -36,6 +37,7 @@ class MavenITmng8341DeadlockTest extends AbstractMavenIntegrationTestCase {
     /**
      *  Verify that the build succeeds
      */
+    @Timeout(value = 60)
     @Test
     void testDeadlock() throws Exception {
         File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-8341-deadlock");

File: its/core-it-suite/src/test/java/org/apache/maven/it/TestSuiteOrdering.java
Patch:
@@ -120,6 +120,7 @@ public TestSuiteOrdering() {
          * the tests are to finishing. Newer tests are also more likely to fail, so this is
          * a fail fast technique as well.
          */
+        suite.addTestSuite(MavenITmng8347TransitiveDependencyManagerTest.class);
         suite.addTestSuite(MavenITmng8341DeadlockTest.class);
         suite.addTestSuite(MavenITmng8331VersionedAndUnversionedDependenciesTest.class);
         suite.addTestSuite(MavenITmng8299CustomLifecycleTest.class);

File: src/graph/ReactorGraph.java
Patch:
@@ -42,7 +42,7 @@ public class ReactorGraph {
         CLUSTER_PATTERNS.put("JLine", Pattern.compile("^org\\.jline:.*"));
         CLUSTER_PATTERNS.put("Maven API", Pattern.compile("^org\\.apache\\.maven:maven-api-(?!impl).*"));
         CLUSTER_PATTERNS.put("Maven Resolver", Pattern.compile("^org\\.apache\\.maven\\.resolver:.*"));
-        CLUSTER_PATTERNS.put("Maven Implementation", Pattern.compile("^org\\.apache\\.maven:maven-(api-impl|di|core|cli|xml-impl|jline|logging):.*"));
+        CLUSTER_PATTERNS.put("Maven Implementation", Pattern.compile("^org\\.apache\\.maven:maven-(impl|di|core|cli|xml|jline|logging):.*"));
         CLUSTER_PATTERNS.put("Maven Compatibility", Pattern.compile("^org\\.apache\\.maven:maven-(artifact|builder-support|compat|embedder|model|model-builder|plugin-api|repository-metadata|resolver-provider|settings|settings-builder|toolchain-builder|toolchain-model):.*"));
         CLUSTER_PATTERNS.put("Sisu", Pattern.compile("(^org\\.eclipse\\.sisu:.*)|(.*:guice:.*)|(.*:javax.inject:.*)|(.*:javax.annotation-api:.*)"));
         CLUSTER_PATTERNS.put("Plexus", Pattern.compile("^org\\.codehaus\\.plexus:.*"));

File: maven-api-impl/src/main/java/org/apache/maven/internal/impl/model/DefaultModelBuilder.java
Patch:
@@ -921,7 +921,7 @@ private Model readParentLocally(Model childModel) throws ModelBuilderException {
             if (candidateSource == null) {
                 candidateSource = resolveReactorModel(parent.getGroupId(), parent.getArtifactId(), parent.getVersion());
             }
-            if (candidateSource == null) {
+            if (candidateSource == null && parentPath == null) {
                 candidateSource = request.getSource().resolve(modelProcessor::locateExistingPom, "..");
             }
 

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/concurrent/BuildPlanExecutor.java
Patch:
@@ -53,6 +53,7 @@
 import org.apache.maven.execution.ProjectExecutionEvent;
 import org.apache.maven.execution.ProjectExecutionListener;
 import org.apache.maven.internal.MultilineMessageHelper;
+import org.apache.maven.internal.impl.DefaultLifecycleRegistry;
 import org.apache.maven.internal.impl.util.PhasingExecutor;
 import org.apache.maven.internal.transformation.ConsumerPomArtifactTransformer;
 import org.apache.maven.internal.xml.XmlNodeImpl;
@@ -62,7 +63,6 @@
 import org.apache.maven.lifecycle.MojoExecutionConfigurator;
 import org.apache.maven.lifecycle.internal.BuildThreadFactory;
 import org.apache.maven.lifecycle.internal.CompoundProjectExecutionListener;
-import org.apache.maven.lifecycle.internal.DefaultLifecyclePluginAnalyzer;
 import org.apache.maven.lifecycle.internal.ExecutionEventCatapult;
 import org.apache.maven.lifecycle.internal.GoalTask;
 import org.apache.maven.lifecycle.internal.LifecycleTask;
@@ -238,7 +238,7 @@ public BuildPlan buildInitialPlan(List<TaskSegment> taskSegments) {
         }
 
         private void checkUnboundVersions(BuildPlan buildPlan) {
-            String defaulModelId = DefaultLifecyclePluginAnalyzer.DEFAULTLIFECYCLEBINDINGS_MODELID;
+            String defaulModelId = DefaultLifecycleRegistry.DEFAULT_LIFECYCLE_MODELID;
             List<String> unversionedPlugins = buildPlan
                     .allSteps()
                     .flatMap(step -> step.mojos.values().stream().flatMap(map -> map.values().stream()))

File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifecycleExecutionPlanCalculatorStub.java
Patch:
@@ -25,12 +25,12 @@
 import java.util.Set;
 
 import org.apache.maven.execution.MavenSession;
+import org.apache.maven.internal.impl.DefaultLifecycleRegistry;
 import org.apache.maven.internal.xml.XmlNodeImpl;
 import org.apache.maven.lifecycle.DefaultLifecycles;
 import org.apache.maven.lifecycle.LifecycleNotFoundException;
 import org.apache.maven.lifecycle.LifecyclePhaseNotFoundException;
 import org.apache.maven.lifecycle.MavenExecutionPlan;
-import org.apache.maven.lifecycle.internal.DefaultLifecyclePluginAnalyzer;
 import org.apache.maven.lifecycle.internal.ExecutionPlanItem;
 import org.apache.maven.lifecycle.internal.LifecycleExecutionPlanCalculator;
 import org.apache.maven.lifecycle.internal.ProjectBuildList;
@@ -210,7 +210,7 @@ private static DefaultLifecycles getDefaultLifecycles() {
 
     private static MojoExecution createMojoExecution(String goal, String executionId, MojoDescriptor mojoDescriptor) {
         InputSource defaultBindings = new InputSource();
-        defaultBindings.setModelId(DefaultLifecyclePluginAnalyzer.DEFAULTLIFECYCLEBINDINGS_MODELID);
+        defaultBindings.setModelId(DefaultLifecycleRegistry.DEFAULT_LIFECYCLE_MODELID);
 
         final Plugin plugin = mojoDescriptor.getPluginDescriptor().getPlugin();
         plugin.setLocation("version", new InputLocation(12, 34, defaultBindings));

File: maven-embedder/src/main/java/org/apache/maven/cli/transfer/ConsoleMavenTransferListener.java
Patch:
@@ -80,8 +80,9 @@ public void transferProgressed(TransferEvent event) throws TransferCancelledExce
         Iterator<TransferResourceAndSize> entries = transfers.values().iterator();
         while (entries.hasNext()) {
             TransferResourceAndSize entry = entries.next();
-            long total = entry.resource.getContentLength();
-            Long complete = entry.transferredBytes;
+            // just in case, make sure 0 <= complete <= total
+            long complete = Math.max(0, entry.transferredBytes);
+            long total = Math.max(complete, entry.resource.getContentLength());
 
             String resourceName = entry.resource.getResourceName();
 

File: maven-cli/src/main/java/org/apache/maven/cling/invoker/BaseParser.java
Patch:
@@ -111,8 +111,8 @@ public R parse(ParserRequest parserRequest) throws ParserException, IOException
         List<O> parsedOptions = parseCliOptions(context);
 
         // warn about deprecated options
-        parsedOptions.forEach(o -> o.warnAboutDeprecatedOptions(
-                parserRequest, new PrintWriter(parserRequest.out() != null ? parserRequest.out() : System.out, true)));
+        PrintWriter printWriter = new PrintWriter(parserRequest.out() != null ? parserRequest.out() : System.out, true);
+        parsedOptions.forEach(o -> o.warnAboutDeprecatedOptions(parserRequest, printWriter::println));
 
         // assemble options if needed
         context.options = assembleOptions(parsedOptions);

File: maven-cli/src/main/java/org/apache/maven/cling/invoker/LayeredOptions.java
Patch:
@@ -18,12 +18,12 @@
  */
 package org.apache.maven.cling.invoker;
 
-import java.io.PrintWriter;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
+import java.util.function.Consumer;
 import java.util.function.Function;
 
 import org.apache.maven.api.cli.Options;
@@ -138,10 +138,10 @@ public Optional<Boolean> help() {
     }
 
     @Override
-    public void warnAboutDeprecatedOptions(ParserRequest request, PrintWriter printWriter) {}
+    public void warnAboutDeprecatedOptions(ParserRequest request, Consumer<String> printWriter) {}
 
     @Override
-    public void displayHelp(ParserRequest request, PrintWriter printWriter) {
+    public void displayHelp(ParserRequest request, Consumer<String> printWriter) {
         options.get(0).displayHelp(request, printWriter);
     }
 

File: maven-cli/src/main/java/org/apache/maven/cling/invoker/mvn/CommonsCliMavenOptions.java
Patch:
@@ -271,7 +271,6 @@ protected static class CLIManager extends CommonsCliOptions.CLIManager {
         public static final String CHECKSUM_FAILURE_POLICY = "C";
         public static final String CHECKSUM_WARNING_POLICY = "c";
         public static final String FAIL_FAST = "ff";
-        public static final String FAIL_ON_SEVERITY = "fos";
         public static final String FAIL_AT_END = "fae";
         public static final String FAIL_NEVER = "fn";
         public static final String RESUME = "r";

File: maven-core/src/test/java/org/apache/maven/project/PomConstructionTest.java
Patch:
@@ -1355,7 +1355,7 @@ private void testCompleteModel(PomTestWrapper pom) throws Exception {
         assertEquals("project-property", pom.getValue("properties[1]/itProperty"));
         assertEquals("UTF-8", pom.getValue("properties[1]/project.build.sourceEncoding"));
         assertEquals("UTF-8", pom.getValue("properties[1]/project.reporting.outputEncoding"));
-        assertEquals("2001-01-01T00:00:00Z", pom.getValue("properties[1]/project.build.outputTimestamp"));
+        assertEquals("1980-02-01T00:00:00Z", pom.getValue("properties[1]/project.build.outputTimestamp"));
 
         assertEquals(1, ((List<?>) pom.getValue("dependencyManagement/dependencies")).size());
         assertEquals("org.apache.maven.its", pom.getValue("dependencyManagement/dependencies[1]/groupId"));

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3843PomInheritanceTest.java
Patch:
@@ -81,7 +81,7 @@ public void testitMNG3843() throws Exception {
             assertEquals("3", props.getProperty("project.properties"));
             assertEquals("UTF-8", props.getProperty("project.properties.project.build.sourceEncoding"));
             assertEquals("UTF-8", props.getProperty("project.properties.project.reporting.outputEncoding"));
-            assertEquals("2001-01-01T00:00:00Z", props.getProperty("project.properties.project.build.outputTimestamp"));
+            assertEquals("1980-02-01T00:00:00Z", props.getProperty("project.properties.project.build.outputTimestamp"));
         } else if (matchesVersionRange("[4.0.0-alpha-6,4.0.0-beta-4]")) {
             assertEquals("2", props.getProperty("project.properties"));
             assertEquals("UTF-8", props.getProperty("project.properties.project.build.sourceEncoding"));

File: maven-api-impl/src/main/java/org/apache/maven/internal/impl/DefaultSuperPomProvider.java
Patch:
@@ -62,8 +62,8 @@ private Model readModel(String version, String v) {
                     + ", please verify the integrity of your Maven installation");
         }
         try (InputStream is = url.openStream()) {
-            String modelId = "org.apache.maven:maven-model-builder:" + version + "-"
-                    + this.getClass().getPackage().getImplementationVersion() + ":super-pom";
+            String modelId = "org.apache.maven:maven-api-impl:"
+                    + this.getClass().getPackage().getImplementationVersion() + ":super-pom-" + version;
             return modelProcessor.read(XmlReaderRequest.builder()
                     .modelId(modelId)
                     .location(url.toExternalForm())

File: maven-cli/src/main/java/org/apache/maven/cling/invoker/BaseInvokerRequest.java
Patch:
@@ -114,8 +114,8 @@ public Path topDirectory() {
     }
 
     @Override
-    public Path rootDirectory() {
-        return rootDirectory;
+    public Optional<Path> rootDirectory() {
+        return Optional.ofNullable(rootDirectory);
     }
 
     @Override

File: maven-cli/src/main/java/org/apache/maven/cling/invoker/mvn/BaseMavenParser.java
Patch:
@@ -42,8 +42,8 @@ protected List<O> parseCliOptions(LocalContext context) throws ParserException,
         // CLI args
         result.add(parseMavenCliOptions(context.parserRequest.args()));
         // maven.config; if exists
-        Path mavenConfig = context.rootDirectory.resolve(".mvn/maven.config");
-        if (Files.isRegularFile(mavenConfig)) {
+        Path mavenConfig = context.rootDirectory != null ? context.rootDirectory.resolve(".mvn/maven.config") : null;
+        if (mavenConfig != null && Files.isRegularFile(mavenConfig)) {
             result.add(parseMavenConfigOptions(mavenConfig));
         }
         return result;

File: api/maven-api-core/src/main/java/org/apache/maven/api/Session.java
Patch:
@@ -158,6 +158,7 @@ public interface Session {
      * Gets the root directory of the session, which is the root directory for the top directory project.
      *
      * @return the root directory, never {@code null}
+     * @throws IllegalStateException if the root directory could not be found
      * @see #getTopDirectory()
      * @see Project#getRootDirectory()
      * @see Project#isRootProject()

File: maven-api-impl/src/main/java/org/apache/maven/internal/impl/model/rootlocator/DefaultRootLocator.java
Patch:
@@ -53,10 +53,10 @@ public Path findMandatoryRoot(@Nonnull Path basedir) {
         while (rootDirectory != null && !isRootDirectory(rootDirectory)) {
             rootDirectory = rootDirectory.getParent();
         }
-        Optional<Path> rdf = getMultiModuleProjectDirectory();
+        Optional<Path> rdf = getRootDirectoryFallback();
         if (rootDirectory == null) {
+            rootDirectory = rdf.orElseThrow(() -> new IllegalStateException(getNoRootMessage()));
             logger.warn(getNoRootMessage());
-            rootDirectory = rdf.orElseGet(() -> Paths.get("").toAbsolutePath());
         } else {
             if (rdf.isPresent() && !Objects.equals(rootDirectory, rdf.get())) {
                 logger.warn("Project root directory and multiModuleProjectDirectory are not aligned");
@@ -75,7 +75,7 @@ protected boolean isRootDirectory(Path dir) {
         return false;
     }
 
-    protected Optional<Path> getMultiModuleProjectDirectory() {
+    protected Optional<Path> getRootDirectoryFallback() {
         String mmpd = System.getProperty("maven.multiModuleProjectDirectory");
         if (mmpd != null) {
             return Optional.of(Paths.get(mmpd));

File: maven-api-impl/src/test/java/org/apache/maven/internal/impl/standalone/ApiRunner.java
Patch:
@@ -52,7 +52,6 @@
 import org.apache.maven.api.services.RepositoryFactory;
 import org.apache.maven.api.services.SettingsBuilder;
 import org.apache.maven.api.services.TypeRegistry;
-import org.apache.maven.api.services.model.RootLocator;
 import org.apache.maven.api.settings.Settings;
 import org.apache.maven.api.spi.TypeProvider;
 import org.apache.maven.di.Injector;
@@ -156,12 +155,12 @@ public Instant getStartTime() {
 
         @Override
         public Path getTopDirectory() {
-            return Paths.get("");
+            return null;
         }
 
         @Override
         public Path getRootDirectory() {
-            return getService(RootLocator.class).findMandatoryRoot(getTopDirectory());
+            throw new IllegalStateException();
         }
 
         @Override

File: maven-compat/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java
Patch:
@@ -90,7 +90,7 @@ protected File getProject(String name) throws Exception {
     }
 
     protected MavenExecutionRequest createMavenExecutionRequest(File pom) throws Exception {
-        MavenExecutionRequest request = new DefaultMavenExecutionRequest(true)
+        MavenExecutionRequest request = new DefaultMavenExecutionRequest()
                 .setPom(pom)
                 .setProjectPresent(true)
                 .setShowErrors(true)
@@ -102,7 +102,6 @@ protected MavenExecutionRequest createMavenExecutionRequest(File pom) throws Exc
 
         if (pom != null) {
             request.setMultiModuleProjectDirectory(pom.getParentFile());
-            request.setRootDirectory(pom.getParentFile().toPath());
         }
 
         return request;

File: maven-compat/src/test/java/org/apache/maven/project/AbstractMavenProjectTestCase.java
Patch:
@@ -161,7 +161,7 @@ protected void initRepoSession(ProjectBuildingRequest request) throws Exception
         session.setLocalRepositoryManager(new LegacyLocalRepositoryManager(localRepo));
         request.setRepositorySession(session);
 
-        DefaultMavenExecutionRequest mavenExecutionRequest = new DefaultMavenExecutionRequest(true);
+        DefaultMavenExecutionRequest mavenExecutionRequest = new DefaultMavenExecutionRequest();
         MavenSession msession =
                 new MavenSession(getContainer(), session, mavenExecutionRequest, new DefaultMavenExecutionResult());
         DefaultSession iSession = new DefaultSession(

File: maven-compat/src/test/java/org/apache/maven/repository/LegacyRepositorySystemTest.java
Patch:
@@ -123,7 +123,7 @@ void testThatASystemScopedDependencyIsNotResolvedFromRepositories() throws Excep
                 new LocalRepository(request.getLocalRepository().getBasedir());
         session.setLocalRepositoryManager(new SimpleLocalRepositoryManagerFactory().newInstance(session, localRepo));
         LegacySupport legacySupport = container.lookup(LegacySupport.class);
-        DefaultMavenExecutionRequest mavenExecutionRequest = new DefaultMavenExecutionRequest(true);
+        DefaultMavenExecutionRequest mavenExecutionRequest = new DefaultMavenExecutionRequest();
         MavenSession mavenSession =
                 new MavenSession(container, session, mavenExecutionRequest, new DefaultMavenExecutionResult());
         legacySupport.setSession(mavenSession);

File: maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java
Patch:
@@ -21,7 +21,6 @@
 import javax.inject.Inject;
 
 import java.io.File;
-import java.nio.file.Paths;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -91,8 +90,7 @@ protected File getProject(String name) throws Exception {
 
     protected MavenExecutionRequest createMavenExecutionRequest(File pom) throws Exception {
         MavenExecutionRequest request = new DefaultMavenExecutionRequest()
-                .setRootDirectory(
-                        pom != null ? pom.toPath().getParent() : Paths.get("").toAbsolutePath())
+                .setRootDirectory(pom != null ? pom.toPath().getParent() : null)
                 .setPom(pom)
                 .setProjectPresent(true)
                 .setShowErrors(true)

File: maven-core/src/test/java/org/apache/maven/MavenTestHelper.java
Patch:
@@ -32,7 +32,7 @@ public class MavenTestHelper {
     public static DefaultRepositorySystemSession createSession(
             MavenRepositorySystem repositorySystem, PlexusContainer container) {
         DefaultRepositorySystemSession repoSession = new DefaultRepositorySystemSession(h -> false);
-        DefaultMavenExecutionRequest request = new DefaultMavenExecutionRequest(true);
+        DefaultMavenExecutionRequest request = new DefaultMavenExecutionRequest();
         MavenSession mavenSession = new MavenSession(repoSession, request, new DefaultMavenExecutionResult());
         DefaultSession session =
                 new DefaultSession(mavenSession, null, null, repositorySystem, new DefaultLookup(container), null);

File: maven-core/src/test/java/org/apache/maven/internal/impl/TestApi.java
Patch:
@@ -119,7 +119,7 @@ void setup() {
                 .get()
                 .withLocalRepositoryBaseDirectories(new File("target").toPath())
                 .build();
-        DefaultMavenExecutionRequest mer = new DefaultMavenExecutionRequest(true);
+        DefaultMavenExecutionRequest mer = new DefaultMavenExecutionRequest();
         DefaultMavenExecutionResult meres = new DefaultMavenExecutionResult();
         MavenSession ms = new MavenSession(rss, mer, meres);
         DefaultSession session = new DefaultSession(

File: maven-core/src/test/java/org/apache/maven/project/AbstractMavenProjectTestCase.java
Patch:
@@ -164,7 +164,7 @@ protected void initRepoSession(ProjectBuildingRequest request) throws ComponentL
                 new DefaultSessionFactory(repoSystem, repositorySystem, new DefaultLookup(container), null);
 
         MavenSession session = new MavenSession(
-                getContainer(), repoSession, new DefaultMavenExecutionRequest(true), new DefaultMavenExecutionResult());
+                getContainer(), repoSession, new DefaultMavenExecutionRequest(), new DefaultMavenExecutionResult());
         session.setSession(defaultSessionFactory.newSession(session));
 
         DefaultSession s = new DefaultSession(session, null, null, null, null, null);

File: maven-cli/src/main/java/org/apache/maven/cling/invoker/LookupInvoker.java
Patch:
@@ -621,7 +621,7 @@ protected Path localRepositoryPath(C context) {
         }
         // settings
         userDefinedLocalRepo = context.effectiveSettings.getLocalRepository();
-        if (userDefinedLocalRepo != null) {
+        if (userDefinedLocalRepo != null && !userDefinedLocalRepo.isEmpty()) {
             return context.userResolver.apply(userDefinedLocalRepo);
         }
         // defaults

File: its/core-it-suite/src/test/java/org/apache/maven/it/TestSuiteOrdering.java
Patch:
@@ -120,6 +120,7 @@ public TestSuiteOrdering() {
          * the tests are to finishing. Newer tests are also more likely to fail, so this is
          * a fail fast technique as well.
          */
+        suite.addTestSuite(MavenITmng8299CustomLifecycleTest.class);
         suite.addTestSuite(MavenITmng7982DependencyManagementTransitivityTest.class);
         suite.addTestSuite(MavenITmng8294ParentChecksTest.class);
         suite.addTestSuite(MavenITmng8293BomImportFromReactor.class);

File: maven-api-impl/src/test/java/org/apache/maven/internal/impl/standalone/ApiRunner.java
Patch:
@@ -61,10 +61,12 @@
 import org.apache.maven.internal.impl.AbstractSession;
 import org.apache.maven.internal.impl.InternalSession;
 import org.apache.maven.internal.impl.di.SessionScope;
+import org.apache.maven.internal.impl.resolver.scopes.Maven4ScopeManagerConfiguration;
 import org.eclipse.aether.DefaultRepositorySystemSession;
 import org.eclipse.aether.RepositorySystem;
 import org.eclipse.aether.RepositorySystemSession;
 import org.eclipse.aether.impl.RemoteRepositoryManager;
+import org.eclipse.aether.internal.impl.scope.ScopeManagerImpl;
 import org.eclipse.aether.repository.LocalRepository;
 import org.eclipse.aether.repository.LocalRepositoryManager;
 
@@ -328,6 +330,7 @@ static Session newSession(RepositorySystem system, Lookup lookup) {
                 : properties.containsKey("env.MAVEN_HOME") ? Paths.get(properties.get("env.MAVEN_HOME")) : null;
 
         DefaultRepositorySystemSession rsession = new DefaultRepositorySystemSession(h -> false);
+        rsession.setScopeManager(new ScopeManagerImpl(Maven4ScopeManagerConfiguration.INSTANCE));
         rsession.setSystemProperties(properties);
         rsession.setConfigProperties(properties);
 

File: maven-api-impl/src/test/java/org/apache/maven/internal/impl/standalone/TestApiStandalone.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.maven.api.ArtifactCoordinates;
 import org.apache.maven.api.DownloadedArtifact;
 import org.apache.maven.api.Node;
+import org.apache.maven.api.PathScope;
 import org.apache.maven.api.Session;
 import org.apache.maven.api.services.ModelBuilder;
 import org.apache.maven.api.services.ModelBuilderRequest;
@@ -58,8 +59,8 @@ void testStandalone() {
         assertNotNull(res.getPath());
         assertTrue(Files.exists(res.getPath()));
 
-        Node node = session.collectDependencies(session.createDependencyCoordinates(coords));
+        Node node = session.collectDependencies(session.createDependencyCoordinates(coords), PathScope.MAIN_RUNTIME);
         assertNotNull(node);
-        assertEquals(8, node.getChildren().size());
+        assertEquals(6, node.getChildren().size());
     }
 }

File: maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java
Patch:
@@ -642,8 +642,9 @@ private <T> T loadV4Mojo(
                 }
             } else {
                 // collection
-                DependencyResolverResult res =
-                        sessionV4.getService(DependencyResolver.class).collect(sessionV4, project);
+                DependencyResolverResult res = sessionV4
+                        .getService(DependencyResolver.class)
+                        .collect(sessionV4, project, PathScope.MAIN_RUNTIME);
                 if (field.getType() == DependencyResolverResult.class) {
                     result = res;
                 } else if (field.getType() == Node.class) {

File: maven-core/src/test/java/org/apache/maven/internal/impl/TestApi.java
Patch:
@@ -176,7 +176,7 @@ void testBuildProject() {
     void testCollectArtifactDependencies() {
         Artifact artifact =
                 session.createArtifact("org.codehaus.plexus", "plexus-container-default", "1.0-alpha-32", "jar");
-        Node root = session.collectDependencies(artifact);
+        Node root = session.collectDependencies(artifact, PathScope.MAIN_RUNTIME);
         assertNotNull(root);
     }
 
@@ -236,7 +236,7 @@ void testProjectDependencies() {
         assertNotNull(project);
 
         Artifact artifact = session.createArtifact("org.apache.maven.core.test", "test-extension", "1", "jar");
-        Node root = session.collectDependencies(artifact);
+        Node root = session.collectDependencies(artifact, PathScope.MAIN_RUNTIME);
         assertNotNull(root);
 
         DependencyResolverResult result =

File: maven-core/src/main/java/org/apache/maven/internal/impl/DefaultTypeRegistry.java
Patch:
@@ -91,7 +91,7 @@ public Type require(String id) {
                 ArtifactHandler handler = manager.getArtifactHandler(id);
                 type = new DefaultType(
                         id,
-                        languageRegistry.require(handler.getLanguage()),
+                        languageRegistry.lookup(handler.getLanguage()).orElseGet(() -> handler::getLanguage),
                         handler.getExtension(),
                         handler.getClassifier(),
                         handler.isIncludesDependencies(),

File: api/maven-api-cli/src/main/java/org/apache/maven/api/cli/Options.java
Patch:
@@ -87,7 +87,7 @@ public interface Options {
     Optional<Boolean> verbose();
 
     /**
-     * Indicates whether to show error messages.
+     * Indicates whether to show error stack traces.
      *
      * @return an {@link Optional} containing the boolean flag, or empty if not set
      */

File: maven-cli/src/main/java/org/apache/maven/cling/invoker/CommonsCliOptions.java
Patch:
@@ -97,7 +97,7 @@ public Optional<Boolean> verbose() {
 
     @Override
     public Optional<Boolean> showErrors() {
-        if (commandLine.hasOption(CLIManager.SHOW_ERRORS)) {
+        if (commandLine.hasOption(CLIManager.SHOW_ERRORS) || verbose().orElse(false)) {
             return Optional.of(Boolean.TRUE);
         }
         return Optional.empty();

File: maven-cli/src/main/java/org/apache/maven/cling/invoker/mvn/DefaultMavenParser.java
Patch:
@@ -51,7 +51,7 @@ protected MavenOptions parseArgs(String source, List<String> args) throws Parser
         try {
             return CommonsCliMavenOptions.parse(source, args.toArray(new String[0]));
         } catch (ParseException e) {
-            throw new ParserException("Failed to parse source " + source, e.getCause());
+            throw new ParserException("Failed to parse source " + source + ": " + e.getMessage(), e.getCause());
         }
     }
 

File: maven-api-impl/src/main/java/org/apache/maven/internal/impl/model/DefaultModelBuilder.java
Patch:
@@ -1640,7 +1640,7 @@ ModelSource resolveReactorModel(String groupId, String artifactId, String versio
             if (sources != null) {
                 for (ModelSource source : sources) {
                     Model model = derive(source).readRawModel();
-                    if (Objects.equals(model.getVersion(), version)) {
+                    if (Objects.equals(getVersion(model), version)) {
                         return source;
                     }
                 }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2196ParentResolutionTest.java
Patch:
@@ -31,7 +31,7 @@
 public class MavenITmng2196ParentResolutionTest extends AbstractMavenIntegrationTestCase {
 
     public MavenITmng2196ParentResolutionTest() {
-        super(ALL_MAVEN_VERSIONS);
+        super("[2.0,4.0.0-beta-5)");
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/TestSuiteOrdering.java
Patch:
@@ -120,6 +120,8 @@ public TestSuiteOrdering() {
          * the tests are to finishing. Newer tests are also more likely to fail, so this is
          * a fail fast technique as well.
          */
+        suite.addTestSuite(MavenITmng8293BomImportFromReactor.class);
+        suite.addTestSuite(MavenITmng8288NoRootPomTest.class);
         suite.addTestSuite(MavenITmng8133RootDirectoryInParentTest.class);
         suite.addTestSuite(MavenITmng8230CIFriendlyTest.class);
         suite.addTestSuite(MavenITmng7255InferredGroupIdTest.class);

File: maven-cli/src/main/java/org/apache/maven/cling/invoker/mvn/DefaultMavenInvoker.java
Patch:
@@ -110,9 +110,9 @@ protected void prepare(C context) throws Exception {
         DefaultMavenExecutionRequest mavenExecutionRequest = new DefaultMavenExecutionRequest();
         mavenExecutionRequest.setRepositoryCache(new DefaultRepositoryCache());
         mavenExecutionRequest.setInteractiveMode(true);
+        mavenExecutionRequest.setCacheTransferError(false);
         mavenExecutionRequest.setIgnoreInvalidArtifactDescriptor(true);
         mavenExecutionRequest.setIgnoreMissingArtifactDescriptor(true);
-        mavenExecutionRequest.setProjectPresent(true);
         mavenExecutionRequest.setRecursive(true);
         mavenExecutionRequest.setReactorFailureBehavior(MavenExecutionRequest.REACTOR_FAIL_FAST);
         mavenExecutionRequest.setStartTime(new Date());

File: api/maven-api-cli/src/main/java/org/apache/maven/api/cli/mvn/resident/ResidentMavenInvoker.java
Patch:
@@ -21,14 +21,16 @@
 import org.apache.maven.api.annotations.Experimental;
 import org.apache.maven.api.cli.InvokerException;
 import org.apache.maven.api.cli.mvn.MavenInvoker;
+import org.apache.maven.api.cli.mvn.MavenInvokerRequest;
+import org.apache.maven.api.cli.mvn.MavenOptions;
 
 /**
  * Resident invoker. Instance is shut down when this instance is closed.
  *
  * @since 4.0.0
  */
 @Experimental
-public interface ResidentMavenInvoker extends MavenInvoker<ResidentMavenInvokerRequest> {
+public interface ResidentMavenInvoker extends MavenInvoker<MavenInvokerRequest<MavenOptions>> {
     /**
      * Closes cleanly the daemon.
      */

File: maven-cli/src/main/java/org/apache/maven/cling/MavenCling.java
Patch:
@@ -26,8 +26,8 @@
 import org.apache.maven.api.cli.mvn.MavenOptions;
 import org.apache.maven.cling.invoker.ProtoLogger;
 import org.apache.maven.cling.invoker.ProtoLookup;
+import org.apache.maven.cling.invoker.mvn.DefaultMavenParser;
 import org.apache.maven.cling.invoker.mvn.local.DefaultLocalMavenInvoker;
-import org.apache.maven.cling.invoker.mvn.local.DefaultLocalMavenParser;
 import org.apache.maven.jline.JLineMessageBuilderFactory;
 import org.codehaus.plexus.classworlds.ClassWorld;
 
@@ -67,6 +67,6 @@ protected Invoker<MavenInvokerRequest<MavenOptions>> createInvoker() {
 
     @Override
     protected MavenInvokerRequest<MavenOptions> parseArguments(String[] args) throws ParserException, IOException {
-        return new DefaultLocalMavenParser().mvn(args, new ProtoLogger(), new JLineMessageBuilderFactory());
+        return new DefaultMavenParser().mvn(args, new ProtoLogger(), new JLineMessageBuilderFactory());
     }
 }

File: maven-cli/src/main/java/org/apache/maven/cling/invoker/mvn/DefaultMavenInvoker.java
Patch:
@@ -76,7 +76,7 @@ public abstract class DefaultMavenInvoker<
         extends LookupInvoker<O, R, C> implements MavenInvoker<R> {
 
     @SuppressWarnings("VisibilityModifier")
-    protected static class MavenContext<
+    public static class MavenContext<
                     O extends MavenOptions,
                     R extends MavenInvokerRequest<O>,
                     C extends DefaultMavenInvoker.MavenContext<O, R, C>>

File: maven-cli/src/main/java/org/apache/maven/cling/invoker/mvn/local/DefaultLocalMavenInvoker.java
Patch:
@@ -29,7 +29,7 @@ public class DefaultLocalMavenInvoker
                 MavenOptions, MavenInvokerRequest<MavenOptions>, DefaultLocalMavenInvoker.LocalContext>
         implements LocalMavenInvoker {
 
-    protected static class LocalContext
+    public static class LocalContext
             extends DefaultMavenInvoker.MavenContext<
                     MavenOptions, MavenInvokerRequest<MavenOptions>, DefaultLocalMavenInvoker.LocalContext> {
         protected LocalContext(DefaultLocalMavenInvoker invoker, MavenInvokerRequest<MavenOptions> invokerRequest) {

File: maven-cli/src/test/java/org/apache/maven/cling/invoker/mvn/local/DefaultLocalMavenInvokerTest.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.maven.api.cli.mvn.MavenInvokerRequest;
 import org.apache.maven.api.cli.mvn.MavenOptions;
 import org.apache.maven.cling.invoker.ProtoLookup;
+import org.apache.maven.cling.invoker.mvn.DefaultMavenParser;
 import org.apache.maven.cling.invoker.mvn.MavenInvokerTestSupport;
 import org.codehaus.plexus.classworlds.ClassWorld;
 import org.junit.jupiter.api.Disabled;
@@ -50,7 +51,7 @@ protected Invoker<MavenInvokerRequest<MavenOptions>> createInvoker() {
 
     @Override
     protected Parser<MavenInvokerRequest<MavenOptions>> createParser() {
-        return new DefaultLocalMavenParser();
+        return new DefaultMavenParser();
     }
 
     @Test

File: api/maven-api-cli/src/main/java/org/apache/maven/api/cli/Options.java
Patch:
@@ -196,12 +196,12 @@ public interface Options {
      *
      * @param printWriter the PrintWriter to use for output
      */
-    default void warnAboutDeprecatedOptions(@Nonnull PrintWriter printWriter) {}
+    default void warnAboutDeprecatedOptions(@Nonnull ParserRequest request, @Nonnull PrintWriter printWriter) {}
 
     /**
      * Displays help information for these options.
      *
      * @param printWriter the PrintWriter to use for output
      */
-    void displayHelp(@Nonnull String command, @Nonnull PrintWriter printWriter);
+    void displayHelp(@Nonnull ParserRequest request, @Nonnull PrintWriter printWriter);
 }

File: maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java
Patch:
@@ -93,7 +93,7 @@ public static String showVersionMinimal() {
      * @param buildProperties The build properties
      * @return Readable build info
      */
-    static String createMavenVersionString(Properties buildProperties) {
+    public static String createMavenVersionString(Properties buildProperties) {
         String timestamp = reduce(buildProperties.getProperty("timestamp"));
         String version = reduce(buildProperties.getProperty(BUILD_VERSION_PROPERTY));
         String rev = reduce(buildProperties.getProperty("buildNumber"));
@@ -117,7 +117,7 @@ private static String reduce(String s) {
         return (s != null ? (s.startsWith("${") && s.endsWith("}") ? null : s) : null);
     }
 
-    static Properties getBuildProperties() {
+    public static Properties getBuildProperties() {
         Properties properties = new Properties();
 
         try (InputStream resourceAsStream =

File: maven-embedder/src/main/java/org/apache/maven/cli/event/ExecutionEventLogger.java
Patch:
@@ -103,7 +103,7 @@ private void init() {
             }
             terminalWidth = Math.min(
                     MAX_TERMINAL_WIDTH,
-                    Math.max(terminalWidth < 0 ? DEFAULT_TERMINAL_WIDTH : terminalWidth, MIN_TERMINAL_WIDTH));
+                    Math.max(terminalWidth <= 0 ? DEFAULT_TERMINAL_WIDTH : terminalWidth, MIN_TERMINAL_WIDTH));
             lineLength = terminalWidth - MAX_LOG_PREFIX_SIZE;
             maxProjectNameLength = lineLength - PROJECT_STATUS_SUFFIX_SIZE;
         }

File: maven-embedder/src/main/java/org/apache/maven/cli/internal/BootstrapCoreExtensionManager.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.maven.RepositoryUtils;
 import org.apache.maven.api.Service;
 import org.apache.maven.api.Session;
+import org.apache.maven.api.cli.extensions.CoreExtension;
 import org.apache.maven.api.model.Plugin;
 import org.apache.maven.api.services.ArtifactCoordinatesFactory;
 import org.apache.maven.api.services.ArtifactManager;
@@ -42,7 +43,6 @@
 import org.apache.maven.api.services.RepositoryFactory;
 import org.apache.maven.api.services.VersionParser;
 import org.apache.maven.api.services.VersionRangeResolver;
-import org.apache.maven.cli.internal.extension.model.CoreExtension;
 import org.apache.maven.execution.DefaultMavenExecutionResult;
 import org.apache.maven.execution.MavenExecutionRequest;
 import org.apache.maven.execution.MavenSession;

File: maven-embedder/src/main/java/org/apache/maven/cli/internal/ExtensionResolutionException.java
Patch:
@@ -18,7 +18,7 @@
  */
 package org.apache.maven.cli.internal;
 
-import org.apache.maven.cli.internal.extension.model.CoreExtension;
+import org.apache.maven.api.cli.extensions.CoreExtension;
 
 /**
  * Exception occurring trying to resolve a plugin.

File: maven-embedder/src/test/java/org/apache/maven/cli/transfer/ConsoleMavenTransferListenerTest.java
Patch:
@@ -19,7 +19,7 @@
 package org.apache.maven.cli.transfer;
 
 import java.io.File;
-import java.io.PrintStream;
+import java.io.PrintWriter;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.CountDownLatch;
@@ -51,7 +51,7 @@ void testTransferProgressedWithPrintResourceNames() throws Exception {
 
         TransferListener listener = new SimplexTransferListener(new ConsoleMavenTransferListener(
                 new JLineMessageBuilderFactory(),
-                new PrintStream(System.out) {
+                new PrintWriter(System.out) {
 
                     @Override
                     public void print(Object o) {

File: maven-settings-builder/src/main/java/org/apache/maven/settings/crypto/DefaultSettingsDecrypter.java
Patch:
@@ -30,8 +30,8 @@
 import org.apache.maven.settings.building.DefaultSettingsProblem;
 import org.apache.maven.settings.building.SettingsProblem;
 import org.apache.maven.settings.building.SettingsProblem.Severity;
-import org.sonatype.plexus.components.sec.dispatcher.SecDispatcher;
-import org.sonatype.plexus.components.sec.dispatcher.SecDispatcherException;
+import org.codehaus.plexus.components.secdispatcher.SecDispatcher;
+import org.codehaus.plexus.components.secdispatcher.SecDispatcherException;
 
 /**
  * Decrypts passwords in the settings.
@@ -45,7 +45,7 @@ public class DefaultSettingsDecrypter implements SettingsDecrypter {
     private final SecDispatcher securityDispatcher;
 
     @Inject
-    public DefaultSettingsDecrypter(@Named("maven") SecDispatcher securityDispatcher) {
+    public DefaultSettingsDecrypter(SecDispatcher securityDispatcher) {
         this.securityDispatcher = securityDispatcher;
     }
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0553SettingsAuthzEncryptionTest.java
Patch:
@@ -56,7 +56,7 @@ public class MavenITmng0553SettingsAuthzEncryptionTest extends AbstractMavenInte
     private int port;
 
     public MavenITmng0553SettingsAuthzEncryptionTest() {
-        super("[2.1.0,3.0-alpha-1),[3.0-alpha-3,)");
+        super("[2.1.0,3.0-alpha-1),[3.0-alpha-3,4.0.0-beta-4]");
     }
 
     @BeforeEach

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5774ConfigurationProcessorsTest.java
Patch:
@@ -28,7 +28,7 @@
 
 public class MavenITmng5774ConfigurationProcessorsTest extends AbstractMavenIntegrationTestCase {
     public MavenITmng5774ConfigurationProcessorsTest() {
-        super("(3.2.5,)");
+        super("(3.2.5,4.0.0-beta-4]");
     }
 
     @Test

File: maven-api-impl/src/main/java/org/apache/maven/internal/impl/model/DefaultModelBuilder.java
Patch:
@@ -342,7 +342,7 @@ PhasingExecutor createExecutor() {
         }
 
         private int getParallelism() {
-            int parallelism = /*Runtime.getRuntime().availableProcessors() / 2 +*/ 1;
+            int parallelism = Runtime.getRuntime().availableProcessors() / 2 + 1;
             try {
                 String str = request.getUserProperties().get(Constants.MAVEN_MODEL_BUILDER_PARALLELISM);
                 if (str != null) {

File: maven-core/src/test/java/org/apache/maven/project/PomConstructionTest.java
Patch:
@@ -1228,7 +1228,7 @@ void testReportingPluginConfig() throws Exception {
     @Test
     void testPropertiesNoDuplication() throws Exception {
         PomTestWrapper pom = buildPom("properties-no-duplication/sub");
-        assertEquals(3, ((Properties) pom.getValue("properties")).size());
+        assertEquals(4, ((Properties) pom.getValue("properties")).size());
         assertEquals("child", pom.getValue("properties/pomProfile"));
     }
 
@@ -1351,10 +1351,11 @@ private void testCompleteModel(PomTestWrapper pom) throws Exception {
         assertEquals(1, ((List<?>) pom.getValue("modules")).size());
         assertEquals("sub", pom.getValue("modules[1]"));
 
-        assertEquals(3, ((Map<?, ?>) pom.getValue("properties")).size());
+        assertEquals(4, ((Map<?, ?>) pom.getValue("properties")).size());
         assertEquals("project-property", pom.getValue("properties[1]/itProperty"));
         assertEquals("UTF-8", pom.getValue("properties[1]/project.build.sourceEncoding"));
         assertEquals("UTF-8", pom.getValue("properties[1]/project.reporting.outputEncoding"));
+        assertEquals("2001-01-01T00:00:00Z", pom.getValue("properties[1]/project.build.outputTimestamp"));
 
         assertEquals(1, ((List<?>) pom.getValue("dependencyManagement/dependencies")).size());
         assertEquals("org.apache.maven.its", pom.getValue("dependencyManagement/dependencies[1]/groupId"));

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng6330RelativePath.java
Patch:
@@ -32,7 +32,7 @@
  */
 public class MavenITmng6330RelativePath extends AbstractMavenIntegrationTestCase {
     public MavenITmng6330RelativePath() {
-        super("(,3.5.0),(3.5.2,)");
+        super("(,3.5.0),(3.5.2,4.0.0-beta-5)");
     }
 
     @Test

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng7679SingleMojoNoPomTest.java
Patch:
@@ -46,7 +46,7 @@ void testSingleMojoNoPom() throws Exception {
         File testDir = ResourceExtractor.simpleExtractResources(getClass(), "/mng-7679");
 
         Verifier verifier = newVerifier(testDir.getAbsolutePath());
-        verifier.addCliArgument("install:install-file");
+        verifier.addCliArgument("org.apache.maven.plugins:maven-install-plugin:3.0.1:install-file");
         verifier.addCliArgument("-Dfile=mng-7679.txt");
         verifier.addCliArgument("-DgroupId=org.apache.maven.it.mng7679");
         verifier.addCliArgument("-DartifactId=artifact");

File: api/maven-api-core/src/main/java/org/apache/maven/api/Lifecycle.java
Patch:
@@ -49,7 +49,6 @@ public interface Lifecycle extends ExtensibleEnum {
     String CLEAN = "clean";
     String DEFAULT = "default";
     String SITE = "site";
-    String WRAPPER = "wrapper";
 
     // ======================
     // Phase qualifiers

File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycles.java
Patch:
@@ -44,7 +44,7 @@
 @Named
 @Singleton
 public class DefaultLifecycles {
-    public static final String[] STANDARD_LIFECYCLES = {"clean", "default", "site", "wrapper"};
+    public static final String[] STANDARD_LIFECYCLES = {"clean", "default", "site"};
 
     private final Logger logger = LoggerFactory.getLogger(getClass());
 

File: maven-core/src/test/java/org/apache/maven/lifecycle/LifecycleExecutorTest.java
Patch:
@@ -302,7 +302,7 @@ void testLifecycleQueryingUsingADefaultLifecyclePhase() throws Exception {
     void testLifecyclePluginsRetrievalForDefaultLifecycle() throws Exception {
         List<Plugin> plugins = new ArrayList<>(lifecycleExecutor.getPluginsBoundByDefaultToAllLifecycles("jar"));
 
-        assertThat(plugins.toString(), plugins, hasSize(9));
+        assertThat(plugins.toString(), plugins, hasSize(8));
     }
 
     @Test

File: maven-api-impl/src/main/java/org/apache/maven/internal/impl/DefaultModelXmlFactory.java
Patch:
@@ -105,7 +105,7 @@ public void write(XmlWriterRequest<Model> request) throws XmlWriterException {
                 w.write(outputStream, content);
             } else {
                 try (OutputStream os = Files.newOutputStream(path)) {
-                    w.write(outputStream, content);
+                    w.write(os, content);
                 }
             }
         } catch (Exception e) {

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/ModelProblem.java
Patch:
@@ -40,11 +40,11 @@ enum Version {
     }
 
     /**
-     * Gets the identifier of the model from which the problem originated. While the general form of this identifier is
-     * <code>groupId:artifactId:version</code> the returned identifier need not be complete. The identifier is derived
-     * from the information that is available at the point the problem occurs and as such merely serves as a best effort
+     * Gets the identifier of the model from which the problem originated. The identifier is derived from the
+     * information that is available at the point the problem occurs and as such merely serves as best effort
      * to provide information to the user to track the problem back to its origin.
      *
+     * @see ModelBuilderResult#getModelIds()
      * @return The identifier of the model from which the problem originated or an empty string if unknown, never
      *         {@code null}.
      */

File: api/maven-api-di/src/main/java/org/apache/maven/api/di/SessionScoped.java
Patch:
@@ -29,6 +29,8 @@
 /**
  * Indicates that annotated component should be instantiated before session execution starts
  * and discarded after session execution completes.
+ * <p>
+ * A {@code org.apache.maven.api.Session} object is available in the scope of this annotation.
  *
  * @since 4.0.0
  */

File: api/maven-api-meta/src/main/java/org/apache/maven/api/annotations/Nullable.java
Patch:
@@ -30,5 +30,5 @@
  */
 @Experimental
 @Documented
-@Retention(RetentionPolicy.CLASS)
+@Retention(RetentionPolicy.RUNTIME)
 public @interface Nullable {}

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1021EqualAttachmentBuildNumberTest.java
Patch:
@@ -48,7 +48,7 @@ public void testitMNG1021() throws Exception {
         verifier.setAutoclean(false);
         verifier.deleteDirectory("repo");
         verifier.deleteArtifacts("org.apache.maven.its.mng1021");
-        verifier.addCliArgument("-Dmaven.buildconsumer=false");
+        verifier.addCliArgument("-Dmaven.consumer.pom=false");
         verifier.addCliArgument("initialize");
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3396DependencyManagementForOverConstrainedRangesTest.java
Patch:
@@ -46,7 +46,6 @@ public void testitMNG3396() throws Exception {
         verifier.deleteArtifact(GROUP_ID, "A", "1.0", "jar");
         verifier.deleteArtifact(GROUP_ID, "B", "1.0", "pom");
         verifier.deleteArtifact(GROUP_ID, "B", "1.0", "jar");
-        verifier.addCliArgument("-Dmaven.buildconsumer=false");
         verifier.addCliArgument("install");
         verifier.execute();
         verifier.verifyErrorFreeLog();
@@ -60,7 +59,6 @@ public void testitMNG3396() throws Exception {
         verifier.deleteArtifact(GROUP_ID, "A", "3.0", "jar");
         verifier.deleteArtifact(GROUP_ID, "plugin", "1.0", "pom");
         verifier.deleteArtifact(GROUP_ID, "plugin", "1.0", "jar");
-        verifier.addCliArgument("-Dmaven.buildconsumer=false");
         verifier.addCliArgument("install");
         verifier.execute();
         verifier.verifyErrorFreeLog();
@@ -70,7 +68,6 @@ public void testitMNG3396() throws Exception {
         verifier = newVerifier(testDir.getAbsolutePath(), "remote");
         verifier.deleteArtifact(GROUP_ID, "pluginuser", "1.0", "pom");
         verifier.deleteArtifact(GROUP_ID, "pluginuser", "1.0", "jar");
-        verifier.addCliArgument("-Dmaven.buildconsumer=false");
         verifier.addCliArgument("install");
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5576CdFriendlyVersions.java
Patch:
@@ -50,7 +50,7 @@ public void testContinuousDeliveryFriendlyVersionsAreWarningFreeWithoutBuildCons
         verifier.setAutoclean(false);
         verifier.deleteDirectory("target");
         verifier.addCliArgument("-Dchangelist=changelist");
-        verifier.addCliArgument("-Dmaven.buildconsumer=false");
+        verifier.addCliArgument("-Dmaven.consumerpom=false");
         verifier.addCliArgument("validate");
         verifier.execute();
         verifier.verifyErrorFreeLog();
@@ -83,7 +83,7 @@ public void testContinuousDeliveryFriendlyVersionsAreWarningFreeWithBuildConsume
         verifier.setAutoclean(false);
         verifier.deleteDirectory("target");
         verifier.addCliArgument("-Dchangelist=changelist");
-        verifier.addCliArgument("-Dmaven.buildconsumer=true");
+        verifier.addCliArgument("-Dmaven.consumerpom=true");
         verifier.addCliArgument("validate");
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5669ReadPomsOnce.java
Patch:
@@ -57,7 +57,7 @@ public void testWithoutBuildConsumer() throws Exception {
         verifier.setAutoclean(false);
         verifier.addCliArgument("-q");
         verifier.addCliArgument("-U");
-        verifier.addCliArgument("-Dmaven.buildconsumer=false");
+        verifier.addCliArgument("-Dmaven.consumerpom=false");
         verifier.addCliArgument("verify");
         verifier.execute();
 
@@ -93,7 +93,7 @@ public void testWithBuildConsumer() throws Exception {
         verifier.setAutoclean(false);
         verifier.addCliArgument("-q");
         verifier.addCliArgument("-U");
-        verifier.addCliArgument("-Dmaven.buildconsumer=true");
+        verifier.addCliArgument("-Dmaven.consumerpom=true");
         verifier.addCliArgument("verify");
         verifier.execute();
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5895CIFriendlyUsageWithPropertyTest.java
Patch:
@@ -58,7 +58,7 @@ public void testitShouldResolveTheDependenciesWithoutBuildConsumer() throws Exce
 
         // verifier.setLogFileName( "log-only.txt" );
         verifier.addCliArgument("-Drevision=1.2");
-        verifier.addCliArgument("-Dmaven.buildconsumer=false");
+        verifier.addCliArgument("-Dmaven.consumerpom=false");
         verifier.addCliArgument("clean");
         verifier.execute();
         verifier.addCliArgument("package");
@@ -76,7 +76,7 @@ public void testitShouldResolveTheDependenciesWithBuildConsumer() throws Excepti
 
         verifier.setLogFileName("log-bc.txt");
         verifier.addCliArgument("-Drevision=1.2");
-        verifier.addCliArgument("-Dmaven.buildconsumer=true");
+        verifier.addCliArgument("-Dmaven.consumerpom=true");
         verifier.addCliArgument("clean");
         verifier.execute();
         verifier.addCliArgument("package");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng6090CIFriendlyTest.java
Patch:
@@ -56,7 +56,7 @@ public void testitShouldResolveTheDependenciesWithoutBuildConsumer() throws Exce
         verifier.setAutoclean(false);
 
         verifier.addCliArgument("-Drevision=1.2");
-        verifier.addCliArgument("-Dmaven.buildconsumer=false");
+        verifier.addCliArgument("-Dmaven.consumerpom=false");
         verifier.setLogFileName("install-log.txt");
         verifier.addCliArguments("clean", "install");
         verifier.execute();
@@ -82,7 +82,7 @@ public void testitShouldResolveTheDependenciesWithBuildConsumer() throws Excepti
         verifier.setForkJvm(true);
 
         verifier.addCliArgument("-Drevision=1.2");
-        verifier.addCliArgument("-Dmaven.buildconsumer=true");
+        verifier.addCliArgument("-Dmaven.consumerpom=true");
         verifier.setLogFileName("install-log.txt");
         verifier.addCliArguments("clean", "install");
         verifier.execute();

File: maven-api-impl/src/main/java/org/apache/maven/internal/impl/model/DefaultModelTransformerContextBuilder.java
Patch:
@@ -152,7 +152,7 @@ private void doLoadFullReactor() {
                                 ModelBuilderRequest.build(request, ModelSource.fromPath(pom));
                         Model rawModel = defaultModelBuilder.readFileModel(gaBuildingRequest, problems);
                         List<String> subprojects = rawModel.getSubprojects();
-                        if (subprojects == null) {
+                        if (subprojects.isEmpty()) {
                             subprojects = rawModel.getModules();
                         }
                         for (String subproject : subprojects) {

File: maven-di/src/main/java/org/apache/maven/di/impl/InjectorImpl.java
Patch:
@@ -144,10 +144,9 @@ private Injector doBind(Key<?> key, Binding<?> binding) {
             doBindImplicit(key, binding);
             Class<?> cls = key.getRawType().getSuperclass();
             while (cls != Object.class && cls != null) {
-                key = Key.of(cls, key.getQualifier());
-                doBindImplicit(key, binding);
+                doBindImplicit(Key.of(cls, key.getQualifier()), binding);
                 if (key.getQualifier() != null) {
-                    bind(Key.ofType(key.getType()), binding);
+                    bind(Key.ofType(cls), binding);
                 }
                 cls = cls.getSuperclass();
             }

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java
Patch:
@@ -476,7 +476,7 @@ ProjectBuildingResult build(Artifact artifact, boolean allowStubModel) throws Pr
             try {
                 ArtifactRequest pomRequest = new ArtifactRequest();
                 pomRequest.setArtifact(pomArtifact);
-                pomRequest.setRepositories(repositories);
+                pomRequest.setRepositories(RepositoryUtils.toRepos(request.getRemoteRepositories()));
                 ArtifactResult pomResult = repoSystem.resolveArtifact(session, pomRequest);
 
                 pomArtifact = pomResult.getArtifact();

File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -672,6 +672,7 @@ PlexusContainer container(CliRequest cliRequest) throws Exception {
                 .setClassPathScanning(PlexusConstants.SCANNING_INDEX)
                 .setAutoWiring(true)
                 .setJSR250Lifecycle(true)
+                .setStrictClassPathScanning(true)
                 .setName("maven");
 
         Set<String> exportedArtifacts = new HashSet<>(coreEntry.getExportedArtifacts());
@@ -780,6 +781,7 @@ private List<CoreExtensionEntry> loadCoreExtensions(
                 .setClassPathScanning(PlexusConstants.SCANNING_INDEX) //
                 .setAutoWiring(true) //
                 .setJSR250Lifecycle(true) //
+                .setStrictClassPathScanning(true) //
                 .setName("maven");
 
         DefaultPlexusContainer container = new DefaultPlexusContainer(cc, new AbstractModule() {

File: maven-core/src/main/java/org/apache/maven/session/scope/internal/SessionScope.java
Patch:
@@ -138,7 +138,8 @@ private Class<?>[] getInterfaces(Class<?> superType) {
         } else {
             for (Annotation a : superType.getAnnotations()) {
                 Class<? extends Annotation> annotationType = a.annotationType();
-                if ("org.eclipse.sisu.Typed".equals(annotationType.getName())
+                if ("org.apache.maven.api.di.Typed".equals(annotationType.getName())
+                        || "org.eclipse.sisu.Typed".equals(annotationType.getName())
                         || "javax.enterprise.inject.Typed".equals(annotationType.getName())
                         || "jakarta.enterprise.inject.Typed".equals(annotationType.getName())) {
                     try {

File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -95,6 +95,7 @@
 import org.apache.maven.execution.scope.internal.MojoExecutionScopeModule;
 import org.apache.maven.extension.internal.CoreExports;
 import org.apache.maven.extension.internal.CoreExtensionEntry;
+import org.apache.maven.internal.impl.SisuDiBridgeModule;
 import org.apache.maven.jline.JLineMessageBuilderFactory;
 import org.apache.maven.jline.MessageUtils;
 import org.apache.maven.lifecycle.LifecycleExecutionException;
@@ -715,6 +716,7 @@ public Object getValue(String expression) {
                     new SessionScopeModule(container.lookup(SessionScope.class)),
                     new MojoExecutionScopeModule(container.lookup(MojoExecutionScope.class)),
                     new ExtensionConfigurationModule(extension, extensionSource));
+            container.lookup(SisuDiBridgeModule.class).loadFromClassLoader(extension.getClassRealm());
         }
 
         customizeContainer(container);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2693SitePluginRealmTest.java
Patch:
@@ -48,6 +48,7 @@ public void testit() throws Exception {
         verifier.setAutoclean(false);
         verifier.deleteDirectory("target");
         verifier.addCliArgument("pre-site");
+        verifier.addCliArgument("-Dmaven.site.skip=true");
         verifier.execute();
         verifier.verifyErrorFreeLog();
 

File: maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java
Patch:
@@ -227,12 +227,12 @@ public CLIManager() {
                 .longOpt("global-settings")
                 .desc("Alternate path for the global settings file")
                 .hasArg()
+                .deprecated()
                 .build());
         options.addOption(Option.builder(ALTERNATE_INSTALLATION_SETTINGS)
                 .longOpt("install-settings")
                 .desc("Alternate path for the installation settings file")
                 .hasArg()
-                .deprecated()
                 .build());
         options.addOption(Option.builder(Character.toString(ALTERNATE_USER_TOOLCHAINS))
                 .longOpt("toolchains")
@@ -243,12 +243,12 @@ public CLIManager() {
                 .longOpt("global-toolchains")
                 .desc("Alternate path for the global toolchains file")
                 .hasArg()
+                .deprecated()
                 .build());
         options.addOption(Option.builder(ALTERNATE_INSTALLATION_TOOLCHAINS)
                 .longOpt("install-toolchains")
                 .desc("Alternate path for the installation toolchains file")
                 .hasArg()
-                .deprecated()
                 .build());
         options.addOption(Option.builder(FAIL_ON_SEVERITY)
                 .longOpt("fail-on-severity")

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java
Patch:
@@ -92,7 +92,6 @@
 import org.apache.maven.internal.impl.InternalSession;
 import org.apache.maven.internal.impl.resolver.DefaultModelCache;
 import org.apache.maven.internal.impl.resolver.DefaultModelRepositoryHolder;
-import org.apache.maven.model.building.ArtifactModelSource;
 import org.apache.maven.model.building.DefaultModelProblem;
 import org.apache.maven.model.building.FileModelSource;
 import org.apache.maven.model.building.ModelSource2;
@@ -177,8 +176,6 @@ public ProjectBuildingResult build(
     static ModelSource toSource(org.apache.maven.model.building.ModelSource modelSource) {
         if (modelSource instanceof FileModelSource fms) {
             return ModelSource.fromPath(fms.getPath());
-        } else if (modelSource instanceof ArtifactModelSource ams) {
-            return ModelSource.fromPath(ams.getPath(), ams.toString());
         } else {
             return new ModelSource() {
                 @Override

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java
Patch:
@@ -37,6 +37,7 @@
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 
 import org.apache.maven.api.SessionData;
+import org.apache.maven.api.services.MavenException;
 import org.apache.maven.api.services.MessageBuilderFactory;
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.resolver.filter.ArtifactFilter;
@@ -324,7 +325,8 @@ private void doExecute2(MavenSession session, MojoExecution mojoExecution) throw
             } catch (MojoFailureException
                     | PluginManagerException
                     | PluginConfigurationException
-                    | MojoExecutionException e) {
+                    | MojoExecutionException
+                    | MavenException e) {
                 throw new LifecycleExecutionException(
                         messageBuilderFactory, mojoExecution, session.getCurrentProject(), e);
             }

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/DependencyResolverRequest.java
Patch:
@@ -323,7 +323,7 @@ public DependencyResolverRequestBuilder pathTypeFilter(@Nonnull Predicate<PathTy
          * @return {@code this} for method call chaining
          */
         @Nonnull
-        public DependencyResolverRequestBuilder pathTypeFilter(@Nonnull Collection<PathType> desiredTypes) {
+        public DependencyResolverRequestBuilder pathTypeFilter(@Nonnull Collection<? extends PathType> desiredTypes) {
             return pathTypeFilter(desiredTypes::contains);
         }
 

File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -677,6 +677,8 @@ PlexusContainer container(CliRequest cliRequest) throws Exception {
 
         final CoreExports exports = new CoreExports(containerRealm, exportedArtifacts, exportedPackages);
 
+        Thread.currentThread().setContextClassLoader(containerRealm);
+
         DefaultPlexusContainer container = new DefaultPlexusContainer(cc, new AbstractModule() {
             @Override
             protected void configure() {

File: maven-embedder/src/main/java/org/apache/maven/cli/event/ExecutionEventLogger.java
Patch:
@@ -295,9 +295,9 @@ public void projectSkipped(ExecutionEvent event) {
             init();
             logger.info("");
             infoLine('-');
-
-            infoMain("Skipping " + event.getProject().getName());
-            logger.info("This project has been banned from the build due to previous failures.");
+            String name = event.getProject().getName();
+            infoMain("Skipping " + name);
+            logger.info(name + " was not built because a module it depends on failed to build.");
 
             infoLine('-');
         }

File: maven-embedder/src/main/java/org/apache/maven/cli/transfer/AbstractMavenTransferListener.java
Patch:
@@ -19,7 +19,6 @@
 package org.apache.maven.cli.transfer;
 
 import java.io.PrintStream;
-import java.util.Locale;
 
 import org.apache.maven.api.services.MessageBuilder;
 import org.apache.maven.api.services.MessageBuilderFactory;
@@ -72,7 +71,7 @@ public void transferSucceeded(TransferEvent event) {
 
         TransferResource resource = event.getResource();
         long contentLength = event.getTransferredBytes();
-        FileSizeFormat format = new FileSizeFormat(Locale.ENGLISH);
+        FileSizeFormat format = new FileSizeFormat();
 
         MessageBuilder message = messageBuilderFactory.builder();
         message.append(action).style(STYLE).append(' ').append(direction).append(' ');

File: maven-embedder/src/main/java/org/apache/maven/cli/transfer/ConsoleMavenTransferListener.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.PrintStream;
 import java.util.Iterator;
 import java.util.LinkedHashMap;
-import java.util.Locale;
 import java.util.Map;
 
 import org.apache.maven.api.services.MessageBuilderFactory;
@@ -37,7 +36,7 @@
 public class ConsoleMavenTransferListener extends AbstractMavenTransferListener {
 
     private final Map<TransferResourceIdentifier, TransferResourceAndSize> transfers = new LinkedHashMap<>();
-    private final FileSizeFormat format = new FileSizeFormat(Locale.ENGLISH); // use in a synchronized fashion
+    private final FileSizeFormat format = new FileSizeFormat(); // use in a synchronized fashion
     private final StringBuilder buffer = new StringBuilder(128); // use in a synchronized fashion
 
     private final boolean printResourceNames;

File: maven-embedder/src/main/java/org/apache/maven/cli/transfer/Slf4jMavenTransferListener.java
Patch:
@@ -18,8 +18,6 @@
  */
 package org.apache.maven.cli.transfer;
 
-import java.util.Locale;
-
 import org.eclipse.aether.transfer.AbstractTransferListener;
 import org.eclipse.aether.transfer.TransferCancelledException;
 import org.eclipse.aether.transfer.TransferEvent;
@@ -75,7 +73,7 @@ public void transferSucceeded(TransferEvent event) {
 
         TransferResource resource = event.getResource();
         long contentLength = event.getTransferredBytes();
-        FileSizeFormat format = new FileSizeFormat(Locale.ENGLISH);
+        FileSizeFormat format = new FileSizeFormat();
 
         StringBuilder message = new StringBuilder();
         message.append(action).append(' ').append(direction).append(' ').append(resource.getRepositoryId());

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3477DependencyResolutionErrorMessageTest.java
Patch:
@@ -57,7 +57,7 @@ public void testit() throws Exception {
             boolean foundCause = false;
             List<String> lines = verifier.loadLines(verifier.getLogFileName(), "UTF-8");
             for (String line : lines) {
-                if (line.matches(".*org.apache.maven.its.mng3477:dep:jar:1.0.*Connection.*refused.*")) {
+                if (line.matches(".*org.apache.maven.its.mng3477:dep:.*:1.0.*Connection.*refused.*")) {
                     foundCause = true;
                     break;
                 }

File: maven-api-impl/src/main/java/org/apache/maven/internal/impl/model/DefaultProfileSelector.java
Patch:
@@ -106,7 +106,7 @@ private boolean isActive(Profile profile, ProfileActivationContext context, Mode
                     problems.add(
                             Severity.ERROR,
                             Version.BASE,
-                            "Failed to determine activation for profile " + profile.getId(),
+                            "Failed to determine activation for profile " + profile.getId() + ": " + e.getMessage(),
                             profile.getLocation(""),
                             e);
                     return false;

File: maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileSelector.java
Patch:
@@ -119,7 +119,8 @@ private boolean isActive(Profile profile, ProfileActivationContext context, Mode
                     }
                 } catch (RuntimeException e) {
                     problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE)
-                            .setMessage("Failed to determine activation for profile " + profile.getId())
+                            .setMessage("Failed to determine activation for profile " + profile.getId() + ": "
+                                    + e.getMessage())
                             .setLocation(profile.getLocation(""))
                             .setException(e));
                     return false;

File: maven-api-impl/src/main/java/org/apache/maven/internal/impl/model/DefaultDependencyManagementImporter.java
Patch:
@@ -78,7 +78,7 @@ public Model importManagement(
                                 Severity.WARNING,
                                 Version.V40,
                                 "Ignored POM import for: " + toString(dependency) + " as already imported "
-                                        + toString(present) + ".  Add a the conflicting managed dependency directly "
+                                        + toString(present) + ". Add the conflicting managed dependency directly "
                                         + "to the dependencyManagement section of the POM.");
                     }
                 }

File: maven-model-builder/src/main/java/org/apache/maven/model/composition/DefaultDependencyManagementImporter.java
Patch:
@@ -70,7 +70,7 @@ public Model importManagement(
                         problems.add(new ModelProblemCollectorRequest(
                                         ModelProblem.Severity.WARNING, ModelProblem.Version.V40)
                                 .setMessage("Ignored POM import for: " + toString(dependency) + " as already imported "
-                                        + toString(present) + ".  Add a the conflicting managed dependency directly "
+                                        + toString(present) + ". Add the conflicting managed dependency directly "
                                         + "to the dependencyManagement section of the POM."));
                     }
                 }

File: maven-core/src/test/java/org/apache/maven/internal/transformation/impl/ConsumerPomBuilderTest.java
Patch:
@@ -18,7 +18,6 @@
  */
 package org.apache.maven.internal.transformation.impl;
 
-import javax.annotation.Priority;
 import javax.inject.Inject;
 import javax.inject.Named;
 import javax.inject.Singleton;
@@ -43,6 +42,7 @@
 import org.apache.maven.model.v4.MavenStaxReader;
 import org.apache.maven.project.MavenProject;
 import org.eclipse.aether.DefaultRepositorySystemSession;
+import org.eclipse.sisu.Priority;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertNotNull;

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/LifecycleRegistry.java
Patch:
@@ -18,16 +18,14 @@
  */
 package org.apache.maven.api.services;
 
-import java.util.List;
 import java.util.stream.Stream;
 import java.util.stream.StreamSupport;
 
 import org.apache.maven.api.Lifecycle;
 
 public interface LifecycleRegistry extends ExtensibleEnumRegistry<Lifecycle>, Iterable<Lifecycle> {
+
     default Stream<Lifecycle> stream() {
         return StreamSupport.stream(spliterator(), false);
     }
-
-    List<String> computePhases(Lifecycle lifecycle);
 }

File: maven-core/src/main/java/org/apache/maven/internal/impl/DefaultPackagingRegistry.java
Patch:
@@ -104,7 +104,7 @@ private Map<String, PluginContainer> getPlugins(LifecycleMapping lifecycleMappin
         return lfs;
     }
 
-    private void parseLifecyclePhaseDefinitions(Map<String, Plugin> plugins, String phase, LifecyclePhase goals) {
+    static void parseLifecyclePhaseDefinitions(Map<String, Plugin> plugins, String phase, LifecyclePhase goals) {
         InputSource inputSource =
                 new InputSource(DefaultLifecyclePluginAnalyzer.DEFAULTLIFECYCLEBINDINGS_MODELID, null);
         InputLocation location = new InputLocation(-1, -1, inputSource, 0);

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/ExecutionPlanItem.java
Patch:
@@ -68,6 +68,6 @@ public Plugin getPlugin() {
 
     @Override
     public String toString() {
-        return "ExecutionPlanItem{" + ", mojoExecution=" + mojoExecution + '}' + super.toString();
+        return "ExecutionPlanItem{" + mojoExecution.toString() + "}@" + Integer.toHexString(hashCode());
     }
 }

File: maven-core/src/test/java/org/apache/maven/lifecycle/DefaultLifecyclesTest.java
Patch:
@@ -96,7 +96,8 @@ void testCustomLifecycle() throws ComponentLookupException {
         when(mockedPlexusContainer.lookupMap(Lifecycle.class)).thenReturn(lifeCycles);
 
         DefaultLifecycles dl = new DefaultLifecycles(
-                new DefaultLifecycleRegistry(Collections.emptyList(), Collections.emptyMap()),
+                new DefaultLifecycleRegistry(
+                        List.of(new DefaultLifecycleRegistry.LifecycleWrapperProvider(mockedPlexusContainer))),
                 new DefaultLookup(mockedPlexusContainer));
 
         assertThat(dl.getLifeCycles().get(0).getId(), is("clean"));

File: maven-core/src/test/java/org/apache/maven/lifecycle/MavenExecutionPlanTest.java
Patch:
@@ -38,8 +38,6 @@ void testFindLastInPhase() throws Exception {
         MavenExecutionPlan plan = LifecycleExecutionPlanCalculatorStub.getProjectAExecutionPlan();
 
         ExecutionPlanItem expected = plan.findLastInPhase("package");
-        ExecutionPlanItem beerPhase = plan.findLastInPhase("BEER"); // Beer comes straight after package in stub
-        assertEquals(expected, beerPhase);
         assertNotNull(expected);
     }
 

File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java
Patch:
@@ -48,6 +48,7 @@
 import org.apache.maven.api.model.Exclusion;
 import org.apache.maven.api.model.InputSource;
 import org.apache.maven.api.services.VersionParserException;
+import org.apache.maven.api.services.model.ModelVersionParser;
 import org.apache.maven.building.Source;
 import org.apache.maven.model.Activation;
 import org.apache.maven.model.Build;
@@ -89,7 +90,6 @@
 import org.apache.maven.model.v4.MavenTransformer;
 import org.apache.maven.model.validation.DefaultModelValidator;
 import org.apache.maven.model.validation.ModelValidator;
-import org.apache.maven.model.version.ModelVersionParser;
 import org.codehaus.plexus.interpolation.InterpolationException;
 import org.codehaus.plexus.interpolation.Interpolator;
 import org.codehaus.plexus.interpolation.MapBasedValueSource;

File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilderFactory.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.maven.api.Version;
 import org.apache.maven.api.VersionConstraint;
 import org.apache.maven.api.VersionRange;
+import org.apache.maven.api.services.model.ModelVersionParser;
 import org.apache.maven.api.spi.ModelParser;
 import org.apache.maven.model.Model;
 import org.apache.maven.model.composition.DefaultDependencyManagementImporter;
@@ -74,7 +75,6 @@
 import org.apache.maven.model.superpom.SuperPomProvider;
 import org.apache.maven.model.validation.DefaultModelValidator;
 import org.apache.maven.model.validation.ModelValidator;
-import org.apache.maven.model.version.ModelVersionParser;
 
 import static java.util.Objects.requireNonNull;
 

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelVersionParser.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.maven.api.VersionConstraint;
 import org.apache.maven.api.VersionRange;
 import org.apache.maven.api.services.VersionParserException;
-import org.apache.maven.model.version.ModelVersionParser;
+import org.apache.maven.api.services.model.ModelVersionParser;
 import org.eclipse.aether.version.InvalidVersionSpecificationException;
 import org.eclipse.aether.version.VersionScheme;
 

File: maven-resolver-provider/src/test/java/org/apache/maven/repository/internal/ModelVersionParserTest.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.apache.maven.api.VersionConstraint;
 import org.apache.maven.api.services.VersionParserException;
-import org.apache.maven.model.version.ModelVersionParser;
+import org.apache.maven.api.services.model.ModelVersionParser;
 import org.eclipse.aether.util.version.GenericVersionScheme;
 import org.junit.jupiter.api.Test;
 

File: maven-resolver-provider/src/test/java/org/apache/maven/repository/internal/VersionRangeTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.maven.api.Version;
 import org.apache.maven.api.VersionRange;
 import org.apache.maven.api.services.VersionParserException;
-import org.apache.maven.model.version.ModelVersionParser;
+import org.apache.maven.api.services.model.ModelVersionParser;
 import org.eclipse.aether.util.version.GenericVersionScheme;
 import org.junit.jupiter.api.Test;
 

File: maven-resolver-provider/src/test/java/org/apache/maven/repository/internal/VersionTest.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.stream.Stream;
 
 import org.apache.maven.api.Version;
-import org.apache.maven.model.version.ModelVersionParser;
+import org.apache.maven.api.services.model.ModelVersionParser;
 import org.eclipse.aether.util.version.GenericVersionScheme;
 import org.junit.jupiter.api.Test;
 

File: maven-core/src/main/java/org/apache/maven/internal/impl/DefaultSession.java
Patch:
@@ -21,6 +21,7 @@
 import java.nio.file.Path;
 import java.time.Instant;
 import java.util.*;
+import java.util.concurrent.ConcurrentHashMap;
 
 import org.apache.maven.RepositoryUtils;
 import org.apache.maven.api.*;
@@ -49,7 +50,7 @@ public class DefaultSession extends AbstractSession implements InternalMavenSess
     private final MavenSession mavenSession;
     private final MavenRepositorySystem mavenRepositorySystem;
     private final RuntimeInformation runtimeInformation;
-    private final Map<String, Project> allProjects = Collections.synchronizedMap(new WeakHashMap<>());
+    private final Map<String, Project> allProjects = new ConcurrentHashMap<>();
 
     @SuppressWarnings("checkstyle:ParameterNumber")
     public DefaultSession(

File: api/maven-api-core/src/main/java/org/apache/maven/api/Toolchain.java
Patch:
@@ -30,7 +30,7 @@
 @Experimental
 public interface Toolchain {
     /**
-     * get the type of toolchain.
+     * Gets the type of toolchain.
      *
      * @return the toolchain type
      */
@@ -47,7 +47,8 @@ public interface Toolchain {
     /**
      * Let the toolchain decide if it matches requirements defined
      * in the toolchain plugin configuration.
-     * @param requirements Map&lt;String, String&gt; key value pair, may not be {@code null}
+     *
+     * @param requirements key value pair, may not be {@code null}
      * @return {@code true} if the requirements match, otherwise {@code false}
      */
     boolean matchesRequirements(Map<String, String> requirements);

File: maven-core/src/main/java/org/apache/maven/internal/impl/DefaultDependencyResolver.java
Patch:
@@ -91,12 +91,12 @@ public DependencyResolverResult resolve(DependencyResolverRequest request)
                 .collect(Collectors.toList());
         Map<Artifact, Path> artifacts = session.resolveArtifacts(coordinates);
         DefaultDependencyResolverResult result = new DefaultDependencyResolverResult(
-                collectorResult.getExceptions(), collectorResult.getRoot(), nodes.size());
+                cache, collectorResult.getExceptions(), collectorResult.getRoot(), nodes.size());
         for (Node node : nodes) {
             Dependency d = node.getDependency();
             Path path = (d != null) ? artifacts.get(d) : null;
             try {
-                result.addDependency(node, d, filter, path, cache);
+                result.addDependency(node, d, filter, path);
             } catch (IOException e) {
                 throw cannotReadModuleInfo(path, e);
             }

File: maven-embedder/src/main/java/org/fusesource/jansi/Ansi.java
Patch:
@@ -825,7 +825,7 @@ public Ansi a(StringBuffer value) {
 
     public Ansi newline() {
         flushAttributes();
-        builder.append(System.getProperty("line.separator"));
+        builder.append(System.lineSeparator());
         return this;
     }
 

File: maven-api-impl/src/test/java/org/apache/maven/internal/impl/standalone/ApiRunner.java
Patch:
@@ -153,6 +153,7 @@ protected DefaultSession(
             super(session, repositorySystem, repositories, resolverRepositories, lookup);
             systemProperties = System.getenv().entrySet().stream()
                     .collect(Collectors.toMap(e -> "env." + e.getKey(), e -> e.getValue()));
+            System.getProperties().forEach((k, v) -> systemProperties.put(k.toString(), v.toString()));
         }
 
         @Override

File: maven-core/src/main/java/org/apache/maven/internal/transformation/impl/DefaultConsumerPomBuilder.java
Patch:
@@ -193,7 +193,7 @@ public List<Profile> getActiveProfiles(
                 dependencyManagementImporter,
                 lifecycleBindingsInjector,
                 pluginConfigurationExpander,
-                null,
+                profileActivationFilePathInterpolator,
                 modelTransformer,
                 versionParser);
         ModelBuilderRequest.ModelBuilderRequestBuilder request = ModelBuilderRequest.builder();
@@ -216,8 +216,8 @@ public List<Profile> getActiveProfiles(
                     .sorted()
                     .distinct()
                     .toList();
-            logger.info("ModelCache contains " + paths.size());
-            paths.forEach(s -> logger.info("    " + s));
+            logger.debug("ModelCache contains " + paths.size());
+            paths.forEach(s -> logger.debug("    " + s));
         }
         return modelBuilder.build(request.build());
     }

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/ModelCache.java
Patch:
@@ -16,12 +16,10 @@
  * specific language governing permissions and limitations
  * under the License.
  */
-package org.apache.maven.api.services.model;
+package org.apache.maven.api.services;
 
 import java.util.function.Supplier;
 
-import org.apache.maven.api.services.Source;
-
 /**
  * Caches auxiliary data used during model building like already processed raw/effective models. The data in the cache
  * is meant for exclusive consumption by the model builder and is opaque to the cache implementation. The cache key is

File: maven-api-impl/src/main/java/org/apache/maven/internal/impl/DefaultArtifactResolver.java
Patch:
@@ -76,7 +76,7 @@ public ArtifactResolverResult resolve(ArtifactResolverRequest request)
             }
             return () -> paths;
         } catch (ArtifactResolutionException e) {
-            throw new ArtifactResolverException("Unable to resolve artifact", e);
+            throw new ArtifactResolverException("Unable to resolve artifact: " + e.getMessage(), e);
         }
     }
 }

File: maven-api-impl/src/main/java/org/apache/maven/internal/impl/DefaultBuilderProblem.java
Patch:
@@ -76,7 +76,7 @@ public Severity getSeverity() {
     @Override
     public String getLocation() {
         StringBuilder buffer = new StringBuilder(256);
-        if (!getSource().isEmpty()) {
+        if (getSource() != null && !getSource().isEmpty()) {
             buffer.append(getSource());
         }
         if (getLineNumber() > 0) {

File: maven-api-impl/src/test/java/org/apache/maven/internal/impl/standalone/RepositorySystemSupplier.java
Patch:
@@ -1033,8 +1033,7 @@ protected ModelBuilder createModelBuilder() {
                 new DefaultPluginConfigurationExpander(),
                 new ProfileActivationFilePathInterpolator(new DefaultPathTranslator(), new DefaultRootLocator()),
                 new BuildModelTransformer(),
-                new DefaultModelVersionParser(getVersionScheme()),
-                getRemoteRepositoryManager());
+                new DefaultModelVersionParser(getVersionScheme()));
     }
 
     private RepositorySystem repositorySystem;

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenRepositorySystemSupplier.java
Patch:
@@ -1061,8 +1061,7 @@ protected ModelBuilder createModelBuilder() {
                 new DefaultPluginConfigurationExpander(),
                 new ProfileActivationFilePathInterpolator(new DefaultPathTranslator(), new DefaultRootLocator()),
                 new BuildModelTransformer(),
-                new DefaultModelVersionParser(getVersionScheme()),
-                getRemoteRepositoryManager());
+                new DefaultModelVersionParser(getVersionScheme()));
     }
 
     private RepositorySystem repositorySystem;

File: its/core-it-suite/src/test/java/org/apache/maven/it/TestSuiteOrdering.java
Patch:
@@ -120,6 +120,7 @@ public TestSuiteOrdering() {
          * the tests are to finishing. Newer tests are also more likely to fail, so this is
          * a fail fast technique as well.
          */
+        suite.addTestSuite(MavenITmng8106OverlappingDirectoryRolesTest.class);
         suite.addTestSuite(MavenITmng8005IdeWorkspaceReaderUsedTest.class);
         suite.addTestSuite(MavenITmng7967ArtifactHandlerLanguageTest.class);
         suite.addTestSuite(MavenITmng7965PomDuplicateTagsTest.class);

File: maven-api-impl/src/main/java/org/apache/maven/internal/impl/AbstractSession.java
Patch:
@@ -94,7 +94,6 @@ public AbstractSession(
         this.repositorySystem = repositorySystem;
         this.repositories = getRepositories(repositories, resolverRepositories);
         this.lookup = lookup;
-        this.session.getData().set(InternalSession.class, this);
     }
 
     @Override
@@ -155,13 +154,13 @@ public List<org.eclipse.aether.graph.Dependency> toDependencies(
         return dependencies == null ? null : map(dependencies, d -> toDependency(d, managed));
     }
 
-    protected List<RemoteRepository> getRepositories(
+    static List<RemoteRepository> getRepositories(
             List<RemoteRepository> repositories,
             List<org.eclipse.aether.repository.RemoteRepository> resolverRepositories) {
         if (repositories != null) {
             return repositories;
         } else if (resolverRepositories != null) {
-            return map(resolverRepositories, this::getRemoteRepository);
+            return map(resolverRepositories, DefaultRemoteRepository::new);
         } else {
             throw new IllegalArgumentException("no remote repositories provided");
         }

File: maven-api-impl/src/test/java/org/apache/maven/internal/impl/standalone/ApiRunner.java
Patch:
@@ -414,6 +414,7 @@ static Session newSession(RepositorySystem system, Lookup lookup) {
                 .map(repositoryFactory::createRemote)
                 .toList();
         InternalSession s = (InternalSession) session.withRemoteRepositories(repositories);
+        InternalSession.associate(rsession, s);
         return s;
 
         // List<RemoteRepository> repositories = repositoryFactory.createRemote();

File: maven-compat/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java
Patch:
@@ -35,6 +35,7 @@
 import org.apache.maven.execution.MavenExecutionRequest;
 import org.apache.maven.execution.MavenSession;
 import org.apache.maven.internal.impl.DefaultSession;
+import org.apache.maven.internal.impl.InternalSession;
 import org.apache.maven.model.Build;
 import org.apache.maven.model.Dependency;
 import org.apache.maven.model.Exclusion;
@@ -128,6 +129,7 @@ protected MavenSession createMavenSession(File pom, Properties executionProperti
                 getContainer(), configuration.getRepositorySession(), request, new DefaultMavenExecutionResult());
         DefaultSession iSession =
                 new DefaultSession(session, mock(org.eclipse.aether.RepositorySystem.class), null, null, null, null);
+        InternalSession.associate(session.getRepositorySession(), iSession);
         session.setSession(iSession);
 
         List<MavenProject> projects = new ArrayList<>();

File: maven-compat/src/test/java/org/apache/maven/project/AbstractMavenProjectTestCase.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.maven.execution.MavenSession;
 import org.apache.maven.internal.impl.DefaultLookup;
 import org.apache.maven.internal.impl.DefaultSession;
+import org.apache.maven.internal.impl.InternalSession;
 import org.apache.maven.model.building.ModelBuildingException;
 import org.apache.maven.model.building.ModelProblem;
 import org.apache.maven.repository.RepositorySystem;
@@ -153,12 +154,13 @@ protected void initRepoSession(ProjectBuildingRequest request) {
         DefaultMavenExecutionRequest mavenExecutionRequest = new DefaultMavenExecutionRequest();
         MavenSession msession =
                 new MavenSession(getContainer(), session, mavenExecutionRequest, new DefaultMavenExecutionResult());
-        new DefaultSession(
+        DefaultSession iSession = new DefaultSession(
                 msession,
                 mock(org.eclipse.aether.RepositorySystem.class),
                 null,
                 null,
                 new DefaultLookup(container),
                 null);
+        InternalSession.associate(session, iSession);
     }
 }

File: maven-compat/src/test/java/org/apache/maven/repository/LegacyRepositorySystemTest.java
Patch:
@@ -122,6 +122,7 @@ void testThatASystemScopedDependencyIsNotResolvedFromRepositories() throws Excep
                 new MavenSession(container, session, mavenExecutionRequest, new DefaultMavenExecutionResult());
         legacySupport.setSession(mavenSession);
         InternalSession iSession = new DefaultSession(mavenSession, null, null, null, null, null);
+        InternalSession.associate(session, iSession);
 
         ArtifactResolutionResult result = repositorySystem.resolve(request);
         resolutionErrorHandler.throwErrors(request, result);

File: maven-core/src/main/java/org/apache/maven/internal/impl/DefaultSessionFactory.java
Patch:
@@ -50,7 +50,9 @@ public DefaultSessionFactory(
     }
 
     public InternalSession newSession(MavenSession mavenSession) {
-        return new DefaultSession(
+        InternalSession session = new DefaultSession(
                 mavenSession, repositorySystem, null, mavenRepositorySystem, lookup, runtimeInformation);
+        InternalSession.associate(mavenSession.getRepositorySession(), session);
+        return session;
     }
 }

File: maven-core/src/test/java/org/apache/maven/MavenTestHelper.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.maven.execution.DefaultMavenExecutionResult;
 import org.apache.maven.execution.MavenSession;
 import org.apache.maven.internal.impl.DefaultSession;
+import org.apache.maven.internal.impl.InternalSession;
 import org.eclipse.aether.DefaultRepositorySystemSession;
 
 public class MavenTestHelper {
@@ -31,6 +32,7 @@ public static DefaultRepositorySystemSession createSession(MavenRepositorySystem
         DefaultMavenExecutionRequest request = new DefaultMavenExecutionRequest();
         MavenSession mavenSession = new MavenSession(repoSession, request, new DefaultMavenExecutionResult());
         DefaultSession session = new DefaultSession(mavenSession, null, null, repositorySystem, null, null);
+        InternalSession.associate(repoSession, session);
         return repoSession;
     }
 }

File: maven-core/src/test/java/org/apache/maven/internal/impl/TestApi.java
Patch:
@@ -123,6 +123,7 @@ void setup() {
                 new RemoteRepository.Builder("mirror", "default", "file:target/test-classes/repo").build());
         this.session = session.withLocalRepository(localRepository)
                 .withRemoteRepositories(Collections.singletonList(remoteRepository));
+        InternalSession.associate(rss, this.session);
         sessionScope.enter();
         sessionScope.seed(InternalMavenSession.class, InternalMavenSession.from(this.session));
     }

File: maven-core/src/test/java/org/apache/maven/internal/transformation/AbstractRepositoryTestCase.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.maven.execution.DefaultMavenExecutionResult;
 import org.apache.maven.execution.MavenSession;
 import org.apache.maven.internal.impl.DefaultSession;
+import org.apache.maven.internal.impl.InternalSession;
 import org.codehaus.plexus.PlexusContainer;
 import org.codehaus.plexus.testing.PlexusTest;
 import org.eclipse.aether.DefaultRepositorySystemSession;
@@ -71,6 +72,7 @@ public static RepositorySystemSession newMavenRepositorySystemSession(Repository
         DefaultMavenExecutionRequest request = new DefaultMavenExecutionRequest();
         MavenSession mavenSession = new MavenSession(rsession, request, new DefaultMavenExecutionResult());
         DefaultSession session = new DefaultSession(mavenSession, null, null, null, null, null);
+        InternalSession.associate(rsession, session);
 
         return rsession;
     }

File: maven-core/src/test/java/org/apache/maven/model/ModelBuilderTest.java
Patch:
@@ -70,6 +70,7 @@ void testModelBuilder() throws Exception {
         MavenSession msession = new MavenSession(rsession, mavenRequest, new DefaultMavenExecutionResult());
         InternalSession session =
                 new DefaultSession(msession, repositorySystem, null, mavenRepositorySystem, null, null);
+        InternalSession.associate(rsession, session);
 
         List<ProjectBuildingResult> results = projectBuilder.build(
                 Collections.singletonList(new File("src/test/resources/projects/tree/pom.xml")), true, request);

File: maven-embedder/src/main/java/org/apache/maven/cli/internal/BootstrapCoreExtensionManager.java
Patch:
@@ -53,6 +53,7 @@
 import org.apache.maven.internal.impl.DefaultSession;
 import org.apache.maven.internal.impl.DefaultVersionParser;
 import org.apache.maven.internal.impl.DefaultVersionRangeResolver;
+import org.apache.maven.internal.impl.InternalSession;
 import org.apache.maven.plugin.PluginResolutionException;
 import org.apache.maven.plugin.internal.DefaultPluginDependenciesResolver;
 import org.apache.maven.resolver.MavenChainedWorkspaceReader;
@@ -130,7 +131,8 @@ public List<CoreExtensionEntry> loadCoreExtensions(
                 .setWorkspaceReader(new MavenChainedWorkspaceReader(request.getWorkspaceReader(), ideWorkspaceReader))
                 .build()) {
             MavenSession mSession = new MavenSession(repoSession, request, new DefaultMavenExecutionResult());
-            new SimpleSession(mSession, repoSystem, null);
+            InternalSession iSession = new SimpleSession(mSession, repoSystem, null);
+            InternalSession.associate(repoSession, iSession);
 
             List<RemoteRepository> repositories = RepositoryUtils.toRepos(request.getPluginArtifactRepositories());
             Interpolator interpolator = createInterpolator(request);

File: maven-plugin-api/src/main/java/org/apache/maven/plugin/descriptor/PluginDescriptorBuilder.java
Patch:
@@ -41,6 +41,9 @@
 import org.codehaus.plexus.configuration.PlexusConfigurationException;
 
 /**
+ * Build plugin descriptor object from {@code plugin.xml}.
+ *
+ * @author Jason van Zyl
  */
 public class PluginDescriptorBuilder {
 

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/type/DefaultTypeProvider.java
Patch:
@@ -57,6 +57,7 @@ public Collection<DefaultType> types() {
                         JavaPathType.PATCH_MODULE),
                 new DefaultType(Type.MODULAR_JAR, Language.JAVA_FAMILY, "jar", null, false, JavaPathType.MODULES),
                 new DefaultType(Type.CLASSPATH_JAR, Language.JAVA_FAMILY, "jar", null, false, JavaPathType.CLASSES),
+                new DefaultType(Type.FATJAR, Language.JAVA_FAMILY, "jar", null, true, JavaPathType.CLASSES),
                 // j2ee types
                 new DefaultType("ejb", Language.JAVA_FAMILY, "jar", null, false, JavaPathType.CLASSES),
                 new DefaultType("ejb-client", Language.JAVA_FAMILY, "jar", "client", false, JavaPathType.CLASSES),

File: api/maven-api-core/src/main/java/org/apache/maven/api/ExtensibleEnum.java
Patch:
@@ -22,6 +22,8 @@
 import org.apache.maven.api.annotations.Nonnull;
 
 /**
+ * Interface that defines some kind of enums that can be extended by Maven plugins or extensions.
+ *
  * Implementation must have {@code equals()} and {@code hashCode()} implemented, so implementations of this interface
  * can be used as keys.
  *

File: maven-artifact/src/test/java/org/apache/maven/artifact/handler/ArtifactHandlerMock.java
Patch:
@@ -77,11 +77,13 @@ public String getLanguage() {
         return language;
     }
 
+    @Deprecated
     public void setAddedToClasspath(boolean addedToClasspath) {
         this.addedToClasspath = addedToClasspath;
     }
 
     @Override
+    @Deprecated
     public boolean isAddedToClasspath() {
         return addedToClasspath;
     }

File: maven-compat/src/test/java/org/apache/maven/repository/TestArtifactHandler.java
Patch:
@@ -65,6 +65,7 @@ public String getPackaging() {
     }
 
     @Override
+    @Deprecated
     public boolean isAddedToClasspath() {
         return true;
     }

File: maven-core/src/main/java/org/apache/maven/artifact/handler/DefaultArtifactHandler.java
Patch:
@@ -37,6 +37,7 @@ public class DefaultArtifactHandler implements ArtifactHandler {
 
     private String language;
 
+    @Deprecated
     private boolean addedToClasspath;
 
     /**
@@ -146,10 +147,12 @@ public void setLanguage(final String language) {
     }
 
     @Override
+    @Deprecated
     public boolean isAddedToClasspath() {
         return addedToClasspath;
     }
 
+    @Deprecated
     public void setAddedToClasspath(final boolean addedToClasspath) {
         this.addedToClasspath = addedToClasspath;
     }

File: maven-core/src/main/java/org/apache/maven/artifact/handler/manager/DefaultArtifactHandlerManager.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 
+import org.apache.maven.api.JavaPathType;
 import org.apache.maven.api.Type;
 import org.apache.maven.api.services.TypeRegistry;
 import org.apache.maven.artifact.handler.ArtifactHandler;
@@ -72,7 +73,8 @@ public ArtifactHandler getArtifactHandler(String id) {
                     null,
                     type.isIncludesDependencies(),
                     type.getLanguage().id(),
-                    type.isBuildPathConstituent());
+                    type.getPathTypes().contains(JavaPathType.CLASSES));
+            // TODO: watch out for module path
         });
 
         // Note: here, type decides is artifact added to "build path" (for example during resolution)

File: maven-core/src/main/java/org/apache/maven/internal/aether/TypeRegistryAdapter.java
Patch:
@@ -18,6 +18,7 @@
  */
 package org.apache.maven.internal.aether;
 
+import org.apache.maven.api.PathType;
 import org.apache.maven.api.Type;
 import org.apache.maven.api.services.TypeRegistry;
 import org.apache.maven.repository.internal.type.DefaultType;
@@ -45,8 +46,8 @@ public ArtifactType get(String typeId) {
                     type.getLanguage(),
                     type.getExtension(),
                     type.getClassifier(),
-                    type.isBuildPathConstituent(),
-                    type.isIncludesDependencies());
+                    type.isIncludesDependencies(),
+                    type.getPathTypes().toArray(new PathType[0]));
         }
         return null;
     }

File: maven-core/src/main/java/org/apache/maven/internal/impl/DefaultDependency.java
Patch:
@@ -34,6 +34,7 @@
 import static org.apache.maven.internal.impl.Utils.nonNull;
 
 public class DefaultDependency implements Dependency {
+
     private final InternalSession session;
     private final org.eclipse.aether.graph.Dependency dependency;
     private final String key;

File: maven-core/src/main/java/org/apache/maven/internal/transformation/impl/TransformedArtifactHandler.java
Patch:
@@ -62,6 +62,7 @@ public String getPackaging() {
     }
 
     @Override
+    @Deprecated
     public boolean isAddedToClasspath() {
         return false;
     }

File: maven-core/src/main/java/org/apache/maven/project/artifact/PluginArtifact.java
Patch:
@@ -83,6 +83,7 @@ public String getPackaging() {
         }
 
         @Override
+        @Deprecated
         public boolean isAddedToClasspath() {
             return true;
         }

File: maven-core/src/main/java/org/apache/maven/project/artifact/ProjectArtifact.java
Patch:
@@ -88,6 +88,7 @@ public String getPackaging() {
         }
 
         @Override
+        @Deprecated
         public boolean isAddedToClasspath() {
             return false;
         }

File: maven-core/src/test/java/org/apache/maven/internal/impl/TestArtifactHandler.java
Patch:
@@ -65,6 +65,7 @@ public String getPackaging() {
     }
 
     @Override
+    @Deprecated
     public boolean isAddedToClasspath() {
         return true;
     }

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/ArtifactDescriptorReaderDelegate.java
Patch:
@@ -95,7 +95,7 @@ private Dependency convert(org.apache.maven.model.Dependency dependency, Artifac
         ArtifactType stereotype = stereotypes.get(dependency.getType());
         if (stereotype == null) {
             // TODO: this here is fishy
-            stereotype = new DefaultType(dependency.getType(), Language.NONE, "", null, false, false);
+            stereotype = new DefaultType(dependency.getType(), Language.NONE, "", null, false);
         }
 
         boolean system = dependency.getSystemPath() != null

File: maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java
Patch:
@@ -159,6 +159,7 @@ public boolean equals(Object o) {
     }
 
     protected final Map<Key, CacheRecord> cache = new ConcurrentHashMap<>();
+    protected final Map<Key, Key> keys = new ConcurrentHashMap<>();
 
     @Override
     public Key createKey(
@@ -167,13 +168,14 @@ public Key createKey(
             Collection<String> scopesToResolve,
             boolean aggregating,
             RepositorySystemSession session) {
-        return new CacheKey(
+        Key key = new CacheKey(
                 project,
                 project.getRemoteProjectRepositories(),
                 scopesToCollect,
                 scopesToResolve,
                 aggregating,
                 session);
+        return keys.computeIfAbsent(key, k -> k);
     }
 
     @Override

File: maven-builder-support/src/main/java/org/apache/maven/building/DefaultProblem.java
Patch:
@@ -75,7 +75,7 @@ public int getColumnNumber() {
     public String getLocation() {
         StringBuilder buffer = new StringBuilder(256);
 
-        if (getSource().length() > 0) {
+        if (!getSource().isEmpty()) {
             if (buffer.length() > 0) {
                 buffer.append(", ");
             }
@@ -106,7 +106,7 @@ public Exception getException() {
     public String getMessage() {
         String msg;
 
-        if (message != null && message.length() > 0) {
+        if (message != null && !message.isEmpty()) {
             msg = message;
         } else {
             msg = exception.getMessage();

File: maven-builder-support/src/main/java/org/apache/maven/building/DefaultProblemCollector.java
Patch:
@@ -27,7 +27,7 @@
  */
 class DefaultProblemCollector implements ProblemCollector {
 
-    private List<Problem> problems;
+    private final List<Problem> problems;
 
     private String source;
 

File: maven-builder-support/src/main/java/org/apache/maven/building/UrlSource.java
Patch:
@@ -87,6 +87,6 @@ public boolean equals(Object obj) {
         }
 
         UrlSource other = (UrlSource) obj;
-        return this.url.equals(other.url);
+        return Objects.equals(url.toExternalForm(), other.url.toExternalForm());
     }
 }

File: maven-builder-support/src/test/java/org/apache/maven/building/FileSourceTest.java
Patch:
@@ -32,7 +32,9 @@ class FileSourceTest {
     @Test
     void testFileSource() {
         NullPointerException e = assertThrows(
-                NullPointerException.class, () -> new FileSource(null), "Should fail, since you must specify a file");
+                NullPointerException.class,
+                () -> new FileSource((File) null),
+                "Should fail, since you must specify a file");
         assertEquals("file cannot be null", e.getMessage());
     }
 

File: maven-compat/src/test/java/org/apache/maven/project/ClasspathArtifactResolver.java
Patch:
@@ -31,6 +31,7 @@
 import org.eclipse.aether.RepositorySystemSession;
 import org.eclipse.aether.artifact.Artifact;
 import org.eclipse.aether.impl.ArtifactResolver;
+import org.eclipse.aether.repository.RemoteRepository;
 import org.eclipse.aether.resolution.ArtifactRequest;
 import org.eclipse.aether.resolution.ArtifactResolutionException;
 import org.eclipse.aether.resolution.ArtifactResult;
@@ -63,7 +64,7 @@ public List<ArtifactResult> resolveArtifacts(
                     throw new IllegalStateException("Missing test POM for " + artifact, e);
                 }
             } else {
-                result.addException(new ArtifactNotFoundException(artifact, null));
+                result.addException(new ArtifactNotFoundException(artifact, (RemoteRepository) null));
                 throw new ArtifactResolutionException(results);
             }
         }

File: maven-core/src/test/java/org/apache/maven/internal/impl/TestApi.java
Patch:
@@ -103,7 +103,7 @@ void setup() {
         // create session with any local repo, is redefined anyway below
         RepositorySystemSession rss = new MavenSessionBuilderSupplier(repositorySystem)
                 .get()
-                .withLocalRepositoryBaseDirectories(new File("target"))
+                .withLocalRepositoryBaseDirectories(new File("target").toPath())
                 .build();
         DefaultMavenExecutionRequest mer = new DefaultMavenExecutionRequest();
         DefaultMavenExecutionResult meres = new DefaultMavenExecutionResult();

File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/PathTranslatingPostProcessor.java
Patch:
@@ -18,7 +18,7 @@
  */
 package org.apache.maven.model.interpolation;
 
-import java.io.File;
+import java.nio.file.Path;
 import java.util.Collection;
 import java.util.List;
 
@@ -32,14 +32,14 @@
 class PathTranslatingPostProcessor implements InterpolationPostProcessor {
 
     private final Collection<String> unprefixedPathKeys;
-    private final File projectDir;
+    private final Path projectDir;
     private final PathTranslator pathTranslator;
     private final List<String> expressionPrefixes;
 
     PathTranslatingPostProcessor(
             List<String> expressionPrefixes,
             Collection<String> unprefixedPathKeys,
-            File projectDir,
+            Path projectDir,
             PathTranslator pathTranslator) {
         this.expressionPrefixes = expressionPrefixes;
         this.unprefixedPathKeys = unprefixedPathKeys;

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java
Patch:
@@ -211,10 +211,10 @@ private Model loadPom(
                         remoteRepositoryManager,
                         request.getRepositories()));
                 if (resolveResult.getRepository() instanceof WorkspaceRepository) {
-                    modelRequest.setPomFile(pomArtifact.getFile());
+                    modelRequest.setPomPath(pomArtifact.getPath());
                 } else {
                     modelRequest.setModelSource(new ArtifactModelSource(
-                            pomArtifact.getFile(),
+                            pomArtifact.getPath(),
                             pomArtifact.getGroupId(),
                             pomArtifact.getArtifactId(),
                             pomArtifact.getVersion()));

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java
Patch:
@@ -159,7 +159,7 @@ public ModelSource resolveModel(String groupId, String artifactId, String versio
             throw new UnresolvableModelException(e.getMessage(), groupId, artifactId, version, e);
         }
 
-        return new ArtifactModelSource(pomArtifact.getFile(), groupId, artifactId, version);
+        return new ArtifactModelSource(pomArtifact.getPath(), groupId, artifactId, version);
     }
 
     @Override

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionRangeResolver.java
Patch:
@@ -200,9 +200,8 @@ private Versioning readVersions(
                 try (SyncContext syncContext = syncContextFactory.newInstance(session, true)) {
                     syncContext.acquire(null, Collections.singleton(metadata));
 
-                    if (metadata.getFile() != null && metadata.getFile().exists()) {
-                        try (InputStream in =
-                                Files.newInputStream(metadata.getFile().toPath())) {
+                    if (metadata.getPath() != null && Files.exists(metadata.getPath())) {
+                        try (InputStream in = Files.newInputStream(metadata.getPath())) {
                             versioning = new Versioning(
                                     new MetadataStaxReader().read(in, false).getVersioning());
                         }

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/LocalSnapshotMetadataGenerator.java
Patch:
@@ -38,7 +38,7 @@
  */
 class LocalSnapshotMetadataGenerator implements MetadataGenerator {
 
-    private Map<Object, LocalSnapshotMetadata> snapshots;
+    private final Map<Object, LocalSnapshotMetadata> snapshots;
 
     private final Date timestamp;
 

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenSnapshotMetadata.java
Patch:
@@ -18,7 +18,7 @@
  */
 package org.apache.maven.repository.internal;
 
-import java.io.File;
+import java.nio.file.Path;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Date;
@@ -33,8 +33,8 @@ abstract class MavenSnapshotMetadata extends MavenMetadata {
 
     protected final Collection<Artifact> artifacts = new ArrayList<>();
 
-    protected MavenSnapshotMetadata(Metadata metadata, File file, Date timestamp) {
-        super(metadata, file, timestamp);
+    protected MavenSnapshotMetadata(Metadata metadata, Path path, Date timestamp) {
+        super(metadata, path, timestamp);
     }
 
     protected static Metadata createRepositoryMetadata(Artifact artifact) {

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/PluginsMetadataGenerator.java
Patch:
@@ -115,8 +115,8 @@ private PluginInfo extractPluginInfo(Artifact artifact) {
         if (artifact != null
                 && "jar".equals(artifact.getExtension())
                 && "".equals(artifact.getClassifier())
-                && artifact.getFile() != null) {
-            Path artifactPath = artifact.getFile().toPath();
+                && artifact.getPath() != null) {
+            Path artifactPath = artifact.getPath();
             if (Files.isRegularFile(artifactPath)) {
                 try (JarFile artifactJar = new JarFile(artifactPath.toFile(), false)) {
                     ZipEntry pluginDescriptorEntry = artifactJar.getEntry(PLUGIN_DESCRIPTOR_LOCATION);

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java
Patch:
@@ -370,7 +370,7 @@ ProjectBuildingResult build(Artifact artifact, boolean allowStubModel) throws Pr
 
             File pomFile = pomArtifact.getFile();
 
-            if ("pom".equals(artifact.getType())) {
+            if (!artifact.isResolved() && "pom".equals(artifact.getType())) {
                 artifact.selectVersion(pomArtifact.getVersion());
                 artifact.setFile(pomFile);
                 artifact.setResolved(true);

File: maven-di/src/main/java/org/apache/maven/di/Injector.java
Patch:
@@ -32,6 +32,8 @@ static Injector create() {
         return new InjectorImpl();
     }
 
+    Injector discover(ClassLoader classLoader);
+
     Injector bindScope(Class<? extends Annotation> scopeAnnotation, Scope scope);
 
     Injector bindImplicit(Class<?> cls);

File: maven-di/src/main/java/org/apache/maven/di/Key.java
Patch:
@@ -24,7 +24,6 @@
 
 import org.apache.maven.api.annotations.Nullable;
 import org.apache.maven.di.impl.ReflectionUtils;
-import org.apache.maven.di.impl.TypeUtils;
 import org.apache.maven.di.impl.Types;
 import org.apache.maven.di.impl.Utils;
 
@@ -54,12 +53,12 @@ protected Key() {
     }
 
     protected Key(@Nullable Object qualifier) {
-        this.type = TypeUtils.simplifyType(getTypeParameter());
+        this.type = Types.simplifyType(getTypeParameter());
         this.qualifier = qualifier;
     }
 
     protected Key(Type type, @Nullable Object qualifier) {
-        this.type = TypeUtils.simplifyType(type);
+        this.type = Types.simplifyType(type);
         this.qualifier = qualifier;
     }
 

File: src/mdo/java/InputLocation.java
Patch:
@@ -16,7 +16,7 @@
  * specific language governing permissions and limitations
  * under the License.
  */
-package org.apache.maven.api.settings;
+package ${package};
 
 import java.io.Serializable;
 import java.util.Collection;

File: src/mdo/java/InputLocationTracker.java
Patch:
@@ -16,7 +16,7 @@
  * specific language governing permissions and limitations
  * under the License.
  */
-package org.apache.maven.api.settings;
+package ${package};
 
 public interface InputLocationTracker {
     InputLocation getLocation(Object field);

File: src/mdo/java/InputSource.java
Patch:
@@ -16,7 +16,7 @@
  * specific language governing permissions and limitations
  * under the License.
  */
-package org.apache.maven.api.settings;
+package ${package};
 
 import java.io.Serializable;
 

File: maven-core/src/main/java/org/apache/maven/internal/aether/TypeRegistryAdapter.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.apache.maven.api.Type;
 import org.apache.maven.api.services.TypeRegistry;
-import org.apache.maven.internal.impl.DefaultType;
+import org.apache.maven.repository.internal.type.DefaultType;
 import org.eclipse.aether.artifact.ArtifactType;
 import org.eclipse.aether.artifact.ArtifactTypeRegistry;
 

File: maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java
Patch:
@@ -29,10 +29,10 @@
 import java.util.Objects;
 
 import org.apache.maven.RepositoryUtils;
+import org.apache.maven.api.DependencyScope;
 import org.apache.maven.model.Dependency;
 import org.apache.maven.model.Plugin;
 import org.apache.maven.plugin.PluginResolutionException;
-import org.apache.maven.repository.internal.scopes.MavenDependencyScopes;
 import org.eclipse.aether.DefaultRepositorySystemSession;
 import org.eclipse.aether.RepositorySystem;
 import org.eclipse.aether.RepositorySystemSession;
@@ -211,8 +211,8 @@ private DependencyResult resolveInternal(
             for (Dependency dependency : plugin.getDependencies()) {
                 org.eclipse.aether.graph.Dependency pluginDep =
                         RepositoryUtils.toDependency(dependency, session.getArtifactTypeRegistry());
-                if (!MavenDependencyScopes.SYSTEM.equals(pluginDep.getScope())) {
-                    pluginDep = pluginDep.setScope(MavenDependencyScopes.RUNTIME);
+                if (!DependencyScope.SYSTEM.is(pluginDep.getScope())) {
+                    pluginDep = pluginDep.setScope(DependencyScope.RUNTIME.id());
                 }
                 request.addDependency(pluginDep);
             }

File: maven-core/src/main/java/org/apache/maven/plugin/internal/Maven3CompatDependenciesValidator.java
Patch:
@@ -22,8 +22,8 @@
 import javax.inject.Named;
 import javax.inject.Singleton;
 
+import org.apache.maven.api.DependencyScope;
 import org.apache.maven.plugin.PluginValidationManager;
-import org.apache.maven.repository.internal.scopes.MavenDependencyScopes;
 import org.eclipse.aether.RepositorySystemSession;
 import org.eclipse.aether.artifact.Artifact;
 import org.eclipse.aether.resolution.ArtifactDescriptorResult;
@@ -50,7 +50,7 @@ protected void doValidate(
         for (org.eclipse.aether.graph.Dependency dependency : artifactDescriptorResult.getDependencies()) {
             if ("org.apache.maven".equals(dependency.getArtifact().getGroupId())
                     && "maven-compat".equals(dependency.getArtifact().getArtifactId())
-                    && !MavenDependencyScopes.TEST.equals(dependency.getScope())) {
+                    && !DependencyScope.TEST.is(dependency.getScope())) {
                 pluginValidationManager.reportPluginValidationIssue(
                         PluginValidationManager.IssueLocality.EXTERNAL,
                         session,

File: maven-core/src/main/java/org/apache/maven/plugin/internal/MavenScopeDependenciesValidator.java
Patch:
@@ -25,8 +25,8 @@
 import java.util.Set;
 import java.util.stream.Collectors;
 
+import org.apache.maven.api.DependencyScope;
 import org.apache.maven.plugin.PluginValidationManager;
-import org.apache.maven.repository.internal.scopes.MavenDependencyScopes;
 import org.eclipse.aether.RepositorySystemSession;
 import org.eclipse.aether.artifact.Artifact;
 import org.eclipse.aether.resolution.ArtifactDescriptorResult;
@@ -51,8 +51,7 @@ protected void doValidate(
             Artifact pluginArtifact,
             ArtifactDescriptorResult artifactDescriptorResult) {
         Set<String> mavenArtifacts = artifactDescriptorResult.getDependencies().stream()
-                .filter(d -> !MavenDependencyScopes.PROVIDED.equals(d.getScope())
-                        && !MavenDependencyScopes.TEST.equals(d.getScope()))
+                .filter(d -> !DependencyScope.PROVIDED.is(d.getScope()) && !DependencyScope.TEST.is(d.getScope()))
                 .map(org.eclipse.aether.graph.Dependency::getArtifact)
                 .filter(a -> "org.apache.maven".equals(a.getGroupId()))
                 .filter(a -> !DefaultPluginValidationManager.EXPECTED_PROVIDED_SCOPE_EXCLUSIONS_GA.contains(

File: maven-core/src/main/java/org/apache/maven/project/DefaultModelBuildingListener.java
Patch:
@@ -40,9 +40,9 @@ public class DefaultModelBuildingListener extends AbstractModelBuildingListener
 
     private final MavenProject project;
 
-    private ProjectBuildingHelper projectBuildingHelper;
+    private final ProjectBuildingHelper projectBuildingHelper;
 
-    private ProjectBuildingRequest projectBuildingRequest;
+    private final ProjectBuildingRequest projectBuildingRequest;
 
     private List<ArtifactRepository> remoteRepositories;
 

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java
Patch:
@@ -29,11 +29,11 @@
 import java.util.Objects;
 
 import org.apache.maven.RepositoryUtils;
+import org.apache.maven.api.DependencyScope;
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.model.Dependency;
 import org.apache.maven.model.DependencyManagement;
 import org.apache.maven.model.Exclusion;
-import org.apache.maven.repository.internal.scopes.MavenDependencyScopes;
 import org.eclipse.aether.DefaultRepositorySystemSession;
 import org.eclipse.aether.RepositorySystem;
 import org.eclipse.aether.RepositorySystemSession;
@@ -130,7 +130,7 @@ public DependencyResolutionResult resolve(DependencyResolutionRequest request)
                 Dependency dependency = dependencies.get(key);
                 Collection<Exclusion> exclusions = dependency != null ? dependency.getExclusions() : null;
                 org.eclipse.aether.graph.Dependency dep = RepositoryUtils.toDependency(artifact, exclusions);
-                if (!MavenDependencyScopes.SYSTEM.equals(dep.getScope())
+                if (!DependencyScope.SYSTEM.is(dep.getScope())
                         && dep.getArtifact().getFile() != null) {
                     // enable re-resolution
                     org.eclipse.aether.artifact.Artifact art = dep.getArtifact();

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/scopes/MavenDependencyContextRefiner.java
Patch:
@@ -37,6 +37,9 @@
  */
 public final class MavenDependencyContextRefiner implements DependencyGraphTransformer {
 
+    public MavenDependencyContextRefiner() {}
+
+    @Override
     public DependencyNode transformGraph(DependencyNode node, DependencyGraphTransformationContext context)
             throws RepositoryException {
         requireNonNull(node, "node cannot be null");

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/scopes/MavenScopeDeriver.java
Patch:
@@ -30,9 +30,6 @@
  */
 public final class MavenScopeDeriver extends ScopeDeriver {
 
-    /**
-     * Creates a new instance of this scope deriver.
-     */
     public MavenScopeDeriver() {}
 
     @Override

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/scopes/MavenScopeSelector.java
Patch:
@@ -37,9 +37,6 @@
  */
 public final class MavenScopeSelector extends ScopeSelector {
 
-    /**
-     * Creates a new instance of this scope selector.
-     */
     public MavenScopeSelector() {}
 
     @Override

File: api/maven-api-core/src/main/java/org/apache/maven/api/DependencyCoordinate.java
Patch:
@@ -41,7 +41,7 @@ public interface DependencyCoordinate extends ArtifactCoordinate {
     Type getType();
 
     @Nonnull
-    Scope getScope();
+    DependencyScope getScope();
 
     @Nullable
     Boolean getOptional();

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/DependencyCoordinateFactoryRequest.java
Patch:
@@ -89,7 +89,7 @@ static DependencyCoordinateFactoryRequest build(@Nonnull Session session, @Nonnu
                 .version(dependency.getVersion().asString())
                 .classifier(dependency.getClassifier())
                 .extension(dependency.getExtension())
-                .type(dependency.getType().getId())
+                .type(dependency.getType().id())
                 .scope(dependency.getScope().id())
                 .optional(dependency.isOptional())
                 .build();

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/TypeRegistry.java
Patch:
@@ -18,7 +18,6 @@
  */
 package org.apache.maven.api.services;
 
-import org.apache.maven.api.Service;
 import org.apache.maven.api.Type;
 import org.apache.maven.api.annotations.Experimental;
 import org.apache.maven.api.annotations.Nonnull;
@@ -29,7 +28,7 @@
  * @since 4.0.0
  */
 @Experimental
-public interface TypeRegistry extends Service {
+public interface TypeRegistry extends ExtensibleEnumRegistry<Type> {
 
     /**
      * Obtain the {@link Type} from the specified {@code id}.
@@ -40,5 +39,5 @@ public interface TypeRegistry extends Service {
      * @return the type
      */
     @Nonnull
-    Type getType(@Nonnull String id);
+    Type require(@Nonnull String id);
 }

File: maven-core/src/main/java/org/apache/maven/internal/impl/types/BomTypeProvider.java
Patch:
@@ -22,8 +22,8 @@
 import javax.inject.Provider;
 import javax.inject.Singleton;
 
+import org.apache.maven.api.Language;
 import org.apache.maven.api.Type;
-import org.apache.maven.internal.impl.DefaultDependencyProperties;
 import org.apache.maven.internal.impl.DefaultType;
 
 @Named(BomTypeProvider.NAME)
@@ -34,7 +34,7 @@ public class BomTypeProvider implements Provider<Type> {
     private final Type type;
 
     public BomTypeProvider() {
-        this.type = new DefaultType(NAME, Type.LANGUAGE_NONE, "pom", null, new DefaultDependencyProperties());
+        this.type = new DefaultType(NAME, Language.NONE, "pom", null, false, false);
     }
 
     @Override

File: maven-core/src/main/java/org/apache/maven/internal/impl/types/JavaSourceTypeProvider.java
Patch:
@@ -22,8 +22,8 @@
 import javax.inject.Provider;
 import javax.inject.Singleton;
 
+import org.apache.maven.api.Language;
 import org.apache.maven.api.Type;
-import org.apache.maven.internal.impl.DefaultDependencyProperties;
 import org.apache.maven.internal.impl.DefaultType;
 
 @Named(JavaSourceTypeProvider.NAME)
@@ -34,7 +34,7 @@ public class JavaSourceTypeProvider implements Provider<Type> {
     private final Type type;
 
     public JavaSourceTypeProvider() {
-        this.type = new DefaultType(NAME, Type.LANGUAGE_JAVA, "jar", "sources", new DefaultDependencyProperties());
+        this.type = new DefaultType(NAME, Language.JAVA_FAMILY, "jar", "sources", false, false);
     }
 
     @Override

File: maven-core/src/main/java/org/apache/maven/internal/impl/types/PomTypeProvider.java
Patch:
@@ -22,8 +22,8 @@
 import javax.inject.Provider;
 import javax.inject.Singleton;
 
+import org.apache.maven.api.Language;
 import org.apache.maven.api.Type;
-import org.apache.maven.internal.impl.DefaultDependencyProperties;
 import org.apache.maven.internal.impl.DefaultType;
 
 @Named(PomTypeProvider.NAME)
@@ -34,7 +34,7 @@ public class PomTypeProvider implements Provider<Type> {
     private final Type type;
 
     public PomTypeProvider() {
-        this.type = new DefaultType(NAME, Type.LANGUAGE_NONE, "pom", null, new DefaultDependencyProperties());
+        this.type = new DefaultType(NAME, Language.NONE, "pom", null, false, false);
     }
 
     @Override

File: maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.maven.execution.DefaultMavenExecutionResult;
 import org.apache.maven.execution.MavenExecutionRequest;
 import org.apache.maven.execution.MavenSession;
+import org.apache.maven.internal.impl.DefaultLookup;
 import org.apache.maven.internal.impl.DefaultSessionFactory;
 import org.apache.maven.model.Build;
 import org.apache.maven.model.Dependency;
@@ -149,7 +150,7 @@ protected MavenSession createMavenSession(File pom, Properties executionProperti
         initRepoSession(configuration);
 
         DefaultSessionFactory defaultSessionFactory =
-                new DefaultSessionFactory(mock(RepositorySystem.class), null, null, null);
+                new DefaultSessionFactory(mock(RepositorySystem.class), null, new DefaultLookup(container), null);
 
         MavenSession session = new MavenSession(
                 getContainer(), configuration.getRepositorySession(), request, new DefaultMavenExecutionResult());

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/scopes/MavenDependencyScopes.java
Patch:
@@ -18,6 +18,8 @@
  */
 package org.apache.maven.repository.internal.scopes;
 
+import org.eclipse.aether.util.artifact.DependencyScopes;
+
 /**
  * The dependency scopes used for Java dependencies in Maven. This class defines labels only, that are doing pass-thru
  * over Resolver.
@@ -28,10 +30,8 @@ public final class MavenDependencyScopes {
 
     /**
      * Important: keep this label in sync with Resolver.
-     *
-     * TODO: once Resolver 2.0.0-alpha-7 is out, use org.eclipse.aether.util.artifact.DependencyScopes#SYSTEM
      */
-    public static final String SYSTEM = "system";
+    public static final String SYSTEM = DependencyScopes.SYSTEM;
 
     public static final String COMPILE_ONLY = "compile-only";
 

File: maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java
Patch:
@@ -36,7 +36,7 @@
 import org.apache.maven.internal.xml.XmlNodeImpl;
 import org.apache.maven.internal.xml.XmlPlexusConfiguration;
 import org.apache.maven.model.ModelBase;
-import org.apache.maven.repository.internal.MavenRepositorySystemUtils;
+import org.apache.maven.repository.internal.MavenSessionBuilderSupplier;
 import org.apache.maven.resolver.RepositorySystemSessionFactory;
 import org.apache.maven.rtinfo.RuntimeInformation;
 import org.apache.maven.settings.Mirror;
@@ -220,8 +220,8 @@ public SessionBuilder newRepositorySessionBuilder(MavenExecutionRequest request)
             requestExtender.extend(request);
         }
 
-        SessionBuilder sessionBuilder = MavenRepositorySystemUtils.newSession(
-                repoSystem.createSessionBuilder(), new TypeRegistryAdapter(typeRegistry));
+        SessionBuilder sessionBuilder = new MavenSessionBuilderSupplier(repoSystem).get();
+        sessionBuilder.setArtifactTypeRegistry(new TypeRegistryAdapter(typeRegistry));
         sessionBuilder.setCache(request.getRepositoryCache());
 
         // this map is read ONLY to get config from (profiles + env + system + user)

File: maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.maven.model.Dependency;
 import org.apache.maven.model.Plugin;
 import org.apache.maven.plugin.PluginResolutionException;
+import org.apache.maven.repository.internal.scopes.MavenDependencyScopes;
 import org.eclipse.aether.DefaultRepositorySystemSession;
 import org.eclipse.aether.RepositorySystem;
 import org.eclipse.aether.RepositorySystemSession;
@@ -52,7 +53,6 @@
 import org.eclipse.aether.resolution.DependencyRequest;
 import org.eclipse.aether.resolution.DependencyResolutionException;
 import org.eclipse.aether.resolution.DependencyResult;
-import org.eclipse.aether.util.artifact.JavaScopes;
 import org.eclipse.aether.util.filter.AndDependencyFilter;
 import org.eclipse.aether.util.filter.ScopeDependencyFilter;
 import org.eclipse.aether.util.graph.manager.DependencyManagerUtils;
@@ -211,8 +211,8 @@ private DependencyResult resolveInternal(
             for (Dependency dependency : plugin.getDependencies()) {
                 org.eclipse.aether.graph.Dependency pluginDep =
                         RepositoryUtils.toDependency(dependency, session.getArtifactTypeRegistry());
-                if (!JavaScopes.SYSTEM.equals(pluginDep.getScope())) {
-                    pluginDep = pluginDep.setScope(JavaScopes.RUNTIME);
+                if (!MavenDependencyScopes.SYSTEM.equals(pluginDep.getScope())) {
+                    pluginDep = pluginDep.setScope(MavenDependencyScopes.RUNTIME);
                 }
                 request.addDependency(pluginDep);
             }

File: maven-core/src/main/java/org/apache/maven/plugin/internal/Maven3CompatDependenciesValidator.java
Patch:
@@ -23,10 +23,10 @@
 import javax.inject.Singleton;
 
 import org.apache.maven.plugin.PluginValidationManager;
+import org.apache.maven.repository.internal.scopes.MavenDependencyScopes;
 import org.eclipse.aether.RepositorySystemSession;
 import org.eclipse.aether.artifact.Artifact;
 import org.eclipse.aether.resolution.ArtifactDescriptorResult;
-import org.eclipse.aether.util.artifact.JavaScopes;
 
 /**
  * Detects Maven3 plugins using maven-compat Maven2 compatibility layer.
@@ -50,7 +50,7 @@ protected void doValidate(
         for (org.eclipse.aether.graph.Dependency dependency : artifactDescriptorResult.getDependencies()) {
             if ("org.apache.maven".equals(dependency.getArtifact().getGroupId())
                     && "maven-compat".equals(dependency.getArtifact().getArtifactId())
-                    && !JavaScopes.TEST.equals(dependency.getScope())) {
+                    && !MavenDependencyScopes.TEST.equals(dependency.getScope())) {
                 pluginValidationManager.reportPluginValidationIssue(
                         PluginValidationManager.IssueLocality.EXTERNAL,
                         session,

File: maven-core/src/main/java/org/apache/maven/plugin/internal/MavenScopeDependenciesValidator.java
Patch:
@@ -26,10 +26,10 @@
 import java.util.stream.Collectors;
 
 import org.apache.maven.plugin.PluginValidationManager;
+import org.apache.maven.repository.internal.scopes.MavenDependencyScopes;
 import org.eclipse.aether.RepositorySystemSession;
 import org.eclipse.aether.artifact.Artifact;
 import org.eclipse.aether.resolution.ArtifactDescriptorResult;
-import org.eclipse.aether.util.artifact.JavaScopes;
 
 /**
  * Detects Maven3 dependencies scope.
@@ -51,7 +51,8 @@ protected void doValidate(
             Artifact pluginArtifact,
             ArtifactDescriptorResult artifactDescriptorResult) {
         Set<String> mavenArtifacts = artifactDescriptorResult.getDependencies().stream()
-                .filter(d -> !JavaScopes.PROVIDED.equals(d.getScope()) && !JavaScopes.TEST.equals(d.getScope()))
+                .filter(d -> !MavenDependencyScopes.PROVIDED.equals(d.getScope())
+                        && !MavenDependencyScopes.TEST.equals(d.getScope()))
                 .map(org.eclipse.aether.graph.Dependency::getArtifact)
                 .filter(a -> "org.apache.maven".equals(a.getGroupId()))
                 .filter(a -> !DefaultPluginValidationManager.EXPECTED_PROVIDED_SCOPE_EXCLUSIONS_GA.contains(

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.maven.model.Dependency;
 import org.apache.maven.model.DependencyManagement;
 import org.apache.maven.model.Exclusion;
+import org.apache.maven.repository.internal.scopes.MavenDependencyScopes;
 import org.eclipse.aether.DefaultRepositorySystemSession;
 import org.eclipse.aether.RepositorySystem;
 import org.eclipse.aether.RepositorySystemSession;
@@ -47,7 +48,6 @@
 import org.eclipse.aether.resolution.ArtifactResult;
 import org.eclipse.aether.resolution.DependencyRequest;
 import org.eclipse.aether.util.artifact.ArtifactIdUtils;
-import org.eclipse.aether.util.artifact.JavaScopes;
 import org.eclipse.aether.util.graph.manager.DependencyManagerUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -130,7 +130,7 @@ public DependencyResolutionResult resolve(DependencyResolutionRequest request)
                 Dependency dependency = dependencies.get(key);
                 Collection<Exclusion> exclusions = dependency != null ? dependency.getExclusions() : null;
                 org.eclipse.aether.graph.Dependency dep = RepositoryUtils.toDependency(artifact, exclusions);
-                if (!JavaScopes.SYSTEM.equals(dep.getScope())
+                if (!MavenDependencyScopes.SYSTEM.equals(dep.getScope())
                         && dep.getArtifact().getFile() != null) {
                     // enable re-resolution
                     org.eclipse.aether.artifact.Artifact art = dep.getArtifact();

File: maven-core/src/test/java/org/apache/maven/internal/impl/DefaultSessionTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.maven.execution.DefaultMavenExecutionRequest;
 import org.apache.maven.execution.MavenSession;
 import org.apache.maven.model.root.RootLocator;
-import org.apache.maven.repository.internal.MavenRepositorySystemUtils;
+import org.eclipse.aether.DefaultRepositorySystemSession;
 import org.eclipse.aether.RepositorySystem;
 import org.eclipse.aether.RepositorySystemSession;
 import org.junit.jupiter.api.Test;
@@ -37,7 +37,7 @@ public class DefaultSessionTest {
 
     @Test
     void testRootDirectoryWithNull() {
-        RepositorySystemSession rss = MavenRepositorySystemUtils.newSession();
+        RepositorySystemSession rss = new DefaultRepositorySystemSession(h -> false);
         DefaultMavenExecutionRequest mer = new DefaultMavenExecutionRequest();
         MavenSession ms = new MavenSession(null, rss, mer, null);
         DefaultSession session =
@@ -51,7 +51,7 @@ void testRootDirectoryWithNull() {
 
     @Test
     void testRootDirectory() {
-        RepositorySystemSession rss = MavenRepositorySystemUtils.newSession();
+        RepositorySystemSession rss = new DefaultRepositorySystemSession(h -> false);
         DefaultMavenExecutionRequest mer = new DefaultMavenExecutionRequest();
         MavenSession ms = new MavenSession(null, rss, mer, null);
         ms.getRequest().setRootDirectory(Paths.get("myRootDirectory"));

File: maven-core/src/test/java/org/apache/maven/internal/transformation/AbstractRepositoryTestCase.java
Patch:
@@ -22,7 +22,6 @@
 
 import java.net.MalformedURLException;
 
-import org.apache.maven.repository.internal.MavenRepositorySystemUtils;
 import org.codehaus.plexus.PlexusContainer;
 import org.codehaus.plexus.testing.PlexusTest;
 import org.eclipse.aether.DefaultRepositorySystemSession;
@@ -57,7 +56,7 @@ protected PlexusContainer getContainer() {
     }
 
     public static RepositorySystemSession newMavenRepositorySystemSession(RepositorySystem system) {
-        DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();
+        DefaultRepositorySystemSession session = new DefaultRepositorySystemSession(h -> false);
 
         LocalRepository localRepo = new LocalRepository("target/local-repo");
         session.setLocalRepositoryManager(system.newLocalRepositoryManager(session, localRepo));

File: maven-core/src/test/java/org/apache/maven/project/AbstractMavenProjectTestCase.java
Patch:
@@ -30,7 +30,6 @@
 import org.apache.maven.bridge.MavenRepositorySystem;
 import org.apache.maven.model.building.ModelBuildingException;
 import org.apache.maven.model.building.ModelProblem;
-import org.apache.maven.repository.internal.MavenRepositorySystemUtils;
 import org.codehaus.plexus.PlexusContainer;
 import org.codehaus.plexus.testing.PlexusTest;
 import org.eclipse.aether.DefaultRepositoryCache;
@@ -145,7 +144,7 @@ protected ProjectBuildingRequest newBuildingRequest() throws Exception {
 
     protected void initRepoSession(ProjectBuildingRequest request) {
         File localRepo = new File(request.getLocalRepository().getBasedir());
-        DefaultRepositorySystemSession repoSession = MavenRepositorySystemUtils.newSession();
+        DefaultRepositorySystemSession repoSession = new DefaultRepositorySystemSession(h -> false);
         repoSession.setCache(new DefaultRepositoryCache());
         repoSession.setLocalRepositoryManager(new LegacyLocalRepositoryManager(localRepo));
         request.setRepositorySession(repoSession);

File: maven-core/src/test/java/org/apache/maven/project/PomConstructionTest.java
Patch:
@@ -37,7 +37,6 @@
 import org.apache.maven.model.ReportSet;
 import org.apache.maven.model.building.ModelBuildingRequest;
 import org.apache.maven.project.harness.PomTestWrapper;
-import org.apache.maven.repository.internal.MavenRepositorySystemUtils;
 import org.codehaus.plexus.testing.PlexusTest;
 import org.eclipse.aether.DefaultRepositorySystemSession;
 import org.eclipse.aether.internal.impl.SimpleLocalRepositoryManagerFactory;
@@ -1887,7 +1886,7 @@ private PomTestWrapper buildPom(
                         ? ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0
                         : ModelBuildingRequest.VALIDATION_LEVEL_STRICT);
 
-        DefaultRepositorySystemSession repoSession = MavenRepositorySystemUtils.newSession();
+        DefaultRepositorySystemSession repoSession = new DefaultRepositorySystemSession(h -> false);
         LocalRepository localRepo =
                 new LocalRepository(config.getLocalRepository().getBasedir());
         repoSession.setLocalRepositoryManager(

File: maven-core/src/test/java/org/apache/maven/project/ProjectModelResolverTest.java
Patch:
@@ -29,7 +29,6 @@
 import org.apache.maven.model.Parent;
 import org.apache.maven.model.resolution.ModelResolver;
 import org.apache.maven.model.resolution.UnresolvableModelException;
-import org.apache.maven.repository.internal.MavenRepositorySystemUtils;
 import org.eclipse.aether.DefaultRepositorySystemSession;
 import org.eclipse.aether.RepositorySystem;
 import org.eclipse.aether.impl.RemoteRepositoryManager;
@@ -191,7 +190,7 @@ void testResolveDependencySuccessfullyResolvesExistingDependencyUsingHighestVers
 
     private ModelResolver newModelResolver() throws Exception {
         final File localRepo = new File(this.getLocalRepository().getBasedir());
-        final DefaultRepositorySystemSession repoSession = MavenRepositorySystemUtils.newSession();
+        final DefaultRepositorySystemSession repoSession = new DefaultRepositorySystemSession(h -> false);
         repoSession.setLocalRepositoryManager(new LegacyLocalRepositoryManager(localRepo));
 
         return new ProjectModelResolver(

File: maven-core/src/test/java/org/apache/maven/settings/PomConstructionWithSettingsTest.java
Patch:
@@ -34,7 +34,6 @@
 import org.apache.maven.project.DefaultProjectBuildingRequest;
 import org.apache.maven.project.ProjectBuildingRequest;
 import org.apache.maven.project.harness.PomTestWrapper;
-import org.apache.maven.repository.internal.MavenRepositorySystemUtils;
 import org.apache.maven.settings.v4.SettingsStaxReader;
 import org.codehaus.plexus.testing.PlexusTest;
 import org.eclipse.aether.DefaultRepositorySystemSession;
@@ -111,7 +110,7 @@ private PomTestWrapper buildPom(String pomPath) throws Exception {
                 "local", localRepoUrl, new DefaultRepositoryLayout(), null, null));
         config.setActiveProfileIds(settings.getActiveProfiles());
 
-        DefaultRepositorySystemSession repoSession = MavenRepositorySystemUtils.newSession();
+        DefaultRepositorySystemSession repoSession = new DefaultRepositorySystemSession(h -> false);
         LocalRepository localRepo =
                 new LocalRepository(config.getLocalRepository().getBasedir());
         repoSession.setLocalRepositoryManager(

File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuildingRequest.java
Patch:
@@ -252,8 +252,8 @@ public Properties getSystemProperties() {
     public DefaultModelBuildingRequest setSystemProperties(Properties systemProperties) {
         if (systemProperties != null) {
             this.systemProperties = new Properties();
-            synchronized (systemProperties) { // avoid concurrent modification if someone else sets/removes an unrelated
-                // system property
+            // avoid concurrent modification if someone else sets/removes an unrelated system property
+            synchronized (systemProperties) {
                 this.systemProperties.putAll(systemProperties);
             }
         } else {

File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultTransformerContextBuilder.java
Patch:
@@ -46,6 +46,8 @@ class DefaultTransformerContextBuilder implements TransformerContextBuilder {
 
     private final Map<String, Set<FileModelSource>> mappedSources = new ConcurrentHashMap<>(64);
 
+    private volatile boolean fullReactorLoaded;
+
     DefaultTransformerContextBuilder(DefaultModelBuilder defaultModelBuilder) {
         this.defaultModelBuilder = defaultModelBuilder;
         this.context = new DefaultTransformerContext(defaultModelBuilder.getModelProcessor());
@@ -60,8 +62,6 @@ public TransformerContext initialize(ModelBuildingRequest request, ModelProblemC
         DefaultModelProblemCollector problems = (DefaultModelProblemCollector) collector;
         return new TransformerContext() {
 
-            private volatile boolean fullReactorLoaded;
-
             @Override
             public Path locate(Path path) {
                 return context.locate(path);
@@ -119,7 +119,7 @@ private Model findRawModel(Path from, String groupId, String artifactId) {
 
             private void loadFullReactor() {
                 if (!fullReactorLoaded) {
-                    synchronized (this) {
+                    synchronized (DefaultTransformerContextBuilder.this) {
                         if (!fullReactorLoaded) {
                             doLoadFullReactor();
                             fullReactorLoaded = true;

File: maven-model-builder/src/main/java/org/apache/maven/model/building/ModelCache.java
Patch:
@@ -32,7 +32,7 @@
  */
 public interface ModelCache {
 
-    <T> T computeIfAbsent(String groupId, String artifactId, String version, String tag, Supplier<Supplier<T>> data);
+    <T> T computeIfAbsent(String groupId, String artifactId, String version, String tag, Supplier<T> data);
 
-    <T> T computeIfAbsent(Source path, String tag, Supplier<Supplier<T>> data);
+    <T> T computeIfAbsent(Source path, String tag, Supplier<T> data);
 }

File: maven-core/src/main/java/org/apache/maven/internal/aether/TypeRegistryAdapter.java
Patch:
@@ -26,10 +26,10 @@
 
 import static java.util.Objects.requireNonNull;
 
-public class TypeRegistryAdapter implements ArtifactTypeRegistry {
+class TypeRegistryAdapter implements ArtifactTypeRegistry {
     private final TypeRegistry typeRegistry;
 
-    public TypeRegistryAdapter(TypeRegistry typeRegistry) {
+    TypeRegistryAdapter(TypeRegistry typeRegistry) {
         this.typeRegistry = requireNonNull(typeRegistry, "typeRegistry");
     }
 

File: maven-core/src/main/java/org/apache/maven/resolver/MavenChainedWorkspaceReader.java
Patch:
@@ -16,7 +16,7 @@
  * specific language governing permissions and limitations
  * under the License.
  */
-package org.apache.maven.internal.aether;
+package org.apache.maven.resolver;
 
 import java.io.File;
 import java.util.*;

File: its/core-it-suite/src/test/java/org/apache/maven/it/TestSuiteOrdering.java
Patch:
@@ -120,6 +120,7 @@ public TestSuiteOrdering() {
          * the tests are to finishing. Newer tests are also more likely to fail, so this is
          * a fail fast technique as well.
          */
+        suite.addTestSuite(MavenITmng8005IdeWorkspaceReaderUsedTest.class);
         suite.addTestSuite(MavenITmng7967ArtifactHandlerLanguageTest.class);
         suite.addTestSuite(MavenITmng7965PomDuplicateTagsTest.class);
         suite.addTestSuite(MavenITmng7939PluginsValidationExcludesTest.class);

File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java
Patch:
@@ -1870,11 +1870,11 @@ private static <T> T cache(
             String version,
             ModelCacheTag<T> tag,
             Callable<T> supplier) {
-        return doWithCache(cache, supplier, s -> cache.computeIfAbsent(groupId, artifactId, version, tag, s));
+        return doWithCache(cache, supplier, s -> cache.computeIfAbsent(groupId, artifactId, version, tag.getName(), s));
     }
 
     private static <T> T cache(ModelCache cache, Source source, ModelCacheTag<T> tag, Callable<T> supplier) {
-        return doWithCache(cache, supplier, s -> cache.computeIfAbsent(source, tag, s));
+        return doWithCache(cache, supplier, s -> cache.computeIfAbsent(source, tag.getName(), s));
     }
 
     private static <T> T doWithCache(

File: maven-core/src/main/java/org/apache/maven/RepositoryUtils.java
Patch:
@@ -369,7 +369,7 @@ public static RepositorySystemSession overlay(
             }
             newSession = new DefaultRepositorySystemSession(session);
         } else {
-            newSession = new DefaultRepositorySystemSession();
+            newSession = new DefaultRepositorySystemSession(h -> false); // no close handle used
         }
 
         final LocalRepositoryManager llrm =

File: maven-core/src/test/java/org/apache/maven/plugin/PluginParameterExpressionEvaluatorV4Test.java
Patch:
@@ -312,7 +312,8 @@ private static MavenSession createSession(PlexusContainer container, ArtifactRep
                 .setBaseDirectory(new File(""))
                 .setLocalRepository(repo);
 
-        DefaultRepositorySystemSession repositorySession = new DefaultRepositorySystemSession();
+        DefaultRepositorySystemSession repositorySession =
+                new DefaultRepositorySystemSession(h -> false); // no close handle
         repositorySession.setLocalRepositoryManager(new SimpleLocalRepositoryManagerFactory()
                 .newInstance(repositorySession, new LocalRepository(repo.getUrl())));
         MavenSession session =

File: maven-embedder/src/test/java/org/apache/maven/cli/transfer/ConsoleMavenTransferListenerTest.java
Patch:
@@ -72,7 +72,7 @@ public void print(Object o) {
         TransferResource resource = new TransferResource(null, null, "http://maven.org/test/test-resource", null, null);
         resource.setContentLength(size - 1);
 
-        DefaultRepositorySystemSession session = new DefaultRepositorySystemSession();
+        DefaultRepositorySystemSession session = new DefaultRepositorySystemSession(h -> false); // no close handle
 
         // warm up
         test(listener, session, resource, 0);

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenRepositorySystemUtils.java
Patch:
@@ -63,7 +63,7 @@ private MavenRepositorySystemUtils() {
      */
     @Deprecated
     public static DefaultRepositorySystemSession newSession() {
-        DefaultRepositorySystemSession session = new DefaultRepositorySystemSession();
+        DefaultRepositorySystemSession session = new DefaultRepositorySystemSession(h -> false); // no close handle
 
         DependencyTraverser depTraverser = new FatArtifactTraverser();
         session.setDependencyTraverser(depTraverser);

File: maven-compat/src/test/java/org/apache/maven/artifact/AbstractArtifactComponentTestCase.java
Patch:
@@ -39,6 +39,7 @@
 import org.apache.maven.execution.DefaultMavenExecutionRequest;
 import org.apache.maven.execution.DefaultMavenExecutionResult;
 import org.apache.maven.execution.MavenSession;
+import org.apache.maven.internal.impl.DefaultLookup;
 import org.apache.maven.internal.impl.DefaultSessionFactory;
 import org.apache.maven.plugin.LegacySupport;
 import org.apache.maven.repository.legacy.repository.ArtifactRepositoryFactory;
@@ -107,7 +108,7 @@ public void setUp() throws Exception {
         new DefaultSessionFactory(
                         getContainer().lookup(RepositorySystem.class),
                         getContainer().lookup(MavenRepositorySystem.class),
-                        getContainer(),
+                        new DefaultLookup(getContainer()),
                         getContainer().lookup(RuntimeInformation.class))
                 .getSession(session);
 

File: maven-core/src/main/java/org/apache/maven/internal/transformation/impl/ConsumerPomBuilder.java
Patch:
@@ -26,7 +26,6 @@
 import org.apache.maven.api.model.Model;
 import org.apache.maven.model.building.ModelBuildingException;
 import org.apache.maven.project.MavenProject;
-import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
 import org.eclipse.aether.RepositorySystemSession;
 
 /**
@@ -36,5 +35,5 @@
 interface ConsumerPomBuilder {
 
     Model build(RepositorySystemSession session, MavenProject project, Path src)
-            throws ModelBuildingException, ComponentLookupException, IOException, XMLStreamException;
+            throws ModelBuildingException, IOException, XMLStreamException;
 }

File: maven-core/src/main/java/org/apache/maven/internal/transformation/impl/DefaultConsumerPomArtifactTransformer.java
Patch:
@@ -41,7 +41,6 @@
 import org.apache.maven.model.v4.MavenStaxWriter;
 import org.apache.maven.project.MavenProject;
 import org.apache.maven.project.artifact.ProjectArtifact;
-import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
 import org.eclipse.aether.RepositorySystemSession;
 import org.eclipse.aether.artifact.Artifact;
 import org.eclipse.aether.artifact.DefaultArtifact;
@@ -113,7 +112,7 @@ TransformedArtifact createConsumerPomArtifact(
     }
 
     void transform(MavenProject project, RepositorySystemSession session, Path src, Path tgt)
-            throws ModelBuildingException, ComponentLookupException, XMLStreamException, IOException {
+            throws ModelBuildingException, XMLStreamException, IOException {
         Model model = builder.build(session, project, src);
         write(model, tgt);
     }

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/BuildThreadFactory.java
Patch:
@@ -29,6 +29,7 @@ public class BuildThreadFactory implements ThreadFactory {
 
     private static final String PREFIX = "BuilderThread";
 
+    @Override
     public Thread newThread(Runnable r) {
         return new Thread(r, String.format("%s-%d", PREFIX, id.getAndIncrement()));
     }

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultExecutionEventCatapult.java
Patch:
@@ -36,10 +36,12 @@
 @Singleton
 public class DefaultExecutionEventCatapult implements ExecutionEventCatapult {
 
+    @Override
     public void fire(ExecutionEvent.Type eventType, MavenSession session, MojoExecution mojoExecution) {
         fire(eventType, session, mojoExecution, null);
     }
 
+    @Override
     public void fire(
             ExecutionEvent.Type eventType, MavenSession session, MojoExecution mojoExecution, Exception exception) {
         ExecutionListener listener = session.getRequest().getExecutionListener();

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecycleExecutionPlanCalculator.java
Patch:
@@ -106,8 +106,7 @@ public DefaultLifecycleExecutionPlanCalculator(
         this.lifecyclePluginResolver = lifecyclePluginResolver;
         this.standardDelegate = null;
         this.delegates = null;
-        this.mojoExecutionConfigurators =
-                Collections.singletonMap("default", (MojoExecutionConfigurator) new DefaultMojoExecutionConfigurator());
+        this.mojoExecutionConfigurators = Collections.singletonMap("default", new DefaultMojoExecutionConfigurator());
     }
 
     @Override

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecycleMappingDelegate.java
Patch:
@@ -60,6 +60,7 @@ public DefaultLifecycleMappingDelegate(BuildPluginManager pluginManager) {
         this.pluginManager = pluginManager;
     }
 
+    @Override
     public Map<String, List<MojoExecution>> calculateLifecycleMappings(
             MavenSession session, MavenProject project, Lifecycle lifecycle, String lifecyclePhase)
             throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException,

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleDependencyResolver.java
Patch:
@@ -346,7 +346,7 @@ private Collection<String> negate(Collection<String> scopes) {
 
     private static class ReactorDependencyFilter implements DependencyFilter {
 
-        private Set<String> keys = new HashSet<>();
+        private final Set<String> keys = new HashSet<>();
 
         ReactorDependencyFilter(Collection<Artifact> artifacts) {
             for (Artifact artifact : artifacts) {

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleStarter.java
Patch:
@@ -58,8 +58,6 @@ public class LifecycleStarter {
 
     private final Map<String, Builder> builders;
 
-    private final SessionScope sessionScope;
-
     @Inject
     public LifecycleStarter(
             ExecutionEventCatapult eventCatapult,
@@ -75,7 +73,6 @@ public LifecycleStarter(
         this.lifecycleDebugLogger = lifecycleDebugLogger;
         this.lifecycleTaskSegmentCalculator = lifecycleTaskSegmentCalculator;
         this.builders = builders;
-        this.sessionScope = sessionScope;
     }
 
     public void execute(MavenSession session) {

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoDescriptorCreator.java
Patch:
@@ -231,7 +231,7 @@ public MojoDescriptor getMojoDescriptor(String task, MavenSession session, Maven
         }
 
         return pluginManager.getMojoDescriptor(
-                plugin, goal.toString(), project.getRemotePluginRepositories(), session.getRepositorySession());
+                plugin, goal, project.getRemotePluginRepositories(), session.getRepositorySession());
     }
 
     // TODO take repo mans into account as one may be aggregating prefixes of many

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/ProjectBuildList.java
Patch:
@@ -76,6 +76,7 @@ public ProjectSegment findByMavenProject(MavenProject mavenProject) {
                 .orElse(null);
     }
 
+    @Override
     public Iterator<ProjectSegment> iterator() {
         return items.iterator();
     }

File: maven-core/src/test/java/org/apache/maven/internal/impl/TestApi.java
Patch:
@@ -114,7 +114,7 @@ void setup() {
                 repositorySystem,
                 Collections.emptyList(),
                 mavenRepositorySystem,
-                plexusContainer,
+                new DefaultLookup(plexusContainer),
                 runtimeInformation);
         DefaultLocalRepository localRepository =
                 new DefaultLocalRepository(new LocalRepository("target/test-classes/apiv4-repo"));

File: maven-core/src/test/java/org/apache/maven/lifecycle/DefaultLifecyclesTest.java
Patch:
@@ -27,6 +27,7 @@
 import java.util.Map;
 import java.util.stream.Collectors;
 
+import org.apache.maven.internal.impl.DefaultLookup;
 import org.codehaus.plexus.PlexusContainer;
 import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
 import org.codehaus.plexus.testing.PlexusTest;
@@ -93,7 +94,7 @@ void testCustomLifecycle() throws ComponentLookupException {
         PlexusContainer mockedPlexusContainer = mock(PlexusContainer.class);
         when(mockedPlexusContainer.lookupMap(Lifecycle.class)).thenReturn(lifeCycles);
 
-        DefaultLifecycles dl = new DefaultLifecycles(mockedPlexusContainer);
+        DefaultLifecycles dl = new DefaultLifecycles(new DefaultLookup(mockedPlexusContainer));
 
         assertThat(dl.getLifeCycles().get(0).getId(), is("clean"));
         assertThat(dl.getLifeCycles().get(1).getId(), is("default"));

File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/DefaultLifecyclesStub.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.List;
 import java.util.Map;
 
+import org.apache.maven.internal.impl.DefaultLookup;
 import org.apache.maven.lifecycle.DefaultLifecycles;
 import org.apache.maven.lifecycle.Lifecycle;
 import org.codehaus.plexus.PlexusContainer;
@@ -70,6 +71,6 @@ public static DefaultLifecycles createDefaultLifecycles() throws ComponentLookup
         PlexusContainer mockedContainer = mock(PlexusContainer.class);
         when(mockedContainer.lookupMap(Lifecycle.class)).thenReturn(lifeCycles);
 
-        return new DefaultLifecycles(mockedContainer);
+        return new DefaultLifecycles(new DefaultLookup(mockedContainer));
     }
 }

File: maven-core/src/main/java/org/apache/maven/extension/internal/CoreExportsProvider.java
Patch:
@@ -25,7 +25,7 @@
 
 import java.util.Objects;
 
-import org.codehaus.plexus.PlexusContainer;
+import org.apache.maven.internal.CoreRealm;
 
 /**
  * CoreExportsProvider
@@ -37,8 +37,8 @@ public class CoreExportsProvider implements Provider<CoreExports> {
     private final CoreExports exports;
 
     @Inject
-    public CoreExportsProvider(PlexusContainer container) {
-        this(new CoreExports(CoreExtensionEntry.discoverFrom(container.getContainerRealm())));
+    public CoreExportsProvider(CoreRealm coreRealm) {
+        this(new CoreExports(CoreExtensionEntry.discoverFrom(coreRealm.getRealm())));
     }
 
     public CoreExportsProvider(CoreExports exports) {

File: maven-core/src/test/java/org/apache/maven/classrealm/DefaultClassRealmManagerTest.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.List;
 
 import org.apache.maven.extension.internal.CoreExports;
+import org.apache.maven.internal.impl.internal.DefaultCoreRealm;
 import org.apache.maven.model.Model;
 import org.codehaus.plexus.DefaultPlexusContainer;
 import org.codehaus.plexus.PlexusContainer;
@@ -56,7 +57,7 @@ private DefaultClassRealmManager newDefaultClassRealmManager(PlexusContainer con
         exportedPackages.add("group1:artifact1");
 
         return new DefaultClassRealmManager(
-                container,
+                new DefaultCoreRealm(container),
                 new ArrayList<ClassRealmManagerDelegate>(),
                 new CoreExports(new ClassRealm(null, "test", null), new HashSet<String>(), exportedPackages));
     }

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleExecutionPlanCalculator.java
Patch:
@@ -40,13 +40,13 @@
  * @since 3.0
  */
 public interface LifecycleExecutionPlanCalculator {
-    MavenExecutionPlan calculateExecutionPlan(MavenSession session, MavenProject project, List<Object> tasks)
+    MavenExecutionPlan calculateExecutionPlan(MavenSession session, MavenProject project, List<Task> tasks)
             throws PluginNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException,
                     PluginDescriptorParsingException, MojoNotFoundException, InvalidPluginDescriptorException,
                     NoPluginFoundForPrefixException, LifecycleNotFoundException, PluginVersionResolutionException;
 
     MavenExecutionPlan calculateExecutionPlan(
-            MavenSession session, MavenProject project, List<Object> tasks, boolean setup)
+            MavenSession session, MavenProject project, List<Task> tasks, boolean setup)
             throws PluginNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException,
                     PluginDescriptorParsingException, MojoNotFoundException, InvalidPluginDescriptorException,
                     NoPluginFoundForPrefixException, LifecycleNotFoundException, PluginVersionResolutionException;

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/TaskSegment.java
Patch:
@@ -33,7 +33,7 @@ public final class TaskSegment {
 
     // Can be both "LifeCycleTask" (clean/install) and "GoalTask" (org.mortbay.jetty:maven-jetty-plugin:6.1.19:run)
 
-    private final List<Object> tasks;
+    private final List<Task> tasks;
 
     private final boolean aggregating;
 
@@ -42,7 +42,7 @@ public TaskSegment(boolean aggregating) {
         tasks = new ArrayList<>();
     }
 
-    public TaskSegment(boolean aggregating, Object... tasks) {
+    public TaskSegment(boolean aggregating, Task... tasks) {
         this.aggregating = aggregating;
         this.tasks = new ArrayList<>(Arrays.asList(tasks));
     }
@@ -52,7 +52,7 @@ public String toString() {
         return getTasks().toString();
     }
 
-    public List<Object> getTasks() {
+    public List<Task> getTasks() {
         return tasks;
     }
 

File: maven-core/src/test/java/org/apache/maven/lifecycle/LifecycleExecutorTest.java
Patch:
@@ -372,7 +372,7 @@ void testSetupMojoExecution() throws Exception {
 
         LifecycleTask task = new LifecycleTask("generate-sources");
         MavenExecutionPlan executionPlan = lifeCycleExecutionPlanCalculator.calculateExecutionPlan(
-                session, session.getCurrentProject(), Arrays.asList((Object) task), false);
+                session, session.getCurrentProject(), Arrays.asList(task), false);
 
         MojoExecution execution = executionPlan.getMojoExecutions().get(0);
         assertEquals("maven-it-plugin", execution.getArtifactId(), execution.toString());

File: maven-artifact/src/test/java/org/apache/maven/artifact/versioning/ComparableVersionTest.java
Patch:
@@ -399,7 +399,7 @@ public void testMng7714() {
         ComparableVersion sp2 = new ComparableVersion("1.0-sp-1-redhat");
         ComparableVersion sp3 = new ComparableVersion("1.0-sp.1-redhat");
         assertTrue(f.compareTo(sp1) < 0, "expected " + f + " < " + sp1);
-        assertTrue(f.compareTo(sp1) < 0, "expected " + f + " < " + sp2);
-        assertTrue(f.compareTo(sp1) < 0, "expected " + f + " < " + sp3);
+        assertTrue(f.compareTo(sp2) < 0, "expected " + f + " < " + sp2);
+        assertTrue(f.compareTo(sp3) < 0, "expected " + f + " < " + sp3);
     }
 }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng6127PluginExecutionConfigurationInterferenceTest.java
Patch:
@@ -59,6 +59,7 @@ public void testCustomMojoExecutionConfigurator() throws Exception {
         // build the test project
         verifier = newVerifier(projectDir.getAbsolutePath(), "remote");
         verifier.addCliArgument("verify");
+        verifier.addCliArgument("-X");
         verifier.execute();
         verifier.verifyErrorFreeLog();
 

File: maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java
Patch:
@@ -372,6 +372,7 @@ public SessionBuilder newRepositorySessionBuilder(MavenExecutionRequest request)
         session.setUserProperties(request.getUserProperties());
         session.setSystemProperties(request.getSystemProperties());
         session.setConfigProperties(configProps);
+        session.setIgnoreArtifactDescriptorRepositories(request.isIgnoreTransitiveRepositories());
 
         session.setTransferListener(request.getTransferListener());
 

File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -1304,6 +1304,8 @@ private MavenExecutionRequest populateRequest(CliRequest cliRequest, MavenExecut
             request.setIgnoreMissingArtifactDescriptor(true);
             request.setIgnoreInvalidArtifactDescriptor(true);
         }
+        enableOnPresentOption(
+                commandLine, CLIManager.IGNORE_TRANSITIVE_REPOSITORIES, request::setIgnoreTransitiveRepositories);
 
         performProjectActivation(commandLine, request.getProjectActivation());
         performProfileActivation(commandLine, request.getProfileActivation());

File: maven-core/src/main/java/org/apache/maven/internal/impl/DefaultArtifact.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.maven.api.ArtifactCoordinate;
 import org.apache.maven.api.Version;
 import org.apache.maven.api.annotations.Nonnull;
+import org.apache.maven.repository.internal.DefaultModelVersionParser;
 
 import static org.apache.maven.internal.impl.Utils.nonNull;
 
@@ -94,7 +95,7 @@ public String getClassifier() {
 
     @Override
     public boolean isSnapshot() {
-        return DefaultVersionParser.checkSnapshot(artifact.getVersion());
+        return DefaultModelVersionParser.checkSnapshot(artifact.getVersion());
     }
 
     @Nonnull

File: maven-core/src/main/java/org/apache/maven/internal/impl/DefaultDependency.java
Patch:
@@ -30,6 +30,7 @@
 import org.apache.maven.api.annotations.Nonnull;
 import org.apache.maven.api.annotations.Nullable;
 import org.apache.maven.api.services.TypeRegistry;
+import org.apache.maven.repository.internal.DefaultModelVersionParser;
 import org.eclipse.aether.artifact.ArtifactProperties;
 
 import static org.apache.maven.internal.impl.Utils.nonNull;
@@ -111,7 +112,7 @@ public DependencyProperties getDependencyProperties() {
 
     @Override
     public boolean isSnapshot() {
-        return DefaultVersionParser.checkSnapshot(dependency.getArtifact().getVersion());
+        return DefaultModelVersionParser.checkSnapshot(dependency.getArtifact().getVersion());
     }
 
     @Nonnull

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionRangeResolver.java
Patch:
@@ -31,7 +31,6 @@
 import java.util.Map;
 import java.util.Objects;
 
-import org.apache.maven.artifact.ArtifactUtils;
 import org.apache.maven.artifact.repository.metadata.Versioning;
 import org.apache.maven.artifact.repository.metadata.io.MetadataStaxReader;
 import org.eclipse.aether.RepositoryEvent;
@@ -226,7 +225,9 @@ private Versioning filterVersionsByRepositoryType(Versioning versioning, RemoteR
         Versioning filteredVersions = versioning.clone();
 
         for (String version : versioning.getVersions()) {
-            if (!remoteRepository.getPolicy(ArtifactUtils.isSnapshot(version)).isEnabled()) {
+            if (!remoteRepository
+                    .getPolicy(DefaultModelVersionParser.checkSnapshot(version))
+                    .isEnabled()) {
                 filteredVersions.removeVersion(version);
             }
         }

File: api/maven-api-core/src/main/java/org/apache/maven/api/ArtifactCoordinate.java
Patch:
@@ -62,7 +62,7 @@ public interface ArtifactCoordinate {
      * @return the version
      */
     @Nonnull
-    VersionRange getVersion();
+    VersionConstraint getVersion();
 
     /**
      * The extension of the artifact.

File: api/maven-api-core/src/main/java/org/apache/maven/api/Version.java
Patch:
@@ -30,9 +30,6 @@
  */
 @Experimental
 public interface Version extends Comparable<Version> {
-
-    // TODO: add access to the version information
-
     /**
      * Returns a string representation of this version.
      * @return the string representation of this version

File: maven-core/src/main/java/org/apache/maven/internal/impl/DefaultArtifactCoordinate.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.Objects;
 
 import org.apache.maven.api.ArtifactCoordinate;
-import org.apache.maven.api.VersionRange;
+import org.apache.maven.api.VersionConstraint;
 import org.apache.maven.api.annotations.Nonnull;
 
 import static org.apache.maven.internal.impl.Utils.nonNull;
@@ -57,8 +57,8 @@ public String getArtifactId() {
 
     @Nonnull
     @Override
-    public VersionRange getVersion() {
-        return session.parseVersionRange(coordinate.getVersion());
+    public VersionConstraint getVersion() {
+        return session.parseVersionConstraint(coordinate.getVersion());
     }
 
     @Override

File: maven-core/src/main/java/org/apache/maven/internal/transformation/impl/DefaultConsumerPomBuilder.java
Patch:
@@ -63,7 +63,7 @@
 import org.apache.maven.model.superpom.SuperPomProvider;
 import org.apache.maven.model.v4.MavenModelVersion;
 import org.apache.maven.model.validation.ModelValidator;
-import org.apache.maven.model.version.VersionParser;
+import org.apache.maven.model.version.ModelVersionParser;
 import org.apache.maven.project.MavenProject;
 import org.apache.maven.project.ProjectBuildingRequest;
 import org.apache.maven.project.ProjectModelResolver;
@@ -128,7 +128,7 @@ class DefaultConsumerPomBuilder implements ConsumerPomBuilder {
     private SuperPomProvider superPomProvider;
 
     @Inject
-    private VersionParser versionParser;
+    private ModelVersionParser versionParser;
 
     // To break circular dependency
     @Inject

File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java
Patch:
@@ -76,7 +76,7 @@
 import org.apache.maven.model.superpom.SuperPomProvider;
 import org.apache.maven.model.validation.DefaultModelValidator;
 import org.apache.maven.model.validation.ModelValidator;
-import org.apache.maven.model.version.VersionParser;
+import org.apache.maven.model.version.ModelVersionParser;
 import org.codehaus.plexus.interpolation.InterpolationException;
 import org.codehaus.plexus.interpolation.MapBasedValueSource;
 import org.codehaus.plexus.interpolation.StringSearchInterpolator;
@@ -110,7 +110,7 @@ public class DefaultModelBuilder implements ModelBuilder {
     private final ProfileActivationFilePathInterpolator profileActivationFilePathInterpolator;
     private final ModelVersionProcessor versionProcessor;
     private final ModelSourceTransformer transformer;
-    private final VersionParser versionParser;
+    private final ModelVersionParser versionParser;
 
     @SuppressWarnings("checkstyle:ParameterNumber")
     @Inject
@@ -134,7 +134,7 @@ public DefaultModelBuilder(
             ProfileActivationFilePathInterpolator profileActivationFilePathInterpolator,
             ModelVersionProcessor versionProcessor,
             ModelSourceTransformer transformer,
-            VersionParser versionParser) {
+            ModelVersionParser versionParser) {
         this.modelProcessor = modelProcessor;
         this.modelValidator = modelValidator;
         this.modelNormalizer = modelNormalizer;

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenArtifactRelocationSource.java
Patch:
@@ -26,6 +26,8 @@
 
 /**
  * Maven relocation source.
+ * Note: implementations of this component should avoid the "default" name (has special meaning in Eclipse Sisu) and
+ * explicitly order implementations using Sisu priorities.
  *
  * @since 4.0.0
  */

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/relocation/DistributionManagementArtifactRelocationSource.java
Patch:
@@ -42,10 +42,11 @@
  * @since 4.0.0
  */
 @Singleton
-@Named
+@Named(DistributionManagementArtifactRelocationSource.NAME)
 @Priority(5)
 @SuppressWarnings("checkstyle:MagicNumber")
 public final class DistributionManagementArtifactRelocationSource implements MavenArtifactRelocationSource {
+    public static final String NAME = "distributionManagement";
     private static final Logger LOGGER = LoggerFactory.getLogger(DistributionManagementArtifactRelocationSource.class);
 
     @Override

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/relocation/UserPropertiesArtifactRelocationSource.java
Patch:
@@ -46,10 +46,11 @@
  * @since 4.0.0
  */
 @Singleton
-@Named
+@Named(UserPropertiesArtifactRelocationSource.NAME)
 @Priority(50)
 @SuppressWarnings("checkstyle:MagicNumber")
 public final class UserPropertiesArtifactRelocationSource implements MavenArtifactRelocationSource {
+    public static final String NAME = "userProperties";
     private static final Logger LOGGER = LoggerFactory.getLogger(UserPropertiesArtifactRelocationSource.class);
 
     private static final String CONFIG_PROP_RELOCATIONS_ENTRIES = "maven.relocations.entries";

File: maven-core/src/main/java/org/apache/maven/plugin/internal/MavenPluginConfigurationValidator.java
Patch:
@@ -27,7 +27,7 @@
  * Service responsible for validating plugin configuration.
  *
  */
-interface MavenPluginConfigurationValidator {
+public interface MavenPluginConfigurationValidator {
     /**
      * Checks mojo configuration issues.
      */

File: maven-core/src/main/java/org/apache/maven/plugin/internal/MavenPluginJavaPrerequisiteChecker.java
Patch:
@@ -32,11 +32,10 @@
 @Named
 @Singleton
 public class MavenPluginJavaPrerequisiteChecker implements MavenPluginPrerequisitesChecker {
-
     private final VersionScheme versionScheme;
 
     @Inject
-    public MavenPluginJavaPrerequisiteChecker(final VersionScheme versionScheme) {
+    public MavenPluginJavaPrerequisiteChecker(VersionScheme versionScheme) {
         this.versionScheme = versionScheme;
     }
 

File: maven-core/src/main/java/org/apache/maven/plugin/internal/MavenPluginValidator.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * MavenPluginValidator
  */
-interface MavenPluginValidator {
+public interface MavenPluginValidator {
 
     void validate(Artifact pluginArtifact, PluginDescriptor pluginDescriptor, List<String> errors);
 }

File: maven-core/src/main/java/org/apache/maven/rtinfo/internal/DefaultRuntimeInformation.java
Patch:
@@ -48,7 +48,7 @@ public class DefaultRuntimeInformation implements RuntimeInformation {
     private final String mavenVersion;
 
     @Inject
-    public DefaultRuntimeInformation(final VersionScheme versionScheme) {
+    public DefaultRuntimeInformation(VersionScheme versionScheme) {
         this.versionScheme = versionScheme;
         this.mavenVersion = loadMavenVersion();
     }

File: api/maven-api-core/src/main/java/org/apache/maven/api/Session.java
Patch:
@@ -77,7 +77,7 @@ public interface Session {
      * @return the maven version, never {@code null}
      */
     @Nonnull
-    String getMavenVersion();
+    Version getMavenVersion();
 
     int getDegreeOfConcurrency();
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/TestSuiteOrdering.java
Patch:
@@ -120,6 +120,7 @@ public TestSuiteOrdering() {
          * the tests are to finishing. Newer tests are also more likely to fail, so this is
          * a fail fast technique as well.
          */
+        suite.addTestSuite(MavenITmng7967ArtifactHandlerLanguageTest.class);
         suite.addTestSuite(MavenITmng7965PomDuplicateTagsTest.class);
         suite.addTestSuite(MavenITmng7939PluginsValidationExcludesTest.class);
         suite.addTestSuite(MavenITmng7837ProjectElementInPomTest.class);

File: maven-core/src/main/java/org/apache/maven/artifact/handler/manager/DefaultArtifactHandlerManager.java
Patch:
@@ -70,7 +70,7 @@ public ArtifactHandler getArtifactHandler(String id) {
                     null,
                     null,
                     type.isIncludesDependencies(),
-                    "none",
+                    type.getLanguage(),
                     type.isAddedToClassPath()); // TODO: watch out for module path
         });
     }

File: maven-core/src/main/java/org/apache/maven/internal/impl/DefaultTypeRegistry.java
Patch:
@@ -87,6 +87,7 @@ public Type getType(String id) {
                     }
                     return new DefaultType(
                             id,
+                            handler.getLanguage(),
                             handler.getExtension(),
                             handler.getClassifier(),
                             new DefaultDependencyProperties(flags));

File: maven-core/src/main/java/org/apache/maven/internal/impl/types/BomTypeProvider.java
Patch:
@@ -34,7 +34,7 @@ public class BomTypeProvider implements Provider<Type> {
     private final Type type;
 
     public BomTypeProvider() {
-        this.type = new DefaultType(NAME, "pom", null, new DefaultDependencyProperties());
+        this.type = new DefaultType(NAME, Type.LANGUAGE_NONE, "pom", null, new DefaultDependencyProperties());
     }
 
     @Override

File: maven-core/src/main/java/org/apache/maven/internal/impl/types/EjbClientTypeProvider.java
Patch:
@@ -37,6 +37,7 @@ public class EjbClientTypeProvider implements Provider<Type> {
     public EjbClientTypeProvider() {
         this.type = new DefaultType(
                 NAME,
+                Type.LANGUAGE_JAVA,
                 "jar",
                 "client",
                 new DefaultDependencyProperties(DependencyProperties.FLAG_CLASS_PATH_CONSTITUENT));

File: maven-core/src/main/java/org/apache/maven/internal/impl/types/JavaSourceTypeProvider.java
Patch:
@@ -34,7 +34,7 @@ public class JavaSourceTypeProvider implements Provider<Type> {
     private final Type type;
 
     public JavaSourceTypeProvider() {
-        this.type = new DefaultType(NAME, "jar", "sources", new DefaultDependencyProperties());
+        this.type = new DefaultType(NAME, Type.LANGUAGE_JAVA, "jar", "sources", new DefaultDependencyProperties());
     }
 
     @Override

File: maven-core/src/main/java/org/apache/maven/internal/impl/types/JavadocTypeProvider.java
Patch:
@@ -37,6 +37,7 @@ public class JavadocTypeProvider implements Provider<Type> {
     public JavadocTypeProvider() {
         this.type = new DefaultType(
                 NAME,
+                Type.LANGUAGE_JAVA,
                 "jar",
                 "javadoc",
                 new DefaultDependencyProperties(DependencyProperties.FLAG_CLASS_PATH_CONSTITUENT));

File: maven-core/src/main/java/org/apache/maven/internal/impl/types/PomTypeProvider.java
Patch:
@@ -34,7 +34,7 @@ public class PomTypeProvider implements Provider<Type> {
     private final Type type;
 
     public PomTypeProvider() {
-        this.type = new DefaultType(NAME, "pom", null, new DefaultDependencyProperties());
+        this.type = new DefaultType(NAME, Type.LANGUAGE_NONE, "pom", null, new DefaultDependencyProperties());
     }
 
     @Override

File: maven-core/src/main/java/org/apache/maven/internal/impl/types/TestJarTypeProvider.java
Patch:
@@ -37,6 +37,7 @@ public class TestJarTypeProvider implements Provider<Type> {
     public TestJarTypeProvider() {
         this.type = new DefaultType(
                 NAME,
+                Type.LANGUAGE_JAVA,
                 "jar",
                 "tests",
                 new DefaultDependencyProperties(DependencyProperties.FLAG_CLASS_PATH_CONSTITUENT));

File: maven-core/src/test/java/org/apache/maven/artifact/handler/ArtifactHandlerTest.java
Patch:
@@ -79,8 +79,7 @@ void testAptConsistency() throws Exception {
                 // Packaging/Directory is Maven1 remnant!!!
                 // assertEquals(handler.getPackaging(), packaging, type + " packaging");
                 assertEquals(handler.getClassifier(), classifier, type + " classifier");
-                // Language is unused
-                // assertEquals(handler.getLanguage(), language, type + " language");
+                assertEquals(handler.getLanguage(), language, type + " language");
                 assertEquals(
                         handler.isAddedToClasspath() ? "true" : null, addedToClasspath, type + " addedToClasspath");
                 assertEquals(

File: maven-core/src/test/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactoryTest.java
Patch:
@@ -148,7 +148,7 @@ void wagonProviderConfigurationTest() throws InvalidRepositoryException {
         PlexusConfiguration plexusConfiguration = (PlexusConfiguration) systemSessionFactory
                 .newRepositorySession(request)
                 .getConfigProperties()
-                .get("aether.connector.wagon.config.repository");
+                .get("aether.transport.wagon.config.repository");
         assertNotNull(plexusConfiguration);
         assertEquals(0, plexusConfiguration.getChildCount());
     }
@@ -370,7 +370,7 @@ void transportConfigurationTest() throws InvalidRepositoryException {
         Map<String, Object> configProperties =
                 systemSessionFactory.newRepositorySession(request).getConfigProperties();
         assertEquals(String.valueOf(Float.MAX_VALUE), configProperties.get("aether.priority.FileTransporterFactory"));
-        assertEquals(String.valueOf(Float.MAX_VALUE), configProperties.get("aether.priority.HttpTransporterFactory"));
+        assertEquals(String.valueOf(Float.MAX_VALUE), configProperties.get("aether.priority.ApacheTransporterFactory"));
         properties.remove("maven.resolver.transport");
 
         // wagon

File: maven-core/src/test/java/org/apache/maven/internal/transformation/impl/ConsumerPomArtifactTransformerTest.java
Patch:
@@ -56,9 +56,10 @@ void transform() throws Exception {
         try (InputStream expected = Files.newInputStream(beforePomFile)) {
             Model model = new Model(new MavenStaxReader().read(expected));
             MavenProject project = new MavenProject(model);
+            project.setOriginalModel(model);
             DefaultConsumerPomArtifactTransformer t = new DefaultConsumerPomArtifactTransformer((s, p, f) -> {
                 try (InputStream is = Files.newInputStream(f)) {
-                    return DefaultConsumerPomBuilder.transform(new MavenStaxReader().read(is));
+                    return DefaultConsumerPomBuilder.transform(new MavenStaxReader().read(is), project);
                 }
             });
 

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleModuleBuilder.java
Patch:
@@ -94,7 +94,7 @@ public void buildProject(
                 return;
             }
 
-            consumerPomArtifactTransformer.injectTransformedArtifacts(currentProject, session.getRepositorySession());
+            consumerPomArtifactTransformer.injectTransformedArtifacts(session.getRepositorySession(), currentProject);
 
             BuilderCommon.attachToThread(currentProject);
 

File: maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java
Patch:
@@ -192,8 +192,9 @@ void testReadModifiedPoms(@TempDir Path tempDir) throws Exception {
 
     @Test
     void testReadErroneousMavenProjectContainsReference() throws Exception {
-        File pomFile = new File("src/test/resources/projects/artifactMissingVersion.xml").getAbsoluteFile();
+        File pomFile = new File("src/test/resources/projects/artifactMissingVersion/pom.xml").getAbsoluteFile();
         MavenSession mavenSession = createMavenSession(null);
+        mavenSession.getRequest().setRootDirectory(pomFile.getParentFile().toPath());
         ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();
         configuration.setValidationLevel(ModelBuildingRequest.VALIDATION_LEVEL_MINIMAL);
         configuration.setRepositorySession(mavenSession.getRepositorySession());

File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java
Patch:
@@ -1045,7 +1045,7 @@ public Result<? extends Model> buildRawModel(
         }
     }
 
-    private Model readFileModel(ModelBuildingRequest request, DefaultModelProblemCollector problems)
+    Model readFileModel(ModelBuildingRequest request, DefaultModelProblemCollector problems)
             throws ModelBuildingException {
         ModelSource modelSource = request.getModelSource();
         org.apache.maven.api.model.Model model = cache(

File: maven-core/src/main/java/org/apache/maven/internal/impl/DefaultSession.java
Patch:
@@ -213,8 +213,8 @@ public Session withLocalRepository(@Nonnull LocalRepository localRepository) {
 
         RepositorySystemSession repoSession =
                 new DefaultRepositorySystemSession(session).setLocalRepositoryManager(localRepositoryManager);
-        MavenSession newSession = new MavenSession(
-                mavenSession.getContainer(), repoSession, mavenSession.getRequest(), mavenSession.getResult());
+        MavenSession newSession =
+                new MavenSession(() -> repoSession, mavenSession.getRequest(), mavenSession.getResult());
         return new DefaultSession(
                 newSession, repositorySystem, repositories, mavenRepositorySystem, container, runtimeInformation);
     }

File: maven-core/src/test/java/org/apache/maven/internal/impl/TestApi.java
Patch:
@@ -35,6 +35,7 @@
 import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;
 import org.apache.maven.bridge.MavenRepositorySystem;
 import org.apache.maven.execution.DefaultMavenExecutionRequest;
+import org.apache.maven.execution.DefaultMavenExecutionResult;
 import org.apache.maven.execution.MavenSession;
 import org.apache.maven.execution.scope.internal.MojoExecutionScope;
 import org.apache.maven.repository.internal.MavenRepositorySystemUtils;
@@ -96,7 +97,8 @@ class TestApi {
     void setup() {
         RepositorySystemSession rss = MavenRepositorySystemUtils.newSession();
         DefaultMavenExecutionRequest mer = new DefaultMavenExecutionRequest();
-        MavenSession ms = new MavenSession(null, rss, mer, null);
+        DefaultMavenExecutionResult meres = new DefaultMavenExecutionResult();
+        MavenSession ms = new MavenSession(() -> rss, mer, meres);
         DefaultSession session = new DefaultSession(
                 ms,
                 repositorySystem,

File: maven-xml-impl/src/main/java/org/apache/maven/internal/xml/XmlNodeBuilder.java
Patch:
@@ -201,7 +201,7 @@ public static XmlNodeImpl build(XMLStreamReader parser, boolean trim, InputLocat
                         for (int i = 0; i < namespacesSize; i++) {
                             String prefix = parser.getNamespacePrefix(i);
                             String namespace = parser.getNamespaceURI(i);
-                            attrs.put("xmlns:" + prefix, namespace);
+                            attrs.put(prefix != null && !prefix.isEmpty() ? "xmlns:" + prefix : "xmlns", namespace);
                         }
                         for (int i = 0; i < attributesSize; i++) {
                             String aname = parser.getAttributeLocalName(i);

File: maven-compat/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java
Patch:
@@ -51,11 +51,11 @@
 import org.codehaus.plexus.testing.PlexusTest;
 import org.codehaus.plexus.util.FileUtils;
 import org.eclipse.aether.DefaultRepositorySystemSession;
-import org.eclipse.aether.internal.impl.DefaultRepositorySystem;
 import org.eclipse.aether.internal.impl.SimpleLocalRepositoryManagerFactory;
 import org.eclipse.aether.repository.LocalRepository;
 
 import static org.codehaus.plexus.testing.PlexusExtension.getBasedir;
+import static org.mockito.Mockito.mock;
 
 @PlexusTest
 public abstract class AbstractCoreMavenComponentTestCase {
@@ -150,7 +150,8 @@ protected MavenSession createMavenSession(File pom, Properties executionProperti
                 getContainer(), configuration.getRepositorySession(), request, new DefaultMavenExecutionResult());
         session.setProjects(projects);
         session.setAllProjects(session.getProjects());
-        session.setSession(new DefaultSession(session, new DefaultRepositorySystem(), null, null, null, null));
+        session.setSession(
+                new DefaultSession(session, mock(org.eclipse.aether.RepositorySystem.class), null, null, null, null));
 
         return session;
     }

File: maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java
Patch:
@@ -50,11 +50,12 @@
 import org.codehaus.plexus.testing.PlexusTest;
 import org.codehaus.plexus.util.FileUtils;
 import org.eclipse.aether.DefaultRepositorySystemSession;
-import org.eclipse.aether.internal.impl.DefaultRepositorySystem;
+import org.eclipse.aether.RepositorySystem;
 import org.eclipse.aether.internal.impl.SimpleLocalRepositoryManagerFactory;
 import org.eclipse.aether.repository.LocalRepository;
 
 import static org.codehaus.plexus.testing.PlexusExtension.getBasedir;
+import static org.mockito.Mockito.mock;
 
 @PlexusTest
 public abstract class AbstractCoreMavenComponentTestCase {
@@ -149,7 +150,7 @@ protected MavenSession createMavenSession(File pom, Properties executionProperti
                 getContainer(), configuration.getRepositorySession(), request, new DefaultMavenExecutionResult());
         session.setProjects(projects);
         session.setAllProjects(session.getProjects());
-        session.setSession(new DefaultSession(session, new DefaultRepositorySystem(), null, null, null, null));
+        session.setSession(new DefaultSession(session, mock(RepositorySystem.class), null, null, null, null));
 
         return session;
     }

File: maven-core/src/test/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactoryTest.java
Patch:
@@ -362,7 +362,7 @@ void transportConfigurationTest() throws InvalidRepositoryException {
 
         // native
         Properties properties = new Properties();
-        properties.setProperty("maven.resolver.transport", "native");
+        properties.setProperty("maven.resolver.transport", "apache");
         request.setSystemProperties(properties);
         Map<String, Object> configProperties =
                 systemSessionFactory.newRepositorySession(request).getConfigProperties();
@@ -387,7 +387,7 @@ void transportConfigurationTest() throws InvalidRepositoryException {
         IllegalArgumentException exception = assertThrowsExactly(
                 IllegalArgumentException.class, () -> systemSessionFactory.newRepositorySession(request));
         assertEquals(
-                "Unknown resolver transport 'illegal'. Supported transports are: wagon, native, auto",
+                "Unknown resolver transport 'illegal'. Supported transports are: wagon, apache, jdk, auto",
                 exception.getMessage());
         properties.remove("maven.resolver.transport");
     }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4368TimestampAwareArtifactInstallerTest.java
Patch:
@@ -27,13 +27,14 @@
 
 /**
  * This is a test set for <a href="https://issues.apache.org/jira/browse/MNG-4368">MNG-4368</a>.
+ * Resolver 2.0.0 (in use since Maven 4.0.0-alpha-9) undoes this "smart" solution.
  *
  * @author Benjamin Bentmann
  */
 public class MavenITmng4368TimestampAwareArtifactInstallerTest extends AbstractMavenIntegrationTestCase {
 
     public MavenITmng4368TimestampAwareArtifactInstallerTest() {
-        super("[2.0.3,3.0-alpha-1),[3.0-alpha-6,)");
+        super("[2.0.3,3.0-alpha-1),[3.0-alpha-6,4.0.0-alpha-8]");
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5175WagonHttpTest.java
Patch:
@@ -117,6 +117,8 @@ public void testmng5175_ReadTimeOutFromSettings() throws Exception {
         verifier.addCliArgument("--errors");
         verifier.addCliArgument("-X");
         verifier.addCliArgument("validate");
+        verifier.addCliArgument(
+                "-Dmaven.resolver.transport=wagon"); // this tests Wagon integration and uses Wagon specific config
         verifier.execute();
 
         verifier.verifyTextInLog(

File: its/core-it-support/maven-it-helper/src/main/java/org/apache/maven/it/AbstractMavenIntegrationTestCase.java
Patch:
@@ -94,7 +94,7 @@ protected String getName() {
      *
      * @return The Java version, never <code>null</code>.
      */
-    private static ArtifactVersion getJavaVersion() {
+    protected static ArtifactVersion getJavaVersion() {
         if (javaVersion == null) {
             String version = System.getProperty("java.version");
             version = version.replaceAll("[_-]", ".");

File: maven-model/src/test/java/org/apache/maven/model/v4/MavenModelVersionTest.java
Patch:
@@ -65,7 +65,7 @@ void testV4ModelPreserveModelVersion() {
     }
 
     @Test
-    void testV4V4ModelPriority() {
+    void testV4ModelPriority() {
         Model m = model.withBuild(Build.newInstance()
                 .withPlugins(Collections.singleton(Plugin.newInstance()
                         .withExecutions(Collections.singleton(

File: maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileSelector.java
Patch:
@@ -24,7 +24,6 @@
 
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Collections;
 import java.util.HashSet;
 import java.util.List;
 
@@ -47,7 +46,7 @@ public class DefaultProfileSelector implements ProfileSelector {
     private final List<ProfileActivator> activators;
 
     public DefaultProfileSelector() {
-        this.activators = Collections.emptyList();
+        this.activators = new ArrayList<>();
     }
 
     @Inject

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5608ProfileActivationWarningTest.java
Patch:
@@ -36,7 +36,7 @@ public class MavenITmng5608ProfileActivationWarningTest extends AbstractMavenInt
     public MavenITmng5608ProfileActivationWarningTest() {
         // changed in https://issues.apache.org/jira/browse/MNG-7895
         // TODO - consider a separate test
-        super("(3.2.1,4.0.0-alpha-8)");
+        super("(3.2.1,3.9.4]");
     }
 
     @Test

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng7836AlternativePomSyntaxTest.java
Patch:
@@ -64,8 +64,8 @@ void testAlternativeSyntax() throws Exception {
 
         assertTrue(Files.isRegularFile(consumerPom));
         List<String> consumerPomLines = Files.readAllLines(consumerPom, StandardCharsets.UTF_8);
-        assertFalse(consumerPomLines.stream().anyMatch(l -> l.contains("<name>Apache-2.0</name>")));
-        assertTrue(consumerPomLines.stream().anyMatch(l -> l.contains("<parent>")));
+        assertTrue(consumerPomLines.stream().anyMatch(l -> l.contains("<name>Apache-2.0</name>")));
+        assertFalse(consumerPomLines.stream().anyMatch(l -> l.contains("<parent>")));
 
         // The build pom is the original POM, so the hocon file
         assertTrue(Files.isRegularFile(buildPom));

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5608ProfileActivationWarningTest.java
Patch:
@@ -34,7 +34,9 @@
 public class MavenITmng5608ProfileActivationWarningTest extends AbstractMavenIntegrationTestCase {
 
     public MavenITmng5608ProfileActivationWarningTest() {
-        super("(3.2.1,)");
+        // changed in https://issues.apache.org/jira/browse/MNG-7895
+        // TODO - consider a separate test
+        super("(3.2.1,4.0.0-alpha-8)");
     }
 
     @Test

File: maven-core/src/main/java/org/apache/maven/project/DefaultModelBuildingListener.java
Patch:
@@ -38,7 +38,7 @@
  */
 public class DefaultModelBuildingListener extends AbstractModelBuildingListener {
 
-    private MavenProject project;
+    private final MavenProject project;
 
     private ProjectBuildingHelper projectBuildingHelper;
 

File: maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java
Patch:
@@ -47,12 +47,12 @@
 @Singleton
 public class DefaultInheritanceAssembler implements InheritanceAssembler {
 
-    private InheritanceModelMerger merger = new InheritanceModelMerger();
-
     private static final String CHILD_DIRECTORY = "child-directory";
 
     private static final String CHILD_DIRECTORY_PROPERTY = "project.directory";
 
+    private final InheritanceModelMerger merger = new InheritanceModelMerger();
+
     @Override
     public Model assembleModelInheritance(
             Model child, Model parent, ModelBuildingRequest request, ModelProblemCollector problems) {

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1021EqualAttachmentBuildNumberTest.java
Patch:
@@ -48,6 +48,7 @@ public void testitMNG1021() throws Exception {
         verifier.setAutoclean(false);
         verifier.deleteDirectory("repo");
         verifier.deleteArtifacts("org.apache.maven.its.mng1021");
+        verifier.addCliArgument("-Dmaven.experimental.buildconsumer=false");
         verifier.addCliArgument("initialize");
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3396DependencyManagementForOverConstrainedRangesTest.java
Patch:
@@ -46,6 +46,7 @@ public void testitMNG3396() throws Exception {
         verifier.deleteArtifact(GROUP_ID, "A", "1.0", "jar");
         verifier.deleteArtifact(GROUP_ID, "B", "1.0", "pom");
         verifier.deleteArtifact(GROUP_ID, "B", "1.0", "jar");
+        verifier.addCliArgument("-Dmaven.experimental.buildconsumer=false");
         verifier.addCliArgument("install");
         verifier.execute();
         verifier.verifyErrorFreeLog();
@@ -59,6 +60,7 @@ public void testitMNG3396() throws Exception {
         verifier.deleteArtifact(GROUP_ID, "A", "3.0", "jar");
         verifier.deleteArtifact(GROUP_ID, "plugin", "1.0", "pom");
         verifier.deleteArtifact(GROUP_ID, "plugin", "1.0", "jar");
+        verifier.addCliArgument("-Dmaven.experimental.buildconsumer=false");
         verifier.addCliArgument("install");
         verifier.execute();
         verifier.verifyErrorFreeLog();
@@ -68,6 +70,7 @@ public void testitMNG3396() throws Exception {
         verifier = newVerifier(testDir.getAbsolutePath(), "remote");
         verifier.deleteArtifact(GROUP_ID, "pluginuser", "1.0", "pom");
         verifier.deleteArtifact(GROUP_ID, "pluginuser", "1.0", "jar");
+        verifier.addCliArgument("-Dmaven.experimental.buildconsumer=false");
         verifier.addCliArgument("install");
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/PluginsMetadataGeneratorFactory.java
Patch:
@@ -30,9 +30,11 @@
 /**
  * Maven G level metadata generator factory.
  */
-@Named("plugins")
+@Named(PluginsMetadataGeneratorFactory.NAME)
 @Singleton
 public class PluginsMetadataGeneratorFactory implements MetadataGeneratorFactory {
+    public static final String NAME = "plugins";
+
     @Override
     public MetadataGenerator newInstance(RepositorySystemSession session, InstallRequest request) {
         return new PluginsMetadataGenerator(session, request);

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/SnapshotMetadataGeneratorFactory.java
Patch:
@@ -30,9 +30,11 @@
 /**
  * Maven GAV level metadata generator factory.
  */
-@Named("snapshot")
+@Named(SnapshotMetadataGeneratorFactory.NAME)
 @Singleton
 public class SnapshotMetadataGeneratorFactory implements MetadataGeneratorFactory {
+    public static final String NAME = "snapshot";
+
     @Override
     public MetadataGenerator newInstance(RepositorySystemSession session, InstallRequest request) {
         return new LocalSnapshotMetadataGenerator(session, request);

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/VersionsMetadataGeneratorFactory.java
Patch:
@@ -30,9 +30,11 @@
 /**
  * Maven GA level metadata generator factory.
  */
-@Named("versions")
+@Named(VersionsMetadataGeneratorFactory.NAME)
 @Singleton
 public class VersionsMetadataGeneratorFactory implements MetadataGeneratorFactory {
+    public static final String NAME = "versions";
+
     @Override
     public MetadataGenerator newInstance(RepositorySystemSession session, InstallRequest request) {
         return new VersionsMetadataGenerator(session, request);

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/ArtifactDescriptorReaderDelegate.java
Patch:
@@ -44,7 +44,7 @@
 
 /**
  * Populates Aether {@link ArtifactDescriptorResult} from Maven project {@link Model}.
- * <p/>
+ * <p>
  * <strong>Note:</strong> This class is part of work in progress and can be changed or removed without notice.
  * @since 3.2.4
  */

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/ArtifactDescriptorUtils.java
Patch:
@@ -36,7 +36,7 @@ public class ArtifactDescriptorUtils {
     public static Artifact toPomArtifact(Artifact artifact) {
         Artifact pomArtifact = artifact;
 
-        if (pomArtifact.getClassifier().length() > 0 || !"pom".equals(pomArtifact.getExtension())) {
+        if (!pomArtifact.getClassifier().isEmpty() || !"pom".equals(pomArtifact.getExtension())) {
             pomArtifact =
                     new DefaultArtifact(artifact.getGroupId(), artifact.getArtifactId(), "pom", artifact.getVersion());
         }

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java
Patch:
@@ -103,6 +103,7 @@ public DefaultArtifactDescriptorReader(
         this.modelCacheFactory = Objects.requireNonNull(modelCacheFactory, "modelCacheFactory cannot be null");
     }
 
+    @Override
     public ArtifactDescriptorResult readArtifactDescriptor(
             RepositorySystemSession session, ArtifactDescriptorRequest request) throws ArtifactDescriptorException {
         ArtifactDescriptorResult result = new ArtifactDescriptorResult(request);

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java
Patch:
@@ -63,10 +63,12 @@ public void put(Source path, String tag, Object data) {
         put(new SourceCacheKey(path, tag), data);
     }
 
+    @Override
     public Object get(String groupId, String artifactId, String version, String tag) {
         return get(new GavCacheKey(groupId, artifactId, version, tag));
     }
 
+    @Override
     public void put(String groupId, String artifactId, String version, String tag, Object data) {
         put(new GavCacheKey(groupId, artifactId, version, tag), data);
     }

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionRangeResolver.java
Patch:
@@ -86,6 +86,7 @@ public DefaultVersionRangeResolver(
         this.versionScheme = Objects.requireNonNull(versionScheme, "versionScheme cannot be null");
     }
 
+    @Override
     public VersionRangeResult resolveVersionRange(RepositorySystemSession session, VersionRangeRequest request)
             throws VersionRangeResolutionException {
         VersionRangeResult result = new VersionRangeResult(request);

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionResolver.java
Patch:
@@ -94,6 +94,7 @@ public DefaultVersionResolver(
     }
 
     @SuppressWarnings("checkstyle:methodlength")
+    @Override
     public VersionResult resolveVersion(RepositorySystemSession session, VersionRequest request)
             throws VersionResolutionException {
         RequestTrace trace = RequestTrace.newChild(request.getTrace(), request);

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/LocalSnapshotMetadataGenerator.java
Patch:
@@ -48,6 +48,7 @@ class LocalSnapshotMetadataGenerator implements MetadataGenerator {
         snapshots = new LinkedHashMap<>();
     }
 
+    @Override
     public Collection<? extends Metadata> prepare(Collection<? extends Artifact> artifacts) {
         for (Artifact artifact : artifacts) {
             if (artifact.isSnapshot()) {
@@ -64,10 +65,12 @@ public Collection<? extends Metadata> prepare(Collection<? extends Artifact> art
         return Collections.emptyList();
     }
 
+    @Override
     public Artifact transformArtifact(Artifact artifact) {
         return artifact;
     }
 
+    @Override
     public Collection<? extends Metadata> finish(Collection<? extends Artifact> artifacts) {
         return snapshots.values();
     }

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenResolverModule.java
Patch:
@@ -40,6 +40,7 @@
 /**
  * MavenResolverModule
  */
+@Deprecated
 public final class MavenResolverModule extends AbstractModule {
 
     @Override

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RemoteSnapshotMetadata.java
Patch:
@@ -52,6 +52,7 @@ private RemoteSnapshotMetadata(Metadata metadata, File file, Date timestamp) {
         super(metadata, file, timestamp);
     }
 
+    @Override
     public MavenMetadata setFile(File file) {
         return new RemoteSnapshotMetadata(metadata, file, timestamp);
     }

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RemoteSnapshotMetadataGenerator.java
Patch:
@@ -61,6 +61,7 @@ class RemoteSnapshotMetadataGenerator implements MetadataGenerator {
         }
     }
 
+    @Override
     public Collection<? extends Metadata> prepare(Collection<? extends Artifact> artifacts) {
         for (Artifact artifact : artifacts) {
             if (artifact.isSnapshot()) {
@@ -77,6 +78,7 @@ public Collection<? extends Metadata> prepare(Collection<? extends Artifact> art
         return snapshots.values();
     }
 
+    @Override
     public Artifact transformArtifact(Artifact artifact) {
         if (artifact.isSnapshot() && artifact.getVersion().equals(artifact.getBaseVersion())) {
             Object key = RemoteSnapshotMetadata.getKey(artifact);
@@ -89,6 +91,7 @@ public Artifact transformArtifact(Artifact artifact) {
         return artifact;
     }
 
+    @Override
     public Collection<? extends Metadata> finish(Collection<? extends Artifact> artifacts) {
         return Collections.emptyList();
     }

File: api/maven-api-model/src/main/java/org/apache/maven/api/model/InputLocation.java
Patch:
@@ -111,7 +111,7 @@ public static InputLocation merge(InputLocation target, InputLocation source, bo
             locations.putAll(sourceDominant ? sourceLocations : targetLocations);
         }
 
-        return new InputLocation(target.getLineNumber(), target.getColumnNumber(), target.getSource(), locations);
+        return new InputLocation(-1, -1, InputSource.merge(source.getSource(), target.getSource()), locations);
     } // -- InputLocation merge( InputLocation, InputLocation, boolean )
 
     /**
@@ -150,7 +150,7 @@ public static InputLocation merge(InputLocation target, InputLocation source, Co
             }
         }
 
-        return new InputLocation(target.getLineNumber(), target.getColumnNumber(), target.getSource(), locations);
+        return new InputLocation(-1, -1, InputSource.merge(source.getSource(), target.getSource()), locations);
     } // -- InputLocation merge( InputLocation, InputLocation, java.util.Collection )
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3843PomInheritanceTest.java
Patch:
@@ -274,7 +274,8 @@ public void testitMNG3843() throws Exception {
 
         basedir = new File(verifier.getBasedir(), "test-3/sub-parent/child-a");
         props = verifier.loadProperties("test-3/sub-parent/child-a/target/pom.properties");
-        assertEquals("../pom.xml", props.getProperty("project.originalModel.parent.relativePath"));
+        String val = matchesVersionRange("(4.0-alpha-7,)") ? ".." : "../pom.xml";
+        assertEquals(val, props.getProperty("project.originalModel.parent.relativePath"));
     }
 
     private void assertPathEquals(File basedir, String expected, String actual) {

File: maven-core/src/main/java/org/apache/maven/exception/DefaultExceptionHandler.java
Patch:
@@ -225,7 +225,8 @@ private boolean isNoteworthyException(Throwable exception) {
     private String getMessage(String message, Throwable exception) {
         String fullMessage = (message != null) ? message : "";
 
-        for (Throwable t = exception; t != null; t = t.getCause()) {
+        // To break out of possible endless loop when getCause returns "this"
+        for (Throwable t = exception; t != null && t != t.getCause(); t = t.getCause()) {
             String exceptionMessage = t.getMessage();
 
             if (t instanceof AbstractMojoExecutionException) {

File: maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java
Patch:
@@ -150,7 +150,9 @@ public static void showError(Logger logger, String message, Throwable e, boolean
             if (e != null) {
                 logger.error(e.getMessage());
 
-                for (Throwable cause = e.getCause(); cause != null; cause = cause.getCause()) {
+                for (Throwable cause = e.getCause();
+                        cause != null && cause != cause.getCause();
+                        cause = cause.getCause()) {
                     logger.error("Caused by: {}", cause.getMessage());
                 }
             }

File: maven-slf4j-provider/src/main/java/org/slf4j/impl/MavenSimpleLogger.java
Patch:
@@ -79,7 +79,7 @@ private void printStackTrace(Throwable t, PrintStream stream, String prefix) {
             writeThrowable(se, stream, "Suppressed", prefix + "    ");
         }
         Throwable cause = t.getCause();
-        if (cause != null) {
+        if (cause != null && t != cause) {
             writeThrowable(cause, stream, "Caused by", prefix);
         }
     }

File: api/maven-api-core/src/main/java/org/apache/maven/api/Dependency.java
Patch:
@@ -23,9 +23,9 @@
 public interface Dependency extends Artifact {
 
     /**
-     * The artifact type.
+     * The dependency type.
      *
-     * @return the artifact type, never {@code null}
+     * @return the dependency type, never {@code null}
      */
     @Nonnull
     Type getType();

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/DependencyCoordinateFactoryRequest.java
Patch:
@@ -89,7 +89,7 @@ static DependencyCoordinateFactoryRequest build(@Nonnull Session session, @Nonnu
                 .version(dependency.getVersion().asString())
                 .classifier(dependency.getClassifier())
                 .extension(dependency.getExtension())
-                .type(dependency.getType().getName())
+                .type(dependency.getType().getId())
                 .scope(dependency.getScope().id())
                 .optional(dependency.isOptional())
                 .build();

File: maven-core/src/main/java/org/apache/maven/internal/impl/DefaultTypeRegistry.java
Patch:
@@ -52,7 +52,7 @@ public Type getType(String id) {
         boolean addedToClasspath = handler.isAddedToClasspath();
         return new Type() {
             @Override
-            public String getName() {
+            public String getId() {
                 return id;
             }
 

File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -356,10 +356,10 @@ void initialize(CliRequest cliRequest) throws ExitException {
         }
         topDirectory = getCanonicalPath(topDirectory);
         cliRequest.topDirectory = topDirectory;
-        // We're very early in the process and we don't have the container set up yet,
-        // so we rely on the JDK services to eventually lookup a custom RootLocator.
+        // We're very early in the process, and we don't have the container set up yet,
+        // so we rely on the JDK services to eventually look up a custom RootLocator.
         // This is used to compute {@code session.rootDirectory} but all {@code project.rootDirectory}
-        // properties will be compute through the RootLocator found in the container.
+        // properties will be computed through the RootLocator found in the container.
         RootLocator rootLocator =
                 ServiceLoader.load(RootLocator.class).iterator().next();
         Path rootDirectory = rootLocator.findRoot(topDirectory);

File: maven-embedder/src/main/java/org/apache/maven/cli/jansi/Style.java
Patch:
@@ -25,7 +25,7 @@
 
 /**
  * Configurable message styles.
- * @since 3.1.0
+ * @since 4.0.0
  */
 enum Style {
     DEBUG("bold,cyan"),

File: its/core-it-suite/src/test/java/org/apache/maven/it/TestSuiteOrdering.java
Patch:
@@ -120,6 +120,7 @@ public TestSuiteOrdering() {
          * the tests are to finishing. Newer tests are also more likely to fail, so this is
          * a fail fast technique as well.
          */
+        suite.addTestSuite(MavenITmng7819FileLockingWithSnapshotsTest.class);
         suite.addTestSuite(MavenITmng5600DependencyManagementImportExclusionsTest.class);
         suite.addTestSuite(MavenITmng7740ConsumerBuildShouldCleanUpOldFilesTest.class);
         suite.addTestSuite(MavenITmng7587Jsr330.class);

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3748BadSettingsXmlTest.java
Patch:
@@ -69,7 +69,7 @@ public void testit() throws Exception {
             List<String> lines = verifier.loadLines(verifier.getLogFileName(), null);
             boolean foundWarning = false;
             for (String line : lines) {
-                if (line.matches("(?i)\\[WARNING\\].*unrecognised tag.+repositories.+2.*")) {
+                if (line.matches("(?i)\\[WARNING\\].*unrecognised tag.+unknown.+2.*")) {
                     foundWarning = true;
                     break;
                 }

File: maven-compat/src/main/java/org/apache/maven/settings/DefaultMavenSettingsBuilder.java
Patch:
@@ -87,6 +87,7 @@ private Settings build(SettingsBuildingRequest request) throws IOException, XmlP
     public Settings buildSettings(MavenExecutionRequest request) throws IOException, XmlPullParserException {
         SettingsBuildingRequest settingsRequest = new DefaultSettingsBuildingRequest();
         settingsRequest.setUserSettingsFile(request.getUserSettingsFile());
+        settingsRequest.setProjectSettingsFile(request.getProjectSettingsFile());
         settingsRequest.setGlobalSettingsFile(request.getGlobalSettingsFile());
         settingsRequest.setUserProperties(request.getUserProperties());
         settingsRequest.setSystemProperties(request.getSystemProperties());

File: maven-settings-builder/src/main/java/org/apache/maven/settings/building/SettingsBuilder.java
Patch:
@@ -19,7 +19,8 @@
 package org.apache.maven.settings.building;
 
 /**
- * Builds the effective settings from a user settings file and/or a global settings file.
+ * Builds the effective settings from a user settings file, a project settings file
+ * and/or a global settings file.
  *
  * @author Benjamin Bentmann
  */

File: maven-embedder/src/main/java/org/apache/maven/cli/event/ExecutionEventLogger.java
Patch:
@@ -337,9 +337,9 @@ public void projectStarted(ExecutionEvent event) {
             File currentPom = project.getFile();
             if (currentPom != null) {
                 MavenSession session = event.getSession();
-                Path topDirectory = session.getTopDirectory();
                 Path current = currentPom.toPath().toAbsolutePath().normalize();
-                if (current.startsWith(topDirectory)) {
+                Path topDirectory = session.getTopDirectory();
+                if (topDirectory != null && current.startsWith(topDirectory)) {
                     current = topDirectory.relativize(current);
                 }
                 logger.info("  from " + current);

File: maven-compat/src/main/java/org/apache/maven/ArtifactFilterManager.java
Patch:
@@ -25,6 +25,7 @@
 /**
  * ArtifactFilterManager
  */
+@Deprecated
 public interface ArtifactFilterManager {
     /**
      * Returns a filter for core + extension artifacts.

File: maven-compat/src/main/java/org/apache/maven/ArtifactFilterManagerDelegate.java
Patch:
@@ -23,6 +23,7 @@
 /**
  * @deprecated use {@code META-INF/maven/extension.xml} to define artifacts exported by Maven core extensions.
  */
+@Deprecated
 public interface ArtifactFilterManagerDelegate {
 
     void addExcludes(Set<String> excludes);

File: maven-compat/src/main/java/org/apache/maven/DefaultArtifactFilterManager.java
Patch:
@@ -35,7 +35,7 @@
  */
 @Named
 @Singleton
-@SuppressWarnings("deprecation")
+@Deprecated
 public class DefaultArtifactFilterManager implements ArtifactFilterManager {
 
     // this is a live injected collection

File: maven-compat/src/main/java/org/apache/maven/DefaultProjectDependenciesResolver.java
Patch:
@@ -48,9 +48,9 @@
  *             but should have been.
  *
  */
-@Deprecated
 @Named
 @Singleton
+@Deprecated
 public class DefaultProjectDependenciesResolver implements ProjectDependenciesResolver {
 
     private final RepositorySystem repositorySystem;

File: maven-compat/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java
Patch:
@@ -43,6 +43,7 @@
  */
 @Named
 @Singleton
+@Deprecated
 public class DefaultMavenMetadataCache implements MavenMetadataCache {
 
     protected final Map<CacheKey, CacheRecord> cache = new ConcurrentHashMap<>();

File: maven-compat/src/main/java/org/apache/maven/project/artifact/DefaultMetadataSource.java
Patch:
@@ -37,6 +37,7 @@
  */
 @Named
 @Singleton
+@Deprecated
 public class DefaultMetadataSource extends MavenMetadataSource {
     @Inject
     public DefaultMetadataSource(

File: maven-compat/src/main/java/org/apache/maven/project/artifact/MavenMetadataCache.java
Patch:
@@ -27,6 +27,7 @@
 /**
  * MavenMetadataCache
  */
+@Deprecated
 public interface MavenMetadataCache {
 
     ResolutionGroup get(

File: maven-compat/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java
Patch:
@@ -92,6 +92,7 @@
  */
 @Named("maven")
 @Singleton
+@Deprecated
 public class MavenMetadataSource implements ArtifactMetadataSource {
     private final Logger logger = LoggerFactory.getLogger(getClass());
     private final RepositoryMetadataManager repositoryMetadataManager;

File: maven-compat/src/main/java/org/apache/maven/project/artifact/ProjectArtifactMetadata.java
Patch:
@@ -33,6 +33,7 @@
  *
  * @author <a href="mailto:brett@apache.org">Brett Porter</a>
  */
+@Deprecated
 public class ProjectArtifactMetadata extends AbstractArtifactMetadata {
     private final File file;
 

File: maven-compat/src/main/java/org/apache/maven/project/interpolation/AbstractStringBasedModelInterpolator.java
Patch:
@@ -18,6 +18,8 @@
  */
 package org.apache.maven.project.interpolation;
 
+import javax.inject.Inject;
+
 import java.io.File;
 import java.io.IOException;
 import java.io.StringReader;
@@ -35,7 +37,6 @@
 import org.apache.maven.project.DefaultProjectBuilderConfiguration;
 import org.apache.maven.project.ProjectBuilderConfiguration;
 import org.apache.maven.project.path.PathTranslator;
-import org.codehaus.plexus.component.annotations.Requirement;
 import org.codehaus.plexus.interpolation.AbstractValueSource;
 import org.codehaus.plexus.interpolation.InterpolationException;
 import org.codehaus.plexus.interpolation.InterpolationPostProcessor;
@@ -86,7 +87,7 @@ public abstract class AbstractStringBasedModelInterpolator extends AbstractLogEn
         TRANSLATED_PATH_EXPRESSIONS = translatedPrefixes;
     }
 
-    @Requirement
+    @Inject
     private PathTranslator pathTranslator;
 
     private Interpolator interpolator;

File: maven-compat/src/main/java/org/apache/maven/repository/ArtifactDoesNotExistException.java
Patch:
@@ -21,6 +21,7 @@
 /**
  * ArtifactDoesNotExistException
  */
+@Deprecated
 public class ArtifactDoesNotExistException extends Exception {
     public ArtifactDoesNotExistException(final String message) {
         super(message);

File: maven-compat/src/main/java/org/apache/maven/repository/ArtifactTransferEvent.java
Patch:
@@ -27,6 +27,7 @@
  *
  * @author <a href="michal.maczka@dimatics.com">Michal Maczka</a>
  */
+@Deprecated
 public class ArtifactTransferEvent extends EventObject {
     /**
      * A transfer was attempted, but has not yet commenced.

File: maven-compat/src/main/java/org/apache/maven/repository/ArtifactTransferFailedException.java
Patch:
@@ -21,6 +21,7 @@
 /**
  * ArtifactTransferFailedException
  */
+@Deprecated
 public class ArtifactTransferFailedException extends Exception {
     public ArtifactTransferFailedException(final String message) {
         super(message);

File: maven-compat/src/main/java/org/apache/maven/repository/ArtifactTransferListener.java
Patch:
@@ -21,6 +21,7 @@
 /**
  * ArtifactTransferListener
  */
+@Deprecated
 public interface ArtifactTransferListener {
     boolean isShowChecksumEvents();
 

File: maven-compat/src/main/java/org/apache/maven/repository/ArtifactTransferResource.java
Patch:
@@ -23,6 +23,7 @@
  *
  * @author Benjamin Bentmann
  */
+@Deprecated
 public interface ArtifactTransferResource {
 
     /**

File: maven-compat/src/main/java/org/apache/maven/repository/LocalArtifactRepository.java
Patch:
@@ -24,6 +24,7 @@
 /**
  * LocalArtifactRepository
  */
+@Deprecated
 public abstract class LocalArtifactRepository extends MavenArtifactRepository {
     public static final String IDE_WORKSPACE = "ide-workspace";
 

File: maven-compat/src/main/java/org/apache/maven/repository/LocalRepositoryNotAccessibleException.java
Patch:
@@ -25,6 +25,7 @@
  *
  * @author Benjamin Bentmann
  */
+@Deprecated
 public class LocalRepositoryNotAccessibleException extends IOException {
 
     public LocalRepositoryNotAccessibleException(String message, Throwable cause) {

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/metadata/AbstractArtifactMetadata.java
Patch:
@@ -25,6 +25,7 @@
  *
  * @author <a href="mailto:brett@apache.org">Brett Porter</a>
  */
+@Deprecated
 public abstract class AbstractArtifactMetadata implements ArtifactMetadata {
     private static final String LS = System.lineSeparator();
 

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/metadata/ArtifactMetadataRetrievalException.java
Patch:
@@ -25,6 +25,7 @@
  *
  * @author <a href="mailto:jason@maven.org">Jason van Zyl</a>
  */
+@Deprecated
 public class ArtifactMetadataRetrievalException extends Exception {
     private Artifact artifact;
 

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/metadata/ArtifactMetadataSource.java
Patch:
@@ -30,6 +30,7 @@
  *
  * @author <a href="mailto:jason@maven.org">Jason van Zyl </a>
  */
+@Deprecated
 public interface ArtifactMetadataSource {
 
     ResolutionGroup retrieve(MetadataResolutionRequest request) throws ArtifactMetadataRetrievalException;

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/metadata/DefaultMetadataResolutionRequest.java
Patch:
@@ -31,6 +31,7 @@
  *
  * @author Benjamin Bentmann
  */
+@Deprecated
 public class DefaultMetadataResolutionRequest implements MetadataResolutionRequest {
 
     private Artifact artifact;

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/metadata/MetadataResolutionRequest.java
Patch:
@@ -29,6 +29,7 @@
  *
  * @author Benjamin Bentmann
  */
+@Deprecated
 public interface MetadataResolutionRequest extends RepositoryRequest {
 
     /**

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/metadata/ResolutionGroup.java
Patch:
@@ -28,6 +28,7 @@
 /**
  * ResolutionGroup
  */
+@Deprecated
 public class ResolutionGroup {
 
     private final Set<Artifact> artifacts;

File: maven-compat/src/main/java/org/apache/maven/toolchain/ToolchainsBuilder.java
Patch:
@@ -27,7 +27,9 @@
  * <strong>Note:</strong> This is an internal component whose interface can change without prior notice.
  *
  * @author Benjamin Bentmann
+ * @deprecated use {@link org.apache.maven.toolchain.building.ToolchainsBuilder} instead
  */
+@Deprecated
 public interface ToolchainsBuilder {
 
     /**

File: maven-compat/src/test/java/org/apache/maven/repository/legacy/LegacyRepositorySystemTest.java
Patch:
@@ -25,7 +25,6 @@
 
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.artifact.repository.Authentication;
-import org.apache.maven.repository.RepositorySystem;
 import org.apache.maven.settings.Server;
 import org.codehaus.plexus.testing.PlexusTest;
 import org.junit.jupiter.api.Test;
@@ -41,7 +40,7 @@
 @PlexusTest
 class LegacyRepositorySystemTest {
     @Inject
-    private RepositorySystem repositorySystem;
+    private LegacyRepositorySystem repositorySystem;
 
     @Test
     void testThatLocalRepositoryWithSpacesIsProperlyHandled() throws Exception {

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java
Patch:
@@ -42,7 +42,6 @@
 import org.apache.maven.artifact.InvalidArtifactRTException;
 import org.apache.maven.artifact.InvalidRepositoryException;
 import org.apache.maven.artifact.repository.ArtifactRepository;
-import org.apache.maven.artifact.repository.LegacyLocalRepositoryManager;
 import org.apache.maven.bridge.MavenRepositorySystem;
 import org.apache.maven.feature.Features;
 import org.apache.maven.model.Build;
@@ -971,8 +970,7 @@ class InternalConfig {
             this.modelPool = modelPool;
             this.transformerContextBuilder = transformerContextBuilder;
 
-            session = LegacyLocalRepositoryManager.overlay(
-                    request.getLocalRepository(), request.getRepositorySession(), repoSystem);
+            session = RepositoryUtils.overlay(request.getLocalRepository(), request.getRepositorySession(), repoSystem);
             repositories = RepositoryUtils.toRepos(request.getRemoteRepositories());
         }
     }

File: maven-core/src/main/java/org/apache/maven/project/MavenProject.java
Patch:
@@ -40,6 +40,7 @@
 import org.apache.maven.artifact.factory.ArtifactFactory;
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.artifact.resolver.filter.ArtifactFilter;
+import org.apache.maven.lifecycle.internal.DefaultProjectArtifactFactory;
 import org.apache.maven.model.Build;
 import org.apache.maven.model.CiManagement;
 import org.apache.maven.model.Contributor;
@@ -67,7 +68,6 @@
 import org.apache.maven.model.io.xpp3.MavenXpp3Writer;
 import org.apache.maven.model.root.RootLocator;
 import org.apache.maven.project.artifact.InvalidDependencyVersionException;
-import org.apache.maven.project.artifact.MavenMetadataSource;
 import org.codehaus.plexus.classworlds.realm.ClassRealm;
 import org.codehaus.plexus.util.xml.Xpp3Dom;
 import org.eclipse.aether.graph.DependencyFilter;
@@ -1313,7 +1313,7 @@ public String getModulePathAdjustment(MavenProject moduleProject) throws IOExcep
     @Deprecated
     public Set<Artifact> createArtifacts(ArtifactFactory artifactFactory, String inheritedScope, ArtifactFilter filter)
             throws InvalidDependencyVersionException {
-        return MavenMetadataSource.createArtifacts(
+        return DefaultProjectArtifactFactory.createArtifacts(
                 artifactFactory, getModel().getDependencies(), inheritedScope, filter, this);
     }
 

File: maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.InvalidRepositoryException;
 import org.apache.maven.artifact.repository.ArtifactRepository;
+import org.apache.maven.bridge.MavenRepositorySystem;
 import org.apache.maven.execution.DefaultMavenExecutionRequest;
 import org.apache.maven.execution.DefaultMavenExecutionResult;
 import org.apache.maven.execution.MavenExecutionRequest;
@@ -44,7 +45,6 @@
 import org.apache.maven.project.DefaultProjectBuildingRequest;
 import org.apache.maven.project.MavenProject;
 import org.apache.maven.project.ProjectBuildingRequest;
-import org.apache.maven.repository.RepositorySystem;
 import org.apache.maven.repository.internal.MavenRepositorySystemUtils;
 import org.codehaus.plexus.PlexusContainer;
 import org.codehaus.plexus.testing.PlexusTest;
@@ -63,7 +63,7 @@ public abstract class AbstractCoreMavenComponentTestCase {
     protected PlexusContainer container;
 
     @Inject
-    protected RepositorySystem repositorySystem;
+    protected MavenRepositorySystem repositorySystem;
 
     @Inject
     protected org.apache.maven.project.ProjectBuilder projectBuilder;
@@ -179,7 +179,7 @@ protected List<ArtifactRepository> getRemoteRepositories() throws InvalidReposit
         policy.setUpdatePolicy("always");
 
         Repository repository = new Repository();
-        repository.setId(RepositorySystem.DEFAULT_REMOTE_REPO_ID);
+        repository.setId(MavenRepositorySystem.DEFAULT_REMOTE_REPO_ID);
         repository.setUrl("file://" + repoDir.toURI().getPath());
         repository.setReleases(policy);
         repository.setSnapshots(policy);

File: maven-core/src/test/java/org/apache/maven/plugin/PluginParameterExpressionEvaluatorTest.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.ArtifactUtils;
 import org.apache.maven.artifact.repository.ArtifactRepository;
+import org.apache.maven.bridge.MavenRepositorySystem;
 import org.apache.maven.execution.DefaultMavenExecutionRequest;
 import org.apache.maven.execution.DefaultMavenExecutionResult;
 import org.apache.maven.execution.MavenExecutionRequest;
@@ -46,7 +47,6 @@
 import org.apache.maven.plugin.descriptor.PluginDescriptor;
 import org.apache.maven.project.DuplicateProjectException;
 import org.apache.maven.project.MavenProject;
-import org.apache.maven.repository.RepositorySystem;
 import org.codehaus.plexus.MutablePlexusContainer;
 import org.codehaus.plexus.PlexusContainer;
 import org.codehaus.plexus.component.configurator.expression.ExpressionEvaluator;
@@ -69,7 +69,7 @@ class PluginParameterExpressionEvaluatorTest extends AbstractCoreMavenComponentT
     private static final String FS = File.separator;
 
     @Inject
-    private RepositorySystem factory;
+    private MavenRepositorySystem factory;
 
     private Path rootDirectory;
 
@@ -394,7 +394,7 @@ private MavenProject createDefaultProject() {
 
     private ExpressionEvaluator createExpressionEvaluator(
             MavenProject project, PluginDescriptor pluginDescriptor, Properties executionProperties) throws Exception {
-        ArtifactRepository repo = factory.createDefaultLocalRepository();
+        ArtifactRepository repo = getLocalRepository();
 
         MutablePlexusContainer container = (MutablePlexusContainer) getContainer();
         MavenSession session = createSession(container, repo, executionProperties);

File: maven-core/src/test/java/org/apache/maven/plugin/PluginParameterExpressionEvaluatorV4Test.java
Patch:
@@ -35,6 +35,7 @@
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.ArtifactUtils;
 import org.apache.maven.artifact.repository.ArtifactRepository;
+import org.apache.maven.bridge.MavenRepositorySystem;
 import org.apache.maven.execution.DefaultMavenExecutionRequest;
 import org.apache.maven.execution.DefaultMavenExecutionResult;
 import org.apache.maven.execution.MavenExecutionRequest;
@@ -49,7 +50,6 @@
 import org.apache.maven.plugin.descriptor.PluginDescriptor;
 import org.apache.maven.project.DuplicateProjectException;
 import org.apache.maven.project.MavenProject;
-import org.apache.maven.repository.RepositorySystem;
 import org.codehaus.plexus.MutablePlexusContainer;
 import org.codehaus.plexus.PlexusContainer;
 import org.codehaus.plexus.component.configurator.expression.ExpressionEvaluator;
@@ -77,7 +77,7 @@ public class PluginParameterExpressionEvaluatorV4Test extends AbstractCoreMavenC
     private static final String FS = File.separator;
 
     @Inject
-    private RepositorySystem factory;
+    private MavenRepositorySystem factory;
 
     private Path rootDirectory;
 
@@ -407,7 +407,7 @@ private MavenProject createDefaultProject() {
 
     private ExpressionEvaluator createExpressionEvaluator(
             MavenProject project, PluginDescriptor pluginDescriptor, Properties executionProperties) throws Exception {
-        ArtifactRepository repo = factory.createDefaultLocalRepository();
+        ArtifactRepository repo = getLocalRepository();
 
         MutablePlexusContainer container = (MutablePlexusContainer) getContainer();
         MavenSession mavenSession = createSession(container, repo, executionProperties);

File: maven-core/src/test/java/org/apache/maven/project/AbstractMavenProjectTestCase.java
Patch:
@@ -27,9 +27,9 @@
 import java.util.Arrays;
 
 import org.apache.maven.artifact.repository.ArtifactRepository;
+import org.apache.maven.bridge.MavenRepositorySystem;
 import org.apache.maven.model.building.ModelBuildingException;
 import org.apache.maven.model.building.ModelProblem;
-import org.apache.maven.repository.RepositorySystem;
 import org.apache.maven.repository.internal.MavenRepositorySystemUtils;
 import org.codehaus.plexus.PlexusContainer;
 import org.codehaus.plexus.testing.PlexusTest;
@@ -45,7 +45,7 @@ public abstract class AbstractMavenProjectTestCase {
     protected ProjectBuilder projectBuilder;
 
     @Inject
-    protected RepositorySystem repositorySystem;
+    protected MavenRepositorySystem repositorySystem;
 
     @Inject
     protected PlexusContainer container;
@@ -139,6 +139,7 @@ protected MavenProject getProjectFromRemoteRepository(final File pom) throws Exc
     protected ProjectBuildingRequest newBuildingRequest() throws Exception {
         ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();
         configuration.setLocalRepository(getLocalRepository());
+        configuration.setRemoteRepositories(Arrays.asList(this.repositorySystem.createDefaultRemoteRepository()));
         initRepoSession(configuration);
         return configuration;
     }

File: maven-core/src/test/java/org/apache/maven/project/ProjectModelResolverTest.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.concurrent.atomic.AtomicReference;
 
 import org.apache.maven.artifact.InvalidRepositoryException;
+import org.apache.maven.bridge.MavenRepositorySystem;
 import org.apache.maven.model.Dependency;
 import org.apache.maven.model.Parent;
 import org.apache.maven.model.resolution.ModelResolver;
@@ -207,7 +208,7 @@ private ModelResolver newModelResolver() throws Exception {
     private List<RemoteRepository> getRemoteRepositories() throws InvalidRepositoryException {
         final File repoDir = new File(getBasedir(), "src/test/remote-repo").getAbsoluteFile();
         final RemoteRepository remoteRepository = new RemoteRepository.Builder(
-                        org.apache.maven.repository.RepositorySystem.DEFAULT_REMOTE_REPO_ID,
+                        MavenRepositorySystem.DEFAULT_REMOTE_REPO_ID,
                         "default",
                         repoDir.toURI().toASCIIString())
                 .build();

File: maven-core/src/test/java/org/apache/maven/settings/PomConstructionWithSettingsTest.java
Patch:
@@ -25,12 +25,12 @@
 import java.io.Reader;
 
 import org.apache.maven.artifact.repository.layout.DefaultRepositoryLayout;
+import org.apache.maven.bridge.MavenRepositorySystem;
 import org.apache.maven.model.Profile;
 import org.apache.maven.project.DefaultProjectBuilder;
 import org.apache.maven.project.DefaultProjectBuildingRequest;
 import org.apache.maven.project.ProjectBuildingRequest;
 import org.apache.maven.project.harness.PomTestWrapper;
-import org.apache.maven.repository.RepositorySystem;
 import org.apache.maven.repository.internal.MavenRepositorySystemUtils;
 import org.apache.maven.settings.io.xpp3.SettingsXpp3Reader;
 import org.codehaus.plexus.testing.PlexusTest;
@@ -55,7 +55,7 @@ class PomConstructionWithSettingsTest {
     private DefaultProjectBuilder projectBuilder;
 
     @Inject
-    private RepositorySystem repositorySystem;
+    private MavenRepositorySystem repositorySystem;
 
     private File testDirectory;
 

File: maven-core/src/main/java/org/apache/maven/lifecycle/providers/packaging/AbstractLifecycleMappingProvider.java
Patch:
@@ -57,7 +57,7 @@ public abstract class AbstractLifecycleMappingProvider implements Provider<Lifec
 
     protected static final String RAR_PLUGIN_VERSION = "3.0.0";
 
-    protected static final String WAR_PLUGIN_VERSION = "3.3.2";
+    protected static final String WAR_PLUGIN_VERSION = "3.4.0";
     // END SNIPPET: versions
 
     private final LifecycleMapping lifecycleMapping;

File: maven-core/src/main/java/org/apache/maven/lifecycle/providers/WrapperLifecycleProvider.java
Patch:
@@ -33,7 +33,7 @@ public final class WrapperLifecycleProvider extends AbstractLifecycleProvider {
     // START SNIPPET: wrapper
     private static final String[] PHASES = {"wrapper"};
 
-    private static final String MAVEN_WRAPPER_PLUGIN_VERSION = "3.1.1";
+    private static final String MAVEN_WRAPPER_PLUGIN_VERSION = "3.2.0";
 
     private static final String[] BINDINGS = {
         "wrapper", "org.apache.maven.plugins:maven-wrapper-plugin:" + MAVEN_WRAPPER_PLUGIN_VERSION + ":wrapper"

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng7587Jsr330.java
Patch:
@@ -34,8 +34,8 @@
 class MavenITmng7587Jsr330 extends AbstractMavenIntegrationTestCase {
 
     public MavenITmng7587Jsr330() {
-        // affected Maven versions: 3.9.2 and 4.0.0-alpha-5
-        super("(3.9.2,3.999),(4.0.0-alpha-5,)");
+        // affected Maven versions: 4.0.0-alpha-5
+        super("(4.0.0-alpha-5,)");
     }
 
     /**

File: maven-embedder/src/test/java/org/apache/maven/cli/event/ExecutionEventLoggerTest.java
Patch:
@@ -80,6 +80,7 @@ void testProjectStarted() {
         when(rootProject.getBasedir()).thenReturn(basedir);
         MavenSession session = mock(MavenSession.class);
         when(session.getTopLevelProject()).thenReturn(rootProject);
+        when(session.getTopDirectory()).thenReturn(basedir.toPath());
         when(event.getSession()).thenReturn(session);
 
         // execute
@@ -112,6 +113,7 @@ void testProjectStartedOverflow() {
         MavenSession session = mock(MavenSession.class);
         when(session.getTopLevelProject()).thenReturn(project);
         when(event.getSession()).thenReturn(session);
+        when(session.getTopDirectory()).thenReturn(basedir.toPath());
 
         // execute
         executionEventLogger.projectStarted(event);

File: maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginValidationManager.java
Patch:
@@ -58,6 +58,7 @@ private enum ValidationReportLevel {
         NONE, // mute validation completely (validation issue collection still happens, it is just not reported!)
         INLINE, // inline, each "internal" problem one line next to mojo invocation
         SUMMARY, // at end, list of plugin GAVs along with "internal" issues
+        BRIEF, // synonym to SUMMARY
         VERBOSE // at end, list of plugin GAVs along with detailed report of ANY validation issues
     }
 

File: maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java
Patch:
@@ -565,6 +565,7 @@ public <T> T getConfiguredMojo(Class<T> mojoInterface, MavenSession session, Moj
 
             if (mojo instanceof Contextualizable) {
                 pluginValidationManager.reportPluginMojoValidationIssue(
+                        PluginValidationManager.IssueLocality.EXTERNAL,
                         session,
                         mojoDescriptor,
                         mojo.getClass(),

File: maven-core/src/main/java/org/apache/maven/plugin/internal/DeprecatedCoreExpressionValidator.java
Patch:
@@ -78,7 +78,7 @@ protected void doValidate(
                 .filter(this::isDeprecated)
                 .map(this::formatParameter)
                 .forEach(m -> pluginValidationManager.reportPluginMojoValidationIssue(
-                        mavenSession, mojoDescriptor, mojoClass, m));
+                        PluginValidationManager.IssueLocality.EXTERNAL, mavenSession, mojoDescriptor, mojoClass, m));
     }
 
     private boolean isDeprecated(Parameter parameter) {

File: maven-core/src/main/java/org/apache/maven/plugin/internal/Maven3CompatDependenciesValidator.java
Patch:
@@ -52,6 +52,7 @@ protected void doValidate(
                     && "maven-compat".equals(dependency.getArtifact().getArtifactId())
                     && !JavaScopes.TEST.equals(dependency.getScope())) {
                 pluginValidationManager.reportPluginValidationIssue(
+                        PluginValidationManager.IssueLocality.EXTERNAL,
                         session,
                         pluginArtifact,
                         "Plugin depends on the deprecated Maven 2.x compatibility layer, which will be not supported in Maven 4.x");

File: maven-core/src/main/java/org/apache/maven/plugin/internal/MavenScopeDependenciesValidator.java
Patch:
@@ -62,6 +62,7 @@ protected void doValidate(
 
         if (!mavenArtifacts.isEmpty()) {
             pluginValidationManager.reportPluginValidationIssue(
+                    PluginValidationManager.IssueLocality.EXTERNAL,
                     session,
                     pluginArtifact,
                     "Plugin should declare Maven artifacts in `provided` scope. If the plugin already declares them in `provided` scope, update the maven-plugin-plugin to latest version. Artifacts found with wrong scope: "

File: api/maven-api-core/src/main/java/org/apache/maven/api/Session.java
Patch:
@@ -343,7 +343,7 @@ Artifact createArtifact(
     Node collectDependencies(@Nonnull Project project);
 
     /**
-     * Shortcut for <code>getService(DependencyResolver.class).resolve(...)</code>
+     * Shortcut for <code>getService(DependencyCollector.class).resolve(...)</code>
      * @see org.apache.maven.api.services.DependencyCollector#collect(Session, DependencyCoordinate)
      *
      * @throws org.apache.maven.api.services.DependencyCollectorException if the dependency collection failed

File: maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java
Patch:
@@ -127,7 +127,7 @@ public Artifact resolve(Plugin plugin, List<RemoteRepository> repositories, Repo
                 }
 
                 Set<String> mavenArtifacts = result.getDependencies().stream()
-                        .filter(d -> !JavaScopes.PROVIDED.equals(d.getScope()))
+                        .filter(d -> !JavaScopes.PROVIDED.equals(d.getScope()) && !JavaScopes.TEST.equals(d.getScope()))
                         .map(org.eclipse.aether.graph.Dependency::getArtifact)
                         .filter(a -> "org.apache.maven".equals(a.getGroupId()))
                         .filter(a -> !MavenPluginDependenciesValidator.EXPECTED_PROVIDED_SCOPE_EXCLUSIONS_GA.contains(

File: maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java
Patch:
@@ -571,7 +571,7 @@ public <T> T getConfiguredMojo(Class<T> mojoInterface, MavenSession session, Moj
                         session,
                         mojoDescriptor,
                         mojo.getClass(),
-                        "Implements `Contextualizable` interface from Plexus Container, which is EOL.");
+                        "Mojo implements `Contextualizable` interface from Plexus Container, which is EOL.");
             }
 
             for (MavenPluginDependenciesValidator validator : dependenciesValidators) {

File: maven-core/src/main/java/org/apache/maven/plugin/internal/Maven2DependenciesValidator.java
Patch:
@@ -48,7 +48,7 @@ class Maven2DependenciesValidator extends AbstractMavenPluginDependenciesValidat
     protected void doValidate(MavenSession mavenSession, MojoDescriptor mojoDescriptor) {
         Set<String> maven2Versions = mojoDescriptor.getPluginDescriptor().getDependencies().stream()
                 .filter(d -> "org.apache.maven".equals(d.getGroupId()))
-                .filter(d -> !expectedProvidedScopeExclusions.contains(d.getGroupId() + ":" + d.getArtifactId()))
+                .filter(d -> !EXPECTED_PROVIDED_SCOPE_EXCLUSIONS_GA.contains(d.getGroupId() + ":" + d.getArtifactId()))
                 .map(ComponentDependency::getVersion)
                 .filter(v -> v.startsWith("2."))
                 .collect(Collectors.toSet());

File: maven-core/src/main/java/org/apache/maven/plugin/internal/MavenMixedDependenciesValidator.java
Patch:
@@ -48,7 +48,7 @@ class MavenMixedDependenciesValidator extends AbstractMavenPluginDependenciesVal
     protected void doValidate(MavenSession mavenSession, MojoDescriptor mojoDescriptor) {
         Set<String> mavenVersions = mojoDescriptor.getPluginDescriptor().getDependencies().stream()
                 .filter(d -> "org.apache.maven".equals(d.getGroupId()))
-                .filter(d -> !expectedProvidedScopeExclusions.contains(d.getGroupId() + ":" + d.getArtifactId()))
+                .filter(d -> !EXPECTED_PROVIDED_SCOPE_EXCLUSIONS_GA.contains(d.getGroupId() + ":" + d.getArtifactId()))
                 .map(ComponentDependency::getVersion)
                 .collect(Collectors.toSet());
 

File: maven-core/src/main/java/org/apache/maven/DefaultMaven.java
Patch:
@@ -508,7 +508,7 @@ private void validatePrerequisitesForNonMavenPluginProjects(List<MavenProject> p
      * @return A {@link Set} of profile identifiers, never {@code null}.
      */
     private Set<String> getAllProfiles(MavenSession session) {
-        final Model superPomModel = superPomProvider.getSuperModel("4.0.0");
+        final Model superPomModel = superPomProvider.getSuperModel("4.0.0").getDelegate();
         final Set<MavenProject> projectsIncludingParents = new HashSet<>();
         for (MavenProject project : session.getProjects()) {
             boolean isAdded = projectsIncludingParents.add(project);

File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java
Patch:
@@ -1575,7 +1575,7 @@ private ModelData readParentExternally(
     }
 
     private Model getSuperModel() {
-        return new Model(superPomProvider.getSuperModel("4.0.0"));
+        return superPomProvider.getSuperModel("4.0.0");
     }
 
     private void importDependencyManagement(

File: maven-model-builder/src/main/java/org/apache/maven/model/superpom/DefaultSuperPomProvider.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.Map;
 
 import org.apache.maven.api.model.InputSource;
-import org.apache.maven.api.model.Model;
+import org.apache.maven.model.Model;
 import org.apache.maven.model.building.ModelProcessor;
 
 /**
@@ -74,7 +74,7 @@ public Model getSuperModel(String version) {
                         modelId, getClass().getResource(resource).toExternalForm());
                 options.put(ModelProcessor.INPUT_SOURCE, new org.apache.maven.model.InputSource(inputSource));
 
-                superModel = modelProcessor.read(is, options).getDelegate();
+                superModel = modelProcessor.read(is, options);
             } catch (IOException e) {
                 throw new IllegalStateException(
                         "The super POM " + resource + " is damaged"

File: maven-model-builder/src/main/java/org/apache/maven/model/superpom/SuperPomProvider.java
Patch:
@@ -18,7 +18,7 @@
  */
 package org.apache.maven.model.superpom;
 
-import org.apache.maven.api.model.Model;
+import org.apache.maven.model.Model;
 
 /**
  * Provides the super POM that all models implicitly inherit from.

File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -332,10 +332,10 @@ void initialize(CliRequest cliRequest) throws ExitException {
         for (String arg : cliRequest.args) {
             if (isAltFile) {
                 // this is the argument following -f/--file
-                Path path = Paths.get(arg);
+                Path path = topDirectory.resolve(arg);
                 if (Files.isDirectory(path)) {
                     topDirectory = path;
-                } else if (Files.isRegularFile(topDirectory)) {
+                } else if (Files.isRegularFile(path)) {
                     topDirectory = path.getParent();
                     if (!Files.isDirectory(topDirectory)) {
                         System.err.println("Directory " + topDirectory

File: maven-core/src/main/java/org/apache/maven/internal/transformation/ConsumerPomArtifactTransformer.java
Patch:
@@ -74,6 +74,9 @@ public void injectTransformedArtifacts(MavenProject project, RepositorySystemSes
                 generatedFile = Files.createTempFile(buildDir, CONSUMER_POM_CLASSIFIER, "pom");
             }
             project.addAttachedArtifact(new ConsumerPomArtifact(project, generatedFile, session));
+        } else if (project.getModel().isRoot()) {
+            throw new IllegalStateException(
+                    "The use of the root attribute on the model requires the buildconsumer feature to be active");
         }
     }
 

File: maven-model-builder/src/test/java/org/apache/maven/model/interpolation/StringVisitorModelInterpolatorTest.java
Patch:
@@ -20,6 +20,6 @@
 
 public class StringVisitorModelInterpolatorTest extends AbstractModelInterpolatorTest {
     protected ModelInterpolator createInterpolator() {
-        return new StringVisitorModelInterpolator(null, null);
+        return new StringVisitorModelInterpolator(null, null, bd -> true);
     }
 }

File: maven-model-transform/src/main/java/org/apache/maven/model/transform/RawToConsumerPomXMLFilterFactory.java
Patch:
@@ -40,6 +40,8 @@ public final XmlPullParser get(XmlPullParser orgParser, Path projectPath) {
 
         parser = buildPomXMLFilterFactory.get(parser, projectPath);
 
+        // Remove root model attribute
+        parser = new RootXMLFilter(parser);
         // Strip modules
         parser = new ModulesXMLFilter(parser);
         // Adjust relativePath

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5222MojoDeprecatedTest.java
Patch:
@@ -58,6 +58,7 @@ public void testEmptyConfiguration()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.setLogFileName( "log-empty-configuration.txt" );
+        verifier.addCliArgument( "-Dmaven.plugin.validation=verbose" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();
@@ -107,6 +108,7 @@ public void testDeprecatedProperty()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.setLogFileName( "log-deprecated-property.txt" );
+        verifier.addCliArgument( "-Dmaven.plugin.validation=verbose" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();
@@ -166,6 +168,7 @@ public void testDeprecatedConfig()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.setLogFileName( "log-deprecated-config.txt" );
+        verifier.addCliArgument( "-Dmaven.plugin.validation=verbose" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng7464ReadOnlyMojoParametersWarningTest.java
Patch:
@@ -54,6 +54,7 @@ public void testEmptyConfiguration() throws Exception
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.setLogFileName( "log-empty-configuration.txt" );
+        verifier.addCliArgument( "-Dmaven.plugin.validation=verbose" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();
@@ -78,6 +79,7 @@ public void testReadOnlyProperty()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.setLogFileName( "log-read-only-property.txt" );
+        verifier.addCliArgument( "-Dmaven.plugin.validation=verbose" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();
@@ -102,6 +104,7 @@ public void testReadOnlyConfig() throws Exception
         verifier.deleteDirectory( "target" );
         verifier.setLogFileName( "log-read-only-configuration.txt" );
         verifier.addCliArgument( "-Pconfig-values" );
+        verifier.addCliArgument( "-Dmaven.plugin.validation=verbose" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: maven-embedder/src/test/java/org/apache/maven/cli/MavenCliTest.java
Patch:
@@ -158,7 +158,6 @@ public void testCalculateDegreeOfConcurrency() {
         int cpus = Runtime.getRuntime().availableProcessors();
         assertEquals((int) (cpus * 2.2), cli.calculateDegreeOfConcurrency("2.2C"));
         assertEquals(1, cli.calculateDegreeOfConcurrency("0.0001C"));
-        assertThrows(IllegalArgumentException.class, () -> cli.calculateDegreeOfConcurrency("2.C"));
         assertThrows(IllegalArgumentException.class, () -> cli.calculateDegreeOfConcurrency("-2.2C"));
         assertThrows(IllegalArgumentException.class, () -> cli.calculateDegreeOfConcurrency("0C"));
     }

File: maven-compat/src/main/java/org/apache/maven/artifact/repository/metadata/MetadataBridge.java
Patch:
@@ -22,10 +22,10 @@
 import java.util.Collections;
 import java.util.Map;
 
+import org.apache.commons.io.FileUtils;
 import org.apache.maven.artifact.metadata.ArtifactMetadata;
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.artifact.repository.DefaultArtifactRepository;
-import org.codehaus.plexus.util.FileUtils;
 import org.eclipse.aether.RepositoryException;
 import org.eclipse.aether.metadata.AbstractMetadata;
 import org.eclipse.aether.metadata.MergeableMetadata;

File: maven-core/src/main/java/org/apache/maven/project/artifact/ProjectArtifactMetadata.java
Patch:
@@ -21,12 +21,12 @@
 import java.io.File;
 import java.io.IOException;
 
+import org.apache.commons.io.FileUtils;
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.metadata.AbstractArtifactMetadata;
 import org.apache.maven.artifact.metadata.ArtifactMetadata;
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.artifact.repository.metadata.RepositoryMetadataStoreException;
-import org.codehaus.plexus.util.FileUtils;
 
 /**
  * Attach a POM to an artifact.

File: maven-core/src/test/java/org/apache/maven/artifact/handler/ArtifactHandlerTest.java
Patch:
@@ -23,9 +23,9 @@
 import java.io.File;
 import java.util.List;
 
+import org.apache.commons.io.FileUtils;
 import org.codehaus.plexus.PlexusContainer;
 import org.codehaus.plexus.testing.PlexusTest;
-import org.codehaus.plexus.util.FileUtils;
 import org.junit.jupiter.api.Test;
 
 import static org.codehaus.plexus.testing.PlexusExtension.getTestFile;
@@ -40,7 +40,7 @@ public class ArtifactHandlerTest {
     public void testAptConsistency() throws Exception {
         File apt = getTestFile("src/site/apt/artifact-handlers.apt");
 
-        List<String> lines = FileUtils.loadFile(apt);
+        List<String> lines = FileUtils.readLines(apt);
 
         for (String line : lines) {
             if (line.startsWith("||")) {

File: maven-core/src/test/java/org/apache/maven/internal/impl/TestRepositorySystem.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.List;
 import java.util.Map;
 
+import org.apache.commons.io.FileUtils;
 import org.apache.maven.api.model.Model;
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.DefaultArtifact;
@@ -55,7 +56,6 @@
 import org.apache.maven.settings.Mirror;
 import org.apache.maven.settings.Proxy;
 import org.apache.maven.settings.Server;
-import org.codehaus.plexus.util.FileUtils;
 import org.codehaus.plexus.util.StringUtils;
 import org.eclipse.aether.RepositorySystemSession;
 

File: maven-core/src/test/java/org/apache/maven/repository/TestRepositoryConnector.java
Patch:
@@ -24,7 +24,7 @@
 import java.net.URL;
 import java.util.Collection;
 
-import org.codehaus.plexus.util.FileUtils;
+import org.apache.commons.io.FileUtils;
 import org.eclipse.aether.artifact.Artifact;
 import org.eclipse.aether.metadata.Metadata;
 import org.eclipse.aether.repository.RemoteRepository;

File: maven-core/src/test/java/org/apache/maven/repository/TestRepositorySystem.java
Patch:
@@ -30,6 +30,7 @@
 import java.util.Map;
 import java.util.stream.Collectors;
 
+import org.apache.commons.io.FileUtils;
 import org.apache.maven.api.model.Model;
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.DefaultArtifact;
@@ -52,7 +53,6 @@
 import org.apache.maven.settings.Mirror;
 import org.apache.maven.settings.Proxy;
 import org.apache.maven.settings.Server;
-import org.codehaus.plexus.util.FileUtils;
 import org.codehaus.plexus.util.StringUtils;
 import org.eclipse.aether.RepositorySystemSession;
 

File: maven-embedder/src/test/java/org/apache/maven/cli/CLIManagerDocumentationTest.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.List;
 
 import org.apache.commons.cli.Option;
-import org.codehaus.plexus.util.FileUtils;
+import org.apache.commons.io.FileUtils;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -88,6 +88,6 @@ public String getOptionsAsHtml() {
     @Test
     public void testOptionsAsHtml() throws IOException {
         File options = new File("target/test-classes/options.html");
-        FileUtils.fileWrite(options, "UTF-8", getOptionsAsHtml());
+        FileUtils.write(options, getOptionsAsHtml(), "UTF-8");
     }
 }

File: maven-core/src/main/java/org/apache/maven/lifecycle/providers/packaging/AbstractLifecycleMappingProvider.java
Patch:
@@ -39,7 +39,7 @@ public abstract class AbstractLifecycleMappingProvider implements Provider<Lifec
 
     protected static final String COMPILER_PLUGIN_VERSION = "3.10.1";
 
-    protected static final String SUREFIRE_PLUGIN_VERSION = "3.0.0-M8";
+    protected static final String SUREFIRE_PLUGIN_VERSION = "3.0.0";
 
     protected static final String INSTALL_PLUGIN_VERSION = "3.1.0";
 

File: its/core-it-support/maven-it-plugin-bootstrap/src/main/java/org/apache/maven/its/bootstrap/DownloadMojo.java
Patch:
@@ -74,7 +74,7 @@ public class DownloadMojo
     @Component
     private RepositorySystem repositorySystem;
 
-    @Component
+    @Parameter( defaultValue = "${session}", readonly = true )
     private MavenSession session;
 
     @Override

File: its/core-it-suite/src/test/java/org/apache/maven/it/TestSuiteOrdering.java
Patch:
@@ -105,6 +105,7 @@ public TestSuiteOrdering()
          * the tests are to finishing. Newer tests are also more likely to fail, so this is
          * a fail fast technique as well.
          */
+        suite.addTestSuite( MavenITmng7737ProfileActivationTest.class );
         suite.addTestSuite( MavenITmng7716BuildDeadlock.class );
         suite.addTestSuite( MavenITmng7679SingleMojoNoPomTest.class );
         suite.addTestSuite( MavenITmng7629SubtreeBuildTest.class );

File: maven-core/src/test/java/org/apache/maven/project/ProjectModelResolverTest.java
Patch:
@@ -37,7 +37,7 @@
 
 import static org.codehaus.plexus.testing.PlexusExtension.getBasedir;
 import static org.hamcrest.MatcherAssert.assertThat;
-import static org.hamcrest.Matchers.startsWith;
+import static org.hamcrest.Matchers.containsString;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertThrows;
@@ -69,7 +69,7 @@ public void testResolveParentThrowsUnresolvableModelExceptionWhenNotFound() thro
                 () -> newModelResolver().resolveModel(parent.getDelegate(), new AtomicReference<>()),
                 "Expected 'UnresolvableModelException' not thrown.");
         assertNotNull(e.getMessage());
-        assertThat(e.getMessage(), startsWith("Could not find artifact org.apache:apache:pom:0 in central"));
+        assertThat(e.getMessage(), containsString("Could not find artifact org.apache:apache:pom:0 in central"));
     }
 
     @Test
@@ -135,7 +135,7 @@ public void testResolveDependencyThrowsUnresolvableModelExceptionWhenNotFound()
                 () -> newModelResolver().resolveModel(dependency.getDelegate(), new AtomicReference<>()),
                 "Expected 'UnresolvableModelException' not thrown.");
         assertNotNull(e.getMessage());
-        assertThat(e.getMessage(), startsWith("Could not find artifact org.apache:apache:pom:0 in central"));
+        assertThat(e.getMessage(), containsString("Could not find artifact org.apache:apache:pom:0 in central"));
     }
 
     @Test

File: maven-resolver-provider/src/test/java/org/apache/maven/repository/internal/DefaultModelResolverTest.java
Patch:
@@ -65,7 +65,7 @@ public void testResolveParentThrowsUnresolvableModelExceptionWhenNotFound() thro
                 () -> newModelResolver().resolveModel(parent, new AtomicReference<>()),
                 "Expected 'UnresolvableModelException' not thrown.");
         assertNotNull(e.getMessage());
-        assertTrue(e.getMessage().startsWith("Could not find artifact ut.simple:artifact:pom:0 in repo"));
+        assertTrue(e.getMessage().contains("Could not find artifact ut.simple:artifact:pom:0 in repo"));
     }
 
     @Test
@@ -138,7 +138,7 @@ public void testResolveDependencyThrowsUnresolvableModelExceptionWhenNotFound()
                 () -> newModelResolver().resolveModel(dependency, new AtomicReference<>()),
                 "Expected 'UnresolvableModelException' not thrown.");
         assertNotNull(e.getMessage());
-        assertTrue(e.getMessage().startsWith("Could not find artifact ut.simple:artifact:pom:0 in repo"));
+        assertTrue(e.getMessage().contains("Could not find artifact ut.simple:artifact:pom:0 in repo"));
     }
 
     @Test

File: maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java
Patch:
@@ -1022,7 +1022,7 @@ public boolean isUseLegacyLocalRepository() {
 
     @Override
     public MavenExecutionRequest setUseLegacyLocalRepository(boolean useLegacyLocalRepositoryManager) {
-        this.useLegacyLocalRepositoryManager = useLegacyLocalRepositoryManager;
+        this.useLegacyLocalRepositoryManager = false;
         return this;
     }
 

File: maven-artifact/src/main/java/org/apache/maven/artifact/repository/ArtifactRepository.java
Patch:
@@ -28,7 +28,10 @@
 /**
  * Abstraction of an artifact repository. Artifact repositories can be remote, local, or even build reactor or
  * IDE workspace.
+ *
+ * @deprecated Avoid use of this type, if you need access to local repository use repository system classes instead.
  */
+@Deprecated
 public interface ArtifactRepository {
     String pathOf(Artifact artifact);
 

File: maven-artifact/src/main/java/org/apache/maven/artifact/repository/ArtifactRepositoryPolicy.java
Patch:
@@ -25,7 +25,9 @@
  * Describes a set of policies for a repository to use under certain conditions.
  *
  * @author <a href="mailto:brett@apache.org">Brett Porter</a>
+ * @deprecated Avoid use of this type, if you need access to local repository use repository system session instead.
  */
+@Deprecated
 public class ArtifactRepositoryPolicy {
     public static final String UPDATE_POLICY_NEVER = "never";
 

File: maven-core/src/main/java/org/apache/maven/plugin/PluginParameterExpressionEvaluator.java
Patch:
@@ -38,7 +38,7 @@
  * <tr><td><code>session</code></td>           <td></td>               <td>the actual {@link MavenSession}</td></tr>
  * <tr><td><code>session.*</code></td>         <td>(since Maven 3)</td><td></td></tr>
  * <tr><td><code>localRepository</code></td>   <td></td>
- *                                             <td>{@link MavenSession#getLocalRepository()}</td></tr>
+ *                                             <td>{@link MavenSession#getLocalRepository()} DEPRECATED: Avoid use of {@link org.apache.maven.artifact.repository.ArtifactRepository} type. If you need access to local repository, switch to '${repositorySystemSession}' expression and get LRM from it instead. See <a href="https://issues.apache.org/jira/browse/MNG-7706">MNG-7706</a></td></tr>
  * <tr><td><code>reactorProjects</code></td>   <td></td>               <td>{@link MavenSession#getProjects()}</td></tr>
  * <tr><td><code>repositorySystemSession</code></td><td> (since Maven 3)</td>
  *                                             <td>{@link MavenSession#getRepositorySession()}</td></tr>

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4305LocalRepoBasedirTest.java
Patch:
@@ -64,7 +64,7 @@ public void testit()
 
         // NOTE: This deliberately compares the paths on the String level, not via File.equals()
         assertEquals( new File( verifier.getLocalRepository() ).getAbsolutePath(),
-                      props.getProperty( "localRepository.basedir" ) );
+                      props.getProperty( "localRepositoryBasedir" ) );
     }
 
 }

File: its/core-it-support/core-it-plugins/maven-it-plugin-expression/src/main/java/org/apache/maven/plugin/coreit/EvalMojo.java
Patch:
@@ -117,8 +117,8 @@ public class EvalMojo
     /**
      * The local repository of the current build against which expressions are evaluated.
      */
-    @Parameter( defaultValue = "${localRepository}", readonly = true )
-    private Object localRepository;
+    @Parameter( defaultValue = "${session.request.localRepositoryPath}", readonly = true )
+    private Object localRepositoryBasedir;
 
     /**
      * Runs this mojo.
@@ -158,7 +158,7 @@ public void execute()
             contexts.put( "pom", project );
             contexts.put( "settings", settings );
             contexts.put( "session", session );
-            contexts.put( "localRepository", localRepository );
+            contexts.put( "localRepositoryBasedir", localRepositoryBasedir );
 
             for ( String expression : expressions )
             {

File: maven-core/src/main/java/org/apache/maven/lifecycle/providers/packaging/AbstractLifecycleMappingProvider.java
Patch:
@@ -42,7 +42,7 @@ public abstract class AbstractLifecycleMappingProvider implements Provider<Lifec
 
     protected static final String INSTALL_PLUGIN_VERSION = "3.1.0";
 
-    protected static final String DEPLOY_PLUGIN_VERSION = "3.0.0";
+    protected static final String DEPLOY_PLUGIN_VERSION = "3.1.0";
 
     // packaging
 

File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/ModelInterpolator.java
Patch:
@@ -20,7 +20,7 @@
 
 import java.io.File;
 
-import org.apache.maven.api.model.Model;
+import org.apache.maven.model.Model;
 import org.apache.maven.model.building.ModelBuildingRequest;
 import org.apache.maven.model.building.ModelProblemCollector;
 
@@ -46,8 +46,8 @@ public interface ModelInterpolator {
      */
     Model interpolateModel(Model model, File projectDir, ModelBuildingRequest request, ModelProblemCollector problems);
 
-    org.apache.maven.model.Model interpolateModel(
-            org.apache.maven.model.Model model,
+    org.apache.maven.api.model.Model interpolateModel(
+            org.apache.maven.api.model.Model model,
             File projectDir,
             ModelBuildingRequest request,
             ModelProblemCollector problems);

File: maven-settings-builder/src/main/java/org/apache/maven/settings/io/DefaultSettingsReader.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.Map;
 import java.util.Objects;
 
-import org.apache.maven.api.settings.Settings;
+import org.apache.maven.settings.Settings;
 import org.apache.maven.settings.v4.SettingsXpp3Reader;
 import org.codehaus.plexus.util.ReaderFactory;
 import org.codehaus.plexus.util.xml.pull.XmlPullParserException;
@@ -54,7 +54,7 @@ public Settings read(Reader input, Map<String, ?> options) throws IOException {
         Objects.requireNonNull(input, "input cannot be null");
 
         try (Reader in = input) {
-            return new SettingsXpp3Reader().read(in, isStrict(options));
+            return new Settings(new SettingsXpp3Reader().read(in, isStrict(options)));
         } catch (XmlPullParserException e) {
             throw new SettingsParseException(e.getMessage(), e.getLineNumber(), e.getColumnNumber(), e);
         }
@@ -65,7 +65,7 @@ public Settings read(InputStream input, Map<String, ?> options) throws IOExcepti
         Objects.requireNonNull(input, "input cannot be null");
 
         try (InputStream in = input) {
-            return new SettingsXpp3Reader().read(in, isStrict(options));
+            return new Settings(new SettingsXpp3Reader().read(in, isStrict(options)));
         } catch (XmlPullParserException e) {
             throw new SettingsParseException(e.getMessage(), e.getLineNumber(), e.getColumnNumber(), e);
         }

File: maven-settings-builder/src/main/java/org/apache/maven/settings/io/DefaultSettingsWriter.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.Map;
 import java.util.Objects;
 
-import org.apache.maven.api.settings.Settings;
+import org.apache.maven.settings.Settings;
 import org.apache.maven.settings.v4.SettingsXpp3Writer;
 import org.codehaus.plexus.util.WriterFactory;
 
@@ -58,7 +58,7 @@ public void write(Writer output, Map<String, Object> options, Settings settings)
         Objects.requireNonNull(settings, "settings cannot be null");
 
         try (Writer out = output) {
-            new SettingsXpp3Writer().write(out, settings);
+            new SettingsXpp3Writer().write(out, settings.getDelegate());
         }
     }
 

File: maven-settings-builder/src/main/java/org/apache/maven/settings/io/SettingsReader.java
Patch:
@@ -24,7 +24,7 @@
 import java.io.Reader;
 import java.util.Map;
 
-import org.apache.maven.api.settings.Settings;
+import org.apache.maven.settings.Settings;
 
 /**
  * Handles deserialization of settings from some kind of textual format like XML.

File: maven-settings-builder/src/main/java/org/apache/maven/settings/io/SettingsWriter.java
Patch:
@@ -24,7 +24,7 @@
 import java.io.Writer;
 import java.util.Map;
 
-import org.apache.maven.api.settings.Settings;
+import org.apache.maven.settings.Settings;
 
 /**
  * Handles serialization of settings into some kind of textual format like XML.

File: maven-settings-builder/src/main/java/org/apache/maven/settings/validation/SettingsValidator.java
Patch:
@@ -18,7 +18,7 @@
  */
 package org.apache.maven.settings.validation;
 
-import org.apache.maven.api.settings.Settings;
+import org.apache.maven.settings.Settings;
 import org.apache.maven.settings.building.SettingsProblemCollector;
 
 /**

File: maven-toolchain-builder/src/main/java/org/apache/maven/toolchain/io/DefaultToolchainsReader.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.Map;
 import java.util.Objects;
 
-import org.apache.maven.api.toolchain.PersistedToolchains;
+import org.apache.maven.toolchain.model.PersistedToolchains;
 import org.apache.maven.toolchain.v4.MavenToolchainsXpp3Reader;
 import org.codehaus.plexus.util.ReaderFactory;
 import org.codehaus.plexus.util.xml.pull.XmlPullParserException;
@@ -55,7 +55,7 @@ public PersistedToolchains read(Reader input, Map<String, ?> options) throws IOE
         Objects.requireNonNull(input, "input cannot be null");
 
         try (Reader in = input) {
-            return new MavenToolchainsXpp3Reader().read(in, isStrict(options));
+            return new PersistedToolchains(new MavenToolchainsXpp3Reader().read(in, isStrict(options)));
         } catch (XmlPullParserException e) {
             throw new ToolchainsParseException(e.getMessage(), e.getLineNumber(), e.getColumnNumber(), e);
         }
@@ -66,7 +66,7 @@ public PersistedToolchains read(InputStream input, Map<String, ?> options) throw
         Objects.requireNonNull(input, "input cannot be null");
 
         try (InputStream in = input) {
-            return new MavenToolchainsXpp3Reader().read(in, isStrict(options));
+            return new PersistedToolchains(new MavenToolchainsXpp3Reader().read(in, isStrict(options)));
         } catch (XmlPullParserException e) {
             throw new ToolchainsParseException(e.getMessage(), e.getLineNumber(), e.getColumnNumber(), e);
         }

File: maven-toolchain-builder/src/main/java/org/apache/maven/toolchain/io/DefaultToolchainsWriter.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.Map;
 import java.util.Objects;
 
-import org.apache.maven.api.toolchain.PersistedToolchains;
+import org.apache.maven.toolchain.model.PersistedToolchains;
 import org.apache.maven.toolchain.v4.MavenToolchainsXpp3Writer;
 
 /**
@@ -45,7 +45,7 @@ public void write(Writer output, Map<String, Object> options, PersistedToolchain
         Objects.requireNonNull(toolchains, "toolchains cannot be null");
 
         try (Writer out = output) {
-            new MavenToolchainsXpp3Writer().write(out, toolchains);
+            new MavenToolchainsXpp3Writer().write(out, toolchains.getDelegate());
         }
     }
 }

File: maven-toolchain-builder/src/main/java/org/apache/maven/toolchain/io/ToolchainsReader.java
Patch:
@@ -24,7 +24,7 @@
 import java.io.Reader;
 import java.util.Map;
 
-import org.apache.maven.api.toolchain.PersistedToolchains;
+import org.apache.maven.toolchain.model.PersistedToolchains;
 
 /**
  * Handles deserialization of toolchains from some kind of textual format like XML.

File: maven-toolchain-builder/src/main/java/org/apache/maven/toolchain/io/ToolchainsWriter.java
Patch:
@@ -22,7 +22,7 @@
 import java.io.Writer;
 import java.util.Map;
 
-import org.apache.maven.api.toolchain.PersistedToolchains;
+import org.apache.maven.toolchain.model.PersistedToolchains;
 
 /**
  * Handles serialization of toolchains into some kind of textual format like XML.

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng6118SubmoduleInvocation.java
Patch:
@@ -61,7 +61,7 @@ public void testInSubModule() throws Exception
     {
         // Compile the whole project first.
         Verifier verifier = newVerifier( testDir.getAbsolutePath() );
-        verifier.addCliArgument( "compile" );
+        verifier.addCliArgument( "package" );
         verifier.execute();
 
         final File submoduleDirectory = new File( testDir, "app" );
@@ -82,7 +82,7 @@ public void testWithFile() throws Exception
     {
         // Compile the whole project first.
         Verifier verifier = newVerifier( testDir.getAbsolutePath() );
-        verifier.addCliArgument( "compile" );
+        verifier.addCliArgument( "package" );
         verifier.execute();
 
         verifier = newVerifier( testDir.getAbsolutePath() );

File: maven-core/src/main/java/org/apache/maven/internal/aether/ResolverLifecycle.java
Patch:
@@ -35,11 +35,11 @@
  */
 @Named
 @EagerSingleton
-public final class ResolverLifecycle {
+final class ResolverLifecycle {
     private final Provider<RepositorySystem> repositorySystemProvider;
 
     @Inject
-    public ResolverLifecycle(Provider<RepositorySystem> repositorySystemProvider) {
+    ResolverLifecycle(Provider<RepositorySystem> repositorySystemProvider) {
         this.repositorySystemProvider = requireNonNull(repositorySystemProvider);
     }
 

File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/LifecycleModuleBuilderTest.java
Patch:
@@ -37,6 +37,7 @@
 import org.apache.maven.project.MavenProject;
 import org.codehaus.plexus.PlexusContainer;
 import org.codehaus.plexus.testing.PlexusTest;
+import org.eclipse.aether.DefaultRepositorySystemSession;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -63,7 +64,8 @@ public void execute(MavenSession session, List<MojoExecution> mojoExecutions, Pr
         MavenExecutionRequest mavenExecutionRequest = new DefaultMavenExecutionRequest();
         mavenExecutionRequest.setExecutionListener(new AbstractExecutionListener());
         mavenExecutionRequest.setGoals(Arrays.asList("clean"));
-        final MavenSession session = new MavenSession(null, null, mavenExecutionRequest, defaultMavenExecutionResult);
+        final MavenSession session = new MavenSession(
+                null, new DefaultRepositorySystemSession(), mavenExecutionRequest, defaultMavenExecutionResult);
         final ProjectDependencyGraphStub dependencyGraphStub = new ProjectDependencyGraphStub();
         session.setProjectDependencyGraph(dependencyGraphStub);
         session.setProjects(dependencyGraphStub.getSortedProjects());

File: maven-core/src/main/java/org/apache/maven/lifecycle/providers/CleanLifecycleProvider.java
Patch:
@@ -28,12 +28,12 @@
 @Named(CleanLifecycleProvider.LIFECYCLE_ID)
 @Singleton
 public final class CleanLifecycleProvider extends AbstractLifecycleProvider {
-    protected static final String LIFECYCLE_ID = "clean";
+    static final String LIFECYCLE_ID = "clean";
 
     // START SNIPPET: clean
     private static final String[] PHASES = {"pre-clean", "clean", "post-clean"};
 
-    private static final String MAVEN_CLEAN_PLUGIN_VERSION = "3.1.0";
+    private static final String MAVEN_CLEAN_PLUGIN_VERSION = "3.2.0";
 
     private static final String[] BINDINGS = {
         "clean", "org.apache.maven.plugins:maven-clean-plugin:" + MAVEN_CLEAN_PLUGIN_VERSION + ":clean"

File: maven-core/src/main/java/org/apache/maven/lifecycle/providers/DefaultLifecycleProvider.java
Patch:
@@ -28,7 +28,7 @@
 @Named(DefaultLifecycleProvider.LIFECYCLE_ID)
 @Singleton
 public final class DefaultLifecycleProvider extends AbstractLifecycleProvider {
-    protected static final String LIFECYCLE_ID = "default";
+    static final String LIFECYCLE_ID = "default";
 
     // START SNIPPET: default
     private static final String[] PHASES = {

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0828PluginConfigValuesInDebugTest.java
Patch:
@@ -60,7 +60,7 @@ public void testitMNG0828()
         Verifier verifier = newVerifier( testDir.getAbsolutePath() );
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
-        verifier.setMavenDebug( true );
+        verifier.addCliArgument( "-X" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5175WagonHttpTest.java
Patch:
@@ -133,7 +133,7 @@ public void testmng5175_ReadTimeOutFromSettings()
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "--fail-never" );
         verifier.addCliArgument( "--errors" );
-        verifier.setMavenDebug( true );
+        verifier.addCliArgument( "-X" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5214DontMapWsdlToJar.java
Patch:
@@ -49,7 +49,7 @@ public void testitTestPhase()
 
         Verifier setupVerifier = newVerifier( setupDir.getAbsolutePath() );
         setupVerifier.setAutoclean( false );
-        setupVerifier.setMavenDebug( true );
+        setupVerifier.addCliArgument( "-X" );
         setupVerifier.deleteDirectory( "target" );
         setupVerifier.deleteArtifacts( "org.apache.maven.its.mng5214" );
         setupVerifier.setLogFileName( "log-setup.txt" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5230MakeReactorWithExcludesTest.java
Patch:
@@ -61,7 +61,7 @@ public void testitMakeWithExclude()
         File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-5230-make-reactor-with-excludes" );
 
         Verifier verifier = newVerifier( testDir.getAbsolutePath(), true );
-        verifier.setMavenDebug( true );
+        verifier.addCliArgument( "-X" );
         verifier.setAutoclean( false );
         clean( verifier );
         verifier.addCliArgument( "-pl" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5581LifecycleMappingDelegate.java
Patch:
@@ -72,7 +72,7 @@ public void testCustomLifecycle()
         verifier = newVerifier( projectDir.getAbsolutePath() );
         verifier.setLogFileName( "test-only-log.txt" );
         verifier.setForkJvm( true );
-        verifier.setMavenDebug( true );
+        verifier.addCliArgument( "-X" );
         verifier.addCliArgument( "test-only" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5895CIFriendlyUsageWithPropertyTest.java
Patch:
@@ -60,7 +60,6 @@ public void testitShouldResolveTheDependenciesWithoutBuildConsumer()
         File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-5895-ci-friendly-usage-with-property" );
 
         Verifier verifier = newVerifier( testDir.getAbsolutePath(), false );
-        verifier.setMavenDebug( false );
         verifier.setAutoclean( false );
 
         //verifier.setLogFileName( "log-only.txt" );
@@ -81,7 +80,6 @@ public void testitShouldResolveTheDependenciesWithBuildConsumer()
         File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-5895-ci-friendly-usage-with-property" );
 
         Verifier verifier = newVerifier( testDir.getAbsolutePath(), false );
-        verifier.setMavenDebug( false );
         verifier.setAutoclean( false );
 
         verifier.setLogFileName( "log-bc.txt" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5965ParallelBuildMultipliesWorkTest.java
Patch:
@@ -32,7 +32,6 @@ public void testItShouldOnlyRunEachTaskOnce()
             ResourceExtractor.simpleExtractResources( getClass(), "/mng-5965-parallel-build-multiplies-work" );
 
         Verifier verifier = newVerifier( testDir.getAbsolutePath(), false );
-        verifier.setMavenDebug( false );
         verifier.setAutoclean( false );
 
         verifier.setLogFileName( "log-only.txt" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng6057CheckReactorOrderTest.java
Patch:
@@ -58,7 +58,6 @@ public void testitReactorShouldResultInExpectedOrder()
         File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-6057-check-reactor-order" );
 
         Verifier verifier = newVerifier( testDir.getAbsolutePath(), false );
-        verifier.setMavenDebug( false );
         verifier.setAutoclean( false );
 
         verifier.setLogFileName( "log-only.txt" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng6391PrintVersionTest.java
Patch:
@@ -62,7 +62,6 @@ public void testitShouldPrintVersionAtTopAndAtBottom()
         File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-6391-print-version" );
 
         Verifier verifier = newVerifier( testDir.getAbsolutePath(), false );
-        verifier.setMavenDebug( false );
         verifier.setAutoclean( false );
 
         verifier.setLogFileName( "version-log.txt" );
@@ -107,7 +106,6 @@ public void testitShouldPrintVersionInAllLines()
         File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-6391-print-version-aggregator" );
 
         Verifier verifier = newVerifier( testDir.getAbsolutePath(), false );
-        verifier.setMavenDebug( false );
         verifier.setAutoclean( false );
 
         verifier.setLogFileName( "version-log.txt" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng6656BuildConsumer.java
Patch:
@@ -73,7 +73,6 @@ public void testPublishedPoms()
         File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-6656-buildconsumer" );
 
         Verifier verifier = newVerifier( testDir.getAbsolutePath(), false );
-        verifier.setMavenDebug( false );
         verifier.setAutoclean( false );
         verifier.addCliArgument( "-Dchangelist=MNG6656" );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng6957BuildConsumer.java
Patch:
@@ -73,7 +73,6 @@ public void testPublishedPoms()
         File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-6957-buildconsumer" );
 
         Verifier verifier = newVerifier( testDir.getAbsolutePath(), false );
-        verifier.setMavenDebug( false );
         verifier.setAutoclean( false );
         verifier.addCliArgument( "-Dchangelist=MNG6957" );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0010DependencyClosureResolutionTest.java
Patch:
@@ -52,7 +52,7 @@ public void testit0010()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.it0010" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0011DefaultVersionByDependencyManagementTest.java
Patch:
@@ -49,7 +49,7 @@ public void testit0011()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.it0011" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0018DependencyManagementTest.java
Patch:
@@ -49,7 +49,7 @@ public void testit0018()
         Verifier verifier = newVerifier( testDir.getAbsolutePath() );
         verifier.setAutoclean( false );
         verifier.deleteArtifacts( "org.apache.maven.its.it0018" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "org.apache.maven.its.plugins:maven-it-plugin-dependency-resolution:2.1-SNAPSHOT:compile" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0021PomProfileTest.java
Patch:
@@ -50,7 +50,7 @@ public void testit0021()
         verifier.setAutoclean( false );
         verifier.deleteArtifacts( "org.apache.maven.its.it0021" );
         verifier.getSystemProperties().setProperty( "includeProfile", "true" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "-Pprofile-2" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0085TransitiveSystemScopeTest.java
Patch:
@@ -54,7 +54,7 @@ public void testit0085()
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.it0085" );
         verifier.getSystemProperties().setProperty( "test.home", testDir.getAbsolutePath() );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0087PluginRealmWithProjectLevelDepsTest.java
Patch:
@@ -57,7 +57,7 @@ public void testit0087()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.it0087" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0143TransitiveDependencyScopesTest.java
Patch:
@@ -24,7 +24,7 @@
 
 import java.io.File;
 import java.util.List;
-import java.util.Properties;
+import java.util.Map;
 
 import org.junit.jupiter.api.Test;
 
@@ -250,8 +250,8 @@ private Verifier run( String scope )
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target-" + scope );
         verifier.deleteArtifacts( "org.apache.maven.its.it0143" );
-        Properties filterProps = verifier.newDefaultFilterProperties();
-        filterProps.setProperty( "@scope@", scope );
+        Map<String, String> filterProps = verifier.newDefaultFilterMap();
+        filterProps.put( "@scope@", scope );
         verifier.filterFile( "pom-template.xml", "pom.xml", "UTF-8", filterProps );
         verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", filterProps );
         verifier.addCliArgument( "--settings" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0377PluginLookupFromPrefixTest.java
Patch:
@@ -56,7 +56,7 @@ public void testitMNG377()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng0377" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "-Dtouch.outputFile=target/file.txt" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0449PluginVersionResolutionTest.java
Patch:
@@ -67,7 +67,7 @@ public void testitLifecycleInvocation()
         }
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "../settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "../settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();
@@ -112,7 +112,7 @@ public void testitCliInvocation()
         }
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "../settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "../settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "org.apache.maven.its.mng0449:maven-it-plugin-a:touch" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0461TolerateMissingDependencyPomTest.java
Patch:
@@ -56,7 +56,7 @@ public void testit()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng0461" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0505VersionRangeTest.java
Patch:
@@ -60,7 +60,7 @@ public void testitMNG505()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng0505" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0666IgnoreLegacyPomTest.java
Patch:
@@ -57,7 +57,7 @@ public void testitMNG666()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.it0059" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0818WarDepsNotTransitiveTest.java
Patch:
@@ -57,7 +57,7 @@ public void testitMNG0818()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.it0080" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0820ConflictResolutionTest.java
Patch:
@@ -56,7 +56,7 @@ public void testitMNG0820()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng0820" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0836PluginParentResolutionTest.java
Patch:
@@ -58,7 +58,7 @@ public void testitMNG836()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng836" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         // Maven 3.x aims to separate plugins and project dependencies (MNG-4191)

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0870ReactorAwarePluginDiscoveryTest.java
Patch:
@@ -57,7 +57,7 @@ public void testitMNG0870()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "project/target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng0870" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "initialize" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0947OptionalDependencyTest.java
Patch:
@@ -59,7 +59,7 @@ public void testit()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng0947" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0956ComponentInjectionViaProjectLevelPluginDepTest.java
Patch:
@@ -55,7 +55,7 @@ public void testitMNG0956()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng0956" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1088ReactorPluginResolutionTest.java
Patch:
@@ -58,7 +58,7 @@ public void testitMNG1088()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "client/target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng1088" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         // NOTE: It's essential part of the test to invoke a phase before "compile"

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1142VersionRangeIntersectionTest.java
Patch:
@@ -78,7 +78,7 @@ private void testit( String project )
         verifier.deleteArtifacts( "org.apache.maven.its.mng1142" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "../settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "../settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1233WarDepWithProvidedScopeTest.java
Patch:
@@ -56,7 +56,7 @@ public void testitMNG1233()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.it0083" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1323AntrunDependenciesTest.java
Patch:
@@ -61,7 +61,7 @@ public void testitMNG1323()
         verifier.deleteDirectory( "b/target" );
         verifier.deleteDirectory( "c/target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng1323" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1349ChecksumFormatsTest.java
Patch:
@@ -55,7 +55,7 @@ public void testitMNG1349()
         Verifier verifier = newVerifier( testDir.getAbsolutePath() );
         verifier.setAutoclean( false );
         verifier.deleteArtifacts( "org.apache.maven.its.mng1349" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1412DependenciesOrderTest.java
Patch:
@@ -53,7 +53,7 @@ public void testitMNG1412()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng1412" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1703PluginMgmtDepInheritanceTest.java
Patch:
@@ -56,7 +56,7 @@ public void testitMNG1703()
 
         Verifier verifier = newVerifier( new File( testDir, "child" ).getAbsolutePath() );
         verifier.setAutoclean( false );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.deleteDirectory( "target" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1751ForcedMetadataUpdateDuringDeploymentTest.java
Patch:
@@ -73,7 +73,7 @@ public void testit()
         verifier = newVerifier( new File( testDir, "test" ).getAbsolutePath() );
         verifier.setAutoclean( false );
         verifier.deleteArtifacts( "org.apache.maven.its.mng1751" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2098VersionRangeSatisfiedFromWrongRepoTest.java
Patch:
@@ -59,7 +59,7 @@ public void testit()
         verifier.deleteArtifacts( "org.apache.maven.its.mng2098" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2123VersionRangeDependencyTest.java
Patch:
@@ -49,7 +49,7 @@ public void testitMNG2123()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng2123" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2174PluginDepsManagedByParentProfileTest.java
Patch:
@@ -58,7 +58,7 @@ public void testitMNG2174()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng2174" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2228ComponentInjectionTest.java
Patch:
@@ -57,7 +57,7 @@ public void testitMNG2228()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng2228" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2432PluginPrefixOrderTest.java
Patch:
@@ -58,7 +58,7 @@ public void testitMNG2432()
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng2432.pom" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng2432.settings" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "it:touch" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2486TimestampedDependencyVersionInterpolationTest.java
Patch:
@@ -83,7 +83,7 @@ public void testit()
         verifier.deleteDirectory( "target" );
         // enforce remote resolution
         verifier.deleteArtifacts( "org.apache.maven.its.mng2486" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2695OfflinePluginSnapshotsTest.java
Patch:
@@ -61,7 +61,7 @@ public void testitMNG2695()
             verifier.deleteArtifacts( "org.apache.maven.its.mng2695" );
             verifier.setAutoclean( false );
             verifier.setLogFileName( "log1.txt" );
-            verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+            verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
             verifier.addCliArgument( "--settings" );
             verifier.addCliArgument( "settings.xml" );
             verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2744checksumVerificationTest.java
Patch:
@@ -55,7 +55,7 @@ public void testitMNG2744()
         Verifier verifier = newVerifier( testDir.getAbsolutePath() );
         verifier.setAutoclean( false );
         verifier.deleteArtifacts( "org.apache.maven.its.mng2744" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2749ExtensionAvailableToPluginTest.java
Patch:
@@ -56,7 +56,7 @@ public void testitMNG2749()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng2749" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2861RelocationsAndRangesTest.java
Patch:
@@ -51,7 +51,7 @@ public void testitMNG2861()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "A/target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng2861" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2865MirrorWildcardTest.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.maven.shared.verifier.Verifier;
 
 import java.io.File;
-import java.util.Properties;
 
 import org.junit.jupiter.api.Test;
 
@@ -98,8 +97,7 @@ private void testit( String project )
         Verifier verifier = newVerifier( new File( testDir, project ).getAbsolutePath() );
         verifier.setAutoclean( false );
         verifier.deleteArtifacts( "org.apache.maven.its.mng2865" );
-        Properties filterProps = verifier.newDefaultFilterProperties();
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", filterProps );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2892HideCorePlexusUtilsTest.java
Patch:
@@ -58,7 +58,7 @@ public void testitMNG2892()
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifact( "org.codehaus.plexus", "plexus-utils", "0.1-mng2892", "jar" );
         verifier.deleteArtifact( "org.codehaus.plexus", "plexus-utils", "0.1-mng2892", "pom" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2972OverridePluginDependencyTest.java
Patch:
@@ -56,7 +56,7 @@ public void testitLifecycleInvocation()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifact( "org.apache.maven.its.plugins.class-loader", "dep-b", "0.2-mng-2972", "jar" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );
@@ -88,7 +88,7 @@ public void testitCommandLineInvocation()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifact( "org.apache.maven.its.plugins.class-loader", "dep-b", "9.9-MNG-2972", "jar" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "org.apache.maven.its.plugins:maven-it-plugin-class-loader:2.1-SNAPSHOT:load" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2994SnapshotRangeRepositoryTest.java
Patch:
@@ -53,7 +53,7 @@ public void testit()
         File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-2994" );
         Verifier verifier = newVerifier( testDir.getAbsolutePath() );
         verifier.deleteArtifacts( "org.apache.maven.its.mng2994" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3012CoreClassImportTest.java
Patch:
@@ -57,7 +57,7 @@ public void testitMNG3012()
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifact( "org.codehaus.plexus", "plexus-utils", "0.1-mng3012", "jar" );
         verifier.deleteArtifact( "org.codehaus.plexus", "plexus-utils", "0.1-mng3012", "pom" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3092SnapshotsExcludedFromVersionRangeTest.java
Patch:
@@ -59,7 +59,7 @@ public void testit()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng3092" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3099SettingsProfilesWithNoPomTest.java
Patch:
@@ -57,7 +57,7 @@ public void testit()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng3099" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "org.apache.maven.its.mng3099:maven-mng3099-plugin:0.1:touch" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3139UseCachedMetadataOfBlacklistedRepoTest.java
Patch:
@@ -59,7 +59,7 @@ public void testitMNG3139()
         verifier.setAutoclean( false );
         verifier.deleteArtifacts( "org.apache.maven.its.mng3139" );
 
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.setLogFileName( "log1.txt" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3217InterPluginDependencyTest.java
Patch:
@@ -58,7 +58,7 @@ public void testitMNG3217()
         verifier.deleteDirectory( "sub-1/target" );
         verifier.deleteDirectory( "sub-2/target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng3217" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3284UsingCachedPluginsTest.java
Patch:
@@ -60,7 +60,7 @@ public void testitMNG3284()
         Verifier verifier = newVerifier( testDir.getAbsolutePath() );
         verifier.setAutoclean( false );
         verifier.deleteArtifacts( "org.apache.maven.its.mng3284" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3314OfflineSnapshotsTest.java
Patch:
@@ -59,7 +59,7 @@ public void testitMNG3314 ()
             Verifier verifier = newVerifier( testDir.getAbsolutePath() );
             verifier.deleteArtifacts( "org.apache.maven.its.mng3314" );
             verifier.setLogFileName( "log1.txt" );
-            verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+            verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
             verifier.addCliArgument( "--settings" );
             verifier.addCliArgument( "settings.xml" );
             verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3379ParallelArtifactDownloadsTest.java
Patch:
@@ -59,7 +59,7 @@ public void testitMNG3379()
         verifier.deleteArtifacts( "org.apache.maven.its.mng3379.b" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng3379.c" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng3379.d" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "-Dmaven.artifact.threads=16" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3380ManagedRelocatedTransdepsTest.java
Patch:
@@ -63,7 +63,7 @@ public void testitMNG3380()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng3380" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3415JunkRepositoryMetadataTest.java
Patch:
@@ -28,7 +28,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.util.Deque;
-import java.util.Properties;
+import java.util.Map;
 import java.util.concurrent.ConcurrentLinkedDeque;
 
 import org.apache.maven.shared.utils.io.FileUtils;
@@ -96,7 +96,7 @@ public void testitTransferFailed()
 
         setupDummyDependency( verifier, testDir, true );
 
-        Properties filterProps = verifier.newDefaultFilterProperties();
+        Map<String, String> filterProps = verifier.newDefaultFilterMap();
         filterProps.put( "@protocol@", "invalid" );
         filterProps.put( "@port@", "0" );
         File settings = verifier.filterFile( "settings-template.xml", "settings-a.xml", "UTF-8", filterProps );
@@ -199,7 +199,7 @@ public void handle( String target, Request baseRequest, HttpServletRequest reque
             int port = ( (NetworkConnector) server.getConnectors()[0] ).getLocalPort();
             System.out.println( "Bound server socket to the port " + port );
 
-            Properties filterProps = verifier.newDefaultFilterProperties();
+            Map<String, String> filterProps = verifier.newDefaultFilterMap();
             filterProps.put( "@protocol@", "http" );
             filterProps.put( "@port@", Integer.toString( port ) );
             File settings = verifier.filterFile( "settings-template.xml", "settings-b.xml", "UTF-8", filterProps );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3470StrictChecksumVerificationOfDependencyPomTest.java
Patch:
@@ -56,7 +56,7 @@ public void testit()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng3470" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         try

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3482DependencyPomInterpolationTest.java
Patch:
@@ -50,7 +50,7 @@ public void testitMNG3482()
 
         Verifier verifier = newVerifier( testDir.getAbsolutePath() );
         verifier.setAutoclean( false );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng3482" );
         verifier.addCliArgument( "-s" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3586SystemScopePluginDependencyTest.java
Patch:
@@ -59,7 +59,7 @@ public void testitFromPlugin()
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng3586" );
         verifier.getSystemProperties().setProperty( "test.home", testDir.getAbsolutePath() );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3667ResolveDepsWithBadPomVersionTest.java
Patch:
@@ -61,7 +61,7 @@ public void testit()
         verifier.deleteArtifacts( "org.apache.maven.its.mng3667" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3680InvalidDependencyPOMTest.java
Patch:
@@ -56,7 +56,7 @@ public void testitMNG3680 ()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng3680" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3714ToolchainsCliOptionTest.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.maven.shared.verifier.Verifier;
 
 import java.io.File;
+import java.util.Map;
 import java.util.Properties;
 
 import org.junit.jupiter.api.Test;
@@ -59,8 +60,8 @@ public void testitMNG3714()
         new File( javaHome, "bin/javac.exe").createNewFile();
 
         Verifier verifier = newVerifier( testDir.getAbsolutePath() );
-        Properties properties = verifier.newDefaultFilterProperties();
-        properties.setProperty( "@javaHome@", javaHome.getAbsolutePath() );
+        Map<String, String> properties = verifier.newDefaultFilterMap();
+        properties.put( "@javaHome@", javaHome.getAbsolutePath() );
 
         verifier.filterFile( "toolchains.xml", "toolchains.xml", "UTF-8", properties );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3769ExclusionRelocatedTransdepsTest.java
Patch:
@@ -58,7 +58,7 @@ public void testitMNG3769()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng3769" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3775ConflictResolutionBacktrackingTest.java
Patch:
@@ -99,7 +99,7 @@ private void testit( String project )
         verifier.deleteArtifacts( "org.apache.maven.its.mng3775" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "../settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "../settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3805ExtensionClassPathOrderingTest.java
Patch:
@@ -57,7 +57,7 @@ public void testitMNG3805()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng3805" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3813PluginClassPathOrderingTest.java
Patch:
@@ -57,7 +57,7 @@ public void testitMNG3813()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng3813" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3814BogusProjectCycleTest.java
Patch:
@@ -55,7 +55,7 @@ public void testitMNG3814()
         Verifier verifier = newVerifier( testDir.getAbsolutePath() );
         verifier.setAutoclean( false );
         verifier.deleteArtifacts( "org.apache.maven.its.mng3814" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3872ProfileActivationInRelocatedPomTest.java
Patch:
@@ -24,7 +24,6 @@
 
 import java.io.File;
 import java.util.List;
-import java.util.Properties;
 
 import org.junit.jupiter.api.Test;
 
@@ -57,8 +56,7 @@ public void testit()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng3872" );
-        Properties filterProps = verifier.newDefaultFilterProperties();
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", filterProps );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3890TransitiveDependencyScopeUpdateTest.java
Patch:
@@ -58,7 +58,7 @@ public void testitMNG3890()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng3890" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3899ExtensionInheritanceTest.java
Patch:
@@ -57,7 +57,7 @@ public void testitMNG3899()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng3899" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3906MergedPluginClassPathOrderingTest.java
Patch:
@@ -57,7 +57,7 @@ public void testitMNG3906()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng3906" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3948ParentResolutionFromProfileReposTest.java
Patch:
@@ -57,7 +57,7 @@ public void testitFromPom()
         Verifier verifier = newVerifier( testDir.getAbsolutePath() );
         verifier.setAutoclean( false );
         verifier.deleteArtifacts( "org.apache.maven.its.mng3948" );
-        verifier.filterFile( "pom.xml", "pom.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "pom.xml", "pom.xml", "UTF-8" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3970DepResolutionFromProfileReposTest.java
Patch:
@@ -57,7 +57,7 @@ public void testitFromPom()
         Verifier verifier = newVerifier( testDir.getAbsolutePath() );
         verifier.setAutoclean( false );
         verifier.deleteArtifacts( "org.apache.maven.its.mng3970" );
-        verifier.filterFile( "pom.xml", "pom.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "pom.xml", "pom.xml", "UTF-8" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();
@@ -79,7 +79,7 @@ public void testitFromSettings()
         Verifier verifier = newVerifier( testDir.getAbsolutePath() );
         verifier.setAutoclean( false );
         verifier.deleteArtifacts( "org.apache.maven.its.mng3970" );
-        verifier.filterFile( "settings.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3974MirrorOrderingTest.java
Patch:
@@ -56,7 +56,7 @@ public void testitFirstMatchWins()
         Verifier verifier = newVerifier( testDir.getAbsolutePath() );
         verifier.setAutoclean( false );
         verifier.deleteArtifacts( "org.apache.maven.its.mng3974" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3983PluginResolutionFromProfileReposTest.java
Patch:
@@ -59,7 +59,7 @@ public void testitFromPom()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng3983" );
-        verifier.filterFile( "pom.xml", "pom.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "pom.xml", "pom.xml", "UTF-8" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();
@@ -83,7 +83,7 @@ public void testitFromSettings()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng3983" );
-        verifier.filterFile( "settings.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4036ParentResolutionFromSettingsRepoTest.java
Patch:
@@ -53,7 +53,7 @@ public void testitDefaultLayout()
 
         Verifier verifier = newVerifier( testDir.getAbsolutePath() );
         verifier.setAutoclean( false );
-        verifier.filterFile( "settings.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings.xml", "settings.xml", "UTF-8" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng4036" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4070WhitespaceTrimmingTest.java
Patch:
@@ -57,7 +57,7 @@ public void testit()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng4070" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4087PercentEncodedFileUrlTest.java
Patch:
@@ -55,7 +55,7 @@ public void testit()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng4087" );
-        verifier.filterFile( "pom-template.xml", "pom.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "pom-template.xml", "pom.xml", "UTF-8" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4150VersionRangeTest.java
Patch:
@@ -56,7 +56,7 @@ public void testitMNG4150()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng4150" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4166HideCoreCommonsCliTest.java
Patch:
@@ -59,7 +59,7 @@ public void testitMNG4166()
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifact( "commons-cli", "commons-cli", "0.1.4166", "jar" );
         verifier.deleteArtifact( "commons-cli", "commons-cli", "0.1.4166", "pom" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4180PerDependencyExclusionsTest.java
Patch:
@@ -59,7 +59,7 @@ public void testit()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng4180" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4189UniqueVersionSnapshotTest.java
Patch:
@@ -50,7 +50,7 @@ public void testit()
 
         Verifier verifier = newVerifier( testDir.getAbsolutePath() );
         verifier.deleteArtifacts( "org.apache.maven.its.mng4189" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
 
         // depend on org.apache.maven.its.mng4189:dep:1.0-20090608.090416-1:jar
         verifier = newVerifier( testDir.getAbsolutePath() );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4190MirrorRepoMergingTest.java
Patch:
@@ -61,7 +61,7 @@ public void testit()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng4190" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4203TransitiveDependencyExclusionTest.java
Patch:
@@ -58,7 +58,7 @@ public void testit()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng4203" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4214MirroredParentSearchReposTest.java
Patch:
@@ -57,7 +57,7 @@ public void testit()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng4214" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4269BadReactorResolutionFromOutDirTest.java
Patch:
@@ -60,7 +60,7 @@ public void testit()
         // NOTE: It's a crucial prerequisite to create the output directory, i.e. the bad choice
         new File( testDir, "target/classes" ).mkdirs();
         verifier.deleteArtifacts( "org.apache.maven.its.mng4269" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
         // This should use the previous installation/deployment from the repo, not the invalid output directory

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4274PluginRealmArtifactsTest.java
Patch:
@@ -61,7 +61,7 @@ public void testit()
         verifier.deleteArtifact( "org.apache.maven", "maven-core", "2.0.4274", "pom" );
         verifier.deleteArtifact( "org.codehaus.plexus", "plexus-utils", "1.1.4274", "jar" );
         verifier.deleteArtifact( "org.codehaus.plexus", "plexus-utils", "1.1.4274", "pom" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4275RelocationWarningTest.java
Patch:
@@ -56,7 +56,7 @@ public void testit()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng4275" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4276WrongTransitivePlexusUtilsTest.java
Patch:
@@ -59,7 +59,7 @@ public void testit()
         verifier.deleteArtifacts( "org.apache.maven.its.mng4276" );
         verifier.deleteArtifact( "org.codehaus.plexus", "plexus-utils", "1.1.4276", "jar" );
         verifier.deleteArtifact( "org.codehaus.plexus", "plexus-utils", "1.1.4276", "pom" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4281PreferLocalSnapshotTest.java
Patch:
@@ -68,7 +68,7 @@ public void testit()
         verifier.setAutoclean( false );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4317PluginVersionResolutionFromMultiReposTest.java
Patch:
@@ -58,7 +58,7 @@ public void testit()
         verifier.deleteArtifacts( "org.apache.maven.its.mng4317" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "org.apache.maven.its.mng4317:maven-mng4317-plugin:touch" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4320AggregatorAndDependenciesTest.java
Patch:
@@ -59,7 +59,7 @@ public void testit()
         verifier.deleteArtifacts( "org.apache.maven.its.mng4320" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "org.apache.maven.its.plugins:maven-it-plugin-dependency-resolution:aggregate-test" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4326LocalSnapshotSuppressesRemoteCheckTest.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.Date;
 import java.util.Deque;
 import java.util.List;
-import java.util.Properties;
+import java.util.Map;
 import java.util.concurrent.ConcurrentLinkedDeque;
 
 import org.eclipse.jetty.server.Handler;
@@ -154,8 +154,8 @@ else if ( uri.endsWith( ".jar" ) )
             // test 1: resolve snapshot, just built local copy should suppress daily remote update check
             verifier = newVerifier( new File( testDir, "test" ).getAbsolutePath() );
             verifier.setAutoclean( false );
-            Properties filterProps = verifier.newDefaultFilterProperties();
-            filterProps.setProperty( "@port@", Integer.toString( port ) );
+            Map<String, String> filterProps = verifier.newDefaultFilterMap();
+            filterProps.put( "@port@", Integer.toString( port ) );
             verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", filterProps );
             verifier.addCliArgument( "--settings" );
             verifier.addCliArgument( "settings.xml" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4335SettingsOfflineModeTest.java
Patch:
@@ -58,7 +58,7 @@ public void testit()
         verifier.deleteArtifacts( "org.apache.maven.its.mng4335" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         try
         {
             verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4347ImportScopeWithSettingsProfilesTest.java
Patch:
@@ -63,7 +63,7 @@ public void testit()
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
 
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
 
         verifier.addCliArgument( "validate" );
         verifier.execute();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4348NoUnnecessaryRepositoryAccessTest.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
-import java.util.Properties;
+import java.util.Map;
 
 import org.eclipse.jetty.server.Handler;
 import org.eclipse.jetty.server.NetworkConnector;
@@ -104,8 +104,8 @@ public void handle( String target, Request baseRequest, HttpServletRequest reque
             verifier.setAutoclean( false );
             verifier.deleteArtifacts( "org.apache.maven.its.mng4348" );
             verifier.deleteDirectory( "target" );
-            Properties filterProps = verifier.newDefaultFilterProperties();
-            filterProps.setProperty( "@port@", Integer.toString( port ) );
+            Map<String, String> filterProps = verifier.newDefaultFilterMap();
+            filterProps.put( "@port@", Integer.toString( port ) );
             verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", filterProps );
             verifier.addCliArgument( "--settings" );
             verifier.addCliArgument( "settings.xml" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4349RelocatedArtifactWithInvalidPomTest.java
Patch:
@@ -58,7 +58,7 @@ public void testit()
         verifier.setAutoclean( false );
         verifier.deleteArtifacts( "org.apache.maven.its.mng4349" );
         verifier.deleteDirectory( "target" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4353PluginDependencyResolutionFromPomRepoTest.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.maven.shared.verifier.Verifier;
 
 import java.io.File;
+import java.util.Map;
 import java.util.Properties;
 
 import org.junit.jupiter.api.Test;
@@ -56,7 +57,7 @@ public void testit()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng4353" );
-        Properties filterProps = verifier.newDefaultFilterProperties();
+        Map<String, String> filterProps = verifier.newDefaultFilterMap();
         verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", filterProps );
         verifier.filterFile( "repo-1/org/apache/maven/its/mng4353/maven-mng4353-plugin/0.1/template.pom",
                              "repo-1/org/apache/maven/its/mng4353/maven-mng4353-plugin/0.1/maven-mng4353-plugin-0.1"

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4355ExtensionAutomaticVersionResolutionTest.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.maven.shared.verifier.Verifier;
 
 import java.io.File;
-import java.util.Properties;
 
 import org.junit.jupiter.api.Test;
 
@@ -56,8 +55,7 @@ public void testit()
         Verifier verifier = newVerifier( testDir.getAbsolutePath() );
         verifier.setAutoclean( false );
         verifier.deleteArtifacts( "org.apache.maven.its.mng4355" );
-        Properties filterProps = verifier.newDefaultFilterProperties();
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", filterProps );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4357LifecycleMappingDiscoveryInReactorTest.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.maven.shared.verifier.Verifier;
 
 import java.io.File;
-import java.util.Properties;
 
 import org.junit.jupiter.api.Test;
 
@@ -59,8 +58,7 @@ public void testit()
         verifier.deleteDirectory( "mod-a/target" );
         verifier.deleteDirectory( "mod-b/target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng4357" );
-        Properties filterProps = verifier.newDefaultFilterProperties();
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", filterProps );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4360WebDavSupportTest.java
Patch:
@@ -29,7 +29,7 @@
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.util.List;
-import java.util.Properties;
+import java.util.Map;
 
 import org.eclipse.jetty.server.Handler;
 import org.eclipse.jetty.server.NetworkConnector;
@@ -138,8 +138,8 @@ else if ( request.getRequestURI().endsWith( ".md5" ) || request.getRequestURI().
             verifier.setAutoclean( false );
             verifier.deleteArtifacts( "org.apache.maven.its.mng4360" );
             verifier.deleteDirectory( "target" );
-            Properties filterProps = verifier.newDefaultFilterProperties();
-            filterProps.setProperty( "@port@", Integer.toString( port ) );
+            Map<String, String> filterProps = verifier.newDefaultFilterMap();
+            filterProps.put( "@port@", Integer.toString( port ) );
             verifier.filterFile( "../settings-template.xml", "settings.xml", "UTF-8", filterProps );
             verifier.addCliArgument( "--settings" );
             verifier.addCliArgument( "settings.xml" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4363DynamicAdditionOfDependencyArtifactTest.java
Patch:
@@ -59,7 +59,7 @@ public void testit()
         verifier.deleteArtifacts( "org.apache.maven.its.mng4363" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "generate-sources" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4379TransitiveSystemPathInterpolatedWithEnvVarTest.java
Patch:
@@ -57,7 +57,7 @@ public void testit()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng4379" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.setEnvironmentVariable( "MNG_4379_HOME", testDir.getAbsolutePath() );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4393ParseExternalParenPomLenientTest.java
Patch:
@@ -55,7 +55,7 @@ public void testit()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng4393" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4400RepositoryOrderTest.java
Patch:
@@ -55,7 +55,7 @@ public void testitSettingsRepos()
         Verifier verifier = newVerifier( new File( testDir, "settings" ).getAbsolutePath() );
         verifier.setAutoclean( false );
         verifier.deleteArtifacts( "org.apache.maven.its.mng4400" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );
@@ -80,7 +80,7 @@ public void testitPomRepos()
         Verifier verifier = newVerifier( new File( testDir, "pom" ).getAbsolutePath() );
         verifier.setAutoclean( false );
         verifier.deleteArtifacts( "org.apache.maven.its.mng4400" );
-        verifier.filterFile( "pom-template.xml", "pom.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "pom-template.xml", "pom.xml", "UTF-8" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4401RepositoryOrderForParentPomTest.java
Patch:
@@ -56,7 +56,7 @@ public void testit()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng4401" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4403LenientDependencyPomParsingTest.java
Patch:
@@ -60,7 +60,7 @@ public void testit()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng4403" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4412OfflineModeInPluginTest.java
Patch:
@@ -57,7 +57,7 @@ public void testitResolver()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng4412" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "-Presolver" );
         verifier.addCliArgument( "--offline" );
         verifier.addCliArgument( "-s" );
@@ -92,7 +92,7 @@ public void testitCollector()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng4412" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "-Pcollector" );
         verifier.addCliArgument( "--offline" );
         verifier.addCliArgument( "-s" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4413MirroringOfDependencyRepoTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.maven.shared.verifier.Verifier;
 
 import java.io.File;
-import java.util.Properties;
+import java.util.Map;
 
 import org.eclipse.jetty.security.ConstraintMapping;
 import org.eclipse.jetty.security.ConstraintSecurityHandler;
@@ -109,8 +109,8 @@ public void testit()
             verifier.setAutoclean( false );
             verifier.deleteDirectory( "target" );
             verifier.deleteArtifacts( "org.apache.maven.its.mng4413" );
-            Properties filterProps = verifier.newDefaultFilterProperties();
-            filterProps.setProperty( "@port@", Integer.toString( port ) );
+            Map<String, String> filterProps = verifier.newDefaultFilterMap();
+            filterProps.put( "@port@", Integer.toString( port ) );
             verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", filterProps );
             verifier.addCliArgument( "-s" );
             verifier.addCliArgument( "settings.xml" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4452ResolutionOfSnapshotWithClassifierTest.java
Patch:
@@ -84,7 +84,7 @@ public void testit()
         verifier.deleteArtifacts( "org.apache.maven.its.mng4452" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4465PluginPrefixFromLocalCacheOfDownRepoTest.java
Patch:
@@ -59,7 +59,7 @@ public void testit()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng4465" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.setLogFileName( "log1.txt" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4488ValidateExternalParenPomLenientTest.java
Patch:
@@ -55,7 +55,7 @@ public void testit()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng4488" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4489MirroringOfExtensionRepoTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.maven.shared.verifier.Verifier;
 
 import java.io.File;
-import java.util.Properties;
+import java.util.Map;
 
 import org.eclipse.jetty.security.ConstraintMapping;
 import org.eclipse.jetty.security.ConstraintSecurityHandler;
@@ -109,8 +109,8 @@ public void testit()
             verifier.setAutoclean( false );
             verifier.deleteDirectory( "target" );
             verifier.deleteArtifacts( "org.apache.maven.its.mng4489" );
-            Properties filterProps = verifier.newDefaultFilterProperties();
-            filterProps.setProperty( "@port@", Integer.toString( port ) );
+            Map<String, String> filterProps = verifier.newDefaultFilterMap();
+            filterProps.put( "@port@", Integer.toString( port ) );
             verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", filterProps );
             verifier.addCliArgument( "-s" );
             verifier.addCliArgument( "settings.xml" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4498IgnoreBrokenMetadataTest.java
Patch:
@@ -56,7 +56,7 @@ public void testit()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng4498" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4500NoUpdateOfTimestampedSnapshotsTest.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
-import java.util.Properties;
+import java.util.Map;
 
 import org.eclipse.jetty.server.NetworkConnector;
 import org.eclipse.jetty.server.Request;
@@ -105,8 +105,8 @@ public void handle( String target, Request baseRequest, HttpServletRequest reque
             verifier.setAutoclean( false );
             verifier.deleteDirectory( "target" );
             verifier.deleteArtifacts( "org.apache.maven.its.mng4500" );
-            Properties filterProps = verifier.newDefaultFilterProperties();
-            filterProps.setProperty( "@port@", Integer.toString( port ) );
+            Map<String, String> filterProps = verifier.newDefaultFilterMap();
+            filterProps.put( "@port@", Integer.toString( port ) );
             verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", filterProps );
             verifier.addCliArgument( "-s" );
             verifier.addCliArgument( "settings.xml" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4522FailUponMissingDependencyParentPomTest.java
Patch:
@@ -56,7 +56,7 @@ public void testit()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng4522" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         try

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4526MavenProjectArtifactsScopeTest.java
Patch:
@@ -57,7 +57,7 @@ public void testit()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng4526" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "generate-sources" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4553CoreArtifactFilterConsidersGroupIdTest.java
Patch:
@@ -56,7 +56,7 @@ public void testit()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng4553" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4555MetaversionResolutionOfflineTest.java
Patch:
@@ -28,7 +28,7 @@
 
 import java.io.File;
 import java.util.Deque;
-import java.util.Properties;
+import java.util.Map;
 import java.util.concurrent.ConcurrentLinkedDeque;
 
 import org.eclipse.jetty.server.Handler;
@@ -99,8 +99,8 @@ public void handle( String target, Request baseRequest, HttpServletRequest reque
             }
             int port = ( (NetworkConnector) server.getConnectors()[0] ).getLocalPort();
             System.out.println( "Bound server socket to the port " + port );
-            Properties filterProps = verifier.newDefaultFilterProperties();
-            filterProps.setProperty( "@port@", Integer.toString( port ) );
+            Map<String, String> filterProps = verifier.newDefaultFilterMap();
+            filterProps.put( "@port@", Integer.toString( port ) );
             verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", filterProps );
             verifier.addCliArgument( "--offline" );
             verifier.addCliArgument( "--settings" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4561MirroringOfPluginRepoTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.maven.shared.verifier.Verifier;
 
 import java.io.File;
-import java.util.Properties;
+import java.util.Map;
 
 import org.eclipse.jetty.security.ConstraintMapping;
 import org.eclipse.jetty.security.ConstraintSecurityHandler;
@@ -109,8 +109,8 @@ public void testit()
             verifier.setAutoclean( false );
             verifier.deleteDirectory( "target" );
             verifier.deleteArtifacts( "org.apache.maven.its.mng4561" );
-            Properties filterProps = verifier.newDefaultFilterProperties();
-            filterProps.setProperty( "@port@", Integer.toString( port ) );
+            Map<String, String> filterProps = verifier.newDefaultFilterMap();
+            filterProps.put( "@port@", Integer.toString( port ) );
             verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", filterProps );
             verifier.addCliArgument( "-s" );
             verifier.addCliArgument( "settings.xml" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4586PluginPrefixResolutionFromVersionlessPluginMgmtTest.java
Patch:
@@ -56,7 +56,7 @@ public void testit()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng4586" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "mng4586:touch" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4590ImportedPomUsesSystemAndUserPropertiesTest.java
Patch:
@@ -56,7 +56,7 @@ public void testit()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng4590" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.setEnvironmentVariable( "MAVEN_OPTS", "-Dtest.file=pom.xml" );
         verifier.addCliArgument( "-Dtest.dir=" + testDir.getAbsolutePath() );
         verifier.addCliArgument( "--settings" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4600DependencyOptionalFlagManagementTest.java
Patch:
@@ -82,7 +82,7 @@ public void testitResolution()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng4600" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4654ArtifactHandlerForMainArtifactTest.java
Patch:
@@ -56,7 +56,7 @@ public void testit()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng4654" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4666CoreRealmImportTest.java
Patch:
@@ -77,7 +77,7 @@ public void testit()
         verifier.deleteArtifacts( "org.sonatype.sisu", "sisu-inject-plexus", "0.1-stub" );
         verifier.deleteArtifacts( "org.sonatype.spice", "spice-inject-plexus", "0.1-stub" );
         verifier.deleteArtifacts( "classworlds", "classworlds", "0.1-stub" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4690InterdependentConflictResolutionTest.java
Patch:
@@ -102,7 +102,7 @@ private void testit( String test )
         verifier.deleteArtifacts( "org.apache.maven.its.mng4690" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "../settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "../settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4696MavenProjectDependencyArtifactsTest.java
Patch:
@@ -60,7 +60,7 @@ public void testit()
         verifier.deleteArtifacts( "org.apache.maven.its.mng4696" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "initialize" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4720DependencyManagementExclusionMergeTest.java
Patch:
@@ -58,7 +58,7 @@ public void testit()
         verifier.deleteArtifacts( "org.apache.maven.its.mng4720" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4721OptionalPluginDependencyTest.java
Patch:
@@ -57,7 +57,7 @@ public void testit()
         verifier.deleteArtifacts( "org.apache.maven.its.mng4721" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4729MirrorProxyAuthUsedByProjectBuilderTest.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.maven.shared.verifier.Verifier;
 
 import java.io.File;
+import java.util.Map;
 import java.util.Properties;
 
 import org.eclipse.jetty.security.ConstraintMapping;
@@ -109,8 +110,8 @@ public void testit()
             verifier.setAutoclean( false );
             verifier.deleteDirectory( "target" );
             verifier.deleteArtifacts( "org.apache.maven.its.mng4729" );
-            Properties filterProps = verifier.newDefaultFilterProperties();
-            filterProps.setProperty( "@port@", Integer.toString( port ) );
+            Map<String, String> filterProps = verifier.newDefaultFilterMap();
+            filterProps.put( "@port@", Integer.toString( port ) );
             verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", filterProps );
             verifier.addCliArgument( "-s" );
             verifier.addCliArgument( "settings.xml" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4750ResolvedMavenProjectDependencyArtifactsTest.java
Patch:
@@ -59,7 +59,7 @@ public void testit()
         verifier.deleteArtifacts( "org.apache.maven.its.mng4750" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "initialize" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4755FetchRemoteMetadataForVersionRangeTest.java
Patch:
@@ -68,7 +68,7 @@ public void testit()
         verifier.deleteDirectory( "target" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4761PluginLevelDependencyScopesTest.java
Patch:
@@ -61,7 +61,7 @@ public void testit()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng4761" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4768NearestMatchConflictResolutionTest.java
Patch:
@@ -103,7 +103,7 @@ private void testit( String test )
         verifier.deleteArtifacts( "org.apache.maven.its.mng4768" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "../settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "../settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4771PluginPrefixResolutionDoesntTouchDisabledRepoTest.java
Patch:
@@ -28,7 +28,7 @@
 
 import java.io.File;
 import java.util.Deque;
-import java.util.Properties;
+import java.util.Map;
 import java.util.concurrent.ConcurrentLinkedDeque;
 
 import org.eclipse.jetty.server.NetworkConnector;
@@ -96,8 +96,8 @@ public void handle( String target, Request baseRequest, HttpServletRequest reque
             System.out.println( "Bound server socket to the port " + port );
             verifier.setAutoclean( false );
             verifier.deleteDirectory( "target" );
-            Properties filterProps = verifier.newDefaultFilterProperties();
-            filterProps.setProperty( "@port@", Integer.toString( port ) );
+            Map<String, String> filterProps = verifier.newDefaultFilterMap();
+            filterProps.put( "@port@", Integer.toString( port ) );
             verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", filterProps );
             verifier.addCliArgument( "-U" );
             verifier.addCliArgument( "-s" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4772PluginVersionResolutionDoesntTouchDisabledRepoTest.java
Patch:
@@ -30,7 +30,7 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
-import java.util.Properties;
+import java.util.Map;
 
 import org.eclipse.jetty.server.NetworkConnector;
 import org.eclipse.jetty.server.Request;
@@ -97,8 +97,8 @@ public void handle( String target, Request baseRequest, HttpServletRequest reque
             System.out.println( "Bound server socket to the port " + port );
             verifier.setAutoclean( false );
             verifier.deleteDirectory( "target" );
-            Properties filterProps = verifier.newDefaultFilterProperties();
-            filterProps.setProperty( "@port@", Integer.toString( port ) );
+            Map<String, String> filterProps = verifier.newDefaultFilterMap();
+            filterProps.put( "@port@", Integer.toString( port ) );
             verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", filterProps );
             verifier.addCliArgument( "-U" );
             verifier.addCliArgument( "-s" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4785TransitiveResolutionInForkedThreadTest.java
Patch:
@@ -59,7 +59,7 @@ public void testit()
         verifier.deleteArtifacts( "org.apache.maven.its.mng4785" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4789ScopeInheritanceMeetsConflictTest.java
Patch:
@@ -59,7 +59,7 @@ public void testit()
         verifier.deleteDirectory( "target" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4791ProjectBuilderResolvesRemotePomArtifactTest.java
Patch:
@@ -59,7 +59,7 @@ public void testit()
         verifier.deleteArtifacts( "org.apache.maven.its.mng4791" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4800NearestWinsVsScopeWideningTest.java
Patch:
@@ -71,7 +71,7 @@ private void testit( String test )
         verifier.deleteArtifacts( "org.apache.maven.its.mng4800" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "../settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "../settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4814ReResolutionOfDependenciesDuringReactorTest.java
Patch:
@@ -61,7 +61,7 @@ public void testit()
         verifier.deleteArtifacts( "org.apache.maven.its.mng4814" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArguments( "validate",
             "org.apache.maven.its.plugins:maven-it-plugin-dependency-resolution:2.1-SNAPSHOT:aggregate-test" );
         verifier.execute();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4829ChecksumFailureWarningTest.java
Patch:
@@ -58,7 +58,7 @@ public void testit()
         verifier.deleteArtifacts( "org.apache.maven.its.mng4829" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4834ParentProjectResolvedFromRemoteReposTest.java
Patch:
@@ -59,7 +59,7 @@ public void testit()
         verifier.deleteArtifacts( "org.apache.maven.its.mng4834" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4840MavenPrerequisiteTest.java
Patch:
@@ -57,7 +57,7 @@ public void testitMojoExecution()
         verifier.deleteArtifacts( "org.apache.maven.its.mng4840" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "../settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "../settings-template.xml", "settings.xml", "UTF-8" );
         try
         {
             verifier.addCliArgument( "validate" );
@@ -89,7 +89,7 @@ public void testitPluginVersionResolution()
         verifier.deleteArtifacts( "org.apache.maven.its.mng4840" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "../settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "../settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "org.apache.maven.its.mng4840:maven-mng4840-plugin:touch" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4842ParentResolutionOfDependencyPomTest.java
Patch:
@@ -60,7 +60,7 @@ public void testitCore()
         verifier.deleteArtifacts( "org.apache.maven.its.mng4842" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "../settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "../settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();
@@ -90,7 +90,7 @@ public void testitPlugin()
         verifier.deleteArtifacts( "org.apache.maven.its.mng4842" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "../settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "../settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4883FailUponOverconstrainedVersionRangesTest.java
Patch:
@@ -57,7 +57,7 @@ public void testit()
         verifier.deleteArtifacts( "org.apache.maven.its.mng4883" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         try
         {
             verifier.addCliArgument( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4895PluginDepWithNonRelocatedMavenApiTest.java
Patch:
@@ -58,7 +58,7 @@ public void testit()
         verifier.deleteArtifacts( "org.apache.maven.its.mng4895" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4913UserPropertyVsDependencyPomPropertyTest.java
Patch:
@@ -59,7 +59,7 @@ public void testit()
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
         verifier.addCliArgument( "-Dmng4913.version=98.76" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4925ContainerLookupRealmDuringMojoExecTest.java
Patch:
@@ -58,7 +58,7 @@ public void testit()
         verifier.deleteArtifacts( "org.apache.maven.its.mng4925" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4952MetadataReleaseInfoUpdateTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.maven.shared.verifier.Verifier;
 
 import java.io.File;
-import java.util.Properties;
+import java.util.Map;
 
 import org.apache.maven.shared.utils.io.FileUtils;
 import org.junit.jupiter.api.Test;
@@ -58,7 +58,7 @@ public void testit()
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng4952" );
 
-        Properties props = verifier.newDefaultFilterProperties();
+        Map<String, String> props = verifier.newDefaultFilterMap();
 
         props.put( "@version@", "1.0" );
         verifier.filterFile( "pom-template.xml", "pom.xml", "UTF-8", props );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4955LocalVsRemoteSnapshotResolutionTest.java
Patch:
@@ -66,7 +66,7 @@ public void testit()
         verifier.deleteDirectory( "target" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4963ParentResolutionFromMirrorTest.java
Patch:
@@ -59,7 +59,7 @@ public void testit()
         verifier.deleteArtifacts( "org.apache.maven.its.mng4963" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4973ExtensionVisibleToPluginInReactorTest.java
Patch:
@@ -60,7 +60,7 @@ public void testit()
         verifier.deleteArtifacts( "org.apache.maven.its.mng4973" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4987TimestampBasedSnapshotSelectionTest.java
Patch:
@@ -59,7 +59,7 @@ public void testit()
         verifier.deleteArtifacts( "org.apache.maven.its.mng4987" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5006VersionRangeDependencyParentResolutionTest.java
Patch:
@@ -61,7 +61,7 @@ public void testit()
         verifier.deleteArtifacts( "org.apache.maven.its.mng5006" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5019StringBasedCompLookupFromChildPluginRealmTest.java
Patch:
@@ -57,7 +57,7 @@ public void testit()
         verifier.deleteArtifacts( "org.apache.maven.its.mng5019" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5064SuppressSnapshotUpdatesTest.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
-import java.util.Properties;
+import java.util.Map;
 
 import org.eclipse.jetty.server.NetworkConnector;
 import org.eclipse.jetty.server.Request;
@@ -107,8 +107,8 @@ public void handle( String target, Request baseRequest, HttpServletRequest reque
             verifier.setAutoclean( false );
             verifier.deleteDirectory( "target" );
             verifier.deleteArtifacts( "org.apache.maven.its.mng5064" );
-            Properties filterProps = verifier.newDefaultFilterProperties();
-            filterProps.setProperty( "@port@", Integer.toString( port ) );
+            Map<String, String> filterProps = verifier.newDefaultFilterMap();
+            filterProps.put( "@port@", Integer.toString( port ) );
             verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", filterProps );
             verifier.addCliArgument( "-nsu" );
             verifier.addCliArgument( "-s" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5096ExclusionAtDependencyWithImpliedClassifierTest.java
Patch:
@@ -60,7 +60,7 @@ public void testit()
         verifier.deleteArtifacts( "org.apache.maven.its.mng5096" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "validate" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5135AggregatorDepResolutionModuleExtensionTest.java
Patch:
@@ -58,7 +58,7 @@ public void testit()
         verifier.deleteArtifacts( "org.apache.maven.its.mng5135" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "org.apache.maven.its.plugins:maven-it-plugin-dependency-resolution:aggregate-test" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5639ImportScopePomResolutionTest.java
Patch:
@@ -48,7 +48,7 @@ public void testitMNG5639()
         Verifier verifier = newVerifier( testDir.getAbsolutePath() );
         verifier.deleteArtifacts( "org.apache.maven.its.mng5639" );
 
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5663NestedImportScopePomResolutionTest.java
Patch:
@@ -53,8 +53,8 @@ public void testitMNG5639()
         Verifier verifier = newVerifier( testDir.getAbsolutePath() );
         verifier.deleteArtifacts( "org.apache.maven.its.mng5663" );
 
-        verifier.filterFile( "pom-template.xml", "pom.xml", "UTF-8", verifier.newDefaultFilterProperties() );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "pom-template.xml", "pom.xml", "UTF-8" );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "--settings" );
         verifier.addCliArgument( "settings.xml" );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5716ToolchainsTypeTest.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.maven.shared.verifier.Verifier;
 
 import java.io.File;
+import java.util.Map;
 import java.util.Properties;
 
 import org.junit.jupiter.api.Test;
@@ -57,8 +58,8 @@ public void testitMNG5716()
         new File( javaHome, "bin/javac.exe").createNewFile();
 
         Verifier verifier = newVerifier( testDir.getAbsolutePath() );
-        Properties properties = verifier.newDefaultFilterProperties();
-        properties.setProperty( "@javaHome@", javaHome.getAbsolutePath() );
+        Map<String, String> properties = verifier.newDefaultFilterMap();
+        properties.put( "@javaHome@", javaHome.getAbsolutePath() );
 
         verifier.filterFile( "toolchains.xml", "toolchains.xml", "UTF-8", properties );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5774ConfigurationProcessorsTest.java
Patch:
@@ -24,7 +24,7 @@ public void testBehaviourWhereThereIsOneUserSuppliedConfigurationProcessor()
         File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-5774-configuration-processors" );
 
         Verifier verifier = newVerifier( testDir.getAbsolutePath() );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
 
         verifier = newVerifier( new File( testDir, "build-with-one-processor-valid" ).getAbsolutePath() );
         verifier.deleteDirectory( "target" );
@@ -49,7 +49,7 @@ public void testBehaviourWhereThereAreTwoUserSuppliedConfigurationProcessor()
         File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-5774-configuration-processors" );
 
         Verifier verifier = newVerifier( testDir.getAbsolutePath() );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
 
         verifier = newVerifier( new File( testDir, "build-with-two-processors-invalid" ).getAbsolutePath() );
         verifier.deleteDirectory( "target" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng6210CoreExtensionsCustomScopesTest.java
Patch:
@@ -47,7 +47,7 @@ public void testCoreExtensionCustomScopes()
         File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-6210-core-extensions-scopes" );
 
         Verifier verifier = newVerifier( testDir.getAbsolutePath() );
-        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8" );
 
         verifier = newVerifier( new File( testDir, "client" ).getAbsolutePath() );
         verifier.deleteDirectory( "target" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng6772NestedImportScopeRepositoryOverride.java
Patch:
@@ -58,7 +58,7 @@ public void testitInProject()
         overrideGlobalSettings( testDir, verifier );
         verifier.deleteArtifacts( "org.apache.maven.its.mng6772" );
 
-        verifier.filterFile( "pom-template.xml", "pom.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "pom-template.xml", "pom.xml", "UTF-8" );
 
         verifier.addCliArgument( "validate" );
         verifier.execute();
@@ -76,7 +76,7 @@ public void testitInDependency()
         overrideGlobalSettings( testDir, verifier );
         verifier.deleteArtifacts( "org.apache.maven.its.mng6772" );
 
-        verifier.filterFile( "pom-template.xml", "pom.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "pom-template.xml", "pom.xml", "UTF-8" );
 
         verifier.addCliArgument( "compile" );
         verifier.execute();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng7529VersionRangeRepositorySelection.java
Patch:
@@ -53,7 +53,7 @@ public void testit()
     verifier.addCliArgument("--settings");
     verifier.addCliArgument("settings.xml");
 
-    verifier.filterFile("settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties());
+    verifier.filterFile("settings-template.xml", "settings.xml", "UTF-8");
     verifier.addCliArgument("validate");
     verifier.execute();
     verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng7566JavaPrerequisiteTest.java
Patch:
@@ -37,7 +37,7 @@ void testitMojoExecution()
         verifier.deleteArtifacts( "org.apache.maven.its.mng7566" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "../settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "../settings-template.xml", "settings.xml", "UTF-8" );
         try
         {
             verifier.addCliArgument( "validate" );
@@ -69,7 +69,7 @@ void testitPluginVersionResolution()
         verifier.deleteArtifacts( "org.apache.maven.its.mng7566" );
         verifier.addCliArgument( "-s" );
         verifier.addCliArgument( "settings.xml" );
-        verifier.filterFile( "../settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.filterFile( "../settings-template.xml", "settings.xml", "UTF-8" );
         verifier.addCliArgument( "org.apache.maven.its.mng7566:maven-mng7566-plugin:touch" );
         verifier.execute();
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0956ComponentInjectionViaProjectLevelPluginDepTest.java
Patch:
@@ -63,7 +63,7 @@ public void testitMNG0956()
         verifier.verifyErrorFreeLog();
 
         Properties apiProps = verifier.loadProperties( "target/component.properties" );
-        assertEquals( "true", apiProps.getProperty( "org.apache.maven.plugin.coreit.DefaultComponent" ) );
+        assertEquals( "true", apiProps.getProperty( "org.apache.maven.plugin.coreit.DefaultTestComponent" ) );
     }
 
 }

File: its/core-it-suite/src/test/java/org/apache/maven/it/TestSuiteOrdering.java
Patch:
@@ -294,7 +294,6 @@ public TestSuiteOrdering()
         suite.addTestSuite( MavenITmng4489MirroringOfExtensionRepoTest.class );
         suite.addTestSuite( MavenITmng4488ValidateExternalParenPomLenientTest.class );
         suite.addTestSuite( MavenITmng4482ForcePluginSnapshotUpdateTest.class );
-        suite.addTestSuite( MavenITmng4479ProjectLevelPluginDepUsedForCliConfigTest.class );
         suite.addTestSuite( MavenITmng4474PerLookupWagonInstantiationTest.class );
         suite.addTestSuite( MavenITmng4470AuthenticatedDeploymentToProxyTest.class );
         suite.addTestSuite( MavenITmng4469AuthenticatedDeploymentToCustomRepoTest.class );
@@ -600,7 +599,6 @@ public TestSuiteOrdering()
         suite.addTestSuite( MavenITmng2318LocalParentResolutionTest.class );
         suite.addTestSuite( MavenITmng2309ProfileInjectionOrderTest.class );
         suite.addTestSuite( MavenITmng2305MultipleProxiesTest.class );
-        suite.addTestSuite( MavenITmng2293CustomPluginParamImplTest.class );
         suite.addTestSuite( MavenITmng2277AggregatorAndResolutionPluginsTest.class );
         suite.addTestSuite( MavenITmng2276ProfileActivationBySettingsPropertyTest.class );
         suite.addTestSuite( MavenITmng2254PomEncodingTest.class );

File: its/core-it-support/core-it-plugins/maven-it-plugin-active-collection/src/main/java/org/apache/maven/plugin/coreit/DefaultTestComponent.java
Patch:
@@ -24,8 +24,8 @@
  *
  * @author Benjamin Bentmann
  */
-public class DefaultComponent
-    implements Component
+public class DefaultTestComponent
+        implements TestComponent
 {
 
 }

File: its/core-it-support/core-it-plugins/maven-it-plugin-active-collection/src/main/java/org/apache/maven/plugin/coreit/TestComponent.java
Patch:
@@ -24,7 +24,7 @@
  *
  * @author Benjamin Bentmann
  */
-public interface Component
+public interface TestComponent
 {
 
 }

File: its/core-it-support/core-it-plugins/maven-it-plugin-class-loader/maven-it-plugin-class-loader/src/main/java/org/apache/maven/plugin/coreit/TestComponent.java
Patch:
@@ -24,7 +24,7 @@
  *
  * @author Benjamin Bentmann
  */
-public interface Component
+public interface TestComponent
 {
 
 }

File: its/core-it-support/core-it-plugins/maven-it-plugin-configuration/src/main/java/org/apache/maven/plugin/coreit/CustomComponentConfigurator.java
Patch:
@@ -19,7 +19,7 @@
  * under the License.
  */
 
-import org.codehaus.classworlds.ClassRealm;
+import org.codehaus.plexus.classworlds.realm.ClassRealm;
 import org.codehaus.plexus.component.annotations.Component;
 import org.codehaus.plexus.component.configurator.AbstractComponentConfigurator;
 import org.codehaus.plexus.component.configurator.ComponentConfigurationException;
@@ -47,7 +47,7 @@ public void configureComponent( Object component, PlexusConfiguration configurat
     {
         ObjectWithFieldsConverter converter = new ObjectWithFieldsConverter();
 
-        converter.processConfiguration( converterLookup, component, containerRealm.getClassLoader(), configuration,
+        converter.processConfiguration( converterLookup, component, containerRealm, configuration,
                                         expressionEvaluator, listener );
 
         if ( component instanceof CustomConfigMojo )

File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuildingRequest.java
Patch:
@@ -87,6 +87,7 @@ public DefaultModelBuildingRequest(ModelBuildingRequest request) {
         setValidationLevel(request.getValidationLevel());
         setProcessPlugins(request.isProcessPlugins());
         setTwoPhaseBuilding(request.isTwoPhaseBuilding());
+        setLocationTracking(request.isLocationTracking());
         setProfiles(request.getProfiles());
         setActiveProfileIds(request.getActiveProfileIds());
         setInactiveProfileIds(request.getInactiveProfileIds());

File: maven-artifact/src/test/java/org/apache/maven/artifact/versioning/ComparableVersionTest.java
Patch:
@@ -349,8 +349,8 @@ public void testReuse() {
 
     /**
      * Test <a href="https://issues.apache.org/jira/browse/MNG-7644">MNG-7644</a> edge cases
-     * 1.0.0.RC1 < 1.0.0-RC2 and more generally:
-     * 1.0.0.X1 < 1.0.0-X2 for any string X
+     * 1.0.0.RC1 &lt; 1.0.0-RC2 and more generally:
+     * 1.0.0.X1 &lt; 1.0.0-X2 for any string X
      */
     @Test
     public void testMng7644() {

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4913UserPropertyVsDependencyPomPropertyTest.java
Patch:
@@ -56,9 +56,9 @@ public void testit()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng4913" );
-        verifier.setSystemProperty( "mng4913.version", "98.76" );
         verifier.addCliOption( "-s" );
         verifier.addCliOption( "settings.xml" );
+        verifier.addCliOption( "-Dmng4913.version=98.76" );
         verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
         verifier.executeGoal( "validate" );
         verifier.verifyErrorFreeLog();

File: maven-artifact/src/test/java/org/apache/maven/artifact/versioning/DefaultArtifactVersionTest.java
Patch:
@@ -119,7 +119,7 @@ public void testVersionComparing() {
         assertVersionOlder("2.0-1", "2.0.1");
 
         assertVersionOlder("2.0.1-klm", "2.0.1-lmn");
-        assertVersionOlder("2.0.1-xyz", "2.0.1"); // now 2.0.1-xyz < 2.0.1 as of MNG-7559
+        assertVersionOlder("2.0.1", "2.0.1-xyz");
         assertVersionOlder("2.0.1-xyz-1", "2.0.1-1-xyz");
 
         assertVersionOlder("2.0.1", "2.0.1-123");

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng6566ExecuteAnnotationShouldNotReExecuteGoalsTest.java
Patch:
@@ -99,7 +99,7 @@ private void assertCompiledOnce( Verifier verifier )
         int counter = 0;
         for ( String line : lines )
         {
-            if ( line.contains( "maven-compiler-plugin:0.1-stub-SNAPSHOT:compile") )
+            if ( line.contains( "compiler:0.1-stub-SNAPSHOT:compile") )
             {
                 counter++;
             }

File: maven-embedder/src/main/java/org/apache/maven/cli/event/ExecutionEventLogger.java
Patch:
@@ -419,7 +419,8 @@ public void forkSucceeded(ExecutionEvent event) {
     }
 
     private void append(MessageBuilder buffer, MojoExecution me) {
-        buffer.mojo(me.getArtifactId() + ':' + me.getVersion() + ':' + me.getGoal());
+        String prefix = me.getMojoDescriptor().getPluginDescriptor().getGoalPrefix();
+        buffer.mojo(prefix + ':' + me.getVersion() + ':' + me.getGoal());
         if (me.getExecutionId() != null) {
             buffer.a(' ').strong('(' + me.getExecutionId() + ')');
         }

File: maven-artifact/src/test/java/org/apache/maven/artifact/versioning/DefaultArtifactVersionTest.java
Patch:
@@ -119,7 +119,7 @@ public void testVersionComparing() {
         assertVersionOlder("2.0-1", "2.0.1");
 
         assertVersionOlder("2.0.1-klm", "2.0.1-lmn");
-        assertVersionOlder("2.0.1", "2.0.1-xyz");
+        assertVersionOlder("2.0.1-xyz", "2.0.1"); // now 2.0.1-xyz < 2.0.1 as of MNG-7559
         assertVersionOlder("2.0.1-xyz-1", "2.0.1-1-xyz");
 
         assertVersionOlder("2.0.1", "2.0.1-123");

File: maven-core/src/main/java/org/apache/maven/DefaultMaven.java
Patch:
@@ -481,6 +481,9 @@ private void persistResumptionData( MavenExecutionResult result, MavenSession se
         }
     }
 
+    /**
+     * TODO: why is this method public?
+     */
     public RepositorySystemSession newRepositorySession( MavenExecutionRequest request )
     {
         return repositorySessionFactory.newRepositorySession( request );

File: api/maven-api-core/src/main/java/org/apache/maven/api/Dependency.java
Patch:
@@ -27,11 +27,12 @@ public interface Dependency extends Artifact
     /**
      * The artifact type.
      *
-     * @return The artifact type, never {@code null}.
+     * @return the artifact type, never {@code null}
      */
     @Nonnull
     Type getType();
 
+    @Nonnull
     Scope getScope();
 
     boolean isOptional();

File: api/maven-api-core/src/main/java/org/apache/maven/api/DependencyCoordinate.java
Patch:
@@ -37,7 +37,7 @@ public interface DependencyCoordinate extends ArtifactCoordinate
     /**
      * The type of the artifact.
      *
-     * @return The type.
+     * @return the type
      */
     @Nonnull
     Type getType();

File: api/maven-api-core/src/main/java/org/apache/maven/api/Node.java
Patch:
@@ -67,8 +67,8 @@ public interface Node
     /**
      * Traverses this node and potentially its children using the specified visitor.
      *
-     * @param visitor The visitor to call back, must not be {@code null}.
-     * @return {@code true} to visit siblings nodes of this node as well, {@code false} to skip siblings.
+     * @param visitor the visitor to call back, must not be {@code null}
+     * @return {@code true} to visit siblings nodes of this node as well, {@code false} to skip siblings
      */
     boolean accept( @Nonnull NodeVisitor visitor );
 

File: api/maven-api-core/src/main/java/org/apache/maven/api/Repository.java
Patch:
@@ -38,15 +38,15 @@ public interface Repository
     /**
      * Gets the identifier of this repository.
      *
-     * @return The (case-sensitive) identifier, never {@code null}.
+     * @return the (case-sensitive) identifier, never {@code null}
      */
     @Nonnull
     String getId();
 
     /**
      * Gets the type of the repository, for example "default".
      *
-     * @return The (case-sensitive) type of the repository, never {@code null}.
+     * @return the (case-sensitive) type of the repository, never {@code null}
      */
     @Nonnull
     String getType();

File: api/maven-api-core/src/main/java/org/apache/maven/api/Toolchain.java
Patch:
@@ -41,7 +41,7 @@ public interface Toolchain
     /**
      * Gets the platform tool executable.
      *
-     * @param toolName the tool platform independent tool name.
+     * @param toolName the tool platform independent tool name
      * @return file representing the tool executable, or null if the tool cannot be found
      */
     String findTool( String toolName );

File: api/maven-api-core/src/main/java/org/apache/maven/api/VersionRange.java
Patch:
@@ -36,8 +36,8 @@ public interface VersionRange
     /**
      * Determines whether the specified version is contained within this range.
      *
-     * @param version The version to test, must not be {@code null}.
-     * @return {@code true} if this range contains the specified version, {@code false} otherwise.
+     * @param version the version to test, must not be {@code null}
+     * @return {@code true} if this range contains the specified version, {@code false} otherwise
      */
     boolean contains( @Nonnull Version version );
 

File: api/maven-api-core/src/main/java/org/apache/maven/api/plugin/Mojo.java
Patch:
@@ -39,7 +39,7 @@ public interface Mojo
      * This is the main trigger for the <code>Mojo</code> inside the <code>Maven</code> system, and allows
      * the <code>Mojo</code> to communicate errors.
      *
-     * @throws MojoException if a problem occurs.
+     * @throws MojoException if a problem occurs
      */
     void execute();
 

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/ArtifactDeployerException.java
Patch:
@@ -37,7 +37,7 @@ public class ArtifactDeployerException
     private static final long serialVersionUID = 7421964724059077698L;
 
     /**
-     * @param message The message of the error.
+     * @param message the message of the error
      * @param e {@link Exception}
      */
     public ArtifactDeployerException( String message, Exception e )

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/ArtifactInstaller.java
Patch:
@@ -38,8 +38,8 @@ public interface ArtifactInstaller extends Service
 {
     /**
      * @param request {@link ArtifactInstallerRequest}
-     * @throws ArtifactInstallerException in case of an error.
-     * @throws IllegalArgumentException in case {@code request} is {@code null}.
+     * @throws ArtifactInstallerException in case of an error
+     * @throws IllegalArgumentException in case {@code request} is {@code null}
      */
     void install( ArtifactInstallerRequest request );
 

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/ArtifactInstallerException.java
Patch:
@@ -35,7 +35,7 @@ public class ArtifactInstallerException
     private static final long serialVersionUID = 3652561971360586373L;
 
     /**
-     * @param message The message of the error.
+     * @param message the message of the error
      * @param e {@link Exception}
      */
     public ArtifactInstallerException( String message, Exception e )

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/ArtifactResolver.java
Patch:
@@ -38,9 +38,9 @@ public interface ArtifactResolver extends Service
     /**
      * @param request {@link ArtifactResolverRequest}
      * @return {@link ArtifactResolverResult}
-     * @throws ArtifactResolverException in case of an error.
+     * @throws ArtifactResolverException in case of an error
      * @throws IllegalArgumentException in case of parameter {@code buildingRequest} is {@code null} or
-     *             parameter {@code mavenArtifact} is {@code null} or invalid.
+     *             parameter {@code mavenArtifact} is {@code null} or invalid
      */
     ArtifactResolverResult resolve( ArtifactResolverRequest request );
 
@@ -50,7 +50,7 @@ public interface ArtifactResolver extends Service
      * @return {@link ArtifactResolverResult}
      * @throws ArtifactResolverException in case of an error.
      * @throws IllegalArgumentException in case of parameter {@code buildingRequest} is {@code null} or
-     *             parameter {@code coordinate} is {@code null} or invalid.
+     *             parameter {@code coordinate} is {@code null} or invalid
      */
     default ArtifactResolverResult resolve( Session session,
                                             Collection<? extends ArtifactCoordinate> coordinates )

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/ArtifactResolverException.java
Patch:
@@ -34,8 +34,8 @@ public class ArtifactResolverException
     private static final long serialVersionUID = 7252294837746943917L;
 
     /**
-     * @param message The message for the exception.
-     * @param e The exception itself.
+     * @param message the message for the exception
+     * @param e the exception itself
      */
     public ArtifactResolverException( String message, Exception e )
     {

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/DependencyCollectorException.java
Patch:
@@ -37,8 +37,8 @@ public class DependencyCollectorException
     private static final long serialVersionUID = -3134726259840210686L;
 
     /**
-     * @param message The message you would give for the exception.
-     * @param cause The cause which is related to the message.
+     * @param message the message you would give for the exception
+     * @param cause the cause which is related to the message
      */
     public DependencyCollectorException( String message, Throwable cause )
     {

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/DependencyCollectorResult.java
Patch:
@@ -36,14 +36,14 @@ public interface DependencyCollectorResult
   /**
    * Gets the exceptions that occurred while building the dependency graph.
    *
-   * @return The exceptions that occurred, never {@code null}.
+   * @return the exceptions that occurred, never {@code null}
    */
   List<Exception> getExceptions();
 
   /**
    * Gets the root node of the dependency graph.
    *
-   * @return The root node of the dependency graph or {@code null} if none.
+   * @return the root node of the dependency graph or {@code null} if none
    */
   Node getRoot();
 

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/DependencyCoordinateFactory.java
Patch:
@@ -41,7 +41,7 @@ public interface DependencyCoordinateFactory extends Service
      * Creates a new {@link DependencyCoordinate} object from the request.
      *
      * @param request the request containing the various data
-     * @return a new {@link DependencyCoordinate} object.
+     * @return a new {@link DependencyCoordinate} object
      *
      * @throws IllegalArgumentException if {@code request} is null or
      *         if {@code request.getSession()} is null or invalid

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/LookupException.java
Patch:
@@ -31,16 +31,16 @@ public class LookupException
     extends MavenException
 {
     /**
-     * @param message The message to give.
-     * @param e The {@link Exception}.
+     * @param message the message to give
+     * @param e the {@link Exception}
      */
     public LookupException( String message, Exception e )
     {
         super( message, e );
     }
 
     /**
-     * @param e The {@link Exception}.
+     * @param e the {@link Exception}
      */
     public LookupException( Exception e )
     {

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/MessageBuilder.java
Patch:
@@ -141,7 +141,7 @@ public interface MessageBuilder
      * Append formatted content to the buffer.
      * @see String#format(String, Object...)
      * @param pattern a <a href="../util/Formatter.html#syntax">format string</a>
-     * @param args arguments referenced by the format specifiers in the format string.
+     * @param args arguments referenced by the format specifiers in the format string
      * @return the current builder
      */
     @Nonnull

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/ProjectBuilderException.java
Patch:
@@ -31,8 +31,8 @@ public class ProjectBuilderException
     extends MavenException
 {
     /**
-     * @param message The message to give.
-     * @param e The {@link Exception}.
+     * @param message the message to give
+     * @param e the {@link Exception}
      */
     public ProjectBuilderException( String message, Exception e )
     {

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/PrompterException.java
Patch:
@@ -31,8 +31,8 @@ public class PrompterException
     extends MavenException
 {
     /**
-     * @param message The message to give.
-     * @param e The {@link Exception}.
+     * @param message the message to give
+     * @param e the {@link Exception}
      */
     public PrompterException( String message, Exception e )
     {

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/VersionParserException.java
Patch:
@@ -31,8 +31,8 @@ public class VersionParserException
     extends MavenException
 {
     /**
-     * @param message The message to give.
-     * @param e The {@link Exception}.
+     * @param message the message to give
+     * @param e the {@link Exception}
      */
     public VersionParserException( String message, Exception e )
     {

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/xml/XmlReaderException.java
Patch:
@@ -33,8 +33,8 @@ public class XmlReaderException
 {
 
     /**
-     * @param message The message for the exception.
-     * @param e The exception itself.
+     * @param message the message for the exception
+     * @param e the exception itself
      */
     public XmlReaderException( String message, Exception e )
     {

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/xml/XmlReaderRequest.java
Patch:
@@ -65,7 +65,7 @@ interface Transformer
          * @param source    The source value
          * @param fieldName A description of the field being interpolated. The implementation may use this to
          *                  log stuff.
-         * @return The interpolated value.
+         * @return the interpolated value
          */
         String transform( String source, String fieldName );
     }

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/xml/XmlWriterException.java
Patch:
@@ -33,8 +33,8 @@ public class XmlWriterException
 {
 
     /**
-     * @param message The message for the exception.
-     * @param e The exception itself.
+     * @param message the message for the exception
+     * @param e the exception itself
      */
     public XmlWriterException( String message, Exception e )
     {

File: api/maven-api-core/src/main/java/org/apache/maven/api/Dependency.java
Patch:
@@ -37,10 +37,9 @@ public interface Dependency extends Artifact
     boolean isOptional();
 
     /**
-     * Shortcut for {@code session.createDependencyCoordinate(dependency)}
+     * Creates a {@code DependencyCoordinate} based on this {@code Dependency}.
      *
-     * @return an {@link DependencyCoordinate}
-     * @see org.apache.maven.api.Session#createDependencyCoordinate(Dependency)
+     * @return a {@link DependencyCoordinate}
      */
     @Nonnull
     DependencyCoordinate toCoordinate();

File: api/maven-api-core/src/main/java/org/apache/maven/api/Listener.java
Patch:
@@ -25,7 +25,7 @@
 
 /**
  * A listener for session events.
- * TODO: open this to other events like {@link org.apache.maven.eventspy.EventSpy}
+ * TODO: open this to other events like similar to {@code org.apache.maven.eventspy.EventSpy}
  *
  * @since 4.0
  */

File: maven-core/src/main/java/org/apache/maven/plugin/PluginParameterExpressionEvaluatorV4.java
Patch:
@@ -47,15 +47,15 @@
  *                                             <td>{@link Session#getLocalRepository()}</td></tr>
  * <tr><td><code>reactorProjects</code></td>   <td></td>               <td>{@link Session#getProjects()}</td></tr>
  * <tr><td><code>project</code></td>           <td></td>
- *                                             <td>{@link Session#getCurrentProject()}</td></tr>
+ *                                 <td>{@link org.apache.maven.execution.MavenSession#getCurrentProject()}</td></tr>
  * <tr><td><code>project.*</code></td>         <td></td>               <td></td></tr>
  * <tr><td><code>pom.*</code></td>             <td>(since Maven 3)</td><td>same as <code>project.*</code></td></tr>
  * <tr><td><code>executedProject</code></td>   <td></td>
- *                                             <td>{@link MavenProject#getExecutionProject()}</td></tr>
+ *                                 <td>{@link org.apache.maven.project.MavenProject#getExecutionProject()}</td></tr>
  * <tr><td><code>settings</code></td>          <td></td>               <td>{@link Session#getSettings()}</td></tr>
  * <tr><td><code>settings.*</code></td>        <td></td>               <td></td></tr>
  * <tr><td><code>basedir</code></td>           <td></td>
- *                                             <td>{@link Session#getExecutionRootDirectory()} or
+ *                                 <td>{@link Session#getExecutionRootDirectory()} or
  *                                                 <code>System.getProperty( "user.dir" )</code> if null</td></tr>
  * <tr><td><code>mojoExecution</code></td>     <td></td>               <td>the actual {@link MojoExecution}</td></tr>
  * <tr><td><code>mojo</code></td>              <td>(since Maven 3)</td><td>same as <code>mojoExecution</code></td></tr>

File: maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java
Patch:
@@ -337,7 +337,7 @@ protected void mergeReporting_Plugins( Reporting.Builder builder,
                     if ( element.isInherited() )
                     {
                         // NOTE: Enforce recursive merge to trigger merging/inheritance logic for executions as well
-                        ReportPlugin plugin = ReportPlugin.newInstance();
+                        ReportPlugin plugin = ReportPlugin.newInstance( false );
                         plugin = mergeReportPlugin( plugin, element, sourceDominant, context );
 
                         merged.put( getReportPluginKey().apply( element ), plugin );

File: maven-repository-metadata/src/test/java/org/apache/maven/artifact/repository/metadata/MetadataTest.java
Patch:
@@ -34,7 +34,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
-class MetadataTest
+public class MetadataTest
 {
 
     Artifact artifact;
@@ -286,4 +286,4 @@ private static void addSnapshotVersionLegacy( Versioning versioning, Date timest
         versioning.setLastUpdatedTimestamp( timestamp );
     }
     /*-- END helper methods to populate metadata objects ---*/
-}
\ No newline at end of file
+}

File: api/maven-api-meta/src/main/java/org/apache/maven/api/annotations/NotThreadSafe.java
Patch:
@@ -26,7 +26,7 @@
 import java.lang.annotation.Target;
 
 /**
- * This annotation indicates that the annotated type is <bold>not</bold> threadsafe
+ * This annotation indicates that the annotated type is <strong>not</strong> threadsafe
  * and should only be used by a single thread.
  *
  * @see ThreadSafe

File: api/maven-api-model/src/main/java/org/apache/maven/api/model/package-info.java
Patch:
@@ -1,7 +1,7 @@
 // CHECKSTYLE_OFF: RegexpHeader
 /**
  * Maven POM (Project Object Model) classes, generated from <code>maven.mdo</code> model.
- * The root class is {@link org.apache.maven.model.Model}.
+ * The root class is {@link org.apache.maven.api.model.Model}.
  */
 package org.apache.maven.api.model;
 
@@ -22,4 +22,4 @@
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
- */
\ No newline at end of file
+ */

File: api/maven-api-core/src/main/java/org/apache/maven/api/Listener.java
Patch:
@@ -25,6 +25,7 @@
 
 /**
  * A listener for session events.
+ * TODO: open this to other events like {@link org.apache.maven.eventspy.EventSpy}
  *
  * @since 4.0
  */

File: api/maven-api-core/src/main/java/org/apache/maven/api/Toolchain.java
Patch:
@@ -42,7 +42,7 @@ public interface Toolchain
      * Gets the platform tool executable.
      *
      * @param toolName the tool platform independent tool name.
-     * @return file representing the tool executable, or null if the tool can not be found
+     * @return file representing the tool executable, or null if the tool cannot be found
      */
     String findTool( String toolName );
 

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/ArtifactInstaller.java
Patch:
@@ -46,7 +46,7 @@ public interface ArtifactInstaller extends Service
     /**
      * @param session the repository session
      * @param artifact the {@link Artifact} to install
-     * @throws ArtifactInstallerException In case of an error which can be the a given artifact can not be found or the
+     * @throws ArtifactInstallerException In case of an error which can be the a given artifact cannot be found or the
      *             installation has failed.
      * @throws IllegalArgumentException in case of parameter {@code session} is {@code null} or
      *          {@code artifact} is {@code null}.
@@ -59,7 +59,7 @@ default void install( Session session, Artifact artifact )
     /**
      * @param session the repository session
      * @param artifacts Collection of {@link Artifact MavenArtifacts}
-     * @throws ArtifactInstallerException In case of an error which can be the a given artifact can not be found or the
+     * @throws ArtifactInstallerException In case of an error which can be the a given artifact cannot be found or the
      *             installation has failed.
      * @throws IllegalArgumentException in case of parameter {@code request} is {@code null} or parameter
      *             {@code localRepository} is {@code null} or {@code localRepository} is not a directory

File: api/maven-api-core/src/main/java/org/apache/maven/api/services/BaseRequest.java
Patch:
@@ -41,7 +41,7 @@ abstract class BaseRequest
 
     protected BaseRequest( @Nonnull Session session )
     {
-        this.session = nonNull( session, "session can not be null" );
+        this.session = nonNull( session, "session cannot be null" );
     }
 
     @Nonnull

File: maven-core/src/main/java/org/apache/maven/DefaultMaven.java
Patch:
@@ -35,6 +35,7 @@
 import org.apache.maven.graph.GraphBuilder;
 import org.apache.maven.graph.ProjectSelector;
 import org.apache.maven.internal.aether.DefaultRepositorySystemSessionFactory;
+import org.apache.maven.internal.impl.DefaultSession;
 import org.apache.maven.internal.impl.DefaultSessionFactory;
 import org.apache.maven.lifecycle.LifecycleExecutionException;
 import org.apache.maven.internal.aether.MavenChainedWorkspaceReader;
@@ -240,6 +241,7 @@ private MavenExecutionResult doExecute( MavenExecutionRequest request )
 
             sessionScope.seed( MavenSession.class, session );
             sessionScope.seed( Session.class, session.getSession() );
+            sessionScope.seed( DefaultSession.class, (DefaultSession) session.getSession() );
 
             legacySupport.setSession( session );
 

File: maven-core/src/main/java/org/apache/maven/internal/impl/DefaultArtifactCoordinateFactory.java
Patch:
@@ -20,6 +20,7 @@
  */
 
 import javax.inject.Named;
+import javax.inject.Singleton;
 
 import org.apache.maven.api.ArtifactCoordinate;
 import org.apache.maven.api.annotations.Nonnull;
@@ -32,6 +33,7 @@
 import static org.apache.maven.internal.impl.Utils.nonNull;
 
 @Named
+@Singleton
 public class DefaultArtifactCoordinateFactory implements ArtifactCoordinateFactory
 {
     @Override

File: maven-core/src/main/java/org/apache/maven/internal/impl/DefaultArtifactDeployer.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.maven.api.annotations.Nonnull;
 import javax.inject.Inject;
 import javax.inject.Named;
+import javax.inject.Singleton;
 
 import java.util.Collection;
 import java.util.List;
@@ -46,6 +47,7 @@
  * Implementation of {@link ArtifactDeployer} service.
  */
 @Named
+@Singleton
 public class DefaultArtifactDeployer implements ArtifactDeployer
 {
     private final @Nonnull RepositorySystem repositorySystem;

File: maven-core/src/main/java/org/apache/maven/internal/impl/DefaultArtifactFactory.java
Patch:
@@ -20,6 +20,7 @@
  */
 
 import javax.inject.Named;
+import javax.inject.Singleton;
 
 import org.apache.maven.api.Artifact;
 import org.apache.maven.api.annotations.Nonnull;
@@ -32,6 +33,7 @@
 import static org.apache.maven.internal.impl.Utils.nonNull;
 
 @Named
+@Singleton
 public class DefaultArtifactFactory implements ArtifactFactory
 {
     @Override

File: maven-core/src/main/java/org/apache/maven/internal/impl/DefaultDependencyCollector.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.maven.api.annotations.Nonnull;
 import javax.inject.Inject;
 import javax.inject.Named;
+import javax.inject.Singleton;
 
 import java.util.List;
 
@@ -45,6 +46,7 @@
 import static org.apache.maven.internal.impl.Utils.nonNull;
 
 @Named
+@Singleton
 public class DefaultDependencyCollector implements DependencyCollector
 {
 

File: maven-core/src/main/java/org/apache/maven/internal/impl/DefaultDependencyCoordinateFactory.java
Patch:
@@ -20,6 +20,7 @@
  */
 
 import javax.inject.Named;
+import javax.inject.Singleton;
 
 import java.util.stream.Collectors;
 
@@ -34,6 +35,7 @@
 import static org.apache.maven.internal.impl.Utils.nonNull;
 
 @Named
+@Singleton
 public class DefaultDependencyCoordinateFactory implements DependencyCoordinateFactory
 {
 

File: maven-core/src/main/java/org/apache/maven/session/scope/internal/SessionScopeModule.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.maven.SessionScoped;
 import org.apache.maven.api.Session;
 import org.apache.maven.execution.MavenSession;
+import org.apache.maven.internal.impl.DefaultSession;
 import org.codehaus.plexus.PlexusContainer;
 import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
 
@@ -64,5 +65,6 @@ protected void configure()
 
         bind( MavenSession.class ).toProvider( SessionScope.seededKeyProvider() ).in( scope );
         bind( Session.class ).toProvider( SessionScope.seededKeyProvider() ).in( scope );
+        bind( DefaultSession.class ).toProvider( SessionScope.seededKeyProvider() ).in( scope );
     }
 }

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -106,6 +106,7 @@ public static Test suite()
         // Tests that don't run stable and need to be fixed
         // -------------------------------------------------------------------------------------------------------------
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
+        suite.addTestSuite( MavenITmng7474SessionScopeTest.class );
         suite.addTestSuite( MavenITmng7529VersionRangeRepositorySelection.class );
         suite.addTestSuite( MavenITmng7443ConsistencyOfOptionalProjectsAndProfilesTest.class );
         suite.addTestSuite( MavenITmng7353CliGoalInvocationTest.class );

File: its/core-it-suite/src/test/resources/mng-7474-session-scope/plugin/src/main/java/org/apache/maven/its/mng7474/TestComponent.java
Patch:
@@ -19,12 +19,13 @@
  * under the License.
  */
 
-import javax.enterprise.context.SessionScoped;
 import javax.inject.Named;
 
 import java.util.List;
 import java.util.concurrent.CopyOnWriteArrayList;
 
+import org.apache.maven.SessionScoped;
+
 @SessionScoped
 @Named
 public class TestComponent

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleStarter.java
Patch:
@@ -121,9 +121,7 @@ public void execute( MavenSession session )
 
             ClassLoader oldContextClassLoader = Thread.currentThread().getContextClassLoader();
             ReactorBuildStatus reactorBuildStatus = new ReactorBuildStatus( session.getProjectDependencyGraph() );
-            reactorContext =
-                new ReactorContext( result, projectIndex, oldContextClassLoader, reactorBuildStatus,
-                                    sessionScope.memento() );
+            reactorContext = new ReactorContext( result, projectIndex, oldContextClassLoader, reactorBuildStatus );
 
             String builderId = session.getRequest().getBuilderId();
             Builder builder = builders.get( builderId );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -106,6 +106,7 @@ public static Test suite()
         // Tests that don't run stable and need to be fixed
         // -------------------------------------------------------------------------------------------------------------
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
+        suite.addTestSuite( MavenITmng7529VersionRangeRepositorySelection.class );
         suite.addTestSuite( MavenITmng7443ConsistencyOfOptionalProjectsAndProfilesTest.class );
         suite.addTestSuite( MavenITmng7353CliGoalInvocationTest.class );
         suite.addTestSuite( MavenITmng7504NotWarnUnsupportedReportPluginsTest.class );

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecycleTaskSegmentCalculator.java
Patch:
@@ -102,7 +102,7 @@ public List<TaskSegment> calculateTaskSegments( MavenSession session, List<Strin
         {
             if ( isGoalSpecification( task ) )
             {
-                // "pluginPrefix:goal" or "groupId:artifactId[:version]:goal"
+                // "pluginPrefix[:version]:goal" or "groupId:artifactId[:version]:goal"
 
                 lifecyclePluginResolver.resolveMissingPluginVersions( session.getTopLevelProject(), session );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -106,6 +106,7 @@ public static Test suite()
         // Tests that don't run stable and need to be fixed
         // -------------------------------------------------------------------------------------------------------------
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
+        suite.addTestSuite( MavenITmng7353CliGoalInvocationTest.class );
         suite.addTestSuite( MavenITmng7504NotWarnUnsupportedReportPluginsTest.class );
         suite.addTestSuite( MavenITmng7160ExtensionClassloader.class );
         suite.addTestSuite( MavenITmng7468UnsupportedPluginsParametersTest.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0019PluginVersionMgmtBySuperPomTest.java
Patch:
@@ -23,10 +23,10 @@
 
 import java.io.File;
 
-public class MavenIT0019PluginVersionMngtBySuperPomTest
+public class MavenIT0019PluginVersionMgmtBySuperPomTest
     extends AbstractMavenIntegrationTestCase
 {
-    public MavenIT0019PluginVersionMngtBySuperPomTest()
+    public MavenIT0019PluginVersionMgmtBySuperPomTest()
     {
         super( ALL_MAVEN_VERSIONS );
     }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0030DepPomDepMgmtInheritanceTest.java
Patch:
@@ -23,10 +23,10 @@
 
 import java.io.File;
 
-public class MavenIT0030DepPomDepMngtInheritanceTest
+public class MavenIT0030DepPomDepMgmtInheritanceTest
     extends AbstractMavenIntegrationTestCase
 {
-    public MavenIT0030DepPomDepMngtInheritanceTest()
+    public MavenIT0030DepPomDepMgmtInheritanceTest()
     {
         super( ALL_MAVEN_VERSIONS );
     }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0377PluginLookupFromPrefixTest.java
Patch:
@@ -38,7 +38,7 @@ public MavenITmng0377PluginLookupFromPrefixTest()
     }
 
     /**
-     * Test usage of plugins.xml mapping file on the repository to resolve plugin artifactId from it's prefix using the
+     * Test usage of plugins.xml mapping file on the repository to resolve plugin artifactId from its prefix using the
      * pluginGroups in the provided settings.xml.
      *
      * @throws Exception in case of failure

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0985NonExecutedPluginMgmtGoalsTest.java
Patch:
@@ -29,10 +29,10 @@
  * @author John Casey
  *
  */
-public class MavenITmng0985NonExecutedPluginMngtGoalsTest
+public class MavenITmng0985NonExecutedPluginMgmtGoalsTest
     extends AbstractMavenIntegrationTestCase
 {
-    public MavenITmng0985NonExecutedPluginMngtGoalsTest()
+    public MavenITmng0985NonExecutedPluginMgmtGoalsTest()
     {
         super( ALL_MAVEN_VERSIONS );
     }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1052PluginMgmtConfigTest.java
Patch:
@@ -29,10 +29,10 @@
  * @author John Casey
  *
  */
-public class MavenITmng1052PluginMngtConfigTest
+public class MavenITmng1052PluginMgmtConfigTest
     extends AbstractMavenIntegrationTestCase
 {
-    public MavenITmng1052PluginMngtConfigTest()
+    public MavenITmng1052PluginMgmtConfigTest()
     {
         super( ALL_MAVEN_VERSIONS );
     }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1803PomValidationErrorIncludesLineNumberTest.java
Patch:
@@ -77,7 +77,7 @@ public void testit()
             }
         }
 
-        assertTrue( "Build output did not mention validaton error!", foundError );
+        assertTrue( "Build output did not mention validation error!", foundError );
     }
 
 }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2068ReactorRelativeParentsTest.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * This is a test set for <a href="https://issues.apache.org/jira/browse/MNG-2068">MNG-2068</a>.
  *
- * Verify that a multimodule build, built from the middle node in an inheritance hierarchy,
+ * Verify that a multi-module build, built from the middle node in an inheritance hierarchy,
  * can find all parent POMs necessary to build each project in the reactor using ONLY the
  * relativePath from the parent specification (in this case, the implied one of '../pom.xml').
  *

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2103PluginExecutionInheritanceTest.java
Patch:
@@ -40,7 +40,7 @@ public MavenITmng2103PluginExecutionInheritanceTest()
     }
 
     /**
-     * Verify that the plugin-level inherited flag can be overriden by the execution-level flag.
+     * Verify that the plugin-level inherited flag can be overridden by the execution-level flag.
      *
      * @throws Exception in case of failure
      */

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2130ParentLookupFromReactorCacheTest.java
Patch:
@@ -36,7 +36,7 @@ public MavenITmng2130ParentLookupFromReactorCacheTest()
 
     /**
      * Test that parent-POMs cached during a build are available as parents
-     * to other POMs in the multimodule build.
+     * to other POMs in the multi-module build.
      *
      * @throws Exception in case of failure
      */

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2196ParentResolutionTest.java
Patch:
@@ -36,7 +36,7 @@ public MavenITmng2196ParentResolutionTest()
     }
 
     /**
-     * Verify that multimodule builds where one project references another as
+     * Verify that multi-module builds where one project references another as
      * a parent can build, even if that parent is not correctly referenced by
      * &lt;relativePath/&gt; and is not in the local repository. [MNG-2196]
      *

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2690MojoLoadingErrorsTest.java
Patch:
@@ -32,7 +32,7 @@
  * This is a test set for <a href="https://issues.apache.org/jira/browse/MNG-2690">MNG-2690</a>.
  *
  * It checks, at the most basic level possible, that the plugin manager is intercepting things like
- * {@link NoClassDefFoundError} and ComponntLookupException, then throwing user-friendly errors when loading and
+ * {@link NoClassDefFoundError} and ComponentLookupException, then throwing user-friendly errors when loading and
  * configuring a mojo.
  *
  * @author jdcasey

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2720SiblingClasspathArtifactsTest.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * This is a test set for <a href="https://issues.apache.org/jira/browse/MNG-2720">MNG-2720</a>.
  *
- * This test will ensure that running the 'package' phase on a multimodule build with child
+ * This test will ensure that running the 'package' phase on a multi-module build with child
  * interdependency will result in one child using the JAR of the other child in its compile
  * classpath, NOT the target/classes directory. This is critical, since sibling projects might
  * use literally ANY artifact produced by another module project, and limiting to target/classes

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3023ReactorDependencyResolutionTest.java
Patch:
@@ -80,7 +80,7 @@ public void testitMNG3023A() throws Exception
     /**
      * Test that reactor projects are included in dependency resolution.
      *
-     * I this pass, the dependency artifact should have the file $(basedir)/dependency/dependency-classes
+     * If this passes, the dependency artifact should have the file $(basedir)/dependency/dependency-classes
      * (a directory) associated with it, since the 'compile' phase has run. This location should be
      * present in the compile classpath output from the maven-it-plugin-dependency-resolution:compile
      * mojo execution.
@@ -112,7 +112,7 @@ public void testitMNG3023B()
     /**
      * Test that reactor projects are included in dependency resolution.
      *
-     * I this pass, the dependency should have been installed, so the dependency artifact should have
+     * If this passes, the dependency should have been installed, so the dependency artifact should have
      * a file of .../dependency-1.jar associated with it, since the 'install' phase has run. This
      * location should be present in the compile classpath output from the
      * maven-it-plugin-dependency-resolution:compile mojo execution.

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3099SettingsProfilesWithNoPomTest.java
Patch:
@@ -38,7 +38,7 @@ public MavenITmng3099SettingsProfilesWithNoPomTest()
     }
 
     /**
-     * Verify that (active) profiles from the settings are effective even if no POM is in use (e.g archetype:create).
+     * Verify that (active) profiles from the settings are effective even if no POM is in use (e.g. archetype:create).
      * In more detail, this means the plugin can be resolved from the repositories given in the settings and the plugin
      * can access properties defined by the profiles.
      *

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3139UseCachedMetadataOfBlacklistedRepoTest.java
Patch:
@@ -63,7 +63,7 @@ public void testitMNG3139()
         verifier.verifyErrorFreeLog();
         verifier.resetStreams();
 
-        // phase 2: trigger blacklisting of repo (by invalid URL) and check previously downloaded metadata is stil used
+        // phase 2: trigger blacklisting of repo (by invalid URL) and check previously downloaded metadata is still used
 
         verifier = newVerifier( testDir.getAbsolutePath() );
         verifier.setAutoclean( false );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3208ProfileAwareReactorSortingTest.java
Patch:
@@ -40,7 +40,7 @@ public MavenITmng3208ProfileAwareReactorSortingTest()
     }
 
     /**
-     * Verify that project sorting consideres dependencies injected by profiles.
+     * Verify that project sorting considers dependencies injected by profiles.
      *
      * @throws Exception in case of failure
      */

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3470StrictChecksumVerificationOfDependencyPomTest.java
Patch:
@@ -28,11 +28,11 @@
  *
  * @author Benjamin Bentmann
  */
-public class MavenITmng3470StrictCheckumVerificationOfDependencyPomTest
+public class MavenITmng3470StrictChecksumVerificationOfDependencyPomTest
     extends AbstractMavenIntegrationTestCase
 {
 
-    public MavenITmng3470StrictCheckumVerificationOfDependencyPomTest()
+    public MavenITmng3470StrictChecksumVerificationOfDependencyPomTest()
     {
         super( "[2.0.3,2.0.4],[3.0-beta-1,)" );
     }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3652UserAgentHeaderTest.java
Patch:
@@ -299,7 +299,7 @@ public void testmng3652_UserAgentConfiguredInSettings()
         assertEquals( "My wonderful header", customHeader );
     }
 
-    public void testmng3652_AdditionnalHttpHeaderConfiguredInSettings()
+    public void testmng3652_AdditionalHttpHeaderConfiguredInSettings()
         throws Exception
     {
         // customizing version not supported in Maven 3

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3729MultiForkAggregatorsTest.java
Patch:
@@ -28,7 +28,7 @@
  * <p>
  * Complicated use case, but say
  * you have an aggregator plugin that forks a lifecycle, and this aggregator is bound to the main lifecycle in a
- * multimodule build. Further, say you call another plugin directly from the command line for this multimodule build,
+ * multi-module build. Further, say you call another plugin directly from the command line for this multi-module build,
  * which forks a new lifecycle (like assembly:assembly).
  * </p>
  * When the directly invoked aggregator forks, it will force the

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3775ConflictResolutionBacktrackingTest.java
Patch:
@@ -76,7 +76,7 @@ public void testitCBA()
 
     /**
      * Verify that conflict resolution doesn't select nodes which are children of eventually disabled nodes.
-     * In other words, when a sub tree gets disabled, all previously selected winners among the children need to
+     * In other words, when a subtree gets disabled, all previously selected winners among the children need to
      * be revised.
      */
     private void testit( String project )

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3808ReportInheritanceOrderingTest.java
Patch:
@@ -30,11 +30,11 @@
  * @author Brett Porter
  *
  */
-public class MavenITmng3808ReportInheritenceOrderingTest
+public class MavenITmng3808ReportInheritanceOrderingTest
     extends AbstractMavenIntegrationTestCase
 {
 
-    public MavenITmng3808ReportInheritenceOrderingTest()
+    public MavenITmng3808ReportInheritanceOrderingTest()
     {
         super( "[2.0.11,2.1.0-M1),[2.1.0-M2,)" );
     }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3836PluginConfigInheritanceTest.java
Patch:
@@ -40,7 +40,7 @@ public MavenITmng3836PluginConfigInheritanceTest()
     }
 
     /**
-     * Verify that sub modules can *override* inherited plugin configuration.
+     * Verify that submodules can *override* inherited plugin configuration.
      *
      * @throws Exception in case of failure
      */

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3845LimitedPomInheritanceTest.java
Patch:
@@ -40,7 +40,7 @@ public MavenITmng3845LimitedPomInheritanceTest()
     }
 
     /**
-     * Test that inheritance is all-or-nothing for certain sub-trees of the POM.
+     * Test that inheritance is all-or-nothing for certain subtrees of the POM.
      *
      * @throws Exception in case of failure
      */

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3979ElementJoinTest.java
Patch:
@@ -39,7 +39,7 @@ public MavenITmng3979ElementJoinTest()
     }
 
     /**
-     * Test that during inheritance the merging/joining of sub trees with equal identifier doesn't crash if the parent
+     * Test that during inheritance the merging/joining of subtrees with equal identifier doesn't crash if the parent
      * POM has a non-empty element and the child POM has an empty element to join.
      *
      * @throws Exception in case of failure

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4180PerDependencyExclusionsTest.java
Patch:
@@ -41,7 +41,7 @@ public MavenITmng4180PerDependencyExclusionsTest()
     }
 
     /**
-     * Test that dependency exclusions are not applied globally but are limited to the sub tree that is rooted at the
+     * Test that dependency exclusions are not applied globally but are limited to the subtree that is rooted at the
      * dependency they are declared on.
      *
      * @throws Exception in case of failure

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4207PluginWithLog4JTest.java
Patch:
@@ -38,7 +38,7 @@ public MavenITmng4207PluginWithLog4JTest()
     }
 
     /**
-     * Test that a plugin that depends on log4j and employes the artifact resolver does not die when using
+     * Test that a plugin that depends on log4j and employs the artifact resolver does not die when using
      * commons-http to resolve an artifact.
      *
      * @throws Exception in case of failure

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4235HttpAuthDeploymentChecksumsTest.java
Patch:
@@ -165,7 +165,7 @@ public void testit()
             if ( StringUtils.equalsIgnoreCase( "chunked", deployedResource.transferEncoding ) )
             {
                 fail( "deployedResource " + deployedResource
-                          + " use chuncked transfert encoding some http server doesn't support that" );
+                          + " use chunked transfert encoding some http server doesn't support that" );
             }
         }
     }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4262MakeLikeReactorDottedPath370Test.java
Patch:
@@ -69,7 +69,7 @@ public void testitMakeRoot()
     }
 
     /**
-     * Verify that the project list can select a sub module by a relative path like {@code "../<something>"}.
+     * Verify that the project list can select a submodule by a relative path like {@code "../<something>"}.
      *
      * @throws Exception in case of failure
      */

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4262MakeLikeReactorDottedPathTest.java
Patch:
@@ -69,7 +69,7 @@ public void testitMakeRoot()
     }
 
     /**
-     * Verify that the project list can select a sub module by a relative path like {@code "../<something>"}.
+     * Verify that the project list can select a submodule by a relative path like {@code "../<something>"}.
      *
      * @throws Exception in case of failure
      */

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4343MissingReleaseUpdatePolicyTest.java
Patch:
@@ -193,7 +193,7 @@ public void testitAlways()
 
     /**
      * Verify that checking for *missing* release artifacts respects the update policy that is configured in the
-     * release section for the respective repository, in this case "never", unless overriden from the CLI via -U.
+     * release section for the respective repository, in this case "never", unless overridden from the CLI via -U.
      *
      * @throws Exception in case of failure
      */

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4345DefaultPluginExecutionOrderTest.java
Patch:
@@ -40,7 +40,7 @@ public MavenITmng4345DefaultPluginExecutionOrderTest()
     }
 
     /**
-     * Test that plugin executions contributed by default lifecycle mappings always execute first in the targetted
+     * Test that plugin executions contributed by default lifecycle mappings always execute first in the targeted
      * lifecycle phase regardless of other plugin executions bound to the same phase and regardless of the POM
      * order of plugin declarations.
      *

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4470AuthenticatedDeploymentToProxyTest.java
Patch:
@@ -227,7 +227,7 @@ private void testit( String project )
             if ( StringUtils.equalsIgnoreCase( "chunked", deployedResource.transferEncoding ) )
             {
                 fail( "deployedResource " + deployedResource
-                          + " use chuncked transfert encoding some http server doesn't support that" );
+                          + " use chunked transfert encoding some http server doesn't support that" );
             }
         }
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4580ProjectLevelPluginDepUsedForCliInvocInReactorTest.java
Patch:
@@ -39,7 +39,7 @@ public MavenITmng4580ProjectLevelPluginDepUsedForCliInvocInReactorTest()
     }
 
     /**
-     * Verify that project-level plugin dependencies of sub modules are still considered when a plugin is invoked
+     * Verify that project-level plugin dependencies of submodules are still considered when a plugin is invoked
      * directly from command line at the reactor root. In other words, the plugin realm used for a mojo execution
      * should match the plugin dependencies as given by the current project.
      *

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4586PluginPrefixResolutionFromVersionlessPluginMgmtTest.java
Patch:
@@ -28,11 +28,11 @@
  *
  * @author Benjamin Bentmann
  */
-public class MavenITmng4586PluginPrefixResolutionFromVersionlessPluginMngtTest
+public class MavenITmng4586PluginPrefixResolutionFromVersionlessPluginMgmtTest
     extends AbstractMavenIntegrationTestCase
 {
 
-    public MavenITmng4586PluginPrefixResolutionFromVersionlessPluginMngtTest()
+    public MavenITmng4586PluginPrefixResolutionFromVersionlessPluginMgmtTest()
     {
         super( "[3.0-beta-1,)" );
     }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4600DependencyOptionalFlagManagementTest.java
Patch:
@@ -63,7 +63,7 @@ public void testitModel()
     }
 
     /**
-     * Verify that a transitive dependency's optional flag is not subject to dependency management of the root artifat.
+     * Verify that a transitive dependency's optional flag is not subject to dependency management of the root artifact.
      * This part of the test checks the artifact collector.
      *
      * @throws Exception in case of failure

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4684DistMgmtOverriddenByProfileTest.java
Patch:
@@ -29,11 +29,11 @@
  *
  * @author Benjamin Bentmann
  */
-public class MavenITmng4684DistMngtOverridenByProfileTest
+public class MavenITmng4684DistMgmtOverriddenByProfileTest
     extends AbstractMavenIntegrationTestCase
 {
 
-    public MavenITmng4684DistMngtOverridenByProfileTest()
+    public MavenITmng4684DistMgmtOverriddenByProfileTest()
     {
         super( "[2.0.3,3.0-alpha-1),[3.0-beta-2,)" );
     }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4800NearestWinsVsScopeWideningTest.java
Patch:
@@ -53,7 +53,7 @@ public void testitBA()
     /**
      * Verify that nearest-wins conflict resolution doesn't get confused when a farther conflicting dependency has
      * a wider scope than the nearer dependency, i.e. one should still end up with the nearer dependency (s:1) and
-     * its sub tree (x) but in the wider scope (compile).
+     * its subtree (x) but in the wider scope (compile).
      */
     private void testit( String test )
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5019StringBasedCompLookupFromChildPluginRealmTest.java
Patch:
@@ -37,7 +37,7 @@ public MavenITmng5019StringBasedCompLookupFromChildPluginRealmTest()
 
     /**
      * Verify that plugins executed by other plugins (like reports executed by the maven-site-plugin) can successfully
-     * lookup components via string-based roles from their plugin realm as denoted by the thread context class loader,
+     * look up components via string-based roles from their plugin realm as denoted by the thread context class loader,
      * even if those components are also contained in the parent plugin realm.
      *
      * @throws Exception in case of failure

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5230MakeReactorWithExcludesTest.java
Patch:
@@ -160,7 +160,7 @@ public void testitMakeBothExclude()
     }
 
     /**
-     * Verify that using the basedir for exclusion with an exclemation in the project list matches projects with non-default POM files.
+     * Verify that using the basedir for exclusion with an exclamation in the project list matches projects with non-default POM files.
      *
      * @throws Exception in case of failure
      */

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5591WorkspaceReader.java
Patch:
@@ -37,9 +37,9 @@ public void testWorkspaceReader()
         /*
          * The point of this test is to validate that ide WorkspaceReader, like one used by m2e, does not interfere with
          * reactor dependency resolution. The test comes in two parts. mng-5591-workspace-reader/extension is noop
-         * WorkspaceReader implementation and mng-5591-workspace-reader/basic is a multimodule project with inter-module
+         * WorkspaceReader implementation and mng-5591-workspace-reader/basic is a multi-module project with inter-module
          * dependencies. The workspace reader extension is injected in maven runtime with -Dmaven.ext.class.path command
-         * line argument. The multimodule build fails unless reactor resolution works properly.
+         * line argument. The multi-module build fails unless reactor resolution works properly.
          */
 
         File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-5591-workspace-reader" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5760ResumeFeatureTest.java
Patch:
@@ -188,7 +188,7 @@ public void testFailureWithParallelBuild() throws Exception
         // Let's do a first pass with a and c failing.  The build is parallel,
         // so we have a first thread with a and d, and the second one with b and c
         // The result should be:
-        //   a : failure (slow, so b and c will be built in the mean time)
+        //   a : failure (slow, so b and c will be built in the meantime)
         //   b : success
         //   c : failure
         //   d : skipped

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng6057CheckReactorOrderTest.java
Patch:
@@ -66,7 +66,7 @@ public void testitReactorShouldResultInExpectedOrder()
         List<String> loadedLines = verifier.loadLines( "log-only.txt", "UTF-8" );
         List<String> resultingLines = extractReactorBuildOrder( loadedLines );
 
-        // We expecting exactly three lines as result.
+        // We're expecting exactly three lines as result.
         assertEquals( 3, resultingLines.size() );
 
         // We expect those lines in the following exact order.

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng6173GetAllProjectsInReactorTest.java
Patch:
@@ -38,7 +38,7 @@ public MavenITmng6173GetAllProjectsInReactorTest()
 
     /**
      * Verifies that {@code MavenSession#getAllProjects()} returns all projects in the reactor
-     * not only they ones being built.
+     * not only the ones being built.
      *
      * @throws Exception in case of failure
      */

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng6352PrintVersionTest.java
Patch:
@@ -69,7 +69,7 @@ public void testitShouldPrintVersionAtTopAndAtBottom()
         List<String> loadedLines = verifier.loadLines( "version-log.txt", "UTF-8" );
         List<String> resultingLines = extractReactorBuildOrder( loadedLines );
 
-        // We expecting exactly four lines as result.
+        // We're expecting exactly four lines as result.
         assertEquals( 4, resultingLines.size() );
 
         // We expect those lines in the following exact order.
@@ -104,7 +104,7 @@ public void testitShouldPrintVersionInAllLines()
         List<String> loadedLines = verifier.loadLines( "version-log.txt", "UTF-8" );
         List<String> resultingLines = extractReactorBuildOrder( loadedLines );
 
-        // We expecting exactly four lines as result.
+        // We're expecting exactly four lines as result.
         assertEquals( 4, resultingLines.size() );
 
         // We expect those lines in the following exact order.

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng6391PrintVersionTest.java
Patch:
@@ -69,7 +69,7 @@ public void testitShouldPrintVersionAtTopAndAtBottom()
         List<String> loadedLines = verifier.loadLines( "version-log.txt", "UTF-8" );
         List<String> resultingLines = extractReactorBuildOrder( loadedLines );
 
-        // We expecting exactly four lines as result.
+        // We're expecting exactly four lines as result.
         assertEquals( 5, resultingLines.size() );
 
         // We expect those lines in the following exact order.
@@ -105,7 +105,7 @@ public void testitShouldPrintVersionInAllLines()
         List<String> loadedLines = verifier.loadLines( "version-log.txt", "UTF-8" );
         List<String> resultingLines = extractReactorBuildOrder( loadedLines );
 
-        // We expecting exactly four lines as result.
+        // We're expecting exactly four lines as result.
         assertEquals( 5, resultingLines.size() );
 
         // We expect those lines in the following exact order.

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng7051OptionalProfileActivationTest.java
Patch:
@@ -79,7 +79,7 @@ public void testActivatingNonExistingProfileWithQuestionMarkDoesNotBreak() throw
     }
 
     /**
-     * This test verifies that activating both an existing and a non-existing profile does not break the build when it the latter is prefixed with <strong>?</strong>.
+     * This test verifies that activating both an existing and a non-existing profile does not break the build when the latter is prefixed with <strong>?</strong>.
      *
      * @throws Exception in case of failure
      */
@@ -117,7 +117,7 @@ public void testDeactivatingNonExistingProfileWithQuestionMarkDoesNotBreak() thr
     }
 
     /**
-     * This test verifies that deactivating both an existing and a non-existing profile does not break the build when it the latter is prefixed with <strong>?</strong>.
+     * This test verifies that deactivating both an existing and a non-existing profile does not break the build when the latter is prefixed with <strong>?</strong>.
      *
      * @throws Exception in case of failure
      */

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng7390SelectModuleOutsideCwdTest.java
Patch:
@@ -24,7 +24,7 @@
 import java.io.File;
 
 /**
- * This test suite tests whether other modules in the same multi module project can be selected when invoking Maven from a submodule.
+ * This test suite tests whether other modules in the same multi-module project can be selected when invoking Maven from a submodule.
  * Related JIRA issue: <a href="https://issues.apache.org/jira/browse/MNG-7390">MNG-7390</a>.
  *
  * @author Martin Kanters
@@ -104,7 +104,7 @@ public void testSelectModulesByRelativePath() throws Exception
     }
 
     /**
-     Maven determines whether the target module is in a multi module project based on the presence of a .mvn directory in root.
+     Maven determines whether the target module is in a multi-module project based on the presence of a .mvn directory in root.
      This test verifies that when that directory is missing, the module cannot be found.
      */
     public void testSelectModulesOutsideCwdDoesNotWorkWhenDotMvnIsNotPresent() throws Exception

File: its/core-it-support/core-it-javaagent/src/main/java/org/apache/maven/coreits/javaagent/mng5669/Premain.java
Patch:
@@ -52,7 +52,7 @@ public byte[] transform( ClassLoader loader, String className, Class<?> classBei
                     ClassReader r = new ClassReader( classfileBuffer );
                     final ClassWriter w = new ClassWriter( Opcodes.ASM6 );
 
-                    ClassVisitor v = new DefaultModelReaderVisitior( Opcodes.ASM6, w );
+                    ClassVisitor v = new DefaultModelReaderVisitor( Opcodes.ASM6, w );
 
                     r.accept( v, ClassReader.EXPAND_FRAMES );
                     return w.toByteArray();
@@ -65,10 +65,10 @@ public byte[] transform( ClassLoader loader, String className, Class<?> classBei
         } );
     }
 
-    private static class DefaultModelReaderVisitior
+    private static class DefaultModelReaderVisitor
         extends ClassVisitor
     {
-        DefaultModelReaderVisitior( int api, org.objectweb.asm.ClassVisitor cv )
+        DefaultModelReaderVisitor( int api, org.objectweb.asm.ClassVisitor cv )
         {
             super( api, cv );
         }

File: its/core-it-support/core-it-plugins/maven-it-plugin-configuration/src/main/java/org/apache/maven/plugin/coreit/ConfigMojo.java
Patch:
@@ -118,7 +118,7 @@ public class ConfigMojo
     /**
      * A simple parameter of type {@link java.lang.Integer}.
      *
-     * @parameter property="config.intergerParam"
+     * @parameter property="config.integerParam"
      */
     private Integer integerParam;
 

File: its/core-it-support/core-it-plugins/maven-it-plugin-context-passing/src/main/java/org/apache/maven/plugin/coreit/ThrowMojo.java
Patch:
@@ -24,7 +24,7 @@
 
 /**
  * "Throw" a parameter into the plugin context, for the "catch" mojo to
- * pickup and process.
+ * pick up and process.
  *
  * @goal throw
  */

File: its/core-it-support/core-it-plugins/maven-it-plugin-core-stubs/maven-clean-plugin/src/main/java/org/apache/maven/plugin/coreit/CleanMojo.java
Patch:
@@ -50,7 +50,7 @@ public class CleanMojo
     private MavenProject project;
 
     /**
-     * The path to the output file, relative to the project base directory directory.
+     * The path to the output file, relative to the project base directory.
      *
      * @parameter
      */

File: its/core-it-support/core-it-plugins/maven-it-plugin-core-stubs/maven-compiler-plugin/src/main/java/org/apache/maven/plugin/coreit/CompileMojo.java
Patch:
@@ -50,7 +50,7 @@ public class CompileMojo
     private MavenProject project;
 
     /**
-     * The path to the output file, relative to the project base directory directory.
+     * The path to the output file, relative to the project base directory.
      *
      * @parameter
      */

File: its/core-it-support/core-it-plugins/maven-it-plugin-core-stubs/maven-compiler-plugin/src/main/java/org/apache/maven/plugin/coreit/TestCompileMojo.java
Patch:
@@ -50,7 +50,7 @@ public class TestCompileMojo
     private MavenProject project;
 
     /**
-     * The path to the output file, relative to the project base directory directory.
+     * The path to the output file, relative to the project base directory.
      *
      * @parameter
      */

File: its/core-it-support/core-it-plugins/maven-it-plugin-core-stubs/maven-deploy-plugin/src/main/java/org/apache/maven/plugin/coreit/DeployMojo.java
Patch:
@@ -50,7 +50,7 @@ public class DeployMojo
     private MavenProject project;
 
     /**
-     * The path to the output file, relative to the project base directory directory.
+     * The path to the output file, relative to the project base directory.
      *
      * @parameter
      */

File: its/core-it-support/core-it-plugins/maven-it-plugin-core-stubs/maven-ear-plugin/src/main/java/org/apache/maven/plugin/coreit/EarMojo.java
Patch:
@@ -50,7 +50,7 @@ public class EarMojo
     private MavenProject project;
 
     /**
-     * The path to the output file, relative to the project base directory directory.
+     * The path to the output file, relative to the project base directory.
      *
      * @parameter
      */

File: its/core-it-support/core-it-plugins/maven-it-plugin-core-stubs/maven-ear-plugin/src/main/java/org/apache/maven/plugin/coreit/GenerateApplicationXmlMojo.java
Patch:
@@ -50,7 +50,7 @@ public class GenerateApplicationXmlMojo
     private MavenProject project;
 
     /**
-     * The path to the output file, relative to the project base directory directory.
+     * The path to the output file, relative to the project base directory.
      *
      * @parameter
      */

File: its/core-it-support/core-it-plugins/maven-it-plugin-core-stubs/maven-ejb-plugin/src/main/java/org/apache/maven/plugin/coreit/EjbMojo.java
Patch:
@@ -50,7 +50,7 @@ public class EjbMojo
     private MavenProject project;
 
     /**
-     * The path to the output file, relative to the project base directory directory.
+     * The path to the output file, relative to the project base directory.
      *
      * @parameter
      */

File: its/core-it-support/core-it-plugins/maven-it-plugin-core-stubs/maven-install-plugin/src/main/java/org/apache/maven/plugin/coreit/InstallMojo.java
Patch:
@@ -50,7 +50,7 @@ public class InstallMojo
     private MavenProject project;
 
     /**
-     * The path to the output file, relative to the project base directory directory.
+     * The path to the output file, relative to the project base directory.
      *
      * @parameter
      */

File: its/core-it-support/core-it-plugins/maven-it-plugin-core-stubs/maven-jar-plugin/src/main/java/org/apache/maven/plugin/coreit/JarMojo.java
Patch:
@@ -50,7 +50,7 @@ public class JarMojo
     private MavenProject project;
 
     /**
-     * The path to the output file, relative to the project base directory directory.
+     * The path to the output file, relative to the project base directory.
      *
      * @parameter
      */

File: its/core-it-support/core-it-plugins/maven-it-plugin-core-stubs/maven-javadoc-plugin/src/main/java/org/apache/maven/plugin/coreit/JarMojo.java
Patch:
@@ -50,7 +50,7 @@ public class JarMojo
     private MavenProject project;
 
     /**
-     * The path to the output file, relative to the project base directory directory.
+     * The path to the output file, relative to the project base directory.
      *
      * @parameter
      */

File: its/core-it-support/core-it-plugins/maven-it-plugin-core-stubs/maven-plugin-plugin/src/main/java/org/apache/maven/plugin/coreit/AddPluginArtifactMetadataMojo.java
Patch:
@@ -50,7 +50,7 @@ public class AddPluginArtifactMetadataMojo
     private MavenProject project;
 
     /**
-     * The path to the output file, relative to the project base directory directory.
+     * The path to the output file, relative to the project base directory.
      *
      * @parameter
      */

File: its/core-it-support/core-it-plugins/maven-it-plugin-core-stubs/maven-plugin-plugin/src/main/java/org/apache/maven/plugin/coreit/DescriptorMojo.java
Patch:
@@ -50,7 +50,7 @@ public class DescriptorMojo
     private MavenProject project;
 
     /**
-     * The path to the output file, relative to the project base directory directory.
+     * The path to the output file, relative to the project base directory.
      *
      * @parameter
      */

File: its/core-it-support/core-it-plugins/maven-it-plugin-core-stubs/maven-plugin-plugin/src/main/java/org/apache/maven/plugin/coreit/UpdateRegistryMojo.java
Patch:
@@ -50,7 +50,7 @@ public class UpdateRegistryMojo
     private MavenProject project;
 
     /**
-     * The path to the output file, relative to the project base directory directory.
+     * The path to the output file, relative to the project base directory.
      *
      * @parameter
      */

File: its/core-it-support/core-it-plugins/maven-it-plugin-core-stubs/maven-rar-plugin/src/main/java/org/apache/maven/plugin/coreit/RarMojo.java
Patch:
@@ -50,7 +50,7 @@ public class RarMojo
     private MavenProject project;
 
     /**
-     * The path to the output file, relative to the project base directory directory.
+     * The path to the output file, relative to the project base directory.
      *
      * @parameter
      */

File: its/core-it-support/core-it-plugins/maven-it-plugin-core-stubs/maven-resources-plugin/src/main/java/org/apache/maven/plugin/coreit/ResourcesMojo.java
Patch:
@@ -51,7 +51,7 @@ public class ResourcesMojo
     private MavenProject project;
 
     /**
-     * The path to the output file, relative to the project base directory directory.
+     * The path to the output file, relative to the project base directory.
      *
      * @parameter
      */

File: its/core-it-support/core-it-plugins/maven-it-plugin-core-stubs/maven-resources-plugin/src/main/java/org/apache/maven/plugin/coreit/TestResourcesMojo.java
Patch:
@@ -50,7 +50,7 @@ public class TestResourcesMojo
     private MavenProject project;
 
     /**
-     * The path to the output file, relative to the project base directory directory.
+     * The path to the output file, relative to the project base directory.
      *
      * @parameter
      */

File: its/core-it-support/core-it-plugins/maven-it-plugin-core-stubs/maven-site-plugin/src/main/java/org/apache/maven/plugin/coreit/AttachDescriptorMojo.java
Patch:
@@ -50,7 +50,7 @@ public class AttachDescriptorMojo
     private MavenProject project;
 
     /**
-     * The path to the output file, relative to the project base directory directory.
+     * The path to the output file, relative to the project base directory.
      *
      * @parameter
      */

File: its/core-it-support/core-it-plugins/maven-it-plugin-core-stubs/maven-site-plugin/src/main/java/org/apache/maven/plugin/coreit/DeployMojo.java
Patch:
@@ -50,7 +50,7 @@ public class DeployMojo
     private MavenProject project;
 
     /**
-     * The path to the output file, relative to the project base directory directory.
+     * The path to the output file, relative to the project base directory.
      *
      * @parameter
      */

File: its/core-it-support/core-it-plugins/maven-it-plugin-core-stubs/maven-site-plugin/src/main/java/org/apache/maven/plugin/coreit/SiteMojo.java
Patch:
@@ -50,7 +50,7 @@ public class SiteMojo
     private MavenProject project;
 
     /**
-     * The path to the output file, relative to the project base directory directory.
+     * The path to the output file, relative to the project base directory.
      *
      * @parameter
      */

File: its/core-it-support/core-it-plugins/maven-it-plugin-core-stubs/maven-source-plugin/src/main/java/org/apache/maven/plugin/coreit/JarMojo.java
Patch:
@@ -50,7 +50,7 @@ public class JarMojo
     private MavenProject project;
 
     /**
-     * The path to the output file, relative to the project base directory directory.
+     * The path to the output file, relative to the project base directory.
      *
      * @parameter
      */

File: its/core-it-support/core-it-plugins/maven-it-plugin-core-stubs/maven-surefire-plugin/src/main/java/org/apache/maven/plugin/coreit/TestMojo.java
Patch:
@@ -50,7 +50,7 @@ public class TestMojo
     private MavenProject project;
 
     /**
-     * The path to the output file, relative to the project base directory directory.
+     * The path to the output file, relative to the project base directory.
      *
      * @parameter
      */

File: its/core-it-support/core-it-plugins/maven-it-plugin-core-stubs/maven-war-plugin/src/main/java/org/apache/maven/plugin/coreit/WarMojo.java
Patch:
@@ -50,7 +50,7 @@ public class WarMojo
     private MavenProject project;
 
     /**
-     * The path to the output file, relative to the project base directory directory.
+     * The path to the output file, relative to the project base directory.
      *
      * @parameter
      */

File: its/core-it-support/core-it-plugins/maven-it-plugin-expression/src/main/java/org/apache/maven/plugin/coreit/EvalMojo.java
Patch:
@@ -72,7 +72,7 @@ public class EvalMojo
 
     /**
      * The path to the output file for the properties with the expression values. For each expression given by the
-     * parameter {@link #expressions} an similar named properties key will be used to save the expression value. If an
+     * parameter {@link #expressions}, a similar named properties key will be used to save the expression value. If an
      * expression evaluated to <code>null</code>, there will be no corresponding key in the properties file.
      *
      * @parameter property="expression.outputFile"

File: its/core-it-support/core-it-plugins/maven-it-plugin-packaging/src/main/java/org/apache/maven/plugin/coreit/AppendMojo.java
Patch:
@@ -28,7 +28,7 @@
 import java.io.OutputStreamWriter;
 
 /**
- * Appends a message to an UTF-8 encoded plain text file.
+ * Appends a message to a UTF-8 encoded plain text file.
  *
  * @author Benjamin Bentmann
  * @goal append

File: its/core-it-support/core-it-plugins/maven-it-plugin-plugin-dependency/src/main/java/org/apache/maven/plugin/coreit/DerivedItMojo.java
Patch:
@@ -33,7 +33,7 @@ public class DerivedItMojo
 {
     /**
      * The path to the output file for the properties with the expression values. For each expression given by the
-     * parameter {@link #expressions} an similar named properties key will be used to save the expression value. If an
+     * parameter {@link #expressions}, a similar named properties key will be used to save the expression value. If an
      * expression evaluated to <code>null</code>, there will be no corresponding key in the properties file.
      *
      * @parameter

File: its/core-it-support/core-it-plugins/maven-it-plugin-uses-wagon/src/main/java/org/apache/maven/plugin/coreit/DumpVersionMojo.java
Patch:
@@ -51,7 +51,7 @@ public class DumpVersionMojo
     private File basedir;
 
     /**
-     * The Wagon manager used to lookup the wagon of interest.
+     * The Wagon manager used to look up the wagon of interest.
      *
      * @component
      */

File: its/core-it-support/core-it-plugins/maven-it-plugin-uses-wagon/src/main/java/org/apache/maven/plugin/coreit/LookupWagonMojo.java
Patch:
@@ -95,7 +95,7 @@ public void execute()
                 }
                 catch ( Exception e )
                 {
-                    getLog().warn( "[MAVEN-CORE-IT-LOG] Failed to lookp up wagon for URL " + url, e );
+                    getLog().warn( "[MAVEN-CORE-IT-LOG] Failed to look up wagon for URL " + url, e );
                 }
             }
         }

File: maven-compat/src/main/java/org/apache/maven/repository/MetadataResolutionRequest.java
Patch:
@@ -126,9 +126,9 @@ public List<ArtifactRepository> getRemoteRepositories()
      * @deprecated instead use {@link #setRemoteRepositories(List)}
      */
     @Deprecated
-    public MetadataResolutionRequest setRemoteRepostories( List<ArtifactRepository> remoteRepostories )
+    public MetadataResolutionRequest setRemoteRepostories( List<ArtifactRepository> remoteRepositories )
     {
-        this.remoteRepositories = remoteRepostories;
+        this.remoteRepositories = remoteRepositories;
 
         return this;
     }

File: maven-compat/src/test/java/org/apache/maven/repository/legacy/DefaultUpdateCheckManagerTest.java
Patch:
@@ -240,14 +240,14 @@ public void testArtifactTouchFileName() throws Exception
     {
         ArtifactRepository localRepository = localRepository();
 
-        Artifact a = artifactFactory.createArtifactWithClassifier( "groupdId", "a", "0.0.1-SNAPSHOT", "jar", null );
+        Artifact a = artifactFactory.createArtifactWithClassifier( "groupId", "a", "0.0.1-SNAPSHOT", "jar", null );
         File file = new File( localRepository.getBasedir(),
                               localRepository.pathOf( a ) );
         a.setFile( file );
 
         assertEquals( "a-0.0.1-SNAPSHOT.jar.lastUpdated", updateCheckManager.getTouchfile( a ).getName() );
 
-        a = artifactFactory.createArtifactWithClassifier( "groupdId", "a", "0.0.1-SNAPSHOT", "jar", "classifier" );
+        a = artifactFactory.createArtifactWithClassifier( "groupId", "a", "0.0.1-SNAPSHOT", "jar", "classifier" );
         file = new File( localRepository.getBasedir(),
                               localRepository.pathOf( a ) );
         a.setFile( file );

File: maven-core/src/main/java/org/apache/maven/DefaultProjectDependenciesResolver.java
Patch:
@@ -93,11 +93,11 @@ public Set<Artifact> resolve( Collection<? extends MavenProject> projects, Colle
 
     public Set<Artifact> resolve( MavenProject project, Collection<String> scopesToCollect,
                                   Collection<String> scopesToResolve, MavenSession session,
-                                  Set<Artifact> ignoreableArtifacts )
+                                  Set<Artifact> ignorableArtifacts )
         throws ArtifactResolutionException, ArtifactNotFoundException
     {
         return resolveImpl( Collections.singleton( project ), scopesToCollect, scopesToResolve, session,
-                            getIgnorableArtifacts( ignoreableArtifacts ) );
+                            getIgnorableArtifacts( ignorableArtifacts ) );
     }
 
 

File: maven-core/src/main/java/org/apache/maven/plugin/internal/MavenPluginValidator.java
Patch:
@@ -29,6 +29,6 @@
 interface MavenPluginValidator
 {
 
-    void validate( Artifact pluginArtfiact, PluginDescriptor pluginDescriptor, List<String> errors );
+    void validate( Artifact pluginArtifact, PluginDescriptor pluginDescriptor, List<String> errors );
 
 }

File: maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java
Patch:
@@ -592,7 +592,7 @@ private ProjectRelocation retrieveRelocatedProject( Artifact artifact, MetadataR
                     {
                         message = "Missing POM for " + artifact.getId();
                     }
-                    else if ( isNonTransferrablePom( e ) )
+                    else if ( isNonTransferablePom( e ) )
                     {
                         throw new ArtifactMetadataRetrievalException( "Failed to retrieve POM for "
                             + artifact.getId() + ": " + e.getCause().getMessage(), e.getCause(),
@@ -736,7 +736,7 @@ private boolean isMissingPom( Exception e )
             && e.getCause().getCause() instanceof ArtifactNotFoundException;
     }
 
-    private boolean isNonTransferrablePom( Exception e )
+    private boolean isNonTransferablePom( Exception e )
     {
         if ( e.getCause() instanceof ArtifactResolutionException )
         {

File: maven-core/src/test/java/org/apache/maven/lifecycle/LifecycleExecutorTest.java
Patch:
@@ -346,7 +346,7 @@ public void testPluginPrefixRetrieval()
     // Prefixes
 
     @Test
-    public void testFindingPluginPrefixforCleanClean()
+    public void testFindingPluginPrefixForCleanClean()
         throws Exception
     {
         File pom = getProject( "project-basic" );

File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/PhaseRecorderTest.java
Patch:
@@ -34,7 +34,7 @@ public class PhaseRecorderTest
     @Test
     public void testObserveExecution() throws Exception {
         PhaseRecorder phaseRecorder = new PhaseRecorder( ProjectDependencyGraphStub.A);
-        MavenExecutionPlan plan = LifecycleExecutionPlanCalculatorStub.getProjectAExceutionPlan();
+        MavenExecutionPlan plan = LifecycleExecutionPlanCalculatorStub.getProjectAExecutionPlan();
         final List<MojoExecution> executions = plan.getMojoExecutions();
 
         final MojoExecution mojoExecution1 = executions.get( 0 );

File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/builder/BuilderCommonTest.java
Patch:
@@ -52,7 +52,7 @@ public void testResolveBuildPlan()
         final MavenExecutionPlan plan =
             builderCommon.resolveBuildPlan( session1, ProjectDependencyGraphStub.A, taskSegment1,
                     new HashSet<>() );
-        assertEquals( LifecycleExecutionPlanCalculatorStub.getProjectAExceutionPlan().size(), plan.size() );
+        assertEquals( LifecycleExecutionPlanCalculatorStub.getProjectAExecutionPlan().size(), plan.size() );
     }
 
     @Test

File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifecycleExecutionPlanCalculatorStub.java
Patch:
@@ -137,7 +137,7 @@ public MavenExecutionPlan calculateExecutionPlan( MavenSession session, MavenPro
     {
         if ( project.equals( ProjectDependencyGraphStub.A ) )
         {
-            return getProjectAExceutionPlan();
+            return getProjectAExecutionPlan();
         }
         if ( project.equals( ProjectDependencyGraphStub.B ) )
         {
@@ -165,7 +165,7 @@ public void setupMojoExecution( MavenSession session, MavenProject project, Mojo
     {
     }
 
-    public static MavenExecutionPlan getProjectAExceutionPlan()
+    public static MavenExecutionPlan getProjectAExecutionPlan()
         throws PluginNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException,
         PluginDescriptorParsingException, MojoNotFoundException, InvalidPluginDescriptorException,
         NoPluginFoundForPrefixException, LifecycleNotFoundException, PluginVersionResolutionException

File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/ProjectDependenciesResolverStub.java
Patch:
@@ -62,7 +62,7 @@ public Set<Artifact> resolve( Collection<? extends MavenProject> projects, Colle
 
     public Set<Artifact> resolve( MavenProject project, Collection<String> scopesToCollect,
                                   Collection<String> scopesToResolve, MavenSession session,
-                                  Set<Artifact> ignoreableArtifacts )
+                                  Set<Artifact> ignorableArtifacts )
         throws ArtifactResolutionException, ArtifactNotFoundException
     {
         return new HashSet<>();

File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/ProjectDependencyGraphStubTest.java
Patch:
@@ -41,23 +41,23 @@ public void testADependencies()
     }
 
     @Test
-    public void testBDepenencies()
+    public void testBDependencies()
     {
         final List<MavenProject> bProjects = stub.getUpstreamProjects( ProjectDependencyGraphStub.B, false );
         assertEquals( 1, bProjects.size() );
         assertTrue( bProjects.contains( ProjectDependencyGraphStub.A ) );
     }
 
     @Test
-    public void testCDepenencies()
+    public void testCDependencies()
     {
         final List<MavenProject> cProjects = stub.getUpstreamProjects( ProjectDependencyGraphStub.C, false );
         assertEquals( 1, cProjects.size() );
         assertTrue( cProjects.contains( ProjectDependencyGraphStub.A ) );
     }
 
     @Test
-    public void testXDepenencies()
+    public void testXDependencies()
     {
         final List<MavenProject> cProjects = stub.getUpstreamProjects( ProjectDependencyGraphStub.X, false );
         assertEquals( 2, cProjects.size() );

File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -404,10 +404,10 @@ void cli( CliRequest cliRequest )
                 }
 
                 mavenConfig = cliManager.parse( args.toArray( new String[0] ) );
-                List<?> unrecongized = mavenConfig.getArgList();
-                if ( !unrecongized.isEmpty() )
+                List<?> unrecognized = mavenConfig.getArgList();
+                if ( !unrecognized.isEmpty() )
                 {
-                    throw new ParseException( "Unrecognized maven.config entries: " + unrecongized );
+                    throw new ParseException( "Unrecognized maven.config entries: " + unrecognized );
                 }
             }
         }

File: maven-embedder/src/test/java/org/apache/maven/cli/MavenCliTest.java
Patch:
@@ -424,9 +424,9 @@ protected void customizeContainer(PlexusContainer container) {
         customizedMavenCli.container(cliRequest);
         customizedMavenCli.toolchains(cliRequest);
 
-        InOrder orderdEventSpyDispatcherMock = inOrder(eventSpyDispatcherMock);
-        orderdEventSpyDispatcherMock.verify(eventSpyDispatcherMock, times(1)).onEvent(any(ToolchainsBuildingRequest.class));
-        orderdEventSpyDispatcherMock.verify(eventSpyDispatcherMock, times(1)).onEvent(any(ToolchainsBuildingResult.class));
+        InOrder orderedEventSpyDispatcherMock = inOrder(eventSpyDispatcherMock);
+        orderedEventSpyDispatcherMock.verify(eventSpyDispatcherMock, times(1)).onEvent(any(ToolchainsBuildingRequest.class));
+        orderedEventSpyDispatcherMock.verify(eventSpyDispatcherMock, times(1)).onEvent(any(ToolchainsBuildingResult.class));
     }
 
     @Test

File: maven-model-builder/src/test/java/org/apache/maven/model/building/FileModelSourceTest.java
Patch:
@@ -63,10 +63,10 @@ public void testWindowsPaths()
         String absolutePath = upperCaseFile.getAbsolutePath();
         File lowerCaseFile = new File( absolutePath.toLowerCase() );
 
-        FileModelSource upperCaseFileSouce = new FileModelSource( upperCaseFile );
-        FileModelSource lowerCaseFileSouce = new FileModelSource( lowerCaseFile );
+        FileModelSource upperCaseFileSource = new FileModelSource( upperCaseFile );
+        FileModelSource lowerCaseFileSource = new FileModelSource( lowerCaseFile );
 
-        assertTrue( upperCaseFileSouce.equals( lowerCaseFileSouce ) );
+        assertTrue( upperCaseFileSource.equals( lowerCaseFileSource ) );
     }
 
     private File createTempFile( String name ) throws IOException

File: maven-artifact/src/main/java/org/apache/maven/artifact/InvalidArtifactRTException.java
Patch:
@@ -21,7 +21,7 @@
 
 /**
  * Exception thrown when the identity of an artifact can not be established,
- * eg. one of groupId, artifactId, version or type is null.
+ * e.g. one of groupId, artifactId, version or type is null.
  */
 public class InvalidArtifactRTException
     extends RuntimeException

File: maven-artifact/src/main/java/org/apache/maven/artifact/repository/Authentication.java
Patch:
@@ -36,7 +36,7 @@ public Authentication( String userName, String password )
     }
 
     /**
-     * Username used to login to the host
+     * Username used to log in to the host
      */
     private String username;
 

File: maven-artifact/src/main/java/org/apache/maven/artifact/resolver/MultipleArtifactsNotFoundException.java
Patch:
@@ -52,7 +52,7 @@ public MultipleArtifactsNotFoundException( Artifact originatingArtifact,
     }
 
     /**
-     * Create an instance of the exception with allrequired information.
+     * Create an instance of the exception with all required information.
      *
      * @param originatingArtifact the artifact that was being resolved
      * @param resolvedArtifacts   artifacts that could be resolved

File: maven-artifact/src/main/java/org/apache/maven/repository/Proxy.java
Patch:
@@ -91,7 +91,7 @@ public void setHost( String host )
     }
 
     /**
-     * Get user's password used to login to proxy server.
+     * Get user's password used to log in to proxy server.
      *
      * @return user's password at proxy host
      */
@@ -103,7 +103,7 @@ public String getPassword()
     /**
      * Set the user's password for the proxy server.
      *
-     * @param password password to use to login to a proxy server
+     * @param password password to use to log in to a proxy server
      */
     public void setPassword( String password )
     {

File: maven-compat/src/main/java/org/apache/maven/artifact/repository/DefaultArtifactRepository.java
Patch:
@@ -31,7 +31,7 @@
 
 /**
  * This class is an abstraction of the location from/to resources can be
- * transfered.
+ * transferred.
  *
  * @author <a href="michal.maczka@dimatics.com">Michal Maczka </a>
  */

File: maven-compat/src/main/java/org/apache/maven/project/ProjectUtils.java
Patch:
@@ -34,7 +34,7 @@
 import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
 import org.eclipse.aether.RepositorySystemSession;
 
-// This class needs to stick around because it was exposed the the remote resources plugin started using it instead of
+// This class needs to stick around because it was exposed the remote resources plugin started using it instead of
 // getting the repositories from the project.
 
 /**

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/DefaultWagonManager.java
Patch:
@@ -633,7 +633,7 @@ public void putRemoteFile( ArtifactRepository repository, File source, String re
             // We do this in here so we can checksum the artifact metadata too, otherwise it could be metadata itself
             for ( String extension : checksums.keySet() )
             {
-                // TODO shouldn't need a file intermediatary - improve wagon to take a stream
+                // TODO shouldn't need a file intermediary - improve wagon to take a stream
                 File temp = File.createTempFile( "maven-artifact", null );
                 temp.deleteOnExit();
                 FileUtils.fileWrite( temp.getAbsolutePath(), "UTF-8", sums.get( extension ) );

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java
Patch:
@@ -299,7 +299,7 @@ else if ( url.startsWith( "file:" ) && !url.startsWith( "file://" ) )
         // So now we have an url of the form file://<path>
 
         // We want to eliminate any relative path nonsense and lock down the path so we
-        // need to fully resolve it before any sub-modules use the path. This can happen
+        // need to fully resolve it before any submodules use the path. This can happen
         // when you are using a custom settings.xml that contains a relative path entry
         // for the local repository setting.
 

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/DefaultLegacyArtifactCollector.java
Patch:
@@ -301,7 +301,7 @@ private void recurse( ArtifactResolutionResult result, ResolutionNode node,
                                 Artifact resetArtifact = resetNodes[j].getArtifact();
 
                                 // MNG-2123: if the previous node was not a range, then it wouldn't have any available
-                                // versions. We just clobbered the selected version above. (why? i have no idea.)
+                                // versions. We just clobbered the selected version above. (why? I have no idea.)
                                 // So since we are here and this is ranges we must go figure out the version (for a
                                 // third time...)
                                 if ( resetArtifact.getVersion() == null && resetArtifact.getVersionRange() != null )

File: maven-compat/src/main/java/org/apache/maven/repository/metadata/ArtifactMetadata.java
Patch:
@@ -42,7 +42,7 @@ public class ArtifactMetadata
     protected String classifier;
 
     /**
-     * explanation: why this MD was chosen over it's siblings
+     * explanation: why this MD was chosen over its siblings
      * in the resulting structure (classpath for now)
      */
     protected String why;

File: maven-compat/src/main/java/org/apache/maven/repository/metadata/ClasspathTransformation.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.maven.artifact.ArtifactScopeEnum;
 
 /**
- * Helper class to conver an Md Graph into some form of a classpath
+ * Helper class to convert a metadata Graph into some form of a classpath
  *
  * @author <a href="oleg@codehaus.org">Oleg Gusakov</a>
  *

File: maven-compat/src/main/java/org/apache/maven/repository/metadata/DefaultGraphConflictResolver.java
Patch:
@@ -100,7 +100,7 @@ public MetadataGraph resolveConflicts( MetadataGraph graph, ArtifactScopeEnum sc
                 final MetadataGraphEdge edge = cleanEdges( v, ins, requestedScope );
 
                 if ( edge == null )
-                { // no edges - don't need this vertex any more
+                { // no edges - don't need this vertex anymore
                     if ( entry.equals( v ) )
                     { // unless it's an entry point.
                         // currently processing the entry point - it should not have any entry incident edges

File: maven-compat/src/main/java/org/apache/maven/repository/metadata/MetadataResolutionResult.java
Patch:
@@ -34,7 +34,7 @@ public class MetadataResolutionResult
     MetadataTreeNode treeRoot;
 
     /**
-     * these components are are initialized on demand by
+     * these components are initialized on demand by
      * explicit call of the initTreeProcessing()
      */
     ClasspathTransformation classpathTransformation;

File: maven-compat/src/test/java/org/apache/maven/artifact/resolver/TestFileWagon.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.maven.wagon.resource.Resource;
 
 /**
- * Wagon used for test cases that annotates some methods. Note that this is not a thread-safe implementation.
+ * Wagon used for test cases that annotate some methods. Note that this is not a thread-safe implementation.
  */
 public class TestFileWagon
     extends FileWagon

File: maven-compat/src/test/java/org/apache/maven/project/inheritance/t00/ProjectInheritanceTest.java
Patch:
@@ -27,7 +27,7 @@
 
 /**
  * A test which demonstrates maven's recursive inheritance where
- * a distinct value is taken from each parent contributing to the
+ * a distinct value is taken from each parent contributing to
  * the final model of the project being assembled. There is no
  * overriding going on amongst the models being used in this test:
  * each model in the lineage is providing a value that is not present

File: maven-compat/src/test/java/org/apache/maven/project/inheritance/t02/ProjectInheritanceTest.java
Patch:
@@ -37,7 +37,7 @@
 
 /**
  * A test which demonstrates maven's recursive inheritance where
- * a distinct value is taken from each parent contributing to the
+ * a distinct value is taken from each parent contributing to
  * the final model of the project being assembled. There is no
  * overriding going on amongst the models being used in this test:
  * each model in the lineage is providing a value that is not present

File: maven-compat/src/test/java/org/apache/maven/project/inheritance/t03/ProjectInheritanceTest.java
Patch:
@@ -29,7 +29,7 @@
 
 /**
  * A test which demonstrates maven's recursive inheritance where
- * a distinct value is taken from each parent contributing to the
+ * a distinct value is taken from each parent contributing to
  * the final model of the project being assembled. There is no
  * overriding going on amongst the models being used in this test:
  * each model in the lineage is providing a value that is not present

File: maven-core/src/main/java/org/apache/maven/artifact/repository/metadata/io/MetadataParseException.java
Patch:
@@ -22,7 +22,7 @@
 import java.io.IOException;
 
 /**
- * Signals a failure to parse the metadata due to invalid syntax (e.g. non-wellformed XML or unknown elements).
+ * Signals a failure to parse the metadata due to invalid syntax (e.g. non well formed XML or unknown elements).
  *
  * @author Benjamin Bentmann
  */

File: maven-core/src/main/java/org/apache/maven/configuration/BeanConfigurationRequest.java
Patch:
@@ -63,7 +63,7 @@ public interface BeanConfigurationRequest
      * Sets the configuration to unmarshal into the bean. The configuration should be taken from
      * {@link org.apache.maven.model.ConfigurationContainer#getConfiguration()} or a similar source.
      * If {@code element} is not {@code null}, child configuration element with the specified name will
-     * be unmarshaled.
+     * be unmarshalled.
      *
      * @param configuration The configuration to unmarshal, may be {@code null}.
      * @param element Configuration element name to unmarshal or {@code null} to unmarshal entire configuration.

File: maven-core/src/main/java/org/apache/maven/eventspy/EventSpy.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * A core extension to monitor Maven's execution. Typically, such an extension gets loaded into Maven by specifying the
- * system property {@code maven.ext.class.path} on the command line. As soon as dependency injection is setup, Maven
+ * system property {@code maven.ext.class.path} on the command line. As soon as dependency injection is set up, Maven
  * looks up all implementers of this interface and calls their {@link #init(Context)} method. <em>Note:</em>
  * Implementors are strongly advised to inherit from {@link AbstractEventSpy} instead of directly implementing this
  * interface.

File: maven-core/src/main/java/org/apache/maven/eventspy/internal/EventSpyDispatcher.java
Patch:
@@ -33,7 +33,7 @@
 import org.slf4j.LoggerFactory;
 
 /**
- * Dispatches callbacks to all registered eventspies.
+ * Dispatches callbacks to all registered EventSpies.
  * @since 3.0.2
  */
 @Named

File: maven-core/src/main/java/org/apache/maven/eventspy/internal/EventSpyExecutionListener.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.maven.execution.ExecutionListener;
 
 /**
- * Forwards execution events to eventspies.
+ * Forwards execution events to EventSpies.
  * @since 3.0.2
  */
 class EventSpyExecutionListener

File: maven-core/src/main/java/org/apache/maven/eventspy/internal/EventSpyRepositoryListener.java
Patch:
@@ -24,7 +24,7 @@
 import org.eclipse.aether.RepositoryListener;
 
 /**
- * Forwards repository events to eventspies.
+ * Forwards repository events to EventSpies.
  * @since 3.0.2
  */
 class EventSpyRepositoryListener

File: maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java
Patch:
@@ -85,7 +85,7 @@ public class DefaultMavenExecutionRequest
 
     // ----------------------------------------------------------------------------
     // We need to allow per execution user and global settings as the embedder
-    // might be running in a mode where its executing many threads with totally
+    // might be running in a mode where it's executing many threads with totally
     // different settings.
     // ----------------------------------------------------------------------------
 

File: maven-core/src/main/java/org/apache/maven/execution/ProjectDependencyGraph.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.maven.project.MavenProject;
 
 /**
- * Describes the inter-dependencies between projects in the reactor.
+ * Describes the interdependencies between projects in the reactor.
  *
  * @author Benjamin Bentmann
  * @since 3.0-alpha
@@ -43,7 +43,7 @@ public interface ProjectDependencyGraph
 
     /**
      * Gets all projects in their intended build order, i.e. after topologically sorting the projects according to their
-     * inter-dependencies.
+     * interdependencies.
      *
      * @return The projects in the build order, never {@code null}.
      */

File: maven-core/src/main/java/org/apache/maven/graph/DefaultProjectDependencyGraph.java
Patch:
@@ -38,7 +38,7 @@
 import org.codehaus.plexus.util.dag.CycleDetectedException;
 
 /**
- * Describes the inter-dependencies between projects in the reactor.
+ * Describes the interdependencies between projects in the reactor.
  *
  * @author Benjamin Bentmann
  */

File: maven-core/src/main/java/org/apache/maven/lifecycle/LifecycleExecutor.java
Patch:
@@ -53,7 +53,7 @@ public interface LifecycleExecutor
     // by the POM builder because they will have to be defined in plugin management. Once this is setComplete then it
     // can be passed back so that the default configuration information can be populated.
     //
-    // We need to know the specific version so that we can lookup the right version of the plugin descriptor
+    // We need to know the specific version so that we can look up the right version of the plugin descriptor
     // which tells us what the default configuration is.
     //
 

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecycleMappingDelegate.java
Patch:
@@ -115,7 +115,7 @@ public Map<String, List<MojoExecution>> calculateLifecycleMappings( MavenSession
                         }
                     }
                 }
-                // if not then i need to grab the mojo descriptor and look at the phase that is specified
+                // if not then I need to grab the mojo descriptor and look at the phase that is specified
                 else
                 {
                     for ( String goal : execution.getGoals() )

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleDependencyResolver.java
Patch:
@@ -165,7 +165,7 @@ public void resolveProjectDependencies( MavenProject project, Collection<String>
             for ( Artifact artifact : resolvedArtifacts )
             {
                 /**
-                 * MNG-6300: resolvedArtifacts can be cache result; this ensures reactor files are always up to date
+                 * MNG-6300: resolvedArtifacts can be cache result; this ensures reactor files are always up-to-date
                  * During lifecycle the Artifact.getFile() can change from target/classes to the actual jar.
                  * This clearly shows that target/classes should not be abused as artifactFile just for the classpath
                  */

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/ProjectBuildList.java
Patch:
@@ -55,7 +55,7 @@ public ProjectBuildList( List<ProjectSegment> items )
     // TODO Optimize; or maybe just rewrite the whole way aggregating mojos are being run.
     /**
      * Returns aProjectBuildList that contains only items for the specified taskSegment
-     * @param taskSegment the requested tasksegment
+     * @param taskSegment the requested task segment
      * @return a project build list for the supplied task segment
      */
     public ProjectBuildList getByTaskSegment( TaskSegment taskSegment )

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/ProjectSegment.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.List;
 
 /**
- * A build context that matches a mavenproject to a given tasksegment, and the session to be used.
+ * A build context that matches a Maven project to a given task segment, and the session to be used.
  * <p>
  * A note to the reader;
  * </p>

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/Builder.java
Patch:
@@ -39,7 +39,7 @@
 public interface Builder
 {
     //
-    // Be nice to whittle this down to Session, maybe add task segments to the session. The session really is the
+    // Be nice to whittle this down to Session, maybe add task segments to the session. The session really is
     // the place to store reactor related information.
     //
     void build( MavenSession session, ReactorContext reactorContext, ProjectBuildList projectBuilds,

File: maven-core/src/main/java/org/apache/maven/plugin/MavenPluginManager.java
Patch:
@@ -105,7 +105,7 @@ ExtensionRealmCache.CacheRecord setupExtensionsRealm( MavenProject project, Plug
     /**
      * Looks up the mojo for the specified mojo execution and populates its parameters from the configuration given by
      * the mojo execution. The mojo/plugin descriptor associated with the mojo execution provides the class realm to
-     * lookup the mojo from. <strong>Warning:</strong> The returned mojo instance must be released via
+     * look up the mojo from. <strong>Warning:</strong> The returned mojo instance must be released via
      * {@link #releaseMojo(Object, MojoExecution)} when the mojo is no longer needed to free any resources allocated for
      * it.
      *

File: maven-core/src/main/java/org/apache/maven/plugin/PluginContainerException.java
Patch:
@@ -31,7 +31,7 @@
  * to some deeper problem with Plexus. Context information includes the groupId,
  * artifactId, and version for the plugin; at times, the goal name for which
  * execution failed; a message detailing the problem; the ClassRealm used to
- * lookup the plugin; and the Plexus exception that caused this error.
+ * look up the plugin; and the Plexus exception that caused this error.
  *
  * @author jdcasey
  *

File: maven-core/src/main/java/org/apache/maven/project/ProjectBuilder.java
Patch:
@@ -70,7 +70,7 @@ ProjectBuildingResult build( Artifact projectArtifact, boolean allowStubModel, P
     /**
      * Builds a project descriptor for the specified model source.
      *
-     * @param modelSource The source of the model to built the project descriptor from, must not be {@code null}.
+     * @param modelSource The source of the model to build the project descriptor from, must not be {@code null}.
      * @param request The project building request that holds further parameters, must not be {@code null}.
      * @return The result of the project building, never {@code null}.
      * @throws ProjectBuildingException If the project descriptor could not be successfully built.
@@ -84,7 +84,7 @@ ProjectBuildingResult build( ModelSource modelSource, ProjectBuildingRequest req
      * Builds the projects for the specified POM files and optionally their children.
      *
      * @param pomFiles The POM files to build, must not be {@code null}.
-     * @param recursive {@code true} to recursively build sub modules referenced by the POM files, {@code false} to
+     * @param recursive {@code true} to recursively build submodules referenced by the POM files, {@code false} to
      *            build only the specified POM files.
      * @param request The project builder configuration that provides further parameters, must not be {@code null}.
      * @return The results of the project builder where each result corresponds to one project that was built, never

File: maven-core/src/main/java/org/apache/maven/project/ProjectSorter.java
Patch:
@@ -63,13 +63,13 @@ public class ProjectSorter
     // MAVENAPI FIXME: the DAG used is NOT only used to represent the dependency relation,
     // but also for <parent>, <build><plugin>, <reports>. We need multiple DAG's
     // since a DAG can only handle 1 type of relationship properly.
-    // Usecase:  This is detected as a cycle:
+    // Use case:  This is detected as a cycle:
     // org.apache.maven:maven-plugin-api                -(PARENT)->
     // org.apache.maven:maven                           -(inherited REPORTING)->
     // org.apache.maven.plugins:maven-checkstyle-plugin -(DEPENDENCY)->
     // org.apache.maven:maven-plugin-api
     // In this case, both the verify and the report goals are called
-    // in a different lifecycle. Though the compiler-plugin has a valid usecase, although
+    // in a different lifecycle. Though the compiler-plugin has a valid use case, although
     // that seems to work fine. We need to take versions and lifecycle into account.
     public ProjectSorter( Collection<MavenProject> projects )
         throws CycleDetectedException, DuplicateProjectException

File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/builder/multithreaded/ConcurrencyDependencyGraphTest.java
Patch:
@@ -42,7 +42,7 @@ public void testGraph() throws Exception {
         assertEquals( 6, graph.getNumberOfBuilds() );
 
         List<MavenProject> rootSchedulableBuilds = graph.getRootSchedulableBuilds();
-        // only Project.A has no dependences
+        // only Project.A has no dependencies
         assertEquals( 1, rootSchedulableBuilds.size() );
         assertEquals( ProjectDependencyGraphStub.A, rootSchedulableBuilds.iterator().next() );
         // double check A deps

File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/ProjectDependencyGraphStub.java
Patch:
@@ -41,7 +41,7 @@
 import java.util.List;
 
 /**
- * A stub dependency graph that is custom made for testing concurrent build graph evaluations.
+ * A stub dependency graph that is custom-made for testing concurrent build graph evaluations.
  * <p>
  * Implements a graph as follows:
  * A has no dependencies

File: maven-core/src/test/java/org/apache/maven/project/PomConstructionTest.java
Patch:
@@ -111,7 +111,7 @@ public void testProfileModules()
     }
 
     /**
-     * Will throw exception if doesn't find parent(s) in build
+     * Will throw an exception if it doesn't find parent(s) in build
      *
      * @throws Exception in case of issue
      */

File: maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java
Patch:
@@ -83,7 +83,7 @@ public static String showVersionMinimal()
     }
 
     /**
-     * Create a human readable string containing the Maven version, buildnumber, and time of build
+     * Create a human-readable string containing the Maven version, buildnumber, and time of build
      *
      * @param buildProperties The build properties
      * @return Readable build info

File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -1220,7 +1220,7 @@ private void configure( CliRequest cliRequest )
         // is always available in the core and likely always will be, but we may have another ConfigurationProcessor
         // present supplied by the user. The rule is that we only allow the execution of one ConfigurationProcessor.
         // If there is more than one then we execute the one supplied by the user, otherwise we execute the
-        // the default SettingsXmlConfigurationProcessor.
+        // default SettingsXmlConfigurationProcessor.
         //
         int userSuppliedConfigurationProcessorCount = configurationProcessors.size() - 1;
 

File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuildingRequest.java
Patch:
@@ -290,7 +290,7 @@ public DefaultModelBuildingRequest setSystemProperties( Properties systemPropert
         {
             this.systemProperties = new Properties();
             synchronized ( systemProperties )
-            { // avoid concurrentmodification if someone else sets/removes an unrelated system property
+            { // avoid concurrent modification if someone else sets/removes an unrelated system property
                 this.systemProperties.putAll( systemProperties );
             }
         }

File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelProcessor.java
Patch:
@@ -42,12 +42,12 @@
  * made this component available under all its interfaces then it could end up being injected
  * into itself leading to a stack overflow.
  *
- * A side-effect of using @Typed is that it translates to explicit bindings in the container.
+ * A side effect of using @Typed is that it translates to explicit bindings in the container.
  * So instead of binding the component under a 'wildcard' key it is now bound with an explicit
  * key. Since this is a default component this will be a plain binding of ModelProcessor to
  * this implementation type, ie. no hint/name.
  *
- * This leads to a second side-effect in that any @Inject request for just ModelProcessor in
+ * This leads to a second side effect in that any @Inject request for just ModelProcessor in
  * the same injector is immediately matched to this explicit binding, which means extensions
  * cannot override this binding. This is because the lookup is always short-circuited in this
  * specific situation (plain @Inject request, and plain explicit binding for the same type.)

File: maven-model-builder/src/main/java/org/apache/maven/model/building/ModelBuildingException.java
Patch:
@@ -44,7 +44,7 @@ public class ModelBuildingException
      *
      * @param model The model that could not be built, may be {@code null}.
      * @param modelId The identifier of the model that could not be built, may be {@code null}.
-     * @param problems The problems that causes this exception, may be {@code null}.
+     * @param problems The problems that cause this exception, may be {@code null}.
      * @deprecated Use {@link #ModelBuildingException(ModelBuildingResult)} instead.
      */
     @Deprecated

File: maven-model-builder/src/main/java/org/apache/maven/model/building/ModelData.java
Patch:
@@ -122,7 +122,7 @@ public String getVersion()
      */
     public String getId()
     {
-        // if source is null, it is the supermodel, which can be accessed via empty string
+        // if source is null, it is the super model, which can be accessed via empty string
         return Objects.toString( source, "" );
     }
 

File: maven-model-builder/src/main/java/org/apache/maven/model/building/ModelProblemCollectorExt.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.List;
 
 /**
- * Extends the ModelproblemCollector by the capacity of returning the collected problems.
+ * Extends the ModelProblemCollector by the capacity of returning the collected problems.
  * @author Milos Kleint
  */
 public interface ModelProblemCollectorExt extends ModelProblemCollector

File: maven-model-builder/src/main/java/org/apache/maven/model/building/ModelSourceTransformer.java
Patch:
@@ -28,7 +28,7 @@
  * The ModelSourceTransformer is a way to transform the local pom while streaming the input.
  *
  * The {@link #transform(XmlPullParser, Path, TransformerContext)} method uses a Path on purpose, to ensure the
- * local pom is the the original source.
+ * local pom is the original source.
  *
  * @author Robert Scholte
  * @author Guillaume Nodet

File: maven-model-builder/src/main/java/org/apache/maven/model/io/ModelParseException.java
Patch:
@@ -22,7 +22,7 @@
 import java.io.IOException;
 
 /**
- * Signals a failure to parse the POM due to invalid syntax (e.g. non-wellformed XML or unknown elements).
+ * Signals a failure to parse the POM due to invalid syntax (e.g. non well formed XML or unknown elements).
  *
  * @author Benjamin Bentmann
  */

File: maven-model-builder/src/main/java/org/apache/maven/model/locator/ModelLocator.java
Patch:
@@ -31,7 +31,7 @@ public interface ModelLocator
 
     /**
      * Locates the POM file within the specified project directory. In case the given project directory does not exist
-     * or does not contain a POM file, the return value indicates the expected path to the POM file. Sub directories of
+     * or does not contain a POM file, the return value indicates the expected path to the POM file. Subdirectories of
      * the project directory will not be considered when locating the POM file. The return value will be an absolute
      * path if the project directory is given as an absolute path.
      *

File: maven-model-builder/src/main/java/org/apache/maven/model/resolution/ModelResolver.java
Patch:
@@ -102,9 +102,9 @@ void addRepository( Repository repository )
     /**
      * Adds a repository to use for subsequent resolution requests. The order in which repositories are added matters,
      * repositories that were added first should also be searched first. When multiple repositories with the same
-     * identifier are added, then the value of the replace argument is determines the behaviour.
+     * identifier are added, then the value of the replace argument determines the behaviour.
      *
-     * If replace is false than any existing repository with the same Id will remain in use. If replace
+     * If replace is false then any existing repository with the same Id will remain in use. If replace
      * is true the new repository replaces the original.
      *
      * @param repository The repository to add to the internal search chain, must not be {@code null}.

File: maven-model-transform/src/test/java/org/apache/maven/model/transform/ParentXMLFilterTest.java
Patch:
@@ -180,7 +180,7 @@ public void testDefaultRelativePath()
     }
 
     /**
-     * An empty relative path means it must downloaded from a repository.
+     * An empty relative path means it must be downloaded from a repository.
      * That implies that the version cannot be solved (if missing, Maven should complain)
      *
      * @throws Exception

File: maven-plugin-api/src/main/java/org/apache/maven/plugin/descriptor/MojoDescriptor.java
Patch:
@@ -94,7 +94,7 @@ public class MojoDescriptor
     private String deprecated;
 
     /**
-     * Flags this Mojo to run it in a multi module way, i.e. aggregate the build with the set of projects listed as
+     * Flags this Mojo to run it in a multi-module way, i.e. aggregate the build with the set of projects listed as
      * modules. By default, no need to aggregate the Maven project and its child modules
      */
     private boolean aggregator = false;
@@ -345,15 +345,15 @@ public boolean requiresOnline()
     }
 
     /**
-     * @return the binded phase name of the Mojo
+     * @return the bound phase name of the Mojo
      */
     public String getPhase()
     {
         return phase;
     }
 
     /**
-     * @param phase the new binded phase name of the Mojo
+     * @param phase the new bound phase name of the Mojo
      */
     public void setPhase( String phase )
     {

File: maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsBuildingRequest.java
Patch:
@@ -117,7 +117,7 @@ public DefaultSettingsBuildingRequest setSystemProperties( Properties systemProp
         {
             this.systemProperties = new Properties();
             synchronized ( systemProperties )
-            { // avoid concurrentmodification if someone else sets/removes an unrelated system property
+            { // avoid concurrent modification if someone else sets/removes an unrelated system property
                 this.systemProperties.putAll( systemProperties );
             }
         }

File: maven-settings-builder/src/main/java/org/apache/maven/settings/building/SettingsBuildingException.java
Patch:
@@ -40,7 +40,7 @@ public class SettingsBuildingException
     /**
      * Creates a new exception with the specified problems.
      *
-     * @param problems The problems that causes this exception, may be {@code null}.
+     * @param problems The problems that cause this exception, may be {@code null}.
      */
     public SettingsBuildingException( List<SettingsProblem> problems )
     {

File: maven-settings-builder/src/main/java/org/apache/maven/settings/io/SettingsParseException.java
Patch:
@@ -22,7 +22,7 @@
 import java.io.IOException;
 
 /**
- * Signals a failure to parse the settings due to invalid syntax (e.g. non-wellformed XML or unknown elements).
+ * Signals a failure to parse the settings due to invalid syntax (e.g. non well formed XML or unknown elements).
  *
  * @author Benjamin Bentmann
  */

File: maven-settings/src/main/java/org/apache/maven/settings/RuntimeInfo.java
Patch:
@@ -22,7 +22,7 @@
 import java.io.File;
 
 /**
- * To handle runtime informations like local repository or profiles.
+ * To handle runtime information like local repository or profiles.
  *
  */
 @Deprecated

File: maven-toolchain-builder/src/main/java/org/apache/maven/toolchain/building/ToolchainsBuildingException.java
Patch:
@@ -39,7 +39,7 @@ public class ToolchainsBuildingException
     /**
      * Creates a new exception with the specified problems.
      *
-     * @param problems The problems that causes this exception, must not be {@code null}.
+     * @param problems The problems that cause this exception, must not be {@code null}.
      */
     public ToolchainsBuildingException( List<Problem> problems )
     {

File: maven-toolchain-builder/src/main/java/org/apache/maven/toolchain/io/ToolchainsParseException.java
Patch:
@@ -22,7 +22,7 @@
 import java.io.IOException;
 
 /**
- * Signals a failure to parse the toolchains due to invalid syntax (e.g. non-wellformed XML or unknown elements).
+ * Signals a failure to parse the toolchains due to invalid syntax (e.g. non well formed XML or unknown elements).
  *
  * @author Robert Scholte
  * @since 3.3.0

File: maven-core/src/main/java/org/apache/maven/lifecycle/providers/packaging/PomLifecycleMappingProvider.java
Patch:
@@ -32,10 +32,11 @@ public final class PomLifecycleMappingProvider
     extends AbstractLifecycleMappingProvider
 {
     // START SNIPPET: pom
+    @SuppressWarnings( "checkstyle:linelength" )
     private static final String[] BINDINGS =
     {
-        "install", "org.apache.maven.plugins:maven-install-plugin:3.0.0-M1:install",
-        "deploy",  "org.apache.maven.plugins:maven-deploy-plugin:3.0.0-M1:deploy"
+        "install", "org.apache.maven.plugins:maven-install-plugin:" + INSTALL_PLUGIN_VERSION + ":install",
+        "deploy",  "org.apache.maven.plugins:maven-deploy-plugin:" + DEPLOY_PLUGIN_VERSION + ":deploy"
     };
     // END SNIPPET: pom
     

File: maven-model-transform/src/main/java/org/apache/maven/model/transform/BuildToRawPomXMLFilterFactory.java
Patch:
@@ -53,7 +53,9 @@ public BuildToRawPomXMLFilterFactory( boolean consume )
     public final XmlPullParser get( XmlPullParser orgParser, Path projectFile )
 
     {
-        XmlPullParser parser = orgParser;
+        // Ensure that xs:any elements aren't touched by next filters
+        XmlPullParser parser = orgParser instanceof FastForwardFilter
+                ? orgParser : new FastForwardFilter( orgParser );
 
         if ( getDependencyKeyToVersionMapper() != null )
         {

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng7160ExtensionClassloader.java
Patch:
@@ -38,7 +38,7 @@ public MavenITmng7160ExtensionClassloader()
     public void testVerify() throws IOException, VerificationException
     {
         final File projectDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-7160-extensionclassloader" );
-        
+
         final Verifier extensionVerifier = newVerifier( new File( projectDir, "extension" ).getAbsolutePath() );
         extensionVerifier.executeGoal( "install" );
         extensionVerifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -106,6 +106,7 @@ public static Test suite()
         // Tests that don't run stable and need to be fixed
         // -------------------------------------------------------------------------------------------------------------
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
+        suite.addTestSuite( MavenITmng7487DeadlockTest.class );
         suite.addTestSuite( MavenITmng7470ResolverTransportTest.class );
         suite.addTestSuite( MavenITmng7464ReadOnlyMojoParametersWarningTest.class );
         suite.addTestSuite( MavenITmng7404IgnorePrefixlessExpressionsTest.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng7470ResolverTransportTest.java
Patch:
@@ -58,6 +58,8 @@ protected void tearDown()
     private void performTest( /* nullable */ final String transport, final String logSnippet ) throws Exception
     {
         Verifier verifier = newVerifier( projectDir.getAbsolutePath() );
+        verifier.setForkJvm( true );
+
         Map<String, String> properties = new HashMap<>();
         properties.put( "@port@", Integer.toString( port ) );
         verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", properties );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -106,6 +106,7 @@ public static Test suite()
         // Tests that don't run stable and need to be fixed
         // -------------------------------------------------------------------------------------------------------------
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
+        suite.addTestSuite( MavenITmng7470ResolverTransportTest.class );
         suite.addTestSuite( MavenITmng7464ReadOnlyMojoParametersWarningTest.class );
         suite.addTestSuite( MavenITmng7404IgnorePrefixlessExpressionsTest.class );
         suite.addTestSuite( MavenITmng5222MojoDeprecatedTest.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng7464ReadOnlyMojoParametersWarningTest.java
Patch:
@@ -36,7 +36,7 @@ public class MavenITmng7464ReadOnlyMojoParametersWarningTest extends AbstractMav
 {
     public MavenITmng7464ReadOnlyMojoParametersWarningTest()
     {
-        super( "3.9.0,)" );
+        super( "[3.9.0,)" );
     }
 
     /**

File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringSearchModelInterpolator.java
Patch:
@@ -85,7 +85,7 @@ public Model interpolateModel( Model model, File projectDir, ModelBuildingReques
     void interpolateObject( Object obj, Model model, File projectDir, ModelBuildingRequest config,
                             ModelProblemCollector problems )
     {
-        List<? extends ValueSource> valueSources = createValueSources( model, projectDir, config, problems );
+        List<? extends ValueSource> valueSources = createValueSources( model, projectDir, config );
         List<? extends InterpolationPostProcessor> postProcessors = createPostProcessors( model, projectDir, config );
 
         InnerInterpolator innerInterpolator = createInterpolator( valueSources, postProcessors, problems );

File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringVisitorModelInterpolator.java
Patch:
@@ -107,7 +107,7 @@ interface InnerInterpolator
     public Model interpolateModel( Model model, File projectDir, ModelBuildingRequest config,
                                    ModelProblemCollector problems )
     {
-        List<? extends ValueSource> valueSources = createValueSources( model, projectDir, config, problems );
+        List<? extends ValueSource> valueSources = createValueSources( model, projectDir, config );
         List<? extends InterpolationPostProcessor> postProcessors =
             createPostProcessors( model, projectDir, config );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -106,6 +106,7 @@ public static Test suite()
         // Tests that don't run stable and need to be fixed
         // -------------------------------------------------------------------------------------------------------------
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
+        suite.addTestSuite( MavenITmng7404IgnorePrefixlessExpressionsTest.class );
         suite.addTestSuite( MavenITmng5222MojoDeprecatedTest.class );
         suite.addTestSuite( MavenITmng7390SelectModuleOutsideCwdTest.class );
         suite.addTestSuite( MavenITmng7244IgnorePomPrefixInExpressions.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2124PomInterpolationWithParentValuesTest.java
Patch:
@@ -54,7 +54,7 @@ public void testitMNG2124()
         verifier.resetStreams();
 
         Properties props = verifier.loadProperties( "target/parent.properties" );
-        assertEquals( "parent, child, parent, child", props.getProperty( "project.description" ) );
+        assertEquals( "parent, child", props.getProperty( "project.description" ) );
     }
 
 }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2339BadProjectInterpolationTest.java
Patch:
@@ -25,8 +25,6 @@
 
 /**
  * This is a test set for <a href="https://issues.apache.org/jira/browse/MNG-2339">MNG-2339</a>.
- *
- *
  */
 public class MavenITmng2339BadProjectInterpolationTest
     extends AbstractMavenIntegrationTestCase
@@ -57,6 +55,7 @@ public void testitMNG2339a()
     public void testitMNG2339b()
         throws Exception
     {
+        requiresMavenVersion( "(2.0.8,4.0.0-alpha-1)" );
         File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-2339/b" );
 
         Verifier verifier;

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3831PomInterpolationTest.java
Patch:
@@ -36,7 +36,7 @@ public class MavenITmng3831PomInterpolationTest
 
     public MavenITmng3831PomInterpolationTest()
     {
-        super( "(,2.0.2),(2.0.2,)" );
+        super( "(,2.0.2),(2.0.2,4.0.0-alpha-1)" );
     }
 
     /**

File: maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java
Patch:
@@ -636,7 +636,7 @@ private void populatePluginFields( Object mojo, MojoDescriptor mojoDescriptor, C
             ConfigurationListener listener = new DebugConfigurationListener( logger );
 
             ValidatingConfigurationListener validator =
-                new ValidatingConfigurationListener( mojo, mojoDescriptor, listener );
+                new ValidatingConfigurationListener( mojo, mojoDescriptor, listener, expressionEvaluator );
 
             logger.debug(
                 "Configuring mojo '" + mojoDescriptor.getId() + "' with " + configuratorId + " configurator -->" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0828PluginConfigValuesInDebugTest.java
Patch:
@@ -22,6 +22,7 @@
 import java.io.File;
 import java.text.SimpleDateFormat;
 import java.util.Date;
+import java.util.Locale;
 
 import org.apache.maven.it.util.ResourceExtractor;
 import org.apache.maven.shared.utils.io.FileUtils;
@@ -71,7 +72,7 @@ public void testitMNG0828()
         checkLog( log, "[DEBUG]   (f) byteParam = 42" );
         checkLog( log, "[DEBUG]   (f) characterParam = X" );
 
-        Date date = new SimpleDateFormat( "yyyy-MM-dd HH:mm:ss.S a" ).parse( "2008-11-09 11:59:03.0 AM" );
+        Date date = new SimpleDateFormat( "yyyy-MM-dd HH:mm:ss.S a", Locale.US ).parse( "2008-11-09 11:59:03.0 AM" );
         checkLog( log, "[DEBUG]   (f) dateParam = " + date );
 
         checkLog( log, "[DEBUG]   (f) defaultParam = maven-core-it" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -668,6 +668,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng0866EvaluateDefaultValueTest.class );
         suite.addTestSuite( MavenITmng0848SystemPropOverridesDefaultValueTest.class );
         suite.addTestSuite( MavenITmng0836PluginParentResolutionTest.class );
+        suite.addTestSuite( MavenITmng0828PluginConfigValuesInDebugTest.class );
         suite.addTestSuite( MavenITmng0823MojoContextPassingTest.class );
         suite.addTestSuite( MavenITmng0820ConflictResolutionTest.class );
         suite.addTestSuite( MavenITmng0818WarDepsNotTransitiveTest.class );

File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/MojoExecutorStub.java
Patch:
@@ -15,6 +15,8 @@
 
 package org.apache.maven.lifecycle.internal.stub;
 
+import javax.inject.Provider;
+
 import org.apache.maven.execution.MavenSession;
 import org.apache.maven.lifecycle.LifecycleExecutionException;
 import org.apache.maven.lifecycle.internal.DependencyContext;
@@ -49,7 +51,7 @@ public MojoExecutorStub(
             MavenPluginManager mavenPluginManager,
             LifecycleDependencyResolver lifeCycleDependencyResolver,
             ExecutionEventCatapult eventCatapult,
-            MojosExecutionStrategy mojosExecutionStrategy )
+            Provider<MojosExecutionStrategy> mojosExecutionStrategy )
     {
         super( pluginManager, mavenPluginManager, lifeCycleDependencyResolver, eventCatapult, mojosExecutionStrategy );
     }

File: maven-compat/src/test/java/org/apache/maven/project/TestProjectBuilder.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.maven.bridge.MavenRepositorySystem;
 import org.apache.maven.model.building.ModelBuilder;
 import org.apache.maven.model.building.ModelProcessor;
+import org.apache.maven.repository.internal.ModelCacheFactory;
 import org.eclipse.aether.RepositorySystem;
 import org.eclipse.aether.impl.RemoteRepositoryManager;
 
@@ -39,10 +40,10 @@ public TestProjectBuilder(
             ModelBuilder modelBuilder, ModelProcessor modelProcessor,
             ProjectBuildingHelper projectBuildingHelper, MavenRepositorySystem repositorySystem,
             RepositorySystem repoSystem, RemoteRepositoryManager repositoryManager,
-            ProjectDependenciesResolver dependencyResolver )
+            ProjectDependenciesResolver dependencyResolver, ModelCacheFactory modelCacheFactory )
     {
         super( modelBuilder, modelProcessor, projectBuildingHelper, repositorySystem, repoSystem,
-                repositoryManager, dependencyResolver );
+                repositoryManager, dependencyResolver, modelCacheFactory );
     }
 
     @Override

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenResolverModule.java
Patch:
@@ -53,11 +53,10 @@ protected void configure()
         bind( VersionRangeResolver.class ).to( DefaultVersionRangeResolver.class ).in( Singleton.class );
         bind( MetadataGeneratorFactory.class ).annotatedWith( Names.named( "snapshot" ) )
             .to( SnapshotMetadataGeneratorFactory.class ).in( Singleton.class );
-
         bind( MetadataGeneratorFactory.class ).annotatedWith( Names.named( "versions" ) )
             .to( VersionsMetadataGeneratorFactory.class ).in( Singleton.class );
-
         bind( ModelBuilder.class ).toInstance( new DefaultModelBuilderFactory().newInstance() );
+        bind( ModelCacheFactory.class ).to( DefaultModelCacheFactory.class ).in( Singleton.class );
     }
 
     @Provides

File: maven-core/src/test/java/org/apache/maven/lifecycle/DefaultLifecyclesTest.java
Patch:
@@ -93,8 +93,8 @@ public void testCustomLifecycle()
         DefaultLifecycles dl = new DefaultLifecycles( myLifecycles.stream()
                                                             .collect( Collectors.toMap( l -> l.getId(), l -> l ) ) );
 
-        assertThat( dl.getLifeCycles().get( 0 ).getId(), is( "default" ) );
-        assertThat( dl.getLifeCycles().get( 1 ).getId(), is( "clean" ) );
+        assertThat( dl.getLifeCycles().get( 0 ).getId(), is( "clean" ) );
+        assertThat( dl.getLifeCycles().get( 1 ).getId(), is( "default" ) );
         assertThat( dl.getLifeCycles().get( 2 ).getId(), is( "site" ) );
         assertThat( dl.getLifeCycles().get( 3 ).getId(), is( "wrapper" ) );
         assertThat( dl.getLifeCycles().get( 4 ).getId(), is( "etl" ) );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng6972AllowAccessToGraphPackageTest.java
Patch:
@@ -32,7 +32,7 @@ public class MavenITmng6972AllowAccessToGraphPackageTest
 
     public MavenITmng6972AllowAccessToGraphPackageTest()
     {
-        super( "[4.0.0-alpha-1,)" );
+        super( "[3.9.0,)" );
     }
 
     public void testit()

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng7045DropUselessAndOutdatedCdiApiTest.java
Patch:
@@ -31,7 +31,7 @@ public class MavenITmng7045DropUselessAndOutdatedCdiApiTest
 
     public MavenITmng7045DropUselessAndOutdatedCdiApiTest()
     {
-        super( "[4.0.0-alpha-1,)" );
+        super( "[3.8.3,)" );
     }
 
     @Test

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0008SimplePluginTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -38,6 +37,8 @@ public MavenIT0008SimplePluginTest()
      * be downloaded from a remote repository before it can be executed. This
      * test also checks to make sure that mojo parameters are aligned to the
      * project basedir when their type is "java.io.File".
+     *
+     * @throws Exception in case of failure
      */
     public void testit0008()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0009GoalConfigurationTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -36,6 +35,8 @@ public MavenIT0009GoalConfigurationTest()
     /**
      * Test plugin configuration and goal configuration that overrides what the
      * mojo has specified.
+     *
+     * @throws Exception in case of failure
      */
     public void testit0009()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0010DependencyClosureResolutionTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -37,6 +36,8 @@ public MavenIT0010DependencyClosureResolutionTest()
      * Since the artifact resolution does not use the project builder, we must
      * ensure that the full hierarchy of all dependencies is resolved. This
      * includes the dependencies of the parent-pom's of dependencies.
+     *
+     * @throws Exception in case of failure
      */
     public void testit0010()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0011DefaultVersionByDependencyManagementTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -35,6 +34,8 @@ public MavenIT0011DefaultVersionByDependencyManagementTest()
 
     /**
      * Test specification of dependency versions via &lt;dependencyManagement/&gt;.
+     *
+     * @throws Exception in case of failure
      */
     public void testit0011()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0012PomInterpolationTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -34,6 +33,8 @@ public MavenIT0012PomInterpolationTest()
 
     /**
      * Test simple POM interpolation
+     *
+     * @throws Exception in case of failure
      */
     public void testit0012()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0018DependencyManagementTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -36,6 +35,8 @@ public MavenIT0018DependencyManagementTest()
      * Ensure that managed dependencies for dependency POMs are calculated
      * correctly when resolved. Removes managed-dep-1.0.3 and checks it is
      * redownloaded upon resolution of direct-dep.
+     *
+     * @throws Exception in case of failure
      */
     public void testit0018()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0019PluginVersionMngtBySuperPomTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -34,6 +33,8 @@ public MavenIT0019PluginVersionMngtBySuperPomTest()
 
     /**
      * Test that a version is managed by pluginManagement in the super POM
+     *
+     * @throws Exception in case of failure
      */
     public void testit0019()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0021PomProfileTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -35,6 +34,8 @@ public MavenIT0021PomProfileTest()
     /**
      * Test pom-level profile inclusion (this one is activated by system
      * property).
+     *
+     * @throws Exception in case of failure
      */
     public void testit0021()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0023SettingsProfileTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -35,6 +34,8 @@ public MavenIT0023SettingsProfileTest()
     /**
      * Test profile inclusion from settings.xml (this one is activated by an id
      * in the activeProfiles section).
+     *
+     * @throws Exception in case of failure
      */
     public void testit0023()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0024MultipleGoalExecutionsTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -41,6 +40,8 @@ public MavenIT0024MultipleGoalExecutionsTest()
     /**
      * Test usage of &lt;executions/&gt; inside a plugin rather than &lt;goals/&gt;
      * that are directly inside the plugin.
+     *
+     * @throws Exception in case of failure
      */
     public void testit0024()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0025MultipleExecutionLevelConfigsTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -40,6 +39,8 @@ public MavenIT0025MultipleExecutionLevelConfigsTest()
 
     /**
      * Test multiple goal executions with different execution-level configs.
+     *
+     * @throws Exception in case of failure
      */
     public void testit0025()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0030DepPomDepMngtInheritanceTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -35,6 +34,8 @@ public MavenIT0030DepPomDepMngtInheritanceTest()
     /**
      * Test for injection of dependencyManagement through parents of
      * dependency poms.
+     *
+     * @throws Exception in case of failure
      */
     public void testit0030()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0032MavenPrerequisiteTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -34,6 +33,8 @@ public MavenIT0032MavenPrerequisiteTest()
 
     /**
      * Tests that a specified Maven version requirement that is lower doesn't cause any problems
+     *
+     * @throws Exception in case of failure
      */
     public void testit0032()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0036ReleasePomTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -40,6 +39,8 @@ public MavenIT0036ReleasePomTest()
 
     /**
      * Test building from release-pom.xml when it's available
+     *
+     * @throws Exception in case of failure
      */
     public void testit0036()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0037AlternatePomFileSameDirTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -40,6 +39,8 @@ public MavenIT0037AlternatePomFileSameDirTest()
 
     /**
      * Test building with alternate pom file using '-f'
+     *
+     * @throws Exception in case of failure
      */
     public void testit0037()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0038AlternatePomFileDifferentDirTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -40,6 +39,8 @@ public MavenIT0038AlternatePomFileDifferentDirTest()
 
     /**
      * Test building project from outside the project directory using '-f' option.
+     *
+     * @throws Exception in case of failure
      */
     public void testit0038()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0039ReleasePomInReactorTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenIT0039ReleasePomInReactorTest()
      * Test reactor for projects that have release-pom.xml in addition to
      * pom.xml. The release-pom.xml file should be chosen above pom.xml for
      * these projects in the build.
+     *
+     * @throws Exception in case of failure
      */
     public void testit0039()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0040PackagingFromPluginExtensionTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -41,6 +40,8 @@ public MavenIT0040PackagingFromPluginExtensionTest()
 
     /**
      * Test the use of a packaging from a plugin
+     *
+     * @throws Exception in case of failure
      */
     public void testit0040()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0041ArtifactTypeFromPluginExtensionTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -40,6 +39,8 @@ public MavenIT0041ArtifactTypeFromPluginExtensionTest()
 
     /**
      * Test the use of a new type from a plugin
+     *
+     * @throws Exception in case of failure
      */
     public void testit0041()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0051ReleaseProfileTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -35,6 +34,8 @@ public MavenIT0051ReleaseProfileTest()
 
     /**
      * Test source attachment when -DperformRelease=true is specified.
+     *
+     * @throws Exception in case of failure
      */
     public void testit0051()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0052ReleaseProfileTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -35,6 +34,8 @@ public MavenIT0052ReleaseProfileTest()
     /**
      * Test that source attachment doesn't take place when
      * -DperformRelease=true is missing.
+     *
+     * @throws Exception in case of failure
      */
     public void testit0052()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0056MultipleGoalExecutionsTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -35,6 +34,8 @@ public MavenIT0056MultipleGoalExecutionsTest()
     /**
      * Test that multiple executions of a goal with different
      * parameter values will succeed.
+     *
+     * @throws Exception in case of failure
      */
     public void testit0056()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0063SystemScopeDependencyTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -35,6 +34,8 @@ public MavenIT0063SystemScopeDependencyTest()
 
     /**
      * Test the use of a system scoped dependency to a (fake) tools.jar.
+     *
+     * @throws Exception in case of failure
      */
     public void testit0063()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0064MojoConfigViaSettersTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -35,6 +34,8 @@ public MavenIT0064MojoConfigViaSettersTest()
     /**
      * Test the use of a mojo that uses setters instead of private fields
      * for the population of configuration values.
+     *
+     * @throws Exception in case of failure
      */
     public void testit0064()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0071PluginConfigWithDottedPropertyTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -41,6 +40,8 @@ public MavenIT0071PluginConfigWithDottedPropertyTest()
     /**
      * Verifies that dotted property references work within plugin
      * configurations.
+     *
+     * @throws Exception in case of failure
      */
     public void testit0071()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0072InterpolationWithDottedPropertyTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenIT0072InterpolationWithDottedPropertyTest()
     /**
      * Verifies that property references with dotted notation work within
      * POM interpolation.
+     *
+     * @throws Exception in case of failure
      */
     public void testit0072()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0085TransitiveSystemScopeTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -38,6 +37,8 @@ public MavenIT0085TransitiveSystemScopeTest()
      * when they are resolved transitively via another (non-system)
      * dependency. Inherited scope should not apply in the case of
      * system-scoped dependencies, no matter where they are.
+     *
+     * @throws Exception in case of failure
      */
     public void testit0085()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0086PluginRealmTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -43,6 +42,8 @@ public MavenIT0086PluginRealmTest()
     /**
      * Verify that a plugin dependency class/resource can be loaded from both the plugin classloader and the
      * context classloader available to the plugin.
+     *
+     * @throws Exception in case of failure
      */
     public void testit0086()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0087PluginRealmWithProjectLevelDepsTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -43,6 +42,8 @@ public MavenIT0087PluginRealmWithProjectLevelDepsTest()
     /**
      * Verify that a project-level plugin dependency class/resource can be loaded from both the plugin classloader
      * and the context classloader available to the plugin.
+     *
+     * @throws Exception in case of failure
      */
     public void testit0087()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0090EnvVarInterpolationTest.java
Patch:
@@ -37,6 +37,8 @@ public MavenIT0090EnvVarInterpolationTest()
     /**
      * Test that ensures that envars are interpolated correctly into plugin
      * configurations.
+     *
+     * @throws Exception in case of failure
      */
     public void testit0090()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0113ServerAuthzAvailableToWagonMgrInPluginTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -36,6 +35,8 @@ public MavenIT0113ServerAuthzAvailableToWagonMgrInPluginTest()
     /**
      * Test that the auth infos given in the settings.xml are pushed into the wagon manager and are available
      * to other components/plugins.
+     *
+     * @throws Exception in case of failure
      */
     public void testit0113()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0130CleanLifecycleTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -40,6 +39,8 @@ public MavenIT0130CleanLifecycleTest()
 
     /**
      * Test default binding of goals for "clean" lifecycle.
+     *
+     * @throws Exception in case of failure
      */
     public void testit0130()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0131SiteLifecycleTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -40,6 +39,8 @@ public MavenIT0131SiteLifecycleTest()
 
     /**
      * Test default binding of goals for "site" lifecycle.
+     *
+     * @throws Exception in case of failure
      */
     public void testit0131()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0132PomLifecycleTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -40,6 +39,8 @@ public MavenIT0132PomLifecycleTest()
 
     /**
      * Test default binding of goals for "pom" lifecycle.
+     *
+     * @throws Exception in case of failure
      */
     public void testit0132()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0133JarLifecycleTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -40,6 +39,8 @@ public MavenIT0133JarLifecycleTest()
 
     /**
      * Test default binding of goals for "jar" lifecycle.
+     *
+     * @throws Exception in case of failure
      */
     public void testit0133()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0134WarLifecycleTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -40,6 +39,8 @@ public MavenIT0134WarLifecycleTest()
 
     /**
      * Test default binding of goals for "war" lifecycle.
+     *
+     * @throws Exception in case of failure
      */
     public void testit0134()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0135EjbLifecycleTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -40,6 +39,8 @@ public MavenIT0135EjbLifecycleTest()
 
     /**
      * Test default binding of goals for "ejb" lifecycle.
+     *
+     * @throws Exception in case of failure
      */
     public void testit0135()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0136RarLifecycleTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -40,6 +39,8 @@ public MavenIT0136RarLifecycleTest()
 
     /**
      * Test default binding of goals for "rar" lifecycle.
+     *
+     * @throws Exception in case of failure
      */
     public void testit0136()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0137EarLifecycleTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -40,6 +39,8 @@ public MavenIT0137EarLifecycleTest()
 
     /**
      * Test default binding of goals for "ear" lifecycle.
+     *
+     * @throws Exception in case of failure
      */
     public void testit0137()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0138PluginLifecycleTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -40,6 +39,8 @@ public MavenIT0138PluginLifecycleTest()
 
     /**
      * Test default binding of goals for "maven-plugin" lifecycle.
+     *
+     * @throws Exception in case of failure
      */
     public void testit0138()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0139InterpolationWithProjectPrefixTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -40,6 +39,8 @@ public MavenIT0139InterpolationWithProjectPrefixTest()
 
     /**
      * Test that expressions of the form ${project.*} resolve correctly to POM values.
+     *
+     * @throws Exception in case of failure
      */
     public void testit0139()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0140InterpolationWithPomPrefixTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -40,6 +39,8 @@ public MavenIT0140InterpolationWithPomPrefixTest()
 
     /**
      * Test that expressions of the form ${pom.*} resolve correctly to POM values.
+     *
+     * @throws Exception in case of failure
      */
     public void testit0140()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0142DirectDependencyScopesTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -46,6 +45,8 @@ public MavenIT0142DirectDependencyScopesTest()
 
     /**
      * Test that the different scopes of direct dependencies end up on the right class paths.
+     *
+     * @throws Exception in case of failure
      */
     public void testit0142()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0144LifecycleExecutionOrderTest.java
Patch:
@@ -41,6 +41,8 @@ public MavenIT0144LifecycleExecutionOrderTest()
 
     /**
      * Test that the lifecycle phases execute in proper order.
+     *
+     * @throws Exception in case of failure
      */
     public void testit0144()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITBootstrapTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -41,6 +40,8 @@ public MavenITBootstrapTest()
 
     /**
      * Bootstraps the integration tests by downloading required artifacts from central repository.
+     *
+     * @throws Exception in case of failure
      */
     public void testBootstrap()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0187CollectedProjectsTest.java
Patch:
@@ -45,6 +45,8 @@ public MavenITmng0187CollectedProjectsTest()
     /**
      * Verify that MavenProject.getCollectedProjects() provides access to the direct and indirect modules
      * of the current project.
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0249ResolveDepsFromReactorTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -41,6 +40,8 @@ public MavenITmng0249ResolveDepsFromReactorTest()
 
     /**
      * Test that the reactor can establish the artifact location of known projects for dependencies.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG0249()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0282NonReactorExecWhenProjectIndependentTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -40,6 +39,8 @@ public MavenITmng0282NonReactorExecWhenProjectIndependentTest()
 
     /**
      * Test non-reactor behavior when plugin declares "@requiresProject false"
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG282()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0294MergeGlobalAndUserSettingsTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -41,6 +40,8 @@ public MavenITmng0294MergeGlobalAndUserSettingsTest()
 
     /**
      * Test merging of global- and user-level settings.xml files.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG294()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0377PluginLookupFromPrefixTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -41,6 +40,8 @@ public MavenITmng0377PluginLookupFromPrefixTest()
     /**
      * Test usage of plugins.xml mapping file on the repository to resolve plugin artifactId from it's prefix using the
      * pluginGroups in the provided settings.xml.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG377()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0461TolerateMissingDependencyPomTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -41,6 +40,8 @@ public MavenITmng0461TolerateMissingDependencyPomTest()
 
     /**
      * Verify that dependency resolution only warns in case of missing dependency POMs but does not fail.
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0471CustomLifecycleTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng0471CustomLifecycleTest()
 
     /**
      * Test @execute with a custom lifecycle, including configuration
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG471()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0496IgnoreUnknownPluginParametersTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -41,6 +40,8 @@ public MavenITmng0496IgnoreUnknownPluginParametersTest()
     /**
      * Test that unused configuration parameters from the POM don't cause the
      * mojo to fail...they will show up as warnings in the -X output instead.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG496()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0505VersionRangeTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -45,6 +44,8 @@ public MavenITmng0505VersionRangeTest()
 
     /**
      * Test version range support.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG505()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0507ArtifactRelocationTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -41,6 +40,8 @@ public MavenITmng0507ArtifactRelocationTest()
 
     /**
      * Test artifact relocation.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG507()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0522InheritedPluginMgmtConfigTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -40,6 +39,8 @@ public MavenITmng0522InheritedPluginMgmtConfigTest()
 
     /**
      * Test for injection of inherited plugin management into plugin configuration.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG522()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0557UserSettingsCliOptionTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -40,6 +39,8 @@ public MavenITmng0557UserSettingsCliOptionTest()
 
     /**
      * Test --settings CLI option
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG557()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0612NewestConflictResolverTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -40,6 +39,8 @@ public MavenITmng0612NewestConflictResolverTest()
 
     /**
      * Test that ensures the newest-wins conflict resolver is used.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG612()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0666IgnoreLegacyPomTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng0666IgnoreLegacyPomTest()
     /**
      * Verify that maven-1 POMs will be ignored but not stop the resolution
      * process.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG666()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0680ParentBasedirTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -41,6 +40,8 @@ public MavenITmng0680ParentBasedirTest()
 
     /**
      * Test that the basedir of the parent is set correctly.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG680()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0731LegacyRepoLayoutTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -44,6 +43,8 @@ public MavenITmng0731LegacyRepoLayoutTest()
      * Verify that deployment of artifacts to a legacy-layout repository
      * results in a groupId directory of 'the.full.group.id' instead of
      * 'the/full/group/id'.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG731()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0761MissingSnapshotDistRepoTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng0761MissingSnapshotDistRepoTest()
     /**
      * Test that a deployment of a snapshot falls back to a non-snapshot repository if no snapshot repository is
      * specified.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG761()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0768OfflineModeTest.java
Patch:
@@ -53,6 +53,8 @@ public MavenITmng0768OfflineModeTest()
 
     /**
      * Test offline mode.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG768()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0773SettingsProfileReactorPollutionTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -40,6 +39,8 @@ public MavenITmng0773SettingsProfileReactorPollutionTest()
 
     /**
      * Verify that profiles from settings.xml do not pollute module lists across projects in a reactorized build.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG773()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0781PluginConfigVsExecConfigTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -41,6 +40,8 @@ public MavenITmng0781PluginConfigVsExecConfigTest()
     /**
      * Test that plugin-level configuration instances are not nullified by
      * execution-level configuration instances.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG0781()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0786ProfileAwareReactorTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -41,6 +40,8 @@ public MavenITmng0786ProfileAwareReactorTest()
     /**
      * Verify that direct invocation of a mojo from the command line still
      * results in the processing of modules included via profiles.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG0786()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0814ExplicitProfileActivationTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -41,6 +40,8 @@ public MavenITmng0814ExplicitProfileActivationTest()
 
     /**
      * Test activation of a profile from the command line.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG814()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0818WarDepsNotTransitiveTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng0818WarDepsNotTransitiveTest()
 
     /**
      * Test that depending on a WAR doesn't also get its dependencies transitively.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG0818()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0820ConflictResolutionTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -41,6 +40,8 @@ public MavenITmng0820ConflictResolutionTest()
 
     /**
      * Verify that the collector selecting a particular version gets the correct subtree
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG0820()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0823MojoContextPassingTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng0823MojoContextPassingTest()
 
     /**
      * Tests context passing between mojos in the same plugin.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG0823()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0836PluginParentResolutionTest.java
Patch:
@@ -19,8 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.VerificationException;
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -43,6 +41,8 @@ public MavenITmng0836PluginParentResolutionTest()
      * Test that parent POMs referenced by a plugin POM can be resolved from ordinary repos, i.e. non-plugin repos.
      * As a motivation for this, imagine the plugin repository hosts only snapshots while the ordinary repository
      * hosts releases and a snapshot plugin might easily use a released parent.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG836()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0848SystemPropOverridesDefaultValueTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng0848SystemPropOverridesDefaultValueTest()
 
     /**
      * Test that execution/system properties take precedence over default value of plugin parameters.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG848()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0866EvaluateDefaultValueTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -43,6 +42,8 @@ public MavenITmng0866EvaluateDefaultValueTest()
 
     /**
      * Test that expressions inside the default value of plugin parameters are evaluated.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG866()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0870ReactorAwarePluginDiscoveryTest.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.io.File;
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
@@ -42,6 +41,8 @@ public MavenITmng0870ReactorAwarePluginDiscoveryTest()
     /**
      * Test that the reactor can resolve plugins that have just been built by a previous module and are not yet
      * installed to the local repo.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG0870()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0947OptionalDependencyTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng0947OptionalDependencyTest()
     /**
      * Verify that direct optional dependencies are included in the project class paths while transitive optional
      * dependencies are excluded.
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0956ComponentInjectionViaProjectLevelPluginDepTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -41,6 +40,8 @@ public MavenITmng0956ComponentInjectionViaProjectLevelPluginDepTest()
 
     /**
      * Test component injection from project-level plugin dependencies.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG0956()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0985NonExecutedPluginMngtGoalsTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng0985NonExecutedPluginMngtGoalsTest()
      * Test that plugins in pluginManagement aren't included in the build
      * unless they are referenced by groupId/artifactId within the plugins
      * section of a pom.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG0985()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1021EqualAttachmentBuildNumberTest.java
Patch:
@@ -40,6 +40,8 @@ public MavenITmng1021EqualAttachmentBuildNumberTest()
     /**
      * Test that source attachments have the same build number and timestamp as the main
      * artifact when deployed.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG1021()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1052PluginMngtConfigTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng1052PluginMngtConfigTest()
      * Test that configuration for a lifecycle-bound plugin is injected from
      * PluginManagement section even when it's not explicitly defined in the
      * plugins section.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG1052()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1088ReactorPluginResolutionTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -43,6 +42,8 @@ public MavenITmng1088ReactorPluginResolutionTest()
      * Test that the plugin manager falls back to resolution from the repository if a plugin is part of the reactor
      * (i.e. an active project artifact) but the lifecycle has not been executed far enough to produce a file for
      * the plugin (i.e. a phase before "compile").
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG1088()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1144MultipleDefaultGoalsTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -41,6 +40,8 @@ public MavenITmng1144MultipleDefaultGoalsTest()
 
     /**
      * Test that multiple goals can be specified as default goal using whitespace as delimiter.
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1233WarDepWithProvidedScopeTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -41,6 +40,8 @@ public MavenITmng1233WarDepWithProvidedScopeTest()
 
     /**
      * Verify that overriding a transitive compile time dependency as provided in a WAR ensures it is not included.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG1233()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1323AntrunDependenciesTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
@@ -43,6 +42,8 @@ public MavenITmng1323AntrunDependenciesTest()
     /**
      * Verify that project-level plugin dependencies actually apply to the current project only and not the entire
      * reactor.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG1323()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1349ChecksumFormatsTest.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.io.File;
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
@@ -41,6 +40,8 @@ public MavenITmng1349ChecksumFormatsTest()
 
     /**
      * Tests that different checksum formats are supported.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG1349()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1412DependenciesOrderTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1415QuotedSystemPropertiesTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -40,6 +39,8 @@ public MavenITmng1415QuotedSystemPropertiesTest()
 
     /**
      * Test that quoted system properties are processed correctly. [MNG-1415]
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG1415()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1491ReactorArtifactIdCollisionTest.java
Patch:
@@ -19,8 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.VerificationException;
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1493NonStandardModulePomNamesTest.java
Patch:
@@ -21,13 +21,10 @@
 
 import java.io.File;
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
  * This is a test set for <a href="https://issues.apache.org/jira/browse/MNG-1493">MNG-1493</a>.
- *
- *
  */
 public class MavenITmng1493NonStandardModulePomNamesTest
     extends AbstractMavenIntegrationTestCase

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1701DuplicatePluginTest.java
Patch:
@@ -40,6 +40,8 @@ public MavenITmng1701DuplicatePluginTest()
 
     /**
      * Verify that duplicate plugin declarations cause a warning.
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1703PluginMgmtDepInheritanceTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -43,6 +42,8 @@ public MavenITmng1703PluginMgmtDepInheritanceTest()
     /**
      * Verify that a project-level plugin dependency class/resource inherited from the parent can be loaded from both the plugin classloader
      * and the context classloader available to the plugin.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG1703()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1751ForcedMetadataUpdateDuringDeploymentTest.java
Patch:
@@ -44,6 +44,8 @@ public MavenITmng1751ForcedMetadataUpdateDuringDeploymentTest()
     /**
      * Verify that deployment always updates the metadata even if its remote timestamp currently refers to
      * the future.
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1803PomValidationErrorIncludesLineNumberTest.java
Patch:
@@ -40,6 +40,8 @@ public MavenITmng1803PomValidationErrorIncludesLineNumberTest()
 
     /**
      * Verify that POM errors indicate the line and column number in the input file.
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1830ShowVersionTest.java
Patch:
@@ -43,6 +43,8 @@ public MavenITmng1830ShowVersionTest()
 
     /**
      * Test that the version format
+     *
+     * @throws Exception in case of failure
      */
     public void testVersion()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1908LegacySnapshotUpdateTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng1908LegacySnapshotUpdateTest()
 
     /**
      * Test that legacy repositories with legacy snapshots (i.e. without metadata) download correctly.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG1908()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1957JdkActivationWithVersionRangeTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng1957JdkActivationWithVersionRangeTest()
 
     /**
      * Test that JDK profile activation allows version ranges.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG1957()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1992SystemPropOverridesPomPropTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -44,6 +43,8 @@ public MavenITmng1992SystemPropOverridesPomPropTest()
      * Test that system/execution properties take precedence over the POM's properties section when configuring a
      * plugin parameter that is annotated with @parameter expression="prop". Note that this issue is not about POM
      * interpolation but rather plugin parameter expression evaluation.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG1992()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1995InterpolateBooleanModelElementsTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng1995InterpolateBooleanModelElementsTest()
 
     /**
      * Verify that POM fields that are of type boolean can be interpolated with expressions.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG1995()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2006ChildPathAwareUrlInheritanceTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -43,6 +42,8 @@ public MavenITmng2006ChildPathAwareUrlInheritanceTest()
     /**
      * Test that inheritance of those URLs which automatically append the child's artifact id take the child's
      * relative location to the parent into account.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG2006()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2045testJarDependenciesBrokenInReactorTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.io.File;
 import java.util.List;
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2052InterpolateWithSettingsProfilePropertiesTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -41,6 +40,8 @@ public MavenITmng2052InterpolateWithSettingsProfilePropertiesTest()
      * Test that properties defined in an active profile in the user's
      * settings are available for interpolation of systemPath in a dependency.
      * [MNG-2052]
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG2052()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2054PluginExecutionInheritanceTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng2054PluginExecutionInheritanceTest()
 
     /**
      * Test that plugin executions from &gt;1 step of inheritance don't run multiple times.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG2054()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2098VersionRangeSatisfiedFromWrongRepoTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -43,6 +42,8 @@ public MavenITmng2098VersionRangeSatisfiedFromWrongRepoTest()
      * with the newest metadata does not provide the selected version. In particular, the repository with the
      * newest metadata must not be the only repository used during artifact resolution, all repositories must
      * be considered.
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2103PluginExecutionInheritanceTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng2103PluginExecutionInheritanceTest()
 
     /**
      * Verify that the plugin-level inherited flag can be overriden by the execution-level flag.
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2123VersionRangeDependencyTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.io.File;
 import java.util.List;
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2124PomInterpolationWithParentValuesTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -38,6 +37,8 @@ public MavenITmng2124PomInterpolationWithParentValuesTest()
 
     /**
      * Test that ${parent.artifactId} resolves correctly. [MNG-2124]
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG2124()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2130ParentLookupFromReactorCacheTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -38,6 +37,8 @@ public MavenITmng2130ParentLookupFromReactorCacheTest()
     /**
      * Test that parent-POMs cached during a build are available as parents
      * to other POMs in the multimodule build.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG2130()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2135PluginBuildInReactorTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -40,6 +39,8 @@ public MavenITmng2135PluginBuildInReactorTest()
 
     /**
      * Test that the reactor can handle builds where one module provides a Maven plugin that another module uses.
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2136ActiveByDefaultProfileTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -41,6 +40,8 @@ public MavenITmng2136ActiveByDefaultProfileTest()
     /**
      * Test that &lt;activeByDefault/&gt; calculations for profile activation only
      * use profiles defined in the POM. [MNG-2136]
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG2136()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2140ReactorAwareDepResolutionWhenForkTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -41,6 +40,8 @@ public MavenITmng2140ReactorAwareDepResolutionWhenForkTest()
 
     /**
      * Test that mojos in a forked lifecycle can also resolve dependencies from the reactor.
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2174PluginDepsManagedByParentProfileTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -43,6 +42,8 @@ public MavenITmng2174PluginDepsManagedByParentProfileTest()
     /**
      * Verify that plugin dependencies defined by plugin management of a parent profile are not lost when the
      * parent's main plugin management section is also present.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG2174()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2196ParentResolutionTest.java
Patch:
@@ -19,8 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
-import org.apache.maven.it.VerificationException;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -41,6 +39,8 @@ public MavenITmng2196ParentResolutionTest()
      * Verify that multimodule builds where one project references another as
      * a parent can build, even if that parent is not correctly referenced by
      * &lt;relativePath/&gt; and is not in the local repository. [MNG-2196]
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG2196()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2201PluginConfigInterpolationTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -41,6 +40,8 @@ public MavenITmng2201PluginConfigInterpolationTest()
 
     /**
      * Verify that plugin configurations are correctly interpolated
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG2201()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2222OutputDirectoryReactorResolutionTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -43,6 +42,8 @@ public MavenITmng2222OutputDirectoryReactorResolutionTest()
      * Test that dependencies on reactor projects can be satisfied by their output directories even if those do not
      * exist (e.g. due to non-existing sources). This ensures consistent build results for "mvn compile" and
      * "mvn package".
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2228ComponentInjectionTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -43,6 +42,8 @@ public MavenITmng2228ComponentInjectionTest()
     /**
      * Verify that components injected into plugins are actually assignment-compatible with the corresponding mojo
      * fields in case the field type is both provided by a plugin dependency and by a build extension.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG2228()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2234ActiveProfilesFromSettingsTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -39,6 +38,8 @@ public MavenITmng2234ActiveProfilesFromSettingsTest()
     /**
      * Verify that the activeProfile section from the settings.xml can also activate profiles specified in the POM,
      * i.e. outside of the settings.xml.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG2234()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2254PomEncodingTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
@@ -43,6 +42,8 @@ public MavenITmng2254PomEncodingTest()
 
     /**
      * Verify that the encoding declaration of the POM is respected.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG2254 ()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2277AggregatorAndResolutionPluginsTest.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.io.File;
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2293CustomPluginParamImplTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -41,6 +40,8 @@ public MavenITmng2293CustomPluginParamImplTest()
 
     /**
      * Verify that default implementation of an implementation for a complex object works as expected.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG2293()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2305MultipleProxiesTest.java
Patch:
@@ -60,6 +60,8 @@ public MavenITmng2305MultipleProxiesTest()
     /**
      * Verify that proxies can be setup for multiple protocols, in this case HTTP and HTTPS. As a nice side effect,
      * this checks HTTPS tunneling over a web proxy.
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2309ProfileInjectionOrderTest.java
Patch:
@@ -41,6 +41,8 @@ public MavenITmng2309ProfileInjectionOrderTest()
 
     /**
      * Test that profiles are injected in declaration order, with the last profile being the most dominant.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG2309()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2318LocalParentResolutionTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -40,6 +39,8 @@ public MavenITmng2318LocalParentResolutionTest()
 
     /**
      * When a project has modules and its parent is not preinstalled [MNG-2318]
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG2318()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2339BadProjectInterpolationTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2362DeployedPomEncodingTest.java
Patch:
@@ -41,6 +41,8 @@ public MavenITmng2362DeployedPomEncodingTest()
     /**
      * Verify that installed/deployed POMs retain their original file encoding and don't get messed up by some
      * transformation that erroneously uses the platform's default encoding for reading/writing them.
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2363BasedirAwareFileActivatorTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -41,6 +40,8 @@ public MavenITmng2363BasedirAwareFileActivatorTest()
     /**
      * Test that the file-based profile activator resolves relative paths against the current project's base directory
      * and also interpolates ${basedir} if explicitly given, just like usual for other parts of the POM.
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2387InactiveProxyTest.java
Patch:
@@ -112,6 +112,8 @@ protected void tearDown()
 
     /**
      * Test that no proxy is used if none of the configured proxies is actually set as active.
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2432PluginPrefixOrderTest.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.io.File;
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
@@ -42,6 +41,8 @@ public MavenITmng2432PluginPrefixOrderTest()
     /**
      * Verify that when resolving plugin prefixes the plugins from the POM are searched before the plugin groups
      * from the settings.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG2432()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2486TimestampedDependencyVersionInterpolationTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -43,6 +42,8 @@ public MavenITmng2486TimestampedDependencyVersionInterpolationTest()
      * Verify that the expression ${project.version} gets resolved to X-SNAPSHOT and not the actual timestamp
      * during transitive dependency resolution. In part, this depends on the deployed SNAPSHOT POMs to retain their
      * X-SNAPSHOT project version and not having it replaced with the timestamp version.
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2539PluginDependenciesComeFromPluginReposTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -41,6 +40,8 @@ public MavenITmng2539PluginDependenciesComeFromPluginReposTest()
 
     /**
      * Verify that dependencies specified in plugins are also retrieved from ordinary/non-plugin repositories.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG2539()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2562Timestamp322Test.java
Patch:
@@ -20,7 +20,6 @@
  */
 
 import org.apache.maven.it.util.ResourceExtractor;
-import org.apache.maven.it.Verifier;
 
 import java.io.File;
 import java.util.Date;
@@ -29,8 +28,6 @@
 
 /**
  * This is a test set for <a href="https://issues.apache.org/jira/browse/MNG-2562">MNG-2562</a>.
- *
- *
  */
 public class MavenITmng2562Timestamp322Test
     extends AbstractMavenIntegrationTestCase

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2562TimestampTest.java
Patch:
@@ -20,7 +20,6 @@
  */
 
 import org.apache.maven.it.util.ResourceExtractor;
-import org.apache.maven.it.Verifier;
 
 import java.io.File;
 import java.util.Date;

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2605BogusProfileActivationTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
@@ -43,6 +42,8 @@ public MavenITmng2605BogusProfileActivationTest()
     /**
      * Test that profiles are not accidentally activated when they have no activation element at all and
      * the user did not request their activation via id.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG2605()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2668UsePluginDependenciesForSortingTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2693SitePluginRealmTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -41,6 +40,8 @@ public MavenITmng2693SitePluginRealmTest()
 
     /**
      * Verify that a plugin class/resource can be loaded from the plugin realm, also during the site lifecycle.
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2695OfflinePluginSnapshotsTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -43,6 +42,8 @@ public MavenITmng2695OfflinePluginSnapshotsTest()
 
     /**
      * Verify that snapshot plugins which are scheduled for an update don't fail the build when in offline mode.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG2695()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2738ProfileIdCollidesWithCliOptionTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -41,6 +40,8 @@ public MavenITmng2738ProfileIdCollidesWithCliOptionTest()
     /**
      * Verify that the CLI parsing properly handles activation of profiles whose id happens to match a short command
      * line option.
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2739RequiredRepositoryElementsTest.java
Patch:
@@ -26,10 +26,10 @@
 
 /**
  * This is a test set for <a href="https://issues.apache.org/jira/browse/MNG-2739">MNG-2739</a>.
+ * todo Fill in a better description of what this test verifies!
  *
  * @author <a href="mailto:brianf@apache.org">Brian Fox</a>
  * @author jdcasey
- * @todo Fill in a better description of what this test verifies!
  */
 public class MavenITmng2739RequiredRepositoryElementsTest
     extends AbstractMavenIntegrationTestCase

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2744checksumVerificationTest.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.io.File;
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
@@ -41,6 +40,8 @@ public MavenITmng2744checksumVerificationTest()
 
     /**
      * Tests that hex digits of checksums are compared without regard to case.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG2744()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2749ExtensionAvailableToPluginTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng2749ExtensionAvailableToPluginTest()
 
     /**
      * Verify that plugins can load classes/resources from a build extension.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG2749()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2771PomExtensionComponentOverrideTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -40,6 +39,8 @@ public MavenITmng2771PomExtensionComponentOverrideTest()
 
     /**
      * Test that ensures the POM extensions can override default component implementations.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG2771()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2790LastUpdatedMetadataTest.java
Patch:
@@ -44,6 +44,8 @@ public MavenITmng2790LastUpdatedMetadataTest()
 
     /**
      * Verify that the field lastUpdated of existing local repo metadata is updated upon install of new a snapshot.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG2790()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2820PomCommentsTest.java
Patch:
@@ -40,6 +40,8 @@ public MavenITmng2820PomCommentsTest()
 
     /**
      * Verify that installed/deployed POMs retain any XML-comments like license headers.
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2831CustomArtifactHandlerAndCustomLifecycleTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -40,6 +39,8 @@ public MavenITmng2831CustomArtifactHandlerAndCustomLifecycleTest()
 
     /**
      * Test the use of a custom lifecycle from a plugin that is defined as a build extension.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG2831()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2843PluginConfigPropertiesInjectionTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng2843PluginConfigPropertiesInjectionTest()
 
     /**
      * Test that plugins can have the project properties injected via ${project.properties}.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG2843()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2848ProfileActivationByEnvironmentVariableTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -41,6 +40,8 @@ public MavenITmng2848ProfileActivationByEnvironmentVariableTest()
 
     /**
      * Test activation of a profile via environment variables.
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2861RelocationsAndRangesTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2871PrePackageSubartifactResolutionTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -43,6 +42,8 @@ public MavenITmng2871PrePackageSubartifactResolutionTest()
     /**
      * Verify that dependencies on not-yet-packaged sub artifacts in build phases prior to package can be satisfied
      * from a module's output directory, i.e. with the loose class files.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG2871()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2878DefaultReportXmlImportTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng2878DefaultReportXmlImportTest()
 
     /**
      * Verify that a plugin can load default-report.xml from the core.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG2878()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2892HideCorePlexusUtilsTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -43,6 +42,8 @@ public MavenITmng2892HideCorePlexusUtilsTest()
     /**
      * Verify that plugins can use their own version of plexus-utils and are not bound to the version bundled in the
      * core.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG2892()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2921ActiveAttachedArtifactsTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -49,6 +48,8 @@ public MavenITmng2921ActiveAttachedArtifactsTest()
      * packaged. MNG-2871 on the other hand is about dependencies that haven't been packaged yet but merely exist
      * as loose class files in a module's output directory. In other words, this test is concerned with the situation
      * during the lifecycle phase "package" while MNG-2871 is concerned with earlier phases like "test".
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG2921()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2926PluginPrefixOrderTest.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.io.File;
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
@@ -42,6 +41,8 @@ public MavenITmng2926PluginPrefixOrderTest()
     /**
      * Verify that when resolving plugin prefixes the group org.apache.maven.plugins is searched before
      * org.codehaus.mojo and that custom groups from the settings are searched before these standard ones.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG2926()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2994SnapshotRangeRepositoryTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -41,6 +40,8 @@ public MavenITmng2994SnapshotRangeRepositoryTest()
 
     /**
      * Test that snapshot repositories are checked for ranges with snapshot boundaries.
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3012CoreClassImportTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng3012CoreClassImportTest()
     /**
      * Verify that classes shared with the Maven core realm are imported into the plugin realm such that instances of
      * these classes created by the core can be cast to classes loaded by the plugin.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3012()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3038TransitiveDepManVersionTest.java
Patch:
@@ -22,8 +22,6 @@
 import java.io.File;
 import java.io.IOException;
 
-import org.apache.maven.it.VerificationException;
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3057VersionExprTransformationsTest.java
Patch:
@@ -32,7 +32,7 @@
 /**
  * This is a test set for <a href="https://issues.apache.org/jira/browse/MNG-3057">MNG-3057</a>.
  *
- * @todo Fill in a better description of what this test verifies!
+ * todo Fill in a better description of what this test verifies!
  *
  * @author <a href="mailto:brianf@apache.org">Brian Fox</a>
  * @author jdcasey

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3092SnapshotsExcludedFromVersionRangeTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng3092SnapshotsExcludedFromVersionRangeTest()
     /**
      * Verify that snapshots are not included in version ranges unless explicitly declared as the lower/upper bound
      * of the range.
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3099SettingsProfilesWithNoPomTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng3099SettingsProfilesWithNoPomTest()
      * Verify that (active) profiles from the settings are effective even if no POM is in use (e.g archetype:create).
      * In more detail, this means the plugin can be resolved from the repositories given in the settings and the plugin
      * can access properties defined by the profiles.
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3106ProfileMultipleActivatorsTest.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.io.File;
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
@@ -43,6 +42,7 @@ public MavenITmng3106ProfileMultipleActivatorsTest()
      * The profiles should be activated even though only one of the activators
      * returns true.
      *
+     * @throws Exception in case of failure
      */
     public void testProfilesWithMultipleActivators()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3118TestClassPathOrderTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng3118TestClassPathOrderTest()
 
     /**
      * Check that test classes appear before main classes on the test class path.
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3122ActiveProfilesNoDuplicatesTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -43,6 +42,8 @@ public MavenITmng3122ActiveProfilesNoDuplicatesTest()
     /**
      * Verify that MavenProject.getActiveProfiles() reports profiles from the settings.xml with activeByDefault=true
      * only once.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3122()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3133UrlNormalizationNotBeforeInterpolationTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,7 +41,9 @@ public MavenITmng3133UrlNormalizationNotBeforeInterpolationTest()
     /**
      * Verify that URL normalization does not happen before interpolation which would result in invalid
      * inherited URLs for project layouts where the parent resides in a sibling directory of the child
-     * and expressions are used for the parent URLs ("${expression}/../foo" -> "foo").
+     * and expressions are used for the parent URLs ("${expression}/../foo" -&gt; "foo").
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3139UseCachedMetadataOfBlacklistedRepoTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng3139UseCachedMetadataOfBlacklistedRepoTest()
 
     /**
      * Test that locally cached metadata of blacklisted repositories is consulted to resolve metaversions.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3139()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3183LoggingToFileTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -43,6 +42,8 @@ public MavenITmng3183LoggingToFileTest()
 
     /**
      * Test that the CLI parameter -l can be used to direct logging to a file.
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3203DefaultLifecycleExecIdTest.java
Patch:
@@ -21,14 +21,12 @@
 
 import java.io.File;
 
-import org.apache.maven.it.AbstractMavenIntegrationTestCase;
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
  * This is a test set for <a href="https://issues.apache.org/jira/browse/MNG-3203">MNG-3203</a>.
  *
- * @todo Fill in a better description of what this test verifies!
+ * todo Fill in a better description of what this test verifies!
  *
  * @author <a href="mailto:brianf@apache.org">Brian Fox</a>
  * @author jdcasey

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3208ProfileAwareReactorSortingTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng3208ProfileAwareReactorSortingTest()
 
     /**
      * Verify that project sorting consideres dependencies injected by profiles.
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3217InterPluginDependencyTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng3217InterPluginDependencyTest()
     /**
      * Verify that the dependency of plugin A on some plugin B does not influence the build of another module in the
      * reactor that uses a different version of plugin B for normal build tasks.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3217()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3221InfiniteForkingTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3259DepsDroppedInMultiModuleBuildTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3268MultipleHyphenPCommandLineTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3271DefaultReportsSuppressionTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -43,6 +42,8 @@ public MavenITmng3271DefaultReportsSuppressionTest()
 
     /**
      * Test that default reports can be suppressed.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3271()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3284UsingCachedPluginsTest.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.io.File;
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
@@ -40,6 +39,8 @@ public MavenITmng3284UsingCachedPluginsTest()
     /**
      * Verify that the effective plugin versions used for a project are not influenced by other instances of this
      * plugin in the reactor, i.e. each module gets exactly the plugin version it declares.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3284()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3288SystemScopeDirTest.java
Patch:
@@ -38,6 +38,8 @@ public MavenITmng3288SystemScopeDirTest()
 
     /**
      * Test the use of a system scoped dependency to a directory instead of a JAR which should fail early.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3288()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3297DependenciesNotLeakedToMojoTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -43,6 +42,8 @@ public MavenITmng3297DependenciesNotLeakedToMojoTest()
     /**
      * Test that project dependencies resolved for one mojo are not exposed to another mojo if the latter
      * does not require dependency resolution.
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3314OfflineSnapshotsTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -43,6 +42,8 @@ public MavenITmng3314OfflineSnapshotsTest()
 
     /**
      * Verify that snapshot dependencies which are scheduled for an update don't fail the build when in offline mode.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3314 ()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3331ModulePathNormalizationTest.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.io.File;
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3355TranslatedPathInterpolationTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3372DirectInvocationOfPluginsTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3379ParallelArtifactDownloadsTest.java
Patch:
@@ -41,6 +41,8 @@ public MavenITmng3379ParallelArtifactDownloadsTest()
     /**
      * Tests that parallel downloads of artifacts from both the same and from different group ids don't corrupt
      * the local repo.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3379()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3380ManagedRelocatedTransdepsTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -48,6 +47,8 @@ public MavenITmng3380ManagedRelocatedTransdepsTest()
 
     /**
      * Verify that dependency resolution considers dependency management also for relocated artifacts.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3380()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3394POMPluginVersionDominanceTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3396DependencyManagementForOverConstrainedRangesTest.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.io.File;
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3422ActiveComponentCollectionTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -44,6 +43,8 @@ public MavenITmng3422ActiveComponentCollectionTest()
 
     /**
      * Verify that active collections of core components are properly injected into plugins.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3422()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3428PluginDescriptorArtifactsIncompleteTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3470StrictCheckumVerificationOfDependencyPomTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -40,6 +39,8 @@ public MavenITmng3470StrictCheckumVerificationOfDependencyPomTest()
 
     /**
      * Verify that strict checksum verification fails the build in case a dependency POM is corrupt.
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3475BaseAlignedDirTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -44,6 +43,8 @@ public MavenITmng3475BaseAlignedDirTest()
 
     /**
      * Verify that project directories are basedir aligned when queried by plugin parameter expressions.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3475()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3477DependencyResolutionErrorMessageTest.java
Patch:
@@ -19,16 +19,13 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
 import java.util.List;
 
 /**
  * This is a test set for <a href="https://issues.apache.org/jira/browse/MNG-3477">MNG-3477</a>.
- *
- *
  */
 public class MavenITmng3477DependencyResolutionErrorMessageTest
     extends AbstractMavenIntegrationTestCase
@@ -41,6 +38,8 @@ public MavenITmng3477DependencyResolutionErrorMessageTest()
 
     /**
      * Tests that dependency resolution errors tell the underlying transport issue.
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3482DependencyPomInterpolationTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3485OverrideWagonExtensionTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3498ForkToOtherMojoTest.java
Patch:
@@ -19,15 +19,14 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
 
 /**
  * This is a test set for <a href="https://issues.apache.org/jira/browse/MNG-3498">MNG-3498</a>.
  *
- * @todo Fill in a better description of what this test verifies!
+ * todo Fill in a better description of what this test verifies!
  *
  * @author <a href="mailto:brianf@apache.org">Brian Fox</a>
  * @author jdcasey

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3529QuotedCliArgTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -41,6 +40,8 @@ public MavenITmng3529QuotedCliArgTest()
 
     /**
      * Verify that the command line processing doesn't choke on things like -Da=" ".
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3530DynamicPOMInterpolationTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3535SelfReferentialPropertiesTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3536AppendedAbsolutePathsTest.java
Patch:
@@ -20,7 +20,6 @@
  */
 
 import org.apache.maven.it.util.ResourceExtractor;
-import org.apache.maven.it.Verifier;
 
 import java.io.File;
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3575HexadecimalOctalPluginParameterConfigTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -39,6 +38,8 @@ public MavenITmng3575HexadecimalOctalPluginParameterConfigTest()
 
     /**
      * Verify that numeric plugin parameters can be configured using hexadecimal/octal notation.
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3581PluginUsesWagonDependencyTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -41,6 +40,8 @@ public MavenITmng3581PluginUsesWagonDependencyTest()
 
     /**
      * Test that a plugin using a specific wagon implementation directly works.
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3599useHttpProxyForWebDAVMk2Test.java
Patch:
@@ -190,6 +190,8 @@ public void testitUseHttpProxyForHttp()
 
     /**
      * Test that HTTP proxy is used for HTTP and for WebDAV.
+     *
+     * @throws Exception in case of failure
      */
     public void testitUseHttpProxyForWebDAV()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3599useHttpProxyForWebDAVTest.java
Patch:
@@ -177,6 +177,8 @@ public void testitUseHttpProxyForHttp()
 
     /**
      * Test that HTTP proxy is used for HTTP and for WebDAV.
+     *
+     * @throws Exception in case of failure
      */
     public void testitUseHttpProxyForWebDAV()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3600DeploymentModeDefaultsTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3607ClassLoadersUseValidUrlsTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -43,6 +42,8 @@ public MavenITmng3607ClassLoadersUseValidUrlsTest()
 
     /**
      * Test that class loaders created by Maven employ valid URLs, e.g. properly encode characters like spaces.
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3621UNCInheritedPathsTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng3621UNCInheritedPathsTest()
 
     /**
      * Verifies that UNC paths are inherited correctly.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3621()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3642DynamicResourcesTest.java
Patch:
@@ -21,13 +21,12 @@
 
 import java.io.File;
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
  * This is a test set for <a href="https://issues.apache.org/jira/browse/MNG-3642">MNG-3642</a>.
  *
- * @todo Fill in a better description of what this test verifies!
+ * todo Fill in a better description of what this test verifies!
  *
  * @author <a href="mailto:brianf@apache.org">Brian Fox</a>
  * @author jdcasey

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3645POMSyntaxErrorTest.java
Patch:
@@ -19,16 +19,14 @@
  * under the License.
  */
 
-import org.apache.maven.it.VerificationException;
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
 
 /**
  * This is a test set for <a href="https://issues.apache.org/jira/browse/MNG-3645">MNG-3645</a>.
  *
- * @todo Fill in a better description of what this test verifies!
+ * todo Fill in a better description of what this test verifies!
  *
  * @author <a href="mailto:brianf@apache.org">Brian Fox</a>
  * @author jdcasey
@@ -45,6 +43,8 @@ public MavenITmng3645POMSyntaxErrorTest()
 
     /**
      * Verify that POMs of reactor projects are parsed in strict mode.
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3652UserAgentHeaderTest.java
Patch:
@@ -34,8 +34,6 @@
 
 /**
  * This is a test set for <a href="https://issues.apache.org/jira/browse/MNG-3652">MNG-3652</a>.
- *
- *
  */
 public class MavenITmng3652UserAgentHeaderTest
     extends AbstractMavenIntegrationTestCase
@@ -105,6 +103,8 @@ protected void tearDown()
 
     /**
      * Test that the user agent header is configured in the wagon manager.
+     *
+     * @throws Exception in case of failure
      */
     public void testmng3652_UnConfiguredHttp()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3667ResolveDepsWithBadPomVersionTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.io.File;
 import java.util.List;
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
@@ -44,6 +43,8 @@ public MavenITmng3667ResolveDepsWithBadPomVersionTest()
     /**
      * Verify that dependency resolution gracefully ignores dependency POMs that have coordinates which don't
      * match the deployed artifact.
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3671PluginLevelDepInterpolationTest.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.io.File;
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3679PluginExecIdInterpolationTest.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.io.File;
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3680InvalidDependencyPOMTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.io.File;
 import java.util.List;
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
@@ -41,6 +40,8 @@ public MavenITmng3680InvalidDependencyPOMTest()
 
     /**
      * Verify that dependencies with invalid POMs can still be used without failing the build.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3680 ()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3684BuildPluginParameterTest.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.io.File;
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3694ReactorProjectsDynamismTest.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.io.File;
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3701ImplicitProfileIdTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng3701ImplicitProfileIdTest()
     /**
      * Verify that profiles without explicit id get a default id and in particular don't cause NPEs when
      * they are active by default.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3701()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3703ExecutionProjectWithRelativePathsTest.java
Patch:
@@ -21,13 +21,13 @@
 
 import java.io.File;
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
  * This is a test set for <a href="https://issues.apache.org/jira/browse/MNG-3703">MNG-3703</a>.
  *
- * @todo Fill in a better description of what this test verifies!
+ * todo Fill in a better description of what this test verifies!
+ *
  * @author <a href="mailto:brianf@apache.org">Brian Fox</a>
  * @author jdcasey
  */

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3704LifecycleExecutorWrapperTest.java
Patch:
@@ -21,13 +21,12 @@
 
 import java.io.File;
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
  * This is a test set for <a href="https://issues.apache.org/jira/browse/MNG-3704">MNG-3704</a>.
  *
- * @todo Fill in a better description of what this test verifies!
+ * todo Fill in a better description of what this test verifies!
  *
  * @author <a href="mailto:brianf@apache.org">Brian Fox</a>
  * @author jdcasey

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3710PollutedClonedPluginsTest.java
Patch:
@@ -28,9 +28,11 @@
 /**
  * This is a test set for <a href="https://issues.apache.org/jira/browse/MNG-3710">MNG-3710</a>.
  *
+ * todo Fill in a better description of what this test verifies!
+ *
  * @author <a href="mailto:brianf@apache.org">Brian Fox</a>
  * @author jdcasey
- * @todo Fill in a better description of what this test verifies!
+ *
  */
 public class MavenITmng3710PollutedClonedPluginsTest
     extends AbstractMavenIntegrationTestCase

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3714ToolchainsCliOptionTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -41,6 +40,8 @@ public MavenITmng3714ToolchainsCliOptionTest()
 
     /**
      * Test --toolchains CLI option
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3714()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3716AggregatorForkingTest.java
Patch:
@@ -21,13 +21,12 @@
 
 import java.io.File;
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
  * This is a test set for <a href="https://issues.apache.org/jira/browse/MNG-3716">MNG-3716</a>.
  *
- * @todo Fill in a better description of what this test verifies!
+ * todo Fill in a better description of what this test verifies!
  *
  * @author <a href="mailto:brianf@apache.org">Brian Fox</a>
  * @author jdcasey
@@ -41,7 +40,7 @@ public MavenITmng3716AggregatorForkingTest()
         super( "(2.0.8,)" ); // only test in 2.0.9+
     }
 
-    public void testitMNG3716 ()
+    public void testitMNG3716()
         throws Exception
     {
         File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3716" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3719PomExecutionOrderingTest.java
Patch:
@@ -43,6 +43,8 @@ public MavenITmng3719PomExecutionOrderingTest()
 
     /**
      * Test that 3 executions are run in the correct order.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3719()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3723ConcreteParentProjectTest.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.io.File;
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3724ExecutionProjectSyncTest.java
Patch:
@@ -21,13 +21,12 @@
 
 import java.io.File;
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
  * This is a test set for <a href="https://issues.apache.org/jira/browse/MNG-3724">MNG-3724</a>.
  *
- * @todo Fill in a better description of what this test verifies!
+ * todo Fill in a better description of what this test verifies!
  *
  * @author <a href="mailto:brianf@apache.org">Brian Fox</a>
  * @author jdcasey

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3729MultiForkAggregatorsTest.java
Patch:
@@ -21,17 +21,16 @@
 
 import java.io.File;
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
  * This is a test set for <a href="https://issues.apache.org/jira/browse/MNG-3729">MNG-3729</a>.
- * <br/><br/>
+ * <p>
  * Complicated use case, but say
  * you have an aggregator plugin that forks a lifecycle, and this aggregator is bound to the main lifecycle in a
  * multimodule build. Further, say you call another plugin directly from the command line for this multimodule build,
  * which forks a new lifecycle (like assembly:assembly).
- * <br/><br/>
+ * </p>
  * When the directly invoked aggregator forks, it will force the
  * forked lifecycle phase to be run for each project in the reactor, regardless of whether this causes the bound
  * aggregator mojo to run multiple times. When the bound aggregator executes for the first project (this will be in an

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3732ActiveProfilesTest.java
Patch:
@@ -32,7 +32,6 @@
  * This is a test set for <a href="https://issues.apache.org/jira/browse/MNG-3732">MNG-3732</a>.
  *
  * @author Benjamin Bentmann
- *
  */
 public class MavenITmng3732ActiveProfilesTest
     extends AbstractMavenIntegrationTestCase
@@ -45,6 +44,8 @@ public MavenITmng3732ActiveProfilesTest()
 
     /**
      * Verify that MavenProject.getActiveProfiles() includes profiles from all sources.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3732()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3740SelfReferentialReactorProjectsTest.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.io.File;
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3743ForkWithPluginManagementTest.java
Patch:
@@ -21,13 +21,12 @@
 
 import java.io.File;
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
  * This is a test set for <a href="https://issues.apache.org/jira/browse/MNG-3743">MNG-3743</a>.
  *
- * @todo Fill in a better description of what this test verifies!
+ * todo Fill in a better description of what this test verifies!
  *
  * @author <a href="mailto:brianf@apache.org">Brian Fox</a>
  * @author jdcasey

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3746POMPropertyOverrideTest.java
Patch:
@@ -21,13 +21,13 @@
 
 import java.io.File;
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
  * This is a test set for <a href="https://issues.apache.org/jira/browse/MNG-3746">MNG-3746</a>.
  *
- * @todo Fill in a better description of what this test verifies!
+ * todo Fill in a better description of what this test verifies!
+ *
  * @author <a href="mailto:brianf@apache.org">Brian Fox</a>
  * @author jdcasey
  */

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3747PrefixedPathExpressionTest.java
Patch:
@@ -22,13 +22,12 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
  * This is a test set for <a href="https://issues.apache.org/jira/browse/MNG-3747">MNG-3747</a>.
  *
- * @todo Fill in a better description of what this test verifies!
+ * todo Fill in a better description of what this test verifies!
  *
  * @author <a href="mailto:brianf@apache.org">Brian Fox</a>
  * @author jdcasey

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3748BadSettingsXmlTest.java
Patch:
@@ -22,8 +22,6 @@
 import java.io.File;
 import java.util.List;
 
-import org.apache.maven.it.VerificationException;
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3760BaseUriPropertyTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.io.File;
 import java.util.Properties;
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3766ToolchainsFromExtensionTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -41,6 +40,8 @@ public MavenITmng3766ToolchainsFromExtensionTest()
 
     /**
      * Test toolchain discovery from build extensions.
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3769ExclusionRelocatedTransdepsTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -43,6 +42,8 @@ public MavenITmng3769ExclusionRelocatedTransdepsTest()
 
     /**
      * Verify that dependency resolution considers dependency management also for relocated artifacts.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3769()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3775ConflictResolutionBacktrackingTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3796ClassImportInconsistencyTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng3796ClassImportInconsistencyTest()
 
     /**
      * Verify that classes shared with the Maven core realm are properly imported into the plugin realm.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3796()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3805ExtensionClassPathOrderingTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -43,6 +42,8 @@ public MavenITmng3805ExtensionClassPathOrderingTest()
     /**
      * Verify that the extension manager respects the ordering of the extension's dependencies when setting up the
      * class realm.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3805()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3807PluginConfigExpressionEvaluationTest.java
Patch:
@@ -41,6 +41,8 @@ public MavenITmng3807PluginConfigExpressionEvaluationTest()
     /**
      * Verify that plugin configurations are subject to the parameter expression evaluator, in particular composite
      * parameter types.
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3808ReportInheritenceOrderingTest.java
Patch:
@@ -41,6 +41,8 @@ public MavenITmng3808ReportInheritenceOrderingTest()
 
     /**
      * Test that 3 executions are run in the correct order.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3808()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3810BadProfileActivationTest.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.io.File;
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3811ReportingPluginConfigurationInheritanceTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng3811ReportingPluginConfigurationInheritanceTest()
 
     /**
      * Verifies that reporting configuration is inherited properly.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3811()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3813PluginClassPathOrderingTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng3813PluginClassPathOrderingTest()
 
     /**
      * Verify that the ordering of the plugin class path matches the ordering of the dependencies as given in the POM.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3813()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3814BogusProjectCycleTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -41,6 +40,8 @@ public MavenITmng3814BogusProjectCycleTest()
 
     /**
      * Verify that the reactor's project sorter considers artifact versions when checking for cycles.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3814()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3819PluginDepPlexusUtilsTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -44,6 +43,8 @@ public MavenITmng3819PluginDepPlexusUtilsTest()
      * Verify that plexus-utils:1.1 is present on plugin class path if plexus-utils is not explicitly declared in
      * plugin POM for backward-compat with Maven 2.0.5- (due to MNG-2892, plexus-utils is no longer part of the core
      * class realm in Maven 2.0.6+).
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3819()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3821EqualPluginExecIdsTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng3821EqualPluginExecIdsTest()
     /**
      * Verify that using the same id for executions/reportsets of different plugins doesn't blow up the project
      * builder.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3821()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3822BasedirAlignedInterpolationTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng3822BasedirAlignedInterpolationTest()
 
     /**
      * Verify that POM interpolation uses basedir-aligned build directories.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3822()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3827PluginConfigTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng3827PluginConfigTest()
 
     /**
      * Verify that plain plugin configuration works correctly.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3827()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3831PomInterpolationTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng3831PomInterpolationTest()
 
     /**
      * Test that expressions of the form ${*} resolve correctly to POM values (ugly but real).
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3831()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3833PomInterpolationDataFlowChainTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -43,6 +42,8 @@ public MavenITmng3833PomInterpolationDataFlowChainTest()
     /**
      * Test that POM interpolation fully interpolates all properties in data flow chain, i.e. where property
      * A depends on property B, and property B depends on property C and so on.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3833()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3836PluginConfigInheritanceTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng3836PluginConfigInheritanceTest()
 
     /**
      * Verify that sub modules can *override* inherited plugin configuration.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3836()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3838EqualPluginDepsTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -40,6 +39,8 @@ public MavenITmng3838EqualPluginDepsTest()
 
     /**
      * Verify that using the same dependency for different plugins doesn't blow up the project builder.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3838()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3839PomParsingCoalesceTextTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng3839PomParsingCoalesceTextTest()
 
     /**
      * Test that POM parsing properly coalesces text data.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3839()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3843PomInheritanceTest.java
Patch:
@@ -45,6 +45,8 @@ public MavenITmng3843PomInheritanceTest()
 
     /**
      * Test various inheritance scenarios.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3843()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3845LimitedPomInheritanceTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng3845LimitedPomInheritanceTest()
 
     /**
      * Test that inheritance is all-or-nothing for certain sub-trees of the POM.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3845()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3852PluginConfigWithHeterogeneousListTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -43,6 +42,8 @@ public MavenITmng3852PluginConfigWithHeterogeneousListTest()
     /**
      * Verify that list-valued plugin parameters respect the ordering of their elements as given in the POM, even
      * if these elements have different names.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3852()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3853ProfileInjectedDistReposTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -46,6 +45,8 @@ public MavenITmng3853ProfileInjectedDistReposTest()
      * this issue is not primarily about the effective model (which was correct for the original issue, i.e. reflected
      * the injected distributionManagement section) but whether the MavenProject wrapper around the model is in sync
      * with the model.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3853()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3863AutoPluginGroupIdTest.java
Patch:
@@ -19,8 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
-import org.apache.maven.it.VerificationException;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +40,8 @@ public MavenITmng3863AutoPluginGroupIdTest()
 
     /**
      * Verify that the group id "org.apache.maven.plugins" is *not* automatically assumed for dependencies.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3853()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3864PerExecPluginConfigTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng3864PerExecPluginConfigTest()
 
     /**
      * Verify that plain per-execution plugin configuration works correctly.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3864()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3866PluginConfigInheritanceTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -43,6 +42,8 @@ public MavenITmng3866PluginConfigInheritanceTest()
     /**
      * Verify that inheritance merges plugin definitions based on groupId:artifactId, i.e. plugin version is
      * irrelevant for merging.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3866()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3872ProfileActivationInRelocatedPomTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng3872ProfileActivationInRelocatedPomTest()
 
     /**
      * Verify that profiles are activated in relocated POMs.
+     *
+     * @throws Exception in case of failure
      */
     public void testit()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3877BasedirAlignedModelTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -43,6 +42,8 @@ public MavenITmng3877BasedirAlignedModelTest()
 
     /**
      * Verify that project directories are basedir aligned when inspected by plugins via the MavenProject instance.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3877()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3890TransitiveDependencyScopeUpdateTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng3890TransitiveDependencyScopeUpdateTest()
     /**
      * Test that transitive dependencies whose scope has been updated from "compile" to "provided" by a consumer
      * remain in "provided" scope when depending on this consumer with scope "compile".
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3890()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3892ReleaseDeploymentTest.java
Patch:
@@ -43,6 +43,8 @@ public MavenITmng3892ReleaseDeploymentTest()
     /**
      * Test that a bunch of release artifacts can be deployed without the deployer erroneously complaining about
      * already deployed artifacts.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3892()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3899ExtensionInheritanceTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng3899ExtensionInheritanceTest()
 
     /**
      * Test that build extensions are properly merged during inheritance.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3899()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3900ProfilePropertiesInterpolationTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng3900ProfilePropertiesInterpolationTest()
 
     /**
      * Test that build properties defined via active profiles are used for interpolation.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3900()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3904NestedBuildDirInterpolationTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -43,6 +42,8 @@ public MavenITmng3904NestedBuildDirInterpolationTest()
     /**
      * Test that properties which refer to build directories which in turn refer to other build directories are
      * properly interpolated.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3904()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3906MergedPluginClassPathOrderingTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng3906MergedPluginClassPathOrderingTest()
 
     /**
      * Test that project-level plugin dependencies are properly merged during inheritance.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3906()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3916PluginExecutionInheritanceTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -45,6 +44,8 @@ public MavenITmng3916PluginExecutionInheritanceTest()
     /**
      * Test that plugin executions are properly merged during inheritance, even if the child plugin section has no
      * version.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3916()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3924XmlMarkupInterpolationTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -43,6 +42,8 @@ public MavenITmng3924XmlMarkupInterpolationTest()
 
     /**
      * Test that interpolation of properties that resolve to XML markup doesn't crash the project builder.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3924()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3927PluginDefaultExecutionConfigTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -42,6 +41,8 @@ public MavenITmng3927PluginDefaultExecutionConfigTest()
     /**
      * Test that the configuration for a plugin execution without an identifier does not pollute the configuration
      * of default plugin executions introduced by the packaging.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3927()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3933ProfilesXmlActivationTest.java
Patch:
@@ -45,6 +45,8 @@ public MavenITmng3933ProfilesXmlActivationTest()
     /**
      * Test that profiles from an external profiles.xml are properly activated. This is really a different story
      * than profiles in the settings.xml or the POM.
+     *
+     * @throws Exception in case of failure
      */
     public void testitMNG3933()
         throws Exception

File: its/core-it-support/core-it-plugins/maven-it-plugin-active-collection/src/main/java/org/apache/maven/plugin/coreit/CheckThreadSafetyMojo.java
Patch:
@@ -21,7 +21,6 @@
 
 import org.apache.maven.plugin.AbstractMojo;
 import org.apache.maven.plugin.MojoExecutionException;
-import org.apache.maven.plugin.MojoFailureException;
 
 import java.io.File;
 import java.io.FileOutputStream;
@@ -75,7 +74,7 @@ public class CheckThreadSafetyMojo
     /**
      * Runs this mojo.
      *
-     * @throws MojoFailureException If the output file could not be created.
+     * @throws MojoExecutionException If the output file could not be created.
      */
     public void execute()
         throws MojoExecutionException

File: its/core-it-support/core-it-plugins/maven-it-plugin-artifact/src/main/java/org/apache/maven/plugin/coreit/ResolveMojo.java
Patch:
@@ -26,7 +26,6 @@
 import org.apache.maven.model.Dependency;
 import org.apache.maven.plugin.AbstractMojo;
 import org.apache.maven.plugin.MojoExecutionException;
-import org.apache.maven.plugin.MojoFailureException;
 
 import java.io.File;
 import java.io.FileOutputStream;
@@ -94,7 +93,7 @@ public class ResolveMojo
     /**
      * Runs this mojo.
      *
-     * @throws MojoFailureException If the artifact could not be resolved
+     * @throws MojoExecutionException If the artifact could not be resolved
      */
     public void execute()
         throws MojoExecutionException

File: its/core-it-support/core-it-plugins/maven-it-plugin-expression/src/main/java/org/apache/maven/plugin/coreit/EvalMojo.java
Patch:
@@ -36,7 +36,7 @@
  * value but can also be a collection/array or a bean-like object (from the Maven model). For example, the expression
  * "project/dependencies/0" would extract the first project dependency. In more detail, this example expression could
  * output the following keys to the properties file:
- * <p/>
+ *
  * <pre>
  * project.dependencies.0.groupId = org.apache.maven
  * project.dependencies.0.artifactId = maven-project
@@ -49,7 +49,7 @@
  * project.dependencies.0.exclusions.1.groupId = plexus
  * project.dependencies.0.exclusions.1.artifactId = plexus-container-default
  * </pre>
- * <p/>
+ *
  * Expressions that reference non-existing objects or use invalid collection/array indices silently resolve to
  * <code>null</code>. For collections and arrays, the special index "*" can be used to iterate all elements.
  *

File: its/core-it-support/core-it-plugins/maven-it-plugin-log4j/src/main/java/org/apache/maven/plugin/coreit/ItMojo.java
Patch:
@@ -29,7 +29,6 @@
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.plugin.AbstractMojo;
 import org.apache.maven.plugin.MojoExecutionException;
-import org.apache.maven.plugin.MojoFailureException;
 
 /**
  * Resolves an artifact and has an (unused) dependency on log4j.
@@ -86,7 +85,7 @@ public class ItMojo
      * Runs this mojo.
      *
      * @throws MojoExecutionException If the output file could not be created.
-     * @throws MojoFailureException If the output file has not been set.
+     * or if the output file has not been set.
      */
     public void execute()
         throws MojoExecutionException

File: its/core-it-support/core-it-plugins/maven-it-plugin-project/src/main/java/org/apache/maven/plugin/coreit/BuildLocalPomMojo.java
Patch:
@@ -21,7 +21,6 @@
 
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.plugin.MojoExecutionException;
-import org.apache.maven.plugin.MojoFailureException;
 import org.apache.maven.project.MavenProject;
 
 import java.io.File;
@@ -63,7 +62,7 @@ public class BuildLocalPomMojo
     /**
      * Runs this mojo.
      *
-     * @throws MojoFailureException If the artifact file has not been set.
+     * @throws MojoExecutionException If the artifact file has not been set.
      */
     public void execute()
         throws MojoExecutionException

File: its/core-it-support/core-it-plugins/maven-it-plugin-project/src/main/java/org/apache/maven/plugin/coreit/BuildRemotePomMojo.java
Patch:
@@ -24,7 +24,6 @@
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.model.Dependency;
 import org.apache.maven.plugin.MojoExecutionException;
-import org.apache.maven.plugin.MojoFailureException;
 import org.apache.maven.project.MavenProject;
 
 import java.io.File;
@@ -84,7 +83,7 @@ public class BuildRemotePomMojo
     /**
      * Runs this mojo.
      *
-     * @throws MojoFailureException If the artifact file has not been set.
+     * @throws MojoExecutionException If the artifact file has not been set.
      */
     public void execute()
         throws MojoExecutionException

File: maven-compat/src/main/java/org/apache/maven/artifact/resolver/DefaultArtifactResolver.java
Patch:
@@ -505,7 +505,6 @@ public ArtifactResolutionResult resolve( ArtifactResolutionRequest request )
         if ( result.hasMetadataResolutionExceptions() || result.hasVersionRangeViolations()
             || result.hasCircularDependencyExceptions() )
         {
-            logger.info( "Failure detected." );
             return result;
         }
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng6090CIFriendlyTest.java
Patch:
@@ -85,6 +85,7 @@ public void testitShouldResolveTheDependenciesWithBuildConsumer()
         Verifier verifier = newVerifier( testDir.getAbsolutePath(), false );
         verifier.setMavenDebug( false );
         verifier.setAutoclean( false );
+        verifier.setForkJvm(true);
 
         verifier.addCliOption( "-Drevision=1.2" );
         verifier.addCliOption( "-Dmaven.experimental.buildconsumer=true" );
@@ -96,6 +97,7 @@ public void testitShouldResolveTheDependenciesWithBuildConsumer()
         verifier = newVerifier( testDir.getAbsolutePath(), false );
         verifier.setMavenDebug( false );
         verifier.setAutoclean( false );
+        verifier.setForkJvm(true);
 
         verifier.addCliOption( "-Drevision=1.2" );
         verifier.addCliOption( "-pl module-3" );

File: maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java
Patch:
@@ -101,8 +101,7 @@ public VersionRange cloneOf()
      *
      * @param spec string representation of a version or version range
      * @return a new {@link VersionRange} object that represents the spec
-     * @throws InvalidVersionSpecificationException
-     *
+     * @throws InvalidVersionSpecificationException if invalid version specification
      */
     public static VersionRange createFromVersionSpec( String spec )
         throws InvalidVersionSpecificationException

File: maven-builder-support/src/main/java/org/apache/maven/building/ProblemCollector.java
Patch:
@@ -46,7 +46,7 @@ public interface ProblemCollector
      * The next messages will be bound to this source. When calling this method again, previous messages keep
      * their source, but the next messages will use the new source.
      *
-     * @param source
+     * @param source a source
      */
     void setSource( String source );
 

File: maven-builder-support/src/main/java/org/apache/maven/building/Source.java
Patch:
@@ -34,6 +34,7 @@ public interface Source
      * Gets a byte stream to the source contents. Closing the returned stream is the responsibility of the caller.
      *
      * @return A byte stream to the source contents, never {@code null}.
+     * @throws IOException in case of IO issue
      */
     InputStream getInputStream()
         throws IOException;

File: maven-compat/src/main/java/org/apache/maven/artifact/manager/WagonManager.java
Patch:
@@ -40,6 +40,9 @@ public interface WagonManager
     /**
      * this method is only here for backward compat (project-info-reports:dependencies)
      * the default implementation will return an empty AuthenticationInfo
+     *
+     * @param id an id
+     * @return corresponding authentication info
      */
     AuthenticationInfo getAuthenticationInfo( String id );
 

File: maven-compat/src/main/java/org/apache/maven/artifact/repository/metadata/DefaultRepositoryMetadataManager.java
Patch:
@@ -311,7 +311,7 @@ private boolean loadMetadata( RepositoryMetadata repoMetadata, ArtifactRepositor
         return setRepository;
     }
 
-    /**
+    /*
      * TODO share with DefaultPluginMappingManager.
      */
     protected Metadata readMetadata( File mappingFile )

File: maven-core/src/main/java/org/apache/maven/artifact/repository/metadata/RepositoryMetadataManager.java
Patch:
@@ -48,6 +48,7 @@ void resolveAlways( RepositoryMetadata metadata, ArtifactRepository localReposit
      * @param metadata             the metadata to deploy
      * @param localRepository      the local repository to install to first
      * @param deploymentRepository the remote repository to deploy to
+     * @throws RepositoryMetadataDeploymentException in case of metadata deployment issue
      */
     void deploy( ArtifactMetadata metadata, ArtifactRepository localRepository,
                  ArtifactRepository deploymentRepository )
@@ -58,6 +59,7 @@ void deploy( ArtifactMetadata metadata, ArtifactRepository localRepository,
      *
      * @param metadata        the metadata
      * @param localRepository the local repository
+     * @throws RepositoryMetadataInstallationException in case of metadata installation issue
      */
     void install( ArtifactMetadata metadata, ArtifactRepository localRepository )
         throws RepositoryMetadataInstallationException;

File: maven-core/src/main/java/org/apache/maven/artifact/resolver/ArtifactResolutionResult.java
Patch:
@@ -189,6 +189,9 @@ public boolean hasVersionRangeViolations()
      * TODO this needs to accept a {@link OverConstrainedVersionException} as returned by
      *       {@link #getVersionRangeViolation(int)} but it's not used like that in
      *       DefaultLegacyArtifactCollector
+     *
+     * @param e an exception
+     * @return {@code this}
      */
     public ArtifactResolutionResult addVersionRangeViolation( Exception e )
     {

File: maven-core/src/main/java/org/apache/maven/artifact/resolver/ResolutionNode.java
Patch:
@@ -113,7 +113,7 @@ public void addDependencies( Set<Artifact> artifacts, List<ArtifactRepository> r
 
     /**
      * @return {@link List} &lt; {@link String} &gt; with artifact ids
-     * @throws OverConstrainedVersionException
+     * @throws OverConstrainedVersionException if version specification is over constrained
      */
     public List<String> getDependencyTrail()
         throws OverConstrainedVersionException
@@ -172,6 +172,8 @@ public boolean isResolved()
 
     /**
      * Test whether the node is direct or transitive dependency.
+     *
+     * @return whether the node is direct or transitive dependency
      */
     public boolean isChildOfRootNode()
     {

File: maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java
Patch:
@@ -614,8 +614,8 @@ public Set<String> getRepoIds( List<ArtifactRepository> repositories )
     /**
      * Source from org.apache.maven.repository.legacy.LegacyRepositorySystem#getEffectiveRepositories
      *
-     * @param repositories
-     * @return
+     * @param repositories a list of repositories
+     * @return corresponding effective repositories
      * @since 3.6.1
      */
     public List<ArtifactRepository> getEffectiveRepositories( List<ArtifactRepository> repositories )

File: maven-core/src/main/java/org/apache/maven/classrealm/ClassRealmRequest.java
Patch:
@@ -72,6 +72,7 @@ enum RealmType
 
     /**
      * @deprecated Use {@link #getParentImports()} instead.
+     * @return imports
      */
     @Deprecated
     List<String> getImports();

File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java
Patch:
@@ -167,7 +167,7 @@ public DefaultModelBuilder(
 
     /**
      * @deprecated since Maven 4
-     * @see DefaultModelBuilderFactory#set
+     * @see DefaultModelBuilderFactory#setModelProcessor(ModelProcessor) 
      */
     @Deprecated
     public DefaultModelBuilder setModelProcessor( ModelProcessor modelProcessor )
@@ -223,7 +223,7 @@ public DefaultModelBuilder setModelInterpolator( ModelInterpolator modelInterpol
 
     /**
      * @deprecated since Maven 4
-     * @see DefaultModelBuilderFactory#set
+     * @see DefaultModelBuilderFactory#setModelPathTranslator(ModelPathTranslator)
      */
     @Deprecated
     public DefaultModelBuilder setModelPathTranslator( ModelPathTranslator modelPathTranslator )
@@ -279,7 +279,7 @@ public DefaultModelBuilder setInheritanceAssembler( InheritanceAssembler inherit
 
     /**
      * @deprecated since Maven 4
-     * @see DefaultModelBuilderFactory#set
+     * @see DefaultModelBuilderFactory#setProfileSelector(ProfileSelector)
      */
     @Deprecated
     public DefaultModelBuilder setProfileSelector( ProfileSelector profileSelector )

File: maven-model-builder/src/main/java/org/apache/maven/model/building/Result.java
Patch:
@@ -39,7 +39,7 @@
  * Could encode these variants as subclasses, but kept in one for now
  *
  * @author bbusjaeger
- * @param <T>
+ * @param <T> the model type
  */
 public class Result<T>
 {

File: maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java
Patch:
@@ -2640,7 +2640,7 @@ protected KeyComputer<Exclusion> getExclusionKey()
 
     /**
      * Use to compute keys for data structures
-     * @param <T>
+     * @param <T> the data structure type
      */
     @FunctionalInterface
     public interface KeyComputer<T> extends Function<T, Object>

File: maven-core/src/main/java/org/apache/maven/DefaultMaven.java
Patch:
@@ -371,7 +371,7 @@ private void afterSessionStart( MavenSession session )
         throws MavenExecutionException
     {
         // CHECKSTYLE_OFF: LineLength
-        for ( AbstractMavenLifecycleParticipant listener : getLifecycleParticipants( Collections.<MavenProject>emptyList() ) )
+        for ( AbstractMavenLifecycleParticipant listener : getLifecycleParticipants( Collections.emptyList() ) )
         // CHECKSTYLE_ON: LineLength
         {
             listener.afterSessionStart( session );

File: maven-core/src/main/java/org/apache/maven/RepositoryUtils.java
Patch:
@@ -121,7 +121,7 @@ public static void toArtifacts( Collection<org.apache.maven.artifact.Artifact> a
             nodeTrail.addAll( trail );
             nodeTrail.add( artifact.getId() );
 
-            if ( filter == null || filter.accept( node, Collections.<DependencyNode>emptyList() ) )
+            if ( filter == null || filter.accept( node, Collections.emptyList() ) )
             {
                 artifact.setDependencyTrail( nodeTrail );
                 artifacts.add( artifact );

File: maven-core/src/main/java/org/apache/maven/classrealm/DefaultClassRealmManager.java
Patch:
@@ -245,7 +245,7 @@ public ClassRealm createExtensionRealm( Plugin plugin, List<Artifact> artifacts
         Objects.requireNonNull( plugin, "plugin cannot be null" );
 
         Map<String, ClassLoader> foreignImports =
-            Collections.<String, ClassLoader>singletonMap( "", getMavenApiRealm() );
+            Collections.singletonMap( "", getMavenApiRealm() );
 
         return createRealm( getKey( plugin, true ), RealmType.Extension, PARENT_CLASSLOADER, null,
                 foreignImports, artifacts );

File: maven-core/src/main/java/org/apache/maven/exception/ExceptionSummary.java
Patch:
@@ -55,7 +55,7 @@ public ExceptionSummary( Throwable exception, String message, String reference,
         this.reference = ( reference != null ) ? reference : "";
         this.children = ( children != null )
                             ? Collections.unmodifiableList( children )
-                            : Collections.<ExceptionSummary>emptyList();
+                            : Collections.emptyList();
 
     }
 

File: maven-core/src/main/java/org/apache/maven/execution/scope/internal/MojoExecutionScopeModule.java
Patch:
@@ -52,8 +52,8 @@ protected void configure()
         bindScope( MojoExecutionScoped.class, scope );
         bind( MojoExecutionScope.class ).toInstance( scope );
 
-        bind( MavenProject.class ).toProvider( MojoExecutionScope.<MavenProject>seededKeyProvider() ).in( scope );
-        bind( MojoExecution.class ).toProvider( MojoExecutionScope.<MojoExecution>seededKeyProvider() ).in( scope );
+        bind( MavenProject.class ).toProvider( MojoExecutionScope.seededKeyProvider() ).in( scope );
+        bind( MojoExecution.class ).toProvider( MojoExecutionScope.seededKeyProvider() ).in( scope );
     }
 
 }

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java
Patch:
@@ -251,7 +251,7 @@ public void ensureDependenciesAreResolved( MojoDescriptor mojoDescriptor, MavenS
             Collection<String> scopesToResolve = dependencyContext.getScopesToResolveForCurrentProject();
 
             lifeCycleDependencyResolver.resolveProjectDependencies( project, scopesToCollect, scopesToResolve, session,
-                                                                    aggregating, Collections.<Artifact>emptySet() );
+                                                                    aggregating, Collections.emptySet() );
 
             dependencyContext.synchronizeWithProjectState();
         }
@@ -269,7 +269,7 @@ public void ensureDependenciesAreResolved( MojoDescriptor mojoDescriptor, MavenS
                     {
                         lifeCycleDependencyResolver.resolveProjectDependencies( aggregatedProject, scopesToCollect,
                                                                                 scopesToResolve, session, aggregating,
-                                                                                Collections.<Artifact>emptySet() );
+                                                                                Collections.emptySet() );
                     }
                 }
             }

File: maven-core/src/main/java/org/apache/maven/model/plugin/DefaultLifecycleBindingsInjector.java
Patch:
@@ -104,7 +104,7 @@ public void merge( Model target, Model source )
             }
 
             Map<Object, Object> context =
-                Collections.<Object, Object>singletonMap( PLUGIN_MANAGEMENT, target.getBuild().getPluginManagement() );
+                Collections.singletonMap( PLUGIN_MANAGEMENT, target.getBuild().getPluginManagement() );
 
             mergePluginContainer_Plugins( target.getBuild(), source.getBuild(), false, context );
         }

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java
Patch:
@@ -94,7 +94,7 @@ public CacheKey( Plugin plugin, ClassLoader parentRealm, Map<String, ClassLoader
             }
             this.parentRealm = parentRealm;
             this.foreignImports =
-                ( foreignImports != null ) ? foreignImports : Collections.<String, ClassLoader>emptyMap();
+                ( foreignImports != null ) ? foreignImports : Collections.emptyMap();
             this.filter = dependencyFilter;
 
             int hash = 17;

File: maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java
Patch:
@@ -453,7 +453,7 @@ private List<org.eclipse.aether.artifact.Artifact> toAetherArtifacts( final List
     private List<Artifact> toMavenArtifacts( DependencyNode root, PreorderNodeListGenerator nlg )
     {
         List<Artifact> artifacts = new ArrayList<>( nlg.getNodes().size() );
-        RepositoryUtils.toArtifacts( artifacts, Collections.singleton( root ), Collections.<String>emptyList(), null );
+        RepositoryUtils.toArtifacts( artifacts, Collections.singleton( root ), Collections.emptyList(), null );
         artifacts.removeIf( artifact -> artifact.getFile() == null );
         return Collections.unmodifiableList( artifacts );
     }

File: maven-core/src/main/java/org/apache/maven/project/DefaultDependencyResolutionResult.java
Patch:
@@ -100,7 +100,7 @@ public List<Exception> getResolutionErrors( Dependency dependency )
         List<Exception> errors = resolutionErrors.get( dependency );
         return ( errors != null )
                    ? Collections.unmodifiableList( errors )
-                   : Collections.<Exception>emptyList();
+                   : Collections.emptyList();
 
     }
 

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java
Patch:
@@ -56,7 +56,7 @@ public CacheKey( List<? extends ClassRealm> extensionRealms )
         {
             this.extensionRealms = ( extensionRealms != null )
                                        ? Collections.unmodifiableList( extensionRealms )
-                                       : Collections.<ClassRealm>emptyList();
+                                       : Collections.emptyList();
 
             this.hashCode = this.extensionRealms.hashCode();
         }

File: maven-core/src/main/java/org/apache/maven/project/MavenProject.java
Patch:
@@ -1422,7 +1422,7 @@ public DependencyFilter getExtensionDependencyFilter()
      */
     public void setResolvedArtifacts( Set<Artifact> artifacts )
     {
-        this.resolvedArtifacts = ( artifacts != null ) ? artifacts : Collections.<Artifact>emptySet();
+        this.resolvedArtifacts = ( artifacts != null ) ? artifacts : Collections.emptySet();
         ArtifactsHolder artifactsHolder = threadLocalArtifactsHolder.get();
         artifactsHolder.artifacts = null;
         artifactsHolder.artifactMap = null;

File: maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java
Patch:
@@ -115,10 +115,10 @@ public CacheKey( MavenProject project, List<RemoteRepository> repositories,
                 }
             }
             collect = scopesToCollect == null
-                ? Collections.<String>emptySet()
+                ? Collections.emptySet()
                 : Collections.unmodifiableSet( new HashSet<>( scopesToCollect ) );
             resolve = scopesToResolve == null
-                ? Collections.<String>emptySet()
+                ? Collections.emptySet()
                 : Collections.unmodifiableSet( new HashSet<>( scopesToResolve ) );
             this.aggregating = aggregating;
 

File: maven-core/src/main/java/org/apache/maven/project/artifact/ProjectArtifact.java
Patch:
@@ -61,7 +61,7 @@ public List<Dependency> getManagedDependencies()
         DependencyManagement depMngt = project.getDependencyManagement();
         return ( depMngt != null )
                    ? Collections.unmodifiableList( depMngt.getDependencies() )
-                   : Collections.<Dependency>emptyList();
+                   : Collections.emptyList();
 
     }
 

File: maven-core/src/main/java/org/apache/maven/session/scope/internal/SessionScope.java
Patch:
@@ -116,7 +116,7 @@ public void exit()
     public Memento memento()
     {
         LinkedList<ScopeState> stack = values.get();
-        return new Memento( stack != null ? stack.getFirst().seeded : Collections.<Key<?>, Provider<?>>emptyMap() );
+        return new Memento( stack != null ? stack.getFirst().seeded : Collections.emptyMap() );
     }
 
     public <T> void seed( Class<T> clazz, Provider<T> value )

File: maven-core/src/main/java/org/apache/maven/session/scope/internal/SessionScopeModule.java
Patch:
@@ -61,6 +61,6 @@ protected void configure()
         bindScope( SessionScoped.class, scope );
         bind( SessionScope.class ).toInstance( scope );
 
-        bind( MavenSession.class ).toProvider( SessionScope.<MavenSession>seededKeyProvider() ).in( scope );
+        bind( MavenSession.class ).toProvider( SessionScope.seededKeyProvider() ).in( scope );
     }
 }

File: maven-model-builder/src/main/java/org/apache/maven/model/building/Result.java
Patch:
@@ -51,7 +51,7 @@ public class Result<T>
      */
     public static <T> Result<T> success( T model )
     {
-        return success( model, Collections.<ModelProblem>emptyList() );
+        return success( model, Collections.emptyList() );
     }
 
     /**
@@ -99,7 +99,7 @@ public static <T> Result<T> error( Iterable<? extends ModelProblem> problems )
 
     public static <T> Result<T> error( T model )
     {
-        return error( model, Collections.<ModelProblem>emptyList() );
+        return error( model, Collections.emptyList() );
     }
 
     public static <T> Result<T> error( Result<?> result )

File: maven-plugin-api/src/main/java/org/apache/maven/plugin/descriptor/PluginDescriptor.java
Patch:
@@ -318,7 +318,7 @@ public Set<Artifact> getIntroducedDependencyArtifacts()
     {
         return ( introducedDependencyArtifacts != null )
             ? introducedDependencyArtifacts
-            : Collections.<Artifact>emptySet();
+            : Collections.emptySet();
     }
 
     public void setName( String name )

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenResolverModule.java
Patch:
@@ -34,6 +34,7 @@
 import org.eclipse.aether.impl.VersionRangeResolver;
 import org.eclipse.aether.impl.VersionResolver;
 import org.eclipse.aether.impl.guice.AetherModule;
+import org.eclipse.aether.version.VersionScheme;
 
 /**
  * MavenResolverModule
@@ -46,6 +47,7 @@ public final class MavenResolverModule
     protected void configure()
     {
         install( new AetherModule() );
+        bind( VersionScheme.class ).toProvider( new DefaultVersionSchemeProvider() );
         bind( ArtifactDescriptorReader.class ).to( DefaultArtifactDescriptorReader.class ).in( Singleton.class );
         bind( VersionResolver.class ).to( DefaultVersionResolver.class ).in( Singleton.class );
         bind( VersionRangeResolver.class ).to( DefaultVersionRangeResolver.class ).in( Singleton.class );

File: maven-core/src/test/java/org/apache/maven/lifecycle/DelegatingMojoExecutionListener.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.maven.execution.MojoExecutionEvent;
 import org.apache.maven.execution.MojoExecutionListener;
 import org.apache.maven.plugin.MojoExecutionException;
+import org.eclipse.sisu.Priority;
 
 @Named
 @Singleton

File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/BuilderCommonTest.java
Patch:
@@ -98,8 +98,7 @@ public void testGetKey()
     public BuilderCommon getBuilderCommon()
     {
         final LifecycleDebugLogger debugLogger = new LifecycleDebugLogger( logger );
-        return new BuilderCommon( debugLogger, new LifecycleExecutionPlanCalculatorStub(),
-                                  logger );
+        return new BuilderCommon( logger, debugLogger, new LifecycleExecutionPlanCalculatorStub(), null );
     }
 
 }

File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/LifecycleExecutionPlanCalculatorTest.java
Patch:
@@ -72,7 +72,7 @@ public static LifecycleExecutionPlanCalculator createExecutionPlaceCalculator( M
 
     public static MojoDescriptorCreator createMojoDescriptorCreator()
     {
-        return new MojoDescriptorCreator( new PluginVersionResolverStub(), new BuildPluginManagerStub(),
+        return new MojoDescriptorCreator( null, new PluginVersionResolverStub(), new BuildPluginManagerStub(),
                                           new PluginPrefixResolverStub(),
                                           new LifecyclePluginResolver( new PluginVersionResolverStub() ) );
     }

File: maven-model-builder/src/main/java/org/apache/maven/model/io/DefaultModelReader.java
Patch:
@@ -52,10 +52,10 @@
 public class DefaultModelReader
     implements ModelReader
 {
-    @Inject
-    private ModelSourceTransformer transformer;
+    private final ModelSourceTransformer transformer;
 
-    public void setTransformer( ModelSourceTransformer transformer )
+    @Inject
+    public DefaultModelReader( ModelSourceTransformer transformer )
     {
         this.transformer = transformer;
     }

File: maven-model-builder/src/test/java/org/apache/maven/model/inheritance/DefaultInheritanceAssemblerTest.java
Patch:
@@ -61,8 +61,7 @@ public class DefaultInheritanceAssemblerTest
     public void setUp()
         throws Exception
     {
-        reader = new DefaultModelReader();
-        reader.setTransformer( new AbstractModelSourceTransformer()
+        reader = new DefaultModelReader( new AbstractModelSourceTransformer()
         {
             @Override
             protected AbstractSAXFilter getSAXFilter( Path pomFile, TransformerContext context,

File: maven-model-builder/src/test/java/org/apache/maven/model/interpolation/StringVisitorModelInterpolatorTest.java
Patch:
@@ -23,6 +23,6 @@ public class StringVisitorModelInterpolatorTest extends AbstractModelInterpolato
 {
     protected ModelInterpolator createInterpolator()
     {
-        return new StringVisitorModelInterpolator();
+        return new StringVisitorModelInterpolator( null, null );
     }
 }
\ No newline at end of file

File: maven-artifact/src/main/java/org/apache/maven/artifact/handler/ArtifactHandler.java
Patch:
@@ -30,6 +30,7 @@
  */
 public interface ArtifactHandler
 {
+    @Deprecated
     String ROLE = ArtifactHandler.class.getName();
 
     /**

File: maven-core/src/main/java/org/apache/maven/project/artifact/PluginArtifact.java
Patch:
@@ -56,6 +56,7 @@ public List<Dependency> getManagedDependencies()
         return Collections.emptyList();
     }
 
+    // TODO: this is duplicate of MavenPluginArtifactHandlerProvider provided one
     static class PluginArtifactHandler
         implements ArtifactHandler
     {

File: maven-core/src/main/java/org/apache/maven/project/artifact/ProjectArtifact.java
Patch:
@@ -65,6 +65,7 @@ public List<Dependency> getManagedDependencies()
 
     }
 
+    // TODO: this is duplicate of PomArtifactHandlerProvider provided one
     static class PomArtifactHandler
         implements ArtifactHandler
     {

File: maven-model-builder/src/test/java/org/apache/maven/model/building/FileModelSourceTest.java
Patch:
@@ -22,7 +22,7 @@
 import java.io.File;
 import java.io.IOException;
 
-import org.apache.commons.lang3.SystemUtils;
+import org.codehaus.plexus.util.Os;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertFalse;
@@ -57,7 +57,7 @@ public void testEquals()
     public void testWindowsPaths()
             throws Exception
     {
-        assumeTrue( SystemUtils.IS_OS_WINDOWS );
+        assumeTrue( Os.isFamily( "Windows" ) );
 
         File upperCaseFile = createTempFile( "TESTE" );
         String absolutePath = upperCaseFile.getAbsolutePath();

File: its/core-it-support/core-it-plugins/maven-it-plugin-active-collection/src/main/java/org/apache/maven/plugin/coreit/CheckThreadSafetyMojo.java
Patch:
@@ -21,6 +21,7 @@
 
 import org.apache.maven.plugin.AbstractMojo;
 import org.apache.maven.plugin.MojoExecutionException;
+import org.apache.maven.plugin.MojoFailureException;
 
 import java.io.File;
 import java.io.FileOutputStream;

File: its/core-it-support/core-it-plugins/maven-it-plugin-artifact/src/main/java/org/apache/maven/plugin/coreit/ResolveMojo.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.maven.model.Dependency;
 import org.apache.maven.plugin.AbstractMojo;
 import org.apache.maven.plugin.MojoExecutionException;
+import org.apache.maven.plugin.MojoFailureException;
 
 import java.io.File;
 import java.io.FileOutputStream;

File: its/core-it-support/core-it-plugins/maven-it-plugin-log4j/src/main/java/org/apache/maven/plugin/coreit/ItMojo.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.plugin.AbstractMojo;
 import org.apache.maven.plugin.MojoExecutionException;
+import org.apache.maven.plugin.MojoFailureException;
 
 /**
  * Resolves an artifact and has an (unused) dependency on log4j.

File: its/core-it-support/core-it-plugins/maven-it-plugin-project/src/main/java/org/apache/maven/plugin/coreit/BuildLocalPomMojo.java
Patch:
@@ -21,6 +21,7 @@
 
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.plugin.MojoExecutionException;
+import org.apache.maven.plugin.MojoFailureException;
 import org.apache.maven.project.MavenProject;
 
 import java.io.File;

File: its/core-it-support/core-it-plugins/maven-it-plugin-project/src/main/java/org/apache/maven/plugin/coreit/BuildRemotePomMojo.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.model.Dependency;
 import org.apache.maven.plugin.MojoExecutionException;
+import org.apache.maven.plugin.MojoFailureException;
 import org.apache.maven.project.MavenProject;
 
 import java.io.File;

File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java
Patch:
@@ -636,7 +636,8 @@ private DefaultModelBuildingResult asDefaultModelBuildingResult( ModelBuildingRe
     public Result<? extends Model> buildRawModel( File pomFile, int validationLevel, boolean locationTracking )
     {
         final ModelBuildingRequest request = new DefaultModelBuildingRequest().setValidationLevel( validationLevel )
-            .setLocationTracking( locationTracking );
+            .setLocationTracking( locationTracking )
+            .setModelSource( new FileModelSource( pomFile ) );
         final DefaultModelProblemCollector collector =
             new DefaultModelProblemCollector( new DefaultModelBuildingResult() );
         try

File: maven-compat/src/main/java/org/apache/maven/profiles/activation/FileProfileActivator.java
Patch:
@@ -97,7 +97,7 @@ public boolean isActive( Profile profile )
                 else
                 {
                     logger.warn( "Failed to interpolate missing file location for profile activator: " + fileString
-                        + ". Run in debug mode (-X) for more information." );
+                        + ", enable verbose output (-X) for more details" );
                 }
             }
         }

File: maven-core/src/main/java/org/apache/maven/internal/aether/LoggingRepositoryListener.java
Patch:
@@ -128,7 +128,7 @@ public void artifactDescriptorInvalid( RepositoryEvent event )
         }
         else
         {
-            logger.warn( buffer + ", enable debug logging for more details" );
+            logger.warn( buffer + ", enable verbose output (-X) for more details" );
         }
     }
 

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/BuilderCommon.java
Patch:
@@ -157,7 +157,8 @@ public MavenExecutionPlan resolveBuildPlan( MavenSession session, MavenProject p
                     {
                         logger.warn( unsafePlugin.getId() );
                     }
-                    logger.warn( "Enable debug to see more precisely which goals are not marked @threadSafe." );
+                    logger.warn( "Enable verbose output (-X) to see more precisely which goals are not marked"
+                            + " @threadSafe." );
                 }
                 logger.warn( "*****************************************************************" );
             }

File: maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java
Patch:
@@ -623,7 +623,7 @@ else if ( isNonTransferrablePom( e ) )
                         message =
                             "Invalid POM for " + artifact.getId()
                                 + ", transitive dependencies (if any) will not be available"
-                                + ", enable debug logging for more details";
+                                + ", enable verbose output (-X) for more details";
                     }
 
                     if ( logger.isDebugEnabled() )

File: maven-embedder/src/main/java/org/apache/maven/cli/CliRequest.java
Patch:
@@ -42,7 +42,7 @@ public class CliRequest
 
     File multiModuleProjectDirectory;
 
-    boolean debug;
+    boolean verbose;
 
     boolean quiet;
 
@@ -86,9 +86,9 @@ public File getMultiModuleProjectDirectory()
         return multiModuleProjectDirectory;
     }
 
-    public boolean isDebug()
+    public boolean isVerbose()
     {
-        return debug;
+        return verbose;
     }
 
     public boolean isQuiet()

File: maven-embedder/src/test/java/org/apache/maven/cli/CLIManagerTest.java
Patch:
@@ -42,7 +42,7 @@ public void spacedOptions()
         throws Exception
     {
         CommandLine cmdLine = cliManager.parse( "-X -Dx=1 -D y=2 test".split( " " ) );
-        assertTrue( cmdLine.hasOption( CLIManager.DEBUG ) );
+        assertTrue( cmdLine.hasOption( CLIManager.VERBOSE ) );
         assertThat( cmdLine.getOptionValues( CLIManager.SET_SYSTEM_PROPERTY )[0], is( "x=1" ) );
         assertThat( cmdLine.getOptionValues( CLIManager.SET_SYSTEM_PROPERTY )[1], is( "y=2" ) );
     }

File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -104,6 +104,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.PrintStream;
+import java.nio.charset.Charset;
 import java.nio.file.Files;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -387,7 +388,7 @@ void cli( CliRequest cliRequest )
 
             if ( configFile.isFile() )
             {
-                for ( String arg : new String( Files.readAllBytes( configFile.toPath() ) ).split( "\\s+" ) )
+                for ( String arg : Files.readAllLines( configFile.toPath(), Charset.defaultCharset() ) )
                 {
                     if ( !arg.isEmpty() )
                     {

File: maven-core/src/main/java/org/apache/maven/execution/BuildResumptionAnalyzer.java
Patch:
@@ -32,5 +32,5 @@ public interface BuildResumptionAnalyzer
      * @param result Outcome of the current Maven build.
      * @return A {@link BuildResumptionData} instance or {@link Optional#empty()} if resuming the build is not possible.
      */
-    Optional<BuildResumptionData> determineBuildResumptionData( final MavenExecutionResult result );
+    Optional<BuildResumptionData> determineBuildResumptionData( MavenExecutionResult result );
 }

File: maven-core/src/main/java/org/apache/maven/execution/BuildResumptionDataRepository.java
Patch:
@@ -37,20 +37,20 @@ public interface BuildResumptionDataRepository
      * @param buildResumptionData Information needed to resume the build.
      * @throws BuildResumptionPersistenceException When an error occurs while persisting data.
      */
-    void persistResumptionData( final MavenProject rootProject, final BuildResumptionData buildResumptionData )
+    void persistResumptionData( MavenProject rootProject, BuildResumptionData buildResumptionData )
             throws BuildResumptionPersistenceException;
 
     /**
      * Uses previously stored resumption data to enrich an existing execution request.
      * @param request The execution request that will be enriched.
      * @param rootProject The root project that is being built.
      */
-    void applyResumptionData( final MavenExecutionRequest request, final MavenProject rootProject );
+    void applyResumptionData( MavenExecutionRequest request, MavenProject rootProject );
 
     /**
      * Removes previously stored resumption data.
      * @param rootProject The root project that is being built.
      */
-    void removeResumptionData( final MavenProject rootProject );
+    void removeResumptionData( MavenProject rootProject );
 
 }

File: maven-core/src/main/java/org/apache/maven/project/collector/ProjectCollectionStrategy.java
Patch:
@@ -36,6 +36,6 @@ public interface ProjectCollectionStrategy
      * @return
      * @throws ProjectBuildingException
      */
-    List<MavenProject> collectProjects( final MavenExecutionRequest request )
+    List<MavenProject> collectProjects( MavenExecutionRequest request )
             throws ProjectBuildingException;
 }

File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultBuildPomXMLFilterFactory.java
Patch:
@@ -64,7 +64,7 @@ protected Function<Path, Optional<RelativeProject>> getRelativePathMapper()
     @Override
     protected BiFunction<String, String, String> getDependencyKeyToVersionMapper()
     {
-        return (g, a) -> Optional.ofNullable( context.getRawModel( g, a ) )
+        return ( g, a ) -> Optional.ofNullable( context.getRawModel( g, a ) )
                             .map( m -> toVersion( m ) )
                             .orElse( null );
     }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0146InstallerSnapshotNaming.java
Patch:
@@ -86,7 +86,7 @@ public void testitRemoteDownloadTimestampedName()
         Verifier verifier = newVerifier( testDir.getAbsolutePath() );
 
         Properties properties = verifier.newDefaultFilterProperties();
-        properties.setProperty( "@host@", InetAddress.getLocalHost().getCanonicalHostName() );
+        properties.setProperty( "@host@", InetAddress.getLoopbackAddress().getCanonicalHostName() );
         properties.setProperty( "@port@", Integer.toString( port ) );
 
         verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", properties );
@@ -125,7 +125,7 @@ public void testitNonTimestampedNameWithInstalledSNAPSHOT()
         verifier = newVerifier( testDir.getAbsolutePath() );
 
         Properties properties = verifier.newDefaultFilterProperties();
-        properties.setProperty( "@host@", InetAddress.getLocalHost().getCanonicalHostName() );
+        properties.setProperty( "@host@", InetAddress.getLoopbackAddress().getCanonicalHostName() );
         properties.setProperty( "@port@", Integer.toString( port ) );
 
         verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", properties );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2387InactiveProxyTest.java
Patch:
@@ -119,7 +119,7 @@ public void testit()
         Verifier verifier = newVerifier( testDir.getAbsolutePath() );
 
         Properties properties = verifier.newDefaultFilterProperties();
-        properties.setProperty( "@host@", InetAddress.getLocalHost().getCanonicalHostName() );
+        properties.setProperty( "@host@", InetAddress.getLoopbackAddress().getCanonicalHostName() );
         properties.setProperty( "@port@", Integer.toString( port ) );
         properties.setProperty( "@proxyPort@", Integer.toString( proxyPort ) );
         verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", properties );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4991NonProxyHostsTest.java
Patch:
@@ -93,7 +93,7 @@ public void testit()
             filterProps.setProperty( "@port@", Integer.toString( port ) );
             int proxyPort = ( (NetworkConnector) proxy.getConnectors()[0] ).getLocalPort();
             filterProps.setProperty( "@proxyPort@", Integer.toString( proxyPort ) );
-            filterProps.setProperty( "@localhost@", InetAddress.getLocalHost().getCanonicalHostName() );
+            filterProps.setProperty( "@localhost@", InetAddress.getLoopbackAddress().getCanonicalHostName() );
             verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", filterProps );
             verifier.addCliOption( "-s" );
             verifier.addCliOption( "settings.xml" );

File: maven-embedder/src/test/java/org/apache/maven/cli/MavenCliTest.java
Patch:
@@ -322,6 +322,7 @@ public void testStyleColors()
 
         MessageUtils.setColorEnabled( true );
         request = new CliRequest( new String[] { "-l", "target/temp/mvn.log" }, null );
+        request.workingDirectory = "target/temp";
         cli.cli( request );
         cli.properties( request );
         cli.logging( request );
@@ -343,13 +344,15 @@ public void testStyleColors()
 
         MessageUtils.setColorEnabled( false );
         request = new CliRequest( new String[] { "-Dstyle.color=always", "-B", "-l", "target/temp/mvn.log" }, null );
+        request.workingDirectory = "target/temp";
         cli.cli( request );
         cli.properties( request );
         cli.logging( request );
         assertTrue( MessageUtils.isColorEnabled() );
 
         MessageUtils.setColorEnabled( false );
         CliRequest maybeColorRequest = new CliRequest( new String[] { "-Dstyle.color=maybe", "-B", "-l", "target/temp/mvn.log" }, null );
+        request.workingDirectory = "target/temp";
         cli.cli( maybeColorRequest );
         cli.properties( maybeColorRequest );
         assertThrows(

File: maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java
Patch:
@@ -822,7 +822,8 @@ public static void main( String... args )
                     + ( ( compare == 0 ) ? "==" : ( ( compare < 0 ) ? "<" : ">" ) ) + ' ' + version );
             }
 
-            System.out.println( ( i++ ) + ". " + version + " -> " + c.getCanonical() + "; tokens: " + c.items.toListString() );
+            System.out.println( ( i++ ) + ". " + version + " -> " + c.getCanonical()
+                                    + "; tokens: " + c.items.toListString() );
 
             prev = c;
         }

File: maven-xml/src/main/java/org/apache/maven/xml/Factories.java
Patch:
@@ -42,7 +42,8 @@ private Factories()
     }
 
     /**
-     * See https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#transformerfactory
+     * See
+     * https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#transformerfactory
      */
     public static TransformerFactory newTransformerFactory()
     {

File: maven-xml/src/main/java/org/apache/maven/xml/Factories.java
Patch:
@@ -42,9 +42,7 @@ private Factories()
     }
 
     /**
-     *
-     * @return
-     * @see https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#transformerfactory
+     * See https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#transformerfactory
      */
     public static TransformerFactory newTransformerFactory()
     {

File: maven-xml/src/main/java/org/apache/maven/xml/sax/filter/AbstractEventXMLFilter.java
Patch:
@@ -115,8 +115,6 @@ private void processEvent( final SAXEvent event )
     /**
      * Should be used to include extra events before a closing element.
      * This is a lightweight solution to keep the correct indentation.
-     *
-     * @return
      */
     protected Includer include()
     {

File: maven-xml/src/main/java/org/apache/maven/xml/sax/filter/BuildPomXMLFilterFactory.java
Patch:
@@ -59,7 +59,6 @@ public BuildPomXMLFilterFactory( Consumer<LexicalHandler> lexicalHandlerConsumer
     /**
      *
      * @param projectFile will be used by ConsumerPomXMLFilter to get the right filter
-     * @return
      * @throws SAXException
      * @throws ParserConfigurationException
      * @throws TransformerConfigurationException

File: maven-xml/src/main/java/org/apache/maven/xml/sax/filter/ConsumerPomXMLFilter.java
Patch:
@@ -27,8 +27,8 @@
  * This often means stripping of build-specific information.
  * When extra information is required during filtering it is probably a member of the BuildPomXMLFilter
  *
- * This filter is used at 1 locations:
- * - {@link org.apache.maven.internal.aether.DefaultRepositorySystemSessionFactory} when publishing pom files.
+ * This filter is used at one location:
+ * - org.apache.maven.internal.aether.DefaultRepositorySystemSessionFactory when publishing POM files.
  *
  * @author Robert Scholte
  * @since 4.0.0

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4148DepPomInterpWithSettingsProfilesTest.java
Patch:
@@ -51,7 +51,7 @@ public void testit()
         Verifier verifier = newVerifier( testDir.getAbsolutePath() );
         
         verifier.deleteDirectory( "target" );
-        verifier.deleteArtifacts( "org.apache.maven.it.mng4148" );
+        verifier.deleteArtifacts( "org.apache.maven.its.mng4148" );
         
         verifier.setAutoclean( false );
         

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4238ArtifactHandlerExtensionUsageTest.java
Patch:
@@ -34,7 +34,7 @@ public class MavenITmng4238ArtifactHandlerExtensionUsageTest
     extends AbstractMavenIntegrationTestCase
 {
 
-    private static final String GID = "org.apache.maven.it.mng4238";
+    private static final String GID = "org.apache.maven.its.mng4238";
     private static final String AID = "mng-4238";
     private static final String VERSION = "1";
     private static final String TYPE = "jar";

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4347ImportScopeWithSettingsProfilesTest.java
Patch:
@@ -51,7 +51,7 @@ public void testit()
         Verifier verifier = newVerifier( testDir.getAbsolutePath() );
         
         verifier.deleteDirectory( "target" );
-        verifier.deleteArtifacts( "org.apache.maven.it.mng4347" );
+        verifier.deleteArtifacts( "org.apache.maven.its.mng4347" );
         
         verifier.setAutoclean( false );
         

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4679SnapshotUpdateInPluginTest.java
Patch:
@@ -63,7 +63,7 @@ public void testit()
         verifier.verifyErrorFreeLog();
 
         assertChecksum( verifier, "jar", "2ea5c3d713bbaba7b87746449b91cd00e876703d" );
-        assertChecksum( verifier, "pom", "7de357a948a8bb2357759c7c585adb504e579bad" );
+        assertChecksum( verifier, "pom", "0b58dbbc61f81b85a70692ffdce88cf1892a8da4" );
 
         filterProps.setProperty( "@repo@", "repo-2" );
         verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", filterProps );
@@ -76,7 +76,7 @@ public void testit()
         verifier.resetStreams();
 
         assertChecksum( verifier, "jar", "f3d46277c2ab45ff9bbd97605c942bed7fc27f97" );
-        assertChecksum( verifier, "pom", "8f17048dee72cc6ec33e9ab30fa00a910e1d6997" );
+        assertChecksum( verifier, "pom", "127f0dc26035352bb54890315ad7d2ada067756a" );
     }
 
     private void assertChecksum( Verifier verifier, String ext, String checksum )

File: maven-artifact/src/main/java/org/apache/maven/artifact/repository/ArtifactRepositoryPolicy.java
Patch:
@@ -43,6 +43,8 @@ public class ArtifactRepositoryPolicy
 
     public static final String CHECKSUM_POLICY_IGNORE = "ignore";
 
+    public static final String DEFAULT_CHECKSUM_POLICY = CHECKSUM_POLICY_FAIL;
+
     private boolean enabled;
 
     private String updatePolicy;
@@ -71,7 +73,7 @@ public ArtifactRepositoryPolicy( boolean enabled, String updatePolicy, String ch
 
         if ( checksumPolicy == null )
         {
-            checksumPolicy = CHECKSUM_POLICY_WARN;
+            checksumPolicy = DEFAULT_CHECKSUM_POLICY;
         }
         this.checksumPolicy = checksumPolicy;
     }

File: maven-artifact/src/main/java/org/apache/maven/artifact/repository/ArtifactRepositoryPolicy.java
Patch:
@@ -43,8 +43,6 @@ public class ArtifactRepositoryPolicy
 
     public static final String CHECKSUM_POLICY_IGNORE = "ignore";
 
-    public static final String DEFAULT_CHECKSUM_POLICY = CHECKSUM_POLICY_FAIL;
-
     private boolean enabled;
 
     private String updatePolicy;
@@ -73,7 +71,7 @@ public ArtifactRepositoryPolicy( boolean enabled, String updatePolicy, String ch
 
         if ( checksumPolicy == null )
         {
-            checksumPolicy = DEFAULT_CHECKSUM_POLICY;
+            checksumPolicy = CHECKSUM_POLICY_WARN;
         }
         this.checksumPolicy = checksumPolicy;
     }

File: maven-artifact/src/main/java/org/apache/maven/artifact/repository/ArtifactRepositoryPolicy.java
Patch:
@@ -43,6 +43,8 @@ public class ArtifactRepositoryPolicy
 
     public static final String CHECKSUM_POLICY_IGNORE = "ignore";
 
+    public static final String DEFAULT_CHECKSUM_POLICY = CHECKSUM_POLICY_FAIL;
+
     private boolean enabled;
 
     private String updatePolicy;
@@ -71,7 +73,7 @@ public ArtifactRepositoryPolicy( boolean enabled, String updatePolicy, String ch
 
         if ( checksumPolicy == null )
         {
-            checksumPolicy = CHECKSUM_POLICY_WARN;
+            checksumPolicy = DEFAULT_CHECKSUM_POLICY;
         }
         this.checksumPolicy = checksumPolicy;
     }

File: maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java
Patch:
@@ -607,9 +607,9 @@ public MavenExecutionRequest setExcludedProjects( List<String> excludedProjects
     }
 
     @Override
-    public MavenExecutionRequest setResume()
+    public MavenExecutionRequest setResume( boolean resume )
     {
-        resume = true;
+        this.resume = resume;
 
         return this;
     }

File: maven-core/src/main/java/org/apache/maven/execution/MavenExecutionRequest.java
Patch:
@@ -173,9 +173,10 @@ public interface MavenExecutionRequest
 
     /**
      * Sets whether the build should be resumed from the data in the resume.properties file.
+     * @param resume Whether or not to resume a previous build.
      * @return This request, never {@code null}.
      */
-    MavenExecutionRequest setResume();
+    MavenExecutionRequest setResume( boolean resume );
 
     /**
      * @return Whether the build should be resumed from the data in the resume.properties file.

File: maven-core/src/test/java/org/apache/maven/execution/DefaultBuildResumptionAnalyzerTest.java
Patch:
@@ -55,7 +55,7 @@ public void resumeFromGetsDetermined()
         Optional<BuildResumptionData> result = analyzer.determineBuildResumptionData( executionResult );
 
         assertThat( result.isPresent(), is( true ) );
-        assertThat( result.get().getResumeFrom(), is( "test:B" ) );
+        assertThat( result.get().getResumeFrom(), is( Optional.of ( "test:B" ) ) );
     }
 
     @Test
@@ -111,7 +111,7 @@ public void projectsFailingAfterAnotherFailedProjectAreNotExcluded()
         Optional<BuildResumptionData> result = analyzer.determineBuildResumptionData( executionResult );
 
         assertThat( result.isPresent(), is( true ) );
-        assertThat( result.get().getResumeFrom(), is( "test:B" ) );
+        assertThat( result.get().getResumeFrom(), is( Optional.of ( "test:B" ) ) );
         assertThat( result.get().getProjectsToSkip(), contains( "test:C" ) );
         assertThat( result.get().getProjectsToSkip(), not( contains( "test:D" ) ) );
     }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng6386BaseUriPropertyTest.java
Patch:
@@ -86,8 +86,8 @@ public void testitMNG6386UnicodeChars()
             assertEquals( testDir.toPath().toUri().toASCIIString(), pomProperty );
             // check that baseUri begins with file:///
             assertTrue( pomProperty.startsWith( "file:///" ) );
-            // check that baseUri ends with это по-русский/
-            assertTrue( pomProperty.endsWith( "%D1%8D%D1%82%D0%BE%20%D0%BF%D0%BE-%D1%80%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9/" ) );
+            assertTrue( "Check that baseUri '" + pomProperty + "' ends with 'это по-русский/'",
+                    pomProperty.endsWith( "%D1%8D%D1%82%D0%BE%20%D0%BF%D0%BE-%D1%80%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9/" ) );
         }
         else
         {

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecyclePluginAnalyzer.java
Patch:
@@ -56,6 +56,8 @@
 public class DefaultLifecyclePluginAnalyzer
     implements LifeCyclePluginAnalyzer
 {
+    public static final String DEFAULTLIFECYCLEBINDINGS_MODELID = "org.apache.maven:maven-core:"
+        + DefaultLifecyclePluginAnalyzer.class.getPackage().getImplementationVersion() + ":default-lifecycle-bindings";
 
     @Requirement( role = LifecycleMapping.class )
     private Map<String, LifecycleMapping> lifecycleMappings;
@@ -143,10 +145,8 @@ private List<Lifecycle> getOrderedLifecycles()
 
     private void parseLifecyclePhaseDefinitions( Map<Plugin, Plugin> plugins, String phase, LifecyclePhase goals )
     {
-        String modelId = "org.apache.maven:maven-core:" + this.getClass().getPackage().getImplementationVersion()
-            + ":default-lifecycle-bindings";
         InputSource inputSource = new InputSource();
-        inputSource.setModelId( modelId );
+        inputSource.setModelId( DEFAULTLIFECYCLEBINDINGS_MODELID );
         InputLocation location = new InputLocation( -1, -1, inputSource );
         location.setLocation( 0, location );
 

File: maven-compat/src/main/java/org/apache/maven/artifact/ArtifactScopeEnum.java
Patch:
@@ -50,7 +50,7 @@ int getId()
     /**
      * Helper method to simplify null processing
      */
-    public static final ArtifactScopeEnum checkScope( ArtifactScopeEnum scope )
+    public static ArtifactScopeEnum checkScope( ArtifactScopeEnum scope )
     {
         return scope == null ? DEFAULT_SCOPE : scope;
     }

File: maven-core/src/main/java/org/apache/maven/artifact/repository/metadata/io/DefaultMetadataReader.java
Patch:
@@ -60,7 +60,7 @@ public Metadata read( Reader input, Map<String, ?> options )
     {
         Objects.requireNonNull( input, "input cannot be null" );
 
-        try ( final Reader in = input )
+        try ( Reader in = input )
         {
             return new MetadataXpp3Reader().read( in, isStrict( options ) );
         }
@@ -75,7 +75,7 @@ public Metadata read( InputStream input, Map<String, ?> options )
     {
         Objects.requireNonNull( input, "input cannot be null" );
 
-        try ( final InputStream in = input )
+        try ( InputStream in = input )
         {
             return new MetadataXpp3Reader().read( in, isStrict( options ) );
         }

File: maven-core/src/main/java/org/apache/maven/toolchain/io/DefaultToolchainsReader.java
Patch:
@@ -61,7 +61,7 @@ public PersistedToolchains read( Reader input, Map<String, ?> options )
     {
         Objects.requireNonNull( input, "input cannot be null" );
 
-        try ( final Reader in = input )
+        try ( Reader in = input )
         {
             return new MavenToolchainsXpp3Reader().read( in, isStrict( options ) );
         }
@@ -77,7 +77,7 @@ public PersistedToolchains read( InputStream input, Map<String, ?> options )
     {
         Objects.requireNonNull( input, "input cannot be null" );
 
-        try ( final InputStream in = input )
+        try ( InputStream in = input )
         {
             return new MavenToolchainsXpp3Reader().read( in, isStrict( options ) );
         }

File: maven-core/src/main/java/org/apache/maven/toolchain/io/DefaultToolchainsWriter.java
Patch:
@@ -46,7 +46,7 @@ public void write( Writer output, Map<String, Object> options, PersistedToolchai
         Objects.requireNonNull( output, "output cannot be null" );
         Objects.requireNonNull( toolchains, "toolchains cannot be null" );
 
-        try ( final Writer out = output )
+        try ( Writer out = output )
         {
             new MavenToolchainsXpp3Writer().write( out, toolchains );
         }

File: maven-model-builder/src/main/java/org/apache/maven/model/io/DefaultModelReader.java
Patch:
@@ -68,7 +68,7 @@ public Model read( Reader input, Map<String, ?> options )
     {
         Objects.requireNonNull( input, "input cannot be null" );
 
-        try ( final Reader in = input )
+        try ( Reader in = input )
         {
             return read( in, isStrict( options ), getSource( options ) );
         }
@@ -80,7 +80,7 @@ public Model read( InputStream input, Map<String, ?> options )
     {
         Objects.requireNonNull( input, "input cannot be null" );
 
-        try ( final XmlStreamReader in = ReaderFactory.newXmlReader( input ) )
+        try ( XmlStreamReader in = ReaderFactory.newXmlReader( input ) )
         {
             return read( in, isStrict( options ), getSource( options ) );
         }

File: maven-model-builder/src/main/java/org/apache/maven/model/io/DefaultModelWriter.java
Patch:
@@ -64,7 +64,7 @@ public void write( Writer output, Map<String, Object> options, Model model )
         Objects.requireNonNull( output, "output cannot be null" );
         Objects.requireNonNull( model, "model cannot be null" );
 
-        try ( final Writer out = output )
+        try ( Writer out = output )
         {
             new MavenXpp3Writer().write( out, model );
         }
@@ -84,7 +84,7 @@ public void write( OutputStream output, Map<String, Object> options, Model model
             encoding = "UTF-8";
         }
 
-        try ( final Writer out = new OutputStreamWriter( output, encoding ) )
+        try ( Writer out = new OutputStreamWriter( output, encoding ) )
         {
             write( out, options, model );
         }

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionRangeResolver.java
Patch:
@@ -244,7 +244,7 @@ private Versioning readVersions( RepositorySystemSession session, RequestTrace t
 
                     if ( metadata.getFile() != null && metadata.getFile().exists() )
                     {
-                        try ( final InputStream in = new FileInputStream( metadata.getFile() ) )
+                        try ( InputStream in = new FileInputStream( metadata.getFile() ) )
                         {
                             versioning = new MetadataXpp3Reader().read( in, false ).getVersioning();
                         }

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionResolver.java
Patch:
@@ -310,7 +310,7 @@ private Versioning readVersions( RepositorySystemSession session, RequestTrace t
 
                     if ( metadata.getFile() != null && metadata.getFile().exists() )
                     {
-                        try ( final InputStream in = new FileInputStream( metadata.getFile() ) )
+                        try ( InputStream in = new FileInputStream( metadata.getFile() ) )
                         {
                             versioning = new MetadataXpp3Reader().read( in, false ).getVersioning();
 

File: maven-settings-builder/src/main/java/org/apache/maven/settings/io/DefaultSettingsReader.java
Patch:
@@ -62,7 +62,7 @@ public Settings read( Reader input, Map<String, ?> options )
     {
         Objects.requireNonNull( input, "input cannot be null" );
 
-        try ( final Reader in = input )
+        try ( Reader in = input )
         {
             return new SettingsXpp3Reader().read( in, isStrict( options ) );
         }
@@ -78,7 +78,7 @@ public Settings read( InputStream input, Map<String, ?> options )
     {
         Objects.requireNonNull( input, "input cannot be null" );
 
-        try ( final InputStream in = input )
+        try ( InputStream in = input )
         {
             return new SettingsXpp3Reader().read( in, isStrict( options ) );
         }

File: maven-settings-builder/src/main/java/org/apache/maven/settings/io/DefaultSettingsWriter.java
Patch:
@@ -64,7 +64,7 @@ public void write( Writer output, Map<String, Object> options, Settings settings
         Objects.requireNonNull( output, "output cannot be null" );
         Objects.requireNonNull( settings, "settings cannot be null" );
 
-        try ( final Writer out = output )
+        try ( Writer out = output )
         {
             new SettingsXpp3Writer().write( out, settings );
         }
@@ -84,7 +84,7 @@ public void write( OutputStream output, Map<String, Object> options, Settings se
             encoding = "UTF-8";
         }
 
-        try ( final Writer out = new OutputStreamWriter( output, encoding ) )
+        try ( Writer out = new OutputStreamWriter( output, encoding ) )
         {
             write( out, options, settings );
         }

File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringSearchModelInterpolator.java
Patch:
@@ -365,7 +365,7 @@ void doInterpolate( Object target, InterpolateObjectAction ctx )
 
                 String interpolated = ctx.interpolate( value );
 
-                if ( !interpolated.equals( value ) )
+                if ( interpolated != null && !interpolated.equals( value ) )
                 {
                     field.set( target, interpolated );
                 }
@@ -459,7 +459,7 @@ void doInterpolate( Object target, InterpolateObjectAction ctx )
                     {
                         String interpolated = ctx.interpolate( (String) value );
 
-                        if ( !interpolated.equals( value ) )
+                        if ( interpolated != null && !interpolated.equals( value ) )
                         {
                             try
                             {

File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringVisitorModelInterpolator.java
Patch:
@@ -1420,7 +1420,7 @@ private void visit( Properties properties )
                     {
                         String value = (String) v;
                         String inter = interpolate( value );
-                        if ( value != inter )
+                        if ( value != inter && inter != null )
                         {
                             entry.setValue( inter );
                         }

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/MavenWrapperMain.java
Patch:
@@ -40,7 +40,7 @@ public class MavenWrapperMain {
   public static final String MVNW_PASSWORD = "MVNW_PASSWORD";
   public static final String MVNW_REPOURL = "MVNW_REPOURL";
 
-  public static final String MVN_VERSION = "3.6.0";
+  public static final String MVN_VERSION = "3.6.1";
   public static final String MVN_PATH =
       "org/apache/maven/apache-maven/" + MVN_VERSION + "/apache-maven-"+ MVN_VERSION + "-bin.zip";
 

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/BootstrapMainStarter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/DefaultDownloader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2007-2009 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/Downloader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2007-2009 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/Installer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.maven.wrapper;
 
 import java.io.BufferedOutputStream;

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/MavenWrapperMain.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2007 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.maven.wrapper;
 
 import java.io.File;

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/PathAssembler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2007-2008 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/SystemPropertiesHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/WrapperConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/WrapperExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2007-2008 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/cli/AbstractCommandLineConverter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2009 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/cli/AbstractPropertiesCommandLineConverter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/cli/CommandLineArgumentException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2009 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/cli/CommandLineConverter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2009 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/cli/CommandLineOption.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/cli/CommandLineParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/cli/ParsedCommandLine.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/cli/ParsedCommandLineOption.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/cli/ProjectPropertiesCommandLineConverter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/cli/SystemPropertiesCommandLineConverter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2011 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/MavenWrapperMain.java
Patch:
@@ -37,7 +37,10 @@ public class MavenWrapperMain {
   public static final String MAVEN_USER_HOME_ENV_KEY = "MAVEN_USER_HOME";
 
   public static final String MVNW_VERBOSE = "MVNW_VERBOSE";
+  public static final String MVNW_USER = "MVNW_USER";
+  public static final String MVNW_PASSWORD = "MVNW_PASSWORD";
 
+  
   public static void main(String[] args) throws Exception {
     File wrapperJar = wrapperJar();
     File propertiesFile = wrapperProperties(wrapperJar);

File: maven-wrapper/.mvn/wrapper/MavenWrapperDownloader.java
Patch:
@@ -76,13 +76,13 @@ public static void main(String args[]) {
                 }
             }
         }
-        System.out.println("- Downloading from: : " + url);
+        System.out.println("- Downloading from: " + url);
 
         File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);
         if(!outputFile.getParentFile().exists()) {
             if(!outputFile.getParentFile().mkdirs()) {
                 System.out.println(
-                        "- ERROR creating output direcrory '" + outputFile.getParentFile().getAbsolutePath() + "'");
+                        "- ERROR creating output directory '" + outputFile.getParentFile().getAbsolutePath() + "'");
             }
         }
         System.out.println("- Downloading to: " + outputFile.getAbsolutePath());

File: maven-wrapper/.mvn/wrapper/MavenWrapperDownloader.java
Patch:
@@ -28,7 +28,7 @@ public class MavenWrapperDownloader {
      * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.
      */
     private static final String DEFAULT_DOWNLOAD_URL =
-            "https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.3.0/maven-wrapper-0.3.0.jar";
+            "https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.4.0/maven-wrapper-0.4.0.jar";
 
     /**
      * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/Logger.java
Patch:
@@ -4,7 +4,7 @@
  * @author <a href="mailto:konstantin.sobolev@gmail.com">Konstantin Sobolev</a>
  */
 public class Logger {
-  private static final boolean VERBOSE = "true".equalsIgnoreCase(MavenWrapperMain.MVNW_VERBOSE);
+  private static final boolean VERBOSE = "true".equalsIgnoreCase(System.getenv(MavenWrapperMain.MVNW_VERBOSE));
 
   public static void info(String msg) {
     if (VERBOSE) {

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/MavenWrapperMain.java
Patch:
@@ -39,7 +39,7 @@ public class MavenWrapperMain {
   public static final String MVNW_VERBOSE = "MVNW_VERBOSE";
 
   public static void main(String[] args) throws Exception {
-    Boolean verbose = System.getenv(MVNW_VERBOSE).equalsIgnoreCase("true");
+    boolean verbose = "true".equalsIgnoreCase(System.getenv(MVNW_VERBOSE));
 
     File wrapperJar = wrapperJar();
     File propertiesFile = wrapperProperties(wrapperJar);

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/Installer.java
Patch:
@@ -170,6 +170,7 @@ public void unzip(File zip, File dest) throws IOException {
         continue;
       }
 
+      new File(dest, entry.getName()).getParentFile().mkdirs();
       copyInputStream(zipFile.getInputStream(entry), new BufferedOutputStream(new FileOutputStream(new File(dest, entry.getName()))));
     }
     zipFile.close();

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -106,6 +106,8 @@ public static Test suite()
         // Tests that don't run stable and need to be fixed
         // -------------------------------------------------------------------------------------------------------------
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
+        
+        suite.addTestSuite( MavenITmng6562WarnDefaultBindings.class );
         suite.addTestSuite( MavenITmng5868NoDuplicateAttachedArtifacts.class );
         suite.addTestSuite( MavenITmng5937MavenWrapper.class );
         suite.addTestSuite( MavenITmng4660ResumeFromTest.class );

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecyclePluginAnalyzer.java
Patch:
@@ -56,6 +56,8 @@
 public class DefaultLifecyclePluginAnalyzer
     implements LifeCyclePluginAnalyzer
 {
+    public static final String DEFAULTLIFECYCLEBINDINGS_MODELID = "org.apache.maven:maven-core:"
+        + DefaultLifecyclePluginAnalyzer.class.getPackage().getImplementationVersion() + ":default-lifecycle-bindings";
 
     @Requirement( role = LifecycleMapping.class )
     private Map<String, LifecycleMapping> lifecycleMappings;
@@ -143,10 +145,8 @@ private List<Lifecycle> getOrderedLifecycles()
 
     private void parseLifecyclePhaseDefinitions( Map<Plugin, Plugin> plugins, String phase, LifecyclePhase goals )
     {
-        String modelId = "org.apache.maven:maven-core:" + this.getClass().getPackage().getImplementationVersion()
-            + ":default-lifecycle-bindings";
         InputSource inputSource = new InputSource();
-        inputSource.setModelId( modelId );
+        inputSource.setModelId( DEFAULTLIFECYCLEBINDINGS_MODELID );
         InputLocation location = new InputLocation( -1, -1, inputSource );
         location.setLocation( 0, location );
 

File: maven-compat/src/main/java/org/apache/maven/artifact/ArtifactScopeEnum.java
Patch:
@@ -50,7 +50,7 @@ int getId()
     /**
      * Helper method to simplify null processing
      */
-    public static final ArtifactScopeEnum checkScope( ArtifactScopeEnum scope )
+    public static ArtifactScopeEnum checkScope( ArtifactScopeEnum scope )
     {
         return scope == null ? DEFAULT_SCOPE : scope;
     }

File: maven-core/src/main/java/org/apache/maven/artifact/repository/metadata/io/DefaultMetadataReader.java
Patch:
@@ -60,7 +60,7 @@ public Metadata read( Reader input, Map<String, ?> options )
     {
         Objects.requireNonNull( input, "input cannot be null" );
 
-        try ( final Reader in = input )
+        try ( Reader in = input )
         {
             return new MetadataXpp3Reader().read( in, isStrict( options ) );
         }
@@ -75,7 +75,7 @@ public Metadata read( InputStream input, Map<String, ?> options )
     {
         Objects.requireNonNull( input, "input cannot be null" );
 
-        try ( final InputStream in = input )
+        try ( InputStream in = input )
         {
             return new MetadataXpp3Reader().read( in, isStrict( options ) );
         }

File: maven-core/src/main/java/org/apache/maven/toolchain/io/DefaultToolchainsReader.java
Patch:
@@ -61,7 +61,7 @@ public PersistedToolchains read( Reader input, Map<String, ?> options )
     {
         Objects.requireNonNull( input, "input cannot be null" );
 
-        try ( final Reader in = input )
+        try ( Reader in = input )
         {
             return new MavenToolchainsXpp3Reader().read( in, isStrict( options ) );
         }
@@ -77,7 +77,7 @@ public PersistedToolchains read( InputStream input, Map<String, ?> options )
     {
         Objects.requireNonNull( input, "input cannot be null" );
 
-        try ( final InputStream in = input )
+        try ( InputStream in = input )
         {
             return new MavenToolchainsXpp3Reader().read( in, isStrict( options ) );
         }

File: maven-core/src/main/java/org/apache/maven/toolchain/io/DefaultToolchainsWriter.java
Patch:
@@ -46,7 +46,7 @@ public void write( Writer output, Map<String, Object> options, PersistedToolchai
         Objects.requireNonNull( output, "output cannot be null" );
         Objects.requireNonNull( toolchains, "toolchains cannot be null" );
 
-        try ( final Writer out = output )
+        try ( Writer out = output )
         {
             new MavenToolchainsXpp3Writer().write( out, toolchains );
         }

File: maven-model-builder/src/main/java/org/apache/maven/model/io/DefaultModelReader.java
Patch:
@@ -68,7 +68,7 @@ public Model read( Reader input, Map<String, ?> options )
     {
         Objects.requireNonNull( input, "input cannot be null" );
 
-        try ( final Reader in = input )
+        try ( Reader in = input )
         {
             return read( in, isStrict( options ), getSource( options ) );
         }
@@ -80,7 +80,7 @@ public Model read( InputStream input, Map<String, ?> options )
     {
         Objects.requireNonNull( input, "input cannot be null" );
 
-        try ( final XmlStreamReader in = ReaderFactory.newXmlReader( input ) )
+        try ( XmlStreamReader in = ReaderFactory.newXmlReader( input ) )
         {
             return read( in, isStrict( options ), getSource( options ) );
         }

File: maven-model-builder/src/main/java/org/apache/maven/model/io/DefaultModelWriter.java
Patch:
@@ -64,7 +64,7 @@ public void write( Writer output, Map<String, Object> options, Model model )
         Objects.requireNonNull( output, "output cannot be null" );
         Objects.requireNonNull( model, "model cannot be null" );
 
-        try ( final Writer out = output )
+        try ( Writer out = output )
         {
             new MavenXpp3Writer().write( out, model );
         }
@@ -84,7 +84,7 @@ public void write( OutputStream output, Map<String, Object> options, Model model
             encoding = "UTF-8";
         }
 
-        try ( final Writer out = new OutputStreamWriter( output, encoding ) )
+        try ( Writer out = new OutputStreamWriter( output, encoding ) )
         {
             write( out, options, model );
         }

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionRangeResolver.java
Patch:
@@ -244,7 +244,7 @@ private Versioning readVersions( RepositorySystemSession session, RequestTrace t
 
                     if ( metadata.getFile() != null && metadata.getFile().exists() )
                     {
-                        try ( final InputStream in = new FileInputStream( metadata.getFile() ) )
+                        try ( InputStream in = new FileInputStream( metadata.getFile() ) )
                         {
                             versioning = new MetadataXpp3Reader().read( in, false ).getVersioning();
                         }

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionResolver.java
Patch:
@@ -310,7 +310,7 @@ private Versioning readVersions( RepositorySystemSession session, RequestTrace t
 
                     if ( metadata.getFile() != null && metadata.getFile().exists() )
                     {
-                        try ( final InputStream in = new FileInputStream( metadata.getFile() ) )
+                        try ( InputStream in = new FileInputStream( metadata.getFile() ) )
                         {
                             versioning = new MetadataXpp3Reader().read( in, false ).getVersioning();
 

File: maven-settings-builder/src/main/java/org/apache/maven/settings/io/DefaultSettingsReader.java
Patch:
@@ -62,7 +62,7 @@ public Settings read( Reader input, Map<String, ?> options )
     {
         Objects.requireNonNull( input, "input cannot be null" );
 
-        try ( final Reader in = input )
+        try ( Reader in = input )
         {
             return new SettingsXpp3Reader().read( in, isStrict( options ) );
         }
@@ -78,7 +78,7 @@ public Settings read( InputStream input, Map<String, ?> options )
     {
         Objects.requireNonNull( input, "input cannot be null" );
 
-        try ( final InputStream in = input )
+        try ( InputStream in = input )
         {
             return new SettingsXpp3Reader().read( in, isStrict( options ) );
         }

File: maven-settings-builder/src/main/java/org/apache/maven/settings/io/DefaultSettingsWriter.java
Patch:
@@ -64,7 +64,7 @@ public void write( Writer output, Map<String, Object> options, Settings settings
         Objects.requireNonNull( output, "output cannot be null" );
         Objects.requireNonNull( settings, "settings cannot be null" );
 
-        try ( final Writer out = output )
+        try ( Writer out = output )
         {
             new SettingsXpp3Writer().write( out, settings );
         }
@@ -84,7 +84,7 @@ public void write( OutputStream output, Map<String, Object> options, Settings se
             encoding = "UTF-8";
         }
 
-        try ( final Writer out = new OutputStreamWriter( output, encoding ) )
+        try ( Writer out = new OutputStreamWriter( output, encoding ) )
         {
             write( out, options, settings );
         }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5389LifecycleParticipantAfterSessionEnd.java
Patch:
@@ -31,7 +31,7 @@ public MavenITmng5389LifecycleParticipantAfterSessionEnd()
         super( "[3.2.1,)" );
     }
 
-    public void test()
+    public void testit()
         throws Exception
     {
         File testDir =

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5669ReadPomsOnce.java
Patch:
@@ -45,7 +45,7 @@ public MavenITmng5669ReadPomsOnce()
         super( "[3.7.0,)" );
     }
 
-    public void test()
+    public void testit()
         throws Exception
     {
         // prepare JavaAgent

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5768CliExecutionIdTest.java
Patch:
@@ -32,7 +32,7 @@ public MavenITmng5768CliExecutionIdTest()
         super( "(3.2.5,)" );
     }
 
-    public void test()
+    public void testit()
         throws Exception
     {
         File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-5768-cli-execution-id" );

File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringSearchModelInterpolator.java
Patch:
@@ -365,7 +365,7 @@ void doInterpolate( Object target, InterpolateObjectAction ctx )
 
                 String interpolated = ctx.interpolate( value );
 
-                if ( !interpolated.equals( value ) )
+                if ( interpolated != null && !interpolated.equals( value ) )
                 {
                     field.set( target, interpolated );
                 }
@@ -459,7 +459,7 @@ void doInterpolate( Object target, InterpolateObjectAction ctx )
                     {
                         String interpolated = ctx.interpolate( (String) value );
 
-                        if ( !interpolated.equals( value ) )
+                        if ( interpolated != null && !interpolated.equals( value ) )
                         {
                             try
                             {

File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringVisitorModelInterpolator.java
Patch:
@@ -1420,7 +1420,7 @@ private void visit( Properties properties )
                     {
                         String value = (String) v;
                         String inter = interpolate( value );
-                        if ( value != inter )
+                        if ( value != inter && inter != null )
                         {
                             entry.setValue( inter );
                         }

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/MavenWrapperMain.java
Patch:
@@ -40,7 +40,7 @@ public class MavenWrapperMain {
   public static final String MVNW_PASSWORD = "MVNW_PASSWORD";
   public static final String MVNW_REPOURL = "MVNW_REPOURL";
 
-  public static final String MVN_VERSION = "3.6.0";
+  public static final String MVN_VERSION = "3.6.1";
   public static final String MVN_PATH =
       "org/apache/maven/apache-maven/" + MVN_VERSION + "/apache-maven-"+ MVN_VERSION + "-bin.zip";
 

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/BootstrapMainStarter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/DefaultDownloader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2007-2009 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/Downloader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2007-2009 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/Installer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.maven.wrapper;
 
 import java.io.BufferedOutputStream;

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/MavenWrapperMain.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2007 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.maven.wrapper;
 
 import java.io.File;

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/PathAssembler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2007-2008 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/SystemPropertiesHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/WrapperConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/WrapperExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2007-2008 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/cli/AbstractCommandLineConverter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2009 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/cli/AbstractPropertiesCommandLineConverter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/cli/CommandLineArgumentException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2009 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/cli/CommandLineConverter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2009 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/cli/CommandLineOption.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/cli/CommandLineParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/cli/ParsedCommandLine.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/cli/ParsedCommandLineOption.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/cli/ProjectPropertiesCommandLineConverter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/cli/SystemPropertiesCommandLineConverter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2011 the original author or authors.
+ * Copyright 2007-present the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/MavenWrapperMain.java
Patch:
@@ -37,7 +37,10 @@ public class MavenWrapperMain {
   public static final String MAVEN_USER_HOME_ENV_KEY = "MAVEN_USER_HOME";
 
   public static final String MVNW_VERBOSE = "MVNW_VERBOSE";
+  public static final String MVNW_USER = "MVNW_USER";
+  public static final String MVNW_PASSWORD = "MVNW_PASSWORD";
 
+  
   public static void main(String[] args) throws Exception {
     File wrapperJar = wrapperJar();
     File propertiesFile = wrapperProperties(wrapperJar);

File: maven-wrapper/.mvn/wrapper/MavenWrapperDownloader.java
Patch:
@@ -76,13 +76,13 @@ public static void main(String args[]) {
                 }
             }
         }
-        System.out.println("- Downloading from: : " + url);
+        System.out.println("- Downloading from: " + url);
 
         File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);
         if(!outputFile.getParentFile().exists()) {
             if(!outputFile.getParentFile().mkdirs()) {
                 System.out.println(
-                        "- ERROR creating output direcrory '" + outputFile.getParentFile().getAbsolutePath() + "'");
+                        "- ERROR creating output directory '" + outputFile.getParentFile().getAbsolutePath() + "'");
             }
         }
         System.out.println("- Downloading to: " + outputFile.getAbsolutePath());

File: maven-wrapper/.mvn/wrapper/MavenWrapperDownloader.java
Patch:
@@ -28,7 +28,7 @@ public class MavenWrapperDownloader {
      * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.
      */
     private static final String DEFAULT_DOWNLOAD_URL =
-            "https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.3.0/maven-wrapper-0.3.0.jar";
+            "https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.4.0/maven-wrapper-0.4.0.jar";
 
     /**
      * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/Logger.java
Patch:
@@ -4,7 +4,7 @@
  * @author <a href="mailto:konstantin.sobolev@gmail.com">Konstantin Sobolev</a>
  */
 public class Logger {
-  private static final boolean VERBOSE = "true".equalsIgnoreCase(MavenWrapperMain.MVNW_VERBOSE);
+  private static final boolean VERBOSE = "true".equalsIgnoreCase(System.getenv(MavenWrapperMain.MVNW_VERBOSE));
 
   public static void info(String msg) {
     if (VERBOSE) {

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/MavenWrapperMain.java
Patch:
@@ -39,7 +39,7 @@ public class MavenWrapperMain {
   public static final String MVNW_VERBOSE = "MVNW_VERBOSE";
 
   public static void main(String[] args) throws Exception {
-    Boolean verbose = System.getenv(MVNW_VERBOSE).equalsIgnoreCase("true");
+    boolean verbose = "true".equalsIgnoreCase(System.getenv(MVNW_VERBOSE));
 
     File wrapperJar = wrapperJar();
     File propertiesFile = wrapperProperties(wrapperJar);

File: maven-wrapper/src/main/java/org/apache/maven/wrapper/Installer.java
Patch:
@@ -170,6 +170,7 @@ public void unzip(File zip, File dest) throws IOException {
         continue;
       }
 
+      new File(dest, entry.getName()).getParentFile().mkdirs();
       copyInputStream(zipFile.getInputStream(entry), new BufferedOutputStream(new FileOutputStream(new File(dest, entry.getName()))));
     }
     zipFile.close();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3810BadProfileActivationTest.java
Patch:
@@ -58,9 +58,6 @@ public void testitMNG3810Property()
             verifier.verifyTextInLog( "The property name is required to activate the profile" );
         }
         verifier.resetStreams();
-
-        Properties props = verifier.loadProperties( "target/profile.properties" );
-        assertNull( props.getProperty( "project.properties.pomProperty" ) );
     }
 
 }

File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -480,6 +480,7 @@ void logging( CliRequest cliRequest )
         // LOG LEVEL
         cliRequest.debug = cliRequest.commandLine.hasOption( CLIManager.DEBUG );
         cliRequest.quiet = !cliRequest.debug && cliRequest.commandLine.hasOption( CLIManager.QUIET );
+        cliRequest.showErrors = cliRequest.debug || cliRequest.commandLine.hasOption( CLIManager.ERRORS );
 
         slf4jLoggerFactory = LoggerFactory.getILoggerFactory();
         Slf4jConfiguration slf4jConfiguration = Slf4jConfigurationFactory.getConfiguration( slf4jLoggerFactory );

File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -480,7 +480,6 @@ void logging( CliRequest cliRequest )
         // LOG LEVEL
         cliRequest.debug = cliRequest.commandLine.hasOption( CLIManager.DEBUG );
         cliRequest.quiet = !cliRequest.debug && cliRequest.commandLine.hasOption( CLIManager.QUIET );
-        cliRequest.showErrors = cliRequest.debug || cliRequest.commandLine.hasOption( CLIManager.ERRORS );
 
         slf4jLoggerFactory = LoggerFactory.getILoggerFactory();
         Slf4jConfiguration slf4jConfiguration = Slf4jConfigurationFactory.getConfiguration( slf4jLoggerFactory );

File: maven-artifact/src/main/java/org/apache/maven/artifact/resolver/MultipleArtifactsNotFoundException.java
Patch:
@@ -41,7 +41,7 @@ public MultipleArtifactsNotFoundException( Artifact originatingArtifact,
                                                List<Artifact> missingArtifacts,
                                                List<ArtifactRepository> remoteRepositories )
     {
-        this( originatingArtifact, new ArrayList<Artifact>(), missingArtifacts, remoteRepositories );
+        this( originatingArtifact, new ArrayList<>(), missingArtifacts, remoteRepositories );
     }
 
     /**

File: maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java
Patch:
@@ -37,10 +37,10 @@
 public class VersionRange
 {
     private static final Map<String, VersionRange> CACHE_SPEC =
-        Collections.<String, VersionRange>synchronizedMap( new WeakHashMap<String, VersionRange>() );
+        Collections.synchronizedMap( new WeakHashMap<>() );
 
     private static final Map<String, VersionRange> CACHE_VERSION =
-                    Collections.<String, VersionRange>synchronizedMap( new WeakHashMap<String, VersionRange>() );
+                    Collections.synchronizedMap( new WeakHashMap<>() );
 
     private final ArtifactVersion recommendedVersion;
 

File: maven-builder-support/src/main/java/org/apache/maven/building/DefaultProblemCollector.java
Patch:
@@ -38,7 +38,7 @@ class DefaultProblemCollector
 
     DefaultProblemCollector( List<Problem> problems )
     {
-        this.problems = ( problems != null ) ? problems : new ArrayList<Problem>();
+        this.problems = ( problems != null ) ? problems : new ArrayList<>();
     }
 
     @Override

File: maven-compat/src/main/java/org/apache/maven/artifact/resolver/DefaultArtifactResolver.java
Patch:
@@ -116,7 +116,7 @@ public void execute( Runnable command )
         else
         {
             executor = new ThreadPoolExecutor( threads, threads, 3, TimeUnit.SECONDS,
-                                               new LinkedBlockingQueue<Runnable>(), new DaemonThreadCreator() );
+                    new LinkedBlockingQueue<>(), new DaemonThreadCreator() );
         }
     }
 

File: maven-core/src/main/java/org/apache/maven/DuplicateProjectException.java
Patch:
@@ -45,7 +45,7 @@ public DuplicateProjectException( String message, Map<String, List<File>> collis
     {
         super( message, (File) null );
 
-        this.collisions = ( collisions != null ) ? collisions : new LinkedHashMap<String, List<File>>();
+        this.collisions = ( collisions != null ) ? collisions : new LinkedHashMap<>();
     }
 
     /**

File: maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulator.java
Patch:
@@ -78,7 +78,7 @@ public MavenExecutionRequest populateFromToolchains( MavenExecutionRequest reque
             {
                 if ( !groupedToolchains.containsKey( model.getType() ) )
                 {
-                    groupedToolchains.put( model.getType(), new ArrayList<ToolchainModel>() );
+                    groupedToolchains.put( model.getType(), new ArrayList<>() );
                 }
 
                 groupedToolchains.get( model.getType() ).add( model );

File: maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionResult.java
Patch:
@@ -41,7 +41,7 @@ public class DefaultMavenExecutionResult
     private final List<Throwable> exceptions = new CopyOnWriteArrayList<>();
 
     private final Map<MavenProject, BuildSummary> buildSummaries =
-        Collections.synchronizedMap( new IdentityHashMap<MavenProject, BuildSummary>() );
+        Collections.synchronizedMap( new IdentityHashMap<>() );
 
     public MavenExecutionResult setProject( MavenProject project )
     {
@@ -65,7 +65,7 @@ public MavenExecutionResult setTopologicallySortedProjects( List<MavenProject> t
     public List<MavenProject> getTopologicallySortedProjects()
     {
         return null == topologicallySortedProjects
-                   ? Collections.<MavenProject>emptyList()
+                   ? Collections.emptyList()
                    : Collections.unmodifiableList( topologicallySortedProjects );
 
     }

File: maven-core/src/main/java/org/apache/maven/graph/FilteredProjectDependencyGraph.java
Patch:
@@ -56,7 +56,7 @@ class FilteredProjectDependencyGraph
         this.projectDependencyGraph =
                 Objects.requireNonNull( projectDependencyGraph, "projectDependencyGraph cannot be null" );
 
-        this.whiteList = new IdentityHashMap<MavenProject, Object>();
+        this.whiteList = new IdentityHashMap<>();
 
         for ( MavenProject project : whiteList )
         {

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecycleExecutionPlanCalculator.java
Patch:
@@ -179,7 +179,7 @@ public void setupMojoExecution( MavenSession session, MavenProject project, Mojo
 
         finalizeMojoConfiguration( mojoExecution );
 
-        calculateForkedExecutions( mojoExecution, session, project, new HashSet<MojoDescriptor>() );
+        calculateForkedExecutions( mojoExecution, session, project, new HashSet<>() );
     }
 
     public List<MojoExecution> calculateMojoExecutions( MavenSession session, MavenProject project, List<Object> tasks )
@@ -331,7 +331,7 @@ public void calculateForkedExecutions( MojoExecution mojoExecution, MavenSession
         PluginDescriptorParsingException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException,
         LifecyclePhaseNotFoundException, LifecycleNotFoundException, PluginVersionResolutionException
     {
-        calculateForkedExecutions( mojoExecution, session, session.getCurrentProject(), new HashSet<MojoDescriptor>() );
+        calculateForkedExecutions( mojoExecution, session, session.getCurrentProject(), new HashSet<>() );
     }
 
     private void calculateForkedExecutions( MojoExecution mojoExecution, MavenSession session, MavenProject project,

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/DependencyContext.java
Patch:
@@ -62,8 +62,8 @@ public DependencyContext( MavenProject project, Collection<String> scopesToColle
         this.project = project;
         scopesToCollectForCurrentProject = scopesToCollect;
         scopesToResolveForCurrentProject = scopesToResolve;
-        scopesToCollectForAggregatedProjects = Collections.synchronizedSet( new TreeSet<String>() );
-        scopesToResolveForAggregatedProjects = Collections.synchronizedSet( new TreeSet<String>() );
+        scopesToCollectForAggregatedProjects = Collections.synchronizedSet( new TreeSet<>() );
+        scopesToResolveForAggregatedProjects = Collections.synchronizedSet( new TreeSet<>() );
     }
 
     public MavenProject getProject()

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleModuleBuilder.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.HashSet;
 import java.util.List;
 
-import org.apache.maven.artifact.Artifact;
 import org.apache.maven.execution.BuildSuccess;
 import org.apache.maven.execution.ExecutionEvent;
 import org.apache.maven.execution.MavenSession;
@@ -108,7 +107,7 @@ public void buildProject( MavenSession session, MavenSession rootSession, Reacto
             eventCatapult.fire( ExecutionEvent.Type.ProjectStarted, session, null );
 
             MavenExecutionPlan executionPlan =
-                builderCommon.resolveBuildPlan( session, currentProject, taskSegment, new HashSet<Artifact>() );
+                builderCommon.resolveBuildPlan( session, currentProject, taskSegment, new HashSet<>() );
             List<MojoExecution> mojoExecutions = executionPlan.getMojoExecutions();
 
             projectExecutionListener.beforeProjectLifecycleExecution( new ProjectExecutionEvent( session,

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/ReactorBuildStatus.java
Patch:
@@ -37,7 +37,7 @@ public class ReactorBuildStatus
 {
     private final ProjectDependencyGraph projectDependencyGraph;
 
-    private final Collection<String> blackListedProjects = Collections.synchronizedSet( new HashSet<String>() );
+    private final Collection<String> blackListedProjects = Collections.synchronizedSet( new HashSet<>() );
 
     private volatile boolean halted = false;
 

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/multithreaded/ThreadOutputMuxer.java
Patch:
@@ -56,7 +56,7 @@ public class ThreadOutputMuxer
 
     private final PrintStream defaultPrintStream = new PrintStream( defaultOutputStreamForUnknownData );
 
-    private final Set<ProjectSegment> completedBuilds = Collections.synchronizedSet( new HashSet<ProjectSegment>() );
+    private final Set<ProjectSegment> completedBuilds = Collections.synchronizedSet( new HashSet<>() );
 
     private volatile ProjectSegment currentBuild;
 

File: maven-core/src/main/java/org/apache/maven/project/MavenProject.java
Patch:
@@ -175,7 +175,7 @@ public class MavenProject
 
     private DependencyFilter extensionDependencyFilter;
 
-    private final Set<String> lifecyclePhases = Collections.synchronizedSet( new LinkedHashSet<String>() );
+    private final Set<String> lifecyclePhases = Collections.synchronizedSet( new LinkedHashSet<>() );
 
     public MavenProject()
     {

File: maven-core/src/main/java/org/apache/maven/toolchain/DefaultToolchainManager.java
Patch:
@@ -129,7 +129,7 @@ Map<String, Object> retrieveContext( MavenSession session )
             }
         }
 
-        return ( context != null ) ? context : new HashMap<String, Object>();
+        return ( context != null ) ? context : new HashMap<>();
     }
 
     public static final String getStorageKey( String type )

File: maven-core/src/main/java/org/apache/maven/toolchain/building/DefaultToolchainsBuildingResult.java
Patch:
@@ -48,7 +48,7 @@ public class DefaultToolchainsBuildingResult
     public DefaultToolchainsBuildingResult( PersistedToolchains effectiveToolchains, List<Problem> problems )
     {
         this.effectiveToolchains = effectiveToolchains;
-        this.problems = ( problems != null ) ? problems : new ArrayList<Problem>();
+        this.problems = ( problems != null ) ? problems : new ArrayList<>();
     }
 
     @Override

File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/BuilderCommonTest.java
Patch:
@@ -45,7 +45,7 @@ public void testResolveBuildPlan()
         final BuilderCommon builderCommon = getBuilderCommon();
         final MavenExecutionPlan plan =
             builderCommon.resolveBuildPlan( session1, ProjectDependencyGraphStub.A, taskSegment1,
-                                            new HashSet<Artifact>() );
+                    new HashSet<>() );
         assertEquals( LifecycleExecutionPlanCalculatorStub.getProjectAExceutionPlan().size(), plan.size() );
 
     }

File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/CompletionServiceStub.java
Patch:
@@ -33,7 +33,7 @@ public class CompletionServiceStub
     implements CompletionService<ProjectSegment>
 {
     List<FutureTask<ProjectSegment>> projectBuildFutureTasks =
-        Collections.synchronizedList( new ArrayList<FutureTask<ProjectSegment>>() );
+        Collections.synchronizedList(new ArrayList<>() );
 
     final boolean finishImmediately;
 

File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/MojoExecutorStub.java
Patch:
@@ -36,7 +36,7 @@ public class MojoExecutorStub
     extends MojoExecutor
 { // This is being lazy instead of making interface
 
-    public List<MojoExecution> executions = Collections.synchronizedList( new ArrayList<MojoExecution>() );
+    public List<MojoExecution> executions = Collections.synchronizedList(new ArrayList<>() );
 
     @Override
     public void execute( MavenSession session, MojoExecution mojoExecution, ProjectIndex projectIndex,

File: maven-embedder/src/main/java/org/apache/maven/cli/transfer/ConsoleMavenTransferListener.java
Patch:
@@ -41,7 +41,7 @@ public class ConsoleMavenTransferListener
 {
 
     private Map<TransferResource, Long> transfers = Collections.synchronizedMap(
-                                                        new LinkedHashMap<TransferResource, Long>() );
+            new LinkedHashMap<>() );
 
     private boolean printResourceNames;
     private int lastLength;

File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java
Patch:
@@ -437,7 +437,7 @@ else if ( !parentIds.add( parentData.getId() ) )
     public ModelBuildingResult build( ModelBuildingRequest request, ModelBuildingResult result )
         throws ModelBuildingException
     {
-        return build( request, result, new LinkedHashSet<String>() );
+        return build( request, result, new LinkedHashSet<>() );
     }
 
     private ModelBuildingResult build( ModelBuildingRequest request, ModelBuildingResult result,

File: maven-resolver-provider/src/test/java/org/apache/maven/repository/internal/RemoteSnapshotMetadataTest.java
Patch:
@@ -75,7 +75,7 @@ public void gregorianCalendarIsUsed()
         String datePart = ts.replaceAll( "\\..*", "" );
 
         /* Allow for this test running across midnight */
-        Set<String> expected = new HashSet<String>( Arrays.asList( dateBefore, dateAfter ) );
+        Set<String> expected = new HashSet<>( Arrays.asList( dateBefore, dateAfter ) );
         assertTrue( "Expected " + datePart + " to be in " + expected,
                 expected.contains( datePart ) );
     }

File: maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsBuildingResult.java
Patch:
@@ -40,7 +40,7 @@ class DefaultSettingsBuildingResult
     DefaultSettingsBuildingResult( Settings effectiveSettings, List<SettingsProblem> problems )
     {
         this.effectiveSettings = effectiveSettings;
-        this.problems = ( problems != null ) ? problems : new ArrayList<SettingsProblem>();
+        this.problems = ( problems != null ) ? problems : new ArrayList<>();
     }
 
     @Override

File: maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsProblemCollector.java
Patch:
@@ -39,7 +39,7 @@ class DefaultSettingsProblemCollector
 
     DefaultSettingsProblemCollector( List<SettingsProblem> problems )
     {
-        this.problems = ( problems != null ) ? problems : new ArrayList<SettingsProblem>();
+        this.problems = ( problems != null ) ? problems : new ArrayList<>();
     }
 
     public List<SettingsProblem> getProblems()

File: maven-settings-builder/src/main/java/org/apache/maven/settings/crypto/DefaultSettingsDecryptionResult.java
Patch:
@@ -43,9 +43,9 @@ class DefaultSettingsDecryptionResult
 
     DefaultSettingsDecryptionResult( List<Server> servers, List<Proxy> proxies, List<SettingsProblem> problems )
     {
-        this.servers = ( servers != null ) ? servers : new ArrayList<Server>();
-        this.proxies = ( proxies != null ) ? proxies : new ArrayList<Proxy>();
-        this.problems = ( problems != null ) ? problems : new ArrayList<SettingsProblem>();
+        this.servers = ( servers != null ) ? servers : new ArrayList<>();
+        this.proxies = ( proxies != null ) ? proxies : new ArrayList<>();
+        this.problems = ( problems != null ) ? problems : new ArrayList<>();
     }
 
     @Override

File: maven-compat/src/test/java/org/apache/maven/artifact/testutils/TestFileManager.java
Patch:
@@ -44,9 +44,8 @@
 import java.util.Iterator;
 import java.util.List;
 
-import junit.framework.Assert;
-
 import org.codehaus.plexus.util.FileUtils;
+import org.junit.Assert;
 
 public class TestFileManager
 {

File: maven-core/src/main/java/org/apache/maven/model/plugin/DefaultLifecycleBindingsInjector.java
Patch:
@@ -115,15 +115,15 @@ protected void mergePluginContainer_Plugins( PluginContainer target, PluginConta
 
                 for ( Plugin element : tgt )
                 {
-                    Object key = getPluginKey( element );
+                    Object key = getPluginKey().apply( element );
                     merged.put( key, element );
                 }
 
                 Map<Object, Plugin> added = new LinkedHashMap<>();
 
                 for ( Plugin element : src )
                 {
-                    Object key = getPluginKey( element );
+                    Object key = getPluginKey().apply( element );
                     Plugin existing = merged.get( key );
                     if ( existing != null )
                     {
@@ -143,7 +143,7 @@ protected void mergePluginContainer_Plugins( PluginContainer target, PluginConta
                     {
                         for ( Plugin managedPlugin : pluginMgmt.getPlugins() )
                         {
-                            Object key = getPluginKey( managedPlugin );
+                            Object key = getPluginKey().apply( managedPlugin );
                             Plugin addedPlugin = added.get( key );
                             if ( addedPlugin != null )
                             {

File: maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultDependencyManagementInjector.java
Patch:
@@ -72,13 +72,13 @@ public void mergeManagedDependencies( Model model )
 
                 for ( Dependency dependency : model.getDependencies() )
                 {
-                    Object key = getDependencyKey( dependency );
+                    Object key = getDependencyKey().apply( dependency );
                     dependencies.put( key, dependency );
                 }
 
                 for ( Dependency managedDependency : dependencyManagement.getDependencies() )
                 {
-                    Object key = getDependencyKey( managedDependency );
+                    Object key = getDependencyKey().apply( managedDependency );
                     Dependency dependency = dependencies.get( key );
                     if ( dependency != null )
                     {

File: maven-builder-support/src/main/java/org/apache/maven/building/DefaultProblem.java
Patch:
@@ -49,7 +49,7 @@ class DefaultProblem
      *
      * @param message The message describing the problem, may be {@code null}.
      * @param severity The severity level of the problem, may be {@code null} to default to
-     *            {@link SettingsProblem.Severity#ERROR}.
+     *            {@link org.apache.maven.building.Problem.Severity#ERROR}.
      * @param source A hint about the source of the problem like a file path, may be {@code null}.
      * @param lineNumber The one-based index of the line containing the problem or {@code -1} if unknown.
      * @param columnNumber The one-based index of the column containing the problem or {@code -1} if unknown.

File: maven-compat/src/main/java/org/apache/maven/artifact/resolver/DebugResolutionListener.java
Patch:
@@ -70,7 +70,7 @@ public void omitForNearer( Artifact omitted, Artifact kept )
         String omittedVersion = omitted.getVersion();
         String keptVersion = kept.getVersion();
 
-        if (!Objects.equals(omittedVersion, keptVersion))
+        if ( !Objects.equals( omittedVersion, keptVersion ) )
         {
             logger.debug( indent + omitted + " (removed - nearer found: " + keptVersion + ")" );
         }

File: maven-core/src/main/java/org/apache/maven/artifact/repository/MavenArtifactRepository.java
Patch:
@@ -354,7 +354,7 @@ public boolean equals( Object obj )
 
     protected static <T> boolean eq( T s1, T s2 )
     {
-        return Objects.equals(s1, s2);
+        return Objects.equals( s1, s2 );
     }
 
     public Authentication getAuthentication()

File: maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java
Patch:
@@ -39,7 +39,7 @@ class CacheUtils
     @Deprecated
     public static <T> boolean eq( T s1, T s2 )
     {
-        return Objects.equals(s1, s2);
+        return Objects.equals( s1, s2 );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0553SettingsAuthzEncryptionTest.java
Patch:
@@ -124,7 +124,6 @@ public void testitBasic()
         verifier.assertArtifactNotPresent( "org.apache.maven.its.mng0553", "a", "0.1-SNAPSHOT", "jar" );
         verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", filterProps );
         setUserHome( verifier, new File( testDir, "userhome" ) );
-        verifier.addCliOption( "--show-version" );
         verifier.addCliOption( "--settings" );
         verifier.addCliOption( "settings.xml" );
         verifier.executeGoal( "validate" );
@@ -196,7 +195,6 @@ public void testitEncryption()
         verifier = newVerifier( testDir.getAbsolutePath() );
         verifier.setAutoclean( false );
         setUserHome( verifier, new File( testDir, "userhome" ) );
-        verifier.addCliOption( "--show-version" );
         verifier.addCliOption( "--encrypt-password" );
         verifier.addCliOption( "testpass" );
         verifier.setLogFileName( "log-ep.txt" );

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingRequest.java
Patch:
@@ -100,6 +100,8 @@ public DefaultProjectBuildingRequest( ProjectBuildingRequest request )
         setProject( request.getProject() );
         setResolveDependencies( request.isResolveDependencies() );
         setValidationLevel( request.getValidationLevel() );
+        setResolveVersionRanges( request.isResolveVersionRanges() );
+        setRepositoryMerging( request.getRepositoryMerging() );
     }
 
     public MavenProject getProject()

File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilderFactory.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.maven.model.inheritance.DefaultInheritanceAssembler;
 import org.apache.maven.model.inheritance.InheritanceAssembler;
 import org.apache.maven.model.interpolation.ModelInterpolator;
-import org.apache.maven.model.interpolation.StringSearchModelInterpolator;
+import org.apache.maven.model.interpolation.StringVisitorModelInterpolator;
 import org.apache.maven.model.io.DefaultModelReader;
 import org.apache.maven.model.io.ModelReader;
 import org.apache.maven.model.locator.DefaultModelLocator;
@@ -126,7 +126,7 @@ protected ModelInterpolator newModelInterpolator()
     {
         UrlNormalizer normalizer = newUrlNormalizer();
         PathTranslator pathTranslator = newPathTranslator();
-        return new StringSearchModelInterpolator().setPathTranslator( pathTranslator ).setUrlNormalizer( normalizer );
+        return new StringVisitorModelInterpolator().setPathTranslator( pathTranslator ).setUrlNormalizer( normalizer );
     }
 
     protected ModelValidator newModelValidator()

File: maven-model-builder/src/test/java/org/apache/maven/model/validation/DefaultModelValidatorTest.java
Patch:
@@ -295,11 +295,11 @@ public void testMissingRepositoryId()
 
         assertEquals( "'repositories.repository.id' is missing.", result.getErrors().get( 0 ) );
 
-        assertEquals( "'repositories.repository[null].url' is missing.", result.getErrors().get( 1 ) );
+        assertEquals( "'repositories.repository.[null].url' is missing.", result.getErrors().get( 1 ) );
 
         assertEquals( "'pluginRepositories.pluginRepository.id' is missing.", result.getErrors().get( 2 ) );
 
-        assertEquals( "'pluginRepositories.pluginRepository[null].url' is missing.", result.getErrors().get( 3 ) );
+        assertEquals( "'pluginRepositories.pluginRepository.[null].url' is missing.", result.getErrors().get( 3 ) );
     }
 
     public void testMissingResourceDirectory()
@@ -735,7 +735,7 @@ public void testSelfReferencingDependencyInRawModel()
 
         assertViolations( result, 1, 0, 0 );
 
-        assertEquals( "'dependencies.dependency com.example.group:testinvalidpom:0.0.1-SNAPSHOT' for com.example.group:testinvalidpom:0.0.1-SNAPSHOT is referencing itself.",
+        assertEquals( "'dependencies.dependency[com.example.group:testinvalidpom:0.0.1-SNAPSHOT]' for com.example.group:testinvalidpom:0.0.1-SNAPSHOT is referencing itself.",
                       result.getFatals().get( 0 ) );
 
     }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2576MakeLikeReactorTest.java
Patch:
@@ -232,7 +232,7 @@ public void testitMatchesById()
     }
 
     /**
-     * Verify that the project list can also specify aritfact ids.
+     * Verify that the project list can also specify artifact ids.
      */
     public void testitMatchesByArtifactId()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5230MakeReactorWithExcludesTest.java
Patch:
@@ -231,7 +231,7 @@ public void testitMatchesByIdExclude()
     }
 
     /**
-     * Verify that the project list exclude can also specify aritfact ids.
+     * Verify that the project list exclude can also specify artifact ids.
      */
     public void testitMatchesByArtifactIdExclude()
         throws Exception

File: maven-model-builder/src/test/java/org/apache/maven/model/validation/DefaultModelValidatorTest.java
Patch:
@@ -129,9 +129,9 @@ public void testBadModelVersion()
         SimpleProblemCollector result =
             validateRaw( "bad-modelVersion.xml", ModelBuildingRequest.VALIDATION_LEVEL_STRICT );
 
-        assertViolations( result, 0, 1, 0 );
+        assertViolations( result, 1, 0, 0 );
 
-        assertTrue( result.getErrors().get( 0 ).contains( "modelVersion" ) );
+        assertTrue( result.getFatals().get( 0 ).contains( "modelVersion" ) );
     }
 
     public void testMissingArtifactId()

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java
Patch:
@@ -257,7 +257,6 @@ private Model loadPom( RepositorySystemSession session, ArtifactDescriptorReques
 
             Model model;
 
-            // hack: don't rebuild model if it was already loaded during reactor resolution
             final WorkspaceReader workspace = session.getWorkspaceReader();
             if ( workspace instanceof MavenWorkspaceReader )
             {

File: maven-core/src/main/java/org/apache/maven/project/MavenProject.java
Patch:
@@ -1207,7 +1207,8 @@ private void deepCopy( MavenProject project )
         // disown the parent
 
         // copy fields
-        setFile( project.getFile() );
+        file = project.file;
+        basedir = project.basedir;
 
         // don't need a deep copy, they don't get modified or added/removed to/from - but make them unmodifiable to be
         // sure!

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -106,6 +106,7 @@ public static Test suite()
         // -------------------------------------------------------------------------------------------------------------
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng6506PackageAnnotationTest.class );
         suite.addTestSuite( MavenITmng6256SpecialCharsAlternatePOMLocation.class );
         suite.addTestSuite( MavenITmng6386BaseUriPropertyTest.class );
         suite.addTestSuite( MavenITmng6330RelativePath.class );

File: maven-model-builder/src/main/java/org/apache/maven/model/superpom/DefaultSuperPomProvider.java
Patch:
@@ -74,7 +74,7 @@ public Model getSuperModel( String version )
                 Map<String, Object> options = new HashMap<>();
                 options.put( "xml:4.0.0", "xml:4.0.0" );
 
-                String modelId = "org.apache.maven:model-builder:"
+                String modelId = "org.apache.maven:maven-model-builder:"
                     + this.getClass().getPackage().getImplementationVersion() + ":super-pom";
                 InputSource inputSource = new InputSource();
                 inputSource.setModelId( modelId );

File: its/core-it-support/maven-it-helper/src/main/java/org/apache/maven/it/AbstractMavenIntegrationTestCase.java
Patch:
@@ -556,18 +556,18 @@ protected Verifier newVerifier( String basedir, String settings, boolean debug )
         {
             // auto set source+target to lowest accepted value based on java version
             // Java9 requires at least 1.6
-            if ( VersionRange.createFromVersionSpec( "[1.9,12)" ).containsVersion( getJavaVersion() ) )
+            if ( VersionRange.createFromVersionSpec( "[9,12)" ).containsVersion( getJavaVersion() ) )
             {
                 verifier.getSystemProperties().put( "maven.compiler.source", "1.6" );
                 verifier.getSystemProperties().put( "maven.compiler.target", "1.6" );
-                verifier.getSystemProperties().put( "maven.compiler.release.", "6" );
+                verifier.getSystemProperties().put( "maven.compiler.release", "6" );
             }
             // Java12 requires at least 7
             if ( VersionRange.createFromVersionSpec( "[12,)" ).containsVersion( getJavaVersion() ) )
             {
                 verifier.getSystemProperties().put( "maven.compiler.source", "7" );
                 verifier.getSystemProperties().put( "maven.compiler.target", "7" );
-                verifier.getSystemProperties().put( "maven.compiler.release.", "7" );
+                verifier.getSystemProperties().put( "maven.compiler.release", "7" );
             }
         }
         catch ( InvalidVersionSpecificationException e )

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5965ParallelBuildMultipliesWorkTest.java
Patch:
@@ -17,7 +17,7 @@ public class MavenITmng5965ParallelBuildMultipliesWorkTest
 {
     public MavenITmng5965ParallelBuildMultipliesWorkTest()
     {
-        super( "[3.0,)" );
+        super( "[3.6.1-SNAPSHOT,)" );
     }
 
     public void testItShouldOnlyRunEachTaskOnce()

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -106,6 +106,7 @@ public static Test suite()
         // -------------------------------------------------------------------------------------------------------------
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng6256SpecialCharsAlternatePOMLocation.class );
         suite.addTestSuite( MavenITmng6386BaseUriPropertyTest.class );
         suite.addTestSuite( MavenITmng6330RelativePath.class );
         suite.addTestSuite( MavenITmng5965ParallelBuildMultipliesWorkTest.class );

File: maven-core/src/main/java/org/apache/maven/artifact/repository/MavenArtifactRepository.java
Patch:
@@ -215,7 +215,7 @@ public void setUrl( String url )
 
     /**
      * Return the protocol name.
-     * <br/>
+     * <br>
      * E.g: for input
      * <code>http://www.codehaus.org</code> this method will return <code>http</code>
      *

File: maven-core/src/main/java/org/apache/maven/plugin/PluginParameterExpressionEvaluator.java
Patch:
@@ -34,7 +34,9 @@
 
 /**
  * Evaluator for plugin parameters expressions. Content surrounded by <code>${</code> and <code>}</code> is evaluated.
- * Recognized values are:<table border="1" summary="Expression matrix">
+ * Recognized values are:
+ * <table border="1">
+ * <caption>Expression matrix</caption>
  * <tr><th>expression</th>                     <th></th>               <th>evaluation result</th></tr>
  * <tr><td><code>session</code></td>           <td></td>               <td>the actual {@link MavenSession}</td></tr>
  * <tr><td><code>session.*</code></td>         <td>(since Maven 3)</td><td></td></tr>

File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/ModelInterpolator.java
Patch:
@@ -26,7 +26,7 @@
 import java.io.File;
 
 /**
- * Replaces expressions of the form <tt>${token}</tt> with their effective values. Effective values are basically
+ * Replaces expressions of the form <code>${token}</code> with their effective values. Effective values are basically
  * calculated from the elements of the model itself and the execution properties from the building request.
  *
  * @author jdcasey

File: maven-plugin-api/src/main/java/org/apache/maven/plugin/AbstractMojo.java
Patch:
@@ -35,8 +35,9 @@
  * There are also a number of attributes which can be used to control how and when the
  * <code>Mojo</code> is executed:
  * </p>
- * <table border="1" summary="mojo annotation attributes">
- *  <tr bgcolor="#CCCCCC">
+ * <table border="1">
+ *  <caption>mojo annotation attributes</caption>
+ *  <tr>
  *      <th>Descriptor Element</th>
  *      <th>Annotation</th>
  *      <th>Required?</th>

File: its/core-it-support/core-it-wagon/src/main/java/org/apache/maven/wagon/providers/coreit/CoreItWagon.java
Patch:
@@ -162,7 +162,7 @@ public void fillOutputData( OutputData outputData )
 
         try
         {
-            File file = new File( "target/wagon.properties" ).getAbsoluteFile();
+            File file = new File( System.getProperty( "user.dir" ), "target/wagon.properties" ).getAbsoluteFile();
             file.getParentFile().mkdirs();
 
             try ( OutputStream os = new FileOutputStream( file ) )

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java
Patch:
@@ -186,7 +186,7 @@ public Artifact createExtensionArtifact( String groupId, String artifactId, Stri
             // MNG-5368: Log a message instead of returning 'null' silently.
             this.logger.error( String.format(
                 "Invalid version specification '%s' creating extension artifact '%s:%s:%s'.",
-                version, groupId, artifactId, version, e ) );
+                version, groupId, artifactId, version ), e );
 
             return null;
         }
@@ -217,7 +217,7 @@ public Artifact createPluginArtifact( Plugin plugin )
             // MNG-5368: Log a message instead of returning 'null' silently.
             this.logger.error( String.format(
                 "Invalid version specification '%s' creating plugin artifact '%s'.",
-                version, plugin, e ) );
+                version, plugin ), e );
 
             return null;
         }

File: maven-core/src/main/java/org/apache/maven/project/MavenProject.java
Patch:
@@ -81,8 +81,8 @@
  * </p>
  * <p>
  * With changes during 3.2.2 release MavenProject is closer to being immutable after construction with the removal of
- * all components from this class, and the upfront construction taken care of entirely by the @{ProjectBuilder}. There
- * is still the issue of having to run the lifecycle in order to find all the compile source roots and resource
+ * all components from this class, and the upfront construction taken care of entirely by the {@link ProjectBuilder}.
+ * There is still the issue of having to run the lifecycle in order to find all the compile source roots and resource
  * directories but I hope to take care of this during the Maven 4.0 release (jvz).
  * </p>
  */
@@ -260,7 +260,7 @@ public void setFile( File file )
 
     /**
      * Sets project {@code file} without changing project {@code basedir}.
-     * 
+     *
      * @since 3.2.4
      */
     public void setPomFile( File file )

File: maven-artifact/src/main/java/org/apache/maven/artifact/ArtifactUtils.java
Patch:
@@ -29,6 +29,9 @@
 import org.apache.commons.lang3.Validate;
 import org.apache.maven.artifact.versioning.VersionRange;
 
+/**
+ * ArtifactUtils
+ */
 public final class ArtifactUtils
 {
 

File: maven-artifact/src/main/java/org/apache/maven/artifact/DefaultArtifact.java
Patch:
@@ -94,6 +94,7 @@ public DefaultArtifact( String groupId, String artifactId, VersionRange versionR
         this( groupId, artifactId, versionRange, scope, type, classifier, artifactHandler, false );
     }
 
+    @SuppressWarnings( "checkstyle:parameternumber" )
     public DefaultArtifact( String groupId, String artifactId, VersionRange versionRange, String scope, String type,
                             String classifier, ArtifactHandler artifactHandler, boolean optional )
     {

File: maven-artifact/src/main/java/org/apache/maven/artifact/metadata/ArtifactMetadata.java
Patch:
@@ -19,6 +19,9 @@
  * under the License.
  */
 
+/**
+ * Contains metadata about an artifact, and methods to retrieve/store it from an artifact repository.
+ */
 @Deprecated
 public interface ArtifactMetadata
     extends org.apache.maven.repository.legacy.metadata.ArtifactMetadata

File: maven-artifact/src/main/java/org/apache/maven/artifact/repository/ArtifactRepositoryPolicy.java
Patch:
@@ -198,6 +198,7 @@ else if ( ArtifactRepositoryPolicy.CHECKSUM_POLICY_IGNORE.equals( policy ) )
         }
     }
 
+    @SuppressWarnings( "checkstyle:magicnumber" )
     private int ordinalOfUpdatePolicy( String policy )
     {
         if ( ArtifactRepositoryPolicy.UPDATE_POLICY_DAILY.equals( policy ) )

File: maven-artifact/src/main/java/org/apache/maven/artifact/repository/Authentication.java
Patch:
@@ -19,6 +19,9 @@
  * under the License.
  */
 
+/**
+ * Authentication
+ */
 public class Authentication
 {
 

File: maven-artifact/src/main/java/org/apache/maven/artifact/repository/layout/ArtifactRepositoryLayout2.java
Patch:
@@ -22,6 +22,9 @@
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;
 
+/**
+ * ArtifactRepositoryLayout2
+ */
 public interface ArtifactRepositoryLayout2
     extends ArtifactRepositoryLayout
 {

File: maven-artifact/src/main/java/org/apache/maven/repository/Proxy.java
Patch:
@@ -19,6 +19,9 @@
  * under the License.
  */
 
+/**
+ * Proxy
+ */
 public class Proxy
 {
     public static final String PROXY_SOCKS5 = "SOCKS_5";

File: maven-compat/src/main/java/org/apache/maven/artifact/deployer/ArtifactDeployer.java
Patch:
@@ -24,6 +24,9 @@
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.repository.ArtifactRepository;
 
+/**
+ * ArtifactDeployer
+ */
 public interface ArtifactDeployer
 {
     String ROLE = ArtifactDeployer.class.getName();

File: maven-compat/src/main/java/org/apache/maven/artifact/deployer/DefaultArtifactDeployer.java
Patch:
@@ -47,6 +47,9 @@
 import org.eclipse.aether.repository.RemoteRepository;
 import org.eclipse.aether.util.artifact.SubArtifact;
 
+/**
+ * DefaultArtifactDeployer
+ */
 @Component( role = ArtifactDeployer.class, instantiationStrategy = "per-lookup" )
 public class DefaultArtifactDeployer
     extends AbstractLogEnabled

File: maven-compat/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java
Patch:
@@ -42,6 +42,9 @@
 import org.codehaus.plexus.component.annotations.Requirement;
 import org.codehaus.plexus.logging.Logger;
 
+/**
+ * Manages <a href="https://maven.apache.org/wagon">Wagon</a> related operations in Maven.
+ */
 @Component( role = WagonManager.class )
 public class DefaultWagonManager
     extends org.apache.maven.repository.legacy.DefaultWagonManager

File: maven-compat/src/main/java/org/apache/maven/artifact/repository/layout/FlatRepositoryLayout.java
Patch:
@@ -25,6 +25,9 @@
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.codehaus.plexus.component.annotations.Component;
 
+/**
+ * FlatRepositoryLayout
+ */
 @Component( role = ArtifactRepositoryLayout.class, hint = "flat" )
 public class FlatRepositoryLayout
     implements ArtifactRepositoryLayout

File: maven-compat/src/main/java/org/apache/maven/artifact/repository/metadata/MetadataBridge.java
Patch:
@@ -149,7 +149,7 @@ static class MetadataRepository
 
         private File metadataFile;
 
-        public MetadataRepository( File metadataFile )
+        MetadataRepository( File metadataFile )
         {
             super( "local", "", null );
             this.metadataFile = metadataFile;

File: maven-compat/src/main/java/org/apache/maven/artifact/resolver/ArtifactResolver.java
Patch:
@@ -79,6 +79,7 @@ ArtifactResolutionResult resolveTransitively(
         throws ArtifactResolutionException, ArtifactNotFoundException;
 
     @Deprecated
+    @SuppressWarnings( "checkstyle:parameternumber" )
     ArtifactResolutionResult resolveTransitively(
         Set<Artifact> artifacts, Artifact originatingArtifact,
         Map<String, Artifact> managedVersions, ArtifactRepository localRepository,

File: maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java
Patch:
@@ -21,6 +21,9 @@
 
 import org.apache.maven.artifact.Artifact;
 
+/**
+ * InversionArtifactFilter
+ */
 public class InversionArtifactFilter
     implements ArtifactFilter
 {

File: maven-compat/src/main/java/org/apache/maven/artifact/versioning/ManagedVersionMap.java
Patch:
@@ -25,6 +25,9 @@
 
 import org.apache.maven.artifact.Artifact;
 
+/**
+ * ManagedVersionMap
+ */
 @Deprecated
 public class ManagedVersionMap
     extends HashMap<String, Artifact>

File: maven-compat/src/main/java/org/apache/maven/profiles/DefaultMavenProfilesBuilder.java
Patch:
@@ -34,6 +34,9 @@
 import java.io.StringReader;
 import java.io.StringWriter;
 
+/**
+ * DefaultMavenProfilesBuilder
+ */
 @Deprecated
 @Component( role = MavenProfilesBuilder.class )
 public class DefaultMavenProfilesBuilder

File: maven-compat/src/main/java/org/apache/maven/profiles/DefaultProfileManager.java
Patch:
@@ -39,6 +39,9 @@
 import java.util.Properties;
 import org.apache.maven.model.building.ModelProblemCollectorRequest;
 
+/**
+ * DefaultProfileManager
+ */
 @Deprecated
 public class DefaultProfileManager
     implements ProfileManager

File: maven-compat/src/main/java/org/apache/maven/profiles/ProfileManager.java
Patch:
@@ -26,6 +26,9 @@
 import java.util.Map;
 import java.util.Properties;
 
+/**
+ * ProfileManager
+ */
 @Deprecated
 public interface ProfileManager
 {

File: maven-compat/src/main/java/org/apache/maven/profiles/ProfilesConversionUtils.java
Patch:
@@ -27,6 +27,9 @@
 
 import java.util.List;
 
+/**
+ * ProfilesConversionUtils
+ */
 @Deprecated
 public class ProfilesConversionUtils
 {

File: maven-compat/src/main/java/org/apache/maven/profiles/activation/DetectedProfileActivator.java
Patch:
@@ -21,6 +21,9 @@
 
 import org.apache.maven.model.Profile;
 
+/**
+ * DetectedProfileActivator
+ */
 @Deprecated
 public abstract class DetectedProfileActivator
     implements ProfileActivator

File: maven-compat/src/main/java/org/apache/maven/profiles/activation/FileProfileActivator.java
Patch:
@@ -33,6 +33,9 @@
 import org.codehaus.plexus.util.FileUtils;
 import org.codehaus.plexus.util.StringUtils;
 
+/**
+ * FileProfileActivator
+ */
 @Deprecated
 public class FileProfileActivator
     extends DetectedProfileActivator

File: maven-compat/src/main/java/org/apache/maven/profiles/activation/JdkPrefixProfileActivator.java
Patch:
@@ -26,6 +26,9 @@
 import org.apache.maven.model.Profile;
 import org.codehaus.plexus.util.StringUtils;
 
+/**
+ * JdkPrefixProfileActivator
+ */
 @Deprecated
 public class JdkPrefixProfileActivator
     extends DetectedProfileActivator

File: maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java
Patch:
@@ -24,6 +24,9 @@
 import org.apache.maven.model.Profile;
 import org.codehaus.plexus.util.Os;
 
+/**
+ * OperatingSystemProfileActivator
+ */
 @Deprecated
 public class OperatingSystemProfileActivator
     implements ProfileActivator

File: maven-compat/src/main/java/org/apache/maven/profiles/activation/ProfileActivationException.java
Patch:
@@ -19,6 +19,9 @@
  * under the License.
  */
 
+/**
+ * ProfileActivationException
+ */
 @Deprecated
 public class ProfileActivationException
     extends Exception

File: maven-compat/src/main/java/org/apache/maven/profiles/activation/ProfileActivator.java
Patch:
@@ -21,6 +21,9 @@
 
 import org.apache.maven.model.Profile;
 
+/**
+ * ProfileActivator
+ */
 @Deprecated
 public interface ProfileActivator
 {

File: maven-compat/src/main/java/org/apache/maven/profiles/activation/SystemPropertyProfileActivator.java
Patch:
@@ -28,6 +28,9 @@
 import org.codehaus.plexus.personality.plexus.lifecycle.phase.Contextualizable;
 import org.codehaus.plexus.util.StringUtils;
 
+/**
+ * SystemPropertyProfileActivator
+ */
 @Deprecated
 public class SystemPropertyProfileActivator
     extends DetectedProfileActivator implements Contextualizable

File: maven-compat/src/main/java/org/apache/maven/project/DefaultProjectBuilderConfiguration.java
Patch:
@@ -25,6 +25,9 @@
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.profiles.ProfileManager;
 
+/**
+ * DefaultProjectBuilderConfiguration
+ */
 @Deprecated
 public class DefaultProjectBuilderConfiguration
     implements ProjectBuilderConfiguration

File: maven-compat/src/main/java/org/apache/maven/project/InvalidProjectModelException.java
Patch:
@@ -23,6 +23,9 @@
 
 import org.apache.maven.project.validation.ModelValidationResult;
 
+/**
+ * InvalidProjectModelException
+ */
 @Deprecated
 public class InvalidProjectModelException
     extends ProjectBuildingException

File: maven-compat/src/main/java/org/apache/maven/project/MissingRepositoryElementException.java
Patch:
@@ -20,7 +20,9 @@
  */
 
 import org.apache.maven.artifact.InvalidRepositoryException;
-
+/**
+ * Error constructing an artifact repository.
+ */
 public class MissingRepositoryElementException
     extends InvalidRepositoryException
 {

File: maven-compat/src/main/java/org/apache/maven/project/ProjectUtils.java
Patch:
@@ -37,6 +37,9 @@
 // This class needs to stick around because it was exposed the the remote resources plugin started using it instead of
 // getting the repositories from the project.
 
+/**
+ * ProjectUtils
+ */
 @Deprecated
 public final class ProjectUtils
 {

File: maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java
Patch:
@@ -47,6 +47,9 @@
 import org.codehaus.plexus.util.StringUtils;
 import org.codehaus.plexus.util.xml.Xpp3Dom;
 
+/**
+ * DefaultModelInheritanceAssembler
+ */
 @Component( role = ModelInheritanceAssembler.class )
 public class DefaultModelInheritanceAssembler
     implements ModelInheritanceAssembler

File: maven-compat/src/main/java/org/apache/maven/project/path/DefaultPathTranslator.java
Patch:
@@ -29,6 +29,9 @@
 import org.apache.maven.model.Resource;
 import org.codehaus.plexus.component.annotations.Component;
 
+/**
+ * DefaultPathTranslator
+ */
 @Deprecated
 @Component( role = PathTranslator.class )
 public class DefaultPathTranslator

File: maven-compat/src/main/java/org/apache/maven/project/validation/DefaultModelValidator.java
Patch:
@@ -60,7 +60,7 @@ private static class SimpleModelProblemCollector
 
         ModelValidationResult result;
 
-        public SimpleModelProblemCollector( ModelValidationResult result )
+        SimpleModelProblemCollector( ModelValidationResult result )
         {
             this.result = result;
         }

File: maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java
Patch:
@@ -29,6 +29,9 @@
 import org.codehaus.plexus.component.annotations.Component;
 import org.codehaus.plexus.util.StringUtils;
 
+/**
+ * DefaultMirrorSelector
+ */
 @Component( role = MirrorSelector.class )
 public class DefaultMirrorSelector
     implements MirrorSelector

File: maven-compat/src/main/java/org/apache/maven/repository/MetadataResolutionResult.java
Patch:
@@ -74,7 +74,7 @@ public Artifact getOriginatingArtifact()
         return originatingArtifact;
     }
 
-    public MetadataResolutionResult ListOriginatingArtifact( final Artifact originatingArtifact )
+    public MetadataResolutionResult listOriginatingArtifact( final Artifact originatingArtifact )
     {
         this.originatingArtifact = originatingArtifact;
 
@@ -323,8 +323,9 @@ private <T> List<T> initList( final List<T> l )
     public String toString()
     {
         if ( artifacts == null )
+        {
             return "";
-
+        }
         StringBuilder sb = new StringBuilder( 256 );
         int i = 1;
         sb.append( "---------\n" );

File: maven-compat/src/main/java/org/apache/maven/repository/UserLocalArtifactRepository.java
Patch:
@@ -25,6 +25,9 @@
 import org.apache.maven.artifact.metadata.ArtifactMetadata;
 import org.apache.maven.artifact.repository.ArtifactRepository;
 
+/**
+ * UserLocalArtifactRepository
+ */
 public class UserLocalArtifactRepository
     extends LocalArtifactRepository
 {

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/DefaultUpdateCheckManager.java
Patch:
@@ -39,6 +39,9 @@
 import java.util.Date;
 import java.util.Properties;
 
+/**
+ * DefaultUpdateCheckManager
+ */
 @Component( role = UpdateCheckManager.class )
 public class DefaultUpdateCheckManager
     extends AbstractLogEnabled

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java
Patch:
@@ -882,7 +882,7 @@ static class UnknownRepositoryLayout
 
         private final ArtifactRepositoryLayout fallback;
 
-        public UnknownRepositoryLayout( String id, ArtifactRepositoryLayout fallback )
+        UnknownRepositoryLayout( String id, ArtifactRepositoryLayout fallback )
         {
             this.id = id;
             this.fallback = fallback;

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/MavenArtifact.java
Patch:
@@ -32,7 +32,7 @@ class MavenArtifact
 
     private long transferStartTime;
 
-    public MavenArtifact( String repositoryUrl, Resource resource )
+    MavenArtifact( String repositoryUrl, Resource resource )
     {
         if ( repositoryUrl == null )
         {

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/TransferListenerAdapter.java
Patch:
@@ -30,6 +30,9 @@
 import org.apache.maven.wagon.repository.Repository;
 import org.apache.maven.wagon.resource.Resource;
 
+/**
+ * TransferListenerAdapter
+ */
 public class TransferListenerAdapter
     implements TransferListener
 {

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/UpdateCheckManager.java
Patch:
@@ -25,6 +25,9 @@
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.artifact.repository.metadata.RepositoryMetadata;
 
+/**
+ * UpdateCheckManager
+ */
 public interface UpdateCheckManager
 {
 

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/WagonConfigurationException.java
Patch:
@@ -21,7 +21,9 @@
 
 import org.apache.maven.wagon.TransferFailedException;
 
-
+/**
+ * WagonConfigurationException
+ */
 public class WagonConfigurationException
     extends TransferFailedException
 {

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/WagonManager.java
Patch:
@@ -32,6 +32,9 @@
 import org.apache.maven.wagon.events.TransferListener;
 import org.apache.maven.wagon.repository.Repository;
 
+/**
+ * WagonManager
+ */
 public interface WagonManager
 {
     @Deprecated

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/LegacyArtifactCollector.java
Patch:
@@ -39,6 +39,7 @@
  * @author <a href="mailto:brett@apache.org">Brett Porter</a>
  */
 @Deprecated
+@SuppressWarnings( "checkstyle:parameternumber" )
 public interface LegacyArtifactCollector
 {
 

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/transform/ArtifactTransformationManager.java
Patch:
@@ -29,7 +29,9 @@
 import org.apache.maven.artifact.resolver.ArtifactNotFoundException;
 import org.apache.maven.artifact.resolver.ArtifactResolutionException;
 
-/** Manages multiple ArtifactTransformation instances and applies them in succession. */
+/**
+ * Manages multiple ArtifactTransformation instances and applies them in succession.
+ */
 public interface ArtifactTransformationManager
 {
     String ROLE = ArtifactTransformationManager.class.getName();

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/transform/LatestArtifactTransformation.java
Patch:
@@ -28,6 +28,9 @@
 import org.apache.maven.artifact.resolver.ArtifactResolutionException;
 import org.codehaus.plexus.component.annotations.Component;
 
+/**
+ * Describes a version transformation during artifact resolution - "latest" type
+ */
 @Component( role = ArtifactTransformation.class, hint = "latest" )
 public class LatestArtifactTransformation
     extends AbstractVersionTransformation

File: maven-compat/src/main/java/org/apache/maven/repository/metadata/MetadataGraphEdge.java
Patch:
@@ -81,6 +81,7 @@ private static boolean objectsEqual( Object o1, Object o2 )
      * used to eliminate exact duplicates in the edge list
      */
     @Override
+    @SuppressWarnings( "checkstyle:equalshashcode" )
     public boolean equals( Object o )
     {
         if ( o instanceof MetadataGraphEdge )

File: maven-compat/src/main/java/org/apache/maven/repository/metadata/MetadataResolutionException.java
Patch:
@@ -19,6 +19,9 @@
  * under the License.
  */
 
+/**
+ * MetadataResolutionException
+ */
 public class MetadataResolutionException
     extends Exception
 {

File: maven-compat/src/main/java/org/apache/maven/repository/metadata/MetadataResolutionRequestTypeEnum.java
Patch:
@@ -19,6 +19,9 @@
  * under the License.
  */
 
+/**
+ * MetadataResolutionRequestTypeEnum
+ */
 public enum MetadataResolutionRequestTypeEnum
 {
       tree( 1 )

File: maven-compat/src/main/java/org/apache/maven/usability/plugin/ExpressionDocumentationException.java
Patch:
@@ -19,6 +19,9 @@
  * under the License.
  */
 
+/**
+ * ExpressionDocumentationException
+ */
 public class ExpressionDocumentationException
     extends Exception
 {

File: maven-compat/src/main/java/org/apache/maven/usability/plugin/ExpressionDocumenter.java
Patch:
@@ -35,6 +35,9 @@
 import java.util.List;
 import java.util.Map;
 
+/**
+ * ExpressionDocumenter
+ */
 public class ExpressionDocumenter
 {
 

File: maven-core/src/main/java/org/apache/maven/ArtifactFilterManager.java
Patch:
@@ -23,6 +23,9 @@
 
 import org.apache.maven.artifact.resolver.filter.ArtifactFilter;
 
+/**
+ * ArtifactFilterManager
+ */
 public interface ArtifactFilterManager
 {
     /**

File: maven-core/src/main/java/org/apache/maven/Maven.java
Patch:
@@ -31,6 +31,7 @@
 public interface Maven
 {
     @Deprecated
+    @SuppressWarnings( "checkstyle:constantname" )
     String POMv4 = "pom.xml";
 
     MavenExecutionResult execute( MavenExecutionRequest request );

File: maven-core/src/main/java/org/apache/maven/MissingModuleException.java
Patch:
@@ -21,6 +21,9 @@
 
 import java.io.File;
 
+/**
+ * MissingModuleException
+ */
 public class MissingModuleException
     extends MavenExecutionException
 {

File: maven-core/src/main/java/org/apache/maven/ProjectDependenciesResolver.java
Patch:
@@ -28,13 +28,13 @@
 import org.apache.maven.execution.MavenSession;
 import org.apache.maven.project.MavenProject;
 
-@Deprecated
 /**
  * @deprecated As of 3.2.2, and there is no direct replacement. This is an internal class which was not marked as such,
  *             but should have been.
  * @author jvanzyl
  *
  */
+@Deprecated
 public interface ProjectDependenciesResolver
 {
 

File: maven-core/src/main/java/org/apache/maven/artifact/metadata/AbstractArtifactMetadata.java
Patch:
@@ -21,6 +21,9 @@
 
 import org.apache.maven.artifact.Artifact;
 
+/**
+ * AbstractArtifactMetadata
+ */
 @Deprecated
 public abstract class AbstractArtifactMetadata
     extends org.apache.maven.repository.legacy.metadata.AbstractArtifactMetadata

File: maven-core/src/main/java/org/apache/maven/artifact/metadata/ArtifactMetadataRetrievalException.java
Patch:
@@ -21,6 +21,9 @@
 
 import org.apache.maven.artifact.Artifact;
 
+/**
+ * Error while retrieving repository metadata from the repository - deprecated
+ */
 @Deprecated
 public class ArtifactMetadataRetrievalException
     extends org.apache.maven.repository.legacy.metadata.ArtifactMetadataRetrievalException

File: maven-core/src/main/java/org/apache/maven/artifact/metadata/ResolutionGroup.java
Patch:
@@ -26,6 +26,9 @@
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.repository.ArtifactRepository;
 
+/**
+ * ResolutionGroup
+ */
 @Deprecated
 public class ResolutionGroup
     extends org.apache.maven.repository.legacy.metadata.ResolutionGroup

File: maven-core/src/main/java/org/apache/maven/artifact/repository/metadata/RepositoryMetadataManager.java
Patch:
@@ -25,6 +25,9 @@
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.artifact.repository.RepositoryRequest;
 
+/**
+ * RepositoryMetadataManager
+ */
 public interface RepositoryMetadataManager
 {
 

File: maven-core/src/main/java/org/apache/maven/artifact/resolver/ResolutionNode.java
Patch:
@@ -32,6 +32,9 @@
 import org.apache.maven.artifact.versioning.ArtifactVersion;
 import org.apache.maven.artifact.versioning.OverConstrainedVersionException;
 
+/**
+ * ResolutionNode
+ */
 public class ResolutionNode
 {
     private Artifact artifact;

File: maven-core/src/main/java/org/apache/maven/eventspy/EventSpy.java
Patch:
@@ -31,7 +31,9 @@
  */
 public interface EventSpy
 {
-
+    /**
+     * Context
+     */
     interface Context
     {
 

File: maven-core/src/main/java/org/apache/maven/exception/DefaultExceptionHandler.java
Patch:
@@ -83,6 +83,9 @@
 // PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException,
 // CycleDetectedInPluginGraphException;
 
+/**
+ * Transform an exception into useful end-user message.
+ */
 @Component( role = ExceptionHandler.class )
 public class DefaultExceptionHandler
     implements ExceptionHandler

File: maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulator.java
Patch:
@@ -49,6 +49,9 @@
 import org.apache.maven.toolchain.model.ToolchainModel;
 import org.codehaus.plexus.util.StringUtils;
 
+/**
+ * Assists in populating an execution request for invocation of Maven.
+ */
 @Named
 public class DefaultMavenExecutionRequestPopulator
     implements MavenExecutionRequestPopulator

File: maven-core/src/main/java/org/apache/maven/execution/MavenSession.java
Patch:
@@ -322,6 +322,7 @@ public MavenSession( PlexusContainer container, MavenExecutionRequest request, M
     }
 
     @Deprecated
+    @SuppressWarnings( "checkstyle:parameternumber" )
     public MavenSession( PlexusContainer container, Settings settings, ArtifactRepository localRepository,
                          EventDispatcher eventDispatcher, ReactorManager unused, List<String> goals,
                          String executionRootDir, Properties executionProperties, Date startTime )
@@ -331,6 +332,7 @@ public MavenSession( PlexusContainer container, Settings settings, ArtifactRepos
     }
 
     @Deprecated
+    @SuppressWarnings( "checkstyle:parameternumber" )
     public MavenSession( PlexusContainer container, Settings settings, ArtifactRepository localRepository,
                          EventDispatcher eventDispatcher, ReactorManager unused, List<String> goals,
                          String executionRootDir, Properties executionProperties, Properties userProperties,

File: maven-core/src/main/java/org/apache/maven/execution/ReactorManager.java
Patch:
@@ -31,6 +31,9 @@
 import java.util.List;
 import java.util.Map;
 
+/**
+ * ReactorManager - unused
+ */
 @Deprecated
 public class ReactorManager
 {

File: maven-core/src/main/java/org/apache/maven/execution/scope/internal/MojoExecutionScopeCoreModule.java
Patch:
@@ -24,6 +24,9 @@
 
 import org.apache.maven.execution.MojoExecutionListener;
 
+/**
+ * MojoExecutionScopeCoreModule
+ */
 @Named
 public class MojoExecutionScopeCoreModule
     extends MojoExecutionScopeModule

File: maven-core/src/main/java/org/apache/maven/execution/scope/internal/MojoExecutionScopeModule.java
Patch:
@@ -27,6 +27,9 @@
 
 import com.google.inject.AbstractModule;
 
+/**
+ * MojoExecutionScopeModule
+ */
 public class MojoExecutionScopeModule
     extends AbstractModule
 {

File: maven-core/src/main/java/org/apache/maven/extension/internal/CoreExportsProvider.java
Patch:
@@ -26,6 +26,9 @@
 import org.codehaus.plexus.PlexusContainer;
 import org.eclipse.sisu.Nullable;
 
+/**
+ * CoreExportsProvider
+ */
 @Named
 @Singleton
 public class CoreExportsProvider

File: maven-core/src/main/java/org/apache/maven/graph/DefaultGraphBuilder.java
Patch:
@@ -55,6 +55,9 @@
 import org.codehaus.plexus.util.StringUtils;
 import org.codehaus.plexus.util.dag.CycleDetectedException;
 
+/**
+ * Builds the {@link ProjectDependencyGraph inter-dependencies graph} between projects in the reactor.
+ */
 @Component( role = GraphBuilder.class, hint = GraphBuilder.HINT )
 public class DefaultGraphBuilder
     implements GraphBuilder

File: maven-core/src/main/java/org/apache/maven/lifecycle/MavenExecutionPlan.java
Patch:
@@ -42,6 +42,9 @@
 //      from the plugin archive.
 //TODO this will be the class that people get in IDEs to modify
 
+/**
+ * MavenExecutionPlan
+ */
 public class MavenExecutionPlan
     implements Iterable<ExecutionPlanItem>
 {

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultProjectArtifactFactory.java
Patch:
@@ -30,6 +30,9 @@
 import org.apache.maven.project.artifact.InvalidDependencyVersionException;
 import org.apache.maven.project.artifact.MavenMetadataSource;
 
+/**
+ * Default component responsible for creation of MavenProject#dependencyArtifacts instances.
+ */
 @SuppressWarnings( "deprecation" )
 @Named
 public class DefaultProjectArtifactFactory

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleDependencyResolver.java
Patch:
@@ -138,7 +138,7 @@ public void resolveProjectDependencies( MavenProject project, Collection<String>
             
             if ( recordArtifacts != null )
             {
-                resolvedArtifacts = recordArtifacts.artifacts;
+                resolvedArtifacts = recordArtifacts.getArtifacts();
             }
             else
             {

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/BuilderNotFoundException.java
Patch:
@@ -19,6 +19,9 @@
  * under the License.
  */
 
+/**
+ * BuilderNotFoundException
+ */
 public class BuilderNotFoundException
     extends Exception
 {

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/multithreaded/ThreadOutputMuxer.java
Patch:
@@ -71,7 +71,7 @@ public class ThreadOutputMuxer
     class ConsolePrinter
         implements Runnable
     {
-        public volatile boolean running;
+        private volatile boolean running;
 
         private final ProjectBuildList projectBuildList;
 

File: maven-core/src/main/java/org/apache/maven/lifecycle/mapping/DefaultLifecycleMapping.java
Patch:
@@ -23,6 +23,9 @@
 import java.util.List;
 import java.util.Map;
 
+/**
+ * DefaultLifecycleMapping
+ */
 public class DefaultLifecycleMapping
     implements LifecycleMapping
 {

File: maven-core/src/main/java/org/apache/maven/lifecycle/mapping/LifecycleMapping.java
Patch:
@@ -22,6 +22,9 @@
 import java.util.List;
 import java.util.Map;
 
+/**
+ * LifecycleMapping
+ */
 public interface LifecycleMapping
 {
 

File: maven-core/src/main/java/org/apache/maven/lifecycle/mapping/LifecycleMojo.java
Patch:
@@ -24,6 +24,9 @@
 import org.apache.maven.model.Dependency;
 import org.codehaus.plexus.util.xml.Xpp3Dom;
 
+/**
+ * LifecycleMojo
+ */
 public class LifecycleMojo
 {
     

File: maven-core/src/main/java/org/apache/maven/lifecycle/mapping/LifecyclePhase.java
Patch:
@@ -27,6 +27,9 @@
 
 import org.codehaus.plexus.util.StringUtils;
 
+/**
+ * LifecyclePhase
+ */
 public class LifecyclePhase
 {
     

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultBuildPluginManager.java
Patch:
@@ -40,6 +40,9 @@
 // TODO the antrun plugin has its own configurator, the only plugin that does. might need to think about how that works
 // TODO remove the coreArtifactFilterManager
 
+/**
+ * DefaultBuildPluginManager
+ */
 @Component( role = BuildPluginManager.class )
 public class DefaultBuildPluginManager
     implements BuildPluginManager

File: maven-core/src/main/java/org/apache/maven/plugin/InvalidPluginDescriptorException.java
Patch:
@@ -21,6 +21,9 @@
 
 import java.util.List;
 
+/**
+ * InvalidPluginDescriptorException
+ */
 public class InvalidPluginDescriptorException
     extends Exception
 {

File: maven-core/src/main/java/org/apache/maven/plugin/MavenPluginValidator.java
Patch:
@@ -25,6 +25,9 @@
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.plugin.descriptor.PluginDescriptor;
 
+/**
+ * MavenPluginValidator
+ */
 public class MavenPluginValidator
 {
     private final Artifact pluginArtifact;

File: maven-core/src/main/java/org/apache/maven/plugin/MojoExecution.java
Patch:
@@ -27,6 +27,9 @@
 import org.apache.maven.plugin.descriptor.MojoDescriptor;
 import org.codehaus.plexus.util.xml.Xpp3Dom;
 
+/**
+ * MojoExecution
+ */
 public class MojoExecution
 {
 

File: maven-core/src/main/java/org/apache/maven/plugin/PluginExecutionException.java
Patch:
@@ -23,6 +23,9 @@
 import org.apache.maven.project.MavenProject;
 import org.codehaus.plexus.util.StringUtils;
 
+/**
+ * Exception in the plugin manager.
+ */
 public class PluginExecutionException
     extends PluginManagerException
 {

File: maven-core/src/main/java/org/apache/maven/plugin/PluginParameterException.java
Patch:
@@ -29,6 +29,9 @@
 import org.apache.maven.plugin.descriptor.Parameter;
 import org.codehaus.plexus.util.StringUtils;
 
+/**
+ * PluginParameterException
+ */
 public class PluginParameterException
     extends PluginConfigurationException
 {

File: maven-core/src/main/java/org/apache/maven/plugin/PluginParameterExpressionEvaluator.java
Patch:
@@ -144,6 +144,7 @@ public Object evaluate( String expr )
     }
 
     @Override
+    @SuppressWarnings( "checkstyle:methodlength" )
     public Object evaluate( String expr, Class<?> type )
         throws ExpressionEvaluationException
     {

File: maven-core/src/main/java/org/apache/maven/plugin/prefix/NoPluginFoundForPrefixException.java
Patch:
@@ -24,6 +24,9 @@
 import org.eclipse.aether.repository.LocalRepository;
 import org.eclipse.aether.repository.RemoteRepository;
 
+/**
+ * NoPluginFoundForPrefixException
+ */
 public class NoPluginFoundForPrefixException
     extends Exception
 {

File: maven-core/src/main/java/org/apache/maven/plugin/version/PluginVersionNotFoundException.java
Patch:
@@ -19,6 +19,9 @@
  * under the License.
  */
 
+/**
+ * PluginVersionNotFoundException
+ */
 public class PluginVersionNotFoundException
     extends Exception
 {

File: maven-core/src/main/java/org/apache/maven/plugin/version/PluginVersionResolutionException.java
Patch:
@@ -24,6 +24,9 @@
 import org.eclipse.aether.repository.LocalRepository;
 import org.eclipse.aether.repository.RemoteRepository;
 
+/**
+ * PluginVersionResolutionException
+ */
 public class PluginVersionResolutionException
     extends Exception
 {

File: maven-core/src/main/java/org/apache/maven/project/DefaultMavenProjectHelper.java
Patch:
@@ -31,6 +31,9 @@
 import org.codehaus.plexus.component.annotations.Requirement;
 import org.codehaus.plexus.logging.AbstractLogEnabled;
 
+/**
+ * DefaultMavenProjectHelper
+ */
 @SuppressWarnings( "deprecation" )
 @Component( role = MavenProjectHelper.class )
 public class DefaultMavenProjectHelper

File: maven-core/src/main/java/org/apache/maven/project/DefaultModelBuildingListener.java
Patch:
@@ -99,8 +99,8 @@ public void buildExtensionsAssembled( ModelBuildingEvent event )
                 ProjectRealmCache.CacheRecord record =
                     projectBuildingHelper.createProjectRealm( project, model, projectBuildingRequest );
 
-                project.setClassRealm( record.realm );
-                project.setExtensionDependencyFilter( record.extensionArtifactFilter );
+                project.setClassRealm( record.getRealm() );
+                project.setExtensionDependencyFilter( record.getExtensionArtifactFilter() );
             }
             catch ( PluginResolutionException | PluginManagerException | PluginVersionResolutionException e )
             {

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java
Patch:
@@ -196,9 +196,9 @@ public synchronized ProjectRealmCache.CacheRecord createProjectRealm( MavenProje
             ExtensionRealmCache.CacheRecord recordRealm =
                 pluginManager.setupExtensionsRealm( project, plugin, request.getRepositorySession() );
 
-            final ClassRealm extensionRealm = recordRealm.realm;
-            final ExtensionDescriptor extensionDescriptor = recordRealm.descriptor;
-            final List<Artifact> artifacts = recordRealm.artifacts;
+            final ClassRealm extensionRealm = recordRealm.getRealm();
+            final ExtensionDescriptor extensionDescriptor = recordRealm.getDescriptor();
+            final List<Artifact> artifacts = recordRealm.getArtifacts();
 
             extensionRealms.add( extensionRealm );
             if ( extensionDescriptor != null )

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingRequest.java
Patch:
@@ -31,6 +31,9 @@
 import org.apache.maven.properties.internal.SystemProperties;
 import org.eclipse.aether.RepositorySystemSession;
 
+/**
+ * DefaultProjectBuildingRequest
+ */
 public class DefaultProjectBuildingRequest
     implements ProjectBuildingRequest
 {

File: maven-core/src/main/java/org/apache/maven/project/InvalidProjectVersionException.java
Patch:
@@ -23,6 +23,9 @@
 
 import org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;
 
+/**
+ * InvalidProjectVersionException
+ */
 public class InvalidProjectVersionException
     extends ProjectBuildingException
 {

File: maven-core/src/main/java/org/apache/maven/project/ProjectBuildingRequest.java
Patch:
@@ -27,6 +27,9 @@
 import org.apache.maven.model.Profile;
 import org.eclipse.aether.RepositorySystemSession;
 
+/**
+ * ProjectBuildingRequest
+ */
 public interface ProjectBuildingRequest
 {
 

File: maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java
Patch:
@@ -96,7 +96,7 @@ public int hashCode()
         @Override
         public String toString()
         {
-            StringBuilder buffer = new StringBuilder( 96 );
+            StringBuilder buffer = new StringBuilder( 128 );
             buffer.append( groupId ).append( ':' ).append( artifactId ).append( ':' ).append( version );
             return buffer.toString();
         }

File: maven-core/src/main/java/org/apache/maven/project/artifact/ArtifactWithDependencies.java
Patch:
@@ -23,6 +23,9 @@
 
 import org.apache.maven.model.Dependency;
 
+/**
+ * ArtifactWithDependencies
+ */
 public interface ArtifactWithDependencies
 {
 

File: maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataCache.java
Patch:
@@ -25,6 +25,9 @@
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.artifact.metadata.ResolutionGroup;
 
+/**
+ * MavenMetadataCache
+ */
 public interface MavenMetadataCache
 {
 

File: maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java
Patch:
@@ -534,7 +534,7 @@ private ProjectBuilder getProjectBuilder()
 
         return projectBuilder;
     }
-
+    @SuppressWarnings( "checkstyle:methodlength" )
     private ProjectRelocation retrieveRelocatedProject( Artifact artifact, MetadataResolutionRequest repositoryRequest )
         throws ArtifactMetadataRetrievalException
     {

File: maven-core/src/main/java/org/apache/maven/project/artifact/PluginArtifact.java
Patch:
@@ -28,6 +28,9 @@
 import org.apache.maven.model.Dependency;
 import org.apache.maven.model.Plugin;
 
+/**
+ * PluginArtifact
+ */
 public class PluginArtifact
     extends DefaultArtifact
     implements ArtifactWithDependencies

File: maven-core/src/main/java/org/apache/maven/project/artifact/ProjectArtifact.java
Patch:
@@ -28,6 +28,9 @@
 import org.apache.maven.model.DependencyManagement;
 import org.apache.maven.project.MavenProject;
 
+/**
+ * ProjectArtifact
+ */
 public class ProjectArtifact
     extends DefaultArtifact
     implements ArtifactWithDependencies

File: maven-core/src/main/java/org/apache/maven/repository/ArtifactDoesNotExistException.java
Patch:
@@ -19,6 +19,9 @@
  * under the License.
  */
 
+/**
+ * ArtifactDoesNotExistException
+ */
 public class ArtifactDoesNotExistException
     extends Exception
 {

File: maven-core/src/main/java/org/apache/maven/repository/ArtifactTransferFailedException.java
Patch:
@@ -19,6 +19,9 @@
  * under the License.
  */
 
+/**
+ * ArtifactTransferFailedException
+ */
 public class ArtifactTransferFailedException
     extends Exception
 {

File: maven-core/src/main/java/org/apache/maven/repository/ArtifactTransferListener.java
Patch:
@@ -19,6 +19,9 @@
  * under the License.
  */
 
+/**
+ * ArtifactTransferListener
+ */
 public interface ArtifactTransferListener
 {
     boolean isShowChecksumEvents();

File: maven-core/src/main/java/org/apache/maven/repository/LocalArtifactRepository.java
Patch:
@@ -22,6 +22,9 @@
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.repository.MavenArtifactRepository;
 
+/**
+ * LocalArtifactRepository
+ */
 public abstract class LocalArtifactRepository
     extends MavenArtifactRepository
 {

File: maven-core/src/main/java/org/apache/maven/repository/RepositorySystem.java
Patch:
@@ -44,10 +44,13 @@ public interface RepositorySystem
 {
     String DEFAULT_LOCAL_REPO_ID = "local";
 
+    @SuppressWarnings( "checkstyle:constantname" )
     String userHome = System.getProperty( "user.home" );
 
+    @SuppressWarnings( "checkstyle:constantname" )
     File userMavenConfigurationHome = new File( userHome, ".m2" );
 
+    @SuppressWarnings( "checkstyle:constantname" )
     File defaultUserLocalRepository = new File( userMavenConfigurationHome, "repository" );
 
     String DEFAULT_REMOTE_REPO_ID = "central";

File: maven-core/src/main/java/org/apache/maven/repository/legacy/metadata/ResolutionGroup.java
Patch:
@@ -26,6 +26,9 @@
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.repository.ArtifactRepository;
 
+/**
+ * ResolutionGroup
+ */
 public class ResolutionGroup
 {
 

File: maven-core/src/main/java/org/apache/maven/session/scope/internal/SessionScopeModule.java
Patch:
@@ -29,6 +29,9 @@
 
 import com.google.inject.AbstractModule;
 
+/**
+ * SessionScopeModule
+ */
 @Named
 public class SessionScopeModule
     extends AbstractModule

File: maven-core/src/main/java/org/apache/maven/toolchain/merge/MavenToolchainMerger.java
Patch:
@@ -71,13 +71,13 @@ private void shallowMerge( List<ToolchainModel> dominant, List<ToolchainModel> r
             }
             else
             {
-                mergeToolchainModel_Configuration( dominantModel, recessiveModel );
+                mergeToolchainModelConfiguration( dominantModel, recessiveModel );
             }
         }
     }
 
-    protected void mergeToolchainModel_Configuration( ToolchainModel target,
-                                                      ToolchainModel source )
+    protected void mergeToolchainModelConfiguration( ToolchainModel target,
+                                                    ToolchainModel source )
     {
         Xpp3Dom src = (Xpp3Dom) source.getConfiguration();
         if ( src != null )

File: maven-core/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java
Patch:
@@ -43,7 +43,7 @@ public class LegacyLocalRepositoryManager
 
     private final LocalRepository repository;
 
-    public LegacyLocalRepositoryManager( File basedir )
+    LegacyLocalRepositoryManager( File basedir )
     {
         this.repository = new LocalRepository( basedir.getAbsoluteFile(), "legacy" );
     }

File: maven-embedder/src/main/java/org/apache/maven/cli/CleanArgument.java
Patch:
@@ -22,6 +22,9 @@
 import java.util.ArrayList;
 import java.util.List;
 
+/**
+ * CleanArgument
+ */
 public class CleanArgument
 {
     public static String[] cleanArgs( String[] args )

File: maven-embedder/src/main/java/org/apache/maven/cli/CliRequest.java
Patch:
@@ -27,6 +27,9 @@
 import org.apache.maven.execution.MavenExecutionRequest;
 import org.codehaus.plexus.classworlds.ClassWorld;
 
+/**
+ * CliRequest
+ */
 public class CliRequest
 {
     String[] args;

File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -1268,6 +1268,7 @@ private MavenExecutionRequest populateRequest( CliRequest cliRequest )
         return populateRequest( cliRequest, cliRequest.request );
     }
 
+    @SuppressWarnings( "checkstyle:methodlength" )
     private MavenExecutionRequest populateRequest( CliRequest cliRequest, MavenExecutionRequest request )
     {
         CommandLine commandLine = cliRequest.commandLine;
@@ -1681,8 +1682,7 @@ private static void setCliProperty( String property, Properties properties )
     static class ExitException
         extends Exception
     {
-        @SuppressWarnings( "checkstyle:visibilitymodifier" )
-        public int exitCode;
+        int exitCode;
 
         ExitException( int exitCode )
         {

File: maven-embedder/src/main/java/org/apache/maven/cli/configuration/ConfigurationProcessor.java
Patch:
@@ -21,6 +21,9 @@
 
 import org.apache.maven.cli.CliRequest;
 
+/**
+ * ConfigurationProcessor
+ */
 public interface ConfigurationProcessor
 {
     void process( CliRequest request )

File: maven-embedder/src/main/java/org/apache/maven/cli/configuration/SettingsXmlConfigurationProcessor.java
Patch:
@@ -47,6 +47,9 @@
 import org.codehaus.plexus.component.annotations.Requirement;
 import org.slf4j.Logger;
 
+/**
+ * SettingsXmlConfigurationProcessor
+ */
 @Component( role = ConfigurationProcessor.class, hint = SettingsXmlConfigurationProcessor.HINT )
 public class SettingsXmlConfigurationProcessor
     implements ConfigurationProcessor

File: maven-embedder/src/main/java/org/apache/maven/cli/event/DefaultEventSpyContext.java
Patch:
@@ -24,6 +24,9 @@
 
 import org.apache.maven.eventspy.EventSpy;
 
+/**
+ * DefaultEventSpyContext
+ */
 public class DefaultEventSpyContext
     implements EventSpy.Context
 {

File: maven-embedder/src/main/java/org/apache/maven/cli/internal/BootstrapCoreExtensionManager.java
Patch:
@@ -49,6 +49,9 @@
 import org.eclipse.aether.util.filter.ExclusionsDependencyFilter;
 import org.eclipse.aether.util.graph.visitor.PreorderNodeListGenerator;
 
+/**
+ * BootstrapCoreExtensionManager
+ */
 @Named
 public class BootstrapCoreExtensionManager
 {

File: maven-embedder/src/main/java/org/apache/maven/cli/logging/Slf4jConfiguration.java
Patch:
@@ -28,6 +28,9 @@
  */
 public interface Slf4jConfiguration
 {
+    /**
+     * Level
+     */
     enum Level
     {
         DEBUG, INFO, ERROR

File: maven-embedder/src/main/java/org/apache/maven/cli/transfer/BatchModeMavenTransferListener.java
Patch:
@@ -21,6 +21,9 @@
 
 import java.io.PrintStream;
 
+/**
+ * BatchModeMavenTransferListener
+ */
 public class BatchModeMavenTransferListener
     extends AbstractMavenTransferListener
 {

File: maven-embedder/src/main/java/org/apache/maven/cli/transfer/Slf4jMavenTransferListener.java
Patch:
@@ -29,6 +29,9 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+/**
+ * Slf4jMavenTransferListener
+ */
 public class Slf4jMavenTransferListener
     extends AbstractTransferListener
 {

File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java
Patch:
@@ -239,6 +239,7 @@ public DefaultModelBuilder setReportingConverter( ReportingConverter reportingCo
         return this;
     }
 
+    @SuppressWarnings( "checkstyle:methodlength" )
     @Override
     public ModelBuildingResult build( ModelBuildingRequest request )
         throws ModelBuildingException
@@ -1131,6 +1132,7 @@ private Model getSuperModel()
         return superPomProvider.getSuperModel( "4.0.0" ).clone();
     }
 
+    @SuppressWarnings( "checkstyle:methodlength" )
     private void importDependencyManagement( Model model, ModelBuildingRequest request,
                                              DefaultModelProblemCollector problems, Collection<String> importIds )
     {

File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelProblem.java
Patch:
@@ -82,6 +82,7 @@ public DefaultModelProblem( String message, Severity severity, Version version,
      * @param exception The exception that caused this problem, may be {@code null}.
      */
     //mkleint: does this need to be public?
+    @SuppressWarnings( "checkstyle:parameternumber" )
     public DefaultModelProblem( String message, Severity severity, Version version, String source, int lineNumber,
                                 int columnNumber, String modelId, Exception exception )
     {

File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelProcessor.java
Patch:
@@ -31,6 +31,9 @@
 import org.codehaus.plexus.component.annotations.Component;
 import org.codehaus.plexus.component.annotations.Requirement;
 
+/**
+ * DefaultModelProcessor
+ */
 @Component( role = ModelProcessor.class )
 public class DefaultModelProcessor
     implements ModelProcessor

File: maven-model-builder/src/main/java/org/apache/maven/model/building/ModelData.java
Patch:
@@ -206,7 +206,7 @@ public void setVersion( String version )
      */
     public String getId()
     {
-        StringBuilder buffer = new StringBuilder( 96 );
+        StringBuilder buffer = new StringBuilder( 128 );
 
         buffer.append( getGroupId() ).append( ':' ).append( getArtifactId() ).append( ':' ).append( getVersion() );
 

File: maven-model-builder/src/main/java/org/apache/maven/model/building/ModelProblem.java
Patch:
@@ -41,6 +41,9 @@ enum Severity
 
     }
 
+    /**
+     * Version
+     */
     enum Version
     {
         //based on ModeBuildingResult.validationLevel

File: maven-model-builder/src/main/java/org/apache/maven/model/building/ModelProblemUtils.java
Patch:
@@ -44,7 +44,7 @@ static String toSourceHint( Model model )
             return "";
         }
 
-        StringBuilder buffer = new StringBuilder( 192 );
+        StringBuilder buffer = new StringBuilder( 128 );
 
         buffer.append( toId( model ) );
 
@@ -108,7 +108,7 @@ static String toId( Model model )
      */
     static String toId( String groupId, String artifactId, String version )
     {
-        StringBuilder buffer = new StringBuilder( 96 );
+        StringBuilder buffer = new StringBuilder( 128 );
 
         buffer.append( ( groupId != null && groupId.length() > 0 ) ? groupId : "[unknown-group-id]" );
         buffer.append( ':' );

File: maven-model-builder/src/main/java/org/apache/maven/model/building/ModelProcessor.java
Patch:
@@ -22,6 +22,9 @@
 import org.apache.maven.model.io.ModelReader;
 import org.apache.maven.model.locator.ModelLocator;
 
+/**
+ * ModelProcessor
+ */
 @SuppressWarnings( "checkstyle:interfaceistype" )
 public interface ModelProcessor
     extends ModelLocator, ModelReader

File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/MavenBuildTimestamp.java
Patch:
@@ -25,6 +25,9 @@
 import java.util.Properties;
 import java.util.TimeZone;
 
+/**
+ * MavenBuildTimestamp
+ */
 public class MavenBuildTimestamp
 {
     // ISO 8601-compliant timestamp for machine readability

File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringSearchModelInterpolator.java
Patch:
@@ -44,6 +44,9 @@
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 
+/**
+ * StringSearchModelInterpolator
+ */
 @Component( role = ModelInterpolator.class )
 public class StringSearchModelInterpolator
     extends AbstractStringBasedModelInterpolator

File: maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java
Patch:
@@ -53,6 +53,7 @@
  *
  * @author Benjamin Bentmann
  */
+@SuppressWarnings( { "checkstyle:methodname" } )
 public class MavenModelMerger
     extends ModelMerger
 {

File: maven-model-builder/src/main/java/org/apache/maven/model/normalization/DefaultModelNormalizer.java
Patch:
@@ -94,6 +94,9 @@ public void mergeDuplicates( Model model, ModelBuildingRequest request, ModelPro
         }
     }
 
+    /**
+     * DuplicateMerger
+     */
     protected static class DuplicateMerger
         extends MavenModelMerger
     {

File: maven-model-builder/src/main/java/org/apache/maven/model/resolution/WorkspaceModelResolver.java
Patch:
@@ -21,6 +21,9 @@
 
 import org.apache.maven.model.Model;
 
+/**
+ * WorkspaceModelResolver
+ */
 public interface WorkspaceModelResolver
 {
 

File: maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java
Patch:
@@ -979,6 +979,7 @@ private boolean validateBoolean( String fieldName, ModelProblemCollector problem
         return false;
     }
 
+    @SuppressWarnings( "checkstyle:parameternumber" )
     private boolean validateEnum( String fieldName, ModelProblemCollector problems, Severity severity, Version version,
                                   String string, String sourceHint, InputLocationTracker tracker,
                                   String... validValues )
@@ -1001,6 +1002,7 @@ private boolean validateEnum( String fieldName, ModelProblemCollector problems,
         return false;
     }
 
+    @SuppressWarnings( "checkstyle:parameternumber" )
     private boolean validateBannedCharacters( String fieldName, ModelProblemCollector problems, Severity severity,
                                               Version version, String string, String sourceHint,
                                               InputLocationTracker tracker, String banned )

File: maven-plugin-api/src/main/java/org/apache/maven/plugin/MojoNotFoundException.java
Patch:
@@ -25,6 +25,9 @@
 import org.apache.maven.plugin.descriptor.MojoDescriptor;
 import org.apache.maven.plugin.descriptor.PluginDescriptor;
 
+/**
+ * MojoNotFoundException
+ */
 public class MojoNotFoundException
     extends Exception
 {

File: maven-plugin-api/src/main/java/org/apache/maven/plugin/descriptor/DuplicateMojoDescriptorException.java
Patch:
@@ -19,6 +19,9 @@
  * under the License.
  */
 
+/**
+ * DuplicateMojoDescriptorException
+ */
 public class DuplicateMojoDescriptorException
     extends InvalidPluginDescriptorException
 {

File: maven-plugin-api/src/main/java/org/apache/maven/plugin/descriptor/DuplicateParameterException.java
Patch:
@@ -19,6 +19,9 @@
  * under the License.
  */
 
+/**
+ * DuplicateParameterException
+ */
 public class DuplicateParameterException
     extends InvalidPluginDescriptorException
 {

File: maven-plugin-api/src/main/java/org/apache/maven/plugin/descriptor/InvalidPluginDescriptorException.java
Patch:
@@ -21,6 +21,9 @@
 
 import org.codehaus.plexus.configuration.PlexusConfigurationException;
 
+/**
+ * InvalidPluginDescriptorException
+ */
 public class InvalidPluginDescriptorException
     extends PlexusConfigurationException
 {

File: maven-plugin-api/src/main/java/org/apache/maven/plugin/descriptor/PluginDescriptorBuilder.java
Patch:
@@ -114,6 +114,7 @@ public PluginDescriptor build( Reader reader, String source )
         return pluginDescriptor;
     }
 
+    @SuppressWarnings( "checkstyle:methodlength" )
     public MojoDescriptor buildComponentDescriptor( PlexusConfiguration c, PluginDescriptor pluginDescriptor )
         throws PlexusConfigurationException
     {

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionResolver.java
Patch:
@@ -150,6 +150,7 @@ public DefaultVersionResolver setRepositoryEventDispatcher( RepositoryEventDispa
         return this;
     }
 
+    @SuppressWarnings( "checkstyle:methodlength" )
     public VersionResult resolveVersion( RepositorySystemSession session, VersionRequest request )
         throws VersionResolutionException
     {
@@ -482,7 +483,7 @@ private static class VersionInfo
             this.repository = repository;
         }
 
-        public boolean isOutdated( String timestamp )
+        boolean isOutdated( String timestamp )
         {
             return timestamp != null && timestamp.compareTo( this.timestamp ) > 0;
         }

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenResolverModule.java
Patch:
@@ -35,6 +35,9 @@
 import org.eclipse.aether.impl.VersionResolver;
 import org.eclipse.aether.impl.guice.AetherModule;
 
+/**
+ * MavenResolverModule
+ */
 public final class MavenResolverModule
     extends AbstractModule
 {

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenWorkspaceReader.java
Patch:
@@ -23,6 +23,9 @@
 import org.eclipse.aether.artifact.Artifact;
 import org.eclipse.aether.repository.WorkspaceReader;
 
+/**
+ * MavenWorkspaceReader
+ */
 public interface MavenWorkspaceReader
     extends WorkspaceReader
 {

File: maven-slf4j-provider/src/main/java/org/slf4j/impl/MavenSimpleLoggerFactory.java
Patch:
@@ -21,6 +21,9 @@
 
 import org.slf4j.Logger;
 
+/**
+ * MavenSimpleLoggerFactory
+ */
 public class MavenSimpleLoggerFactory
     extends SimpleLoggerFactory
 {

File: maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java
Patch:
@@ -98,7 +98,7 @@ private IntegerItem()
             this.value = BIG_INTEGER_ZERO;
         }
 
-        public IntegerItem( String str )
+        IntegerItem( String str )
         {
             this.value = new BigInteger( str );
         }
@@ -169,7 +169,7 @@ private static class StringItem
 
         private String value;
 
-        public StringItem( String value, boolean followedByDigit )
+        StringItem( String value, boolean followedByDigit )
         {
             if ( followedByDigit && value.length() == 1 )
             {

File: maven-builder-support/src/main/java/org/apache/maven/building/DefaultProblem.java
Patch:
@@ -55,7 +55,7 @@ class DefaultProblem
      * @param columnNumber The one-based index of the column containing the problem or {@code -1} if unknown.
      * @param exception The exception that caused this problem, may be {@code null}.
      */
-    public DefaultProblem( String message, Severity severity, String source, int lineNumber, int columnNumber,
+    DefaultProblem( String message, Severity severity, String source, int lineNumber, int columnNumber,
                                    Exception exception )
     {
         this.message = message;

File: maven-builder-support/src/main/java/org/apache/maven/building/DefaultProblemCollector.java
Patch:
@@ -36,7 +36,7 @@ class DefaultProblemCollector
 
     private String source;
 
-    public DefaultProblemCollector( List<Problem> problems )
+    DefaultProblemCollector( List<Problem> problems )
     {
         this.problems = ( problems != null ) ? problems : new ArrayList<Problem>();
     }

File: maven-core/src/main/java/org/apache/maven/ReactorReader.java
Patch:
@@ -64,7 +64,7 @@ class ReactorReader
     private WorkspaceRepository repository;
 
     @Inject
-    public ReactorReader( MavenSession session )
+    ReactorReader( MavenSession session )
     {
         projectsByGAV = session.getProjectMap();
 

File: maven-core/src/main/java/org/apache/maven/RepositoryUtils.java
Patch:
@@ -347,7 +347,7 @@ static class MavenArtifactTypeRegistry
 
         private final ArtifactHandlerManager handlerManager;
 
-        public MavenArtifactTypeRegistry( ArtifactHandlerManager handlerManager )
+        MavenArtifactTypeRegistry( ArtifactHandlerManager handlerManager )
         {
             this.handlerManager = handlerManager;
         }

File: maven-core/src/main/java/org/apache/maven/artifact/repository/LegacyLocalRepositoryManager.java
Patch:
@@ -197,7 +197,7 @@ static class ArtifactMetadataAdapter
 
         private final Metadata metadata;
 
-        public ArtifactMetadataAdapter( Metadata metadata )
+        ArtifactMetadataAdapter( Metadata metadata )
         {
             this.metadata = metadata;
         }
@@ -291,7 +291,7 @@ static class ArtifactRepositoryAdapter
 
         private final RemoteRepository repository;
 
-        public ArtifactRepositoryAdapter( RemoteRepository repository )
+        ArtifactRepositoryAdapter( RemoteRepository repository )
         {
             this.repository = repository;
         }

File: maven-core/src/main/java/org/apache/maven/classrealm/ArtifactClassRealmConstituent.java
Patch:
@@ -32,7 +32,7 @@ class ArtifactClassRealmConstituent
 
     private final Artifact artifact;
 
-    public ArtifactClassRealmConstituent( Artifact artifact )
+    ArtifactClassRealmConstituent( Artifact artifact )
     {
         this.artifact = artifact;
     }

File: maven-core/src/main/java/org/apache/maven/classrealm/DefaultClassRealmRequest.java
Patch:
@@ -39,8 +39,8 @@ class DefaultClassRealmRequest
 
     private final List<ClassRealmConstituent> constituents;
 
-    public DefaultClassRealmRequest( RealmType type, ClassLoader parent, List<String> parentImports,
-                                     Map<String, ClassLoader> foreignImports, List<ClassRealmConstituent> constituents )
+    DefaultClassRealmRequest( RealmType type, ClassLoader parent, List<String> parentImports,
+                              Map<String, ClassLoader> foreignImports, List<ClassRealmConstituent> constituents )
     {
         this.type = type;
         this.parent = parent;

File: maven-core/src/main/java/org/apache/maven/configuration/internal/DefaultBeanConfigurator.java
Patch:
@@ -111,7 +111,7 @@ static class BeanExpressionEvaluator
 
         private final BeanConfigurationPathTranslator translator;
 
-        public BeanExpressionEvaluator( BeanConfigurationRequest request )
+        BeanExpressionEvaluator( BeanConfigurationRequest request )
         {
             preprocessor = request.getValuePreprocessor();
             translator = request.getPathTranslator();

File: maven-core/src/main/java/org/apache/maven/eventspy/internal/EventSpyExecutionListener.java
Patch:
@@ -35,7 +35,7 @@ class EventSpyExecutionListener
 
     private final ExecutionListener delegate;
 
-    public EventSpyExecutionListener( EventSpyDispatcher dispatcher, ExecutionListener delegate )
+    EventSpyExecutionListener( EventSpyDispatcher dispatcher, ExecutionListener delegate )
     {
         this.dispatcher = dispatcher;
         this.delegate = delegate;

File: maven-core/src/main/java/org/apache/maven/eventspy/internal/EventSpyRepositoryListener.java
Patch:
@@ -34,7 +34,7 @@ class EventSpyRepositoryListener
 
     private final RepositoryListener delegate;
 
-    public EventSpyRepositoryListener( EventSpyDispatcher dispatcher, RepositoryListener delegate )
+    EventSpyRepositoryListener( EventSpyDispatcher dispatcher, RepositoryListener delegate )
     {
         this.dispatcher = dispatcher;
         this.delegate = delegate;

File: maven-core/src/main/java/org/apache/maven/execution/SettingsAdapter.java
Patch:
@@ -47,7 +47,7 @@ class SettingsAdapter
 
     private RuntimeInfo runtimeInfo;
 
-    public SettingsAdapter( MavenExecutionRequest request )
+    SettingsAdapter( MavenExecutionRequest request )
     {
         this.request = request;
 

File: maven-core/src/main/java/org/apache/maven/graph/FilteredProjectDependencyGraph.java
Patch:
@@ -50,8 +50,8 @@ class FilteredProjectDependencyGraph
      * @param projectDependencyGraph The project dependency graph to create a sub view from, must not be {@code null}.
      * @param whiteList The projects on which the dependency view should focus, must not be {@code null}.
      */
-    public FilteredProjectDependencyGraph( ProjectDependencyGraph projectDependencyGraph,
-                                           Collection<? extends MavenProject> whiteList )
+    FilteredProjectDependencyGraph( ProjectDependencyGraph projectDependencyGraph,
+                                    Collection<? extends MavenProject> whiteList )
     {
         this.projectDependencyGraph =
             Validate.notNull( projectDependencyGraph, "projectDependencyGraph cannot be null" );

File: maven-core/src/main/java/org/apache/maven/internal/aether/LoggingRepositoryListener.java
Patch:
@@ -35,7 +35,7 @@ class LoggingRepositoryListener
 
     private final Logger logger;
 
-    public LoggingRepositoryListener( Logger logger )
+    LoggingRepositoryListener( Logger logger )
     {
         this.logger = logger;
     }

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/CompoundProjectExecutionListener.java
Patch:
@@ -30,7 +30,7 @@ class CompoundProjectExecutionListener
 {
     private final Collection<ProjectExecutionListener> listeners;
 
-    public CompoundProjectExecutionListener( Collection<ProjectExecutionListener> listeners )
+    CompoundProjectExecutionListener( Collection<ProjectExecutionListener> listeners )
     {
         this.listeners = listeners; // NB this is live injected collection
     }

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultExecutionEvent.java
Patch:
@@ -41,7 +41,7 @@ class DefaultExecutionEvent
 
     private final Exception exception;
 
-    public DefaultExecutionEvent( Type type, MavenSession session, MojoExecution mojoExecution, Exception exception )
+    DefaultExecutionEvent( Type type, MavenSession session, MojoExecution mojoExecution, Exception exception )
     {
         this.type = type;
         this.session = session;

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleDependencyResolver.java
Patch:
@@ -356,7 +356,7 @@ private static class ReactorDependencyFilter
 
         private Set<String> keys = new HashSet<>();
 
-        public ReactorDependencyFilter( Collection<Artifact> artifacts )
+        ReactorDependencyFilter( Collection<Artifact> artifacts )
         {
             for ( Artifact artifact : artifacts )
             {

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/multithreaded/ThreadOutputMuxer.java
Patch:
@@ -209,7 +209,7 @@ private class ThreadBoundPrintStream
         extends PrintStream
     {
 
-        public ThreadBoundPrintStream( PrintStream systemOutStream )
+        ThreadBoundPrintStream( PrintStream systemOutStream )
         {
             super( systemOutStream );
         }

File: maven-core/src/main/java/org/apache/maven/plugin/CompoundMojoExecutionListener.java
Patch:
@@ -30,7 +30,7 @@ class CompoundMojoExecutionListener
 
     private final Collection<MojoExecutionListener> listeners;
 
-    public CompoundMojoExecutionListener( Collection<MojoExecutionListener> listeners )
+    CompoundMojoExecutionListener( Collection<MojoExecutionListener> listeners )
     {
         this.listeners = listeners; // NB this is live injected collection
     }

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java
Patch:
@@ -141,7 +141,7 @@ private static final class CacheKey
 
         private final int hashCode;
 
-        public CacheKey( Plugin plugin, List<RemoteRepository> repositories, RepositorySystemSession session )
+        CacheKey( Plugin plugin, List<RemoteRepository> repositories, RepositorySystemSession session )
         {
             groupId = plugin.getGroupId();
             artifactId = plugin.getArtifactId();

File: maven-core/src/main/java/org/apache/maven/plugin/ExtensionRealmCache.java
Patch:
@@ -44,7 +44,7 @@ interface Key
         // marker interface for cache keys
     }
 
-    static class CacheRecord
+    class CacheRecord
     {
 
         public final ClassRealm realm;
@@ -53,7 +53,7 @@ static class CacheRecord
 
         public final List<Artifact> artifacts;
 
-        public CacheRecord( ClassRealm realm, ExtensionDescriptor descriptor, List<Artifact> artifacts )
+        CacheRecord( ClassRealm realm, ExtensionDescriptor descriptor, List<Artifact> artifacts )
         {
             this.realm = realm;
             this.descriptor = descriptor;

File: maven-core/src/main/java/org/apache/maven/plugin/PluginArtifactsCache.java
Patch:
@@ -47,14 +47,14 @@ interface Key
         // marker interface for cache keys
     }
 
-    static class CacheRecord
+    class CacheRecord
     {
 
         public final List<Artifact> artifacts;
 
         public final PluginResolutionException exception;
 
-        public CacheRecord( List<Artifact> artifacts )
+        CacheRecord( List<Artifact> artifacts )
         {
             this.artifacts = artifacts;
             this.exception = null;

File: maven-core/src/main/java/org/apache/maven/plugin/PluginRealmCache.java
Patch:
@@ -41,13 +41,13 @@
 public interface PluginRealmCache
 {
 
-    static class CacheRecord
+    class CacheRecord
     {
         public final ClassRealm realm;
 
         public final List<Artifact> artifacts;
 
-        public CacheRecord( ClassRealm realm, List<Artifact> artifacts )
+        CacheRecord( ClassRealm realm, List<Artifact> artifacts )
         {
             this.realm = realm;
             this.artifacts = artifacts;

File: maven-core/src/main/java/org/apache/maven/plugin/internal/PluginDependencyResolutionListener.java
Patch:
@@ -52,7 +52,7 @@ class PluginDependencyResolutionListener
 
     private Map<Artifact, Object> bannedArtifacts = new IdentityHashMap<>();
 
-    public PluginDependencyResolutionListener( ArtifactFilter coreFilter )
+    PluginDependencyResolutionListener( ArtifactFilter coreFilter )
     {
         this.coreFilter = coreFilter;
     }

File: maven-core/src/main/java/org/apache/maven/plugin/internal/ValidatingConfigurationListener.java
Patch:
@@ -43,7 +43,7 @@ class ValidatingConfigurationListener
 
     private final Map<String, Parameter> missingParameters;
 
-    public ValidatingConfigurationListener( Object mojo, MojoDescriptor mojoDescriptor, ConfigurationListener delegate )
+    ValidatingConfigurationListener( Object mojo, MojoDescriptor mojoDescriptor, ConfigurationListener delegate )
     {
         this.mojo = mojo;
         this.delegate = delegate;

File: maven-core/src/main/java/org/apache/maven/plugin/internal/WagonExcluder.java
Patch:
@@ -39,7 +39,7 @@ class WagonExcluder
 
     private final boolean coreArtifact;
 
-    public WagonExcluder()
+    WagonExcluder()
     {
         this( false );
     }

File: maven-core/src/main/java/org/apache/maven/plugin/prefix/internal/DefaultPluginPrefixResult.java
Patch:
@@ -39,18 +39,18 @@ class DefaultPluginPrefixResult
 
     private ArtifactRepository repository;
 
-    public DefaultPluginPrefixResult()
+    DefaultPluginPrefixResult()
     {
         // does nothing
     }
 
-    public DefaultPluginPrefixResult( Plugin plugin )
+    DefaultPluginPrefixResult( Plugin plugin )
     {
         groupId = plugin.getGroupId();
         artifactId = plugin.getArtifactId();
     }
 
-    public DefaultPluginPrefixResult( String groupId, String artifactId, ArtifactRepository repository )
+    DefaultPluginPrefixResult( String groupId, String artifactId, ArtifactRepository repository )
     {
         this.groupId = groupId;
         this.artifactId = artifactId;

File: maven-core/src/main/java/org/apache/maven/plugin/version/internal/DefaultPluginVersionResult.java
Patch:
@@ -36,12 +36,12 @@ class DefaultPluginVersionResult
 
     private ArtifactRepository repository;
 
-    public DefaultPluginVersionResult()
+    DefaultPluginVersionResult()
     {
         // does nothing
     }
 
-    public DefaultPluginVersionResult( String version )
+    DefaultPluginVersionResult( String version )
     {
         this.version = version;
     }

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingResult.java
Patch:
@@ -51,8 +51,8 @@ class DefaultProjectBuildingResult
      * @param problems The problems that were encountered, may be {@code null}.
      * @param dependencyResolutionResult The result of the resolution for the project dependencies, may be {@code null}.
      */
-    public DefaultProjectBuildingResult( MavenProject project, List<ModelProblem> problems,
-                                         DependencyResolutionResult dependencyResolutionResult )
+    DefaultProjectBuildingResult( MavenProject project, List<ModelProblem> problems,
+                                  DependencyResolutionResult dependencyResolutionResult )
     {
         this.projectId =
             ( project != null ) ? project.getGroupId() + ':' + project.getArtifactId() + ':' + project.getVersion()
@@ -70,7 +70,7 @@ public DefaultProjectBuildingResult( MavenProject project, List<ModelProblem> pr
      * @param pomFile The POM file from which the project was built, may be {@code null}.
      * @param problems The problems that were encountered, may be {@code null}.
      */
-    public DefaultProjectBuildingResult( String projectId, File pomFile, List<ModelProblem> problems )
+    DefaultProjectBuildingResult( String projectId, File pomFile, List<ModelProblem> problems )
     {
         this.projectId = ( projectId != null ) ? projectId : "";
         this.pomFile = pomFile;

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java
Patch:
@@ -236,7 +236,7 @@ class GraphLogger
 
         private String indent = "";
 
-        public GraphLogger( MavenProject project )
+        GraphLogger( MavenProject project )
         {
             this.project = project;
         }

File: maven-core/src/main/java/org/apache/maven/project/ProjectRealmCache.java
Patch:
@@ -43,14 +43,14 @@ interface Key
         // marker interface for cache keys
     }
 
-    static class CacheRecord
+    class CacheRecord
     {
 
         public final ClassRealm realm;
 
         public final DependencyFilter extensionArtifactFilter;
 
-        public CacheRecord( ClassRealm realm, DependencyFilter extensionArtifactFilter )
+        CacheRecord( ClassRealm realm, DependencyFilter extensionArtifactFilter )
         {
             this.realm = realm;
             this.extensionArtifactFilter = extensionArtifactFilter;

File: maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java
Patch:
@@ -58,7 +58,7 @@ private static final class CacheKey
 
         private final int hashCode;
 
-        public CacheKey( String groupId, String artifactId, String version, String tag )
+        CacheKey( String groupId, String artifactId, String version, String tag )
         {
             this.groupId = ( groupId != null ) ? groupId : "";
             this.artifactId = ( artifactId != null ) ? artifactId : "";

File: maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java
Patch:
@@ -55,7 +55,7 @@ private static final class CacheKey
 
         private final int hashCode;
 
-        public CacheKey( String groupId, String artifactId, String version )
+        CacheKey( String groupId, String artifactId, String version )
         {
             this.groupId = ( groupId != null ) ? groupId : "";
             this.artifactId = ( artifactId != null ) ? artifactId : "";

File: maven-core/src/main/java/org/apache/maven/project/artifact/ProjectArtifactsCache.java
Patch:
@@ -46,20 +46,20 @@ interface Key
         // marker interface for cache keys
     }
 
-    static class CacheRecord
+    class CacheRecord
     {
 
         public final Set<Artifact> artifacts;
 
         public final LifecycleExecutionException exception;
 
-        public CacheRecord( Set<Artifact> artifacts )
+        CacheRecord( Set<Artifact> artifacts )
         {
             this.artifacts = artifacts;
             this.exception = null;
         }
 
-        public CacheRecord( LifecycleExecutionException exception )
+        CacheRecord( LifecycleExecutionException exception )
         {
             this.artifacts = null;
             this.exception = exception;

File: maven-core/src/main/java/org/apache/maven/toolchain/java/JavaToolchainImpl.java
Patch:
@@ -41,7 +41,7 @@ class JavaToolchainImpl
 
     public static final String KEY_JAVAHOME = "jdkHome"; //NOI18N
 
-    public JavaToolchainImpl( ToolchainModel model, Logger logger )
+    JavaToolchainImpl( ToolchainModel model, Logger logger )
     {
         super( model, "jdk", logger );
     }

File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -1684,7 +1684,7 @@ static class ExitException
         @SuppressWarnings( "checkstyle:visibilitymodifier" )
         public int exitCode;
 
-        public ExitException( int exitCode )
+        ExitException( int exitCode )
         {
             this.exitCode = exitCode;
         }

File: maven-embedder/src/main/java/org/apache/maven/cli/logging/Slf4jConfiguration.java
Patch:
@@ -28,7 +28,7 @@
  */
 public interface Slf4jConfiguration
 {
-    public static enum Level
+    enum Level
     {
         DEBUG, INFO, ERROR
     }

File: maven-embedder/src/main/java/org/apache/maven/cli/transfer/AbstractMavenTransferListener.java
Patch:
@@ -49,7 +49,7 @@ public abstract class AbstractMavenTransferListener
     // TODO Move me to Maven Shared Utils
     static class FileSizeFormat
     {
-        static enum ScaleUnit
+        enum ScaleUnit
         {
             BYTE
             {
@@ -137,7 +137,7 @@ else if ( size >= KILOBYTE.bytes() )
         private DecimalFormat smallFormat;
         private DecimalFormat largeFormat;
 
-        public FileSizeFormat( Locale locale )
+        FileSizeFormat( Locale locale )
         {
             smallFormat = new DecimalFormat( "#0.0", new DecimalFormatSymbols( locale ) );
             largeFormat = new DecimalFormat( "###0", new DecimalFormatSymbols( locale ) );

File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuildingEvent.java
Patch:
@@ -36,7 +36,7 @@ class DefaultModelBuildingEvent
 
     private final ModelProblemCollector problems;
 
-    public DefaultModelBuildingEvent( Model model, ModelBuildingRequest request, ModelProblemCollector problems )
+    DefaultModelBuildingEvent( Model model, ModelBuildingRequest request, ModelProblemCollector problems )
     {
         this.model = model;
         this.request = request;

File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuildingResult.java
Patch:
@@ -49,7 +49,7 @@ class DefaultModelBuildingResult
 
     private List<ModelProblem> problems;
 
-    public DefaultModelBuildingResult()
+    DefaultModelBuildingResult()
     {
         modelIds = new ArrayList<>();
         rawModels = new HashMap<>();

File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelProblemCollector.java
Patch:
@@ -51,7 +51,7 @@ class DefaultModelProblemCollector
 
     private Set<ModelProblem.Severity> severities = EnumSet.noneOf( ModelProblem.Severity.class );
 
-    public DefaultModelProblemCollector( ModelBuildingResult result )
+    DefaultModelProblemCollector( ModelBuildingResult result )
     {
         this.result = result;
         this.problems = result.getProblems();

File: maven-model-builder/src/main/java/org/apache/maven/model/building/FilterModelBuildingRequest.java
Patch:
@@ -41,7 +41,7 @@ class FilterModelBuildingRequest
 
     protected ModelBuildingRequest request;
 
-    public FilterModelBuildingRequest( ModelBuildingRequest request )
+    FilterModelBuildingRequest( ModelBuildingRequest request )
     {
         this.request = request;
     }

File: maven-model-builder/src/main/java/org/apache/maven/model/building/ModelData.java
Patch:
@@ -51,7 +51,7 @@ class ModelData
      *
      * @param model The model to wrap, may be {@code null}.
      */
-    public ModelData( ModelSource source, Model model )
+    ModelData( ModelSource source, Model model )
     {
         this.source = source;
         this.model = model;
@@ -65,7 +65,7 @@ public ModelData( ModelSource source, Model model )
      * @param artifactId The effective artifact identifier of the model, may be {@code null}.
      * @param version The effective version of the model, may be {@code null}.
      */
-    public ModelData( ModelSource source, Model model, String groupId, String artifactId, String version )
+    ModelData( ModelSource source, Model model, String groupId, String artifactId, String version )
     {
         this.source = source;
         this.model = model;

File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/BuildTimestampValueSource.java
Patch:
@@ -29,7 +29,7 @@ class BuildTimestampValueSource
 {
     private final MavenBuildTimestamp mavenBuildTimestamp;
 
-    public BuildTimestampValueSource( Date startTime, Properties properties )
+    BuildTimestampValueSource( Date startTime, Properties properties )
     {
         super( false );
         this.mavenBuildTimestamp = new MavenBuildTimestamp( startTime, properties );

File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/PathTranslatingPostProcessor.java
Patch:
@@ -39,7 +39,7 @@ class PathTranslatingPostProcessor
     private final PathTranslator pathTranslator;
     private final List<String> expressionPrefixes;
 
-    public PathTranslatingPostProcessor( List<String> expressionPrefixes, Collection<String> unprefixedPathKeys,
+    PathTranslatingPostProcessor( List<String> expressionPrefixes, Collection<String> unprefixedPathKeys,
                                          File projectDir, PathTranslator pathTranslator )
     {
         this.expressionPrefixes = expressionPrefixes;

File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/ProblemDetectingValueSource.java
Patch:
@@ -44,7 +44,7 @@ class ProblemDetectingValueSource
 
     private final ModelProblemCollector problems;
 
-    public ProblemDetectingValueSource( ValueSource valueSource, String bannedPrefix, String newPrefix,
+    ProblemDetectingValueSource( ValueSource valueSource, String bannedPrefix, String newPrefix,
                                         ModelProblemCollector problems )
     {
         this.valueSource = valueSource;

File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/UrlNormalizingPostProcessor.java
Patch:
@@ -50,7 +50,7 @@ class UrlNormalizingPostProcessor
 
     private UrlNormalizer normalizer;
 
-    public UrlNormalizingPostProcessor( UrlNormalizer normalizer )
+    UrlNormalizingPostProcessor( UrlNormalizer normalizer )
     {
         this.normalizer = normalizer;
     }

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java
Patch:
@@ -77,7 +77,7 @@ static class Key
 
         private final int hash;
 
-        public Key( String groupId, String artifactId, String version, String tag )
+        Key( String groupId, String artifactId, String version, String tag )
         {
             this.groupId = groupId;
             this.artifactId = artifactId;

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java
Patch:
@@ -78,9 +78,9 @@ class DefaultModelResolver
 
     private final Set<String> repositoryIds;
 
-    public DefaultModelResolver( RepositorySystemSession session, RequestTrace trace, String context,
-                                 ArtifactResolver resolver, VersionRangeResolver versionRangeResolver,
-                                 RemoteRepositoryManager remoteRepositoryManager, List<RemoteRepository> repositories )
+    DefaultModelResolver( RepositorySystemSession session, RequestTrace trace, String context,
+                          ArtifactResolver resolver, VersionRangeResolver versionRangeResolver,
+                          RemoteRepositoryManager remoteRepositoryManager, List<RemoteRepository> repositories )
     {
         this.session = session;
         this.trace = trace;

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionResolver.java
Patch:
@@ -475,7 +475,7 @@ private static class VersionInfo
 
         ArtifactRepository repository;
 
-        public VersionInfo( String timestamp, String version, ArtifactRepository repository )
+        VersionInfo( String timestamp, String version, ArtifactRepository repository )
         {
             this.timestamp = ( timestamp != null ) ? timestamp : "";
             this.version = version;
@@ -512,7 +512,7 @@ private static class Key
 
         private final int hashCode;
 
-        public Key( RepositorySystemSession session, VersionRequest request )
+        Key( RepositorySystemSession session, VersionRequest request )
         {
             Artifact artifact = request.getArtifact();
             groupId = artifact.getGroupId();
@@ -585,7 +585,7 @@ private static class Record
 
         final Class<?> repoClass;
 
-        public Record( String version, ArtifactRepository repository )
+        Record( String version, ArtifactRepository repository )
         {
             this.version = version;
             if ( repository != null )

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/LocalSnapshotMetadata.java
Patch:
@@ -42,13 +42,13 @@ final class LocalSnapshotMetadata
 
     private final boolean legacyFormat;
 
-    public LocalSnapshotMetadata( Artifact artifact, boolean legacyFormat )
+    LocalSnapshotMetadata( Artifact artifact, boolean legacyFormat )
     {
         super( createMetadata( artifact, legacyFormat ), null );
         this.legacyFormat = legacyFormat;
     }
 
-    public LocalSnapshotMetadata( Metadata metadata, File file, boolean legacyFormat )
+    LocalSnapshotMetadata( Metadata metadata, File file, boolean legacyFormat )
     {
         super( metadata, file );
         this.legacyFormat = legacyFormat;

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/LocalSnapshotMetadataGenerator.java
Patch:
@@ -42,7 +42,7 @@ class LocalSnapshotMetadataGenerator
 
     private final boolean legacyFormat;
 
-    public LocalSnapshotMetadataGenerator( RepositorySystemSession session, InstallRequest request )
+    LocalSnapshotMetadataGenerator( RepositorySystemSession session, InstallRequest request )
     {
         legacyFormat = ConfigUtils.getBoolean( session.getConfigProperties(), false, "maven.metadata.legacy" );
 

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RelocatedArtifact.java
Patch:
@@ -41,7 +41,7 @@ final class RelocatedArtifact
 
     private final String version;
 
-    public RelocatedArtifact( Artifact artifact, String groupId, String artifactId, String version )
+    RelocatedArtifact( Artifact artifact, String groupId, String artifactId, String version )
     {
         this.artifact = Validate.notNull( artifact, "artifact cannot be null" );
         // TODO Use StringUtils here

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RemoteSnapshotMetadata.java
Patch:
@@ -47,7 +47,7 @@ final class RemoteSnapshotMetadata
 
     private final Map<String, SnapshotVersion> versions = new LinkedHashMap<>();
 
-    public RemoteSnapshotMetadata( Artifact artifact, boolean legacyFormat )
+    RemoteSnapshotMetadata( Artifact artifact, boolean legacyFormat )
     {
         super( createRepositoryMetadata( artifact, legacyFormat ), null, legacyFormat );
     }

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RemoteSnapshotMetadataGenerator.java
Patch:
@@ -42,7 +42,7 @@ class RemoteSnapshotMetadataGenerator
 
     private final boolean legacyFormat;
 
-    public RemoteSnapshotMetadataGenerator( RepositorySystemSession session, DeployRequest request )
+    RemoteSnapshotMetadataGenerator( RepositorySystemSession session, DeployRequest request )
     {
         legacyFormat = ConfigUtils.getBoolean( session.getConfigProperties(), false, "maven.metadata.legacy" );
 

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/VersionsMetadata.java
Patch:
@@ -38,13 +38,13 @@ final class VersionsMetadata
 
     private final Artifact artifact;
 
-    public VersionsMetadata( Artifact artifact )
+    VersionsMetadata( Artifact artifact )
     {
         super( createRepositoryMetadata( artifact ), null );
         this.artifact = artifact;
     }
 
-    public VersionsMetadata( Artifact artifact, File file )
+    VersionsMetadata( Artifact artifact, File file )
     {
         super( createRepositoryMetadata( artifact ), file );
         this.artifact = artifact;

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/VersionsMetadataGenerator.java
Patch:
@@ -43,12 +43,12 @@ class VersionsMetadataGenerator
 
     private Map<Object, VersionsMetadata> processedVersions;
 
-    public VersionsMetadataGenerator( RepositorySystemSession session, InstallRequest request )
+    VersionsMetadataGenerator( RepositorySystemSession session, InstallRequest request )
     {
         this( session, request.getMetadata() );
     }
 
-    public VersionsMetadataGenerator( RepositorySystemSession session, DeployRequest request )
+    VersionsMetadataGenerator( RepositorySystemSession session, DeployRequest request )
     {
         this( session, request.getMetadata() );
     }

File: maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsBuildingResult.java
Patch:
@@ -37,7 +37,7 @@ class DefaultSettingsBuildingResult
 
     private List<SettingsProblem> problems;
 
-    public DefaultSettingsBuildingResult( Settings effectiveSettings, List<SettingsProblem> problems )
+    DefaultSettingsBuildingResult( Settings effectiveSettings, List<SettingsProblem> problems )
     {
         this.effectiveSettings = effectiveSettings;
         this.problems = ( problems != null ) ? problems : new ArrayList<SettingsProblem>();

File: maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsProblemCollector.java
Patch:
@@ -37,7 +37,7 @@ class DefaultSettingsProblemCollector
 
     private String source;
 
-    public DefaultSettingsProblemCollector( List<SettingsProblem> problems )
+    DefaultSettingsProblemCollector( List<SettingsProblem> problems )
     {
         this.problems = ( problems != null ) ? problems : new ArrayList<SettingsProblem>();
     }

File: maven-settings-builder/src/main/java/org/apache/maven/settings/crypto/DefaultSettingsDecryptionResult.java
Patch:
@@ -41,7 +41,7 @@ class DefaultSettingsDecryptionResult
 
     private List<SettingsProblem> problems;
 
-    public DefaultSettingsDecryptionResult( List<Server> servers, List<Proxy> proxies, List<SettingsProblem> problems )
+    DefaultSettingsDecryptionResult( List<Server> servers, List<Proxy> proxies, List<SettingsProblem> problems )
     {
         this.servers = ( servers != null ) ? servers : new ArrayList<Server>();
         this.proxies = ( proxies != null ) ? proxies : new ArrayList<Proxy>();

File: maven-core/src/main/java/org/apache/maven/classrealm/DefaultClassRealmManager.java
Patch:
@@ -120,7 +120,7 @@ private ClassRealm newRealm( String id )
             {
                 try
                 {
-                    ClassRealm classRealm = world.newRealm( realmId, PARENT_CLASSLOADER );
+                    ClassRealm classRealm = world.newRealm( realmId, null );
 
                     if ( logger.isDebugEnabled() )
                     {

File: maven-core/src/main/java/org/apache/maven/classrealm/DefaultClassRealmManager.java
Patch:
@@ -120,7 +120,7 @@ private ClassRealm newRealm( String id )
             {
                 try
                 {
-                    ClassRealm classRealm = world.newRealm( realmId, null );
+                    ClassRealm classRealm = world.newRealm( realmId, PARENT_CLASSLOADER );
 
                     if ( logger.isDebugEnabled() )
                     {

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -109,6 +109,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng6240PluginExtensionAetherProvider.class );
         suite.addTestSuite( MavenITmng6223FindBasedir.class );
         suite.addTestSuite( MavenITmng6189SiteReportPluginsWarningTest.class );
+        suite.addTestSuite( MavenITmng6127PluginExecutionConfigurationInterferenceTest.class );
         suite.addTestSuite( MavenITmng6057CheckReactorOrderTest.class );
         suite.addTestSuite( MavenITmng5895CIFriendlyUsageWithPropertyTest.class );
         suite.addTestSuite( MavenITmng6090CIFriendlyTest.class );

File: maven-compat/src/main/java/org/apache/maven/repository/metadata/MetadataResolutionResult.java
Patch:
@@ -115,7 +115,7 @@ else if ( requestType.equals( MetadataResolutionRequestTypeEnum.classpathRuntime
         {
             return conflictResolver.resolveConflicts( getGraph(), ArtifactScopeEnum.runtime );
         }
-        else if ( requestType.equals( MetadataResolutionRequestTypeEnum.classpathRuntime ) )
+        else if ( requestType.equals( MetadataResolutionRequestTypeEnum.classpathTest ) )
         {
             return conflictResolver.resolveConflicts( getGraph(), ArtifactScopeEnum.test );
         }

File: maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java
Patch:
@@ -573,8 +573,8 @@ public ArtifactRepository createDefaultRemoteRepository( MavenExecutionRequest r
         throws Exception
     {
         return createRepository( RepositorySystem.DEFAULT_REMOTE_REPO_URL, RepositorySystem.DEFAULT_REMOTE_REPO_ID,
-                                 true, ArtifactRepositoryPolicy.UPDATE_POLICY_NEVER, false,
-                                 ArtifactRepositoryPolicy.UPDATE_POLICY_NEVER,
+                                 true, ArtifactRepositoryPolicy.UPDATE_POLICY_DAILY, false,
+                                 ArtifactRepositoryPolicy.UPDATE_POLICY_DAILY,
                                  ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN );
     }
     

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4625SettingsXmlInterpolationWithXmlMarkupTest.java
Patch:
@@ -59,6 +59,7 @@ public void testit()
         if( Os.isFamily( Os.FAMILY_WINDOWS ) && !System.getProperties().contains( "CLASSWORLDS_LAUNCHER" ) )
         {
             verifier.setSystemProperty( "test.prop", "\"&x=y<>\"" );
+            verifier.setForkJvm( true ); // force forked JVM, since the workaround expects forked run 
         }
         else
         {

File: maven-compat/src/main/java/org/apache/maven/artifact/ArtifactScopeEnum.java
Patch:
@@ -20,7 +20,7 @@
  */
 
 /**
- * Type safe reincarnation of Artifact scope. Also supplies the <code>DEFAULT_SCOPE<code> as well
+ * Type safe reincarnation of Artifact scope. Also supplies the {@code DEFAULT_SCOPE} as well
  * as convenience method to deal with scope relationships.
  *
  * @author <a href="oleg@codehaus.org">Oleg Gusakov</a>

File: maven-compat/src/main/java/org/apache/maven/artifact/resolver/ResolutionListenerForDepMgmt.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * Do not use!
- * <p/>
+ * <p>
  * Should only be implemented by DebugResolutionListener.  Remove this
  * when the ResolutionListener interface deprecation of the manageArtifact
  * method (and the [yet to be done] addition of these methods to that
@@ -40,4 +40,4 @@ void manageArtifactScope( Artifact artifact,
 
     void manageArtifactSystemPath( Artifact artifact,
                                    Artifact replacement );
-}
\ No newline at end of file
+}

File: maven-compat/src/main/java/org/apache/maven/project/interpolation/ModelInterpolationException.java
Patch:
@@ -21,8 +21,6 @@
 
 /**
  * @author jdcasey
- *         <p/>
- *         Created on Feb 2, 2005
  */
 @SuppressWarnings( "serial" )
 @Deprecated
@@ -69,4 +67,4 @@ public String getOriginalMessage()
         return originalMessage;
     }
 
-}
\ No newline at end of file
+}

File: maven-compat/src/main/java/org/apache/maven/project/interpolation/ModelInterpolator.java
Patch:
@@ -27,8 +27,6 @@
 
 /**
  * @author jdcasey
- *         <p/>
- *         Created on Feb 2, 2005
  */
 @Deprecated
 public interface ModelInterpolator

File: maven-compat/src/main/java/org/apache/maven/repository/MetadataResolutionResult.java
Patch:
@@ -163,7 +163,7 @@ public boolean hasVersionRangeViolations()
     /**
      * TODO this needs to accept a {@link OverConstrainedVersionException} as returned by
      *       {@link #getVersionRangeViolation(int)} but it's not used like that in
-     *       {@link DefaultLegacyArtifactCollector}
+     *       {@link org.apache.maven.repository.legacy.resolver.DefaultLegacyArtifactCollector}
      */
     public MetadataResolutionResult addVersionRangeViolation( Exception e )
     {

File: maven-compat/src/main/java/org/apache/maven/repository/metadata/MetadataGraph.java
Patch:
@@ -103,9 +103,9 @@ public MetadataGraph( MetadataTreeNode tree )
      * construct graph from a "dirty" tree
      *
      * @param tree "dirty" tree root
-     * @param versionedVertices true if graph nodes should be versioned (different versions -> different nodes)
+     * @param versionedVertices true if graph nodes should be versioned (different versions -&gt; different nodes)
      * @param scopedVertices true if graph nodes should be versioned and scoped
-     * (different versions and/or scopes -> different nodes)
+     * (different versions and/or scopes -&gt; different nodes)
      *
      */
     public MetadataGraph( MetadataTreeNode tree, boolean versionedVertices, boolean scopedVertices )

File: maven-compat/src/test/java/org/apache/maven/repository/LegacyRepositorySystemTest.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.maven.model.RepositoryPolicy;
 import org.apache.maven.plugin.LegacySupport;
 import org.apache.maven.repository.RepositorySystem;
+import org.apache.maven.repository.legacy.LegacyRepositorySystem;
 import org.codehaus.plexus.ContainerConfiguration;
 import org.codehaus.plexus.PlexusConstants;
 import org.codehaus.plexus.PlexusTestCase;

File: maven-compat/src/test/java/org/apache/maven/repository/legacy/resolver/conflict/FarthestConflictResolverTest.java
Patch:
@@ -44,7 +44,7 @@ public FarthestConflictResolverTest()
      * Tests that <code>a:2.0</code> wins in the scenario:
      * <pre>
      * a:1.0
-     * b:1.0 -> a:2.0
+     * b:1.0 -&gt; a:2.0
      * </pre>
      */
     public void testDepth()
@@ -59,7 +59,7 @@ public void testDepth()
     /**
      * Tests that <code>a:2.0</code> wins in the scenario:
      * <pre>
-     * b:1.0 -> a:2.0
+     * b:1.0 -&gt; a:2.0
      * a:1.0
      * </pre>
      */

File: maven-compat/src/test/java/org/apache/maven/repository/legacy/resolver/conflict/NearestConflictResolverTest.java
Patch:
@@ -44,7 +44,7 @@ public NearestConflictResolverTest()
      * Tests that <code>a:1.0</code> wins in the scenario:
      * <pre>
      * a:1.0
-     * b:1.0 -> a:2.0
+     * b:1.0 -&gt; a:2.0
      * </pre>
      */
     public void testDepth()
@@ -59,7 +59,7 @@ public void testDepth()
     /**
      * Tests that <code>a:1.0</code> wins in the scenario:
      * <pre>
-     * b:1.0 -> a:2.0
+     * b:1.0 -&gt; a:2.0
      * a:1.0
      * </pre>
      */

File: maven-compat/src/test/java/org/apache/maven/repository/legacy/resolver/conflict/NewestConflictResolverTest.java
Patch:
@@ -44,7 +44,7 @@ public NewestConflictResolverTest()
      * Tests that <code>a:2.0</code> wins in the scenario:
      * <pre>
      * a:1.0
-     * b:1.0 -> a:2.0
+     * b:1.0 -&gt; a:2.0
      * </pre>
      */
     public void testDepth()
@@ -59,7 +59,7 @@ public void testDepth()
     /**
      * Tests that <code>a:2.0</code> wins in the scenario:
      * <pre>
-     * b:1.0 -> a:2.0
+     * b:1.0 -&gt; a:2.0
      * a:1.0
      * </pre>
      */

File: maven-compat/src/test/java/org/apache/maven/repository/legacy/resolver/conflict/OldestConflictResolverTest.java
Patch:
@@ -44,7 +44,7 @@ public OldestConflictResolverTest()
      * Tests that <code>a:1.0</code> wins in the scenario:
      * <pre>
      * a:1.0
-     * b:1.0 -> a:2.0
+     * b:1.0 -&gt; a:2.0
      * </pre>
      */
     public void testDepth()
@@ -60,7 +60,7 @@ public void testDepth()
     /**
      * Tests that <code>a:1.0</code> wins in the scenario:
      * <pre>
-     * b:1.0 -> a:2.0
+     * b:1.0 -&gt; a:2.0
      * a:1.0
      * </pre>
      */

File: maven-artifact/src/test/java/org/apache/maven/artifact/versioning/ComparableVersionTest.java
Patch:
@@ -185,7 +185,7 @@ public void testVersionComparing()
 
     /**
      * Test <a href="https://issues.apache.org/jira/browse/MNG-5568">MNG-5568</a> edge case
-     * which was showing transitive inconsistency: since A > B and B > C then we should have A > C
+     * which was showing transitive inconsistency: since A &gt; B and B &gt; C then we should have A &gt; C
      * otherwise sorting a list of ComparableVersions() will in some cases throw runtime exception;
      * see Netbeans issues <a href="https://netbeans.org/bugzilla/show_bug.cgi?id=240845">240845</a> and
      * <a href="https://netbeans.org/bugzilla/show_bug.cgi?id=226100">226100</a>

File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/LifecycleExecutionPlanCalculatorTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub;
 
 /**
- * @author Kristian Rosenvold>
+ * @author Kristian Rosenvold
  */
 public class LifecycleExecutionPlanCalculatorTest
     extends AbstractCoreMavenComponentTestCase

File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifecycleExecutionPlanCalculatorStub.java
Patch:
@@ -88,7 +88,7 @@ public class LifecycleExecutionPlanCalculatorStub
     public final static MojoDescriptor SITE_DEPLOY = createMojoDescriptor( "site-deploy" );
 
     /**
-     * @deprecated instead use {@link #getNumberOfExecutions()}
+     * @deprecated instead use {@link #getNumberOfExecutions(ProjectBuildList)}
      */
     @Deprecated
     public int getNumberOfExceutions( ProjectBuildList projectBuildList )

File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/ProjectDependencyGraphStub.java
Patch:
@@ -42,14 +42,15 @@
 
 /**
  * A stub dependency graph that is custom made for testing concurrent build graph evaluations.
- * <p/>
+ * <p>
  * Implements a graph as follows:
  * A has no dependencies
  * B depends on A
  * C depends on A
- * X depends on B & C
+ * X depends on B &amp; C
  * Y depends on B
  * Z depends on C
+ * </p>
  *
  * @author Kristian Rosenvold
  */

File: maven-embedder/src/test/java/org/apache/maven/cli/CleanArgumentTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.Test;
 
 /**
- * @author Karl Heinz Marbaise <khmarbaise@apache.org>
+ * @author Karl Heinz Marbaise
  */
 public class CleanArgumentTest
 {

File: maven-model-builder/src/test/java/org/apache/maven/model/inheritance/DefaultInheritanceAssemblerTest.java
Patch:
@@ -89,7 +89,7 @@ public void testUrls()
     }
 
     /**
-     * Flat directory structure: parent & child POMs in sibling directories, child directory == artifactId.
+     * Flat directory structure: parent &amp; child POMs in sibling directories, child directory == artifactId.
      * @throws Exception
      */
     public void testFlatUrls()

File: maven-model-builder/src/test/java/org/apache/maven/model/interpolation/AbstractModelInterpolatorTest.java
Patch:
@@ -68,7 +68,7 @@ protected void assertProblemFree( SimpleProblemCollector collector )
     }
 
     /**
-     * @deprecated instead use {@link #assertCollectorState()}
+     * @deprecated instead use {@link #assertCollectorState(int, int, int, SimpleProblemCollector)}
      */
     @Deprecated
     protected void assertColllectorState( int numFatals, int numErrors, int numWarnings,

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecycleMappingDelegate.java
Patch:
@@ -79,8 +79,8 @@ public Map<String, List<MojoExecution>> calculateLifecycleMappings( MavenSession
         /*
          * Grab plugin executions that are bound to the selected lifecycle phases from project. The effective model of
          * the project already contains the plugin executions induced by the project's packaging type. Remember, all
-         * phases of interest and only those are in the lifecycle mapping, if a phase has no value in the map, we are not
-         * interested in any of the executions bound to it.
+         * phases of interest and only those are in the lifecycle mapping, if a phase has no value in the map, we are
+         * not interested in any of the executions bound to it.
          */
 
         for ( Plugin plugin : project.getBuild().getPlugins() )

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecycleMappingDelegate.java
Patch:
@@ -79,7 +79,7 @@ public Map<String, List<MojoExecution>> calculateLifecycleMappings( MavenSession
         /*
          * Grab plugin executions that are bound to the selected lifecycle phases from project. The effective model of
          * the project already contains the plugin executions induced by the project's packaging type. Remember, all
-         * phases of interest and only those are in the lifecyle mapping, if a phase has no value in the map, we are not
+         * phases of interest and only those are in the lifecycle mapping, if a phase has no value in the map, we are not
          * interested in any of the executions bound to it.
          */
 

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecyclePluginAnalyzer.java
Patch:
@@ -73,7 +73,7 @@ public DefaultLifecyclePluginAnalyzer()
     // together and this really shows the problem of constructing a sensible default configuration but
     // it's all encapsulated here so it appears normalized to the POM builder.
 
-    // We are going to take the project packaging and find all plugin in the default lifecycle and create
+    // We are going to take the project packaging and find all plugins in the default lifecycle and create
     // fully populated Plugin objects, including executions with goals and default configuration taken
     // from the plugin.xml inside a plugin.
     //
@@ -82,7 +82,7 @@ public Set<Plugin> getPluginsBoundByDefaultToAllLifecycles( String packaging )
     {
         if ( logger.isDebugEnabled() )
         {
-            logger.debug( "Looking up lifecyle mappings for packaging " + packaging + " from "
+            logger.debug( "Looking up lifecycle mappings for packaging " + packaging + " from "
                 + Thread.currentThread().getContextClassLoader() );
         }
 

File: maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java
Patch:
@@ -72,9 +72,10 @@ public VersionRange cloneOf()
     }
 
     /**
+     * <p>
      * Create a version range from a string representation
-     * <p/>
-     * Some spec examples are
+     * </p>
+     * Some spec examples are:
      * <ul>
      * <li><code>1.0</code> Version 1.0</li>
      * <li><code>[1.0,2.0)</code> Versions 1.0 (included) to 2.0 (not included)</li>

File: maven-core/src/main/java/org/apache/maven/artifact/resolver/ResolutionNode.java
Patch:
@@ -108,7 +108,7 @@ public void addDependencies( Set<Artifact> artifacts, List<ArtifactRepository> r
     }
 
     /**
-     * @return {@link List} &lt; {@link String} > with artifact ids
+     * @return {@link List} &lt; {@link String} &gt; with artifact ids
      * @throws OverConstrainedVersionException
      */
     public List<String> getDependencyTrail()

File: maven-core/src/main/java/org/apache/maven/execution/MojoExecutionEvent.java
Patch:
@@ -24,13 +24,15 @@
 import org.apache.maven.project.MavenProject;
 
 /**
+ * <p>
  * Encapsulates parameters of MojoExecutionListener callback methods and is meant to provide API evolution path should
  * it become necessary to introduce new parameters in the existing callbacks in the future.
+ * </p>
+ * <strong>Note:</strong> This class is part of work in progress and can be changed or removed without notice.
  *
  * @see MojoExecutionListener
  * @see org.apache.maven.execution.scope.WeakMojoExecutionListener
  * @since 3.1.2
- * @provisional This class is part of work in progress and can be changed or removed without notice.
  */
 public class MojoExecutionEvent
 {

File: maven-core/src/main/java/org/apache/maven/execution/MojoExecutionListener.java
Patch:
@@ -22,11 +22,13 @@
 import org.apache.maven.plugin.MojoExecutionException;
 
 /**
+ * <p>
  * Extension point that allows build extensions observe and possibly veto mojo executions.
+ * </p>
+ * <strong>Note:</strong> This interface is part of work in progress and can be changed or removed without notice.
  *
  * @see org.apache.maven.execution.scope.WeakMojoExecutionListener
  * @since 3.1.2
- * @provisional This interface is part of work in progress and can be changed or removed without notice.
  */
 public interface MojoExecutionListener
 {

File: maven-core/src/main/java/org/apache/maven/execution/ProjectExecutionEvent.java
Patch:
@@ -25,12 +25,14 @@
 import org.apache.maven.project.MavenProject;
 
 /**
+ * <p>
  * Encapsulates parameters of ProjectExecutionListener callback methods and is meant to provide API evolution path
  * should it become necessary to introduce new parameters in the existing callbacks in the future.
+ * </p>
+ * <strong>Note:</strong> This class is part of work in progress and can be changed or removed without notice.
  *
  * @see ProjectExecutionListener
  * @since 3.1.2
- * @provisional This class is part of work in progress and can be changed or removed without notice.
  */
 public class ProjectExecutionEvent
 {

File: maven-core/src/main/java/org/apache/maven/execution/ProjectExecutionListener.java
Patch:
@@ -22,12 +22,14 @@
 import org.apache.maven.lifecycle.LifecycleExecutionException;
 
 /**
+ * <p>
  * Extension point that allows build extensions observe and possibly veto project build execution.
+ * </p>
+ * <strong>Note:</strong> This interface is part of work in progress and can be changed or removed without notice.
  *
  * @see ExecutionListener
  * @see MojoExecutionListener
  * @since 3.1.2
- * @provisional This interface is part of work in progress and can be changed or removed without notice.
  */
 public interface ProjectExecutionListener
 {

File: maven-core/src/main/java/org/apache/maven/execution/scope/WeakMojoExecutionListener.java
Patch:
@@ -28,10 +28,11 @@
  * Unlike {@link org.apache.maven.execution.MojoExecutionListener}, this extension point does not
  * trigger instantiation of the component, hence "weak" class name prefix. Only applies to mojo execution
  * scoped components.
+ * </p>
+ * <strong>Note:</strong> This interface is part of work in progress and can be changed or removed without notice.
  *
  * @see org.apache.maven.execution.MojoExecutionListener
  * @since 3.1.2
- * @provisional This interface is part of work in progress and can be changed or removed without notice.
  */
 public interface WeakMojoExecutionListener
 {

File: maven-core/src/main/java/org/apache/maven/lifecycle/MojoExecutionConfigurator.java
Patch:
@@ -23,10 +23,11 @@
 import org.apache.maven.project.MavenProject;
 
 /**
+ * <p>
  * A MojoExecutionConfigurator is responsible for creating the configuration for Mojo based on configuration for a Mojo
  * in the MavenProject and the default configuration for the Mojo from the containing plugin's plugin.xml descriptor.
- * 
- * @provisional
+ * </p>
+ * <strong>Note:</strong> This interface is part of work in progress and can be changed or removed without notice.
  * @author Jason van Zyl
  * @since 3.3.1, MNG-5753
  */

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/BuildListCalculator.java
Patch:
@@ -29,9 +29,10 @@
 import java.util.List;
 
 /**
+ * <strong>NOTE:</strong> This class is not part of any public api and can be changed or deleted without prior notice.
+ * 
  * @since 3.0
  * @author Kristian Rosenvold
- *         This class is not part of any public api and can be changed or deleted without prior notice.
  */
 @Component( role = BuildListCalculator.class )
 public class BuildListCalculator

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecycleExecutionPlanCalculator.java
Patch:
@@ -62,11 +62,11 @@
 import com.google.common.collect.ImmutableMap;
 
 /**
+ * <strong>NOTE:</strong> This class is not part of any public api and can be changed or deleted without prior notice.
+ * 
  * @since 3.0
  * @author Benjamin Bentmann
  * @author Kristian Rosenvold (Extract class)
- *         <p/>
- *         NOTE: This class is not part of any public api and can be changed or deleted without prior notice.
  */
 @Component( role = LifecycleExecutionPlanCalculator.class )
 public class DefaultLifecycleExecutionPlanCalculator

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecyclePluginAnalyzer.java
Patch:
@@ -42,13 +42,13 @@
 import java.util.Set;
 
 /**
+ * <strong>NOTE:</strong> This class is not part of any public api and can be changed or deleted without prior notice.
+ * 
  * @since 3.0
  * @author Benjamin Bentmann
  * @author Jason van Zyl
  * @author jdcasey
  * @author Kristian Rosenvold (extracted class only)
- *         <p/>
- *         NOTE: This class is not part of any public api and can be changed or deleted without prior notice.
  */
 @Component( role = LifeCyclePluginAnalyzer.class )
 public class DefaultLifecyclePluginAnalyzer

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecycleTaskSegmentCalculator.java
Patch:
@@ -40,17 +40,17 @@
 import java.util.List;
 
 /**
+ * <p>
  * Calculates the task segments in the build
+ * </p>
+ * <strong>NOTE:</strong> This class is not part of any public api and can be changed or deleted without prior notice.
  *
  * @since 3.0
  * @author Benjamin Bentmann
  * @author Jason van Zyl
  * @author jdcasey
  * @author Kristian Rosenvold (extracted class)
- *         <p/>
- *         NOTE: This class is not part of any public api and can be changed or deleted without prior notice.
  */
-
 @Component( role = LifecycleTaskSegmentCalculator.class )
 public class DefaultLifecycleTaskSegmentCalculator
     implements LifecycleTaskSegmentCalculator

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/ExecutionPlanItem.java
Patch:
@@ -29,9 +29,10 @@
 import java.util.List;
 
 /**
+ * <p>
  * Wraps individual MojoExecutions, containing information about completion status and scheduling.
- * <p/>
- * NOTE: This class is not part of any public api and can be changed or deleted without prior notice.
+ * </p>
+ * <strong>NOTE:</strong> This class is not part of any public api and can be changed or deleted without prior notice.
  *
  * @since 3.0
  * @author Kristian Rosenvold

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/GoalTask.java
Patch:
@@ -20,9 +20,10 @@
  */
 
 /**
+ * <p>
  * A task that is a goal
- * <p/>
- * TODO From a concurrency perspective, this class is not good. The combination of mutable/immutable state is not nice
+ * </p>
+ * <strong>NOTE:</strong> This class is not part of any public api and can be changed or deleted without prior notice.
  *
  * @since 3.0
  * @author Benjamin Bentmann

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleDebugLogger.java
Patch:
@@ -36,14 +36,15 @@
 import java.util.TreeSet;
 
 /**
+ * <p>
  * Logs debug output from the various lifecycle phases.
+ * </p>
+ * <strong>NOTE:</strong> This class is not part of any public api and can be changed or deleted without prior notice.
  *
  * @since 3.0
  * @author Benjamin Bentmann
  * @author Jason van Zyl
  * @author Kristian Rosenvold (extracted class only)
- *         <p/>
- *         NOTE: This class is not part of any public api and can be changed or deleted without prior notice.
  */
 @Component( role = LifecycleDebugLogger.class )
 public class LifecycleDebugLogger

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleDependencyResolver.java
Patch:
@@ -51,14 +51,14 @@
 import org.eclipse.aether.util.filter.ScopeDependencyFilter;
 
 /**
+ * <p>
  * Resolves dependencies for the artifacts in context of the lifecycle build
- *
+ * </p>
+ * <strong>NOTE:</strong> This class is not part of any public api and can be changed or deleted without prior notice.
  * @since 3.0
  * @author Benjamin Bentmann
  * @author Jason van Zyl
  * @author Kristian Rosenvold (extracted class)
- *         <p/>
- *         NOTE: This class is not part of any public api and can be changed or deleted without prior notice.
  */
 @Named
 public class LifecycleDependencyResolver

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleExecutionPlanCalculator.java
Patch:
@@ -39,7 +39,6 @@
  * @since 3.0
  * @author Benjamin Bentmann
  * @author Kristian Rosenvold  (extract interface only)
- *         <p/>
  */
 public interface LifecycleExecutionPlanCalculator
 {

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecyclePluginResolver.java
Patch:
@@ -34,11 +34,10 @@
 import org.codehaus.plexus.component.annotations.Requirement;
 
 /**
+ * <strong>NOTE:</strong> This class is not part of any public api and can be changed or deleted without prior notice.
  * @since 3.0
  * @author Benjamin Bentmann
  * @author Kristian Rosenvold (Extract class)
- *         <p/>
- *         NOTE: This class is not part of any public api and can be changed or deleted without prior notice.
  */
 @Component( role = LifecyclePluginResolver.class )
 public class LifecyclePluginResolver

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleTask.java
Patch:
@@ -20,9 +20,10 @@
  */
 
 /**
+ * <p>
  * A task that is a lifecycle
- * <p/>
- * NOTE: This class is not part of any public api and can be changed or deleted without prior notice.
+ * </p>
+ * <strong>NOTE:</strong> This class is not part of any public api and can be changed or deleted without prior notice.
  *
  * @since 3.0
  * @author Benjamin Bentmann

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleTaskSegmentCalculator.java
Patch:
@@ -33,17 +33,17 @@
 import java.util.List;
 
 /**
+ * <p>
  * Calculates the task segments in the build
+ * </p>
+ * <strong>NOTE:</strong> This class is not part of any public api and can be changed or deleted without prior notice.
  *
  * @since 3.0
  * @author Benjamin Bentmann
  * @author Jason van Zyl
  * @author jdcasey
  * @author Kristian Rosenvold (extracted interface)
- *         <p/>
- *         NOTE: This interface is not part of any public api and can be changed or deleted without prior notice.
  */
-
 public interface LifecycleTaskSegmentCalculator
 {
     List<TaskSegment> calculateTaskSegments( MavenSession session )

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoDescriptorCreator.java
Patch:
@@ -49,15 +49,16 @@
 import java.util.StringTokenizer;
 
 /**
+ * <p>
  * Resolves dependencies for the artifacts in context of the lifecycle build
+ * </p>
+ * <strong>NOTE:</strong> This class is not part of any public api and can be changed or deleted without prior notice.
  *
  * @since 3.0
  * @author Benjamin Bentmann
  * @author Jason van Zyl
  * @author jdcasey
  * @author Kristian Rosenvold (extracted class only)
- *         <p/>
- *         NOTE: This class is not part of any public api and can be changed or deleted without prior notice.
  */
 @Component( role = MojoDescriptorCreator.class )
 public class MojoDescriptorCreator

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java
Patch:
@@ -50,13 +50,14 @@
 import java.util.TreeSet;
 
 /**
+ * <p>
  * Executes an individual mojo
+ * </p>
+ * <strong>NOTE:</strong> This class is not part of any public api and can be changed or deleted without prior notice.
  *
  * @author Jason van Zyl
  * @author Benjamin Bentmann
  * @author Kristian Rosenvold
- *         <p/>
- *         NOTE: This class is not part of any public api and can be changed or deleted without prior notice.
  * @since 3.0
  */
 @Component( role = MojoExecutor.class )

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/PhaseRecorder.java
Patch:
@@ -23,11 +23,10 @@
 import org.apache.maven.project.MavenProject;
 
 /**
+ * <strong>NOTE:</strong> This class is not part of any public api and can be changed or deleted without prior notice.
  * @since 3.0
  * @author Benjamin Bentmann
  * @author Kristian Rosenvold
- *         <p/>
- *         NOTE: This class is not part of any public api and can be changed or deleted without prior notice.
  */
 public class PhaseRecorder
 {

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/ProjectArtifactFactory.java
Patch:
@@ -26,10 +26,12 @@
 import org.apache.maven.project.artifact.InvalidDependencyVersionException;
 
 /**
+ * <p>
  * Component interface responsible for creation of MavenProject#dependencyArtifacts instances.
+ * </p>
+ * <strong>NOTE:</strong> This class is not part of any public api and can be changed or deleted without prior notice.
  * 
  * @since 3.2.4
- * @provisional This interface is part of work in progress and can be changed or removed without notice.
  */
 public interface ProjectArtifactFactory
 {

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/ProjectBuildList.java
Patch:
@@ -33,13 +33,14 @@
 import org.apache.maven.project.MavenProject;
 
 /**
+ * <p>
  * A list of project segments, ordered so that all ProjectSegments from first TaskSegment come before any
  * subsequent TaskSegments.
+ * </p>
+ * <strong>Note:</strong> This interface is part of work in progress and can be changed or removed without notice.
  *
  * @since 3.0
  * @author Kristian Rosenvold
- *         <p/>
- *         NOTE: This class is not part of any public api and can be changed or deleted without prior notice.
  */
 public class ProjectBuildList
     implements Iterable<ProjectSegment>

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/ProjectIndex.java
Patch:
@@ -27,13 +27,14 @@
 import java.util.Map;
 
 /**
+ * <p>
  * Provides the positional index of the project
+ * </p>
+ * <strong>NOTE:</strong> This class is not part of any public api and can be changed or deleted without prior notice.
  *
  * @since 3.0
  * @author Benjamin Bentmann
  * @author Kristian Rosenvold (extracted class only)
- *         <p/>
- *         NOTE: This class is not part of any public api and can be changed or deleted without prior notice.
  */
 // TODO Kristian wonders if this class really is necessary and if it overlaps other concepts.
 public final class ProjectIndex

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/TaskSegment.java
Patch:
@@ -26,11 +26,11 @@
 /**
  * Describes the required task segment as provided on the maven command line; i.e. "clean jetty:run install"
  *
+ * <strong>NOTE:</strong> This class is not part of any public api and can be changed or deleted without prior notice.
+ * 
  * @since 3.0
  * @author Benjamin Bentmann
  * @author Kristian Rosenvold (extracted class only)
- *         <p/>
- *         NOTE: This class is not part of any public api and can be changed or deleted without prior notice.
  */
 public final class TaskSegment
 {

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/Builder.java
Patch:
@@ -29,11 +29,12 @@
 import org.apache.maven.lifecycle.internal.TaskSegment;
 
 /**
+ * <p>
  * A {@link Builder} encapsulates a strategy for building a set of Maven projects. The default strategy in Maven builds
  * the the projects serially, but a {@link Builder} can employ any type of concurrency model to build the projects.
- *
+ * </p>
+ * <strong>Note:</strong> This interface is part of work in progress and can be changed or removed without notice.
  * @author jvanzyl
- * @provisional
  */
 public interface Builder
 {

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/multithreaded/ConcurrencyDependencyGraph.java
Patch:
@@ -30,12 +30,13 @@
 import java.util.Set;
 
 /**
+ * <p>
  * Presents a view of the Dependency Graph that is suited for concurrent building.
+ * </p>
+ * <strong>NOTE:</strong> This class is not part of any public api and can be changed or deleted without prior notice.
  *
  * @since 3.0
  * @author Kristian Rosenvold
- *         <p/>
- *         NOTE: This class is not part of any public api and can be changed or deleted without prior notice.
  */
 public class ConcurrencyDependencyGraph
 {

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/multithreaded/MultiThreadedBuilder.java
Patch:
@@ -49,12 +49,12 @@
  * This builder uses a number of threads equal to the minimum of the degree of concurrency (which is the thread count
  * set with <code>-T</code> on the command-line) and the number of projects to build. As such, building a single project
  * will always result in a sequential build, regardless of the thread count.
+ * </p> 
+ * <strong>NOTE:</strong> This class is not part of any public api and can be changed or deleted without prior notice.
  *
  * @since 3.0
  * @author Kristian Rosenvold
  *         Builds one or more lifecycles for a full module
- *         <p/>
- *         NOTE: This class is not part of any public api and can be changed or deleted without prior notice.
  */
 @Component( role = Builder.class, hint = "multithreaded" )
 public class MultiThreadedBuilder

File: maven-core/src/main/java/org/apache/maven/plugin/PluginParameterExpressionEvaluator.java
Patch:
@@ -34,7 +34,7 @@
 
 /**
  * Evaluator for plugin parameters expressions. Content surrounded by <code>${</code> and <code>}</code> is evaluated.
- * Recognized values are:<table border="1">
+ * Recognized values are:<table border="1" summary="Expression matrix">
  * <tr><th>expression</th>                     <th></th>               <th>evaluation result</th></tr>
  * <tr><td><code>session</code></td>           <td></td>               <td>the actual {@link MavenSession}</td></tr>
  * <tr><td><code>session.*</code></td>         <td>(since Maven 3)</td><td></td></tr>

File: maven-core/src/main/java/org/apache/maven/project/RepositorySessionDecorator.java
Patch:
@@ -24,8 +24,8 @@
 /**
  * Component interface that allows per-project customization of Aether repository system sessions.
  * 
+ * <strong>Note:</strong> This interface is part of work in progress and can be changed or removed without notice. 
  * @since 3.2.4
- * @provisional This interface is part of work in progress and can be changed or removed without notice.
  */
 public interface RepositorySessionDecorator
 {

File: maven-core/src/main/java/org/apache/maven/repository/ArtifactTransferEvent.java
Patch:
@@ -122,7 +122,7 @@ public Exception getException()
      * Returns the request type.
      *
      * @return Returns the request type. The Request type is one of
-     *         <code>TransferEvent.REQUEST_GET<code> or <code>TransferEvent.REQUEST_PUT<code>
+     *         <code>TransferEvent.REQUEST_GET</code> or <code>TransferEvent.REQUEST_PUT</code>
      */
     public int getRequestType()
     {
@@ -134,7 +134,7 @@ public int getRequestType()
      *
      * @param requestType The requestType to set.
      *                    The Request type value should be either
-     *                    <code>TransferEvent.REQUEST_GET<code> or <code>TransferEvent.REQUEST_PUT<code>.
+     *                    <code>TransferEvent.REQUEST_GET</code> or <code>TransferEvent.REQUEST_PUT</code>.
      * @throws IllegalArgumentException when
      */
     public void setRequestType( final int requestType )

File: maven-core/src/main/java/org/apache/maven/repository/legacy/metadata/ArtifactMetadataSource.java
Patch:
@@ -48,8 +48,8 @@ ResolutionGroup retrieve( Artifact artifact, ArtifactRepository localRepository,
      *                           are needed, for instance the following code will work
      *                           <code>artifactFactory.createProjectArtifact( "org.apache.maven", "maven", "" )</code>
      * @param localRepository    local repository
-     * @param remoteRepositories remote repositories, {@link List} $lt; {@link ArtifactRepository} >
-     * @return {@link List} $lt; {@link ArtifactVersion} >
+     * @param remoteRepositories remote repositories, {@link List} $lt; {@link ArtifactRepository} &gt;
+     * @return {@link List} $lt; {@link ArtifactVersion} &gt;
      * @throws ArtifactMetadataRetrievalException
      *          in case of error while retrieving repository metadata from the repository.
      */
@@ -66,7 +66,7 @@ List<ArtifactVersion> retrieveAvailableVersions( Artifact artifact, ArtifactRepo
      *            <code>artifactFactory.createProjectArtifact( "org.apache.maven", "maven", "" )</code>
      * @param localRepository    local repository
      * @param remoteRepository   remote repository
-     * @return {@link List} $lt; {@link ArtifactVersion} >
+     * @return {@link List} $lt; {@link ArtifactVersion} &gt;
      * @throws ArtifactMetadataRetrievalException
      *          in case of error while retrieving repository metadata from the repository.
      */

File: maven-core/src/main/java/org/apache/maven/toolchain/ToolchainPrivate.java
Patch:
@@ -34,7 +34,7 @@ public interface ToolchainPrivate
     /**
      * Let the toolchain decide if it matches requirements defined
      * in the toolchain plugin configuration.
-     * @param requirements Map<String, String> key value pair, may not be {@code null}
+     * @param requirements Map&lt;String, String&gt; key value pair, may not be {@code null}
      * @return {@code true} if the requirements match, otherwise {@code false}
      */
     boolean matchesRequirements( Map<String, String> requirements );

File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/ModelInterpolator.java
Patch:
@@ -30,8 +30,6 @@
  * calculated from the elements of the model itself and the execution properties from the building request.
  *
  * @author jdcasey
- *         <p/>
- *         Created on Feb 2, 2005
  */
 public interface ModelInterpolator
 {

File: maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java
Patch:
@@ -74,9 +74,9 @@
  * This is a hand-crafted prototype of the default model merger that should eventually be generated by Modello by a new
  * Java plugin. Code structure to merge source (read-only) object into the target object is:<ul>
  * <li><code>merge<i>Classname</i>( <i>Classname</i> target, <i>Classname</i> source, boolean sourceDominant,
- * Map<Object, Object> context )</code> for each model class</li>
+ * Map&lt;Object, Object&gt; context )</code> for each model class</li>
  * <li><code>merge<i>Classname</i>_<i>FieldName</i>( <i>Classname</i> target, <i>Classname</i> source, boolean
- * sourceDominant, Map<Object, Object> context )</code> for each field of each model class</li>
+ * sourceDominant, Map&lt;Object, Object&gt; context )</code> for each field of each model class</li>
  * <li><code>Object get<i>Classname</i>Key( <i>Classname</i> <i>classname</i> )</code>
  * for each class that is used in a list</li>
  * </ul>

File: maven-plugin-api/src/main/java/org/apache/maven/plugin/ContextEnabled.java
Patch:
@@ -23,8 +23,7 @@
 
 /**
  * Interface to allow <code>Mojos</code> to communicate with each others <code>Mojos</code>, other than
- * project's source root and project's attachment.
- * <br/>
+ * project's source root and project's attachment.<br>
  * The plugin manager would pull the context out of the plugin container context, and populate it into the Mojo.
  *
  * @author jdcasey

File: maven-plugin-api/src/main/java/org/apache/maven/plugin/MojoExecutionException.java
Patch:
@@ -20,8 +20,7 @@
  */
 
 /**
- * An exception occurring during the execution of a plugin.
- * <br/>
+ * An exception occurring during the execution of a plugin.<br>
  * Throwing this exception causes a "BUILD ERROR" message to be displayed.
  *
  * @author Brett Porter

File: maven-plugin-api/src/main/java/org/apache/maven/plugin/MojoFailureException.java
Patch:
@@ -20,8 +20,7 @@
  */
 
 /**
- * An exception occurring during the execution of a plugin (such as a compilation failure).
- * <br/>
+ * An exception occurring during the execution of a plugin (such as a compilation failure).<br>
  * Throwing this exception causes a "BUILD FAILURE" message to be displayed.
  *
  * @author Brett Porter

File: maven-plugin-api/src/main/java/org/apache/maven/plugin/descriptor/MojoDescriptor.java
Patch:
@@ -30,8 +30,7 @@
 import org.codehaus.plexus.configuration.xml.XmlPlexusConfiguration;
 
 /**
- * The bean containing the Mojo descriptor.
- * <br/>
+ * The bean containing the Mojo descriptor.<br>
  * For more information about the usage tag, have a look to:
  * <a href="https://maven.apache.org/developers/mojo-api-specification.html">
  * https://maven.apache.org/developers/mojo-api-specification.html</a>

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/ArtifactDescriptorReaderDelegate.java
Patch:
@@ -46,8 +46,8 @@
 /**
  * Populates Aether {@link ArtifactDescriptorResult} from Maven project {@link Model}.
  * 
+ * <strong>Note:</strong> This class is part of work in progress and can be changed or removed without notice.
  * @since 3.2.4
- * @provisional This class is part of work in progress and can be changed or removed without notice.
  */
 public class ArtifactDescriptorReaderDelegate
 {

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -106,6 +106,7 @@ public static Test suite()
         // -------------------------------------------------------------------------------------------------------------
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng6173GetProjectsAndDependencyGraphTest.class );
         suite.addTestSuite( MavenITmng6173GetAllProjectsInReactorTest.class );
         suite.addTestSuite( MavenITmng5958LifecyclePhaseBinaryCompat.class );
         suite.addTestSuite( MavenITmng5898BuildMultimoduleWithEARFailsToResolveWARTest.class );

File: maven-core/src/main/java/org/apache/maven/DefaultMaven.java
Patch:
@@ -525,7 +525,7 @@ private Result<? extends ProjectDependencyGraph> buildGraph( MavenSession sessio
         {
             ProjectDependencyGraph projectDependencyGraph = graphResult.get();
             session.setProjects( projectDependencyGraph.getSortedProjects() );
-            session.setAllProjects( projectDependencyGraph.getSortedProjects() );
+            session.setAllProjects( projectDependencyGraph.getAllProjects() );
             session.setProjectDependencyGraph( projectDependencyGraph );
         }
 

File: maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java
Patch:
@@ -157,6 +157,7 @@ protected MavenSession createMavenSession( File pom, Properties executionPropert
             new MavenSession( getContainer(), configuration.getRepositorySession(), request,
                               new DefaultMavenExecutionResult() );
         session.setProjects( Arrays.asList( project ) );
+        session.setAllProjects( session.getProjects() );
 
         return session;
     }

File: maven-compat/src/test/java/org/apache/maven/repository/DefaultMirrorSelectorTest.java
Patch:
@@ -27,7 +27,7 @@ public class DefaultMirrorSelectorTest
     extends PlexusTestCase
 {
 
-    public void testMirrorWithMirroOfPatternContainingANegationIsNotSelected()
+    public void testMirrorWithMirrorOfPatternContainingANegationIsNotSelected()
     {
         ArtifactRepository repository = new DefaultArtifactRepository( "snapshots.repo", "http://whatever", null );
         String pattern = "external:*, !snapshots.repo";

File: maven-artifact/src/main/java/org/apache/maven/artifact/Artifact.java
Patch:
@@ -48,7 +48,7 @@ public interface Artifact
 
     Pattern VERSION_FILE_PATTERN = Pattern.compile( "^(.*)-([0-9]{8}.[0-9]{6})-([0-9]+)$" );
 
-    // TODO: into artifactScope handler
+    // TODO into artifactScope handler
 
     String SCOPE_COMPILE = "compile";
 

File: maven-artifact/src/main/java/org/apache/maven/artifact/repository/ArtifactRepository.java
Patch:
@@ -79,7 +79,6 @@ public interface ArtifactRepository
     /**
      *
      * @param artifact
-     * @return
      * @since 3.0-alpha-3
      */
     Artifact find( Artifact artifact );

File: maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java
Patch:
@@ -295,7 +295,7 @@ else if ( restriction.recommendedVersion != null )
             // original recommended version
             version = restriction.recommendedVersion;
         }
-/* TODO: should throw this immediately, but need artifact
+/* TODO should throw this immediately, but need artifact
         else
         {
             throw new OverConstrainedVersionException( "Restricting incompatible version ranges" );
@@ -518,7 +518,7 @@ public String toString()
 
     public ArtifactVersion matchVersion( List<ArtifactVersion> versions )
     {
-        // TODO: could be more efficient by sorting the list and then moving along the restrictions in order?
+        // TODO could be more efficient by sorting the list and then moving along the restrictions in order?
 
         ArtifactVersion matched = null;
         for ( ArtifactVersion version : versions )

File: maven-artifact/src/main/java/org/apache/maven/repository/Proxy.java
Patch:
@@ -148,17 +148,17 @@ public void setUserName( String userName )
     }
 
     /**
-     * Get the type of the proxy server.
+     * Get the protocol of the proxy server.
      *
-     * @return the type of the proxy server
+     * @return the protocol of the proxy server
      */
     public String getProtocol()
     {
         return protocol;
     }
 
     /**
-     * @param type the type of the proxy server like <i>SOCKSv4</i>
+     * @param protocol the protocol of the proxy server like <i>SOCKSv4</i>
      */
     public void setProtocol( String protocol )
     {

File: maven-artifact/src/test/java/org/apache/maven/artifact/versioning/VersionRangeTest.java
Patch:
@@ -178,7 +178,7 @@ public void testIntersections()
         VersionRange range1 = VersionRange.createFromVersionSpec( "1.0" );
         VersionRange range2 = VersionRange.createFromVersionSpec( "1.1" );
         VersionRange mergedRange = range1.restrict( range2 );
-        // TODO: current policy is to retain the original version - is this correct, do we need strategies or is that handled elsewhere?
+        // TODO current policy is to retain the original version - is this correct, do we need strategies or is that handled elsewhere?
 //        assertEquals( CHECK_VERSION_RECOMMENDATION, "1.1", mergedRange.getRecommendedVersion().toString() );
         assertEquals( CHECK_VERSION_RECOMMENDATION, "1.0", mergedRange.getRecommendedVersion().toString() );
         List<Restriction> restrictions = mergedRange.getRestrictions();
@@ -199,7 +199,7 @@ public void testIntersections()
         assertNull( CHECK_UPPER_BOUND, restriction.getUpperBound() );
         assertFalse( CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive() );
 
-        // TODO: test reversed restrictions on all below
+        // TODO test reversed restrictions on all below
         range1 = VersionRange.createFromVersionSpec( "[1.0,)" );
         range2 = VersionRange.createFromVersionSpec( "1.1" );
         mergedRange = range1.restrict( range2 );

File: maven-compat/src/main/java/org/apache/maven/artifact/ArtifactScopeEnum.java
Patch:
@@ -49,8 +49,6 @@ int getId()
 
     /**
      * Helper method to simplify null processing
-     *
-     * @return
      */
     public static final ArtifactScopeEnum checkScope( ArtifactScopeEnum scope )
     {

File: maven-compat/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java
Patch:
@@ -166,7 +166,7 @@ public ArtifactRepository getMirrorRepository( ArtifactRepository repository )
             String id = mirror.getId();
             if ( id == null )
             {
-                // TODO: this should be illegal in settings.xml
+                // TODO this should be illegal in settings.xml
                 id = repository.getId();
             }
 

File: maven-compat/src/main/java/org/apache/maven/artifact/repository/metadata/SnapshotArtifactRepositoryMetadata.java
Patch:
@@ -26,7 +26,7 @@
  * Metadata for the artifact version directory of the repository.
  *
  * @author <a href="mailto:brett@apache.org">Brett Porter</a>
- * @todo split instantiation (versioning, plugin mappings) from definition
+ * TODO split instantiation (versioning, plugin mappings) from definition
  */
 public class SnapshotArtifactRepositoryMetadata
     extends AbstractRepositoryMetadata

File: maven-compat/src/main/java/org/apache/maven/artifact/resolver/DebugResolutionListener.java
Patch:
@@ -85,7 +85,7 @@ public void updateScopeCurrentPom( Artifact artifact, String ignoredScope )
         logger.debug( indent + artifact + " (not setting artifactScope to: " + ignoredScope + "; local artifactScope "
             + artifact.getScope() + " wins)" );
 
-        // TODO: better way than static? this might hide messages in a reactor
+        // TODO better way than static? this might hide messages in a reactor
         if ( !ignoredArtifacts.contains( artifact ) )
         {
             logger.warn( "\n\tArtifact " + artifact + " retains local artifactScope '" + artifact.getScope()

File: maven-compat/src/main/java/org/apache/maven/artifact/resolver/DefaultArtifactResolver.java
Patch:
@@ -376,7 +376,7 @@ public ArtifactResolutionResult resolve( ArtifactResolutionRequest request )
         ArtifactFilter resolutionFilter = request.getResolutionFilter();
         RepositorySystemSession session = getSession( request.getLocalRepository() );
 
-        // TODO: hack because metadata isn't generated in m2e correctly and i want to run the maven i have in the
+        // TODO hack because metadata isn't generated in m2e correctly and i want to run the maven i have in the
         // workspace
         if ( source == null )
         {

File: maven-compat/src/main/java/org/apache/maven/project/MavenProjectBuilder.java
Patch:
@@ -54,7 +54,7 @@ MavenProject buildFromRepository( Artifact artifact, List<ArtifactRepository> re
                                       ArtifactRepository localRepository, boolean allowStubModel )
         throws ProjectBuildingException;
 
-    // TODO: this is only to provide a project for plugins that don't need a project to execute but need some
+    // TODO this is only to provide a project for plugins that don't need a project to execute but need some
     // of the values from a MavenProject. Ideally this should be something internal and nothing outside Maven
     // would ever need this so it should not be exposed in a public API
     MavenProject buildStandaloneSuperProject( ProjectBuilderConfiguration configuration )

File: maven-compat/src/main/java/org/apache/maven/project/interpolation/RegexBasedModelInterpolator.java
Patch:
@@ -30,7 +30,7 @@
  * Use a regular expression search to find and resolve expressions within the POM.
  *
  * @author jdcasey Created on Feb 3, 2005
- * @todo Consolidate this logic with the PluginParameterExpressionEvaluator, minus deprecations/bans.
+ * TODO Consolidate this logic with the PluginParameterExpressionEvaluator, minus deprecations/bans.
  */
 @Deprecated
 public class RegexBasedModelInterpolator

File: maven-compat/src/main/java/org/apache/maven/repository/MetadataResolutionRequest.java
Patch:
@@ -123,7 +123,7 @@ public List<ArtifactRepository> getRemoteRepositories()
     }
 
     /**
-     * @deprecated instead use {@link #setRemoteRepositories()}
+     * @deprecated instead use {@link #setRemoteRepositories(List)}
      */
     @Deprecated
     public MetadataResolutionRequest setRemoteRepostories( List<ArtifactRepository> remoteRepostories )

File: maven-compat/src/main/java/org/apache/maven/repository/MetadataResolutionResult.java
Patch:
@@ -161,7 +161,7 @@ public boolean hasVersionRangeViolations()
     }
 
     /**
-     * @TODO this needs to accept a {@link OverConstrainedVersionException} as returned by
+     * TODO this needs to accept a {@link OverConstrainedVersionException} as returned by
      *       {@link #getVersionRangeViolation(int)} but it's not used like that in
      *       {@link DefaultLegacyArtifactCollector}
      */

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/repository/DefaultArtifactRepositoryFactory.java
Patch:
@@ -37,7 +37,7 @@
 public class DefaultArtifactRepositoryFactory
     implements ArtifactRepositoryFactory
 {
-    // TODO: use settings?
+    // TODO use settings?
     private String globalUpdatePolicy;
 
     private String globalChecksumPolicy;

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/conflict/DefaultConflictResolverFactory.java
Patch:
@@ -32,7 +32,7 @@
  * A conflict resolver factory that obtains instances from a plexus container.
  *
  * @author <a href="mailto:markhobson@gmail.com">Mark Hobson</a>
- * @todo you don't need the container in here with the active maps (jvz).
+ * TODO you don't need the container in here with the active maps (jvz).
  * @since 3.0
  */
 @Component( role = ConflictResolverFactory.class )

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/conflict/NewestConflictResolver.java
Patch:
@@ -54,7 +54,7 @@ public ResolutionNode resolveConflict( ResolutionNode node1, ResolutionNode node
         }
         catch ( OverConstrainedVersionException exception )
         {
-            // TODO: log message or throw exception?
+            // TODO log message or throw exception?
 
             return null;
         }

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/conflict/OldestConflictResolver.java
Patch:
@@ -54,7 +54,7 @@ public ResolutionNode resolveConflict( ResolutionNode node1, ResolutionNode node
         }
         catch ( OverConstrainedVersionException exception )
         {
-            // TODO: log message or throw exception?
+            // TODO log message or throw exception?
 
             return null;
         }

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/transform/AbstractVersionTransformation.java
Patch:
@@ -42,7 +42,7 @@
  * Describes a version transformation during artifact resolution.
  *
  * @author <a href="mailto:brett@apache.org">Brett Porter</a>
- * @todo try and refactor to remove abstract methods - not particular happy about current design
+ * TODO try and refactor to remove abstract methods - not particular happy about current design
  */
 public abstract class AbstractVersionTransformation
     extends AbstractLogEnabled
@@ -105,8 +105,8 @@ protected String resolveVersion( Artifact artifact, RepositoryRequest request )
             version = artifact.getBaseVersion();
         }
 
-        // TODO: also do this logging for other metadata?
-        // TODO: figure out way to avoid duplicated message
+        // TODO also do this logging for other metadata?
+        // TODO figure out way to avoid duplicated message
         if ( getLogger().isDebugEnabled() )
         {
             if ( !version.equals( artifact.getBaseVersion() ) )

File: maven-compat/src/test/java/org/apache/maven/repository/legacy/resolver/DefaultArtifactCollectorTest.java
Patch:
@@ -166,7 +166,7 @@ public void testResolveCorrectDependenciesWhenDifferentDependenciesOnNearest()
     public void disabledtestResolveCorrectDependenciesWhenDifferentDependenciesOnNewest()
         throws ArtifactResolutionException, InvalidVersionSpecificationException
     {
-        // TODO: use newest conflict resolver
+        // TODO use newest conflict resolver
         ArtifactSpec a = createArtifactSpec( "a", "1.0" );
         ArtifactSpec b = a.addDependency( "b", "1.0" );
         ArtifactSpec c2 = b.addDependency( "c", "2.0" );
@@ -185,7 +185,7 @@ public void disabledtestResolveCorrectDependenciesWhenDifferentDependenciesOnNew
     public void disabledtestResolveCorrectDependenciesWhenDifferentDependenciesOnNewestVersionReplaced()
         throws ArtifactResolutionException, InvalidVersionSpecificationException
     {
-        // TODO: use newest conflict resolver
+        // TODO use newest conflict resolver
         ArtifactSpec a = createArtifactSpec( "a", "1.0" );
         ArtifactSpec b1 = a.addDependency( "b", "1.0" );
         ArtifactSpec c = a.addDependency( "c", "1.0" );

File: maven-core/src/main/java/org/apache/maven/AbstractMavenLifecycleParticipant.java
Patch:
@@ -53,7 +53,7 @@ public void afterProjectsRead( MavenSession session )
      * activate profiles and perform similar tasks that affect MavenProject
      * instance construction.
      */
-    // TODO: This is too early for build extensions, so maybe just remove it?
+    // TODO This is too early for build extensions, so maybe just remove it?
     public void afterSessionStart( MavenSession session )
         throws MavenExecutionException
     {

File: maven-core/src/main/java/org/apache/maven/DefaultArtifactFilterManager.java
Patch:
@@ -85,7 +85,7 @@ public ArtifactFilter getArtifactFilter()
     /**
      * Returns the artifact filter for the standard core artifacts.
      *
-     * @see org.apache.maven.ArtifactFilterManager#getExtensionDependencyFilter()
+     * @see org.apache.maven.ArtifactFilterManager#getCoreArtifactFilter()
      */
     public ArtifactFilter getCoreArtifactFilter()
     {

File: maven-core/src/main/java/org/apache/maven/artifact/DependencyResolutionRequiredException.java
Patch:
@@ -23,7 +23,7 @@
  * Exception that occurs when an artifact file is used, but has not been resolved.
  *
  * @author <a href="mailto:brett@apache.org">Brett Porter</a>
- * @todo it may be better for artifact.getFile() to throw it - perhaps it is a runtime exception?
+ * TODO it may be better for artifact.getFile() to throw it - perhaps it is a runtime exception?
  */
 public class DependencyResolutionRequiredException
     extends Exception

File: maven-core/src/main/java/org/apache/maven/artifact/repository/MavenArtifactRepository.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;
 import org.apache.maven.repository.Proxy;
 
-//TODO: completely separate local and remote artifact repositories
+//TODO completely separate local and remote artifact repositories
 public class MavenArtifactRepository
     implements ArtifactRepository
 {
@@ -234,7 +234,7 @@ private static String protocol( final String url )
      *
      * @param url the repository URL
      * @return the basedir of the repository
-     * @todo need to URL decode for spaces?
+     * TODO need to URL decode for spaces?
      */
     private String basedir( String url )
     {

File: maven-core/src/main/java/org/apache/maven/artifact/repository/metadata/AbstractRepositoryMetadata.java
Patch:
@@ -181,15 +181,15 @@ public Metadata getMetadata()
 
     public void merge( org.apache.maven.repository.legacy.metadata.ArtifactMetadata metadata )
     {
-        // TODO: not sure that it should assume this, maybe the calls to addMetadata should pre-merge, then artifact
+        // TODO not sure that it should assume this, maybe the calls to addMetadata should pre-merge, then artifact
         // replaces?
         AbstractRepositoryMetadata repoMetadata = (AbstractRepositoryMetadata) metadata;
         this.metadata.merge( repoMetadata.getMetadata() );
     }
 
     public void merge( ArtifactMetadata metadata )
     {
-        // TODO: not sure that it should assume this, maybe the calls to addMetadata should pre-merge, then artifact
+        // TODO not sure that it should assume this, maybe the calls to addMetadata should pre-merge, then artifact
         // replaces?
         AbstractRepositoryMetadata repoMetadata = (AbstractRepositoryMetadata) metadata;
         this.metadata.merge( repoMetadata.getMetadata() );

File: maven-core/src/main/java/org/apache/maven/artifact/repository/metadata/RepositoryMetadata.java
Patch:
@@ -26,7 +26,7 @@
  * Describes repository directory metadata.
  *
  * @author <a href="mailto:brett@apache.org">Brett Porter</a>
- * @todo not happy about the store method - they use "this"
+ * TODO not happy about the store method - they use "this"
  */
 public interface RepositoryMetadata
     extends org.apache.maven.artifact.metadata.ArtifactMetadata

File: maven-core/src/main/java/org/apache/maven/artifact/resolver/ArtifactResolutionResult.java
Patch:
@@ -36,7 +36,7 @@
  * - network/transfer errors - file system errors: permissions
  *
  * @author Jason van Zyl
- * @TODO carlos: all these possible has*Exceptions and get*Exceptions methods make the clients too
+ * TODO carlos: all these possible has*Exceptions and get*Exceptions methods make the clients too
  *       complex requiring a long list of checks, need to create a parent/interface/encapsulation
  *       for the types of exceptions
  */
@@ -173,7 +173,7 @@ public boolean hasVersionRangeViolations()
     }
 
     /**
-     * @TODO this needs to accept a {@link OverConstrainedVersionException} as returned by
+     * TODO this needs to accept a {@link OverConstrainedVersionException} as returned by
      *       {@link #getVersionRangeViolation(int)} but it's not used like that in
      *       {@link DefaultLegacyArtifactCollector}
      */

File: maven-core/src/main/java/org/apache/maven/artifact/resolver/ResolutionNode.java
Patch:
@@ -198,7 +198,7 @@ public void enable()
     {
         active = true;
 
-        // TODO: if it was null, we really need to go find them now... or is this taken care of by the ordering?
+        // TODO if it was null, we really need to go find them now... or is this taken care of by the ordering?
         if ( children != null )
         {
             for ( ResolutionNode node : children )

File: maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExcludesArtifactFilter.java
Patch:
@@ -27,7 +27,7 @@
  * Filter to exclude from a list of artifact patterns.
  *
  * @author <a href="mailto:brett@apache.org">Brett Porter</a>
- * @todo I think this is equiv. to exclusion set filter in maven-core
+ * TODO I think this is equiv. to exclusion set filter in maven-core
  */
 public class ExcludesArtifactFilter
     extends IncludesArtifactFilter

File: maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java
Patch:
@@ -49,7 +49,7 @@ public boolean include( Artifact artifact )
         boolean matched = false;
         for ( Iterator<String> i = patterns.iterator(); i.hasNext() & !matched; )
         {
-            // TODO: what about wildcards? Just specifying groups? versions?
+            // TODO what about wildcards? Just specifying groups? versions?
             if ( id.equals( i.next() ) )
             {
                 matched = true;

File: maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java
Patch:
@@ -1088,7 +1088,7 @@ public List<ArtifactRepository> getPluginArtifactRepositories()
         return pluginArtifactRepositories;
     }
 
-    // TODO: this does not belong here.
+    // TODO this does not belong here.
     @Override
     public ProjectBuildingRequest getProjectBuildingRequest()
     {

File: maven-core/src/main/java/org/apache/maven/execution/scope/WeakMojoExecutionListener.java
Patch:
@@ -25,8 +25,9 @@
 /**
  * Extension point that allows build extensions observe and possibly veto mojo executions.
  * <p>
- * Unlike {@link MojoExecutionListener}, this extension point does not trigger instantiation of the component, hence
- * "weak" class name prefix. Only applies to mojo execution scoped components.
+ * Unlike {@link org.apache.maven.execution.MojoExecutionListener}, this extension point does not
+ * trigger instantiation of the component, hence "weak" class name prefix. Only applies to mojo execution
+ * scoped components.
  *
  * @see org.apache.maven.execution.MojoExecutionListener
  * @since 3.1.2

File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java
Patch:
@@ -97,8 +97,8 @@ public void execute( MavenSession session )
     // fully populated Plugin objects, including executions with goals and default configuration taken
     // from the plugin.xml inside a plugin.
     //
-    // TODO: This whole method could probably removed by injecting lifeCyclePluginAnalyzer straight into client site.
-    // TODO: But for some reason the whole plexus appcontext refuses to start when I try this.
+    // TODO This whole method could probably removed by injecting lifeCyclePluginAnalyzer straight into client site.
+    // TODO But for some reason the whole plexus appcontext refuses to start when I try this.
 
     public Set<Plugin> getPluginsBoundByDefaultToAllLifecycles( String packaging )
     {

File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycles.java
Patch:
@@ -40,7 +40,7 @@
  * @author Jason van Zyl
  * @author Kristian Rosenvold
  */
-// TODO: The configuration for the lifecycle needs to be externalized so that I can use the annotations properly for the
+// TODO The configuration for the lifecycle needs to be externalized so that I can use the annotations properly for the
 // wiring and reference and external source for the lifecycle configuration.
 @Component( role = DefaultLifecycles.class )
 public class DefaultLifecycles

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecycleExecutionPlanCalculator.java
Patch:
@@ -525,8 +525,8 @@ private void injectLifecycleOverlay( Map<String, List<MojoExecution>> lifecycleM
     }
 
     // org.apache.maven.plugins:maven-remote-resources-plugin:1.0:process
-    // TODO: take repo mans into account as one may be aggregating prefixes of many
-    // TODO: collect at the root of the repository, read the one at the root, and fetch remote if something is missing
+    // TODO take repo mans into account as one may be aggregating prefixes of many
+    // TODO collect at the root of the repository, read the one at the root, and fetch remote if something is missing
     // or the user forces the issue
 
     private List<MojoExecution> calculateForkedGoal( MojoExecution mojoExecution, MavenSession session,

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/DependencyContext.java
Patch:
@@ -35,7 +35,7 @@
  *         <p/>
  *         NOTE: This class is not part of any public api and can be changed or deleted without prior notice.
  */
-// TODO: From a concurrency perspective, this class is not good. The combination of mutable/immutable state is not nice
+// TODO From a concurrency perspective, this class is not good. The combination of mutable/immutable state is not nice
 public class DependencyContext
 {
 

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/GoalTask.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * A task that is a goal
  * <p/>
- * TODO: From a concurrency perspective, this class is not good. The combination of mutable/immutable state is not nice
+ * TODO From a concurrency perspective, this class is not good. The combination of mutable/immutable state is not nice
  *
  * @since 3.0
  * @author Benjamin Bentmann

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoDescriptorCreator.java
Patch:
@@ -239,8 +239,8 @@ else if ( numTokens <= 2 )
                                                 session.getRepositorySession() );
     }
 
-    // TODO: take repo mans into account as one may be aggregating prefixes of many
-    // TODO: collect at the root of the repository, read the one at the root, and fetch remote if something is missing
+    // TODO take repo mans into account as one may be aggregating prefixes of many
+    // TODO collect at the root of the repository, read the one at the root, and fetch remote if something is missing
     // or the user forces the issue
 
     public Plugin findPluginForPrefix( String prefix, MavenSession session )

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/ProjectBuildList.java
Patch:
@@ -51,7 +51,7 @@ public ProjectBuildList( List<ProjectSegment> items )
         this.items = Collections.unmodifiableList( items );
     }
 
-    // TODO: Optimize; or maybe just rewrite the whole way aggregating mojos are being run.
+    // TODO Optimize; or maybe just rewrite the whole way aggregating mojos are being run.
     /**
      * Returns aProjectBuildList that contains only items for the specified taskSegment
      * @param taskSegment the requested tasksegment

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/ProjectIndex.java
Patch:
@@ -35,7 +35,7 @@
  *         <p/>
  *         NOTE: This class is not part of any public api and can be changed or deleted without prior notice.
  */
-// Todo: Kristian wonders if this class really is necessary and if it overlaps other concepts.
+// TODO Kristian wonders if this class really is necessary and if it overlaps other concepts.
 public final class ProjectIndex
 {
 

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/TaskSegment.java
Patch:
@@ -69,5 +69,5 @@ public boolean isAggregating()
         return aggregating;
     }
 
-    // TODO: Consider throwing UnsupportedSomething on hashCode/equals
+    // TODO Consider throwing UnsupportedSomething on hashCode/equals
 }

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/BuilderCommon.java
Patch:
@@ -188,7 +188,7 @@ public static void attachToThread( MavenProject currentProject )
         }
     }
 
-    // Todo: I'm really wondering where this method belongs; smells like it should be on MavenProject, but for some
+    // TODO I'm really wondering where this method belongs; smells like it should be on MavenProject, but for some
     // reason it isn't ? This localization is kind-of a code smell.
 
     public static String getKey( MavenProject project )

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultBuildPluginManager.java
Patch:
@@ -37,8 +37,8 @@
 import org.eclipse.aether.RepositorySystemSession;
 import org.eclipse.aether.repository.RemoteRepository;
 
-// TODO: the antrun plugin has its own configurator, the only plugin that does. might need to think about how that works
-// TODO: remove the coreArtifactFilterManager
+// TODO the antrun plugin has its own configurator, the only plugin that does. might need to think about how that works
+// TODO remove the coreArtifactFilterManager
 
 @Component( role = BuildPluginManager.class )
 public class DefaultBuildPluginManager

File: maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java
Patch:
@@ -124,7 +124,7 @@ public class DefaultMavenPluginManager
      * PluginId=>ExtensionRealmCache.CacheRecord map MavenProject context value key. The map is used to ensure the same
      * class realm is used to load build extensions and load mojos for extensions=true plugins.
      *
-     * @noreference this is part of internal implementation and may be changed or removed without notice
+     * @provisional This is part of internal implementation and may be changed or removed without notice
      * @since 3.3.0
      */
     public static final String KEY_EXTENSIONS_REALMS = DefaultMavenPluginManager.class.getName() + "/extensionsRealms";
@@ -617,7 +617,7 @@ private void populatePluginFields( Object mojo, MojoDescriptor mojoDescriptor, C
 
         try
         {
-            // TODO: could the configuration be passed to lookup and the configurator known to plexus via the descriptor
+            // TODO could the configuration be passed to lookup and the configurator known to plexus via the descriptor
             // so that this method could entirely be handled by a plexus lookup?
             configurator = container.lookup( ComponentConfigurator.class, configuratorId );
 

File: maven-core/src/main/java/org/apache/maven/project/DuplicateArtifactAttachmentException.java
Patch:
@@ -27,7 +27,7 @@
  *
  * @author pgier
  * @author jdcasey
- * @todo Make this a checked exception, and modify the API of MavenProjectHelper.
+ * TODO Make this a checked exception, and modify the API of MavenProjectHelper.
  * Currently, this modification would create compatibility problems for existing plugins.
  */
 public class DuplicateArtifactAttachmentException

File: maven-core/src/main/java/org/apache/maven/project/ProjectSorter.java
Patch:
@@ -233,7 +233,7 @@ private boolean isSpecificVersion( String version )
         return !( StringUtils.isEmpty( version ) || version.startsWith( "[" ) || version.startsWith( "(" ) );
     }
 
-    // TODO: !![jc; 28-jul-2005] check this; if we're using '-r' and there are aggregator tasks, this will result in weirdness.
+    // TODO !![jc; 28-jul-2005] check this; if we're using '-r' and there are aggregator tasks, this will result in weirdness.
     public MavenProject getTopLevelProject()
     {
         if ( topLevelProject == null )

File: maven-core/src/main/java/org/apache/maven/project/artifact/ActiveProjectArtifact.java
Patch:
@@ -38,7 +38,7 @@
  * attributes of this artifact.
  *
  * @author <a href="mailto:brett@apache.org">Brett Porter</a>
- * @todo I think this exposes a design flaw in that the immutable and mutable parts of an artifact are in one class and
+ * TODO I think this exposes a design flaw in that the immutable and mutable parts of an artifact are in one class and
  * should be split. ie scope, file, etc depend on the context of use, whereas everything else is immutable.
  */
 @Deprecated

File: maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java
Patch:
@@ -93,7 +93,7 @@ public class MavenMetadataSource
     @Requirement
     private ArtifactFactory repositorySystem;
 
-    //TODO: This prevents a cycle in the composition which shows us another problem we need to deal with.
+    //TODO This prevents a cycle in the composition which shows us another problem we need to deal with.
     //@Requirement
     private ProjectBuilder projectBuilder;
 
@@ -175,7 +175,7 @@ public ResolutionGroup retrieve( MetadataResolutionRequest request )
 
         Artifact relocatedArtifact = null;
 
-        //TODO: Not even sure this is really required as the project will be cached in the builder, we'll see this
+        //TODO Not even sure this is really required as the project will be cached in the builder, we'll see this
         // is currently the biggest hotspot
         if ( artifact instanceof ArtifactWithDependencies )
         {
@@ -658,7 +658,7 @@ else if ( isNonTransferrablePom( e ) )
 
                         // MNG-2861: the artifact data has changed. If the available versions where previously
                         // retrieved, we need to update it.
-                        // TODO: shouldn't the versions be merged across relocations?
+                        // TODO shouldn't the versions be merged across relocations?
                         List<ArtifactVersion> available = artifact.getAvailableVersions();
                         if ( available != null && !available.isEmpty() )
                         {

File: maven-core/src/main/java/org/apache/maven/settings/DefaultMavenSettingsBuilder.java
Patch:
@@ -127,7 +127,7 @@ private File getFile( String pathPattern, String basedirSysProp, String altLocat
 
         if ( StringUtils.isEmpty( path ) )
         {
-            // TODO: This replacing shouldn't be necessary as user.home should be in the
+            // TODO This replacing shouldn't be necessary as user.home should be in the
             // context of the container and thus the value would be interpolated by Plexus
             String basedir = System.getProperty( basedirSysProp );
             if ( basedir == null )

File: maven-core/src/main/java/org/apache/maven/toolchain/DefaultToolchainManager.java
Patch:
@@ -124,7 +124,7 @@ Map<String, Object> retrieveContext( MavenSession session )
 
             if ( current != null )
             {
-                //TODO: why is this using the context
+                //TODO why is this using the context
                 context = session.getPluginContext( desc, current );
             }
         }

File: maven-core/src/main/java/org/apache/maven/toolchain/ToolchainManager.java
Patch:
@@ -44,16 +44,16 @@ public interface ToolchainManager
      * <code>maven-toolchains-plugin</code> contains the configuration to select the appropriate
      * toolchain and is executed at the beginning of the build.
      *
-     * @param session the Maven session, must not be {@code null}
      * @param type the type, must not be {@code null}
+     * @param context the Maven session, must not be {@code null}
      * @return the toolchain selected by <code>maven-toolchains-plugin</code>
      */
     Toolchain getToolchainFromBuildContext( String type, MavenSession context );
-    
+
     /**
      * Select all toolchains available in user settings matching the type and requirements,
      * independently from <code>maven-toolchains-plugin</code>.
-     * 
+     *
      * @param session the Maven session, must not be {@code null}
      * @param type the type, must not be {@code null}
      * @param requirements the requirements, may be {@code null}

File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/ProjectBuildListTest.java
Patch:
@@ -36,7 +36,7 @@ public void testGetByTaskSegment()
 
         final ProjectBuildList byTaskSegment = projectBuildList.getByTaskSegment( taskSegment );
         assertEquals( projectBuildList.size(),
-                      byTaskSegment.size() ); // Todo: Make multiple segments on projectBuildList
+                      byTaskSegment.size() ); // TODO Make multiple segments on projectBuildList
     }
 
 }

File: maven-core/src/test/java/org/apache/maven/plugin/PluginManagerTest.java
Patch:
@@ -103,7 +103,7 @@ public void testMojoDescriptorRetrieval()
     // Tests which exercise the lifecycle executor when it is dealing with individual goals.
     // -----------------------------------------------------------------------------------------------
 
-    //TODO: These two tests display a lack of symmetry with respect to the input which is a free form string and the
+    //TODO These two tests display a lack of symmetry with respect to the input which is a free form string and the
     //      mojo descriptor which comes back. All the free form parsing needs to be done somewhere else, this is
     //      really the function of the CLI, and then the pre-processing of that output still needs to be fed into
     //      a hinting process which helps flesh out the full specification of the plugin. The plugin manager should
@@ -113,7 +113,7 @@ public void testMojoDescriptorRetrieval()
     public void testRemoteResourcesPlugin()
         throws Exception
     {
-        //TODO: turn an equivalent back on when the RR plugin is released.
+        //TODO turn an equivalent back on when the RR plugin is released.
 
         /*
 
@@ -138,7 +138,7 @@ public void testRemoteResourcesPlugin()
         */
     }
 
-    //TODO: this will be the basis of the customizable lifecycle execution so need to figure this out quickly.
+    //TODO this will be the basis of the customizable lifecycle execution so need to figure this out quickly.
     public void testSurefirePlugin()
         throws Exception
     {

File: maven-core/src/test/java/org/apache/maven/project/artifact/MavenMetadataSourceTest.java
Patch:
@@ -90,7 +90,7 @@ public void testShouldNotCarryExclusionsOverFromDependencyToDependency()
         */
     }
 
-    //TODO: restore these if it makes sense
+    //TODO restore these if it makes sense
     /*
     public void testShouldUseCompileScopeIfDependencyScopeEmpty()
         throws Exception

File: maven-embedder/src/main/java/org/apache/maven/cli/CleanArgument.java
Patch:
@@ -64,7 +64,7 @@ public static String[] cleanArgs( String[] args )
                     // otherwise, we trim the trailing " and append to the buffer.
                     else
                     {
-                        // TODO: introducing a space here...not sure what else to do but collapse whitespace
+                        // TODO introducing a space here...not sure what else to do but collapse whitespace
                         currentArg.append( ' ' ).append( cleanArgPart );
                     }
 

File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java
Patch:
@@ -888,7 +888,7 @@ private ModelData readParentLocally( Model childModel, ModelSource childSource,
         }
 
         //
-        // TODO:jvz Why isn't all this checking the job of the duty of the workspace resolver, we know that we
+        // TODO jvz Why isn't all this checking the job of the duty of the workspace resolver, we know that we
         // have a model that is suitable, yet more checks are done here and the one for the version is problematic
         // before because with parents as ranges it will never work in this scenario.
         //

File: maven-model-builder/src/main/java/org/apache/maven/model/building/ModelBuildingRequest.java
Patch:
@@ -66,15 +66,15 @@ public interface ModelBuildingRequest
 
     /**
      * Gets the raw model to build. If not set, model source will be used to load raw model.
-     * 
+     *
      * @return The raw model to build or {@code null} if not set.
      */
     Model getRawModel();
 
     /**
      * Set raw model.
      *
-     * @param model
+     * @param rawModel
      */
     ModelBuildingRequest setRawModel( Model rawModel );
 

File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringSearchModelInterpolator.java
Patch:
@@ -306,7 +306,7 @@ void interpolate( Object target, InterpolateObjectAction interpolateObjectAction
                             new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE ).setMessage(
                                 "Failed to interpolate field3: " + field + " on class: "
                                     + field.getType().getName() ).setException(
-                                e ) ); // todo: Not entirely the same message
+                                e ) ); // TODO Not entirely the same message
                     }
                     catch ( IllegalAccessException e )
                     {

File: maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java
Patch:
@@ -109,7 +109,7 @@ else if ( target.getUrl() == null )
     }
 
     /*
-     * TODO: Whether the merge continues recursively into an existing node or not could be an option for the generated
+     * TODO Whether the merge continues recursively into an existing node or not could be an option for the generated
      * merger
      */
     @Override
@@ -266,7 +266,7 @@ protected void mergeModelBase_Modules( ModelBase target, ModelBase source, boole
     }
 
     /*
-     * TODO: The order of the merged list could be controlled by an attribute in the model association: target-first,
+     * TODO The order of the merged list could be controlled by an attribute in the model association: target-first,
      * source-first, dominant-first, recessive-first
      */
     @Override
@@ -352,7 +352,7 @@ protected void mergeModelBase_PluginRepositories( ModelBase target, ModelBase so
     }
 
     /*
-     * TODO: Whether duplicates should be removed looks like an option for the generated merger.
+     * TODO Whether duplicates should be removed looks like an option for the generated merger.
      */
     @Override
     protected void mergeBuildBase_Filters( BuildBase target, BuildBase source, boolean sourceDominant,

File: maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java
Patch:
@@ -532,7 +532,7 @@ private void validateEffectiveDependencies( ModelProblemCollector problems, List
                                      d.getManagementKey(), d );
 
                     /*
-                     * TODO: Extensions like Flex Mojos use custom scopes like "merged", "internal", "external", etc. In
+                     * TODO Extensions like Flex Mojos use custom scopes like "merged", "internal", "external", etc. In
                      * order to don't break backward-compat with those, only warn but don't error out.
                      */
                     validateEnum( prefix + "scope", problems, Severity.WARNING, Version.V20, d.getScope(),

File: maven-plugin-api/src/main/java/org/apache/maven/plugin/Mojo.java
Patch:
@@ -58,7 +58,7 @@ void execute()
      *
      * @param log a new logger
      */
-    // TODO: not sure about this here, and may want a getLog on here as well/instead
+    // TODO not sure about this here, and may want a getLog on here as well/instead
     void setLog( Log log );
 
     /**

File: maven-plugin-api/src/main/java/org/apache/maven/plugin/descriptor/MojoDescriptor.java
Patch:
@@ -36,7 +36,7 @@
  * <a href="https://maven.apache.org/developers/mojo-api-specification.html">
  * https://maven.apache.org/developers/mojo-api-specification.html</a>
  *
- * @todo is there a need for the delegation of MavenMojoDescriptor to this?
+ * TODO is there a need for the delegation of MavenMojoDescriptor to this?
  * Why not just extend ComponentDescriptor here?
  */
 public class MojoDescriptor
@@ -269,7 +269,7 @@ public String getDependencyResolutionRequired()
 
     /**
      * @return the required dependencies in a specified scope
-     * @TODO the name is not intelligible
+     * TODO the name is not intelligible
      */
     @Deprecated
     public String isDependencyResolutionRequired()

File: maven-plugin-api/src/main/java/org/apache/maven/plugin/descriptor/PluginDescriptor.java
Patch:
@@ -176,7 +176,7 @@ public static String getDefaultPluginGroupId()
     /**
      * Parse maven-...-plugin.
      *
-     * @todo move to plugin-tools-api as a default only
+     * TODO move to plugin-tools-api as a default only
      */
     public static String getGoalPrefixFromArtifactId( String artifactId )
     {
@@ -287,7 +287,7 @@ public MojoDescriptor getMojo( String goal )
             return null; // no mojo in this POM
         }
 
-        // TODO: could we use a map? Maybe if the parent did that for components too, as this is too vulnerable to
+        // TODO could we use a map? Maybe if the parent did that for components too, as this is too vulnerable to
         // changes above not being propagated to the map
         for ( MojoDescriptor desc : getMojos() )
         {

File: maven-plugin-api/src/main/java/org/apache/maven/plugin/descriptor/PluginDescriptorBuilder.java
Patch:
@@ -313,7 +313,7 @@ public MojoDescriptor buildComponentDescriptor( PlexusConfiguration c, PluginDes
 
         mojo.setParameters( parameters );
 
-        // TODO: this should not need to be handed off...
+        // TODO this should not need to be handed off...
 
         // ----------------------------------------------------------------------
         // Requirements

File: maven-plugin-api/src/main/java/org/apache/maven/plugin/logging/SystemStreamLog.java
Patch:
@@ -141,7 +141,7 @@ public void error( Throwable error )
      */
     public boolean isDebugEnabled()
     {
-        // TODO: Not sure how best to set these for this implementation...
+        // TODO Not sure how best to set these for this implementation...
         return false;
     }
 

File: maven-artifact/src/main/java/org/apache/maven/artifact/repository/ArtifactRepositoryPolicy.java
Patch:
@@ -160,7 +160,7 @@ public String toString()
         buffer.append( checksumPolicy );
         buffer.append( ", updates=" );
         buffer.append( updatePolicy );
-        buffer.append( "}" );
+        buffer.append( '}' );
         return buffer.toString();
     }
 

File: maven-artifact/src/main/java/org/apache/maven/artifact/resolver/MultipleArtifactsNotFoundException.java
Patch:
@@ -84,8 +84,9 @@ public List<Artifact> getMissingArtifacts()
 
     private static String constructMessage( List<Artifact> artifacts )
     {
-        StringBuilder buffer = new StringBuilder( "Missing:\n" );
+        StringBuilder buffer = new StringBuilder( 256 );
 
+        buffer.append( "Missing:\n" );
         buffer.append( "----------\n" );
 
         int counter = 0;

File: maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java
Patch:
@@ -111,7 +111,7 @@ public final void parseVersion( String version )
     {
         comparable = new ComparableVersion( version );
 
-        int index = version.indexOf( "-" );
+        int index = version.indexOf( '-' );
 
         String part1;
         String part2 = null;

File: maven-artifact/src/main/java/org/apache/maven/artifact/versioning/Restriction.java
Patch:
@@ -178,17 +178,17 @@ public String toString()
     {
         StringBuilder buf = new StringBuilder();
 
-        buf.append( isLowerBoundInclusive() ? "[" : "(" );
+        buf.append( isLowerBoundInclusive() ? '[' : '(' );
         if ( getLowerBound() != null )
         {
             buf.append( getLowerBound().toString() );
         }
-        buf.append( "," );
+        buf.append( ',' );
         if ( getUpperBound() != null )
         {
             buf.append( getUpperBound().toString() );
         }
-        buf.append( isUpperBoundInclusive() ? "]" : ")" );
+        buf.append( isUpperBoundInclusive() ? ']' : ')' );
 
         return buf.toString();
     }

File: maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java
Patch:
@@ -104,8 +104,8 @@ public static VersionRange createFromVersionSpec( String spec )
 
         while ( process.startsWith( "[" ) || process.startsWith( "(" ) )
         {
-            int index1 = process.indexOf( ")" );
-            int index2 = process.indexOf( "]" );
+            int index1 = process.indexOf( ')' );
+            int index2 = process.indexOf( ']' );
 
             int index = index2;
             if ( index2 < 0 || index1 < index2 )
@@ -171,7 +171,7 @@ private static Restriction parseRestriction( String spec )
 
         Restriction restriction;
 
-        int index = process.indexOf( "," );
+        int index = process.indexOf( ',' );
 
         if ( index < 0 )
         {

File: maven-builder-support/src/main/java/org/apache/maven/building/DefaultProblem.java
Patch:
@@ -151,7 +151,7 @@ public String toString()
     {
         StringBuilder buffer = new StringBuilder( 128 );
 
-        buffer.append( "[" ).append( getSeverity() ).append( "] " );
+        buffer.append( '[' ).append( getSeverity() ).append( "] " );
         buffer.append( getMessage() );
         buffer.append( " @ " ).append( getLocation() );
 

File: maven-compat/src/main/java/org/apache/maven/artifact/versioning/ManagedVersionMap.java
Patch:
@@ -45,10 +45,10 @@ public String toString()
         while ( iter.hasNext() )
         {
             String key = iter.next();
-            buffer.append( key ).append( "=" ).append( get( key ) );
+            buffer.append( key ).append( '=' ).append( get( key ) );
             if ( iter.hasNext() )
             {
-                buffer.append( "\n" );
+                buffer.append( '\n' );
             }
         }
         return buffer.toString();

File: maven-compat/src/main/java/org/apache/maven/project/validation/ModelValidationResult.java
Patch:
@@ -85,7 +85,7 @@ public String render( String indentation )
 //
         for ( int i = 0; i < messages.size(); i++ )
         {
-            message.append( indentation ).append( "[" ).append( i ).append( "]  " ).append( messages.get( i ) ).append(
+            message.append( indentation ).append( '[' ).append( i ).append( "]  " ).append( messages.get( i ) ).append(
                 NEWLINE );
         }
 

File: maven-compat/src/main/java/org/apache/maven/repository/metadata/MetadataGraph.java
Patch:
@@ -486,13 +486,13 @@ public String toString()
         }
         for ( MetadataGraphVertex v : vertices )
         {
-            sb.append( "Vertex:  " ).append( v.getMd().toString() ).append( "\n" );
+            sb.append( "Vertex:  " ).append( v.getMd().toString() ).append( '\n' );
             List<MetadataGraphEdge> ins = getIncidentEdges( v );
             if ( ins != null )
             {
                 for ( MetadataGraphEdge e : ins )
                 {
-                    sb.append( "       from :  " ).append( e.toString() ).append( "\n" );
+                    sb.append( "       from :  " ).append( e.toString() ).append( '\n' );
                 }
             }
             else
@@ -505,7 +505,7 @@ public String toString()
             {
                 for ( MetadataGraphEdge e : outs )
                 {
-                    sb.append( "        to :  " ).append( e.toString() ).append( "\n" );
+                    sb.append( "        to :  " ).append( e.toString() ).append( '\n' );
                 }
             }
             else

File: maven-compat/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java
Patch:
@@ -59,7 +59,7 @@ public String getPathForLocalArtifact( Artifact artifact )
 
         path.append( artifact.getGroupId() ).append( '/' );
 
-        path.append( artifact.getExtension() ).append( 's' ).append( '/' );
+        path.append( artifact.getExtension() ).append( "s/" );
 
         path.append( artifact.getArtifactId() ).append( '-' ).append( artifact.getVersion() );
 

File: maven-compat/src/test/java/org/apache/maven/project/inheritance/AbstractProjectInheritanceTestCase.java
Patch:
@@ -33,7 +33,7 @@ protected String getTestSeries()
     {
         String className = getClass().getPackage().getName();
 
-        return className.substring( className.lastIndexOf( "." ) + 1 );
+        return className.substring( className.lastIndexOf( '.' ) + 1 );
     }
 
     protected File projectFile( String name )

File: maven-core/src/main/java/org/apache/maven/artifact/repository/metadata/AbstractRepositoryMetadata.java
Patch:
@@ -197,7 +197,7 @@ public void merge( ArtifactMetadata metadata )
 
     public String extendedToString()
     {
-        StringBuilder buffer = new StringBuilder();
+        StringBuilder buffer = new StringBuilder( 256 );
 
         buffer.append( "\nRepository Metadata\n--------------------------" );
         buffer.append( "\nGroupId: " ).append( getGroupId() );

File: maven-core/src/main/java/org/apache/maven/lifecycle/mapping/LifecyclePhase.java
Patch:
@@ -84,7 +84,7 @@ public String toString()
                 }
                 else
                 {
-                    sb.append( "," );
+                    sb.append( ',' );
                 }
                 sb.append( mojo.getGoal() );
             }

File: maven-core/src/main/java/org/apache/maven/plugin/MojoExecution.java
Patch:
@@ -175,7 +175,7 @@ public String toString()
         {
             buffer.append( mojoDescriptor.getId() );
         }
-        buffer.append( " {execution: " ).append( executionId ).append( "}" );
+        buffer.append( " {execution: " ).append( executionId ).append( '}' );
         return buffer.toString();
     }
 

File: maven-core/src/main/java/org/apache/maven/plugin/PluginParameterException.java
Patch:
@@ -151,7 +151,7 @@ else if ( isMap )
 
         if ( StringUtils.isEmpty( expression ) )
         {
-            messageBuffer.append( "." );
+            messageBuffer.append( '.' );
         }
         else
         {
@@ -172,7 +172,7 @@ public String buildDiagnosticMessage()
         MojoDescriptor mojo = getMojoDescriptor();
 
         messageBuffer.append( "One or more required plugin parameters are invalid/missing for \'" )
-            .append( mojo.getPluginDescriptor().getGoalPrefix() ).append( ":" ).append( mojo.getGoal() )
+            .append( mojo.getPluginDescriptor().getGoalPrefix() ).append( ':' ).append( mojo.getGoal() )
             .append( "\'\n" );
 
         int idx = 0;
@@ -184,7 +184,7 @@ public String buildDiagnosticMessage()
 
             decomposeParameterIntoUserInstructions( mojo, param, messageBuffer );
 
-            messageBuffer.append( "\n" );
+            messageBuffer.append( '\n' );
         }
 
         return messageBuffer.toString();

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java
Patch:
@@ -263,15 +263,15 @@ public boolean visitEnter( DependencyNode node )
                 {
                     buffer.append( " (scope managed from " ).append( premanagedScope );
                     appendManagementSource( buffer, art, "scope" );
-                    buffer.append( ")" );
+                    buffer.append( ')' );
                 }
 
                 String premanagedVersion = DependencyManagerUtils.getPremanagedVersion( node );
                 if ( premanagedVersion != null && !premanagedVersion.equals( art.getVersion() ) )
                 {
                     buffer.append( " (version managed from " ).append( premanagedVersion );
                     appendManagementSource( buffer, art, "version" );
-                    buffer.append( ")" );
+                    buffer.append( ')' );
                 }
             }
             else

File: maven-core/src/main/java/org/apache/maven/project/MavenProject.java
Patch:
@@ -1133,9 +1133,9 @@ public String toString()
         StringBuilder sb = new StringBuilder( 128 );
         sb.append( "MavenProject: " );
         sb.append( getGroupId() );
-        sb.append( ":" );
+        sb.append( ':' );
         sb.append( getArtifactId() );
-        sb.append( ":" );
+        sb.append( ':' );
         sb.append( getVersion() );
         sb.append( " @ " );
 

File: maven-core/src/main/java/org/apache/maven/repository/legacy/metadata/AbstractArtifactMetadata.java
Patch:
@@ -53,7 +53,7 @@ public String getArtifactId()
 
     public String extendedToString()
     {
-        StringBuilder buffer = new StringBuilder();
+        StringBuilder buffer = new StringBuilder( 256 );
 
         buffer.append( "\nArtifact Metadata\n--------------------------" );
         buffer.append( "\nGroupId: " ).append( getGroupId() );

File: maven-core/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java
Patch:
@@ -59,7 +59,7 @@ public String getPathForLocalArtifact( Artifact artifact )
 
         path.append( artifact.getGroupId() ).append( '/' );
 
-        path.append( artifact.getExtension() ).append( 's' ).append( '/' );
+        path.append( artifact.getExtension() ).append( "s/" );
 
         path.append( artifact.getArtifactId() ).append( '-' ).append( artifact.getVersion() );
 

File: maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java
Patch:
@@ -71,7 +71,7 @@ public static String showVersion()
         version.append( "Default locale: " ).append( Locale.getDefault() ).append( ", platform encoding: " ).append(
             System.getProperty( "file.encoding", "<unknown encoding>" ) ).append( ls );
         version.append( "OS name: \"" ).append( Os.OS_NAME ).append( "\", version: \"" ).append( Os.OS_VERSION ).append(
-            "\", arch: \"" ).append( Os.OS_ARCH ).append( "\", family: \"" ).append( Os.OS_FAMILY ).append( "\"" );
+            "\", arch: \"" ).append( Os.OS_ARCH ).append( "\", family: \"" ).append( Os.OS_FAMILY ).append( '\"' );
         return version.toString();
     }
 

File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -1621,7 +1621,7 @@ private static void setCliProperty( String property, Properties properties )
 
         String value;
 
-        int i = property.indexOf( "=" );
+        int i = property.indexOf( '=' );
 
         if ( i <= 0 )
         {

File: maven-embedder/src/main/java/org/apache/maven/cli/event/ExecutionEventLogger.java
Patch:
@@ -174,7 +174,7 @@ else if ( buildSummary instanceof BuildSuccess )
                     buffer.append( chars( ' ', padSize ) );
                 }
                 buffer.append( buildTimeDuration );
-                buffer.append( "]" );
+                buffer.append( ']' );
             }
             else if ( buildSummary instanceof BuildFailure )
             {
@@ -187,7 +187,7 @@ else if ( buildSummary instanceof BuildFailure )
                     buffer.append( chars( ' ', padSize ) );
                 }
                 buffer.append( buildTimeDuration );
-                buffer.append( "]" );
+                buffer.append( ']' );
             }
 
             logger.info( buffer.toString() );

File: maven-embedder/src/main/java/org/apache/maven/cli/logging/impl/UnsupportedSlf4jBindingConfiguration.java
Patch:
@@ -59,7 +59,7 @@ public void activate()
         for ( Map.Entry<URL, Set<Object>> entry : supported.entrySet() )
         {
             StringBuilder sb = new StringBuilder();
-            sb.append( "(from " ).append( entry.getKey().toExternalForm() ).append( ")" );
+            sb.append( "(from " ).append( entry.getKey().toExternalForm() ).append( ')' );
 
             for ( Object binding : entry.getValue() )
             {

File: maven-embedder/src/test/java/org/apache/maven/cli/CLIManagerDocumentationTest.java
Patch:
@@ -62,7 +62,7 @@ public Collection<Option> getOptions()
 
     public String getOptionsAsHtml()
     {
-        StringBuilder sb = new StringBuilder();
+        StringBuilder sb = new StringBuilder( 512 );
         boolean a = true;
         sb.append( "<table border='1' class='zebra-striped'><tr class='a'><th><b>Options</b></th><th><b>Description</b></th></tr>" );
         for ( Option option : new CLIManagerExtension().getOptions() )

File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelProblem.java
Patch:
@@ -165,7 +165,7 @@ public String toString()
     {
         StringBuilder buffer = new StringBuilder( 128 );
 
-        buffer.append( "[" ).append( getSeverity() ).append( "] " );
+        buffer.append( '[' ).append( getSeverity() ).append( "] " );
         buffer.append( getMessage() );
         buffer.append( " @ " ).append( ModelProblemUtils.formatLocation( this, null ) );
 

File: maven-model-builder/src/main/java/org/apache/maven/model/building/ModelProblemUtils.java
Patch:
@@ -51,7 +51,7 @@ static String toSourceHint( Model model )
         File pomFile = model.getPomFile();
         if ( pomFile != null )
         {
-            buffer.append( " (" ).append( pomFile ).append( ")" );
+            buffer.append( " (" ).append( pomFile ).append( ')' );
         }
 
         return buffer.toString();

File: maven-plugin-api/src/main/java/org/apache/maven/plugin/MojoNotFoundException.java
Patch:
@@ -54,7 +54,7 @@ private static String toMessage( String goal, PluginDescriptor pluginDescriptor
     {
         StringBuilder buffer = new StringBuilder( 256 );
 
-        buffer.append( "Could not find goal '" ).append( goal ).append( "'" );
+        buffer.append( "Could not find goal '" ).append( goal ).append( '\'' );
 
         if ( pluginDescriptor != null )
         {

File: maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsProblem.java
Patch:
@@ -156,7 +156,7 @@ public String toString()
     {
         StringBuilder buffer = new StringBuilder( 128 );
 
-        buffer.append( "[" ).append( getSeverity() ).append( "] " );
+        buffer.append( '[' ).append( getSeverity() ).append( "] " );
         buffer.append( getMessage() );
         buffer.append( " @ " ).append( getLocation() );
 

File: maven-core/src/main/java/org/apache/maven/project/ProjectModelResolver.java
Patch:
@@ -228,6 +228,7 @@ public ModelSource resolveModel( Parent parent )
                      && versionRangeResult.getVersionConstraint().getRange() != null
                      && versionRangeResult.getVersionConstraint().getRange().getUpperBound() == null )
             {
+                // Message below is checked for in the MNG-2199 core IT.
                 throw new UnresolvableModelException( "The requested version range '" + parent.getVersion()
                                                           + "' does not specify an upper bound", parent.getGroupId(),
                                                       parent.getArtifactId(), parent.getVersion() );

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java
Patch:
@@ -208,6 +208,7 @@ public ModelSource resolveModel( Parent parent )
                      && versionRangeResult.getVersionConstraint().getRange() != null
                      && versionRangeResult.getVersionConstraint().getRange().getUpperBound() == null )
             {
+                // Message below is checked for in the MNG-2199 core IT.
                 throw new UnresolvableModelException( "The requested version range '" + parent.getVersion()
                                                           + "' does not specify an upper bound", parent.getGroupId(),
                                                       parent.getArtifactId(), parent.getVersion() );

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java
Patch:
@@ -329,7 +329,7 @@ public ArtifactResolutionResult resolve( ArtifactResolutionRequest request )
                 DelegatingLocalArtifactRepository delegatingLocalRepository =
                     (DelegatingLocalArtifactRepository) request.getLocalRepository();
 
-                LocalArtifactRepository orig = delegatingLocalRepository.getIdeWorspace();
+                LocalArtifactRepository orig = delegatingLocalRepository.getIdeWorkspace();
 
                 delegatingLocalRepository.setIdeWorkspace( ideWorkspace );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3268MultipleHyphenPCommandLineTest.java
Patch:
@@ -26,14 +26,14 @@
 
 /**
  * This is a test set for <a href="https://issues.apache.org/jira/browse/MNG-3268">MNG-3268</a>.
- * 
+ *
  * @version $Id$
  */
 public class MavenITmng3268MultipleHyphenPCommandLineTest
     extends AbstractMavenIntegrationTestCase
 {
 
-    public MavenITmng3268MultipleDashPCommandLineTest()
+    public MavenITmng3268MultipleHyphenPCommandLineTest()
     {
         super( "(2.0.9,)" );
     }

File: maven-artifact/src/main/java/org/apache/maven/artifact/resolver/CyclicDependencyException.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.maven.artifact.Artifact;
 
 /**
- * Indiciates a cycle in the dependency graph.
+ * Indicates a cycle in the dependency graph.
  *
  * @author <a href="mailto:brett@apache.org">Brett Porter</a>
  */

File: maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java
Patch:
@@ -33,7 +33,7 @@
  *
  * <p>Features:
  * <ul>
- * <li>mixing of '<code>-</code>' (dash) and '<code>.</code>' (dot) separators,</li>
+ * <li>mixing of '<code>-</code>' (hyphen) and '<code>.</code>' (dot) separators,</li>
  * <li>transition between characters and digits also constitutes a separator:
  *     <code>1.0alpha1 =&gt; [1, 0, alpha, 1]</code></li>
  * <li>unlimited number of version components,</li>
@@ -50,7 +50,7 @@
  *     </ul>
  *     Unknown qualifiers are considered after known qualifiers, with lexical order (always case insensitive),
  *   </li>
- * <li>a dash usually precedes a qualifier, and is always less important than something preceded with a dot.</li>
+ * <li>a hyphen usually precedes a qualifier, and is always less important than something preceded with a dot.</li>
  * </ul></p>
  *
  * @see <a href="https://cwiki.apache.org/confluence/display/MAVENOLD/Versioning">"Versioning" on Maven Wiki</a>

File: maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java
Patch:
@@ -180,7 +180,7 @@ public final void parseVersion( String version )
                     fallback = Pattern.compile( "\\d+" ).matcher( qualifier ).matches();
                 }
 
-                // string tokenzier won't detect these and ignores them
+                // string tokenizer won't detect these and ignores them
                 if ( part1.contains( ".." ) || part1.startsWith( "." ) || part1.endsWith( "." ) )
                 {
                     fallback = true;

File: maven-compat/src/main/java/org/apache/maven/artifact/installer/ArtifactInstaller.java
Patch:
@@ -40,7 +40,7 @@ public interface ArtifactInstaller
      * @param artifact the artifact definition
      * @param localRepository the local repository to install into
      * @throws ArtifactInstallationException if an error occurred installing the artifact
-     * @deprecated to be removed before 2.0 after the instlal/deploy plugins use the alternate
+     * @deprecated to be removed before 2.0 after the install/deploy plugins use the alternate
      *             method
      */
     @Deprecated

File: maven-compat/src/main/java/org/apache/maven/artifact/resolver/ResolutionListenerForDepMgmt.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * Do not use!
  * <p/>
- * Should only be implmemented by DebugResolutionListener.  Remove this
+ * Should only be implemented by DebugResolutionListener.  Remove this
  * when the ResolutionListener interface deprecation of the manageArtifact
  * method (and the [yet to be done] addition of these methods to that
  * interface) has had a chance to propagate to all interested plugins.

File: maven-compat/src/main/java/org/apache/maven/profiles/DefaultProfileManager.java
Patch:
@@ -62,7 +62,7 @@ public class DefaultProfileManager
 
     /**
      * @deprecated without passing in the system properties, the SystemPropertiesProfileActivator will not work
-     *             correctly in embedded envirnments.
+     *             correctly in embedded environments.
      */
     public DefaultProfileManager( PlexusContainer container )
     {

File: maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java
Patch:
@@ -230,7 +230,7 @@ private void assembleModelInheritance( Model child, Model parent, String childPa
             }
         }
 
-        assembleDistributionInheritence( child, parent, childPathAdjustment, appendPaths );
+        assembleDistributionInheritance( child, parent, childPathAdjustment, appendPaths );
 
         // issueManagement
         if ( child.getIssueManagement() == null )
@@ -569,7 +569,7 @@ private void assembleBuildInheritance( Model child, Model parent )
         }
     }
 
-    private void assembleDistributionInheritence( Model child, Model parent, String childPathAdjustment,
+    private void assembleDistributionInheritance( Model child, Model parent, String childPathAdjustment,
                                                   boolean appendPaths )
     {
         if ( parent.getDistributionManagement() != null )

File: maven-compat/src/main/java/org/apache/maven/project/inheritance/ModelInheritanceAssembler.java
Patch:
@@ -35,7 +35,7 @@ public interface ModelInheritanceAssembler
 
     void assembleModelInheritance( Model child, Model parent );
 
-    void assembleBuildInheritance( Build childBuild, Build parentBuild, boolean handleAsInheriance );
+    void assembleBuildInheritance( Build childBuild, Build parentBuild, boolean handleAsInheritance );
 
     void copyModel( Model dest, Model source );
 }

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/DefaultLegacyArtifactCollector.java
Patch:
@@ -477,7 +477,7 @@ private void recurse( ArtifactResolutionResult result, ResolutionNode node,
                                     manageArtifact( child, managedVersions, listeners );
 
                                     // Also, we need to ensure that any exclusions it presents are
-                                    // added to the artifact before we retrive the metadata
+                                    // added to the artifact before we retrieve the metadata
                                     // for the artifact; otherwise we may end up with unwanted
                                     // dependencies.
                                     Artifact ma = managedVersions.get( childKey );
@@ -691,7 +691,7 @@ boolean checkScopeUpdate( ResolutionNode farthest, ResolutionNode nearest, List<
         {
             fireEvent( ResolutionListener.UPDATE_SCOPE, listeners, nearest, farthestArtifact );
 
-            // previously we cloned the artifact, but it is more effecient to just update the artifactScope
+            // previously we cloned the artifact, but it is more efficient to just update the artifactScope
             // if problems are later discovered that the original object needs its original artifactScope value, 
             // cloning may
             // again be appropriate

File: maven-compat/src/main/java/org/apache/maven/repository/metadata/MetadataGraphVertex.java
Patch:
@@ -31,7 +31,7 @@ public class MetadataGraphVertex
 {
     ArtifactMetadata md;
 
-    // indications to use these in comparrison
+    // indications to use these in comparison
     private boolean compareVersion = false;
     private boolean compareScope   = false;
 

File: maven-compat/src/test/java/org/apache/maven/project/inheritance/t00/ProjectInheritanceTest.java
Patch:
@@ -42,7 +42,7 @@ public class ProjectInheritanceTest
     // p3 inherits from p2
     // p2 inherits from p1
     // p1 inherits from p0
-    // p0 inhertis from super model
+    // p0 inherits from super model
     //
     // or we can show it graphically as:
     //

File: maven-compat/src/test/java/org/apache/maven/project/inheritance/t01/ProjectInheritanceTest.java
Patch:
@@ -38,7 +38,7 @@ public class ProjectInheritanceTest
     // p3 inherits from p2
     // p2 inherits from p1
     // p1 inherits from p0
-    // p0 inhertis from super model
+    // p0 inherits from super model
     //
     // or we can show it graphically as:
     //

File: maven-compat/src/test/java/org/apache/maven/project/inheritance/t02/ProjectInheritanceTest.java
Patch:
@@ -49,7 +49,7 @@ public class ProjectInheritanceTest
     // p3 inherits from p2
     // p2 inherits from p1
     // p1 inherits from p0
-    // p0 inhertis from super model
+    // p0 inherits from super model
     //
     // or we can show it graphically as:
     //

File: maven-compat/src/test/java/org/apache/maven/project/inheritance/t03/ProjectInheritanceTest.java
Patch:
@@ -41,7 +41,7 @@ public class ProjectInheritanceTest
     // ----------------------------------------------------------------------
     //
     // p1 inherits from p0
-    // p0 inhertis from super model
+    // p0 inherits from super model
     //
     // or we can show it graphically as:
     //

File: maven-compat/src/test/java/org/apache/maven/project/inheritance/t04/ProjectInheritanceTest.java
Patch:
@@ -39,7 +39,7 @@ public class ProjectInheritanceTest
     // ----------------------------------------------------------------------
     //
     // p1 inherits from p0
-    // p0 inhertis from super model
+    // p0 inherits from super model
     //
     // or we can show it graphically as:
     //

File: maven-compat/src/test/java/org/apache/maven/project/inheritance/t05/ProjectInheritanceTest.java
Patch:
@@ -37,7 +37,7 @@ public class ProjectInheritanceTest
     // ----------------------------------------------------------------------
     //
     // p1 inherits from p0
-    // p0 inhertis from super model
+    // p0 inherits from super model
     //
     // or we can show it graphically as:
     //

File: maven-compat/src/test/java/org/apache/maven/project/inheritance/t06/ProjectInheritanceTest.java
Patch:
@@ -38,7 +38,7 @@ public class ProjectInheritanceTest
     // ----------------------------------------------------------------------
     //
     // p1 inherits from p0
-    // p0 inhertis from super model
+    // p0 inherits from super model
     //
     // or we can show it graphically as:
     //

File: maven-compat/src/test/java/org/apache/maven/project/inheritance/t07/ProjectInheritanceTest.java
Patch:
@@ -37,7 +37,7 @@ public class ProjectInheritanceTest
     // ----------------------------------------------------------------------
     //
     // p1 inherits from p0
-    // p0 inhertis from super model
+    // p0 inherits from super model
     //
     // or we can show it graphically as:
     //

File: maven-compat/src/test/java/org/apache/maven/project/inheritance/t08/ProjectInheritanceTest.java
Patch:
@@ -38,7 +38,7 @@ public class ProjectInheritanceTest
     // ----------------------------------------------------------------------
     //
     // p1 inherits from p0
-    // p0 inhertis from super model
+    // p0 inherits from super model
     //
     // or we can show it graphically as:
     //

File: maven-compat/src/test/java/org/apache/maven/project/inheritance/t09/ProjectInheritanceTest.java
Patch:
@@ -36,7 +36,7 @@ public class ProjectInheritanceTest
     // ----------------------------------------------------------------------
     //
     // p1 inherits from p0
-    // p0 inhertis from super model
+    // p0 inherits from super model
     //
     // or we can show it graphically as:
     //

File: maven-compat/src/test/java/org/apache/maven/project/inheritance/t10/ProjectInheritanceTest.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.maven.project.inheritance.AbstractProjectInheritanceTestCase;
 
 /**
- * Verifies scope inheritence of direct and transitive dependencies.
+ * Verifies scope inheritance of direct and transitive dependencies.
  *
  * Should show three behaviors:
  *
@@ -44,7 +44,7 @@ public class ProjectInheritanceTest
     // ----------------------------------------------------------------------
     //
     // p1 inherits from p0
-    // p0 inhertis from super model
+    // p0 inherits from super model
     //
     // or we can show it graphically as:
     //

File: maven-compat/src/test/java/org/apache/maven/project/inheritance/t11/ProjectInheritanceTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.maven.project.inheritance.AbstractProjectInheritanceTestCase;
 
 /**
- * Verifies scope of root project is preserved regardless of parent depenedency management.
+ * Verifies scope of root project is preserved regardless of parent dependency management.
  *
  * @author <a href="mailto:pschneider@gmail.com">Patrick Schneider</a>
  * @see <a href="https://issues.apache.org/jira/browse/MNG-2919">MNG-2919</a>
@@ -36,7 +36,7 @@ public class ProjectInheritanceTest
     // ----------------------------------------------------------------------
     //
     // p1 inherits from p0
-    // p0 inhertis from super model
+    // p0 inherits from super model
     //
     // or we can show it graphically as:
     //

File: maven-compat/src/test/java/org/apache/maven/project/inheritance/t12scm/ProjectInheritanceTest.java
Patch:
@@ -35,7 +35,7 @@ public class ProjectInheritanceTest
     // ----------------------------------------------------------------------
     //
     // p1 inherits from p0
-    // p0 inhertis from super model
+    // p0 inherits from super model
     //
     // or we can show it graphically as:
     //

File: maven-core/src/main/java/org/apache/maven/artifact/repository/MavenArtifactRepository.java
Patch:
@@ -213,7 +213,7 @@ public void setUrl( String url )
      * Return the protocol name.
      * <br/>
      * E.g: for input
-     * <code>http://www.codehause.org</code> this method will return <code>http</code>
+     * <code>http://www.codehaus.org</code> this method will return <code>http</code>
      *
      * @param url the url
      * @return the host name

File: maven-core/src/main/java/org/apache/maven/artifact/resolver/ArtifactResolutionResult.java
Patch:
@@ -37,7 +37,7 @@
  *
  * @author Jason van Zyl
  * @TODO carlos: all these possible has*Exceptions and get*Exceptions methods make the clients too
- *       complex requiring a long list of checks, need to create a parent/interfact/encapsulation
+ *       complex requiring a long list of checks, need to create a parent/interface/encapsulation
  *       for the types of exceptions
  */
 public class ArtifactResolutionResult

File: maven-core/src/main/java/org/apache/maven/configuration/DefaultBeanConfigurationRequest.java
Patch:
@@ -137,10 +137,10 @@ private Plugin findPlugin( Model model, String groupId, String artifactId )
                     }
                 }
 
-                PluginManagement mngt = build.getPluginManagement();
-                if ( mngt != null )
+                PluginManagement mgmt = build.getPluginManagement();
+                if ( mgmt != null )
                 {
-                    for ( Plugin plugin : mngt.getPlugins() )
+                    for ( Plugin plugin : mgmt.getPlugins() )
                     {
                         if ( groupId.equals( plugin.getGroupId() ) && artifactId.equals( plugin.getArtifactId() ) )
                         {

File: maven-core/src/main/java/org/apache/maven/eventspy/EventSpy.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * A core extension to monitor Maven's execution. Typically, such an extension gets loaded into Maven by specifying the
  * system property {@code maven.ext.class.path} on the command line. As soon as dependency injection is setup, Maven
- * looks up all implementators of this interface and calls their {@link #init(Context)} method. <em>Note:</em>
+ * looks up all implementers of this interface and calls their {@link #init(Context)} method. <em>Note:</em>
  * Implementors are strongly advised to inherit from {@link AbstractEventSpy} instead of directly implementing this
  * interface.
  * @since 3.0.2

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/GoalTask.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * A task that is a goal
  * <p/>
- * TODO: From a concurrecy perspective, this class is not good. The combination of mutable/immutable state is not nice
+ * TODO: From a concurrency perspective, this class is not good. The combination of mutable/immutable state is not nice
  *
  * @since 3.0
  * @author Benjamin Bentmann

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/TaskSegment.java
Patch:
@@ -69,5 +69,5 @@ public boolean isAggregating()
         return aggregating;
     }
 
-    // TODO: Consider throwing UnsupprtedSomething on hashCode/equals
+    // TODO: Consider throwing UnsupportedSomething on hashCode/equals
 }

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/multithreaded/ThreadOutputMuxer.java
Patch:
@@ -37,7 +37,7 @@
  * @author Kristian Rosenvold
  *         <p/>
  *         NOTE: This class is not part of any public api and can be changed or deleted without prior notice.
- *         This class in particular may spontaneusly self-combust and be replaced by a plexus-compliant thread aware
+ *         This class in particular may spontaneously self-combust and be replaced by a plexus-compliant thread aware
  *         logger implementation at any time.
  */
 @SuppressWarnings( { "SynchronizationOnLocalVariableOrMethodParameter" } )
@@ -54,7 +54,7 @@ public class ThreadOutputMuxer
 
     private final ByteArrayOutputStream defaultOutputStreamForUnknownData = new ByteArrayOutputStream();
 
-    private final PrintStream defaultPringStream = new PrintStream( defaultOutputStreamForUnknownData );
+    private final PrintStream defaultPrintStream = new PrintStream( defaultOutputStreamForUnknownData );
 
     private final Set<ProjectSegment> completedBuilds = Collections.synchronizedSet( new HashSet<ProjectSegment>() );
 
@@ -175,7 +175,7 @@ private PrintStream getThreadBoundPrintStream()
         ProjectSegment threadProject = projectBuildThreadLocal.get();
         if ( threadProject == null )
         {
-            return defaultPringStream;
+            return defaultPrintStream;
         }
         if ( ownsRealOutputStream( threadProject ) )
         {

File: maven-core/src/main/java/org/apache/maven/plugin/DebugConfigurationListener.java
Patch:
@@ -57,7 +57,7 @@ public void notifyFieldChangeUsingReflection( String fieldName, Object value, Ob
     }
 
     /**
-     * Creates a human-friendly string represenation of the specified object.
+     * Creates a human-friendly string representation of the specified object.
      *
      * @param obj The object to create a string representation for, may be <code>null</code>.
      * @return The string representation, never <code>null</code>.

File: maven-core/src/main/java/org/apache/maven/plugin/ExtensionRealmCache.java
Patch:
@@ -49,14 +49,14 @@ static class CacheRecord
 
         public final ClassRealm realm;
 
-        public final ExtensionDescriptor desciptor;
+        public final ExtensionDescriptor descriptor;
 
         public final List<Artifact> artifacts;
 
         public CacheRecord( ClassRealm realm, ExtensionDescriptor descriptor, List<Artifact> artifacts )
         {
             this.realm = realm;
-            this.desciptor = descriptor;
+            this.descriptor = descriptor;
             this.artifacts = artifacts;
         }
 

File: maven-core/src/main/java/org/apache/maven/plugin/version/PluginVersionRequest.java
Patch:
@@ -67,7 +67,7 @@ public interface PluginVersionRequest
     /**
      * Gets the POM whose build plugins are to be scanned for the version.
      *
-     * @return The POM whose build plugins are to be scanned for the verion or {@code null} to only search the plugin
+     * @return The POM whose build plugins are to be scanned for the version or {@code null} to only search the plugin
      *         repositories.
      */
     Model getPom();

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java
Patch:
@@ -197,7 +197,7 @@ public synchronized ProjectRealmCache.CacheRecord createProjectRealm( MavenProje
                 pluginManager.setupExtensionsRealm( project, plugin, request.getRepositorySession() );
 
             final ClassRealm extensionRealm = recordRealm.realm;
-            final ExtensionDescriptor extensionDescriptor = recordRealm.desciptor;
+            final ExtensionDescriptor extensionDescriptor = recordRealm.descriptor;
             final List<Artifact> artifacts = recordRealm.artifacts;
 
             extensionRealms.add( extensionRealm );

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingResult.java
Patch:
@@ -48,7 +48,7 @@ class DefaultProjectBuildingResult
      * Creates a new result with the specified contents.
      *
      * @param project The project that was built, may be {@code null}.
-     * @param problems The problems that were encouterned, may be {@code null}.
+     * @param problems The problems that were encountered, may be {@code null}.
      * @param dependencyResolutionResult The result of the resolution for the project dependencies, may be {@code null}.
      */
     public DefaultProjectBuildingResult( MavenProject project, List<ModelProblem> problems,
@@ -68,7 +68,7 @@ public DefaultProjectBuildingResult( MavenProject project, List<ModelProblem> pr
      *
      * @param projectId The identifier of the project, may be {@code null}.
      * @param pomFile The POM file from which the project was built, may be {@code null}.
-     * @param problems The problems that were encouterned, may be {@code null}.
+     * @param problems The problems that were encountered, may be {@code null}.
      */
     public DefaultProjectBuildingResult( String projectId, File pomFile, List<ModelProblem> problems )
     {

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java
Patch:
@@ -153,10 +153,10 @@ public DependencyResolutionResult resolve( DependencyResolutionRequest request )
             }
         }
 
-        DependencyManagement depMngt = project.getDependencyManagement();
-        if ( depMngt != null )
+        DependencyManagement depMgmt = project.getDependencyManagement();
+        if ( depMgmt != null )
         {
-            for ( Dependency dependency : depMngt.getDependencies() )
+            for ( Dependency dependency : depMgmt.getDependencies() )
             {
                 collect.addManagedDependency( RepositoryUtils.toDependency( dependency, stereotypes ) );
             }

File: maven-core/src/main/java/org/apache/maven/project/MavenProjectHelper.java
Patch:
@@ -41,7 +41,7 @@ public interface MavenProjectHelper
      * * See {@link #attachArtifact(MavenProject, String, String, java.io.File)}, but with classifier set to null.
      * @param project project reference.
      * @param artifactType artifact type.
-     * @param artifactFile arrifact file.
+     * @param artifactFile artifact file.
      */
     void attachArtifact( MavenProject project, String artifactType, File artifactFile );
 

File: maven-core/src/main/java/org/apache/maven/project/ProjectBuildingRequest.java
Patch:
@@ -38,7 +38,7 @@ public interface ProjectBuildingRequest
 
     List<ArtifactRepository> getRemoteRepositories();
 
-    ProjectBuildingRequest setPluginArtifactRepositories( List<ArtifactRepository> pluginArtifacgRepositories );
+    ProjectBuildingRequest setPluginArtifactRepositories( List<ArtifactRepository> pluginArtifactRepositories );
 
     List<ArtifactRepository> getPluginArtifactRepositories();
 

File: maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java
Patch:
@@ -208,8 +208,8 @@ public ResolutionGroup retrieve( MetadataResolutionRequest request )
             {
                 dependencies = rel.project.getDependencies();
 
-                DependencyManagement depMngt = rel.project.getDependencyManagement();
-                managedDependencies = ( depMngt != null ) ? depMngt.getDependencies() : null;
+                DependencyManagement depMgmt = rel.project.getDependencyManagement();
+                managedDependencies = ( depMgmt != null ) ? depMgmt.getDependencies() : null;
 
                 pomRepositories = rel.project.getRemoteArtifactRepositories();
             }

File: maven-core/src/main/java/org/apache/maven/project/artifact/ProjectArtifact.java
Patch:
@@ -55,8 +55,8 @@ public List<Dependency> getDependencies()
 
     public List<Dependency> getManagedDependencies()
     {
-        DependencyManagement depMngt = project.getDependencyManagement();
-        return ( depMngt != null ) ? depMngt.getDependencies() : Collections.<Dependency>emptyList();
+        DependencyManagement depMgmt = project.getDependencyManagement();
+        return ( depMgmt != null ) ? depMgmt.getDependencies() : Collections.<Dependency>emptyList();
     }
 
     static class PomArtifactHandler

File: maven-core/src/main/java/org/apache/maven/repository/legacy/metadata/MetadataResolutionRequest.java
Patch:
@@ -102,7 +102,7 @@ public interface MetadataResolutionRequest
     boolean isResolveManagedVersions();
 
     /**
-     * Enables/disables resolution of the dependency manageemnt information.
+     * Enables/disables resolution of the dependency management information.
      *
      * @param resolveManagedVersions {@code true} if the dependency management information should be retrieved, {@code
      *            false} otherwise.

File: maven-core/src/test/java/org/apache/maven/lifecycle/LifecycleExecutorSubModulesTest.java
Patch:
@@ -83,7 +83,7 @@ protected String getProjectsDirectory()
         return "src/test/projects/lifecycle-executor";
     }
 
-    public void testCrweation()
+    public void testCreation()
         throws Exception
     {
         assertNotNull( defaultLifeCycles );

File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/ProjectDependencyGraphStub.java
Patch:
@@ -171,7 +171,7 @@ private List<Dependency> getDependencies()
 
     public List<MavenProject> getSortedProjects()
     {
-        return Arrays.asList( A, B, C, X, Y, Z ); // I'm not entirely sure about the order but this shold do...
+        return Arrays.asList( A, B, C, X, Y, Z ); // I'm not entirely sure about the order but this should do...
     }
 
     public List<MavenProject> getDownstreamProjects( MavenProject project, boolean transitive )

File: maven-core/src/test/java/org/apache/maven/plugin/PluginManagerTest.java
Patch:
@@ -119,7 +119,7 @@ public void testRemoteResourcesPlugin()
 
         This will not work until the RR plugin is released to get rid of the binding to the reporting exception which is a mistake.
 
-        This happpens after removing the reporting API from the core:
+        This happens after removing the reporting API from the core:
 
         java.lang.NoClassDefFoundError: org/apache/maven/reporting/MavenReportException
 

File: maven-core/src/test/java/org/apache/maven/plugin/internal/DefaultLegacySupportTest.java
Patch:
@@ -59,7 +59,7 @@ public void run() {
             {
                 latch.await();
             }
-            catch (InterruptedException ingore)
+            catch (InterruptedException ignore)
             {
                 // Test may fail if we get interrupted
             }

File: maven-core/src/test/java/org/apache/maven/project/DefaultMavenProjectBuilderTest.java
Patch:
@@ -86,7 +86,7 @@ protected MavenProject getProject( Artifact pom, boolean allowStub )
     }
 
     /**
-     * Check that we can build ok from the middle pom of a (parent,child,grandchild) heirarchy
+     * Check that we can build ok from the middle pom of a (parent,child,grandchild) hierarchy
      * @throws Exception
      */
     public void testBuildFromMiddlePom() throws Exception

File: maven-core/src/test/java/org/apache/maven/project/EmptyProjectBuildingHelper.java
Patch:
@@ -49,7 +49,7 @@ public List<ArtifactRepository> createArtifactRepositories( List<Repository> pom
         }
     }
 
-    public ProjectRealmCache.CacheRecord createProjectRealm( MavenProject proejct,
+    public ProjectRealmCache.CacheRecord createProjectRealm( MavenProject project,
                                                              Model model, ProjectBuildingRequest request )
     {
         return new ProjectRealmCache.CacheRecord( null, null );

File: maven-core/src/test/java/org/apache/maven/toolchain/merge/MavenToolchainMergerTest.java
Patch:
@@ -84,7 +84,7 @@ public void testMergeJdkExtra()
             PersistedToolchains jdksExtra = reader.read( jdksExtraIS );
             assertEquals( 2, jdks.getToolchains().size() );
 
-            // switch dominant with reccessive
+            // switch dominant with recessive
             merger.merge( jdksExtra, jdks, TrackableBase.USER_LEVEL );
             assertEquals( 4, jdksExtra.getToolchains().size() );
             assertEquals( 2, jdks.getToolchains().size() );
@@ -119,7 +119,7 @@ public void testMergeJdkExtend()
             PersistedToolchains jdksExtend = reader.read( jdksExtendIS );
             assertEquals( 2, jdks.getToolchains().size() );
 
-            // switch dominant with reccessive
+            // switch dominant with recessive
             merger.merge( jdksExtend, jdks, TrackableBase.USER_LEVEL );
             assertEquals( 2, jdksExtend.getToolchains().size() );
             Xpp3Dom config0 = (Xpp3Dom) jdksExtend.getToolchains().get( 0 ).getConfiguration();

File: maven-core/src/test/projects/lifecycle-executor/project-with-additional-lifecycle-elements/src/test/java/org/apache/maven/lifecycle/test/AppTest.java
Patch:
@@ -29,7 +29,7 @@ public static Test suite()
     }
 
     /**
-     * Rigourous Test :-)
+     * Rigorous Test :-)
      */
     public void testApp()
     {

File: maven-embedder/src/examples/simple-project/src/test/java/org/apache/maven/embedder/AppTest.java
Patch:
@@ -44,7 +44,7 @@ public static Test suite()
     }
 
     /**
-     * Rigourous Test :-)
+     * Rigorous Test :-)
      */
     public void testApp()
     {

File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -1530,7 +1530,7 @@ else if ( commandLine.hasOption( CLIManager.ALSO_MAKE ) && commandLine.hasOption
         }
 
         //
-        // Allow the builder to be overriden by the user if requested. The builders are now pluggable.
+        // Allow the builder to be overridden by the user if requested. The builders are now pluggable.
         //
         if ( commandLine.hasOption( CLIManager.BUILDER ) )
         {

File: maven-embedder/src/test/embedder-test-project/src/test/java/org/apache/maven/AppTest.java
Patch:
@@ -29,7 +29,7 @@ public static Test suite()
     }
 
     /**
-     * Rigourous Test :-)
+     * Rigorous Test :-)
      */
     public void testApp()
     {

File: maven-embedder/src/test/error-reporting-projects/err-resolving-project-dep/project/src/test/java/org/apache/maven/test/error/mojoFailure/AppTest.java
Patch:
@@ -29,7 +29,7 @@ public static Test suite()
     }
 
     /**
-     * Rigourous Test :-)
+     * Rigorous Test :-)
      */
     public void testApp()
     {

File: maven-embedder/src/test/error-reporting-projects/missing-module-pom/child1/src/test/java/org/test/AppTest.java
Patch:
@@ -29,7 +29,7 @@ public static Test suite()
     }
 
     /**
-     * Rigourous Test :-)
+     * Rigorous Test :-)
      */
     public void testApp()
     {

File: maven-embedder/src/test/error-reporting-projects/mojo-lookup-err/plugin/src/main/java/org/plugin/TestPlugin.java
Patch:
@@ -19,7 +19,7 @@ public class TestPlugin
     private Log log;
 
     /**
-     * @component role-hint="nonexistant"
+     * @component role-hint="nonexistent"
      */
     private MavenProject project;
 

File: maven-embedder/src/test/error-reporting-projects/project-dep-missing/src/test/java/org/apache/maven/test/error/mojoFailure/AppTest.java
Patch:
@@ -29,7 +29,7 @@ public static Test suite()
     }
 
     /**
-     * Rigourous Test :-)
+     * Rigorous Test :-)
      */
     public void testApp()
     {

File: maven-embedder/src/test/error-reporting-projects/project-mojo-failure/src/test/java/org/apache/maven/test/error/mojoFailure/AppTest.java
Patch:
@@ -29,7 +29,7 @@ public static Test suite()
     }
 
     /**
-     * Rigourous Test :-)
+     * Rigorous Test :-)
      */
     public void testApp()
     {

File: maven-embedder/src/test/projects/isolated-project-getting-parent-pom/project/src/test/java/org/codehaus/m2eclipse/AppTest.java
Patch:
@@ -29,7 +29,7 @@ public static Test suite()
     }
 
     /**
-     * Rigourous Test :-)
+     * Rigorous Test :-)
      */
     public void testApp()
     {

File: maven-model-builder/src/main/java/org/apache/maven/model/building/ModelBuildingListener.java
Patch:
@@ -20,7 +20,7 @@
  */
 
 /**
- * Defines events that the model builder fires during construction of the effective model. When a listener encounteres
+ * Defines events that the model builder fires during construction of the effective model. When a listener encounters
  * errors while processing the event, it can report these problems via {@link ModelBuildingEvent#getProblems()}.
  * <em>Note:</em> To cope with future extensions to this interface, it is strongly recommended to extend
  * {@link AbstractModelBuildingListener} rather than to directly implement this interface.

File: maven-model-builder/src/main/java/org/apache/maven/model/building/ModelBuildingRequest.java
Patch:
@@ -124,7 +124,7 @@ public interface ModelBuildingRequest
 
     /**
      * Sets the level of validation to perform on processed models. For building of projects,
-     * {@link #VALIDATION_LEVEL_STRICT} should be used to ensure proper building. For the mere retrievel of dependencies
+     * {@link #VALIDATION_LEVEL_STRICT} should be used to ensure proper building. For the mere retrieval of dependencies
      * during artifact resolution, {@link #VALIDATION_LEVEL_MINIMAL} should be used to account for models of poor
      * quality. By default, models are validated in strict mode.
      *

File: maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java
Patch:
@@ -94,7 +94,7 @@ private String getChildPathAdjustment( Model child, Model parent, String childDi
             String childName = child.getArtifactId();
 
             /*
-             * This logic (using filesystem, against wanted independance from the user environment) exists only for the
+             * This logic (using filesystem, against wanted independence from the user environment) exists only for the
              * sake of backward-compat with 2.x (MNG-5000). In general, it is wrong to
              * base URL inheritance on the module directory names as this information is unavailable for POMs in the
              * repository. In other words, modules where artifactId != moduleDirName will see different effective URLs

File: maven-model-builder/src/test/java/org/apache/maven/model/inheritance/DefaultInheritanceAssemblerTest.java
Patch:
@@ -79,7 +79,7 @@ public void testPluginConfiguration()
 
     /**
      * Check most classical urls inheritance: directory structure where parent POM in parent directory
-     * and child directory == artifatId
+     * and child directory == artifactId
      * @throws Exception
      */
     public void testUrls()

File: maven-plugin-api/src/main/java/org/apache/maven/plugin/descriptor/MojoDescriptor.java
Patch:
@@ -513,15 +513,15 @@ public void setPluginDescriptor( PluginDescriptor pluginDescriptor )
     }
 
     /**
-     * @return <code>true</code> if the Mojo is herited, <code>false</code> otherwise.
+     * @return <code>true</code> if the Mojo is inherited, <code>false</code> otherwise.
      */
     public boolean isInheritedByDefault()
     {
         return inheritedByDefault;
     }
 
     /**
-     * @param inheritedByDefault <code>true</code> if the Mojo is herited, <code>false</code> otherwise.
+     * @param inheritedByDefault <code>true</code> if the Mojo is inherited, <code>false</code> otherwise.
      */
     public void setInheritedByDefault( boolean inheritedByDefault )
     {

File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java
Patch:
@@ -372,10 +372,10 @@ private Properties toProperties( Map<String, String> dominant, Map<String, Strin
     private Relocation getRelocation( Model model )
     {
         Relocation relocation = null;
-        DistributionManagement distMngt = model.getDistributionManagement();
-        if ( distMngt != null )
+        DistributionManagement distMgmt = model.getDistributionManagement();
+        if ( distMgmt != null )
         {
-            relocation = distMngt.getRelocation();
+            relocation = distMgmt.getRelocation();
         }
         return relocation;
     }

File: maven-resolver-provider/src/test/java/org/apache/maven/repository/internal/RepositorySystemTest.java
Patch:
@@ -195,7 +195,7 @@ public void testInstall()
     {
         //InstallResult install( RepositorySystemSession session, InstallRequest request )
         //                throws InstallationException;
-        // release, snapshot unique ou non unique, attachement
+        // release, snapshot unique ou non unique, attachment
     }
 
     public void testDeploy()

File: maven-compat/src/test/java/org/apache/maven/repository/legacy/DefaultWagonManagerTest.java
Patch:
@@ -138,7 +138,7 @@ public void testGetMissingJarForced() throws TransferFailedException, Unsupporte
 
         try
         {
-            wagonManager.getArtifact( artifact, repo, null, false );
+            wagonManager.getArtifact( artifact, repo, null, true );
 
             fail();
         }

File: maven-compat/src/main/java/org/apache/maven/artifact/UnknownRepositoryLayoutException.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * Exception which is meant to occur when a layout specified for a particular
- * repository doesn't have a corresponding {@link ArtifactRepositoryLayout}
+ * repository doesn't have a corresponding {@link org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout}
  * component in the current container.
  *
  * @author jdcasey

File: maven-compat/src/main/java/org/apache/maven/artifact/repository/DefaultArtifactRepositoryFactory.java
Patch:
@@ -81,7 +81,9 @@ public ArtifactRepository createArtifactRepository( String id, String url,
                                                         ArtifactRepositoryPolicy snapshots,
                                                         ArtifactRepositoryPolicy releases )
     {
-        return injectSession( factory.createArtifactRepository( id, url, repositoryLayout, snapshots, releases ), true );
+        return injectSession( factory.createArtifactRepository( id, url, repositoryLayout, snapshots, releases ),
+                              true );
+
     }
 
     public void setGlobalUpdatePolicy( String updatePolicy )

File: maven-compat/src/main/java/org/apache/maven/profiles/activation/ProfileActivator.java
Patch:
@@ -24,10 +24,12 @@
 @Deprecated
 public interface ProfileActivator
 {
-    final String ROLE = ProfileActivator.class.getName();
+
+    String ROLE = ProfileActivator.class.getName();
 
     boolean canDetermineActivation( Profile profile );
 
     boolean isActive( Profile profile )
         throws ProfileActivationException;
+
 }

File: maven-compat/src/main/java/org/apache/maven/repository/metadata/MetadataGraph.java
Patch:
@@ -104,7 +104,8 @@ public MetadataGraph( MetadataTreeNode tree )
      *
      * @param tree "dirty" tree root
      * @param versionedVertices true if graph nodes should be versioned (different versions -> different nodes)
-     * @param scopedVertices true if graph nodes should be versioned and scoped (different versions and/or scopes -> different nodes)
+     * @param scopedVertices true if graph nodes should be versioned and scoped
+     * (different versions and/or scopes -> different nodes)
      *
      */
     public MetadataGraph( MetadataTreeNode tree, boolean versionedVertices, boolean scopedVertices )

File: maven-compat/src/main/java/org/apache/maven/repository/metadata/MetadataGraphEdge.java
Patch:
@@ -88,7 +88,8 @@ public boolean equals( Object o )
             MetadataGraphEdge e = (MetadataGraphEdge) o;
 
             return objectsEqual( version, e.version )
-                && ArtifactScopeEnum.checkScope( scope ).getScope().equals( ArtifactScopeEnum.checkScope( e.scope ).getScope() )
+                && ArtifactScopeEnum.checkScope( scope ).getScope().
+                    equals( ArtifactScopeEnum.checkScope( e.scope ).getScope() )
                 && depth == e.depth;
         }
         return false;

File: maven-compat/src/main/java/org/apache/maven/repository/metadata/MetadataGraphTransformationException.java
Patch:
@@ -21,12 +21,12 @@
 
 /**
  * @author <a href="oleg@codehaus.org">Oleg Gusakov</a>
- *
  */
 public class MetadataGraphTransformationException
     extends Exception
 {
-	private static final long serialVersionUID = -4029897098314019152L;
+
+    private static final long serialVersionUID = -4029897098314019152L;
 
     public MetadataGraphTransformationException()
     {

File: maven-core/src/main/java/org/apache/maven/settings/DefaultMavenSettingsBuilder.java
Patch:
@@ -66,7 +66,7 @@ public Settings buildSettings( File userSettingsFile )
         throws IOException, XmlPullParserException
     {
         File globalSettingsFile =
-            getFile( "${maven.home}/conf/settings.xml", "maven.home",
+            getFile( "${maven.conf}/settings.xml", "maven.conf",
                      MavenSettingsBuilder.ALT_GLOBAL_SETTINGS_XML_LOCATION );
 
         SettingsBuildingRequest request = new DefaultSettingsBuildingRequest();

File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -142,7 +142,7 @@ public class MavenCli
     public static final File DEFAULT_USER_TOOLCHAINS_FILE = new File( userMavenConfigurationHome, "toolchains.xml" );
 
     public static final File DEFAULT_GLOBAL_TOOLCHAINS_FILE =
-        new File( System.getProperty( "maven.home", System.getProperty( "user.dir", "" ) ), "conf/toolchains.xml" );
+        new File( System.getProperty( "maven.conf" ), "toolchains.xml" );
 
     private static final String EXT_CLASS_PATH = "maven.ext.class.path";
 

File: maven-embedder/src/main/java/org/apache/maven/cli/configuration/SettingsXmlConfigurationProcessor.java
Patch:
@@ -59,8 +59,8 @@ public class SettingsXmlConfigurationProcessor
 
     public static final File DEFAULT_USER_SETTINGS_FILE = new File( USER_MAVEN_CONFIGURATION_HOME, "settings.xml" );
 
-    public static final File DEFAULT_GLOBAL_SETTINGS_FILE = new File( System.getProperty( "maven.home", System
-        .getProperty( "user.dir", "" ) ), "conf/settings.xml" );
+    public static final File DEFAULT_GLOBAL_SETTINGS_FILE =
+        new File( System.getProperty( "maven.conf" ), "settings.xml" );
 
     @Requirement
     private Logger logger;

File: maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java
Patch:
@@ -161,7 +161,7 @@ private String appendPath( String parentUrl, String childPath, String pathAdjust
 
         private void concatPath( StringBuilder url, String path )
         {
-            if ( path.length() > 0 )
+            if ( url.length() > 0 && path.length() > 0 )
             {
                 boolean initialUrlEndsWithSlash = url.charAt( url.length() - 1 ) == '/';
                 boolean pathStartsWithSlash = path.charAt( 0 ) ==  '/';

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/transform/SnapshotTransformation.java
Patch:
@@ -22,6 +22,7 @@
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 import java.util.Date;
+import java.util.GregorianCalendar;
 import java.util.TimeZone;
 
 import org.apache.maven.artifact.Artifact;
@@ -164,6 +165,7 @@ private int resolveLatestSnapshotBuildNumber( Artifact artifact, ArtifactReposit
     public static DateFormat getUtcDateFormatter()
     {
         DateFormat utcDateFormatter = new SimpleDateFormat( DEFAULT_SNAPSHOT_TIMESTAMP_FORMAT );
+        utcDateFormatter.setCalendar( new GregorianCalendar() );
         utcDateFormatter.setTimeZone( DEFAULT_SNAPSHOT_TIME_ZONE );
         return utcDateFormatter;
     }

File: maven-aether-provider/src/main/java/org/apache/maven/repository/internal/RemoteSnapshotMetadata.java
Patch:
@@ -24,6 +24,7 @@
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Date;
+import java.util.GregorianCalendar;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.TimeZone;
@@ -73,6 +74,7 @@ protected void merge( Metadata recessive )
         if ( metadata.getVersioning() == null )
         {
             DateFormat utcDateFormatter = new SimpleDateFormat( "yyyyMMdd.HHmmss" );
+            utcDateFormatter.setCalendar( new GregorianCalendar() );
             utcDateFormatter.setTimeZone( TimeZone.getTimeZone( "UTC" ) );
 
             snapshot = new Snapshot();

File: maven-compat/src/main/java/org/apache/maven/artifact/resolver/DebugResolutionListener.java
Patch:
@@ -114,9 +114,9 @@ public void restrictRange( Artifact artifact, Artifact replacement, VersionRange
 
     /**
      * The logic used here used to be a copy of the logic used in the DefaultArtifactCollector, and this method was
-     * called right before the actual version/artifactScope changes were done. However, a different set of conditionals (and
-     * more information) is needed to be able to determine when and if the version and/or artifactScope changes. See the two
-     * added methods, manageArtifactVersion and manageArtifactScope.
+     * called right before the actual version/artifactScope changes were done. However, a different set of conditionals
+     * (and more information) is needed to be able to determine when and if the version and/or artifactScope changes.
+     * See the two added methods, manageArtifactVersion and manageArtifactScope.
      */
     public void manageArtifact( Artifact artifact, Artifact replacement )
     {

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/DefaultLegacyArtifactCollector.java
Patch:
@@ -674,8 +674,8 @@ boolean checkScopeUpdate( ResolutionNode farthest, ResolutionNode nearest, List<
             fireEvent( ResolutionListener.UPDATE_SCOPE, listeners, nearest, farthestArtifact );
 
             // previously we cloned the artifact, but it is more effecient to just update the artifactScope
-            // if problems are later discovered that the original object needs its original artifactScope value, cloning
-            // may
+            // if problems are later discovered that the original object needs its original artifactScope value, 
+            // cloning may
             // again be appropriate
             nearestArtifact.setScope( farthestArtifact.getScope() );
         }

File: maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java
Patch:
@@ -84,7 +84,8 @@ private String getChildPathAdjustment( Model child, Model parent )
             String childName = child.getArtifactId();
 
             /*
-             * This logic (using filesystem) exists only for the sake of backward-compat with 2.x (MNG-5000). In general, it is wrong to
+             * This logic (using filesystem, against wanted independance from the user environment) exists only for the
+             * sake of backward-compat with 2.x (MNG-5000). In general, it is wrong to
              * base URL inheritance on the module directory names as this information is unavailable for POMs in the
              * repository. In other words, modules where artifactId != moduleDirName will see different effective URLs
              * depending on how the model was constructed (from filesystem or from repository).

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5840RelativePathReactorMatching.java
Patch:
@@ -12,7 +12,7 @@ public MavenITmng5840RelativePathReactorMatching()
         super( ALL_MAVEN_VERSIONS );
     }
     
-    public void testPkgTypeMojoConfiguration()
+    public void testRelativePathPointsToWrongVersion()
         throws Exception
     {
         File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-5840-relative-path-reactor-matching" );
@@ -27,5 +27,4 @@ public void testPkgTypeMojoConfiguration()
         verifier.verifyErrorFreeLog();
         verifier.resetStreams();
     }
-    
 }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5771CoreExtensionsTest.java
Patch:
@@ -50,7 +50,7 @@ public void testCoreExtensionNoDescriptor()
     }
     
     //
-    // https://jira.codehaus.org/browse/MNG-5795: Maven extensions can not be retrieved from authenticated repositories
+    // https://issues.apache.org/jira/browse/MNG-5795: Maven extensions can not be retrieved from authenticated repositories
     //
     public void testCoreExtensionRetrievedFromAMirrorWithBasicAuthentication()
         throws Exception

File: maven-artifact/src/test/java/org/apache/maven/artifact/versioning/ComparableVersionTest.java
Patch:
@@ -184,7 +184,7 @@ public void testVersionComparing()
     }
 
     /**
-     * Test <a href="https://jira.codehaus.org/browse/MNG-5568">MNG-5568</a> edge case
+     * Test <a href="https://issues.apache.org/jira/browse/MNG-5568">MNG-5568</a> edge case
      * which was showing transitive inconsistency: since A > B and B > C then we should have A > C
      * otherwise sorting a list of ComparableVersions() will in some cases throw runtime exception;
      * see Netbeans issues <a href="https://netbeans.org/bugzilla/show_bug.cgi?id=240845">240845</a> and

File: maven-compat/src/test/java/org/apache/maven/project/inheritance/t11/ProjectInheritanceTest.java
Patch:
@@ -28,7 +28,7 @@
  * Verifies scope of root project is preserved regardless of parent depenedency management.
  *
  * @author <a href="mailto:pschneider@gmail.com">Patrick Schneider</a>
- * @see <a href="http://jira.codehaus.org/browse/MNG-2919">MNG-2919</a>
+ * @see <a href="https://issues.apache.org/jira/browse/MNG-2919">MNG-2919</a>
  */
 public class ProjectInheritanceTest
     extends AbstractProjectInheritanceTestCase

File: maven-core/src/main/java/org/apache/maven/AbstractMavenLifecycleParticipant.java
Patch:
@@ -28,7 +28,7 @@
  * indicate at what lifecycle point it is being called.
  *
  * @see <a href="http://maven.apache.org/examples/maven-3-lifecycle-extensions.html">example</a>
- * @see <a href="http://jira.codehaus.org/browse/MNG-4224">MNG-4224</a>
+ * @see <a href="https://issues.apache.org/jira/browse/MNG-4224">MNG-4224</a>
  * @since 3.0-alpha-3
  */
 public abstract class AbstractMavenLifecycleParticipant

File: maven-core/src/main/java/org/apache/maven/classrealm/DefaultClassRealmManager.java
Patch:
@@ -64,7 +64,7 @@ public class DefaultClassRealmManager
 
     /**
      * During normal command line build, ClassWorld is loaded by jvm system classloader, which only includes
-     * plexus-classworlds jar and possibly javaagent classes, see http://jira.codehaus.org/browse/MNG-4747.
+     * plexus-classworlds jar and possibly javaagent classes, see https://issues.apache.org/jira/browse/MNG-4747.
      * <p>
      * Using ClassWorld to determine plugin/extensions realm parent classloaders gives m2e and integration test harness
      * flexibility to load multiple version of maven into dedicated classloaders without assuming state of jvm system

File: maven-core/src/main/java/org/apache/maven/properties/internal/SystemProperties.java
Patch:
@@ -29,7 +29,7 @@ public class SystemProperties
     /**
      * Thread-safe System.properties copy implementation.
      *
-     * @see http://jira.codehaus.org/browse/MNG-5670
+     * @see https://issues.apache.org/jira/browse/MNG-5670
      */
     public static void addSystemProperties( Properties props )
     {

File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -446,7 +446,7 @@ else if ( cliRequest.quiet )
             slf4jConfiguration.setRootLoggerLevel( Slf4jConfiguration.Level.ERROR );
         }
         // else fall back to default log level specified in conf
-        // see http://jira.codehaus.org/browse/MNG-2570
+        // see https://issues.apache.org/jira/browse/MNG-2570
 
         if ( cliRequest.commandLine.hasOption( CLIManager.LOG_FILE ) )
         {

File: maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/FileProfileActivator.java
Patch:
@@ -40,7 +40,7 @@
 /**
  * Determines profile activation based on the existence/absence of some file.
  * File name interpolation support is limited to <code>${basedir}</code> (since Maven 3,
- * see <a href="http://jira.codehaus.org/browse/MNG-2363">MNG-2363</a>),
+ * see <a href="https://issues.apache.org/jira/browse/MNG-2363">MNG-2363</a>),
  * System properties and request properties.
  * <code>${project.basedir}</code> is intentionally not supported as this form would suggest that other
  * <code>${project.*}</code> expressions can be used, which is however beyond the design.

File: maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/ProfileActivator.java
Patch:
@@ -46,7 +46,7 @@ public interface ProfileActivator
     /**
      * Determines whether specified activation method is present in configuration or not. It should help to have AND
      * between activation conditions
-     * Need for solving http://jira.codehaus.org/browse/MNG-4565
+     * Need for solving https://issues.apache.org/jira/browse/MNG-4565
      * @param profile The profile whose activation status should be determined, must not be {@code null}.
      * @param context The environmental context used to determine the activation status of the profile, must not be
      *            {@code null}.

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultBuildPluginManager.java
Patch:
@@ -189,7 +189,7 @@ public void executeMojo( MavenSession session, MojoExecution mojoExecution )
 
             ByteArrayOutputStream os = new ByteArrayOutputStream( 1024 );
             PrintStream ps = new PrintStream( os );
-            ps.println( "A type incompatibility occured while executing " + mojoDescriptor.getId() + ": "
+            ps.println( "A type incompatibility occurred while executing " + mojoDescriptor.getId() + ": "
                 + e.getMessage() );
             pluginRealm.display( ps );
 

File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -328,7 +328,7 @@ void initialize( CliRequest cliRequest )
             String basedirProperty = System.getProperty( MULTIMODULE_PROJECT_DIRECTORY );
             if ( basedirProperty == null )
             {
-                System.err.format( "-D%s system propery is not set."
+                System.err.format( "-D%s system property is not set."
                     + " Check $M2_HOME environment variable and mvn script match.", MULTIMODULE_PROJECT_DIRECTORY );
                 throw new ExitException( 1 );
             }

File: maven-core/src/main/java/org/apache/maven/project/MavenProject.java
Patch:
@@ -995,11 +995,13 @@ public void setCollectedProjects( List<MavenProject> collectedProjects )
      * @return {@link Set} &lt; {@link Artifact} >
      * @see #getArtifacts() to get all transitive dependencies
      */
+    @Deprecated
     public Set<Artifact> getDependencyArtifacts()
     {
         return dependencyArtifacts;
     }
 
+    @Deprecated
     public void setDependencyArtifacts( Set<Artifact> dependencyArtifacts )
     {
         this.dependencyArtifacts = dependencyArtifacts;

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5805PkgTypeMojoConfiguration.java
Patch:
@@ -10,7 +10,7 @@ public class MavenITmng5805PkgTypeMojoConfiguration
 
     public MavenITmng5805PkgTypeMojoConfiguration()
     {
-        super( "(3.3.2,)" );
+        super( "(3.3.3,)" );
     }
 
     public void testPkgTypeMojoConfiguration()
@@ -38,6 +38,7 @@ public void testPkgTypeMojoConfiguration()
         verifier = newVerifier( new File( testDir, "project" ).getAbsolutePath() );
         verifier.executeGoal( "validate" );
         verifier.verifyErrorFreeLog();
+        verifier.verifyTextInLog( "CLASS_NAME=org.apache.maven.its.mng5805.TestClass1" );
         verifier.resetStreams();
     }
 }

File: maven-core/src/main/java/org/apache/maven/lifecycle/mapping/DefaultLifecycleMapping.java
Patch:
@@ -32,7 +32,7 @@ public class DefaultLifecycleMapping
     private Map<String, Lifecycle> lifecycleMap;
 
     /** @deprecated use lifecycles instead */
-    private Map<String, String> phases;
+    private Map<String, LifecyclePhase> phases;
 
     /**
      * Populates the lifecycle map from the injected list of lifecycle mappings (if not already done).
@@ -61,7 +61,7 @@ private void initLifecycleMap()
 
                 for ( String lifecycleId : lifecycleIds )
                 {
-                    Map<String, String> phases = getPhases( lifecycleId );
+                    Map<String, LifecyclePhase> phases = getPhases( lifecycleId );
                     if ( phases != null )
                     {
                         Lifecycle lifecycle = new Lifecycle();
@@ -88,7 +88,7 @@ public List<String> getOptionalMojos( String lifecycle )
         return null;
     }
 
-    public Map<String, String> getPhases( String lifecycle )
+    public Map<String, LifecyclePhase> getPhases( String lifecycle )
     {
         initLifecycleMap();
 

File: maven-core/src/main/java/org/apache/maven/lifecycle/mapping/Lifecycle.java
Patch:
@@ -35,7 +35,7 @@ public class Lifecycle
     /**
      * Field phases
      */
-    private Map<String, String> phases;
+    private Map<String, LifecyclePhase> phases;
 
     /*
      * NOTE: This exists merely for backward-compat with legacy-style lifecycle definitions and allows configuration
@@ -55,7 +55,7 @@ public String getId()
     /**
      * Method getPhases
      */
-    public Map<String, String> getPhases()
+    public Map<String, LifecyclePhase> getPhases()
     {
         return this.phases;
     }
@@ -75,7 +75,7 @@ public void setId( String id )
      *
      * @param phases
      */
-    public void setPhases( Map<String, String> phases )
+    public void setPhases( Map<String, LifecyclePhase> phases )
     {
         this.phases = phases;
     } //-- void setPhases(java.util.List)

File: maven-core/src/main/java/org/apache/maven/lifecycle/mapping/LifecycleMapping.java
Patch:
@@ -34,6 +34,6 @@ public interface LifecycleMapping
     List<String> getOptionalMojos( String lifecycle );
 
     @Deprecated
-    Map<String, String> getPhases( String lifecycle );
+    Map<String, LifecyclePhase> getPhases( String lifecycle );
 
 }

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -106,6 +106,7 @@ public static Test suite()
         // -------------------------------------------------------------------------------------------------------------
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng5805PkgTypeMojoConfiguration.class );
         suite.addTestSuite( MavenITmng5783PluginDependencyFiltering.class );
         suite.addTestSuite( MavenITmng5774ConfigurationProcessorsTest.class );
         suite.addTestSuite( MavenITmng5771CoreExtensionsTest.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5783PluginDependencyFiltering.java
Patch:
@@ -18,7 +18,7 @@ public void testSLF4j()
         throws Exception
     {
         File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-5783-plugin-dependency-filtering" );
-        Verifier verifier = newVerifier( new File( testDir, "plugin" ).getAbsolutePath() );
+        Verifier verifier = newVerifier( new File( testDir, "plugin" ).getAbsolutePath(), "remote" );
         verifier.executeGoal( "install" );
         verifier.verifyErrorFreeLog();
         verifier.resetStreams();

File: maven-core/src/main/java/org/apache/maven/DefaultArtifactFilterManager.java
Patch:
@@ -49,7 +49,8 @@ public class DefaultArtifactFilterManager
     private final Set<String> coreArtifacts;
 
     @Inject
-    public DefaultArtifactFilterManager( List<ArtifactFilterManagerDelegate> delegates, CoreExportsProvider coreExports )
+    public DefaultArtifactFilterManager( List<ArtifactFilterManagerDelegate> delegates,
+                                         CoreExportsProvider coreExports )
     {
         this.delegates = delegates;
         this.coreArtifacts = coreExports.get().getExportedArtifacts();

File: maven-core/src/main/java/org/apache/maven/DefaultProjectDependenciesResolver.java
Patch:
@@ -127,7 +127,8 @@ private Set<Artifact> resolveImpl( Collection<? extends MavenProject> projects,
 
         if ( ! exclusions.isEmpty() )
         {
-            filter = new AndArtifactFilter( Arrays.asList( new ArtifactFilter[]{ new ExcludesArtifactFilter( exclusions ), scopeFilter } ) );
+            filter = new AndArtifactFilter( Arrays.asList( new ArtifactFilter[]{ 
+                new ExcludesArtifactFilter( exclusions ), scopeFilter } ) );
         }
         else
         {

File: maven-core/src/main/java/org/apache/maven/SessionScoped.java
Patch:
@@ -28,7 +28,8 @@
 import com.google.inject.ScopeAnnotation;
 
 /**
- * Indicates that annotated component should be instantiated before session starts and discarded after session execution completes.
+ * Indicates that annotated component should be instantiated before session starts and discarded after session execution
+ * completes.
  *
  * @author Jason van Zyl
  * @since 3.2.0

File: maven-core/src/main/java/org/apache/maven/classrealm/DefaultClassRealmManager.java
Patch:
@@ -258,7 +258,8 @@ public ClassRealm createPluginRealm( Plugin plugin, ClassLoader parent, List<Str
             parent = PARENT_CLASSLOADER;
         }
 
-        return createRealm( getKey( plugin, false ), RealmType.Plugin, parent, parentImports, foreignImports, artifacts );
+        return createRealm( getKey( plugin, false ), RealmType.Plugin, parent, parentImports, foreignImports,
+                            artifacts );
     }
 
     private static String getKey( Plugin plugin, boolean extension )

File: maven-core/src/main/java/org/apache/maven/exception/DefaultExceptionHandler.java
Patch:
@@ -80,7 +80,8 @@
 
  */
 
-//PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, CycleDetectedInPluginGraphException;
+// PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException,
+// CycleDetectedInPluginGraphException;
 
 @Component( role = ExceptionHandler.class )
 public class DefaultExceptionHandler

File: maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java
Patch:
@@ -186,7 +186,8 @@ public static MavenExecutionRequest copy( MavenExecutionRequest original )
         copy.setGlobalSettingsFile( original.getGlobalSettingsFile() );
         copy.setUserToolchainsFile( original.getUserToolchainsFile() );
         copy.setGlobalToolchainsFile( original.getGlobalToolchainsFile() );
-        copy.setBaseDirectory( ( original.getBaseDirectory() != null ) ? new File( original.getBaseDirectory() ) : null );
+        copy.setBaseDirectory( ( original.getBaseDirectory() != null ) ? new File( original.getBaseDirectory() )
+                                                                       : null );
         copy.setGoals( original.getGoals() );
         copy.setRecursive( original.isRecursive() );
         copy.setPom( original.getPom() );

File: maven-core/src/main/java/org/apache/maven/execution/MavenSession.java
Patch:
@@ -302,8 +302,8 @@ public void setAllProjects( List<MavenProject> allProjects )
     private final Settings settings;
     
     @Deprecated
-    public MavenSession( PlexusContainer container, RepositorySystemSession repositorySession, MavenExecutionRequest request,
-                         MavenExecutionResult result )
+    public MavenSession( PlexusContainer container, RepositorySystemSession repositorySession,
+                         MavenExecutionRequest request, MavenExecutionResult result )
     {
         this.container = container;
         this.request = request;

File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java
Patch:
@@ -170,7 +170,8 @@ public void calculateForkedExecutions( MojoExecution mojoExecution, MavenSession
     public List<MavenProject> executeForkedExecutions( MojoExecution mojoExecution, MavenSession session )
         throws LifecycleExecutionException
     {
-        return mojoExecutor.executeForkedExecutions( mojoExecution, session, new ProjectIndex( session.getProjects() ) );
+        return mojoExecutor.executeForkedExecutions( mojoExecution, session,
+                                                     new ProjectIndex( session.getProjects() ) );
     }
 
 }

File: maven-core/src/main/java/org/apache/maven/lifecycle/MojoExecutionConfigurator.java
Patch:
@@ -23,8 +23,8 @@
 import org.apache.maven.project.MavenProject;
 
 /**
- * A MojoExecutionConfigurator is responsible for creating the configuration for  Mojo  based on configuration for a Mojo in the MavenProject
- * and the default configuration for the Mojo from the containing plugin's plugin.xml descriptor.
+ * A MojoExecutionConfigurator is responsible for creating the configuration for Mojo based on configuration for a Mojo
+ * in the MavenProject and the default configuration for the Mojo from the containing plugin's plugin.xml descriptor.
  * 
  * @provisional
  * @author Jason van Zyl

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleModuleBuilder.java
Patch:
@@ -120,7 +120,8 @@ public void buildProject( MavenSession session, MavenSession rootSession, Reacto
             projectExecutionListener.afterProjectExecutionSuccess( new ProjectExecutionEvent( session, currentProject,
                                                                                               mojoExecutions ) );
 
-            reactorContext.getResult().addBuildSummary( new BuildSuccess( currentProject, buildEndTime - buildStartTime ) );
+            reactorContext.getResult().addBuildSummary( new BuildSuccess( currentProject,
+                                                                          buildEndTime - buildStartTime ) );
 
             eventCatapult.fire( ExecutionEvent.Type.ProjectSucceeded, session, null );
         }

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/BuilderCommon.java
Patch:
@@ -188,8 +188,8 @@ public static void attachToThread( MavenProject currentProject )
         }
     }
 
-    // Todo: I'm really wondering where this method belongs; smells like it should be on MavenProject, but for some reason
-    // it isn't ? This localization is kind-of a code smell.
+    // Todo: I'm really wondering where this method belongs; smells like it should be on MavenProject, but for some
+    // reason it isn't ? This localization is kind-of a code smell.
 
     public static String getKey( MavenProject project )
     {

File: maven-core/src/main/java/org/apache/maven/plugin/MavenPluginManager.java
Patch:
@@ -50,7 +50,8 @@ public interface MavenPluginManager
      * @param session The repository session to use for resolving the plugin's main artifact, must not be {@code null}.
      * @return The plugin descriptor, never {@code null}.
      */
-    PluginDescriptor getPluginDescriptor( Plugin plugin, List<RemoteRepository> repositories, RepositorySystemSession session )
+    PluginDescriptor getPluginDescriptor( Plugin plugin, List<RemoteRepository> repositories,
+                                          RepositorySystemSession session )
         throws PluginResolutionException, PluginDescriptorParsingException, InvalidPluginDescriptorException;
 
     /**

File: maven-core/src/main/java/org/apache/maven/plugin/PluginContainerException.java
Patch:
@@ -42,7 +42,8 @@ public class PluginContainerException
 
     private ClassRealm pluginRealm;
 
-    public PluginContainerException( MojoDescriptor mojoDescriptor, ClassRealm pluginRealm, String message, Throwable e )
+    public PluginContainerException( MojoDescriptor mojoDescriptor, ClassRealm pluginRealm, String message,
+                                     Throwable e )
     {
         super( mojoDescriptor, message, e );
 

File: maven-core/src/main/java/org/apache/maven/plugin/PluginExecutionException.java
Patch:
@@ -35,7 +35,8 @@ public PluginExecutionException( MojoExecution mojoExecution, MavenProject proje
         this.mojoExecution = mojoExecution;
     }
 
-    public PluginExecutionException( MojoExecution mojoExecution, MavenProject project, String message, Throwable cause )
+    public PluginExecutionException( MojoExecution mojoExecution, MavenProject project, String message,
+                                     Throwable cause )
     {
         super( mojoExecution.getMojoDescriptor(), project, message, cause );
         this.mojoExecution = mojoExecution;

File: maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultLegacySupport.java
Patch:
@@ -38,7 +38,8 @@ public class DefaultLegacySupport
     implements LegacySupport
 {
 
-    private static final ThreadLocal<AtomicReference<MavenSession>> SESSION = new InheritableThreadLocal<AtomicReference<MavenSession>>();
+    private static final ThreadLocal<AtomicReference<MavenSession>> SESSION =
+        new InheritableThreadLocal<AtomicReference<MavenSession>>();
 
     public void setSession( MavenSession session )
     {

File: maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java
Patch:
@@ -878,7 +878,8 @@ public ExtensionRealmCache.CacheRecord setupExtensionsRealm( MavenProject projec
         extensionRecord = extensionRealmCache.get( extensionKey );
         if ( extensionRecord == null )
         {
-            ClassRealm extensionRealm = classRealmManager.createExtensionRealm( plugin, toAetherArtifacts( artifacts ) );
+            ClassRealm extensionRealm = classRealmManager.createExtensionRealm( plugin,
+                                                                                toAetherArtifacts( artifacts ) );
 
             // TODO figure out how to use the same PluginDescriptor when running mojos
 

File: maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java
Patch:
@@ -154,7 +154,8 @@ public DependencyNode resolve( Plugin plugin, Artifact pluginArtifact, Dependenc
         DependencyFilter resolutionFilter =
             new ExclusionsDependencyFilter( artifactFilterManager.getCoreArtifactExcludes() );
         resolutionFilter = AndDependencyFilter.newInstance( resolutionFilter, dependencyFilter );
-        return resolveInternal( plugin, pluginArtifact, resolutionFilter, new PlexusUtilsInjector(), repositories, session );
+        return resolveInternal( plugin, pluginArtifact, resolutionFilter, new PlexusUtilsInjector(), repositories,
+                                session );
     }
 
     private DependencyNode resolveInternal( Plugin plugin, Artifact pluginArtifact, DependencyFilter dependencyFilter,

File: maven-core/src/main/java/org/apache/maven/plugin/version/DefaultPluginVersionRequest.java
Patch:
@@ -84,7 +84,8 @@ public DefaultPluginVersionRequest( Plugin plugin, MavenSession session )
      * @param session The repository session to use, must not be {@code null}.
      * @param repositories The plugin repositories to query, may be {@code null}.
      */
-    public DefaultPluginVersionRequest( Plugin plugin, RepositorySystemSession session, List<RemoteRepository> repositories )
+    public DefaultPluginVersionRequest( Plugin plugin, RepositorySystemSession session,
+                                        List<RemoteRepository> repositories )
     {
         setGroupId( plugin.getGroupId() );
         setArtifactId( plugin.getArtifactId() );

File: maven-core/src/main/java/org/apache/maven/project/DefaultMavenProjectHelper.java
Patch:
@@ -40,7 +40,8 @@ public class DefaultMavenProjectHelper
     @Requirement
     private ArtifactHandlerManager artifactHandlerManager;
 
-    public void attachArtifact( MavenProject project, String artifactType, String artifactClassifier, File artifactFile )
+    public void attachArtifact( MavenProject project, String artifactType, String artifactClassifier,
+                                File artifactFile )
     {
         String type = artifactType;
 

File: maven-core/src/main/java/org/apache/maven/project/MavenProjectHelper.java
Patch:
@@ -70,6 +70,7 @@ public interface MavenProjectHelper
      * @param includes include patterns.
      * @param excludes exclude patterns.
      */
-    void addTestResource( MavenProject project, String resourceDirectory, List<String> includes, List<String> excludes );
+    void addTestResource( MavenProject project, String resourceDirectory, List<String> includes,
+                          List<String> excludes );
 
 }

File: maven-core/src/main/java/org/apache/maven/project/ProjectModelResolver.java
Patch:
@@ -84,7 +84,8 @@ public class ProjectModelResolver
 
     public ProjectModelResolver( RepositorySystemSession session, RequestTrace trace, RepositorySystem resolver,
                                  RemoteRepositoryManager remoteRepositoryManager, List<RemoteRepository> repositories,
-                                 ProjectBuildingRequest.RepositoryMerging repositoryMerging, ReactorModelPool modelPool )
+                                 ProjectBuildingRequest.RepositoryMerging repositoryMerging,
+                                 ReactorModelPool modelPool )
     {
         this.session = session;
         this.trace = trace;

File: maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java
Patch:
@@ -445,7 +445,7 @@ public List<ArtifactVersion> retrieveAvailableVersions( MetadataResolutionReques
 
     public List<ArtifactVersion> retrieveAvailableVersionsFromDeploymentRepository( Artifact artifact,
                                                                                     ArtifactRepository localRepository,
-                                                                                    ArtifactRepository deploymentRepository )
+                                                                              ArtifactRepository deploymentRepository )
         throws ArtifactMetadataRetrievalException
     {
         RepositoryMetadata metadata = new ArtifactRepositoryMetadata( artifact );

File: maven-core/src/main/java/org/apache/maven/repository/RepositorySystem.java
Patch:
@@ -80,7 +80,8 @@ ArtifactRepository createLocalRepository( File localRepository )
         throws InvalidRepositoryException;
 
     ArtifactRepository createArtifactRepository( String id, String url, ArtifactRepositoryLayout repositoryLayout,
-                                                 ArtifactRepositoryPolicy snapshots, ArtifactRepositoryPolicy releases );
+                                                 ArtifactRepositoryPolicy snapshots,
+                                                 ArtifactRepositoryPolicy releases );
 
     /**
      * Calculates the effective repositories for the given input repositories which are assumed to be already mirrored

File: maven-core/src/main/java/org/apache/maven/rtinfo/internal/DefaultRuntimeInformation.java
Patch:
@@ -82,7 +82,8 @@ public String getMavenVersion()
             }
             else
             {
-                logger.warn( "Could not locate " + resource + " on classpath, Maven runtime information not available" );
+                logger.warn( "Could not locate " + resource
+                             + " on classpath, Maven runtime information not available" );
             }
 
             String version = props.getProperty( "version", "" ).trim();

File: maven-core/src/main/java/org/apache/maven/toolchain/DefaultToolchainManager.java
Patch:
@@ -74,7 +74,8 @@ public List<Toolchain> getToolchains( MavenSession session, String type, Map<Str
         return selectToolchains( models, type, requirements );
     }
 
-    private List<Toolchain> selectToolchains( List<ToolchainModel> models, String type, Map<String, String> requirements )
+    private List<Toolchain> selectToolchains( List<ToolchainModel> models, String type,
+                                              Map<String, String> requirements )
     {
         List<Toolchain> toolchains = new ArrayList<Toolchain>();
 

File: maven-core/src/main/java/org/apache/maven/toolchain/building/DefaultToolchainsBuilder.java
Patch:
@@ -59,7 +59,7 @@ public ToolchainsBuildingResult build( ToolchainsBuildingRequest request )
     {
         ProblemCollector problems = ProblemCollectorFactory.newInstance( null );
         
-        PersistedToolchains globalToolchains = readToolchains( request.getGlobalToolchainsSource() , request, problems );
+        PersistedToolchains globalToolchains = readToolchains( request.getGlobalToolchainsSource(), request, problems );
 
         PersistedToolchains userToolchains = readToolchains( request.getUserToolchainsSource(), request, problems );
 

File: maven-core/src/main/java/org/apache/maven/toolchain/io/ToolchainsReader.java
Patch:
@@ -55,8 +55,8 @@ PersistedToolchains read( File input, Map<String, ?> options )
         throws IOException, ToolchainsParseException;
 
     /**
-     * Reads the toolchains from the specified character reader. The reader will be automatically closed before the method
-     * returns.
+     * Reads the toolchains from the specified character reader. The reader will be automatically closed before the
+     * method returns.
      *
      * @param input The reader to deserialize the toolchains from, must not be {@code null}.
      * @param options The options to use for deserialization, may be {@code null} to use the default values.

File: its/core-it-support/core-it-component/src/main/java/org/apache/maven/coreit/component/DefaultStatefulSingleton.java
Patch:
@@ -24,6 +24,9 @@
 import java.io.IOException;
 import java.util.Properties;
 
+/**
+ * 
+ */
 public class DefaultStatefulSingleton
     implements StatefulSingleton
 {

File: its/core-it-support/core-it-component/src/main/java/org/apache/maven/coreit/component/StatefulSingleton.java
Patch:
@@ -22,6 +22,9 @@
 import java.io.File;
 import java.io.IOException;
 
+/**
+ * 
+ */
 public interface StatefulSingleton
 {
 

File: its/core-it-support/core-it-plugins/maven-it-plugin-active-collection/src/main/java/org/apache/maven/plugin/coreit/CheckThreadSafetyMojo.java
Patch:
@@ -21,7 +21,6 @@
 
 import org.apache.maven.plugin.AbstractMojo;
 import org.apache.maven.plugin.MojoExecutionException;
-import org.apache.maven.plugin.MojoFailureException;
 
 import java.io.File;
 import java.io.FileOutputStream;
@@ -111,7 +110,7 @@ public void run()
                     {
                         // wait for start
                     }
-                    for ( int j = 0; j < 10000; j++ )
+                    for ( int j = 0; j < 10 * 1000; j++ )
                     {
                         try
                         {

File: its/core-it-support/core-it-plugins/maven-it-plugin-configuration/src/main/java/org/apache/maven/plugin/coreit/CliConfigMojo.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.io.File;
 import java.util.List;
-import java.util.Map;
 import java.util.Properties;
 import java.util.Set;
 

File: its/core-it-support/core-it-plugins/maven-it-plugin-context-passing/src/main/java/org/apache/maven/plugin/coreit/CatchMojo.java
Patch:
@@ -89,6 +89,7 @@ public void execute()
                 }
                 catch ( IOException e )
                 {
+                    // ignore
                 }
             }
         }

File: its/core-it-support/core-it-plugins/maven-it-plugin-dependency-collection/src/main/java/org/apache/maven/plugin/coreit/AggregateTestMojo.java
Patch:
@@ -76,7 +76,8 @@ public void execute()
 
                 writeArtifacts( filter( projectArtifacts, project ), project.getArtifacts() );
 
-                // NOTE: We can't make any assumptions about the class path but as a minimum it must not cause an exception
+                // NOTE: We can't make any assumptions about the class path but as a minimum it must not cause an
+                // exception
                 project.getTestClasspathElements();
             }
         }

File: its/core-it-support/core-it-plugins/maven-it-plugin-dependency-resolution/src/main/java/org/apache/maven/plugin/coreit/AbstractDependencyMojo.java
Patch:
@@ -295,6 +295,7 @@ private String calcChecksum( File jarFile )
 
         for ( int i = 0; i < digest.length; i++ )
         {
+            @SuppressWarnings( "checkstyle:magicnumber" )
             int b = digest[i] & 0xFF;
 
             if ( b < 0x10 )

File: its/core-it-support/core-it-plugins/maven-it-plugin-dependency-resolution/src/main/java/org/apache/maven/plugin/coreit/AggregateTestMojo.java
Patch:
@@ -94,7 +94,8 @@ public void execute()
 
                 writeArtifacts( filter( projectArtifacts, project ), project.getArtifacts() );
                 writeClassPath( filter( testClassPath, project ), project.getTestClasspathElements() );
-                writeClassPathChecksums( filter( testClassPathChecksums, project ), project.getTestClasspathElements() );
+                writeClassPathChecksums( filter( testClassPathChecksums, project ),
+                                         project.getTestClasspathElements() );
             }
         }
         catch ( DependencyResolutionRequiredException e )

File: its/core-it-support/core-it-plugins/maven-it-plugin-dependency-resolution/src/main/java/org/apache/maven/plugin/coreit/ResolveOneDependencyMojo.java
Patch:
@@ -143,7 +143,8 @@ public void execute()
         }
 
         Set depArtifacts = new HashSet();
-        Artifact artifact = artifactFactory.createArtifactWithClassifier( groupId, artifactId, version, type, classifier );
+        Artifact artifact =
+            artifactFactory.createArtifactWithClassifier( groupId, artifactId, version, type, classifier );
         depArtifacts.add( artifact );
 
         ScopeArtifactFilter scopeFilter = new ScopeArtifactFilter( scope );
@@ -193,7 +194,7 @@ public void execute()
                     return;
                 }
             }
-            getLog().info(" RESOLVE-ONE-DEPENDENCY " + artifact.toString() + " $ NOT-RESOLVED" );
+            getLog().info( " RESOLVE-ONE-DEPENDENCY " + artifact.toString() + " $ NOT-RESOLVED" );
         }
     }
 }

File: its/core-it-support/core-it-plugins/maven-it-plugin-error/src/main/java/org/apache/maven/plugin/coreit/MojoFailureExceptionMojo.java
Patch:
@@ -31,7 +31,8 @@ public class MojoFailureExceptionMojo
 {
     /**
      * Message used in {@link MojoFailureException#MojoFailureException(String)}, unless longMessage
-     * is supplied; then, this becomes the short message in {@link MojoFailureException#MojoFailureException(Object, String, String)}.
+     * is supplied; then, this becomes the short message in
+     * {@link MojoFailureException#MojoFailureException(Object, String, String)}.
      * 
      * @parameter property="error.message" default-value="Planned MojoExecutionException."
      * @required

File: its/core-it-support/core-it-plugins/maven-it-plugin-no-project/src/main/java/org/apache/maven/plugin/coreit/NoProjectMojo.java
Patch:
@@ -25,7 +25,6 @@
 import java.io.File;
 import java.io.FileWriter;
 import java.io.IOException;
-import java.util.Map;
 
 /**
  * Mojo which touches a file without requiring a project.

File: its/core-it-support/core-it-plugins/maven-it-plugin-plexus-component-api/src/main/java/org/apache/maven/its/plugins/VelocityMojo.java
Patch:
@@ -45,7 +45,8 @@ public void execute()
         try
         {
             // velocityComponent engine should not be null
-            // this is the real test to check that we got the right Initializable interface in both Plexus and the component
+            // this is the real test to check that we got the right Initializable interface in both Plexus and the
+            // component
             /*
              * NOTE: There's a bug in the plexus-velocity:1.1.7 component that fails to transform "/template.vm" into
              * a proper resource name before searching the context class loader so we avoid the leading slash here.

File: its/core-it-support/core-it-plugins/maven-it-plugin-plexus-lifecycle/src/main/java/org/apache/maven/its/plugins/plexuslifecycle/DefaultFakeComponent.java
Patch:
@@ -1,4 +1,5 @@
 package org.apache.maven.its.plugins.plexuslifecycle;
+
 /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file

File: its/core-it-support/core-it-plugins/maven-it-plugin-plexus-lifecycle/src/main/java/org/apache/maven/its/plugins/plexuslifecycle/FakeComponent.java
Patch:
@@ -1,4 +1,5 @@
 package org.apache.maven.its.plugins.plexuslifecycle;
+
 /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file

File: its/core-it-support/core-it-plugins/maven-it-plugin-plexus-lifecycle/src/main/java/org/apache/maven/its/plugins/plexuslifecycle/MojoWithPlexusLifecycle.java
Patch:
@@ -1,4 +1,5 @@
 package org.apache.maven.its.plugins.plexuslifecycle;
+
 /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file

File: its/core-it-support/core-it-plugins/maven-it-plugin-plexus-utils-new/src/main/java/org/codehaus/plexus/util/xml/Xpp3Dom.java
Patch:
@@ -23,6 +23,9 @@
 
 import org.codehaus.plexus.util.xml.pull.XmlSerializer;
 
+/**
+ * 
+ */
 public class Xpp3Dom
 {
 

File: its/core-it-support/core-it-plugins/maven-it-plugin-plexus-utils-new/src/main/java/org/codehaus/plexus/util/xml/pull/MXSerializer.java
Patch:
@@ -23,6 +23,9 @@
 import java.io.OutputStream;
 import java.io.Writer;
 
+/**
+ * 
+ */
 public class MXSerializer
     implements XmlSerializer
 {

File: its/core-it-support/core-it-plugins/maven-it-plugin-plexus-utils-new/src/main/java/org/codehaus/plexus/util/xml/pull/XmlSerializer.java
Patch:
@@ -23,6 +23,9 @@
 import java.io.OutputStream;
 import java.io.Writer;
 
+/**
+ * 
+ */
 public interface XmlSerializer
 {
 

File: its/core-it-support/core-it-plugins/maven-it-plugin-project-interpolation/src/main/java/org/apache/maven/plugin/coreit/PluginParamInterpolationMojo.java
Patch:
@@ -47,7 +47,9 @@ public void execute()
         
         if ( !myDirectory.equals( value ) )
         {
-            throw new MojoExecutionException( "Directory supplied: " + myDirectory + " is not the same as the project build directory: " + project.getBuild().getDirectory() + " + '/foo'" );
+            throw new MojoExecutionException( "Directory supplied: " + myDirectory
+                + " is not the same as the project build directory: " + project.getBuild().getDirectory()
+                + " + '/foo'" );
         }
     }
 

File: its/core-it-support/core-it-plugins/maven-it-plugin-project-interpolation/src/main/java/org/apache/maven/plugin/coreit/PropertyInterpolationMojo.java
Patch:
@@ -45,7 +45,8 @@ public void execute()
         
         if ( !value.equals( targetValue ) )
         {
-            throw new MojoExecutionException( "Property value of 'myDirectory': " + value + " should equal the 'foo' subpath of the project build directory: " + targetValue );
+            throw new MojoExecutionException( "Property value of 'myDirectory': " + value
+                + " should equal the 'foo' subpath of the project build directory: " + targetValue );
         }
     }
     

File: its/core-it-support/core-it-plugins/maven-it-plugin-toolchain/src/main/java/org/apache/maven/plugin/coreit/CoreItMojo.java
Patch:
@@ -101,7 +101,8 @@ public void execute()
             }
             else
             {
-                getLog().warn( "[MAVEN-CORE-IT-LOG] Toolchain #" + selected + " can't be selected, found only " + tcs.length );
+                getLog().warn( "[MAVEN-CORE-IT-LOG] Toolchain #" + selected + " can't be selected, found only "
+                                   + tcs.length );
             }
         }
 

File: its/core-it-support/core-it-plugins/maven-it-plugin-touch/src/main/java/org/apache/maven/plugin/coreit/CoreItTouchMojo.java
Patch:
@@ -98,7 +98,8 @@ public void execute()
     {
         if ( fail )
         {
-            throw new MojoExecutionException( "Failing per \'fail\' parameter (specified in pom or system properties)" );
+            throw new MojoExecutionException( "Failing per \'fail\' parameter"
+                + " (specified in pom or system properties)" );
         }
 
         File outDir = new File( outputDirectory );

File: its/core-it-support/core-it-plugins/maven-it-plugin-uses-properties/src/main/java/org/apache/maven/plugin/coreit/UsesPropertiesMojo.java
Patch:
@@ -52,9 +52,10 @@ public void execute()
             file.getParentFile().mkdirs();
             FileOutputStream fos = new FileOutputStream( file );
 
-            properties.store( fos, "# Properties generated by the execution of a mojo that uses interpolated POM values for configuration." );
+            properties.store( fos, "# Properties generated by the execution of a mojo that uses"
+                + " interpolated POM values for configuration." );
         }
-        catch( Exception e )
+        catch ( Exception e )
         {
             getLog().error( "Error creating mojo generated properties.", e );
         }

File: its/core-it-support/core-it-wagon/src/main/java/org/apache/maven/wagon/providers/coreit/CoreItWagon.java
Patch:
@@ -122,7 +122,7 @@ public void fillInputData( InputData inputData )
         throws TransferFailedException, ResourceDoesNotExistException
     {
         String resName = inputData.getResource().getName();
-        if ( resName.endsWith( ".xml" ) ||resName.endsWith( ".md5" ) || resName.endsWith( ".sha1" ) )
+        if ( resName.endsWith( ".xml" ) || resName.endsWith( ".md5" ) || resName.endsWith( ".sha1" ) )
         {
             throw new ResourceDoesNotExistException( resName );
         }

File: maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java
Patch:
@@ -312,7 +312,7 @@ public void validateEffectiveModel( Model m, ModelBuildingRequest request, Model
                 String module = m.getModules().get( i );
                 if ( StringUtils.isBlank( module ) )
                 {
-                    addViolation( problems, Severity.WARNING, Version.BASE, "modules.module[" + i + "]", null,
+                    addViolation( problems, Severity.ERROR, Version.BASE, "modules.module[" + i + "]", null,
                                   "has been specified without a path to the project directory.",
                                   m.getLocation( "modules" ) );
                 }

File: maven-model-builder/src/test/java/org/apache/maven/model/validation/DefaultModelValidatorTest.java
Patch:
@@ -430,9 +430,9 @@ public void testEmptyModule()
     {
         SimpleProblemCollector result = validate( "empty-module.xml" );
 
-        assertViolations( result, 0, 0, 1 );
+        assertViolations( result, 0, 1, 0 );
 
-        assertTrue( result.getWarnings().get( 0 ).contains( "'modules.module[0]' has been specified without a path" ) );
+        assertTrue( result.getErrors().get( 0 ).contains( "'modules.module[0]' has been specified without a path" ) );
     }
 
     public void testDuplicatePlugin()

File: maven-core/src/main/java/org/apache/maven/internal/aether/LoggingRepositoryListener.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven;
+package org.apache.maven.internal.aether;
 
 /*
  * Licensed to the Apache Software Foundation (ASF) under one

File: maven-core/src/test/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulatorTest.java
Patch:
@@ -33,7 +33,7 @@ public class DefaultMavenExecutionRequestPopulatorTest
     extends TestCase
 {
     DefaultMavenExecutionRequestPopulator testee =
-        new DefaultMavenExecutionRequestPopulator( new TestRepositorySystem() );
+        new DefaultMavenExecutionRequestPopulator( new TestRepositorySystem(), null );
 
     public void testPluginRepositoryInjection()
         throws Exception

File: maven-core/src/main/java/org/apache/maven/toolchain/building/DefaultToolchainsBuilder.java
Patch:
@@ -26,6 +26,7 @@
 
 import javax.inject.Inject;
 import javax.inject.Named;
+import javax.inject.Singleton;
 
 import org.apache.maven.building.Problem;
 import org.apache.maven.building.ProblemCollector;
@@ -43,6 +44,7 @@
  * @since 3.2.6
  */
 @Named
+@Singleton
 public class DefaultToolchainsBuilder
     implements ToolchainsBuilder
 {

File: maven-core/src/main/java/org/apache/maven/toolchain/building/ToolchainsBuildingException.java
Patch:
@@ -39,7 +39,7 @@ public class ToolchainsBuildingException
     /**
      * Creates a new exception with the specified problems.
      *
-     * @param problems The problems that causes this exception, may be {@code null}.
+     * @param problems The problems that causes this exception, must not be {@code null}.
      */
     public ToolchainsBuildingException( List<Problem> problems )
     {

File: maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionResult.java
Patch:
@@ -99,7 +99,7 @@ public boolean hasExceptions()
 
     public BuildSummary getBuildSummary( MavenProject project )
     {
-        return ( buildSummaries != null ) ? buildSummaries.get( project ) : null;
+        return buildSummaries.get( project );
     }
 
     public void addBuildSummary( BuildSummary summary )

File: maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionResult.java
Patch:
@@ -40,7 +40,8 @@ public class DefaultMavenExecutionResult
 
     private List<Throwable> exceptions = new CopyOnWriteArrayList<Throwable>();
 
-    private Map<MavenProject, BuildSummary> buildSummaries = Collections.synchronizedMap(new IdentityHashMap<MavenProject, BuildSummary>());
+    private Map<MavenProject, BuildSummary> buildSummaries =
+        Collections.synchronizedMap( new IdentityHashMap<MavenProject, BuildSummary>() );
 
     public MavenExecutionResult setProject( MavenProject project )
     {
@@ -105,7 +106,7 @@ public void addBuildSummary( BuildSummary summary )
     {
         if ( buildSummaries == null )
         {
-            buildSummaries = Collections.synchronizedMap(new IdentityHashMap<MavenProject, BuildSummary>());
+            buildSummaries = Collections.synchronizedMap( new IdentityHashMap<MavenProject, BuildSummary>() );
         }
         buildSummaries.put( summary.getProject(), summary );
     }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1412DependenciesOrderTest.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.List;
 
 /**
- * This is a test set for <a href="http://jira.codehaus.org/browse/MNG-1349">MNG-1349</a>:
+ * This is a test set for <a href="http://jira.codehaus.org/browse/MNG-1412">MNG-1412</a>:
  * it tests that dependencies order in classpath matches <code>pom.xml</code>.
  *
  * @author <a href="mailto:hboutemy@apache.org">Hervé Boutemy</a>

File: maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionResult.java
Patch:
@@ -20,9 +20,9 @@
  */
 
 import java.util.Collections;
-import java.util.IdentityHashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.CopyOnWriteArrayList;
 
 import org.apache.maven.project.DependencyResolutionResult;
@@ -42,7 +42,7 @@ public class DefaultMavenExecutionResult
 
     private List<Throwable> exceptions = new CopyOnWriteArrayList<Throwable>();
 
-    private Map<MavenProject, BuildSummary> buildSummaries = Maps.newIdentityHashMap();
+    private Map<MavenProject, BuildSummary> buildSummaries = Maps.newConcurrentMap();
 
     public MavenExecutionResult setProject( MavenProject project )
     {
@@ -107,7 +107,7 @@ public void addBuildSummary( BuildSummary summary )
     {
         if ( buildSummaries == null )
         {
-            buildSummaries = new IdentityHashMap<MavenProject, BuildSummary>();
+            buildSummaries = new ConcurrentHashMap<MavenProject, BuildSummary>();
         }
         buildSummaries.put( summary.getProject(), summary );
     }

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java
Patch:
@@ -25,11 +25,11 @@
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 
+import org.apache.maven.artifact.Artifact;
 import org.apache.maven.model.Plugin;
 import org.apache.maven.project.MavenProject;
 import org.codehaus.plexus.component.annotations.Component;
 import org.eclipse.aether.RepositorySystemSession;
-import org.eclipse.aether.artifact.Artifact;
 import org.eclipse.aether.graph.DependencyFilter;
 import org.eclipse.aether.repository.LocalRepository;
 import org.eclipse.aether.repository.RemoteRepository;

File: maven-core/src/main/java/org/apache/maven/plugin/PluginArtifactsCache.java
Patch:
@@ -21,10 +21,10 @@
 
 import java.util.List;
 
+import org.apache.maven.artifact.Artifact;
 import org.apache.maven.model.Plugin;
 import org.apache.maven.project.MavenProject;
 import org.eclipse.aether.RepositorySystemSession;
-import org.eclipse.aether.artifact.Artifact;
 import org.eclipse.aether.graph.DependencyFilter;
 import org.eclipse.aether.repository.RemoteRepository;
 

File: maven-core/src/main/java/org/apache/maven/project/ExtensionDescriptorBuilder.java
Patch:
@@ -40,7 +40,7 @@
  *
  * @author Benjamin Bentmann
  */
-class ExtensionDescriptorBuilder
+public class ExtensionDescriptorBuilder
 {
 
     private String getExtensionDescriptorLocation()

File: maven-core/src/main/java/org/apache/maven/project/ProjectBuildingHelper.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.model.Model;
 import org.apache.maven.model.Repository;
+import org.apache.maven.plugin.PluginManagerException;
 import org.apache.maven.plugin.PluginResolutionException;
 import org.apache.maven.plugin.version.PluginVersionResolutionException;
 
@@ -66,7 +67,7 @@ List<ArtifactRepository> createArtifactRepositories( List<Repository> pomReposit
      */
     ProjectRealmCache.CacheRecord createProjectRealm( MavenProject project, Model model,
                                                       ProjectBuildingRequest request )
-        throws PluginResolutionException, PluginVersionResolutionException;
+        throws PluginResolutionException, PluginVersionResolutionException, PluginManagerException;
 
     /**
      * Updates the context class loader such that the container will search the project realm when the model builder

File: maven-model-builder/src/main/java/org/apache/maven/model/building/ModelSource.java
Patch:
@@ -1,7 +1,5 @@
 package org.apache.maven.model.building;
 
-import org.apache.maven.building.Source;
-
 /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
@@ -21,6 +19,7 @@
  * under the License.
  */
 
+import org.apache.maven.building.Source;
 
 /**
  * Provides access to the contents of a POM independently of the backing store (e.g. file system, database, memory).
@@ -33,7 +32,7 @@
  * @deprecated instead use {@link Source}
  */
 @Deprecated
-public interface ModelSource extends org.apache.maven.building.Source
+public interface ModelSource extends Source
 {
 
 }

File: maven-model-builder/src/main/java/org/apache/maven/model/building/StringModelSource.java
Patch:
@@ -1,7 +1,5 @@
 package org.apache.maven.model.building;
 
-import org.apache.maven.building.StringSource;
-
 /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
@@ -21,6 +19,7 @@
  * under the License.
  */
 
+import org.apache.maven.building.StringSource;
 
 /**
  * Wraps an ordinary {@link CharSequence} as a model source.
@@ -30,7 +29,7 @@
  * @deprecated instead use {@link StringSource}
  */
 @Deprecated
-public class StringModelSource extends org.apache.maven.building.StringSource
+public class StringModelSource extends StringSource
     implements ModelSource
 {
 

File: maven-model-builder/src/main/java/org/apache/maven/model/building/UrlModelSource.java
Patch:
@@ -31,7 +31,7 @@
  * @deprecated instead use {@link UrlSource}
  */
 @Deprecated
-public class UrlModelSource extends org.apache.maven.building.UrlSource
+public class UrlModelSource extends UrlSource
     implements ModelSource
 {
     /**

File: maven-core/src/main/java/org/apache/maven/toolchain/DefaultToolchain.java
Patch:
@@ -27,12 +27,13 @@
 import org.codehaus.plexus.logging.Logger;
 
 /**
- * Default toolchain implementation.
+ * Default abstract toolchain implementation, to be used as base class for any toolchain implementation
+ * to avoid rewriting usual code.
  *
  * @author mkleint
  * @since 2.0.9
  */
-public abstract class DefaultToolchain
+public abstract class DefaultToolchain // should have been AbstractToolchain...
     implements Toolchain, ToolchainPrivate
 {
 

File: maven-core/src/main/java/org/apache/maven/toolchain/ToolchainManager.java
Patch:
@@ -23,7 +23,7 @@
 
 
 /**
- * Public API for a plugin to get a toolchain instance.
+ * Public API for a toolchain-aware plugin to get expected toolchain instance.
  * 
  * @author mkleint
  * @since 2.0.9

File: maven-core/src/main/java/org/apache/maven/toolchain/java/JavaToolchain.java
Patch:
@@ -26,7 +26,7 @@
  * 
  * @author Jason van Zyl
  * @author Milos Kleint
- * @since 2.0.9
+ * @since 2.0.9, renamed from JavaToolChain in 3.2.4
  */
 public interface JavaToolchain
     extends Toolchain

File: maven-core/src/main/java/org/apache/maven/toolchain/java/JavaToolchainFactory.java
Patch:
@@ -59,7 +59,7 @@ public ToolchainPrivate createToolchain( ToolchainModel model )
             return null;
         }
 
-        DefaultJavaToolchain jtc = new DefaultJavaToolchain( model, logger );
+        JavaToolchainImpl jtc = new JavaToolchainImpl( model, logger );
 
         // populate the provides section
         Properties provides = model.getProvides(); 
@@ -89,11 +89,11 @@ public ToolchainPrivate createToolchain( ToolchainModel model )
 
         // populate the configuration section
         Xpp3Dom dom = (Xpp3Dom) model.getConfiguration();
-        Xpp3Dom javahome = dom.getChild( DefaultJavaToolchain.KEY_JAVAHOME );
+        Xpp3Dom javahome = dom.getChild( JavaToolchainImpl.KEY_JAVAHOME );
         if ( javahome == null )
         {
             throw new MisconfiguredToolchainException( "Java toolchain without the "
-                + DefaultJavaToolchain.KEY_JAVAHOME + " configuration element." );
+                + JavaToolchainImpl.KEY_JAVAHOME + " configuration element." );
         }
         File normal = new File( FileUtils.normalize( javahome.getValue() ) );
         if ( normal.exists() )

File: maven-core/src/main/java/org/apache/maven/toolchain/java/JavaToolchainImpl.java
Patch:
@@ -31,17 +31,17 @@
  * JDK toolchain implementation.
  * 
  * @author Milos Kleint
- * @since 2.0.9
+ * @since 2.0.9, renamed from DefaultJavaToolChain in 3.2.4
  */
-public class DefaultJavaToolchain
+public class JavaToolchainImpl
     extends DefaultToolchain
     implements JavaToolchain
 {
     private String javaHome;
 
     public static final String KEY_JAVAHOME = "jdkHome"; //NOI18N
 
-    public DefaultJavaToolchain( ToolchainModel model, Logger logger )
+    public JavaToolchainImpl( ToolchainModel model, Logger logger )
     {
         super( model, "jdk", logger );
     }

File: maven-core/src/test/java/org/apache/maven/toolchain/DefaultToolchainTest.java
Patch:
@@ -24,7 +24,7 @@
 
 import java.io.InputStream;
 
-import org.apache.maven.toolchain.java.DefaultJavaToolchain;
+import org.apache.maven.toolchain.java.JavaToolchainImpl;
 import org.apache.maven.toolchain.model.PersistedToolchains;
 import org.apache.maven.toolchain.model.ToolchainModel;
 import org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Reader;
@@ -48,8 +48,8 @@ public void testEquals() throws Exception
             PersistedToolchains jdks = reader.read( jdksIS );
             PersistedToolchains jdksExtra = reader.read( jdksExtraIS );
             
-            DefaultJavaToolchain tc1 = new DefaultJavaToolchain( jdks.getToolchains().get( 0 ), null );
-            DefaultJavaToolchain tc2 = new DefaultJavaToolchain( jdksExtra.getToolchains().get( 0 ), null );
+            JavaToolchainImpl tc1 = new JavaToolchainImpl( jdks.getToolchains().get( 0 ), null );
+            JavaToolchainImpl tc2 = new JavaToolchainImpl( jdksExtra.getToolchains().get( 0 ), null );
             
             assertTrue( tc1.equals( tc1 ) );
             assertFalse( tc1.equals( tc2 ) );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -106,6 +106,7 @@ public static Test suite()
         // -------------------------------------------------------------------------------------------------------------
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng5716ToolchainsTypeTest.class );
         suite.addTestSuite( MavenITmng5663NestedImportScopePomResolutionTest.class );
         suite.addTestSuite( MavenITmng2562Timestamp322Test.class );
         suite.addTestSuite( MavenITmng2199ParentVersionRangeTest.class );

File: maven-aether-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionRangeResolver.java
Patch:
@@ -143,13 +143,13 @@ public DefaultVersionRangeResolver setSyncContextFactory( SyncContextFactory syn
         return this;
     }
 
-    public DefaultVersionRangeResolver setRepositoryEventDispatcher( RepositoryEventDispatcher repositoryEventDispatcher )
+    public DefaultVersionRangeResolver setRepositoryEventDispatcher( RepositoryEventDispatcher red )
     {
-        if ( repositoryEventDispatcher == null )
+        if ( red == null )
         {
             throw new IllegalArgumentException( "repository event dispatcher has not been specified" );
         }
-        this.repositoryEventDispatcher = repositoryEventDispatcher;
+        this.repositoryEventDispatcher = red;
         return this;
     }
 

File: maven-artifact/src/main/java/org/apache/maven/artifact/repository/ArtifactRepositoryPolicy.java
Patch:
@@ -170,7 +170,7 @@ public void merge( ArtifactRepositoryPolicy policy )
         {
             setEnabled( true );
 
-            if ( ordinalOfChecksumPolicy( policy.getChecksumPolicy() ) < ordinalOfChecksumPolicy( getChecksumPolicy() ) )
+            if ( ordinalOfCksumPolicy( policy.getChecksumPolicy() ) < ordinalOfCksumPolicy( getChecksumPolicy() ) )
             {
                 setChecksumPolicy( policy.getChecksumPolicy() );
             }
@@ -182,7 +182,7 @@ public void merge( ArtifactRepositoryPolicy policy )
         }
     }
 
-    private int ordinalOfChecksumPolicy( String policy )
+    private int ordinalOfCksumPolicy( String policy )
     {
         if ( ArtifactRepositoryPolicy.CHECKSUM_POLICY_FAIL.equals( policy ) )
         {

File: maven-core/src/main/java/org/apache/maven/classrealm/DefaultClassRealmManager.java
Patch:
@@ -332,7 +332,7 @@ public ClassRealm createExtensionRealm( Plugin plugin, List<Artifact> artifacts
         ClassLoader parent = ClassLoader.getSystemClassLoader();
 
         Map<String, ClassLoader> foreignImports =
-            Collections.<String, ClassLoader> singletonMap( "", getMavenApiRealm() );
+            Collections.<String, ClassLoader>singletonMap( "", getMavenApiRealm() );
 
         return createRealm( getKey( plugin, true ), RealmType.Extension, parent, null, foreignImports, artifacts );
     }

File: maven-core/src/main/java/org/apache/maven/exception/ExceptionSummary.java
Patch:
@@ -53,7 +53,7 @@ public ExceptionSummary( Throwable exception, String message, String reference,
         this.exception = exception;
         this.message = ( message != null ) ? message : "";
         this.reference = ( reference != null ) ? reference : "";
-        this.children = ( children != null ) ? children : Collections.<ExceptionSummary> emptyList();
+        this.children = ( children != null ) ? children : Collections.<ExceptionSummary>emptyList();
     }
 
     public Throwable getException()

File: maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulator.java
Patch:
@@ -117,7 +117,7 @@ public MavenExecutionRequest populateFromSettings( MavenExecutionRequest request
             if ( settings.getActiveProfiles().contains( rawProfile.getId() ) )
             {
                 List<Repository> remoteRepositories = rawProfile.getRepositories();
-                for( Repository remoteRepository : remoteRepositories )
+                for ( Repository remoteRepository : remoteRepositories )
                 {
                     try
                     {

File: maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionResult.java
Patch:
@@ -65,7 +65,7 @@ public MavenExecutionResult setTopologicallySortedProjects( List<MavenProject> t
 
     public List<MavenProject> getTopologicallySortedProjects()
     {
-        return null == topologicallySortedProjects ? Collections.<MavenProject> emptyList()
+        return null == topologicallySortedProjects ? Collections.<MavenProject>emptyList()
                         : topologicallySortedProjects;
     }
 
@@ -83,7 +83,7 @@ public MavenExecutionResult setDependencyResolutionResult( DependencyResolutionR
 
     public List<Throwable> getExceptions()
     {
-        return exceptions == null ? Collections.<Throwable> emptyList() : exceptions;
+        return exceptions == null ? Collections.<Throwable>emptyList() : exceptions;
     }
 
     public MavenExecutionResult addException( Throwable t )

File: maven-core/src/main/java/org/apache/maven/execution/MojoExecutionEvent.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.execution.scope.WeakMojoExecutionListener;
 import org.apache.maven.plugin.Mojo;
 import org.apache.maven.plugin.MojoExecution;
 import org.apache.maven.project.MavenProject;
@@ -29,7 +28,7 @@
  * it become necessary to introduce new parameters in the existing callbacks in the future.
  * 
  * @see MojoExecutionListener
- * @see WeakMojoExecutionListener
+ * @see org.apache.maven.execution.scope.WeakMojoExecutionListener
  * @since 3.1.2
  * @provisional This class is part of work in progress and can be changed or removed without notice.
  */

File: maven-core/src/main/java/org/apache/maven/execution/MojoExecutionListener.java
Patch:
@@ -19,13 +19,12 @@
  * under the License.
  */
 
-import org.apache.maven.execution.scope.WeakMojoExecutionListener;
 import org.apache.maven.plugin.MojoExecutionException;
 
 /**
  * Extension point that allows build extensions observe and possibly veto mojo executions.
  * 
- * @see WeakMojoExecutionListener
+ * @see org.apache.maven.execution.scope.WeakMojoExecutionListener
  * @since 3.1.2
  * @provisional This interface is part of work in progress and can be changed or removed without notice.
  */

File: maven-core/src/main/java/org/apache/maven/execution/scope/WeakMojoExecutionListener.java
Patch:
@@ -20,7 +20,6 @@
  */
 
 import org.apache.maven.execution.MojoExecutionEvent;
-import org.apache.maven.execution.MojoExecutionListener;
 import org.apache.maven.plugin.MojoExecutionException;
 
 /**
@@ -29,7 +28,7 @@
  * Unlike {@link MojoExecutionListener}, this extension point does not trigger instantiation of the component, hence
  * "weak" class name prefix. Only applies to mojo execution scoped components.
  * 
- * @see MojoExecutionListener
+ * @see org.apache.maven.execution.MojoExecutionListener
  * @since 3.1.2
  * @provisional This interface is part of work in progress and can be changed or removed without notice.
  */

File: maven-core/src/main/java/org/apache/maven/execution/scope/internal/MojoExecutionScopeModule.java
Patch:
@@ -49,8 +49,8 @@ protected void configure()
         bindScope( MojoExecutionScoped.class, scope );
         bind( MojoExecutionScope.class ).toInstance( scope );
 
-        bind( MavenProject.class ).toProvider( MojoExecutionScope.<MavenProject> seededKeyProvider() ).in( scope );
-        bind( MojoExecution.class ).toProvider( MojoExecutionScope.<MojoExecution> seededKeyProvider() ).in( scope );
+        bind( MavenProject.class ).toProvider( MojoExecutionScope.<MavenProject>seededKeyProvider() ).in( scope );
+        bind( MojoExecution.class ).toProvider( MojoExecutionScope.<MojoExecution>seededKeyProvider() ).in( scope );
     }
 
 }

File: maven-core/src/main/java/org/apache/maven/lifecycle/LifecycleMappingDelegate.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.Map;
 
 import org.apache.maven.execution.MavenSession;
-import org.apache.maven.lifecycle.internal.DefaultLifecycleMappingDelegate;
 import org.apache.maven.plugin.InvalidPluginDescriptorException;
 import org.apache.maven.plugin.MojoExecution;
 import org.apache.maven.plugin.MojoNotFoundException;
@@ -41,7 +40,7 @@
  * {@code @Component} annotations.
  * 
  * @since 3.2.0
- * @see DefaultLifecycleMappingDelegate
+ * @see org.apache.maven.lifecycle.internal.DefaultLifecycleMappingDelegate
  * @author ifedorenko
  */
 public interface LifecycleMappingDelegate

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/BuildThreadFactory.java
Patch:
@@ -28,12 +28,12 @@
 public class BuildThreadFactory
     implements ThreadFactory
 {
-    private final AtomicInteger ID = new AtomicInteger();
+    private final AtomicInteger id = new AtomicInteger();
 
     private static final String PREFIX = "BuilderThread";
 
     public Thread newThread( Runnable r )
     {
-        return new Thread( r, String.format( "%s %d", PREFIX, ID.getAndIncrement() ) );
+        return new Thread( r, String.format( "%s %d", PREFIX, id.getAndIncrement() ) );
     }
 }
\ No newline at end of file

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java
Patch:
@@ -255,7 +255,7 @@ public void ensureDependenciesAreResolved( MojoDescriptor mojoDescriptor, MavenS
             Collection<String> scopesToResolve = dependencyContext.getScopesToResolveForCurrentProject();
 
             lifeCycleDependencyResolver.resolveProjectDependencies( project, scopesToCollect, scopesToResolve, session,
-                                                                    aggregating, Collections.<Artifact> emptySet() );
+                                                                    aggregating, Collections.<Artifact>emptySet() );
 
             dependencyContext.synchronizeWithProjectState();
         }
@@ -273,7 +273,7 @@ public void ensureDependenciesAreResolved( MojoDescriptor mojoDescriptor, MavenS
                     {
                         lifeCycleDependencyResolver.resolveProjectDependencies( aggregatedProject, scopesToCollect,
                                                                                 scopesToResolve, session, aggregating,
-                                                                                Collections.<Artifact> emptySet() );
+                                                                                Collections.<Artifact>emptySet() );
                     }
                 }
             }

File: maven-core/src/main/java/org/apache/maven/model/plugin/DefaultLifecycleBindingsInjector.java
Patch:
@@ -93,7 +93,7 @@ public void merge( Model target, Model source )
             }
 
             Map<Object, Object> context =
-                Collections.<Object, Object> singletonMap( PLUGIN_MANAGEMENT, target.getBuild().getPluginManagement() );
+                Collections.<Object, Object>singletonMap( PLUGIN_MANAGEMENT, target.getBuild().getPluginManagement() );
 
             mergePluginContainer_Plugins( target.getBuild(), source.getBuild(), false, context );
         }

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java
Patch:
@@ -87,7 +87,7 @@ public CacheKey( Plugin plugin, ClassLoader parentRealm, Map<String, ClassLoader
             }
             this.parentRealm = parentRealm;
             this.foreignImports =
-                ( foreignImports != null ) ? foreignImports : Collections.<String, ClassLoader> emptyMap();
+                ( foreignImports != null ) ? foreignImports : Collections.<String, ClassLoader>emptyMap();
             this.filter = dependencyFilter;
 
             int hash = 17;

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java
Patch:
@@ -48,7 +48,7 @@ protected static class CacheKey
 
         public CacheKey( List<? extends ClassRealm> extensionRealms )
         {
-            this.extensionRealms = ( extensionRealms != null ) ? extensionRealms : Collections.<ClassRealm> emptyList();
+            this.extensionRealms = ( extensionRealms != null ) ? extensionRealms : Collections.<ClassRealm>emptyList();
 
             this.hashCode = this.extensionRealms.hashCode();
         }

File: maven-core/src/main/java/org/apache/maven/project/ProjectBuilder.java
Patch:
@@ -24,7 +24,6 @@
 
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.model.building.ModelSource;
-import org.apache.maven.model.building.ModelSource2;
 
 /**
  * Builds in-memory descriptions of projects.
@@ -76,7 +75,7 @@ ProjectBuildingResult build( Artifact projectArtifact, boolean allowStubModel, P
      * @return The result of the project building, never {@code null}.
      * @throws ProjectBuildingException If the project descriptor could not be successfully built.
      * 
-     * @see ModelSource2
+     * @see org.apache.maven.model.building.ModelSource2
      */
     ProjectBuildingResult build( ModelSource modelSource, ProjectBuildingRequest request )
         throws ProjectBuildingException;

File: maven-core/src/main/java/org/apache/maven/project/ProjectBuildingRequest.java
Patch:
@@ -25,7 +25,6 @@
 
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.model.Profile;
-import org.apache.maven.model.building.ModelBuildingRequest;
 import org.eclipse.aether.RepositorySystemSession;
 
 public interface ProjectBuildingRequest
@@ -95,7 +94,7 @@ public interface ProjectBuildingRequest
      * Controls the level of validation to perform on processed models. By default, models are validated in strict mode.
      * 
      * @param validationLevel The level of validation to perform on processed models, e.g.
-     *            {@link ModelBuildingRequest#VALIDATION_LEVEL_STRICT}.
+     *            {@link org.apache.maven.model.building.ModelBuildingRequest#VALIDATION_LEVEL_STRICT}.
      * @return This configuration, never {@code null}.
      */
     ProjectBuildingRequest setValidationLevel( int validationLevel );

File: maven-core/src/main/java/org/apache/maven/session/scope/internal/SessionScopeModule.java
Patch:
@@ -58,6 +58,6 @@ protected void configure()
         bindScope( SessionScoped.class, scope );
         bind( SessionScope.class ).toInstance( scope );
 
-        bind( MavenSession.class ).toProvider( SessionScope.<MavenSession> seededKeyProvider() ).in( scope );
+        bind( MavenSession.class ).toProvider( SessionScope.<MavenSession>seededKeyProvider() ).in( scope );
     }
 }

File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -1118,7 +1118,8 @@ else if ( commandLine.hasOption( CLIManager.ALSO_MAKE )
 
     int calculateDegreeOfConcurrencyWithCoreMultiplier( String threadConfiguration )
     {
-        return (int) ( Float.valueOf( threadConfiguration.replace( "C", "" ) ) * Runtime.getRuntime().availableProcessors() );
+        int procs = Runtime.getRuntime().availableProcessors();
+        return (int) ( Float.valueOf( threadConfiguration.replace( "C", "" ) ) * procs );
     }
     
     static File resolveFile( File file, String workingDirectory )
@@ -1240,7 +1241,7 @@ static class CliRequest
     static class ExitException
         extends Exception
     {
-
+        @SuppressWarnings( "checkstyle:visibilitymodifier" )
         public int exitCode;
 
         public ExitException( int exitCode )

File: maven-embedder/src/main/java/org/apache/maven/cli/transfer/Slf4jMavenTransferListener.java
Patch:
@@ -61,7 +61,8 @@ public void transferCorrupted( TransferEvent event )
     {
         TransferResource resource = event.getResource();
 
-        out.warn( event.getException().getMessage() + " for " + resource.getRepositoryUrl() + resource.getResourceName() );
+        out.warn( event.getException().getMessage() + " for " + resource.getRepositoryUrl()
+            + resource.getResourceName() );
     }
 
     @Override

File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilderFactory.java
Patch:
@@ -124,9 +124,9 @@ protected PathTranslator newPathTranslator()
 
     protected ModelInterpolator newModelInterpolator()
     {
-        UrlNormalizer urlNormalizer = newUrlNormalizer();
+        UrlNormalizer normalizer = newUrlNormalizer();
         PathTranslator pathTranslator = newPathTranslator();
-        return new StringSearchModelInterpolator().setPathTranslator( pathTranslator ).setUrlNormalizer( urlNormalizer );
+        return new StringSearchModelInterpolator().setPathTranslator( pathTranslator ).setUrlNormalizer( normalizer );
     }
 
     protected ModelValidator newModelValidator()

File: maven-model-builder/src/main/java/org/apache/maven/model/building/ModelProcessor.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.maven.model.io.ModelReader;
 import org.apache.maven.model.locator.ModelLocator;
 
+@SuppressWarnings( "checkstyle:interfaceistype" )
 public interface ModelProcessor
     extends ModelLocator, ModelReader
 {

File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringSearchModelInterpolator.java
Patch:
@@ -450,6 +450,7 @@ void doInterpolate( Object target, InterpolateObjectAction ctx )
                             }
                             catch ( UnsupportedOperationException ignore )
                             {
+                                // nop
                             }
                         }
                     }

File: maven-model-builder/src/main/java/org/apache/maven/model/plugin/DefaultReportingConverter.java
Patch:
@@ -106,7 +106,8 @@ public void convertReporting( Model model, ModelBuildingRequest request, ModelPr
         {
 
             problems.add( new ModelProblemCollectorRequest( Severity.WARNING, Version.V31 )
-                    .setMessage( "The <reporting> section is deprecated, please move the reports to the <configuration> section of the new Maven Site Plugin." )
+                    .setMessage( "The <reporting> section is deprecated, please move the reports to the <configuration>"
+                                 + " section of the new Maven Site Plugin." )
                     .setLocation( reporting.getLocation( "" ) ) );
         }*/
 

File: maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/FileProfileActivator.java
Patch:
@@ -47,7 +47,7 @@
  * 
  * @author Benjamin Bentmann
  * @see ActivationFile
- * @see org.apache.maven.model.validation.DefaultModelValidator#validateRawModel(org.apache.maven.model.Model, org.apache.maven.model.building.ModelBuildingRequest, ModelProblemCollector)
+ * @see org.apache.maven.model.validation.DefaultModelValidator#validateRawModel
  */
 @Component( role = ProfileActivator.class, hint = "file" )
 public class FileProfileActivator
@@ -137,7 +137,8 @@ else if ( path.contains( "${basedir}" ) )
         catch ( Exception e )
         {
             problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE )
-                    .setMessage( "Failed to interpolate file location " + path + " for profile " + profile.getId() + ": " + e.getMessage() )
+                    .setMessage( "Failed to interpolate file location " + path + " for profile " + profile.getId()
+                                 + ": " + e.getMessage() )
                     .setLocation( file.getLocation( missing ? "missing" : "exists" ) )
                     .setException( e ) );
             return false;

File: maven-core/src/main/java/org/apache/maven/DefaultMaven.java
Patch:
@@ -61,6 +61,7 @@
 import org.apache.maven.project.ProjectBuildingResult;
 import org.apache.maven.repository.LocalRepositoryNotAccessibleException;
 import org.apache.maven.repository.internal.MavenRepositorySystemUtils;
+import org.apache.maven.session.scope.internal.SessionScope;
 import org.apache.maven.settings.Mirror;
 import org.apache.maven.settings.Proxy;
 import org.apache.maven.settings.Server;

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleModuleBuilder.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.HashSet;
 import java.util.List;
 
-import org.apache.maven.SessionScope;
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.execution.BuildSuccess;
 import org.apache.maven.execution.ExecutionEvent;
@@ -33,6 +32,7 @@
 import org.apache.maven.lifecycle.internal.builder.BuilderCommon;
 import org.apache.maven.plugin.MojoExecution;
 import org.apache.maven.project.MavenProject;
+import org.apache.maven.session.scope.internal.SessionScope;
 import org.codehaus.plexus.component.annotations.Component;
 import org.codehaus.plexus.component.annotations.Requirement;
 

File: maven-core/src/main/java/org/apache/maven/session/scope/internal/SessionScope.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven;
+package org.apache.maven.session.scope.internal;
 
 /*
  * Licensed to the Apache Software Foundation (ASF) under one

File: maven-aether-provider/src/main/java/org/apache/maven/repository/internal/package-info.java
Patch:
@@ -1,5 +1,7 @@
+// CHECKSTYLE_OFF: RegexpHeader
 /**
- * <a href="http://www.eclipse.org/aether/">Aether</a> extensions for utilizing the Maven POM and Maven repository metadata.
+ * <a href="http://www.eclipse.org/aether/">Aether</a> extensions for utilizing the Maven POM and Maven repository
+ * metadata.
  */
 package org.apache.maven.repository.internal;
 

File: maven-artifact/src/main/java/org/apache/maven/artifact/resolver/AbstractArtifactResolutionException.java
Patch:
@@ -54,6 +54,7 @@ public class AbstractArtifactResolutionException
 
     static final String LS = System.getProperty( "line.separator" );
 
+    @SuppressWarnings( "checkstyle:parameternumber" )
     protected AbstractArtifactResolutionException( String message,
                                                    String groupId,
                                                    String artifactId,
@@ -66,6 +67,7 @@ protected AbstractArtifactResolutionException( String message,
         this( message, groupId, artifactId, version, type, classifier, remoteRepositories, path, null );
     }
 
+    @SuppressWarnings( "checkstyle:parameternumber" )
     protected AbstractArtifactResolutionException( String message,
                                                    String groupId,
                                                    String artifactId,
@@ -248,6 +250,7 @@ private static String constructMessageBase( String message,
         return sb.toString();
     }
 
+    @SuppressWarnings( "checkstyle:parameternumber" )
     protected static String constructMissingArtifactMessage( String message,
                                                              String indentation,
                                                              String groupId,

File: maven-artifact/src/main/java/org/apache/maven/artifact/resolver/ArtifactResolutionException.java
Patch:
@@ -30,6 +30,7 @@
 public class ArtifactResolutionException
     extends AbstractArtifactResolutionException
 {
+    @SuppressWarnings( "checkstyle:parameternumber" )
     public ArtifactResolutionException( String message, String groupId, String artifactId, String version, String type,
                                         String classifier, List<ArtifactRepository> remoteRepositories,
                                         List<String> path, Throwable t )

File: maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java
Patch:
@@ -214,7 +214,7 @@ private static Integer getNextIntegerToken( StringTokenizer tok )
             }
             return Integer.valueOf( s );
         }
-        catch( NoSuchElementException e )
+        catch ( NoSuchElementException e )
         {
             throw new NumberFormatException( "Number is invalid" );
         }

File: maven-core/src/main/java/org/apache/maven/SessionModule.java
Patch:
@@ -34,6 +34,6 @@ protected void configure()
         SessionScope scope = new SessionScope();
         bindScope( SessionScoped.class, scope );
         bind( SessionScope.class ).toInstance( scope );
-        bind( MavenSession.class ).toProvider( SessionScope.<MavenSession> seededKeyProvider() ).in( scope );
+        bind( MavenSession.class ).toProvider( SessionScope.<MavenSession>seededKeyProvider() ).in( scope );
     }
 }

File: maven-core/src/main/java/org/apache/maven/artifact/repository/MavenArtifactRepository.java
Patch:
@@ -138,9 +138,9 @@ public String toString()
         sb.append( "      url: " ).append( getUrl() ).append( "\n" );
         sb.append( "   layout: " ).append( layout != null ? layout : "none" ).append( "\n" );
 
-        if( proxy != null)
+        if ( proxy != null )
         {
-            sb.append("    proxy: " ).append( proxy.getHost() ).append(":").append( proxy.getPort() ).append( "\n" );
+            sb.append( "    proxy: " ).append( proxy.getHost() ).append( ":" ).append( proxy.getPort() ).append( "\n" );
         }
         
         if ( snapshots != null )

File: maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulator.java
Patch:
@@ -24,7 +24,6 @@
 import java.util.List;
 import java.util.Set;
 
-import org.apache.maven.RepositoryUtils;
 import org.apache.maven.artifact.InvalidRepositoryException;
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.bridge.MavenRepositorySystem;
@@ -114,8 +113,8 @@ public MavenExecutionRequest populateFromSettings( MavenExecutionRequest request
         for ( org.apache.maven.settings.Profile rawProfile : settings.getProfiles() )
         {
             request.addProfile( SettingsUtils.convertFromSettingsProfile( rawProfile ) );
-            
-            if(settings.getActiveProfiles().contains( rawProfile.getId() ))
+
+            if ( settings.getActiveProfiles().contains( rawProfile.getId() ) )
             {
                 List<Repository> remoteRepositories = rawProfile.getRepositories();
                 for( Repository remoteRepository : remoteRepositories )

File: maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java
Patch:
@@ -136,7 +136,8 @@ public class DefaultMavenPluginManager
 
     private PluginDescriptorBuilder builder = new PluginDescriptorBuilder();
 
-    public synchronized PluginDescriptor getPluginDescriptor( Plugin plugin, List<RemoteRepository> repositories, RepositorySystemSession session )
+    public synchronized PluginDescriptor getPluginDescriptor( Plugin plugin, List<RemoteRepository> repositories,
+                                                              RepositorySystemSession session )
         throws PluginResolutionException, PluginDescriptorParsingException, InvalidPluginDescriptorException
     {
         PluginDescriptorCache.Key cacheKey = pluginDescriptorCache.createKey( plugin, repositories, session );
@@ -365,7 +366,7 @@ private void createPluginRealm( PluginDescriptor pluginDescriptor, MavenSession
 
         List<Artifact> exposedPluginArtifacts = new ArrayList<Artifact>( nlg.getNodes().size() );
         RepositoryUtils.toArtifacts( exposedPluginArtifacts, Collections.singleton( root ),
-                                     Collections.<String> emptyList(), null );
+                                     Collections.<String>emptyList(), null );
         for ( Iterator<Artifact> it = exposedPluginArtifacts.iterator(); it.hasNext(); )
         {
             Artifact artifact = it.next();

File: maven-core/src/main/java/org/apache/maven/project/DefaultDependencyResolutionResult.java
Patch:
@@ -98,7 +98,7 @@ public void setCollectionErrors( List<Exception> exceptions )
     public List<Exception> getResolutionErrors( Dependency dependency )
     {
         List<Exception> errors = resolutionErrors.get( dependency );
-        return ( errors != null ) ? errors : Collections.<Exception> emptyList();
+        return ( errors != null ) ? errors : Collections.<Exception>emptyList();
     }
 
     public void setResolutionErrors( Dependency dependency, List<Exception> errors )

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java
Patch:
@@ -171,7 +171,7 @@ private ProjectBuildingResult build( File pomFile, ModelSource modelSource, Inte
 
                 modelProblems = result.getProblems();
 
-                initProject( project, Collections.<String, MavenProject> emptyMap(), result,
+                initProject( project, Collections.<String, MavenProject>emptyMap(), result,
                              new HashMap<File, Boolean>(), projectBuildingRequest );
             }
             else if ( projectBuildingRequest.isResolveDependencies() )

File: maven-core/src/main/java/org/apache/maven/project/MavenProject.java
Patch:
@@ -846,7 +846,8 @@ public List<ArtifactRepository> getPluginArtifactRepositories()
 
     public ArtifactRepository getDistributionManagementArtifactRepository()
     {
-        return getArtifact().isSnapshot() && ( getSnapshotArtifactRepository() != null ) ? getSnapshotArtifactRepository()
+        return getArtifact().isSnapshot() && ( getSnapshotArtifactRepository() != null )
+                        ? getSnapshotArtifactRepository()
                         : getReleaseArtifactRepository();
     }
 
@@ -1407,7 +1408,7 @@ public DependencyFilter getExtensionDependencyFilter()
      */
     public void setResolvedArtifacts( Set<Artifact> artifacts )
     {
-        this.resolvedArtifacts = ( artifacts != null ) ? artifacts : Collections.<Artifact> emptySet();
+        this.resolvedArtifacts = ( artifacts != null ) ? artifacts : Collections.<Artifact>emptySet();
         this.artifacts = null;
         this.artifactMap = null;
     }

File: maven-core/src/main/java/org/apache/maven/project/artifact/ProjectArtifact.java
Patch:
@@ -56,7 +56,7 @@ public List<Dependency> getDependencies()
     public List<Dependency> getManagedDependencies()
     {
         DependencyManagement depMngt = project.getDependencyManagement();
-        return ( depMngt != null ) ? depMngt.getDependencies() : Collections.<Dependency> emptyList();
+        return ( depMngt != null ) ? depMngt.getDependencies() : Collections.<Dependency>emptyList();
     }
 
     static class PomArtifactHandler

File: maven-core/src/main/java/org/apache/maven/properties/internal/SystemProperties.java
Patch:
@@ -1,7 +1,5 @@
 package org.apache.maven.properties.internal;
 
-import java.util.Properties;
-
 /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
@@ -21,6 +19,8 @@
  * under the License.
  */
 
+import java.util.Properties;
+
 /**
  * @since 3.2.3
  */

File: maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java
Patch:
@@ -103,7 +103,7 @@ public class CLIManager
 
     protected Options options;
 
-    @SuppressWarnings( "static-access" )
+    @SuppressWarnings( { "static-access", "checkstyle:linelength" } )
     public CLIManager()
     {
         options = new Options();

File: maven-embedder/src/main/java/org/apache/maven/cli/logging/Slf4jLoggerManager.java
Patch:
@@ -25,7 +25,8 @@
 import org.slf4j.LoggerFactory;
 
 /**
- * Use an SLF4J {@link org.slf4j.ILoggerFactory} as a backing for a Plexus {@link org.codehaus.plexus.logging.LoggerManager},
+ * Use an SLF4J {@link org.slf4j.ILoggerFactory} as a backing for a Plexus
+ * {@link org.codehaus.plexus.logging.LoggerManager},
  * ignoring Plexus logger API parts that are not classical and probably not really used.
  *
  * @author Jason van Zyl

File: maven-model/src/main/java/org/apache/maven/model/io/xpp3/package-info.java
Patch:
@@ -1,3 +1,4 @@
+// CHECKSTYLE_OFF: RegexpHeader|LineLength
 /**
  * XML reader and writer classes for Maven POM, generated from <code>maven.mdo</code> model.
  * These classes use

File: maven-model/src/main/java/org/apache/maven/model/merge/package-info.java
Patch:
@@ -1,3 +1,4 @@
+// CHECKSTYLE_OFF: RegexpHeader
 /**
  * POM merger.
  */

File: maven-model/src/main/java/org/apache/maven/model/package-info.java
Patch:
@@ -1,3 +1,4 @@
+// CHECKSTYLE_OFF: RegexpHeader
 /**
  * Maven POM (Project Object Model) classes, generated from <code>maven.mdo</code> model.
  * The root class is {@link org.apache.maven.model.Model}.

File: maven-plugin-api/src/main/java/org/apache/maven/plugin/descriptor/PluginDescriptor.java
Patch:
@@ -317,7 +317,7 @@ public void setIntroducedDependencyArtifacts( Set<Artifact> introducedDependency
     public Set<Artifact> getIntroducedDependencyArtifacts()
     {
         return ( introducedDependencyArtifacts != null ) ? introducedDependencyArtifacts
-                        : Collections.<Artifact> emptySet();
+                        : Collections.<Artifact>emptySet();
     }
 
     public void setName( String name )

File: maven-settings/src/main/java/org/apache/maven/settings/RuntimeInfo.java
Patch:
@@ -28,8 +28,10 @@
 @Deprecated
 public class RuntimeInfo
 {
+    @SuppressWarnings( "checkstyle:constantname" )
     public static final String userHome = System.getProperty( "user.home" );
 
+    @SuppressWarnings( "checkstyle:constantname" )
     public static final File userMavenConfigurationHome = new File( userHome, ".m2" );
 
     public static final File DEFAULT_USER_SETTINGS_FILE = new File( userMavenConfigurationHome, "settings.xml" );

File: maven-core/src/main/java/org/apache/maven/repository/RepositorySystem.java
Patch:
@@ -52,7 +52,7 @@ public interface RepositorySystem
 
     String DEFAULT_REMOTE_REPO_ID = "central";
 
-    String DEFAULT_REMOTE_REPO_URL = "http://repo.maven.apache.org/maven2";
+    String DEFAULT_REMOTE_REPO_URL = "https://repo.maven.apache.org/maven2";
 
     Artifact createArtifact( String groupId, String artifactId, String version, String packaging );
 

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java
Patch:
@@ -206,7 +206,7 @@ protected static boolean pluginEquals( Plugin a, Plugin b )
         return CacheUtils.pluginEquals( a, b );
     }
 
-    public void register( MavenProject project, CacheRecord record )
+    public void register( MavenProject project, Key key, CacheRecord record )
     {
         // default cache does not track plugin usage
     }

File: maven-core/src/main/java/org/apache/maven/plugin/PluginArtifactsCache.java
Patch:
@@ -86,6 +86,6 @@ Key createKey( Plugin plugin, DependencyFilter extensionFilter, List<RemoteRepos
      * @param project The project that employs the plugin realm, must not be {@code null}.
      * @param record The cache record being used for the project, must not be {@code null}.
      */
-    void register( MavenProject project, CacheRecord record );
+    void register( MavenProject project, Key cacheKey, CacheRecord record );
 
 }

File: maven-core/src/main/java/org/apache/maven/plugin/PluginRealmCache.java
Patch:
@@ -80,6 +80,6 @@ Key createKey( Plugin plugin, ClassLoader parentRealm, Map<String, ClassLoader>
      * @param project The project that employs the plugin realm, must not be {@code null}.
      * @param record The cache record being used for the project, must not be {@code null}.
      */
-    void register( MavenProject project, CacheRecord record );
+    void register( MavenProject project, Key key, CacheRecord record );
 
 }

File: maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java
Patch:
@@ -330,7 +330,7 @@ public synchronized void setupPluginRealm( PluginDescriptor pluginDescriptor, Ma
                 pluginRealmCache.put( cacheKey, pluginDescriptor.getClassRealm(), pluginDescriptor.getArtifacts() );
         }
 
-        pluginRealmCache.register( project, cacheRecord );
+        pluginRealmCache.register( project, cacheKey, cacheRecord );
     }
 
     private void createPluginRealm( PluginDescriptor pluginDescriptor, MavenSession session, ClassLoader parent,

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java
Patch:
@@ -143,6 +143,7 @@ private ProjectBuildingResult build( File pomFile, ModelSource modelSource, Inte
                 ModelBuildingRequest request = getModelBuildingRequest( config );
 
                 project = new MavenProject();
+                project.setFile( pomFile );
 
                 DefaultModelBuildingListener listener =
                     new DefaultModelBuildingListener( project, projectBuildingHelper, projectBuildingRequest );

File: maven-aether-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java
Patch:
@@ -88,8 +88,8 @@ public DefaultModelResolver( RepositorySystemSession session, RequestTrace trace
         this.remoteRepositoryManager = remoteRepositoryManager;
         this.repositories = repositories;
         List<RemoteRepository> externalRepositories = new ArrayList<RemoteRepository>();
-        externalRepositories.addAll(repositories);
-        this.externalRepositories = Collections.unmodifiableList(externalRepositories);
+        externalRepositories.addAll( repositories );
+        this.externalRepositories = Collections.unmodifiableList( externalRepositories );
 
         this.repositoryIds = new HashSet<String>();
     }
@@ -128,7 +128,7 @@ public void resetRepositories()
     {
         this.repositoryIds.clear();
         this.repositories.clear();
-        this.repositories.addAll(externalRepositories);
+        this.repositories.addAll( externalRepositories );
     }
 
     @Override

File: maven-core/src/main/java/org/apache/maven/DefaultMaven.java
Patch:
@@ -22,7 +22,6 @@
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
-import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
@@ -35,7 +34,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Properties;
-import java.util.TimeZone;
 
 import org.apache.maven.artifact.ArtifactUtils;
 import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;
@@ -55,7 +53,6 @@
 import org.apache.maven.model.building.ModelProblemUtils;
 import org.apache.maven.model.building.ModelSource;
 import org.apache.maven.model.building.UrlModelSource;
-import org.apache.maven.model.interpolation.MavenBuildTimestamp;
 import org.apache.maven.plugin.LegacySupport;
 import org.apache.maven.project.MavenProject;
 import org.apache.maven.project.ProjectBuilder;

File: maven-core/src/main/java/org/apache/maven/SessionModule.java
Patch:
@@ -33,7 +33,7 @@ protected void configure()
     {
         SessionScope scope = new SessionScope();
         bindScope( SessionScoped.class, scope );
-        bind( SessionScope.class).toInstance( scope );
+        bind( SessionScope.class ).toInstance( scope );
         bind( MavenSession.class ).toProvider( SessionScope.<MavenSession> seededKeyProvider() ).in( scope );
     }
 }

File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java
Patch:
@@ -591,7 +591,7 @@ private void configureResolver( ModelResolver modelResolver, Model model, Defaul
 
         List<Repository> repositories = model.getRepositories();
 
-        if (resetRepositories)
+        if ( resetRepositories )
         {
             modelResolver.resetRepositories();
         }

File: maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/ProfileActivator.java
Patch:
@@ -44,8 +44,8 @@ public interface ProfileActivator
     boolean isActive( Profile profile, ProfileActivationContext context, ModelProblemCollector problems );
 
     /**
-     * Determines whether specified activation method is present in configuration or not. It should help to have AND between
-     * activation conditions
+     * Determines whether specified activation method is present in configuration or not. It should help to have AND
+     * between activation conditions
      * Need for solving http://jira.codehaus.org/browse/MNG-4565
      * @param profile The profile whose activation status should be determined, must not be {@code null}.
      * @param context The environmental context used to determine the activation status of the profile, must not be

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5452MavenBuildTimestampUTCTest.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
- * This is a test set for <a href="http://jira.codehaus.org/browse/MNG-5452">MNG-4091</a>
+ * This is a test set for <a href="http://jira.codehaus.org/browse/MNG-5452">MNG-5452</a>
  * Make sure that the maven.build.timestamp is in UTC.
  */
 public class MavenITmng5452MavenBuildTimestampUTCTest

File: maven-model-builder/src/test/java/org/apache/maven/model/interpolation/MavenBuildTimestampTest.java
Patch:
@@ -30,9 +30,9 @@ public class MavenBuildTimestampTest
     public void testMavenBuildTimestampUsesUTC()
     {
         Properties interpolationProperties = new Properties();
-        interpolationProperties.setProperty( "maven.build.timestamp.format", "yyyyMMdd-HHmm:z" );
+        interpolationProperties.setProperty( "maven.build.timestamp.format", "yyyyMMdd'T'HHmm'Z'" );
         MavenBuildTimestamp timestamp = new MavenBuildTimestamp( new Date(), interpolationProperties );
         String formattedTimestamp = timestamp.formattedTimestamp();
-        assertTrue( "We expect the UTC marker at the end of the timestamp.", formattedTimestamp.endsWith( "UTC" ) );
+        assertTrue( "We expect the UTC marker at the end of the timestamp.", formattedTimestamp.endsWith( "Z" ) );
     }
 }

File: maven-model-builder/src/main/java/org/apache/maven/model/building/ModelProblemUtils.java
Patch:
@@ -90,9 +90,9 @@ static String toId( Model model )
         String artifactId = model.getArtifactId();
 
         String version = model.getVersion();
-        if ( version == null && model.getParent() != null )
+        if ( version == null )
         {
-            version = model.getParent().getVersion();
+            version = "[unknown-version]";
         }
 
         return toId( groupId, artifactId, version );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -106,6 +106,7 @@ public static Test suite()
         // -------------------------------------------------------------------------------------------------------------
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng2199ParentVersionRangeTest.class );
         suite.addTestSuite( MavenITmng5640LifecycleParticipantAfterSessionEnd.class );
         suite.addTestSuite( MavenITmng5639ImportScopePomResolutionTest.class );
         suite.addTestSuite( MavenITmng5608ProfileActivationWarningTest.class );

File: maven-core/src/main/java/org/apache/maven/classrealm/DefaultClassRealmManager.java
Patch:
@@ -203,6 +203,8 @@ private void importMavenApi( Map<String, ClassLoader> imports )
 
         // javax.inject (JSR-330)
         imports.put( "javax.inject.*", coreRealm );
+        // javax.enterprise.inject (JSR-299)
+        imports.put( "javax.enterprise.util.*", coreRealm );
         imports.put( "javax.enterprise.inject.*", coreRealm );
 
         // com.google

File: maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java
Patch:
@@ -89,6 +89,7 @@ static boolean matchPattern( ArtifactRepository originalRepository, String patte
             String[] repos = pattern.split( "," );
             for ( String repo : repos )
             {
+                repo = repo.trim();
                 // see if this is a negative match
                 if ( repo.length() > 1 && repo.startsWith( "!" ) )
                 {

File: maven-core/src/main/java/org/apache/maven/artifact/InvalidRepositoryException.java
Patch:
@@ -48,7 +48,7 @@ protected InvalidRepositoryException( String message, String repositoryId, Compo
     @Deprecated
     public InvalidRepositoryException( String message, Throwable t )
     {
-        super( message );
+        super( message, t );
         this.repositoryId = null;
     }
 

File: maven-core/src/main/java/org/apache/maven/execution/MavenExecutionRequest.java
Patch:
@@ -177,12 +177,12 @@ public interface MavenExecutionRequest
      * 
      * @param degreeOfConcurrency
      */
-    public void setDegreeOfConcurrency( final int degreeOfConcurrency );
+    void setDegreeOfConcurrency( int degreeOfConcurrency );
 
     /**
      * @return the degree of concurrency for the build.
      */
-    public int getDegreeOfConcurrency();
+    int getDegreeOfConcurrency();
 
     // Recursive (really to just process the top-level POM)
     MavenExecutionRequest setRecursive( boolean recursive );

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/ExecutionPlanItem.java
Patch:
@@ -27,7 +27,6 @@
 
 import java.util.ArrayList;
 import java.util.List;
-import java.util.concurrent.CountDownLatch;
 
 /**
  * Wraps individual MojoExecutions, containing information about completion status and scheduling.

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleTaskSegmentCalculator.java
Patch:
@@ -51,7 +51,7 @@ List<TaskSegment> calculateTaskSegments( MavenSession session )
         MojoNotFoundException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException,
         PluginVersionResolutionException, LifecyclePhaseNotFoundException, LifecycleNotFoundException;
 
-    public List<TaskSegment> calculateTaskSegments( MavenSession session, List<String> tasks )
+    List<TaskSegment> calculateTaskSegments( MavenSession session, List<String> tasks )
         throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException,
         MojoNotFoundException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException,
         PluginVersionResolutionException;

File: maven-core/src/main/java/org/apache/maven/plugin/ExtensionRealmCache.java
Patch:
@@ -37,7 +37,7 @@
 public interface ExtensionRealmCache
 {
 
-    public static class CacheRecord
+    static class CacheRecord
     {
 
         public final ClassRealm realm;

File: maven-core/src/main/java/org/apache/maven/plugin/PluginArtifactsCache.java
Patch:
@@ -47,7 +47,7 @@ interface Key
         // marker interface for cache keys
     }
 
-    public static class CacheRecord
+    static class CacheRecord
     {
 
         public final List<Artifact> artifacts;

File: maven-core/src/main/java/org/apache/maven/plugin/PluginRealmCache.java
Patch:
@@ -41,7 +41,7 @@
 public interface PluginRealmCache
 {
 
-    public static class CacheRecord
+    static class CacheRecord
     {
         public final ClassRealm realm;
 

File: maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java
Patch:
@@ -224,7 +224,7 @@ public boolean visitEnter( DependencyNode node )
             org.eclipse.aether.graph.Dependency dep = node.getDependency();
             if ( dep != null )
             {
-                org.eclipse.aether.artifact.Artifact art = dep.getArtifact();
+                Artifact art = dep.getArtifact();
 
                 buffer.append( art );
                 buffer.append( ':' ).append( dep.getScope() );

File: maven-core/src/main/java/org/apache/maven/project/ProjectRealmCache.java
Patch:
@@ -35,7 +35,7 @@
 public interface ProjectRealmCache
 {
 
-    public static class CacheRecord
+    static class CacheRecord
     {
 
         public final ClassRealm realm;

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleStarter.java
Patch:
@@ -115,7 +115,7 @@ public void execute( MavenSession session )
             if ( degreeOfConcurrency >= 2 )
             {
                 logger.info( "" );
-                logger.info( String.format( "Using the %s implemenation with a thread count of %d", builder.getClass().getSimpleName(), degreeOfConcurrency ) );
+                logger.info( String.format( "Using the %s implementation with a thread count of %d", builder.getClass().getSimpleName(), degreeOfConcurrency ) );
             }
             builder.build( session, reactorContext, projectBuilds, taskSegments, reactorBuildStatus );
 

File: maven-core/src/main/java/org/apache/maven/DefaultMaven.java
Patch:
@@ -267,13 +267,13 @@ private MavenExecutionResult doExecute( MavenExecutionRequest request )
         //
         ProjectDependencyGraph projectDependencyGraph = createProjectDependencyGraph( projects, request, result, true );
 
-        session.setProjects( projectDependencyGraph.getSortedProjects() );
-        
         if ( result.hasExceptions() )
         {
             return result;
         }
 
+        session.setProjects( projectDependencyGraph.getSortedProjects() );
+
         try
         {
             session.setProjectMap( getProjectMap( session.getProjects() ) );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3760BaseUriPropertyTest.java
Patch:
@@ -63,7 +63,7 @@ public void testitMNG3760()
     public void testitMNG3760SystemPropertyOverride()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3760" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3760" ).getCanonicalFile();
 
         // check that setting baseUri doesn't override project value
         Verifier verifier = newVerifier( testDir.getAbsolutePath() );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2201PluginConfigInterpolationTest.java
Patch:
@@ -53,7 +53,7 @@ public void testitMNG2201()
         verifier.verifyErrorFreeLog();
         verifier.resetStreams();
 
-        testDir = testDir.getCanonicalFile();
+        //testDir = testDir.getCanonicalFile();
 
         Properties props = verifier.loadProperties( "target/config.properties" );
         assertEquals( new File( testDir, "target" ), new File( props.getProperty( "stringParam" ) ) );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3475BaseAlignedDirTest.java
Patch:
@@ -56,7 +56,7 @@ public void testitMNG3475()
         verifier.verifyErrorFreeLog();
         verifier.resetStreams();
 
-        testDir = testDir.getCanonicalFile();
+        //testDir = testDir.getCanonicalFile();
 
         Properties configProps = verifier.loadProperties( "target/config.properties" );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3747PrefixedPathExpressionTest.java
Patch:
@@ -54,7 +54,7 @@ public void testitMNG3747 ()
         verifier.verifyErrorFreeLog();
         verifier.resetStreams();
 
-        testDir = testDir.getCanonicalFile();
+        //testDir = testDir.getCanonicalFile();
 
         Properties props = verifier.loadProperties( "target/config.properties" );
         assertEquals( "path is: " + new File( testDir, "relative" ).getAbsolutePath() + "/somepath", 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3760BaseUriPropertyTest.java
Patch:
@@ -53,7 +53,7 @@ public void testitMNG3760()
         verifier.verifyErrorFreeLog();
         verifier.resetStreams();
 
-        testDir = testDir.getCanonicalFile();
+        //testDir = testDir.getCanonicalFile();
 
         Properties props = verifier.loadProperties( "target/profile.properties" );
         // set via project
@@ -77,7 +77,7 @@ public void testitMNG3760SystemPropertyOverride()
         verifier.verifyErrorFreeLog();
         verifier.resetStreams();
 
-        testDir = testDir.getCanonicalFile();
+        //testDir = testDir.getCanonicalFile();
 
         Properties props = verifier.loadProperties( "target/profile.properties" );
         // set via project

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3827PluginConfigTest.java
Patch:
@@ -57,7 +57,7 @@ public void testitMNG3827()
 
         Properties props = verifier.loadProperties( "target/plugin-config.properties" );
 
-        testDir = testDir.getCanonicalFile();
+        //testDir = testDir.getCanonicalFile();
 
         assertEquals( new File( testDir, "pom.xml" ), new File( props.getProperty( "fileParam" ) ) );
         assertEquals( "true", props.getProperty( "booleanParam" ) );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3864PerExecPluginConfigTest.java
Patch:
@@ -57,7 +57,7 @@ public void testitMNG3864()
 
         Properties props = verifier.loadProperties( "target/plugin-config.properties" );
 
-        testDir = testDir.getCanonicalFile();
+        //testDir = testDir.getCanonicalFile();
 
         assertEquals( new File( testDir, "pom.xml" ), new File( props.getProperty( "fileParam" ) ) );
         assertEquals( "true", props.getProperty( "booleanParam" ) );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3877BasedirAlignedModelTest.java
Patch:
@@ -55,7 +55,7 @@ public void testitMNG3877()
         verifier.verifyErrorFreeLog();
         verifier.resetStreams();
 
-        testDir = testDir.getCanonicalFile();
+        //testDir = testDir.getCanonicalFile();
 
         Properties modelProps = verifier.loadProperties( "target/model.properties" );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3904NestedBuildDirInterpolationTest.java
Patch:
@@ -56,7 +56,7 @@ public void testitMNG3904()
         verifier.verifyErrorFreeLog();
         verifier.resetStreams();
 
-        testDir = testDir.getCanonicalFile();
+        //testDir = testDir.getCanonicalFile();
 
         Properties props = verifier.loadProperties( "target/pom.properties" );
         assertEquals( new File( testDir, "target/classes/dir0" ), 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3944BasedirInterpolationTest.java
Patch:
@@ -58,8 +58,8 @@ public void testitMNG3944()
 
         verifier.assertFilePresent( "target/basedir.properties" );
         Properties props = verifier.loadProperties( "target/basedir.properties" );
-        assertEquals( testDir.getCanonicalFile(), new File( props.getProperty( "project.properties.prop0" ) ) );
-        assertEquals( testDir.getCanonicalFile(), new File( props.getProperty( "project.properties.prop1" ) ) );
+        assertEquals( testDir, new File( props.getProperty( "project.properties.prop0" ) ) );
+        assertEquals( testDir, new File( props.getProperty( "project.properties.prop1" ) ) );
     }
 
 }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3951AbsolutePathsTest.java
Patch:
@@ -70,7 +70,7 @@ public void testitMNG3951()
         verifier.assertFilePresent( "target/path.properties" );
         Properties props = verifier.loadProperties( "target/path.properties" );
 
-        testDir = testDir.getCanonicalFile();
+        //testDir = testDir.getCanonicalFile();
 
         assertEquals( new File( testDir, "tmp" ).getAbsoluteFile(), new File( props.getProperty( "fileParams.0" ) ) );
         assertEquals( new File( getRoot( testDir ), "tmp" ).getAbsoluteFile(), new File( props.getProperty( "fileParams.1" ) ) );

File: maven-core/src/main/java/org/apache/maven/DefaultMaven.java
Patch:
@@ -288,7 +288,7 @@ private MavenExecutionResult doExecute( MavenExecutionRequest request )
         sessionScope.seed( MavenSession.class, session );
         try
         {
-            reactorWorkspace = container.lookup( WorkspaceReader.class );
+            reactorWorkspace = container.lookup( WorkspaceReader.class, ReactorReader.HINT );
         }
         catch ( ComponentLookupException e )
         {

File: maven-core/src/main/java/org/apache/maven/ReactorReader.java
Patch:
@@ -31,7 +31,6 @@
 
 import javax.inject.Inject;
 import javax.inject.Named;
-import javax.inject.Singleton;
 
 import org.apache.maven.artifact.ArtifactUtils;
 import org.apache.maven.execution.MavenSession;
@@ -46,11 +45,13 @@
  * 
  * @author Jason van Zyl
  */
-@Named
+@Named( ReactorReader.HINT )
 @SessionScoped
 class ReactorReader
     implements WorkspaceReader
 {
+    public static final String HINT = "reactor";
+    
     private static final Collection<String> COMPILE_PHASE_TYPES = Arrays.asList( "jar", "ejb-client" );
 
     private Map<String, MavenProject> projectsByGAV;

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleStarter.java
Patch:
@@ -112,7 +112,7 @@ public void execute( MavenSession session )
             }
 
             logger.info( "" );
-            logger.info( String.format( "Using the builder %s", builder.getClass().getName() ) );
+            logger.info( String.format( "Using the builder %s with a thread count of %s", builder.getClass().getName(), session.getRequest().getDegreeOfConcurrency() ) );
             builder.build( session, reactorContext, projectBuilds, taskSegments, reactorBuildStatus );
 
         }

File: maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java
Patch:
@@ -176,7 +176,7 @@ public final void parseVersion( String version )
                 if ( tok.hasMoreTokens() )
                 {
                     qualifier = tok.nextToken();
-                    fallback = Pattern.compile("\\d+").matcher( qualifier ).matches();
+                    fallback = Pattern.compile( "\\d+" ).matcher( qualifier ).matches();
                 }
 
                 // string tokenzier won't detect these and ignores them

File: maven-compat/src/main/java/org/apache/maven/artifact/ArtifactScopeEnum.java
Patch:
@@ -91,7 +91,7 @@ else if ( id == 5 )
         }
     }
 
-    private static final ArtifactScopeEnum [][][] _compliancySets = {
+    private static final ArtifactScopeEnum [][][] COMPLIANCY_SETS = {
           { { compile  }, { compile,                provided, system } }
         , { { test     }, { compile, test,          provided, system } }
         , { { runtime  }, { compile,       runtime,           system } }
@@ -114,7 +114,7 @@ public boolean encloses( ArtifactScopeEnum scope )
             return scope.id == system.id;
         }
 
-        for ( ArtifactScopeEnum[][] set : _compliancySets )
+        for ( ArtifactScopeEnum[][] set : COMPLIANCY_SETS )
         {
             if ( id == set[0][0].id )
             {

File: maven-core/src/main/java/org/apache/maven/DefaultMaven.java
Patch:
@@ -320,7 +320,7 @@ private MavenExecutionResult doExecute( MavenExecutionRequest request )
             {
                 afterSessionEnd( projects, session );
             } 
-            catch (MavenExecutionException e) 
+            catch ( MavenExecutionException e )
             {
                 return addExceptionToResult( result, e );
             }
@@ -349,7 +349,7 @@ private MavenExecutionResult doExecute( MavenExecutionRequest request )
         {
             afterSessionEnd( projects, session );
         } 
-        catch (MavenExecutionException e) 
+        catch ( MavenExecutionException e )
         {
             return addExceptionToResult( result, e );
         }

File: maven-core/src/main/java/org/apache/maven/execution/MojoExecutionListener.java
Patch:
@@ -31,11 +31,11 @@
  */
 public interface MojoExecutionListener
 {
-    public void beforeMojoExecution( MojoExecutionEvent event )
+    void beforeMojoExecution( MojoExecutionEvent event )
         throws MojoExecutionException;
 
-    public void afterMojoExecutionSuccess( MojoExecutionEvent event )
+    void afterMojoExecutionSuccess( MojoExecutionEvent event )
         throws MojoExecutionException;
 
-    public void afterExecutionFailure( MojoExecutionEvent event );
+    void afterExecutionFailure( MojoExecutionEvent event );
 }

File: maven-core/src/main/java/org/apache/maven/execution/scope/WeakMojoExecutionListener.java
Patch:
@@ -35,11 +35,11 @@
  */
 public interface WeakMojoExecutionListener
 {
-    public void beforeMojoExecution( MojoExecutionEvent event )
+    void beforeMojoExecution( MojoExecutionEvent event )
         throws MojoExecutionException;
 
-    public void afterMojoExecutionSuccess( MojoExecutionEvent event )
+    void afterMojoExecutionSuccess( MojoExecutionEvent event )
         throws MojoExecutionException;
 
-    public void afterExecutionFailure( MojoExecutionEvent event );
+    void afterExecutionFailure( MojoExecutionEvent event );
 }

File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -1093,7 +1093,7 @@ else if ( commandLine.hasOption( CLIManager.ALSO_MAKE )
                 threadConfiguration.contains( "C" ) ? Integer.valueOf( threadConfiguration.replace( "C", "" ) )
                     * Runtime.getRuntime().availableProcessors() : Integer.valueOf( threadConfiguration );
                     
-            request.setDegreeOfConcurrency(threads);
+            request.setDegreeOfConcurrency( threads );
         }         
                 
         if ( commandLine.hasOption( CLIManager.BUILDER ) )

File: maven-core/src/main/java/org/apache/maven/project/ProjectSorter.java
Patch:
@@ -20,6 +20,7 @@
  */
 
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
@@ -70,7 +71,7 @@ public class ProjectSorter
     // In this case, both the verify and the report goals are called
     // in a different lifecycle. Though the compiler-plugin has a valid usecase, although
     // that seems to work fine. We need to take versions and lifecycle into account.
-    public ProjectSorter( List<MavenProject> projects )
+    public ProjectSorter( Collection<MavenProject> projects )
         throws CycleDetectedException, DuplicateProjectException
     {
         dag = new DAG();

File: maven-core/src/test/java/org/apache/maven/project/harness/Xpp3DomNodeIterator.java
Patch:
@@ -63,9 +63,10 @@ public Xpp3DomNodeIterator( NodePointer parent, NodeTest test, boolean reverse,
         this.children = this.node.getChildren();
         if ( startWith != null )
         {
+            Xpp3Dom startWithNode = (Xpp3Dom) startWith.getNode();
             for ( ; filteredIndex < children.length; filteredIndex++ )
             {
-                if ( startWith.equals( children[filteredIndex] ) )
+                if ( startWithNode.equals( children[filteredIndex] ) )
                 {
                     filteredIndex++;
                     break;

File: maven-core/src/main/java/org/apache/maven/plugin/MojoExecution.java
Patch:
@@ -57,7 +57,7 @@ public enum Source
         LIFECYCLE,
     }
 
-    private Source source;
+    private Source source = Source.LIFECYCLE;
 
     /**
      * The phase may or may not have been bound to a phase but once the plan has been calculated we know what phase

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3477DependencyResolutionErrorMessageTest.java
Patch:
@@ -63,7 +63,7 @@ public void testit()
             List<String> lines = verifier.loadLines( verifier.getLogFileName(), "UTF-8" );
             for ( String line : lines )
             {
-                if ( line.matches( ".*org.apache.maven.its.mng3477:dep:jar:1.0.*Connection to .* refused.*" ) )
+                if ( line.matches( ".*org.apache.maven.its.mng3477:dep:jar:1.0.*Connection refused.*" ) )
                 {
                     foundCause = true;
                     break;

File: maven-core/src/main/java/org/apache/maven/classrealm/DefaultClassRealmManager.java
Patch:
@@ -169,7 +169,6 @@ private void importMavenApi( Map<String, ClassLoader> imports )
         imports.put( "org.eclipse.aether.deployment", coreRealm );
         imports.put( "org.eclipse.aether.graph", coreRealm );
         imports.put( "org.eclipse.aether.impl", coreRealm );
-        imports.put( "org.eclipse.aether.internal.impl", coreRealm );
         imports.put( "org.eclipse.aether.installation", coreRealm );
         imports.put( "org.eclipse.aether.metadata", coreRealm );
         imports.put( "org.eclipse.aether.repository", coreRealm );

File: maven-core/src/main/java/org/apache/maven/classrealm/DefaultClassRealmManager.java
Patch:
@@ -169,6 +169,7 @@ private void importMavenApi( Map<String, ClassLoader> imports )
         imports.put( "org.eclipse.aether.deployment", coreRealm );
         imports.put( "org.eclipse.aether.graph", coreRealm );
         imports.put( "org.eclipse.aether.impl", coreRealm );
+        imports.put( "org.eclipse.aether.internal.impl", coreRealm );
         imports.put( "org.eclipse.aether.installation", coreRealm );
         imports.put( "org.eclipse.aether.metadata", coreRealm );
         imports.put( "org.eclipse.aether.repository", coreRealm );

File: maven-core/src/main/java/org/apache/maven/DefaultArtifactFilterManager.java
Patch:
@@ -80,9 +80,9 @@ public class DefaultArtifactFilterManager
         artifacts.add( "org.apache.maven:maven-settings-builder" );
         artifacts.add( "org.apache.maven:maven-toolchain" );
         artifacts.add( "org.apache.maven.wagon:wagon-provider-api" );
-        artifacts.add( "org.sonatype.aether:aether-api" );
-        artifacts.add( "org.sonatype.aether:aether-spi" );
-        artifacts.add( "org.sonatype.aether:aether-impl" );
+        artifacts.add( "org.eclipse.aether:aether-api" );
+        artifacts.add( "org.eclipse.aether:aether-spi" );
+        artifacts.add( "org.eclipse.aether:aether-impl" );
 
         /*
          * NOTE: Don't exclude the wagons or any of their dependencies (apart from the wagon API). This would otherwise

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2878DefaultReportXmlImportTest.java
Patch:
@@ -55,7 +55,8 @@ public void testitMNG2878()
         verifier.resetStreams();
 
         Properties pclProps = verifier.loadProperties( "target/pcl.properties" );
-        assertNotNull( pclProps.getProperty( "default-report.xml" ) );
+        assertNotNull( "target/pcl.properties does not contain 'default-report.xml' property",
+                       pclProps.getProperty( "default-report.xml" ) );
 
         Properties tcclProps = verifier.loadProperties( "target/tccl.properties" );
         assertEquals( pclProps, tcclProps );

File: maven-core/src/main/java/org/apache/maven/DefaultMaven.java
Patch:
@@ -366,7 +366,7 @@ else if ( request.isUpdateSnapshots() )
 
         if ( request.isUseLegacyLocalRepository() )
         {
-            logger.warn( "Disabling enhanced local repository: using legacy is stronlgy discouraged to ensure build reproducibility." );
+            logger.warn( "Disabling enhanced local repository: using legacy is strongly discouraged to ensure build reproducibility." );
             try
             {
                 session.setLocalRepositoryManager( simpleLocalRepositoryManagerFactory.newInstance( session, localRepo ) );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5280SettingsProfilesRepositoriesOrderTest.java
Patch:
@@ -52,7 +52,7 @@ public class MavenITmng5280SettingsProfilesRepositoriesOrderTest
 
     public MavenITmng5280SettingsProfilesRepositoriesOrderTest()
     {
-        super( "(3.1,)" );
+        super( "[3.1-A,)" );
     }
 
     public void setUp()

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5338FileOptionToDirectory.java
Patch:
@@ -36,7 +36,7 @@ public class MavenITmng5338FileOptionToDirectory
 
     public MavenITmng5338FileOptionToDirectory()
     {
-        super( "(3.1,)" );
+        super( "[3.1-A,)" );
     }
 
     public void setUp()

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -109,6 +109,7 @@ public static Test suite()
         //suite.addTestSuite( MavenITmng5208EventSpyParallelTest.class );
         
         
+        suite.addTestSuite( MavenITmng5482AetherNotFoundTest.class );
         suite.addTestSuite( MavenITmng5445LegacyStringSearchModelInterpolatorTest.class );
         suite.addTestSuite( MavenITmng5387ArtifactReplacementPlugin.class );
         suite.addTestSuite( MavenITmng5382Jsr330Plugin.class );

File: maven-core/src/main/java/org/apache/maven/ProjectBuildFailureException.java
Patch:
@@ -25,8 +25,7 @@
  * Exception which occurs when a normal (i.e. non-aggregator) mojo fails to
  * execute. In this case, the mojo failed while executing against a particular
  * project instance, so we can wrap the {@link MojoFailureException} with context
- * information including projectId and the {@link MojoBinding} that caused the
- * failure.
+ * information including projectId that caused the failure.
  *
  * @author jdcasey
  *

File: maven-core/src/main/java/org/apache/maven/classrealm/ClassRealmManager.java
Patch:
@@ -64,7 +64,7 @@ public interface ClassRealmManager
     /**
      * Creates a new class realm for the specified build extension.
      * 
-     * @param plugin The extension plugin for which to create a realm, must not be {@code null}.
+     * @param extension The extension plugin for which to create a realm, must not be {@code null}.
      * @param artifacts The artifacts to add to the class realm, may be {@code null}. Unresolved artifacts (i.e. with a
      *            missing file) will automatically be excluded from the realm.
      * @return The new extension realm, never {@code null}.

File: maven-core/src/main/java/org/apache/maven/configuration/BeanConfigurationRequest.java
Patch:
@@ -74,7 +74,7 @@ public interface BeanConfigurationRequest
     /**
      * Returns configuration element name or {@code null}. 
      * 
-     * @see {@link #setConfiguration(Object, String)}
+     * @see #setConfiguration(Object, String)
      * 
      * @return Configuration element name or {@code null}
      */

File: maven-core/src/main/java/org/apache/maven/eventspy/EventSpy.java
Patch:
@@ -54,13 +54,13 @@ void init( Context context )
     /**
      * Notifies the spy of some build event/operation.
      * 
-     * @param event The event, never {@@code null}.
+     * @param event The event, never {@code null}.
      * @see org.apache.maven.settings.building.SettingsBuildingRequest
      * @see org.apache.maven.settings.building.SettingsBuildingResult
      * @see org.apache.maven.execution.MavenExecutionRequest
      * @see org.apache.maven.execution.MavenExecutionResult
      * @see org.apache.maven.project.DependencyResolutionRequest
-     * @see org.apache.maven.project.DependencyResolutionResultt
+     * @see org.apache.maven.project.DependencyResolutionResult
      * @see org.apache.maven.execution.ExecutionEvent
      * @see org.eclipse.aether.RepositoryEvent
      */

File: maven-core/src/main/java/org/apache/maven/execution/MavenExecutionRequest.java
Patch:
@@ -261,7 +261,7 @@ public interface MavenExecutionRequest
      * mirrors then it's easier to just replace the whole list with a new list of transformed repositories.
      *
      * @param repositories
-     * @return
+     * @return This request, never {@code null}.
      */
     MavenExecutionRequest setRemoteRepositories( List<ArtifactRepository> repositories );
     List<ArtifactRepository> getRemoteRepositories();

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultBuildPluginManager.java
Patch:
@@ -51,7 +51,8 @@ public class DefaultBuildPluginManager
     /**
      * 
      * @param plugin
-     * @param repositoryRequest
+     * @param repositories
+     * @param session
      * @return PluginDescriptor The component descriptor for the Maven plugin.
      * @throws PluginNotFoundException The plugin could not be found in any repositories.
      * @throws PluginResolutionException The plugin could be found but could not be resolved.

File: maven-core/src/main/java/org/apache/maven/plugin/version/DefaultPluginVersionRequest.java
Patch:
@@ -61,7 +61,7 @@ public DefaultPluginVersionRequest()
      * has a current project, its plugin repositories will be used as well.
      * 
      * @param plugin The plugin for which to resolve a version, must not be {@code null}.
-     * @param repositoryRequest The repository request to copy from, must not be {@code null}.
+     * @param session The Maven session to use, must not be {@code null}.
      */
     public DefaultPluginVersionRequest( Plugin plugin, MavenSession session )
     {

File: maven-core/src/main/java/org/apache/maven/repository/legacy/metadata/ArtifactMetadataSource.java
Patch:
@@ -65,7 +65,7 @@ List<ArtifactVersion> retrieveAvailableVersions( Artifact artifact, ArtifactRepo
      *            needed, for instance the following code will work
      *            <code>artifactFactory.createProjectArtifact( "org.apache.maven", "maven", "" )</code>
      * @param localRepository    local repository
-     * @param deploymentRepository remote repository
+     * @param remoteRepository   remote repository
      * @return {@link List} $lt; {@link ArtifactVersion} >
      * @throws ArtifactMetadataRetrievalException
      *          in case of error while retrieving repository metadata from the repository.

File: maven-core/src/main/java/org/apache/maven/settings/SettingsUtils.java
Patch:
@@ -48,7 +48,7 @@ public static void merge( Settings dominant, Settings recessive, String recessiv
     }
 
     /**
-     * @param settingsProfile
+     * @param modelProfile
      * @return a profile
      */
     public static Profile convertToSettingsProfile( org.apache.maven.model.Profile modelProfile )

File: maven-core/src/main/java/org/apache/maven/toolchain/ToolchainPrivate.java
Patch:
@@ -35,7 +35,7 @@ public interface ToolchainPrivate
      * Let the toolchain decide if it matches requirements defined
      * in the toolchain plugin configuration.
      * @param requirements Map<String, String> key value pair
-     * @return
+     * @return {@code true} if the requirements match, otherwise {@code false}
      */
     boolean matchesRequirements( Map<String, String> requirements );
 

File: maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java
Patch:
@@ -316,9 +316,6 @@ public void validateEffectiveModel( Model model, ModelBuildingRequest request, M
 
                     validateStringNotEmpty( "reporting.plugins.plugin.groupId", problems, Severity.ERROR, Version.V20,
                                             p.getGroupId(), p );
-
-                    validateStringNotEmpty( "reporting.plugins.plugin.version", problems, errOn31, Version.V20, p.getVersion(),
-                                            p.getKey(), p );
                 }
             }
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5019StringBasedCompLookupFromChildPluginRealmTest.java
Patch:
@@ -33,7 +33,7 @@ public class MavenITmng5019StringBasedCompLookupFromChildPluginRealmTest
 
     public MavenITmng5019StringBasedCompLookupFromChildPluginRealmTest()
     {
-        super( "[3.0.3,3.1-SNAPSHOT)" );
+        super( "[3.0.3,)" );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -112,8 +112,6 @@ public static Test suite()
         // -------------------------------------------------------------------------------------------------------------
         // These do not work as a result of the Eclipse Aether change. They are directly using the Site and Dependency plugins
         // -------------------------------------------------------------------------------------------------------------
-        //MavenITmng3372DirectInvocationOfPluginsTest>AbstractMavenIntegrationTestCase.runTest:220->testDependencyTreeInvocation:83 » Verification
-        //suite.addTestSuite( MavenITmng3372DirectInvocationOfPluginsTest.class ); dependency:tree requires maven-dependency-tree 2.1
         //MavenITmng5019StringBasedCompLookupFromChildPluginRealmTest>AbstractMavenIntegrationTestCase.runTest:220->testit:56 ? Verification
         //suite.addTestSuite( MavenITmng5019StringBasedCompLookupFromChildPluginRealmTest.class );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3372DirectInvocationOfPluginsTest.java
Patch:
@@ -36,7 +36,7 @@ public class MavenITmng3372DirectInvocationOfPluginsTest
 
     public MavenITmng3372DirectInvocationOfPluginsTest()
     {
-        super( "(2.0.5,)" );
+        super( "(2.0.5,3.1-SNAPSHOT)" );
     }
 
     public void testitMNG3372()

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3684BuildPluginParameterTest.java
Patch:
@@ -36,7 +36,7 @@ public class MavenITmng3684BuildPluginParameterTest
 {
     public MavenITmng3684BuildPluginParameterTest()
     {
-        super( "(2.0.9,)" );
+        super( "(2.0.9,3.1-SNAPSHOT)" );
     }
     
     public void testitMNG3684 ()

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3703ExecutionProjectWithRelativePathsTest.java
Patch:
@@ -36,7 +36,7 @@ public class MavenITmng3703ExecutionProjectWithRelativePathsTest
 {
     public MavenITmng3703ExecutionProjectWithRelativePathsTest()
     {
-        super( "[2.1.0-M1,)" ); // only test in 2.1.0+
+        super( "[2.1.0-M1,3.1-SNAPSHOT)" ); // only test in 2.1.0+
     }
 
     public void testForkFromMojo()

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3743ForkWithPluginManagementTest.java
Patch:
@@ -38,7 +38,7 @@ public class MavenITmng3743ForkWithPluginManagementTest
 {
     public MavenITmng3743ForkWithPluginManagementTest()
     {
-        super( "(2.0.8,)" ); // only test in 2.0.9+
+        super( "(2.0.8,3.1-SNAPSHOT)" ); // only test in 2.0.9+
     }
 
     public void testitMNG3743 ()

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5019StringBasedCompLookupFromChildPluginRealmTest.java
Patch:
@@ -33,7 +33,7 @@ public class MavenITmng5019StringBasedCompLookupFromChildPluginRealmTest
 
     public MavenITmng5019StringBasedCompLookupFromChildPluginRealmTest()
     {
-        super( "[3.0.3,)" );
+        super( "[3.0.3,3.1-SNAPSHOT)" );
     }
 
     /**

File: maven-embedder/src/main/java/org/slf4j/impl/MavenSlf4jSimpleFriend.java
Patch:
@@ -28,5 +28,6 @@ public class MavenSlf4jSimpleFriend
     public static void init()
     {
         SimpleLogger.init();
+        SimpleLoggerFactory.INSTANCE.reset();
     }
 }

File: maven-core/src/main/java/org/apache/maven/project/ProjectBuilder.java
Patch:
@@ -24,6 +24,7 @@
 
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.model.building.ModelSource;
+import org.apache.maven.model.building.ModelSource2;
 
 /**
  * Builds in-memory descriptions of projects.
@@ -74,6 +75,8 @@ ProjectBuildingResult build( Artifact projectArtifact, boolean allowStubModel, P
      * @param request The project building request that holds further parameters, must not be {@code null}.
      * @return The result of the project building, never {@code null}.
      * @throws ProjectBuildingException If the project descriptor could not be successfully built.
+     * 
+     * @see ModelSource2
      */
     ProjectBuildingResult build( ModelSource modelSource, ProjectBuildingRequest request )
         throws ProjectBuildingException;

File: maven-model-builder/src/main/java/org/apache/maven/model/building/ModelCacheTag.java
Patch:
@@ -83,7 +83,7 @@ public Class<ModelData> getType()
         public ModelData intoCache( ModelData data )
         {
             Model model = ( data.getModel() != null ) ? data.getModel().clone() : null;
-            return new ModelData( model, data.getGroupId(), data.getArtifactId(), data.getVersion() );
+            return new ModelData( data.getSource(), model, data.getGroupId(), data.getArtifactId(), data.getVersion() );
         }
 
         public ModelData fromCache( ModelData data )

File: maven-aether-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionRangeResolver.java
Patch:
@@ -319,4 +319,4 @@ private void invalidMetadata( RepositorySystemSession session, RequestTrace trac
         repositoryEventDispatcher.dispatch( event.build() );
     }
 
-}
+}
\ No newline at end of file

File: maven-aether-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionResolver.java
Patch:
@@ -631,4 +631,4 @@ public Record( String version, ArtifactRepository repository )
         }
     }
 
-}
+}
\ No newline at end of file

File: maven-aether-provider/src/main/java/org/apache/maven/repository/internal/LocalSnapshotMetadata.java
Patch:
@@ -160,4 +160,4 @@ public Nature getNature()
         return Nature.SNAPSHOT;
     }
 
-}
+}
\ No newline at end of file

File: maven-artifact/src/main/java/org/apache/maven/artifact/repository/ArtifactRepositoryPolicy.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.util.Calendar;
 import java.util.Date;
-import java.util.TimeZone;
 
 /**
  * Describes a set of policies for a repository to use under certain conditions.

File: maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java
Patch:
@@ -72,7 +72,7 @@ public int compareTo( ArtifactVersion otherVersion )
     {
         if ( otherVersion instanceof DefaultArtifactVersion )
         {
-            return this.comparable.compareTo( ( (DefaultArtifactVersion) otherVersion).comparable );
+            return this.comparable.compareTo( ( (DefaultArtifactVersion) otherVersion ).comparable );
         }
         else
         {

File: maven-compat/src/main/java/org/apache/maven/artifact/ArtifactScopeEnum.java
Patch:
@@ -108,7 +108,7 @@ public boolean encloses( ArtifactScopeEnum scope )
     {
         final ArtifactScopeEnum s = checkScope( scope );
 
-    	// system scope is historic only - and simple
+        // system scope is historic only - and simple
         if ( id == system.id )
         {
             return scope.id == system.id;

File: maven-compat/src/main/java/org/apache/maven/artifact/repository/metadata/MetadataBridge.java
Patch:
@@ -26,7 +26,6 @@
 import org.apache.maven.artifact.metadata.ArtifactMetadata;
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.artifact.repository.DefaultArtifactRepository;
-import org.apache.maven.artifact.repository.metadata.RepositoryMetadata;
 import org.codehaus.plexus.util.FileUtils;
 import org.eclipse.aether.RepositoryException;
 import org.eclipse.aether.metadata.AbstractMetadata;

File: maven-compat/src/main/java/org/apache/maven/profiles/activation/SystemPropertyProfileActivator.java
Patch:
@@ -63,7 +63,7 @@ public boolean isActive( Profile profile )
                     + profile.getId() + "'" );
             }
 
-            if ( name.startsWith("!") )
+            if ( name.startsWith( "!" ) )
             {
                 reverseName = true;
                 name = name.substring( 1 );

File: maven-compat/src/main/java/org/apache/maven/project/interpolation/AbstractStringBasedModelInterpolator.java
Patch:
@@ -283,7 +283,7 @@ protected List<InterpolationPostProcessor> createPostProcessors( final Model mod
                                                                                                          pathTranslator ) );
     }
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings( "unchecked" )
     protected String interpolateInternal( String src, List<ValueSource> valueSources,
                                           List<InterpolationPostProcessor> postProcessors, boolean debug )
         throws ModelInterpolationException
@@ -296,7 +296,7 @@ protected String interpolateInternal( String src, List<ValueSource> valueSources
         Logger logger = getLogger();
 
         String result = src;
-        synchronized( this )
+        synchronized ( this )
         {
 
             for ( ValueSource vs : valueSources )
@@ -315,7 +315,7 @@ protected String interpolateInternal( String src, List<ValueSource> valueSources
                 {
                     result = interpolator.interpolate( result, recursionInterceptor );
                 }
-                catch( InterpolationException e )
+                catch ( InterpolationException e )
                 {
                     throw new ModelInterpolationException( e.getMessage(), e );
                 }

File: maven-compat/src/main/java/org/apache/maven/repository/MetadataGraphNode.java
Patch:
@@ -41,8 +41,8 @@ public class MetadataGraphNode
 
     public MetadataGraphNode()
     {
-        inNodes = new ArrayList<MetadataGraphNode>(4);
-        exNodes = new ArrayList<MetadataGraphNode>(8);
+        inNodes = new ArrayList<MetadataGraphNode>( 4 );
+        exNodes = new ArrayList<MetadataGraphNode>( 8 );
     }
 
     public MetadataGraphNode( MavenArtifactMetadata metadata )

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/repository/DefaultArtifactRepositoryFactory.java
Patch:
@@ -43,7 +43,7 @@ public class DefaultArtifactRepositoryFactory
     private String globalChecksumPolicy;
 
     @Requirement( role = ArtifactRepositoryLayout.class )
-    private Map<String,ArtifactRepositoryLayout> repositoryLayouts;
+    private Map<String, ArtifactRepositoryLayout> repositoryLayouts;
 
     public ArtifactRepositoryLayout getLayout( String layoutId )
         throws UnknownRepositoryLayoutException

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/DefaultLegacyArtifactCollector.java
Patch:
@@ -63,10 +63,10 @@
 public class DefaultLegacyArtifactCollector
     implements LegacyArtifactCollector
 {
-	@Requirement(hint="nearest")
+    @Requirement( hint = "nearest" )
     private ConflictResolver defaultConflictResolver;
 
-	@Requirement
+    @Requirement
     private Logger logger;
 
     @Requirement

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/transform/ArtifactTransformationManager.java
Patch:
@@ -40,7 +40,6 @@ public interface ArtifactTransformationManager
      *
      * @param artifact           Artifact to be transformed.
      * @param request the repositories to check
-     * @param localRepository    the local repository
      */
     void transformForResolve( Artifact artifact, RepositoryRequest request )
         throws ArtifactResolutionException, ArtifactNotFoundException;

File: maven-compat/src/main/java/org/apache/maven/repository/metadata/MetadataGraph.java
Patch:
@@ -294,7 +294,7 @@ private static void checkEdge( MetadataGraphEdge e )
     //------------------------------------------------------------------------
     public List<MetadataGraphEdge> getEdgesBetween( MetadataGraphVertex vFrom, MetadataGraphVertex vTo )
     {
-        List<MetadataGraphEdge> edges = getIncidentEdges(vTo);
+        List<MetadataGraphEdge> edges = getIncidentEdges( vTo );
         if ( edges == null || edges.isEmpty() )
         {
             return null;

File: maven-compat/src/main/java/org/apache/maven/repository/metadata/MetadataResolution.java
Patch:
@@ -62,7 +62,7 @@ public ArtifactMetadata getArtifactMetadata()
         return artifactMetadata;
     }
 
-    public void setArtifactMetadata(ArtifactMetadata artifactMetadata)
+    public void setArtifactMetadata( ArtifactMetadata artifactMetadata )
     {
         this.artifactMetadata = artifactMetadata;
     }

File: maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionResult.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import java.util.ArrayList;
 import java.util.Collections;
 import java.util.IdentityHashMap;
 import java.util.List;
@@ -39,7 +38,7 @@ public class DefaultMavenExecutionResult
 
     private DependencyResolutionResult dependencyResolutionResult;
 
-    private List<Throwable> exceptions = new CopyOnWriteArrayList<Throwable>(  );
+    private List<Throwable> exceptions = new CopyOnWriteArrayList<Throwable>();
 
     private Map<MavenProject, BuildSummary> buildSummaries;
 

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecyclePluginAnalyzer.java
Patch:
@@ -80,8 +80,8 @@ public Set<Plugin> getPluginsBoundByDefaultToAllLifecycles( String packaging )
     {
         if ( logger.isDebugEnabled() )
         {
-            logger.debug( "Looking up lifecyle mappings for packaging " + packaging + " from " +
-                Thread.currentThread().getContextClassLoader() );
+            logger.debug( "Looking up lifecyle mappings for packaging " + packaging + " from "
+                + Thread.currentThread().getContextClassLoader() );
         }
 
         LifecycleMapping lifecycleMappingForPackaging = lifecycleMappings.get( packaging );

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/ExecutionPlanItem.java
Patch:
@@ -94,8 +94,8 @@ public Plugin getPlugin()
     @Override
     public String toString()
     {
-        return "ExecutionPlanItem{" + ", mojoExecution=" + mojoExecution + ", schedule=" + schedule + '}' +
-            super.toString();
+        return "ExecutionPlanItem{" + ", mojoExecution=" + mojoExecution + ", schedule=" + schedule + '}'
+            + super.toString();
     }
 
 }

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleModuleBuilder.java
Patch:
@@ -32,7 +32,7 @@
 
 /**
  * Builds one or more lifecycles for a full module
- * 
+ *
  * @since 3.0
  * @author Benjamin Bentmann
  * @author Jason van Zyl
@@ -92,7 +92,7 @@ public void buildProject( MavenSession session, MavenSession rootSession, Reacto
         }
         catch ( Exception e )
         {
-            builderCommon.handleBuildError( reactorContext, rootSession, currentProject, e, buildStartTime );
+            builderCommon.handleBuildError( reactorContext, rootSession, session, currentProject, e, buildStartTime );
         }
         finally
         {
@@ -101,4 +101,4 @@ public void buildProject( MavenSession session, MavenSession rootSession, Reacto
             Thread.currentThread().setContextClassLoader( reactorContext.getOriginalContextClassLoader() );
         }
     }
-}
\ No newline at end of file
+}

File: maven-core/src/main/java/org/apache/maven/model/plugin/DefaultLifecycleBindingsInjector.java
Patch:
@@ -66,9 +66,9 @@ public void injectLifecycleBindings( Model model, ModelBuildingRequest request,
 
         if ( defaultPlugins == null )
         {
-            problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE)
+            problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE )
                     .setMessage( "Unknown packaging: " + packaging )
-                    .setLocation( model.getLocation( "packaging" )));
+                    .setLocation( model.getLocation( "packaging" ) ) );
         }
         else if ( !defaultPlugins.isEmpty() )
         {
@@ -80,7 +80,7 @@ else if ( !defaultPlugins.isEmpty() )
         }
     }
 
-    private static class LifecycleBindingsMerger
+    protected static class LifecycleBindingsMerger
         extends MavenModelMerger
     {
 

File: maven-core/src/main/java/org/apache/maven/plugin/PluginParameterExpressionEvaluator.java
Patch:
@@ -53,8 +53,8 @@
  * <tr><td><code>mojo.*</code></td>            <td>(since Maven 3)</td><td></td></tr>
  * <tr><td><code>plugin</code></td>            <td>(since Maven 3)</td><td>{@link MojoExecution#getMojoDescriptor()}.{@link MojoDescriptor#getPluginDescriptor() getPluginDescriptor()}</td></tr>
  * <tr><td><code>plugin.*</code></td>          <td></td>               <td></td></tr>
- * <tr><td>system properties</td>              <td></td>               <td></td></tr>
- * <tr><td>project properties</td>             <td></td>               <td></td></tr>
+ * <tr><td><code>*</code></td>                 <td></td>               <td>system properties</td></tr>
+ * <tr><td><code>*</code></td>                 <td></td>               <td>project properties</td></tr>
  * </table>
  * <i>Notice:</i> <code>reports</code> was supported in Maven 2.x but was removed in Maven 3
  * 

File: maven-core/src/main/java/org/apache/maven/plugin/internal/PluginDependenciesResolver.java
Patch:
@@ -50,7 +50,7 @@ public interface PluginDependenciesResolver
      * @return The resolved plugin artifact, never {@code null}.
      * @throws PluginResolutionException If the plugin artifact could not be resolved.
      */
-    public Artifact resolve( Plugin plugin, List<RemoteRepository> repositories, RepositorySystemSession session )
+    Artifact resolve( Plugin plugin, List<RemoteRepository> repositories, RepositorySystemSession session )
         throws PluginResolutionException;
 
     /**

File: maven-core/src/main/java/org/apache/maven/plugin/prefix/PluginPrefixResult.java
Patch:
@@ -1,7 +1,5 @@
 package org.apache.maven.plugin.prefix;
 
-import org.eclipse.aether.repository.ArtifactRepository;
-
 /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
@@ -11,7 +9,7 @@
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *  http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
@@ -21,6 +19,8 @@
  * under the License.
  */
 
+import org.eclipse.aether.repository.ArtifactRepository;
+
 /**
  * Describes the result of a plugin prefix resolution request.
  * 

File: maven-core/src/main/java/org/apache/maven/project/ProjectBuildingRequest.java
Patch:
@@ -79,7 +79,7 @@ public interface ProjectBuildingRequest
      */
     Properties getUserProperties();
 
-    void setProject(MavenProject mavenProject);
+    void setProject( MavenProject mavenProject );
 
     MavenProject getProject();
 

File: maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java
Patch:
@@ -97,6 +97,8 @@ public class CLIManager
 
     public static final String THREADS = "T";
 
+    public static final String LEGACY_LOCAL_REPOSITORY ="llr";
+
     protected Options options;
 
     @SuppressWarnings( "static-access" )
@@ -133,9 +135,9 @@ public CLIManager()
         options.addOption( OptionBuilder.withLongOpt( "encrypt-master-password" ).hasArg().withDescription( "Encrypt master security password" ).create( ENCRYPT_MASTER_PASSWORD ) );
         options.addOption( OptionBuilder.withLongOpt( "encrypt-password" ).hasArg().withDescription( "Encrypt server password" ).create( ENCRYPT_PASSWORD ) );
         options.addOption( OptionBuilder.withLongOpt( "threads" ).hasArg().withDescription( "Thread count, for instance 2.0C where C is core multiplied" ).create( THREADS ) );
+        options.addOption( OptionBuilder.withLongOpt( "legacy-local-repository" ).withDescription( "Use Maven 2 Legacy Local Repository behaviour, ie no use of _maven.repositories. Can also be activated by using -Dmaven.legacyLocalRepo=true" ).create( LEGACY_LOCAL_REPOSITORY ) );
 
         // Adding this back in for compatibility with the verifier that hard codes this option.
-
         options.addOption( OptionBuilder.withLongOpt( "no-plugin-registry" ).withDescription( "Ineffective, only kept for backward compatibility" ).create( "npr" ) );
         options.addOption( OptionBuilder.withLongOpt( "check-plugin-updates" ).withDescription( "Ineffective, only kept for backward compatibility" ).create( "cpu" ) );
         options.addOption( OptionBuilder.withLongOpt( "update-plugins" ).withDescription( "Ineffective, only kept for backward compatibility" ).create( "up" ) );

File: maven-embedder/src/main/java/org/apache/maven/cli/logging/Slf4jLogger.java
Patch:
@@ -114,7 +114,7 @@ public boolean isFatalErrorEnabled()
     }
 
     /**
-     * <b>Warning</b>: ignored (always return <code>0</code>).
+     * <b>Warning</b>: ignored (always return <code>0 == Logger.LEVEL_DEBUG</code>).
      */
     public int getThreshold()
     {
@@ -129,7 +129,7 @@ public void setThreshold( int threshold )
     }
 
     /**
-     * <b>Warning</b>: ignored (always return <code>0</code>).
+     * <b>Warning</b>: ignored (always return <code>null</code>).
      */
     public Logger getChildLogger( String name )
     {

File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelProblem.java
Patch:
@@ -146,7 +146,8 @@ public Severity getSeverity()
         return severity;
     }
 
-    public Version getVersion() {
+    public Version getVersion()
+    {
         return version;
     }
     

File: maven-model-builder/src/main/java/org/apache/maven/model/building/ModelProblem.java
Patch:
@@ -41,7 +41,8 @@ enum Severity
 
     }
 
-    enum Version {
+    enum Version
+    {
         //based on ModeBuildingResult.validationLevel
         BASE,
         V20,

File: maven-model-builder/src/main/java/org/apache/maven/model/building/ModelProblemCollector.java
Patch:
@@ -19,9 +19,6 @@
  * under the License.
  */
 
-import java.util.List;
-import org.apache.maven.model.InputLocation;
-
 /**
  * Collects problems that are encountered during model building. The primary purpose of this component is to account for
  * the fact that the problem reporter has/should not have information about the calling context and hence cannot provide

File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/AbstractStringBasedModelInterpolator.java
Patch:
@@ -45,7 +45,6 @@
 import java.util.HashSet;
 import java.util.List;
 import java.util.Properties;
-import org.apache.maven.model.building.ModelProblem;
 import org.apache.maven.model.building.ModelProblem.Version;
 import org.apache.maven.model.building.ModelProblemCollectorRequest;
 
@@ -244,7 +243,8 @@ protected String interpolateInternal( String src, List<? extends ValueSource> va
                 }
                 catch ( InterpolationException e )
                 {
-                    problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE ).setMessage( e.getMessage() ).setException( e ));
+                    problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE )
+                        .setMessage( e.getMessage() ).setException( e ) );
                 }
 
                 interpolator.clearFeedback();

File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/ProblemDetectingValueSource.java
Patch:
@@ -20,7 +20,6 @@
  */
 
 import java.util.List;
-import org.apache.maven.model.building.ModelProblem;
 
 import org.apache.maven.model.building.ModelProblemCollector;
 import org.apache.maven.model.building.ModelProblem.Severity;
@@ -65,7 +64,7 @@ public Object getValue( String expression )
             {
                 msg += " Please use ${" + newPrefix + expression.substring( bannedPrefix.length() ) + "} instead.";
             }
-            problems.add( new ModelProblemCollectorRequest( Severity.WARNING, Version.V20 ).setMessage( msg ));
+            problems.add( new ModelProblemCollectorRequest( Severity.WARNING, Version.V20 ).setMessage( msg ) );
         }
 
         return value;

File: maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultDependencyManagementInjector.java
Patch:
@@ -50,7 +50,7 @@ public void injectManagement( Model model, ModelBuildingRequest request, ModelPr
         merger.mergeManagedDependencies( model );
     }
 
-    private static class ManagementModelMerger
+    protected static class ManagementModelMerger
         extends MavenModelMerger
     {
 

File: maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java
Patch:
@@ -53,7 +53,7 @@ public void injectManagement( Model model, ModelBuildingRequest request, ModelPr
         merger.mergeManagedBuildPlugins( model );
     }
 
-    private static class ManagementModelMerger
+    protected static class ManagementModelMerger
         extends MavenModelMerger
     {
 

File: maven-model-builder/src/main/java/org/apache/maven/model/normalization/DefaultModelNormalizer.java
Patch:
@@ -93,7 +93,7 @@ public void mergeDuplicates( Model model, ModelBuildingRequest request, ModelPro
         }
     }
 
-    private static class DuplicateMerger
+    protected static class DuplicateMerger
         extends MavenModelMerger
     {
 

File: maven-model-builder/src/main/java/org/apache/maven/model/plugin/DefaultReportingConverter.java
Patch:
@@ -108,9 +108,9 @@ public void convertReporting( Model model, ModelBuildingRequest request, ModelPr
             && request.getValidationLevel() >= ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1 )
         {
 
-            problems.add( new ModelProblemCollectorRequest( Severity.WARNING, Version.V31)
-                    .setMessage( "The <reporting> section is deprecated, please move the reports to the <configuration> section of the new Maven Site Plugin.")
-                    .setLocation( reporting.getLocation( "" ) ));
+            problems.add( new ModelProblemCollectorRequest( Severity.WARNING, Version.V31 )
+                    .setMessage( "The <reporting> section is deprecated, please move the reports to the <configuration> section of the new Maven Site Plugin." )
+                    .setLocation( reporting.getLocation( "" ) ) );
         }
 
         for ( ReportPlugin plugin : reporting.getPlugins() )

File: maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java
Patch:
@@ -71,7 +71,7 @@ public void injectProfile( Model model, Profile profile, ModelBuildingRequest re
         }
     }
 
-    private static class ProfileModelMerger
+    protected static class ProfileModelMerger
         extends MavenModelMerger
     {
 

File: maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/FileProfileActivator.java
Patch:
@@ -118,6 +118,8 @@ else if ( path.indexOf( "${basedir}" ) >= 0 )
             return false;
         }
 
+        interpolator.addValueSource( new MapBasedValueSource( context.getProjectProperties() ) );
+
         interpolator.addValueSource( new MapBasedValueSource( context.getUserProperties() ) );
 
         interpolator.addValueSource( new MapBasedValueSource( context.getSystemProperties() ) );

File: maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/JdkVersionProfileActivator.java
Patch:
@@ -65,7 +65,7 @@ public boolean isActive( Profile profile, ProfileActivationContext context, Mode
         {
             problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE )
                     .setMessage( "Failed to determine Java version for profile " + profile.getId() )
-                    .setLocation(activation.getLocation( "jdk" ) ) );
+                    .setLocation( activation.getLocation( "jdk" ) ) );
             return false;
         }
 

File: maven-aether-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java
Patch:
@@ -20,8 +20,8 @@
  */
 
 import org.apache.maven.model.building.ModelCache;
-import org.sonatype.aether.RepositoryCache;
-import org.sonatype.aether.RepositorySystemSession;
+import org.eclipse.aether.RepositoryCache;
+import org.eclipse.aether.RepositorySystemSession;
 
 /**
  * A model builder cache backed by the repository system cache.

File: maven-aether-provider/src/main/java/org/apache/maven/repository/internal/LocalSnapshotMetadata.java
Patch:
@@ -29,7 +29,7 @@
 import org.apache.maven.artifact.repository.metadata.Snapshot;
 import org.apache.maven.artifact.repository.metadata.SnapshotVersion;
 import org.apache.maven.artifact.repository.metadata.Versioning;
-import org.sonatype.aether.artifact.Artifact;
+import org.eclipse.aether.artifact.Artifact;
 
 /**
  * @author Benjamin Bentmann

File: maven-aether-provider/src/main/java/org/apache/maven/repository/internal/RemoteSnapshotMetadata.java
Patch:
@@ -33,7 +33,7 @@
 import org.apache.maven.artifact.repository.metadata.Snapshot;
 import org.apache.maven.artifact.repository.metadata.SnapshotVersion;
 import org.apache.maven.artifact.repository.metadata.Versioning;
-import org.sonatype.aether.artifact.Artifact;
+import org.eclipse.aether.artifact.Artifact;
 
 /**
  * @author Benjamin Bentmann

File: maven-aether-provider/src/main/java/org/apache/maven/repository/internal/VersionsMetadata.java
Patch:
@@ -26,8 +26,8 @@
 
 import org.apache.maven.artifact.repository.metadata.Metadata;
 import org.apache.maven.artifact.repository.metadata.Versioning;
-import org.sonatype.aether.artifact.Artifact;
-import org.sonatype.aether.util.artifact.ArtifactProperties;
+import org.eclipse.aether.artifact.Artifact;
+import org.eclipse.aether.artifact.ArtifactProperties;
 
 /**
  * @author Benjamin Bentmann

File: maven-compat/src/main/java/org/apache/maven/artifact/repository/DefaultArtifactRepositoryFactory.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.maven.repository.RepositorySystem;
 import org.codehaus.plexus.component.annotations.Component;
 import org.codehaus.plexus.component.annotations.Requirement;
-import org.sonatype.aether.RepositorySystemSession;
+import org.eclipse.aether.RepositorySystemSession;
 
 /**
  * @author jdcasey

File: maven-compat/src/main/java/org/apache/maven/project/ProjectUtils.java
Patch:
@@ -32,7 +32,7 @@
 import org.apache.maven.repository.RepositorySystem;
 import org.codehaus.plexus.PlexusContainer;
 import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
-import org.sonatype.aether.RepositorySystemSession;
+import org.eclipse.aether.RepositorySystemSession;
 
 // This class needs to stick around because it was exposed the the remote resources plugin started using it instead of
 // getting the repositories from the project.

File: maven-compat/src/test/java/org/apache/maven/project/ProjectClasspathTest.java
Patch:
@@ -25,8 +25,8 @@
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.repository.RepositorySystem;
 import org.apache.maven.repository.internal.DefaultArtifactDescriptorReader;
-import org.sonatype.aether.impl.ArtifactDescriptorReader;
-import org.sonatype.aether.impl.ArtifactResolver;
+import org.eclipse.aether.impl.ArtifactDescriptorReader;
+import org.eclipse.aether.impl.ArtifactResolver;
 
 public class ProjectClasspathTest
     extends AbstractMavenProjectTestCase

File: maven-core/src/main/java/org/apache/maven/LoggingRepositoryListener.java
Patch:
@@ -22,9 +22,9 @@
 import java.io.FileNotFoundException;
 
 import org.codehaus.plexus.logging.Logger;
-import org.sonatype.aether.AbstractRepositoryListener;
-import org.sonatype.aether.RepositoryEvent;
-import org.sonatype.aether.transfer.MetadataNotFoundException;
+import org.eclipse.aether.AbstractRepositoryListener;
+import org.eclipse.aether.RepositoryEvent;
+import org.eclipse.aether.transfer.MetadataNotFoundException;
 
 /**
  * @author Benjamin Bentmann

File: maven-core/src/main/java/org/apache/maven/classrealm/ArtifactClassRealmConstituent.java
Patch:
@@ -21,7 +21,7 @@
 
 import java.io.File;
 
-import org.sonatype.aether.artifact.Artifact;
+import org.eclipse.aether.artifact.Artifact;
 
 /**
  * @author Benjamin Bentmann

File: maven-core/src/main/java/org/apache/maven/classrealm/ClassRealmManager.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.maven.model.Model;
 import org.apache.maven.model.Plugin;
 import org.codehaus.plexus.classworlds.realm.ClassRealm;
-import org.sonatype.aether.artifact.Artifact;
+import org.eclipse.aether.artifact.Artifact;
 
 /**
  * Manages the class realms used by Maven. <strong>Warning:</strong> This is an internal utility interface that is only

File: maven-core/src/main/java/org/apache/maven/eventspy/EventSpy.java
Patch:
@@ -62,7 +62,7 @@ void init( Context context )
      * @see org.apache.maven.project.DependencyResolutionRequest
      * @see org.apache.maven.project.DependencyResolutionResultt
      * @see org.apache.maven.execution.ExecutionEvent
-     * @see org.sonatype.aether.RepositoryEvent
+     * @see org.eclipse.aether.RepositoryEvent
      */
     void onEvent( Object event )
         throws Exception;

File: maven-core/src/main/java/org/apache/maven/eventspy/internal/EventSpyDispatcher.java
Patch:
@@ -27,7 +27,7 @@
 import org.codehaus.plexus.component.annotations.Component;
 import org.codehaus.plexus.component.annotations.Requirement;
 import org.codehaus.plexus.logging.Logger;
-import org.sonatype.aether.RepositoryListener;
+import org.eclipse.aether.RepositoryListener;
 
 /**
  * Dispatches callbacks to all registered eventspies.

File: maven-core/src/main/java/org/apache/maven/eventspy/internal/EventSpyRepositoryListener.java
Patch:
@@ -19,9 +19,9 @@
  * under the License.
  */
 
-import org.sonatype.aether.AbstractRepositoryListener;
-import org.sonatype.aether.RepositoryEvent;
-import org.sonatype.aether.RepositoryListener;
+import org.eclipse.aether.AbstractRepositoryListener;
+import org.eclipse.aether.RepositoryEvent;
+import org.eclipse.aether.RepositoryListener;
 
 /**
  * Forwards repository events to eventspies.

File: maven-core/src/main/java/org/apache/maven/execution/MavenExecutionRequest.java
Patch:
@@ -32,9 +32,9 @@
 import org.apache.maven.settings.Proxy;
 import org.apache.maven.settings.Server;
 import org.codehaus.plexus.logging.Logger;
-import org.sonatype.aether.RepositoryCache;
-import org.sonatype.aether.repository.WorkspaceReader;
-import org.sonatype.aether.transfer.TransferListener;
+import org.eclipse.aether.RepositoryCache;
+import org.eclipse.aether.repository.WorkspaceReader;
+import org.eclipse.aether.transfer.TransferListener;
 
 /**
  * @author Jason van Zyl

File: maven-core/src/main/java/org/apache/maven/execution/MavenSession.java
Patch:
@@ -36,7 +36,7 @@
 import org.apache.maven.settings.Settings;
 import org.codehaus.plexus.PlexusContainer;
 import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
-import org.sonatype.aether.RepositorySystemSession;
+import org.eclipse.aether.RepositorySystemSession;
 
 /**
  * @author Jason van Zyl

File: maven-core/src/main/java/org/apache/maven/plugin/BuildPluginManager.java
Patch:
@@ -22,8 +22,8 @@
 import org.apache.maven.plugin.descriptor.MojoDescriptor;
 import org.apache.maven.plugin.descriptor.PluginDescriptor;
 import org.codehaus.plexus.classworlds.realm.ClassRealm;
-import org.sonatype.aether.RepositorySystemSession;
-import org.sonatype.aether.repository.RemoteRepository;
+import org.eclipse.aether.RepositorySystemSession;
+import org.eclipse.aether.repository.RemoteRepository;
 
 /**
  * @author Jason van Zyl

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultBuildPluginManager.java
Patch:
@@ -27,8 +27,8 @@
 import org.codehaus.plexus.classworlds.realm.ClassRealm;
 import org.codehaus.plexus.component.annotations.Component;
 import org.codehaus.plexus.component.annotations.Requirement;
-import org.sonatype.aether.RepositorySystemSession;
-import org.sonatype.aether.repository.RemoteRepository;
+import org.eclipse.aether.RepositorySystemSession;
+import org.eclipse.aether.repository.RemoteRepository;
 
 // TODO: the antrun plugin has its own configurator, the only plugin that does. might need to think about how that works
 // TODO: remove the coreArtifactFilterManager

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java
Patch:
@@ -29,7 +29,7 @@
 import org.apache.maven.project.MavenProject;
 import org.codehaus.plexus.classworlds.realm.ClassRealm;
 import org.codehaus.plexus.component.annotations.Component;
-import org.sonatype.aether.artifact.Artifact;
+import org.eclipse.aether.artifact.Artifact;
 
 /**
  * Default extension realm cache implementation. Assumes cached data does not change.

File: maven-core/src/main/java/org/apache/maven/plugin/ExtensionRealmCache.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.maven.project.ExtensionDescriptor;
 import org.apache.maven.project.MavenProject;
 import org.codehaus.plexus.classworlds.realm.ClassRealm;
-import org.sonatype.aether.artifact.Artifact;
+import org.eclipse.aether.artifact.Artifact;
 
 /**
  * Caches extension class realms. <strong>Warning:</strong> This is an internal utility interface that is only public

File: maven-core/src/main/java/org/apache/maven/plugin/LegacySupport.java
Patch:
@@ -20,7 +20,7 @@
  */
 
 import org.apache.maven.execution.MavenSession;
-import org.sonatype.aether.RepositorySystemSession;
+import org.eclipse.aether.RepositorySystemSession;
 
 /**
  * Helps to provide backward-compatibility with plugins that use legacy components. <strong>Warning:</strong> This is an

File: maven-core/src/main/java/org/apache/maven/plugin/MavenPluginManager.java
Patch:
@@ -25,9 +25,9 @@
 import org.apache.maven.model.Plugin;
 import org.apache.maven.plugin.descriptor.MojoDescriptor;
 import org.apache.maven.plugin.descriptor.PluginDescriptor;
-import org.sonatype.aether.RepositorySystemSession;
-import org.sonatype.aether.graph.DependencyFilter;
-import org.sonatype.aether.repository.RemoteRepository;
+import org.eclipse.aether.RepositorySystemSession;
+import org.eclipse.aether.graph.DependencyFilter;
+import org.eclipse.aether.repository.RemoteRepository;
 
 /**
  * Provides basic services to manage Maven plugins and their mojos. This component is kept general in its design such

File: maven-core/src/main/java/org/apache/maven/plugin/PluginDescriptorCache.java
Patch:
@@ -23,8 +23,8 @@
 
 import org.apache.maven.model.Plugin;
 import org.apache.maven.plugin.descriptor.PluginDescriptor;
-import org.sonatype.aether.RepositorySystemSession;
-import org.sonatype.aether.repository.RemoteRepository;
+import org.eclipse.aether.RepositorySystemSession;
+import org.eclipse.aether.repository.RemoteRepository;
 
 /**
  * Caches raw plugin descriptors. A raw plugin descriptor is a descriptor that has just been extracted from the plugin

File: maven-core/src/main/java/org/apache/maven/plugin/PluginRealmCache.java
Patch:
@@ -26,9 +26,9 @@
 import org.apache.maven.model.Plugin;
 import org.apache.maven.project.MavenProject;
 import org.codehaus.plexus.classworlds.realm.ClassRealm;
-import org.sonatype.aether.RepositorySystemSession;
-import org.sonatype.aether.graph.DependencyFilter;
-import org.sonatype.aether.repository.RemoteRepository;
+import org.eclipse.aether.RepositorySystemSession;
+import org.eclipse.aether.graph.DependencyFilter;
+import org.eclipse.aether.repository.RemoteRepository;
 
 /**
  * Caches plugin class realms. <strong>Warning:</strong> This is an internal utility interface that is only public for

File: maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultLegacySupport.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.maven.execution.MavenSession;
 import org.apache.maven.plugin.LegacySupport;
 import org.codehaus.plexus.component.annotations.Component;
-import org.sonatype.aether.RepositorySystemSession;
+import org.eclipse.aether.RepositorySystemSession;
 
 /**
  * Helps to provide backward-compatibility with plugins that use legacy components. <strong>Warning:</strong> This is an

File: maven-core/src/main/java/org/apache/maven/plugin/prefix/DefaultPluginPrefixRequest.java
Patch:
@@ -25,8 +25,8 @@
 import org.apache.maven.execution.MavenSession;
 import org.apache.maven.model.Model;
 import org.apache.maven.project.MavenProject;
-import org.sonatype.aether.RepositorySystemSession;
-import org.sonatype.aether.repository.RemoteRepository;
+import org.eclipse.aether.RepositorySystemSession;
+import org.eclipse.aether.repository.RemoteRepository;
 
 /**
  * Collects settings required to resolve a plugin prefix.

File: maven-core/src/main/java/org/apache/maven/plugin/prefix/NoPluginFoundForPrefixException.java
Patch:
@@ -21,8 +21,8 @@
 
 import java.util.List;
 
-import org.sonatype.aether.repository.LocalRepository;
-import org.sonatype.aether.repository.RemoteRepository;
+import org.eclipse.aether.repository.LocalRepository;
+import org.eclipse.aether.repository.RemoteRepository;
 
 public class NoPluginFoundForPrefixException
     extends Exception

File: maven-core/src/main/java/org/apache/maven/plugin/prefix/PluginPrefixRequest.java
Patch:
@@ -22,8 +22,8 @@
 import java.util.List;
 
 import org.apache.maven.model.Model;
-import org.sonatype.aether.RepositorySystemSession;
-import org.sonatype.aether.repository.RemoteRepository;
+import org.eclipse.aether.RepositorySystemSession;
+import org.eclipse.aether.repository.RemoteRepository;
 
 /**
  * Collects settings required to resolve a plugin prefix.

File: maven-core/src/main/java/org/apache/maven/plugin/prefix/PluginPrefixResult.java
Patch:
@@ -1,6 +1,6 @@
 package org.apache.maven.plugin.prefix;
 
-import org.sonatype.aether.repository.ArtifactRepository;
+import org.eclipse.aether.repository.ArtifactRepository;
 
 /*
  * Licensed to the Apache Software Foundation (ASF) under one

File: maven-core/src/main/java/org/apache/maven/plugin/prefix/internal/DefaultPluginPrefixResult.java
Patch:
@@ -21,7 +21,7 @@
 
 import org.apache.maven.model.Plugin;
 import org.apache.maven.plugin.prefix.PluginPrefixResult;
-import org.sonatype.aether.repository.ArtifactRepository;
+import org.eclipse.aether.repository.ArtifactRepository;
 
 /**
  * Describes the result of a plugin prefix resolution request.

File: maven-core/src/main/java/org/apache/maven/plugin/version/DefaultPluginVersionRequest.java
Patch:
@@ -26,8 +26,8 @@
 import org.apache.maven.model.Model;
 import org.apache.maven.model.Plugin;
 import org.apache.maven.project.MavenProject;
-import org.sonatype.aether.RepositorySystemSession;
-import org.sonatype.aether.repository.RemoteRepository;
+import org.eclipse.aether.RepositorySystemSession;
+import org.eclipse.aether.repository.RemoteRepository;
 
 /**
  * Collects settings required to resolve the version for a plugin.

File: maven-core/src/main/java/org/apache/maven/plugin/version/PluginVersionRequest.java
Patch:
@@ -22,8 +22,8 @@
 import java.util.List;
 
 import org.apache.maven.model.Model;
-import org.sonatype.aether.RepositorySystemSession;
-import org.sonatype.aether.repository.RemoteRepository;
+import org.eclipse.aether.RepositorySystemSession;
+import org.eclipse.aether.repository.RemoteRepository;
 
 /**
  * Collects settings required to resolve the version for a plugin.

File: maven-core/src/main/java/org/apache/maven/plugin/version/PluginVersionResolutionException.java
Patch:
@@ -21,8 +21,8 @@
 
 import java.util.List;
 
-import org.sonatype.aether.repository.LocalRepository;
-import org.sonatype.aether.repository.RemoteRepository;
+import org.eclipse.aether.repository.LocalRepository;
+import org.eclipse.aether.repository.RemoteRepository;
 
 public class PluginVersionResolutionException
     extends Exception

File: maven-core/src/main/java/org/apache/maven/plugin/version/PluginVersionResult.java
Patch:
@@ -19,7 +19,7 @@
  * under the License.
  */
 
-import org.sonatype.aether.repository.ArtifactRepository;
+import org.eclipse.aether.repository.ArtifactRepository;
 
 /**
  * Describes the result of a plugin version resolution request.

File: maven-core/src/main/java/org/apache/maven/plugin/version/internal/DefaultPluginVersionResult.java
Patch:
@@ -20,7 +20,7 @@
  */
 
 import org.apache.maven.plugin.version.PluginVersionResult;
-import org.sonatype.aether.repository.ArtifactRepository;
+import org.eclipse.aether.repository.ArtifactRepository;
 
 /**
  * Describes the result of a plugin version resolution request.

File: maven-core/src/main/java/org/apache/maven/project/DefaultDependencyResolutionRequest.java
Patch:
@@ -19,8 +19,8 @@
  * under the License.
  */
 
-import org.sonatype.aether.RepositorySystemSession;
-import org.sonatype.aether.graph.DependencyFilter;
+import org.eclipse.aether.RepositorySystemSession;
+import org.eclipse.aether.graph.DependencyFilter;
 
 /**
  * @author Benjamin Bentmann

File: maven-core/src/main/java/org/apache/maven/project/DefaultDependencyResolutionResult.java
Patch:
@@ -25,8 +25,8 @@
 import java.util.List;
 import java.util.Map;
 
-import org.sonatype.aether.graph.Dependency;
-import org.sonatype.aether.graph.DependencyNode;
+import org.eclipse.aether.graph.Dependency;
+import org.eclipse.aether.graph.DependencyNode;
 
 /**
  * @author Benjamin Bentmann

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingRequest.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.model.Profile;
 import org.apache.maven.model.building.ModelBuildingRequest;
-import org.sonatype.aether.RepositorySystemSession;
+import org.eclipse.aether.RepositorySystemSession;
 
 public class DefaultProjectBuildingRequest
     implements ProjectBuildingRequest

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java
Patch:
@@ -26,7 +26,7 @@
 
 import org.codehaus.plexus.classworlds.realm.ClassRealm;
 import org.codehaus.plexus.component.annotations.Component;
-import org.sonatype.aether.graph.DependencyFilter;
+import org.eclipse.aether.graph.DependencyFilter;
 
 /**
  * Default project realm cache implementation. Assumes cached data does not change.

File: maven-core/src/main/java/org/apache/maven/project/DependencyResolutionRequest.java
Patch:
@@ -19,8 +19,8 @@
  * under the License.
  */
 
-import org.sonatype.aether.RepositorySystemSession;
-import org.sonatype.aether.graph.DependencyFilter;
+import org.eclipse.aether.RepositorySystemSession;
+import org.eclipse.aether.graph.DependencyFilter;
 
 /**
  * A request to resolve the dependencies of a project.

File: maven-core/src/main/java/org/apache/maven/project/DependencyResolutionResult.java
Patch:
@@ -21,8 +21,8 @@
 
 import java.util.List;
 
-import org.sonatype.aether.graph.Dependency;
-import org.sonatype.aether.graph.DependencyNode;
+import org.eclipse.aether.graph.Dependency;
+import org.eclipse.aether.graph.DependencyNode;
 
 /**
  * The result of a project dependency resolution.

File: maven-core/src/main/java/org/apache/maven/project/MavenProject.java
Patch:
@@ -56,8 +56,8 @@
 import org.codehaus.plexus.logging.Logger;
 import org.codehaus.plexus.util.StringUtils;
 import org.codehaus.plexus.util.xml.Xpp3Dom;
-import org.sonatype.aether.graph.DependencyFilter;
-import org.sonatype.aether.repository.RemoteRepository;
+import org.eclipse.aether.graph.DependencyFilter;
+import org.eclipse.aether.repository.RemoteRepository;
 
 import java.io.File;
 import java.io.IOException;

File: maven-core/src/main/java/org/apache/maven/project/ProjectBuildingRequest.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.model.Profile;
 import org.apache.maven.model.building.ModelBuildingRequest;
-import org.sonatype.aether.RepositorySystemSession;
+import org.eclipse.aether.RepositorySystemSession;
 
 public interface ProjectBuildingRequest
 {

File: maven-core/src/main/java/org/apache/maven/project/ProjectRealmCache.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.List;
 
 import org.codehaus.plexus.classworlds.realm.ClassRealm;
-import org.sonatype.aether.graph.DependencyFilter;
+import org.eclipse.aether.graph.DependencyFilter;
 
 /**
  * Caches project class realms. <strong>Warning:</strong> This is an internal utility interface that is only public for

File: maven-core/src/main/java/org/apache/maven/repository/RepositorySystem.java
Patch:
@@ -34,7 +34,7 @@
 import org.apache.maven.model.Repository;
 import org.apache.maven.settings.Mirror;
 import org.apache.maven.settings.Server;
-import org.sonatype.aether.RepositorySystemSession;
+import org.eclipse.aether.RepositorySystemSession;
 
 /**
  * @author Jason van Zyl

File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/BuildPluginManagerStub.java
Patch:
@@ -24,8 +24,8 @@
 import org.apache.maven.plugin.descriptor.MojoDescriptor;
 import org.apache.maven.plugin.descriptor.PluginDescriptor;
 import org.codehaus.plexus.classworlds.realm.ClassRealm;
-import org.sonatype.aether.RepositorySystemSession;
-import org.sonatype.aether.repository.RemoteRepository;
+import org.eclipse.aether.RepositorySystemSession;
+import org.eclipse.aether.repository.RemoteRepository;
 
 /**
  * @author Kristian Rosenvold

File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/PluginPrefixResolverStub.java
Patch:
@@ -19,7 +19,7 @@
 import org.apache.maven.plugin.prefix.PluginPrefixRequest;
 import org.apache.maven.plugin.prefix.PluginPrefixResolver;
 import org.apache.maven.plugin.prefix.PluginPrefixResult;
-import org.sonatype.aether.repository.ArtifactRepository;
+import org.eclipse.aether.repository.ArtifactRepository;
 
 /**
  * @author Kristian Rosenvold

File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/PluginVersionResolverStub.java
Patch:
@@ -19,7 +19,7 @@
 import org.apache.maven.plugin.version.PluginVersionResolutionException;
 import org.apache.maven.plugin.version.PluginVersionResolver;
 import org.apache.maven.plugin.version.PluginVersionResult;
-import org.sonatype.aether.repository.ArtifactRepository;
+import org.eclipse.aether.repository.ArtifactRepository;
 
 /**
  * @author Kristian Rosenvold

File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/ProjectDependenciesResolverStub.java
Patch:
@@ -24,9 +24,9 @@
 import org.apache.maven.project.DependencyResolutionRequest;
 import org.apache.maven.project.DependencyResolutionResult;
 import org.apache.maven.project.MavenProject;
-import org.sonatype.aether.graph.Dependency;
-import org.sonatype.aether.graph.DependencyNode;
-import org.sonatype.aether.util.graph.DefaultDependencyNode;
+import org.eclipse.aether.graph.DefaultDependencyNode;
+import org.eclipse.aether.graph.Dependency;
+import org.eclipse.aether.graph.DependencyNode;
 
 import java.util.Collection;
 import java.util.Collections;

File: maven-core/src/test/java/org/apache/maven/repository/TestRepositorySystem.java
Patch:
@@ -48,7 +48,7 @@
 import org.codehaus.plexus.component.annotations.Component;
 import org.codehaus.plexus.component.annotations.Requirement;
 import org.codehaus.plexus.util.FileUtils;
-import org.sonatype.aether.RepositorySystemSession;
+import org.eclipse.aether.RepositorySystemSession;
 
 /**
  * @author Benjamin Bentmann

File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -55,7 +55,6 @@
 import org.apache.maven.lifecycle.LifecycleExecutionException;
 import org.apache.maven.lifecycle.internal.LifecycleWeaveBuilder;
 import org.apache.maven.model.building.ModelProcessor;
-import org.apache.maven.plugin.PluginRealmCache;
 import org.apache.maven.project.MavenProject;
 import org.apache.maven.properties.internal.EnvironmentUtils;
 import org.apache.maven.settings.building.DefaultSettingsBuildingRequest;
@@ -74,10 +73,10 @@
 import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
 import org.codehaus.plexus.logging.LoggerManager;
 import org.codehaus.plexus.util.StringUtils;
+import org.eclipse.aether.transfer.TransferListener;
 import org.slf4j.ILoggerFactory;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.sonatype.aether.transfer.TransferListener;
 import org.sonatype.plexus.components.cipher.DefaultPlexusCipher;
 import org.sonatype.plexus.components.sec.dispatcher.DefaultSecDispatcher;
 import org.sonatype.plexus.components.sec.dispatcher.SecDispatcher;

File: maven-embedder/src/main/java/org/apache/maven/cli/transfer/ConsoleMavenTransferListener.java
Patch:
@@ -23,9 +23,9 @@
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 
-import org.sonatype.aether.transfer.TransferCancelledException;
-import org.sonatype.aether.transfer.TransferEvent;
-import org.sonatype.aether.transfer.TransferResource;
+import org.eclipse.aether.transfer.TransferCancelledException;
+import org.eclipse.aether.transfer.TransferEvent;
+import org.eclipse.aether.transfer.TransferResource;
 
 /**
  * Console download progress meter.

File: maven-embedder/src/main/java/org/apache/maven/cli/transfer/QuietMavenTransferListener.java
Patch:
@@ -19,7 +19,7 @@
  * under the License.
  */
 
-import org.sonatype.aether.transfer.AbstractTransferListener;
+import org.eclipse.aether.transfer.AbstractTransferListener;
 
 /**
  * @author Benjamin Bentmann

File: maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java
Patch:
@@ -135,7 +135,7 @@ public CLIManager()
         options.addOption( OptionBuilder.withLongOpt( "encrypt-master-password" ).hasArg().withDescription( "Encrypt master security password" ).create( ENCRYPT_MASTER_PASSWORD ) );
         options.addOption( OptionBuilder.withLongOpt( "encrypt-password" ).hasArg().withDescription( "Encrypt server password" ).create( ENCRYPT_PASSWORD ) );
         options.addOption( OptionBuilder.withLongOpt( "threads" ).hasArg().withDescription( "Thread count, for instance 2.0C where C is core multiplied" ).create( THREADS ) );
-        options.addOption( OptionBuilder.withLongOpt( "legacy-local-repository" ).withDescription( "Use Laven 2 Legacy Local Repository behaviour, ie no use of _maven.repositories. Can be activated using -Dmaven.legacyLocalRepo=true" ).create( LEGACY_LOCAL_REPOSITORY ) );
+        options.addOption( OptionBuilder.withLongOpt( "legacy-local-repository" ).withDescription( "Use Maven 2 Legacy Local Repository behaviour, ie no use of _maven.repositories. Can be activated using -Dmaven.legacyLocalRepo=true" ).create( LEGACY_LOCAL_REPOSITORY ) );
 
         // Adding this back in for compatibility with the verifier that hard codes this option.
         options.addOption( OptionBuilder.withLongOpt( "no-plugin-registry" ).withDescription( "Ineffective, only kept for backward compatibility" ).create( "npr" ) );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5214DontMapWsdlToJar.java
Patch:
@@ -30,7 +30,7 @@ public class MavenITmng5214DontMapWsdlToJar extends AbstractMavenIntegrationTest
 {
     public MavenITmng5214DontMapWsdlToJar()
     {
-        super( "[3.0.5,)" );
+        super( "[3.1,)" );
     }
     
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5280SettingsProfilesRepositoriesOrderTest.java
Patch:
@@ -52,7 +52,7 @@ public class MavenITmng5280SettingsProfilesRepositoriesOrderTest
 
     public MavenITmng5280SettingsProfilesRepositoriesOrderTest()
     {
-        super( "(3.0.4,)" );
+        super( "(3.1,)" );
     }
 
     public void setUp()

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5338FileOptionToDirectory.java
Patch:
@@ -36,7 +36,7 @@ public class MavenITmng5338FileOptionToDirectory
 
     public MavenITmng5338FileOptionToDirectory()
     {
-        super( "(3.0.4,)" );
+        super( "(3.1,)" );
     }
 
     public void setUp()

File: maven-core/src/main/java/org/apache/maven/DefaultMaven.java
Patch:
@@ -358,7 +358,7 @@ else if ( request.isUpdateSnapshots() )
 
         LocalRepository localRepo = new LocalRepository( request.getLocalRepository().getBasedir() );
 
-        if ( request.isUseSimpleLocalRepostoryManager() )
+        if ( request.isUseSimpleLocalRepositoryManager() )
         {
             try
             {

File: maven-core/src/main/java/org/apache/maven/execution/MavenExecutionRequest.java
Patch:
@@ -286,11 +286,11 @@ public interface MavenExecutionRequest
     /**
      * @since 3.1
      */
-    boolean isUseSimpleLocalRepostoryManager();
+    boolean isUseSimpleLocalRepositoryManager();
 
     /**
      * @since 3.1
      */
-    MavenExecutionRequest setUseSimpleLocalRepostoryManager( boolean useSimpleLocalRepostoryManager );
+    MavenExecutionRequest setUseSimpleLocalRepositoryManager( boolean useSimpleLocalRepositoryManager );
 
 }

File: maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java
Patch:
@@ -137,10 +137,10 @@ public CLIManager()
         options.addOption( OptionBuilder.withLongOpt( "threads" ).hasArg().withDescription( "Thread count, for instance 2.0C where C is core multiplied" ).create( THREADS ) );
 
         options.addOption( OptionBuilder.withLongOpt( "simple-local-repository-manager" ).withDescription(
-            "Use a simple local Repository Manager (no use of _maven.repositories) can be activated using -Dmaven.simpleLocalRepoMan=true" ).create(
+            "Use a simple Local Repository Manager, ie no use of _maven.repositories. Can be activated using -Dmaven.simpleLocalRepoMan=true" ).create(
             SIMPLE_LOCAL_REPOSITORY_MANAGER ) );
-        // Adding this back in for compatibility with the verifier that hard codes this option.
 
+        // Adding this back in for compatibility with the verifier that hard codes this option.
         options.addOption( OptionBuilder.withLongOpt( "no-plugin-registry" ).withDescription( "Ineffective, only kept for backward compatibility" ).create( "npr" ) );
         options.addOption( OptionBuilder.withLongOpt( "check-plugin-updates" ).withDescription( "Ineffective, only kept for backward compatibility" ).create( "cpu" ) );
         options.addOption( OptionBuilder.withLongOpt( "update-plugins" ).withDescription( "Ineffective, only kept for backward compatibility" ).create( "up" ) );

File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -544,7 +544,7 @@ private void repository( CliRequest cliRequest )
     {
         if ( cliRequest.commandLine.hasOption( CLIManager.SIMPLE_LOCAL_REPOSITORY_MANAGER ) || Boolean.getBoolean( "maven.simpleLocalRepoMan" ) )
         {
-           cliRequest.request.setUseSimpleLocalRepostoryManager( true );
+           cliRequest.request.setUseSimpleLocalRepositoryManager( true );
         }
     }
 

File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -342,10 +342,10 @@ else if ( cliRequest.quiet )
                 // Ignore
                 //
             }
-
-            slf4jConfiguration.setLoggerFile( logFile ); // is it really useful? redirecting stdout/stderr isn't sufficient in all cases?
         }
 
+        slf4jConfiguration.activate();
+
         plexusLoggerManager = new Slf4jLoggerManager();
         slf4jLogger = slf4jLoggerFactory.getLogger( this.getClass().getName() );
     }

File: maven-embedder/src/main/java/org/apache/maven/cli/logging/impl/Log4j2Configuration.java
Patch:
@@ -19,8 +19,6 @@
  * under the License.
  */
 
-import java.io.File;
-
 import org.apache.maven.cli.logging.BaseSlf4jConfiguration;
 
 /**
@@ -53,7 +51,7 @@ public void setRootLoggerLevel( Level level )
     }
 
     @Override
-    public void setLoggerFile( File output )
+    public void activate()
     {
         // no op
     }

File: maven-embedder/src/main/java/org/apache/maven/cli/logging/impl/LogbackConfiguration.java
Patch:
@@ -19,8 +19,6 @@
  * under the License.
  */
 
-import java.io.File;
-
 import org.apache.maven.cli.logging.BaseSlf4jConfiguration;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -55,7 +53,7 @@ public void setRootLoggerLevel( Level level )
     }
 
     @Override
-    public void setLoggerFile( File output )
+    public void activate()
     {
         // no op
     }

File: maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java
Patch:
@@ -86,7 +86,7 @@ private interface Item
     private static class IntegerItem
         implements Item
     {
-    	private static final BigInteger BIG_INTEGER_ZERO = new BigInteger( "0" );
+        private static final BigInteger BIG_INTEGER_ZERO = new BigInteger( "0" );
 
         private final BigInteger value;
 

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/transform/ArtifactTransformationManager.java
Patch:
@@ -40,7 +40,6 @@ public interface ArtifactTransformationManager
      *
      * @param artifact           Artifact to be transformed.
      * @param request the repositories to check
-     * @param localRepository    the local repository
      */
     void transformForResolve( Artifact artifact, RepositoryRequest request )
         throws ArtifactResolutionException, ArtifactNotFoundException;

File: maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionResult.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import java.util.ArrayList;
 import java.util.Collections;
 import java.util.IdentityHashMap;
 import java.util.List;
@@ -39,7 +38,7 @@ public class DefaultMavenExecutionResult
 
     private DependencyResolutionResult dependencyResolutionResult;
 
-    private List<Throwable> exceptions = new CopyOnWriteArrayList<Throwable>(  );
+    private List<Throwable> exceptions = new CopyOnWriteArrayList<Throwable>();
 
     private Map<MavenProject, BuildSummary> buildSummaries;
 

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecyclePluginAnalyzer.java
Patch:
@@ -80,8 +80,8 @@ public Set<Plugin> getPluginsBoundByDefaultToAllLifecycles( String packaging )
     {
         if ( logger.isDebugEnabled() )
         {
-            logger.debug( "Looking up lifecyle mappings for packaging " + packaging + " from " +
-                Thread.currentThread().getContextClassLoader() );
+            logger.debug( "Looking up lifecyle mappings for packaging " + packaging + " from "
+                + Thread.currentThread().getContextClassLoader() );
         }
 
         LifecycleMapping lifecycleMappingForPackaging = lifecycleMappings.get( packaging );

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/ExecutionPlanItem.java
Patch:
@@ -94,8 +94,8 @@ public Plugin getPlugin()
     @Override
     public String toString()
     {
-        return "ExecutionPlanItem{" + ", mojoExecution=" + mojoExecution + ", schedule=" + schedule + '}' +
-            super.toString();
+        return "ExecutionPlanItem{" + ", mojoExecution=" + mojoExecution + ", schedule=" + schedule + '}'
+            + super.toString();
     }
 
 }

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleWeaveBuilder.java
Patch:
@@ -212,7 +212,8 @@ public ProjectSegment call()
             {
                 Iterator<ExecutionPlanItem> planItems = executionPlan.iterator();
                 ExecutionPlanItem current = planItems.hasNext() ? planItems.next() : null;
-                ThreadLockedArtifact threadLockedArtifact = (ThreadLockedArtifact)projectBuild.getProject().getArtifact();
+                ThreadLockedArtifact threadLockedArtifact =
+                    (ThreadLockedArtifact) projectBuild.getProject().getArtifact();
                 if ( threadLockedArtifact != null )
                 {
                     threadLockedArtifact.attachToThread();

File: maven-compat/src/main/java/org/apache/maven/profiles/activation/SystemPropertyProfileActivator.java
Patch:
@@ -63,7 +63,7 @@ public boolean isActive( Profile profile )
                     + profile.getId() + "'" );
             }
 
-            if ( name.startsWith("!") )
+            if ( name.startsWith( "!" ) )
             {
                 reverseName = true;
                 name = name.substring( 1 );

File: maven-core/src/main/java/org/apache/maven/model/plugin/DefaultLifecycleBindingsInjector.java
Patch:
@@ -66,9 +66,9 @@ public void injectLifecycleBindings( Model model, ModelBuildingRequest request,
 
         if ( defaultPlugins == null )
         {
-            problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE)
+            problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE )
                     .setMessage( "Unknown packaging: " + packaging )
-                    .setLocation( model.getLocation( "packaging" )));
+                    .setLocation( model.getLocation( "packaging" ) ) );
         }
         else if ( !defaultPlugins.isEmpty() )
         {

File: maven-core/src/main/java/org/apache/maven/plugin/internal/PluginDependenciesResolver.java
Patch:
@@ -50,7 +50,7 @@ public interface PluginDependenciesResolver
      * @return The resolved plugin artifact, never {@code null}.
      * @throws PluginResolutionException If the plugin artifact could not be resolved.
      */
-    public Artifact resolve( Plugin plugin, List<RemoteRepository> repositories, RepositorySystemSession session )
+    Artifact resolve( Plugin plugin, List<RemoteRepository> repositories, RepositorySystemSession session )
         throws PluginResolutionException;
 
     /**

File: maven-core/src/main/java/org/apache/maven/plugin/prefix/PluginPrefixResult.java
Patch:
@@ -1,7 +1,5 @@
 package org.apache.maven.plugin.prefix;
 
-import org.sonatype.aether.repository.ArtifactRepository;
-
 /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
@@ -11,7 +9,7 @@
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *  http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
@@ -21,6 +19,8 @@
  * under the License.
  */
 
+import org.sonatype.aether.repository.ArtifactRepository;
+
 /**
  * Describes the result of a plugin prefix resolution request.
  * 

File: maven-core/src/main/java/org/apache/maven/project/DefaultModelBuildingListener.java
Patch:
@@ -116,7 +116,7 @@ public void buildExtensionsAssembled( ModelBuildingEvent event )
             catch ( PluginResolutionException e )
             {
                 event.getProblems().add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE )
-                        .setMessage( "Unresolveable build extension: " + e.getMessage())
+                        .setMessage( "Unresolveable build extension: " + e.getMessage() )
                         .setException( e ) );
             }
             catch ( PluginVersionResolutionException e )

File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelProblem.java
Patch:
@@ -146,7 +146,8 @@ public Severity getSeverity()
         return severity;
     }
 
-    public Version getVersion() {
+    public Version getVersion()
+    {
         return version;
     }
     

File: maven-model-builder/src/main/java/org/apache/maven/model/building/ModelProblem.java
Patch:
@@ -41,7 +41,8 @@ enum Severity
 
     }
 
-    enum Version {
+    enum Version
+    {
         //based on ModeBuildingResult.validationLevel
         BASE,
         V20,

File: maven-model-builder/src/main/java/org/apache/maven/model/building/ModelProblemCollector.java
Patch:
@@ -19,9 +19,6 @@
  * under the License.
  */
 
-import java.util.List;
-import org.apache.maven.model.InputLocation;
-
 /**
  * Collects problems that are encountered during model building. The primary purpose of this component is to account for
  * the fact that the problem reporter has/should not have information about the calling context and hence cannot provide

File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/AbstractStringBasedModelInterpolator.java
Patch:
@@ -45,7 +45,6 @@
 import java.util.HashSet;
 import java.util.List;
 import java.util.Properties;
-import org.apache.maven.model.building.ModelProblem;
 import org.apache.maven.model.building.ModelProblem.Version;
 import org.apache.maven.model.building.ModelProblemCollectorRequest;
 
@@ -244,7 +243,8 @@ protected String interpolateInternal( String src, List<? extends ValueSource> va
                 }
                 catch ( InterpolationException e )
                 {
-                    problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE ).setMessage( e.getMessage() ).setException( e ));
+                    problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE )
+                        .setMessage( e.getMessage() ).setException( e ) );
                 }
 
                 interpolator.clearFeedback();

File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/ProblemDetectingValueSource.java
Patch:
@@ -20,7 +20,6 @@
  */
 
 import java.util.List;
-import org.apache.maven.model.building.ModelProblem;
 
 import org.apache.maven.model.building.ModelProblemCollector;
 import org.apache.maven.model.building.ModelProblem.Severity;
@@ -65,7 +64,7 @@ public Object getValue( String expression )
             {
                 msg += " Please use ${" + newPrefix + expression.substring( bannedPrefix.length() ) + "} instead.";
             }
-            problems.add( new ModelProblemCollectorRequest( Severity.WARNING, Version.V20 ).setMessage( msg ));
+            problems.add( new ModelProblemCollectorRequest( Severity.WARNING, Version.V20 ).setMessage( msg ) );
         }
 
         return value;

File: maven-model-builder/src/main/java/org/apache/maven/model/plugin/DefaultReportingConverter.java
Patch:
@@ -108,9 +108,9 @@ public void convertReporting( Model model, ModelBuildingRequest request, ModelPr
             && request.getValidationLevel() >= ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1 )
         {
 
-            problems.add( new ModelProblemCollectorRequest( Severity.WARNING, Version.V31)
-                    .setMessage( "The <reporting> section is deprecated, please move the reports to the <configuration> section of the new Maven Site Plugin.")
-                    .setLocation( reporting.getLocation( "" ) ));
+            problems.add( new ModelProblemCollectorRequest( Severity.WARNING, Version.V31 )
+                    .setMessage( "The <reporting> section is deprecated, please move the reports to the <configuration> section of the new Maven Site Plugin." )
+                    .setLocation( reporting.getLocation( "" ) ) );
         }
 
         for ( ReportPlugin plugin : reporting.getPlugins() )

File: maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/JdkVersionProfileActivator.java
Patch:
@@ -65,7 +65,7 @@ public boolean isActive( Profile profile, ProfileActivationContext context, Mode
         {
             problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE )
                     .setMessage( "Failed to determine Java version for profile " + profile.getId() )
-                    .setLocation(activation.getLocation( "jdk" ) ) );
+                    .setLocation( activation.getLocation( "jdk" ) ) );
             return false;
         }
 

File: maven-artifact/src/main/java/org/apache/maven/artifact/repository/ArtifactRepositoryPolicy.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.util.Calendar;
 import java.util.Date;
-import java.util.TimeZone;
 
 /**
  * Describes a set of policies for a repository to use under certain conditions.

File: maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java
Patch:
@@ -72,7 +72,7 @@ public int compareTo( ArtifactVersion otherVersion )
     {
         if ( otherVersion instanceof DefaultArtifactVersion )
         {
-            return this.comparable.compareTo( ( (DefaultArtifactVersion) otherVersion).comparable );
+            return this.comparable.compareTo( ( (DefaultArtifactVersion) otherVersion ).comparable );
         }
         else
         {

File: maven-compat/src/main/java/org/apache/maven/artifact/ArtifactScopeEnum.java
Patch:
@@ -108,7 +108,7 @@ public boolean encloses( ArtifactScopeEnum scope )
     {
         final ArtifactScopeEnum s = checkScope( scope );
 
-    	// system scope is historic only - and simple
+        // system scope is historic only - and simple
         if ( id == system.id )
         {
             return scope.id == system.id;

File: maven-compat/src/main/java/org/apache/maven/artifact/repository/metadata/MetadataBridge.java
Patch:
@@ -24,7 +24,6 @@
 import org.apache.maven.artifact.metadata.ArtifactMetadata;
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.artifact.repository.DefaultArtifactRepository;
-import org.apache.maven.artifact.repository.metadata.RepositoryMetadata;
 import org.codehaus.plexus.util.FileUtils;
 import org.sonatype.aether.RepositoryException;
 import org.sonatype.aether.metadata.MergeableMetadata;

File: maven-compat/src/main/java/org/apache/maven/project/interpolation/AbstractStringBasedModelInterpolator.java
Patch:
@@ -283,7 +283,7 @@ protected List<InterpolationPostProcessor> createPostProcessors( final Model mod
                                                                                                          pathTranslator ) );
     }
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings( "unchecked" )
     protected String interpolateInternal( String src, List<ValueSource> valueSources,
                                           List<InterpolationPostProcessor> postProcessors, boolean debug )
         throws ModelInterpolationException
@@ -296,7 +296,7 @@ protected String interpolateInternal( String src, List<ValueSource> valueSources
         Logger logger = getLogger();
 
         String result = src;
-        synchronized( this )
+        synchronized ( this )
         {
 
             for ( ValueSource vs : valueSources )
@@ -315,7 +315,7 @@ protected String interpolateInternal( String src, List<ValueSource> valueSources
                 {
                     result = interpolator.interpolate( result, recursionInterceptor );
                 }
-                catch( InterpolationException e )
+                catch ( InterpolationException e )
                 {
                     throw new ModelInterpolationException( e.getMessage(), e );
                 }

File: maven-compat/src/main/java/org/apache/maven/repository/MetadataGraphNode.java
Patch:
@@ -41,8 +41,8 @@ public class MetadataGraphNode
 
     public MetadataGraphNode()
     {
-        inNodes = new ArrayList<MetadataGraphNode>(4);
-        exNodes = new ArrayList<MetadataGraphNode>(8);
+        inNodes = new ArrayList<MetadataGraphNode>( 4 );
+        exNodes = new ArrayList<MetadataGraphNode>( 8 );
     }
 
     public MetadataGraphNode( MavenArtifactMetadata metadata )

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/repository/DefaultArtifactRepositoryFactory.java
Patch:
@@ -43,7 +43,7 @@ public class DefaultArtifactRepositoryFactory
     private String globalChecksumPolicy;
 
     @Requirement( role = ArtifactRepositoryLayout.class )
-    private Map<String,ArtifactRepositoryLayout> repositoryLayouts;
+    private Map<String, ArtifactRepositoryLayout> repositoryLayouts;
 
     public ArtifactRepositoryLayout getLayout( String layoutId )
         throws UnknownRepositoryLayoutException

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/DefaultLegacyArtifactCollector.java
Patch:
@@ -63,10 +63,10 @@
 public class DefaultLegacyArtifactCollector
     implements LegacyArtifactCollector
 {
-	@Requirement(hint="nearest")
+    @Requirement( hint = "nearest" )
     private ConflictResolver defaultConflictResolver;
 
-	@Requirement
+    @Requirement
     private Logger logger;
 
     @Requirement

File: maven-compat/src/main/java/org/apache/maven/repository/metadata/MetadataGraph.java
Patch:
@@ -294,7 +294,7 @@ private static void checkEdge( MetadataGraphEdge e )
     //------------------------------------------------------------------------
     public List<MetadataGraphEdge> getEdgesBetween( MetadataGraphVertex vFrom, MetadataGraphVertex vTo )
     {
-        List<MetadataGraphEdge> edges = getIncidentEdges(vTo);
+        List<MetadataGraphEdge> edges = getIncidentEdges( vTo );
         if ( edges == null || edges.isEmpty() )
         {
             return null;

File: maven-compat/src/main/java/org/apache/maven/repository/metadata/MetadataResolution.java
Patch:
@@ -62,7 +62,7 @@ public ArtifactMetadata getArtifactMetadata()
         return artifactMetadata;
     }
 
-    public void setArtifactMetadata(ArtifactMetadata artifactMetadata)
+    public void setArtifactMetadata( ArtifactMetadata artifactMetadata )
     {
         this.artifactMetadata = artifactMetadata;
     }

File: maven-core/src/main/java/org/apache/maven/project/ProjectBuildingRequest.java
Patch:
@@ -79,7 +79,7 @@ public interface ProjectBuildingRequest
      */
     Properties getUserProperties();
 
-    void setProject(MavenProject mavenProject);
+    void setProject( MavenProject mavenProject );
 
     MavenProject getProject();
 

File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -233,7 +233,7 @@ public int doMain( CliRequest cliRequest )
         }
         finally
         {
-            if (localContainer != null)
+            if ( localContainer != null )
             {
                 localContainer.dispose();
             }

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -106,6 +106,7 @@ public static Test suite()
         // -------------------------------------------------------------------------------------------------------------
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng5208EventSpyParallelTest.class );
         suite.addTestSuite( MavenITmng5387ArtifactReplacementPlugin.class );
         suite.addTestSuite( MavenITmng5382Jsr330Plugin.class );
         suite.addTestSuite( MavenITmng5338FileOptionToDirectory.class );

File: its/core-it-suite/src/test/resources/mng-5208/project/sub-2/src/main/java/Bad.java
Patch:
@@ -0,0 +1 @@
+This is not a java file

File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -265,7 +265,7 @@ private void cli( CliRequest cliRequest )
     {
         //
         // Parsing errors can happen during the processing of the arguments and we prefer not having to check if the logger is null
-        // and make construct this so we can use an SLF4J logger everywhere
+        // and construct this so we can use an SLF4J logger everywhere.
         //
         slf4jLogger = new Slf4jStdoutLogger();
 

File: maven-core/src/main/java/org/apache/maven/DefaultArtifactFilterManager.java
Patch:
@@ -37,7 +37,7 @@
  * @author Jason van Zyl
  * @todo this should probably be a component with some dynamic control of filtering
  */
-@Component(role = ArtifactFilterManager.class)
+@Component( role = ArtifactFilterManager.class )
 public class DefaultArtifactFilterManager 
     implements ArtifactFilterManager
 {
@@ -90,7 +90,7 @@ public class DefaultArtifactFilterManager
          * wagon from their plugin realm.
          */
 
-        DEFAULT_EXCLUSIONS = Collections.unmodifiableSet( artifacts);
+        DEFAULT_EXCLUSIONS = Collections.unmodifiableSet( artifacts );
     }
 
     protected Set<String> excludedArtifacts = new HashSet<String>( DEFAULT_EXCLUSIONS );

File: maven-core/src/main/java/org/apache/maven/DefaultProjectDependenciesResolver.java
Patch:
@@ -42,7 +42,7 @@
 import org.codehaus.plexus.component.annotations.Component;
 import org.codehaus.plexus.component.annotations.Requirement;
 
-@Component(role = ProjectDependenciesResolver.class)
+@Component( role = ProjectDependenciesResolver.class )
 public class DefaultProjectDependenciesResolver
     implements ProjectDependenciesResolver
 {
@@ -97,8 +97,8 @@ private Set<Artifact> resolveImpl( Collection<? extends MavenProject> projects,
             return resolved;
         }
 
-        if ( ( scopesToCollect == null || scopesToCollect.isEmpty() ) &&
-            ( scopesToResolve == null || scopesToResolve.isEmpty() ) )
+        if ( ( scopesToCollect == null || scopesToCollect.isEmpty() )
+            && ( scopesToResolve == null || scopesToResolve.isEmpty() ) )
         {
             return resolved;
         }

File: maven-core/src/main/java/org/apache/maven/ReactorReader.java
Patch:
@@ -43,9 +43,9 @@
 class ReactorReader
     implements WorkspaceReader
 {
-    private final static Collection<String> JAR_LIKE_TYPES = Arrays.asList( "jar", "test-jar", "ejb-client" );
+    private static final Collection<String> JAR_LIKE_TYPES = Arrays.asList( "jar", "test-jar", "ejb-client" );
 
-    private final static Collection<String> COMPILE_PHASE_TYPES = Arrays.asList( "jar", "ejb-client" );
+    private static final Collection<String> COMPILE_PHASE_TYPES = Arrays.asList( "jar", "ejb-client" );
 
     private Map<String, MavenProject> projectsByGAV;
 
@@ -103,7 +103,7 @@ else if ( !hasBeenPackaged( project ) )
             }
             else
             {
-                String type = artifact.getProperty( "type", "");
+                String type = artifact.getProperty( "type", "" );
                 if ( project.hasLifecyclePhase( "compile" ) && COMPILE_PHASE_TYPES.contains( type ) )
                 {
                     return new File( project.getBuild().getOutputDirectory() );

File: maven-core/src/main/java/org/apache/maven/artifact/repository/metadata/io/MetadataReader.java
Patch:
@@ -39,7 +39,7 @@ public interface MetadataReader
      * The key for the option to enable strict parsing. This option is of type {@link Boolean} and defaults to {@code
      * true}. If {@code false}, unknown elements will be ignored instead of causing a failure.
      */
-    final String IS_STRICT = "org.apache.maven.artifact.repository.metadata.io.isStrict";
+    String IS_STRICT = "org.apache.maven.artifact.repository.metadata.io.isStrict";
 
     /**
      * Reads the metadata from the specified file.

File: maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java
Patch:
@@ -21,8 +21,6 @@
 
 import java.io.IOException;
 import java.io.InputStream;
-import java.io.OutputStream;
-import java.io.PrintStream;
 import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.Locale;
@@ -51,7 +49,7 @@ public final class CLIReportingUtils
 
     public static String showVersion()
     {
-        String LS = System.getProperty("line.separator");
+        final String LS = System.getProperty( "line.separator" );
         Properties properties = getBuildProperties();
         StringBuffer version = new StringBuffer();
         version.append( createMavenVersionString( properties ) ).append( LS );

File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -283,7 +283,7 @@ private void cli( CliRequest cliRequest )
 
         if ( cliRequest.commandLine.hasOption( CLIManager.VERSION ) )
         {
-            System.out.println(CLIReportingUtils.showVersion());
+            System.out.println( CLIReportingUtils.showVersion() );
             throw new ExitException( 0 );
         }
     }    
@@ -417,7 +417,7 @@ protected void configure()
         eventSpyDispatcher.init( eventSpyContext );
 
         // refresh logger in case container got customized by spy
-        slf4jLogger = slf4jLoggerFactory.getLogger(this.getClass().getName());
+        slf4jLogger = slf4jLoggerFactory.getLogger( this.getClass().getName() );
 
         maven = container.lookup( Maven.class );
 

File: maven-embedder/src/main/java/org/apache/maven/cli/transfer/BatchModeMavenTransferListener.java
Patch:
@@ -1,7 +1,5 @@
 package org.apache.maven.cli.transfer;
 
-import java.io.PrintStream;
-
 /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
@@ -21,6 +19,8 @@
  * under the License.
  */
 
+import java.io.PrintStream;
+
 public class BatchModeMavenTransferListener
     extends AbstractMavenTransferListener
 {

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5382Jsr330Plugin.java
Patch:
@@ -24,7 +24,7 @@
 import java.io.File;
 
 /**
- * This is a test set for <a href="http://jira.codehaus.org/browse/MNG-5382">MNG-5338</a>.
+ * This is a test set for <a href="http://jira.codehaus.org/browse/MNG-5382">MNG-5382</a>.
  *
  * @author Jason van Zyl
  */

File: maven-embedder/src/main/java/org/apache/maven/cli/transfer/BatchModeMavenTransferListener.java
Patch:
@@ -1,5 +1,7 @@
 package org.apache.maven.cli.transfer;
 
+import java.io.PrintStream;
+
 import org.slf4j.Logger;
 
 /*
@@ -24,7 +26,7 @@
 public class BatchModeMavenTransferListener
     extends AbstractMavenTransferListener
 {
-    public BatchModeMavenTransferListener( Logger out )
+    public BatchModeMavenTransferListener( PrintStream out )
     {
         super( out );
     }

File: maven-core/src/main/java/org/apache/maven/artifact/repository/MavenArtifactRepository.java
Patch:
@@ -205,7 +205,6 @@ public void setUrl( String url )
     // Path Utils
 
     /**
-     * /**
      * Return the protocol name.
      * <br/>
      * E.g: for input
@@ -291,7 +290,7 @@ else if ( index >= 0 )
 
     /**
      * Decodes the specified (portion of a) URL. <strong>Note:</strong> This decoder assumes that ISO-8859-1 is used to
-     * convert URL-encoded octets to characters.
+     * convert URL-encoded bytes to characters.
      *
      * @param url The URL to decode, may be <code>null</code>.
      * @return The decoded URL or <code>null</code> if the input was <code>null</code>.

File: maven-core/src/test/java/org/apache/maven/MavenLifecycleParticipantTest.java
Patch:
@@ -88,8 +88,9 @@ public void testDependencyInjection()
     {
         PlexusContainer container = getContainer();
 
-        ComponentDescriptor cd =
-            new ComponentDescriptor( InjectDependencyLifecycleListener.class, container.getContainerRealm() );
+        ComponentDescriptor<? extends AbstractMavenLifecycleParticipant> cd =
+            new ComponentDescriptor<InjectDependencyLifecycleListener>( InjectDependencyLifecycleListener.class,
+                                                                        container.getContainerRealm() );
         cd.setRoleClass( AbstractMavenLifecycleParticipant.class );
         container.addComponentDescriptor( cd );
 

File: maven-core/src/test/java/org/apache/maven/ProjectDependenciesResolverTest.java
Patch:
@@ -8,7 +8,6 @@
 
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.execution.MavenSession;
-import org.apache.maven.model.Exclusion;
 import org.apache.maven.project.MavenProject;
 import org.codehaus.plexus.component.annotations.Requirement;
 
@@ -92,6 +91,7 @@ public void testSystemScopeDependencyIsPresentInTheCompileClasspathElements()
         List<String> elements = project.getCompileClasspathElements();
         assertEquals( 2, elements.size() );
         
+        @SuppressWarnings( "deprecation" )
         List<Artifact> artifacts = project.getCompileArtifacts();
         assertEquals( 1, artifacts.size() );
         assertTrue( artifacts.get( 0 ).getFile().getName().endsWith( "tools.jar" ) );

File: maven-core/src/test/java/org/apache/maven/lifecycle/MojoExecutionXPathContainer.java
Patch:
@@ -32,8 +32,6 @@ public class MojoExecutionXPathContainer
 {
     private JXPathContext context;
 
-    private MojoExecution mojoExecution;
-
     static
     {
         JXPathContextReferenceImpl.addNodePointerFactory( new Xpp3DomPointerFactory() );
@@ -42,7 +40,6 @@ public class MojoExecutionXPathContainer
     public MojoExecutionXPathContainer( MojoExecution mojoExecution )
         throws IOException
     {
-        this.mojoExecution = mojoExecution;
         context = JXPathContext.newContext( mojoExecution );
     }
 

File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/ConcurrentBuildLoggerTest.java
Patch:
@@ -29,6 +29,7 @@
 public class ConcurrentBuildLoggerTest
     extends TestCase
 {
+    @SuppressWarnings( "unused" )
     public void testToGraph()
         throws Exception
     {

File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/LifecycleWeaveBuilderTest.java
Patch:
@@ -58,6 +58,7 @@ public class LifecycleWeaveBuilderTest
     }
   */
 
+    @SuppressWarnings( "unused" )
     public void testBuildProjectThreaded()
         throws Exception
     {
@@ -67,6 +68,7 @@ public void testBuildProjectThreaded()
         executor.shutdown();
     }
 
+    @SuppressWarnings( "unused" )
     public void testBuildProjectThreadedAggressive()
         throws Exception
     {

File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/DefaultLifecyclesStub.java
Patch:
@@ -49,6 +49,7 @@ public static DefaultLifecycles createDefaultLifecycles()
         List<String> stubSiteCycle =
             Arrays.asList( PRE_SITE.getPhase(), SITE.getPhase(), POST_SITE.getPhase(), SITE_DEPLOY.getPhase() );
 
+        @SuppressWarnings( "unchecked" )
         Iterator<List<String>> lcs = Arrays.asList( stubDefaultCycle, stubCleanCycle, stubSiteCycle ).iterator();
 
         Map<String, Lifecycle> lifeCycles = new HashMap<String, Lifecycle>();

File: maven-core/src/test/java/org/apache/maven/plugin/PluginParameterExpressionEvaluatorTest.java
Patch:
@@ -29,7 +29,6 @@
 import org.apache.maven.AbstractCoreMavenComponentTestCase;
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.ArtifactUtils;
-import org.apache.maven.artifact.factory.ArtifactFactory;
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.execution.DefaultMavenExecutionRequest;
 import org.apache.maven.execution.DefaultMavenExecutionResult;
@@ -315,6 +314,7 @@ public void testValueExtractionFromSystemPropertiesWithMissingProject_WithDotNot
         assertEquals( "value", value );
     }
 
+    @SuppressWarnings( "deprecation" )
     private static MavenSession createSession( PlexusContainer container, ArtifactRepository repo, Properties properties )
         throws CycleDetectedException, DuplicateProjectException
     {

File: maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java
Patch:
@@ -20,7 +20,6 @@
  */
 
 import java.io.File;
-import java.util.List;
 import java.util.Properties;
 
 import org.apache.maven.AbstractCoreMavenComponentTestCase;
@@ -48,6 +47,6 @@ public void testSystemScopeDependencyIsPresentInTheCompileClasspathElements()
         // Here we will actually not have any artifacts because the ProjectDependenciesResolver is not involved here. So
         // right now it's not valid to ask for artifacts unless plugins require the artifacts.
         
-        List<String> elements = project.getCompileClasspathElements();
+        project.getCompileClasspathElements();
     }
 }

File: maven-core/src/test/java/org/apache/maven/project/TestMetadataSource.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.maven.project.artifact.MavenMetadataSource;
 import org.codehaus.plexus.component.annotations.Component;
 
+@SuppressWarnings( "deprecation" )
 @Component( role = ArtifactMetadataSource.class, hint = "classpath" )
 public class TestMetadataSource
     extends MavenMetadataSource

File: maven-core/src/test/java/org/apache/maven/project/artifact/DefaultMavenMetadataCacheTest.java
Patch:
@@ -57,11 +57,13 @@ public void testCacheKey()
         throws Exception
     {
         Artifact a1 = repositorySystem.createArtifact( "testGroup", "testArtifact", "1.2.3", "jar" );
+        @SuppressWarnings( "deprecation" )
         ArtifactRepository lr1 = new DelegatingLocalArtifactRepository( repositorySystem.createDefaultLocalRepository() );
         ArtifactRepository rr1 = repositorySystem.createDefaultRemoteRepository();
         a1.setDependencyFilter( new ExcludesArtifactFilter( Arrays.asList( "foo" ) ) );
 
         Artifact a2 = repositorySystem.createArtifact( "testGroup", "testArtifact", "1.2.3", "jar" );
+        @SuppressWarnings( "deprecation" )
         ArtifactRepository lr2 = new DelegatingLocalArtifactRepository( repositorySystem.createDefaultLocalRepository() );
         ArtifactRepository rr2 = repositorySystem.createDefaultRemoteRepository();
         a2.setDependencyFilter( new ExcludesArtifactFilter( Arrays.asList( "foo" ) ) );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5338FileOptionToDirectory.java
Patch:
@@ -55,9 +55,6 @@ protected void tearDown()
         super.tearDown();
     }
 
-    /**
-     * Verify that the repositories are used in the reversed order of definition in settings.xml.
-     */
     public void testFileOptionToADirectory()
         throws Exception
     {

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5338FileOptionToDirectory.java
Patch:
@@ -36,7 +36,7 @@ public class MavenITmng5338FileOptionToDirectory
 
     public MavenITmng5338FileOptionToDirectory()
     {
-        super( "[3.0.5,)" );
+        super( "(3.0.4,)" );
     }
 
     public void setUp()

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java
Patch:
@@ -588,6 +588,7 @@ private Authentication getAuthentication( RepositorySystemSession session, Artif
                 org.eclipse.aether.repository.Authentication auth = selector.getAuthentication( repo );
                 if ( auth != null )
                 {
+                    repo = new RemoteRepository.Builder( repo ).setAuthentication( auth ).build();
                     AuthenticationContext authCtx = AuthenticationContext.forRepository( session, repo );
                     Authentication result =
                         new Authentication( authCtx.get( AuthenticationContext.USERNAME ),
@@ -703,6 +704,7 @@ private Proxy getProxy( RepositorySystemSession session, ArtifactRepository repo
                     p.setPort( proxy.getPort() );
                     if ( proxy.getAuthentication() != null )
                     {
+                        repo = new RemoteRepository.Builder( repo ).setProxy( proxy ).build();
                         AuthenticationContext authCtx = AuthenticationContext.forProxy( session, repo );
                         p.setUserName( authCtx.get( AuthenticationContext.USERNAME ) );
                         p.setPassword( authCtx.get( AuthenticationContext.PASSWORD ) );

File: maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java
Patch:
@@ -41,11 +41,11 @@
  * <li>version components in the text can be digits or strings,</li>
  * <li>strings are checked for well-known qualifiers and the qualifier ordering is used for version ordering.
  *     Well-known qualifiers (case insensitive) are:<ul>
- *     <li><code>snapshot</code></li>
  *     <li><code>alpha</code> or <code>a</code></li>
  *     <li><code>beta</code> or <code>b</code></li>
  *     <li><code>milestone</code> or <code>m</code></li>
  *     <li><code>rc</code> or <code>cr</code></li>
+ *     <li><code>snapshot</code></li>
  *     <li><code>(the empty string)</code> or <code>ga</code> or <code>final</code></li>
  *     <li><code>sp</code></li>
  *     </ul>

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -106,6 +106,7 @@ public static Test suite()
         // -------------------------------------------------------------------------------------------------------------
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng5280SettingsProfilesRepositoriesOrderTest.class );
         suite.addTestSuite( MavenITmng5224InjectedSettings.class );
         suite.addTestSuite( MavenITmng5214DontMapWsdlToJar.class );
         suite.addTestSuite( MavenITmng5137ReactorResolutionInForkedBuildTest.class );

File: maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.regex.Pattern;
 
 import org.apache.maven.model.Build;
 import org.apache.maven.model.BuildBase;
@@ -61,7 +62,7 @@ public class DefaultModelValidator
     implements ModelValidator
 {
 
-    private static final String ID_REGEX = "[A-Za-z0-9_\\-.]+";
+    private static final Pattern ID_REGEX = Pattern.compile("[A-Za-z0-9_\\-.]+");
 
     private static final String ILLEGAL_FS_CHARS = "\\/:\"<>|?*";
 
@@ -625,7 +626,7 @@ private boolean validateId( String fieldName, ModelProblemCollector problems, Se
         }
         else
         {
-            boolean match = id.matches( ID_REGEX );
+            boolean match = ID_REGEX.matcher( id ).matches();
             if ( !match )
             {
                 addViolation( problems, severity, version, fieldName, sourceHint, "with value '" + id

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java
Patch:
@@ -442,7 +442,7 @@ private boolean build( List<ProjectBuildingResult> results, List<InterimResult>
                     {
                         ModelProblem problem =
                             new DefaultModelProblem( "Child module " + moduleFile + " of " + pomFile
-                                + " does not exist", ModelProblem.Severity.ERROR, model, -1, -1, null );
+                                + " does not exist", ModelProblem.Severity.ERROR, ModelProblem.Version.BASE, model, -1, -1, null );
                         result.getProblems().add( problem );
 
                         noErrors = false;
@@ -478,7 +478,7 @@ private boolean build( List<ProjectBuildingResult> results, List<InterimResult>
 
                         ModelProblem problem =
                             new DefaultModelProblem( "Child module " + moduleFile + " of " + pomFile
-                                + " forms aggregation cycle " + buffer, ModelProblem.Severity.ERROR, model, -1, -1,
+                                + " forms aggregation cycle " + buffer, ModelProblem.Severity.ERROR, ModelProblem.Version.BASE, model, -1, -1,
                                                      null );
                         result.getProblems().add( problem );
 
@@ -630,7 +630,7 @@ private void initProject( MavenProject project, Map<String, MavenProject> projec
             ModelProblem problem =
                 new DefaultModelProblem( "Detected profiles.xml alongside " + modelId
                     + ", this file is no longer supported and was ignored" + ", please use the settings.xml instead",
-                                         ModelProblem.Severity.WARNING, model, -1, -1, null );
+                                         ModelProblem.Severity.WARNING, ModelProblem.Version.V30, model, -1, -1, null );
             result.getProblems().add( problem );
         }
     }

File: maven-core/src/main/java/org/apache/maven/project/DependencyResolutionRequest.java
Patch:
@@ -54,7 +54,7 @@ public interface DependencyResolutionRequest
 
     /**
      * Sets the filter used to exclude some dependencies from resolution. Note that this filter only controls the
-     * resolution/download of dependency artifacts, not the inclusion of dependency nodes in the resolved dependeny
+     * resolution/download of dependency artifacts, not the inclusion of dependency nodes in the resolved dependency
      * graph.
      * 
      * @param filter The filter to exclude dependencies from resolution, may be {@code null} to resolve all

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5224InjectedSettings.java
Patch:
@@ -44,8 +44,8 @@ public class MavenITmng5224InjectedSettings
 
     public MavenITmng5224InjectedSettings()
     {
-        // olamy probably doesn't work with 3.x before 3.0.5
-        super( "[2.0.3,3.0-alpha-1),[3.0.5,)" );
+        // olamy probably doesn't work with 3.x before 3.0.4
+        super( "[2.0.3,3.0-alpha-1),[3.0.4,)" );
     }
 
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -61,7 +61,7 @@ public static Test suite()
             System.setProperty( "maven.version", mavenVersion );
 
             String basedir = System.getProperty( "basedir" );
-            info = new PrintStream( new FileOutputStream( new File( basedir, "target/surefire-reports/info.txt" ) ) );
+            info = new PrintStream( new FileOutputStream( new File( basedir, "target/info.txt" ) ) );
 
             infoProperty( info, "maven.version" );
             infoProperty( info, "java.version" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5175WagonHttpTest.java
Patch:
@@ -47,7 +47,7 @@ public class MavenITmng5175WagonHttpTest
 
     public MavenITmng5175WagonHttpTest()
     {
-        super( "[3.0-4,)" ); // 3.0.4+
+        super( "[3.0.4,)" ); // 3.0.4+
     }
 
     public void setUp()

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5214DontMapWsdlToJar.java
Patch:
@@ -30,7 +30,7 @@ public class MavenITmng5214DontMapWsdlToJar extends AbstractMavenIntegrationTest
 {
     public MavenITmng5214DontMapWsdlToJar()
     {
-        super( "[3.0-5,)" );
+        super( "[3.0.5,)" );
     }
     
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3652UserAgentHeaderTest.java
Patch:
@@ -295,7 +295,7 @@ public void testmng3652_UserAgentConfiguredInSettings()
         assertEquals( "My wonderful header", customHeader );
     }
 
-    public void testmng3652_AddutionnalHttpHeaderConfiguredInSettings()
+    public void testmng3652_AdditionnalHttpHeaderConfiguredInSettings()
         throws Exception
     {
         // customizing version not supported in Maven 3

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3716AggregatorForkingTest.java
Patch:
@@ -57,7 +57,7 @@ public void testitMNG3716 ()
         verifier.resetStreams();
         
         verifier = newVerifier( projectsDir.getAbsolutePath() );
-        verifier.executeGoal( "org.apache.maven.its.mng3716:maven-mng3716-plugin:1:run" );
+        verifier.executeGoal( "org.apache.maven.its.mng3716:mavenit-mng3716-plugin:1:run" );
 
         verifier.verifyErrorFreeLog();
         verifier.resetStreams();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3498ForkToOtherMojoTest.java
Patch:
@@ -52,7 +52,7 @@ public void testitMNG3498 ()
         File projectDir = new File( testDir, "mng-3498-project" );
 
         Verifier verifier = newVerifier( pluginDir.getAbsolutePath(), "remote" );
-        verifier.deleteArtifact( "org.apache.maven.its.mng3498", "maven-mng3498-plugin", "1", "pom" );
+        verifier.deleteArtifact( "org.apache.maven.its.mng3498", "mavenit-mng3498-plugin", "1", "pom" );
 
         verifier.executeGoal( "install" );
 

File: maven-plugin-api/src/test/java/org/apache/maven/plugin/descriptor/PluginDescriptorBuilderTest.java
Patch:
@@ -94,13 +94,13 @@ public void testBuildReader()
 
         assertEquals( "${jar.finalName}", pc.getValue() );
         assertEquals( "${project.build.finalName}", pc.getAttribute( "default-value" ) );
-        assertEquals( "java.lang.String", pc.getAttribute( "implementation" ) );
 
         Parameter mp = md.getParameters().get( 0 );
 
         assertEquals( "finalName", mp.getName() );
         assertEquals( "jarName", mp.getAlias() );
         assertEquals( "java.lang.String", mp.getType() );
+        assertEquals( "java.lang.String", mp.getImplementation() );
         assertEquals( true, mp.isEditable() );
         assertEquals( false, mp.isRequired() );
         assertEquals( "parameter-description", mp.getDescription() );

File: maven-plugin-api/src/test/java/org/apache/maven/plugin/descriptor/PluginDescriptorBuilderTest.java
Patch:
@@ -94,13 +94,13 @@ public void testBuildReader()
 
         assertEquals( "${jar.finalName}", pc.getValue() );
         assertEquals( "${project.build.finalName}", pc.getAttribute( "default-value" ) );
-        assertEquals( "java.lang.String", pc.getAttribute( "implementation" ) );
 
         Parameter mp = md.getParameters().get( 0 );
 
         assertEquals( "finalName", mp.getName() );
         assertEquals( "jarName", mp.getAlias() );
         assertEquals( "java.lang.String", mp.getType() );
+        assertEquals( "java.lang.String", mp.getImplementation() );
         assertEquals( true, mp.isEditable() );
         assertEquals( false, mp.isRequired() );
         assertEquals( "parameter-description", mp.getDescription() );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -83,6 +83,7 @@ public static Test suite()
         // -------------------------------------------------------------------------------------------------------------
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng5096ExclusionAtDependencyWithImpliedClassifierTest.class );
         suite.addTestSuite( MavenITmng5064SuppressSnapshotUpdatesTest.class );
         suite.addTestSuite( MavenITmng5019StringBasedCompLookupFromChildPluginRealmTest.class );
         suite.addTestSuite( MavenITmng5013ConfigureParamBeanFromScalarValueTest.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2305MultipleProxiesTest.java
Patch:
@@ -97,8 +97,7 @@ public void testit()
             verifier.setSystemProperty( "javax.net.ssl.trustStore", storePath );
             verifier.setSystemProperty( "javax.net.ssl.trustStorePassword", storePwd );
             // disable concurrent downloading as not all wagons (e.g. wagon-lightweight-http) are thread-safe regarding proxy settings
-            // olamy restore concurrent as wagon-http is now thread safe regarding and add an extension in the it pom
-            verifier.setSystemProperty( "maven.artifact.threads", "3" );
+            verifier.setSystemProperty( "maven.artifact.threads", "1" );
             verifier.executeGoal( "validate" );
             verifier.verifyErrorFreeLog();
             verifier.resetStreams();

File: maven-model-builder/src/test/java/org/apache/maven/model/interpolation/StringSearchModelInterpolatorTest.java
Patch:
@@ -432,7 +432,7 @@ public ObjectWithMapField( Map<?, ?> values )
         }
     }
 
-    @SuppressWarnings({"UnusedDeclaration", "unused"})
+    @SuppressWarnings( "unused" )
     private static final class ObjectWithMixedProtection
     {
         private List<?> values1;
@@ -475,7 +475,6 @@ public void testFinalFieldsExcludedFromInterpolation()
         assertProblemFree(  problems );
     }
 
-    @SuppressWarnings({"UnusedDeclaration"})
     static class ClassWithFinalField
     {
         public static final String CONSTANT = "${expression}";

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1412DependenciesOrderTest.java
Patch:
@@ -26,9 +26,10 @@
 import java.util.List;
 
 /**
- * Test that dependencies order in classpath matches pom.xml.
+ * This is a test set for <a href="http://jira.codehaus.org/browse/MNG-1349">MNG-1349</a>:
+ * it tests that dependencies order in classpath matches <code>pom.xml</code>.
  *
- * @author <a href="mailto:hboutemy@apache.org">Herve Boutemy</a>
+ * @author <a href="mailto:hboutemy@apache.org">Hervé Boutemy</a>
  *
  */
 public class MavenITmng1412DependenciesOrderTest

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2045testJarDependenciesBrokenInReactorTest.java
Patch:
@@ -26,8 +26,9 @@
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
- * Simple IT test invoking maven in a reactor with 2 projects.
- * First project produced a test-jar, which is required to 
+ * This is a test set for <a href="http://jira.codehaus.org/browse/MNG-2045">MNG-2045</a>:
+ * Simple IT test invoking maven in a reactor with 2 projects -- 
+ * first project produces a test-jar, which is required to 
  * compile second project. 
  *
  * @author <a href="mailto:brianf@apache.org">Brian Fox</a>

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2254PomEncodingTest.java
Patch:
@@ -26,9 +26,10 @@
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
- * Test that pom.xml encoding is properly detected.
+ * This is a test set for <a href="http://jira.codehaus.org/browse/MNG-2254">MNG-2254</a>:
+ * it tests that pom.xml encoding is properly detected.
  * 
- * @author <a href="mailto:herve.boutemy@free.fr">Herve Boutemy</a>
+ * @author <a href="mailto:herve.boutemy@free.fr">Hervé Boutemy</a>
  * 
  */
 public class MavenITmng2254PomEncodingTest

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2277AggregatorAndResolutionPluginsTest.java
Patch:
@@ -25,8 +25,10 @@
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
- * @author <a href="mailto:brianf@apache.org">Brian Fox</a>
+ * This is a test set for <a href="http://jira.codehaus.org/browse/MNG-2277">MNG-2277</a>.
  * 
+ * @author <a href="mailto:brianf@apache.org">Brian Fox</a>
+ * @version $Id$
  */
 public class MavenITmng2277AggregatorAndResolutionPluginsTest
     extends AbstractMavenIntegrationTestCase

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3106ProfileMultipleActivatorsTest.java
Patch:
@@ -25,7 +25,8 @@
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
- * Test that profiles with multiple activators are activated 
+ * This is a test set for <a href="http://jira.codehaus.org/browse/MNG-3106">MNG-3106</a>:
+ * it tests that profiles with multiple activators are activated 
  * when any of the activators are on.
  * 
  */

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3284UsingCachedPluginsTest.java
Patch:
@@ -25,7 +25,8 @@
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
- * Integration test to check MNG-3284 - that explicitly defined plugins are used, not the one that is cached.
+ * This is a test set for <a href="http://jira.codehaus.org/browse/MNG-3284">MNG-3284</a>:
+ * that explicitly defined plugins are used, not the one that is cached.
  */
 public class MavenITmng3284UsingCachedPluginsTest
     extends AbstractMavenIntegrationTestCase

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3394POMPluginVersionDominanceTest.java
Patch:
@@ -28,7 +28,8 @@
 import java.util.List;
 
 /**
- * Check that plugin versions in the POM obey the correct order
+ * This is a test set for <a href="http://jira.codehaus.org/browse/MNG-3394">MNG-3394</a>:
+ * it checks that plugin versions in the POM obey the correct order
  * of precedence. Specifically, that mojos in the default lifecycle
  * bindings can find plugin versions in the pluginManagement section
  * when the build/plugins section is missing that plugin, and that

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3428PluginDescriptorArtifactsIncompleteTest.java
Patch:
@@ -25,7 +25,8 @@
 import java.io.File;
 
 /**
- * Tests that the PluginDescriptor.getArtifacts() call returns all of the dependencies of the plugin,
+ * This is a test set for <a href="http://jira.codehaus.org/browse/MNG-3428">MNG-3428</a>:
+ * it tests that the PluginDescriptor.getArtifacts() call returns all of the dependencies of the plugin,
  * not just those that made it past the filter excluding Maven's core artifacts.
  */
 public class MavenITmng3428PluginDescriptorArtifactsIncompleteTest

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3545ProfileDeactivationTest.java
Patch:
@@ -25,7 +25,8 @@
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
- * Test activation and deactivation of profiles.
+ * This is a test set for <a href="http://jira.codehaus.org/browse/MNG-3545">MNG-3545</a>:
+ * it tests activation and deactivation of profiles.
  * 
  */
 public class MavenITmng3545ProfileDeactivationTest

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3641ProfileActivationWarningTest.java
Patch:
@@ -27,7 +27,8 @@
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
- * MNG-3641 - Profile activation warning test
+ * This is a test set for <a href="http://jira.codehaus.org/browse/MNG-3641">MNG-3641</a>:
+ * Profile activation warning test
  */
 public class MavenITmng3641ProfileActivationWarningTest
     extends AbstractMavenIntegrationTestCase

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3679PluginExecIdInterpolationTest.java
Patch:
@@ -25,7 +25,8 @@
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
- * Checks that a plugin execution with an id that contains an expression will 
+ * This is a test set for <a href="http://jira.codehaus.org/browse/MNG-3679">MNG-3679</a>:
+ * it checks that a plugin execution with an id that contains an expression will 
  * still execute without a problem.
  * 
  * @author jdcasey

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3684BuildPluginParameterTest.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
+ * This is a test set for <a href="http://jira.codehaus.org/browse/MNG-3684">MNG-3684</a>:
  * Verify that the Build instance injected as a plugin parameter contains
  * interpolated values for things like the various build paths, etc.
  * 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3693PomFileBasedirChangeTest.java
Patch:
@@ -26,7 +26,8 @@
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
- * Test that changes to a project's POM file reference (MavenProject.setFile(..))
+ * This is a test set for <a href="http://jira.codehaus.org/browse/MNG-3693">MNG-3693</a>:
+ * it tests that changes to a project's POM file reference (MavenProject.setFile(..))
  * doesn't affect the basedir of the project instance for using that project's classes directory
  * in the classpath of another project's build...this happens when both projects are
  * built in the same reactor, and one project depends on the other.

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3694ReactorProjectsDynamismTest.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
+ * This is a test set for <a href="http://jira.codehaus.org/browse/MNG-3694">MNG-3694</a>:
  * Verify that any plugin injecting reactorProjects gets project instances that
  * have their concrete state calculated.
  * 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4091BadPluginDescriptorTest.java
Patch:
@@ -27,7 +27,8 @@
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
- * MNG-4091 - Bad plugin descriptor error handling
+ * This is a test set for <a href="http://jira.codehaus.org/browse/MNG-4091">MNG-4091</a>:
+ * Bad plugin descriptor error handling
  */
 public class MavenITmng4091BadPluginDescriptorTest
     extends AbstractMavenIntegrationTestCase

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4189UniqueVersionSnapshotTest.java
Patch:
@@ -25,7 +25,9 @@
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
+ * This is a test set for <a href="http://jira.codehaus.org/browse/MNG-4189">MNG-4189</a>.
  * 
+ * @version $Id$
  * @author <a href="mailto:oching@apache.org">Maria Odea Ching</a>
  */
 public class MavenITmng4189UniqueVersionSnapshotTest

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4633DualCompilerExecutionsWeaveModeTest.java
Patch:
@@ -24,6 +24,9 @@
  */
 
 /**
+ * This is a test set for <a href="http://jira.codehaus.org/browse/MNG-4633">MNG-4633</a>.
+ * 
+ * @version $Id$
  * @author Kristian Rosenvold
  */
 public class MavenITmng4633DualCompilerExecutionsWeaveModeTest

File: maven-model-builder/src/main/java/org/apache/maven/model/building/ModelBuildingEventCatapult.java
Patch:
@@ -36,7 +36,7 @@ interface ModelBuildingEventCatapult
      */
     void fire( ModelBuildingListener listener, ModelBuildingEvent event );
 
-    final ModelBuildingEventCatapult BUILD_EXTENSIONS_ASSEMBLED = new ModelBuildingEventCatapult()
+    ModelBuildingEventCatapult BUILD_EXTENSIONS_ASSEMBLED = new ModelBuildingEventCatapult()
     {
         public void fire( ModelBuildingListener listener, ModelBuildingEvent event )
         {

File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/UrlNormalizingPostProcessor.java
Patch:
@@ -34,7 +34,7 @@ class UrlNormalizingPostProcessor
     implements InterpolationPostProcessor
 {
 
-    private static final Set<String> urlExpressions;
+    private static final Set<String> URL_EXPRESSIONS;
 
     static
     {
@@ -45,7 +45,7 @@ class UrlNormalizingPostProcessor
         expressions.add( "project.scm.developerConnection" );
         expressions.add( "project.distributionManagement.site.url" );
 
-        urlExpressions = expressions;
+        URL_EXPRESSIONS = expressions;
     }
 
     private UrlNormalizer normalizer;
@@ -57,7 +57,7 @@ public UrlNormalizingPostProcessor( UrlNormalizer normalizer )
 
     public Object execute( String expression, Object value )
     {
-        if ( value != null && urlExpressions.contains( expression ) )
+        if ( value != null && URL_EXPRESSIONS.contains( expression ) )
         {
             return normalizer.normalize( value.toString() );
         }

File: maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java
Patch:
@@ -869,7 +869,8 @@ private static InputLocation getLocation( String fieldName, InputLocationTracker
                 int idx = fieldName.lastIndexOf( '.' );
                 if ( idx >= 0 )
                 {
-                    key = fieldName = fieldName.substring( idx + 1 );
+                    fieldName = fieldName.substring( idx + 1 );
+                    key = fieldName;
                 }
 
                 if ( fieldName.endsWith( "]" ) )

File: maven-compat/src/main/java/org/apache/maven/artifact/repository/DefaultArtifactRepositoryFactory.java
Patch:
@@ -73,7 +73,7 @@ public ArtifactRepository createArtifactRepository( String id, String url, Strin
                                                         ArtifactRepositoryPolicy releases )
         throws UnknownRepositoryLayoutException
     {
-        return injectSession( factory.createArtifactRepository( layoutId, url, layoutId, snapshots, releases ), true );
+        return injectSession( factory.createArtifactRepository( id, url, layoutId, snapshots, releases ), true );
     }
 
     public ArtifactRepository createArtifactRepository( String id, String url,

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -83,6 +83,7 @@ public static Test suite()
         // -------------------------------------------------------------------------------------------------------------
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng5064SuppressSnapshotUpdatesTest.class );
         suite.addTestSuite( MavenITmng5013ConfigureParamBeanFromScalarValueTest.class );
         suite.addTestSuite( MavenITmng5012CollectionVsArrayParamCoercionTest.class );
         suite.addTestSuite( MavenITmng5011ConfigureCollectionArrayFromSystemPropTest.class );

File: maven-aether-provider/src/test/java/org/apache/maven/repository/internal/DefaultServiceLocatorTest.java
Patch:
@@ -21,6 +21,7 @@
 
 import org.sonatype.aether.RepositorySystem;
 import org.sonatype.aether.impl.MetadataGeneratorFactory;
+import org.sonatype.aether.spi.locator.ServiceLocator;
 
 import junit.framework.TestCase;
 
@@ -30,14 +31,14 @@ public class DefaultServiceLocatorTest
 
     public void testGetRepositorySystem()
     {
-        DefaultServiceLocator locator = new DefaultServiceLocator();
+        ServiceLocator locator = new MavenServiceLocator();
         RepositorySystem repoSys = locator.getService( RepositorySystem.class );
         assertNotNull( repoSys );
     }
 
     public void testGetMetadataGeneratorFactories()
     {
-        DefaultServiceLocator locator = new DefaultServiceLocator();
+        ServiceLocator locator = new MavenServiceLocator();
         assertEquals( 2, locator.getServices( MetadataGeneratorFactory.class ).size() );
     }
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3951AbsolutePathsTest.java
Patch:
@@ -71,7 +71,7 @@ public void testitMNG3951()
         Properties props = verifier.loadProperties( "target/path.properties" );
         assertEquals( new File( testDir.getCanonicalFile(), "tmp" ).getAbsoluteFile(),
                       new File( props.getProperty( "fileParams.0" ) ) );
-        assertEquals( new File( getRoot( testDir ), "tmp" ).getCanonicalFile().getAbsoluteFile(),
+        assertEquals( new File( getRoot( testDir ).getCanonicalFile(), "tmp" ).getCanonicalFile().getAbsoluteFile(),
                       new File( props.getProperty( "fileParams.1" ) ) );
         assertEquals( new File( repoDir ), new File( props.getProperty( "stringParams.0" ) ) );
     }

File: maven-aether-provider/src/main/java/org/apache/maven/repository/internal/DefaultServiceLocator.java
Patch:
@@ -31,6 +31,7 @@
  * should instead always use regular dependency injection to acquire the repository system.
  * 
  * @author Benjamin Bentmann
+ * @deprecated use {@link MavenServiceLocator} instead, which is more explicit.
  */
 public class DefaultServiceLocator
     extends org.sonatype.aether.impl.internal.DefaultServiceLocator

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3951AbsolutePathsTest.java
Patch:
@@ -69,7 +69,8 @@ public void testitMNG3951()
 
         verifier.assertFilePresent( "target/path.properties" );
         Properties props = verifier.loadProperties( "target/path.properties" );
-        assertEquals( new File( testDir, "tmp" ).getAbsoluteFile(), new File( props.getProperty( "fileParams.0" ) ) );
+        assertEquals( new File( testDir.getCanonicalFile(), "tmp" ).getAbsoluteFile(),
+                      new File( props.getProperty( "fileParams.0" ) ) );
         assertEquals( new File( getRoot( testDir ), "tmp" ).getCanonicalFile().getAbsoluteFile(),
                       new File( props.getProperty( "fileParams.1" ) ) );
         assertEquals( new File( repoDir ), new File( props.getProperty( "stringParams.0" ) ) );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4233ReactorResolutionForManuallyCreatedArtifactTest.java
Patch:
@@ -57,7 +57,7 @@ public void testit()
         verifier.resetStreams();
 
         Properties props = verifier.loadProperties( "consumer/target/artifact.properties" );
-        assertEquals( new File( testDir, "producer/pom.xml" ).getCanonicalFile(), new File(
+        assertEquals( new File( testDir.getCanonicalFile(), "producer/pom.xml" ), new File(
             props.getProperty( "org.apache.maven.its.mng4233:producer:jar:1.0-SNAPSHOT" ) ).getCanonicalFile() );
     }
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3951AbsolutePathsTest.java
Patch:
@@ -19,15 +19,14 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
 import java.util.Properties;
 
 /**
  * This is a test set for <a href="http://jira.codehaus.org/browse/MNG-3951">MNG-3951</a>.
- * 
+ *
  * @author Benjamin Bentmann
  * @version $Id$
  */
@@ -71,7 +70,8 @@ public void testitMNG3951()
         verifier.assertFilePresent( "target/path.properties" );
         Properties props = verifier.loadProperties( "target/path.properties" );
         assertEquals( new File( testDir, "tmp" ).getAbsoluteFile(), new File( props.getProperty( "fileParams.0" ) ) );
-        assertEquals( new File( getRoot( testDir ), "tmp" ).getAbsoluteFile(), new File( props.getProperty( "fileParams.1" ) ) );
+        assertEquals( new File( getRoot( testDir ), "tmp" ).getCanonicalFile().getAbsoluteFile(),
+                      new File( props.getProperty( "fileParams.1" ) ) );
         assertEquals( new File( repoDir ), new File( props.getProperty( "stringParams.0" ) ) );
     }
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng5012CollectionVsArrayParamCoercionTest.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
@@ -54,7 +53,8 @@ public void testit()
         verifier.resetStreams();
 
         Properties props = verifier.loadProperties( "target/config.properties" );
-        assertEquals( new File( testDir, "src/main/java" ), new File( props.getProperty( "stringParams.0" ) ) );
+        assertEquals( new File( testDir, "src/main/java" ).getCanonicalFile(),
+                      new File( props.getProperty( "stringParams.0" ) ).getCanonicalFile() );
     }
 
 }

File: maven-artifact/src/test/java/org/apache/maven/artifact/versioning/DefaultArtifactVersionTest.java
Patch:
@@ -114,7 +114,8 @@ public void testVersionComparing()
         assertVersionOlder( "2.0-1", "2.0.1" );
 
         assertVersionOlder( "2.0.1-klm", "2.0.1-lmn" );
-        //assertVersionOlder( "2.0.1-xyz", "2.0.1" );
+        assertVersionOlder( "2.0.1", "2.0.1-xyz" );
+        assertVersionOlder( "2.0.1-xyz-1", "2.0.1-1-xyz" );
 
         assertVersionOlder( "2.0.1", "2.0.1-123" );
         assertVersionOlder( "2.0.1-xyz", "2.0.1-123" );

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java
Patch:
@@ -160,7 +160,7 @@ else if ( configuration.isResolveDependencies() )
                 try
                 {
                     DefaultDependencyResolutionRequest resolution =
-                        new DefaultDependencyResolutionRequest( project, configuration.getRepositorySession() );
+                        new DefaultDependencyResolutionRequest( project, config.session );
                     resolutionResult = dependencyResolver.resolve( resolution );
                 }
                 catch ( DependencyResolutionException e )
@@ -175,7 +175,7 @@ else if ( configuration.isResolveDependencies() )
                                                  Collections.singletonList( project.getArtifact().getId() ), null );
 
                     // Maven 2.x quirk: an artifact always points at the local repo, regardless whether resolved or not
-                    LocalRepositoryManager lrm = configuration.getRepositorySession().getLocalRepositoryManager();
+                    LocalRepositoryManager lrm = config.session.getLocalRepositoryManager();
                     for ( Artifact artifact : artifacts )
                     {
                         if ( !artifact.isResolved() )

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -83,6 +83,7 @@ public static Test suite()
         // -------------------------------------------------------------------------------------------------------------
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng5012CollectionVsArrayParamCoercionTest.class );
         suite.addTestSuite( MavenITmng5011ConfigureCollectionArrayFromSystemPropTest.class );
         suite.addTestSuite( MavenITmng5009AggregationCycleTest.class );
         suite.addTestSuite( MavenITmng4992MapStylePropertiesParamConfigTest.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -83,6 +83,7 @@ public static Test suite()
         // -------------------------------------------------------------------------------------------------------------
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng5011ConfigureCollectionArrayFromSystemPropTest.class );
         suite.addTestSuite( MavenITmng5009AggregationCycleTest.class );
         suite.addTestSuite( MavenITmng4992MapStylePropertiesParamConfigTest.class );
         suite.addTestSuite( MavenITmng4975ProfileInjectedPluginExecutionOrderTest.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -84,7 +84,7 @@ public static Test suite()
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
         suite.addTestSuite( MavenITmng5009AggregationCycleTest.class );
-        // suite.addTestSuite( MavenITmng4992MapStylePropertiesParamConfigTest.class );
+        suite.addTestSuite( MavenITmng4992MapStylePropertiesParamConfigTest.class );
         suite.addTestSuite( MavenITmng4975ProfileInjectedPluginExecutionOrderTest.class );
         suite.addTestSuite( MavenITmng4973ExtensionVisibleToPluginInReactorTest.class );
         suite.addTestSuite( MavenITmng4966AbnormalUrlPreservationTest.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -83,6 +83,7 @@ public static Test suite()
         // -------------------------------------------------------------------------------------------------------------
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng5009AggregationCycleTest.class );
         // suite.addTestSuite( MavenITmng4992MapStylePropertiesParamConfigTest.class );
         suite.addTestSuite( MavenITmng4975ProfileInjectedPluginExecutionOrderTest.class );
         suite.addTestSuite( MavenITmng4973ExtensionVisibleToPluginInReactorTest.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -83,6 +83,7 @@ public static Test suite()
         // -------------------------------------------------------------------------------------------------------------
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng4992MapStylePropertiesParamConfigTest.class );
         suite.addTestSuite( MavenITmng4975ProfileInjectedPluginExecutionOrderTest.class );
         suite.addTestSuite( MavenITmng4973ExtensionVisibleToPluginInReactorTest.class );
         suite.addTestSuite( MavenITmng4966AbnormalUrlPreservationTest.class );

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/transform/ArtifactTransformation.java
Patch:
@@ -31,8 +31,7 @@
 
 /**
  * @author <a href="mailto:jason@maven.org">Jason van Zyl </a>
- * @version $Id: ArtifactTransformation.java,v 1.1 2005/03/03 15:37:25
- *          jvanzyl Exp $
+ * @version $Id$
  */
 public interface ArtifactTransformation
 {

File: maven-core/src/test/java/org/apache/maven/plugin/PluginParameterExpressionEvaluatorTest.java
Patch:
@@ -51,8 +51,7 @@
 
 /**
  * @author Jason van Zyl
- * @version $Id: PluginParameterExpressionEvaluatorTest.java,v 1.5 2005/03/08
- *          06:06:21 jdcasey Exp $
+ * @version $Id$
  */
 public class PluginParameterExpressionEvaluatorTest
     extends AbstractCoreMavenComponentTestCase

File: maven-core/src/main/java/org/apache/maven/classrealm/DefaultClassRealmManager.java
Patch:
@@ -147,6 +147,7 @@ private void importMavenApi( Map<String, ClassLoader> imports )
         imports.put( "org.apache.maven.project", coreRealm );
         imports.put( "org.apache.maven.reporting", coreRealm );
         imports.put( "org.apache.maven.repository", coreRealm );
+        imports.put( "org.apache.maven.rtinfo", coreRealm );
         imports.put( "org.apache.maven.settings", coreRealm );
         imports.put( "org.apache.maven.toolchain", coreRealm );
         imports.put( "org.apache.maven.usability", coreRealm );

File: maven-aether-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionResolver.java
Patch:
@@ -294,8 +294,7 @@ private Versioning readVersions( RepositorySystemSession session, Metadata metad
                  */
                 if ( versioning != null && repository instanceof LocalRepository )
                 {
-                    if ( !versioning.getSnapshotVersions().isEmpty()
-                        || ( versioning.getSnapshot() != null && versioning.getSnapshot().getBuildNumber() > 0 ) )
+                    if ( versioning.getSnapshot() != null && versioning.getSnapshot().getBuildNumber() > 0 )
                     {
                         Versioning repaired = new Versioning();
                         repaired.setLastUpdated( versioning.getLastUpdated() );

File: maven-settings-builder/src/main/java/org/apache/maven/settings/io/DefaultSettingsReader.java
Patch:
@@ -33,7 +33,7 @@
 import org.codehaus.plexus.util.xml.pull.XmlPullParserException;
 
 /**
- * Handles deserialization of settings from some kind of textual format like XML.
+ * Handles deserialization of settings from the default textual format.
  * 
  * @author Benjamin Bentmann
  */

File: maven-settings-builder/src/main/java/org/apache/maven/settings/io/DefaultSettingsWriter.java
Patch:
@@ -33,7 +33,7 @@
 import org.codehaus.plexus.util.WriterFactory;
 
 /**
- * Handles serialization of settings into some kind of textual format like XML.
+ * Handles serialization of settings into the default textual format.
  * 
  * @author Benjamin Bentmann
  */

File: maven-plugin-api/src/test/java/org/apache/maven/plugin/descriptor/PluginDescriptorBuilderTest.java
Patch:
@@ -105,6 +105,8 @@ public void testBuildReader()
         assertEquals( false, mp.isRequired() );
         assertEquals( "parameter-description", mp.getDescription() );
         assertEquals( "deprecated-parameter", mp.getDeprecated() );
+        assertEquals( "${jar.finalName}", mp.getExpression() );
+        assertEquals( "${project.build.finalName}", mp.getDefaultValue() );
 
         ComponentRequirement cr = md.getRequirements().get( 0 );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2738ProfileIdCollidesWithCliOptionTest.java
Patch:
@@ -35,7 +35,7 @@ public class MavenITmng2738ProfileIdCollidesWithCliOptionTest
 
     public MavenITmng2738ProfileIdCollidesWithCliOptionTest()
     {
-        super( "[2.1.0,3.0-alpha-1),[3.0,)" );
+        super( "[2.2.0,3.0-alpha-1),[3.0,)" );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -83,6 +83,7 @@ public static Test suite()
         // -------------------------------------------------------------------------------------------------------------
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng4925ContainerLookupRealmDuringMojoExecTest.class );
         suite.addTestSuite( MavenITmng4913UserPropertyVsDependencyPomPropertyTest.class );
         suite.addTestSuite( MavenITmng4895PluginDepWithNonRelocatedMavenApiTest.class );
         suite.addTestSuite( MavenITmng4891RobustSnapshotResolutionTest.class );

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java
Patch:
@@ -215,6 +215,7 @@ private void execute( MavenSession session, MojoExecution mojoExecution, Project
         }
         catch ( LifecycleExecutionException e )
         {
+            mojoExecution.setException( new Exception( e.getCause() ) );
             eventCatapult.fire( ExecutionEvent.Type.MojoFailed, session, mojoExecution );
 
             throw e;

File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java
Patch:
@@ -492,7 +492,7 @@ private Model readModel( ModelSource modelSource, File pomFile, ModelBuildingReq
             if ( source != null )
             {
                 source.setModelId( ModelProblemUtils.toId( model ) );
-                source.setLocation( pomFile != null ? pomFile.getAbsolutePath() : null );
+                source.setLocation( modelSource.getLocation() );
             }
         }
         catch ( ModelParseException e )

File: maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ArtifactVersion.java
Patch:
@@ -27,7 +27,7 @@
  * @version $Id$
  */
 public interface ArtifactVersion
-    extends Comparable
+    extends Comparable<ArtifactVersion>
 {
     int getMajorVersion();
 

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/conflict/NewestConflictResolver.java
Patch:
@@ -30,7 +30,7 @@
  *
  * @author <a href="mailto:markhobson@gmail.com">Mark Hobson</a>
  * @version $Id$
- * @see ArtifactVersion#compareTo(Object)
+ * @see ArtifactVersion#compareTo
  * @since 3.0
  */
 @Component( role = ConflictResolver.class, hint = "newest" )

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/conflict/OldestConflictResolver.java
Patch:
@@ -30,7 +30,7 @@
  *
  * @author <a href="mailto:markhobson@gmail.com">Mark Hobson</a>
  * @version $Id$
- * @see ArtifactVersion#compareTo(Object)
+ * @see ArtifactVersion#compareTo
  * @since 3.0
  */
 @Component( role = ConflictResolver.class, hint = "oldest" )

File: maven-core/src/main/java/org/apache/maven/LoggingRepositoryListener.java
Patch:
@@ -20,9 +20,9 @@
  */
 
 import org.codehaus.plexus.logging.Logger;
+import org.sonatype.aether.AbstractRepositoryListener;
 import org.sonatype.aether.RepositoryEvent;
 import org.sonatype.aether.transfer.MetadataNotFoundException;
-import org.sonatype.aether.util.listener.AbstractRepositoryListener;
 
 /**
  * @author Benjamin Bentmann

File: maven-embedder/src/main/java/org/apache/maven/cli/AbstractMavenTransferListener.java
Patch:
@@ -24,10 +24,10 @@
 import java.text.DecimalFormatSymbols;
 import java.util.Locale;
 
+import org.sonatype.aether.transfer.AbstractTransferListener;
 import org.sonatype.aether.transfer.TransferCancelledException;
 import org.sonatype.aether.transfer.TransferEvent;
 import org.sonatype.aether.transfer.TransferResource;
-import org.sonatype.aether.util.listener.AbstractTransferListener;
 
 abstract class AbstractMavenTransferListener
     extends AbstractTransferListener

File: maven-embedder/src/main/java/org/apache/maven/cli/QuietMavenTransferListener.java
Patch:
@@ -19,7 +19,7 @@
  * under the License.
  */
 
-import org.sonatype.aether.util.listener.AbstractTransferListener;
+import org.sonatype.aether.transfer.AbstractTransferListener;
 
 /**
  * @author Benjamin Bentmann

File: maven-core/src/test/java/org/apache/maven/project/harness/Xpp3DomAttributeIterator.java
Patch:
@@ -33,7 +33,7 @@
  * An attribute iterator for JXPath to support <code>Xpp3Dom</code>.
  * 
  * @author Benjamin Bentmann
- * @version $Id: Xpp3DomAttributeIterator.java 747943 2009-02-25 22:28:48Z bentmann $
+ * @version $Id$
  */
 class Xpp3DomAttributeIterator
     implements NodeIterator

File: maven-core/src/test/java/org/apache/maven/project/harness/Xpp3DomNodeIterator.java
Patch:
@@ -35,7 +35,7 @@
  * A node iterator for JXPath to support <code>Xpp3Dom</code>.
  * 
  * @author Benjamin Bentmann
- * @version $Id: Xpp3DomNodeIterator.java 737056 2009-01-23 15:35:43Z bentmann $
+ * @version $Id$
  */
 class Xpp3DomNodeIterator
     implements NodeIterator

File: maven-core/src/test/java/org/apache/maven/project/harness/Xpp3DomNodePointer.java
Patch:
@@ -32,7 +32,7 @@
  * A node pointer for JXPath to support <code>Xpp3Dom</code>.
  * 
  * @author Benjamin Bentmann
- * @version $Id: Xpp3DomNodePointer.java 747943 2009-02-25 22:28:48Z bentmann $
+ * @version $Id$
  */
 class Xpp3DomNodePointer
     extends NodePointer

File: maven-core/src/test/java/org/apache/maven/project/harness/Xpp3DomPointerFactory.java
Patch:
@@ -30,7 +30,7 @@
  * A node pointer factory for JXPath to support <code>Xpp3Dom</code>.
  * 
  * @author Benjamin Bentmann
- * @version $Id: Xpp3DomPointerFactory.java 737056 2009-01-23 15:35:43Z bentmann $
+ * @version $Id$
  */
 public class Xpp3DomPointerFactory
     implements NodePointerFactory

File: maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java
Patch:
@@ -126,7 +126,7 @@ public CLIManager()
         options.addOption( OptionBuilder.withLongOpt( "fail-at-end" ).withDescription( "Only fail the build afterwards; allow all non-impacted builds to continue" ).create( FAIL_AT_END ) );
         options.addOption( OptionBuilder.withLongOpt( "fail-never" ).withDescription( "NEVER fail the build, regardless of project result" ).create( FAIL_NEVER ) );
         options.addOption( OptionBuilder.withLongOpt( "resume-from" ).hasArg().withDescription( "Resume reactor from specified project" ).create( RESUME_FROM ) );
-        options.addOption( OptionBuilder.withLongOpt( "projects" ).withDescription( "Build specified reactor projects instead of all projects. A project can be specified by [groupId]:artifactId or by its relative path." ).hasArg().create( PROJECT_LIST ) );
+        options.addOption( OptionBuilder.withLongOpt( "projects" ).withDescription( "Comma-delimited list of specified reactor projects to build instead of all projects. A project can be specified by [groupId]:artifactId or by its relative path." ).hasArg().create( PROJECT_LIST ) );
         options.addOption( OptionBuilder.withLongOpt( "also-make" ).withDescription( "If project list is specified, also build projects required by the list" ).create( ALSO_MAKE ) );
         options.addOption( OptionBuilder.withLongOpt( "also-make-dependents" ).withDescription( "If project list is specified, also build projects that depend on projects on the list" ).create( ALSO_MAKE_DEPENDENTS ) );
         options.addOption( OptionBuilder.withLongOpt( "log-file" ).hasArg().withDescription( "Log file to where all build output will go." ).create( LOG_FILE ) );

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultBuildPluginManager.java
Patch:
@@ -183,8 +183,7 @@ public ClassRealm getPluginRealm( MavenSession session, PluginDescriptor pluginD
             return pluginRealm;
         }
 
-        mavenPluginManager.setupPluginRealm( pluginDescriptor, session, session.getCurrentProject().getClassRealm(),
-                                             null, null );
+        mavenPluginManager.setupPluginRealm( pluginDescriptor, session, null, null, null );
 
         return pluginDescriptor.getClassRealm();
     }

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -83,6 +83,7 @@ public static Test suite()
         // -------------------------------------------------------------------------------------------------------------
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng4895PluginDepWithNonRelocatedMavenApiTest.class );
         suite.addTestSuite( MavenITmng4891RobustSnapshotResolutionTest.class );
         //suite.addTestSuite( MavenITmng4883FailUponOverconstrainedVersionRangesTest.class );
         suite.addTestSuite( MavenITmng4877DeployUsingPrivateKeyTest.class );

File: its/core-it-support/core-it-wagon/src/main/java/org/apache/maven/wagon/providers/coreit/CoreItHttpWagon.java
Patch:
@@ -41,7 +41,7 @@
 /**
  * Shamelessly copied from ScpExternalWagon in this same project...
  *
- * @plexus.component role="org.apache.maven.wagon.Wagon" role-hint="http-coreit"
+ * @plexus.component role="org.apache.maven.wagon.Wagon" role-hint="http-coreit" instantiation-strategy="per-lookup"
  */
 public class CoreItHttpWagon
     extends AbstractWagon

File: its/core-it-support/core-it-wagon/src/main/java/org/apache/maven/wagon/providers/ssh/external/ScpExternalWagon.java
Patch:
@@ -42,7 +42,7 @@
  * NOTE: Plexus will only pick this correctly if the Class package and name are the same as that in core. This is
  * because the core component descriptor is read, but the class is read from the latter JAR.
  * 
- * @plexus.component role="org.apache.maven.wagon.Wagon" role-hint="scpexe"
+ * @plexus.component role="org.apache.maven.wagon.Wagon" role-hint="scpexe" instantiation-strategy="per-lookup"
  */
 public class ScpExternalWagon
     extends AbstractWagon

File: its/core-it-suite/src/test/resources/mng-3652/test-plugin/src/main/java/org/apache/maven/its/mng3652/MyMojo.java
Patch:
@@ -120,8 +120,9 @@ public void execute()
 
         try
         {
+            String LS = System.getProperty( "line.separator" );
             String content = FileUtils.fileRead( artifact.getFile() );
-            if ( !content.equals( "some content\n\n" ) )
+            if ( !content.equals( "some content" + LS + LS ) )
             {
                 throw new MojoExecutionException( "Expected 'some content\n\n' but was '" + content + "'" );
             }

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleDebugLogger.java
Patch:
@@ -113,6 +113,9 @@ public void debugProjectPlan( MavenProject currentProject, MavenExecutionPlan ex
 
         debugDependencyRequirements( executionPlan.getMojoExecutions() );
 
+        logger.debug( "Repositories (dependencies): " + currentProject.getRemoteProjectRepositories() );
+        logger.debug( "Repositories (plugins)     : " + currentProject.getRemotePluginRepositories() );
+
         for ( ExecutionPlanItem mojoExecution : executionPlan )
         {
             debugMojoExecution( mojoExecution.getMojoExecution() );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -71,6 +71,7 @@ public static Test suite()
         // -------------------------------------------------------------------------------------------------------------
         // Tests that currently don't pass for any Maven version, i.e. the corresponding issue hasn't been resolved yet
         // -------------------------------------------------------------------------------------------------------------
+        // suite.addTestSuite( MavenITmng4148DepPomInterpWithSettingsProfilesTest.class );
         // suite.addTestSuite( MavenITmng3890TransitiveDependencyScopeUpdateTest.class );
         // suite.addTestSuite( MavenITmng3092SnapshotsExcludedFromVersionRangeTest.class );
         // suite.addTestSuite( MavenITmng3038TransitiveDepManVersionTest.class );
@@ -247,7 +248,6 @@ public static Test suite()
         suite.addTestSuite( MavenITmng4166HideCoreCommonsCliTest.class );
         suite.addTestSuite( MavenITmng4162ReportingMigrationTest.class );
         suite.addTestSuite( MavenITmng4150VersionRangeTest.class );
-        suite.addTestSuite( MavenITmng4148DepPomInterpWithSettingsProfilesTest.class );
         suite.addTestSuite( MavenITmng4129PluginExecutionInheritanceTest.class );
         suite.addTestSuite( MavenITmng4126ParentProfilesXmlTest.class );
         suite.addTestSuite( MavenITmng4116UndecodedUrlsTest.class );

File: maven-artifact/src/main/java/org/apache/maven/artifact/repository/ArtifactRepositoryPolicy.java
Patch:
@@ -124,8 +124,8 @@ public boolean checkOutOfDate( Date lastModified )
         }
         else if ( UPDATE_POLICY_DAILY.equals( updatePolicy ) )
         {
-            // Get midnight boundary
-            Calendar cal = Calendar.getInstance( TimeZone.getTimeZone( "UTC" ) );
+            // Get local midnight boundary
+            Calendar cal = Calendar.getInstance();
 
             cal.set( Calendar.HOUR_OF_DAY, 0 );
             cal.set( Calendar.MINUTE, 0 );

File: maven-compat/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java
Patch:
@@ -48,8 +48,9 @@ public class DefaultWagonManager
     implements WagonManager
 {
 
+    // NOTE: This must use a different field name than in the super class or IoC has no chance to inject the loggers
     @Requirement
-    private Logger logger;
+    private Logger log;
 
     @Requirement
     private LegacySupport legacySupport;
@@ -169,7 +170,7 @@ public ArtifactRepository getMirrorRepository( ArtifactRepository repository )
                 id = repository.getId();
             }
 
-            logger.debug( "Using mirror: " + mirror.getUrl() + " (id: " + id + ")" );
+            log.debug( "Using mirror: " + mirror.getUrl() + " (id: " + id + ")" );
 
             repository = artifactRepositoryFactory.createArtifactRepository( id, mirror.getUrl(),
                                                                      repository.getLayout(), repository.getSnapshots(),

File: maven-aether-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java
Patch:
@@ -116,8 +116,7 @@ public ModelSource resolveModel( String groupId, String artifactId, String versi
         }
         catch ( ArtifactResolutionException e )
         {
-            throw new UnresolvableModelException( "Failed to resolve POM for " + groupId + ":" + artifactId + ":"
-                + version + " due to " + e.getMessage(), groupId, artifactId, version, e );
+            throw new UnresolvableModelException( e.getMessage(), groupId, artifactId, version, e );
         }
 
         File pomFile = pomArtifact.getFile();

File: maven-core/src/main/java/org/apache/maven/project/ReactorModelResolver.java
Patch:
@@ -169,8 +169,7 @@ public ModelSource resolveModel( String groupId, String artifactId, String versi
             }
             catch ( ArtifactResolutionException e )
             {
-                throw new UnresolvableModelException( "Failed to resolve POM for " + groupId + ":" + artifactId + ":"
-                    + version + " due to " + e.getMessage(), groupId, artifactId, version, e );
+                throw new UnresolvableModelException( e.getMessage(), groupId, artifactId, version, e );
             }
 
             pomFile = pomArtifact.getFile();

File: maven-embedder/src/main/java/org/apache/maven/cli/AbstractMavenTransferListener.java
Patch:
@@ -48,23 +48,23 @@ public void transferInitiated( TransferEvent event )
 
     public void transferSucceeded( TransferEvent event )
     {
-        TransferResource artifact = event.getResource();
+        TransferResource resource = event.getResource();
         long contentLength = event.getTransferredBytes();
         if ( contentLength >= 0 )
         {
             String type = ( event.getRequestType() == TransferEvent.RequestType.PUT ? "Uploaded" : "Downloaded" );
             String len = contentLength >= 1024 ? toKB( contentLength ) + " KB" : contentLength + " B";
 
             String throughput = "";
-            long duration = System.currentTimeMillis() - artifact.getTransferStartTime();
+            long duration = System.currentTimeMillis() - resource.getTransferStartTime();
             if ( duration > 0 )
             {
                 DecimalFormat format = new DecimalFormat( "0.0", new DecimalFormatSymbols( Locale.ENGLISH ) );
                 double kbPerSec = ( contentLength / 1024.0 ) / ( duration / 1000.0 );
                 throughput = " at " + format.format( kbPerSec ) + " KB/sec";
             }
 
-            out.println( type + ": " + artifact.getRepositoryUrl() + artifact.getResourceName() + " (" + len
+            out.println( type + ": " + resource.getRepositoryUrl() + resource.getResourceName() + " (" + len
                 + throughput + ")" );
         }
     }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4795DepResolutionInReactorProjectForkedByLifecycleTest.java
Patch:
@@ -37,7 +37,7 @@ public class MavenITmng4795DepResolutionInReactorProjectForkedByLifecycleTest
 
     public MavenITmng4795DepResolutionInReactorProjectForkedByLifecycleTest()
     {
-        super( "[2.0.3,3.0-alpha-1),[3.0-beta-1,)" );
+        super( "[2.0.3,3.0-alpha-1),[3.0-beta-4,)" );
     }
 
     /**

File: maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java
Patch:
@@ -56,9 +56,9 @@ public class DefaultMavenExecutionRequest
 
     private boolean interactiveMode = true;
 
-    private boolean cacheTransferError = true;
+    private boolean cacheTransferError;
 
-    private boolean cacheNotFound = true;
+    private boolean cacheNotFound;
 
     private List<Proxy> proxies;
 

File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -904,6 +904,9 @@ else if ( commandLine.hasOption( CLIManager.ALSO_MAKE )
             request.setThreadCount( threadConfiguration.replace( "C", "" ).replace( "W", "" ).replace( "auto", "" ) );
         }
 
+        request.setCacheNotFound( true );
+        request.setCacheTransferError( false );
+
         return request;
     }
 

File: maven-core/src/main/java/org/apache/maven/DefaultMaven.java
Patch:
@@ -345,8 +345,8 @@ public RepositorySystemSession newRepositorySession( MavenExecutionRequest reque
         session.setChecksumPolicy( request.getGlobalChecksumPolicy() );
         session.setUpdatePolicy( request.isUpdateSnapshots() ? RepositoryPolicy.UPDATE_POLICY_ALWAYS : null );
 
-        session.setNotFoundCachingEnabled( !request.isUpdateSnapshots() );
-        session.setTransferErrorCachingEnabled( !request.isUpdateSnapshots() );
+        session.setNotFoundCachingEnabled( request.isCacheNotFound() );
+        session.setTransferErrorCachingEnabled( request.isCacheTransferError() );
 
         session.setArtifactTypeRegistry( RepositoryUtils.newArtifactTypeRegistry( artifactHandlerManager ) );
 

File: maven-compat/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -146,9 +146,9 @@ private List<ArtifactRepository> normalizeToArtifactRepositories( List<?> reposi
                     try
                     {
                         ArtifactRepository repo = repositorySystem.buildArtifactRepository( (Repository) repository );
-                        repositorySystem.injectMirror( Arrays.asList( repo ), request.getMirrors() );
-                        repositorySystem.injectProxy( Arrays.asList( repo ), request.getProxies() );
-                        repositorySystem.injectAuthentication( Arrays.asList( repo ), request.getServers() );
+                        repositorySystem.injectMirror( request.getRepositorySession(), Arrays.asList( repo ) );
+                        repositorySystem.injectProxy( request.getRepositorySession(), Arrays.asList( repo ) );
+                        repositorySystem.injectAuthentication( request.getRepositorySession(), Arrays.asList( repo ) );
                         repos.add( repo );
                     }
                     catch ( InvalidRepositoryException e )

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java
Patch:
@@ -114,11 +114,11 @@ public List<ArtifactRepository> createArtifactRepositories( List<Repository> pom
             repoIds.add( repository.getId() );
         }
 
-        repositorySystem.injectMirror( artifactRepositories, request.getMirrors() );
+        repositorySystem.injectMirror( request.getRepositorySession(), artifactRepositories );
 
-        repositorySystem.injectProxy( artifactRepositories, request.getProxies() );
+        repositorySystem.injectProxy( request.getRepositorySession(), artifactRepositories );
 
-        repositorySystem.injectAuthentication( artifactRepositories, request.getServers() );
+        repositorySystem.injectAuthentication( request.getRepositorySession(), artifactRepositories );
 
         if ( externalRepositories != null )
         {

File: its/core-it-support/core-it-plugins/maven-it-plugin-artifact/src/main/java/org/apache/maven/plugin/coreit/ResolveTransitiveMojo.java
Patch:
@@ -187,7 +187,7 @@ public void run()
                                                                   dependency.getVersion(), dependency.getType(),
                                                                   dependency.getClassifier() );
 
-                        getLog().info( "[MAVEN-CORE-IT-LOG] Resolving " + getId( artifact ) );
+                        getLog().info( "[MAVEN-CORE-IT-LOG] Resolving " + ResolveTransitiveMojo.this.getId( artifact ) );
 
                         artifacts.add( artifact );
                     }
@@ -204,7 +204,8 @@ public void run()
 
                         if ( artifact.getFile() != null )
                         {
-                            props.setProperty( getId( artifact ), artifact.getFile().getPath() );
+                            props.setProperty( ResolveTransitiveMojo.this.getId( artifact ),
+                                               artifact.getFile().getPath() );
                         }
 
                         getLog().info( "[MAVEN-CORE-IT-LOG]   " + artifact.getFile() );

File: its/core-it-support/core-it-plugins/maven-it-plugin-artifact/src/main/java/org/apache/maven/plugin/coreit/InstallCustomMojo.java
Patch:
@@ -46,7 +46,7 @@ public class InstallCustomMojo
      * 
      * @parameter expression="${install.localRepoDir}"
      */
-    private String localRepoDir;
+    private File localRepoDir;
 
     /**
      * Runs this mojo.
@@ -58,7 +58,7 @@ public void execute()
     {
         try
         {
-            String url = "file://" + new File( localRepoDir ).toURL().getPath();
+            String url = "file://" + localRepoDir.toURL().getPath();
 
             localRepository =
                 repositoryFactory.createArtifactRepository( localRepository.getId(), url, new CustomRepositoryLayout(),

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4791ProjectBuilderResolvesRemotePomArtifactTest.java
Patch:
@@ -36,7 +36,7 @@ public class MavenITmng4791ProjectBuilderResolvesRemotePomArtifactTest
 
     public MavenITmng4791ProjectBuilderResolvesRemotePomArtifactTest()
     {
-        super( "[2.0.3,3.0-alpha-1),[3.0-beta-1,)" );
+        super( "[2.0.3,3.0-alpha-1),[3.0-beta-4,)" );
     }
 
     /**

File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.ParseException;
 import org.apache.commons.cli.UnrecognizedOptionException;
+import org.apache.maven.InternalErrorException;
 import org.apache.maven.Maven;
 import org.apache.maven.exception.DefaultExceptionHandler;
 import org.apache.maven.exception.ExceptionHandler;
@@ -539,7 +540,7 @@ private void logSummary( ExceptionSummary summary, Map<String, String> reference
             }
         }
 
-        if ( showErrors )
+        if ( showErrors || ( summary.getException() instanceof InternalErrorException ) )
         {
             logger.error( msg, summary.getException() );
         }

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -81,6 +81,7 @@ public static Test suite()
         // -------------------------------------------------------------------------------------------------------------
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng4771PluginPrefixResolutionDoesntTouchDisabledRepoTest.class );
         suite.addTestSuite( MavenITmng4768NearestMatchConflictResolutionTest.class );
         suite.addTestSuite( MavenITmng4765LocalPomProjectBuilderTest.class );
         suite.addTestSuite( MavenITmng4755FetchRemoteMetadataForVersionRangeTest.class );

File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.maven.execution.MavenSession;
 import org.apache.maven.lifecycle.internal.DependencyContext;
 import org.apache.maven.lifecycle.internal.LifecycleExecutionPlanCalculator;
-import org.apache.maven.lifecycle.internal.LifecycleExecutionPlanCalculatorImpl;
+import org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator;
 import org.apache.maven.lifecycle.internal.LifecycleStarter;
 import org.apache.maven.lifecycle.internal.LifecycleTaskSegmentCalculator;
 import org.apache.maven.lifecycle.internal.MojoDescriptorCreator;
@@ -169,7 +169,7 @@ public List<MavenProject> executeForkedExecutions( MojoExecution mojoExecution,
         Set<String> requiredDependencyResolutionScopes = new TreeSet<String>();
         Set<String> requiredDependencyCollectionScopes = new TreeSet<String>();
                                              // Ok, so this method could probably have a better location.
-        LifecycleExecutionPlanCalculatorImpl.collectDependencyRequirements( requiredDependencyResolutionScopes,
+        DefaultLifecycleExecutionPlanCalculator.collectDependencyRequirements( requiredDependencyResolutionScopes,
                                                                             requiredDependencyCollectionScopes,
                                                                             mojoExecution );
 

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecyclePluginAnalyzer.java
Patch:
@@ -44,7 +44,7 @@
  *         NOTE: This class is not part of any public api and can be changed or deleted without prior notice.
  */
 @Component( role = LifeCyclePluginAnalyzer.class )
-public class LifecyclePluginAnalyzerImpl
+public class DefaultLifecyclePluginAnalyzer
     implements LifeCyclePluginAnalyzer
 {
 
@@ -57,7 +57,7 @@ public class LifecyclePluginAnalyzerImpl
     @Requirement
     private Logger logger;
 
-    public LifecyclePluginAnalyzerImpl()
+    public DefaultLifecyclePluginAnalyzer()
     {
     }
 

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecycleTaskSegmentCalculator.java
Patch:
@@ -52,7 +52,7 @@
  */
 
 @Component( role = LifecycleTaskSegmentCalculator.class )
-public class LifecycleTaskSegmentCalculatorImpl
+public class DefaultLifecycleTaskSegmentCalculator
     implements LifecycleTaskSegmentCalculator
 {
     @Requirement
@@ -61,7 +61,7 @@ public class LifecycleTaskSegmentCalculatorImpl
     @Requirement
     private LifecyclePluginResolver lifecyclePluginResolver;
 
-    public LifecycleTaskSegmentCalculatorImpl()
+    public DefaultLifecycleTaskSegmentCalculator()
     {
     }
 

File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifecycleTaskSegmentCalculatorStub.java
Patch:
@@ -18,7 +18,7 @@
 import org.apache.maven.execution.MavenSession;
 import org.apache.maven.lifecycle.internal.GoalTask;
 import org.apache.maven.lifecycle.internal.LifecycleTask;
-import org.apache.maven.lifecycle.internal.LifecycleTaskSegmentCalculatorImpl;
+import org.apache.maven.lifecycle.internal.DefaultLifecycleTaskSegmentCalculator;
 import org.apache.maven.lifecycle.internal.TaskSegment;
 import org.apache.maven.plugin.InvalidPluginDescriptorException;
 import org.apache.maven.plugin.MojoNotFoundException;
@@ -34,9 +34,8 @@
 /**
  * @author Kristian Rosenvold
  */
-
 public class LifecycleTaskSegmentCalculatorStub
-    extends LifecycleTaskSegmentCalculatorImpl
+    extends DefaultLifecycleTaskSegmentCalculator
 {
     public static final String clean = "clean";
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -238,8 +238,8 @@ public static Test suite()
         suite.addTestSuite( MavenITmng4070WhitespaceTrimmingTest.class );
         suite.addTestSuite( MavenITmng4068AuthenticatedMirrorTest.class );
         suite.addTestSuite( MavenITmng4056ClassifierBasedDepResolutionFromReactorTest.class );
-        suite.addTestSuite( MavenITmng4052ReactorAwareImportScopeTest.class );
         suite.addTestSuite( MavenITmng4053PluginConfigAttributesTest.class );
+        suite.addTestSuite( MavenITmng4052ReactorAwareImportScopeTest.class );
         suite.addTestSuite( MavenITmng4048VersionRangeReactorResolutionTest.class );
         suite.addTestSuite( MavenITmng4040ProfileInjectedModulesTest.class );
         suite.addTestSuite( MavenITmng4036ParentResolutionFromSettingsRepoTest.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4761PluginLevelDependencyScopesTest.java
Patch:
@@ -34,7 +34,7 @@ public class MavenITmng4761PluginLevelDependencyScopesTest
 
     public MavenITmng4761PluginLevelDependencyScopesTest()
     {
-        super( "(3.0-beta-2,)" );
+        super( "(2.2.1,2.99)(3.0-beta-2,)" );
     }
 
     /**

File: maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileActivationContext.java
Patch:
@@ -103,7 +103,7 @@ public Map<String, String> getSystemProperties()
      * Sets the system properties to use for interpolation and profile activation. The system properties are collected
      * from the runtime environment like {@link System#getProperties()} and environment variables.
      * 
-     * @param executionProperties The execution properties, may be {@code null}.
+     * @param systemProperties The system properties, may be {@code null}.
      * @return This context, never {@code null}.
      */
     @SuppressWarnings( "unchecked" )
@@ -125,7 +125,7 @@ public DefaultProfileActivationContext setSystemProperties( Properties systemPro
      * Sets the system properties to use for interpolation and profile activation. The system properties are collected
      * from the runtime environment like {@link System#getProperties()} and environment variables.
      * 
-     * @param executionProperties The execution properties, may be {@code null}.
+     * @param systemProperties The system properties, may be {@code null}.
      * @return This context, never {@code null}.
      */
     public DefaultProfileActivationContext setSystemProperties( Map<String, String> systemProperties )

File: maven-model-builder/src/main/java/org/apache/maven/model/resolution/ModelResolver.java
Patch:
@@ -23,9 +23,9 @@
 import org.apache.maven.model.building.ModelSource;
 
 /**
- * Resolves a POM from its coordinates. During the build process, the {@link ModelBuilder} will add any relevant
- * repositories to the model resolver. In other words, the model resolver is stateful and should not be reused across
- * multiple model building requests.
+ * Resolves a POM from its coordinates. During the build process, the
+ * {@link org.apache.maven.model.building.ModelBuilder} will add any relevant repositories to the model resolver. In
+ * other words, the model resolver is stateful and should not be reused across multiple model building requests.
  *
  * @author Benjamin Bentmann
  */

File: maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsProblem.java
Patch:
@@ -46,7 +46,8 @@ public class DefaultSettingsProblem
      * Creates a new problem with the specified message and exception.
      * 
      * @param message The message describing the problem, may be {@code null}.
-     * @param severity The severity level of the problem, may be {@code null} to default to {@link Severity#ERROR}.
+     * @param severity The severity level of the problem, may be {@code null} to default to
+     *            {@link SettingsProblem.Severity#ERROR}.
      * @param source A hint about the source of the problem like a file path, may be {@code null}.
      * @param lineNumber The one-based index of the line containing the problem or {@code -1} if unknown.
      * @param columnNumber The one-based index of the column containing the problem or {@code -1} if unknown.

File: maven-settings-builder/src/main/java/org/apache/maven/settings/building/SettingsBuildingException.java
Patch:
@@ -40,7 +40,6 @@ public class SettingsBuildingException
     /**
      * Creates a new exception with the specified problems.
      * 
-     * @param modelId The identifier of the model that could not be built, may be {@code null}.
      * @param problems The problems that causes this exception, may be {@code null}.
      */
     public SettingsBuildingException( List<SettingsProblem> problems )

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -83,7 +83,7 @@ public static Test suite()
 
         suite.addTestSuite( MavenITmng4750ResolvedMavenProjectDependencyArtifactsTest.class );
         suite.addTestSuite( MavenITmng4747JavaAgentUsedByPluginTest.class );
-        suite.addTestSuite( MavenITmng4745PluginVersionUpdateTest.class );
+        // suite.addTestSuite( MavenITmng4745PluginVersionUpdateTest.class );
         suite.addTestSuite( MavenITmng4729MirrorProxyAuthUsedByProjectBuilderTest.class );
         suite.addTestSuite( MavenITmng4721OptionalPluginDependencyTest.class );
         suite.addTestSuite( MavenITmng4720DependencyManagementExclusionMergeTest.class );

File: its/core-it-support/maven-it-helper/src/main/java/org/apache/maven/it/AbstractMavenIntegrationTestCase.java
Patch:
@@ -354,7 +354,7 @@ private String formatTime( long milliseconds )
     protected File setupLocalRepo()
         throws IOException
     {
-        String tempDirPath = System.getProperty( "maven.test.tmpdir", System.getProperty( "java.io.tmpdir" ) );
+        String tempDirPath = System.getProperty( "maven.it.tmpdir", System.getProperty( "java.io.tmpdir" ) );
         File localRepo = new File( tempDirPath, "local-repository/" + getITName() );
         if ( localRepo.isDirectory() )
         {
@@ -398,7 +398,7 @@ protected Verifier newVerifier( String basedir, boolean debug )
 
         verifier.setAutoclean( false );
 
-        String globalSettings = System.getProperty( "maven.test.global-settings", "" );
+        String globalSettings = System.getProperty( "maven.it.global-settings", "" );
         if ( globalSettings.length() > 0 )
         {
             globalSettings = new File( globalSettings ).getAbsolutePath();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4633DualCompilerExecutionsWeaveModeTest.java
Patch:
@@ -32,7 +32,7 @@ public class MavenITmng4633DualCompilerExecutionsWeaveModeTest
 
     public MavenITmng4633DualCompilerExecutionsWeaveModeTest()
     {
-        super( "[3.0-beta-1,)" );
+        super( "[3.0-beta-2,)" );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -92,6 +92,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng4666CoreRealmImportTest.class );
         suite.addTestSuite( MavenITmng4654ArtifactHandlerForMainArtifactTest.class );
         suite.addTestSuite( MavenITmng4644StrictPomParsingRejectsMisplacedTextTest.class );
+        suite.addTestSuite( MavenITmng4633DualCompilerExecutionsWeaveModeTest.class );
         suite.addTestSuite( MavenITmng4629NoPomValidationErrorUponMissingSystemDepTest.class );
         suite.addTestSuite( MavenITmng4625SettingsXmlInterpolationWithXmlMarkupTest.class );
         suite.addTestSuite( MavenITmng4618AggregatorBuiltAfterModulesTest.class );

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleWeaveBuilder.java
Patch:
@@ -101,11 +101,11 @@ public LifecycleWeaveBuilder( MojoExecutor mojoExecutor, BuilderCommon builderCo
     }
 
     public void build( ProjectBuildList projectBuilds, ReactorContext buildContext, List<TaskSegment> taskSegments,
-                       MavenSession session, ExecutorService executoru, ReactorBuildStatus reactorBuildStatus )
+                       MavenSession session, ExecutorService executor, ReactorBuildStatus reactorBuildStatus )
         throws ExecutionException, InterruptedException
     {
         ConcurrentBuildLogger concurrentBuildLogger = new ConcurrentBuildLogger();
-        CompletionService<ProjectSegment> service = new ExecutorCompletionService<ProjectSegment>( executoru );
+        CompletionService<ProjectSegment> service = new ExecutorCompletionService<ProjectSegment>( executor );
 
         try
         {
@@ -136,7 +136,7 @@ public void build( ProjectBuildList projectBuilds, ReactorContext buildContext,
                 }
                 for ( ProjectSegment projectBuild : segmentChunks )
                 {
-                    plans.put( projectBuild, executoru.submit( createEPFuture( projectBuild, projectArtifacts ) ) );
+                    plans.put( projectBuild, executor.submit( createEPFuture( projectBuild, projectArtifacts ) ) );
                 }
 
                 for ( ProjectSegment projectSegment : plans.keySet() )

File: maven-artifact/src/main/java/org/apache/maven/artifact/ArtifactUtils.java
Patch:
@@ -107,9 +107,9 @@ public static String key( String groupId, String artifactId, String version )
         return groupId + ":" + artifactId + ":" + version;
     }
 
-    public static Map<String,Artifact> artifactMapByVersionlessId( Collection<Artifact> artifacts )
+    public static Map<String, Artifact> artifactMapByVersionlessId( Collection<Artifact> artifacts )
     {
-        Map<String,Artifact> artifactMap = new LinkedHashMap<String,Artifact>();
+        Map<String, Artifact> artifactMap = new LinkedHashMap<String, Artifact>();
 
         if ( artifacts != null )
         {

File: maven-artifact/src/main/java/org/apache/maven/artifact/repository/ArtifactRepositoryPolicy.java
Patch:
@@ -61,9 +61,7 @@ public ArtifactRepositoryPolicy( ArtifactRepositoryPolicy policy )
         this( policy.isEnabled(), policy.getUpdatePolicy(), policy.getChecksumPolicy() );
     }
 
-    public ArtifactRepositoryPolicy( boolean enabled,
-                                     String updatePolicy,
-                                     String checksumPolicy )
+    public ArtifactRepositoryPolicy( boolean enabled, String updatePolicy, String checksumPolicy )
     {
         this.enabled = enabled;
 

File: maven-artifact/src/main/java/org/apache/maven/artifact/repository/layout/ArtifactRepositoryLayout2.java
Patch:
@@ -1,8 +1,5 @@
 package org.apache.maven.artifact.repository.layout;
 
-import org.apache.maven.artifact.repository.ArtifactRepository;
-import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;
-
 /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
@@ -22,6 +19,9 @@
  * under the License.
  */
 
+import org.apache.maven.artifact.repository.ArtifactRepository;
+import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;
+
 public interface ArtifactRepositoryLayout2
     extends ArtifactRepositoryLayout
 {

File: maven-compat/src/main/java/org/apache/maven/artifact/installer/DefaultArtifactInstaller.java
Patch:
@@ -39,7 +39,7 @@
 /**
  * @author Jason van Zyl
  */
-@Component(role=ArtifactInstaller.class)
+@Component( role = ArtifactInstaller.class )
 public class DefaultArtifactInstaller
     extends AbstractLogEnabled
     implements ArtifactInstaller

File: maven-compat/src/main/java/org/apache/maven/artifact/resolver/DefaultArtifactCollector.java
Patch:
@@ -22,7 +22,7 @@
 import org.codehaus.plexus.component.annotations.Component;
 
 @Deprecated
-@Component(role=ArtifactCollector.class)
+@Component( role = ArtifactCollector.class )
 public class DefaultArtifactCollector
     extends org.apache.maven.repository.legacy.resolver.DefaultLegacyArtifactCollector
     implements ArtifactCollector

File: maven-compat/src/main/java/org/apache/maven/execution/DefaultRuntimeInformation.java
Patch:
@@ -37,12 +37,12 @@
  * @version $Id$
  */
 @Deprecated
-@Component(role=RuntimeInformation.class)
+@Component( role = RuntimeInformation.class )
 public class DefaultRuntimeInformation
     implements RuntimeInformation, Initializable
 {
     private static final String MAVEN_GROUPID = "org.apache.maven";
-    
+
     private static final String MAVEN_PROPERTIES = "META-INF/maven/" + MAVEN_GROUPID + "/maven-core/pom.properties";
 
     private ArtifactVersion applicationVersion;
@@ -60,7 +60,7 @@ public void initialize()
         {
             Properties properties = new Properties();
             resourceAsStream = getClass().getClassLoader().getResourceAsStream( MAVEN_PROPERTIES );
-            
+
             if ( resourceAsStream == null )
             {
                 throw new IllegalStateException( "Unable to find Maven properties in classpath: " + MAVEN_PROPERTIES );

File: maven-compat/src/main/java/org/apache/maven/profiles/DefaultMavenProfilesBuilder.java
Patch:
@@ -72,7 +72,8 @@ public ProfilesRoot buildProfiles( File basedir )
                 }
                 catch ( Exception e )
                 {
-                    getLogger().warn( "Failed to initialize environment variable resolver. Skipping environment substitution in " + PROFILES_XML_FILE + "." );
+                    getLogger().warn( "Failed to initialize environment variable resolver. Skipping environment "
+                                          + "substitution in " + PROFILES_XML_FILE + "." );
                     getLogger().debug( "Failed to initialize envar resolver. Skipping resolution.", e );
                 }
 

File: maven-compat/src/main/java/org/apache/maven/profiles/DefaultProfileManager.java
Patch:
@@ -64,8 +64,8 @@ public class DefaultProfileManager
     private Properties requestProperties;
 
     /**
-     * @deprecated without passing in the system properties, the SystemPropertiesProfileActivator will not work correctly
-     * in embedded envirnments.
+     * @deprecated without passing in the system properties, the SystemPropertiesProfileActivator will not work
+     *             correctly in embedded envirnments.
      */
     public DefaultProfileManager( PlexusContainer container )
     {

File: maven-compat/src/main/java/org/apache/maven/profiles/activation/ProfileActivationException.java
Patch:
@@ -24,9 +24,9 @@ public class ProfileActivationException
     extends Exception
 {
 
-	private static final long serialVersionUID = -90820222109103638L;
+    private static final long serialVersionUID = -90820222109103638L;
 
-	public ProfileActivationException( String message, Throwable cause )
+    public ProfileActivationException( String message, Throwable cause )
     {
         super( message, cause );
     }

File: maven-compat/src/main/java/org/apache/maven/profiles/activation/ProfileActivator.java
Patch:
@@ -24,7 +24,7 @@
 @Deprecated
 public interface ProfileActivator
 {
-    static final String ROLE = ProfileActivator.class.getName();
+    final String ROLE = ProfileActivator.class.getName();
 
     boolean canDetermineActivation( Profile profile );
 

File: maven-compat/src/main/java/org/apache/maven/project/interpolation/ModelInterpolationException.java
Patch:
@@ -24,7 +24,7 @@
  *         <p/>
  *         Created on Feb 2, 2005
  */
-@SuppressWarnings("serial")
+@SuppressWarnings( "serial" )
 @Deprecated
 public class ModelInterpolationException
     extends Exception

File: maven-compat/src/main/java/org/apache/maven/project/validation/DefaultModelValidator.java
Patch:
@@ -33,7 +33,7 @@
  * @author <a href="mailto:trygvis@inamo.no">Trygve Laugst&oslash;l</a>
  * @version $Id$
  */
-@Component(role = ModelValidator.class )
+@Component( role = ModelValidator.class )
 @Deprecated
 public class DefaultModelValidator
     implements ModelValidator

File: maven-compat/src/main/java/org/apache/maven/project/validation/ModelValidationResult.java
Patch:
@@ -31,7 +31,7 @@ public class ModelValidationResult
 {
 
     /** */
-    private final static String NEWLINE = System.getProperty( "line.separator" );
+    private static final String NEWLINE = System.getProperty( "line.separator" );
 
     /** */
     private List<String> messages;

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/DefaultUpdateCheckManager.java
Patch:
@@ -41,7 +41,7 @@
 import org.codehaus.plexus.logging.AbstractLogEnabled;
 import org.codehaus.plexus.logging.Logger;
 
-@Component(role=UpdateCheckManager.class)
+@Component( role = UpdateCheckManager.class )
 public class DefaultUpdateCheckManager
     extends AbstractLogEnabled
     implements UpdateCheckManager
@@ -390,7 +390,8 @@ private Properties read( File touchfile )
                     }
                     catch ( IOException e )
                     {
-                        getLogger().debug( "Error releasing shared lock for resolution tracking file: " + touchfile, e );
+                        getLogger().debug( "Error releasing shared lock for resolution tracking file: " + touchfile,
+                                           e );
                     }
                 }
 

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/conflict/ConflictResolver.java
Patch:
@@ -30,7 +30,7 @@
  */
 public interface ConflictResolver
 {
-    static String ROLE = ConflictResolver.class.getName();
+    String ROLE = ConflictResolver.class.getName();
 
     /**
      * Determines which of the specified versions of an artifact to use when there are conflicting declarations.
@@ -41,6 +41,5 @@ public interface ConflictResolver
      *         this conflict cannot be resolved
      * @since 3.0
      */
-    ResolutionNode resolveConflict( ResolutionNode node1,
-                                    ResolutionNode node2 );
+    ResolutionNode resolveConflict( ResolutionNode node1, ResolutionNode node2 );
 }

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/conflict/DefaultConflictResolver.java
Patch:
@@ -1,7 +1,5 @@
 package org.apache.maven.repository.legacy.resolver.conflict;
 
-import org.codehaus.plexus.component.annotations.Component;
-
 /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
@@ -21,6 +19,8 @@
  * under the License.
  */
 
+import org.codehaus.plexus.component.annotations.Component;
+
 /**
  * The default conflict resolver that delegates to the nearest strategy.
  *
@@ -30,7 +30,7 @@
  * @deprecated As of 3.0, use a specific implementation instead, e.g. {@link NearestConflictResolver}
  */
 @Deprecated
-@Component(role=ConflictResolver.class)
+@Component( role = ConflictResolver.class )
 public class DefaultConflictResolver
     extends NearestConflictResolver
 {

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/conflict/FarthestConflictResolver.java
Patch:
@@ -30,7 +30,7 @@
  * @version $Id$
  * @since 3.0
  */
-@Component(role=ConflictResolver.class, hint="farthest")
+@Component( role = ConflictResolver.class, hint = "farthest" )
 public class FarthestConflictResolver
     implements ConflictResolver
 {
@@ -41,8 +41,7 @@ public class FarthestConflictResolver
     *      org.apache.maven.artifact.resolver.ResolutionNode)
     */
 
-    public ResolutionNode resolveConflict( ResolutionNode node1,
-                                           ResolutionNode node2 )
+    public ResolutionNode resolveConflict( ResolutionNode node1, ResolutionNode node2 )
     {
         return node1.getDepth() >= node2.getDepth() ? node1 : node2;
     }

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/conflict/NearestConflictResolver.java
Patch:
@@ -31,7 +31,7 @@
  * @version $Id$
  * @since 3.0
  */
-@Component(role=ConflictResolver.class, hint="nearest")
+@Component( role = ConflictResolver.class, hint = "nearest" )
 public class NearestConflictResolver
     implements ConflictResolver
 {
@@ -42,8 +42,7 @@ public class NearestConflictResolver
     *      org.apache.maven.artifact.resolver.ResolutionNode)
     */
 
-    public ResolutionNode resolveConflict( ResolutionNode node1,
-                                           ResolutionNode node2 )
+    public ResolutionNode resolveConflict( ResolutionNode node1, ResolutionNode node2 )
     {
         return node1.getDepth() <= node2.getDepth() ? node1 : node2;
     }

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/conflict/NewestConflictResolver.java
Patch:
@@ -33,7 +33,7 @@
  * @see ArtifactVersion#compareTo(Object)
  * @since 3.0
  */
-@Component(role=ConflictResolver.class, hint="newest")
+@Component( role = ConflictResolver.class, hint = "newest" )
 public class NewestConflictResolver
     implements ConflictResolver
 {
@@ -44,8 +44,7 @@ public class NewestConflictResolver
     *      org.apache.maven.artifact.resolver.ResolutionNode)
     */
 
-    public ResolutionNode resolveConflict( ResolutionNode node1,
-                                           ResolutionNode node2 )
+    public ResolutionNode resolveConflict( ResolutionNode node1, ResolutionNode node2 )
     {
         try
         {

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/conflict/OldestConflictResolver.java
Patch:
@@ -33,7 +33,7 @@
  * @see ArtifactVersion#compareTo(Object)
  * @since 3.0
  */
-@Component(role=ConflictResolver.class, hint="oldest")
+@Component( role = ConflictResolver.class, hint = "oldest" )
 public class OldestConflictResolver
     implements ConflictResolver
 {
@@ -44,8 +44,7 @@ public class OldestConflictResolver
     *      org.apache.maven.artifact.resolver.ResolutionNode)
     */
 
-    public ResolutionNode resolveConflict( ResolutionNode node1,
-                                           ResolutionNode node2 )
+    public ResolutionNode resolveConflict( ResolutionNode node1, ResolutionNode node2 )
     {
         try
         {

File: maven-compat/src/main/java/org/apache/maven/repository/metadata/ClasspathContainer.java
Patch:
@@ -34,7 +34,7 @@
 public class ClasspathContainer
 implements Iterable<ArtifactMetadata>
 {
-	private List<ArtifactMetadata> classpath;
+    private List<ArtifactMetadata> classpath;
 
     private ArtifactScopeEnum scope;
 

File: maven-compat/src/main/java/org/apache/maven/repository/metadata/DefaultClasspathTransformation.java
Patch:
@@ -34,9 +34,9 @@
  * @author <a href="oleg@codehaus.org">Oleg Gusakov</a>
  *
  */
-@Component(role=ClasspathTransformation.class)
+@Component( role = ClasspathTransformation.class )
 public class DefaultClasspathTransformation
-implements ClasspathTransformation
+    implements ClasspathTransformation
 {
     @Requirement
     GraphConflictResolver conflictResolver;
@@ -136,7 +136,7 @@ protected void visit( MetadataGraphVertex node ) // , String version, String art
 //                        }
 //                    );
 
-            List<MetadataGraphEdge> exits = graph.getExcidentEdges(node);
+            List<MetadataGraphEdge> exits = graph.getExcidentEdges( node );
 
             if ( exits != null && exits.size() > 0 )
             {

File: maven-compat/src/main/java/org/apache/maven/repository/metadata/MetadataSource.java
Patch:
@@ -34,6 +34,7 @@ public interface MetadataSource
 {
     String ROLE = MetadataSource.class.getName();
 
-    MetadataResolution retrieve( ArtifactMetadata artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )
+    MetadataResolution retrieve( ArtifactMetadata artifact, ArtifactRepository localRepository,
+                                 List<ArtifactRepository> remoteRepositories )
         throws MetadataRetrievalException;
 }
\ No newline at end of file

File: maven-core/src/main/java/org/apache/maven/BuildFailureException.java
Patch:
@@ -1,6 +1,5 @@
 package org.apache.maven;
 
-
 /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file

File: maven-core/src/main/java/org/apache/maven/artifact/handler/DefaultArtifactHandler.java
Patch:
@@ -1,7 +1,5 @@
 package org.apache.maven.artifact.handler;
 
-import org.codehaus.plexus.component.annotations.Component;
-
 /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
@@ -21,12 +19,14 @@
  * under the License.
  */
 
+import org.codehaus.plexus.component.annotations.Component;
+
 /**
  * @author <a href="mailto:brett@apache.org">Brett Porter</a>
  * @author Jason van Zyl
  * @version $Id$
  */
-@Component(role=ArtifactHandler.class) 
+@Component( role = ArtifactHandler.class )
 public class DefaultArtifactHandler
     implements ArtifactHandler
 {

File: maven-core/src/main/java/org/apache/maven/artifact/handler/manager/ArtifactHandlerManager.java
Patch:
@@ -33,5 +33,5 @@ public interface ArtifactHandlerManager
 
     ArtifactHandler getArtifactHandler( String type );
 
-    void addHandlers( Map<String,ArtifactHandler> handlers );
+    void addHandlers( Map<String, ArtifactHandler> handlers );
 }
\ No newline at end of file

File: maven-core/src/main/java/org/apache/maven/artifact/repository/layout/DefaultRepositoryLayout.java
Patch:
@@ -28,7 +28,7 @@
 /**
  * @author jdcasey
  */
-@Component(role=ArtifactRepositoryLayout.class, hint="default")
+@Component( role = ArtifactRepositoryLayout.class, hint = "default" )
 public class DefaultRepositoryLayout
     implements ArtifactRepositoryLayout
 {
@@ -42,7 +42,7 @@ public String getId()
     {
         return "default";
     }
-    
+
     public String pathOf( Artifact artifact )
     {
         ArtifactHandler artifactHandler = artifact.getArtifactHandler();

File: maven-core/src/main/java/org/apache/maven/artifact/resolver/DefaultResolutionErrorHandler.java
Patch:
@@ -69,7 +69,8 @@ public void throwErrors( ArtifactResolutionRequest request, ArtifactResolutionRe
         if ( result.hasMissingArtifacts() )
         {
             throw new MultipleArtifactsNotFoundException( request.getArtifact(), toList( result.getArtifacts() ),
-                                                          result.getMissingArtifacts(), request.getRemoteRepositories() );
+                                                          result.getMissingArtifacts(),
+                                                          request.getRemoteRepositories() );
         }
 
         // this should never happen since we checked all possible error sources before but better be sure

File: maven-core/src/main/java/org/apache/maven/artifact/resolver/ResolutionErrorHandler.java
Patch:
@@ -25,7 +25,7 @@
 public interface ResolutionErrorHandler
 {
 
-    public void throwErrors( ArtifactResolutionRequest request, ArtifactResolutionResult result )
+    void throwErrors( ArtifactResolutionRequest request, ArtifactResolutionResult result )
         throws ArtifactResolutionException;
 
 }

File: maven-core/src/main/java/org/apache/maven/artifact/resolver/ResolutionNode.java
Patch:
@@ -80,7 +80,8 @@ public Object getKey()
         return artifact.getDependencyConflictId();
     }
 
-    public void addDependencies( Set<Artifact> artifacts, List<ArtifactRepository> remoteRepositories, ArtifactFilter filter )
+    public void addDependencies( Set<Artifact> artifacts, List<ArtifactRepository> remoteRepositories,
+                                 ArtifactFilter filter )
         throws CyclicDependencyException, OverConstrainedVersionException
     {
         if ( artifacts != null && !artifacts.isEmpty() )

File: maven-core/src/main/java/org/apache/maven/execution/AbstractExecutionListener.java
Patch:
@@ -1,6 +1,5 @@
 package org.apache.maven.execution;
 
-
 /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
@@ -22,7 +21,7 @@
 
 /**
  * Provides a skeleton implementation for execution listeners. The methods of this class are empty.
- * 
+ *
  * @author Benjamin Bentmann
  */
 public class AbstractExecutionListener

File: maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java
Patch:
@@ -155,7 +155,8 @@ public static MavenExecutionRequest copy( MavenExecutionRequest original )
         copy.setUserSettingsFile( original.getUserSettingsFile() );
         copy.setGlobalSettingsFile( original.getGlobalSettingsFile() );
         copy.setUserToolchainsFile( original.getUserToolchainsFile() );
-        copy.setBaseDirectory( ( original.getBaseDirectory() != null ) ? new File( original.getBaseDirectory() ) : null );
+        copy.setBaseDirectory( ( original.getBaseDirectory() != null )
+                               ? new File( original.getBaseDirectory() ) : null );
         copy.setGoals( original.getGoals() );
         copy.setRecursive( original.isRecursive() );
         copy.setPom( original.getPom() );

File: maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulator.java
Patch:
@@ -36,7 +36,7 @@
 import org.codehaus.plexus.component.annotations.Requirement;
 import org.codehaus.plexus.util.StringUtils;
 
-@Component(role = MavenExecutionRequestPopulator.class)
+@Component( role = MavenExecutionRequestPopulator.class )
 public class DefaultMavenExecutionRequestPopulator
     implements MavenExecutionRequestPopulator
 {

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/ThreadConfigurationService.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 
-@Component(role = ThreadConfigurationService.class)
+@Component( role = ThreadConfigurationService.class )
 public class ThreadConfigurationService
 {
     @Requirement
@@ -35,7 +35,7 @@ public class ThreadConfigurationService
     private final int cpuCores;
 
 
-    @SuppressWarnings({"UnusedDeclaration"})
+    @SuppressWarnings( { "UnusedDeclaration" } )
     public ThreadConfigurationService()
     {
         cpuCores = Runtime.getRuntime().availableProcessors();

File: maven-core/src/main/java/org/apache/maven/plugin/InvalidPluginException.java
Patch:
@@ -1,8 +1,5 @@
 package org.apache.maven.plugin;
 
-import org.apache.maven.project.ProjectBuildingException;
-import org.apache.maven.project.artifact.InvalidDependencyVersionException;
-
 /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
@@ -22,6 +19,9 @@
  * under the License.
  */
 
+import org.apache.maven.project.ProjectBuildingException;
+import org.apache.maven.project.artifact.InvalidDependencyVersionException;
+
 /**
  * Thrown when a plugin is not internally consistent.
  *

File: maven-core/src/main/java/org/apache/maven/plugin/PluginExecutionException.java
Patch:
@@ -47,7 +47,8 @@ public PluginExecutionException( MojoExecution mojoExecution, MavenProject proje
         this.mojoExecution = mojoExecution;
     }
 
-    public PluginExecutionException( MojoExecution mojoExecution, MavenProject project, DuplicateArtifactAttachmentException cause )
+    public PluginExecutionException( MojoExecution mojoExecution, MavenProject project,
+                                     DuplicateArtifactAttachmentException cause )
     {
         super( mojoExecution.getMojoDescriptor(), project, constructMessage( mojoExecution, cause ), cause );
         this.mojoExecution = mojoExecution;

File: maven-core/src/main/java/org/apache/maven/plugin/version/internal/DefaultPluginVersionResolver.java
Patch:
@@ -44,7 +44,7 @@
 
 /**
  * Resolves a version for a plugin.
- * 
+ *
  * @author Benjamin Bentmann
  */
 @Component( role = PluginVersionResolver.class )
@@ -115,7 +115,7 @@ private PluginVersionResult resolveFromRepository( PluginVersionRequest request
 
             File artifactMetadataFile = new File( localRepository.getBasedir(), localPath );
 
-            if ( !request.isOffline() && ( !artifactMetadataFile.exists() /* || user requests snapshot updates */) )
+            if ( !request.isOffline() && ( !artifactMetadataFile.exists() /* || user requests snapshot updates */ ) )
             {
                 String remotePath = getRemoteMetadataPath( request, repository );
 

File: maven-core/src/main/java/org/apache/maven/project/DuplicateProjectException.java
Patch:
@@ -1,7 +1,5 @@
 package org.apache.maven.project;
 
-import java.io.File;
-
 /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
@@ -21,6 +19,8 @@
  * under the License.
  */
 
+import java.io.File;
+
 /**
  * Exception that occurs when the project list contains duplicate projects instead of ignoring one.
  *

File: maven-core/src/main/java/org/apache/maven/project/artifact/PluginArtifact.java
Patch:
@@ -36,7 +36,8 @@ public class PluginArtifact
 
     public PluginArtifact( Plugin plugin, Artifact pluginArtifact )
     {
-        super( plugin.getGroupId(), plugin.getArtifactId(), plugin.getVersion(), null, "maven-plugin", null, new PluginArtifactHandler() );
+        super( plugin.getGroupId(), plugin.getArtifactId(), plugin.getVersion(), null, "maven-plugin", null,
+               new PluginArtifactHandler() );
         this.plugin = plugin;
         setFile( pluginArtifact.getFile() );
         setResolved( true );

File: maven-core/src/main/java/org/apache/maven/project/artifact/ProjectArtifact.java
Patch:
@@ -36,7 +36,8 @@ public class ProjectArtifact
 
     public ProjectArtifact( MavenProject project )
     {
-        super( project.getGroupId(), project.getArtifactId(), project.getVersion(), null, "pom", null, new PomArtifactHandler() );
+        super( project.getGroupId(), project.getArtifactId(), project.getVersion(), null, "pom", null,
+               new PomArtifactHandler() );
         this.project = project;
         setFile( project.getFile() );
         setResolved( true );
@@ -46,7 +47,7 @@ public MavenProject getProject()
     {
         return project;
     }
-    
+
     public List<Dependency> getDependencies()
     {
         return project.getDependencies();

File: maven-core/src/main/java/org/apache/maven/settings/building/DefaultSettingsBuilder.java
Patch:
@@ -44,7 +44,7 @@
 
 /**
  * Builds the effective settings from a user settings file and/or a global settings file.
- * 
+ *
  * @author Benjamin Bentmann
  */
 @Component( role = SettingsBuilder.class )
@@ -159,7 +159,8 @@ private Settings readSettings( File settingsFile, SettingsBuildingRequest reques
         return settings;
     }
 
-    private Settings interpolate( Settings settings, SettingsBuildingRequest request, SettingsProblemCollector problems )
+    private Settings interpolate( Settings settings, SettingsBuildingRequest request,
+                                  SettingsProblemCollector problems )
     {
         StringWriter writer = new StringWriter( 1024 * 4 );
 

File: maven-core/src/main/java/org/apache/maven/toolchain/RequirementMatcher.java
Patch:
@@ -1,3 +1,5 @@
+package org.apache.maven.toolchain;
+
 /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
@@ -17,8 +19,6 @@
  * under the License.
  */
 
-package org.apache.maven.toolchain;
-
 /**
  *
  * @author mkleint

File: maven-core/src/main/java/org/apache/maven/toolchain/RequirementMatcherFactory.java
Patch:
@@ -1,3 +1,5 @@
+package org.apache.maven.toolchain;
+
 /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
@@ -17,8 +19,6 @@
  * under the License.
  */
 
-package org.apache.maven.toolchain;
-
 import org.apache.maven.artifact.versioning.DefaultArtifactVersion;
 import org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;
 import org.apache.maven.artifact.versioning.VersionRange;

File: maven-core/src/main/java/org/apache/maven/toolchain/Toolchain.java
Patch:
@@ -1,3 +1,5 @@
+package org.apache.maven.toolchain;
+
 /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
@@ -17,9 +19,6 @@
  * under the License.
  */
 
-package org.apache.maven.toolchain;
-
-
 /**
  * @author Milos Kleint
  * @author Jason van Zyl

File: maven-core/src/main/java/org/apache/maven/toolchain/ToolchainFactory.java
Patch:
@@ -1,3 +1,5 @@
+package org.apache.maven.toolchain;
+
 /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
@@ -17,8 +19,6 @@
  * under the License.
  */
 
-package org.apache.maven.toolchain;
-
 import org.apache.maven.toolchain.model.ToolchainModel;
 
 /**

File: maven-core/src/main/java/org/apache/maven/toolchain/ToolchainManagerPrivate.java
Patch:
@@ -1,3 +1,5 @@
+package org.apache.maven.toolchain;
+
 /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
@@ -17,9 +19,6 @@
  * under the License.
  */
 
-
-package org.apache.maven.toolchain;
-
 import org.apache.maven.execution.MavenSession;
 
 

File: maven-core/src/main/java/org/apache/maven/toolchain/ToolchainPrivate.java
Patch:
@@ -1,3 +1,5 @@
+package org.apache.maven.toolchain;
+
 /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
@@ -17,8 +19,6 @@
  * under the License.
  */
 
-package org.apache.maven.toolchain;
-
 import java.util.Map;
 
 import org.apache.maven.toolchain.model.ToolchainModel;

File: maven-core/src/main/java/org/apache/maven/toolchain/java/DefaultJavaToolChain.java
Patch:
@@ -1,3 +1,5 @@
+package org.apache.maven.toolchain.java;
+
 /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
@@ -17,8 +19,6 @@
  * under the License.
  */
 
-package org.apache.maven.toolchain.java;
-
 import java.io.File;
 
 import org.apache.maven.toolchain.DefaultToolchain;
@@ -31,7 +31,7 @@
 /**
  * @author Milos Kleint
  */
-@Component(role=JavaToolChain.class)
+@Component( role = JavaToolChain.class )
 public class DefaultJavaToolChain
     extends DefaultToolchain
     implements JavaToolChain

File: maven-core/src/main/java/org/apache/maven/toolchain/java/DefaultJavaToolchainFactory.java
Patch:
@@ -1,3 +1,5 @@
+package org.apache.maven.toolchain.java;
+
 /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
@@ -17,8 +19,6 @@
  * under the License.
  */
 
-package org.apache.maven.toolchain.java;
-
 import java.io.File;
 
 import org.apache.maven.toolchain.MisconfiguredToolchainException;

File: maven-core/src/main/java/org/apache/maven/toolchain/java/JavaToolChain.java
Patch:
@@ -1,3 +1,5 @@
+package org.apache.maven.toolchain.java;
+
 /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
@@ -17,11 +19,8 @@
  * under the License.
  */
 
-package org.apache.maven.toolchain.java;
-
 import org.apache.maven.toolchain.Toolchain;
 
-
 /**
  * @author Jason van Zyl
  * @author Milos Kleint

File: maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java
Patch:
@@ -164,7 +164,8 @@ static Properties getBuildProperties()
         InputStream resourceAsStream = null;
         try
         {
-            resourceAsStream = MavenCli.class.getClassLoader().getResourceAsStream( "org/apache/maven/messages/build.properties" );
+            resourceAsStream =
+                MavenCli.class.getClassLoader().getResourceAsStream( "org/apache/maven/messages/build.properties" );
 
             if ( resourceAsStream != null )
             {

File: maven-embedder/src/main/java/org/apache/maven/cli/ExecutionEventLogger.java
Patch:
@@ -37,7 +37,7 @@
 
 /**
  * Logs execution events to a user-supplied logger.
- * 
+ *
  * @author Benjamin Bentmann
  */
 class ExecutionEventLogger
@@ -204,7 +204,7 @@ private void logStats( MavenSession session )
 
         String wallClock = session.getRequest().isThreadConfigurationPresent() ? " (Wall Clock)" : "";
 
-        logger.info( "Total time: " + getFormattedTime( time ) + wallClock);
+        logger.info( "Total time: " + getFormattedTime( time ) + wallClock );
 
         logger.info( "Finished at: " + finish );
 

File: maven-model-builder/src/main/java/org/apache/maven/model/building/ModelBuildingEventCatapult.java
Patch:
@@ -22,21 +22,21 @@
 /**
  * Assists in firing events from a generic method by abstracting from the actual callback method to be called on the
  * listener.
- * 
+ *
  * @author Benjamin Bentmann
  */
 interface ModelBuildingEventCatapult
 {
 
     /**
      * Notifies the specified listener of the given event.
-     * 
+     *
      * @param listener The listener to notify, must not be {@code null}.
      * @param event The event to fire, must not be {@code null}.
      */
     void fire( ModelBuildingListener listener, ModelBuildingEvent event );
 
-    static final ModelBuildingEventCatapult BUILD_EXTENSIONS_ASSEMBLED = new ModelBuildingEventCatapult()
+    final ModelBuildingEventCatapult BUILD_EXTENSIONS_ASSEMBLED = new ModelBuildingEventCatapult()
     {
         public void fire( ModelBuildingListener listener, ModelBuildingEvent event )
         {

File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/PathTranslatingPostProcessor.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.List;
 
 /**
- * 
+ *
  * @version $Id$
  */
 class PathTranslatingPostProcessor
@@ -40,7 +40,8 @@ class PathTranslatingPostProcessor
     private final PathTranslator pathTranslator;
     private final List<String> expressionPrefixes;
 
-    public PathTranslatingPostProcessor( List<String> expressionPrefixes, Collection<String> unprefixedPathKeys, File projectDir, PathTranslator pathTranslator )
+    public PathTranslatingPostProcessor( List<String> expressionPrefixes, Collection<String> unprefixedPathKeys,
+                                         File projectDir, PathTranslator pathTranslator )
     {
         this.expressionPrefixes = expressionPrefixes;
         this.unprefixedPathKeys = unprefixedPathKeys;

File: maven-model-builder/src/main/java/org/apache/maven/model/superpom/DefaultSuperPomProvider.java
Patch:
@@ -31,7 +31,7 @@
 
 /**
  * Provides the super POM that all models implicitly inherit from.
- * 
+ *
  * @author Benjamin Bentmann
  */
 @Component( role = SuperPomProvider.class )
@@ -69,7 +69,7 @@ public Model getSuperModel( String version )
 
             try
             {
-                Map<String,String> options = new HashMap<String,String>();
+                Map<String, String> options = new HashMap<String, String>();
                 options.put( "xml:4.0.0", "xml:4.0.0" );
                 superModel = modelProcessor.read( is, options );
             }

File: maven-plugin-api/src/main/java/org/apache/maven/plugin/Mojo.java
Patch:
@@ -28,8 +28,8 @@
  * It features an <code>execute()</code> method, which triggers the Mojo's build-process behavior, and can throw
  * a MojoExecutionException or MojoFailureException if error conditions occur.
  * <br/>
- * Also included is the <code>setLog(...)</code> method, which simply allows Maven to inject a logging mechanism which will
- * allow the Mojo to communicate to the outside world through standard Maven channels.
+ * Also included is the <code>setLog(...)</code> method, which simply allows Maven to inject a logging mechanism which
+ * will allow the Mojo to communicate to the outside world through standard Maven channels.
  *
  * @author Jason van Zyl
  */

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4343MissingReleaseUpdatePolicyTest.java
Patch:
@@ -26,6 +26,7 @@
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 import java.util.Properties;
 
@@ -52,7 +53,7 @@ public class MavenITmng4343MissingReleaseUpdatePolicyTest
 
     private List requestedUris;
 
-    private boolean blockAccess;
+    private volatile boolean blockAccess;
 
     public MavenITmng4343MissingReleaseUpdatePolicyTest()
     {
@@ -111,7 +112,7 @@ else if ( request.getRequestURI().endsWith( ".md5" ) || request.getRequestURI().
         server.setHandler( repoHandler );
         server.start();
 
-        requestedUris = new ArrayList();
+        requestedUris = Collections.synchronizedList( new ArrayList() );
     }
 
     protected void tearDown()

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4348NoUnnecessaryRepositoryAccessTest.java
Patch:
@@ -25,6 +25,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 import java.util.Properties;
 
@@ -63,7 +64,7 @@ public void testit()
 
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
 
-        final List requestedUris = new ArrayList();
+        final List requestedUris = Collections.synchronizedList( new ArrayList() );
 
         Handler repoHandler = new AbstractHandler()
         {

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4500NoUpdateOfTimestampedSnapshotsTest.java
Patch:
@@ -25,6 +25,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 import java.util.Properties;
 
@@ -64,7 +65,7 @@ public void testit()
         String pomUri = "/repo/org/apache/maven/its/mng4500/dep/0.1-SNAPSHOT/dep-0.1-20091219.230823-1.pom";
         String jarUri = "/repo/org/apache/maven/its/mng4500/dep/0.1-SNAPSHOT/dep-0.1-20091219.230823-1.jar";
 
-        final List requestedUris = new ArrayList();
+        final List requestedUris = Collections.synchronizedList( new ArrayList() );
 
         AbstractHandler logHandler = new AbstractHandler()
         {

File: maven-core/src/main/java/org/apache/maven/artifact/resolver/ResolutionNode.java
Patch:
@@ -225,9 +225,8 @@ public boolean filterTrail( ArtifactFilter filter )
         boolean success = true;
         if ( filter != null )
         {
-            for ( Iterator i = getTrail().iterator(); i.hasNext() && success; )
+            for ( Artifact artifact : getTrail() )
             {
-                Artifact artifact = (Artifact) i.next();
                 if ( !filter.include( artifact ) )
                 {
                     success = false;

File: maven-core/src/main/java/org/apache/maven/execution/MavenExecutionResult.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.List;
 
 import org.apache.maven.artifact.resolver.ArtifactResolutionResult;
-import org.apache.maven.exception.ExceptionSummary;
 import org.apache.maven.project.MavenProject;
 
 /**
@@ -52,15 +51,15 @@ public interface MavenExecutionResult
 
     /**
      * Gets the build summary for the specified project.
-     * 
+     *
      * @param project The project to get the build summary for, must not be {@code null}.
      * @return The build summary for the project or {@code null} if the project has not been built (yet).
      */
     BuildSummary getBuildSummary( MavenProject project );
 
     /**
      * Add the specified build summary.
-     * 
+     *
      * @param summary The build summary to add, must not be {@code null}.
      */
     void addBuildSummary( BuildSummary summary );

File: maven-core/src/main/java/org/apache/maven/execution/MavenSession.java
Patch:
@@ -21,10 +21,7 @@
 
 import java.io.File;
 import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
 import java.util.Date;
-import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Properties;

File: maven-compat/src/main/java/org/apache/maven/profiles/DefaultProfileManager.java
Patch:
@@ -20,6 +20,7 @@
  */
 
 import org.apache.maven.model.Activation;
+import org.apache.maven.model.InputLocation;
 import org.apache.maven.model.Profile;
 import org.apache.maven.model.building.ModelProblem;
 import org.apache.maven.model.building.ModelProblemCollector;
@@ -194,7 +195,7 @@ public List getActiveProfiles()
             profileSelector.getActiveProfiles( profilesById.values(), context, new ModelProblemCollector()
             {
 
-                public void add( Severity severity, String message, Exception cause )
+                public void add( Severity severity, String message, InputLocation location, Exception cause )
                 {
                     if ( !ModelProblem.Severity.WARNING.equals( severity ) )
                     {

File: maven-compat/src/main/java/org/apache/maven/project/validation/DefaultModelValidator.java
Patch:
@@ -19,6 +19,7 @@
  * under the License.
  */
 
+import org.apache.maven.model.InputLocation;
 import org.apache.maven.model.Model;
 import org.apache.maven.model.building.DefaultModelBuildingRequest;
 import org.apache.maven.model.building.ModelBuildingRequest;
@@ -66,7 +67,7 @@ public SimpleModelProblemCollector( ModelValidationResult result )
             this.result = result;
         }
 
-        public void add( Severity severity, String message, Exception cause )
+        public void add( Severity severity, String message, InputLocation location, Exception cause )
         {
             if ( !ModelProblem.Severity.WARNING.equals( severity ) )
             {

File: maven-core/src/main/java/org/apache/maven/model/plugin/DefaultLifecycleBindingsInjector.java
Patch:
@@ -64,7 +64,7 @@ public void injectLifecycleBindings( Model model, ModelBuildingRequest request,
 
         if ( defaultPlugins == null )
         {
-            problems.add( Severity.ERROR, "Unknown packaging: " + packaging, null );
+            problems.add( Severity.ERROR, "Unknown packaging: " + packaging, model.getLocation( "packaging" ), null );
         }
         else if ( !defaultPlugins.isEmpty() )
         {

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java
Patch:
@@ -110,6 +110,7 @@ private ProjectBuildingResult build( File pomFile, ModelSource modelSource, Proj
     
                 request.setPomFile( pomFile );
                 request.setModelSource( modelSource );
+                request.setLocationTracking( pomFile != null );
     
                 ModelBuildingResult result;
                 try
@@ -310,6 +311,7 @@ private boolean build( List<ProjectBuildingResult> results, List<InterimResult>
 
             request.setPomFile( pomFile );
             request.setTwoPhaseBuilding( true );
+            request.setLocationTracking( true );
             request.setModelCache( modelCache );
 
             DefaultModelBuildingListener listener =

File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/AbstractStringBasedModelInterpolator.java
Patch:
@@ -242,7 +242,7 @@ protected String interpolateInternal( String src, List<? extends ValueSource> va
                 }
                 catch ( InterpolationException e )
                 {
-                    problems.add( Severity.ERROR, e.getMessage(), e );
+                    problems.add( Severity.ERROR, e.getMessage(), null, e );
                 }
 
                 interpolator.clearFeedback();

File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/ProblemDetectingValueSource.java
Patch:
@@ -62,7 +62,7 @@ public Object getValue( String expression )
             {
                 msg += " Please use ${" + newPrefix + expression.substring( bannedPrefix.length() ) + "} instead.";
             }
-            problems.add( Severity.WARNING, msg, null );
+            problems.add( Severity.WARNING, msg, null, null );
         }
 
         return value;

File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringSearchModelInterpolator.java
Patch:
@@ -283,12 +283,12 @@ else if ( Map.class.isAssignableFrom( type ) )
                             catch ( IllegalArgumentException e )
                             {
                                 problems.add( Severity.ERROR, "Failed to interpolate field3: " + currentField +
-                                    " on class: " + cls.getName(), e );
+                                    " on class: " + cls.getName(), null, e );
                             }
                             catch ( IllegalAccessException e )
                             {
                                 problems.add( Severity.ERROR, "Failed to interpolate field4: " + currentField +
-                                    " on class: " + cls.getName(), e );
+                                    " on class: " + cls.getName(), null, e );
                             }
                             finally
                             {

File: maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java
Patch:
@@ -114,9 +114,7 @@ protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sou
                 for ( PluginExecution element : src )
                 {
                     Object key = getPluginExecutionKey( element );
-                    PluginExecution clone = new PluginExecution();
-                    mergePluginExecution( clone, element, true, context );
-                    merged.put( key, clone );
+                    merged.put( key, element.clone() );
                 }
 
                 for ( PluginExecution element : tgt )

File: maven-model-builder/src/main/java/org/apache/maven/model/plugin/DefaultReportingConverter.java
Patch:
@@ -106,7 +106,8 @@ public void convertReporting( Model model, ModelBuildingRequest request, ModelPr
         {
 
             problems.add( Severity.WARNING, "The <reporting> section is deprecated"
-                + ", please move the reports to the <configuration> section of the new Maven Site Plugin.", null );
+                + ", please move the reports to the <configuration> section of the new Maven Site Plugin.",
+                          reporting.getLocation( "" ), null );
         }
 
         for ( ReportPlugin plugin : reporting.getPlugins() )

File: maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileSelector.java
Patch:
@@ -113,7 +113,8 @@ private boolean isActive( Profile profile, ProfileActivationContext context, Mod
             }
             catch ( RuntimeException e )
             {
-                problems.add( Severity.ERROR, "Failed to determine activation for profile " + profile.getId(), e );
+                problems.add( Severity.ERROR, "Failed to determine activation for profile " + profile.getId(),
+                              profile.getLocation( "" ), e );
                 return false;
             }
         }

File: maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/FileProfileActivator.java
Patch:
@@ -120,7 +120,7 @@ else if ( path.indexOf( "${basedir}" ) >= 0 )
         catch ( Exception e )
         {
             problems.add( Severity.ERROR, "Failed to interpolate file location " + path + " for profile "
-                + profile.getId() + ": " + e.getMessage(), e );
+                + profile.getId() + ": " + e.getMessage(), file.getLocation( missing ? "missing" : "exists" ), e );
             return false;
         }
 

File: maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/JdkVersionProfileActivator.java
Patch:
@@ -57,7 +57,7 @@ public boolean isActive( Profile profile, ProfileActivationContext context, Mode
                 if ( version.length() <= 0 )
                 {
                     problems.add( Severity.ERROR, "Failed to determine Java version for profile " + profile.getId(),
-                                  null );
+                                  activation.getLocation( "jdk" ), null );
                     return false;
                 }
 

File: maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/PropertyProfileActivator.java
Patch:
@@ -62,7 +62,7 @@ public boolean isActive( Profile profile, ProfileActivationContext context, Mode
                 if ( name == null || name.length() <= 0 )
                 {
                     problems.add( Severity.ERROR, "The property name is required to activate the profile "
-                        + profile.getId(), null );
+                        + profile.getId(), property.getLocation( "" ), null );
                     return false;
                 }
 

File: maven-model-builder/src/test/java/org/apache/maven/model/building/SimpleProblemCollector.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import org.apache.maven.model.InputLocation;
 import org.apache.maven.model.building.ModelProblem.Severity;
 
 /**
@@ -54,7 +55,7 @@ public List<String> getFatals()
         return fatals;
     }
 
-    public void add( Severity severity, String message, Exception cause )
+    public void add( Severity severity, String message, InputLocation location, Exception cause )
     {
         switch ( severity )
         {

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1803PomValidationErrorIncludesLineNumberTest.java
Patch:
@@ -37,7 +37,7 @@ public class MavenITmng1803PomValidationErrorIncludesLineNumberTest
 
     public MavenITmng1803PomValidationErrorIncludesLineNumberTest()
     {
-        super( "[3.0-beta-1,)" );
+        super( "[3.0-beta-2,)" );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -459,6 +459,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng1957JdkActivationWithVersionRangeTest.class );
         suite.addTestSuite( MavenITmng1908LegacySnapshotUpdateTest.class );
         suite.addTestSuite( MavenITmng1830ShowVersionTest.class );
+        suite.addTestSuite( MavenITmng1803PomValidationErrorIncludesLineNumberTest.class );
         suite.addTestSuite( MavenITmng1751ForcedMetadataUpdateDuringDeploymentTest.class );
         suite.addTestSuite( MavenITmng1703PluginMgmtDepInheritanceTest.class );
         suite.addTestSuite( MavenITmng1701DuplicatePluginTest.class );

File: maven-compat/src/test/java/org/apache/maven/project/inheritance/t03/ProjectInheritanceTest.java
Patch:
@@ -64,6 +64,6 @@ public void testProjectInheritance()
         MavenProject project0 = getProject( pom0 );
         MavenProject project1 = getProject( pom1 );
 
-        assertEquals( pom0Basedir, project1.getParent().getBasedir().getCanonicalFile() );
+        assertEquals( pom0Basedir, project1.getParent().getBasedir() );
     }
 }

File: maven-compat/src/test/java/org/apache/maven/project/inheritance/t04/ProjectInheritanceTest.java
Patch:
@@ -65,7 +65,7 @@ public void testDependencyManagementOverridesTransitiveDependencyVersion()
         MavenProject project0 = getProjectWithDependencies( pom0 );
         MavenProject project1 = getProjectWithDependencies( pom1 );
 
-        assertEquals( pom0Basedir, project1.getParent().getBasedir().getCanonicalFile() );
+        assertEquals( pom0Basedir, project1.getParent().getBasedir() );
         Set set = project1.getArtifacts();
         assertNotNull( "No artifacts", set );
         assertTrue( "No Artifacts", set.size() > 0 );

File: maven-compat/src/test/java/org/apache/maven/project/inheritance/t05/ProjectInheritanceTest.java
Patch:
@@ -61,7 +61,7 @@ public void testDependencyManagement()
         MavenProject project0 = getProjectWithDependencies( pom0 );
         MavenProject project1 = getProjectWithDependencies( pom1 );
 
-        assertEquals( pom0Basedir, project1.getParent().getBasedir().getCanonicalFile() );
+        assertEquals( pom0Basedir, project1.getParent().getBasedir() );
         Set set = project1.getArtifacts();
         assertNotNull( "No artifacts", set );
         assertTrue( "No Artifacts", set.size() > 0 );

File: maven-compat/src/test/java/org/apache/maven/project/inheritance/t06/ProjectInheritanceTest.java
Patch:
@@ -61,7 +61,7 @@ public void testDependencyManagement()
         MavenProject project0 = getProjectWithDependencies( pom0 );
         MavenProject project1 = getProjectWithDependencies( pom1 );
 
-        assertEquals( pom0Basedir, project1.getParent().getBasedir().getCanonicalFile() );
+        assertEquals( pom0Basedir, project1.getParent().getBasedir() );
         Set set = project1.getArtifacts();
         assertNotNull( "No artifacts", set );
         assertTrue( "No Artifacts", set.size() > 0 );

File: maven-compat/src/test/java/org/apache/maven/project/inheritance/t07/ProjectInheritanceTest.java
Patch:
@@ -60,7 +60,7 @@ public void testDependencyManagement()
         // load everything...
         MavenProject project1 = getProjectWithDependencies( pom1 );
 
-        assertEquals( pom0Basedir, project1.getParent().getBasedir().getCanonicalFile() );
+        assertEquals( pom0Basedir, project1.getParent().getBasedir() );
         System.out.println("Project " + project1.getId() + " " + project1);
         Set set = project1.getArtifacts();
         assertNotNull("No artifacts", set);

File: maven-compat/src/test/java/org/apache/maven/project/inheritance/t08/ProjectInheritanceTest.java
Patch:
@@ -61,7 +61,7 @@ public void testDependencyManagement()
         MavenProject project0 = getProjectWithDependencies( pom0 );
         MavenProject project1 = getProjectWithDependencies( pom1 );
 
-        assertEquals( pom0Basedir, project1.getParent().getBasedir().getCanonicalFile() );
+        assertEquals( pom0Basedir, project1.getParent().getBasedir() );
         System.out.println( "Project " + project1.getId() + " " + project1 );
         Set set = project1.getArtifacts();
         assertNotNull( "No artifacts", set );

File: maven-compat/src/test/java/org/apache/maven/project/inheritance/t09/ProjectInheritanceTest.java
Patch:
@@ -71,7 +71,7 @@ public void testDependencyManagementExclusionsExcludeTransitively()
         MavenProject project1 = getProjectWithDependencies( pom1 );
 
         assertNotNull("Parent is null", project1.getParent());
-        assertEquals( pom0Basedir, project1.getParent().getBasedir().getCanonicalFile() );
+        assertEquals( pom0Basedir, project1.getParent().getBasedir() );
         Map map = project1.getArtifactMap();
 
         assertNotNull("No artifacts", map);
@@ -106,7 +106,7 @@ public void testDependencyManagementExclusionDoesNotOverrideGloballyForTransitiv
         MavenProject project0 = getProjectWithDependencies( pom0 );
         MavenProject project2 = getProjectWithDependencies( pom2 );
 
-        assertEquals( pom0Basedir, project2.getParent().getBasedir().getCanonicalFile() );
+        assertEquals( pom0Basedir, project2.getParent().getBasedir() );
         Map map = project2.getArtifactMap();
         assertNotNull( "No artifacts", map );
         assertTrue( "No Artifacts", map.size() > 0 );

File: maven-compat/src/test/java/org/apache/maven/project/inheritance/t10/ProjectInheritanceTest.java
Patch:
@@ -66,7 +66,7 @@ public void testDependencyManagementOverridesTransitiveDependencyVersion()
         MavenProject project0 = getProjectWithDependencies( pom0 );
         MavenProject project1 = getProjectWithDependencies( pom1 );
 
-        assertEquals( pom0Basedir, project1.getParent().getBasedir().getCanonicalFile() );
+        assertEquals( pom0Basedir, project1.getParent().getBasedir() );
         System.out.println("Project " + project1.getId() + " " + project1);
         Map map = project1.getArtifactMap();
         assertNotNull("No artifacts", map);

File: maven-compat/src/test/java/org/apache/maven/project/inheritance/t11/ProjectInheritanceTest.java
Patch:
@@ -58,7 +58,7 @@ public void testDependencyManagementDoesNotOverrideScopeOfCurrentArtifact()
         MavenProject project0 = getProjectWithDependencies( pom0 );
         MavenProject project1 = getProjectWithDependencies( pom1 );
 
-        assertEquals( pom0Basedir, project1.getParent().getBasedir().getCanonicalFile() );
+        assertEquals( pom0Basedir, project1.getParent().getBasedir() );
         assertNull( "dependencyManagement has overwritten the scope of the currently building child project",
                     project1.getArtifact().getScope() );
     }

File: maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java
Patch:
@@ -345,7 +345,7 @@ protected void mergeDistributionManagement_Repository( DistributionManagement ta
         if ( src != null )
         {
             DeploymentRepository tgt = target.getRepository();
-            if ( tgt == null )
+            if ( sourceDominant || tgt == null )
             {
                 tgt = new DeploymentRepository();
                 target.setRepository( tgt );
@@ -363,7 +363,7 @@ protected void mergeDistributionManagement_SnapshotRepository( DistributionManag
         if ( src != null )
         {
             DeploymentRepository tgt = target.getSnapshotRepository();
-            if ( tgt == null )
+            if ( sourceDominant || tgt == null )
             {
                 tgt = new DeploymentRepository();
                 target.setSnapshotRepository( tgt );
@@ -380,7 +380,7 @@ protected void mergeDistributionManagement_Site( DistributionManagement target,
         if ( src != null )
         {
             Site tgt = target.getSite();
-            if ( tgt == null )
+            if ( sourceDominant || tgt == null )
             {
                 tgt = new Site();
                 target.setSite( tgt );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -82,6 +82,7 @@ public static Test suite()
         // suite.addTestSuite( MavenIT0109ReleaseUpdateTest.class );
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng4684DistMngtOverridenByProfileTest.class );
         suite.addTestSuite( MavenITmng4679SnapshotUpdateInPluginTest.class );
         suite.addTestSuite( MavenITmng4677DisabledPluginConfigInheritanceTest.class );
         suite.addTestSuite( MavenITmng4666CoreRealmImportTest.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -82,6 +82,7 @@ public static Test suite()
         // suite.addTestSuite( MavenIT0109ReleaseUpdateTest.class );
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng4677DisabledPluginConfigInheritanceTest.class );
         suite.addTestSuite( MavenITmng4666CoreRealmImportTest.class );
         suite.addTestSuite( MavenITmng4654ArtifactHandlerForMainArtifactTest.class );
         suite.addTestSuite( MavenITmng4644StrictPomParsingRejectsMisplacedTextTest.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -82,6 +82,7 @@ public static Test suite()
         // suite.addTestSuite( MavenIT0109ReleaseUpdateTest.class );
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng4666CoreRealmImportTest.class );
         suite.addTestSuite( MavenITmng4654ArtifactHandlerForMainArtifactTest.class );
         suite.addTestSuite( MavenITmng4644StrictPomParsingRejectsMisplacedTextTest.class );
         suite.addTestSuite( MavenITmng4629NoPomValidationErrorUponMissingSystemDepTest.class );

File: maven-core/src/main/java/org/apache/maven/DefaultArtifactFilterManager.java
Patch:
@@ -56,6 +56,7 @@ public class DefaultArtifactFilterManager
         artifacts.add( "org.codehaus.plexus:plexus-classworlds" );
         artifacts.add( "org.codehaus.plexus:plexus-component-api" );
         artifacts.add( "org.codehaus.plexus:plexus-container-default" );
+        artifacts.add( "plexus:plexus-container-default" );
         artifacts.add( "org.apache.maven:maven-artifact" );
         artifacts.add( "org.apache.maven:maven-artifact-manager" );
         artifacts.add( "org.apache.maven:maven-compat" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2690MojoLoadingErrorsTest.java
Patch:
@@ -104,7 +104,7 @@ public void testNoClassDefFromMojoConfiguration()
 
         List lines = verifier.loadFile( new File( testDir, "log.txt" ), false );
 
-        int msg = indexOf( lines, "(?i).*required class was missing during (mojo )?configuration.*" );
+        int msg = indexOf( lines, "(?i).*required class (i|wa)s missing( during (mojo )?configuration)?.*" );
         assertTrue( "User-friendly message was not found in output.", msg >= 0 );
 
         int cls = lines.get( msg ).toString().replace( '/', '.' ).indexOf( TestCase.class.getName() );

File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultSchedules.java
Patch:
@@ -65,7 +65,7 @@ public List<ExecutionPlanItem> createExecutionPlanItem( MavenProject mavenProjec
             Schedule schedule = null;
             if ( scheduling != null )
             {
-                schedule = scheduling.getSchedule( mojoExecution.getPlugin() );
+                schedule = scheduling.getSchedule( mojoExecution );
                 if ( schedule == null )
                 {
                     schedule = scheduling.getSchedule( lifeCyclePhase );

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleStarter.java
Patch:
@@ -126,9 +126,7 @@ public void execute( MavenSession session )
                     if ( isWeaveMode )
                     {
                         lifecycleDebugLogger.logWeavePlan( session );
-                        CompletionService<ProjectSegment> service =
-                            new ExecutorCompletionService<ProjectSegment>( executor );
-                        lifeCycleWeaveBuilder.build( projectBuilds, callableContext, taskSegments, session, service,
+                        lifeCycleWeaveBuilder.build( projectBuilds, callableContext, taskSegments, session, executor,
                                                      reactorBuildStatus );
                     }
                     else

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0956ComponentInjectionViaProjectLevelPluginDepTest.java
Patch:
@@ -49,7 +49,7 @@ public void testitMNG0956()
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
-        verifier.deleteArtifacts( "org.apache.maven.its.it0081" );
+        verifier.deleteArtifacts( "org.apache.maven.its.mng0956" );
         verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
         verifier.getCliOptions().add( "--settings" );
         verifier.getCliOptions().add( "settings.xml" );
@@ -58,7 +58,7 @@ public void testitMNG0956()
         verifier.resetStreams();
 
         Properties apiProps = verifier.loadProperties( "target/component.properties" );
-        assertEquals( "true", apiProps.getProperty( "org.apache.maven.its.it0081.DefaultComponent" ) );
+        assertEquals( "true", apiProps.getProperty( "org.apache.maven.plugin.coreit.DefaultComponent" ) );
     }
 
 }

File: maven-core/src/main/java/org/apache/maven/plugin/version/PluginVersionResolutionException.java
Patch:
@@ -87,10 +87,10 @@ private static String format( ArtifactRepository localRepository, List<ArtifactR
 
         if ( remoteRepositories != null && !remoteRepositories.isEmpty() )
         {
-            repos += ", ";
-
             for ( ArtifactRepository repository : remoteRepositories )
             {
+                repos += ", ";
+
                 if ( repository != null )
                 {
                     repos += repository.getId() + " (" + repository.getUrl() + ")";

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -82,6 +82,7 @@ public static Test suite()
         // suite.addTestSuite( MavenIT0109ReleaseUpdateTest.class );
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng4654ArtifactHandlerForMainArtifactTest.class );
         suite.addTestSuite( MavenITmng4644StrictPomParsingRejectsMisplacedTextTest.class );
         suite.addTestSuite( MavenITmng4629NoPomValidationErrorUponMissingSystemDepTest.class );
         suite.addTestSuite( MavenITmng4625SettingsXmlInterpolationWithXmlMarkupTest.class );

File: maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java
Patch:
@@ -475,7 +475,7 @@ else if ( cause instanceof LinkageError )
         }
     }
 
-    private synchronized void populatePluginFields( Object mojo, MojoDescriptor mojoDescriptor, ClassRealm pluginRealm,
+    private void populatePluginFields( Object mojo, MojoDescriptor mojoDescriptor, ClassRealm pluginRealm,
                                        PlexusConfiguration configuration, ExpressionEvaluator expressionEvaluator )
         throws PluginConfigurationException
     {

File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/LifecycleTaskSegmentCalculatorImplTest.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.List;
 
 /**
- * @author <a href="mailto:kristian@zenior.no">Kristian Rosenvold</a>
+ * @author Kristian Rosenvold
  */
 public class LifecycleTaskSegmentCalculatorImplTest
     extends TestCase

File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifecycleExecutionPlanCalculatorStub.java
Patch:
@@ -44,7 +44,7 @@
 import java.util.Set;
 
 /**
- * @author <a href="mailto:kristian@zenior.no">Kristian Rosenvold</a>
+ * @author Kristian Rosenvold
  */
 public class LifecycleExecutionPlanCalculatorStub
     implements LifecycleExecutionPlanCalculator

File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/AbstractStringBasedModelInterpolator.java
Patch:
@@ -42,7 +42,6 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
-import java.util.Collections;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Properties;
@@ -52,7 +51,6 @@
  *
  * @author jdcasey Created on Feb 3, 2005
  * @version $Id$
- * @todo Consolidate this logic with the PluginParameterExpressionEvaluator, minus deprecations/bans.
  */
 public abstract class AbstractStringBasedModelInterpolator
     implements ModelInterpolator

File: maven-core/src/test/java/org/apache/maven/lifecycle/LifecycleExecutorTest.java
Patch:
@@ -305,9 +305,6 @@ public void testPluginConfigurationCreation()
         System.out.println( dom );
     }
 
-    // Todo: This method is kind of an oddity. It is only called from the LifecycleExecutorTest, hence it should
-    // really not exist, or at least be moved into the test class.
-
     MavenExecutionPlan calculateExecutionPlan( MavenSession session, String... tasks )
         throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException,
         MojoNotFoundException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException,

File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifecycleTaskSegmentCalculatorStub.java
Patch:
@@ -18,7 +18,7 @@
 import org.apache.maven.execution.MavenSession;
 import org.apache.maven.lifecycle.internal.GoalTask;
 import org.apache.maven.lifecycle.internal.LifecycleTask;
-import org.apache.maven.lifecycle.internal.LifecycleTaskSegmentCalculator;
+import org.apache.maven.lifecycle.internal.LifecycleTaskSegmentCalculatorImpl;
 import org.apache.maven.lifecycle.internal.TaskSegment;
 import org.apache.maven.plugin.InvalidPluginDescriptorException;
 import org.apache.maven.plugin.MojoNotFoundException;
@@ -36,14 +36,15 @@
  */
 
 public class LifecycleTaskSegmentCalculatorStub
-    implements LifecycleTaskSegmentCalculator
+    extends LifecycleTaskSegmentCalculatorImpl
 {
     public static final String clean = "clean";
 
     public static final String aggr = "aggr";
 
     public static final String install = "install";
 
+
     public List<TaskSegment> calculateTaskSegments( MavenSession session, List<String> tasks )
         throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException,
         MojoNotFoundException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException,

File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifecycleExecutionPlanCalculatorStub.java
Patch:
@@ -157,9 +157,9 @@ private static MavenExecutionPlan createExecutionPlan( MavenProject project, Lis
         LifecyclePhaseNotFoundException, LifecycleNotFoundException
     {
         final List<ExecutionPlanItem> planItemList =
-            DefaultLifecyclesStub.createDefaultLifeCycles().createExecutionPlanItem( project, mojoExecutions );
+            DefaultSchedulesStub.createDefaultSchedules().createExecutionPlanItem( project, mojoExecutions );
         return new MavenExecutionPlan( getScopes(), getScopes(), planItemList,
-                                       DefaultLifecyclesStub.createDefaultLifeCycles() );
+                                       DefaultLifecyclesStub.createDefaultLifecycles() );
     }
 
     private static MojoExecution createMojoExecution( Plugin plugin, String goal, String executionId,

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingResult.java
Patch:
@@ -56,7 +56,9 @@ class DefaultProjectBuildingResult
     public DefaultProjectBuildingResult( MavenProject project, List<ModelProblem> problems,
                                          ArtifactResolutionResult dependencyResolutionResult )
     {
-        this.projectId = ( project != null ) ? project.getId() : "";
+        this.projectId =
+            ( project != null ) ? project.getGroupId() + ':' + project.getArtifactId() + ':' + project.getVersion()
+                            : "";
         this.pomFile = ( project != null ) ? project.getFile() : null;
         this.project = project;
         this.problems = problems;

File: maven-compat/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java
Patch:
@@ -52,7 +52,7 @@ public MavenExecutionPlan calculateExecutionPlan( MavenSession session, String..
         throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException,
         MojoNotFoundException
     {
-        return new MavenExecutionPlan(null, null, null );
+        return new MavenExecutionPlan(null, null, null, new DefaultLifecycles() );
     }
 
     public void execute( MavenSession session )

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleExecutionPlanCalculatorImpl.java
Patch:
@@ -92,7 +92,7 @@ public MavenExecutionPlan calculateExecutionPlan( MavenSession session, MavenPro
         final List<ExecutionPlanItem> planItem = defaultLifeCycles.createExecutionPlanItem( project, executions );
 
         return new MavenExecutionPlan( requiredDependencyResolutionScopes, requiredDependencyCollectionScopes,
-                                       planItem );
+                                       planItem, defaultLifeCycles );
 
 
     }

File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/LifecycleWeaveBuilderTest.java
Patch:
@@ -122,8 +122,7 @@ private LifecycleWeaveBuilder getWeaveBuilder( MojoExecutor mojoExecutor )
         final LoggerStub loggerStub = new LoggerStub();
         final LifecycleDependencyResolver lifecycleDependencyResolver =
             new LifecycleDependencyResolver( new ProjectDependenciesResolverStub(), loggerStub );
-        return new LifecycleWeaveBuilder( mojoExecutor, builderCommon, loggerStub, lifecycleDependencyResolver,
-                                          new ExecutionEventCatapultStub() );
+        return new LifecycleWeaveBuilder( mojoExecutor, builderCommon, loggerStub, new ExecutionEventCatapultStub() );
     }
 
     private BuilderCommon getBuilderCommon()

File: maven-core/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java
Patch:
@@ -55,7 +55,7 @@ public MavenExecutionPlan calculateExecutionPlan( MavenSession session, String..
         throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException,
         MojoNotFoundException
     {
-        return new MavenExecutionPlan(null, null, null );
+        return new MavenExecutionPlan(null, null, null, null );
     }
 
     public void execute( MavenSession session )

File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/PhaseRecorder.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * @author Benjamin Bentmann
- * @author Kristian Rosenvold (extrace class)
+ * @author Kristian Rosenvold (extract class)
  *         <p/>
  *         NOTE: This class is not part of any public api and can be changed or deleted without prior notice.
  */

File: maven-core/src/main/java/org/apache/maven/execution/MavenExecutionRequest.java
Patch:
@@ -158,9 +158,6 @@ public interface MavenExecutionRequest
     void setPerCoreThreadCount(boolean perCoreThreadCount);
     boolean isPerCoreThreadCount();
 
-    boolean isWeaveMode();
-
-
     // Recursive (really to just process the top-level POM)
     MavenExecutionRequest setRecursive( boolean recursive );
     boolean isRecursive();

File: maven-core/src/main/java/org/apache/maven/exception/DefaultExceptionHandler.java
Patch:
@@ -201,7 +201,7 @@ else if ( exception instanceof PluginExecutionException )
                     reference = exception.getClass().getSimpleName();
                 }
             }
-            else if ( exception instanceof LifecycleExecutionException )
+            else if ( exception instanceof LifecycleExecutionException)
             {
                 reference = getReference( exception.getCause() );
             }

File: maven-core/src/main/java/org/apache/maven/lifecycle/LifecycleEventCatapult.java
Patch:
@@ -28,7 +28,7 @@
  * 
  * @author Benjamin Bentmann
  */
-interface LifecycleEventCatapult
+public interface LifecycleEventCatapult
 {
 
     /**

File: maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java
Patch:
@@ -475,7 +475,7 @@ else if ( cause instanceof LinkageError )
         }
     }
 
-    private void populatePluginFields( Object mojo, MojoDescriptor mojoDescriptor, ClassRealm pluginRealm,
+    private synchronized void populatePluginFields( Object mojo, MojoDescriptor mojoDescriptor, ClassRealm pluginRealm,
                                        PlexusConfiguration configuration, ExpressionEvaluator expressionEvaluator )
         throws PluginConfigurationException
     {

File: maven-core/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java
Patch:
@@ -55,7 +55,7 @@ public MavenExecutionPlan calculateExecutionPlan( MavenSession session, String..
         throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException,
         MojoNotFoundException
     {
-        return new MavenExecutionPlan( Collections.<MojoExecution> emptyList(), null, null );
+        return new MavenExecutionPlan(null, null, null );
     }
 
     public void execute( MavenSession session )

File: maven-embedder/src/main/java/org/apache/maven/cli/ExecutionEventLogger.java
Patch:
@@ -202,7 +202,9 @@ private void logStats( MavenSession session )
 
         long time = finish.getTime() - session.getRequest().getStartTime().getTime();
 
-        logger.info( "Total time: " + getFormattedTime( time ) );
+        String wallClock = session.getRequest().isThreadConfigurationPresent() ? " (Wall Clock)" : "";
+
+        logger.info( "Total time: " + getFormattedTime( time ) + wallClock);
 
         logger.info( "Finished at: " + finish );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -233,6 +233,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng4034ManagedProfileDependencyTest.class );
         suite.addTestSuite( MavenITmng4026ReactorDependenciesOrderTest.class );
         suite.addTestSuite( MavenITmng4023ParentProfileOneTimeInjectionTest.class );
+        suite.addTestSuite( MavenITmng4022IdempotentPluginConfigMergingTest.class );
         suite.addTestSuite( MavenITmng4016PrefixedPropertyInterpolationTest.class );
         suite.addTestSuite( MavenITmng4009InheritProfileEffectsTest.class );
         suite.addTestSuite( MavenITmng4008MergedFilterOrderTest.class );

File: maven-core/src/test/java/org/apache/maven/project/PomConstructionTest.java
Patch:
@@ -600,7 +600,7 @@ public void testAppendArtifactIdOfChildToInheritedUrls()
     {
         PomTestWrapper pom = buildPom( "url-inheritance/sub" );
         assertEquals( "http://parent.url/child", pom.getValue( "url" ) );
-        assertEquals( "http://parent.url/org/", pom.getValue( "organization/url" ) );
+        assertEquals( "http://parent.url/org", pom.getValue( "organization/url" ) );
         assertEquals( "http://parent.url/license.txt", pom.getValue( "licenses[1]/url" ) );
         assertEquals( "http://parent.url/viewvc/child", pom.getValue( "scm/url" ) );
         assertEquals( "http://parent.url/scm/child", pom.getValue( "scm/connection" ) );
@@ -619,7 +619,7 @@ public void testAppendArtifactIdOfParentAndChildToInheritedUrls()
     {
         PomTestWrapper pom = buildPom( "url-inheritance/another-parent/sub" );
         assertEquals( "http://parent.url/ap/child", pom.getValue( "url" ) );
-        assertEquals( "http://parent.url/org/", pom.getValue( "organization/url" ) );
+        assertEquals( "http://parent.url/org", pom.getValue( "organization/url" ) );
         assertEquals( "http://parent.url/license.txt", pom.getValue( "licenses[1]/url" ) );
         assertEquals( "http://parent.url/viewvc/ap/child", pom.getValue( "scm/url" ) );
         assertEquals( "http://parent.url/scm/ap/child", pom.getValue( "scm/connection" ) );

File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/PathTranslatingPostProcessor.java
Patch:
@@ -60,7 +60,7 @@ public Object execute( String expression, Object value )
             }
         }
 
-        return value;
+        return null;
     }
 
 }

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -372,6 +372,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng3203DefaultLifecycleExecIdTest.class );
         suite.addTestSuite( MavenITmng3183LoggingToFileTest.class );
         suite.addTestSuite( MavenITmng3139UseCachedMetadataOfBlacklistedRepoTest.class );
+        suite.addTestSuite( MavenITmng3133UrlNormalizationNotBeforeInterpolationTest.class );
         suite.addTestSuite( MavenITmng3122ActiveProfilesNoDuplicatesTest.class );
         suite.addTestSuite( MavenITmng3118TestClassPathOrderTest.class );
         suite.addTestSuite( MavenITmng3106ProfileMultipleActivatorsTest.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -91,6 +91,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng4580ProjectLevelPluginDepUsedForCliInvocInReactorTest.class );
         suite.addTestSuite( MavenITmng4572ModelVersionSurroundedByWhitespaceTest.class );
         suite.addTestSuite( MavenITmng4561MirroringOfPluginRepoTest.class );
+        suite.addTestSuite( MavenITmng4555MetaversionResolutionOfflineTest.class );
         suite.addTestSuite( MavenITmng4554PluginPrefixMappingUpdateTest.class );
         suite.addTestSuite( MavenITmng4553CoreArtifactFilterConsidersGroupIdTest.class );
         suite.addTestSuite( MavenITmng4544ActiveComponentCollectionThreadSafeTest.class );

File: maven-core/src/main/java/org/apache/maven/project/MavenProject.java
Patch:
@@ -1062,7 +1062,7 @@ public Set<Artifact> getArtifacts()
     {
         if ( artifacts == null )
         {
-            if ( artifactFilter == null )
+            if ( artifactFilter == null || resolvedArtifacts == null )
             {
                 artifacts = new LinkedHashSet<Artifact>();
             }

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -392,6 +392,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng2790LastUpdatedMetadataTest.class );
         suite.addTestSuite( MavenITmng2749ExtensionAvailableToPluginTest.class );
         suite.addTestSuite( MavenITmng2744checksumVerificationTest.class );
+        suite.addTestSuite( MavenITmng2741PluginMetadataResolutionErrorMessageTest.class );
         suite.addTestSuite( MavenITmng2739RequiredRepositoryElementsTest.class );
         suite.addTestSuite( MavenITmng2720SiblingClasspathArtifactsTest.class );
         suite.addTestSuite( MavenITmng2695OfflinePluginSnapshotsTest.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -367,6 +367,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng3203DefaultLifecycleExecIdTest.class );
         suite.addTestSuite( MavenITmng3183LoggingToFileTest.class );
         suite.addTestSuite( MavenITmng3139UseCachedMetadataOfBlacklistedRepoTest.class );
+        suite.addTestSuite( MavenITmng3122ActiveProfilesNoDuplicatesTest.class );
         suite.addTestSuite( MavenITmng3118TestClassPathOrderTest.class );
         suite.addTestSuite( MavenITmng3106ProfileMultipleActivatorsTest.class );
         suite.addTestSuite( MavenITmng3099SettingsProfilesWithNoPomTest.class );

File: maven-core/src/test/java/org/apache/maven/project/PomConstructionTest.java
Patch:
@@ -173,7 +173,7 @@ public void testMultipleFilters()
 
     }
 
-    /** MNG-4005 */
+    /** MNG-4005: postponed to 3.1
     public void testValidationErrorUponNonUniqueDependencyKey()
         throws Exception
     {
@@ -229,6 +229,7 @@ public void testValidationErrorUponNonUniqueDependencyManagementKeyInProfile()
             // expected
         }
     }
+    */
 
     public void testDuplicateDependenciesCauseLastDeclarationToBePickedInLenientMode()
         throws Exception

File: maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java
Patch:
@@ -299,6 +299,7 @@ private void validateRawDependencies( ModelProblemCollector problems, List<Depen
                                        ModelBuildingRequest request )
     {
         Severity errOn30 = getSeverity( request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0 );
+        Severity errOn31 = getSeverity( request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1 );
 
         Map<String, Dependency> index = new HashMap<String, Dependency>();
 
@@ -340,7 +341,7 @@ else if ( "system".equals( dependency.getScope() ) )
                             + StringUtils.defaultString( dependency.getVersion(), "(?)" );
                 }
 
-                addViolation( problems, errOn30, prefix + ".(groupId:artifactId:type:classifier)", null,
+                addViolation( problems, errOn31, prefix + ".(groupId:artifactId:type:classifier)", null,
                               "must be unique: " + key + " -> " + msg );
             }
             else

File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -958,7 +958,7 @@ static class CliRequest
         String workingDirectory;
         boolean debug;
         boolean quiet;
-        boolean showErrors; 
+        boolean showErrors = true; 
         PrintStream fileStream;
         Properties userProperties = new Properties();
         Properties systemProperties = new Properties();

File: maven-core/src/main/java/org/apache/maven/project/artifact/ProjectArtifact.java
Patch:
@@ -63,7 +63,7 @@ static class PomArtifactHandler
     {
         public String getClassifier()
         {
-            return "pom";
+            return null;
         }
 
         public String getDirectory()

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4428FollowHttpRedirectTest.java
Patch:
@@ -100,7 +100,7 @@ public void testitHttpsToHttp()
     public void testitRelativeLocation()
         throws Exception
     {
-        testit( true, true );
+        testit( true, true, true );
     }
 
     private void testit( boolean fromHttp, boolean toHttp )

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4428FollowHttpRedirectTest.java
Patch:
@@ -77,7 +77,7 @@ public void testitHttpsToHttps()
     public void testitHttpToHttps()
         throws Exception
     {
-        requiresMavenVersion( "2.2.0" );
+        requiresMavenVersion( "[2.2.0]" );
 
         testit( true, false );
     }
@@ -88,7 +88,7 @@ public void testitHttpToHttps()
     public void testitHttpsToHttp()
         throws Exception
     {
-        requiresMavenVersion( "2.2.0" );
+        requiresMavenVersion( "[2.2.0]" );
 
         testit( false, true );
     }

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -111,11 +111,11 @@ public static Test suite()
         suite.addTestSuite( MavenITmng4459InMemorySettingsKeptEncryptedTest.class );
         suite.addTestSuite( MavenITmng4453PluginVersionFromLifecycleMappingTest.class );
         suite.addTestSuite( MavenITmng4450StubModelForMissingDependencyPomTest.class );
-        suite.addTestSuite( MavenITmng4448FollowHttpRedirectTest.class );
         suite.addTestSuite( MavenITmng4436SingletonComponentLookupTest.class );
         suite.addTestSuite( MavenITmng4433ForceParentSnapshotUpdateTest.class );
         suite.addTestSuite( MavenITmng4430DistributionManagementStatusTest.class );
         suite.addTestSuite( MavenITmng4429CompRequirementOnNonDefaultImplTest.class );
+        suite.addTestSuite( MavenITmng4428FollowHttpRedirectTest.class );
         suite.addTestSuite( MavenITmng4423SessionDataFromPluginParameterExpressionTest.class );
         suite.addTestSuite( MavenITmng4422PluginExecutionPhaseInterpolationTest.class );
         suite.addTestSuite( MavenITmng4421DeprecatedPomInterpolationExpressionsTest.class );

File: maven-core/src/main/java/org/apache/maven/plugin/prefix/internal/DefaultPluginPrefixResolver.java
Patch:
@@ -135,11 +135,12 @@ private PluginPrefixResult resolveFromProject( PluginPrefixRequest request, List
             {
                 if ( logger.isDebugEnabled() )
                 {
-                    logger.warn( "Failed to retrieve plugin descriptor for " + plugin + ": " + e.getMessage(), e );
+                    logger.warn( "Failed to retrieve plugin descriptor for " + plugin.getId() + ": " + e.getMessage(),
+                                 e );
                 }
                 else
                 {
-                    logger.warn( "Failed to retrieve plugin descriptor for " + plugin + ": " + e.getMessage() );
+                    logger.warn( "Failed to retrieve plugin descriptor for " + plugin.getId() + ": " + e.getMessage() );
                 }
             }
         }

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -85,6 +85,7 @@ public static Test suite()
         // suite.addTestSuite( MavenIT0109ReleaseUpdateTest.class );
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng4586PluginPrefixResolutionFromVersionlessPluginMngtTest.class );
         suite.addTestSuite( MavenITmng4580ProjectLevelPluginDepUsedForCliInvocInReactorTest.class );
         suite.addTestSuite( MavenITmng4572ModelVersionSurroundedByWhitespaceTest.class );
         suite.addTestSuite( MavenITmng4561MirroringOfPluginRepoTest.class );

File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java
Patch:
@@ -42,7 +42,6 @@
 import org.apache.maven.artifact.resolver.MultipleArtifactsNotFoundException;
 import org.apache.maven.artifact.resolver.filter.ArtifactFilter;
 import org.apache.maven.artifact.resolver.filter.CumulativeScopeArtifactFilter;
-import org.apache.maven.artifact.resolver.filter.ScopeArtifactFilter;
 import org.apache.maven.execution.BuildFailure;
 import org.apache.maven.execution.BuildSuccess;
 import org.apache.maven.execution.DefaultLifecycleEvent;
@@ -745,7 +744,7 @@ private List<ProjectBuild> calculateProjectBuilds( MavenSession session )
         {
             if ( !StringUtils.isEmpty( rootProject.getDefaultGoal() ) )
             {
-                tasks = Collections.singletonList( rootProject.getDefaultGoal() );
+                tasks = Arrays.asList( StringUtils.split( rootProject.getDefaultGoal() ) );
             }
         }
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -434,6 +434,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng1349ChecksumFormatsTest.class );
         suite.addTestSuite( MavenITmng1323AntrunDependenciesTest.class );
         suite.addTestSuite( MavenITmng1233WarDepWithProvidedScopeTest.class );
+        suite.addTestSuite( MavenITmng1144MultipleDefaultGoalsTest.class );
         suite.addTestSuite( MavenITmng1088ReactorPluginResolutionTest.class );
         suite.addTestSuite( MavenITmng1073AggregatorForksReactorTest.class );
         suite.addTestSuite( MavenITmng1052PluginMngtConfigTest.class );

File: maven-core/src/main/java/org/apache/maven/settings/crypto/SettingsDecryptionResult.java
Patch:
@@ -34,7 +34,7 @@ public interface SettingsDecryptionResult
 {
 
     /**
-     * Gets the decrypted server. This is a convenience method to retrieve the first element from {@link #getServer()}.
+     * Gets the decrypted server. This is a convenience method to retrieve the first element from {@link #getServers()}.
      * 
      * @return The decrypted server or {@code null}.
      */
@@ -48,7 +48,7 @@ public interface SettingsDecryptionResult
     List<Server> getServers();
 
     /**
-     * Gets the decrypted proxy. This is a convenience method to retrieve the first element from {@link #getProxy()}.
+     * Gets the decrypted proxy. This is a convenience method to retrieve the first element from {@link #getProxies()}.
      * 
      * @return The decrypted proxy or {@code null}.
      */

File: maven-core/src/main/java/org/apache/maven/project/MavenProject.java
Patch:
@@ -824,7 +824,7 @@ public String getName()
         }
         else
         {
-            return "Unnamed - " + getId();
+            return getArtifactId();
         }
     }
 

File: maven-artifact/src/main/java/org/apache/maven/artifact/DefaultArtifact.java
Patch:
@@ -55,7 +55,7 @@ public class DefaultArtifact
 
     private String scope;
 
-    private File file;
+    private volatile File file;
 
     private ArtifactRepository repository;
 
@@ -71,7 +71,7 @@ public class DefaultArtifact
 
     private VersionRange versionRange;
 
-    private boolean resolved;
+    private volatile boolean resolved;
 
     private boolean release;
 

File: maven-core/src/main/java/org/apache/maven/DefaultArtifactFilterManager.java
Patch:
@@ -20,6 +20,7 @@
  */
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.HashSet;
 import java.util.LinkedHashSet;
 import java.util.List;
@@ -50,7 +51,7 @@ public class DefaultArtifactFilterManager
 
     static
     {
-        List<String> artifacts = new ArrayList<String>();
+        Set<String> artifacts = new HashSet<String>();
 
         artifacts.add( "classworlds" );
         artifacts.add( "plexus-classworlds" );
@@ -87,7 +88,7 @@ public class DefaultArtifactFilterManager
          * wagon from their plugin realm.
          */
 
-        DEFAULT_EXCLUSIONS = new CopyOnWriteArraySet<String>( artifacts);
+        DEFAULT_EXCLUSIONS = Collections.unmodifiableSet( artifacts);
     }
 
     protected Set<String> excludedArtifacts = new HashSet<String>( DEFAULT_EXCLUSIONS );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4482ForcePluginSnapshotUpdateTest.java
Patch:
@@ -70,6 +70,7 @@ public void testit()
         verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", filterProps );
         verifier.setLogFileName( "log-force-2.txt" );
         verifier.deleteDirectory( "target" );
+        verifier.getCliOptions().add( "-X" );
         verifier.getCliOptions().add( "-U" );
         verifier.executeGoal( "validate" );
         verifier.verifyErrorFreeLog();

File: maven-core/src/main/java/org/apache/maven/DefaultMaven.java
Patch:
@@ -336,7 +336,7 @@ private List<MavenProject> getProjectsForMavenReactor( MavenExecutionRequest req
 
         // We have no POM file.
         //
-        if ( request.getPom() == null || !request.getPom().exists() )
+        if ( request.getPom() == null )
         {
             ModelSource modelSource = new UrlModelSource( getClass().getResource( "project/standalone.xml" ) );
             MavenProject project =

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4522FailUponMissingDependencyParentPomTest.java
Patch:
@@ -39,7 +39,7 @@ public MavenITmng4522FailUponMissingDependencyParentPomTest()
     }
 
     /**
-     * Test that unreadable metadata from one repository does not fail the entire dependency resolution.
+     * Test that dependency resolution fails/aborts in case a dependency has a POM that inherits from a missing parent.
      */
     public void testit()
         throws Exception

File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/AbstractStringBasedModelInterpolator.java
Patch:
@@ -60,7 +60,7 @@ public abstract class AbstractStringBasedModelInterpolator
     /**
      * The default format used for build timestamps.
      */
-    private static final String DEFAULT_BUILD_TIMESTAMP_FORMAT = "yyyyMMdd-HHmm";
+    static final String DEFAULT_BUILD_TIMESTAMP_FORMAT = "yyyyMMdd-HHmm";
 
     /**
      * The name of a property that if present in the model's {@code <properties>} section specifies a custom format for

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java
Patch:
@@ -143,6 +143,9 @@ else if ( configuration.isResolveDependencies() )
                     .setCache( configuration.getRepositoryCache() )
                     .setLocalRepository( configuration.getLocalRepository() )
                     .setRemoteRepositories( project.getRemoteArtifactRepositories() )
+                    .setServers( configuration.getServers() )
+                    .setMirrors( configuration.getMirrors() )
+                    .setProxies( configuration.getProxies() )
                     .setOffline( configuration.isOffline() )
                     .setForceUpdate( configuration.isForceUpdate() )
                     .setManagedVersionMap( project.getManagedVersionMap() );

File: maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java
Patch:
@@ -172,7 +172,7 @@ public static MavenExecutionRequest copy( MavenExecutionRequest original )
         copy.setRepositoryCache( original.getRepositoryCache() );
         copy.setNoSnapshotUpdates( original.isNoSnapshotUpdates() );
         copy.setExecutionListener( original.getExecutionListener() );
-        return original;
+        return copy;
     }
 
     public String getBaseDirectory()

File: maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java
Patch:
@@ -154,7 +154,7 @@ public static MavenExecutionRequest copy( MavenExecutionRequest original )
         copy.setUserSettingsFile( original.getUserSettingsFile() );
         copy.setGlobalSettingsFile( original.getGlobalSettingsFile() );
         copy.setUserToolchainsFile( original.getUserToolchainsFile() );
-        copy.setBaseDirectory( new File( original.getBaseDirectory() ) );
+        copy.setBaseDirectory( ( original.getBaseDirectory() != null ) ? new File( original.getBaseDirectory() ) : null );
         copy.setGoals( original.getGoals() );
         copy.setRecursive( original.isRecursive() );
         copy.setPom( original.getPom() );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -127,6 +127,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng4385LifecycleMappingFromExtensionInReactorTest.class );
         suite.addTestSuite( MavenITmng4383ValidDependencyVersionTest.class );
         suite.addTestSuite( MavenITmng4381ExtensionSingletonComponentTest.class );
+        suite.addTestSuite( MavenITmng4379TransitiveSystemPathInterpolatedWithEnvVarTest.class );
         suite.addTestSuite( MavenITmng4368TimestampAwareArtifactInstallerTest.class );
         suite.addTestSuite( MavenITmng4367LayoutAwareMirrorSelectionTest.class );
         suite.addTestSuite( MavenITmng4365XmlMarkupInAttributeValueTest.class );

File: maven-compat/src/main/java/org/apache/maven/artifact/installer/DefaultArtifactInstaller.java
Patch:
@@ -80,20 +80,20 @@ public void install( File source, Artifact artifact, ArtifactRepository localRep
                 destination.getParentFile().mkdirs();
             }
 
-            getLogger().info( "Installing " + source.getPath() + " to " + destination );
-
             boolean copy =
                 !destination.exists() || "pom".equals( artifact.getType() )
                     || source.lastModified() != destination.lastModified() || source.length() != destination.length();
 
             if ( copy )
             {
+                getLogger().info( "Installing " + source + " to " + destination );
+
                 FileUtils.copyFile( source, destination );
                 destination.setLastModified( source.lastModified() );
             }
             else
             {
-                getLogger().debug( "Skipped re-installation of " + destination + ", seems unchanged" );
+                getLogger().info( "Skipped re-installing " + source + " to " + destination + ", seems unchanged" );
             }
 
             // must be after the artifact is installed

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -127,6 +127,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng4385LifecycleMappingFromExtensionInReactorTest.class );
         suite.addTestSuite( MavenITmng4383ValidDependencyVersionTest.class );
         suite.addTestSuite( MavenITmng4381ExtensionSingletonComponentTest.class );
+        suite.addTestSuite( MavenITmng4368TimestampAwareArtifactInstallerTest.class );
         suite.addTestSuite( MavenITmng4367LayoutAwareMirrorSelectionTest.class );
         suite.addTestSuite( MavenITmng4365XmlMarkupInAttributeValueTest.class );
         suite.addTestSuite( MavenITmng4363DynamicAdditionOfDependencyArtifactTest.class );

File: maven-artifact/src/main/java/org/apache/maven/artifact/repository/layout/ArtifactRepositoryLayout.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.metadata.ArtifactMetadata;
 import org.apache.maven.artifact.repository.ArtifactRepository;
+import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;
 
 /** @author jdcasey */
 public interface ArtifactRepositoryLayout

File: maven-core/src/main/java/org/apache/maven/plugin/prefix/NoPluginFoundForPrefixException.java
Patch:
@@ -54,10 +54,10 @@ private static String format( ArtifactRepository localRepository, List<ArtifactR
 
         if ( remoteRepositories != null && !remoteRepositories.isEmpty() )
         {
-            repos += ", ";
-
             for ( ArtifactRepository repository : remoteRepositories )
             {
+                repos += ", ";
+
                 if ( repository != null )
                 {
                     repos += repository.getId() + " (" + repository.getUrl() + ")";

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultBuildPluginManager.java
Patch:
@@ -114,7 +114,7 @@ public void executeMojo( MavenSession session, MojoExecution mojoExecution )
                 throw new PluginExecutionException( mojoExecution, project, e );
             }
         }
-        catch ( PluginManagerException e )
+        catch ( PluginContainerException e )
         {
             throw new PluginExecutionException( mojoExecution, project, e );
         }

File: maven-core/src/main/java/org/apache/maven/plugin/PluginExecutionException.java
Patch:
@@ -21,6 +21,7 @@
 
 import org.apache.maven.project.DuplicateArtifactAttachmentException;
 import org.apache.maven.project.MavenProject;
+import org.codehaus.plexus.util.StringUtils;
 
 public class PluginExecutionException
     extends PluginManagerException
@@ -72,9 +73,9 @@ private static String constructMessage( MojoExecution mojoExecution, Throwable c
             message = "Mojo execution failed";
         }
 
-        if ( cause != null )
+        if ( cause != null && StringUtils.isNotEmpty( cause.getMessage() ) )
         {
-            message = ": " + cause.getMessage();
+            message += ": " + cause.getMessage();
         }
         else
         {

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4361ForceDependencySnapshotUpdateTest.java
Patch:
@@ -36,7 +36,7 @@ public class MavenITmng4361ForceDependencySnapshotUpdateTest
 
     public MavenITmng4361ForceDependencySnapshotUpdateTest()
     {
-        super( ALL_MAVEN_VERSIONS );
+        super( "[2.0,3.0-alpha-1),[3.0-alpha-4,)" );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4412OfflineModeInPluginTest.java
Patch:
@@ -35,7 +35,7 @@ public class MavenITmng4412OfflineModeInPluginTest
 
     public MavenITmng4412OfflineModeInPluginTest()
     {
-        super( ALL_MAVEN_VERSIONS );
+        super( "[2.0,3.0-alpha-1),[3.0-alpha-4,)" );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4433ForceParentSnapshotUpdateTest.java
Patch:
@@ -36,7 +36,7 @@ public class MavenITmng4433ForceParentSnapshotUpdateTest
 
     public MavenITmng4433ForceParentSnapshotUpdateTest()
     {
-        super( ALL_MAVEN_VERSIONS );
+        super( "[2.0,3.0-alpha-1),[3.0-alpha-4,)" );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4293RequiresCompilePlusRuntimeScopeTest.java
Patch:
@@ -41,7 +41,7 @@ public class MavenITmng4293RequiresCompilePlusRuntimeScopeTest
 
     public MavenITmng4293RequiresCompilePlusRuntimeScopeTest()
     {
-        super( "[3.0-alpha3,)" );
+        super( "[3.0-alpha-3,)" );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3951AbsolutePathsTest.java
Patch:
@@ -70,9 +70,9 @@ public void testitMNG3951()
 
         verifier.assertFilePresent( "target/path.properties" );
         Properties props = verifier.loadProperties( "target/path.properties" );
-        assertEquals( new File( testDir, "tmp" ).getAbsolutePath(), props.getProperty( "fileParams.0" ) );
-        assertEquals( new File( getRoot( testDir ), "tmp" ).getAbsolutePath(), props.getProperty( "fileParams.1" ) );
-        assertEquals( repoDir, props.getProperty( "stringParams.0" ) );
+        assertEquals( new File( testDir, "tmp" ).getAbsoluteFile(), new File( props.getProperty( "fileParams.0" ) ) );
+        assertEquals( new File( getRoot( testDir ), "tmp" ).getAbsoluteFile(), new File( props.getProperty( "fileParams.1" ) ) );
+        assertEquals( new File( repoDir ), new File( props.getProperty( "stringParams.0" ) ) );
     }
 
     private static File getRoot( File path )

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -85,6 +85,7 @@ public static Test suite()
         // suite.addTestSuite( MavenIT0109ReleaseUpdateTest.class );
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng4430DistributionManagementStatusTest.class );
         suite.addTestSuite( MavenITmng4429CompRequirementOnNonDefaultImplTest.class );
         suite.addTestSuite( MavenITmng4423SessionDataFromPluginParameterExpressionTest.class );
         suite.addTestSuite( MavenITmng4422PluginExecutionPhaseInterpolationTest.class );

File: maven-core/src/main/java/org/apache/maven/exception/DefaultExceptionHandler.java
Patch:
@@ -212,9 +212,9 @@ private String getMessage( String message, Throwable exception )
                     {
                         exceptionMessage = longMessage;
                     }
-                    else
+                    else if ( !exceptionMessage.contains( longMessage ) )
                     {
-                        exceptionMessage = join( exceptionMessage, longMessage );
+                        exceptionMessage = join( exceptionMessage, '\n' + longMessage );
                     }
                 }
             }

File: maven-core/src/main/java/org/apache/maven/project/MavenProject.java
Patch:
@@ -235,7 +235,6 @@ public void setParentFile( File parentFile )
         this.repositorySystem = repositorySystem;
     }
 
-    //TODO: need to integrate the effective scope and refactor it out of the MMS
     @Deprecated
     public Set<Artifact> createArtifacts( ArtifactFactory artifactFactory, String inheritedScope, ArtifactFilter filter )
         throws InvalidDependencyVersionException

File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuildingRequest.java
Patch:
@@ -72,7 +72,7 @@ public File getPomFile()
 
     public DefaultModelBuildingRequest setPomFile( File pomFile )
     {
-        this.pomFile = pomFile;
+        this.pomFile = ( pomFile != null ) ? pomFile.getAbsoluteFile() : null;
 
         return this;
     }

File: maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java
Patch:
@@ -46,7 +46,7 @@ public FileModelSource( File pomFile )
         {
             throw new IllegalArgumentException( "no POM file specified" );
         }
-        this.pomFile = pomFile;
+        this.pomFile = pomFile.getAbsoluteFile();
     }
 
     public InputStream getInputStream()

File: its/core-it-support/core-it-plugins/maven-it-plugin-artifact/src/main/java/org/apache/maven/plugin/coreit/DeployMojo.java
Patch:
@@ -89,7 +89,7 @@ public void execute()
         }
         catch ( Exception e )
         {
-            throw new MojoExecutionException( "Failed to deploy artifacts", e );
+            throw new MojoExecutionException( "Failed to deploy artifacts: " + e.getMessage(), e );
         }
     }
 

File: its/core-it-support/core-it-plugins/maven-it-plugin-artifact/src/main/java/org/apache/maven/plugin/coreit/ResolveMojo.java
Patch:
@@ -114,7 +114,7 @@ public void execute()
         }
         catch ( Exception e )
         {
-            throw new MojoExecutionException( "Failed to resolve artifacts", e );
+            throw new MojoExecutionException( "Failed to resolve artifacts: " + e.getMessage(), e );
         }
     }
 

File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java
Patch:
@@ -576,7 +576,8 @@ private ModelData readParentExternally( Model childModel, ModelBuildingRequest r
         catch ( UnresolvableModelException e )
         {
             problems.addFatalError( "Non-resolvable parent POM "
-                + ModelProblemUtils.toId( groupId, artifactId, version ) + ": " + e.getMessage(), e );
+                + ModelProblemUtils.toId( groupId, artifactId, version ) + " for "
+                + ModelProblemUtils.toId( childModel ) + ": " + e.getMessage(), e );
             throw new ModelBuildingException( problems.getRootModelId(), problems.getProblems() );
         }
 

File: maven-core/src/main/java/org/apache/maven/DefaultMaven.java
Patch:
@@ -250,6 +250,9 @@ private void validateLocalRepository( MavenExecutionRequest request )
         throws LocalRepositoryNotAccessibleException
     {
         File localRepoDir = request.getLocalRepositoryPath();
+
+        logger.debug( "Using local repository at " + localRepoDir );
+
         localRepoDir.mkdirs();
 
         if ( !localRepoDir.isDirectory() )

File: maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java
Patch:
@@ -116,7 +116,7 @@ public class DefaultMavenExecutionRequest
 
     private int loggingLevel = LOGGING_LEVEL_INFO;
 
-    private String globalChecksumPolicy = CHECKSUM_POLICY_WARN;
+    private String globalChecksumPolicy;
 
     private boolean updateSnapshots = false;
 

File: maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java
Patch:
@@ -271,6 +271,8 @@ else if ( StringUtils.isNotEmpty( d.getSystemPath() ) )
                     validateStringNotEmpty( "build.plugins.plugin.version", problems, warnOnMissingPluginVersion,
                                             p.getVersion(), p.getKey() );
 
+                    validateVersion( "build.plugins.plugin.version", problems, warnOnly, p.getVersion(), p.getKey() );
+
                     validateBoolean( "build.plugins.plugin.inherited", problems, warnOnly, p.getInherited(),
                                      p.getKey() );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -85,6 +85,7 @@ public static Test suite()
         // suite.addTestSuite( MavenIT0109ReleaseUpdateTest.class );
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng4405ValidPluginVersionTest.class );
         suite.addTestSuite( MavenITmng4404UniqueProfileIdTest.class );
         suite.addTestSuite( MavenITmng4403LenientDependencyPomParsingTest.class );
         suite.addTestSuite( MavenITmng4402DuplicateChildModuleTest.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -85,6 +85,7 @@ public static Test suite()
         // suite.addTestSuite( MavenIT0109ReleaseUpdateTest.class );
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng4404UniqueProfileIdTest.class );
         suite.addTestSuite( MavenITmng4403LenientDependencyPomParsingTest.class );
         suite.addTestSuite( MavenITmng4402DuplicateChildModuleTest.class );
         suite.addTestSuite( MavenITmng4401RepositoryOrderForParentPomTest.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -86,6 +86,7 @@ public static Test suite()
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
         suite.addTestSuite( MavenITmng4403LenientDependencyPomParsingTest.class );
+        suite.addTestSuite( MavenITmng4402DuplicateChildModuleTest.class );
         suite.addTestSuite( MavenITmng4401RepositoryOrderForParentPomTest.class );
         suite.addTestSuite( MavenITmng4400RepositoryOrderTest.class );
         suite.addTestSuite( MavenITmng4396AntBasedMojoSupportTest.class );

File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java
Patch:
@@ -1281,11 +1281,11 @@ private void injectLifecycleOverlay( Map<String, List<MojoExecution>> lifecycleM
         }
         catch ( IOException e )
         {
-            throw new PluginDescriptorParsingException( pluginDescriptor.getPlugin(), e );
+            throw new PluginDescriptorParsingException( pluginDescriptor.getPlugin(), pluginDescriptor.getSource(), e );
         }
         catch ( XmlPullParserException e )
         {
-            throw new PluginDescriptorParsingException( pluginDescriptor.getPlugin(), e );
+            throw new PluginDescriptorParsingException( pluginDescriptor.getPlugin(), pluginDescriptor.getSource(), e );
         }
 
         if ( lifecycleOverlay == null )

File: maven-plugin-api/src/main/java/org/apache/maven/plugin/descriptor/PluginDescriptorBuilder.java
Patch:
@@ -344,11 +344,11 @@ public PlexusConfiguration buildConfiguration( Reader configuration )
         }
         catch ( IOException e )
         {
-            throw new PlexusConfigurationException( "Error creating configuration", e );
+            throw new PlexusConfigurationException( e.getMessage(), e );
         }
         catch ( XmlPullParserException e )
         {
-            throw new PlexusConfigurationException( "Error creating configuration", e );
+            throw new PlexusConfigurationException( e.getMessage(), e );
         }
     }
 }

File: maven-core/src/main/java/org/apache/maven/DefaultMaven.java
Patch:
@@ -269,7 +269,7 @@ private Collection<AbstractMavenLifecycleParticipant> getLifecycleParticipants(
         return lifecycleListeners;
     }
 
-    private MavenExecutionResult processResult( MavenExecutionResult result, Exception e )
+    private MavenExecutionResult processResult( MavenExecutionResult result, Throwable e )
     {
         ExceptionHandler handler = new DefaultExceptionHandler();
         

File: maven-core/src/main/java/org/apache/maven/exception/DefaultExceptionHandler.java
Patch:
@@ -79,7 +79,7 @@
 public class DefaultExceptionHandler
     implements ExceptionHandler
 {
-    public ExceptionSummary handleException( Exception exception )
+    public ExceptionSummary handleException( Throwable exception )
     {
         String message;
         

File: maven-core/src/main/java/org/apache/maven/exception/ExceptionHandler.java
Patch:
@@ -21,5 +21,5 @@
 
 public interface ExceptionHandler    
 {
-    ExceptionSummary handleException( Exception e );
+    ExceptionSummary handleException( Throwable e );
 }

File: maven-core/src/main/java/org/apache/maven/exception/ExceptionSummary.java
Patch:
@@ -28,20 +28,20 @@
 
 public class ExceptionSummary
 {
-    private Exception exception;
+    private Throwable exception;
     
     private String message;
     
     private String reference;
 
-    public ExceptionSummary( Exception exception, String message, String reference )
+    public ExceptionSummary( Throwable exception, String message, String reference )
     {
         this.exception = exception;
         this.message = message;
         this.reference = reference;
     }
 
-    public Exception getException()
+    public Throwable getException()
     {
         return exception;
     }

File: maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionResult.java
Patch:
@@ -81,16 +81,16 @@ public MavenExecutionResult setArtifactResolutionResult( ArtifactResolutionResul
         return this;
     }
 
-    public List getExceptions()
+    public List<Throwable> getExceptions()
     {
-        return exceptions == null ? Collections.EMPTY_LIST : exceptions;
+        return exceptions == null ? Collections.<Throwable> emptyList() : exceptions;
     }
 
     public MavenExecutionResult addException( Throwable t )
     {
         if ( exceptions == null )
         {
-            exceptions = new ArrayList();
+            exceptions = new ArrayList<Throwable>();
         }
 
         exceptions.add( t );

File: maven-core/src/main/java/org/apache/maven/execution/MavenExecutionResult.java
Patch:
@@ -44,7 +44,7 @@ public interface MavenExecutionResult
     // - project building exception
     // - invalid project model exception: list of markers
     // - xmlpull parser exception
-    List<Exception> getExceptions();
+    List<Throwable> getExceptions();
 
     MavenExecutionResult addException( Throwable e );
 

File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -52,8 +52,6 @@
 import org.codehaus.plexus.classworlds.ClassWorld;
 import org.codehaus.plexus.component.repository.exception.ComponentLifecycleException;
 import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
-import org.codehaus.plexus.logging.Logger;
-import org.codehaus.plexus.logging.console.ConsoleLogger;
 import org.codehaus.plexus.util.StringUtils;
 import org.codehaus.plexus.util.cli.CommandLineUtils;
 import org.sonatype.plexus.components.cipher.DefaultPlexusCipher;
@@ -231,7 +229,7 @@ public int doMain( String[] args, String workingDirectory, PrintStream stdout, P
         }
         catch ( ComponentLookupException e )
         {
-            CLIReportingUtils.showError( new ConsoleLogger( Logger.LEVEL_ERROR, Maven.class.getName() ), "Unable to start the embedder: ", e, showErrors );
+            CLIReportingUtils.showError( logger, "Unable to start the embedder: ", e, showErrors );
 
             return 1;
         }

File: its/core-it-support/core-it-plugins/maven-it-plugin-uses-properties/src/main/java/org/apache/maven/plugin/coreit/UsesPropertiesMojo.java
Patch:
@@ -34,7 +34,7 @@ public class UsesPropertiesMojo
     extends AbstractMojo
 {
     /**
-     * @parameter expression=${basedir}"
+     * @parameter expression="${basedir}"
      */
     private File basedir;
     

File: maven-core/src/test/java/org/apache/maven/lifecycle/LifecycleExecutorTest.java
Patch:
@@ -11,7 +11,6 @@
 import org.apache.maven.model.Plugin;
 import org.apache.maven.plugin.MojoExecution;
 import org.apache.maven.plugin.descriptor.MojoDescriptor;
-import org.codehaus.plexus.DefaultPlexusContainer;
 import org.codehaus.plexus.component.annotations.Requirement;
 import org.codehaus.plexus.util.xml.Xpp3Dom;
 
@@ -25,7 +24,6 @@ protected void setUp()
         throws Exception
     {
         super.setUp();
-        ( (DefaultPlexusContainer) getContainer() ).getLoggerManager().setThresholds( 0 );
         lifecycleExecutor = (DefaultLifecycleExecutor) lookup( LifecycleExecutor.class );
         lookup( ExceptionHandler.class );
     }

File: maven-core/src/test/java/org/apache/maven/lifecycle/LifecycleExecutorTest.java
Patch:
@@ -11,6 +11,7 @@
 import org.apache.maven.model.Plugin;
 import org.apache.maven.plugin.MojoExecution;
 import org.apache.maven.plugin.descriptor.MojoDescriptor;
+import org.codehaus.plexus.DefaultPlexusContainer;
 import org.codehaus.plexus.component.annotations.Requirement;
 import org.codehaus.plexus.util.xml.Xpp3Dom;
 
@@ -24,6 +25,7 @@ protected void setUp()
         throws Exception
     {
         super.setUp();
+        ( (DefaultPlexusContainer) getContainer() ).getLoggerManager().setThresholds( 0 );
         lifecycleExecutor = (DefaultLifecycleExecutor) lookup( LifecycleExecutor.class );
         lookup( ExceptionHandler.class );
     }

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -88,6 +88,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng4387QuietLoggingTest.class );
         suite.addTestSuite( MavenITmng4386DebugLoggingTest.class );
         suite.addTestSuite( MavenITmng4385LifecycleMappingFromExtensionInReactorTest.class );
+        suite.addTestSuite( MavenITmng4383ValidDependencyVersionTest.class );
         suite.addTestSuite( MavenITmng4381ExtensionSingletonComponentTest.class );
         suite.addTestSuite( MavenITmng4367LayoutAwareMirrorSelectionTest.class );
         suite.addTestSuite( MavenITmng4365XmlMarkupInAttributeValueTest.class );

File: maven-model-builder/src/test/java/org/apache/maven/model/validation/DefaultModelValidatorTest.java
Patch:
@@ -327,11 +327,11 @@ public void testBadDependencyScope()
     {
         SimpleProblemCollector result = validate( "bad-dependency-scope.xml" );
 
-        assertViolations( result, 2, 0 );
+        assertViolations( result, 0, 2 );
 
-        assertTrue( result.getErrors().get( 0 ).contains( "test:f" ) );
+        assertTrue( result.getWarnings().get( 0 ).contains( "test:f" ) );
 
-        assertTrue( result.getErrors().get( 1 ).contains( "test:g" ) );
+        assertTrue( result.getWarnings().get( 1 ).contains( "test:g" ) );
     }
 
 }

File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -258,6 +258,8 @@ public int doMain( String[] args, ClassWorld classWorld )
 
         request.setExecutionListener( new ExecutionEventLogger( logger ) );
 
+        container.getLoggerManager().setThresholds( request.getLoggingLevel() );
+
         if ( debug || commandLine.hasOption( CLIManager.SHOW_VERSION ) )
         {
             CLIReportingUtils.showVersion();

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -86,6 +86,7 @@ public static Test suite()
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
         suite.addTestSuite( MavenITmng4387QuietLoggingTest.class );
+        suite.addTestSuite( MavenITmng4386DebugLoggingTest.class );
         suite.addTestSuite( MavenITmng4385LifecycleMappingFromExtensionInReactorTest.class );
         suite.addTestSuite( MavenITmng4381ExtensionSingletonComponentTest.class );
         suite.addTestSuite( MavenITmng4367LayoutAwareMirrorSelectionTest.class );

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java
Patch:
@@ -129,7 +129,7 @@ public List<ArtifactRepository> createArtifactRepositories( List<Repository> pom
         return artifactRepositories;
     }
 
-    public synchronized ProjectRealmCache.CacheRecord createProjectRealm( Model model,
+    public synchronized ProjectRealmCache.CacheRecord createProjectRealm( MavenProject project, Model model,
                                                                           RepositoryRequest repositoryRequest )
         throws ArtifactResolutionException, PluginVersionResolutionException
     {
@@ -261,6 +261,8 @@ public synchronized ProjectRealmCache.CacheRecord createProjectRealm( Model mode
                 extensionRealmCache.put( plugin, repositoryRequest, extensionRealm, artifacts, extensionDescriptor );
             }
 
+            extensionRealmCache.register( project, extensionRealm );
+
             extensionRealms.add( extensionRealm );
             if ( extensionDescriptor != null )
             {

File: maven-core/src/main/java/org/apache/maven/project/ProjectBuildingHelper.java
Patch:
@@ -58,12 +58,14 @@ List<ArtifactRepository> createArtifactRepositories( List<Repository> pomReposit
     /**
      * Creates the project realm that hosts the build extensions of the specified model.
      * 
+     * @param project The project to create the project realm for, must not be {@code null}
      * @param model The model to create the project realm for, must not be {@code null}
      * @param repositoryRequest The repository request to use for artifact resolution, must not be {@code null}.
      * @return The record with the project realm and extension artifact filter, never {@code null}.
      * @throws ArtifactResolutionException If any build extension could not be resolved.
      */
-    ProjectRealmCache.CacheRecord createProjectRealm( Model model, RepositoryRequest repositoryRequest )
+    ProjectRealmCache.CacheRecord createProjectRealm( MavenProject project, Model model,
+                                                      RepositoryRequest repositoryRequest )
         throws ArtifactResolutionException, PluginVersionResolutionException;
 
 }

File: maven-core/src/test/java/org/apache/maven/project/EmptyProjectBuildingHelper.java
Patch:
@@ -55,7 +55,8 @@ public List<ArtifactRepository> createArtifactRepositories( List<Repository> pom
         }
     }
 
-    public ProjectRealmCache.CacheRecord createProjectRealm( Model model, RepositoryRequest repositoryRequest )
+    public ProjectRealmCache.CacheRecord createProjectRealm( MavenProject proejct, Model model,
+                                                             RepositoryRequest repositoryRequest )
         throws ArtifactResolutionException
     {
         return new ProjectRealmCache.CacheRecord( null, null );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -354,6 +354,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng2130ParentLookupFromReactorCacheTest.class );
         suite.addTestSuite( MavenITmng2124PomInterpolationWithParentValuesTest.class );
         suite.addTestSuite( MavenITmng2123VersionRangeDependencyTest.class );
+        suite.addTestSuite( MavenITmng2098VersionRangeSatisfiedFromWrongRepoTest.class );
         suite.addTestSuite( MavenITmng2068ReactorRelativeParentsTest.class );
         suite.addTestSuite( MavenITmng2054PluginExecutionInheritanceTest.class );
         suite.addTestSuite( MavenITmng2052InterpolateWithSettingsProfilePropertiesTest.class );

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultBuildPluginManager.java
Patch:
@@ -61,7 +61,7 @@ public class DefaultBuildPluginManager
      * @throws PluginResolutionException The plugin could be found but could not be resolved.
      * @throws InvalidPluginDescriptorException 
      */
-    public synchronized PluginDescriptor loadPlugin( Plugin plugin, RepositoryRequest repositoryRequest )
+    public PluginDescriptor loadPlugin( Plugin plugin, RepositoryRequest repositoryRequest )
         throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, InvalidPluginDescriptorException
     {
         return mavenPluginManager.getPluginDescriptor( plugin, repositoryRequest );
@@ -140,7 +140,7 @@ public void executeMojo( MavenSession session, MojoExecution mojoExecution )
      *      call, which is not nice.
      * @throws ArtifactResolutionException 
      */
-    public synchronized ClassRealm getPluginRealm( MavenSession session, PluginDescriptor pluginDescriptor ) 
+    public ClassRealm getPluginRealm( MavenSession session, PluginDescriptor pluginDescriptor ) 
         throws PluginManagerException
     {
         ClassRealm pluginRealm = pluginDescriptor.getClassRealm();

File: maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java
Patch:
@@ -291,8 +291,8 @@ public MojoDescriptor getMojoDescriptor( Plugin plugin, String goal, RepositoryR
         return mojoDescriptor;
     }
 
-    public void setupPluginRealm( PluginDescriptor pluginDescriptor, MavenSession session, ClassLoader parent,
-                                  List<String> imports )
+    public synchronized void setupPluginRealm( PluginDescriptor pluginDescriptor, MavenSession session,
+                                               ClassLoader parent, List<String> imports )
         throws PluginResolutionException, PluginManagerException
     {
         Plugin plugin = pluginDescriptor.getPlugin();

File: maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java
Patch:
@@ -73,6 +73,7 @@ public void validateRawModel( Model model, ModelBuildingRequest request, ModelPr
 
         if ( request.getValidationLevel() >= ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0 )
         {
+            validateEnum( "modelVersion", problems, false, model.getModelVersion(), null, "4.0.0" );
             validateStringNoExpression( "groupId", problems, true, model.getGroupId() );
             validateStringNoExpression( "artifactId", problems, true, model.getArtifactId() );
             validateStringNoExpression( "version", problems, true, model.getVersion() );

File: maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.Iterator;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;

File: maven-compat/src/main/java/org/apache/maven/artifact/repository/metadata/DefaultRepositoryMetadataManager.java
Patch:
@@ -82,7 +82,7 @@ public void resolve( RepositoryMetadata metadata, RepositoryRequest request )
             {
                 if ( getLogger().isDebugEnabled() )
                 {
-                    getLogger().debug( "Resolved metadata from cache: " + metadata );
+                    getLogger().debug( "Resolved metadata from cache: " + metadata + " @ " + cacheRecord.repository );
                 }
 
                 metadata.setMetadata( MetadataUtils.cloneMetadata( cacheRecord.metadata ) );

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/DefaultLegacyArtifactCollector.java
Patch:
@@ -170,7 +170,6 @@ public ArtifactResolutionResult collect( Set<Artifact> artifacts,
                                 
                                 // This is required right now.
                                 result.addArtifact( artifact );
-                                result.addRequestedArtifact( artifact );
                             }
                         }
                     }
@@ -182,6 +181,8 @@ public ArtifactResolutionResult collect( Set<Artifact> artifacts,
             }
         }
 
+        result.setResolutionNodes( set );
+
         return result;
     }
 

File: maven-core/src/main/java/org/apache/maven/plugin/PluginParameterException.java
Patch:
@@ -61,9 +61,9 @@ private static void decomposeParameterIntoUserInstructions( MojoDescriptor mojo,
 
         if ( param.isEditable() )
         {
-            messageBuffer.append( "Inside the definition for plugin \'" + mojo.getPluginDescriptor().getArtifactId() +
-                "\' specify the following:\n\n<configuration>\n  ...\n  <" + param.getName() + ">VALUE</" +
-                param.getName() + ">\n</configuration>" );
+            messageBuffer.append( "Inside the definition for plugin \'" + mojo.getPluginDescriptor().getArtifactId()
+                + "\' specify the following:\n\n<configuration>\n  ...\n  <" + param.getName() + ">VALUE</"
+                + param.getName() + ">\n</configuration>" );
 
             String alias = param.getAlias();
             if ( StringUtils.isNotEmpty( alias ) && !alias.equals( param.getName() ) )

File: maven-core/src/main/java/org/apache/maven/project/InvalidProjectVersionException.java
Patch:
@@ -42,8 +42,8 @@ public InvalidProjectVersionException( String projectId, String locationInPom, S
     private static String formatMessage( String projectId, String locationInPom, String offendingVersion,
                                          InvalidVersionSpecificationException cause )
     {
-        return "Invalid version: " + offendingVersion + " found for: " + locationInPom + " in project: " + projectId +
-            ". Reason: " + cause.getMessage();
+        return "Invalid version: " + offendingVersion + " found for: " + locationInPom + " in project: " + projectId
+            + ". Reason: " + cause.getMessage();
     }
 
     public String getOffendingVersion()

File: maven-core/src/main/java/org/apache/maven/settings/SettingsConfigurationException.java
Patch:
@@ -43,8 +43,8 @@ public SettingsConfigurationException( String message, Throwable cause )
 
     public SettingsConfigurationException( String message, Throwable cause, int lineNumber, int columnNumber )
     {
-        super( message + ( lineNumber > 0 ? "\n  Line:   " + lineNumber : "" ) +
-            ( columnNumber > 0 ? "\n  Column: " + columnNumber : "" ), cause );
+        super( message + ( lineNumber > 0 ? "\n  Line:   " + lineNumber : "" )
+            + ( columnNumber > 0 ? "\n  Column: " + columnNumber : "" ), cause );
         this.lineNumber = lineNumber;
         this.columnNumber = columnNumber;
     }
@@ -58,6 +58,6 @@ public int getLineNumber()
     {
         return lineNumber;
     }
-    
+
 
 }

File: maven-compat/src/main/java/org/apache/maven/project/ModelUtils.java
Patch:
@@ -97,8 +97,8 @@ public static void mergePluginLists( PluginContainer childContainer, PluginConta
                 // 1. we're not processing the plugins in an inheritance-based merge
                 // 2. the parent's <inherited/> flag is not set
                 // 3. the parent's <inherited/> flag is set to true
-                if ( !handleAsInheritance || ( parentInherited == null ) ||
-                    Boolean.valueOf( parentInherited ).booleanValue() )
+                if ( !handleAsInheritance || ( parentInherited == null )
+                    || Boolean.valueOf( parentInherited ).booleanValue() )
                 {
                     Plugin childPlugin = (Plugin) childPlugins.get( parentPlugin.getKey() );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -87,6 +87,7 @@ public static Test suite()
 
         suite.addTestSuite( MavenITmng4345DefaultPluginExecutionOrderTest.class );
         suite.addTestSuite( MavenITmng4344ManagedPluginExecutionOrderTest.class );
+        suite.addTestSuite( MavenITmng4342IndependentMojoParameterDefaultValuesTest.class );
         suite.addTestSuite( MavenITmng4341PluginExecutionOrderTest.class );
         suite.addTestSuite( MavenITmng4338OptionalMojosTest.class );
         suite.addTestSuite( MavenITmng4335SettingsOfflineModeTest.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -85,6 +85,7 @@ public static Test suite()
         // suite.addTestSuite( MavenIT0109ReleaseUpdateTest.class );
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng4345DefaultPluginExecutionOrderTest.class );
         suite.addTestSuite( MavenITmng4344ManagedPluginExecutionOrderTest.class );
         suite.addTestSuite( MavenITmng4341PluginExecutionOrderTest.class );
         suite.addTestSuite( MavenITmng4338OptionalMojosTest.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -85,6 +85,7 @@ public static Test suite()
         // suite.addTestSuite( MavenIT0109ReleaseUpdateTest.class );
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng4344ManagedPluginExecutionOrderTest.class );
         suite.addTestSuite( MavenITmng4341PluginExecutionOrderTest.class );
         suite.addTestSuite( MavenITmng4338OptionalMojosTest.class );
         suite.addTestSuite( MavenITmng4335SettingsOfflineModeTest.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -101,6 +101,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng4305LocalRepoBasedirTest.class );
         suite.addTestSuite( MavenITmng4304ProjectDependencyArtifactsTest.class );
         suite.addTestSuite( MavenITmng4293RequiresCompilePlusRuntimeScopeTest.class );
+        suite.addTestSuite( MavenITmng4292EnumTypeMojoParametersTest.class );
         suite.addTestSuite( MavenITmng4291MojoRequiresOnlineModeTest.class );
         suite.addTestSuite( MavenITmng4283ParentPomPackagingTest.class );
         suite.addTestSuite( MavenITmng4281PreferLocalSnapshotTest.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -85,6 +85,7 @@ public static Test suite()
         // suite.addTestSuite( MavenIT0109ReleaseUpdateTest.class );
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng4338OptionalMojosTest.class );
         suite.addTestSuite( MavenITmng4335SettingsOfflineModeTest.class );
         suite.addTestSuite( MavenITmng4332DefaultPluginExecutionOrderTest.class );
         suite.addTestSuite( MavenITmng4331DependencyCollectionTest.class );

File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java
Patch:
@@ -597,13 +597,14 @@ private void importDependencyManagement( Model model, ModelBuildingRequest reque
 
             if ( imports.contains( imported ) )
             {
-                String message = "The dependencies of type=pom and with scope=import from a cycle: ";
+                String message = "The dependencies of type=pom and with scope=import form a cycle: ";
                 for ( String modelId : imports )
                 {
                     message += modelId + " -> ";
                 }
                 message += imported;
                 problems.addError( message );
+
                 continue;
             }
 

File: maven-model-builder/src/main/java/org/apache/maven/model/management/DependencyManagementInjector.java
Patch:
@@ -34,11 +34,11 @@ public interface DependencyManagementInjector
     /**
      * Merges default values from the dependency management section of the given model into itself.
      * 
-     * @param child The model into which to merge the values specified by its dependency management sections, must not
+     * @param model The model into which to merge the values specified by its dependency management sections, must not
      *            be <code>null</code>.
      * @param request The model building request that holds further settings, must not be {@code null}.
      * @param problems The container used to collect problems that were encountered, must not be {@code null}.
      */
-    void injectManagement( Model child, ModelBuildingRequest request, ModelProblemCollector problems );
+    void injectManagement( Model model, ModelBuildingRequest request, ModelProblemCollector problems );
 
 }

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -86,6 +86,7 @@ public static Test suite()
         // suite.addTestSuite( MavenIT0109ReleaseUpdateTest.class );
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng4332DefaultPluginExecutionOrderTest.class );
         suite.addTestSuite( MavenITmng4331DependencyCollectionTest.class );
         suite.addTestSuite( MavenITmng4328PrimitiveMojoParameterConfigurationTest.class );
         suite.addTestSuite( MavenITmng4327ExcludeForkingMojoFromForkedLifecycleTest.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -86,6 +86,7 @@ public static Test suite()
         // suite.addTestSuite( MavenIT0109ReleaseUpdateTest.class );
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng4328PrimitiveMojoParameterConfigurationTest.class );
         suite.addTestSuite( MavenITmng4327ExcludeForkingMojoFromForkedLifecycleTest.class );
         suite.addTestSuite( MavenITmng4321CliUsesPluginMgmtConfigTest.class );
         suite.addTestSuite( MavenITmng4320AggregatorAndDependenciesTest.class );

File: maven-compat/src/main/java/org/apache/maven/artifact/installer/DefaultArtifactInstaller.java
Patch:
@@ -76,7 +76,7 @@ public void install( File source, Artifact artifact, ArtifactRepository localRep
 
             getLogger().info( "Installing " + source.getPath() + " to " + destination );
 
-            FileUtils.copyFile( source, destination );
+            FileUtils.copyFileIfModified( source, destination );
 
             // must be after the artifact is installed
             for ( ArtifactMetadata metadata : artifact.getMetadataList() )

File: maven-core/src/main/java/org/apache/maven/DefaultProjectDependenciesResolver.java
Patch:
@@ -103,7 +103,6 @@ public Set<Artifact> resolve( MavenProject project, Collection<String> scopes, R
         // FIXME setTransferListener
         
         ArtifactResolutionResult result = repositorySystem.resolve( request );                
-        resolutionErrorHandler.throwErrors( request, result );
 
         project.setArtifacts( result.getArtifacts() );
 
@@ -123,6 +122,8 @@ public Set<Artifact> resolve( MavenProject project, Collection<String> scopes, R
         }
         project.setDependencyArtifacts( dependencyArtifacts );
 
+        resolutionErrorHandler.throwErrors( request, result );
+
         return result.getArtifacts();
     }
 

File: maven-core/src/main/java/org/apache/maven/lifecycle/LifecycleExecutor.java
Patch:
@@ -74,6 +74,9 @@ MavenExecutionPlan calculateExecutionPlan( MavenSession session, String... tasks
     //
     void populateDefaultConfigurationForPlugins( Collection<Plugin> plugins, RepositoryRequest repositoryRequest )
         throws LifecycleExecutionException;
+
+    void populateDefaultConfigurationForPlugin( Plugin plugin, RepositoryRequest repositoryRequest )
+        throws LifecycleExecutionException;
     
     void execute( MavenSession session );
 }

File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java
Patch:
@@ -719,9 +719,6 @@ private Map<String, List<MojoExecution>> calculateLifecycleMappings( MavenSessio
 
         if ( lifecycle == null )
         {
-            logger.info( "Invalid task '" + lifecyclePhase + "' : you must specify a valid lifecycle phase"
-                + ", or a goal in the format <plugin-prefix>:<goal> or"
-                + " <plugin-group-id>:<plugin-artifact-id>:<plugin-version>:<goal>" );
             throw new LifecyclePhaseNotFoundException( lifecyclePhase );
         }
 

File: maven-core/src/main/java/org/apache/maven/lifecycle/LifecyclePhaseNotFoundException.java
Patch:
@@ -37,7 +37,9 @@ public class LifecyclePhaseNotFoundException
      */
     public LifecyclePhaseNotFoundException( String lifecyclePhase )
     {
-        super( "Unknown lifecycle phase " + lifecyclePhase );
+        super( "Unknown lifecycle phase \"" + lifecyclePhase + "\". You must specify a valid lifecycle phase"
+            + " or a goal in the format <plugin-prefix>:<goal> or"
+            + " <plugin-group-id>:<plugin-artifact-id>[:<plugin-version>]:<goal>" );
         this.lifecyclePhase = ( lifecyclePhase != null ) ? lifecyclePhase : "";
     }
 

File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java
Patch:
@@ -269,8 +269,7 @@ private Model readModel( ModelSource modelSource, File pomFile, ModelBuildingReq
         {
             boolean strict = request.getValidationLevel() >= ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0;
 
-            Map<String, Object> options =
-                Collections.<String, Object> singletonMap( ModelReader.IS_STRICT, Boolean.valueOf( strict ) );
+            Map<String, ?> options = Collections.singletonMap( ModelReader.IS_STRICT, Boolean.valueOf( strict ) );
 
             model = modelReader.read( modelSource.getInputStream(), options );
         }

File: maven-model-builder/src/main/java/org/apache/maven/model/io/ModelReader.java
Patch:
@@ -50,7 +50,7 @@ public interface ModelReader
      * @throws IOException If the model could not be deserialized.
      * @throws ModelParseException If the input format could not be parsed.
      */
-    Model read( File input, Map<String, Object> options )
+    Model read( File input, Map<String, ?> options )
         throws IOException, ModelParseException;
 
     /**
@@ -63,7 +63,7 @@ Model read( File input, Map<String, Object> options )
      * @throws IOException If the model could not be deserialized.
      * @throws ModelParseException If the input format could not be parsed.
      */
-    Model read( Reader input, Map<String, Object> options )
+    Model read( Reader input, Map<String, ?> options )
         throws IOException, ModelParseException;
 
     /**
@@ -76,7 +76,7 @@ Model read( Reader input, Map<String, Object> options )
      * @throws IOException If the model could not be deserialized.
      * @throws ModelParseException If the input format could not be parsed.
      */
-    Model read( InputStream input, Map<String, Object> options )
+    Model read( InputStream input, Map<String, ?> options )
         throws IOException, ModelParseException;
 
 }

File: maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java
Patch:
@@ -462,7 +462,8 @@ public <T> T getConfiguredMojo( Class<T> mojoInterface, MavenSession session, Mo
 
             try
             {
-                mojo = container.lookup( mojoInterface, mojoDescriptor.getRoleHint() );
+                // currently all mojo even reportMojo have the same role Mojo.ROLE
+                mojo = (T) container.lookup( Mojo.ROLE, mojoDescriptor.getRoleHint() );
             }
             catch ( ComponentLookupException e )
             {

File: maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java
Patch:
@@ -563,7 +563,8 @@ private void populatePluginFields( Object mojo, MojoDescriptor mojoDescriptor, C
         catch ( ComponentConfigurationException e )
         {
             throw new PluginConfigurationException( mojoDescriptor.getPluginDescriptor(),
-                                                    "Unable to parse the created DOM for mojo configuration", e );
+                                                    "Unable to parse the created DOM for mojo configuration: "
+                                                        + e.getMessage(), e );
         }
         catch ( ComponentLookupException e )
         {

File: maven-core/src/main/java/org/apache/maven/exception/DefaultExceptionHandler.java
Patch:
@@ -21,14 +21,14 @@
 
 import org.apache.maven.artifact.resolver.ArtifactNotFoundException;
 import org.apache.maven.artifact.resolver.ArtifactResolutionException;
-import org.apache.maven.lifecycle.NoPluginFoundForPrefixException;
 import org.apache.maven.plugin.CycleDetectedInPluginGraphException;
 import org.apache.maven.plugin.MojoExecutionException;
 import org.apache.maven.plugin.MojoFailureException;
 import org.apache.maven.plugin.MojoNotFoundException;
 import org.apache.maven.plugin.PluginDescriptorParsingException;
 import org.apache.maven.plugin.PluginNotFoundException;
 import org.apache.maven.plugin.PluginResolutionException;
+import org.apache.maven.plugin.prefix.NoPluginFoundForPrefixException;
 import org.codehaus.plexus.component.annotations.Component;
 import org.codehaus.plexus.util.StringUtils;
 

File: maven-core/src/main/java/org/apache/maven/lifecycle/LifecycleExecutor.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.maven.plugin.PluginManagerException;
 import org.apache.maven.plugin.PluginNotFoundException;
 import org.apache.maven.plugin.PluginResolutionException;
+import org.apache.maven.plugin.prefix.NoPluginFoundForPrefixException;
 import org.apache.maven.plugin.version.PluginVersionResolutionException;
 
 /**

File: maven-core/src/main/java/org/apache/maven/plugin/prefix/NoPluginFoundForPrefixException.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.lifecycle;
+package org.apache.maven.plugin.prefix;
 
 /*
  * Licensed to the Apache Software Foundation (ASF) under one

File: maven-core/src/main/java/org/apache/maven/plugin/version/PluginVersionRequest.java
Patch:
@@ -102,7 +102,8 @@ public interface PluginVersionRequest
     List<ArtifactRepository> getRemoteRepositories();
 
     /**
-     * Sets the remote repositories to use.
+     * Sets the remote repositories to use. <em>Note:</em> When creating a request from a project, be sure to use the
+     * plugin artifact repositories and not the regular artifact repositories.
      * 
      * @param remoteRepositories The remote repositories to use.
      * @return This request, never {@code null}.

File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java
Patch:
@@ -247,7 +247,7 @@ else if ( MavenExecutionRequest.REACTOR_FAIL_AT_END.equals( session.getReactorFa
                 else if ( MavenExecutionRequest.REACTOR_FAIL_FAST.equals( session.getReactorFailureBehavior() ) )
                 {
                     // abort the build
-                    return;
+                    break;
                 }
                 else
                 {

File: maven-compat/src/main/java/org/apache/maven/artifact/resolver/ArtifactResolutionResult.java
Patch:
@@ -68,7 +68,7 @@ public Artifact getOriginatingArtifact()
         return originatingArtifact;
     }
 
-    public ArtifactResolutionResult ListOriginatingArtifact( final Artifact originatingArtifact )
+    public ArtifactResolutionResult setOriginatingArtifact( final Artifact originatingArtifact )
     {
         this.originatingArtifact = originatingArtifact;
 

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/DefaultLegacyArtifactCollector.java
Patch:
@@ -96,7 +96,7 @@ public ArtifactResolutionResult collect( Set<Artifact> artifacts,
     {
         ArtifactResolutionResult result = new ArtifactResolutionResult();
 
-        result.ListOriginatingArtifact( originatingArtifact );
+        result.setOriginatingArtifact( originatingArtifact );
 
         if ( conflictResolvers == null )
         {

File: maven-core/src/main/java/org/apache/maven/toolchain/Toolchain.java
Patch:
@@ -27,7 +27,7 @@
 public interface Toolchain
 {
 
-    String getType( );
+    String getType();
 
     /**
      * Gets the platform tool executable.

File: maven-core/src/main/java/org/apache/maven/toolchain/ToolchainFactory.java
Patch:
@@ -38,5 +38,5 @@ ToolchainPrivate createToolchain( ToolchainModel model )
      * if not applicable.
      * TODO keep around??
      **/
-    ToolchainPrivate createDefaultToolchain( );
+    ToolchainPrivate createDefaultToolchain();
 }
\ No newline at end of file

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -290,6 +290,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng2739RequiredRepositoryElementsTest.class );
         suite.addTestSuite( MavenITmng2720SiblingClasspathArtifactsTest.class );
         suite.addTestSuite( MavenITmng2695OfflinePluginSnapshotsTest.class );
+        suite.addTestSuite( MavenITmng2693SitePluginRealmTest.class );
         suite.addTestSuite( MavenITmng2690MojoLoadingErrorsTest.class );
         suite.addTestSuite( MavenITmng2668UsePluginDependenciesForSortingTest.class );
         suite.addTestSuite( MavenITmng2605BogusProfileActivationTest.class );

File: maven-core/src/main/java/org/apache/maven/DefaultMaven.java
Patch:
@@ -236,7 +236,7 @@ private List<MavenProject> getProjectsForMavenReactor( MavenExecutionRequest req
         //
         if ( request.getPom() == null || !request.getPom().exists() )
         {
-            MavenProject project = projectBuilder.buildStandaloneSuperProject( request.getProjectBuildingRequest() ); 
+            MavenProject project = projectBuilder.buildStandaloneSuperProject( request.getProjectBuildingRequest() ).getProject(); 
             projects.add( project );
             request.setProjectPresent( false );
             return projects;

File: maven-core/src/main/java/org/apache/maven/project/MavenProject.java
Patch:
@@ -351,7 +351,7 @@ public MavenProject getParent()
             {
                 try
                 {
-                    parent = mavenProjectBuilder.build( parentFile, projectBuilderConfiguration );
+                    parent = mavenProjectBuilder.build( parentFile, projectBuilderConfiguration ).getProject();
                 }
                 catch ( ProjectBuildingException e )
                 {
@@ -363,7 +363,7 @@ else if ( model.getParent() != null )
             {
                 try
                 {
-                    parent = mavenProjectBuilder.build( getParentArtifact(), projectBuilderConfiguration );
+                    parent = mavenProjectBuilder.build( getParentArtifact(), projectBuilderConfiguration ).getProject();
                 }
                 catch ( ProjectBuildingException e )
                 {

File: maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java
Patch:
@@ -474,7 +474,7 @@ private ProjectRelocation retrieveRelocatedProject( Artifact artifact, Repositor
                     configuration.setProcessPlugins( false );
                     configuration.setSystemProperties( System.getProperties() );
 
-                    project = getProjectBuilder().build( pomArtifact, configuration );
+                    project = getProjectBuilder().build( pomArtifact, configuration ).getProject();
                 }
                 catch ( ProjectBuildingException e )
                 {

File: maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java
Patch:
@@ -121,7 +121,7 @@ protected MavenSession createMavenSession( File pom, Properties executionPropert
 
         if ( pom != null )
         {
-            project = projectBuilder.build( pom, configuration );
+            project = projectBuilder.build( pom, configuration ).getProject();
         }
         else
         {

File: maven-core/src/test/java/org/apache/maven/project/AbstractMavenProjectTestCase.java
Patch:
@@ -158,7 +158,7 @@ protected MavenProject getProject( File pom )
         ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();
         configuration.setLocalRepository( getLocalRepository() );
 
-        return projectBuilder.build( pom, configuration );
+        return projectBuilder.build( pom, configuration ).getProject();
     }
 
 }

File: maven-core/src/test/java/org/apache/maven/project/PomConstructionTest.java
Patch:
@@ -1696,7 +1696,7 @@ private PomTestWrapper buildPom( String pomPath, boolean lenientValidation, Prop
         config.setValidationLevel( lenientValidation ? ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0
                         : ModelBuildingRequest.VALIDATION_LEVEL_STRICT );
 
-        return new PomTestWrapper( pomFile, projectBuilder.build( pomFile, config ) );
+        return new PomTestWrapper( pomFile, projectBuilder.build( pomFile, config ).getProject() );
     }
 
     protected void assertModelEquals( PomTestWrapper pom, Object expected, String expression )

File: maven-core/src/test/java/org/apache/maven/settings/PomConstructionWithSettingsTest.java
Patch:
@@ -90,7 +90,7 @@ private PomTestWrapper buildPom( String pomPath )
         config.setLocalRepository( repositorySystem.createArtifactRepository( "local", localRepoUrl, new DefaultRepositoryLayout(), null, null ) );
         config.setActiveProfileIds( settings.getActiveProfiles() );
         
-        return new PomTestWrapper( pomFile, projectBuilder.build( pomFile, config ) );        
+        return new PomTestWrapper( pomFile, projectBuilder.build( pomFile, config ).getProject() );        
 	}  
     
     private static Settings readSettingsFile(File settingsFile) 

File: maven-embedder/src/test/java/org/apache/maven/embedder/AbstractCoreMavenComponentTestCase.java
Patch:
@@ -127,7 +127,7 @@ protected MavenSession createMavenSession( File pom, Properties executionPropert
 
         if ( pom != null )
         {
-            project = projectBuilder.build( pom, configuration );
+            project = projectBuilder.build( pom, configuration ).getProject();
         }
         else
         {

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java
Patch:
@@ -200,7 +200,8 @@ public MavenProject build( Artifact artifact, ProjectBuildingRequest configurati
             .setArtifact( artifact )
             .setCache( configuration.getRepositoryCache() )
             .setLocalRepository( configuration.getLocalRepository() )
-            .setRemoteRepositories( configuration.getRemoteRepositories() );
+            .setRemoteRepositories( configuration.getRemoteRepositories() )
+            .setOffline( configuration.isOffline() );
         // FIXME setTransferListener
         ArtifactResolutionResult result = repositorySystem.resolve( request );
 

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java
Patch:
@@ -268,6 +268,7 @@ public MavenProjectBuildingResult buildProjectWithDependencies( File pomFile, Pr
             .setCache( request.getRepositoryCache() )
             .setLocalRepository( request.getLocalRepository() )
             .setRemoteRepositories( project.getRemoteArtifactRepositories() )
+            .setOffline( request.isOffline() )
             .setManagedVersionMap( project.getManagedVersionMap() );
         // FIXME setTransferListener
         ArtifactResolutionResult result;

File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java
Patch:
@@ -925,7 +925,7 @@ else if ( numTokens == 2 )
         return pluginManager.getMojoDescriptor( plugin, goal, repositoryRequest );
     }
 
-    private void resolvePluginVersion( Plugin plugin, RepositoryRequest repositoryRequest )
+    public void resolvePluginVersion( Plugin plugin, RepositoryRequest repositoryRequest )
         throws PluginNotFoundException
     {
         ArtifactRepository localRepository = repositoryRequest.getLocalRepository();

File: maven-core/src/main/java/org/apache/maven/lifecycle/LifecycleExecutor.java
Patch:
@@ -20,10 +20,8 @@
  */
 
 import java.util.Collection;
-import java.util.List;
 import java.util.Set;
 
-import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.artifact.repository.RepositoryRequest;
 import org.apache.maven.execution.MavenSession;
 import org.apache.maven.model.Plugin;
@@ -75,6 +73,9 @@ MavenExecutionPlan calculateExecutionPlan( MavenSession session, String... tasks
     //
     void populateDefaultConfigurationForPlugins( Collection<Plugin> plugins, RepositoryRequest repositoryRequest )
         throws LifecycleExecutionException;
+
+    void resolvePluginVersion( Plugin plugin, RepositoryRequest repositoryRequest )
+        throws PluginNotFoundException;
     
     void execute( MavenSession session );
 }

File: maven-core/src/main/java/org/apache/maven/project/DefaultModelBuildingListener.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.artifact.repository.DefaultRepositoryRequest;
 import org.apache.maven.artifact.repository.RepositoryRequest;
-import org.apache.maven.artifact.resolver.ArtifactResolutionException;
+import org.apache.maven.artifact.resolver.AbstractArtifactResolutionException;
 import org.apache.maven.model.Model;
 import org.apache.maven.model.building.AbstractModelBuildingListener;
 import org.apache.maven.model.building.ModelBuildingEvent;
@@ -142,7 +142,7 @@ public void buildExtensionsAssembled( ModelBuildingEvent event )
 
                 projectRealm = projectBuildingHelper.createProjectRealm( model, repositoryRequest );
             }
-            catch ( ArtifactResolutionException e )
+            catch ( AbstractArtifactResolutionException e )
             {
                 event.getProblems().addError( "Unresolveable build extensions: " + e.getMessage(), e );
             }

File: maven-core/src/main/java/org/apache/maven/project/ProjectBuildingHelper.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.maven.artifact.resolver.ArtifactResolutionException;
 import org.apache.maven.model.Model;
 import org.apache.maven.model.Repository;
+import org.apache.maven.plugin.PluginNotFoundException;
 import org.codehaus.plexus.classworlds.realm.ClassRealm;
 
 /**
@@ -61,6 +62,6 @@ List<ArtifactRepository> createArtifactRepositories( List<Repository> pomReposit
      * @throws ArtifactResolutionException If any build extension could not be resolved.
      */
     ClassRealm createProjectRealm( Model model, RepositoryRequest repositoryRequest )
-        throws ArtifactResolutionException;
+        throws ArtifactResolutionException, PluginNotFoundException;
 
 }

File: maven-core/src/test/java/org/apache/maven/project/EmptyProjectBuildingHelper.java
Patch:
@@ -24,6 +24,7 @@
 
 import org.apache.maven.artifact.InvalidRepositoryException;
 import org.apache.maven.artifact.repository.ArtifactRepository;
+import org.apache.maven.artifact.repository.RepositoryRequest;
 import org.apache.maven.artifact.resolver.ArtifactResolutionException;
 import org.apache.maven.model.Model;
 import org.apache.maven.model.Repository;
@@ -54,8 +55,7 @@ public List<ArtifactRepository> createArtifactRepositories( List<Repository> pom
         }
     }
 
-    public ClassRealm createProjectRealm( Model model, ArtifactRepository localRepository,
-                                       List<ArtifactRepository> remoteRepositories )
+    public ClassRealm createProjectRealm( Model model, RepositoryRequest repositoryRequest )
         throws ArtifactResolutionException
     {
         return null;

File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java
Patch:
@@ -176,6 +176,9 @@ public void execute( MavenSession session )
             {
                 session.setCurrentProject( currentProject );
 
+                repositoryRequest.setRemoteRepositories( currentProject.getPluginArtifactRepositories() );
+                populateDefaultConfigurationForPlugins( currentProject.getBuild().getPlugins(), repositoryRequest );
+
                 ClassRealm projectRealm = currentProject.getClassRealm();
                 if ( projectRealm != null )
                 {

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java
Patch:
@@ -499,7 +499,7 @@ private MavenProject toProject( ModelBuildingResult result, ProjectBuildingReque
 
         try
         {
-            if ( configuration.isProcessPlugins() )
+            if ( configuration.isProcessPlugins() && configuration.isProcessPluginConfiguration() )
             {
                 RepositoryRequest repositoryRequest = new DefaultRepositoryRequest();
                 repositoryRequest.setLocalRepository( configuration.getLocalRepository() );

File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java
Patch:
@@ -738,7 +738,8 @@ private void populateMojoExecutionConfiguration( MavenProject project, MojoExecu
                 {
                     Xpp3Dom executionConfiguration = (Xpp3Dom) e.getConfiguration();
 
-                    Xpp3Dom mojoConfiguration = new Xpp3Dom( executionConfiguration );
+                    Xpp3Dom mojoConfiguration =
+                        ( executionConfiguration != null ) ? new Xpp3Dom( executionConfiguration ) : null;
 
                     mojoConfiguration = Xpp3Dom.mergeXpp3Dom( mojoExecution.getConfiguration(), mojoConfiguration );
 

File: maven-compat/src/main/java/org/apache/maven/artifact/resolver/DefaultArtifactResolver.java
Patch:
@@ -195,7 +195,8 @@ private void resolve( Artifact artifact, RepositoryRequest request, TransferList
                 if ( request.isOffline() )
                 {
                     throw new ArtifactResolutionException( "The repository system is offline"
-                        + " and the requested artifact is not locally available", artifact, remoteRepositories );
+                        + " and the requested artifact is not locally available at " + destination, artifact,
+                                                           remoteRepositories );
                 }
                 else
                 {

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4291MojoRequiresOnlineModeTest.java
Patch:
@@ -57,7 +57,7 @@ public void testitDirectInvocation()
         {
             verifier.executeGoal( "org.apache.maven.its.plugins:maven-it-plugin-online:2.1-SNAPSHOT:touch" );
             verifier.verifyErrorFreeLog();
-            fail( "Invalid packaging of parent POM did not fail the build." );
+            fail( "Request to execute online mojo during offline mode did not fail the build." );
         }
         catch ( VerificationException e )
         {
@@ -71,7 +71,7 @@ public void testitDirectInvocation()
 
     /**
      * Test that the mojo annotation @requiresOnline is recognized. For a mojo invocation bound to a lifecycle phase,
-     * this means to skip the mojo when Maven is in offline mode but the mojo requires online model.
+     * this means to skip the mojo when Maven is in offline mode but the mojo requires online mode.
      */
     public void testitLifecycleInvocation()
         throws Exception

File: maven-plugin-api/src/main/java/org/apache/maven/plugin/descriptor/MojoDescriptor.java
Patch:
@@ -96,7 +96,7 @@ public class MojoDescriptor
     /**  By default, the Mojo needs a Maven project to be executed */
     private boolean projectRequired = true;
 
-    /**  By default, the Mojo is online */
+    /**  By default, the Mojo is assumed to work offline as well */
     private boolean onlineRequired = false;
 
     /**  Plugin configuration */

File: maven-compat/src/main/java/org/apache/maven/artifact/resolver/ArtifactResolutionRequest.java
Patch:
@@ -103,7 +103,7 @@ public ArtifactResolutionRequest setLocalRepository( ArtifactRepository localRep
         return this;
     }
 
-    public List<ArtifactRepository> getRemoteRepostories()
+    public List<ArtifactRepository> getRemoteRepositories()
     {
         return remoteRepositories;
     }

File: maven-compat/src/main/java/org/apache/maven/artifact/resolver/DefaultArtifactResolver.java
Patch:
@@ -359,7 +359,7 @@ private ArtifactResolutionResult resolve( ArtifactResolutionRequest request, boo
         Set<Artifact> artifacts = request.getArtifactDependencies();
         Map managedVersions = request.getManagedVersionMap();
         ArtifactRepository localRepository = request.getLocalRepository();
-        List<ArtifactRepository> remoteRepositories = request.getRemoteRepostories();
+        List<ArtifactRepository> remoteRepositories = request.getRemoteRepositories();
         List<ResolutionListener> listeners = request.getListeners();
         ArtifactFilter filter = request.getFilter();                       
         

File: maven-compat/src/main/java/org/apache/maven/artifact/resolver/DefaultResolutionErrorHandler.java
Patch:
@@ -69,14 +69,14 @@ public void throwErrors( ArtifactResolutionRequest request, ArtifactResolutionRe
         if ( result.hasMissingArtifacts() )
         {
             throw new MultipleArtifactsNotFoundException( request.getArtifact(), toList( result.getArtifacts() ),
-                                                          result.getMissingArtifacts(), request.getRemoteRepostories() );
+                                                          result.getMissingArtifacts(), request.getRemoteRepositories() );
         }
 
         // this should never happen since we checked all possible error sources before but better be sure
         if ( result.hasExceptions() )
         {
             throw new ArtifactResolutionException( "Unknown error during artifact resolution, " + request + ", "
-                + result.getExceptions(), request.getArtifact(), request.getRemoteRepostories() );
+                + result.getExceptions(), request.getArtifact(), request.getRemoteRepositories() );
         }
     }
 

File: maven-compat/src/main/java/org/apache/maven/artifact/resolver/ArtifactResolutionRequest.java
Patch:
@@ -108,9 +108,9 @@ public List<ArtifactRepository> getRemoteRepostories()
         return remoteRepositories;
     }
 
-    public ArtifactResolutionRequest setRemoteRepostories( List<ArtifactRepository> remoteRepostories )
+    public ArtifactResolutionRequest setRemoteRepositories( List<ArtifactRepository> remoteRepositories )
     {
-        this.remoteRepositories = remoteRepostories;
+        this.remoteRepositories = remoteRepositories;
 
         return this;
     }

File: maven-compat/src/main/java/org/apache/maven/artifact/resolver/DefaultArtifactResolver.java
Patch:
@@ -318,7 +318,7 @@ public ArtifactResolutionResult resolveTransitively( Set<Artifact> artifacts, Ar
             .setArtifactDependencies( artifacts )            
             .setManagedVersionMap( managedVersions )
             .setLocalRepository( localRepository )
-            .setRemoteRepostories( remoteRepositories )
+            .setRemoteRepositories( remoteRepositories )
             .setFilter( filter )
             .setListeners( listeners );
 

File: maven-core/src/main/java/org/apache/maven/DefaultProjectDependenciesResolver.java
Patch:
@@ -78,7 +78,7 @@ public Set<Artifact> resolve( MavenProject project, Collection<String> scopes, A
             .setResolveRoot( false )
             .setResolveTransitively( true )
             .setLocalRepository( localRepository )
-            .setRemoteRepostories( remoteRepositories )
+            .setRemoteRepositories( remoteRepositories )
             .setManagedVersionMap( project.getManagedVersionMap() )
             .setFilter( filter );
         // FIXME setTransferListener

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Patch:
@@ -131,7 +131,7 @@ public synchronized PluginDescriptor loadPlugin( Plugin plugin, ArtifactReposito
         ArtifactResolutionRequest request = new ArtifactResolutionRequest()
             .setArtifact( pluginArtifact )
             .setLocalRepository( localRepository )
-            .setRemoteRepostories( remoteRepositories )
+            .setRemoteRepositories( remoteRepositories )
             .setResolveTransitively( false );
         // FIXME setTransferListener
         ArtifactResolutionResult result = repositorySystem.resolve( request );
@@ -274,7 +274,7 @@ List<Artifact> getPluginArtifacts( Artifact pluginArtifact, Plugin pluginAsSpeci
             // So this in fact are overrides ... 
             .setArtifactDependencies( dependenciesToResolveForPlugin )
             .setLocalRepository( localRepository )
-            .setRemoteRepostories( remoteRepositories )
+            .setRemoteRepositories( remoteRepositories )
             .setFilter( filter )
             .setResolveRoot( true )
             .setResolveTransitively( true );

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java
Patch:
@@ -192,7 +192,7 @@ public MavenProject build( Artifact artifact, ProjectBuildingRequest configurati
         ArtifactResolutionRequest request = new ArtifactResolutionRequest()
             .setArtifact( artifact )
             .setLocalRepository( configuration.getLocalRepository() )
-            .setRemoteRepostories( configuration.getRemoteRepositories() );
+            .setRemoteRepositories( configuration.getRemoteRepositories() );
         // FIXME setTransferListener
         ArtifactResolutionResult result = repositorySystem.resolve( request );
 
@@ -258,7 +258,7 @@ public MavenProjectBuildingResult buildProjectWithDependencies( File pomFile, Pr
             .setResolveRoot( false )
             .setResolveTransitively( true )
             .setLocalRepository( request.getLocalRepository() )
-            .setRemoteRepostories( project.getRemoteArtifactRepositories() )
+            .setRemoteRepositories( project.getRemoteArtifactRepositories() )
             .setManagedVersionMap( project.getManagedVersionMap() );
         // FIXME setTransferListener
         ArtifactResolutionResult result;

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java
Patch:
@@ -175,7 +175,7 @@ private void populateRealm( ClassRealm realm, Artifact artifact, Set<Artifact> d
         request.setArtifactDependencies( dependencies );
         request.setResolveTransitively( true );
         request.setLocalRepository( localRepository );
-        request.setRemoteRepostories( remoteRepositories );
+        request.setRemoteRepositories( remoteRepositories );
         // FIXME setTransferListener
 
         ArtifactResolutionResult result = repositorySystem.resolve( request );

File: maven-core/src/main/java/org/apache/maven/project/RepositoryModelResolver.java
Patch:
@@ -130,7 +130,7 @@ public ModelSource resolveModel( String groupId, String artifactId, String versi
             ArtifactResolutionRequest request = new ArtifactResolutionRequest();
             request.setArtifact( artifactParent );
             request.setLocalRepository( localRepository );
-            request.setRemoteRepostories( remoteRepositories );
+            request.setRemoteRepositories( remoteRepositories );
             // FIXME setTransferListener
             ArtifactResolutionResult result = repositorySystem.resolve( request );
 

File: maven-core/src/test/java/org/apache/maven/repository/LegacyRepositorySystemTest.java
Patch:
@@ -78,7 +78,7 @@ public void testThatASystemScopedDependencyIsNotResolvedFromRepositories()
             .setArtifact( artifact )
             .setResolveRoot( true )
             .setResolveTransitively( true )
-            .setRemoteRepostories( Arrays.asList( new ArtifactRepository[]{ repositorySystem.createDefaultRemoteRepository() } ) )
+            .setRemoteRepositories( Arrays.asList( new ArtifactRepository[]{ repositorySystem.createDefaultRemoteRepository() } ) )
             .setLocalRepository( repositorySystem.createDefaultLocalRepository() );            
                             
         ArtifactResolutionResult result = repositorySystem.resolve( request );

File: maven-core/src/test/java/org/apache/maven/repository/ideworkspace/IdeWorkspaceRepositoryTest.java
Patch:
@@ -48,7 +48,7 @@ public void testResolveFromWorkspace()
         ArtifactResolutionRequest request = new ArtifactResolutionRequest();
         request.setArtifact( artifact );
         request.setLocalRepository( localRepository );
-        request.setRemoteRepostories( new ArrayList<ArtifactRepository>() );
+        request.setRemoteRepositories( new ArrayList<ArtifactRepository>() );
 
         repositorySystem.resolve( request );
 
@@ -69,7 +69,7 @@ public void testDelegatingLocalRepo()
         ArtifactResolutionRequest request = new ArtifactResolutionRequest();
         request.setArtifact( artifact );
         request.setLocalRepository( delegatingLocalArtifactRepository );
-        request.setRemoteRepostories( new ArrayList<ArtifactRepository>() );
+        request.setRemoteRepositories( new ArrayList<ArtifactRepository>() );
 
         repositorySystem.resolve( request );
 

File: maven-compat/src/main/java/org/apache/maven/artifact/metadata/ResolutionGroup.java
Patch:
@@ -33,10 +33,10 @@ public ResolutionGroup( Artifact pomArtifact, Set<Artifact> artifacts,
         super( pomArtifact, artifacts, resolutionRepositories );
     }
 
-    public ResolutionGroup( Artifact pomArtifact, Set<Artifact> artifacts, Map<String, Artifact> managedVersions,
-                            List<ArtifactRepository> resolutionRepositories )
+    public ResolutionGroup( Artifact pomArtifact, Artifact relocatedArtifact, Set<Artifact> artifacts,
+                            Map<String, Artifact> managedVersions, List<ArtifactRepository> resolutionRepositories )
     {
-        super( pomArtifact, artifacts, managedVersions, resolutionRepositories );
+        super( pomArtifact, relocatedArtifact, artifacts, managedVersions, resolutionRepositories );
     }
 
 }

File: maven-core/src/test/java/org/apache/maven/project/TestProjectBuilder.java
Patch:
@@ -35,7 +35,9 @@ public MavenProject build( Artifact artifact, ProjectBuildingRequest request )
         }
         if ( artifact.getFile() == null )
         {
-            return new MavenProject();
+            MavenProject project = new MavenProject();
+            project.setArtifact( artifact );
+            return project;
         }
         return build( artifact.getFile(), request );
     }

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingResult.java
Patch:
@@ -59,7 +59,7 @@ public DefaultProjectBuildingResult( MavenProject project, List<ModelProblem> pr
     /**
      * Creates a new result with the specified contents.
      * 
-     * @param projectId The
+     * @param projectId The identifier of the project, may be {@code null}.
      * @param pomFile The POM file from which the project was built, may be {@code null}.
      * @param problems The problems that were encouterned, may be {@code null}.
      */

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3203DefaultLifecycleExecIdTest.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;
 import org.apache.maven.it.AbstractMavenIntegrationTestCase;
 import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
@@ -40,10 +39,10 @@
 public class MavenITmng3203DefaultLifecycleExecIdTest
     extends AbstractMavenIntegrationTestCase
 {
+
     public MavenITmng3203DefaultLifecycleExecIdTest()
-        throws InvalidVersionSpecificationException
     {
-        super( "(2.1.99,)" );
+        super( "[2.2.0,)" );
     }
 
     public void testitMNG3203 ()

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4279WagonProviderFailoverTest.java
Patch:
@@ -46,6 +46,7 @@ public void testit()
         
         verifier.getCliOptions().add( "-s" );
         verifier.getCliOptions().add( "settings.xml" );
+        
         verifier.executeGoal( "deploy" );
         
         verifier.verifyErrorFreeLog();

File: maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorBuilder.java
Patch:
@@ -182,15 +182,15 @@ boolean matchPattern( ArtifactRepository originalRepository, String pattern )
                 // see if this is a negative match
                 if ( repo.length() > 1 && repo.startsWith( "!" ) )
                 {
-                    if ( originalId.equals( repo.substring( 1 ) ) )
+                    if ( repo.substring( 1 ).equals( originalId ) )
                     {
                         // explicitly exclude. Set result and stop processing.
                         result = false;
                         break;
                     }
                 }
                 // check for exact match
-                else if ( originalId.equals( repo ) )
+                else if ( repo.equals( originalId ) )
                 {
                     result = true;
                     break;

File: maven-core/src/main/java/org/apache/maven/project/DefaultModelBuildingListener.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.util.List;
 
-import org.apache.maven.artifact.InvalidRepositoryException;
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.artifact.resolver.ArtifactResolutionException;
 import org.apache.maven.model.Model;
@@ -114,7 +113,7 @@ public void buildExtensionsAssembled( ModelBuildingEvent event )
             remoteRepositories =
                 projectBuildingHelper.createArtifactRepositories( model.getRepositories(), remoteRepositories );
         }
-        catch ( InvalidRepositoryException e )
+        catch ( Exception e )
         {
             event.getProblems().addError( "Invalid artifact repository: " + e.getMessage(), e );
         }
@@ -124,7 +123,7 @@ public void buildExtensionsAssembled( ModelBuildingEvent event )
             pluginRepositories =
                 projectBuildingHelper.createArtifactRepositories( model.getPluginRepositories(), pluginRepositories );
         }
-        catch ( InvalidRepositoryException e )
+        catch ( Exception e )
         {
             event.getProblems().addError( "Invalid plugin repository: " + e.getMessage(), e );
         }

File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java
Patch:
@@ -1115,7 +1115,7 @@ private void populateDefaultConfigurationForPlugin( Plugin plugin, ArtifactRepos
             }
             catch ( PluginNotFoundException e )
             {
-                throw new LifecycleExecutionException( "Error resolving version for plugin " + plugin, e );
+                throw new LifecycleExecutionException( "Error resolving version for plugin " + plugin.getKey(), e );
             }
         }
 

File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java
Patch:
@@ -510,9 +510,9 @@ private ModelData readParentExternally( Model childModel, ModelBuildingRequest r
         catch ( UnresolvableModelException e )
         {
             problems.add( new ModelProblem( "Non-resolvable parent POM "
-                + ModelProblemUtils.toId( groupId, artifactId, version ) + " for POM "
-                + ModelProblemUtils.toSourceHint( childModel ) + ": " + e.getMessage(), ModelProblem.Severity.FATAL,
-                                            ModelProblemUtils.toSourceHint( childModel ), e ) );
+                + ModelProblemUtils.toId( groupId, artifactId, version ) + ": " + e.getMessage(),
+                                            ModelProblem.Severity.FATAL, ModelProblemUtils.toSourceHint( childModel ),
+                                            e ) );
             throw new ModelBuildingException( problems.getProblems() );
         }
 

File: maven-core/src/main/java/org/apache/maven/project/InvalidProjectModelException.java
Patch:
@@ -22,9 +22,10 @@
 import java.io.File;
 
 import org.apache.maven.artifact.InvalidRepositoryException;
-import org.apache.maven.model.validation.ModelValidationResult;
+import org.apache.maven.project.validation.ModelValidationResult;
 import org.codehaus.plexus.util.xml.pull.XmlPullParserException;
 
+@Deprecated
 public class InvalidProjectModelException
     extends ProjectBuildingException
 {

File: maven-compat/src/main/java/org/apache/maven/repository/LegacyRepositorySystem.java
Patch:
@@ -308,7 +308,7 @@ public ArtifactResolutionResult collect( ArtifactResolutionRequest request )
             // no ide workspace artifact resolution
         }
 
-        return artifactResolver.resolve( request );
+        return artifactResolver.collect( request );
     }
 
     public ArtifactResolutionResult resolve( ArtifactResolutionRequest request )

File: maven-core/src/main/java/org/apache/maven/DefaultArtifactFilterManager.java
Patch:
@@ -59,6 +59,7 @@ public class DefaultArtifactFilterManager
         artifacts.add( "maven-compat" );
         artifacts.add( "maven-core" );
         artifacts.add( "maven-error-diagnoser" );
+        artifacts.add( "maven-error-diagnostics" );
         artifacts.add( "maven-lifecycle" );
         artifacts.add( "maven-model" );
         artifacts.add( "maven-monitor" );
@@ -76,6 +77,7 @@ public class DefaultArtifactFilterManager
         artifacts.add( "wagon-provider-api" );
         artifacts.add( "wagon-file" );
         artifacts.add( "wagon-http-lightweight" );
+        artifacts.add( "wagon-http-shared" );
         artifacts.add( "wagon-manager" );
 
         DEFAULT_EXCLUSIONS = artifacts;

File: maven-plugin-api/src/main/java/org/apache/maven/plugin/descriptor/PluginDescriptor.java
Patch:
@@ -386,7 +386,7 @@ private InputStream getDescriptorStream( String descriptor )
         File pluginFile = ( pluginArtifact != null ) ? pluginArtifact.getFile() : null;
         if ( pluginFile == null )
         {
-            throw new IllegalStateException( "plugin main artifact has not been resolved" );
+            throw new IllegalStateException( "plugin main artifact has not been resolved for " + getId() );
         }
 
         if ( pluginFile.isFile() )

File: its/core-it-support/core-it-wagon/src/main/java/org/apache/maven/wagon/providers/coreit/CoreItHttpWagon.java
Patch:
@@ -108,6 +108,7 @@ public void closeConnection()
         File f = new File( "target/wagon-data" );
         try
         {
+            f.getParentFile().mkdirs();
             f.createNewFile();
         }
         catch ( IOException e )

File: maven-core/src/main/java/org/apache/maven/plugin/PluginNotFoundException.java
Patch:
@@ -46,8 +46,9 @@ public PluginNotFoundException( Plugin plugin, ArtifactNotFoundException e )
 
     public PluginNotFoundException( Plugin plugin, List<ArtifactRepository> remoteRepositories )
     {
-        super( "Plugin could not be found, please check its coordinates for typos", plugin.getGroupId(),
-               plugin.getArtifactId(), plugin.getVersion(), "maven-plugin", null, remoteRepositories, null );
+        super( "Plugin could not be found, please check its coordinates for typos and ensure the required"
+            + " plugin repositories are defined in the POM", plugin.getGroupId(), plugin.getArtifactId(),
+               plugin.getVersion(), "maven-plugin", null, remoteRepositories, null );
         this.plugin = plugin;
     }
 

File: maven-compat/src/main/java/org/apache/maven/repository/legacy/DefaultWagonManager.java
Patch:
@@ -346,6 +346,9 @@ public void getRemoteFile( ArtifactRepository repository, File destination, Stri
 
                 if ( downloaded )
                 {
+                    
+                    logger.info( "Downloaded " + repository.getUrl() + remotePath  );
+                    
                     // keep the checksum files from showing up on the download monitor...
                     if ( downloadMonitor != null )
                     {

File: maven-core/src/main/java/org/apache/maven/DefaultProjectDependenciesResolver.java
Patch:
@@ -81,7 +81,8 @@ public Set<Artifact> resolve( MavenProject project, Collection<String> scopes, A
             .setRemoteRepostories( remoteRepositories )
             .setManagedVersionMap( project.getManagedVersionMap() )
             .setFilter( filter );
-    
+        // FIXME setTransferListener
+        
         ArtifactResolutionResult result = repositorySystem.resolve( request );                
         resolutionErrorHandler.throwErrors( request, result );
         project.setArtifacts( result.getArtifacts() );

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Patch:
@@ -133,7 +133,7 @@ public synchronized PluginDescriptor loadPlugin( Plugin plugin, ArtifactReposito
             .setLocalRepository( localRepository )
             .setRemoteRepostories( remoteRepositories )
             .setResolveTransitively( false );
-
+        // FIXME setTransferListener
         ArtifactResolutionResult result = repositorySystem.resolve( request );
 
         try
@@ -275,6 +275,7 @@ List<Artifact> getPluginArtifacts( Artifact pluginArtifact, Plugin pluginAsSpeci
             .setFilter( filter )
             .setResolveTransitively( true );
             //.setResolveRoot( false );
+        //  FIXME setTransferListener
         
         ArtifactResolutionResult result = repositorySystem.resolve( request );
         resolutionErrorHandler.throwErrors( request, result );

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java
Patch:
@@ -231,7 +231,7 @@ public MavenProject build( Artifact artifact, ProjectBuildingRequest configurati
             .setArtifact( artifact )
             .setLocalRepository( configuration.getLocalRepository() )
             .setRemoteRepostories( configuration.getRemoteRepositories() );
-        
+        // FIXME setTransferListener
         ArtifactResolutionResult result = repositorySystem.resolve( request );
 
         try
@@ -307,7 +307,7 @@ public MavenProjectBuildingResult buildProjectWithDependencies( File pomFile, Pr
             .setLocalRepository( request.getLocalRepository() )
             .setRemoteRepostories( project.getRemoteArtifactRepositories() )
             .setManagedVersionMap( project.getManagedVersionMap() );
-
+        // FIXME setTransferListener
         ArtifactResolutionResult result;
 
         ClassLoader oldContextClassLoader = Thread.currentThread().getContextClassLoader();

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java
Patch:
@@ -187,7 +187,8 @@ private void populateRealm( ClassRealm realm, Artifact artifact, ArtifactReposit
         request.setFilter( artifactFilterManager.getCoreArtifactFilter() );
         request.setLocalRepository( localRepository );
         request.setRemoteRepostories( remoteRepositories );
-
+        // FIXME setTransferListener
+        
         ArtifactResolutionResult result = repositorySystem.resolve( request );
 
         resolutionErrorHandler.throwErrors( request, result );

File: maven-core/src/main/java/org/apache/maven/project/RepositoryModelResolver.java
Patch:
@@ -116,7 +116,7 @@ public ModelSource resolveModel( String groupId, String artifactId, String versi
         request.setArtifact( artifactParent );
         request.setLocalRepository( localRepository );
         request.setRemoteRepostories( remoteRepositories );
-
+        // FIXME setTransferListener
         ArtifactResolutionResult result = repositorySystem.resolve( request );
 
         try

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4254SelectableWagonProvidersTest.java
Patch:
@@ -50,7 +50,7 @@ public void testCliUsage()
 
         List cliOptions = new ArrayList();
         cliOptions.add( "-Dmaven.wagon.provider.http=coreit" );
-        cliOptions.add( "-X" );
+//        cliOptions.add( "-X" );
         cliOptions.add( "-V" );
         
         verifier.setCliOptions( cliOptions );
@@ -74,7 +74,7 @@ public void testSettingsUsage()
         List cliOptions = new ArrayList();
         cliOptions.add( "--settings" );
         cliOptions.add( "settings.xml" );
-        cliOptions.add( "-X" );
+//        cliOptions.add( "-X" );
         cliOptions.add( "-V" );
 
         verifier.setCliOptions( cliOptions );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4254SelectableWagonProvidersTest.java
Patch:
@@ -50,6 +50,7 @@ public void testCliUsage()
 
         List cliOptions = new ArrayList();
         cliOptions.add( "-Dmaven.wagon.provider.http=coreit" );
+        cliOptions.add( "-X" );
 
         verifier.setLogFileName( "log-cli.txt" );
         verifier.executeGoal( "deploy" );
@@ -70,6 +71,7 @@ public void testSettingsUsage()
         List cliOptions = new ArrayList();
         cliOptions.add( "--settings" );
         cliOptions.add( "settings.xml" );
+        cliOptions.add( "-X" );
 
         verifier.setLogFileName( "log-settings.txt" );
         verifier.executeGoal( "deploy" );

File: maven-core/src/main/java/org/apache/maven/execution/MavenExecutionRequest.java
Patch:
@@ -207,6 +207,8 @@ public interface MavenExecutionRequest
     MavenExecutionRequest setGlobalSettingsFile( File globalSettingsFile );
 
     MavenExecutionRequest addRemoteRepository( ArtifactRepository repository );
+    MavenExecutionRequest addPluginArtifactRepository( ArtifactRepository repository );
+    
     /**
      * Set a new list of remote repositories to use the execution request. This is necessary if you perform
      * transformations on the remote repositories being used. For example if you replace existing repositories with

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java
Patch:
@@ -140,8 +140,6 @@ private MavenProject build( File pomFile, boolean localProject, ProjectBuildingR
 
             project.setOriginalModel( result.getRawModel() );
 
-//            project.setRemoteArtifactRepositories( configuration.getRemoteRepositories() );
-//            project.setPluginArtifactRepositories( configuration.getPluginArtifactRepositories() );
             project.setRemoteArtifactRepositories( listener.getRemoteRepositories() );
             project.setPluginArtifactRepositories( listener.getPluginRepositories() );
 
@@ -153,7 +151,7 @@ private MavenProject build( File pomFile, boolean localProject, ProjectBuildingR
                 {
                     lifecycle.populateDefaultConfigurationForPlugins( model.getBuild().getPlugins(),
                                                                       configuration.getLocalRepository(),
-                                                                      configuration.getPluginArtifactRepositories() );
+                                                                      project.getPluginArtifactRepositories() );
                 }
             }
             catch ( LifecycleExecutionException e )

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2883LegacyRepoOfflineTest.java
Patch:
@@ -47,7 +47,7 @@ public class MavenITmng2883LegacyRepoOfflineTest
 
     public MavenITmng2883LegacyRepoOfflineTest()
     {
-        super( "(,3.0-alpha-1)" );
+        super( "(2.0.9,2.1.0-M1),(2.1.0-M1,3.0-alpha-1)" );
     }
 
     public void testParentUnresolvable()

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java
Patch:
@@ -140,6 +140,8 @@ private MavenProject build( File pomFile, boolean localProject, ProjectBuildingR
 
             project.setOriginalModel( result.getRawModel() );
 
+//            project.setRemoteArtifactRepositories( configuration.getRemoteRepositories() );
+//            project.setPluginArtifactRepositories( configuration.getPluginArtifactRepositories() );
             project.setRemoteArtifactRepositories( listener.getRemoteRepositories() );
             project.setPluginArtifactRepositories( listener.getPluginRepositories() );
 

File: maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java
Patch:
@@ -85,7 +85,8 @@ protected MavenExecutionRequest createMavenExecutionRequest( File pom )
         throws Exception
     {        
         MavenExecutionRequest request = new DefaultMavenExecutionRequest()
-            .setPom( pom ).setProjectPresent( true )
+            .setPom( pom )
+            .setProjectPresent( true )
             .setPluginGroups( Arrays.asList( new String[] { "org.apache.maven.plugins" } ) )
             .setLocalRepository( getLocalRepository() )
             .setRemoteRepositories( getRemoteRepositories() )

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java
Patch:
@@ -98,7 +98,7 @@ public ClassRealm createProjectRealm( Model model, ArtifactRepository localRepos
                                           List<ArtifactRepository> remoteRepositories )
         throws ArtifactResolutionException
     {
-        ClassRealm projectRealm = container.getContainerRealm();
+        ClassRealm projectRealm = null;
 
         Build build = model.getBuild();
 

File: maven-core/src/main/java/org/apache/maven/project/ProjectBuildingHelper.java
Patch:
@@ -55,7 +55,7 @@ List<ArtifactRepository> createArtifactRepositories( List<Repository> pomReposit
      * @param model The model to create the project realm for, must not be {@code null}
      * @param localRepository The local repository to use for artifact resolution, must not be {@code null}.
      * @param remoteRepositories The remote repositories to use for artifact resolution, must not be {@code null}.
-     * @return The project realm, never {@code null}.
+     * @return The project realm or {@code null} if the project uses no extensions.
      * @throws ArtifactResolutionException If any build extension could not be resolved.
      */
     ClassRealm createProjectRealm( Model model, ArtifactRepository localRepository,

File: maven-core/src/main/java/org/apache/maven/project/ProjectBuildingHelper.java
Patch:
@@ -55,7 +55,7 @@ List<ArtifactRepository> createArtifactRepositories( List<Repository> pomReposit
      * @param model The model to create the project realm for, must not be {@code null}
      * @param localRepository The local repository to use for artifact resolution, must not be {@code null}.
      * @param remoteRepositories The remote repositories to use for artifact resolution, must not be {@code null}.
-     * @return The project realm or {@code null} if no build extensions are present.
+     * @return The project realm, never {@code null}.
      * @throws ArtifactResolutionException If any build extension could not be resolved.
      */
     ClassRealm createProjectRealm( Model model, ArtifactRepository localRepository,

File: maven-embedder/src/test/java/org/apache/maven/embedder/MavenEmbedderTest.java
Patch:
@@ -73,8 +73,6 @@ protected void setUp()
         Configuration configuration = new SimpleConfiguration();
 
         mavenEmbedder = new MavenEmbedder( configuration );
-
-        System.err.println( "CHECK-CHECK: " + mavenEmbedder.getLocalRepository().getBasedir() );
     }
 
     protected void tearDown()

File: maven-embedder/src/test/java/org/apache/maven/embedder/MavenEmbedderTest.java
Patch:
@@ -79,6 +79,8 @@ protected void setUp()
         configuration.setUserSettingsFile( MavenEmbedder.DEFAULT_USER_SETTINGS_FILE );
 
         mavenEmbedder = new MavenEmbedder( configuration );
+
+        System.err.println( "CHECK-CHECK: " + mavenEmbedder.getLocalRepository().getBasedir() );
     }
 
     protected void tearDown()

File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java
Patch:
@@ -717,7 +717,7 @@ private void resolvePluginVersion( Plugin plugin, ArtifactRepository localReposi
         }
         else
         {
-            throw new PluginNotFoundException( plugin, null );
+            throw new PluginNotFoundException( plugin, remoteRepositories );
         }
     }
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2576MakeLikeReactorTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.maven.it.util.ResourceExtractor;
 
 /**
- * This is a test set for <a href="http://jira.codehaus.org/browse/MNG-4193">MNG-4193</a>.
+ * This is a test set for <a href="http://jira.codehaus.org/browse/MNG-2576">MNG-2576</a>.
  * 
  * @author Benjamin Bentmann
  */

File: maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java
Patch:
@@ -219,7 +219,7 @@ else if ( StringUtils.isNotEmpty( d.getSystemPath() ) )
 
                     validateStringNotEmpty( "build.plugins.plugin.groupId", result, false, p.getGroupId() );
 
-                    validateStringNotEmpty( "build.plugins.plugin.version", result, false, p.getVersion(), p.getKey() );
+                    validateStringNotEmpty( "build.plugins.plugin.version", result, true, p.getVersion(), p.getKey() );
                 }
 
                 validateResources( result, build.getResources(), "build.resources.resource" );
@@ -236,7 +236,7 @@ else if ( StringUtils.isNotEmpty( d.getSystemPath() ) )
 
                     validateStringNotEmpty( "reporting.plugins.plugin.groupId", result,false, p.getGroupId() );
 
-                    validateStringNotEmpty( "reporting.plugins.plugin.version", result, false, p.getVersion(), p.getKey() );
+                    validateStringNotEmpty( "reporting.plugins.plugin.version", result, true, p.getVersion(), p.getKey() );
                 }
             }
 

File: maven-model-builder/src/test/java/org/apache/maven/model/validation/DefaultModelValidatorTest.java
Patch:
@@ -240,10 +240,10 @@ public void testMissingPluginVersion()
     {
         ModelValidationResult result = validate( "missing-plugin-version-pom.xml" );
 
-        assertEquals( 1, result.getErrors().size() );
+        assertEquals( 1, result.getWarnings().size() );
 
         assertEquals( "'build.plugins.plugin.version' is missing for org.apache.maven.plugins:maven-it-plugin",
-                      result.getErrors().get( 0 ) );
+                      result.getWarnings().get( 0 ) );
     }
 
     public void testMissingRepositoryId()

File: maven-compat/src/main/java/org/apache/maven/project/validation/DefaultModelValidator.java
Patch:
@@ -44,7 +44,7 @@ public ModelValidationResult validate( Model model )
 
         ModelBuildingRequest request = new DefaultModelBuildingRequest().setLenientValidation( false );
 
-        for ( String message : modelValidator.validateEffectiveModel( model, request ).getMessages() )
+        for ( String message : modelValidator.validateEffectiveModel( model, request ).getErrors() )
         {
             result.addMessage( message );
         }

File: maven-model-builder/src/main/java/org/apache/maven/model/ModelData.java
Patch:
@@ -205,7 +205,7 @@ public String getId()
     @Override
     public String toString()
     {
-        return model.toString();
+        return String.valueOf( model );
     }
 
 }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4189UniqueVersionSnapshotTest.java
Patch:
@@ -33,7 +33,7 @@ public class MavenITmng4189UniqueVersionSnapshotTest
 {
     public MavenITmng4189UniqueVersionSnapshotTest()
     {
-        super( "[2.1.1,)" );
+        super( "[2.1.1,2.2.0),[2.2.1,)" );
     }
 
     public void testmng4189()

File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -131,14 +131,14 @@ else if ( debug || commandLine.hasOption( CLIManager.SHOW_VERSION ) )
 
         if ( cvr.isUserSettingsFilePresent() && !cvr.isUserSettingsFileParses() )
         {
-            //TODO: CLIReportingUtils.showError( "Error reading user settings: ", cvr.getUserSettingsException(), showErrors );
+            CLIReportingUtils.showError( "Error reading user settings: ", cvr.getUserSettingsException(), showErrors );
 
             return 1;
         }
 
         if ( cvr.isGlobalSettingsFilePresent() && !cvr.isGlobalSettingsFileParses() )
         {
-            //TODO: CLIReportingUtils.showError( "Error reading global settings: ", cvr.getGlobalSettingsException(), showErrors );
+            CLIReportingUtils.showError( "Error reading global settings: ", cvr.getGlobalSettingsException(), showErrors );
 
             return 1;
         }
@@ -159,7 +159,7 @@ else if ( debug || commandLine.hasOption( CLIManager.SHOW_VERSION ) )
         }
         catch ( MavenEmbedderException e )
         {
-            //TODO: CLIReportingUtils.showError( "Unable to start the embedder: ", e, showErrors );
+            CLIReportingUtils.showError( "Unable to start the embedder: ", e, showErrors );
 
             return 1;
         }

File: maven-core/src/test/java/org/apache/maven/project/DefaultMavenProjectBuilderTest.java
Patch:
@@ -111,7 +111,7 @@ protected ArtifactRepository getLocalRepository()
         throws Exception
     {
         ArtifactRepositoryLayout repoLayout = lookup( ArtifactRepositoryLayout.class, "legacy" );
-        ArtifactRepository r = new DefaultArtifactRepository( "local", "file://" + localRepoDir.getAbsolutePath(), repoLayout );
+        ArtifactRepository r = repositorySystem.createArtifactRepository( "local", "file://" + localRepoDir.getAbsolutePath(), repoLayout, null, null );
         return r;
     }
     

File: maven-core/src/test/java/org/apache/maven/project/ProjectClasspathTest.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.Iterator;
 
 import org.apache.maven.artifact.Artifact;
+import org.apache.maven.repository.RepositorySystem;
 
 public class ProjectClasspathTest
     extends AbstractMavenProjectTestCase
@@ -36,6 +37,8 @@ public void setUp()
 
         // the metadata source looks up the default impl, so we have to trick it
         getContainer().addComponent( projectBuilder, ProjectBuilder.class, "default" );
+        
+        repositorySystem = lookup( RepositorySystem.class );        
     }
    
     @Override

File: maven-repository/src/main/java/org/apache/maven/repository/DefaultMirrorBuilder.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.artifact.repository.ArtifactRepositoryFactory;
 import org.apache.maven.artifact.repository.DefaultArtifactRepository;
+import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;
 import org.codehaus.plexus.component.annotations.Component;
 import org.codehaus.plexus.component.annotations.Requirement;
 import org.codehaus.plexus.logging.Logger;
@@ -60,7 +61,7 @@ public void addMirror( String id, String mirrorOf, String url )
             logger.warn( "You are using a mirror that doesn't declare an <id/> element. Using \'" + id + "\' instead:\nId: " + id + "\nmirrorOf: " + mirrorOf + "\nurl: " + url + "\n" );
         }
 
-        ArtifactRepository mirror = new DefaultArtifactRepository( id, url, null );
+        ArtifactRepository mirror = repositoryFactory.createArtifactRepository( id, url, (ArtifactRepositoryLayout)null, null, null );
 
         if ( !mirrors.containsKey( mirrorOf ) )
         {

File: maven-repository/src/main/java/org/apache/maven/repository/DelegatingLocalArtifactRepository.java
Patch:
@@ -23,15 +23,15 @@
 import org.apache.maven.artifact.metadata.ArtifactMetadata;
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;
-import org.apache.maven.artifact.repository.DefaultArtifactRepository;
+import org.apache.maven.artifact.repository.MavenArtifactRepository;
 import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;
 
 /**
  * Delegating local artifact repository chains the reactor, IDE workspace
  * and user local repository.
  */
 public class DelegatingLocalArtifactRepository
-    extends DefaultArtifactRepository
+    extends MavenArtifactRepository
 {
     private LocalArtifactRepository buildReactor;
 

File: maven-repository/src/main/java/org/apache/maven/repository/LocalArtifactRepository.java
Patch:
@@ -21,9 +21,10 @@
 
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.repository.DefaultArtifactRepository;
+import org.apache.maven.artifact.repository.MavenArtifactRepository;
 
 public abstract class LocalArtifactRepository
-    extends DefaultArtifactRepository
+    extends MavenArtifactRepository
 {   
     public static final String IDE_WORKSPACE = "ide-workspace";
 

File: maven-core/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.io.File;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.List;
 
 import org.apache.maven.artifact.Artifact;
@@ -82,7 +83,8 @@ private void normalizeToArtifactRepositories( ProjectBuilderConfiguration config
                 {
                     try
                     {
-                        repos.add( repositorySystem.buildArtifactRepository( (Repository) repository ) );
+                        ArtifactRepository repo = repositorySystem.buildArtifactRepository( (Repository) repository );
+                        repos.addAll( repositorySystem.getMirrors( Arrays.asList( repo ) ) );
                     }
                     catch ( InvalidRepositoryException e )
                     {

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginCache.java
Patch:
@@ -222,7 +222,8 @@ private static boolean dependenciesEquals( List<Dependency> a, List<Dependency>
                 && eq( aD.getArtifactId(), bD.getArtifactId() ) //
                 && eq( aD.getVersion(), bD.getVersion() ) // 
                 && eq( aD.getType(), bD.getType() ) //
-                && eq( aD.getClassifier(), bD.getScope() );
+                && eq( aD.getClassifier(), bD.getClassifier() ) //
+                && eq( aD.getScope(), bD.getScope() );
 
             r &= exclusionsEquals( aD.getExclusions(), bD.getExclusions() );
 

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Patch:
@@ -480,7 +480,7 @@ private ClassRealm createPluginRealm( Plugin plugin )
             }
         }
 
-        throw new PluginManagerException( plugin, "Could not create ClassRealm", (Throwable) null );
+        throw new PluginManagerException( plugin, "Could not create ClassRealm for plugin " + baseRealmId, (Throwable) null );
     }
 
     private Mojo getConfiguredMojo( MavenSession session, MavenProject project, MojoExecution mojoExecution, ClassRealm pluginRealm )

File: maven-core/src/test/java/org/apache/maven/project/ProjectClasspathTest.java
Patch:
@@ -32,8 +32,10 @@ public class ProjectClasspathTest
     public void setUp()
         throws Exception
     {
-        //super.setUp();
         projectBuilder = lookup( ProjectBuilder.class, "classpath" );
+
+        // the metadata source looks up the default impl, so we have to trick it
+        getContainer().addComponent( projectBuilder, ProjectBuilder.class, "default" );
     }
    
     @Override

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4207PluginWithLog4JTest.java
Patch:
@@ -34,7 +34,7 @@ public class MavenITmng4207PluginWithLog4JTest
 
     public MavenITmng4207PluginWithLog4JTest()
     {
-        super( ALL_MAVEN_VERSIONS );
+        super( "[2.0.3,)" );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4007PlatformFileSeparatorTest.java
Patch:
@@ -79,8 +79,8 @@ public void testitMNG4007()
          * NOTE: The script source directory is deliberately excluded from the checks due to MNG-3741.
          */
 
-        // FIXME: MNG-3877
-        if ( matchesVersionRange( "(4,)" ) )
+        // MNG-3877
+        if ( matchesVersionRange( "[3.0-alpha-3,)" ) )
         {
             assertPath( modelProps.getProperty( "project.reporting.outputDirectory" ) );
         }

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -119,6 +119,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng4009InheritProfileEffectsTest.class );
         suite.addTestSuite( MavenITmng4008MergedFilterOrderTest.class );
         suite.addTestSuite( MavenITmng4007PlatformFileSeparatorTest.class );
+        suite.addTestSuite( MavenITmng4005UniqueDependencyKeyTest.class );
         suite.addTestSuite( MavenITmng4000MultiPluginExecutionsTest.class );
         suite.addTestSuite( MavenITmng3998PluginExecutionConfigTest.class );
         suite.addTestSuite( MavenITmng3983PluginResolutionFromProfileReposTest.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4190MirrorRepoMergingTest.java
Patch:
@@ -57,7 +57,7 @@ public void testit()
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng4190" );
         verifier.filterFile( "settings-template.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
-        verifier.getCliOptions().add( "-X -s" );
+        verifier.getCliOptions().add( "-s" );
         verifier.getCliOptions().add( "settings.xml" );
         verifier.executeGoal( "validate" );
         verifier.verifyErrorFreeLog();

File: maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java
Patch:
@@ -718,6 +718,7 @@ public ProjectBuildingRequest getProjectBuildingRequest()
             projectBuildingRequest.setInactiveProfileIds( getInactiveProfiles() );
             projectBuildingRequest.setProfiles( getProfiles() );
             projectBuildingRequest.setProcessPlugins( true );
+            projectBuildingRequest.setBuildStartTime( getStartTime() );
         }
 
         return projectBuildingRequest;

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java
Patch:
@@ -96,14 +96,14 @@ private MavenProject build( File pomFile, boolean localProject, ProjectBuildingR
         request.setActiveProfileIds( configuration.getActiveProfileIds() );
         request.setInactiveProfileIds( configuration.getInactiveProfileIds() );
         request.setExecutionProperties( configuration.getExecutionProperties() );
+        request.setBuildStartTime( configuration.getBuildStartTime() );
         request.setModelResolver( resolver );
 
         ModelBuildingResult result;
         try
         {
             if ( localProject )
             {
-                request.setBuildStartTime( new Date() );
                 result = modelBuilder.build( pomFile, request );
             }
             else

File: maven-core/src/main/java/org/apache/maven/lifecycle/LifecycleExecutor.java
Patch:
@@ -39,8 +39,6 @@
  */
 public interface LifecycleExecutor
 {    
-    List<String> getLifecyclePhases();
-       
     /**
      * Calculate the list of {@link org.apache.maven.plugin.descriptor.MojoDescriptor} objects to run for the selected lifecycle phase.
      * 

File: maven-core/src/main/java/org/apache/maven/plugin/PluginNotFoundException.java
Patch:
@@ -32,7 +32,7 @@
 public class PluginNotFoundException
     extends AbstractArtifactResolutionException
 {
-    private final Plugin plugin;
+    private Plugin plugin;
 
     public PluginNotFoundException( Plugin plugin, ArtifactNotFoundException e )
     {

File: maven-repository/src/main/java/org/apache/maven/repository/DelegatingLocalArtifactRepository.java
Patch:
@@ -64,10 +64,9 @@ public String pathOfLocalRepositoryMetadata( ArtifactMetadata metadata, Artifact
         return userLocalArtifactRepository.pathOfLocalRepositoryMetadata( metadata, userLocalArtifactRepository );
     }
 
-    // This ID is necessary of the metadata lookup doesn't work correctly.
     public String getId()
     {
-        return "delegating";
+        return "local";
     }
 
     @Override

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -91,6 +91,7 @@ public static Test suite()
         // suite.addTestSuite( MavenIT0109ReleaseUpdateTest.class );
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng4193UniqueRepoIdTest.class );
         suite.addTestSuite( MavenITmng4180PerDependencyExclusionsTest.class );
         suite.addTestSuite( MavenITmng4172EmptyDependencySetTest.class );
         suite.addTestSuite( MavenITmng4150VersionRangeTest.class );

File: maven-core/src/test/java/org/apache/maven/project/harness/PomTestWrapper.java
Patch:
@@ -20,7 +20,6 @@
  */
 
 import java.io.File;
-import java.io.IOException;
 import java.util.Iterator;
 
 import org.apache.commons.jxpath.JXPathContext;
@@ -43,7 +42,6 @@ public class PomTestWrapper
     }
 
     public PomTestWrapper( File pomFile, MavenProject mavenProject )
-        throws IOException
     {
         if ( mavenProject == null )
         {
@@ -55,7 +53,6 @@ public PomTestWrapper( File pomFile, MavenProject mavenProject )
     }
 
     public PomTestWrapper( MavenProject mavenProject )
-        throws IOException
     {
         if ( mavenProject == null )
         {

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Patch:
@@ -274,7 +274,7 @@ List<Artifact> getPluginArtifacts( Artifact pluginArtifact, Plugin pluginAsSpeci
             // defined dependencies and then the result is merged with the overrides. The overrides don't pass through the metadata source which is where the
             // Artifact.setFile( file ) method is called. We should eventually take care of this in the resolver.
             Artifact a = repositorySystem.createDependencyArtifact( dependencySpecifiedInProject );
-            if ( a.getScope().equals(  Artifact.SCOPE_SYSTEM ) )
+            if ( Artifact.SCOPE_SYSTEM.equals( a.getScope() ) )
             {
                 a.setFile( new File( dependencySpecifiedInProject.getSystemPath() ) );
             }

File: maven-core/src/test/java/org/apache/maven/project/PomConstructionTest.java
Patch:
@@ -1405,8 +1405,7 @@ public void testDependencyScopeInheritance()
 	{
 	    PomTestWrapper pom = buildPom( "dependency-scope-inheritance/sub" );
 	    String scope = (String) pom.getValue("dependencies[1]/scope");
-	    assertNull("Scope not null: " + scope, scope);
-	
+	    assertEquals( "compile", scope );
 	}   
     
     public void testDependencyScope()

File: maven-model-builder/src/main/java/org/apache/maven/model/DefaultModelBuilder.java
Patch:
@@ -175,6 +175,8 @@ private ModelBuildingResult build( ModelSource modelSource, File pomFile, ModelB
 
         managementInjector.injectManagement( resultModel, request );
 
+        modelNormalizer.injectDefaultValues( resultModel, request );
+
         if ( request.isProcessPlugins() )
         {
             pluginConfigurationExpander.expandPluginConfiguration( resultModel, request );

File: maven-model-builder/src/main/java/org/apache/maven/model/ModelBuildingException.java
Patch:
@@ -25,7 +25,9 @@
 import java.util.List;
 
 /**
- * Signals an error during model building.
+ * Signals one ore more errors during model building. The model builder tries to collect as many problems as possible
+ * before eventually failing to provide callers with rich error information. Use {@link #getProblems()} to query the
+ * details of the failure.
  * 
  * @author Benjamin Bentmann
  */

File: maven-model-builder/src/main/java/org/apache/maven/model/profile/ProfileActivationException.java
Patch:
@@ -57,6 +57,7 @@ public ProfileActivationException( String message, Profile profile, Throwable ca
     public ProfileActivationException( String message, Profile profile )
     {
         super( message );
+        this.profile = profile;
     }
 
     /**

File: maven-model-builder/src/main/java/org/apache/maven/model/path/PathTranslator.java
Patch:
@@ -31,7 +31,7 @@ public interface PathTranslator
 
     /**
      * Resolves the specified path against the given base directory. The resolved path will be absolute and uses the
-     * platform-specified file separator.
+     * platform-specific file separator.
      * 
      * @param path The path to resolve, may be {@code null}.
      * @param basedir The base directory to resolve relative paths against, may be {@code null}.

File: maven-core/src/main/java/org/apache/maven/project/RepositoryModelResolver.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.List;
-import java.util.Map;
 
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.repository.ArtifactRepository;

File: maven-model-builder/src/main/java/org/apache/maven/model/DefaultModelBuilder.java
Patch:
@@ -207,8 +207,8 @@ Collections.<String, Object> singletonMap( ModelReader.IS_STRICT,
         }
         catch ( ModelParseException e )
         {
-            throw new UnparseableModelException( "Failed to parse POM " + modelSource.getLocation(), e.getLineNumber(),
-                                                 e.getColumnNumber(), e );
+            throw new UnparseableModelException( "Failed to parse POM " + modelSource.getLocation() + ": "
+                + e.getMessage(), e.getLineNumber(), e.getColumnNumber(), e );
         }
         catch ( IOException e )
         {

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4167PluginAndCoordXFormPOMTest.java
Patch:
@@ -41,7 +41,7 @@ public class MavenITmng4167PluginAndCoordXFormPOMTest
     public MavenITmng4167PluginAndCoordXFormPOMTest()
         throws InvalidVersionSpecificationException
     {
-        super( "(2.1.0,)" ); // only test in 2.0.9+
+        super( "[2.2.0,)" );
     }
 
     public void testIt ()
@@ -54,8 +54,8 @@ public void testIt ()
         verifier = new Verifier( testDir.getAbsolutePath() );
         verifier.deleteArtifact( "org.apache.maven.its.mng4167", "mng-4167", "1", "pom" );
 
-		String specVersion = System.getProperty( "java.specification.version" );
-		
+        String specVersion = System.getProperty( "java.specification.version" );
+    
         verifier.deleteArtifact( "org.apache.maven.its.mng4167." + specVersion, "mng-4167-" + specVersion, "1-"
             + specVersion, "pom" );
         

File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java
Patch:
@@ -268,6 +268,8 @@ public MavenExecutionPlan calculateExecutionPlan( MavenSession session, String..
                 
                 MojoDescriptor mojoDescriptor = getMojoDescriptor( task, session );
 
+                requiredDependencyResolutionScope = mojoDescriptor.isDependencyResolutionRequired();
+
                 MojoExecution mojoExecution = new MojoExecution( mojoDescriptor, "default-" + mojoDescriptor.getGoal() );
                 
                 populateMojoExecutionConfiguration( project, mojoExecution, true );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0132PomLifecycleTest.java
Patch:
@@ -50,7 +50,7 @@ public void testit0132()
         verifier.deleteDirectory( "target" );
         verifier.setAutoclean( false );
         verifier.executeGoal( "deploy" );
-        if ( matchesVersionRange( "(2.0.1,)" ) )
+        if ( matchesVersionRange( "(2.0.1,3.0-alpha-1)" ) )
         {
             verifier.assertFilePresent( "target/site-attach-descriptor.txt" );
         }

File: maven-core/src/main/java/org/apache/maven/DefaultMaven.java
Patch:
@@ -100,7 +100,7 @@ public MavenExecutionResult execute( MavenExecutionRequest request )
             //TODO: We really need to get rid of this requirement in here. If we know there is no project present
             if ( projects.isEmpty() )
             {
-                MavenProject project = projectBuilder.buildStandaloneSuperProject( request.getProjectBuilderRequest() ); 
+                MavenProject project = projectBuilder.buildStandaloneSuperProject( request.getProjectBuildingRequest() ); 
                 projects.put( ArtifactUtils.key( project.getGroupId(), project.getArtifactId(), project.getVersion() ), project );
                 request.setProjectPresent( false );
             }
@@ -190,7 +190,7 @@ private Map<String,MavenProject> collectProjects( List<File> files, MavenExecuti
 
         for ( File file : files )
         {
-            MavenProject project = projectBuilder.build( file, request.getProjectBuilderRequest() );
+            MavenProject project = projectBuilder.build( file, request.getProjectBuildingRequest() );
             
             if ( ( project.getPrerequisites() != null ) && ( project.getPrerequisites().getMaven() != null ) )
             {

File: maven-core/src/main/java/org/apache/maven/execution/MavenExecutionRequest.java
Patch:
@@ -202,5 +202,5 @@ public interface MavenExecutionRequest
     File getUserToolchainsFile();
     MavenExecutionRequest setUserToolchainsFile( File userToolchainsFile );
 
-    ProjectBuildingRequest getProjectBuilderRequest();    
+    ProjectBuildingRequest getProjectBuildingRequest();    
 }

File: maven-core/src/main/java/org/apache/maven/execution/MavenSession.java
Patch:
@@ -132,9 +132,9 @@ public MavenProject getCurrentProject()
         return currentProject;
     }
 
-    public ProjectBuildingRequest getProjectBuilderRequest()
+    public ProjectBuildingRequest getProjectBuildingRequest()
     {
-        return request.getProjectBuilderRequest();
+        return request.getProjectBuildingRequest();
     }
     
     public List<String> getPluginGroups()

File: maven-embedder/src/main/java/org/apache/maven/embedder/MavenEmbedder.java
Patch:
@@ -278,7 +278,7 @@ private MavenProject readProject( File mavenProject, MavenExecutionRequest reque
     {
         getLogger().debug( "Building MavenProject instance: " + mavenProject );
 
-        return projectBuilder.build( mavenProject, request.getProjectBuilderRequest() );
+        return projectBuilder.build( mavenProject, request.getProjectBuildingRequest() );
     }
 
     /**
@@ -308,7 +308,7 @@ public MavenExecutionResult readProjectWithDependencies( MavenExecutionRequest r
 
         try
         {
-            MavenProjectBuildingResult projectBuildingResult = projectBuilder.buildProjectWithDependencies( request.getPom(), request.getProjectBuilderRequest() );
+            MavenProjectBuildingResult projectBuildingResult = projectBuilder.buildProjectWithDependencies( request.getPom(), request.getProjectBuildingRequest() );
             
             result.setProject( projectBuildingResult.getProject() );
 

File: maven-core/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -398,7 +398,7 @@ private MavenProject fromModelToMavenProject( Model model, File parentFile, Proj
     private List<Model> build( String projectId, File pomFile, ProjectBuilderConfiguration projectBuilderConfiguration )
         throws ProjectBuildingException, IOException
     {
-        Model mainModel = readModel( projectId, pomFile, true );
+        Model mainModel = readModel( projectId, pomFile, !projectBuilderConfiguration.istLenientValidation() );
         mainModel.setProjectDirectory( pomFile.getParentFile() );
 
         List<Model> domainModels = new ArrayList<Model>();

File: maven-core/src/main/java/org/apache/maven/DefaultProjectDependenciesResolver.java
Patch:
@@ -51,6 +51,7 @@ public Set<Artifact> resolve( MavenProject project, String scope, ArtifactReposi
         }
         
         ArtifactFilter scopeFilter = new ScopeArtifactFilter( scope );
+        // ArtifactFilter scopeFilter = new AndArtifactFilter( Arrays.asList( new ArtifactFilter[]{ new ScopeArtifactFilter( scope ), new ScopeArtifactFilter( Artifact.SCOPE_SYSTEM ) } ) );
         
         ArtifactFilter filter; 
 

File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java
Patch:
@@ -215,7 +215,7 @@ public void execute( MavenSession session )
             }
         }        
     }        
-        
+               
     // 1. Find the lifecycle given the phase (default lifecycle when given install)
     // 2. Find the lifecycle mapping that corresponds to the project packaging (jar lifecycle mapping given the jar packaging)
     // 3. Find the mojos associated with the lifecycle given the project packaging (jar lifecycle mapping for the default lifecycle)

File: maven-core/src/main/java/org/apache/maven/lifecycle/LifecycleExecutor.java
Patch:
@@ -32,7 +32,6 @@
 import org.apache.maven.plugin.PluginDescriptorParsingException;
 import org.apache.maven.plugin.PluginNotFoundException;
 import org.apache.maven.plugin.PluginResolutionException;
-import org.apache.maven.project.MavenProject;
 
 /**
  * @author Jason van  Zyl

File: maven-model-builder/src/main/java/org/apache/maven/model/io/DefaultModelReader.java
Patch:
@@ -72,7 +72,7 @@ public Model read( Reader input, Map<String, Object> options )
         }
         catch ( XmlPullParserException e )
         {
-            throw (IOException) new IOException( "Failed to parse POM" ).initCause( e );
+            throw new ModelParseException( e.getMessage(), e, e.getLineNumber(), e.getColumnNumber() );
         }
         finally
         {
@@ -95,7 +95,7 @@ public Model read( InputStream input, Map<String, Object> options )
         }
         catch ( XmlPullParserException e )
         {
-            throw (IOException) new IOException( "Failed to parse POM" ).initCause( e );
+            throw new ModelParseException( e.getMessage(), e, e.getLineNumber(), e.getColumnNumber() );
         }
         finally
         {

File: maven-compat/src/main/java/org/apache/maven/artifact/resolver/DefaultArtifactResolver.java
Patch:
@@ -86,10 +86,10 @@ public void resolve( Artifact artifact, List<ArtifactRepository> remoteRepositor
         resolve( artifact, remoteRepositories, localRepository, resolutionListener, false );
     }
 
-    public void resolveAlways( Artifact artifact, List<ArtifactRepository> remoteRepositories, ArtifactRepository localRepository, TransferListener downloadMonitor )
+    public void resolveAlways( Artifact artifact, List<ArtifactRepository> remoteRepositories, ArtifactRepository localRepository )
         throws ArtifactResolutionException, ArtifactNotFoundException
     {
-        resolve( artifact, remoteRepositories, localRepository, downloadMonitor, true );
+        resolve( artifact, remoteRepositories, localRepository, null, true );
     }
 
     private void resolve( Artifact artifact, List<ArtifactRepository> remoteRepositories, ArtifactRepository localRepository, TransferListener downloadMonitor, boolean force )

File: maven-core/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -356,14 +356,14 @@ private Model interpolateDomainModel( DomainModel domainModel, ProjectBuilderCon
     private MavenProject fromDomainModelToMavenProject( Model model, File parentFile, ProjectBuilderConfiguration config, File projectDescriptor )
         throws InvalidProjectModelException, IOException
     {
+        validateModel( model, projectDescriptor, config.istLenientValidation() );
+
         MavenProject project;
         String projectId = safeVersionlessKey( model.getGroupId(), model.getArtifactId() );
         try
         {
             project = new MavenProject( model, repositorySystem, this, config );
 
-            validateModel( model, projectDescriptor, config.istLenientValidation() );
-
             Artifact projectArtifact = repositorySystem.createArtifact( project.getGroupId(), project.getArtifactId(), project.getVersion(), null, project.getPackaging() );
             project.setArtifact( projectArtifact );
 

File: maven-core/src/main/java/org/apache/maven/project/MavenProject.java
Patch:
@@ -256,6 +256,8 @@ public MavenProject( Model model, RepositorySystem repositorySystem, MavenProjec
             }
         }
 
+        remoteArtifactRepositories = repositorySystem.getMirrors( remoteArtifactRepositories );
+
         if ( projectBuilderConfiguration.getRemoteRepositories() != null )
         {
             remoteArtifactRepositories.addAll( projectBuilderConfiguration.getRemoteRepositories() );

File: maven-core/src/test/java/org/apache/maven/project/inheritance/t07/ProjectInheritanceTest.java
Patch:
@@ -65,14 +65,14 @@ public void testDependencyManagement()
         Set set = project1.getArtifacts();
         assertNotNull("No artifacts", set);
         assertTrue("No Artifacts", set.size() > 0);
-        assertTrue("Set size should be 4, is " + set.size(), set.size() == 4 );
+        assertTrue("Set size should be 3, is " + set.size(), set.size() == 3 );
 
         Iterator iter = set.iterator();
 
         while (iter.hasNext())
         {
             Artifact artifact = (Artifact)iter.next();
-            assertFalse("", artifact.getArtifactId().equals("maven-test-d"));
+            assertFalse( "", artifact.getArtifactId().equals( "t07-d" ) );
             System.out.println("Artifact: " + artifact.getDependencyConflictId() + " " + artifact.getVersion() + " Optional=" + (artifact.isOptional() ? "true" : "false"));
             assertTrue("Incorrect version for " + artifact.getDependencyConflictId(), artifact.getVersion().equals("1.0"));
         }

File: maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java
Patch:
@@ -120,6 +120,8 @@ public ResolutionGroup retrieve( Artifact artifact, ArtifactRepository localRepo
                             dependencyArtifact = repositorySystem.createArtifact( d.getGroupId(), d.getArtifactId(), d.getVersion(), effectiveScope, d.getType() );
                         }
 
+                        dependencyArtifact.setOptional( d.isOptional() );
+
                         if ( Artifact.SCOPE_SYSTEM.equals( effectiveScope ) )
                         {
                             dependencyArtifact.setFile( new File( d.getSystemPath() ) );

File: maven-compat/src/test/java/org/apache/maven/artifact/resolver/ArtifactResolverTest.java
Patch:
@@ -231,6 +231,7 @@ public Artifact retrieveRelocatedArtifact( Artifact artifact,
             artifactResolver.resolveTransitively( set, projectArtifact, remoteRepositories(), localRepository(), mds );
 
         Iterator i = result.getArtifacts().iterator();
+        i.next();
         assertEquals( "n should be first", n, i.next() );
         assertEquals( "m should be second", m, i.next() );
 
@@ -243,6 +244,7 @@ public Artifact retrieveRelocatedArtifact( Artifact artifact,
             artifactResolver.resolveTransitively( set, projectArtifact, remoteRepositories(), localRepository(), mds );
 
         i = result.getArtifacts().iterator();
+        i.next();
         assertEquals( "m should be first", m, i.next() );
         assertEquals( "n should be second", n, i.next() );
     }

File: maven-core/src/main/java/org/apache/maven/ReactorArtifactRepository.java
Patch:
@@ -7,6 +7,7 @@
 import org.apache.maven.artifact.ArtifactUtils;
 import org.apache.maven.artifact.repository.DefaultArtifactRepository;
 import org.apache.maven.project.MavenProject;
+import org.apache.maven.repository.LocalArtifactRepository;
 
 /**
  * An implementation of a repository that knows how to search the Maven reactor for artifacts.

File: maven-repository/src/main/java/org/apache/maven/repository/LocalArtifactRepository.java
Patch:
@@ -1,11 +1,13 @@
-package org.apache.maven;
+package org.apache.maven.repository;
 
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.repository.DefaultArtifactRepository;
 
 public abstract class LocalArtifactRepository
     extends DefaultArtifactRepository
 {   
+    public static final String IDE_WORKSPACE = "ide-workspace";
+
     public abstract Artifact find( Artifact artifact );
     
     /** 

File: maven-repository/src/main/java/org/apache/maven/repository/UserLocalArtifactRepository.java
Patch:
@@ -1,11 +1,10 @@
-package org.apache.maven;
+package org.apache.maven.repository;
 
 import java.io.File;
 
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.metadata.ArtifactMetadata;
 import org.apache.maven.artifact.repository.ArtifactRepository;
-import org.apache.maven.artifact.repository.DefaultArtifactRepository;
 
 public class UserLocalArtifactRepository
     extends LocalArtifactRepository

File: maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java
Patch:
@@ -715,6 +715,7 @@ public ProjectBuilderConfiguration getProjectBuildingConfiguration()
             projectBuildingConfiguration.setExecutionProperties( getProperties() );
             projectBuildingConfiguration.setRemoteRepositories( getRemoteRepositories() );
             projectBuildingConfiguration.setActiveProfileIds( getActiveProfiles() );
+            projectBuildingConfiguration.setInactiveProfileIds( getInactiveProfiles() );
             projectBuildingConfiguration.setProfiles( getProfiles() );
             projectBuildingConfiguration.setProcessPlugins( true );
         }

File: maven-core/src/main/java/org/apache/maven/plugin/PluginManager.java
Patch:
@@ -46,13 +46,13 @@ public interface PluginManager
     // plugin configuration can't be parsed -- and this may be a result of client insertion of configuration
     // plugin component deps have a cycle -- this should be prevented for the most part but client code may inject an override component which itself has a cycle
     PluginDescriptor loadPlugin( Plugin plugin, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )
-        throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, CycleDetectedInPluginGraphException;
+        throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, CycleDetectedInPluginGraphException, InvalidPluginDescriptorException;
 
     MojoDescriptor getMojoDescriptor( String groupId, String artifactId, String version, String goal, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )
-        throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, CycleDetectedInPluginGraphException, MojoNotFoundException;
+        throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, CycleDetectedInPluginGraphException, MojoNotFoundException, InvalidPluginDescriptorException;
     
     MojoDescriptor getMojoDescriptor( Plugin plugin, String goal, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )
-        throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, CycleDetectedInPluginGraphException, MojoNotFoundException;
+        throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, CycleDetectedInPluginGraphException, MojoNotFoundException, InvalidPluginDescriptorException;
     
     // Why do we have a plugin execution exception as well?
     void executeMojo( MavenSession session, MojoExecution execution )

File: maven-core/src/test/java/org/apache/maven/project/harness/Xpp3DomPointerFactory.java
Patch:
@@ -32,7 +32,7 @@
  * @author Benjamin Bentmann
  * @version $Id: Xpp3DomPointerFactory.java 737056 2009-01-23 15:35:43Z bentmann $
  */
-class Xpp3DomPointerFactory
+public class Xpp3DomPointerFactory
     implements NodePointerFactory
 {
 

File: maven-core/src/main/java/org/apache/maven/execution/MavenExecutionRequest.java
Patch:
@@ -23,11 +23,9 @@
 import java.util.Date;
 import java.util.List;
 import java.util.Properties;
-import java.util.Set;
 
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;
-import org.apache.maven.model.Plugin;
 import org.apache.maven.model.Profile;
 import org.apache.maven.project.ProjectBuilderConfiguration;
 import org.apache.maven.settings.Settings;
@@ -171,6 +169,7 @@ public interface MavenExecutionRequest
     List<String> getPluginGroups();
     MavenExecutionRequest setPluginGroups( List<String> pluginGroups );
     MavenExecutionRequest addPluginGroup( String pluginGroup );
+    MavenExecutionRequest addPluginGroups( List<String> pluginGroups );
 
     boolean isUsePluginUpdateOverride();
     MavenExecutionRequest setUsePluginUpdateOverride( boolean usePluginUpdateOverride );

File: maven-core/src/main/java/org/apache/maven/exception/DefaultExceptionHandler.java
Patch:
@@ -94,7 +94,7 @@ else if ( exception instanceof ArtifactNotFoundException )
         }
         else if ( exception instanceof ArtifactResolutionException )
         {
-            message = ((MojoExecutionException)exception).getLongMessage();
+            message = exception.getMessage();
         }        
         
         // Mojo problems

File: maven-compat/src/main/java/org/apache/maven/artifact/resolver/DefaultArtifactResolver.java
Patch:
@@ -42,10 +42,8 @@
 import org.apache.maven.wagon.ResourceDoesNotExistException;
 import org.apache.maven.wagon.TransferFailedException;
 import org.apache.maven.wagon.events.TransferListener;
-import org.codehaus.plexus.PlexusContainer;
 import org.codehaus.plexus.component.annotations.Component;
 import org.codehaus.plexus.component.annotations.Requirement;
-import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
 import org.codehaus.plexus.logging.Logger;
 import org.codehaus.plexus.util.FileUtils;
 

File: maven-compat/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java
Patch:
@@ -139,7 +139,7 @@ public void putArtifactMetadata( File source, ArtifactMetadata artifactMetadata,
         putRemoteFile( repository, source, repository.pathOfRemoteRepositoryMetadata( artifactMetadata ), null );
     }
 
-    private void putRemoteFile( ArtifactRepository repository, File source, String remotePath, TransferListener downloadMonitor )
+    public void putRemoteFile( ArtifactRepository repository, File source, String remotePath, TransferListener downloadMonitor )
         throws TransferFailedException
     {
         String protocol = repository.getProtocol();
@@ -427,7 +427,7 @@ public void getArtifactMetadataFromDeploymentRepository( ArtifactMetadata metada
         getRemoteFile( repository, destination, remotePath, null, checksumPolicy, true );
     }
 
-    private void getRemoteFile( ArtifactRepository repository, File destination, String remotePath, TransferListener downloadMonitor, String checksumPolicy, boolean force )
+    public void getRemoteFile( ArtifactRepository repository, File destination, String remotePath, TransferListener downloadMonitor, String checksumPolicy, boolean force )
         throws TransferFailedException, ResourceDoesNotExistException
     {
         String protocol = repository.getProtocol();

File: maven-core/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -192,7 +192,7 @@ public MavenProject build( File pomFile, ProjectBuilderConfiguration configurati
             {
                 pluginConfigurationExpander.expandPluginConfiguration( project.getModel() );
 
-                lifecycle.populateDefaultConfigurationForPlugins( project.getModel().getBuild().getPlugins(), project, configuration.getLocalRepository() );
+                lifecycle.populateDefaultConfigurationForPlugins( project.getModel().getBuild().getPlugins(), configuration.getLocalRepository(), project.getRemoteArtifactRepositories() );
             }
         }
         catch ( IOException e )

File: maven-core/src/test/java/org/apache/maven/lifecycle/LifecycleExecutorTest.java
Patch:
@@ -6,7 +6,6 @@
 
 import org.apache.maven.AbstractCoreMavenComponentTestCase;
 import org.apache.maven.exception.ExceptionHandler;
-import org.apache.maven.exception.ExceptionSummary;
 import org.apache.maven.execution.MavenSession;
 import org.apache.maven.model.Plugin;
 import org.apache.maven.plugin.MojoExecution;
@@ -93,7 +92,7 @@ public void testPluginConfigurationCreation()
     {
         File pom = getProject( "project-with-additional-lifecycle-elements" );
         MavenSession session = createMavenSession( pom );
-        MojoDescriptor mojoDescriptor = lifecycleExecutor.getMojoDescriptor( "org.apache.maven.plugins:maven-remote-resources-plugin:1.0:process", session.getCurrentProject(), session.getLocalRepository() );
+        MojoDescriptor mojoDescriptor = lifecycleExecutor.getMojoDescriptor( "org.apache.maven.plugins:maven-remote-resources-plugin:1.0:process", session );
         Xpp3Dom dom = lifecycleExecutor.convert( mojoDescriptor );
         System.out.println( dom );
     }

File: maven-core/src/test/java/org/apache/maven/profiles/matchers/JdkMatcherTest.java
Patch:
@@ -19,7 +19,7 @@ public void testJdkMatch()
 		
 		JdkMatcher m = new JdkMatcher();
 		Properties props = new Properties();
-		props.setProperty("${java.version}", "1.5.0_16");
+		props.setProperty("java.version", "1.5.0_16");
 		
 		assertTrue(m.isMatch(p, props ));
 	}

File: maven-model-builder/src/main/java/org/apache/maven/model/interpolator/DefaultInterpolator.java
Patch:
@@ -55,7 +55,8 @@ public Model interpolateModel( Model model, Properties properties, File projectD
         List<InterpolatorProperty>  interpolatorProperties = new ArrayList<InterpolatorProperty>();
         for ( Entry<Object, Object> e : properties.entrySet() )
         {
-        	 interpolatorProperties.add( new InterpolatorProperty( (String) e.getKey(), (String) e.getValue(), PomInterpolatorTag.EXECUTION_PROPERTIES.toString() ) );
+            interpolatorProperties.add( new InterpolatorProperty( "${" + e.getKey() + "}", (String) e.getValue(),
+                                                                  PomInterpolatorTag.EXECUTION_PROPERTIES.toString() ) );
         }
 
         if ( !containsProjectVersion( interpolatorProperties ) )

File: maven-model-builder/src/main/java/org/apache/maven/profiles/matchers/JdkMatcher.java
Patch:
@@ -12,7 +12,7 @@ public class JdkMatcher
 	implements ProfileMatcher 
 	{
 	
-    private static final String JDK_VERSION = "${java.version}";
+    private static final String JDK_VERSION = "java.version";
 
 	public boolean isMatch(Profile profile,
 			Properties properties) {

File: maven-model-builder/src/main/java/org/apache/maven/profiles/matchers/PropertyMatcher.java
Patch:
@@ -51,7 +51,7 @@ public boolean isMatch( Profile profile, Properties properties )
 
         for ( Entry<Object, Object> ip : properties.entrySet() )
         {
-        	if(ip.getKey().equals("${" + name + "}"))
+        	if(ip.getKey().equals( name ))
         	{
         		return ((String) ip.getValue()).equals(value);
         	}         

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -302,7 +302,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng1349ChecksumFormatsTest.class );
         suite.addTestSuite( MavenITmng1323AntrunDependenciesTest.class );
         suite.addTestSuite( MavenITmng1233WarDepWithProvidedScopeTest.class );
-        suite.addTestSuite( MavenITmng1088ReactorDepResolutionTest.class );
+        suite.addTestSuite( MavenITmng1088ReactorPluginResolutionTest.class );
         suite.addTestSuite( MavenITmng1052PluginMngtConfigTest.class );
         suite.addTestSuite( MavenITmng1021EqualAttachmentBuildNumberTest.class );
         suite.addTestSuite( MavenITmng0985NonExecutedPluginMngtGoalsTest.class );

File: maven-embedder/src/test/java/org/apache/maven/embedder/MavenEmbedderBehaviorTest.java
Patch:
@@ -42,8 +42,8 @@ public void testThatTheLocalRepositoryIsTakenFromGlobalSettingsWhenUserSettingsA
 
         MavenEmbedder maven = new MavenEmbedder( configuration );
 
-        String expectedPath = ( new File( "/global/maven/local-repository" ) ).getCanonicalPath();
-        String actualPath = maven.getLocalRepository().getBasedir();
+        File expectedPath = new File( "/global/maven/local-repository" ).getCanonicalFile();
+        File actualPath = new File( maven.getLocalRepository().getBasedir() );
         assertEquals( expectedPath, actualPath );
 
         maven.stop();

File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java
Patch:
@@ -970,7 +970,9 @@ private void downloadProjectDependencies( MavenSession session, String scope )
     {
         MavenProject project = session.getCurrentProject();
 
-        Artifact artifact = repositorySystem.createArtifact( project.getGroupId(), project.getArtifactId(), project.getVersion(), null, project.getPackaging() );      
+        Artifact artifact =
+            repositorySystem.createProjectArtifact( project.getGroupId(), project.getArtifactId(), project.getVersion() );
+        artifact.setFile( project.getFile() );
         
         ArtifactFilter filter = new ScopeArtifactFilter( scope );
 

File: maven-embedder/src/test/java/org/apache/maven/embedder/MavenEmbedderTest.java
Patch:
@@ -383,7 +383,7 @@ public void testProjectReading()
 
         Set artifacts = result.getProject().getArtifacts();
 
-        assertEquals( 2, artifacts.size() );
+        assertEquals( 1, artifacts.size() );
 
         artifacts.iterator().next();
     }

File: maven-core/src/main/java/org/apache/maven/DefaultMaven.java
Patch:
@@ -126,7 +126,7 @@ public MavenExecutionResult execute( MavenExecutionRequest request )
         try
         {                        
             ProjectSorter projectSorter = new ProjectSorter( projects.values() );
-                        
+                                    
             session = new MavenSession( container, request, result, projectSorter.getSortedProjects() );            
         }
         catch ( CycleDetectedException e )
@@ -163,7 +163,7 @@ public MavenExecutionResult execute( MavenExecutionRequest request )
         }
 
         result.setTopologicallySortedProjects( session.getProjects() );
-
+        
         result.setProject( session.getTopLevelProject() );
 
         return result;

File: maven-core/src/main/java/org/apache/maven/execution/MavenSession.java
Patch:
@@ -71,8 +71,9 @@ public MavenSession( PlexusContainer container, MavenExecutionRequest request, M
         if ( projects.size() > 0 )
         {
             this.currentProject = projects.get( 0 );
+            this.topLevelProject = projects.get(  0 );
         }
-        this.projects = projects;        
+        this.projects = projects;     
     }    
         
     @Deprecated

File: maven-core/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -106,7 +106,7 @@ public class DefaultMavenProjectBuilder
 
     public MavenProject build( File pomFile, ProjectBuilderConfiguration configuration )
         throws ProjectBuildingException
-    {                
+    {
         MavenProject project = projectCache.get( pomFile.getAbsolutePath() );
                 
         if ( project != null )

File: maven-core/src/test/java/org/apache/maven/project/AbstractMavenProjectTestCase.java
Patch:
@@ -114,6 +114,7 @@ protected MavenProject getProjectWithDependencies( File pom )
         ProjectBuilderConfiguration configuration = new DefaultProjectBuilderConfiguration();
         configuration.setLocalRepository( getLocalRepository() );
         configuration.setRemoteRepositories( Arrays.asList( new ArtifactRepository[]{} ) ); 
+        configuration.setProcessPlugins( false );
 
         try
         {

File: maven-compat/src/test/java/org/apache/maven/artifact/resolver/ArtifactResolverTest.java
Patch:
@@ -42,8 +42,7 @@
 // the layout used for a particular artifact type.
 
 /**
- * @author <a href="mailto:jason@maven.org">Jason van Zyl</a>
- * @version $Id$
+ * @author Jason van Zyl
  */
 public class ArtifactResolverTest
     extends AbstractArtifactComponentTestCase

File: maven-core/src/main/java/org/apache/maven/DefaultMaven.java
Patch:
@@ -87,7 +87,7 @@ public MavenExecutionResult execute( MavenExecutionRequest request )
         
         MavenExecutionResult result = new DefaultMavenExecutionResult();
         
-        DelegatingLocalArtifactRepository delegatingLocalArtifactRepository = new DelegatingLocalArtifactRepository();
+        DelegatingLocalArtifactRepository delegatingLocalArtifactRepository = new DelegatingLocalArtifactRepository( request.getLocalRepository() );
         delegatingLocalArtifactRepository.addToEndOfSearchOrder( new UserLocalArtifactRepository( request.getLocalRepository() ) ); 
         
         if ( localArtifactRepositories != null && localArtifactRepositories.size() > 0 )

File: maven-core/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -37,8 +37,6 @@
 import org.apache.maven.model.DomainModel;
 import org.apache.maven.model.Model;
 import org.apache.maven.model.ModelEventListener;
-import org.apache.maven.model.Plugin;
-import org.apache.maven.model.PluginExecution;
 import org.apache.maven.model.ProcessorContext;
 import org.apache.maven.model.Profile;
 import org.apache.maven.model.interpolator.Interpolator;
@@ -58,7 +56,6 @@
 import org.codehaus.plexus.util.IOUtil;
 import org.codehaus.plexus.util.ReaderFactory;
 import org.codehaus.plexus.util.StringUtils;
-import org.codehaus.plexus.util.xml.Xpp3Dom;
 
 /**
  * @version $Id$

File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java
Patch:
@@ -647,7 +647,7 @@ private Plugin populatePluginWithInformationSpecifiedInLifecyclePhaseDefinition(
         return plugin;
     }
     
-    public Set<Plugin> populateDefaultConfigurationForPlugins( Set<Plugin> plugins, MavenProject project, ArtifactRepository localRepository ) 
+    public void populateDefaultConfigurationForPlugins( Collection<Plugin> plugins, MavenProject project, ArtifactRepository localRepository ) 
         throws LifecycleExecutionException
     {
         for( Plugin p : plugins )
@@ -661,8 +661,6 @@ public Set<Plugin> populateDefaultConfigurationForPlugins( Set<Plugin> plugins,
                 }
             }
         }
-        
-        return plugins;
     }    
     
     public Xpp3Dom getDefaultPluginConfiguration( String groupId, String artifactId, String version, String goal, MavenProject project, ArtifactRepository localRepository ) 

File: maven-core/src/main/java/org/apache/maven/lifecycle/LifecycleExecutor.java
Patch:
@@ -19,6 +19,7 @@
  * under the License.
  */
 
+import java.util.Collection;
 import java.util.List;
 import java.util.Set;
 
@@ -63,7 +64,7 @@ List<MojoExecution> calculateLifecyclePlan( String lifecyclePhase, MavenSession
     // Given a set of {@link org.apache.maven.Plugin} objects where the GAV is set we can lookup the plugin
     // descriptor and populate the default configuration.
     //
-    Set<Plugin> populateDefaultConfigurationForPlugins( Set<Plugin> plugins, MavenProject project, ArtifactRepository localRepository )
+    void populateDefaultConfigurationForPlugins( Collection<Plugin> plugins, MavenProject project, ArtifactRepository localRepository )
         throws LifecycleExecutionException;
     
     void execute( MavenSession session )

File: maven-core/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -176,9 +176,9 @@ public MavenProject build( File pomFile, ProjectBuilderConfiguration configurati
             // 3. POM values from per-execution configuration
             // These configuration sources are given in increasing order of dominance.
 
-            Set<Plugin> processedPlugins = lifecycle.populateDefaultConfigurationForPlugins( pluginsFromProject, project, configuration.getLocalRepository() );
+            lifecycle.populateDefaultConfigurationForPlugins( pluginsFromProject, project, configuration.getLocalRepository() );
 
-            for ( Plugin buildPlugin : processedPlugins )
+            for ( Plugin buildPlugin : pluginsFromProject )
             {
                 Xpp3Dom dom = (Xpp3Dom) buildPlugin.getConfiguration();
                 Plugin x = containsPlugin( buildPlugin, project.getModel().getBuild().getPlugins() );
@@ -205,7 +205,7 @@ public MavenProject build( File pomFile, ProjectBuilderConfiguration configurati
                 }
             }
 
-            project.getModel().getBuild().setPlugins( new ArrayList<Plugin>( processedPlugins ) );
+            project.getModel().getBuild().setPlugins( new ArrayList<Plugin>( pluginsFromProject ) );
         }
         catch ( IOException e )
         {

File: maven-core/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java
Patch:
@@ -19,6 +19,7 @@
  * under the License.
  */
 
+import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
 import java.util.Set;
@@ -71,11 +72,10 @@ public Set<Plugin> getPluginsBoundByDefaultToAllLifecycles( String packaging )
         return Collections.emptySet();
     }
 
-    public Set<Plugin> populateDefaultConfigurationForPlugins( Set<Plugin> plugins, MavenProject project,
+    public void populateDefaultConfigurationForPlugins( Collection<Plugin> plugins, MavenProject project,
                                                                ArtifactRepository localRepository )
         throws LifecycleExecutionException
     {
-        return plugins;
     }
 
 }

File: maven-compat/src/main/java/org/apache/maven/artifact/resolver/DefaultArtifactResolver.java
Patch:
@@ -382,7 +382,7 @@ public ArtifactResolutionResult resolve( ArtifactResolutionRequest request )
             }
             catch ( ComponentLookupException e )
             {
-                // Won't happen
+                throw new IllegalStateException( "Failed to lookup metadata source implementation", e );
             }
         }
         

File: maven-core/src/test/java/org/apache/maven/project/AbstractMavenProjectTestCase.java
Patch:
@@ -79,8 +79,8 @@ protected File getLocalRepositoryPath()
         return markerFile.getAbsoluteFile().getParentFile();
     }
 
-    protected File getFileForClasspathResource( String resource )
-        throws FileNotFoundException, URISyntaxException
+    protected static File getFileForClasspathResource( String resource )
+        throws FileNotFoundException
     {
         ClassLoader cloader = Thread.currentThread().getContextClassLoader();
 
@@ -91,7 +91,7 @@ protected File getFileForClasspathResource( String resource )
             throw new FileNotFoundException( "Unable to find: " + resource );
         }
 
-        return new File( new URI( resourceUrl.toString().replaceAll( " ", "%20" ) ) );
+        return new File( URI.create( resourceUrl.toString().replaceAll( " ", "%20" ) ) );
     }
 
     protected ArtifactRepository getLocalRepository()

File: maven-core/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -306,7 +306,7 @@ public MavenProjectBuildingResult buildProjectWithDependencies( File pomFile, Pr
         Artifact pomArtifact = repositorySystem.createProjectArtifact( project.getGroupId(), project.getArtifactId(), project.getVersion() );
         pomArtifact.setFile( pomFile );
 
-        ArtifactResolutionRequest request = new ArtifactResolutionRequest().setArtifact( pomArtifact ).setArtifactDependencies( project.getDependencyArtifacts() )
+        ArtifactResolutionRequest request = new ArtifactResolutionRequest().setArtifact( pomArtifact ).setResolveTransitively( true ).setArtifactDependencies( project.getDependencyArtifacts() )
             .setLocalRepository( configuration.getLocalRepository() ).setRemoteRepostories( project.getRemoteArtifactRepositories() ).setManagedVersionMap( project.getManagedVersionMap() );
 
         ArtifactResolutionResult result = repositorySystem.resolve( request );

File: maven-core/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -224,6 +224,7 @@ public MavenProject build( File pomFile, ProjectBuilderConfiguration configurati
         project.addCompileSourceRoot( build.getSourceDirectory() );
         project.addTestCompileSourceRoot( build.getTestSourceDirectory() );
         project.setFile( pomFile );
+        project.setActiveProfiles( projectProfiles );
 
         setBuildOutputDirectoryOnParent( project );
 

File: maven-core/src/test/java/org/apache/maven/project/PomConstructionTest.java
Patch:
@@ -1317,7 +1317,7 @@ public void testBooleanInterpolation()
         throws Exception
     {
         PomTestWrapper pom = buildPom( "boolean-interpolation" );
-        assertTrue ((Boolean) pom.getValue( "repositories[2]/releases/enabled" ) );     
+        assertTrue ((Boolean) pom.getValue( "repositories[1]/releases/enabled" ) );     
         assertTrue((Boolean) pom.getValue( "build/resources[1]/filtering" ) ); 
     }    
 

File: maven-embedder/src/main/java/org/apache/maven/embedder/execution/DefaultMavenExecutionRequestPopulator.java
Patch:
@@ -210,7 +210,7 @@ private void injectDefaultRepositories( MavenExecutionRequest request )
             }
         }
 
-        if ( !definedRepositories.contains( "central" ) )
+        if ( !definedRepositories.contains( RepositorySystem.DEFAULT_REMOTE_REPO_ID ) )
         {            
             try
             {

File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java
Patch:
@@ -183,8 +183,8 @@ private void executeGoal( String task, MavenSession session, MavenProject projec
             try
             {                
                 logger.info( executionDescription( mojoExecution ) );
-                System.out.println( "!!!");
-                System.out.println( mojoExecution.getConfiguration() );
+//                System.out.println( "!!!");
+//                System.out.println( mojoExecution.getConfiguration() );
                 pluginManager.executeMojo( session, mojoExecution );
             }
             catch ( PluginExecutionException e )

File: maven-core/src/main/java/org/apache/maven/DefaultMaven.java
Patch:
@@ -91,7 +91,7 @@ public MavenExecutionResult execute( MavenExecutionRequest request )
         MavenExecutionResult result = new DefaultMavenExecutionResult();
 
         MavenSession session = createMavenSession( request, result );        
-
+        
         if ( session.getReactorManager().hasMultipleProjects() )
         {
             //logger.info( "Reactor build order: " );

File: maven-core/src/test/java/org/apache/maven/lifecycle/LifecycleExecutorTest.java
Patch:
@@ -87,7 +87,7 @@ public void testLifecycleExecutionUsingADefaultLifecyclePhase()
     public void testLifecyclePluginsRetrievalForDefaultLifecycle()
         throws Exception
     {
-        List<Plugin> plugins = new ArrayList<Plugin>( lifecycleExecutor.lifecyclePlugins( "jar" ) );  
+        List<Plugin> plugins = new ArrayList<Plugin>( lifecycleExecutor.getPluginsBoundByDefaultToLifecycles( "jar" ) );  
         
         for( Plugin plugin : plugins )
         {

File: maven-embedder/src/main/java/org/apache/maven/embedder/MavenEmbedder.java
Patch:
@@ -585,7 +585,7 @@ public MavenExecutionResult execute( MavenExecutionRequest request )
 
             try
             {
-            	request.setPlugins(lifecycleExecutor.lifecyclePlugins("jar"));
+            	request.setPlugins(lifecycleExecutor.getPluginsBoundByDefaultToLifecycles("jar"));
                 request = populator.populateDefaults( request, configuration );
             }
             catch ( MavenEmbedderException e )

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3714ToolchainsCliOptionTest.java
Patch:
@@ -38,7 +38,7 @@ public class MavenITmng3714ToolchainsCliOptionTest
 {
     public MavenITmng3714ToolchainsCliOptionTest()
     {
-        super( "[2.2.0,)" );
+        super( "[2.3.0,)" );
     }
 
     /**

File: maven-embedder/src/main/java/org/apache/maven/embedder/MavenEmbedder.java
Patch:
@@ -274,13 +274,13 @@ public static Settings readSettings( File file )
      * mkleint: protected so that IDE integrations can selectively allow downloading artifacts
      * from remote repositories (if they prohibit by default on project loading)
      * @throws PluginLoaderException 
-     */
     protected void verifyPlugin( Plugin plugin, MavenProject project )
         throws ComponentLookupException, PluginLoaderException
     {
         MavenSession session = new MavenSession( request );
         pluginManager.loadPlugin( plugin, project, session );
     }
+     */
 
     // ----------------------------------------------------------------------
     // Project

File: maven-core/src/main/java/org/apache/maven/lifecycle/LifecycleExecutor.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.maven.BuildFailureException;
 import org.apache.maven.execution.MavenSession;
 import org.apache.maven.model.Plugin;
+import org.apache.maven.plugin.MojoExecutionException;
 import org.apache.maven.plugin.MojoFailureException;
 import org.apache.maven.plugin.descriptor.MojoDescriptor;
 import org.apache.maven.project.MavenProject;
@@ -47,8 +48,8 @@ public interface LifecycleExecutor
     List<MojoDescriptor> calculateLifecyclePlan( String lifecyclePhase, MavenSession session )
         throws LifecycleExecutionException;
         
-    Set<Plugin> lifecyclePlugins( String lifecycleId, String packaging );
+    Set<Plugin> lifecyclePlugins( String packaging );
     
     void execute( MavenSession session )
-        throws LifecycleExecutionException, MojoFailureException;
+        throws LifecycleExecutionException, MojoFailureException, MojoExecutionException;
 }

File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.maven.embedder.MavenEmbedderLogger;
 import org.apache.maven.execution.MavenExecutionRequest;
 import org.apache.maven.execution.MavenExecutionResult;
+import org.apache.maven.lifecycle.LifecycleExecutor;
 import org.apache.maven.plugin.MojoFailureException;
 import org.codehaus.plexus.classworlds.ClassWorld;
 
@@ -242,7 +243,7 @@ private Configuration buildEmbedderConfiguration( MavenExecutionRequest request,
         {
             configuration.setLocalRepository( new File( localRepoProperty ) );
         }
-
+        
         return configuration;
     }
 

File: maven-core/src/main/java/org/apache/maven/DefaultMaven.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.maven.execution.RuntimeInformation;
 import org.apache.maven.lifecycle.LifecycleExecutionException;
 import org.apache.maven.lifecycle.LifecycleExecutor;
+import org.apache.maven.plugin.MojoFailureException;
 import org.apache.maven.project.MavenProject;
 import org.apache.maven.project.MavenProjectBuilder;
 import org.apache.maven.project.ProjectBuildingException;
@@ -103,7 +104,7 @@ public MavenExecutionResult execute( MavenExecutionRequest request )
 
             return result;
         }
-        catch ( BuildFailureException e )
+        catch ( MojoFailureException e )
         {
             result.addException( e );
 

File: maven-core/src/main/java/org/apache/maven/execution/MavenExecutionResult.java
Patch:
@@ -46,7 +46,7 @@ public interface MavenExecutionResult
     // - project building exception
     // - invalid project model exception: list of markers
     // - xmlpull parser exception
-    List getExceptions();
+    List<Exception> getExceptions();
 
     MavenExecutionResult addException( Throwable e );
 

File: maven-core/src/main/java/org/apache/maven/lifecycle/LifecycleExecutor.java
Patch:
@@ -23,6 +23,7 @@
 
 import org.apache.maven.BuildFailureException;
 import org.apache.maven.execution.MavenSession;
+import org.apache.maven.plugin.MojoFailureException;
 import org.apache.maven.plugin.descriptor.MojoDescriptor;
 
 /**
@@ -44,5 +45,5 @@ List<MojoDescriptor> calculateLifecyclePlan( String lifecyclePhase, MavenSession
         throws LifecycleExecutionException;
         
     void execute( MavenSession session )
-        throws LifecycleExecutionException, BuildFailureException;
+        throws LifecycleExecutionException, MojoFailureException;
 }

File: maven-model-builder/src/main/java/org/apache/maven/model/processors/ModelProcessor.java
Patch:
@@ -146,8 +146,8 @@ else if (t.getUrl() != null)
              
         if(deps.size() > 0)
         {
-        	//t.setDependencies(deps);
-            t.getDependencies().addAll( deps );
+        	t.setDependencies(deps);
+           // t.getDependencies().addAll( deps );
         }  
         
         //Dependency Management

File: maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -544,7 +544,7 @@ private void validateModel( Model model, File pomFile )
         {
             for ( String s : (List<String>) validationResult.getMessages() )
             {
-                logger.info( s );
+                logger.error( s );
             }
             throw new InvalidProjectModelException( projectId, "Failed to validate POM", pomFile, validationResult );
         }

File: maven-model-builder/src/main/java/org/apache/maven/model/processors/DistributionManagementProcessor.java
Patch:
@@ -50,7 +50,7 @@ public void process( Object parent, Object child, Object target, boolean isChild
                 copy( p.getDistributionManagement(), t.getDistributionManagement(), false, c.getArtifactId(), p );
             }        	
             copy( c.getDistributionManagement(), t.getDistributionManagement(), isChildMostSpecialized,
-                  c.getArtifactId(), p );
+                  c.getArtifactId(), c );
         }
         else if ( p != null && p.getDistributionManagement() != null )
         {

File: maven-mercury/src/main/java/org/apache/maven/mercury/MavenDomainModel.java
Patch:
@@ -69,7 +69,7 @@ public List<ArtifactMetadata> getDependencyMetadata()
         	metadata.setArtifactId(d.getArtifactId());
         	metadata.setClassifier(d.getClassifier());
         	metadata.setGroupId(d.getGroupId());
-        	metadata.setScope( (d.getScope() == null) ? "runtime" : d.getScope());
+        	metadata.setScope( (d.getScope() == null) ? "compile" : d.getScope());
         	metadata.setVersion(d.getVersion());
         	metadata.setOptional(d.isOptional());
         	

File: maven-core/src/test/java/org/apache/maven/settings/PomConstructionWithSettingsTest.java
Patch:
@@ -56,12 +56,10 @@ public void testPomAndSettingsInterpolation() throws Exception
     	assertEquals("settings", pom.getValue( "properties/pomVsSettingsInterpolated" ) );
     }    
     
-    /**MNG-4107 */
     public void testRepositories() throws Exception
     {
     	PomTestWrapper pom = buildPom( "repositories" );
     	assertEquals("maven-core-it-0", pom.getValue( "repositories[1]/id" ));
-    	System.out.println(pom.getDomainModel().asString());
     }       
 
     private PomTestWrapper buildPom( String pomPath )

File: maven-model-builder/src/main/java/org/apache/maven/model/processors/ModelProcessor.java
Patch:
@@ -146,8 +146,8 @@ else if (t.getUrl() != null)
              
         if(deps.size() > 0)
         {
-        	t.setDependencies(deps);
-           // t.getDependencies().addAll( deps );
+        	//t.setDependencies(deps);
+            t.getDependencies().addAll( deps );
         }  
         
         //Dependency Management

File: maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -544,7 +544,7 @@ private void validateModel( Model model, File pomFile )
         {
             for ( String s : (List<String>) validationResult.getMessages() )
             {
-                logger.debug( s );
+                logger.info( s );
             }
             throw new InvalidProjectModelException( projectId, "Failed to validate POM", pomFile, validationResult );
         }

File: maven-project-builder/src/main/java/org/apache/maven/project/builder/DefaultInterpolator.java
Patch:
@@ -25,7 +25,9 @@
 import org.apache.maven.model.Model;
 import org.apache.maven.model.Reporting;
 import org.apache.maven.model.Resource;
+import org.codehaus.plexus.component.annotations.Component;
 
+@Component(role=Interpolator.class)
 public class DefaultInterpolator implements Interpolator {
 	
 	public String interpolateXmlString(String xml,

File: maven-core/src/main/java/org/apache/maven/lifecycle/binding/DefaultLifecycleBindingManager.java
Patch:
@@ -161,7 +161,6 @@ public LifecycleBindings getProjectCustomBindings( final MavenProject project, f
             for ( Iterator it = plugins.iterator(); it.hasNext(); )
             {
                 Plugin plugin = (Plugin) it.next();
-                BindingUtils.injectPluginManagementInfo( plugin, project );
 
                 PluginDescriptor pluginDescriptor = null;
 

File: maven-project/src/main/java/org/apache/maven/profiles/DefaultProfileManager.java
Patch:
@@ -50,7 +50,7 @@ public class DefaultProfileManager
     private static final ProfileMatcher defaultMatcher = new DefaultMatcher();
 
     private static final List<ProfileMatcher> matchers =
-        (List<ProfileMatcher>) Collections.unmodifiableList( Arrays.asList( new DefaultMatcher(), new PropertyMatcher(), new FileMatcher() ) );    
+        (List<ProfileMatcher>) Collections.unmodifiableList( Arrays.asList( new PropertyMatcher(), new FileMatcher() ) );    
 
     /**
      * the properties passed to the profile manager are the props that
@@ -207,7 +207,7 @@ public static List<Profile> getActiveProfilesFrom(ProjectBuilderConfiguration co
 	    {           
 	    	projectProfiles.addAll( externalProfileManager.getActiveProfiles() );    
 	    }
-	
+
 	    ProfileManager profileManager = new DefaultProfileManager( container, profileActivationContext );
 	    profileManager.addProfiles( model.getProfiles() );
 	    projectProfiles.addAll( profileManager.getActiveProfiles() ); 

File: maven-project/src/main/java/org/apache/maven/profiles/matchers/PropertyMatcher.java
Patch:
@@ -31,7 +31,7 @@ public boolean isMatch( Profile profile, List<InterpolatorProperty> properties )
         if (profile == null) {
             throw new IllegalArgumentException("profile: null");
         }
-
+        
         if(profile.getActivation() == null || profile.getActivation().getProperty() == null)
         {
             return false;

File: maven-project/src/main/java/org/apache/maven/project/MavenProjectBuilder.java
Patch:
@@ -40,6 +40,9 @@ MavenProjectBuildingResult buildProjectWithDependencies( File project, ProjectBu
 
     MavenProject buildFromRepository( Artifact artifact, List<ArtifactRepository> remoteRepositories, ArtifactRepository localRepository )
         throws ProjectBuildingException;
+    
+    MavenProject buildFromRepository(Artifact artifact, ProjectBuilderConfiguration configuration )
+		throws ProjectBuildingException;    
 
     MavenProject buildStandaloneSuperProject( ProjectBuilderConfiguration configuration )
         throws ProjectBuildingException;

File: maven-project-builder/src/main/java/org/apache/maven/project/processor/ModelProcessor.java
Patch:
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import java.net.URLDecoder;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
@@ -124,15 +123,15 @@ else if ( p != null )
         
         if ( c.getUrl() != null )
         {
-            t.setUrl(decodeUrl(c.getUrl()));         
+            t.setUrl( c.getUrl() );         
         }       
         else if(p != null && p.getUrl() != null)
         {        	
         	t.setUrl(  normalizeUriWithRelativePath(p.getUrl(), t.getArtifactId(), p) );
         }
         else if (t.getUrl() != null)
         {
-            t.setUrl( decodeUrl(t.getUrl() + "/" + t.getArtifactId()) );
+            t.setUrl( t.getUrl() + "/" + t.getArtifactId() );
         }
         
         //Dependencies

File: maven-compat/src/main/java/org/apache/maven/artifact/manager/WagonManager.java
Patch:
@@ -88,4 +88,6 @@ void getArtifactMetadataFromDeploymentRepository( ArtifactMetadata metadata, Art
 
     void addAuthenticationInfo( String repositoryId, String username, String password, String privateKey, String passphrase );
 
+    void addProxy( String protocol, String host, int port, String username, String password, String nonProxyHosts );
+
 }

File: maven-repository/src/main/java/org/apache/maven/repository/LegacyRepositorySystem.java
Patch:
@@ -398,6 +398,8 @@ public void addProxy( String protocol, String host, int port, String username, S
         proxyInfo.setPassword( password );
 
         proxies.put( protocol, proxyInfo );
+
+        wagonManager.addProxy( protocol, host, port, username, password, nonProxyHosts );
     }
 
     public void addAuthenticationInfo( String repositoryId, String username, String password, String privateKey,

File: maven-project-builder/src/main/java/org/apache/maven/project/processor/ProcessorContext.java
Patch:
@@ -546,7 +546,8 @@ public static Profile copyOfProfile(Profile profile)
         p.setDistributionManagement( profile.getDistributionManagement() );
         p.setProperties( profile.getProperties() );  
         p.setBuild( copyBuild(profile.getBuild()) );
-
+        p.setId( profile.getId() );
+        p.setActivation( profile.getActivation() );
         return p;
     }
     

File: maven-project/src/test/java/org/apache/maven/project/PomConstructionTest.java
Patch:
@@ -874,6 +874,7 @@ public void testMergedFilterOrder()
     }
 
     /** MNG-4027*/
+    /*
     public void testProfileInjectedDependencies()
         throws Exception
     {
@@ -885,7 +886,7 @@ public void testProfileInjectedDependencies()
         assertEquals( "b", pom.getValue( "dependencies[3]/artifactId" ) );
         assertEquals( "d", pom.getValue( "dependencies[4]/artifactId" ) );
     }
-
+*/
     /** MNG-4034 */
     public void testManagedProfileDependency()
         throws Exception

File: maven-project/src/main/java/org/apache/maven/profiles/ProfileContext.java
Patch:
@@ -45,7 +45,7 @@ public class ProfileContext
     private ProfileMatcher defaultMatcher = new DefaultMatcher();
 
     private List<ProfileMatcher> matchers =
-        Collections.unmodifiableList( Arrays.asList( (ProfileMatcher) new PropertyMatcher() ) );
+        Collections.unmodifiableList( Arrays.asList( new DefaultMatcher(), new PropertyMatcher() ) );
 
     public ProfileContext( List<Profile> profiles, Collection<String> activeProfileIds,
                            Collection<String> inactiveProfileIds, List<InterpolatorProperty> properties )

File: maven-project/src/test/java/org/apache/maven/profiles/manager/DefaultProfileManagerTest.java
Patch:
@@ -115,6 +115,7 @@ public void testShouldNotActivateDefaultProfile()
         assertEquals( 1, active.size() );
         assertEquals( "syspropActivated", ( (Profile) active.get( 0 ) ).getId() );
     }
+    
 
     public void testShouldNotActivateReversalOfPresentSystemProperty()
         throws Exception
@@ -204,7 +205,7 @@ public void testShouldOverrideAndDeactivateActiveProfile()
         assertNotNull( active );
         assertEquals( 0, active.size() );
     }
-
+/*
     public void testOsActivationProfile()
         throws Exception
     {
@@ -233,5 +234,6 @@ public void testOsActivationProfile()
         assertNotNull( active );
         assertEquals( 1, active.size() );
     }
+    */
 
 }

File: maven-project/src/test/java/org/apache/maven/project/processor/ProcessorContextTest.java
Patch:
@@ -62,7 +62,7 @@ public void testPackagingInheritance() throws IOException
         
         assertEquals("pom", child.getPackaging());
     }
-    
+    /*
     public void testProfilePluginManagement() throws IOException
     {
         Model model = new Model();
@@ -81,7 +81,7 @@ public void testProfilePluginManagement() throws IOException
         
         assertEquals(1, m.getModel().getBuild().getPluginManagement().getPlugins().size());
     }    
-    
+    */
     public void testInheritancePluginManagement() throws IOException
     {
         Model model = new Model();

File: maven-project/src/test/java/org/apache/maven/project/PomConstructionTest.java
Patch:
@@ -960,7 +960,7 @@ public void testCompleteModelWithoutParent()
         testCompleteModel( pom );
     }
 
-    /* FIXME
+    /* FIXME*/
     public void testCompleteModelWithParent()
         throws Exception
     {

File: maven-project/src/main/java/org/apache/maven/project/processor/ModelProcessor.java
Patch:
@@ -23,11 +23,9 @@
 import java.util.Collection;
 import java.util.List;
 
-import org.apache.maven.model.Build;
 import org.apache.maven.model.Dependency;
 import org.apache.maven.model.DependencyManagement;
 import org.apache.maven.model.Model;
-import org.apache.maven.model.Plugin;
 
 /*
  * hold original pom
@@ -103,7 +101,6 @@ public void process( Object parent, Object child, Object target, boolean isChild
             t.setPackaging( "jar" );
         }
         
-
         if ( isChildMostSpecialized )
         {
             t.setName( c.getName() );

File: maven-project/src/main/java/org/apache/maven/project/processor/PluginsManagementProcessor.java
Patch:
@@ -104,7 +104,7 @@ private static void copy(Plugin source, Plugin target)
         executions.addAll( target.getExecutions() );
         target.setExecutions( executions );
      
-        DependenciesProcessor proc = new DependenciesProcessor();
+        DependenciesProcessor proc = new DependenciesProcessor(true);
         if(target.getDependencies().isEmpty())
         {
             

File: maven-project/src/test/java/org/apache/maven/project/processor/DependenciesProcessorTest.java
Patch:
@@ -45,7 +45,7 @@ public void testParentCopy()
         assertEquals( 1, target.size() );
         assertEquals( "aid", target.get( 0 ).getArtifactId() );
     }
-
+/**FIX
     public void testDependencyOrder()
     {
         Dependency dependency1 = new Dependency();
@@ -65,7 +65,7 @@ public void testDependencyOrder()
         assertEquals( "aid1", target.get( 0 ).getArtifactId() );
         assertEquals( "aid", target.get( 1 ).getArtifactId() );
     }
-
+*/
     public void testJoin_NullVersion()
     {
         Dependency dependency1 = new Dependency();

File: maven-project/src/test/java/org/apache/maven/project/processor/DependencyProcessorTest.java
Patch:
@@ -40,7 +40,7 @@ public void testCopyParent()
         parent.setArtifactId( "aid2" );
         assertEquals( "aid", dependencies.get( 0 ).getArtifactId() );
     }
-
+/**FIX
     public void testJoinChildOverridesParent()
     {
         DependencyProcessor processor = new DependencyProcessor();
@@ -60,7 +60,7 @@ public void testJoinChildOverridesParent()
         child.setArtifactId( "aid3" );
         assertEquals( "aid", dependencies.get( 0 ).getArtifactId() );
     }
-
+*/
     public void testJoinElements()
     {
         DependencyProcessor processor = new DependencyProcessor();

File: maven-repository/src/main/java/org/apache/maven/repository/LegacyRepositorySystem.java
Patch:
@@ -59,7 +59,7 @@
 /**
  * @author Jason van Zyl
  */
-@Component(role = RepositorySystem.class)
+@Component(role = RepositorySystem.class, hint = "default" )
 public class LegacyRepositorySystem
     implements RepositorySystem
 {

File: maven-core/src/main/java/org/apache/maven/DefaultMaven.java
Patch:
@@ -40,7 +40,6 @@
 import org.apache.maven.lifecycle.LifecycleExecutionException;
 import org.apache.maven.lifecycle.LifecycleExecutor;
 import org.apache.maven.monitor.event.DefaultEventDispatcher;
-import org.apache.maven.monitor.event.DeprecationEventDispatcher;
 import org.apache.maven.monitor.event.EventDispatcher;
 import org.apache.maven.monitor.event.MavenEvents;
 import org.apache.maven.project.MavenProject;

File: maven-core/src/test/java/org/apache/maven/plugin/PluginParameterExpressionEvaluatorTest.java
Patch:
@@ -352,7 +352,7 @@ private static MavenSession createSession( PlexusContainer container,
             .setBaseDirectory( new File( "" ) )
             .setLocalRepository( repo );
 
-        return new MavenSession( container, request, null );
+        return new MavenSession( container, request, (List)null );
     }
 
     public void testLocalRepositoryExtraction()

File: maven-embedder/src/main/java/org/apache/maven/embedder/MavenEmbedder.java
Patch:
@@ -279,7 +279,7 @@ public static Settings readSettings( File file )
     protected void verifyPlugin( Plugin plugin, MavenProject project )
         throws ComponentLookupException, PluginLoaderException
     {
-        MavenSession session = new MavenSession( container, request, null );
+        MavenSession session = new MavenSession( container, request );
         pluginManager.loadPlugin( plugin, project, session );
     }
 

File: maven-project/src/main/java/org/apache/maven/project/processor/DependencyProcessor.java
Patch:
@@ -50,7 +50,6 @@ else if ( parent == null && child != null )
             {
                 isAdd = false;
             }
-            //Dependency targetDependency = new Dependency();
             copy( (Dependency) child, targetDependency, false );
             if(isAdd) t.add( targetDependency );
         }

File: maven-project/src/main/java/org/apache/maven/project/processor/ProcessorContext.java
Patch:
@@ -82,7 +82,7 @@ public static PomClassicDomainModel mergeProfilesIntoModel(Collection<Profile> p
         
         List<Processor> processors =
             Arrays.asList( (Processor) new BuildProcessor( new ArrayList<Processor>() ),
-                           (Processor) new ProfilesModuleProcessor(), new PropertiesProcessor(), new ParentProcessor(),
+                           (Processor) new ProfilesModuleProcessor(), new ProfilePropertiesProcessor(), new ParentProcessor(),
                            new OrganizationProcessor(), new MailingListProcessor(), new IssueManagementProcessor(),
                            new CiManagementProcessor(), new ReportingProcessor(), new RepositoriesProcessor(), 
                            new DistributionManagementProcessor());

File: maven-project/src/test/java/org/apache/maven/project/PomConstructionTest.java
Patch:
@@ -1176,23 +1176,23 @@ public void testProfileInjectionOrder()
     {
         PomTestWrapper pom =
             buildPomFromMavenProject( "profile-injection-order", "pom-a", "pom-b", "pom-e", "pom-c", "pom-d" );
+        
         assertEquals( "e", pom.getValue( "properties[1]/pomProperty" ) );
     }
     //*/
 
-    /* FIXME
+    /* FIXME*/
     public void testPropertiesInheritance()
         throws Exception
     {
         PomTestWrapper pom = buildPom( "properties-inheritance/sub" );
-
         assertEquals( "parent-property", pom.getValue( "properties/parentProperty" ) );
         assertEquals( "child-property", pom.getValue( "properties/childProperty" ) );
         assertEquals( "child-override", pom.getValue( "properties/overriddenProperty" ) );
     }
     //*/
 
-    /* FIXME: MNG-4102
+    /* FIXME: MNG-4102*/
     public void testInheritedPropertiesInterpolatedWithValuesFromChild()
         throws Exception
     {

File: maven-embedder/src/main/java/org/apache/maven/embedder/execution/DefaultMavenExecutionRequestPopulator.java
Patch:
@@ -27,7 +27,6 @@
 import org.apache.maven.artifact.InvalidRepositoryException;
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.embedder.Configuration;
-import org.apache.maven.embedder.MavenEmbedder;
 import org.apache.maven.embedder.MavenEmbedderException;
 import org.apache.maven.execution.MavenExecutionRequest;
 import org.apache.maven.model.Profile;
@@ -412,12 +411,12 @@ public ArtifactRepository createLocalRepository( MavenExecutionRequest request,
 
         if ( StringUtils.isEmpty( localRepositoryPath ) )
         {
-            localRepositoryPath = MavenEmbedder.defaultUserLocalRepository.getAbsolutePath();
+            localRepositoryPath = RepositorySystem.defaultUserLocalRepository.getAbsolutePath();
         }
 
         try
         {
-            return repositorySystem.createLocalRepository( localRepositoryPath, MavenEmbedder.DEFAULT_LOCAL_REPO_ID );
+            return repositorySystem.createLocalRepository( localRepositoryPath, RepositorySystem.DEFAULT_LOCAL_REPO_ID );
         }
         catch ( IOException e )
         {

File: maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -373,7 +373,7 @@ private MavenProject buildWithProfiles( Model model, ProjectBuilderConfiguration
 
     private Model inject( Profile profile, Model model ) throws IOException
     {
-        return ProcessorContext.mergeProfileIntoModel( Arrays.asList(profile), model, false ).getModel();
+        return ProcessorContext.mergeProfilesIntoModel( Arrays.asList(profile), model, false ).getModel();
     }
 
     private MavenProject readModelFromLocalPath( String projectId, File pomFile, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories, ProjectBuilderConfiguration config )
@@ -531,7 +531,7 @@ private PomClassicDomainModel buildModel( File pom, Collection<InterpolatorPrope
             {
                  ProfileContext profileContext1 = new ProfileContext( dm.getModel().getProfiles(), activeProfileIds,
                                                                      inactiveProfileIds, properties );
-                 profileModels.add(ProcessorContext.mergeProfileIntoModel( profileContext1.getActiveProfiles(), dm.getModel(), 
+                 profileModels.add(ProcessorContext.mergeProfilesIntoModel( profileContext1.getActiveProfiles(), dm.getModel(), 
                                                                            dm.isMostSpecialized() ));               
             }
             else

File: maven-project/src/main/java/org/apache/maven/project/processor/ProcessorContext.java
Patch:
@@ -71,7 +71,7 @@ public class ProcessorContext
                                                                          ProjectUri.Build.Filters.filter,
                                                                          ProjectUri.Reporting.outputDirectory ) ) );   
 
-    public static PomClassicDomainModel mergeProfileIntoModel(Collection<Profile> profiles, Model model, boolean isMostSpecialized) throws IOException
+    public static PomClassicDomainModel mergeProfilesIntoModel(Collection<Profile> profiles, Model model, boolean isMostSpecialized) throws IOException
     {
         List<Model> profileModels = new ArrayList<Model>();
         profileModels.add( model );

File: maven-project/src/test/java/org/apache/maven/project/processor/ProcessorContextTest.java
Patch:
@@ -43,7 +43,7 @@ public void testProfileModules() throws IOException
         Profile profile = new Profile();
         profile.setModules( Arrays.asList( "m1", "m2" ) );
         
-        PomClassicDomainModel m = ProcessorContext.mergeProfileIntoModel( Arrays.asList( profile ), model, false );
+        PomClassicDomainModel m = ProcessorContext.mergeProfilesIntoModel( Arrays.asList( profile ), model, false );
         
         assertEquals(2, m.getModel().getModules().size());
     }
@@ -77,7 +77,7 @@ public void testProfilePluginManagement() throws IOException
         profile.setBuild( b);
         
         
-        PomClassicDomainModel m = ProcessorContext.mergeProfileIntoModel( Arrays.asList( profile ), model, false );
+        PomClassicDomainModel m = ProcessorContext.mergeProfilesIntoModel( Arrays.asList( profile ), model, false );
         
         assertEquals(1, m.getModel().getBuild().getPluginManagement().getPlugins().size());
     }    

File: maven-project/src/main/java/org/apache/maven/project/processor/ModuleProcessor.java
Patch:
@@ -26,6 +26,9 @@
 public class ModuleProcessor
     extends BaseProcessor
 {
+    /**
+     * No parent
+     */
     public void process( Object parent, Object child, Object target, boolean isChildMostSpecialized )
     {
         super.process( parent, child, target, isChildMostSpecialized );

File: maven-project/src/main/java/org/apache/maven/project/processor/ProfilesModuleProcessor.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.project.processor;
+ package org.apache.maven.project.processor;
 
 /*
  * Licensed to the Apache Software Foundation (ASF) under one
@@ -35,8 +35,6 @@ public void process( Object parent, Object child, Object target, boolean isChild
         Model p = (Model) parent;
         List<String> modules = new ArrayList<String>();
 
-
-
         for ( String module : c.getModules() )
         {
             if(!modules.contains( module ))

File: maven-project/src/main/java/org/apache/maven/project/processor/DependencyManagementProcessor.java
Patch:
@@ -96,6 +96,8 @@ private static void copy( Dependency dependency, Dependency targetDependency )
                 }
             }
         }
+
+        targetDependency.setOptional( dependency.isOptional() );
     }
 
     private static boolean containsExclusion( Exclusion exclusion, List<Exclusion> exclusions )

File: maven-project/src/main/java/org/apache/maven/project/processor/DependencyProcessor.java
Patch:
@@ -164,6 +164,8 @@ private static void copy( Dependency source, Dependency targetDependency, boolea
                 }
             }
         }
+
+        targetDependency.setOptional( source.isOptional() );
     }
 
     private static boolean containsExclusion( Exclusion exclusion, List<Exclusion> exclusions )

File: maven-project/src/test/java/org/apache/maven/project/PomConstructionTest.java
Patch:
@@ -1006,9 +1006,7 @@ public void testCompleteModel()
         assertEquals( 1, ( (List<?>) pom.getValue( "mailingLists[1]/otherArchives" ) ).size() );
         assertEquals( "other-archive", pom.getValue( "mailingLists[1]/otherArchives[1]" ) );
 
-        /* FIXME
         assertEquals( "2.0.1", pom.getValue( "prerequisites/maven" ) );
-        //*/
 
         assertEquals( "http://project.url/trunk", pom.getValue( "scm/url" ) );
         assertEquals( "http://project.url/scm", pom.getValue( "scm/connection" ) );

File: maven-project/src/main/java/org/apache/maven/project/processor/ModelProcessor.java
Patch:
@@ -119,7 +119,7 @@ else if ( p != null )
             t.setInceptionYear( p.getInceptionYear() );
         }
         
-        if(t.getUrl() != null)
+        if ( c.getUrl() != null )
         {
             t.setUrl(c.getUrl());         
         }       

File: maven-project/src/main/java/org/apache/maven/project/processor/ProcessorContext.java
Patch:
@@ -171,8 +171,8 @@ public static PomClassicDomainModel build( List<DomainModel> domainModels,
         }
         
         List<Processor> processors =
-            Arrays.asList( (Processor) new BuildProcessor( new ArrayList<Processor>() ),
-                           (Processor) new ModuleProcessor(), new PropertiesProcessor(), new ParentProcessor(),
+            Arrays.<Processor> asList( new BuildProcessor( new ArrayList<Processor>() ),
+                           new ModuleProcessor(), new PropertiesProcessor(), new ParentProcessor(),
                            new OrganizationProcessor(), new MailingListProcessor(), new IssueManagementProcessor(),
                            new CiManagementProcessor(), new ReportingProcessor(), new RepositoriesProcessor(),
                            new DistributionManagementProcessor(), new LicensesProcessor(), new ScmProcessor());        

File: maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -459,7 +459,6 @@ protected PomClassicDomainModel buildModel( File pom, Collection<InterpolatorPro
         return buildModel( pom, interpolatorProperties, null, null, localRepository, remoteRepositories );
     }
 
-    @SuppressWarnings("unchecked")
     private PomClassicDomainModel buildModel( File pom, Collection<InterpolatorProperty> interpolatorProperties, Collection<String> activeProfileIds, Collection<String> inactiveProfileIds,
                                               ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )
         throws IOException
@@ -541,7 +540,7 @@ private PomClassicDomainModel buildModel( File pom, Collection<InterpolatorPrope
             }       
         }
 
-        PomClassicDomainModel transformedDomainModel = ProcessorContext.build( profileModels );
+        PomClassicDomainModel transformedDomainModel = ProcessorContext.build( profileModels, properties );
         // Lineage count is inclusive to add the POM read in itself.
         transformedDomainModel.setLineageCount( lineageCount + 1 );
         transformedDomainModel.setParentFile( parentFile );

File: maven-project/src/main/java/org/apache/maven/project/processor/ProcessorContext.java
Patch:
@@ -134,7 +134,8 @@ private static List<Model> convertDomainModelsToMavenModels(List<DomainModel> do
      * @return
      * @throws IOException
      */
-    public static PomClassicDomainModel build( List<DomainModel> domainModels )
+    public static PomClassicDomainModel build( List<DomainModel> domainModels,
+                                               List<InterpolatorProperty> interpolationProperties )
         throws IOException
     {  
         PomClassicDomainModel child = null;
@@ -159,7 +160,7 @@ public static PomClassicDomainModel build( List<DomainModel> domainModels )
         Model target = processModelsForInheritance(convertDomainModelsToMavenModels(domainModels), processors, true);
         
         PomClassicDomainModel model = convertToDomainModel( target, false );
-        interpolateModelProperties( model.getModelProperties(), new ArrayList<InterpolatorProperty>(), child );
+        interpolateModelProperties( model.getModelProperties(), interpolationProperties, child );
         List<ModelProperty> modelProperties;
         if ( child.getProjectDirectory() != null )
         {

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Patch:
@@ -182,7 +182,7 @@ public PluginDescriptor verifyPlugin( Plugin plugin, MavenProject project, Maven
         // TODO: this should be possibly outside
         // All version-resolution logic has been moved to DefaultPluginVersionManager.
         logger.debug( "Resolving plugin: " + plugin.getKey() + " with version: " + pluginVersion );
-        if ( ( pluginVersion == null ) || Artifact.LATEST_VERSION.equals( pluginVersion ) || Artifact.RELEASE_VERSION.equals( pluginVersion ) )
+        if ( pluginVersion == null )
         {
             logger.debug( "Resolving version for plugin: " + plugin.getKey() );
             pluginVersion = resolvePluginVersion( plugin.getGroupId(), plugin.getArtifactId(), project, session );
@@ -212,6 +212,8 @@ private PluginDescriptor verifyVersionedPlugin( Plugin plugin, MavenProject proj
             {
                 Artifact pluginArtifact = resolvePluginArtifact( plugin, project, session );
 
+                plugin.setVersion( pluginArtifact.getBaseVersion() );
+
                 addPlugin( plugin, pluginArtifact, project, session );
             }
             else

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3372DirectInvocationOfPluginsTest.java
Patch:
@@ -63,6 +63,8 @@ public void testitMNG3372()
 
         verifier.deleteArtifacts( "org.apache.maven.its.mng3372" );
 
+        verifier.getSystemProperties().setProperty( "updateReleaseInfo", "true" );
+
         verifier.executeGoals( Arrays.asList( new String[]{ "clean", "install" } ) );
 
         verifier = new Verifier( project.getAbsolutePath() );

File: maven-core/src/main/java/org/apache/maven/lifecycle/LifecycleExecutor.java
Patch:
@@ -32,7 +32,7 @@
  */
 public interface LifecycleExecutor
 {    
-    List<Lifecycle> getLifecyclePhases();
+    List<String> getLifecyclePhases();
     
     TaskValidationResult isTaskValid( String task, MavenSession session, MavenProject rootProject );
     

File: maven-lifecycle/src/test/java/org/apache/maven/lifecycle/LifecycleUtilsTest.java
Patch:
@@ -672,7 +672,7 @@ public void testCloneMojoBinding_VersionIsPropagated()
         assertEquals( "group", binding2.getGroupId() );
         assertEquals( "artifact", binding2.getArtifactId() );
         assertEquals( "version", binding2.getVersion() );
-        assertEquals( "default", binding2.getExecutionId() );
+        assertEquals( binding.getExecutionId(), binding2.getExecutionId() );
     }
 
     public void testAddMojoBinding_LifecycleBinding_AddOneMojoBindingToEmptyLifecycle()

File: maven-project-builder/src/main/java/org/apache/maven/project/builder/profile/JdkMatcher.java
Patch:
@@ -36,15 +36,15 @@ public boolean isMatch( ModelContainer modelContainer, List<InterpolatorProperty
                     {
                         if ( modelProperty.getResolvedValue().startsWith( "!" ) )
                         {
-                            return !version.equals( modelProperty.getResolvedValue().replaceFirst( "!", "" ) );
+                            return !version.startsWith( modelProperty.getResolvedValue().replaceFirst( "!", "" ) );
                         }
                         else if ( isRange( modelProperty.getResolvedValue() ) )
                         {
                             return isInRange( version, getRange( modelProperty.getResolvedValue() ) );
                         }
                         else
                         {
-                            return version.equals( modelProperty.getResolvedValue() );
+                            return version.startsWith( modelProperty.getResolvedValue() );
                         }
 
                     }

File: maven-project/src/main/java/org/apache/maven/project/processor/BuildProcessor.java
Patch:
@@ -13,6 +13,5 @@ public BuildProcessor( Collection<Processor> processors )
     public void process( Object parent, Object child, Object target, boolean isChildMostSpecialized )
     {
         super.process( parent, child, target, isChildMostSpecialized );
-
     }
 }

File: maven-project/src/main/java/org/apache/maven/profiles/DefaultProfileManager.java
Patch:
@@ -249,7 +249,7 @@ private boolean isActive( Profile profile, ProfileActivationContext context )
         List<ModelProperty> p;
         try
         {                                                                   
-            p = ModelMarshaller.marshallXmlToModelProperties(new ByteArrayInputStream(writer.getBuffer().toString().getBytes()),
+            p = ModelMarshaller.marshallXmlToModelProperties(new ByteArrayInputStream(writer.toString().getBytes( "UTF-8" )),
                     ProjectUri.Profiles.xUri, PomTransformer.URIS);
         } catch (IOException e) {
             throw new ProfileActivationException(e.getMessage());

File: maven-core/src/main/java/org/apache/maven/DefaultMaven.java
Patch:
@@ -171,8 +171,6 @@ public MavenExecutionResult execute( MavenExecutionRequest request )
 
         result.setProject( reactorManager.getTopLevelProject() );
 
-        result.setBuildPlans( session.getBuildPlans() );
-
         dispatcher.dispatchEnd( event, request.getBaseDirectory() );
 
         return result;

File: maven-core/src/main/java/org/apache/maven/lifecycle/LifecycleExecutor.java
Patch:
@@ -40,8 +40,6 @@
  */
 public interface LifecycleExecutor
 {
-    String ROLE = LifecycleExecutor.class.getName();
-
     /**
      * Provides a fail-fast way to check that all goals specified in {@link MavenExecutionRequest#getGoals()}
      * or {@link MavenSession#getGoals()} is valid.

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Patch:
@@ -123,6 +123,9 @@ public class DefaultPluginManager
         RESERVED_GROUP_IDS = rgids;
     }
 
+    @Requirement
+    private Logger logger;
+    
     @Requirement
     protected PlexusContainer container;
 
@@ -149,9 +152,6 @@ public class DefaultPluginManager
     @Requirement
     protected MavenProjectBuilder mavenProjectBuilder;
 
-    @Requirement
-    private Logger logger;
-
     @Requirement
     protected RepositoryMetadataManager repositoryMetadataManager;    
     

File: maven-compat/src/main/java/org/apache/maven/artifact/resolver/ArtifactResolutionResult.java
Patch:
@@ -86,7 +86,7 @@ public void addArtifact( Artifact artifact )
 
     public Set<Artifact> getArtifacts()
     {
-        return artifacts;
+        return ( artifacts != null ) ? artifacts : Collections.<Artifact> emptySet();
     }
 
     public void addRequestedArtifact( Artifact artifact )

File: maven-compat/src/main/java/org/apache/maven/artifact/resolver/DefaultArtifactResolver.java
Patch:
@@ -162,7 +162,8 @@ else if ( !artifact.isResolved() )
             {
                 if ( !isOnline() )
                 {
-                    throw new ArtifactNotFoundException( "The repository system is offline.", artifact );
+                    throw new ArtifactResolutionException( "The repository system is offline and the artifact "
+                        + artifact + " is not available in the local repository.", artifact );
                 }
 
                 try

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2883LegacyRepoOfflineTest.java
Patch:
@@ -110,7 +110,7 @@ public void testParentUnresolvable()
         }
 
         List missingMessages = new ArrayList();
-        missingMessages.add( "System is offline." );
+        missingMessages.add( " is offline" );
         missingMessages.add( "org.apache.maven.its.mng2883:parent:pom:1.0-SNAPSHOT" );
 
         List lines = verifier.loadFile( new File( testDir, verifier.getLogFileName() ), false );
@@ -303,7 +303,7 @@ public void testPluginUnresolvable()
         }
 
         List missingMessages = new ArrayList();
-        missingMessages.add( "System is offline." );
+        missingMessages.add( " is offline" );
         missingMessages.add( "org.apache.maven.its.mng2883:plugin" );
 
         List lines = verifier.loadFile( new File( testDir, verifier.getLogFileName() ), false );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4053PluginConfigAttributesTest.java
Patch:
@@ -36,7 +36,7 @@ public class MavenITmng4053PluginConfigAttributesTest
 
     public MavenITmng4053PluginConfigAttributesTest()
     {
-        super( ALL_MAVEN_VERSIONS );
+        super( "[2.0.3,)" );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3925MergedPluginExecutionOrderTest.java
Patch:
@@ -38,7 +38,7 @@ public class MavenITmng3925MergedPluginExecutionOrderTest
 
     public MavenITmng3925MergedPluginExecutionOrderTest()
     {
-        super( ALL_MAVEN_VERSIONS );
+        super( "[2.0.5,)" );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3288SystemScopeDirTest.java
Patch:
@@ -33,7 +33,7 @@ public class MavenITmng3288SystemScopeDirTest
 {
     public MavenITmng3288SystemScopeDirTest()
     {
-        super( ALL_MAVEN_VERSIONS );
+        super( "[2.0.9,)" );
     }
 
     /**
@@ -48,7 +48,7 @@ public void testitMNG3288()
         verifier.setAutoclean( false );
         try
         {
-            verifier.executeGoal( "org.apache.maven.its.plugins:maven-it-plugin-dependency-resolution::compile" );
+            verifier.executeGoal( "validate" );
             fail( "Usage of directory instead of file for system-scoped dependency did not fail dependency resolution" );
         }
         catch ( VerificationException e )

File: maven-project-builder/src/main/java/org/apache/maven/project/builder/rules/DependencyManagementDataSourceRule.java
Patch:
@@ -31,11 +31,11 @@ public void execute(ModelDataSource source) throws DataSourceException
 
                 for(ModelContainer mc : exclusionContainers)
                 {
-                    for(ModelContainer mc1 : exclusionContainers)
+                    for(ModelContainer mc1 : exclusionContainers.subList(exclusionContainers.indexOf(mc) + 1, exclusionContainers.size()))
                     {
                         if(!mc.equals(mc1)  && mc.containerAction(mc1).equals(ModelContainerAction.JOIN))
                         {
-                            exclusionSource.joinWithOriginalOrder(mc1, mc);
+                            exclusionSource.join(mc1, mc);
                         }
                     }
                 }

File: maven-project-builder/src/main/java/org/apache/maven/project/builder/rules/OverideConfigTransformerRule.java
Patch:
@@ -28,7 +28,7 @@ public List<ModelProperty> execute(List<ModelProperty> modelProperties) throws D
                 ModelContainerAction action = transformedReportContainer.containerAction( reportContainer );
                 if ( action.equals( ModelContainerAction.JOIN ) )
                 {
-                    source.join( transformedReportContainer, reportContainer );
+                    source.join( reportContainer, transformedReportContainer  );
                     break;
                 }
             }

File: maven-project/src/test/java/org/apache/maven/project/harness/PomTestWrapper.java
Patch:
@@ -71,6 +71,7 @@ public PomTestWrapper( File pomFile, PomClassicDomainModel domainModel )
         try {
             context = JXPathContext.newContext( new MavenXpp3Reader().read(domainModel.getInputStream()));
         } catch (XmlPullParserException e) {
+        	e.printStackTrace();
             throw new IOException(e.getMessage());
         }
     }

File: maven-compat/src/main/java/org/apache/maven/artifact/repository/ArtifactRepository.java
Patch:
@@ -38,12 +38,14 @@ public interface ArtifactRepository
     String pathOfLocalRepositoryMetadata( ArtifactMetadata metadata, ArtifactRepository repository );
 
     String getUrl();
+    void setUrl( String url );
 
     String getBasedir();
 
     String getProtocol();
 
     String getId();
+    void setId( String id );
 
     ArtifactRepositoryPolicy getSnapshots();
     void setSnapshotUpdatePolicy( ArtifactRepositoryPolicy policy );

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginLoader.java
Patch:
@@ -64,7 +64,7 @@ public PluginDescriptor loadPlugin( MojoBinding mojoBinding, MavenProject projec
      */
     public PluginDescriptor loadPlugin( Plugin plugin, MavenProject project, MavenSession session )
         throws PluginLoaderException
-    {
+    {               
         if ( plugin.getGroupId() == null )
         {
             plugin.setGroupId( PluginDescriptor.getDefaultPluginGroupId() );

File: maven-core/src/main/java/org/apache/maven/plugin/PluginManagerSupport.java
Patch:
@@ -17,7 +17,7 @@ public interface PluginManagerSupport
     Artifact resolvePluginArtifact( Plugin plugin, MavenProject project, MavenSession session )
         throws PluginManagerException, InvalidPluginException, PluginVersionResolutionException, ArtifactResolutionException, ArtifactNotFoundException;
 
-    MavenProject buildPluginProject( Plugin plugin, ArtifactRepository localRepository, List remoteRepositories )
+    MavenProject buildPluginProject( Plugin plugin, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )
         throws InvalidPluginException;
 
     /**

File: maven-repository/src/main/java/org/apache/maven/repository/MirrorBuilder.java
Patch:
@@ -1,8 +1,6 @@
 package org.apache.maven.repository;
 
-import java.util.LinkedHashSet;
 import java.util.List;
-import java.util.Set;
 
 import org.apache.maven.artifact.repository.ArtifactRepository;
 

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManagerSupport.java
Patch:
@@ -76,6 +76,9 @@ public class DefaultPluginManagerSupport
     public Artifact resolvePluginArtifact( Plugin plugin, MavenProject project, MavenSession session )
         throws PluginManagerException, InvalidPluginException, PluginVersionResolutionException, ArtifactResolutionException, ArtifactNotFoundException
     {
+        logger.debug( "Resolving plugin artifact " + plugin.getKey() + " from "
+            + project.getRemoteArtifactRepositories() );
+
         ArtifactRepository localRepository = session.getLocalRepository();
 
         MavenProject pluginProject = buildPluginProject( plugin, localRepository, project.getRemoteArtifactRepositories() );

File: maven-compat/src/main/java/org/apache/maven/artifact/manager/DefaultUpdateCheckManager.java
Patch:
@@ -67,6 +67,7 @@ public boolean isUpdateRequired( Artifact artifact, ArtifactRepository repositor
         // artifacts.
         if ( !artifact.isSnapshot() )
         {
+            getLogger().debug( "Skipping update check for non-snapshot artifact " + artifact );
             return false;
         }
 

File: maven-compat/src/main/java/org/apache/maven/artifact/repository/DefaultArtifactRepository.java
Patch:
@@ -176,7 +176,7 @@ public String toString()
         
         sb.append( "             id: " + getId() ).append(  "\n" );
         sb.append( "            url: " + getUrl() ).append(  "\n" );
-        sb.append( "         layout: " + layout != null ? layout.getId() : "none"  ).append(  "\n" );
+        sb.append( "         layout: " + ( layout != null ? layout.getId() : "none" ) ).append( "\n" );
         sb.append( "snapshot policy: [update => " + snapshots.getUpdatePolicy() ).append(  " ]\n" );
         sb.append( " release policy: [update => " + releases.getUpdatePolicy() ).append(  " ]\n" );        
         

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Patch:
@@ -1484,6 +1484,7 @@ protected void resolveTransitiveDependencies( MavenSession context,
 
         ArtifactResolutionRequest request = new ArtifactResolutionRequest()
             .setArtifact( artifact )
+            .setResolveRoot( false )
             .setArtifactDependencies( project.getDependencyArtifacts() )
             .setLocalRepository( context.getLocalRepository() )
             .setRemoteRepostories( project.getRemoteArtifactRepositories() )

File: maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java
Patch:
@@ -247,9 +247,11 @@ public void setInactiveProfiles( List<String> inactiveProfiles )
         this.inactiveProfiles = inactiveProfiles;
     }
 
-    public void setRemoteRepositories( List<ArtifactRepository> remoteRepositories )
+    public MavenExecutionRequest setRemoteRepositories( List<ArtifactRepository> remoteRepositories )
     {
         this.remoteRepositories = remoteRepositories;
+        
+        return this;
     }
 
     public void setProjectBuildingConfiguration( ProjectBuilderConfiguration projectBuildingConfiguration )

File: maven-repository/src/main/java/org/apache/maven/repository/MavenRepositorySystem.java
Patch:
@@ -127,4 +127,6 @@ public Artifact retrieveRelocatedArtifact( Artifact artifact, ArtifactRepository
     // Mirrors
     
     void addMirror( String id, String mirrorOf, String url );
+    
+    ArtifactRepository getMirror( ArtifactRepository repository );
 }

File: maven-repository/src/main/java/org/apache/maven/repository/MirrorBuilder.java
Patch:
@@ -5,7 +5,7 @@
 public interface MirrorBuilder
 {
     ArtifactRepository getMirror( ArtifactRepository repository );
-
+    
     void addMirror( String id, String mirrorOf, String url );
     
     void clearMirrors();    

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -91,6 +91,7 @@ public static Test suite()
         // suite.addTestSuite( MavenIT0109ReleaseUpdateTest.class );
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng4056ClassifierBasedDepResolutionFromReactorTest.class );
         suite.addTestSuite( MavenITmng4053PluginConfigAttributesTest.class );
         suite.addTestSuite( MavenITmng4040ProfileInjectedModulesTest.class );
         suite.addTestSuite( MavenITmng4036ParentResolutionFromSettingsRepoTest.class );

File: maven-compat/src/main/java/org/apache/maven/artifact/resolver/DefaultArtifactResolver.java
Patch:
@@ -408,8 +408,6 @@ public ArtifactResolutionResult resolve( ArtifactResolutionRequest request )
                 try
                 {
                     resolve( artifact, remoteRepositories, localRepository );
-
-                    result.addArtifact( artifact );
                 }
                 catch ( ArtifactNotFoundException anfe )
                 {

File: maven-compat/src/main/java/org/apache/maven/artifact/resolver/DefaultArtifactCollector.java
Patch:
@@ -171,6 +171,8 @@ public ArtifactResolutionResult collect( Set<Artifact> artifacts, Artifact origi
 
                                 set.add( node );
                                 
+                                // This is required right now.
+                                result.addArtifact( artifact );
                                 result.addRequestedArtifact( artifact );
                             }
                         }

File: maven-compat/src/test/java/org/apache/maven/artifact/resolver/ArtifactResolverTest.java
Patch:
@@ -157,8 +157,7 @@ public Artifact retrieveRelocatedArtifact( Artifact artifact,
         };
 
         ArtifactResolutionResult result =
-            artifactResolver.resolveTransitively( Collections.singleton( g ), projectArtifact, remoteRepositories(),
-                                                  localRepository(), mds );
+            artifactResolver.resolveTransitively( Collections.singleton( g ), projectArtifact, remoteRepositories(), localRepository(), mds );
 
         assertEquals( 2, result.getArtifacts().size() );
 

File: maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -346,7 +346,7 @@ private MavenProject buildWithProfiles( Model model, ProjectBuilderConfiguration
 
         for( Profile profile : projectProfiles )
         {
-            inject( profile, model );
+            model = inject( profile, model );
         }
 
         MavenProject project;

File: maven-compat/src/main/java/org/apache/maven/artifact/repository/DefaultArtifactRepository.java
Patch:
@@ -41,7 +41,7 @@ public class DefaultArtifactRepository
 
     private ArtifactRepositoryPolicy releases;
 
-    private boolean uniqueVersion;
+    private boolean uniqueVersion = true;
 
     private boolean blacklisted;
 

File: maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -206,15 +206,15 @@ public MavenProject buildFromRepository( Artifact artifact, List remoteArtifactR
         }
         catch ( ArtifactResolutionException e )
         {
-            throw new ProjectBuildingException( project.getId(), "Error resolving project artifact.", e );
+            throw new ProjectBuildingException( artifact.getId(), "Error resolving project artifact.", e );
         }
         catch ( ArtifactNotFoundException e )
         {
-            throw new ProjectBuildingException( project.getId(), "Error finding project artifact.", e );
+            throw new ProjectBuildingException( artifact.getId(), "Error finding project artifact.", e );
         }
         catch ( InvalidRepositoryException e )
         {
-            throw new ProjectBuildingException( project.getId(), "Error with repository specified in project.", e );
+            throw new ProjectBuildingException( artifact.getId(), "Error with repository specified in project.", e );
         }
 
         ProjectBuilderConfiguration config = new DefaultProjectBuilderConfiguration().setLocalRepository( localRepository );

File: maven-repository/src/test/java/org/apache/maven/repository/MirrorProcessorTest.java
Patch:
@@ -79,7 +79,7 @@ public void testMirrorWildcardLookup()
 
     }
 
-    public void xtestMirrorStopOnFirstMatch()
+    public void testMirrorStopOnFirstMatch()
     {
         //exact matches win first
         mirrorBuilder.addMirror( "a2", "a,b", "http://a2" );

File: maven-repository/src/main/java/org/apache/maven/repository/DefaultMirrorBuilder.java
Patch:
@@ -42,8 +42,6 @@ public void addMirror( String id, String mirrorOf, String url )
 
         ArtifactRepository mirror = new DefaultArtifactRepository( id, url, null );
 
-        System.out.println( mirror + " --> " + mirrorOf );
-
         mirrors.put( mirrorOf, mirror );
     }
         

File: its/core-it-support/core-it-plugins/maven-it-plugin-configuration/src/main/java/org/apache/maven/plugin/coreit/ConfigMojo.java
Patch:
@@ -64,7 +64,7 @@ public class ConfigMojo
     /**
      * The path to the properties file into which to save the mojo configuration.
      * 
-     * @parameter expression="${config.propertiesFile}
+     * @parameter expression="${config.propertiesFile}"
      */
     private File propertiesFile;
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -181,6 +181,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng3667ResolveDepsWithBadPomVersionTest.class );
         suite.addTestSuite( MavenITmng3652UserAgentHeaderTest.class );
         suite.addTestSuite( MavenITmng3642DynamicResourcesTest.class );
+        suite.addTestSuite( MavenITmng3641ProfileActivationWarningTest.class );
         suite.addTestSuite( MavenITmng3600DeploymentModeDefaultsTest.class );
         suite.addTestSuite( MavenITmng3599useHttpProxyForWebDAVTest.class );
         suite.addTestSuite( MavenITmng3586SystemScopePluginDependencyTest.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -239,6 +239,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng2739RequiredRepositoryElementsTest.class );
         suite.addTestSuite( MavenITmng2720SiblingClasspathArtifactsTest.class );
         suite.addTestSuite( MavenITmng2695OfflinePluginSnapshotsTest.class );
+        suite.addTestSuite( MavenITmng2690MojoLoadingErrorsTest.class );
         suite.addTestSuite( MavenITmng2668UsePluginDependenciesForSortingTest.class );
         suite.addTestSuite( MavenITmng2605BogusProfileActivationTest.class );
         suite.addTestSuite( MavenITmng2591MergeInheritedPluginConfigTest.class );

File: maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -257,7 +257,7 @@ public MavenProjectBuildingResult buildProjectWithDependencies( File projectDesc
             .setMetadataSource( repositorySystem );
 
         ArtifactResolutionResult result = repositorySystem.resolve( request );
-
+                
         project.setArtifacts( result.getArtifacts() );
 
         return new MavenProjectBuildingResult( project, result );

File: maven-project/src/main/java/org/apache/maven/project/MavenProject.java
Patch:
@@ -1705,8 +1705,7 @@ public Set<Artifact> createArtifacts( ArtifactFactory artifactFactory, String in
                                 ArtifactFilter dependencyFilter )
         throws InvalidDependencyVersionException
     {
-        return MavenMetadataSource.createArtifacts( artifactFactory, getDependencies(), inheritedScope,
-                                                    dependencyFilter, this );
+        return MavenMetadataSource.createArtifacts( artifactFactory, getDependencies(), inheritedScope, dependencyFilter, this );
     }
 
     public void addProjectReference( MavenProject project )

File: maven-project/src/test/java/org/apache/maven/project/TestArtifactResolver.java
Patch:
@@ -62,7 +62,7 @@ public class TestArtifactResolver
 
     @Requirement
     private MavenRepositorySystem repositorySystem;
-    
+        
     static class Source
         implements ArtifactMetadataSource
     {

File: maven-project/src/main/java/org/apache/maven/repository/LegacyMavenRepositorySystem.java
Patch:
@@ -487,8 +487,10 @@ public void enableLogging( Logger logger )
     public void resolve( Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )
         throws ArtifactResolutionException, ArtifactNotFoundException
     {
+        /* FIXME: Not sure what this was meant to do here but right now it screws up several ITs
         File artifactFile = new File( localRepository.getBasedir(), localRepository.pathOf( artifact ) );
         artifact.setFile( artifactFile );
+        //*/
         artifactResolver.resolve( artifact, remoteRepositories, localRepository );
     }    
     

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2820PomCommentsTest.java
Patch:
@@ -37,7 +37,7 @@ public class MavenITmng2820PomCommentsTest
     public MavenITmng2820PomCommentsTest()
     {
         // FIXME: Get this passing again for 2.1.0
-        super( "[2.0.5,2.1.0),(2.1.0,)" );
+        super( "[2.0.5,)" );
     }
 
     /**

File: maven-core/src/main/java/org/apache/maven/plugin/version/DefaultPluginVersionManager.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.Iterator;
 import java.util.List;
 
-import org.apache.maven.RepositorySystem;
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.ArtifactUtils;
 import org.apache.maven.artifact.metadata.ArtifactMetadataRetrievalException;
@@ -40,6 +39,7 @@
 import org.apache.maven.project.MavenProject;
 import org.apache.maven.project.MavenProjectBuilder;
 import org.apache.maven.project.ProjectBuildingException;
+import org.apache.maven.repository.MavenRepositorySystem;
 import org.codehaus.plexus.component.annotations.Component;
 import org.codehaus.plexus.component.annotations.Requirement;
 import org.codehaus.plexus.logging.AbstractLogEnabled;
@@ -51,7 +51,7 @@ public class DefaultPluginVersionManager
     implements PluginVersionManager
 {
     @Requirement
-    private RepositorySystem repositoryTools;
+    private MavenRepositorySystem repositoryTools;
 	
     @Requirement
     private MavenProjectBuilder mavenProjectBuilder;

File: maven-embedder/src/main/java/org/apache/maven/embedder/MavenEmbedder.java
Patch:
@@ -31,7 +31,6 @@
 import java.util.List;
 
 import org.apache.maven.Maven;
-import org.apache.maven.RepositorySystem;
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.artifact.resolver.ArtifactNotFoundException;
@@ -73,6 +72,7 @@
 import org.apache.maven.project.ProjectBuildingException;
 import org.apache.maven.reactor.MavenExecutionException;
 import org.apache.maven.reactor.MissingModuleException;
+import org.apache.maven.repository.MavenRepositorySystem;
 import org.apache.maven.settings.Settings;
 import org.apache.maven.settings.SettingsConfigurationException;
 import org.apache.maven.settings.io.xpp3.SettingsXpp3Reader;
@@ -137,7 +137,7 @@ public class MavenEmbedder
 
     private MavenXpp3Writer modelWriter;
 
-    private RepositorySystem repositoryTools;
+    private MavenRepositorySystem repositoryTools;
     
     private Maven maven;
 
@@ -659,7 +659,7 @@ private void start( Configuration configuration )
 
             pluginRepository = container.lookup( PluginRepository.class );
 
-            repositoryTools = container.lookup( RepositorySystem.class );
+            repositoryTools = container.lookup( MavenRepositorySystem.class );
             
             // This is temporary as we can probably cache a single request and use it for default values and
             // simply cascade values in from requests used for individual executions.

File: maven-embedder/src/main/java/org/apache/maven/embedder/execution/DefaultMavenExecutionRequestPopulator.java
Patch:
@@ -26,7 +26,6 @@
 import java.util.Properties;
 
 import org.apache.maven.Maven;
-import org.apache.maven.RepositorySystem;
 import org.apache.maven.artifact.InvalidRepositoryException;
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;
@@ -44,6 +43,7 @@
 import org.apache.maven.profiles.activation.DefaultProfileActivationContext;
 import org.apache.maven.profiles.activation.ProfileActivationContext;
 import org.apache.maven.realm.DefaultMavenRealmManager;
+import org.apache.maven.repository.MavenRepositorySystem;
 import org.apache.maven.settings.MavenSettingsBuilder;
 import org.apache.maven.settings.Mirror;
 import org.apache.maven.settings.Proxy;
@@ -86,7 +86,7 @@ public class DefaultMavenExecutionRequestPopulator
     private MavenSettingsBuilder settingsBuilder;
 
     @Requirement
-    private RepositorySystem mavenTools;
+    private MavenRepositorySystem mavenTools;
 
     // 2009-02-12 Oleg: this component is defined in maven-core components.xml
     // because it already has another declared (not generated) component

File: maven-project/src/main/java/org/apache/maven/profiles/MavenProfilesBuilder.java
Patch:
@@ -29,8 +29,6 @@
  */
 public interface MavenProfilesBuilder
 {
-    String ROLE = MavenProfilesBuilder.class.getName();
-
     ProfilesRoot buildProfiles( File basedir )
         throws IOException, XmlPullParserException;
 }

File: maven-project/src/test/java/org/apache/maven/project/builder/PomConstructionTest.java
Patch:
@@ -24,7 +24,6 @@
 import java.io.FileInputStream;
 import java.util.*;
 
-import org.apache.maven.RepositorySystem;
 import org.apache.maven.profiles.DefaultProfileManager;
 import org.apache.maven.profiles.activation.DefaultProfileActivationContext;
 import org.apache.maven.profiles.activation.ProfileActivationContext;
@@ -35,6 +34,7 @@
 import org.apache.maven.artifact.repository.layout.DefaultRepositoryLayout;
 import org.apache.maven.project.harness.PomTestWrapper;
 import org.apache.maven.project.*;
+import org.apache.maven.repository.MavenRepositorySystem;
 import org.codehaus.plexus.PlexusTestCase;
 import org.codehaus.plexus.util.xml.pull.XmlPullParserException;
 
@@ -52,7 +52,7 @@ public class PomConstructionTest
 
     private MavenProjectBuilder mavenProjectBuilder;
 
-    private RepositorySystem mavenTools;
+    private MavenRepositorySystem mavenTools;
 
     private PomArtifactResolver pomArtifactResolver;
 
@@ -67,7 +67,7 @@ protected void setUp()
         testMixinDirectory = new File( getBasedir(), BASE_MIXIN_DIR );
         mavenProjectBuilder = lookup( MavenProjectBuilder.class );
         projectBuilder = lookup( ProjectBuilder.class );
-        mavenTools = lookup( RepositorySystem.class );
+        mavenTools = lookup( MavenRepositorySystem.class );
         pomArtifactResolver = new PomArtifactResolver()
         {
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -217,7 +217,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng3217InterPluginDependencyTest.class );
         suite.addTestSuite( MavenITmng3106ProfileMultipleActivatorsTest.class );
         suite.addTestSuite( MavenITmng3099SettingsProfilesWithNoPomTest.class );
-        suite.addTestSuite( MavenITmng3057VersionExprTransformations.class );
+        suite.addTestSuite( MavenITmng3057VersionExprTransformationsTest.class );
         suite.addTestSuite( MavenITmng3052DepRepoAggregationTest.class );
         suite.addTestSuite( MavenITmng3023ReactorDependencyResolutionTest.class );
         suite.addTestSuite( MavenITmng3012CoreClassImportTest.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3057VersionExprTransformationsTest.java
Patch:
@@ -42,11 +42,11 @@
  * @author jdcasey
  * 
  */
-public class MavenITmng3057VersionExprTransformations
+public class MavenITmng3057VersionExprTransformationsTest
     extends AbstractMavenIntegrationTestCase
 {
 
-    public MavenITmng3057VersionExprTransformations()
+    public MavenITmng3057VersionExprTransformationsTest()
     {
         // TODO: port to 3.x
         super( "[2.1.0,)" ); // only test in 2.1.0+

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Patch:
@@ -1478,8 +1478,6 @@ protected void resolveTransitiveDependencies( MavenSession context,
         throws ArtifactResolutionException, ArtifactNotFoundException,
         InvalidDependencyVersionException
     {
-        ArtifactFilter filter = new ScopeArtifactFilter( scope );
-
         // TODO: such a call in MavenMetadataSource too - packaging not really the intention of type
         Artifact artifact = repositoryTools.createBuildArtifact( project.getGroupId(),
                                                                  project.getArtifactId(),
@@ -1492,9 +1490,11 @@ protected void resolveTransitiveDependencies( MavenSession context,
         if ( project.getDependencyArtifacts() == null )
         {
             // NOTE: Don't worry about covering this case with the error-reporter bindings...it's already handled by the project error reporter.
-            project.setDependencyArtifacts( repositoryTools.createArtifacts( project.getDependencies(), null, filter, project ) );
+            project.setDependencyArtifacts( repositoryTools.createArtifacts( project.getDependencies(), null, null, project ) );
         }
 
+        ArtifactFilter filter = new ScopeArtifactFilter( scope );
+
         Set resolvedArtifacts;
         try
         {

File: maven-mercury/src/main/java/org/apache/maven/mercury/PomProcessor.java
Patch:
@@ -10,6 +10,7 @@
 
 public interface PomProcessor
 {
-    List<ModelProperty> getRawPom(ArtifactBasicMetadata bmd, MetadataReader mdReader, Map env, Map sysProps)
+    List<ModelProperty> getRawPom(ArtifactBasicMetadata bmd, MetadataReader mdReader, Map<String, String>  env,
+                                  Map<String, String>  sysProps)
             throws MetadataReaderException, PomProcessorException;
 }

File: maven-mercury/src/main/java/org/apache/maven/mercury/PomProcessorException.java
Patch:
@@ -1,6 +1,7 @@
 package org.apache.maven.mercury;
 
-public class PomProcessorException extends Exception
+public class PomProcessorException
+    extends Exception
 {
     static final long serialVersionUID = 980457843528974352L;
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -169,6 +169,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng3710PollutedClonedPluginsTest.class );
         suite.addTestSuite( MavenITmng3704LifecycleExecutorWrapperTest.class );
         suite.addTestSuite( MavenITmng3703ExecutionProjectWithRelativePathsTest.class );
+        suite.addTestSuite( MavenITmng3701ImplicitProfileIdTest.class );
         suite.addTestSuite( MavenITmng3694ReactorProjectsDynamismTest.class );
         suite.addTestSuite( MavenITmng3693PomFileBasedirChangeTest.class );
         suite.addTestSuite( MavenITmng3684BuildPluginParameterTest.class );

File: maven-core/src/main/java/org/apache/maven/listeners/BuildExtensionListener.java
Patch:
@@ -7,7 +7,7 @@
 
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.execution.MavenSession;
-import org.apache.maven.project.builder.ArtifactModelContainerFactory;
+import org.apache.maven.project.builder.factories.ArtifactModelContainerFactory;
 import org.apache.maven.project.builder.ProjectUri;
 import org.apache.maven.shared.model.DataSourceException;
 import org.apache.maven.shared.model.ModelContainer;

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Patch:
@@ -74,7 +74,6 @@
 import org.apache.maven.project.builder.Interpolator;
 import org.apache.maven.project.builder.PomInterpolatorTag;
 import org.apache.maven.project.builder.ProjectBuilder;
-import org.apache.maven.project.builder.Mixer;
 import org.apache.maven.project.path.PathTranslator;
 import org.apache.maven.realm.MavenRealmManager;
 import org.apache.maven.realm.RealmManagementException;

File: maven-core/src/test/java/org/apache/maven/listeners/BuildExtensionListenerTest.java
Patch:
@@ -55,7 +55,7 @@ public void testBuildExtensionListener()
         listener.processModelContainers( newMavenSession() );
         
         // Now we should be able to find the extension.
-        lookup( Wagon.class, "dav" );        
+    //    lookup( Wagon.class, "dav" );        
     }
 
     private MavenSession newMavenSession()

File: maven-mercury/src/main/java/org/apache/maven/mercury/MavenDependencyProcessor.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.io.IOException;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.Collection;
 import java.util.List;
 import java.util.Map;
@@ -31,8 +30,6 @@
 import org.apache.maven.mercury.builder.api.DependencyProcessorException;
 import org.apache.maven.mercury.builder.api.MetadataReader;
 import org.apache.maven.mercury.builder.api.MetadataReaderException;
-import org.apache.maven.project.builder.ArtifactModelContainerFactory;
-import org.apache.maven.project.builder.IdModelContainerFactory;
 import org.apache.maven.project.builder.PomInterpolatorTag;
 import org.apache.maven.project.builder.PomTransformer;
 import org.apache.maven.project.builder.ProjectUri;

File: maven-mercury/src/main/java/org/apache/maven/mercury/MavenDomainModel.java
Patch:
@@ -28,8 +28,8 @@
 import java.util.List;
 
 import org.apache.maven.mercury.artifact.ArtifactBasicMetadata;
-import org.apache.maven.project.builder.ArtifactModelContainerFactory;
-import org.apache.maven.project.builder.ExclusionModelContainerFactory;
+import org.apache.maven.project.builder.factories.ArtifactModelContainerFactory;
+import org.apache.maven.project.builder.factories.ExclusionModelContainerFactory;
 import org.apache.maven.project.builder.PomTransformer;
 import org.apache.maven.project.builder.ProjectUri;
 import org.apache.maven.project.builder.profile.ProfileContext;

File: maven-project-builder/src/main/java/org/apache/maven/project/builder/IProjectBuilder.java
Patch:
@@ -1,4 +1,6 @@
 package org.apache.maven.project.builder;
 
-public class PluginBuilderTest {
+public interface IProjectBuilder
+{
+    
 }

File: maven-project-builder/src/main/java/org/apache/maven/project/builder/factories/AlwaysJoinModelContainerFactory.java
Patch:
@@ -1,9 +1,10 @@
-package org.apache.maven.project.builder;
+package org.apache.maven.project.builder.factories;
 
 import org.apache.maven.shared.model.ModelContainerFactory;
 import org.apache.maven.shared.model.ModelContainer;
 import org.apache.maven.shared.model.ModelProperty;
 import org.apache.maven.shared.model.ModelContainerAction;
+import org.apache.maven.project.builder.ProjectUri;
 
 import java.util.*;
 

File: maven-project-builder/src/main/java/org/apache/maven/project/builder/factories/ArtifactModelContainerFactory.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.project.builder;
+package org.apache.maven.project.builder.factories;
 
 /*
  * Licensed to the Apache Software Foundation (ASF) under one
@@ -23,6 +23,7 @@
 import org.apache.maven.shared.model.ModelContainerAction;
 import org.apache.maven.shared.model.ModelContainerFactory;
 import org.apache.maven.shared.model.ModelProperty;
+import org.apache.maven.project.builder.ProjectUri;
 
 import java.util.ArrayList;
 import java.util.Arrays;

File: maven-project-builder/src/main/java/org/apache/maven/project/builder/factories/ExclusionModelContainerFactory.java
Patch:
@@ -1,9 +1,10 @@
-package org.apache.maven.project.builder;
+package org.apache.maven.project.builder.factories;
 
 import org.apache.maven.shared.model.ModelContainerFactory;
 import org.apache.maven.shared.model.ModelContainer;
 import org.apache.maven.shared.model.ModelProperty;
 import org.apache.maven.shared.model.ModelContainerAction;
+import org.apache.maven.project.builder.ProjectUri;
 
 import java.util.*;
 

File: maven-project-builder/src/main/java/org/apache/maven/project/builder/factories/IdModelContainerFactory.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.project.builder;
+package org.apache.maven.project.builder.factories;
 
 /*
  * Licensed to the Apache Software Foundation (ASF) under one
@@ -23,6 +23,7 @@
 import org.apache.maven.shared.model.ModelContainerAction;
 import org.apache.maven.shared.model.ModelContainerFactory;
 import org.apache.maven.shared.model.ModelProperty;
+import org.apache.maven.project.builder.ProjectUri;
 
 import java.util.ArrayList;
 import java.util.Arrays;

File: maven-project-builder/src/main/java/org/apache/maven/project/builder/factories/PluginExecutionIdModelContainerFactory.java
Patch:
@@ -1,9 +1,10 @@
-package org.apache.maven.project.builder;
+package org.apache.maven.project.builder.factories;
 
 import org.apache.maven.shared.model.ModelContainerFactory;
 import org.apache.maven.shared.model.ModelContainer;
 import org.apache.maven.shared.model.ModelProperty;
 import org.apache.maven.shared.model.ModelContainerAction;
+import org.apache.maven.project.builder.ProjectUri;
 
 import java.util.*;
 

File: maven-project-builder/src/main/java/org/apache/maven/project/builder/factories/PluginReportSetIdModelContainerFactory.java
Patch:
@@ -1,9 +1,10 @@
-package org.apache.maven.project.builder;
+package org.apache.maven.project.builder.factories;
 
 import org.apache.maven.shared.model.ModelContainer;
 import org.apache.maven.shared.model.ModelProperty;
 import org.apache.maven.shared.model.ModelContainerAction;
 import org.apache.maven.shared.model.ModelContainerFactory;
+import org.apache.maven.project.builder.ProjectUri;
 
 import java.util.*;
 

File: maven-project-builder/src/main/java/org/apache/maven/project/builder/rules/ExecutionRule.java
Patch:
@@ -1,14 +1,11 @@
 package org.apache.maven.project.builder.rules;
 
 import org.apache.maven.shared.model.*;
-import org.apache.maven.shared.model.impl.DefaultModelDataSource;
 import org.apache.maven.project.builder.ProjectUri;
-import org.apache.maven.project.builder.AlwaysJoinModelContainerFactory;
 
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Collections;
-import java.util.Arrays;
 
 public class ExecutionRule implements ModelContainerRule {
 

File: maven-project-builder/src/test/java/org/apache/maven/project/builder/PluginSpecTest.java
Patch:
@@ -3,6 +3,7 @@
 import static org.junit.Assert.*;
 import org.apache.maven.shared.model.*;
 import org.apache.maven.shared.model.impl.DefaultModelDataSource;
+import org.apache.maven.project.builder.factories.PluginExecutionIdModelContainerFactory;
 
 import java.util.List;
 import java.util.ArrayList;

File: maven-project/src/main/java/org/apache/maven/project/builder/ProjectBuilder.java
Patch:
@@ -35,10 +35,10 @@
  */
 public interface ProjectBuilder
 {
-    public PomClassicDomainModel buildModel( File pom, 
+    public IPomClassicDomainModel buildModel( File pom,
                                              Collection<InterpolatorProperty> interpolatorProperties,
-                                             PomArtifactResolver resolver ) 
-        throws IOException;       
+                                             PomArtifactResolver resolver )
+        throws IOException;
 
     /**
      * Returns a maven project for the specified input stream.

File: maven-project/src/test/java/org/apache/maven/project/harness/PomTestWrapper.java
Patch:
@@ -30,6 +30,7 @@
 import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
 import org.apache.maven.model.Model;
 import org.apache.maven.project.builder.PomClassicDomainModel;
+import org.apache.maven.project.builder.IPomClassicDomainModel;
 import org.apache.maven.project.MavenProject;
 import org.apache.maven.shared.model.ModelProperty;
 

File: maven-mercury/src/main/java/org/apache/maven/mercury/MavenDomainModel.java
Patch:
@@ -30,7 +30,6 @@
 import org.apache.maven.mercury.artifact.ArtifactBasicMetadata;
 import org.apache.maven.project.builder.ArtifactModelContainerFactory;
 import org.apache.maven.project.builder.ExclusionModelContainerFactory;
-import org.apache.maven.project.builder.IdModelContainerFactory;
 import org.apache.maven.project.builder.PomTransformer;
 import org.apache.maven.project.builder.ProjectUri;
 import org.apache.maven.project.builder.profile.ProfileContext;
@@ -125,7 +124,7 @@ public Collection<ModelContainer> getActiveProfileContainers( List<InterpolatorP
     {
         ModelDataSource dataSource = new DefaultModelDataSource( modelProperties, PomTransformer.MODEL_CONTAINER_FACTORIES );
 
-        return new ProfileContext( dataSource, null, properties ).getActiveProfiles();
+        return new ProfileContext( dataSource, null, null, properties ).getActiveProfiles();
     }
 
     public ArtifactBasicMetadata getParentMetadata()

File: maven-project/src/main/java/org/apache/maven/profiles/DefaultProfileManager.java
Patch:
@@ -181,6 +181,7 @@ public List getActiveProfiles()
         return getActiveProfiles( null );
     }
 
+    // TODO: Portions of this logic are duplicated in o.a.m.p.b.p.ProfileContext, something is wrong here
     public List getActiveProfiles( Model model )
         throws ProfileActivationException
     {

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0294MergeGlobalAndUserSettingsTest.java
Patch:
@@ -55,6 +55,7 @@ public void testitMNG294()
         verifier.getCliOptions().add( "user-settings.xml" );
         if ( matchesVersionRange( "[2.1.0-M2,)" ) )
         {
+            // dedicated CLI option only available since MNG-3914
             verifier.getCliOptions().add( "--global-settings" );
             verifier.getCliOptions().add( "global-settings.xml" );
         }

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -90,6 +90,7 @@ public static Test suite()
         // suite.addTestSuite( MavenIT0109ReleaseUpdateTest.class );
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng4036ParentResolutionFromSettingsRepoTest.class );
         suite.addTestSuite( MavenITmng4034ManagedProfileDependencyTest.class );
         suite.addTestSuite( MavenITmng4026ReactorDependenciesOrderTest.class );
         suite.addTestSuite( MavenITmng4023ParentProfileOneTimeInjectionTest.class );
@@ -352,7 +353,6 @@ public static Test suite()
         suite.addTestSuite( MavenIT0010Test.class );
         suite.addTestSuite( MavenIT0009Test.class );
         suite.addTestSuite( MavenIT0008Test.class );
-        suite.addTestSuite( MavenIT0007Test.class );
 
         /*
          * Add tests in reverse alpha order above.

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -25,10 +25,11 @@
 import java.io.PrintStream;
 
 import junit.framework.Test;
+import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
 public class IntegrationTestSuite
-    extends AbstractMavenIntegrationTestCase
+    extends TestCase
 {
     private static PrintStream out = System.out;
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0142DirectDependencyScopesTest.java
Patch:
@@ -38,8 +38,9 @@ public class MavenIT0142DirectDependencyScopesTest
      * NOTE: Class path ordering is another issue (MNG-1412), so we merely check set containment here.
      */
 
-    public MavenIT0142DirectDependencyScopesTest()
+    protected MavenIT0142DirectDependencyScopesTest()
     {
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0143TransitiveDependencyScopesTest.java
Patch:
@@ -41,6 +41,7 @@ public class MavenIT0143TransitiveDependencyScopesTest
 
     public MavenIT0143TransitiveDependencyScopesTest()
     {
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0144LifecycleExecutionOrderTest.java
Patch:
@@ -38,6 +38,7 @@ public class MavenIT0144LifecycleExecutionOrderTest
 
     public MavenIT0144LifecycleExecutionOrderTest()
     {
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0294MergeGlobalAndUserSettingsTest.java
Patch:
@@ -37,6 +37,7 @@ public class MavenITmng0294MergeGlobalAndUserSettingsTest
 
     public MavenITmng0294MergeGlobalAndUserSettingsTest()
     {
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0377PluginLookupFromPrefixTest.java
Patch:
@@ -38,6 +38,7 @@ public class MavenITmng0377PluginLookupFromPrefixTest
 {
     public MavenITmng0377PluginLookupFromPrefixTest()
     {
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0761MissingSnapshotDistRepoTest.java
Patch:
@@ -36,7 +36,7 @@ public class MavenITmng0761MissingSnapshotDistRepoTest
 
     public MavenITmng0761MissingSnapshotDistRepoTest()
     {
-        super();
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0848SystemPropOverridesDefaultValueTest.java
Patch:
@@ -37,6 +37,7 @@ public class MavenITmng0848SystemPropOverridesDefaultValueTest
 
     public MavenITmng0848SystemPropOverridesDefaultValueTest()
     {
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0866EvaluateDefaultValueTest.java
Patch:
@@ -38,6 +38,7 @@ public class MavenITmng0866EvaluateDefaultValueTest
 
     public MavenITmng0866EvaluateDefaultValueTest()
     {
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0870ReactorAwarePluginDiscoveryTest.java
Patch:
@@ -36,7 +36,7 @@ public class MavenITmng0870ReactorAwarePluginDiscoveryTest
 
     public MavenITmng0870ReactorAwarePluginDiscoveryTest()
     {
-        super();
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3139UseCachedMetadataOfBlacklistedRepoTest.java
Patch:
@@ -37,6 +37,7 @@ public class MavenITmng3139UseCachedMetadataOfBlacklistedRepoTest
 
     public MavenITmng3139UseCachedMetadataOfBlacklistedRepoTest()
     {
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3379ParallelArtifactDownloadsTest.java
Patch:
@@ -36,7 +36,7 @@ public class MavenITmng3379ParallelArtifactDownloadsTest
 
     public MavenITmng3379ParallelArtifactDownloadsTest()
     {
-        super();
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3586SystemScopePluginDependencyTest.java
Patch:
@@ -37,6 +37,7 @@ public class MavenITmng3586SystemScopePluginDependencyTest
 
     public MavenITmng3586SystemScopePluginDependencyTest()
     {
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3694ReactorProjectsDynamismTest.java
Patch:
@@ -35,6 +35,7 @@ public class MavenITmng3694ReactorProjectsDynamismTest
 {
     public MavenITmng3694ReactorProjectsDynamismTest()
     {
+        super( ALL_MAVEN_VERSIONS );
     }
 
     public void testitMNG3694 ()

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3821EqualPluginExecIdsTest.java
Patch:
@@ -36,6 +36,7 @@ public class MavenITmng3821EqualPluginExecIdsTest
 
     public MavenITmng3821EqualPluginExecIdsTest() 
     {
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3827PluginConfigTest.java
Patch:
@@ -37,6 +37,7 @@ public class MavenITmng3827PluginConfigTest
 
     public MavenITmng3827PluginConfigTest()
     {
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3833PomInterpolationDataFlowChainTest.java
Patch:
@@ -37,6 +37,7 @@ public class MavenITmng3833PomInterpolationDataFlowChainTest
 
     public MavenITmng3833PomInterpolationDataFlowChainTest()
     {
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3836PluginConfigInheritanceTest.java
Patch:
@@ -37,6 +37,7 @@ public class MavenITmng3836PluginConfigInheritanceTest
 
     public MavenITmng3836PluginConfigInheritanceTest()
     {
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3839PomParsingCoalesceTextTest.java
Patch:
@@ -37,6 +37,7 @@ public class MavenITmng3839PomParsingCoalesceTextTest
 
     public MavenITmng3839PomParsingCoalesceTextTest()
     {
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3843PomInheritanceTest.java
Patch:
@@ -40,6 +40,7 @@ public class MavenITmng3843PomInheritanceTest
 
     public MavenITmng3843PomInheritanceTest()
     {
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3845LimitedPomInheritanceTest.java
Patch:
@@ -37,6 +37,7 @@ public class MavenITmng3845LimitedPomInheritanceTest
 
     public MavenITmng3845LimitedPomInheritanceTest()
     {
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3846PomInheritanceUrlAdjustmentTest.java
Patch:
@@ -37,6 +37,7 @@ public class MavenITmng3846PomInheritanceUrlAdjustmentTest
 
     public MavenITmng3846PomInheritanceUrlAdjustmentTest()
     {
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3852PluginConfigWithHeterogeneousListTest.java
Patch:
@@ -37,6 +37,7 @@ public class MavenITmng3852PluginConfigWithHeterogeneousListTest
 
     public MavenITmng3852PluginConfigWithHeterogeneousListTest()
     {
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3853ProfileInjectedDistReposTest.java
Patch:
@@ -38,6 +38,7 @@ public class MavenITmng3853ProfileInjectedDistReposTest
 
     public MavenITmng3853ProfileInjectedDistReposTest()
     {
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3863AutoPluginGroupIdTest.java
Patch:
@@ -37,6 +37,7 @@ public class MavenITmng3863AutoPluginGroupIdTest
 
     public MavenITmng3863AutoPluginGroupIdTest()
     {
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3864PerExecPluginConfigTest.java
Patch:
@@ -37,6 +37,7 @@ public class MavenITmng3864PerExecPluginConfigTest
 
     public MavenITmng3864PerExecPluginConfigTest()
     {
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3866PluginConfigInheritanceTest.java
Patch:
@@ -37,6 +37,7 @@ public class MavenITmng3866PluginConfigInheritanceTest
 
     public MavenITmng3866PluginConfigInheritanceTest()
     {
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3873MultipleExecutionGoalsTest.java
Patch:
@@ -37,6 +37,7 @@ public class MavenITmng3873MultipleExecutionGoalsTest
 
     public MavenITmng3873MultipleExecutionGoalsTest()
     {
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3877BasedirAlignedModelTest.java
Patch:
@@ -37,6 +37,7 @@ public class MavenITmng3877BasedirAlignedModelTest
 
     public MavenITmng3877BasedirAlignedModelTest()
     {
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3886ExecutionGoalsOrderTest.java
Patch:
@@ -38,6 +38,7 @@ public class MavenITmng3886ExecutionGoalsOrderTest
 
     public MavenITmng3886ExecutionGoalsOrderTest()
     {
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3887PluginExecutionOrderTest.java
Patch:
@@ -38,6 +38,7 @@ public class MavenITmng3887PluginExecutionOrderTest
 
     public MavenITmng3887PluginExecutionOrderTest()
     {
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3892ReleaseDeploymentTest.java
Patch:
@@ -38,6 +38,7 @@ public class MavenITmng3892ReleaseDeploymentTest
 
     public MavenITmng3892ReleaseDeploymentTest()
     {
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3900ProfilePropertiesInterpolationTest.java
Patch:
@@ -37,6 +37,7 @@ public class MavenITmng3900ProfilePropertiesInterpolationTest
 
     public MavenITmng3900ProfilePropertiesInterpolationTest()
     {
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3925MergedPluginExecutionOrderTest.java
Patch:
@@ -38,6 +38,7 @@ public class MavenITmng3925MergedPluginExecutionOrderTest
 
     public MavenITmng3925MergedPluginExecutionOrderTest()
     {
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3927PluginDefaultExecutionConfigTest.java
Patch:
@@ -36,6 +36,7 @@ public class MavenITmng3927PluginDefaultExecutionConfigTest
 
     public MavenITmng3927PluginDefaultExecutionConfigTest()
     {
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3933ProfilesXmlActivationTest.java
Patch:
@@ -39,6 +39,7 @@ public class MavenITmng3933ProfilesXmlActivationTest
 
     public MavenITmng3933ProfilesXmlActivationTest()
     {
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3937MergedPluginExecutionGoalsTest.java
Patch:
@@ -38,6 +38,7 @@ public class MavenITmng3937MergedPluginExecutionGoalsTest
 
     public MavenITmng3937MergedPluginExecutionGoalsTest()
     {
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3944BasedirInterpolationTest.java
Patch:
@@ -37,6 +37,7 @@ public class MavenITmng3944BasedirInterpolationTest
 
     public MavenITmng3944BasedirInterpolationTest()
     {
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3947PluginDefaultExecutionConfigTest.java
Patch:
@@ -36,6 +36,7 @@ public class MavenITmng3947PluginDefaultExecutionConfigTest
 
     public MavenITmng3947PluginDefaultExecutionConfigTest()
     {
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3955EffectiveSettingsTest.java
Patch:
@@ -37,7 +37,7 @@ public class MavenITmng3955EffectiveSettingsTest
 
     public MavenITmng3955EffectiveSettingsTest()
     {
-        super();
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3970DepResolutionFromProfileReposTest.java
Patch:
@@ -36,7 +36,7 @@ public class MavenITmng3970DepResolutionFromProfileReposTest
 
     public MavenITmng3970DepResolutionFromProfileReposTest()
     {
-        super();
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3979ElementJoinTest.java
Patch:
@@ -36,7 +36,7 @@ public class MavenITmng3979ElementJoinTest
 
     public MavenITmng3979ElementJoinTest()
     {
-        super();
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3983PluginResolutionFromProfileReposTest.java
Patch:
@@ -36,7 +36,7 @@ public class MavenITmng3983PluginResolutionFromProfileReposTest
 
     public MavenITmng3983PluginResolutionFromProfileReposTest()
     {
-        super();
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3998PluginExecutionConfigTest.java
Patch:
@@ -39,7 +39,7 @@ public class MavenITmng3998PluginExecutionConfigTest
 
     public MavenITmng3998PluginExecutionConfigTest()
     {
-        super();
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4000MultiPluginExecutionsTest.java
Patch:
@@ -38,7 +38,7 @@ public class MavenITmng4000MultiPluginExecutionsTest
 
     public MavenITmng4000MultiPluginExecutionsTest()
     {
-        super();
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4007PlatformFileSeparatorTest.java
Patch:
@@ -37,7 +37,7 @@ public class MavenITmng4007PlatformFileSeparatorTest
 
     public MavenITmng4007PlatformFileSeparatorTest()
     {
-        super();
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4008MergedFilterOrderTest.java
Patch:
@@ -37,7 +37,7 @@ public class MavenITmng4008MergedFilterOrderTest
 
     public MavenITmng4008MergedFilterOrderTest()
     {
-        super();
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4009InheritProfileEffectsTest.java
Patch:
@@ -37,7 +37,7 @@ public class MavenITmng4009InheritProfileEffectsTest
 
     public MavenITmng4009InheritProfileEffectsTest()
     {
-        super();
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng4034ManagedProfileDependencyTest.java
Patch:
@@ -39,7 +39,7 @@ public class MavenITmng4034ManagedProfileDependencyTest
 
     public MavenITmng4034ManagedProfileDependencyTest()
     {
-        super( "[2.0,)" );
+        super( ALL_MAVEN_VERSIONS );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0553SettingsAuthzEncryptionTest.java
Patch:
@@ -66,7 +66,7 @@ public void testitBasic()
      * Test that the encrypted auth infos given in the settings.xml are decrypted when the master password resides
      * in an external file.
      */
-    /* FIXME: Outstanding bugs in plexus-sec-dispatcher prevent this from passing
+    // FIXME: Outstanding bugs in plexus-sec-dispatcher prevent this from passing 
     public void testitRelocation()
         throws Exception
     {
@@ -97,6 +97,6 @@ public void testitRelocation()
         assertEquals( "testuser", props.getProperty( "test.username" ) );
         assertEquals( "testtest", props.getProperty( "test.password" ) );
     }
-    //*/
+    //
 
 }

File: maven-compat/src/main/java/org/apache/maven/artifact/handler/DefaultArtifactHandler.java
Patch:
@@ -1,5 +1,7 @@
 package org.apache.maven.artifact.handler;
 
+import org.codehaus.plexus.component.annotations.Component;
+
 /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
@@ -23,8 +25,8 @@
  * @author <a href="mailto:brett@apache.org">Brett Porter</a>
  * @author Jason van Zyl
  * @version $Id$
- * @plexus.component
  */
+@Component(role=ArtifactHandler.class) 
 public class DefaultArtifactHandler
     implements ArtifactHandler
 {

File: maven-compat/src/main/java/org/apache/maven/artifact/manager/DefaultUpdateCheckManager.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;
 import org.apache.maven.artifact.repository.metadata.RepositoryMetadata;
+import org.codehaus.plexus.component.annotations.Component;
 import org.codehaus.plexus.logging.AbstractLogEnabled;
 import org.codehaus.plexus.logging.Logger;
 
@@ -38,7 +39,7 @@
 import java.util.Date;
 import java.util.Properties;
 
-/** @plexus.component */
+@Component(role=UpdateCheckManager.class)
 public class DefaultUpdateCheckManager
     extends AbstractLogEnabled
     implements UpdateCheckManager

File: maven-compat/src/main/java/org/apache/maven/artifact/repository/layout/DefaultRepositoryLayout.java
Patch:
@@ -23,11 +23,12 @@
 import org.apache.maven.artifact.handler.ArtifactHandler;
 import org.apache.maven.artifact.metadata.ArtifactMetadata;
 import org.apache.maven.artifact.repository.ArtifactRepository;
+import org.codehaus.plexus.component.annotations.Component;
 
 /**
  * @author jdcasey
- * @plexus.component role="org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout" role-hint="default"
  */
+@Component(role=ArtifactRepositoryLayout.class, hint="default")
 public class DefaultRepositoryLayout
     implements ArtifactRepositoryLayout
 {

File: maven-compat/src/main/java/org/apache/maven/artifact/repository/layout/FlatRepositoryLayout.java
Patch:
@@ -4,14 +4,15 @@
 import org.apache.maven.artifact.handler.ArtifactHandler;
 import org.apache.maven.artifact.metadata.ArtifactMetadata;
 import org.apache.maven.artifact.repository.ArtifactRepository;
+import org.codehaus.plexus.component.annotations.Component;
 
 /**
  * The code in this class is taken from DefaultRepositorylayout, located at:
  * http://svn.apache.org/viewvc/maven/components/trunk/maven-artifact/src/main/java/org/apache/maven/artifact/repository/layout/DefaultRepositoryLayout.java
  *
  * @version $Id$
- * @plexus.component role="org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout" role-hint="flat" 
  */
+@Component(role=ArtifactRepositoryLayout.class, hint="flat")                                                                         
 public class FlatRepositoryLayout
     implements ArtifactRepositoryLayout
 {

File: maven-compat/src/main/java/org/apache/maven/artifact/repository/layout/LegacyRepositoryLayout.java
Patch:
@@ -23,11 +23,12 @@
 import org.apache.maven.artifact.handler.ArtifactHandler;
 import org.apache.maven.artifact.metadata.ArtifactMetadata;
 import org.apache.maven.artifact.repository.ArtifactRepository;
+import org.codehaus.plexus.component.annotations.Component;
 
 /**
  * @author jdcasey
- * @plexus.component role="org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout" role-hint="legacy"
  */
+@Component(role=ArtifactRepositoryLayout.class, hint="legacy")
 public class LegacyRepositoryLayout
     implements ArtifactRepositoryLayout
 {

File: maven-compat/src/main/java/org/apache/maven/artifact/resolver/conflict/DefaultConflictResolver.java
Patch:
@@ -1,5 +1,7 @@
 package org.apache.maven.artifact.resolver.conflict;
 
+import org.codehaus.plexus.component.annotations.Component;
+
 /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
@@ -26,9 +28,9 @@
  * @version $Id$
  * @see NearestConflictResolver
  * @deprecated As of 3.0, use a specific implementation instead, e.g. {@link NearestConflictResolver}
- * @plexus.component
  */
 @Deprecated
+@Component(role=ConflictResolver.class)
 public class DefaultConflictResolver
     extends NearestConflictResolver
 {

File: maven-compat/src/main/java/org/apache/maven/artifact/resolver/conflict/FarthestConflictResolver.java
Patch:
@@ -20,6 +20,7 @@
  */
 
 import org.apache.maven.artifact.resolver.ResolutionNode;
+import org.codehaus.plexus.component.annotations.Component;
 
 /**
  * Resolves conflicting artifacts by always selecting the <em>farthest</em> declaration. Farthest is defined as the
@@ -28,8 +29,8 @@
  * @author <a href="mailto:markhobson@gmail.com">Mark Hobson</a>
  * @version $Id$
  * @since 3.0
- * @plexus.component role-hint="farthest"
  */
+@Component(role=ConflictResolver.class, hint="farthest")
 public class FarthestConflictResolver
     implements ConflictResolver
 {

File: maven-compat/src/main/java/org/apache/maven/artifact/resolver/conflict/NearestConflictResolver.java
Patch:
@@ -20,6 +20,7 @@
  */
 
 import org.apache.maven.artifact.resolver.ResolutionNode;
+import org.codehaus.plexus.component.annotations.Component;
 
 /**
  * Resolves conflicting artifacts by always selecting the <em>nearest</em> declaration. Nearest is defined as the
@@ -29,8 +30,8 @@
  * @author <a href="mailto:markhobson@gmail.com">Mark Hobson</a>
  * @version $Id$
  * @since 3.0
- * @plexus.component role-hint="nearest"
  */
+@Component(role=ConflictResolver.class, hint="nearest")
 public class NearestConflictResolver
     implements ConflictResolver
 {

File: maven-compat/src/main/java/org/apache/maven/artifact/resolver/conflict/NewestConflictResolver.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.maven.artifact.resolver.ResolutionNode;
 import org.apache.maven.artifact.versioning.ArtifactVersion;
 import org.apache.maven.artifact.versioning.OverConstrainedVersionException;
+import org.codehaus.plexus.component.annotations.Component;
 
 /**
  * Resolves conflicting artifacts by always selecting the <em>newest</em> declaration. Newest is defined as the
@@ -31,8 +32,8 @@
  * @version $Id$
  * @see ArtifactVersion#compareTo(Object)
  * @since 3.0
- * @plexus.component role-hint="newest"
  */
+@Component(role=ConflictResolver.class, hint="newest")
 public class NewestConflictResolver
     implements ConflictResolver
 {

File: maven-compat/src/main/java/org/apache/maven/artifact/resolver/conflict/OldestConflictResolver.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.maven.artifact.resolver.ResolutionNode;
 import org.apache.maven.artifact.versioning.ArtifactVersion;
 import org.apache.maven.artifact.versioning.OverConstrainedVersionException;
+import org.codehaus.plexus.component.annotations.Component;
 
 /**
  * Resolves conflicting artifacts by always selecting the <em>oldest</em> declaration. Oldest is defined as the
@@ -31,8 +32,8 @@
  * @version $Id$
  * @see ArtifactVersion#compareTo(Object)
  * @since 3.0
- * @plexus.component role-hint="oldest"
  */
+@Component(role=ConflictResolver.class, hint="oldest")
 public class OldestConflictResolver
     implements ConflictResolver
 {

File: maven-compat/src/main/java/org/apache/maven/artifact/transform/LatestArtifactTransformation.java
Patch:
@@ -25,10 +25,11 @@
 import org.apache.maven.artifact.repository.metadata.Versioning;
 import org.apache.maven.artifact.resolver.ArtifactNotFoundException;
 import org.apache.maven.artifact.resolver.ArtifactResolutionException;
+import org.codehaus.plexus.component.annotations.Component;
 
 import java.util.List;
 
-/** @plexus.component role="org.apache.maven.artifact.transform.ArtifactTransformation" role-hint="latest" */
+@Component(role=ArtifactTransformation.class, hint="latest")
 public class LatestArtifactTransformation
     extends AbstractVersionTransformation
 {

File: maven-compat/src/main/java/org/apache/maven/artifact/transform/ReleaseArtifactTransformation.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.maven.artifact.repository.metadata.Versioning;
 import org.apache.maven.artifact.resolver.ArtifactNotFoundException;
 import org.apache.maven.artifact.resolver.ArtifactResolutionException;
+import org.codehaus.plexus.component.annotations.Component;
 
 import java.util.List;
 
@@ -35,8 +36,8 @@
  *
  * @author <a href="mailto:brett@apache.org">Brett Porter</a>
  * @version $Id$
- * @plexus.component role="org.apache.maven.artifact.transform.ArtifactTransformation" role-hint="release"
  */
+@Component(role=ArtifactTransformation.class, hint="release") 
 public class ReleaseArtifactTransformation
     extends AbstractVersionTransformation
 {

File: maven-compat/src/main/java/org/apache/maven/artifact/transform/SnapshotTransformation.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.maven.artifact.repository.metadata.SnapshotArtifactRepositoryMetadata;
 import org.apache.maven.artifact.repository.metadata.Versioning;
 import org.apache.maven.artifact.resolver.ArtifactResolutionException;
+import org.codehaus.plexus.component.annotations.Component;
 import org.codehaus.plexus.util.StringUtils;
 
 import java.text.DateFormat;
@@ -41,8 +42,8 @@
  * @author <a href="mailto:brett@apache.org">Brett Porter</a>
  * @author <a href="mailto:mmaczka@interia.pl">Michal Maczka</a>
  * @version $Id$
- * @plexus.component role="org.apache.maven.artifact.transform.ArtifactTransformation" role-hint="snapshot"
  */
+@Component(role=ArtifactTransformation.class, hint="snapshot") 
 public class SnapshotTransformation
     extends AbstractVersionTransformation
 {

File: maven-project/src/main/java/org/apache/maven/project/builder/PomClassicDomainModel.java
Patch:
@@ -306,6 +306,7 @@ public List<ModelProperty> getModelProperties() throws IOException
             s.add(ProjectUri.Reporting.Plugins.Plugin.ReportSets.xUri);
             s.add(ProjectUri.Reporting.Plugins.Plugin.ReportSets.ReportSet.configuration);
             s.add(ProjectUri.Build.Plugins.Plugin.Executions.Execution.configuration);
+            s.add(ProjectUri.Profiles.Profile.Build.Plugins.Plugin.configuration);//TODO: More profile info
             modelProperties = ModelMarshaller.marshallXmlToModelProperties(
                 getInputStream(), ProjectUri.baseUri, s );
         }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3843PomInheritanceTest.java
Patch:
@@ -57,8 +57,8 @@ public void testitMNG3843()
         verifier.deleteDirectory( "test-2/child-1/target" );
         verifier.deleteDirectory( "test-2/child-2/target" );
         verifier.deleteDirectory( "test-3/sub-parent/child-a/target" );
-        verifier.getSystemProperties().setProperty( "org.apache.maven.user-settings",
-            new File( testDir, "settings.xml" ).getAbsolutePath() );
+        verifier.getCliOptions().add( "--settings" );
+        verifier.getCliOptions().add( "settings.xml" );
         verifier.executeGoal( "validate" );
         verifier.verifyErrorFreeLog();
         verifier.resetStreams();

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -98,7 +98,6 @@ public static Test suite()
         suite.addTestSuite( MavenITmng3998PluginExecutionConfigTest.class );
         suite.addTestSuite( MavenITmng3983PluginResolutionFromProfileReposTest.class );
         suite.addTestSuite( MavenITmng3979ElementJoinTest.class );
-        suite.addTestSuite( MavenITmng3719PomExecutionOrderingTest.class );
         suite.addTestSuite( MavenITmng3974MirrorOrderingTest.class );
         suite.addTestSuite( MavenITmng3970DepResolutionFromProfileReposTest.class );
         suite.addTestSuite( MavenITmng3955EffectiveSettingsTest.class );
@@ -159,6 +158,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng3729MultiForkAggregatorsTest.class );
         suite.addTestSuite( MavenITmng3724ExecutionProjectSyncTest.class );
         suite.addTestSuite( MavenITmng3723ConcreteParentProjectTest.class );
+        suite.addTestSuite( MavenITmng3719PomExecutionOrderingTest.class );
         suite.addTestSuite( MavenITmng3716AggregatorForkingTest.class );
         suite.addTestSuite( MavenITmng3710PollutedClonedPluginsTest.class );
         suite.addTestSuite( MavenITmng3704LifecycleExecutorWrapperTest.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3808ReportInheritenceOrderingTest.java
Patch:
@@ -31,7 +31,7 @@
  * This is a test set for <a href="http://jira.codehaus.org/browse/MNG-3808">MNG-3808</a>.
  * 
  * @author Brett Porter
- * @version $Id: MavenITmng4016PrefixedPropertyInterpolationTest.java 739321 2009-01-30 16:09:55Z bentmann $
+ * @version $Id$
  */
 public class MavenITmng3808ReportInheritenceOrderingTest
     extends AbstractMavenIntegrationTestCase
@@ -45,7 +45,7 @@ public MavenITmng3808ReportInheritenceOrderingTest()
     /**
      * Test that 3 executions are run in the correct order.
      */
-    public void testitMNG3719()
+    public void testitMNG3808()
         throws Exception
     {
         File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3808" );

File: maven-mercury/src/main/java/org/apache/maven/mercury/MavenDomainModel.java
Patch:
@@ -125,7 +125,7 @@ public Collection<ModelContainer> getActiveProfileContainers( List<InterpolatorP
     {
         ModelDataSource dataSource = new DefaultModelDataSource( modelProperties, PomTransformer.MODEL_CONTAINER_FACTORIES );
 
-        return new ProfileContext( dataSource, properties ).getActiveProfiles();
+        return new ProfileContext( dataSource, null, properties ).getActiveProfiles();
     }
 
     public ArtifactBasicMetadata getParentMetadata()

File: maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -460,7 +460,7 @@ private static String safeVersionlessKey( String groupId, String artifactId )
     private static void setBuildOutputDirectoryOnParent( MavenProject project )
     {
         MavenProject parent = project.getParent();
-        if ( parent != null )
+        if ( parent != null && parent.getFile() != null && parent.getModel().getBuild() != null)
         {
             parent.getModel().getBuild().setDirectory( parent.getFile().getAbsolutePath() );
             setBuildOutputDirectoryOnParent( parent );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0479OverrideCentralRepoTest.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
-import java.util.Collections;
 import java.util.Properties;
 
 /**
@@ -60,7 +59,9 @@ public void testitMNG479()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
 
-        verifier.setCliOptions( Collections.singletonList( "-s settings.xml" ) );
+        verifier.filterFile( "settings.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.getCliOptions().add( "--settings" );
+        verifier.getCliOptions().add( "settings.xml" );
         verifier.executeGoal( "org.apache.maven.its.plugins:maven-it-plugin-expression:2.1-SNAPSHOT:eval" );
         verifier.verifyErrorFreeLog();
         verifier.resetStreams();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0505VersionRangeTest.java
Patch:
@@ -47,6 +47,9 @@ public void testitMNG505()
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.deleteArtifacts( "org.apache.maven.its.mng0505" );
+        verifier.filterFile( "settings.xml", "settings.xml", "UTF-8", verifier.newDefaultFilterProperties() );
+        verifier.getCliOptions().add( "--settings" );
+        verifier.getCliOptions().add( "settings.xml" );
         verifier.executeGoal( "validate" );
         verifier.verifyErrorFreeLog();
         verifier.resetStreams();

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -90,6 +90,7 @@ public static Test suite()
         // suite.addTestSuite( MavenIT0109ReleaseUpdateTest.class );
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng4016PrefixedPropertyInterpolationTest.class );
         suite.addTestSuite( MavenITmng4009InheritProfileEffectsTest.class );
         suite.addTestSuite( MavenITmng4008MergedFilterOrderTest.class );
         suite.addTestSuite( MavenITmng4007PlatformFileSeparatorTest.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0553SettingsAuthzEncryptionTest.java
Patch:
@@ -50,7 +50,7 @@ public void testit0553()
         List cliOptions = new ArrayList();
         cliOptions.add( "--settings" );
         cliOptions.add( "settings.xml" );
-        cliOptions.add( "-Dmaven.sec.path=sec.xml" );
+        verifier.getSystemProperties().setProperty( "maven.sec.path", "settings-security.xml" );
         verifier.setCliOptions( cliOptions );
         verifier.executeGoal( "validate" );
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3600DeploymentModeDefaultsTest.java
Patch:
@@ -47,6 +47,7 @@ public void testitMNG3600NoSettings()
 
         List cliOptions = new ArrayList();
         verifier.setCliOptions( cliOptions );
+        verifier.setLogFileName( "log-no-settings.txt" );
         verifier.executeGoal( "deploy" );
 
         verifier.assertFilePresent( "target/wagon.properties" );
@@ -72,6 +73,7 @@ public void testitMNG3600ServerDefaults()
         cliOptions.add( "--settings" );
         cliOptions.add( "settings-server-defaults.xml" );
         verifier.setCliOptions( cliOptions );
+        verifier.setLogFileName( "log-server-defaults.txt" );
         verifier.executeGoal( "deploy" );
 
         verifier.assertFilePresent( "target/wagon.properties" );
@@ -97,6 +99,7 @@ public void testitMNG3600ModesSet()
         cliOptions.add( "--settings" );
         cliOptions.add( "settings-modes-set.xml" );
         verifier.setCliOptions( cliOptions );
+        verifier.setLogFileName( "log-modes-set.txt" );
         verifier.executeGoal( "deploy" );
 
         verifier.assertFilePresent( "target/wagon.properties" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3760BaseUriPropertyTest.java
Patch:
@@ -51,6 +51,7 @@ public void testitMNG3760()
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
+        verifier.setLogFileName( "log-basic.txt" );
         verifier.executeGoal( "validate" );
         verifier.verifyErrorFreeLog();
         verifier.resetStreams();
@@ -73,6 +74,7 @@ public void testitMNG3760SystemPropertyOverride()
         verifier.deleteDirectory( "target" );
         List cliOptions = Collections.singletonList( "-DbaseUri=myBaseUri" );
         verifier.setCliOptions( cliOptions );
+        verifier.setLogFileName( "log-sysprop.txt" );
         verifier.executeGoal( "validate" );
         verifier.verifyErrorFreeLog();
         verifier.resetStreams();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0553SettingsAuthzEncryptionTest.java
Patch:
@@ -32,8 +32,8 @@ public class MavenITmng0553SettingsAuthzEncryptionTest
 {
     public MavenITmng0553SettingsAuthzEncryptionTest()
     {
-        super( "(2.1.0-M1,2.99)" ); // 2.1.0-M2+
-        //super( "(2.0.9,2.1.0-M1),(2.1.0-M1,2.1.99)" ); // 2.0.10+, excluding 2.1.0-M1
+        // TODO: reintroduce for 3.0
+        super( "(2.1.0-M1,3.0-alpha-1),(3.0-alpha-3,)" ); // 2.1.0-M2+
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1830ShowVersionTest.java
Patch:
@@ -40,7 +40,7 @@ public class MavenITmng1830ShowVersionTest
     public MavenITmng1830ShowVersionTest()
     {
         // TODO: reinstate for 3.0
-        super( "(2.0.10,2.1.0-M1),(2.1.0-M1,2.999)" ); // Maven 2.0.11 + , 2.1.0-M2 +
+        super( "(2.0.10,2.1.0-M1),(2.1.0-M1,3.0-alpha-1),(3.0-alpha-3,)" ); // Maven 2.0.11 + , 2.1.0-M2 +
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2668UsePluginDependenciesForSortingTest.java
Patch:
@@ -29,7 +29,7 @@ public class MavenITmng2668UsePluginDependenciesForSortingTest
 {
     public MavenITmng2668UsePluginDependenciesForSortingTest()
     {
-        // TODO: estimated fix by 3.0-alpha-3
+        // TODO: estimated fix by 3.0-alpha-4
         super( "(2.1.0-M1,3.0-alpha-1),(3.0-alpha-3,)" ); // 2.1.0-M2+
     }
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3599useHttpProxyForWebDAVTest.java
Patch:
@@ -182,8 +182,8 @@ public void testmng3599useHttpProxyForHttp()
     public void testmng3599useHttpProxyForWebDAV()
         throws Exception
     {
-        // Doesn't work until 2.1.0-M1+
-        if ( matchesVersionRange( "[2.1.0-M1, 2.99.99)" ) )
+        // TODO: implement equivalent test for 3.0 once supported
+        if ( matchesVersionRange( "[2.1.0-M1,3.0-alpha-1),(3.0-alpha-3,)" ) ) //2.1.0-M1+
         {
             File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3599" );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3600DeploymentModeDefaultsTest.java
Patch:
@@ -32,7 +32,8 @@ public class MavenITmng3600DeploymentModeDefaultsTest
 {
     public MavenITmng3600DeploymentModeDefaultsTest()
     {
-        super( "(2.1.0-M1,)" );
+        // TODO: implement for 3.0
+        super( "(2.1.0-M1,3.0-alpha-1),(3.0-alpha-3,)" );
     }
 
     public void testitMNG3600NoSettings()

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3652UserAgentHeaderTest.java
Patch:
@@ -46,7 +46,8 @@ public class MavenITmng3652UserAgentHeaderTest
 
     public MavenITmng3652UserAgentHeaderTest()
     {
-        super( "[2.1.0-M1,2.99.99)" );
+        // TODO: re-instate feature in 3.0
+        super( "[2.1.0-M1,3.0-alpha-1),(3.0-alpha-3,)" ); // 2.1.0-M1+
     }
 
     public void setUp()

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3729MultiForkAggregatorsTest.java
Patch:
@@ -52,7 +52,7 @@ public class MavenITmng3729MultiForkAggregatorsTest
 {
     public MavenITmng3729MultiForkAggregatorsTest()
     {
-        super( "(2.0.8,2.99.99)" ); // only test in 2.0.9+
+        super( "(2.0.8,3.0-alpha-1),(3.0-alpha-3,)" ); // only test in 2.0.9+
         //TODO: FIX: Disabled for 3.0.x, causes infinite looping on Mac.
     }
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3760BaseUriPropertyTest.java
Patch:
@@ -39,7 +39,8 @@ public class MavenITmng3760BaseUriPropertyTest
 
     public MavenITmng3760BaseUriPropertyTest()
     {
-        super( "(2.1.0-M1,3.0-alpha-1),(3.0-alpha-1,)" ); // 2.1.0-M2+, 3.0-alpha-2+
+        // TODO: fix for 3.0
+        super( "(2.1.0-M1,3.0-alpha-1),(3.0-alpha-3,)" ); // 2.1.0-M2+
     }
 
     public void testitMNG3760()

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3810BadProfileActivationTest.java
Patch:
@@ -37,7 +37,8 @@ public class MavenITmng3810BadProfileActivationTest
 
     public MavenITmng3810BadProfileActivationTest()
     {
-        super( "(2.0.10,2.1.0-M1),(2.1.0-M1,3.0-alpha-1),(3.0-alpha-1,)" ); // 2.0.10+, 2.1.0-M2+, 3.0-alpha-2+ 
+        // TODO: implement for 3.0
+        super( "(2.0.10,2.1.0-M1),(2.1.0-M1,3.0-alpha-1),(3.0-alpha-3,)" ); // 2.0.11+, 2.1.0-M2+
     }
 
     public void testitMNG3810Property()

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3920PlexusComponentApiTest.java
Patch:
@@ -33,7 +33,8 @@ public class MavenITmng3920PlexusComponentApiTest
 {
     public MavenITmng3920PlexusComponentApiTest()
     {
-        super( "(2.0.10,2.1.0-M1),(2.1.0-M1,)" ); // only test in 2.0.11+, and not in 2.1.0-M1
+        // TODO: implement for 3.0
+        super( "(2.0.10,2.1.0-M1),(2.1.0-M1,3.0-alpha-1),(3.0-alpha-3,)" ); // 2.0.11+, 2.1.0-M2+
     }
 
     public void testitMNG3920()

File: maven-project-builder/src/main/java/org/apache/maven/project/builder/PomTransformer.java
Patch:
@@ -95,6 +95,8 @@ public PomTransformer(DomainModelFactory factory)
                                                                           ProjectUri.Build.Resources.Resource.excludes,
                                                                           ProjectUri.Build.TestResources.xUri,
 
+                                                                          ProjectUri.Build.Filters.xUri,
+
                                                                           ProjectUri.CiManagement.Notifiers.xUri,
 
                                                                           ProjectUri.Contributors.xUri,
@@ -152,7 +154,7 @@ public PomTransformer(DomainModelFactory factory)
                                                                          ProjectUri.Build.scriptSourceDirectory,
                                                                          ProjectUri.Build.Resources.Resource.directory,
                                                                          ProjectUri.Build.TestResources.TestResource.directory,
-                                                                         ProjectUri.Build.filters + "/filter",
+                                                                         ProjectUri.Build.Filters.filter,
                                                                          ProjectUri.Reporting.outputDirectory ) ) );
 
     /**

File: maven-project-builder/src/main/java/org/apache/maven/project/builder/PomTransformer.java
Patch:
@@ -59,16 +59,16 @@ public PomTransformer(DomainModelFactory factory)
                      null, goals_infos)
             );
 
-
+    //Don't add subcontainers here, breaks MNG-3821
     public static final Collection<ModelContainerInfo> MODEL_CONTAINER_INFOS = Arrays.asList(
             ModelContainerInfo.Factory.createModelContainerInfo(
                     new ArtifactModelContainerFactory(), null, plugin_executions),
             ModelContainerInfo.Factory.createModelContainerInfo(
                     new IdModelContainerFactory(ProjectUri.PluginRepositories.PluginRepository.xUri), null, null),
             ModelContainerInfo.Factory.createModelContainerInfo(
                     new IdModelContainerFactory(ProjectUri.Repositories.Repository.xUri), null, null),
-            ModelContainerInfo.Factory.createModelContainerInfo(
-                    new IdModelContainerFactory(ProjectUri.Reporting.Plugins.Plugin.ReportSets.ReportSet.xUri), null, null),
+           // ModelContainerInfo.Factory.createModelContainerInfo(
+           //         new IdModelContainerFactory(ProjectUri.Reporting.Plugins.Plugin.ReportSets.ReportSet.xUri), null, null),
             ModelContainerInfo.Factory.createModelContainerInfo(
                     new IdModelContainerFactory(ProjectUri.Profiles.Profile.xUri), null, null)
     );

File: maven-project/src/test/java/org/apache/maven/project/builder/PomConstructionTest.java
Patch:
@@ -91,7 +91,7 @@ public void testErroneousJoiningOfDifferentPluginsWithEqualDependencies()
         assertEquals( 1, ( (List<?>) pom.getValue( "build/plugins[1]/dependencies" ) ).size() );
     }
 
-    /** MNG-3821 FIX THIS
+    /** MNG-3821 */
     public void testErroneousJoiningOfDifferentPluginsWithEqualExecutionIds()
         throws Exception
     {
@@ -105,7 +105,7 @@ public void testErroneousJoiningOfDifferentPluginsWithEqualExecutionIds()
         assertEquals( "maven-it-plugin-b", pom.getValue( "reporting/plugins[2]/artifactId" ) );
         assertEquals( 1, ( (List<?>) pom.getValue( "reporting/plugins[1]/reportSets" ) ).size() );
     }
-      */
+
      /** MNG-3998 */
     public void testExecutionConfiguration()
         throws Exception
@@ -145,6 +145,7 @@ public void testFoo()
         throws Exception
     {
         PomTestWrapper pom = buildPom( "foo/sub" );
+        System.out.println(pom.getDomainModel().asString());
     }
 
     /** MNG-3985 */

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3271DefaultReportsSuppressionTest.java
Patch:
@@ -37,7 +37,7 @@ public class MavenITmng3271DefaultReportsSuppressionTest
 
     public MavenITmng3271DefaultReportsSuppressionTest()
     {
-        super( "(2.9999,)" );
+        super( "(2.0.9,2.1.0-M1),(2.1.0-M1,)" );
     }
 
     /**

File: maven-project-builder/src/main/java/org/apache/maven/project/builder/PomTransformer.java
Patch:
@@ -361,11 +361,12 @@ public final DomainModel transformToDomainModel( List<ModelProperty> properties,
                             Arrays.asList(new IdModelContainerFactory(ProjectUri.Build.Plugins.Plugin.Executions.Execution.xUri),
                                     new AlwaysJoinModelContainerFactory()));
             for(ModelContainer es : executionSource.queryFor( ProjectUri.Build.Plugins.Plugin.Executions.Execution.xUri )) {
-                ModelContainerRule rule = new ExecutionRule();
+                ExecutionRule rule = new ExecutionRule();
                 //List<ModelProperty> x = rule.execute(es.getProperties());
                 List<ModelProperty> x = (!foobar.containsAll(es.getProperties())) ? rule.execute(es.getProperties()) :
                         ModelTransformerContext.sort(rule.execute(es.getProperties()),
                                 ProjectUri.Build.Plugins.Plugin.Executions.Execution.xUri);
+                
                 dataSource.replace(es, es.createNewInstance(x));
             }
         }

File: maven-project/src/main/java/org/apache/maven/project/builder/PomClassicDomainModel.java
Patch:
@@ -297,6 +297,7 @@ public List<ModelProperty> getModelProperties() throws IOException
             s.add(ProjectUri.Build.PluginManagement.Plugins.Plugin.Executions.xUri);
             s.add(ProjectUri.Build.Plugins.Plugin.Executions.xUri);
             s.add(ProjectUri.Build.Plugins.Plugin.Executions.Execution.Goals.xURI);
+            s.add(ProjectUri.Build.Plugins.Plugin.Executions.Execution.configuration);
             modelProperties = ModelMarshaller.marshallXmlToModelProperties(
                 getInputStream(), ProjectUri.baseUri, s );
         }

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -137,6 +137,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng3813PluginClassPathOrderingTest.class );
         suite.addTestSuite( MavenITmng3805ExtensionClassPathOrderingTest.class );
         suite.addTestSuite( MavenITmng3796ClassImportInconsistencyTest.class );
+        suite.addTestSuite( MavenITmng3769ExclusionRelocatedTransdepsTest.class );
         suite.addTestSuite( MavenITmng3748BadSettingsXmlTest.class );
         suite.addTestSuite( MavenITmng3747PrefixedPathExpressionTest.class );
         suite.addTestSuite( MavenITmng3746POMPropertyOverrideTest.class );

File: maven-project/src/test/java/org/apache/maven/project/builder/PomConstructionTest.java
Patch:
@@ -114,11 +114,12 @@ public void testMultipleRepositories()
         assertEquals( 3, ( (List<?>) pom.getValue( "repositories" ) ).size() );
     }
 
-    /** MNG-3985
+    /** MNG-3965 */
     public void testMultipleExecutionIds()
         throws Exception
     {
         PomTestWrapper pom = buildPom( "dual-execution-ids/sub" );
+       // System.out.println(pom.getDomainModel().asString());
         assertEquals( 1, ( (List<?>) pom.getValue( "build/plugins[1]/executions" ) ).size() );
     }
     //*/

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -249,7 +249,6 @@ public static Test suite()
         suite.addTestSuite( MavenITmng0956ComponentInjectionViaProjectLevelPluginDepTest.class );
         suite.addTestSuite( MavenITmng0870ReactorAwarePluginDiscoveryTest.class );
         suite.addTestSuite( MavenITmng0866EvaluateDefaultValueTest.class );
-        suite.addTestSuite( MavenITmng0851CustomPomFilenameTest.class );
         suite.addTestSuite( MavenITmng0848SystemPropOverridesDefaultValueTest.class );
         suite.addTestSuite( MavenITmng0836PluginParentResolutionTest.class );
         suite.addTestSuite( MavenITmng0823MojoContextPassingTest.class );

File: its/core-it-support/core-it-plugins/maven-it-plugin-log-file/src/main/java/org/apache/maven/plugin/coreit/ResetMojo.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.maven.plugin.MojoExecutionException;
 
 /**
- * Appends a string to the log file.
+ * Clears the contents of the log file by creating a new empty log file.
  * 
  * @goal reset
  * @phase initialize

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -201,6 +201,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng2865MirrorWildcardTest.class );
         suite.addTestSuite( MavenITmng2861RelocationsAndRangesTest.class );
         suite.addTestSuite( MavenITmng2843PluginConfigPropertiesInjectionTest.class );
+        suite.addTestSuite( MavenITmng2831CustomArtifactHandlerAndCustomLifecycleTest.class );
         suite.addTestSuite( MavenITmng2790LastUpdatedMetadataTest.class );
         suite.addTestSuite( MavenITmng2749ExtensionAvailableToPluginTest.class );
         suite.addTestSuite( MavenITmng2744checksumVerificationTest.class );
@@ -291,7 +292,6 @@ public static Test suite()
         suite.addTestSuite( MavenIT0132PomLifecycleTest.class );
         suite.addTestSuite( MavenIT0131SiteLifecycleTest.class );
         suite.addTestSuite( MavenIT0130CleanLifecycleTest.class );
-        suite.addTestSuite( MavenIT0115CustomArtifactHandlerAndCustomLifecycleTest.class );
         suite.addTestSuite( MavenIT0113ServerAuthzAvailableToWagonMgrInPluginTest.class );
         suite.addTestSuite( MavenIT0090Test.class );
         suite.addTestSuite( MavenIT0087Test.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2831CustomArtifactHandlerAndCustomLifecycleTest.java
Patch:
@@ -24,11 +24,11 @@
 
 import java.io.File;
 
-public class MavenIT0115CustomArtifactHandlerAndCustomLifecycleTest
+public class MavenITmng2831CustomArtifactHandlerAndCustomLifecycleTest
     extends AbstractMavenIntegrationTestCase
 {
 
-    public MavenIT0115CustomArtifactHandlerAndCustomLifecycleTest()
+    public MavenITmng2831CustomArtifactHandlerAndCustomLifecycleTest()
     {
         super( "(2.0.1,2.0.5),(2.0.6,2.99.99)" ); //extension support removed from 3.0
     }
@@ -39,7 +39,7 @@ public MavenIT0115CustomArtifactHandlerAndCustomLifecycleTest()
     public void testitMNG2831()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/it0115" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-2831" );
 
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
         verifier.setAutoclean( false );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -82,7 +82,6 @@ public static Test suite()
         // suite.addTestSuite( MavenITmng3023ReactorDependencyResolutionTest.class );
         // suite.addTestSuite( MavenITmng2994SnapshotRangeRepositoryTest.class );
         // suite.addTestSuite( MavenITmng2771PomExtensionComponentOverrideTest.class );
-        // suite.addTestSuite( MavenITmng2605BogusProfileActivationTest.class );
         // suite.addTestSuite( MavenITmng0612NewestConflictResolverTest.class );
 
         // -------------------------------------------------------------------------------------------------------------
@@ -207,6 +206,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng2744checksumVerificationTest.class );
         suite.addTestSuite( MavenITmng2739RequiredRepositoryElementsTest.class );
         suite.addTestSuite( MavenITmng2695OfflinePluginSnapshotsTest.class );
+        suite.addTestSuite( MavenITmng2605BogusProfileActivationTest.class );
         suite.addTestSuite( MavenITmng2591MergeInheritedPluginConfigTest.class );
         suite.addTestSuite( MavenITmng2562TimestampTest.class );
         suite.addTestSuite( MavenITmng2539PluginDependenciesComeFromPluginReposTest.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2605BogusProfileActivationTest.java
Patch:
@@ -37,7 +37,7 @@ public class MavenITmng2605BogusProfileActivationTest
 
     public MavenITmng2605BogusProfileActivationTest()
     {
-        super();
+        super( "(2.0.10,2.1.0-M1),(2.1.0-M1,3.0-alpha-1),(3.0-alpha-1,)" );
     }
 
     /**

File: maven-project/src/main/java/org/apache/maven/profiles/injection/DefaultProfileInjector.java
Patch:
@@ -58,6 +58,7 @@ public void inject( Profile profile, Model model )
         injectModules( profile, model );
 
         model.setRepositories( ModelUtils.mergeRepositoryLists( profile.getRepositories(), model.getRepositories() ) );
+        model.setPluginRepositories( ModelUtils.mergeRepositoryLists( profile.getPluginRepositories(), model.getPluginRepositories() ) );
 
         injectReporting( profile, model );
 

File: maven-mercury/src/main/java/org/apache/maven/mercury/MavenDependencyProcessor.java
Patch:
@@ -120,8 +120,7 @@ public List<ArtifactBasicMetadata> getDependencies( ArtifactBasicMetadata bmd, M
 
         PomTransformer transformer = new PomTransformer( new MavenDomainModelFactory() );
         ModelTransformerContext ctx =
-            new ModelTransformerContext( Arrays.asList( new ArtifactModelContainerFactory(),
-                                                        new IdModelContainerFactory() ) );
+            new ModelTransformerContext( PomTransformer.MODEL_CONTAINER_FACTORIES );
 
         try
         {

File: maven-project-builder/src/test/java/org/apache/maven/project/builder/EnforcerPomTest.java
Patch:
@@ -44,14 +44,13 @@ public void dependencyManagementWithScopeAndClassifier() throws IOException
         DomainModel childModel = new DefaultDomainModel(mp2);
         DomainModel parentModel = new DefaultDomainModel(mp);
 
-        ModelTransformerContext ctx = new ModelTransformerContext(Arrays.asList(new ArtifactModelContainerFactory(),
-                new IdModelContainerFactory()));
+        ModelTransformerContext ctx = new ModelTransformerContext(PomTransformer.MODEL_CONTAINER_FACTORIES );
 
         ModelTransformer transformer = new PomTransformer(new DefaultDomainModelFactory());
         DomainModel domainModel = ctx.transform( Arrays.asList(childModel, parentModel), transformer, transformer );
 
         DefaultModelDataSource source = new DefaultModelDataSource();
-        source.init(domainModel.getModelProperties(), Arrays.asList(new ArtifactModelContainerFactory(), new IdModelContainerFactory()));
+        source.init(domainModel.getModelProperties(), PomTransformer.MODEL_CONTAINER_FACTORIES );
         List<ModelContainer> containers = source.queryFor(ProjectUri.Dependencies.Dependency.xUri);
         assertTrue(containers.size() == 2 );
 

File: maven-project-builder/src/test/java/org/apache/maven/project/builder/profile/ProfileContextTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.apache.maven.project.builder.profile;
 
 import org.apache.maven.project.builder.profile.ProfileContext;
+import org.apache.maven.project.builder.PomTransformer;
 import org.apache.maven.project.builder.ProjectUri;
 import org.apache.maven.project.builder.ArtifactModelContainerFactory;
 import org.apache.maven.project.builder.IdModelContainerFactory;
@@ -30,7 +31,7 @@ public void getActiveProfiles() throws DataSourceException {
         modelProperties.add(new ModelProperty(ProjectUri.Profiles.Profile.Activation.Property.value , "bar"));
 
         DefaultModelDataSource dataSource = new DefaultModelDataSource();
-        dataSource.init(modelProperties, Arrays.asList(new ArtifactModelContainerFactory(), new IdModelContainerFactory()));
+        dataSource.init(modelProperties, PomTransformer.MODEL_CONTAINER_FACTORIES );
 
         List<InterpolatorProperty> interpolatorProperties = new ArrayList<InterpolatorProperty>();
         interpolatorProperties.add(new InterpolatorProperty( "${foo}", "bar"));

File: maven-project/src/main/java/org/apache/maven/project/builder/impl/DefaultProjectBuilder.java
Patch:
@@ -43,6 +43,7 @@
 import org.apache.maven.project.builder.PomClassicDomainModel;
 import org.apache.maven.project.builder.PomClassicDomainModelFactory;
 import org.apache.maven.project.builder.PomClassicTransformer;
+import org.apache.maven.project.builder.PomTransformer;
 import org.apache.maven.project.builder.ProjectBuilder;
 import org.apache.maven.shared.model.DomainModel;
 import org.apache.maven.shared.model.InterpolatorProperty;
@@ -156,8 +157,7 @@ public PomClassicDomainModel buildModel( File pom,
         
         PomClassicTransformer transformer = new PomClassicTransformer( new PomClassicDomainModelFactory() );
         
-        ModelTransformerContext ctx = new ModelTransformerContext(
-            Arrays.asList( new ArtifactModelContainerFactory(), new IdModelContainerFactory() ) );
+        ModelTransformerContext ctx = new ModelTransformerContext(PomTransformer.MODEL_CONTAINER_FACTORIES );
         
         PomClassicDomainModel transformedDomainModel = ( (PomClassicDomainModel) ctx.transform( domainModels,
                                                                                                 transformer,

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3599useHttpProxyForWebDAVTest.java
Patch:
@@ -226,7 +226,7 @@ public void testmng3599useHttpProxyForWebDAV()
         }
         else
         {
-            System.out.print( " [skipping DAV test for Maven versions < 2.0.10]" );
+            System.out.print( " [skipping DAV test for Maven versions < 2.1.0-M1] " );
         }
     }
 }

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -291,7 +291,6 @@ public static Test suite()
         suite.addTestSuite( MavenIT0130CleanLifecycleTest.class );
         suite.addTestSuite( MavenIT0115CustomArtifactHandlerAndCustomLifecycleTest.class );
         suite.addTestSuite( MavenIT0113ServerAuthzAvailableToWagonMgrInPluginTest.class );
-        suite.addTestSuite( MavenIT0097Test.class );
         suite.addTestSuite( MavenIT0090Test.class );
         suite.addTestSuite( MavenIT0087Test.class );
         suite.addTestSuite( MavenIT0086Test.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -82,6 +82,7 @@ public static Test suite()
         // suite.addTestSuite( MavenITmng3023ReactorDependencyResolutionTest.class );
         // suite.addTestSuite( MavenITmng2994SnapshotRangeRepositoryTest.class );
         // suite.addTestSuite( MavenITmng2771PomExtensionComponentOverrideTest.class );
+        // suite.addTestSuite( MavenITmng2605BogusProfileActivationTest.class );
         // suite.addTestSuite( MavenITmng0612NewestConflictResolverTest.class );
 
         // -------------------------------------------------------------------------------------------------------------

File: maven-project/src/test/java/org/apache/maven/project/inheritance/t10/ProjectInheritanceTest.java
Patch:
@@ -82,7 +82,7 @@ public void testDependencyManagementOverridesTransitiveDependencyVersion()
         assertNotNull( c );
 
         // inherited from depMgmt
-        assertTrue("Incorrect scope for " + a.getDependencyConflictId(), a.getScope().equals("test"));
+        assertTrue("Incorrect scope for " + a.getDependencyConflictId(), a.getScope().equals("compile"));
 
         // transitive dep, overridden b depMgmt
         assertTrue("Incorrect scope for " + b.getDependencyConflictId(), b.getScope().equals("runtime"));

File: maven-compat/src/test/java/org/apache/maven/artifact/manager/DefaultWagonManagerTest.java
Patch:
@@ -585,6 +585,8 @@ public void testMirrorStopOnFirstMatch()
         //exact matches win first
         wagonManager.addMirror( "a2", "a,b", "http://a2" );
         wagonManager.addMirror( "a", "a", "http://a" );
+        //make sure repeated entries are skipped
+        wagonManager.addMirror( "a", "a", "http://a3" );
         
         wagonManager.addMirror( "b", "b", "http://b" );
         wagonManager.addMirror( "c", "d,e", "http://de" );

File: maven-project/src/test/java/org/apache/maven/project/builder/PomConstructionTest.java
Patch:
@@ -166,14 +166,14 @@ public void testMergeOfPluginExecutionsWhenChildInheritsPluginVersion()
         assertEquals( 4, ( (List<?>) pom.getValue( "build/plugins[1]/executions" ) ).size() );
     }
 
-    /* FIXME: cf. MNG-3943
+    /* FIXME: cf. MNG-3943*/
     public void testMergeOfPluginExecutionsWhenChildAndParentUseDifferentPluginVersions()
         throws Exception
     {
         PomTestWrapper pom = buildPom( "plugin-exec-merging-version-insensitive/sub" );
         assertEquals( 4, ( (List<?>) pom.getValue( "build/plugins[1]/executions" ) ).size() );
     }
-    //*/
+
 
     public void testInterpolationWithXmlMarkup()
         throws Exception

File: maven-project/src/test/java/org/apache/maven/project/builder/PomConstructionTest.java
Patch:
@@ -410,15 +410,15 @@ public void testInterpolationWithBasedirAlignedDirectories()
                       new File( pom.getValue( "properties/siteOut" ).toString() ) );
     }
 
-    /* FIXME: cf. MNG-3944
+    /* FIXME: cf. MNG-3944*/
     public void testInterpolationOfBasedirInPomWithUnusualName()
         throws Exception
     {
         PomTestWrapper pom = buildPom( "basedir-interpolation/pom-with-unusual-name.xml" );
         assertEquals( pom.getBasedir(), new File( pom.getValue( "properties/prop0" ).toString() ) );
         assertEquals( pom.getBasedir(), new File( pom.getValue( "properties/prop1" ).toString() ) );
     }
-    //*/
+   
 
     private PomArtifactResolver artifactResolver( String basedir )
     {

File: maven-project/src/test/java/org/apache/maven/project/builder/PomConstructionTest.java
Patch:
@@ -243,7 +243,7 @@ public void testOverridingOfInheritedPluginExecutionsWithoutPluginManagement()
         assertEquals( "child-non-default", pom.getValue( "build/plugins[1]/executions[@id='non-default']/phase" ) );
     }
 
-    /* FIXME: cf. MNG-3938
+    /* FIXME: cf. MNG-3938 */
     public void testOverridingOfInheritedPluginExecutionsWithPluginManagement()
         throws Exception
     {
@@ -252,7 +252,7 @@ public void testOverridingOfInheritedPluginExecutionsWithPluginManagement()
         assertEquals( "child-default", pom.getValue( "build/plugins[1]/executions[@id='default']/phase" ) );
         assertEquals( "child-non-default", pom.getValue( "build/plugins[1]/executions[@id='non-default']/phase" ) );
     }
-    //*/
+    
 
     /* FIXME: cf. MNG-3906
     public void testOrderOfMergedPluginDependenciesWithoutPluginManagement()

File: maven-core/src/main/java/org/apache/maven/plugin/PluginParameterExpressionEvaluator.java
Patch:
@@ -336,7 +336,6 @@ else if ( expression.startsWith( "plugin" ) )
         else if ( "settings".equals( expression ) )
         {
             value = context.getSettings();
-            System.out.println( value );
         }
         else if ( expression.startsWith( "settings" ) )
         {

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3873MultipleExecutionGoalsTest.java
Patch:
@@ -43,7 +43,7 @@ public MavenITmng3873MultipleExecutionGoalsTest()
      * Test that all goals from a plugin execution are actually executed and not only one when no <pluginManagement>
      * is involved.
      */
-    public void testitWithoutPluginManagement()
+    public void testitWithoutPluginMngt()
         throws Exception
     {
         testitMNG3873( "test-1" );
@@ -53,7 +53,7 @@ public void testitWithoutPluginManagement()
      * Test that all goals from a plugin execution are actually executed and not only one when <pluginManagement>
      * is involved.
      */
-    public void testitWithPluginManagement()
+    public void testitWithPluginMngt()
         throws Exception
     {
         testitMNG3873( "test-2" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3886ExecutionGoalsOrderTest.java
Patch:
@@ -44,7 +44,7 @@ public MavenITmng3886ExecutionGoalsOrderTest()
      * Test that the goals from a plugin execution are executed in the order given by the POM when no <pluginManagement>
      * is involved.
      */
-    public void testitWithoutPluginManagement()
+    public void testitWithoutPluginMngt()
         throws Exception
     {
         testitMNG3886( "test-1" );
@@ -54,7 +54,7 @@ public void testitWithoutPluginManagement()
      * Test that the goals from a plugin execution are executed in the order given by the POM when <pluginManagement>
      * is involved.
      */
-    public void testitWithPluginManagement()
+    public void testitWithPluginMngt()
         throws Exception
     {
         testitMNG3886( "test-2" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3887PluginExecutionOrderTest.java
Patch:
@@ -44,7 +44,7 @@ public MavenITmng3887PluginExecutionOrderTest()
      * Test that multiple plugin executions bound to the same phase are executed in the order given by the POM when no
      * <pluginManagement> is involved.
      */
-    public void testitWithoutPluginManagement()
+    public void testitWithoutPluginMngt()
         throws Exception
     {
         testitMNG3887( "test-1" );
@@ -54,7 +54,7 @@ public void testitWithoutPluginManagement()
      * Test that multiple plugin executions bound to the same phase are executed in the order given by the POM when
      * <pluginManagement> is involved.
      */
-    public void testitWithPluginManagement()
+    public void testitWithPluginMngt()
         throws Exception
     {
         testitMNG3887( "test-2" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3925MergedPluginExecutionOrderTest.java
Patch:
@@ -44,7 +44,7 @@ public MavenITmng3925MergedPluginExecutionOrderTest()
      * Test that multiple plugin executions bound to the same phase by child and parent are executed in the proper
      * order when no <pluginManagement> is involved.
      */
-    public void testitWithoutPluginManagement()
+    public void testitWithoutPluginMngt()
         throws Exception
     {
         testitMNG3925( "test-1" );
@@ -54,7 +54,7 @@ public void testitWithoutPluginManagement()
      * Test that multiple plugin executions bound to the same phase by child and parent are executed in the proper
      * order when <pluginManagement> is involved.
      */
-    public void testitWithPluginManagement()
+    public void testitWithPluginMngt()
         throws Exception
     {
         testitMNG3925( "test-2" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3937MergedPluginExecutionGoalsTest.java
Patch:
@@ -44,7 +44,7 @@ public MavenITmng3937MergedPluginExecutionGoalsTest()
      * Test that during inheritance/merging of a plugin execution the goals specified by child and parent are properly
      * ordered when no <pluginManagement> is involved.
      */
-    public void testitWithoutPluginManagement()
+    public void testitWithoutPluginMngt()
         throws Exception
     {
         testitMNG3937( "test-1" );
@@ -54,7 +54,7 @@ public void testitWithoutPluginManagement()
      * Test that during inheritance/merging of a plugin execution the goals specified by child and parent are properly
      * ordered when <pluginManagement> is involved.
      */
-    public void testitWithPluginManagement()
+    public void testitWithPluginMngt()
         throws Exception
     {
         testitMNG3937( "test-2" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3938MergePluginExecutionsTest.java
Patch:
@@ -46,7 +46,7 @@ public MavenITmng3938MergePluginExecutionsTest()
      * default id, regardless whether the id is given explicitly by the user or implicitly assumed from defaults, when
      * no <pluginManagement> is involved.
      */
-    public void testitWithoutPluginManagement()
+    public void testitWithoutPluginMngt()
         throws Exception
     {
         testitMNG3938( "test-1" );
@@ -57,7 +57,7 @@ public void testitWithoutPluginManagement()
      * default id, regardless whether the id is given explicitly by the user or implicitly assumed from defaults, when
      * <pluginManagement> is involved.
      */
-    public void testitWithPluginManagement()
+    public void testitWithPluginMngt()
         throws Exception
     {
         testitMNG3938( "test-2" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3953AuthenticatedDeploymentTest.java
Patch:
@@ -74,7 +74,7 @@ public void handle( String target, HttpServletRequest request, HttpServletRespon
                 if ( "PUT".equalsIgnoreCase( request.getMethod() ) )
                 {
                     response.setStatus( HttpServletResponse.SC_OK );
-                    MavenITmng3953AuthenticatedDeploymentTest.this.deployed = true;
+                    deployed = true;
                 }
                 else
                 {
@@ -155,7 +155,6 @@ private void testitMNG3953( String project )
         verifier.getCliOptions().add( new File( testDir, "settings.xml" ).getAbsolutePath() );
         verifier.getCliOptions().add( "-DdeploymentPort=" + port );
         verifier.executeGoal( "validate" );
-        verifier.displayStreamBuffers();
         verifier.verifyErrorFreeLog();
         verifier.resetStreams();
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -90,6 +90,7 @@ public static Test suite()
         // suite.addTestSuite( MavenIT0109ReleaseUpdateTest.class );
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng3947PluginDefaultExecutionConfigTest.class );
         suite.addTestSuite( MavenITmng3944BasedirInterpolationTest.class );
         suite.addTestSuite( MavenITmng3943PluginExecutionInheritanceTest.class );
         suite.addTestSuite( MavenITmng3940EnvVarInterpolationTest.class );

File: maven-project/src/main/java/org/apache/maven/profiles/DefaultMavenProfilesBuilder.java
Patch:
@@ -50,7 +50,7 @@ public ProfilesRoot buildProfiles( File basedir )
 
         ProfilesRoot profilesRoot = null;
 
-        if ( profilesXml.exists() )
+        if ( profilesXml.isFile() )
         {
             getLogger().debug( "reading: " + profilesXml.getAbsolutePath() );
 

File: maven-project/src/main/java/org/apache/maven/project/builder/PomClassicDomainModel.java
Patch:
@@ -153,7 +153,7 @@ public File getProjectDirectory()
 
     public boolean isPomInBuild()
     {
-        return projectDirectory != null && new File(projectDirectory, "pom.xml").exists();
+        return projectDirectory != null && new File(projectDirectory, "pom.xml").isFile();
     }
 
     /**

File: maven-project/src/main/java/org/apache/maven/project/builder/impl/DefaultProjectBuilder.java
Patch:
@@ -220,7 +220,7 @@ private boolean isParentLocal( Parent parent, File projectDirectory )
                 f = new File( f, "pom.xml" );
             }
             
-            return f.exists();
+            return f.isFile();
         }
         catch ( IOException e )
         {
@@ -290,7 +290,7 @@ private List<DomainModel> getDomainModelParentsFromLocalPath( PomClassicDomainMo
             parentFile = new File( parentFile.getAbsolutePath(), "pom.xml" );
         }
 
-        if ( !parentFile.exists() )
+        if ( !parentFile.isFile() )
         {
             throw new IOException( "File does not exist: File = " + parentFile.getAbsolutePath() );
         }

File: maven-project/src/test/java/org/apache/maven/project/builder/PomConstructionTest.java
Patch:
@@ -84,7 +84,6 @@ public void testErroneousJoiningOfDifferentPluginsWithEqualDependencies()
         assertEquals( 1, ( (List<?>) pom.getValue( "build/plugins[1]/dependencies" ) ).size() );
     }
 
-    /* FIXME: cf. MNG-3821
     public void testErroneousJoiningOfDifferentPluginsWithEqualExecutionIds()
         throws Exception
     {
@@ -98,7 +97,6 @@ public void testErroneousJoiningOfDifferentPluginsWithEqualExecutionIds()
         assertEquals( "maven-it-plugin-b", pom.getValue( "reporting/plugins[2]/artifactId" ) );
         assertEquals( 1, ( (List<?>) pom.getValue( "reporting/plugins[1]/reportSets" ) ).size() );
     }
-    */
 
     /* FIXME: cf. MNG-3886
     public void testOrderOfGoalsFromPluginExecutionWithoutPluginManagement()
@@ -204,6 +202,7 @@ public void testOrderOfMergedPluginExecutionGoalsWithPluginManagement()
     }
     //*/
 
+    /* FIXME: cf. MNG-3938
     public void testOverridingOfInheritedPluginExecutionsWithoutPluginManagement()
         throws Exception
     {
@@ -213,7 +212,6 @@ public void testOverridingOfInheritedPluginExecutionsWithoutPluginManagement()
         assertEquals( "child-non-default", pom.getValue( "build/plugins[1]/executions[@id='non-default']/phase" ) );
     }
 
-    /* FIXME: cf. MNG-3938
     public void testOverridingOfInheritedPluginExecutionsWithPluginManagement()
         throws Exception
     {

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -90,6 +90,7 @@ public static Test suite()
         // suite.addTestSuite( MavenIT0109ReleaseUpdateTest.class );
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng3938MergePluginExecutionsTest.class );
         suite.addTestSuite( MavenITmng3937MergedPluginExecutionGoalsTest.class );
         suite.addTestSuite( MavenITmng3927PluginDefaultExecutionConfigTest.class );
         suite.addTestSuite( MavenITmng3924XmlMarkupInterpolationTest.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3380ManagedRelocatedTransdepsTest.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.List;
 
 /**
- * This is a test set for <a href="http://jira.codehaus.org/browse/MNG-3877">MNG-3877</a>.
+ * This is a test set for <a href="http://jira.codehaus.org/browse/MNG-3380">MNG-3380</a>.
  * 
  * expected project.getArtifacts() results:
  *

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -91,6 +91,7 @@ public static Test suite()
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
         suite.addTestSuite( MavenITmng3927PluginDefaultExecutionConfigTest.class );
+        suite.addTestSuite( MavenITmng3924XmlMarkupInterpolationTest.class );
         suite.addTestSuite( MavenITmng3925MergedPluginExecutionOrderTest.class );
         suite.addTestSuite( MavenITmng3916PluginExecutionInheritanceTest.class );
         suite.addTestSuite( MavenITmng3906MergedPluginClassPathOrderingTest.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -90,6 +90,7 @@ public static Test suite()
         // suite.addTestSuite( MavenIT0109ReleaseUpdateTest.class );
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng3927PluginDefaultExecutionConfigTest.class );
         suite.addTestSuite( MavenITmng3925MergedPluginExecutionOrderTest.class );
         suite.addTestSuite( MavenITmng3916PluginExecutionInheritanceTest.class );
         suite.addTestSuite( MavenITmng3906MergedPluginClassPathOrderingTest.class );

File: maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java
Patch:
@@ -119,7 +119,7 @@ public CLIManager()
         
         // Adding this back in for compatibility with the verifier that hard codes this option.
         
-        options.addOption( OptionBuilder.withLongOpt( "no-plugin-registry" ).withDescription( "Display version information WITHOUT stopping build" ).create( "npr" ) );        
+        options.addOption( OptionBuilder.withLongOpt( "no-plugin-registry" ).withDescription( "Ineffective, only kept for backward compatibility" ).create( "npr" ) );
     }
 
     public CommandLine parse( String[] args )

File: maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java
Patch:
@@ -119,7 +119,7 @@ public CLIManager()
         
         // Adding this back in for compatibility with the verifier that hard codes this option.
         
-        options.addOption( OptionBuilder.withLongOpt( "--no-plugin-registry" ).withDescription( "Display version information WITHOUT stopping build" ).create( "npr" ) );        
+        options.addOption( OptionBuilder.withLongOpt( "no-plugin-registry" ).withDescription( "Display version information WITHOUT stopping build" ).create( "npr" ) );        
     }
 
     public CommandLine parse( String[] args )

File: maven-project/src/test/java/org/apache/maven/project/builder/PomConstructionTest.java
Patch:
@@ -53,7 +53,6 @@ public void testThatExecutionsWithoutIdsAreMergedAndTheChildWins()
         throws Exception
     {
         File pom = new File( testDirectory, "micromailer/micromailer-1.0.3.pom" );
-        System.out.println( pom.exists());
         PomArtifactResolver resolver = artifactResolver( "micromailer" );
         PomClassicDomainModel model = projectBuilder.buildModel( pom, null, resolver );
         // This should be 2
@@ -93,7 +92,6 @@ public FileBasedPomArtifactResolver( File basedir )
                 {
                     int i = fileName.indexOf( ".pom" );                    
                     String id = fileName.substring( 0, i );
-                    System.out.println( id );
                     artifacts.put( id, file );
                 }
             }
@@ -108,7 +106,6 @@ public void resolve( Artifact artifact )
             throws IOException
         {
             String id = artifact.getArtifactId() + "-" + artifact.getVersion();
-            System.out.println( id );
             artifact.setFile( artifacts.get( id  ) );
         }
     }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3645POMSyntaxErrorTest.java
Patch:
@@ -39,7 +39,7 @@ public class MavenITmng3645POMSyntaxErrorTest
 {
     public MavenITmng3645POMSyntaxErrorTest()
     {
-        super( "(2.0.10,)" ); // only test in 2.0.10+
+        super( "(2.0.9,2.1.0-M1),(2.1.0-M1,)" ); // only test in 2.0.10+, but not 2.1.0-M1
     }
 
     public void testitMNG3645 ()

File: maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -387,7 +387,7 @@ private MavenProject readModelFromLocalPath( String projectId, File projectDescr
         try
         {
             mavenProject = projectBuilder.buildFromLocalPath( projectDescriptor, 
-                                                              Arrays.asList( projectBuilder.getSuperModel() ), 
+                                                              null, 
                                                               interpolatorProperties, 
                                                               resolver,
                                                               config );

File: maven-project/src/main/java/org/apache/maven/project/builder/ProjectBuilder.java
Patch:
@@ -35,7 +35,6 @@
 public interface ProjectBuilder
 {
     public PomClassicDomainModel buildModel( File pom, 
-                                             List<Model> mixins,
                                              Collection<InterpolatorProperty> interpolatorProperties,
                                              PomArtifactResolver resolver ) 
         throws IOException;       

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0249ResolveDepsFromReactorTest.java
Patch:
@@ -25,7 +25,8 @@
 import java.io.File;
 
 /**
- * This is a test set for <a href="http://jira.codehaus.org/browse/MNG-249">MNG-249</a>.
+ * This is a test set for <a href="http://jira.codehaus.org/browse/MNG-249">MNG-249</a> and
+ * <a href="http://jira.codehaus.org/browse/MNG-870">MNG-870</a>.
  * 
  * @author Brett Porter
  * @version $Id$

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0095ReactorFailureBehaviorTest.java
Patch:
@@ -47,7 +47,7 @@ public void testitMNG95()
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
         verifier.deleteArtifact( "org.apache.maven.plugins", "maven-it-it-plugin", "1.0", "maven-plugin" );
         List cliOptions = new ArrayList();
-        cliOptions.add( "--no-plugin-registry --fail-never" );
+        cliOptions.add( "--fail-never" );
         verifier.setCliOptions( cliOptions );
         verifier.executeGoal( "org.apache.maven.its.plugins:maven-it-plugin-touch:touch" );
         verifier.assertFilePresent( "target/touch.txt" );

File: maven-project/src/main/java/org/apache/maven/MavenTools.java
Patch:
@@ -66,8 +66,7 @@ ArtifactRepository createLocalRepository( String url, String repositoryId )
     void findModelFromRepository( Artifact artifact, List remoteArtifactRepositories, ArtifactRepository localRepository )
         throws ProjectBuildingException;
 
-    List buildArtifactRepositories( Model model )
-        
-    throws ProjectBuildingException;
+    List buildArtifactRepositories( Model model )        
+        throws ProjectBuildingException;
     
 }

File: maven-core/src/main/java/org/apache/maven/errors/DefaultCoreErrorReporter.java
Patch:
@@ -108,7 +108,7 @@ public void reportNoGoalsSpecifiedException( MavenProject rootProject, NoGoalsSp
         addTips( CoreErrorTips.getNoGoalsTips(), writer );
         writer.write( NEWLINE );
         writer.write( NEWLINE );
-        writer.write( "Use \"mvn -?\" to show general usage information about Maven's command line." );
+        writer.write( "Use \"mvn --help\" to show general usage information about Maven's command line." );
         writer.write( NEWLINE );
         writer.write( NEWLINE );
 

File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java
Patch:
@@ -145,7 +145,7 @@ public void execute( MavenSession session, ReactorManager reactorManager, EventD
             buffer.append( "Please see\n" );
             buffer.append( "http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html\n" );
             buffer.append( "for a complete description of available lifecycle phases.\n\n" );
-            buffer.append( "Use \"mvn -?\" to show general usage information about Maven's command line.\n\n" );
+            buffer.append( "Use \"mvn --help\" to show general usage information about Maven's command line.\n\n" );
 
             throw new NoGoalsSpecifiedException( buffer.toString() );
         }

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -90,6 +90,7 @@ public static Test suite()
         // suite.addTestSuite( MavenIT0109ReleaseUpdateTest.class );
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng3904NestedBuildDirInterpolationTest.class );
         suite.addTestSuite( MavenITmng3900ProfilePropertiesInterpolationTest.class );
         suite.addTestSuite( MavenITmng3899ExtensionInheritanceTest.class );
         suite.addTestSuite( MavenITmng3892ReleaseDeploymentTest.class );

File: maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java
Patch:
@@ -55,7 +55,7 @@ public class DefaultMavenExecutionRequest
 
     private List profiles;
 
-    private List pluginGroups;
+    private List pluginGroups = new ArrayList();
 
     private boolean usePluginUpdateOverride;
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3900ProfilePropertiesInterpolationTest.java
Patch:
@@ -40,7 +40,7 @@ public MavenITmng3900ProfilePropertiesInterpolationTest()
     }
 
     /**
-     * Test that build extensions are properly merged during inheritance.
+     * Test that build properties defined via active profiles are used for interpolation.
      */
     public void testitMNG3900()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0115CustomArtifactHandlerAndCustomLifecycleTest.java
Patch:
@@ -31,7 +31,7 @@ public class MavenIT0115CustomArtifactHandlerAndCustomLifecycleTest
 {
 
     public MavenIT0115CustomArtifactHandlerAndCustomLifecycleTest() {
-        super( "(2.0.1,2.99.99)" );//extension support removed from 3.0
+        super( "(2.0.1,2.0.5),(2.0.6,2.99.99)" );//extension support removed from 3.0
     }
 
     public void testit0115()

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2196ParentResolutionTest.java
Patch:
@@ -46,7 +46,7 @@ public void testitMNG2196()
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
 
         
-        if ( matchesVersionRange( "[2.0.4, 2.99.99)" ) )
+        if ( matchesVersionRange( "(, 2.99.99)" ) )
         {
             verifier.executeGoal( "package" );
             verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3372DirectInvocationOfPluginsTest.java
Patch:
@@ -27,8 +27,6 @@
 import java.util.Arrays;
 import java.util.List;
 
-import junit.framework.TestCase;
-
 /**
  * This is a sample integration test. The IT tests typically
  * operate by having a sample project in the
@@ -43,7 +41,7 @@
  *
  */
 public class MavenITmng3372DirectInvocationOfPluginsTest
-    extends TestCase
+    extends AbstractMavenIntegrationTestCase
 {
 
     public MavenITmng3372DirectInvocationOfPluginsTest()

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3475BaseAlignedDirTest.java
Patch:
@@ -38,7 +38,7 @@ public class MavenITmng3475BaseAlignedDirTest
 
     public MavenITmng3475BaseAlignedDirTest()
     {
-        super( "(2.0.1,)");
+        super( "(2.0.1,2.0.3),(2.0.3,)");
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3599useHttpProxyForWebDAVTest.java
Patch:
@@ -182,8 +182,8 @@ public void testmng3599useHttpProxyForHttp()
     public void testmng3599useHttpProxyForWebDAV()
         throws Exception
     {
-        // Doesn't work until 2.0.10+
-        if ( matchesVersionRange( "(2.0.9, 2.99.99)" ) )
+        // Doesn't work until 2.1.0-M1+
+        if ( matchesVersionRange( "[2.1.0-M1, 2.99.99)" ) )
         {
             File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3599" );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0051Test.java
Patch:
@@ -31,7 +31,7 @@ public class MavenIT0051Test
 {
     public MavenIT0051Test()                                                                                                                          
     {                                                                                                                                                 
-        super( "[,2.99.99)" );
+        super( "(2.0.2,2.99.99)" );
     }    
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0115CustomArtifactHandlerAndCustomLifecycleTest.java
Patch:
@@ -31,7 +31,7 @@ public class MavenIT0115CustomArtifactHandlerAndCustomLifecycleTest
 {
 
     public MavenIT0115CustomArtifactHandlerAndCustomLifecycleTest() {
-        super( "[,2.99.99)" );//extension support removed from 3.0
+        super( "(2.0.1,2.99.99)" );//extension support removed from 3.0
     }
 
     public void testit0115()

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0144LifecycleExecutionOrderTest.java
Patch:
@@ -38,6 +38,7 @@ public class MavenIT0144LifecycleExecutionOrderTest
 
     public MavenIT0144LifecycleExecutionOrderTest()
     {
+        super( "(2.0.4,)" );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0377PluginLookupFromPrefixTest.java
Patch:
@@ -50,6 +50,8 @@ public void testitMNG377()
         File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-0377" );
 
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
+        verifier.setAutoclean( false );
+        verifier.deleteDirectory( "target" );
         List cliOptions = new ArrayList();
         cliOptions.add( "--settings settings.xml" );
         verifier.setCliOptions( cliOptions );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2749ExtensionAvailableToPluginTest.java
Patch:
@@ -37,7 +37,7 @@ public class MavenITmng2749ExtensionAvailableToPluginTest
 
     public MavenITmng2749ExtensionAvailableToPluginTest()
     {
-        super( "[,2.99.99)" );
+        super( "(2.0.2,2.99)" );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2843PluginConfigPropertiesInjectionTest.java
Patch:
@@ -37,6 +37,7 @@ public class MavenITmng2843PluginConfigPropertiesInjectionTest
 
     public MavenITmng2843PluginConfigPropertiesInjectionTest()
     {
+        super( "(2.0.5,)" );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3581PluginUsesWagonDependencyTest.java
Patch:
@@ -30,7 +30,7 @@ public class MavenITmng3581PluginUsesWagonDependencyTest
     public MavenITmng3581PluginUsesWagonDependencyTest()
     {
         // Not 2.0.9
-        super( "(,2.0.9),(2.0.9,)" );
+        super( "(2.0.4,2.0.9),(2.0.9,)" );
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0069Test.java
Patch:
@@ -74,6 +74,7 @@ public void testit0069()
             try
             {
                 verifier.executeGoal( "org.apache.maven.its.plugins:maven-it-plugin-dependency-resolution:2.1-SNAPSHOT:compile" );
+                verifier.verifyErrorFreeLog();
                 fail( "Build did not fail!" );
             }
             catch( VerificationException e )

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3863AutoPluginGroupIdTest.java
Patch:
@@ -53,6 +53,7 @@ public void testitMNG3853()
         try
         {
             verifier.executeGoal( "validate" );
+            verifier.verifyErrorFreeLog();
             fail( "Validation step did not detect missing groupId for dependency" );
         }
         catch ( VerificationException e )

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3843PomInheritanceTest.java
Patch:
@@ -38,7 +38,6 @@ public class MavenITmng3843PomInheritanceTest
 
     public MavenITmng3843PomInheritanceTest()
     {
-    	   super( "(2.99,)" ); // only test in 3.0+
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3853ProfileInjectedDistReposTest.java
Patch:
@@ -38,7 +38,6 @@ public class MavenITmng3853ProfileInjectedDistReposTest
 
     public MavenITmng3853ProfileInjectedDistReposTest()
     {
-    	 super( "(2.99,)" ); // only test in 3.0+
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3853ProfileInjectedDistReposTest.java
Patch:
@@ -38,6 +38,7 @@ public class MavenITmng3853ProfileInjectedDistReposTest
 
     public MavenITmng3853ProfileInjectedDistReposTest()
     {
+    	 super( "(2.99,)" ); // only test in 3.0+
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3843PomInheritanceTest.java
Patch:
@@ -38,6 +38,7 @@ public class MavenITmng3843PomInheritanceTest
 
     public MavenITmng3843PomInheritanceTest()
     {
+    	   super( "(2.99,)" ); // only test in 3.0+
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -305,9 +305,6 @@ public static Test suite()
         suite.addTestSuite( MavenIT0005Test.class );
         suite.addTestSuite( MavenIT0004Test.class );
         suite.addTestSuite( MavenIT0003Test.class );
-        suite.addTestSuite( MavenIT0002Test.class );
-        suite.addTestSuite( MavenIT0001Test.class );
-        suite.addTestSuite( MavenIT0000Test.class );
 
         /*
          * Add tests in reverse alpha order above.

File: maven-core/src/main/java/org/apache/maven/DefaultArtifactFilterManager.java
Patch:
@@ -40,7 +40,7 @@ public class DefaultArtifactFilterManager
 
     static
     {
-        Set artifacts = new HashSet();
+        Set<String> artifacts = new HashSet<String>();
 
         artifacts.add( "classworlds" );
         artifacts.add( "plexus-classworlds" );
@@ -50,6 +50,7 @@ public class DefaultArtifactFilterManager
         artifacts.add( "maven-artifact" );
         artifacts.add( "maven-artifact-manager" );
         artifacts.add( "maven-build-context" );
+        artifacts.add( "maven-compat" );
         artifacts.add( "maven-core" );
         artifacts.add( "maven-error-diagnoser" );
         artifacts.add( "maven-lifecycle" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -219,6 +219,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng0507ArtifactRelocationTest.class );
         suite.addTestSuite( MavenITmng0505VersionRangeTest.class );
         suite.addTestSuite( MavenITmng0496IgnoreUnknownPluginParametersTest.class );
+        suite.addTestSuite( MavenITmng0479OverrideCentralRepoTest.class );
         suite.addTestSuite( MavenITmng0471CustomLifecycleTest.class );
         suite.addTestSuite( MavenITmng0469ReportConfigTest.class );
         suite.addTestSuite( MavenITmng0377PluginLookupFromPrefixTest.class );
@@ -277,7 +278,6 @@ public static Test suite()
         suite.addTestSuite( MavenIT0052Test.class );
         suite.addTestSuite( MavenIT0051Test.class );
         suite.addTestSuite( MavenIT0047Test.class );
-        suite.addTestSuite( MavenIT0043Test.class );
         suite.addTestSuite( MavenIT0041Test.class );
         suite.addTestSuite( MavenIT0040Test.class );
         suite.addTestSuite( MavenIT0039Test.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -209,6 +209,8 @@ public static Test suite()
         suite.addTestSuite( MavenITmng1415QuotedSystemPropertiesTest.class );
         suite.addTestSuite( MavenITmng1412DependenciesOrderTest.class );
         suite.addTestSuite( MavenITmng1323AntrunDependenciesTest.class );
+        suite.addTestSuite( MavenITmng0866EvaluateDefaultValueTest.class );
+        suite.addTestSuite( MavenITmng0848SystemPropOverridesDefaultValueTest.class );
         suite.addTestSuite( MavenITmng0836PluginParentResolutionTest.class );
         suite.addTestSuite( MavenITmng0522PluginMgmtConfigTest.class );
         suite.addTestSuite( MavenITmng0507ArtifactRelocationTest.class );

File: its/core-it-support/core-it-plugins/maven-it-plugin-configuration/src/main/java/org/apache/maven/plugin/coreit/ConfigMojo.java
Patch:
@@ -62,8 +62,7 @@ public class ConfigMojo
     private File basedir;
 
     /**
-     * The path to the properties file into which to save the mojo configuration. Unlike all the other parameters, this
-     * parameter features both a default value and an alias.
+     * The path to the properties file into which to save the mojo configuration.
      * 
      * @parameter expression="${config.propertiesFile}
      */

File: its/core-it-support/core-it-plugins/maven-it-plugin-log-file/src/main/java/org/apache/maven/plugin/coreit/AbstractLogMojo.java
Patch:
@@ -48,7 +48,7 @@ public abstract class AbstractLogMojo
     private File basedir;
 
     /**
-     * The path to the output file, relative to the current working directory.
+     * The path to the output file, relative to the project's base directory.
      * 
      * @parameter expression="${log.logFile}"
      */

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0043Test.java
Patch:
@@ -50,9 +50,6 @@ public void testit0043()
         File child2 = new File( testDir, "test" );
         verifier = new Verifier( child2.getAbsolutePath() );
 
-        Properties systemProperties = new Properties();
-        systemProperties.put( "expression.expressions", "project/repositories,project/pluginRepositories" );
-        verifier.setSystemProperties( systemProperties );
         verifier.setCliOptions( Collections.singletonList( "-s settings.xml" ) );
         verifier.executeGoal( "org.apache.maven.its.plugins:maven-it-plugin-expression:2.1-SNAPSHOT:eval" );
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2136ActiveByDefaultProfileTest.java
Patch:
@@ -39,8 +39,11 @@ public void testitMNG2136()
         File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-2136" );
 
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
+        verifier.setAutoclean( false );
+        verifier.deleteDirectory( "target" );
 
         Properties systemProperties = new Properties();
+        systemProperties.put( "expression.outputFile", new File( testDir, "target/expression.properties" ).getPath() );
         systemProperties.put( "expression.expressions", "project/properties" );
         verifier.setSystemProperties( systemProperties );
         verifier.executeGoal( "org.apache.maven.its.plugins:maven-it-plugin-expression:2.1-SNAPSHOT:eval" );

File: its/core-it-support/core-it-plugins/maven-it-plugin-class-loader/maven-it-plugin-class-loader/src/main/java/org/apache/maven/plugin/coreit/InstanceofMojo.java
Patch:
@@ -51,7 +51,6 @@ public class InstanceofMojo
      * The path to the properties file used to track the results of the instanceof tests.
      * 
      * @parameter expression="${clsldr.instanceofPropertiesFile}"
-     *            default-value="${project.build.directory}/instanceof.properties"
      */
     private File instanceofPropertiesFile;
 

File: its/core-it-support/core-it-plugins/maven-it-plugin-log-file/src/main/java/org/apache/maven/plugin/coreit/AbstractLogMojo.java
Patch:
@@ -50,7 +50,7 @@ public abstract class AbstractLogMojo
     /**
      * The path to the output file, relative to the current working directory.
      * 
-     * @parameter expression="${log.logFile}" default-value="target/it.log" alias="outputFile"
+     * @parameter expression="${log.logFile}"
      */
     private File logFile;
 

File: maven-project/src/main/java/org/apache/maven/project/builder/ProjectBuilder.java
Patch:
@@ -157,7 +157,8 @@ public static void interpolateModelProperties(List<ModelProperty> modelPropertie
             {
                 if( mp.getValue() != null && !mp.getUri().contains( "#property" ) && !mp.getUri().contains( "#collection" ))
                 {
-                    if( !buildProperty.isParentOf( mp ) || mp.getUri().equals(ProjectUri.Build.finalName ) )
+                    if( (!buildProperty.isParentOf( mp ) && !mp.getUri().equals(ProjectUri.Reporting.outputDirectory)
+                            || mp.getUri().equals(ProjectUri.Build.finalName ) ))
                     {
                         firstPassModelProperties.add(mp);
                     }
@@ -212,7 +213,7 @@ public int compare(InterpolatorProperty o, InterpolatorProperty o1) {
                 Map<ModelProperty, ModelProperty> buildDirectories = new HashMap<ModelProperty, ModelProperty>();
                 for(ModelProperty mp : secondPassModelProperties)
                 {
-                    if(mp.getUri().equals( ProjectUri.Build.directory ))
+                    if(mp.getUri().startsWith( ProjectUri.Build.xUri ) || mp.getUri().equals( ProjectUri.Reporting.outputDirectory ))
                     {
                         File file = new File(mp.getResolvedValue());
                         if( !file.isAbsolute() )

File: maven-compat/src/main/java/org/apache/maven/project/ModelUtils.java
Patch:
@@ -24,8 +24,8 @@
 
 import java.util.*;
 
-@Deprecated
 /** @deprecated */
+@Deprecated
 public final class ModelUtils
 {
 

File: maven-compat/src/main/java/org/apache/maven/project/ModelUtils.java
Patch:
@@ -25,7 +25,6 @@
 import java.util.*;
 
 @Deprecated
-/** @deprecated */
 public final class ModelUtils
 {
 

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Patch:
@@ -1370,8 +1370,6 @@ private void populatePluginFields( Mojo plugin,
             getLogger().debug( "Configuring mojo '" + mojoDescriptor.getId() + "' with "
                                + ( configuratorId == null ? "basic" : configuratorId )
                                + " configurator -->" );
-
-            System.out.println( configuration );
             
             // This needs to be able to use methods
             configurator.configureComponent( plugin, configuration, expressionEvaluator, realm, listener );

File: maven-project-builder/src/main/java/org/apache/maven/project/builder/PluginExecutionIdModelContainerFactory.java
Patch:
@@ -10,7 +10,8 @@
 public class PluginExecutionIdModelContainerFactory implements ModelContainerFactory {
 
     private static final Collection<String> uris = Collections.unmodifiableList(Arrays.asList(
-            ProjectUri.Build.Plugins.Plugin.Executions.Execution.xUri));
+            ProjectUri.Build.Plugins.Plugin.Executions.Execution.xUri,
+            ProjectUri.Build.PluginManagement.Plugins.Plugin.Executions.Execution.xUri));
 
     public Collection<String> getUris() {
         return uris;

File: maven-core/src/main/java/org/apache/maven/execution/DefaultRuntimeInformation.java
Patch:
@@ -36,8 +36,10 @@
  * @author Jason van Zyl
  * @author <a href="mailto:brett@apache.org">Brett Porter</a>
  * @version $Id$
+ * @plexus.component
  */
-@Component(role = RuntimeInformation.class)
+//@Component(role = RuntimeInformation.class)
+//!!jvz not picked up by the anno processor
 public class DefaultRuntimeInformation
     implements RuntimeInformation, Initializable
 {    

File: maven-core/src/main/java/org/apache/maven/lifecycle/mapping/DefaultLifecycleMapping.java
Patch:
@@ -24,12 +24,15 @@
 import java.util.List;
 import java.util.Map;
 
+import org.codehaus.plexus.component.annotations.Component;
+
 /**
  * Lifecycle mapping for a POM.
  *
  * @author <a href="mailto:brett@apache.org">Brett Porter</a>
  * @version $Id$
  */
+@Component(role = LifecycleMapping.class)
 public class DefaultLifecycleMapping
     implements LifecycleMapping
 {

File: maven-core/src/main/java/org/apache/maven/plugin/MavenPluginDiscoverer.java
Patch:
@@ -20,7 +20,9 @@
  */
 
 import org.apache.maven.plugin.descriptor.PluginDescriptorBuilder;
+import org.codehaus.plexus.component.annotations.Component;
 import org.codehaus.plexus.component.discovery.AbstractComponentDiscoverer;
+import org.codehaus.plexus.component.discovery.ComponentDiscoverer;
 import org.codehaus.plexus.component.repository.ComponentSetDescriptor;
 import org.codehaus.plexus.configuration.PlexusConfigurationException;
 
@@ -31,6 +33,7 @@
  * @author <a href="mailto:trygvis@inamo.no">Trygve Laugst&oslash;l</a>
  * @version $Id$
  */
+@Component( role=ComponentDiscoverer.class)
 public class MavenPluginDiscoverer
     extends AbstractComponentDiscoverer
 {

File: maven-core/src/main/java/org/apache/maven/settings/validation/DefaultSettingsValidator.java
Patch:
@@ -22,18 +22,18 @@
 import org.apache.maven.settings.Profile;
 import org.apache.maven.settings.Repository;
 import org.apache.maven.settings.Settings;
+import org.codehaus.plexus.component.annotations.Component;
 
 import java.util.Iterator;
 import java.util.List;
 
 /**
  * @author Milos Kleint
  */
+@Component(role = SettingsValidator.class)
 public class DefaultSettingsValidator
     implements SettingsValidator
 {
-
-
     public SettingsValidationResult validate( Settings model )
     {
         SettingsValidationResult result = new SettingsValidationResult();

File: maven-core/src/main/java/org/apache/maven/execution/DefaultRuntimeInformation.java
Patch:
@@ -25,6 +25,7 @@
 
 import org.apache.maven.artifact.versioning.ArtifactVersion;
 import org.apache.maven.artifact.versioning.DefaultArtifactVersion;
+import org.codehaus.plexus.component.annotations.Component;
 import org.codehaus.plexus.personality.plexus.lifecycle.phase.Initializable;
 import org.codehaus.plexus.personality.plexus.lifecycle.phase.InitializationException;
 import org.codehaus.plexus.util.IOUtil;
@@ -36,6 +37,7 @@
  * @author <a href="mailto:brett@apache.org">Brett Porter</a>
  * @version $Id$
  */
+@Component(role = RuntimeInformation.class)
 public class DefaultRuntimeInformation
     implements RuntimeInformation, Initializable
 {    

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -176,6 +176,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng2695OfflinePluginSnapshotsTest.class );
         suite.addTestSuite( MavenITmng2591MergeInheritedPluginConfigTest.class );
         suite.addTestSuite( MavenITmng2562TimestampTest.class );
+        suite.addTestSuite( MavenITmng2539PluginDependenciesComeFromPluginReposTest.class );
         suite.addTestSuite( MavenITmng2339BadProjectInterpolationTest.class );
         suite.addTestSuite( MavenITmng2318LocalParentResolutionTest.class );
         suite.addTestSuite( MavenITmng2293CustomPluginParamImplTest.class );
@@ -202,6 +203,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng1415QuotedSystemPropertiesTest.class );
         suite.addTestSuite( MavenITmng1412DependenciesOrderTest.class );
         suite.addTestSuite( MavenITmng1323AntrunDependenciesTest.class );
+        suite.addTestSuite( MavenITmng0836PluginParentResolutionTest.class );
         suite.addTestSuite( MavenITmng0469ReportConfigTest.class );
         suite.addTestSuite( MavenIT0140Test.class );
         suite.addTestSuite( MavenIT0139Test.class );
@@ -217,7 +219,6 @@ public static Test suite()
         suite.addTestSuite( MavenIT0129ResourceProvidedToAPluginAsAPluginDependencyTest.class );
         suite.addTestSuite( MavenIT0115CustomArtifactHandlerAndCustomLifecycleTest.class );
         suite.addTestSuite( MavenIT0113ServerAuthzAvailableToWagonMgrInPluginTest.class );
-        suite.addTestSuite( MavenIT0110PluginDependenciesComeFromPluginReposTest.class );
         suite.addTestSuite( MavenIT0097Test.class );
         suite.addTestSuite( MavenIT0092Test.class );
         suite.addTestSuite( MavenIT0090Test.class );
@@ -240,7 +241,6 @@ public static Test suite()
         suite.addTestSuite( MavenIT0072Test.class );
         suite.addTestSuite( MavenIT0071Test.class );
         suite.addTestSuite( MavenIT0069Test.class );
-        suite.addTestSuite( MavenIT0068Test.class );
         suite.addTestSuite( MavenIT0067Test.class );
         suite.addTestSuite( MavenIT0066Test.class );
         suite.addTestSuite( MavenIT0065Test.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0836PluginParentResolutionTest.java
Patch:
@@ -31,7 +31,7 @@
  * @author Benjamin Bentmann
  * @version $Id$
  */
-public class MavenIT0068Test
+public class MavenITmng0836PluginParentResolutionTest
     extends AbstractMavenIntegrationTestCase
 {
 
@@ -43,7 +43,7 @@ public class MavenIT0068Test
     public void testitMNG836()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/it0068" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-0836" );
 
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
         verifier.setAutoclean( false );

File: its/core-it-support/core-it-plugins/maven-it-plugin-uses-properties/src/main/java/org/apache/maven/plugin/coreit/UsesPropertiesMojo.java
Patch:
@@ -48,7 +48,9 @@ public void execute()
     {
         try
         {
-            FileOutputStream fos = new FileOutputStream( new File( basedir, "target/project.properties" ) );
+            File file = new File( basedir, "target/project.properties" );
+            file.getParentFile().mkdirs();
+            FileOutputStream fos = new FileOutputStream( file );
 
             properties.store( fos, "# Properties generated by the execution of a mojo that uses interpolated POM values for configuration." );
         }

File: maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java
Patch:
@@ -201,8 +201,6 @@ public static void buildErrorMessage( Exception e, boolean showStackTraces, Core
                 return;
             }
         }
-
-        System.out.println( e.getClass() );
         
         boolean handled = false;
 

File: maven-project-builder/src/test/java/org/apache/maven/project/builder/EnforcerPomTest.java
Patch:
@@ -12,7 +12,7 @@
 
 public class EnforcerPomTest
 {
-    @org.junit.Test
+    @org.junit.Test         
     public void dependencyManagementWithScopeAndClassifier() throws IOException
     {
         List<ModelProperty> mp = new ArrayList<ModelProperty>();

File: maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -563,7 +563,7 @@ private void validateModel( Model model, File pomFile )
         {
             for ( String s : (List<String>) validationResult.getMessages() )
             {
-                System.out.println( s );
+                logger.debug( s );
             }
             throw new InvalidProjectModelException( projectId, "Failed to validate POM", pomFile, validationResult );
         }

File: maven-project/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java
Patch:
@@ -372,7 +372,7 @@ private void handleInvalidOrMissingMavenPOM( Artifact artifact, ProjectBuildingE
         }
         else
         {
-            getLogger().warn( "\n\tDEPRECATION: The POM for the artifact '" + artifact.getDependencyConflictId() +
+            getLogger().debug( "\n\tDEPRECATION: The POM for the artifact '" + artifact.getDependencyConflictId() +
                 "' was invalid or not found on any repositories.\n" +
                 "\tThis may not be supported by future versions of Maven and should be corrected as soon as possible.\n" +
                 "\tError given: " + e.getMessage() + "\n" );

File: maven-mercury/src/main/java/org/apache/maven/mercury/MavenDependencyProcessor.java
Patch:
@@ -30,7 +30,6 @@ public List<ArtifactBasicMetadata> getDependencies(ArtifactBasicMetadata bmd, Me
 
         List<InterpolatorProperty> interpolatorProperties = new ArrayList<InterpolatorProperty>();
         interpolatorProperties.add(new InterpolatorProperty("${mavenVersion}", "3.0-SNAPSHOT", PomInterpolatorTag.SYSTEM_PROPERTIES.name()));
-        interpolatorProperties.add(new InterpolatorProperty("${maven.version}", "3.0-SNAPSHOT", PomInterpolatorTag.SYSTEM_PROPERTIES.name()));
         
         if(system != null) {
             interpolatorProperties.addAll( InterpolatorProperty.toInterpolatorProperties( system,

File: maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -534,7 +534,6 @@ private MavenProject readModelFromLocalPath( String projectId, File projectDescr
         }
 
         interpolatorProperties.add(new InterpolatorProperty("${mavenVersion}", MavenProjectBuilder.STANDALONE_SUPERPOM_VERSION, PomInterpolatorTag.SYSTEM_PROPERTIES.name()));
-        interpolatorProperties.add(new InterpolatorProperty("${maven.version}", MavenProjectBuilder.STANDALONE_SUPERPOM_VERSION, PomInterpolatorTag.SYSTEM_PROPERTIES.name()));
         MavenProject mavenProject;
         try
         {

File: maven-core/src/test/java/org/apache/maven/listeners/BuildExtensionListenerTest.java
Patch:
@@ -69,7 +69,7 @@ private MavenSession newMavenSession()
         MavenProject project = new MavenProject( model );
         ReactorManager rm = new ReactorManager( Collections.singletonList( project ), ReactorManager.FAIL_FAST );
         MavenExecutionRequest request = new DefaultMavenExecutionRequest();
-        request.setLocalRepositoryPath( new File( "/Users/jvanzyl/.m2/repository" ) );        
+        request.setLocalRepositoryPath( new File( System.getProperty( "user.home" ), ".m2/repository" ) );        
         MavenSession session = new MavenSession( getContainer(), request, new DefaultEventDispatcher(), rm );
 
         return session;

File: maven-core/src/main/java/org/apache/maven/errors/DefaultCoreErrorReporter.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.apache.maven.NoGoalsSpecifiedException;
 import org.apache.maven.ProjectCycleException;
-import org.apache.maven.path.PathTranslator;
+import org.apache.maven.project.path.PathTranslator;
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.ArtifactUtils;
 import org.apache.maven.artifact.metadata.ArtifactMetadataRetrievalException;

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Patch:
@@ -20,7 +20,7 @@
  */
 
 import org.apache.maven.ArtifactFilterManager;
-import org.apache.maven.path.PathTranslator;
+import org.apache.maven.project.path.PathTranslator;
 import org.apache.maven.shared.model.InterpolatorProperty;
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.factory.ArtifactFactory;

File: maven-core/src/main/java/org/apache/maven/plugin/PluginParameterExpressionEvaluator.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.maven.plugin.descriptor.MojoDescriptor;
 import org.apache.maven.plugin.descriptor.PluginDescriptor;
 import org.apache.maven.project.MavenProject;
-import org.apache.maven.path.PathTranslator;
+import org.apache.maven.project.path.PathTranslator;
 import org.codehaus.plexus.component.configurator.expression.ExpressionEvaluationException;
 import org.codehaus.plexus.component.configurator.expression.ExpressionEvaluator;
 import org.codehaus.plexus.logging.Logger;

File: maven-core/src/test/java/org/apache/maven/plugin/PluginParameterExpressionEvaluatorTest.java
Patch:
@@ -35,7 +35,7 @@
 import org.apache.maven.plugin.descriptor.PluginDescriptor;
 import org.apache.maven.execution.DuplicateProjectException;
 import org.apache.maven.project.MavenProject;
-import org.apache.maven.path.PathTranslator;
+import org.apache.maven.project.path.PathTranslator;
 import org.apache.maven.settings.Settings;
 import org.codehaus.plexus.PlexusContainer;
 import org.codehaus.plexus.PlexusTestCase;

File: maven-project/src/main/java/org/apache/maven/project/path/DefaultPathTranslator.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.path;
+package org.apache.maven.project.path;
 
 /*
  * Licensed to the Apache Software Foundation (ASF) under one

File: maven-project/src/main/java/org/apache/maven/project/path/PathTranslator.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.path;
+package org.apache.maven.project.path;
 
 /*
  * Licensed to the Apache Software Foundation (ASF) under one

File: maven-project/src/test/java/org/apache/maven/project/path/DefaultPathTranslatorTest.java
Patch:
@@ -17,7 +17,7 @@
  * under the License.
  */
 
-package org.apache.maven.path;
+package org.apache.maven.project.path;
 
 import java.io.File;
 

File: maven-shared-model/src/main/java/org/apache/maven/shared/model/ModelTransformer.java
Patch:
@@ -30,6 +30,8 @@
 public interface ModelTransformer
 {
 
+    List<ModelProperty> preprocessModelProperties(List<ModelProperty> modelProperties);
+
     String getBaseUri();
 
     /**

File: maven-shared-model/src/main/java/org/apache/maven/shared/model/ModelTransformerContext.java
Patch:
@@ -233,6 +233,7 @@ public DomainModel transform(List<DomainModel> domainModels,
 
         List<ModelProperty> transformedProperties =
                 importModelProperties(importModels, fromModelTransformer.transformToModelProperties( domainModels));
+        transformedProperties = fromModelTransformer.preprocessModelProperties(transformedProperties);
 
         String baseUriForModel = fromModelTransformer.getBaseUri();
         List<ModelProperty> modelProperties =

File: maven-project/src/main/java/org/apache/maven/project/builder/ArtifactModelContainerFactory.java
Patch:
@@ -149,7 +149,7 @@ else if ( type == null && mp.getUri().equals( ProjectUri.Dependencies.Dependency
                 type = "jar";
             }
 
-            if ( scope == null )
+            if ( scope == null || scope.equals("provided"))
             {
                 scope = "compile";
             }

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -186,10 +186,12 @@ public static Test suite()
         suite.addTestSuite( MavenITmng2124PomInterpolationWithParentValuesTest.class );
         suite.addTestSuite( MavenITmng2123VersionRangeDependencyTest.class );
         suite.addTestSuite( MavenITmng2068ReactorRelativeParentsTest.class );
+        suite.addTestSuite( MavenITmng2054PluginExecutionInheritanceTest.class );
         suite.addTestSuite( MavenITmng2052InterpolateWithSettingsProfilePropertiesTest.class );
         suite.addTestSuite( MavenITmng2045testJarDependenciesBrokenInReactorTest.class );
         suite.addTestSuite( MavenITmng2006ChildPathAwareUrlInheritanceTest.class );
         suite.addTestSuite( MavenITmng1999DefaultReportsInheritanceTest.class );
+        suite.addTestSuite( MavenITmng1995InterpolateBooleanModelElementsTest.class );
         suite.addTestSuite( MavenITmng1703PluginMgmtDepInheritanceTest.class );
         suite.addTestSuite( MavenITmng1493NonStandardModulePomNamesTest.class );
         suite.addTestSuite( MavenITmng1491ReactorArtifactIdCollisionTest.class );
@@ -213,9 +215,7 @@ public static Test suite()
         suite.addTestSuite( MavenIT0113ServerAuthzAvailableToWagonMgrInPluginTest.class );
         suite.addTestSuite( MavenIT0110PluginDependenciesComeFromPluginReposTest.class );
         suite.addTestSuite( MavenIT0097Test.class );
-        suite.addTestSuite( MavenIT0096Test.class );
         suite.addTestSuite( MavenIT0092Test.class );
-        suite.addTestSuite( MavenIT0091Test.class );
         suite.addTestSuite( MavenIT0090Test.class );
         suite.addTestSuite( MavenIT0088Test.class );
         suite.addTestSuite( MavenIT0087Test.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0097Test.java
Patch:
@@ -30,7 +30,7 @@ public class MavenIT0097Test
 
     /**
      * Test that the implied relative path for the parent POM works, even two
-     * levels deep.
+     * levels deep (c.f. MNG-2068).
      */
     public void testit0097()
         throws Exception

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1995InterpolateBooleanModelElementsTest.java
Patch:
@@ -31,11 +31,11 @@
  * @author Benjamin Bentmann
  * @version $Id$
  */
-public class MavenIT0091Test
+public class MavenITmng1995InterpolateBooleanModelElementsTest
     extends AbstractMavenIntegrationTestCase
 {
 
-    public MavenIT0091Test()
+    public MavenITmng1995InterpolateBooleanModelElementsTest()
     {
         super( "(2.999.0,)" );
     }
@@ -46,7 +46,7 @@ public MavenIT0091Test()
     public void testitMNG1995()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/it0091" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-1995" );
 
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -89,6 +89,7 @@ public static Test suite()
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
         suite.addTestSuite( MavenITmng3853ProfileInjectedDistReposTest.class );
+        suite.addTestSuite( MavenITmng3852PluginConfigWithHeterogeneousListTest.class );
         suite.addTestSuite( MavenITmng3846PomInheritanceUrlAdjustmentTest.class );
         suite.addTestSuite( MavenITmng3845LimitedPomInheritanceTest.class );
         suite.addTestSuite( MavenITmng3843PomInheritanceTest.class );

File: maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -72,7 +72,7 @@
  */
 public class DefaultMavenProjectBuilder
     implements MavenProjectBuilder, Initializable, LogEnabled
-{
+{    
     protected MavenProfilesBuilder profilesBuilder;
 
     protected ArtifactResolver artifactResolver;
@@ -538,6 +538,8 @@ private MavenProject readModelFromLocalPath( String projectId, File projectDescr
                 PomInterpolatorTag.PROJECT_PROPERTIES.name()));
         }
 
+        interpolatorProperties.add(new InterpolatorProperty("${mavenVersion}", MavenProjectBuilder.STANDALONE_SUPERPOM_VERSION, PomInterpolatorTag.SYSTEM_PROPERTIES.name()));
+        interpolatorProperties.add(new InterpolatorProperty("${maven.version}", MavenProjectBuilder.STANDALONE_SUPERPOM_VERSION, PomInterpolatorTag.SYSTEM_PROPERTIES.name()));
         MavenProject mavenProject;
         try
         {

File: maven-project/src/main/java/org/apache/maven/project/MavenProjectBuilder.java
Patch:
@@ -30,7 +30,7 @@ public interface MavenProjectBuilder
 
     String STANDALONE_SUPERPOM_ARTIFACTID = "super-pom";
 
-    String STANDALONE_SUPERPOM_VERSION = "3.0";
+    String STANDALONE_SUPERPOM_VERSION = "3.0-SNAPSHOT";
 
     boolean STRICT_MODEL_PARSING = true;
 

File: maven-project/src/main/java/org/apache/maven/project/builder/ArtifactModelContainerFactory.java
Patch:
@@ -146,12 +146,12 @@ else if ( type == null && mp.getUri().equals( ProjectUri.Dependencies.Dependency
 
             if ( type == null )
             {
-                type = "";
+                type = "jar";
             }
 
             if ( scope == null )
             {
-                scope = "";
+                scope = "compile";
             }
         }
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -187,6 +187,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng2068ReactorRelativeParentsTest.class );
         suite.addTestSuite( MavenITmng2052InterpolateWithSettingsProfilePropertiesTest.class );
         suite.addTestSuite( MavenITmng2045testJarDependenciesBrokenInReactorTest.class );
+        suite.addTestSuite( MavenITmng2006ChildPathAwareUrlInheritanceTest.class );
         suite.addTestSuite( MavenITmng1999DefaultReportsInheritanceTest.class );
         suite.addTestSuite( MavenITmng1703PluginMgmtDepInheritanceTest.class );
         suite.addTestSuite( MavenITmng1493NonStandardModulePomNamesTest.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3846PomInheritanceUrlAdjustmentTest.java
Patch:
@@ -47,7 +47,7 @@ public void testitMNG3846()
     {
         File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3846" );
 
-        Verifier verifier = new Verifier( new File( testDir, "child" ).getAbsolutePath() );
+        Verifier verifier = new Verifier( new File( testDir, "sub" ).getAbsolutePath() );
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );
         verifier.executeGoal( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -179,6 +179,8 @@ public static Test suite()
         suite.addTestSuite( MavenITmng2201PluginConfigInterpolationTest.class );
         suite.addTestSuite( MavenITmng2196ParentResolutionTest.class );
         suite.addTestSuite( MavenITmng2136ActiveByDefaultProfileTest.class );
+        suite.addTestSuite( MavenITmng2130ParentLookupFromReactorCacheTest.class );
+        suite.addTestSuite( MavenITmng2124PomInterpolationWithParentValuesTest.class );
         suite.addTestSuite( MavenITmng2123VersionRangeDependencyTest.class );
         suite.addTestSuite( MavenITmng2068ReactorRelativeParentsTest.class );
         suite.addTestSuite( MavenITmng2052InterpolateWithSettingsProfilePropertiesTest.class );
@@ -187,6 +189,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng1703PluginMgmtDepInheritanceTest.class );
         suite.addTestSuite( MavenITmng1493NonStandardModulePomNamesTest.class );
         suite.addTestSuite( MavenITmng1491ReactorArtifactIdCollisionTest.class );
+        suite.addTestSuite( MavenITmng1415QuotedSystemPropertiesTest.class );
         suite.addTestSuite( MavenITmng1412DependenciesOrderTest.class );
         suite.addTestSuite( MavenITmng1323AntrunDependenciesTest.class );
         suite.addTestSuite( MavenITmng0469ReportConfigTest.class );
@@ -205,9 +208,6 @@ public static Test suite()
         suite.addTestSuite( MavenIT0115CustomArtifactHandlerAndCustomLifecycleTest.class );
         suite.addTestSuite( MavenIT0113ServerAuthzAvailableToWagonMgrInPluginTest.class );
         suite.addTestSuite( MavenIT0110PluginDependenciesComeFromPluginReposTest.class );
-        suite.addTestSuite( MavenIT0100Test.class );
-        suite.addTestSuite( MavenIT0099Test.class );
-        suite.addTestSuite( MavenIT0098Test.class );
         suite.addTestSuite( MavenIT0097Test.class );
         suite.addTestSuite( MavenIT0096Test.class );
         suite.addTestSuite( MavenIT0095Test.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2124PomInterpolationWithParentValuesTest.java
Patch:
@@ -25,17 +25,17 @@
 import java.io.File;
 import java.util.Properties;
 
-public class MavenIT0100Test
+public class MavenITmng2124PomInterpolationWithParentValuesTest
     extends AbstractMavenIntegrationTestCase
 {
 
     /**
      * Test that ${parent.artifactId} resolves correctly. [MNG-2124]
      */
-    public void testit0100()
+    public void testitMNG2124()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/it0100" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-2124" );
         File child = new File( testDir, "parent/child" );
 
         Verifier verifier = new Verifier( child.getAbsolutePath() );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2130ParentLookupFromReactorCacheTest.java
Patch:
@@ -24,18 +24,18 @@
 
 import java.io.File;
 
-public class MavenIT0099Test
+public class MavenITmng2130ParentLookupFromReactorCacheTest
     extends AbstractMavenIntegrationTestCase
 {
 
     /**
      * Test that parent-POMs cached during a build are available as parents
      * to other POMs in the multimodule build. [MNG-2130]
      */
-    public void testit0099()
+    public void testitMNG2130()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/it0099" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-2130" );
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
         verifier.deleteArtifact( "org.apache.maven.it0099", "maven-it-it0099-parent", "1", "pom" );
         verifier.executeGoal( "package" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -174,8 +174,11 @@ public static Test suite()
         suite.addTestSuite( MavenITmng2234ActiveProfilesFromSettingsTest.class );
         suite.addTestSuite( MavenITmng2228ComponentInjectionTest.class );
         suite.addTestSuite( MavenITmng2201PluginConfigInterpolationTest.class );
+        suite.addTestSuite( MavenITmng2196ParentResolutionTest.class );
+        suite.addTestSuite( MavenITmng2136ActiveByDefaultProfileTest.class );
         suite.addTestSuite( MavenITmng2123VersionRangeDependencyTest.class );
         suite.addTestSuite( MavenITmng2068ReactorRelativeParentsTest.class );
+        suite.addTestSuite( MavenITmng2052InterpolateWithSettingsProfilePropertiesTest.class );
         suite.addTestSuite( MavenITmng2045testJarDependenciesBrokenInReactorTest.class );
         suite.addTestSuite( MavenITmng1999DefaultReportsInheritanceTest.class );
         suite.addTestSuite( MavenITmng1703PluginMgmtDepInheritanceTest.class );
@@ -199,9 +202,6 @@ public static Test suite()
         suite.addTestSuite( MavenIT0115CustomArtifactHandlerAndCustomLifecycleTest.class );
         suite.addTestSuite( MavenIT0113ServerAuthzAvailableToWagonMgrInPluginTest.class );
         suite.addTestSuite( MavenIT0110PluginDependenciesComeFromPluginReposTest.class );
-        suite.addTestSuite( MavenIT0103Test.class );
-        suite.addTestSuite( MavenIT0102Test.class );
-        suite.addTestSuite( MavenIT0101Test.class );
         suite.addTestSuite( MavenIT0100Test.class );
         suite.addTestSuite( MavenIT0099Test.class );
         suite.addTestSuite( MavenIT0098Test.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2052InterpolateWithSettingsProfilePropertiesTest.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-public class MavenIT0101Test
+public class MavenITmng2052InterpolateWithSettingsProfilePropertiesTest
     extends AbstractMavenIntegrationTestCase
 {
 
@@ -35,10 +35,10 @@ public class MavenIT0101Test
      * settings are available for interpolation of systemPath in a dependency.
      * [MNG-2052]
      */
-    public void testit0101()
+    public void testitMNG2052()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/it0101" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-2052" );
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
         List cliOptions = new ArrayList();
         cliOptions.add( "--settings settings.xml" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2136ActiveByDefaultProfileTest.java
Patch:
@@ -25,18 +25,18 @@
 import java.io.File;
 import java.util.Properties;
 
-public class MavenIT0102Test
+public class MavenITmng2136ActiveByDefaultProfileTest
     extends AbstractMavenIntegrationTestCase
 {
 
     /**
      * Test that &lt;activeByDefault/&gt; calculations for profile activation only
      * use profiles defined in the POM. [MNG-2136]
      */
-    public void testit0102()
+    public void testitMNG2136()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/it0102" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-2136" );
 
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2196ParentResolutionTest.java
Patch:
@@ -25,7 +25,7 @@
 
 import java.io.File;
 
-public class MavenIT0103Test
+public class MavenITmng2196ParentResolutionTest
     extends AbstractMavenIntegrationTestCase
 {
 
@@ -34,10 +34,10 @@ public class MavenIT0103Test
      * a parent can build, even if that parent is not correctly referenced by
      * &lt;relativePath/&gt; and is not in the local repository. [MNG-2196]
      */
-    public void testit0103()
+    public void testitMNG2196()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/it0103" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-2196" );
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
 
         

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -164,6 +164,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng2744checksumVerificationTest.class );
         suite.addTestSuite( MavenITmng2739RequiredRepositoryElementsTest.class );
         suite.addTestSuite( MavenITmng2695OfflinePluginSnapshotsTest.class );
+        suite.addTestSuite( MavenITmng2591MergeInheritedPluginConfigTest.class );
         suite.addTestSuite( MavenITmng2562TimestampTest.class );
         suite.addTestSuite( MavenITmng2339BadProjectInterpolationTest.class );
         suite.addTestSuite( MavenITmng2318LocalParentResolutionTest.class );
@@ -237,7 +238,6 @@ public static Test suite()
         suite.addTestSuite( MavenIT0063Test.class );
         suite.addTestSuite( MavenIT0062Test.class );
         suite.addTestSuite( MavenIT0061Test.class );
-        suite.addTestSuite( MavenIT0060Test.class );
         suite.addTestSuite( MavenIT0059Test.class );
         suite.addTestSuite( MavenIT0058Test.class );
         suite.addTestSuite( MavenIT0057Test.class );

File: maven-project/src/main/java/org/apache/maven/project/builder/PomClassicTransformer.java
Patch:
@@ -184,9 +184,9 @@ public DomainModel transformToDomainModel( List<ModelProperty> properties )
                 ModelContainerAction action = dependencyContainer.containerAction( managementContainer );
                 if ( action.equals( ModelContainerAction.JOIN ) || action.equals( ModelContainerAction.DELETE ) )
                 {
-                    ModelContainer reverseSortedContainer = new ArtifactModelContainerFactory().create(
-                        ModelTransformerContext.sort(dependencyContainer.getProperties(), ProjectUri.Build.Plugins.Plugin.xUri) );
-                    source.join( reverseSortedContainer, managementContainer );
+                   // ModelContainer reverseSortedContainer = new ArtifactModelContainerFactory().create(
+                   //     ModelTransformerContext.sort(dependencyContainer.getProperties(), ProjectUri.Build.Plugins.Plugin.xUri) );
+                    source.join( dependencyContainer, managementContainer );
                 }
             }
         }

File: maven-project/src/main/java/org/apache/maven/project/builder/PomClassicTransformer.java
Patch:
@@ -184,7 +184,9 @@ public DomainModel transformToDomainModel( List<ModelProperty> properties )
                 ModelContainerAction action = dependencyContainer.containerAction( managementContainer );
                 if ( action.equals( ModelContainerAction.JOIN ) || action.equals( ModelContainerAction.DELETE ) )
                 {
-                    source.join( dependencyContainer, managementContainer );
+                    ModelContainer reverseSortedContainer = new ArtifactModelContainerFactory().create(
+                        ModelTransformerContext.sort(dependencyContainer.getProperties(), ProjectUri.Build.Plugins.Plugin.xUri) );
+                    source.join( reverseSortedContainer, managementContainer );
                 }
             }
         }

File: maven-shared-model/src/main/java/org/apache/maven/shared/model/ModelTransformerContext.java
Patch:
@@ -340,7 +340,7 @@ private static List<ModelProperty> importModelProperties(Collection<ImportModel>
      * @param baseUri    the base URI of every model property
      * @return sorted list of model properties
      */
-    protected static List<ModelProperty> sort( List<ModelProperty> properties, String baseUri )
+    public static List<ModelProperty> sort( List<ModelProperty> properties, String baseUri )
     {
         if ( properties == null )
         {

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -93,7 +93,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng3827PluginConfigTest.class );
         suite.addTestSuite( MavenITmng3822BasedirAlignedInterpolationTest.class );
         suite.addTestSuite( MavenITmng3821EqualPluginExecIdsTest.class );
-        suite.addTestSuite( MavenITmng3818PluginDepPlexusUtilsTest.class );
+        suite.addTestSuite( MavenITmng3819PluginDepPlexusUtilsTest.class );
         suite.addTestSuite( MavenITmng3813PluginClassPathOrderingTest.class );
         suite.addTestSuite( MavenITmng3805ExtensionClassPathOrderingTest.class );
         suite.addTestSuite( MavenITmng3796ClassImportInconsistencyTest.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3819PluginDepPlexusUtilsTest.java
Patch:
@@ -26,12 +26,12 @@
 import java.util.Properties;
 
 /**
- * This is a test set for <a href="http://jira.codehaus.org/browse/MNG-3818">MNG-3818</a>.
+ * This is a test set for <a href="http://jira.codehaus.org/browse/MNG-3819">MNG-3819</a>.
  * 
  * @author Benjamin Bentmann
  * @version $Id$
  */
-public class MavenITmng3818PluginDepPlexusUtilsTest
+public class MavenITmng3819PluginDepPlexusUtilsTest
     extends AbstractMavenIntegrationTestCase
 {
 
@@ -43,7 +43,7 @@ public class MavenITmng3818PluginDepPlexusUtilsTest
     public void testitMNG3818()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3818" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3819" );
 
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
         verifier.setAutoclean( false );

File: maven-shared-model/src/main/java/org/apache/maven/shared/model/ModelMarshaller.java
Patch:
@@ -77,8 +77,8 @@ public static List<ModelProperty> marshallXmlToModelProperties( InputStream inpu
 
         List<ModelProperty> modelProperties = new ArrayList<ModelProperty>();
         XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();
-        xmlInputFactory.setProperty(XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES, "false");
-        xmlInputFactory.setProperty(XMLInputFactory.IS_NAMESPACE_AWARE, "false");
+        xmlInputFactory.setProperty( XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES, Boolean.FALSE );
+        xmlInputFactory.setProperty( XMLInputFactory.IS_NAMESPACE_AWARE, Boolean.FALSE );
 
         Uri uri = new Uri( baseUri );
         String tagName = baseUri;

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -88,6 +88,7 @@ public static Test suite()
         // suite.addTestSuite( MavenIT0109ReleaseUpdateTest.class );
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
 
+        suite.addTestSuite( MavenITmng3831PomInterpolationTest.class );
         suite.addTestSuite( MavenITmng3827PluginConfigTest.class );
         suite.addTestSuite( MavenITmng3822BasedirAlignedInterpolationTest.class );
         suite.addTestSuite( MavenITmng3821EqualPluginExecIdsTest.class );
@@ -180,7 +181,6 @@ public static Test suite()
         suite.addTestSuite( MavenITmng1412DependenciesOrderTest.class );
         suite.addTestSuite( MavenITmng1323AntrunDependenciesTest.class );
         suite.addTestSuite( MavenITmng0469ReportConfigTest.class );
-        suite.addTestSuite( MavenIT0141Test.class );
         suite.addTestSuite( MavenIT0140Test.class );
         suite.addTestSuite( MavenIT0139Test.class );
         suite.addTestSuite( MavenIT0138PluginLifecycleTest.class );

File: maven-project/src/main/java/org/apache/maven/project/builder/IdModelContainerFactory.java
Patch:
@@ -36,7 +36,7 @@ public class IdModelContainerFactory
 
     private static final Collection<String> uris = Collections.unmodifiableList( Arrays.asList(
         ProjectUri.PluginRepositories.PluginRepository.xUri, ProjectUri.Repositories.Repository.xUri,
-        ProjectUri.Reporting.Plugins.Plugin.ReportSets.ReportSet.xUri, ProjectUri.Profiles.Profile.xUri) );
+        ProjectUri.Profiles.Profile.xUri) );
 
     public Collection<String> getUris()
     {

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -163,10 +163,13 @@ public static Test suite()
         suite.addTestSuite( MavenITmng2695OfflinePluginSnapshotsTest.class );
         suite.addTestSuite( MavenITmng2562TimestampTest.class );
         suite.addTestSuite( MavenITmng2339BadProjectInterpolationTest.class );
+        suite.addTestSuite( MavenITmng2318LocalParentResolutionTest.class );
+        suite.addTestSuite( MavenITmng2293CustomPluginParamImplTest.class );
         suite.addTestSuite( MavenITmng2277AggregatorAndResolutionPluginsTest.class );
         suite.addTestSuite( MavenITmng2254PomEncodingTest.class );
         suite.addTestSuite( MavenITmng2234ActiveProfilesFromSettingsTest.class );
         suite.addTestSuite( MavenITmng2228ComponentInjectionTest.class );
+        suite.addTestSuite( MavenITmng2201PluginConfigInterpolationTest.class );
         suite.addTestSuite( MavenITmng2123VersionRangeDependencyTest.class );
         suite.addTestSuite( MavenITmng2068ReactorRelativeParentsTest.class );
         suite.addTestSuite( MavenITmng2045testJarDependenciesBrokenInReactorTest.class );
@@ -193,9 +196,6 @@ public static Test suite()
         suite.addTestSuite( MavenIT0115CustomArtifactHandlerAndCustomLifecycleTest.class );
         suite.addTestSuite( MavenIT0113ServerAuthzAvailableToWagonMgrInPluginTest.class );
         suite.addTestSuite( MavenIT0110PluginDependenciesComeFromPluginReposTest.class );
-        suite.addTestSuite( MavenIT0107Test.class );
-        suite.addTestSuite( MavenIT0106Test.class );
-        suite.addTestSuite( MavenIT0104Test.class );
         suite.addTestSuite( MavenIT0103Test.class );
         suite.addTestSuite( MavenIT0102Test.class );
         suite.addTestSuite( MavenIT0101Test.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2201PluginConfigInterpolationTest.java
Patch:
@@ -30,17 +30,17 @@
  * 
  * @version $Id$
  */
-public class MavenIT0104Test
+public class MavenITmng2201PluginConfigInterpolationTest
     extends AbstractMavenIntegrationTestCase
 {
 
     /**
      * Verify that plugin configurations are correctly interpolated
      */
-    public void testit0104()
+    public void testitMNG2201()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/it0104" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-2201" );
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
         verifier.setAutoclean( false );
         verifier.deleteDirectory( "target" );

File: its/core-it-support/core-it-plugins/maven-it-plugin-configuration/src/main/java/org/apache/maven/plugin/coreit/ConfigMojo.java
Patch:
@@ -351,7 +351,7 @@ else if ( value instanceof PlexusConfiguration )
             PlexusConfiguration children[] = config.getChildren();
             props.setProperty( key + ".children", Integer.toString( children.length ) );
             Map indices = new HashMap();
-            for ( int i = children.length - 1; i >= 0; i-- )
+            for ( int i = 0; i < children.length; i++ )
             {
                 PlexusConfiguration child = children[i];
                 String name = child.getName();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3821EqualPluginExecIdsTest.java
Patch:
@@ -39,7 +39,7 @@ public class MavenITmng3821EqualPluginExecIdsTest
      * Verify that using the same id for executions/reportsets of different plugins doesn't blow up the project
      * builder.
      */
-    public void testitMNG3818()
+    public void testitMNG3821()
         throws Exception
     {
         File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3821" );

File: maven-project/src/main/java/org/apache/maven/project/builder/IdModelContainerFactory.java
Patch:
@@ -36,8 +36,7 @@ public class IdModelContainerFactory
 
     private static final Collection<String> uris = Collections.unmodifiableList( Arrays.asList(
         ProjectUri.PluginRepositories.PluginRepository.xUri, ProjectUri.Repositories.Repository.xUri,
-        ProjectUri.Reporting.Plugins.Plugin.ReportSets.ReportSet.xUri, ProjectUri.Profiles.Profile.xUri,
-        ProjectUri.Build.Plugins.Plugin.Executions.Execution.xUri ) );
+        ProjectUri.Reporting.Plugins.Plugin.ReportSets.ReportSet.xUri, ProjectUri.Profiles.Profile.xUri) );
 
     public Collection<String> getUris()
     {

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -73,7 +73,6 @@ public static Test suite()
 /* Tests to be added
 MavenIT0109ReleaseUpdateTest
 MavenITmng0612NewestConflictResolverTest
-MavenITmng3415JunkRepositoryMetadataTest
 MavenITmng3645POMSyntaxErrorTest
 */
 
@@ -114,6 +113,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng3475BaseAlignedDirTest.class );
         suite.addTestSuite( MavenITmng3441MetadataUpdatedFromDeploymentRepositoryTest.class );
         suite.addTestSuite( MavenITmng3428PluginDescriptorArtifactsIncompleteTest.class );
+        suite.addTestSuite( MavenITmng3415JunkRepositoryMetadataTest.class );
         suite.addTestSuite( MavenITmng3396DependencyManagementForOverConstrainedRangesTest.class );
         suite.addTestSuite( MavenITmng3394POMPluginVersionDominanceTest.class );
         suite.addTestSuite( MavenITmng3380ManagedRelocatedTransdepsTest.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -73,7 +73,6 @@ public static Test suite()
 /* Tests to be added
 MavenIT0109ReleaseUpdateTest
 MavenITmng0612NewestConflictResolverTest
-MavenITmng3259DepsDroppedInMultiModuleBuildTest
 MavenITmng3415JunkRepositoryMetadataTest
 MavenITmng3645POMSyntaxErrorTest
 */
@@ -126,6 +125,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng3271DefaultReportsSuppressionTest.class );
         suite.addTestSuite( MavenITmng3221InfiniteForkingTest.class );
         suite.addTestSuite( MavenITmng3268MultipleDashPCommandLineTest.class );
+        suite.addTestSuite( MavenITmng3259DepsDroppedInMultiModuleBuildTest.class );
         suite.addTestSuite( MavenITmng3220ImportScopeTest.class );
         suite.addTestSuite( MavenITmng3134DistMgmtSiteUrlParentCalculationTest.class );
         suite.addTestSuite( MavenITmng3106ProfileMultipleActivatorsTest.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -73,7 +73,6 @@ public static Test suite()
 /* Tests to be added
 MavenIT0109ReleaseUpdateTest
 MavenITmng0612NewestConflictResolverTest
-MavenITmng2883LegacyRepoOfflineTest
 MavenITmng3259DepsDroppedInMultiModuleBuildTest
 MavenITmng3415JunkRepositoryMetadataTest
 MavenITmng3645POMSyntaxErrorTest
@@ -137,6 +136,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng2926PluginPrefixOrderTest.class );
         suite.addTestSuite( MavenITmng2921ActiveAttachedArtifactsTest.class );
         suite.addTestSuite( MavenITmng2892HideCorePlexusUtilsTest.class );
+        suite.addTestSuite( MavenITmng2883LegacyRepoOfflineTest.class );
         suite.addTestSuite( MavenITmng2878DefaultReportXmlImportTest.class );
         suite.addTestSuite( MavenITmng2871PrePackageSubartifactResolutionTest.class );
         suite.addTestSuite( MavenITmng2861RelocationsAndRangesTest.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -73,7 +73,6 @@ public static Test suite()
 /* Tests to be added
 MavenIT0109ReleaseUpdateTest
 MavenITmng0612NewestConflictResolverTest
-MavenITmng3134DistMgmtSiteUrlParentCalculationTest
 MavenITmng2883LegacyRepoOfflineTest
 MavenITmng3259DepsDroppedInMultiModuleBuildTest
 MavenITmng3415JunkRepositoryMetadataTest
@@ -129,6 +128,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng3221InfiniteForkingTest.class );
         suite.addTestSuite( MavenITmng3268MultipleDashPCommandLineTest.class );
         suite.addTestSuite( MavenITmng3220ImportScopeTest.class );
+        suite.addTestSuite( MavenITmng3134DistMgmtSiteUrlParentCalculationTest.class );
         suite.addTestSuite( MavenITmng3106ProfileMultipleActivatorsTest.class );
         suite.addTestSuite( MavenITmng3099SettingsProfilesWithNoPomTest.class );
         suite.addTestSuite( MavenITmng3052DepRepoAggregationTest.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -109,6 +109,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng3545ProfileDeactivationTest.class );
         suite.addTestSuite( MavenITmng3536AppendedAbsolutePathsTest.class );
         suite.addTestSuite( MavenITmng3535SelfReferentialPropertiesTest.class );
+        suite.addTestSuite( MavenITmng3530DynamicPOMInterpolationTest.class );
         suite.addTestSuite( MavenITmng3503Xpp3ShadingTest.class );
         suite.addTestSuite( MavenITmng3498ForkToOtherMojoTest.class );
         suite.addTestSuite( MavenITmng3485OverrideWagonExtensionTest.class );
@@ -281,7 +282,6 @@ public static Test suite()
         // Pending resolution in code
         // suite.addTestSuite( MavenITmng3814BogusProjectCycleTest.class );
         // suite.addTestSuite( MavenITmng3391ImportScopeErrorScenariosTest.class );
-        // suite.addTestSuite( MavenITmng3530DynamicPOMInterpolationTest.class );
 
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
         // suite.addTestSuite( MavenITmng3038TransitiveDepManVersionTest.class ); -- MNG-3038

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3530DynamicPOMInterpolationTest.java
Patch:
@@ -40,7 +40,7 @@ public class MavenITmng3530DynamicPOMInterpolationTest
 
     public MavenITmng3530DynamicPOMInterpolationTest()
     {
-        super( "(2.0.9,)" ); // only test in 2.0.9+
+        super( "[2.1.0-M1,)" );
     }
 
     public void testitMNG3530_BuildPath()

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0110PluginDependenciesComeFromPluginReposTest.java
Patch:
@@ -35,10 +35,10 @@ public void testit0110()
         File testDir =
             ResourceExtractor.simpleExtractResources( getClass(), "/it0110-pluginDependenciesComeFromPluginRepos" );
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
-        verifier.deleteArtifact( "org.apache.maven.it", "mail", "1.3.2", "jar" );
+        verifier.deleteArtifacts( "org.apache.maven.its.mng2539" );
         verifier.executeGoal( "clean" );
         verifier.verifyErrorFreeLog();
         verifier.resetStreams();
-
     }
+
 }

File: its/core-it-support/maven-it-archetype/src/main/resources/archetype-resources/src/test/resources/mng-xxxx/checkstyle-test/src/main/java/Class.java
Patch:
@@ -1,3 +1,6 @@
+#set( $symbol_pound = '#' )
+#set( $symbol_dollar = '$' )
+#set( $symbol_escape = '\' )
 public class Class
 {
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -80,6 +80,7 @@ public static Test suite()
 MavenITmng3645POMSyntaxErrorTest
 */
 
+        suite.addTestSuite( MavenITmng3805ExtensionClassPathOrderingTest.class );
         suite.addTestSuite( MavenITmng3796ClassImportInconsistencyTest.class );
         suite.addTestSuite( MavenITmng3748BadSettingsXmlTest.class );
         suite.addTestSuite( MavenITmng3747PrefixedPathExpressionTest.class );
@@ -278,7 +279,6 @@ public static Test suite()
         // ----------------------------------------------------------------------------------------------------
 
         // Pending resolution in code
-        // suite.addTestSuite( MavenITmng3805ExtensionClassPathOrderingTest.class );
         // suite.addTestSuite( MavenITmng3391ImportScopeErrorScenariosTest.class );
         // suite.addTestSuite( MavenITmng3530DynamicPOMInterpolationTest.class );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3599useHttpProxyForWebDAVTest.java
Patch:
@@ -58,7 +58,7 @@ public class MavenITmng3599useHttpProxyForWebDAVTest
 
     public MavenITmng3599useHttpProxyForWebDAVTest()
     {
-        super( "(2.1.0-M1,)" );
+        super( "(2.0.9,)" );
     }
 
     public void setUp()

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2045testJarDependenciesBrokenInReactorTest.java
Patch:
@@ -50,9 +50,9 @@ public void testitMNG2045()
         Verifier verifier;
 
         verifier = new Verifier( testDir.getAbsolutePath() );
-        verifier.deleteArtifact( "testing", "mng-2045-test", "1.0-SNAPSHOT", "pom" );
-        verifier.deleteArtifact( "testing", "first-project", "1.0-SNAPSHOT", "jar" );
-        verifier.deleteArtifact( "testing", "second-project", "1.0-SNAPSHOT", "jar" );
+        verifier.deleteArtifact( "org.apache.maven.its.mng2045", "mng-2045-test", "1.0-SNAPSHOT", "pom" );
+        verifier.deleteArtifact( "org.apache.maven.its.mng2045", "first-project", "1.0-SNAPSHOT", "jar" );
+        verifier.deleteArtifact( "org.apache.maven.its.mng2045", "second-project", "1.0-SNAPSHOT", "jar" );
 
         verifier.executeGoal( "install" );
         verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3221InfiniteForkingTest.java
Patch:
@@ -49,7 +49,7 @@ public void testitMNG3221a()
         {
             verifier = new Verifier( reportDir.getAbsolutePath() );
 
-            verifier.deleteArtifact( "tests", "maven-forking-report-plugin", "1", "jar" );
+            verifier.deleteArtifact( "org.apache.maven.its.mng3221", "maven-forking-report-plugin", "1", "jar" );
 
             verifier.executeGoal( "install" );
             verifier.verifyErrorFreeLog();
@@ -93,7 +93,7 @@ public void testitMNG3221b()
         {
             verifier = new Verifier( pluginDir.getAbsolutePath() );
 
-            verifier.deleteArtifact( "tests", "maven-forking-test-plugin", "1", "jar" );
+            verifier.deleteArtifact( "org.apache.maven.its.mng3221", "maven-forking-test-plugin", "1", "jar" );
 
             verifier.executeGoal( "install" );
             verifier.verifyErrorFreeLog();

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3428PluginDescriptorArtifactsIncompleteTest.java
Patch:
@@ -66,7 +66,7 @@ public void testitMNG3428 ()
         // This should only succeed if commons-cli is part of ${plugin.artifacts}. The
         // commons-cli library is part of Maven's core classpath, so if this mojo succeeds
         // it means the PluginDescriptor.getArtifacts() call returns an unfiltered collection.
-        verifier.executeGoal( "tests:test-cli-maven-plugin:1:test" );
+        verifier.executeGoal( "org.apache.maven.its.mng3428:test-cli-maven-plugin:1:test" );
         verifier.verifyErrorFreeLog();
         verifier.resetStreams();
     }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0113ServerAuthzAvailableToWagonMgrInPluginTest.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-public class MavenIT0113ServerAuthzAvailableToWagonMgrInPlugin
+public class MavenIT0113ServerAuthzAvailableToWagonMgrInPluginTest
     extends AbstractMavenIntegrationTestCase
 {
     public void testit0113()

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0118AttachedArtifactsInReactorTest.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
-public class MavenIT0118AttachedArtifactsInReactor
+public class MavenIT0118AttachedArtifactsInReactorTest
     extends AbstractMavenIntegrationTestCase
 {
     public void testit0118()

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0129ResourceProvidedToAPluginAsAPluginDependencyTest.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
-public class MavenIT0129ResourceProvidedToAPluginAsAPluginDependency
+public class MavenIT0129ResourceProvidedToAPluginAsAPluginDependencyTest
     extends AbstractMavenIntegrationTestCase
 {
     public void testit0129()

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1323AntrunDependenciesTest.java
Patch:
@@ -31,11 +31,11 @@
  * @author Benjamin Bentmann
  * @version $Id$
  */
-public class MavenITmng1323AntrunDependencies
+public class MavenITmng1323AntrunDependenciesTest
     extends AbstractMavenIntegrationTestCase
 {
 
-    public MavenITmng1323AntrunDependencies()
+    public MavenITmng1323AntrunDependenciesTest()
     {
         super( "(2.999,)" );
     }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1491ReactorArtifactIdCollisionTest.java
Patch:
@@ -25,7 +25,7 @@
 
 import java.io.File;
 
-public class MavenITmng1491ReactorArtifactIdCollision
+public class MavenITmng1491ReactorArtifactIdCollisionTest
     extends AbstractMavenIntegrationTestCase
 {
     public void testitMNG1491 ()

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1493NonStandardModulePomNamesTest.java
Patch:
@@ -26,10 +26,10 @@
 import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
-public class MavenITmng1493NonStandardModulePomNames
+public class MavenITmng1493NonStandardModulePomNamesTest
     extends AbstractMavenIntegrationTestCase
 {
-    public MavenITmng1493NonStandardModulePomNames()
+    public MavenITmng1493NonStandardModulePomNamesTest()
     {
         super( "(2.0.8,)" ); // 2.0.9+ (including snapshots)
     }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2739RequiredRepositoryElementsTest.java
Patch:
@@ -36,10 +36,10 @@
  * @author jdcasey
  *
  */
-public class MavenITmng2739RequiredRepositoryElements
+public class MavenITmng2739RequiredRepositoryElementsTest
     extends AbstractMavenIntegrationTestCase
 {
-    public MavenITmng2739RequiredRepositoryElements()
+    public MavenITmng2739RequiredRepositoryElementsTest()
     {
         super( "(2.0.9,)" ); // only test in 2.0.9+
     }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2861RelocationsAndRangesTest.java
Patch:
@@ -25,10 +25,10 @@
 import java.io.File;
 
 
-public class MavenITmng2861RelocationsAndRanges
+public class MavenITmng2861RelocationsAndRangesTest
     extends AbstractMavenIntegrationTestCase
 {
-    public MavenITmng2861RelocationsAndRanges()
+    public MavenITmng2861RelocationsAndRangesTest()
     {
         super( "(2.0.8,)" );
     }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2926PluginPrefixOrderTest.java
Patch:
@@ -31,7 +31,7 @@
  * @author Brian Fox
  * @version $Id$
  */
-public class MavenITmng2926PluginPrefixOrder
+public class MavenITmng2926PluginPrefixOrderTest
     extends AbstractMavenIntegrationTestCase
 {
     public void testitMNG2926()

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2972OverridePluginDependencyTest.java
Patch:
@@ -31,11 +31,11 @@
  * @author Benjamin Bentmann
  * @version $Id$
  */
-public class MavenITmng2972OverridePluginDependency
+public class MavenITmng2972OverridePluginDependencyTest
     extends AbstractMavenIntegrationTestCase
 {
 
-    public MavenITmng2972OverridePluginDependency()
+    public MavenITmng2972OverridePluginDependencyTest()
     {
         super( "(2.0.8,)" );
     }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3038TransitiveDepManVersionTest.java
Patch:
@@ -32,7 +32,7 @@
  * @author Joakim Erdfelt
  * @version $Id$
  */
-public class MavenITmng3038TransitiveDepManVersion
+public class MavenITmng3038TransitiveDepManVersionTest
     extends AbstractMavenIntegrationTestCase
 {
     public void testitMNG3038()

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3099SettingsProfilesWithNoPomTest.java
Patch:
@@ -40,10 +40,10 @@
  * @author <a href="mailto:brianf@apache.org">Brian Fox</a>
  *
  */
-public class MavenITmng3099SettingsProfilesWithNoPOM
+public class MavenITmng3099SettingsProfilesWithNoPomTest
     extends AbstractMavenIntegrationTestCase
 {
-    public MavenITmng3099SettingsProfilesWithNoPOM()
+    public MavenITmng3099SettingsProfilesWithNoPomTest()
     {
         super( "(2.0.8,)" ); // 2.0.9+
     }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3106ProfileMultipleActivatorsTest.java
Patch:
@@ -31,10 +31,10 @@
  * when any of the activators are on.
  * 
  */
-public class MavenITmng3106ProfileMultipleActivators
+public class MavenITmng3106ProfileMultipleActivatorsTest
     extends AbstractMavenIntegrationTestCase
 {
-    public MavenITmng3106ProfileMultipleActivators()
+    public MavenITmng3106ProfileMultipleActivatorsTest()
     {
         super( "(2.0.9,)" );
     }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3221InfiniteForkingTest.java
Patch:
@@ -26,10 +26,10 @@
 import java.util.ArrayList;
 import java.util.List;
 
-public class MavenITmng3221InfiniteForking
+public class MavenITmng3221InfiniteForkingTest
     extends AbstractMavenIntegrationTestCase
 {
-    public MavenITmng3221InfiniteForking()
+    public MavenITmng3221InfiniteForkingTest()
     {
         super( "(2.0.8,2.99.99)" );
     }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3259DepsDroppedInMultiModuleBuildTest.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-public class MavenITmng3259DepsDroppedInMultiModuleBuild
+public class MavenITmng3259DepsDroppedInMultiModuleBuildTest
     extends AbstractMavenIntegrationTestCase
 {
     public void testitMNG3259 ()

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3268MultipleDashPCommandLineTest.java
Patch:
@@ -26,10 +26,10 @@
 import java.util.ArrayList;
 import java.util.List;
 
-public class MavenITmng3268MultipleDashPCommandLine
+public class MavenITmng3268MultipleDashPCommandLineTest
     extends AbstractMavenIntegrationTestCase
 {
-    public MavenITmng3268MultipleDashPCommandLine()
+    public MavenITmng3268MultipleDashPCommandLineTest()
     {
         super( "(2.0.9,)" );
     }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3331ModulePathNormalizationTest.java
Patch:
@@ -39,7 +39,7 @@
  * @author <a href="mailto:brianf@apache.org">Brian Fox</a>
  * 
  */
-public class MavenITmng3331ModulePathNormalization
+public class MavenITmng3331ModulePathNormalizationTest
     extends AbstractMavenIntegrationTestCase
 {
     public void testitMNG3331a ()

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3372DirectInvocationOfPluginsTest.java
Patch:
@@ -42,7 +42,7 @@
  * @author <a href="mailto:brianf@apache.org">Brian Fox</a>
  *
  */
-public class MavenITmng3372DirectInvocationOfPlugins
+public class MavenITmng3372DirectInvocationOfPluginsTest
     extends TestCase
 {
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3396DependencyManagementForOverConstrainedRangesTest.java
Patch:
@@ -24,12 +24,12 @@
 import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
-public class MavenITmng3396DependencyManagementForOverConstrainedRanges
+public class MavenITmng3396DependencyManagementForOverConstrainedRangesTest
     extends AbstractMavenIntegrationTestCase
 {
     private static final String GROUP_ID = "org.apache.maven.its.mng3396";
 
-    public MavenITmng3396DependencyManagementForOverConstrainedRanges()
+    public MavenITmng3396DependencyManagementForOverConstrainedRangesTest()
     {
         super( "(2.0.8,)" ); // 2.0.9+
     }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3475BaseAlignedDirTest.java
Patch:
@@ -24,11 +24,11 @@
 
 import java.io.File;
 
-public class MavenITmng3475BaseAlignedDir
+public class MavenITmng3475BaseAlignedDirTest
     extends AbstractMavenIntegrationTestCase
 {
     
-    public MavenITmng3475BaseAlignedDir()
+    public MavenITmng3475BaseAlignedDirTest()
     {
         super( "[2.1.0-M1,)"); // 2.1.0+ only
     }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3535SelfReferentialPropertiesTest.java
Patch:
@@ -26,11 +26,11 @@
 import java.util.ArrayList;
 import java.util.List;
 
-public class MavenITmng3535SelfReferentialProperties
+public class MavenITmng3535SelfReferentialPropertiesTest
     extends AbstractMavenIntegrationTestCase
 {
 
-    public MavenITmng3535SelfReferentialProperties()
+    public MavenITmng3535SelfReferentialPropertiesTest()
     {
         super( "[2.1.0-M1,2.99.99)" );
     }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3545ProfileDeactivationTest.java
Patch:
@@ -31,10 +31,10 @@
  * Test activation and deactivation of profiles.
  * 
  */
-public class MavenITmng3545ProfileDeactivation
+public class MavenITmng3545ProfileDeactivationTest
     extends AbstractMavenIntegrationTestCase
 {
-    public MavenITmng3545ProfileDeactivation()
+    public MavenITmng3545ProfileDeactivationTest()
     {
         super( "(2.0.9,)" );
     }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3581PluginUsesWagonDependencyTest.java
Patch:
@@ -24,10 +24,10 @@
 
 import java.io.File;
 
-public class MavenITmng3581PluginUsesWagonDependency
+public class MavenITmng3581PluginUsesWagonDependencyTest
     extends AbstractMavenIntegrationTestCase
 {
-    public MavenITmng3581PluginUsesWagonDependency()
+    public MavenITmng3581PluginUsesWagonDependencyTest()
     {
         // Not 2.0.9
         super( "(,2.0.9),(2.0.9,)" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3599useHttpProxyForWebDAVTest.java
Patch:
@@ -37,7 +37,7 @@
 import org.mortbay.jetty.Server;
 import org.mortbay.jetty.handler.AbstractHandler;
 
-public class MavenITmng3599useHttpProxyForWebDAV
+public class MavenITmng3599useHttpProxyForWebDAVTest
     extends AbstractMavenIntegrationTestCase
 {
     private static final String LS = System.getProperty( "line.separator" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3652UserAgentHeaderTest.java
Patch:
@@ -35,7 +35,7 @@
 import org.mortbay.jetty.Server;
 import org.mortbay.jetty.handler.AbstractHandler;
 
-public class MavenITmng3652UserAgentHeader
+public class MavenITmng3652UserAgentHeaderTest
     extends AbstractMavenIntegrationTestCase
 {
     private Server server;
@@ -44,7 +44,7 @@ public class MavenITmng3652UserAgentHeader
 
     private String userAgent;
 
-    public MavenITmng3652UserAgentHeader()
+    public MavenITmng3652UserAgentHeaderTest()
     {
         super( "[2.1.0-M1,2.99.99)" );
     }

File: its/core-it-support/maven-it-archetype/src/main/resources/archetype-resources/src/test/java/MavenITmngXXXXDescriptionOfProblemTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it;
+package ${package};
 
 /*
  * Licensed to the Apache Software Foundation (ASF) under one
@@ -23,6 +23,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import org.apache.maven.it.AbstractMavenIntegrationTestCase;
 import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1412DependenciesOrderTest.java
Patch:
@@ -44,7 +44,7 @@ public void testitMNG1412()
         throws Exception
     {
         // The testdir is computed from the location of this file.
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-1412-DependenciesOrder" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-1412" );
 
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1491ReactorArtifactIdCollision.java
Patch:
@@ -31,7 +31,7 @@ public class MavenITmng1491ReactorArtifactIdCollision
     public void testitMNG1491 ()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-1491-reactorArtifactIdCollision" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-1491" );
 
         Verifier verifier;
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1493NonStandardModulePomNames.java
Patch:
@@ -37,7 +37,7 @@ public MavenITmng1493NonStandardModulePomNames()
     public void testitMNG1493 ()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-1493-nonstandardModulePomNames" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-1493" );
 
         Verifier verifier;
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2045testJarDependenciesBrokenInReactorTest.java
Patch:
@@ -46,7 +46,7 @@ public MavenITmng2045testJarDependenciesBrokenInReactorTest()
     public void testitMNG2045()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-2045-testJarDependenciesBrokenInReactor" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-2045" );
         Verifier verifier;
 
         verifier = new Verifier( testDir.getAbsolutePath() );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2068ReactorRelativeParentsTest.java
Patch:
@@ -49,7 +49,7 @@ public void testitMNG2068 ()
     {
         // The testdir is computed from the location of this
         // file.
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-2068-reactorRelativeParents" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-2068" );
         File projectDir = new File( testDir, "frameworks" );
 
         Verifier verifier;

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2123VersionRangeDependencyTest.java
Patch:
@@ -43,7 +43,7 @@ public void testitMNG2123 ()
 
         // The testdir is computed from the location of this
         // file.
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-2123-npe-with-conflicting-ranges" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-2123" );
 
         Verifier verifier;
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2234ActiveProfilesFromSettingsTest.java
Patch:
@@ -37,7 +37,7 @@ public MavenITmng2234ActiveProfilesFromSettingsTest()
     public void testitMNG2234 ()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-2234-activeProfilesFromSettings" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-2234" );
 
         Verifier verifier;
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2254PomEncodingTest.java
Patch:
@@ -45,7 +45,7 @@ public void testitMNG2254 ()
     {
         // The testdir is computed from the location of this
         // file.
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-2254-PomEncoding" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-2254" );
 
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2277AggregatorAndResolutionPluginsTest.java
Patch:
@@ -44,7 +44,7 @@ public void testitMNG2277 ()
    
         // The testdir is computed from the location of this
         // file.
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-2277-aggregatorPlugins" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-2277" );
 
         Verifier verifier;
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2339BadProjectInterpolationTest.java
Patch:
@@ -38,7 +38,7 @@ public void testitMNG2339a()
         throws Exception
     {
         File testDir = ResourceExtractor.simpleExtractResources( getClass(),
-                                                                 "/mng-2339-badProjectInterpolation/a" );
+                                                                 "/mng-2339/a" );
 
         Verifier verifier;
 
@@ -58,7 +58,7 @@ public void testitMNG2339b()
         throws Exception
     {
         File testDir = ResourceExtractor.simpleExtractResources( getClass(),
-                                                                 "/mng-2339-badProjectInterpolation/b" );
+                                                                 "/mng-2339/b" );
 
         Verifier verifier;
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2562Timestamp.java
Patch:
@@ -33,7 +33,7 @@ public MavenITmng2562Timestamp()
 
     public void testitMNG2562() throws Exception {
         File testDir = ResourceExtractor.simpleExtractResources(getClass(),
-                "/mng-2562-timestamp");
+                "/mng-2562");
         Verifier verifier = new Verifier(testDir.getAbsolutePath());
         verifier.executeGoal("verify");
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2695OfflinePluginSnapshotsTest.java
Patch:
@@ -49,7 +49,7 @@ public MavenITmng2695OfflinePluginSnapshotsTest()
     public void testitMNG2695()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-2695-offlinePluginSnapshots" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-2695" );
 
         {
             // phase 1: run build in online mode to fill local repo

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2744checksumVerificationTest.java
Patch:
@@ -44,7 +44,7 @@ public MavenITmng2744checksumVerificationTest()
     public void testitMNG2744()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-2744-checksumVerification" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-2744" );
 
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2861RelocationsAndRanges.java
Patch:
@@ -40,7 +40,7 @@ public void testitMNG2861 ()
 
         // The testdir is computed from the location of this
         // file.
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-2861-relocationsAndRanges" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-2861" );
 
         Verifier verifier;
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2883LegacyRepoOfflineTest.java
Patch:
@@ -61,7 +61,7 @@ public void testParentUnresolvable()
     {
         String testName = "parent";
         File testDir = ResourceExtractor.simpleExtractResources( getClass(),
-                                                                 "/mng-2883-legacy-repo-offline/"
+                                                                 "/mng-2883/"
                                                                                  + testName );
 
         Verifier verifier;
@@ -152,7 +152,7 @@ public void testDependencyUnresolvable()
     {
         String testName = "dependency";
         File testDir = ResourceExtractor.simpleExtractResources( getClass(),
-                                                                 "/mng-2883-legacy-repo-offline/"
+                                                                 "/mng-2883/"
                                                                                  + testName );
 
         Verifier verifier;
@@ -246,7 +246,7 @@ public void testPluginUnresolvable()
     {
         String testName = "plugin";
         File testDir = ResourceExtractor.simpleExtractResources( getClass(),
-                                                                 "/mng-2883-legacy-repo-offline/"
+                                                                 "/mng-2883/"
                                                                                  + testName );
 
         Verifier verifier;

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3052DepRepoAggregationTest.java
Patch:
@@ -58,7 +58,7 @@ public void testitMNG3052 ()
         throws Exception
     {
         File testDir = ResourceExtractor.simpleExtractResources( getClass(),
-                                                                 "/mng-3052-depRepoAggregation" )
+                                                                 "/mng-3052" )
                                         .getCanonicalFile();
 
         File foo = new File( testDir, "foo" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3099SettingsProfilesWithNoPOM.java
Patch:
@@ -53,7 +53,7 @@ public void testitMNG3099 ()
     {
         // The testdir is computed from the location of this
         // file.
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3099-settingsProfilesWithNoPOM" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3099" );
 
         File plugin = new File( testDir, "plugin" );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3106ProfileMultipleActivators.java
Patch:
@@ -48,7 +48,7 @@ public MavenITmng3106ProfileMultipleActivators()
     public void testProfilesWithMultipleActivators()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3106-ProfileMultipleActivators" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3106" );
 
         Verifier verifier;
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3220ImportScopeTest.java
Patch:
@@ -39,7 +39,7 @@ public void testitMNG3220a()
         throws Exception
     {
         File testDir = ResourceExtractor.simpleExtractResources( getClass(),
-                                                                 "/mng-3220-importedDepMgmt/imported-pom-depMgmt" );
+                                                                 "/mng-3220/imported-pom-depMgmt" );
 
         File dmDir = new File( testDir, "dm-pom" );
         Verifier verifier = new Verifier( dmDir.getAbsolutePath() );
@@ -61,7 +61,7 @@ public void testitMNG3220b()
         throws Exception
     {
         File testDir = ResourceExtractor.simpleExtractResources( getClass(),
-                                                                 "/mng-3220-importedDepMgmt/depMgmt-pom-module-notImported" );
+                                                                 "/mng-3220/depMgmt-pom-module-notImported" );
 
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3259DepsDroppedInMultiModuleBuild.java
Patch:
@@ -32,7 +32,7 @@ public class MavenITmng3259DepsDroppedInMultiModuleBuild
     public void testitMNG3259 ()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3259-depsDroppedInMultiModuleBuild" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3259" );
 
         Verifier verifier;
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3268MultipleDashPCommandLine.java
Patch:
@@ -37,7 +37,7 @@ public MavenITmng3268MultipleDashPCommandLine()
     public void testMultipleProfileParams ()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3268-MultipleDashPCommandLine" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3268" );
 
         Verifier verifier;
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3284UsingCachedPluginsTest.java
Patch:
@@ -43,7 +43,7 @@ public MavenITmng3284UsingCachedPluginsTest()
     public void testitMNG3284()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3284-usingCachedPlugins" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3284" );
 
         /*
          * Phase 1: Ensure both plugin versions are already in the local repo. This is a crucial prerequisite for the

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3314OfflineSnapshotsTest.java
Patch:
@@ -50,7 +50,7 @@ public MavenITmng3314OfflineSnapshotsTest()
     public void testitMNG3314 ()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3314-offlineSnapshots" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3314" );
 
         {
             // phase 1: run build in online mode to fill local repo

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3331ModulePathNormalization.java
Patch:
@@ -46,7 +46,7 @@ public void testitMNG3331a ()
         throws Exception
     {
         //testMNG3331ModuleWithSpaces
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3331-modulePathNormalization/with-spaces" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3331/with-spaces" );
 
         Verifier verifier;
 
@@ -76,7 +76,7 @@ public void testitMNG3331b ()
         throws Exception
     {
         //testMNG3331ModuleWithRelativeParentDirRef
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3331-modulePathNormalization/with-relative-parentDir-ref" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3331/with-relative-parentDir-ref" );
 
         Verifier verifier;
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3372DirectInvocationOfPlugins.java
Patch:
@@ -51,7 +51,7 @@ public void testitMNG3372()
     {
         // The testdir is computed from the location of this
         // file.
-        File testBaseDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3372-directInvocationOfPlugins/direct-using-prefix" );
+        File testBaseDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3372/direct-using-prefix" );
         File plugin = new File( testBaseDir, "plugin" );
         File project = new File( testBaseDir, "project" );
         File settingsFile = new File( testBaseDir, "settings.xml" );
@@ -81,7 +81,7 @@ public void testDependencyTreeInvocation()
     {
         // The testdir is computed from the location of this
         // file.
-        File testBaseDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3372-directInvocationOfPlugins/dependency-tree" );
+        File testBaseDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3372/dependency-tree" );
 
         Verifier verifier = new Verifier( testBaseDir.getAbsolutePath() );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3380ManagedRelocatedTransdepsTest.java
Patch:
@@ -51,7 +51,7 @@ public void testitMNG3380()
 
         // compute test directory
         File testDir = ResourceExtractor.simpleExtractResources(getClass(),
-                "/mng-3380-managedRelocatedTransdeps");
+                "/mng-3380");
 
         Verifier verifier = new Verifier(testDir.getAbsolutePath());
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3394POMPluginVersionDominanceTest.java
Patch:
@@ -38,7 +38,7 @@ public class MavenITmng3394POMPluginVersionDominanceTest
     extends AbstractMavenIntegrationTestCase
 {
 
-    private static final String BASEDIR_PREFIX = "/mng-3394-pomPluginVersionDominance/";
+    private static final String BASEDIR_PREFIX = "/mng-3394/";
 
     public MavenITmng3394POMPluginVersionDominanceTest()
     {

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3396DependencyManagementForOverConstrainedRanges.java
Patch:
@@ -37,7 +37,7 @@ public MavenITmng3396DependencyManagementForOverConstrainedRanges()
     public void testitMNG3396()
         throws Exception
     {
-        String baseDir = "/mng-3396-dependencyManagementForOverConstrainedRanges";
+        String baseDir = "/mng-3396";
         File testDir = ResourceExtractor.simpleExtractResources( getClass(), baseDir + "/dependencies" );
 
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3415JunkRepositoryMetadataTest.java
Patch:
@@ -52,7 +52,7 @@
 public class MavenITmng3415JunkRepositoryMetadataTest
     extends AbstractMavenIntegrationTestCase
 {
-    private static final String RESOURCE_BASE = "/mng-3415-junk-repository-metadata";
+    private static final String RESOURCE_BASE = "/mng-3415";
 
     public MavenITmng3415JunkRepositoryMetadataTest()
     {

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3428PluginDescriptorArtifactsIncompleteTest.java
Patch:
@@ -39,7 +39,7 @@ public MavenITmng3428PluginDescriptorArtifactsIncompleteTest()
     public void testitMNG3428 ()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3428-pluginDescriptorArtifactsIncomplete" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3428" );
 
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3441MetadataUpdatedFromDeploymentRepositoryTest.java
Patch:
@@ -44,7 +44,7 @@ public void testitMNG3441()
         throws Exception
     {
         File testDir =
-            ResourceExtractor.simpleExtractResources( getClass(), "/mng-3441-metadataUpdatedFromDeploymentRepository" );
+            ResourceExtractor.simpleExtractResources( getClass(), "/mng-3441" );
 
         File targetRepository = new File( testDir, "target-repository" );
         FileUtils.deleteDirectory( targetRepository );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3475BaseAlignedDir.java
Patch:
@@ -37,7 +37,7 @@ public void testitMNG3475()
         throws Exception
     {
         File testDir = ResourceExtractor.simpleExtractResources( getClass(),
-                                                                 "/mng-3475-baseAlignedDir" );
+                                                                 "/mng-3475" );
 
         File pluginDir = new File( testDir, "plugin" );
         Verifier verifier = new Verifier( pluginDir.getAbsolutePath() );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3485OverrideWagonExtensionTest.java
Patch:
@@ -37,7 +37,7 @@ public MavenITmng3485OverrideWagonExtensionTest()
     public void testitMNG3485 ()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3485-overrideWagonExtension" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3485" );
 
         Verifier verifier;
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3503Xpp3ShadingTest.java
Patch:
@@ -41,7 +41,7 @@ public void testitMNG3503NoLinkageErrors()
         throws Exception
     {
         File dir =
-            ResourceExtractor.simpleExtractResources( getClass(), "/mng-3503-xpp3Shading/mng-3503-xpp3Shading-pu11" );
+            ResourceExtractor.simpleExtractResources( getClass(), "/mng-3503/mng-3503-xpp3Shading-pu11" );
 
         Verifier verifier;
 
@@ -60,7 +60,7 @@ public void testitMNG3503Xpp3Shading()
         throws Exception
     {
         File dir =
-            ResourceExtractor.simpleExtractResources( getClass(), "/mng-3503-xpp3Shading/mng-3503-xpp3Shading-pu-new" );
+            ResourceExtractor.simpleExtractResources( getClass(), "/mng-3503/mng-3503-xpp3Shading-pu-new" );
         Verifier verifier = new Verifier( dir.getAbsolutePath() );
 
         verifier.executeGoal( "validate" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3530DynamicPOMInterpolationTest.java
Patch:
@@ -36,7 +36,7 @@
 public class MavenITmng3530DynamicPOMInterpolationTest
     extends AbstractMavenIntegrationTestCase
 {
-    private static final String BASEDIR = "/mng-3530-dynamicPOMInterpolation/";
+    private static final String BASEDIR = "/mng-3530/";
 
     public MavenITmng3530DynamicPOMInterpolationTest()
     {

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3535SelfReferentialProperties.java
Patch:
@@ -39,7 +39,7 @@ public void testitMNG3535_ShouldSucceed()
         throws Exception
     {
         File testDir =
-            ResourceExtractor.simpleExtractResources( getClass(), "/mng-3535-selfReferentialProperties/success" );
+            ResourceExtractor.simpleExtractResources( getClass(), "/mng-3535/success" );
 
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
 
@@ -58,7 +58,7 @@ public void testitMNG3535_ShouldFail()
         throws Exception
     {
         File testDir =
-            ResourceExtractor.simpleExtractResources( getClass(), "/mng-3535-selfReferentialProperties/failure" );
+            ResourceExtractor.simpleExtractResources( getClass(), "/mng-3535/failure" );
 
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3536AppendedAbsolutePaths.java
Patch:
@@ -33,7 +33,7 @@ public MavenITmng3536AppendedAbsolutePaths()
 
     public void testitMNG3536() throws Exception {
         File testDir = ResourceExtractor.simpleExtractResources( getClass(),
-                                                                 "/mng-3536-appendedAbsolutePaths" );
+                                                                 "/mng-3536" );
         File pluginDir = new File( testDir, "plugin" );
         Verifier verifier = new Verifier( pluginDir.getAbsolutePath() );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3581PluginUsesWagonDependency.java
Patch:
@@ -39,7 +39,7 @@ public MavenITmng3581PluginUsesWagonDependency()
     public void testmng3581()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3581-useWagonDependency" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3581" );
         File pluginDir = new File( testDir, "plugin" );
         File projectDir = new File( testDir, "project" );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3599useHttpProxyForWebDAV.java
Patch:
@@ -121,7 +121,7 @@ protected void tearDown()
     public void testmng3599useHttpProxyForHttp()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3599-useHttpProxyForWebDAV" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3599" );
 
         String settings = FileUtils.fileRead( new File( testDir, "settings.xml.template" ) );
         settings = StringUtils.replace( settings, "@port@", Integer.toString( port ) );
@@ -162,7 +162,7 @@ public void testmng3599useHttpProxyForWebDAV()
         // Doesn't work until 2.0.10+
         if ( matchesVersionRange( "(2.0.9, 2.99.99)" ) )
         {
-            File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3599-useHttpProxyForWebDAV" );
+            File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3599" );
 
             String settings = FileUtils.fileRead( new File( testDir, "settings.xml.template" ) );
             settings = StringUtils.replace( settings, "@port@", Integer.toString( port ) );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3642DynamicResourcesTest.java
Patch:
@@ -48,7 +48,7 @@ public void testitMNG3642 ()
     {
         // The testdir is computed from the location of this
         // file.
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3642-dynamicResources" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3642" );
 
         Verifier verifier;
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3645POMSyntaxErrorTest.java
Patch:
@@ -47,7 +47,7 @@ public void testitMNG3645 ()
     {
         // The testdir is computed from the location of this
         // file.
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3645-pomSyntaxError" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3645" );
 
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3667ResolveDepsWithBadPomVersionTest.java
Patch:
@@ -49,7 +49,7 @@ public void testitMNG3667 ()
     {
         // The testdir is computed from the location of this
         // file.
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3667-resolveDepsWithBadPomVersion" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3667" );
         File repoDir = new File( testDir, "repo" );
         File projectDir = new File( testDir, "project" );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3671PluginLevelDepInterpolationTest.java
Patch:
@@ -50,7 +50,7 @@ public void testitMNG3671 ()
     {
         // The testdir is computed from the location of this
         // file.
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3671-pluginLevelDepInterpolation" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3671" );
 
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3679PluginExecIdInterpolationTest.java
Patch:
@@ -36,7 +36,7 @@ public class MavenITmng3679PluginExecIdInterpolationTest
     public void testitMNG3679 ()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3679-pluginExecIdInterpolation" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3679" );
 
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3680InvalidDependencyPOMTest.java
Patch:
@@ -41,7 +41,7 @@ public MavenITmng3680InvalidDependencyPOMTest()
     public void testitMNG3680 ()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3680-invalidDependencyPOM" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3680" );
         File pluginDir = new File( testDir, "maven-mng3680-plugin" );
         
         Verifier verifier = new Verifier( pluginDir.getAbsolutePath() );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3684BuildPluginParameterTest.java
Patch:
@@ -41,7 +41,7 @@ public MavenITmng3684BuildPluginParameterTest()
     public void testitMNG3684 ()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3684-buildPluginParameter" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3684" );
         File pluginDir = new File( testDir, "maven-mng3684-plugin" );
         File projectDir = new File( testDir, "project" );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3693PomFileBasedirChangeTest.java
Patch:
@@ -40,7 +40,7 @@ public class MavenITmng3693PomFileBasedirChangeTest
     public void testitMNG3693 ()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3693-pomFileBasedirChange" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3693" );
         
         File pluginDir = new File( testDir, "maven-mng3693-plugin" );
         File projectsDir = new File( testDir, "projects" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3694ReactorProjectsDynamismTest.java
Patch:
@@ -43,7 +43,7 @@ public MavenITmng3694ReactorProjectsDynamismTest()
     public void testitMNG3694 ()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3694-reactorProjectsDynamism" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3694" );
 
         File pluginDir = new File( testDir, "maven-mng3694-plugin" );
         File projectDir = new File( testDir, "projects" );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3703ExecutionProjectWithRelativePathsTest.java
Patch:
@@ -42,7 +42,7 @@ public MavenITmng3703ExecutionProjectWithRelativePathsTest()
     public void testForkFromMojo()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3703-executionProjectRelativePaths" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3703" );
         File pluginDir = new File( testDir, "maven-mng3703-plugin" );
         File projectDir = new File( testDir, "project" );
 
@@ -69,7 +69,7 @@ public void testForkFromMojo()
     public void testForkFromReport()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3703-executionProjectRelativePaths" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3703" );
         File pluginDir = new File( testDir, "maven-mng3703-plugin" );
         File projectDir = new File( testDir, "project" );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3704LifecycleExecutorWrapperTest.java
Patch:
@@ -44,7 +44,7 @@ public MavenITmng3704LifecycleExecutorWrapperTest()
     public void testitMNG3704 ()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3704-lifecycleExecutorWrapper" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3704" );
         File pluginDir = new File( testDir, "maven-mng3704-plugin" );
         File projectDir = new File( testDir, "project" );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3710PollutedClonedPluginsTest.java
Patch:
@@ -45,7 +45,7 @@ public void testitMNG3710_POMInheritance()
         throws Exception
     {
         File testDir =
-            ResourceExtractor.simpleExtractResources( getClass(), "/mng-3710-pollutedClonedPlugins/pom-inheritance" );
+            ResourceExtractor.simpleExtractResources( getClass(), "/mng-3710/pom-inheritance" );
         File pluginDir = new File( testDir, "maven-mng3710-pomInheritance-plugin" );
         File projectsDir = new File( testDir, "projects" );
 
@@ -78,7 +78,7 @@ public void testitMNG3710_OriginalModel()
         throws Exception
     {
         File testDir =
-            ResourceExtractor.simpleExtractResources( getClass(), "/mng-3710-pollutedClonedPlugins/original-model" );
+            ResourceExtractor.simpleExtractResources( getClass(), "/mng-3710/original-model" );
         File pluginsDir = new File( testDir, "plugins" );
         File projectDir = new File( testDir, "project" );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3716AggregatorForkingTest.java
Patch:
@@ -44,7 +44,7 @@ public MavenITmng3716AggregatorForkingTest()
     public void testitMNG3716 ()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3716-aggregatorForking" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3716" );
         File pluginDir = new File( testDir, "maven-mng3716-plugin" );
         File projectsDir = new File( testDir, "projects" );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3723ConcreteParentProjectTest.java
Patch:
@@ -49,7 +49,7 @@ public void testitMNG3723 ()
     {
         // The testdir is computed from the location of this
         // file.
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3723-concreteParentProject" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3723" );
         File pluginDir = new File( testDir, "maven-mng3723-plugin" );
         File projectDir = new File( testDir, "projects" );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3724ExecutionProjectSyncTest.java
Patch:
@@ -44,7 +44,7 @@ public MavenITmng3724ExecutionProjectSyncTest()
     public void testitMNG3724 ()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3724-executionProjectSync" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3724" );
         File pluginDir = new File( testDir, "maven-mng3724-plugin" );
         File projectDir = new File( testDir, "project" );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3729MultiForkAggregatorsTest.java
Patch:
@@ -59,7 +59,7 @@ public MavenITmng3729MultiForkAggregatorsTest()
     public void testitMNG3729 ()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3729-multiforkAggregators" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3729" );
         File pluginDir = new File( testDir, "maven-mng3729-plugin" );
         File projectDir = new File( testDir, "projects" );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3740SelfReferentialReactorProjectsTest.java
Patch:
@@ -46,7 +46,7 @@ public MavenITmng3740SelfReferentialReactorProjectsTest()
     public void testitMNG3740 ()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3740-selfReferentialReactorProjects" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3740" );
         File v1 = new File( testDir, "projects.v1" );
         File v2 = new File( testDir, "projects.v2" );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3743ForkWithPluginManagementTest.java
Patch:
@@ -44,7 +44,7 @@ public MavenITmng3743ForkWithPluginManagementTest()
     public void testitMNG3743 ()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3743-forkWithPluginManagement" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3743" );
         File pluginsDir = new File( testDir, "plugins" );
         File projectDir = new File( testDir, "project" );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3746POMPropertyOverrideTest.java
Patch:
@@ -46,7 +46,7 @@ public void testitMNG3746_UsingDefaultSystemProperty()
     {
         // The testdir is computed from the location of this
         // file.
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3746-pomPropertyOverride" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3746" );
         File pluginDir = new File( testDir, "maven-mng3746-plugin" );
         File projectDir = new File( testDir, "project" );
 
@@ -68,7 +68,7 @@ public void testitMNG3746_UsingCLIProperty()
     {
         // The testdir is computed from the location of this
         // file.
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3746-pomPropertyOverride" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3746" );
         File pluginDir = new File( testDir, "maven-mng3746-plugin" );
         File projectDir = new File( testDir, "project" );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3747PrefixedPathExpressionTest.java
Patch:
@@ -44,7 +44,7 @@ public MavenITmng3747PrefixedPathExpressionTest()
     public void testitMNG3747 ()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3747-prefixedPathExpression" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3747" );
         File pluginDir = new File( testDir, "maven-mng3747-plugin" );
         File projectDir = new File( testDir, "project" );
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3748BadSettingsXmlTest.java
Patch:
@@ -47,7 +47,7 @@ public MavenITmng3748BadSettingsXmlTest()
     public void testitMNG3748 ()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3748-badSettingsXml" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3748" );
 
         Verifier verifier;
 

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng1323AntrunDependencies.java
Patch:
@@ -31,11 +31,11 @@
  * @author Benjamin Bentmann
  * @version $Id$
  */
-public class MavenIT0127AntrunDependencies
+public class MavenITmng1323AntrunDependencies
     extends AbstractMavenIntegrationTestCase
 {
 
-    public MavenIT0127AntrunDependencies()
+    public MavenITmng1323AntrunDependencies()
     {
         super( "(2.999,)" );
     }
@@ -47,7 +47,7 @@ public MavenIT0127AntrunDependencies()
     public void testitMNG1323()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/it0127-antrunDependencies" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-1323" );
 
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
         verifier.setAutoclean( false );

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -131,8 +131,10 @@ public static Test suite()
         suite.addTestSuite( MavenITmng3052DepRepoAggregationTest.class );
         suite.addTestSuite( MavenITmng3012Test.class );
         suite.addTestSuite( MavenITmng2972OverridePluginDependency.class );
+        suite.addTestSuite( MavenITmng2921Test.class );
         suite.addTestSuite( MavenITmng2892Test.class );
         suite.addTestSuite( MavenITmng2878Test.class );
+        suite.addTestSuite( MavenITmng2871Test.class );
         suite.addTestSuite( MavenITmng2861RelocationsAndRanges.class );
         suite.addTestSuite( MavenITmng2790Test.class );
         suite.addTestSuite( MavenITmng2749Test.class );
@@ -279,9 +281,6 @@ public static Test suite()
         // suite.addTestSuite( MavenITmng3391ImportScopeErrorScenariosTest.class );
         // suite.addTestSuite( MavenITmng3530DynamicPOMInterpolationTest.class );
 
-        // -- not passing for 2.0.7 either, looks to be 2.1+ ?
-        // suite.addTestSuite( MavenIT0120EjbClientDependency.class );
-
         // suite.addTestSuite( MavenIT0108SnapshotUpdateTest.class ); -- MNG-3137
         // suite.addTestSuite( MavenIT0121TransitiveDepManVersion.class ); -- MNG-3038
         // suite.addTestSuite( MavenIT0122ReactorDependencyResolutionTest.class ); -- MNG-3023

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -134,6 +134,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng2892Test.class );
         suite.addTestSuite( MavenITmng2878Test.class );
         suite.addTestSuite( MavenITmng2861RelocationsAndRanges.class );
+        suite.addTestSuite( MavenITmng2790Test.class );
         suite.addTestSuite( MavenITmng2749Test.class );
         suite.addTestSuite( MavenITmng2744checksumVerificationTest.class );
         suite.addTestSuite( MavenITmng2739RequiredRepositoryElements.class );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng2695OfflinePluginSnapshotsTest.java
Patch:
@@ -40,7 +40,7 @@ public class MavenITmng2695OfflinePluginSnapshotsTest
 
     public MavenITmng2695OfflinePluginSnapshotsTest()
     {
-        super( "(2.0.8,)" ); // only test in 2.0.9+
+        super( "(2.0.9,2.1.0-M1),(2.1.0-M1,)" ); // only test in 2.0.10+, and not in 2.1.0-M1
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3314OfflineSnapshotsTest.java
Patch:
@@ -41,7 +41,7 @@ public class MavenITmng3314OfflineSnapshotsTest
 
     public MavenITmng3314OfflineSnapshotsTest()
     {
-        super( "(2.0.8,)" ); // only test in 2.0.9+
+        super( "(2.0.9,2.1.0-M1),(2.1.0-M1,)" ); // only test in 2.0.10+, and not in 2.1.0-M1
     }
 
     /**

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -184,6 +184,7 @@ public static Test suite()
         suite.addTestSuite( MavenIT0096Test.class );
         suite.addTestSuite( MavenIT0095Test.class );
         suite.addTestSuite( MavenIT0092Test.class );
+        suite.addTestSuite( MavenIT0091Test.class );
         suite.addTestSuite( MavenIT0090Test.class );
         suite.addTestSuite( MavenIT0088Test.class );
         suite.addTestSuite( MavenIT0087Test.class );
@@ -287,7 +288,6 @@ public static Test suite()
         // suite.addTestSuite( MavenIT0124PomExtensionComponentOverrideTest.class ); -- MNG-2771
 
         // suite.addTestSuite( MavenIT0126TestJarDependency.class ); // MJAR-75 / MNG-3160
-        // suite.addTestSuite(MavenIT0091Test.class); // MNG-3160
 
         return suite;
     }

File: its/core-it-suite/src/test/java/org/apache/maven/it/IntegrationTestSuite.java
Patch:
@@ -113,7 +113,6 @@ public static Test suite()
         suite.addTestSuite( MavenITmng3485OverrideWagonExtensionTest.class );
         suite.addTestSuite( MavenITmng3482DependencyPomInterpolationTest.class );
         suite.addTestSuite( MavenITmng3475BaseAlignedDir.class );
-        suite.addTestSuite( MavenITmng3473PluginReportCrash.class );
         suite.addTestSuite( MavenITmng3441MetadataUpdatedFromDeploymentRepositoryTest.class );
         suite.addTestSuite( MavenITmng3428PluginDescriptorArtifactsIncompleteTest.class );
         suite.addTestSuite( MavenITmng3396DependencyManagementForOverConstrainedRanges.class );

File: its/core-it-suite/src/test/resources/it0115-customArtifactHandlerAndCustomLifecycle/test-extension/src/main/java/org/apache/maven/its/it0115/XarMojo.java
Patch:
@@ -29,7 +29,7 @@
 /**
  * Gather all resources in a XAR file (which is actually a ZIP file)
  *
- * @version $Id: $
+ * @version $Id$
  * @goal xar
  * @phase package
  */

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenIT0043Test.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
+import java.util.Collections;
 import java.util.Properties;
 
 public class MavenIT0043Test
@@ -52,6 +53,7 @@ public void testit0043()
         Properties systemProperties = new Properties();
         systemProperties.put( "expression.expressions", "project/repositories,project/pluginRepositories" );
         verifier.setSystemProperties( systemProperties );
+        verifier.setCliOptions( Collections.singletonList( "-s settings.xml" ) );
         verifier.executeGoal( "org.apache.maven.its.plugins:maven-it-plugin-expression:2.1-SNAPSHOT:eval" );
         verifier.verifyErrorFreeLog();
         verifier.resetStreams();

File: maven-project/src/main/java/org/apache/maven/project/builder/ProjectUri.java
Patch:
@@ -1506,7 +1506,7 @@ public static class Plugin
                     "http://apache.org/maven/project/reporting/plugins#collection/plugin/inherited";
 
                 public static String configuration =
-                    "http://apache.org/maven/project/reporting/plugins#collection/plugin/configuration";
+                    "http://apache.org/maven/project/reporting/plugins#collection/plugin/configuration#set";
 
                 public static class ReportSets
                 {

File: maven-shared-model/src/main/java/org/apache/maven/shared/model/ModelDataSource.java
Patch:
@@ -26,8 +26,7 @@
  * Provides services for joining, deleting and querying model containers.
  */
 public interface ModelDataSource
-{
-
+{   
     /**
      * Join model properties of the specified container a with the specified container b. Any elements of model container
      * a must take precedence over model container b. All elements of model container A must exist in the data source;

File: maven-shared-model/src/main/java/org/apache/maven/shared/model/impl/DefaultModelDataSource.java
Patch:
@@ -124,6 +124,9 @@ public ModelContainer join( ModelContainer a, ModelContainer b )
         if(startIndex == -1)
         {
             startIndex = modelProperties.indexOf( a.getProperties().get( 0 ) );
+            if(startIndex == -1) {
+                return null;
+            }
         }
         delete( a );
         delete( b );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITBootstrapTest.java
Patch:
@@ -43,7 +43,7 @@ public void testBootstrap()
 
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
         verifier.setAutoclean( false );
-        verifier.executeGoal( "compile" );
+        verifier.executeGoal( "test-compile" );
         verifier.verifyErrorFreeLog();
         verifier.resetStreams();
     }

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng0469Test.java
Patch:
@@ -42,7 +42,7 @@ public MavenITmng0469Test()
     /**
      * Test that <reporting> configuration also affects build plugins unless <build> configuration is also given.
      */
-    public void testMNG0469()
+    public void testitMNG0469()
         throws Exception
     {
         File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-0469" );

File: maven-project/src/main/java/org/apache/maven/project/builder/PomClassicTransformer.java
Patch:
@@ -558,6 +558,7 @@ private static void interpolateModelProperties(List<ModelProperty> modelProperti
         Map<String, String> aliases = new HashMap<String, String>();
         aliases.put( "project.", "pom.");
         aliases.put( "\\$\\{project.build.", "\\$\\{build.");
+        aliases.put( "\\$\\{project.parent.", "\\$\\{parent.");
 
         if(!containsProjectVersion(interpolatorProperties))
         {

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3473PluginReportCrash.java
Patch:
@@ -57,7 +57,6 @@ public void testitMNG3473 ()
 
         verifier.executeGoal( "install" );
         verifier.verifyErrorFreeLog();
-        verifier.resetStreams();
 
         logFile.renameTo( new File( testDir, "log-2.4.1-preinstall.txt" ) );
 
@@ -66,7 +65,6 @@ public void testitMNG3473 ()
 
         // NOTE: Velocity prints an [ERROR] line pertaining to an incorrect macro usage when run in 2.1, so this doesn't work.
 //        verifier.verifyErrorFreeLog();
-        verifier.resetStreams();
 
         logFile.renameTo( new File( testDir, "log-2.4.1.txt" ) );
 

File: maven-core/src/main/java/org/apache/maven/execution/DefaultRuntimeInformation.java
Patch:
@@ -66,7 +66,7 @@ public static ApplicationInformation getVersion( ClassLoader loader, String grou
             
             if ( resourceAsStream == null )
             {
-                return new ApplicationInformation( new DefaultArtifactVersion( version ), builtOn );
+                return new ApplicationInformation( new DefaultArtifactVersion( "3.0" ), builtOn );
             }
             
             properties.load( resourceAsStream );

File: maven-core/src/main/java/org/apache/maven/execution/DefaultRuntimeInformation.java
Patch:
@@ -66,7 +66,7 @@ public static ApplicationInformation getVersion( ClassLoader loader, String grou
             
             if ( resourceAsStream == null )
             {
-                throw new IllegalStateException( "Unable to find Maven properties in classpath: " + MAVEN_PROPERTIES );
+                return new ApplicationInformation( new DefaultArtifactVersion( version ), builtOn );
             }
             
             properties.load( resourceAsStream );

File: its/core-it-suite/src/test/java/org/apache/maven/it/MavenITmng3599useHttpProxyForWebDAV.java
Patch:
@@ -195,7 +195,7 @@ public void testmng3599useHttpProxyForWebDAV()
         }
         else
         {
-            System.out.print( " [skipping DAV test for Maven versions < 2.0.10 / 2.1 alpha]" );
+            System.out.print( " [skipping DAV test for Maven versions < 2.0.10]" );
         }
     }
 }

File: maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -406,13 +406,13 @@ private MavenProject constructMavenProjectFromModel( Model model, File pomFile,
     {
 
         MavenProject project = new MavenProject( model, artifactFactory, mavenTools, this, config );
+        validateModel( model, pomFile );
 
         Artifact projectArtifact = artifactFactory.createBuildArtifact( project.getGroupId(), project.getArtifactId(),
                                                                         project.getVersion(), project.getPackaging() );
         project.setArtifact( projectArtifact );
         project.setParentFile( parentFile );
 
-        validateModel( model, pomFile );
         return project;
     }
 

File: its/core-it-support/core-it-plugins/maven-it-plugin-touch/src/main/java/org/apache/maven/plugin/coreit/CoreItMojo.java
Patch:
@@ -94,7 +94,7 @@ public void execute()
         // This parameter should be aligned to the basedir as the parameter type is specified
         // as java.io.File
 
-        if ( basedirAlignmentDirectory.getPath().equals( "target/test-basedir-alignment" ) )
+        if ( !basedirAlignmentDirectory.isAbsolute() )
         {
             throw new MojoExecutionException( "basedirAlignmentDirectory not aligned" );
         }

File: maven-project/src/main/java/org/apache/maven/project/builder/ProjectUri.java
Patch:
@@ -392,7 +392,7 @@ public static class Execution
                                 "http://apache.org/maven/project/build/pluginManagement/plugins#collection/plugin/executions#collection/execution/inherited";
 
                             public static String configuration =
-                                "http://apache.org/maven/project/build/pluginManagement/plugins#collection/plugin/execution#collections/execution/configuration";
+                                "http://apache.org/maven/project/build/pluginManagement/plugins#collection/plugin/execution#collection/execution/configuration";
                         }
                     }
 

File: maven-shared-model/src/main/java/org/apache/maven/shared/model/ModelProperty.java
Patch:
@@ -130,7 +130,7 @@ public String getValue()
      */
     public String getResolvedValue()
     {
-        if( resolvedValue != null && !resolvedValue.startsWith ("<![CDATA[")
+        if( !uri.contains("#property") && resolvedValue != null && !resolvedValue.startsWith ("<![CDATA[")
                 && (resolvedValue.contains( "=" ) || resolvedValue.contains( "<" )))
         {
             resolvedValue =  "<![CDATA[" + resolvedValue + "]]>";

File: its/core-integration-tests-support/core-integration-testing-plugins/maven-it-plugin-file/src/main/java/org/apache/maven/plugin/coreit/FileMojo.java
Patch:
@@ -41,7 +41,7 @@ public class FileMojo
     /**
      * The path to the output file, relative to the current working directory.
      * 
-     * @parameter expression="${maven.pathname}" default-value="file.txt" alias="outputFile"
+     * @parameter expression="${maven.pathname}" default-value="target/file.txt" alias="outputFile"
      */
     private String pathname;
 
@@ -67,7 +67,8 @@ public void execute()
 
         try
         {
-             outputFile.createNewFile();
+            outputFile.getParentFile().mkdirs();
+            outputFile.createNewFile();
         }
         catch ( IOException e )
         {

File: its/core-integration-tests-support/core-integration-testing-plugins/maven-it-plugin-file/src/main/java/org/apache/maven/plugin/coreit/FilesMojo.java
Patch:
@@ -77,7 +77,8 @@ public void execute()
 
             try
             {
-                 outputFile.createNewFile();
+                outputFile.getParentFile().mkdirs();
+                outputFile.createNewFile();
             }
             catch ( IOException e )
             {

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/IntegrationTestSuite.java
Patch:
@@ -108,14 +108,14 @@ public static Test suite()
         suite.addTestSuite( MavenITmng3482DependencyPomInterpolationTest.class );
         suite.addTestSuite( MavenITmng3475BaseAlignedDir.class );
         suite.addTestSuite( MavenITmng3473PluginReportCrash.class );
+        suite.addTestSuite( MavenITmng3441MetadataUpdatedFromDeploymentRepositoryTest.class );
         suite.addTestSuite( MavenITmng3428PluginDescriptorArtifactsIncompleteTest.class );
         suite.addTestSuite( MavenITmng3426PluginsClasspathOverrideTest.class );
         suite.addTestSuite( MavenITmng3396DependencyManagementForOverConstrainedRanges.class );
         suite.addTestSuite( MavenITmng3394POMPluginVersionDominanceTest.class );
         suite.addTestSuite( MavenITmng3380ManagedRelocatedTransdepsTest.class );
         suite.addTestSuite( MavenITmng3372DirectInvocationOfPlugins.class );
         suite.addTestSuite( MavenITmng3355TranslatedPathInterpolationTest.class );
-        suite.addTestSuite( MavenITmng3341MetadataUpdatedFromDeploymentRepositoryTest.class );
         suite.addTestSuite( MavenITmng3331ModulePathNormalization.class );
         suite.addTestSuite( MavenITmng3314OfflineSnapshotsTest.class );
         suite.addTestSuite( MavenITmng3221InfiniteForking.class );

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenIT0103Test.java
Patch:
@@ -22,7 +22,7 @@ public void testit0103()
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
 
         
-        if ( matchesVersionRange( "(2.0.9, 2.99.99)" ) )
+        if ( matchesVersionRange( "[2.0.4, 2.99.99)" ) )
         {
             verifier.executeGoal( "package" );
             verifier.verifyErrorFreeLog();

File: maven-project/src/main/java/org/apache/maven/project/builder/impl/DefaultProjectBuilder.java
Patch:
@@ -308,7 +308,8 @@ private List<DomainModel> getDomainModelParentsFromLocalPath( PomClassicDomainMo
         if ( !parentDomainModel.matchesParent( domainModel.getModel().getParent() ) )
         {
             logger.warn( "Parent pom ids do not match: Parent File = " + parentFile.getAbsolutePath() + ", Parent ID = "
-                    + parentDomainModel.getId() + ": Child ID = " + domainModel.getId() );
+                    + parentDomainModel.getId() + ", Child ID = " + domainModel.getId() + ", Expected Parent ID = "
+                    + domainModel.getModel().getParent().getId() );
         }
 
         domainModels.add( parentDomainModel );

File: maven-project/src/main/java/org/apache/maven/project/builder/impl/DefaultProjectBuilder.java
Patch:
@@ -307,8 +307,8 @@ private List<DomainModel> getDomainModelParentsFromLocalPath( PomClassicDomainMo
 
         if ( !parentDomainModel.matchesParent( domainModel.getModel().getParent() ) )
         {
-            logger.warn( "Parent pom ids do not match: Parent File = " + parentFile.getAbsolutePath() +
-                ": Child ID = " + domainModel.getModel().getId() );
+            logger.warn( "Parent pom ids do not match: Parent File = " + parentFile.getAbsolutePath() + ", Parent ID = "
+                    + parentDomainModel.getId() + ": Child ID = " + domainModel.getId() );
         }
 
         domainModels.add( parentDomainModel );

File: maven-project/src/main/java/org/apache/maven/profiles/injection/DefaultProfileInjector.java
Patch:
@@ -70,8 +70,7 @@ public void inject( Profile profile, Model model )
         injectBuild( profile, model );
 
         Properties props = new Properties();
-        props.putAll( model.getProperties() );
-        props.putAll( profile.getProperties() );
+
 
         model.setProperties( props );
     }

File: maven-project/src/main/java/org/apache/maven/project/builder/PomClassicTransformer.java
Patch:
@@ -582,10 +582,11 @@ private static void interpolateModelProperties(List<ModelProperty> modelProperti
             }
         }
 
-        String basedir = domainModel.getProjectDirectory().getAbsolutePath();
+
         List<InterpolatorProperty> standardInterpolatorProperties = new ArrayList<InterpolatorProperty>();
         if(domainModel.isPomInBuild())
         {
+            String basedir = domainModel.getProjectDirectory().getAbsolutePath();
             standardInterpolatorProperties.add(new InterpolatorProperty("${project.basedir}", basedir,
                     PomInterpolatorTag.PROJECT_PROPERTIES.name() ));
             standardInterpolatorProperties.add(new InterpolatorProperty("${basedir}", basedir,
@@ -621,7 +622,7 @@ public int compare(InterpolatorProperty o, InterpolatorProperty o1) {
 
         //SECOND PASS - Set absolute paths on build directories
         if( domainModel.isPomInBuild() )
-        {
+        {   String basedir = domainModel.getProjectDirectory().getAbsolutePath();
             Map<ModelProperty, ModelProperty> buildDirectories = new HashMap<ModelProperty, ModelProperty>();
             for(ModelProperty mp : secondPassModelProperties)
             {

File: maven-shared-model/src/main/java/org/apache/maven/shared/model/ModelTransformerContext.java
Patch:
@@ -201,7 +201,7 @@ public DomainModel transform(List<DomainModel> domainModels, ModelTransformer fr
     {
 
         List<ModelProperty> transformedProperties =
-                importModelProperties(importModels, fromModelTransformer.transformToModelProperties( domainModels, interpolatorProperties ));
+                importModelProperties(importModels, fromModelTransformer.transformToModelProperties( domainModels));
 
         String baseUriForModel = fromModelTransformer.getBaseUri();
         List<ModelProperty> modelProperties =
@@ -265,9 +265,10 @@ else if ( ModelContainerAction.JOIN.equals( action ) )
 
 
         List<ModelProperty> mps = modelDataSource.getModelProperties();
-        //interpolateModelProperties( mps, baseUriForModel );
         mps = sort( mps, baseUriForModel );
 
+        fromModelTransformer.interpolateModelProperties( mps, interpolatorProperties, domainModels.get(0));
+
         try
         {
             DomainModel domainModel = toModelTransformer.transformToDomainModel( mps );

File: maven-shared-model/src/main/java/org/apache/maven/shared/model/InterpolatorProperty.java
Patch:
@@ -131,7 +131,7 @@ public static List<InterpolatorProperty> toInterpolatorProperties( Properties pr
         List<InterpolatorProperty> interpolatorProperties = new ArrayList<InterpolatorProperty>();
         for ( Map.Entry<Object, Object> e : properties.entrySet() )
         {
-            interpolatorProperties.add( new InterpolatorProperty( (String) e.getKey(), (String) e.getValue()) );
+            interpolatorProperties.add( new InterpolatorProperty( "${" + e.getKey() +"}", (String) e.getValue()) );
         }
         return interpolatorProperties;
     }

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenITmng3535SelfReferentialProperties.java
Patch:
@@ -15,7 +15,7 @@ public class MavenITmng3535SelfReferentialProperties
     public MavenITmng3535SelfReferentialProperties()
         throws InvalidVersionSpecificationException
     {
-        super( "(2.0.9,)" );
+        super( "(2.0.99,)" ); // 2.1.0+ only
     }
 
     public void testitMNG3535_ShouldSucceed()

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenITmng3703ExecutionProjectWithRelativePathsTest.java
Patch:
@@ -38,7 +38,7 @@ public class MavenITmng3703ExecutionProjectWithRelativePathsTest
     public MavenITmng3703ExecutionProjectWithRelativePathsTest()
         throws InvalidVersionSpecificationException
     {
-        super( "(2.0.9,)" ); // only test in 2.0.9+
+        super( "(2.0.99,)" ); // only test in 2.1.0+
     }
 
     public void testForkFromMojo()

File: maven-project/src/main/java/org/apache/maven/project/MavenProject.java
Patch:
@@ -1349,7 +1349,7 @@ public void setReportArtifacts( Set reportArtifacts )
 
     public Set getReportArtifacts()
     {
-        Set pluginArtifacts = new HashSet();
+        Set reportArtifacts = new HashSet();
         List reports = getReportPlugins();
         if ( reports != null )
         {
@@ -1380,7 +1380,7 @@ public Set getReportArtifacts()
 
                 if ( artifact != null )
                 {
-                    pluginArtifacts.add( artifact );
+                    reportArtifacts.add( artifact );
                 }
             }
         }

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenIT0026Test.java
Patch:
@@ -13,7 +13,7 @@ public class MavenIT0026Test
     public MavenIT0026Test()
         throws InvalidVersionSpecificationException
     {
-        super();
+        super( "[,2.1.99)" );
     }
 
     /**

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenIT0051Test.java
Patch:
@@ -14,7 +14,7 @@ public class MavenIT0051Test
     public MavenIT0051Test()                                                                                                                          
         throws InvalidVersionSpecificationException                                                                                                   
     {                                                                                                                                                 
-        super();
+        super( "[,2.1.99)" );
     }    
 
     /**

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenIT0092Test.java
Patch:
@@ -14,7 +14,7 @@ public class MavenIT0092Test
     public MavenIT0092Test()
         throws InvalidVersionSpecificationException
     {
-        super();
+        super( "[,2.1.99)" );
     }
     
     /**

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenIT0111PluginsThatRequireAResourceFromAnExtensionTest.java
Patch:
@@ -14,7 +14,7 @@ public class MavenIT0111PluginsThatRequireAResourceFromAnExtensionTest
     public MavenIT0111PluginsThatRequireAResourceFromAnExtensionTest()
         throws InvalidVersionSpecificationException
     {
-        super();
+        super( "(,2.1.99)" );
     }
 
     public void testit0111()

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenIT0114ExtensionThatProvidesResources.java
Patch:
@@ -14,7 +14,7 @@ public class MavenIT0114ExtensionThatProvidesResources
     public MavenIT0114ExtensionThatProvidesResources()
         throws InvalidVersionSpecificationException
     {
-        super();
+        super( "[,2.1.99)" );
     }
 
     public void testit0114()

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenITmng3220ImportScopeTest.java
Patch:
@@ -15,7 +15,7 @@ public class MavenITmng3220ImportScopeTest
     public MavenITmng3220ImportScopeTest()
         throws InvalidVersionSpecificationException
     {
-        super( "(2.0.8,)" ); // only test in 2.0.9+
+        super( "(2.0.8,2.1.99)" );
     }
 
     public void testitMNG3220a()

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenITmng3221InfiniteForking.java
Patch:
@@ -14,7 +14,7 @@ public class MavenITmng3221InfiniteForking
     public MavenITmng3221InfiniteForking()
         throws InvalidVersionSpecificationException
     {
-        super( "(2.0.8,)" ); // only test in 2.0.9+
+        super( "(2.0.8,2.1.99)" );
     }
 
     public void testitMNG3221a()

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenITmng3485OverrideWagonExtensionTest.java
Patch:
@@ -14,7 +14,7 @@ public class MavenITmng3485OverrideWagonExtensionTest
     public MavenITmng3485OverrideWagonExtensionTest()
         throws InvalidVersionSpecificationException
     {
-        super( "(2.0.8,)" ); // only test in 2.0.9+
+        super( "(2.0.8,2.1.99)" ); 
     }
 
     public void testitMNG3485 ()

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenITmng3599useHttpProxyForWebDAV.java
Patch:
@@ -116,7 +116,7 @@ public void testmng3599useHttpProxyForWebDAV()
         throws Exception
     {
         // Doesn't work until 2.0.10+
-        if ( matchesVersionRange( "(2.0.9,)" ) )
+        if ( matchesVersionRange( "(2.0.9, 2.1.99)" ) )
         {
             File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3599-useHttpProxyForWebDAV" );
 

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenITmng3652UserAgentHeader.java
Patch:
@@ -29,8 +29,7 @@ public class MavenITmng3652UserAgentHeader
     public MavenITmng3652UserAgentHeader()
         throws InvalidVersionSpecificationException
     {
-        // 2.0.10+
-        super( "(2.0.9,)" );
+        super( "(2.0.9,2.1.99)" );
     }
 
     public void setUp()

File: its/core-integration-tests/src/test/resources/mng-3703-executionProjectRelativePaths/maven-mng3703-plugin/src/main/java/jar/AbstractCheckMojo.java
Patch:
@@ -64,7 +64,9 @@ public void execute()
         
         checkListOfPaths( getTestProject().getCompileSourceRoots(), executionBasedir, "compileSourceRoots", failedPaths );
         checkListOfPaths( getTestProject().getTestCompileSourceRoots(), executionBasedir, "testCompileSourceRoots", failedPaths );
-        checkListOfPaths( getTestProject().getScriptSourceRoots(), executionBasedir, "scriptSourceRoots", failedPaths );
+
+        // MNG-3741: Don't worry about relative paths in scriptSourceRoots.
+        // checkListOfPaths( getTestProject().getScriptSourceRoots(), executionBasedir, "scriptSourceRoots", failedPaths );
         
         
         if ( !failedPaths.isEmpty() )

File: its/core-integration-tests/src/test/resources/mng-3703-executionProjectRelativePaths/maven-mng3703-plugin/src/main/java/jar/CheckReport.java
Patch:
@@ -77,7 +77,9 @@ protected void executeReport( Locale locale )
         checkListOfPaths( executionProject.getCompileSourceRoots(), executionBasedir, "compileSourceRoots", failedPaths );
         checkListOfPaths( executionProject.getTestCompileSourceRoots(), executionBasedir, "testCompileSourceRoots",
                           failedPaths );
-        checkListOfPaths( executionProject.getScriptSourceRoots(), executionBasedir, "scriptSourceRoots", failedPaths );
+
+        // MNG-3741: Don't worry about relative paths in scriptSourceRoots.
+        // checkListOfPaths( executionProject.getScriptSourceRoots(), executionBasedir, "scriptSourceRoots", failedPaths );
 
         if ( !failedPaths.isEmpty() )
         {

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/IntegrationTestSuite.java
Patch:
@@ -76,6 +76,7 @@ public static Test suite()
 MavenITmng3645POMSyntaxErrorTest
 */
 
+        suite.addTestSuite( MavenITmng3723ConcreteParentProjectTest.class );
         suite.addTestSuite( MavenITmng3716AggregatorForkingTest.class );
         suite.addTestSuite( MavenITmng3710PollutedClonedPluginsTest.class );
         suite.addTestSuite( MavenITmng3704LifecycleExecutorWrapperTest.class );

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/IntegrationTestSuite.java
Patch:
@@ -76,6 +76,7 @@ public static Test suite()
 MavenITmng3645POMSyntaxErrorTest
 */
 
+        suite.addTestSuite( MavenITmng3716AggregatorForkingTest.class );
         suite.addTestSuite( MavenITmng3710PollutedClonedPluginsTest.class );
         suite.addTestSuite( MavenITmng3704LifecycleExecutorWrapperTest.class );
         suite.addTestSuite( MavenITmng3703ExecutionProjectWithRelativePathsTest.class );

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/IntegrationTestSuite.java
Patch:
@@ -76,18 +76,19 @@ public static Test suite()
 MavenITmng3645POMSyntaxErrorTest
 */
 
+        suite.addTestSuite( MavenITmng3710PollutedClonedPluginsTest.class );
         suite.addTestSuite( MavenITmng3704LifecycleExecutorWrapperTest.class );
         suite.addTestSuite( MavenITmng3703ExecutionProjectWithRelativePathsTest.class );
         suite.addTestSuite( MavenITmng3694ReactorProjectsDynamismTest.class );
         suite.addTestSuite( MavenITmng3693PomFileBasedirChangeTest.class );
-        suite.addTestSuite( MavenITmng3599useHttpProxyForWebDAV.class );
         suite.addTestSuite( MavenITmng3684BuildPluginParameterTest.class );
         suite.addTestSuite( MavenITmng3680InvalidDependencyPOMTest.class );
         suite.addTestSuite( MavenITmng3679PluginExecIdInterpolationTest.class );
         suite.addTestSuite( MavenITmng3671PluginLevelDepInterpolationTest.class );
         suite.addTestSuite( MavenITmng3667ResolveDepsWithBadPomVersionTest.class );
         suite.addTestSuite( MavenITmng3652UserAgentHeader.class );
         suite.addTestSuite( MavenITmng3642DynamicResourcesTest.class );
+        suite.addTestSuite( MavenITmng3599useHttpProxyForWebDAV.class );
         suite.addTestSuite( MavenITmng3581PluginUsesWagonDependency.class );
         suite.addTestSuite( MavenITmng3545ProfileDeactivation.class );
         suite.addTestSuite( MavenITmng3536AppendedAbsolutePaths.class );

File: its/core-integration-tests/src/test/resources/mng-3703-executionProjectRelativePaths/maven-mng3703-plugin/src/main/java/jar/AbstractCheckMojo.java
Patch:
@@ -17,15 +17,14 @@
  */
 
 import java.util.Iterator;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 
 import org.apache.maven.plugin.AbstractMojo;
 import org.apache.maven.plugin.MojoExecutionException;
 import org.apache.maven.project.MavenProject;
 
-import com.sun.tools.jdi.LinkedHashMap;
-
 public abstract class AbstractCheckMojo
     extends AbstractMojo
 {

File: its/core-integration-tests/src/test/resources/mng-3703-executionProjectRelativePaths/maven-mng3703-plugin/src/main/java/jar/CheckReport.java
Patch:
@@ -17,6 +17,7 @@
  */
 
 import java.util.Iterator;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
@@ -25,7 +26,6 @@
 import org.apache.maven.doxia.siterenderer.Renderer;
 import org.apache.maven.project.MavenProject;
 
-import com.sun.tools.jdi.LinkedHashMap;
 import org.apache.maven.reporting.AbstractMavenReport;
 import org.apache.maven.reporting.MavenReportException;
 

File: its/core-integration-tests/src/test/resources/mng-3703-executionProjectRelativePaths/maven-mng3703-plugin/src/main/java/jar/AbstractCheckMojo.java
Patch:
@@ -56,7 +56,7 @@ public void execute()
         
         if ( getTestProject().getBasedir() == null )
         {
-            throw new MojoExecutionException( "Basedir is null on the " + getTestProjectLabel() + " instance." );
+            throw new MojoExecutionException( "Basedir is null on the " + getTestProjectLabel() + " instance (during mojo execution)." );
         }
         
         String executionBasedir = getTestProject().getBasedir().getAbsolutePath();

File: its/core-integration-tests/src/test/resources/mng-3703-executionProjectRelativePaths/maven-mng3703-plugin/src/main/java/jar/CheckMojo.java
Patch:
@@ -20,8 +20,7 @@
 
 /**
  * @goal check
- * @phase validate
- * @execute phase="validate"
+ * @execute phase="compile"
  */
 public class CheckMojo
     extends AbstractCheckMojo
@@ -34,6 +33,6 @@ protected MavenProject getTestProject()
     
     protected String getTestProjectLabel()
     {
-        return "execution project";
+        return "forked project";
     }
 }

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/IntegrationTestSuite.java
Patch:
@@ -76,6 +76,7 @@ public static Test suite()
 MavenITmng3645POMSyntaxErrorTest
 */
 
+        suite.addTestSuite( MavenITmng3704LifecycleExecutorWrapperTest.class );
         suite.addTestSuite( MavenITmng3703ExecutionProjectWithRelativePathsTest.class );
         suite.addTestSuite( MavenITmng3694ReactorProjectsDynamismTest.class );
         suite.addTestSuite( MavenITmng3693PomFileBasedirChangeTest.class );

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/IntegrationTestSuite.java
Patch:
@@ -76,6 +76,7 @@ public static Test suite()
 MavenITmng3645POMSyntaxErrorTest
 */
 
+        suite.addTestSuite( MavenITmng3694ReactorProjectsDynamismTest.class );
         suite.addTestSuite( MavenITmng3693PomFileBasedirChangeTest.class );
         suite.addTestSuite( MavenITmng3599useHttpProxyForWebDAV.class );
         suite.addTestSuite( MavenITmng3684BuildPluginParameterTest.class );

File: its/core-integration-tests/src/test/resources/mng-3652-user-agent/test-plugin/src/main/java/org/apache/maven/its/mng3652/MyMojo.java
Patch:
@@ -82,7 +82,7 @@ public void execute()
         throws MojoExecutionException
     {
         ArtifactRepository remote =
-            repositoryFactory.createArtifactRepository( "test", testProtocol + "://localhost:" + testPort, layout,
+            repositoryFactory.createArtifactRepository( "test", testProtocol + "://127.0.0.1:" + testPort, layout,
                                                         new ArtifactRepositoryPolicy(), new ArtifactRepositoryPolicy() );
         
         Artifact artifact = artifactFactory.createArtifact( "bad.group", "missing-artifact", "1", null, "jar" );

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/IntegrationTestSuite.java
Patch:
@@ -65,6 +65,7 @@ public static Test suite()
          * a fail fast technique as well.
          */
         
+        suite.addTestSuite( MavenITmng3684BuildPluginParameterTest.class );
         suite.addTestSuite( MavenITmng3680InvalidDependencyPOMTest.class );
         suite.addTestSuite( MavenITmng3679PluginExecIdInterpolationTest.class );
         suite.addTestSuite( MavenITmng3671PluginLevelDepInterpolationTest.class );

File: maven-core/src/main/java/org/apache/maven/lifecycle/binding/LifecycleBindingManager.java
Patch:
@@ -82,6 +82,4 @@ void resolveUnbindableMojos( final Set unbindableMojos,
                                         final LifecycleBindings lifecycleBindings )
         throws LifecycleSpecificationException;
 
-    List<org.apache.maven.lifecycle.binding.Lifecycle> getLifecycles();
-
 }

File: maven-project/src/main/java/org/apache/maven/project/ModelUtils.java
Patch:
@@ -562,8 +562,6 @@ private static void mergeReportSetDefinitions( ReportSet child, ReportSet parent
     public static Model cloneModel( Model model )
     {
         // TODO: would be nice for the modello:java code to generate this as a copy constructor
-        // FIXME: Fix deep cloning issues with existing plugin instances (setting 
-        //       a version when resolved will pollute the original model instance)
         Model newModel = new Model();
         ModelInheritanceAssembler assembler = new DefaultModelInheritanceAssembler();
         newModel.setModelVersion( model.getModelVersion() );

File: its/core-integration-tests/src/test/resources/it0088/src/test/java/org/apache/maven/it0088/PomInterpolationTest.java
Patch:
@@ -47,7 +47,7 @@ public void testProjectBuildDirectoryForMojoExecution()
         File projectBuildDirectory = new File( basedir, "target" );
 
         assertEquals( normalize( projectBuildDirectory.getAbsolutePath() ), normalize( testProperties.getProperty( "project.build.directory" ) ) );
-        assertEquals( normalize( projectBuildDirectory.getAbsolutePath() ), normalized( testProperties.getProperty( "targetDirectoryFile" ) ) );
+        assertEquals( normalize( projectBuildDirectory.getAbsolutePath() ), normalize( testProperties.getProperty( "targetDirectoryFile" ) ) );
         assertEquals( "target", testProperties.getProperty( "targetDirectoryString" ) );
     }
 

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/IntegrationTestSuite.java
Patch:
@@ -70,7 +70,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng3545ProfileDeactivation.class );
         suite.addTestSuite( MavenITmng3536AppendedAbsolutePaths.class );
         suite.addTestSuite( MavenITmng3535SelfReferentialProperties.class );
-		suite.addTestSuite( MavenITmng3502Xpp3ShadingTest.class );
+		suite.addTestSuite( MavenITmng3503Xpp3ShadingTest.class );
         suite.addTestSuite( MavenITmng3498ForkToOtherMojoTest.class );
         suite.addTestSuite( MavenITmng3485OverrideWagonExtensionTest.class );
         suite.addTestSuite( MavenITmng3482DependencyPomInterpolationTest.class );

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenIT0095Test.java
Patch:
@@ -24,7 +24,7 @@ public void testit0095()
         Verifier verifier = new Verifier( sub1.getAbsolutePath() );
 
         List options = new ArrayList();
-        options.add( "-Doutput=" + new File( sub1, "target/effective-pom.xml" ).getAbsolutePath() );
+        options.add( "-Doutput=\"" + new File( sub1, "target/effective-pom.xml" ).getAbsolutePath() + "\"" );
 
         verifier.setCliOptions( options );
 

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenIT0100Test.java
Patch:
@@ -23,7 +23,7 @@ public void testit0100()
         Verifier verifier = new Verifier( child.getAbsolutePath() );
 
         List options = new ArrayList();
-        options.add( "-Doutput=" + new File( child, "target/effective-pom.txt" ).getAbsolutePath() );
+        options.add( "-Doutput=\"" + new File( child, "target/effective-pom.txt" ).getAbsolutePath() + "\"" );
 
         verifier.setCliOptions( options );
 

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenITmng3099SettingsProfilesWithNoPOM.java
Patch:
@@ -59,7 +59,7 @@ public void testitMNG3099 ()
          */
         List cliOptions = new ArrayList();
         cliOptions.add( "-s" );
-        cliOptions.add( new File( testDir, "settings.xml" ).getAbsolutePath() );
+        cliOptions.add( "\"" + new File( testDir, "settings.xml" ).getAbsolutePath() + "\"" );
 
         verifier.setCliOptions( cliOptions );
 

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenITmng3372DirectInvocationOfPlugins.java
Patch:
@@ -47,7 +47,7 @@ public void testitMNG3372()
 
         List cliOptions = new ArrayList();
         cliOptions.add( "-s" );
-        cliOptions.add( settingsFile.getAbsolutePath() );
+        cliOptions.add( "\"" + settingsFile.getAbsolutePath() + "\"" );
 
         verifier.setCliOptions( cliOptions );
         verifier.executeGoal( "mng3372:test" );

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenIT0112ExtensionsThatDragDependencies.java
Patch:
@@ -47,7 +47,7 @@ public void testit0112()
 
         // Run the whole test
         verifier = new Verifier( new File( testDir.getAbsolutePath(), "test-project" ).getAbsolutePath() );
-        verifier.executeGoal( "project-info-reports:scm" );
+        verifier.executeGoal( "org.apache.maven.plugins:maven-project-info-reports-plugin:2.0.1:scm" );
         // ommitted because we always get velocity errors that aren't covered by the verifier
 //        verifier.verifyErrorFreeLog();
         verifier.resetStreams();

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenIT0065Test.java
Patch:
@@ -17,6 +17,7 @@ public void testit0065()
     {
         File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/it0065" );
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
+        verifier.deleteArtifact( "org.apache.maven.its.it0065", "plugin", "1.0", "maven-plugin" );
         verifier.executeGoal( "install" );
         verifier.assertFilePresent( "subproject/target/child-basedir" );
         verifier.assertFilePresent( "parent-basedir" );

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/IntegrationTestSuite.java
Patch:
@@ -101,6 +101,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng2254PomEncodingTest.class );
         suite.addTestSuite( MavenITmng2234ActiveProfilesFromSettingsTest.class );
         suite.addTestSuite( MavenITmng2123VersionRangeDependencyTest.class );
+        suite.addTestSuite( MavenITmng2068ReactorRelativeParentsTest.class );
         suite.addTestSuite( MavenITmng2045testJarDependenciesBrokenInReactorTest.class );
         suite.addTestSuite( MavenITmng1493NonStandardModulePomNames.class );
         suite.addTestSuite( MavenITmng1491ReactorArtifactIdCollision.class );

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/IntegrationTestSuite.java
Patch:
@@ -65,6 +65,7 @@ public static Test suite()
          * a fail fast technique as well.
          */
 
+        suite.addTestSuite( MavenITmng3642DynamicResourcesTest.class );
         suite.addTestSuite( MavenITmng3581PluginUsesWagonDependency.class );
         suite.addTestSuite( MavenITmng3545ProfileDeactivation.class );
         suite.addTestSuite( MavenITmng3536AppendedAbsolutePaths.class );

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/IntegrationTestSuite.java
Patch:
@@ -114,6 +114,7 @@ public static Test suite()
         suite.addTestSuite( MavenIT0111PluginsThatRequireAResourceFromAnExtensionTest.class );
         suite.addTestSuite( MavenIT0110PluginDependenciesComeFromPluginReposTest.class );
         suite.addTestSuite( MavenIT0107Test.class );
+        suite.addTestSuite( MavenIT0106Test.class );
         suite.addTestSuite( MavenIT0105Test.class );
         suite.addTestSuite( MavenIT0104Test.class );
         suite.addTestSuite( MavenIT0103Test.class );

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenITmng2562Timestamp.java
Patch:
@@ -1,5 +1,6 @@
 package org.apache.maven.integrationtests;
 
+import org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;
 import org.apache.maven.it.util.ResourceExtractor;
 import org.apache.maven.it.Verifier;
 
@@ -8,6 +9,7 @@
 public class MavenITmng2562Timestamp extends AbstractMavenIntegrationTestCase {
 	
 	public MavenITmng2562Timestamp()
+		throws InvalidVersionSpecificationException
 	{
 		super( "(2.0.9,)");
 	}

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenITmng3475BaseAlignedDir.java
Patch:
@@ -1,5 +1,6 @@
 package org.apache.maven.integrationtests;
 
+import org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;
 import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
@@ -10,6 +11,7 @@ public class MavenITmng3475BaseAlignedDir
 {
 	
 	public MavenITmng3475BaseAlignedDir()
+		throws InvalidVersionSpecificationException
 	{
 		super( "(2.0.9,)");
 	}

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenITmng3535SelfReferentialProperties.java
Patch:
@@ -1,5 +1,6 @@
 package org.apache.maven.integrationtests;
 
+import org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;
 import org.apache.maven.it.util.ResourceExtractor;
 import org.apache.maven.it.Verifier;
 
@@ -8,6 +9,7 @@
 public class MavenITmng3535SelfReferentialProperties extends AbstractMavenIntegrationTestCase {
 	
 	public MavenITmng3535SelfReferentialProperties()
+		throws InvalidVersionSpecificationException
 	{
 		super( "(2.0.9,)");
 	}

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenITmng3536AppendedAbsolutePaths.java
Patch:
@@ -1,5 +1,6 @@
 package org.apache.maven.integrationtests;
 
+import org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;
 import org.apache.maven.it.util.ResourceExtractor;
 import org.apache.maven.it.Verifier;
 
@@ -8,6 +9,7 @@
 public class MavenITmng3536AppendedAbsolutePaths extends AbstractMavenIntegrationTestCase {
 	
 	public MavenITmng3536AppendedAbsolutePaths()
+		throws InvalidVersionSpecificationException
 	{
 		super( "(2.0.9,)");
 	}

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenITmng3268MultipleDashPCommandLine.java
Patch:
@@ -17,7 +17,7 @@ public MavenITmng3268MultipleDashPCommandLine()
         super( "(2.0.9,)" );
     }
 
-    public void testitMNG2234 ()
+    public void testMultipleProfileParams ()
         throws Exception
     {
         File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-3268-MultipleDashPCommandLine" );

File: maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -24,7 +24,6 @@
 import org.apache.maven.artifact.ArtifactStatus;
 import org.apache.maven.artifact.ArtifactUtils;
 import org.apache.maven.artifact.InvalidRepositoryException;
-import org.apache.maven.artifact.UnknownRepositoryLayoutException;
 import org.apache.maven.artifact.factory.ArtifactFactory;
 import org.apache.maven.artifact.metadata.ArtifactMetadataSource;
 import org.apache.maven.artifact.repository.ArtifactRepository;
@@ -619,7 +618,7 @@ else if ( item instanceof Repository )
                     normalized.add( item );
                     normalizationNeeded = true;
                 }
-                catch ( UnknownRepositoryLayoutException e )
+                catch ( InvalidRepositoryException e )
                 {
                     throw new ProjectBuildingException( projectId, "Error building artifact repository for id: " + repo.getId(), e );
                 }

File: maven-project/src/main/java/org/apache/maven/project/error/ProjectErrorReporter.java
Patch:
@@ -1,7 +1,6 @@
 package org.apache.maven.project.error;
 
 import org.apache.maven.artifact.InvalidRepositoryException;
-import org.apache.maven.artifact.UnknownRepositoryLayoutException;
 import org.apache.maven.artifact.resolver.ArtifactNotFoundException;
 import org.apache.maven.artifact.resolver.ArtifactResolutionException;
 import org.apache.maven.model.DeploymentRepository;
@@ -158,7 +157,7 @@ void reportInvalidRepositoryWhileGettingRepositoriesFromProfiles( Repository rep
     void reportErrorCreatingDeploymentArtifactRepository( MavenProject project,
                                                           File pomFile,
                                                           DeploymentRepository repo,
-                                                          UnknownRepositoryLayoutException cause );
+                                                          InvalidRepositoryException cause );
 
     /**
      * <b>Call Stack:</b>
@@ -179,7 +178,7 @@ void reportErrorCreatingDeploymentArtifactRepository( MavenProject project,
     void reportErrorCreatingArtifactRepository( String projectId,
                                                 File pomFile,
                                                 Repository repo,
-                                                UnknownRepositoryLayoutException cause );
+                                                InvalidRepositoryException cause );
 
     /**
      * <b>Call Stack:</b>

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Patch:
@@ -609,7 +609,7 @@ public void executeMojo( MavenProject project,
             if ( getLogger().isFatalErrorEnabled() )
             {
                 getLogger().fatalError(
-                                        mojo.getClass().getName() + "#execute() caused a linkage error ("
+                                        mojoDescriptor.getImplementation() + "#execute() caused a linkage error ("
                                             + e.getClass().getName() + ") and may be out-of-date. Check the realms:" );
 
                 StringBuffer sb = new StringBuffer();

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/IntegrationTestSuite.java
Patch:
@@ -67,6 +67,7 @@ public static Test suite()
 
         suite.addTestSuite( MavenITmng3498ForkToOtherMojoTest.class );
         suite.addTestSuite( MavenITmng3485OverrideWagonExtensionTest.class );
+        suite.addTestSuite( MavenITmng3482DependencyPomInterpolationTest.class );
         suite.addTestSuite( MavenITmng3473PluginReportCrash.class );
         suite.addTestSuite( MavenITmng3428PluginDescriptorArtifactsIncompleteTest.class );
         suite.addTestSuite( MavenITmng3426PluginsClasspathOverrideTest.class );

File: maven-embedder/src/test/java/org/apache/maven/embedder/execution/AbstractEmbedderExecutionTestCase.java
Patch:
@@ -86,7 +86,7 @@ protected File runWithProject( List goals,
 
         MavenExecutionRequest request = new DefaultMavenExecutionRequest()
             .setShowErrors( true )
-            .setLoggingLevel( MavenExecutionRequest.LOGGING_LEVEL_DEBUG )
+            //.setLoggingLevel( MavenExecutionRequest.LOGGING_LEVEL_DEBUG )
             .setBaseDirectory( targetDirectory )
             .setGoals( goals );
 

File: maven-embedder/src/test/java/org/apache/maven/embedder/project/BadModuleNotRecursiveTest.java
Patch:
@@ -32,7 +32,7 @@ public void test()
         request.setOffline( false );
         request.setUseReactor( false );
         request.setRecursive( false );
-        request.setLoggingLevel( Logger.LEVEL_DEBUG );
+        //request.setLoggingLevel( Logger.LEVEL_DEBUG );
         request.setPom( pom );
         request.setBaseDirectory( pom.getParentFile() );
         MavenExecutionResult result = embedder.readProjectWithDependencies( request );

File: maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -973,8 +973,6 @@ private MavenProject processProjectLogic( MavenProject project,
         if ( pomFile != null )
         {
             projectDir = pomFile.getAbsoluteFile().getParentFile();
-
-            context.put( "basedir", projectDir.getAbsolutePath() );
         }
 
         Map overrideContext = new HashMap();

File: maven-project/src/main/java/org/apache/maven/project/MavenProject.java
Patch:
@@ -161,12 +161,12 @@ public MavenProject()
         model.setArtifactId( EMPTY_PROJECT_ARTIFACT_ID );
         model.setVersion( EMPTY_PROJECT_VERSION );
 
-        this.setModel( model );
+        setModel( model );
     }
 
     public MavenProject( Model model )
     {
-        this.setModel( model );
+        setModel( model );
     }
 
     /**
@@ -1682,6 +1682,7 @@ public Artifact replaceWithActiveArtifact( Artifact pluginArtifact )
                     // if the project artifact doesn't exist, don't use it. We haven't built that far.
                     if ( ( ref.getArtifact().getFile() != null ) && ref.getArtifact().getFile().exists() )
                     {
+                        // FIXME: Why aren't we using project.getArtifact() for the second parameter here??
                         pluginArtifact = new ActiveProjectArtifact( ref, pluginArtifact );
                         return pluginArtifact;
                     }

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/IntegrationTestSuite.java
Patch:
@@ -65,7 +65,7 @@ public static Test suite()
          * a fail fast technique as well.
          */
 
-        suite.addTestSuite( MNG3498Test.class );
+        suite.addTestSuite( MavenITmng3498ForkToOtherMojoTest.class );
         suite.addTestSuite( MavenITmng3485OverrideWagonExtensionTest.class );
         suite.addTestSuite( MavenITmng3473PluginReportCrash.class );
         suite.addTestSuite( MavenITmng3428PluginDescriptorArtifactsIncompleteTest.class );

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenITmng3221InfiniteForking.java
Patch:
@@ -5,16 +5,16 @@
 import org.apache.maven.it.util.ResourceExtractor;
 
 import java.io.File;
-import java.util.List;
 import java.util.ArrayList;
+import java.util.List;
 
 public class MavenITmng3221InfiniteForking
     extends AbstractMavenIntegrationTestCase
 {
     public MavenITmng3221InfiniteForking()
         throws InvalidVersionSpecificationException
     {
-        super( "(2.0.8,)" ); // only test in 2.0.9+
+        super( "(2.0.8,2.1-SNAPSHOT)" ); // only test in 2.0.9+
     }
 
     public void testitMNG3221a()

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenITmng3498ForkToOtherMojoTest.java
Patch:
@@ -33,10 +33,10 @@
  * @author jdcasey
  *
  */
-public class MNG3498Test
+public class MavenITmng3498ForkToOtherMojoTest
     extends AbstractMavenIntegrationTestCase
 {
-//    public MNG3498Test()
+//    public MavenITmng3498ForkToOtherMojoTest()
 //        throws InvalidVersionSpecificationException
 //    {
 //        super( "(2.0.8,)" ); // only test in 2.0.9+

File: maven-core/src/main/java/org/apache/maven/lifecycle/plan/BuildPlanner.java
Patch:
@@ -24,7 +24,8 @@ public interface BuildPlanner
      */
     BuildPlan constructBuildPlan( List tasks,
                                   MavenProject project,
-                                  MavenSession session )
+                                  MavenSession session,
+                                  boolean allowUnbindableMojos )
         throws LifecycleLoaderException, LifecycleSpecificationException, LifecyclePlannerException;
 
     void constructInitialProjectBuildPlans( MavenSession session )

File: maven-core/src/test/java/org/apache/maven/lifecycle/binding/DefaultLifecycleBindingManagerTest.java
Patch:
@@ -28,6 +28,7 @@
 import java.io.File;
 import java.net.URL;
 import java.util.Collections;
+import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Properties;
@@ -203,7 +204,7 @@ public void testGetProjectCustomBindings_ExecutionConfigShouldOverridePluginConf
 
         MavenProject project = new MavenProject( model );
 
-        LifecycleBindings lifecycleBindings = mgr.getProjectCustomBindings( project, null );
+        LifecycleBindings lifecycleBindings = mgr.getProjectCustomBindings( project, null, new HashSet() );
 
         List bindings = lifecycleBindings.getBuildBinding().getValidate().getBindings();
 

File: maven-lifecycle/src/main/java/org/apache/maven/lifecycle/LifecycleUtils.java
Patch:
@@ -200,6 +200,7 @@ public static void addMojoBinding( final String phaseName, final MojoBinding moj
 
         Phase phase = (Phase) phases.get( idx );
         phase.addBinding( mojoBinding );
+        mojoBinding.setLifecycleInfo( phase );
     }
 
     public static void addMojoBinding( final String phaseName, final MojoBinding mojo, final LifecycleBindings bindings )

File: maven-project/src/test/java/org/apache/maven/project/workspace/ModelAndFileCachingTest.java
Patch:
@@ -136,7 +136,7 @@ public void testResolveParentPom_StoreByFileAndGAVIfUncached()
                                                                  new DefaultProjectBuilderConfiguration().setLocalRepository( localRepo ).setGlobalProfileManager( profileManager ),
                                                                  Collections.EMPTY_LIST,
                                                                  false,
-                                                                 false );
+                                                                 true );
 
         assertEquals( parentPomFile.getCanonicalPath(), lineage.getDeepestAncestorFile()
                                                                .getCanonicalPath() );

File: maven-project/src/main/java/org/apache/maven/project/error/ProjectErrorReporter.java
Patch:
@@ -2,7 +2,6 @@
 
 import org.apache.maven.artifact.InvalidRepositoryException;
 import org.apache.maven.artifact.UnknownRepositoryLayoutException;
-import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.artifact.resolver.ArtifactNotFoundException;
 import org.apache.maven.artifact.resolver.ArtifactResolutionException;
 import org.apache.maven.model.DeploymentRepository;
@@ -17,6 +16,7 @@
 import org.apache.maven.project.InvalidProjectModelException;
 import org.apache.maven.project.InvalidProjectVersionException;
 import org.apache.maven.project.MavenProject;
+import org.apache.maven.project.ProjectBuilderConfiguration;
 import org.apache.maven.project.artifact.InvalidDependencyVersionException;
 import org.apache.maven.project.build.model.ModelAndFile;
 import org.apache.maven.project.interpolation.ModelInterpolationException;
@@ -352,7 +352,7 @@ void reportErrorParsingParentProjectModel( ModelAndFile childInfo,
      * </pre>
      */
     void reportParentPomArtifactNotFound( Parent parentRef,
-                                          ArtifactRepository localRepo,
+                                          ProjectBuilderConfiguration config,
                                           List remoteRepos,
                                           String childId,
                                           File childPomFile,
@@ -371,7 +371,7 @@ void reportParentPomArtifactNotFound( Parent parentRef,
      * </pre>
      */
     void reportParentPomArtifactUnresolvable( Parent parentRef,
-                                              ArtifactRepository localRepo,
+                                              ProjectBuilderConfiguration config,
                                               List remoteRepos,
                                               String childId,
                                               File childPomFile,

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/IntegrationTestSuite.java
Patch:
@@ -85,6 +85,7 @@ public static Test suite()
         suite.addTestSuite( MavenITmng2972OverridePluginDependency.class );
         suite.addTestSuite( MavenITmng2861RelocationsAndRanges.class );
         suite.addTestSuite( MavenITmng2744checksumVerificationTest.class );
+        suite.addTestSuite( MavenITmng2339BadProjectInterpolationTest.class );
         suite.addTestSuite( MavenITmng2277AggregatorAndResolutionPluginsTest.class );
         suite.addTestSuite( MavenITmng2254PomEncodingTest.class );
         suite.addTestSuite( MavenITmng2234ActiveProfilesFromSettingsTest.class );

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/IntegrationTestSuite.java
Patch:
@@ -65,6 +65,7 @@ public static Test suite()
          * a fail fast technique as well.
          */
 
+        suite.addTestSuite( MavenITmng3485OverrideWagonExtensionTest.class );
         suite.addTestSuite( MavenITmng3473PluginReportCrash.class );
         suite.addTestSuite( MavenITmng3428PluginDescriptorArtifactsIncompleteTest.class );
         suite.addTestSuite( MavenITmng3426PluginsClasspathOverrideTest.class );

File: maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java
Patch:
@@ -32,7 +32,7 @@
 
 /**
  * @author Jason van Zyl
- * @version $Revision: 381114 $
+ * @version $Revision$
  */
 public class CLIManager
 {

File: maven-project/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java
Patch:
@@ -355,6 +355,7 @@ private void assembleBuildInheritance( Model child, Model parent )
 
             if ( ( dominantPM == null ) && ( recessivePM != null ) )
             {
+                // FIXME: Filter out the inherited == false stuff!
                 childBuild.setPluginManagement( recessivePM );
             }
             else

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenITmng2861RelocationsAndRanges.java
Patch:
@@ -23,7 +23,7 @@ public void testitMNG2861 ()
 
         // The testdir is computed from the location of this
         // file.
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-2861relocationsAndRanges/MNG-2861" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/mng-2861relocationsAndRanges" );
 
         Verifier verifier;
 
@@ -34,7 +34,7 @@ public void testitMNG2861 ()
          * unstable test results. Fortunately, the verifier
          * makes it easy to do this.
          */
-        verifier = new Verifier( testDir.getAbsolutePath() );
+        verifier = new Verifier( new File(testDir,"MNG-2861").getAbsolutePath() );
         verifier.deleteArtifact( "org.apache.maven.its.mng2123", "MNG-2861", "1.0-SNAPSHOT", "pom" );
         verifier.deleteArtifact( "org.apache.maven.its.mng2123", "A", "1.0-SNAPSHOT", "jar" );
         verifier.deleteArtifact( "org.apache.maven.its.mng2123", "B", "1.0-SNAPSHOT", "jar" );

File: maven-toolchain/src/main/java/org/apache/maven/toolchain/DefaultToolchain.java
Patch:
@@ -58,7 +58,7 @@ protected DefaultToolchain( ToolchainModel model, String type, Logger logger )
 
     public final String getType( )
     {
-        return type;
+        return type != null ? type : model.getType();
     }
 
     

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenITmng2277AggregatorAndResolutionPluginsTest.java
Patch:
@@ -19,7 +19,7 @@ public class MavenITmng2277AggregatorAndResolutionPluginsTest
     public MavenITmng2277AggregatorAndResolutionPluginsTest()
         throws InvalidVersionSpecificationException
     {
-        super( "(2.0.7,2.1-SNAPSHOT)" ); // 2.0.8+
+        super( "(2.0.7,)" ); // 2.0.8+
     }
 
     public void testitMNG2277 ()

File: maven-core/src/main/java/org/apache/maven/DefaultArtifactFilterManager.java
Patch:
@@ -45,7 +45,6 @@ public class DefaultArtifactFilterManager implements ArtifactFilterManager
         artifacts.add( "jsch" );
         artifacts.add( "maven-artifact" );
         artifacts.add( "maven-artifact-manager" );
-        artifacts.add( "maven-build-context" );
         artifacts.add( "maven-core" );
         artifacts.add( "maven-error-diagnoser" );
         artifacts.add( "maven-lifecycle" );
@@ -59,7 +58,7 @@ public class DefaultArtifactFilterManager implements ArtifactFilterManager
         artifacts.add( "maven-reporting-api" );
         artifacts.add( "maven-repository-metadata" );
         artifacts.add( "maven-settings" );
-        //adding shared/maven-toolchain project here, even though not part of the default 
+        //adding shared/maven-toolchain project here, even though not part of the default
         //distro yet.
         artifacts.add( "maven-toolchain" );
         artifacts.add( "plexus-component-api" );

File: maven-core/src/main/java/org/apache/maven/errors/CoreReporterManager.java
Patch:
@@ -5,6 +5,7 @@
 public final class CoreReporterManager
 {
 
+    // FIXME: This is not threadsafe!!
     private static CoreErrorReporter reporter;
 
     private CoreReporterManager()

File: maven-core/src/main/java/org/apache/maven/lifecycle/plan/BuildPlan.java
Patch:
@@ -192,6 +192,8 @@ public void resetExecutionProgress()
     public List renderExecutionPlan( final Stack executionStack )
         throws NoSuchPhaseException
     {
+        LifecycleUtils.setupTrackingInfo( bindings );
+
         List plan = new ArrayList();
 
         for ( Iterator it = tasks.iterator(); it.hasNext(); )

File: maven-project/src/main/java/org/apache/maven/project/error/ProjectReporterManager.java
Patch:
@@ -3,6 +3,7 @@
 public final class ProjectReporterManager
 {
 
+    // FIXME: This is not threadsafe!
     private static ProjectErrorReporter reporter;
 
     private ProjectReporterManager()

File: maven-embedder/src/test/java/org/apache/maven/error/ErrorReporterPointcutTest.java
Patch:
@@ -196,7 +196,7 @@ private void buildTestAccessory( File basedir )
 
         if ( result.hasExceptions() )
         {
-            reportExceptions( result, basedir );
+            reportExceptions( result, basedir, true );
         }
     }
 

File: maven-core/src/main/java/org/apache/maven/lifecycle/plan/BuildPlanUtils.java
Patch:
@@ -132,6 +132,7 @@ public static String formatMojoListing( final MojoBinding binding, final int ind
         if ( extendedInfo )
         {
             listing.append( "\nOrigin: " ).append( binding.getOrigin() );
+            listing.append( "\nOrigin Description: " ).append( binding.getOriginDescription() );
             listing.append( "\nConfiguration:\n\t" ).append(
                                                              String.valueOf( binding.getConfiguration() ).replaceAll(
                                                                                                                       "\\n",

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/IntegrationTestSuite.java
Patch:
@@ -190,6 +190,7 @@ public static Test suite() throws VerificationException
 		suite.addTestSuite( MavenITmng3099SettingsProfilesWithNoPOM.class );
 		suite.addTestSuite( MavenITmng3331ModulePathNormalization.class );
 		suite.addTestSuite( MavenITmng1493NonStandardModulePomNames.class );
+		suite.addTestSuite( MavenITmng1491ReactorArtifactIdCollision.class );
         // suite.addTestSuite( MavenIT0120EjbClientDependency.class ); -- not passing for 2.0.7 either, looks to be 2.1+ ?
         return suite;
     }

File: maven-core/src/main/java/org/apache/maven/errors/DefaultCoreErrorReporter.java
Patch:
@@ -613,7 +613,7 @@ private void reportTransitiveResolutionError( MavenProject project,
         writer.write( NEWLINE );
         writer.write( "Transitive dependency resolution for scope: " );
         writer.write( scope );
-        writer.write( "has failed for your project." );
+        writer.write( " has failed for your project." );
 
         writer.write( NEWLINE );
         writer.write( NEWLINE );

File: maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -739,6 +739,9 @@ private MavenProject buildInternal( Model model,
             }
         }
 
+        // merge any duplicated plugin definitions together, using the first appearance as the dominant one.
+        ModelUtils.mergeDuplicatePluginDefinitions( project.getModel().getBuild() );
+
         mergeManagedDependencies(project.getModel(), localRepository, parentSearchRepositories);
 
         try

File: maven-core/src/main/java/org/apache/maven/errors/DefaultCoreErrorReporter.java
Patch:
@@ -70,9 +70,9 @@ public class DefaultCoreErrorReporter
 
     private static final String NEWLINE = "\n";
 
-    public DefaultCoreErrorReporter( Map formattedMessageStore, Map realCauseStore )
+    public DefaultCoreErrorReporter( Map formattedMessageStore, Map realCauseStore, Map stackTraceRecommendationStore )
     {
-        super( formattedMessageStore, realCauseStore );
+        super( formattedMessageStore, realCauseStore, stackTraceRecommendationStore );
     }
 
     public DefaultCoreErrorReporter()

File: maven-core/src/main/java/org/apache/maven/errors/DefaultCoreErrorReporter.java
Patch:
@@ -1685,6 +1685,7 @@ public void reportInvalidPluginForDirectInvocation( String task,
         writer.write( NEWLINE );
         writer.write( NEWLINE );
         writer.write( "Error message:" );
+        writer.write( NEWLINE );
         writer.write( err.getMessage() );
 
         addTips( CoreErrorTips.getInvalidPluginForDirectInvocationTips( task, session, project, err ), writer );

File: maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java
Patch:
@@ -95,7 +95,7 @@ public static void logResult( MavenExecutionRequest request,
         logReactorSummary( reactorManager, logger );
 
         boolean printSuccess = true;
-        if ( ( reactorManager == null ) || reactorManager.hasBuildFailures() )
+        if ( result.hasExceptions() )
         {
             for ( Iterator i = result.getExceptions().iterator(); i.hasNext(); )
             {

File: maven-core/src/main/java/org/apache/maven/errors/CoreErrorReporter.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.maven.lifecycle.model.MojoBinding;
 import org.apache.maven.model.Model;
 import org.apache.maven.model.Plugin;
+import org.apache.maven.plugin.InvalidPluginException;
 import org.apache.maven.plugin.MojoExecution;
 import org.apache.maven.plugin.MojoExecutionException;
 import org.apache.maven.plugin.MojoFailureException;
@@ -125,4 +126,6 @@ public interface CoreErrorReporter
 
     void reportMissingModulePom( MissingModuleException err );
 
+    void reportInvalidPluginForDirectInvocation( String task, MavenSession session, MavenProject project, InvalidPluginException err );
+
 }

File: maven-embedder/src/test/java/org/apache/maven/error/ErrorReporterPointcutTest.java
Patch:
@@ -461,7 +461,7 @@ public void testReportErrorLoadingPlugin()
 
         reporter.reportErrorLoadingPlugin( null, null, null );
         reporterCtl.setMatcher( MockControl.ALWAYS_MATCHER );
-        reporterCtl.setVoidCallable();
+        reporterCtl.setVoidCallable( MockControl.ONE_OR_MORE );
 
         reporterCtl.replay();
 

File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -137,8 +137,6 @@ else if ( debug )
 
         Configuration configuration = buildEmbedderConfiguration( request, commandLine, classWorld );
 
-        System.out.println( "Using error reporter: " + configuration.getErrorReporter() );
-
         ConfigurationValidationResult cvr = MavenEmbedder.validateConfiguration( configuration );
 
         if ( cvr.isUserSettingsFilePresent() && !cvr.isUserSettingsFileParses() )

File: maven-project/src/main/java/org/apache/maven/project/MavenProjectBuilder.java
Patch:
@@ -34,7 +34,7 @@ public interface MavenProjectBuilder
 
     String STANDALONE_SUPERPOM_ARTIFACTID = "super-pom";
 
-    String STANDALONE_SUPERPOM_VERSION = "2.0";
+    String STANDALONE_SUPERPOM_VERSION = "2.1";
 
     boolean STRICT_MODEL_PARSING = true;
 

File: maven-embedder/src/test/java/org/apache/maven/error/ErrorReporterPointcutTest.java
Patch:
@@ -17,7 +17,6 @@
 import org.apache.maven.model.io.xpp3.MavenXpp3Reader;
 import org.apache.maven.plugin.PluginManagerException;
 import org.apache.maven.settings.Settings;
-import org.codehaus.plexus.logging.Logger;
 import org.codehaus.plexus.util.FileUtils;
 import org.codehaus.plexus.util.xml.pull.XmlPullParserException;
 import org.easymock.MockControl;
@@ -578,7 +577,6 @@ public void testReportExtensionPluginVersionNotFound()
 
         MavenExecutionRequest request = new DefaultMavenExecutionRequest().setBaseDirectory( project )
                                                                           .setShowErrors( true )
-                                                                          .setLoggingLevel( Logger.LEVEL_DEBUG )
                                                                           .setSettings( settings )
                                                                           .setErrorReporter( reporter )
                                                                           .setGoals( Arrays.asList( new String[] {

File: maven-core/src/main/java/org/apache/maven/errors/CoreErrorReporter.java
Patch:
@@ -15,7 +15,6 @@
 import org.apache.maven.execution.MavenSession;
 import org.apache.maven.extension.ExtensionManagerException;
 import org.apache.maven.lifecycle.LifecycleException;
-import org.apache.maven.lifecycle.LifecycleExecutionException;
 import org.apache.maven.lifecycle.LifecycleLoaderException;
 import org.apache.maven.lifecycle.LifecycleSpecificationException;
 import org.apache.maven.lifecycle.model.MojoBinding;
@@ -39,6 +38,7 @@
 import org.apache.maven.project.interpolation.ModelInterpolationException;
 import org.apache.maven.project.path.PathTranslator;
 import org.apache.maven.reactor.MavenExecutionException;
+import org.apache.maven.reactor.MissingModuleException;
 import org.apache.maven.realm.RealmManagementException;
 import org.codehaus.plexus.component.configurator.expression.ExpressionEvaluationException;
 import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
@@ -97,8 +97,6 @@ public interface CoreErrorReporter
 
     void reportLifecycleSpecErrorWhileValidatingTask( String task, MavenSession session, MavenProject rootProject, LifecycleSpecificationException cause );
 
-    void reportMissingPluginDescriptor( MojoBinding binding, MavenProject project, LifecycleExecutionException err );
-
     void reportMissingRequiredMojoParameter( MojoBinding binding, MavenProject project, List invalidParameters, PluginParameterException err );
 
     void reportMojoExecutionException( MojoBinding binding, MavenProject project, MojoExecutionException cause );
@@ -125,4 +123,6 @@ public interface CoreErrorReporter
 
     void reportUseOfBannedMojoParameter( Parameter currentParameter, MojoBinding binding, MavenProject project, String expression, String altExpression, ExpressionEvaluationException err );
 
+    void reportMissingModulePom( MissingModuleException err );
+
 }

File: maven-core/src/main/java/org/apache/maven/extension/BuildExtensionScanner.java
Patch:
@@ -20,6 +20,7 @@
  */
 
 import org.apache.maven.execution.MavenExecutionRequest;
+import org.apache.maven.reactor.MissingModuleException;
 
 import java.io.File;
 import java.util.List;
@@ -31,10 +32,10 @@ public interface BuildExtensionScanner
 
     void scanForBuildExtensions( List files,
                                  MavenExecutionRequest request )
-        throws ExtensionScanningException;
+        throws ExtensionScanningException, MissingModuleException;
 
     void scanForBuildExtensions( File pom,
                                  MavenExecutionRequest request )
-        throws ExtensionScanningException;
+        throws ExtensionScanningException, MissingModuleException;
 
 }

File: maven-project/src/main/java/org/apache/maven/realm/MavenRealmManager.java
Patch:
@@ -37,6 +37,8 @@ ClassRealm createPluginRealm( Plugin plugin,
                                   Collection artifacts )
         throws RealmManagementException;
 
+    void disposePluginRealm( Plugin plugin );
+
     void setPluginArtifacts( Plugin plugin,
                              Collection artifacts );
 }

File: maven-core/src/main/java/org/apache/maven/errors/CoreErrorReporter.java
Patch:
@@ -107,8 +107,6 @@ public interface CoreErrorReporter
 
     void reportNoGoalsSpecifiedException( MavenProject rootProject, NoGoalsSpecifiedException error );
 
-    void reportPluginErrorWhileValidatingTask( String task, MavenSession session, MavenProject rootProject, PluginLoaderException cause );
-
     void reportProjectCycle( ProjectCycleException error );
 
     void reportProjectDependenciesNotFound( MavenProject project, String scope, ArtifactNotFoundException cause );

File: maven-project/src/main/java/org/apache/maven/profiles/activation/FileProfileActivator.java
Patch:
@@ -69,7 +69,7 @@ public boolean isActive( Profile profile, ProfileActivationContext context )
             {
                 fileString = StringUtils.replace( interpolator.interpolate( fileString, "" ), "\\", "/" );
 
-                System.out.println( "FileProfileActivator: Checking file existence for: " + fileString );
+                System.out.println( "FileProfileActivator: Checking file existence for: " + fileString + ". Result: " + FileUtils.fileExists( fileString ) );
                 if ( logger != null )
                 {
                     logger.info( "FileProfileActivator: Checking file existence for: " + fileString );
@@ -85,7 +85,7 @@ public boolean isActive( Profile profile, ProfileActivationContext context )
             {
                 fileString = StringUtils.replace( interpolator.interpolate( fileString, "" ), "\\", "/" );
 
-                System.out.println( "FileProfileActivator: Checking file is missing for: " + fileString );
+                System.out.println( "FileProfileActivator: Checking file is missing for: " + fileString + ". Result: " + (!FileUtils.fileExists( fileString )) );
                 if ( logger != null )
                 {
                     logger.info( "FileProfileActivator: Checking file is missing for: " + fileString );

File: maven-core/src/main/java/org/apache/maven/errors/CoreErrorReporter.java
Patch:
@@ -79,6 +79,8 @@ public interface CoreErrorReporter
 
     void reportErrorSearchingforCompatibleExtensionPluginVersion( Plugin plugin, Model originModel, List remoteRepos, MavenExecutionRequest request, String requiredMavenVersion, String currentMavenVersion, InvalidVersionSpecificationException cause );
 
+    void reportErrorSearchingforCompatibleExtensionPluginVersion( Plugin plugin, Model originModel, List remoteRepos, MavenExecutionRequest request, String requiredMavenVersion, String currentMavenVersion, ArtifactMetadataRetrievalException cause );
+
     void reportExtensionPluginArtifactNotFound( Plugin plugin, Model originModel, List remoteRepos, MavenExecutionRequest request, PluginNotFoundException cause );
 
     void reportExtensionPluginVersionNotFound( Plugin plugin, Model originModel, List remoteRepos, MavenExecutionRequest request, PluginVersionNotFoundException cause );

File: maven-core/src/main/java/org/apache/maven/errors/CoreErrorTips.java
Patch:
@@ -6,7 +6,6 @@
 import org.apache.maven.artifact.resolver.AbstractArtifactResolutionException;
 import org.apache.maven.artifact.resolver.ArtifactResolutionResult;
 import org.apache.maven.artifact.versioning.ArtifactVersion;
-import org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;
 import org.apache.maven.lifecycle.LifecycleException;
 import org.apache.maven.lifecycle.model.MojoBinding;
 import org.apache.maven.model.Model;
@@ -270,7 +269,7 @@ public static List getInvalidPluginVersionRangeForExtensionPluginTips( Plugin pl
                                                                            Model originModel,
                                                                            String requiredMavenVersion,
                                                                            String currentMavenVersion,
-                                                                           InvalidVersionSpecificationException cause )
+                                                                           Exception cause )
     {
         // TODO Auto-generated method stub
         return null;

File: maven-project/src/main/java/org/apache/maven/profiles/build/ProfileAdvisor.java
Patch:
@@ -38,9 +38,9 @@ public interface ProfileAdvisor
 
     String ROLE = ProfileAdvisor.class.getName();
 
-    LinkedHashSet getArtifactRepositoriesFromActiveProfiles( ProfileManager profileManager,
+    LinkedHashSet getArtifactRepositoriesFromActiveProfiles( Model model,
                                                              File pomFile,
-                                                             String modelId )
+                                                             ProfileManager profileManager )
         throws ProjectBuildingException;
 
     LinkedHashSet getArtifactRepositoriesFromActiveProfiles( Model model,

File: maven-project/src/main/java/org/apache/maven/project/build/model/DefaultModelLineageBuilder.java
Patch:
@@ -291,9 +291,9 @@ private void loadActiveProfileRepositories( List repositories,
             context = new DefaultProfileActivationContext( System.getProperties(), false );
         }
 
-        LinkedHashSet profileRepos = profileAdvisor.getArtifactRepositoriesFromActiveProfiles( profileManager,
+        LinkedHashSet profileRepos = profileAdvisor.getArtifactRepositoriesFromActiveProfiles( model,
                                                                                                pomFile,
-                                                                                               model.getId() );
+                                                                                               profileManager );
 
         getLogger().debug( "Got external-profile repositories: " + profileRepos );
 

File: maven-core/src/main/java/org/apache/maven/errors/CoreErrorReporter.java
Patch:
@@ -12,7 +12,6 @@
 import org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;
 import org.apache.maven.execution.MavenExecutionRequest;
 import org.apache.maven.execution.MavenSession;
-import org.apache.maven.execution.RealmManagementException;
 import org.apache.maven.extension.ExtensionManagerException;
 import org.apache.maven.lifecycle.LifecycleException;
 import org.apache.maven.lifecycle.LifecycleExecutionException;
@@ -40,6 +39,7 @@
 import org.apache.maven.project.interpolation.ModelInterpolationException;
 import org.apache.maven.project.path.PathTranslator;
 import org.apache.maven.reactor.MavenExecutionException;
+import org.apache.maven.realm.RealmManagementException;
 import org.codehaus.plexus.component.configurator.expression.ExpressionEvaluationException;
 import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
 import org.codehaus.plexus.configuration.PlexusConfiguration;

File: maven-core/src/main/java/org/apache/maven/errors/CoreErrorTips.java
Patch:
@@ -7,7 +7,6 @@
 import org.apache.maven.artifact.resolver.ArtifactResolutionResult;
 import org.apache.maven.artifact.versioning.ArtifactVersion;
 import org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;
-import org.apache.maven.execution.RealmManagementException;
 import org.apache.maven.lifecycle.LifecycleException;
 import org.apache.maven.lifecycle.model.MojoBinding;
 import org.apache.maven.model.Model;
@@ -23,6 +22,7 @@
 import org.apache.maven.project.MavenProject;
 import org.apache.maven.project.artifact.InvalidDependencyVersionException;
 import org.apache.maven.project.interpolation.ModelInterpolationException;
+import org.apache.maven.realm.RealmManagementException;
 import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
 import org.codehaus.plexus.configuration.PlexusConfiguration;
 

File: maven-core/src/main/java/org/apache/maven/errors/DefaultCoreErrorReporter.java
Patch:
@@ -15,7 +15,6 @@
 import org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;
 import org.apache.maven.execution.MavenExecutionRequest;
 import org.apache.maven.execution.MavenSession;
-import org.apache.maven.execution.RealmManagementException;
 import org.apache.maven.extension.ExtensionManagerException;
 import org.apache.maven.lifecycle.LifecycleException;
 import org.apache.maven.lifecycle.LifecycleExecutionException;
@@ -48,6 +47,7 @@
 import org.apache.maven.project.interpolation.ModelInterpolationException;
 import org.apache.maven.project.path.PathTranslator;
 import org.apache.maven.reactor.MavenExecutionException;
+import org.apache.maven.realm.RealmManagementException;
 import org.codehaus.plexus.component.configurator.expression.ExpressionEvaluationException;
 import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
 import org.codehaus.plexus.configuration.PlexusConfiguration;

File: maven-core/src/main/java/org/apache/maven/execution/MavenSession.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.maven.plugin.descriptor.MojoDescriptor;
 import org.apache.maven.plugin.descriptor.PluginDescriptor;
 import org.apache.maven.project.MavenProject;
+import org.apache.maven.realm.MavenRealmManager;
 import org.apache.maven.reporting.MavenReport;
 import org.apache.maven.settings.Settings;
 import org.codehaus.plexus.PlexusContainer;

File: maven-core/src/main/java/org/apache/maven/extension/DefaultExtensionManager.java
Patch:
@@ -38,10 +38,7 @@
 import org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;
 import org.apache.maven.artifact.versioning.VersionRange;
 import org.apache.maven.execution.MavenExecutionRequest;
-import org.apache.maven.execution.MavenRealmManager;
 import org.apache.maven.execution.MavenSession;
-import org.apache.maven.execution.RealmManagementException;
-import org.apache.maven.execution.RealmUtils;
 import org.apache.maven.model.Extension;
 import org.apache.maven.model.Model;
 import org.apache.maven.model.Parent;
@@ -56,6 +53,9 @@
 import org.apache.maven.plugin.version.PluginVersionNotFoundException;
 import org.apache.maven.plugin.version.PluginVersionResolutionException;
 import org.apache.maven.project.MavenProject;
+import org.apache.maven.realm.MavenRealmManager;
+import org.apache.maven.realm.RealmManagementException;
+import org.apache.maven.realm.RealmUtils;
 import org.codehaus.plexus.MutablePlexusContainer;
 import org.codehaus.plexus.PlexusConstants;
 import org.codehaus.plexus.context.Context;

File: maven-core/src/main/java/org/apache/maven/extension/ExtensionManagerException.java
Patch:
@@ -5,12 +5,12 @@
 import org.apache.maven.artifact.resolver.ArtifactNotFoundException;
 import org.apache.maven.artifact.resolver.ArtifactResolutionException;
 import org.apache.maven.artifact.resolver.ArtifactResolutionResult;
-import org.apache.maven.execution.RealmManagementException;
 import org.apache.maven.plugin.InvalidPluginException;
 import org.apache.maven.plugin.PluginManagerException;
 import org.apache.maven.plugin.PluginNotFoundException;
 import org.apache.maven.plugin.version.PluginVersionNotFoundException;
 import org.apache.maven.plugin.version.PluginVersionResolutionException;
+import org.apache.maven.realm.RealmManagementException;
 
 public class ExtensionManagerException
     extends Exception

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Patch:
@@ -35,9 +35,7 @@
 import org.apache.maven.artifact.versioning.DefaultArtifactVersion;
 import org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;
 import org.apache.maven.artifact.versioning.VersionRange;
-import org.apache.maven.execution.MavenRealmManager;
 import org.apache.maven.execution.MavenSession;
-import org.apache.maven.execution.RealmManagementException;
 import org.apache.maven.execution.RuntimeInformation;
 import org.apache.maven.lifecycle.statemgmt.StateManagementUtils;
 import org.apache.maven.model.Plugin;
@@ -59,6 +57,8 @@
 import org.apache.maven.project.artifact.InvalidDependencyVersionException;
 import org.apache.maven.project.artifact.MavenMetadataSource;
 import org.apache.maven.project.path.PathTranslator;
+import org.apache.maven.realm.MavenRealmManager;
+import org.apache.maven.realm.RealmManagementException;
 import org.apache.maven.reporting.MavenReport;
 import org.codehaus.plexus.MutablePlexusContainer;
 import org.codehaus.plexus.PlexusConstants;

File: maven-core/src/main/java/org/apache/maven/plugin/PluginContainerException.java
Patch:
@@ -1,8 +1,8 @@
 package org.apache.maven.plugin;
 
-import org.apache.maven.execution.RealmManagementException;
 import org.apache.maven.model.Plugin;
 import org.apache.maven.plugin.descriptor.MojoDescriptor;
+import org.apache.maven.realm.RealmManagementException;
 import org.codehaus.plexus.classworlds.realm.ClassRealm;
 import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
 import org.codehaus.plexus.component.repository.exception.ComponentRepositoryException;

File: maven-core/src/main/java/org/apache/maven/plugin/PluginManagerException.java
Patch:
@@ -1,11 +1,11 @@
 package org.apache.maven.plugin;
 
 import org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;
-import org.apache.maven.execution.RealmManagementException;
 import org.apache.maven.model.Plugin;
 import org.apache.maven.plugin.descriptor.MojoDescriptor;
 import org.apache.maven.plugin.descriptor.PluginDescriptor;
 import org.apache.maven.project.MavenProject;
+import org.apache.maven.realm.RealmManagementException;
 import org.codehaus.plexus.PlexusContainerException;
 import org.codehaus.plexus.classworlds.realm.NoSuchRealmException;
 import org.codehaus.plexus.component.repository.exception.ComponentRepositoryException;

File: maven-core/src/test/java/org/apache/maven/execution/DefaultMavenRealmManagerTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.factory.ArtifactFactory;
+import org.apache.maven.realm.DefaultMavenRealmManager;
 import org.codehaus.plexus.PlexusTestCase;
 import org.codehaus.plexus.logging.Logger;
 import org.codehaus.plexus.logging.console.ConsoleLogger;

File: maven-core/src/test/java/org/apache/maven/extension/DefaultExtensionManagerTest.java
Patch:
@@ -11,13 +11,13 @@
 import org.apache.maven.artifact.repository.layout.DefaultRepositoryLayout;
 import org.apache.maven.artifact.resolver.ArtifactResolver;
 import org.apache.maven.execution.DefaultMavenExecutionRequest;
-import org.apache.maven.execution.DefaultMavenRealmManager;
 import org.apache.maven.execution.MavenExecutionRequest;
-import org.apache.maven.execution.MavenRealmManager;
 import org.apache.maven.lifecycle.mapping.LifecycleMapping;
 import org.apache.maven.model.Build;
 import org.apache.maven.model.Extension;
 import org.apache.maven.model.Model;
+import org.apache.maven.realm.DefaultMavenRealmManager;
+import org.apache.maven.realm.MavenRealmManager;
 import org.codehaus.plexus.MutablePlexusContainer;
 import org.codehaus.plexus.PlexusTestCase;
 import org.codehaus.plexus.classworlds.realm.ClassRealm;

File: maven-core/src/test/java/org/apache/maven/lifecycle/binding/DefaultLifecycleBindingManagerTest.java
Patch:
@@ -2,9 +2,7 @@
 
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.execution.DefaultMavenExecutionRequest;
-import org.apache.maven.execution.DefaultMavenRealmManager;
 import org.apache.maven.execution.MavenExecutionRequest;
-import org.apache.maven.execution.MavenRealmManager;
 import org.apache.maven.execution.MavenSession;
 import org.apache.maven.lifecycle.LifecycleLoaderException;
 import org.apache.maven.lifecycle.LifecycleSpecificationException;
@@ -18,6 +16,8 @@
 import org.apache.maven.model.PluginExecution;
 import org.apache.maven.model.PluginManagement;
 import org.apache.maven.project.MavenProject;
+import org.apache.maven.realm.DefaultMavenRealmManager;
+import org.apache.maven.realm.MavenRealmManager;
 import org.apache.maven.shared.tools.easymock.MockManager;
 import org.codehaus.plexus.PlexusTestCase;
 import org.codehaus.plexus.logging.Logger;

File: maven-core/src/test/java/org/apache/maven/lifecycle/plan/DefaultBuildPlannerTest.java
Patch:
@@ -2,9 +2,7 @@
 
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.execution.DefaultMavenExecutionRequest;
-import org.apache.maven.execution.DefaultMavenRealmManager;
 import org.apache.maven.execution.MavenExecutionRequest;
-import org.apache.maven.execution.MavenRealmManager;
 import org.apache.maven.execution.MavenSession;
 import org.apache.maven.lifecycle.MojoBindingUtils;
 import org.apache.maven.lifecycle.model.MojoBinding;
@@ -17,6 +15,8 @@
 import org.apache.maven.plugin.descriptor.PluginDescriptor;
 import org.apache.maven.plugin.loader.PluginLoader;
 import org.apache.maven.project.MavenProject;
+import org.apache.maven.realm.DefaultMavenRealmManager;
+import org.apache.maven.realm.MavenRealmManager;
 import org.apache.maven.shared.tools.easymock.MockManager;
 import org.codehaus.plexus.PlexusTestCase;
 import org.codehaus.plexus.logging.Logger;

File: maven-embedder/src/main/java/org/apache/maven/embedder/Configuration.java
Patch:
@@ -19,7 +19,7 @@
  */
 
 import org.apache.maven.errors.CoreErrorReporter;
-import org.apache.maven.execution.MavenRealmManager;
+import org.apache.maven.realm.MavenRealmManager;
 import org.codehaus.plexus.PlexusContainer;
 import org.codehaus.plexus.classworlds.ClassWorld;
 

File: maven-embedder/src/main/java/org/apache/maven/embedder/DefaultConfiguration.java
Patch:
@@ -19,7 +19,7 @@
  */
 
 import org.apache.maven.errors.CoreErrorReporter;
-import org.apache.maven.execution.MavenRealmManager;
+import org.apache.maven.realm.MavenRealmManager;
 import org.codehaus.plexus.PlexusContainer;
 import org.codehaus.plexus.classworlds.ClassWorld;
 

File: maven-embedder/src/test/java/org/apache/maven/error/DummyCoreErrorReporter.java
Patch:
@@ -15,7 +15,6 @@
 import org.apache.maven.errors.DefaultCoreErrorReporter;
 import org.apache.maven.execution.MavenExecutionRequest;
 import org.apache.maven.execution.MavenSession;
-import org.apache.maven.execution.RealmManagementException;
 import org.apache.maven.extension.ExtensionManagerException;
 import org.apache.maven.lifecycle.LifecycleException;
 import org.apache.maven.lifecycle.LifecycleExecutionException;
@@ -54,6 +53,7 @@
 import org.apache.maven.project.interpolation.ModelInterpolationException;
 import org.apache.maven.project.path.PathTranslator;
 import org.apache.maven.reactor.MavenExecutionException;
+import org.apache.maven.realm.RealmManagementException;
 import org.codehaus.plexus.component.configurator.expression.ExpressionEvaluationException;
 import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
 import org.codehaus.plexus.configuration.PlexusConfiguration;

File: maven-project/src/main/java/org/apache/maven/realm/MavenRealmManager.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.execution;
+package org.apache.maven.realm;
 
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.model.Plugin;

File: maven-project/src/main/java/org/apache/maven/realm/RealmManagementException.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.execution;
+package org.apache.maven.realm;
 
 import org.apache.maven.artifact.Artifact;
 import org.codehaus.plexus.classworlds.realm.DuplicateRealmException;

File: maven-project/src/main/java/org/apache/maven/realm/RealmUtils.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.execution;
+package org.apache.maven.realm;
 
 /*
  * Licensed to the Apache Software Foundation (ASF) under one

File: maven-embedder/src/test/java/org/apache/maven/error/ErrorReporterPointcutTest.java
Patch:
@@ -763,7 +763,6 @@ public void testReportActivatorError()
         reporterCtl.verify();
     }
 
-    // TODO: Finish this test!
     public void testReportActivatorLookupError()
         throws IOException
     {

File: maven-core/src/main/java/org/apache/maven/errors/CoreErrorTips.java
Patch:
@@ -9,7 +9,6 @@
 import org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;
 import org.apache.maven.execution.RealmManagementException;
 import org.apache.maven.lifecycle.LifecycleException;
-import org.apache.maven.lifecycle.TaskValidationResult;
 import org.apache.maven.lifecycle.model.MojoBinding;
 import org.apache.maven.model.Model;
 import org.apache.maven.model.Plugin;
@@ -67,7 +66,7 @@ public static List getProjectCycleTips( ProjectCycleException error )
         return null;
     }
 
-    public static List getTaskValidationTips( TaskValidationResult result, Exception cause )
+    public static List getTaskValidationTips( String task, Exception cause )
     {
         // TODO Auto-generated method stub
         return null;

File: maven-core/src/main/java/org/apache/maven/extension/DefaultBuildExtensionScanner.java
Patch:
@@ -407,7 +407,6 @@ private ModelLineage buildModelLineage( File pom, MavenExecutionRequest request,
         }
         catch ( ProjectBuildingException e )
         {
-            System.out.println( "blah" );
             throw new ExtensionScanningException( "Error building model lineage in order to pre-scan for extensions: "
                 + e.getMessage(), pom, e );
         }

File: maven-core/src/main/java/org/apache/maven/errors/CoreErrorReporter.java
Patch:
@@ -99,8 +99,6 @@ public interface CoreErrorReporter
 
     void reportErrorFormulatingBuildPlan( List tasks, MavenProject configuringProject, String targetDescription, LifecycleException cause );
 
-    void handleProjectBuildingError( MavenExecutionRequest request, File pomFile, ProjectBuildingException exception );
-
     void reportInvalidMavenVersion( MavenProject project, ArtifactVersion mavenVersion, MavenExecutionException err );
 
     void reportPomFileScanningError( File basedir, String includes, String excludes, IOException cause );

File: maven-core/src/main/java/org/apache/maven/extension/DefaultBuildExtensionScanner.java
Patch:
@@ -407,6 +407,7 @@ private ModelLineage buildModelLineage( File pom, MavenExecutionRequest request,
         }
         catch ( ProjectBuildingException e )
         {
+            System.out.println( "blah" );
             throw new ExtensionScanningException( "Error building model lineage in order to pre-scan for extensions: "
                 + e.getMessage(), pom, e );
         }

File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java
Patch:
@@ -121,7 +121,7 @@ public void execute( final MavenSession session,
 
         if ( goals.isEmpty() )
         {
-            throw new NoGoalsSpecifiedException( "You must specify at least one goal. Try 'install'" );
+            throw new NoGoalsSpecifiedException( "\n\nYou must specify at least one goal. Try 'install' to build or mvn -? for other options.\n See http://maven.apache.org for more information.\n\n" );
         }
 
         List taskSegments = segmentTaskListByAggregationNeeds(

File: maven-core/src/test/java/org/apache/maven/plugin/PluginParameterExpressionEvaluatorTest.java
Patch:
@@ -261,7 +261,7 @@ public void testTwoExpressions()
 
         Object value = expressionEvaluator.evaluate( "${project.build.directory}" + FS + "${project.build.finalName}" );
 
-        assertEquals( "expected-directory/expected-finalName", value );
+        assertEquals( "expected-directory" + File.separatorChar + "expected-finalName", value );
     }
 
     public void testShouldExtractPluginArtifacts()

File: maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java
Patch:
@@ -180,7 +180,8 @@ private static void showError( Exception e,
      * @param showStackTraces
      * @param logger
      */
-    static void showError( String message,
+    //mkleint: public because used in netbeans integration
+    public static void showError( String message,
                            Exception e,
                            boolean showStackTraces,
                            CoreErrorReporter reporter,

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Patch:
@@ -583,6 +583,7 @@ public void executeMojo( MavenProject project,
 
         // by this time, the pluginDescriptor has had the correct realm setup from getConfiguredMojo(..)
         ClassRealm pluginRealm = null;
+        ClassRealm projectRealm = session.getRealmManager().getProjectRealm( project.getGroupId(), project.getArtifactId(), project.getVersion() );
         ClassRealm oldLookupRealm = container.getLookupRealm();
         ClassLoader oldClassLoader = Thread.currentThread().getContextClassLoader();
 
@@ -638,7 +639,8 @@ public void executeMojo( MavenProject project,
             pluginDescriptor.setClassRealm( null );
             pluginDescriptor.setArtifacts( null );
 
-            if ( ( pluginRealm != null ) && ( pluginRealm != container.getContainerRealm() ) )
+            if ( ( pluginRealm != null ) && ( pluginRealm != container.getContainerRealm() )
+                 && ( pluginRealm != projectRealm ) )
             {
                 pluginRealm.setParentRealm( null );
             }

File: maven-project/src/main/java/org/apache/maven/project/error/ProjectErrorReporter.java
Patch:
@@ -30,8 +30,6 @@
 public interface ProjectErrorReporter
 {
 
-    String NEWLINE = "\n";
-
     void clearErrors();
 
     String getFormattedMessage( Throwable error );

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Patch:
@@ -1298,6 +1298,7 @@ private void resolveTransitiveDependencies( MavenSession context,
         // Don't recreate if already created - for effeciency, and because clover plugin adds to it
         if ( project.getDependencyArtifacts() == null )
         {
+            // NOTE: Don't worry about covering this case with the error-reporter bindings...it's already handled by the project error reporter.
             project.setDependencyArtifacts( project.createArtifacts( artifactFactory, null, null ) );
         }
         ArtifactResolutionResult result = artifactResolver.resolveTransitively(

File: maven-core/src/main/java/org/apache/maven/lifecycle/binding/DefaultLifecycleBindingManager.java
Patch:
@@ -63,7 +63,7 @@ public class DefaultLifecycleBindingManager
     private Logger logger;
 
     // configured. Moved out of DefaultLifecycleExecutor...
-    private List legacyLifecycles;
+    private List lifecycles;
 
     // configured. Moved out of DefaultLifecycleExecutor...
     private List defaultReports;
@@ -128,7 +128,7 @@ public LifecycleBindings getBindingsForPackaging( final MavenProject project, fi
      */
     public LifecycleBindings getDefaultBindings( final MavenProject project ) throws LifecycleSpecificationException
     {
-        LifecycleBindings bindings = legacyLifecycleMappingParser.parseDefaultMappings( legacyLifecycles );
+        LifecycleBindings bindings = legacyLifecycleMappingParser.parseDefaultMappings( lifecycles );
 
         BindingUtils.injectProjectConfiguration( bindings, project );
 
@@ -325,7 +325,7 @@ public LifecycleBindings getPluginLifecycleOverlay( final PluginDescriptor plugi
 
         if ( lifecycleOverlay == null )
         {
-            throw new LifecycleLoaderException( "LegacyLifecycle '" + lifecycleId + "' not found in plugin" );
+            throw new LifecycleLoaderException( "Lifecycle '" + lifecycleId + "' not found in plugin" );
         }
 
         LifecycleBindings bindings = new LifecycleBindings();

File: maven-core/src/main/java/org/apache/maven/lifecycle/binding/LegacyLifecycleMappingParser.java
Patch:
@@ -39,7 +39,7 @@ public LifecycleBindings parseDefaultMappings( final List lifecycles )
 
         for ( Iterator it = lifecycles.iterator(); it.hasNext(); )
         {
-            LegacyLifecycle lifecycle = (LegacyLifecycle) it.next();
+            Lifecycle lifecycle = (Lifecycle) it.next();
 
             if ( "clean".equals( lifecycle.getId() ) )
             {

File: maven-core/src/main/java/org/apache/maven/lifecycle/mapping/DefaultLifecycleMapping.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.Map;
 
 /**
- * LegacyLifecycle mapping for a POM.
+ * Lifecycle mapping for a POM.
  *
  * @author <a href="mailto:brett@apache.org">Brett Porter</a>
  * @version $Id$

File: maven-core/src/main/java/org/apache/maven/lifecycle/mapping/Lifecycle.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.Map;
 
 /**
- * Class LegacyLifecycle.
+ * Class Lifecycle.
  */
 public class Lifecycle
 {

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Patch:
@@ -1262,7 +1262,7 @@ public static String createPluginParameterRequiredMessage( MojoDescriptor mojo,
     }
 
     // ----------------------------------------------------------------------
-    // LegacyLifecycle
+    // Lifecycle
     // ----------------------------------------------------------------------
 
     public void contextualize( Context context )

File: maven-embedder/src/main/java/org/apache/maven/embedder/MavenEmbedder.java
Patch:
@@ -483,7 +483,7 @@ public ArtifactHandler getArtifactHandler( Artifact artifact )
     // Execution of phases/goals
     // ----------------------------------------------------------------------
     // ----------------------------------------------------------------------
-    // LegacyLifecycle information
+    // Lifecycle information
     // ----------------------------------------------------------------------
 
     public List getLifecyclePhases()
@@ -517,7 +517,7 @@ public List getSiteLifecyclePhases()
     }
 
     // ----------------------------------------------------------------------
-    //  LegacyLifecycle
+    //  Lifecycle
     // ----------------------------------------------------------------------
 
     private MavenExecutionRequest request;
@@ -629,7 +629,7 @@ private void start( Configuration configuration )
     }
 
     // ----------------------------------------------------------------------
-    // LegacyLifecycle
+    // Lifecycle
     // ----------------------------------------------------------------------
 
     private void handleExtensions( List extensions )

File: maven-embedder/src/main/java/org/apache/maven/embedder/execution/DefaultMavenExecutionRequestPopulator.java
Patch:
@@ -640,7 +640,7 @@ private void profileManager( MavenExecutionRequest request,
     }
 
     // ----------------------------------------------------------------------------
-    // LegacyLifecycle
+    // Lifecycle
     // ----------------------------------------------------------------------------
 
     public void contextualize( Context context )

File: maven-embedder/src/test/java/org/apache/maven/embedder/MavenEmbedderTest.java
Patch:
@@ -266,7 +266,7 @@ public void testTwoExecutionsDoNotCacheChangedData()
     }
 
     // ----------------------------------------------------------------------
-    // LegacyLifecycle phases
+    // Lifecycle phases
     // ----------------------------------------------------------------------
 
     public void testRetrievingLifecyclePhases()

File: maven-project/src/test/java/org/apache/maven/project/build/model/DefaultModelLineageBuilderTest.java
Patch:
@@ -387,7 +387,7 @@ public void testReadPOMWithParentInSiblingDirectoryUsingSpecifiedRelativePathTha
         assertEquals( parent.getId(), ( (Model) modelIterator.next() ).getId() );
     }
 
-    public void testReadPOMWithParentInRepoBroughtInViaSettingsProfile()
+    public void testReadPOMWithParentInRepoBroughtInViaExternalProfile()
         throws Exception
     {
         // 1. create project-root directory.

File: maven-core/src/main/java/org/apache/maven/lifecycle/binding/LifecycleBindingManager.java
Patch:
@@ -31,8 +31,9 @@ public interface LifecycleBindingManager
     /**
      * Retrieve the LifecycleBindings given by the lifecycle mapping component/file for the project's packaging. Any
      * applicable mojo configuration will be injected into the LifecycleBindings from the POM.
+     * @param session
      */
-    LifecycleBindings getBindingsForPackaging( MavenProject project )
+    LifecycleBindings getBindingsForPackaging( MavenProject project, MavenSession session )
         throws LifecycleLoaderException, LifecycleSpecificationException;
 
     /**

File: maven-core/src/main/java/org/apache/maven/lifecycle/plan/DefaultBuildPlanner.java
Patch:
@@ -51,7 +51,7 @@ public BuildPlan constructBuildPlan( final List tasks, final MavenProject projec
         throws LifecycleLoaderException, LifecycleSpecificationException, LifecyclePlannerException
     {
         LifecycleBindings defaultBindings = lifecycleBindingManager.getDefaultBindings( project );
-        LifecycleBindings packagingBindings = lifecycleBindingManager.getBindingsForPackaging( project );
+        LifecycleBindings packagingBindings = lifecycleBindingManager.getBindingsForPackaging( project, session );
         LifecycleBindings projectBindings = lifecycleBindingManager.getProjectCustomBindings( project, session );
 
         BuildPlan plan = new BuildPlan( packagingBindings, projectBindings, defaultBindings, tasks );

File: maven-core/src/test/java/org/apache/maven/execution/DefaultMavenRealmManagerTest.java
Patch:
@@ -3,7 +3,6 @@
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.factory.ArtifactFactory;
 import org.codehaus.plexus.PlexusTestCase;
-import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
 import org.codehaus.plexus.logging.Logger;
 import org.codehaus.plexus.logging.console.ConsoleLogger;
 
@@ -25,7 +24,7 @@ protected void setUp() throws Exception
     }
 
     public void test_ReuseSingleExtensionRealmFromMultipleProjectRealms_UsingTwoManagerInstances()
-        throws RealmManagementException, ComponentLookupException
+        throws Exception
     {
         ClassLoader cloader = Thread.currentThread().getContextClassLoader();
         URL jarResource = cloader.getResource( "org/apache/maven/execution/test-extension-1.jar" );

File: maven-core/src/test/java/org/apache/maven/extension/DefaultExtensionManagerTest.java
Patch:
@@ -86,7 +86,7 @@ public void tearDown()
 
             if ( f.exists() )
             {
-			    try 
+			    try
 				{
                     FileUtils.forceDelete( f );
 				}
@@ -207,6 +207,7 @@ public void test_addExtension_usingModel_ShouldLoadCustomLifecycleMappingAndArti
     }
 
     private ExtensionManager newDefaultExtensionManager()
+        throws Exception
     {
         DefaultExtensionManager mgr = new DefaultExtensionManager( factory, resolver,
                                                                    metadataSource, container,

File: maven-project/src/test/java/org/apache/maven/project/SuperPomProjectBuilderTest.java
Patch:
@@ -42,7 +42,7 @@ public void setUp()
     }
 
     public void testStandaloneSuperPomContainsInjectedExternalProfileRepositories()
-        throws ProjectBuildingException
+        throws Exception
     {
         Profile profile = new Profile();
         profile.setId( "test-profile" );

File: maven-project/src/test/java/org/apache/maven/project/build/model/DefaultModelLineageBuilderTest.java
Patch:
@@ -388,7 +388,7 @@ public void testReadPOMWithParentInSiblingDirectoryUsingSpecifiedRelativePathTha
     }
 
     public void testReadPOMWithParentInRepoBroughtInViaSettingsProfile()
-        throws IOException, ProjectBuildingException
+        throws Exception
     {
         // 1. create project-root directory.
         File projectRootDirectory = createTempDir( "projectRootDir" );

File: maven-core/src/main/java/org/apache/maven/extension/DefaultExtensionManager.java
Patch:
@@ -63,7 +63,6 @@
 import org.codehaus.plexus.logging.AbstractLogEnabled;
 import org.codehaus.plexus.personality.plexus.lifecycle.phase.Contextualizable;
 
-import java.util.Collections;
 import java.util.Iterator;
 import java.util.LinkedHashSet;
 import java.util.List;
@@ -207,8 +206,7 @@ public void addPluginAsExtension( Plugin plugin,
         {
             MavenProject dummyProject = new MavenProject( originatingModel );
 
-            dummyProject.setPluginArtifactRepositories( remoteRepositories );
-            dummyProject.setRemoteArtifactRepositories( Collections.EMPTY_LIST );
+            dummyProject.setRemoteArtifactRepositories( remoteRepositories );
 
             EventDispatcher dispatcher = new DefaultEventDispatcher( request.getEventMonitors() );
             MavenSession session = new MavenSession( container, request, dispatcher, null );

File: maven-core/src/main/java/org/apache/maven/plugin/loader/DefaultPluginLoader.java
Patch:
@@ -164,7 +164,7 @@ private PluginDescriptor loadByPrefix( String prefix, MavenProject project, Mave
         Settings settings = session.getSettings();
 
         Plugin plugin = pluginMappingManager.getByPrefix( prefix, settings.getPluginGroups(),
-                                                          project.getPluginArtifactRepositories(), session.getLocalRepository() );
+                                                          project.getRemoteArtifactRepositories(), session.getLocalRepository() );
 
         PluginDescriptor pluginDescriptor = null;
         if ( plugin != null )

File: maven-core/src/main/java/org/apache/maven/plugin/version/DefaultPluginVersionManager.java
Patch:
@@ -189,7 +189,7 @@ private String resolveMetaVersion( String groupId,
         try
         {
             ResolutionGroup resolutionGroup =
-                artifactMetadataSource.retrieve( artifact, localRepository, project.getPluginArtifactRepositories() );
+                artifactMetadataSource.retrieve( artifact, localRepository, project.getRemoteArtifactRepositories() );
 
             // switching this out with the actual resolved artifact instance, since the MMSource re-creates the pom
             // artifact.
@@ -215,7 +215,7 @@ private String resolveMetaVersion( String groupId,
                 {
                     artifact = artifactFactory.createProjectArtifact( groupId, artifactId, artifactVersion );
 
-                    pluginProject = mavenProjectBuilder.buildFromRepository( artifact, project.getPluginArtifactRepositories(), localRepository );
+                    pluginProject = mavenProjectBuilder.buildFromRepository( artifact, project.getRemoteArtifactRepositories(), localRepository );
                 }
                 catch ( ProjectBuildingException e )
                 {
@@ -250,7 +250,7 @@ private String resolveMetaVersion( String groupId,
                         try
                         {
                             List versions = artifactMetadataSource.retrieveAvailableVersions( artifact, localRepository,
-                                                                                              project.getPluginArtifactRepositories() );
+                                                                                              project.getRemoteArtifactRepositories() );
                             ArtifactVersion v = vr.matchVersion( versions );
                             artifactVersion = v != null ? v.toString() : null;
                         }

File: maven-project/src/main/java/org/apache/maven/project/MavenProject.java
Patch:
@@ -1318,7 +1318,7 @@ public void setPluginArtifactRepositories( List pluginArtifactRepositories )
      */
     public List getPluginArtifactRepositories()
     {
-        return pluginArtifactRepositories;
+        return getRemoteArtifactRepositories();
     }
 
     public ArtifactRepository getDistributionManagementArtifactRepository()
@@ -1330,7 +1330,7 @@ public ArtifactRepository getDistributionManagementArtifactRepository()
     public List getPluginRepositories()
     {
 //        return model.getPluginRepositories();
-        return Collections.EMPTY_LIST;
+        return model.getRepositories();
     }
 
     public void setActiveProfiles( List activeProfiles )

File: maven-project/src/main/java/org/apache/maven/project/MavenProject.java
Patch:
@@ -22,10 +22,10 @@
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.ArtifactUtils;
 import org.apache.maven.artifact.DependencyResolutionRequiredException;
-import org.apache.maven.artifact.versioning.ManagedVersionMap;
 import org.apache.maven.artifact.factory.ArtifactFactory;
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.artifact.resolver.filter.ArtifactFilter;
+import org.apache.maven.artifact.versioning.ManagedVersionMap;
 import org.apache.maven.model.Build;
 import org.apache.maven.model.CiManagement;
 import org.apache.maven.model.Contributor;
@@ -1329,7 +1329,8 @@ public ArtifactRepository getDistributionManagementArtifactRepository()
 
     public List getPluginRepositories()
     {
-        return model.getPluginRepositories();
+//        return model.getPluginRepositories();
+        return Collections.EMPTY_LIST;
     }
 
     public void setActiveProfiles( List activeProfiles )

File: maven-project/src/main/java/org/apache/maven/project/MavenProjectBuilder.java
Patch:
@@ -91,4 +91,7 @@ MavenProject buildFromRepository( Artifact artifact,
      */
     MavenProject buildStandaloneSuperProject()
         throws ProjectBuildingException;
+
+    MavenProject buildStandaloneSuperProject( ProfileManager profileManager )
+        throws ProjectBuildingException;
 }

File: maven-project/src/main/java/org/apache/maven/project/ModelUtils.java
Patch:
@@ -573,7 +573,7 @@ private static List cloneProfiles( List profiles )
                 newProfile.setModules( new ArrayList( modules ) );
             }
 
-            newProfile.setPluginRepositories( cloneProfileRepositories( profile.getPluginRepositories() ) );
+//            newProfile.setPluginRepositories( cloneProfileRepositories( profile.getPluginRepositories() ) );
 
             Properties props = profile.getProperties();
 

File: maven-core/src/main/java/org/apache/maven/lifecycle/binding/BindingUtils.java
Patch:
@@ -211,6 +211,7 @@ static void injectProjectConfiguration( MojoBinding binding, MavenProject projec
             plugin = new Plugin();
             plugin.setGroupId( binding.getGroupId() );
             plugin.setArtifactId( binding.getArtifactId() );
+            plugin.setVersion( binding.getVersion() );
         }
 
         injectPluginManagementInfo( plugin, project );
@@ -238,6 +239,7 @@ static void injectProjectConfiguration( MojoBinding binding, MavenProject projec
             configuration = mergeRawConfigurations( reportConfig, configuration );
         }
 
+        binding.setVersion( plugin.getVersion() );
         binding.setConfiguration( configuration );
     }
 
@@ -308,6 +310,7 @@ static void injectPluginManagementInfo( Plugin plugin, MavenProject project )
         Map plugMgmtMap = buildPluginMap( plugMgmt );
 
         String key = createPluginKey( plugin );
+
         Plugin mgmtPlugin = (Plugin) plugMgmtMap.get( key );
 
         if ( mgmtPlugin != null )

File: maven-project/src/main/java/org/apache/maven/project/artifact/InvalidDependencyVersionException.java
Patch:
@@ -45,7 +45,7 @@ public InvalidDependencyVersionException( String projectId, Dependency dependenc
 
     private static String formatLocationInPom( Dependency dependency )
     {
-        return "dependency: " + ArtifactUtils.versionlessKey( dependency.getGroupId(), dependency.getArtifactId() );
+        return "Dependency: " + ArtifactUtils.versionlessKey( dependency.getGroupId(), dependency.getArtifactId() );
     }
 
     public Dependency getDependency()

File: maven-core/src/main/java/org/apache/maven/DefaultArtifactFilterManager.java
Patch:
@@ -59,6 +59,9 @@ public class DefaultArtifactFilterManager implements ArtifactFilterManager
         artifacts.add( "maven-reporting-api" );
         artifacts.add( "maven-repository-metadata" );
         artifacts.add( "maven-settings" );
+        //adding shared/maven-toolchain project here, even though not part of the default 
+        //distro yet.
+        artifacts.add( "maven-toolchain" );
         artifacts.add( "plexus-component-api" );
         artifacts.add( "plexus-container-default" );
         artifacts.add( "plexus-interactivity-api" );

File: maven-core/src/main/java/org/apache/maven/execution/MavenExecutionRequest.java
Patch:
@@ -205,4 +205,6 @@ public interface MavenExecutionRequest
 
     MavenExecutionRequest setRealmManager( MavenRealmManager realmManager );
     MavenRealmManager getRealmManager();
+
+    MavenExecutionRequest clearAccumulatedBuildState();
 }

File: maven-core/src/main/java/org/apache/maven/execution/MavenRealmManager.java
Patch:
@@ -36,4 +36,7 @@ ClassRealm createPluginRealm( Plugin plugin,
                                   Artifact pluginArtifact,
                                   Collection artifacts )
         throws RealmManagementException;
+
+    void setPluginArtifacts( Plugin plugin,
+                             Collection artifacts );
 }

File: maven-core/src/main/java/org/apache/maven/lifecycle/binding/LifecycleBindingManager.java
Patch:
@@ -1,5 +1,6 @@
 package org.apache.maven.lifecycle.binding;
 
+import org.apache.maven.execution.MavenSession;
 import org.apache.maven.lifecycle.LifecycleLoaderException;
 import org.apache.maven.lifecycle.LifecycleSpecificationException;
 import org.apache.maven.lifecycle.model.LifecycleBindings;
@@ -37,7 +38,7 @@ LifecycleBindings getBindingsForPackaging( MavenProject project )
     /**
      * Construct the LifecycleBindings that constitute the extra mojos bound to the lifecycle within the POM itself.
      */
-    LifecycleBindings getProjectCustomBindings( MavenProject project )
+    LifecycleBindings getProjectCustomBindings( MavenProject project, MavenSession session )
         throws LifecycleLoaderException, LifecycleSpecificationException;
 
     /**
@@ -59,6 +60,6 @@ LifecycleBindings getPluginLifecycleOverlay( PluginDescriptor pluginDescriptor,
      * <li>plugin-level configuration</li>
      * </ol>
      */
-    List getReportBindings( MavenProject project ) throws LifecycleLoaderException, LifecycleSpecificationException;
+    List getReportBindings( MavenProject project, MavenSession session ) throws LifecycleLoaderException, LifecycleSpecificationException;
 
 }

File: maven-core/src/main/java/org/apache/maven/lifecycle/plan/BuildPlanner.java
Patch:
@@ -1,5 +1,6 @@
 package org.apache.maven.lifecycle.plan;
 
+import org.apache.maven.execution.MavenSession;
 import org.apache.maven.lifecycle.LifecycleLoaderException;
 import org.apache.maven.lifecycle.LifecycleSpecificationException;
 import org.apache.maven.project.MavenProject;
@@ -21,6 +22,6 @@ public interface BuildPlanner
     /**
      * Orchestrates construction of the build plan which will be used by the user of LifecycleExecutor.
      */
-    BuildPlan constructBuildPlan( List tasks, MavenProject project )
+    BuildPlan constructBuildPlan( List tasks, MavenProject project, MavenSession session )
         throws LifecycleLoaderException, LifecycleSpecificationException, LifecyclePlannerException;
 }

File: maven-core/src/test/java/org/apache/maven/lifecycle/binding/DefaultLifecycleBindingManagerTest.java
Patch:
@@ -163,7 +163,7 @@ public void testGetProjectCustomBindings_ExecutionConfigShouldOverridePluginConf
 
         MavenProject project = new MavenProject( model );
 
-        LifecycleBindings lifecycleBindings = mgr.getProjectCustomBindings( project );
+        LifecycleBindings lifecycleBindings = mgr.getProjectCustomBindings( project, null );
 
         List bindings = lifecycleBindings.getBuildBinding().getValidate().getBindings();
 

File: maven-embedder/src/main/java/org/apache/maven/cli/CLIRequestUtils.java
Patch:
@@ -215,6 +215,7 @@ else if ( quiet )
         if ( alternatePomFile != null )
         {
             request.setPom( new File( alternatePomFile ) );
+            System.out.println( "Request pom set to: " + request.getPom() );
         }
 
         return request;

File: maven-project/src/main/java/org/apache/maven/profiles/activation/AlwaysOnProfileActivator.java
Patch:
@@ -25,12 +25,12 @@
 public class AlwaysOnProfileActivator
     implements ProfileActivator
 {
-    public boolean canDetermineActivation( Profile profile )
+    public boolean canDetermineActivation( Profile profile, ProfileActivationContext context )
     {
-        return profile.getActivation() != null && profile.getActivation() instanceof AlwaysOnActivation;
+        return ( profile.getActivation() != null ) && ( profile.getActivation() instanceof AlwaysOnActivation );
     }
 
-    public boolean isActive( Profile profile )
+    public boolean isActive( Profile profile, ProfileActivationContext context )
     {
         return true;
     }

File: maven-project/src/main/java/org/apache/maven/profiles/activation/ProfileActivator.java
Patch:
@@ -25,8 +25,8 @@ public interface ProfileActivator
 {
     static final String ROLE = ProfileActivator.class.getName();
 
-    boolean canDetermineActivation( Profile profile ) throws ProfileActivationException;
+    boolean canDetermineActivation( Profile profile, ProfileActivationContext context ) throws ProfileActivationException;
 
-    boolean isActive( Profile profile ) throws ProfileActivationException;
+    boolean isActive( Profile profile, ProfileActivationContext context ) throws ProfileActivationException;
 
 }

File: maven-project/src/main/java/org/apache/maven/project/build/model/ModelLineageBuilder.java
Patch:
@@ -41,9 +41,6 @@ public interface ModelLineageBuilder
     /**
      * Construct a lineage of the current POM plus all of its ancestors.
      *
-     * COMING: Also, set ProjectBuildContext.currentModelLineage build-context to the result of this
-     * method before returning.
-     *
      * @param pom The current POM, whose Model will terminate the constructed lineage
      * @param localRepository The local repository against which parent POMs should be resolved
      * @param remoteRepositories List of ArtifactRepository instances against which parent POMs

File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java
Patch:
@@ -769,7 +769,7 @@ private MojoDescriptor getMojoDescriptorForDirectInvocation( final String task,
 
     protected void line()
     {
-        getLogger().info( "----------------------------------------------------------------------------" );
+        getLogger().info( "------------------------------------------------------------------------" );
     }
 
     private static class TaskSegment

File: maven-project/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java
Patch:
@@ -371,8 +371,7 @@ public static Set createArtifacts( ArtifactFactory artifactFactory, List depende
             }
             catch ( InvalidVersionSpecificationException e )
             {
-                throw new InvalidDependencyVersionException( "Unable to parse version '" + d.getVersion() +
-                    "' for dependency '" + d.getManagementKey() + "': " + e.getMessage(), e );
+                throw new InvalidDependencyVersionException( project.getId(), d, project.getFile(), e );
             }
             Artifact artifact = artifactFactory.createDependencyArtifact( d.getGroupId(), d.getArtifactId(),
                                                                           versionRange, d.getType(), d.getClassifier(),

File: maven-embedder/src/main/java/org/apache/maven/embedder/MavenEmbedder.java
Patch:
@@ -343,11 +343,11 @@ public MavenProject readProject( File mavenProject )
     private MavenProject readProject( File mavenProject, MavenExecutionRequest request )
         throws ProjectBuildingException, ExtensionScanningException
     {
-        getLogger().info( "Scanning for extensions: " + mavenProject );
+        getLogger().debug( "Scanning for extensions: " + mavenProject );
 
         extensionScanner.scanForBuildExtensions( mavenProject, request );
 
-        getLogger().info( "Building MavenProject instance: " + mavenProject );
+        getLogger().debug( "Building MavenProject instance: " + mavenProject );
 
         return mavenProjectBuilder.build( mavenProject, request.getLocalRepository(), request.getProfileManager() );
     }

File: maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -1059,7 +1059,7 @@ private Model readModel( String projectId,
         URI uri = null;
         try
         {
-            uri = new URI( url.toString() );
+            uri = new URI( url.toString().replaceAll( " ", "%20" ) );
             reader = ReaderFactory.newXmlReader( url.openStream() );
             return readModel( projectId, uri, reader, strict );
         }

File: maven-project/src/test/java/org/apache/maven/project/AbstractMavenProjectTestCase.java
Patch:
@@ -80,7 +80,7 @@ protected File getFileForClasspathResource( String resource )
             throw new FileNotFoundException( "Unable to find: " + resource );
         }
 
-        return new File( new URI( resourceUrl.toString() ) );
+        return new File( new URI( resourceUrl.toString().replaceAll( " ", "%20" ) ) );
     }
 
     protected ArtifactRepository getLocalRepository()

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenIT0107Test.java
Patch:
@@ -23,9 +23,8 @@ public void testit0107()
         File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/it0107" );
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
         List cliOptions = new ArrayList();
-        cliOptions.add( "-X" );
         verifier.setCliOptions( cliOptions );
-        verifier.executeGoal( "core-it:param-implementation" );
+        verifier.executeGoal( "validate" );
         verifier.verifyErrorFreeLog();
         verifier.resetStreams();
 

File: maven-core/src/main/java/org/apache/maven/DefaultMaven.java
Patch:
@@ -279,7 +279,7 @@ private List getProjects( MavenExecutionRequest request )
         // instances just-in-time.
         try
         {
-            buildExtensionScanner.scanForBuildExtensions( files, request.getLocalRepository(), request.getProfileManager() );
+            buildExtensionScanner.scanForBuildExtensions( files, request );
         }
         catch ( ExtensionScanningException e )
         {

File: maven-core/src/main/java/org/apache/maven/execution/MavenExecutionRequest.java
Patch:
@@ -202,4 +202,7 @@ public interface MavenExecutionRequest
 
     MavenExecutionRequest addRemoteRepository( ArtifactRepository repository );
     List getRemoteRepositories();
+
+    MavenExecutionRequest setRealmManager( MavenRealmManager realmManager );
+    MavenRealmManager getRealmManager();
 }

File: maven-core/src/main/java/org/apache/maven/extension/ExtensionManager.java
Patch:
@@ -19,7 +19,7 @@
  * under the License.
  */
 
-import org.apache.maven.artifact.repository.ArtifactRepository;
+import org.apache.maven.execution.MavenExecutionRequest;
 import org.apache.maven.model.Extension;
 import org.apache.maven.model.Model;
 import org.apache.maven.project.MavenProject;
@@ -34,12 +34,12 @@
  */
 public interface ExtensionManager
 {
-    void addExtension( Extension extension, MavenProject project, ArtifactRepository localRepository )
+    void addExtension( Extension extension, MavenProject project, MavenExecutionRequest request )
         throws ExtensionManagerException;
 
     void registerWagons();
 
     void addExtension( Extension extension, Model originatingModel, List remoteRepositories,
-                       ArtifactRepository localRepository )
+                       MavenExecutionRequest request )
         throws ExtensionManagerException;
 }

File: maven-embedder/src/main/java/org/apache/maven/embedder/MavenEmbedder.java
Patch:
@@ -490,7 +490,7 @@ public MavenExecutionResult readProjectWithDependencies( MavenExecutionRequest r
             return result.addExtensionScanningException( e );
         }
 
-        ReactorManager reactorManager = maven.createReactorManager( request, result, projectSessions );
+        ReactorManager reactorManager = maven.createReactorManager( request, result );
 
         if ( result.hasExceptions() )
         {
@@ -901,7 +901,7 @@ public MavenExecutionResult execute( MavenExecutionRequest request )
                 return result;
             }
 
-            return maven.execute( request, projectSessions );
+            return maven.execute( request );
         }
         finally
         {

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenIT0067Test.java
Patch:
@@ -24,7 +24,7 @@ public void testit0067()
         cliOptions.add( "-P test-profile" );
         verifier.setCliOptions( cliOptions );
         verifier.executeGoal( "compile" );
-        verifier.assertFilePresent( "target/classes/org/apache/maven/it0021/Person.class" );
+        verifier.assertFilePresent( "target/classes/org/apache/maven/it0067/Person.class" );
         verifier.verifyErrorFreeLog();
         verifier.resetStreams();
 

File: its/core-integration-tests/src/test/resources/it0067/src/main/java/org/apache/maven/it0067/Person.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0021;
+package org.apache.maven.it0067;
 
 import junit.framework.TestCase;
 

File: maven-embedder/src/main/java/org/apache/maven/embedder/MavenEmbedder.java
Patch:
@@ -470,12 +470,12 @@ public MavenExecutionResult readProjectWithDependencies( MavenExecutionRequest r
 
             MavenProject project = readProject( request.getPom() );
 
-            Map handlers = findArtifactTypeHandlers( project );
+//            Map handlers = findArtifactTypeHandlers( project );
 
             //TODO: ok this is crappy, now there are active collections so when new artifact handlers
             // enter the system they should be available.
 
-            artifactHandlerManager.addHandlers( handlers );
+//            artifactHandlerManager.addHandlers( handlers );
         }
         catch ( MavenEmbedderException e )
         {

File: maven-core/src/main/java/org/apache/maven/execution/ExecutionBuildContext.java
Patch:
@@ -108,7 +108,7 @@ public List getPluginGroups()
 
     public String getPomFile()
     {
-        return request.getPom().getAbsolutePath();
+        return request.getPom() == null ? null : request.getPom().getAbsolutePath();
     }
 
     public List getProfiles()

File: maven-core/src/main/java/org/apache/maven/execution/MavenExecutionRequest.java
Patch:
@@ -109,9 +109,8 @@ public interface MavenExecutionRequest
     List getEventMonitors();
 
     // Pom
-    /** @deprecated use {@link #setPom(File)} */
     MavenExecutionRequest setPomFile( String pomFilename );
-    /** @deprecated use {@link #getPom()} */
+
     String getPomFile();
 
     MavenExecutionRequest setPom( File pom );

File: maven-embedder/src/test/java/org/apache/maven/embedder/MavenEmbedderProjectWithExtensionReadingTest.java
Patch:
@@ -73,8 +73,6 @@ protected Map getPluginExtensionComponents( Plugin plugin )
             }
             catch ( ComponentLookupException e )
             {
-                e.printStackTrace();
-
                 throw new PluginManagerException( plugin, null );
             }
 

File: maven-project/src/main/java/org/apache/maven/project/build/model/DefaultModelLineageBuilder.java
Patch:
@@ -198,11 +198,11 @@ private Model readModel( File pom, ProjectBuildCache projectBuildCache, boolean
         }
         catch ( IOException e )
         {
-            throw new ProjectBuildingException( "unknown", "Failed to read model from: " + pomFile, pomFile, e );
+            throw new ProjectBuildingException( "unknown", "Failed to read model from: " + pomFile, pomFile.getAbsolutePath(), e );
         }
         catch ( XmlPullParserException e )
         {
-            throw new ProjectBuildingException( "unknown", "Failed to parse model from: " + pomFile, pomFile, e );
+            throw new ProjectBuildingException( "unknown", "Failed to parse model from: " + pomFile, pomFile.getAbsolutePath(), e );
         }
         finally
         {
@@ -251,7 +251,7 @@ private List updateRepositorySet( Model model, List oldArtifactRepositories, Fil
             catch ( InvalidRepositoryException e )
             {
                 throw new ProjectBuildingException( model.getId(), "Failed to create ArtifactRepository list for: "
-                    + pomFile, pomFile, e );
+                    + pomFile, pomFile.getAbsolutePath(), e );
             }
         }
 

File: maven-core/src/main/java/org/apache/maven/lifecycle/plan/BuildPlanner.java
Patch:
@@ -11,9 +11,9 @@
  * MojoBinding instances that carry all the information necessary to execute a mojo, including configuration from the
  * POM and other sources. NOTE: the build plan may be constructed of a main lifecycle binding-set, plus any number of
  * lifecycle modifiers and direct-invocation modifiers, to handle cases of forked execution.
- * 
+ *
  * @author jdcasey
- * 
+ *
  */
 public interface BuildPlanner
 {

File: maven-project/src/main/java/org/apache/maven/project/build/model/ModelLineageBuilder.java
Patch:
@@ -54,7 +54,7 @@ public interface ModelLineageBuilder
      *   a parent-POM cannot be resolved.
      */
     ModelLineage buildModelLineage( File pom, ArtifactRepository localRepository, List remoteRepositories,
-                                    ProfileManager profileManager, boolean allowStubs )
+                                    ProfileManager profileManager, boolean allowStubs, boolean validProfilesXmlLocation )
         throws ProjectBuildingException;
 
     /**

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenIT0129ResourceProvidedToAPluginAsAPluginDependency.java
Patch:
@@ -10,7 +10,7 @@
 public class MavenIT0129ResourceProvidedToAPluginAsAPluginDependency
     extends AbstractMavenIntegrationTestCase
 {
-    public void testit0114()
+    public void testit0129()
         throws Exception
     {
         File testDir =

File: maven-core/src/main/java/org/apache/maven/lifecycle/LifecycleExecutor.java
Patch:
@@ -20,10 +20,10 @@
  */
 
 import org.apache.maven.BuildFailureException;
-import org.apache.maven.project.MavenProject;
 import org.apache.maven.execution.MavenSession;
 import org.apache.maven.execution.ReactorManager;
 import org.apache.maven.monitor.event.EventDispatcher;
+import org.apache.maven.project.MavenProject;
 
 /**
  * @author <a href="mailto:jason@maven.org">Jason van Zyl</a>
@@ -33,7 +33,7 @@ public interface LifecycleExecutor
 {
     String ROLE = LifecycleExecutor.class.getName();
 
-    TaskValidationResult isTaskValid( String task, MavenSession session, MavenProject rootProject );        
+    TaskValidationResult isTaskValid( String task, MavenSession session, MavenProject rootProject );
 
     void execute( MavenSession session, ReactorManager rm, EventDispatcher dispatcher )
         throws LifecycleExecutionException, BuildFailureException;

File: maven-project/src/main/java/org/apache/maven/project/MavenProjectBuilder.java
Patch:
@@ -41,7 +41,6 @@
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.profiles.ProfileManager;
-import org.apache.maven.wagon.events.TransferListener;
 
 import java.io.File;
 import java.util.List;
@@ -82,7 +81,7 @@ MavenProject buildFromRepository( Artifact artifact,
         throws ProjectBuildingException;
 
     /**
-     * 
+     *
      * @return
      * @throws ProjectBuildingException
      */

File: maven-project/src/main/java/org/apache/maven/project/MavenProjectBuildingResult.java
Patch:
@@ -20,7 +20,6 @@
  */
 
 import org.apache.maven.artifact.resolver.ArtifactResolutionResult;
-import org.apache.maven.project.validation.ModelValidationResult;
 
 /**
  * @author Jason van Zyl

File: maven-project/src/main/java/org/apache/maven/project/artifact/InvalidDependencyVersionException.java
Patch:
@@ -1,5 +1,7 @@
 package org.apache.maven.project.artifact;
 
+import org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;
+
 /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
@@ -28,7 +30,7 @@
 public class InvalidDependencyVersionException
     extends Exception
 {
-    public InvalidDependencyVersionException( String message, Exception cause )
+    public InvalidDependencyVersionException( String message, InvalidVersionSpecificationException cause )
     {
         super( message, cause );
     }

File: maven-core/src/main/java/org/apache/maven/DefaultMaven.java
Patch:
@@ -294,7 +294,6 @@ private List getProjects( MavenExecutionRequest request )
                 files,
                 request.getLocalRepository(),
                 request.isRecursive(),
-                request.getSettings(),
                 request.getProfileManager(),
                 !request.useReactor() );
 
@@ -323,7 +322,6 @@ private List getProjects( MavenExecutionRequest request )
     private List collectProjects( List files,
                                   ArtifactRepository localRepository,
                                   boolean recursive,
-                                  Settings settings,
                                   ProfileManager globalProfileManager,
                                   boolean isRoot )
         throws ArtifactResolutionException, ProjectBuildingException, ProfileActivationException,
@@ -425,7 +423,6 @@ private List collectProjects( List files,
                         moduleFiles,
                         localRepository,
                         recursive,
-                        settings,
                         globalProfileManager,
                         false );
                 projects.addAll( collectedProjects );

File: maven-core/src/main/java/org/apache/maven/DefaultMaven.java
Patch:
@@ -48,7 +48,6 @@
 import org.apache.maven.project.ProjectBuildingException;
 import org.apache.maven.reactor.MavenExecutionException;
 import org.apache.maven.settings.Settings;
-import org.apache.maven.usability.diagnostics.ErrorDiagnostics;
 import org.codehaus.plexus.PlexusConstants;
 import org.codehaus.plexus.PlexusContainer;
 import org.codehaus.plexus.context.Context;
@@ -90,8 +89,6 @@ public class DefaultMaven
 
     protected PlexusContainer container;
 
-    protected ErrorDiagnostics errorDiagnostics;
-
     protected RuntimeInformation runtimeInformation;
 
     private BuildExtensionScanner buildExtensionScanner;

File: maven-core/src/main/java/org/apache/maven/plugin/PluginParameterException.java
Patch:
@@ -94,7 +94,7 @@ private static void decomposeParameterIntoUserInstructions( MojoDescriptor mojo,
                 messageBuffer.append( "\n\n-OR-\n\n" );
             }
 
-            addParameterUsageInfo( expression, messageBuffer );
+            //addParameterUsageInfo( expression, messageBuffer );
         }
     }
 

File: maven-embedder/src/main/java/org/apache/maven/embedder/execution/DefaultMavenExecutionRequestPopulator.java
Patch:
@@ -36,7 +36,6 @@
 import org.apache.maven.settings.Proxy;
 import org.apache.maven.settings.Server;
 import org.apache.maven.settings.Settings;
-import org.apache.maven.usability.SystemWarnings;
 import org.apache.maven.wagon.repository.RepositoryPermissions;
 import org.codehaus.plexus.PlexusConstants;
 import org.codehaus.plexus.PlexusContainer;
@@ -125,7 +124,7 @@ else if ( request.isNoSnapshotUpdates() )
 
         if ( request.isOffline() )
         {
-            getLogger().info( SystemWarnings.getOfflineWarning() );
+            getLogger().info( "You are working in offline mode." );
 
             wagonManager.setOnline( false );
         }

File: maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionResult.java
Patch:
@@ -78,14 +78,16 @@ public List getExceptions()
         return exceptions;
     }
 
-    public void addException( Throwable t )
+    public MavenExecutionResult addException( Throwable t )
     {
         if ( exceptions == null )
         {
             exceptions = new ArrayList();
         }
 
         exceptions.add( t );
+
+        return this;
     }
 
     public boolean hasExceptions()

File: maven-core/src/main/java/org/apache/maven/execution/MavenExecutionResult.java
Patch:
@@ -48,7 +48,7 @@ public interface MavenExecutionResult
     // - xmlpull parser exception
     List getExceptions();
 
-    void addException( Throwable t );
+    MavenExecutionResult addException( Throwable t );
 
     boolean hasExceptions();
 }

File: maven-embedder/src/test/java/org/apache/maven/cli/BatchModeDownloadMonitorTest.java
Patch:
@@ -31,8 +31,6 @@ public class BatchModeDownloadMonitorTest
     protected void setUp()
         throws Exception
     {
-        super.setMonitor( new BatchModeDownloadMonitor() );
-
-        super.setUp();
+        monitor = new BatchModeDownloadMonitor();
     }
 }

File: maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java
Patch:
@@ -58,7 +58,7 @@ public class DefaultMavenExecutionRequest
 
     private boolean usePluginUpdateOverride;
 
-    private boolean isProjectPresent;
+    private boolean isProjectPresent = true;
 
     // ----------------------------------------------------------------------------
     // Request

File: maven-project/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java
Patch:
@@ -263,7 +263,7 @@ private List aggregateRepositoryLists( List remoteRepositories, List remoteArtif
         {
             try
             {
-                superProject = mavenProjectBuilder.buildStandaloneSuperProject( null );
+                superProject = mavenProjectBuilder.buildStandaloneSuperProject();
             }
             catch ( ProjectBuildingException e )
             {

File: maven-embedder/src/main/java/org/apache/maven/embedder/ConfigurationValidationResult.java
Patch:
@@ -32,13 +32,13 @@ public interface ConfigurationValidationResult
     boolean isValid();
 
     /**
-     * Parsed user settings, or null if there's any parse error, that can be retrieved through
+     * Parsed user settings. If there's any parse error, it can be retrieved through
      * {@link #getUserSettingsException()}
      */
     Settings getUserSettings();
 
     /**
-     * Parsed global settings, or null if there's any parse error, that can be retrieved through
+     * Parsed global settings. If there's any parse error, it can be retrieved through
      * {@link #getGlobalSettingsException()}
      */
     Settings getGlobalSettings();

File: maven-embedder/src/test/java/org/apache/maven/embedder/ValidateConfigurationTest.java
Patch:
@@ -60,7 +60,7 @@ public void testConfigurationOnlyGlobalSettingsAreActiveAndItIsValid()
         File global = new File( getBasedir(), "src/test/resources/settings/valid-settings.xml" );
 
         Configuration configuration = new DefaultConfiguration()
-            .setUserSettingsFile( global );
+            .setGlobalSettingsFile( global );
 
         ConfigurationValidationResult result = MavenEmbedder.validateConfiguration( configuration );
 

File: maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -332,7 +332,7 @@ public MavenProject buildWithDependencies( File projectDescriptor,
                                                TransferListener transferListener )
         throws ProjectBuildingException, ArtifactResolutionException, ArtifactNotFoundException
     {
-        MavenProject project = build( projectDescriptor, localRepository, profileManager );
+        MavenProject project = build( projectDescriptor, localRepository, profileManager, false );
 
         // ----------------------------------------------------------------------
         // Typically when the project builder is being used from maven proper

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/IntegrationTestSuite.java
Patch:
@@ -177,6 +177,7 @@ public static Test suite() throws VerificationException
         // suite.addTestSuite( MavenIT0122ReactorDependencyResolutionTest.class ); -- MNG-3023
         // suite.addTestSuite( MavenIT0123SnapshotRangeRepositoryTest.class ); -- MNG-2994
         // suite.addTestSuite( MavenIT0124PomExtensionComponentOverrideTest.class ); -- MNG-2771
+        suite.addTestSuite( MavenIT0126TestJarDependency.class ); // MJAR-75
         return suite;
     }
 }

File: maven-core/src/main/java/org/apache/maven/extension/DefaultBuildExtensionScanner.java
Patch:
@@ -330,7 +330,7 @@ private ModelLineage buildModelLineage( File pom, ArtifactRepository localReposi
             getLogger().debug( "Building model-lineage for: " + pom + " to pre-scan for extensions." );
 
             lineage = modelLineageBuilder.buildModelLineage( pom, localRepository, originalRemoteRepositories,
-                                                             globalProfileManager );
+                                                             globalProfileManager, false );
         }
         catch ( ProjectBuildingException e )
         {

File: maven-core/src/main/java/org/apache/maven/plugin/PluginParameterException.java
Patch:
@@ -71,8 +71,8 @@ private static void decomposeParameterIntoUserInstructions( MojoDescriptor mojo,
 
         if ( param.isEditable() )
         {
-            messageBuffer.append( "inside the definition for plugin: \'" + mojo.getPluginDescriptor().getArtifactId() +
-                "\'specify the following:\n\n<configuration>\n  ...\n  <" + param.getName() + ">VALUE</" +
+            messageBuffer.append( "Inside the definition for plugin \'" + mojo.getPluginDescriptor().getArtifactId() +
+                "\' specify the following:\n\n<configuration>\n  ...\n  <" + param.getName() + ">VALUE</" +
                 param.getName() + ">\n</configuration>" );
 
             String alias = param.getAlias();

File: its/maven-integration-test-sample/src/test/java/org/apache/maven/itSample/MavenITmngXXXXDescriptionOfProblemTest.java
Patch:
@@ -1,9 +1,10 @@
-package org.apache.maven.integrationtests;
+package org.apache.maven.itSample;
 
 import java.io.File;
-import java.util.List;
 import java.util.ArrayList;
+import java.util.List;
 
+import org.apache.maven.integrationtests.AbstractMavenIntegrationTestCase;
 import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 

File: maven-core/src/main/java/org/apache/maven/lifecycle/binding/DefaultLifecycleBindingManager.java
Patch:
@@ -337,8 +337,8 @@ public LifecycleBindings getProjectCustomBindings( final MavenProject project )
 
                                             message.append( "\n\nNo lifecycle phase binding can be found for goal: " + goal );
                                             message.append( ",\nspecified as a part of the execution: " + execution.getId() );
-                                            message.append( "in plugin: " );
-                                            message.append( pluginDescriptor.getPluginLookupKey() );
+                                            message.append( " in plugin: " );
+                                            message.append( plugin.getKey() );
                                             message.append( "\n\nThis plugin could not be resolved, so use of the default lifecycle phase binding " )
                                                     .append( "\n(if there is one) is impossible." );
                                             message.append( "\n\nPlease ensure that the plugin: " )

File: maven-artifact/src/test/java/org/apache/maven/artifact/resolver/DefaultArtifactCollectorTest.java
Patch:
@@ -671,9 +671,9 @@ public void testTestScopeNotTransitive()
     public void testSnapshotNotIncluded()
         throws ArtifactResolutionException, InvalidVersionSpecificationException
     {
-        ArtifactSpec a = createArtifact( "a", "1.0" );
+        ArtifactSpec a = createArtifactSpec( "a", "1.0" );
         a.addDependency( "b", "[1.0,)" );
-        createArtifact( "b", "1.0-SNAPSHOT" );
+        createArtifactSpec( "b", "1.0-SNAPSHOT" );
 
         try
         {

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenIT0123SnapshotRangeRepositoryTest.java
Patch:
@@ -12,6 +12,7 @@ public class MavenIT0123SnapshotRangeRepositoryTest
      * Test that snapshot repositories are checked for ranges with snapshot boundaries.
      * 
      * @throws Exception
+     * @see <a href="http://jira.codehaus.org/browse/MNG-2994">MNG-2994</a>
      */
     public void testit0123() throws Exception
     {

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenIT0124PomExtensionComponentOverrideTest.java
Patch:
@@ -12,6 +12,7 @@ public class MavenIT0124PomExtensionComponentOverrideTest
      * Test that ensures the POM extensions can override default component implementations.
      * 
      * @throws Exception
+     * @see <a href="http://jira.codehaus.org/browse/MNG-2771">MNG-2771</a>
      */
     public void testit0124() throws Exception
     {

File: its/core-integration-test-sample/src/test/java/org/apache/maven/integrationtests/MavenIT0111PluginsThatRequireAResourceFromAnExtensionTest.java
Patch:
@@ -7,6 +7,7 @@
 import org.apache.maven.it.Verifier;
 import org.apache.maven.it.util.ResourceExtractor;
 
+//!! public class ${className}
 public class MavenIT0111PluginsThatRequireAResourceFromAnExtensionTest
     extends AbstractMavenIntegrationTestCase
 {

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/IntegrationTestSuite.java
Patch:
@@ -176,6 +176,7 @@ public static Test suite() throws VerificationException
         //suite.addTestSuite( MavenIT0121TransitiveDepManVersion.class ); -- MNG-3038
         // suite.addTestSuite( MavenIT0122ReactorDependencyResolutionTest.class ); -- MNG-3023
         // suite.addTestSuite( MavenIT0123SnapshotRangeRepositoryTest.class ); -- MNG-2994
+        // suite.addTestSuite( MavenIT0124PomExtensionComponentOverrideTest.class ); -- MNG-2771
         return suite;
     }
 }

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Patch:
@@ -418,7 +418,7 @@ private void addPlugin( Plugin plugin, Plugin projectPlugin, Artifact pluginArti
             // adding for MNG-3012 to try to work around problems with Xpp3Dom (from plexus-utils)
             // spawning a ClassCastException when a mojo calls plugin.getConfiguration() from maven-model...
             componentRealm.importFrom( componentRealm.getParentRealm().getId(), Xpp3Dom.class.getName() );
-            componentRealm.importFrom( componentRealm.getParentRealm().getId(), "plexus.core", "org.codehaus.plexus.util.xml.pull" );            
+            componentRealm.importFrom( componentRealm.getParentRealm().getId(), "org.codehaus.plexus.util.xml.pull" );            
         }
         catch ( PlexusContainerException e )
         {

File: its/core-integration-tests/src/test/resources/it0048/src/test/java/org/apache/maven/it0048/PersonTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import junit.framework.TestCase;
 import java.net.URL;
+import java.net.URI;
 import java.net.URISyntaxException;
 import java.io.File;
 import java.io.FileWriter;
@@ -18,7 +19,7 @@ public void testPerson() throws IOException, URISyntaxException
 
         URL resource = cloader.getResource( path );
 
-        File resourceFile = new File( resource.toURI() );
+        File resourceFile = new File( new URI( resource.toString() ) );
 
         String dirPath = resourceFile.getAbsolutePath();
 

File: maven-project/src/test/java/org/apache/maven/project/AbstractMavenProjectTestCase.java
Patch:
@@ -80,7 +80,7 @@ protected File getFileForClasspathResource( String resource )
             throw new FileNotFoundException( "Unable to find: " + resource );
         }
 
-        return new File( new URI( resourceUrl.getPath() ) );
+        return new File( new URI( resourceUrl.toString() ) );
     }
 
     protected ArtifactRepository getLocalRepository()

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/IntegrationTestSuite.java
Patch:
@@ -154,8 +154,10 @@ public static Test suite() throws VerificationException
         suite.addTestSuite( MavenIT0112ExtensionsThatDragDependencies.class );
         suite.addTestSuite( MavenIT0113ServerAuthzAvailableToWagonMgrInPlugin.class );
         suite.addTestSuite( MavenIT0114ExtensionThatProvidesResources.class );
-        suite.addTestSuite( MavenIT0115CustomArtifactHandlerAndCustomLifecycleTest.class );
         suite.addTestSuite( MavenIT0118AttachedArtifactsInReactor.class );
+
+        // 2.0.7 only (TODO: detect what version is used before running them)
+        suite.addTestSuite( MavenIT0115CustomArtifactHandlerAndCustomLifecycleTest.class );
         suite.addTestSuite( MavenIT0119PluginPrefixOrder.class );
         suite.addTestSuite( MavenIT0120EjbClientDependency.class );
         // not fixed yet

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/IntegrationTestSuite.java
Patch:
@@ -159,7 +159,7 @@ public static Test suite() throws VerificationException
         suite.addTestSuite( MavenIT0119PluginPrefixOrder.class );
         suite.addTestSuite( MavenIT0120EjbClientDependency.class );
         // not fixed yet
-        //suite.addTestSuite( MavenIT0121TransitiveDepManVersion.class ); -- MNG-2998
+        //suite.addTestSuite( MavenIT0121TransitiveDepManVersion.class ); -- MNG-3038
         // suite.addTestSuite( MavenIT0122ReactorDependencyResolutionTest.class ); -- MNG-3023
         return suite;
     }

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/IntegrationTestSuite.java
Patch:
@@ -159,8 +159,8 @@ public static Test suite() throws VerificationException
         suite.addTestSuite( MavenIT0119PluginPrefixOrder.class );
         suite.addTestSuite( MavenIT0120EjbClientDependency.class );
         // not fixed yet
-        //suite.addTestSuite( MavenIT0120EjbClientDependency.class );
-        //suite.addTestSuite( MavenIT0121TransitiveDepManVersion.class );
+        //suite.addTestSuite( MavenIT0121TransitiveDepManVersion.class ); -- MNG-2998
+        // suite.addTestSuite( MavenIT0122ReactorDependencyResolutionTest.class ); -- MNG-3023
         return suite;
     }
 }

File: maven-core/src/test/java/org/apache/maven/plugin/PluginParameterExpressionEvaluatorTest.java
Patch:
@@ -57,6 +57,8 @@
 public class PluginParameterExpressionEvaluatorTest
     extends PlexusTestCase
 {
+    private static final String FS = System.getProperty( "file.separator" );
+
     public void testValueExtractionWithAPomValueContainingAPath()
         throws Exception
     {
@@ -254,7 +256,7 @@ public void testTwoExpressions()
         ExpressionEvaluator expressionEvaluator =
             createExpressionEvaluator( new MavenProject( model ), null, new Properties() );
 
-        Object value = expressionEvaluator.evaluate( "${project.build.directory}/${project.build.finalName}" );
+        Object value = expressionEvaluator.evaluate( "${project.build.directory}" + FS + "${project.build.finalName}" );
 
         assertEquals( new File( "expected-directory/expected-finalName" ).getCanonicalPath(), value );
     }

File: maven-core/src/main/java/org/apache/maven/execution/MavenExecutionRequest.java
Patch:
@@ -89,6 +89,7 @@ public interface MavenExecutionRequest
 
     // Properties
     MavenExecutionRequest setProperties( Properties properties );
+    MavenExecutionRequest setProperty( String key, String value );
     Properties getProperties();
 
     // Reactor

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Patch:
@@ -37,7 +37,6 @@
 import org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;
 import org.apache.maven.artifact.versioning.VersionRange;
 import org.apache.maven.context.BuildContextManager;
-import org.apache.maven.core.monitor.logging.DefaultLog;
 import org.apache.maven.execution.MavenSession;
 import org.apache.maven.execution.RuntimeInformation;
 import org.apache.maven.lifecycle.LifecycleExecutionContext;
@@ -46,6 +45,7 @@
 import org.apache.maven.model.ReportPlugin;
 import org.apache.maven.monitor.event.EventDispatcher;
 import org.apache.maven.monitor.event.MavenEvents;
+import org.apache.maven.monitor.logging.DefaultLog;
 import org.apache.maven.plugin.descriptor.MojoDescriptor;
 import org.apache.maven.plugin.descriptor.Parameter;
 import org.apache.maven.plugin.descriptor.PluginDescriptor;

File: maven-embedder/src/main/java/org/apache/maven/embedder/MavenEmbedder.java
Patch:
@@ -20,6 +20,7 @@
  */
 
 import org.apache.maven.Maven;
+import org.apache.maven.SettingsConfigurationException;
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.factory.ArtifactFactory;
 import org.apache.maven.artifact.handler.ArtifactHandler;
@@ -59,7 +60,6 @@
 import org.apache.maven.project.ProjectBuildingException;
 import org.apache.maven.settings.MavenSettingsBuilder;
 import org.apache.maven.settings.Settings;
-import org.apache.maven.settings.SettingsConfigurationException;
 import org.apache.maven.settings.io.jdom.SettingsJDOMWriter;
 import org.apache.maven.settings.io.xpp3.SettingsXpp3Reader;
 import org.apache.maven.settings.validation.DefaultSettingsValidator;

File: maven-embedder/src/main/java/org/apache/maven/embedder/execution/DefaultMavenExecutionRequestDefaultsPopulator.java
Patch:
@@ -19,21 +19,21 @@
  * under the License.
  */
 
+import org.apache.maven.SettingsConfigurationException;
 import org.apache.maven.wagon.repository.RepositoryPermissions;
 import org.apache.maven.artifact.manager.WagonManager;
 import org.apache.maven.artifact.repository.ArtifactRepositoryFactory;
 import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;
 import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;
-import org.apache.maven.core.monitor.event.DefaultEventMonitor;
 import org.apache.maven.embedder.MavenEmbedder;
 import org.apache.maven.embedder.MavenEmbedderException;
 import org.apache.maven.execution.MavenExecutionRequest;
+import org.apache.maven.monitor.event.DefaultEventMonitor;
 import org.apache.maven.plugin.Mojo;
 import org.apache.maven.settings.Mirror;
 import org.apache.maven.settings.Proxy;
 import org.apache.maven.settings.Server;
 import org.apache.maven.settings.Settings;
-import org.apache.maven.settings.SettingsConfigurationException;
 import org.apache.maven.usability.SystemWarnings;
 import org.codehaus.plexus.PlexusConstants;
 import org.codehaus.plexus.PlexusContainer;

File: maven-embedder/src/test/java/org/apache/maven/embedder/MavenEmbedderTest.java
Patch:
@@ -20,6 +20,7 @@
  */
 
 import junit.framework.TestCase;
+import org.apache.maven.SettingsConfigurationException;
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.handler.ArtifactHandler;
 import org.apache.maven.execution.DefaultMavenExecutionRequest;
@@ -33,7 +34,6 @@
 import org.apache.maven.settings.Profile;
 import org.apache.maven.settings.Repository;
 import org.apache.maven.settings.Settings;
-import org.apache.maven.settings.SettingsConfigurationException;
 import org.apache.maven.settings.io.xpp3.SettingsXpp3Reader;
 import org.apache.maven.settings.io.xpp3.SettingsXpp3Writer;
 import org.codehaus.plexus.util.FileUtils;

File: maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -19,6 +19,7 @@
  * under the License.
  */
 
+import org.apache.maven.MavenTools;
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.ArtifactStatus;
 import org.apache.maven.artifact.ArtifactUtils;

File: maven-project/src/main/java/org/apache/maven/project/build/model/DefaultModelLineageBuilder.java
Patch:
@@ -19,6 +19,7 @@
  * under the License.
  */
 
+import org.apache.maven.MavenTools;
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.InvalidRepositoryException;
 import org.apache.maven.artifact.factory.ArtifactFactory;
@@ -31,7 +32,6 @@
 import org.apache.maven.model.Parent;
 import org.apache.maven.model.io.xpp3.MavenXpp3Reader;
 import org.apache.maven.profiles.ProfileManager;
-import org.apache.maven.project.MavenTools;
 import org.apache.maven.project.ProjectBuildingException;
 import org.apache.maven.project.build.ProjectBuildCache;
 import org.apache.maven.project.build.profile.ProfileAdvisor;

File: maven-project/src/main/java/org/apache/maven/project/build/profile/DefaultProfileAdvisor.java
Patch:
@@ -19,6 +19,7 @@
  * under the License.
  */
 
+import org.apache.maven.MavenTools;
 import org.apache.maven.artifact.ArtifactUtils;
 import org.apache.maven.artifact.InvalidRepositoryException;
 import org.apache.maven.artifact.repository.ArtifactRepository;
@@ -31,7 +32,6 @@
 import org.apache.maven.profiles.ProfilesConversionUtils;
 import org.apache.maven.profiles.ProfilesRoot;
 import org.apache.maven.profiles.activation.ProfileActivationException;
-import org.apache.maven.project.MavenTools;
 import org.apache.maven.project.ProjectBuildingException;
 import org.apache.maven.project.injection.ProfileInjector;
 import org.codehaus.plexus.PlexusConstants;

File: maven-core/src/test/java/org/apache/maven/plugin/PluginParameterExpressionEvaluatorTest.java
Patch:
@@ -256,7 +256,7 @@ public void testTwoExpressions()
 
         Object value = expressionEvaluator.evaluate( "${project.build.directory}/${project.build.finalName}" );
 
-        assertEquals( "expected-directory/expected-finalName", value );
+        assertEquals( new File( "expected-directory/expected-finalName" ).getCanonicalPath(), value );
     }
 
     public void testShouldExtractPluginArtifacts()

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenIT0119PluginPrefixOrder.java
Patch:
@@ -37,7 +37,7 @@ public void testit0119()
         
         //use my custom settings upon invocation.
         ArrayList cli = new ArrayList();
-        cli.add("-s "+testDir.getAbsolutePath()+"/settings.xml");
+        cli.add("-s '" +testDir.getAbsolutePath()+"/settings.xml'");
         verifier.setCliOptions( cli );
         verifier.executeGoal( "it0119:custom" );
         verifier.verifyErrorFreeLog();

File: its/core-integration-tests/src/test/resources/it0048/src/test/java/org/apache/maven/it0048/PersonTest.java
Patch:
@@ -2,22 +2,23 @@
 
 import junit.framework.TestCase;
 import java.net.URL;
+import java.net.URISyntaxException;
 import java.io.File;
 import java.io.FileWriter;
 import java.io.IOException;
 
 public class PersonTest
     extends TestCase
 {
-    public void testPerson() throws IOException
+    public void testPerson() throws IOException, URISyntaxException
     {
         ClassLoader cloader = getClass().getClassLoader();
 
         String path = getClass().getName().replace( '.', '/' ) + ".class";
 
         URL resource = cloader.getResource( path );
 
-        File resourceFile = new File( resource.getPath() );
+        File resourceFile = new File( resource.toURI() );
 
         String dirPath = resourceFile.getAbsolutePath();
 

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenIT0120EjbClientDependency.java
Patch:
@@ -30,7 +30,7 @@ public class MavenIT0120EjbClientDependency
     public void testit0119()
         throws Exception
     {
-        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/it0119-ejbClientDependency" );
+        File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/it0120-ejbClientDependency" );
 
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
         verifier.deleteArtifact( "org.apache.maven.its.it0119", "parent", "1.0-SNAPSHOT", "pom" );

File: maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -414,7 +414,7 @@ private Map createManagedVersionMap( String projectId, DependencyManagement depe
 
             if ( getLogger().isDebugEnabled() )
             {
-                getLogger().debug( "Adding managed depedendencies for " + projectId );
+                getLogger().debug( "Adding managed dependencies for " + projectId );
             }
 
             for ( Iterator i = dependencyManagement.getDependencies().iterator(); i.hasNext(); )

File: maven-project/src/main/java/org/apache/maven/project/MavenProject.java
Patch:
@@ -1663,7 +1663,9 @@ public Artifact replaceWithActiveArtifact( Artifact pluginArtifact )
                             at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:115)
                             at org.apache.maven.cli.MavenCli.main(MavenCli.java:256)
                         */
-                        return ArtifactUtils.copyArtifact(attached);
+                        Artifact resultArtifact=ArtifactUtils.copyArtifact(attached);
+                        resultArtifact.setScope(pluginArtifact.getScope());
+                        return resultArtifact;
                     }
                 }
             }

File: maven-core/src/main/java/org/apache/maven/lifecycle/binding/LifecycleBindingManager.java
Patch:
@@ -12,9 +12,9 @@
  * Responsible for the gross construction of LifecycleBindings, or mappings of MojoBinding instances to different parts
  * of the three lifecycles: clean, build, and site. Also, handles transcribing these LifecycleBindings instances into
  * lists of MojoBinding's, which can be consumed by the LifecycleExecutor.
- * 
+ *
  * @author jdcasey
- * 
+ *
  */
 public interface LifecycleBindingManager
 {
@@ -45,7 +45,7 @@ LifecycleBindings getProjectCustomBindings( MavenProject project )
      * plugin. Inject mojo configuration from the POM into all appropriate MojoBinding instances.
      */
     LifecycleBindings getPluginLifecycleOverlay( PluginDescriptor pluginDescriptor, String lifecycleId,
-                                                 MavenProject project )
+                                                 MavenProject project, boolean includeReportConfig )
         throws LifecycleLoaderException, LifecycleSpecificationException;
 
     /**

File: maven-core/src/main/java/org/apache/maven/lifecycle/binding/MojoBindingFactory.java
Patch:
@@ -9,7 +9,7 @@
 /**
  * Responsible for constructing or parsing MojoBinding instances from one of several sources, potentially
  * using the {@link PluginLoader} to resolve any plugin prefixes first.
- * 
+ *
  * @author jdcasey
  *
  */
@@ -23,14 +23,14 @@ public interface MojoBindingFactory
      * If a plugin-prefix is allowed and used, resolve the prefix and use the resulting PluginDescriptor
      * to set groupId and artifactId on the MojoBinding instance.
      */
-    MojoBinding parseMojoBinding( String bindingSpec, MavenProject project, boolean allowPrefixReference )
+    MojoBinding parseMojoBinding( String bindingSpec, MavenProject project, boolean allowPrefixReference, boolean includeReportConfig )
         throws LifecycleSpecificationException, LifecycleLoaderException;
 
     /**
      * Create a new MojoBinding instance with the specified information, and inject POM configurations
      * appropriate to that mojo before returning it.
      */
-    MojoBinding createMojoBinding( String groupId, String artifactId, String version, String goal, MavenProject project );
+    MojoBinding createMojoBinding( String groupId, String artifactId, String version, String goal, MavenProject project, boolean includeReportConfig );
 
     /**
      * Simplified version of {@link MojoBindingFactory#parseMojoBinding(String, MavenProject, boolean)}

File: maven-core/src/main/java/org/apache/maven/lifecycle/statemgmt/ResolveLateBoundPluginMojo.java
Patch:
@@ -28,13 +28,15 @@ public class ResolveLateBoundPluginMojo extends AbstractMojo
 
     private String goal;
 
+    private boolean includeReportConfig = false;
+
     private MavenProject project;
 
     private MojoBindingFactory bindingFactory;
 
     public void execute() throws MojoExecutionException, MojoFailureException
     {
-        MojoBinding binding = bindingFactory.createMojoBinding( groupId, artifactId, version, artifactId, project );
+        MojoBinding binding = bindingFactory.createMojoBinding( groupId, artifactId, version, artifactId, project, includeReportConfig );
         try
         {
             PluginDescriptor descriptor = pluginLoader.loadPlugin( binding, project );

File: its/core-integration-tests/src/test/resources/it0120-ejbClientDependency/client/src/main/java/org/apache/maven/its/it0120/MyClient.java
Patch:
@@ -19,7 +19,7 @@
  * under the License.
  */
 
-import org.apache.maven.its.it0119.Component;
+import org.apache.maven.its.it0120.Component;
 
 public class MyClient
 {

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Patch:
@@ -432,7 +432,6 @@ private void addPlugin( Plugin plugin, Plugin projectPlugin, Artifact pluginArti
 
             // adding for MNG-3012 to try to work around problems with Xpp3Dom (from plexus-utils)
             // spawning a ClassCastException when a mojo calls plugin.getConfiguration() from maven-model...
-            getLogger().info( "\n\n\n\n***** Adding import for " + Xpp3Dom.class.getName() + "\nPlugin: " + projectPlugin.getKey() + " *****\n\n\n\n" );
             componentRealm.importFrom( componentRealm.getParentRealm().getId(), Xpp3Dom.class.getName() );
 
 //            StringBuffer debugMessage = new StringBuffer();

File: maven-core/src/main/java/org/apache/maven/lifecycle/plan/BuildPlan.java
Patch:
@@ -155,7 +155,8 @@ public List renderExecutionPlan( final Stack executionStack )
                 List newRendered = new ArrayList( bindingsToAdd );
 
                 // if we've already executed part of the lifecycle, just continue with the new bindings.
-                if ( ( renderedLifecycleMojos != null ) && ( renderedLifecycleMojos.size() < bindingsToAdd.size() ) )
+                if ( ( renderedLifecycleMojos != null ) && ( renderedLifecycleMojos.size() < bindingsToAdd.size() )
+                     && bindingsToAdd.containsAll( renderedLifecycleMojos ) )
                 {
                     bindingsToAdd = bindingsToAdd.subList( renderedLifecycleMojos.size(), bindingsToAdd.size() );
                 }

File: maven-core/src/main/java/org/apache/maven/lifecycle/plan/DefaultBuildPlanner.java
Patch:
@@ -71,6 +71,7 @@ private void initializeDirectInvocations( final BuildPlan plan, final MavenProje
         throws LifecycleSpecificationException, LifecycleLoaderException
     {
         List tasks = plan.getTasks();
+
         for ( Iterator it = tasks.iterator(); it.hasNext(); )
         {
             String task = (String) it.next();

File: maven-core/src/main/java/org/apache/maven/lifecycle/plan/BuildPlan.java
Patch:
@@ -256,14 +256,14 @@ else if ( fork instanceof List )
                 {
                     bindings.add( StateManagementUtils.createStartForkedExecutionMojoBinding() );
                     bindings.addAll( forkedBindings );
-                    bindings.add( StateManagementUtils.createClearForkedExecutionMojoBinding() );
+                    bindings.add( StateManagementUtils.createEndForkedExecutionMojoBinding() );
                 }
 
                 bindings.add( mojoBinding );
 
                 if ( !forkedBindings.isEmpty() )
                 {
-                    bindings.add( StateManagementUtils.createEndForkedExecutionMojoBinding() );
+                    bindings.add( StateManagementUtils.createClearForkedExecutionMojoBinding() );
                 }
             }
             else

File: maven-core/src/test/java/org/apache/maven/lifecycle/plan/BuildPlanTest.java
Patch:
@@ -45,7 +45,7 @@ public void testRender_OneDirectInvocationWithForkedPhase_NoLifecycleOverlay()
 
         check.add( mb );
 
-        check.add( StateManagementUtils.createClearForkedExecutionMojoBinding() );
+        check.add( StateManagementUtils.createEndForkedExecutionMojoBinding() );
 
         binding.getGenerateSources().addBinding( mb );
 
@@ -62,7 +62,7 @@ public void testRender_OneDirectInvocationWithForkedPhase_NoLifecycleOverlay()
 
         check.add( eclipseBinding );
 
-        check.add( StateManagementUtils.createEndForkedExecutionMojoBinding() );
+        check.add( StateManagementUtils.createClearForkedExecutionMojoBinding() );
 
         BuildPlan plan = new BuildPlan( new LifecycleBindings(), tasks );
 

File: maven-embedder/src/test/java/org/apache/maven/embedder/MavenEmbedderBehaviorTest.java
Patch:
@@ -44,7 +44,9 @@ public void testThatTheLocalRepositoryIsTakenFromGlobalSettingsWhenUserSettingsA
 
         MavenEmbedder maven = new MavenEmbedder( configuration );
 
-        assertEquals( (new File("/global/maven/local-repository")).getAbsolutePath(), maven.getLocalRepository().getBasedir() );
+        String expectedPath = ( new File( "/global/maven/local-repository" ) ).getCanonicalPath();
+        String actualPath = maven.getLocalRepository().getBasedir();
+        assertEquals( expectedPath, actualPath );
 
         maven.stop();
     }

File: maven-artifact/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java
Patch:
@@ -298,12 +298,12 @@ public void getArtifact( Artifact artifact, List remoteRepositories )
                 // because we want to cycle through them all before squawking.
 
                 getLogger().debug( "Unable to get resource '" + artifact.getId() + "' from repository " +
-                    repository.getId() + " (" + repository.getUrl() + ")" );
+                    repository.getId() + " (" + repository.getUrl() + ")", e );
             }
             catch ( TransferFailedException e )
             {
                 getLogger().debug( "Unable to get resource '" + artifact.getId() + "' from repository " +
-                    repository.getId() + " (" + repository.getUrl() + ")" );
+                    repository.getId() + " (" + repository.getUrl() + ")", e );
             }
         }
 

File: maven-core/src/main/java/org/apache/maven/DefaultArtifactFilterManager.java
Patch:
@@ -54,7 +54,6 @@ public class DefaultArtifactFilterManager implements ArtifactFilterManager
         artifacts.add( "maven-plugin-api" );
         artifacts.add( "maven-plugin-descriptor" );
         artifacts.add( "maven-plugin-parameter-documenter" );
-        artifacts.add( "maven-plugin-registry" );
         artifacts.add( "maven-profile" );
         artifacts.add( "maven-project" );
         artifacts.add( "maven-reporting-api" );
@@ -63,7 +62,6 @@ public class DefaultArtifactFilterManager implements ArtifactFilterManager
         artifacts.add( "plexus-container-default" );
         artifacts.add( "plexus-component-api" );
         artifacts.add( "plexus-interactivity-api" );
-        artifacts.add( "plexus-utils" );
         artifacts.add( "wagon-provider-api" );
         artifacts.add( "wagon-file" );
         artifacts.add( "wagon-http-lightweight" );

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/IntegrationTestSuite.java
Patch:
@@ -21,8 +21,7 @@ public static Test suite() throws VerificationException
         System.setProperty( "maven.version", mavenVersion );
 
         TestSuite suite = new TestSuite();
-        suite.addTestSuite( MavenIT0119PluginPrefixOrder.class );
-        /*suite.addTestSuite( MavenIT0000Test.class );
+        suite.addTestSuite( MavenIT0000Test.class );
         suite.addTestSuite( MavenIT0001Test.class );
         suite.addTestSuite( MavenIT0002Test.class );
         suite.addTestSuite( MavenIT0003Test.class );
@@ -136,7 +135,8 @@ public static Test suite() throws VerificationException
         suite.addTestSuite( MavenIT0112ExtensionsThatDragDependencies.class );
         suite.addTestSuite( MavenIT0113ServerAuthzAvailableToWagonMgrInPlugin.class );
         suite.addTestSuite( MavenIT0114ExtensionThatProvidesResources.class );
-        suite.addTestSuite( MavenIT0118AttachedArtifactsInReactor.class );*/
+        suite.addTestSuite( MavenIT0118AttachedArtifactsInReactor.class );
+        suite.addTestSuite( MavenIT0119PluginPrefixOrder.class );
         return suite;
     }
 }

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/IntegrationTestSuite.java
Patch:
@@ -21,7 +21,8 @@ public static Test suite() throws VerificationException
         System.setProperty( "maven.version", mavenVersion );
 
         TestSuite suite = new TestSuite();
-        suite.addTestSuite( MavenIT0000Test.class );
+        suite.addTestSuite( MavenIT0119PluginPrefixOrder.class );
+        /*suite.addTestSuite( MavenIT0000Test.class );
         suite.addTestSuite( MavenIT0001Test.class );
         suite.addTestSuite( MavenIT0002Test.class );
         suite.addTestSuite( MavenIT0003Test.class );
@@ -135,7 +136,7 @@ public static Test suite() throws VerificationException
         suite.addTestSuite( MavenIT0112ExtensionsThatDragDependencies.class );
         suite.addTestSuite( MavenIT0113ServerAuthzAvailableToWagonMgrInPlugin.class );
         suite.addTestSuite( MavenIT0114ExtensionThatProvidesResources.class );
-        suite.addTestSuite( MavenIT0118AttachedArtifactsInReactor.class );
+        suite.addTestSuite( MavenIT0118AttachedArtifactsInReactor.class );*/
         return suite;
     }
 }

File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -174,7 +174,8 @@ else if ( commandLine.hasOption( CLIManager.SUPPRESS_PLUGIN_UPDATES ) )
 
             boolean recursive = true;
 
-            String reactorFailureBehaviour = null;
+            // this is the default behavior.
+            String reactorFailureBehaviour = MavenExecutionRequest.REACTOR_FAIL_FAST;
 
             if ( commandLine.hasOption( CLIManager.NON_RECURSIVE ) )
             {

File: maven-artifact-manager/src/main/java/org/apache/maven/artifact/manager/WagonManager.java
Patch:
@@ -42,7 +42,6 @@
  *
  * @author <a href="michal.maczka@dimatics.com">Michal Maczka </a>
  * @version $Id$
- * @deprecated in favor of {@link ArtifactManager} and {@link org.apache.maven.wagon.manager.WagonManager}
  */
 public interface WagonManager
 {
@@ -70,7 +69,7 @@ Wagon getWagon( String protocol )
      * @throws WagonConfigurationException  if the wagon can't be configured for the repository
      */
     Wagon getWagon( Repository repository )
-        throws UnsupportedProtocolException;
+        throws UnsupportedProtocolException, WagonConfigurationException;
 
     void getArtifact( Artifact artifact, List remoteRepositories )
         throws TransferFailedException, ResourceDoesNotExistException;

File: maven-artifact-manager/src/main/java/org/apache/maven/artifact/transform/AbstractVersionTransformation.java
Patch:
@@ -20,6 +20,7 @@
  */
 
 import org.apache.maven.artifact.Artifact;
+import org.apache.maven.artifact.manager.WagonManager;
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.artifact.repository.metadata.ArtifactRepositoryMetadata;
 import org.apache.maven.artifact.repository.metadata.Metadata;
@@ -45,6 +46,8 @@ public abstract class AbstractVersionTransformation
 {
     protected RepositoryMetadataManager repositoryMetadataManager;
 
+    protected WagonManager wagonManager;
+
     protected String resolveVersion( Artifact artifact, ArtifactRepository localRepository, List remoteRepositories )
         throws RepositoryMetadataResolutionException
     {

File: maven-core/src/main/java/org/apache/maven/usability/ArtifactResolverDiagnoser.java
Patch:
@@ -19,7 +19,7 @@
  * under the License.
  */
 
-import org.apache.maven.artifact.manager.ArtifactManager;
+import org.apache.maven.artifact.manager.WagonManager;
 import org.apache.maven.artifact.resolver.ArtifactResolutionException;
 import org.apache.maven.usability.diagnostics.DiagnosisUtils;
 import org.apache.maven.usability.diagnostics.ErrorDiagnoser;
@@ -30,7 +30,7 @@ public class ArtifactResolverDiagnoser
     implements ErrorDiagnoser
 {
 
-    private ArtifactManager artifactManager;
+    private WagonManager wagonManager;
 
     public boolean canDiagnose( Throwable error )
     {
@@ -55,7 +55,7 @@ public String diagnose( Throwable error )
             message.append( "\n\nCaused by I/O exception: " ).append( ioe.getMessage() );
         }
 
-        if ( !artifactManager.isOnline() )
+        if ( !wagonManager.isOnline() )
         {
             message.append( "\n" ).append( SystemWarnings.getOfflineWarning() );
         }

File: maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -407,7 +407,7 @@ private void ensureMetadataSourceIsInitialized()
         {
             try
             {
-                artifactMetadataSource = (ArtifactMetadataSource) container.lookup( ArtifactMetadataSource.ROLE, "maven" );
+                artifactMetadataSource = (ArtifactMetadataSource) container.lookup( ArtifactMetadataSource.ROLE );
             }
             catch ( ComponentLookupException e )
             {

File: maven-project/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java
Patch:
@@ -67,7 +67,7 @@ public class MavenMetadataSource
     extends AbstractLogEnabled
     implements ArtifactMetadataSource
 {
-    public static final String ROLE_HINT = "maven";
+    public static final String ROLE_HINT = "default";
 
     private MavenProjectBuilder mavenProjectBuilder;
 

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Patch:
@@ -1122,7 +1122,7 @@ private void populatePluginFields( Mojo plugin,
             }
             else
             {
-                configurator = (ComponentConfigurator) pluginContainer.lookup( ComponentConfigurator.ROLE, pluginRealm );
+                configurator = (ComponentConfigurator) pluginContainer.lookup( ComponentConfigurator.ROLE, "basic", pluginRealm );
             }
 
             ConfigurationListener listener = new DebugConfigurationListener( getLogger() );

File: maven-embedder/src/main/java/org/apache/maven/embedder/MavenEmbedder.java
Patch:
@@ -598,7 +598,7 @@ private void start( Configuration configuration )
 
             mavenProjectBuilder = (MavenProjectBuilder) container.lookup( MavenProjectBuilder.ROLE );
 
-            buildContextManager = (BuildContextManager) container.lookup( BuildContextManager.ROLE );
+            buildContextManager = (BuildContextManager) container.lookup( BuildContextManager.ROLE, "default" );
 
             // ----------------------------------------------------------------------
             // Artifact related components
@@ -608,7 +608,7 @@ private void start( Configuration configuration )
 
             artifactFactory = (ArtifactFactory) container.lookup( ArtifactFactory.ROLE );
 
-            artifactResolver = (ArtifactResolver) container.lookup( ArtifactResolver.ROLE );
+            artifactResolver = (ArtifactResolver) container.lookup( ArtifactResolver.ROLE, "default" );
 
             defaultArtifactRepositoryLayout =
                 (ArtifactRepositoryLayout) container.lookup( ArtifactRepositoryLayout.ROLE, DEFAULT_LAYOUT_ID );

File: maven-embedder/src/main/java/org/apache/maven/embedder/execution/DefaultMavenExecutionRequestDefaultsPopulator.java
Patch:
@@ -115,8 +115,6 @@ else if ( request.isNoSnapshotUpdates() )
         {
             wagonManager.setInteractive( request.isInteractiveMode() );
 
-            System.out.println( "request.getTransferListener() = " + request.getTransferListener() );
-
             wagonManager.addTransferListener( request.getTransferListener() );
 
             wagonManager.setOnline( true );

File: maven-embedder/src/main/java/org/apache/maven/embedder/PlexusLoggerAdapter.java
Patch:
@@ -86,7 +86,7 @@ public void error( String message )
     public void error( String message,
                        Throwable throwable )
     {
-        logger.error( message );
+        logger.error( message, throwable );
     }
 
     public boolean isErrorEnabled()

File: maven-embedder/src/main/java/org/apache/maven/embedder/execution/MavenExecutionRequestDefaultsPopulator.java
Patch:
@@ -1,13 +1,14 @@
 package org.apache.maven.embedder.execution;
 
-import org.apache.maven.embedder.MavenEmbedderConfiguration;
+import org.apache.maven.embedder.configuration.Configuration;
 import org.apache.maven.embedder.MavenEmbedderException;
+import org.apache.maven.embedder.MavenEmbedder;
 import org.apache.maven.execution.MavenExecutionRequest;
 
 public interface MavenExecutionRequestDefaultsPopulator
 {
     String ROLE = MavenExecutionRequestDefaultsPopulator.class.getName();
 
-    MavenExecutionRequest populateDefaults( MavenExecutionRequest request, MavenEmbedderConfiguration embedderConfiguration )
+    MavenExecutionRequest populateDefaults( MavenExecutionRequest request, MavenEmbedder embedder )
         throws MavenEmbedderException;
 }

File: maven-artifact/src/main/java/org/apache/maven/artifact/resolver/ArtifactResolutionResult.java
Patch:
@@ -16,8 +16,8 @@
  * limitations under the License.
  */
 
-import java.util.HashSet;
 import java.util.Iterator;
+import java.util.LinkedHashSet;
 import java.util.Set;
 
 /**
@@ -39,7 +39,7 @@ public Set getArtifacts()
     {
         if ( artifacts == null )
         {
-            artifacts = new HashSet();
+            artifacts = new LinkedHashSet();
             
             for ( Iterator it = resolutionNodes.iterator(); it.hasNext(); )
             {
@@ -55,7 +55,7 @@ public Set getArtifactResolutionNodes()
     {
         return resolutionNodes;
     }
-
+    
     public void setArtifactResolutionNodes( Set resolutionNodes )
     {
         this.resolutionNodes = resolutionNodes;

File: maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java
Patch:
@@ -528,9 +528,11 @@ public SettingsBuilderAdvice getSettingsBuilderAdvice()
         return advice;
     }
 
-    public void setSettingsBuilderAdvice( SettingsBuilderAdvice advice )
+    public MavenExecutionRequest setSettingsBuilderAdvice( SettingsBuilderAdvice advice )
     {
         this.advice = advice;
+        
+        return this;
     }
 
 }

File: maven-core/src/main/java/org/apache/maven/execution/MavenExecutionRequest.java
Patch:
@@ -193,5 +193,5 @@ public interface MavenExecutionRequest
     MavenExecutionRequest setUsePluginUpdateOverride( boolean usePluginUpdateOverride );
     
     SettingsBuilderAdvice getSettingsBuilderAdvice();
-    void setSettingsBuilderAdvice( SettingsBuilderAdvice advice );
+    MavenExecutionRequest setSettingsBuilderAdvice( SettingsBuilderAdvice advice );
 }

File: maven-project/src/main/java/org/apache/maven/project/MavenProject.java
Patch:
@@ -539,7 +539,7 @@ public List getCompileDependencies()
     public List getTestClasspathElements()
         throws DependencyResolutionRequiredException
     {
-        List list = new ArrayList( getArtifacts().size() + 1 );
+        List list = new ArrayList( getArtifacts().size() + 2 );
 
         list.add( getBuild().getOutputDirectory() );
 

File: maven-embedder/src/main/java/org/apache/maven/embedder/AbstractMavenEmbedderLogger.java
Patch:
@@ -23,7 +23,7 @@
  * @version $Id$
  */
 public abstract class AbstractMavenEmbedderLogger
-        implements MavenEmbedderLogger
+    implements MavenEmbedderLogger
 {
     private int threshold = MavenEmbedderLogger.LEVEL_INFO;
 
@@ -43,7 +43,7 @@ public String getName()
     {
         return name;
     }
-    
+
     public void debug( String message )
     {
         debug( message, null );

File: maven-embedder/src/main/java/org/apache/maven/embedder/MavenEmbedderException.java
Patch:
@@ -33,7 +33,8 @@ public MavenEmbedderException( Throwable cause )
         super( cause );
     }
 
-    public MavenEmbedderException( String message, Throwable cause )
+    public MavenEmbedderException( String message,
+                                   Throwable cause )
     {
         super( message, cause );
     }

File: maven-embedder/src/main/java/org/apache/maven/embedder/SummaryPluginDescriptor.java
Patch:
@@ -26,7 +26,9 @@ public class SummaryPluginDescriptor
 
     private String name;
 
-    public SummaryPluginDescriptor( String groupId, String artifactId, String name )
+    public SummaryPluginDescriptor( String groupId,
+                                    String artifactId,
+                                    String name )
     {
         this.groupId = groupId;
         this.artifactId = artifactId;

File: maven-embedder/src/main/java/org/apache/maven/embedder/execution/MavenExecutionRequestDefaultsPopulator.java
Patch:
@@ -3,10 +3,10 @@
 import org.apache.maven.embedder.MavenEmbedderException;
 import org.apache.maven.execution.MavenExecutionRequest;
 
-public interface MavenExecutionRequestDefaultsPopulator 
+public interface MavenExecutionRequestDefaultsPopulator
 {
     String ROLE = MavenExecutionRequestDefaultsPopulator.class.getName();
-    
+
     MavenExecutionRequest populateDefaults( MavenExecutionRequest request )
-		throws MavenEmbedderException;
+        throws MavenEmbedderException;
 }

File: maven-embedder/src/main/java/org/apache/maven/embedder/user/SettingsAdapter.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.List;
 
 /**
- * Adapt a {@link MavenExecutionRequest} to a {@link Settings} object for use in the Maven core. 
+ * Adapt a {@link MavenExecutionRequest} to a {@link Settings} object for use in the Maven core.
  *
  * @author Jason van Zyl
  */

File: maven-artifact-manager/src/main/java/org/apache/maven/artifact/manager/WagonManager.java
Patch:
@@ -39,6 +39,7 @@
  *
  * @author <a href="michal.maczka@dimatics.com">Michal Maczka </a>
  * @version $Id$
+ * @deprecated in favor of {@link ArtifactManager} and {@link org.apache.maven.wagon.manager.WagonManager}
  */
 public interface WagonManager
 {
@@ -66,7 +67,7 @@ Wagon getWagon( String protocol )
      * @throws WagonConfigurationException  if the wagon can't be configured for the repository
      */
     Wagon getWagon( Repository repository )
-        throws UnsupportedProtocolException, WagonConfigurationException;
+        throws UnsupportedProtocolException;
 
     void getArtifact( Artifact artifact, List remoteRepositories )
         throws TransferFailedException, ResourceDoesNotExistException;

File: maven-artifact-manager/src/main/java/org/apache/maven/artifact/transform/AbstractVersionTransformation.java
Patch:
@@ -43,8 +43,6 @@ public abstract class AbstractVersionTransformation
 {
     protected RepositoryMetadataManager repositoryMetadataManager;
 
-    protected WagonManager wagonManager;
-
     protected String resolveVersion( Artifact artifact, ArtifactRepository localRepository, List remoteRepositories )
         throws RepositoryMetadataResolutionException
     {

File: maven-cli/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -278,6 +278,8 @@ else if ( profileAction.startsWith( "+" ) )
             {
                 transferListener = new BatchModeDownloadMonitor();
             }
+            
+            transferListener.setShowChecksumEvents( false );
 
             // This means to scan a directory structure for POMs and process them.
             boolean useReactor = false;

File: maven-core/src/main/java/org/apache/maven/extension/DefaultBuildExtensionScanner.java
Patch:
@@ -24,7 +24,6 @@
 import org.codehaus.plexus.logging.console.ConsoleLogger;
 
 import java.io.File;
-import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
@@ -94,8 +93,6 @@ public void scanForBuildExtensions( File pom, ArtifactRepository localRepository
             }
 
             getLogger().debug( "Finished pre-scanning: " + pom + " for build extensions." );
-
-            extensionManager.registerWagons();
         }
         catch ( ModelInterpolationException e )
         {

File: maven-core/src/main/java/org/apache/maven/extension/ExtensionManager.java
Patch:
@@ -37,8 +37,6 @@ public interface ExtensionManager
     void addExtension( Extension extension, MavenProject project, ArtifactRepository localRepository )
         throws ArtifactResolutionException, PlexusContainerException, ArtifactNotFoundException;
 
-    void registerWagons();
-
     void addExtension( Extension extension, Model originatingModel, List remoteRepositories,
                        ArtifactRepository localRepository )
         throws ArtifactResolutionException, PlexusContainerException, ArtifactNotFoundException;

File: maven-core/src/main/java/org/apache/maven/usability/ArtifactResolverDiagnoser.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-import org.apache.maven.artifact.manager.WagonManager;
+import org.apache.maven.artifact.manager.ArtifactManager;
 import org.apache.maven.artifact.resolver.ArtifactResolutionException;
 import org.apache.maven.usability.diagnostics.DiagnosisUtils;
 import org.apache.maven.usability.diagnostics.ErrorDiagnoser;
@@ -27,7 +27,7 @@ public class ArtifactResolverDiagnoser
     implements ErrorDiagnoser
 {
 
-    private WagonManager wagonManager;
+    private ArtifactManager artifactManager;
 
     public boolean canDiagnose( Throwable error )
     {
@@ -52,7 +52,7 @@ public String diagnose( Throwable error )
             message.append( "\n\nCaused by I/O exception: " ).append( ioe.getMessage() );
         }
 
-        if ( !wagonManager.isOnline() )
+        if ( !artifactManager.isOnline() )
         {
             message.append( "\n" ).append( SystemWarnings.getOfflineWarning() );
         }

File: maven-embedder/src/main/java/org/apache/maven/embedder/MavenEmbedder.java
Patch:
@@ -344,8 +344,6 @@ public MavenExecutionResult readProjectWithDependencies( MavenExecutionRequest r
             project = mavenProjectBuilder.buildWithDependencies( new File( request.getPomFile() ),
                                                                  request.getLocalRepository(), profileManager,
                                                                  request.getTransferListener() );
-
-            
         }
         catch (PluginManagerException e) 
         {

File: maven-core/src/main/java/org/apache/maven/DefaultArtifactFilterManager.java
Patch:
@@ -42,6 +42,7 @@ public class DefaultArtifactFilterManager implements ArtifactFilterManager
         artifacts.add( "jsch" );
         artifacts.add( "maven-artifact" );
         artifacts.add( "maven-artifact-manager" );
+        artifacts.add( "maven-build-context" );
         artifacts.add( "maven-core" );
         artifacts.add( "maven-error-diagnoser" );
         artifacts.add( "maven-model" );

File: maven-core/src/main/java/org/apache/maven/extension/DefaultExtensionManager.java
Patch:
@@ -124,6 +124,8 @@ private void addExtension( Artifact extensionArtifact,
                                ActiveArtifactResolver activeArtifactResolver )
         throws ArtifactResolutionException, PlexusContainerException, ArtifactNotFoundException
     {
+        getLogger().debug( "Starting extension-addition process for: " + extensionArtifact );
+        
         if ( extensionArtifact != null )
         {
             ArtifactFilter filter =
@@ -142,7 +144,7 @@ private void addExtension( Artifact extensionArtifact,
                     a = activeArtifactResolver.replaceWithActiveArtifact( a );
                 }
 
-                getLogger().debug( "Adding to extension classpath: " + a.getFile() );
+                getLogger().debug( "Adding to extension classpath: " + a.getFile() + " in classRealm: " + container.getContainerRealm().getId() );
 
                 container.addJarResource( a.getFile() );
                 

File: maven-project/src/main/java/org/apache/maven/profiles/activation/CustomActivatorAdvice.java
Patch:
@@ -17,7 +17,7 @@ public class CustomActivatorAdvice
     
     public static final String BUILD_CONTEXT_KEY = CustomActivatorAdvice.class.getName();
     
-    private static final boolean DEFAULT_FAIL_QUIETLY = true;
+    private static final boolean DEFAULT_FAIL_QUIETLY = false;
     
     /**
      * If set to false, this tells the CustomProfileActivator to fail quietly when the specified 

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Patch:
@@ -410,7 +410,7 @@ private void addPlugin( Plugin plugin, Plugin projectPlugin, Artifact pluginArti
 
         pluginDescriptor.setArtifacts( new ArrayList( artifacts ) );
 
-        getLogger().info( "Realm for plugin: " + plugin.getKey() + ":\n" + componentRealm );
+        getLogger().debug( "Realm for plugin: " + plugin.getKey() + ":\n" + componentRealm );
 
         pluginDescriptor.setClassRealm( componentRealm );
     }
@@ -715,12 +715,12 @@ private Mojo getConfiguredMojo( MavenSession session,
             {
                 ClassRealm oldRealm = container.setLookupRealm( realm );
 
-                getLogger().info( "Looking up mojo " + mojoDescriptor.getRoleHint() + " in realm " + realm.getId() + " - descRealmId=" + mojoDescriptor.getRealmId()  );
+                getLogger().debug( "Looking up mojo " + mojoDescriptor.getRoleHint() + " in realm " + realm.getId() + " - descRealmId=" + mojoDescriptor.getRealmId()  );
 
                 plugin = (Mojo) container.lookup( Mojo.ROLE, mojoDescriptor.getRoleHint(), realm );
 
                 if ( plugin != null )
-                getLogger().info( "Looked up - " + plugin + " - " + plugin.getClass().getClassLoader() );
+                getLogger().debug( "Looked up - " + plugin + " - " + plugin.getClass().getClassLoader() );
                 else// not needed i guess.
                     getLogger().warn("No luck.");
 

File: its/core-integration-tests/src/test/resources/it0113-serverAuthzAvailableToWagonMgrInPlugin/maven-it0113-plugin/src/main/java/org/apache/maven/plugins/MyMojo.java
Patch:
@@ -67,13 +67,13 @@ public void execute()
         
         if ( !username.equals( authInfo.getUserName() ) )
         {
-            getLog().error( "Expected username: " + username + "; found: " + authInfo.getUserName() );
+            getLog().error( "Expected username: '" + username + "'; found: '" + authInfo.getUserName() + "'" );
             throw new MojoExecutionException( "Expected username: " + username + "; found: " + authInfo.getUserName() );
         }
         
-        if ( password.equals( authInfo.getPassword() ) )
+        if ( !password.equals( authInfo.getPassword() ) )
         {
-            getLog().error( "Expected password: " + password + "; found: " + authInfo.getPassword() );
+            getLog().error( "Expected password: '" + password + "'; found: '" + authInfo.getPassword() + "'" );
             throw new MojoExecutionException( "Expected password: " + password + "; found: " + authInfo.getPassword() );
         }
     }

File: its/core-integration-tests/src/test/resources/it0113-serverAuthzAvailableToWagonMgrInPlugin/maven-it0113-plugin/src/main/java/org/apache/maven/plugins/MyMojo.java
Patch:
@@ -65,7 +65,7 @@ public void execute()
             throw new MojoExecutionException( "Cannot find AuthenticationInfo for: " + serverId + "." );
         }
         
-        if ( username.equals( authInfo.getUserName() ) )
+        if ( !username.equals( authInfo.getUserName() ) )
         {
             getLog().error( "Expected username: " + username + "; found: " + authInfo.getUserName() );
             throw new MojoExecutionException( "Expected username: " + username + "; found: " + authInfo.getUserName() );

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenIT0113ServerAuthzAvailableToWagonMgrInPlugin.java
Patch:
@@ -50,7 +50,8 @@ public void testit0113()
         // Build the test project that uses the plugin.
         verifier = new Verifier( new File( testDir.getAbsolutePath(), "test-project" ).getAbsolutePath() );
         List cliOptions = new ArrayList();
-        cliOptions.add( "--settings settings.xml" );
+        cliOptions.add( "--settings" );
+        cliOptions.add( "settings.xml" );
         verifier.setCliOptions( cliOptions );
         verifier.executeGoal( "install" );
         verifier.verifyErrorFreeLog();

File: maven-core/src/main/java/org/apache/maven/plugin/MavenPluginCollector.java
Patch:
@@ -58,6 +58,8 @@ public void componentDiscovered( ComponentDiscoveryEvent event )
             {
                 pluginsInProcess.add( key );
 
+                getLogger().debug( this + ": Discovered plugin: " + key );
+                
                 pluginDescriptors.put( key, pluginDescriptor );
 
                 // TODO: throw an (not runtime) exception if there is a prefix overlap - means doing so elsewhere

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenIT0043Test.java
Patch:
@@ -18,7 +18,8 @@ public void testit0043()
         File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/it0043" );
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
         verifier.executeGoal( "package" );
-        verifier.assertFilePresent( "target/maven-it-it0043-1.0-SNAPSHOT.jar" );
+        verifier.assertFilePresent( "child1/target/maven-it-it0043-child1-1.0-SNAPSHOT.jar" );
+        verifier.assertFilePresent( "child2/target/maven-it-it0043-child2-1.0-SNAPSHOT.jar" );
         verifier.verifyErrorFreeLog();
         verifier.resetStreams();
 

File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java
Patch:
@@ -1243,6 +1243,8 @@ private void bindPluginToLifecycle( Plugin plugin, MavenSession session, Map pha
     private PluginDescriptor verifyPlugin( Plugin plugin, MavenProject project, MavenSession session )
         throws LifecycleExecutionException, PluginNotFoundException
     {
+        getLogger().debug( "Verifying plugin: " + plugin.getKey() );
+        
         PluginDescriptor pluginDescriptor;
         try
         {

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/AbstractMavenIntegrationTestCase.java
Patch:
@@ -11,10 +11,11 @@ public abstract class AbstractMavenIntegrationTestCase
     private boolean printed = false;
 
     protected void setUp()
+        throws Exception
     {
         if ( !printed )
         {
-            String simpleName = getClass().getSimpleName();
+            String simpleName = getClass().getName();
             simpleName = simpleName.startsWith( "MavenIT" ) ? simpleName.substring( "MavenIT".length() ) : simpleName;
             simpleName = simpleName.endsWith( "Test" ) ? simpleName.substring(0, simpleName.length() -4 ) : simpleName;
 

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenIT0112ExtensionsThatDragDependencies.java
Patch:
@@ -48,7 +48,8 @@ public void testit0112()
         // Run the whole test
         verifier = new Verifier( new File( testDir.getAbsolutePath(), "test-project" ).getAbsolutePath() );
         verifier.executeGoal( "project-info-reports:scm" );
-        verifier.verifyErrorFreeLog();
+        // ommitted because we always get velocity errors that aren't covered by the verifier
+//        verifier.verifyErrorFreeLog();
         verifier.resetStreams();
     }
 }

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/IntegrationTestSuite.java
Patch:
@@ -117,6 +117,8 @@ public static Test suite()
         // suite.addTestSuite(MavenIT0106Test.class);
         // suite.addTestSuite(MavenIT0107Test.class);
         suite.addTestSuite( MavenIT0109SnapshotUpdateTest.class );
+        suite.addTestSuite( MavenIT0110PluginDependenciesComeFromPluginReposTest.class );
+        suite.addTestSuite( MavenIT0111PluginsThatRequireAResourceFromAnExtensionTest.class );
         return suite;
     }
 }

File: maven-artifact-ant/src/main/java/org/apache/maven/artifact/ant/AbstractArtifactTask.java
Patch:
@@ -308,7 +308,7 @@ protected synchronized PlexusContainer getContainer()
 
                     classWorld.newRealm( "plexus.core", getClass().getClassLoader() );
 
-                    container = new DefaultPlexusContainer( null, null, null, classWorld );
+                    container = new DefaultPlexusContainer( null, null, classWorld );
 
                 }
                 catch ( PlexusContainerException e )

File: maven-embedder/src/main/java/org/apache/maven/embedder/MavenEmbedder.java
Patch:
@@ -382,7 +382,7 @@ public void start( MavenEmbedRequest req )
 
         try
         {
-            container = new DefaultPlexusContainer( null, null, null, classWorld );
+            container = new DefaultPlexusContainer( null, null, classWorld );
         }
         catch ( PlexusContainerException e )
         {

File: maven-core/src/test/java/org/apache/maven/plugin/PluginParameterExpressionEvaluatorTest.java
Patch:
@@ -199,8 +199,8 @@ private static MavenSession createSession( PlexusContainer container, ArtifactRe
         throws CycleDetectedException, DuplicateProjectException
     {
         return new MavenSession( container, new Settings(), repo, new DefaultEventDispatcher(),
-                                 new ReactorManager( Collections.EMPTY_LIST ), Collections.EMPTY_LIST, ".",
-                                 new Properties(), new Date() );
+                                 new ReactorManager( Collections.EMPTY_LIST, ReactorManager.FAIL_FAST ),
+                                 Collections.EMPTY_LIST, ".", new Properties(), new Date() );
     }
 
     public void testLocalRepositoryExtraction()

File: maven-core/src/main/java/org/apache/maven/extension/DefaultExtensionManager.java
Patch:
@@ -90,9 +90,8 @@ public void addExtension( Extension extension, MavenProject project, ArtifactRep
             PlexusContainer extensionContainer = getExtensionContainer();
             if ( extensionContainer == null )
             {
-                extensionContainer = container.createChildContainer( CONTAINER_NAME,
-                                                                     Collections.singletonList( artifact.getFile() ),
-                                                                     Collections.EMPTY_MAP );
+                extensionContainer =
+                    container.createChildContainer( CONTAINER_NAME, Collections.EMPTY_LIST, Collections.EMPTY_MAP );
             }
 
             for ( Iterator i = result.getArtifacts().iterator(); i.hasNext(); )

File: maven-tools/src/main/java/org/apache/maven/MavenTools.java
Patch:
@@ -56,12 +56,12 @@ Settings buildSettings( File userSettingsPath,
                             boolean interactive,
                             boolean offline,
                             boolean usePluginRegistry,
-                            Boolean pluginUpdateOverride )
+                            boolean pluginUpdateOverride )
         throws SettingsConfigurationException;
     
     Settings buildSettings( File userSettingsPath,
                             File globalSettingsPath,
-                            Boolean pluginUpdateOverride )
+                            boolean pluginUpdateOverride )
         throws SettingsConfigurationException;
 
     // ----------------------------------------------------------------------------

File: maven-artifact-manager/src/main/java/org/apache/maven/artifact/repository/metadata/AbstractRepositoryMetadata.java
Patch:
@@ -113,16 +113,16 @@ protected void updateRepositoryMetadata( ArtifactRepository localRepository, Art
         {
             changed = metadata.merge( this.metadata );
         }
-        
+
         // beware meta-versions!
         String version = metadata.getVersion();
         if ( version != null && ( Artifact.LATEST_VERSION.equals( version ) || Artifact.RELEASE_VERSION.equals( version ) ) )
         {
             // meta-versions are not valid <version/> values...don't write them.
-            changed = false;
+            metadata.setVersion( null );
         }
 
-        if ( changed )
+        if ( changed || !metadataFile.exists() )
         {
             Writer writer = null;
             try

File: maven-artifact-manager/src/main/java/org/apache/maven/artifact/repository/metadata/DefaultRepositoryMetadataManager.java
Patch:
@@ -78,6 +78,8 @@ else if ( repository.isBlacklisted() )
                     File file = new File( localRepository.getBasedir(),
                                           localRepository.pathOfLocalRepositoryMetadata( metadata, repository ) );
 
+
+
                     boolean checkForUpdates =
                         policy.checkOutOfDate( new Date( file.lastModified() ) ) || !file.exists();
 
@@ -106,7 +108,7 @@ else if ( repository.isBlacklisted() )
                     {
                         file.setLastModified( System.currentTimeMillis() );
                     }
-                    else if ( !metadataIsEmpty )
+                    else
                     {
                         // this ensures that files are not continuously checked when they don't exist remotely
                         try

File: maven-artifact-manager/src/main/java/org/apache/maven/artifact/repository/metadata/DefaultRepositoryMetadataManager.java
Patch:
@@ -100,6 +100,7 @@ else if ( repository.isBlacklisted() )
                         }
                     }
 
+                    // TODO: should this be inside the above check?
                     // touch file so that this is not checked again until interval has passed
                     if ( file.exists() )
                     {

File: maven-artifact-manager/src/main/java/org/apache/maven/artifact/transform/AbstractVersionTransformation.java
Patch:
@@ -61,6 +61,8 @@ protected String resolveVersion( Artifact artifact, ArtifactRepository localRepo
 
         repositoryMetadataManager.resolve( metadata, remoteRepositories, localRepository );
 
+        artifact.addMetadata( metadata );
+
         Metadata repoMetadata = metadata.getMetadata();
         String version = null;
         if ( repoMetadata != null && repoMetadata.getVersioning() != null )

File: maven-project/src/main/java/org/apache/maven/project/interpolation/RegexBasedModelInterpolator.java
Patch:
@@ -166,7 +166,7 @@ private String interpolateInternal( String src, Model model, Map context )
             // if the expression refers to itself, skip it.
             if ( String.valueOf( value ).indexOf( wholeExpr ) > -1 )
             {
-                throw new ModelInterpolationException( wholeExpr, model.getId() + " references itself." );
+                throw new ModelInterpolationException( wholeExpr, "Expression value '" + value + "' references itself in '" + model.getId() + "'." );
             }
 
             if ( value != null )
@@ -192,4 +192,4 @@ private String interpolateInternal( String src, Model model, Map context )
         return result;
     }
 
-}
\ No newline at end of file
+}

File: maven-cli/src/main/java/org/apache/maven/cli/CLIManager.java
Patch:
@@ -99,7 +99,7 @@ public CLIManager()
         options.addOption( OptionBuilder.withLongOpt( "non-recursive" ).withDescription(
             "Do not recurse into sub-projects" ).create( NON_RECURSIVE ) );
         options.addOption( OptionBuilder.withLongOpt( "update-snapshots" ).withDescription(
-            "Update all snapshots regardless of repository policies" ).create( UPDATE_SNAPSHOTS ) );
+            "Update all SNAPSHOT dependencies, including releases, regardless of repository policies" ).create( UPDATE_SNAPSHOTS ) );
         options.addOption( OptionBuilder.withLongOpt( "activate-profiles" ).withDescription(
             "Comma-delimited list of profiles to activate" ).hasArg().create( ACTIVATE_PROFILES ) );
 

File: maven-core/src/main/java/org/apache/maven/MavenArtifactFilterManager.java
Patch:
@@ -24,7 +24,7 @@
 
 /**
  * @author <a href="mailto:jason@maven.org">Jason van Zyl</a>
- * @version $Id:$
+ * @version $Id$
  * @todo this should probably be a component with some dynamic control of filtering
  */
 public class MavenArtifactFilterManager

File: maven-core/src/main/java/org/apache/maven/MavenTransferListener.java
Patch:
@@ -4,7 +4,7 @@
 
 /**
  * @author Jason van Zyl
- * @version $Revision:$
+ * @version $Revision$
  */
 public interface MavenTransferListener
     extends TransferListener

File: maven-embedder-it/src/main/java/org/apache/maven/embedder/it/MockPlugin.java
Patch:
@@ -23,7 +23,7 @@
  * A mock tool plugin that uses the Maven Embedder API
  *
  * @author <a href="mailto:jason@maven.org">Jason van Zyl</a>
- * @version $Id:$
+ * @version $Id$
  */
 public class MockPlugin
 {

File: maven-embedder-it/src/test/java/org/apache/maven/embedder/it/MockPluginTest.java
Patch:
@@ -21,7 +21,7 @@
 
 /**
  * @author <a href="mailto:jason@maven.org">Jason van Zyl</a>
- * @version $Id:$
+ * @version $Id$
  */
 public class MockPluginTest
     extends TestCase

File: maven-embedder/src/main/java/org/apache/maven/embedder/MavenEmbedderException.java
Patch:
@@ -18,7 +18,7 @@
 
 /**
  * @author <a href="mailto:jason@maven.org">Jason van Zyl</a>
- * @version $Id:$
+ * @version $Id$
  */
 public class MavenEmbedderException
     extends Exception

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/IntegrationTestSuite.java
Patch:
@@ -103,6 +103,7 @@ public static Test suite()
         // suite.addTestSuite(MavenIT0090Test.class);
         // suite.addTestSuite(MavenIT0091Test.class);
         suite.addTestSuite( MavenIT0092Test.class );
+//        suite.addTestSuite( MavenIT0093Test.class ); ???
         suite.addTestSuite( MavenIT0094Test.class );
         suite.addTestSuite( MavenIT0095Test.class );
         suite.addTestSuite(MavenIT0096Test.class);
@@ -117,6 +118,7 @@ public static Test suite()
         suite.addTestSuite( MavenIT0105Test.class );
         // suite.addTestSuite(MavenIT0106Test.class);
         // suite.addTestSuite(MavenIT0107Test.class);
+        suite.addTestSuite( MavenSnapshotUpdateITest.class );
         return suite;
     }
 }

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenIT0014Test.java
Patch:
@@ -20,7 +20,7 @@ public void testit0014()
         File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/it0014" );
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
         verifier.executeGoal( "test" );
-        verifier.assertFilePresent( "target/classes/org/apache/maven/it0001/Person.class" );
+        verifier.assertFilePresent( "target/classes/org/apache/maven/it0014/Person.class" );
         verifier.verifyErrorFreeLog();
         verifier.resetStreams();
         System.out.println( "it0014 PASS" );

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenIT0029Test.java
Patch:
@@ -21,7 +21,7 @@ public void testit0029()
         verifier.deleteArtifact( "org.apache.maven.it", "maven-it-it0029", "1.0-SNAPSHOT", "jar" );
         verifier.deleteArtifact( "org.apache.maven.it", "maven-it-it0029-child", "1.0-SNAPSHOT", "jar" );
         verifier.executeGoal( "install" );
-        verifier.assertFilePresent( "child-project/target/classes/org/apache/maven/it0001/Person.class" );
+        verifier.assertFilePresent( "child-project/target/classes/org/apache/maven/it0029/Person.class" );
         verifier.verifyErrorFreeLog();
         verifier.resetStreams();
         System.out.println( "it0029 PASS" );

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenIT0057Test.java
Patch:
@@ -19,10 +19,10 @@ public void testit0057()
         File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/it0057" );
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
         verifier.executeGoal( "package" );
-        verifier.assertFilePresent( "target/classes/org/apache/maven/it0001/Person.class" );
-        verifier.assertFilePresent( "target/test-classes/org/apache/maven/it0001/PersonTest.class" );
+        verifier.assertFilePresent( "target/classes/org/apache/maven/it0057/Person.class" );
+        verifier.assertFilePresent( "target/test-classes/org/apache/maven/it0057/PersonTest.class" );
         verifier.assertFilePresent( "target/maven-it-it0057-1.0.jar" );
-        verifier.assertFilePresent( "target/maven-it-it0057-1.0.jar!/it0001.properties" );
+        verifier.assertFilePresent( "target/maven-it-it0057-1.0.jar!/it0057.properties" );
         verifier.verifyErrorFreeLog();
         verifier.resetStreams();
         System.out.println( "it0057 PASS" );

File: its/core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenIT0063Test.java
Patch:
@@ -19,10 +19,10 @@ public void testit0063()
         File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/it0063" );
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
         verifier.executeGoal( "package" );
-        verifier.assertFilePresent( "target/classes/org/apache/maven/it0001/Person.class" );
-        verifier.assertFilePresent( "target/test-classes/org/apache/maven/it0001/PersonTest.class" );
+        verifier.assertFilePresent( "target/classes/org/apache/maven/it0063/Person.class" );
+        verifier.assertFilePresent( "target/test-classes/org/apache/maven/it0063/PersonTest.class" );
         verifier.assertFilePresent( "target/maven-it-it0063-1.0.jar" );
-        verifier.assertFilePresent( "target/maven-it-it0063-1.0.jar!/it0001.properties" );
+        verifier.assertFilePresent( "target/maven-it-it0063-1.0.jar!/it0063.properties" );
         verifier.verifyErrorFreeLog();
         verifier.resetStreams();
         System.out.println( "it0063 PASS" );

File: its/core-integration-tests/src/test/resources/it0014/src/test/java/org/apache/maven/it0014/PersonTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0001;
+package org.apache.maven.it0014;
 
 import junit.framework.TestCase;
 

File: its/core-integration-tests/src/test/resources/it0042/test-component-b/src/main/java/B.java
Patch:
@@ -1,3 +1,5 @@
+package it0042;
+
 public class B
   extends A
 {

File: its/core-integration-tests/src/test/resources/it0042/test-component-c/src/main/java/C.java
Patch:
@@ -1,3 +1,5 @@
+package it0042;
+
 public class C
   extends A
 {

File: its/core-integration-tests/src/test/resources/it0052/src/test/java/org/apache/maven/it0052/PersonTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0001;
+package org.apache.maven.it0052;
 
 import junit.framework.TestCase;
 

File: its/core-integration-tests/src/test/resources/it0053/src/test/java/org/apache/maven/it0053/PersonTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0001;
+package org.apache.maven.it0053;
 
 import junit.framework.TestCase;
 

File: its/core-integration-tests/src/test/resources/it0055/src/main/java/org/apache/maven/it0055/PersonTwo.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0001;
+package org.apache.maven.it0055;
 
 public class PersonTwo
 {

File: its/core-integration-tests/src/test/resources/it0056/src/main/java/org/apache/maven/it0056/PersonThree.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0001;
+package org.apache.maven.it0056;
 
 public class PersonThree
 {

File: its/core-integration-tests/src/test/resources/it0056/src/test/java/org/apache/maven/it0056/PersonTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0001;
+package org.apache.maven.it0056;
 
 import junit.framework.TestCase;
 

File: its/core-integration-tests/src/test/resources/it0056/src/test/java/org/apache/maven/it0056/PersonThreeTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0001;
+package org.apache.maven.it0056;
 
 import junit.framework.TestCase;
 

File: its/core-integration-tests/src/test/resources/it0056/src/test/java/org/apache/maven/it0056/PersonTwoTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0001;
+package org.apache.maven.it0056;
 
 import junit.framework.TestCase;
 

File: its/core-integration-tests/src/test/resources/it0058/subproject/src/test/java/org/apache/maven/it0058/PersonTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0001;
+package org.apache.maven.it0058;
 
 import junit.framework.TestCase;
 

File: its/core-integration-tests/src/test/resources/it0063/src/test/java/org/apache/maven/it0063/PersonTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0001;
+package org.apache.maven.it0063;
 
 import junit.framework.TestCase;
 

File: its/core-integration-tests/src/test/resources/it0080/test-component-a/src/main/java/A.java
Patch:
@@ -1,3 +1,5 @@
+package it0080;
+
 public class A {
 }
 

File: its/core-integration-tests/src/test/resources/it0014/src/main/java/org/apache/maven/it0014/Person.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0001;
+package org.apache.maven.it0014;
 
 public class Person
 {

File: its/core-integration-tests/src/test/resources/it0029/child-project/src/main/java/org/apache/maven/it0029/Person.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0001;
+package org.apache.maven.it0029;
 
 public class Person
 {

File: its/core-integration-tests/src/test/resources/it0042/test-component-a/src/main/java/A.java
Patch:
@@ -1,3 +1,5 @@
+package it0042;
+
 public class A {
 }
 

File: its/core-integration-tests/src/test/resources/it0042/test-plugin/src/main/java/org/apache/maven/plugin/coreit/CoreItMojo.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.plugin.coreit;
+package org.apache.maven.plugin.coreit.it0042;
 
 /*
  * Copyright 2001-2004 The Apache Software Foundation.

File: its/core-integration-tests/src/test/resources/it0044/src/main/java/org/apache/maven/it0044/Person.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0023;
+package org.apache.maven.it0044;
 
 public class Person
 {

File: its/core-integration-tests/src/test/resources/it0048/src/main/java/org/apache/maven/it0048/Person.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0001;
+package org.apache.maven.it0048;
 
 public class Person
 {

File: its/core-integration-tests/src/test/resources/it0048/src/test/java/org/apache/maven/it0048/PersonTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0001;
+package org.apache.maven.it0048;
 
 import junit.framework.TestCase;
 import java.net.URL;

File: its/core-integration-tests/src/test/resources/it0051/src/main/java/org/apache/maven/it0051/Person.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0001;
+package org.apache.maven.it0051;
 
 public class Person
 {

File: its/core-integration-tests/src/test/resources/it0051/src/test/java/org/apache/maven/it0051/PersonTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0001;
+package org.apache.maven.it0051;
 
 import junit.framework.TestCase;
 

File: its/core-integration-tests/src/test/resources/it0052/src/main/java/org/apache/maven/it0052/Person.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0001;
+package org.apache.maven.it0052;
 
 public class Person
 {

File: its/core-integration-tests/src/test/resources/it0053/src/main/java/org/apache/maven/it0053/Person.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0001;
+package org.apache.maven.it0053;
 
 public class Person
 {

File: its/core-integration-tests/src/test/resources/it0055/src/main/java/org/apache/maven/it0055/Person.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0001;
+package org.apache.maven.it0055;
 
 public class Person
 {

File: its/core-integration-tests/src/test/resources/it0055/src/test/java/org/apache/maven/it0055/PersonTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0001;
+package org.apache.maven.it0055;
 
 import junit.framework.TestCase;
 

File: its/core-integration-tests/src/test/resources/it0056/src/main/java/org/apache/maven/it0056/Person.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0001;
+package org.apache.maven.it0056;
 
 public class Person
 {

File: its/core-integration-tests/src/test/resources/it0056/src/main/java/org/apache/maven/it0056/PersonTwo.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0001;
+package org.apache.maven.it0056;
 
 public class PersonTwo
 {

File: its/core-integration-tests/src/test/resources/it0057/src/main/java/org/apache/maven/it0057/Person.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0001;
+package org.apache.maven.it0057;
 
 public class Person
 {

File: its/core-integration-tests/src/test/resources/it0057/src/test/java/org/apache/maven/it0057/PersonTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0001;
+package org.apache.maven.it0057;
 
 import junit.framework.TestCase;
 

File: its/core-integration-tests/src/test/resources/it0058/subproject/src/main/java/org/apache/maven/it0058/Person.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0001;
+package org.apache.maven.it0058;
 
 public class Person
 {

File: its/core-integration-tests/src/test/resources/it0059/src/main/java/org/apache/maven/it0059/Person.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0001;
+package org.apache.maven.it0059;
 
 public class Person
 {

File: its/core-integration-tests/src/test/resources/it0061/src/main/java/org/apache/maven/it0061/Person.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0001;
+package org.apache.maven.it0061;
 
 public class Person
 {

File: its/core-integration-tests/src/test/resources/it0063/src/main/java/org/apache/maven/it0063/Person.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0001;
+package org.apache.maven.it0063;
 
 import com.sun.tools.javac.Main;
 

File: its/core-integration-tests/src/test/resources/it0080/test-component-b/src/main/java/B.java
Patch:
@@ -1,3 +1,5 @@
+package it0080;
+
 public class B
   extends A
 {

File: its/core-integration-tests/src/test/resources/it0080/test-component-c/src/main/java/C.java
Patch:
@@ -1,3 +1,5 @@
+package it0080;
+
 public class C
   extends A
 {

File: its/core-integration-tests/src/test/resources/it0082/test-component-c/src/main/java/C.java
Patch:
@@ -1,3 +1,5 @@
+package it0082;
+
 public class C
   extends A
 {

File: its/core-integration-tests/src/test/resources/it0084/test-component-a/src/main/java/A.java
Patch:
@@ -1,3 +1,5 @@
+package it0084;
+
 public class A {
 }
 

File: its/core-integration-tests/src/test/resources/it0084/test-component-c/src/main/java/C.java
Patch:
@@ -1,3 +1,5 @@
+package it0084;
+
 public class C
 {
 }

File: its/core-integration-tests/src/test/resources/it0096/project/project-level2/project-level3/project-jar/src/main/java/com/stchome/mavenTest/App.java
Patch:
@@ -1,4 +1,4 @@
-package com.stchome.mavenTest;
+package com.stchome.mavenTest.it0096;
 
 /**
  * Hello world!

File: its/core-integration-tests/src/test/resources/it0096/project/project-level2/project-level3/project-jar/src/test/java/com/stchome/mavenTest/AppTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.stchome.mavenTest;
+package com.stchome.mavenTest.it0096;
 
 import junit.framework.Test;
 import junit.framework.TestCase;

File: its/core-integration-tests/src/test/resources/it0097/project/project-level2/project-level3/src/main/java/com/stchome/mavenTest/App.java
Patch:
@@ -1,4 +1,4 @@
-package com.stchome.mavenTest;
+package com.stchome.mavenTest.it0096;
 
 /**
  * Hello world!

File: its/core-integration-tests/src/test/resources/it0097/project/project-sibling-level2/src/test/java/com/stchome/mavenTest/AppTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.stchome.mavenTest;
+package com.stchome.mavenTest.it0097;
 
 import junit.framework.Test;
 import junit.framework.TestCase;

File: maven-core-integration-tests/src/test/java/org/apache/maven/integrationtests/MavenIT0079Test.java
Patch:
@@ -20,8 +20,8 @@ public void testit0079()
         File testDir = ResourceExtractor.simpleExtractResources( getClass(), "/it0079" );
         Verifier verifier = new Verifier( testDir.getAbsolutePath() );
         verifier.executeGoal( "deploy" );
-        verifier.assertFilePresent( "target/test-repo/org/apache/maven/it/maven-it-it0079/SNAPSHOT/maven-it-it0079-*-1.jar" );
-        verifier.assertFilePresent( "target/test-repo/org/apache/maven/it/maven-it-it0079/SNAPSHOT/maven-it-it0079-*-1-sources.jar" );
+        verifier.assertFilePresent( "target/test-repo/org/apache/maven/its/it0079/maven-it-it0079/SNAPSHOT/maven-it-it0079-*-1.jar" );
+        verifier.assertFilePresent( "target/test-repo/org/apache/maven/its/it0079/maven-it-it0079/SNAPSHOT/maven-it-it0079-*-1-sources.jar" );
         verifier.verifyErrorFreeLog();
         verifier.resetStreams();
         System.out.println( "it0079 PASS" );

File: maven-core-integration-tests/src/test/resources/it0039/project/src/main/java/org/apache/maven/it0039/Person.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0000;
+package org.apache.maven.it0039;
 
 public class Person
 {

File: maven-core-integration-tests/src/test/resources/it0039/project/src/test/java/org/apache/maven/it0039/PersonTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0000;
+package org.apache.maven.it0039;
 
 import junit.framework.TestCase;
 

File: maven-core-integration-tests/src/test/resources/it0039/project2/src/main/java/org/apache/maven/it0039/Person2.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0000;
+package org.apache.maven.it0039;
 
 public class Person2
 {

File: maven-core-integration-tests/src/test/resources/it0039/project2/src/test/java/org/apache/maven/it0039/Person2Test.java
Patch:
@@ -1,4 +1,4 @@
-package it0039.project2.src.test.java.org.apache.maven.it0039;
+package org.apache.maven.it0039;
 
 import junit.framework.TestCase;
 
@@ -7,7 +7,7 @@ public class Person2Test
 {
     public void testPerson()
     {
-        Person person = new Person();
+        Person2 person = new Person2();
 
         person.setName( "foo" );
 

File: maven-core-integration-tests/src/test/resources/it0065/subproject/src/test/java/org/apache/maven/it0065/PersonTwoTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it00065;
+package org.apache.maven.it0065;
 
 import junit.framework.TestCase;
 

File: maven-core-integration-tests/src/test/resources/it0016/src/main/java/org/apache/maven/it0016/Person.java
Patch:
@@ -1,6 +1,6 @@
 package org.apache.maven.it0016;
 
-public class IT0016Person
+public class Person
 {
     private String name;
     

File: maven-core-integration-tests/src/test/resources/it0060/subproject/src/main/java/org/apache/maven/it0060/Person.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0001;
+package org.apache.maven.it0060;
 
 public class Person
 {

File: maven-core-integration-tests/src/test/resources/it0036/src/main/java/org/apache/maven/it0036/Person.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0000;
+package org.apache.maven.it0036;
 
 public class Person
 {

File: maven-core-integration-tests/src/test/resources/it0036/src/test/java/org/apache/maven/it0036/PersonTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0000;
+package org.apache.maven.it0036;
 
 import junit.framework.TestCase;
 

File: maven-core-integration-tests/src/test/resources/it0024/src/test/java/org/apache/maven/it0024/PersonTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0001;
+package org.apache.maven.it0024;
 
 import junit.framework.TestCase;
 

File: maven-core-integration-tests/src/test/resources/it0024/src/main/java/org/apache/maven/it0024/Person.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.it0001;
+package org.apache.maven.it0024;
 
 public class Person
 {

File: maven-core-integration-tests/src/test/resources/it0000/src/test/java/org/apache/maven/it0000/PersonTest.java
Patch:
@@ -7,7 +7,7 @@ public class PersonTest
 {
     public void testPerson()
     {
-        IT0000Person person = new IT0000Person();
+        Person person = new Person();
         
         person.setName( "foo" );
         

File: maven-project/src/main/java/org/apache/maven/project/ProjectSorter.java
Patch:
@@ -116,7 +116,7 @@ public ProjectSorter( List projects )
                     dag.addEdge( id, parentId );
                 }
             }
-/*
+
             List buildPlugins = project.getBuildPlugins();
             if ( buildPlugins != null )
             {
@@ -144,7 +144,7 @@ public ProjectSorter( List projects )
                     }
                 }
             }
-*/
+
             for ( Iterator j = project.getBuildExtensions().iterator(); j.hasNext(); )
             {
                 Extension extension = (Extension) j.next();

File: maven-project/src/main/java/org/apache/maven/project/ProjectSorter.java
Patch:
@@ -116,7 +116,7 @@ public ProjectSorter( List projects )
                     dag.addEdge( id, parentId );
                 }
             }
-
+/*
             List buildPlugins = project.getBuildPlugins();
             if ( buildPlugins != null )
             {
@@ -144,7 +144,7 @@ public ProjectSorter( List projects )
                     }
                 }
             }
-
+*/
             for ( Iterator j = project.getBuildExtensions().iterator(); j.hasNext(); )
             {
                 Extension extension = (Extension) j.next();

File: maven-cli/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -43,11 +43,12 @@
  */
 public class MavenCli
 {
-    public static int main( String[] args )
+    public static void main( String[] args )
     {
         ClassWorld classWorld = new ClassWorld( "plexus.core", Thread.currentThread().getContextClassLoader() );
         
-        return main( args, classWorld );
+        int result = main( args, classWorld );
+        System.exit(result);
     }
 
     /**

File: maven-embedder/src/main/java/org/apache/maven/embedder/MavenEmbedder.java
Patch:
@@ -566,6 +566,7 @@ public void start(MavenEmbedRequest req)
         }
 
         embedder = new Embedder();
+        
         if ( logger != null )
         {
             embedder.setLoggerManager( new MavenEmbedderLoggerManager( new PlexusLoggerAdapter( logger ) ) );

File: maven-project/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java
Patch:
@@ -50,6 +50,7 @@
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.Iterator;
+import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Set;
 
@@ -302,7 +303,7 @@ public static Set createArtifacts( ArtifactFactory artifactFactory, List depende
                                        ArtifactFilter dependencyFilter, MavenProject project )
         throws InvalidDependencyVersionException
     {
-        Set projectArtifacts = new HashSet( dependencies.size() );
+        Set projectArtifacts = new LinkedHashSet( dependencies.size() );
 
         for ( Iterator i = dependencies.iterator(); i.hasNext(); )
         {

File: maven-project/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java
Patch:
@@ -32,6 +32,7 @@
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Iterator;
+import java.util.LinkedHashMap;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
@@ -243,7 +244,7 @@ private void assembleReportingInheritance( Model child, Model parent )
 
     private void assembleDependencyInheritance( Model child, Model parent )
     {
-        Map depsMap = new HashMap();
+        Map depsMap = new LinkedHashMap();
 
         List deps = parent.getDependencies();
 

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Patch:
@@ -291,7 +291,7 @@ protected void addPlugin( Plugin plugin, Artifact pluginArtifact, MavenProject p
 
         if ( addedPlugin == null )
         {
-            throw new IllegalStateException( "The PluginDescriptor for the plugin " + plugin + " was not found." );
+            throw new IllegalStateException( "The PluginDescriptor for the plugin " + plugin.getKey() + " was not found" );
         }
 
         addedPlugin.setClassRealm( child.getContainerRealm() );

File: maven-core/src/main/java/org/apache/maven/plugin/InvalidPluginException.java
Patch:
@@ -1,7 +1,7 @@
 package org.apache.maven.plugin;
 
 /*
- * Copyright 2001-2006 The Apache Software Foundation.
+ * Copyright 2001-2005 The Apache Software Foundation.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,7 +23,7 @@
  * @version $Id$
  */
 public class InvalidPluginException
-    extends PluginException
+    extends Exception
 {
     public InvalidPluginException( String message, Exception e )
     {

File: maven-core/src/main/java/org/apache/maven/plugin/PluginConfigurationException.java
Patch:
@@ -1,7 +1,7 @@
 package org.apache.maven.plugin;
 
 /*
- * Copyright 2001-2006 The Apache Software Foundation.
+ * Copyright 2001-2005 The Apache Software Foundation.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -39,7 +39,7 @@
  * @version $Id$
  */
 public class PluginConfigurationException
-    extends PluginException
+    extends Exception
 {
     private final PluginDescriptor pluginDescriptor;
 

File: maven-model-converter/src/main/java/org/apache/maven/model/converter/Maven1Converter.java
Patch:
@@ -63,7 +63,7 @@ public class Maven1Converter
     /**
      * Plexus component that manages plugin relocators
      *
-     * @component
+     * @plexus.requirement
      */
     private PluginRelocatorManager pluginRelocatorManager;
 

File: maven-cli/src/main/java/org/apache/maven/cli/AbstractConsoleDownloadMonitor.java
Patch:
@@ -26,7 +26,7 @@
  * 
  * @author <a href="mailto:carlos@apache.org">Carlos Sanchez</a>
  * @version $Id$
- * @since 2.0.5
+ * @since 2.1
  */
 public abstract class AbstractConsoleDownloadMonitor
     extends AbstractLogEnabled

File: bootstrap/bootstrap-mini/src/main/java/org/apache/maven/bootstrap/Bootstrap.java
Patch:
@@ -287,6 +287,8 @@ private File buildProject( ModelReader reader )
         {
             Dependency dep = (Dependency) i.next();
 
+            dep.getRepositories().addAll( reader.getRemoteRepositories() );
+
             if ( modelFileCache.containsKey( dep.getId() ) )
             {
                 buildProject( resolver.getArtifactFile( dep.getPomDependency() ).getParentFile(), false );

File: bootstrap/bootstrap-mini/src/main/java/org/apache/maven/bootstrap/model/Repository.java
Patch:
@@ -33,13 +33,13 @@ public class Repository
 
     private String basedir;
 
-    private String layout;
+    private String layout = LAYOUT_DEFAULT;
 
     private String id;
 
-    private boolean releases;
+    private boolean releases = true;
 
-    private boolean snapshots;
+    private boolean snapshots = true;
 
     public Repository()
     {

File: maven-artifact-manager/src/main/java/org/apache/maven/artifact/manager/WagonManager.java
Patch:
@@ -33,6 +33,8 @@
 import java.util.List;
 
 /**
+ * Manages <a href="http://maven.apache.org/wagon">Wagon</a> related operations in Maven.
+ * 
  * @author <a href="michal.maczka@dimatics.com">Michal Maczka </a>
  * @version $Id$
  */

File: maven-plugin-descriptor/src/main/java/org/apache/maven/plugin/descriptor/PluginDescriptorBuilder.java
Patch:
@@ -250,6 +250,8 @@ public MojoDescriptor buildComponentDescriptor( PlexusConfiguration c, PluginDes
 
             parameter.setDeprecated( d.getChild( "deprecated" ).getValue() );
 
+            parameter.setImplementation( d.getChild( "implementation" ).getValue() );
+
             parameters.add( parameter );
         }
 

File: maven-project/src/test/java/org/apache/maven/project/validation/DefaultModelValidatorTest.java
Patch:
@@ -216,7 +216,7 @@ public void testMissingResourceDirectory()
     private ModelValidationResult validate( String testName )
         throws Exception
     {
-        Reader input = new FileReader( getFileForClasspathResource( "/validation/" + testName ) );
+        Reader input = new FileReader( getFileForClasspathResource( "validation/" + testName ) );
 
         MavenXpp3Reader reader = new MavenXpp3Reader();
 

File: maven-plugin-tools/maven-plugin-tools-api/src/main/java/org/apache/maven/tools/plugin/generator/PrettyPrintXMLWriter.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.io.PrintWriter;
 import java.io.Writer;
-import java.util.LinkedList;
 
 /*
  * Copyright 2001-2006 The Apache Software Foundation.
@@ -21,7 +20,7 @@
  */
 
 /**
- * Copied from plexus-utils 1.2 as we can't upgrade it yet.
+ * Copied from plexus-utils 1.3-SNAPSHOT as we can't upgrade it yet.
  * This class can be removed when a newer version of plexus-utils is included with Maven
  * 
  * @see org.codehaus.plexus.util.xml.PrettyPrintXMLWriter

File: maven-project/src/main/java/org/apache/maven/project/interpolation/RegexBasedModelInterpolator.java
Patch:
@@ -164,7 +164,7 @@ private String interpolateInternal( String src, Model model, Map context )
             }
 
             // if the expression refers to itself, skip it.
-            if ( String.valueOf( value ).indexOf( realExpr ) > -1 )
+            if ( String.valueOf( value ).indexOf( wholeExpr ) > -1 )
             {
                 throw new ModelInterpolationException( wholeExpr, model.getId() + " references itself." );
             }

File: maven-project/src/main/java/org/apache/maven/project/interpolation/RegexBasedModelInterpolator.java
Patch:
@@ -164,7 +164,7 @@ private String interpolateInternal( String src, Model model, Map context )
             }
 
             // if the expression refers to itself, skip it.
-            if ( wholeExpr.equals( value ) )
+            if ( String.valueOf( value ).indexOf( realExpr ) > -1 )
             {
                 throw new ModelInterpolationException( wholeExpr, model.getId() + " references itself." );
             }

File: maven-core/src/main/java/org/apache/maven/DefaultMaven.java
Patch:
@@ -382,7 +382,7 @@ private void logReactorSummaryLine( String name, String status, long time )
 
         messageBuffer.append( name );
 
-        int dotCount = 55;
+        int dotCount = 54;
 
         dotCount -= name.length();
 
@@ -760,9 +760,9 @@ protected void stats( Date start )
 
     protected void line()
     {
-        getLogger().info( "----------------------------------------------------------------------------" );
+        getLogger().info( "------------------------------------------------------------------------" );
     }
-
+    
     protected static String formatTime( long ms )
     {
         long secs = ms / MS_PER_SEC;

File: maven-embedder/src/main/java/org/apache/maven/embedder/MavenEmbedder.java
Patch:
@@ -627,7 +627,7 @@ public void start()
 
             createMavenSettings();
 
-            profileManager.loadSettingsProfile( settings );
+            profileManager.loadSettingsProfiles( settings );
 
             localRepository = createLocalRepository( settings );
         }

File: maven-project/src/main/java/org/apache/maven/profiles/ProfileManager.java
Patch:
@@ -35,5 +35,5 @@ List getActiveProfiles()
 
     List getIdsActivatedByDefault();
 
-    void loadSettingsProfiles( Settings settings )
+    void loadSettingsProfiles( Settings settings );
 }
\ No newline at end of file

File: maven-artifact-test/src/main/java/org/apache/maven/artifact/test/ArtifactTestCase.java
Patch:
@@ -55,7 +55,7 @@ protected void setUp()
             Settings settings = new SettingsXpp3Reader().read( new FileReader( settingsFile ) );
             localRepo = settings.getLocalRepository();
         }
-        else
+        if ( localRepo == null )
         {
             localRepo = System.getProperty( "user.home" ) + "/.m2/repository";
         }

File: maven-artifact-manager/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java
Patch:
@@ -255,7 +255,8 @@ public void getArtifact( Artifact artifact, List remoteRepositories )
             }
         }
 
-        if ( !successful )
+        // if it already exists locally we were just trying to force it - ignore the update
+        if ( !successful && !artifact.getFile().exists() )
         {
             throw new ResourceDoesNotExistException( "Unable to download the artifact from any repository" );
         }

File: maven-artifact-manager/src/main/java/org/apache/maven/artifact/resolver/DefaultArtifactResolver.java
Patch:
@@ -152,7 +152,7 @@ else if ( !artifact.isResolved() )
                             wagonManager.getArtifact( artifact, repositories );
                         }
 
-                        if ( !artifact.isResolved() )
+                        if ( !artifact.isResolved() && !destination.exists() )
                         {
                             throw new ArtifactResolutionException(
                                 "Failed to resolve artifact, possibly due to a repository list that is not appropriately equipped for this artifact's metadata.",

File: maven-artifact/src/main/java/org/apache/maven/artifact/resolver/DefaultArtifactCollector.java
Patch:
@@ -351,7 +351,7 @@ void checkScopeUpdate( ResolutionNode farthest, ResolutionNode nearest, List lis
 
         if ( updateScope )
         {
-            fireEvent( ResolutionListener.UPDATE_SCOPE, listeners, farthest, nearestArtifact );
+            fireEvent( ResolutionListener.UPDATE_SCOPE, listeners, nearest, farthestArtifact );
 
             // previously we cloned the artifact, but it is more effecient to just update the scope
             // if problems are later discovered that the original object needs its original scope value, cloning may

File: integration-tests/maven-core-it-plugin/src/main/java/org/apache/maven/plugin/coreit/InterpolatedPomConfigurationMojo.java
Patch:
@@ -22,7 +22,7 @@ public class InterpolatedPomConfigurationMojo
     private String basedir;
 
     /**
-     * @parameter expression="${project.build.directory}"
+     * @parameter expression="${projectBuildDirectory}"
      */
     private String projectBuildDirectory;
 

File: integration-tests/maven-core-it-plugin/src/main/java/org/apache/maven/plugin/coreit/PackagingMojo.java
Patch:
@@ -78,3 +78,4 @@ public void execute()
     }
 
 }
+                    

File: integration-tests/maven-core-it-plugin/src/main/java/org/apache/maven/plugin/coreit/PackagingMojo.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.maven.plugin.AbstractMojo;
 import org.apache.maven.plugin.MojoExecutionException;
 import org.apache.maven.project.MavenProject;
+import org.codehaus.plexus.archiver.jar.JarArchiver;
 
 import java.io.File;
 
@@ -59,6 +60,8 @@ public void execute()
 
         MavenArchiver archiver = new MavenArchiver();
 
+        archiver.setArchiver( new JarArchiver() );
+
         archiver.setOutputFile( jarFile );
 
         try

File: maven-project/src/main/java/org/apache/maven/project/path/DefaultPathTranslator.java
Patch:
@@ -80,7 +80,7 @@ public String alignToBaseDirectory( String path, File basedir )
 
         if ( requiresBaseDirectoryAlignment( s ) )
         {
-            s = new File( basedir, s ).getPath();
+            s = new File( basedir, s ).getAbsolutePath();
         }
 
         return s;

File: maven-artifact-manager/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java
Patch:
@@ -317,6 +317,8 @@ private void getRemoteFile( ArtifactRepository repository, File destination, Str
         try
         {
             wagon = getWagon( protocol );
+
+            configureWagon( wagon, repository );
         }
         catch ( UnsupportedProtocolException e )
         {

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Patch:
@@ -1100,6 +1100,7 @@ public void initialize()
         artifacts.add( "maven-artifact" );
         artifacts.add( "maven-artifact-manager" );
         artifacts.add( "maven-core" );
+        artifacts.add( "maven-error-diagnoser" );
         artifacts.add( "maven-model" );
         artifacts.add( "maven-monitor" );
         artifacts.add( "maven-plugin-api" );

File: maven-profile/src/main/java/org/apache/maven/profiles/DefaultMavenProfilesBuilder.java
Patch:
@@ -48,6 +48,8 @@ public ProfilesRoot buildProfiles( File basedir )
             FileReader fileReader = null;
             try
             {
+                fileReader = new FileReader( profilesXml );
+                
                 StringWriter sWriter = new StringWriter();
                 
                 IOUtil.copy( fileReader, sWriter );

File: maven-model-converter/src/main/java/org/apache/maven/model/converter/ArtifactPomRewriter.java
Patch:
@@ -16,8 +16,6 @@
  * limitations under the License.
  */
 
-import com.sun.corba.se.impl.ior.ObjectAdapterIdArray;
-
 import java.io.Reader;
 import java.io.Writer;
 import java.util.List;

File: maven-model-converter/src/main/java/org/apache/maven/model/converter/PomV3ToV4Translator.java
Patch:
@@ -575,7 +575,7 @@ private List translateDependencies( List v3Deps )
                     String optional = v3Dep.getProperty( "optional" );
                     if ( StringUtils.isNotEmpty( optional ) )
                     {
-                        dep.setOptional( Boolean.parseBoolean( optional ) );
+                        dep.setOptional( Boolean.valueOf( optional ).booleanValue() );
                     }
 
                     deps.add( dep );

File: maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -971,7 +971,7 @@ else if ( StringUtils.isEmpty( parentModel.getVersion() ) )
 
             if ( model != null && !"pom".equals( model.getPackaging() ) )
             {
-                throw new ProjectBuildingException( projectId, "Project's parent has wrong packaging: " + model.getPackaging() + ". Must be 'pom'." );
+                throw new ProjectBuildingException( projectId, "Parent: " + model.getId() + " of project: " + projectId + " has wrong packaging: " + model.getPackaging() + ". Must be 'pom'." );
             }
             
             File parentProjectDir = null;

File: maven-artifact-ant/src/main/java/org/apache/maven/artifact/ant/RemoteRepository.java
Patch:
@@ -62,12 +62,12 @@ public void addProxy( Proxy proxy )
 
     public Proxy getProxy()
     {
-        return proxy;
+        return ( (RemoteRepository) getInstance() ).proxy;
     }
 
     public RepositoryPolicy getSnapshots()
     {
-        return snapshots;
+        return ( (RemoteRepository) getInstance() ).snapshots;
     }
 
     public void addSnapshots( RepositoryPolicy snapshots )
@@ -77,7 +77,7 @@ public void addSnapshots( RepositoryPolicy snapshots )
 
     public RepositoryPolicy getReleases()
     {
-        return releases;
+        return ( (RemoteRepository) getInstance() ).releases;
     }
 
     public void addReleases( RepositoryPolicy releases )

File: maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -1091,7 +1091,7 @@ private Model readModel( String projectId, String pomLocation, Reader reader )
         }
         catch ( XmlPullParserException e )
         {
-            throw new InvalidProjectModelException( projectId, pomLocation, "Parse error reading POM", e );
+            throw new InvalidProjectModelException( projectId, pomLocation, "Parse error reading POM. Reason: " + e.getMessage(), e );
         }
     }
 

File: maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -1080,7 +1080,7 @@ private Model readModel( String projectId, String pomLocation, Reader reader )
 
         if ( modelSource.indexOf( "<modelVersion>4.0.0" ) < 0 )
         {
-            throw new InvalidProjectModelException( projectId, pomLocation, "Invalid POM (not v4.0.0 modelVersion)" );
+            throw new InvalidProjectModelException( projectId, pomLocation, "Not a v4.0.0 POM." );
         }
 
         StringReader sReader = new StringReader( modelSource );

File: bootstrap/bootstrap-mini/src/main/java/org/apache/maven/bootstrap/util/SimpleArgumentParser.java
Patch:
@@ -156,7 +156,8 @@ public void addArgument( String argument, String description, boolean hasValue )
 
     public boolean isArgumentSet( String argument )
     {
-        return arguments.containsKey( argument );
+        Argument arg = (Argument) arguments.get( argument );
+        return arg.isSet();
     }
 
     private static class Argument

File: maven-plugins/maven-compiler-plugin/src/main/java/org/apache/maven/plugin/TestCompilerMojo.java
Patch:
@@ -149,7 +149,7 @@ protected SourceInclusionScanner getSourceInclusionScanner( String inputFileEndi
             {
                 testIncludes.add( "**/*." + inputFileEnding );
             }
-            scanner = new SimpleSourceInclusionScanner( testExcludes, testExcludes );
+            scanner = new SimpleSourceInclusionScanner( testIncludes, testExcludes );
         }
 
         return scanner;

File: maven-plugins/maven-ear-plugin/src/main/java/org/apache/maven/plugin/ear/EjbClientModule.java
Patch:
@@ -34,7 +34,7 @@ public EjbClientModule()
 
     public EjbClientModule( Artifact a )
     {
-        super( a );
+        super( a, null );
     }
 
     protected String getType()

File: maven-plugins/maven-ear-plugin/src/main/java/org/apache/maven/plugin/ear/WebModule.java
Patch:
@@ -63,11 +63,11 @@ public void appendModule( XMLWriter writer, String version )
         writer.endElement(); // module
     }
 
-    public void resolveArtifact( Set artifacts )
+    public void resolveArtifact( Set artifacts, String defaultJavaBundleDir )
         throws MojoFailureException
     {
         // Let's resolve the artifact
-        super.resolveArtifact( artifacts );
+        super.resolveArtifact( artifacts, defaultJavaBundleDir );
 
         // Context root has not been customized - using default
         if ( contextRoot == null )

File: maven-mboot2/src/main/java/compile/JavacCompiler.java
Patch:
@@ -164,9 +164,9 @@ protected List parseModernStream( BufferedReader input )
     {
         List errors = new ArrayList();
 
-        String line = null;
+        String line;
 
-        StringBuffer buffer = null;
+        StringBuffer buffer;
 
         while ( true )
         {

File: maven-artifact/src/main/java/org/apache/maven/artifact/resolver/DefaultArtifactCollector.java
Patch:
@@ -216,7 +216,8 @@ else if ( currentRange == null )
 
         fireEvent( ResolutionListener.INCLUDE_ARTIFACT, listeners, node );
 
-        if ( node.isActive() )
+        // don't pull in the transitive deps of a system-scoped dependency.
+        if ( node.isActive() && !Artifact.SCOPE_SYSTEM.equals( node.getArtifact().getScope() ) )
         {
             fireEvent( ResolutionListener.PROCESS_CHILDREN, listeners, node );
 

File: maven-artifact/src/main/java/org/apache/maven/artifact/resolver/DefaultArtifactCollector.java
Patch:
@@ -82,7 +82,7 @@ public ArtifactResolutionResult collect( Set artifacts, Artifact originatingArti
                     if ( node.filterTrail( filter ) )
                     {
                         // If it was optional, we don't add it or its children, just allow the update of the version and scope
-                        if ( !artifact.isOptional() )
+                        if ( node.isChildOfRootNode() || !artifact.isOptional() )
                         {
                             artifact.setDependencyTrail( node.getDependencyTrail() );
 
@@ -224,7 +224,7 @@ else if ( currentRange == null )
             {
                 ResolutionNode child = (ResolutionNode) i.next();
                 // We leave in optional ones, but don't pick up its dependencies
-                if ( !child.isResolved() && !child.getArtifact().isOptional() )
+                if ( !child.isResolved() && ( !child.getArtifact().isOptional() || child.isChildOfRootNode() ) )
                 {
                     Artifact artifact = child.getArtifact();
                     try

File: maven-artifact/src/test/java/org/apache/maven/artifact/resolver/DefaultArtifactCollectorTest.java
Patch:
@@ -497,9 +497,8 @@ public void testOptionalIncludedAtRoot()
         throws ArtifactResolutionException, InvalidVersionSpecificationException
     {
         ArtifactSpec a = createArtifact( "a", "1.0" );
-        createArtifact( "b", "1.0", true );
 
-        ArtifactSpec b = createArtifact( "b", "1.0" );
+        ArtifactSpec b = createArtifact( "b", "1.0", true );
 
         ArtifactResolutionResult res = collect( createSet( new Object[]{a.artifact, b.artifact} ) );
         assertEquals( "Check artifact list", createSet( new Object[]{a.artifact, b.artifact} ), res.getArtifacts() );

File: maven-plugins/maven-eclipse-plugin/src/main/java/org/apache/maven/plugin/eclipse/EclipsePlugin.java
Patch:
@@ -353,7 +353,8 @@ public void write()
         new EclipseSettingsWriter( getLog() ).write( projectBaseDir, outputDir, project );
 
         new EclipseWtpmodulesWriter( getLog() ).write( outputDir, project, reactorArtifacts, sourceDirs,
-                                                       localRepository );
+                                                       localRepository,artifactResolver,
+                                                       remoteArtifactRepositories );
 
         getLog().info( Messages.getString( "EclipsePlugin.wrote", //$NON-NLS-1$
                                            new Object[]{project.getArtifactId(), outputDir.getAbsolutePath()} ) );

File: maven-plugins/maven-eclipse-plugin/src/test/java/org/apache/maven/plugin/eclipse/AbstractEclipsePluginTestCase.java
Patch:
@@ -203,6 +203,7 @@ protected void assertDoesNotContain( String message, String full, String substri
             buf.append( "Unexpected \"" );
             buf.append( substring );
             buf.append( "\" found" );
+            fail( buf.toString() );
         }
     }
 

File: maven-mboot2/src/main/java/MBoot.java
Patch:
@@ -1063,6 +1063,7 @@ public String getCurrentUtcDate()
     {
         TimeZone timezone = TimeZone.getTimeZone( "UTC" );
         DateFormat fmt = new SimpleDateFormat( "yyyyMMddHHmmss" );
+        fmt.setTimeZone( timezone );
         return fmt.format( new Date() );
     }
 

File: maven-project/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java
Patch:
@@ -169,7 +169,8 @@ public ResolutionGroup retrieve( Artifact artifact, ArtifactRepository localRepo
                             message += "  " + relocation.getMessage() + "\n";
                         }
 
-                        getLogger().warn( message + "\n" );
+                        getLogger().warn( "While downloading " + pomArtifact.getGroupId() + ":" +
+                            pomArtifact.getArtifactId() + ":" + pomArtifact.getVersion() + message + "\n" );
                     }
                     else
                     {

File: maven-project/src/main/java/org/apache/maven/project/MavenProject.java
Patch:
@@ -1415,6 +1415,9 @@ private static String getProjectReferenceId( String groupId, String artifactId )
         return groupId + ":" + artifactId;
     }
 
+    /**
+     * @deprecated Use MavenProjectHelper.attachArtifact(..) instead.
+     */
     public void attachArtifact( String type, String classifier, File file )
     {
     }

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Patch:
@@ -337,7 +337,7 @@ public void executeMojo( MavenProject project, MojoExecution mojoExecution, Mave
         if ( mojoDescriptor.isProjectRequired() && !session.isUsingPOMsFromFilesystem() )
         {
             throw new MojoExecutionException( "Cannot execute mojo: " + mojoDescriptor.getGoal() +
-                ". It requires a project, but the build is not using one." );
+                ". It requires a project with an existing pom.xml, but the build is not using one." );
         }
 
         if ( mojoDescriptor.isOnlineRequired() && session.getSettings().isOffline() )

File: maven-plugins/maven-eclipse-plugin/src/main/java/org/apache/maven/plugin/eclipse/EclipsePlugin.java
Patch:
@@ -350,9 +350,9 @@ public void write()
         new EclipseProjectWriter( getLog() ).write( projectBaseDir, outputDir, project, executedProject,
                                                     reactorArtifacts, projectnatures, buildcommands );
 
-        new EclipseSettingsWriter( getLog() ).write( projectBaseDir, outputDir, executedProject );
+        new EclipseSettingsWriter( getLog() ).write( projectBaseDir, outputDir, project );
 
-        new EclipseWtpmodulesWriter( getLog() ).write( outputDir, executedProject, reactorArtifacts, sourceDirs,
+        new EclipseWtpmodulesWriter( getLog() ).write( outputDir, project, reactorArtifacts, sourceDirs,
                                                        localRepository );
 
         getLog().info( Messages.getString( "EclipsePlugin.wrote", //$NON-NLS-1$

File: maven-project/src/test/java/org/apache/maven/project/validation/DefaultModelValidatorTest.java
Patch:
@@ -124,7 +124,7 @@ public void testMissingDependencyVersion()
 
         assertEquals( 1, result.getMessageCount() );
 
-        assertTrue( result.getMessage( 0 ).indexOf( "'dependencies.dependency.version' is missing." ) > -1 );
+        assertTrue( result.getMessage( 0 ).indexOf( "'dependencies.dependency.version' is missing" ) > -1 );
     }
 
     public void testMissingDependencyManagementArtifactId()

File: maven-artifact/src/main/java/org/apache/maven/artifact/resolver/AbstractArtifactResolutionException.java
Patch:
@@ -154,7 +154,7 @@ private static String constructMessageBase( String message, String groupId, Stri
 
         sb.append( message );
         sb.append( LS );
-        sb.append( "  " + groupId + ":" + artifactId + ":" + version + ":" + type );
+        sb.append( "  " + groupId + ":" + artifactId + ":" + type + ":" + version );
         sb.append( LS );
         if ( remoteRepositories != null && !remoteRepositories.isEmpty() )
         {

File: maven-plugins/maven-jar-plugin/src/test/java/org/apache/maven/plugin/jar/JarSignMojoTest.java
Patch:
@@ -38,7 +38,7 @@
  * too complex with very few benefits.
  * 
  * @author Jerome Lacoste <jerome@coffeebreaks.org>
- * @version $Id:$
+ * @version $Id$
  */
 public class JarSignMojoTest
     extends TestCase

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/translate/PomV3ToV4Translator.java
Patch:
@@ -462,6 +462,8 @@ private DistributionManagement translateDistributionManagement( PomKey pomKey,
 
         distributionManagement.setRepository( repository );
 
+        distributionManagement.setStatus("converted");
+
         if ( site == null && repository == null )
         {
             return null;
@@ -648,7 +650,7 @@ private Build translateBuild( org.apache.maven.model.v3_0_0.Build v3Build, Repor
                 {
                     Plugin plugin = new Plugin();
                     plugin.setGroupId( "org.apache.maven.plugins" );
-                    plugin.setArtifactId( "surefire" );
+                    plugin.setArtifactId( "maven-surefire-plugin" );
 
                     Xpp3Dom config = new Xpp3Dom( "configuration" );
 

File: maven-plugins/maven-javadoc-plugin/src/main/java/org/apache/maven/plugin/javadoc/JavadocReport.java
Patch:
@@ -1194,6 +1194,6 @@ private void copyDefaultStylesheet( File outputDirectory )
 
     public boolean isExternalReport()
     {
-        return true && super.isExternalReport();
+        return true;
     }
 }

File: maven-reporting/maven-reporting-impl/src/main/java/org/apache/maven/reporting/AbstractMavenMultiPageReport.java
Patch:
@@ -108,13 +108,13 @@ protected void closeReport()
                 MultiPageSink currentSink = (MultiPageSink) i.next();
 
                 currentSink.paragraph();
-                for ( Iterator j = sinks.iterator(); i.hasNext(); )
+                for ( Iterator j = sinks.iterator(); j.hasNext(); )
                 {
                     if ( counter > 1 )
                     {
                         currentSink.text( "&nbsp;" );
                     }
-                    MultiPageSink sink = (MultiPageSink) i.next();
+                    MultiPageSink sink = (MultiPageSink) j.next();
                     sink.link( sink.getOutputName() + ".html" );
                     sink.text( String.valueOf( counter++ ) );
                     sink.link_();

File: maven-core/src/main/java/org/apache/maven/execution/ReactorManager.java
Patch:
@@ -16,8 +16,10 @@
  * limitations under the License.
  */
 
+
 import org.apache.maven.artifact.ArtifactUtils;
 import org.apache.maven.plugin.descriptor.PluginDescriptor;
+import org.apache.maven.project.DuplicateProjectException;
 import org.apache.maven.project.MavenProject;
 import org.apache.maven.project.ProjectSorter;
 import org.codehaus.plexus.util.dag.CycleDetectedException;
@@ -49,7 +51,7 @@ public class ReactorManager
     private Map buildSuccessesByProject = new HashMap();
 
     public ReactorManager( List projects )
-        throws CycleDetectedException
+        throws CycleDetectedException, DuplicateProjectException
     {
         this.sorter = new ProjectSorter( projects );
     }

File: maven-core/src/test/java/org/apache/maven/plugin/PluginParameterExpressionEvaluatorTest.java
Patch:
@@ -16,6 +16,7 @@
  * limitations under the License.
  */
 
+
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.factory.ArtifactFactory;
 import org.apache.maven.artifact.repository.ArtifactRepository;
@@ -28,6 +29,7 @@
 import org.apache.maven.monitor.event.DefaultEventDispatcher;
 import org.apache.maven.plugin.descriptor.MojoDescriptor;
 import org.apache.maven.plugin.descriptor.PluginDescriptor;
+import org.apache.maven.project.DuplicateProjectException;
 import org.apache.maven.project.MavenProject;
 import org.apache.maven.settings.Settings;
 import org.codehaus.plexus.PlexusContainer;
@@ -141,7 +143,7 @@ public void testValueExtractionFromSystemPropertiesWithMissingProject_WithDotNot
     }
 
     private static MavenSession createSession( PlexusContainer container, ArtifactRepository repo )
-        throws CycleDetectedException
+        throws CycleDetectedException, DuplicateProjectException
     {
         return new MavenSession( container, new Settings(), repo, new DefaultEventDispatcher(),
                                  new ReactorManager( Collections.EMPTY_LIST ), Collections.EMPTY_LIST, ".",

File: maven-plugins/maven-clover-plugin/src/main/java/org/apache/maven/plugin/clover/CloverCheckMojo.java
Patch:
@@ -39,13 +39,13 @@ public class CloverCheckMojo
      * @parameter expression="${project.build.directory}/clover/clover.db"
      * @required
      */
-    protected String cloverDatabase;
+    private String cloverDatabase;
 
     /**
      * @parameter default-value="70%"
      * @required
      */
-    protected String targetPercentage;
+    private String targetPercentage;
 
     public void execute()
         throws MojoExecutionException

File: maven-artifact-manager/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java
Patch:
@@ -697,7 +697,7 @@ public void setInteractive( boolean interactive )
      * 
      * @param wagon the wagon to configure
      * @param repository the repository that has the configuration
-     * @throws ConfigurationException if the wagon can't be configured
+     * @throws WagonConfigurationException wraps any error given during configuration of the wagon instance
      */
     private void configureWagon( Wagon wagon, ArtifactRepository repository )
         throws WagonConfigurationException

File: maven-plugin-tools/maven-plugin-tools-model/src/main/java/org/apache/maven/plugin/tools/model/PluginMetadataParser.java
Patch:
@@ -20,6 +20,7 @@
 
 public class PluginMetadataParser
 {
+    public static final String IMPL_BASE_PLACEHOLDER = "<REPLACE-WITH-MOJO-PATH>";
     
     public Set parseMojoDescriptors( File metadataFile )
         throws PluginMetadataParseException
@@ -71,7 +72,7 @@ private MojoDescriptor asDescriptor( File metadataFile, Mojo mojo )
     {
         MojoDescriptor descriptor = new MojoDescriptor();
         
-        descriptor.setImplementation( mojo.getCall() );
+        descriptor.setImplementation( IMPL_BASE_PLACEHOLDER + ":" + mojo.getCall() );
         
         descriptor.setGoal( mojo.getGoal() );
         descriptor.setPhase( mojo.getPhase() );
@@ -106,6 +107,7 @@ private MojoDescriptor asDescriptor( File metadataFile, Mojo mojo )
                 dParam.setDescription( param.getDescription() );
                 dParam.setEditable( !param.isReadonly() );
                 dParam.setExpression( param.getExpression() );
+                dParam.setDefaultValue( param.getDefaultValue() );
                 
                 String property = param.getProperty();
                 if ( StringUtils.isNotEmpty( property ) )

File: maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java
Patch:
@@ -99,17 +99,18 @@ else if ( otherVersion.qualifier != null )
 
     private int compareIntegers( Integer i1, Integer i2 )
     {
+        // treat null as 0 in comparison
         if ( i1 == null ? i2 == null : i1.equals( i2 ) )
         {
             return 0;
         }
         else if ( i1 == null )
         {
-            return -1;
+            return -i2.intValue();
         }
         else if ( i2 == null )
         {
-            return 1;
+            return i1.intValue();
         }
         else
         {

File: maven-plugins/maven-checkstyle-plugin/src/main/java/org/apache/maven/plugin/checkstyle/CheckstyleReportGenerator.java
Patch:
@@ -186,7 +186,7 @@ private void doFilesSummary( Map filesMap )
             sink.tableRow();
             
             sink.tableCell();
-            sink.link( "#" + filename );
+            sink.link( "#" + filename.replace( '/', '.' ) );
             sink.text( filename );
             sink.link_();
             sink.tableCell_();
@@ -221,7 +221,7 @@ private void doDetails( Map filesMap )
             
             sink.section1();
             sink.sectionTitle1();
-            sink.anchor( file );
+            sink.anchor( file.replace( '/', '.' ) );
             sink.text( file );
             sink.anchor_();
             sink.sectionTitle1_();

File: maven-plugins/maven-war-plugin/src/main/java/org/apache/maven/plugin/war/AbstractWarMojo.java
Patch:
@@ -25,6 +25,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
@@ -153,7 +154,7 @@ public void setWebXml( String webXml )
      */
     protected String[] getExcludes()
     {
-        List excludeList = FileUtils.getDefaultExcludesAsList();
+        List excludeList = new ArrayList( FileUtils.getDefaultExcludesAsList() );
         if ( warSourceExcludes != null && !"".equals( warSourceExcludes ) )
         {
             excludeList.add( warSourceExcludes );

File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java
Patch:
@@ -454,7 +454,7 @@ private void executeGoal( String task, MavenSession session, MavenProject projec
         }
         catch ( PluginNotFoundException e )
         {
-            throw new BuildFailureException( "A required plugin was not found", e.getMessage(), e );
+            throw new BuildFailureException( "A required plugin was not found: " + e.getMessage(), e );
         }
     }
 
@@ -537,7 +537,7 @@ private void executeGoals( List goals, MavenSession session, MavenProject projec
             }
             catch ( MojoFailureException e )
             {
-                throw new BuildFailureException( e.getMessage(), e.getLongMessage(), e );
+                throw new BuildFailureException( e.getMessage(), e );
             }
             catch ( MojoExecutionException e )
             {

File: maven-artifact-manager/src/main/java/org/apache/maven/artifact/transform/DefaultArtifactTransformationManager.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.maven.artifact.deployer.ArtifactDeploymentException;
 import org.apache.maven.artifact.installer.ArtifactInstallationException;
 import org.apache.maven.artifact.repository.ArtifactRepository;
+import org.apache.maven.artifact.resolver.ArtifactNotFoundException;
 import org.apache.maven.artifact.resolver.ArtifactResolutionException;
 
 import java.util.Iterator;
@@ -31,7 +32,7 @@ public class DefaultArtifactTransformationManager
     private List artifactTransformations;
 
     public void transformForResolve( Artifact artifact, List remoteRepositories, ArtifactRepository localRepository )
-        throws ArtifactResolutionException
+        throws ArtifactResolutionException, ArtifactNotFoundException
     {
         for ( Iterator i = artifactTransformations.iterator(); i.hasNext(); )
         {

File: maven-artifact-manager/src/main/java/org/apache/maven/artifact/transform/LatestArtifactTransformation.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.artifact.repository.metadata.RepositoryMetadataResolutionException;
 import org.apache.maven.artifact.repository.metadata.Versioning;
+import org.apache.maven.artifact.resolver.ArtifactNotFoundException;
 import org.apache.maven.artifact.resolver.ArtifactResolutionException;
 
 import java.util.List;
@@ -28,7 +29,7 @@ public class LatestArtifactTransformation
     extends AbstractVersionTransformation
 {
     public void transformForResolve( Artifact artifact, List remoteRepositories, ArtifactRepository localRepository )
-        throws ArtifactResolutionException
+        throws ArtifactResolutionException, ArtifactNotFoundException
     {
         if ( Artifact.LATEST_VERSION.equals( artifact.getVersion() ) )
         {
@@ -37,7 +38,7 @@ public void transformForResolve( Artifact artifact, List remoteRepositories, Art
                 String version = resolveVersion( artifact, localRepository, remoteRepositories );
                 if ( Artifact.LATEST_VERSION.equals( version ) )
                 {
-                    throw new ArtifactResolutionException( "Unable to determine the latest version", artifact );
+                    throw new ArtifactNotFoundException( "Unable to determine the latest version", artifact );
                 }
 
                 artifact.setBaseVersion( version );

File: maven-artifact-manager/src/main/java/org/apache/maven/artifact/transform/ReleaseArtifactTransformation.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.maven.artifact.repository.metadata.ArtifactRepositoryMetadata;
 import org.apache.maven.artifact.repository.metadata.RepositoryMetadataResolutionException;
 import org.apache.maven.artifact.repository.metadata.Versioning;
+import org.apache.maven.artifact.resolver.ArtifactNotFoundException;
 import org.apache.maven.artifact.resolver.ArtifactResolutionException;
 
 import java.util.List;
@@ -36,7 +37,7 @@ public class ReleaseArtifactTransformation
     extends AbstractVersionTransformation
 {
     public void transformForResolve( Artifact artifact, List remoteRepositories, ArtifactRepository localRepository )
-        throws ArtifactResolutionException
+        throws ArtifactResolutionException, ArtifactNotFoundException
     {
         if ( Artifact.RELEASE_VERSION.equals( artifact.getVersion() ) )
         {
@@ -46,7 +47,7 @@ public void transformForResolve( Artifact artifact, List remoteRepositories, Art
 
                 if ( Artifact.RELEASE_VERSION.equals( version ) )
                 {
-                    throw new ArtifactResolutionException( "Unable to determine the release version", artifact );
+                    throw new ArtifactNotFoundException( "Unable to determine the release version", artifact );
                 }
 
                 artifact.setBaseVersion( version );

File: maven-artifact/src/main/java/org/apache/maven/artifact/resolver/AbstractArtifactResolutionException.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.repository.ArtifactRepository;
 
+import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 
@@ -161,7 +162,7 @@ private static String constructMessageBase( String message, String groupId, Stri
             sb.append( "from the specified remote repositories:" );
             sb.append( LS + "  " );
 
-            for ( Iterator i = remoteRepositories.iterator(); i.hasNext(); )
+            for ( Iterator i = new HashSet( remoteRepositories ).iterator(); i.hasNext(); )
             {
                 ArtifactRepository remoteRepository = (ArtifactRepository) i.next();
 

File: maven-artifact/src/main/java/org/apache/maven/artifact/resolver/ArtifactNotFoundException.java
Patch:
@@ -29,7 +29,7 @@ public class ArtifactNotFoundException
 {
     private String downloadUrl;
 
-    protected ArtifactNotFoundException( String message, Artifact artifact )
+    public ArtifactNotFoundException( String message, Artifact artifact )
     {
         this( message, artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion(), artifact.getType(), null,
               null );

File: maven-artifact/src/main/java/org/apache/maven/artifact/transform/ArtifactTransformation.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.maven.artifact.deployer.ArtifactDeploymentException;
 import org.apache.maven.artifact.installer.ArtifactInstallationException;
 import org.apache.maven.artifact.repository.ArtifactRepository;
+import org.apache.maven.artifact.resolver.ArtifactNotFoundException;
 import org.apache.maven.artifact.resolver.ArtifactResolutionException;
 
 import java.util.List;
@@ -42,7 +43,7 @@ public interface ArtifactTransformation
      * @param localRepository the local repository
      */
     void transformForResolve( Artifact artifact, List remoteRepositories, ArtifactRepository localRepository )
-        throws ArtifactResolutionException;
+        throws ArtifactResolutionException, ArtifactNotFoundException;
 
     /**
      * Take in a artifact and return the transformed artifact for locating in the local repository. If no

File: maven-artifact/src/main/java/org/apache/maven/artifact/transform/ArtifactTransformationManager.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.maven.artifact.deployer.ArtifactDeploymentException;
 import org.apache.maven.artifact.installer.ArtifactInstallationException;
 import org.apache.maven.artifact.repository.ArtifactRepository;
+import org.apache.maven.artifact.resolver.ArtifactNotFoundException;
 import org.apache.maven.artifact.resolver.ArtifactResolutionException;
 
 import java.util.List;
@@ -40,7 +41,7 @@ public interface ArtifactTransformationManager
      * @param localRepository the local repository
      */
     void transformForResolve( Artifact artifact, List remoteRepositories, ArtifactRepository localRepository )
-        throws ArtifactResolutionException;
+        throws ArtifactResolutionException, ArtifactNotFoundException;
 
     /**
      * Take in a artifact and return the transformed artifact for locating in the local repository. If no

File: maven-core/src/main/java/org/apache/maven/plugin/version/DefaultPluginVersionManager.java
Patch:
@@ -215,8 +215,7 @@ private String resolvePluginVersion( String groupId, String artifactId, MavenPro
         // if we still haven't found a version, then fail early before we get into the update goop.
         if ( StringUtils.isEmpty( version ) )
         {
-            throw new PluginVersionNotFoundException( groupId, artifactId,
-                                                      "Failed to resolve a valid version for this plugin" );
+            throw new PluginVersionNotFoundException( groupId, artifactId );
         }
 
         // if the plugin registry is inactive, then the rest of this goop is useless...

File: maven-core/src/main/java/org/apache/maven/plugin/version/PluginVersionNotFoundException.java
Patch:
@@ -23,9 +23,9 @@ public class PluginVersionNotFoundException
 
     private final String artifactId;
 
-    public PluginVersionNotFoundException( String groupId, String artifactId, String baseMessage )
+    public PluginVersionNotFoundException( String groupId, String artifactId )
     {
-        super( "Error resolving version for \'" + groupId + ":" + artifactId + "\': " + baseMessage );
+        super( "The plugin \'" + groupId + ":" + artifactId + "\' does not exist or no valid version could be found" );
 
         this.groupId = groupId;
         this.artifactId = artifactId;

File: maven-plugins/maven-deploy-plugin/src/main/java/org/apache/maven/plugin/deploy/DeployMojo.java
Patch:
@@ -156,8 +156,7 @@ public void execute()
         }
         catch ( ArtifactDeploymentException e )
         {
-            throw new MojoExecutionException(
-                "Error deploying artifact '" + artifact.getDependencyConflictId() + "': " + e.getMessage(), e );
+            throw new MojoExecutionException( e.getMessage(), e );
         }
     }
 }
\ No newline at end of file

File: maven-plugins/maven-install-plugin/src/main/java/org/apache/maven/plugin/install/InstallMojo.java
Patch:
@@ -125,8 +125,7 @@ public void execute()
         }
         catch ( ArtifactInstallationException e )
         {
-            throw new MojoExecutionException(
-                "Error installing artifact '" + artifact.getDependencyConflictId() + "': " + e.getMessage(), e );
+            throw new MojoExecutionException( e.getMessage(), e );
         }
     }
 }

File: maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -472,7 +472,7 @@ private void checkStatusAndUpdate( Artifact projectArtifact, ArtifactStatus stat
 
     private Model createStubModel( Artifact projectArtifact )
     {
-        getLogger().warn( "\n  ***** Using defaults for missing POM " + projectArtifact + " *****\n" );
+        getLogger().debug( "Using defaults for missing POM " + projectArtifact );
 
         Model model = new Model();
         model.setModelVersion( "4.0.0" );

File: maven-artifact-manager/src/main/java/org/apache/maven/artifact/manager/WagonManager.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.maven.wagon.authentication.AuthenticationInfo;
 import org.apache.maven.wagon.events.TransferListener;
 import org.apache.maven.wagon.proxy.ProxyInfo;
+import org.codehaus.plexus.util.xml.Xpp3Dom;
 
 import java.io.File;
 import java.util.List;
@@ -76,5 +77,7 @@ void addAuthenticationInfo( String repositoryId, String username, String passwor
 
     AuthenticationInfo getAuthenticationInfo( String id );
 
+    void addConfiguration( String repositoryId, Xpp3Dom configuration );
+    
     void setInteractive( boolean interactive );
 }
\ No newline at end of file

File: maven-artifact-manager/src/main/java/org/apache/maven/artifact/repository/metadata/DefaultRepositoryMetadataManager.java
Patch:
@@ -345,7 +345,7 @@ private void resolveAlways( ArtifactMetadata metadata, ArtifactRepository reposi
         }
         catch ( TransferFailedException e )
         {
-            getLogger().warn( metadata + " could not be found on repository: " + repository.getId() +
+            getLogger().warn( metadata + " could not be retrieved from repository: " + repository.getId() +
                 " due to an error: " + e.getMessage() );
             getLogger().info( "Repository '" + repository.getId() + "' will be blacklisted" );
             getLogger().debug( "Exception", e );

File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java
Patch:
@@ -333,6 +333,7 @@ else if ( ReactorManager.FAIL_AT_END.equals( rm.getFailureBehavior() ) )
         {
             rm.blackList( project );
         }
+        // if NEVER, don't blacklist
         return false;
     }
 

File: maven-core/src/main/java/org/apache/maven/Maven.java
Patch:
@@ -17,7 +17,6 @@
  */
 
 import org.apache.maven.execution.MavenExecutionRequest;
-import org.apache.maven.execution.MavenExecutionResponse;
 import org.apache.maven.reactor.MavenExecutionException;
 
 /**
@@ -32,6 +31,6 @@ public interface Maven
 
     String RELEASE_POMv4 = "release-pom.xml";
 
-    MavenExecutionResponse execute( MavenExecutionRequest request )
-        throws MavenExecutionException, SettingsConfigurationException;
+    void execute( MavenExecutionRequest request )
+        throws MavenExecutionException;
 }
\ No newline at end of file

File: maven-core/src/main/java/org/apache/maven/execution/BuildFailure.java
Patch:
@@ -37,12 +37,12 @@ public class BuildFailure
         this.time = time;
     }
 
-    String getTask()
+    public String getTask()
     {
         return task;
     }
 
-    Exception getCause()
+    public Exception getCause()
     {
         return cause;
     }

File: maven-core/src/main/java/org/apache/maven/execution/MavenExecutionRequest.java
Patch:
@@ -69,4 +69,6 @@ public interface MavenExecutionRequest
     Properties getExecutionProperties();
 
     Date getStartTime();
+
+    boolean isShowErrors();
 }

File: maven-core/src/main/java/org/apache/maven/execution/MavenSession.java
Patch:
@@ -50,7 +50,7 @@ public class MavenSession
 
     private final String executionRootDir;
 
-    private boolean usingPOMsFromFilesystem;
+    private boolean usingPOMsFromFilesystem = true;
 
     private final Properties executionProperties;
 

File: maven-core/src/main/java/org/apache/maven/lifecycle/LifecycleExecutor.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-import org.apache.maven.execution.MavenExecutionResponse;
+import org.apache.maven.BuildFailureException;
 import org.apache.maven.execution.MavenSession;
 import org.apache.maven.execution.ReactorManager;
 import org.apache.maven.monitor.event.EventDispatcher;
@@ -29,7 +29,7 @@ public interface LifecycleExecutor
 {
     String ROLE = LifecycleExecutor.class.getName();
 
-    MavenExecutionResponse execute( MavenSession session, ReactorManager rpm, EventDispatcher dispatcher )
-        throws LifecycleExecutionException;
+    void execute( MavenSession session, ReactorManager rpm, EventDispatcher dispatcher )
+        throws LifecycleExecutionException, BuildFailureException;
 
 }

File: maven-core/src/main/java/org/apache/maven/plugin/version/PluginVersionManager.java
Patch:
@@ -17,6 +17,7 @@
  */
 
 import org.apache.maven.artifact.repository.ArtifactRepository;
+import org.apache.maven.plugin.InvalidPluginException;
 import org.apache.maven.project.MavenProject;
 import org.apache.maven.settings.Settings;
 
@@ -26,10 +27,10 @@ public interface PluginVersionManager
 
     String resolvePluginVersion( String groupId, String artifactId, MavenProject project, Settings settings,
                                  ArtifactRepository localRepository )
-        throws PluginVersionResolutionException;
+        throws PluginVersionResolutionException, InvalidPluginException, PluginVersionNotFoundException;
 
     String resolveReportPluginVersion( String groupId, String artifactId, MavenProject project, Settings settings,
                                        ArtifactRepository localRepository )
-        throws PluginVersionResolutionException;
+        throws PluginVersionResolutionException, InvalidPluginException, PluginVersionNotFoundException;
 
 }

File: maven-plugin-descriptor/src/main/java/org/apache/maven/plugin/descriptor/PluginDescriptorBuilder.java
Patch:
@@ -107,7 +107,7 @@ public MojoDescriptor buildComponentDescriptor( PlexusConfiguration c, PluginDes
         mojo.setPluginDescriptor( pluginDescriptor );
 
         mojo.setGoal( c.getChild( "goal" ).getValue() );
-
+        
         mojo.setImplementation( c.getChild( "implementation" ).getValue() );
 
         PlexusConfiguration langConfig = c.getChild( "language" );

File: maven-plugins/maven-project-info-reports-plugin/src/test/java/org/apache/maven/report/projectinfo/DependenciesReportTest.java
Patch:
@@ -52,7 +52,7 @@ protected String getReportName()
     /**
      * Test a the <code>ClearCase</code> SCM report
      */
-    public void testClearCaseScmReport()
+    public void testDependenciesReport()
         throws Exception
     {
         loadTestMavenProject( TEST1 );

File: maven-core/src/main/java/org/apache/maven/usability/ArtifactNotFoundDiagnoser.java
Patch:
@@ -18,6 +18,8 @@
 
 import org.apache.maven.artifact.manager.WagonManager;
 import org.apache.maven.artifact.resolver.ArtifactNotFoundException;
+import org.apache.maven.usability.diagnostics.DiagnosisUtils;
+import org.apache.maven.usability.diagnostics.ErrorDiagnoser;
 
 public class ArtifactNotFoundDiagnoser
     implements ErrorDiagnoser
@@ -46,7 +48,7 @@ public String diagnose( Throwable error )
 
         if ( !wagonManager.isOnline() )
         {
-            message.append( "\n" ).append( DiagnosisUtils.getOfflineWarning() );
+            message.append( "\n" ).append( SystemWarnings.getOfflineWarning() );
         }
 
         Throwable root = DiagnosisUtils.getRootCause( exception );

File: maven-core/src/main/java/org/apache/maven/usability/ArtifactResolverDiagnoser.java
Patch:
@@ -18,6 +18,8 @@
 
 import org.apache.maven.artifact.manager.WagonManager;
 import org.apache.maven.artifact.resolver.ArtifactResolutionException;
+import org.apache.maven.usability.diagnostics.DiagnosisUtils;
+import org.apache.maven.usability.diagnostics.ErrorDiagnoser;
 
 public class ArtifactResolverDiagnoser
     implements ErrorDiagnoser
@@ -43,7 +45,7 @@ public String diagnose( Throwable error )
 
         if ( !wagonManager.isOnline() )
         {
-            message.append( "\n" ).append( DiagnosisUtils.getOfflineWarning() );
+            message.append( "\n" ).append( SystemWarnings.getOfflineWarning() );
         }
 
         Throwable root = DiagnosisUtils.getRootCause( exception );

File: maven-core/src/main/java/org/apache/maven/usability/InvalidArtifactDiagnoser.java
Patch:
@@ -1,6 +1,7 @@
 package org.apache.maven.usability;
 
 import org.apache.maven.artifact.InvalidArtifactRTException;
+import org.apache.maven.usability.diagnostics.ErrorDiagnoser;
 
 /*
  * Copyright 2001-2005 The Apache Software Foundation.

File: maven-core/src/main/java/org/apache/maven/usability/MojoExecutionExceptionDiagnoser.java
Patch:
@@ -1,6 +1,8 @@
 package org.apache.maven.usability;
 
 import org.apache.maven.plugin.MojoExecutionException;
+import org.apache.maven.usability.diagnostics.DiagnosisUtils;
+import org.apache.maven.usability.diagnostics.ErrorDiagnoser;
 
 public class MojoExecutionExceptionDiagnoser
     implements ErrorDiagnoser

File: maven-core/src/main/java/org/apache/maven/usability/PluginConfigurationDiagnoser.java
Patch:
@@ -21,6 +21,8 @@
 import org.apache.maven.plugin.descriptor.MojoDescriptor;
 import org.apache.maven.plugin.descriptor.Parameter;
 import org.apache.maven.plugin.descriptor.PluginDescriptor;
+import org.apache.maven.usability.diagnostics.DiagnosisUtils;
+import org.apache.maven.usability.diagnostics.ErrorDiagnoser;
 import org.apache.maven.usability.plugin.Expression;
 import org.apache.maven.usability.plugin.ExpressionDocumentationException;
 import org.apache.maven.usability.plugin.ExpressionDocumenter;

File: maven-core/src/main/java/org/apache/maven/usability/PluginContainerDiagnoser.java
Patch:
@@ -2,6 +2,8 @@
 
 import org.apache.maven.model.Plugin;
 import org.apache.maven.plugin.PluginContainerException;
+import org.apache.maven.usability.diagnostics.DiagnosisUtils;
+import org.apache.maven.usability.diagnostics.ErrorDiagnoser;
 
 public class PluginContainerDiagnoser
     implements ErrorDiagnoser
@@ -31,7 +33,7 @@ public String diagnose( Throwable error )
         
         if ( originalMessage.startsWith( "Cannot resolve artifact" ) )
         {
-            message.append( DiagnosisUtils.getOfflineWarning() );
+            message.append( SystemWarnings.getOfflineWarning() );
         }
         else
         {

File: maven-core/src/main/java/org/apache/maven/usability/ProfileActivationDiagnoser.java
Patch:
@@ -1,6 +1,8 @@
 package org.apache.maven.usability;
 
 import org.apache.maven.profiles.activation.ProfileActivationException;
+import org.apache.maven.usability.diagnostics.DiagnosisUtils;
+import org.apache.maven.usability.diagnostics.ErrorDiagnoser;
 import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
 
 public class ProfileActivationDiagnoser

File: maven-core/src/main/java/org/apache/maven/usability/ProjectBuildDiagnoser.java
Patch:
@@ -3,6 +3,8 @@
 import org.apache.maven.project.InvalidProjectModelException;
 import org.apache.maven.project.ProjectBuildingException;
 import org.apache.maven.project.validation.ModelValidationResult;
+import org.apache.maven.usability.diagnostics.DiagnosisUtils;
+import org.apache.maven.usability.diagnostics.ErrorDiagnoser;
 
 public class ProjectBuildDiagnoser
     implements ErrorDiagnoser

File: maven-error-diagnostics/src/main/java/org/apache/maven/usability/diagnostics/ErrorDiagnoser.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.usability;
+package org.apache.maven.usability.diagnostics;
 
 /*
  * Copyright 2001-2005 The Apache Software Foundation.

File: maven-mboot2/src/main/java/MBoot.java
Patch:
@@ -42,7 +42,7 @@ public class MBoot
         "maven-artifact", "maven-plugin-descriptor", "maven-repository-metadata", "maven-artifact-manager",
         "maven-artifact-test", "maven-script/maven-script-beanshell", "maven-profile", "maven-project",
         "maven-plugin-registry", "maven-reporting/maven-reporting-api", "maven-reporting/maven-reporting-impl",
-        "maven-plugin-parameter-documenter", "maven-core", "maven-archiver",
+        "maven-plugin-parameter-documenter", "maven-error-diagnostics", "maven-core", "maven-archiver",
         "maven-plugin-tools/maven-plugin-tools-api", "maven-plugin-tools/maven-plugin-tools-java",
         "maven-plugin-tools/maven-plugin-tools-beanshell", "maven-plugin-tools/maven-plugin-tools-pluggy",
         "maven-core-it-verifier"};

File: maven-artifact-manager/src/main/java/org/apache/maven/artifact/repository/metadata/DefaultRepositoryMetadataManager.java
Patch:
@@ -271,7 +271,7 @@ private void resolveAlways( ArtifactMetadata metadata, ArtifactRepository reposi
     {
         if ( !wagonManager.isOnline() )
         {
-            if ( !allowBlacklisting )
+            if ( allowBlacklisting )
             {
                 getLogger().debug(
                     "System is offline. Cannot resolve metadata:\n" + metadata.extendedToString() + "\n\n" );

File: maven-plugins/maven-release-plugin/src/main/java/org/apache/maven/plugins/release/PrepareReleaseMojo.java
Patch:
@@ -106,9 +106,7 @@ public class PrepareReleaseMojo
     private PluginVersionManager pluginVersionManager;
 
     /**
-     * @parameter expression="${component.org.codehaus.plexus.components.inputhandler.InputHandler}"
-     * @required
-     * @readonly
+     * @component
      */
     private InputHandler inputHandler;
 

File: maven-plugins/maven-resources-plugin/src/main/java/org/apache/maven/plugin/resources/ResourcesMojo.java
Patch:
@@ -16,12 +16,12 @@
  * limitations under the License.
  */
 
-import org.apache.commons.io.FileUtils;
 import org.apache.maven.model.Resource;
 import org.apache.maven.plugin.AbstractMojo;
 import org.apache.maven.plugin.MojoExecutionException;
 import org.apache.maven.project.MavenProject;
 import org.codehaus.plexus.util.DirectoryScanner;
+import org.codehaus.plexus.util.FileUtils;
 import org.codehaus.plexus.util.IOUtil;
 import org.codehaus.plexus.util.InterpolationFilterReader;
 

File: maven-plugins/maven-release-plugin/src/main/java/org/apache/maven/plugins/release/PrepareReleaseMojo.java
Patch:
@@ -45,7 +45,7 @@
 import org.apache.maven.scm.ScmException;
 import org.apache.maven.scm.ScmFile;
 import org.apache.maven.settings.Settings;
-import org.codehaus.plexus.components.inputhandler.InputHandler;
+import org.codehaus.plexus.components.interactivity.InputHandler;
 import org.codehaus.plexus.util.IOUtil;
 import org.codehaus.plexus.util.StringUtils;
 

File: maven-core/src/main/java/org/apache/maven/DefaultMaven.java
Patch:
@@ -448,7 +448,7 @@ private List collectProjects( List files, ArtifactRepository localRepository, bo
                 DefaultArtifactVersion version = new DefaultArtifactVersion( project.getPrerequisites().getMaven() );
                 if ( runtimeInformation.getApplicationVersion().compareTo( version ) < 0 )
                 {
-                    throw new ProjectBuildingException( "Unable to build project '" + project.getFile() +
+                    throw new ProjectBuildingException( project.getId(), "Unable to build project '" + project.getFile() +
                         "; it requires Maven version " + version.toString() );
                 }
             }
@@ -500,7 +500,7 @@ public MavenProject getProject( File pom, ArtifactRepository localRepository, Se
             if ( pom.length() == 0 )
             {
                 throw new ProjectBuildingException(
-                    "The file " + pom.getAbsolutePath() + " you specified has zero length." );
+                    "unknown", "The file " + pom.getAbsolutePath() + " you specified has zero length." );
             }
         }
 

File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java
Patch:
@@ -106,6 +106,8 @@ public class DefaultLifecycleExecutor
     public MavenExecutionResponse execute( MavenSession session, ReactorManager rm, EventDispatcher dispatcher )
         throws LifecycleExecutionException
     {
+        // TODO: This is dangerous, particularly when it's just a collection of loose-leaf projects being built
+        // within the same reactor (using an inclusion pattern to gather them up)...
         MavenProject rootProject = rm.getTopLevelProject();
 
         List goals = session.getGoals();

File: maven-project/src/main/java/org/apache/maven/project/ProjectUtils.java
Patch:
@@ -139,7 +139,7 @@ private static ArtifactRepositoryLayout getRepositoryLayout( RepositoryBase mave
         }
         catch ( ComponentLookupException e )
         {
-            throw new ProjectBuildingException( "Cannot find layout implementation corresponding to: \'" + layout +
+            throw new ProjectBuildingException( "all", "Cannot find layout implementation corresponding to: \'" + layout +
                 "\' for remote repository with id: \'" + mavenRepo.getId() + "\'.", e );
         }
         return repositoryLayout;

File: maven-project/src/main/java/org/apache/maven/project/artifact/ActiveProjectArtifact.java
Patch:
@@ -104,8 +104,6 @@ public boolean hasClassifier()
     public void setFile( File destination )
     {
         artifact.setFile( destination );
-
-        // TODO: [jc; 29-jul-05] Is this appropriate? I mean, isn't the point to use the project-file instead??
         project.getArtifact().setFile( destination );
     }
 

File: maven-project/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java
Patch:
@@ -37,7 +37,7 @@
 import org.apache.maven.model.DistributionManagement;
 import org.apache.maven.model.Exclusion;
 import org.apache.maven.model.Relocation;
-import org.apache.maven.project.InvalidModelException;
+import org.apache.maven.project.InvalidProjectModelException;
 import org.apache.maven.project.MavenProject;
 import org.apache.maven.project.MavenProjectBuilder;
 import org.apache.maven.project.ProjectBuildingException;
@@ -107,10 +107,10 @@ public ResolutionGroup retrieve( Artifact artifact, ArtifactRepository localRepo
                     project = mavenProjectBuilder.buildFromRepository( pomArtifact, remoteRepositories, localRepository,
                                                                        true );
                 }
-                catch ( InvalidModelException e )
+                catch ( InvalidProjectModelException e )
                 {
                     getLogger().warn( "POM for: \'" + pomArtifact +
-                        "\' does not appear to be valid. Its will be ignored for artifact resolution." );
+                        "\' does not appear to be valid. Its will be ignored for artifact resolution.\n\nReason: " + e.getMessage() + "\n\n" );
 
                     project = null;
                 }

File: maven-core/src/main/java/org/apache/maven/plugin/version/DefaultPluginVersionManager.java
Patch:
@@ -36,7 +36,7 @@
 import org.apache.maven.project.ProjectBuildingException;
 import org.apache.maven.settings.RuntimeInfo;
 import org.apache.maven.settings.Settings;
-import org.codehaus.plexus.components.inputhandler.InputHandler;
+import org.codehaus.plexus.components.interactivity.InputHandler;
 import org.codehaus.plexus.logging.AbstractLogEnabled;
 import org.codehaus.plexus.util.IOUtil;
 import org.codehaus.plexus.util.StringUtils;

File: maven-mboot2/src/main/java/model/Repository.java
Patch:
@@ -80,10 +80,7 @@ public String getArtifactPath( Dependency dependency )
         else if ( LAYOUT_DEFAULT.equals( layout ) )
         {
             repositoryPath = dependency.getGroupId().replace( '.', '/' );
-//            if ( !dependency.getType().equals( "pom" ) )
-//            {
             repositoryPath = repositoryPath + "/" + dependency.getArtifactId() + "/" + dependency.getVersion();
-//            }
             repositoryPath = repositoryPath + "/" + dependency.getArtifact();
         }
         else

File: maven-plugins/maven-checkstyle-plugin/src/main/java/org/apache/maven/plugin/checkstyle/CheckstyleReport.java
Patch:
@@ -369,14 +369,15 @@ private File[] getFilesToProcess( String includes, String excludes )
             excludesStr.append( excludes );
         }
 
-        for ( int i = 0; i < DEFAULT_EXCLUDES.length; i++ )
+        String[] defaultExcludes = FileUtils.getDefaultExcludes();
+        for ( int i = 0; i < defaultExcludes.length; i++ )
         {
             if ( excludesStr.length() > 0 )
             {
                 excludesStr.append( "," );
             }
 
-            excludesStr.append( DEFAULT_EXCLUDES[i] );
+            excludesStr.append( defaultExcludes[i] );
         }
 
         List files;

File: maven-plugins/maven-pmd-plugin/src/main/java/org/apache/maven/plugin/pmd/PmdReport.java
Patch:
@@ -247,13 +247,14 @@ private List getFilesToProcess( String includes, String excludes )
         {
             excludesStr.append( excludes );
         }
-        for ( int i = 0; i < DEFAULT_EXCLUDES.length; i++ )
+        String[] defaultExcludes = FileUtils.getDefaultExcludes();
+        for ( int i = 0; i < defaultExcludes.length; i++ )
         {
             if ( excludesStr.length() > 0 )
             {
                 excludesStr.append( "," );
             }
-            excludesStr.append( DEFAULT_EXCLUDES[i] );
+            excludesStr.append( defaultExcludes[i] );
         }
 
         return FileUtils.getFiles( dir, includes, excludesStr.toString() );

File: maven-plugins/maven-war-plugin/src/main/java/org/apache/maven/plugin/war/WarExplodedMojo.java
Patch:
@@ -30,7 +30,7 @@ public class WarExplodedMojo
 {
     public void execute() throws MojoExecutionException
     {
-        buildExplodedWebapp( getWebappDirectory(), getWebappDirectory() );
+        buildExplodedWebapp( getWebappDirectory() );
     }
 
 }
\ No newline at end of file

File: maven-plugins/maven-checkstyle-plugin/src/main/java/org/apache/maven/plugin/checkstyle/CheckstyleReport.java
Patch:
@@ -105,7 +105,7 @@ public class CheckstyleReport
      * Specifies the location of the License file (a.k.a. the header file) that is used by Checkstyle
      * to verify that source code has the correct copyright.
      *
-     * @parameter
+     * @parameter expression="${basedir}/LICENSE.txt"
      */
     private String headerFile;
 

File: maven-core/src/main/java/org/apache/maven/Maven.java
Patch:
@@ -29,9 +29,9 @@ public interface Maven
     static String ROLE = Maven.class.getName();
 
     String POMv4 = "pom.xml";
-    
+
     String RELEASE_POMv4 = "release-pom.xml";
 
     MavenExecutionResponse execute( MavenExecutionRequest request )
-        throws ReactorException;
+        throws ReactorException, SettingsConfigurationException;
 }
\ No newline at end of file

File: maven-plugins/maven-assembly-plugin/src/main/java/org/apache/maven/plugin/assembly/AssemblyMojo.java
Patch:
@@ -161,7 +161,7 @@ public void execute()
                 throw new MojoExecutionException( "Error creating assembly", e );
             }
 
-            projectHelper.attachArtifact( project, format, format + "-assembly", destFile );
+            projectHelper.attachArtifact( project, format, assembly.getId(), destFile );
         }
     }
 

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Patch:
@@ -231,7 +231,7 @@ private void checkRequiredMavenVersion( Plugin plugin, ArtifactRepository localR
             Artifact artifact = artifactFactory.createProjectArtifact( plugin.getGroupId(), plugin.getArtifactId(),
                                                                        plugin.getVersion() );
             MavenProject project = mavenProjectBuilder.buildFromRepository( artifact, remoteRepositories,
-                                                                            localRepository );
+                                                                            localRepository, false );
             // if we don't have the required Maven version, then ignore an update
             if ( project.getPrerequisites() != null && project.getPrerequisites().getMaven() != null )
             {

File: maven-project/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java
Patch:
@@ -106,8 +106,8 @@ public ResolutionGroup retrieve( Artifact artifact, ArtifactRepository localRepo
             {
                 try
                 {
-                    project = mavenProjectBuilder.buildFromRepository( pomArtifact, remoteRepositories,
-                                                                       localRepository );
+                    project = mavenProjectBuilder.buildFromRepository( pomArtifact, remoteRepositories, localRepository,
+                                                                       true );
                 }
                 catch ( InvalidModelException e )
                 {

File: maven-plugins/maven-checkstyle-plugin/src/main/java/org/apache/maven/plugin/checkstyle/CheckstyleReport.java
Patch:
@@ -127,7 +127,7 @@ public class CheckstyleReport
 
     /**
      * Specifies the location of the supperssions XML file to use. The plugin defines a Checkstyle
-     * property named <code>checkstyle.supperssions.file</code> with the value of this
+     * property named <code>checkstyle.suppressions.file</code> with the value of this
      * property. This allows using the Checkstyle property your own custom checkstyle
      * configuration file when specifying a suppressions file.
      *

File: maven-reporting/maven-reporting-impl/src/main/java/org/apache/maven/reporting/AbstractMavenReportRenderer.java
Patch:
@@ -377,7 +377,7 @@ public void linkPatternedText( String text )
                         }
                         else
                         {
-                            text( text );
+                            text( href );
                         }
                     }
                 }

File: maven-reporting/maven-reporting-impl/src/main/java/org/apache/maven/reporting/AbstractMavenReportRenderer.java
Patch:
@@ -456,7 +456,9 @@ private static String getValidHref( String href )
         String[] schemes = {"http", "https"};
         UrlValidator urlValidator = new UrlValidator( schemes );
 
-        if ( EmailValidator.getInstance().isValid( href ) )
+        if ( ( EmailValidator.getInstance().isValid( href ) ) ||
+             ( ( href.indexOf( "?" ) != -1 ) &&
+               ( EmailValidator.getInstance().isValid( href.substring( 0, href.indexOf( "?" ) ) ) ) ) )
         {
             return "mailto:" + href;
         }

File: maven-plugin-descriptor/src/main/java/org/apache/maven/plugin/descriptor/PluginDescriptorBuilder.java
Patch:
@@ -37,6 +37,9 @@ public PluginDescriptor build( Reader reader, String source )
         pluginDescriptor.setArtifactId( c.getChild( "artifactId" ).getValue() );
         pluginDescriptor.setVersion( c.getChild( "version" ).getValue() );
         pluginDescriptor.setGoalPrefix( c.getChild( "goalPrefix" ).getValue() );
+        
+        pluginDescriptor.setName( c.getChild( "name" ).getValue() );
+        pluginDescriptor.setDescription( c.getChild( "description" ).getValue() );
 
         String isolatedRealm = c.getChild( "isolatedRealm" ).getValue();
 

File: maven-core/src/main/java/org/apache/maven/plugin/PluginParameterExpressionEvaluator.java
Patch:
@@ -278,7 +278,7 @@ else if ( expression.startsWith( "basedir" ) )
                 value = project.getProperties().getProperty( expression );
             }
 
-            if ( value == null )
+            if ( value == null && properties != null )
             {
                 // We will attempt to get nab a system property as a way to specify a
                 // parameter to a plugins. My particular case here is allowing the surefire

File: maven-embedder/src/test/java/org/apache/maven/embedder/MavenEmbedderTest.java
Patch:
@@ -70,15 +70,15 @@ public void testPhaseExecution()
 
         File pomFile = new File( targetDirectory, "pom.xml" );
 
-        MavenProject pom = maven.readProjectWithDependencies( pomFile );        
+        MavenProject pom = maven.readProjectWithDependencies( pomFile );
 
         EventMonitor eventMonitor = new DefaultEventMonitor( new PlexusLoggerAdapter( new MavenEmbedderConsoleLogger() ) );
 
         maven.execute( pom,
                        Collections.singletonList( "package" ),
                        eventMonitor,
                        new ConsoleDownloadMonitor(),
-                       null,
+                       new Properties(),
                        targetDirectory );
 
         File jar = new File( targetDirectory, "target/embedder-test-project-1.0-SNAPSHOT.jar" );

File: maven-artifact/src/main/java/org/apache/maven/artifact/handler/ArtifactHandler.java
Patch:
@@ -31,4 +31,6 @@ public interface ArtifactHandler
     String getClassifier();
 
     String getPackaging();
+
+    boolean isIncludesDependencies();
 }

File: maven-core-it/it0080/test-component-a/src/main/java/A.java
Patch:
@@ -0,0 +1,3 @@
+public class A {
+}
+

File: maven-plugins/maven-ear-plugin/src/main/java/org/apache/maven/plugin/ear/EarMojo.java
Patch:
@@ -87,8 +87,8 @@ public class EarMojo
     private File resourcesDir;
 
     /**
-	 * The Jar archiver.
-	 *
+     * The Jar archiver.
+     *
      * @parameter expression="${component.org.codehaus.plexus.archiver.Archiver#jar}"
      * @required
      */

File: maven-plugins/maven-rar-plugin/src/main/java/org/apache/maven/plugin/rar/RarMojo.java
Patch:
@@ -112,8 +112,8 @@ public class RarMojo
     private MavenProject project;
 
     /**
-	 * The Jar archiver.
-	 *
+     * The Jar archiver.
+     *
      * @parameter expression="${component.org.codehaus.plexus.archiver.Archiver#jar}"
      * @required
      */

File: maven-plugins/maven-war-plugin/src/main/java/org/apache/maven/plugin/war/WarMojo.java
Patch:
@@ -131,8 +131,8 @@ public class WarMojo
     private String warName;
 
     /**
-	 * The Jar archiver.
-	 *
+     * The Jar archiver.
+     *
      * @parameter expression="${component.org.codehaus.plexus.archiver.Archiver#war}"
      * @required
      */

File: maven-core/src/main/java/org/apache/maven/plugin/PluginParameterException.java
Patch:
@@ -30,7 +30,7 @@ public class PluginParameterException
 
     public PluginParameterException( MojoDescriptor mojo, List parameters )
     {
-        super( "Invalid or missing parameters: " + parameters + " for mojo: " + mojo.getRoleHint() );
+        super( mojo.getPluginDescriptor(), "Invalid or missing parameters: " + parameters + " for mojo: " + mojo.getRoleHint() );
 
         this.mojo = mojo;
 
@@ -39,7 +39,7 @@ public PluginParameterException( MojoDescriptor mojo, List parameters )
 
     public PluginParameterException( MojoDescriptor mojo, List parameters, Throwable cause )
     {
-        super( "Invalid or missing parameters: " + parameters + " for mojo: " + mojo.getRoleHint(), cause );
+        super( mojo.getPluginDescriptor(), "Invalid or missing parameters: " + parameters + " for mojo: " + mojo.getRoleHint(), cause );
 
         this.mojo = mojo;
 

File: maven-embedder/src/main/java/org/apache/maven/embedder/MavenEmbedderLogger.java
Patch:
@@ -18,7 +18,7 @@
 
 /**
  * @author <a href="mailto:jason@maven.org">Jason van Zyl</a>
- * @version $Id:$
+ * @version $Id$
  */
 public interface MavenEmbedderLogger
 {

File: maven-embedder/src/main/java/org/apache/maven/embedder/PlexusLoggerAdapter.java
Patch:
@@ -18,7 +18,7 @@
 
 /**
  * @author <a href="mailto:jason@maven.org">Jason van Zyl</a>
- * @version $Id:$
+ * @version $Id$
  */
 public class PlexusLoggerAdapter
     implements Logger

File: maven-mboot2/src/main/java/MBoot.java
Patch:
@@ -42,7 +42,7 @@ public class MBoot
         "maven-artifact", "maven-plugin-descriptor", "maven-repository-metadata", "maven-artifact-manager",
         "maven-artifact-test", "maven-script/maven-script-beanshell",
         "maven-profile", "maven-project", "maven-plugin-registry", "maven-reporting/maven-reporting-api",
-        "maven-reporting/maven-reporting-impl", "maven-core", "maven-archiver",
+        "maven-reporting/maven-reporting-impl", "maven-plugin-parameter-documenter", "maven-core", "maven-archiver",
         "maven-plugin-tools/maven-plugin-tools-api", "maven-plugin-tools/maven-plugin-tools-java",
         "maven-plugin-tools/maven-plugin-tools-beanshell", "maven-plugin-tools/maven-plugin-tools-pluggy",
         "maven-core-it-verifier"};
@@ -63,6 +63,7 @@ public class MBoot
         targetVersions.put( "maven-profile", "1.0.0" );
         targetVersions.put( "maven-plugin-registry", "1.0.0" );
         targetVersions.put( "maven-plugin-descriptor", "1.0.0" );
+        targetVersions.put( "maven-plugin-parameter-documenter", "1.0.0" );
         targetVersions.put( "maven-repository-metadata", "1.0.0" );
 
         MODELLO_TARGET_VERSIONS = Collections.unmodifiableMap( targetVersions );
@@ -73,6 +74,7 @@ public class MBoot
         modelFiles.put( "maven-profile", "profiles.mdo" );
         modelFiles.put( "maven-plugin-registry", "plugin-registry.mdo" );
         modelFiles.put( "maven-plugin-descriptor", "src/main/mdo/lifecycle.mdo" );
+        modelFiles.put( "maven-plugin-parameter-documenter", "src/main/mdo/paramdoc.mdo" );
         modelFiles.put( "maven-repository-metadata", "src/main/mdo/metadata.mdo" );
 
         MODELLO_MODEL_FILES = Collections.unmodifiableMap( modelFiles );

File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java
Patch:
@@ -1172,7 +1172,7 @@ private MojoDescriptor getMojoDescriptor( String task, MavenSession session, Mav
         {
             if ( !canUsePrefix )
             {
-                String msg = "DEPRECATED: Mapped-prefix lookup of mojos are only supported from direct invocation. " +
+                String msg = "Mapped-prefix lookup of mojos are only supported from direct invocation. " +
                     "Please use specification of the form groupId:artifactId[:version]:goal instead. " +
                     "(Offending mojo: \'" + task + "\', invoked via: \'" + invokedVia + "\')";
                 throw new LifecycleExecutionException( msg );

File: maven-plugins/maven-project-info-reports-plugin/src/main/java/org/apache/maven/report/projectinfo/LicenseReport.java
Patch:
@@ -335,7 +335,7 @@ private static String replaceParts( String html, String baseURL, String serverUR
     {
         Pattern anchor = Pattern
             .compile( "(<\\s*" + tagPattern + "\\s+[^>]*" + attributePattern + "\\s*=\\s*\")([^\"]*)\"([^>]*>)" );
-        StringBuilder sb = new StringBuilder( html );
+        StringBuffer sb = new StringBuffer( html );
 
         int indx = 0;
         do

File: maven-plugins/maven-projecthelp-plugin/src/main/java/org/apache/maven/plugins/projecthelp/DescribeMojo.java
Patch:
@@ -21,6 +21,7 @@
 
 /**
  * @goal describe
+ * @aggregator
  */
 public class DescribeMojo
     extends AbstractMojo

File: maven-core/src/main/java/org/apache/maven/usability/DiagnosisUtils.java
Patch:
@@ -25,8 +25,8 @@ private DiagnosisUtils()
     
     public static String getOfflineWarning()
     {
-        return "\nNOTE: If Maven is executing in offline mode, some artifacts may be missing from your" +
-                "\nlocal repository.\n";
+        return "\nNOTE: Maven is executing in offline mode. Any artifacts not already in your local\n" +
+                "repository will be inaccessible.\n";
     }
     
     public static boolean containsInCausality( Throwable error, Class test )

File: maven-embedder/src/main/java/org/apache/maven/embedder/SummaryPluginDescriptor.java
Patch:
@@ -16,7 +16,7 @@
 
 /**
  * @author <a href="mailto:jason@maven.org">Jason van Zyl</a>
- * @version $Id:$
+ * @version $Id$
  */
 public class SummaryPluginDescriptor
 {

File: sandbox/maven-it-plugin/src/main/java/org/apache/maven/plugin/it/ForkMojo.java
Patch:
@@ -118,8 +118,8 @@ private void buildProjects()
 
         if ( response.isExecutionFailure() )
         {
-            throw new MojoExecutionException(
-                "Integration test failed" );
+            getLog().error( "Integration test failed", response.getException() );
+            throw new MojoExecutionException( "Integration test failed" );
         }
     }
 

File: maven-archetype/maven-archetype-plugin/src/main/java/org/apache/maven/plugin/archetype/MavenArchetypeMojo.java
Patch:
@@ -33,6 +33,9 @@
  * Builds archetype containers.
  *
  * @goal create
+ * @description The archetype creation goal looks for an archetype with a given groupId, artifactId, and
+ * version and retrieves it from the remote repository. Once the archetype is retrieve it is process against
+ * a set of user parameters to create a working Maven project.
  * @requiresProject false
  */
 public class MavenArchetypeMojo

File: maven-artifact/src/main/java/org/apache/maven/artifact/metadata/ArtifactMetadata.java
Patch:
@@ -78,4 +78,6 @@ public interface ArtifactMetadata
      */
     void storeInLocalRepository( ArtifactRepository localRepository, ArtifactRepository remoteRepository )
         throws ArtifactMetadataRetrievalException;
+    
+    String extendedToString();
 }

File: maven-artifact/src/main/java/org/apache/maven/artifact/repository/ArtifactRepositoryFactory.java
Patch:
@@ -35,5 +35,8 @@ ArtifactRepository createArtifactRepository( String id, String url, ArtifactRepo
 
     void setGlobalChecksumPolicy( String checksumPolicy );
 
+    /**
+     * @deprecated. Not needed, use WagonManager.set/isOnline() instead.
+     */
     void setGlobalEnable( boolean enable );
 }
\ No newline at end of file

File: maven-core/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -413,7 +413,7 @@ private static ArtifactRepository createLocalRepository( Embedder embedder, Sett
 
         ArtifactRepositoryFactory artifactRepositoryFactory = (ArtifactRepositoryFactory) embedder.lookup(
             ArtifactRepositoryFactory.ROLE );
-
+        
         String url = settings.getLocalRepository();
 
         if ( !url.startsWith( "file:" ) )
@@ -427,8 +427,7 @@ private static ArtifactRepository createLocalRepository( Embedder embedder, Sett
         if ( commandLine.hasOption( CLIManager.OFFLINE ) )
         {
             settings.setOffline( true );
-
-            artifactRepositoryFactory.setGlobalEnable( false );
+            
             snapshotPolicySet = true;
         }
 

File: maven-plugins/maven-release-plugin/src/main/java/org/apache/maven/plugins/release/PrepareReleaseMojo.java
Patch:
@@ -961,8 +961,8 @@ else if ( finalName.indexOf( "SNAPSHOT" ) > -1 )
                         String version;
                         try
                         {
-                            version = pluginVersionManager.resolvePluginVersion( plugin.getGroupId(), plugin
-                                .getArtifactId(), project, settings, localRepository, true );
+                            version = pluginVersionManager.resolveReportPluginVersion( plugin.getGroupId(), plugin
+                                .getArtifactId(), project, settings, localRepository );
                         }
                         catch ( PluginVersionResolutionException e )
                         {

File: maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -346,7 +346,7 @@ private Model findModelFromRepository( Artifact artifact, List remoteArtifactRep
             try
             {
                 artifactResolver.resolve( projectArtifact, remoteArtifactRepositories, localRepository );
-
+                
                 File file = projectArtifact.getFile();
                 model = readModel( file );
 

File: maven-plugins/maven-surefire-plugin/src/main/java/org/apache/maven/test/SurefirePlugin.java
Patch:
@@ -191,7 +191,7 @@ public void execute()
             // Have to wrap in an ArrayList as surefire expects an ArrayList instead of a List for some reason
             if ( includes == null || includes.size() == 0 )
             {
-                includes = new ArrayList( Arrays.asList( new String[] { "**/*Test.java", "**/*TestCase.java" } ) );
+                includes = new ArrayList( Arrays.asList( new String[] { "**/Test*.java", "**/*Test.java", "**/*TestCase.java" } ) );
             }
             if ( excludes == null || excludes.size() == 0 )
             {

File: maven-plugins/maven-antrun-plugin/src/main/java/org/apache/maven/plugin/antrun/AbstractAntMojo.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.maven.plugin.MojoExecutionException;
 import org.apache.maven.project.MavenProject;
 import org.apache.tools.ant.DefaultLogger;
+import org.apache.tools.ant.Project;
 import org.apache.tools.ant.PropertyHelper;
 import org.apache.tools.ant.Target;
 
@@ -45,6 +46,8 @@ protected void executeTasks( Target antTasks, MavenProject mavenProject )
             DefaultLogger antLogger = new DefaultLogger();
             antLogger.setOutputPrintStream( System.out );
             antLogger.setErrorPrintStream( System.err );
+            antLogger.setMessageOutputLevel( Project.MSG_INFO );
+
             antTasks.getProject().addBuildListener( antLogger );
             antTasks.getProject().setBaseDir( mavenProject.getBasedir() );
 

File: maven-plugins/maven-project-info-reports-plugin/src/main/java/org/apache/maven/report/projectinfo/DependenciesReport.java
Patch:
@@ -276,10 +276,11 @@ public void renderBody()
                     }
                     catch ( ProjectBuildingException e )
                     {
+                        // TODO: better exception handling needed - log PBE
                         throw new IllegalArgumentException( "Can't find a valid Maven project in the repository for the artifact ["
                                                                 + artifact.getGroupId() + ":"
                                                                 + artifact.getArtifactId() + ":"
-                                                                + artifact.getVersion() + "].", e );
+                                                                + artifact.getVersion() + "]." );
                     }
                     tableRow( new String[]{artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion(),
                         artifactProject.getDescription(),

File: maven-plugins/maven-eclipse-plugin/src/main/java/org/apache/maven/plugin/eclipse/EclipsePlugin.java
Patch:
@@ -143,7 +143,7 @@ public class EclipsePlugin
      * 
      * @parameter expression="${eclipse.downloadSources}"
      */
-    private boolean downloadSources = true;
+    private boolean downloadSources = false;
 
     /**
      * Eclipse workspace directory.

File: maven-plugins/maven-project-info-reports-plugin/src/main/java/org/apache/maven/report/projectinfo/DependenciesReport.java
Patch:
@@ -279,7 +279,7 @@ public void renderBody()
                         throw new IllegalArgumentException( "Can't find a valid Maven project in the repository for the artifact ["
                                                                 + artifact.getGroupId() + ":"
                                                                 + artifact.getArtifactId() + ":"
-                                                                + artifact.getVersion() + "]." );
+                                                                + artifact.getVersion() + "].", e );
                     }
                     tableRow( new String[]{artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion(),
                         artifactProject.getDescription(),

File: maven-artifact/src/main/java/org/apache/maven/artifact/ArtifactUtils.java
Patch:
@@ -30,7 +30,7 @@ private ArtifactUtils()
 
     public static boolean isSnapshot( String version )
     {
-        return version != null && Artifact.VERSION_FILE_PATTERN.matcher( version ).matches();
+        return version != null && ( version.toUpperCase().endsWith( "SNAPSHOT" ) || Artifact.VERSION_FILE_PATTERN.matcher( version ).matches() );
     }
     
     public static String versionlessKey( Artifact artifact )

File: maven-plugin-tools/maven-plugin-tools-java/src/main/java/org/apache/maven/tools/plugin/extractor/java/JavaMojoDescriptorExtractor.java
Patch:
@@ -29,7 +29,7 @@
 import org.apache.maven.plugin.descriptor.Requirement;
 import org.apache.maven.project.MavenProject;
 import org.apache.maven.tools.plugin.extractor.MojoDescriptorExtractor;
-import org.codehaus.modello.StringUtils;
+import org.codehaus.plexus.util.StringUtils;
 import org.codehaus.plexus.logging.AbstractLogEnabled;
 
 import java.io.File;

File: maven-profile/src/main/java/org/apache/maven/profiles/ProfilesConversionUtils.java
Patch:
@@ -44,6 +44,8 @@ public static Profile convertFromProfileXmlProfile( org.apache.maven.profiles.Pr
         if ( profileActivation != null )
         {
             Activation activation = new Activation();
+            
+            activation.setActiveByDefault( profileActivation.isActiveByDefault() );
 
             activation.setJdk( profileActivation.getJdk() );
             

File: maven-project/src/main/java/org/apache/maven/profiles/ProfileManager.java
Patch:
@@ -19,6 +19,8 @@ public interface ProfileManager
     void explicitlyDeactivate( String profileId );
 
     void explicitlyDeactivate( List profileIds );
+    
+    void activateAsDefault( String profileId );
 
     List getActiveProfiles()
         throws ProfileActivationException;

File: maven-settings/src/main/java/org/apache/maven/settings/SettingsUtils.java
Patch:
@@ -147,6 +147,8 @@ public static org.apache.maven.model.Profile convertFromSettingsProfile( Profile
         {
             org.apache.maven.model.Activation activation = new org.apache.maven.model.Activation();
 
+            activation.setActiveByDefault( settingsActivation.isActiveByDefault() );
+            
             activation.setJdk( settingsActivation.getJdk() );
 
             ActivationProperty settingsProp = settingsActivation.getProperty();

File: maven-artifact-manager/src/main/java/org/apache/maven/artifact/deployer/DefaultArtifactDeployer.java
Patch:
@@ -76,7 +76,9 @@ public void deploy( File source, Artifact artifact, ArtifactRepository deploymen
                 ArtifactMetadata metadata = (ArtifactMetadata) i.next();
                 repositoryMetadataManager.deploy( metadata, localRepository, deploymentRepository );
             }
-            artifact.getMetadataList().clear();
+            // TODO: would like to flush this, but the plugin metadata is added in advance, not as an install/deploy transformation
+            // This would avoid the need to merge and clear out the state during deployment
+//            artifact.getMetadataList().clear();
         }
         catch ( TransferFailedException e )
         {

File: maven-artifact-manager/src/main/java/org/apache/maven/artifact/installer/DefaultArtifactInstaller.java
Patch:
@@ -75,7 +75,9 @@ public void install( File source, Artifact artifact, ArtifactRepository localRep
                 ArtifactMetadata metadata = (ArtifactMetadata) i.next();
                 repositoryMetadataManager.install( metadata, localRepository );
             }
-            artifact.getMetadataList().clear();
+            // TODO: would like to flush this, but the plugin metadata is added in advance, not as an install/deploy transformation
+            // This would avoid the need to merge and clear out the state during deployment
+//            artifact.getMetadataList().clear();
         }
         catch ( IOException e )
         {

File: maven-artifact-ant/src/main/java/org/apache/maven/artifact/ant/AbstractArtifactTask.java
Patch:
@@ -294,6 +294,9 @@ protected static RemoteRepository getDefaultRemoteRepository()
         // TODO: could we utilise the super POM for this?
         RemoteRepository remoteRepository = new RemoteRepository();
         remoteRepository.setUrl( "http://repo1.maven.org/maven2" );
+        RepositoryPolicy snapshots = new RepositoryPolicy();
+        snapshots.setEnabled( false );
+        remoteRepository.addSnapshots( snapshots );
         return remoteRepository;
     }
 

File: maven-mboot2/src/main/java/download/ArtifactDownloader.java
Patch:
@@ -143,7 +143,7 @@ private boolean getRemoteArtifact( Dependency dep, File destinationFile )
                     File remoteFile = localRepository.getMetadataFile( dep.getGroupId(), dep.getArtifactId(),
                                                                        dep.getVersion(), dep.getType(), filename );
                     String metadataPath = remoteRepo.getMetadataPath( dep.getGroupId(), dep.getArtifactId(),
-                                                                      dep.getVersion(), dep.getType(), filename );
+                                                                      dep.getVersion(), dep.getType(), "maven-metadata.xml" );
                     String metaUrl = remoteRepo.getBasedir() + "/" + metadataPath;
                     log( "Downloading " + metaUrl );
                     try

File: maven-core/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -18,11 +18,11 @@
 
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.CommandLineParser;
+import org.apache.commons.cli.GnuParser;
 import org.apache.commons.cli.HelpFormatter;
 import org.apache.commons.cli.OptionBuilder;
 import org.apache.commons.cli.Options;
 import org.apache.commons.cli.ParseException;
-import org.apache.commons.cli.PosixParser;
 import org.apache.maven.Maven;
 import org.apache.maven.artifact.manager.WagonManager;
 import org.apache.maven.artifact.repository.ArtifactRepository;
@@ -650,7 +650,7 @@ public CLIManager()
         public CommandLine parse( String[] args )
             throws ParseException
         {
-            CommandLineParser parser = new PosixParser();
+            CommandLineParser parser = new GnuParser();
             return parser.parse( options, args );
         }
 

File: maven-plugins/maven-release-plugin/src/main/java/org/apache/maven/plugins/release/AbstractReleaseMojo.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.maven.scm.manager.ScmManager;
 
 /**
- * 
  * @author <a href="mailto:jdcasey@apache.org">John Casey</a>
  * @author <a href="mailto:evenisse@apache.org">Emmanuel Venisse</a>
  * @version $Id$
@@ -41,7 +40,7 @@ public abstract class AbstractReleaseMojo
     protected abstract ReleaseProgressTracker getReleaseProgress()
         throws MojoExecutionException;
 
-    protected ScmHelper getScm()
+    protected ScmHelper getScm( String directory )
         throws MojoExecutionException
     {
         if ( scmHelper == null )
@@ -63,6 +62,8 @@ protected ScmHelper getScm()
             scmHelper.setPassword( releaseProgress.getPassword() );
         }
 
+        scmHelper.setWorkingDirectory( directory );
+
         return scmHelper;
     }
 

File: maven-plugins/maven-release-plugin/src/main/java/org/apache/maven/plugins/release/helpers/ProjectVersionResolver.java
Patch:
@@ -128,7 +128,7 @@ public void incrementVersion( MavenProject project )
                     projectVersion = inputVersion;
                 }
 
-                project.setVersion( projectVersion );
+                project.getOriginalModel().setVersion( projectVersion );
 
                 resolvedVersions.put( projectId, projectVersion );
             }

File: maven-project/src/main/java/org/apache/maven/project/ModelUtils.java
Patch:
@@ -466,7 +466,7 @@ static Model cloneModel( Model model )
         newModel.setVersion( model.getVersion() );
         newModel.setArtifactId( model.getArtifactId() );
         newModel.setModules( cloneModules( model.getModules() ) );
-        assembler.assembleModelInheritance( newModel, model );
+        assembler.copyModel( newModel, model );
         return newModel;
     }
 

File: maven-project/src/main/java/org/apache/maven/project/inheritance/ModelInheritanceAssembler.java
Patch:
@@ -27,4 +27,6 @@ public interface ModelInheritanceAssembler
     String ROLE = ModelInheritanceAssembler.class.getName();
 
     void assembleModelInheritance( Model child, Model parent );
+
+    void copyModel( Model dest, Model source );
 }

File: maven-plugins/maven-release-plugin/src/main/java/org/apache/maven/plugins/release/AbstractReleaseMojo.java
Patch:
@@ -32,9 +32,7 @@ public abstract class AbstractReleaseMojo
     extends AbstractMojo
 {
     /**
-     * @parameter expression="${org.apache.maven.scm.manager.ScmManager}"
-     * @required
-     * @readonly
+     * @component
      */
     private ScmManager scmManager;
 

File: maven-artifact-manager/src/main/java/org/apache/maven/artifact/repository/metadata/DefaultRepositoryMetadataManager.java
Patch:
@@ -98,7 +98,7 @@ public void resolveAlways( ArtifactMetadata metadata, ArtifactRepository localRe
         File file = new File( localRepository.getBasedir(),
                               localRepository.pathOfLocalRepositoryMetadata( metadata, remoteRepository ) );
 
-        resolveAlways( metadata, localRepository, file, ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN );
+        resolveAlways( metadata, remoteRepository, file, ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN );
     }
 
     private void resolveAlways( ArtifactMetadata metadata, ArtifactRepository repository, File file,

File: maven-artifact-manager/src/main/java/org/apache/maven/artifact/transform/LatestArtifactTransformation.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.maven.artifact.metadata.LatestArtifactMetadata;
 import org.apache.maven.artifact.metadata.LegacyArtifactMetadata;
 import org.apache.maven.artifact.repository.ArtifactRepository;
-import org.apache.maven.artifact.repository.metadata.ArtifactRepositoryMetadata;
 import org.apache.maven.artifact.repository.metadata.Versioning;
 
 import java.util.List;
@@ -69,7 +68,7 @@ protected ArtifactMetadata createMetadata( Artifact artifact, Versioning version
         return metadata;
     }
 
-    protected String constructVersion( ArtifactRepositoryMetadata metadata )
+    protected String constructVersion( ArtifactMetadata metadata )
     {
         return metadata.getLatestVersion();
     }

File: maven-artifact-manager/src/main/java/org/apache/maven/artifact/transform/ReleaseArtifactTransformation.java
Patch:
@@ -17,11 +17,11 @@
  */
 
 import org.apache.maven.artifact.Artifact;
+import org.apache.maven.artifact.metadata.ArtifactMetadata;
 import org.apache.maven.artifact.metadata.ArtifactMetadataRetrievalException;
 import org.apache.maven.artifact.metadata.LegacyArtifactMetadata;
 import org.apache.maven.artifact.metadata.ReleaseArtifactMetadata;
 import org.apache.maven.artifact.repository.ArtifactRepository;
-import org.apache.maven.artifact.repository.metadata.ArtifactRepositoryMetadata;
 
 import java.util.List;
 
@@ -69,7 +69,7 @@ protected LegacyArtifactMetadata createLegacyMetadata( Artifact artifact )
         return new ReleaseArtifactMetadata( artifact );
     }
 
-    protected String constructVersion( ArtifactRepositoryMetadata metadata )
+    protected String constructVersion( ArtifactMetadata metadata )
     {
         return metadata.getReleaseVersion();
     }

File: maven-artifact-manager/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java
Patch:
@@ -215,7 +215,7 @@ public void getArtifact( Artifact artifact, List remoteRepositories )
                 // This one we will eat when looking through remote repositories
                 // because we want to cycle through them all before squawking.
 
-                getLogger().warn( "Unable to get resource from repository " + repository.getUrl() );
+                getLogger().warn( "Unable to get resource from repository " + repository.getId() + " (" + repository.getUrl() + ")" );
             }
         }
 
@@ -234,7 +234,9 @@ public void getArtifact( Artifact artifact, ArtifactRepository repository )
 
         if ( policy.isEnabled() )
         {
+            getLogger().debug( "Trying repository " + repository.getId() );
             getRemoteFile( repository, artifact.getFile(), remotePath, downloadMonitor, policy.getChecksumPolicy() );
+            getLogger().debug( "  Artifact resolved");
 
             artifact.setResolved( true );
         }

File: maven-project/src/main/java/org/apache/maven/project/artifact/ActiveProjectArtifact.java
Patch:
@@ -49,6 +49,7 @@ public ActiveProjectArtifact( MavenProject project, Artifact artifact )
         this.project = project;
 
         artifact.setFile( project.getArtifact().getFile() );
+        artifact.setResolved( true );
     }
 
     public File getFile()

File: maven-plugins/maven-eclipse-plugin/src/test/java/org/apache/maven/plugin/eclipse/EclipsePluginTest.java
Patch:
@@ -135,7 +135,7 @@ private void assertFileEquals( String mavenRepo, File expectedFile, File actualF
             // replace some vars in the expected line, to account
             // for absolute paths that are different on each installation.
 
-            expected = StringUtils.replace( expected, "${basedir}", basedir );
+            expected = StringUtils.replace( expected, "${basedir}", basedir.replace( '\\', '/' ) );
 
             if ( actualLines.size() < i )
             {

File: maven-plugins/maven-compiler-plugin/src/main/java/org/apache/maven/plugin/AbstractCompilerMojo.java
Patch:
@@ -225,8 +225,8 @@ public void execute()
 
         if ( getLog().isDebugEnabled() )
         {
-            getLog().debug( "Source directories: " + compileSourceRoots.toString().replace( ",", "\n" ) );
-            getLog().debug( "Classpath: " + getClasspathElements().toString().replace( ",", "\n" ) );
+            getLog().debug( "Source directories: " + compileSourceRoots.toString().replace( ',', '\n' ) );
+            getLog().debug( "Classpath: " + getClasspathElements().toString().replace( ',', '\n' ) );
             getLog().debug( "Output directory: " + getOutputDirectory() );
         }
 

File: maven-plugins/maven-site-plugin/src/main/java/org/apache/maven/doxia/ScpSiteDeployMojo.java
Patch:
@@ -139,7 +139,8 @@ public void execute()
 
             commandExecutor.put( zipFile, zipFile.getName() );
 
-            cmd = " cd " + basedir + ";" + unzipCommand + " " + zipFile.getName();
+            // TODO: cat to file is temporary until the ssh executor is fixed to deal with output
+            cmd = " cd " + basedir + ";" + unzipCommand + " " + zipFile.getName() + " >scpdeploymojo.log";
 
             commandExecutor.executeCommand( cmd );
 
@@ -148,7 +149,7 @@ public void execute()
                 basedir = basedir + "/";
             }
 
-            commandExecutor.executeCommand( "rm -f " + basedir + zipFile.getName()  );
+            commandExecutor.executeCommand( "rm -f " + basedir + zipFile.getName() + " scpdeploymojo.log" );
         }
         catch ( Exception e )
         {

File: maven-artifact/src/main/java/org/apache/maven/artifact/factory/DefaultArtifactFactory.java
Patch:
@@ -36,7 +36,7 @@ public Artifact createArtifact( String groupId, String artifactId, String versio
     {
         return createArtifact( groupId, artifactId, version, scope, type, null, null );
     }
-
+    
     public Artifact createArtifactWithClassifier( String groupId, String artifactId, String version, String scope,
                                                   String type, String classifier )
     {

File: maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectHelper.java
Patch:
@@ -19,9 +19,8 @@ public void attachArtifact( MavenProject project, String artifactType, String ar
         Artifact artifact = artifactFactory.createArtifactWithClassifier( project.getGroupId(),
                                                                           project.getArtifactId(),
                                                                           project.getVersion(), 
-                                                                          null, 
-                                                                          "artifactType",
-                                                                          "artifactClassifier" );
+                                                                          artifactType,
+                                                                          artifactClassifier );
         
         artifact.setFile( artifactFile );
         artifact.setResolved( true );

File: maven-project/src/test/java/org/apache/maven/project/MavenProjectTestCase.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.artifact.repository.DefaultArtifactRepository;
 import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;
+import org.apache.maven.profiles.DefaultProfileManager;
 import org.codehaus.plexus.PlexusTestCase;
 
 import java.io.File;
@@ -108,7 +109,7 @@ protected MavenProject getProjectWithDependencies( File pom )
     protected MavenProject getProject( File pom )
         throws Exception
     {
-        return projectBuilder.build( pom, getLocalRepository(), null );
+        return projectBuilder.build( pom, getLocalRepository(), new DefaultProfileManager( getContainer() ) );
     }
 
 }

File: maven-plugins/maven-assembly-plugin/src/main/java/org/apache/maven/plugin/assembly/AssemblyMojo.java
Patch:
@@ -57,6 +57,7 @@
  * @version $Id$
  * @goal assembly
  * @requiresDependencyResolution test
+ * @requiresDirectInvocation
  * @execute phase="package"
  */
 public class AssemblyMojo

File: maven-core/src/main/java/org/apache/maven/execution/MavenExecutionRequest.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.monitor.event.EventDispatcher;
 import org.apache.maven.monitor.event.EventMonitor;
+import org.apache.maven.profiles.ProfileManager;
 import org.apache.maven.settings.Settings;
 
 import java.util.List;
@@ -60,4 +61,6 @@ public interface MavenExecutionRequest
     void setFailureBehavior( String failureBehavior );
     
     String getFailureBehavior();
+
+    ProfileManager getGlobalProfileManager();
 }

File: maven-mboot2/src/main/java/MBoot.java
Patch:
@@ -40,7 +40,7 @@ public class MBoot
     String[] builds = new String[]{"maven-model", "maven-settings", "maven-monitor", "maven-plugin-api",
         "maven-artifact", "maven-plugin-descriptor", "maven-artifact-manager", "maven-artifact-test",
         "maven-plugin-mapping",
-        "maven-script/maven-script-beanshell", "maven-script/maven-script-marmalade", "maven-project", "maven-profile",
+        "maven-script/maven-script-beanshell", "maven-script/maven-script-marmalade", "maven-profile", "maven-project", 
         "maven-plugin-registry", "maven-reporting/maven-reporting-api", "maven-reporting/maven-reporting-impl", "maven-core", "maven-archiver",
         "maven-plugin-tools/maven-plugin-tools-api", "maven-plugin-tools/maven-plugin-tools-java",
         "maven-plugin-tools/maven-plugin-tools-beanshell", "maven-plugin-tools/maven-plugin-tools-pluggy",

File: maven-plugins/maven-eclipse-plugin/src/test/java/org/apache/maven/plugin/eclipse/EclipsePluginTest.java
Patch:
@@ -29,7 +29,6 @@
 import java.io.FileReader;
 import java.io.IOException;
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 
@@ -72,7 +71,7 @@ private void testProject( String projectName )
         ArtifactRepository localRepository = new DefaultArtifactRepository( "local", "file://" + repo.getAbsolutePath(),
                                                                             localRepositoryLayout );
 
-        MavenProject project = builder.buildWithDependencies( new File( basedir, "project.xml" ), localRepository, Collections.EMPTY_LIST );
+        MavenProject project = builder.buildWithDependencies( new File( basedir, "project.xml" ), localRepository, null );
 
         for ( Iterator it = project.getArtifacts().iterator(); it.hasNext(); )
         {

File: maven-plugins/maven-release-plugin/src/main/java/org/apache/maven/plugins/release/PerformReleaseMojo.java
Patch:
@@ -101,7 +101,7 @@ private void runGoals()
 
         cl.createArgument().setLine( goals );
 
-        cl.createArgument().setLine( "-DupdateReleaseInfo=true" );
+        cl.createArgument().setLine( "-DperformRelease=true" );
 
         cl.createArgument().setLine( "--no-plugin-updates" );
 

File: maven-project/src/main/java/org/apache/maven/profiles/activation/DetectedProfileActivator.java
Patch:
@@ -23,7 +23,7 @@ public abstract class DetectedProfileActivator
 {
     public boolean canDetermineActivation( Profile profile )
     {
-        return !ProfileActivationUtils.profilesWereExplicitlyGiven() && canDetectActivation( profile );
+        return canDetectActivation( profile );
     }
 
     protected abstract boolean canDetectActivation( Profile profile );

File: maven-artifact-manager/src/main/java/org/apache/maven/artifact/transform/AbstractVersionTransformation.java
Patch:
@@ -98,7 +98,9 @@ protected String resolveVersion( Artifact artifact, ArtifactRepository localRepo
                         }
                         catch ( ResourceDoesNotExistException e )
                         {
-                            getLogger().debug( "Error resolving artifact version from metadata.", e );
+                            getLogger().debug(
+                                               "Artifact version metadata for: " + artifact.getId()
+                                                   + " could not be found on repository: " + repository.getId(), e );
 
                             continue;
                         }

File: maven-project/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java
Patch:
@@ -142,7 +142,7 @@ public void assembleModelInheritance( Model child, Model parent )
         // Build
         assembleBuildInheritance( child, parent.getBuild() );
 
-        ModelUtils.mergeModelBases( child, parent );
+        ModelUtils.mergeModelBases( child, parent, false );
     }
 
     private void assembleBuildInheritance( Model child, Build parentBuild )

File: maven-project/src/main/java/org/apache/maven/project/inheritance/ModelInheritanceAssembler.java
Patch:
@@ -17,7 +17,6 @@
  */
 
 import org.apache.maven.model.Model;
-import org.apache.maven.model.Profile;
 
 /**
  * @author <a href="mailto:jason@maven.org">Jason van Zyl</a>
@@ -28,6 +27,4 @@ public interface ModelInheritanceAssembler
     String ROLE = ModelInheritanceAssembler.class.getName();
 
     void assembleModelInheritance( Model child, Model parent );
-
-    void mergeProfileWithModel( Model model, Profile profile );
 }

File: maven-plugins/maven-compiler-plugin/src/main/java/org/apache/maven/plugin/TestCompilerMojo.java
Patch:
@@ -1,8 +1,5 @@
 package org.apache.maven.plugin;
 
-import java.util.List;
-import java.io.File;
-
 /*
  * Copyright 2001-2005 The Apache Software Foundation.
  *
@@ -19,6 +16,9 @@
  * limitations under the License.
  */
 
+import java.util.List;
+import java.io.File;
+
 /**
  * @author <a href="mailto:jason@maven.org">Jason van Zyl</a>
  * @version $Id$

File: maven-plugins/maven-ejb-plugin/src/main/java/org/apache/maven/plugin/ejb/EjbMojo.java
Patch:
@@ -112,6 +112,8 @@ public void execute()
             // create archive
             archiver.createArchive( project, archive );
 
+            project.getArtifact().setFile( jarFile );
+
             if ( new Boolean( generateClient ).booleanValue() )
             {
                 getLog().info( "Building ejb client " + jarName + "-client" );
@@ -145,4 +147,4 @@ public void execute()
         }
     }
 
-}
\ No newline at end of file
+}

File: maven-plugins/maven-ear-plugin/src/main/java/org/apache/maven/plugin/ear/ApplicationXmlWriter.java
Patch:
@@ -1,6 +1,5 @@
 package org.apache.maven.plugin.ear;
 
-import org.apache.maven.plugin.ear.module.EarModule;
 import org.codehaus.plexus.util.xml.PrettyPrintXMLWriter;
 import org.codehaus.plexus.util.xml.XMLWriter;
 

File: maven-plugins/maven-ear-plugin/src/main/java/org/apache/maven/plugin/ear/EarPluginException.java
Patch:
@@ -19,9 +19,8 @@
 /**
  * The base exception of the EAR plugin.
  *
- * @author Stephane Nicoll <stephane.nicoll@gmail.com>
- * @author $Author: sni $ (last edit)
- * @version $Revision: 1.2 $
+ * @author <a href="stephane.nicoll@gmail.com">Stephane Nicoll</a>
+ * @version $Id$
  */
 public class EarPluginException
     extends Exception

File: maven-plugins/maven-ear-plugin/src/main/java/org/apache/maven/plugin/ear/GenerateApplicationXmlMojo.java
Patch:
@@ -91,6 +91,9 @@ public class GenerateApplicationXmlMojo
     public void execute()
         throws MojoExecutionException
     {
+        // Initializes ear modules
+        super.execute();
+
         getLog().debug( " ======= GenerateApplicationXmlMojo settings =======" );
         getLog().debug( "generateApplicationXml[" + generateApplicationXml + "]" );
         getLog().debug( "version[" + version + "]" );

File: maven-artifact/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java
Patch:
@@ -54,7 +54,7 @@ else if ( DefaultArtifact.SCOPE_RUNTIME.equals( scope ) )
         }
         else if ( DefaultArtifact.SCOPE_TEST.equals( scope ) )
         {
-            providedScope = false;
+            providedScope = true;
             compileScope = true;
             runtimeScope = true;
             testScope = true;

File: maven-project/src/main/java/org/apache/maven/project/MavenProject.java
Patch:
@@ -152,10 +152,12 @@ public MavenProject( MavenProject project )
         this.pluginArtifacts = Collections.unmodifiableSet( project.pluginArtifacts );
         this.remoteArtifactRepositories = Collections.unmodifiableList( project.remoteArtifactRepositories );
         this.pluginArtifactRepositories = Collections.unmodifiableList( project.pluginArtifactRepositories );
-        this.attachedArtifacts = Collections.unmodifiableList( project.getAttachedArtifacts() );
         this.collectedProjects = Collections.unmodifiableList( project.collectedProjects );
         this.activeProfiles = Collections.unmodifiableList( project.activeProfiles );
 
+        // clone properties modifyable by plugins in a forked lifecycle
+        this.attachedArtifacts = new ArrayList( project.getAttachedArtifacts() );
+
         // no need for execution project
 
         // clone source roots

File: maven-artifact-manager/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java
Patch:
@@ -217,7 +217,7 @@ public void getArtifact( Artifact artifact, List remoteRepositories )
             {
                 getArtifact( artifact, repository );
 
-                successful = true;
+                successful = artifact.isResolved();
             }
             catch ( ResourceDoesNotExistException e )
             {
@@ -244,7 +244,7 @@ public void getArtifact( Artifact artifact, ArtifactRepository repository )
         if ( policy.isEnabled() )
         {
             getRemoteFile( repository, artifact.getFile(), remotePath, downloadMonitor, policy.getChecksumPolicy() );
-            
+
             artifact.setResolved( true );
         }
         else

File: maven-artifact/src/main/java/org/apache/maven/artifact/DefaultArtifact.java
Patch:
@@ -434,7 +434,7 @@ public boolean isSnapshot()
         }
         else
         {
-            return getVersion().endsWith( SNAPSHOT_VERSION ) || getVersion().equals( LATEST_VERSION );
+            return getBaseVersion().endsWith( SNAPSHOT_VERSION ) || getBaseVersion().equals( LATEST_VERSION );
         }
     }
 

File: examples/maven-clover-plugin-samples/maven-clover-plugin-sample-simple/src/test/java/org/apache/maven/plugin/clover/samples/simple/SimpleTest.java
Patch:
@@ -20,7 +20,7 @@
 public class SimpleTest extends TestCase
 {
     public void testSomeMethod()
-    {        
+    {
         Simple simple = new Simple();
         simple.someMethod();
     }

File: maven-plugins/maven-site-plugin/src/main/java/org/apache/maven/doxia/DoxiaMojo.java
Patch:
@@ -1067,7 +1067,7 @@ private static void tryToFindDuplicates( File directory, Map duplicate )
         }
         excludePattern.deleteCharAt( excludePattern.length() - 1 );
 
-        List siteFiles = FileUtils.getFileNames( directory, null, excludePattern.toString(), false, false );
+        List siteFiles = FileUtils.getFileNames( directory, null, excludePattern.toString(), false );
         for ( Iterator it = siteFiles.iterator(); it.hasNext(); )
         {
             String currentFile = ( (String) it.next() );
@@ -1089,7 +1089,7 @@ private static void tryToFindDuplicates( File directory, Map duplicate )
 
             String filePattern = "**/" + key + ".*";
 
-            List files = FileUtils.getFileNames( directory, filePattern, excludePattern.toString(), true, false );
+            List files = FileUtils.getFileNames( directory, filePattern, excludePattern.toString(), true );
             if ( ( files != null ) && ( files.size() > 0 ) )
             {
                 List tmp = (List) duplicate.get( key.toLowerCase() );

File: maven-artifact/src/main/java/org/apache/maven/artifact/ArtifactStatus.java
Patch:
@@ -62,7 +62,7 @@ public final class ArtifactStatus
 
     private final String key;
 
-    private static Map map = null;
+    private static Map map;
 
     private ArtifactStatus( String key, int rank )
     {

File: maven-artifact/src/main/java/org/apache/maven/artifact/factory/ArtifactFactory.java
Patch:
@@ -42,10 +42,10 @@ Artifact createArtifactWithClassifier( String groupId, String artifactId, String
                                            String classifier );
 
     Artifact createDependencyArtifact( String groupId, String artifactId, VersionRange versionRange, String type,
-                                       String scope );
+                                       String classifier, String scope );
 
     Artifact createDependencyArtifact( String groupId, String artifactId, VersionRange versionRange, String type,
-                                       String scope, String inheritedScope );
+                                       String classifier, String scope, String inheritedScope );
 
     Artifact createBuildArtifact( String groupId, String artifactId, String version, String packaging );
 

File: maven-archiver/src/main/java/org/apache/maven/archiver/MavenArchiver.java
Patch:
@@ -249,11 +249,11 @@ public void createArchive( MavenProject project, MavenArchiveConfiguration archi
         // Create the manifest
         // ----------------------------------------------------------------------
 
-        String manifestFile = archiveConfiguration.getManifestFile();
+        File manifestFile = archiveConfiguration.getManifestFile();
 
-        if ( manifestFile != null && !"".equals( manifestFile ) )
+        if ( manifestFile != null )
         {
-            archiver.setManifest( new File( manifestFile ) );
+            archiver.setManifest( manifestFile );
         }
 
         Manifest manifest = getManifest( project, archiveConfiguration.getManifest() );

File: maven-artifact-manager/src/main/java/org/apache/maven/artifact/deployer/DefaultArtifactDeployer.java
Patch:
@@ -39,6 +39,7 @@ public class DefaultArtifactDeployer
 
     private List artifactTransformations;
 
+    /** @deprecated we want to use the artifact method only, and ensure artifact.file is set correctly. */
     public void deploy( String basedir, String finalName, Artifact artifact, ArtifactRepository deploymentRepository,
                         ArtifactRepository localRepository )
         throws ArtifactDeploymentException

File: maven-artifact-manager/src/main/java/org/apache/maven/artifact/installer/DefaultArtifactInstaller.java
Patch:
@@ -35,13 +35,12 @@ public class DefaultArtifactInstaller
 {
     private List artifactTransformations;
 
+    /** @deprecated we want to use the artifact method only, and ensure artifact.file is set correctly. */
     public void install( String basedir, String finalName, Artifact artifact, ArtifactRepository localRepository )
         throws ArtifactInstallationException
     {
-        File source = null;
-
         String extension = artifact.getArtifactHandler().getExtension();
-        source = new File( basedir, finalName + "." + extension );
+        File source = new File( basedir, finalName + "." + extension );
 
         install( source, artifact, localRepository );
     }

File: maven-plugins/maven-javadoc-plugin/src/main/java/org/apache/maven/plugin/javadoc/JavadocReport.java
Patch:
@@ -62,8 +62,6 @@ public class JavadocReport
     /** The current class directory */
     private static final String RESOURCE_DIR = ClassUtils.getPackageName(JavadocReport.class).replace('.', '/');
 
-    private static final String DEFAULT_TEMPLATE = RESOURCE_DIR + "/maven-site.vm";
-    
     /** Default location for css */
     private static final String DEFAULT_CSS_NAME = "stylesheet.css";
     private static final String RESOURCE_CSS_DIR = RESOURCE_DIR + "/css";
@@ -277,7 +275,7 @@ public class JavadocReport
      * See <a href="http://java.sun.com/j2se/1.4.2/docs/tooldocs/windows/javadoc.html#bottom">bottom</a>.
      * 
      * @parameter expression="${bottom}"
-     *            default-value="ISO-8859-1"
+     *            default-value="Copyright ${project.inceptionYear-currentYear} ${project.organization.name}. All Rights Reserved."
      */
     private String bottom;
 

File: maven-plugins/maven-deploy-plugin/src/main/java/org/apache/maven/plugin/deploy/DeployMojo.java
Patch:
@@ -86,7 +86,6 @@ public class DeployMojo
 
     /**
      * @parameter expression="${project.distributionManagementArtifactRepository}"
-     * @required
      * @readonly
      */
     private ArtifactRepository deploymentRepository;

File: maven-artifact/src/main/java/org/apache/maven/artifact/handler/ArtifactHandler.java
Patch:
@@ -22,7 +22,7 @@
  */
 public interface ArtifactHandler
 {
-    static String ROLE = ArtifactHandler.class.getName();
+    String ROLE = ArtifactHandler.class.getName();
 
     String getExtension();
 

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Patch:
@@ -617,20 +617,20 @@ private void resolveCoreArtifacts( List unresolved, List remoteRepositories, Art
                 if ( resourceUrl == null )
                 {
                     artifactResolver.resolve( artifact, unresolved, localRepository );
-                    
+
                     artifactFile = artifact.getFile();
                 }
                 else
                 {
                     String artifactPath = resourceUrl.getPath();
-                    
+
                     if ( artifactPath.startsWith( "file:" ) )
                     {
                         artifactPath = artifactPath.substring( "file:".length() );
                     }
 
                     artifactPath = artifactPath.substring( 0, artifactPath.length() - resource.length() );
-                    
+
                     if ( artifactPath.endsWith( "/" ) )
                     {
                         artifactPath = artifactPath.substring( 0, artifactPath.length() - 1 );

File: maven-artifact-manager/src/test/java/org/apache/maven/artifact/resolver/ArtifactResolverTest.java
Patch:
@@ -115,7 +115,7 @@ public ResolutionGroup retrieve( Artifact artifact, ArtifactRepository localRepo
                     }
                 }
 
-                return new ResolutionGroup( dependencies, remoteRepositories );
+                return new ResolutionGroup( artifact, dependencies, remoteRepositories );
             }
         };
 
@@ -162,7 +162,7 @@ public ResolutionGroup retrieve( Artifact artifact, ArtifactRepository localRepo
                     }
                 }
 
-                return new ResolutionGroup( dependencies, remoteRepositories );
+                return new ResolutionGroup( artifact, dependencies, remoteRepositories );
             }
         };
 

File: maven-artifact/src/test/java/org/apache/maven/artifact/resolver/DefaultArtifactCollectorTest.java
Patch:
@@ -419,7 +419,7 @@ public ResolutionGroup retrieve( Artifact artifact, ArtifactRepository localRepo
             ArtifactSpec a = (ArtifactSpec) artifacts.get( key );
             try
             {
-                return new ResolutionGroup( createArtifacts( artifactFactory, a.dependencies, artifact.getScope(),
+                return new ResolutionGroup( artifact, createArtifacts( artifactFactory, a.dependencies, artifact.getScope(),
                                                              artifact.getDependencyFilter() ), Collections.EMPTY_LIST );
             }
             catch ( InvalidVersionSpecificationException e )

File: maven-project/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java
Patch:
@@ -130,7 +130,7 @@ public ResolutionGroup retrieve( Artifact artifact, ArtifactRepository localRepo
             Set artifacts = createArtifacts( artifactFactory, p.getDependencies(), artifact.getScope(),
                                              artifact.getDependencyFilter() );
 
-            return new ResolutionGroup( artifacts, p.getRemoteArtifactRepositories() );
+            return new ResolutionGroup( pomArtifact, artifacts, p.getRemoteArtifactRepositories() );
         }
         catch ( InvalidVersionSpecificationException e )
         {

File: maven-project/src/test/java/org/apache/maven/project/TestArtifactResolver.java
Patch:
@@ -132,7 +132,7 @@ public ResolutionGroup retrieve( Artifact artifact, ArtifactRepository localRepo
                 throw new ArtifactMetadataRetrievalException( e );
             }
 
-            return new ResolutionGroup( artifacts, artifactRepositories );
+            return new ResolutionGroup( artifact, artifacts, artifactRepositories );
         }
 
         protected Set createArtifacts( List dependencies, String inheritedScope )

File: maven-plugins/maven-release-plugin/src/main/java/org/apache/maven/plugin/scm/ScmBean.java
Patch:
@@ -1,6 +1,6 @@
 package org.apache.maven.plugin.scm;
 
-/* =========7===========================================================
+/* =====================================================================
  *   Copyright 2001-2005 The Apache Software Foundation.
  *
  *   Licensed under the Apache License, Version 2.0 (the "License");

File: maven-core/src/main/java/org/apache/maven/plugin/PluginManager.java
Patch:
@@ -51,8 +51,7 @@ PluginDescriptor verifyPlugin( Plugin plugin, MavenProject project, Settings set
                                   ArtifactRepository localRepository )
         throws ArtifactResolutionException, PluginManagerException, PluginVersionResolutionException;
 
-    List getReports( ReportPlugin reportPlugin, ReportSet reportSet, MavenProject project, MavenSession session,
-                    ArtifactRepository localRepository )
+    List getReports( ReportPlugin reportPlugin, ReportSet reportSet, MavenProject project, MavenSession session )
         throws PluginManagerException, PluginVersionResolutionException, PluginConfigurationException,
         ArtifactResolutionException;
 

File: maven-core/src/main/java/org/apache/maven/plugin/version/PluginVersionManager.java
Patch:
@@ -28,4 +28,7 @@ public interface PluginVersionManager
     String resolvePluginVersion( String groupId, String artifactId, MavenProject project, Settings settings, ArtifactRepository localRepository )
         throws PluginVersionResolutionException;
 
+    String resolvePluginVersion( String groupId, String artifactId, MavenProject project, Settings settings, ArtifactRepository localRepository, boolean resolveAsReportPlugin )
+        throws PluginVersionResolutionException;
+
 }

File: maven-plugin-descriptor/src/main/java/org/apache/maven/plugin/descriptor/PluginDescriptor.java
Patch:
@@ -223,7 +223,7 @@ public Map getArtifactMap()
     {
         if ( artifactMap == null )
         {
-            artifactMap = ArtifactUtils.artifactMap( getArtifacts() );
+            artifactMap = ArtifactUtils.artifactMapByVersionlessId( getArtifacts() );
         }
         
         return artifactMap;

File: maven-project/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java
Patch:
@@ -49,6 +49,9 @@ public class MavenMetadataSource
     extends AbstractLogEnabled
     implements ArtifactMetadataSource
 {
+    
+    public static final String ROLE_HINT = "maven";
+    
     private MavenProjectBuilder mavenProjectBuilder;
 
     private ArtifactFactory artifactFactory;

File: maven-project/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java
Patch:
@@ -145,7 +145,6 @@ public static Set createArtifacts( ArtifactFactory artifactFactory, List depende
         {
             Dependency d = (Dependency) i.next();
 
-            // TODO: validate
             VersionRange versionRange = VersionRange.createFromVersionSpec( d.getVersion() );
             Artifact artifact = artifactFactory.createDependencyArtifact( d.getGroupId(), d.getArtifactId(),
                                                                           versionRange, d.getType(), d.getScope(),

File: maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -272,7 +272,7 @@ private Model findModelFromRepository( Artifact artifact, List remoteArtifactRep
                 model.setArtifactId( artifact.getArtifactId() );
                 model.setGroupId( artifact.getGroupId() );
                 model.setVersion( artifact.getVersion() );
-                // TOOD: not correct in some instances
+                // TODO: not correct in some instances
                 model.setPackaging( artifact.getType() );
             }
         }

File: maven-plugins/maven-surefire-plugin/src/main/java/org/apache/maven/test/SurefirePlugin.java
Patch:
@@ -173,7 +173,7 @@ public void execute()
             }
 
             surefireBooter.addBattery( "org.codehaus.surefire.battery.DirectoryBattery",
-                                       new Object[]{ new File( basedir ), includes, excludes} );
+                                       new Object[]{testClassesDirectory, includes, excludes} );
         }
         else
         {

File: maven-artifact-manager/src/main/java/org/apache/maven/artifact/repository/metadata/RepositoryMetadataManagementException.java
Patch:
@@ -8,14 +8,14 @@ public class RepositoryMetadataManagementException
 
     public RepositoryMetadataManagementException( RepositoryMetadata metadata, String message, Throwable cause )
     {
-        super( "Failed to resolve repository metadata: " + metadata + ". Error was: " + cause.getMessage(), cause );
+        super( "Failed to resolve repository metadata: " + metadata + ".\n\nOriginal message: " + message + "\n\nError was: " + cause.getMessage(), cause );
         
         this.metadata = metadata;
     }
 
     public RepositoryMetadataManagementException( RepositoryMetadata metadata, String message )
     {
-        super( "Failed to resolve repository metadata: " + metadata + "." );
+        super( "Failed to resolve repository metadata: " + metadata + ".\n\nOriginal message: " + message );
         
         this.metadata = metadata;
     }

File: maven-core-it-verifier/src/main/java/org/apache/maven/it/Verifier.java
Patch:
@@ -493,8 +493,8 @@ public void executeGoals( Properties properties, String filename )
 
             cli.setExecutable( executable );
             
-//            cli.createArgument().setValue( "-e" );
-            cli.createArgument().setValue( "-X" );
+            cli.createArgument().setValue( "-e" );
+//            cli.createArgument().setValue( "-X" );
             
             cli.createArgument().setValue( "--no-plugin-registry" );
             

File: maven-plugin-mapping/src/main/java/org/apache/maven/plugin/mapping/metadata/PluginMappingMetadata.java
Patch:
@@ -17,7 +17,7 @@ public PluginMappingMetadata( String groupId )
     {
         this.groupId = groupId;
     }
-
+    
     public String getRepositoryPath()
     {
         return groupId + "/" + PLUGIN_MAPPING_FILE;

File: maven-plugin-registry/src/main/java/org/apache/maven/plugin/registry/DefaultPluginRegistryBuilder.java
Patch:
@@ -58,8 +58,8 @@ public void initialize()
         
         globalRegistryFile = getFile( globalRegistryPath, "maven.home", MavenPluginRegistryBuilder.ALT_GLOBAL_PLUGIN_REG_LOCATION );
 
-        getLogger().debug( "Building Maven global-level settings from: '" + globalRegistryFile.getAbsolutePath() + "'" );
-        getLogger().debug( "Building Maven user-level settings from: '" + userRegistryFile.getAbsolutePath() + "'" );
+        getLogger().debug( "Building Maven global-level plugin registry from: '" + globalRegistryFile.getAbsolutePath() + "'" );
+        getLogger().debug( "Building Maven user-level plugin registry from: '" + userRegistryFile.getAbsolutePath() + "'" );
     }
     
     public PluginRegistry buildPluginRegistry()

File: maven-plugin-mapping/src/main/java/org/apache/maven/plugin/mapping/DefaultPluginMappingBuilder.java
Patch:
@@ -113,6 +113,9 @@ private File resolveMappingMetadata( String groupId, List pluginRepositories, Ar
             try
             {
                 repositoryMetadataManager.resolve( metadata, repository, localRepository );
+                
+                // reset this to keep it from getting in the way when we succeed but not on first repo...
+                repositoryException = null;
 
                 break;
             }

File: maven-artifact-manager/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java
Patch:
@@ -337,7 +337,7 @@ private void getRemoteFile( ArtifactRepository repository, File destination, Str
                 // try to verify the SHA-1 checksum for this file.
                 try
                 {
-                    verifyChecksum( sha1ChecksumObserver, destination, remotePath, ".sha1", wagon );
+                    verifyChecksum( sha1ChecksumObserver, temp, remotePath, ".sha1", wagon );
                 }
                 catch ( WagonException sha1TryException )
                 {
@@ -364,7 +364,7 @@ private void getRemoteFile( ArtifactRepository repository, File destination, Str
                     {
                         try
                         {
-                            verifyChecksum( md5ChecksumObserver, destination, remotePath, ".md5", wagon );
+                            verifyChecksum( md5ChecksumObserver, temp, remotePath, ".md5", wagon );
                         }
                         catch ( WagonException md5TryException )
                         {
@@ -386,7 +386,7 @@ private void getRemoteFile( ArtifactRepository repository, File destination, Str
                             // otherwise, this was a failed transfer, and we don't want to retry.
                             else
                             {
-                                handleChecksumFailure( repository, "Error retrieving checksum file for " + destination,
+                                handleChecksumFailure( repository, "Error retrieving checksum file for " + remotePath,
                                                        md5TryException );
                             }
                         }

File: maven-artifact-manager/src/main/java/org/apache/maven/artifact/installer/DefaultArtifactInstaller.java
Patch:
@@ -75,6 +75,7 @@ public void install( File source, Artifact artifact, ArtifactRepository localRep
             for ( Iterator i = artifact.getMetadataList().iterator(); i.hasNext(); )
             {
                 ArtifactMetadata metadata = (ArtifactMetadata) i.next();
+                
                 metadata.storeInLocalRepository( localRepository );
             }
         }

File: maven-artifact/src/main/java/org/apache/maven/artifact/repository/layout/DefaultRepositoryLayout.java
Patch:
@@ -57,7 +57,7 @@ public String pathOfMetadata( ArtifactMetadata metadata )
 
         path.append( formatAsDirectory( metadata.getGroupId() ) ).append( '/' );
         path.append( metadata.getArtifactId() ).append( '/' );
-        if ( !metadata.getBaseVersion().equals( "RELEASE" ) )
+        if ( metadata.storedInArtifactDirectory() )
         {
             path.append( metadata.getBaseVersion() ).append( '/' );
         }

File: maven-artifact-manager/src/main/java/org/apache/maven/artifact/repository/metadata/RepositoryMetadataManager.java
Patch:
@@ -4,8 +4,8 @@
 
 public interface RepositoryMetadataManager
 {
-
-    void resolve( RepositoryMetadata repositoryMetadata, ArtifactRepository remote, ArtifactRepository local, String remoteRepositoryId )
+    
+    void resolve( RepositoryMetadata repositoryMetadata, ArtifactRepository remote, ArtifactRepository local )
         throws RepositoryMetadataManagementException;
     
     void deploy( RepositoryMetadata repositoryMetadata, ArtifactRepository remote )

File: maven-plugin-mapping/src/main/java/org/apache/maven/plugin/mapping/DefaultPluginMappingBuilder.java
Patch:
@@ -93,7 +93,7 @@ private File resolveMappingMetadata( String groupId, List pluginRepositories, Ar
 
             try
             {
-                repositoryMetadataManager.resolve( metadata, repository, localRepository, repository.getId() );
+                repositoryMetadataManager.resolve( metadata, repository, localRepository );
 
                 break;
             }

File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java
Patch:
@@ -35,6 +35,7 @@
 import org.apache.maven.plugin.lifecycle.Execution;
 import org.apache.maven.plugin.lifecycle.Lifecycle;
 import org.apache.maven.plugin.lifecycle.Phase;
+import org.apache.maven.plugin.mapping.MavenPluginMappingBuilder;
 import org.apache.maven.plugin.version.PluginVersionResolutionException;
 import org.apache.maven.project.MavenProject;
 import org.apache.maven.project.injection.ModelDefaultsInjector;
@@ -69,6 +70,8 @@ public class DefaultLifecycleExecutor
     // ----------------------------------------------------------------------
 
     private ModelDefaultsInjector modelDefaultsInjector;
+    
+    private MavenPluginMappingBuilder pluginMappingBuilder;
 
     private PluginManager pluginManager;
 

File: maven-artifact/src/main/java/org/apache/maven/artifact/repository/ArtifactRepository.java
Patch:
@@ -46,6 +46,8 @@ public interface ArtifactRepository
     String pathOf( Artifact artifact );
 
     String pathOfMetadata( ArtifactMetadata artifactMetadata );
+    
+    String formatDirectory( String directory );
 
     String getUrl();
 

File: maven-artifact/src/main/java/org/apache/maven/artifact/repository/layout/ArtifactRepositoryLayout.java
Patch:
@@ -30,4 +30,6 @@ public interface ArtifactRepositoryLayout
     String pathOf( Artifact artifact );
 
     String pathOfMetadata( ArtifactMetadata metadata );
+
+    String formatDirectory( String directory );
 }
\ No newline at end of file

File: maven-mboot2/src/main/java/MBoot.java
Patch:
@@ -39,6 +39,7 @@ public class MBoot
 {
     String[] builds = new String[]{"maven-model", "maven-settings", "maven-monitor", "maven-plugin-api",
         "maven-plugin-descriptor", "maven-artifact", "maven-artifact-manager", "maven-artifact-test",
+        "maven-plugin-mapping",
         "maven-script/maven-script-beanshell", "maven-script/maven-script-marmalade", "maven-project", "maven-profile",
         "maven-plugin-registry", "maven-reporting/maven-reporting-api", "maven-core", "maven-archiver",
         "maven-plugin-tools/maven-plugin-tools-api", "maven-plugin-tools/maven-plugin-tools-java",
@@ -60,6 +61,7 @@ public class MBoot
         targetVersions.put( "maven-profile", "1.0.0" );
         targetVersions.put( "maven-plugin-registry", "1.0.0" );
         targetVersions.put( "maven-plugin-descriptor", "1.0.0" );
+        targetVersions.put( "maven-plugin-mapping", "1.0.0" );
 
         MODELLO_TARGET_VERSIONS = Collections.unmodifiableMap( targetVersions );
 
@@ -69,6 +71,7 @@ public class MBoot
         modelFiles.put( "maven-profile", "profiles.mdo" );
         modelFiles.put( "maven-plugin-registry", "plugin-registry.mdo" );
         modelFiles.put( "maven-plugin-descriptor", "src/main/mdo/lifecycle.mdo" );
+        modelFiles.put( "maven-plugin-mapping", "src/main/mdo/plugins.mdo" );
 
         MODELLO_MODEL_FILES = Collections.unmodifiableMap( modelFiles );
     }

File: maven-plugins/maven-antlr-plugin/src/main/java/org/apache/maven/plugin/antlr/AntlrPlugin.java
Patch:
@@ -12,7 +12,7 @@
 import java.util.StringTokenizer;
 
 /**
- * @goal genrerate
+ * @goal generate
  * @phase generate-sources
  * @requiresDependencyResolution compile
  * @description Antlr plugin

File: sandbox/maven-ear-plugin/src/main/java/org/apache/maven/plugin/ear/GenerateApplicationXmlMojo.java
Patch:
@@ -90,7 +90,7 @@ public void execute()
         getLog().debug( "encoding[" + encoding + "]" );
         getLog().debug( "generatedDescriptorLocation[" + generatedDescriptorLocation + "]" );
 
-        if ( !version.equals( VERSION_1_3 ) && version.equals( VERSION_1_4 ) )
+        if ( !version.equals( VERSION_1_3 ) && !version.equals( VERSION_1_4 ) )
         {
             throw new MojoExecutionException( "Invalid version[" + version + "]" );
         }

File: maven-archiver/src/main/java/org/apache/maven/archiver/MavenArchiver.java
Patch:
@@ -73,6 +73,7 @@ public Manifest getManifest( MavenProject project, ManifestConfiguration config
         {
             StringBuffer classpath = new StringBuffer();
             List artifacts = project.getRuntimeClasspathElements();
+            String classpathPrefix = config.getClasspathPrefix();
 
             for ( Iterator iter = artifacts.iterator(); iter.hasNext(); )
             {
@@ -84,6 +85,7 @@ public Manifest getManifest( MavenProject project, ManifestConfiguration config
                         classpath.append( " " );
                     }
 
+                    classpath.append( classpathPrefix );
                     classpath.append( f.getName() );
                 }
             }

File: sandbox/maven-ear-plugin/src/main/java/org/apache/maven/plugin/ear/AbstractEarMojo.java
Patch:
@@ -72,7 +72,8 @@ protected List getModules()
             for ( Iterator iter = artifacts.iterator(); iter.hasNext(); )
             {
                 Artifact artifact = (Artifact) iter.next();
-                if ( !Artifact.SCOPE_TEST.equals( artifact.getScope() ) )
+                if ( !Artifact.SCOPE_TEST.equals( artifact.getScope())  ||
+                    !Artifact.SCOPE_PROVIDED.equals( artifact.getScope()) )
                 {
                     EarModule module = EarModuleFactory.newEarModule( artifact );
                     modules.add( module );

File: sandbox/maven-ear-plugin/src/main/java/org/apache/maven/plugin/ear/EarMojo.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.List;
 
 /**
- * The Ear Mojo.
+ * Builds J2EE Enteprise Archive (EAR) files.
  *
  * @author <a href="stephane.nicoll@gmail.com">Stephane Nicoll</a>
  * @version $Id $
@@ -77,7 +77,7 @@ public class EarMojo
      *
      * @parameter alias="earName" expression="${project.build.finalName}"
      * @required
-     * @readonly
+     * @readonly     
      */
     private String finalName;
 

File: maven-plugin-descriptor/src/main/java/org/apache/maven/plugin/descriptor/MojoDescriptor.java
Patch:
@@ -149,7 +149,7 @@ public Map getParameterMap()
         {
             parameterMap = new HashMap();
 
-            if ( parameters == null )
+            if ( parameters != null )
             {
                 for ( Iterator iterator = parameters.iterator(); iterator.hasNext(); )
                 {

File: maven-core/src/main/java/org/apache/maven/plugin/version/DefaultPluginVersionManager.java
Patch:
@@ -97,7 +97,7 @@ public String resolvePluginVersion( String groupId, String artifactId, MavenProj
                     || ( !Boolean.FALSE.equals( pluginUpdateOverride ) && shouldCheckForUpdates( groupId, artifactId ) ) )
                 {
                     updatedVersion = resolveReleaseVersion( groupId, artifactId, project
-                        .getRemoteArtifactRepositories(), localRepository );
+                        .getPluginArtifactRepositories(), localRepository );
 
                     if ( StringUtils.isNotEmpty( updatedVersion ) && !updatedVersion.equals( version ) )
                     {
@@ -127,7 +127,7 @@ public String resolvePluginVersion( String groupId, String artifactId, MavenProj
         if ( StringUtils.isEmpty( version ) )
         {
             // 1. resolve the version to be used THIS TIME
-            version = resolveReleaseVersion( groupId, artifactId, project.getRemoteArtifactRepositories(),
+            version = resolveReleaseVersion( groupId, artifactId, project.getPluginArtifactRepositories(),
                                              localRepository );
 
             // 2. Set the updatedVersion so the user will be prompted whether to make this version permanent.

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Patch:
@@ -267,7 +267,7 @@ protected void addPlugin( String pluginKey, Artifact pluginArtifact, MavenProjec
         {
             artifactResolver = (ArtifactResolver) container.lookup( ArtifactResolver.ROLE );
 
-            artifactResolver.resolve( pluginArtifact, project.getRemoteArtifactRepositories(), localRepository );
+            artifactResolver.resolve( pluginArtifact, project.getPluginArtifactRepositories(), localRepository );
 
             PlexusContainer child = container.createChildContainer( pluginKey, Collections
                 .singletonList( pluginArtifact.getFile() ), Collections.EMPTY_MAP, Collections.singletonList( this ) );

File: maven-artifact-manager/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java
Patch:
@@ -434,7 +434,7 @@ private void getRemoteFile( ArtifactRepository repository, File destination, Str
     private void handleChecksumFailure( ArtifactRepository repository, String message, Throwable cause )
         throws ChecksumFailedException
     {
-        if ( ArtifactRepository.CHECKSUM_POLICY_FAIL.equals( repository.getChecksumPolicy() ) )
+        if ( repository.failOnChecksumMismatch() )
         {
             throw new ChecksumFailedException( message, cause );
         }

File: maven-artifact/src/main/java/org/apache/maven/artifact/repository/ArtifactRepository.java
Patch:
@@ -58,4 +58,6 @@ public interface ArtifactRepository
     String getId();
 
     String getChecksumPolicy();
+
+    boolean failOnChecksumMismatch();
 }

File: maven-core/src/main/java/org/apache/maven/plugin/version/DefaultPluginVersionManager.java
Patch:
@@ -289,7 +289,7 @@ private boolean promptToPersistPluginUpdate( String version, String updatedVersi
                 message.append( "Registered Version: " ).append( version ).append( "\n" );
             }
 
-            message.append( "Detected (NEW) Version: " ).append( updatedVersion ).append( "\n" );
+            message.append( "Detected plugin version: " ).append( updatedVersion ).append( "\n" );
             message.append( "\n" );
             message.append( "Would you like to use this new version from now on? ( [Y]es, [n]o, [a]ll, n[o]ne ) " );
 
@@ -299,7 +299,7 @@ private boolean promptToPersistPluginUpdate( String version, String updatedVersi
 
             String persistAnswer = inputHandler.readLine();
 
-            boolean shouldPersist = false;
+            boolean shouldPersist = true;
 
             if ( !StringUtils.isEmpty( persistAnswer ) )
             {

File: maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -312,7 +312,7 @@ private void forcePluginExecutionIdCollision( String pomLocation, Model model )
                     }
                     catch ( IllegalStateException collisionException )
                     {
-                        throw new ProjectBuildingException( "Detected illegal plugin-execution configuration in: " + pomLocation, collisionException ); 
+                        throw new ProjectBuildingException( "Detected illegal plugin-execution configuration in: " + pomLocation + " Error output: \n\n" + collisionException.getMessage(), collisionException ); 
                     }
                 }
             }

File: maven-core-it-verifier/src/main/java/org/apache/maven/it/Verifier.java
Patch:
@@ -492,6 +492,8 @@ public void executeGoals( Properties properties, String filename )
             
             cli.createArgument().setValue( "-e" );
             
+            cli.createArgument().setValue( "--no-plugin-updates" );
+            
             cli.createArgument().setValue( "--batch-mode" );
 
             for ( Iterator i = properties.keySet().iterator(); i.hasNext(); )

File: maven-artifact/src/main/java/org/apache/maven/artifact/repository/ArtifactRepositoryFactory.java
Patch:
@@ -28,7 +28,9 @@ public interface ArtifactRepositoryFactory
 
     public ArtifactRepository createArtifactRepository( String id, String url,
                                                         ArtifactRepositoryLayout repositoryLayout,
-                                                        String snapshotPolicy );
+                                                        String snapshotPolicy, String checksumPolicy );
 
     void setGlobalSnapshotPolicy( String snapshotPolicy );
+    
+    void setGlobalChecksumPolicy( String checksumPolicy );
 }
\ No newline at end of file

File: maven-artifact/src/test/java/org/apache/maven/artifact/ArtifactComponentTestCase.java
Patch:
@@ -90,7 +90,7 @@ protected ArtifactRepository remoteRepository()
         ArtifactRepositoryLayout repoLayout = (ArtifactRepositoryLayout) lookup( ArtifactRepositoryLayout.ROLE,
                                                                                  "legacy" );
 
-        ArtifactRepository repository = new ArtifactRepository( "test", "file://" + f.getPath(), repoLayout );
+        ArtifactRepository repository = new ArtifactRepository( "test", "file://" + f.getPath(), repoLayout, ArtifactRepository.SNAPSHOT_POLICY_NEVER, ArtifactRepository.CHECKSUM_POLICY_WARN );
 
         return repository;
     }

File: maven-plugin-registry/src/main/java/org/apache/maven/plugin/registry/DefaultPluginRegistryBuilder.java
Patch:
@@ -1,7 +1,6 @@
 package org.apache.maven.plugin.registry;
 
 import org.apache.maven.plugin.registry.io.xpp3.PluginRegistryXpp3Reader;
-import org.apache.maven.plugin.registry.TrackableBase;
 import org.codehaus.plexus.logging.AbstractLogEnabled;
 import org.codehaus.plexus.personality.plexus.lifecycle.phase.Initializable;
 import org.codehaus.plexus.util.IOUtil;

File: maven-core/src/main/java/org/apache/maven/lifecycle/LifecycleExecutor.java
Patch:
@@ -32,5 +32,4 @@ public interface LifecycleExecutor
     MavenExecutionResponse execute( List tasks, MavenSession session )
         throws LifecycleExecutionException;
 
-    List getPhases();
 }

File: maven-core/src/main/java/org/apache/maven/plugin/PluginManager.java
Patch:
@@ -32,7 +32,7 @@ public interface PluginManager
 {
     String ROLE = PluginManager.class.getName();
 
-    void executeMojo( MavenSession session, GoalInstance buildStep )
+    void executeMojo( MojoExecution execution, MavenSession session )
         throws MojoExecutionException, PluginManagerException, ArtifactResolutionException;
 
     PluginDescriptor verifyPlugin( String prefix );

File: maven-artifact-ant/src/main/java/org/apache/maven/artifact/ant/Pom.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.maven.model.DistributionManagement;
 import org.apache.maven.model.IssueManagement;
 import org.apache.maven.model.Organization;
-import org.apache.maven.model.Reports;
+import org.apache.maven.model.Reporting;
 import org.apache.maven.model.Scm;
 import org.apache.maven.project.MavenProject;
 import org.apache.maven.project.MavenProjectBuilder;
@@ -232,9 +232,9 @@ public java.util.List getPluginRepositories()
         return getMavenProject().getPluginRepositories();
     } //-- java.util.List getPluginRepositories()
 
-    public Reports getReports()
+    public Reporting getReporting()
     {
-        return getMavenProject().getReports();
+        return getMavenProject().getReporting();
     } //-- Reports getReports()
 
     public java.util.List getRepositories()

File: maven-plugins/maven-site-plugin/src/main/java/org/apache/maven/doxia/DoxiaMojo.java
Patch:
@@ -717,15 +717,15 @@ private Map getReports()
     {
         // TODO: not the best solution. Perhaps a mojo tag that causes the plugin manager to populate project reports instead?
 
-        List reportPlugins = project.getReportPlugins();
+        List reportPlugins = project.getReporters();
         if ( reportPlugins != null )
         {
             for ( Iterator it = reportPlugins.iterator(); it.hasNext(); )
             {
-                org.apache.maven.model.Plugin plugin = (org.apache.maven.model.Plugin) it.next();
+                org.apache.maven.model.Reporter reporter = (org.apache.maven.model.Reporter) it.next();
                 try
                 {
-                    pluginManager.verifyPlugin( plugin.getGroupId(), plugin.getArtifactId(), plugin.getVersion(),
+                    pluginManager.verifyPlugin( reporter.getGroupId(), reporter.getArtifactId(), reporter.getVersion(),
                                                 project, settings, localRepository );
                 }
                 catch ( ArtifactResolutionException e )

File: maven-core-it-verifier/src/main/java/org/apache/maven/it/Verifier.java
Patch:
@@ -499,6 +499,8 @@ public void executeGoals( Properties properties, String filename )
                 String key = (String) i.next();
                 cli.createArgument().setLine( "-D" + key + "=" + properties.getProperty( key ) );
             }
+            
+            cli.createArgument().setLine( "-Dmaven.repo.local=" + localRepo );
 
             for ( Iterator i = allGoals.iterator(); i.hasNext(); )
             {

File: maven-settings/src/main/java/org/apache/maven/settings/MavenSettingsBuilder.java
Patch:
@@ -31,6 +31,7 @@ public interface MavenSettingsBuilder
     
     String ALT_USER_SETTINGS_XML_LOCATION = "org.apache.maven.user-settings";
     String ALT_GLOBAL_SETTINGS_XML_LOCATION = "org.apache.maven.global-settings";
+    String ALT_LOCAL_REPOSITORY_LOCATION = "maven.repo.local";
 
     Settings buildSettings()
         throws IOException, XmlPullParserException;

File: maven-archiver/src/main/java/org/apache/maven/archiver/MavenArchiver.java
Patch:
@@ -137,6 +137,7 @@ public Manifest getManifest( MavenProject project, ManifestConfiguration config
             for ( Iterator iter = artifacts.iterator(); iter.hasNext(); )
             {
                 Artifact artifact = (Artifact) iter.next();
+                // TODO: type of ejb should be added too?
                 if ( "jar".equals( artifact.getType() ) )
                 {
                     if ( extensionsList.length() > 0 )

File: maven-artifact-ant/src/main/java/org/apache/maven/artifact/ant/DeployTask.java
Patch:
@@ -66,8 +66,8 @@ public void execute()
         ArtifactRepository deploymentRepository = createRemoteArtifactRepository( remoteRepository );
 
         // Deploy the POM
-        Artifact artifact = new DefaultArtifact( pom.getGroupId(), pom.getArtifactId(), pom.getVersion(),
-                                                 pom.getPackaging() );
+        Artifact artifact = createArtifact( pom );
+
         boolean isPomArtifact = "pom".equals( pom.getPackaging() );
         if ( !isPomArtifact )
         {

File: maven-artifact-test/src/main/java/org/apache/maven/artifact/test/ArtifactTestCase.java
Patch:
@@ -18,9 +18,7 @@
 
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.repository.ArtifactRepository;
-import org.apache.maven.artifact.repository.layout.ArtifactPathFormatException;
 import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;
-import org.apache.maven.settings.Profile;
 import org.apache.maven.settings.Settings;
 import org.apache.maven.settings.io.xpp3.SettingsXpp3Reader;
 import org.codehaus.plexus.PlexusTestCase;
@@ -40,7 +38,6 @@ public abstract class ArtifactTestCase
     private ArtifactRepository localRepository;
 
     protected File getLocalArtifactPath( Artifact artifact )
-        throws ArtifactPathFormatException
     {
         return new File( localRepository.getBasedir(), localRepository.pathOf( artifact ) );
     }

File: maven-artifact/src/main/java/org/apache/maven/artifact/factory/ArtifactFactory.java
Patch:
@@ -27,6 +27,6 @@ Artifact createArtifact( String groupId, String artifactId, String version, Stri
 
     Artifact createArtifact( String groupId, String artifactId, String knownVersion, String scope, String type );
     
-    public Artifact createArtifactWithClassifier( String groupId, String artifactId, String version, String scope,
+    Artifact createArtifactWithClassifier( String groupId, String artifactId, String version, String scope,
                                                   String type, String classifier );
 }

File: maven-artifact/src/main/java/org/apache/maven/artifact/handler/DefaultArtifactHandler.java
Patch:
@@ -65,7 +65,7 @@ public String getDirectory()
     {
         if ( directory == null )
         {
-            directory = type + "s";
+            directory = getPackaging() + "s";
         }
         return directory;
     }

File: maven-artifact/src/main/java/org/apache/maven/artifact/repository/ArtifactRepository.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.metadata.ArtifactMetadata;
-import org.apache.maven.artifact.repository.layout.ArtifactPathFormatException;
 import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;
 import org.apache.maven.wagon.repository.Repository;
 
@@ -59,13 +58,11 @@ public ArtifactRepository( String id, String url, ArtifactRepositoryLayout layou
     }
 
     public String pathOf( Artifact artifact )
-        throws ArtifactPathFormatException
     {
         return layout.pathOf( artifact );
     }
 
     public String pathOfMetadata( ArtifactMetadata artifactMetadata )
-        throws ArtifactPathFormatException
     {
         return layout.pathOfMetadata( artifactMetadata );
     }

File: maven-artifact/src/main/java/org/apache/maven/artifact/transform/ReleaseArtifactTransformation.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.maven.artifact.metadata.ReleaseArtifactMetadata;
 import org.apache.maven.artifact.metadata.VersionArtifactMetadata;
 import org.apache.maven.artifact.repository.ArtifactRepository;
-import org.apache.maven.artifact.repository.layout.ArtifactPathFormatException;
 import org.apache.maven.wagon.ResourceDoesNotExistException;
 
 import java.io.IOException;
@@ -92,7 +91,7 @@ protected VersionArtifactMetadata retrieveFromRemoteRepository( Artifact artifac
     }
 
     protected VersionArtifactMetadata readFromLocalRepository( Artifact artifact, ArtifactRepository localRepository )
-        throws IOException, ArtifactPathFormatException
+        throws IOException
     {
         AbstractVersionArtifactMetadata metadata = new ReleaseArtifactMetadata( artifact );
         metadata.readFromLocalRepository( localRepository );

File: maven-artifact/src/main/java/org/apache/maven/artifact/transform/SnapshotTransformation.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.maven.artifact.metadata.SnapshotArtifactMetadata;
 import org.apache.maven.artifact.metadata.VersionArtifactMetadata;
 import org.apache.maven.artifact.repository.ArtifactRepository;
-import org.apache.maven.artifact.repository.layout.ArtifactPathFormatException;
 import org.apache.maven.wagon.ResourceDoesNotExistException;
 
 import java.io.IOException;
@@ -115,7 +114,7 @@ protected VersionArtifactMetadata retrieveFromRemoteRepository( Artifact artifac
     }
 
     protected VersionArtifactMetadata readFromLocalRepository( Artifact artifact, ArtifactRepository localRepository )
-        throws IOException, ArtifactPathFormatException
+        throws IOException
     {
         SnapshotArtifactMetadata metadata = new SnapshotArtifactMetadata( artifact );
         metadata.readFromLocalRepository( localRepository );

File: maven-core/src/test/java/org/apache/maven/plugin/PluginParameterExpressionEvaluatorTest.java
Patch:
@@ -102,7 +102,7 @@ public void testShouldExtractPluginArtifacts()
     {
         PluginDescriptor pd = new PluginDescriptor();
 
-        Artifact artifact = new DefaultArtifact( "testGroup", "testArtifact", "1.0", Artifact.SCOPE_COMPILE, "jar" );
+        Artifact artifact = new DefaultArtifact( "testGroup", "testArtifact", "1.0", Artifact.SCOPE_COMPILE, "jar", null, null );
 
         pd.setArtifacts( Collections.singletonList( artifact ) );
 

File: maven-core/src/test/java/org/apache/maven/usability/InvalidArtifactDiagnoserTest.java
Patch:
@@ -61,7 +61,7 @@ private void testDiagnosis( String testHeader, String groupId, String artifactId
 
         try
         {
-            new DefaultArtifact( groupId, artifactId, version, type );
+            new DefaultArtifact( groupId, artifactId, version, null, type, null, null );
 
             fail( "artifact creation did not fail; nothing to diagnose." );
         }

File: maven-plugins/maven-war-plugin/src/main/java/org/apache/maven/plugin/war/WarMojo.java
Patch:
@@ -169,6 +169,7 @@ public void buildWebapp( MavenProject project )
             Artifact artifact = (Artifact) iter.next();
 
             // TODO: scope handler
+            // TODO: use classpath instead
             // Include runtime and compile time libraries
             if ( "jar".equals( artifact.getType() ) && !Artifact.SCOPE_TEST.equals( artifact.getScope() ) && !Artifact.SCOPE_PROVIDED.equals( artifact.getScope() ) )
             {

File: maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -471,7 +471,7 @@ private static String createCacheKey( String groupId, String artifactId, String
     protected Set createArtifacts( List dependencies )
     {
         // TODO: merge with MavenMetadataSource properly
-        return new MavenMetadataSource( artifactResolver, this ).createArtifacts( dependencies, null, null );
+        return new MavenMetadataSource( artifactResolver, this, artifactFactory ).createArtifacts( dependencies, null, null );
     }
 
     protected Set createPluginArtifacts( List plugins )

File: maven-artifact/src/main/java/org/apache/maven/artifact/deployer/DefaultArtifactDeployer.java
Patch:
@@ -52,7 +52,7 @@ public void deploy( String basedir, String finalName, Artifact artifact, Artifac
 
         try
         {
-            String extension = artifactHandlerManager.getArtifactHandler( artifact.getType() ).extension();
+            String extension = artifactHandlerManager.getArtifactHandler( artifact.getType() ).getExtension();
             source = new File( basedir, finalName + "." + extension );
         }
         catch ( ArtifactHandlerNotFoundException e )

File: maven-artifact/src/main/java/org/apache/maven/artifact/installer/DefaultArtifactInstaller.java
Patch:
@@ -47,7 +47,7 @@ public void install( String basedir, String finalName, Artifact artifact, Artifa
 
         try
         {
-            String extension = artifactHandlerManager.getArtifactHandler( artifact.getType() ).extension();
+            String extension = artifactHandlerManager.getArtifactHandler( artifact.getType() ).getExtension();
             source = new File( basedir, finalName + "." + extension );
         }
         catch ( ArtifactHandlerNotFoundException e )

File: maven-artifact/src/main/java/org/apache/maven/artifact/repository/layout/DefaultRepositoryLayout.java
Patch:
@@ -62,9 +62,9 @@ public String pathOf( Artifact artifact )
             path.append( '-' ).append( artifact.getClassifier() );
         }
 
-        if ( artifactHandler.extension() != null && artifactHandler.extension().length() > 0 )
+        if ( artifactHandler.getExtension() != null && artifactHandler.getExtension().length() > 0 )
         {
-            path.append( '.' ).append( artifactHandler.extension() );
+            path.append( '.' ).append( artifactHandler.getExtension() );
         }
 
         return path.toString();

File: maven-artifact/src/main/java/org/apache/maven/artifact/repository/layout/LegacyRepositoryLayout.java
Patch:
@@ -49,17 +49,17 @@ public String pathOf( Artifact artifact )
         StringBuffer path = new StringBuffer();
 
         path.append( artifact.getGroupId() ).append( '/' );
-        path.append( artifactHandler.directory() ).append( '/' );
+        path.append( artifactHandler.getDirectory() ).append( '/' );
         path.append( artifact.getArtifactId() ).append( '-' ).append( artifact.getVersion() );
 
         if ( artifact.hasClassifier() )
         {
             path.append( '-' ).append( artifact.getClassifier() );
         }
 
-        if ( artifactHandler.extension() != null && artifactHandler.extension().length() > 0 )
+        if ( artifactHandler.getExtension() != null && artifactHandler.getExtension().length() > 0 )
         {
-            path.append( '.' ).append( artifactHandler.extension() );
+            path.append( '.' ).append( artifactHandler.getExtension() );
         }
 
         return path.toString();

File: maven-core/src/main/java/org/apache/maven/plugin/version/DefaultPluginVersionManager.java
Patch:
@@ -2,7 +2,6 @@
 
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.factory.ArtifactFactory;
-import org.apache.maven.artifact.handler.PluginHandler;
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.artifact.resolver.ArtifactResolutionException;
 import org.apache.maven.artifact.resolver.ArtifactResolver;
@@ -531,7 +530,7 @@ private String resolveReleaseVersion( String groupId, String artifactId, List re
         throws PluginVersionResolutionException
     {
         Artifact releaseArtifact = artifactFactory.createArtifact( groupId, artifactId, "RELEASE",
-                                                                   Artifact.SCOPE_RUNTIME, PluginHandler.PLUGIN_TYPE );
+                                                                   Artifact.SCOPE_RUNTIME, "maven-plugin" );
 
         try
         {

File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java
Patch:
@@ -311,7 +311,7 @@ private void processPluginPhases( Plugin plugin, MavenSession session, Map phase
         try
         {
             pluginDescriptor = pluginManager.verifyPlugin( groupId, artifactId, version, session.getProject(), session
-                .getLocalRepository(), session.getSettings().isInteractiveMode() );
+                .getSettings(), session.getLocalRepository() );
         }
         catch ( PluginManagerException e )
         {
@@ -579,8 +579,7 @@ else if ( numTokens == 4 )
                 injectHandlerPluginConfiguration( session.getProject(), groupId, artifactId, version );
 
                 pluginDescriptor = pluginManager.verifyPlugin( groupId, artifactId, version, session.getProject(),
-                                                               session.getLocalRepository(), session.getSettings()
-                                                                   .isInteractiveMode() );
+                                                               session.getSettings(), session.getLocalRepository() );
             }
             catch ( PluginManagerException e )
             {

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Patch:
@@ -41,6 +41,7 @@
 import org.apache.maven.project.MavenProjectBuilder;
 import org.apache.maven.project.artifact.MavenMetadataSource;
 import org.apache.maven.project.path.PathTranslator;
+import org.apache.maven.settings.Settings;
 import org.codehaus.plexus.PlexusConstants;
 import org.codehaus.plexus.PlexusContainer;
 import org.codehaus.plexus.PlexusContainerException;
@@ -177,7 +178,7 @@ public PluginDescriptor verifyPlugin( String prefix )
     }
 
     public PluginDescriptor verifyPlugin( String groupId, String artifactId, String version, MavenProject project,
-                                         ArtifactRepository localRepository, boolean interactiveMode )
+                                         Settings settings, ArtifactRepository localRepository )
         throws ArtifactResolutionException, PluginManagerException, PluginVersionResolutionException
     {
         String pluginKey = groupId + ":" + artifactId;
@@ -192,8 +193,7 @@ public PluginDescriptor verifyPlugin( String groupId, String artifactId, String
             {
                 pluginVersionManager = (PluginVersionManager) container.lookup( PluginVersionManager.ROLE );
 
-                version = pluginVersionManager.resolvePluginVersion( groupId, artifactId, project, localRepository,
-                                                                     interactiveMode );
+                version = pluginVersionManager.resolvePluginVersion( groupId, artifactId, project, settings, localRepository );
             }
             catch ( ComponentLookupException e )
             {

File: maven-core/src/main/java/org/apache/maven/plugin/PluginManager.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.maven.plugin.descriptor.PluginDescriptor;
 import org.apache.maven.plugin.version.PluginVersionResolutionException;
 import org.apache.maven.project.MavenProject;
+import org.apache.maven.settings.Settings;
 
 /**
  * @author <a href="mailto:jason@maven.org">Jason van Zyl </a>
@@ -37,6 +38,6 @@ void executeMojo( MavenSession session, GoalInstance buildStep )
     PluginDescriptor verifyPlugin( String prefix );
 
     PluginDescriptor verifyPlugin( String groupId, String artifactId, String version, MavenProject project,
-                                  ArtifactRepository localRepository, boolean interactiveMode )
+                                  Settings settings, ArtifactRepository localRepository )
         throws ArtifactResolutionException, PluginManagerException, PluginVersionResolutionException;
 }
\ No newline at end of file

File: maven-core/src/main/java/org/apache/maven/plugin/version/PluginVersionManager.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.project.MavenProject;
+import org.apache.maven.settings.Settings;
 
 /*
  * Copyright 2001-2005 The Apache Software Foundation.
@@ -24,8 +25,7 @@ public interface PluginVersionManager
 
     String ROLE = PluginVersionManager.class.getName();
 
-    String resolvePluginVersion( String groupId, String artifactId, MavenProject project,
-                                ArtifactRepository localRepository, boolean interactiveMode )
+    String resolvePluginVersion( String groupId, String artifactId, MavenProject project, Settings settings, ArtifactRepository localRepository )
         throws PluginVersionResolutionException;
 
 }

File: maven-settings/src/main/java/org/apache/maven/settings/SettingsUtils.java
Patch:
@@ -51,15 +51,15 @@ public static void merge( Settings dominant, Settings recessive, String recessiv
             {
                 dominantActiveProfiles.add( profileId );
 
-                dominant.setActiveProfileSourceLevel( profileId, recessiveSourceLevel );
+                dominant.getRuntimeInfo().setActiveProfileSourceLevel( profileId, recessiveSourceLevel );
             }
         }
 
         if ( StringUtils.isEmpty( dominant.getLocalRepository() ) )
         {
             dominant.setLocalRepository( recessive.getLocalRepository() );
 
-            dominant.setLocalRepositorySourceLevel( recessiveSourceLevel );
+            dominant.getRuntimeInfo().setLocalRepositorySourceLevel( recessiveSourceLevel );
         }
 
         shallowMergeById( dominant.getMirrors(), recessive.getMirrors(), recessiveSourceLevel );

File: maven-artifact/src/main/java/org/apache/maven/artifact/handler/PluginHandler.java
Patch:
@@ -23,6 +23,8 @@
 public class PluginHandler
     extends AbstractArtifactHandler
 {
+    
+    public static final String PLUGIN_TYPE = "maven-plugin";
 
     public String directory()
     {

File: maven-core-it-verifier/src/main/java/org/apache/maven/it/Verifier.java
Patch:
@@ -464,6 +464,8 @@ public void executeGoals( Properties properties, String filename )
             cli.setExecutable( executable );
             
             cli.createArgument().setValue( "-e" );
+            
+            cli.createArgument().setValue( "--batch-mode" );
 
             for ( Iterator i = properties.keySet().iterator(); i.hasNext(); )
             {

File: maven-core/src/main/java/org/apache/maven/plugin/PluginManager.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.maven.artifact.resolver.ArtifactResolutionException;
 import org.apache.maven.execution.MavenSession;
 import org.apache.maven.plugin.descriptor.PluginDescriptor;
+import org.apache.maven.plugin.version.PluginVersionResolutionException;
 import org.apache.maven.project.MavenProject;
 
 /**
@@ -36,6 +37,6 @@ void executeMojo( MavenSession session, GoalInstance buildStep )
     PluginDescriptor verifyPlugin( String prefix );
 
     PluginDescriptor verifyPlugin( String groupId, String artifactId, String version, MavenProject project,
-                                   ArtifactRepository localRepository )
-        throws ArtifactResolutionException, PluginManagerException;
+                                  ArtifactRepository localRepository, boolean interactiveMode )
+        throws ArtifactResolutionException, PluginManagerException, PluginVersionResolutionException;
 }
\ No newline at end of file

File: maven-mboot2/src/main/java/MBoot.java
Patch:
@@ -38,7 +38,7 @@ public class MBoot
     String[] builds = new String[]{"maven-model", "maven-monitor", "maven-plugin-api",
                                    "maven-plugin-descriptor", "maven-artifact", "maven-script/maven-script-marmalade",
                                    "maven-script/maven-script-beanshell", "maven-project",
-                                   "maven-settings", "maven-profile",
+                                   "maven-settings", "maven-profile", "maven-plugin-registry",
                                    "maven-reporting/maven-reporting-api", "maven-core", "maven-archiver",
                                    "maven-plugin-tools/maven-plugin-tools-api",
                                    "maven-plugin-tools/maven-plugin-tools-java",
@@ -61,13 +61,15 @@ public class MBoot
         targetVersions.put( "maven-model", "4.0.0" );
         targetVersions.put( "maven-settings", "1.0.0" );
         targetVersions.put( "maven-profile", "1.0.0" );
+        targetVersions.put( "maven-plugin-registry", "1.0.0" );
 
         MODELLO_TARGET_VERSIONS = Collections.unmodifiableMap( targetVersions );
 
         Map modelFiles = new TreeMap();
         modelFiles.put( "maven-model", "maven.mdo" );
         modelFiles.put( "maven-settings", "settings.mdo" );
         modelFiles.put( "maven-profile", "profiles.mdo" );
+        modelFiles.put( "maven-plugin-registry", "plugin-registry.mdo" );
 
         MODELLO_MODEL_FILES = Collections.unmodifiableMap( modelFiles );
     }

File: maven-artifact-ant/src/main/java/org/apache/maven/artifact/ant/AbstractArtifactTask.java
Patch:
@@ -23,8 +23,8 @@
 import org.apache.maven.settings.Server;
 import org.apache.maven.settings.Settings;
 import org.apache.maven.settings.io.xpp3.SettingsXpp3Reader;
+import org.apache.maven.profiles.activation.ProfileActivationUtils;
 import org.apache.maven.project.MavenProjectBuilder;
-import org.apache.maven.profile.activation.ProfileActivationUtils;
 import org.apache.tools.ant.BuildException;
 import org.apache.tools.ant.Project;
 import org.apache.tools.ant.Task;

File: maven-core/src/main/java/org/apache/maven/DefaultMaven.java
Patch:
@@ -41,7 +41,7 @@
 import org.apache.maven.settings.Proxy;
 import org.apache.maven.settings.Server;
 import org.apache.maven.settings.Settings;
-import org.apache.maven.settings.SettingsConversionUtils;
+import org.apache.maven.settings.SettingsUtils;
 import org.apache.maven.usability.ErrorDiagnoser;
 import org.codehaus.plexus.PlexusConstants;
 import org.codehaus.plexus.PlexusContainer;
@@ -336,7 +336,7 @@ private List getActiveExternalProfiles( File pom, Settings settings ) throws Pro
             {
                 org.apache.maven.settings.Profile rawProfile = (org.apache.maven.settings.Profile) it.next();
                 
-                Profile profile = SettingsConversionUtils.convertFromSettingsProfile( rawProfile );
+                Profile profile = SettingsUtils.convertFromSettingsProfile( rawProfile );
                 
                 if( settingsActiveProfileIds.contains( rawProfile.getId() ) )
                 {

File: maven-settings/src/main/java/org/apache/maven/settings/MavenSettingsBuilder.java
Patch:
@@ -29,7 +29,8 @@ public interface MavenSettingsBuilder
 {
     String ROLE = MavenSettingsBuilder.class.getName();
     
-    String ALT_SETTINGS_XML_LOCATION = "org.apache.maven.SettingsXmlFile";
+    String ALT_USER_SETTINGS_XML_LOCATION = "org.apache.maven.user-settings";
+    String ALT_GLOBAL_SETTINGS_XML_LOCATION = "org.apache.maven.global-settings";
 
     Settings buildSettings()
         throws IOException, XmlPullParserException;

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/translate/PomV3ToV4Translator.java
Patch:
@@ -560,7 +560,7 @@ private List translateDependencies( List v3Deps )
 
                     if ( !props.isEmpty() )
                     {
-                        for ( Iterator propertyIterator = props.keySet().iterator(); it.hasNext(); )
+                        for ( Iterator propertyIterator = props.keySet().iterator(); propertyIterator.hasNext(); )
                         {
                             String key = (String) propertyIterator.next();
                             String value = props.getProperty( key );

File: maven-core/src/main/java/org/apache/maven/plugin/PluginParameterExpressionEvaluator.java
Patch:
@@ -135,11 +135,11 @@ else if ( expression.startsWith( "basedir" ) )
             // Check properties that have been injected via profiles before we default over to 
             // system properties.
             
-            if( context.getProject().getProfileConfiguration() != null )
+            if( context.getProject().getProfileProperties() != null )
             {
-                value = context.getProject().getProfileConfiguration().getProperty( expression );
+                value = context.getProject().getProfileProperties().getProperty( expression );
             }
-            
+
             if( value == null )
             {
                 // We will attempt to get nab a system property as a way to specify a

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/RepositoryCleaner.java
Patch:
@@ -79,7 +79,7 @@ public void cleanRepository( RepositoryCleanerConfiguration configuration )
             FileReporter repoReporter = null;
             try
             {
-                repoReporter = new FileReporter( reportsBase, "repository.report.txt" );
+                repoReporter = new FileReporter( reportsBase, "repository.report.txt", configuration.isReportWarningEnabled() );
 
                 List artifacts;
 

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/discover/LegacyArtifactDiscoverer.java
Patch:
@@ -141,7 +141,7 @@ else if ( lastAvceToken.endsWith( ".zip" ) )
                 + "([Tt][Ee][Ss][Tt][_.0-9]*)|" + "([Dd][Ee][Bb][Uu][Gg][_.0-9]*)|"
                 + "([Uu][Nn][Oo][Ff][Ff][Ii][Cc][Ii][Aa][Ll][_.0-9]*)|" + "([Cc][Uu][Rr][Rr][Ee][Nn][Tt])|"
                 + "([Ll][Aa][Tt][Ee][Ss][Tt])|" + "([Ff][Cc][Ss])|" + "([Rr][Ee][Ll][Ee][Aa][Ss][Ee][_.0-9]*)|"
-                + "([Nn][Ii][Gg][Hh][Tt][Ll][Yy])";
+                + "([Nn][Ii][Gg][Hh][Tt][Ll][Yy])|" + "([AaBb][_.0-9]*)";
 
             // let's discover the version, and whatever's leftover will be either
             // a classifier, or part of the artifactId, depending on position.

File: maven-core/src/main/java/org/apache/maven/plugin/PluginParameterExpressionEvaluator.java
Patch:
@@ -59,7 +59,6 @@ public Object evaluate( String expr )
 
         if ( expr == null )
         {
-            // TODO: this should not have happened - previously there was a note about a fix to plexus Trygve was going to make - investigate
             return null;
         }
 

File: maven-plugin-descriptor/src/main/java/org/apache/maven/plugin/descriptor/PluginDescriptorBuilder.java
Patch:
@@ -210,8 +210,6 @@ public MojoDescriptor buildComponentDescriptor( PlexusConfiguration c, PluginDes
 
             parameter.setDescription( d.getChild( "description" ).getValue() );
 
-            parameter.setExpression( d.getChild( "expression" ).getValue() );
-
             parameter.setDeprecated( d.getChild( "deprecated" ).getValue() );
 
             parameters.add( parameter );

File: maven-core/src/test/java/org/apache/maven/MavenTestUtils.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.codehaus.classworlds.ClassRealm;
 import org.codehaus.classworlds.ClassWorld;
-import org.codehaus.plexus.DefaultArtifactEnabledContainer;
+import org.codehaus.plexus.DefaultPlexusContainer;
 import org.codehaus.plexus.PlexusContainer;
 
 import java.io.File;
@@ -37,7 +37,7 @@ private MavenTestUtils()
 
     public static PlexusContainer getContainerInstance()
     {
-        return new DefaultArtifactEnabledContainer();
+        return new DefaultPlexusContainer();
     }
 
     public static void customizeContext( PlexusContainer container, File basedir, File mavenHome, File mavenHomeLocal )

File: maven-plugins/maven-ejb-plugin/src/main/java/org/apache/maven/plugin/ejb/EjbMojo.java
Patch:
@@ -120,7 +120,7 @@ public void execute()
                                                            DEFAULT_EXCLUDES );
 
                 // create archive
-                archiver.createArchive( project, archive );
+                clientArchiver.createArchive( project, archive );
             }
         }
         catch ( Exception e )

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Patch:
@@ -798,7 +798,7 @@ public void initialize()
                                                               "wagon-provider-api", "classworlds", "maven-plugin",
                                                               "plexus-marmalade-factory", "maven-script-marmalade",
                                                               "maven-script-beanshell", "plexus-bsh-factory", "bsh",
-                                                              "marmalade-core"} );
+                                                              "marmalade-core", "plexus-utils"} );
     }
 
     // ----------------------------------------------------------------------

File: maven-plugin-descriptor/src/main/java/org/apache/maven/plugin/descriptor/MojoDescriptor.java
Patch:
@@ -75,7 +75,7 @@ public class MojoDescriptor
 
     private PluginDescriptor pluginDescriptor;
 
-    private boolean inheritedByDefault = false;
+    private boolean inheritedByDefault = true;
 
     public MojoDescriptor()
     {

File: maven-plugin-tools/maven-plugin-tools-api/src/main/java/org/apache/maven/tools/plugin/generator/PluginDescriptorGenerator.java
Patch:
@@ -70,7 +70,9 @@ public void execute( File destinationDirectory, PluginDescriptor pluginDescripto
 
             element( w, "goalPrefix", pluginDescriptor.getGoalPrefix() );
 
-             w.startElement( "mojos" );
+            element( w, "inheritedByDefault", "" + pluginDescriptor.isInheritedByDefault() );
+            
+            w.startElement( "mojos" );
 
             for ( Iterator it = pluginDescriptor.getMojos().iterator(); it.hasNext(); )
             {

File: maven-core-it-verifier/src/main/java/org/apache/maven/it/Verifier.java
Patch:
@@ -123,17 +123,17 @@ public void verify()
         }
     }
 
-    private static Properties loadProperties( File propertiesFile )
+    private Properties loadProperties( String filename )
         throws VerificationException
     {
         Properties properties = new Properties();
 
         FileInputStream fis = null;
         try
         {
+              File propertiesFile = new File( basedir, filename );
             if ( propertiesFile.exists() )
             {
-                System.out.println( "Load properties file : " + propertiesFile.getPath() );
                 fis = new FileInputStream( propertiesFile );
                 properties.load( fis );
             }
@@ -563,7 +563,7 @@ public static void main( String args[] )
             {
                 verifier.executeHook( "prebuild-hook.txt" );
 
-                Properties properties = verifier.loadProperties( new File( basedir, "system.properties" ) );
+                Properties properties = verifier.loadProperties( "system.properties" );
 
                 verifier.executeGoals( properties, "goals.txt" );
 

File: maven-core-it-verifier/src/main/java/org/apache/maven/it/Verifier.java
Patch:
@@ -133,6 +133,7 @@ private static Properties loadProperties( File propertiesFile )
         {
             if ( propertiesFile.exists() )
             {
+                System.out.println( "Load properties file : " + file.getPath() );
                 fis = new FileInputStream( propertiesFile );
                 properties.load( fis );
             }

File: maven-plugins/maven-release-plugin/src/main/java/org/apache/maven/plugin/release/PrepareReleaseMojo.java
Patch:
@@ -258,7 +258,6 @@ private void transformPomToReleaseVersionPom()
 
             releaseProperties.setProperty( "version", projectVersion );
 
-            // TODO: fix
             releaseProperties.setProperty( USERNAME, username );
 
             releaseProperties.setProperty( TAG, getTagLabel() );

File: maven-core-it-verifier/src/main/java/org/apache/maven/it/Verifier.java
Patch:
@@ -450,6 +450,8 @@ public void executeGoals( String filename )
 
             StreamConsumer err = new WriterStreamConsumer( logWriter );
 
+            System.out.println( Commandline.toString( cli.getCommandline() ) );
+
             ret = CommandLineUtils.executeCommandLine( cli, out, err );
 
             logWriter.close();

File: maven-plugins/maven-release-plugin/src/main/java/org/apache/maven/plugin/release/PrepareReleaseMojo.java
Patch:
@@ -325,7 +325,7 @@ private void transformPomToReleaseVersionPom()
 
             transformer.transformNodes();
 
-            transformer.write();                       
+            transformer.write();
         }
         catch ( Exception e )
         {
@@ -337,7 +337,8 @@ private void transformPomToSnapshotVersionPom()
         throws MojoExecutionException
     {
         // TODO: we will need to incorporate versioning strategies here because it is unlikely
-        // that everyone will be able to agree on a standard.
+        // that everyone will be able to agree on a standard. This is extremely limited right
+        // now and really only works for the way maven is versioned.
 
         // releaseVersion = 1.0-beta-4
         // snapshotVersion = 1.0-beta-5-SNAPSHOT

File: maven-plugins/maven-release-plugin/src/main/java/org/apache/maven/plugin/release/PerformReleaseMojo.java
Patch:
@@ -72,7 +72,7 @@ private void runGoals()
 
         cl.setExecutable( "m2" );
 
-        cl.setWorkingDirectory( getWorkingDirectory() );
+        cl.setWorkingDirectory( workingDirectory );
 
         cl.createArgument().setLine( goals );
 

File: maven-plugins/maven-eclipse-plugin/src/main/java/org/apache/maven/plugin/eclipse/EclipseWriter.java
Patch:
@@ -329,7 +329,7 @@ private void addDependency( XMLWriter writer, Artifact artifact )
 
         writer.startElement( "classpathentry" );
 
-        writer.addAttribute( "kind", "lib" );
+        writer.addAttribute( "kind", "var" );
 
         writer.addAttribute( "path", "M2_REPO/" + toRelative( localRepository, path.getPath() ) );
 

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Patch:
@@ -839,7 +839,7 @@ private void downloadDependencies( MavenSession context, ArtifactResolver artifa
             Artifact artifact = (Artifact) it.next();
 
             artifactResolver.resolve( artifact, context.getRemoteRepositories(), context.getLocalRepository() );
-getLogger().info( "=======>" + artifact.getArtifactId() + "/" + artifact.getVersion() + "/" + artifact.getBaseVersion() );
+
             pluginArtifacts.add( artifact );
         }
         context.getProject().setPluginArtifacts( pluginArtifacts );

File: maven-plugins/maven-plugin-plugin/src/main/java/org/apache/maven/plugin/plugin/XdocGeneratorMojo.java
Patch:
@@ -30,7 +30,7 @@ public class XdocGeneratorMojo
     extends AbstractGeneratorMojo
 {
     /**
-     * @parameter expression="${project.build.directory}/generated-xdocs"
+     * @parameter expression="${project.build.directory}/generated-site/xdoc"
      * @required
      */
     protected File outputDirectory;

File: sandbox/maven-reports/maven-pmd-plugin/src/main/java/org/apache/maven/plugin/pmd/PmdReportMojo.java
Patch:
@@ -87,8 +87,6 @@ public void execute()
 
         config.setModel( project.getModel() );
 
-        config.setOutputDirectory( new File( outputDirectory ) );
-
         MavenReport report = new PmdReport();
 
         report.setConfiguration( config );

File: maven-core/src/main/java/org/apache/maven/plugin/PluginNotFoundException.java
Patch:
@@ -30,6 +30,6 @@ public class PluginNotFoundException
     public PluginNotFoundException( ArtifactResolutionException e )
     {
         super( "Mojo could not be found - check that the goal name is correct", e.getGroupId(), e.getArtifactId(),
-               e.getVersion(), "maven-plugin", e.getRemoteRepositories(), e );
+               e.getVersion(), "maven-plugin", e.getRemoteRepositories(), e.getDownloadUrl(), e );
     }
 }

File: sandbox/maven-reports/maven-checkstyle-plugin/src/main/java/org/apache/maven/plugin/checkstyle/CheckstyleReportMojo.java
Patch:
@@ -100,7 +100,7 @@ public void execute()
                                                       report.getOutputName() + ".html",
                                                       outputDirectory, getSiteDescriptor(), flavour );
 
-            siteRenderer.copyResources( siteDirectory, outputDirectory, flavour );
+            siteRenderer.copyResources( outputDirectory, flavour, siteDirectory );
 
             report.generate( sink );
         }

File: sandbox/maven-reports/maven-pmd-plugin/src/main/java/org/apache/maven/plugin/pmd/PmdReportMojo.java
Patch:
@@ -101,7 +101,7 @@ public void execute()
 
             report.generate( sink );
 
-            siteRenderer.copyResources( siteDirectory, outputDirectory, flavour );
+            siteRenderer.copyResources( outputDirectory, flavour, siteDirectory );
         }
         catch ( Exception e )
         {

File: sandbox/maven-reports/maven-project-info-reports-plugin/src/main/java/org/apache/maven/report/projectinfo/ProjectReportsMojo.java
Patch:
@@ -112,7 +112,7 @@ public void execute()
 
             mailingListsReport.generate( sink );
 
-            siteRenderer.copyResources( siteDirectory, outputDirectory, flavour );
+            siteRenderer.copyResources( outputDirectory, flavour, siteDirectory );
         }
         catch ( Exception e )
         {

File: sandbox/maven-reports/maven-pmd-plugin/src/main/java/org/apache/maven/plugin/pmd/PmdReport.java
Patch:
@@ -127,6 +127,7 @@ public void execute()
                 // TODO: lazily call beginFile in case there are no rules
 
                 reportSink.beginFile( file );
+                ruleContext.setSourceCodeFilename( file.getAbsolutePath() );
                 pmd.processFile( fileReader, ruleSet, ruleContext );
                 reportSink.endFile( file );
             }

File: maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -277,7 +277,7 @@ private MavenProject processProjectLogic( String pomLocation, MavenProject proje
 
         if ( validationResult.getMessageCount() > 0 )
         {
-            throw new ProjectBuildingException( "Exception while building project from \'" + pomLocation + "\': " + validationResult.toString() );
+            throw new ProjectBuildingException( "Failed to validate POM for \'" + pomLocation + "\'.\n\n  Reason(s):\n" + validationResult.render( "  " ) );
         }
 
         return project;

File: maven-core-it-verifier/src/main/java/org/apache/maven/it/Verifier.java
Patch:
@@ -436,6 +436,8 @@ public void executeGoals( String filename )
             }
 
             cli.setExecutable( executable );
+            
+            cli.createArgument().setValue( "-e" );
 
             for ( Iterator i = allGoals.iterator(); i.hasNext(); )
             {

File: maven-core/src/main/java/org/apache/maven/DefaultMaven.java
Patch:
@@ -188,7 +188,7 @@ private List collectProjects( List files, ArtifactRepository localRepository, bo
                 for ( Iterator i = project.getModules().iterator(); i.hasNext(); )
                 {
                     String name = (String) i.next();
-                    if ( name.indexOf( '/' ) >= 0 )
+                    if ( name.indexOf( ".." ) >= 0 )
                     {
                         String message = "Illegal module name: " + name + " (cannot contain path characters)";
                         throw new ReactorException( message );

File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java
Patch:
@@ -268,7 +268,7 @@ private void processPluginPhases( Plugin plugin, MavenSession session, Map phase
     private void configureMojoPhaseBinding( MojoDescriptor mojoDescriptor, Map phaseMap, Settings settings )
         throws LifecycleExecutionException
     {
-        if ( settings.getActiveProfile().isOffline() && mojoDescriptor.requiresOnline() )
+        if ( settings.getActiveProfile().isOffline() && mojoDescriptor.isOnlineRequired() )
         {
             String goal = mojoDescriptor.getGoal();
             getLogger().warn( goal + " requires online mode, but maven is currently offline. Disabling " + goal + "." );

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Patch:
@@ -307,7 +307,7 @@ private void releaseComponent( Object component )
     public void executeMojo( MavenSession session, MojoDescriptor mojoDescriptor )
         throws ArtifactResolutionException, PluginManagerException, MojoExecutionException
     {
-        if ( mojoDescriptor.getRequiresDependencyResolution() != null )
+        if ( mojoDescriptor.isDependencyResolutionRequired() != null )
         {
 
             ArtifactResolver artifactResolver = null;
@@ -319,7 +319,7 @@ public void executeMojo( MavenSession session, MojoDescriptor mojoDescriptor )
                 mavenProjectBuilder = (MavenProjectBuilder) container.lookup( MavenProjectBuilder.ROLE );
 
                 resolveTransitiveDependencies( session, artifactResolver, mavenProjectBuilder,
-                                               mojoDescriptor.getRequiresDependencyResolution() );
+                                               mojoDescriptor.isDependencyResolutionRequired() );
                 downloadDependencies( session, artifactResolver );
             }
             catch ( ComponentLookupException e )

File: maven-plugin-descriptor/src/main/java/org/apache/maven/plugin/descriptor/DuplicateMojoDescriptorException.java
Patch:
@@ -17,7 +17,7 @@
  */
 
 public class DuplicateMojoDescriptorException
-    extends PluginConfigurationException
+    extends InvalidPluginDescriptorException
 {
 
     public DuplicateMojoDescriptorException( String goalPrefix, String goal, String existingImplementation, String newImplementation )

File: maven-plugin-descriptor/src/main/java/org/apache/maven/plugin/descriptor/InvalidPluginDescriptorException.java
Patch:
@@ -18,16 +18,16 @@
  * limitations under the License.
  */
 
-public class PluginConfigurationException
+public class InvalidPluginDescriptorException
     extends PlexusConfigurationException
 {
 
-    public PluginConfigurationException( String message, Throwable cause )
+    public InvalidPluginDescriptorException( String message, Throwable cause )
     {
         super( message, cause );
     }
 
-    public PluginConfigurationException( String message )
+    public InvalidPluginDescriptorException( String message )
     {
         super( message );
     }

File: maven-plugin-tools/maven-plugin-tools-api/src/main/java/org/apache/maven/tools/plugin/extractor/MojoDescriptorExtractor.java
Patch:
@@ -16,9 +16,9 @@
  * limitations under the License.
  */
 
+import org.apache.maven.plugin.descriptor.InvalidPluginDescriptorException;
 import org.apache.maven.plugin.descriptor.PluginDescriptor;
 import org.apache.maven.project.MavenProject;
-import org.apache.maven.tools.plugin.PluginToolsException;
 
 import java.util.List;
 
@@ -30,5 +30,5 @@ public interface MojoDescriptorExtractor
     String ROLE = MojoDescriptorExtractor.class.getName();
 
     List execute( MavenProject project, PluginDescriptor pluginDescriptor )
-        throws PluginToolsException;
+        throws ExtractionException, InvalidPluginDescriptorException;
 }
\ No newline at end of file

File: maven-plugin-tools/maven-plugin-tools-api/src/main/java/org/apache/maven/tools/plugin/scanner/MojoScanner.java
Patch:
@@ -16,9 +16,10 @@
  * limitations under the License.
  */
 
+import org.apache.maven.plugin.descriptor.InvalidPluginDescriptorException;
 import org.apache.maven.plugin.descriptor.PluginDescriptor;
 import org.apache.maven.project.MavenProject;
-import org.apache.maven.tools.plugin.PluginToolsException;
+import org.apache.maven.tools.plugin.extractor.ExtractionException;
 
 /**
  * @author jdcasey
@@ -28,6 +29,6 @@ public interface MojoScanner
     String ROLE = MojoScanner.class.getName();
 
     void populatePluginDescriptor( MavenProject project, PluginDescriptor pluginDescriptor )
-        throws PluginToolsException;
+        throws ExtractionException, InvalidPluginDescriptorException;
 
 }
\ No newline at end of file

File: maven-plugin-tools/maven-plugin-tools-api/src/test/java/org/apache/maven/tools/plugin/generator/AbstractGeneratorTestCase.java
Patch:
@@ -53,7 +53,7 @@ public void testGenerator()
         MojoDescriptor mojoDescriptor = new MojoDescriptor();
         mojoDescriptor.setGoal( "testGoal" );
         mojoDescriptor.setImplementation( "org.apache.maven.tools.plugin.generator.TestMojo" );
-        mojoDescriptor.setRequiresDependencyResolution( "compile" );
+        mojoDescriptor.setDependencyResolutionRequired( "compile" );
 
         List params = new ArrayList();
 

File: maven-plugin-tools/maven-plugin-tools-api/src/test/java/org/apache/maven/tools/plugin/generator/PluginDescriptorGeneratorTest.java
Patch:
@@ -100,7 +100,7 @@ private void checkMojo( MojoDescriptor mojoDescriptor )
         // The following should be defaults
         assertEquals( "per-lookup", mojoDescriptor.getInstantiationStrategy() );
 
-        assertNotNull( mojoDescriptor.getRequiresDependencyResolution() );
+        assertNotNull( mojoDescriptor.isDependencyResolutionRequired() );
 
         // check the parameter.
         checkParameter( (Parameter) mojoDescriptor.getParameters().get( 0 ) );

File: maven-plugins/maven-compiler-plugin/src/main/java/org/apache/maven/plugin/AbstractCompilerMojo.java
Patch:
@@ -121,7 +121,7 @@ public void execute()
             compilerConfiguration.addCompilerOption( "-target", target );
         }
 
-        if ( debug != null && "true".equals( debug ) )
+        if ( debug != null && Boolean.valueOf( debug ).booleanValue() )
         {
             compilerConfiguration.setDebug( true );
         }

File: maven-project/src/main/java/org/apache/maven/project/validation/DefaultModelValidator.java
Patch:
@@ -34,6 +34,8 @@ public class DefaultModelValidator
     public ModelValidationResult validate( Model model )
     {
         ModelValidationResult result = new ModelValidationResult();
+        
+        validateStringNotEmpty( "modelVersion", result, model.getModelVersion() );
 
         validateStringNotEmpty( "groupId", result, model.getGroupId() );
 

File: maven-mboot2/src/main/java/MBoot.java
Patch:
@@ -152,7 +152,7 @@ public void run( String[] args )
 
             Profile activeProfile = userModelReader.getActiveProfile();
 
-            if ( mavenRepoLocal == null )
+            if ( mavenRepoLocal == null && activeProfile != null )
             {
                 mavenRepoLocal = new File( activeProfile.getLocalRepo() ).getAbsolutePath();
             }

File: maven-core/src/main/java/org/apache/maven/plugin/PluginManager.java
Patch:
@@ -33,6 +33,8 @@ public interface PluginManager
     void executeMojo( MavenSession session, MojoDescriptor mojoDescriptor )
         throws MojoExecutionException, PluginManagerException, ArtifactResolutionException;
 
+    PluginDescriptor verifyPlugin( String prefix );
+
     PluginDescriptor verifyPlugin( String groupId, String artifactId, String version, MavenSession session )
         throws ArtifactResolutionException, PluginManagerException;
 }
\ No newline at end of file

File: maven-plugin-tools/maven-plugin-tools-api/src/main/java/org/apache/maven/tools/plugin/extractor/AbstractScriptedMojoDescriptorExtractor.java
Patch:
@@ -21,18 +21,18 @@ public abstract class AbstractScriptedMojoDescriptorExtractor
     extends AbstractLogEnabled
     implements MojoDescriptorExtractor
 {
-    public Set execute( MavenProject project, PluginDescriptor pluginDescriptor )
+    public List execute( MavenProject project, PluginDescriptor pluginDescriptor )
         throws PluginToolsException
     {
         Map scriptFilesKeyedByBasedir = gatherScriptSourcesByBasedir( project.getScriptSourceRoots(),
                                                                       getScriptFileExtension() );
 
-        Set mojoDescriptors = extractMojoDescriptors( scriptFilesKeyedByBasedir, pluginDescriptor );
+        List mojoDescriptors = extractMojoDescriptors( scriptFilesKeyedByBasedir, pluginDescriptor );
 
         return mojoDescriptors;
     }
 
-    protected abstract Set extractMojoDescriptors( Map scriptFilesKeyedByBasedir, PluginDescriptor pluginDescriptor )
+    protected abstract List extractMojoDescriptors( Map scriptFilesKeyedByBasedir, PluginDescriptor pluginDescriptor )
         throws PluginToolsException;
 
     protected abstract String getScriptFileExtension();

File: maven-plugin-tools/maven-plugin-tools-api/src/main/java/org/apache/maven/tools/plugin/extractor/MojoDescriptorExtractor.java
Patch:
@@ -16,11 +16,11 @@
  * limitations under the License.
  */
 
-import org.apache.maven.project.MavenProject;
 import org.apache.maven.plugin.descriptor.PluginDescriptor;
+import org.apache.maven.project.MavenProject;
 import org.apache.maven.tools.plugin.PluginToolsException;
 
-import java.util.Set;
+import java.util.List;
 
 /**
  * @author jdcasey
@@ -29,6 +29,6 @@ public interface MojoDescriptorExtractor
 {
     String ROLE = MojoDescriptorExtractor.class.getName();
 
-    Set execute( MavenProject project, PluginDescriptor pluginDescriptor )
+    List execute( MavenProject project, PluginDescriptor pluginDescriptor )
         throws PluginToolsException;
 }
\ No newline at end of file

File: maven-plugin-tools/maven-plugin-tools-api/src/main/java/org/apache/maven/tools/plugin/generator/Generator.java
Patch:
@@ -16,9 +16,8 @@
  * limitations under the License.
  */
 
-import org.apache.maven.project.MavenProject;
+import org.apache.maven.plugin.descriptor.PluginDescriptor;
 
-import java.util.Set;
 import java.io.IOException;
 
 /**
@@ -27,6 +26,6 @@
  */
 public interface Generator
 {
-    void execute( String destinationDirectory, Set mojoDescriptors, MavenProject project, String goalPrefix )
+    void execute( String destinationDirectory, PluginDescriptor pluginDescriptor )
         throws IOException;
 }
\ No newline at end of file

File: maven-plugin-tools/maven-plugin-tools-java/src/test/java/org/apache/maven/tools/plugin/extractor/java/JavaMojoDescriptorExtractorTest.java
Patch:
@@ -23,7 +23,7 @@
 
 import java.io.File;
 import java.net.URL;
-import java.util.Set;
+import java.util.List;
 
 /**
  * @author jdcasey
@@ -52,7 +52,7 @@ public void testShouldFindTwoMojoDescriptorsInTestSourceDirectory()
 
         PluginDescriptor pluginDescriptor = new PluginDescriptor();
         pluginDescriptor.setGoalPrefix( "test" );
-        Set results = extractor.execute( project, pluginDescriptor );
+        List results = extractor.execute( project, pluginDescriptor );
         assertEquals( 2, results.size() );
     }
 

File: maven-plugin-tools/maven-plugin-tools-marmalade/src/test/java/org/apache/maven/tools/plugin/extractor/marmalade/MarmaladeMojoDescriptorExtractorTest.java
Patch:
@@ -25,7 +25,7 @@
 
 import java.io.File;
 import java.net.URL;
-import java.util.Set;
+import java.util.List;
 
 /**
  * @author jdcasey
@@ -54,7 +54,7 @@ public void testShouldFindOneMojo()
 
         PluginDescriptor pluginDescriptor = new PluginDescriptor();
         pluginDescriptor.setGoalPrefix( "test" );
-        Set descriptors = extractor.execute( project, pluginDescriptor );
+        List descriptors = extractor.execute( project, pluginDescriptor );
 
         assertEquals( 1, descriptors.size() );
 

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Patch:
@@ -654,10 +654,10 @@ else if ( mergedConfiguration.getChild( key, false ) != null )
 
             Object value = expressionEvaluator.evaluate( expression );
 
-            getLogger().debug( "Evaluated mojo parameter expression: \'" + expression + "\' to: " + value );
+            getLogger().debug( "Evaluated mojo parameter expression: \'" + expression + "\' to: " + value + " for parameter: \'" + key + "\'" );
 
             // TODO: remove. If there is a default value, required should have been removed by the descriptor generator
-            if ( value == null )
+            if ( value == null && !"map-oriented".equals( goal.getComponentConfigurator() ) )
             {
                 Object defaultValue;
                 try

File: maven-plugin-descriptor/src/main/java/org/apache/maven/plugin/descriptor/MojoDescriptor.java
Patch:
@@ -154,7 +154,7 @@ public void setRequiresProject( boolean requiresProject )
         this.requiresProject = requiresProject;
     }
 
-    public boolean isRequiresProject()
+    public boolean getRequiresProject()
     {
         return requiresProject;
     }

File: maven-script/maven-script-marmalade/src/main/java/org/apache/maven/script/marmalade/tags/AbstractStringValuedBodyTag.java
Patch:
@@ -34,7 +34,7 @@ protected boolean alwaysProcessChildren()
 
     protected void doExecute( MarmaladeExecutionContext context ) throws MarmaladeExecutionException
     {
-        String bodyValue = (String) getBody( context, String.class );
+        String bodyValue = getRawBody( context );
 
         setValue( bodyValue );
     }

File: maven-project/src/main/java/org/apache/maven/project/injection/ModelDefaultsInjector.java
Patch:
@@ -17,6 +17,7 @@
  */
 
 import org.apache.maven.model.Model;
+import org.apache.maven.model.Plugin;
 
 /**
  * @author jdcasey Created on Feb 1, 2005
@@ -26,4 +27,6 @@ public interface ModelDefaultsInjector
     String ROLE = ModelDefaultsInjector.class.getName();
 
     void injectDefaults( Model model );
+
+    void mergePluginWithDefaults( Plugin plugin, Plugin def );    
 }
\ No newline at end of file

File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java
Patch:
@@ -351,7 +351,9 @@ private MojoDescriptor configureMojo( String task, MavenSession session, Map pha
         {
             String groupId = PluginDescriptor.getDefaultPluginGroupId();
 
-            String artifactId = PluginDescriptor.getPluginArtifactIdFromGoal( task );
+            String pluginId = PluginDescriptor.getPrefixFromGoal( task );
+
+            String artifactId = PluginDescriptor.getDefaultPluginArtifactId( pluginId );
 
             injectHandlerPluginConfiguration( session.getProject(), groupId, artifactId );
 

File: maven-plugin-tools/maven-plugin-tools-api/src/main/java/org/apache/maven/tools/plugin/util/PluginUtils.java
Patch:
@@ -60,7 +60,6 @@ public static String[] findSources( String basedir, String include, String exclu
     }
 
     public static void writeDependencies( XMLWriter w, MavenProject project )
-        throws Exception
     {
 
         w.startElement( "dependencies" );

File: maven-plugin-tools/maven-plugin-tools-api/src/test/java/org/apache/maven/tools/plugin/generator/PluginDescriptorGeneratorTest.java
Patch:
@@ -91,7 +91,7 @@ private String readFile( File pluginDescriptorFile )
 
     private void checkMojo( MojoDescriptor mojoDescriptor )
     {
-        assertEquals( "test:testGoal", mojoDescriptor.getId() );
+        assertEquals( "test:testGoal", mojoDescriptor.getFullGoalName() );
 
         assertEquals( "org.apache.maven.tools.plugin.generator.TestMojo", mojoDescriptor.getImplementation() );
 
@@ -107,7 +107,7 @@ private void checkMojo( MojoDescriptor mojoDescriptor )
     private void checkParameter( Parameter parameter )
     {
         assertEquals( "dir", parameter.getName() );
-        assertEquals( "String", parameter.getType() );
+        assertEquals( String.class.getName(), parameter.getType() );
         assertTrue( parameter.isRequired() );
     }
 

File: maven-plugin-tools/maven-plugin-tools-api/src/test/java/org/apache/maven/tools/plugin/scanner/TestExtractor.java
Patch:
@@ -1,6 +1,7 @@
 package org.apache.maven.tools.plugin.scanner;
 
 import org.apache.maven.plugin.descriptor.MojoDescriptor;
+import org.apache.maven.plugin.descriptor.PluginDescriptor;
 import org.apache.maven.project.MavenProject;
 import org.apache.maven.tools.plugin.extractor.MojoDescriptorExtractor;
 
@@ -14,11 +15,10 @@ public class TestExtractor
     implements MojoDescriptorExtractor
 {
 
-    public Set execute( MavenProject project )
-        throws Exception
+    public Set execute( MavenProject project, PluginDescriptor pluginDescriptor )
     {
         MojoDescriptor desc = new MojoDescriptor();
-        desc.setId( "testPluginId" );
+        desc.setPluginDescriptor( pluginDescriptor );
         desc.setGoal( "testGoal" );
 
         return Collections.singleton( desc );

File: maven-plugin-tools/maven-plugin-tools-api/src/test/java/org/apache/maven/tools/plugin/util/PluginUtilsTest.java
Patch:
@@ -24,7 +24,7 @@ public void testShouldTrimArtifactIdToFindPluginId()
 
         MavenProject project = new MavenProject( model );
 
-        String pluginId = PluginDescriptor.getPluginIdFromArtifactId( project.getArtifactId() );
+        String pluginId = PluginDescriptor.getGoalPrefixFromArtifactId( project.getArtifactId() );
 
         assertEquals( "artifactId", pluginId );
     }

File: maven-script/maven-script-marmalade/src/main/java/org/apache/maven/script/marmalade/MarmaladeMojoExecutionDirectives.java
Patch:
@@ -30,6 +30,8 @@ public final class MarmaladeMojoExecutionDirectives
 
     public static final String RESPONSE_INVAR = "response";
 
+    public static final String PLUGIN_DESCRIPTOR = "pluginDescriptor";
+
     private MarmaladeMojoExecutionDirectives()
     {
     }

File: maven-script/maven-script-marmalade/src/main/java/org/apache/maven/script/marmalade/tags/MojoDefinitionTagLibrary.java
Patch:
@@ -31,7 +31,6 @@ public MojoDefinitionTagLibrary()
         registerTag( "execute", ExecuteTag.class );
         registerTag( "executionStrategy", ExecutionStrategyTag.class );
         registerTag( "goal", GoalTag.class );
-        registerTag( "id", IdTag.class );
         registerTag( "instantiationStrategy", InstantiationStrategyTag.class );
         registerTag( "lifecyclePhase", LifecyclePhaseTag.class );
         registerTag( "metadata", MetadataTag.class );

File: maven-mboot2/src/main/java/MBoot.java
Patch:
@@ -36,12 +36,12 @@
 public class MBoot
 {
     String[] builds = new String[]{"maven-model", "maven-settings", "maven-monitor", "maven-plugin-api",
-                                   "maven-plugin-descriptor", "maven-artifact", /*"maven-script/maven-script-marmalade",*/
+                                   "maven-plugin-descriptor", "maven-artifact", "maven-script/maven-script-marmalade",
                                    "maven-project", "maven-core", "maven-archiver", "maven-reporting/maven-reporting-api",
                                    "maven-reporting/maven-reporting-manager", "maven-plugin-tools/maven-plugin-tools-api",
                                    "maven-plugin-tools/maven-plugin-tools-java",
                                    "maven-plugin-tools/maven-plugin-tools-pluggy",
-                                   /*"maven-plugin-tools/maven-plugin-tools-marmalade",*/ "maven-core-it-verifier"};
+                                   "maven-plugin-tools/maven-plugin-tools-marmalade", "maven-core-it-verifier"};
 
     String[] pluginBuilds = new String[]{"maven-plugins/maven-clean-plugin", "maven-plugins/maven-compiler-plugin",
                                          "maven-plugins/maven-install-plugin", "maven-plugins/maven-jar-plugin",

File: maven-plugin-descriptor/src/main/java/org/apache/maven/plugin/descriptor/MojoDescriptor.java
Patch:
@@ -257,7 +257,7 @@ public String getRole()
 
     public String getRoleHint()
     {
-        return getId();
+        return getId() + ":" + getGoal();
     }
 
     public String getComponentType()

File: maven-plugin-tools/maven-plugin-tools-java/src/test/resources/source/JavaExtractorTestOne.java
Patch:
@@ -14,7 +14,7 @@ public class JavaExtractorTestOne
 {
     /**
      * Maven project used to generate IDEA project files.
-     * @parameter expression="#project"
+     * @parameter
      * @required
      */
     protected String[] project;

File: maven-plugin-tools/maven-plugin-tools-java/src/test/resources/source/JavaExtractorTestTwo.java
Patch:
@@ -12,7 +12,7 @@ public class JavaExtractorTestTwo
 
     /**
      * Maven project used to generate IDEA project files.
-     * @parameter expression="#project"
+     * @parameter
      * @required
      */
     private String[] project;

File: maven-script/maven-script-marmalade/src/main/java/org/apache/maven/script/marmalade/tags/MetadataTag.java
Patch:
@@ -73,6 +73,8 @@ private MojoDescriptor buildDescriptor( MarmaladeExecutionContext context )
         MojoDescriptor descriptor = new MojoDescriptor();
 
         descriptor.setLanguage( "marmalade" );
+        descriptor.setComponentComposer( "map-oriented" );
+        descriptor.setComponentConfigurator( "map-oriented" );
 
         if ( notEmpty( id ) )
         {
@@ -103,8 +105,6 @@ private MojoDescriptor buildDescriptor( MarmaladeExecutionContext context )
         descriptor.setRequiresDependencyResolution( requiresDependencyResolution );
         descriptor.setRequiresProject( requiresProject );
 
-        // TODO: component requirements
-
         String basePath = (String) context.getVariable( MarmaladeMojoExecutionDirectives.SCRIPT_BASEPATH_INVAR,
                                                         getExpressionEvaluator() );
 

File: maven-core/src/main/java/org/apache/maven/plugin/PluginParameterExpressionEvaluator.java
Patch:
@@ -193,7 +193,7 @@ private String stripTokens( String expr )
             context.getLog().warn( "DEPRECATED: use ${} to delimit expressions instead of # for '" + expr + "'" );
             expr = expr.substring( 1 );
         }
-        else if ( expr.startsWith( "${" ) && expr.endsWith( "}" ) )
+        else if ( expr.startsWith( "${" ) && expr.indexOf( "}" ) == expr.length() - 1 )
         {
             expr = expr.substring( 2, expr.length() - 1 );
         }

File: maven-core-it/it0011/src/main/java/org/apache/maven/it0011/PersonFinder.java
Patch:
@@ -2,5 +2,5 @@
 
 public class PersonFinder
 {
-    org.apache.maven.plugin.Plugin plugin;
+    org.apache.maven.plugin.Mojo mojo;
 }

File: maven-core-it/it0012/src/main/java/org/apache/maven/it0012/PersonFinder.java
Patch:
@@ -2,5 +2,5 @@
 
 public class PersonFinder
 {
-    private org.apache.maven.plugin.Plugin plugin;
+    private org.apache.maven.plugin.Mojo mojo;
 }

File: maven-mboot2/src/main/java/MBoot.java
Patch:
@@ -36,12 +36,12 @@
 public class MBoot
 {
     String[] builds = new String[]{"maven-model", "maven-settings", "maven-monitor", "maven-plugin-api",
-                                   "maven-plugin-descriptor", "maven-artifact", "maven-script/maven-script-marmalade",
+                                   "maven-plugin-descriptor", "maven-artifact", /*"maven-script/maven-script-marmalade",*/
                                    "maven-project", "maven-core", "maven-archiver",
                                    "maven-plugin-tools/maven-plugin-tools-api",
                                    "maven-plugin-tools/maven-plugin-tools-java",
                                    "maven-plugin-tools/maven-plugin-tools-pluggy",
-                                   "maven-plugin-tools/maven-plugin-tools-marmalade", "maven-core-it-verifier"};
+                                   /*"maven-plugin-tools/maven-plugin-tools-marmalade",*/ "maven-core-it-verifier"};
 
     String[] pluginBuilds = new String[]{"maven-plugins/maven-clean-plugin", "maven-plugins/maven-compiler-plugin",
                                          "maven-plugins/maven-install-plugin", "maven-plugins/maven-jar-plugin",

File: maven-plugin-descriptor/src/main/java/org/apache/maven/plugin/descriptor/PluginDescriptorBuilder.java
Patch:
@@ -158,8 +158,6 @@ public MojoDescriptor buildComponentDescriptor( PlexusConfiguration c )
             {
                 String editable = d.getChild("editable").getValue();
                 
-                System.out.println("Value of editable attribute for parameter: " + parameter.getName() + " is: " + editable);
-                
                 parameter.setEditable( editable == null || "true".equals( editable ) );
             }
             

File: maven-plugins/maven-site-plugin/src/main/java/org/apache/maven/doxia/ScpSiteDeployMojo.java
Patch:
@@ -129,9 +129,7 @@ public void execute()
             Repository repository = new Repository( id, url );
 
             //@todo dirty hack to make artifact uploading work
-            repository.setAuthenticationInfo( WagonUtils.getAuthInfo() );
-
-            commandExecutor.connect( repository );
+            commandExecutor.connect( repository, WagonUtils.getAuthInfo() );
 
             String basedir = repository.getBasedir();
 

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Patch:
@@ -733,7 +733,7 @@ public void initialize()
         artifactFilter = new ExclusionSetFilter( new String[]{"maven-core", "maven-artifact", "maven-model",
                                                               "maven-settings", "maven-monitor", "maven-plugin-api",
                                                               "maven-plugin-descriptor", "plexus-container-default",
-                                                              "maven-project", "plexus-artifact-container",
+                                                              "maven-project", "plexus-container-artifact",
                                                               "wagon-provider-api", "classworlds", "maven-plugin"} );
     }
 

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/RepositoryCleaner.java
Patch:
@@ -229,9 +229,9 @@ public void cleanRepository( RepositoryCleanerConfiguration configuration )
 
                 message.setContent( contentBuffer.toString() );
                 message.setSubject( configuration.getErrorReportSubject() );
-                message.setFrom( configuration.getErrorReportFromName(), configuration.getErrorReportFromAddress() );
+                message.setFrom( configuration.getErrorReportFromAddress(), configuration.getErrorReportFromName() );
                 message.setSendDate( new Date() );
-                message.addTo( configuration.getErrorReportToName(), configuration.getErrorReportToAddress() );
+                message.addTo( configuration.getErrorReportToAddress(), configuration.getErrorReportToName() );
 
                 try
                 {

File: sandbox/repoclean/src/test/java/org/apache/maven/tools/repoclean/TestSupport.java
Patch:
@@ -73,10 +73,10 @@ public static String getRepositoryPath( String relativePath )
 
     public static File getResource( String relativePath )
     {
-        ClassLoader cloader = Thread.currentThread().getContextClassLoader();
+        ClassLoader cloader = TestSupport.class.getClassLoader();
         
         URL resource = cloader.getResource( relativePath );
-
+        
         return new File( resource.getPath() ).getAbsoluteFile();
     }
 

File: maven-plugins/maven-deploy-plugin/src/main/java/org/apache/maven/plugin/deploy/DeployMojo.java
Patch:
@@ -21,11 +21,11 @@
 import org.apache.maven.artifact.deployer.ArtifactDeployer;
 import org.apache.maven.artifact.deployer.ArtifactDeploymentException;
 import org.apache.maven.artifact.metadata.ArtifactMetadata;
-import org.apache.maven.artifact.metadata.ProjectArtifactMetadata;
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.plugin.AbstractPlugin;
 import org.apache.maven.plugin.PluginExecutionException;
 import org.apache.maven.project.MavenProject;
+import org.apache.maven.project.artifact.ProjectArtifactMetadata;
 
 import java.io.File;
 

File: maven-plugins/maven-install-plugin/src/main/java/org/apache/maven/plugin/install/InstallMojo.java
Patch:
@@ -21,11 +21,11 @@
 import org.apache.maven.artifact.installer.ArtifactInstallationException;
 import org.apache.maven.artifact.installer.ArtifactInstaller;
 import org.apache.maven.artifact.metadata.ArtifactMetadata;
-import org.apache.maven.artifact.metadata.ProjectArtifactMetadata;
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.plugin.AbstractPlugin;
 import org.apache.maven.plugin.PluginExecutionException;
 import org.apache.maven.project.MavenProject;
+import org.apache.maven.project.artifact.ProjectArtifactMetadata;
 
 import java.io.File;
 

File: maven-project/src/main/java/org/apache/maven/project/artifact/ProjectArtifactMetadata.java
Patch:
@@ -17,6 +17,8 @@
  */
 
 import org.apache.maven.artifact.Artifact;
+import org.apache.maven.artifact.metadata.AbstractArtifactMetadata;
+import org.apache.maven.artifact.metadata.ArtifactMetadataRetrievalException;
 import org.apache.maven.artifact.manager.WagonManager;
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.artifact.repository.layout.ArtifactPathFormatException;

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.factory.ArtifactFactory;
-import org.apache.maven.artifact.metadata.MavenMetadataSource;
 import org.apache.maven.artifact.resolver.ArtifactResolutionException;
 import org.apache.maven.artifact.resolver.ArtifactResolutionResult;
 import org.apache.maven.artifact.resolver.ArtifactResolver;
@@ -34,6 +33,7 @@
 import org.apache.maven.plugin.descriptor.PluginDescriptorBuilder;
 import org.apache.maven.project.MavenProject;
 import org.apache.maven.project.MavenProjectBuilder;
+import org.apache.maven.project.artifact.MavenMetadataSource;
 import org.apache.maven.project.path.PathTranslator;
 import org.codehaus.plexus.ArtifactEnabledContainer;
 import org.codehaus.plexus.ArtifactEnabledContainerException;

File: maven-plugins/maven-compiler-plugin/src/main/java/org/apache/maven/plugin/CompilerMojo.java
Patch:
@@ -62,7 +62,7 @@ public class CompilerMojo
     private Compiler compiler = new JavacCompiler();
 
     // TODO: use boolean when supported
-    private String debug = Boolean.FALSE.toString();
+    private String debug = Boolean.TRUE.toString();
 
     private List compileSourceRoots;
 

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/artifact/handler/DtdHandler.java
Patch:
@@ -22,8 +22,7 @@
  * @author <a href="mailto:jason@maven.org">Jason van Zyl</a>
  * @version $Id$
  */
-public class DtdHandler
-    extends AbstractArtifactHandler
+public class DtdHandler extends AbstractArtifactHandler
 {
     public String directory()
     {

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/artifact/handler/EarHandler.java
Patch:
@@ -22,8 +22,7 @@
  * @author <a href="mailto:jason@maven.org">Jason van Zyl</a>
  * @version $Id$
  */
-public class EarHandler
-    extends JarHandler
+public class EarHandler extends JarHandler
 {
     public String directory()
     {

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/artifact/handler/LegacyPluginHandler.java
Patch:
@@ -22,13 +22,12 @@
 /**
  * @author jdcasey
  */
-public class LegacyPluginHandler
-    extends AbstractArtifactHandler
+public class LegacyPluginHandler extends AbstractArtifactHandler
 {
 
     public String directory()
     {
         return "plugins";
     }
-    
+
 }

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/artifact/handler/RarHandler.java
Patch:
@@ -22,8 +22,7 @@
  * @author <a href="mailto:jason@maven.org">Jason van Zyl</a>
  * @version $Id$
  */
-public class RarHandler
-    extends JarHandler
+public class RarHandler extends JarHandler
 {
     public String directory()
     {

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/artifact/handler/SarHandler.java
Patch:
@@ -22,14 +22,13 @@
  * @author <a href="mailto:jason@maven.org">Jason van Zyl</a>
  * @version $Id$
  */
-public class SarHandler
-    extends JarHandler
+public class SarHandler extends JarHandler
 {
     public String directory()
     {
         return "sars";
     }
-    
+
     public String extension()
     {
         return "sar";

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/artifact/handler/TldHandler.java
Patch:
@@ -22,8 +22,7 @@
  * @author <a href="mailto:jason@maven.org">Jason van Zyl</a>
  * @version $Id$
  */
-public class TldHandler
-    extends AbstractArtifactHandler
+public class TldHandler extends AbstractArtifactHandler
 {
     public String directory()
     {

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/artifact/layout/AlphaBridgingRepositoryLayout.java
Patch:
@@ -21,8 +21,7 @@
  * limitations under the License.
  */
 
-public class AlphaBridgingRepositoryLayout
-    extends DefaultRepositoryLayout
+public class AlphaBridgingRepositoryLayout extends DefaultRepositoryLayout
 {
 
     public String pathOfMetadata( ArtifactMetadata metadata )

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/digest/DigestException.java
Patch:
@@ -20,8 +20,7 @@
 /**
  * @author jdcasey
  */
-public class DigestException
-    extends Exception
+public class DigestException extends Exception
 {
 
     public DigestException( String message )

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/digest/DigestVerificationException.java
Patch:
@@ -20,8 +20,7 @@
 /**
  * @author jdcasey
  */
-public class DigestVerificationException
-    extends Exception
+public class DigestVerificationException extends Exception
 {
 
     public DigestVerificationException()
@@ -42,5 +41,5 @@ public DigestVerificationException( Throwable cause )
     {
         super( cause );
     }
-    
+
 }
\ No newline at end of file

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/digest/Digestor.java
Patch:
@@ -68,8 +68,8 @@ public boolean verifyArtifactDigest( File artifactFile, File digestFile, String
             }
             catch ( IOException e )
             {
-                throw new DigestException( "Cannot verify digest for artifact file: \'" + artifactFile
-                    + "\' against digest file: \'" + digestFile + "\' using algorithm: \'" + algorithm + "\'", e );
+                throw new DigestException( "Cannot verify digest for artifact file: \'" + artifactFile +
+                                           "\' against digest file: \'" + digestFile + "\' using algorithm: \'" + algorithm + "\'", e );
             }
             finally
             {

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/report/ReportWriteException.java
Patch:
@@ -16,8 +16,7 @@
  * limitations under the License.
  */
 
-public class ReportWriteException
-    extends Exception
+public class ReportWriteException extends Exception
 {
 
     public ReportWriteException( String message, Throwable cause )

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/rewrite/V4PomRewriter.java
Patch:
@@ -19,8 +19,8 @@
 
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.model.Model;
-import org.apache.maven.model.io.xpp3.MavenXpp3Writer;
 import org.apache.maven.model.io.xpp3.MavenXpp3Reader;
+import org.apache.maven.model.io.xpp3.MavenXpp3Writer;
 import org.apache.maven.tools.repoclean.report.FileReporter;
 import org.codehaus.plexus.util.IOUtil;
 import org.codehaus.plexus.util.StringUtils;
@@ -32,8 +32,7 @@
 /**
  * @author jdcasey
  */
-public class V4PomRewriter
-    implements ArtifactPomRewriter
+public class V4PomRewriter implements ArtifactPomRewriter
 {
     public void rewrite( Artifact artifact, File from, File to, FileReporter reporter, boolean reportOnly )
         throws Exception

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/transaction/RewriteTransaction.java
Patch:
@@ -48,8 +48,8 @@ public void rollback()
             File file = (File) it.next();
             if ( file.exists() && !file.delete() )
             {
-                throw new RollbackException( "[rollback] Cannot delete file: " + file
-                    + "\nPart of transaction for artifact: {" + artifact.getId() + "}." );
+                throw new RollbackException( "[rollback] Cannot delete file: " + file +
+                                             "\nPart of transaction for artifact: {" + artifact.getId() + "}." );
             }
         }
     }

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/transaction/RollbackException.java
Patch:
@@ -16,8 +16,7 @@
  * limitations under the License.
  */
 
-public class RollbackException
-    extends Exception
+public class RollbackException extends Exception
 {
 
     public RollbackException( String message, Throwable cause )

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/translate/PomTranslationException.java
Patch:
@@ -20,8 +20,7 @@
 /**
  * @author jdcasey
  */
-public class PomTranslationException
-    extends Exception
+public class PomTranslationException extends Exception
 {
 
     private final String groupId;

File: maven-artifact/src/main/java/org/apache/maven/artifact/factory/ArtifactFactory.java
Patch:
@@ -26,4 +26,7 @@ Artifact createArtifact( String groupId, String artifactId, String version, Stri
                              String inheritedScope );
 
     Artifact createArtifact( String groupId, String artifactId, String knownVersion, String scope, String type );
+    
+    public Artifact createArtifactWithClassifier( String groupId, String artifactId, String version, String scope,
+                                                  String type, String classifier );
 }

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Patch:
@@ -19,7 +19,6 @@
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.MavenMetadataSource;
 import org.apache.maven.artifact.factory.ArtifactFactory;
-import org.apache.maven.artifact.repository.ArtifactRepositoryFactory;
 import org.apache.maven.artifact.resolver.ArtifactResolutionException;
 import org.apache.maven.artifact.resolver.ArtifactResolutionResult;
 import org.apache.maven.artifact.resolver.ArtifactResolver;
@@ -36,7 +35,6 @@
 import org.apache.maven.project.MavenProject;
 import org.apache.maven.project.MavenProjectBuilder;
 import org.apache.maven.project.path.PathTranslator;
-import org.apache.maven.settings.MavenSettingsBuilder;
 import org.codehaus.plexus.ArtifactEnabledContainer;
 import org.codehaus.plexus.ArtifactEnabledContainerException;
 import org.codehaus.plexus.PlexusConstants;
@@ -456,7 +454,7 @@ public void executeMojo( MavenSession session, String goalName )
         }
         catch ( PluginConfigurationException e )
         {
-            String msg = "Error configuring plugin for execution of .";
+            String msg = "Error configuring plugin for execution of '" + goalName + "'.";
             throw new PluginExecutionException( msg, e );
         }
         catch ( ComponentLookupException e )

File: maven-mboot2/src/main/java/MBoot.java
Patch:
@@ -35,9 +35,9 @@
 
 public class MBoot
 {
-    String[] builds = new String[]{"maven-model", "maven-project", "maven-settings", "maven-monitor", "maven-plugin-api",
+    String[] builds = new String[]{"maven-model", "maven-settings", "maven-monitor", "maven-plugin-api",
                                    "maven-plugin-descriptor", "maven-artifact", "maven-script/maven-script-marmalade",
-                                   "maven-core", "maven-archiver", "maven-plugin-tools/maven-plugin-tools-api",
+                                   "maven-project", "maven-core", "maven-archiver", "maven-plugin-tools/maven-plugin-tools-api",
                                    "maven-plugin-tools/maven-plugin-tools-java",
                                    "maven-plugin-tools/maven-plugin-tools-pluggy",
                                    "maven-plugin-tools/maven-plugin-tools-marmalade", "maven-core-it-verifier"};

File: maven-plugins/maven-install-plugin/src/main/java/org/apache/maven/plugin/install/InstallMojo.java
Patch:
@@ -38,19 +38,19 @@
  * type="org.apache.maven.project.MavenProject"
  * required="true"
  * validator=""
- * expression="#project"
+ * expression="${project}"
  * description=""
  * @parameter name="installer"
  * type="org.apache.maven.artifact.installer.ArtifactInstaller"
  * required="true"
  * validator=""
- * expression="#component.org.apache.maven.artifact.installer.ArtifactInstaller"
+ * expression="${component.org.apache.maven.artifact.installer.ArtifactInstaller}"
  * description=""
  * @parameter name="localRepository"
  * type="org.apache.maven.artifact.repository.ArtifactRepository"
  * required="true"
  * validator=""
- * expression="#localRepository"
+ * expression="${localRepository}"
  * description=""
  */
 public class InstallMojo

File: maven-plugins/maven-plugin-plugin/src/main/java/org/apache/maven/plugin/plugin/DescriptorGeneratorMojo.java
Patch:
@@ -35,19 +35,19 @@
  * type="org.apache.maven.tools.plugin.scanner.MojoScanner"
  * required="true"
  * validator=""
- * expression="#component.org.apache.maven.tools.plugin.scanner.MojoScanner"
+ * expression="${component.org.apache.maven.tools.plugin.scanner.MojoScanner}"
  * description="Scanner used to discover mojo descriptors from this project"
  * @parameter name="project"
  * type="org.apache.maven.project.MavenProject"
  * required="true"
  * validator=""
- * expression="#project"
+ * expression="${project}"
  * description=""
  * @parameter name="outputDirectory"
  * type="String"
  * required="true"
  * validator=""
- * expression="#project.build.directory/classes/META-INF/maven"
+ * expression="${project.build.outputDirectory}/META-INF/maven"
  * description=""
  */
 public class DescriptorGeneratorMojo

File: maven-plugins/maven-resources-plugin/src/main/java/org/apache/maven/plugin/resources/ResourcesMojo.java
Patch:
@@ -43,13 +43,13 @@
  * type="String"
  * required="true"
  * validator=""
- * expression="#project.build.outputDirectory"
+ * expression="${project.build.outputDirectory}"
  * description=""
  * @parameter name="resources"
  * type="List"
  * required="true"
  * validator=""
- * expression="#project.build.resources"
+ * expression="${project.build.resources}"
  * description=""
  */
 public class ResourcesMojo

File: maven-plugins/maven-resources-plugin/src/main/java/org/apache/maven/plugin/resources/TestResourcesMojo.java
Patch:
@@ -26,13 +26,13 @@
  * type="String"
  * required="true"
  * validator=""
- * expression="#project.build.testOutputDirectory"
+ * expression="${project.build.testOutputDirectory}"
  * description=""
  * @parameter name="resources"
  * type="List"
  * required="true"
  * validator=""
- * expression="#project.build.testResources"
+ * expression="${project.build.testResources}"
  * description=""
  */
 public class TestResourcesMojo

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/RepositoryCleaner.java
Patch:
@@ -368,7 +368,7 @@ private void rewriteArtifactsAndPoms( List artifacts, ArtifactRepository sourceR
 
                         transaction.addFile( targetPom );
 
-                        File bridgedTargetPom = new File( targetRepositoryBase, bridgingLayout.pathOfMetadata( pom ) );
+                        File bridgedTargetPom = new File( targetRepositoryBase, bridgingLayout.pathOfMetadata( pom ).replace('+', '-') );
 
                         transaction.addFile( bridgedTargetPom );
 

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/RepositoryCleaner.java
Patch:
@@ -288,7 +288,7 @@ private void rewriteArtifactsAndPoms( List artifacts, ArtifactRepository sourceR
                     boolean errorOccurred = false;
 
                     File artifactSource = new File( sourceRepo.getBasedir(), sourceRepo.pathOf( artifact ) );
-                    File artifactTarget = new File( targetRepo.getBasedir(), targetRepo.pathOf( artifact ) );
+                    File artifactTarget = new File( targetRepo.getBasedir(), targetRepo.pathOf( artifact ).replace('+', '-') );
 
                     transaction.addFile( artifactTarget );
 
@@ -364,7 +364,7 @@ private void rewriteArtifactsAndPoms( List artifacts, ArtifactRepository sourceR
 
                         File sourcePom = new File( sourceRepositoryBase, sourceRepo.pathOfMetadata( pom ) );
 
-                        File targetPom = new File( targetRepositoryBase, targetRepo.pathOfMetadata( pom ) );
+                        File targetPom = new File( targetRepositoryBase, targetRepo.pathOfMetadata( pom ).replace('+', '-') );
 
                         transaction.addFile( targetPom );
 

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/digest/DigestException.java
Patch:
@@ -20,16 +20,16 @@
 /**
  * @author jdcasey
  */
-public class ArtifactDigestException
+public class DigestException
     extends Exception
 {
 
-    public ArtifactDigestException( String message )
+    public DigestException( String message )
     {
         super( message );
     }
 
-    public ArtifactDigestException( String message, Throwable cause )
+    public DigestException( String message, Throwable cause )
     {
         super( message, cause );
     }

File: sandbox/repoclean/src/test/java/org/apache/maven/tools/repoclean/digest/ArtifactDigestorTest.java
Patch:
@@ -32,11 +32,11 @@ public class ArtifactDigestorTest
     
     public void testShouldWriteDigestFileInHexNotBinary() throws Exception
     {
-        ArtifactDigestor digestor = new ArtifactDigestor();
+        Digestor digestor = new Digestor();
         
         File artifact = TestSupport.getMyResource(this, DIGEST_FORMAT_VERIFY_ARTIFACT);
         
-        byte[] rawDigest = digestor.generateArtifactDigest( artifact, ArtifactDigestor.MD5 );
+        byte[] rawDigest = digestor.generateArtifactDigest( artifact, Digestor.MD5 );
         
         StringBuffer rawConverted = new StringBuffer(rawDigest.length * 2);
         for ( int i = 0; i < rawDigest.length; i++ )
@@ -46,7 +46,7 @@ public void testShouldWriteDigestFileInHexNotBinary() throws Exception
         
         File digestFile = File.createTempFile("repoclean-artifactDigest-formatTest", ".md5");
         
-        digestor.createArtifactDigest( artifact, digestFile, ArtifactDigestor.MD5 );
+        digestor.createArtifactDigest( artifact, digestFile, Digestor.MD5 );
         
         FileReader reader = new FileReader(digestFile);
         StringBuffer written = new StringBuffer(rawDigest.length * 2);

File: maven-artifact/src/main/java/org/apache/maven/artifact/resolver/DefaultArtifactResolver.java
Patch:
@@ -128,11 +128,11 @@ public void resolve( Artifact artifact, List remoteRepositories, ArtifactReposit
             }
             catch ( ResourceDoesNotExistException e )
             {
-                throw new ArtifactResolutionException( artifactNotFound( localPath, remoteRepositories ), e );
+                throw new ArtifactResolutionException( artifactNotFound( localPath, remoteRepositories ), artifact, e );
             }
             catch ( TransferFailedException e )
             {
-                throw new ArtifactResolutionException( "Error downloading artifact " + artifact, e );
+                throw new ArtifactResolutionException( e.getMessage(), artifact, e );
             }
             catch ( ArtifactMetadataRetrievalException e )
             {

File: maven-core/src/main/java/org/apache/maven/plugin/PluginManager.java
Patch:
@@ -36,10 +36,10 @@ void executeMojo( MavenSession session, String goalName )
     MojoDescriptor getMojoDescriptor( String goalId );
 
     void verifyPluginForGoal( String goalName, MavenSession session )
-        throws PluginNotFoundException, PluginManagerException;
+        throws ArtifactResolutionException, PluginManagerException;
 
     void verifyPlugin( String groupId, String artifactId, MavenSession session )
-        throws PluginNotFoundException, PluginManagerException;
+        throws ArtifactResolutionException, PluginManagerException;
 
     PluginDescriptor getPluginDescriptor( String groupId, String artifactId );
 }
\ No newline at end of file

File: maven-core/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.maven.MavenConstants;
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.MavenMetadataSource;
+import org.apache.maven.artifact.metadata.ArtifactMetadataRetrievalException;
 import org.apache.maven.artifact.factory.ArtifactFactory;
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.artifact.repository.ArtifactRepositoryFactory;
@@ -178,7 +179,6 @@ public MavenProject buildFromRepository( Artifact artifact, List remoteArtifactR
                                              ArtifactRepository localRepository )
         throws ProjectBuildingException
     {
-        Settings settings = readSettings();
 
         Model model = findModelFromRepository( artifact, remoteArtifactRepositories, localRepository );
 

File: maven-artifact/src/main/java/org/apache/maven/artifact/construction/ArtifactConstructionSupport.java
Patch:
@@ -69,6 +69,8 @@ else if ( Artifact.SCOPE_COMPILE.equals( scope ) && Artifact.SCOPE_COMPILE.equal
             desiredScope = Artifact.SCOPE_TEST;
         }
 
-        return new DefaultArtifact( groupId, artifactId, version, desiredScope, type );
+        DefaultArtifact artifact = new DefaultArtifact( groupId, artifactId, version, desiredScope, type, classifier );
+        
+        return artifact;
     }
 }

File: maven-archetype/maven-archetypes/maven-archetype-mojo/src/main/resources/archetype-resources/src/main/java/MyMojo.java
Patch:
@@ -64,7 +64,7 @@ public void execute()
         }
         catch ( IOException e )
         {
-            throw new PluginExecutionException( "Error creating file " + touch );
+            throw new PluginExecutionException( "Error creating file " + touch, e );
         }
         finally
         {

File: maven-artifact-ant/src/main/java/org/apache/maven/artifact/ant/AbstractArtifactTask.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;
 import org.apache.tools.ant.BuildException;
 import org.apache.tools.ant.Task;
+import org.codehaus.plexus.PlexusContainerException;
 import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
 import org.codehaus.plexus.embed.Embedder;
 
@@ -85,7 +86,7 @@ private synchronized Embedder getEmbedder()
                 {
                     embedder.start();
                 }
-                catch ( Exception e )
+                catch ( PlexusContainerException e )
                 {
                     throw new BuildException( "Unable to start embedder", e );
                 }

File: maven-artifact-ant/src/main/java/org/apache/maven/artifact/ant/DependenciesTask.java
Patch:
@@ -107,7 +107,7 @@ public void execute()
             }
             catch ( ArtifactPathFormatException e )
             {
-                throw new BuildException( "Unable to determine path to artifact: " + artifact );
+                throw new BuildException( "Unable to determine path to artifact: " + artifact, e );
             }
 
             FileList.FileName file = new FileList.FileName();

File: maven-core/src/main/java/org/apache/maven/plugin/PluginManager.java
Patch:
@@ -17,6 +17,7 @@
  * ====================================================================
  */
 
+import org.apache.maven.artifact.resolver.ArtifactResolutionException;
 import org.apache.maven.execution.MavenSession;
 import org.apache.maven.plugin.descriptor.MojoDescriptor;
 import org.apache.maven.plugin.descriptor.PluginDescriptor;
@@ -30,7 +31,7 @@ public interface PluginManager
     String ROLE = PluginManager.class.getName();
 
     void executeMojo( MavenSession session, String goalName )
-        throws PluginExecutionException, PluginNotFoundException;
+        throws PluginExecutionException, PluginNotFoundException, PluginManagerException, ArtifactResolutionException;
 
     MojoDescriptor getMojoDescriptor( String goalId );
 

File: maven-core/src/main/java/org/apache/maven/project/path/DefaultPathTranslator.java
Patch:
@@ -22,7 +22,6 @@
 
 import java.io.File;
 import java.util.Iterator;
-import java.util.List;
 
 public class DefaultPathTranslator
     implements PathTranslator

File: maven-core/src/test/java/org/apache/maven/plugin/PluginParameterExpressionEvaluatorTest.java
Patch:
@@ -67,9 +67,6 @@ public void testValueExtractionWithAPomValueContainingAPath()
 
         String actual = new File( value.toString() ).getCanonicalPath();
 
-        System.out.println( "Expected value: " + expected );
-        System.out.println( "Resolved value: " + actual );
-
         assertEquals( expected, actual );
     }
 

File: maven-core/src/test/java/org/apache/maven/project/inheritance/ProjectInheritanceTestCase.java
Patch:
@@ -16,10 +16,9 @@
  * limitations under the License.
  */
 
-import java.io.File;
-
 import org.apache.maven.MavenTestCase;
-import org.apache.maven.project.MavenProjectBuilder;
+
+import java.io.File;
 
 /**
  * @author <a href="mailto:jason@maven.org">Jason van Zyl</a>

File: maven-core/src/test/java/org/apache/maven/util/introspection/ReflectionValueExtractorTest.java
Patch:
@@ -19,7 +19,6 @@
 import org.apache.maven.MavenTestCase;
 import org.apache.maven.model.Build;
 import org.apache.maven.project.MavenProject;
-import org.apache.maven.project.MavenProjectBuilder;
 
 import java.io.File;
 import java.util.List;

File: maven-plugin-tools/maven-plugin-tools-api/src/test/java/org/apache/maven/tools/plugin/util/PluginUtilsTest.java
Patch:
@@ -20,13 +20,13 @@ public class PluginUtilsTest
     public void testShouldTrimArtifactIdToFindPluginId()
     {
         Model model = new Model();
-        model.setArtifactId( "test-artifactId-plugin" );
+        model.setArtifactId( "maven-artifactId-plugin" );
 
         MavenProject project = new MavenProject( model );
 
         String pluginId = PluginDescriptor.getPluginIdFromArtifactId( project.getArtifactId() );
 
-        System.out.println( pluginId );
+        assertEquals( "artifactId", pluginId );
     }
 
     public void testShouldWriteDependencies()

File: maven-plugins/maven-assembly-plugin/src/main/java/org/apache/maven/plugin/assembly/AssemblyMojo.java
Patch:
@@ -110,15 +110,14 @@ else if ( descriptorId != null )
             InputStream resourceAsStream = getClass().getResourceAsStream( "/assemblies/" + descriptorId + ".xml" );
             if ( resourceAsStream == null )
             {
-                // TODO: better exception
-                throw new Exception( "Descriptor with ID '" + descriptorId + "' not found" );
+                throw new PluginExecutionException( "Descriptor with ID '" + descriptorId + "' not found" );
             }
             r = new InputStreamReader( resourceAsStream );
         }
         else
         {
             // TODO: better exception
-            throw new Exception( "You must specify descriptor or descriptorId" );
+            throw new PluginExecutionException( "You must specify descriptor or descriptorId" );
         }
 
         try

File: maven-plugins/maven-resources-plugin/src/main/java/org/apache/maven/plugin/resources/ResourcesMojo.java
Patch:
@@ -32,7 +32,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.TreeMap;
-import java.util.Map.Entry;
 
 /**
  * @author <a href="michal.maczka@dimatics.com">Michal Maczka</a>
@@ -67,7 +66,7 @@ public void execute()
         {
             for ( Iterator i = getJarResources( resources ).entrySet().iterator(); i.hasNext(); )
             {
-                Map.Entry entry = (Entry) i.next();
+                Map.Entry entry = (Map.Entry) i.next();
                 String source = (String) entry.getKey();
                 String destination = (String) entry.getValue();
                 

File: maven-script/maven-script-marmalade/src/main/java/org/apache/maven/script/marmalade/MarmaladeMojo.java
Patch:
@@ -16,9 +16,7 @@
  * limitations under the License.
  */
 
-import org.apache.maven.monitor.logging.Log;
 import org.apache.maven.plugin.AbstractPlugin;
-import org.apache.maven.plugin.FailureResponse;
 import org.apache.maven.plugin.PluginExecutionRequest;
 import org.apache.maven.plugin.PluginExecutionResponse;
 import org.codehaus.marmalade.model.MarmaladeScript;

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/digest/ArtifactDigestVerifier.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 import org.apache.maven.artifact.Artifact;
-import org.apache.maven.tools.repoclean.report.Reporter;
+import org.apache.maven.tools.repoclean.report.FileReporter;
 import org.codehaus.plexus.util.FileUtils;
 
 import java.io.File;
@@ -34,7 +34,7 @@ public class ArtifactDigestVerifier
 
     private ArtifactDigestor artifactDigestor;
 
-    public void verifyDigest( Artifact artifact, File artifactTarget, Reporter reporter, boolean reportOnly ) throws Exception
+    public void verifyDigest( Artifact artifact, File artifactTarget, FileReporter reporter, boolean reportOnly ) throws Exception
     {
         // create the digest source file from which to copy/verify.
         File digestSourceFile = new File( artifact.getFile() + ".md5" );

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/discover/ArtifactDiscoverer.java
Patch:
@@ -1,6 +1,6 @@
 package org.apache.maven.tools.repoclean.discover;
 
-import org.apache.maven.tools.repoclean.report.Reporter;
+import org.apache.maven.tools.repoclean.report.FileReporter;
 
 import java.io.File;
 import java.util.List;
@@ -43,6 +43,6 @@ public interface ArtifactDiscoverer
         "**/REPOSITORY-V*.txt"
     };
 
-    List discoverArtifacts( File repositoryBase, Reporter reporter ) throws Exception;
+    List discoverArtifacts( File repositoryBase, FileReporter reporter ) throws Exception;
     
 }
\ No newline at end of file

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/discover/DefaultArtifactDiscoverer.java
Patch:
@@ -4,7 +4,7 @@
 import org.apache.maven.artifact.construction.ArtifactConstructionSupport;
 import org.apache.maven.model.Model;
 import org.apache.maven.model.io.xpp3.MavenXpp3Reader;
-import org.apache.maven.tools.repoclean.report.Reporter;
+import org.apache.maven.tools.repoclean.report.FileReporter;
 import org.codehaus.plexus.util.DirectoryScanner;
 import org.codehaus.plexus.util.IOUtil;
 
@@ -36,7 +36,7 @@ public class DefaultArtifactDiscoverer
 
     private ArtifactConstructionSupport artifactConstructionSupport = new ArtifactConstructionSupport();
 
-    public List discoverArtifacts( File repositoryBase, Reporter reporter )
+    public List discoverArtifacts( File repositoryBase, FileReporter reporter )
         throws Exception
     {
         List artifacts = new ArrayList();
@@ -64,7 +64,7 @@ public List discoverArtifacts( File repositoryBase, Reporter reporter )
         return artifacts;
     }
 
-    private Artifact buildArtifact( File repositoryBase, String path, Reporter reporter )
+    private Artifact buildArtifact( File repositoryBase, String path, FileReporter reporter )
         throws Exception
     {
         Artifact result = null;

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/discover/LegacyArtifactDiscoverer.java
Patch:
@@ -16,7 +16,7 @@
 
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.construction.ArtifactConstructionSupport;
-import org.apache.maven.tools.repoclean.report.Reporter;
+import org.apache.maven.tools.repoclean.report.FileReporter;
 import org.codehaus.plexus.logging.AbstractLogEnabled;
 import org.codehaus.plexus.util.DirectoryScanner;
 
@@ -38,7 +38,7 @@ public class LegacyArtifactDiscoverer
 
     private ArtifactConstructionSupport artifactConstructionSupport = new ArtifactConstructionSupport();
 
-    public List discoverArtifacts( File repositoryBase, Reporter reporter )
+    public List discoverArtifacts( File repositoryBase, FileReporter reporter )
         throws Exception
     {
         List artifacts = new ArrayList();
@@ -65,7 +65,7 @@ public List discoverArtifacts( File repositoryBase, Reporter reporter )
         return artifacts;
     }
 
-    private Artifact buildArtifact( String path, Reporter reporter )
+    private Artifact buildArtifact( String path, FileReporter reporter )
         throws Exception
     {
         StringTokenizer tokens = new StringTokenizer( path, "/\\" );

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/rewrite/ArtifactPomRewriter.java
Patch:
@@ -1,7 +1,7 @@
 package org.apache.maven.tools.repoclean.rewrite;
 
 import org.apache.maven.artifact.Artifact;
-import org.apache.maven.tools.repoclean.report.Reporter;
+import org.apache.maven.tools.repoclean.report.FileReporter;
 
 import java.io.File;
 
@@ -30,6 +30,6 @@ public interface ArtifactPomRewriter
     
     public static final String ROLE = ArtifactPomRewriter.class.getName();
     
-    void rewrite( Artifact artifact, File from, File to, Reporter reporter, boolean reportOnly ) throws Exception;
+    void rewrite( Artifact artifact, File from, File to, FileReporter reporter, boolean reportOnly ) throws Exception;
 
 }

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/rewrite/V3PomRewriter.java
Patch:
@@ -4,7 +4,7 @@
 import org.apache.maven.model.Model;
 import org.apache.maven.model.io.xpp3.MavenXpp3Writer;
 import org.apache.maven.model.v3_0_0.io.xpp3.MavenXpp3Reader;
-import org.apache.maven.tools.repoclean.report.Reporter;
+import org.apache.maven.tools.repoclean.report.FileReporter;
 import org.apache.maven.tools.repoclean.translate.PomV3ToV4Translator;
 import org.codehaus.plexus.util.IOUtil;
 import org.codehaus.plexus.util.StringUtils;
@@ -38,7 +38,7 @@ public class V3PomRewriter
 {
     private PomV3ToV4Translator translator;
 
-    public void rewrite( Artifact artifact, File from, File to, Reporter reporter, boolean reportOnly )
+    public void rewrite( Artifact artifact, File from, File to, FileReporter reporter, boolean reportOnly )
         throws Exception
     {
         Model v4Model = null;
@@ -107,7 +107,7 @@ public void rewrite( Artifact artifact, File from, File to, Reporter reporter, b
         }
     }
 
-    private void validateV4Basics( Model model, Artifact artifact, Reporter reporter )
+    private void validateV4Basics( Model model, Artifact artifact, FileReporter reporter )
         throws Exception
     {
         if ( StringUtils.isEmpty( model.getModelVersion() ) )

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/rewrite/V4PomRewriter.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.maven.model.Model;
 import org.apache.maven.model.io.xpp3.MavenXpp3Writer;
 import org.apache.maven.model.io.xpp3.MavenXpp3Reader;
-import org.apache.maven.tools.repoclean.report.Reporter;
+import org.apache.maven.tools.repoclean.report.FileReporter;
 import org.codehaus.plexus.util.IOUtil;
 import org.codehaus.plexus.util.StringUtils;
 
@@ -35,7 +35,7 @@
 public class V4PomRewriter
     implements ArtifactPomRewriter
 {
-    public void rewrite( Artifact artifact, File from, File to, Reporter reporter, boolean reportOnly )
+    public void rewrite( Artifact artifact, File from, File to, FileReporter reporter, boolean reportOnly )
         throws Exception
     {
         Model model = null;
@@ -95,7 +95,7 @@ public void rewrite( Artifact artifact, File from, File to, Reporter reporter, b
         }
     }
 
-    private void validateBasics( Model model, Artifact artifact, Reporter reporter )
+    private void validateBasics( Model model, Artifact artifact, FileReporter reporter )
         throws Exception
     {
         if ( StringUtils.isEmpty( model.getModelVersion() ) )

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Patch:
@@ -688,7 +688,8 @@ public void initialize()
                                                               "maven-settings", "maven-monitor", "maven-plugin-api",
                                                               "maven-plugin-descriptor", "plexus-container-default",
                                                               "plexus-artifact-container", "wagon-provider-api",
-                                                              "classworlds"} );
+                                                              "classworlds",
+                                                              "maven-plugin" /* Just re-added until all plugins are switched over...*/} );
     }
 
     // ----------------------------------------------------------------------

File: maven-core/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -226,7 +226,7 @@ private MavenProject processProjectLogic( MavenProject project, ArtifactReposito
         Model cachedModel = (Model) modelCache.get( key );
         if ( cachedModel == null )
         {
-            modelCache.put( cacheKey, model );
+            modelCache.put( key, model );
         }
 
         model = modelInterpolator.interpolate( model );

File: maven-archetype/maven-archetypes/maven-archetype-quickstart/src/main/resources/archetype-resources/src/main/java/App.java
Patch:
@@ -3,8 +3,6 @@
 /**
  * Hello world!
  *
- * @author <a href="jason@zenplex.com">Jason van Zyl</a>
- *
  */
 public class App 
 {

File: maven-plugins/maven-idea-plugin/src/main/java/org/apache/maven/plugin/idea/IdeaMojo.java
Patch:
@@ -41,7 +41,7 @@
  * @requiresDependencyResolution test
  * @description Goal for generating IDEA files from a POM
  * @parameter name="project"
- * type="MavenProject"
+ * type="org.apache.maven.project.MavenProject"
  * required="true"
  * validator=""
  * expression="#project"

File: maven-artifact/src/main/java/org/apache/maven/artifact/resolver/DefaultArtifactResolver.java
Patch:
@@ -280,8 +280,6 @@ private ArtifactResolutionResult collect( Set artifacts, ArtifactRepository loca
                                                                                         knownVersion,
                                                                                         newArtifact.getScope(),
                                                                                         knownArtifact.getType() );
-                        // don't copy file - these aren't resolved yet
-
                         resolvedArtifacts.put( artifact.getConflictId(), artifact );
                     }
                 }

File: maven-plugin/src/main/java/org/apache/maven/plugin/descriptor/MojoDescriptor.java
Patch:
@@ -54,7 +54,7 @@ public class MojoDescriptor
 
     private List prereqs;
 
-    private boolean requiresDependencyResolution = false;
+    private String requiresDependencyResolution = null;
 
     private boolean requiresProject = true;
 
@@ -150,12 +150,12 @@ public Map getParameterMap()
     // Dependency requirement
     // ----------------------------------------------------------------------
 
-    public void setRequiresDependencyResolution( boolean requiresDependencyResolution )
+    public void setRequiresDependencyResolution( String requiresDependencyResolution )
     {
         this.requiresDependencyResolution = requiresDependencyResolution;
     }
 
-    public boolean requiresDependencyResolution()
+    public String getRequiresDependencyResolution()
     {
         return requiresDependencyResolution;
     }

File: maven-plugin/src/main/java/org/apache/maven/plugin/descriptor/PluginDescriptorBuilder.java
Patch:
@@ -1,10 +1,10 @@
 package org.apache.maven.plugin.descriptor;
 
+import org.apache.maven.plugin.AbstractPlugin;
 import org.codehaus.plexus.configuration.PlexusConfiguration;
 import org.codehaus.plexus.configuration.PlexusConfigurationException;
 import org.codehaus.plexus.configuration.xml.XmlPlexusConfiguration;
 import org.codehaus.plexus.util.xml.Xpp3DomBuilder;
-import org.apache.maven.plugin.AbstractPlugin;
 
 import java.io.Reader;
 import java.util.ArrayList;
@@ -105,7 +105,7 @@ public MojoDescriptor buildComponentDescriptor( PlexusConfiguration c )
 
         if ( dependencyResolution != null )
         {
-            mojo.setRequiresDependencyResolution( dependencyResolution.equals( "true" ) ? true : false );
+            mojo.setRequiresDependencyResolution( dependencyResolution );
         }
 
         // ----------------------------------------------------------------------

File: maven-plugins/maven-compiler-plugin/src/main/java/org/apache/maven/plugin/TestCompilerMojo.java
Patch:
@@ -21,7 +21,7 @@
  * @version $Id$
  * @goal testCompile
  * @description Compiles test sources
- * @requiresDependencyResolution
+ * @requiresDependencyResolution test
  * @parameter name="compileSourceRoots"
  * type="java.util.List"
  * required="true"

File: maven-plugins/maven-idea-plugin/src/main/java/org/apache/maven/plugin/idea/IdeaMojo.java
Patch:
@@ -38,7 +38,7 @@
 
 /**
  * @goal idea
- * @requiresDependencyResolution
+ * @requiresDependencyResolution test
  * @description Goal for generating IDEA files from a POM
  * @parameter name="project"
  * type="MavenProject"

File: maven-artifact/src/main/java/org/apache/maven/artifact/metadata/SnapshotArtifactMetadata.java
Patch:
@@ -245,6 +245,6 @@ public boolean newerThanFile( File file )
             String fileTimestamp = getUtcDateFormatter().format( new Date( fileTime ) );
             return ( fileTimestamp.compareTo( timestamp ) < 0 );
         }
-        return true;
+        return false;
     }
 }

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/discover/LegacyArtifactDiscoverer.java
Patch:
@@ -74,7 +74,7 @@ private Artifact buildArtifact( String path, Reporter reporter )
 
         if ( numberOfTokens != 3 )
         {
-            reporter.info( "Artifact path: \'" + path
+            reporter.warn( "Artifact path: \'" + path
                 + "\' does not match naming convention. Cannot reliably extract artifact information from path." );
 
             return null;

File: maven-core/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -374,7 +374,7 @@ private List buildPluginRepositories( List pluginRepositories )
 
         Repository pluginRepo = new Repository();
         pluginRepo.setId( "plugin-repository" );
-        pluginRepo.setUrl( "http://repo1.maven.org" );
+        pluginRepo.setUrl( "http://repo1.maven.org/maven2" );
 
         // TODO: [jc] change this to detect the repository layout type somehow...
         String repoLayoutId = "legacy";

File: maven-mboot2/src/main/java/download/ArtifactDownloader.java
Patch:
@@ -115,7 +115,7 @@ private void setRemoteRepos( List repositories )
         if ( repositories.isEmpty() )
         {
             // TODO: use super POM?
-            Repository repository = new Repository( "http://repo1.maven.org", Repository.LAYOUT_LEGACY );
+            Repository repository = new Repository( "http://repo1.maven.org/maven2", Repository.LAYOUT_LEGACY );
             remoteRepos.add( repository );
         }
     }

File: maven-mboot2/src/main/java/MBoot.java
Patch:
@@ -286,7 +286,7 @@ public void run( String[] args )
         for ( Iterator i = reader.getDependencies().iterator(); i.hasNext(); )
         {
             Dependency d = (Dependency) i.next();
-            if ( d.getGroupId().equals( "surefire" ) )
+            if ( d.getGroupId().equals( "surefire" ) || d.getGroupId().equals( "junit" ) )
             {
                 surefireDependencies.add( d );
             }

File: maven-mboot2/src/main/java/download/ArtifactDownloader.java
Patch:
@@ -60,10 +60,10 @@ public void setProxy( String host, String port, String userName, String password
         System.out.println( "Using the following proxy : " + proxyHost + "/" + proxyPort );
     }
 
-    public void downloadDependencies( List files )
+    public void downloadDependencies( List dependencies )
         throws Exception
     {
-        for ( Iterator j = files.iterator(); j.hasNext(); )
+        for ( Iterator j = dependencies.iterator(); j.hasNext(); )
         {
             Dependency dep = (Dependency) j.next();
 

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/artifact/handler/EarHandler.java
Patch:
@@ -30,8 +30,8 @@ public String directory()
         return "ears";
     }
 
-    public String packageGoal()
+    public String extension()
     {
-        return "ear:ear";
+        return "ear";
     }
 }

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/artifact/handler/RarHandler.java
Patch:
@@ -30,8 +30,8 @@ public String directory()
         return "rars";
     }
 
-    public String packageGoal()
+    public String extension()
     {
-        return "rar:rar";
+        return "rar";
     }
 }

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/discover/ArtifactDiscoverer.java
Patch:
@@ -37,6 +37,9 @@ public interface ArtifactDiscoverer
         "*/licenses/**",
         "*/licences/**",
         "**/.htaccess",
+        "**/*.html",
+        "**/*.asc",
+        "**/*.txt",
         "**/REPOSITORY-V*.txt"
     };
 

File: maven-mboot2/src/main/java/download/ArtifactDownloader.java
Patch:
@@ -88,7 +88,7 @@ public void downloadDependencies( List files )
         {
             Dependency dep = (Dependency) j.next();
 
-            if ( !downloadedArtifacts.contains( dep ) )
+            if ( !downloadedArtifacts.contains( dep.getId() ) )
             {
                 String repositoryPath = dep.getRepositoryPath();
                 File destinationFile = new File( mavenRepoLocal, repositoryPath );
@@ -113,7 +113,7 @@ public void downloadDependencies( List files )
                     throw new Exception( "Failed to download " + dep );
                 }
 
-                downloadedArtifacts.add( dep );
+                downloadedArtifacts.add( dep.getId() );
             }
         }
     }

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/artifact/handler/DtdHandler.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.tools.repoclean.artifact;
+package org.apache.maven.tools.repoclean.artifact.handler;
 
 import org.apache.maven.artifact.handler.AbstractArtifactHandler;
 

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/artifact/handler/EarHandler.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.tools.repoclean.artifact;
+package org.apache.maven.tools.repoclean.artifact.handler;
 
 import org.apache.maven.artifact.handler.JarHandler;
 

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/artifact/handler/JarDistroHandler.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.tools.repoclean.artifact;
+package org.apache.maven.tools.repoclean.artifact.handler;
 
 /*
  * Copyright 2001-2005 The Apache Software Foundation.

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/artifact/handler/LegacyPluginHandler.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.tools.repoclean.artifact;
+package org.apache.maven.tools.repoclean.artifact.handler;
 
 import org.apache.maven.artifact.handler.AbstractArtifactHandler;
 

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/artifact/handler/RarHandler.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.tools.repoclean.artifact;
+package org.apache.maven.tools.repoclean.artifact.handler;
 
 import org.apache.maven.artifact.handler.JarHandler;
 

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/artifact/handler/SarHandler.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.tools.repoclean.artifact;
+package org.apache.maven.tools.repoclean.artifact.handler;
 
 import org.apache.maven.artifact.handler.JarHandler;
 

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/artifact/handler/TgzDistroHandler.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.tools.repoclean.artifact;
+package org.apache.maven.tools.repoclean.artifact.handler;
 
 /*
  * Copyright 2001-2005 The Apache Software Foundation.

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/artifact/handler/TldHandler.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.tools.repoclean.artifact;
+package org.apache.maven.tools.repoclean.artifact.handler;
 
 import org.apache.maven.artifact.handler.AbstractArtifactHandler;
 

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/artifact/handler/ZipDistroHandler.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.tools.repoclean.artifact;
+package org.apache.maven.tools.repoclean.artifact.handler;
 
 /*
  * Copyright 2001-2005 The Apache Software Foundation.

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/discover/LegacyArtifactDiscoverer.java
Patch:
@@ -130,10 +130,11 @@ else if ( lastAvceToken.endsWith( ".zip" ) )
             avceTokenList.addLast( lastAvceToken );
         }
 
-        String validVersionParts = "([Dd][Ee][Vv][_.0-9]*)|" + "([Ss][Nn][Aa][Pp][Ss][Hh][Oo][Tt])|" + "([_.0-9ab]+)|"
+        String validVersionParts = "([Dd][Ee][Vv][_.0-9]*)|" + "([Ss][Nn][Aa][Pp][Ss][Hh][Oo][Tt])|" + "([0-9][_.0-9a-zA-Z]*)|"
             + "([Gg]?[_.0-9ab]*([Pp][Rr][Ee]|[Rr][Cc]|[Gg]|[Mm])[_.0-9]*)|" + "([Aa][Ll][Pp][Hh][Aa][_.0-9]*)|"
             + "([Bb][Ee][Tt][Aa][_.0-9]*)|" + "([Rr][Cc][_.0-9]*)|" + "([Tt][Ee][Ss][Tt][_.0-9]*)|"
             + "([Dd][Ee][Bb][Uu][Gg][_.0-9]*)|" + "([Uu][Nn][Oo][Ff][Ff][Ii][Cc][Ii][Aa][Ll][_.0-9]*)|"
+            + "([Cc][Uu][Rr][Rr][Ee][Nn][Tt])|" + "([Ll][Aa][Tt][Ee][Ss][Tt])|" + "([Ff][Cc][Ss])|"
             + "([Rr][Ee][Ll][Ee][Aa][Ss][Ee][_.0-9]*)|" + "([Nn][Ii][Gg][Hh][Tt][Ll][Yy])";
 
         // let's discover the version, and whatever's leftover will be either

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/discover/LegacyArtifactDiscoverer.java
Patch:
@@ -68,7 +68,7 @@ public List discoverArtifacts( File repositoryBase, Reporter reporter )
     private Artifact buildArtifact( String path, Reporter reporter )
         throws Exception
     {
-        StringTokenizer tokens = new StringTokenizer( path, "/" );
+        StringTokenizer tokens = new StringTokenizer( path, "/\\" );
 
         int numberOfTokens = tokens.countTokens();
 

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/Main.java
Patch:
@@ -71,7 +71,7 @@ else if( "-template".equals( args[0] ) )
                 }
             }
         }
-        catch ( Exception e )
+        catch ( Throwable e )
         {
             e.printStackTrace();
         }

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/rewrite/V3PomRewriter.java
Patch:
@@ -112,6 +112,7 @@ public void rewrite( Artifact artifact, File from, File to, Reporter reporter, b
     }
 
     private void validateV4Basics( Model model, Artifact artifact, Reporter reporter )
+        throws Exception
     {
         if ( StringUtils.isEmpty( model.getModelVersion() ) )
         {

File: maven-artifact/src/main/java/org/apache/maven/artifact/transform/SnapshotTransformation.java
Patch:
@@ -69,7 +69,6 @@ public void transformForResolve( Artifact artifact, List remoteRepositories, Art
                 throw new ArtifactMetadataRetrievalException( "Error reading local metadata", e );
             }
 
-            String version = localMetadata.constructVersion();
             boolean alreadyResolved = alreadyResolved( artifact );
             if ( !alreadyResolved )
             {
@@ -144,6 +143,8 @@ else if ( snapshotPolicy.startsWith( ArtifactRepository.SNAPSHOT_POLICY_INTERVAL
             }
             else
             {
+                String version = localMetadata.constructVersion();
+                
                 if ( getLogger().isInfoEnabled() )
                 {
                     if ( !version.equals( artifact.getBaseVersion() ) && !alreadyResolved )

File: maven-plugins/maven-war-plugin/src/main/java/org/apache/maven/plugin/war/WarMojo.java
Patch:
@@ -205,7 +205,9 @@ public void buildWebapp( MavenProject project )
         {
             Artifact artifact = (Artifact) iter.next();
 
-            if ( "jar".equals( artifact.getType() ) && Artifact.SCOPE_RUNTIME.equals( artifact.getScope() ) )
+            // TODO: scope handler
+            // Include runtime and compile time libraries
+            if ( "jar".equals( artifact.getType() ) && !Artifact.SCOPE_TEST.equals( artifact.getScope() ) )
             {
                 FileUtils.copyFileToDirectory( artifact.getFile(), libDirectory );
             }

File: maven-core/src/main/java/org/apache/maven/artifact/repository/ArtifactRepositoryFactory.java
Patch:
@@ -31,4 +31,5 @@ public interface ArtifactRepositoryFactory
     public ArtifactRepository createArtifactRepository( Repository modelRepository, MavenSettings settings,
                                                         ArtifactRepositoryLayout repositoryLayout );
 
+    void setGlobalSnapshotPolicy( String snapshotPolicy );
 }
\ No newline at end of file

File: maven-core/src/main/java/org/apache/maven/settings/DefaultMavenSettingsBuilder.java
Patch:
@@ -91,6 +91,7 @@ private File getSettingsFile()
         // TODO: This replacing shouldn't be necessary as user.home should be in the
         // context of the container and thus the value would be interpolated by Plexus
         String userHome = System.getProperty( "user.home" );
+        userHome = userHome.replaceAll( "\\\\", "/" );
 
         path = path.replaceAll( "\\$\\{user.home\\}", userHome );
         path = path.replaceAll( "\\\\", "/" );

File: maven-plugins/maven-jar-plugin/src/main/java/org/apache/maven/plugin/jar/JarMojo.java
Patch:
@@ -171,7 +171,7 @@ public void execute()
         catch ( Exception e )
         {
             // TODO: improve error handling
-            throw new PluginExecutionException( "Error assembling EJB", e );
+            throw new PluginExecutionException( "Error assembling JAR", e );
         }
     }
 

File: maven-artifact/src/main/java/org/apache/maven/artifact/resolver/DefaultArtifactResolver.java
Patch:
@@ -310,6 +310,8 @@ private ArtifactResolutionResult collect( Set artifacts, ArtifactRepository loca
                                                                                         knownVersion,
                                                                                         newArtifact.getScope(),
                                                                                         knownArtifact.getType() );
+                        // don't copy file - these aren't resolved yet
+
                         resolvedArtifacts.put( artifact.getConflictId(), artifact );
                     }
                 }

File: maven-core/src/main/java/org/apache/maven/project/MavenProject.java
Patch:
@@ -710,6 +710,8 @@ public void addArtifacts( Collection newArtifacts )
                                                                                     existing.getVersion(),
                                                                                     a.getScope(), existing.getType() );
 
+                    artifact.setFile( existing.getFile() );
+
                     artifacts.put( id, artifact );
                 }
             }

File: maven-artifact/src/main/java/org/apache/maven/artifact/installer/DefaultArtifactInstaller.java
Patch:
@@ -71,15 +71,15 @@ public void install( File source, Artifact artifact, ArtifactRepository localRep
 
             String localPath = localRepository.pathOf( artifact );
 
-            getLogger().info( "Installing " + source.getPath() + " to " + localPath );
-
             // TODO: use a file: wagon and the wagon manager?
             File destination = new File( localRepository.getBasedir(), localPath );
             if ( !destination.getParentFile().exists() )
             {
                 destination.getParentFile().mkdirs();
             }
 
+            getLogger().info( "Installing " + source.getPath() + " to " + destination );
+
             FileUtils.copyFile( source, destination );
 
             // must be after the artifact is installed

File: maven-artifact/src/main/java/org/apache/maven/artifact/installer/ArtifactInstaller.java
Patch:
@@ -30,7 +30,7 @@ public interface ArtifactInstaller
     String ROLE = ArtifactInstaller.class.getName();
 
     /**
-     * Install an artifact from a particular directory. The artifact handler is used to determine the filename
+     * Install an artifact from a particular directory. The artifact handler is used to determine the filenameSuffix
      * of the source file.
      *
      * @param basedir         the directory where the artifact is stored

File: maven-artifact/src/main/java/org/apache/maven/artifact/repository/layout/AbstractArtifactRepositoryLayout.java
Patch:
@@ -59,7 +59,7 @@ public String pathOfMetadata( ArtifactMetadata metadata )
     {
         String path = basicPathOf( metadata.getArtifact(), metadataLayoutPattern() );
 
-        path = StringUtils.replace( path, "${metadataFilename}", metadata.getFilename() );
+        path = StringUtils.replace( path, "${metadataSuffix}", metadata.getFilenameSuffix() );
 
         return path;
     }

File: maven-artifact/src/main/java/org/apache/maven/artifact/repository/layout/DefaultRepositoryLayout.java
Patch:
@@ -30,7 +30,7 @@ protected String layoutPattern()
 
     protected String metadataLayoutPattern()
     {
-        return "${groupPath}/${artifactId}/${version}/${metadataFilename}";
+        return "${groupPath}/${artifactId}/${version}/${artifactId}-${version}.${metadataSuffix}";
     }
 
     protected String groupIdAsPath( String groupId )

File: maven-artifact/src/main/java/org/apache/maven/artifact/repository/layout/LegacyRepositoryLayout.java
Patch:
@@ -30,7 +30,7 @@ protected String layoutPattern()
 
     protected String metadataLayoutPattern()
     {
-        return "${groupPath}/poms/${artifactId}-${version}-${metadataFilename}";
+        return "${groupPath}/poms/${artifactId}-${version}.${metadataSuffix}";
     }
 
     protected String groupIdAsPath( String groupId )

File: maven-core/src/test/java/org/apache/maven/project/ProjectClasspathTest.java
Patch:
@@ -38,12 +38,12 @@ public void testProjectClasspath()
         File f = getTestFile( dir + "project-with-scoped-dependencies.xml" );
 
         // XXX: Because this test fails, we resort to crude reflection hacks, see PLX-108 for the solution
-//        assertEquals( ProjectClasspathArtifactResolver.class.getName(), getContainer().lookup( ArtifactResolver.ROLE ) );
+//        assertEquals( ProjectClasspathArtifactResolver.class, getContainer().lookup( ArtifactResolver.ROLE ).getClass() );
         MavenProjectBuilder builder = (MavenProjectBuilder) getContainer().lookup( MavenProjectBuilder.ROLE );
         Field declaredField = builder.getClass().getDeclaredField( "artifactResolver" );
         boolean acc = declaredField.isAccessible();
         declaredField.setAccessible( true );
-        declaredField.set( builder, new ProjectClasspathArtifactResolver() );
+        declaredField.set( builder, getContainer().lookup( ProjectClasspathArtifactResolver.class.getName() ) );
         declaredField.setAccessible( acc );
         // XXX: end hack
 

File: maven-artifact/src/main/java/org/apache/maven/artifact/repository/layout/AbstractArtifactRepositoryLayout.java
Patch:
@@ -20,12 +20,14 @@
 import org.apache.maven.artifact.handler.ArtifactHandler;
 import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;
 import org.apache.maven.artifact.handler.manager.ArtifactHandlerNotFoundException;
+import org.codehaus.plexus.logging.AbstractLogEnabled;
 import org.codehaus.plexus.util.StringUtils;
 
 /**
  * @author jdcasey
  */
 public abstract class AbstractArtifactRepositoryLayout
+    extends AbstractLogEnabled
     implements ArtifactRepositoryLayout
 {
 

File: maven-artifact/src/main/java/org/apache/maven/artifact/repository/layout/DefaultRepositoryLayout.java
Patch:
@@ -25,7 +25,7 @@ public class DefaultRepositoryLayout
 
     protected String layoutPattern()
     {
-        return "${groupId}/${artifactId}/${version}/${artifactId}-${version}-${classifier}.${extension}";
+        return "${groupPath}/${artifactId}/${version}/${artifactId}-${version}-${classifier}.${extension}";
     }
 
     protected String groupIdAsPath( String groupId )

File: maven-plugin/src/main/java/org/apache/maven/plugin/AbstractPlugin.java
Patch:
@@ -59,7 +59,7 @@ public void execute( PluginExecutionRequest request, PluginExecutionResponse res
         throws Exception
     {
         throw new UnsupportedOperationException(
-            "If you are using the old technioque, you must override execute(req,resp)" );
+            "If you are using the old technique, you must override execute(req,resp)" );
     }
 
     public void setLog( Log log )

File: maven-artifact/src/main/java/org/apache/maven/artifact/Artifact.java
Patch:
@@ -42,8 +42,6 @@ public interface Artifact
     // only providing this since classifier is *very* optional...
     boolean hasClassifier();
 
-    String getExtension();
-
     // ----------------------------------------------------------------------
 
     void setPath( String path );

File: maven-core/src/main/java/org/apache/maven/artifact/MavenMetadataSource.java
Patch:
@@ -88,7 +88,7 @@ public Set retrieve( Artifact artifact, ArtifactRepository localRepository, List
                 Artifact metadataArtifact = artifactFactory.createArtifact( artifact.getGroupId(),
                                                                             artifact.getArtifactId(),
                                                                             artifact.getVersion(), artifact.getScope(),
-                                                                            "pom", "pom", null );
+                                                                            "pom", null );
 
                 artifactResolver.resolve( metadataArtifact, remoteRepositories, localRepository );
 

File: maven-core/src/main/java/org/apache/maven/artifact/factory/ArtifactFactory.java
Patch:
@@ -34,5 +34,5 @@ public interface ArtifactFactory
     Artifact createArtifact( Dependency dependency, ArtifactRepository localRepository, String inheritedScope );
 
     Artifact createArtifact( String groupId, String artifactId, String version, String scope, String type,
-                             String extension, String inheritedScope );
+                             String inheritedScope );
 }

File: maven-core/src/main/java/org/apache/maven/artifact/factory/DefaultArtifactFactory.java
Patch:
@@ -53,7 +53,7 @@ public Set createArtifacts( List dependencies, ArtifactRepository localRepositor
     public Artifact createArtifact( Dependency dependency, ArtifactRepository localRepository, String inheritedScope )
     {
         return createArtifact( dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion(),
-                               dependency.getScope(), dependency.getType(), dependency.getType(), inheritedScope );
+                               dependency.getScope(), dependency.getType(), inheritedScope );
     }
 
 }

File: maven-artifact/src/main/java/org/apache/maven/artifact/installer/DefaultArtifactInstaller.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.handler.manager.ArtifactHandlerNotFoundException;
 import org.apache.maven.artifact.repository.ArtifactRepository;
+import org.apache.maven.artifact.repository.layout.ArtifactPathFormatException;
 import org.codehaus.plexus.util.FileUtils;
 
 import java.io.File;
@@ -69,9 +70,9 @@ public void install( File source, Artifact artifact, ArtifactRepository localRep
         {
             throw new ArtifactInstallationException( "Error installing artifact: ", e );
         }
-        catch ( ArtifactHandlerNotFoundException e )
+        catch ( ArtifactPathFormatException e )
         {
             throw new ArtifactInstallationException( "Error installing artifact: ", e );
         }
     }
-}
+}
\ No newline at end of file

File: maven-core/src/main/java/org/apache/maven/artifact/repository/ArtifactRepositoryFactory.java
Patch:
@@ -17,6 +17,7 @@
  * ====================================================================
  */
 
+import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;
 import org.apache.maven.model.Repository;
 import org.apache.maven.settings.MavenSettings;
 
@@ -28,6 +29,7 @@ public interface ArtifactRepositoryFactory
 
     public static final String ROLE = ArtifactRepositoryFactory.class.getName();
 
-    public ArtifactRepository createArtifactRepository( Repository modelRepository, MavenSettings settings );
+    public ArtifactRepository createArtifactRepository( Repository modelRepository, MavenSettings settings,
+                                                       ArtifactRepositoryLayout repositoryLayout );
 
 }
\ No newline at end of file

File: maven-archetype/maven-archetype-core/src/main/java/org/apache/maven/archetype/Archetype.java
Patch:
@@ -16,8 +16,8 @@
  * limitations under the License.
  */
 
+import java.util.List;
 import java.util.Map;
-import java.util.Set;
 
 import org.apache.maven.artifact.repository.ArtifactRepository;
 
@@ -36,6 +36,6 @@ public interface Archetype
     String ARCHETYPE_POM = "pom.xml";
 
     void createArchetype( String archetypeGroupId, String archetypeArtifactId, String archetypeVersion,
-                          ArtifactRepository localRepository, Set remoteRepositories, Map parameters )
+                          ArtifactRepository localRepository, List remoteRepositories, Map parameters )
         throws ArchetypeNotFoundException, ArchetypeDescriptorException, ArchetypeTemplateProcessingException;
 }

File: maven-archetype/maven-archetype-plugin/src/main/java/org/apache/maven/plugin/archetype/MavenArchetypePlugin.java
Patch:
@@ -22,8 +22,8 @@
 import org.apache.maven.plugin.PluginExecutionRequest;
 import org.apache.maven.plugin.PluginExecutionResponse;
 
-import java.util.HashSet;
-import java.util.Set;
+import java.util.ArrayList;
+import java.util.List;
 
 /**
  * @goal create
@@ -131,7 +131,7 @@ public void execute( PluginExecutionRequest request, PluginExecutionResponse res
 
         ArtifactRepository localRepository = (ArtifactRepository) request.getParameter( "localRepository" );
 
-        Set remoteRepositories = new HashSet();
+        List remoteRepositories = new ArrayList();
 
         ArtifactRepository remoteRepository = new ArtifactRepository( "remote", "http://repo1.maven.org" );
 

File: maven-core/src/main/java/org/apache/maven/DefaultMaven.java
Patch:
@@ -101,7 +101,7 @@ public MavenExecutionResponse execute( MavenExecutionRequest request )
 
                 if ( projects.isEmpty() )
                 {
-                    projects.add( projectBuilder.buildSuperProject( request.getLocalRepository() ) );
+                    projects.add( projectBuilder.buildStandaloneSuperProject( request.getLocalRepository() ) );
                 }
             }
             catch ( IOException e )

File: maven-mboot2/src/main/java/MBoot.java
Patch:
@@ -54,6 +54,7 @@ public class MBoot
 
     String[] pluginGeneratorDeps = new String[]{"plexus/jars/plexus-container-default-1.0-alpha-2-SNAPSHOT.jar",
                                                 "maven/jars/maven-core-2.0-SNAPSHOT.jar",
+                                                "maven/jars/maven-artifact-2.0-SNAPSHOT.jar",
                                                 "maven/jars/maven-model-2.0-SNAPSHOT.jar",
                                                 "maven/jars/maven-plugin-2.0-SNAPSHOT.jar",
                                                 "maven/jars/maven-plugin-tools-api-2.0-SNAPSHOT.jar",

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/RepositoryCleaner.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.maven.tools.repoclean.correlate.ArtifactMd5Correlator;
 import org.apache.maven.tools.repoclean.correlate.ArtifactPomCorrelator;
 import org.apache.maven.tools.repoclean.patch.V4ModelPatcher;
-import org.apache.maven.tools.repoclean.pom.PomV3ToV4Translator;
 import org.apache.maven.tools.repoclean.report.Reporter;
+import org.apache.maven.tools.repoclean.translate.PomV3ToV4Translator;
 import org.apache.maven.tools.repoclean.validate.V4ModelIndependenceValidator;
 import org.codehaus.plexus.logging.AbstractLogEnabled;
 import org.codehaus.plexus.logging.Logger;

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/translate/PomTranslationException.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.tools.repoclean.pom;
+package org.apache.maven.tools.repoclean.translate;
 
 /* ====================================================================
  *   Copyright 2001-2004 The Apache Software Foundation.

File: sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/translate/PomV3ToV4Translator.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.tools.repoclean.pom;
+package org.apache.maven.tools.repoclean.translate;
 
 import org.apache.maven.model.v4_0_0.Build;
 import org.apache.maven.model.v4_0_0.CiManagement;
@@ -145,7 +145,7 @@ private CiManagement translateCiManagementInfo( org.apache.maven.model.v3_0_0.Bu
                 Notifier notifier = new Notifier();
 
                 notifier.setAddress( nagEmailAddress );
-                notifier.setType( "email" );
+                notifier.setType( "mail" );
 
                 ciMgmt = new CiManagement();
                 ciMgmt.addNotifier( notifier );

File: maven-mboot2/src/main/java/MBoot.java
Patch:
@@ -184,12 +184,10 @@ public void run( String[] args )
 
         String mavenRepoLocal = System.getProperty( "maven.repo.local" );
 
-        SettingsReader userModelReader = null;
+        SettingsReader userModelReader = new SettingsReader();
 
         if ( mavenRepoLocal == null )
         {
-            userModelReader = new SettingsReader();
-
             try
             {
                 String userHome = System.getProperty( "user.home" );

File: maven-core/src/main/java/org/apache/maven/settings/DefaultMavenSettingsBuilder.java
Patch:
@@ -80,6 +80,7 @@ public MavenSettings buildSettings() throws Exception
     private File getSettingsFile()
     {
         String userDir = System.getProperty( "user.home" );
+        userDir = userDir.replaceAll( "\\\\", "/" );
         
         String path = settingsPath;
         

File: maven-core/src/main/java/org/apache/maven/artifact/factory/ArtifactFactory.java
Patch:
@@ -23,6 +23,8 @@
 import java.util.List;
 import java.util.Set;
 
+// TODO: packaging is very confusing - this isn't in artifact after all
+
 public interface ArtifactFactory
 {
     static String ROLE = ArtifactFactory.class.getName();

File: maven-core/src/main/java/org/apache/maven/artifact/factory/DefaultArtifactFactory.java
Patch:
@@ -26,6 +26,8 @@
 import java.util.List;
 import java.util.Set;
 
+// TODO: packaging is very confusing - this isn't in artifact after all
+
 public class DefaultArtifactFactory
     implements ArtifactFactory
 {

File: maven-core/src/main/java/org/apache/maven/artifact/repository/ArtifactRepositoryFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 import org.apache.maven.model.Repository;
-import org.apache.maven.model.user.UserModel;
+import org.apache.maven.settings.MavenSettings;
 
 /**
  * @author jdcasey
@@ -28,6 +28,6 @@ public interface ArtifactRepositoryFactory
 
     public static final String ROLE = ArtifactRepositoryFactory.class.getName();
 
-    public ArtifactRepository createArtifactRepository( Repository modelRepository, UserModel userModel );
+    public ArtifactRepository createArtifactRepository( Repository modelRepository, MavenSettings settings );
 
 }
\ No newline at end of file

File: maven-core/src/main/java/org/apache/maven/execution/MavenExecutionRequest.java
Patch:
@@ -18,10 +18,10 @@
  */
 
 import org.apache.maven.artifact.repository.ArtifactRepository;
-import org.apache.maven.model.user.UserModel;
 import org.apache.maven.monitor.event.EventDispatcher;
 import org.apache.maven.monitor.event.EventMonitor;
 import org.apache.maven.monitor.logging.Log;
+import org.apache.maven.settings.MavenSettings;
 
 import java.util.List;
 
@@ -49,7 +49,7 @@ public interface MavenExecutionRequest
 
     EventDispatcher getEventDispatcher();
 
-    UserModel getUserModel();
+    MavenSettings getSettings();
 
     String getBaseDirectory();
 

File: maven-core/src/main/java/org/apache/maven/plugin/PluginParameterExpressionEvaluator.java
Patch:
@@ -90,9 +90,9 @@ else if ( expression.startsWith( "#project" ) )
                 throw new PluginConfigurationException( "Error evaluating plugin parameter expression: " + expression, e );
             }
         }
-        else if ( expression.startsWith( "#userModel" ) )
+        else if ( "#settings".equals( expression ) )
         {
-            value = context.getUserModel();
+            value = context.getSettings();
         }
         else if ( expression.equals( "#basedir" ) )
         {

File: maven-plugins/maven-deploy-plugin/src/main/java/org/apache/maven/plugin/deploy/DeployMojo.java
Patch:
@@ -46,11 +46,11 @@
  *  description=""
  *
  * @parameter
- *  name="userModel"
- *  type="org.apache.maven.model.user.UserModel"
+ *  name="settings"
+ *  type="org.apache.maven.settings.MavenSettings"
  *  required="true"
  *  validator=""
- *  expression="#userModel"
+ *  expression="#settings"
  *  description=""
  *
  * @author <a href="mailto:evenisse@apache.org">Emmanuel Venisse</a>

File: maven-artifact/src/main/java/org/apache/maven/artifact/handler/PluginHandler.java
Patch:
@@ -30,6 +30,6 @@ public String additionalPlugin()
 
     public String directory()
     {
-        return "plugins";
+        return "maven-plugins";
     }
 }

File: maven-artifact/src/test/java/org/apache/maven/artifact/resolver/ArtifactResolverTest.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.ArtifactComponentTestCase;
-import org.apache.maven.artifact.DefaultArtifact;
 import org.apache.maven.artifact.metadata.ArtifactMetadataSource;
 import org.apache.maven.artifact.repository.ArtifactRepository;
 

File: maven-core/src/test/java/org/apache/maven/plugin/PluginParameterExpressionEvaluatorTest.java
Patch:
@@ -28,7 +28,7 @@ protected void setUp() throws Exception
     {
         super.setUp();
 
-        File f = getTestFile( "src/test/resources/pom.xml" );
+        File f = getFileForClasspathResource( "pom.xml" );
 
         project = getProject( f );
     }

File: maven-core/src/test/java/org/apache/maven/project/canonical/CanonicalProjectBuilderTest.java
Patch:
@@ -35,7 +35,7 @@ public class CanonicalProjectBuilderTest
     public void testProjectBuilder()
         throws Exception
     {
-        File f = getTestFile( "src/test/resources/canonical-pom.xml" );
+        File f = getFileForClasspathResource( "canonical-pom.xml" );
 
         MavenProject project = getProject( f );
 

File: maven-core/src/test/java/org/apache/maven/util/introspection/ReflectionValueExtractorTest.java
Patch:
@@ -42,7 +42,7 @@ protected void setUp()
 
         builder = (MavenProjectBuilder) lookup( MavenProjectBuilder.ROLE );
 
-        File f = getTestFile( "src/test/resources/pom.xml" );
+        File f = getFileForClasspathResource( "pom.xml" );
 
         project = getProject( f );
     }

File: maven-plugin-tools/maven-plugin-tools-marmalade/src/test/java/org/apache/maven/tools/plugin/extractor/marmalade/MarmaladeMojoDescriptorExtractorTest.java
Patch:
@@ -45,6 +45,7 @@ public void testShouldFindOneMojo()
 
         project.setFile( new File( basedir, "pom.xml" ) );
 
+        System.out.println("Basedir: " + basedir);
         project.addScriptSourceRoot( basedir.getPath() );
 
         MarmaladeMojoDescriptorExtractor extractor = (MarmaladeMojoDescriptorExtractor) lookup(

File: maven-plugins/maven-surefire-plugin/src/main/java/org/apache/maven/test/SurefirePlugin.java
Patch:
@@ -103,6 +103,9 @@ public void execute( PluginExecutionRequest request, PluginExecutionResponse res
 
         SurefireBooter surefireBooter = new SurefireBooter();
 
+        System.out.println("Setting reports dir: " + reportsDirectory);
+        System.out.flush();
+        
         surefireBooter.setReportsDirectory( reportsDirectory );
 
         // ----------------------------------------------------------------------

File: maven-core/src/main/java/org/apache/maven/project/path/PathTranslator.java
Patch:
@@ -30,4 +30,6 @@ public interface PathTranslator
     static final String ROLE = PathTranslator.class.getName();
 
     void alignToBaseDirectory( Model model, File projectFile );
+
+    String alignToBaseDirectory( String path, File basedir );
 }

File: maven-core/src/main/java/org/apache/maven/execution/MavenInitializingExecutionRequest.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.maven.model.user.UserModel;
 import org.apache.maven.monitor.event.EventDispatcher;
 
+import java.util.Collections;
 import java.util.List;
 
 /**
@@ -39,6 +40,6 @@ public MavenInitializingExecutionRequest( ArtifactRepository localRepository, Us
 
     public List getProjectFiles()
     {
-        return null;
+        return Collections.EMPTY_LIST;
     }
 }

File: maven-core/src/main/java/org/apache/maven/project/injection/DefaultModelDefaultsInjector.java
Patch:
@@ -42,7 +42,7 @@ public void injectDefaults( Model model )
         injectDependencyDefaults( model.getDependencies(), model.getDependencyManagement() );
         if ( model.getBuild() != null )
         {
-            injectPluginDefaults( model.getBuild().getPlugins(), model.getPluginManagement() );
+            injectPluginDefaults( model.getBuild().getPlugins(), model.getBuild().getPluginManagement() );
         }
     }
 

File: sandbox/pom-pre-alpha-converter/src/main/java/org/apache/maven/tools/converter/Main.java
Patch:
@@ -431,7 +431,7 @@ private static org.apache.maven.model.CiManagement convertCiManagement( CiManage
 
         org.apache.maven.model.CiManagement newCiManagement = new org.apache.maven.model.CiManagement();
 
-        newCiManagement.setSystem( ciManagement.getNagEmailAddress() );
+        newCiManagement.setSystem( ciManagement.getSystem() );
         newCiManagement.setUrl( ciManagement.getUrl() );
         if ( ciManagement.getNagEmailAddress() != null )
         {

File: maven-plugins/maven-compiler-plugin/src/main/java/org/apache/maven/plugin/CompilerMojo.java
Patch:
@@ -64,7 +64,7 @@ public class CompilerMojo
 {
     private Compiler compiler = new JavacCompiler();
 
-    private boolean debug = true;
+    private boolean debug = false;
 
     public void execute( PluginExecutionRequest request, PluginExecutionResponse response )
         throws Exception
@@ -126,7 +126,7 @@ public void execute( PluginExecutionRequest request, PluginExecutionResponse res
                     message = "Warning! not present in repository!";
                 }
 
-                request.getLog().info( "classpathElements[ " + i + " ] = " + classpathElement + ": " + message );
+                request.getLog().debug( "classpathElements[ " + i + " ] = " + classpathElement + ": " + message );
             }
         }
 

File: maven-core/src/main/java/org/apache/maven/cli/MavenCli.java
Patch:
@@ -345,7 +345,7 @@ protected static ArtifactRepository getLocalRepository() throws Exception
 
         if ( localRepository == null )
         {
-            String userConfigurationDirectory = System.getProperty( "user.home" );
+            String userConfigurationDirectory = System.getProperty( "user.home" ) + "/.m2";
             localRepository = new File( userConfigurationDirectory, MavenConstants.MAVEN_REPOSITORY ).getAbsolutePath();
         }
 

File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java
Patch:
@@ -96,7 +96,7 @@ public MavenExecutionResponse execute( List tasks, MavenSession session )
                 }
                 if ( handler.additionalPlugin() != null )
                 {
-                    processPluginPhases( "maven", handler.additionalPlugin(), session );
+                    processPluginPhases( "maven", "maven-" + handler.additionalPlugin() + "-plugin", session );
                 }
             }
 

File: maven-core-it/it0011/src/main/java/org/apache/maven/it0011/PersonFinder.java
Patch:
@@ -1,8 +1,6 @@
 package org.apache.maven.it0011;
 
-import org.codehaus.classworlds.ClassRealm;
-
 public class PersonFinder
 {
-    private ClassRealm classRealm;
+    org.apache.maven.plugin.Plugin plugin;
 }

File: maven-artifact/src/main/java/org/apache/maven/artifact/DefaultArtifact.java
Patch:
@@ -57,7 +57,8 @@ public DefaultArtifact( String groupId, String artifactId, String version, Strin
     /** @todo this should be replaced by type handler */
     public DefaultArtifact( String groupId, String artifactId, String version, String type, String extension )
     {
-        this( groupId, artifactId, version, SCOPE_RUNTIME, type, extension );
+        // TODO: default should be runtime, except in currently building POM where it is compile.
+        this( groupId, artifactId, version, SCOPE_COMPILE, type, extension );
     }
 
     public DefaultArtifact( String groupId, String artifactId, String version, String type )

File: maven-plugins/maven-compiler-plugin/src/main/java/org/apache/maven/plugin/CompilerMojo.java
Patch:
@@ -108,6 +108,7 @@ public void execute( PluginExecutionRequest request, PluginExecutionResponse res
 
         List messages = compiler.compile( compilerConfiguration );
 
+        // TODO: doesn't appear to be called
         if ( debug )
         {
             for ( Iterator i = classpathElements.iterator(); i.hasNext(); )

File: maven-mboot2/src/main/java/MBoot.java
Patch:
@@ -97,7 +97,8 @@ public class MBoot
         "maven-plugins/maven-plugin-plugin",
         "maven-plugins/maven-pom-plugin",
         "maven-plugins/maven-resources-plugin",
-        "maven-plugins/maven-surefire-plugin" };
+        "maven-plugins/maven-surefire-plugin",
+        "maven-plugins/maven-war-plugin" };
 
     // ----------------------------------------------------------------------
     // Standard locations for resources in Maven projects.

File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Patch:
@@ -373,7 +373,7 @@ public static Map createParameters( MojoDescriptor goal, MavenSession session )
                 {
                     if ( parameter.getDefaultValue() != null )
                     {
-                        value = parameter.getDefaultValue();
+                        value = PluginParameterExpressionEvaluator.evaluate( parameter.getDefaultValue(), session );
                     }
                 }
 

File: maven-core-it/it0015/src/main/java/org/apache/maven/it0015/tags/WriteFileTag.java
Patch:
@@ -28,6 +28,9 @@ protected void doExecute( MarmaladeExecutionContext context ) throws MarmaladeEx
         String content = (String) getBody(context, String.class);
         String filename = (String) requireTagAttribute(FILE_ATTR, String.class, context);
         
+        System.out.println("Attempting to write to file: \'" + filename + "\' contents:");
+        System.out.println(content);
+        
         File file = new File(filename);
         File dir = file.getParentFile();
         if(dir != null && !dir.exists())

File: maven-artifact/src/main/java/org/apache/maven/artifact/handler/TestHandler.java
Patch:
@@ -21,6 +21,7 @@
 import java.io.File;
 
 /**
+ * @todo [BP] should be removed and replaced with scope if other design is approved
  * @author <a href="mailto:jason@maven.org">Jason van Zyl</a>
  * @version $Id$
  */

File: maven-script/maven-script-marmalade/src/main/java/org/apache/maven/script/marmalade/tags/MetadataTag.java
Patch:
@@ -112,6 +112,8 @@ private MojoDescriptor buildDescriptor( MarmaladeExecutionContext context ) thro
             }
             
             String implementationPath = getTagInfo().getSourceFile().substring( basePath.length() );
+            
+            implementationPath = implementationPath.replace('\\', '/');
 
             descriptor.setImplementation( implementationPath );
         }

File: maven-mboot2/src/main/java/MBoot.java
Patch:
@@ -80,8 +80,8 @@ public class MBoot
         "maven-model",
         "maven-plugin",
         "maven-artifact",
-        "maven-core",
         "maven-script/maven-script-marmalade",
+        "maven-core",
         "maven-plugin-tools/maven-plugin-tools-api",
         "maven-plugin-tools/maven-plugin-tools-java",
         "maven-plugin-tools/maven-plugin-tools-pluggy",

File: maven-core-it/it0013/src/main/java/org/apache/maven/plugin/coreit/CoreIt0013Mojo.java
Patch:
@@ -36,7 +36,7 @@
  *  expression="#project.build.directory"
  *  description=""
  */
-public class CoreItMojo
+public class CoreIt0013Mojo
     extends AbstractPlugin
 {
     private static final int DELETE_RETRY_SLEEP_MILLIS = 10;

File: maven-core/src/main/java/org/apache/maven/project/MavenProject.java
Patch:
@@ -17,6 +17,7 @@
  * ====================================================================
  */
 
+import org.apache.maven.artifact.Artifact;
 import org.apache.maven.model.Build;
 import org.apache.maven.model.CiManagement;
 import org.apache.maven.model.Contributor;
@@ -33,6 +34,7 @@
 
 import java.io.File;
 import java.util.ArrayList;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
 
@@ -201,7 +203,7 @@ public List getTestCompileSourceRootsList()
         return list;
     }
 
-/* TODO: remove - should be using a type handler
+    /* TODO: remove - should be using a type handler - is being used by introspection in plugins. */
     public String[] getClasspathElements()
     {
         int size = getArtifacts().size();
@@ -237,7 +239,6 @@ public boolean isAddedToClasspath( Artifact artifact )
         return false;
     }
 
-*/
     // ----------------------------------------------------------------------
     // Delegate to the model
     // ----------------------------------------------------------------------

File: maven-core/src/main/java/org/apache/maven/project/injection/ProjectDefaultsInjector.java
Patch:
@@ -16,7 +16,9 @@
  * limitations under the License.
  */
 
-import org.apache.maven.project.MavenProject; /**
+import org.apache.maven.project.MavenProject;
+
+/**
  * @author jdcasey Created on Feb 1, 2005
  */
 public interface ProjectDefaultsInjector

File: maven-core/src/main/java/org/apache/maven/execution/AbstractMavenExecutionRequest.java
Patch:
@@ -32,7 +32,7 @@
 public class AbstractMavenExecutionRequest
 implements MavenExecutionRequest
 {
-    // @todo [BP] is this required? This hands off to MavenSession, but could be passed through the handler.handle function (+ createSession) 
+    /** @todo [BP] is this required? This hands off to MavenSession, but could be passed through the handler.handle function (+ createSession). */
     protected ArtifactRepository localRepository;
     protected final Properties parameters;
     protected List goals;

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectDefaultsInjector.java
Patch:
@@ -9,7 +9,6 @@
 
 import org.apache.maven.model.Dependency;
 import org.apache.maven.model.DependencyManagement;
-import org.codehaus.plexus.util.StringUtils;
 
 /**
  * @author jdcasey Created on Feb 1, 2005

File: maven-core/src/main/java/org/apache/maven/project/ProjectDefaultsInjector.java
Patch:
@@ -2,9 +2,7 @@
 package org.apache.maven.project;
 
 /**
- * @author jdcasey
- *
- * Created on Feb 1, 2005
+ * @author jdcasey Created on Feb 1, 2005
  */
 public interface ProjectDefaultsInjector
 {

File: maven-core/src/main/java/org/apache/maven/project/MavenProject.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.maven.model.Build;
 import org.apache.maven.model.CiManagement;
 import org.apache.maven.model.Contributor;
+import org.apache.maven.model.DependencyManagement;
 import org.apache.maven.model.Developer;
 import org.apache.maven.model.DistributionManagement;
 import org.apache.maven.model.IssueManagement;
@@ -119,9 +120,9 @@ public List getDependencies()
         return model.getDependencies();
     }
     
-    public List getDependencyDefaults()
+    public DependencyManagement getDependencyManagement()
     {
-        return model.getDependencyDefaults();
+        return model.getDependencyManagement();
     }
 
     // ----------------------------------------------------------------------

File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectDefaultsInjector.java
Patch:
@@ -72,7 +72,7 @@ private void mergeWithDefaults( Dependency dep, DependencyDefault depdef )
         
         Properties depProps = dep.getProperties();
         Properties depdefProps = depdef.getProperties();
-        if((depProps == null || depProps.isEmpty()) && depdefProps != null)
+        if(depProps == null && depdefProps != null)
         {
             dep.setProperties(depdefProps);
         }

File: maven-artifact/src/main/java/org/apache/maven/artifact/resolver/DefaultArtifactResolver.java
Patch:
@@ -231,7 +231,7 @@ protected ArtifactResolutionResult collect( Set artifacts,
                     }
                     catch ( ArtifactMetadataRetrievalException e )
                     {
-                        throw new TransitiveArtifactResolutionException( "Error retrieving metadata: ", e );
+                        throw new TransitiveArtifactResolutionException( "Error retrieving metadata [" + newArtifact + "] : ", e );
                     }
 
                     // the pom for given dependency exisit we will add it to the queue

File: maven-archetype/maven-archetype-core/src/main/java/org/apache/maven/archetype/descriptor/ArchetypeDescriptorBuilder.java
Patch:
@@ -52,7 +52,7 @@ public ArchetypeDescriptor build( Reader reader )
 
         if ( resources != null )
         {
-            Xpp3Dom[] resourceList = resources.getChildren( "source" );
+            Xpp3Dom[] resourceList = resources.getChildren( "resource" );
 
             for ( int i = 0; i < resourceList.length; i++ )
             {
@@ -72,11 +72,11 @@ public ArchetypeDescriptor build( Reader reader )
             }
         }
 
-        Xpp3Dom testResources = dom.getChild( "sources" );
+        Xpp3Dom testResources = dom.getChild( "testResources" );
 
         if ( testResources != null )
         {
-            Xpp3Dom[] testResourceList = sources.getChildren( "source" );
+            Xpp3Dom[] testResourceList = testResources.getChildren( "resource" );
 
             for ( int i = 0; i < testResourceList.length; i++ )
             {

File: maven-plugins/maven-plugin-plugin/src/main/java/org/apache/maven/plugin/plugin/BeanGeneratorMojo.java
Patch:
@@ -26,7 +26,7 @@
  *  type="String"
  *  required="true"
  *  validator=""
- *  expression="#project.getFile().getPath()"
+ *  expression="#project.file.path"
  *  description=""
  *
  * @author <a href="mailto:jason@maven.org">Jason van Zyl</a>

File: maven-plugins/maven-plugin-plugin/src/main/java/org/apache/maven/plugin/plugin/DescriptorGenerator.java
Patch:
@@ -26,7 +26,7 @@
  *  type="String"
  *  required="true"
  *  validator=""
- *  expression="#project.getFile().getPath()"
+ *  expression="#project.file.path"
  *  description=""
  *
  * @author <a href="mailto:jason@maven.org">Jason van Zyl</a>

File: maven-plugins/maven-plugin-plugin/src/main/java/org/apache/maven/plugin/plugin/JellyGeneratorMojo.java
Patch:
@@ -26,7 +26,7 @@
  *  type="String"
  *  required="true"
  *  validator=""
- *  expression="#project.getFile().getPath()"
+ *  expression="#project.file.path"
  *  description="x"
  *
  * @author <a href="mailto:jason@maven.org">Jason van Zyl</a>

File: maven-artifact/src/main/java/org/apache/maven/artifact/AbstractArtifactComponent.java
Patch:
@@ -38,11 +38,13 @@ protected ArtifactHandler getArtifactHandler( String type )
     }
 
     protected String path( Artifact artifact )
+        throws ArtifactHandlerNotFoundException
     {
         return artifactHandlerManager.path( artifact );
     }
 
     protected void setLocalRepositoryPath( Artifact artifact, ArtifactRepository localRepository )
+        throws ArtifactHandlerNotFoundException
     {
         artifact.setPath( artifactHandlerManager.localRepositoryPath( artifact, localRepository ) );
     }

File: maven-core/src/main/java/org/apache/maven/lifecycle/goal/phase/DependencyResolutionPhase.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.maven.lifecycle.goal.AbstractMavenGoalPhase;
 import org.apache.maven.lifecycle.goal.GoalExecutionException;
 import org.apache.maven.lifecycle.goal.MavenGoalExecutionContext;
+import org.apache.maven.plugin.descriptor.MojoDescriptor;
 import org.apache.maven.project.MavenProject;
 
 import java.util.Iterator;

File: maven-core/src/main/java/org/apache/maven/lifecycle/session/MavenSession.java
Patch:
@@ -160,7 +160,7 @@ public List getPostGoals( String goal )
 
     private void initGoalDecoratorMappings()
     {
-        List allPreGoals = project.getModel().getPreGoals();
+        List allPreGoals = project.getPreGoals();
         for ( Iterator it = allPreGoals.iterator(); it.hasNext(); )
         {
             PreGoal preGoal = (PreGoal) it.next();
@@ -175,7 +175,7 @@ private void initGoalDecoratorMappings()
             preGoalList.add( preGoal.getAttain() );
         }
 
-        List allPostGoals = project.getModel().getPostGoals();
+        List allPostGoals = project.getPostGoals();
         for ( Iterator it = allPostGoals.iterator(); it.hasNext(); )
         {
             PostGoal postGoal = (PostGoal) it.next();

File: maven-core/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -148,7 +148,7 @@ public MavenProject build( File projectDescriptor, boolean resolveDependencies )
                                                     superModel.getRepositories() );
 
             Model previous = superModel;
-
+            
             for ( Iterator i = lineage.iterator(); i.hasNext(); )
             {
                 Model current = ( (MavenProject) i.next() ).getModel();

File: maven-core/src/main/java/org/apache/maven/Maven.java
Patch:
@@ -32,6 +32,8 @@
 public interface Maven
 {
     static String ROLE = Maven.class.getName();
+    
+    static String DEFAULT_MODEL_VERSION = "4.0.0";
 
     // ----------------------------------------------------------------------
     // Execution

File: maven-core-it-verifier/src/main/java/org/apache/maven/it/Verifier.java
Patch:
@@ -189,11 +189,11 @@ private static String retrieveLocalRepo()
         {
             try
             {
-                // parse ~/.m2/pom.xml for it...
+                // parse ~/.m2/override.xml for it...
                 DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                 DocumentBuilder builder = factory.newDocumentBuilder();
     
-                File pom = new File( System.getProperty( "user.home" ), ".m2/pom.xml" );
+                File pom = new File( System.getProperty( "user.home" ), ".m2/override.xml" );
                 Document dom = builder.parse( pom );
     
                 repo = XPathAPI.selectSingleNode( dom, "/project/local/repository/text()" ).getNodeValue();

File: maven-core/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -168,6 +168,7 @@ public MavenProject build( File projectDescriptor, boolean resolveDependencies )
                 project = new MavenProject( userModel );
                 project.setFile( parent.getFile() );
                 project.setParent( parent );
+                project.setType( previous.getType() );
             }
 
             project.setLocalRepository( localRepository );

File: maven-core/src/main/java/org/apache/maven/DefaultMaven.java
Patch:
@@ -94,7 +94,7 @@ public ExecutionResponse execute( MavenProject project, List goals ) throws Goal
 
         try
         {
-            lifecycleManager.execute( session );
+            response = lifecycleManager.execute( session );
         }
         catch ( Exception e )
         {

File: maven-core/src/main/java/org/apache/maven/lifecycle/session/AbstractMavenSessionPhase.java
Patch:
@@ -16,6 +16,8 @@
  * limitations under the License.
  */
 
+import org.apache.maven.ExecutionResponse;
+
 import org.codehaus.plexus.logging.AbstractLogEnabled;
 
 /**
@@ -26,6 +28,6 @@ public abstract class AbstractMavenSessionPhase
     extends AbstractLogEnabled
     implements MavenSessionPhase
 {
-    public abstract void execute( MavenSession context )
+    public abstract ExecutionResponse execute( MavenSession context )
         throws Exception;
 }

File: maven-core/src/main/java/org/apache/maven/lifecycle/session/MavenSessionPhase.java
Patch:
@@ -16,6 +16,8 @@
  * limitations under the License.
  */
 
+import org.apache.maven.ExecutionResponse;
+
 import org.codehaus.plexus.logging.Logger;
 
 /**
@@ -26,7 +28,7 @@ public interface MavenSessionPhase
 {
     String ROLE = MavenSessionPhase.class.getName();
 
-    void execute( MavenSession context )
+    ExecutionResponse execute( MavenSession context )
         throws Exception;
 
     void enableLogging( Logger logger );

File: maven-core/src/main/java/org/apache/maven/lifecycle/session/MavenSessionPhaseManager.java
Patch:
@@ -16,6 +16,8 @@
  * limitations under the License.
  */
 
+import org.apache.maven.ExecutionResponse;
+
 import java.util.List;
 
 /**
@@ -26,7 +28,7 @@ public interface MavenSessionPhaseManager
 {
     String ROLE = MavenSessionPhaseManager.class.getName();
 
-    void execute( MavenSession session )
+    ExecutionResponse execute( MavenSession session )
         throws Exception;
 
     List getLifecyclePhases();

File: maven-core/src/main/java/org/apache/maven/lifecycle/session/phase/GoalExecutionPhase.java
Patch:
@@ -31,7 +31,7 @@
 public class GoalExecutionPhase
     extends AbstractMavenSessionPhase
 {
-    public void execute( MavenSession session ) throws Exception
+    public ExecutionResponse execute( MavenSession session ) throws Exception
     {
         MavenGoalPhaseManager lifecycleManager = (MavenGoalPhaseManager) session.lookup( MavenGoalPhaseManager.ROLE );
 
@@ -56,5 +56,7 @@ public void execute( MavenSession session ) throws Exception
                 break;
             }
         }
+
+        return response;
     }
 }
\ No newline at end of file

File: maven-artifact/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java
Patch:
@@ -199,7 +199,7 @@ public void get( Artifact artifact, File destination, Set repositories )
             }
             catch ( TransferFailedException e )
             {
-                getLogger().warn( "Failure getting artifact from repository '" + repository + "'" + e );
+                getLogger().warn( "Failure getting artifact from repository '" + repository + "': " + e );
                 getLogger().debug( "Stack trace", e );
                 continue;
             }

File: maven-core/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
Patch:
@@ -137,7 +137,7 @@ public MavenProject build( File projectDescriptor, ArtifactRepository localRepos
                 previous = current;
             }
 
-            if ( userModelFile != null )
+            if ( userModel != null )
             {
                 modelInheritanceAssembler.assembleModelInheritance( userModel, previous );
 

File: maven-plugins/maven-jar-plugin/src/main/java/org/apache/maven/plugin/jar/JarInstallMojo.java
Patch:
@@ -75,7 +75,7 @@ public void execute( PluginExecutionRequest request, PluginExecutionResponse res
         Artifact pomArtifact = new DefaultArtifact( project.getGroupId(),
                                                     project.getArtifactId(),
                                                     project.getVersion(),
-                                                    project.getType() );
+                                                    "pom" );
 
         artifactInstaller.install( project.getFile(), pomArtifact, localRepository );
 

File: maven-mboot2/src/main/java/MBoot.java
Patch:
@@ -147,7 +147,7 @@ public void run( String[] args )
         {
             System.out.println( "You must have a ~/maven.properties file and must contain the following entries:" );
 
-            System.out.println( "maven.home = /path/to/m2/installtion" );
+            System.out.println( "maven.home = /path/to/m2/installation" );
 
             System.out.println( "maven.repo.local = /path/to/m2/repository" );
 

File: maven-core/src/main/java/org/apache/maven/artifact/factory/DefaultArtifactFactory.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.DefaultArtifact;
+import org.apache.maven.artifact.resolver.ArtifactResolver;
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.model.Dependency;
 

File: maven-plugins/maven-compiler-plugin/src/main/java/org/apache/maven/plugin/CompilerMojo.java
Patch:
@@ -22,13 +22,15 @@
  *  validator=""
  *  expression="#project.build.sourceDirectory"
  *  description=""
+ *
  * @parameter
  *  name="outputDirectory"
  *  type="String"
  *  required="true"
  *  validator=""
  *  expression="#project.build.output"
  *  description=""
+ *
  * @parameter
  *  name="classpathElements"
  *  type="String[]"

File: maven-plugins/maven-jar-plugin/src/main/java/org/apache/maven/plugin/jar/JarDeployMojo.java
Patch:
@@ -40,20 +40,23 @@
  *  validator=""
  *  expression="#maven.final.name"
  *  description=""
+ *
  * @parameter
  *  name="outputDirectory"
  *  type="String"
  *  required="true"
  *  validator=""
  *  expression="#project.build.directory"
  *  description=""
+ *
  * @parameter
  *  name="project"
  *  type="org.apache.maven.project.MavenProject"
  *  required="true"
  *  validator=""
  *  expression="#project"
  *  description=""
+ *
  * @parameter
  *  name="deployer"
  *  type="org.apache.maven.artifact.deployer.ArtifactDeployer"

File: maven-plugins/maven-jar-plugin/src/main/java/org/apache/maven/plugin/jar/JarInstallMojo.java
Patch:
@@ -39,20 +39,23 @@
  *  validator=""
  *  expression="#maven.final.name"
  *  description=""
+ *
  * @parameter
  *  name="outputDirectory"
  *  type="String"
  *  required="true"
  *  validator=""
  *  expression="#project.build.directory"
  *  description=""
+ *
  * @parameter
  *  name="project"
  *  type="org.apache.maven.project.MavenProject"
  *  required="true"
  *  validator=""
  *  expression="#project"
  *  description=""
+ *
  * @parameter
  *  name="installer"
  *  type="org.apache.maven.artifact.installer.ArtifactInstaller"

File: maven-plugins/maven-jar-plugin/src/main/java/org/apache/maven/plugin/jar/JarMojo.java
Patch:
@@ -60,7 +60,7 @@
  *  expression="#project.build.output"
  *  description=""
  *
- * @author <a href="michal.maczka@dimatics.com">Michal Maczka</a>
+ * @author <a href="michal@codehaus">Michal Maczka</a>
  * @version $Id$
  */
 public class JarMojo

File: maven-mboot/src/main/ArtifactDownloader.java
Patch:
@@ -98,7 +98,7 @@ public void downloadDependencies( List files )
                     directory.mkdirs();
                 }
 
-                if ( destinationFile.exists() && !file.endsWith( SNAPSHOT_SIGNATURE ) )
+                if ( destinationFile.exists() && file.indexOf( SNAPSHOT_SIGNATURE ) < 0 )
                 {
                     continue;
                 }

File: maven-plugins/maven-install-plugin/src/main/java/org/apache/maven/plugin/install/InstallMojo.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.maven.plugin.clean;
+package org.apache.maven.plugin.install;
 
 /*
  * Copyright 2001-2004 The Apache Software Foundation.

File: maven-plugins/maven-plugin-plugin/src/main/java/org/apache/maven/plugin/plugin/JellyGeneratorMojo.java
Patch:
@@ -19,7 +19,7 @@
  *  type="String"
  *  required="true" 
  *  validator=""
- *  expression="#project.build.output
+ *  expression="#project.build.output"
  *  description="x"
  * @parameter
  *  name="pom"

File: maven-plugins/maven-compiler-plugin/src/main/java/org/apache/maven/plugin/TestCompilerMojo.java
Patch:
@@ -25,7 +25,7 @@
  *  type="String"
  *  required="true"
  *  validator=""
- *  expression="#project.build.directory/test-classes"
+ *  expression="#project.build.testOutput"
  *  description=""
  * @parameter
  *  name="classpathElements"
@@ -40,7 +40,6 @@
  * @todo use compile source roots and not the pom.build.sourceDirectory so that any
  *       sort of preprocessing and/or source generation can be taken into consideration.
  */
-
  public class TestCompilerMojo
     extends CompilerMojo
 {

File: maven-plugins/maven-jar-plugin/src/main/java/org/apache/maven/plugin/jar/JarMojo.java
Patch:
@@ -57,7 +57,7 @@
  *  type="String"
  *  required="true"
  *  validator=""
- *  expression="#project.build.directory/classes"
+ *  expression="#project.build.output"
  *  description=""
  *
  * @author <a href="michal.maczka@dimatics.com">Michal Maczka</a>

File: maven-plugins/maven-resources-plugin/src/main/java/org/apache/maven/plugin/resources/ResourcesMojo.java
Patch:
@@ -42,7 +42,7 @@
  *  type="String"
  *  required="true"
  *  validator=""
- *  expression="#project.build.directory/classes"
+ *  expression="#project.build.output"
  *  description=""
  * @parameter
  *  name="resources"

File: maven-plugins/maven-resources-plugin/src/main/java/org/apache/maven/plugin/resources/TestResourcesMojo.java
Patch:
@@ -17,7 +17,6 @@
  * ====================================================================
  */
 
-
 import org.apache.maven.model.Resource;
 import org.codehaus.plexus.util.FileUtils;
 
@@ -39,7 +38,7 @@
  *  type="String"
  *  required="true"
  *  validator=""
- *  expression="#project.build.directory/test-classes"
+ *  expression="#project.build.testOutput"
  *  description=""
  * @parameter
  *  name="resources"

File: maven-mboot/src/main/Bootstrapper.java
Patch:
@@ -155,7 +155,7 @@ private void writeUnitTest()
 
             writeFile( "bootstrap.tests.excludes", tests.toString() );
 
-            writeResources( unitTests.getResources(), "bootstrap.test.resources" );
+            writeResources( unitTests.getResources(), "bootstrap.tests.resources" );
         }
     }
 

File: maven-mboot/src/main/Bootstrapper.java
Patch:
@@ -67,7 +67,7 @@ public void execute( String[] args )
 
         if ( mavenRepoLocalProperty == null )
         {
-            mavenRepoLocalProperty = System.getProperty( "user.home" ) + "/maven/repository";
+            mavenRepoLocalProperty = System.getProperty( "user.home" ) + "/.maven/repository";
         }
 
         mavenRepoLocal = new File( mavenRepoLocalProperty );

