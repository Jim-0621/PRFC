File: library/src/com/nineoldandroids/view/animation/AnimatorProxy.java
Patch:
@@ -32,7 +32,8 @@ public final class AnimatorProxy extends Animation {
      */
     public static AnimatorProxy wrap(View view) {
         AnimatorProxy proxy = PROXIES.get(view);
-        if (proxy == null) {
+        // This checks if the proxy already exists and whether it still is the animation of the given view
+        if (proxy == null || proxy != view.getAnimation()) {
             proxy = new AnimatorProxy(view);
             PROXIES.put(view, proxy);
         }

File: library/src/com/nineoldandroids/view/animation/AnimatorProxy.java
Patch:
@@ -31,7 +31,8 @@ public final class AnimatorProxy extends Animation {
      */
     public static AnimatorProxy wrap(View view) {
         AnimatorProxy proxy = PROXIES.get(view);
-        if (proxy == null) {
+        // This checks if the proxy already exists and whether it still is the animation of the given view
+        if (proxy == null || proxy != view.getAnimation()) {
             proxy = new AnimatorProxy(view);
             PROXIES.put(view, proxy);
         }

File: library/src/com/nineoldandroids/view/animation/AnimatorProxy.java
Patch:
@@ -145,7 +145,7 @@ public int getScrollY() {
         return mView.getScrollY();
     }
     public void setScrollY(int value) {
-        mView.scrollTo(mView.getScrollY(), value);
+        mView.scrollTo(mView.getScrollX(), value);
     }
     public float getTranslationX() {
         return mTranslationX;

File: library/src/com/nineoldandroids/view/animation/AnimatorProxy.java
Patch:
@@ -207,7 +207,7 @@ protected void applyTransformation(float interpolatedTime, Transformation t) {
 
         final float sX = mScaleX;
         final float sY = mScaleY;
-        if ((sX != 0) || (sX != 0)) {
+        if ((sX != 0) || (sY != 0)) {
             final float deltaSX = ((sX * w) - w) / 2f;
             final float deltaSY = ((sY * h) - h) / 2f;
             m.postScale(sX, sY);

File: library/src/com/nineoldandroids/view/animation/AnimatorProxy.java
Patch:
@@ -32,7 +32,7 @@ public final class AnimatorProxy extends Animation {
     public static AnimatorProxy wrap(View view) {
         AnimatorProxy proxy = PROXIES.get(view);
         if (proxy == null) {
-            proxy = AnimatorProxy.wrap(view);
+            proxy = new AnimatorProxy(view);
             PROXIES.put(view, proxy);
         }
         return proxy;

File: sample/src/com/jakewharton/nineoldandroids/sample/pathanimation/AnimatorPath.java
Patch:
@@ -26,7 +26,7 @@
  * location (which creates a cubic Bï¿½zier curve from the previous location).
  */
 public class AnimatorPath {
-    
+
     // The points in the path
     ArrayList<PathPoint> mPoints = new ArrayList<PathPoint>();
 

File: sample/src/com/jakewharton/nineoldandroids/sample/pathanimation/PathPoint.java
Patch:
@@ -35,7 +35,7 @@ public class PathPoint {
      * The location of this PathPoint
      */
     float mX, mY;
-    
+
     /**
      * The first control point, if any, for a PathPoint of type CURVE
      */
@@ -90,7 +90,7 @@ public static PathPoint lineTo(float x, float y) {
     public static PathPoint curveTo(float c0X, float c0Y, float c1X, float c1Y, float x, float y) {
         return new PathPoint(c0X,  c0Y, c1X, c1Y, x, y);
     }
-    
+
     /**
      * Constructs and returns a PathPoint object that describes a discontinuous move to the given
      * xy location.

