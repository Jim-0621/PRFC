File: library/src/main/java/com/squareup/timessquare/CalendarPickerView.java
Patch:
@@ -44,6 +44,7 @@
  * {@link FluentInitializer} methods returned.  The currently selected date can be retrieved with
  * {@link #getSelectedDate()}.
  */
+@SuppressWarnings("unused")
 public class CalendarPickerView extends ListView {
   public enum SelectionMode {
     /**
@@ -945,6 +946,7 @@ List<List<MonthCellDescriptor>> getMonthCells(MonthDescriptor month, Calendar st
       cells.add(weekCells);
       for (int c = 0; c < 7; c++) {
         Date date = cal.getTime();
+        @SuppressWarnings("MagicConstant")
         boolean isCurrentMonth = cal.get(MONTH) == month.getMonth();
         boolean isSelected = isCurrentMonth && containsDate(selectedCals, cal);
         boolean isSelectable =
@@ -1021,6 +1023,7 @@ static boolean betweenDates(Date date, Calendar minCal, Calendar maxCal) {
         && date.before(maxCal.getTime()); // && < maxCal
   }
 
+  @SuppressWarnings("MagicConstant")
   private static boolean sameMonth(Calendar cal, MonthDescriptor month) {
     return (cal.get(MONTH) == month.getMonth() && cal.get(YEAR) == month.getYear());
   }

File: library/src/main/java/com/squareup/timessquare/CalendarPickerView.java
Patch:
@@ -791,10 +791,10 @@ public void clearHighlightedDates() {
 
   /** Hold a cell with a month-index. */
   private static class MonthCellWithMonthIndex {
-    public MonthCellDescriptor cell;
-    public int monthIndex;
+    MonthCellDescriptor cell;
+    int monthIndex;
 
-    public MonthCellWithMonthIndex(MonthCellDescriptor cell, int monthIndex) {
+    MonthCellWithMonthIndex(MonthCellDescriptor cell, int monthIndex) {
       this.cell = cell;
       this.monthIndex = monthIndex;
     }

File: library/src/main/java/com/squareup/timessquare/MonthDescriptor.java
Patch:
@@ -9,7 +9,7 @@ class MonthDescriptor {
   private final Date date;
   private String label;
 
-  public MonthDescriptor(int month, int year, Date date, String label) {
+  MonthDescriptor(int month, int year, Date date, String label) {
     this.month = month;
     this.year = year;
     this.date = date;

File: library/src/main/java/com/squareup/timessquare/CalendarPickerView.java
Patch:
@@ -1,6 +1,7 @@
 // Copyright 2012 Square, Inc.
 package com.squareup.timessquare;
 
+import android.annotation.SuppressLint;
 import android.content.Context;
 import android.content.res.Resources;
 import android.content.res.TypedArray;
@@ -304,6 +305,7 @@ public FluentInitializer withHighlightedDate(Date date) {
       return withHighlightedDates(Arrays.asList(date));
     }
 
+    @SuppressLint("SimpleDateFormat")
     public FluentInitializer setShortWeekdays(String[] newShortWeekdays) {
       DateFormatSymbols symbols = new DateFormatSymbols(locale);
       symbols.setShortWeekdays(newShortWeekdays);

File: sample/src/main/java/com/squareup/timessquare/sample/SampleTimesSquareActivity.java
Patch:
@@ -25,7 +25,7 @@
 import static android.widget.Toast.LENGTH_SHORT;
 
 public class SampleTimesSquareActivity extends Activity {
-  private static final String TAG = "SampleTimesSquareActivity";
+  private static final String TAG = "SampleTimesSquareActivi";
   private CalendarPickerView calendar;
   private AlertDialog theDialog;
   private CalendarPickerView dialogView;

File: library/src/main/java/com/squareup/timessquare/CalendarPickerView.java
Patch:
@@ -1,6 +1,7 @@
 // Copyright 2012 Square, Inc.
 package com.squareup.timessquare;
 
+import android.annotation.SuppressLint;
 import android.content.Context;
 import android.content.res.Resources;
 import android.content.res.TypedArray;
@@ -304,6 +305,7 @@ public FluentInitializer withHighlightedDate(Date date) {
       return withHighlightedDates(Arrays.asList(date));
     }
 
+    @SuppressLint("SimpleDateFormat")
     public FluentInitializer setShortWeekdays(String[] newShortWeekdays) {
       DateFormatSymbols symbols = new DateFormatSymbols(locale);
       symbols.setShortWeekdays(newShortWeekdays);

File: sample/src/main/java/com/squareup/timessquare/sample/SampleTimesSquareActivity.java
Patch:
@@ -25,7 +25,7 @@
 import static android.widget.Toast.LENGTH_SHORT;
 
 public class SampleTimesSquareActivity extends Activity {
-  private static final String TAG = "SampleTimesSquareActivity";
+  private static final String TAG = "SampleTimesSquareActivi";
   private CalendarPickerView calendar;
   private AlertDialog theDialog;
   private CalendarPickerView dialogView;

File: library/src/test/java/com/squareup/timessquare/CalendarPickerViewTest.java
Patch:
@@ -15,6 +15,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import static com.squareup.timessquare.CalendarPickerView.SelectionMode.MULTIPLE;
 import static com.squareup.timessquare.CalendarPickerView.SelectionMode.RANGE;
@@ -45,6 +46,7 @@
 import static org.fest.assertions.api.Assertions.fail;
 
 @RunWith(RobolectricTestRunner.class) //
+@Config(manifest = "src/main/AndroidManifest.xml")
 public class CalendarPickerViewTest {
 
   static {

File: library/src/com/squareup/timessquare/CalendarPickerView.java
Patch:
@@ -756,6 +756,8 @@ private MonthAdapter() {
             MonthView.create(parent, inflater, weekdayNameFormat, listener, today, dividerColor,
                 dayBackgroundResId, dayTextColorResId, titleTextColor, displayHeader,
                 headerTextColor, decorators, locale);
+      } else {
+        monthView.setDecorators(decorators);
       }
       monthView.init(months.get(position), cells.get(position), displayOnly, titleTypeface,
           dateTypeface);

File: library/src/com/squareup/timessquare/CalendarPickerView.java
Patch:
@@ -756,6 +756,8 @@ private MonthAdapter() {
             MonthView.create(parent, inflater, weekdayNameFormat, listener, today, dividerColor,
                 dayBackgroundResId, dayTextColorResId, titleTextColor, displayHeader,
                 headerTextColor, decorators, locale);
+      } else {
+        monthView.setDecorators(decorators);
       }
       monthView.init(months.get(position), cells.get(position), displayOnly, titleTypeface,
           dateTypeface);

File: library/src/com/squareup/timessquare/CalendarPickerView.java
Patch:
@@ -183,6 +183,7 @@ public FluentInitializer init(Date minDate, Date maxDate, Locale locale) {
     // Clear out any previously-selected dates/cells.
     selectedCals.clear();
     selectedCells.clear();
+    highlightedCals.clear();
     highlightedCells.clear();
 
     // Clear previous state.

File: library/src/com/squareup/timessquare/CalendarPickerView.java
Patch:
@@ -183,6 +183,7 @@ public FluentInitializer init(Date minDate, Date maxDate, Locale locale) {
     // Clear out any previously-selected dates/cells.
     selectedCals.clear();
     selectedCells.clear();
+    highlightedCals.clear();
     highlightedCells.clear();
 
     // Clear previous state.

File: library/src/com/squareup/timessquare/CalendarPickerView.java
Patch:
@@ -431,7 +431,9 @@ private void validateDate(Date date) {
     }
     if (date.before(minCal.getTime()) || date.after(maxCal.getTime())) {
       throw new IllegalArgumentException(
-          "selectedDate must be between minDate and maxDate.  " + date);
+          String.format("SelectedDate must be between minDate and maxDate."
+                  + "%nminDate: %s%nmaxDate: %s%nselectedDate: %s",
+                  minCal.getTime(), maxCal.getTime(), date));
     }
   }
 

File: library/src/com/squareup/timessquare/CalendarCellView.java
Patch:
@@ -63,6 +63,7 @@ public void setRangeState(MonthCellDescriptor.RangeState rangeState) {
 
   public void setHighlighted(boolean highlighted) {
     isHighlighted = highlighted;
+    refreshDrawableState();
   }
 
   @Override protected int[] onCreateDrawableState(int extraSpace) {

File: library/src/com/squareup/timessquare/CalendarCellView.java
Patch:
@@ -63,6 +63,7 @@ public void setRangeState(MonthCellDescriptor.RangeState rangeState) {
 
   public void setHighlighted(boolean highlighted) {
     isHighlighted = highlighted;
+    refreshDrawableState();
   }
 
   @Override protected int[] onCreateDrawableState(int extraSpace) {

File: library/test/com/squareup/timessquare/CalendarPickerViewTest.java
Patch:
@@ -414,6 +414,7 @@ public void testOnDateConfiguredListener() {
         .inMode(SINGLE) //
         .withSelectedDate(today.getTime());
     Calendar jumpToCal = Calendar.getInstance(locale);
+    jumpToCal.setTime(today.getTime());
     jumpToCal.add(MONTH, 2);
     jumpToCal.set(DAY_OF_WEEK, 1);
     boolean wasAbleToSetDate = view.selectDate(jumpToCal.getTime());

File: library/src/com/squareup/timessquare/MonthView.java
Patch:
@@ -50,6 +50,7 @@ public void init(MonthDescriptor month, List<List<MonthCellDescriptor>> cells) {
     title.setText(month.getLabel());
 
     final int numRows = cells.size();
+    grid.setNumRows(numRows);
     for (int i = 0; i < 6; i++) {
       CalendarRowView weekRow = (CalendarRowView) grid.getChildAt(i + 1);
       weekRow.setListener(listener);

File: library/src/com/squareup/timessquare/MonthView.java
Patch:
@@ -50,6 +50,7 @@ public void init(MonthDescriptor month, List<List<MonthCellDescriptor>> cells) {
     title.setText(month.getLabel());
 
     final int numRows = cells.size();
+    grid.setNumRows(numRows);
     for (int i = 0; i < 6; i++) {
       CalendarRowView weekRow = (CalendarRowView) grid.getChildAt(i + 1);
       weekRow.setListener(listener);

File: library/src/com/squareup/timessquare/MonthView.java
Patch:
@@ -67,7 +67,7 @@ public void init(MonthDescriptor month, List<List<MonthCellDescriptor>> cells) {
           cellView.setSelected(cell.isSelected());
           cellView.setCurrentMonth(cell.isCurrentMonth());
           cellView.setToday(cell.isToday());
-          cellView.setPeriodState(cell.getPeriodState());
+          cellView.setRangeState(cell.getRangeState());
           cellView.setTag(cell);
         }
       } else {

File: library/src/com/squareup/timessquare/MonthView.java
Patch:
@@ -12,8 +12,8 @@
 import java.util.List;
 
 public class MonthView extends LinearLayout {
-  private TextView title;
-  private CalendarGridView grid;
+  TextView title;
+  CalendarGridView grid;
   private Listener listener;
 
   public static MonthView create(ViewGroup parent, LayoutInflater inflater,

File: library/src/com/squareup/timessquare/MonthView.java
Patch:
@@ -12,8 +12,8 @@
 import java.util.List;
 
 public class MonthView extends LinearLayout {
-  private TextView title;
-  private CalendarGridView grid;
+  TextView title;
+  CalendarGridView grid;
   private Listener listener;
 
   public static MonthView create(ViewGroup parent, LayoutInflater inflater,

File: library/src/com/squareup/timessquare/MonthView.java
Patch:
@@ -11,6 +11,8 @@
 import java.util.Calendar;
 import java.util.List;
 
+import com.squareup.timessquare.MonthCellDescriptor.PeriodState;
+
 public class MonthView extends LinearLayout {
   private TextView title;
   private CalendarGridView grid;
@@ -67,9 +69,7 @@ public void init(MonthDescriptor month, List<List<MonthCellDescriptor>> cells) {
           cellView.setSelected(cell.isSelected());
           cellView.setCurrentMonth(cell.isCurrentMonth());
           cellView.setToday(cell.isToday());
-          cellView.setPeriodFirst(cell.isPeriodFirst());
-          cellView.setPeriodMiddle(cell.isPeriodMiddle());
-          cellView.setPeriodLast(cell.isPeriodLast());
+          cellView.setPeriodState(cell.getPeriodState());
           cellView.setTag(cell);
         }
       } else {

File: library/src/com/squareup/timessquare/CalendarCellView.java
Patch:
@@ -77,7 +77,7 @@ public void setPeriodLast(boolean isPeriodLast) {
   }
 
   @Override protected int[] onCreateDrawableState(int extraSpace) {
-    final int[] drawableState = super.onCreateDrawableState(extraSpace + 4);
+    final int[] drawableState = super.onCreateDrawableState(extraSpace + 6);
 
     if (isSelectable) {
       mergeDrawableStates(drawableState, STATE_SELECTABLE);

File: library/src/com/squareup/timessquare/CalendarPickerView.java
Patch:
@@ -73,7 +73,6 @@ public CalendarPickerView(Context context, AttributeSet attrs) {
     adapter = new MonthAdapter();
     setDivider(null);
     setDividerHeight(0);
-    setAdapter(adapter);
     final int bg = getResources().getColor(R.color.calendar_bg);
     setBackgroundColor(bg);
     setCacheColorHint(bg);
@@ -140,6 +139,9 @@ public void init(SelectionMode selectionMode, List<Date> selectedDates, Date min
   }
 
   private void initialize(List<Date> selectedDates, Date minDate, Date maxDate) {
+    if (getAdapter() == null) {
+        setAdapter(adapter);
+    }
     if (selectionMode == SelectionMode.SINGLE && selectedDates.size() > 1) {
       throw new IllegalArgumentException("SINGLE mode cannot be used with multiple selectedDates");
     }

File: library/src/com/squareup/timessquare/CalendarPickerView.java
Patch:
@@ -73,7 +73,6 @@ public CalendarPickerView(Context context, AttributeSet attrs) {
     adapter = new MonthAdapter();
     setDivider(null);
     setDividerHeight(0);
-    setAdapter(adapter);
     final int bg = getResources().getColor(R.color.calendar_bg);
     setBackgroundColor(bg);
     setCacheColorHint(bg);
@@ -140,6 +139,9 @@ public void init(SelectionMode selectionMode, List<Date> selectedDates, Date min
   }
 
   private void initialize(List<Date> selectedDates, Date minDate, Date maxDate) {
+    if (getAdapter() == null) {
+        setAdapter(adapter);
+    }
     if (selectionMode == SelectionMode.SINGLE && selectedDates.size() > 1) {
       throw new IllegalArgumentException("SINGLE mode cannot be used with multiple selectedDates");
     }

File: library/src/com/squareup/timessquare/CalendarPickerView.java
Patch:
@@ -43,7 +43,7 @@ public class CalendarPickerView extends ListView {
   final List<List<List<MonthCellDescriptor>>> cells =
       new ArrayList<List<List<MonthCellDescriptor>>>();
 
-  private final List<MonthCellDescriptor> selectedCells = new ArrayList<MonthCellDescriptor>();
+  final List<MonthCellDescriptor> selectedCells = new ArrayList<MonthCellDescriptor>();
   final Calendar today = Calendar.getInstance();
   final List<Calendar> selectedCals = new ArrayList<Calendar>();
   private final Calendar minCal = Calendar.getInstance();
@@ -367,7 +367,7 @@ private MonthCellWithMonthIndex getMonthCellWithIndexByDate(Date date) {
       for (List<MonthCellDescriptor> weekCells : monthCells) {
         for (MonthCellDescriptor actCell : weekCells) {
           actCal.setTime(actCell.getDate());
-          if (sameDate(actCal, searchCal)) {
+          if (sameDate(actCal, searchCal) && actCell.isSelectable()) {
             return new MonthCellWithMonthIndex(actCell, index);
           }
         }

File: library/test/com/squareup/timessquare/CalendarPickerViewTest.java
Patch:
@@ -302,8 +302,7 @@ private static void assertCell(List<List<MonthCellDescriptor>> cells, int row, i
     assertThat(cell.isSelectable()).isEqualTo(expectedSelectable);
   }
 
-  private List<List<MonthCellDescriptor>> getCells(int month, int year,
-      Calendar selectedDate) {
+  private List<List<MonthCellDescriptor>> getCells(int month, int year, Calendar selectedDate) {
     view.selectedCals.clear();
     view.selectedCals.add(selectedDate);
     Calendar cal = Calendar.getInstance();

File: library/test/com/squareup/timessquare/CalendarPickerViewTest.java
Patch:
@@ -302,8 +302,7 @@ private static void assertCell(List<List<MonthCellDescriptor>> cells, int row, i
     assertThat(cell.isSelectable()).isEqualTo(expectedSelectable);
   }
 
-  private List<List<MonthCellDescriptor>> getCells(int month, int year,
-      Calendar selectedDate) {
+  private List<List<MonthCellDescriptor>> getCells(int month, int year, Calendar selectedDate) {
     view.selectedCals.clear();
     view.selectedCals.add(selectedDate);
     Calendar cal = Calendar.getInstance();

File: library/src/com/squareup/timessquare/CalendarPickerView.java
Patch:
@@ -24,7 +24,6 @@
 import static java.util.Calendar.MINUTE;
 import static java.util.Calendar.MONTH;
 import static java.util.Calendar.SECOND;
-import static java.util.Calendar.SUNDAY;
 import static java.util.Calendar.YEAR;
 
 /**
@@ -70,7 +69,8 @@ public CalendarPickerView(Context context, AttributeSet attrs) {
    * All date parameters must be non-null and their {@link java.util.Date#getTime()} must not
    * return 0.  Time of day will be ignored.  For instance, if you pass in {@code minDate} as
    * 11/16/2012 5:15pm and {@code maxDate} as 11/16/2013 4:30am, 11/16/2012 will be the first
-   * selectable date and 11/15/2013 will be the last selectable date ({@code maxDate} is exclusive).
+   * selectable date and 11/15/2013 will be the last selectable date ({@code maxDate} is
+   * exclusive).
    *
    * @param selectedDate Initially selected date.  Must be between {@code minDate} and {@code
    * maxDate}.

File: library/src/com/squareup/timessquare/MonthView.java
Patch:
@@ -27,8 +27,8 @@ public static MonthView create(ViewGroup parent, LayoutInflater inflater,
     final CalendarRowView headerRow = (CalendarRowView) view.grid.getChildAt(0);
     for (int offset = 0; offset < 7; offset++) {
       today.set(Calendar.DAY_OF_WEEK, firstDayOfWeek + offset);
-	    final TextView textView = (TextView) headerRow.getChildAt(offset);
-	    textView.setText(weekdayNameFormat.format(today.getTime()));
+      final TextView textView = (TextView) headerRow.getChildAt(offset);
+      textView.setText(weekdayNameFormat.format(today.getTime()));
     }
     today.set(Calendar.DAY_OF_WEEK, originalDayOfWeek);
     view.listener = listener;

File: library/test/com/squareup/timessquare/CalendarPickerViewTest.java
Patch:
@@ -2,13 +2,13 @@
 package com.squareup.timessquare;
 
 import android.app.Activity;
-import com.xtremelabs.robolectric.RobolectricTestRunner;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.List;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 
 import static java.util.Calendar.DAY_OF_MONTH;
 import static java.util.Calendar.DECEMBER;

File: library/src/com/squareup/timessquare/CalendarPickerView.java
Patch:
@@ -24,7 +24,6 @@
 import static java.util.Calendar.MINUTE;
 import static java.util.Calendar.MONTH;
 import static java.util.Calendar.SECOND;
-import static java.util.Calendar.SUNDAY;
 import static java.util.Calendar.YEAR;
 
 /**
@@ -70,7 +69,8 @@ public CalendarPickerView(Context context, AttributeSet attrs) {
    * All date parameters must be non-null and their {@link java.util.Date#getTime()} must not
    * return 0.  Time of day will be ignored.  For instance, if you pass in {@code minDate} as
    * 11/16/2012 5:15pm and {@code maxDate} as 11/16/2013 4:30am, 11/16/2012 will be the first
-   * selectable date and 11/15/2013 will be the last selectable date ({@code maxDate} is exclusive).
+   * selectable date and 11/15/2013 will be the last selectable date ({@code maxDate} is
+   * exclusive).
    *
    * @param selectedDate Initially selected date.  Must be between {@code minDate} and {@code
    * maxDate}.

File: library/src/com/squareup/timessquare/MonthView.java
Patch:
@@ -27,8 +27,8 @@ public static MonthView create(ViewGroup parent, LayoutInflater inflater,
     final CalendarRowView headerRow = (CalendarRowView) view.grid.getChildAt(0);
     for (int offset = 0; offset < 7; offset++) {
       today.set(Calendar.DAY_OF_WEEK, firstDayOfWeek + offset);
-	    final TextView textView = (TextView) headerRow.getChildAt(offset);
-	    textView.setText(weekdayNameFormat.format(today.getTime()));
+      final TextView textView = (TextView) headerRow.getChildAt(offset);
+      textView.setText(weekdayNameFormat.format(today.getTime()));
     }
     today.set(Calendar.DAY_OF_WEEK, originalDayOfWeek);
     view.listener = listener;

File: library/test/com/squareup/timessquare/CalendarPickerViewTest.java
Patch:
@@ -2,13 +2,13 @@
 package com.squareup.timessquare;
 
 import android.app.Activity;
-import com.xtremelabs.robolectric.RobolectricTestRunner;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.List;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 
 import static java.util.Calendar.DAY_OF_MONTH;
 import static java.util.Calendar.DECEMBER;

File: library/src/com/squareup/timessquare/CalendarPickerView.java
Patch:
@@ -283,6 +283,6 @@ void setOnDateSelectedListener(OnDateSelectedListener listener) {
   }
 
   interface OnDateSelectedListener {
-      public void onDateSelected(Date date);
+      void onDateSelected(Date date);
   }
 }

File: library/src/com/squareup/timessquare/CalendarPickerView.java
Patch:
@@ -105,6 +105,9 @@ public void init(Date selectedDate, Date minDate, Date maxDate) {
     setMidnight(selectedCal);
     setMidnight(minCal);
     setMidnight(maxCal);
+    // maxDate is exclusive: bump back to the previous day so if maxDate is the first of a month,
+    // we don't accidentally include that month in the view.
+    maxCal.add(MINUTE, -1);
 
     // Now iterate between minCal and maxCal and build up our list of months to show.
     monthCounter.setTime(minCal.getTime());

File: library/src/com/squareup/timessquare/CalendarPickerView.java
Patch:
@@ -105,6 +105,9 @@ public void init(Date selectedDate, Date minDate, Date maxDate) {
     setMidnight(selectedCal);
     setMidnight(minCal);
     setMidnight(maxCal);
+    // maxDate is exclusive: bump back to the previous day so if maxDate is the first of a month,
+    // we don't accidentally include that month in the view.
+    maxCal.add(MINUTE, -1);
 
     // Now iterate between minCal and maxCal and build up our list of months to show.
     monthCounter.setTime(minCal.getTime());

