File: src/main/java/net/dv8tion/jda/api/sharding/DefaultShardManagerBuilder.java
Patch:
@@ -2018,7 +2018,7 @@ public DefaultShardManagerBuilder setDisabledIntents(@Nullable Collection<Gatewa
     {
         this.intents = GatewayIntent.ALL_INTENTS;
         if (intents != null)
-            this.intents = 1 | ~GatewayIntent.getRaw(intents);
+            this.intents = 1 | (GatewayIntent.ALL_INTENTS & ~GatewayIntent.getRaw(intents));
         return this;
     }
 

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/pagination/PollVotersPaginationActionImpl.java
Patch:
@@ -36,7 +36,7 @@ public class PollVotersPaginationActionImpl extends PaginationActionImpl<User, P
 {
     public PollVotersPaginationActionImpl(JDA jda, String channelId, String messageId, long answerId)
     {
-        super(jda, Route.Messages.GET_POLL_ANSWER_VOTERS.compile(channelId, messageId, Long.toString(answerId)), 1, 1000, 1000);
+        super(jda, Route.Messages.GET_POLL_ANSWER_VOTERS.compile(channelId, messageId, Long.toString(answerId)), 1, 100, 100);
         this.order = PaginationOrder.FORWARD;
     }
 

File: src/test/java/net/dv8tion/jda/test/entities/message/PollVotersPaginationTest.java
Patch:
@@ -35,7 +35,7 @@ void testDefaults()
     {
         assertThatRequestFrom(newAction())
             .hasMethod(Method.GET)
-            .hasCompiledRoute("channels/381886978205155338/polls/1228092239079804968/answers/5?limit=1000&after=0")
+            .hasCompiledRoute("channels/381886978205155338/polls/1228092239079804968/answers/5?limit=100&after=0")
             .whenQueueCalled();
     }
 
@@ -45,7 +45,7 @@ void testSkipTo()
         long randomId = random.nextLong();
         assertThatRequestFrom(newAction().skipTo(randomId))
             .hasMethod(Method.GET)
-            .hasQueryParams("limit", "1000", "after", Long.toUnsignedString(randomId))
+            .hasQueryParams("limit", "100", "after", Long.toUnsignedString(randomId))
             .whenQueueCalled();
     }
 

File: src/main/java/net/dv8tion/jda/api/utils/messages/MessageRequest.java
Patch:
@@ -426,13 +426,13 @@ default R setFiles(@Nonnull FileUpload... files)
     // Allowed Mentions Methods
 
     /**
-     * Whether to mention the used, when replying to a message.
+     * Whether to mention the user, when replying to a message.
      * <br>This only matters in combination with {@link net.dv8tion.jda.api.requests.restaction.MessageCreateAction#setMessageReference(Message) MessageCreateAction.setMessageReference(...)}!
      *
      * <p>This is true by default but can be configured using {@link #setDefaultMentionRepliedUser(boolean)}!
      *
      * @param  mention
-     *         True, to mention the author if the referenced message
+     *         True, to mention the author in the referenced message
      *
      * @return The same instance for chaining
      */

File: src/main/java/net/dv8tion/jda/internal/managers/GuildManagerImpl.java
Patch:
@@ -362,6 +362,8 @@ protected RequestBody finalizeData()
             body.put("rules_channel_id", rulesChannel);
         if (shouldUpdate(COMMUNITY_UPDATES_CHANNEL))
             body.put("public_updates_channel_id", communityUpdatesChannel);
+        if (shouldUpdate(SAFETY_ALERTS_CHANNEL))
+            body.put("safety_alerts_channel_id", safetyAlertsChannel);
         if (shouldUpdate(VERIFICATION_LEVEL))
             body.put("verification_level", verificationLevel);
         if (shouldUpdate(NOTIFICATION_LEVEL))

File: src/main/java/net/dv8tion/jda/api/entities/emoji/ApplicationEmoji.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2024 Austin Keener, Michael Ritter, Florian Spieß, and the JDA contributors
+ * Copyright 2015 Austin Keener, Michael Ritter, Florian Spieß, and the JDA contributors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/api/managers/ApplicationEmojiManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2024 Austin Keener, Michael Ritter, Florian Spieß, and the JDA contributors
+ * Copyright 2015 Austin Keener, Michael Ritter, Florian Spieß, and the JDA contributors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/internal/managers/ApplicationEmojiManagerImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2024 Austin Keener, Michael Ritter, Florian Spieß, and the JDA contributors
+ * Copyright 2015 Austin Keener, Michael Ritter, Florian Spieß, and the JDA contributors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/api/JDA.java
Patch:
@@ -1865,7 +1865,7 @@ default List<RichCustomEmoji> getEmojisByName(@Nonnull String name, boolean igno
     void setRequestTimeoutRetry(boolean retryOnTimeout);
 
     /**
-     * USed to determine whether or not autoReconnect is enabled for JDA.
+     * Used to determine whether or not autoReconnect is enabled for JDA.
      *
      * @return True if JDA will attempt to automatically reconnect when a connection-error is encountered.
      */

File: src/main/java/net/dv8tion/jda/api/managers/RoleManager.java
Patch:
@@ -135,7 +135,7 @@ default Guild getGuild()
     /**
      * Sets the <b><u>name</u></b> of the selected {@link net.dv8tion.jda.api.entities.Role Role}.
      *
-     * <p>A role name <b>must not</b> be {@code null} nor less than 1 characters or more than 32 characters long!
+     * <p>A role name <b>must not</b> be {@code null} nor less than 1 character or more than 100 characters long!
      *
      * @param  name
      *         The new name for the selected {@link net.dv8tion.jda.api.entities.Role Role}

File: src/main/java/net/dv8tion/jda/internal/interactions/component/TextInputImpl.java
Patch:
@@ -41,7 +41,7 @@ public TextInputImpl(DataObject object)
                 object.getString("custom_id"),
                 TextInputStyle.fromKey(object.getInt("style", -1)),
                 object.getString("label", null),
-                object.getInt("min_Length", -1),
+                object.getInt("min_length", -1),
                 object.getInt("max_length", -1),
                 object.getBoolean("required", true),
                 object.getString("value", null),

File: src/main/java/net/dv8tion/jda/internal/interactions/modal/ModalImpl.java
Patch:
@@ -37,7 +37,7 @@ public class ModalImpl implements Modal
 
     public ModalImpl(DataObject object)
     {
-        this.id = object.getString("id");
+        this.id = object.getString("custom_id");
         this.title = object.getString("title");
         this.components = object.optArray("components").orElseGet(DataArray::empty)
                     .stream(DataArray::getObject)

File: src/main/java/net/dv8tion/jda/internal/utils/config/ThreadingConfig.java
Patch:
@@ -61,7 +61,7 @@ public void setRateLimitScheduler(@Nullable ScheduledExecutorService executor, b
     public void setRateLimitElastic(@Nullable ExecutorService executor, boolean shutdown)
     {
         this.rateLimitElastic = executor;
-        this.shutdownRateLimitScheduler = shutdown;
+        this.shutdownRateLimitElastic = shutdown;
     }
 
     public void setGatewayPool(@Nullable ScheduledExecutorService executor, boolean shutdown)

File: src/main/java/net/dv8tion/jda/api/entities/Guild.java
Patch:
@@ -3277,7 +3277,7 @@ default Task<List<Member>> retrieveMembersByIds(boolean includePresence, @Nonnul
      * Retrieves a {@link ScheduledEvent} by its ID.
      * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} include:
      * <ul>
-     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#SCHEDULED_EVENT ErrorResponse.UNKNOWN_SCHEDULED_EVENT}
+     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_SCHEDULED_EVENT ErrorResponse.UNKNOWN_SCHEDULED_EVENT}
      *     <br>A scheduled event with the specified ID does not exist in the guild, or the currently logged in user does not
      *     have access to it.</li>
      * </ul>
@@ -3300,7 +3300,7 @@ default CacheRestAction<ScheduledEvent> retrieveScheduledEventById(long id)
      * Retrieves a {@link ScheduledEvent} by its ID.
      * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} include:
      * <ul>
-     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#SCHEDULED_EVENT ErrorResponse.UNKNOWN_SCHEDULED_EVENT}
+     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_SCHEDULED_EVENT ErrorResponse.UNKNOWN_SCHEDULED_EVENT}
      *     <br>A scheduled event with the specified ID does not exist in this guild, or the currently logged in user does not
      *     have access to it.</li>
      * </ul>

File: src/main/java/net/dv8tion/jda/api/entities/ScheduledEvent.java
Patch:
@@ -20,8 +20,8 @@
 import net.dv8tion.jda.api.entities.channel.unions.GuildChannelUnion;
 import net.dv8tion.jda.api.managers.ScheduledEventManager;
 import net.dv8tion.jda.api.requests.restaction.AuditableRestAction;
-import net.dv8tion.jda.api.requests.restaction.pagination.ScheduledEventMembersPaginationAction;
 import net.dv8tion.jda.api.requests.restaction.pagination.PaginationAction;
+import net.dv8tion.jda.api.requests.restaction.pagination.ScheduledEventMembersPaginationAction;
 import net.dv8tion.jda.api.utils.ImageProxy;
 
 import javax.annotation.CheckReturnValue;
@@ -206,7 +206,7 @@ default String getCreatorId()
      *
      * <p>Possible ErrorResponses include:
      * <ul>
-     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#SCHEDULED_EVENT UNKNOWN_SCHEDULED_EVENT}
+     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_SCHEDULED_EVENT UNKNOWN_SCHEDULED_EVENT}
      *     <br>If the the event was already deleted.</li>
      *
      *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS MISSING_PERMISSIONS}
@@ -234,7 +234,7 @@ default String getCreatorId()
      *
      * <p>Possible ErrorResponses include:
      * <ul>
-     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#SCHEDULED_EVENT}
+     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_SCHEDULED_EVENT}
      *     <br>If the the event was already deleted.</li>
      *
      *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS MISSING_ACCESS}

File: src/main/java/net/dv8tion/jda/api/requests/ErrorResponse.java
Patch:
@@ -118,6 +118,7 @@ public enum ErrorResponse
     USER_NOT_CONNECTED(                       40032, "Target user is not connected to voice."),
     ALREADY_CROSSPOSTED(                      40033, "This message has already been crossposted."),
     APPLICATION_COMMAND_NAME_ALREADY_EXISTS(  40041, "An application command with that name already exists"),
+    INTERACTION_ALREADY_ACKNOWLEDGED(         40060, "Interaction has already been acknowledged"),
     MISSING_ACCESS(                           50001, "Missing Access"),
     INVALID_ACCOUNT_TYPE(                     50002, "Invalid Account Type"),
     INVALID_DM_ACTION(                        50003, "Cannot execute action on a DM channel"),

File: src/main/java/net/dv8tion/jda/api/entities/Guild.java
Patch:
@@ -3722,7 +3722,7 @@ default AuditableRestAction<Void> kick(@Nonnull UserSnowflake user, @Nullable St
      */
     @Nonnull
     @CheckReturnValue
-    AuditableRestAction<BulkBanResponse> ban(@Nonnull Collection<UserSnowflake> users, @Nullable Duration deletionTime);
+    AuditableRestAction<BulkBanResponse> ban(@Nonnull Collection<? extends UserSnowflake> users, @Nullable Duration deletionTime);
 
     /**
      * Bans up to 200 of the provided users.
@@ -3763,7 +3763,7 @@ default AuditableRestAction<Void> kick(@Nonnull UserSnowflake user, @Nullable St
      */
     @Nonnull
     @CheckReturnValue
-    default AuditableRestAction<BulkBanResponse> ban(@Nonnull Collection<UserSnowflake> users, int deletionTimeframe, @Nonnull TimeUnit unit)
+    default AuditableRestAction<BulkBanResponse> ban(@Nonnull Collection<? extends UserSnowflake> users, int deletionTimeframe, @Nonnull TimeUnit unit)
     {
         Checks.notNull(unit, "TimeUnit");
         return ban(users, Duration.ofSeconds(unit.toSeconds(deletionTimeframe)));

File: src/main/java/net/dv8tion/jda/internal/entities/GuildImpl.java
Patch:
@@ -1548,7 +1548,7 @@ public AuditableRestAction<Void> ban(@Nonnull UserSnowflake user, int duration,
 
     @Nonnull
     @Override
-    public AuditableRestAction<BulkBanResponse> ban(@Nonnull Collection<UserSnowflake> users, @Nullable Duration deletionTime)
+    public AuditableRestAction<BulkBanResponse> ban(@Nonnull Collection<? extends UserSnowflake> users, @Nullable Duration deletionTime)
     {
         deletionTime = deletionTime == null ? Duration.ZERO : deletionTime;
         Checks.noneNull(users, "Users");

File: src/main/java/net/dv8tion/jda/api/entities/Guild.java
Patch:
@@ -2803,7 +2803,7 @@ default Task<List<Member>> findMembersWithRoles(@Nonnull Role... roles)
      * <br>If the member is already loaded it will be retrieved from {@link #getMemberById(long)}
      * and immediately provided if the member information is consistent. The cache consistency directly
      * relies on the enabled {@link GatewayIntent GatewayIntents} as {@link GatewayIntent#GUILD_MEMBERS GatewayIntent.GUILD_MEMBERS}
-     * is required to keep the cache updated with the latest information. You can use {@link CacheRestAction#useCache(boolean) useCache(true)} to always
+     * is required to keep the cache updated with the latest information. You can use {@link CacheRestAction#useCache(boolean) useCache(false)} to always
      * make a new request, which is the default behavior if the required intents are disabled.
      *
      * <p>Possible {@link net.dv8tion.jda.api.exceptions.ErrorResponseException ErrorResponseExceptions} include:
@@ -2841,7 +2841,7 @@ default CacheRestAction<Member> retrieveMember(@Nonnull UserSnowflake user)
      * <br>If the member is already loaded it will be retrieved from {@link #getMemberById(long)}
      * and immediately provided if the member information is consistent. The cache consistency directly
      * relies on the enabled {@link GatewayIntent GatewayIntents} as {@link GatewayIntent#GUILD_MEMBERS GatewayIntent.GUILD_MEMBERS}
-     * is required to keep the cache updated with the latest information. You can use {@link CacheRestAction#useCache(boolean) useCache(true)} to always
+     * is required to keep the cache updated with the latest information. You can use {@link CacheRestAction#useCache(boolean) useCache(false)} to always
      * make a new request, which is the default behavior if the required intents are disabled.
      *
      * <p>Possible {@link net.dv8tion.jda.api.exceptions.ErrorResponseException ErrorResponseExceptions} include:
@@ -2873,7 +2873,7 @@ default CacheRestAction<Member> retrieveOwner()
      * <br>If the member is already loaded it will be retrieved from {@link #getMemberById(long)}
      * and immediately provided if the member information is consistent. The cache consistency directly
      * relies on the enabled {@link GatewayIntent GatewayIntents} as {@link GatewayIntent#GUILD_MEMBERS GatewayIntent.GUILD_MEMBERS}
-     * is required to keep the cache updated with the latest information. You can use {@link CacheRestAction#useCache(boolean) useCache(true)} to always
+     * is required to keep the cache updated with the latest information. You can use {@link CacheRestAction#useCache(boolean) useCache(false)} to always
      * make a new request, which is the default behavior if the required intents are disabled.
      *
      * <p>Possible {@link net.dv8tion.jda.api.exceptions.ErrorResponseException ErrorResponseExceptions} include:

File: src/main/java/net/dv8tion/jda/api/audit/AuditLogEntry.java
Patch:
@@ -27,6 +27,7 @@
 import net.dv8tion.jda.internal.entities.WebhookImpl;
 import net.dv8tion.jda.internal.utils.Checks;
 import net.dv8tion.jda.internal.utils.EntityString;
+import org.jetbrains.annotations.Unmodifiable;
 
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
@@ -240,6 +241,7 @@ public AuditLogChange getChangeByKey(@Nullable final String key)
      * @return Possibly-empty, never-null immutable list of {@link AuditLogChange AuditLogChanges}
      */
     @Nonnull
+    @Unmodifiable
     public List<AuditLogChange> getChangesForKeys(@Nonnull AuditLogKey... keys)
     {
         Checks.notNull(keys, "Keys");
@@ -329,6 +331,7 @@ public <T> T getOption(@Nonnull AuditLogOption option)
      * @return Unmodifiable list of representative values
      */
     @Nonnull
+    @Unmodifiable
     public List<Object> getOptions(@Nonnull AuditLogOption... options)
     {
         Checks.notNull(options, "Options");

File: src/main/java/net/dv8tion/jda/api/entities/ApplicationTeam.java
Patch:
@@ -19,6 +19,7 @@
 import net.dv8tion.jda.api.utils.ImageProxy;
 import net.dv8tion.jda.api.utils.MiscUtil;
 import net.dv8tion.jda.internal.utils.Checks;
+import org.jetbrains.annotations.Unmodifiable;
 
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
@@ -107,6 +108,7 @@ default ImageProxy getIcon()
      * @return Immutable list of team members
      */
     @Nonnull
+    @Unmodifiable
     List<TeamMember> getMembers();
 
     /**

File: src/main/java/net/dv8tion/jda/api/entities/Member.java
Patch:
@@ -33,6 +33,7 @@
 import net.dv8tion.jda.internal.requests.restaction.AuditableRestActionImpl;
 import net.dv8tion.jda.internal.utils.Checks;
 import net.dv8tion.jda.internal.utils.Helpers;
+import org.jetbrains.annotations.Unmodifiable;
 
 import javax.annotation.CheckReturnValue;
 import javax.annotation.Nonnull;
@@ -183,6 +184,7 @@ default boolean isTimedOut()
      * @return Immutable list of {@link Activity Activities} for the user
      */
     @Nonnull
+    @Unmodifiable
     List<Activity> getActivities();
 
     /**
@@ -339,6 +341,7 @@ default ImageProxy getEffectiveAvatar()
      * @see    Guild#modifyMemberRoles(Member, Collection, Collection)
      */
     @Nonnull
+    @Unmodifiable
     List<Role> getRoles();
 
     /**

File: src/main/java/net/dv8tion/jda/api/entities/MessageEmbed.java
Patch:
@@ -24,6 +24,7 @@
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.api.utils.data.SerializableData;
 import net.dv8tion.jda.internal.utils.Helpers;
+import org.jetbrains.annotations.Unmodifiable;
 
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
@@ -301,6 +302,7 @@ public ImageInfo getImage()
      *         containing field information.
      */
     @Nonnull
+    @Unmodifiable
     public List<Field> getFields()
     {
         return fields;

File: src/main/java/net/dv8tion/jda/api/entities/StageInstance.java
Patch:
@@ -22,6 +22,7 @@
 import net.dv8tion.jda.api.managers.StageInstanceManager;
 import net.dv8tion.jda.api.requests.RestAction;
 import net.dv8tion.jda.internal.utils.Helpers;
+import org.jetbrains.annotations.Unmodifiable;
 
 import javax.annotation.CheckReturnValue;
 import javax.annotation.Nonnull;
@@ -79,6 +80,7 @@ public interface StageInstance extends ISnowflake
      * @return Immutable {@link List} of {@link Member Members} which can speak in this stage instance
      */
     @Nonnull
+    @Unmodifiable
     default List<Member> getSpeakers()
     {
         return getChannel().getMembers()
@@ -100,6 +102,7 @@ default List<Member> getSpeakers()
      * @return Immutable {@link List} of {@link Member Members} which cannot speak in this stage instance
      */
     @Nonnull
+    @Unmodifiable
     default List<Member> getAudience()
     {
         return getChannel().getMembers()

File: src/main/java/net/dv8tion/jda/api/entities/User.java
Patch:
@@ -26,6 +26,7 @@
 import net.dv8tion.jda.internal.entities.UserSnowflakeImpl;
 import net.dv8tion.jda.internal.utils.Checks;
 import net.dv8tion.jda.internal.utils.EntityString;
+import org.jetbrains.annotations.Unmodifiable;
 
 import javax.annotation.CheckReturnValue;
 import javax.annotation.Nonnull;
@@ -321,6 +322,7 @@ default ImageProxy getEffectiveAvatar()
      * @return Immutable list of all {@link net.dv8tion.jda.api.entities.Guild Guilds} that this user is a member of.
      */
     @Nonnull
+    @Unmodifiable
     List<Guild> getMutualGuilds();
 
     /**

File: src/main/java/net/dv8tion/jda/api/entities/channel/attribute/IMemberContainer.java
Patch:
@@ -21,6 +21,7 @@
 import net.dv8tion.jda.api.entities.channel.concrete.TextChannel;
 import net.dv8tion.jda.api.entities.channel.concrete.VoiceChannel;
 import net.dv8tion.jda.api.entities.channel.middleman.GuildChannel;
+import org.jetbrains.annotations.Unmodifiable;
 
 import javax.annotation.Nonnull;
 import java.util.List;
@@ -53,5 +54,6 @@ public interface IMemberContainer extends GuildChannel
      * @return An immutable List of {@link net.dv8tion.jda.api.entities.Member Members} that are in this GuildChannel.
      */
     @Nonnull
+    @Unmodifiable
     List<Member> getMembers();
 }

File: src/main/java/net/dv8tion/jda/api/entities/channel/attribute/IPostContainer.java
Patch:
@@ -30,6 +30,7 @@
 import net.dv8tion.jda.api.requests.restaction.ForumPostAction;
 import net.dv8tion.jda.api.utils.cache.SortedSnowflakeCacheView;
 import net.dv8tion.jda.api.utils.messages.MessageCreateData;
+import org.jetbrains.annotations.Unmodifiable;
 
 import javax.annotation.CheckReturnValue;
 import javax.annotation.Nonnull;
@@ -86,6 +87,7 @@ public interface IPostContainer extends IThreadContainer
      * @return Immutable {@link List} of {@link ForumTag}
      */
     @Nonnull
+    @Unmodifiable
     default List<ForumTag> getAvailableTags()
     {
         return getAvailableTagCache().asList();
@@ -111,6 +113,7 @@ default List<ForumTag> getAvailableTags()
      * @return Immutable {@link List} of {@link ForumTag} with the given name
      */
     @Nonnull
+    @Unmodifiable
     default List<ForumTag> getAvailableTagsByName(@Nonnull String name, boolean ignoreCase)
     {
         return getAvailableTagCache().getElementsByName(name, ignoreCase);

File: src/main/java/net/dv8tion/jda/api/entities/channel/attribute/IThreadContainer.java
Patch:
@@ -27,6 +27,7 @@
 import net.dv8tion.jda.api.utils.MiscUtil;
 import net.dv8tion.jda.api.utils.messages.MessageCreateData;
 import net.dv8tion.jda.internal.utils.Helpers;
+import org.jetbrains.annotations.Unmodifiable;
 
 import javax.annotation.CheckReturnValue;
 import javax.annotation.Nonnull;
@@ -56,6 +57,7 @@ public interface IThreadContainer extends GuildChannel, IPermissionContainer
      * @return Immutable list of all ThreadChannel children.
      */
     @Nonnull
+    @Unmodifiable
     default List<ThreadChannel> getThreadChannels()
     {
         return getGuild().getThreadChannelCache().applyStream(stream ->

File: src/main/java/net/dv8tion/jda/api/entities/channel/attribute/IWebhookContainer.java
Patch:
@@ -21,6 +21,7 @@
 import net.dv8tion.jda.api.requests.RestAction;
 import net.dv8tion.jda.api.requests.restaction.AuditableRestAction;
 import net.dv8tion.jda.api.requests.restaction.WebhookAction;
+import org.jetbrains.annotations.Unmodifiable;
 
 import javax.annotation.CheckReturnValue;
 import javax.annotation.Nonnull;
@@ -54,7 +55,7 @@ public interface IWebhookContainer extends GuildChannel
      */
     @Nonnull
     @CheckReturnValue
-    RestAction<List<Webhook>> retrieveWebhooks();
+    RestAction<@Unmodifiable List<Webhook>> retrieveWebhooks();
 
     /**
      * Creates a new {@link net.dv8tion.jda.api.entities.Webhook Webhook}.

File: src/main/java/net/dv8tion/jda/api/entities/channel/concrete/ThreadChannel.java
Patch:
@@ -33,6 +33,7 @@
 import net.dv8tion.jda.api.requests.restaction.pagination.ThreadMemberPaginationAction;
 import net.dv8tion.jda.api.utils.MiscUtil;
 import net.dv8tion.jda.internal.utils.Checks;
+import org.jetbrains.annotations.Unmodifiable;
 
 import javax.annotation.CheckReturnValue;
 import javax.annotation.Nonnull;
@@ -184,6 +185,7 @@ default GuildMessageChannelUnion getParentMessageChannel()
      * @return Immutable {@link List} of {@link net.dv8tion.jda.api.entities.channel.forums.ForumTag ForumTags} applied to this post
      */
     @Nonnull
+    @Unmodifiable
     List<ForumTag> getAppliedTags();
 
     /**

File: src/main/java/net/dv8tion/jda/api/entities/emoji/RichCustomEmoji.java
Patch:
@@ -27,6 +27,7 @@
 import net.dv8tion.jda.api.requests.restaction.AuditableRestAction;
 import net.dv8tion.jda.api.requests.restaction.CacheRestAction;
 import net.dv8tion.jda.internal.utils.PermissionUtil;
+import org.jetbrains.annotations.Unmodifiable;
 
 import javax.annotation.CheckReturnValue;
 import javax.annotation.Nonnull;
@@ -66,6 +67,7 @@ public interface RichCustomEmoji extends CustomEmoji
      * @return An immutable list of the roles this emoji is active for (all roles if empty)
      */
     @Nonnull
+    @Unmodifiable
     List<Role> getRoles();
 
     /**

File: src/main/java/net/dv8tion/jda/api/entities/messages/MessagePoll.java
Patch:
@@ -20,6 +20,7 @@
 import net.dv8tion.jda.api.entities.emoji.Emoji;
 import net.dv8tion.jda.api.entities.emoji.EmojiUnion;
 import net.dv8tion.jda.api.utils.messages.MessagePollBuilder;
+import org.jetbrains.annotations.Unmodifiable;
 
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
@@ -70,6 +71,7 @@ public interface MessagePoll
      * @return Immutable {@link List} of {@link Answer}
      */
     @Nonnull
+    @Unmodifiable
     List<Answer> getAnswers();
 
     /**

File: src/main/java/net/dv8tion/jda/api/entities/sticker/StickerPack.java
Patch:
@@ -18,6 +18,7 @@
 
 import net.dv8tion.jda.api.entities.ISnowflake;
 import net.dv8tion.jda.api.utils.ImageProxy;
+import org.jetbrains.annotations.Unmodifiable;
 
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
@@ -40,6 +41,7 @@ public interface StickerPack extends ISnowflake
      * @return Immutable List of {@link StandardSticker StandardStickers}
      */
     @Nonnull
+    @Unmodifiable
     List<StandardSticker> getStickers();
 
     /**

File: src/main/java/net/dv8tion/jda/api/entities/templates/TemplateChannel.java
Patch:
@@ -19,6 +19,7 @@
 import net.dv8tion.jda.api.Permission;
 import net.dv8tion.jda.api.entities.ISnowflake;
 import net.dv8tion.jda.api.entities.channel.ChannelType;
+import org.jetbrains.annotations.Unmodifiable;
 
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
@@ -229,6 +230,7 @@ public boolean isNews()
      *         for this {@link net.dv8tion.jda.api.entities.templates.TemplateChannel TemplateChannel}.
      */
     @Nonnull
+    @Unmodifiable
     public List<TemplateChannel.PermissionOverride> getPermissionOverrides()
     {
         return this.permissionOverrides;

File: src/main/java/net/dv8tion/jda/api/entities/templates/TemplateGuild.java
Patch:
@@ -24,6 +24,7 @@
 import net.dv8tion.jda.api.entities.ISnowflake;
 import net.dv8tion.jda.api.interactions.DiscordLocale;
 import net.dv8tion.jda.api.utils.ImageProxy;
+import org.jetbrains.annotations.Unmodifiable;
 
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
@@ -226,6 +227,7 @@ public TemplateChannel getSystemChannel()
      * @return An immutable List of {@link net.dv8tion.jda.api.entities.templates.TemplateRole Roles}.
      */
     @Nonnull
+    @Unmodifiable
     public List<TemplateRole> getRoles()
     {
         return this.roles;
@@ -237,6 +239,7 @@ public List<TemplateRole> getRoles()
      * @return An immutable List of {@link net.dv8tion.jda.api.entities.templates.TemplateChannel Channels}.
      */
     @Nonnull
+    @Unmodifiable
     public List<TemplateChannel> getChannels()
     {
         return this.channels;

File: src/main/java/net/dv8tion/jda/api/hooks/AnnotatedEventManager.java
Patch:
@@ -19,6 +19,7 @@
 import net.dv8tion.jda.internal.JDAImpl;
 import net.dv8tion.jda.internal.utils.ClassWalker;
 import net.dv8tion.jda.internal.utils.JDALogger;
+import org.jetbrains.annotations.Unmodifiable;
 import org.slf4j.Logger;
 
 import javax.annotation.Nonnull;
@@ -91,6 +92,7 @@ public void unregister(@Nonnull Object listener)
 
     @Nonnull
     @Override
+    @Unmodifiable
     public List<Object> getRegisteredListeners()
     {
         return Collections.unmodifiableList(new ArrayList<>(listeners));

File: src/main/java/net/dv8tion/jda/api/hooks/InterfacedEventManager.java
Patch:
@@ -18,6 +18,7 @@
 import net.dv8tion.jda.api.events.GenericEvent;
 import net.dv8tion.jda.internal.JDAImpl;
 import net.dv8tion.jda.internal.utils.JDALogger;
+import org.jetbrains.annotations.Unmodifiable;
 
 import javax.annotation.Nonnull;
 import java.util.ArrayList;
@@ -81,6 +82,7 @@ public void unregister(@Nonnull Object listener)
 
     @Nonnull
     @Override
+    @Unmodifiable
     public List<Object> getRegisteredListeners()
     {
         return Collections.unmodifiableList(new ArrayList<>(listeners));

File: src/main/java/net/dv8tion/jda/api/interactions/commands/build/OptionData.java
Patch:
@@ -28,6 +28,7 @@
 import net.dv8tion.jda.api.utils.data.SerializableData;
 import net.dv8tion.jda.internal.utils.Checks;
 import net.dv8tion.jda.internal.utils.localization.LocalizationUtils;
+import org.jetbrains.annotations.Unmodifiable;
 
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
@@ -348,6 +349,7 @@ public Integer getMaxLength()
      * @see #addChoice(String, String)
      */
     @Nonnull
+    @Unmodifiable
     public List<Command.Choice> getChoices()
     {
         if (choices == null || choices.isEmpty())

File: src/main/java/net/dv8tion/jda/api/interactions/commands/build/SubcommandData.java
Patch:
@@ -26,6 +26,7 @@
 import net.dv8tion.jda.api.utils.data.SerializableData;
 import net.dv8tion.jda.internal.utils.Checks;
 import net.dv8tion.jda.internal.utils.localization.LocalizationUtils;
+import org.jetbrains.annotations.Unmodifiable;
 
 import javax.annotation.Nonnull;
 import java.util.*;
@@ -421,6 +422,7 @@ public SubcommandData addOption(@Nonnull OptionType type, @Nonnull String name,
      * @return Immutable list of {@link OptionData}
      */
     @Nonnull
+    @Unmodifiable
     public List<OptionData> getOptions()
     {
         return Collections.unmodifiableList(options);

File: src/main/java/net/dv8tion/jda/api/interactions/commands/build/SubcommandGroupData.java
Patch:
@@ -25,6 +25,7 @@
 import net.dv8tion.jda.api.utils.data.SerializableData;
 import net.dv8tion.jda.internal.utils.Checks;
 import net.dv8tion.jda.internal.utils.localization.LocalizationUtils;
+import org.jetbrains.annotations.Unmodifiable;
 
 import javax.annotation.Nonnull;
 import java.util.*;
@@ -303,6 +304,7 @@ public boolean removeSubcommandByName(@Nonnull String name)
      * @return Immutable list of {@link SubcommandData}
      */
     @Nonnull
+    @Unmodifiable
     public List<SubcommandData> getSubcommands()
     {
         return Collections.unmodifiableList(subcommands);

File: src/main/java/net/dv8tion/jda/api/interactions/components/LayoutComponent.java
Patch:
@@ -21,6 +21,7 @@
 import net.dv8tion.jda.api.utils.data.SerializableData;
 import net.dv8tion.jda.internal.utils.Checks;
 import net.dv8tion.jda.internal.utils.Helpers;
+import org.jetbrains.annotations.Unmodifiable;
 
 import javax.annotation.CheckReturnValue;
 import javax.annotation.Nonnull;
@@ -70,6 +71,7 @@ default boolean isModalCompatible()
      * @return Immutable {@link List} copy of {@link ActionComponent ActionComponents} in this layout
      */
     @Nonnull
+    @Unmodifiable
     default List<ActionComponent> getActionComponents()
     {
         return getComponents().stream()
@@ -84,6 +86,7 @@ default List<ActionComponent> getActionComponents()
      * @return Immutable {@link List} of {@link Button Buttons}
      */
     @Nonnull
+    @Unmodifiable
     default List<Button> getButtons()
     {
         return getComponents().stream()

File: src/main/java/net/dv8tion/jda/api/interactions/components/selections/EntitySelectMenu.java
Patch:
@@ -31,6 +31,7 @@
 import net.dv8tion.jda.internal.utils.Checks;
 import net.dv8tion.jda.internal.utils.EntityString;
 import net.dv8tion.jda.internal.utils.Helpers;
+import org.jetbrains.annotations.Unmodifiable;
 
 import javax.annotation.CheckReturnValue;
 import javax.annotation.Nonnull;
@@ -123,6 +124,7 @@ default EntitySelectMenu withDisabled(boolean disabled)
      * @return Immutable list of {@link DefaultValue default values}
      */
     @Nonnull
+    @Unmodifiable
     List<DefaultValue> getDefaultValues();
 
     /**

File: src/main/java/net/dv8tion/jda/api/interactions/components/selections/StringSelectInteraction.java
Patch:
@@ -18,6 +18,7 @@
 
 import net.dv8tion.jda.api.events.interaction.component.StringSelectInteractionEvent;
 import net.dv8tion.jda.internal.utils.Helpers;
+import org.jetbrains.annotations.Unmodifiable;
 
 import javax.annotation.Nonnull;
 import java.util.List;
@@ -36,6 +37,7 @@ public interface StringSelectInteraction extends SelectMenuInteraction<String, S
      * @return {@link List} of {@link SelectOption#getValue()}
      */
     @Nonnull
+    @Unmodifiable
     List<String> getValues();
 
     /**
@@ -45,6 +47,7 @@ public interface StringSelectInteraction extends SelectMenuInteraction<String, S
      * @return Immutable {@link List} of the selected options
      */
     @Nonnull
+    @Unmodifiable
     default List<SelectOption> getSelectedOptions()
     {
         StringSelectMenu menu = getComponent();

File: src/main/java/net/dv8tion/jda/api/interactions/modals/Modal.java
Patch:
@@ -26,6 +26,7 @@
 import net.dv8tion.jda.internal.interactions.modal.ModalImpl;
 import net.dv8tion.jda.internal.utils.Checks;
 import net.dv8tion.jda.internal.utils.Helpers;
+import org.jetbrains.annotations.Unmodifiable;
 
 import javax.annotation.CheckReturnValue;
 import javax.annotation.Nonnull;
@@ -380,6 +381,7 @@ public Builder addActionRow(@Nonnull ItemComponent... components)
         @ForRemoval
         @Deprecated
         @ReplaceWith("getComponents()")
+        @Unmodifiable
         public List<ActionRow> getActionRows()
         {
             return components.stream()

File: src/main/java/net/dv8tion/jda/api/interactions/modals/ModalInteraction.java
Patch:
@@ -22,6 +22,7 @@
 import net.dv8tion.jda.api.interactions.callbacks.IMessageEditCallback;
 import net.dv8tion.jda.api.interactions.callbacks.IReplyCallback;
 import net.dv8tion.jda.internal.utils.Checks;
+import org.jetbrains.annotations.Unmodifiable;
 
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
@@ -55,6 +56,7 @@ public interface ModalInteraction extends IReplyCallback, IMessageEditCallback
      * @see    #getValue(String)
      */
     @Nonnull
+    @Unmodifiable
     List<ModalMapping> getValues();
 
     /**

File: src/main/java/net/dv8tion/jda/api/managers/GuildWelcomeScreenManager.java
Patch:
@@ -19,6 +19,7 @@
 import net.dv8tion.jda.api.entities.Guild;
 import net.dv8tion.jda.api.entities.GuildWelcomeScreen;
 import net.dv8tion.jda.internal.utils.Checks;
+import org.jetbrains.annotations.Unmodifiable;
 
 import javax.annotation.CheckReturnValue;
 import javax.annotation.Nonnull;
@@ -141,6 +142,7 @@ public interface GuildWelcomeScreenManager extends Manager<GuildWelcomeScreenMan
      * @return An immutable list of the welcome channels to be set by the manager
      */
     @Nonnull
+    @Unmodifiable
     List<GuildWelcomeScreen.Channel> getWelcomeChannels();
 
     /**

File: src/main/java/net/dv8tion/jda/api/requests/restaction/order/OrderAction.java
Patch:
@@ -17,6 +17,7 @@
 package net.dv8tion.jda.api.requests.restaction.order;
 
 import net.dv8tion.jda.api.requests.RestAction;
+import org.jetbrains.annotations.Unmodifiable;
 
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
@@ -72,6 +73,7 @@ public interface OrderAction<T, M extends OrderAction<T, M>> extends RestAction<
      * @return Immutable List representing the current order
      */
     @Nonnull
+    @Unmodifiable
     List<T> getCurrentOrder();
 
     /**

File: src/main/java/net/dv8tion/jda/api/utils/concurrent/Task.java
Patch:
@@ -17,6 +17,7 @@
 package net.dv8tion.jda.api.utils.concurrent;
 
 import net.dv8tion.jda.internal.utils.Checks;
+import org.jetbrains.annotations.Blocking;
 
 import javax.annotation.Nonnull;
 import java.time.Duration;
@@ -129,6 +130,7 @@ default Task<T> setTimeout(long timeout, TimeUnit unit)
      * @return The result value
      */
     @Nonnull
+    @Blocking
     T get();
 
     /**

File: src/main/java/net/dv8tion/jda/internal/entities/EntityBuilder.java
Patch:
@@ -557,9 +557,9 @@ public boolean updateMemberCache(MemberImpl member, boolean forceRemove)
             GuildVoiceStateImpl voiceState = (GuildVoiceStateImpl) member.getVoiceState();
             if (voiceState != null)
             {
-                VoiceChannelImpl connectedChannel = (VoiceChannelImpl) voiceState.getChannel();
-                if (connectedChannel != null)
-                    connectedChannel.getConnectedMembersMap().remove(member.getIdLong());
+                AudioChannel connectedChannel = voiceState.getChannel();
+                if (connectedChannel instanceof AudioChannelMixin)
+                    ((AudioChannelMixin<?>) connectedChannel).getConnectedMembersMap().remove(member.getIdLong());
                 voiceState.setConnectedChannel(null);
             }
 

File: src/main/java/net/dv8tion/jda/api/requests/ErrorResponse.java
Patch:
@@ -164,6 +164,7 @@ public enum ErrorResponse
     SERVER_NOT_ENOUGH_BOOSTS(                 50101, "This server needs more boosts to perform this action"),
     MIXED_PREMIUM_ROLES_FOR_EMOJI(            50144, "Cannot mix subscription and non subscription roles for an emoji"),
     ILLEGAL_EMOJI_CONVERSION(                 50145, "Cannot convert between premium emoji and normal emoji"),
+    USER_MUST_BE_VERIFIED(                    50178, "The user account must first be verified"),
     MFA_NOT_ENABLED(                          60003, "MFA auth required but not enabled"),
     NO_USER_WITH_TAG_EXISTS(                  80004, "No users with DiscordTag exist"),
     REACTION_BLOCKED(                         90001, "Reaction Blocked"),

File: src/main/java/net/dv8tion/jda/api/interactions/commands/CommandInteraction.java
Patch:
@@ -17,6 +17,7 @@
 package net.dv8tion.jda.api.interactions.commands;
 
 import net.dv8tion.jda.api.interactions.callbacks.IModalCallback;
+import net.dv8tion.jda.api.interactions.callbacks.IPremiumRequiredReplyCallback;
 import net.dv8tion.jda.api.interactions.callbacks.IReplyCallback;
 import net.dv8tion.jda.api.interactions.commands.context.ContextInteraction;
 
@@ -28,6 +29,6 @@
  * @see ContextInteraction
  * @see SlashCommandInteraction
  */
-public interface CommandInteraction extends IReplyCallback, CommandInteractionPayload, IModalCallback
+public interface CommandInteraction extends IReplyCallback, CommandInteractionPayload, IModalCallback, IPremiumRequiredReplyCallback
 {
 }

File: src/main/java/net/dv8tion/jda/api/interactions/components/ComponentInteraction.java
Patch:
@@ -21,6 +21,7 @@
 import net.dv8tion.jda.api.entities.channel.unions.MessageChannelUnion;
 import net.dv8tion.jda.api.interactions.callbacks.IMessageEditCallback;
 import net.dv8tion.jda.api.interactions.callbacks.IModalCallback;
+import net.dv8tion.jda.api.interactions.callbacks.IPremiumRequiredReplyCallback;
 import net.dv8tion.jda.api.interactions.callbacks.IReplyCallback;
 
 import javax.annotation.Nonnull;
@@ -31,7 +32,7 @@
  * <p>Instead of {@link #deferReply()} and {@link #reply(String)} you can use {@link #deferEdit()} and {@link #editMessage(String)} with these interactions!
  * <b>You can only acknowledge an interaction once!</b>
  */
-public interface ComponentInteraction extends IReplyCallback, IMessageEditCallback, IModalCallback
+public interface ComponentInteraction extends IReplyCallback, IMessageEditCallback, IModalCallback, IPremiumRequiredReplyCallback
 {
     /**
      * The custom component ID provided to the component when it was originally created.

File: src/main/java/net/dv8tion/jda/api/requests/Route.java
Patch:
@@ -45,6 +45,7 @@ public static class Applications
         public static final Route GET_BOT_APPLICATION =             new Route(GET, "oauth2/applications/@me");
         public static final Route GET_ROLE_CONNECTION_METADATA =    new Route(GET, "applications/{application_id}/role-connections/metadata");
         public static final Route UPDATE_ROLE_CONNECTION_METADATA = new Route(PUT, "applications/{application_id}/role-connections/metadata");
+        public static final Route GET_ENTITLEMENTS =                new Route(GET, "applications/{application_id}/entitlements");
     }
 
     public static class Interactions

File: src/main/java/net/dv8tion/jda/api/requests/restaction/interactions/InteractionCallbackAction.java
Patch:
@@ -55,6 +55,8 @@ enum ResponseType
         COMMAND_AUTOCOMPLETE_CHOICES(8),
         /** Respond with a modal */
         MODAL(9),
+        /** Respond with the "Premium required" default Discord message for premium App subscriptions **/
+        PREMIUM_REQUIRED(10),
         ;
         private final int raw;
 

File: src/main/java/net/dv8tion/jda/internal/entities/AbstractWebhookClient.java
Patch:
@@ -33,7 +33,6 @@
 import net.dv8tion.jda.internal.requests.restaction.WebhookMessageDeleteActionImpl;
 import net.dv8tion.jda.internal.requests.restaction.WebhookMessageEditActionImpl;
 import net.dv8tion.jda.internal.utils.Checks;
-import org.jetbrains.annotations.NotNull;
 
 import javax.annotation.Nonnull;
 import java.util.Collection;
@@ -91,7 +90,7 @@ public WebhookMessageCreateAction<T> sendMessageEmbeds(@Nonnull Collection<? ext
 
     @Nonnull
     @Override
-    public WebhookMessageCreateAction<T> sendMessageComponents(@NotNull Collection<? extends LayoutComponent> components)
+    public WebhookMessageCreateAction<T> sendMessageComponents(@Nonnull Collection<? extends LayoutComponent> components)
     {
         return sendRequest().setComponents(components);
     }

File: src/main/java/net/dv8tion/jda/internal/interactions/component/EntitySelectMenuImpl.java
Patch:
@@ -22,7 +22,6 @@
 import net.dv8tion.jda.api.utils.data.DataArray;
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.internal.utils.Helpers;
-import org.jetbrains.annotations.NotNull;
 
 import javax.annotation.Nonnull;
 import java.util.Collections;
@@ -99,7 +98,7 @@ public List<DefaultValue> getDefaultValues()
         return defaultValues;
     }
 
-    @NotNull
+    @Nonnull
     @Override
     public DataObject toData()
     {

File: src/main/java/net/dv8tion/jda/internal/requests/IncomingWebhookClientImpl.java
Patch:
@@ -33,7 +33,6 @@
 import net.dv8tion.jda.internal.requests.restaction.WebhookMessageEditActionImpl;
 import net.dv8tion.jda.internal.requests.restaction.WebhookMessageRetrieveActionImpl;
 import net.dv8tion.jda.internal.utils.Checks;
-import org.jetbrains.annotations.NotNull;
 
 import javax.annotation.Nonnull;
 import java.util.function.Function;
@@ -82,7 +81,7 @@ public WebhookMessageRetrieveAction retrieveMessageById(@Nonnull String messageI
 
     @Nonnull
     @Override
-    public WebhookMessageDeleteAction deleteMessageById(@NotNull String messageId)
+    public WebhookMessageDeleteAction deleteMessageById(@Nonnull String messageId)
     {
         WebhookMessageDeleteActionImpl action = (WebhookMessageDeleteActionImpl) super.deleteMessageById(messageId);
         action.run();

File: src/main/java/net/dv8tion/jda/internal/requests/WebSocketClient.java
Patch:
@@ -1361,6 +1361,9 @@ protected void setupHandlers()
         handlers.put("CHANNEL_CREATE",                         new ChannelCreateHandler(api));
         handlers.put("CHANNEL_DELETE",                         new ChannelDeleteHandler(api));
         handlers.put("CHANNEL_UPDATE",                         new ChannelUpdateHandler(api));
+        handlers.put("ENTITLEMENT_CREATE",                     new EntitlementCreateHandler(api));
+        handlers.put("ENTITLEMENT_UPDATE",                     new EntitlementUpdateHandler(api));
+        handlers.put("ENTITLEMENT_DELETE",                     new EntitlementDeleteHandler(api));
         handlers.put("GUILD_AUDIT_LOG_ENTRY_CREATE",           new GuildAuditLogEntryCreateHandler(api));
         handlers.put("GUILD_BAN_ADD",                          new GuildBanHandler(api, true));
         handlers.put("GUILD_BAN_REMOVE",                       new GuildBanHandler(api, false));

File: src/main/java/net/dv8tion/jda/api/utils/data/etf/ExTermEncoder.java
Patch:
@@ -88,16 +88,15 @@ private static ByteBuffer pack(ByteBuffer buffer, Object value)
         if (value instanceof Byte)
             return packSmallInt(buffer, (byte) value);
         if (value instanceof Integer || value instanceof Short)
-            return packInt(buffer, (int) value);
+            return packInt(buffer, ((Number) value).intValue());
         if (value instanceof Long)
             return packLong(buffer, (long) value);
         if (value instanceof Float || value instanceof Double)
-            return packFloat(buffer, (double) value);
+            return packFloat(buffer, ((Number) value).doubleValue());
         if (value instanceof Boolean)
             return packAtom(buffer, String.valueOf(value));
         if (value == null)
             return packAtom(buffer, "nil");
-        // imagine we had templates :O
         if (value instanceof long[])
             return packArray(buffer, (long[]) value);
         if (value instanceof int[])

File: src/test/java/net/dv8tion/jda/test/entitystring/ASnowflake.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package net.dv8tion.jda.entitystring;
+package net.dv8tion.jda.test.entitystring;
 
 import net.dv8tion.jda.api.entities.ISnowflake;
 

File: src/test/java/net/dv8tion/jda/test/entitystring/AnEntity.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package net.dv8tion.jda.entitystring;
+package net.dv8tion.jda.test.entitystring;
 
 public class AnEntity
 {

File: src/main/java/net/dv8tion/jda/internal/utils/Checks.java
Patch:
@@ -25,6 +25,7 @@
 import net.dv8tion.jda.api.interactions.components.ActionComponent;
 import net.dv8tion.jda.api.interactions.components.Component;
 import net.dv8tion.jda.api.interactions.components.LayoutComponent;
+import org.intellij.lang.annotations.PrintFormat;
 import org.jetbrains.annotations.Contract;
 
 import java.util.*;
@@ -63,14 +64,14 @@ public static void check(final boolean expression, final String message)
     }
 
     @Contract("false, _, _ -> fail")
-    public static void check(final boolean expression, final String message, final Object... args)
+    public static void check(final boolean expression, @PrintFormat final String message, final Object... args)
     {
         if (!expression)
             throw new IllegalArgumentException(String.format(message, args));
     }
 
     @Contract("false, _, _ -> fail")
-    public static void check(final boolean expression, final String message, final Object arg)
+    public static void check(final boolean expression, @PrintFormat final String message, final Object arg)
     {
         if (!expression)
             throw new IllegalArgumentException(String.format(message, arg));

File: src/main/java/net/dv8tion/jda/internal/entities/ReceivedMessage.java
Patch:
@@ -808,7 +808,7 @@ public AuditableRestAction<Void> suppressEmbeds(boolean suppressed)
         Route.CompiledRoute route;
         if (isWebhookRequest())
         {
-            route = Route.Webhooks.EXECUTE_WEBHOOK_DELETE.compile(webhook.getId(), webhook.getToken(), getId());
+            route = Route.Webhooks.EXECUTE_WEBHOOK_EDIT.compile(webhook.getId(), webhook.getToken(), getId());
         }
         else
         {

File: src/main/java/net/dv8tion/jda/api/sharding/ShardManager.java
Patch:
@@ -60,7 +60,7 @@
  * @since  3.4
  * @author Aljoscha Grebe
  */
-public interface ShardManager extends IGuildChannelContainer
+public interface ShardManager extends IGuildChannelContainer<Channel>
 {
     /**
      * Adds all provided listeners to the event-listeners that will be used to handle events.
@@ -969,7 +969,7 @@ default List<User> getUsers()
 
     /**
      * Restarts all shards, shutting old ones down first.
-     * 
+     *
      * <p>As all shards need to connect to discord again this will take equally long as the startup of a new ShardManager
      * (using the 5000ms + backoff as delay between starting new JDA instances).
      *

File: src/main/java/net/dv8tion/jda/internal/entities/channel/concrete/VoiceChannelImpl.java
Patch:
@@ -186,7 +186,7 @@ public AuditableRestAction<Void> modifyStatus(@Nonnull String status)
             checkCanManage();
 
         Route.CompiledRoute route = Route.Channels.SET_STATUS.compile(getId());
-        DataObject body = DataObject.empty().put("status", status.isEmpty() ? null : status);
+        DataObject body = DataObject.empty().put("status", status);
         return new AuditableRestActionImpl<>(api, route, body);
     }
 

File: src/main/java/net/dv8tion/jda/internal/interactions/command/MessageContextInteractionImpl.java
Patch:
@@ -45,7 +45,7 @@ protected Message parse(DataObject interaction, DataObject resolved)
                 throw new IllegalStateException("Cannot find guild for resolved message object.");
         }
 
-        return api.getEntityBuilder().createMessageWithLookup(message, guild, false).withHook(getHook());
+        return api.getEntityBuilder().createMessageWithLookup(message, guild, false);
     }
 
     @Override

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/WebhookMessageCreateActionImpl.java
Patch:
@@ -150,7 +150,7 @@ protected RequestBody finalizeData()
             if (avatar != null)
                 json.put("avatar_url", avatar);
 
-            else if (threadMetadata != null)
+            if (threadId == null && threadMetadata != null)
             {
                 json.put("thread_name", threadMetadata.getName());
                 List<ForumTagSnowflake> tags = threadMetadata.getAppliedTags();

File: src/main/java/net/dv8tion/jda/api/utils/data/DataArray.java
Patch:
@@ -568,8 +568,8 @@ public OffsetDateTime getOffsetDateTime(int index, @Nullable OffsetDateTime defa
         }
         catch (DateTimeParseException e)
         {
-            String reason = "Cannot parse value for %s into an OffsetDateTime object. Try double checking that %s is a valid ISO8601 timestamp";
-            throw new ParsingException(String.format(reason, e.getParsedString()));
+            String reason = "Cannot parse value for index %d into an OffsetDateTime object. Try double checking that %s is a valid ISO8601 timestamp";
+            throw new ParsingException(String.format(reason, index, e.getParsedString()));
         }
         return value == null ? defaultValue : value;
     }

File: src/main/java/net/dv8tion/jda/api/interactions/components/selections/EntitySelectMenu.java
Patch:
@@ -143,6 +143,7 @@ default Builder createCopy()
         builder.setRequiredRange(getMinValues(), getMaxValues());
         builder.setPlaceholder(getPlaceholder());
         builder.setDisabled(isDisabled());
+        builder.setDefaultValues(getDefaultValues());
         return builder;
     }
 

File: src/main/java/net/dv8tion/jda/internal/requests/Requester.java
Patch:
@@ -306,7 +306,7 @@ private void applyHeaders(Request<?> apiRequest, okhttp3.Request.Builder builder
         if (apiRequest.getHeaders() != null)
         {
             for (Entry<String, String> header : apiRequest.getHeaders().entrySet())
-                builder.addHeader(header.getKey(), header.getValue());
+                builder.header(header.getKey(), header.getValue());
         }
     }
 

File: src/main/java/net/dv8tion/jda/internal/entities/emoji/CustomEmojiImpl.java
Patch:
@@ -90,7 +90,7 @@ public String getFormatted()
     @Override
     public int hashCode()
     {
-        return Objects.hash(name, id, animated);
+        return Long.hashCode(id);
     }
 
     @Override
@@ -101,7 +101,7 @@ public boolean equals(Object obj)
         if (!(obj instanceof CustomEmoji))
             return false;
         CustomEmoji other = (CustomEmoji) obj;
-        return other.getIdLong() == id;
+        return this.id == other.getIdLong();
     }
 
     @Override

File: src/main/java/net/dv8tion/jda/internal/entities/emoji/RichCustomEmojiImpl.java
Patch:
@@ -237,11 +237,11 @@ public boolean equals(Object obj)
     {
         if (obj == this)
             return true;
-        if (!(obj instanceof RichCustomEmojiImpl))
+        if (!(obj instanceof CustomEmoji))
             return false;
 
-        RichCustomEmojiImpl other = (RichCustomEmojiImpl) obj;
-        return this.id == other.id && getName().equals(other.getName());
+        CustomEmoji other = (CustomEmoji) obj;
+        return this.id == other.getIdLong();
     }
 
 

File: src/main/java/net/dv8tion/jda/api/EmbedBuilder.java
Patch:
@@ -712,8 +712,7 @@ public EmbedBuilder setAuthor(@Nullable String name, @Nullable String url)
     @Nonnull
     public EmbedBuilder setAuthor(@Nullable String name, @Nullable String url, @Nullable String iconUrl)
     {
-        //We only check if the name is null because its presence is what determines if the
-        // the author will appear in the embed.
+        // We only check if the name is null because its presence is what determines if the author will appear in the embed.
         if (name == null)
         {
             this.author = null;

File: src/main/java/net/dv8tion/jda/api/interactions/modals/Modal.java
Patch:
@@ -59,7 +59,7 @@
  *                 .build();
  *
  *         Modal modal = Modal.create("modmail", "Modmail")
- *                 .addActionRows(ActionRow.of(subject), ActionRow.of(body))
+ *                 .addComponents(ActionRow.of(subject), ActionRow.of(body))
  *                 .build();
  *
  *         event.replyModal(modal).queue();

File: src/main/java/net/dv8tion/jda/api/utils/messages/MessageCreateRequest.java
Patch:
@@ -348,6 +348,7 @@ default R applyData(@Nonnull MessageCreateData data)
                 .mentionRepliedUser(data.isMentionRepliedUser())
                 .setEmbeds(data.getEmbeds())
                 .setTTS(data.isTTS())
+                .setSuppressEmbeds(data.isSuppressEmbeds())
                 .setSuppressedNotifications(data.isSuppressedNotifications())
                 .setComponents(layoutComponents)
                 .setFiles(data.getFiles());

File: src/main/java/net/dv8tion/jda/internal/interactions/command/localization/LocalizationMapper.java
Patch:
@@ -120,7 +120,7 @@ private void forObjects(DataArray source, Function<DataObject, String> keyExtrac
 
                 //We need to differentiate subcommands/groups from options before inserting the "options" separator
                 final OptionType type = OptionType.fromKey(item.getInt("type", -1)); //-1 when the object isn't an option
-                final boolean isOption = type != OptionType.SUB_COMMAND && type != OptionType.SUB_COMMAND_GROUP;
+                final boolean isOption = type != OptionType.SUB_COMMAND && type != OptionType.SUB_COMMAND_GROUP && type != OptionType.UNKNOWN;
                 if (isOption) {
                     //At this point the key should look like "path.to.command",
                     // we can insert "options", and the keyExtractor would give option names

File: src/main/java/net/dv8tion/jda/api/events/message/GenericMessageEvent.java
Patch:
@@ -19,7 +19,6 @@
 import net.dv8tion.jda.api.entities.Guild;
 import net.dv8tion.jda.api.entities.Message;
 import net.dv8tion.jda.api.entities.channel.ChannelType;
-import net.dv8tion.jda.api.entities.channel.concrete.TextChannel;
 import net.dv8tion.jda.api.entities.channel.concrete.ThreadChannel;
 import net.dv8tion.jda.api.entities.channel.middleman.GuildChannel;
 import net.dv8tion.jda.api.entities.channel.middleman.MessageChannel;
@@ -144,7 +143,7 @@ public ChannelType getChannelType()
 
     /**
      * The {@link net.dv8tion.jda.api.entities.Guild Guild} the Message was received in.
-     * <br>If this Message was not received in a {@link TextChannel TextChannel},
+     * <br>If this Message was not received in a {@link net.dv8tion.jda.api.entities.Guild Guild},
      * this will throw an {@link java.lang.IllegalStateException}.
      *
      * @throws java.lang.IllegalStateException

File: src/examples/java/MessageLoggerExample.java
Patch:
@@ -145,7 +145,7 @@ public void onMessageReceived(@Nonnull MessageReceivedEvent event)
             System.out.printf("[%s] [%#s] %#s: %s\n",
                 event.getGuild().getName(), // The name of the server the user sent the message in, this is generally referred to as "guild" in the API
                 channel, // The %#s makes use of the channel name and displays as something like #general
-                author,  // The %#s makes use of User#getAsTag which results in something like Minn#6688
+                author,  // The %#s makes use of User#getAsTag which results in something like minn or Minn#1337
                 message.getContentDisplay() // This removes any unwanted mention syntax and converts it to a readable string
             );
         }

File: src/examples/java/SlashBotExample.java
Patch:
@@ -167,13 +167,13 @@ public void ban(SlashCommandInteractionEvent event, User user, Member member)
 
         // optional ban reason with a lazy evaluated fallback (supplier)
         String reason = event.getOption("reason",
-                () -> "Banned by " + event.getUser().getAsTag(), // used if getOption("reason") is null (not provided)
+                () -> "Banned by " + event.getUser().getName(), // used if getOption("reason") is null (not provided)
                 OptionMapping::getAsString); // used if getOption("reason") is not null (provided)
 
         // Ban the user and send a success response
         event.getGuild().ban(user, delDays, TimeUnit.DAYS)
             .reason(reason) // audit-log ban reason (sets X-AuditLog-Reason header)
-            .flatMap(v -> hook.sendMessage("Banned user " + user.getAsTag())) // chain a followup message after the ban is executed
+            .flatMap(v -> hook.sendMessage("Banned user " + user.getName())) // chain a followup message after the ban is executed
             .queue(); // execute the entire call chain
     }
 

File: src/main/java/net/dv8tion/jda/api/JDA.java
Patch:
@@ -574,7 +574,7 @@ default boolean awaitShutdown() throws InterruptedException
      * This uses the {@link net.dv8tion.jda.api.hooks.InterfacedEventManager InterfacedEventListener} by default.
      * To switch to the {@link net.dv8tion.jda.api.hooks.AnnotatedEventManager AnnotatedEventManager}, use {@link #setEventManager(IEventManager)}.
      *
-     * Note: when using the {@link net.dv8tion.jda.api.hooks.InterfacedEventManager InterfacedEventListener} (default),
+     * <p>Note: when using the {@link net.dv8tion.jda.api.hooks.InterfacedEventManager InterfacedEventListener} (default),
      * given listener <b>must</b> be instance of {@link net.dv8tion.jda.api.hooks.EventListener EventListener}!
      *
      * @param  listeners

File: src/main/java/net/dv8tion/jda/api/JDABuilder.java
Patch:
@@ -1187,7 +1187,7 @@ public JDABuilder setEnableShutdownHook(boolean enable)
      * Sets whether or not JDA should try to reconnect if a connection-error is encountered.
      * <br>This will use an incremental reconnect (timeouts are increased each time an attempt fails).
      *
-     * Default: <b>true (enabled)</b>
+     * <p>Default: <b>true (enabled)</b>
      *
      * @param  autoReconnect
      *         If true - enables autoReconnect

File: src/main/java/net/dv8tion/jda/api/audio/OpusPacket.java
Patch:
@@ -136,7 +136,7 @@ public byte[] getOpusAudio()
      * <br>This method is idempotent and will provide the same result on multiple calls
      * without decoding again.
      *
-     * For most use-cases {@link #getAudioData(double)} should be used instead.
+     * <p>For most use-cases {@link #getAudioData(double)} should be used instead.
      *
      * @throws java.lang.IllegalStateException
      *         If {@link #canDecode()} is false

File: src/main/java/net/dv8tion/jda/api/audio/hooks/ConnectionListener.java
Patch:
@@ -46,6 +46,8 @@ public interface ConnectionListener
      */
     void onStatusChange(@Nonnull ConnectionStatus status);
 
+    // TODO: Deprecate and replace these onUserSpeaking methods.
+
     /**
      * This method is an easy way to detect if a user is talking. Discord sends us an event when a user starts or stops
      * talking and it is parallel to the audio socket, so this event could come milliseconds before or after audio begins

File: src/main/java/net/dv8tion/jda/api/audio/hooks/ListenerProxy.java
Patch:
@@ -24,6 +24,9 @@
 import javax.annotation.Nonnull;
 import java.util.EnumSet;
 
+/**
+ * Internal implementation of {@link ConnectionListener}, to handle possible exceptions thrown by user code.
+ */
 public class ListenerProxy implements ConnectionListener
 {
     private static final Logger log = LoggerFactory.getLogger(ListenerProxy.class);

File: src/main/java/net/dv8tion/jda/api/entities/Invite.java
Patch:
@@ -696,7 +696,7 @@ enum InviteType
      * A TargetType indicates additional action to be taken by the client on accepting the invite,
      * typically connecting external services or launching external applications depending on the specific TargetType.
      *
-     * Some actions might not be available or show up on certain devices.
+     * <p>Some actions might not be available or show up on certain devices.
      *
      * @see InviteTarget#getType()
      */

File: src/main/java/net/dv8tion/jda/api/entities/MessageHistory.java
Patch:
@@ -253,7 +253,6 @@ public RestAction<List<Message>> retrievePast(int amount)
      * @throws java.lang.IllegalStateException
      *         If no messages have been retrieved by this MessageHistory.
      *
-     *
      * @return {@link net.dv8tion.jda.api.requests.RestAction RestAction} -
      *         Type: {@link java.util.List List}{@literal <}{@link net.dv8tion.jda.api.entities.Message Message}{@literal >}
      *         <br>Retrieved Messages are placed in a List and provided in order of most recent to oldest with most recent

File: src/main/java/net/dv8tion/jda/api/entities/MessageType.java
Patch:
@@ -148,7 +148,7 @@ public enum MessageType
     /**
      * This message was created by the automod system.
      *
-     * Messages from this type usually come with custom embeds containing relevant information, the author is the user that triggered the filter.
+     * <p>Messages from this type usually come with custom embeds containing relevant information, the author is the user that triggered the filter.
      */
     AUTO_MODERATION_ACTION(24, true, true),
 

File: src/main/java/net/dv8tion/jda/api/entities/WebhookType.java
Patch:
@@ -18,6 +18,9 @@
 
 import javax.annotation.Nonnull;
 
+/**
+ * Types of webhooks.
+ */
 public enum WebhookType
 {
     /** Placeholder for unsupported types */

File: src/main/java/net/dv8tion/jda/api/entities/channel/Channel.java
Patch:
@@ -74,7 +74,6 @@ default EnumSet<ChannelFlag> getFlags()
     JDA getJDA();
 
     /**
-     * TODO-v5: Revisit these docs
      * Deletes this Channel.
      *
      * <p>Possible ErrorResponses include:

File: src/main/java/net/dv8tion/jda/api/entities/channel/attribute/ICategorizableChannel.java
Patch:
@@ -41,7 +41,7 @@ public interface ICategorizableChannel extends GuildChannel, IPermissionContaine
     /**
      * Get the snowflake of the {@link Category} that contains this channel.
      *
-     * This will return {@code 0} if this channel doesn't have a parent category.
+     * <p>This will return {@code 0} if this channel doesn't have a parent category.
      *
      * @return The Discord ID snowflake of the parent channel as a long.
      */
@@ -50,7 +50,7 @@ public interface ICategorizableChannel extends GuildChannel, IPermissionContaine
     /**
      * Get the snowflake of the {@link Category Category} that contains this channel.
      *
-     * This will return {@code null} if this channel doesn't have a parent category.
+     * <p>This will return {@code null} if this channel doesn't have a parent category.
      *
      * @return Possibly-null String representation of the Discord ID snowflake of the parent channel.
      */

File: src/main/java/net/dv8tion/jda/api/entities/channel/attribute/ICopyableChannel.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * Represents a GuildChannel that is capable of being copied.
  *
- * Please see {@link ICopyableChannel#createCopy()} for information on what is copied.
+ * <p>Please see {@link ICopyableChannel#createCopy()} for information on what is copied.
  */
 public interface ICopyableChannel extends GuildChannel
 {

File: src/main/java/net/dv8tion/jda/api/entities/channel/attribute/IInviteContainer.java
Patch:
@@ -29,7 +29,7 @@
 /**
  * Represents a {@link GuildChannel GuildChannel} that can be the target of a Guild's invite.
  *
- * Invites have to be targeted at exactly one {@link IInviteContainer}, which will open when the invite is used (unless restricted by permissions).
+ * <p>Invites have to be targeted at exactly one {@link IInviteContainer}, which will open when the invite is used (unless restricted by permissions).
  */
 public interface IInviteContainer extends GuildChannel
 {

File: src/main/java/net/dv8tion/jda/api/entities/channel/attribute/IMemberContainer.java
Patch:
@@ -28,9 +28,9 @@
 /**
  * Represents a {@link GuildChannel} that is capable of containing members.
  *
- * Implementations interpret this meaning as best applies to them:
+ * <p>Implementations interpret this meaning as best applies to them:
  *
- * For example,
+ * <p>For example,
  * <ul>
  *   <li>{@link TextChannel TextChannels} implement this as the {@link net.dv8tion.jda.api.entities.Member members} that have {@link net.dv8tion.jda.api.Permission#VIEW_CHANNEL}</li>
  *   <li>{@link VoiceChannel VoiceChannels} implement this as what {@link net.dv8tion.jda.api.entities.Member members} are currently connected to the channel.</li>

File: src/main/java/net/dv8tion/jda/api/entities/channel/attribute/IPermissionContainer.java
Patch:
@@ -32,7 +32,7 @@
 /**
  * Represents a {@link GuildChannel} that uses {@link net.dv8tion.jda.api.entities.PermissionOverride Permission Overrides}.
  *
- * Channels that implement this interface can override permissions for specific users or roles.
+ * <p>Channels that implement this interface can override permissions for specific users or roles.
  *
  * @see net.dv8tion.jda.api.entities.PermissionOverride
  */

File: src/main/java/net/dv8tion/jda/api/entities/channel/attribute/IPositionableChannel.java
Patch:
@@ -24,9 +24,9 @@
 /**
  * Represents a {@link GuildChannel GuildChannel} that has a position.
  *
- * These channels can be re-ordered using a position value.
+ * <p>These channels can be re-ordered using a position value.
  *
- * In the case of identical position values, the natural order of the channel snowflakes is used.
+ * <p>In the case of identical position values, the natural order of the channel snowflakes is used.
  */
 public interface IPositionableChannel extends GuildChannel
 {

File: src/main/java/net/dv8tion/jda/api/entities/channel/attribute/IWebhookContainer.java
Patch:
@@ -29,7 +29,7 @@
 /**
  * Represents a {@link GuildChannel} that is capable of utilizing <a href="https://support.discord.com/hc/en-us/articles/228383668-Intro-to-Webhooks" target="_blank">webhooks</a>.
  *
- * Webhooks can be used to integrate third-party systems into Discord by way of sending information via messages.
+ * <p>Webhooks can be used to integrate third-party systems into Discord by way of sending information via messages.
  */
 public interface IWebhookContainer extends GuildChannel
 {

File: src/main/java/net/dv8tion/jda/api/entities/channel/concrete/NewsChannel.java
Patch:
@@ -34,12 +34,12 @@
 /**
  * Represents {@link net.dv8tion.jda.api.entities.channel.middleman.StandardGuildMessageChannel} that are News Channels.
  *
- * The Discord client may refer to these as Announcement Channels.
+ * <p>The Discord client may refer to these as Announcement Channels.
  *
- * Members can subscribe channels in their own guilds to receive messages crossposted from this channel.
+ * <p>Members can subscribe channels in their own guilds to receive messages crossposted from this channel.
  * This is referred to as following this channel.
  *
- * Messages sent in this channel can be crossposted, at which point they will be sent (via webhook) to all subscribed channels.
+ * <p>Messages sent in this channel can be crossposted, at which point they will be sent (via webhook) to all subscribed channels.
  *
  * @see Message#getFlags()
  * @see net.dv8tion.jda.api.entities.Message.MessageFlag#CROSSPOSTED

File: src/main/java/net/dv8tion/jda/api/entities/channel/concrete/PrivateChannel.java
Patch:
@@ -65,12 +65,12 @@ public interface PrivateChannel extends MessageChannel
     /**
      * The human-readable name of this channel.
      *
-     * If getUser returns null, this method will return an empty String.
+     * <p>If getUser returns null, this method will return an empty String.
      * This happens when JDA does not have enough information to populate the channel name.
      *
-     * This will occur only when {@link #getUser()} is null, and the reasons are given in {@link #getUser()}
+     * <p>This will occur only when {@link #getUser()} is null, and the reasons are given in {@link #getUser()}
      *
-     * If the channel name is important, {@link #retrieveUser()} should be used, instead.
+     * <p>If the channel name is important, {@link #retrieveUser()} should be used, instead.
      *
      * @return The name of this channel
      *

File: src/main/java/net/dv8tion/jda/api/entities/channel/middleman/AudioChannel.java
Patch:
@@ -48,7 +48,6 @@
  */
 public interface AudioChannel extends StandardGuildChannel
 {
-    //TODO-v5: Docs
     @Override
     @Nonnull
     AudioChannelManager<?, ?> getManager();

File: src/main/java/net/dv8tion/jda/api/entities/channel/middleman/GuildMessageChannel.java
Patch:
@@ -44,7 +44,7 @@
 /**
  * Represents all message channels present in guilds.
  *
- * This includes channels that are not included in {@link StandardGuildMessageChannel}, such as {@link ThreadChannel}.
+ * <p>This includes channels that are not included in {@link StandardGuildMessageChannel}, such as {@link ThreadChannel}.
  *
  * @see StandardGuildMessageChannel
  */

File: src/main/java/net/dv8tion/jda/api/events/channel/ChannelCreateEvent.java
Patch:
@@ -21,7 +21,9 @@
 
 import javax.annotation.Nonnull;
 
-//TODO-v5: Docs
+/**
+ * Indicates that a {@link Channel} was created.
+ */
 public class ChannelCreateEvent extends GenericChannelEvent
 {
     public ChannelCreateEvent(@Nonnull JDA api, long responseNumber, Channel channel)

File: src/main/java/net/dv8tion/jda/api/events/channel/ChannelDeleteEvent.java
Patch:
@@ -21,7 +21,9 @@
 
 import javax.annotation.Nonnull;
 
-//TODO-v5: Docs
+/**
+ * Indicates that a {@link Channel} was deleted.
+ */
 public class ChannelDeleteEvent extends GenericChannelEvent
 {
     public ChannelDeleteEvent(@Nonnull JDA api, long responseNumber, Channel channel)

File: src/main/java/net/dv8tion/jda/api/events/channel/forum/ForumTagAddEvent.java
Patch:
@@ -26,6 +26,9 @@
 /**
  * Indicates that a new {@link ForumTag} was added to a {@link ForumChannel}.
  *
+ * <p>Use {@link net.dv8tion.jda.api.events.channel.update.ChannelUpdateAppliedTagsEvent ChannelUpdateAppliedTagsEvent}
+ * to detect when a tag is added to a forum post instead.
+ *
  * <p><b>Requirements</b><br>
  * This requires {@link net.dv8tion.jda.api.utils.cache.CacheFlag#FORUM_TAGS CacheFlag.FORUM_TAGS} to be enabled.
  * {@link net.dv8tion.jda.api.JDABuilder#createLight(String, Collection) JDABuilder.createLight(...)} disables this by default.

File: src/main/java/net/dv8tion/jda/api/events/channel/forum/ForumTagRemoveEvent.java
Patch:
@@ -26,6 +26,9 @@
 /**
  * Indicates that a {@link ForumTag} was removed from a {@link ForumChannel}.
  *
+ * <p>Use {@link net.dv8tion.jda.api.events.channel.update.ChannelUpdateAppliedTagsEvent ChannelUpdateAppliedTagsEvent}
+ * to detect when a tag is removed from a forum post instead.
+ *
  * <p><b>Requirements</b><br>
  * This requires {@link net.dv8tion.jda.api.utils.cache.CacheFlag#FORUM_TAGS CacheFlag.FORUM_TAGS} to be enabled.
  * {@link net.dv8tion.jda.api.JDABuilder#createLight(String, Collection) JDABuilder.createLight(...)} disables this by default.

File: src/main/java/net/dv8tion/jda/api/events/guild/scheduledevent/GenericScheduledEventUserEvent.java
Patch:
@@ -30,14 +30,14 @@
 /**
  * Indicates that a {@link User User} has subscribed or unsubscribed to a {@link ScheduledEvent ScheduledEvent}.
  *
+ * <p>Can be used to detect when someone has indicated that they have subscribed or unsubscribed to an event and also retrieve their
+ * {@link User User} object as well as the {@link ScheduledEvent}.
+ *
  * <p><b>Requirements</b><br>
  *
  * <p>This event requires the {@link net.dv8tion.jda.api.requests.GatewayIntent#SCHEDULED_EVENTS SCHEDULED_EVENTS} intent and {@link CacheFlag#SCHEDULED_EVENTS} to be enabled.
  * <br>{@link net.dv8tion.jda.api.JDABuilder#createDefault(String) createDefault(String)} and
  * {@link net.dv8tion.jda.api.JDABuilder#createLight(String) createLight(String)} disable this by default!
- *
- * Can be used to detect when someone has indicated that they have subscribed or unsubscribed to an event and also retrieve their
- * {@link User User} object as well as the {@link ScheduledEvent}.
  */
 public abstract class GenericScheduledEventUserEvent extends GenericScheduledEventGatewayEvent
 {

File: src/main/java/net/dv8tion/jda/api/events/guild/scheduledevent/ScheduledEventCreateEvent.java
Patch:
@@ -24,13 +24,13 @@
 /**
  * Indicates that a {@link ScheduledEvent} object has been created.
  *
+ * <p>Can be used to detect when a {@link ScheduledEvent} was created and retrieve the created scheduled event.
+ *
  * <p><b>Requirements</b><br>
  *
  * <p>This event requires the {@link net.dv8tion.jda.api.requests.GatewayIntent#SCHEDULED_EVENTS SCHEDULED_EVENTS} intent and {@link CacheFlag#SCHEDULED_EVENTS} to be enabled.
  * <br>{@link net.dv8tion.jda.api.JDABuilder#createDefault(String) createDefault(String)} and
  * {@link net.dv8tion.jda.api.JDABuilder#createLight(String) createLight(String)} disable this by default!
- *
- * Can be used to detect when a {@link ScheduledEvent} was created and retrieve the created scheduled event.
  */
 public class ScheduledEventCreateEvent extends GenericScheduledEventGatewayEvent
 {

File: src/main/java/net/dv8tion/jda/api/events/guild/scheduledevent/ScheduledEventDeleteEvent.java
Patch:
@@ -24,13 +24,13 @@
 /**
  * Indicates that a {@link ScheduledEvent} object has been deleted.
  *
+ * <p>Can be used to detect when a {@link ScheduledEvent} was deleted and retrieve the deleted scheduled event.
+ *
  * <p><b>Requirements</b><br>
  *
  * <p>This event requires the {@link net.dv8tion.jda.api.requests.GatewayIntent#SCHEDULED_EVENTS SCHEDULED_EVENTS} intent and {@link CacheFlag#SCHEDULED_EVENTS} to be enabled.
  * <br>{@link net.dv8tion.jda.api.JDABuilder#createDefault(String) createDefault(String)} and
  * {@link net.dv8tion.jda.api.JDABuilder#createLight(String) createLight(String)} disable this by default!
- *
- * Can be used to detect when a {@link ScheduledEvent} was deleted and retrieve the deleted scheduled event.
  */
 public class ScheduledEventDeleteEvent extends GenericScheduledEventGatewayEvent
 {

File: src/main/java/net/dv8tion/jda/api/events/guild/scheduledevent/ScheduledEventUserAddEvent.java
Patch:
@@ -24,14 +24,14 @@
 /**
  * Indicates that a {@link net.dv8tion.jda.api.entities.User User} has subscribed to a {@link ScheduledEvent ScheduledEvent}.
  *
+ * <p>Can be used to detect when someone has subscribed to an event and also retrieve their
+ * {@link net.dv8tion.jda.api.entities.User User} object as well as the {@link ScheduledEvent}.
+ *
  * <p><b>Requirements</b><br>
  *
  * <p>This event requires the {@link net.dv8tion.jda.api.requests.GatewayIntent#SCHEDULED_EVENTS SCHEDULED_EVENTS} intent and {@link CacheFlag#SCHEDULED_EVENTS} to be enabled.
  * <br>{@link net.dv8tion.jda.api.JDABuilder#createDefault(String) createDefault(String)} and
  * {@link net.dv8tion.jda.api.JDABuilder#createLight(String) createLight(String)} disable this by default!
- *
- * Can be used to detect when someone has subscribed to an event and also retrieve their
- * {@link net.dv8tion.jda.api.entities.User User} object as well as the {@link ScheduledEvent}.
  */
 public class ScheduledEventUserAddEvent extends GenericScheduledEventUserEvent
 {

File: src/main/java/net/dv8tion/jda/api/events/guild/scheduledevent/ScheduledEventUserRemoveEvent.java
Patch:
@@ -24,14 +24,14 @@
 /**
  * Indicates that a {@link net.dv8tion.jda.api.entities.User User} has unsubscribed from a {@link ScheduledEvent ScheduledEvent}.
  *
+ * <p>Can be used to detect when someone unsubscribed to an event and also retrieve their
+ * {@link net.dv8tion.jda.api.entities.User User} object as well as the {@link ScheduledEvent}.
+ *
  * <p><b>Requirements</b><br>
  *
  * <p>This event requires the {@link net.dv8tion.jda.api.requests.GatewayIntent#SCHEDULED_EVENTS SCHEDULED_EVENTS} intent and {@link CacheFlag#SCHEDULED_EVENTS} to be enabled.
  * <br>{@link net.dv8tion.jda.api.JDABuilder#createDefault(String) createDefault(String)} and
  * {@link net.dv8tion.jda.api.JDABuilder#createLight(String) createLight(String)} disable this by default!
- *
- * Can be used to detect when someone unsubscribed to an event and also retrieve their
- * {@link net.dv8tion.jda.api.entities.User User} object as well as the {@link ScheduledEvent}.
  */
 public class ScheduledEventUserRemoveEvent extends GenericScheduledEventUserEvent
 {

File: src/main/java/net/dv8tion/jda/api/events/guild/scheduledevent/update/GenericScheduledEventUpdateEvent.java
Patch:
@@ -25,7 +25,7 @@
  * <br>{@link net.dv8tion.jda.api.JDABuilder#createDefault(String) createDefault(String)} and
  * {@link net.dv8tion.jda.api.JDABuilder#createLight(String) createLight(String)} disable this by default!
  *
- * Discord does not specifically tell us about the updates, but merely tells us the
+ * <p>Discord does not specifically tell us about the updates, but merely tells us the
  * {@link ScheduledEvent ScheduledEvent} was updated and gives us the updated {@link ScheduledEvent ScheduledEvent} object.
  * In order to fire a specific event like this we need to have the old {@link ScheduledEvent ScheduledEvent} cached to compare against.
  */

File: src/main/java/net/dv8tion/jda/api/events/guild/scheduledevent/update/ScheduledEventUpdateDescriptionEvent.java
Patch:
@@ -35,7 +35,7 @@
  * <br>{@link net.dv8tion.jda.api.JDABuilder#createDefault(String) createDefault(String)} and
  * {@link net.dv8tion.jda.api.JDABuilder#createLight(String) createLight(String)} disable this by default!
  *
- * Discord does not specifically tell us about the updates, but merely tells us the
+ * <p>Discord does not specifically tell us about the updates, but merely tells us the
  * {@link ScheduledEvent ScheduledEvent} was updated and gives us the updated {@link ScheduledEvent ScheduledEvent} object.
  * In order to fire a specific event like this we need to have the old {@link ScheduledEvent ScheduledEvent} cached to compare against.
  */

File: src/main/java/net/dv8tion/jda/api/events/guild/scheduledevent/update/ScheduledEventUpdateEndTimeEvent.java
Patch:
@@ -36,7 +36,7 @@
  * <br>{@link net.dv8tion.jda.api.JDABuilder#createDefault(String) createDefault(String)} and
  * {@link net.dv8tion.jda.api.JDABuilder#createLight(String) createLight(String)} disable this by default!
  *
- * Discord does not specifically tell us about the updates, but merely tells us the
+ * <p>Discord does not specifically tell us about the updates, but merely tells us the
  * {@link ScheduledEvent ScheduledEvent} was updated and gives us the updated {@link ScheduledEvent ScheduledEvent} object.
  * In order to fire a specific event like this we need to have the old {@link ScheduledEvent ScheduledEvent} cached to compare against.
  */

File: src/main/java/net/dv8tion/jda/api/events/guild/scheduledevent/update/ScheduledEventUpdateImageEvent.java
Patch:
@@ -34,7 +34,7 @@
  * <br>{@link net.dv8tion.jda.api.JDABuilder#createDefault(String) createDefault(String)} and
  * {@link net.dv8tion.jda.api.JDABuilder#createLight(String) createLight(String)} disable this by default!
  *
- * Discord does not specifically tell us about the updates, but merely tells us the
+ * <p>Discord does not specifically tell us about the updates, but merely tells us the
  * {@link ScheduledEvent ScheduledEvent} was updated and gives us the updated {@link ScheduledEvent ScheduledEvent} object.
  * In order to fire a specific event like this we need to have the old {@link ScheduledEvent ScheduledEvent} cached to compare against.
  */

File: src/main/java/net/dv8tion/jda/api/events/guild/scheduledevent/update/ScheduledEventUpdateLocationEvent.java
Patch:
@@ -34,7 +34,7 @@
  * <br>{@link net.dv8tion.jda.api.JDABuilder#createDefault(String) createDefault(String)} and
  * {@link net.dv8tion.jda.api.JDABuilder#createLight(String) createLight(String)} disable this by default!
  *
- * Discord does not specifically tell us about the updates, but merely tells us the
+ * <p>Discord does not specifically tell us about the updates, but merely tells us the
  * {@link ScheduledEvent ScheduledEvent} was updated and gives us the updated {@link ScheduledEvent ScheduledEvent} object.
  * In order to fire a specific event like this we need to have the old {@link ScheduledEvent ScheduledEvent} cached to compare against.
  */

File: src/main/java/net/dv8tion/jda/api/events/guild/scheduledevent/update/ScheduledEventUpdateNameEvent.java
Patch:
@@ -34,7 +34,7 @@
  * <br>{@link net.dv8tion.jda.api.JDABuilder#createDefault(String) createDefault(String)} and
  * {@link net.dv8tion.jda.api.JDABuilder#createLight(String) createLight(String)} disable this by default!
  *
- * Discord does not specifically tell us about the updates, but merely tells us the
+ * <p>Discord does not specifically tell us about the updates, but merely tells us the
  * {@link ScheduledEvent ScheduledEvent} was updated and gives us the updated {@link ScheduledEvent ScheduledEvent} object.
  * In order to fire a specific event like this we need to have the old {@link ScheduledEvent ScheduledEvent} cached to compare against.
  */

File: src/main/java/net/dv8tion/jda/api/events/guild/scheduledevent/update/ScheduledEventUpdateStartTimeEvent.java
Patch:
@@ -35,7 +35,7 @@
  * <br>{@link net.dv8tion.jda.api.JDABuilder#createDefault(String) createDefault(String)} and
  * {@link net.dv8tion.jda.api.JDABuilder#createLight(String) createLight(String)} disable this by default!
  *
- * Discord does not specifically tell us about the updates, but merely tells us the
+ * <p>Discord does not specifically tell us about the updates, but merely tells us the
  * {@link ScheduledEvent ScheduledEvent} was updated and gives us the updated {@link ScheduledEvent ScheduledEvent} object.
  * In order to fire a specific event like this we need to have the old {@link ScheduledEvent ScheduledEvent} cached to compare against.
  */

File: src/main/java/net/dv8tion/jda/api/events/guild/scheduledevent/update/ScheduledEventUpdateStatusEvent.java
Patch:
@@ -35,7 +35,7 @@
  * <br>{@link net.dv8tion.jda.api.JDABuilder#createDefault(String) createDefault(String)} and
  * {@link net.dv8tion.jda.api.JDABuilder#createLight(String) createLight(String)} disable this by default!
  *
- * Discord does not specifically tell us about the updates, but merely tells us the
+ * <p>Discord does not specifically tell us about the updates, but merely tells us the
  * {@link ScheduledEvent ScheduledEvent} was updated and gives us the updated {@link ScheduledEvent ScheduledEvent} object.
  * In order to fire a specific event like this we need to have the old {@link ScheduledEvent ScheduledEvent} cached to compare against.
  */

File: src/main/java/net/dv8tion/jda/api/exceptions/ContextException.java
Patch:
@@ -54,6 +54,9 @@ public static Consumer<Throwable> here(@Nonnull Consumer<? super Throwable> acce
         return new ContextConsumer(new ContextException(), acceptor);
     }
 
+    /**
+     * Wrapper for a failure {@link Consumer} that carries a {@link ContextException} as cause.
+     */
     public static class ContextConsumer implements Consumer<Throwable>
     {
         private final ContextException context;

File: src/main/java/net/dv8tion/jda/api/exceptions/HttpException.java
Patch:
@@ -16,6 +16,9 @@
 
 package net.dv8tion.jda.api.exceptions;
 
+/**
+ * Indicates an unsuccessful HTTP request.
+ */
 public class HttpException extends RuntimeException
 {
     public HttpException(String message)

File: src/main/java/net/dv8tion/jda/api/interactions/components/Component.java
Patch:
@@ -32,7 +32,6 @@
  * <br><p>Not every component can be used in {@link net.dv8tion.jda.api.entities.Message Messages} or {@link Modal Modals}.
  * Use {@link Type#isMessageCompatible()} and {@link Type#isModalCompatible()} to check whether a component can be used.
  *
- *
  * @see ActionRow
  *
  * @see Button

File: src/main/java/net/dv8tion/jda/api/managers/channel/attribute/ISlowmodeChannelManager.java
Patch:
@@ -49,7 +49,6 @@ public interface ISlowmodeChannelManager<T extends ISlowmodeChannel, M extends I
      * {@link net.dv8tion.jda.api.entities.channel.concrete.ForumChannel ForumChannels} use this to limit how many posts a user can create.
      * The client refers to this as the post slowmode.
      *
-     *
      * @param  slowmode
      *         The new slowmode
      *

File: src/main/java/net/dv8tion/jda/api/requests/Response.java
Patch:
@@ -30,6 +30,9 @@
 import java.util.Set;
 import java.util.stream.Collectors;
 
+/**
+ * Internal class used to represent HTTP responses or request failures.
+ */
 public class Response implements Closeable
 {
     public static final int ERROR_CODE = -1;

File: src/main/java/net/dv8tion/jda/api/requests/RestAction.java
Patch:
@@ -787,7 +787,6 @@ default <O> RestAction<O> map(@Nonnull Function<? super T, ? extends O> map)
      *         The consuming function to apply to the action result, failures are propagated
      *         into the resulting action
      *
-     *
      * @throws IllegalArgumentException
      *         If the consumer is null
      *

File: src/main/java/net/dv8tion/jda/api/sharding/DefaultShardManagerBuilder.java
Patch:
@@ -1049,7 +1049,7 @@ public DefaultShardManagerBuilder setAudioSendFactory(@Nullable final IAudioSend
      * Sets whether or not JDA should try to reconnect if a connection-error is encountered.
      * <br>This will use an incremental reconnect (timeouts are increased each time an attempt fails).
      *
-     * Default: <b>true (enabled)</b>
+     * <p>Default: <b>true (enabled)</b>
      *
      * @param  autoReconnect
      *         If true - enables autoReconnect

File: src/main/java/net/dv8tion/jda/api/sharding/ShardManager.java
Patch:
@@ -139,7 +139,7 @@ default void removeEventListeners(@Nonnull final IntFunction<Collection<Object>>
      * Remove a listener provider. This will stop further created / restarted shards from getting a listener added by
      * that provider.
      *
-     * Default is a no-op for backwards compatibility, see implementations like
+     * <p>Default is a no-op for backwards compatibility, see implementations like
      * {@link DefaultShardManager#removeEventListenerProvider(IntFunction)} for actual code
      *
      * @param  eventListenerProvider
@@ -285,7 +285,6 @@ default RichCustomEmoji getEmojiById(@Nonnull final String id)
      * Unified {@link net.dv8tion.jda.api.utils.cache.SnowflakeCacheView SnowflakeCacheView} of
      * all cached {@link RichCustomEmoji RichCustomEmojis} visible to this ShardManager instance.
      *
-     *
      * @return Unified {@link net.dv8tion.jda.api.utils.cache.SnowflakeCacheView SnowflakeCacheView}
      */
     @Nonnull

File: src/main/java/net/dv8tion/jda/api/utils/MarkdownUtil.java
Patch:
@@ -19,6 +19,9 @@
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 
+/**
+ * Utility class to escape markdown characters.
+ */
 public final class MarkdownUtil
 {
     private MarkdownUtil() {}

File: src/main/java/net/dv8tion/jda/api/utils/TimeUtil.java
Patch:
@@ -25,6 +25,9 @@
 import java.util.Calendar;
 import java.util.TimeZone;
 
+/**
+ * Utility for various time related features of the API.
+ */
 public class TimeUtil
 {
     public static final long DISCORD_EPOCH = 1420070400000L;

File: src/main/java/net/dv8tion/jda/internal/handle/ThreadCreateHandler.java
Patch:
@@ -55,7 +55,7 @@ protected Long handleInternally(DataObject content)
             if (!EntityBuilder.MISSING_CHANNEL.equals(ex.getMessage()))
                 throw ex;
 
-            long parentId = content.getUnsignedLong("parent_id");
+            long parentId = content.getUnsignedLong("parent_id", 0L);
             EventCache.LOG.debug("Caching THREAD_CREATE_EVENT for channel with uncached parent. Parent ID: {}", parentId);
             api.getEventCache().cache(EventCache.Type.CHANNEL, parentId, responseNumber, allContent, this::handle);
         }

File: src/main/java/net/dv8tion/jda/api/EmbedBuilder.java
Patch:
@@ -824,7 +824,7 @@ public EmbedBuilder addField(@Nullable MessageEmbed.Field field)
      * with {@link net.dv8tion.jda.api.EmbedBuilder#ZERO_WIDTH_SPACE}.
      *
      * <p><b><a href="https://raw.githubusercontent.com/discord-jda/JDA/assets/assets/docs/embeds/07-addField.png">Example of Inline</a></b>
-     * <p><b><a href="https://raw.githubusercontent.com/discord-jda/JDA/assets/assets/docs/embeds/08-addField.png">Example if Non-inline</a></b>
+     * <p><b><a href="https://raw.githubusercontent.com/discord-jda/JDA/assets/assets/docs/embeds/08-addField.png">Example of Non-inline</a></b>
      *
      * @param  name
      *         the name of the Field, displayed in bold above the {@code value}.
@@ -857,7 +857,7 @@ public EmbedBuilder addField(@Nonnull String name, @Nonnull String value, boolea
      * Adds a blank (empty) Field to the embed.
      *
      * <p><b><a href="https://raw.githubusercontent.com/discord-jda/JDA/assets/assets/docs/embeds/07-addField.png">Example of Inline</a></b>
-     * <p><b><a href="https://raw.githubusercontent.com/discord-jda/JDA/assets/assets/docs/embeds/08-addField.png">Example if Non-inline</a></b>
+     * <p><b><a href="https://raw.githubusercontent.com/discord-jda/JDA/assets/assets/docs/embeds/08-addField.png">Example of Non-inline</a></b>
      *
      * @param  inline
      *         whether or not this field should display inline

File: src/main/java/net/dv8tion/jda/internal/entities/automod/AutoModExecutionImpl.java
Patch:
@@ -39,7 +39,7 @@ public class AutoModExecutionImpl implements AutoModExecution
     public AutoModExecutionImpl(Guild guild, DataObject json)
     {
         this.guild = guild;
-        this.channel = guild.getChannelById(GuildMessageChannel.class, json.getUnsignedLong("channel_id"));
+        this.channel = guild.getChannelById(GuildMessageChannel.class, json.getUnsignedLong("channel_id", 0L));
         this.response = new AutoModResponseImpl(guild, json.getObject("action"));
         this.type = AutoModTriggerType.fromKey(json.getInt("rule_trigger_type", -1));
         this.userId = json.getUnsignedLong("user_id");

File: src/main/java/net/dv8tion/jda/internal/managers/ScheduledEventManagerImpl.java
Patch:
@@ -215,11 +215,9 @@ private void preChecks()
     {
         if (shouldUpdate(LOCATION))
         {
-            Checks.check(getScheduledEvent().getStatus() == ScheduledEvent.Status.SCHEDULED, "Cannot update location of non-scheduled event.");
+            Checks.check(getScheduledEvent().getStatus() == ScheduledEvent.Status.SCHEDULED || (entityType == ScheduledEvent.Type.EXTERNAL && getScheduledEvent().getType() == ScheduledEvent.Type.EXTERNAL), "Cannot update location type or location channel of non-scheduled event.");
             if (entityType == ScheduledEvent.Type.EXTERNAL && endTime == null && getScheduledEvent().getEndTime() == null)
                 throw new IllegalStateException("Missing required parameter: End Time");
-            if (entityType == ScheduledEvent.Type.EXTERNAL)
-                Checks.check((endTime != null ? endTime : getScheduledEvent().getEndTime()).isAfter(startTime), "Cannot schedule event to end before starting!");
         }
 
         if (shouldUpdate(START_TIME))

File: src/main/java/net/dv8tion/jda/internal/entities/SelfUserImpl.java
Patch:
@@ -111,7 +111,7 @@ public static SelfUserImpl copyOf(SelfUserImpl other, JDAImpl jda)
         selfUser.setName(other.name)
                 .setGlobalName(other.globalName)
                 .setAvatarId(other.avatarId)
-                .setDiscriminator(other.getDiscriminator())
+                .setDiscriminator(other.getDiscriminatorInt())
                 .setBot(other.bot);
         return selfUser
                 .setVerified(other.verified)

File: src/main/java/net/dv8tion/jda/internal/entities/UserSnowflakeImpl.java
Patch:
@@ -47,7 +47,7 @@ public String getAsMention()
     @Override
     public String getDefaultAvatarId()
     {
-        return String.valueOf((id >> 22) % 5);
+        return String.valueOf((id >> 22) % 6);
     }
 
     @Override

File: src/main/java/net/dv8tion/jda/api/audit/TargetType.java
Patch:
@@ -42,6 +42,7 @@ public enum TargetType
     STAGE_INSTANCE,
     STICKER,
     THREAD,
-	SCHEDULED_EVENT,
+    SCHEDULED_EVENT,
+    AUTO_MODERATION_RULE,
     UNKNOWN
 }

File: src/main/java/net/dv8tion/jda/api/requests/ErrorResponse.java
Patch:
@@ -181,6 +181,9 @@ public enum ErrorResponse
     MAX_LOTTIE_ANIMATION_DIMENSION(           170005, "Lottie animation maximum dimensions exceeded"),
     STICKER_FPS_TOO_SMALL_OR_TOO_LARGE(       170006, "Sticker frame rate is either too small or too large"),
     MAX_STICKER_ANIMATION_DURATION(           170007, "Sticker animation duration exceeds maximum of 5 seconds"),
+    MESSAGE_BLOCKED_BY_AUTOMOD(               200000, "Message was blocked by automatic moderation"),
+    TITLE_BLOCKED_BY_AUTOMOD(                 200001, "Title was blocked by automatic moderation"),
+    MESSAGE_BLOCKED_BY_HARMFUL_LINK_FILTER(   240000, "Message blocked by harmful links filter"),
 
     SERVER_ERROR(                                 0, "Discord encountered an internal server error! Not good!");
 

File: src/main/java/net/dv8tion/jda/api/interactions/components/selections/EntitySelectMenu.java
Patch:
@@ -48,7 +48,7 @@
  *
  *   EntitySelectMenu menu = EntitySelectMenu.create("menu:class", SelectTarget.ROLE)
  *     .setPlaceholder("Choose your class") // shows the placeholder indicating what this menu is for
- *     .setRequireRange(1, 1) // must select exactly one
+ *     .setRequiredRange(1, 1) // must select exactly one
  *     .build();
  *
  *   event.reply("Please pick your class below")

File: src/main/java/net/dv8tion/jda/api/events/guild/GuildBanEvent.java
Patch:
@@ -27,11 +27,11 @@
  * <p>Can be used to retrieve the user who was banned (if available) and the triggering guild.
  * <br><b>Note</b>: This does not directly indicate that a Member is removed from the Guild!
  *
- * @see net.dv8tion.jda.api.events.guild.member.GuildMemberRemoveEvent GuildMemberRemoveEvent
- *
  * <p><b>Requirements</b><br>
  *
  * <p>This event requires the {@link net.dv8tion.jda.api.requests.GatewayIntent#GUILD_MODERATION GUILD_MODERATION} intent to be enabled.
+ *
+ * @see net.dv8tion.jda.api.events.guild.member.GuildMemberRemoveEvent
  */
 public class GuildBanEvent extends GenericGuildEvent
 {

File: src/main/java/net/dv8tion/jda/api/JDABuilder.java
Patch:
@@ -828,7 +828,7 @@ public JDABuilder setRequestTimeoutRetry(boolean retryOnTimeout)
      * Sets the token that will be used by the {@link net.dv8tion.jda.api.JDA} instance to log in when
      * {@link net.dv8tion.jda.api.JDABuilder#build() build()} is called.
      *
-     * <p><b>For {@link net.dv8tion.jda.api.AccountType#BOT}</b><br>
+     * <p>To get a bot token:<br>
      * <ol>
      *     <li>Go to your <a href="https://discord.com/developers/applications/me">Discord Applications</a></li>
      *     <li>Create or select an already existing application</li>

File: src/main/java/net/dv8tion/jda/api/entities/Guild.java
Patch:
@@ -4057,7 +4057,6 @@ default AuditableRestAction<Void> modifyMemberRoles(@Nonnull Member member, @Non
      *         <ul>
      *             <li>If the specified Member is {@code null} or not from the same Guild</li>
      *             <li>If the specified Member already is the Guild owner</li>
-     *             <li>If the specified Member is a bot account ({@link net.dv8tion.jda.api.AccountType#BOT AccountType.BOT})</li>
      *         </ul>
      *
      * @return {@link net.dv8tion.jda.api.requests.restaction.AuditableRestAction AuditableRestAction}

File: src/main/java/net/dv8tion/jda/api/entities/channel/concrete/ThreadChannel.java
Patch:
@@ -208,8 +208,6 @@ default GuildMessageChannelUnion getParentMessageChannel()
      *     <br>The request was attempted after the parent channel was deleted.</li>
      * </ul>
      *
-     * @throws net.dv8tion.jda.api.exceptions.AccountTypeException
-     *         If the currently logged in account is not from {@link net.dv8tion.jda.api.AccountType#BOT AccountType.BOT}
      * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
      *         If this is a {@link GuildMessageChannel GuildMessageChannel} and the logged in account does not have
      *         <ul>

File: src/main/java/net/dv8tion/jda/api/requests/restaction/AuditableRestAction.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.function.BooleanSupplier;
 
 /**
- * Extension of RestAction to allow setting a reason, only available to accounts of {@link net.dv8tion.jda.api.AccountType#BOT AccountType.BOT}
+ * Extension of RestAction to allow setting a reason.
  *
  * <p>This will automatically use the {@link net.dv8tion.jda.api.audit.ThreadLocalReason ThreadLocalReason} if no
  * reason was specified via {@link #reason(String)}.

File: src/main/java/net/dv8tion/jda/api/utils/SessionControllerAdapter.java
Patch:
@@ -17,9 +17,7 @@
 package net.dv8tion.jda.api.utils;
 
 import com.neovisionaries.ws.client.OpeningHandshakeException;
-import net.dv8tion.jda.api.AccountType;
 import net.dv8tion.jda.api.JDA;
-import net.dv8tion.jda.api.exceptions.AccountTypeException;
 import net.dv8tion.jda.api.exceptions.InvalidTokenException;
 import net.dv8tion.jda.api.requests.Request;
 import net.dv8tion.jda.api.requests.Response;
@@ -75,7 +73,6 @@ public RestRateLimiter.GlobalRateLimit getRateLimitHandle()
     @Override
     public ShardedGateway getShardedGateway(@Nonnull JDA api)
     {
-        AccountTypeException.check(api.getAccountType(), AccountType.BOT);
         return new RestActionImpl<ShardedGateway>(api, Route.Misc.GATEWAY_BOT.compile())
         {
             @Override

File: src/main/java/net/dv8tion/jda/api/JDA.java
Patch:
@@ -33,6 +33,7 @@
 import net.dv8tion.jda.api.managers.Presence;
 import net.dv8tion.jda.api.requests.GatewayIntent;
 import net.dv8tion.jda.api.requests.RestAction;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.*;
 import net.dv8tion.jda.api.sharding.ShardManager;
 import net.dv8tion.jda.api.utils.MiscUtil;
@@ -42,7 +43,6 @@
 import net.dv8tion.jda.internal.interactions.CommandDataImpl;
 import net.dv8tion.jda.internal.requests.CompletedRestAction;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 import net.dv8tion.jda.internal.utils.EntityString;
 import net.dv8tion.jda.internal.utils.Helpers;

File: src/main/java/net/dv8tion/jda/api/entities/Message.java
Patch:
@@ -42,6 +42,7 @@
 import net.dv8tion.jda.api.interactions.components.LayoutComponent;
 import net.dv8tion.jda.api.interactions.components.buttons.Button;
 import net.dv8tion.jda.api.requests.RestAction;
+import net.dv8tion.jda.api.requests.RestConfig;
 import net.dv8tion.jda.api.requests.restaction.AuditableRestAction;
 import net.dv8tion.jda.api.requests.restaction.MessageCreateAction;
 import net.dv8tion.jda.api.requests.restaction.MessageEditAction;
@@ -57,7 +58,6 @@
 import net.dv8tion.jda.internal.JDAImpl;
 import net.dv8tion.jda.internal.entities.ReceivedMessage;
 import net.dv8tion.jda.internal.requests.FunctionalCallback;
-import net.dv8tion.jda.internal.requests.Requester;
 import net.dv8tion.jda.internal.utils.Checks;
 import net.dv8tion.jda.internal.utils.IOUtil;
 import okhttp3.MultipartBody;
@@ -2608,7 +2608,7 @@ protected Request getRequest()
         {
             return new Request.Builder()
                 .url(getUrl())
-                .addHeader("user-agent", Requester.USER_AGENT)
+                .addHeader("user-agent", RestConfig.USER_AGENT)
                 .addHeader("accept-encoding", "gzip, deflate")
                 .build();
         }

File: src/main/java/net/dv8tion/jda/api/entities/MessageHistory.java
Patch:
@@ -25,14 +25,14 @@
 import net.dv8tion.jda.api.requests.Request;
 import net.dv8tion.jda.api.requests.Response;
 import net.dv8tion.jda.api.requests.RestAction;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.utils.MiscUtil;
 import net.dv8tion.jda.api.utils.TimeUtil;
 import net.dv8tion.jda.api.utils.data.DataArray;
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.internal.JDAImpl;
 import net.dv8tion.jda.internal.entities.EntityBuilder;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 import net.dv8tion.jda.internal.utils.JDALogger;
 import org.apache.commons.collections4.map.ListOrderedMap;

File: src/main/java/net/dv8tion/jda/api/entities/MessageReaction.java
Patch:
@@ -30,12 +30,11 @@
 import net.dv8tion.jda.api.exceptions.InsufficientPermissionException;
 import net.dv8tion.jda.api.exceptions.PermissionException;
 import net.dv8tion.jda.api.requests.RestAction;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.pagination.ReactionPaginationAction;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.requests.restaction.pagination.ReactionPaginationActionImpl;
 import net.dv8tion.jda.internal.utils.Checks;
-import net.dv8tion.jda.internal.utils.EncodingUtil;
 import net.dv8tion.jda.internal.utils.EntityString;
 
 import javax.annotation.CheckReturnValue;
@@ -340,7 +339,7 @@ public RestAction<Void> removeReaction(@Nonnull User user)
                 throw new InsufficientPermissionException(guildChannel, Permission.MESSAGE_MANAGE);
         }
 
-        String code = EncodingUtil.encodeReaction(emoji.getAsReactionCode());
+        String code = emoji.getAsReactionCode();
         String target = self ? "@me" : user.getId();
         Route.CompiledRoute route = Route.Messages.REMOVE_REACTION.compile(channel.getId(), getMessageId(), code, target);
         return new RestActionImpl<>(getJDA(), route);

File: src/main/java/net/dv8tion/jda/api/entities/MessageReference.java
Patch:
@@ -23,10 +23,10 @@
 import net.dv8tion.jda.api.entities.channel.unions.MessageChannelUnion;
 import net.dv8tion.jda.api.exceptions.InsufficientPermissionException;
 import net.dv8tion.jda.api.requests.RestAction;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.internal.JDAImpl;
 import net.dv8tion.jda.internal.requests.CompletedRestAction;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 
 import javax.annotation.Nonnull;

File: src/main/java/net/dv8tion/jda/api/entities/Webhook.java
Patch:
@@ -22,9 +22,9 @@
 import net.dv8tion.jda.api.entities.channel.unions.IWebhookContainerUnion;
 import net.dv8tion.jda.api.managers.WebhookManager;
 import net.dv8tion.jda.api.requests.RestAction;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.AuditableRestAction;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 
 import javax.annotation.CheckReturnValue;
 import javax.annotation.Nonnull;

File: src/main/java/net/dv8tion/jda/api/entities/channel/concrete/NewsChannel.java
Patch:
@@ -23,9 +23,9 @@
 import net.dv8tion.jda.api.exceptions.MissingAccessException;
 import net.dv8tion.jda.api.managers.channel.concrete.NewsChannelManager;
 import net.dv8tion.jda.api.requests.RestAction;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.ChannelAction;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 
 import javax.annotation.CheckReturnValue;

File: src/main/java/net/dv8tion/jda/api/entities/templates/Template.java
Patch:
@@ -22,10 +22,10 @@
 import net.dv8tion.jda.api.exceptions.InsufficientPermissionException;
 import net.dv8tion.jda.api.managers.TemplateManager;
 import net.dv8tion.jda.api.requests.RestAction;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.internal.JDAImpl;
 import net.dv8tion.jda.internal.managers.TemplateManagerImpl;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 import net.dv8tion.jda.internal.utils.EntityString;
 

File: src/main/java/net/dv8tion/jda/api/events/http/HttpRequestEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.api.requests.Request;
 import net.dv8tion.jda.api.requests.Response;
 import net.dv8tion.jda.api.requests.RestAction;
+import net.dv8tion.jda.api.requests.Route.CompiledRoute;
 import net.dv8tion.jda.api.utils.data.DataArray;
 import net.dv8tion.jda.api.utils.data.DataObject;
-import net.dv8tion.jda.internal.requests.Route.CompiledRoute;
 import okhttp3.Headers;
 import okhttp3.RequestBody;
 import okhttp3.ResponseBody;

File: src/main/java/net/dv8tion/jda/api/exceptions/RateLimitedException.java
Patch:
@@ -16,7 +16,7 @@
 
 package net.dv8tion.jda.api.exceptions;
 
-import net.dv8tion.jda.internal.requests.Route;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.internal.utils.Helpers;
 
 /**

File: src/main/java/net/dv8tion/jda/api/requests/Request.java
Patch:
@@ -25,7 +25,6 @@
 import net.dv8tion.jda.internal.JDAImpl;
 import net.dv8tion.jda.internal.requests.CallbackContext;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.IOUtil;
 import okhttp3.MultipartBody;
 import okhttp3.RequestBody;
@@ -269,6 +268,8 @@ public boolean shouldQueue()
 
     public void cancel()
     {
+        if (!this.isCancelled)
+            onCancelled();
         this.isCancelled = true;
     }
 

File: src/main/java/net/dv8tion/jda/api/requests/RestFuture.java
Patch:
@@ -18,7 +18,6 @@
 
 import net.dv8tion.jda.internal.JDAImpl;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import okhttp3.RequestBody;
 import org.apache.commons.collections4.map.CaseInsensitiveMap;
 

File: src/main/java/net/dv8tion/jda/api/sharding/ShardManager.java
Patch:
@@ -29,14 +29,14 @@
 import net.dv8tion.jda.api.exceptions.InvalidTokenException;
 import net.dv8tion.jda.api.requests.GatewayIntent;
 import net.dv8tion.jda.api.requests.RestAction;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.utils.MiscUtil;
 import net.dv8tion.jda.api.utils.cache.CacheView;
 import net.dv8tion.jda.api.utils.cache.ShardCacheView;
 import net.dv8tion.jda.api.utils.cache.SnowflakeCacheView;
 import net.dv8tion.jda.internal.JDAImpl;
 import net.dv8tion.jda.internal.requests.CompletedRestAction;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 
 import javax.annotation.CheckReturnValue;

File: src/main/java/net/dv8tion/jda/api/utils/FileProxy.java
Patch:
@@ -16,8 +16,8 @@
 package net.dv8tion.jda.api.utils;
 
 import net.dv8tion.jda.api.exceptions.HttpException;
+import net.dv8tion.jda.api.requests.RestConfig;
 import net.dv8tion.jda.internal.requests.FunctionalCallback;
-import net.dv8tion.jda.internal.requests.Requester;
 import net.dv8tion.jda.internal.utils.Checks;
 import net.dv8tion.jda.internal.utils.FutureUtil;
 import net.dv8tion.jda.internal.utils.IOUtil;
@@ -135,7 +135,7 @@ protected Request getRequest(String url)
     {
         return new Request.Builder()
                 .url(url)
-                .addHeader("user-agent", Requester.USER_AGENT)
+                .addHeader("user-agent", RestConfig.USER_AGENT)
                 .addHeader("accept-encoding", "gzip, deflate")
                 .build();
     }

File: src/main/java/net/dv8tion/jda/internal/entities/AbstractWebhookClient.java
Patch:
@@ -22,14 +22,14 @@
 import net.dv8tion.jda.api.interactions.components.ActionRow;
 import net.dv8tion.jda.api.interactions.components.LayoutComponent;
 import net.dv8tion.jda.api.requests.RestAction;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.WebhookMessageCreateAction;
 import net.dv8tion.jda.api.requests.restaction.WebhookMessageEditAction;
 import net.dv8tion.jda.api.utils.AttachedFile;
 import net.dv8tion.jda.api.utils.FileUpload;
 import net.dv8tion.jda.api.utils.messages.MessageCreateData;
 import net.dv8tion.jda.api.utils.messages.MessageEditData;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.requests.restaction.WebhookMessageCreateActionImpl;
 import net.dv8tion.jda.internal.requests.restaction.WebhookMessageEditActionImpl;
 import net.dv8tion.jda.internal.utils.Checks;

File: src/main/java/net/dv8tion/jda/internal/entities/GuildImpl.java
Patch:
@@ -49,6 +49,7 @@
 import net.dv8tion.jda.api.managers.GuildWelcomeScreenManager;
 import net.dv8tion.jda.api.requests.GatewayIntent;
 import net.dv8tion.jda.api.requests.RestAction;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.*;
 import net.dv8tion.jda.api.requests.restaction.order.CategoryOrderAction;
 import net.dv8tion.jda.api.requests.restaction.order.ChannelOrderAction;

File: src/main/java/net/dv8tion/jda/internal/entities/GuildVoiceStateImpl.java
Patch:
@@ -26,10 +26,10 @@
 import net.dv8tion.jda.api.entities.channel.unions.AudioChannelUnion;
 import net.dv8tion.jda.api.exceptions.InsufficientPermissionException;
 import net.dv8tion.jda.api.requests.RestAction;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.internal.requests.CompletedRestAction;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.EntityString;
 import net.dv8tion.jda.internal.utils.Helpers;
 

File: src/main/java/net/dv8tion/jda/internal/entities/InviteImpl.java
Patch:
@@ -24,13 +24,13 @@
 import net.dv8tion.jda.api.entities.channel.middleman.GuildChannel;
 import net.dv8tion.jda.api.exceptions.InsufficientPermissionException;
 import net.dv8tion.jda.api.requests.RestAction;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.AuditableRestAction;
 import net.dv8tion.jda.api.utils.data.DataArray;
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.internal.JDAImpl;
 import net.dv8tion.jda.internal.requests.CompletedRestAction;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.requests.restaction.AuditableRestActionImpl;
 import net.dv8tion.jda.internal.utils.Checks;
 import net.dv8tion.jda.internal.utils.EntityString;

File: src/main/java/net/dv8tion/jda/internal/entities/PermissionOverrideImpl.java
Patch:
@@ -22,10 +22,10 @@
 import net.dv8tion.jda.api.entities.channel.attribute.IPermissionContainer;
 import net.dv8tion.jda.api.entities.channel.unions.IPermissionContainerUnion;
 import net.dv8tion.jda.api.exceptions.InsufficientPermissionException;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.AuditableRestAction;
 import net.dv8tion.jda.api.requests.restaction.PermissionOverrideAction;
 import net.dv8tion.jda.internal.JDAImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.requests.restaction.AuditableRestActionImpl;
 import net.dv8tion.jda.internal.requests.restaction.PermissionOverrideActionImpl;
 import net.dv8tion.jda.internal.utils.Checks;

File: src/main/java/net/dv8tion/jda/internal/entities/ReceivedMessage.java
Patch:
@@ -39,6 +39,7 @@
 import net.dv8tion.jda.api.interactions.components.LayoutComponent;
 import net.dv8tion.jda.api.requests.GatewayIntent;
 import net.dv8tion.jda.api.requests.RestAction;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.AuditableRestAction;
 import net.dv8tion.jda.api.requests.restaction.MessageEditAction;
 import net.dv8tion.jda.api.requests.restaction.ThreadChannelAction;
@@ -49,7 +50,6 @@
 import net.dv8tion.jda.api.utils.messages.MessageEditData;
 import net.dv8tion.jda.internal.JDAImpl;
 import net.dv8tion.jda.internal.requests.CompletedRestAction;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.requests.restaction.AuditableRestActionImpl;
 import net.dv8tion.jda.internal.utils.Checks;
 import net.dv8tion.jda.internal.utils.EntityString;

File: src/main/java/net/dv8tion/jda/internal/entities/RoleImpl.java
Patch:
@@ -28,14 +28,14 @@
 import net.dv8tion.jda.api.exceptions.HierarchyException;
 import net.dv8tion.jda.api.exceptions.InsufficientPermissionException;
 import net.dv8tion.jda.api.managers.RoleManager;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.AuditableRestAction;
 import net.dv8tion.jda.api.requests.restaction.RoleAction;
 import net.dv8tion.jda.api.utils.cache.CacheFlag;
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.internal.JDAImpl;
 import net.dv8tion.jda.internal.entities.channel.mixin.attribute.IPermissionContainerMixin;
 import net.dv8tion.jda.internal.managers.RoleManagerImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.requests.restaction.AuditableRestActionImpl;
 import net.dv8tion.jda.internal.utils.Checks;
 import net.dv8tion.jda.internal.utils.EntityString;

File: src/main/java/net/dv8tion/jda/internal/entities/StageInstanceImpl.java
Patch:
@@ -23,9 +23,9 @@
 import net.dv8tion.jda.api.exceptions.InsufficientPermissionException;
 import net.dv8tion.jda.api.managers.StageInstanceManager;
 import net.dv8tion.jda.api.requests.RestAction;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.internal.managers.StageInstanceManagerImpl;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.EntityString;
 
 import javax.annotation.Nonnull;

File: src/main/java/net/dv8tion/jda/internal/entities/UserImpl.java
Patch:
@@ -19,14 +19,14 @@
 import net.dv8tion.jda.api.entities.Guild;
 import net.dv8tion.jda.api.entities.User;
 import net.dv8tion.jda.api.entities.channel.concrete.PrivateChannel;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.CacheRestAction;
 import net.dv8tion.jda.api.utils.MiscUtil;
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.internal.JDAImpl;
 import net.dv8tion.jda.internal.entities.channel.concrete.PrivateChannelImpl;
 import net.dv8tion.jda.internal.requests.DeferredRestAction;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.EntityString;
 import net.dv8tion.jda.internal.utils.Helpers;
 

File: src/main/java/net/dv8tion/jda/internal/entities/WebhookImpl.java
Patch:
@@ -24,10 +24,10 @@
 import net.dv8tion.jda.api.exceptions.InsufficientPermissionException;
 import net.dv8tion.jda.api.managers.WebhookManager;
 import net.dv8tion.jda.api.requests.RestAction;
+import net.dv8tion.jda.api.requests.RestConfig;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.AuditableRestAction;
 import net.dv8tion.jda.internal.managers.WebhookManagerImpl;
-import net.dv8tion.jda.internal.requests.Requester;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.requests.restaction.AuditableRestActionImpl;
 import net.dv8tion.jda.internal.requests.restaction.WebhookMessageCreateActionImpl;
 import net.dv8tion.jda.internal.requests.restaction.WebhookMessageEditActionImpl;
@@ -139,7 +139,7 @@ public String getToken()
     @Override
     public String getUrl()
     {
-        return Requester.DISCORD_API_PREFIX + "webhooks/" + getId() + (getToken() == null ? "" : "/" + getToken());
+        return RestConfig.DEFAULT_BASE_URL + "webhooks/" + getId() + (getToken() == null ? "" : "/" + getToken());
     }
 
     @Override

File: src/main/java/net/dv8tion/jda/internal/entities/channel/concrete/NewsChannelImpl.java
Patch:
@@ -27,13 +27,13 @@
 import net.dv8tion.jda.api.entities.channel.unions.DefaultGuildChannelUnion;
 import net.dv8tion.jda.api.managers.channel.concrete.NewsChannelManager;
 import net.dv8tion.jda.api.requests.RestAction;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.ChannelAction;
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.internal.entities.GuildImpl;
 import net.dv8tion.jda.internal.entities.channel.middleman.AbstractStandardGuildMessageChannelImpl;
 import net.dv8tion.jda.internal.managers.channel.concrete.NewsChannelManagerImpl;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 
 import javax.annotation.Nonnull;

File: src/main/java/net/dv8tion/jda/internal/entities/channel/concrete/PrivateChannelImpl.java
Patch:
@@ -21,12 +21,12 @@
 import net.dv8tion.jda.api.entities.channel.ChannelType;
 import net.dv8tion.jda.api.entities.channel.concrete.PrivateChannel;
 import net.dv8tion.jda.api.requests.RestAction;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.internal.JDAImpl;
 import net.dv8tion.jda.internal.entities.channel.AbstractChannelImpl;
 import net.dv8tion.jda.internal.entities.channel.mixin.middleman.MessageChannelMixin;
 import net.dv8tion.jda.internal.requests.CompletedRestAction;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;

File: src/main/java/net/dv8tion/jda/internal/entities/channel/concrete/StageChannelImpl.java
Patch:
@@ -29,6 +29,7 @@
 import net.dv8tion.jda.api.exceptions.InsufficientPermissionException;
 import net.dv8tion.jda.api.managers.channel.concrete.StageChannelManager;
 import net.dv8tion.jda.api.requests.RestAction;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.ChannelAction;
 import net.dv8tion.jda.api.requests.restaction.StageInstanceAction;
 import net.dv8tion.jda.api.utils.MiscUtil;
@@ -42,7 +43,6 @@
 import net.dv8tion.jda.internal.entities.channel.mixin.middleman.GuildMessageChannelMixin;
 import net.dv8tion.jda.internal.managers.channel.concrete.StageChannelManagerImpl;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.requests.restaction.StageInstanceActionImpl;
 import net.dv8tion.jda.internal.utils.Checks;
 

File: src/main/java/net/dv8tion/jda/internal/entities/channel/concrete/ThreadChannelImpl.java
Patch:
@@ -32,6 +32,7 @@
 import net.dv8tion.jda.api.entities.channel.unions.IThreadContainerUnion;
 import net.dv8tion.jda.api.managers.channel.concrete.ThreadChannelManager;
 import net.dv8tion.jda.api.requests.RestAction;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.CacheRestAction;
 import net.dv8tion.jda.api.requests.restaction.pagination.ThreadMemberPaginationAction;
 import net.dv8tion.jda.api.utils.TimeUtil;
@@ -44,7 +45,6 @@
 import net.dv8tion.jda.internal.managers.channel.concrete.ThreadChannelManagerImpl;
 import net.dv8tion.jda.internal.requests.DeferredRestAction;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.requests.restaction.pagination.ThreadMemberPaginationActionImpl;
 import net.dv8tion.jda.internal.utils.Checks;
 import net.dv8tion.jda.internal.utils.Helpers;

File: src/main/java/net/dv8tion/jda/internal/entities/channel/mixin/ChannelMixin.java
Patch:
@@ -19,8 +19,8 @@
 import net.dv8tion.jda.api.entities.channel.Channel;
 import net.dv8tion.jda.api.entities.channel.unions.ChannelUnion;
 import net.dv8tion.jda.api.requests.RestAction;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 
 import javax.annotation.CheckReturnValue;
 import javax.annotation.Nonnull;

File: src/main/java/net/dv8tion/jda/internal/entities/channel/mixin/attribute/IInviteContainerMixin.java
Patch:
@@ -20,13 +20,13 @@
 import net.dv8tion.jda.api.entities.Invite;
 import net.dv8tion.jda.api.entities.channel.attribute.IInviteContainer;
 import net.dv8tion.jda.api.requests.RestAction;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.InviteAction;
 import net.dv8tion.jda.api.utils.data.DataArray;
 import net.dv8tion.jda.internal.JDAImpl;
 import net.dv8tion.jda.internal.entities.EntityBuilder;
 import net.dv8tion.jda.internal.entities.channel.mixin.middleman.GuildChannelMixin;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.requests.restaction.InviteActionImpl;
 
 import javax.annotation.Nonnull;

File: src/main/java/net/dv8tion/jda/internal/entities/channel/mixin/attribute/IThreadContainerMixin.java
Patch:
@@ -20,10 +20,10 @@
 import net.dv8tion.jda.api.entities.channel.ChannelType;
 import net.dv8tion.jda.api.entities.channel.attribute.IThreadContainer;
 import net.dv8tion.jda.api.entities.channel.unions.IThreadContainerUnion;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.ThreadChannelAction;
 import net.dv8tion.jda.api.requests.restaction.pagination.ThreadChannelPaginationAction;
 import net.dv8tion.jda.internal.entities.channel.mixin.middleman.GuildChannelMixin;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.requests.restaction.ThreadChannelActionImpl;
 import net.dv8tion.jda.internal.requests.restaction.pagination.ThreadChannelPaginationActionImpl;
 import net.dv8tion.jda.internal.utils.Checks;

File: src/main/java/net/dv8tion/jda/internal/entities/channel/mixin/attribute/IWebhookContainerMixin.java
Patch:
@@ -21,14 +21,14 @@
 import net.dv8tion.jda.api.entities.channel.attribute.IWebhookContainer;
 import net.dv8tion.jda.api.entities.channel.unions.IWebhookContainerUnion;
 import net.dv8tion.jda.api.requests.RestAction;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.AuditableRestAction;
 import net.dv8tion.jda.api.requests.restaction.WebhookAction;
 import net.dv8tion.jda.api.utils.data.DataArray;
 import net.dv8tion.jda.internal.JDAImpl;
 import net.dv8tion.jda.internal.entities.EntityBuilder;
 import net.dv8tion.jda.internal.entities.channel.mixin.middleman.GuildChannelMixin;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.requests.restaction.AuditableRestActionImpl;
 import net.dv8tion.jda.internal.requests.restaction.WebhookActionImpl;
 import net.dv8tion.jda.internal.utils.Checks;

File: src/main/java/net/dv8tion/jda/internal/entities/channel/mixin/middleman/GuildChannelMixin.java
Patch:
@@ -21,9 +21,9 @@
 import net.dv8tion.jda.api.entities.channel.middleman.GuildChannel;
 import net.dv8tion.jda.api.entities.channel.unions.GuildChannelUnion;
 import net.dv8tion.jda.api.exceptions.InsufficientPermissionException;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.AuditableRestAction;
 import net.dv8tion.jda.internal.entities.channel.mixin.ChannelMixin;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.requests.restaction.AuditableRestActionImpl;
 
 import javax.annotation.CheckReturnValue;

File: src/main/java/net/dv8tion/jda/internal/entities/channel/mixin/middleman/MessageChannelMixin.java
Patch:
@@ -28,6 +28,7 @@
 import net.dv8tion.jda.api.exceptions.InsufficientPermissionException;
 import net.dv8tion.jda.api.interactions.components.LayoutComponent;
 import net.dv8tion.jda.api.requests.RestAction;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.AuditableRestAction;
 import net.dv8tion.jda.api.requests.restaction.MessageCreateAction;
 import net.dv8tion.jda.api.requests.restaction.MessageEditAction;
@@ -40,7 +41,6 @@
 import net.dv8tion.jda.api.utils.messages.MessageCreateData;
 import net.dv8tion.jda.api.utils.messages.MessageEditData;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 
 import javax.annotation.CheckReturnValue;
 import javax.annotation.Nonnull;

File: src/main/java/net/dv8tion/jda/internal/entities/emoji/RichCustomEmojiImpl.java
Patch:
@@ -27,6 +27,7 @@
 import net.dv8tion.jda.api.exceptions.InsufficientPermissionException;
 import net.dv8tion.jda.api.managers.CustomEmojiManager;
 import net.dv8tion.jda.api.requests.ErrorResponse;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.AuditableRestAction;
 import net.dv8tion.jda.api.requests.restaction.CacheRestAction;
 import net.dv8tion.jda.api.utils.data.DataObject;
@@ -35,7 +36,6 @@
 import net.dv8tion.jda.internal.managers.CustomEmojiManagerImpl;
 import net.dv8tion.jda.internal.requests.DeferredRestAction;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.requests.restaction.AuditableRestActionImpl;
 import net.dv8tion.jda.internal.utils.EntityString;
 

File: src/main/java/net/dv8tion/jda/internal/entities/sticker/GuildStickerImpl.java
Patch:
@@ -24,6 +24,7 @@
 import net.dv8tion.jda.api.exceptions.ErrorResponseException;
 import net.dv8tion.jda.api.exceptions.InsufficientPermissionException;
 import net.dv8tion.jda.api.managers.GuildStickerManager;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.ErrorResponse;
 import net.dv8tion.jda.api.requests.restaction.AuditableRestAction;
 import net.dv8tion.jda.api.requests.restaction.CacheRestAction;
@@ -32,7 +33,6 @@
 import net.dv8tion.jda.internal.managers.GuildStickerManagerImpl;
 import net.dv8tion.jda.internal.requests.DeferredRestAction;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.requests.restaction.AuditableRestActionImpl;
 import net.dv8tion.jda.internal.utils.EntityString;
 import net.dv8tion.jda.internal.utils.Helpers;

File: src/main/java/net/dv8tion/jda/internal/interactions/command/CommandImpl.java
Patch:
@@ -24,12 +24,12 @@
 import net.dv8tion.jda.api.interactions.commands.localization.LocalizationMap;
 import net.dv8tion.jda.api.interactions.commands.privileges.IntegrationPrivilege;
 import net.dv8tion.jda.api.requests.RestAction;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.CommandEditAction;
 import net.dv8tion.jda.api.utils.data.DataArray;
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.internal.JDAImpl;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.requests.restaction.CommandEditActionImpl;
 import net.dv8tion.jda.internal.utils.Checks;
 import net.dv8tion.jda.internal.utils.EntityString;

File: src/main/java/net/dv8tion/jda/internal/managers/AccountManagerImpl.java
Patch:
@@ -21,8 +21,8 @@
 import net.dv8tion.jda.api.managers.AccountManager;
 import net.dv8tion.jda.api.requests.Request;
 import net.dv8tion.jda.api.requests.Response;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.utils.data.DataObject;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 import okhttp3.RequestBody;
 

File: src/main/java/net/dv8tion/jda/internal/managers/CustomEmojiManagerImpl.java
Patch:
@@ -21,10 +21,10 @@
 import net.dv8tion.jda.api.entities.emoji.RichCustomEmoji;
 import net.dv8tion.jda.api.exceptions.InsufficientPermissionException;
 import net.dv8tion.jda.api.managers.CustomEmojiManager;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.utils.data.DataArray;
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.internal.entities.emoji.RichCustomEmojiImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 import okhttp3.RequestBody;
 

File: src/main/java/net/dv8tion/jda/internal/managers/GuildManagerImpl.java
Patch:
@@ -23,8 +23,8 @@
 import net.dv8tion.jda.api.entities.channel.concrete.VoiceChannel;
 import net.dv8tion.jda.api.exceptions.InsufficientPermissionException;
 import net.dv8tion.jda.api.managers.GuildManager;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.utils.data.DataObject;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 import okhttp3.RequestBody;
 

File: src/main/java/net/dv8tion/jda/internal/managers/GuildStickerManagerImpl.java
Patch:
@@ -5,8 +5,8 @@
 import net.dv8tion.jda.api.entities.sticker.StickerSnowflake;
 import net.dv8tion.jda.api.exceptions.InsufficientPermissionException;
 import net.dv8tion.jda.api.managers.GuildStickerManager;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.utils.data.DataObject;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 import okhttp3.RequestBody;
 

File: src/main/java/net/dv8tion/jda/internal/managers/GuildWelcomeScreenManagerImpl.java
Patch:
@@ -21,9 +21,9 @@
 import net.dv8tion.jda.api.entities.GuildWelcomeScreen;
 import net.dv8tion.jda.api.exceptions.InsufficientPermissionException;
 import net.dv8tion.jda.api.managers.GuildWelcomeScreenManager;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.utils.data.DataArray;
 import net.dv8tion.jda.api.utils.data.DataObject;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 import okhttp3.RequestBody;
 

File: src/main/java/net/dv8tion/jda/internal/managers/ManagerBase.java
Patch:
@@ -19,7 +19,7 @@
 import net.dv8tion.jda.api.JDA;
 import net.dv8tion.jda.api.exceptions.RateLimitedException;
 import net.dv8tion.jda.api.managers.Manager;
-import net.dv8tion.jda.internal.requests.Route;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.internal.requests.restaction.AuditableRestActionImpl;
 import net.dv8tion.jda.internal.utils.Checks;
 

File: src/main/java/net/dv8tion/jda/internal/managers/PermOverrideManagerImpl.java
Patch:
@@ -22,9 +22,9 @@
 import net.dv8tion.jda.api.entities.channel.attribute.IPermissionContainer;
 import net.dv8tion.jda.api.exceptions.InsufficientPermissionException;
 import net.dv8tion.jda.api.managers.PermOverrideManager;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.internal.entities.channel.mixin.attribute.IPermissionContainerMixin;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 import okhttp3.RequestBody;
 

File: src/main/java/net/dv8tion/jda/internal/managers/RoleManagerImpl.java
Patch:
@@ -24,8 +24,8 @@
 import net.dv8tion.jda.api.exceptions.HierarchyException;
 import net.dv8tion.jda.api.exceptions.InsufficientPermissionException;
 import net.dv8tion.jda.api.managers.RoleManager;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.utils.data.DataObject;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 import net.dv8tion.jda.internal.utils.PermissionUtil;
 import okhttp3.RequestBody;

File: src/main/java/net/dv8tion/jda/internal/managers/ScheduledEventManagerImpl.java
Patch:
@@ -16,14 +16,14 @@
 
 package net.dv8tion.jda.internal.managers;
 
-import net.dv8tion.jda.api.entities.ScheduledEvent;
 import net.dv8tion.jda.api.entities.Icon;
+import net.dv8tion.jda.api.entities.ScheduledEvent;
 import net.dv8tion.jda.api.entities.channel.concrete.StageChannel;
 import net.dv8tion.jda.api.entities.channel.concrete.VoiceChannel;
 import net.dv8tion.jda.api.entities.channel.middleman.GuildChannel;
 import net.dv8tion.jda.api.managers.ScheduledEventManager;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.utils.data.DataObject;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 import net.dv8tion.jda.internal.utils.Helpers;
 import okhttp3.RequestBody;

File: src/main/java/net/dv8tion/jda/internal/managers/StageInstanceManagerImpl.java
Patch:
@@ -18,8 +18,8 @@
 
 import net.dv8tion.jda.api.entities.StageInstance;
 import net.dv8tion.jda.api.managers.StageInstanceManager;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.utils.data.DataObject;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 import okhttp3.RequestBody;
 

File: src/main/java/net/dv8tion/jda/internal/managers/TemplateManagerImpl.java
Patch:
@@ -22,8 +22,8 @@
 import net.dv8tion.jda.api.entities.templates.Template;
 import net.dv8tion.jda.api.exceptions.InsufficientPermissionException;
 import net.dv8tion.jda.api.managers.TemplateManager;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.utils.data.DataObject;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 import okhttp3.RequestBody;
 

File: src/main/java/net/dv8tion/jda/internal/managers/WebhookManagerImpl.java
Patch:
@@ -24,8 +24,8 @@
 import net.dv8tion.jda.api.entities.channel.middleman.GuildChannel;
 import net.dv8tion.jda.api.exceptions.InsufficientPermissionException;
 import net.dv8tion.jda.api.managers.WebhookManager;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.utils.data.DataObject;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 import okhttp3.RequestBody;
 

File: src/main/java/net/dv8tion/jda/internal/managers/channel/ChannelManagerImpl.java
Patch:
@@ -38,12 +38,12 @@
 import net.dv8tion.jda.api.entities.emoji.UnicodeEmoji;
 import net.dv8tion.jda.api.exceptions.InsufficientPermissionException;
 import net.dv8tion.jda.api.managers.channel.ChannelManager;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.utils.data.DataArray;
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.internal.entities.channel.mixin.attribute.IPermissionContainerMixin;
 import net.dv8tion.jda.internal.entities.channel.mixin.middleman.GuildChannelMixin;
 import net.dv8tion.jda.internal.managers.ManagerBase;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.requests.restaction.PermOverrideData;
 import net.dv8tion.jda.internal.utils.Checks;
 import net.dv8tion.jda.internal.utils.PermissionUtil;

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/AuditableRestActionImpl.java
Patch:
@@ -20,10 +20,10 @@
 import net.dv8tion.jda.api.audit.ThreadLocalReason;
 import net.dv8tion.jda.api.requests.Request;
 import net.dv8tion.jda.api.requests.Response;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.AuditableRestAction;
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.EncodingUtil;
 import okhttp3.RequestBody;
 import org.apache.commons.collections4.map.CaseInsensitiveMap;

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/ChannelActionImpl.java
Patch:
@@ -38,11 +38,11 @@
 import net.dv8tion.jda.api.exceptions.InsufficientPermissionException;
 import net.dv8tion.jda.api.requests.Request;
 import net.dv8tion.jda.api.requests.Response;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.ChannelAction;
 import net.dv8tion.jda.api.utils.data.DataArray;
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.internal.entities.EntityBuilder;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 import net.dv8tion.jda.internal.utils.PermissionUtil;
 import okhttp3.RequestBody;

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/CommandCreateActionImpl.java
Patch:
@@ -26,13 +26,13 @@
 import net.dv8tion.jda.api.interactions.commands.localization.LocalizationMap;
 import net.dv8tion.jda.api.requests.Request;
 import net.dv8tion.jda.api.requests.Response;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.CommandCreateAction;
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.internal.JDAImpl;
 import net.dv8tion.jda.internal.interactions.CommandDataImpl;
 import net.dv8tion.jda.internal.interactions.command.CommandImpl;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import okhttp3.RequestBody;
 import org.jetbrains.annotations.NotNull;
 

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/CommandEditActionImpl.java
Patch:
@@ -26,12 +26,12 @@
 import net.dv8tion.jda.api.interactions.commands.build.SubcommandGroupData;
 import net.dv8tion.jda.api.requests.Request;
 import net.dv8tion.jda.api.requests.Response;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.CommandEditAction;
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.internal.interactions.CommandDataImpl;
 import net.dv8tion.jda.internal.interactions.command.CommandImpl;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 import okhttp3.RequestBody;
 

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/CommandListUpdateActionImpl.java
Patch:
@@ -22,12 +22,12 @@
 import net.dv8tion.jda.api.interactions.commands.build.Commands;
 import net.dv8tion.jda.api.requests.Request;
 import net.dv8tion.jda.api.requests.Response;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.CommandListUpdateAction;
 import net.dv8tion.jda.api.utils.data.DataArray;
 import net.dv8tion.jda.internal.entities.GuildImpl;
 import net.dv8tion.jda.internal.interactions.command.CommandImpl;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 import okhttp3.RequestBody;
 

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/ForumPostActionImpl.java
Patch:
@@ -28,13 +28,13 @@
 import net.dv8tion.jda.api.entities.channel.forums.ForumTagSnowflake;
 import net.dv8tion.jda.api.requests.Request;
 import net.dv8tion.jda.api.requests.Response;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.ForumPostAction;
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.api.utils.messages.MessageCreateBuilder;
 import net.dv8tion.jda.api.utils.messages.MessageCreateData;
 import net.dv8tion.jda.internal.entities.EntityBuilder;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 import net.dv8tion.jda.internal.utils.message.MessageCreateBuilderMixin;
 import okhttp3.RequestBody;

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/GuildActionImpl.java
Patch:
@@ -20,11 +20,11 @@
 import net.dv8tion.jda.api.entities.Guild;
 import net.dv8tion.jda.api.entities.Icon;
 import net.dv8tion.jda.api.entities.channel.ChannelType;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.GuildAction;
 import net.dv8tion.jda.api.utils.data.DataArray;
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 import okhttp3.RequestBody;
 

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/InviteActionImpl.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.api.entities.Invite;
 import net.dv8tion.jda.api.requests.Request;
 import net.dv8tion.jda.api.requests.Response;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.InviteAction;
 import net.dv8tion.jda.api.utils.data.DataObject;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 import okhttp3.RequestBody;
 

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/MemberActionImpl.java
Patch:
@@ -20,10 +20,10 @@
 import net.dv8tion.jda.api.entities.Guild;
 import net.dv8tion.jda.api.entities.Role;
 import net.dv8tion.jda.api.entities.User;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.MemberAction;
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 import net.dv8tion.jda.internal.utils.Helpers;
 import okhttp3.RequestBody;

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/MessageCreateActionImpl.java
Patch:
@@ -23,12 +23,12 @@
 import net.dv8tion.jda.api.entities.sticker.StickerSnowflake;
 import net.dv8tion.jda.api.requests.Request;
 import net.dv8tion.jda.api.requests.Response;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.MessageCreateAction;
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.api.utils.messages.MessageCreateBuilder;
 import net.dv8tion.jda.api.utils.messages.MessageCreateData;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 import net.dv8tion.jda.internal.utils.message.MessageCreateBuilderMixin;
 import okhttp3.RequestBody;

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/MessageEditActionImpl.java
Patch:
@@ -20,11 +20,11 @@
 import net.dv8tion.jda.api.entities.channel.middleman.MessageChannel;
 import net.dv8tion.jda.api.requests.Request;
 import net.dv8tion.jda.api.requests.Response;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.MessageEditAction;
 import net.dv8tion.jda.api.utils.messages.MessageEditBuilder;
 import net.dv8tion.jda.api.utils.messages.MessageEditData;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.message.MessageEditBuilderMixin;
 import okhttp3.RequestBody;
 

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/PermissionOverrideActionImpl.java
Patch:
@@ -26,11 +26,11 @@
 import net.dv8tion.jda.api.exceptions.InsufficientPermissionException;
 import net.dv8tion.jda.api.requests.Request;
 import net.dv8tion.jda.api.requests.Response;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.PermissionOverrideAction;
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.internal.entities.PermissionOverrideImpl;
 import net.dv8tion.jda.internal.entities.channel.mixin.attribute.IPermissionContainerMixin;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 import net.dv8tion.jda.internal.utils.PermissionUtil;
 import okhttp3.RequestBody;

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/RoleActionImpl.java
Patch:
@@ -23,10 +23,10 @@
 import net.dv8tion.jda.api.exceptions.InsufficientPermissionException;
 import net.dv8tion.jda.api.requests.Request;
 import net.dv8tion.jda.api.requests.Response;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.RoleAction;
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.internal.entities.GuildImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 import okhttp3.RequestBody;
 

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/ScheduledEventActionImpl.java
Patch:
@@ -17,17 +17,17 @@
 package net.dv8tion.jda.internal.requests.restaction;
 
 import net.dv8tion.jda.api.entities.Guild;
-import net.dv8tion.jda.api.entities.ScheduledEvent;
 import net.dv8tion.jda.api.entities.Icon;
+import net.dv8tion.jda.api.entities.ScheduledEvent;
 import net.dv8tion.jda.api.entities.channel.concrete.StageChannel;
 import net.dv8tion.jda.api.entities.channel.concrete.VoiceChannel;
 import net.dv8tion.jda.api.entities.channel.middleman.GuildChannel;
 import net.dv8tion.jda.api.requests.Request;
 import net.dv8tion.jda.api.requests.Response;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.ScheduledEventAction;
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.internal.entities.GuildImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 import net.dv8tion.jda.internal.utils.Helpers;
 import okhttp3.RequestBody;

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/StageInstanceActionImpl.java
Patch:
@@ -20,11 +20,11 @@
 import net.dv8tion.jda.api.entities.channel.concrete.StageChannel;
 import net.dv8tion.jda.api.requests.Request;
 import net.dv8tion.jda.api.requests.Response;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.StageInstanceAction;
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.internal.entities.GuildImpl;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 import okhttp3.RequestBody;
 

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/ThreadChannelActionImpl.java
Patch:
@@ -23,9 +23,9 @@
 import net.dv8tion.jda.api.entities.channel.middleman.GuildChannel;
 import net.dv8tion.jda.api.requests.Request;
 import net.dv8tion.jda.api.requests.Response;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.ThreadChannelAction;
 import net.dv8tion.jda.api.utils.data.DataObject;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 import okhttp3.RequestBody;
 

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/TriggerRestAction.java
Patch:
@@ -20,10 +20,10 @@
 import net.dv8tion.jda.api.exceptions.ContextException;
 import net.dv8tion.jda.api.requests.Request;
 import net.dv8tion.jda.api.requests.Response;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.utils.MiscUtil;
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import okhttp3.RequestBody;
 
 import javax.annotation.Nonnull;

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/WebhookActionImpl.java
Patch:
@@ -23,9 +23,9 @@
 import net.dv8tion.jda.api.entities.channel.unions.IWebhookContainerUnion;
 import net.dv8tion.jda.api.requests.Request;
 import net.dv8tion.jda.api.requests.Response;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.WebhookAction;
 import net.dv8tion.jda.api.utils.data.DataObject;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 import okhttp3.RequestBody;
 

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/WebhookMessageCreateActionImpl.java
Patch:
@@ -20,12 +20,12 @@
 import net.dv8tion.jda.api.entities.Message.MessageFlag;
 import net.dv8tion.jda.api.requests.Request;
 import net.dv8tion.jda.api.requests.Response;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.WebhookMessageCreateAction;
 import net.dv8tion.jda.api.utils.FileUpload;
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.api.utils.messages.MessageCreateBuilder;
 import net.dv8tion.jda.api.utils.messages.MessageCreateData;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.message.MessageCreateBuilderMixin;
 import okhttp3.RequestBody;
 

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/WebhookMessageEditActionImpl.java
Patch:
@@ -19,11 +19,11 @@
 import net.dv8tion.jda.api.JDA;
 import net.dv8tion.jda.api.requests.Request;
 import net.dv8tion.jda.api.requests.Response;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.WebhookMessageEditAction;
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.api.utils.messages.MessageEditBuilder;
 import net.dv8tion.jda.api.utils.messages.MessageEditData;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.message.MessageEditBuilderMixin;
 import okhttp3.RequestBody;
 

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/interactions/InteractionCallbackImpl.java
Patch:
@@ -19,10 +19,10 @@
 import net.dv8tion.jda.api.requests.Request;
 import net.dv8tion.jda.api.requests.Response;
 import net.dv8tion.jda.api.requests.RestAction;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.interactions.InteractionCallbackAction;
 import net.dv8tion.jda.internal.interactions.InteractionImpl;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 
 import javax.annotation.Nonnull;
 import java.util.concurrent.CompletableFuture;

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/order/ChannelOrderActionImpl.java
Patch:
@@ -27,10 +27,10 @@
 import net.dv8tion.jda.api.entities.channel.concrete.Category;
 import net.dv8tion.jda.api.entities.channel.middleman.GuildChannel;
 import net.dv8tion.jda.api.exceptions.InsufficientPermissionException;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.order.ChannelOrderAction;
 import net.dv8tion.jda.api.utils.data.DataArray;
 import net.dv8tion.jda.api.utils.data.DataObject;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 import okhttp3.RequestBody;
 

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/order/OrderActionImpl.java
Patch:
@@ -17,9 +17,9 @@
 package net.dv8tion.jda.internal.requests.restaction.order;
 
 import net.dv8tion.jda.api.JDA;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.order.OrderAction;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 
 import javax.annotation.Nonnull;
@@ -45,7 +45,7 @@ public abstract class OrderActionImpl<T, M extends OrderAction<T, M>>
      *        JDA instance which is associated with the entities contained
      *        in the order list
      * @param route
-     *        The {@link net.dv8tion.jda.internal.requests.Route.CompiledRoute CompiledRoute}
+     *        The {@link net.dv8tion.jda.api.requests.Route.CompiledRoute CompiledRoute}
      *        which is provided to the {@link RestActionImpl#RestActionImpl(JDA, Route.CompiledRoute, okhttp3.RequestBody) RestAction Constructor}
      */
     public OrderActionImpl(JDA api, Route.CompiledRoute route)
@@ -62,7 +62,7 @@ public OrderActionImpl(JDA api, Route.CompiledRoute route)
      * @param ascendingOrder
      *        Whether or not the order of items should be ascending
      * @param route
-     *        The {@link net.dv8tion.jda.internal.requests.Route.CompiledRoute CompiledRoute}
+     *        The {@link net.dv8tion.jda.api.requests.Route.CompiledRoute CompiledRoute}
      *        which is provided to the {@link RestActionImpl#RestActionImpl(JDA, Route.CompiledRoute, okhttp3.RequestBody) RestAction Constructor}
      */
     public OrderActionImpl(JDA api, boolean ascendingOrder, Route.CompiledRoute route)

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/order/RoleOrderActionImpl.java
Patch:
@@ -21,10 +21,10 @@
 import net.dv8tion.jda.api.entities.Member;
 import net.dv8tion.jda.api.entities.Role;
 import net.dv8tion.jda.api.exceptions.InsufficientPermissionException;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.order.RoleOrderAction;
 import net.dv8tion.jda.api.utils.data.DataArray;
 import net.dv8tion.jda.api.utils.data.DataObject;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 import okhttp3.RequestBody;
 

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/pagination/AuditLogPaginationActionImpl.java
Patch:
@@ -27,12 +27,12 @@
 import net.dv8tion.jda.api.exceptions.ParsingException;
 import net.dv8tion.jda.api.requests.Request;
 import net.dv8tion.jda.api.requests.Response;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.pagination.AuditLogPaginationAction;
 import net.dv8tion.jda.api.utils.data.DataArray;
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.internal.entities.EntityBuilder;
 import net.dv8tion.jda.internal.entities.GuildImpl;
-import net.dv8tion.jda.internal.requests.Route;
 
 import javax.annotation.Nonnull;
 import java.util.ArrayList;

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/pagination/BanPaginationActionImpl.java
Patch:
@@ -18,12 +18,12 @@
 import net.dv8tion.jda.api.entities.Guild;
 import net.dv8tion.jda.api.requests.Request;
 import net.dv8tion.jda.api.requests.Response;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.pagination.BanPaginationAction;
 import net.dv8tion.jda.api.requests.restaction.pagination.PaginationAction;
 import net.dv8tion.jda.api.utils.data.DataArray;
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.internal.entities.EntityBuilder;
-import net.dv8tion.jda.internal.requests.Route;
 
 import javax.annotation.Nonnull;
 import java.util.ArrayList;

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/pagination/MessagePaginationActionImpl.java
Patch:
@@ -26,10 +26,10 @@
 import net.dv8tion.jda.api.exceptions.ParsingException;
 import net.dv8tion.jda.api.requests.Request;
 import net.dv8tion.jda.api.requests.Response;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.pagination.MessagePaginationAction;
 import net.dv8tion.jda.api.utils.data.DataArray;
 import net.dv8tion.jda.internal.entities.EntityBuilder;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 
 import javax.annotation.Nonnull;

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/pagination/PaginationActionImpl.java
Patch:
@@ -17,10 +17,10 @@
 package net.dv8tion.jda.internal.requests.restaction.pagination;
 
 import net.dv8tion.jda.api.JDA;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.pagination.PaginationAction;
 import net.dv8tion.jda.api.utils.Procedure;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 
 import javax.annotation.Nonnull;

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/pagination/ScheduledEventMembersPaginationActionImpl.java
Patch:
@@ -17,17 +17,17 @@
 package net.dv8tion.jda.internal.requests.restaction.pagination;
 
 import net.dv8tion.jda.api.entities.Guild;
-import net.dv8tion.jda.api.entities.ScheduledEvent;
 import net.dv8tion.jda.api.entities.Member;
+import net.dv8tion.jda.api.entities.ScheduledEvent;
 import net.dv8tion.jda.api.exceptions.ParsingException;
 import net.dv8tion.jda.api.requests.Request;
 import net.dv8tion.jda.api.requests.Response;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.pagination.ScheduledEventMembersPaginationAction;
 import net.dv8tion.jda.api.utils.data.DataArray;
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.internal.entities.EntityBuilder;
 import net.dv8tion.jda.internal.entities.GuildImpl;
-import net.dv8tion.jda.internal.requests.Route;
 
 import javax.annotation.Nonnull;
 import java.util.ArrayList;

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/pagination/ThreadChannelPaginationActionImpl.java
Patch:
@@ -8,11 +8,11 @@
 import net.dv8tion.jda.api.exceptions.ParsingException;
 import net.dv8tion.jda.api.requests.Request;
 import net.dv8tion.jda.api.requests.Response;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.pagination.ThreadChannelPaginationAction;
 import net.dv8tion.jda.api.utils.data.DataArray;
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.internal.entities.EntityBuilder;
-import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Helpers;
 
 import javax.annotation.Nonnull;

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/pagination/ThreadMemberPaginationActionImpl.java
Patch:
@@ -21,12 +21,12 @@
 import net.dv8tion.jda.api.exceptions.ParsingException;
 import net.dv8tion.jda.api.requests.Request;
 import net.dv8tion.jda.api.requests.Response;
+import net.dv8tion.jda.api.requests.Route;
 import net.dv8tion.jda.api.requests.restaction.pagination.ThreadMemberPaginationAction;
 import net.dv8tion.jda.api.utils.data.DataArray;
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.internal.entities.EntityBuilder;
 import net.dv8tion.jda.internal.entities.channel.concrete.ThreadChannelImpl;
-import net.dv8tion.jda.internal.requests.Route;
 
 import javax.annotation.Nonnull;
 import java.util.ArrayList;

File: src/main/java/net/dv8tion/jda/internal/utils/Checks.java
Patch:
@@ -38,7 +38,7 @@
 public class Checks
 {
     public static final Pattern ALPHANUMERIC_WITH_DASH = Pattern.compile("[\\w-]+", Pattern.UNICODE_CHARACTER_CLASS);
-    public static final Pattern ALPHANUMERIC = Pattern.compile("[\\w]+", Pattern.UNICODE_CHARACTER_CLASS);
+    public static final Pattern ALPHANUMERIC = Pattern.compile("\\w+", Pattern.UNICODE_CHARACTER_CLASS);
     public static final Pattern LOWERCASE_ASCII_ALPHANUMERIC = Pattern.compile("[a-z0-9_]+");
 
     @Contract("null -> fail")

File: src/main/java/net/dv8tion/jda/internal/managers/channel/ChannelManagerImpl.java
Patch:
@@ -651,7 +651,7 @@ protected RequestBody finalizeData()
         if (shouldUpdate(NAME))
             frame.put("name", name);
         if (shouldUpdate(TYPE))
-            frame.put("type", type);
+            frame.put("type", type.getId());
         if (shouldUpdate(POSITION))
             frame.put("position", position);
         if (shouldUpdate(TOPIC))

File: src/main/java/net/dv8tion/jda/api/interactions/components/selections/StringSelectMenu.java
Patch:
@@ -42,7 +42,7 @@
  *
  *   StringSelectMenu menu = StringSelectMenu.create("menu:class")
  *     .setPlaceholder("Choose your class") // shows the placeholder indicating what this menu is for
- *     .setRequireRange(1, 1) // exactly one must be selected
+ *     .setRequiredRange(1, 1) // exactly one must be selected
  *     .addOption("Arcane Mage", "mage-arcane")
  *     .addOption("Fire Mage", "mage-fire")
  *     .addOption("Frost Mage", "mage-frost")

File: src/main/java/net/dv8tion/jda/api/hooks/ListenerAdapter.java
Patch:
@@ -206,6 +206,7 @@ public void onChannelUpdateSlowmode(@Nonnull ChannelUpdateSlowmodeEvent event) {
     public void onChannelUpdateDefaultThreadSlowmode(@Nonnull ChannelUpdateDefaultThreadSlowmodeEvent event) {}
     public void onChannelUpdateDefaultReaction(@Nonnull ChannelUpdateDefaultReactionEvent event) {}
 //    public void onChannelUpdateDefaultSortOrder(@Nonnull ChannelUpdateDefaultSortOrderEvent event) {}
+    public void onChannelUpdateDefaultLayout(@Nonnull ChannelUpdateDefaultLayoutEvent event) {}
     public void onChannelUpdateTopic(@Nonnull ChannelUpdateTopicEvent event) {}
     public void onChannelUpdateType(@Nonnull ChannelUpdateTypeEvent event) {}
     public void onChannelUpdateUserLimit(@Nonnull ChannelUpdateUserLimitEvent event) {}

File: src/main/java/net/dv8tion/jda/internal/entities/EntityBuilder.java
Patch:
@@ -1380,6 +1380,7 @@ public ForumChannel createForumChannel(GuildImpl guild, DataObject json, long gu
                 .setFlags(json.getInt("flags", 0))
                 .setDefaultReaction(json.optObject("default_reaction_emoji").orElse(null))
 //                .setDefaultSortOrder(json.getInt("default_sort_order", -1))
+                .setDefaultLayout(json.getInt("default_forum_layout", -1))
                 .setName(json.getString("name"))
                 .setTopic(json.getString("topic", null))
                 .setPosition(json.getInt("position"))

File: src/main/java/net/dv8tion/jda/internal/entities/ActivityImpl.java
Patch:
@@ -47,7 +47,7 @@ protected ActivityImpl(String name, String url, ActivityType type)
         this(name, url, type, null, null);
     }
 
-    protected ActivityImpl(String name, String url, ActivityType type, RichPresence.Timestamps timestamps, EmojiUnion emoji)
+    protected ActivityImpl(String name, String url, ActivityType type, Activity.Timestamps timestamps, EmojiUnion emoji)
     {
         this.name = name;
         this.url = url;
@@ -89,7 +89,7 @@ public ActivityType getType()
     }
 
     @Nullable
-    public RichPresence.Timestamps getTimestamps()
+    public Activity.Timestamps getTimestamps()
     {
         return timestamps;
     }

File: src/main/java/net/dv8tion/jda/internal/entities/EntityBuilder.java
Patch:
@@ -889,14 +889,14 @@ public static Activity createActivity(DataObject gameJson)
             type = Activity.ActivityType.PLAYING;
         }
 
-        RichPresence.Timestamps timestamps = null;
+        Activity.Timestamps timestamps = null;
         if (!gameJson.isNull("timestamps"))
         {
             DataObject obj = gameJson.getObject("timestamps");
             long start, end;
             start = obj.getLong("start", 0L);
             end = obj.getLong("end", 0L);
-            timestamps = new RichPresence.Timestamps(start, end);
+            timestamps = new Activity.Timestamps(start, end);
         }
 
         EmojiUnion emoji = null;

File: src/main/java/net/dv8tion/jda/api/requests/ErrorResponse.java
Patch:
@@ -108,6 +108,7 @@ public enum ErrorResponse
     MAX_STICKERS(                             30039, "Maximum number of stickers reached"),
     MAX_PRUNE_REQUESTS(                       30040, "Maximum number of prune requests has been reached. Try again later"),
     MAX_GUILD_WIDGET_UPDATES(                 30042, "Maximum number of guild widget settings updates has been reached. Try again later"),
+    MAX_PREMIUM_EMOJIS(                       30056, "Maximum number of premium emojis reached (25)"),
     UNAUTHORIZED(                             40001, "Unauthorized"),
     NOT_VERIFIED(                             40002, "You need to verify your account in order to perform this action"),
     OPEN_DM_TOO_FAST(                         40003, "You are opening direct messages too fast"),
@@ -161,6 +162,8 @@ public enum ErrorResponse
     SERVER_NOT_AVAILABLE_IN_YOUR_LOCATION(    50095, "This server is not available in your location"),
     SERVER_MONETIZATION_DISABLED(             50097, "This server needs monetization enabled in order to perform this action"),
     SERVER_NOT_ENOUGH_BOOSTS(                 50101, "This server needs more boosts to perform this action"),
+    MIXED_PREMIUM_ROLES_FOR_EMOJI(            50144, "Cannot mix subscription and non subscription roles for an emoji"),
+    ILLEGAL_EMOJI_CONVERSION(                 50145, "Cannot convert between premium emoji and normal emoji"),
     MFA_NOT_ENABLED(                          60003, "MFA auth required but not enabled"),
     NO_USER_WITH_TAG_EXISTS(                  80004, "No users with DiscordTag exist"),
     REACTION_BLOCKED(                         90001, "Reaction Blocked"),

File: src/main/java/net/dv8tion/jda/internal/handle/GuildRoleUpdateHandler.java
Patch:
@@ -68,6 +68,8 @@ protected Long handleInternally(DataObject content)
         String iconId = rolejson.getString("icon", null);
         String emoji = rolejson.getString("unicode_emoji", null);
 
+        rolejson.optObject("tags").ifPresent(role::setTags);
+
         if (!Objects.equals(name, role.getName()))
         {
             String oldName = role.getName();

File: src/main/java/net/dv8tion/jda/internal/requests/Route.java
Patch:
@@ -41,7 +41,9 @@ public static class Misc
     public static class Applications
     {
         // Bot only
-        public static final Route GET_BOT_APPLICATION =           new Route(GET,    "oauth2/applications/@me");
+        public static final Route GET_BOT_APPLICATION =             new Route(GET, "oauth2/applications/@me");
+        public static final Route GET_ROLE_CONNECTION_METADATA =    new Route(GET, "applications/{application_id}/role-connections/metadata");
+        public static final Route UPDATE_ROLE_CONNECTION_METADATA = new Route(PUT, "applications/{application_id}/role-connections/metadata");
 
         // Client only
         public static final Route GET_APPLICATIONS =              new Route(GET,    "oauth2/applications");

File: src/main/java/net/dv8tion/jda/internal/utils/Checks.java
Patch:
@@ -39,6 +39,7 @@ public class Checks
 {
     public static final Pattern ALPHANUMERIC_WITH_DASH = Pattern.compile("[\\w-]+", Pattern.UNICODE_CHARACTER_CLASS);
     public static final Pattern ALPHANUMERIC = Pattern.compile("[\\w]+", Pattern.UNICODE_CHARACTER_CLASS);
+    public static final Pattern LOWERCASE_ASCII_ALPHANUMERIC = Pattern.compile("[a-z0-9_]+");
 
     @Contract("null -> fail")
     public static void isSnowflake(final String snowflake)

File: src/main/java/net/dv8tion/jda/internal/managers/ManagerBase.java
Patch:
@@ -146,7 +146,7 @@ protected boolean shouldUpdate()
 
     protected boolean shouldUpdate(long bit)
     {
-        return (set & bit) == bit;
+        return (set & bit) != 0;
     }
 
     protected <E> void withLock(E object, Consumer<? super E> consumer)

File: src/main/java/net/dv8tion/jda/internal/entities/EntityBuilder.java
Patch:
@@ -2244,7 +2244,9 @@ public GuildWelcomeScreen createWelcomeScreen(Guild guild, DataObject object)
         for (int i = 0; i < welcomeChannelsArray.length(); i++)
         {
             final DataObject welcomeChannelObj = welcomeChannelsArray.getObject(i);
-            final EmojiUnion emoji = createEmoji(welcomeChannelObj, "emoji_name", "emoji_id");
+            EmojiUnion emoji = null;
+            if (!welcomeChannelObj.isNull("emoji_id") || !welcomeChannelObj.isNull("emoji_name"))
+                emoji = createEmoji(welcomeChannelObj, "emoji_name", "emoji_id");
 
             welcomeChannels.add(new GuildWelcomeScreenImpl.ChannelImpl(
                     guild,

File: src/main/java/net/dv8tion/jda/internal/managers/ScheduledEventManagerImpl.java
Patch:
@@ -188,6 +188,7 @@ protected RequestBody finalizeData()
             {
             case STAGE_INSTANCE:
             case VOICE:
+                object.putNull("entity_metadata");
                 object.put("channel_id", channelId);
                 break;
             case EXTERNAL:
@@ -214,11 +215,11 @@ private void preChecks()
     {
         if (shouldUpdate(LOCATION))
         {
-            if (entityType == ScheduledEvent.Type.EXTERNAL)
-                Checks.check((endTime).isAfter(startTime), "Cannot schedule event to end before starting!");
             Checks.check(getScheduledEvent().getStatus() == ScheduledEvent.Status.SCHEDULED, "Cannot update location of non-scheduled event.");
             if (entityType == ScheduledEvent.Type.EXTERNAL && endTime == null && getScheduledEvent().getEndTime() == null)
                 throw new IllegalStateException("Missing required parameter: End Time");
+            if (entityType == ScheduledEvent.Type.EXTERNAL)
+                Checks.check((endTime != null ? endTime : getScheduledEvent().getEndTime()).isAfter(startTime), "Cannot schedule event to end before starting!");
         }
 
         if (shouldUpdate(START_TIME))

File: src/main/java/net/dv8tion/jda/api/entities/channel/concrete/ThreadChannel.java
Patch:
@@ -97,8 +97,6 @@ default boolean isPublic()
      */
     int getMemberCount();
 
-    //TODO | This name is bad. Looking for alternatives.
-    //how about isParticipant? isThreadMember
     /**
      * Whether the currently logged in member has joined this thread.
      *

File: src/main/java/net/dv8tion/jda/internal/entities/EntityBuilder.java
Patch:
@@ -1325,8 +1325,7 @@ public ThreadMember createThreadMember(ThreadChannelImpl threadChannel, Member m
     {
         ThreadMemberImpl threadMember = new ThreadMemberImpl(member, threadChannel);
         threadMember
-            .setJoinedTimestamp(Helpers.toTimestamp(json.getString("join_timestamp")))
-            .setFlags(json.getInt("flags"));
+            .setJoinedTimestamp(Helpers.toTimestamp(json.getString("join_timestamp")));
 
         return threadMember;
     }

File: src/main/java/net/dv8tion/jda/internal/entities/MessageMentionsImpl.java
Patch:
@@ -57,7 +57,7 @@ public MessageMentionsImpl(JDAImpl jda, GuildImpl guild, String content,
                     }
 
                     DataObject member = obj.getObject("member");
-                    obj.remove("user");
+                    obj.remove("member");
                     member.put("user", obj).put("is_member", true);
                     this.userMentionMap.put(obj.getUnsignedLong("id"), member);
                 });

File: src/main/java/net/dv8tion/jda/internal/interactions/component/EntitySelectInteractionImpl.java
Patch:
@@ -20,6 +20,7 @@
 import net.dv8tion.jda.api.entities.Mentions;
 import net.dv8tion.jda.api.interactions.components.selections.EntitySelectInteraction;
 import net.dv8tion.jda.api.interactions.components.selections.EntitySelectMenu;
+import net.dv8tion.jda.api.utils.data.DataArray;
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.internal.JDAImpl;
 import net.dv8tion.jda.internal.entities.GuildImpl;
@@ -39,8 +40,8 @@ public EntitySelectInteractionImpl(JDAImpl jda, DataObject data)
         this.mentions = new SelectMenuMentions(
                 jda,
                 (GuildImpl) getGuild(),
-                content.getObject("resolved"),
-                content.getArray("values")
+                content.optObject("resolved").orElseGet(DataObject::empty),
+                content.optArray("values").orElseGet(DataArray::empty)
         );
     }
 

File: src/main/java/net/dv8tion/jda/api/events/message/react/MessageReactionRemoveAllEvent.java
Patch:
@@ -23,7 +23,7 @@
 import javax.annotation.Nonnull;
 
 /**
- * Indicates the the reactions of a message have been cleared by a moderator
+ * Indicates that the reactions of a message have been cleared by a moderator
  *
  * <p>Can be used to detect when the reactions of a message are removed by a moderator
  *

File: src/main/java/net/dv8tion/jda/api/JDA.java
Patch:
@@ -1838,6 +1838,7 @@ default JDA setRequiredScopes(@Nonnull String... scopes)
 
     /**
      * Retrieves a {@link net.dv8tion.jda.api.entities.Webhook Webhook} by its id.
+     * <br>If the webhook does not belong to any known guild of this JDA session, it will be {@link Webhook#isPartial() partial}.
      *
      * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} caused by
      * the returned {@link net.dv8tion.jda.api.requests.RestAction RestAction} include the following:
@@ -1867,6 +1868,7 @@ default JDA setRequiredScopes(@Nonnull String... scopes)
 
     /**
      * Retrieves a {@link net.dv8tion.jda.api.entities.Webhook Webhook} by its id.
+     * <br>If the webhook does not belong to any known guild of this JDA session, it will be {@link Webhook#isPartial() partial}.
      *
      * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} caused by
      * the returned {@link net.dv8tion.jda.api.requests.RestAction RestAction} include the following:

File: src/main/java/net/dv8tion/jda/internal/JDAImpl.java
Patch:
@@ -1012,7 +1012,7 @@ public RestAction<Webhook> retrieveWebhookById(@Nonnull String webhookId)
         {
             DataObject object = response.getObject();
             EntityBuilder builder = getEntityBuilder();
-            return builder.createWebhook(object);
+            return builder.createWebhook(object, true);
         });
     }
 

File: src/main/java/net/dv8tion/jda/api/entities/channel/ChannelField.java
Patch:
@@ -100,13 +100,13 @@ public enum ChannelField
     DEFAULT_REACTION_EMOJI("default_reaction_emoji", AuditLogKey.CHANNEL_DEFAULT_REACTION_EMOJI),
 
     //Text Specific
-
     /**
      * The topic of the channel.
      *
-     * <p>Limited to {@link NewsChannel NewsChannels} and {@link TextChannel TextChannels}.
+     * <p>Limited to {@link NewsChannel NewsChannels}, {@link TextChannel TextChannels}, and {@link ForumChannel ForumChannels}.
      *
      * @see StandardGuildMessageChannel#getTopic()
+     * @see ForumChannel#getTopic()
      */
     TOPIC("topic", AuditLogKey.CHANNEL_TOPIC),
 
@@ -202,7 +202,7 @@ public enum ChannelField
     /**
      * The time this channel's archival information was last updated.
      *
-     * <p>This timestamp will be updated when any of the following happen:
+     * <p>This timestamp will be updated when any of the following happens:
      * <ul>
      *     <li>The channel is archived</li>
      *     <li>The channel is unarchived</li>

File: src/main/java/net/dv8tion/jda/internal/managers/GuildManagerImpl.java
Patch:
@@ -307,14 +307,14 @@ public GuildManager setFeatures(@Nonnull Collection<String> features)
     @Override
     public GuildManager addFeatures(@Nonnull Collection<String> features)
     {
-        return updateFeatures(features, this.features::add);
+        return updateFeatures(features, feature -> this.features.add(feature));
     }
 
     @Nonnull
     @Override
     public GuildManager removeFeatures(@Nonnull Collection<String> features)
     {
-        return updateFeatures(features, this.features::remove);
+        return updateFeatures(features, feature -> this.features.remove(feature));
     }
 
     private GuildManager updateFeatures(Collection<String> changed, Consumer<String> op)

File: src/main/java/net/dv8tion/jda/api/entities/Guild.java
Patch:
@@ -2009,9 +2009,6 @@ default RestAction<RichCustomEmoji> retrieveEmoji(@Nonnull CustomEmoji emoji)
      * all properties and settings of the Guild.
      * <br>You modify multiple fields in one request by chaining setters before calling {@link RestAction#queue() RestAction.queue()}.
      *
-     * <p>This is a lazy idempotent getter. The manager is retained after the first call.
-     * This getter is not thread-safe and would require guards by the user.
-     *
      * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
      *         If the currently logged in account does not have {@link net.dv8tion.jda.api.Permission#MANAGE_SERVER Permission.MANAGE_SERVER}
      *

File: src/main/java/net/dv8tion/jda/api/entities/PermissionOverride.java
Patch:
@@ -176,9 +176,6 @@ public interface PermissionOverride extends ISnowflake
      * <br>In the PermissionOverrideAction you can modify the permissions of the override.
      * You modify multiple fields in one request by chaining setters before calling {@link net.dv8tion.jda.api.requests.RestAction#queue() RestAction.queue()}.
      *
-     * <p>This is a lazy idempotent getter. The manager is retained after the first call.
-     * This getter is not thread-safe and would require guards by the user.
-     *
      * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
      *         If the currently logged in account does not have {@link net.dv8tion.jda.api.Permission#MANAGE_PERMISSIONS Permission.MANAGE_PERMISSIONS}
      *

File: src/main/java/net/dv8tion/jda/api/entities/Role.java
Patch:
@@ -230,9 +230,6 @@ default RoleAction createCopy()
      * In the RoleManager, you can modify all its values.
      * <br>You modify multiple fields in one request by chaining setters before calling {@link net.dv8tion.jda.api.requests.RestAction#queue() RestAction.queue()}.
      *
-     * <p>This is a lazy idempotent getter. The manager is retained after the first call.
-     * This getter is not thread-safe and would require guards by the user.
-     *
      * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
      *         If the currently logged in account does not have {@link net.dv8tion.jda.api.Permission#MANAGE_ROLES Permission.MANAGE_ROLES}
      * @throws net.dv8tion.jda.api.exceptions.HierarchyException

File: src/main/java/net/dv8tion/jda/api/entities/SelfUser.java
Patch:
@@ -81,9 +81,6 @@ default String getApplicationId()
      * <br>This can be used to atomically set account fields (like avatar/username)
      * You modify multiple fields in one request by chaining setters before calling {@link net.dv8tion.jda.api.requests.RestAction#queue() RestAction.queue()}.
      *
-     * <p>This is a lazy idempotent getter. The manager is retained after the first call.
-     * This getter is not thread-safe and would require guards by the user.
-     *
      * @return An AccountManager instance for the current account
      */
     @Nonnull

File: src/main/java/net/dv8tion/jda/api/entities/Webhook.java
Patch:
@@ -291,9 +291,6 @@ public interface Webhook extends ISnowflake
      * The {@link WebhookManager WebhookManager} for this Webhook.
      * <br>You can modify multiple fields in one request by chaining setters before calling {@link net.dv8tion.jda.api.requests.RestAction#queue() RestAction.queue()}.
      *
-     * <p>This is a lazy idempotent getter. The manager is retained after the first call.
-     * This getter is not thread-safe and would require guards by the user.
-     *
      * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
      *         If the currently logged in account does not have {@link net.dv8tion.jda.api.Permission#MANAGE_WEBHOOKS Permission.MANAGE_WEBHOOKS}
      *

File: src/main/java/net/dv8tion/jda/api/entities/channel/middleman/GuildChannel.java
Patch:
@@ -55,9 +55,6 @@ public interface GuildChannel extends Channel, Comparable<GuildChannel>
      * <br>In the ChannelManager, you can modify the name, topic and position of this GuildChannel.
      * You modify multiple fields in one request by chaining setters before calling {@link net.dv8tion.jda.api.requests.RestAction#queue() RestAction.queue()}.
      *
-     * <p>This is a lazy idempotent getter. The manager is retained after the first call.
-     * This getter is not thread-safe and would require guards by the user.
-     *
      * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
      *         If the currently logged in account does not have {@link net.dv8tion.jda.api.Permission#MANAGE_CHANNEL Permission.MANAGE_CHANNEL}
      *

File: src/main/java/net/dv8tion/jda/api/entities/emoji/RichCustomEmoji.java
Patch:
@@ -167,9 +167,6 @@ public interface RichCustomEmoji extends CustomEmoji
      * properties of the emoji like name and role restrictions.
      * <br>You modify multiple fields in one request by chaining setters before calling {@link net.dv8tion.jda.api.requests.RestAction#queue() RestAction.queue()}.
      *
-     * <p>This is a lazy idempotent getter. The manager is retained after the first call.
-     * This getter is not thread-safe and would require guards by the user.
-     *
      * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
      *         If the currently logged in account does not have {@link net.dv8tion.jda.api.Permission#MANAGE_EMOJIS_AND_STICKERS Permission.MANAGE_EMOJIS_AND_STICKERS}
      *

File: src/main/java/net/dv8tion/jda/api/entities/templates/Template.java
Patch:
@@ -261,9 +261,6 @@ public boolean isSynced()
      * <br>In the TemplateManager, you can modify the name or description of the template.
      * You modify multiple fields in one request by chaining setters before calling {@link net.dv8tion.jda.api.requests.RestAction#queue() RestAction.queue()}.
      *
-     * <p>This is a lazy idempotent getter. The manager is retained after the first call.
-     * This getter is not thread-safe and would require guards by the user.
-     *
      * @throws IllegalStateException
      *         If the account is not in the template's guild
      * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException

File: src/main/java/net/dv8tion/jda/api/managers/AccountManager.java
Patch:
@@ -80,7 +80,6 @@ public interface AccountManager extends Manager<AccountManager>
 
     /**
      * Resets the fields specified by the provided bit-flag patterns.
-     * You can specify a combination by using a bitwise OR concat of the flag constants.
      * <br>Example: {@code manager.reset(AccountManager.NAME, AccountManager.AVATAR);}
      *
      * <p><b>Flag Constants:</b>

File: src/main/java/net/dv8tion/jda/api/managers/CustomEmojiManager.java
Patch:
@@ -69,8 +69,7 @@ public interface CustomEmojiManager extends Manager<CustomEmojiManager>
     CustomEmojiManager reset(long fields);
 
     /**
-     * Resets the fields specified by the provided bit-flag pattern.
-     * You can specify a combination by using a bitwise OR concat of the flag constants.
+     * Resets the fields specified by the provided bit-flag patterns.
      * <br>Example: {@code manager.reset(CustomEmojiManager.NAME, CustomEmojiManager.ROLES);}
      *
      * <p><b>Flag Constants:</b>

File: src/main/java/net/dv8tion/jda/api/managers/GuildManager.java
Patch:
@@ -107,7 +107,6 @@ public interface GuildManager extends Manager<GuildManager>
 
     /**
      * Resets the fields specified by the provided bit-flag patterns.
-     * You can specify a combination by using a bitwise OR concat of the flag constants.
      * <br>Example: {@code manager.reset(GuildManager.NAME, GuildManager.ICON);}
      *
      * <p><b>Flag Constants:</b>

File: src/main/java/net/dv8tion/jda/api/managers/GuildStickerManager.java
Patch:
@@ -75,8 +75,7 @@ public interface GuildStickerManager extends Manager<GuildStickerManager>
     GuildStickerManager reset(long fields);
 
     /**
-     * Resets the fields specified by the provided bit-flag pattern.
-     * You can specify a combination by using a bitwise OR concat of the flag constants.
+     * Resets the fields specified by the provided bit-flag patterns.
      * <br>Example: {@code manager.reset(GuildStickerManager.NAME, GuildStickerManager.TAGS);}
      *
      * <p><b>Flag Constants:</b>

File: src/main/java/net/dv8tion/jda/api/managers/PermOverrideManager.java
Patch:
@@ -76,7 +76,6 @@ public interface PermOverrideManager extends Manager<PermOverrideManager>
 
     /**
      * Resets the fields specified by the provided bit-flag patterns.
-     * You can specify a combination by using a bitwise OR concat of the flag constants.
      * <br>Example: {@code manager.reset(PermOverrideManager.ALLOWED, PermOverrideManager.DENIED);}
      *
      * <p><b>Flag Constants:</b>

File: src/main/java/net/dv8tion/jda/api/managers/RoleManager.java
Patch:
@@ -87,7 +87,6 @@ public interface RoleManager extends Manager<RoleManager>
 
     /**
      * Resets the fields specified by the provided bit-flag patterns.
-     * You can specify a combination by using a bitwise OR concat of the flag constants.
      * <br>Example: {@code manager.reset(RoleManager.COLOR, RoleManager.NAME);}
      *
      * <p><b>Flag Constants:</b>

File: src/main/java/net/dv8tion/jda/api/managers/WebhookManager.java
Patch:
@@ -74,7 +74,6 @@ public interface WebhookManager extends Manager<WebhookManager>
 
     /**
      * Resets the fields specified by the provided bit-flag patterns.
-     * You can specify a combination by using a bitwise OR concat of the flag constants.
      * <br>Example: {@code manager.reset(WebhookManager.CHANNEL, WebhookManager.NAME);}
      *
      * <p><b>Flag Constants:</b>

File: src/main/java/net/dv8tion/jda/api/entities/Guild.java
Patch:
@@ -3439,7 +3439,7 @@ default AuditableRestAction<Void> timeoutFor(@Nonnull UserSnowflake user, @Nonnu
      *         The {@link UserSnowflake} to timeout.
      *         This can be a member or user instance or {@link User#fromId(long)}.
      * @param  temporal
-     *         The time the specified Member will be released from time out or null to remove the time out
+     *         The time the specified Member will be released from time out
      *
      * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
      *         If the logged in account does not have the {@link net.dv8tion.jda.api.Permission#MODERATE_MEMBERS} permission.
@@ -3449,6 +3449,7 @@ default AuditableRestAction<Void> timeoutFor(@Nonnull UserSnowflake user, @Nonnu
      *         If any of the following are true
      *         <ul>
      *             <li>The provided {@code user} is null</li>
+     *             <li>The provided {@code temporal} is null</li>
      *             <li>The provided {@code temporal} is in the past</li>
      *             <li>The provided {@code temporal} is more than {@value Member#MAX_TIME_OUT_LENGTH} days in the future</li>
      *         </ul>

File: src/main/java/net/dv8tion/jda/api/entities/Member.java
Patch:
@@ -660,13 +660,14 @@ default AuditableRestAction<Void> timeoutFor(@Nonnull Duration duration)
      * </ul>
      *
      * @param  temporal
-     *         The time this Member will be released from time out, or null to remove the time out
+     *         The time this Member will be released from time out
      *
      * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
      *         If the logged in account does not have the {@link net.dv8tion.jda.api.Permission#MODERATE_MEMBERS} permission.
      * @throws IllegalArgumentException
      *         If any of the following checks are true
      *         <ul>
+     *             <li>The provided {@code temporal} is null</li>
      *             <li>The provided {@code temporal} is in the past</li>
      *             <li>The provided {@code temporal} is more than {@value MAX_TIME_OUT_LENGTH} days in the future</li>
      *         </ul>
@@ -675,7 +676,7 @@ default AuditableRestAction<Void> timeoutFor(@Nonnull Duration duration)
      */
     @Nonnull
     @CheckReturnValue
-    default AuditableRestAction<Void> timeoutUntil(@Nullable TemporalAccessor temporal)
+    default AuditableRestAction<Void> timeoutUntil(@Nonnull TemporalAccessor temporal)
     {
         return getGuild().timeoutUntil(this, temporal);
     }

File: src/main/java/net/dv8tion/jda/api/hooks/ListenerAdapter.java
Patch:
@@ -197,7 +197,7 @@ public void onChannelUpdateRegion(@Nonnull ChannelUpdateRegionEvent event) {}
     public void onChannelUpdateSlowmode(@Nonnull ChannelUpdateSlowmodeEvent event) {}
     public void onChannelUpdateDefaultThreadSlowmode(@Nonnull ChannelUpdateDefaultThreadSlowmodeEvent event) {}
     public void onChannelUpdateDefaultReaction(@Nonnull ChannelUpdateDefaultReactionEvent event) {}
-    public void onChannelUpdateDefaultSortOrder(@Nonnull ChannelUpdateDefaultSortOrderEvent event) {}
+//    public void onChannelUpdateDefaultSortOrder(@Nonnull ChannelUpdateDefaultSortOrderEvent event) {}
     public void onChannelUpdateTopic(@Nonnull ChannelUpdateTopicEvent event) {}
     public void onChannelUpdateType(@Nonnull ChannelUpdateTypeEvent event) {}
     public void onChannelUpdateUserLimit(@Nonnull ChannelUpdateUserLimitEvent event) {}

File: src/main/java/net/dv8tion/jda/internal/entities/EntityBuilder.java
Patch:
@@ -1293,7 +1293,7 @@ public ForumChannel createForumChannel(GuildImpl guild, DataObject json, long gu
                 .setParentCategory(json.getLong("parent_id", 0))
                 .setFlags(json.getInt("flags", 0))
                 .setDefaultReaction(json.optObject("default_reaction_emoji").orElse(null))
-                .setDefaultSortOrder(json.getInt("default_sort_order", -1))
+//                .setDefaultSortOrder(json.getInt("default_sort_order", -1))
                 .setName(json.getString("name"))
                 .setTopic(json.getString("topic", null))
                 .setPosition(json.getInt("position"))

File: src/main/java/net/dv8tion/jda/api/entities/channel/middleman/GuildChannel.java
Patch:
@@ -67,7 +67,6 @@ public interface GuildChannel extends Channel, Comparable<GuildChannel>
     ChannelManager<?, ?> getManager();
 
     /**
-     * TODO-v5: this override might not be needed anymore if we remove AuditableRestAction and instead place auditable hooks onto RestAction itself.
      * Deletes this GuildChannel.
      *
      * <p>Possible ErrorResponses include:
@@ -95,6 +94,7 @@ public interface GuildChannel extends Channel, Comparable<GuildChannel>
     AuditableRestAction<Void> delete();
 
     //TODO-v5: Docs
+    @Nonnull
     IPermissionContainer getPermissionContainer();
 
     /**

File: src/main/java/net/dv8tion/jda/api/entities/channel/unions/GuildMessageChannelUnion.java
Patch:
@@ -37,6 +37,7 @@
  * <ul>
  *     <li>{@link TextChannel}</li>
  *     <li>{@link NewsChannel}</li>
+ *     <li>{@link VoiceChannel}</li>
  *     <li>{@link ThreadChannel}</li>
  * </ul>
  */

File: src/main/java/net/dv8tion/jda/api/entities/channel/unions/MessageChannelUnion.java
Patch:
@@ -33,6 +33,7 @@
  * <ul>
  *     <li>{@link TextChannel}</li>
  *     <li>{@link NewsChannel}</li>
+ *     <li>{@link VoiceChannel}</li>
  *     <li>{@link ThreadChannel}</li>
  *     <li>{@link PrivateChannel}</li>
  * </ul>

File: src/main/java/net/dv8tion/jda/api/managers/channel/middleman/StandardGuildMessageChannelManager.java
Patch:
@@ -45,14 +45,14 @@ public interface StandardGuildMessageChannelManager<T extends StandardGuildMessa
      /**
      * Sets the <b><u>topic</u></b> of the selected {@link StandardGuildMessageChannel channel}.
      *
-     * <p>A channel topic <b>must not</b> be more than {@code 1024} characters long!
-     *
      * @param  topic
      *         The new topic for the selected channel,
      *         {@code null} or empty String to reset
      *
      * @throws IllegalArgumentException
-     *         If the provided topic is greater than {@code 1024} in length
+     *         If the provided topic is greater than {@value StandardGuildMessageChannel#MAX_TOPIC_LENGTH} in length.
+     *         For {@link net.dv8tion.jda.api.entities.channel.concrete.ForumChannel ForumChannels},
+     *         this limit is {@value net.dv8tion.jda.api.entities.channel.concrete.ForumChannel#MAX_FORUM_TOPIC_LENGTH} instead.
      *
      * @return ChannelManager for chaining convenience
      */

File: src/main/java/net/dv8tion/jda/api/utils/cache/CacheView.java
Patch:
@@ -140,7 +140,6 @@ default void forEachUnordered(@Nonnull final Consumer<? super T> action)
      *
      * @see    #acceptStream(Consumer)
      */
-    @Nullable
     default <R> R applyStream(@Nonnull Function<? super Stream<T>, ? extends R> action)
     {
         Checks.notNull(action, "Action");

File: src/main/java/net/dv8tion/jda/internal/handle/ChannelCreateHandler.java
Patch:
@@ -46,7 +46,8 @@ protected Long handleInternally(DataObject content)
         }
 
         Channel channel = buildChannel(type, content, guildId);
-        if (channel == null) {
+        if (channel == null)
+        {
             WebSocketClient.LOG.debug("Discord provided an CREATE_CHANNEL event with an unknown channel type! JSON: {}", content);
             return null;
         }
@@ -66,6 +67,7 @@ private Channel buildChannel(ChannelType type, DataObject content, long guildId)
             case VOICE: return builder.createVoiceChannel(content, guildId);
             case STAGE: return builder.createStageChannel(content, guildId);
             case CATEGORY: return builder.createCategory(content, guildId);
+            case FORUM: return builder.createForumChannel(content, guildId);
 
             default:
                 return null;

File: src/main/java/net/dv8tion/jda/internal/requests/Route.java
Patch:
@@ -232,8 +232,8 @@ public static class Channels
         public static final Route GET_PERM_OVERRIDE =    new Route(GET,    "channels/{channel_id}/permissions/{permoverride_id}");
         public static final Route FOLLOW_CHANNEL =       new Route(POST,   "channels/{channel_id}/followers");
 
-        public static final Route CREATE_THREAD_WITH_MESSAGE =              new Route(POST,     "channels/{channel_id}/messages/{message_id}/threads");
-        public static final Route CREATE_THREAD_WITHOUT_MESSAGE =           new Route(POST,     "channels/{channel_id}/threads");
+        public static final Route CREATE_THREAD_FROM_MESSAGE =              new Route(POST,     "channels/{channel_id}/messages/{message_id}/threads");
+        public static final Route CREATE_THREAD =                           new Route(POST,     "channels/{channel_id}/threads");
         public static final Route JOIN_THREAD =                             new Route(PUT,      "channels/{channel_id}/thread-members/@me");
         public static final Route ADD_THREAD_MEMBER =                       new Route(PUT,      "channels/{channel_id}/thread-members/{user_id}");
         public static final Route LEAVE_THREAD =                            new Route(DELETE,   "channels/{channel_id}/thread-members/@me");

File: src/main/java/net/dv8tion/jda/internal/requests/WebSocketClient.java
Patch:
@@ -756,6 +756,7 @@ protected void invalidate()
         api.getPrivateChannelsView().clear();
         api.getStageChannelView().clear();
         api.getThreadChannelsView().clear();
+        api.getForumChannelsView().clear();
 
         api.getGuildsView().clear();
         api.getUsersView().clear();

File: src/main/java/net/dv8tion/jda/internal/interactions/command/CommandAutoCompleteInteractionImpl.java
Patch:
@@ -77,9 +77,10 @@ public AutoCompleteQuery getFocusedOption()
 
     @Nonnull
     @Override
+    @SuppressWarnings("ConstantConditions")
     public MessageChannelUnion getChannel()
     {
-        return (MessageChannelUnion) super.getMessageChannel();
+        return (MessageChannelUnion) super.getChannel();
     }
 
     @Override

File: src/main/java/net/dv8tion/jda/api/utils/MarkdownSanitizer.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.regex.Pattern;
 
 /**
- * Implements and algorithm that can strip or replace markdown in any supplied string.
+ * Implements an algorithm that can strip or replace markdown in any supplied string.
  *
  * @see #sanitize(String, net.dv8tion.jda.api.utils.MarkdownSanitizer.SanitizationStrategy)
  *

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/interactions/MessageEditCallbackActionImpl.java
Patch:
@@ -76,7 +76,7 @@ public MessageEditCallbackActionImpl closeResources()
 
     private boolean isEmpty()
     {
-        return content == null && embeds == null && components == null && files.isEmpty();
+        return content == null && embeds == null && components == null && !isFileUpdate && files.isEmpty();
     }
 
     @Override
@@ -152,6 +152,7 @@ public MessageEditCallbackAction addFile(@Nonnull InputStream data, @Nonnull Str
             name = "SPOILER_" + name;
 
         files.add(FileUpload.fromData(data, name));
+        isFileUpdate = true;
         return this;
     }
 
@@ -167,6 +168,7 @@ public MessageEditCallbackAction retainFilesById(@Nonnull Collection<String> ids
         ids.stream()
            .map(AttachedFile::fromAttachment)
            .forEach(this.files::add);
+        isFileUpdate = true;
         return this;
     }
 

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/interactions/ReplyCallbackActionImpl.java
Patch:
@@ -126,6 +126,7 @@ public ReplyCallbackAction addFile(@Nonnull InputStream data, @Nonnull String na
             name = "SPOILER_" + name;
 
         files.add(FileUpload.fromData(data, name));
+        isFileUpdate = true;
         return this;
     }
 

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/interactions/MessageEditCallbackActionImpl.java
Patch:
@@ -92,7 +92,8 @@ protected DataObject toData()
         if (embeds != null)
             data.put("embeds", DataArray.fromCollection(embeds));
         if (components != null)
-            json.put("data", data);
+            data.put("components", DataArray.fromCollection(components));
+        json.put("data", data);
         return json;
     }
 

File: src/main/java/net/dv8tion/jda/internal/entities/ReceivedMessage.java
Patch:
@@ -672,7 +672,7 @@ public ThreadChannel getStartedThread()
     @Override
     public ThreadChannelAction createThreadChannel(String name)
     {
-        return ((IThreadContainer) getGuildChannel()).createThreadChannel(name, this.getIdLong());
+        return getGuildChannel().asThreadContainer().createThreadChannel(name, this.getIdLong());
     }
 
     @Override

File: src/main/java/net/dv8tion/jda/api/interactions/commands/DefaultMemberPermissions.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * Represents the default permissions for a Discord Application-Command. These permissions define the type of users that can use this command if no explicit command-specific
  * privileges are set by moderators to control who can and can't use the command within a Guild.
- * <p>For example, given a command defined with {@link net.dv8tion.jda.api.interactions.commands.build.CommandData#setDefaultPermissions CommandData#setDefaultPermissions} as <code>command.setDefaultPermissions(DefaultMemberPermissions.enabledFor(Permissions.BAN_MEMBERS))</code>
+ * <p>For example, given a command defined with {@link net.dv8tion.jda.api.interactions.commands.build.CommandData#setDefaultPermissions CommandData#setDefaultPermissions} as <code>command.setDefaultPermissions(DefaultMemberPermissions.enabledFor(Permission.BAN_MEMBERS))</code>
  * any user with the {@link Permission#BAN_MEMBERS} permission would be able to use the command by default.
  */
 public class DefaultMemberPermissions

File: src/main/java/net/dv8tion/jda/internal/interactions/command/localization/LocalizationMapper.java
Patch:
@@ -17,6 +17,7 @@
 package net.dv8tion.jda.internal.interactions.command.localization;
 
 import net.dv8tion.jda.api.interactions.DiscordLocale;
+import net.dv8tion.jda.api.interactions.commands.Command;
 import net.dv8tion.jda.api.interactions.commands.build.CommandData;
 import net.dv8tion.jda.api.interactions.commands.build.SlashCommandData;
 import net.dv8tion.jda.api.interactions.commands.localization.LocalizationFunction;
@@ -73,7 +74,7 @@ public void localizeCommand(CommandData commandData, DataArray optionArray)
         ctx.withKey(commandData.getName(), () ->
         {
             ctx.trySetTranslation(commandData.getNameLocalizations(), "name");
-            if (commandData instanceof SlashCommandData)
+            if (commandData.getType() == Command.Type.SLASH)
             {
                 final SlashCommandData slashCommandData = (SlashCommandData) commandData;
                 ctx.trySetTranslation(slashCommandData.getDescriptionLocalizations(), "description");

File: src/main/java/net/dv8tion/jda/api/interactions/components/selections/SelectMenu.java
Patch:
@@ -289,7 +289,7 @@ public Builder setMinValues(int minValues)
         public Builder setMaxValues(int maxValues)
         {
             Checks.positive(maxValues, "Max Values");
-            Checks.check(maxValues <= OPTIONS_MAX_AMOUNT, "Min Values may not be greater than %d! Provided: %d", OPTIONS_MAX_AMOUNT, maxValues);
+            Checks.check(maxValues <= OPTIONS_MAX_AMOUNT, "Max Values may not be greater than %d! Provided: %d", OPTIONS_MAX_AMOUNT, maxValues);
             this.maxValues = maxValues;
             return this;
         }

File: src/main/java/net/dv8tion/jda/api/interactions/components/selections/SelectOption.java
Patch:
@@ -20,6 +20,7 @@
 import net.dv8tion.jda.api.entities.emoji.EmojiUnion;
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.api.utils.data.SerializableData;
+import net.dv8tion.jda.internal.entities.EntityBuilder;
 import net.dv8tion.jda.internal.utils.Checks;
 
 import javax.annotation.CheckReturnValue;
@@ -304,7 +305,7 @@ public static SelectOption fromData(@Nonnull DataObject data)
             data.getString("value"),
             data.getString("description", null),
             data.getBoolean("default", false),
-            data.optObject("emoji").map(Emoji::fromData).orElse(null)
+            data.optObject("emoji").map(EntityBuilder::createEmoji).orElse(null)
         );
     }
 }

File: src/main/java/net/dv8tion/jda/internal/interactions/component/ButtonImpl.java
Patch:
@@ -21,6 +21,7 @@
 import net.dv8tion.jda.api.interactions.components.buttons.Button;
 import net.dv8tion.jda.api.interactions.components.buttons.ButtonStyle;
 import net.dv8tion.jda.api.utils.data.DataObject;
+import net.dv8tion.jda.internal.entities.EntityBuilder;
 
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
@@ -43,7 +44,7 @@ public ButtonImpl(DataObject data)
             ButtonStyle.fromKey(data.getInt("style")),
             data.getString("url", null),
             data.getBoolean("disabled"),
-            data.optObject("emoji").map(Emoji::fromData).orElse(null));
+            data.optObject("emoji").map(EntityBuilder::createEmoji).orElse(null));
     }
 
     public ButtonImpl(String id, String label, ButtonStyle style, boolean disabled, Emoji emoji)

File: src/main/java/net/dv8tion/jda/internal/entities/GuildImpl.java
Patch:
@@ -719,7 +719,7 @@ public List<GuildChannel> getChannels(boolean includeHidden)
         Predicate<GuildChannel> filterHidden = it -> {
             //TODO-v5: Do we need to if-protected cast here? If the channel _isnt_ a IPermissionContainer, then would we even be using this filter on it?
             if (it instanceof IPermissionContainer) {
-                self.hasPermission((IPermissionContainer) it, Permission.VIEW_CHANNEL);
+                return self.hasPermission((IPermissionContainer) it, Permission.VIEW_CHANNEL);
             }
             return false;
         };

File: src/main/java/net/dv8tion/jda/internal/entities/GuildImpl.java
Patch:
@@ -1842,7 +1842,7 @@ public AuditableRestAction<GuildSticker> createSticker(@Nonnull String name, @No
     public AuditableRestAction<Void> deleteSticker(@Nonnull StickerSnowflake id)
     {
         Checks.notNull(id, "Sticker");
-        Route.CompiledRoute route = Route.Stickers.DELETE_GUILD_STICKER.compile(id.getId());
+        Route.CompiledRoute route = Route.Stickers.DELETE_GUILD_STICKER.compile(getId(), id.getId());
         return new AuditableRestActionImpl<>(api, route);
     }
 

File: src/main/java/net/dv8tion/jda/api/entities/Message.java
Patch:
@@ -2709,7 +2709,7 @@ public String getProxyUrl()
         @Nonnull
         public AttachmentProxy getProxy()
         {
-            return new AttachmentProxy(getProxyUrl());
+            return new AttachmentProxy(width > 0 && height > 0 ? proxyUrl : url);
         }
 
         /**

File: src/main/java/net/dv8tion/jda/internal/handle/GuildMembersChunkHandler.java
Patch:
@@ -25,6 +25,7 @@
 import net.dv8tion.jda.internal.entities.GuildImpl;
 import net.dv8tion.jda.internal.entities.MemberImpl;
 import net.dv8tion.jda.internal.requests.WebSocketClient;
+import net.dv8tion.jda.internal.utils.Helpers;
 
 public class GuildMembersChunkHandler extends SocketHandler
 {
@@ -48,7 +49,7 @@ protected Long handleInternally(DataObject content)
             // Chunk handling
             EntityBuilder builder = getJDA().getEntityBuilder();
             TLongObjectMap<DataObject> presences = content.optArray("presences").map(it ->
-                builder.convertToUserMap(o -> o.getObject("user").getUnsignedLong("id"), it)
+                Helpers.convertToMap(o -> o.getObject("user").getUnsignedLong("id"), it)
             ).orElseGet(TLongObjectHashMap::new);
             for (int i = 0; i < members.length(); i++)
             {

File: src/main/java/net/dv8tion/jda/internal/requests/MemberChunkManager.java
Patch:
@@ -25,6 +25,7 @@
 import net.dv8tion.jda.internal.entities.EntityBuilder;
 import net.dv8tion.jda.internal.entities.GuildImpl;
 import net.dv8tion.jda.internal.entities.MemberImpl;
+import net.dv8tion.jda.internal.utils.Helpers;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -193,7 +194,7 @@ private List<Member> toMembers(DataObject chunk)
             EntityBuilder builder = guild.getJDA().getEntityBuilder();
             DataArray memberArray = chunk.getArray("members");
             TLongObjectMap<DataObject> presences = chunk.optArray("presences").map(it ->
-                builder.convertToUserMap(o -> o.getObject("user").getUnsignedLong("id"), it)
+                Helpers.convertToMap(o -> o.getObject("user").getUnsignedLong("id"), it)
             ).orElseGet(TLongObjectHashMap::new);
             List<Member> collect = new ArrayList<>(memberArray.length());
             for (int i = 0; i < memberArray.length(); i++)

File: src/main/java/net/dv8tion/jda/api/utils/FileProxy.java
Patch:
@@ -199,7 +199,7 @@ protected CompletableFuture<Path> downloadToPath(String url)
     protected CompletableFuture<Path> downloadToPath(String url, Path path)
     {
         //Check if the parent path, the folder, exists
-        Checks.check(Files.notExists(path.getParent()), "Parent folder of the file '" + path.toAbsolutePath() + "' does not exist.");
+        Checks.check(Files.exists(path.getParent()), "Parent folder of the file '" + path.toAbsolutePath() + "' does not exist.");
 
         final DownloadTask downloadTask = downloadInternal(url);
 

File: src/main/java/net/dv8tion/jda/api/entities/EmbedType.java
Patch:
@@ -28,6 +28,7 @@ public enum EmbedType
     VIDEO("video"),
     LINK("link"),
     RICH("rich"),
+    AUTO_MODERATION("auto_moderation_message"),
     UNKNOWN("");
 
     private final String key;

File: src/main/java/net/dv8tion/jda/api/entities/Message.java
Patch:
@@ -1394,6 +1394,7 @@ default MessageAction reply(@Nonnull byte[] data, @Nonnull String name, @Nonnull
      *              <li>If this Message was not sent by the currently logged in account and it was <b>not</b> sent in a
      *              {@link GuildChannel GuildChannel}.</li>
      *              <li>If this Message is ephemeral</li>
+     *              <li>If this message type cannot be deleted. (See {@link MessageType#canDelete()})</li>
      *         </ul>
      *
      * @return {@link net.dv8tion.jda.api.requests.restaction.AuditableRestAction AuditableRestAction}

File: src/main/java/net/dv8tion/jda/internal/entities/ReceivedMessage.java
Patch:
@@ -640,6 +640,8 @@ public AuditableRestAction<Void> delete()
             else if (!sMember.hasPermission(gChan, Permission.MESSAGE_MANAGE))
                 throw new InsufficientPermissionException(gChan, Permission.MESSAGE_MANAGE);
         }
+        if (!type.canDelete())
+            throw new IllegalStateException("Cannot delete messages of type " + type);
         return channel.deleteMessageById(getIdLong());
     }
 

File: src/main/java/net/dv8tion/jda/api/entities/Message.java
Patch:
@@ -267,7 +267,7 @@ default Message getReferencedMessage()
      * <p>This includes {@link Member Members}, {@link GuildChannel GuildChannels}, {@link Role Roles}, and {@link Emote Emotes}.
      * Can also be used to check if a message mentions {@code @everyone} or {@code @here}.
      *
-     * <h3>Example</h3>
+     * <p><b>Example</b><br>
      * {@code
      * System.out.println("Message mentioned these users: " + message.getMentions().getUsers());
      * System.out.println("Message used these emotes: " + message.getMentions().getEmotes());

File: src/examples/java/MessageListenerExample.java
Patch:
@@ -169,7 +169,7 @@ else if (msg.startsWith("!kick"))   //Note, I used "startsWith, not equals.
             if (message.isFromType(ChannelType.TEXT))
             {
                 //If no users are provided, we can't kick anyone!
-                if (message.getMentionedUsers().isEmpty())
+                if (message.getMentions().getUsers().isEmpty())
                 {
                     channel.sendMessage("You must mention 1 or more Users to be kicked!").queue();
                 }
@@ -187,7 +187,7 @@ else if (msg.startsWith("!kick"))   //Note, I used "startsWith, not equals.
                     }
 
                     //Loop over all mentioned users, kicking them one at a time. Mwauahahah!
-                    List<User> mentionedUsers = message.getMentionedUsers();
+                    List<User> mentionedUsers = message.getMentions().getUsers();
                     for (User user : mentionedUsers)
                     {
                         Member member = guild.getMember(user);  //We get the member object for each mentioned user to kick them!

File: src/main/java/net/dv8tion/jda/internal/interactions/command/CommandInteractionPayloadImpl.java
Patch:
@@ -85,7 +85,7 @@ public CommandInteractionPayloadImpl(JDAImpl jda, DataObject data)
     private void parseOptions(DataArray options)
     {
         options.stream(DataArray::getObject)
-                .map(json -> new OptionMapping(json, resolved))
+                .map(json -> new OptionMapping(json, resolved, getJDA(), getGuild()))
                 .forEach(this.options::add);
     }
 

File: src/main/java/net/dv8tion/jda/internal/utils/AllowedMentionsImpl.java
Patch:
@@ -108,7 +108,7 @@ public AllowedMentionsImpl applyMessage(Message message)
         else
         {
             // Only ping everyone if the message also did
-            if (message.mentionsEveryone())
+            if (message.getMentions().mentionsEveryone())
             {
                 String content = message.getContentRaw();
                 EnumSet<Message.MentionType> parse = EnumSet.noneOf(Message.MentionType.class);
@@ -123,8 +123,8 @@ public AllowedMentionsImpl applyMessage(Message message)
                 this.parse = EnumSet.noneOf(Message.MentionType.class);
             }
 
-            this.mention(message.getMentionedUsers())
-                .mention(message.getMentionedRoles());
+            this.mention(message.getMentions().getUsers())
+                .mention(message.getMentions().getRoles());
         }
         return this;
     }

File: src/main/java/net/dv8tion/jda/internal/JDAImpl.java
Patch:
@@ -758,8 +758,7 @@ public synchronized void shutdownInternals()
         guildSetupController.close();
 
         // stop accepting new requests
-        if (requester.stop()) // returns true if no more requests will be executed
-            shutdownRequester(); // in that case shutdown entirely
+        requester.stop(); // the requester calls shutdownRequester when its done
         threadConfig.shutdown();
 
         if (shutdownHook != null)
@@ -774,7 +773,7 @@ public synchronized void shutdownInternals()
         setStatus(Status.SHUTDOWN);
     }
 
-    public synchronized void shutdownRequester()
+    public void shutdownRequester()
     {
         // Stop all request processing
         requester.shutdown();

File: src/main/java/net/dv8tion/jda/internal/utils/config/MetaConfig.java
Patch:
@@ -43,7 +43,7 @@ public MetaConfig(
         this.cacheFlags = cacheFlags == null ? EnumSet.allOf(CacheFlag.class) : cacheFlags;
         this.enableMDC = flags.contains(ConfigFlag.MDC_CONTEXT);
         if (enableMDC)
-            this.mdcContextMap = mdcContextMap == null ? new ConcurrentHashMap<>() : null;
+            this.mdcContextMap = mdcContextMap == null ? new ConcurrentHashMap<>() : mdcContextMap;
         else
             this.mdcContextMap = null;
         this.useShutdownHook = flags.contains(ConfigFlag.SHUTDOWN_HOOK);

File: src/main/java/net/dv8tion/jda/internal/entities/NewsChannelImpl.java
Patch:
@@ -27,6 +27,7 @@
 import net.dv8tion.jda.internal.entities.mixin.channel.middleman.BaseGuildMessageChannelMixin;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
 import net.dv8tion.jda.internal.requests.Route;
+import net.dv8tion.jda.internal.managers.channel.concrete.NewsChannelManagerImpl;
 import net.dv8tion.jda.internal.utils.Checks;
 
 import javax.annotation.Nonnull;
@@ -137,7 +138,7 @@ public ChannelAction<NewsChannel> createCopy(@Nonnull Guild guild)
     @Override
     public NewsChannelManager getManager()
     {
-        return null;
+        return new NewsChannelManagerImpl(this);
     }
 
     @Override

File: src/main/java/net/dv8tion/jda/api/interactions/commands/build/SlashCommandData.java
Patch:
@@ -161,6 +161,7 @@ default SlashCommandData addOptions(@Nonnull Collection<? extends OptionData> op
      * @throws IllegalArgumentException
      *         <ul>
      *             <li>If you try to mix subcommands/options/groups in one command.</li>
+     *             <li>If the option type is {@link OptionType#UNKNOWN UNKNOWN}.</li>
      *             <li>If the option type is {@link OptionType#SUB_COMMAND} or {@link OptionType#SUB_COMMAND_GROUP}.</li>
      *             <li>If the provided option type does not support auto-complete</li>
      *             <li>If this option is required and you already added a non-required option.</li>
@@ -196,6 +197,7 @@ default SlashCommandData addOption(@Nonnull OptionType type, @Nonnull String nam
      * @throws IllegalArgumentException
      *         <ul>
      *             <li>If you try to mix subcommands/options/groups in one command.</li>
+     *             <li>If the option type is {@link OptionType#UNKNOWN UNKNOWN}.</li>
      *             <li>If the option type is {@link OptionType#SUB_COMMAND} or {@link OptionType#SUB_COMMAND_GROUP}.</li>
      *             <li>If this option is required and you already added a non-required option.</li>
      *             <li>If more than 25 options are provided.</li>
@@ -227,6 +229,7 @@ default SlashCommandData addOption(@Nonnull OptionType type, @Nonnull String nam
      * @throws IllegalArgumentException
      *         <ul>
      *             <li>If you try to mix subcommands/options/groups in one command.</li>
+     *             <li>If the option type is {@link OptionType#UNKNOWN UNKNOWN}.</li>
      *             <li>If the option type is {@link OptionType#SUB_COMMAND} or {@link OptionType#SUB_COMMAND_GROUP}.</li>
      *             <li>If this option is required and you already added a non-required option.</li>
      *             <li>If more than 25 options are provided.</li>

File: src/main/java/net/dv8tion/jda/api/requests/GatewayIntent.java
Patch:
@@ -62,7 +62,7 @@
  *     <li><b>DIRECT_MESSAGE_TYPING</b> - This is used to track when a user starts typing in private channels (DMs). Almost no bot will have a use for this.</li>
  * </ol>
  *
- * If an intent is not specifically mentioned to be <b>privileged</b>, it is not required to be on the whitelist to use if (and its related events).
+ * If an intent is not specifically mentioned to be <b>privileged</b>, it is not required to be on the whitelist to use it (and its related events).
  * To get whitelisted you either need to contact discord support (for bots in more than 100 guilds)
  * or enable it in the developer dashboard of your application.
  *

File: src/main/java/net/dv8tion/jda/api/requests/restaction/pagination/BanPaginationAction.java
Patch:
@@ -31,7 +31,7 @@
  * Minimum - 1
  * <br>Maximum - 1000
  *
- * <h1>Example</h1>
+ * <h2>Example</h2>
  * <pre>{@code
  * // Revoke all bans from a guild with a certain reason
  * public static void findBansWithReason(Guild guild, String reason) {

File: src/main/java/net/dv8tion/jda/api/requests/restaction/pagination/BanPaginationAction.java
Patch:
@@ -45,7 +45,7 @@
  * }</pre>
  *
  * @see Guild#retrieveBanList()
- * @see Guild#retrieveBanById(long)
+ * @see Guild#retrieveBan(net.dv8tion.jda.api.entities.UserSnowflake)
  */
 public interface BanPaginationAction extends PaginationAction<Guild.Ban, BanPaginationAction>
 {

File: src/main/java/net/dv8tion/jda/internal/requests/ratelimit/BotRateLimiter.java
Patch:
@@ -150,6 +150,9 @@ private void cleanup()
                 // If the requests of the bucket are drained and the reset is expired the bucket has no valuable information
                 else if (bucket.requests.isEmpty() && bucket.reset <= getNow())
                     entries.remove();
+                // Remove empty buckets when the rate limiter is stopped
+                else if (bucket.requests.isEmpty() && isStopped)
+                    entries.remove();
             }
             // Log how many buckets were removed
             size -= buckets.size();

File: src/main/java/net/dv8tion/jda/api/entities/MessageReaction.java
Patch:
@@ -351,7 +351,7 @@ public RestAction<Void> removeReaction(@Nonnull User user)
                 throw new PermissionException("Unable to remove Reaction of other user in non-guild channels!");
             }
 
-            IPermissionContainer permChannel = (IPermissionContainer) this.channel;
+            IPermissionContainer permChannel = getGuildChannel().getPermissionContainer();
             if (!permChannel.getGuild().getSelfMember().hasPermission(permChannel, Permission.MESSAGE_MANAGE))
                 throw new InsufficientPermissionException(permChannel, Permission.MESSAGE_MANAGE);
         }

File: src/main/java/net/dv8tion/jda/api/interactions/callbacks/IAutoCompleteCallback.java
Patch:
@@ -43,7 +43,7 @@ public interface IAutoCompleteCallback extends Interaction
      * <br>The user may continue writing inputs instead of using one of your choices.
      *
      * @param  choices
-     *         The choice suggestions to present to the user, 0-{@link OptionData#MAX_CHOICES} choices
+     *         The choice suggestions to present to the user, 0-{@value OptionData#MAX_CHOICES} choices
      *
      * @throws IllegalArgumentException
      *         If any of the following is true:
@@ -67,7 +67,7 @@ public interface IAutoCompleteCallback extends Interaction
      * <br>The user may continue writing inputs instead of using one of your choices.
      *
      * @param  choices
-     *         The choice suggestions to present to the user, 0-{@link OptionData#MAX_CHOICES} choices
+     *         The choice suggestions to present to the user, 0-{@value OptionData#MAX_CHOICES} choices
      *
      * @throws IllegalArgumentException
      *         If any of the following is true:

File: src/main/java/net/dv8tion/jda/api/entities/Activity.java
Patch:
@@ -162,7 +162,7 @@ static Activity streaming(@Nonnull String name, @Nullable String url)
 
     /**
      * Creates a new Activity instance with the specified name.
-     * <br>This will display as {@code Listening name} in the official client
+     * <br>This will display as {@code Listening to name} in the official client
      *
      * @param  name
      *         The not-null name of the newly created game

File: src/main/java/net/dv8tion/jda/internal/entities/RoleImpl.java
Patch:
@@ -289,7 +289,7 @@ public RoleAction createCopy(@Nonnull Guild guild)
                     .setMentionable(mentionable)
                     .setName(name)
                     .setPermissions(rawPermissions)
-                    .setIcon(icon.getEmoji()); // we can only copy the emoji as we don't have access to the Icon instance
+                    .setIcon(icon == null ? null : icon.getEmoji()); // we can only copy the emoji as we don't have access to the Icon instance
     }
 
     @Nonnull

File: src/main/java/net/dv8tion/jda/internal/entities/PrivateChannelImpl.java
Patch:
@@ -184,6 +184,9 @@ public String toString()
 
     private void updateUser()
     {
+        //if the user is null then we don't even know their ID, and so we have to check that first
+        if (user == null)
+            return;
         // Load user from cache if one exists, otherwise we might have an outdated user instance
         User realUser = getJDA().getUserById(user.getIdLong());
         if (realUser != null)

File: src/main/java/net/dv8tion/jda/api/managers/channel/middleman/AudioChannelManager.java
Patch:
@@ -63,7 +63,6 @@ public interface AudioChannelManager<T extends AudioChannel, M extends AudioChan
      *     <li>{@link Region#SINGAPORE}</li>
      *     <li>{@link Region#SOUTH_AFRICA}</li>
      *     <li>{@link Region#SYDNEY}</li>
-     *     <li>{@link Region#EUROPE}</li>
      *     <li>{@link Region#INDIA}</li>
      *     <li>{@link Region#SOUTH_KOREA}</li>
      *     <li>{@link Region#BRAZIL}</li>

File: src/main/java/net/dv8tion/jda/api/requests/ErrorResponse.java
Patch:
@@ -86,7 +86,7 @@ public enum ErrorResponse
     ANNOUNCEMENT_RATE_LIMIT(                  20022, "This message cannot be edited due to announcement rate limits"),
     CHANNEL_WRITE_RATE_LIMIT(                 20028, "The channel you are writing has hit the write rate limit"),
     GUILD_EXPLICIT_CONTENT_FILTER(            20031, "Your Stage topic, server name, server description, or channel names contain words that are not allowed"),
-    GUILD_OREMIUM_LEVE_TOO_LOW(               20035, "Guild premium subscription level too low"),
+    GUILD_PREMIUM_LEVEL_TOO_LOW(              20035, "Guild premium subscription level too low"),
     MAX_GUILDS(                               30001, "Maximum number of Guilds reached (100)"),
     MAX_FRIENDS(                              30002, "Maximum number of Friends reached (1000)"),
     MAX_MESSAGE_PINS(                         30003, "Maximum number of pinned messages reached (50)"),

File: src/main/java/net/dv8tion/jda/api/audit/ThreadLocalReason.java
Patch:
@@ -28,7 +28,7 @@
  * thread-local reason set through this handle. Thus audit-log reasons done by callbacks will also use the one set
  * from the executing thread.
  *
- * <h1>Example without closable</h1>
+ * <h2>Example without closable</h2>
  * <pre><code>
  * String previousReason = ThreadLocalReason.getCurrent();
  * ThreadLocalReason.setCurrent("Hello World");
@@ -44,7 +44,7 @@
  * guild.kick(user).queue();
  * </code></pre>
  *
- * <h1>Example with closable</h1>
+ * <h2>Example with closable</h2>
  * <pre><code>
  * try (ThreadLocalReason.Closable __ = ThreadLocalReason.closable("Hello World")) {
  *     guild.ban(user, 0).queue(v -&gt; {

File: src/main/java/net/dv8tion/jda/api/entities/Emoji.java
Patch:
@@ -168,7 +168,7 @@ public static Emoji fromEmote(@Nonnull Emote emote)
 
     /**
      * Parses the provided markdown formatting to an Emoji instance.
-     * <h2>Example</h2>
+     * <h4>Example</h4>
      * <pre>{@code
      * // animated custom emoji
      * parseMarkdown("<a:dance:123456789123456789>");

File: src/main/java/net/dv8tion/jda/api/entities/GuildMessageChannel.java
Patch:
@@ -469,7 +469,7 @@ default RestAction<Void> clearReactionsById(long messageId)
     /**
      * Removes all reactions for the specified emoji.
      *
-     * <h2>Example</h2>
+     * <h4>Example</h4>
      * <pre><code>
      * // custom
      * channel.clearReactions(messageId, "minn:245267426227388416").queue();
@@ -551,7 +551,7 @@ default RestAction<Void> clearReactionsById(@Nonnull String messageId, @Nonnull
     /**
      * Removes all reactions for the specified emoji.
      *
-     * <h2>Example</h2>
+     * <h4>Example</h4>
      * <pre><code>
      * // custom
      * channel.clearReactions(messageId, "minn:245267426227388416").queue();

File: src/main/java/net/dv8tion/jda/api/entities/IMentionable.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * Marks a mentionable entity.
  *
- * <h1>Formattable</h1>
+ * <h2>Formattable</h2>
  * This interface extends {@link java.util.Formattable Formattable} and can be used with a {@link java.util.Formatter Formatter}
  * such as used by {@link String#format(String, Object...) String.format(String, Object...)}
  * or {@link java.io.PrintStream#printf(String, Object...) PrintStream.printf(String, Object...)}.

File: src/main/java/net/dv8tion/jda/api/entities/MessageHistory.java
Patch:
@@ -504,7 +504,7 @@ public static MessageRetrieveAction getHistoryAround(@Nonnull MessageChannel cha
      *
      * <p>Alternatively you can use {@link net.dv8tion.jda.api.entities.MessageChannel#getHistoryFromBeginning(int) MessageChannel.getHistoryFromBeginning(...)}
      *
-     * <h2>Example</h2>
+     * <h4>Example</h4>
      * <br>{@code MessageHistory history = MessageHistory.getHistoryFromBeginning(channel).limit(60).complete()}
      * <br>Will return a MessageHistory instance with the first 60 messages of the given {@link net.dv8tion.jda.api.entities.MessageChannel MessageChannel}.
 

File: src/main/java/net/dv8tion/jda/api/entities/ThreadChannel.java
Patch:
@@ -61,7 +61,7 @@ default boolean isPublic()
 
     /**
      * Gets the current number of members that have joined this thread.
-     * <br/>
+     * <br>
      * This is capped at 50, meaning any additional members will not affect this count.
      *
      * @return The number of members that have joined this thread, capping at 50.

File: src/main/java/net/dv8tion/jda/api/entities/User.java
Patch:
@@ -35,7 +35,7 @@
  * Represents a Discord User.
  * Contains all publicly available information about a specific Discord User.
  *
- * <h1>Formattable</h1>
+ * <h2>Formattable</h2>
  * This interface extends {@link java.util.Formattable Formattable} and can be used with a {@link java.util.Formatter Formatter}
  * such as used by {@link String#format(String, Object...) String.format(String, Object...)}
  * or {@link java.io.PrintStream#printf(String, Object...) PrintStream.printf(String, Object...)}.
@@ -266,7 +266,7 @@ default String getEffectiveAvatarUrl()
      * <br>If a channel has already been opened with this user, it is immediately returned in the RestAction's
      * success consumer without contacting the Discord API.
      *
-     * <h2>Examples</h2>
+     * <h4>Examples</h4>
      * <pre>{@code
      * // Send message without response handling
      * public void sendMessage(User user, String content) {

File: src/main/java/net/dv8tion/jda/api/entities/Webhook.java
Patch:
@@ -42,7 +42,7 @@ public interface Webhook extends ISnowflake
     /**
      * Pattern for a Webhook URL.
      *
-     * <h2>Groups</h2>
+     * <h4>Groups</h4>
      * <table>
      *   <caption style="display: none">Javadoc is stupid, this is not a required tag</caption>
      *   <tr>
@@ -176,7 +176,7 @@ public interface Webhook extends ISnowflake
      * The execute token for this Webhook.
      * <br>This can be used to modify/delete/execute
      * this Webhook.
-     * 
+     *
      * <p><b>Note: Some Webhooks, such as those retrieved from Audit Logs, do not contain a token</b>
      *
      * @return The execute token for this Webhook
@@ -239,7 +239,7 @@ public interface Webhook extends ISnowflake
      * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
      *         If the Webhook does not have a token, such as the Webhooks retrieved from Audit Logs and the currently
      *         logged in account does not have {@link net.dv8tion.jda.api.Permission#MANAGE_WEBHOOKS} in this channel.
-     * 
+     *
      * @return {@link net.dv8tion.jda.api.requests.restaction.AuditableRestAction AuditableRestAction}
      *         <br>The rest action to delete this Webhook.
      */

File: src/main/java/net/dv8tion/jda/api/events/UpdateEvent.java
Patch:
@@ -44,7 +44,7 @@ default Class<E> getEntityType()
     /**
      * The field name for the updated property
      *
-     * <h1>Example</h1>
+     * <h4>Example</h4>
      * <pre><code>
      * {@literal @Override}
      * public void onGenericRoleUpdate(GenericRoleUpdateEvent event)

File: src/main/java/net/dv8tion/jda/api/events/thread/ThreadRevealedEvent.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * This event is dispatched when a {@link ThreadChannel} that JDA didn't previously have access to (due to permissions) is now visible.
  *
- * For example, if the bot is given the {@link net.dv8tion.jda.api.Permission.ADMINISTRATOR} permission, any thread channels that the bot could not previously see would be "revealed".
+ * For example, if the bot is given the {@link net.dv8tion.jda.api.Permission#ADMINISTRATOR} permission, any thread channels that the bot could not previously see would be "revealed".
  *
  * @see ThreadHiddenEvent
  */

File: src/main/java/net/dv8tion/jda/api/interactions/components/LayoutComponent.java
Patch:
@@ -252,7 +252,7 @@ else if (!components.isValid() && newComponent != null)
 
     /**
      * Find and replace a component in this layout.
-     * <br>This will locate and replace the existing component by checking for {@link ItemComponent#equals(Object) equality}. If you provide null it will be removed instead.
+     * <br>This will locate and replace the existing component by checking for {@link Object#equals(Object) equality}. If you provide null it will be removed instead.
      *
      * <p><b>Example</b>
      * <pre>{@code
@@ -293,7 +293,7 @@ default ItemComponent updateComponent(@Nonnull ItemComponent component, @Nullabl
 
     /**
      * Find and replace a component in this list of layouts.
-     * <br>This will locate and replace the existing component by checking for {@link ItemComponent#equals(Object) equality}. If you provide null it will be removed instead.
+     * <br>This will locate and replace the existing component by checking for {@link Object#equals(Object) equality}. If you provide null it will be removed instead.
      *
      * <p>If one of the layouts is empty after removing the component, it will be removed from the list.
      * This is an inplace operation and modifies the provided list directly.

File: src/main/java/net/dv8tion/jda/api/requests/restaction/MessageAction.java
Patch:
@@ -60,7 +60,7 @@
  * If you decide not to execute this action, you should call {@link #clearFiles()} to free resources.</u>
  * <br>Note that the garbage collector also frees opened file streams when it finalizes the stream object.
  *
- * <h1>Example</h1>
+ * <h2>Example</h2>
  * <pre><code>
  * {@literal @Override}
  *  public void onMessageReceived(MessageReceivedEvent event)
@@ -101,7 +101,7 @@ public interface MessageAction extends RestAction<Message>, Appendable, AllowedM
      * <p>If {@code null} is provided to this method, then all Types will be pingable
      * (unless whitelisting via one of the {@code mention*} methods is used).
      *
-     * <h2>Example</h2>
+     * <h4>Example</h4>
      * <pre>{@code
      * // Disable EVERYONE and HERE mentions by default (to avoid mass ping)
      * EnumSet<Message.MentionType> deny = EnumSet.of(Message.MentionType.EVERYONE, Message.MentionType.HERE);

File: src/main/java/net/dv8tion/jda/api/requests/restaction/pagination/AuditLogPaginationAction.java
Patch:
@@ -36,7 +36,7 @@
  * Minimum - 1
  * <br>Maximum - 100
  *
- * <h1>Example</h1>
+ * <h2>Example</h2>
  * <pre><code>
  * public class Listener extends ListenerAdapter
  * {
@@ -75,7 +75,7 @@ public interface AuditLogPaginationAction extends PaginationAction<AuditLogEntry
      */
     @Nonnull
     Guild getGuild();
-    
+
     /**
      * Filters retrieved entities by the specified {@link net.dv8tion.jda.api.audit.ActionType ActionType}
      *

File: src/main/java/net/dv8tion/jda/api/requests/restaction/pagination/MessagePaginationAction.java
Patch:
@@ -34,7 +34,7 @@
  * Minimum - 1
  * <br>Maximum - 100
  *
- * <h1>Example</h1>
+ * <h2>Example</h2>
  * <pre><code>
  * /**
  *  * Iterates messages in an async stream and stops once the limit has been reached.

File: src/main/java/net/dv8tion/jda/api/requests/restaction/pagination/ReactionPaginationAction.java
Patch:
@@ -32,7 +32,7 @@
  * Minimum - 1
  * <br>Maximum - 100
  *
- * <h1>Example</h1>
+ * <h2>Example</h2>
  * <pre>{@code
  * // Remove reactions for the specified emoji
  * public static void removeReaction(Message message, String emoji) {

File: src/main/java/net/dv8tion/jda/api/requests/restaction/pagination/ThreadChannelPaginationAction.java
Patch:
@@ -34,7 +34,7 @@
  * Minimum - 1
  * <br>Maximum - 100
  *
- * <h1>Example</h1>
+ * <h2>Example</h2>
  * <pre>{@code
  * // Clean up all private threads older than 2 weeks
  * public static void cleanupPrivateThreads(TextChannel channel) {

File: src/main/java/net/dv8tion/jda/api/sharding/DefaultShardManagerBuilder.java
Patch:
@@ -650,7 +650,7 @@ public DefaultShardManagerBuilder disableCache(@Nonnull CacheFlag flag, @Nonnull
      * <p>It is not recommended to disable {@link GatewayIntent#GUILD_MEMBERS GatewayIntent.GUILD_MEMBERS} when
      * using {@link MemberCachePolicy#ALL MemberCachePolicy.ALL} as the members cannot be removed from cache by a leave event without this intent.
      *
-     * <h2>Example</h2>
+     * <h4>Example</h4>
      * <pre>{@code
      * public void configureCache(DefaultShardManagerBuilder builder) {
      *     // Cache members who are in a voice channel

File: src/main/java/net/dv8tion/jda/api/utils/AllowedMentions.java
Patch:
@@ -44,7 +44,7 @@ public interface AllowedMentions<R>
      * <p>If {@code null} is provided to this method, then all Types will be pingable
      * (unless whitelisting via one of the {@code mention*} methods is used).
      *
-     * <h2>Example</h2>
+     * <h4>Example</h4>
      * <pre>{@code
      * // Disable EVERYONE and HERE mentions by default (to avoid mass ping)
      * EnumSet<Message.MentionType> deny = EnumSet.of(Message.MentionType.EVERYONE, Message.MentionType.HERE);

File: src/main/java/net/dv8tion/jda/api/utils/ClosableIterator.java
Patch:
@@ -25,7 +25,7 @@
  * <p>This closes automatically when {@link #hasNext()} returns {@code false} but
  * its recommended to only be used within a {@code try-with-resources} block for safety.
  *
- * <h3>Example</h3>
+ * <h2>Example</h2>
  * This can handle any exceptions thrown while iterating and ensures the lock is released correctly.
  * <pre>{@code
  * try (ClosableIterator<T> it = cacheView.lockedIterator()) {

File: src/main/java/net/dv8tion/jda/api/utils/LockIterator.java
Patch:
@@ -34,7 +34,7 @@
  * <p>This closes automatically when {@link #hasNext()} returns {@code false} but
  * its recommended to only be used within a {@code try-with-resources} block for safety.
  *
- * <h3>Example</h3>
+ * <h2>Example</h2>
  * This can handle any exceptions thrown while iterating and ensures the lock is released correctly.
  * <pre>{@code
  * try (ClosableIterator<T> it = cacheView.lockedIterator()) {

File: src/main/java/net/dv8tion/jda/api/utils/TimeFormat.java
Patch:
@@ -64,7 +64,7 @@ public enum TimeFormat
     /**
      * {@link Pattern} used for {@link #parse(String)}.
      *
-     * <h2>Groups</h2>
+     * <h4>Groups</h4>
      * <table>
      *   <caption style="display: none">Javadoc is stupid, this is not a required tag</caption>
      *   <tr>

File: src/main/java/net/dv8tion/jda/api/utils/cache/CacheView.java
Patch:
@@ -119,7 +119,7 @@ default void forEachUnordered(@Nonnull final Consumer<? super T> action)
      *
      * <p>The stream will be closed once this method returns and cannot be used anymore.
      *
-     * <h2>Example</h2>
+     * <h4>Example</h4>
      * <code>
      * {@literal CacheView<User>} view = jda.getUserCache();<br>
      * long shortNames = view.applyStream(stream {@literal ->} stream.filter(it {@literal ->} it.getName().length() {@literal <} 4).count());<br>
@@ -158,7 +158,7 @@ default <R> R applyStream(@Nonnull Function<? super Stream<T>, ? extends R> acti
      *
      * <p>The stream will be closed once this method returns and cannot be used anymore.
      *
-     * <h2>Example</h2>
+     * <h4>Example</h4>
      * <code>
      * {@literal CacheView<TextChannel>} view = guild.getTextChannelCache();<br>
      * view.acceptStream(stream {@literal ->} stream.filter(it {@literal ->} it.isNSFW()).forEach(it {@literal ->} it.sendMessage("lewd").queue()));

File: src/main/java/net/dv8tion/jda/api/utils/data/etf/ExTermDecoder.java
Patch:
@@ -41,7 +41,7 @@ public class ExTermDecoder
     /**
      * Unpacks the provided term into a java object.
      *
-     * <h2>The mapping is as follows:</h2>
+     * <h4>The mapping is as follows:</h4>
      * <ul>
      *     <li>{@code Small Int | Int -> Integer}</li>
      *     <li>{@code Small BigInt -> Long}</li>
@@ -71,7 +71,7 @@ public static Object unpack(ByteBuffer buffer)
     /**
      * Unpacks the provided term into a java {@link Map}.
      *
-     * <h2>The mapping is as follows:</h2>
+     * <h4>The mapping is as follows:</h4>
      * <ul>
      *     <li>{@code Small Int | Int -> Integer}</li>
      *     <li>{@code Small BigInt -> Long}</li>
@@ -102,7 +102,7 @@ public static Map<String, Object> unpackMap(ByteBuffer buffer)
     /**
      * Unpacks the provided term into a java {@link List}.
      *
-     * <h2>The mapping is as follows:</h2>
+     * <h4>The mapping is as follows:</h4>
      * <ul>
      *     <li>{@code Small Int | Int -> Integer}</li>
      *     <li>{@code Small BigInt -> Long}</li>

File: src/main/java/net/dv8tion/jda/api/utils/data/etf/ExTermEncoder.java
Patch:
@@ -40,7 +40,7 @@ public class ExTermEncoder
     /**
      * Encodes the provided object into an ETF buffer.
      *
-     * <h2>The mapping is as follows:</h2>
+     * <h4>The mapping is as follows:</h4>
      * <ul>
      *     <li>{@code String -> Binary}</li>
      *     <li>{@code Map -> Map}</li>

File: src/main/java/net/dv8tion/jda/api/entities/Member.java
Patch:
@@ -393,18 +393,18 @@ default String getEffectiveAvatarUrl()
     boolean isPending();
 
     /**
-     * The default {@link net.dv8tion.jda.api.entities.TextChannel TextChannel} for a {@link net.dv8tion.jda.api.entities.Member Member}.
+     * The default {@link net.dv8tion.jda.api.entities.BaseGuildMessageChannel BaseGuildMessageChannel} for a {@link net.dv8tion.jda.api.entities.Member Member}.
      * <br>This is the channel that the Discord client will default to opening when a Guild is opened for the first time
      * after joining the guild.
      * <br>The default channel is the channel with the highest position in which the member has
      * {@link net.dv8tion.jda.api.Permission#VIEW_CHANNEL Permission.VIEW_CHANNEL} permissions. If this requirement doesn't apply for
      * any channel in the guild, this method returns {@code null}.
      *
-     * @return The {@link net.dv8tion.jda.api.entities.TextChannel TextChannel} representing the default channel for this member
+     * @return The {@link net.dv8tion.jda.api.entities.BaseGuildMessageChannel BaseGuildMessageChannel} representing the default channel for this member
      *         or null if no such channel exists.
      */
     @Nullable
-    TextChannel getDefaultChannel();
+    BaseGuildMessageChannel getDefaultChannel();
 
     /**
      * Bans this Member and deletes messages sent by the user based on the amount of delDays.

File: src/main/java/net/dv8tion/jda/api/interactions/commands/build/OptionData.java
Patch:
@@ -364,7 +364,7 @@ public OptionData setRequired(boolean required)
     @Nonnull
     public OptionData setAutoComplete(boolean autoComplete)
     {
-        if (isAutoComplete)
+        if (autoComplete)
         {
             if (choices == null || !type.canSupportChoices())
                 throw new IllegalStateException("Cannot enable auto-complete for options of type " + type);

File: src/main/java/net/dv8tion/jda/internal/managers/channel/ChannelManagerImpl.java
Patch:
@@ -531,7 +531,7 @@ public M setInvitable(boolean invitable)
         }
 
         this.invitable = invitable;
-        set |= LOCKED;
+        set |= INVITEABLE;
         return (M) this;
     }
 

File: src/examples/java/MessageListenerExample.java
Patch:
@@ -35,8 +35,7 @@ public class MessageListenerExample extends ListenerAdapter
      */
     public static void main(String[] args)
     {
-        //We construct a builder for a BOT account. If we wanted to use a CLIENT account
-        // we would use AccountType.CLIENT
+        //We construct a builder for our bot.
         try
         {
             JDA jda = JDABuilder.createDefault("Your-Token-Goes-Here") // The token of the account that is logging in.

File: src/main/java/net/dv8tion/jda/internal/entities/mixin/channel/attribute/IThreadContainerMixin.java
Patch:
@@ -77,7 +77,7 @@ default ThreadChannelPaginationAction retrieveArchivedPublicThreadChannels()
         checkPermission(Permission.MESSAGE_HISTORY);
 
         Route.CompiledRoute route = Route.Channels.LIST_PUBLIC_ARCHIVED_THREADS.compile(getId());
-        return new ThreadChannelPaginationActionImpl(getJDA(), route, this);
+        return new ThreadChannelPaginationActionImpl(getJDA(), route, this, false);
     }
 
     @Nonnull
@@ -89,7 +89,7 @@ default ThreadChannelPaginationAction retrieveArchivedPrivateThreadChannels()
         checkPermission(Permission.MANAGE_THREADS);
 
         Route.CompiledRoute route = Route.Channels.LIST_PRIVATE_ARCHIVED_THREADS.compile(getId());
-        return new ThreadChannelPaginationActionImpl(getJDA(), route, this);
+        return new ThreadChannelPaginationActionImpl(getJDA(), route, this, false);
     }
 
     @Nonnull
@@ -100,6 +100,6 @@ default ThreadChannelPaginationAction retrieveArchivedPrivateJoinedThreadChannel
         checkPermission(Permission.MESSAGE_HISTORY);
 
         Route.CompiledRoute route = Route.Channels.LIST_JOINED_PRIVATE_ARCHIVED_THREADS.compile(getId());
-        return new ThreadChannelPaginationActionImpl(getJDA(), route, this);
+        return new ThreadChannelPaginationActionImpl(getJDA(), route, this, true);
     }
 }

File: src/main/java/net/dv8tion/jda/internal/entities/EntityBuilder.java
Patch:
@@ -1193,7 +1193,7 @@ public ThreadChannel createThreadChannel(GuildImpl guild, DataObject json, long
     public ThreadMember createThreadMember(GuildImpl guild, ThreadChannelImpl threadChannel, DataObject json)
     {
         DataObject memberJson = json.getObject("member");
-        DataObject presenceJson = json.getObject("presence");
+        DataObject presenceJson = json.isNull("presence") ? null : json.getObject("presence");
 
         Member member = createMember(guild, memberJson, null, presenceJson);
         return createThreadMember(threadChannel, member, json);

File: src/main/java/net/dv8tion/jda/api/events/message/GenericMessageEvent.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * Indicates that a {@link net.dv8tion.jda.api.entities.Message Message} was created/deleted/changed.
  * <br>Every MessageEvent is an instance of this event and can be casted.
- * 
+ *
  * <p>Can be used to detect any MessageEvent.
  *
  * <h2>Requirements</h2>
@@ -72,7 +72,7 @@ public MessageChannel getChannel()
     @Nonnull
     public GuildMessageChannel getGuildChannel()
     {
-        if (isFromGuild())
+        if (!isFromGuild())
             throw new IllegalStateException("This message event did not happen in a guild");
         return (GuildMessageChannel) channel;
     }

File: src/main/java/net/dv8tion/jda/api/entities/Invite.java
Patch:
@@ -43,7 +43,7 @@
  * @see    #resolve(JDA, String, boolean)
  *
  * @see    net.dv8tion.jda.api.entities.Guild#retrieveInvites() Guild.retrieveInvites()
- * @see    GuildChannel#retrieveInvites()
+ * @see    IInviteContainer#retrieveInvites()
  */
 public interface Invite
 {
@@ -322,7 +322,7 @@ default String getUrl()
      * Whether this Invite is expanded or not. Expanded invites contain more information, but they can only be
      * obtained by {@link net.dv8tion.jda.api.entities.Guild#retrieveInvites() Guild#retrieveInvites()} (requires
      * {@link net.dv8tion.jda.api.Permission#MANAGE_SERVER Permission.MANAGE_SERVER}) or
-     * {@link GuildChannel#retrieveInvites() GuildChannel#retrieveInvites()} (requires
+     * {@link IInviteContainer#retrieveInvites() IInviteContainer#retrieveInvites()} (requires
      * {@link net.dv8tion.jda.api.Permission#MANAGE_CHANNEL Permission.MANAGE_CHANNEL}).
      *
      * <p>There is a convenience method {@link #expand()} to get the expanded invite for an unexpanded one.

File: src/main/java/net/dv8tion/jda/api/entities/Message.java
Patch:
@@ -2512,7 +2512,7 @@ default MessageAction reply(@Nonnull byte[] data, @Nonnull String name, @Nonnull
      *         If this is a system message
      * @throws IllegalStateException
      *         <ul>
-     *             <li>If the channel is not a text or news channel. See {@link TextChannel#isNews()}.</li>
+     *             <li>If the channel is not a {@link NewsChannel}.</li>
      *             <li>If the message is ephemeral.</li>
      *         </ul>
      * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException

File: src/main/java/net/dv8tion/jda/api/requests/restaction/InviteAction.java
Patch:
@@ -33,7 +33,7 @@
  * {@link net.dv8tion.jda.api.entities.Invite Invite} Builder system created as an extension of {@link net.dv8tion.jda.api.requests.RestAction}
  * <br>Provides an easy way to gather and deliver information to Discord to create {@link net.dv8tion.jda.api.entities.Invite Invites}.
  *
- * @see GuildChannel#createInvite()
+ * @see net.dv8tion.jda.api.entities.IInviteContainer#createInvite()
  */
 public interface InviteAction extends AuditableRestAction<Invite>
 {

File: src/main/java/net/dv8tion/jda/internal/entities/AbstractChannelImpl.java
Patch:
@@ -56,6 +56,7 @@ public String getName()
     }
 
     @Override
+    @SuppressWarnings("unchecked")
     public T setName(String name)
     {
         this.name = name;

File: src/main/java/net/dv8tion/jda/internal/managers/channel/ChannelManagerImpl.java
Patch:
@@ -40,6 +40,7 @@
 import java.util.EnumSet;
 import java.util.Set;
 
+@SuppressWarnings("unchecked") //We do a lot of (M) and (T) casting that we know is correct but the compiler warns about.
 public class ChannelManagerImpl<T extends GuildChannel, M extends ChannelManager<T, M>> extends ManagerBase<M> implements ChannelManager<T, M>
 {
     protected T channel;

File: src/main/java/net/dv8tion/jda/api/events/role/update/RoleUpdateIconEvent.java
Patch:
@@ -34,7 +34,7 @@ public class RoleUpdateIconEvent extends GenericRoleUpdateEvent<RoleIcon>
 {
     public static final String IDENTIFIER = "icon";
 
-    public RoleUpdateIconEvent(@Nonnull JDA api, long responseNumber, @Nonnull Role role, @Nonnull RoleIcon oldIcon)
+    public RoleUpdateIconEvent(@Nonnull JDA api, long responseNumber, @Nonnull Role role, @Nullable RoleIcon oldIcon)
     {
         super(api, responseNumber, role, oldIcon, role.getIcon(), IDENTIFIER);
     }

File: src/main/java/net/dv8tion/jda/internal/entities/RoleImpl.java
Patch:
@@ -330,7 +330,7 @@ public RoleTags getTags()
         return tags == null ? RoleTagsImpl.EMPTY : tags;
     }
 
-    @Nonnull
+    @Nullable
     @Override
     public RoleIcon getIcon()
     {

File: src/main/java/net/dv8tion/jda/api/entities/AudioChannel.java
Patch:
@@ -23,7 +23,7 @@
 import javax.annotation.Nullable;
 
 //TODO-v5: Docs
-public interface AudioChannel extends GuildChannel, IMemberContainer, IPermissionContainer
+public interface AudioChannel extends GuildChannel, IMemberContainer
 {
     //TODO-v5: Docs
     @Override

File: src/main/java/net/dv8tion/jda/api/entities/GuildChannel.java
Patch:
@@ -40,7 +40,6 @@ public interface GuildChannel extends Channel, Comparable<GuildChannel>
      * @return The ChannelManager of this GuildChannel
      */
     @Nonnull
-//    ChannelManager<? extends GuildChannel> getManager();
     ChannelManager<?, ?> getManager();
 
     /**
@@ -70,4 +69,7 @@ public interface GuildChannel extends Channel, Comparable<GuildChannel>
     @Nonnull
     @CheckReturnValue
     AuditableRestAction<Void> delete();
+
+    //TODO-v5: Docs
+    IPermissionContainer getPermissionContainer();
 }

File: src/main/java/net/dv8tion/jda/api/entities/GuildMessageChannel.java
Patch:
@@ -12,7 +12,7 @@
 import java.util.stream.Collectors;
 
 //TODO-v5: Docs
-public interface GuildMessageChannel extends GuildChannel, MessageChannel, IPermissionContainer
+public interface GuildMessageChannel extends GuildChannel, MessageChannel
 {
     /**
      * Whether we can send messages in this channel.

File: src/main/java/net/dv8tion/jda/api/managers/channel/concrete/ThreadChannelManager.java
Patch:
@@ -20,9 +20,7 @@
 import net.dv8tion.jda.api.managers.channel.ChannelManager;
 import net.dv8tion.jda.api.managers.channel.attribute.IPermissionContainerManager;
 
-public interface ThreadChannelManager extends
-        ChannelManager<ThreadChannel, ThreadChannelManager>,
-        IPermissionContainerManager<ThreadChannel, ThreadChannelManager> //Only here to satisfy the proxied IPermissionContainer on ThreadChannel. All methods are disabled.
+public interface ThreadChannelManager extends ChannelManager<ThreadChannel, ThreadChannelManager>
 {
     //TODO - Thread stuff
 }

File: src/main/java/net/dv8tion/jda/api/managers/channel/middleman/AudioChannelManager.java
Patch:
@@ -18,12 +18,12 @@
 
 import net.dv8tion.jda.api.Region;
 import net.dv8tion.jda.api.entities.*;
-import net.dv8tion.jda.api.managers.channel.attribute.IPermissionContainerManager;
+import net.dv8tion.jda.api.managers.channel.ChannelManager;
 
 import javax.annotation.CheckReturnValue;
 import javax.annotation.Nonnull;
 
-public interface AudioChannelManager<T extends AudioChannel, M extends AudioChannelManager<T, M>> extends IPermissionContainerManager<T, M>
+public interface AudioChannelManager<T extends AudioChannel, M extends AudioChannelManager<T, M>> extends ChannelManager<T, M>
 {
     /**
      * Sets the <b><u>bitrate</u></b> of the selected {@link VoiceChannel VoiceChannel}.

File: src/main/java/net/dv8tion/jda/internal/entities/mixin/channel/middleman/AudioChannelMixin.java
Patch:
@@ -21,7 +21,7 @@
 import net.dv8tion.jda.api.entities.Member;
 import net.dv8tion.jda.internal.entities.mixin.channel.attribute.IPermissionContainerMixin;
 
-public interface AudioChannelMixin<T extends AudioChannelMixin<T>> extends AudioChannel, IPermissionContainerMixin<T>
+public interface AudioChannelMixin<T extends AudioChannelMixin<T>> extends AudioChannel, GuildChannelMixin<T>
 {
     // ---- State Accessors ----
     TLongObjectMap<Member> getConnectedMembersMap();

File: src/main/java/net/dv8tion/jda/internal/managers/AudioManagerImpl.java
Patch:
@@ -97,7 +97,7 @@ public void openAudioConnection(AudioChannel channel)
 
     private void checkChannel(AudioChannel channel, Member self)
     {
-        EnumSet<Permission> perms = Permission.getPermissions(PermissionUtil.getEffectivePermission(channel, self));
+        EnumSet<Permission> perms = Permission.getPermissions(PermissionUtil.getEffectivePermission(channel.getPermissionContainer(), self));
         if (!perms.contains(Permission.VOICE_CONNECT))
             throw new InsufficientPermissionException(channel, Permission.VOICE_CONNECT);
 

File: src/main/java/net/dv8tion/jda/api/entities/MessageChannel.java
Patch:
@@ -2410,7 +2410,7 @@ default ReactionPaginationAction retrieveReactionUsersById(@Nonnull String messa
         Checks.isSnowflake(messageId, "Message ID");
         Checks.notNull(emote, "Emote");
 
-        return new ReactionPaginationActionImpl(this, messageId, String.format("%s:%s", emote, emote.getId()));
+        return retrieveReactionUsersById(messageId, String.format("%s:%s", emote.getName(), emote.getId()));
     }
 
     /**

File: src/main/java/net/dv8tion/jda/api/entities/MessageHistory.java
Patch:
@@ -71,6 +71,8 @@ public MessageHistory(@Nonnull MessageChannel channel)
     {
         Checks.notNull(channel, "Channel");
         this.channel = channel;
+
+        //TODO-v5: Fix permissions here.
         if (channel instanceof TextChannel)
         {
             TextChannel tc = (TextChannel) channel;

File: src/main/java/net/dv8tion/jda/internal/entities/MemberImpl.java
Patch:
@@ -24,6 +24,7 @@
 import net.dv8tion.jda.api.utils.cache.CacheFlag;
 import net.dv8tion.jda.api.utils.cache.CacheView;
 import net.dv8tion.jda.internal.JDAImpl;
+import net.dv8tion.jda.internal.entities.mixin.channel.attribute.IPermissionContainerMixin;
 import net.dv8tion.jda.internal.utils.Checks;
 import net.dv8tion.jda.internal.utils.Helpers;
 import net.dv8tion.jda.internal.utils.PermissionUtil;
@@ -282,7 +283,7 @@ public boolean canSync(@Nonnull IPermissionContainer targetChannel, @Nonnull IPe
         if (hasLocalAdmin)
             return true;
 
-        TLongObjectMap<PermissionOverride> existingOverrides = ((AbstractChannelImpl<?, ?>) targetChannel).getOverrideMap();
+        TLongObjectMap<PermissionOverride> existingOverrides = ((IPermissionContainerMixin<?>) targetChannel).getPermissionOverrideMap();
         for (PermissionOverride override : syncSource.getPermissionOverrides())
         {
             PermissionOverride existing = existingOverrides.get(override.getIdLong());

File: src/main/java/net/dv8tion/jda/internal/entities/RoleImpl.java
Patch:
@@ -28,6 +28,7 @@
 import net.dv8tion.jda.api.utils.cache.CacheFlag;
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.internal.JDAImpl;
+import net.dv8tion.jda.internal.entities.mixin.channel.attribute.IPermissionContainerMixin;
 import net.dv8tion.jda.internal.managers.RoleManagerImpl;
 import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.requests.restaction.AuditableRestActionImpl;
@@ -227,7 +228,7 @@ public boolean canSync(@Nonnull IPermissionContainer targetChannel, @Nonnull IPe
         if (hasLocalAdmin)
             return true;
 
-        TLongObjectMap<PermissionOverride> existingOverrides = ((AbstractChannelImpl<?, ?>) targetChannel).getOverrideMap();
+        TLongObjectMap<PermissionOverride> existingOverrides = ((IPermissionContainerMixin<?>) targetChannel).getPermissionOverrideMap();
         for (PermissionOverride override : syncSource.getPermissionOverrides())
         {
             PermissionOverride existing = existingOverrides.get(override.getIdLong());

File: src/main/java/net/dv8tion/jda/internal/handle/GuildMemberRemoveHandler.java
Patch:
@@ -26,6 +26,7 @@
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.internal.JDAImpl;
 import net.dv8tion.jda.internal.entities.*;
+import net.dv8tion.jda.internal.entities.mixin.channel.middleman.AudioChannelMixin;
 import net.dv8tion.jda.internal.utils.UnlockHook;
 import net.dv8tion.jda.internal.utils.cache.SnowflakeCacheViewImpl;
 
@@ -98,7 +99,7 @@ protected Long handleInternally(DataObject content)
         {
             AudioChannel channel = voiceState.getChannel();
             voiceState.setConnectedChannel(null);
-            ((AbstractGuildAudioChannelImpl<?, ?>) channel).getConnectedMembersMap().remove(userId);
+            ((AudioChannelMixin<?>) channel).getConnectedMembersMap().remove(userId);
 
             getJDA().handleEvent(
                 new GuildVoiceLeaveEvent(

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/pagination/MessagePaginationActionImpl.java
Patch:
@@ -42,6 +42,7 @@ public MessagePaginationActionImpl(MessageChannel channel)
     {
         super(channel.getJDA(), Route.Messages.GET_MESSAGE_HISTORY.compile(channel.getId()), 1, 100, 100);
 
+        //TODO-v5: Fix permissions here.
         if (channel.getType() == ChannelType.TEXT)
         {
             TextChannel textChannel = (TextChannel) channel;

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/pagination/ThreadChannelPaginationActionImpl.java
Patch:
@@ -23,7 +23,7 @@ public class ThreadChannelPaginationActionImpl extends PaginationActionImpl<Thre
 {
     protected final IThreadContainer channel;
 
-    public ThreadChannelPaginationActionImpl(JDA api, Route.CompiledRoute route, BaseGuildMessageChannel channel)
+    public ThreadChannelPaginationActionImpl(JDA api, Route.CompiledRoute route, IThreadContainer channel)
     {
         super(api, route, 1, 100, 100);
         this.channel = channel;

File: src/main/java/net/dv8tion/jda/internal/entities/BaseGuildMessageChannelImpl.java
Patch:
@@ -225,7 +225,7 @@ public ThreadAction createThreadChannel(String name, boolean isPrivate)
         if (isPrivate)
         {
             if (!guild.getFeatures().contains("PRIVATE_THREADS"))
-                throw new IllegalStateException("Can only set use private threads in Guilds with the PRIVATE_THREADS feature");
+                throw new IllegalStateException("Can only use private threads in Guilds with the PRIVATE_THREADS feature");
             checkPermission(Permission.CREATE_PRIVATE_THREADS);
         }
         else

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/MessageActionImpl.java
Patch:
@@ -522,7 +522,7 @@ protected DataObject getJSON()
         if (override)
         {
             if (embeds == null)
-                obj.putNull("embeds");
+                obj.put("embeds", DataArray.empty());
             else
                 obj.put("embeds", DataArray.fromCollection(embeds));
             if (content.length() == 0)
@@ -534,7 +534,7 @@ protected DataObject getJSON()
             else
                 obj.put("nonce", nonce);
             if (components == null)
-                obj.putNull("components");
+                obj.put("components", DataArray.empty());
             else
                 obj.put("components", DataArray.fromCollection(components));
             if (retainedAttachments != null)

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/MessageActionImpl.java
Patch:
@@ -522,7 +522,7 @@ protected DataObject getJSON()
         if (override)
         {
             if (embeds == null)
-                obj.putNull("embeds");
+                obj.put("embeds", DataArray.empty());
             else
                 obj.put("embeds", DataArray.fromCollection(embeds));
             if (content.length() == 0)
@@ -534,7 +534,7 @@ protected DataObject getJSON()
             else
                 obj.put("nonce", nonce);
             if (components == null)
-                obj.putNull("components");
+                obj.put("components", DataArray.empty());
             else
                 obj.put("components", DataArray.fromCollection(components));
             if (retainedAttachments != null)

File: src/main/java/net/dv8tion/jda/api/entities/MessageReference.java
Patch:
@@ -286,7 +286,7 @@ private void checkPermission(Permission permission)
 
         Member selfMember = guild.getSelfMember();
 
-        //TODO-v5: What do we need to do to properly check perms for threads?
+
         IPermissionContainer permChannel = (IPermissionContainer) channel;
 
         if (!selfMember.hasAccess(permChannel))

File: src/main/java/net/dv8tion/jda/internal/entities/PermissionOverrideImpl.java
Patch:
@@ -120,7 +120,7 @@ public Role getRole()
     @Override
     public IPermissionContainer getChannel()
     {
-        IPermissionContainer realChannel = (IPermissionContainer) api.getGuildChannelById(channel.getType(), channel.getIdLong());
+        IPermissionContainer realChannel = (IPermissionContainer) api.getGuildChannelById(channel.getIdLong());
         if (realChannel != null)
             channel = realChannel;
         return channel;

File: src/main/java/net/dv8tion/jda/internal/entities/EntityBuilder.java
Patch:
@@ -1117,11 +1117,12 @@ public GuildThread createGuildThread(GuildImpl guild, DataObject json, long guil
         final long id = json.getLong("id");
         final ChannelType type = ChannelType.fromId(json.getInt("type"));
 
+        if (guild == null)
+            guild = (GuildImpl) getJDA().getGuildsView().get(guildId);
+
         GuildThreadImpl thread = ((GuildThreadImpl) getJDA().getGuildThreadView().get(id));
         if (thread == null)
         {
-            if (guild == null)
-                guild = (GuildImpl) getJDA().getGuildsView().get(guildId);
             SnowflakeCacheViewImpl<GuildThread>
                     guildThreadView = guild.getGuildThreadsView(),
                     threadView = getJDA().getGuildThreadView();

File: src/main/java/net/dv8tion/jda/internal/entities/GuildImpl.java
Patch:
@@ -1222,7 +1222,7 @@ public RestAction<List<GuildThread>> retrieveActiveThreads()
                     threadObj.put("member", selfThreadMemberObj);
                 }
 
-                GuildThread thread = builder.createGuildThread(this, threadObj, this.getIdLong());
+                GuildThread thread = builder.createGuildThread(threadObj, this.getIdLong());
                 list.add(thread);
             }
 

File: src/main/java/net/dv8tion/jda/internal/handle/MessageReactionClearEmoteHandler.java
Patch:
@@ -65,7 +65,7 @@ protected Long handleInternally(DataObject content)
         }
         else
         {
-            long emoteId = emoji.getUnsignedLong("emoji");
+            long emoteId = emoji.getUnsignedLong("id");
             Emote emote = getJDA().getEmoteById(emoteId);
             if (emote == null)
             {

File: src/main/java/net/dv8tion/jda/internal/handle/MessageReactionClearEmoteHandler.java
Patch:
@@ -65,7 +65,7 @@ protected Long handleInternally(DataObject content)
         }
         else
         {
-            long emoteId = emoji.getUnsignedLong("emoji");
+            long emoteId = emoji.getUnsignedLong("id");
             Emote emote = getJDA().getEmoteById(emoteId);
             if (emote == null)
             {

File: src/main/java/net/dv8tion/jda/internal/handle/MessageReactionClearEmoteHandler.java
Patch:
@@ -56,7 +56,7 @@ protected Long handleInternally(DataObject content)
             return null;
         }
 
-        long messageId = content.getUnsignedInt("message_id");
+        long messageId = content.getUnsignedLong("message_id");
         DataObject emoji = content.getObject("emoji");
         MessageReaction.ReactionEmote reactionEmote = null;
         if (emoji.isNull("id"))

File: src/main/java/net/dv8tion/jda/internal/handle/MessageReactionClearEmoteHandler.java
Patch:
@@ -56,7 +56,7 @@ protected Long handleInternally(DataObject content)
             return null;
         }
 
-        long messageId = content.getUnsignedInt("message_id");
+        long messageId = content.getUnsignedLong("message_id");
         DataObject emoji = content.getObject("emoji");
         MessageReaction.ReactionEmote reactionEmote = null;
         if (emoji.isNull("id"))

File: src/main/java/net/dv8tion/jda/api/entities/Webhook.java
Patch:
@@ -111,16 +111,16 @@ public interface Webhook extends ISnowflake
     Guild getGuild();
 
     /**
-     * The {@link net.dv8tion.jda.api.entities.TextChannel TextChannel} instance
-     * this Webhook is attached to.
+     * The {@link net.dv8tion.jda.api.entities.BaseGuildMessageChannel BaseGuildMessageChannel} instance this Webhook is attached to.
      *
      * @throws IllegalStateException
      *         If this webhooks {@link #isPartial() is partial}
      *
      * @return The current TextChannel of this Webhook
      */
     @Nonnull
-    TextChannel getChannel();
+    //TODO-v5: might be a problem exposing the Base class here as something like Threads could get Webhook support and break our stuff..
+    BaseGuildMessageChannel getChannel();
 
     /**
      * The owner of this Webhook. This will be null for some Webhooks, such as those retrieved from Audit Logs.

File: src/main/java/net/dv8tion/jda/internal/requests/WebSocketClient.java
Patch:
@@ -1346,7 +1346,7 @@ protected void setupHandlers()
         handlers.put("MESSAGE_REACTION_ADD",          new MessageReactionHandler(api, true));
         handlers.put("MESSAGE_REACTION_REMOVE",       new MessageReactionHandler(api, false));
         handlers.put("MESSAGE_REACTION_REMOVE_ALL",   new MessageReactionBulkRemoveHandler(api));
-        handlers.put("MESSAGE_REACTION_REMOVE_EMOTE", new MessageReactionClearEmoteHandler(api));
+        handlers.put("MESSAGE_REACTION_REMOVE_EMOJI", new MessageReactionClearEmoteHandler(api));
         handlers.put("MESSAGE_UPDATE",                new MessageUpdateHandler(api));
         handlers.put("READY",                         new ReadyHandler(api));
         handlers.put("STAGE_INSTANCE_CREATE",         new StageInstanceCreateHandler(api));

File: src/main/java/net/dv8tion/jda/api/events/channel/update/ChannelUpdateSlowmodeEvent.java
Patch:
@@ -19,13 +19,14 @@
 import net.dv8tion.jda.api.JDA;
 import net.dv8tion.jda.api.entities.Channel;
 import net.dv8tion.jda.api.entities.ChannelField;
-import org.jetbrains.annotations.NotNull;
+
+import javax.annotation.Nonnull;
 
 public class ChannelUpdateSlowmodeEvent extends GenericChannelUpdateEvent<Integer>
 {
     public static final ChannelField FIELD = ChannelField.SLOWMODE;
 
-    public ChannelUpdateSlowmodeEvent(@NotNull JDA api, long responseNumber, Channel channel, Integer oldValue, Integer newValue)
+    public ChannelUpdateSlowmodeEvent(@Nonnull JDA api, long responseNumber, Channel channel, Integer oldValue, Integer newValue)
     {
         super(api, responseNumber, channel, FIELD, oldValue, newValue);
     }

File: src/main/java/net/dv8tion/jda/api/events/channel/voice/update/VoiceChannelUpdateRegionEvent.java
Patch:
@@ -18,10 +18,9 @@
 import net.dv8tion.jda.api.JDA;
 import net.dv8tion.jda.api.Region;
 import net.dv8tion.jda.api.entities.VoiceChannel;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 
 import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
 
 /**
  * Indicates that a {@link VoiceChannel VoiceChannel}'s region changed.
@@ -34,7 +33,7 @@ public class VoiceChannelUpdateRegionEvent extends GenericVoiceChannelUpdateEven
 {
     public static final String IDENTIFIER = "region";
 
-    public VoiceChannelUpdateRegionEvent(@NotNull JDA api, long responseNumber, @NotNull VoiceChannel channel, @Nullable String oldRegion)
+    public VoiceChannelUpdateRegionEvent(@Nonnull JDA api, long responseNumber, @Nonnull VoiceChannel channel, @Nullable String oldRegion)
     {
         super(api, responseNumber, channel, oldRegion, channel.getRegionRaw(), IDENTIFIER);
     }

File: src/main/java/net/dv8tion/jda/internal/requests/DeferredRestAction.java
Patch:
@@ -21,9 +21,9 @@
 import net.dv8tion.jda.api.requests.RestAction;
 import net.dv8tion.jda.api.requests.restaction.AuditableRestAction;
 import net.dv8tion.jda.internal.utils.Checks;
-import org.jetbrains.annotations.Nullable;
 
 import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.TimeUnit;
 import java.util.function.BooleanSupplier;

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/CommandEditActionImpl.java
Patch:
@@ -31,9 +31,9 @@
 import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 import okhttp3.RequestBody;
-import org.jetbrains.annotations.Nullable;
 
 import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
 import java.util.concurrent.TimeUnit;
 import java.util.function.BooleanSupplier;
 

File: src/main/java/net/dv8tion/jda/api/events/message/guild/GuildMessageReceivedEvent.java
Patch:
@@ -33,6 +33,7 @@
  *
  * <p>This event requires the {@link net.dv8tion.jda.api.requests.GatewayIntent#GUILD_MESSAGES GUILD_MESSAGES} intent to be enabled.
  */
+//TODO-v5: directly relies on TextChannel but actually should rely on GuildMessageChannel. However, we're likely killing the Guild/Private specific events, so not gonna update for now.
 public class GuildMessageReceivedEvent extends GenericGuildMessageEvent
 {
     private final Message message;

File: src/examples/java/AudioEchoExample.java
Patch:
@@ -95,7 +95,7 @@ private void onEchoCommand(GuildMessageReceivedEvent event)
         // Note: None of these can be null due to our configuration with the JDABuilder!
         Member member = event.getMember();                              // Member is the context of the user for the specific guild, containing voice state and roles
         GuildVoiceState voiceState = member.getVoiceState();            // Check the current voice state of the user
-        VoiceChannel channel = voiceState.getChannel();                 // Use the channel the user is currently connected to
+        AudioChannel channel = voiceState.getChannel();                 // Use the channel the user is currently connected to
         if (channel != null)
         {
             connectTo(channel);                                         // Join the channel of the user
@@ -150,7 +150,7 @@ private void onEchoCommand(GuildMessageReceivedEvent event, Guild guild, String
      * @param textChannel
      *        The text channel to send the message in
      */
-    private void onConnecting(VoiceChannel channel, TextChannel textChannel)
+    private void onConnecting(AudioChannel channel, TextChannel textChannel)
     {
         textChannel.sendMessage("Connecting to " + channel.getName()).queue(); // never forget to queue()!
     }
@@ -174,7 +174,7 @@ private void onUnknownChannel(MessageChannel channel, String comment)
      * @param channel
      *        The channel to connect to
      */
-    private void connectTo(VoiceChannel channel)
+    private void connectTo(AudioChannel channel)
     {
         Guild guild = channel.getGuild();
         // Get an audio manager for this guild, this will be created upon first use for each guild

File: src/main/java/net/dv8tion/jda/api/entities/VoiceChannel.java
Patch:
@@ -39,7 +39,7 @@
  * @see   JDA#getVoiceChannelsByName(String, boolean)
  * @see   JDA#getVoiceChannelById(long)
  */
-public interface VoiceChannel extends GuildChannel, AudioChannel, ICategorizableChannel, ICopyableChannel, IPermissionContainer, IPositionableChannel, IMemberContainer, IInviteContainer
+public interface VoiceChannel extends AudioChannel, ICategorizableChannel, ICopyableChannel, IPermissionContainer, IPositionableChannel, IInviteContainer
 {
     /**
      * The maximum amount of {@link net.dv8tion.jda.api.entities.Member Members} that can be in this

File: src/main/java/net/dv8tion/jda/api/audio/factory/IPacketProvider.java
Patch:
@@ -17,7 +17,7 @@
 package net.dv8tion.jda.api.audio.factory;
 
 import net.dv8tion.jda.api.audio.hooks.ConnectionStatus;
-import net.dv8tion.jda.api.entities.VoiceChannel;
+import net.dv8tion.jda.api.entities.AudioChannel;
 
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
@@ -49,10 +49,10 @@ public interface IPacketProvider
     /**
      * Provides the current channel that this connection is transmitting to.
      *
-     * @return The {@link net.dv8tion.jda.api.entities.VoiceChannel VoiceChannel} that this connection is sending to.
+     * @return The {@link net.dv8tion.jda.api.entities.AudioChannel AudioChannel} that this connection is sending to.
      */
     @Nonnull
-    VoiceChannel getConnectedChannel();
+    AudioChannel getConnectedChannel();
 
     /**
      * The UDP connection for this audio connection. The {@link net.dv8tion.jda.api.audio.factory.DefaultSendSystem DefaultSendSystem}

File: src/main/java/net/dv8tion/jda/api/entities/AudioChannel.java
Patch:
@@ -22,7 +22,7 @@
 import javax.annotation.Nullable;
 
 //TODO-v5: Docs
-public interface AudioChannel extends GuildChannel
+public interface AudioChannel extends GuildChannel, IMemberContainer
 {
     /**
      * The audio bitrate of the voice audio that is transmitted in this channel. While higher bitrates can be sent to

File: src/main/java/net/dv8tion/jda/api/entities/Guild.java
Patch:
@@ -1458,6 +1458,8 @@ default GuildChannel getGuildChannelById(long id)
         GuildChannel channel = getTextChannelById(id);
         if (channel == null)
             channel = getVoiceChannelById(id);
+        if (channel == null)
+            channel = getStageChannelById(id);
         if (channel == null)
             channel = getStoreChannelById(id);
         if (channel == null)

File: src/main/java/net/dv8tion/jda/api/events/guild/voice/GuildVoiceJoinEvent.java
Patch:
@@ -45,7 +45,8 @@ public class GuildVoiceJoinEvent extends GenericGuildVoiceUpdateEvent
 {
     public GuildVoiceJoinEvent(@Nonnull JDA api, long responseNumber, @Nonnull Member member)
     {
-        super(api, responseNumber, member, null, member.getVoiceState().getChannel());
+        //TODO-v5: Cannot cast directly to VoiceChannel here, but doing this to get stuff to compile. We need to revisit when we revisit how to handle the other events too
+        super(api, responseNumber, member, null, (VoiceChannel) member.getVoiceState().getChannel());
     }
 
     @Nonnull

File: src/main/java/net/dv8tion/jda/api/events/guild/voice/GuildVoiceMoveEvent.java
Patch:
@@ -47,7 +47,8 @@ public class GuildVoiceMoveEvent extends GenericGuildVoiceUpdateEvent
 {
     public GuildVoiceMoveEvent(@Nonnull JDA api, long responseNumber, @Nonnull Member member, @Nonnull VoiceChannel channelLeft)
     {
-        super(api, responseNumber, member, channelLeft, member.getVoiceState().getChannel());
+        //TODO-v5: Cannot cast directly to VoiceChannel here, but doing this to get stuff to compile. We need to revisit when we revisit how to handle the other events too
+        super(api, responseNumber, member, channelLeft, (VoiceChannel) member.getVoiceState().getChannel());
     }
 
     @Nonnull

File: src/main/java/net/dv8tion/jda/internal/handle/VoiceServerUpdateHandler.java
Patch:
@@ -16,6 +16,7 @@
 
 package net.dv8tion.jda.internal.handle;
 
+import net.dv8tion.jda.api.entities.AudioChannel;
 import net.dv8tion.jda.api.entities.Guild;
 import net.dv8tion.jda.api.entities.VoiceChannel;
 import net.dv8tion.jda.api.hooks.VoiceDispatchInterceptor;
@@ -80,7 +81,7 @@ protected Long handleInternally(DataObject content)
         MiscUtil.locked(audioManager.CONNECTION_LOCK, () ->
         {
             //Synchronized to prevent attempts to close while setting up initial objects.
-            VoiceChannel target = guild.getSelfMember().getVoiceState().getChannel();
+            AudioChannel target = guild.getSelfMember().getVoiceState().getChannel();
             if (target == null)
             {
                 WebSocketClient.LOG.warn("Ignoring VOICE_SERVER_UPDATE for unknown channel");

File: src/main/java/net/dv8tion/jda/internal/entities/ActivityImpl.java
Patch:
@@ -32,7 +32,7 @@ public class ActivityImpl implements Activity
 
     protected ActivityImpl(String name)
     {
-        this(name, null, ActivityType.DEFAULT);
+        this(name, null, ActivityType.PLAYING);
     }
 
     protected ActivityImpl(String name, String url)

File: src/main/java/net/dv8tion/jda/internal/entities/EntityBuilder.java
Patch:
@@ -733,12 +733,12 @@ public static Activity createActivity(DataObject gameJson)
         try
         {
             type = gameJson.isNull("type")
-                ? Activity.ActivityType.DEFAULT
+                ? Activity.ActivityType.PLAYING
                 : Activity.ActivityType.fromKey(Integer.parseInt(gameJson.get("type").toString()));
         }
         catch (NumberFormatException e)
         {
-            type = Activity.ActivityType.DEFAULT;
+            type = Activity.ActivityType.PLAYING;
         }
 
         RichPresence.Timestamps timestamps = null;

File: src/main/java/net/dv8tion/jda/api/requests/Response.java
Patch:
@@ -47,9 +47,9 @@ public class Response implements Closeable
     private boolean attemptedParsing = false;
     private Exception exception;
 
-    public Response(@Nullable final okhttp3.Response response, @Nonnull final Exception exception, @Nonnull final Set<String> cfRays)
+    public Response(@Nonnull final Exception exception, @Nonnull final Set<String> cfRays)
     {
-        this(response, response != null ? response.code() : ERROR_CODE, ERROR_MESSAGE, -1, cfRays);
+        this(null, ERROR_CODE, ERROR_MESSAGE, -1, cfRays);
         this.exception = exception;
     }
 

File: src/main/java/net/dv8tion/jda/api/entities/MessageReference.java
Patch:
@@ -289,7 +289,7 @@ private void checkPermission(Permission permission)
 
         if (!selfMember.hasAccess(guildChannel))
             throw new MissingAccessException(guildChannel, Permission.VIEW_CHANNEL);
-        if (!selfMember.hasPermission(permission))
+        if (!selfMember.hasPermission(guildChannel, permission))
             throw new InsufficientPermissionException(guildChannel, permission);
     }
 }

File: src/main/java/net/dv8tion/jda/api/entities/Message.java
Patch:
@@ -914,6 +914,7 @@ default List<Button> getButtonsByLabel(@Nonnull String label, boolean ignoreCase
 
     /**
      * All {@link net.dv8tion.jda.api.entities.MessageSticker MessageStickers} that are in this Message.
+     * <br>The returned MessageStickers may only contain necessary information such as the sticker id, format type, name, and icon url.
      *
      * @throws java.lang.UnsupportedOperationException
      *         If this is not a Received Message from {@link net.dv8tion.jda.api.entities.MessageType#DEFAULT MessageType.DEFAULT}

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/ChannelActionImpl.java
Patch:
@@ -328,6 +328,8 @@ protected RequestBody finalizeData()
                     object.put("user_limit", userlimit);
                 break;
             case TEXT:
+                if (topic != null && !topic.isEmpty())
+                    object.put("topic", topic);
                 if (nsfw != null)
                     object.put("nsfw", nsfw);
                 if (slowmode != null)

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/ChannelActionImpl.java
Patch:
@@ -328,6 +328,8 @@ protected RequestBody finalizeData()
                     object.put("user_limit", userlimit);
                 break;
             case TEXT:
+                if (topic != null && !topic.isEmpty())
+                    object.put("topic", topic);
                 if (nsfw != null)
                     object.put("nsfw", nsfw);
                 if (slowmode != null)

File: src/main/java/net/dv8tion/jda/api/entities/MessageSticker.java
Patch:
@@ -80,9 +80,9 @@ public String getName()
     }
 
     /**
-     * The description of the sticker.
+     * The description of the sticker or empty String if the sticker doesn't have one.
      *
-     * @return the description of the sticker
+     * @return Possibly-empty String containing the description of the sticker
      */
     @Nonnull
     public String getDescription()

File: src/main/java/net/dv8tion/jda/internal/entities/EntityBuilder.java
Patch:
@@ -1463,7 +1463,7 @@ public MessageSticker createSticker(DataObject content)
     {
         final long id = content.getLong("id");
         final String name = content.getString("name");
-        final String description = content.getString("description");
+        final String description = content.getString("description", "");
         final long packId = content.getLong("pack_id", content.getLong("guild_id", 0L));
         final String asset = content.getString("asset", "");
         final MessageSticker.StickerFormat format = MessageSticker.StickerFormat.fromId(content.getInt("format_type"));

File: src/main/java/net/dv8tion/jda/api/interactions/commands/build/CommandData.java
Patch:
@@ -259,7 +259,7 @@ public CommandData addSubcommands(@Nonnull SubcommandData... subcommands)
         Checks.noneNull(subcommands, "Subcommands");
         if (!allowSubcommands)
             throw new IllegalArgumentException("You cannot mix options with subcommands/groups.");
-        allowOption = allowGroups = false;
+        allowOption = false;
         Checks.check(subcommands.length + options.length() <= 25, "Cannot have more than 25 subcommands for a command!");
         for (SubcommandData data : subcommands)
             options.add(data);
@@ -303,7 +303,7 @@ public CommandData addSubcommandGroups(@Nonnull SubcommandGroupData... groups)
         Checks.noneNull(groups, "SubcommandGroups");
         if (!allowGroups)
             throw new IllegalArgumentException("You cannot mix options with subcommands/groups.");
-        allowSubcommands = allowOption = false;
+        allowOption = false;
         Checks.check(groups.length + options.length() <= 25, "Cannot have more than 25 subcommand groups for a command!");
         for (SubcommandGroupData data : groups)
             options.add(data);

File: src/main/java/net/dv8tion/jda/api/interactions/commands/build/CommandData.java
Patch:
@@ -259,7 +259,7 @@ public CommandData addSubcommands(@Nonnull SubcommandData... subcommands)
         Checks.noneNull(subcommands, "Subcommands");
         if (!allowSubcommands)
             throw new IllegalArgumentException("You cannot mix options with subcommands/groups.");
-        allowOption = allowGroups = false;
+        allowOption = false;
         Checks.check(subcommands.length + options.length() <= 25, "Cannot have more than 25 subcommands for a command!");
         for (SubcommandData data : subcommands)
             options.add(data);
@@ -303,7 +303,7 @@ public CommandData addSubcommandGroups(@Nonnull SubcommandGroupData... groups)
         Checks.noneNull(groups, "SubcommandGroups");
         if (!allowGroups)
             throw new IllegalArgumentException("You cannot mix options with subcommands/groups.");
-        allowSubcommands = allowOption = false;
+        allowOption = false;
         Checks.check(groups.length + options.length() <= 25, "Cannot have more than 25 subcommand groups for a command!");
         for (SubcommandGroupData data : groups)
             options.add(data);

File: src/main/java/net/dv8tion/jda/api/MessageBuilder.java
Patch:
@@ -144,7 +144,7 @@ public MessageBuilder setTTS(boolean tts)
     @DeprecatedSince("4.4.0")
     public MessageBuilder setEmbed(@Nullable MessageEmbed embed)
     {
-        return setEmbeds(embed);
+        return embed == null ? setEmbeds() : setEmbeds(embed);
     }
 
     /**

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/MessageActionImpl.java
Patch:
@@ -140,7 +140,7 @@ public boolean isEdit()
     @SuppressWarnings({"ResultOfMethodCallIgnored", "ConstantConditions"})
     public MessageActionImpl apply(final Message message)
     {
-        if (message == null || message.getType() != MessageType.DEFAULT)
+        if (message == null || message.getType().isSystem())
             return this;
         final List<MessageEmbed> embeds = message.getEmbeds();
         if (embeds != null && !embeds.isEmpty() && embeds.get(0).getType() == EmbedType.RICH)

File: src/main/java/net/dv8tion/jda/api/sharding/DefaultShardManager.java
Patch:
@@ -256,6 +256,7 @@ public ShardCacheView getShardCache()
         return this.shards;
     }
 
+    @Override
     public void login() throws LoginException
     {
         // building the first one in the current thread ensures that LoginException and IllegalArgumentException can be thrown on login

File: src/main/java/net/dv8tion/jda/internal/handle/PresenceUpdateHandler.java
Patch:
@@ -154,10 +154,10 @@ private boolean parseActivities(long userId, DataArray activityArray, List<Activ
 
     private void handleActivities(List<Activity> newActivities, @Nullable MemberImpl member, MemberPresenceImpl presence)
     {
+        List<Activity> oldActivities = presence.getActivities();
         presence.setActivities(newActivities);
         if (member == null)
             return;
-        List<Activity> oldActivities = presence.getActivities();
         boolean unorderedEquals = Helpers.deepEqualsUnordered(oldActivities, newActivities);
         if (unorderedEquals)
         {

File: src/main/java/net/dv8tion/jda/api/Permission.java
Patch:
@@ -109,7 +109,7 @@ public enum Permission
      */
     public static final long ALL_VOICE_PERMISSIONS
             = Permission.getRaw(VOICE_STREAM, VOICE_CONNECT, VOICE_SPEAK, VOICE_MUTE_OTHERS,
-                                VOICE_DEAF_OTHERS, VOICE_MOVE_OTHERS, VOICE_USE_VAD);
+                                VOICE_DEAF_OTHERS, VOICE_MOVE_OTHERS, VOICE_USE_VAD, PRIORITY_SPEAKER);
 
     private final int offset;
     private final long raw;

File: src/main/java/net/dv8tion/jda/api/Permission.java
Patch:
@@ -109,7 +109,7 @@ public enum Permission
      */
     public static final long ALL_VOICE_PERMISSIONS
             = Permission.getRaw(VOICE_STREAM, VOICE_CONNECT, VOICE_SPEAK, VOICE_MUTE_OTHERS,
-                                VOICE_DEAF_OTHERS, VOICE_MOVE_OTHERS, VOICE_USE_VAD);
+                                VOICE_DEAF_OTHERS, VOICE_MOVE_OTHERS, VOICE_USE_VAD, PRIORITY_SPEAKER);
 
     private final int offset;
     private final long raw;

File: src/main/java/net/dv8tion/jda/api/exceptions/ErrorHandler.java
Patch:
@@ -215,7 +215,7 @@ public ErrorHandler ignore(@Nonnull Predicate<? super Throwable> condition)
      * <pre>{@code
      * public static void sendMessage(TextChannel context, User user, String content) {
      *     user.openPrivateChannel()
-     *         .flapMap(channel -> channel.sendMessage(content))
+     *         .flatMap(channel -> channel.sendMessage(content))
      *         .queue(null, new ErrorHandler()
      *             .handle(ErrorResponse.CANNOT_SEND_TO_USER,
      *                 (ex) -> context.sendMessage("Cannot send direct message, please enable direct messages from server members!").queue()));
@@ -247,7 +247,7 @@ public ErrorHandler handle(@Nonnull ErrorResponse response, @Nonnull Consumer<?
      * <pre>{@code
      * public static void sendMessage(TextChannel context, User user, String content) {
      *     user.openPrivateChannel()
-     *         .flapMap(channel -> channel.sendMessage(content))
+     *         .flatMap(channel -> channel.sendMessage(content))
      *         .queue(null, new ErrorHandler()
      *             .handle(EnumSet.of(ErrorResponse.CANNOT_SEND_TO_USER),
      *                 (ex) -> context.sendMessage("Cannot send direct message, please enable direct messages from server members!").queue()));

File: src/main/java/net/dv8tion/jda/internal/entities/EntityBuilder.java
Patch:
@@ -1318,8 +1318,9 @@ public Message.Attachment createMessageAttachment(DataObject jsonObject)
         final String url = jsonObject.getString("url");
         final String proxyUrl = jsonObject.getString("proxy_url");
         final String filename = jsonObject.getString("filename");
+        final String contentType = jsonObject.getString("content_type", null);
         final long id = jsonObject.getLong("id");
-        return new Message.Attachment(id, url, proxyUrl, filename, size, height, width, getJDA());
+        return new Message.Attachment(id, url, proxyUrl, filename, contentType, size, height, width, getJDA());
     }
 
     public MessageEmbed createMessageEmbed(DataObject content)

File: src/main/java/net/dv8tion/jda/internal/entities/SystemMessage.java
Patch:
@@ -32,10 +32,10 @@ public SystemMessage(
         boolean fromWebhook, boolean mentionsEveryone, TLongSet mentionedUsers, TLongSet mentionedRoles,
         boolean tts, boolean pinned,
         String content, String nonce, User author, Member member, MessageActivity activity, OffsetDateTime editTime,
-        List<MessageReaction> reactions, List<Attachment> attachments, List<MessageEmbed> embeds, int flags)
+        List<MessageReaction> reactions, List<Attachment> attachments, List<MessageEmbed> embeds, List<MessageSticker> stickers, int flags)
     {
         super(id, channel, type, null, fromWebhook, mentionsEveryone, mentionedUsers, mentionedRoles,
-            tts, pinned, content, nonce, author, member, activity, editTime, reactions, attachments, embeds, flags);
+            tts, pinned, content, nonce, author, member, activity, editTime, reactions, attachments, embeds, stickers, flags);
     }
 
     @Nonnull

File: src/main/java/net/dv8tion/jda/internal/handle/MessageCreateHandler.java
Patch:
@@ -104,6 +104,7 @@ protected Long handleInternally(DataObject content)
             {
                 PrivateChannelImpl channel = (PrivateChannelImpl) message.getPrivateChannel();
                 channel.setLastMessageId(message.getIdLong());
+                api.usedPrivateChannel(channel.getIdLong());
                 jda.handleEvent(
                     new PrivateMessageReceivedEvent(
                         jda, responseNumber,

File: src/main/java/net/dv8tion/jda/internal/requests/ratelimit/BotRateLimiter.java
Patch:
@@ -250,10 +250,7 @@ private Bucket updateBucket(Route.CompiledRoute route, okhttp3.Response response
                 if (response.code() == 429)
                 {
                     String retryAfterHeader = headers.get(RETRY_AFTER_HEADER);
-                    String resetAfterHeader = headers.get(RESET_AFTER_HEADER);
                     long retryAfter = parseLong(retryAfterHeader) * 1000; // seconds precision
-                    if (resetAfterHeader != null) // if available, use better precision
-                        retryAfter = parseDouble(resetAfterHeader); // milliseconds precision
                     // Handle global rate limit if necessary
                     if (global)
                     {

File: src/main/java/net/dv8tion/jda/internal/entities/EntityBuilder.java
Patch:
@@ -1116,7 +1116,7 @@ public Message createMessage(DataObject jsonObject, @Nullable MessageChannel cha
             channel = createPrivateChannel(channelDate, modifyCache);
         }
         else if (channel == null)
-            throw new IllegalStateException(MISSING_CHANNEL);
+            throw new IllegalArgumentException(MISSING_CHANNEL);
 
         if (channel.getType().isGuild() && !jsonObject.isNull("member"))
         {

File: src/main/java/net/dv8tion/jda/api/AccountType.java
Patch:
@@ -32,8 +32,8 @@ public enum AccountType
      *
      * @deprecated This will be removed in a future version
      */
-    @ForRemoval
     @Deprecated
+    @ForRemoval(deadline="4.3.0")
     @DeprecatedSince("4.2.0")
     CLIENT
 }

File: src/main/java/net/dv8tion/jda/api/JDAInfo.java
Patch:
@@ -20,8 +20,8 @@
  */
 public class JDAInfo
 {
-    public static final int DISCORD_GATEWAY_VERSION = 6;
-    public static final int DISCORD_REST_VERSION = 6;
+    public static final int DISCORD_GATEWAY_VERSION = 8;
+    public static final int DISCORD_REST_VERSION = 8;
     public static final int AUDIO_GATEWAY_VERSION = 4;
     public static final String GITHUB = "https://github.com/DV8FromTheWorld/JDA";
     public static final String VERSION_MAJOR = "@versionMajor@";

File: src/main/java/net/dv8tion/jda/api/entities/Member.java
Patch:
@@ -139,6 +139,8 @@ public interface Member extends IMentionable, IPermissionHolder, IFakeable
      * Returns the {@link net.dv8tion.jda.api.OnlineStatus OnlineStatus} of the User.
      * <br>If the {@link net.dv8tion.jda.api.OnlineStatus OnlineStatus} is unrecognized, will return {@link net.dv8tion.jda.api.OnlineStatus#UNKNOWN UNKNOWN}.
      *
+     * <p>This will always return {@link OnlineStatus#OFFLINE} if {@link net.dv8tion.jda.api.utils.cache.CacheFlag#ONLINE_STATUS CacheFlag.ONLINE_STATUS} is disabled.
+     *
      * @return The current {@link net.dv8tion.jda.api.OnlineStatus OnlineStatus} of the {@link net.dv8tion.jda.api.entities.User User}.
      */
     @Nonnull

File: src/main/java/net/dv8tion/jda/api/entities/MessageEmbed.java
Patch:
@@ -974,14 +974,13 @@ else if (value.length() > VALUE_MAX_LENGTH)
                     this.value = EmbedBuilder.ZERO_WIDTH_SPACE;
                 else
                     this.value = value;
-                this.inline = inline;
             }
             else
             {
                 this.name = name;
                 this.value = value;
-                this.inline = inline;
             }
+            this.inline = inline;
         }
         
         public Field(String name, String value, boolean inline)

File: src/main/java/net/dv8tion/jda/api/events/user/UserTypingEvent.java
Patch:
@@ -43,9 +43,9 @@ public class UserTypingEvent extends GenericUserEvent
     public UserTypingEvent(@Nonnull JDA api, long responseNumber, @Nonnull User user, @Nonnull MessageChannel channel, @Nonnull OffsetDateTime timestamp, @Nullable Member member)
     {
         super(api, responseNumber, user);
+        this.member = member;
         this.channel = channel;
         this.timestamp = timestamp;
-        this.member = member;
     }
 
     /**

File: src/main/java/net/dv8tion/jda/internal/handle/GuildRoleUpdateHandler.java
Patch:
@@ -61,7 +61,7 @@ protected Long handleInternally(DataObject content)
         if (color == 0)
             color = Role.DEFAULT_COLOR_RAW;
         int position = rolejson.getInt("position");
-        long permissions = rolejson.getLong("permissions_new");
+        long permissions = rolejson.getLong("permissions");
         boolean hoisted = rolejson.getBoolean("hoist");
         boolean mentionable = rolejson.getBoolean("mentionable");
 

File: src/main/java/net/dv8tion/jda/internal/handle/MessageReactionHandler.java
Patch:
@@ -174,6 +174,7 @@ private void onAdd(MessageReaction reaction, User user, Member member, long user
                         Objects.requireNonNull(member), reaction));
                 break;
             case PRIVATE:
+                jda.usedPrivateChannel(reaction.getChannel().getIdLong());
                 jda.handleEvent(
                     new PrivateMessageReactionAddEvent(
                         jda, responseNumber,
@@ -202,6 +203,7 @@ private void onRemove(MessageReaction reaction, User user, Member member, long u
                         member, reaction, userId));
                 break;
             case PRIVATE:
+                jda.usedPrivateChannel(reaction.getChannel().getIdLong());
                 jda.handleEvent(
                     new PrivateMessageReactionRemoveEvent(
                         jda, responseNumber,

File: src/main/java/net/dv8tion/jda/internal/requests/Requester.java
Patch:
@@ -285,7 +285,7 @@ private void applyHeaders(Request<?> apiRequest, okhttp3.Request.Builder builder
     {
         builder.header("user-agent", USER_AGENT)
                .header("accept-encoding", "gzip")
-               .header("x-ratelimit-precision", "millisecond");
+               .header("x-ratelimit-precision", "millisecond"); // still sending this in case of regressions
 
         //adding token to all requests to the discord api or cdn pages
         //we can check for startsWith(DISCORD_API_PREFIX) because the cdn endpoints don't need any kind of authorization

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/PermissionOverrideActionImpl.java
Patch:
@@ -281,7 +281,7 @@ private long getOriginalAllow()
     protected RequestBody finalizeData()
     {
         DataObject object = DataObject.empty();
-        object.put("type", isRole() ? "role" : "member");
+        object.put("type", isRole() ? 0 : 1);
         object.put("allow", getCurrentAllow());
         object.put("deny", getCurrentDeny());
         reset();

File: src/main/java/net/dv8tion/jda/internal/utils/Helpers.java
Patch:
@@ -146,7 +146,7 @@ public static boolean deepEqualsUnordered(Collection<?> first, Collection<?> sec
 
     public static <E extends Enum<E>> EnumSet<E> copyEnumSet(Class<E> clazz, Collection<E> col)
     {
-        return col.isEmpty() ? EnumSet.noneOf(clazz) : EnumSet.copyOf(col);
+        return col == null || col.isEmpty() ? EnumSet.noneOf(clazz) : EnumSet.copyOf(col);
     }
 
     // ## ExceptionUtils ##

File: src/main/java/net/dv8tion/jda/internal/entities/EntityBuilder.java
Patch:
@@ -1395,6 +1395,9 @@ public PermissionOverride createPermissionOverride(DataObject override, Abstract
 
         long allow = override.getLong("allow_new");
         long deny = override.getLong("deny_new");
+        // Don't cache empty @everyone overrides, they ruin our sync check
+        if (id == chan.getGuild().getIdLong() && (allow | deny) == 0L)
+            return null;
 
         PermissionOverrideImpl permOverride = (PermissionOverrideImpl) chan.getOverrideMap().get(id);
         if (permOverride == null)

File: src/main/java/net/dv8tion/jda/api/entities/Guild.java
Patch:
@@ -417,6 +417,9 @@ default String getVanityUrl()
 
     /**
      * The preferred locale for this guild.
+     * <br>If the guild doesn't have the COMMUNITY feature, this returns the default.
+     *
+     * <br>Default: {@link Locale#US}
      *
      * @return The preferred {@link Locale} for this guild
      */

File: src/main/java/net/dv8tion/jda/api/entities/GuildVoiceState.java
Patch:
@@ -53,7 +53,7 @@ public interface GuildVoiceState
 
     /**
      * Returns whether the {@link net.dv8tion.jda.api.entities.Member Member} is muted, either
-     * by choice {@link #isSelfMuted()} or deafened by an admin {@link #isGuildMuted()}
+     * by choice {@link #isSelfMuted()} or muted by an admin {@link #isGuildMuted()}
      *
      * @return the Member's mute status
      */

File: src/main/java/net/dv8tion/jda/api/entities/Guild.java
Patch:
@@ -349,7 +349,7 @@ default String getSplashUrl()
      * the returned {@link net.dv8tion.jda.api.requests.RestAction RestAction} include the following:
      * <ul>
      *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS MISSING_PERMISSIONS}
-     *     <br>The ban list cannot be fetched due to a permission discrepancy</li>
+     *     <br>The vanity url cannot be fetched due to a permission discrepancy</li>
      * </ul>
      *
      * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException

File: src/main/java/net/dv8tion/jda/api/hooks/EventListener.java
Patch:
@@ -28,7 +28,7 @@
  * <p><b>Examples: </b>
  * <br>
  * <code>
- *     JDA jda = new {@link net.dv8tion.jda.api.JDABuilder JDABuilder}("token").{@link net.dv8tion.jda.api.JDABuilder#addEventListeners(Object...) addEventListeners(listeners)}.{@link net.dv8tion.jda.api.JDABuilder#build() build()};<br>
+ *     JDA jda = {@link net.dv8tion.jda.api.JDABuilder JDABuilder}.createDefault("token").{@link net.dv8tion.jda.api.JDABuilder#addEventListeners(Object...) addEventListeners(listeners)}.{@link net.dv8tion.jda.api.JDABuilder#build() build()};<br>
  *     {@link net.dv8tion.jda.api.JDA#addEventListener(Object...) jda.addEventListener(listeners)};
  * </code>
  *

File: src/main/java/net/dv8tion/jda/api/JDABuilder.java
Patch:
@@ -1509,7 +1509,6 @@ public JDABuilder setVoiceDispatchInterceptor(@Nullable VoiceDispatchInterceptor
 
     /**
      * The {@link ChunkingFilter} to filter which guilds should use member chunking.
-     * <br>By default this uses {@link ChunkingFilter#ALL}.
      *
      * <p>If a guild is configured for chunking the {@link #setMemberCachePolicy(MemberCachePolicy)} will be ignored.
      *
@@ -1549,7 +1548,7 @@ public JDABuilder setChunkingFilter(@Nullable ChunkingFilter filter)
      *
      * @since  4.1.0
      *
-     * @deprecated This is now superceded by {@link #setDisabledIntents(Collection)} and {@link #setMemberCachePolicy(MemberCachePolicy)}.
+     * @deprecated This is now superseded by {@link #setDisabledIntents(Collection)} and {@link #setMemberCachePolicy(MemberCachePolicy)}.
      *             To get identical behavior you can do {@code setMemberCachePolicy(VOICE).setDisabledIntents(GatewayIntent.GUILD_PRESENCES, GatewayIntent.GUILD_MESSAGE_TYPING, GatewayIntent.GUILD_MEMBERS)}
      */
     @Nonnull

File: src/main/java/net/dv8tion/jda/api/utils/ChunkingFilter.java
Patch:
@@ -39,7 +39,7 @@
 @FunctionalInterface
 public interface ChunkingFilter
 {
-    /** Chunk all guilds (default) */
+    /** Chunk all guilds */
     ChunkingFilter ALL = (x) -> true;
     /** Do not chunk any guilds (lazy loading) */
     ChunkingFilter NONE = (x) -> false;

File: src/main/java/net/dv8tion/jda/api/entities/Guild.java
Patch:
@@ -897,7 +897,7 @@ default List<Member> getMembersByNickname(@Nullable String nickname, boolean ign
 
     /**
      * Gets a list of all {@link net.dv8tion.jda.api.entities.Member Members} who have the same effective name as the one provided.
-     * <br>This compares against {@link net.dv8tion.jda.api.entities.Member#getEffectiveName()}}.
+     * <br>This compares against {@link net.dv8tion.jda.api.entities.Member#getEffectiveName()}.
      * <br>If there are no {@link net.dv8tion.jda.api.entities.Member Members} with the provided name, then this returns an empty list.
      *
      * <p>This will only check cached members!

File: src/main/java/net/dv8tion/jda/api/entities/GuildChannel.java
Patch:
@@ -67,7 +67,7 @@ public interface GuildChannel extends ISnowflake, Comparable<GuildChannel>
     /**
      * Parent {@link net.dv8tion.jda.api.entities.Category Category} of this
      * GuildChannel. Channels don't need to have a parent Category.
-     * <br>Note that an {@link net.dv8tion.jda.api.entities.Category Category} will
+     * <br>Note that a {@link net.dv8tion.jda.api.entities.Category Category} will
      * always return {@code null} for this method as nested categories are not supported.
      *
      * @return Possibly-null {@link net.dv8tion.jda.api.entities.Category Category} for this GuildChannel

File: src/main/java/net/dv8tion/jda/api/entities/MessageChannel.java
Patch:
@@ -481,7 +481,7 @@ default MessageAction sendMessage(@Nonnull MessageEmbed embed)
      *         </ul>
      * @throws java.lang.IllegalArgumentException
      *         If the provided message is {@code null} or the provided {@link net.dv8tion.jda.api.entities.Message Message}
-     *         contains an {@link net.dv8tion.jda.api.entities.MessageEmbed MessageEmbed}
+     *         contains a {@link net.dv8tion.jda.api.entities.MessageEmbed MessageEmbed}
      *         that is not {@link net.dv8tion.jda.api.entities.MessageEmbed#isSendable() sendable}
      * @throws java.lang.UnsupportedOperationException
      *         If this is a {@link net.dv8tion.jda.api.entities.PrivateChannel PrivateChannel}

File: src/main/java/net/dv8tion/jda/api/entities/Role.java
Patch:
@@ -47,7 +47,7 @@ public interface Role extends IMentionable, IPermissionHolder, Comparable<Role>
     /**
      * The hierarchical position of this {@link net.dv8tion.jda.api.entities.Role Role}
      * in the {@link net.dv8tion.jda.api.entities.Guild Guild} hierarchy. (higher value means higher role).
-     * <br>The {@link net.dv8tion.jda.api.entities.Guild#getPublicRole()}'s getPosition() always return -1.
+     * <br>The {@link net.dv8tion.jda.api.entities.Guild#getPublicRole()}'s getPosition() always returns -1.
      *
      * @throws IllegalStateException
      *         If this role is not in the guild cache

File: src/main/java/net/dv8tion/jda/api/package-info.java
Patch:
@@ -29,7 +29,7 @@
  *     <li>{@link net.dv8tion.jda.api.MessageBuilder MessageBuilder}
  *     <br>Used to build a {@link net.dv8tion.jda.api.entities.Message Message} which can be used to
  *         send a message to a {@link net.dv8tion.jda.api.entities.MessageChannel MessageChannel} together with
- *         an {@link net.dv8tion.jda.api.entities.MessageEmbed MessageEmbed} and Text-To-Speech!</li>
+ *         a {@link net.dv8tion.jda.api.entities.MessageEmbed MessageEmbed} and Text-To-Speech!</li>
  *
  *     <li>{@link net.dv8tion.jda.api.EmbedBuilder EmbedBuilder}
  *     <br>Used to build a {@link net.dv8tion.jda.api.entities.MessageEmbed MessageEmbed}

File: src/main/java/net/dv8tion/jda/api/requests/restaction/MessageAction.java
Patch:
@@ -200,7 +200,7 @@ static boolean isDefaultMentionRepliedUser()
      *         The nullable Message to apply settings from
      *
      * @throws java.lang.IllegalArgumentException
-     *         If the message contains an {@link net.dv8tion.jda.api.entities.MessageEmbed MessageEmbed}
+     *         If the message contains a {@link net.dv8tion.jda.api.entities.MessageEmbed MessageEmbed}
      *         that exceeds the sendable character limit,
      *         see {@link net.dv8tion.jda.api.entities.MessageEmbed#isSendable() MessageEmbed.isSendable()}
      *

File: src/main/java/net/dv8tion/jda/api/requests/restaction/pagination/PaginationAction.java
Patch:
@@ -45,7 +45,7 @@
  *   * Retrieves messages until the specified limit is reached. The messages will be limited after being filtered by the user.
  *   * If the user hasn't sent enough messages this will go through all messages so it is recommended to add an additional end condition.
  *   *&#47;
- * public static{@literal List<Message>} getMessagesByUser(MessageChannel channel, User user, int limit)
+ * public static {@literal List<Message>} getMessagesByUser(MessageChannel channel, User user, int limit)
  * {
  *     <u>MessagePaginationAction</u> action = channel.<u>getIterableHistory</u>();
  *     Stream{@literal <Message>} messageStream = action.stream()

File: src/main/java/net/dv8tion/jda/api/JDABuilder.java
Patch:
@@ -1319,7 +1319,7 @@ public JDABuilder setIdle(boolean idle)
      * Sets the {@link net.dv8tion.jda.api.entities.Activity Activity} for our session.
      * <br>This value can be changed at any time in the {@link net.dv8tion.jda.api.managers.Presence Presence} from a JDA instance.
      *
-     * <p><b>Hint:</b> You can create a {@link net.dv8tion.jda.api.entities.Activity Activity} object using
+     * <p><b>Hint:</b> You can create an {@link net.dv8tion.jda.api.entities.Activity Activity} object using
      * {@link net.dv8tion.jda.api.entities.Activity#playing(String)} or {@link net.dv8tion.jda.api.entities.Activity#streaming(String, String)}.
      *
      * @param  activity

File: src/main/java/net/dv8tion/jda/api/sharding/DefaultShardManagerBuilder.java
Patch:
@@ -1168,7 +1168,7 @@ public DefaultShardManagerBuilder setEventManagerProvider(@Nonnull final IntFunc
      * Sets the {@link net.dv8tion.jda.api.entities.Activity Activity} for our session.
      * <br>This value can be changed at any time in the {@link net.dv8tion.jda.api.managers.Presence Presence} from a JDA instance.
      *
-     * <p><b>Hint:</b> You can create a {@link net.dv8tion.jda.api.entities.Activity Activity} object using
+     * <p><b>Hint:</b> You can create an {@link net.dv8tion.jda.api.entities.Activity Activity} object using
      * {@link net.dv8tion.jda.api.entities.Activity#playing(String) Activity.playing(String)} or
      * {@link net.dv8tion.jda.api.entities.Activity#streaming(String, String)} Activity.streaming(String, String)}.
      *
@@ -1189,7 +1189,7 @@ public DefaultShardManagerBuilder setActivity(@Nullable final Activity activity)
      * Sets the {@link net.dv8tion.jda.api.entities.Activity Activity} for our session.
      * <br>This value can be changed at any time in the {@link net.dv8tion.jda.api.managers.Presence Presence} from a JDA instance.
      *
-     * <p><b>Hint:</b> You can create a {@link net.dv8tion.jda.api.entities.Activity Activity} object using
+     * <p><b>Hint:</b> You can create an {@link net.dv8tion.jda.api.entities.Activity Activity} object using
      * {@link net.dv8tion.jda.api.entities.Activity#playing(String) Activity.playing(String)} or
      * {@link net.dv8tion.jda.api.entities.Activity#streaming(String, String) Activity.streaming(String, String)}.
      *

File: src/main/java/net/dv8tion/jda/api/MessageBuilder.java
Patch:
@@ -392,7 +392,7 @@ public int length()
     /**
      * Checks if the message contains any contend. This includes text as well as embeds.
      * 
-     * @return weather the message contains content
+     * @return whether the message contains content
      */
     public boolean isEmpty() {
         return builder.length() == 0 && embed == null;
@@ -1288,7 +1288,7 @@ public interface SplitPolicy
          * @param  chars
          *         the chars to split on
          * @param  remove
-         *         weather to remove the chars when splitting on them
+         *         whether to remove the chars when splitting on them
          *
          * @return a new {@link SplitPolicy}
          */

File: src/main/java/net/dv8tion/jda/api/entities/MessageHistory.java
Patch:
@@ -196,7 +196,7 @@ public RestAction<List<Message>> retrievePast(int amount)
             DataArray historyJson = response.getArray();
 
             for (int i = 0; i < historyJson.length(); i++)
-                messages.add(builder.createMessage(historyJson.getObject(i)));
+                messages.add(builder.createMessage(historyJson.getObject(i), channel, false));
 
             messages.forEach(msg -> history.put(msg.getIdLong(), msg));
             return messages;
@@ -265,7 +265,7 @@ public RestAction<List<Message>> retrieveFuture(int amount)
             DataArray historyJson = response.getArray();
 
             for (int i = 0; i < historyJson.length(); i++)
-                messages.add(builder.createMessage(historyJson.getObject(i)));
+                messages.add(builder.createMessage(historyJson.getObject(i), channel, false));
 
             for (Iterator<Message> it = messages.descendingIterator(); it.hasNext();)
             {

File: src/main/java/net/dv8tion/jda/api/entities/MessageHistory.java
Patch:
@@ -196,7 +196,7 @@ public RestAction<List<Message>> retrievePast(int amount)
             DataArray historyJson = response.getArray();
 
             for (int i = 0; i < historyJson.length(); i++)
-                messages.add(builder.createMessage(historyJson.getObject(i)));
+                messages.add(builder.createMessage(historyJson.getObject(i), channel, false));
 
             messages.forEach(msg -> history.put(msg.getIdLong(), msg));
             return messages;
@@ -265,7 +265,7 @@ public RestAction<List<Message>> retrieveFuture(int amount)
             DataArray historyJson = response.getArray();
 
             for (int i = 0; i < historyJson.length(); i++)
-                messages.add(builder.createMessage(historyJson.getObject(i)));
+                messages.add(builder.createMessage(historyJson.getObject(i), channel, false));
 
             for (Iterator<Message> it = messages.descendingIterator(); it.hasNext();)
             {

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/MessageActionImpl.java
Patch:
@@ -469,7 +469,7 @@ protected RequestBody asMultipart()
             final RequestBody body = IOUtil.createRequestBody(Requester.MEDIA_TYPE_OCTET, entry.getValue());
             builder.addFormDataPart("file" + index++, entry.getKey(), body);
         }
-        if (!isEmpty())
+        if (messageReference != 0L || !isEmpty())
             builder.addFormDataPart("payload_json", getJSON().toString());
         // clear remaining resources, they will be closed after being sent
         files.clear();

File: src/main/java/net/dv8tion/jda/internal/entities/SystemMessage.java
Patch:
@@ -34,7 +34,7 @@ public SystemMessage(
         String content, String nonce, User author, Member member, MessageActivity activity, OffsetDateTime editTime,
         List<MessageReaction> reactions, List<Attachment> attachments, List<MessageEmbed> embeds, int flags)
     {
-        super(id, channel, type, fromWebhook, mentionsEveryone, mentionedUsers, mentionedRoles,
+        super(id, channel, type, null, fromWebhook, mentionsEveryone, mentionedUsers, mentionedRoles,
             tts, pinned, content, nonce, author, member, activity, editTime, reactions, attachments, embeds, flags);
     }
 

File: src/main/java/net/dv8tion/jda/internal/entities/EntityBuilder.java
Patch:
@@ -1401,8 +1401,8 @@ public PermissionOverride createPermissionOverride(DataObject override, Abstract
     public WebhookImpl createWebhook(DataObject object)
     {
         final long id = object.getLong("id");
-        final long guildId = object.getLong("guild_id");
-        final long channelId = object.getLong("channel_id");
+        final long guildId = object.getUnsignedLong("guild_id");
+        final long channelId = object.getUnsignedLong("channel_id");
         final String token = object.getString("token", null);
         final WebhookType type = WebhookType.fromKey(object.getInt("type", -1));
 

File: src/main/java/net/dv8tion/jda/internal/entities/GuildImpl.java
Patch:
@@ -64,7 +64,6 @@
 import javax.annotation.CheckReturnValue;
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
-import java.io.UncheckedIOException;
 import java.time.OffsetDateTime;
 import java.time.temporal.ChronoUnit;
 import java.util.*;
@@ -350,7 +349,7 @@ public RestAction<List<Webhook>> retrieveWebhooks()
                 {
                     webhooks.add(builder.createWebhook(array.getObject(i)));
                 }
-                catch (UncheckedIOException | NullPointerException e)
+                catch (Exception e)
                 {
                     JDAImpl.LOG.error("Error creating webhook from json", e);
                 }

File: src/main/java/net/dv8tion/jda/api/requests/CloseCode.java
Patch:
@@ -35,7 +35,7 @@ public enum CloseCode
     NOT_AUTHENTICATED(    4003, "You sent a payload prior to identifying."),
     AUTHENTICATION_FAILED(4004, "The account token sent with your identify payload is incorrect.", false),
     ALREADY_AUTHENTICATED(4005, "You sent more than one identify payload. Don't do that!"),
-    INVALID_SEQ(          4007, "The sent sent when resuming the session was invalid. Reconnect and start a new session."),
+    INVALID_SEQ(          4007, "The seq sent when resuming the session was invalid. Reconnect and start a new session."),
     RATE_LIMITED(         4008, "Woah nelly! You're sending payloads to us too quickly. Slow it down!"),
     SESSION_TIMEOUT(      4009, "Your session timed out. Reconnect and start a new one."),
     INVALID_SHARD(        4010, "You sent an invalid shard when identifying.", false),

File: src/main/java/net/dv8tion/jda/internal/utils/cache/AbstractCacheView.java
Patch:
@@ -21,6 +21,7 @@
 import gnu.trove.set.TLongSet;
 import gnu.trove.set.hash.TLongHashSet;
 import net.dv8tion.jda.api.utils.LockIterator;
+import net.dv8tion.jda.api.utils.MiscUtil;
 import net.dv8tion.jda.api.utils.cache.CacheView;
 import net.dv8tion.jda.internal.utils.Checks;
 import net.dv8tion.jda.internal.utils.UnlockHook;
@@ -107,7 +108,7 @@ public void forEach(Consumer<? super T> action)
     public LockIterator<T> lockedIterator()
     {
         ReentrantReadWriteLock.ReadLock readLock = lock.readLock();
-        readLock.lock();
+        MiscUtil.tryLock(readLock);
         try
         {
             Iterator<T> directIterator = elements.valueCollection().iterator();

File: src/main/java/net/dv8tion/jda/api/managers/Presence.java
Patch:
@@ -82,15 +82,15 @@ public interface Presence
 
     /**
      * Sets the {@link net.dv8tion.jda.api.entities.Activity Activity} for this session.
-     * <br>A Activity can be retrieved via {@link net.dv8tion.jda.api.entities.Activity#playing(String)}.
+     * <br>An Activity can be retrieved via {@link net.dv8tion.jda.api.entities.Activity#playing(String)}.
      * For streams you provide a valid streaming url as second parameter
      *
      * <p>Examples:
      * <br>{@code presence.setActivity(Activity.playing("Thrones"));}
      * <br>{@code presence.setActivity(Activity.streaming("Thrones", "https://twitch.tv/EasterEggs"));}
      *
      * @param  activity
-     *         A {@link net.dv8tion.jda.api.entities.Activity Activity} instance or null to reset
+     *         An {@link net.dv8tion.jda.api.entities.Activity Activity} instance or null to reset
      *
      * @see    net.dv8tion.jda.api.entities.Activity#playing(String)
      * @see    net.dv8tion.jda.api.entities.Activity#streaming(String, String)

File: src/main/java/net/dv8tion/jda/internal/entities/PermissionOverrideImpl.java
Patch:
@@ -180,7 +180,7 @@ public AuditableRestAction<Void> delete()
 
         Member selfMember = getGuild().getSelfMember();
         GuildChannel channel = getChannel();
-        if (!selfMember.hasPermission(Permission.VIEW_CHANNEL))
+        if (!selfMember.hasPermission(channel, Permission.VIEW_CHANNEL))
             throw new MissingAccessException(channel, Permission.VIEW_CHANNEL);
         if (!selfMember.hasAccess(channel))
             throw new MissingAccessException(channel, Permission.VOICE_CONNECT);

File: src/main/java/net/dv8tion/jda/api/utils/MarkdownSanitizer.java
Patch:
@@ -71,7 +71,7 @@ public class MarkdownSanitizer
     private static final int ESCAPED_QUOTE_BLOCK = Integer.MIN_VALUE | QUOTE_BLOCK;
 
     private static final Pattern codeLanguage = Pattern.compile("^\\w+\n.*", Pattern.MULTILINE | Pattern.DOTALL);
-    private static final Pattern quote = Pattern.compile("> +\\S.*", Pattern.DOTALL | Pattern.MULTILINE);
+    private static final Pattern quote = Pattern.compile("> +.*", Pattern.DOTALL | Pattern.MULTILINE);
     private static final Pattern quoteBlock = Pattern.compile(">>>\\s+\\S.*", Pattern.DOTALL | Pattern.MULTILINE);
 
     private static final TIntObjectMap<String> tokens;

File: src/main/java/net/dv8tion/jda/api/entities/Guild.java
Patch:
@@ -1983,7 +1983,7 @@ default RestAction<Ban> retrieveBan(@Nonnull User bannedUser)
      * <br>This iterates from the most recent action to the first logged one. (Limit 90 days into history by discord api)
      *
      * <h1>Examples</h1>
-     * <pre><code>
+     * <pre>{@code
      * public void logBan(GuildBanEvent event) {
      *     Guild guild = event.getGuild();
      *     List<TextChannel> modLog = guild.getTextChannelsByName("mod-log", true);
@@ -2000,7 +2000,7 @@ default RestAction<Ban> retrieveBan(@Nonnull User bannedUser)
      *             );
      *          });
      * }
-     * </code></pre>
+     * }</pre>
      *
      * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
      *         If the currently logged in account

File: src/main/java/net/dv8tion/jda/internal/entities/UserImpl.java
Patch:
@@ -150,6 +150,7 @@ public long getIdLong()
     }
 
     @Override
+    @Deprecated
     public boolean isFake()
     {
         return fake;

File: src/main/java/net/dv8tion/jda/internal/entities/WebhookImpl.java
Patch:
@@ -165,6 +165,7 @@ public long getIdLong()
     }
 
     @Override
+    @Deprecated
     public boolean isFake()
     {
         return token == null;

File: src/test/java/MarkdownTest.java
Patch:
@@ -388,5 +388,6 @@ public void testQuote()
         Assertions.assertEquals("\\>>> Hello\nWorld", markdown.compute(">>> Hello\nWorld"));
         Assertions.assertEquals("\\>>>\nHello\nWorld", markdown.compute(">>>\nHello\nWorld"));
         Assertions.assertEquals("\\>>>\nHello > World", markdown.compute(">>>\nHello > World"));
+        Assertions.assertEquals("\\> \\_Hello \n\\> World\\_", markdown.compute("> _Hello \n> World_"));
     }
 }

File: src/main/java/net/dv8tion/jda/api/events/message/react/GenericMessageReactionEvent.java
Patch:
@@ -81,7 +81,7 @@ public User getUser()
     {
         return issuer == null && isFromType(ChannelType.PRIVATE)
                 ? getPrivateChannel().getUser() // this can't be the self user because then issuer would be nonnull
-                : null;
+                : issuer;
     }
 
     /**

File: src/main/java/net/dv8tion/jda/api/events/guild/GuildJoinEvent.java
Patch:
@@ -22,7 +22,7 @@
 
 /**
  * Indicates that you joined a {@link net.dv8tion.jda.api.entities.Guild Guild}.
- * <br>This requires that the guild is available when the guild leave happens. Otherwise a {@link UnavailableGuildJoinedEvent} is fired instead.
+ * <br>This requires that the guild is available when the guild join happens. Otherwise a {@link UnavailableGuildJoinedEvent} is fired instead.
  *
  * <p><b>Warning: Discord already triggered a mass amount of these events due to a downtime. Be careful!</b>
  *

File: src/main/java/net/dv8tion/jda/api/utils/data/etf/ExTermDecoder.java
Patch:
@@ -239,7 +239,7 @@ private static Object unpackAtom(ByteBuffer buffer, Charset charset)
 
     private static Object unpackAtom(ByteBuffer buffer, Charset charset, int length)
     {
-        String value = getString(buffer, StandardCharsets.ISO_8859_1, length);
+        String value = getString(buffer, charset, length);
         switch (value)
         {
         case "true": return true;
@@ -249,11 +249,11 @@ private static Object unpackAtom(ByteBuffer buffer, Charset charset, int length)
         }
     }
 
-    private static String getString(ByteBuffer buffer, Charset encoding, int length)
+    private static String getString(ByteBuffer buffer, Charset charset, int length)
     {
         byte[] array = new byte[length];
         buffer.get(array);
-        return new String(array, StandardCharsets.UTF_8);
+        return new String(array, charset);
     }
 
     private static List<Object> unpackList0(ByteBuffer buffer)

File: src/main/java/net/dv8tion/jda/api/Permission.java
Patch:
@@ -138,7 +138,7 @@ public String getName()
     /**
      * The binary offset of the permission.
      * <br>For more information about Discord's offset system refer to
-     * <a href="https://discordapp.com/developers/docs/topics/permissions">Discord Permissions</a>.
+     * <a href="https://discord.com/developers/docs/topics/permissions">Discord Permissions</a>.
      *
      * @return The offset that represents this {@link net.dv8tion.jda.api.Permission Permission}.
      */

File: src/main/java/net/dv8tion/jda/api/JDABuilder.java
Patch:
@@ -1368,6 +1368,8 @@ public JDABuilder removeEventListeners(@Nonnull Object... listeners)
      * Sets the maximum amount of time that JDA will back off to wait when attempting to reconnect the MainWebsocket.
      * <br>Provided value must be 32 or greater.
      *
+     * <p>Default: {@code 900}
+     *
      * @param  maxReconnectDelay
      *         The maximum amount of time that JDA will wait between reconnect attempts in seconds.
      *

File: src/main/java/net/dv8tion/jda/api/sharding/DefaultShardManagerBuilder.java
Patch:
@@ -1642,6 +1642,8 @@ public DefaultShardManagerBuilder setEventPoolProvider(@Nullable ThreadPoolProvi
      * Sets the maximum amount of time that JDA will back off to wait when attempting to reconnect the MainWebsocket.
      * <br>Provided value must be 32 or greater.
      *
+     * <p>Default: {@code 900}
+     *
      * @param  maxReconnectDelay
      *         The maximum amount of time that JDA will wait between reconnect attempts in seconds.
      *

File: src/examples/java/AudioEchoExample.java
Patch:
@@ -52,8 +52,8 @@ public static void main(String[] args) throws LoginException
             GatewayIntent.GUILD_VOICE_STATES
         );
 
-        // Start the JDA session with light mode (minimal cache)
-        JDABuilder.createLight(token, intents)           // Use provided token from command line arguments
+        // Start the JDA session with default mode (voice member cache)
+        JDABuilder.createDefault(token, intents)         // Use provided token from command line arguments
              .addEventListeners(new AudioEchoExample())  // Start listening with this listener
              .setActivity(Activity.listening("to jams")) // Inform users that we are jammin' it out
              .setStatus(OnlineStatus.DO_NOT_DISTURB)     // Please don't disturb us while we're jammin'

File: src/main/java/net/dv8tion/jda/api/utils/data/etf/ExTermEncoder.java
Patch:
@@ -152,7 +152,7 @@ private static ByteBuffer packBinary(ByteBuffer buffer, String value)
         byte[] encoded = value.getBytes(StandardCharsets.UTF_8);
         buffer = realloc(buffer, encoded.length * 4 + 5);
         buffer.put(BINARY);
-        buffer.putInt(value.length());
+        buffer.putInt(encoded.length);
         buffer.put(encoded);
         return buffer;
     }

File: src/main/java/net/dv8tion/jda/api/entities/Guild.java
Patch:
@@ -1912,7 +1912,7 @@ default RestAction<Ban> retrieveBan(@Nonnull User bannedUser)
     }
 
     /**
-     * The method calculates the amount of Members that would be pruned if {@link #prune(int)} was executed.
+     * The method calculates the amount of Members that would be pruned if {@link #prune(int, Role...)} was executed.
      * Prunability is determined by a Member being offline for at least <i>days</i> days.
      *
      * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} caused by

File: src/main/java/net/dv8tion/jda/internal/entities/GuildImpl.java
Patch:
@@ -1261,7 +1261,7 @@ public AuditableRestAction<Void> modifyMemberRoles(@Nonnull Member member, @Nonn
         }
 
         DataObject body = DataObject.empty()
-            .put("roles", roles.stream().map(Role::getId).collect(Collectors.toList()));
+            .put("roles", roles.stream().map(Role::getId).collect(Collectors.toSet()));
         Route.CompiledRoute route = Route.Guilds.MODIFY_MEMBER.compile(getId(), member.getUser().getId());
 
         return new AuditableRestActionImpl<>(getJDA(), route, body);

File: src/main/java/net/dv8tion/jda/api/Permission.java
Patch:
@@ -138,7 +138,7 @@ public String getName()
     /**
      * The binary offset of the permission.
      * <br>For more information about Discord's offset system refer to
-     * <a href="https://discordapi.readthedocs.org/en/latest/reference/channels/permissions.html#permissions-number">Discord Permission Numbers</a>.
+     * <a href="https://discordapp.com/developers/docs/topics/permissions">Discord Permissions</a>.
      *
      * @return The offset that represents this {@link net.dv8tion.jda.api.Permission Permission}.
      */

File: src/main/java/net/dv8tion/jda/api/entities/Message.java
Patch:
@@ -157,8 +157,9 @@ public interface Message extends ISnowflake, Formattable
     /**
      * Pattern used to find {@link #getJumpUrl() Jump URLs} in strings.
      *
-     * <p>Groups:
+     * <h2>Groups</h2>
      * <table>
+     *   <caption style="display: none">Javadoc is stupid, this is not a required tag</caption>
      *   <tr>
      *     <th>Index</th>
      *     <th>Name</th>

File: src/main/java/net/dv8tion/jda/api/events/channel/category/update/CategoryUpdatePermissionsEvent.java
Patch:
@@ -33,6 +33,9 @@
  * Indicates that the permissions of a {@link net.dv8tion.jda.api.entities.Category Category} were updated.
  *
  * <p>Can be used to retrieve the changed permissions
+ *
+ * @deprecated This event is no longer feasible due to members not being cached by default. We replaced this event
+ *             with {@link net.dv8tion.jda.api.events.guild.override.GenericPermissionOverrideEvent GenericPermissionOverrideEvent} and derivatives.
  */
 @Deprecated
 @ForRemoval

File: src/main/java/net/dv8tion/jda/api/events/channel/store/update/StoreChannelUpdatePermissionsEvent.java
Patch:
@@ -33,6 +33,9 @@
  * Indicates that a {@link net.dv8tion.jda.api.entities.StoreChannel StoreChannel}'s permission overrides changed.
  *
  * <p>Can be use to detect when a StoreChannel's permission overrides change and get affected {@link net.dv8tion.jda.api.entities.Role Roles}/{@link net.dv8tion.jda.api.entities.Member Members}.
+ *
+ * @deprecated This event is no longer feasible due to members not being cached by default. We replaced this event
+ *             with {@link net.dv8tion.jda.api.events.guild.override.GenericPermissionOverrideEvent GenericPermissionOverrideEvent} and derivatives.
  */
 @Deprecated
 @ForRemoval

File: src/main/java/net/dv8tion/jda/api/events/channel/text/update/TextChannelUpdatePermissionsEvent.java
Patch:
@@ -32,6 +32,9 @@
  * Indicates that a {@link net.dv8tion.jda.api.entities.TextChannel TextChannel}'s permission overrides changed.
  *
  * <p>Can be use to detect when a TextChannel's permission overrides change and get affected {@link net.dv8tion.jda.api.entities.Role Roles}/{@link net.dv8tion.jda.api.entities.User Users}.
+ *
+ * @deprecated This event is no longer feasible due to members not being cached by default. We replaced this event
+ *             with {@link net.dv8tion.jda.api.events.guild.override.GenericPermissionOverrideEvent GenericPermissionOverrideEvent} and derivatives.
  */
 @Deprecated
 @ForRemoval

File: src/main/java/net/dv8tion/jda/api/events/channel/voice/update/VoiceChannelUpdatePermissionsEvent.java
Patch:
@@ -32,6 +32,9 @@
  * Indicates that a {@link VoiceChannel VoiceChannel}'s permission overrides changed.
  *
  * <p>Can be used to get affected VoiceChannel, affected Guild and affected {@link net.dv8tion.jda.api.entities.Role Roles}/{@link net.dv8tion.jda.api.entities.User Users}.
+ *
+ * @deprecated This event is no longer feasible due to members not being cached by default. We replaced this event
+ *             with {@link net.dv8tion.jda.api.events.guild.override.GenericPermissionOverrideEvent GenericPermissionOverrideEvent} and derivatives.
  */
 @Deprecated
 @ForRemoval

File: src/main/java/net/dv8tion/jda/api/events/message/priv/react/GenericPrivateMessageReactionEvent.java
Patch:
@@ -36,7 +36,7 @@ public class GenericPrivateMessageReactionEvent extends GenericPrivateMessageEve
     protected final User issuer;
     protected final MessageReaction reaction;
 
-    public GenericPrivateMessageReactionEvent(@Nonnull JDA api, long responseNumber, @Nonnull User user, @Nonnull MessageReaction reaction, long userId)
+    public GenericPrivateMessageReactionEvent(@Nonnull JDA api, long responseNumber, @Nullable User user, @Nonnull MessageReaction reaction, long userId)
     {
         super(api, responseNumber, reaction.getMessageIdLong(), (PrivateChannel) reaction.getChannel());
         this.userId = userId;

File: src/main/java/net/dv8tion/jda/api/events/message/priv/react/PrivateMessageReactionAddEvent.java
Patch:
@@ -21,6 +21,7 @@
 import net.dv8tion.jda.api.entities.User;
 
 import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
 
 /**
  * Indicates that a {@link net.dv8tion.jda.api.entities.MessageReaction MessageReaction} was added to a Message in a PrivateChannel.
@@ -29,7 +30,7 @@
  */
 public class PrivateMessageReactionAddEvent extends GenericPrivateMessageReactionEvent
 {
-    public PrivateMessageReactionAddEvent(@Nonnull JDA api, long responseNumber, @Nonnull User user, @Nonnull MessageReaction reaction, long userId)
+    public PrivateMessageReactionAddEvent(@Nonnull JDA api, long responseNumber, @Nullable User user, @Nonnull MessageReaction reaction, long userId)
     {
         super(api, responseNumber, user, reaction, userId);
     }

File: src/main/java/net/dv8tion/jda/api/events/message/priv/react/PrivateMessageReactionRemoveEvent.java
Patch:
@@ -21,6 +21,7 @@
 import net.dv8tion.jda.api.entities.User;
 
 import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
 
 /**
  * Indicates that a {@link net.dv8tion.jda.api.entities.MessageReaction MessageReaction} was removed from a Message in a PrivateChannel.
@@ -29,7 +30,7 @@
  */
 public class PrivateMessageReactionRemoveEvent extends GenericPrivateMessageReactionEvent
 {
-    public PrivateMessageReactionRemoveEvent(@Nonnull JDA api, long responseNumber, @Nonnull User user, @Nonnull MessageReaction reaction, long userId)
+    public PrivateMessageReactionRemoveEvent(@Nonnull JDA api, long responseNumber, @Nullable User user, @Nonnull MessageReaction reaction, long userId)
     {
         super(api, responseNumber, user, reaction, userId);
     }

File: src/main/java/net/dv8tion/jda/api/events/message/react/MessageReactionRemoveEvent.java
Patch:
@@ -31,7 +31,7 @@
  */
 public class MessageReactionRemoveEvent extends GenericMessageReactionEvent
 {
-    public MessageReactionRemoveEvent(@Nonnull JDA api, long responseNumber, @Nonnull User user,
+    public MessageReactionRemoveEvent(@Nonnull JDA api, long responseNumber, @Nullable User user,
                                       @Nullable Member member, @Nonnull MessageReaction reaction, long userId)
     {
         super(api, responseNumber, user, member, reaction, userId);

File: src/main/java/net/dv8tion/jda/api/hooks/ListenerAdapter.java
Patch:
@@ -140,7 +140,7 @@ public void onCategoryUpdatePermissions(@Nonnull CategoryUpdatePermissionsEvent
 
     @Deprecated
     @DeprecatedSince("4.2.0")
-    @ReplaceWith("onGuildMemberRemoveEvent(GuildMemberRemoveEvent)")
+    @ReplaceWith("onGuildMemberRemove(GuildMemberRemoveEvent)")
     public void onGuildMemberLeave(@Nonnull GuildMemberLeaveEvent event) {}
 
     @Deprecated

File: src/main/java/net/dv8tion/jda/api/utils/MemberCachePolicy.java
Patch:
@@ -35,6 +35,8 @@
  * <p>If {@link net.dv8tion.jda.api.requests.GatewayIntent#GUILD_MEMBERS GUILD_MEMBERS} intent is disabled you should not use {@link #ALL} or {@link #ONLINE}.
  * This intent enables guild member leave events which are required to remove members from cache properly.
  *
+ * <p>This can be configured with {@link net.dv8tion.jda.api.JDABuilder#setMemberCachePolicy(MemberCachePolicy) JDABuilder.setMemberCachePolicy(MemberCachePolicy)}.
+ *
  * @see #DEFAULT
  * @see #NONE
  * @see #ALL

File: src/main/java/net/dv8tion/jda/internal/entities/GuildImpl.java
Patch:
@@ -159,7 +159,7 @@ public MemberAction addMember(@Nonnull String accessToken, @Nonnull String userI
     @Override
     public boolean isLoaded()
     {
-        // Only works with guild subscriptions
+        // Only works with GUILD_MEMBERS intent
         return getJDA().isIntent(GatewayIntent.GUILD_MEMBERS)
                 && (long) getMemberCount() <= getMemberCache().size();
     }

File: src/main/java/net/dv8tion/jda/internal/handle/VoiceStateUpdateHandler.java
Patch:
@@ -166,7 +166,7 @@ else if (channel == null)
                 {
                     //And this instance of JDA is connected or attempting to connect,
                     // then change the channel we expect to be connected to.
-                    if (mng.isConnected() || mng.isAttemptingToConnect())
+                    if (mng.isConnected())
                         mng.setConnectedChannel(channel);
 
                     //If we have connected (VOICE_SERVER_UPDATE received and AudioConnection created (actual connection might still be setting up)),

File: src/main/java/net/dv8tion/jda/internal/requests/WebSocketSendingThread.java
Patch:
@@ -113,9 +113,10 @@ public void run()
             api.setContext();
             attemptedToSend = false;
             needRateLimit = false;
+            // We do this outside of the lock because otherwise we could potentially deadlock here
+            audioRequest = client.getNextAudioConnectRequest();
             queueLock.lockInterruptibly();
 
-            audioRequest = client.getNextAudioConnectRequest();
             chunkRequest = chunkQueue.peek();
             if (chunkRequest != null)
                 handleChunkSync(chunkRequest);

File: src/main/java/net/dv8tion/jda/api/entities/GuildChannel.java
Patch:
@@ -96,6 +96,9 @@ public interface GuildChannel extends ISnowflake, Comparable<GuildChannel>
      * <br>Higher values mean they are displayed lower in the Client. Position 0 is the top most GuildChannel
      * Channels of a {@link net.dv8tion.jda.api.entities.Guild Guild} do not have to have continuous positions
      *
+     * @throws IllegalStateException
+     *         If this channel is not in the guild cache
+     *
      * @return Zero-based int of position of the GuildChannel.
      */
     int getPosition();

File: src/main/java/net/dv8tion/jda/api/hooks/AnnotatedEventManager.java
Patch:
@@ -103,6 +103,8 @@ public void handle(@Nonnull GenericEvent event)
                     catch (Throwable throwable)
                     {
                         JDAImpl.LOG.error("One of the EventListeners had an uncaught exception", throwable);
+                        if (throwable instanceof Error)
+                            throw (Error) throwable;
                     }
                 }));
             }

File: src/main/java/net/dv8tion/jda/api/hooks/InterfacedEventManager.java
Patch:
@@ -98,6 +98,8 @@ public void handle(@Nonnull GenericEvent event)
             catch (Throwable throwable)
             {
                 JDAImpl.LOG.error("One of the EventListeners had an uncaught exception", throwable);
+                if (throwable instanceof Error)
+                    throw (Error) throwable;
             }
         }
     }

File: src/main/java/net/dv8tion/jda/internal/entities/CategoryImpl.java
Patch:
@@ -79,7 +79,7 @@ public int getPosition()
             if (equals(channels.get(i)))
                 return i;
         }
-        throw new AssertionError("Somehow when determining position we never found the Category in the Guild's channels? wtf?");
+        throw new IllegalStateException("Somehow when determining position we never found the Category in the Guild's channels? wtf?");
     }
 
     @Nonnull

File: src/main/java/net/dv8tion/jda/internal/entities/RoleImpl.java
Patch:
@@ -33,8 +33,8 @@
 import net.dv8tion.jda.internal.requests.restaction.AuditableRestActionImpl;
 import net.dv8tion.jda.internal.utils.Checks;
 import net.dv8tion.jda.internal.utils.PermissionUtil;
-import net.dv8tion.jda.internal.utils.cache.SortedSnowflakeCacheViewImpl;
 import net.dv8tion.jda.internal.utils.cache.SnowflakeReference;
+import net.dv8tion.jda.internal.utils.cache.SortedSnowflakeCacheViewImpl;
 
 import javax.annotation.Nonnull;
 import java.awt.*;
@@ -82,7 +82,7 @@ public int getPosition()
                 return i;
             i--;
         }
-        throw new AssertionError("Somehow when determining position we never found the role in the Guild's roles? wtf?");
+        throw new IllegalStateException("Somehow when determining position we never found the role in the Guild's roles? wtf?");
     }
 
     @Override

File: src/main/java/net/dv8tion/jda/internal/entities/StoreChannelImpl.java
Patch:
@@ -63,7 +63,7 @@ public int getPosition()
             if (equals(channels.get(i)))
                 return i;
         }
-        throw new AssertionError("Somehow when determining position we never found the StoreChannel in the Guild's channels? wtf?");
+        throw new IllegalStateException("Somehow when determining position we never found the StoreChannel in the Guild's channels? wtf?");
     }
 
     @Nonnull

File: src/main/java/net/dv8tion/jda/internal/entities/TextChannelImpl.java
Patch:
@@ -300,7 +300,7 @@ public int getPosition()
             if (equals(channels.get(i)))
                 return i;
         }
-        throw new AssertionError("Somehow when determining position we never found the TextChannel in the Guild's channels? wtf?");
+        throw new IllegalStateException("Somehow when determining position we never found the TextChannel in the Guild's channels? wtf?");
     }
 
     @Nonnull

File: src/main/java/net/dv8tion/jda/internal/entities/VoiceChannelImpl.java
Patch:
@@ -80,7 +80,7 @@ public int getPosition()
             if (equals(channels.get(i)))
                 return i;
         }
-        throw new AssertionError("Somehow when determining position we never found the VoiceChannel in the Guild's channels? wtf?");
+        throw new IllegalStateException("Somehow when determining position we never found the VoiceChannel in the Guild's channels? wtf?");
     }
 
     @Nonnull

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/operator/RestActionOperator.java
Patch:
@@ -50,6 +50,8 @@ protected void doFailure(Consumer<? super Throwable> callback, Throwable throwab
             RestAction.getDefaultFailure().accept(throwable);
         else
             callback.accept(throwable);
+        if (throwable instanceof Error)
+            throw (Error) throwable;
     }
 
     @Nonnull

File: src/main/java/net/dv8tion/jda/api/sharding/ShardManager.java
Patch:
@@ -1478,7 +1478,6 @@ default void setStatusProvider(@Nullable final IntFunction<OnlineStatus> statusP
      * {@link java.util.concurrent.RejectedExecutionException}.
      *
      * <p>This will interrupt the default JDA event thread, due to the gateway connection being interrupted.
-     * It is recommended to call this from a different thread.
      */
     void shutdown();
 

File: src/main/java/net/dv8tion/jda/api/entities/MessageChannel.java
Patch:
@@ -2310,6 +2310,7 @@ default ReactionPaginationAction retrieveReactionUsersById(long messageId, @Nonn
      *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE UNKNOWN_MESSAGE}
      *     <br>The provided {@code messageId} is unknown in this MessageChannel, either due to the id being invalid, or
      *         the message it referred to has already been deleted.</li>
+     * </ul>
      *
      * @param  messageId
      *         The messageId to retrieve the users from.
@@ -2360,6 +2361,7 @@ default ReactionPaginationAction retrieveReactionUsersById(@Nonnull String messa
      *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE UNKNOWN_MESSAGE}
      *     <br>The provided {@code messageId} is unknown in this MessageChannel, either due to the id being invalid, or
      *         the message it referred to has already been deleted.</li>
+     * </ul>
      *
      * @param  messageId
      *         The messageId to retrieve the users from.

File: src/main/java/net/dv8tion/jda/internal/entities/EntityBuilder.java
Patch:
@@ -447,7 +447,6 @@ else if (guild.getMemberById(member.getIdLong()) != null)
         long hashId = guild.getIdLong() ^ user.getIdLong();
         getJDA().getEventCache().playbackCache(EventCache.Type.USER, member.getIdLong());
         getJDA().getEventCache().playbackCache(EventCache.Type.MEMBER, hashId);
-        guild.acknowledgeMembers();
         return true;
     }
 

File: src/main/java/net/dv8tion/jda/api/requests/GatewayIntent.java
Patch:
@@ -81,6 +81,8 @@ public enum GatewayIntent
     /**
      * <b>PRIVILEGED INTENT</b> Events which inform us about member update/leave/join of a guild.
      * <br>This is required to chunk all members of a guild. Without this enabled you have to use {@link net.dv8tion.jda.api.utils.ChunkingFilter#NONE ChunkingFilter.NONE}!
+     *
+     * <p>This will also update user information such as name/avatar.
      */
     GUILD_MEMBERS(1),
     /**
@@ -109,6 +111,7 @@ public enum GatewayIntent
     GUILD_VOICE_STATES(7),
     /**
      * <b>PRIVILEGED INTENT</b> Presence updates. This is used to lazy load members and update user properties such as name/avatar.
+     * <br>This is a very heavy intent! Presence updates are 99% of traffic the bot will receive. To get user update events you should consider using {@link #GUILD_MEMBERS} instead.
      */
     GUILD_PRESENCES(8),
     /**

File: src/main/java/net/dv8tion/jda/api/entities/MessageChannel.java
Patch:
@@ -770,8 +770,7 @@ default MessageAction sendFile(@Nonnull byte[] data, @Nonnull String fileName, @
     {
         Checks.notNull(data, "data");
         Checks.notNull(fileName, "fileName");
-        final long maxSize = getJDA().getSelfUser().getAllowedFileSize();
-        Checks.check(data.length <= maxSize, "File is too big! Max file-size is %d bytes", maxSize);
+
         return sendFile(new ByteArrayInputStream(data), fileName, options);
     }
 

File: src/main/java/net/dv8tion/jda/api/entities/MessageChannel.java
Patch:
@@ -770,8 +770,7 @@ default MessageAction sendFile(@Nonnull byte[] data, @Nonnull String fileName, @
     {
         Checks.notNull(data, "data");
         Checks.notNull(fileName, "fileName");
-        final long maxSize = getJDA().getSelfUser().getAllowedFileSize();
-        Checks.check(data.length <= maxSize, "File is too big! Max file-size is %d bytes", maxSize);
+
         return sendFile(new ByteArrayInputStream(data), fileName, options);
     }
 

File: src/main/java/net/dv8tion/jda/internal/requests/RestActionImpl.java
Patch:
@@ -48,7 +48,7 @@ public class RestActionImpl<T> implements RestAction<T>
     {
         if (t instanceof CancellationException || t instanceof TimeoutException)
             LOG.debug(t.getMessage());
-        else if (LOG.isDebugEnabled())
+        else if (LOG.isDebugEnabled() || !(t instanceof ErrorResponseException))
             LOG.error("RestAction queue returned failure", t);
         else if (t.getCause() != null)
             LOG.error("RestAction queue returned failure: [{}] {}", t.getClass().getSimpleName(), t.getMessage(), t.getCause());

File: src/main/java/net/dv8tion/jda/api/entities/MessageChannel.java
Patch:
@@ -643,9 +643,7 @@ default MessageAction sendFile(@Nonnull File file, @Nonnull String fileName, @No
     {
         Checks.notNull(file, "file");
         Checks.check(file.exists() && file.canRead(),
-            "Provided file is either null, doesn't exist or is not readable!");
-        Checks.check(file.length() <= getJDA().getSelfUser().getAllowedFileSize(),
-            "File is too big! Max file-size is 8 MiB for normal and 50 MiB for nitro users");
+                    "Provided file doesn't exist or cannot be read!");
         Checks.notNull(fileName, "fileName");
 
         try

File: src/main/java/net/dv8tion/jda/api/requests/CloseCode.java
Patch:
@@ -25,6 +25,7 @@
  */
 public enum CloseCode
 {
+    RECONNECT(            4900, "The connection has been closed to reconnect."),
     GRACEFUL_CLOSE(       1000, "The connection was closed gracefully or your heartbeats timed out."),
     CLOUD_FLARE_LOAD(     1001, "The connection was closed due to CloudFlare load balancing."),
     INTERNAL_SERVER_ERROR(1006, "Something broke on the remote's end, sorry 'bout that... Try reconnecting!"),

File: src/main/java/net/dv8tion/jda/internal/requests/Requester.java
Patch:
@@ -188,14 +188,14 @@ public Long execute(Request<?> apiRequest, boolean retried, boolean handleOnRate
         okhttp3.Response lastResponse = null;
         try
         {
-            Call call = httpClient.newCall(request);
             LOG.trace("Executing request {} {}", apiRequest.getRoute().getMethod(), url);
             int attempt = 0;
             do
             {
                 if (apiRequest.isSkipped())
                     return null;
 
+                Call call = httpClient.newCall(request);
                 lastResponse = call.execute();
                 responses[attempt] = lastResponse;
                 String cfRay = lastResponse.header("CF-RAY");

File: src/main/java/net/dv8tion/jda/api/EmbedBuilder.java
Patch:
@@ -58,7 +58,8 @@ public class EmbedBuilder
     private MessageEmbed.ImageInfo image;
 
     /**
-     * Creates an EmbedBuilder to be used to creates an embed to send.
+     * Constructs a new EmbedBuilder instance, which can be used to create {@link net.dv8tion.jda.api.entities.MessageEmbed MessageEmbeds}.
+     * These can then be sent to a channel using {@link net.dv8tion.jda.api.entities.MessageChannel#sendMessage(MessageEmbed)}.
      * <br>Every part of an embed can be removed or cleared by providing {@code null} to the setter method.
      */
     public EmbedBuilder() { }

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/PermissionOverrideActionImpl.java
Patch:
@@ -237,7 +237,6 @@ protected RequestBody finalizeData()
     @Override
     protected void handleSuccess(Response response, Request<PermissionOverride> request)
     {
-        long id = permissionHolder.getIdLong();
         DataObject object = (DataObject) request.getRawBody();
         PermissionOverrideImpl override = new PermissionOverrideImpl(channel, id, isRole());
         override.setAllow(object.getLong("allow"));

File: src/main/java/net/dv8tion/jda/api/JDABuilder.java
Patch:
@@ -29,6 +29,7 @@
 import net.dv8tion.jda.internal.JDAImpl;
 import net.dv8tion.jda.internal.managers.PresenceImpl;
 import net.dv8tion.jda.internal.utils.Checks;
+import net.dv8tion.jda.internal.utils.IOUtil;
 import net.dv8tion.jda.internal.utils.config.AuthorizationConfig;
 import net.dv8tion.jda.internal.utils.config.MetaConfig;
 import net.dv8tion.jda.internal.utils.config.SessionConfig;
@@ -1421,7 +1422,7 @@ public JDA build() throws LoginException
         if (httpClient == null)
         {
             if (this.httpClientBuilder == null)
-                this.httpClientBuilder = new OkHttpClient.Builder();
+                this.httpClientBuilder = IOUtil.newHttpClientBuilder();
             httpClient = this.httpClientBuilder.build();
         }
 

File: src/main/java/net/dv8tion/jda/internal/requests/ratelimit/ClientRateLimiter.java
Patch:
@@ -30,13 +30,16 @@
 import java.io.UncheckedIOException;
 import java.util.Iterator;
 import java.util.Queue;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.RejectedExecutionException;
 import java.util.concurrent.TimeUnit;
 
 public class ClientRateLimiter extends RateLimiter
 {
     volatile Long globalCooldown = null;
+    protected final ConcurrentHashMap<String, IBucket> buckets = new ConcurrentHashMap<>();
+    protected final ConcurrentLinkedQueue<IBucket> submittedBuckets = new ConcurrentLinkedQueue<>();
 
     public ClientRateLimiter(Requester requester)
     {

File: src/main/java/net/dv8tion/jda/internal/utils/config/sharding/ShardingSessionConfig.java
Patch:
@@ -20,6 +20,7 @@
 import net.dv8tion.jda.api.audio.factory.IAudioSendFactory;
 import net.dv8tion.jda.api.hooks.VoiceDispatchInterceptor;
 import net.dv8tion.jda.api.utils.SessionController;
+import net.dv8tion.jda.internal.utils.IOUtil;
 import net.dv8tion.jda.internal.utils.config.SessionConfig;
 import net.dv8tion.jda.internal.utils.config.flags.ConfigFlag;
 import net.dv8tion.jda.internal.utils.config.flags.ShardingConfigFlag;
@@ -44,7 +45,7 @@ public ShardingSessionConfig(
     {
         super(sessionController, httpClient, webSocketFactory, interceptor, flags, maxReconnectDelay, largeThreshold);
         if (httpClient == null)
-            this.builder = httpClientBuilder == null ? new OkHttpClient.Builder() : httpClientBuilder;
+            this.builder = httpClientBuilder == null ? IOUtil.newHttpClientBuilder() : httpClientBuilder;
         else
             this.builder = null;
         this.audioSendFactory = audioSendFactory;

File: src/main/java/net/dv8tion/jda/internal/entities/CategoryImpl.java
Patch:
@@ -93,9 +93,9 @@ public ChannelAction<Category> createCopy(@Nonnull Guild guild)
             for (PermissionOverride o : overrides.valueCollection())
             {
                 if (o.isMemberOverride())
-                    action.addPermissionOverride(o.getMember(), o.getAllowedRaw(), o.getDeniedRaw());
+                    action.addMemberPermissionOverride(o.getIdLong(), o.getAllowedRaw(), o.getDeniedRaw());
                 else
-                    action.addPermissionOverride(o.getRole(), o.getAllowedRaw(), o.getDeniedRaw());
+                    action.addRolePermissionOverride(o.getIdLong(), o.getAllowedRaw(), o.getDeniedRaw());
             }
         }
         return action;

File: src/main/java/net/dv8tion/jda/internal/entities/TextChannelImpl.java
Patch:
@@ -314,9 +314,9 @@ public ChannelAction<TextChannel> createCopy(@Nonnull Guild guild)
             for (PermissionOverride o : overrides.valueCollection())
             {
                 if (o.isMemberOverride())
-                    action.addPermissionOverride(o.getMember(), o.getAllowedRaw(), o.getDeniedRaw());
+                    action.addMemberPermissionOverride(o.getIdLong(), o.getAllowedRaw(), o.getDeniedRaw());
                 else
-                    action.addPermissionOverride(o.getRole(), o.getAllowedRaw(), o.getDeniedRaw());
+                    action.addRolePermissionOverride(o.getIdLong(), o.getAllowedRaw(), o.getDeniedRaw());
             }
         }
         return action;

File: src/main/java/net/dv8tion/jda/internal/entities/VoiceChannelImpl.java
Patch:
@@ -97,9 +97,9 @@ public ChannelAction<VoiceChannel> createCopy(@Nonnull Guild guild)
             for (PermissionOverride o : overrides.valueCollection())
             {
                 if (o.isMemberOverride())
-                    action.addPermissionOverride(o.getMember(), o.getAllowedRaw(), o.getDeniedRaw());
+                    action.addMemberPermissionOverride(o.getIdLong(), o.getAllowedRaw(), o.getDeniedRaw());
                 else
-                    action.addPermissionOverride(o.getRole(), o.getAllowedRaw(), o.getDeniedRaw());
+                    action.addRolePermissionOverride(o.getIdLong(), o.getAllowedRaw(), o.getDeniedRaw());
             }
         }
         return action;

File: src/main/java/net/dv8tion/jda/internal/entities/GuildImpl.java
Patch:
@@ -1325,7 +1325,7 @@ public GuildImpl setAvailable(boolean available)
     public GuildImpl setOwner(Member owner)
     {
         // Only cache owner if user cache is enabled
-        if (!owner.isFake())
+        if (owner != null && !owner.isFake())
             this.owner = owner;
         return this;
     }

File: src/examples/java/MessageListenerExample.java
Patch:
@@ -39,8 +39,8 @@ public static void main(String[] args)
         // we would use AccountType.CLIENT
         try
         {
-            JDA jda = new JDABuilder("Your-Token-Goes-Here")         // The token of the account that is logging in.
-                    .addEventListeners(new MessageListenerExample())  // An instance of a class that will handle events.
+            JDA jda = JDABuilder.createDefault("Your-Token-Goes-Here") // The token of the account that is logging in.
+                    .addEventListeners(new MessageListenerExample())   // An instance of a class that will handle events.
                     .build();
             jda.awaitReady(); // Blocking guarantees that JDA will be completely loaded.
             System.out.println("Finished Building JDA!");

File: src/main/java/net/dv8tion/jda/annotations/DeprecatedSince.java
Patch:
@@ -23,7 +23,7 @@
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
-@Target({ElementType.TYPE, ElementType.METHOD, ElementType.FIELD})
+@Target({ElementType.TYPE, ElementType.METHOD, ElementType.FIELD, ElementType.CONSTRUCTOR})
 public @interface DeprecatedSince
 {
     String value();

File: src/main/java/net/dv8tion/jda/annotations/ForRemoval.java
Patch:
@@ -24,7 +24,7 @@
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
-@Target({ElementType.TYPE, ElementType.METHOD, ElementType.FIELD})
+@Target({ElementType.TYPE, ElementType.METHOD, ElementType.FIELD, ElementType.CONSTRUCTOR})
 public @interface ForRemoval
 {
 }

File: src/main/java/net/dv8tion/jda/annotations/ReplaceWith.java
Patch:
@@ -24,7 +24,7 @@
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
-@Target({ElementType.TYPE, ElementType.METHOD, ElementType.FIELD})
+@Target({ElementType.TYPE, ElementType.METHOD, ElementType.FIELD, ElementType.CONSTRUCTOR})
 public @interface ReplaceWith
 {
     String value();

File: src/main/java/net/dv8tion/jda/api/JDAInfo.java
Patch:
@@ -20,6 +20,7 @@
  */
 public class JDAInfo
 {
+    public static final int DISCORD_GATEWAY_VERSION = 6;
     public static final int DISCORD_REST_VERSION = 6;
     public static final int AUDIO_GATEWAY_VERSION = 4;
     public static final String GITHUB = "https://github.com/DV8FromTheWorld/JDA";

File: src/main/java/net/dv8tion/jda/api/entities/ChannelType.java
Patch:
@@ -36,7 +36,7 @@ public enum ChannelType
      */
     VOICE(2, 1, true),
     /**
-     * A Group. {@link net.dv8tion.jda.api.AccountType#CLIENT AccountType.CLIENT} only.
+     * A Group. (unused)
      */
     GROUP(3, -1),
     /**

File: src/main/java/net/dv8tion/jda/api/entities/Message.java
Patch:
@@ -796,7 +796,7 @@ default boolean isFromGuild()
      * @throws java.lang.IllegalStateException
      *         If the message attempting to be edited was not created by the currently logged in account, or
      *         if the passed-in embed is {@code null}
-     *         or not {@link net.dv8tion.jda.api.entities.MessageEmbed#isSendable(net.dv8tion.jda.api.AccountType) sendable}
+     *         or not {@link net.dv8tion.jda.api.entities.MessageEmbed#isSendable() sendable}
      *
      * @return {@link MessageAction MessageAction}
      *         <br>The {@link net.dv8tion.jda.api.entities.Message Message} with the updated content
@@ -883,7 +883,7 @@ default boolean isFromGuild()
      *         <ul>
      *             <li>If the message attempting to be edited was not created by the currently logged in account</li>
      *             <li>If the message contains a MessageEmbed that is not
-     *                 {@link net.dv8tion.jda.api.entities.MessageEmbed#isSendable(net.dv8tion.jda.api.AccountType) sendable}</li>
+     *                 {@link net.dv8tion.jda.api.entities.MessageEmbed#isSendable() sendable}</li>
      *         </ul>
      *
      * @return {@link MessageAction MessageAction}

File: src/main/java/net/dv8tion/jda/api/entities/TextChannel.java
Patch:
@@ -82,9 +82,7 @@ public interface TextChannel extends GuildChannel, MessageChannel, IMentionable
      * <br>If slowmode is set this returns an {@code int} between 1 and {@link net.dv8tion.jda.api.entities.TextChannel#MAX_SLOWMODE TextChannel.MAX_SLOWMODE}.
      * <br>If not set this returns {@code 0}.
      *
-     * <p>Note that only {@link net.dv8tion.jda.api.AccountType#CLIENT CLIENT} type accounts are
-     * affected by slowmode, and that {@link net.dv8tion.jda.api.AccountType#BOT BOT} accounts
-     * are immune to the restrictions.
+     * <p>Note bots are unaffected by this.
      * <br>Having {@link net.dv8tion.jda.api.Permission#MESSAGE_MANAGE MESSAGE_MANAGE} or
      * {@link net.dv8tion.jda.api.Permission#MANAGE_CHANNEL MANAGE_CHANNEL} permission also
      * grants immunity to slowmode.

File: src/main/java/net/dv8tion/jda/api/events/guild/GuildBanEvent.java
Patch:
@@ -27,7 +27,7 @@
  * <p>Can be used to retrieve the user who was banned (if available) and triggering guild.
  * <br><b>Note</b>: This does not directly indicate that a Member is removed from the Guild!
  *
- * @see net.dv8tion.jda.api.events.guild.member.GuildMemberLeaveEvent GuildMemberLeaveEvent
+ * @see net.dv8tion.jda.api.events.guild.member.GuildMemberRemoveEvent GuildMemberRemoveEvent
  */
 public class GuildBanEvent extends GenericGuildEvent
 {

File: src/main/java/net/dv8tion/jda/api/events/guild/member/GuildMemberJoinEvent.java
Patch:
@@ -22,8 +22,6 @@
 
 /**
  * Indicates that a {@link net.dv8tion.jda.api.entities.Member Member} joined a {@link net.dv8tion.jda.api.entities.Guild Guild}.
- * <br>This event requires {@link net.dv8tion.jda.api.JDABuilder#setGuildSubscriptionsEnabled(boolean) guild subscriptions}
- * to be enabled.
  *
  * <p>Can be used to retrieve members who join a guild.
  */

File: src/main/java/net/dv8tion/jda/api/events/guild/member/GuildMemberRoleAddEvent.java
Patch:
@@ -25,8 +25,6 @@
 
 /**
  * Indicates that one or more {@link net.dv8tion.jda.api.entities.Role Roles} were assigned to a {@link net.dv8tion.jda.api.entities.Member Member}.
- * <br>This event requires {@link net.dv8tion.jda.api.JDABuilder#setGuildSubscriptionsEnabled(boolean) guild subscriptions}
- * to be enabled.
  *
  * <p>Can be used to retrieve affected member and guild. Provides a list of added roles.
  */

File: src/main/java/net/dv8tion/jda/api/events/guild/member/GuildMemberRoleRemoveEvent.java
Patch:
@@ -25,8 +25,6 @@
 
 /**
  * Indicates that one or more {@link net.dv8tion.jda.api.entities.Role Roles} were removed from a {@link net.dv8tion.jda.api.entities.Member Member}.
- * <br>This event requires {@link net.dv8tion.jda.api.JDABuilder#setGuildSubscriptionsEnabled(boolean) guild subscriptions}
- * to be enabled.
  *
  * <p>Can be used to retrieve affected member and guild. Provides a list of removed roles.
  */

File: src/main/java/net/dv8tion/jda/api/events/guild/member/update/GuildMemberUpdateBoostTimeEvent.java
Patch:
@@ -25,8 +25,6 @@
 
 /**
  * Indicates that a {@link net.dv8tion.jda.api.entities.Member Member} updated their {@link net.dv8tion.jda.api.entities.Guild Guild} boost time.
- * <br>This event requires {@link net.dv8tion.jda.api.JDABuilder#setGuildSubscriptionsEnabled(boolean) guild subscriptions}
- * to be enabled.
  * <br>This happens when a member started or stopped boosting a guild.
  *
  * <p>Can be used to retrieve members who boosted, triggering guild.

File: src/main/java/net/dv8tion/jda/api/events/guild/member/update/GuildMemberUpdateNicknameEvent.java
Patch:
@@ -24,8 +24,6 @@
 
 /**
  * Indicates that a {@link net.dv8tion.jda.api.entities.Member Member} updated their {@link net.dv8tion.jda.api.entities.Guild Guild} nickname.
- * <br>This event requires {@link net.dv8tion.jda.api.JDABuilder#setGuildSubscriptionsEnabled(boolean) guild subscriptions}
- * to be enabled.
  *
  * <p>Can be used to retrieve members who change their nickname, triggering guild, the old nick and the new nick.
  *

File: src/main/java/net/dv8tion/jda/api/events/user/UserActivityEndEvent.java
Patch:
@@ -27,8 +27,6 @@
 /**
  * Indicates that a {@link net.dv8tion.jda.api.entities.User User} has stopped an {@link Activity}
  * in a {@link Guild}.
- * <br>This event requires {@link net.dv8tion.jda.api.JDABuilder#setGuildSubscriptionsEnabled(boolean) guild subscriptions}
- * to be enabled.
  *
  * <p>This is fired for every {@link Guild} the user is part of. If the title of a stream
  * changes a start event is fired before an end event which will replace the activity.

File: src/main/java/net/dv8tion/jda/api/events/user/UserActivityStartEvent.java
Patch:
@@ -27,8 +27,6 @@
 /**
  * Indicates that a {@link net.dv8tion.jda.api.entities.User User} has started an {@link Activity}
  * in a {@link Guild}.
- * <br>This event requires {@link net.dv8tion.jda.api.JDABuilder#setGuildSubscriptionsEnabled(boolean) guild subscriptions}
- * to be enabled.
  *
  * <p>This is fired for every {@link Guild} the user is part of. If the title of a stream
  * changes a start event is fired before an end event which will replace the activity.

File: src/main/java/net/dv8tion/jda/api/events/user/UserTypingEvent.java
Patch:
@@ -24,8 +24,6 @@
 
 /**
  * Indicates that a {@link net.dv8tion.jda.api.entities.User User} started typing. (Similar to the typing indicator in the Discord client)
- * <br>This event requires {@link net.dv8tion.jda.api.JDABuilder#setGuildSubscriptionsEnabled(boolean) guild subscriptions}
- * to be enabled.
  *
  * <p>Can be used to retrieve the User who started typing and when and in which MessageChannel they started typing.
  */

File: src/main/java/net/dv8tion/jda/api/events/user/update/GenericUserPresenceEvent.java
Patch:
@@ -24,8 +24,6 @@
 
 /**
  * Indicates that the presence of a {@link net.dv8tion.jda.api.entities.User User} has changed.
- * <br>This event requires {@link net.dv8tion.jda.api.JDABuilder#setGuildSubscriptionsEnabled(boolean) guild subscriptions}
- * to be enabled.
  * <br>Users don't have presences directly, this is fired when a {@link net.dv8tion.jda.api.entities.Member Member} from a {@link net.dv8tion.jda.api.entities.Guild Guild}
  * changes their presence.
  *

File: src/main/java/net/dv8tion/jda/api/events/user/update/UserUpdateActivityOrderEvent.java
Patch:
@@ -27,8 +27,6 @@
 /**
  * Indicates that the {@link net.dv8tion.jda.api.entities.Activity Activity} order of a {@link net.dv8tion.jda.api.entities.User User} changes.
  * <br>As with any presence updates this happened for a {@link net.dv8tion.jda.api.entities.Member Member} in a Guild!
- * <br>This event requires {@link net.dv8tion.jda.api.JDABuilder#setGuildSubscriptionsEnabled(boolean) guild subscriptions} to be enabled.
- *
  * <p>Can be used to retrieve the User who changed their Activities and their previous Activities.
  *
  * <p>Identifier: {@code activity_order}

File: src/main/java/net/dv8tion/jda/api/events/user/update/UserUpdateAvatarEvent.java
Patch:
@@ -24,8 +24,6 @@
 
 /**
  * Indicates that the Avatar of a {@link net.dv8tion.jda.api.entities.User User} changed.
- * <br>This event requires {@link net.dv8tion.jda.api.JDABuilder#setGuildSubscriptionsEnabled(boolean) guild subscriptions}
- * to be enabled.
  *
  * <p>Can be used to retrieve the User who changed their avatar and their previous Avatar ID/URL.
  *

File: src/main/java/net/dv8tion/jda/api/events/user/update/UserUpdateDiscriminatorEvent.java
Patch:
@@ -23,8 +23,6 @@
 
 /**
  * Indicates that the discriminator of a {@link net.dv8tion.jda.api.entities.User User} changed.
- * <br>This event requires {@link net.dv8tion.jda.api.JDABuilder#setGuildSubscriptionsEnabled(boolean) guild subscriptions}
- * to be enabled.
  *
  * <p>Can be used to retrieve the User who changed their discriminator and their previous discriminator.
  *

File: src/main/java/net/dv8tion/jda/api/events/user/update/UserUpdateNameEvent.java
Patch:
@@ -23,8 +23,6 @@
 
 /**
  * Indicates that the username of a {@link net.dv8tion.jda.api.entities.User User} changed. (Not Nickname)
- * <br>This event requires {@link net.dv8tion.jda.api.JDABuilder#setGuildSubscriptionsEnabled(boolean) guild subscriptions}
- * to be enabled.
  *
  * <p>Can be used to retrieve the User who changed their username and their previous username.
  *

File: src/main/java/net/dv8tion/jda/api/events/user/update/UserUpdateOnlineStatusEvent.java
Patch:
@@ -20,15 +20,12 @@
 import net.dv8tion.jda.api.OnlineStatus;
 import net.dv8tion.jda.api.entities.Guild;
 import net.dv8tion.jda.api.entities.Member;
-import net.dv8tion.jda.api.entities.User;
 
 import javax.annotation.Nonnull;
 
 /**
  * Indicates that the {@link OnlineStatus OnlineStatus} of a {@link net.dv8tion.jda.api.entities.User User} changed.
  * <br>As with any presence updates this happened for a {@link net.dv8tion.jda.api.entities.Member Member} in a Guild!
- * <br>This event requires {@link net.dv8tion.jda.api.JDABuilder#setGuildSubscriptionsEnabled(boolean) guild subscriptions} to be enabled.
- *
  * <p>Can be used to retrieve the User who changed their status and their previous status.
  *
  * <p>Identifier: {@code status}

File: src/main/java/net/dv8tion/jda/api/managers/ChannelManager.java
Patch:
@@ -405,9 +405,7 @@ default ChannelManager sync()
      * <p>A channel slowmode <b>must not</b> be negative nor greater than {@link net.dv8tion.jda.api.entities.TextChannel#MAX_SLOWMODE TextChannel.MAX_SLOWMODE}!
      * <br><b>This is only available to {@link net.dv8tion.jda.api.entities.TextChannel TextChannels}</b>
      *
-     * <p>Note that only {@link net.dv8tion.jda.api.AccountType#CLIENT CLIENT} type accounts are
-     * affected by slowmode, and that {@link net.dv8tion.jda.api.AccountType#BOT BOT} accounts
-     * are immune to the restrictions.
+     * <p>Note: Bots are unaffected by this.
      * <br>Having {@link net.dv8tion.jda.api.Permission#MESSAGE_MANAGE MESSAGE_MANAGE} or
      * {@link net.dv8tion.jda.api.Permission#MANAGE_CHANNEL MANAGE_CHANNEL} permission also
      * grants immunity to slowmode.

File: src/main/java/net/dv8tion/jda/api/requests/CloseCode.java
Patch:
@@ -38,7 +38,9 @@ public enum CloseCode
     RATE_LIMITED(         4008, "Woah nelly! You're sending payloads to us too quickly. Slow it down!"),
     SESSION_TIMEOUT(      4009, "Your session timed out. Reconnect and start a new one."),
     INVALID_SHARD(        4010, "You sent an invalid shard when identifying.", false),
-    SHARDING_REQUIRED(    4011, "The session would have handled too many guilds - you are required to shard your connection in order to connect.", false);
+    SHARDING_REQUIRED(    4011, "The session would have handled too many guilds - you are required to shard your connection in order to connect.", false),
+    INVALID_INTENTS(      4013, "Invalid intents.", false),
+    DISALLOWED_INTENTS(   4014, "Disallowed intents. Your bot might not be eligible to request a privileged intent such as GUILD_PRESENCES or GUILD_MEMBERS.", false);
 
     private final int code;
     private final boolean isReconnect;

File: src/main/java/net/dv8tion/jda/api/requests/restaction/AuditableRestAction.java
Patch:
@@ -47,8 +47,7 @@ public interface AuditableRestAction<T> extends RestAction<T>
      * from {@link net.dv8tion.jda.api.entities.Guild#retrieveAuditLogs() Guild.retrieveAuditLogs()}!
      *
      * <p>This will specify the reason via the {@code X-Audit-Log-Reason} Request Header.
-     * <br><b>Note: This may not be available to accounts for {@link net.dv8tion.jda.api.AccountType#CLIENT AccountType.CLIENT}.
-     * <br>Using methods with a reason parameter will always work and <u>override</u> this header.</b>
+     * <br>Using methods with a reason parameter will always work and <u>override</u> this header.
      * (ct. {@link net.dv8tion.jda.api.entities.Guild#ban(net.dv8tion.jda.api.entities.User, int, String) Guild.ban(User, int, String)})
      *
      * @param  reason

File: src/main/java/net/dv8tion/jda/api/requests/restaction/ChannelAction.java
Patch:
@@ -156,9 +156,7 @@ public interface ChannelAction<T extends GuildChannel> extends AuditableRestActi
      * Sets the slowmode value, which limits the amount of time that individual users must wait
      * between sending messages in the new TextChannel. This is measured in seconds.
      *
-     * <p>Note that only {@link net.dv8tion.jda.api.AccountType#CLIENT CLIENT} type accounts are
-     * affected by slowmode, and that {@link net.dv8tion.jda.api.AccountType#BOT BOT} accounts
-     * are immune to the restrictions.
+     * <p>Note: Bots are unaffected by this.
      * <br>Having {@link net.dv8tion.jda.api.Permission#MESSAGE_MANAGE MESSAGE_MANAGE} or
      * {@link net.dv8tion.jda.api.Permission#MANAGE_CHANNEL MANAGE_CHANNEL} permission also
      * grants immunity to slowmode.

File: src/main/java/net/dv8tion/jda/api/requests/restaction/MessageAction.java
Patch:
@@ -124,7 +124,7 @@ public interface MessageAction extends RestAction<Message>, Appendable
      * @throws java.lang.IllegalArgumentException
      *         If the message contains an {@link net.dv8tion.jda.api.entities.MessageEmbed MessageEmbed}
      *         that exceeds the sendable character limit,
-     *         see {@link net.dv8tion.jda.api.entities.MessageEmbed#isSendable(net.dv8tion.jda.api.AccountType) MessageEmbed.isSendable(AccountType)}
+     *         see {@link net.dv8tion.jda.api.entities.MessageEmbed#isSendable() MessageEmbed.isSendable()}
      *
      * @return Updated MessageAction for chaining convenience
      */
@@ -205,7 +205,7 @@ public interface MessageAction extends RestAction<Message>, Appendable
      *
      * @throws java.lang.IllegalArgumentException
      *         If the provided MessageEmbed is not sendable according to
-     *         {@link net.dv8tion.jda.api.entities.MessageEmbed#isSendable(net.dv8tion.jda.api.AccountType) MessageEmbed.isSendable(AccountType)}!
+     *         {@link net.dv8tion.jda.api.entities.MessageEmbed#isSendable() MessageEmbed.isSendable()}!
      *         If the provided MessageEmbed is an unknown implementation this operation will fail as we are unable to deserialize it.
      *
      * @return Updated MessageAction for chaining convenience

File: src/main/java/net/dv8tion/jda/api/utils/SessionControllerAdapter.java
Patch:
@@ -109,7 +109,8 @@ public void handleResponse(Response response, Request<ShardedGateway> request)
                     }
                     else if (response.code == 401)
                     {
-                        api.verifyToken(true);
+                        api.shutdownNow();
+                        throw new LoginException("The provided token is invalid!");
                     }
                     else
                     {

File: src/main/java/net/dv8tion/jda/internal/handle/ChannelDeleteHandler.java
Patch:
@@ -159,8 +159,6 @@ protected Long handleInternally(DataObject content)
                 WebSocketClient.LOG.debug("CHANNEL_DELETE provided an unknown channel type. JSON: {}", content);
         }
         getJDA().getEventCache().clear(EventCache.Type.CHANNEL, channelId);
-        if (guild != null)
-            guild.pruneChannelOverrides(channelId);
         return null;
     }
 }

File: src/main/java/net/dv8tion/jda/internal/handle/GuildBanHandler.java
Patch:
@@ -49,7 +49,7 @@ protected Long handleInternally(DataObject content)
             return null;
         }
 
-        User user = getJDA().getEntityBuilder().createFakeUser(userJson, false);
+        User user = getJDA().getEntityBuilder().createFakeUser(userJson);
 
         if (banned)
         {

File: src/main/java/net/dv8tion/jda/internal/handle/GuildDeleteHandler.java
Patch:
@@ -120,7 +120,6 @@ protected Long handleInternally(DataObject content)
                 {
                     PrivateChannelImpl priv = (PrivateChannelImpl) user.getPrivateChannel();
                     user.setFake(true);
-                    priv.setFake(true);
                     getJDA().getFakeUserMap().put(user.getIdLong(), user);
                     getJDA().getFakePrivateChannelMap().put(priv.getIdLong(), priv);
                 }

File: src/main/java/net/dv8tion/jda/internal/handle/GuildMembersChunkHandler.java
Patch:
@@ -38,12 +38,14 @@ protected Long handleInternally(DataObject content)
         GuildImpl guild = (GuildImpl) getJDA().getGuildById(guildId);
         if (guild != null)
         {
+            if (api.getClient().getChunkManager().handleChunk(guildId, content))
+                return null;
             WebSocketClient.LOG.debug("Received member chunk for guild that is already in cache. GuildId: {} Count: {}", guildId, members.length());
             EntityBuilder builder = getJDA().getEntityBuilder();
             for (int i = 0; i < members.length(); i++)
             {
                 DataObject object = members.getObject(i);
-                builder.createMember(guild, object);
+                builder.updateMemberCache(builder.createMember(guild, object));
             }
             guild.acknowledgeMembers();
         }

File: src/main/java/net/dv8tion/jda/internal/handle/InviteCreateHandler.java
Patch:
@@ -70,7 +70,7 @@ protected Long handleInternally(DataObject content)
         Optional<DataObject> inviterJson = content.optObject("inviter");
         boolean expanded = maxUses != -1;
 
-        User inviter = inviterJson.map(json -> getJDA().getEntityBuilder().createFakeUser(json, false)).orElse(null);
+        User inviter = inviterJson.map(json -> getJDA().getEntityBuilder().createFakeUser(json)).orElse(null);
         InviteImpl.ChannelImpl channel = new InviteImpl.ChannelImpl(realChannel);
         InviteImpl.GuildImpl guild = new InviteImpl.GuildImpl(realGuild);
 

File: src/main/java/net/dv8tion/jda/internal/handle/PresenceUpdateHandler.java
Patch:
@@ -122,6 +122,7 @@ protected Long handleInternally(DataObject content)
         {
             OnlineStatus oldStatus = member.getOnlineStatus();
             member.setOnlineStatus(status);
+            getJDA().getEntityBuilder().updateMemberCache(member);
             getJDA().handleEvent(
                 new UserUpdateOnlineStatusEvent(
                     getJDA(), responseNumber,
@@ -190,6 +191,7 @@ private void handleActivities(List<Activity> newActivities, MemberImpl member)
         else
         {
             member.setActivities(newActivities);
+            getJDA().getEntityBuilder().updateMemberCache(member);
             oldActivities = new ArrayList<>(oldActivities); // create modifiable copy
             List<Activity> startedActivities = new ArrayList<>();
             for (Activity activity : newActivities)

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/PermissionOverrideActionImpl.java
Patch:
@@ -215,7 +215,7 @@ protected void handleSuccess(Response response, Request<PermissionOverride> requ
     {
         long id = permissionHolder.getIdLong();
         DataObject object = (DataObject) request.getRawBody();
-        PermissionOverrideImpl override = new PermissionOverrideImpl(channel, permissionHolder);
+        PermissionOverrideImpl override = new PermissionOverrideImpl(channel, id, isRole());
         override.setAllow(object.getLong("allow"));
         override.setDeny(object.getLong("deny"));
         //((AbstractChannelImpl<?,?>) channel).getOverrideMap().put(id, override); This is added by the event later

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/pagination/ReactionPaginationActionImpl.java
Patch:
@@ -103,7 +103,7 @@ protected void handleSuccess(Response response, Request<List<User>> request)
         {
             try
             {
-                final User user = builder.createFakeUser(array.getObject(i), false);
+                final User user = builder.createFakeUser(array.getObject(i));
                 users.add(user);
                 if (useCache)
                     cached.add(user);

File: src/main/java/net/dv8tion/jda/internal/utils/config/flags/ConfigFlag.java
Patch:
@@ -26,8 +26,7 @@ public enum ConfigFlag
     BULK_DELETE_SPLIT(true),
     SHUTDOWN_HOOK(true),
     MDC_CONTEXT(true),
-    AUTO_RECONNECT(true),
-    GUILD_SUBSCRIPTIONS(true);
+    AUTO_RECONNECT(true);
 
     private final boolean isDefault;
 

File: src/main/java/net/dv8tion/jda/internal/requests/ratelimit/BotRateLimiter.java
Patch:
@@ -419,9 +419,11 @@ public void run()
                     // The request went through so we can remove it
                     iterator.remove();
                 }
-                catch (Exception ex)
+                catch (Throwable ex)
                 {
                     log.error("Encountered exception trying to execute request", ex);
+                    if (ex instanceof Error)
+                        throw (Error) ex;
                     break;
                 }
             }

File: src/main/java/net/dv8tion/jda/internal/requests/WebSocketClient.java
Patch:
@@ -845,7 +845,7 @@ protected void onDispatch(DataObject raw)
                     long guildId = content.getLong("guild_id", 0L);
                     if (api.isUnavailable(guildId) && !type.equals("GUILD_CREATE") && !type.equals("GUILD_DELETE"))
                     {
-                        LOG.warn("Ignoring {} for unavailable guild with id {}. JSON: {}", type, guildId, content);
+                        LOG.debug("Ignoring {} for unavailable guild with id {}. JSON: {}", type, guildId, content);
                         break;
                     }
                     SocketHandler handler = handlers.get(type);

File: src/main/java/net/dv8tion/jda/internal/utils/compress/ZlibDecompressor.java
Patch:
@@ -56,7 +56,7 @@ private ByteArrayOutputStream getDecompressBuffer()
         // Check if the buffer has been collected by the GC or not
         ByteArrayOutputStream buffer = decompressBuffer.get();
         if (buffer == null) // create a ne buffer because the GC got it
-            decompressBuffer = newDecompressBuffer();
+            decompressBuffer = new SoftReference<>(buffer = new ByteArrayOutputStream(Math.min(1024, maxBufferSize)));
         return buffer;
     }
 

File: src/main/java/net/dv8tion/jda/api/requests/RestAction.java
Patch:
@@ -471,7 +471,8 @@ default <O> RestAction<O> map(@Nonnull Function<? super T, ? extends O> map)
      *
      * <p>This does not modify this instance but returns a new RestAction which will apply
      * the map function on successful execution. This will compute the result of both RestActions.
-     * <br>If the provided RestAction is {@code null} the queue callbacks will not be executed and the chain of execution ends.
+     * <br>The returned RestAction must not be null!
+     * To terminate the execution chain on a specific condition you can use {@link #flatMap(Predicate, Function)}.
      *
      * <h2>Example</h2>
      * <pre>{@code

File: src/main/java/net/dv8tion/jda/internal/requests/WebSocketClient.java
Patch:
@@ -788,7 +788,7 @@ protected void onDispatch(DataObject raw)
             {
                 final DataArray payload = raw.getArray("d");
                 final List<DataObject> converted = convertPresencesReplace(responseTotal, payload);
-                final PresenceUpdateHandler handler = getHandler("PRESENCE_UPDATE");
+                final SocketHandler handler = getHandler("PRESENCE_UPDATE");
                 LOG.trace("{} -> {}", type, payload);
                 for (DataObject o : converted)
                 {

File: src/main/java/net/dv8tion/jda/api/utils/SessionController.java
Patch:
@@ -257,7 +257,7 @@ interface SessionConnectNode
          *
          * @param  isLast
          *         True, if this is the last node in a queue worker.
-         *         When false this will not wait for the payload to be delivered.
+         *         When true this will not wait for the payload to be delivered.
          *
          * @throws InterruptedException
          *         If the calling thread is interrupted

File: src/main/java/net/dv8tion/jda/internal/entities/TextChannelImpl.java
Patch:
@@ -265,8 +265,9 @@ public String getTopic()
     }
 
     @Override
-    public boolean isNSFW() {
-        return nsfw || name.equals("nsfw") || name.startsWith("nsfw-");
+    public boolean isNSFW()
+    {
+        return nsfw;
     }
 
     @Override

File: src/main/java/net/dv8tion/jda/internal/entities/EntityBuilder.java
Patch:
@@ -1151,6 +1151,7 @@ public WebhookImpl createWebhook(DataObject object)
         final long guildId = object.getLong("guild_id");
         final long channelId = object.getLong("channel_id");
         final String token = object.getString("token", null);
+        final WebhookType type = WebhookType.fromKey(object.getInt("type", -1));
 
         TextChannel channel = getJDA().getTextChannelById(channelId);
         if (channel == null)
@@ -1183,7 +1184,7 @@ public WebhookImpl createWebhook(DataObject object)
             }
         }
         
-        return new WebhookImpl(channel, id)
+        return new WebhookImpl(channel, id, type)
                 .setToken(token)
                 .setOwner(owner == null ? null : channel.getGuild().getMember(owner))
                 .setUser(defaultUser);

File: src/main/java/net/dv8tion/jda/api/JDA.java
Patch:
@@ -49,6 +49,8 @@
 
 /**
  * The core of JDA. Acts as a registry system of JDA. All parts of the the API can be accessed starting from this class.
+ *
+ * @see JDABuilder
  */
 public interface JDA
 {

File: src/main/java/net/dv8tion/jda/api/JDABuilder.java
Patch:
@@ -642,7 +642,7 @@ public JDABuilder setAudioSendFactory(@Nullable IAudioSendFactory factory)
      *
      * @return The JDABuilder instance. Useful for chaining.
      *
-     * @see    net.dv8tion.jda.api.managers.Presence#setIdle(boolean) Presence#setIdle(boolean)
+     * @see    net.dv8tion.jda.api.managers.Presence#setIdle(boolean) Presence.setIdle(boolean)
      */
     @Nonnull
     public JDABuilder setIdle(boolean idle)
@@ -716,7 +716,7 @@ public JDABuilder setStatus(@Nonnull OnlineStatus status)
      *
      * @return The JDABuilder instance. Useful for chaining.
      *
-     * @see    net.dv8tion.jda.api.JDA#addEventListener(Object...) JDA.addEventListeners(Object...)
+     * @see    net.dv8tion.jda.api.JDA#addEventListener(Object...) JDA.addEventListener(Object...)
      */
     @Nonnull
     public JDABuilder addEventListeners(@Nonnull Object... listeners)
@@ -738,7 +738,7 @@ public JDABuilder addEventListeners(@Nonnull Object... listeners)
      *
      * @return The JDABuilder instance. Useful for chaining.
      *
-     * @see    net.dv8tion.jda.api.JDA#removeEventListener(Object...) JDA.removeEventListeners(Object...)
+     * @see    net.dv8tion.jda.api.JDA#removeEventListener(Object...) JDA.removeEventListener(Object...)
      */
     @Nonnull
     public JDABuilder removeEventListeners(@Nonnull Object... listeners)

File: src/main/java/net/dv8tion/jda/api/entities/ApplicationTeam.java
Patch:
@@ -25,6 +25,8 @@
 
 /**
  * Meta-data for the team of an application.
+ *
+ * @see ApplicationInfo#getTeam()
  */
 public interface ApplicationTeam extends ISnowflake
 {

File: src/main/java/net/dv8tion/jda/api/entities/GuildVoiceState.java
Patch:
@@ -24,6 +24,8 @@
 /**
  * Represents the voice state of a {@link net.dv8tion.jda.api.entities.Member Member} in a
  * {@link net.dv8tion.jda.api.entities.Guild Guild}.
+ *
+ * @see Member#getVoiceState()
  */
 public interface GuildVoiceState
 {

File: src/main/java/net/dv8tion/jda/api/entities/IPermissionHolder.java
Patch:
@@ -26,6 +26,9 @@
  * Marker for entities that hold Permissions within JDA
  *
  * @since 3.0
+ *
+ * @see Role
+ * @see Member
  */
 public interface IPermissionHolder extends ISnowflake
 {

File: src/main/java/net/dv8tion/jda/api/entities/MessageActivity.java
Patch:
@@ -20,6 +20,8 @@
 
 /**
  * Represents a {@link net.dv8tion.jda.api.entities.Message} activity.
+ *
+ * @see Message#getActivity()
  */
 public class MessageActivity
 {

File: src/main/java/net/dv8tion/jda/api/entities/MessageChannel.java
Patch:
@@ -71,6 +71,9 @@
  * <p>More information on formatting syntax can be found in the {@link java.util.Formatter format syntax documentation}!
  * <br><b>{@link net.dv8tion.jda.api.entities.TextChannel TextChannel} is a special case which uses {@link IMentionable#getAsMention() IMentionable.getAsMention()}
  * by default and uses the <code>#{@link #getName()}</code> format as <u>alternative</u></b>
+ *
+ * @see TextChannel
+ * @see PrivateChannel
  */
 public interface MessageChannel extends ISnowflake, Formattable
 {

File: src/main/java/net/dv8tion/jda/api/entities/MessageEmbed.java
Patch:
@@ -37,6 +37,9 @@
  * <br>A visual representation of an Embed can be found at:
  * <a href="https://raw.githubusercontent.com/DV8FromTheWorld/JDA/assets/assets/docs/embeds/01-Overview.png" target="_blank">Embed Overview</a>
  * <br>This class has many possibilities for null values, so be careful!
+ *
+ * @see EmbedBuilder
+ * @see Message#getEmbeds()
  */
 public class MessageEmbed implements SerializableData
 {

File: src/main/java/net/dv8tion/jda/api/entities/PrivateChannel.java
Patch:
@@ -23,6 +23,8 @@
 
 /**
  * Represents the connection used for direct messaging.
+ *
+ * @see User#openPrivateChannel()
  */
 public interface PrivateChannel extends MessageChannel, IFakeable
 {

File: src/main/java/net/dv8tion/jda/api/entities/RichPresence.java
Patch:
@@ -26,6 +26,8 @@
  * relevant to <a href="https://discordapp.com/developers/docs/rich-presence/best-practices" target="_blank">Rich Presence</a>.
  *
  * @since  3.4.0
+ *
+ * @see    Activity#asRichPresence()
  */
 public interface RichPresence extends Activity
 {

File: src/main/java/net/dv8tion/jda/api/entities/SelfUser.java
Patch:
@@ -15,6 +15,7 @@
  */
 package net.dv8tion.jda.api.entities;
 
+import net.dv8tion.jda.api.JDA;
 import net.dv8tion.jda.api.exceptions.AccountTypeException;
 import net.dv8tion.jda.api.managers.AccountManager;
 
@@ -23,6 +24,8 @@
 
 /**
  * Represents the currently logged in account.
+ *
+ * @see JDA#getSelfUser()
  */
 public interface SelfUser extends User
 {

File: src/main/java/net/dv8tion/jda/api/events/ExceptionEvent.java
Patch:
@@ -25,7 +25,7 @@
  * <br>For instance this is fired for events in internal WebSocket handling or audio threads.
  * This includes {@link java.lang.Error Errors} and {@link com.neovisionaries.ws.client.WebSocketException WebSocketExceptions}
  *
- * <p>It is not recommended to simply use this and print each event as some throwables where already logged
+ * <p>It is not recommended to simply use this and print each event as some throwables were already logged
  * by JDA. See {@link #isLogged()}.
  */
 public class ExceptionEvent extends Event

File: src/main/java/net/dv8tion/jda/api/hooks/EventListener.java
Patch:
@@ -28,8 +28,8 @@
  * <p><b>Examples: </b>
  * <br>
  * <code>
- *     JDA jda = new {@link net.dv8tion.jda.api.JDABuilder JDABuilder}(AccountType.BOT).{@link net.dv8tion.jda.api.JDABuilder#addEventListeners(Object...) addEventListeners(listeners)}.buildBlocking();<br>
- *     {@link net.dv8tion.jda.api.JDA#addEventListener(Object...) jda.addEventListeners(listeners)};
+ *     JDA jda = new {@link net.dv8tion.jda.api.JDABuilder JDABuilder}("token").{@link net.dv8tion.jda.api.JDABuilder#addEventListeners(Object...) addEventListeners(listeners)}.{@link net.dv8tion.jda.api.JDABuilder#build() build()};<br>
+ *     {@link net.dv8tion.jda.api.JDA#addEventListener(Object...) jda.addEventListener(listeners)};
  * </code>
  *
  * @see net.dv8tion.jda.api.hooks.ListenerAdapter

File: src/main/java/net/dv8tion/jda/internal/entities/GuildImpl.java
Patch:
@@ -545,8 +545,7 @@ public RestAction<Integer> retrievePrunableMemberCount(int days)
         if (!getSelfMember().hasPermission(Permission.KICK_MEMBERS))
             throw new InsufficientPermissionException(this, Permission.KICK_MEMBERS);
 
-        if (days < 1)
-            throw new IllegalArgumentException("Days amount must be at minimum 1 day.");
+        Checks.check(days >= 1 && days <= 30, "Provided %d days must be between 1 and 30.", days);
 
         Route.CompiledRoute route = Route.Guilds.PRUNABLE_COUNT.compile(getId()).withQueryParams("days", Integer.toString(days));
         return new RestActionImpl<>(getJDA(), route, (response, request) -> response.getObject().getInt("pruned"));
@@ -840,7 +839,7 @@ public AuditableRestAction<Integer> prune(int days)
     {
         checkPermission(Permission.KICK_MEMBERS);
 
-        Checks.check(days >= 1, "Days amount must be at minimum 1 day.");
+        Checks.check(days >= 1 && days <= 30, "Provided %d days must be between 1 and 30.", days);
 
         Route.CompiledRoute route = Route.Guilds.PRUNE_MEMBERS.compile(getId()).withQueryParams("days", Integer.toString(days));
         return new AuditableRestActionImpl<>(getJDA(), route, (response, request) -> response.getObject().getInt("pruned"));

File: src/main/java/net/dv8tion/jda/internal/managers/ChannelManagerImpl.java
Patch:
@@ -304,7 +304,7 @@ public ChannelManagerImpl setSlowmode(int slowmode)
     {
         if (getType() != ChannelType.TEXT)
             throw new IllegalStateException("Can only set slowmode on text channels");
-        Checks.check(slowmode <= 21600 && slowmode >= 0, "Slowmode per user must be between 0 and 21600 (seconds)!");
+        Checks.check(slowmode <= TextChannel.MAX_SLOWMODE && slowmode >= 0, "Slowmode per user must be between 0 and %d (seconds)!", TextChannel.MAX_SLOWMODE);
         this.slowmode = slowmode;
         set |= SLOWMODE;
         return this;

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/ChannelActionImpl.java
Patch:
@@ -146,7 +146,9 @@ public ChannelActionImpl<T> setNSFW(boolean nsfw)
     @CheckReturnValue
     public ChannelActionImpl<T> setSlowmode(int slowmode)
     {
-        Checks.check(slowmode <= 21600 && slowmode >= 0, "Slowmode must be between 0 and 21600 (seconds)!");
+        if (type != ChannelType.TEXT)
+            throw new UnsupportedOperationException("Can only set slowmode on text channels");
+        Checks.check(slowmode <= TextChannel.MAX_SLOWMODE && slowmode >= 0, "Slowmode must be between 0 and %d (seconds)!", TextChannel.MAX_SLOWMODE);
         this.slowmode = slowmode;
         return this;
     }

File: src/main/java/net/dv8tion/jda/api/entities/Member.java
Patch:
@@ -138,7 +138,7 @@ public interface Member extends IMentionable, IPermissionHolder
      * active when actually being {@code INVISIBLE}, since they will show as {@code OFFLINE}.
      * <br>If the Member is currently not active with any Client, this returns an empty Set.
      * <br>When {@link net.dv8tion.jda.api.utils.cache.CacheFlag#CLIENT_STATUS CacheFlag.CLIENT_STATUS} is disabled,
-     * active clients will not be tracked and this will always return an empty Set
+     * active clients will not be tracked and this will always return an empty Set.
      * <br>Since a user can be connected from multiple different devices such as web and mobile,
      * discord specifies a status for each {@link net.dv8tion.jda.api.entities.ClientType}.
      *

File: src/main/java/net/dv8tion/jda/internal/entities/MemberImpl.java
Patch:
@@ -131,6 +131,8 @@ public OnlineStatus getOnlineStatus(@Nonnull ClientType type)
     @Override
     public EnumSet<ClientType> getActiveClients()
     {
+        if (clientStatus == null)
+            return EnumSet.noneOf(ClientType.class);
         return EnumSet.copyOf(clientStatus.keySet());
     }
 

File: src/main/java/net/dv8tion/jda/api/entities/Guild.java
Patch:
@@ -212,10 +212,10 @@ default String getIconUrl()
      *     <li>COMMERCE - Guild can sell software through a store channel</li>
      *     <li>DISCOVERABLE - Guild shows up in discovery tab</li>
      *     <li>INVITE_SPLASH - Guild has custom invite splash. See {@link #getSplashId()} and {@link #getSplashUrl()}</li>
-     *     <li>LURKABLE - Guild allows users to lurk</li>
      *     <li>MORE_EMOJI - Guild is able to use more than 50 emoji</li>
      *     <li>NEWS - Guild can create news channels</li>
      *     <li>PARTNERED - Guild is "partnered"</li>
+     *     <li>PUBLIC - Guild is public</li>
      *     <li>VANITY_URL - Guild a vanity URL (custom invite link). See {@link #getVanityUrl()}</li>
      *     <li>VERIFIED - Guild is "verified"</li>
      *     <li>VIP_REGIONS - Guild has VIP voice regions</li>
@@ -405,7 +405,7 @@ default String getBannerUrl()
      */
     default int getMaxBitrate()
     {
-        int maxBitrate = getFeatures().contains("VIP_REGIONS") ? 96000 : 128000;
+        int maxBitrate = getFeatures().contains("VIP_REGIONS") ? 384000 : 96000;
         return Math.max(maxBitrate, getBoostTier().getMaxBitrate());
     }
 

File: src/main/java/net/dv8tion/jda/internal/requests/WebSocketClient.java
Patch:
@@ -647,6 +647,7 @@ protected void invalidate()
 
         api.getTextChannelsView().clear();
         api.getVoiceChannelsView().clear();
+        api.getStoreChannelsView().clear();
         api.getCategoriesView().clear();
         api.getGuildsView().clear();
         api.getUsersView().clear();

File: src/examples/java/MessageListenerExample.java
Patch:
@@ -66,7 +66,7 @@ public static void main(String[] args)
      *  a method from a super class properly. You should do this every time you override a method!
      *
      * As stated above, this method is overriding a hook method in the
-     * {@link net.dv8tion.jda.api.hooks.ListenerAdapter ListenerAdapter} class. It has convience methods for all JDA events!
+     * {@link net.dv8tion.jda.api.hooks.ListenerAdapter ListenerAdapter} class. It has convenience methods for all JDA events!
      * Consider looking through the events it offers if you plan to use the ListenerAdapter.
      *
      * In this example, when a message is received it is printed to the console.

File: src/main/java/net/dv8tion/jda/api/entities/MessageType.java
Patch:
@@ -84,7 +84,7 @@ public enum MessageType
     GUILD_BOOST_TIER_3(11),
 
     /**
-     * Specialized message used to announce when a croospost webhook is added to a channel
+     * Specialized message used to announce when a crosspost webhook is added to a channel
      */
     CHANNEL_FOLLOW_ADD(12),
 

File: src/main/java/net/dv8tion/jda/api/requests/restaction/GuildAction.java
Patch:
@@ -255,7 +255,7 @@ public interface GuildAction extends RestAction<Void>
      * Creates and add a new {@link RoleData RoleData} object
      * representing a Role for the resulting Guild.
      *
-     * <p>This can be used in {@link ChannelData#addPermissionOverride(RoleData, long, long) ChannelData.addPermissionOverride(...)}.
+     * <p>This can be used in {@link GuildAction.ChannelData#addPermissionOverride(GuildAction.RoleData, long, long) ChannelData.addPermissionOverride(...)}.
      * <br>You may change any properties of this {@link RoleData RoleData} instance!
      *
      * @return RoleData for the new Role
@@ -268,7 +268,7 @@ public interface GuildAction extends RestAction<Void>
      * Mutable object containing information on a {@link net.dv8tion.jda.api.entities.Role Role}
      * of the resulting {@link net.dv8tion.jda.api.entities.Guild Guild} that is constructed by a GuildAction instance
      *
-     * <p>This may be used in {@link ChannelData#addPermissionOverride(RoleData, long, long)}  ChannelData.addPermissionOverride(...)}!
+     * <p>This may be used in {@link GuildAction.ChannelData#addPermissionOverride(GuildAction.RoleData, long, long)}  ChannelData.addPermissionOverride(...)}!
      */
     class RoleData implements SerializableData
     {

File: src/main/java/net/dv8tion/jda/api/sharding/DefaultShardManagerBuilder.java
Patch:
@@ -88,7 +88,7 @@ public DefaultShardManagerBuilder() {}
 
     /**
      * Creates a DefaultShardManagerBuilder with the given token.
-     * <br>This is equivalent to using the constuctor
+     * <br>This is equivalent to using the constructor
      * {@link #DefaultShardManagerBuilder() DefaultShardManagerBuilder()}
      * and calling {@link #setToken(String) setToken(String)}
      * directly afterward. You can always change the token later with

File: src/main/java/net/dv8tion/jda/internal/entities/ReceivedMessage.java
Patch:
@@ -174,7 +174,7 @@ public long getIdLong()
     @Override
     public String getJumpUrl()
     {
-        return String.format("https://discordapp.com/channels/%s/%s/%s", getGuild() == null ? "@me" : getGuild().getId(), getChannel().getId(), getId());
+        return String.format("https://discordapp.com/channels/%s/%s/%s", isFromGuild() ? getGuild().getId() : "@me", getChannel().getId(), getId());
     }
 
     private User matchUser(Matcher matcher)

File: src/test/java/MarkdownUtilTest.java
Patch:
@@ -25,7 +25,7 @@ public class MarkdownUtilTest
     public void testBold()
     {
         Assertions.assertEquals("**Hello World**", bold("Hello World"));
-        Assertions.assertEquals("**Hello \\**Test\\** World**", bold("Hello **Test** World"));
+        Assertions.assertEquals("**Hello \\*\\*Test\\*\\* World**", bold("Hello **Test** World"));
         Assertions.assertEquals("**Hello *Test* World**", bold("Hello *Test* World"));
     }
 

File: src/main/java/net/dv8tion/jda/internal/requests/Requester.java
Patch:
@@ -260,7 +260,8 @@ private void applyBody(Request<?> apiRequest, okhttp3.Request.Builder builder)
     private void applyHeaders(Request<?> apiRequest, okhttp3.Request.Builder builder, boolean authorized)
     {
         builder.header("user-agent", USER_AGENT)
-               .header("accept-encoding", "gzip");
+               .header("accept-encoding", "gzip")
+               .header("x-ratelimit-precision", "millisecond");
 
         //adding token to all requests to the discord api or cdn pages
         //we can check for startsWith(DISCORD_API_PREFIX) because the cdn endpoints don't need any kind of authorization

File: src/main/java/net/dv8tion/jda/internal/utils/config/flags/ConfigFlag.java
Patch:
@@ -21,6 +21,7 @@
 public enum ConfigFlag
 {
     RAW_EVENTS,
+    USE_RELATIVE_RATELIMIT(true),
     RETRY_TIMEOUT(true),
     BULK_DELETE_SPLIT(true),
     SHUTDOWN_HOOK(true),

File: src/main/java/net/dv8tion/jda/api/JDA.java
Patch:
@@ -1467,7 +1467,7 @@ default Emote getEmoteById(long id)
      * <p><b>Unicode emojis are not included as {@link net.dv8tion.jda.api.entities.Emote Emote}!</b>
      *
      * @param  name
-     *         The name of the requested {@link net.dv8tion.jda.api.entities.Emote Emotes}.
+     *         The name of the requested {@link net.dv8tion.jda.api.entities.Emote Emotes}. Without colons.
      * @param  ignoreCase
      *         Whether to ignore case or not when comparing the provided name to each {@link
      *         net.dv8tion.jda.api.entities.Emote#getName()}.

File: src/main/java/net/dv8tion/jda/api/entities/Emote.java
Patch:
@@ -104,7 +104,8 @@ default boolean hasRoles()
     boolean canProvideRoles();
 
     /**
-     * The name of this emote
+     * The name of this emote.
+     * <br>Does not include colons.
      *
      * @return String representation of this emote's name
      */

File: src/main/java/net/dv8tion/jda/api/entities/Guild.java
Patch:
@@ -1466,11 +1466,11 @@ default List<Emote> getEmotes()
      * <p><b>Unicode emojis are not included as {@link net.dv8tion.jda.api.entities.Emote Emote}!</b>
      *
      * @param  name
-     *         The name used to filter the returned {@link net.dv8tion.jda.api.entities.Emote Emotes}.
+     *         The name used to filter the returned {@link net.dv8tion.jda.api.entities.Emote Emotes}. Without colons.
      * @param  ignoreCase
      *         Determines if the comparison ignores case when comparing. True - case insensitive.
      *
-     * @return Possibly-empty immutable list of all Role names that match the provided name.
+     * @return Possibly-empty immutable list of all Emotes that match the provided name.
      */
     @Nonnull
     default List<Emote> getEmotesByName(@Nonnull String name, boolean ignoreCase)

File: src/main/java/net/dv8tion/jda/api/events/DisconnectEvent.java
Patch:
@@ -27,10 +27,10 @@
  * Indicates that JDA has been disconnected from the remote server.
  * <br>When this event is fired JDA will try to reconnect if possible
  * unless {@link net.dv8tion.jda.api.JDABuilder#setAutoReconnect(boolean) JDABuilder.setAutoReconnect(Boolean)}
- * has been provided {@code false} or the disconnect was too fatal.
+ * has been provided {@code false} or the disconnect was too fatal in which case a {@link ShutdownEvent} is fired.
  *
  * <p>When reconnecting was successful either a {@link net.dv8tion.jda.api.events.ReconnectedEvent ReconnectEvent}
- * or a {@link net.dv8tion.jda.api.events.ResumedEvent ResumedEvent} is fired.
+ * <b>or</b> {@link net.dv8tion.jda.api.events.ResumedEvent ResumedEvent} is fired.
  */
 public class DisconnectEvent extends Event
 {

File: src/main/java/net/dv8tion/jda/api/events/guild/GuildAvailableEvent.java
Patch:
@@ -23,6 +23,7 @@
 
 /**
  * Indicates that a {@link net.dv8tion.jda.api.entities.Guild Guild} became available.
+ * <br>This is fired when a guild that was previously marked as unavailable by a {@link GuildUnavailableEvent} has become available again.
  *
  * <p>Can be used to detect that a Guild will now start sending events and can be interacted with.
  */

File: src/main/java/net/dv8tion/jda/api/events/guild/GuildUnavailableEvent.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * Indicates that a {@link net.dv8tion.jda.api.entities.Guild Guild} became unavailable.
- * <br>Possibly due to a downtime or an outage.
+ * <br>Possibly due to a downtime or an outage. When it becomes available again a {@link GuildAvailableEvent} will be fired.
  *
  * <p>Can be used to detect that a Guild stopped responding.
  */

File: src/main/java/net/dv8tion/jda/api/events/user/update/UserUpdateActivityOrderEvent.java
Patch:
@@ -26,7 +26,7 @@
 
 /**
  * Indicates that the {@link net.dv8tion.jda.api.entities.Activity Activity} order of a {@link net.dv8tion.jda.api.entities.User User} changes.
- * <br>As with any presence updates this either happened for a {@link net.dv8tion.jda.api.entities.Member Member} in a Guild!
+ * <br>As with any presence updates this happened for a {@link net.dv8tion.jda.api.entities.Member Member} in a Guild!
  *
  * <p>Can be used to retrieve the User who changed their Activities and their previous Activities.
  *

File: src/main/java/net/dv8tion/jda/api/events/user/update/UserUpdateOnlineStatusEvent.java
Patch:
@@ -26,7 +26,7 @@
 
 /**
  * Indicates that the {@link OnlineStatus OnlineStatus} of a {@link net.dv8tion.jda.api.entities.User User} changed.
- * <br>As with any presence updates this either happened for a {@link net.dv8tion.jda.api.entities.Member Member} in a Guild !
+ * <br>As with any presence updates this happened for a {@link net.dv8tion.jda.api.entities.Member Member} in a Guild !
  *
  * <p>Can be used to retrieve the User who changed their status and their previous status.
  *

File: src/main/java/net/dv8tion/jda/api/hooks/ListenerAdapter.java
Patch:
@@ -83,10 +83,10 @@
 
 /**
  * An abstract implementation of {@link net.dv8tion.jda.api.hooks.EventListener EventListener} which divides {@link net.dv8tion.jda.api.events.Event Events}
- * for you.
+ * for you. You should <b><u>override</u></b> the methods provided by this class for your event listener implementation.
  *
- * <p><b>Example:</b>
- * <br><pre><code>
+ * <h2>Example:</h2>
+ * <pre><code>
  * public class MyReadyListener extends ListenerAdapter
  * {
  *    {@literal @Override}

File: src/main/java/net/dv8tion/jda/api/sharding/ShardManager.java
Patch:
@@ -370,7 +370,7 @@ default List<Emote> getEmotes()
      * <p><b>Unicode emojis are not included as {@link net.dv8tion.jda.api.entities.Emote Emote}!</b>
      *
      * @param  name
-     *         The name of the requested {@link net.dv8tion.jda.api.entities.Emote Emotes}.
+     *         The name of the requested {@link net.dv8tion.jda.api.entities.Emote Emotes}. Without colons.
      * @param  ignoreCase
      *         Whether to ignore case or not when comparing the provided name to each {@link
      *         net.dv8tion.jda.api.entities.Emote#getName()}.

File: src/main/java/net/dv8tion/jda/internal/audio/AudioPacket.java
Patch:
@@ -168,7 +168,7 @@ protected ByteBuffer asEncryptedPacket(TweetNaclFast.SecretBox boxer, ByteBuffer
         // so we need to create a 24 byte array, and copy the nonce into it.
         // we will leave the extra bytes as nulls. (Java sets non-populated bytes as 0).
         byte[] extendedNonce = nonce;
-        if (nonce == null)
+        if (nlen == 0) // this means the header is the nonce!
             extendedNonce = getNoncePadded();
 
         //Create our SecretBox encoder with the secretKey provided by Discord.
@@ -182,7 +182,7 @@ protected ByteBuffer asEncryptedPacket(TweetNaclFast.SecretBox boxer, ByteBuffer
         if (capacity > buffer.remaining())
             buffer = ByteBuffer.allocate(capacity);
         populateBuffer(seq, timestamp, ssrc, ByteBuffer.wrap(encryptedAudio), buffer);
-        if (nonce != null)
+        if (nlen > 0) // this means we append the nonce to the payload
             buffer.put(nonce, 0, nlen);
 
         ((Buffer) buffer).flip();

File: src/main/java/net/dv8tion/jda/internal/requests/Requester.java
Patch:
@@ -193,6 +193,8 @@ private void attemptRequest(CompletableFuture<Long> task, okhttp3.Request reques
             if (!rays.isEmpty())
                 LOG.debug("Received response with following cf-rays: {}", rays);
 
+            LOG.trace("Finished Request {} {} with code {}", route.getMethod(), response.request().url(), response.code());
+
             if (retryAfter == null)
                 apiRequest.handleResponse(new Response(response, -1, rays));
             else if (handleOnRatelimit)
@@ -246,6 +248,7 @@ public CompletableFuture<Long> execute(Request<?> apiRequest, boolean handleOnRa
             for (okhttp3.Response r : responses)
                 r.close();
         });
+        LOG.trace("Executing request {} {}", apiRequest.getRoute().getMethod(), url);
         // Initialize state-machine
         attemptRequest(task, request, responses, rays, apiRequest, url, handleOnRatelimit, false, 0);
         return task;

File: src/main/java/net/dv8tion/jda/api/entities/MessageChannel.java
Patch:
@@ -335,6 +335,7 @@ default List<CompletableFuture<Void>> purgeMessagesById(@Nonnull long... message
      * @see net.dv8tion.jda.api.MessageBuilder
      */
     @Nonnull
+    @CheckReturnValue
     default MessageAction sendMessage(@Nonnull CharSequence text)
     {
         Checks.notEmpty(text, "Provided text for message");

File: src/main/java/net/dv8tion/jda/api/entities/GuildChannel.java
Patch:
@@ -189,7 +189,7 @@ public interface GuildChannel extends ISnowflake, Comparable<GuildChannel>
      *     <br>The channel could not be created due to a permission discrepancy</li>
      *
      *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS MISSING_ACCESS}
-     *     <br>We were removed from the Guild before finishing the task</li>
+     *     <br>The {@link net.dv8tion.jda.api.Permission#VIEW_CHANNEL VIEW_CHANNEL} permission was removed</li>
      * </ul>
      *
      * @param  guild
@@ -226,7 +226,7 @@ public interface GuildChannel extends ISnowflake, Comparable<GuildChannel>
      *     <br>The channel could not be created due to a permission discrepancy</li>
      *
      *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS MISSING_ACCESS}
-     *     <br>We were removed from the Guild before finishing the task</li>
+     *     <br>The {@link net.dv8tion.jda.api.Permission#VIEW_CHANNEL VIEW_CHANNEL} permission was removed</li>
      * </ul>
      *
      * @throws net.dv8tion.jda.api.exceptions.PermissionException

File: src/main/java/net/dv8tion/jda/api/entities/TextChannel.java
Patch:
@@ -112,7 +112,7 @@ public interface TextChannel extends GuildChannel, MessageChannel, IMentionable
      *     <br>The webhook could not be created due to a permission discrepancy</li>
      *
      *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS MISSING_ACCESS}
-     *     <br>We were removed from the Guild before finishing the task</li>
+     *     <br>The {@link net.dv8tion.jda.api.Permission.VIEW_CHANNEL VIEW_CHANNEL} permission was removed</li>
      * </ul>
      *
      * @param  name

File: src/main/java/net/dv8tion/jda/internal/handle/MessageUpdateHandler.java
Patch:
@@ -58,7 +58,7 @@ protected Long handleInternally(DataObject content)
                     case DEFAULT:
                         return handleMessage(content);
                     default:
-                        WebSocketClient.LOG.debug("JDA received a message of unknown type. Type: {} JSON: {}", type, content);
+                        WebSocketClient.LOG.debug("JDA received a message update for an unexpected message type. Type: {} JSON: {}", type, content);
                         return null;
                 }
             }

File: src/main/java/net/dv8tion/jda/api/entities/MessageChannel.java
Patch:
@@ -1777,7 +1777,7 @@ default RestAction<Void> addReactionById(@Nonnull String messageId, @Nonnull Str
             encoded = EncodingUtil.encodeCodepointsUTF8(unicode);
         else
             encoded = EncodingUtil.encodeUTF8(unicode);
-        Route.CompiledRoute route = Route.Messages.ADD_REACTION.compile(getId(), messageId, encoded);
+        Route.CompiledRoute route = Route.Messages.ADD_REACTION.compile(getId(), messageId, encoded, "@me");
         return new RestActionImpl<>(getJDA(), route);
     }
 
@@ -1918,7 +1918,7 @@ default RestAction<Void> addReactionById(@Nonnull String messageId, @Nonnull Emo
         Checks.isSnowflake(messageId, "Message ID");
         Checks.notNull(emote, "Emote");
 
-        Route.CompiledRoute route = Route.Messages.ADD_REACTION.compile(getId(), messageId, String.format("%s:%s", emote.getName(), emote.getId()));
+        Route.CompiledRoute route = Route.Messages.ADD_REACTION.compile(getId(), messageId, String.format("%s:%s", emote.getName(), emote.getId()), "@me");
         return new RestActionImpl<Void>(getJDA(), route);
     }
 

File: src/main/java/net/dv8tion/jda/api/entities/Category.java
Patch:
@@ -50,6 +50,8 @@ public interface Category extends GuildChannel
      * listed for this Category
      *
      * @return Immutable list of all child StoreChannels
+     *
+     * @since  4.0.0
      */
     @Nonnull
     List<StoreChannel> getStoreChannels();

File: src/main/java/net/dv8tion/jda/api/entities/MessageEmbed.java
Patch:
@@ -267,7 +267,7 @@ public ImageInfo getImage()
      * to determine if it will fall in-line with other fields. If the embed contains no
      * fields, an empty list will be returned.
      *
-     * @return Never-null (but possibly empty) List of {@link net.dv8tion.jda.api.entities.MessageEmbed.Field Field} objects
+     * @return Never-null (but possibly empty) immutable  List of {@link net.dv8tion.jda.api.entities.MessageEmbed.Field Field} objects
      *         containing field information.
      */
     @Nonnull

File: src/main/java/net/dv8tion/jda/api/entities/StoreChannel.java
Patch:
@@ -18,5 +18,7 @@
 
 /**
  * Represents a Discord Store GuildChannel.
+ *
+ * @since  4.0.0
  */
 public interface StoreChannel extends GuildChannel {}

File: src/main/java/net/dv8tion/jda/api/entities/TextChannel.java
Patch:
@@ -96,7 +96,7 @@ public interface TextChannel extends GuildChannel, MessageChannel, IMentionable
      * </ul>
      *
      * @return {@link net.dv8tion.jda.api.requests.RestAction} - Type: List{@literal <}{@link net.dv8tion.jda.api.entities.Webhook Webhook}{@literal >}
-     *         <br>An immutable list of Webhook attached to this channel
+     *         <br>Retrieved an immutable list of Webhooks attached to this channel
      */
     @Nonnull
     @CheckReturnValue

File: src/main/java/net/dv8tion/jda/api/hooks/VoiceDispatchInterceptor.java
Patch:
@@ -32,6 +32,8 @@
  * <br>This will make it impossible to connect to voice channels with
  * the built-in {@link net.dv8tion.jda.api.managers.AudioManager AudioManager}.
  * It is expected that the user has some other means of establishing voice connections when this is used.
+ *
+ * @since  4.0.0
  */
 public interface VoiceDispatchInterceptor
 {

File: src/main/java/net/dv8tion/jda/api/utils/ClosableIterator.java
Patch:
@@ -37,6 +37,8 @@
  *
  * @param <T>
  *        The element type
+ *
+ * @since  4.0.0
  */
 public interface ClosableIterator<T> extends Iterator<T>, AutoCloseable
 {

File: src/main/java/net/dv8tion/jda/api/utils/LockIterator.java
Patch:
@@ -46,6 +46,8 @@
  *
  * @param <T>
  *        The element type for this iterator
+ *
+ * @since  4.0.0
  */
 public class LockIterator<T> implements ClosableIterator<T>
 {

File: src/main/java/net/dv8tion/jda/api/utils/MarkdownSanitizer.java
Patch:
@@ -28,6 +28,8 @@
  * Implements and algorithm that can strip or replace markdown in any supplied string.
  *
  * @see #sanitize(String, net.dv8tion.jda.api.utils.MarkdownSanitizer.SanitizationStrategy)
+ *
+ * @since  4.0.0
  */
 public class MarkdownSanitizer
 {

File: src/main/java/net/dv8tion/jda/api/utils/cache/SnowflakeCacheView.java
Patch:
@@ -19,6 +19,7 @@
 import net.dv8tion.jda.api.entities.ISnowflake;
 import net.dv8tion.jda.api.utils.MiscUtil;
 
+import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 
 /**
@@ -53,7 +54,7 @@ public interface SnowflakeCacheView<T extends ISnowflake> extends CacheView<T>
      * @return Possibly-null entity for the specified ID
      */
     @Nullable
-    default T getElementById(@Nullable String id)
+    default T getElementById(@Nonnull String id)
     {
         return getElementById(MiscUtil.parseSnowflake(id));
     }

File: src/main/java/net/dv8tion/jda/api/utils/concurrent/DelayedCompletableFuture.java
Patch:
@@ -26,6 +26,8 @@
  * @param <T>
  *        The result type
  *
+ * @since  4.0.0
+ *
  * @see    CompletableFuture
  * @see    Delayed
  */

File: src/main/java/net/dv8tion/jda/internal/entities/PrivateChannelImpl.java
Patch:
@@ -132,13 +132,15 @@ public MessageAction sendMessage(@Nonnull CharSequence text)
         return PrivateChannel.super.sendMessage(text);
     }
 
+    @Nonnull
     @Override
     public MessageAction sendMessage(@Nonnull MessageEmbed embed)
     {
         checkBot();
         return PrivateChannel.super.sendMessage(embed);
     }
 
+    @Nonnull
     @Override
     public MessageAction sendMessage(@Nonnull Message msg)
     {

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/AuditableRestActionImpl.java
Patch:
@@ -68,6 +68,7 @@ public AuditableRestActionImpl(JDA api, Route.CompiledRoute route, RequestBody d
         super(api, route, data, handler);
     }
 
+    @Nonnull
     @Override
     @SuppressWarnings("unchecked")
     public AuditableRestAction<T> setCheck(BooleanSupplier checks)

File: src/main/java/net/dv8tion/jda/internal/utils/compress/Decompressor.java
Patch:
@@ -20,6 +20,7 @@
 import net.dv8tion.jda.internal.utils.JDALogger;
 import org.slf4j.Logger;
 
+import javax.annotation.Nullable;
 import java.util.zip.DataFormatException;
 
 public interface Decompressor
@@ -32,5 +33,6 @@ public interface Decompressor
 
     void shutdown();
 
+    @Nullable // returns null when the decompression isn't done, for example when no Z_SYNC_FLUSH was present
     String decompress(byte[] data) throws DataFormatException;
 }

File: src/main/java/net/dv8tion/jda/api/audio/OpusPacket.java
Patch:
@@ -238,6 +238,6 @@ public boolean equals(Object obj)
         OpusPacket other = (OpusPacket) obj;
         return getSequence() == other.getSequence()
             && getTimestamp() == other.getTimestamp()
-            && getSsrc() == other.getSsrc();
+            && getSSRC() == other.getSSRC();
     }
 }

File: src/main/java/net/dv8tion/jda/api/audio/factory/DefaultSendSystem.java
Patch:
@@ -27,7 +27,7 @@
 import java.net.SocketException;
 import java.util.concurrent.ConcurrentMap;
 
-import static net.dv8tion.jda.internal.audio.AudioConnection.OPUS_FRAME_TIME_AMOUNT;
+import static net.dv8tion.jda.api.audio.OpusPacket.OPUS_FRAME_TIME_AMOUNT;
 
 /**
  * The default implementation of the {@link net.dv8tion.jda.api.audio.factory.IAudioSendSystem IAudioSendSystem}.

File: src/main/java/net/dv8tion/jda/internal/requests/WebSocketClient.java
Patch:
@@ -43,6 +43,7 @@
 import net.dv8tion.jda.internal.handle.*;
 import net.dv8tion.jda.internal.managers.AudioManagerImpl;
 import net.dv8tion.jda.internal.managers.PresenceImpl;
+import net.dv8tion.jda.internal.utils.IOUtil;
 import net.dv8tion.jda.internal.utils.JDALogger;
 import net.dv8tion.jda.internal.utils.UnlockHook;
 import net.dv8tion.jda.internal.utils.cache.AbstractCacheView;

File: src/main/java/net/dv8tion/jda/api/entities/Guild.java
Patch:
@@ -2748,7 +2748,7 @@ default AuditableRestAction<Void> unban(@Nonnull User user)
      *     List<Role> pleb = guild.getRolesByName("Pleb", true); // remove all roles named "pleb"
      *     List<Role> knight = guild.getRolesByName("Knight", true); // add all roles named "knight"
      *     // update roles in single request
-     *     guild.modifyMemberRoles(member, pleb, knight).queue();
+     *     guild.modifyMemberRoles(member, knight, pleb).queue();
      * }
      * }</pre>
      *

File: src/main/java/net/dv8tion/jda/api/entities/Member.java
Patch:
@@ -120,7 +120,7 @@ public interface Member extends IMentionable, IPermissionHolder
      * Returns the current nickname of this Member for the parent Guild.
      *
      * <p>This can be changed using
-     * {@link net.dv8tion.jda.api.managers.GuildController#setNickname(Member, String) GuildController.setNickname(Member, String)}.
+     * {@link net.dv8tion.jda.api.entities.Guild#modifyNickname(Member, String) GuildController.modifyNickname(Member, String)}.
      *
      * @return The nickname or null, if no nickname is set.
      */
@@ -141,7 +141,7 @@ public interface Member extends IMentionable, IPermissionHolder
      * and the lowest at the last index.
      *
      * <p>A Member's roles can be changed using the <b>addRolesToMember</b>, <b>removeRolesFromMember</b>, and <b>modifyMemberRoles</b>
-     * methods in {@link net.dv8tion.jda.api.managers.GuildController GuildController}.
+     * methods in {@link net.dv8tion.jda.api.entities.Guild Guild}.
      *
      * <p><b>The Public Role ({@code @everyone}) is not included in the returned immutable list of roles
      * <br>It is implicit that every member holds the Public Role in a Guild thus it is not listed here!</b>

File: src/main/java/net/dv8tion/jda/api/managers/ChannelManager.java
Patch:
@@ -348,7 +348,7 @@ default ChannelManager sync()
      * Sets the <b><u>position</u></b> of the selected {@link net.dv8tion.jda.api.entities.GuildChannel GuildChannel}.
      *
      * <p><b>To modify multiple channels you should use
-     * <code>Guild.{@link net.dv8tion.jda.api.managers.GuildController getController()}.{@link GuildController#modifyTextChannelPositions() modifyTextChannelPositions()}</code>
+     * <code>Guild.{@link net.dv8tion.jda.api.entities.Guild#modifyTextChannelPositions() modifyTextChannelPositions()}</code>
      * instead! This is not the same as looping through channels and using this to update positions!</b>
      *
      * @param  position

File: src/main/java/net/dv8tion/jda/api/requests/ErrorResponse.java
Patch:
@@ -48,6 +48,7 @@ public enum ErrorResponse
     MAX_ROLES_PER_GUILD(30005, "Maximum number of guild roles reached (250)"),
     TOO_MANY_REACTIONS( 30010, "Too many reactions"),
     UNAUTHORIZED(       40001, "Unauthorized"),
+    USER_NOT_CONNECTED( 40032, "Target user is not connected to voice."),
     MISSING_ACCESS(     50001, "Missing Access"),
     INVALID_ACCOUNT_TYPE(50002,"Invalid Account Type"),
     INVALID_DM_ACTION(  50003, "Cannot execute action on a DM channel"),

File: src/main/java/net/dv8tion/jda/api/requests/restaction/AuditableRestAction.java
Patch:
@@ -49,7 +49,7 @@ public interface AuditableRestAction<T> extends RestAction<T>
      * <p>This will specify the reason via the {@code X-Audit-Log-Reason} Request Header.
      * <br><b>Note: This may not be available to accounts for {@link net.dv8tion.jda.api.AccountType#CLIENT AccountType.CLIENT}.
      * <br>Using methods with a reason parameter will always work and <u>override</u> this header.</b>
-     * (ct. {@link net.dv8tion.jda.api.managers.GuildController#ban(net.dv8tion.jda.api.entities.User, int, String) GuildController.ban(User, int, String)})
+     * (ct. {@link net.dv8tion.jda.api.entities.Guild#ban(net.dv8tion.jda.api.entities.User, int, String) GuildController.ban(User, int, String)})
      *
      * @param  reason
      *         The reason for this action which should be logged in the Guild's AuditLogs

File: src/main/java/net/dv8tion/jda/api/requests/restaction/RoleAction.java
Patch:
@@ -19,7 +19,6 @@
 import net.dv8tion.jda.api.Permission;
 import net.dv8tion.jda.api.entities.Guild;
 import net.dv8tion.jda.api.entities.Role;
-import net.dv8tion.jda.api.managers.GuildController;
 import net.dv8tion.jda.internal.utils.Checks;
 
 import javax.annotation.CheckReturnValue;
@@ -36,8 +35,8 @@
  *
  * @since  3.0
  *
- * @see    net.dv8tion.jda.api.managers.GuildController
- * @see    GuildController#createRole()
+ * @see    net.dv8tion.jda.api.entities.Guild
+ * @see    net.dv8tion.jda.api.entities.Guild#createRole()
  * @see    Role#createCopy()
  * @see    Role#createCopy(Guild)
  */

File: src/main/java/net/dv8tion/jda/api/requests/restaction/order/RoleOrderAction.java
Patch:
@@ -18,7 +18,6 @@
 
 import net.dv8tion.jda.api.entities.Guild;
 import net.dv8tion.jda.api.entities.Role;
-import net.dv8tion.jda.api.managers.GuildController;
 
 import javax.annotation.Nonnull;
 
@@ -35,8 +34,8 @@
  *
  * @since 3.0
  *
- * @see   GuildController#modifyRolePositions()
- * @see   GuildController#modifyRolePositions(boolean)
+ * @see   net.dv8tion.jda.api.entities.Guild#modifyRolePositions()
+ * @see   net.dv8tion.jda.api.entities.Guild#modifyRolePositions(boolean)
  */
 public interface RoleOrderAction extends OrderAction<Role, RoleOrderAction>
 {

File: src/main/java/net/dv8tion/jda/internal/entities/RoleImpl.java
Patch:
@@ -202,7 +202,7 @@ public Guild getGuild()
     public RoleAction createCopy(@Nonnull Guild guild)
     {
         Checks.notNull(guild, "Guild");
-        return guild.getController().createRole()
+        return guild.createRole()
                     .setColor(color)
                     .setHoisted(hoisted)
                     .setMentionable(mentionable)

File: src/main/java/net/dv8tion/jda/internal/entities/TextChannelImpl.java
Patch:
@@ -298,7 +298,7 @@ public int getPosition()
     public ChannelAction<TextChannel> createCopy(@Nonnull Guild guild)
     {
         Checks.notNull(guild, "Guild");
-        ChannelAction<TextChannel> action = guild.getController().createTextChannel(name).setNSFW(nsfw).setTopic(topic).setSlowmode(slowmode);
+        ChannelAction<TextChannel> action = guild.createTextChannel(name).setNSFW(nsfw).setTopic(topic).setSlowmode(slowmode);
         if (guild.equals(getGuild()))
         {
             Category parent = getParent();

File: src/main/java/net/dv8tion/jda/internal/entities/VoiceChannelImpl.java
Patch:
@@ -81,7 +81,7 @@ public int getPosition()
     public ChannelAction<VoiceChannel> createCopy(@Nonnull Guild guild)
     {
         Checks.notNull(guild, "Guild");
-        ChannelAction<VoiceChannel> action = guild.getController().createVoiceChannel(name).setBitrate(bitrate).setUserlimit(userLimit);
+        ChannelAction<VoiceChannel> action = guild.createVoiceChannel(name).setBitrate(bitrate).setUserlimit(userLimit);
         if (guild.equals(getGuild()))
         {
             Category parent = getParent();

File: src/main/java/net/dv8tion/jda/api/entities/GuildChannel.java
Patch:
@@ -33,7 +33,7 @@
 /**
  * Represents a {@link net.dv8tion.jda.api.entities.Guild Guild} channel.
  */
-public interface GuildChannel extends ISnowflake
+public interface GuildChannel extends ISnowflake, Comparable<GuildChannel>
 {
     /**
      * The {@link net.dv8tion.jda.api.entities.ChannelType ChannelType} for this GuildChannel

File: src/main/java/net/dv8tion/jda/api/entities/TextChannel.java
Patch:
@@ -41,7 +41,7 @@
  * @see VoiceChannel
  * @see Category
  */
-public interface TextChannel extends GuildChannel, MessageChannel, Comparable<TextChannel>, IMentionable
+public interface TextChannel extends GuildChannel, MessageChannel, IMentionable
 {
     /**
      * The topic set for this TextChannel.

File: src/main/java/net/dv8tion/jda/api/entities/VoiceChannel.java
Patch:
@@ -27,7 +27,7 @@
  * @see TextChannel
  * @see Category
  */
-public interface VoiceChannel extends GuildChannel, Comparable<VoiceChannel>
+public interface VoiceChannel extends GuildChannel
 {
     /**
      * The maximum amount of {@link net.dv8tion.jda.api.entities.Member Members} that can be in this

File: src/main/java/net/dv8tion/jda/api/utils/cache/SortedSnowflakeCacheView.java
Patch:
@@ -33,7 +33,7 @@
  *
  * @see   CacheView CacheView for details on Efficient Memory Usage
  */
-public interface SortedSnowflakeCacheView<T extends Comparable<T> & ISnowflake> extends SnowflakeCacheView<T>
+public interface SortedSnowflakeCacheView<T extends Comparable<? super T> & ISnowflake> extends SnowflakeCacheView<T>
 {
     /**
      * Behavior similar to {@link CacheView#forEach(Consumer)} but does not preserve order.

File: src/main/java/net/dv8tion/jda/internal/utils/cache/SortedSnowflakeCacheViewImpl.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.function.Function;
 import java.util.stream.Stream;
 
-public class SortedSnowflakeCacheViewImpl<T extends ISnowflake & Comparable<T>>
+public class SortedSnowflakeCacheViewImpl<T extends ISnowflake & Comparable<? super T>>
         extends SnowflakeCacheViewImpl<T> implements SortedSnowflakeCacheView<T>
 {
     protected static final int SPLIT_CHARACTERISTICS = Spliterator.IMMUTABLE | Spliterator.ORDERED | Spliterator.NONNULL;

File: src/main/java/net/dv8tion/jda/internal/requests/restaction/MessageActionImpl.java
Patch:
@@ -24,13 +24,13 @@
 import net.dv8tion.jda.api.requests.Request;
 import net.dv8tion.jda.api.requests.Response;
 import net.dv8tion.jda.api.requests.restaction.MessageAction;
-import net.dv8tion.jda.api.utils.MiscUtil;
 import net.dv8tion.jda.internal.requests.Method;
 import net.dv8tion.jda.internal.requests.Requester;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
 import net.dv8tion.jda.internal.requests.Route;
 import net.dv8tion.jda.internal.utils.Checks;
 import net.dv8tion.jda.internal.utils.Helpers;
+import net.dv8tion.jda.internal.utils.IOUtil;
 import okhttp3.MultipartBody;
 import okhttp3.RequestBody;
 import org.json.JSONObject;
@@ -298,7 +298,7 @@ protected RequestBody asMultipart()
         int index = 0;
         for (Map.Entry<String, InputStream> entry : files.entrySet())
         {
-            final RequestBody body = MiscUtil.createRequestBody(Requester.MEDIA_TYPE_OCTET, entry.getValue());
+            final RequestBody body = IOUtil.createRequestBody(Requester.MEDIA_TYPE_OCTET, entry.getValue());
             builder.addFormDataPart("file" + index++, entry.getKey(), body);
         }
         if (!isEmpty())

File: src/main/java/net/dv8tion/jda/internal/entities/EntityBuilder.java
Patch:
@@ -89,7 +89,7 @@ public JDAImpl getJDA()
 
     public SelfUser createSelfUser(JSONObject self)
     {
-        SelfUserImpl selfUser = ((SelfUserImpl) getJDA().getSelfUser());
+        SelfUserImpl selfUser = (SelfUserImpl) (getJDA().hasSelfUser() ? getJDA().getSelfUser() : null);
         if (selfUser == null)
         {
             final long id = self.getLong("id");

File: src/main/java/net/dv8tion/jda/api/hooks/ListenerAdapter.java
Patch:
@@ -215,7 +215,7 @@ public void onGuildMemberJoin(GuildMemberJoinEvent event) {}
     public void onGuildMemberLeave(GuildMemberLeaveEvent event) {}
     public void onGuildMemberRoleAdd(GuildMemberRoleAddEvent event) {}
     public void onGuildMemberRoleRemove(GuildMemberRoleRemoveEvent event) {}
-    public void onGuildMemberNickChange(GuildMemberNickChangeEvent event) {}
+    public void onGuildMemberUpdateNickname(GuildMemberUpdateNicknameEvent event) {}
 
     //Guild Voice Events
     public void onGuildVoiceUpdate(GuildVoiceUpdateEvent event) {}
@@ -490,8 +490,8 @@ else if (event instanceof GuildMemberRoleAddEvent)
             onGuildMemberRoleAdd((GuildMemberRoleAddEvent) event);
         else if (event instanceof GuildMemberRoleRemoveEvent)
             onGuildMemberRoleRemove((GuildMemberRoleRemoveEvent) event);
-        else if (event instanceof GuildMemberNickChangeEvent)
-            onGuildMemberNickChange((GuildMemberNickChangeEvent) event);
+        else if (event instanceof GuildMemberUpdateNicknameEvent)
+            onGuildMemberUpdateNickname((GuildMemberUpdateNicknameEvent) event);
 
         //Guild Voice Events
         else if (event instanceof GuildVoiceJoinEvent)

File: src/main/java/net/dv8tion/jda/internal/JDAImpl.java
Patch:
@@ -728,6 +728,7 @@ public RestAction<Webhook> getWebhookById(String webhookId)
     @Override
     public RestAction<ApplicationInfo> getApplicationInfo()
     {
+        AccountTypeException.check(getAccountType(), AccountType.BOT);
         Route.CompiledRoute route = Route.Applications.GET_BOT_APPLICATION.compile();
         return new RestActionImpl<>(this, route, (response, request) ->
         {

File: src/main/java/net/dv8tion/jda/api/events/guild/voice/GuildVoiceMoveEvent.java
Patch:
@@ -33,6 +33,6 @@ public class GuildVoiceMoveEvent extends GenericGuildVoiceUpdateEvent
 {
     public GuildVoiceMoveEvent(JDA api, long responseNumber, Member member, VoiceChannel channelLeft)
     {
-        super(api, responseNumber, member, member.getVoiceState().getChannel(), channelLeft);
+        super(api, responseNumber, member, channelLeft, member.getVoiceState().getChannel());
     }
 }

File: src/main/java/net/dv8tion/jda/api/requests/restaction/PermissionOverrideAction.java
Patch:
@@ -18,7 +18,6 @@
 
 import net.dv8tion.jda.api.Permission;
 import net.dv8tion.jda.api.entities.*;
-import net.dv8tion.jda.api.requests.RestAction;
 import net.dv8tion.jda.internal.utils.Checks;
 
 import javax.annotation.CheckReturnValue;
@@ -27,7 +26,7 @@
 import java.util.function.BooleanSupplier;
 
 /**
- * Extension of {@link net.dv8tion.jda.api.requests.RestAction RestAction} specifically
+ * Extension of {@link net.dv8tion.jda.api.requests.restaction.AuditableRestAction AuditableRestAction} specifically
  * designed to create a {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverride}
  * for a {@link net.dv8tion.jda.api.entities.GuildChannel GuildChannel}.
  * This extension allows setting properties before executing the action.
@@ -39,7 +38,7 @@
  * @see    net.dv8tion.jda.api.entities.GuildChannel#putPermissionOverride(Role)
  * @see    net.dv8tion.jda.api.entities.GuildChannel#putPermissionOverride(Member)
  */
-public interface PermissionOverrideAction extends RestAction<PermissionOverride>
+public interface PermissionOverrideAction extends AuditableRestAction<PermissionOverride>
 {
     @Override
     PermissionOverrideAction setCheck(BooleanSupplier checks);

File: src/main/java/net/dv8tion/jda/api/requests/restaction/PermissionOverrideAction.java
Patch:
@@ -18,7 +18,6 @@
 
 import net.dv8tion.jda.api.Permission;
 import net.dv8tion.jda.api.entities.*;
-import net.dv8tion.jda.api.requests.RestAction;
 import net.dv8tion.jda.internal.utils.Checks;
 
 import javax.annotation.CheckReturnValue;
@@ -27,7 +26,7 @@
 import java.util.function.BooleanSupplier;
 
 /**
- * Extension of {@link net.dv8tion.jda.api.requests.RestAction RestAction} specifically
+ * Extension of {@link net.dv8tion.jda.api.requests.restaction.AuditableRestAction AuditableRestAction} specifically
  * designed to create a {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverride}
  * for a {@link net.dv8tion.jda.api.entities.GuildChannel GuildChannel}.
  * This extension allows setting properties before executing the action.
@@ -39,7 +38,7 @@
  * @see    net.dv8tion.jda.api.entities.GuildChannel#putPermissionOverride(Role)
  * @see    net.dv8tion.jda.api.entities.GuildChannel#putPermissionOverride(Member)
  */
-public interface PermissionOverrideAction extends RestAction<PermissionOverride>
+public interface PermissionOverrideAction extends AuditableRestAction<PermissionOverride>
 {
     @Override
     PermissionOverrideAction setCheck(BooleanSupplier checks);

File: src/main/java/net/dv8tion/jda/api/OnlineStatus.java
Patch:
@@ -16,8 +16,7 @@
 package net.dv8tion.jda.api;
 
 /**
- * Represents the online presence of a {@link net.dv8tion.jda.api.entities.Member Member} or
- * {@link net.dv8tion.jda.client.entities.Friend Friend}.
+ * Represents the online presence of a {@link net.dv8tion.jda.api.entities.Member Member}.
  */
 public enum OnlineStatus
 {

File: src/main/java/net/dv8tion/jda/api/audit/AuditLogEntry.java
Patch:
@@ -33,7 +33,7 @@
 import java.util.Map;
 
 /**
- * Single entry for an {@link AuditLogPaginationAction AuditLogPaginationAction}.
+ * Single entry for an {@link net.dv8tion.jda.api.requests.restaction.pagination.AuditLogPaginationAction AuditLogPaginationAction}.
  * <br>This entry contains all options/changes and details for the action
  * that was logged by the {@link net.dv8tion.jda.api.entities.Guild Guild} audit-logs.
  */

File: src/main/java/net/dv8tion/jda/api/entities/ApplicationInfo.java
Patch:
@@ -28,7 +28,7 @@
  * @since  3.0
  * @author Aljoscha Grebe
  * 
- * @see    net.dv8tion.jda.bot.JDABot#getApplicationInfo() JDABot.getApplicationInfo()
+ * @see    net.dv8tion.jda.api.JDA#getApplicationInfo()
  */
 public interface ApplicationInfo extends ISnowflake
 {

File: src/main/java/net/dv8tion/jda/api/entities/AudioChannel.java
Patch:
@@ -20,7 +20,7 @@
  * Represents a channel that is able to transmit and receive audio.
  *
  * @see   net.dv8tion.jda.api.entities.VoiceChannel
- * @see   net.dv8tion.jda.client.entities.Call
+ *
  * @since 3.0
  */
 public interface AudioChannel extends ISnowflake

File: src/main/java/net/dv8tion/jda/api/entities/ChannelType.java
Patch:
@@ -33,7 +33,7 @@ public enum ChannelType
      */
     VOICE(2, true),
     /**
-     * A {@link net.dv8tion.jda.client.entities.Group Group}. {@link net.dv8tion.jda.api.AccountType#CLIENT AccountType.CLIENT} only.
+     * A Group. {@link net.dv8tion.jda.api.AccountType#CLIENT AccountType.CLIENT} only.
      */
     GROUP(3),
     /**

File: src/main/java/net/dv8tion/jda/api/entities/User.java
Patch:
@@ -111,7 +111,7 @@ public interface User extends ISnowflake, IMentionable, IFakeable
 
     /**
      * The "tag" for this user
-     * <p>This is the equivalent of calling {@link java.lang.String#format(String, Object...) String.format}("%#s", {@link net.dv8tion.jda.core.entities.User User})
+     * <p>This is the equivalent of calling {@link java.lang.String#format(String, Object...) String.format}("%#s", user)
      *
      * @return Never-null String containing the tag for this user, for example DV8FromTheWorld#6297
      */

File: src/main/java/net/dv8tion/jda/api/managers/GuildController.java
Patch:
@@ -1728,6 +1728,8 @@ public ChannelAction<Category> createCategory(String name)
      *     <br>We were removed from the Guild before finishing the task</li>
      * </ul>
      *
+     * @param  <T>
+     *         The channel type
      * @param  channel
      *         The {@link net.dv8tion.jda.api.entities.GuildChannel GuildChannel} to use for the copy template
      *

File: src/main/java/net/dv8tion/jda/api/sharding/ShardManager.java
Patch:
@@ -40,7 +40,7 @@
  * This class acts as a manager for multiple shards.
  * It contains several methods to make your life with sharding easier.
  *
- * <br>Custom implementations my not support all methods and throw
+ * <br>Custom implementations may not support all methods and throw
  * {@link java.lang.UnsupportedOperationException UnsupportedOperationExceptions} instead.
  *
  * @since  3.4

File: src/main/java/net/dv8tion/jda/api/utils/ClosableIterator.java
Patch:
@@ -36,6 +36,7 @@
  * }</pre>
  *
  * @param <T>
+ *        The element type
  */
 public interface ClosableIterator<T> extends Iterator<T>, AutoCloseable
 {

File: src/main/java/net/dv8tion/jda/api/audit/AuditLogEntry.java
Patch:
@@ -33,7 +33,7 @@
 import java.util.Map;
 
 /**
- * Single entry for an {@link AuditLogPaginationAction AuditLogPaginationAction}.
+ * Single entry for an {@link net.dv8tion.jda.api.requests.restaction.pagination.AuditLogPaginationAction AuditLogPaginationAction}.
  * <br>This entry contains all options/changes and details for the action
  * that was logged by the {@link net.dv8tion.jda.api.entities.Guild Guild} audit-logs.
  */

File: src/main/java/net/dv8tion/jda/api/managers/GuildController.java
Patch:
@@ -1728,6 +1728,8 @@ public ChannelAction<Category> createCategory(String name)
      *     <br>We were removed from the Guild before finishing the task</li>
      * </ul>
      *
+     * @param  <T>
+     *         The channel type
      * @param  channel
      *         The {@link net.dv8tion.jda.api.entities.GuildChannel GuildChannel} to use for the copy template
      *

File: src/main/java/net/dv8tion/jda/api/sharding/ShardManager.java
Patch:
@@ -40,7 +40,7 @@
  * This class acts as a manager for multiple shards.
  * It contains several methods to make your life with sharding easier.
  *
- * <br>Custom implementations my not support all methods and throw
+ * <br>Custom implementations may not support all methods and throw
  * {@link java.lang.UnsupportedOperationException UnsupportedOperationExceptions} instead.
  *
  * @since  3.4

File: src/main/java/net/dv8tion/jda/api/OnlineStatus.java
Patch:
@@ -16,8 +16,7 @@
 package net.dv8tion.jda.api;
 
 /**
- * Represents the online presence of a {@link net.dv8tion.jda.api.entities.Member Member} or
- * {@link net.dv8tion.jda.client.entities.Friend Friend}.
+ * Represents the online presence of a {@link net.dv8tion.jda.api.entities.Member Member}.
  */
 public enum OnlineStatus
 {

File: src/main/java/net/dv8tion/jda/api/entities/ApplicationInfo.java
Patch:
@@ -28,7 +28,7 @@
  * @since  3.0
  * @author Aljoscha Grebe
  * 
- * @see    net.dv8tion.jda.bot.JDABot#getApplicationInfo() JDABot.getApplicationInfo()
+ * @see    net.dv8tion.jda.api.JDA#getApplicationInfo()
  */
 public interface ApplicationInfo extends ISnowflake
 {

File: src/main/java/net/dv8tion/jda/api/entities/AudioChannel.java
Patch:
@@ -20,7 +20,7 @@
  * Represents a channel that is able to transmit and receive audio.
  *
  * @see   net.dv8tion.jda.api.entities.VoiceChannel
- * @see   net.dv8tion.jda.client.entities.Call
+ *
  * @since 3.0
  */
 public interface AudioChannel extends ISnowflake

File: src/main/java/net/dv8tion/jda/api/entities/ChannelType.java
Patch:
@@ -33,7 +33,7 @@ public enum ChannelType
      */
     VOICE(2, true),
     /**
-     * A {@link net.dv8tion.jda.client.entities.Group Group}. {@link net.dv8tion.jda.api.AccountType#CLIENT AccountType.CLIENT} only.
+     * A Group. {@link net.dv8tion.jda.api.AccountType#CLIENT AccountType.CLIENT} only.
      */
     GROUP(3),
     /**

File: src/main/java/net/dv8tion/jda/api/entities/User.java
Patch:
@@ -111,7 +111,7 @@ public interface User extends ISnowflake, IMentionable, IFakeable
 
     /**
      * The "tag" for this user
-     * <p>This is the equivalent of calling {@link java.lang.String#format(String, Object...) String.format}("%#s", {@link net.dv8tion.jda.core.entities.User User})
+     * <p>This is the equivalent of calling {@link java.lang.String#format(String, Object...) String.format}("%#s", user)
      *
      * @return Never-null String containing the tag for this user, for example DV8FromTheWorld#6297
      */

File: src/main/java/net/dv8tion/jda/api/requests/restaction/pagination/PaginationAction.java
Patch:
@@ -139,7 +139,7 @@ public PaginationAction(JDA api)
      * <br>If cache is disabled this can be set to an arbitrary value irrelevant of the current last.
      * Set this to {@code 0} to start from the most recent message.
      *
-     * <p>Fails if cache is enabled and the target id is newer than the current last id (id > last).
+     * <p>Fails if cache is enabled and the target id is newer than the current last id (id {@literal >} last).
      *
      * <h2>Example</h2>
      * <pre>{@code
@@ -162,7 +162,7 @@ public PaginationAction(JDA api)
      *         The snowflake ID to skip before, this is exclusive rather than inclusive
      *
      * @throws IllegalArgumentException
-     *         If cache is enabled and you are attempting to skip forward in time (id > last)
+     *         If cache is enabled and you are attempting to skip forward in time (id {@literal >} last)
      *
      * @return The current PaginationAction for chaining convenience
      *

File: src/main/java/net/dv8tion/jda/api/utils/ClosableIterator.java
Patch:
@@ -36,6 +36,7 @@
  * }</pre>
  *
  * @param <T>
+ *        The element type
  */
 public interface ClosableIterator<T> extends Iterator<T>, AutoCloseable
 {

File: src/main/java/net/dv8tion/jda/api/entities/GuildChannel.java
Patch:
@@ -84,14 +84,14 @@ public interface GuildChannel extends ISnowflake
     int getPosition();
 
     /**
-     * The actual position of the {@link net.dv8tion.jda.core.entities.Channel Channel} as stored and given by Discord.
+     * The actual position of the {@link net.dv8tion.jda.api.entities.GuildChannel GuildChannel} as stored and given by Discord.
      * Channel positions are actually based on a pairing of the creation time (as stored in the snowflake id)
      * and the position. If 2 or more channels share the same position then they are sorted based on their creation date.
      * The more recent a channel was created, the lower it is in the hierarchy. This is handled by {@link #getPosition()}
      * and it is most likely the method you want. If, for some reason, you want the actual position of the
      * channel then this method will give you that value.
      *
-     * @return The true, Discord stored, position of the {@link net.dv8tion.jda.core.entities.Channel Channel}.
+     * @return The true, Discord stored, position of the {@link net.dv8tion.jda.api.entities.GuildChannel GuildChannel}.
      */
     int getPositionRaw();
 

File: src/main/java/net/dv8tion/jda/core/events/guild/GuildJoinEvent.java
Patch:
@@ -19,7 +19,7 @@
 import net.dv8tion.jda.core.entities.Guild;
 
 /**
- * Indicates that a you joined a {@link net.dv8tion.jda.core.entities.Guild Guild}.
+ * Indicates that you joined a {@link net.dv8tion.jda.core.entities.Guild Guild}.
  *
  * <p><b>Warning: Discord already triggered a mass amount of these events due to a downtime. Be careful!</b>
  */

File: src/main/java/net/dv8tion/jda/core/events/message/MessageBulkDeleteEvent.java
Patch:
@@ -25,9 +25,9 @@
 
 /**
  * Indicates that a bulk deletion is executed in a {@link net.dv8tion.jda.core.entities.TextChannel TextChannel}.
- * <br>Use {@link net.dv8tion.jda.core.JDABuilder#setBulkDeleteSplittingEnabled(boolean)} to true in order to enable this event.
+ * <br>Set {@link net.dv8tion.jda.core.JDABuilder#setBulkDeleteSplittingEnabled(boolean)} to false in order to enable this event.
  * 
- * <p>Can be used to detect tha a large chunk of Messages is deleted in a TextChannel. Providing a list of Message IDs and the specific TextChannel.
+ * <p>Can be used to detect that a large chunk of Messages is deleted in a TextChannel. Providing a list of Message IDs and the specific TextChannel.
  */
 public class MessageBulkDeleteEvent extends Event
 {

File: src/main/java/net/dv8tion/jda/core/requests/RestAction.java
Patch:
@@ -173,7 +173,7 @@ else if (t.getCause() != null)
 
     private static final Consumer FALLBACK_CONSUMER = o -> {};
 
-    protected static boolean passContext = false;
+    protected static boolean passContext = true;
 
     protected final UpstreamReference<JDAImpl> api;
 
@@ -186,7 +186,6 @@ else if (t.getCause() != null)
     /**
      * If enabled this will pass a {@link net.dv8tion.jda.core.exceptions.ContextException ContextException}
      * as root-cause to all failure consumers.
-     * Note that the {@link #DEFAULT_FAILURE} does not print a stack-trace at all unless specified!
      * <br>This might cause performance decrease due to the creation of exceptions for <b>every</b> execution.
      *
      * <p>It is recommended to pass a context consumer as failure manually using {@code queue(success, ContextException.here(failure))}

File: src/main/java/net/dv8tion/jda/bot/sharding/DefaultShardManager.java
Patch:
@@ -747,7 +747,7 @@ public void setIdleProvider(IntFunction<Boolean> idleProvider)
     }
 
     @Override
-    public void setPresenceProvider(IntFunction<OnlineStatus> statusProvider, IntFunction<? extends Game> gameProvider)
+    public void setPresenceProvider(IntFunction<OnlineStatus> statusProvider, IntFunction<? extends Activity> gameProvider)
     {
         ShardManager.super.setPresenceProvider(statusProvider, gameProvider);
 

File: src/main/java/net/dv8tion/jda/core/audio/hooks/ConnectionStatus.java
Patch:
@@ -23,6 +23,8 @@ public enum ConnectionStatus
 {
     /** Indicates that there is no open connection or that the connection was closed by choice, not by error.*/
     NOT_CONNECTED(false),
+    /** Indicates that JDA was shutdown and no further connections should be established */
+    SHUTTING_DOWN(false),
     /** JDA is waiting on Discord to send a valid endpoint which to connect the audio websocket to.*/
     CONNECTING_AWAITING_ENDPOINT,
     /** JDA has received a valid endpoint and is attempting to setup and connect the audio websocket */

File: src/main/java/net/dv8tion/jda/core/audio/hooks/ConnectionStatus.java
Patch:
@@ -23,6 +23,8 @@ public enum ConnectionStatus
 {
     /** Indicates that there is no open connection or that the connection was closed by choice, not by error.*/
     NOT_CONNECTED(false),
+    /** Indicates that JDA was shutdown and no further connections should be established */
+    SHUTTING_DOWN(false),
     /** JDA is waiting on Discord to send a valid endpoint which to connect the audio websocket to.*/
     CONNECTING_AWAITING_ENDPOINT,
     /** JDA has received a valid endpoint and is attempting to setup and connect the audio websocket */

File: src/main/java/net/dv8tion/jda/core/entities/impl/JDAImpl.java
Patch:
@@ -594,6 +594,8 @@ public synchronized void shutdownInternals()
         audioManagers.forEach(AudioManager::closeAudioConnection);
         audioManagers.clear();
 
+        guildSetupController.close();
+
         if (audioLifeCyclePool != null)
             audioLifeCyclePool.shutdownNow();
 

File: src/main/java/net/dv8tion/jda/core/audio/AudioWebSocket.java
Patch:
@@ -177,9 +177,7 @@ protected void close(final ConnectionStatus closeStatus)
 
             //decide if we reconnect.
             if (shouldReconnect
-                    && status != ConnectionStatus.NOT_CONNECTED    //indicated that the connection was purposely closed. don't reconnect.
-                    && status != ConnectionStatus.DISCONNECTED_CHANNEL_DELETED
-                    && status != ConnectionStatus.DISCONNECTED_REMOVED_FROM_GUILD
+                    && status.shouldReconnect() //indicated that the connection was purposely closed. don't reconnect.
                     && status != ConnectionStatus.AUDIO_REGION_CHANGE) //Already handled.
             {
                 manager.setQueuedAudioConnection(disconnectedChannel);

File: src/main/java/net/dv8tion/jda/core/requests/WebSocketClient.java
Patch:
@@ -706,7 +706,8 @@ protected void updateAudioManagerReferences()
                 {
                     //We no longer have access to the guild that this audio manager was for. Set the value to null.
                     queuedAudioConnections.remove(guildId);
-                    mng.closeAudioConnection(ConnectionStatus.DISCONNECTED_REMOVED_FROM_GUILD);
+                    mng.closeAudioConnection(ConnectionStatus.DISCONNECTED_REMOVED_DURING_RECONNECT);
+                    it.remove();
                 }
             }
         }

File: src/main/java/net/dv8tion/jda/core/requests/RateLimiter.java
Patch:
@@ -17,6 +17,8 @@
 package net.dv8tion.jda.core.requests;
 
 import net.dv8tion.jda.core.requests.ratelimit.IBucket;
+import net.dv8tion.jda.core.utils.JDALogger;
+import org.slf4j.Logger;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -29,7 +31,7 @@
 public abstract class RateLimiter
 {
     //Implementations of this class exist in the net.dv8tion.jda.core.requests.ratelimit package.
-
+    protected static final Logger log = JDALogger.getLog(RateLimiter.class);
     protected final Requester requester;
     protected volatile boolean isShutdown = false;
     protected final ConcurrentHashMap<String, IBucket> buckets = new ConcurrentHashMap<>();

File: src/main/java/net/dv8tion/jda/core/requests/ratelimit/IBucket.java
Patch:
@@ -26,7 +26,7 @@ public interface IBucket
     Route.RateLimit getRatelimit();
     String getRoute();
     Queue<Request> getRequests();
-    
+
     default boolean hasRatelimit()
     {
         return getRatelimit() != null;

File: src/main/java/net/dv8tion/jda/core/audio/AudioWebSocket.java
Patch:
@@ -250,8 +250,7 @@ public void onConnected(WebSocket websocket, Map<String, List<String>> headers)
         else
             identify();
         changeStatus(ConnectionStatus.CONNECTING_AWAITING_AUTHENTICATION);
-        if (!reconnecting)
-            audioConnection.prepareReady();
+        audioConnection.prepareReady();
         reconnecting = false;
     }
 

File: src/main/java/net/dv8tion/jda/core/managers/PermOverrideManager.java
Patch:
@@ -204,7 +204,7 @@ public PermOverrideManager grant(long permissions)
         setupValues();
         this.allowed |= permissions;
         this.denied &= ~permissions;
-        this.set |= ALLOWED;
+        this.set |= PERMISSIONS;
         return this;
     }
 
@@ -267,7 +267,7 @@ public PermOverrideManager deny(long permissions)
         setupValues();
         this.denied |= permissions;
         this.allowed &= ~permissions;
-        this.set |= DENIED;
+        this.set |= PERMISSIONS;
         return this;
     }
 

File: src/main/java/net/dv8tion/jda/core/audio/Decoder.java
Patch:
@@ -46,7 +46,7 @@ protected Decoder(int ssrc)
 
     protected boolean isInOrder(char newSeq)
     {
-        return lastSeq == -1 || newSeq > lastSeq || lastSeq - newSeq > 10;
+        return lastSeq == (char) -1 || newSeq > lastSeq || lastSeq - newSeq > 10;
     }
 
     protected boolean wasPacketLost(char newSeq)
@@ -60,8 +60,7 @@ protected short[] decodeFromOpus(AudioPacket decryptedPacket)
         ShortBuffer decoded = ShortBuffer.allocate(4096);
         if (decryptedPacket == null)    //Flag for packet-loss
         {
-            result = Opus.INSTANCE.opus_decode(opusDecoder, null, 0, decoded,
-                    AudioConnection.OPUS_FRAME_SIZE, 0);
+            result = Opus.INSTANCE.opus_decode(opusDecoder, null, 0, decoded, AudioConnection.OPUS_FRAME_SIZE, 0);
             lastSeq = (char) -1;
             lastTimestamp = -1;
         }

File: src/main/java/net/dv8tion/jda/bot/sharding/ShardManager.java
Patch:
@@ -362,9 +362,7 @@ default List<Emote> getEmotesByName(final String name, final boolean ignoreCase)
      */
     default Guild getGuildById(final long id)
     {
-        int shardId = MiscUtil.getShardForGuild(id, getShardsTotal());
-        JDA shard = this.getShardById(shardId);
-        return shard == null ? null : shard.getGuildById(id);
+        return getGuildCache().getElementById(id);
     }
 
     /**

File: src/main/java/net/dv8tion/jda/bot/sharding/ShardManager.java
Patch:
@@ -362,9 +362,7 @@ default List<Emote> getEmotesByName(final String name, final boolean ignoreCase)
      */
     default Guild getGuildById(final long id)
     {
-        int shardId = MiscUtil.getShardForGuild(id, getShardsTotal());
-        JDA shard = this.getShardById(shardId);
-        return shard == null ? null : shard.getGuildById(id);
+        return getGuildCache().getElementById(id);
     }
 
     /**

File: src/main/java/net/dv8tion/jda/core/utils/PermissionUtil.java
Patch:
@@ -160,7 +160,7 @@ public static boolean canInteract(Member issuer, Emote emote)
             }
         }
 
-        return emote.hasRoles() && (emote.getRoles().isEmpty() // Emote restricted to roles -> check if the issuer has them
+        return emote.canProvideRoles() && (emote.getRoles().isEmpty() // Emote restricted to roles -> check if the issuer has them
             || CollectionUtils.containsAny(issuer.getRoles(), emote.getRoles()));
     }
 

File: src/main/java/net/dv8tion/jda/core/audio/AudioPacket.java
Patch:
@@ -220,7 +220,7 @@ public static AudioPacket decryptAudioPacket(AudioEncryption encryption, Datagra
         final byte[] decryptedAudio = boxer.open(encodedAudio, extendedNonce);
         if (decryptedAudio == null)
         {
-            AudioConnection.LOG.debug("Failed to decrypt audio packet");
+            AudioConnection.LOG.trace("Failed to decrypt audio packet");
             return null;
         }
         final byte[] decryptedRawPacket = new byte[RTP_HEADER_BYTE_LENGTH + decryptedAudio.length];

File: src/main/java/net/dv8tion/jda/core/entities/impl/EmoteImpl.java
Patch:
@@ -81,7 +81,7 @@ public EmoteImpl(long id, JDAImpl api)
     @Override
     public GuildImpl getGuild()
     {
-        return guild.get();
+        return guild == null ? null : guild.get();
     }
 
     @Override

File: src/main/java/net/dv8tion/jda/core/entities/impl/EmoteImpl.java
Patch:
@@ -81,7 +81,7 @@ public EmoteImpl(long id, JDAImpl api)
     @Override
     public GuildImpl getGuild()
     {
-        return guild.get();
+        return guild == null ? null : guild.get();
     }
 
     @Override

File: src/main/java/net/dv8tion/jda/core/audio/AudioConnection.java
Patch:
@@ -268,7 +268,7 @@ private synchronized void setupSendSystem()
     {
         if (udpSocket != null && !udpSocket.isClosed() && sendHandler != null && sendSystem == null)
         {
-            IAudioSendFactory factory = ((JDAImpl) channel.get().getJDA()).getAudioSendFactory();
+            IAudioSendFactory factory = getJDA().getAudioSendFactory();
             sendSystem = factory.createSendSystem(new PacketProvider());
             sendSystem.setContextMap(getJDA().getContextMap());
             sendSystem.start();
@@ -432,7 +432,7 @@ else if (couldReceive)
             receiveThread.setUncaughtExceptionHandler((thread, throwable) ->
             {
                 LOG.error("There was some uncaught exception in the audio receive thread", throwable);
-                JDAImpl api = (JDAImpl) getJDA();
+                JDAImpl api = getJDA();
                 api.getEventManager().handle(new ExceptionEvent(api, throwable, true));
             });
             receiveThread.setDaemon(true);

File: src/main/java/net/dv8tion/jda/core/entities/impl/GuildVoiceStateImpl.java
Patch:
@@ -128,7 +128,7 @@ public boolean inVoiceChannel()
     @Override
     public int hashCode()
     {
-        return member.hashCode();
+        return getMember().hashCode();
     }
 
     @Override

File: src/main/java/net/dv8tion/jda/core/entities/impl/MemberImpl.java
Patch:
@@ -236,7 +236,7 @@ public boolean equals(Object o)
             return false;
 
         Member oMember = (Member) o;
-        return this == oMember || (oMember.getUser().equals(user) && oMember.getGuild().equals(guild));
+        return this == oMember || (oMember.getUser().equals(user) && oMember.getGuild().equals(getGuild()));
     }
 
     @Override
@@ -248,7 +248,7 @@ public int hashCode()
     @Override
     public String toString()
     {
-        return "MB:" + getEffectiveName() + '(' + user.toString() + " / " + guild.toString() +')';
+        return "MB:" + getEffectiveName() + '(' + user.toString() + " / " + getGuild().toString() +')';
     }
 
     @Override

File: src/main/java/net/dv8tion/jda/core/entities/impl/PermissionOverrideImpl.java
Patch:
@@ -114,7 +114,7 @@ public Channel getChannel()
     @Override
     public Guild getGuild()
     {
-        return channel.get().getGuild();
+        return getChannel().getGuild();
     }
 
     @Override
@@ -185,7 +185,7 @@ public boolean equals(Object o)
             return false;
         PermissionOverrideImpl oPerm = (PermissionOverrideImpl) o;
         return this == oPerm
-                || ((this.permissionHolder.equals(oPerm.permissionHolder)) && this.channel.equals(oPerm.channel));
+                || ((this.permissionHolder.equals(oPerm.permissionHolder)) && this.getChannel().equals(oPerm.getChannel()));
     }
 
     @Override

File: src/main/java/net/dv8tion/jda/core/entities/impl/PrivateChannelImpl.java
Patch:
@@ -189,7 +189,7 @@ public boolean equals(Object obj)
     @Override
     public String toString()
     {
-        return "PC:" + getUser().getName() + '(' + id + ')';
+        return "PC:" + getUser().getName() + '(' + getId() + ')';
     }
 
     private void checkBot()

File: src/main/java/net/dv8tion/jda/core/entities/impl/MemberImpl.java
Patch:
@@ -141,7 +141,7 @@ public List<Permission> getPermissions()
     @Override
     public List<Permission> getPermissions(Channel channel)
     {
-        if (!guild.equals(channel.getGuild()))
+        if (!getGuild().equals(channel.getGuild()))
             throw new IllegalArgumentException("Provided channel is not in the same guild as this member!");
 
         return Collections.unmodifiableList(

File: src/main/java/net/dv8tion/jda/core/entities/impl/GuildVoiceStateImpl.java
Patch:
@@ -139,7 +139,7 @@ public boolean equals(Object obj)
             return false;
         }
         GuildVoiceState oStatus = (GuildVoiceState) obj;
-        return this == oStatus || (this.member.equals(oStatus.getMember()) && this.guild.equals(oStatus.getGuild()));
+        return this == oStatus || (this.getMember().equals(oStatus.getMember()) && this.getGuild().equals(oStatus.getGuild()));
     }
 
     @Override

File: src/main/java/net/dv8tion/jda/core/managers/impl/AudioManagerImpl.java
Patch:
@@ -82,7 +82,7 @@ public void openAudioConnection(VoiceChannel channel)
 
 //        if (!AUDIO_SUPPORTED)
 //            throw new UnsupportedOperationException("Sorry! Audio is disabled due to an internal JDA error! Contact Dev!");
-        if (!guild.equals(channel.getGuild()))
+        if (!getGuild().equals(channel.getGuild()))
             throw new IllegalArgumentException("The provided VoiceChannel is not a part of the Guild that this AudioManager handles." +
                     "Please provide a VoiceChannel from the proper Guild");
         if (!getGuild().isAvailable())

File: src/main/java/net/dv8tion/jda/core/entities/impl/TextChannelImpl.java
Patch:
@@ -178,7 +178,7 @@ public boolean canTalk()
     @Override
     public boolean canTalk(Member member)
     {
-        if (!guild.equals(member.getGuild()))
+        if (!getGuild().equals(member.getGuild()))
             throw new IllegalArgumentException("Provided Member is not from the Guild that this TextChannel is part of.");
 
         return member.hasPermission(this, Permission.MESSAGE_READ, Permission.MESSAGE_WRITE);

File: src/main/java/net/dv8tion/jda/core/entities/impl/TextChannelImpl.java
Patch:
@@ -178,7 +178,7 @@ public boolean canTalk()
     @Override
     public boolean canTalk(Member member)
     {
-        if (!guild.equals(member.getGuild()))
+        if (!getGuild().equals(member.getGuild()))
             throw new IllegalArgumentException("Provided Member is not from the Guild that this TextChannel is part of.");
 
         return member.hasPermission(this, Permission.MESSAGE_READ, Permission.MESSAGE_WRITE);

File: src/main/java/net/dv8tion/jda/core/requests/Requester.java
Patch:
@@ -28,6 +28,7 @@
 import okhttp3.OkHttpClient;
 import okhttp3.RequestBody;
 import okhttp3.internal.http.HttpMethod;
+import org.jetbrains.annotations.Async;
 import org.slf4j.Logger;
 import org.slf4j.MDC;
 
@@ -99,7 +100,7 @@ public JDAImpl getJDA()
         return api;
     }
 
-    public <T> void request(Request<T> apiRequest)
+    public <T> void request(@Async.Schedule Request<T> apiRequest)
     {
         if (rateLimiter.isShutdown) 
             throw new IllegalStateException("The Requester has been shutdown! No new requests can be requested!");
@@ -132,7 +133,7 @@ public Long execute(Request<?> apiRequest, boolean handleOnRateLimit)
         return execute(apiRequest, false, handleOnRateLimit);
     }
 
-    public Long execute(Request<?> apiRequest, boolean retried, boolean handleOnRatelimit)
+    public Long execute(@Async.Execute Request<?> apiRequest, boolean retried, boolean handleOnRatelimit)
     {
         Route.CompiledRoute route = apiRequest.getRoute();
         Long retryAfter = rateLimiter.getRateLimit(route);

File: src/main/java/net/dv8tion/jda/core/entities/Emote.java
Patch:
@@ -192,7 +192,7 @@ default boolean canInteract(Member issuer)
     }
 
     /**
-     * Whether the specified Member can interact with this Emote within the provided MessageChannel
+     * Whether the specified User can interact with this Emote within the provided MessageChannel
      * <br>Same logic as {@link #canInteract(User, MessageChannel, boolean) canInteract(issuer, channel, true)}!
      *
      * @param  issuer
@@ -211,7 +211,7 @@ default boolean canInteract(User issuer, MessageChannel channel)
     }
 
     /**
-     * Whether the specified Member can interact with this Emote within the provided MessageChannel
+     * Whether the specified User can interact with this Emote within the provided MessageChannel
      * <br>Special override to exclude elevated bot permissions in case of (for instance) reacting to messages.
      *
      * @param  issuer

File: src/main/java/net/dv8tion/jda/core/utils/PermissionUtil.java
Patch:
@@ -160,8 +160,8 @@ public static boolean canInteract(Member issuer, Emote emote)
             }
         }
 
-        return (emote.getRoles().isEmpty() // Emote restricted to roles -> check if the issuer has them
-                    || CollectionUtils.containsAny(issuer.getRoles(), emote.getRoles()));
+        return emote.hasRoles() && (emote.getRoles().isEmpty() // Emote restricted to roles -> check if the issuer has them
+            || CollectionUtils.containsAny(issuer.getRoles(), emote.getRoles()));
     }
 
     /**
@@ -189,7 +189,7 @@ public static boolean canInteract(User issuer, Emote emote, MessageChannel chann
         Checks.notNull(emote,   "Target Emote");
         Checks.notNull(channel, "Target Channel");
 
-        if (emote.isFake() || !emote.getGuild().isMember(issuer))
+        if (emote.getGuild() == null || !emote.getGuild().isMember(issuer))
             return false; // cannot use an emote if you're not in its guild
         Member member = emote.getGuild().getMemberById(issuer.getIdLong());
         if (!canInteract(member, emote))

File: src/main/java/net/dv8tion/jda/core/JDA.java
Patch:
@@ -1181,9 +1181,6 @@ default List<Emote> getEmotesByName(String name, boolean ignoreCase)
      * @param  webhookId
      *         The webhook id
      *
-     * @throws IllegalArgumentException
-     *         If the {@code webhookId} is null or empty
-     *
      * @return {@link net.dv8tion.jda.core.requests.RestAction RestAction} - Type: {@link net.dv8tion.jda.core.entities.Webhook Webhook}
      *          <br>The webhook object.
      *

File: src/main/java/net/dv8tion/jda/core/requests/Request.java
Patch:
@@ -65,7 +65,7 @@ public Request(RestAction<T> restAction, Consumer<? super T> onSuccess, Consumer
 
     public void onSuccess(T successObj)
     {
-        api.pool.execute(() ->
+        api.getCallbackPool().execute(() ->
         {
             try
             {
@@ -95,7 +95,7 @@ public void onFailure(Response response)
 
     public void onFailure(Throwable failException)
     {
-        api.pool.execute(() ->
+        api.getCallbackPool().execute(() ->
         {
             try
             {

File: src/main/java/net/dv8tion/jda/core/requests/ratelimit/ClientRateLimiter.java
Patch:
@@ -38,9 +38,9 @@ public class ClientRateLimiter extends RateLimiter
 {
     volatile Long globalCooldown = null;
 
-    public ClientRateLimiter(Requester requester, int poolSize)
+    public ClientRateLimiter(Requester requester)
     {
-        super(requester, poolSize);
+        super(requester);
     }
 
     @Override
@@ -145,7 +145,7 @@ void submitForProcessing()
                     if (delay == null)
                         delay = 0L;
 
-                    pool.schedule(this, delay, TimeUnit.MILLISECONDS);
+                    requester.getJDA().getRateLimitPool().schedule(this, delay, TimeUnit.MILLISECONDS);
                     submittedBuckets.add(this);
                 }
             }

File: src/main/java/net/dv8tion/jda/core/audio/AudioConnection.java
Patch:
@@ -568,6 +568,7 @@ private void setSpeaking(boolean isSpeaking)
         this.speaking = isSpeaking;
         JSONObject obj = new JSONObject()
                 .put("speaking", isSpeaking ? 1 : 0)
+                .put("ssrc", webSocket.getSSRC())
                 .put("delay", 0);
         webSocket.send(VoiceCode.USER_SPEAKING_UPDATE, obj);
         if (!isSpeaking)
@@ -656,7 +657,7 @@ public ByteBuffer getNextPacketRaw(boolean changeTalking)
                         }
 
                         nextPacket = getPacketData(rawAudio);
-                        if (!speaking && changeTalking)
+                        if (!speaking)
                             setSpeaking(true);
 
                         if (seq + 1 > Character.MAX_VALUE)

File: src/main/java/net/dv8tion/jda/core/audio/AudioConnection.java
Patch:
@@ -656,7 +656,7 @@ public ByteBuffer getNextPacketRaw(boolean changeTalking)
                         }
 
                         nextPacket = getPacketData(rawAudio);
-                        if (!speaking && changeTalking)
+                        if (!speaking)
                             setSpeaking(true);
 
                         if (seq + 1 > Character.MAX_VALUE)

File: src/main/java/net/dv8tion/jda/core/audio/AudioPacket.java
Patch:
@@ -19,6 +19,7 @@
 import com.iwebpp.crypto.TweetNaclFast;
 
 import java.net.DatagramPacket;
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
 
@@ -163,7 +164,7 @@ public ByteBuffer asEncryptedPacket(ByteBuffer buffer, byte[] secretKey, byte[]
         //Create our SecretBox encoder with the secretKey provided by Discord.
         TweetNaclFast.SecretBox boxer = new TweetNaclFast.SecretBox(secretKey);
         byte[] encryptedAudio = boxer.box(encodedAudio, extendedNonce);
-        buffer.clear();
+        ((Buffer) buffer).clear();
         int capacity = RTP_HEADER_BYTE_LENGTH + encryptedAudio.length + nlen;
         if (capacity > buffer.remaining())
             buffer = ByteBuffer.allocate(capacity);

File: src/main/java/net/dv8tion/jda/core/events/guild/GuildLeaveEvent.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * Indicates that you left a {@link net.dv8tion.jda.core.entities.Guild Guild}.
  *
- * <p>Cane bse used to detect when you leave a Guild.
+ * <p>Can be used to detect when you leave a Guild.
  */
 public class GuildLeaveEvent extends GenericGuildEvent
 {

File: src/main/java/net/dv8tion/jda/core/events/guild/GuildLeaveEvent.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * Indicates that you left a {@link net.dv8tion.jda.core.entities.Guild Guild}.
  *
- * <p>Cane bse used to detect when you leave a Guild.
+ * <p>Can be used to detect when you leave a Guild.
  */
 public class GuildLeaveEvent extends GenericGuildEvent
 {

File: src/main/java/net/dv8tion/jda/core/requests/Requester.java
Patch:
@@ -45,8 +45,9 @@ public class Requester
     public static final Logger LOG = JDALogger.getLog(Requester.class);
     public static final String DISCORD_API_PREFIX = String.format("https://discordapp.com/api/v%d/", JDAInfo.DISCORD_REST_VERSION);
     public static final String USER_AGENT = "DiscordBot (" + JDAInfo.GITHUB + ", " + JDAInfo.VERSION + ")";
-    public static final MediaType MEDIA_TYPE_JSON = MediaType.parse("application/json; charset=utf-8");
-    public static final RequestBody EMPTY_BODY = RequestBody.create(null, new byte[]{});
+    public static final RequestBody EMPTY_BODY = RequestBody.create(null, new byte[0]);
+    public static final MediaType MEDIA_TYPE_JSON  = MediaType.parse("application/json; charset=utf-8");
+    public static final MediaType MEDIA_TYPE_OCTET = MediaType.parse("application/octet-stream; charset=utf-8");
 
     protected final JDAImpl api;
     private final RateLimiter rateLimiter;

File: src/main/java/net/dv8tion/jda/core/requests/ratelimit/BotRateLimiter.java
Patch:
@@ -180,6 +180,7 @@ private void updateBucket(Bucket bucket, Headers headers, long retryAfter)
         if (bucket.hasRatelimit()) // Check if there's a hardcoded rate limit
         {
             bucket.resetTime = getNow() + bucket.getRatelimit().getResetTime();
+            headerCount += 2;
             //routeUsageLimit provided by the ratelimit object already in the bucket.
         }
         else

File: src/main/java/net/dv8tion/jda/core/requests/restaction/MessageAction.java
Patch:
@@ -25,7 +25,6 @@
 import net.dv8tion.jda.core.utils.Checks;
 import net.dv8tion.jda.core.utils.Helpers;
 import net.dv8tion.jda.core.utils.MiscUtil;
-import okhttp3.MediaType;
 import okhttp3.MultipartBody;
 import okhttp3.RequestBody;
 import org.json.JSONObject;
@@ -588,11 +587,10 @@ private void clearResources()
     protected RequestBody asMultipart()
     {
         final MultipartBody.Builder builder = new MultipartBody.Builder().setType(MultipartBody.FORM);
-        final MediaType type = MediaType.parse("application/octet-stream");
         int index = 0;
         for (Map.Entry<String, InputStream> entry : files.entrySet())
         {
-            final RequestBody body = MiscUtil.createRequestBody(type, entry.getValue());
+            final RequestBody body = MiscUtil.createRequestBody(Requester.MEDIA_TYPE_OCTET, entry.getValue());
             builder.addFormDataPart("file" + index++, entry.getKey(), body);
         }
         if (!isEmpty())

File: src/main/java/net/dv8tion/jda/core/entities/MessageChannel.java
Patch:
@@ -700,7 +700,7 @@ default MessageAction sendFile(File file, String fileName, Message message)
         Checks.check(file.exists() && file.canRead(),
             "Provided file is either null, doesn't exist or is not readable!");
         Checks.check(file.length() <= getJDA().getSelfUser().getAllowedFileSize(),
-            "File is to big! Max file-size is 8 MiB for normal and 50 MiB for nitro users");
+            "File is too big! Max file-size is 8 MiB for normal and 50 MiB for nitro users");
         Checks.notNull(fileName, "fileName");
 
         try
@@ -832,7 +832,7 @@ default MessageAction sendFile(byte[] data, String fileName, Message message)
         Checks.notNull(data, "data");
         Checks.notNull(fileName, "fileName");
         final long maxSize = getJDA().getSelfUser().getAllowedFileSize();
-        Checks.check(data.length <= maxSize, "File is to big! Max file-size is %d bytes", maxSize);
+        Checks.check(data.length <= maxSize, "File is too big! Max file-size is %d bytes", maxSize);
         return sendFile(new ByteArrayInputStream(data), fileName, message);
     }
 

File: src/main/java/net/dv8tion/jda/core/entities/IMentionable.java
Patch:
@@ -52,6 +52,7 @@ public interface IMentionable extends Formattable
 {
     /**
      * Retrieve a Mention for this Entity.
+     * For the public {@link net.dv8tion.jda.core.entities.Role Role} (@everyone), this will return the literal string {@code "@everyone"}.
      *
      * @return A resolvable mention.
      */

File: src/main/java/net/dv8tion/jda/core/entities/impl/RoleImpl.java
Patch:
@@ -274,7 +274,7 @@ public JDA getJDA()
     @Override
     public String getAsMention()
     {
-        return "<@&" + getId() + '>';
+        return isPublicRole() ? "@everyone" : "<@&" + getId() + '>';
     }
 
     @Override

File: src/main/java/net/dv8tion/jda/core/entities/IMentionable.java
Patch:
@@ -52,6 +52,7 @@ public interface IMentionable extends Formattable
 {
     /**
      * Retrieve a Mention for this Entity.
+     * For the public {@link net.dv8tion.jda.core.entities.Role Role} (@everyone), this will return the literal string {@code "@everyone"}.
      *
      * @return A resolvable mention.
      */

File: src/main/java/net/dv8tion/jda/core/entities/impl/RoleImpl.java
Patch:
@@ -274,7 +274,7 @@ public JDA getJDA()
     @Override
     public String getAsMention()
     {
-        return "<@&" + getId() + '>';
+        return isPublicRole() ? "@everyone" : "<@&" + getId() + '>';
     }
 
     @Override

File: src/main/java/net/dv8tion/jda/core/managers/GuildManager.java
Patch:
@@ -452,7 +452,7 @@ protected RequestBody finalizeData()
         if (shouldUpdate(SPLASH))
             body.put("splash", splash == null ? JSONObject.NULL : splash.getEncoding());
         if (shouldUpdate(AFK_CHANNEL))
-            body.put("afk_channel_id", opt(AFK_CHANNEL));
+            body.put("afk_channel_id", opt(afkChannel));
         if (shouldUpdate(SYSTEM_CHANNEL))
             body.put("system_channel_id", opt(systemChannel));
         if (shouldUpdate(VERIFICATION_LEVEL))

File: src/main/java/net/dv8tion/jda/core/events/ShutdownEvent.java
Patch:
@@ -21,8 +21,7 @@
 import java.time.OffsetDateTime;
 
 /**
- * Indicates that JDA has fully disconnected from Discord
- * and will not attempt to reconnect again.
+ * Indicates that JDA has fully disconnected from Discord and will not attempt to reconnect again.
  * <br>At this stage all internal cache is invalid!
  */
 public class ShutdownEvent extends Event
@@ -32,7 +31,7 @@ public class ShutdownEvent extends Event
 
     public ShutdownEvent(JDA api, OffsetDateTime shutdownTime, int code)
     {
-        super(api, -1);
+        super(api);
         this.shutdownTime = shutdownTime;
         this.code = code;
     }

File: src/main/java/net/dv8tion/jda/core/events/channel/category/CategoryCreateEvent.java
Patch:
@@ -20,10 +20,9 @@
 import net.dv8tion.jda.core.entities.Category;
 
 /**
- * <b><u>CategoryCreateEvent</u></b>
- * <p>Fired when a {@link net.dv8tion.jda.core.entities.Category Category} is created.
+ * Indicates that a {@link net.dv8tion.jda.core.entities.Category Category} was created.
  *
- * <p>Use: Retrieve the newly created Category
+ * <p>Can be used to retrieve the newly created Category
  */
 public class CategoryCreateEvent extends GenericCategoryEvent
 {

File: src/main/java/net/dv8tion/jda/core/events/channel/category/CategoryDeleteEvent.java
Patch:
@@ -20,10 +20,9 @@
 import net.dv8tion.jda.core.entities.Category;
 
 /**
- * <b><u>CategoryDeleteEvent</u></b>
- * <p>Fired when a {@link net.dv8tion.jda.core.entities.Category Category} is deleted.
+ * Indicates that a {@link net.dv8tion.jda.core.entities.Category Category} was deleted.
  *
- * <p>Use: Retrieve the old Category
+ * <p>Can be used to retrieve the old Category
  */
 public class CategoryDeleteEvent extends GenericCategoryEvent
 {

File: src/main/java/net/dv8tion/jda/core/events/emote/EmoteAddedEvent.java
Patch:
@@ -19,6 +19,9 @@
 import net.dv8tion.jda.core.JDA;
 import net.dv8tion.jda.core.entities.Emote;
 
+/**
+ * Indicates that a new {@link net.dv8tion.jda.core.entities.Emote Emote} was added to a {@link net.dv8tion.jda.core.entities.Guild Guild}.
+ */
 public class EmoteAddedEvent extends GenericEmoteEvent
 {
     public EmoteAddedEvent(JDA api, long responseNumber, Emote emote)

File: src/main/java/net/dv8tion/jda/core/events/emote/EmoteRemovedEvent.java
Patch:
@@ -19,6 +19,9 @@
 import net.dv8tion.jda.core.JDA;
 import net.dv8tion.jda.core.entities.Emote;
 
+/**
+ * Indicates that an {@link net.dv8tion.jda.core.entities.Emote Emote} was removed from a Guild.
+ */
 public class EmoteRemovedEvent extends GenericEmoteEvent
 {
     public EmoteRemovedEvent(JDA api, long responseNumber, Emote emote)

File: src/main/java/net/dv8tion/jda/core/events/emote/package-info.java
Patch:
@@ -17,7 +17,7 @@
 /**
  * Events that track {@link net.dv8tion.jda.core.events.emote.EmoteAddedEvent added emotes}
  * and {@link net.dv8tion.jda.core.events.emote.EmoteRemovedEvent removed emotes}.
- * <br>Important to remember that {@link net.dv8tion.jda.core.entities.Emote Emotes} are not the same as unicode emojis!
+ * <br>Important to remember that {@link net.dv8tion.jda.core.entities.Emote Emotes} are not the same as unicode emoji!
  *
  * @since 3.1
  */

File: src/main/java/net/dv8tion/jda/core/events/http/HttpRequestEvent.java
Patch:
@@ -30,7 +30,7 @@
 import java.util.Set;
 
 /**
- * Fired when a Rest request has been executed.
+ * Indicates that a {@link net.dv8tion.jda.core.requests.RestAction RestAction} has been executed.
  * 
  * <p>Depending on the request and its result not all values have to be populated.
  */

File: src/main/java/net/dv8tion/jda/core/handle/GuildMemberRemoveHandler.java
Patch:
@@ -107,7 +107,7 @@ else if (api.getAccountType() == AccountType.CLIENT)
         api.getEventManager().handle(
                 new GuildMemberLeaveEvent(
                         api, responseNumber,
-                        guild, member));
+                        member));
         return null;
     }
 }

File: src/main/java/net/dv8tion/jda/core/handle/GuildMemberUpdateHandler.java
Patch:
@@ -99,14 +99,14 @@ protected Long handleInternally(JSONObject content)
             api.getEventManager().handle(
                     new GuildMemberRoleRemoveEvent(
                             api, responseNumber,
-                            guild, member, removedRoles));
+                            member, removedRoles));
         }
         if (newRoles.size() > 0)
         {
             api.getEventManager().handle(
                     new GuildMemberRoleAddEvent(
                             api, responseNumber,
-                            guild, member, newRoles));
+                            member, newRoles));
         }
         if (content.has("nick"))
         {
@@ -118,7 +118,7 @@ protected Long handleInternally(JSONObject content)
                 api.getEventManager().handle(
                         new GuildMemberNickChangeEvent(
                                 api, responseNumber,
-                                guild, member, prevNick, newNick));
+                                member, prevNick, newNick));
             }
         }
         return null;

File: src/main/java/net/dv8tion/jda/core/handle/GuildUpdateHandler.java
Patch:
@@ -124,7 +124,7 @@ protected Long handleInternally(JSONObject content)
             api.getEventManager().handle(
                     new GuildUpdateRegionEvent(
                             api, responseNumber,
-                            guild, oldRegion, region));
+                            guild, oldRegion));
         }
         if (!Objects.equals(verificationLevel, guild.getVerificationLevel()))
         {

File: src/main/java/net/dv8tion/jda/core/requests/restaction/AuditableRestAction.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.function.Consumer;
 
 /**
- * Extension of RestAction to allow setting a reason, only available to accounts of {@link net.dv8tion.jda.core.AccountType#BOT AccounType.BOT}
+ * Extension of RestAction to allow setting a reason, only available to accounts of {@link net.dv8tion.jda.core.AccountType#BOT AccountType.BOT}
  *
  * @param  <T>
  *         The return type

File: src/main/java/net/dv8tion/jda/core/requests/restaction/pagination/AuditLogPaginationAction.java
Patch:
@@ -174,7 +174,7 @@ protected Route.CompiledRoute finalizeRoute()
             route = route.withQueryParams("action_type", String.valueOf(type.getKey()));
 
         if (userId != null)
-            route = route.withQueryParams("action_type", userId);
+            route = route.withQueryParams("user_id", userId);
 
         if (last != null)
             route = route.withQueryParams("before", last.getId());

File: src/main/java/net/dv8tion/jda/core/requests/restaction/pagination/AuditLogPaginationAction.java
Patch:
@@ -174,7 +174,7 @@ protected Route.CompiledRoute finalizeRoute()
             route = route.withQueryParams("action_type", String.valueOf(type.getKey()));
 
         if (userId != null)
-            route = route.withQueryParams("action_type", userId);
+            route = route.withQueryParams("user_id", userId);
 
         if (last != null)
             route = route.withQueryParams("before", last.getId());

File: src/main/java/net/dv8tion/jda/client/managers/ApplicationManagerUpdatable.java
Patch:
@@ -28,11 +28,11 @@
 import net.dv8tion.jda.core.utils.Checks;
 import org.json.JSONObject;
 
+import javax.annotation.CheckReturnValue;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 import java.util.regex.Pattern;
-import javax.annotation.CheckReturnValue;
 
 /**
  * An {@link #update() updatable} manager that allows
@@ -48,6 +48,7 @@
  * @since  3.0
  * @author Aljoscha Grebe
  */
+@Deprecated
 public class ApplicationManagerUpdatable
 {
     public final static Pattern URL_PATTERN = Pattern.compile("\\s*https?://.+\\..{2,}\\s*",

File: src/main/java/net/dv8tion/jda/client/managers/EmoteManagerUpdatable.java
Patch:
@@ -53,6 +53,7 @@
  * the currently logged in account requires the Permission {@link net.dv8tion.jda.core.Permission#MANAGE_EMOTES MANAGE_EMOTES} and
  * must be from {@link net.dv8tion.jda.core.AccountType#CLIENT AccountType.CLIENT}
  */
+@Deprecated
 public class EmoteManagerUpdatable
 {
     public static final Pattern NAME_PATTERN = Pattern.compile("^\\w+$");

File: src/main/java/net/dv8tion/jda/client/requests/restaction/pagination/MentionPaginationAction.java
Patch:
@@ -52,7 +52,6 @@
  * </code></pre>
  *
  * @since  3.0
- * @author Florian Spieß
  */
 public class MentionPaginationAction extends PaginationAction<Message, MentionPaginationAction>
 {

File: src/main/java/net/dv8tion/jda/core/JDA.java
Patch:
@@ -940,8 +940,7 @@ default List<Emote> getEmotesByName(String name, boolean ignoreCase)
     /**
      * Returns the currently logged in account represented by {@link net.dv8tion.jda.core.entities.SelfUser SelfUser}.
      * <br>Account settings <b>cannot</b> be modified using this object. If you wish to modify account settings please
-     * use the AccountManager which is accessible by {@link net.dv8tion.jda.core.entities.SelfUser#getManager()} or
-     * {@link net.dv8tion.jda.core.entities.SelfUser#getManagerUpdatable()}.
+     * use the AccountManager which is accessible by {@link net.dv8tion.jda.core.entities.SelfUser#getManager()}.
      *
      * @return The currently logged in account.
      */

File: src/main/java/net/dv8tion/jda/core/Permission.java
Patch:
@@ -286,11 +286,14 @@ public static long getRaw(Permission... permissions)
     /**
      * This is effectively the opposite of {@link #getPermissions(long)}, this takes a Collection of {@link net.dv8tion.jda.core.Permission Permissions}
      * and returns the raw offset {@code long} representation of the permissions.
+     * <br>Example: {@code getRaw(EnumSet.of(Permission.MESSAGE_READ, Permission.MESSAGE_WRITE))}
      *
      * @param  permissions
      *         The Collection of permissions of which to form into the raw long representation.
      *
      * @return Unsigned long representing the provided permissions.
+     *
+     * @see    java.util.EnumSet EnumSet
      */
     public static long getRaw(Collection<Permission> permissions)
     {

File: src/main/java/net/dv8tion/jda/core/audit/AuditLogKey.java
Patch:
@@ -293,7 +293,7 @@ public enum AuditLogKey
      *
      * <p>Expected type: <b>Boolean</b>
      */
-    ROLE_HOISTED("hoisted"),
+    ROLE_HOISTED("hoist"),
 
     /**
      * Change of the {@link net.dv8tion.jda.core.entities.Role#isMentionable() Role.isMentionable()} value.

File: src/main/java/net/dv8tion/jda/core/audit/package-info.java
Patch:
@@ -25,6 +25,5 @@
  * <br>To identify what kind of entry is represented use {@link net.dv8tion.jda.core.audit.ActionType ActionType}!
  *
  * @since  3.1.1
- * @author Florian Spieß
  */
 package net.dv8tion.jda.core.audit;

File: src/main/java/net/dv8tion/jda/core/entities/EntityBuilder.java
Patch:
@@ -724,7 +724,7 @@ public Category createCategory(JSONObject json, long guildId, boolean guildIsLoa
 
         return channel
                 .setName(json.getString("name"))
-                .setRawPosition(json.getInt("position"));
+                .setPosition(json.getInt("position"));
     }
 
     public TextChannel createTextChannel(JSONObject json, long guildId)
@@ -756,7 +756,7 @@ public TextChannel createTextChannel(JSONObject json, long guildId, boolean guil
                 .setLastMessageId(Helpers.optLong(json, "last_message_id", 0))
                 .setName(json.getString("name"))
                 .setTopic(json.optString("topic"))
-                .setRawPosition(json.getInt("position"))
+                .setPosition(json.getInt("position"))
                 .setNSFW(Helpers.optBoolean(json, "nsfw"));
     }
 
@@ -786,7 +786,7 @@ public VoiceChannel createVoiceChannel(JSONObject json, long guildId, boolean gu
         return channel
                 .setParent(Helpers.optLong(json, "parent_id", 0))
                 .setName(json.getString("name"))
-                .setRawPosition(json.getInt("position"))
+                .setPosition(json.getInt("position"))
                 .setUserLimit(json.getInt("user_limit"))
                 .setBitrate(json.getInt("bitrate"));
     }

File: src/main/java/net/dv8tion/jda/core/entities/MessageReaction.java
Patch:
@@ -37,7 +37,6 @@
  * built from Discord is needed to see changes.
  *
  * @since  3.0
- * @author Florian Spieß
  */
 public class MessageReaction
 {

File: src/main/java/net/dv8tion/jda/core/handle/ChannelUpdateHandler.java
Patch:
@@ -111,7 +111,7 @@ protected Long handleInternally(JSONObject content)
                 }
                 if (oldPosition != position)
                 {
-                    textChannel.setRawPosition(position);
+                    textChannel.setPosition(position);
                     api.getEventManager().handle(
                             new TextChannelUpdatePositionEvent(
                                     api, responseNumber,
@@ -175,7 +175,7 @@ protected Long handleInternally(JSONObject content)
                 }
                 if (oldPosition != position)
                 {
-                    voiceChannel.setRawPosition(position);
+                    voiceChannel.setPosition(position);
                     api.getEventManager().handle(
                             new VoiceChannelUpdatePositionEvent(
                                     api, responseNumber,
@@ -232,7 +232,7 @@ protected Long handleInternally(JSONObject content)
                 }
                 if (!Objects.equals(oldPosition, position))
                 {
-                    category.setRawPosition(position);
+                    category.setPosition(position);
                     api.getEventManager().handle(
                             new CategoryUpdatePositionEvent(
                                 api, responseNumber,

File: src/main/java/net/dv8tion/jda/core/managers/AccountManagerUpdatable.java
Patch:
@@ -46,6 +46,7 @@
  * <p><b>To update the {@link net.dv8tion.jda.core.entities.Game Game} or {@link net.dv8tion.jda.core.OnlineStatus OnlineStatus}
  * for the current session use the {@link net.dv8tion.jda.core.managers.Presence Presence} instance of the corresponding JDA instance</b>
  */
+@Deprecated
 public class AccountManagerUpdatable
 {
     public static final Pattern EMAIL_PATTERN = Pattern.compile(".+@.+");

File: src/main/java/net/dv8tion/jda/core/managers/ChannelManagerUpdatable.java
Patch:
@@ -46,6 +46,7 @@
  * <p><b>Note</b>: To {@link #update() update} this manager
  * the currently logged in account requires the Permission {@link net.dv8tion.jda.core.Permission#MANAGE_CHANNEL MANAGE_CHANNEL}
  */
+@Deprecated
 public class ChannelManagerUpdatable
 {
     protected final Channel channel;

File: src/main/java/net/dv8tion/jda/core/managers/GuildManagerUpdatable.java
Patch:
@@ -51,6 +51,7 @@
  *
  * <p><b>To use moderation abilities like creating Roles or banning Members use {@link net.dv8tion.jda.core.managers.GuildController GuildController}</b>
  */
+@Deprecated
 public class GuildManagerUpdatable
 {    
     protected final Guild guild;
@@ -431,7 +432,7 @@ public AuditableRestAction<Void> update()
         if (verificationLevel.shouldUpdate())
             body.put("verification_level", verificationLevel.getValue().getKey());
         if (defaultNotificationLevel.shouldUpdate())
-            body.put("default_notification_level", defaultNotificationLevel.getValue().getKey());
+            body.put("default_message_notifications", defaultNotificationLevel.getValue().getKey());
         if (mfaLevel.shouldUpdate())
             body.put("mfa_level", mfaLevel.getValue().getKey());
         if (explicitContentLevel.shouldUpdate())

File: src/main/java/net/dv8tion/jda/core/managers/PermOverrideManagerUpdatable.java
Patch:
@@ -48,6 +48,7 @@
  * the currently logged in account requires the Permission {@link net.dv8tion.jda.core.Permission#MANAGE_PERMISSIONS MANAGE_PERMISSIONS}
  * in the parent {@link net.dv8tion.jda.core.entities.Channel Channel}
  */
+@Deprecated
 public class PermOverrideManagerUpdatable
 {
     protected final PermissionOverride override;

File: src/main/java/net/dv8tion/jda/core/managers/Presence.java
Patch:
@@ -24,7 +24,6 @@
  * The Presence associated with the provided JDA instance
  *
  * @since  3.0
- * @author Florian Spieß
  */
 public interface Presence
 {

File: src/main/java/net/dv8tion/jda/core/managers/RoleManagerUpdatable.java
Patch:
@@ -50,6 +50,7 @@
  * the currently logged in account requires the Permission {@link net.dv8tion.jda.core.Permission#MANAGE_ROLES MANAGE_ROLES} and
  * must be more powerful according to Discord hierarchy rules (positional strength). [ee {@link Role#canInteract(net.dv8tion.jda.core.entities.Role) Role.canInteract(Role)}]
  */
+@Deprecated
 public class RoleManagerUpdatable
 {
     protected final Role role;

File: src/main/java/net/dv8tion/jda/core/managers/WebhookManagerUpdatable.java
Patch:
@@ -44,6 +44,7 @@
  * <p><b>Note</b>: To {@link #update() update} this manager
  * the currently logged in account requires the Permission {@link net.dv8tion.jda.core.Permission#MANAGE_WEBHOOKS MANAGE_WEBHOOKS} in the parent TextChannel
  */
+@Deprecated
 public class WebhookManagerUpdatable
 {
     protected final Webhook webhook;

File: src/main/java/net/dv8tion/jda/core/managers/fields/Field.java
Patch:
@@ -40,6 +40,7 @@
  *
  * @since  3.0
  */
+@Deprecated
 public abstract class Field<T, M>
 {
     protected final M manager;

File: src/main/java/net/dv8tion/jda/core/managers/fields/package-info.java
Patch:
@@ -18,5 +18,8 @@
  * Abstract Manager-Field (AMF)
  * <br>This is utilized in updatable Managers. Managers that allow
  * users to modify multiple {@code Field}s of an existing entity.
+ *
+ * @deprecated This package is obsolete as of <b>3.6.0</b>
+ *             use the new managers instead!
  */
 package net.dv8tion.jda.core.managers.fields;

File: src/main/java/net/dv8tion/jda/core/managers/impl/PresenceImpl.java
Patch:
@@ -30,7 +30,6 @@
  * <br><b>Note that this does not automatically handle the 5/60 second rate limit!</b>
  *
  * @since  3.0
- * @author Florian Spieß
  */
 public class PresenceImpl implements Presence
 {

File: src/main/java/net/dv8tion/jda/core/requests/restaction/ChannelAction.java
Patch:
@@ -38,7 +38,6 @@
  * This extension allows setting properties before executing the action.
  *
  * @since  3.0
- * @author Florian Spieß
  */
 public class ChannelAction extends AuditableRestAction<Channel>
 {

File: src/main/java/net/dv8tion/jda/core/requests/restaction/pagination/AuditLogPaginationAction.java
Patch:
@@ -73,7 +73,6 @@
  * </code></pre>
  *
  * @since  3.2
- * @author Florian Spieß
  */
 public class AuditLogPaginationAction extends PaginationAction<AuditLogEntry, AuditLogPaginationAction>
 {

File: src/main/java/net/dv8tion/jda/core/requests/restaction/pagination/MessagePaginationAction.java
Patch:
@@ -60,7 +60,6 @@
  * </code></pre>
  *
  * @since  3.1
- * @author Florian Spieß
  */
 public class MessagePaginationAction extends PaginationAction<Message, MessagePaginationAction>
 {

File: src/main/java/net/dv8tion/jda/core/requests/restaction/pagination/PaginationAction.java
Patch:
@@ -81,7 +81,6 @@
  *         The type of entity to paginate
  *
  * @since  3.1
- * @author Florian Spieß
  */
 public abstract class PaginationAction<T, M extends PaginationAction<T, M>>
     extends RestAction<List<T>> implements Iterable<T>

File: src/main/java/net/dv8tion/jda/core/requests/restaction/pagination/ReactionPaginationAction.java
Patch:
@@ -51,7 +51,6 @@
  * </code></pre>
  *
  * @since  3.1
- * @author Florian Spieß
  */
 public class ReactionPaginationAction extends PaginationAction<User, ReactionPaginationAction>
 {

File: src/main/java/net/dv8tion/jda/client/entities/impl/GroupImpl.java
Patch:
@@ -38,7 +38,7 @@ public class GroupImpl implements Group
     private final long id;
     private final JDAImpl api;
 
-    private final SnowflakeCacheViewImpl<User> userCache = new SnowflakeCacheViewImpl<>(User::getName);
+    private final SnowflakeCacheViewImpl<User> userCache = new SnowflakeCacheViewImpl<>(User.class, User::getName);
 
     private Call currentCall;
     private User owner;

File: src/main/java/net/dv8tion/jda/client/entities/impl/JDAClientImpl.java
Patch:
@@ -46,7 +46,7 @@
 public class JDAClientImpl implements JDAClient
 {
     protected final JDAImpl api;
-    protected final SnowflakeCacheViewImpl<Group> groups = new SnowflakeCacheViewImpl<>(Group::getName);
+    protected final SnowflakeCacheViewImpl<Group> groups = new SnowflakeCacheViewImpl<>(Group.class, Group::getName);
     protected final TLongObjectMap<Relationship> relationships = MiscUtil.newLongMap();
     protected final TLongObjectMap<CallUser> callUsers = MiscUtil.newLongMap();
     protected UserSettingsImpl userSettings;

File: src/main/java/net/dv8tion/jda/core/audio/AudioConnection.java
Patch:
@@ -582,6 +582,7 @@ public AudioWebSocket getWebSocket()
     }
 
     @Override
+    @Deprecated
     protected void finalize() throws Throwable
     {
         shutdown();

File: src/main/java/net/dv8tion/jda/core/audio/AudioWebSocket.java
Patch:
@@ -653,6 +653,7 @@ public void setAutoReconnect(boolean shouldReconnect)
     }
 
     @Override
+    @Deprecated
     protected void finalize() throws Throwable
     {
         if (!shutdown)

File: src/main/java/net/dv8tion/jda/core/audio/Decoder.java
Patch:
@@ -131,6 +131,7 @@ protected synchronized void close()
     }
 
     @Override
+    @Deprecated
     protected void finalize() throws Throwable
     {
         super.finalize();

File: src/main/java/net/dv8tion/jda/core/entities/impl/MemberImpl.java
Patch:
@@ -159,7 +159,7 @@ public boolean hasPermission(Collection<Permission> permissions)
     {
         Checks.notNull(permissions, "Permission Collection");
 
-        return hasPermission(permissions.toArray(new Permission[permissions.size()]));
+        return hasPermission(permissions.toArray(Permission.EMPTY_PERMISSIONS));
     }
 
     @Override
@@ -173,7 +173,7 @@ public boolean hasPermission(Channel channel, Collection<Permission> permissions
     {
         Checks.notNull(permissions, "Permission Collection");
 
-        return hasPermission(channel, permissions.toArray(new Permission[permissions.size()]));
+        return hasPermission(channel, permissions.toArray(Permission.EMPTY_PERMISSIONS));
     }
 
     @Override

File: src/main/java/net/dv8tion/jda/core/entities/impl/RoleImpl.java
Patch:
@@ -158,7 +158,7 @@ public boolean hasPermission(Collection<Permission> permissions)
     {
         Checks.notNull(permissions, "Permission Collection");
 
-        return hasPermission(permissions.toArray(new Permission[permissions.size()]));
+        return hasPermission(permissions.toArray(Permission.EMPTY_PERMISSIONS));
     }
 
     @Override
@@ -179,7 +179,7 @@ public boolean hasPermission(Channel channel, Collection<Permission> permissions
     {
         Checks.notNull(permissions, "Permission Collection");
 
-        return hasPermission(channel, permissions.toArray(new Permission[permissions.size()]));
+        return hasPermission(channel, permissions.toArray(Permission.EMPTY_PERMISSIONS));
     }
 
     @Override

File: src/main/java/net/dv8tion/jda/core/exceptions/ErrorResponseException.java
Patch:
@@ -135,7 +135,7 @@ else if (optObj.isPresent())
                 // This means that neither code or message is provided
                 //In that case we simply put the raw response in place!
                 code = response.code;
-                meaning = response.getString();
+                meaning = obj.toString();
             }
         }
         else

File: src/main/java/net/dv8tion/jda/core/handle/MessageBulkDeleteHandler.java
Patch:
@@ -37,7 +37,7 @@ protected Long handleInternally(JSONObject content)
 
         if (api.isBulkDeleteSplittingEnabled())
         {
-            SocketHandler handler = api.getClient().getHandler("MESSAGE_DELETE");
+            SocketHandler handler = api.getClient().getHandlers().get("MESSAGE_DELETE");
             content.getJSONArray("ids").forEach(id ->
             {
                 handler.handle(responseNumber, new JSONObject()

File: src/main/java/net/dv8tion/jda/core/requests/RestAction.java
Patch:
@@ -323,6 +323,7 @@ public void queue(Consumer<T> success)
      *         The failure callback that will be called if the Request
      *         encounters an exception at its execution point.
      */
+    @SuppressWarnings("unchecked")
     public void queue(Consumer<T> success, Consumer<Throwable> failure)
     {
         Route.CompiledRoute route = finalizeRoute();
@@ -388,12 +389,12 @@ public T complete()
         {
             return complete(true);
         }
-        catch (RateLimitedException ignored)
+        catch (RateLimitedException e)
         {
             //This is so beyond impossible, but on the off chance that the laws of nature are rewritten
             // after the writing of this code, I'm placing this here.
             //Better safe than sorry?
-            throw new AssertionError(ignored);
+            throw new AssertionError(e);
         }
     }
 

File: src/main/java/net/dv8tion/jda/core/requests/restaction/AuditableRestAction.java
Patch:
@@ -56,6 +56,7 @@ public AuditableRestAction(JDA api, Route.CompiledRoute route, JSONObject data)
     }
 
     @Override
+    @SuppressWarnings("unchecked")
     public AuditableRestAction<T> setCheck(BooleanSupplier checks)
     {
         return (AuditableRestAction) super.setCheck(checks);

File: src/main/java/net/dv8tion/jda/core/requests/restaction/PermissionOverrideAction.java
Patch:
@@ -184,7 +184,7 @@ public long getInherited()
      */
     public List<Permission> getInheritedPermissions()
     {
-        return Permission.getPermissions(getInherited());
+        return Collections.unmodifiableList(Permission.getPermissions(getInherited()));
     }
 
 

File: src/main/java/net/dv8tion/jda/core/requests/restaction/RoleAction.java
Patch:
@@ -237,7 +237,7 @@ public RoleAction setPermissions(Long permissions)
         {
             Checks.notNegative(permissions, "Raw Permissions");
             Checks.check(permissions <= Permission.ALL_PERMISSIONS, "Provided permissions may not be greater than a full permission set!");
-            for (Permission p : Permission.getPermissions(permissions))
+            for (Permission p : Permission.toEnumSet(permissions))
                 checkPermission(p);
         }
         this.permissions = permissions;

File: src/main/java/net/dv8tion/jda/core/requests/restaction/pagination/PaginationAction.java
Patch:
@@ -133,6 +133,7 @@ public PaginationAction(JDA api)
     }
 
     @Override
+    @SuppressWarnings("unchecked")
     public M setCheck(BooleanSupplier checks)
     {
         return (M) super.setCheck(checks);
@@ -227,6 +228,7 @@ public T getFirst()
      *
      * @return The current PaginationAction implementation instance
      */
+    @SuppressWarnings("unchecked")
     public M limit(final int limit)
     {
         Checks.check(maxLimit == 0 || limit <= maxLimit, "Limit must not exceed %d!", maxLimit);
@@ -253,6 +255,7 @@ public M limit(final int limit)
      *
      * @return The current PaginationAction implementation instance
      */
+    @SuppressWarnings("unchecked")
     public M cache(final boolean enableCache)
     {
         this.useCache = enableCache;

File: src/main/java/net/dv8tion/jda/core/utils/cache/CacheView.java
Patch:
@@ -303,9 +303,9 @@ static UnifiedMemberCacheView allMembers(Supplier<Stream<MemberCacheView>> gener
      */
     class SimpleCacheView<T> extends AbstractCacheView<T>
     {
-        public SimpleCacheView(Function<T, String> nameMapper)
+        public SimpleCacheView(Class<T> type, Function<T, String> nameMapper)
         {
-            super(nameMapper);
+            super(type, nameMapper);
         }
     }
 }

File: src/main/java/net/dv8tion/jda/core/utils/cache/impl/SnowflakeCacheViewImpl.java
Patch:
@@ -23,9 +23,9 @@
 
 public class SnowflakeCacheViewImpl<T extends ISnowflake> extends AbstractCacheView<T> implements SnowflakeCacheView<T>
 {
-    public SnowflakeCacheViewImpl(Function<T, String> nameMapper)
+    public SnowflakeCacheViewImpl(Class<T> type, Function<T, String> nameMapper)
     {
-        super(nameMapper);
+        super(type, nameMapper);
     }
 
     @Override

File: src/main/java/net/dv8tion/jda/webhook/WebhookClient.java
Patch:
@@ -326,6 +326,7 @@ public void close()
     }
 
     @Override
+    @Deprecated
     protected void finalize() throws Throwable
     {
         if (!isShutdown)

File: src/main/java/net/dv8tion/jda/core/events/http/HttpRequestEvent.java
Patch:
@@ -27,7 +27,6 @@
 import org.json.JSONArray;
 import org.json.JSONObject;
 
-import java.util.Collections;
 import java.util.Set;
 
 /**

File: src/main/java/net/dv8tion/jda/core/requests/Request.java
Patch:
@@ -89,7 +89,7 @@ public void onFailure(Response response)
         else
         {
             onFailure(ErrorResponseException.create(
-                    ErrorResponse.fromJSON(response.getObject()), response));
+                    ErrorResponse.fromJSON(response.optObject().orElse(null)), response));
         }
     }
 

File: src/main/java/net/dv8tion/jda/core/entities/impl/DataMessage.java
Patch:
@@ -74,7 +74,7 @@ public DataMessage setEmbed(MessageEmbed embed)
     @Override
     public List<MessageEmbed> getEmbeds()
     {
-        return Collections.singletonList(embed);
+        return embed == null ? Collections.emptyList() : Collections.singletonList(embed);
     }
 
     // UNSUPPORTED OPERATIONS ON MESSAGE BUILDER OUTPUT

File: src/main/java/net/dv8tion/jda/core/managers/GuildController.java
Patch:
@@ -954,7 +954,7 @@ protected void handleResponse(Response response, Request<Void> request)
                 if (response.isOk())
                     request.onSuccess(null);
                 else if (response.code == 404)
-                    request.onFailure(new IllegalArgumentException("User with provided id \"" + userId + "\" does not exist! Cannot unban a non-existent user!"));
+                    request.onFailure(new IllegalArgumentException("User with provided id \"" + userId + "\" is not banned! Cannot unban a user who is not currently banned!"));
                 else
                     request.onFailure(response);
             }

File: src/main/java/net/dv8tion/jda/core/requests/restaction/MessageAction.java
Patch:
@@ -603,7 +603,7 @@ else if (!isEmpty())
     protected void handleResponse(Response response, Request<Message> request)
     {
         if (response.isOk())
-            request.onSuccess(api.getEntityBuilder().createMessage(response.getObject()));
+            request.onSuccess(api.getEntityBuilder().createMessage(response.getObject(), channel, false));
         else
             request.onFailure(response);
     }

File: src/main/java/net/dv8tion/jda/bot/sharding/DefaultShardManagerBuilder.java
Patch:
@@ -624,7 +624,8 @@ public DefaultShardManagerBuilder setShards(final int minShardId, final int maxS
     public DefaultShardManagerBuilder setShards(Collection<Integer> shardIds)
     {
         Checks.notNull(shardIds, "shardIds");
-        for (Integer id : shards) {
+        for (Integer id : shardIds)
+        {
             Checks.notNegative(id, "minShardId");
             Checks.check(id < this.shardsTotal, "maxShardId must be lower than shardsTotal");
         }

File: src/main/java/net/dv8tion/jda/bot/sharding/DefaultShardManagerBuilder.java
Patch:
@@ -624,7 +624,8 @@ public DefaultShardManagerBuilder setShards(final int minShardId, final int maxS
     public DefaultShardManagerBuilder setShards(Collection<Integer> shardIds)
     {
         Checks.notNull(shardIds, "shardIds");
-        for (Integer id : shardIds) {
+        for (Integer id : shardIds)
+        {
             Checks.notNegative(id, "minShardId");
             Checks.check(id < this.shardsTotal, "maxShardId must be lower than shardsTotal");
         }

File: src/main/java/net/dv8tion/jda/bot/sharding/DefaultShardManagerBuilder.java
Patch:
@@ -624,7 +624,7 @@ public DefaultShardManagerBuilder setShards(final int minShardId, final int maxS
     public DefaultShardManagerBuilder setShards(Collection<Integer> shardIds)
     {
         Checks.notNull(shardIds, "shardIds");
-        for (Integer id : shards) {
+        for (Integer id : shardIds) {
             Checks.notNegative(id, "minShardId");
             Checks.check(id < this.shardsTotal, "maxShardId must be lower than shardsTotal");
         }

File: src/main/java/net/dv8tion/jda/core/requests/restaction/MessageAction.java
Patch:
@@ -103,8 +103,7 @@ public MessageAction(JDA api, Route.CompiledRoute route, MessageChannel channel,
     public boolean isEmpty()
     {
         return Helpers.isBlank(content)
-            && (!hasPermission(Permission.MESSAGE_EMBED_LINKS)
-                || embed == null || embed.getLength() == 0);
+            && (embed == null || embed.isEmpty() || !hasPermission(Permission.MESSAGE_EMBED_LINKS));
     }
 
     /**
@@ -248,7 +247,7 @@ public MessageAction embed(final MessageEmbed embed)
         {
             final AccountType type = getJDA().getAccountType();
             Checks.check(embed.isSendable(type),
-                "Provided Message contains an embed with a length greater than %d characters, which is the max for %s accounts!",
+                "Provided Message contains an empty embed or an embed with a length greater than %d characters, which is the max for %s accounts!",
                 type == AccountType.BOT ? MessageEmbed.EMBED_MAX_LENGTH_BOT : MessageEmbed.EMBED_MAX_LENGTH_CLIENT, type);
         }
         this.embed = embed;

File: src/main/java/net/dv8tion/jda/webhook/WebhookMessageBuilder.java
Patch:
@@ -124,7 +124,7 @@ public WebhookMessageBuilder addEmbeds(MessageEmbed... embeds)
         {
             Checks.notNull(embed, "Embed");
             Checks.check(embed.isSendable(AccountType.BOT),
-                "One of the provided embeds exceeds the maximum character count of %d!", MessageEmbed.EMBED_MAX_LENGTH_BOT);
+                "One of the provided embeds is empty or exceeds the maximum character count of %d!", MessageEmbed.EMBED_MAX_LENGTH_BOT);
             this.embeds.add(embed);
         }
         return this;
@@ -152,7 +152,7 @@ public WebhookMessageBuilder addEmbeds(Collection<MessageEmbed> embeds)
         {
             Checks.notNull(embed, "Embed");
             Checks.check(embed.isSendable(AccountType.BOT),
-                "One of the provided embeds exceeds the maximum character count of %d!", MessageEmbed.EMBED_MAX_LENGTH_BOT);
+                "One of the provided embeds is empty or exceeds the maximum character count of %d!", MessageEmbed.EMBED_MAX_LENGTH_BOT);
             this.embeds.add(embed);
         }
         return this;

File: src/main/java/net/dv8tion/jda/core/entities/MessageChannel.java
Patch:
@@ -2049,9 +2049,8 @@ default RestAction<Void> removeReactionById(String messageId, String unicode)
         Checks.noWhitespace(messageId, "Message ID");
         Checks.noWhitespace(unicode, "Emoji");
 
-        final String selfId = getJDA().getSelfUser().getId();
         final String code = MiscUtil.encodeUTF8(unicode);
-        final Route.CompiledRoute route = Route.Messages.REMOVE_REACTION.compile(getId(), messageId, code, selfId);
+        final Route.CompiledRoute route = Route.Messages.REMOVE_OWN_REACTION.compile(getId(), messageId, code);
         return new RestAction<Void>(getJDA(), route)
         {
             @Override

File: src/main/java/net/dv8tion/jda/core/requests/Route.java
Patch:
@@ -198,6 +198,7 @@ public static class Messages
 
         public static final Route ADD_REACTION =             new Route(PUT,    new RateLimit(1, 250),
                                                                                "channels/{channel_id}/messages/{message_id}/reactions/{reaction_code}/@me",       "channel_id");
+        public static final Route REMOVE_OWN_REACTION =      new Route(DELETE, "channels/{channel_id}/messages/{message_id}/reactions/{reaction_code}/@me",       "channel_id");
         public static final Route REMOVE_REACTION =          new Route(DELETE, "channels/{channel_id}/messages/{message_id}/reactions/{reaction_code}/{user_id}", "channel_id");
         public static final Route REMOVE_ALL_REACTIONS =     new Route(DELETE, "channels/{channel_id}/messages/{message_id}/reactions",                           "channel_id");
         public static final Route GET_REACTION_USERS =       new Route(GET,    "channels/{channel_id}/messages/{message_id}/reactions/{reaction_code}",           "channel_id");

File: src/main/java/net/dv8tion/jda/core/requests/Requester.java
Patch:
@@ -44,7 +44,7 @@ public class Requester
     public static final MediaType MEDIA_TYPE_JSON = MediaType.parse("application/json; charset=utf-8");
     public static final RequestBody EMPTY_BODY = RequestBody.create(null, new byte[]{});
 
-    private final JDAImpl api;
+    protected final JDAImpl api;
     private final RateLimiter rateLimiter;
 
     private final OkHttpClient httpClient;

File: src/main/java/net/dv8tion/jda/bot/sharding/DefaultShardManager.java
Patch:
@@ -488,7 +488,7 @@ else if (api.getStatus() == JDA.Status.RECONNECT_QUEUED)
     protected JDAImpl buildInstance(final int shardId) throws LoginException, RateLimitedException
     {
         final JDAImpl jda = new JDAImpl(AccountType.BOT, this.token, this.httpClientBuilder, this.wsFactory, this.shardedRateLimiter,
-            this.autoReconnect, this.enableVoice, this.enableBulkDeleteSplitting, this.enableBulkDeleteSplitting, retryOnTimeout,
+            this.autoReconnect, this.enableVoice, false, this.enableBulkDeleteSplitting, retryOnTimeout,
             this.corePoolSize, this.maxReconnectDelay);
 
         jda.asBot().setShardManager(this);

File: src/main/java/net/dv8tion/jda/core/entities/impl/ReceivedMessage.java
Patch:
@@ -531,7 +531,7 @@ public String getContentDisplay()
                     name = getGuild().getMember(user).getEffectiveName();
                 else
                     name = user.getName();
-                tmp = tmp.replaceAll("<@!?" + user.getId() + '>', '@' + name);
+                tmp = tmp.replaceAll("<@!?" + Pattern.quote(user.getId()) + '>', '@' + Matcher.quoteReplacement(name));
             }
             for (Emote emote : getEmotes())
             {

File: src/main/java/net/dv8tion/jda/core/handle/MessageUpdateHandler.java
Patch:
@@ -125,6 +125,7 @@ private Long handleMessage(JSONObject content)
                         new PrivateMessageUpdateEvent(
                                 api, responseNumber,
                                 message));
+                break;
             }
             case GROUP:
             {

File: src/examples/java/MessageListenerExample.java
Patch:
@@ -96,7 +96,7 @@ public void onMessageReceived(MessageReceivedEvent event)
         MessageChannel channel = event.getChannel();    //This is the MessageChannel that the message was sent to.
                                                         //  This could be a TextChannel, PrivateChannel, or Group!
 
-        String msg = message.getContent();              //This returns a human readable version of the Message. Similar to
+        String msg = message.getContentDisplay();              //This returns a human readable version of the Message. Similar to
                                                         // what you would see in the client.
 
         boolean bot = author.isBot();                    //This boolean is useful to determine if the User that
@@ -147,7 +147,7 @@ else if (event.isFromType(ChannelType.GROUP))   //If this message was sent to a
         //This will be an extremely simplified example of command processing.
 
         //Remember, in all of these .equals checks it is actually comparing
-        // message.getContent().equals, which is comparing a string to a string.
+        // message.getContentDisplay().equals, which is comparing a string to a string.
         // If you did message.equals() it will fail because you would be comparing a Message to a String!
         if (msg.equals("!ping"))
         {

File: src/main/java/net/dv8tion/jda/client/managers/ApplicationManager.java
Patch:
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 
 package net.dv8tion.jda.client.managers;

File: src/main/java/net/dv8tion/jda/client/managers/ApplicationManagerUpdatable.java
Patch:
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 
 package net.dv8tion.jda.client.managers;

File: src/main/java/net/dv8tion/jda/core/entities/impl/AbstractChannelImpl.java
Patch:
@@ -235,10 +235,8 @@ protected void handleResponse(final Response response, final Request<List<Invite
                     JSONArray array = response.getArray();
                     List<Invite> invites = new ArrayList<>(array.length());
                     for (int i = 0; i < array.length(); i++)
-                    {
                         invites.add(entityBuilder.createInvite(array.getJSONObject(i)));
-                    }
-                    request.onSuccess(invites);
+                    request.onSuccess(Collections.unmodifiableList(invites));
                 }
                 else
                 {

File: src/main/java/net/dv8tion/jda/core/events/message/MessageDeleteEvent.java
Patch:
@@ -24,6 +24,9 @@
  * Fired if a Message was deleted in a {@link net.dv8tion.jda.core.entities.MessageChannel MessageChannel}.<br>
  * <br>
  * Use: Detect when a Message is deleted. No matter if private or guild.
+ *
+ * <p><b>JDA does not have a cache for messages and is not able to provide previous information due to limitations by the
+ * Discord API!</b>
  */
 public class MessageDeleteEvent extends GenericMessageEvent
 {

File: src/main/java/net/dv8tion/jda/core/events/message/MessageUpdateEvent.java
Patch:
@@ -24,6 +24,9 @@
  * Fired if a Message is edited in a {@link net.dv8tion.jda.core.entities.MessageChannel MessageChannel}.<br>
  * <br>
  * Use: This event indicates that a Message is edited in either a private or guild channel. Providing a MessageChannel and Message.
+ *
+ * <p><b>JDA does not have a cache for messages and is not able to provide previous information due to limitations by the
+ * Discord API!</b>
  */
 public class MessageUpdateEvent extends GenericMessageEvent
 {

File: src/main/java/net/dv8tion/jda/core/handle/GuildMemberUpdateHandler.java
Patch:
@@ -111,7 +111,7 @@ protected Long handleInternally(JSONObject content)
         if (content.has("nick"))
         {
             String prevNick = member.getNickname();
-            String newNick = content.isNull("nick") ? null : content.getString("nick");
+            String newNick = content.optString("nick", null);
             if (!Objects.equals(prevNick, newNick))
             {
                 member.setNickname(newNick);

File: src/main/java/net/dv8tion/jda/core/handle/MessageDeleteHandler.java
Patch:
@@ -71,7 +71,7 @@ protected Long handleInternally(JSONObject content)
                 return tChan.getGuild().getIdLong();
             }
             if (tChan.hasLatestMessage() && messageId == channel.getLatestMessageIdLong())
-                tChan.setLastMessageId(-1); // Reset latest message id as it was deleted.
+                tChan.setLastMessageId(0); // Reset latest message id as it was deleted.
             api.getEventManager().handle(
                     new GuildMessageDeleteEvent(
                             api, responseNumber,
@@ -81,7 +81,7 @@ else if (channel instanceof PrivateChannel)
         {
             PrivateChannelImpl pChan = (PrivateChannelImpl) channel;
             if (channel.hasLatestMessage() && messageId == channel.getLatestMessageIdLong())
-                pChan.setLastMessageId(-1); // Reset latest message id as it was deleted.
+                pChan.setLastMessageId(0); // Reset latest message id as it was deleted.
             api.getEventManager().handle(
                     new PrivateMessageDeleteEvent(
                             api, responseNumber,
@@ -91,7 +91,7 @@ else if (channel instanceof PrivateChannel)
         {
             GroupImpl group = (GroupImpl) channel;
             if (channel.hasLatestMessage() && messageId == channel.getLatestMessageIdLong())
-                group.setLastMessageId(-1); // Reset latest message id as it was deleted.
+                group.setLastMessageId(0); // Reset latest message id as it was deleted.
             api.getEventManager().handle(
                     new GroupMessageDeleteEvent(
                             api, responseNumber,

File: src/main/java/net/dv8tion/jda/core/handle/PresenceUpdateHandler.java
Patch:
@@ -72,7 +72,7 @@ protected Long handleInternally(JSONObject content)
             {
                 String name = jsonUser.getString("username");
                 String discriminator = jsonUser.get("discriminator").toString();
-                String avatarId = jsonUser.isNull("avatar") ? null : jsonUser.getString("avatar");
+                String avatarId = jsonUser.optString("avatar", null);
 
                 if (!user.getName().equals(name))
                 {

File: src/main/java/net/dv8tion/jda/core/handle/VoiceStateUpdateHandler.java
Patch:
@@ -198,8 +198,8 @@ else if (channel == null)
     private void handleCallVoiceState(JSONObject content)
     {
         final long userId = content.getLong("user_id");
-        final Long channelId = !content.isNull("channel_id") ? content.getLong("channel_id") : null;
-        String sessionId = !content.isNull("session_id") ? content.getString("session_id") : null;
+        final Long channelId = content.isNull("channel_id") ? null : content.getLong("channel_id");
+        String sessionId = content.optString("session_id", null);
         boolean selfMuted = content.getBoolean("self_mute");
         boolean selfDeafened = content.getBoolean("self_deaf");
 

File: src/main/java/net/dv8tion/jda/core/hooks/AnnotatedEventManager.java
Patch:
@@ -36,7 +36,7 @@
  *        {@literal @SubscribeEvent}
  *         public void onMsg(MessageReceivedEvent event)
  *         {
- *             System.out.printf("%s: %s\n", event.getAuthor().getName(), event.getMessage().getContent());
+ *             System.out.printf("%s: %s\n", event.getAuthor().getName(), event.getMessage().getContentDisplay());
  *         }
  *     }
  * </code></pre>

File: src/main/java/net/dv8tion/jda/core/managers/AudioManager.java
Patch:
@@ -56,9 +56,6 @@ public interface AudioManager
      *             <li>If the provided channel was {@code null}.</li>
      *             <li>If the provided channel is not part of the Guild that the current audio connection is connected to.</li>
      *         </ul>
-     * @throws IllegalStateException
-     *         This will  be thrown if JDA is currently attempting to setup an audio connection.
-     *         <br>For this situation, first checking {@link #isAttemptingToConnect()} is advised.
      * @throws UnsupportedOperationException
      *         If audio is disabled due to an internal JDA error
      * @throws net.dv8tion.jda.core.exceptions.GuildUnavailableException

File: src/main/java/net/dv8tion/jda/core/managers/ChannelManager.java
Patch:
@@ -230,7 +230,7 @@ public AuditableRestAction<Void> setNSFW(boolean nsfw)
      * @throws net.dv8tion.jda.core.exceptions.InsufficientPermissionException
      *         If the currently logged in account does not have the Permission {@link net.dv8tion.jda.core.Permission#MANAGE_CHANNEL MANAGE_CHANNEL}
      * @throws UnsupportedOperationException
-     *         If the selected {@link net.dv8tion.jda.core.entities.Channel Channel}'s type is not {@link net.dv8tion.jda.core.entities.ChannelType#TEXT TEXT}
+     *         If the selected {@link net.dv8tion.jda.core.entities.Channel Channel}'s type is not {@link net.dv8tion.jda.core.entities.ChannelType#VOICE VOICE}
      * @throws IllegalArgumentException
      *         If the provided user-limit is negative or greater than {@code 99}
      *

File: src/main/java/net/dv8tion/jda/core/managers/GuildController.java
Patch:
@@ -37,6 +37,7 @@
 import net.dv8tion.jda.core.requests.restaction.order.ChannelOrderAction;
 import net.dv8tion.jda.core.requests.restaction.order.RoleOrderAction;
 import net.dv8tion.jda.core.utils.Checks;
+import net.dv8tion.jda.core.utils.Helpers;
 import net.dv8tion.jda.core.utils.MiscUtil;
 import net.dv8tion.jda.core.utils.PermissionUtil;
 import org.json.JSONArray;
@@ -2139,7 +2140,7 @@ protected void handleResponse(Response response, Request<Emote> request)
                 JSONObject obj = response.getObject();
                 final long id = obj.getLong("id");
                 final String name = obj.getString("name");
-                final boolean managed = !obj.isNull("managed") && obj.getBoolean("managed");
+                final boolean managed = Helpers.optBoolean(obj, "managed");
                 EmoteImpl emote = new EmoteImpl(id, guild).setName(name).setManaged(managed);
 
                 JSONArray rolesArr = obj.getJSONArray("roles");

File: src/main/java/net/dv8tion/jda/webhook/WebhookMessage.java
Patch:
@@ -18,7 +18,6 @@
 
 import net.dv8tion.jda.core.entities.Message;
 import net.dv8tion.jda.core.entities.MessageEmbed;
-import net.dv8tion.jda.core.entities.impl.MessageEmbedImpl;
 import net.dv8tion.jda.core.requests.Requester;
 import net.dv8tion.jda.core.utils.Checks;
 import net.dv8tion.jda.core.utils.MiscUtil;
@@ -109,7 +108,7 @@ public static WebhookMessage of(Collection<MessageEmbed> embeds)
     public static WebhookMessage from(Message message)
     {
         Checks.notNull(message, "Message");
-        final String content = message.getRawContent();
+        final String content = message.getContentRaw();
         final List<MessageEmbed> embeds = message.getEmbeds();
         final boolean isTTS = message.isTTS();
         return new WebhookMessage(null, null, content, embeds, isTTS, null, null);
@@ -134,7 +133,7 @@ protected RequestBody getBody()
         {
             final JSONArray array = new JSONArray();
             for (MessageEmbed embed : embeds)
-                array.put(((MessageEmbedImpl) embed).toJSONObject());
+                array.put(embed.toJSONObject());
             payload.put("embeds", array);
         }
         if (avatarUrl != null)

File: src/main/java/net/dv8tion/jda/webhook/WebhookMessageBuilder.java
Patch:
@@ -53,7 +53,7 @@ public WebhookMessageBuilder(Message message)
         if (message != null)
         {
             embeds.addAll(message.getEmbeds());
-            setContent(message.getRawContent());
+            setContent(message.getContentRaw());
             isTTS = message.isTTS();
         }
     }

File: src/main/java/net/dv8tion/jda/core/JDABuilder.java
Patch:
@@ -375,7 +375,7 @@ public JDABuilder setIdle(boolean idle)
      * <br>This value can be changed at any time in the {@link net.dv8tion.jda.core.managers.Presence Presence} from a JDA instance.
      *
      * <p><b>Hint:</b> You can create a {@link net.dv8tion.jda.core.entities.Game Game} object using
-     * {@link net.dv8tion.jda.core.entities.Game#of(String)} or {@link net.dv8tion.jda.core.entities.Game#of(String, String)}.
+     * {@link net.dv8tion.jda.core.entities.Game#playing(String)} or {@link net.dv8tion.jda.core.entities.Game#streaming(String, String)}.
      *
      * @param  game
      *         An instance of {@link net.dv8tion.jda.core.entities.Game Game} (null allowed)

File: src/main/java/net/dv8tion/jda/core/utils/WidgetUtil.java
Patch:
@@ -551,7 +551,7 @@ private Member(JSONObject json, Widget widget)
                 this.status = OnlineStatus.fromKey(json.getString("status"));
                 this.game = json.isNull("game") ? null : 
                             json.getJSONObject("game").isNull("name") || json.getJSONObject("game").getString("name").isEmpty() ? null :
-                            Game.of(json.getJSONObject("game").getString("name"));
+                            Game.playing(json.getJSONObject("game").getString("name"));
             }
             
             private void setVoiceState(VoiceState voiceState)

File: src/main/java/net/dv8tion/jda/core/requests/WebSocketClient.java
Patch:
@@ -829,6 +829,7 @@ protected void invalidate()
         chunkingAndSyncing = false;
         sentAuthInfo = false;
 
+        chunkSyncQueue.clear();
         api.getTextChannelMap().clear();
         api.getVoiceChannelMap().clear();
         api.getCategoryMap().clear();

File: src/main/java/net/dv8tion/jda/client/handle/CallCreateHandler.java
Patch:
@@ -52,7 +52,7 @@ protected Long handleInternally(JSONObject content)
         if (channel == null)
         {
             api.getEventCache().cache(EventCache.Type.CHANNEL, channelId, () -> handle(responseNumber, allContent));
-            EventCache.LOG.debug("Received a CALL_CREATE for a Group/PrivateChannel that is not yet cached. JSON: " + content);
+            EventCache.LOG.debug("Received a CALL_CREATE for a Group/PrivateChannel that is not yet cached. JSON: {}", content);
             return null;
         }
 
@@ -64,7 +64,7 @@ protected Long handleInternally(JSONObject content)
         {
             GroupImpl group = (GroupImpl) channel;
             if (group.getCurrentCall() != null)
-                WebSocketClient.LOG.fatal("Received a CALL_CREATE for a Group that already has an active call cached! JSON: " + content);
+                WebSocketClient.LOG.error("Received a CALL_CREATE for a Group that already has an active call cached! JSON: {}", content);
             group.setCurrentCall(call);
             group.getUserMap().forEachEntry((userId, user) ->
             {
@@ -88,7 +88,7 @@ protected Long handleInternally(JSONObject content)
         {
             PrivateChannelImpl priv = (PrivateChannelImpl) channel;
             if (priv.getCurrentCall() != null)
-                WebSocketClient.LOG.fatal("Received a CALL_CREATE for a PrivateChannel that already has an active call cached! JSON: " + content);
+                WebSocketClient.LOG.error("Received a CALL_CREATE for a PrivateChannel that already has an active call cached! JSON: {}", content);
             priv.setCurrentCall(call);
             callUsers.put(priv.getUser().getIdLong(), new CallUserImpl(call, priv.getUser()));
             callUsers.put(api.getSelfUser().getIdLong(), new CallUserImpl(call, api.getSelfUser()));

File: src/main/java/net/dv8tion/jda/client/handle/CallDeleteHandler.java
Patch:
@@ -45,15 +45,15 @@ protected Long handleInternally(JSONObject content)
         if (channel == null)
         {
             api.getEventCache().cache(EventCache.Type.CHANNEL, channelId, () -> handle(responseNumber, allContent));
-            EventCache.LOG.debug("Received CALL_DELETE for a Group/PrivateChannel that is not yet cached. JSON: " + content);
+            EventCache.LOG.debug("Received CALL_DELETE for a Group/PrivateChannel that is not yet cached. JSON: {}", content);
             return null;
         }
 
         CallImpl call = (CallImpl) channel.getCurrentCall();
         if (call == null)
         {
             api.getEventCache().cache(EventCache.Type.CALL, channelId, () -> handle(responseNumber, allContent));
-            EventCache.LOG.debug("Received a CALL_DELETE for a Call that is not yet cached. JSON: " + content);
+            EventCache.LOG.debug("Received a CALL_DELETE for a Call that is not yet cached. JSON: {}", content);
             return null;
         }
 

File: src/main/java/net/dv8tion/jda/client/handle/CallUpdateHandler.java
Patch:
@@ -53,15 +53,15 @@ protected Long handleInternally(JSONObject content)
         if (channel == null)
         {
             api.getEventCache().cache(EventCache.Type.CHANNEL, channelId, () -> handle(responseNumber, allContent));
-            EventCache.LOG.debug("Received a CALL_UPDATE for a Group/PrivateChannel that has not yet been cached. JSON: " + content);
+            EventCache.LOG.debug("Received a CALL_UPDATE for a Group/PrivateChannel that has not yet been cached. JSON: {}", content);
             return null;
         }
 
         CallImpl call = (CallImpl) channel.getCurrentCall();
         if (call == null)
         {
             api.getEventCache().cache(EventCache.Type.CALL, channelId, () -> handle(responseNumber, allContent));
-            EventCache.LOG.debug("Received a CALL_UPDATE for a Call that has not yet been cached. JSON: " + content);
+            EventCache.LOG.debug("Received a CALL_UPDATE for a Call that has not yet been cached. JSON: {}", content);
             return null;
         }
 

File: src/main/java/net/dv8tion/jda/client/handle/ChannelRecipientAddHandler.java
Patch:
@@ -44,7 +44,7 @@ protected Long handleInternally(JSONObject content)
         if (group == null)
         {
             api.getEventCache().cache(EventCache.Type.CHANNEL, groupId, () -> handle(responseNumber, allContent));
-            EventCache.LOG.debug("Received a CHANNEL_RECIPIENT_ADD for a group that is not yet cached! JSON: " + content);
+            EventCache.LOG.debug("Received a CHANNEL_RECIPIENT_ADD for a group that is not yet cached! JSON: {}", content);
             return null;
         }
 

File: src/main/java/net/dv8tion/jda/client/handle/ChannelRecipientRemoveHandler.java
Patch:
@@ -42,15 +42,15 @@ protected Long handleInternally(JSONObject content)
         if (group == null)
         {
             api.getEventCache().cache(EventCache.Type.CHANNEL, groupId, () -> handle(responseNumber, allContent));
-            EventCache.LOG.debug("Received a CHANNEL_RECIPIENT_REMOVE for a group that is not yet cached! JSON: " + content);
+            EventCache.LOG.debug("Received a CHANNEL_RECIPIENT_REMOVE for a group that is not yet cached! JSON: {}", content);
             return null;
         }
 
         User user = group.getUserMap().remove(userId);
         if (user == null)
         {
             api.getEventCache().cache(EventCache.Type.USER, userId, () -> handle(responseNumber, allContent));
-            EventCache.LOG.debug("Received a CHANNEL_RECIPIENT_REMOVE for a user that is not yet cached in the group! JSON: " + content);
+            EventCache.LOG.debug("Received a CHANNEL_RECIPIENT_REMOVE for a user that is not yet cached in the group! JSON: {}", content);
             return null;
         }
 

File: src/main/java/net/dv8tion/jda/client/handle/RelationshipAddHandler.java
Patch:
@@ -41,7 +41,7 @@ protected Long handleInternally(JSONObject content)
         Relationship relationship = api.getEntityBuilder().createRelationship(content);
         if (relationship == null)
         {
-            WebSocketClient.LOG.warn("Received a RELATIONSHIP_ADD with an unknown type! JSON: " + content);
+            WebSocketClient.LOG.warn("Received a RELATIONSHIP_ADD with an unknown type! JSON: {}", content);
             return null;
         }
         switch (relationship.getType())
@@ -71,7 +71,7 @@ protected Long handleInternally(JSONObject content)
                                 relationship));
                 break;
             default:
-                WebSocketClient.LOG.warn("Received a RELATIONSHIP_ADD with an unknown type! JSON: " + content);
+                WebSocketClient.LOG.warn("Received a RELATIONSHIP_ADD with an unknown type! JSON: {}", content);
                 return null;
         }
         api.getEventCache().playbackCache(EventCache.Type.RELATIONSHIP, relationship.getUser().getIdLong());

File: src/main/java/net/dv8tion/jda/client/handle/RelationshipRemoveHandler.java
Patch:
@@ -58,7 +58,7 @@ protected Long handleInternally(JSONObject content)
         if (relationship == null)
         {
             api.getEventCache().cache(EventCache.Type.RELATIONSHIP, userId, () -> handle(responseNumber, allContent));
-            EventCache.LOG.debug("Received a RELATIONSHIP_REMOVE for a relationship that was not yet cached! JSON: " + content);
+            EventCache.LOG.debug("Received a RELATIONSHIP_REMOVE for a relationship that was not yet cached! JSON: {}", content);
             return null;
         }
         ((JDAClientImpl) api.asClient()).getRelationshipMap().remove(userId);
@@ -136,7 +136,7 @@ protected Long handleInternally(JSONObject content)
                                 relationship));
                 break;
             default:
-                WebSocketClient.LOG.warn("Received a RELATIONSHIP_REMOVE with an unknown RelationshipType! JSON: " + content);
+                WebSocketClient.LOG.warn("Received a RELATIONSHIP_REMOVE with an unknown RelationshipType! JSON: {}", content);
                 return null;
         }
         api.getEventCache().clear(EventCache.Type.RELATIONSHIP, userId);

File: src/main/java/net/dv8tion/jda/core/audio/Decoder.java
Patch:
@@ -118,7 +118,7 @@ private void handleDecodeError(int result)
             default:
                 b.append(result);
         }
-        AudioConnection.LOG.debug(b.toString());
+        AudioConnection.LOG.debug("{}", b);
     }
 
     protected synchronized void close()

File: src/main/java/net/dv8tion/jda/core/audio/factory/DefaultSendSystem.java
Patch:
@@ -18,7 +18,7 @@
 
 import net.dv8tion.jda.core.audio.AudioConnection;
 import net.dv8tion.jda.core.managers.impl.AudioManagerImpl;
-import net.dv8tion.jda.core.utils.SimpleLog;
+import net.dv8tion.jda.core.utils.JDALogger;
 
 import java.net.DatagramPacket;
 import java.net.DatagramSocket;
@@ -69,7 +69,7 @@ public void start()
                 }
                 catch (Exception e)
                 {
-                    AudioConnection.LOG.fatal(e);
+                    AudioConnection.LOG.error("Error while sending udp audio data", e);
                 }
                 finally
                 {
@@ -99,7 +99,7 @@ public void start()
         });
         sendThread.setUncaughtExceptionHandler((thread, throwable) ->
         {
-            SimpleLog.getLog(DefaultSendSystem.class).fatal(throwable);
+            JDALogger.getLog(DefaultSendSystem.class).error("Uncaught exception in audio send thread", throwable);
             start();
         });
         sendThread.setDaemon(true);

File: src/main/java/net/dv8tion/jda/core/entities/Message.java
Patch:
@@ -825,7 +825,7 @@ public boolean download(File file)
             }
             catch (Exception e)
             {
-                JDAImpl.LOG.fatal(e);
+                JDAImpl.LOG.error("Error while downloading an attachment", e);
             }
             finally
             {

File: src/main/java/net/dv8tion/jda/core/entities/impl/GuildImpl.java
Patch:
@@ -166,7 +166,7 @@ protected void handleResponse(Response response, Request<List<Webhook>> request)
                     }
                     catch (JSONException | NullPointerException e)
                     {
-                        JDAImpl.LOG.fatal(e);
+                        JDAImpl.LOG.error("Error creating webhook from json", e);
                     }
                 }
 

File: src/main/java/net/dv8tion/jda/core/entities/impl/JDAImpl.java
Patch:
@@ -42,14 +42,15 @@
 import net.dv8tion.jda.core.requests.restaction.AuditableRestAction;
 import net.dv8tion.jda.core.requests.restaction.GuildAction;
 import net.dv8tion.jda.core.utils.Checks;
+import net.dv8tion.jda.core.utils.JDALogger;
 import net.dv8tion.jda.core.utils.MiscUtil;
-import net.dv8tion.jda.core.utils.SimpleLog;
 import net.dv8tion.jda.core.utils.cache.CacheView;
 import net.dv8tion.jda.core.utils.cache.SnowflakeCacheView;
 import net.dv8tion.jda.core.utils.cache.impl.AbstractCacheView;
 import net.dv8tion.jda.core.utils.cache.impl.SnowflakeCacheViewImpl;
 import okhttp3.OkHttpClient;
 import org.json.JSONObject;
+import org.slf4j.Logger;
 
 import javax.security.auth.login.LoginException;
 import java.util.*;
@@ -60,7 +61,7 @@
 
 public class JDAImpl implements JDA
 {
-    public static final SimpleLog LOG = SimpleLog.getLog(JDA.class);
+    public static final Logger LOG = JDALogger.getLog(JDA.class);
 
     public final ScheduledThreadPoolExecutor pool;
 

File: src/main/java/net/dv8tion/jda/core/entities/impl/TextChannelImpl.java
Patch:
@@ -86,7 +86,7 @@ protected void handleResponse(Response response, Request<List<Webhook>> request)
                     }
                     catch (JSONException | NullPointerException e)
                     {
-                        JDAImpl.LOG.fatal(e);
+                        JDAImpl.LOG.error("Error while creating websocket from json", e);
                     }
                 }
 

File: src/main/java/net/dv8tion/jda/core/handle/GuildBanHandler.java
Patch:
@@ -20,6 +20,7 @@
 import net.dv8tion.jda.core.entities.impl.JDAImpl;
 import net.dv8tion.jda.core.events.guild.GuildBanEvent;
 import net.dv8tion.jda.core.events.guild.GuildUnbanEvent;
+import net.dv8tion.jda.core.utils.JDALogger;
 import org.json.JSONObject;
 
 public class GuildBanHandler extends SocketHandler
@@ -44,7 +45,7 @@ protected Long handleInternally(JSONObject content)
         if (guild == null)
         {
             api.getEventCache().cache(EventCache.Type.GUILD, id, () -> handle(responseNumber, allContent));
-            EventCache.LOG.debug("Received Guild Member " + (banned ? "Ban" : "Unban") + " event for a Guild not yet cached.");
+            EventCache.LOG.debug("Received Guild Member {} event for a Guild not yet cached.", JDALogger.getLazyString(() -> banned ? "Ban" : "Unban"));
             return null;
         }
 

File: src/main/java/net/dv8tion/jda/core/handle/GuildDeleteHandler.java
Patch:
@@ -53,7 +53,7 @@ protected Long handleInternally(JSONObject content)
         if (guild == null)
         {
             api.getEventCache().cache(EventCache.Type.GUILD, id, () -> handle(responseNumber, allContent));
-            EventCache.LOG.debug("Received GUILD_DELETE for a Guild that is not currently cached. ID: " + id);
+            EventCache.LOG.debug("Received GUILD_DELETE for a Guild that is not currently cached. ID: {}", id);
             return null;
         }
 

File: src/main/java/net/dv8tion/jda/core/handle/GuildMemberUpdateHandler.java
Patch:
@@ -51,7 +51,7 @@ protected Long handleInternally(JSONObject content)
             {
                 handle(responseNumber, allContent);
             });
-            EventCache.LOG.debug("Got GuildMember update but JDA currently does not have the Guild cached. " + content.toString());
+            EventCache.LOG.debug("Got GuildMember update but JDA currently does not have the Guild cached. {}", content);
             return null;
         }
 
@@ -62,7 +62,7 @@ protected Long handleInternally(JSONObject content)
             {
                 handle(responseNumber, allContent);
             });
-            EventCache.LOG.debug("Got GuildMember update but Member is not currently present in Guild. " + content.toString());
+            EventCache.LOG.debug("Got GuildMember update but Member is not currently present in Guild. {}", content);
             return null;
         }
 

File: src/main/java/net/dv8tion/jda/core/handle/GuildRoleCreateHandler.java
Patch:
@@ -42,7 +42,7 @@ protected Long handleInternally(JSONObject content)
         if (guild == null)
         {
             api.getEventCache().cache(EventCache.Type.GUILD, guildId, () -> handle(responseNumber, allContent));
-            EventCache.LOG.debug("GUILD_ROLE_CREATE was received for a Guild that is not yet cached: " + content);
+            EventCache.LOG.debug("GUILD_ROLE_CREATE was received for a Guild that is not yet cached: {}", content);
             return null;
         }
 

File: src/main/java/net/dv8tion/jda/core/handle/GuildRoleDeleteHandler.java
Patch:
@@ -42,7 +42,7 @@ protected Long handleInternally(JSONObject content)
         if (guild == null)
         {
             api.getEventCache().cache(EventCache.Type.GUILD, guildId, () -> handle(responseNumber, allContent));
-            EventCache.LOG.debug("GUILD_ROLE_DELETE was received for a Guild that is not yet cached: " + content);
+            EventCache.LOG.debug("GUILD_ROLE_DELETE was received for a Guild that is not yet cached: {}", content);
             return null;
         }
 
@@ -51,7 +51,7 @@ protected Long handleInternally(JSONObject content)
         if (removedRole == null)
         {
             api.getEventCache().cache(EventCache.Type.ROLE, roleId, () -> handle(responseNumber, allContent));
-            EventCache.LOG.debug("GUILD_ROLE_DELETE was received for a Role that is not yet cached: " + content);
+            EventCache.LOG.debug("GUILD_ROLE_DELETE was received for a Role that is not yet cached: {}", content);
             return null;
         }
 

File: src/main/java/net/dv8tion/jda/core/handle/GuildRoleUpdateHandler.java
Patch:
@@ -44,7 +44,7 @@ protected Long handleInternally(JSONObject content)
         {
             api.getEventCache().cache(EventCache.Type.GUILD, guildId, () ->
                     handle(responseNumber, allContent));
-            EventCache.LOG.debug("Received a Role Update for a Guild that is not yet cached: " + content);
+            EventCache.LOG.debug("Received a Role Update for a Guild that is not yet cached: {}", content);
             return null;
         }
 
@@ -53,7 +53,7 @@ protected Long handleInternally(JSONObject content)
         if (role == null)
         {
             api.getEventCache().cache(EventCache.Type.ROLE, roleId, () -> handle(responseNumber, allContent));
-            EventCache.LOG.debug("Received a Role Update for Role that is not yet cached: " + content);
+            EventCache.LOG.debug("Received a Role Update for Role that is not yet cached: {}", content);
             return null;
         }
 

File: src/main/java/net/dv8tion/jda/core/handle/GuildSyncHandler.java
Patch:
@@ -34,7 +34,7 @@ protected Long handleInternally(JSONObject content)
         final long guildId = content.getLong("id");
         if (!api.getGuildMap().containsKey(guildId))
         {
-            JDAImpl.LOG.fatal("Received a GUILD_SYNC for a Guild that does not yet exist in JDA's guild cache. This is a BAD ERROR FOR CLIENTS!");
+            JDAImpl.LOG.error("Received a GUILD_SYNC for a Guild that does not yet exist in JDA's guild cache. This is a BAD ERROR FOR CLIENTS!");
             return null;
         }
 

File: src/main/java/net/dv8tion/jda/core/handle/MessageCreateHandler.java
Patch:
@@ -48,7 +48,7 @@ protected Long handleInternally(JSONObject content)
             case DEFAULT:
                 return handleDefaultMessage(content);
             default:
-                WebSocketClient.LOG.debug("JDA received a message of unknown type. Type: " + type + "  JSON: " + content);
+                WebSocketClient.LOG.debug("JDA received a message of unknown type. Type: {}  JSON: {}", type, content);
         }
         return null;
     }
@@ -120,7 +120,7 @@ private Long handleDefaultMessage(JSONObject content)
                 break;
             }
             default:
-                WebSocketClient.LOG.warn("Received a MESSAGE_CREATE with a unknown MessageChannel ChannelType. JSON: " + content);
+                WebSocketClient.LOG.warn("Received a MESSAGE_CREATE with a unknown MessageChannel ChannelType. JSON: {}", content);
                 return null;
         }
 

File: src/main/java/net/dv8tion/jda/core/handle/MessageDeleteHandler.java
Patch:
@@ -59,7 +59,7 @@ protected Long handleInternally(JSONObject content)
         if (channel == null)
         {
             api.getEventCache().cache(EventCache.Type.CHANNEL, channelId, () -> handle(responseNumber, allContent));
-            EventCache.LOG.debug("Got message delete for a channel/group that is not yet cached. ChannelId: " + channelId);
+            EventCache.LOG.debug("Got message delete for a channel/group that is not yet cached. ChannelId: {}", channelId);
             return null;
         }
 

File: src/main/java/net/dv8tion/jda/core/handle/MessageUpdateHandler.java
Patch:
@@ -54,7 +54,7 @@ protected Long handleInternally(JSONObject content)
                     case DEFAULT:
                         return handleDefaultMessage(content);
                     default:
-                        WebSocketClient.LOG.debug("JDA received a message of unknown type. Type: " + type + "  JSON: " + content);
+                        WebSocketClient.LOG.debug("JDA received a message of unknown type. Type: {} JSON: {}", type, content);
                         return null;
                 }
             }
@@ -137,7 +137,7 @@ private Long handleDefaultMessage(JSONObject content)
             }
 
             default:
-                WebSocketClient.LOG.warn("Received a MESSAGE_UPDATE with a unknown MessageChannel ChannelType. JSON: " + content);
+                WebSocketClient.LOG.warn("Received a MESSAGE_UPDATE with a unknown MessageChannel ChannelType. JSON: {}", content);
                 return null;
         }
 
@@ -214,7 +214,7 @@ else if (channel instanceof PrivateChannel)
 
     public void handleCallMessage(JSONObject content)
     {
-        WebSocketClient.LOG.debug("Received a MESSAGE_UPDATE of type CALL:  " + content.toString());
+        WebSocketClient.LOG.debug("Received a MESSAGE_UPDATE of type CALL: {}", content);
         //Called when someone joins call for first time.
         //  It is not called when they leave or rejoin. That is all dictated by VOICE_STATE_UPDATE.
         //  Probably can ignore the above due to VOICE_STATE_UPDATE

File: src/main/java/net/dv8tion/jda/core/hooks/AnnotatedEventManager.java
Patch:
@@ -93,12 +93,11 @@ public void handle(Event event)
                     }
                     catch (IllegalAccessException | InvocationTargetException e1)
                     {
-                        JDAImpl.LOG.fatal(e1);
+                        JDAImpl.LOG.error("Couldn't access annotated eventlistener method", e1);
                     }
                     catch (Throwable throwable)
                     {
-                        JDAImpl.LOG.fatal("One of the EventListeners had an uncaught exception");
-                        JDAImpl.LOG.fatal(throwable);
+                        JDAImpl.LOG.error("One of the EventListeners had an uncaught exception", throwable);
                     }
                 }));
             }

File: src/main/java/net/dv8tion/jda/core/hooks/InterfacedEventManager.java
Patch:
@@ -85,8 +85,7 @@ public void handle(Event event)
             }
             catch (Throwable throwable)
             {
-                JDAImpl.LOG.fatal("One of the EventListeners had an uncaught exception");
-                JDAImpl.LOG.fatal(throwable);
+                JDAImpl.LOG.error("One of the EventListeners had an uncaught exception", throwable);
             }
         }
     }

File: src/main/java/net/dv8tion/jda/core/requests/ratelimit/ClientRateLimiter.java
Patch:
@@ -211,7 +211,7 @@ public void run()
                         }
                         catch (Throwable t)
                         {
-                            Requester.LOG.fatal(t);
+                            Requester.LOG.error("Error executing REST request", t);
                             it.remove();
                             if (request != null)
                                 request.onFailure(t);
@@ -237,7 +237,7 @@ public void run()
             }
             catch (Throwable err)
             {
-                Requester.LOG.fatal(err);
+                Requester.LOG.error("There was some exception in the ClientRateLimiter", err);
                 if (err instanceof Error)
                 {
                     JDAImpl api = requester.getJDA();

File: src/main/java/net/dv8tion/jda/core/utils/package-info.java
Patch:
@@ -18,9 +18,7 @@
  * Package which contains all utilities for the JDA library.
  * These are used by JDA itself and can also be useful for the library consumer!
  *
- * <p>This contains the JDA logger implementation {@link net.dv8tion.jda.core.utils.SimpleLog SimpleLog}
- * <br>Which is currently planned to be rewritten to be more end-user friendly.
- * <br>List of utilities:
+ * <p>List of utilities:
  * <ul>
  *     <li>{@link net.dv8tion.jda.core.utils.IOUtil IOUtil}
  *     <br>Allows to read from files (use case: sending files)</li>

File: src/main/java/net/dv8tion/jda/core/entities/EntityBuilder.java
Patch:
@@ -142,7 +142,7 @@ public void createGuildFirstPass(JSONObject guild, Consumer<Guild> secondPassCal
         guildObj.setAvailable(true)
                 .setIconId(guild.isNull("icon") ? null : guild.getString("icon"))
                 .setSplashId(guild.isNull("splash") ? null : guild.getString("splash"))
-                .setRegion(Region.fromKey(guild.getString("region")))
+                .setRegion(guild.getString("region"))
                 .setName(guild.getString("name"))
                 .setAfkTimeout(Guild.Timeout.fromKey(guild.getInt("afk_timeout")))
                 .setVerificationLevel(Guild.VerificationLevel.fromKey(guild.getInt("verification_level")))

File: src/main/java/net/dv8tion/jda/core/audio/AudioConnection.java
Patch:
@@ -41,6 +41,7 @@
 import java.net.DatagramSocket;
 import java.net.SocketException;
 import java.net.SocketTimeoutException;
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.nio.IntBuffer;
 import java.nio.ShortBuffer;
@@ -534,7 +535,7 @@ private byte[] encodeToOpus(byte[] rawAudio)
 
             nonEncodedBuffer.put(toShort);
         }
-        nonEncodedBuffer.flip();
+        ((Buffer) nonEncodedBuffer).flip();
 
         //TODO: check for 0 / negative value for error.
         int result = Opus.INSTANCE.opus_encode(opusEncoder, nonEncodedBuffer, OPUS_FRAME_SIZE, encoded, encoded.capacity());

File: src/main/java/net/dv8tion/jda/core/requests/WebSocketClient.java
Patch:
@@ -675,6 +675,7 @@ public void onTextMessage(WebSocket websocket, String message)
                 break;
             case WebSocketCode.INVALIDATE_SESSION:
                 LOG.debug("Got Invalidate request (OP 9). Invalidating...");
+                sentAuthInfo = false;
                 final boolean isResume = content.getBoolean("d");
                 // When d: true we can wait a bit and then try to resume again
                 //sending 4000 to not drop session
@@ -791,7 +792,7 @@ protected void sendResume()
                 .put("token", getToken())
                 .put("seq", api.getResponseTotal()));
         send(resume.toString(), true);
-        sentAuthInfo = true;
+        //sentAuthInfo = true; set on RESUMED response as this could fail
         api.setStatus(JDA.Status.AWAITING_LOGIN_CONFIRMATION);
     }
 
@@ -963,6 +964,7 @@ protected void handleEvent(JSONObject raw)
                     handlers.get("READY").handle(responseTotal, raw);
                     break;
                 case "RESUMED":
+                    sentAuthInfo = true;
                     if (!processingReady)
                     {
                         api.setStatus(JDA.Status.LOADING_SUBSYSTEMS);

File: src/main/java/net/dv8tion/jda/core/entities/EntityBuilder.java
Patch:
@@ -319,9 +319,7 @@ public void createGuildSecondPass(long guildId, List<JSONArray> memberChunks)
             throw new IllegalArgumentException("No callback provided for the second pass on the Guild!");
 
         for (JSONArray chunk : memberChunks)
-        {
             createGuildMemberPass(guildObj, chunk);
-        }
 
         Member owner = guildObj.getMemberById(guildJson.getLong("owner_id"));
         if (owner != null)

File: src/main/java/net/dv8tion/jda/core/handle/GuildMembersChunkHandler.java
Patch:
@@ -50,9 +50,7 @@ protected Long handleInternally(JSONObject content)
 
         int currentTotal = 0;
         for (JSONArray arr : memberChunks)
-        {
             currentTotal += arr.length();
-        }
 
         if (currentTotal >= expectMemberCount)
         {

File: src/main/java/net/dv8tion/jda/core/handle/MessageBulkDeleteHandler.java
Patch:
@@ -41,6 +41,7 @@ protected Long handleInternally(JSONObject content)
             content.getJSONArray("ids").forEach(id ->
             {
                 handler.handle(responseNumber, new JSONObject()
+                    .put("t", "MESSAGE_DELETE")
                     .put("d", new JSONObject()
                         .put("channel_id", Long.toUnsignedString(channelId))
                         .put("id", id)));

File: src/main/java/net/dv8tion/jda/core/managers/impl/PresenceImpl.java
Patch:
@@ -86,19 +86,19 @@ public boolean isIdle()
     @Override
     public void setStatus(OnlineStatus status)
     {
-        setPresence(game, idle);
+        setPresence(status, game, idle);
     }
 
     @Override
     public void setGame(Game game)
     {
-        setPresence(status, idle);
+        setPresence(status, game);
     }
 
     @Override
     public void setIdle(boolean idle)
     {
-        setPresence(status, game);
+        setPresence(status, idle);
     }
 
     @Override

File: src/main/java/net/dv8tion/jda/core/requests/WebSocketClient.java
Patch:
@@ -979,6 +979,8 @@ protected void handleEvent(JSONObject raw)
         }
         catch (Exception ex)
         {
+            LOG.fatal("Got an unexpected error. Please redirect following message to the devs:\n\t"
+                    + type + " -> " + content);
             LOG.fatal(ex);
         }
     }

File: src/main/java/net/dv8tion/jda/core/requests/restaction/WebhookAction.java
Patch:
@@ -58,8 +58,7 @@ public WebhookAction(JDA api, Route.CompiledRoute route, String name)
     public WebhookAction setName(String name)
     {
         Checks.notNull(name, "Webhook name");
-        if (name.length() < 2 || name.length() > 100)
-            throw new IllegalArgumentException("The webhook name must be in the range of 2-100!");
+        Checks.check(name.length() >= 2 && name.length() <= 100, "The webhook name must be in the range of 2-100!");
 
         this.name = name;
         return this;

File: src/main/java/net/dv8tion/jda/core/utils/PermissionUtil.java
Patch:
@@ -362,8 +362,9 @@ public static long getEffectivePermission(Channel channel, Member member)
         }
         else if (!isApplied(permission, Permission.VIEW_CHANNEL.getRawValue()))
         {
-            // When the permission to view the channel is not applied it is not granted
-            return permission & ~Permission.ALL_TEXT_PERMISSIONS;
+            //When the permission to view the channel is not applied it is not granted
+            // This means that we have no access to this channel at all
+            return 0;
         }
 
         final boolean isPerms = isApplied(permission, Permission.MANAGE_PERMISSIONS.getRawValue());

File: src/main/java/net/dv8tion/jda/client/entities/Group.java
Patch:
@@ -19,9 +19,10 @@
 import net.dv8tion.jda.core.entities.MessageChannel;
 import net.dv8tion.jda.core.entities.User;
 import net.dv8tion.jda.core.requests.RestAction;
+import net.dv8tion.jda.core.utils.cache.SnowflakeCacheView;
 
-import java.util.List;
 import javax.annotation.CheckReturnValue;
+import java.util.List;
 
 public interface Group extends MessageChannel, CallableChannel
 {
@@ -37,6 +38,7 @@ public interface Group extends MessageChannel, CallableChannel
     String getIconUrl();
 
     User getOwner();
+    SnowflakeCacheView<User> getUserCache();
     List<User> getUsers();
     List<User> getNonFriendUsers();
     List<Friend> getFriends();

File: src/main/java/net/dv8tion/jda/core/entities/EntityBuilder.java
Patch:
@@ -385,7 +385,7 @@ private void createGuildChannelPass(GuildImpl guildObj, JSONArray channels)
                     channelObj = api.getVoiceChannelById(channel.getLong("id"));
                     break;
                 case CATEGORY:
-                    channelObj = guildObj.getCategoriesMap().get(channel.getLong("id"));
+                    channelObj = api.getCategoryMap().get(channel.getLong("id"));
                     break;
                 default:
                     WebSocketClient.LOG.fatal("Received a channel for a guild that isn't a text, voice or category channel (ChannelPass). JSON: " + channel);
@@ -590,7 +590,7 @@ public Category createCategory(JSONObject json, long guildId)
     public Category createCategory(JSONObject json, long guildId, boolean guildIsLoaded)
     {
         final long id = json.getLong("id");
-        CategoryImpl channel = api.getCategoryMap().get(id);
+        CategoryImpl channel = (CategoryImpl) api.getCategoryMap().get(id);
         if (channel == null)
         {
             GuildImpl guild = ((GuildImpl) api.getGuildMap().get(guildId));

File: src/main/java/net/dv8tion/jda/core/entities/IPermissionHolder.java
Patch:
@@ -26,7 +26,8 @@
  *
  * @since 3.0
  */
-public interface IPermissionHolder {
+public interface IPermissionHolder
+{
 
     /**
      * The Guild to which this PermissionHolder is related

File: src/main/java/net/dv8tion/jda/core/entities/Icon.java
Patch:
@@ -26,8 +26,8 @@
 import java.util.Base64;
 
 /**
- * Icon containing a base64 encoded jpeg image.
- * <br>Used to different base64 images in the Discord api.
+ * Icon containing a base64 encoded jpeg/png/gif/gifv image.
+ * <br>Used to represent various base64 images in the Discord api.
  * <br>Example: {@link net.dv8tion.jda.core.managers.AccountManager#setAvatar(Icon)}.
  *
  * @since 3.0
@@ -38,6 +38,7 @@ public class Icon
 
     protected Icon(String base64Encoding)
     {
+        //Note: the usage of `image/jpeg` does not mean png/gif are not supported!
         this.encoding = "data:image/jpeg;base64," + base64Encoding;
     }
 

File: src/main/java/net/dv8tion/jda/core/audio/AudioConnection.java
Patch:
@@ -137,6 +137,7 @@ public void ready()
             JDAImpl api = (JDAImpl) getJDA();
             api.getEventManager().handle(new ExceptionEvent(api, throwable, true));
         });
+        readyThread.setDaemon(true);
         readyThread.setName(threadIdentifier + " Ready Thread");
         readyThread.start();
     }
@@ -423,6 +424,7 @@ else if (couldReceive)
                 JDAImpl api = (JDAImpl) getJDA();
                 api.getEventManager().handle(new ExceptionEvent(api, throwable, true));
             });
+            receiveThread.setDaemon(true);
             receiveThread.setName(threadIdentifier + " Receiving Thread");
             receiveThread.start();
         }
@@ -440,6 +442,7 @@ private synchronized void setupCombinedExecutor()
             combinedAudioExecutor = Executors.newSingleThreadScheduledExecutor((task) ->
             {
                 final Thread t = new Thread(AudioManagerImpl.AUDIO_THREADS, task, threadIdentifier + " Combined Thread");
+                t.setDaemon(true);
                 t.setUncaughtExceptionHandler((thread, throwable) ->
                 {
                     LOG.log(throwable);

File: src/main/java/net/dv8tion/jda/core/audio/factory/DefaultSendSystem.java
Patch:
@@ -102,6 +102,7 @@ public void start()
             SimpleLog.getLog("DefaultSendSystem").log(throwable);
             start();
         });
+        sendThread.setDaemon(true);
         sendThread.setName(packetProvider.getIdentifier() + " Sending Thread");
         sendThread.setPriority((Thread.NORM_PRIORITY + Thread.MAX_PRIORITY) / 2);
         sendThread.start();

File: src/main/java/net/dv8tion/jda/core/handle/GuildDeleteHandler.java
Patch:
@@ -68,6 +68,7 @@ protected Long handleInternally(JSONObject content)
             return null;
         }
 
+        api.getClient().removeAudioConnection(id);
         final TLongObjectMap<AudioManagerImpl> audioManagerMap = api.getAudioManagerMap();
         synchronized (audioManagerMap)
         {

File: src/main/java/net/dv8tion/jda/core/entities/impl/GuildImpl.java
Patch:
@@ -343,7 +343,7 @@ public List<TextChannel> getTextChannelsByName(String name, boolean ignoreCase)
     public List<TextChannel> getTextChannels()
     {
         ArrayList<TextChannel> channels = new ArrayList<>(textChannels.valueCollection());
-        channels.sort(Comparator.reverseOrder());
+        channels.sort(Comparator.naturalOrder());
         return Collections.unmodifiableList(channels);
     }
 
@@ -375,7 +375,7 @@ public List<VoiceChannel> getVoiceChannelsByName(String name, boolean ignoreCase
     public List<VoiceChannel> getVoiceChannels()
     {
         List<VoiceChannel> channels = new ArrayList<>(voiceChannels.valueCollection());
-        channels.sort(Comparator.reverseOrder());
+        channels.sort(Comparator.naturalOrder());
         return Collections.unmodifiableList(channels);
     }
 
@@ -518,8 +518,8 @@ public TextChannel getDefaultChannel()
     {
         final Role role = getPublicRole();
         return getTextChannelsMap().valueCollection().stream()
-                .sorted(Comparator.reverseOrder())
                 .filter(c -> role.hasPermission(c, Permission.MESSAGE_READ))
+                .sorted(Comparator.naturalOrder())
                 .findFirst().orElse(null);
     }
 

File: src/main/java/net/dv8tion/jda/client/handle/RelationshipRemoveHandler.java
Patch:
@@ -92,6 +92,7 @@ protected Long handleInternally(JSONObject content)
                         }
                     }
                 }
+                api.getEventCache().clear(EventCache.Type.USER, userId);
             }
         }
         else
@@ -138,6 +139,7 @@ protected Long handleInternally(JSONObject content)
                 WebSocketClient.LOG.warn("Received a RELATIONSHIP_REMOVE with an unknown RelationshipType! JSON: " + content);
                 return null;
         }
+        api.getEventCache().clear(EventCache.Type.RELATIONSHIP, userId);
         return null;
     }
 }

File: src/main/java/net/dv8tion/jda/core/entities/impl/JDAImpl.java
Patch:
@@ -617,8 +617,7 @@ public void shutdown()
         if (audioKeepAlivePool != null)
             audioKeepAlivePool.shutdownNow();
 
-        getClient().setAutoReconnect(false);
-        getClient().close();
+        getClient().shutdown();
 
         final long time = 5L;
         final TimeUnit unit = TimeUnit.SECONDS;

File: src/main/java/net/dv8tion/jda/core/handle/ChannelDeleteHandler.java
Patch:
@@ -177,6 +177,7 @@ protected Long handleInternally(JSONObject content)
             default:
                 throw new IllegalArgumentException("CHANNEL_DELETE provided an unknown channel type. JSON: " + content);
         }
+        api.getEventCache().clear(EventCache.Type.CHANNEL, channelId);
         return null;
     }
 }

File: src/main/java/net/dv8tion/jda/core/handle/GuildDeleteHandler.java
Patch:
@@ -137,17 +137,18 @@ else if (api.getAccountType() == AccountType.CLIENT)
                     }
                 }
             }
-
+            api.getEventCache().clear(EventCache.Type.USER, memberId);
             return true;
         });
 
-        api.getGuildMap().remove(guild.getIdLong());
+        api.getGuildMap().remove(id);
         guild.getTextChannels().forEach(chan -> api.getTextChannelMap().remove(chan.getIdLong()));
         guild.getVoiceChannels().forEach(chan -> api.getVoiceChannelMap().remove(chan.getIdLong()));
         api.getEventManager().handle(
                 new GuildLeaveEvent(
                         api, responseNumber,
                         guild));
+        api.getEventCache().clear(EventCache.Type.GUILD, id);
         return null;
     }
 }

File: src/main/java/net/dv8tion/jda/core/handle/GuildRoleDeleteHandler.java
Patch:
@@ -65,6 +65,7 @@ protected Long handleInternally(JSONObject content)
                 new RoleDeleteEvent(
                         api, responseNumber,
                         removedRole));
+        api.getEventCache().clear(EventCache.Type.ROLE, roleId);
         return null;
     }
 }

File: src/main/java/net/dv8tion/jda/core/entities/impl/CategoryImpl.java
Patch:
@@ -94,6 +94,7 @@ public List<Channel> getChannels()
     public List<TextChannel> getTextChannels()
     {
         return Collections.unmodifiableList(getGuild().getTextChannels().stream()
+                    .filter(channel -> channel.getParent() != null)
                     .filter(channel -> channel.getParent().equals(this))
                     .collect(Collectors.toList()));
     }
@@ -102,6 +103,7 @@ public List<TextChannel> getTextChannels()
     public List<VoiceChannel> getVoiceChannels()
     {
         return Collections.unmodifiableList(getGuild().getVoiceChannels().stream()
+                    .filter(channel -> channel.getParent() != null)
                     .filter(channel -> channel.getParent().equals(this))
                     .collect(Collectors.toList()));
     }

File: src/main/java/net/dv8tion/jda/core/events/channel/category/package-info.java
Patch:
@@ -13,5 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
+/**
+ * Events for {@link net.dv8tion.jda.core.entities.Category Categories}
+ */
 package net.dv8tion.jda.core.events.channel.category;

File: src/main/java/net/dv8tion/jda/core/events/channel/category/update/package-info.java
Patch:
@@ -13,5 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
+/**
+ * Update events for {@link net.dv8tion.jda.core.entities.Category Categories}
+ */
 package net.dv8tion.jda.core.events.channel.category.update;

File: src/main/java/net/dv8tion/jda/core/entities/Channel.java
Patch:
@@ -54,6 +54,9 @@ public interface Channel extends ISnowflake
      */
     Guild getGuild();
 
+    //TODO docs
+    Category getParent();
+
     /**
      * A List of all {@link net.dv8tion.jda.core.entities.Member Members} that are in this Channel
      * For {@link net.dv8tion.jda.core.entities.TextChannel TextChannels},

File: src/main/java/net/dv8tion/jda/core/handle/GuildUpdateHandler.java
Patch:
@@ -54,7 +54,7 @@ protected Long handleInternally(JSONObject content)
         Guild.ExplicitContentLevel explicitContentLevel = Guild.ExplicitContentLevel.fromKey(content.getInt("explicit_content_filter"));
         Guild.Timeout afkTimeout = Guild.Timeout.fromKey(content.getInt("afk_timeout"));
         VoiceChannel afkChannel = !content.isNull("afk_channel_id")
-                ? guild.getVoiceChannelMap().get(content.getLong("afk_channel_id"))
+                ? guild.getVoiceChannelsMap().get(content.getLong("afk_channel_id"))
                 : null;
         TextChannel systemChannel = !content.isNull("system_channel_id")
                 ? guild.getTextChannelsMap().get(content.getLong("system_channel_id"))

File: src/main/java/net/dv8tion/jda/core/entities/Guild.java
Patch:
@@ -602,7 +602,8 @@ public interface Guild extends ISnowflake
 
     /**
      * The default {@link net.dv8tion.jda.core.entities.TextChannel TextChannel} for a {@link net.dv8tion.jda.core.entities.Guild Guild}.
-     * <br>This is the channel that the Discord client will default to opening when a Guild is opened for the first time when accepting an invite.
+     * <br>This is the channel that the Discord client will default to opening when a Guild is opened for the first time when accepting an invite
+     * that is not directed at a specific {@link net.dv8tion.jda.core.entities.TextChannel TextChannel}.
      *
      * <p>Note: This channel is the first channel in the guild (ordered by position) that the {@link #getPublicRole()}
      * has the {@link net.dv8tion.jda.core.Permission#MESSAGE_READ Permission.MESSAGE_READ} in.

File: src/main/java/net/dv8tion/jda/core/events/guild/update/GuildUpdateSystemChannelEvent.java
Patch:
@@ -24,7 +24,7 @@
  * <b><u>GuildUpdateSystemChannelEvent</u></b><br>
  * Fired if the {@link net.dv8tion.jda.core.entities.Guild#getSystemChannel() system channel} of a {@link net.dv8tion.jda.core.entities.Guild Guild} has been changed.<br>
  * <br>
- * Use: Retrieve the {@link #getOldSystemChannel() previous system channel} after a change.<p>
+ * Use: Retrieve the {@link #getOldSystemChannel() previous system channel} after a change.
  */
 public class GuildUpdateSystemChannelEvent extends GenericGuildUpdateEvent
 {

File: src/main/java/net/dv8tion/jda/core/entities/EntityBuilder.java
Patch:
@@ -209,9 +209,7 @@ public void createGuildFirstPass(JSONObject guild, Consumer<Guild> secondPassCal
                 ChannelType type = ChannelType.fromId(channel.getInt("type"));
                 if (type == ChannelType.TEXT)
                 {
-                    TextChannel newChannel = createTextChannel(channel, guildObj.getIdLong(), false);
-                    if (newChannel.getIdLong() == guildObj.getIdLong())
-                        guildObj.setPublicChannel(newChannel);
+                    createTextChannel(channel, guildObj.getIdLong(), false);
                 }
                 else if (type == ChannelType.VOICE)
                 {

File: src/main/java/net/dv8tion/jda/core/entities/impl/GuildImpl.java
Patch:
@@ -612,8 +612,6 @@ public AudioManager getAudioManager()
                 }
             }
         }
-        // set guild again to make sure the manager references this instance! Avoiding invalid member cache
-        mng.setGuild(this);
         return mng;
     }
 

File: src/main/java/net/dv8tion/jda/core/utils/MiscUtil.java
Patch:
@@ -15,7 +15,7 @@
  */
 package net.dv8tion.jda.core.utils;
 
-import gnu.trove.TCollections;
+import gnu.trove.impl.sync.TSynchronizedLongObjectMap;
 import gnu.trove.map.TLongObjectMap;
 import gnu.trove.map.hash.TLongObjectHashMap;
 import net.dv8tion.jda.core.entities.ISnowflake;
@@ -91,14 +91,15 @@ public static String getDateTimeString(OffsetDateTime time)
 
     /**
      * Generates a new thread-safe {@link gnu.trove.map.TLongObjectMap TLongObjectMap}
+     *
      * @param  <T>
      *         The Object type
      *
      * @return a new thread-safe {@link gnu.trove.map.TLongObjectMap TLongObjectMap}
      */
     public static <T> TLongObjectMap<T> newLongMap()
     {
-        return TCollections.synchronizedMap(new TLongObjectHashMap<T>());
+        return new TSynchronizedLongObjectMap<>(new TLongObjectHashMap<T>(), new Object());
     }
 
     /**

File: src/main/java/net/dv8tion/jda/core/handle/PresenceUpdateHandler.java
Patch:
@@ -107,7 +107,7 @@ protected Long handleInternally(JSONObject content)
             }
             Game nextGame = (gameName == null
                     ? null
-                    : new GameImpl(gameName, gameUrl, type));
+                    : api.getEntityBuilder().createGame(gameName, gameUrl, type));
             OnlineStatus status = OnlineStatus.fromKey(content.getString("status"));
 
             //If we are in a Guild, then we will use Member.

File: src/main/java/net/dv8tion/jda/core/managers/impl/PresenceImpl.java
Patch:
@@ -231,7 +231,7 @@ private JSONObject getGameJson(Game game)
         JSONObject gameObj = new JSONObject();
         gameObj.put("name", game.getName());
         gameObj.put("type", game.getType().getKey());
-        if (game.getType() == Game.GameType.TWITCH && game.getUrl() != null)
+        if (game.getUrl() != null)
             gameObj.put("url", game.getUrl());
 
         return gameObj;

File: src/main/java/net/dv8tion/jda/core/requests/Requester.java
Patch:
@@ -37,7 +37,7 @@ public class Requester
 {
     public static final SimpleLog LOG = SimpleLog.getLog("JDARequester");
     public static final String DISCORD_API_PREFIX = String.format("https://discordapp.com/api/v%d/", JDAInfo.DISCORD_REST_VERSION);
-    public static String USER_AGENT = "JDA DiscordBot (" + JDAInfo.GITHUB + ", " + JDAInfo.VERSION + ")";
+    public static String USER_AGENT = "DiscordBot (" + JDAInfo.GITHUB + ", " + JDAInfo.VERSION + ")";
     public static final MediaType MEDIA_TYPE_JSON = MediaType.parse("application/json; charset=utf-8");
     public static final RequestBody EMPTY_BODY = RequestBody.create(null, new byte[]{});
 

File: src/main/java/net/dv8tion/jda/core/requests/Requester.java
Patch:
@@ -37,7 +37,7 @@ public class Requester
 {
     public static final SimpleLog LOG = SimpleLog.getLog("JDARequester");
     public static final String DISCORD_API_PREFIX = String.format("https://discordapp.com/api/v%d/", JDAInfo.DISCORD_REST_VERSION);
-    public static String USER_AGENT = "JDA DiscordBot (" + JDAInfo.GITHUB + ", " + JDAInfo.VERSION + ")";
+    public static String USER_AGENT = "DiscordBot (" + JDAInfo.GITHUB + ", " + JDAInfo.VERSION + ")";
     public static final MediaType MEDIA_TYPE_JSON = MediaType.parse("application/json; charset=utf-8");
     public static final RequestBody EMPTY_BODY = RequestBody.create(null, new byte[]{});
 

File: src/main/java/net/dv8tion/jda/core/EmbedBuilder.java
Patch:
@@ -508,7 +508,7 @@ public EmbedBuilder addField(MessageEmbed.Field field)
      *         <ul>
      *             <li>If only {@code name} or {@code value} is set. Both must be set.</li>
      *             <li>If the length of {@code name} is greater than {@link net.dv8tion.jda.core.entities.MessageEmbed#TITLE_MAX_LENGTH}.</li>
-     *             <li>If the length of {@code value} is greater than {@link net.dv8tion.jda.core.entities.MessageEmbed#TEXT_MAX_LENGTH}.</li>
+     *             <li>If the length of {@code value} is greater than {@link net.dv8tion.jda.core.entities.MessageEmbed#VALUE_MAX_LENGTH}.</li>
      *         </ul>
      *
      * @return the builder after the field has been added

File: src/main/java/net/dv8tion/jda/core/managers/WebhookManagerUpdatable.java
Patch:
@@ -283,7 +283,7 @@ public boolean shouldUpdate()
             public void checkValue(TextChannel value)
             {
                 Checks.notNull(value, "channel");
-                Checks.check(value.equals(getChannel()), "Channel is not from the same Guild!");
+                Checks.check(value.getGuild().equals(getGuild()), "Channel is not from the same Guild!");
             }
         };
     }

File: src/main/java/net/dv8tion/jda/core/managers/WebhookManagerUpdatable.java
Patch:
@@ -283,7 +283,7 @@ public boolean shouldUpdate()
             public void checkValue(TextChannel value)
             {
                 Checks.notNull(value, "channel");
-                Checks.check(value.equals(getChannel()), "Channel is not from the same Guild!");
+                Checks.check(value.getGuild().equals(getGuild()), "Channel is not from the same Guild!");
             }
         };
     }

File: src/main/java/net/dv8tion/jda/core/managers/ChannelManagerUpdatable.java
Patch:
@@ -310,7 +310,8 @@ protected boolean needToUpdate()
         return name.shouldUpdate()
                 || (topic != null && topic.shouldUpdate())
                 || (userLimit != null && userLimit.shouldUpdate())
-                || (bitrate != null && bitrate.shouldUpdate());
+                || (bitrate != null && bitrate.shouldUpdate())
+                || (nsfw != null && nsfw.shouldUpdate());
     }
 
     protected void checkPermission(Permission perm)

File: src/main/java/net/dv8tion/jda/core/EmbedBuilder.java
Patch:
@@ -507,7 +507,7 @@ public EmbedBuilder addField(MessageEmbed.Field field)
      *         <ul>
      *             <li>If only {@code name} or {@code value} is set. Both must be set.</li>
      *             <li>If the length of {@code name} is greater than {@link net.dv8tion.jda.core.entities.MessageEmbed#TITLE_MAX_LENGTH}.</li>
-     *             <li>If the length of {@code value} is greater than {@link net.dv8tion.jda.core.entities.MessageEmbed#TEXT_MAX_LENGTH}.</li>
+     *             <li>If the length of {@code value} is greater than {@link net.dv8tion.jda.core.entities.MessageEmbed#VALUE_MAX_LENGTH}.</li>
      *         </ul>
      *
      * @return the builder after the field has been added

File: src/main/java/net/dv8tion/jda/core/entities/EntityBuilder.java
Patch:
@@ -395,7 +395,7 @@ else if (type == ChannelType.VOICE)
             }
             else
             {
-                throw new RuntimeException("Got permission_override for unknown channel with id: " + channel.getString("id"));
+                WebSocketClient.LOG.fatal("Got permission_override for unknown channel with id: " + channel.getString("id"));
             }
         }
     }

File: src/main/java/net/dv8tion/jda/core/entities/EntityBuilder.java
Patch:
@@ -395,7 +395,7 @@ else if (type == ChannelType.VOICE)
             }
             else
             {
-                throw new RuntimeException("Got permission_override for unknown channel with id: " + channel.getString("id"));
+                WebSocketClient.LOG.fatal("Got permission_override for unknown channel with id: " + channel.getString("id"));
             }
         }
     }

File: src/main/java/net/dv8tion/jda/core/entities/User.java
Patch:
@@ -63,8 +63,8 @@ public interface User extends ISnowflake, IMentionable, IFakeable
 
     /**
      * <br>The discriminator of the {@link net.dv8tion.jda.core.entities.User User}. Used to differentiate between users with the same usernames.
-     * <br>This will be important when the friends list is released for human readable searching.
-     * Ex: DV8FromTheWorld#6297
+     * <br>This only contains the 4 digits after the username and the #.
+     * Ex: 6297
      *
      * @return Never-null String containing the {@link net.dv8tion.jda.core.entities.User User} discriminator.
      */

File: src/main/java/net/dv8tion/jda/core/entities/IFakeable.java
Patch:
@@ -24,8 +24,8 @@
  * <br>A fake user can occur when sharding. Discord only sends private messages to Shard 0. If a User which is connected
  * to Guilds on shard 1 sends a private message to the logged in account, it is received on Shard 0. However, if Shard 0
  * does not know about the User due to not having a Guild connection with them, it will use the information provided in
- * the MESSAGE_CREATE event to create a temporary fake user. In this case, the {@link net.dv8tion.jda.core.entities.User#getPrivateChannel()}
- * is also fake!
+ * the MESSAGE_CREATE event to create a temporary fake user.
+ * In this case, the associated {@link net.dv8tion.jda.core.entities.PrivateChannel PrivateChannel} is also fake!
  *
  * <p>Another example would be a fake {@link net.dv8tion.jda.core.entities.Emote Emote}. If a user sends a message containing
  * an Emote from a {@link net.dv8tion.jda.core.entities.Guild Guild} that the currently logged in account is not a part of,

File: src/main/java/net/dv8tion/jda/core/entities/impl/MessageImpl.java
Patch:
@@ -569,7 +569,9 @@ public int hashCode()
     @Override
     public String toString()
     {
-        return String.format("M:%#s:%.20s(%s)", author, this, getId());
+        return author != null
+            ? String.format("M:%#s:%.20s(%s)", author, this, getId())
+            : String.format("M:%.20s", this); // this message was made using MessageBuilder
     }
 
     public JSONObject toJSONObject()

File: src/main/java/net/dv8tion/jda/core/entities/impl/UserImpl.java
Patch:
@@ -135,7 +135,6 @@ public List<Guild> getMutualGuilds()
         return getJDA().getMutualGuilds(this);
     }
 
-    @Override
     public PrivateChannel getPrivateChannel()
     {
         if (!hasPrivateChannel())

File: src/main/java/net/dv8tion/jda/bot/entities/impl/JDABotImpl.java
Patch:
@@ -49,7 +49,7 @@ public JDA getJDA()
     public RestAction<ApplicationInfo> getApplicationInfo()
     {
         Route.CompiledRoute route = Route.Applications.GET_BOT_APPLICATION.compile();
-        return new RestAction<ApplicationInfo>(getJDA(), route, null)
+        return new RestAction<ApplicationInfo>(getJDA(), route)
         {
             @Override
             protected void handleResponse(Response response, Request<ApplicationInfo> request)

File: src/main/java/net/dv8tion/jda/client/entities/impl/AuthorizedApplicationImpl.java
Patch:
@@ -22,7 +22,6 @@
 import net.dv8tion.jda.core.requests.Response;
 import net.dv8tion.jda.core.requests.RestAction;
 import net.dv8tion.jda.core.requests.Route;
-import net.dv8tion.jda.core.requests.Route.CompiledRoute;
 
 import java.util.Collections;
 import java.util.List;
@@ -53,9 +52,9 @@ public AuthorizedApplicationImpl(final JDA api, final long authId, final String
     @Override
     public RestAction<Void> delete()
     {
-        CompiledRoute route = Route.Applications.DELETE_AUTHORIZED_APPLICATION.compile(getAuthId());
+        Route.CompiledRoute route = Route.Applications.DELETE_AUTHORIZED_APPLICATION.compile(getAuthId());
 
-        return new RestAction<Void>(this.api, route, null)
+        return new RestAction<Void>(this.api, route)
         {
             @Override
             protected void handleResponse(final Response response, final Request<Void> request)

File: src/main/java/net/dv8tion/jda/core/JDAInfo.java
Patch:
@@ -20,6 +20,7 @@
  */
 public class JDAInfo
 {
+    public static final int DISCORD_REST_VERSION = 6;
     public static final String GITHUB = "https://github.com/DV8FromTheWorld/JDA";
     public static final String VERSION_MAJOR = "@versionMajor@";
     public static final String VERSION_MINOR = "@versionMinor@";

File: src/main/java/net/dv8tion/jda/core/MessageBuilder.java
Patch:
@@ -17,7 +17,7 @@
 
 import net.dv8tion.jda.core.entities.*;
 import net.dv8tion.jda.core.entities.impl.MessageImpl;
-import org.apache.http.util.Args;
+import net.dv8tion.jda.core.utils.Checks;
 
 import java.util.Collections;
 import java.util.LinkedList;
@@ -221,7 +221,7 @@ public MessageBuilder append(CharSequence text, Formatting... format)
      */
     public MessageBuilder appendFormat(String format, Object... args)
     {
-        Args.notEmpty(format, "Format String");
+        Checks.notEmpty(format, "Format String");
         this.append(String.format(format, args));
         return this;
     }

File: src/main/java/net/dv8tion/jda/core/Permission.java
Patch:
@@ -15,7 +15,7 @@
  */
 package net.dv8tion.jda.core;
 
-import org.apache.http.util.Args;
+import net.dv8tion.jda.core.utils.Checks;
 
 import java.util.Arrays;
 import java.util.Collection;
@@ -264,7 +264,7 @@ public static long getRaw(Permission... permissions)
      */
     public static long getRaw(Collection<Permission> permissions)
     {
-        Args.notNull(permissions, "Permission Collection");
+        Checks.notNull(permissions, "Permission Collection");
 
         return getRaw(permissions.toArray(new Permission[permissions.size()]));
     }

File: src/main/java/net/dv8tion/jda/core/entities/Game.java
Patch:
@@ -16,7 +16,7 @@
 package net.dv8tion.jda.core.entities;
 
 import net.dv8tion.jda.core.entities.impl.GameImpl;
-import org.apache.http.util.Args;
+import net.dv8tion.jda.core.utils.Checks;
 
 /**
  * Represents a Discord {@link net.dv8tion.jda.core.entities.Game Game}.
@@ -83,7 +83,7 @@ static Game of(String name)
      */
     static Game of(String name, String url)
     {
-        Args.notEmpty(name, "Provided game name");
+        Checks.notEmpty(name, "Provided game name");
         GameType type;
         if (isValidStreamingUrl(url))
             type = GameType.TWITCH;

File: src/main/java/net/dv8tion/jda/core/entities/MessageEmbed.java
Patch:
@@ -17,8 +17,7 @@
 
 import net.dv8tion.jda.core.AccountType;
 import net.dv8tion.jda.core.EmbedBuilder;
-import org.apache.http.util.Args;
-
+import net.dv8tion.jda.core.utils.Checks;
 import java.awt.Color;
 import java.time.OffsetDateTime;
 import java.util.List;
@@ -186,7 +185,7 @@ public interface MessageEmbed
      */
     default boolean isSendable(AccountType type)
     {
-        Args.notNull(type, "AccountType");
+        Checks.notNull(type, "AccountType");
         final int length = getLength();
 
         switch (type)

File: src/main/java/net/dv8tion/jda/core/entities/MessageReaction.java
Patch:
@@ -348,7 +348,7 @@ public RestAction<Void> removeReaction(User user)
                     ? emote.getName() + ":" + emote.getId()
                     : MiscUtil.encodeUTF8(emote.getName());
         Route.CompiledRoute route = Route.Messages.REMOVE_REACTION.compile(channel.getId(), getMessageId(), code, user.getId());
-        return new RestAction<Void>(getJDA(), route, null)
+        return new RestAction<Void>(getJDA(), route)
         {
             @Override
             protected void handleResponse(Response response, Request<Void> request)

File: src/main/java/net/dv8tion/jda/core/entities/impl/EmoteImpl.java
Patch:
@@ -162,7 +162,7 @@ public AuditableRestAction<Void> delete()
             throw new PermissionException(Permission.MANAGE_EMOTES);
 
         Route.CompiledRoute route = Route.Emotes.DELETE_EMOTE.compile(getGuild().getId(), getId());
-        return new AuditableRestAction<Void>(getJDA(), route, null)
+        return new AuditableRestAction<Void>(getJDA(), route)
         {
             @Override
             protected void handleResponse(Response response, Request<Void> request)

File: src/main/java/net/dv8tion/jda/core/entities/impl/MemberImpl.java
Patch:
@@ -21,7 +21,7 @@
 import net.dv8tion.jda.core.Permission;
 import net.dv8tion.jda.core.entities.*;
 import net.dv8tion.jda.core.utils.PermissionUtil;
-import org.apache.http.util.Args;
+import net.dv8tion.jda.core.utils.Checks;
 
 import java.awt.Color;
 import java.time.OffsetDateTime;
@@ -148,7 +148,7 @@ public boolean hasPermission(Permission... permissions)
     @Override
     public boolean hasPermission(Collection<Permission> permissions)
     {
-        Args.notNull(permissions, "Permission Collection");
+        Checks.notNull(permissions, "Permission Collection");
 
         return hasPermission(permissions.toArray(new Permission[permissions.size()]));
     }
@@ -162,7 +162,7 @@ public boolean hasPermission(Channel channel, Permission... permissions)
     @Override
     public boolean hasPermission(Channel channel, Collection<Permission> permissions)
     {
-        Args.notNull(permissions, "Permission Collection");
+        Checks.notNull(permissions, "Permission Collection");
 
         return hasPermission(channel, permissions.toArray(new Permission[permissions.size()]));
     }

File: src/main/java/net/dv8tion/jda/core/entities/impl/PermissionOverrideImpl.java
Patch:
@@ -168,7 +168,7 @@ public AuditableRestAction<Void> delete()
 
         String targetId = isRoleOverride() ? getRole().getId() : getMember().getUser().getId();
         Route.CompiledRoute route = Route.Channels.DELETE_PERM_OVERRIDE.compile(channel.getId(), targetId);
-        return new AuditableRestAction<Void>(getJDA(), route, null)
+        return new AuditableRestAction<Void>(getJDA(), route)
         {
             @Override
             protected void handleResponse(Response response, Request<Void> request)

File: src/main/java/net/dv8tion/jda/core/entities/impl/PrivateChannelImpl.java
Patch:
@@ -88,7 +88,7 @@ public JDA getJDA()
     public RestAction<Void> close()
     {
         Route.CompiledRoute route = Route.Channels.DELETE_CHANNEL.compile(getId());
-        return new RestAction<Void>(getJDA(), route, null)
+        return new RestAction<Void>(getJDA(), route)
         {
             @Override
             protected void handleResponse(Response response, Request<Void> request)

File: src/main/java/net/dv8tion/jda/core/entities/impl/WebhookImpl.java
Patch:
@@ -105,7 +105,7 @@ public String getUrl()
     public AuditableRestAction<Void> delete()
     {
         Route.CompiledRoute route = Route.Webhooks.DELETE_TOKEN_WEBHOOK.compile(getId(), token);
-        return new AuditableRestAction<Void>(getJDA(), route, null)
+        return new AuditableRestAction<Void>(getJDA(), route)
         {
             @Override
             protected void handleResponse(Response response, Request<Void> request)

File: src/main/java/net/dv8tion/jda/core/exceptions/RateLimitedException.java
Patch:
@@ -16,7 +16,7 @@
 
 package net.dv8tion.jda.core.exceptions;
 
-import net.dv8tion.jda.core.requests.Route.CompiledRoute;
+import net.dv8tion.jda.core.requests.Route;
 
 /**
  * Indicates that we received a {@code 429: Too Many Requests} response
@@ -26,7 +26,7 @@ public class RateLimitedException extends Exception
     private final String rateLimitedRoute;
     private final long retryAfter;
 
-    public RateLimitedException(CompiledRoute route, long retryAfter)
+    public RateLimitedException(Route.CompiledRoute route, long retryAfter)
     {
         this(route.getRatelimitRoute(), retryAfter);
     }

File: src/main/java/net/dv8tion/jda/core/managers/impl/AudioManagerImpl.java
Patch:
@@ -34,7 +34,7 @@
 import net.dv8tion.jda.core.managers.AudioManager;
 import net.dv8tion.jda.core.utils.NativeUtil;
 import net.dv8tion.jda.core.utils.PermissionUtil;
-import org.apache.http.util.Args;
+import net.dv8tion.jda.core.utils.Checks;
 import org.json.JSONObject;
 
 import java.io.IOException;
@@ -81,7 +81,7 @@ public void setGuild(GuildImpl guild)
     @Override
     public void openAudioConnection(VoiceChannel channel)
     {
-        Args.notNull(channel, "Provided VoiceChannel");
+        Checks.notNull(channel, "Provided VoiceChannel");
 
         if (!AUDIO_SUPPORTED)
             throw new UnsupportedOperationException("Sorry! Audio is disabled due to an internal JDA error! Contact Dev!");

File: src/main/java/net/dv8tion/jda/core/requests/restaction/pagination/package-info.java
Patch:
@@ -16,7 +16,7 @@
 
 /**
  * Extensions of {@link net.dv8tion.jda.core.requests.RestAction RestAction} that allow
- * to access paginated discord endpoints like {@link net.dv8tion.jda.core.requests.Route.Messages#GET_REACTION_USERS_LIMIT Route.Messages.GET_REACTION_USERS_LIMIT}
+ * to access paginated discord endpoints like {@link net.dv8tion.jda.core.requests.Route.Messages#GET_REACTION_USERS Route.Messages.GET_REACTION_USERS}
  * <br>The {@link net.dv8tion.jda.core.requests.restaction.pagination.PaginationAction PaginationAction} is designed to work
  * as an {@link java.lang.Iterable Iterable} of the specified endpoint. Each implementation specifies the endpoints it will
  * use in the class-level javadoc

File: src/main/java/net/dv8tion/jda/core/audio/factory/DefaultSendSystem.java
Patch:
@@ -18,6 +18,7 @@
 
 import net.dv8tion.jda.core.audio.AudioConnection;
 import net.dv8tion.jda.core.entities.Guild;
+import net.dv8tion.jda.core.managers.impl.AudioManagerImpl;
 
 import java.net.DatagramPacket;
 import java.net.DatagramSocket;
@@ -46,8 +47,7 @@ public void start()
         final Guild guild = packetProvider.getConnectedChannel().getGuild();
         final DatagramSocket udpSocket = packetProvider.getUdpSocket();
 
-
-        sendThread = new Thread(packetProvider.getIdentifier() + " Sending Thread")
+        sendThread = new Thread(AudioManagerImpl.AUDIO_THREADS, packetProvider.getIdentifier() + " Sending Thread")
         {
             @Override
             public void run()

File: src/main/java/net/dv8tion/jda/core/managers/impl/AudioManagerImpl.java
Patch:
@@ -41,6 +41,7 @@
 
 public class AudioManagerImpl implements AudioManager
 {
+    public static final ThreadGroup AUDIO_THREADS = new ThreadGroup("jda-audio");
     //These values are set at the bottom of this file.
     public static boolean AUDIO_SUPPORTED;
     public static String OPUS_LIB_NAME;

File: src/main/java/net/dv8tion/jda/core/handle/ChannelCreateHandler.java
Patch:
@@ -18,12 +18,10 @@
 
 import net.dv8tion.jda.client.events.group.GroupJoinEvent;
 import net.dv8tion.jda.core.entities.ChannelType;
-import net.dv8tion.jda.core.entities.EntityBuilder;
 import net.dv8tion.jda.core.entities.impl.JDAImpl;
 import net.dv8tion.jda.core.events.channel.priv.PrivateChannelCreateEvent;
 import net.dv8tion.jda.core.events.channel.text.TextChannelCreateEvent;
 import net.dv8tion.jda.core.events.channel.voice.VoiceChannelCreateEvent;
-import net.dv8tion.jda.core.requests.GuildLock;
 import org.json.JSONObject;
 
 public class ChannelCreateHandler extends SocketHandler

File: src/main/java/net/dv8tion/jda/core/handle/ChannelDeleteHandler.java
Patch:
@@ -31,7 +31,6 @@
 import net.dv8tion.jda.core.events.channel.text.TextChannelDeleteEvent;
 import net.dv8tion.jda.core.events.channel.voice.VoiceChannelDeleteEvent;
 import net.dv8tion.jda.core.managers.impl.AudioManagerImpl;
-import net.dv8tion.jda.core.requests.GuildLock;
 import org.json.JSONObject;
 
 public class ChannelDeleteHandler extends SocketHandler
@@ -88,7 +87,7 @@ protected Long handleInternally(JSONObject content)
                 }
 
                 //We use this instead of getAudioManager(Guild) so we don't create a new instance. Efficiency!
-                AudioManagerImpl manager = (AudioManagerImpl) api.getAudioManagerMap().get(guild.getIdLong());
+                AudioManagerImpl manager = api.getAudioManagerMap().get(guild.getIdLong());
                 if (manager != null && manager.isConnected()
                         && manager.getConnectedChannel().getIdLong() == channel.getIdLong())
                 {

File: src/main/java/net/dv8tion/jda/core/handle/GuildBanHandler.java
Patch:
@@ -15,13 +15,11 @@
  */
 package net.dv8tion.jda.core.handle;
 
-import net.dv8tion.jda.core.entities.EntityBuilder;
 import net.dv8tion.jda.core.entities.User;
 import net.dv8tion.jda.core.entities.impl.GuildImpl;
 import net.dv8tion.jda.core.entities.impl.JDAImpl;
 import net.dv8tion.jda.core.events.guild.GuildBanEvent;
 import net.dv8tion.jda.core.events.guild.GuildUnbanEvent;
-import net.dv8tion.jda.core.requests.GuildLock;
 import org.json.JSONObject;
 
 public class GuildBanHandler extends SocketHandler

File: src/main/java/net/dv8tion/jda/core/handle/GuildCreateHandler.java
Patch:
@@ -15,7 +15,6 @@
  */
 package net.dv8tion.jda.core.handle;
 
-import net.dv8tion.jda.core.entities.EntityBuilder;
 import net.dv8tion.jda.core.entities.Guild;
 import net.dv8tion.jda.core.entities.impl.JDAImpl;
 import net.dv8tion.jda.core.events.guild.GuildAvailableEvent;

File: src/main/java/net/dv8tion/jda/core/handle/GuildDeleteHandler.java
Patch:
@@ -104,8 +104,11 @@ protected Long handleInternally(JSONObject content)
             }
         }
 
+        long selfId = api.getSelfUser().getIdLong();
         memberIds.forEach(memberId ->
         {
+            if (memberId == selfId)
+                return true; // don't remove selfUser from cache
             UserImpl user = (UserImpl) api.getUserMap().remove(memberId);
             if (user.hasPrivateChannel())
             {

File: src/main/java/net/dv8tion/jda/core/handle/GuildEmojisUpdateHandler.java
Patch:
@@ -26,7 +26,6 @@
 import net.dv8tion.jda.core.events.emote.EmoteRemovedEvent;
 import net.dv8tion.jda.core.events.emote.update.EmoteUpdateNameEvent;
 import net.dv8tion.jda.core.events.emote.update.EmoteUpdateRolesEvent;
-import net.dv8tion.jda.core.requests.GuildLock;
 import org.apache.commons.collections4.CollectionUtils;
 import org.json.JSONArray;
 import org.json.JSONObject;

File: src/main/java/net/dv8tion/jda/core/handle/GuildMemberAddHandler.java
Patch:
@@ -15,12 +15,10 @@
  */
 package net.dv8tion.jda.core.handle;
 
-import net.dv8tion.jda.core.entities.EntityBuilder;
 import net.dv8tion.jda.core.entities.Member;
 import net.dv8tion.jda.core.entities.impl.GuildImpl;
 import net.dv8tion.jda.core.entities.impl.JDAImpl;
 import net.dv8tion.jda.core.events.guild.member.GuildMemberJoinEvent;
-import net.dv8tion.jda.core.requests.GuildLock;
 import org.json.JSONObject;
 
 public class GuildMemberAddHandler extends SocketHandler

File: src/main/java/net/dv8tion/jda/core/handle/GuildMemberRemoveHandler.java
Patch:
@@ -21,7 +21,6 @@
 import net.dv8tion.jda.core.entities.impl.*;
 import net.dv8tion.jda.core.events.guild.member.GuildMemberLeaveEvent;
 import net.dv8tion.jda.core.events.guild.voice.GuildVoiceLeaveEvent;
-import net.dv8tion.jda.core.requests.GuildLock;
 import net.dv8tion.jda.core.requests.WebSocketClient;
 import org.json.JSONObject;
 
@@ -71,8 +70,9 @@ protected Long handleInternally(JSONObject content)
 
         //The user is not in a different guild that we share
         // The user also is not a friend of this account in the case that the logged in account is a client account.
-        if (api.getGuildMap().valueCollection().stream().noneMatch(g -> ((GuildImpl) g).getMembersMap().containsKey(userId))
-                && !(api.getAccountType() == AccountType.CLIENT && api.asClient().getFriendById(userId) != null))
+        if (userId != api.getSelfUser().getIdLong() // don't remove selfUser from cache
+            && api.getGuildMap().valueCollection().stream().noneMatch(g -> ((GuildImpl) g).getMembersMap().containsKey(userId))
+            && !(api.getAccountType() == AccountType.CLIENT && api.asClient().getFriendById(userId) != null))
         {
             UserImpl user = (UserImpl) api.getUserMap().remove(userId);
             if (user.hasPrivateChannel())

File: src/main/java/net/dv8tion/jda/core/handle/GuildMembersChunkHandler.java
Patch:
@@ -20,7 +20,6 @@
 import gnu.trove.map.TLongObjectMap;
 import gnu.trove.map.hash.TLongIntHashMap;
 import gnu.trove.map.hash.TLongObjectHashMap;
-import net.dv8tion.jda.core.entities.EntityBuilder;
 import net.dv8tion.jda.core.entities.impl.JDAImpl;
 import org.json.JSONArray;
 import org.json.JSONObject;

File: src/main/java/net/dv8tion/jda/core/handle/GuildRoleCreateHandler.java
Patch:
@@ -15,12 +15,10 @@
  */
 package net.dv8tion.jda.core.handle;
 
-import net.dv8tion.jda.core.entities.EntityBuilder;
 import net.dv8tion.jda.core.entities.Role;
 import net.dv8tion.jda.core.entities.impl.GuildImpl;
 import net.dv8tion.jda.core.entities.impl.JDAImpl;
 import net.dv8tion.jda.core.events.role.RoleCreateEvent;
-import net.dv8tion.jda.core.requests.GuildLock;
 import org.json.JSONObject;
 
 public class GuildRoleCreateHandler extends SocketHandler

File: src/main/java/net/dv8tion/jda/core/handle/GuildRoleDeleteHandler.java
Patch:
@@ -21,7 +21,6 @@
 import net.dv8tion.jda.core.entities.impl.JDAImpl;
 import net.dv8tion.jda.core.entities.impl.MemberImpl;
 import net.dv8tion.jda.core.events.role.RoleDeleteEvent;
-import net.dv8tion.jda.core.requests.GuildLock;
 import org.json.JSONObject;
 
 public class GuildRoleDeleteHandler extends SocketHandler

File: src/main/java/net/dv8tion/jda/core/handle/GuildRoleUpdateHandler.java
Patch:
@@ -19,7 +19,6 @@
 import net.dv8tion.jda.core.entities.impl.JDAImpl;
 import net.dv8tion.jda.core.entities.impl.RoleImpl;
 import net.dv8tion.jda.core.events.role.update.*;
-import net.dv8tion.jda.core.requests.GuildLock;
 import org.json.JSONObject;
 
 import java.awt.Color;

File: src/main/java/net/dv8tion/jda/core/handle/GuildSyncHandler.java
Patch:
@@ -16,7 +16,6 @@
 
 package net.dv8tion.jda.core.handle;
 
-import net.dv8tion.jda.core.entities.EntityBuilder;
 import net.dv8tion.jda.core.entities.impl.GuildImpl;
 import net.dv8tion.jda.core.entities.impl.JDAImpl;
 import org.json.JSONArray;

File: src/main/java/net/dv8tion/jda/core/handle/MessageBulkDeleteHandler.java
Patch:
@@ -19,7 +19,6 @@
 import net.dv8tion.jda.core.entities.TextChannel;
 import net.dv8tion.jda.core.entities.impl.JDAImpl;
 import net.dv8tion.jda.core.events.message.MessageBulkDeleteEvent;
-import net.dv8tion.jda.core.requests.GuildLock;
 import org.json.JSONObject;
 
 import java.util.LinkedList;

File: src/main/java/net/dv8tion/jda/core/handle/MessageCreateHandler.java
Patch:
@@ -26,7 +26,6 @@
 import net.dv8tion.jda.core.events.message.MessageReceivedEvent;
 import net.dv8tion.jda.core.events.message.guild.GuildMessageReceivedEvent;
 import net.dv8tion.jda.core.events.message.priv.PrivateMessageReceivedEvent;
-import net.dv8tion.jda.core.requests.GuildLock;
 import net.dv8tion.jda.core.requests.WebSocketClient;
 import org.json.JSONObject;
 

File: src/main/java/net/dv8tion/jda/core/handle/MessageDeleteHandler.java
Patch:
@@ -27,7 +27,6 @@
 import net.dv8tion.jda.core.events.message.MessageDeleteEvent;
 import net.dv8tion.jda.core.events.message.guild.GuildMessageDeleteEvent;
 import net.dv8tion.jda.core.events.message.priv.PrivateMessageDeleteEvent;
-import net.dv8tion.jda.core.requests.GuildLock;
 import org.json.JSONObject;
 
 public class MessageDeleteHandler extends SocketHandler

File: src/main/java/net/dv8tion/jda/core/handle/MessageUpdateHandler.java
Patch:
@@ -27,7 +27,6 @@
 import net.dv8tion.jda.core.events.message.guild.GuildMessageUpdateEvent;
 import net.dv8tion.jda.core.events.message.priv.PrivateMessageEmbedEvent;
 import net.dv8tion.jda.core.events.message.priv.PrivateMessageUpdateEvent;
-import net.dv8tion.jda.core.requests.GuildLock;
 import net.dv8tion.jda.core.requests.WebSocketClient;
 import org.json.JSONArray;
 import org.json.JSONObject;
@@ -152,7 +151,7 @@ private Long handleDefaultMessage(JSONObject content)
 
     private Long handleMessageEmbed(JSONObject content)
     {
-        EntityBuilder builder = api.getEntityBuilder();;
+        EntityBuilder builder = api.getEntityBuilder();
         final long messageId = content.getLong("id");
         final long channelId = content.getLong("channel_id");
         LinkedList<MessageEmbed> embeds = new LinkedList<>();

File: src/main/java/net/dv8tion/jda/core/handle/PresenceUpdateHandler.java
Patch:
@@ -22,7 +22,6 @@
 import net.dv8tion.jda.core.events.user.UserGameUpdateEvent;
 import net.dv8tion.jda.core.events.user.UserNameUpdateEvent;
 import net.dv8tion.jda.core.events.user.UserOnlineStatusUpdateEvent;
-import net.dv8tion.jda.core.requests.GuildLock;
 import org.apache.commons.lang3.StringUtils;
 import org.json.JSONObject;
 

File: src/main/java/net/dv8tion/jda/core/handle/ReadyHandler.java
Patch:
@@ -49,7 +49,7 @@ public ReadyHandler(JDAImpl api)
     @Override
     protected Long handleInternally(JSONObject content)
     {
-        EntityBuilder builder = api.getEntityBuilder();;
+        EntityBuilder builder = api.getEntityBuilder();
 
         //Core
         JSONArray guilds = content.getJSONArray("guilds");
@@ -112,7 +112,7 @@ protected Long handleInternally(JSONObject content)
     public void guildLoadComplete(JSONObject content)
     {
         api.getClient().setChunkingAndSyncing(false);
-        EntityBuilder builder = api.getEntityBuilder();;
+        EntityBuilder builder = api.getEntityBuilder();
         JSONArray privateChannels = content.getJSONArray("private_channels");
 
         if (api.getAccountType() == AccountType.CLIENT)

File: src/main/java/net/dv8tion/jda/core/handle/SocketHandler.java
Patch:
@@ -16,7 +16,6 @@
 package net.dv8tion.jda.core.handle;
 
 import net.dv8tion.jda.core.entities.impl.JDAImpl;
-import net.dv8tion.jda.core.requests.GuildLock;
 import org.json.JSONObject;
 
 public abstract class SocketHandler

File: src/main/java/net/dv8tion/jda/core/handle/TypingStartHandler.java
Patch:
@@ -24,7 +24,6 @@
 import net.dv8tion.jda.core.entities.User;
 import net.dv8tion.jda.core.entities.impl.JDAImpl;
 import net.dv8tion.jda.core.events.user.UserTypingEvent;
-import net.dv8tion.jda.core.requests.GuildLock;
 import org.json.JSONObject;
 
 import java.time.Instant;

File: src/main/java/net/dv8tion/jda/core/handle/VoiceStateUpdateHandler.java
Patch:
@@ -33,7 +33,6 @@
 import net.dv8tion.jda.core.entities.impl.VoiceChannelImpl;
 import net.dv8tion.jda.core.events.guild.voice.*;
 import net.dv8tion.jda.core.managers.impl.AudioManagerImpl;
-import net.dv8tion.jda.core.requests.GuildLock;
 import net.dv8tion.jda.core.requests.WebSocketClient;
 import org.json.JSONObject;
 
@@ -136,7 +135,7 @@ else if (channel == null)
                 // is connected or attempting to connect, them change the channel we expect to be connected to.
                 if (guild.getSelfMember().equals(member))
                 {
-                    AudioManagerImpl mng = (AudioManagerImpl) api.getAudioManagerMap().get(guildId);
+                    AudioManagerImpl mng = api.getAudioManagerMap().get(guildId);
                     if (mng != null && (mng.isConnected() || mng.isAttemptingToConnect()))
                         mng.setConnectedChannel(channel);
                 }

File: src/main/java/net/dv8tion/jda/core/requests/ErrorResponse.java
Patch:
@@ -63,6 +63,7 @@ public enum ErrorResponse
     INVALID_MFA_LEVEL(  50017, "Provided MFA level was invalid."),
     INVALID_PASSWORD(   50018, "Provided password was invalid"),
     INVALID_PIN(        50019, "A message can only be pinned to the channel it was sent in"),
+    INVALID_MESSAGE_TARGET(50021, "Cannot execute action on a system message"),
     INVALID_BULK_DELETE_MESSAGE_AGE(50034, "A Message provided to bulk_delete was older than 2 weeks"),
     MFA_NOT_ENABLED(    60003, "MFA auth required but not enabled"),
     REACTION_BLOCKED(   90001, "Reaction Blocked"),

File: src/main/java/net/dv8tion/jda/core/requests/ErrorResponse.java
Patch:
@@ -63,6 +63,7 @@ public enum ErrorResponse
     INVALID_MFA_LEVEL(  50017, "Provided MFA level was invalid."),
     INVALID_PASSWORD(   50018, "Provided password was invalid"),
     INVALID_PIN(        50019, "A message can only be pinned to the channel it was sent in"),
+    INVALID_MESSAGE_TARGET(50021, "Cannot execute action on a system message"),
     INVALID_BULK_DELETE_MESSAGE_AGE(50034, "A Message provided to bulk_delete was older than 2 weeks"),
     MFA_NOT_ENABLED(    60003, "MFA auth required but not enabled"),
     REACTION_BLOCKED(   90001, "Reaction Blocked"),

File: src/main/java/net/dv8tion/jda/core/audio/AudioConnection.java
Patch:
@@ -90,13 +90,15 @@ public AudioConnection(AudioWebSocket webSocket, VoiceChannel channel)
         this.threadIdentifier = api.getIdentifierString() + " AudioConnection Guild: " + channel.getGuild().getId();
     }
 
-    public void ready(long timeout)
+    public void ready()
     {
         Thread readyThread = new Thread(threadIdentifier + " Ready Thread")
         {
             @Override
             public void run()
             {
+                final long timeout = getGuild().getAudioManager().getConnectTimeout();
+
                 JDAImpl api = (JDAImpl) getJDA();
                 long started = System.currentTimeMillis();
                 boolean connectionTimeout = false;

File: src/main/java/net/dv8tion/jda/core/audio/AudioWebSocket.java
Patch:
@@ -117,6 +117,7 @@ public void onConnected(WebSocket websocket, Map<String, List<String>> headers)
         send(connectObj.toString());
         connected = true;
         changeStatus(ConnectionStatus.CONNECTING_AWAITING_AUTHENTICATING);
+        audioConnection.ready();
     }
 
     @Override

File: src/main/java/net/dv8tion/jda/core/managers/impl/AudioManagerImpl.java
Patch:
@@ -303,7 +303,6 @@ public void setAudioConnection(AudioConnection audioConnection)
         audioConnection.setSendingHandler(sendHandler);
         audioConnection.setReceivingHandler(receiveHandler);
         audioConnection.setQueueTimeout(queueTimeout);
-        audioConnection.ready(timeout);
     }
 
     public void prepareForRegionChange()

File: src/main/java/net/dv8tion/jda/core/audio/AudioConnection.java
Patch:
@@ -90,13 +90,15 @@ public AudioConnection(AudioWebSocket webSocket, VoiceChannel channel)
         this.threadIdentifier = api.getIdentifierString() + " AudioConnection Guild: " + channel.getGuild().getId();
     }
 
-    public void ready(long timeout)
+    public void ready()
     {
         Thread readyThread = new Thread(threadIdentifier + " Ready Thread")
         {
             @Override
             public void run()
             {
+                final long timeout = getGuild().getAudioManager().getConnectTimeout();
+
                 JDAImpl api = (JDAImpl) getJDA();
                 long started = System.currentTimeMillis();
                 boolean connectionTimeout = false;

File: src/main/java/net/dv8tion/jda/core/audio/AudioWebSocket.java
Patch:
@@ -117,6 +117,7 @@ public void onConnected(WebSocket websocket, Map<String, List<String>> headers)
         send(connectObj.toString());
         connected = true;
         changeStatus(ConnectionStatus.CONNECTING_AWAITING_AUTHENTICATING);
+        audioConnection.ready();
     }
 
     @Override

File: src/main/java/net/dv8tion/jda/core/managers/impl/AudioManagerImpl.java
Patch:
@@ -303,7 +303,6 @@ public void setAudioConnection(AudioConnection audioConnection)
         audioConnection.setSendingHandler(sendHandler);
         audioConnection.setReceivingHandler(receiveHandler);
         audioConnection.setQueueTimeout(queueTimeout);
-        audioConnection.ready(timeout);
     }
 
     public void prepareForRegionChange()

File: src/main/java/net/dv8tion/jda/core/entities/impl/MessageImpl.java
Patch:
@@ -126,7 +126,7 @@ public RestAction<Void> addReaction(String unicode)
         Args.notEmpty(unicode, "Provided Unicode");
 
         MessageReaction reaction = reactions.parallelStream()
-                .filter(r -> r.getEmote().getName().equals(unicode))
+                .filter(r -> Objects.equals(r.getEmote().getName(), unicode))
                 .findFirst().orElse(null);
 
         if (reaction != null && reaction.isSelf())

File: src/main/java/net/dv8tion/jda/core/EmbedBuilder.java
Patch:
@@ -122,7 +122,7 @@ public MessageEmbed build()
     public boolean isEmpty()
     {
         return title == null
-                && description == null
+                && description.length() == 0
                 && timestamp == null
                 && color == null
                 && thumbnail == null

File: src/main/java/net/dv8tion/jda/core/managers/impl/AudioManagerImpl.java
Patch:
@@ -111,7 +111,7 @@ public void openAudioConnection(VoiceChannel channel)
             final int userLimit = channel.getUserLimit(); // userLimit is 0 if no limit is set!
             if (!self.isOwner() && !self.hasPermission(Permission.ADMINISTRATOR))
             {
-                final long perms = PermissionUtil.getImplicitPermission(channel, self);
+                final long perms = PermissionUtil.getExplicitPermission(channel, self);
                 final long voicePerm = Permission.VOICE_MOVE_OTHERS.getRawValue();
                 if (userLimit > 0                                               // If there is a userlimit
                     && userLimit <= channel.getMembers().size()                 // if that userlimit is reached

File: src/main/java/net/dv8tion/jda/core/entities/EntityBuilder.java
Patch:
@@ -251,7 +251,7 @@ else if (type == ChannelType.VOICE)
                     JSONObject obj = new JSONObject()
                             .put("op", 12)
                             .put("guild_id", guildObj.getId());
-                    api.getClient().send(obj.toString());
+                    api.getClient().chunkOrSyncRequest(obj);
                 }
                 JSONObject obj = new JSONObject()
                         .put("op", 8)
@@ -260,7 +260,7 @@ else if (type == ChannelType.VOICE)
                                 .put("query","")
                                 .put("limit", 0)
                         );
-                api.getClient().send(obj.toString());
+                api.getClient().chunkOrSyncRequest(obj);
             }
             else
             {

File: src/main/java/net/dv8tion/jda/client/managers/EmoteManagerUpdatable.java
Patch:
@@ -31,7 +31,6 @@
 import net.dv8tion.jda.core.requests.Response;
 import net.dv8tion.jda.core.requests.RestAction;
 import net.dv8tion.jda.core.requests.Route;
-import net.dv8tion.jda.core.utils.PermissionUtil;
 import org.apache.http.util.Args;
 import org.json.JSONObject;
 
@@ -235,7 +234,7 @@ protected boolean needsUpdate()
 
     protected void checkPermission(Permission perm)
     {
-        if (!PermissionUtil.checkPermission(getGuild(), getGuild().getSelfMember(), perm))
+        if (!getGuild().getSelfMember().hasPermission(perm))
             throw new PermissionException(perm);
     }
 

File: src/main/java/net/dv8tion/jda/core/entities/Member.java
Patch:
@@ -111,6 +111,9 @@ public interface Member extends IMentionable, IPermissionHolder
      * <p>A Member's roles can be changed using the <b>addRolesToMember</b>, <b>removeRolesFromMember</b>, and <b>modifyMemberRoles</b>
      * methods in {@link net.dv8tion.jda.core.managers.GuildController GuildController}.
      *
+     * <p><b>The Public Role ({@code @everyone}) is not included in the returned immutable list of roles
+     * <br>It is implicit that every member holds the Public Role in a Guild thus it is not listed here!</b>
+     *
      * @return An immutable List of {@link net.dv8tion.jda.core.entities.Role Roles} for this Member.
      */
     List<Role> getRoles();

File: src/main/java/net/dv8tion/jda/core/entities/impl/EmoteImpl.java
Patch:
@@ -30,7 +30,6 @@
 import net.dv8tion.jda.core.requests.Response;
 import net.dv8tion.jda.core.requests.RestAction;
 import net.dv8tion.jda.core.requests.Route;
-import net.dv8tion.jda.core.utils.PermissionUtil;
 
 import java.util.Collections;
 import java.util.HashSet;
@@ -159,7 +158,7 @@ public RestAction<Void> delete()
             throw new IllegalStateException("The emote you are trying to delete is not an actual emote we have access to (it is fake)!");
         if (managed)
             throw new UnsupportedOperationException("You cannot delete a managed emote!");
-        if (!PermissionUtil.checkPermission(guild, guild.getSelfMember(), Permission.MANAGE_EMOTES))
+        if (!guild.getSelfMember().hasPermission(Permission.MANAGE_EMOTES))
             throw new PermissionException(Permission.MANAGE_EMOTES);
 
         Route.CompiledRoute route = Route.Emotes.DELETE_EMOTE.compile(getGuild().getId(), getId());

File: src/main/java/net/dv8tion/jda/core/entities/impl/MemberImpl.java
Patch:
@@ -125,7 +125,7 @@ public List<Permission> getPermissions()
     {
         return Collections.unmodifiableList(
                 Permission.getPermissions(
-                        PermissionUtil.getEffectivePermission(guild, this)));
+                        PermissionUtil.getEffectivePermission(this)));
     }
 
     @Override
@@ -142,7 +142,7 @@ public List<Permission> getPermissions(Channel channel)
     @Override
     public boolean hasPermission(Permission... permissions)
     {
-        return PermissionUtil.checkPermission(guild, this, permissions);
+        return PermissionUtil.checkPermission(this, permissions);
     }
 
     @Override

File: src/main/java/net/dv8tion/jda/core/entities/impl/RoleImpl.java
Patch:
@@ -219,7 +219,7 @@ public RoleManagerUpdatable getManagerUpdatable()
     @Override
     public RestAction<Void> delete()
     {
-        if (!PermissionUtil.checkPermission(getGuild(), getGuild().getSelfMember(), Permission.MANAGE_ROLES))
+        if (!getGuild().getSelfMember().hasPermission(Permission.MANAGE_ROLES))
             throw new PermissionException(Permission.MANAGE_ROLES);
         if(!PermissionUtil.canInteract(getGuild().getSelfMember(), this))
             throw new PermissionException("Can't delete role >= highest self-role");

File: src/main/java/net/dv8tion/jda/core/managers/AudioManager.java
Patch:
@@ -64,7 +64,7 @@ public interface AudioManager
      * @throws net.dv8tion.jda.core.exceptions.PermissionException
      *         <ul>
      *             <li>If the currently logged in account does not have the Permission {@link net.dv8tion.jda.core.Permission#VOICE_CONNECT VOICE_CONNECT}</li>
-     *             <li>If the currently logged in account does not have the Permission {@link net.dv8tion.jda.core.Permission#MANAGE_CHANNEL MANAGE_CHANNEL}
+     *             <li>If the currently logged in account does not have the Permission {@link net.dv8tion.jda.core.Permission#VOICE_MOVE_OTHERS VOICE_MOVE_OTHERS}
      *                 and the {@link net.dv8tion.jda.core.entities.VoiceChannel#getUserLimit() user limit} has been exceeded!</li>
      *         </ul>
      */

File: src/main/java/net/dv8tion/jda/core/managers/GuildManagerUpdatable.java
Patch:
@@ -29,7 +29,6 @@
 import net.dv8tion.jda.core.requests.Response;
 import net.dv8tion.jda.core.requests.RestAction;
 import net.dv8tion.jda.core.requests.Route;
-import net.dv8tion.jda.core.utils.PermissionUtil;
 import org.apache.http.util.Args;
 import org.json.JSONObject;
 
@@ -410,7 +409,7 @@ protected void checkAvailable()
 
     protected void checkPermission(Permission perm)
     {
-        if (!PermissionUtil.checkPermission(guild, guild.getSelfMember(), perm))
+        if (!guild.getSelfMember().hasPermission(perm))
             throw new PermissionException(perm);
     }
 

File: src/main/java/net/dv8tion/jda/core/entities/impl/JDAImpl.java
Patch:
@@ -37,6 +37,7 @@
 import net.dv8tion.jda.core.hooks.InterfacedEventManager;
 import net.dv8tion.jda.core.managers.AudioManager;
 import net.dv8tion.jda.core.managers.Presence;
+import net.dv8tion.jda.core.managers.impl.AudioManagerImpl;
 import net.dv8tion.jda.core.managers.impl.PresenceImpl;
 import net.dv8tion.jda.core.requests.*;
 import net.dv8tion.jda.core.utils.MiscUtil;
@@ -69,7 +70,7 @@ public class JDAImpl implements JDA
     protected final TLongObjectMap<User> fakeUsers = MiscUtil.newLongMap();
     protected final TLongObjectMap<PrivateChannel> fakePrivateChannels = MiscUtil.newLongMap();
 
-    protected final TLongObjectMap<AudioManager> audioManagers = MiscUtil.newLongMap();
+    protected final TLongObjectMap<AudioManagerImpl> audioManagers = MiscUtil.newLongMap();
 
     protected final HttpHost proxy;
     protected final WebSocketFactory wsFactory;
@@ -771,7 +772,7 @@ public TLongObjectMap<PrivateChannel> getFakePrivateChannelMap()
         return fakePrivateChannels;
     }
 
-    public TLongObjectMap<AudioManager> getAudioManagerMap()
+    public TLongObjectMap<AudioManagerImpl> getAudioManagerMap()
     {
         return audioManagers;
     }

File: src/main/java/net/dv8tion/jda/core/requests/WebSocketClient.java
Patch:
@@ -26,9 +26,9 @@
 import net.dv8tion.jda.core.Permission;
 import net.dv8tion.jda.core.audio.hooks.ConnectionListener;
 import net.dv8tion.jda.core.audio.hooks.ConnectionStatus;
-import net.dv8tion.jda.core.entities.EntityBuilder;
 import net.dv8tion.jda.core.entities.Guild;
 import net.dv8tion.jda.core.entities.VoiceChannel;
+import net.dv8tion.jda.core.entities.impl.GuildImpl;
 import net.dv8tion.jda.core.entities.impl.JDAImpl;
 import net.dv8tion.jda.core.events.*;
 import net.dv8tion.jda.core.handle.*;
@@ -619,7 +619,7 @@ protected void updateAudioManagerReferences()
             final long guildId = mng.getGuild().getIdLong();
             ConnectionListener listener = mng.getConnectionListener();
 
-            Guild guild = api.getGuildById(guildId);
+            GuildImpl guild = (GuildImpl) api.getGuildById(guildId);
             if (guild == null)
             {
                 //We no longer have access to the guild that this audio manager was for. Set the value to null.

File: src/main/java/net/dv8tion/jda/core/Permission.java
Patch:
@@ -33,6 +33,7 @@ public enum Permission
     MANAGE_CHANNEL(4, true, true, "Manage Channels"),
     MANAGE_SERVER(5, true, false, "Manage Server"),
     MESSAGE_ADD_REACTION(6, true, true, "Add Reactions"),
+    VIEW_AUDIT_LOGS(7, true, false, "View Audit Logs"),
 
     MESSAGE_READ(10, true, true, "Read Messages"),
     MESSAGE_WRITE(11, true, true, "Send Messages"),

File: src/main/java/net/dv8tion/jda/core/utils/MiscUtil.java
Patch:
@@ -132,9 +132,9 @@ public static long parseSnowflake(String input)
         Args.notEmpty(input, "ID");
         try
         {
-            if (input.startsWith("-")) // if negative -> parse unsigned
+            if (!input.startsWith("-")) // if not negative -> parse unsigned
                 return Long.parseUnsignedLong(input);
-            else // if not negative -> parse normal
+            else // if negative -> parse normal
                 return Long.parseLong(input);
         }
         catch (NumberFormatException ex)

File: src/main/java/net/dv8tion/jda/bot/entities/impl/JDABotImpl.java
Patch:
@@ -60,7 +60,7 @@ protected void handleResponse(Response response, Request<ApplicationInfo> reques
                     return;
                 }
 
-                ApplicationInfo info = EntityBuilder.get(api).createApplicationInfo(response.getObject());
+                ApplicationInfo info = api.getEntityBuilder().createApplicationInfo(response.getObject());
                 JDABotImpl.this.clientId = info.getId();
                 request.onSuccess(info);
             }

File: src/main/java/net/dv8tion/jda/client/handle/CallCreateHandler.java
Patch:
@@ -51,7 +51,7 @@ protected Long handleInternally(JSONObject content)
             channel = api.getPrivateChannelMap().get(channelId);
         if (channel == null)
         {
-            EventCache.get(api).cache(EventCache.Type.CHANNEL, channelId, () -> handle(responseNumber, allContent));
+            api.getEventCache().cache(EventCache.Type.CHANNEL, channelId, () -> handle(responseNumber, allContent));
             EventCache.LOG.debug("Received a CALL_CREATE for a Group/PrivateChannel that is not yet cached. JSON: " + content);
             return null;
         }
@@ -108,7 +108,7 @@ protected Long handleInternally(JSONObject content)
 
             ((JDAClientImpl) api.asClient()).getCallUserMap().put(userId, cUser);
         }
-        EventCache.get(api).playbackCache(EventCache.Type.CALL, channelId);
+        api.getEventCache().playbackCache(EventCache.Type.CALL, channelId);
         return null;
     }
 }

File: src/main/java/net/dv8tion/jda/client/handle/CallDeleteHandler.java
Patch:
@@ -44,15 +44,15 @@ protected Long handleInternally(JSONObject content)
             channel = api.getPrivateChannelMap().get(channelId);
         if (channel == null)
         {
-            EventCache.get(api).cache(EventCache.Type.CHANNEL, channelId, () -> handle(responseNumber, allContent));
+            api.getEventCache().cache(EventCache.Type.CHANNEL, channelId, () -> handle(responseNumber, allContent));
             EventCache.LOG.debug("Received CALL_DELETE for a Group/PrivateChannel that is not yet cached. JSON: " + content);
             return null;
         }
 
         CallImpl call = (CallImpl) channel.getCurrentCall();
         if (call == null)
         {
-            EventCache.get(api).cache(EventCache.Type.CALL, channelId, () -> handle(responseNumber, allContent));
+            api.getEventCache().cache(EventCache.Type.CALL, channelId, () -> handle(responseNumber, allContent));
             EventCache.LOG.debug("Received a CALL_DELETE for a Call that is not yet cached. JSON: " + content);
             return null;
         }

File: src/main/java/net/dv8tion/jda/client/handle/CallUpdateHandler.java
Patch:
@@ -52,15 +52,15 @@ protected Long handleInternally(JSONObject content)
             channel = api.getPrivateChannelMap().get(channelId);
         if (channel == null)
         {
-            EventCache.get(api).cache(EventCache.Type.CHANNEL, channelId, () -> handle(responseNumber, allContent));
+            api.getEventCache().cache(EventCache.Type.CHANNEL, channelId, () -> handle(responseNumber, allContent));
             EventCache.LOG.debug("Received a CALL_UPDATE for a Group/PrivateChannel that has not yet been cached. JSON: " + content);
             return null;
         }
 
         CallImpl call = (CallImpl) channel.getCurrentCall();
         if (call == null)
         {
-            EventCache.get(api).cache(EventCache.Type.CALL, channelId, () -> handle(responseNumber, allContent));
+            api.getEventCache().cache(EventCache.Type.CALL, channelId, () -> handle(responseNumber, allContent));
             EventCache.LOG.debug("Received a CALL_UPDATE for a Call that has not yet been cached. JSON: " + content);
             return null;
         }

File: src/main/java/net/dv8tion/jda/client/handle/ChannelRecipientAddHandler.java
Patch:
@@ -43,12 +43,12 @@ protected Long handleInternally(JSONObject content)
         GroupImpl group = (GroupImpl) api.asClient().getGroupById(groupId);
         if (group == null)
         {
-            EventCache.get(api).cache(EventCache.Type.CHANNEL, groupId, () -> handle(responseNumber, allContent));
+            api.getEventCache().cache(EventCache.Type.CHANNEL, groupId, () -> handle(responseNumber, allContent));
             EventCache.LOG.debug("Received a CHANNEL_RECIPIENT_ADD for a group that is not yet cached! JSON: " + content);
             return null;
         }
 
-        User user = EntityBuilder.get(api).createFakeUser(userJson, true);
+        User user = api.getEntityBuilder().createFakeUser(userJson, true);
         group.getUserMap().put(user.getIdLong(), user);
 
         CallImpl call = (CallImpl) group.getCurrentCall();
@@ -62,7 +62,7 @@ protected Long handleInternally(JSONObject content)
                         api, responseNumber,
                         group, user));
 
-        EventCache.get(api).playbackCache(EventCache.Type.USER, user.getIdLong());
+        api.getEventCache().playbackCache(EventCache.Type.USER, user.getIdLong());
         return null;
     }
 }

File: src/main/java/net/dv8tion/jda/client/handle/ChannelRecipientRemoveHandler.java
Patch:
@@ -41,15 +41,15 @@ protected Long handleInternally(JSONObject content)
         GroupImpl group = (GroupImpl) api.asClient().getGroupById(groupId);
         if (group == null)
         {
-            EventCache.get(api).cache(EventCache.Type.CHANNEL, groupId, () -> handle(responseNumber, allContent));
+            api.getEventCache().cache(EventCache.Type.CHANNEL, groupId, () -> handle(responseNumber, allContent));
             EventCache.LOG.debug("Received a CHANNEL_RECIPIENT_REMOVE for a group that is not yet cached! JSON: " + content);
             return null;
         }
 
         User user = group.getUserMap().remove(userId);
         if (user == null)
         {
-            EventCache.get(api).cache(EventCache.Type.USER, userId, () -> handle(responseNumber, allContent));
+            api.getEventCache().cache(EventCache.Type.USER, userId, () -> handle(responseNumber, allContent));
             EventCache.LOG.debug("Received a CHANNEL_RECIPIENT_REMOVE for a user that is not yet cached in the group! JSON: " + content);
             return null;
         }

File: src/main/java/net/dv8tion/jda/client/handle/RelationshipAddHandler.java
Patch:
@@ -38,7 +38,7 @@ public RelationshipAddHandler(JDAImpl api)
     @Override
     protected Long handleInternally(JSONObject content)
     {
-        Relationship relationship = EntityBuilder.get(api).createRelationship(content);
+        Relationship relationship = api.getEntityBuilder().createRelationship(content);
         if (relationship == null)
         {
             WebSocketClient.LOG.warn("Received a RELATIONSHIP_ADD with an unknown type! JSON: " + content);
@@ -74,8 +74,8 @@ protected Long handleInternally(JSONObject content)
                 WebSocketClient.LOG.warn("Received a RELATIONSHIP_ADD with an unknown type! JSON: " + content);
                 return null;
         }
-        EventCache.get(api).playbackCache(EventCache.Type.RELATIONSHIP, relationship.getUser().getIdLong());
-        EventCache.get(api).playbackCache(EventCache.Type.USER, relationship.getUser().getIdLong());
+        api.getEventCache().playbackCache(EventCache.Type.RELATIONSHIP, relationship.getUser().getIdLong());
+        api.getEventCache().playbackCache(EventCache.Type.USER, relationship.getUser().getIdLong());
         return null;
     }
 }

File: src/main/java/net/dv8tion/jda/client/handle/RelationshipRemoveHandler.java
Patch:
@@ -57,7 +57,7 @@ protected Long handleInternally(JSONObject content)
         Relationship relationship = api.asClient().getRelationshipById(userId, type);
         if (relationship == null)
         {
-            EventCache.get(api).cache(EventCache.Type.RELATIONSHIP, userId, () -> handle(responseNumber, allContent));
+            api.getEventCache().cache(EventCache.Type.RELATIONSHIP, userId, () -> handle(responseNumber, allContent));
             EventCache.LOG.debug("Received a RELATIONSHIP_REMOVE for a relationship that was not yet cached! JSON: " + content);
             return null;
         }

File: src/main/java/net/dv8tion/jda/client/requests/restaction/ApplicationAction.java
Patch:
@@ -67,7 +67,7 @@ protected void handleResponse(final Response response, final Request<Application
     {
         if (response.isOk())
         {
-            request.onSuccess(EntityBuilder.get(api).createApplication(response.getObject()));
+            request.onSuccess(api.getEntityBuilder().createApplication(response.getObject()));
         }
         else
             request.onFailure(response);

File: src/main/java/net/dv8tion/jda/client/requests/restaction/pagination/MentionPaginationAction.java
Patch:
@@ -155,7 +155,7 @@ protected void handleResponse(Response response, Request<List<Message>> request)
             return;
         }
 
-        EntityBuilder builder = EntityBuilder.get(api);
+        EntityBuilder builder = api.getEntityBuilder();;
         List<Message> mentions = new LinkedList<>();
         JSONArray arr = response.getArray();
         for (int i = 0; i < arr.length(); i++)

File: src/main/java/net/dv8tion/jda/core/entities/MessageHistory.java
Patch:
@@ -149,7 +149,7 @@ protected void handleResponse(Response response, Request<List<Message>> request)
                     return;
                 }
 
-                EntityBuilder builder = EntityBuilder.get(api);
+                EntityBuilder builder = api.getEntityBuilder();;
                 LinkedList<Message> msgs  = new LinkedList<>();
                 JSONArray historyJson = response.getArray();
 
@@ -226,7 +226,7 @@ protected void handleResponse(Response response, Request<List<Message>> request)
                     return;
                 }
 
-                EntityBuilder builder = EntityBuilder.get(api);
+                EntityBuilder builder = api.getEntityBuilder();;
                 LinkedList<Message> msgs  = new LinkedList<>();
                 JSONArray historyJson = response.getArray();
 

File: src/main/java/net/dv8tion/jda/core/entities/impl/GuildImpl.java
Patch:
@@ -141,7 +141,7 @@ protected void handleResponse(Response response, Request<List<Webhook>> request)
 
                 List<Webhook> webhooks = new LinkedList<>();
                 JSONArray array = response.getArray();
-                EntityBuilder builder = EntityBuilder.get(getJDA());
+                EntityBuilder builder = api.getEntityBuilder();
 
                 for (Object object : array)
                 {
@@ -547,7 +547,7 @@ public AudioManager getAudioManager()
     }
 
     @Override
-    public JDA getJDA()
+    public JDAImpl getJDA()
     {
         return api;
     }
@@ -766,7 +766,7 @@ protected void handleResponse(final Response response, final Request<List<Invite
             {
                 if (response.isOk())
                 {
-                    EntityBuilder entityBuilder = EntityBuilder.get(this.api);
+                    EntityBuilder entityBuilder = this.api.getEntityBuilder();
                     JSONArray array = response.getArray();
                     List<Invite> invites = new ArrayList<>(array.length());
                     for (int i = 0; i < array.length(); i++)

File: src/main/java/net/dv8tion/jda/core/entities/impl/InviteImpl.java
Patch:
@@ -76,7 +76,7 @@ protected void handleResponse(final Response response, final Request<Invite> req
             {
                 if (response.isOk())
                 {
-                    final Invite invite = EntityBuilder.get(this.api).createInvite(response.getObject());
+                    final Invite invite = this.api.getEntityBuilder().createInvite(response.getObject());
                     request.onSuccess(invite);
                 }
                 else
@@ -99,7 +99,7 @@ protected void handleResponse(final Response response, final Request<Invite> req
             {
                 if (response.isOk())
                 {
-                    final Invite invite = EntityBuilder.get(this.api).createInvite(response.getObject());
+                    final Invite invite = this.api.getEntityBuilder().createInvite(response.getObject());
                     request.onSuccess(invite);
                 }
                 else
@@ -149,7 +149,7 @@ protected void handleResponse(final Response response, final Request<Invite> req
             {
                 if (response.isOk())
                 {
-                    final EntityBuilder entityBuilder = EntityBuilder.get(this.api);
+                    final EntityBuilder entityBuilder = this.api.getEntityBuilder();
                     final JSONArray array = response.getArray();
                     for (int i = 0; i < array.length(); i++)
                     {

File: src/main/java/net/dv8tion/jda/core/entities/impl/MemberImpl.java
Patch:
@@ -29,7 +29,7 @@
 
 public class MemberImpl implements Member
 {
-    private final Guild guild;
+    private final GuildImpl guild;
     private final User user;
     private final HashSet<Role> roles = new HashSet<>();
     private final GuildVoiceState voiceState;
@@ -39,7 +39,7 @@ public class MemberImpl implements Member
     private Game game;
     private OnlineStatus onlineStatus = OnlineStatus.OFFLINE;
 
-    public MemberImpl(Guild guild, User user)
+    public MemberImpl(GuildImpl guild, User user)
     {
         this.guild = guild;
         this.user = user;

File: src/main/java/net/dv8tion/jda/core/entities/impl/TextChannelImpl.java
Patch:
@@ -133,7 +133,7 @@ protected void handleResponse(Response response, Request<List<Webhook>> request)
 
                 List<Webhook> webhooks = new LinkedList<>();
                 JSONArray array = response.getArray();
-                EntityBuilder builder = EntityBuilder.get(getJDA());
+                EntityBuilder builder = api.getEntityBuilder();
 
                 for (Object object : array)
                 {
@@ -622,7 +622,7 @@ protected void handleResponse(final Response response, final Request<List<Invite
             {
                 if (response.isOk())
                 {
-                    EntityBuilder entityBuilder = EntityBuilder.get(this.api);
+                    EntityBuilder entityBuilder = this.api.getEntityBuilder();
                     JSONArray array = response.getArray();
                     List<Invite> invites = new ArrayList<>(array.length());
                     for (int i = 0; i < array.length(); i++)

File: src/main/java/net/dv8tion/jda/core/entities/impl/UserImpl.java
Patch:
@@ -17,7 +17,6 @@
 package net.dv8tion.jda.core.entities.impl;
 
 import net.dv8tion.jda.core.JDA;
-import net.dv8tion.jda.core.entities.EntityBuilder;
 import net.dv8tion.jda.core.entities.Guild;
 import net.dv8tion.jda.core.entities.PrivateChannel;
 import net.dv8tion.jda.core.entities.User;
@@ -118,7 +117,7 @@ protected void handleResponse(Response response, Request<PrivateChannel> request
             {
                 if (response.isOk())
                 {
-                    PrivateChannel priv = EntityBuilder.get(api).createPrivateChannel(response.getObject());
+                    PrivateChannel priv = api.getEntityBuilder().createPrivateChannel(response.getObject());
                     UserImpl.this.privateChannel = priv;
                     request.onSuccess(priv);
                 }

File: src/main/java/net/dv8tion/jda/core/entities/impl/VoiceChannelImpl.java
Patch:
@@ -347,7 +347,7 @@ protected void handleResponse(final Response response, final Request<List<Invite
             {
                 if (response.isOk())
                 {
-                    EntityBuilder entityBuilder = EntityBuilder.get(this.api);
+                    EntityBuilder entityBuilder = this.api.getEntityBuilder();
                     JSONArray array = response.getArray();
                     List<Invite> invites = new ArrayList<>(array.length());
                     for (int i = 0; i < array.length(); i++)

File: src/main/java/net/dv8tion/jda/core/handle/GuildBanHandler.java
Patch:
@@ -38,22 +38,22 @@ public GuildBanHandler(JDAImpl api, boolean banned)
     protected Long handleInternally(JSONObject content)
     {
         final long id = content.getLong("guild_id");
-        if (GuildLock.get(api).isLocked(id))
+        if (api.getGuildLock().isLocked(id))
             return id;
 
         JSONObject userJson = content.getJSONObject("user");
         GuildImpl guild = (GuildImpl) api.getGuildMap().get(id);
         if (guild == null)
         {
-            EventCache.get(api).cache(EventCache.Type.GUILD, id, () ->
+            api.getEventCache().cache(EventCache.Type.GUILD, id, () ->
             {
                 handle(responseNumber, allContent);
             });
             EventCache.LOG.debug("Received Guild Member " + (banned ? "Ban" : "Unban") + " event for a Guild not yet cached.");
             return null;
         }
 
-        User user = EntityBuilder.get(api).createFakeUser(userJson, false);
+        User user = api.getEntityBuilder().createFakeUser(userJson, false);
 
         if (banned)
         {

File: src/main/java/net/dv8tion/jda/core/handle/GuildCreateHandler.java
Patch:
@@ -36,7 +36,7 @@ protected Long handleInternally(JSONObject content)
     {
         Guild g = api.getGuildById(content.getLong("id"));
         Boolean wasAvail = (g == null || g.getName() == null) ? null : g.isAvailable();
-        EntityBuilder.get(api).createGuildFirstPass(content, guild ->
+        api.getEntityBuilder().createGuildFirstPass(content, guild ->
         {
             if (guild.isAvailable())
             {
@@ -52,7 +52,7 @@ protected Long handleInternally(JSONObject content)
                                 new GuildJoinEvent(
                                         api, responseNumber,
                                         guild));
-                        EventCache.get(api).playbackCache(EventCache.Type.GUILD, guild.getIdLong());
+                        api.getEventCache().playbackCache(EventCache.Type.GUILD, guild.getIdLong());
                     }
                     else if (!wasAvail)                     //was previously unavailable
                     {

File: src/main/java/net/dv8tion/jda/core/handle/GuildDeleteHandler.java
Patch:
@@ -55,7 +55,7 @@ protected Long handleInternally(JSONObject content)
         if ((guild == null || !guild.isAvailable()) && content.has("unavailable") && content.getBoolean("unavailable"))
             return null;
 
-        if (GuildLock.get(api).isLocked(id))
+        if (api.getGuildLock().isLocked(id))
             return id;
 
         AudioManagerImpl manager = (AudioManagerImpl) api.getAudioManagerMap().get(guild.getIdLong());

File: src/main/java/net/dv8tion/jda/core/handle/GuildEmojisUpdateHandler.java
Patch:
@@ -44,13 +44,13 @@ public GuildEmojisUpdateHandler(JDAImpl api)
     protected Long handleInternally(JSONObject content)
     {
         final long guildId = content.getLong("guild_id");
-        if (GuildLock.get(api).isLocked(guildId))
+        if (api.getGuildLock().isLocked(guildId))
             return guildId;
 
         GuildImpl guild = (GuildImpl) api.getGuildMap().get(guildId);
         if (guild == null)
         {
-            EventCache.get(api).cache(EventCache.Type.GUILD, guildId, () ->
+            api.getEventCache().cache(EventCache.Type.GUILD, guildId, () ->
                     handle(responseNumber, allContent));
             return null;
         }

File: src/main/java/net/dv8tion/jda/core/handle/GuildMemberRemoveHandler.java
Patch:
@@ -37,7 +37,7 @@ public GuildMemberRemoveHandler(JDAImpl api)
     protected Long handleInternally(JSONObject content)
     {
         final long id = content.getLong("guild_id");
-        if (GuildLock.get(api).isLocked(id))
+        if (api.getGuildLock().isLocked(id))
             return id;
 
         GuildImpl guild = (GuildImpl) api.getGuildMap().get(id);

File: src/main/java/net/dv8tion/jda/core/handle/GuildMembersChunkHandler.java
Patch:
@@ -58,7 +58,7 @@ protected Long handleInternally(JSONObject content)
         if (currentTotal >= expectMemberCount)
         {
             JDAImpl.LOG.debug("Finished chunking for: " + guildId);
-            EntityBuilder.get(api).createGuildSecondPass(guildId, memberChunks);
+            api.getEntityBuilder().createGuildSecondPass(guildId, memberChunks);
             memberChunksCache.remove(guildId);
             expectedGuildMembers.remove(guildId);
         }

File: src/main/java/net/dv8tion/jda/core/handle/GuildRoleDeleteHandler.java
Patch:
@@ -36,13 +36,13 @@ public GuildRoleDeleteHandler(JDAImpl api)
     protected Long handleInternally(JSONObject content)
     {
         final long guildId = content.getLong("guild_id");
-        if (GuildLock.get(api).isLocked(guildId))
+        if (api.getGuildLock().isLocked(guildId))
             return guildId;
 
         GuildImpl guild = (GuildImpl) api.getGuildMap().get(guildId);
         if (guild == null)
         {
-            EventCache.get(api).cache(EventCache.Type.GUILD, guildId, () -> handle(responseNumber, allContent));
+            api.getEventCache().cache(EventCache.Type.GUILD, guildId, () -> handle(responseNumber, allContent));
             EventCache.LOG.debug("GUILD_ROLE_DELETE was received for a Guild that is not yet cached: " + content);
             return null;
         }
@@ -51,7 +51,7 @@ protected Long handleInternally(JSONObject content)
         Role removedRole = guild.getRolesMap().remove(roleId);
         if (removedRole == null)
         {
-            EventCache.get(api).cache(EventCache.Type.ROLE, roleId, () -> handle(responseNumber, allContent));
+            api.getEventCache().cache(EventCache.Type.ROLE, roleId, () -> handle(responseNumber, allContent));
             EventCache.LOG.debug("GUILD_ROLE_DELETE was received for a Role that is not yet cached: " + content);
             return null;
         }

File: src/main/java/net/dv8tion/jda/core/handle/GuildRoleUpdateHandler.java
Patch:
@@ -36,14 +36,14 @@ public GuildRoleUpdateHandler(JDAImpl api)
     protected Long handleInternally(JSONObject content)
     {
         final long guildId = content.getLong("guild_id");
-        if (GuildLock.get(api).isLocked(guildId))
+        if (api.getGuildLock().isLocked(guildId))
             return guildId;
 
         JSONObject rolejson = content.getJSONObject("role");
         GuildImpl guild = (GuildImpl) api.getGuildMap().get(guildId);
         if (guild == null)
         {
-            EventCache.get(api).cache(EventCache.Type.GUILD, guildId, () ->
+            api.getEventCache().cache(EventCache.Type.GUILD, guildId, () ->
                     handle(responseNumber, allContent));
             EventCache.LOG.debug("Received a Role Update for a Guild that is not yet cached: " + content);
             return null;
@@ -53,7 +53,7 @@ protected Long handleInternally(JSONObject content)
         RoleImpl role = (RoleImpl) guild.getRolesMap().get(roleId);
         if (role == null)
         {
-            EventCache.get(api).cache(EventCache.Type.ROLE, roleId, () -> handle(responseNumber, allContent));
+            api.getEventCache().cache(EventCache.Type.ROLE, roleId, () -> handle(responseNumber, allContent));
             EventCache.LOG.debug("Received a Role Update for Role that is not yet cached: " + content);
             return null;
         }

File: src/main/java/net/dv8tion/jda/core/handle/GuildSyncHandler.java
Patch:
@@ -42,7 +42,7 @@ protected Long handleInternally(JSONObject content)
         GuildImpl guild = (GuildImpl) api.getGuildMap().get(guildId);
         JSONArray members = content.getJSONArray("members");
         JSONArray presences = content.getJSONArray("presences");
-        EntityBuilder.get(api).handleGuildSync(guild, members, presences);
+        api.getEntityBuilder().handleGuildSync(guild, members, presences);
 
         return null;
     }

File: src/main/java/net/dv8tion/jda/core/handle/GuildUpdateHandler.java
Patch:
@@ -39,7 +39,7 @@ public GuildUpdateHandler(JDAImpl api)
     protected Long handleInternally(JSONObject content)
     {
         final long id = content.getLong("id");
-        if (GuildLock.get(api).isLocked(id))
+        if (api.getGuildLock().isLocked(id))
             return id;
 
         GuildImpl guild = (GuildImpl) api.getGuildMap().get(id);

File: src/main/java/net/dv8tion/jda/core/handle/MessageBulkDeleteHandler.java
Patch:
@@ -52,12 +52,12 @@ protected Long handleInternally(JSONObject content)
             TextChannel channel = api.getTextChannelMap().get(channelId);
             if (channel == null)
             {
-                EventCache.get(api).cache(EventCache.Type.CHANNEL, channelId, () -> handle(responseNumber, allContent));
+                api.getEventCache().cache(EventCache.Type.CHANNEL, channelId, () -> handle(responseNumber, allContent));
                 EventCache.LOG.debug("Received a Bulk Message Delete for a TextChannel that is not yet cached.");
                 return null;
             }
 
-            if (GuildLock.get(api).isLocked(channel.getGuild().getIdLong()))
+            if (api.getGuildLock().isLocked(channel.getGuild().getIdLong()))
             {
                 return channel.getGuild().getIdLong();
             }

File: src/main/java/net/dv8tion/jda/core/handle/MessageDeleteHandler.java
Patch:
@@ -59,15 +59,15 @@ protected Long handleInternally(JSONObject content)
         }
         if (channel == null)
         {
-            EventCache.get(api).cache(EventCache.Type.CHANNEL, channelId, () -> handle(responseNumber, allContent));
+            api.getEventCache().cache(EventCache.Type.CHANNEL, channelId, () -> handle(responseNumber, allContent));
             EventCache.LOG.debug("Got message delete for a channel/group that is not yet cached. ChannelId: " + channelId);
             return null;
         }
 
         if (channel instanceof TextChannel)
         {
             TextChannelImpl tChan = (TextChannelImpl) channel;
-            if (GuildLock.get(api).isLocked(tChan.getGuild().getIdLong()))
+            if (api.getGuildLock().isLocked(tChan.getGuild().getIdLong()))
             {
                 return tChan.getGuild().getIdLong();
             }

File: src/main/java/net/dv8tion/jda/core/handle/MessageReactionBulkRemoveHandler.java
Patch:
@@ -56,7 +56,7 @@ protected Long handleInternally(JSONObject content)
         }
         if (channel == null)
         {
-            EventCache.get(api).cache(EventCache.Type.CHANNEL, channelId, () -> handle(responseNumber, allContent));
+            api.getEventCache().cache(EventCache.Type.CHANNEL, channelId, () -> handle(responseNumber, allContent));
             EventCache.LOG.debug("Received a reaction for a channel that JDA does not currently have cached");
             return null;
         }

File: src/main/java/net/dv8tion/jda/core/handle/MessageReactionHandler.java
Patch:
@@ -69,7 +69,7 @@ protected Long handleInternally(JSONObject content)
             user = api.getFakeUserMap().get(userId);
         if (user == null)
         {
-            EventCache.get(api).cache(EventCache.Type.USER, userId, () -> handle(responseNumber, allContent));
+            api.getEventCache().cache(EventCache.Type.USER, userId, () -> handle(responseNumber, allContent));
             EventCache.LOG.debug("Received a reaction for a user that JDA does not currently have cached");
             return null;
         }
@@ -89,7 +89,7 @@ protected Long handleInternally(JSONObject content)
         }
         if (channel == null)
         {
-            EventCache.get(api).cache(EventCache.Type.CHANNEL, channelId, () -> handle(responseNumber, allContent));
+            api.getEventCache().cache(EventCache.Type.CHANNEL, channelId, () -> handle(responseNumber, allContent));
             EventCache.LOG.debug("Received a reaction for a channel that JDA does not currently have cached");
             return null;
         }

File: src/main/java/net/dv8tion/jda/core/handle/PresenceUpdateHandler.java
Patch:
@@ -41,7 +41,7 @@ protected Long handleInternally(JSONObject content)
         if (content.has("guild_id"))
         {
             final long guildId = content.getLong("guild_id");
-            if (GuildLock.get(api).isLocked(guildId))
+            if (api.getGuildLock().isLocked(guildId))
                 return guildId;
         }
 

File: src/main/java/net/dv8tion/jda/core/handle/ReadyHandler.java
Patch:
@@ -49,7 +49,7 @@ public ReadyHandler(JDAImpl api)
     @Override
     protected Long handleInternally(JSONObject content)
     {
-        EntityBuilder builder = EntityBuilder.get(api);
+        EntityBuilder builder = api.getEntityBuilder();;
 
         //Core
         JSONArray guilds = content.getJSONArray("guilds");
@@ -112,7 +112,7 @@ protected Long handleInternally(JSONObject content)
     public void guildLoadComplete(JSONObject content)
     {
         api.getClient().setChunkingAndSyncing(false);
-        EntityBuilder builder = EntityBuilder.get(api);
+        EntityBuilder builder = api.getEntityBuilder();;
         JSONArray privateChannels = content.getJSONArray("private_channels");
 
         if (api.getAccountType() == AccountType.CLIENT)

File: src/main/java/net/dv8tion/jda/core/handle/SocketHandler.java
Patch:
@@ -37,7 +37,7 @@ public final void handle(long responseTotal, JSONObject o)
         this.responseNumber = responseTotal;
         final Long guildId = handleInternally(o.getJSONObject("d"));
         if (guildId != null)
-            GuildLock.get(api).queue(guildId, o);
+            api.getGuildLock().queue(guildId, o);
     }
 
     /**

File: src/main/java/net/dv8tion/jda/core/handle/TypingStartHandler.java
Patch:
@@ -58,7 +58,7 @@ protected Long handleInternally(JSONObject content)
         if (channel instanceof TextChannel)
         {
             final long guildId = ((TextChannel) channel).getGuild().getIdLong();
-            if (GuildLock.get(api).isLocked(guildId))
+            if (api.getGuildLock().isLocked(guildId))
                 return guildId;
         }
 

File: src/main/java/net/dv8tion/jda/core/handle/VoiceServerUpdateHandler.java
Patch:
@@ -41,7 +41,7 @@ protected Long handleInternally(JSONObject content)
         final long guildId = content.getLong("guild_id");
         api.getClient().getQueuedAudioConnectionMap().remove(guildId);
 
-        if (GuildLock.get(api).isLocked(guildId))
+        if (api.getGuildLock().isLocked(guildId))
             return guildId;
 
         if (content.isNull("endpoint"))

File: src/main/java/net/dv8tion/jda/core/managers/AccountManagerUpdatable.java
Patch:
@@ -270,7 +270,7 @@ protected void handleResponse(Response response, Request<Void> request)
                 String newToken = response.getObject().getString("token");
                 newToken = newToken.replace("Bot ", "");
 
-                ((JDAImpl) getJDA()).setToken(newToken);
+                api.setToken(newToken);
                 request.onSuccess(null);
             }
         };

File: src/main/java/net/dv8tion/jda/core/requests/WebSocketClient.java
Patch:
@@ -593,9 +593,9 @@ protected void invalidate()
         api.getPrivateChannelMap().clear();
         api.getFakeUserMap().clear();
         api.getFakePrivateChannelMap().clear();
-        EntityBuilder.get(api).clearCache();
-        EventCache.get(api).clear();
-        GuildLock.get(api).clear();
+        api.getEntityBuilder().clearCache();
+        api.getEventCache().clear();
+        api.getGuildLock().clear();
         this.<ReadyHandler>getHandler("READY").clearCache();
         this.<GuildMembersChunkHandler>getHandler("GUILD_MEMBERS_CHUNK").clearCache();
 

File: src/main/java/net/dv8tion/jda/core/requests/restaction/ChannelAction.java
Patch:
@@ -334,7 +334,7 @@ protected void handleResponse(Response response, Request<Channel> request)
             return;
         }
 
-        EntityBuilder builder = EntityBuilder.get(api);
+        EntityBuilder builder = api.getEntityBuilder();;
         Channel channel = voice
                 ? builder.createVoiceChannel(response.getObject(), guild.getIdLong())
                 : builder.createTextChannel(response.getObject(),  guild.getIdLong());

File: src/main/java/net/dv8tion/jda/core/requests/restaction/InviteAction.java
Patch:
@@ -65,7 +65,7 @@ protected void finalizeData()
     protected void handleResponse(final Response response, final Request<Invite> request)
     {
         if (response.isOk())
-            request.onSuccess(EntityBuilder.get(this.api).createInvite(response.getObject()));
+            request.onSuccess(this.api.getEntityBuilder().createInvite(response.getObject()));
         else
             request.onFailure(response);
     }

File: src/main/java/net/dv8tion/jda/core/requests/restaction/RoleAction.java
Patch:
@@ -249,7 +249,7 @@ protected void finalizeData()
     protected void handleResponse(Response response, Request<Role> request)
     {
         if (response.isOk())
-            request.onSuccess(EntityBuilder.get(api).createRole(response.getObject(), guild.getIdLong()));
+            request.onSuccess(api.getEntityBuilder().createRole(response.getObject(), guild.getIdLong()));
         else
             request.onFailure(response);
     }

File: src/main/java/net/dv8tion/jda/core/requests/restaction/WebhookAction.java
Patch:
@@ -98,7 +98,7 @@ protected void handleResponse(Response response, Request<Webhook> request)
             return;
         }
         JSONObject json = response.getObject();
-        Webhook webhook = EntityBuilder.get(api).createWebhook(json);
+        Webhook webhook = api.getEntityBuilder().createWebhook(json);
 
         request.onSuccess(webhook);
     }

File: src/main/java/net/dv8tion/jda/core/requests/restaction/pagination/ReactionPaginationAction.java
Patch:
@@ -102,7 +102,7 @@ protected void handleResponse(Response response, Request<List<User>> request)
             return;
         }
 
-        final EntityBuilder builder = EntityBuilder.get(api);
+        final EntityBuilder builder = api.getEntityBuilder();;
         final JSONArray array = response.getArray();
         final List<User> users = new LinkedList<>();
         for (int i = 0; i < array.length(); i++)

File: src/main/java/net/dv8tion/jda/core/requests/Request.java
Patch:
@@ -70,7 +70,7 @@ public void onFailure(Response response)
         }
         else
         {
-            onFailure(new ErrorResponseException(
+            onFailure(ErrorResponseException.create(
                     ErrorResponse.fromJSON(response.getObject()), response));
         }
     }

File: src/main/java/net/dv8tion/jda/client/requests/restaction/pagination/MentionPaginationAction.java
Patch:
@@ -42,7 +42,7 @@
  * <p><b>Must provide not-null {@link net.dv8tion.jda.core.entities.Guild Guild} to compile a valid guild mentions
  * pagination route.</b>, else it uses the global pagination route.
  *
- * @since  3.1
+ * @since  3.0
  * @author Florian Spieß
  */
 public class MentionPaginationAction extends PaginationAction<Message, MentionPaginationAction>

File: src/main/java/net/dv8tion/jda/core/requests/restaction/pagination/PaginationAction.java
Patch:
@@ -37,7 +37,7 @@
  * @param  <T>
  *         The type of entity to paginate
  *
- * @since  3.1
+ * @since  3.0
  * @author Florian Spieß
  */
 public abstract class PaginationAction<T, M extends PaginationAction<T, M>> extends RestAction<List<T>> implements Iterable<T>

File: src/main/java/net/dv8tion/jda/core/requests/restaction/pagination/ReactionPaginationAction.java
Patch:
@@ -39,7 +39,7 @@
  * <p><b>Must provide not-null {@link net.dv8tion.jda.core.entities.MessageReaction MessageReaction} to compile a valid
  * pagination route.</b>
  *
- * @since  3.1
+ * @since  3.0
  * @author Florian Spieß
  */
 public class ReactionPaginationAction extends PaginationAction<User, ReactionPaginationAction>

File: src/main/java/net/dv8tion/jda/core/requests/restaction/pagination/package-info.java
Patch:
@@ -21,6 +21,6 @@
  * as an {@link java.lang.Iterable Iterable} of the specified endpoint. Each implementation specifies the endpoints it will
  * use in the class-level javadoc
  *
- * @since 3.1
+ * @since 3.0
  */
 package net.dv8tion.jda.core.requests.restaction.pagination;

File: src/main/java/net/dv8tion/jda/core/requests/Requester.java
Patch:
@@ -146,6 +146,7 @@ public <T> Long execute(Request<T> apiRequest)
             }
 
             retryAfter = rateLimiter.handleResponse(route, response);
+            LOG.debug("Received response with following cf-rays: " + response.getHeaders().get("cf-ray"));
             if (retryAfter == null)
                 apiRequest.getRestAction().handleResponse(new Response(response.getStatus(), response.getBody(), -1), apiRequest);
 

File: src/main/java/net/dv8tion/jda/core/entities/impl/JDAImpl.java
Patch:
@@ -574,13 +574,13 @@ public void shutdown()
     public void shutdown(boolean free)
     {
         setStatus(Status.SHUTTING_DOWN);
-        getRequester().shutdown();
         audioManagers.valueCollection().forEach(AudioManager::closeAudioConnection);
         if (AudioWebSocket.KEEP_ALIVE_POOLS.containsKey(this))
             AudioWebSocket.KEEP_ALIVE_POOLS.get(this).shutdownNow();
         getClient().setAutoReconnect(false);
         getClient().close();
         getRequester().shutdown();
+        pool.shutdown();
 
         if (free)
         {

File: src/main/java/net/dv8tion/jda/core/events/message/react/package-info.java
Patch:
@@ -18,6 +18,6 @@
  * Events indicating the {@link net.dv8tion.jda.core.entities.MessageReaction MessageReactions} of a {@link net.dv8tion.jda.core.entities.Message Message} changed.
  * <br>These events
  * cannot provide a Message instance due to missing cache but instead provide the Message ID as
- * String representation.
+ * long representation.
  */
 package net.dv8tion.jda.core.events.message.react;

File: src/main/java/net/dv8tion/jda/core/handle/GuildMemberUpdateHandler.java
Patch:
@@ -137,7 +137,7 @@ private List<Role> toRolesList(GuildImpl guild, JSONArray array)
         LinkedList<Role> roles = new LinkedList<>();
         for(int i = 0; i < array.length(); i++)
         {
-            final long id = Long.parseLong(array.getString(i));
+            final long id = array.getLong(i);
             Role r = guild.getRolesMap().get(id);
             if (r != null)
             {

File: src/main/java/net/dv8tion/jda/core/entities/impl/UserImpl.java
Patch:
@@ -59,7 +59,7 @@ public String getName()
     @Override
     public String getDiscriminator()
     {
-        return String.valueOf(discriminator);
+        return String.format("%04d", discriminator);
     }
 
     @Override

File: src/main/java/com/iwebpp/crypto/TweetNaclFast.java
Patch:
@@ -10,7 +10,6 @@
 import java.io.UnsupportedEncodingException;
 import java.security.SecureRandom;
 import java.util.Base64;
-import java.lang.System;
 import java.util.concurrent.atomic.AtomicLong;
 
 /*

File: src/main/java/net/dv8tion/jda/bot/entities/impl/JDABotImpl.java
Patch:
@@ -52,7 +52,7 @@ public RestAction<ApplicationInfo> getApplicationInfo()
         return new RestAction<ApplicationInfo>(getJDA(), route, null)
         {
             @Override
-            protected void handleResponse(Response response, Request request)
+            protected void handleResponse(Response response, Request<ApplicationInfo> request)
             {
                 if (!response.isOk())
                 {

File: src/main/java/net/dv8tion/jda/client/entities/Call.java
Patch:
@@ -30,6 +30,7 @@ public interface Call extends AudioChannel
     Group getGroup();
     PrivateChannel getPrivateChannel();
     String getMessageId();
+    long getMessageIdLong();
 
     List<CallUser> getRingingUsers();
     List<CallUser> getConnectedUsers();

File: src/main/java/net/dv8tion/jda/client/entities/impl/BlockedUserImpl.java
Patch:
@@ -51,7 +51,7 @@ public RestAction unblockUser()
     @Override
     public String toString()
     {
-        return "BlockedUser:" + user.getName() + "(" + user.getId() + ")";
+        return "BlockedUser:" + user.getName() + "(" + user.getIdLong() + ")";
     }
 
     @Override

File: src/main/java/net/dv8tion/jda/client/entities/impl/UserSettingsImpl.java
Patch:
@@ -140,7 +140,7 @@ public UserSettingsImpl setStatus(OnlineStatus status)
     @Override
     public int hashCode()
     {
-        return getJDA().getSelfUser().getId().hashCode();
+        return Long.hashCode(getJDA().getSelfUser().getIdLong());
     }
 
     @Override

File: src/main/java/net/dv8tion/jda/client/handle/RelationshipAddHandler.java
Patch:
@@ -36,7 +36,7 @@ public RelationshipAddHandler(JDAImpl api)
     }
 
     @Override
-    protected String handleInternally(JSONObject content)
+    protected Long handleInternally(JSONObject content)
     {
         Relationship relationship = EntityBuilder.get(api).createRelationship(content);
         if (relationship == null)
@@ -74,8 +74,8 @@ protected String handleInternally(JSONObject content)
                 WebSocketClient.LOG.warn("Received a RELATIONSHIP_ADD with an unknown type! JSON: " + content);
                 return null;
         }
-        EventCache.get(api).playbackCache(EventCache.Type.RELATIONSHIP, relationship.getUser().getId());
-        EventCache.get(api).playbackCache(EventCache.Type.USER, relationship.getUser().getId());
+        EventCache.get(api).playbackCache(EventCache.Type.RELATIONSHIP, relationship.getUser().getIdLong());
+        EventCache.get(api).playbackCache(EventCache.Type.USER, relationship.getUser().getIdLong());
         return null;
     }
 }

File: src/main/java/net/dv8tion/jda/client/managers/ApplicationManagerUpdatable.java
Patch:
@@ -27,6 +27,7 @@
 import net.dv8tion.jda.core.requests.Route;
 import org.apache.http.util.Args;
 import org.json.JSONObject;
+
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -351,7 +352,7 @@ public RestAction<Void> update()
         return new RestAction<Void>(this.getJDA(), route, body)
         {
             @Override
-            protected void handleResponse(final Response response, final Request request)
+            protected void handleResponse(final Response response, final Request<Void> request)
             {
                 if (response.isOk())
                 {

File: src/main/java/net/dv8tion/jda/client/managers/EmoteManagerUpdatable.java
Patch:
@@ -217,7 +217,7 @@ public RestAction<Void> update()
         return new RestAction<Void>(getJDA(), route, body)
         {
             @Override
-            protected void handleResponse(Response response, Request request)
+            protected void handleResponse(Response response, Request<Void> request)
             {
                 if (response.isOk())
                     request.onSuccess(null);

File: src/main/java/net/dv8tion/jda/client/requests/restaction/pagination/MentionPaginationAction.java
Patch:
@@ -147,7 +147,7 @@ protected void finalizeRoute()
     }
 
     @Override
-    protected void handleResponse(Response response, Request request)
+    protected void handleResponse(Response response, Request<List<Message>> request)
     {
         if(!response.isOk())
         {

File: src/main/java/net/dv8tion/jda/core/entities/Emote.java
Patch:
@@ -159,7 +159,7 @@ default String getImageUrl()
     @Override
     default String getAsMention()
     {
-        return "<:" + getName() + ":" + getId() + ">";
+        return "<:" + getName() + ":" + getIdLong() + ">";
     }
 
     /**

File: src/main/java/net/dv8tion/jda/core/entities/impl/PermissionOverrideImpl.java
Patch:
@@ -170,7 +170,7 @@ public RestAction<Void> delete()
         return new RestAction<Void>(getJDA(), route, null)
         {
             @Override
-            protected void handleResponse(Response response, Request request)
+            protected void handleResponse(Response response, Request<Void> request)
             {
                 if (response.isOk())
                     request.onSuccess(null);

File: src/main/java/net/dv8tion/jda/core/entities/impl/SelfUserImpl.java
Patch:
@@ -35,7 +35,7 @@ public class SelfUserImpl extends UserImpl implements SelfUser
     //Client only
     private String email;
 
-    public SelfUserImpl(String id, JDAImpl api)
+    public SelfUserImpl(long id, JDAImpl api)
     {
         super(id, api);
     }

File: src/main/java/net/dv8tion/jda/core/handle/GuildSyncHandler.java
Patch:
@@ -30,9 +30,9 @@ public GuildSyncHandler(JDAImpl api)
     }
 
     @Override
-    protected String handleInternally(JSONObject content)
+    protected Long handleInternally(JSONObject content)
     {
-        String guildId = content.getString("id");
+        final long guildId = content.getLong("id");
         if (!api.getGuildMap().containsKey(guildId))
         {
             JDAImpl.LOG.fatal("Received a GUILD_SYNC for a Guild that does not yet exist in JDA's guild cache. This is a BAD ERROR FOR CLIENTS!");

File: src/main/java/net/dv8tion/jda/core/handle/ReadyHandler.java
Patch:
@@ -47,7 +47,7 @@ public ReadyHandler(JDAImpl api)
     }
 
     @Override
-    protected String handleInternally(JSONObject content)
+    protected Long handleInternally(JSONObject content)
     {
         EntityBuilder builder = EntityBuilder.get(api);
 

File: src/main/java/net/dv8tion/jda/core/handle/UserUpdateHandler.java
Patch:
@@ -32,7 +32,7 @@ public UserUpdateHandler(JDAImpl api)
     }
 
     @Override
-    protected String handleInternally(JSONObject content)
+    protected Long handleInternally(JSONObject content)
     {
         SelfUserImpl self = (SelfUserImpl) api.getSelfUser();
 

File: src/main/java/net/dv8tion/jda/core/managers/AccountManagerUpdatable.java
Patch:
@@ -259,7 +259,7 @@ public RestAction<Void> update(String currentPassword)
         return new RestAction<Void>(getJDA(), route, body)
         {
             @Override
-            protected void handleResponse(Response response, Request request)
+            protected void handleResponse(Response response, Request<Void> request)
             {
                 if (!response.isOk())
                 {

File: src/main/java/net/dv8tion/jda/core/managers/ChannelManagerUpdatable.java
Patch:
@@ -267,7 +267,7 @@ public RestAction<Void> update()
         return new RestAction<Void>(channel.getJDA(), route, frame)
         {
             @Override
-            protected void handleResponse(Response response, Request request)
+            protected void handleResponse(Response response, Request<Void> request)
             {
                 if (response.isOk())
                     request.onSuccess(null);

File: src/main/java/net/dv8tion/jda/core/managers/GuildManagerUpdatable.java
Patch:
@@ -379,7 +379,7 @@ public RestAction<Void> update()
         return new RestAction<Void>(guild.getJDA(), route, body)
         {
             @Override
-            protected void handleResponse(Response response, Request request)
+            protected void handleResponse(Response response, Request<Void> request)
             {
                 if (response.isOk())
                     request.onSuccess(null);

File: src/main/java/net/dv8tion/jda/core/managers/PermOverrideManagerUpdatable.java
Patch:
@@ -443,7 +443,7 @@ public RestAction<Void> update()
         return new RestAction<Void>(getJDA(), route, body)
         {
             @Override
-            protected void handleResponse(Response response, Request request)
+            protected void handleResponse(Response response, Request<Void> request)
             {
                 if (response.isOk())
                     request.onSuccess(null);

File: src/main/java/net/dv8tion/jda/core/managers/RoleManagerUpdatable.java
Patch:
@@ -259,7 +259,7 @@ public RestAction<Void> update()
         return new RestAction<Void>(getJDA(), route, body)
         {
             @Override
-            protected void handleResponse(Response response, Request request)
+            protected void handleResponse(Response response, Request<Void> request)
             {
                 if (response.isOk())
                     request.onSuccess(null);

File: src/main/java/net/dv8tion/jda/core/managers/WebhookManagerUpdatable.java
Patch:
@@ -228,7 +228,7 @@ public RestAction<Void> update()
         return new RestAction<Void>(getJDA(), route, data)
         {
             @Override
-            protected void handleResponse(Response response, Request request)
+            protected void handleResponse(Response response, Request<Void> request)
             {
                 if (response.isOk())
                     request.onSuccess(null);

File: src/main/java/net/dv8tion/jda/core/managers/impl/AudioManagerImpl.java
Patch:
@@ -121,7 +121,7 @@ public void closeAudioConnection(ConnectionStatus reason)
     {
         synchronized (CONNECTION_LOCK)
         {
-            api.getClient().getQueuedAudioConnectionMap().remove(guild.getId());
+            api.getClient().getQueuedAudioConnectionMap().remove(guild.getIdLong());
             this.queuedAudioConnection = null;
             if (audioConnection == null)
                 return;

File: src/main/java/net/dv8tion/jda/core/requests/RateLimiter.java
Patch:
@@ -19,15 +19,13 @@
 import com.mashape.unirest.http.HttpResponse;
 import net.dv8tion.jda.core.entities.impl.JDAImpl;
 import net.dv8tion.jda.core.requests.Route.CompiledRoute;
-import net.dv8tion.jda.core.requests.Route.RateLimit;
 import net.dv8tion.jda.core.requests.ratelimit.IBucket;
 
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.*;
 import java.util.concurrent.atomic.AtomicInteger;
-import java.util.stream.Collectors;
 
 public abstract class RateLimiter
 {

File: src/main/java/net/dv8tion/jda/core/requests/Requester.java
Patch:
@@ -63,7 +63,7 @@ public JDAImpl getJDA()
         return api;
     }
 
-    public void request(Request apiRequest)
+    public <T> void request(Request<T> apiRequest)
     {
         if (rateLimiter.isShutdown)
             throw new IllegalStateException("The Requester has been shutdown! No new requests can be requested!");
@@ -89,7 +89,7 @@ public void request(Request apiRequest)
      *         the request can be made again. This could either be for the Per-Route ratelimit or the Global ratelimit.
      *         <br>Check if globalCooldown is {@code null} to determine if it was Per-Route or Global.
      */
-    public Long execute(Request apiRequest)
+    public <T> Long execute(Request<T> apiRequest)
     {
         CompiledRoute route = apiRequest.getRoute();
         Long retryAfter = rateLimiter.getRateLimit(route);

File: src/main/java/net/dv8tion/jda/core/requests/RestAction.java
Patch:
@@ -623,7 +623,7 @@ protected void finalizeData() { }
 
     protected void finalizeRoute() { }
 
-    protected abstract void handleResponse(Response response, Request request);
+    protected abstract void handleResponse(Response response, Request<T> request);
 
     /**
      * Specialized form of {@link net.dv8tion.jda.core.requests.RestAction} that is used to provide information that
@@ -663,6 +663,6 @@ public T complete(boolean shouldQueue)
         }
 
         @Override
-        protected void handleResponse(Response response, Request request) { }
+        protected void handleResponse(Response response, Request<T> request) { }
     }
 }

File: src/main/java/net/dv8tion/jda/core/requests/ratelimit/IBucket.java
Patch:
@@ -18,6 +18,7 @@
 
 import net.dv8tion.jda.core.requests.Request;
 import net.dv8tion.jda.core.requests.Route;
+
 import java.util.Queue;
 
 public interface IBucket

File: src/main/java/net/dv8tion/jda/core/requests/restaction/ChannelAction.java
Patch:
@@ -326,7 +326,7 @@ protected void finalizeData()
     }
 
     @Override
-    protected void handleResponse(Response response, Request request)
+    protected void handleResponse(Response response, Request<Channel> request)
     {
         if (!response.isOk())
         {
@@ -336,8 +336,8 @@ protected void handleResponse(Response response, Request request)
 
         EntityBuilder builder = EntityBuilder.get(api);
         Channel channel = voice
-                ? builder.createVoiceChannel(response.getObject(), guild.getId())
-                : builder.createTextChannel(response.getObject(),  guild.getId());
+                ? builder.createVoiceChannel(response.getObject(), guild.getIdLong())
+                : builder.createTextChannel(response.getObject(),  guild.getIdLong());
 
         request.onSuccess(channel);
     }

File: src/main/java/net/dv8tion/jda/core/requests/restaction/InviteAction.java
Patch:
@@ -62,7 +62,7 @@ protected void finalizeData()
     }
 
     @Override
-    protected void handleResponse(final Response response, final Request request)
+    protected void handleResponse(final Response response, final Request<Invite> request)
     {
         if (response.isOk())
             request.onSuccess(EntityBuilder.get(this.api).createInvite(response.getObject()));

File: src/main/java/net/dv8tion/jda/core/requests/restaction/RoleAction.java
Patch:
@@ -246,10 +246,10 @@ protected void finalizeData()
     }
 
     @Override
-    protected void handleResponse(Response response, Request request)
+    protected void handleResponse(Response response, Request<Role> request)
     {
         if (response.isOk())
-            request.onSuccess(EntityBuilder.get(api).createRole(response.getObject(), guild.getId()));
+            request.onSuccess(EntityBuilder.get(api).createRole(response.getObject(), guild.getIdLong()));
         else
             request.onFailure(response);
     }

File: src/main/java/net/dv8tion/jda/core/requests/restaction/WebhookAction.java
Patch:
@@ -90,7 +90,7 @@ public void finalizeData()
     }
 
     @Override
-    protected void handleResponse(Response response, Request request)
+    protected void handleResponse(Response response, Request<Webhook> request)
     {
         if (!response.isOk())
         {

File: src/main/java/net/dv8tion/jda/core/requests/restaction/order/ChannelOrderAction.java
Patch:
@@ -40,7 +40,7 @@
  *
  * @since 3.0
  */
-public class ChannelOrderAction<T extends Channel> extends OrderAction<T, ChannelOrderAction>
+public class ChannelOrderAction<T extends Channel> extends OrderAction<T, ChannelOrderAction<T>>
 {
     protected final Guild guild;
     protected final ChannelType type;

File: src/main/java/net/dv8tion/jda/core/requests/restaction/order/OrderAction.java
Patch:
@@ -46,7 +46,7 @@
  *
  * @since 3.0
  */
-public abstract class OrderAction<T, M extends OrderAction> extends RestAction<Void>
+public abstract class OrderAction<T, M extends OrderAction<T, M>> extends RestAction<Void>
 {
     protected final JDA api;
     protected final List<T> orderList;
@@ -402,7 +402,7 @@ public M sortOrder(final Comparator<T> comparator)
     }
 
     @Override
-    protected void handleResponse(Response response, Request request)
+    protected void handleResponse(Response response, Request<Void> request)
     {
         if (response.isOk())
             request.onSuccess(null);

File: src/main/java/net/dv8tion/jda/core/requests/restaction/pagination/PaginationAction.java
Patch:
@@ -251,7 +251,7 @@ public Stream<T> parallelStream()
     }
 
     protected abstract void finalizeRoute();
-    protected abstract void handleResponse(Response response, Request request);
+    protected abstract void handleResponse(Response response, Request<List<T>> request);
 
     /**
      * Iterator implementation for a {@link net.dv8tion.jda.core.requests.restaction.pagination.PaginationAction PaginationAction}.

File: src/main/java/net/dv8tion/jda/core/requests/restaction/pagination/ReactionPaginationAction.java
Patch:
@@ -94,7 +94,7 @@ protected void finalizeRoute()
     }
 
     @Override
-    protected void handleResponse(Response response, Request request)
+    protected void handleResponse(Response response, Request<List<User>> request)
     {
         if (!response.isOk())
         {

File: src/main/java/net/dv8tion/jda/core/utils/PermissionUtil.java
Patch:
@@ -168,14 +168,14 @@ public static boolean canInteract(User issuer, Emote emote, MessageChannel chann
 
         if (emote.isFake() || !emote.getGuild().isMember(issuer))
             return false; // cannot use an emote if you're not in its guild
-        Member member = emote.getGuild().getMemberById(issuer.getId());
+        Member member = emote.getGuild().getMemberById(issuer.getIdLong());
         if (!canInteract(member, emote))
             return false;
         switch (channel.getType())
         {
             case TEXT:
                 TextChannel text = (TextChannel) channel;
-                member = text.getGuild().getMemberById(issuer.getId());
+                member = text.getGuild().getMemberById(issuer.getIdLong());
                 return emote.getGuild().equals(text.getGuild()) // within the same guild
                     || (emote.isManaged() && checkPermission(text, member, Permission.MESSAGE_EXT_EMOJI)); // in different guild
             default:
@@ -236,7 +236,7 @@ public static boolean checkPermission(Guild guild, Member member, Permission...
         for (Permission perm : permissions)
         {
             if (!guild.getPublicRole().hasPermission(perm)
-                    && !roles.parallelStream().anyMatch(role -> role.hasPermission(perm)))
+                    && roles.parallelStream().noneMatch(role -> role.hasPermission(perm)))
                 return false;
         }
         return true;

File: src/main/java/net/dv8tion/jda/core/handle/EventCache.java
Patch:
@@ -25,7 +25,7 @@
 public class EventCache
 {
     public static final SimpleLog LOG = SimpleLog.getLog("EventCache");
-    private static HashMap<JDA, EventCache> caches = new HashMap<>();
+    private static final HashMap<JDA, EventCache> caches = new HashMap<>();
     private HashMap<Type, HashMap<String, List<Runnable>>> eventCache = new HashMap<>();
 
     public static EventCache get(JDA jda)

File: src/main/java/net/dv8tion/jda/core/hooks/ListenerAdapter.java
Patch:
@@ -94,6 +94,7 @@ public void onReconnect(ReconnectedEvent event) {}
     public void onDisconnect(DisconnectEvent event) {}
     public void onShutdown(ShutdownEvent event) {}
     public void onStatusChange(StatusChangeEvent event) {}
+    public void onException(ExceptionEvent event) {}
 
     //User Events
     public void onUserNameUpdate(UserNameUpdateEvent event) {}
@@ -299,6 +300,8 @@ else if (event instanceof ShutdownEvent)
             onShutdown((ShutdownEvent) event);
         else if (event instanceof StatusChangeEvent)
             onStatusChange((StatusChangeEvent) event);
+        else if (event instanceof ExceptionEvent)
+            onException((ExceptionEvent) event);
 
         //Message Events
         //Guild (TextChannel) Message Events

File: src/main/java/net/dv8tion/jda/core/requests/GuildLock.java
Patch:
@@ -24,8 +24,8 @@
 
 public class GuildLock
 {
-    public static SimpleLog LOG = SimpleLog.getLog("JDAGuildLock");
-    private static Map<JDA, GuildLock> locks = new HashMap<>();
+    public static final SimpleLog LOG = SimpleLog.getLog("JDAGuildLock");
+    private static final Map<JDA, GuildLock> locks = new HashMap<>();
 
     public static synchronized GuildLock get(JDA jda)
     {

File: src/main/java/net/dv8tion/jda/core/requests/Requester.java
Patch:
@@ -35,8 +35,8 @@
 public class Requester
 {
     public static final SimpleLog LOG = SimpleLog.getLog("JDARequester");
-    public static String USER_AGENT = "JDA DiscordBot (" + JDAInfo.GITHUB + ", " + JDAInfo.VERSION + ")";
     public static final String DISCORD_API_PREFIX = "https://discordapp.com/api/";
+    public static String USER_AGENT = "JDA DiscordBot (" + JDAInfo.GITHUB + ", " + JDAInfo.VERSION + ")";
 
     private final JDAImpl api;
     private final RateLimiter rateLimiter;
@@ -212,4 +212,4 @@ protected <T extends BaseRequest> T addHeaders(T baseRequest)
         request.header("Accept-Encoding", "gzip");
         return baseRequest;
     }
-}
\ No newline at end of file
+}

File: src/main/java/net/dv8tion/jda/core/requests/WebSocketClient.java
Patch:
@@ -761,7 +761,7 @@ public void onUnexpectedError(WebSocket websocket, WebSocketException cause) thr
     @Override
     public void handleCallbackError(WebSocket websocket, Throwable cause)
     {
-//        LOG.log(cause);
+        api.getEventManager().handle(new ExceptionEvent(api, cause, false));
     }
 
     public void setChunkingAndSyncing(boolean active)

File: src/main/java/net/dv8tion/jda/core/entities/EntityBuilder.java
Patch:
@@ -1195,7 +1195,7 @@ public ApplicationInfo createApplicationInfo(JSONObject object)
     {
         final String description = object.getString("description");
         final boolean doesBotRequireCodeGrant = object.getBoolean("bot_require_code_grant");
-        final String iconId = object.has("icon") ? object.getString("icon") : null;
+        final String iconId = object.has("icon") && !object.isNull("icon") ? object.getString("icon") : null;
         final String id = object.getString("id");
         final String name = object.getString("name");
         final boolean isBotPublic = object.getBoolean("bot_public");

File: src/main/java/net/dv8tion/jda/core/entities/impl/MemberImpl.java
Patch:
@@ -104,7 +104,7 @@ public String getEffectiveName()
     public List<Role> getRoles()
     {
         List<Role> roleList = new ArrayList<>(roles);
-        roleList.sort((r1, r2) -> r2.compareTo(r1));
+        roleList.sort(Comparator.reverseOrder());
 
         return Collections.unmodifiableList(roleList);
     }

File: src/main/java/net/dv8tion/jda/client/entities/RelationshipType.java
Patch:
@@ -27,7 +27,7 @@ public enum RelationshipType
 
     private final int key;
 
-    private RelationshipType(int key)
+    RelationshipType(int key)
     {
         this.key = key;
     }

File: src/main/java/net/dv8tion/jda/core/entities/TextChannel.java
Patch:
@@ -40,11 +40,11 @@ public interface TextChannel extends Channel, MessageChannel, Comparable<TextCha
 
     /**
      * Bulk deletes a list of messages.
-     * <b>This is not the same as calling {@link net.dv8tion.jda.core.entities.Message#deleteMessage()} in a loop.</b>
+     * <b>This is not the same as calling {@link net.dv8tion.jda.core.entities.Message#delete()} in a loop.</b>
      * <br>This is much more efficient, but it has a different ratelimit. You may call this once per second per Guild.
      *
      * <p>Must be at least 2 messages and not be more than 100 messages at a time.
-     * <br>If you only have 1 message, use the {@link Message#deleteMessage()} method instead.
+     * <br>If you only have 1 message, use the {@link Message#delete()} method instead.
      *
      * <br><p>You must have the Permission {@link net.dv8tion.jda.core.Permission#MESSAGE_MANAGE MESSAGE_MANAGE} in this channel to use
      * this function.
@@ -88,7 +88,7 @@ public interface TextChannel extends Channel, MessageChannel, Comparable<TextCha
      * <br>This is much more efficient, but it has a different ratelimit. You may call this once per second per Guild.
      *
      * <p>Must be at least 2 messages and not be more than 100 messages at a time.
-     * <br>If you only have 1 message, use the {@link net.dv8tion.jda.core.entities.Message#deleteMessage()} method instead.
+     * <br>If you only have 1 message, use the {@link net.dv8tion.jda.core.entities.Message#delete()} method instead.
      *
      * <br><p>You must have {@link net.dv8tion.jda.core.Permission#MESSAGE_MANAGE Permission.MESSAGE_MANAGE} in this channel to use
      * this function.

File: src/main/java/net/dv8tion/jda/core/entities/impl/JDAImpl.java
Patch:
@@ -163,10 +163,10 @@ else if (response.code == 401)
             }
         };
 
-        JSONObject userResponse = null;
+        JSONObject userResponse;
         try
         {
-            userResponse = login.block();
+            userResponse = login.complete(false);
         }
         catch (RuntimeException e)
         {
@@ -206,7 +206,7 @@ else if (response.code == 401)
             try
             {
                 //Now that we have reversed the AccountTypes, attempt to get User info again.
-                userResponse = login.block();
+                userResponse = login.complete(false);
             }
             catch (RuntimeException e)
             {

File: src/main/java/net/dv8tion/jda/core/handle/GuildDeleteHandler.java
Patch:
@@ -34,6 +34,7 @@
 import org.json.JSONObject;
 
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.Iterator;
 import java.util.Set;
 
@@ -80,7 +81,8 @@ protected String handleInternally(JSONObject content)
 
         //cleaning up all users that we do not share a guild with anymore
         // Anything left in memberIds will be removed from the main userMap
-        Set<String> memberIds = guild.getMembersMap().keySet();
+        //Use a new HashSet so that we don't actually modify the Member map so it doesn't affect Guild#getMembers for the leave event.
+        Set<String> memberIds = new HashSet(guild.getMembersMap().keySet());
         for (Guild guildI : api.getGuilds())
         {
             GuildImpl g = (GuildImpl) guildI;

File: src/main/java/net/dv8tion/jda/core/requests/WebSocketClient.java
Patch:
@@ -333,7 +333,7 @@ protected void handleResponse(Response response, Request request)
                 }
             };
 
-            return gateway.block() + "?encoding=json&v=" + DISCORD_GATEWAY_VERSION;
+            return gateway.complete(false) + "?encoding=json&v=" + DISCORD_GATEWAY_VERSION;
         }
         catch (Exception ex)
         {

File: src/main/java/net/dv8tion/jda/core/entities/Message.java
Patch:
@@ -528,7 +528,7 @@ public interface Message extends ISnowflake
      *        The {@link net.dv8tion.jda.core.entities.Emote Emote} to add as a reaction to this Message.
      *
      * @throws net.dv8tion.jda.core.exceptions.PermissionException
-     *         If the MessageChannel this message was sent in was a {@link net.dv8tion.jda.core.entities.TextChannel TextChannel
+     *         If the MessageChannel this message was sent in was a {@link net.dv8tion.jda.core.entities.TextChannel TextChannel}
      *         and the logged in account does not have
      *         <ul>
      *             <li>{@link net.dv8tion.jda.core.Permission#MESSAGE_ADD_REACTION Permission.MESSAGE_ADD_REACTION}</li>
@@ -577,7 +577,7 @@ public interface Message extends ISnowflake
      *        The UTF8 emoji to add as a reaction to this Message.
      *
      * @throws net.dv8tion.jda.core.exceptions.PermissionException
-     *         If the MessageChannel this message was sent in was a {@link net.dv8tion.jda.core.entities.TextChannel TextChannel
+     *         If the MessageChannel this message was sent in was a {@link net.dv8tion.jda.core.entities.TextChannel TextChannel}
      *         and the logged in account does not have
      *         <ul>
      *             <li>{@link net.dv8tion.jda.core.Permission#MESSAGE_ADD_REACTION Permission.MESSAGE_ADD_REACTION}</li>

File: src/main/java/net/dv8tion/jda/core/entities/MessageChannel.java
Patch:
@@ -862,7 +862,7 @@ protected void handleResponse(Response response, Request request)
      *             <li>If provided {@code messageId} is {@code null} or empty.</li>
      *         </ul>
      * @throws net.dv8tion.jda.core.exceptions.PermissionException
-     *         If the MessageChannel this message was sent in was a {@link net.dv8tion.jda.core.entities.TextChannel TextChannel
+     *         If the MessageChannel this message was sent in was a {@link net.dv8tion.jda.core.entities.TextChannel TextChannel}
      *         and the logged in account does not have
      *         <ul>
      *             <li>{@link net.dv8tion.jda.core.Permission#MESSAGE_ADD_REACTION Permission.MESSAGE_ADD_REACTION}</li>
@@ -945,7 +945,7 @@ protected void handleResponse(Response response, Request request)
      *             <li>If provided {@code emote} is {@code null}</li>
      *         </ul>
      * @throws net.dv8tion.jda.core.exceptions.PermissionException
-     *         If the MessageChannel this message was sent in was a {@link net.dv8tion.jda.core.entities.TextChannel TextChannel
+     *         If the MessageChannel this message was sent in was a {@link net.dv8tion.jda.core.entities.TextChannel TextChannel}
      *         and the logged in account does not have
      *         <ul>
      *             <li>{@link net.dv8tion.jda.core.Permission#MESSAGE_ADD_REACTION Permission.MESSAGE_ADD_REACTION}</li>

File: src/main/java/net/dv8tion/jda/core/JDA.java
Patch:
@@ -559,8 +559,6 @@ public boolean equals(Object o)
      */
     void shutdown(boolean free);
 
-    List<IBucket> shutdownNow(boolean free);
-
     /**
      * Installs an auxiliary cable into your system.
      *

File: src/main/java/net/dv8tion/jda/core/handle/GuildDeleteHandler.java
Patch:
@@ -52,7 +52,7 @@ protected String handleInternally(JSONObject content)
 
         //If the event is attempting to mark the guild as unavailable, but it is already unavailable,
         // ignore the event
-        if (!guild.isAvailable() && content.has("unavailable") && content.getBoolean("unavailable"))
+        if ((guild == null || !guild.isAvailable()) && content.has("unavailable") && content.getBoolean("unavailable"))
             return null;
 
         if (GuildLock.get(api).isLocked(guildId))

File: src/main/java/net/dv8tion/jda/core/EmbedBuilder.java
Patch:
@@ -35,7 +35,7 @@
  * <br>A visual breakdown of an Embed and how it relates to this class is available at
  * <a href="http://imgur.com/a/yOb5n" target="_blank">http://imgur.com/a/yOb5n</a>.
  *
- * @since  JDA 3.0
+ * @since  3.0
  * @author John A. Grosh
  */
 public class EmbedBuilder 

File: src/main/java/net/dv8tion/jda/core/entities/MessageEmbed.java
Patch:
@@ -471,7 +471,7 @@ public String getProxyIconUrl()
      * the field can display on the same line as previous fields if there is
      * enough space horizontally.
      *
-     * @since  JDA
+     * @since  3.0
      * @author John A. Grosh
      */
     class Field

File: src/main/java/net/dv8tion/jda/core/entities/MessageReaction.java
Patch:
@@ -38,7 +38,7 @@
  * This is an immutable object and is not updated by method calls or changes in Discord. A new snapshot instance
  * built from Discord is needed to see changes.
  *
- * @since  JDA
+ * @since  3.0
  * @author Florian Spieß
  */
 public class MessageReaction

File: src/main/java/net/dv8tion/jda/core/entities/Webhook.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * An object representing Webhooks in Discord
  *
- * @since  JDA
+ * @since  3.0
  * @author Florian Spieß
  */
 public interface Webhook extends ISnowflake

File: src/main/java/net/dv8tion/jda/core/entities/impl/EmoteImpl.java
Patch:
@@ -40,7 +40,7 @@
 /**
  * Represents a Custom Emote. (Emoji in official Discord API terminology)
  *
- * @since  JDA 2.2
+ * @since  2.2
  * @author Florian Spieß
  */
 public class EmoteImpl implements Emote

File: src/main/java/net/dv8tion/jda/core/entities/impl/WebhookImpl.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * The implementation for {@link net.dv8tion.jda.core.entities.Webhook Webhook}
  *
- * @since  JDA 3.0
+ * @since  3.0
  * @author Florian Spieß
  */
 public class WebhookImpl implements Webhook

File: src/main/java/net/dv8tion/jda/core/managers/Presence.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * The Presence associated with the provided JDA instance
  *
- * @since  JDA 3.0
+ * @since  3.0
  * @author Florian Spieß
  */
 public interface Presence

File: src/main/java/net/dv8tion/jda/core/managers/impl/PresenceImpl.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * The Presence associated with the provided JDA instance
  *
- * @since  JDA 3.0
+ * @since  3.0
  * @author Florian Spieß
  */
 public class PresenceImpl implements Presence

File: src/main/java/net/dv8tion/jda/core/utils/WidgetUtil.java
Patch:
@@ -39,7 +39,7 @@
  * The WidgetUtil is a class for interacting with various facets of Discord's
  * guild widgets
  *
- * @since  JDA 3.0
+ * @since  3.0
  * @author John A. Grosh
  */
 public class WidgetUtil 

File: src/main/java/net/dv8tion/jda/core/entities/EntityBuilder.java
Patch:
@@ -396,7 +396,8 @@ else if (type == ChannelType.VOICE)
                     }
                     catch (IllegalArgumentException e)
                     {
-                        WebSocketClient.LOG.warn(e.getMessage() + ". Ignoring PermissionOverride.");
+                        //Caused by Discord not properly clearing PermissionOverrides when a Member leaves a Guild.
+                        WebSocketClient.LOG.debug(e.getMessage() + ". Ignoring PermissionOverride.");
                     }
                 }
             }

File: src/main/java/net/dv8tion/jda/core/entities/Message.java
Patch:
@@ -674,7 +674,8 @@ public String getUrl()
 
         /**
          * The url of the Attachment, proxied by Discord.
-         * <br>The point of this URL is to prevent IP scraping when downloading attachments from Discord.
+         * <br>Url to the resource proxied by https://images.discordapp.net
+         * <br><b>Note: </b> This URL will most likely only work for images. ({@link #isImage()})
          *
          * @return Non-null String containing the proxied Attachment url.
          */
@@ -706,7 +707,7 @@ public boolean download(File file)
             InputStream in = null;
             try
             {
-                URL url = new URL(getProxyUrl());
+                URL url = new URL(getUrl());
                 URLConnection con;
                 if (jda.getGlobalProxy() == null)
                 {

File: src/main/java/net/dv8tion/jda/core/requests/Route.java
Patch:
@@ -54,6 +54,7 @@ public static class Guilds
         public static final Route CREATE_CHANNEL =   new Route(POST,   "guilds/{guild_id}/channels",          "guild_id");
         public static final Route GET_CHANNELS =     new Route(GET,    "guilds/{guild_id}/channels",          "guild_id");
         public static final Route MODIFY_CHANNELS =  new Route(PATCH,  "guilds/{guild_id}/channels",          "guild_id");
+        public static final Route MODIFY_ROLES =     new Route(PATCH,  "guilds/{guild_id}/roles",             "guild_id");
         public static final Route GET_BANS =         new Route(GET,    "guilds/{guild_id}/bans",              "guild_id");
         public static final Route BAN =              new Route(PUT,    "guilds/{guild_id}/bans/{user_id}",    "guild_id");
         public static final Route BAN_WITH_DELETE =  new Route(PUT,    "guilds/{guild_id}/bans/{user_id}?delete-message-days={}",    "guild_id");

File: src/main/java/net/dv8tion/jda/core/EmbedBuilder.java
Patch:
@@ -183,7 +183,7 @@ public EmbedBuilder setTitle(String title, String url)
     /**
      * The {@link java.lang.StringBuilder StringBuilder} used to
      * build the description for the embed.
-     * <br>Note: To reset the description use {@link #setDescription(String) setDescription(null)}
+     * <br>Note: To reset the description use {@link #setDescription(CharSequence) setDescription(null)}
      *
      * @return StringBuilder with current description context
      */

File: src/main/java/net/dv8tion/jda/core/entities/MessageChannel.java
Patch:
@@ -742,7 +742,7 @@ default RestAction<MessageHistory> getHistoryAround(Message message, int limit)
     default RestAction<MessageHistory> getHistoryAround(String messageId, int limit)
     {
         Args.notEmpty(messageId, "Provided messageId");
-        Args.check(limit > 100 || limit < 1, "Provided limit was out of bounds. Minimum: 1, Max: 100. Provided: %d", limit);
+        Args.check(limit >= 1 && limit <= 100, "Provided limit was out of bounds. Minimum: 1, Max: 100. Provided: %d", limit);
 
         Route.CompiledRoute route = Route.Messages.GET_MESSAGE_HISTORY_AROUND.compile(this.getId(), Integer.toString(limit), messageId);
         return new RestAction<MessageHistory>(getJDA(), route, null)

File: src/main/java/net/dv8tion/jda/core/entities/EntityBuilder.java
Patch:
@@ -508,7 +508,7 @@ public Member createMember(GuildImpl guild, JSONObject memberJson)
             Role r = guild.getRolesMap().get(roleId);
             if (r == null)
             {
-                WebSocketClient.LOG.fatal("Received a Member with an unknown Role. MemberId: "
+                WebSocketClient.LOG.debug("Received a Member with an unknown Role. MemberId: "
                         + member.getUser().getId() + " GuildId: " + guild.getId() + " roleId: " + roleId);
             }
             else

File: src/examples/java/MessageListenerExample.java
Patch:
@@ -163,7 +163,7 @@ else if (msg.equals("!roll"))
             {                                                               // what they are or how they work, try google!
                 if (roll < 3)
                 {
-                    channel.sendMessage("The role for messageId: " + sentMessage.getId() + " wasn't very good... Must be bad luck!\n").queue();
+                    channel.sendMessage("The roll for messageId: " + sentMessage.getId() + " wasn't very good... Must be bad luck!\n").queue();
                 }
             });
         }

File: src/main/java/net/dv8tion/jda/bot/JDABot.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 
 package net.dv8tion.jda.bot;

File: src/main/java/net/dv8tion/jda/client/entities/BlockedUser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/entities/Call.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,7 +19,6 @@
 import net.dv8tion.jda.core.Region;
 import net.dv8tion.jda.core.entities.AudioChannel;
 import net.dv8tion.jda.core.entities.PrivateChannel;
-import net.dv8tion.jda.core.entities.User;
 
 import java.util.List;
 

File: src/main/java/net/dv8tion/jda/client/entities/CallUser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/entities/CallVoiceState.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/entities/CallableChannel.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/entities/Friend.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/entities/Group.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/entities/IncomingFriendRequest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/entities/OutgoingFriendRequest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/entities/Relationship.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/entities/RelationshipType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/entities/UserSettings.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/entities/impl/BlockedUserImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/entities/impl/CallUserImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/entities/impl/CallVoiceStateImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/entities/impl/FriendImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/entities/impl/IncomingFriendRequestImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/entities/impl/OutgoingFriendRequestImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/entities/impl/UserSettingsImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/events/call/CallCreateEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/events/call/CallDeleteEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/events/call/GenericCallEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/events/call/update/CallUpdateRegionEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/events/call/update/CallUpdateRingingUsersEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/events/call/update/GenericCallUpdateEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/events/call/voice/CallVoiceJoinEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/events/call/voice/CallVoiceLeaveEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/events/call/voice/CallVoiceSelfDeafenEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/events/call/voice/CallVoiceSelfMuteEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/events/call/voice/GenericCallVoiceEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/events/group/GenericGroupEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/events/group/GroupJoinEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/events/group/GroupLeaveEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/events/group/GroupUserJoinEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/events/group/GroupUserLeaveEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/events/group/update/GenericGroupUpdateEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/events/group/update/GroupUpdateIconEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/events/group/update/GroupUpdateNameEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/events/group/update/GroupUpdateOwnerEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/events/message/group/GenericGroupMessageEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/events/message/group/GroupMessageDeleteEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,7 +18,6 @@
 
 import net.dv8tion.jda.client.entities.Group;
 import net.dv8tion.jda.core.JDA;
-import net.dv8tion.jda.core.entities.Message;
 
 public class GroupMessageDeleteEvent extends GenericGroupMessageEvent
 {

File: src/main/java/net/dv8tion/jda/client/events/message/group/GroupMessageEmbedEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/events/message/group/GroupMessageReceivedEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/events/message/group/GroupMessageUpdateEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/events/relationship/FriendAddedEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/events/relationship/FriendRemovedEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/events/relationship/FriendRequestCanceledEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/events/relationship/FriendRequestIgnoredEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/events/relationship/FriendRequestReceivedEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/events/relationship/FriendRequestSentEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/events/relationship/GenericRelationshipAddEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/events/relationship/GenericRelationshipEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/events/relationship/GenericRelationshipRemoveEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/events/relationship/UserBlockedEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/events/relationship/UserUnblockedEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/exceptions/VerificationLevelException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 
 package net.dv8tion.jda.client.exceptions;

File: src/main/java/net/dv8tion/jda/client/handle/CallCreateHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/handle/CallDeleteHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/handle/CallUpdateHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -32,7 +32,6 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Objects;
-import java.util.stream.Collectors;
 
 public class CallUpdateHandler extends SocketHandler
 {

File: src/main/java/net/dv8tion/jda/client/handle/ChannelRecipientAddHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/handle/ChannelRecipientRemoveHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/handle/RelationshipAddHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/client/handle/RelationshipRemoveHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,7 +24,6 @@
 import net.dv8tion.jda.client.events.relationship.FriendRequestCanceledEvent;
 import net.dv8tion.jda.client.events.relationship.FriendRequestIgnoredEvent;
 import net.dv8tion.jda.client.events.relationship.UserUnblockedEvent;
-import net.dv8tion.jda.core.AccountType;
 import net.dv8tion.jda.core.entities.User;
 import net.dv8tion.jda.core.entities.impl.GuildImpl;
 import net.dv8tion.jda.core.entities.impl.JDAImpl;

File: src/main/java/net/dv8tion/jda/core/JDAInfo.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core;
 

File: src/main/java/net/dv8tion/jda/core/audio/AudioConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/audio/AudioPacket.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/audio/AudioWebSocket.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/audio/Decoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/audio/hooks/ListenerProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/entities/Invite.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -26,7 +26,7 @@
  * Representation of a Discord Invite.
  * This class is immutable.
  *
- * @since  JDA 3.0
+ * @since  3.0
  * @author Aljoscha Grebe
  */
 public interface Invite
@@ -184,7 +184,7 @@ static RestAction<Invite> resolve(final JDA api, final String code)
     int getMaxAge();
 
     /**
-    * The max uses of this invite. If there is no limit thius will return {@code 0}.
+    * The max uses of this invite. If there is no limit thus will return {@code 0}.
     *
     * <p>This works only for expanded invites and will throw a {@link IllegalStateException} otherwise!
     *

File: src/main/java/net/dv8tion/jda/core/entities/impl/GameImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.entities.impl;
 

File: src/main/java/net/dv8tion/jda/core/entities/impl/GuildVoiceStateImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 
 package net.dv8tion.jda.core.entities.impl;

File: src/main/java/net/dv8tion/jda/core/events/Event.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events;
 

File: src/main/java/net/dv8tion/jda/core/events/ReadyEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events;
 

File: src/main/java/net/dv8tion/jda/core/events/ReconnectedEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events;
 

File: src/main/java/net/dv8tion/jda/core/events/ResumedEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events;
 

File: src/main/java/net/dv8tion/jda/core/events/StatusChangeEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events;
 

File: src/main/java/net/dv8tion/jda/core/events/channel/priv/PrivateChannelCreateEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/channel/priv/PrivateChannelDeleteEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.channel.priv;
 

File: src/main/java/net/dv8tion/jda/core/events/channel/text/GenericTextChannelEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.channel.text;
 

File: src/main/java/net/dv8tion/jda/core/events/channel/text/TextChannelCreateEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.channel.text;
 

File: src/main/java/net/dv8tion/jda/core/events/channel/text/TextChannelDeleteEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.channel.text;
 

File: src/main/java/net/dv8tion/jda/core/events/channel/text/update/GenericTextChannelUpdateEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.channel.text.update;
 

File: src/main/java/net/dv8tion/jda/core/events/channel/text/update/TextChannelUpdateNameEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.channel.text.update;
 

File: src/main/java/net/dv8tion/jda/core/events/channel/text/update/TextChannelUpdatePermissionsEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.channel.text.update;
 

File: src/main/java/net/dv8tion/jda/core/events/channel/text/update/TextChannelUpdatePositionEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.channel.text.update;
 

File: src/main/java/net/dv8tion/jda/core/events/channel/text/update/TextChannelUpdateTopicEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.channel.text.update;
 

File: src/main/java/net/dv8tion/jda/core/events/channel/voice/GenericVoiceChannelEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.channel.voice;
 

File: src/main/java/net/dv8tion/jda/core/events/channel/voice/VoiceChannelCreateEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.channel.voice;
 

File: src/main/java/net/dv8tion/jda/core/events/channel/voice/VoiceChannelDeleteEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.channel.voice;
 

File: src/main/java/net/dv8tion/jda/core/events/channel/voice/update/GenericVoiceChannelUpdateEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 
 package net.dv8tion.jda.core.events.channel.voice.update;

File: src/main/java/net/dv8tion/jda/core/events/channel/voice/update/VoiceChannelUpdateBitrateEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.channel.voice.update;
 

File: src/main/java/net/dv8tion/jda/core/events/channel/voice/update/VoiceChannelUpdateNameEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.channel.voice.update;
 

File: src/main/java/net/dv8tion/jda/core/events/channel/voice/update/VoiceChannelUpdatePermissionsEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.channel.voice.update;
 

File: src/main/java/net/dv8tion/jda/core/events/channel/voice/update/VoiceChannelUpdatePositionEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.channel.voice.update;
 

File: src/main/java/net/dv8tion/jda/core/events/channel/voice/update/VoiceChannelUpdateUserLimitEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.channel.voice.update;
 

File: src/main/java/net/dv8tion/jda/core/events/guild/GenericGuildEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/guild/GuildAvailableEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 
 package net.dv8tion.jda.core.events.guild;

File: src/main/java/net/dv8tion/jda/core/events/guild/GuildBanEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.guild;
 

File: src/main/java/net/dv8tion/jda/core/events/guild/GuildJoinEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.guild;
 

File: src/main/java/net/dv8tion/jda/core/events/guild/GuildLeaveEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.guild;
 

File: src/main/java/net/dv8tion/jda/core/events/guild/GuildUnavailableEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 
 package net.dv8tion.jda.core.events.guild;

File: src/main/java/net/dv8tion/jda/core/events/guild/GuildUnbanEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.guild;
 

File: src/main/java/net/dv8tion/jda/core/events/guild/UnavailableGuildJoinedEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 
 package net.dv8tion.jda.core.events.guild;

File: src/main/java/net/dv8tion/jda/core/events/guild/member/GenericGuildMemberEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.guild.member;
 

File: src/main/java/net/dv8tion/jda/core/events/guild/member/GuildMemberJoinEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.guild.member;
 

File: src/main/java/net/dv8tion/jda/core/events/guild/member/GuildMemberLeaveEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.guild.member;
 

File: src/main/java/net/dv8tion/jda/core/events/guild/member/GuildMemberNickChangeEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 
 package net.dv8tion.jda.core.events.guild.member;

File: src/main/java/net/dv8tion/jda/core/events/guild/member/GuildMemberRoleAddEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.guild.member;
 

File: src/main/java/net/dv8tion/jda/core/events/guild/member/GuildMemberRoleRemoveEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.guild.member;
 

File: src/main/java/net/dv8tion/jda/core/events/guild/update/GenericGuildUpdateEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.guild.update;
 

File: src/main/java/net/dv8tion/jda/core/events/guild/update/GuildUpdateAfkChannelEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/guild/update/GuildUpdateAfkTimeoutEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/guild/update/GuildUpdateIconEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/guild/update/GuildUpdateMFALevelEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/guild/update/GuildUpdateNameEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/guild/update/GuildUpdateNotificationLevelEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/guild/update/GuildUpdateOwnerEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/guild/update/GuildUpdateRegionEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/guild/update/GuildUpdateVerificationLevelEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/guild/voice/GenericGuildVoiceEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/guild/voice/GuildVoiceDeafenEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/guild/voice/GuildVoiceGuildMuteEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/guild/voice/GuildVoiceJoinEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/guild/voice/GuildVoiceLeaveEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/guild/voice/GuildVoiceMoveEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/guild/voice/GuildVoiceMuteEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/guild/voice/GuildVoiceSelfDeafenEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/guild/voice/GuildVoiceSelfMuteEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/guild/voice/GuildVoiceSuppressEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/message/GenericMessageEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.message;
 

File: src/main/java/net/dv8tion/jda/core/events/message/MessageBulkDeleteEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/message/MessageDeleteEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -58,7 +58,7 @@ public MessageChannel getChannel()
         return channel;
     }
 
-    public PrivateChannel getPrivatechannel()
+    public PrivateChannel getPrivateChannel()
     {
         return isFromType(ChannelType.PRIVATE) ? (PrivateChannel) channel : null;
     }

File: src/main/java/net/dv8tion/jda/core/events/message/MessageEmbedEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/message/MessageReceivedEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.message;
 

File: src/main/java/net/dv8tion/jda/core/events/message/MessageUpdateEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/message/guild/GenericGuildMessageEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.message.guild;
 

File: src/main/java/net/dv8tion/jda/core/events/message/guild/GuildMessageDeleteEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.message.guild;
 

File: src/main/java/net/dv8tion/jda/core/events/message/guild/GuildMessageEmbedEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.message.guild;
 

File: src/main/java/net/dv8tion/jda/core/events/message/priv/GenericPrivateMessageEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.message.priv;
 

File: src/main/java/net/dv8tion/jda/core/events/message/priv/PrivateMessageDeleteEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.message.priv;
 

File: src/main/java/net/dv8tion/jda/core/events/message/priv/PrivateMessageEmbedEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.message.priv;
 

File: src/main/java/net/dv8tion/jda/core/events/message/react/GenericMessageReactionEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/message/react/MessageReactionAddEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/message/react/MessageReactionRemoveAllEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/message/react/MessageReactionRemoveEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/role/GenericRoleEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/role/RoleCreateEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/role/RoleDeleteEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/role/update/GenericRoleUpdateEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/role/update/RoleUpdateColorEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,7 +19,7 @@
 import net.dv8tion.jda.core.JDA;
 import net.dv8tion.jda.core.entities.Role;
 
-import java.awt.*;
+import java.awt.Color;
 
 public class RoleUpdateColorEvent extends GenericRoleUpdateEvent
 {

File: src/main/java/net/dv8tion/jda/core/events/role/update/RoleUpdateHoistedEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/role/update/RoleUpdateMentionableEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/role/update/RoleUpdateNameEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/role/update/RoleUpdatePermissionsEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/role/update/RoleUpdatePositionEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/self/GenericSelfUpdateEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/self/SelfUpdateAvatarEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/self/SelfUpdateEmailEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/self/SelfUpdateMFAEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/self/SelfUpdateNameEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/self/SelfUpdateVerifiedEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/user/GenericUserEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.user;
 

File: src/main/java/net/dv8tion/jda/core/events/user/UserAvatarUpdateEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.user;
 

File: src/main/java/net/dv8tion/jda/core/events/user/UserGameUpdateEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.user;
 

File: src/main/java/net/dv8tion/jda/core/events/user/UserNameUpdateEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/events/user/UserOnlineStatusUpdateEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.user;
 

File: src/main/java/net/dv8tion/jda/core/events/user/UserTypingEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.events.user;
 

File: src/main/java/net/dv8tion/jda/core/handle/ChannelCreateHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 
 package net.dv8tion.jda.core.handle;

File: src/main/java/net/dv8tion/jda/core/handle/ChannelDeleteHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 
 package net.dv8tion.jda.core.handle;

File: src/main/java/net/dv8tion/jda/core/handle/EventCache.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.handle;
 

File: src/main/java/net/dv8tion/jda/core/handle/GuildBanHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/handle/GuildCreateHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.handle;
 

File: src/main/java/net/dv8tion/jda/core/handle/GuildDeleteHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 
 package net.dv8tion.jda.core.handle;

File: src/main/java/net/dv8tion/jda/core/handle/GuildEmojisUpdateHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/handle/GuildMemberRemoveHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.handle;
 

File: src/main/java/net/dv8tion/jda/core/handle/GuildMembersChunkHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 
 package net.dv8tion.jda.core.handle;

File: src/main/java/net/dv8tion/jda/core/handle/GuildRoleCreateHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/handle/GuildRoleDeleteHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,8 +24,6 @@
 import net.dv8tion.jda.core.requests.GuildLock;
 import org.json.JSONObject;
 
-import java.util.List;
-
 public class GuildRoleDeleteHandler extends SocketHandler
 {
 

File: src/main/java/net/dv8tion/jda/core/handle/GuildRoleUpdateHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,7 +22,7 @@
 import net.dv8tion.jda.core.requests.GuildLock;
 import org.json.JSONObject;
 
-import java.awt.*;
+import java.awt.Color;
 import java.util.Objects;
 
 public class GuildRoleUpdateHandler extends SocketHandler

File: src/main/java/net/dv8tion/jda/core/handle/GuildSyncHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 
 package net.dv8tion.jda.core.handle;

File: src/main/java/net/dv8tion/jda/core/handle/GuildUpdateHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,7 +23,6 @@
 import net.dv8tion.jda.core.entities.impl.JDAImpl;
 import net.dv8tion.jda.core.events.guild.update.*;
 import net.dv8tion.jda.core.requests.GuildLock;
-import net.dv8tion.jda.core.requests.WebSocketClient;
 import org.json.JSONObject;
 
 import java.util.Objects;

File: src/main/java/net/dv8tion/jda/core/handle/MessageBulkDeleteHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/handle/MessageDeleteHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,7 +22,6 @@
 import net.dv8tion.jda.core.entities.PrivateChannel;
 import net.dv8tion.jda.core.entities.TextChannel;
 import net.dv8tion.jda.core.entities.impl.JDAImpl;
-import net.dv8tion.jda.core.entities.impl.UserImpl;
 import net.dv8tion.jda.core.events.message.MessageDeleteEvent;
 import net.dv8tion.jda.core.events.message.guild.GuildMessageDeleteEvent;
 import net.dv8tion.jda.core.events.message.priv.PrivateMessageDeleteEvent;

File: src/main/java/net/dv8tion/jda/core/handle/MessageReactionBulkRemoveHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/handle/MessageReactionHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/handle/MessageUpdateHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/handle/SocketHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -9,9 +9,9 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
- *  limitations under the License.
+ * limitations under the License.
  */
 package net.dv8tion.jda.core.handle;
 

File: src/main/java/net/dv8tion/jda/core/handle/UserUpdateHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/handle/VoiceServerUpdateHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/handle/VoiceStateUpdateHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *     Copyright 2015-2016 Austin Keener & Michael Ritter
+ *     Copyright 2015-2017 Austin Keener & Michael Ritter
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/net/dv8tion/jda/core/entities/impl/UserImpl.java
Patch:
@@ -67,7 +67,8 @@ public String getAvatarId()
     @Override
     public String getAvatarUrl()
     {
-        return getAvatarId() == null ? null : "https://cdn.discordapp.com/avatars/" + getId() + "/" + getAvatarId() + ".jpg";
+        return getAvatarId() == null ? null : "https://cdn.discordapp.com/avatars/" + getId() + "/" + getAvatarId() 
+                + (getAvatarId().startsWith("a_") ? ".gif" : ".png");
     }
 
     @Override

File: src/main/java/net/dv8tion/jda/core/utils/WidgetUtil.java
Patch:
@@ -474,7 +474,8 @@ public String getAvatarId()
              */
             public String getAvatarUrl()
             {
-                return getAvatarId() == null ? null : "https://cdn.discordapp.com/avatars/" + getId() + "/" + getAvatarId() + ".jpg";
+                return getAvatarId() == null ? null : "https://cdn.discordapp.com/avatars/" + getId() + "/" + getAvatarId() 
+                        + (getAvatarId().startsWith("a_") ? ".gif" : ".png");
             }
 
             /**

File: src/main/java/net/dv8tion/jda/core/requests/RestAction.java
Patch:
@@ -63,8 +63,8 @@ public abstract class RestAction<T>
 {
     public static final SimpleLog LOG = SimpleLog.getLog("RestAction");
 
-    public static final Consumer DEFAULT_SUCCESS = o -> {};
-    public static final Consumer<Throwable> DEFAULT_FAILURE = t ->
+    public static Consumer DEFAULT_SUCCESS = o -> {};
+    public static Consumer<Throwable> DEFAULT_FAILURE = t ->
     {
         if (LOG.getEffectiveLevel().getPriority() <= SimpleLog.Level.DEBUG.getPriority())
         {

File: src/main/java/net/dv8tion/jda/core/requests/RestAction.java
Patch:
@@ -63,8 +63,8 @@ public abstract class RestAction<T>
 {
     public static final SimpleLog LOG = SimpleLog.getLog("RestAction");
 
-    public static final Consumer DEFAULT_SUCCESS = o -> {};
-    public static final Consumer<Throwable> DEFAULT_FAILURE = t ->
+    public static Consumer DEFAULT_SUCCESS = o -> {};
+    public static Consumer<Throwable> DEFAULT_FAILURE = t ->
     {
         if (LOG.getEffectiveLevel().getPriority() <= SimpleLog.Level.DEBUG.getPriority())
         {

File: src/main/java/net/dv8tion/jda/core/managers/ChannelManagerUpdatable.java
Patch:
@@ -200,8 +200,8 @@ public void checkValue(String value)
                 public void checkValue(Integer value)
                 {
                     checkNull(value, "user limit");
-                    if (value < 1 || value > 99)
-                        throw new IllegalArgumentException("Provided user limit must be 1 to 99.");
+                    if (value < 0 || value > 99)
+                        throw new IllegalArgumentException("Provided user limit must be 0 to 99.");
                 }
             };
 
@@ -211,7 +211,7 @@ public void checkValue(Integer value)
                 public void checkValue(Integer value)
                 {
                     checkNull(value, "bitrate");
-                    if (value < 8000 || value > 96000)
+                    if (value < 8000 || value > 96000) // TODO: vip servers can go up to 128000
                         throw new IllegalArgumentException("Provided bitrate must be 8000 to 96000");
                 }
             };

File: src/main/java/net/dv8tion/jda/core/audio/AudioWebSocket.java
Patch:
@@ -317,6 +317,9 @@ public void close(ConnectionStatus closeStatus)
             keepAlivePool.remove(keepAliveRunnable);
             keepAliveRunnable = null;
         }
+
+        if (audioConnection != null)
+            audioConnection.shutdown();
         if (udpSocket != null)
             udpSocket.close();
         if (socket != null && socket.isOpen())

File: src/main/java/net/dv8tion/jda/core/handle/GuildMemberRemoveHandler.java
Patch:
@@ -63,7 +63,7 @@ protected String handleInternally(JSONObject content)
             GuildVoiceStateImpl vState = (GuildVoiceStateImpl) member.getVoiceState();
             VoiceChannel channel = vState.getChannel();
             vState.setConnectedChannel(null);
-            ((VoiceChannelImpl) channel).getConnectedMembersMap().remove(member);
+            ((VoiceChannelImpl) channel).getConnectedMembersMap().remove(member.getUser().getId());
             api.getEventManager().handle(
                     new GuildVoiceLeaveEvent(
                             api, responseNumber,

File: src/main/java/net/dv8tion/jda/core/entities/MessageChannel.java
Patch:
@@ -25,7 +25,6 @@
 import net.dv8tion.jda.core.requests.Route;
 import org.apache.http.util.Args;
 import org.json.JSONObject;
-//import net.dv8tion.jda.core.exceptions.VerificationLevelException;
 
 import java.io.File;
 import java.io.IOException;

File: src/main/java/net/dv8tion/jda/core/entities/PermissionOverride.java
Patch:
@@ -20,7 +20,6 @@
 import net.dv8tion.jda.core.managers.PermOverrideManager;
 import net.dv8tion.jda.core.managers.PermOverrideManagerUpdatable;
 import net.dv8tion.jda.core.requests.RestAction;
-//import net.dv8tion.jda.core.managers.PermissionOverrideManager;
 
 import java.util.List;
 

File: src/main/java/net/dv8tion/jda/core/handle/GuildMemberRemoveHandler.java
Patch:
@@ -25,8 +25,6 @@
 import net.dv8tion.jda.core.requests.WebSocketClient;
 import org.json.JSONObject;
 
-//import net.dv8tion.jda.core.events.voice.VoiceLeaveEvent;
-
 public class GuildMemberRemoveHandler extends SocketHandler
 {
 

File: src/main/java/net/dv8tion/jda/core/requests/RestAction.java
Patch:
@@ -295,6 +295,4 @@ public T complete(boolean shouldQueue)
         @Override
         protected void handleResponse(Response response, Request request) { }
     }
-
-
 }

File: src/main/java/net/dv8tion/jda/client/entities/impl/GroupImpl.java
Patch:
@@ -157,7 +157,7 @@ public JDA getJDA()
     @Override
     public RestAction<Message> sendMessage(String text)
     {
-        return sendMessage(new MessageBuilder().appendString(text).build());
+        return sendMessage(new MessageBuilder().append(text).build());
     }
     
     @Override
@@ -179,7 +179,7 @@ protected void handleResponse(Response response, Request request)
             {
                 if (response.isOk())
                 {
-                    Message m = EntityBuilder.get(getJDA()).createMessage(response.getObject());
+                    Message m = EntityBuilder.get(getJDA()).createMessage(response.getObject(), GroupImpl.this, false);
                     request.onSuccess(m);
                 }
                 else

File: src/main/java/net/dv8tion/jda/core/entities/impl/PrivateChannelImpl.java
Patch:
@@ -77,7 +77,7 @@ public JDA getJDA()
     @Override
     public RestAction<Message> sendMessage(String text)
     {
-        return sendMessage(new MessageBuilder().appendString(text).build());
+        return sendMessage(new MessageBuilder().append(text).build());
     }
     
     @Override
@@ -99,7 +99,7 @@ protected void handleResponse(Response response, Request request)
             {
                 if (response.isOk())
                 {
-                    Message m = EntityBuilder.get(getJDA()).createMessage(response.getObject());
+                    Message m = EntityBuilder.get(getJDA()).createMessage(response.getObject(), PrivateChannelImpl.this, false);
                     request.onSuccess(m);
                 }
                 else

File: src/main/java/net/dv8tion/jda/core/entities/impl/TextChannelImpl.java
Patch:
@@ -265,7 +265,7 @@ protected void handleResponse(Response response, Request request)
             {
                 if (response.isOk())
                 {
-                    Message m = EntityBuilder.get(getJDA()).createMessage(response.getObject());
+                    Message m = EntityBuilder.get(getJDA()).createMessage(response.getObject(), TextChannelImpl.this, false);
                     request.onSuccess(m);
                 }
                 else

File: src/main/java/net/dv8tion/jda/core/entities/Member.java
Patch:
@@ -138,6 +138,8 @@ public interface Member extends IMentionable
      * The Permissions this Member holds in the specified {@link net.dv8tion.jda.core.entities.Channel Channel}.<br>
      * Permissions returned by this may be different from {@link #getPermissions()} due to the Channel's {@link net.dv8tion.jda.core.entities.PermissionOverride PermissionOverrides }.
      *
+     * @param channel
+     *      The {@link net.dv8tion.jda.core.entities.Channel Channel} of which to get Permissions for
      * @return
      *      An immutable List of Permissions granted to this Member.
      */

File: src/main/java/net/dv8tion/jda/core/events/channel/priv/PrivateChannelCreateEvent.java
Patch:
@@ -21,9 +21,9 @@
 import net.dv8tion.jda.core.events.Event;
 
 /**
- * <b><u>PrivateChannelCreateEvent</u></b><br/>
- * Fired if a {@link net.dv8tion.jda.core.entities.PrivateChannel Private Channel} was created.<br/>
- * <br/>
+ * <b><u>PrivateChannelCreateEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.core.entities.PrivateChannel Private Channel} was created.<br>
+ * <br>
  * Use: Retrieve the freshly created private channel and it's {@link net.dv8tion.jda.core.entities.User User}.
  */
 public class PrivateChannelCreateEvent extends Event

File: src/main/java/net/dv8tion/jda/core/events/channel/priv/PrivateChannelDeleteEvent.java
Patch:
@@ -21,9 +21,9 @@
 import net.dv8tion.jda.core.events.Event;
 
 /**
- * <b><u>PrivateChannelDeleteEvent</u></b><br/>
- * Fired if a {@link net.dv8tion.jda.core.entities.PrivateChannel Private Channel} was deleted.<br/>
- * <br/>
+ * <b><u>PrivateChannelDeleteEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.core.entities.PrivateChannel Private Channel} was deleted.<br>
+ * <br>
  * Use: Retrieve the issuing {@link net.dv8tion.jda.core.entities.User User}.
  */
 public class PrivateChannelDeleteEvent extends Event

File: src/main/java/net/dv8tion/jda/core/events/channel/voice/VoiceChannelCreateEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.core.entities.VoiceChannel;
 
 /**
- * <b><u>VoiceChannelCreateEvent</u></b><br/>
- * Fired if a {@link VoiceChannel VoiceChannel} is created.<br/>
- * <br/>
+ * <b><u>VoiceChannelCreateEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.core.entities.VoiceChannel VoiceChannel} is created.<br>
+ * <br>
  * Use: Get affected VoiceChannel.
  */
 public class VoiceChannelCreateEvent extends GenericVoiceChannelEvent

File: src/main/java/net/dv8tion/jda/core/events/channel/voice/VoiceChannelDeleteEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.core.entities.VoiceChannel;
 
 /**
- * <b><u>VoiceChannelDeleteEvent</u></b><br/>
- * Fired if a {@link VoiceChannel VoiceChannel} is deleted.<br/>
- * <br/>
+ * <b><u>VoiceChannelDeleteEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.core.entities.VoiceChannel VoiceChannel} is deleted.<br>
+ * <br>
  * Use: Get affected VoiceChannel(likely to be null) or affected Guild.
  */
 public class VoiceChannelDeleteEvent extends GenericVoiceChannelEvent

File: src/main/java/net/dv8tion/jda/core/events/channel/voice/update/VoiceChannelUpdateBitrateEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.core.entities.VoiceChannel;
 
 /**
- * <b><u>VoiceChannelUpdateBitrateEvent</u></b><br/>
- * Fired if a {@link VoiceChannel VoiceChannel}'s bitrate changes.<br/>
- * <br/>
+ * <b><u>VoiceChannelUpdateBitrateEvent</u></b><br>
+ * Fired if a {@link VoiceChannel VoiceChannel}'s bitrate changes.<br>
+ * <br>
  * Use: Get affected VoiceChannel, affected Guild and previous bitrate.
  */
 public class VoiceChannelUpdateBitrateEvent extends GenericVoiceChannelUpdateEvent

File: src/main/java/net/dv8tion/jda/core/events/channel/voice/update/VoiceChannelUpdateNameEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.core.entities.VoiceChannel;
 
 /**
- * <b><u>VoiceChannelUpdateNameEvent</u></b><br/>
- * Fired if a {@link VoiceChannel VoiceChannel}'s name changes.<br/>
- * <br/>
+ * <b><u>VoiceChannelUpdateNameEvent</u></b><br>
+ * Fired if a {@link VoiceChannel VoiceChannel}'s name changes.<br>
+ * <br>
  * Use: Get affected VoiceChannel, affected Guild and previous name.
  */
 public class VoiceChannelUpdateNameEvent extends GenericVoiceChannelUpdateEvent

File: src/main/java/net/dv8tion/jda/core/events/channel/voice/update/VoiceChannelUpdatePermissionsEvent.java
Patch:
@@ -23,9 +23,9 @@
 import java.util.List;
 
 /**
- * <b><u>VoiceChannelUpdatePermissionsEvent</u></b><br/>
- * Fired if a {@link VoiceChannel VoiceChannel}'s permission overrides change.<br/>
- * <br/>
+ * <b><u>VoiceChannelUpdatePermissionsEvent</u></b><br>
+ * Fired if a {@link VoiceChannel VoiceChannel}'s permission overrides change.<br>
+ * <br>
  * Use: Get affected VoiceChannel, affected Guild and affected {@link net.dv8tion.jda.core.entities.Role Roles}/{@link net.dv8tion.jda.core.entities.User Users}.
  */
 public class VoiceChannelUpdatePermissionsEvent extends GenericVoiceChannelUpdateEvent

File: src/main/java/net/dv8tion/jda/core/events/channel/voice/update/VoiceChannelUpdatePositionEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.core.entities.VoiceChannel;
 
 /**
- * <b><u>VoiceChannelUpdatePositionEvent</u></b><br/>
- * Fired if a {@link VoiceChannel VoiceChannel}'s position changes.<br/>
- * <br/>
+ * <b><u>VoiceChannelUpdatePositionEvent</u></b><br>
+ * Fired if a {@link VoiceChannel VoiceChannel}'s position changes.<br>
+ * <br>
  * Use: Get affected VoiceChannel, affected Guild and previous position.
  */
 public class VoiceChannelUpdatePositionEvent extends GenericVoiceChannelUpdateEvent

File: src/main/java/net/dv8tion/jda/core/events/channel/voice/update/VoiceChannelUpdateUserLimitEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.core.entities.VoiceChannel;
 
 /**
- * <b><u>VoiceChannelUpdateUserLimitEvent</u></b><br/>
- * Fired if a {@link VoiceChannel VoiceChannel}'s user limit changes.<br/>
- * <br/>
+ * <b><u>VoiceChannelUpdateUserLimitEvent</u></b><br>
+ * Fired if a {@link VoiceChannel VoiceChannel}'s user limit changes.<br>
+ * <br>
  * Use: Get affected VoiceChannel, affected Guild and previous user limit.
  */
 public class VoiceChannelUpdateUserLimitEvent extends GenericVoiceChannelUpdateEvent

File: src/main/java/net/dv8tion/jda/core/events/guild/GuildAvailableEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.core.entities.Guild;
 
 /**
- * <b><u>GuildAvailableEvent</u></b><br/>
- * Fired if a {@link net.dv8tion.jda.core.entities.Guild Guild} becomes available.<br/>
- * <br/>
+ * <b><u>GuildAvailableEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.core.entities.Guild Guild} becomes available.<br>
+ * <br>
  * Use: This indicates that a Guild will now start sending events and can be interacted with.
  */
 public class GuildAvailableEvent extends GenericGuildEvent

File: src/main/java/net/dv8tion/jda/core/events/guild/GuildLeaveEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.core.entities.Guild;
 
 /**
- * <b><u>GuildLeaveEvent</u></b><br/>
- * Fired if a you leave a {@link net.dv8tion.jda.core.entities.Guild Guild}.<br/>
- * <br/>
+ * <b><u>GuildLeaveEvent</u></b><br>
+ * Fired if a you leave a {@link net.dv8tion.jda.core.entities.Guild Guild}.<br>
+ * <br>
  * Use: Detect when you leave a Guild.
  */
 public class GuildLeaveEvent extends GenericGuildEvent

File: src/main/java/net/dv8tion/jda/core/events/guild/UnavailableGuildJoinedEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.core.events.Event;
 
 /**
- * <b><u>UnavailableGuildJoinedEvent</u></b><br/>
- * Fired if you joined a {@link net.dv8tion.jda.core.entities.Guild Guild} that is not yet available.<br/>
- * <br/>
+ * <b><u>UnavailableGuildJoinedEvent</u></b><br>
+ * Fired if you joined a {@link net.dv8tion.jda.core.entities.Guild Guild} that is not yet available.<br>
+ * <br>
  * Use: Retrieve id of unavailable Guild.
  */
 public class UnavailableGuildJoinedEvent extends Event

File: src/main/java/net/dv8tion/jda/core/events/guild/member/GuildMemberJoinEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.core.entities.Member;
 
 /**
- * <b><u>GuildMemberJoinEvent</u></b><br/>
- * Fired if a {@link net.dv8tion.jda.core.entities.Member Member} joins a {@link net.dv8tion.jda.core.entities.Guild Guild}.<br/>
- * <br/>
+ * <b><u>GuildMemberJoinEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.core.entities.Member Member} joins a {@link net.dv8tion.jda.core.entities.Guild Guild}.<br>
+ * <br>
  * Use: Retrieve member who joined (if available) and affected guild.
  */
 public class GuildMemberJoinEvent extends GenericGuildMemberEvent

File: src/main/java/net/dv8tion/jda/core/events/guild/member/GuildMemberLeaveEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.core.entities.Member;
 
 /**
- * <b><u>GuildMemberLeaveEvent</u></b><br/>
- * Fired if a {@link net.dv8tion.jda.core.entities.Member Member} leaves a {@link net.dv8tion.jda.core.entities.Guild Guild}.<br/>
- * <br/>
+ * <b><u>GuildMemberLeaveEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.core.entities.Member Member} leaves a {@link net.dv8tion.jda.core.entities.Guild Guild}.<br>
+ * <br>
  * Use: Retrieve member who left (if available) and triggering guild.
  */
 public class GuildMemberLeaveEvent extends GenericGuildMemberEvent

File: src/main/java/net/dv8tion/jda/core/events/guild/member/GuildMemberNickChangeEvent.java
Patch:
@@ -21,9 +21,9 @@
 import net.dv8tion.jda.core.entities.Member;
 
 /**
- * <b><u>GuildMemberNickChangeEvent</u></b><br/>
- * Fired if a {@link net.dv8tion.jda.core.entities.Member Member} updates their {@link net.dv8tion.jda.core.entities.Guild Guild} nickname.<br/>
- * <br/>
+ * <b><u>GuildMemberNickChangeEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.core.entities.Member Member} updates their {@link net.dv8tion.jda.core.entities.Guild Guild} nickname.<br>
+ * <br>
  * Use: Retrieve member who changed their nickname, triggering guild, the old nick and the new nick.
  */
 public class GuildMemberNickChangeEvent extends GenericGuildMemberEvent

File: src/main/java/net/dv8tion/jda/core/events/guild/member/GuildMemberRoleAddEvent.java
Patch:
@@ -25,9 +25,9 @@
 import java.util.List;
 
 /**
- * <b><u>GuildMemberRoleAddEvent</u></b><br/>
- * Fired if one or more {@link net.dv8tion.jda.core.entities.Role Roles} are assigned to a {@link net.dv8tion.jda.core.entities.Member Member}.<br/>
- * <br/>
+ * <b><u>GuildMemberRoleAddEvent</u></b><br>
+ * Fired if one or more {@link net.dv8tion.jda.core.entities.Role Roles} are assigned to a {@link net.dv8tion.jda.core.entities.Member Member}.<br>
+ * <br>
  * Use: Retrieve affected member and guild. Provides a list of added roles.
  */
 public class GuildMemberRoleAddEvent extends GenericGuildMemberEvent

File: src/main/java/net/dv8tion/jda/core/events/guild/member/GuildMemberRoleRemoveEvent.java
Patch:
@@ -25,9 +25,9 @@
 import java.util.List;
 
 /**
- * <b><u>GuildMemberRoleRemoveEvent</u></b><br/>
- * Fired if one or more {@link net.dv8tion.jda.core.entities.Role Roles} are removed from a {@link net.dv8tion.jda.core.entities.Member Member}.<br/>
- * <br/>
+ * <b><u>GuildMemberRoleRemoveEvent</u></b><br>
+ * Fired if one or more {@link net.dv8tion.jda.core.entities.Role Roles} are removed from a {@link net.dv8tion.jda.core.entities.Member Member}.<br>
+ * <br>
  * Use: Retrieve affected member and guild. Provides a list of removed roles.
  */
 public class GuildMemberRoleRemoveEvent extends GenericGuildMemberEvent

File: src/main/java/net/dv8tion/jda/core/events/guild/update/GenericGuildUpdateEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.core.events.guild.GenericGuildEvent;
 
 /**
- * <b><u>GuildUpdateEvent</u></b><br/>
- * Fired whenever a {@link net.dv8tion.jda.core.entities.Guild Guild} updates.<br/>
- * <br/>
+ * <b><u>GuildUpdateEvent</u></b><br>
+ * Fired whenever a {@link net.dv8tion.jda.core.entities.Guild Guild} updates.<br>
+ * <br>
  * Use: Detect what Guild updated.
  */
 public abstract class GenericGuildUpdateEvent extends GenericGuildEvent

File: src/main/java/net/dv8tion/jda/core/events/message/MessageBulkDeleteEvent.java
Patch:
@@ -24,9 +24,9 @@
 import java.util.List;
 
 /**
- * <b><u>MessageBulkDeleteEvent</u></b><br/>
- * Fired if a bulk deletion is executed in a {@link net.dv8tion.jda.core.entities.TextChannel TextChannel}.<br/>
- * <br/>
+ * <b><u>MessageBulkDeleteEvent</u></b><br>
+ * Fired if a bulk deletion is executed in a {@link net.dv8tion.jda.core.entities.TextChannel TextChannel}.<br>
+ * <br>
  * Use: This event indicates that a large chunk of Messages is deleted in a TextChannel. Providing a list of Message IDs and the specific TextChannel.
  */
 public class MessageBulkDeleteEvent extends Event

File: src/main/java/net/dv8tion/jda/core/events/message/MessageDeleteEvent.java
Patch:
@@ -21,9 +21,9 @@
 import net.dv8tion.jda.core.events.Event;
 
 /**
- * <b><u>MessageDeleteEvent</u></b><br/>
- * Fired if a Message was deleted in a {@link net.dv8tion.jda.core.entities.MessageChannel MessageChannel}.<br/>
- * <br/>
+ * <b><u>MessageDeleteEvent</u></b><br>
+ * Fired if a Message was deleted in a {@link net.dv8tion.jda.core.entities.MessageChannel MessageChannel}.<br>
+ * <br>
  * Use: Detect when a Message is deleted. No matter if private or guild.
  */
 public class MessageDeleteEvent extends Event

File: src/main/java/net/dv8tion/jda/core/events/message/MessageEmbedEvent.java
Patch:
@@ -24,9 +24,9 @@
 import java.util.List;
 
 /**
- * <b><u>MessageEmbedEvent</u></b><br/>
- * Fired if a Message contains an {@link net.dv8tion.jda.core.entities.MessageEmbed Embed} in a {@link net.dv8tion.jda.core.entities.MessageChannel MessageChannel}.<br/>
- * <br/>
+ * <b><u>MessageEmbedEvent</u></b><br>
+ * Fired if a Message contains an {@link net.dv8tion.jda.core.entities.MessageEmbed Embed} in a {@link net.dv8tion.jda.core.entities.MessageChannel MessageChannel}.<br>
+ * <br>
  * Use: Grab MessageEmbeds from any message. No matter if private or guild.
  */
 public class MessageEmbedEvent extends Event

File: src/main/java/net/dv8tion/jda/core/events/message/MessageUpdateEvent.java
Patch:
@@ -21,9 +21,9 @@
 import net.dv8tion.jda.core.events.Event;
 
 /**
- * <b><u>MessageUpdateEvent</u></b><br/>
- * Fired if a Message is edited in a {@link net.dv8tion.jda.core.entities.MessageChannel MessageChannel}.<br/>
- * <br/>
+ * <b><u>MessageUpdateEvent</u></b><br>
+ * Fired if a Message is edited in a {@link net.dv8tion.jda.core.entities.MessageChannel MessageChannel}.<br>
+ * <br>
  * Use: This event indicates that a Message is edited in either a private or guild channel. Providing a MessageChannel and Message.
  */
 public class MessageUpdateEvent extends Event

File: src/main/java/net/dv8tion/jda/core/events/role/RoleCreateEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.core.entities.Role;
 
 /**
- * <b><u>RoleCreateEvent</u></b><br/>
- * Fired if a {@link net.dv8tion.jda.core.entities.Role Role} is created.<br/>
- * <br/>
+ * <b><u>RoleCreateEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.core.entities.Role Role} is created.<br>
+ * <br>
  * Use: Retrieve created Role and it's Guild.
  */
 public class RoleCreateEvent extends GenericRoleEvent

File: src/main/java/net/dv8tion/jda/core/events/role/RoleDeleteEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.core.entities.Role;
 
 /**
- * <b><u>RoleDeleteEvent</u></b><br/>
- * Fired if a {@link net.dv8tion.jda.core.entities.Role Role} is deleted.<br/>
- * <br/>
+ * <b><u>RoleDeleteEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.core.entities.Role Role} is deleted.<br>
+ * <br>
  * Use: Retrieve deleted Role and it's Guild.
  */
 public class RoleDeleteEvent extends GenericRoleEvent

File: src/main/java/net/dv8tion/jda/core/hooks/EventListener.java
Patch:
@@ -34,7 +34,7 @@ public interface EventListener
 
     /**
      * Handles any {@link net.dv8tion.jda.core.events.Event Event}.<p>
-     * To get specific events with Methods like <code>onMessageReceived(MessageReceivedEvent event)</code> take a look at: {@link net.dv8tion.jda.core.hooks.ListenerAdapter}
+     * To get specific events with Methods like {@code onMessageReceived(MessageReceivedEvent event)} take a look at: {@link net.dv8tion.jda.core.hooks.ListenerAdapter}
      * @param event
      *          The Event to handle.
      */

File: src/main/java/net/dv8tion/jda/core/managers/ChannelManagerUpdatable.java
Patch:
@@ -116,7 +116,7 @@ public void reset()
         }
     }
 
-    /**
+    /*
      * This method will apply all accumulated changes received by setters
      */
     public RestAction<Void> update()

File: src/main/java/net/dv8tion/jda/core/managers/GuildManagerUpdatable.java
Patch:
@@ -102,7 +102,7 @@ public GuildField<VoiceChannel> getAfkChannelField()
         return afkChannel;
     }
 
-    /**
+    /*
      * Valid timeouts are: 60, 300, 900, 1800, 3600.
      */
     public GuildField<Guild.Timeout> getAfkTimeoutField()
@@ -153,7 +153,7 @@ public void reset()
         this.mfaLevel.reset();
     }
 
-    /**
+    /*
      * This method will apply all accumulated changes received by setters
      *
      * @throws net.dv8tion.jda.core.exceptions.GuildUnavailableException

File: src/main/java/net/dv8tion/jda/core/managers/Presence.java
Patch:
@@ -64,7 +64,7 @@ public interface Presence
      * Sets the {@link net.dv8tion.jda.core.OnlineStatus OnlineStatus} for this session
      *
      * @param status
-     *      the {@link net.dv8tion.jda.core.OnlineStatus OnlineStatus} to be used (OFFLINE/null -> INVISIBLE)
+     *      the {@link net.dv8tion.jda.core.OnlineStatus OnlineStatus} to be used (OFFLINE/null {@literal ->} INVISIBLE)
      * @throws IllegalArgumentException
      *      if the provided OnlineStatus is {@link net.dv8tion.jda.core.OnlineStatus#UNKNOWN UNKNOWN}
      */

File: src/main/java/net/dv8tion/jda/core/managers/RoleManagerUpdatable.java
Patch:
@@ -117,7 +117,7 @@ public void reset() {
         permissions.reset();
     }
 
-    /**
+    /*
      * This method will apply all accumulated changes received by setters
      */
     public RestAction<Void> update()

File: src/main/java/net/dv8tion/jda/core/MessageHistory.java
Patch:
@@ -90,9 +90,6 @@ protected void handleResponse(Response response, Request request)
                 for (int i = 0; i < historyJson.length(); i++)
                     msgs.add(builder.createMessage(historyJson.getJSONObject(i)));
 
-                if (history.isEmpty())
-
-
                 msgs.forEach(msg -> history.put(msg.getId(), msg));
                 request.onSuccess(msgs);
             }

File: src/main/java/net/dv8tion/jda/core/entities/Member.java
Patch:
@@ -138,6 +138,8 @@ public interface Member extends IMentionable
      * The Permissions this Member holds in the specified {@link net.dv8tion.jda.core.entities.Channel Channel}.<br>
      * Permissions returned by this may be different from {@link #getPermissions()} due to the Channel's {@link net.dv8tion.jda.core.entities.PermissionOverride PermissionOverrides }.
      *
+     * @param channel
+     *      The {@link net.dv8tion.jda.core.entities.Channel Channel} of which to get Permissions for
      * @return
      *      An immutable List of Permissions granted to this Member.
      */

File: src/main/java/net/dv8tion/jda/core/events/channel/priv/PrivateChannelCreateEvent.java
Patch:
@@ -21,9 +21,9 @@
 import net.dv8tion.jda.core.events.Event;
 
 /**
- * <b><u>PrivateChannelCreateEvent</u></b><br/>
- * Fired if a {@link net.dv8tion.jda.core.entities.PrivateChannel Private Channel} was created.<br/>
- * <br/>
+ * <b><u>PrivateChannelCreateEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.core.entities.PrivateChannel Private Channel} was created.<br>
+ * <br>
  * Use: Retrieve the freshly created private channel and it's {@link net.dv8tion.jda.core.entities.User User}.
  */
 public class PrivateChannelCreateEvent extends Event

File: src/main/java/net/dv8tion/jda/core/events/channel/priv/PrivateChannelDeleteEvent.java
Patch:
@@ -21,9 +21,9 @@
 import net.dv8tion.jda.core.events.Event;
 
 /**
- * <b><u>PrivateChannelDeleteEvent</u></b><br/>
- * Fired if a {@link net.dv8tion.jda.core.entities.PrivateChannel Private Channel} was deleted.<br/>
- * <br/>
+ * <b><u>PrivateChannelDeleteEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.core.entities.PrivateChannel Private Channel} was deleted.<br>
+ * <br>
  * Use: Retrieve the issuing {@link net.dv8tion.jda.core.entities.User User}.
  */
 public class PrivateChannelDeleteEvent extends Event

File: src/main/java/net/dv8tion/jda/core/events/channel/voice/VoiceChannelCreateEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.core.entities.VoiceChannel;
 
 /**
- * <b><u>VoiceChannelCreateEvent</u></b><br/>
- * Fired if a {@link VoiceChannel VoiceChannel} is created.<br/>
- * <br/>
+ * <b><u>VoiceChannelCreateEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.core.entities.VoiceChannel VoiceChannel} is created.<br>
+ * <br>
  * Use: Get affected VoiceChannel.
  */
 public class VoiceChannelCreateEvent extends GenericVoiceChannelEvent

File: src/main/java/net/dv8tion/jda/core/events/channel/voice/VoiceChannelDeleteEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.core.entities.VoiceChannel;
 
 /**
- * <b><u>VoiceChannelDeleteEvent</u></b><br/>
- * Fired if a {@link VoiceChannel VoiceChannel} is deleted.<br/>
- * <br/>
+ * <b><u>VoiceChannelDeleteEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.core.entities.VoiceChannel VoiceChannel} is deleted.<br>
+ * <br>
  * Use: Get affected VoiceChannel(likely to be null) or affected Guild.
  */
 public class VoiceChannelDeleteEvent extends GenericVoiceChannelEvent

File: src/main/java/net/dv8tion/jda/core/events/channel/voice/update/VoiceChannelUpdateBitrateEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.core.entities.VoiceChannel;
 
 /**
- * <b><u>VoiceChannelUpdateBitrateEvent</u></b><br/>
- * Fired if a {@link VoiceChannel VoiceChannel}'s bitrate changes.<br/>
- * <br/>
+ * <b><u>VoiceChannelUpdateBitrateEvent</u></b><br>
+ * Fired if a {@link VoiceChannel VoiceChannel}'s bitrate changes.<br>
+ * <br>
  * Use: Get affected VoiceChannel, affected Guild and previous bitrate.
  */
 public class VoiceChannelUpdateBitrateEvent extends GenericVoiceChannelUpdateEvent

File: src/main/java/net/dv8tion/jda/core/events/channel/voice/update/VoiceChannelUpdateNameEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.core.entities.VoiceChannel;
 
 /**
- * <b><u>VoiceChannelUpdateNameEvent</u></b><br/>
- * Fired if a {@link VoiceChannel VoiceChannel}'s name changes.<br/>
- * <br/>
+ * <b><u>VoiceChannelUpdateNameEvent</u></b><br>
+ * Fired if a {@link VoiceChannel VoiceChannel}'s name changes.<br>
+ * <br>
  * Use: Get affected VoiceChannel, affected Guild and previous name.
  */
 public class VoiceChannelUpdateNameEvent extends GenericVoiceChannelUpdateEvent

File: src/main/java/net/dv8tion/jda/core/events/channel/voice/update/VoiceChannelUpdatePermissionsEvent.java
Patch:
@@ -23,9 +23,9 @@
 import java.util.List;
 
 /**
- * <b><u>VoiceChannelUpdatePermissionsEvent</u></b><br/>
- * Fired if a {@link VoiceChannel VoiceChannel}'s permission overrides change.<br/>
- * <br/>
+ * <b><u>VoiceChannelUpdatePermissionsEvent</u></b><br>
+ * Fired if a {@link VoiceChannel VoiceChannel}'s permission overrides change.<br>
+ * <br>
  * Use: Get affected VoiceChannel, affected Guild and affected {@link net.dv8tion.jda.core.entities.Role Roles}/{@link net.dv8tion.jda.core.entities.User Users}.
  */
 public class VoiceChannelUpdatePermissionsEvent extends GenericVoiceChannelUpdateEvent

File: src/main/java/net/dv8tion/jda/core/events/channel/voice/update/VoiceChannelUpdatePositionEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.core.entities.VoiceChannel;
 
 /**
- * <b><u>VoiceChannelUpdatePositionEvent</u></b><br/>
- * Fired if a {@link VoiceChannel VoiceChannel}'s position changes.<br/>
- * <br/>
+ * <b><u>VoiceChannelUpdatePositionEvent</u></b><br>
+ * Fired if a {@link VoiceChannel VoiceChannel}'s position changes.<br>
+ * <br>
  * Use: Get affected VoiceChannel, affected Guild and previous position.
  */
 public class VoiceChannelUpdatePositionEvent extends GenericVoiceChannelUpdateEvent

File: src/main/java/net/dv8tion/jda/core/events/channel/voice/update/VoiceChannelUpdateUserLimitEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.core.entities.VoiceChannel;
 
 /**
- * <b><u>VoiceChannelUpdateUserLimitEvent</u></b><br/>
- * Fired if a {@link VoiceChannel VoiceChannel}'s user limit changes.<br/>
- * <br/>
+ * <b><u>VoiceChannelUpdateUserLimitEvent</u></b><br>
+ * Fired if a {@link VoiceChannel VoiceChannel}'s user limit changes.<br>
+ * <br>
  * Use: Get affected VoiceChannel, affected Guild and previous user limit.
  */
 public class VoiceChannelUpdateUserLimitEvent extends GenericVoiceChannelUpdateEvent

File: src/main/java/net/dv8tion/jda/core/events/guild/GuildAvailableEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.core.entities.Guild;
 
 /**
- * <b><u>GuildAvailableEvent</u></b><br/>
- * Fired if a {@link net.dv8tion.jda.core.entities.Guild Guild} becomes available.<br/>
- * <br/>
+ * <b><u>GuildAvailableEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.core.entities.Guild Guild} becomes available.<br>
+ * <br>
  * Use: This indicates that a Guild will now start sending events and can be interacted with.
  */
 public class GuildAvailableEvent extends GenericGuildEvent

File: src/main/java/net/dv8tion/jda/core/events/guild/GuildLeaveEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.core.entities.Guild;
 
 /**
- * <b><u>GuildLeaveEvent</u></b><br/>
- * Fired if a you leave a {@link net.dv8tion.jda.core.entities.Guild Guild}.<br/>
- * <br/>
+ * <b><u>GuildLeaveEvent</u></b><br>
+ * Fired if a you leave a {@link net.dv8tion.jda.core.entities.Guild Guild}.<br>
+ * <br>
  * Use: Detect when you leave a Guild.
  */
 public class GuildLeaveEvent extends GenericGuildEvent

File: src/main/java/net/dv8tion/jda/core/events/guild/UnavailableGuildJoinedEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.core.events.Event;
 
 /**
- * <b><u>UnavailableGuildJoinedEvent</u></b><br/>
- * Fired if you joined a {@link net.dv8tion.jda.core.entities.Guild Guild} that is not yet available.<br/>
- * <br/>
+ * <b><u>UnavailableGuildJoinedEvent</u></b><br>
+ * Fired if you joined a {@link net.dv8tion.jda.core.entities.Guild Guild} that is not yet available.<br>
+ * <br>
  * Use: Retrieve id of unavailable Guild.
  */
 public class UnavailableGuildJoinedEvent extends Event

File: src/main/java/net/dv8tion/jda/core/events/guild/member/GuildMemberJoinEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.core.entities.Member;
 
 /**
- * <b><u>GuildMemberJoinEvent</u></b><br/>
- * Fired if a {@link net.dv8tion.jda.core.entities.Member Member} joins a {@link net.dv8tion.jda.core.entities.Guild Guild}.<br/>
- * <br/>
+ * <b><u>GuildMemberJoinEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.core.entities.Member Member} joins a {@link net.dv8tion.jda.core.entities.Guild Guild}.<br>
+ * <br>
  * Use: Retrieve member who joined (if available) and affected guild.
  */
 public class GuildMemberJoinEvent extends GenericGuildMemberEvent

File: src/main/java/net/dv8tion/jda/core/events/guild/member/GuildMemberLeaveEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.core.entities.Member;
 
 /**
- * <b><u>GuildMemberLeaveEvent</u></b><br/>
- * Fired if a {@link net.dv8tion.jda.core.entities.Member Member} leaves a {@link net.dv8tion.jda.core.entities.Guild Guild}.<br/>
- * <br/>
+ * <b><u>GuildMemberLeaveEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.core.entities.Member Member} leaves a {@link net.dv8tion.jda.core.entities.Guild Guild}.<br>
+ * <br>
  * Use: Retrieve member who left (if available) and triggering guild.
  */
 public class GuildMemberLeaveEvent extends GenericGuildMemberEvent

File: src/main/java/net/dv8tion/jda/core/events/guild/member/GuildMemberNickChangeEvent.java
Patch:
@@ -21,9 +21,9 @@
 import net.dv8tion.jda.core.entities.Member;
 
 /**
- * <b><u>GuildMemberNickChangeEvent</u></b><br/>
- * Fired if a {@link net.dv8tion.jda.core.entities.Member Member} updates their {@link net.dv8tion.jda.core.entities.Guild Guild} nickname.<br/>
- * <br/>
+ * <b><u>GuildMemberNickChangeEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.core.entities.Member Member} updates their {@link net.dv8tion.jda.core.entities.Guild Guild} nickname.<br>
+ * <br>
  * Use: Retrieve member who changed their nickname, triggering guild, the old nick and the new nick.
  */
 public class GuildMemberNickChangeEvent extends GenericGuildMemberEvent

File: src/main/java/net/dv8tion/jda/core/events/guild/member/GuildMemberRoleAddEvent.java
Patch:
@@ -25,9 +25,9 @@
 import java.util.List;
 
 /**
- * <b><u>GuildMemberRoleAddEvent</u></b><br/>
- * Fired if one or more {@link net.dv8tion.jda.core.entities.Role Roles} are assigned to a {@link net.dv8tion.jda.core.entities.Member Member}.<br/>
- * <br/>
+ * <b><u>GuildMemberRoleAddEvent</u></b><br>
+ * Fired if one or more {@link net.dv8tion.jda.core.entities.Role Roles} are assigned to a {@link net.dv8tion.jda.core.entities.Member Member}.<br>
+ * <br>
  * Use: Retrieve affected member and guild. Provides a list of added roles.
  */
 public class GuildMemberRoleAddEvent extends GenericGuildMemberEvent

File: src/main/java/net/dv8tion/jda/core/events/guild/member/GuildMemberRoleRemoveEvent.java
Patch:
@@ -25,9 +25,9 @@
 import java.util.List;
 
 /**
- * <b><u>GuildMemberRoleRemoveEvent</u></b><br/>
- * Fired if one or more {@link net.dv8tion.jda.core.entities.Role Roles} are removed from a {@link net.dv8tion.jda.core.entities.Member Member}.<br/>
- * <br/>
+ * <b><u>GuildMemberRoleRemoveEvent</u></b><br>
+ * Fired if one or more {@link net.dv8tion.jda.core.entities.Role Roles} are removed from a {@link net.dv8tion.jda.core.entities.Member Member}.<br>
+ * <br>
  * Use: Retrieve affected member and guild. Provides a list of removed roles.
  */
 public class GuildMemberRoleRemoveEvent extends GenericGuildMemberEvent

File: src/main/java/net/dv8tion/jda/core/events/guild/update/GenericGuildUpdateEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.core.events.guild.GenericGuildEvent;
 
 /**
- * <b><u>GuildUpdateEvent</u></b><br/>
- * Fired whenever a {@link net.dv8tion.jda.core.entities.Guild Guild} updates.<br/>
- * <br/>
+ * <b><u>GuildUpdateEvent</u></b><br>
+ * Fired whenever a {@link net.dv8tion.jda.core.entities.Guild Guild} updates.<br>
+ * <br>
  * Use: Detect what Guild updated.
  */
 public abstract class GenericGuildUpdateEvent extends GenericGuildEvent

File: src/main/java/net/dv8tion/jda/core/events/message/MessageBulkDeleteEvent.java
Patch:
@@ -24,9 +24,9 @@
 import java.util.List;
 
 /**
- * <b><u>MessageBulkDeleteEvent</u></b><br/>
- * Fired if a bulk deletion is executed in a {@link net.dv8tion.jda.core.entities.TextChannel TextChannel}.<br/>
- * <br/>
+ * <b><u>MessageBulkDeleteEvent</u></b><br>
+ * Fired if a bulk deletion is executed in a {@link net.dv8tion.jda.core.entities.TextChannel TextChannel}.<br>
+ * <br>
  * Use: This event indicates that a large chunk of Messages is deleted in a TextChannel. Providing a list of Message IDs and the specific TextChannel.
  */
 public class MessageBulkDeleteEvent extends Event

File: src/main/java/net/dv8tion/jda/core/events/message/MessageDeleteEvent.java
Patch:
@@ -21,9 +21,9 @@
 import net.dv8tion.jda.core.events.Event;
 
 /**
- * <b><u>MessageDeleteEvent</u></b><br/>
- * Fired if a Message was deleted in a {@link net.dv8tion.jda.core.entities.MessageChannel MessageChannel}.<br/>
- * <br/>
+ * <b><u>MessageDeleteEvent</u></b><br>
+ * Fired if a Message was deleted in a {@link net.dv8tion.jda.core.entities.MessageChannel MessageChannel}.<br>
+ * <br>
  * Use: Detect when a Message is deleted. No matter if private or guild.
  */
 public class MessageDeleteEvent extends Event

File: src/main/java/net/dv8tion/jda/core/events/message/MessageEmbedEvent.java
Patch:
@@ -24,9 +24,9 @@
 import java.util.List;
 
 /**
- * <b><u>MessageEmbedEvent</u></b><br/>
- * Fired if a Message contains an {@link net.dv8tion.jda.core.entities.MessageEmbed Embed} in a {@link net.dv8tion.jda.core.entities.MessageChannel MessageChannel}.<br/>
- * <br/>
+ * <b><u>MessageEmbedEvent</u></b><br>
+ * Fired if a Message contains an {@link net.dv8tion.jda.core.entities.MessageEmbed Embed} in a {@link net.dv8tion.jda.core.entities.MessageChannel MessageChannel}.<br>
+ * <br>
  * Use: Grab MessageEmbeds from any message. No matter if private or guild.
  */
 public class MessageEmbedEvent extends Event

File: src/main/java/net/dv8tion/jda/core/events/message/MessageUpdateEvent.java
Patch:
@@ -21,9 +21,9 @@
 import net.dv8tion.jda.core.events.Event;
 
 /**
- * <b><u>MessageUpdateEvent</u></b><br/>
- * Fired if a Message is edited in a {@link net.dv8tion.jda.core.entities.MessageChannel MessageChannel}.<br/>
- * <br/>
+ * <b><u>MessageUpdateEvent</u></b><br>
+ * Fired if a Message is edited in a {@link net.dv8tion.jda.core.entities.MessageChannel MessageChannel}.<br>
+ * <br>
  * Use: This event indicates that a Message is edited in either a private or guild channel. Providing a MessageChannel and Message.
  */
 public class MessageUpdateEvent extends Event

File: src/main/java/net/dv8tion/jda/core/events/role/RoleCreateEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.core.entities.Role;
 
 /**
- * <b><u>RoleCreateEvent</u></b><br/>
- * Fired if a {@link net.dv8tion.jda.core.entities.Role Role} is created.<br/>
- * <br/>
+ * <b><u>RoleCreateEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.core.entities.Role Role} is created.<br>
+ * <br>
  * Use: Retrieve created Role and it's Guild.
  */
 public class RoleCreateEvent extends GenericRoleEvent

File: src/main/java/net/dv8tion/jda/core/events/role/RoleDeleteEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.core.entities.Role;
 
 /**
- * <b><u>RoleDeleteEvent</u></b><br/>
- * Fired if a {@link net.dv8tion.jda.core.entities.Role Role} is deleted.<br/>
- * <br/>
+ * <b><u>RoleDeleteEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.core.entities.Role Role} is deleted.<br>
+ * <br>
  * Use: Retrieve deleted Role and it's Guild.
  */
 public class RoleDeleteEvent extends GenericRoleEvent

File: src/main/java/net/dv8tion/jda/core/hooks/EventListener.java
Patch:
@@ -34,7 +34,7 @@ public interface EventListener
 
     /**
      * Handles any {@link net.dv8tion.jda.core.events.Event Event}.<p>
-     * To get specific events with Methods like <code>onMessageReceived(MessageReceivedEvent event)</code> take a look at: {@link net.dv8tion.jda.core.hooks.ListenerAdapter}
+     * To get specific events with Methods like {@code onMessageReceived(MessageReceivedEvent event)} take a look at: {@link net.dv8tion.jda.core.hooks.ListenerAdapter}
      * @param event
      *          The Event to handle.
      */

File: src/main/java/net/dv8tion/jda/core/managers/ChannelManagerUpdatable.java
Patch:
@@ -116,7 +116,7 @@ public void reset()
         }
     }
 
-    /**
+    /*
      * This method will apply all accumulated changes received by setters
      */
     public RestAction<Void> update()

File: src/main/java/net/dv8tion/jda/core/managers/GuildManagerUpdatable.java
Patch:
@@ -102,7 +102,7 @@ public GuildField<VoiceChannel> getAfkChannelField()
         return afkChannel;
     }
 
-    /**
+    /*
      * Valid timeouts are: 60, 300, 900, 1800, 3600.
      */
     public GuildField<Guild.Timeout> getAfkTimeoutField()
@@ -153,7 +153,7 @@ public void reset()
         this.mfaLevel.reset();
     }
 
-    /**
+    /*
      * This method will apply all accumulated changes received by setters
      *
      * @throws net.dv8tion.jda.core.exceptions.GuildUnavailableException

File: src/main/java/net/dv8tion/jda/core/managers/Presence.java
Patch:
@@ -64,7 +64,7 @@ public interface Presence
      * Sets the {@link net.dv8tion.jda.core.OnlineStatus OnlineStatus} for this session
      *
      * @param status
-     *      the {@link net.dv8tion.jda.core.OnlineStatus OnlineStatus} to be used (OFFLINE/null -> INVISIBLE)
+     *      the {@link net.dv8tion.jda.core.OnlineStatus OnlineStatus} to be used (OFFLINE/null {@literal ->} INVISIBLE)
      * @throws IllegalArgumentException
      *      if the provided OnlineStatus is {@link net.dv8tion.jda.core.OnlineStatus#UNKNOWN UNKNOWN}
      */

File: src/main/java/net/dv8tion/jda/core/managers/RoleManagerUpdatable.java
Patch:
@@ -117,7 +117,7 @@ public void reset() {
         permissions.reset();
     }
 
-    /**
+    /*
      * This method will apply all accumulated changes received by setters
      */
     public RestAction<Void> update()

File: src/main/java/net/dv8tion/jda/core/MessageHistory.java
Patch:
@@ -90,9 +90,6 @@ protected void handleResponse(Response response, Request request)
                 for (int i = 0; i < historyJson.length(); i++)
                     msgs.add(builder.createMessage(historyJson.getJSONObject(i)));
 
-                if (history.isEmpty())
-
-
                 msgs.forEach(msg -> history.put(msg.getId(), msg));
                 request.onSuccess(msgs);
             }

File: src/main/java/net/dv8tion/jda/core/MessageHistory.java
Patch:
@@ -90,9 +90,6 @@ protected void handleResponse(Response response, Request request)
                 for (int i = 0; i < historyJson.length(); i++)
                     msgs.add(builder.createMessage(historyJson.getJSONObject(i)));
 
-                if (history.isEmpty())
-
-
                 msgs.forEach(msg -> history.put(msg.getId(), msg));
                 request.onSuccess(msgs);
             }

File: src/main/java/net/dv8tion/jda/core/requests/ratelimit/BotRateLimiter.java
Patch:
@@ -163,12 +163,12 @@ private void setTimeOffset(Headers headers)
         {
             //Get the date header provided by Discord.
             //Format:  "date" : "Fri, 16 Sep 2016 05:49:36 GMT"
-            String date = headers.getFirst("date");
+            String date = headers.getFirst("Date");
             if (date != null)
             {
                 OffsetDateTime tDate = OffsetDateTime.parse(date, DateTimeFormatter.RFC_1123_DATE_TIME);
-                long lDate = tDate.toEpochSecond() * 1000;             //We want to work in milliseconds, not seconds
-                timeOffset = Math.floorDiv(lDate - time, 1000) * 1000; //Get offset, convert to seconds, round it down, convert to milliseconds.
+                long lDate = tDate.toInstant().toEpochMilli(); //We want to work in milliseconds, not seconds
+                timeOffset = lDate - time; //Get offset in milliseconds.
             }
         }
     }

File: src/main/java/net/dv8tion/jda/core/managers/ChannelManagerUpdatable.java
Patch:
@@ -154,9 +154,9 @@ protected void handleResponse(Response response, Request request)
     protected boolean needToUpdate()
     {
         return name.shouldUpdate()
-                || topic.shouldUpdate()
-                || userLimit.shouldUpdate()
-                || bitrate.shouldUpdate();
+                || (topic != null && topic.shouldUpdate())
+                || (userLimit != null && userLimit.shouldUpdate())
+                || (bitrate != null && bitrate.shouldUpdate());
     }
 
     protected void checkPermission(Permission perm)

File: src/main/java/net/dv8tion/jda/core/requests/ErrorResponse.java
Patch:
@@ -41,6 +41,7 @@ public enum ErrorResponse
     MAX_MESSAGE_PINS(   30003, "Maximum number of pinned messages reached (50)"),
     MAX_USERS_PER_DM(   30004, "Maxiuum number of recipients reached. (10)"),
     MAX_ROLES_PER_GUILD(30005, "Maximum number of guild roles reached (250)"),
+    TOO_MANY_REACTIONS( 30010, "Too many reactions"),
     UNAUTHORIZED(       40001, "Unauthorized"),
     MISSING_ACCESS(     50001, "Missing Access"),
     INVALID_ACCOUNT_TYPE(50002,"Invalid Account Type"),
@@ -61,6 +62,7 @@ public enum ErrorResponse
     INVALID_MFA_LEVEL(  50017, "Provided MFA level was invalid."),
     INVALID_PASSWORD(   50018, "Provided password was invalid"),
     MFA_NOT_ENABLED(    60003, "MFA auth required but not enabled"),
+    REACTION_BLOCKED(   90001, "Reaction Blocked"),
 
     UNKNOWN_ERROR(         -1, "Discord returned an unknown error type"),
     UNDEFINED_ERROR(       -2, "Discord returned an error with no defined error-code");

File: src/main/java/net/dv8tion/jda/core/managers/RoleManagerUpdatable.java
Patch:
@@ -134,7 +134,7 @@ public RestAction<Void> update()
         if(name.shouldUpdate())
             body.put("name", name.getValue());
         if(color.shouldUpdate())
-            body.put("color", color.getValue() == null ? 0 : color.getValue().getRGB());
+            body.put("color", color.getValue() == null ? 0 : color.getValue().getRGB() & 0xFFFFFF);
         if(hoisted.shouldUpdate())
             body.put("hoist", hoisted.getValue().booleanValue());
         if(mentionable.shouldUpdate())

File: src/main/java/net/dv8tion/jda/core/managers/RoleManagerUpdatable.java
Patch:
@@ -134,7 +134,7 @@ public RestAction<Void> update()
         if(name.shouldUpdate())
             body.put("name", name.getValue());
         if(color.shouldUpdate())
-            body.put("color", color.getValue() == null ? 0 : color.getValue().getRGB());
+            body.put("color", color.getValue() == null ? 0 : color.getValue().getRGB() & 0xFFFFFF);
         if(hoisted.shouldUpdate())
             body.put("hoist", hoisted.getValue().booleanValue());
         if(mentionable.shouldUpdate())

File: src/main/java/net/dv8tion/jda/core/requests/ratelimit/BotRateLimiter.java
Patch:
@@ -184,7 +184,9 @@ private void updateBucket(Bucket bucket, Headers headers)
         }
         catch (NumberFormatException ex)
         {
-            if (Requester.LOG.getEffectiveLevel().getPriority() <= SimpleLog.Level.DEBUG.getPriority())
+            if (!bucket.getRoute().equals("gateway")
+                    && !bucket.getRoute().equals("users/@me")
+                    && Requester.LOG.getEffectiveLevel().getPriority() <= SimpleLog.Level.DEBUG.getPriority())
             {
                 Requester.LOG.log(ex);
             }

File: src/main/java/net/dv8tion/jda/core/entities/MessageChannel.java
Patch:
@@ -133,6 +133,7 @@ public interface MessageChannel extends ISnowflake
      *      and you do not meet the required verification-level of the guild.
      */
     RestAction<Message> sendFile(File file, Message message) throws IOException;
+    RestAction<Message> sendFile(File file, String fileName, Message message) throws IOException;
     RestAction<Message> sendFile(InputStream data, String fileName, Message message);
     RestAction<Message> sendFile(byte[] data, String fileName, Message message);
 

File: src/main/java/net/dv8tion/jda/handle/EntityBuilder.java
Patch:
@@ -479,7 +479,7 @@ protected SelfInfo createSelfInfo(JSONObject self)
             api.getUserMap().put(selfInfo.getId(), selfInfo);
         }
         return (SelfInfo) selfInfo
-                .setVerified(self.getBoolean("verified"))
+                .setVerified(self.has("verified") ? self.getBoolean("verified") : selfInfo.isVerified())
                 .setUserName(self.getString("username"))
                 .setDiscriminator(self.getString("discriminator"))
                 .setAvatarId(self.isNull("avatar") ? null : self.getString("avatar"))

File: src/main/java/net/dv8tion/jda/core/entities/impl/JDAImpl.java
Patch:
@@ -64,7 +64,7 @@ public class JDAImpl implements JDA
 
     protected HttpHost proxy;
     protected WebSocketClient client;
-    protected Requester requester = new Requester(this);
+    protected Requester requester;
     protected IEventManager eventManager = new InterfacedEventManager();
     protected Status status = Status.INITIALIZING;
     protected SelfUser selfUser;
@@ -80,6 +80,7 @@ public JDAImpl(AccountType accountType, HttpHost proxy, boolean autoReconnect, b
     {
         this.presence = new PresenceImpl(this);
         this.accountType = accountType;
+        this.requester = new Requester(this);
         this.proxy = proxy;
         this.autoReconnect = autoReconnect;
         this.audioEnabled = audioEnabled;

File: src/main/java/net/dv8tion/jda/core/requests/Requester.java
Patch:
@@ -52,6 +52,9 @@ public Requester(JDA api)
 
     public Requester(JDA api, AccountType accountType)
     {
+        if (accountType == null)
+            throw new NullPointerException("Provided accountType was null!");
+
         this.api = api;
         if (accountType == AccountType.BOT)
             rateLimiter = new BotRateLimiter(this, 5);

File: src/main/java/net/dv8tion/jda/core/Permission.java
Patch:
@@ -171,6 +171,6 @@ public static long getRaw(Permission... permissions)
 
     public static long getRaw(Collection<Permission> permissions)
     {
-        return getRaw((Permission[]) permissions.toArray());
+        return getRaw(permissions.toArray(new Permission[permissions.size()]));
     }
 }

File: src/main/java/net/dv8tion/jda/core/Permission.java
Patch:
@@ -171,6 +171,6 @@ public static long getRaw(Permission... permissions)
 
     public static long getRaw(Collection<Permission> permissions)
     {
-        return getRaw(permissions.stream().toArray(Permission[]::new));
+        return getRaw(permissions.toArray(new Permission[permissions.size()]));
     }
 }

File: src/main/java/net/dv8tion/jda/core/Permission.java
Patch:
@@ -171,6 +171,6 @@ public static long getRaw(Permission... permissions)
 
     public static long getRaw(Collection<Permission> permissions)
     {
-        return getRaw((Permission[]) permissions.toArray());
+        return getRaw(permissions.stream().toArray(Permission[]::new));
     }
 }

File: src/main/java/net/dv8tion/jda/core/handle/UserUpdateHandler.java
Patch:
@@ -38,12 +38,12 @@ protected String handleInternally(JSONObject content)
 
         String name = content.getString("username");
         String discriminator = content.getString("discriminator");
-        String avatarId = content.getString("avatar");
+        String avatarId = !content.isNull("avatar") ? content.getString("avatar") : null;
         boolean verified = content.getBoolean("verified");
         boolean mfaEnabled = content.getBoolean("mfa_enabled");
 
         //Client only
-        String email = content.has("email") ? content.getString("email") : null;
+        String email = !content.isNull("email") ? content.getString("email") : null;
 
         if (!Objects.equals(name, self.getName()) || !Objects.equals(discriminator, self.getDiscriminator()))
         {

File: src/main/java/net/dv8tion/jda/core/requests/Route.java
Patch:
@@ -35,7 +35,7 @@ public class Route
     public static class Self
     {
         public static final Route GET_SELF =               new Route(GET,    "users/@me");
-        public static final Route UPDATE_SELF =            new Route(PATCH,  "users/@me");
+        public static final Route MODIFY_SELF =            new Route(PATCH,  "users/@me");
         public static final Route GET_GUILDS  =            new Route(GET,    "users/@me/guilds");
         public static final Route LEAVE_GUILD =            new Route(DELETE, "users/@me/guilds/{guild_id}");
         public static final Route GET_PRIVATE_CHANNELS =   new Route(GET,    "users/@me/channels");

File: src/main/java/net/dv8tion/jda/core/handle/ChannelUpdateHandler.java
Patch:
@@ -206,7 +206,7 @@ protected String handleInternally(JSONObject content)
                 List<Role> collect = channel.getRoleOverrideMap().keySet().stream().filter(role -> !containedRoles.contains(role)).collect(Collectors.toList());
                 collect.forEach(role -> {
                     changedRoles.add(role);
-                    channel.getRolePermissionOverrides().remove(role);
+                    channel.getRoleOverrideMap().remove(role);
                 });
                 List<Member> collect1 = channel.getMemberOverrideMap().keySet().stream().filter(user -> !containedMembers.contains(user)).collect(Collectors.toList());
                 collect1.forEach(member -> {

File: src/main/java/net/dv8tion/jda/core/handle/MessageCreateHandler.java
Patch:
@@ -77,7 +77,7 @@ private String handleDefaultMessage(JSONObject content)
                 }
                 case EntityBuilder.MISSING_USER:
                 {
-                    EventCache.get(api).cache(EventCache.Type.USER, content.getJSONObject("user").getString("id"), () ->
+                    EventCache.get(api).cache(EventCache.Type.USER, content.getJSONObject("author").getString("id"), () ->
                     {
                         handle(responseNumber, allContent);
                     });

File: src/main/java/net/dv8tion/jda/core/handle/MessageUpdateHandler.java
Patch:
@@ -98,7 +98,7 @@ private String handleDefaultMessage(JSONObject content)
                 }
                 case EntityBuilder.MISSING_USER:
                 {
-                    EventCache.get(api).cache(EventCache.Type.USER, content.getJSONObject("user").getString("id"), () ->
+                    EventCache.get(api).cache(EventCache.Type.USER, content.getJSONObject("author").getString("id"), () ->
                     {
                         handle(responseNumber, allContent);
                     });

File: src/main/java/net/dv8tion/jda/core/entities/EntityBuilder.java
Patch:
@@ -716,7 +716,7 @@ else if (chan instanceof Group)
             User user = member != null ? member.getUser() : null;
             if (user != null)
                 message.setAuthor(user);
-            else if (fromWebhook)
+            else if (fromWebhook || !exceptionOnMissingUser)
                 message.setAuthor(createFakeUser(author, false));
             else
                 throw new IllegalArgumentException(MISSING_USER);

File: src/main/java/net/dv8tion/jda/core/hooks/EventListener.java
Patch:
@@ -23,8 +23,8 @@
  * or the {@link net.dv8tion.jda.core.JDABuilder JDABuilder}.<br>
  * <br><b>Examples: </b><br>
  * <code>
- *     JDA jda = new {@link net.dv8tion.jda.core.JDABuilder JDABuilder}(AccountType.BOT).{@link net.dv8tion.jda.core.JDABuilder#addListener(Object) addListener(listener)}.buildBlocking();<br>
- *     {@link net.dv8tion.jda.core.JDA#addEventListener(Object) jda.addEventListener(listener)};
+ *     JDA jda = new {@link net.dv8tion.jda.core.JDABuilder JDABuilder}(AccountType.BOT).{@link net.dv8tion.jda.core.JDABuilder#addListener(Object...) addListener(listeners)}.buildBlocking();<br>
+ *     {@link net.dv8tion.jda.core.JDA#addEventListener(Object...) jda.addEventListener(listeners)};
  * </code>
  * @see net.dv8tion.jda.core.hooks.ListenerAdapter
  */

File: src/main/java/net/dv8tion/jda/core/entities/EntityBuilder.java
Patch:
@@ -592,7 +592,9 @@ public VoiceChannel createVoiceChannel(JSONObject json, String guildId)
 
     public PrivateChannel createPrivateChannel(JSONObject privatechat)
     {
-        JSONObject recipient = privatechat.getJSONArray("recipients").getJSONObject(0);
+        JSONObject recipient = privatechat.has("recipients") ? 
+            privatechat.getJSONArray("recipients").getJSONObject(0) :
+            privatechat.getJSONObject("recipient");
         UserImpl user = ((UserImpl) api.getUserMap().get(recipient.getString("id")));
         if (user == null)
         {   //The API can give us private channels connected to Users that we can no longer communicate with.

File: src/main/java/net/dv8tion/jda/core/handle/MessageCreateHandler.java
Patch:
@@ -77,7 +77,7 @@ private String handleDefaultMessage(JSONObject content)
                 }
                 case EntityBuilder.MISSING_USER:
                 {
-                    EventCache.get(api).cache(EventCache.Type.USER, content.getJSONObject("user").getString("id"), () ->
+                    EventCache.get(api).cache(EventCache.Type.USER, content.getJSONObject("author").getString("id"), () ->
                     {
                         handle(responseNumber, allContent);
                     });

File: src/main/java/net/dv8tion/jda/core/handle/MessageUpdateHandler.java
Patch:
@@ -98,7 +98,7 @@ private String handleDefaultMessage(JSONObject content)
                 }
                 case EntityBuilder.MISSING_USER:
                 {
-                    EventCache.get(api).cache(EventCache.Type.USER, content.getJSONObject("user").getString("id"), () ->
+                    EventCache.get(api).cache(EventCache.Type.USER, content.getJSONObject("author").getString("id"), () ->
                     {
                         handle(responseNumber, allContent);
                     });

File: src/main/java/net/dv8tion/jda/core/hooks/EventListener.java
Patch:
@@ -24,7 +24,7 @@
  * <br><b>Examples: </b><br>
  * <code>
  *     JDA jda = new {@link net.dv8tion.jda.core.JDABuilder JDABuilder}(AccountType.BOT).{@link net.dv8tion.jda.core.JDABuilder#addListener(Object) addListener(listener)}.buildBlocking();<br>
- *     {@link net.dv8tion.jda.core.JDA#addEventListener(Object) jda.addEventListener(listener)};
+ *     {@link net.dv8tion.jda.core.JDA#addEventListener(Object...) jda.addEventListener(listener)};
  * </code>
  * @see net.dv8tion.jda.core.hooks.ListenerAdapter
  */

File: src/main/java/net/dv8tion/jda/core/handle/MessageCreateHandler.java
Patch:
@@ -60,7 +60,7 @@ private String handleDefaultMessage(JSONObject content)
         Message message;
         try
         {
-            message = EntityBuilder.get(api).createMessage(content);
+            message = EntityBuilder.get(api).createMessage(content, true);
         }
         catch (IllegalArgumentException e)
         {

File: src/main/java/net/dv8tion/jda/core/entities/EntityBuilder.java
Patch:
@@ -511,10 +511,10 @@ public void createPresence(Object memberOrFriend, JSONObject presenceJson)
 
         if (gameJson != null && !gameJson.isNull("name"))
         {
-            String gameName = gameJson.getString("name");
+            String gameName = gameJson.get("name").toString();
             String url = gameJson.isNull("url")
                     ? null
-                    : gameJson.getString("url");
+                    : gameJson.get("url").toString();
 
             Game.GameType gameType;
             try

File: src/main/java/net/dv8tion/jda/handle/EntityBuilder.java
Patch:
@@ -139,10 +139,10 @@ public Guild createGuildFirstPass(JSONObject guild, Consumer<Guild> secondPassCa
                 JSONObject gameJson = !presence.isNull("game") ? presence.getJSONObject("game") : null;
                 if (gameJson != null && !gameJson.isNull("name"))
                 {
-                    String gameName = gameJson.getString("name");
+                    String gameName = gameJson.get("name").toString(); // Thanks discord :)
                     String url = gameJson.isNull("url")
                             ? null
-                            : gameJson.getString("url");
+                            : gameJson.get("url").toString(); // Thanks discord :)
                     Game.GameType gameType;
                     try
                     {

File: src/main/java/net/dv8tion/jda/core/entities/EntityBuilder.java
Patch:
@@ -476,8 +476,8 @@ public Member createMember(GuildImpl guild, JSONObject memberJson)
             .setGuildDeafened(memberJson.getBoolean("deaf"));
 
         member.setJoinDate(OffsetDateTime.parse(memberJson.getString("joined_at")))
-            .setNickname(memberJson.has("nickname") && !memberJson.isNull("nickname")
-                ? memberJson.getString("nickname")
+            .setNickname(memberJson.has("nick") && !memberJson.isNull("nick")
+                ? memberJson.getString("nick")
                 : null);
 
         JSONArray rolesJson = memberJson.getJSONArray("roles");

File: src/main/java/net/dv8tion/jda/core/entities/impl/TextChannelImpl.java
Patch:
@@ -70,7 +70,7 @@ public String getId()
     public RestAction<Void> deleteMessages(Collection<Message> messages)
     {
         return deleteMessagesByIds(messages.stream()
-                .map(msg -> msg.toString())
+                .map(ISnowflake::getId)
                 .collect(Collectors.toList()));
     }
 

File: src/main/java/net/dv8tion/jda/core/entities/impl/TextChannelImpl.java
Patch:
@@ -70,7 +70,7 @@ public String getId()
     public RestAction<Void> deleteMessages(Collection<Message> messages)
     {
         return deleteMessagesByIds(messages.stream()
-                .map(msg -> msg.toString())
+                .map(ISnowflake::getId)
                 .collect(Collectors.toList()));
     }
 

File: src/main/java/net/dv8tion/jda/core/requests/Route.java
Patch:
@@ -108,7 +108,7 @@ public static class Messages
 
         //Bot only
         public static final Route GET_MESSAGE =     new Route(GET, "channels/{channel_id}/messages/{message_id}", "channel_id");
-        public static final Route DELETE_MESSAGES = new Route(PUT, "channels/{channel_id}/messages/bulk_delete",  "channel_id");
+        public static final Route DELETE_MESSAGES = new Route(POST, "channels/{channel_id}/messages/bulk_delete",  "channel_id");
     }
 
     public static class Invites

File: src/main/java/net/dv8tion/jda/core/entities/EntityBuilder.java
Patch:
@@ -140,7 +140,7 @@ public void createGuildFirstPass(JSONObject guild, Consumer<Guild> secondPassCal
                 .setSplashId(guild.isNull("splash") ? null : guild.getString("splash"))
                 .setRegion(Region.fromKey(guild.getString("region")))
                 .setName(guild.getString("name"))
-                .setAfkTimeout(guild.getInt("afk_timeout"))
+                .setAfkTimeout(Guild.Timeout.fromKey(guild.getInt("afk_timeout")))
                 .setVerificationLevel(Guild.VerificationLevel.fromKey(guild.getInt("verification_level")))
                 .setDefaultNotificationLevel(Guild.NotificationLevel.fromKey(guild.getInt("default_message_notifications")))
                 .setRequiredMFALevel(Guild.MFALevel.fromKey(guild.getInt("mfa_level")));

File: src/main/java/net/dv8tion/jda/core/entities/impl/GuildImpl.java
Patch:
@@ -63,7 +63,7 @@ public class GuildImpl implements Guild
     private VerificationLevel verificationLevel;
     private NotificationLevel defaultNotificationLevel;
     private MFALevel mfaLevel;
-    private int afkTimeout;
+    private Timeout afkTimeout;
     private boolean available;
     private boolean canSendVerification = false;
 
@@ -116,7 +116,7 @@ public Member getOwner()
     }
 
     @Override
-    public int getAfkTimeout()
+    public Timeout getAfkTimeout()
     {
         return afkTimeout;
     }
@@ -522,7 +522,7 @@ public GuildImpl setRequiredMFALevel(MFALevel level)
         return this;
     }
 
-    public GuildImpl setAfkTimeout(int afkTimeout)
+    public GuildImpl setAfkTimeout(Timeout afkTimeout)
     {
         this.afkTimeout = afkTimeout;
         return this;

File: src/main/java/net/dv8tion/jda/core/events/guild/update/GuildUpdateAfkTimeoutEvent.java
Patch:
@@ -21,15 +21,15 @@
 
 public class GuildUpdateAfkTimeoutEvent extends GenericGuildUpdateEvent
 {
-    private final int oldAfkTimeout;
+    private final Guild.Timeout oldAfkTimeout;
 
-    public GuildUpdateAfkTimeoutEvent(JDA api, long responseNumber, Guild guild, int oldAfkTimeout)
+    public GuildUpdateAfkTimeoutEvent(JDA api, long responseNumber, Guild guild, Guild.Timeout oldAfkTimeout)
     {
         super(api, responseNumber, guild);
         this.oldAfkTimeout = oldAfkTimeout;
     }
 
-    public int getOldAfkTimeout()
+    public Guild.Timeout getOldAfkTimeout()
     {
         return oldAfkTimeout;
     }

File: src/main/java/net/dv8tion/jda/core/handle/GuildUpdateHandler.java
Patch:
@@ -53,7 +53,7 @@ protected String handleInternally(JSONObject content)
         Guild.VerificationLevel verificationLevel = Guild.VerificationLevel.fromKey(content.getInt("verification_level"));
         Guild.NotificationLevel notificationLevel = Guild.NotificationLevel.fromKey(content.getInt("default_message_notifications"));
         Guild.MFALevel mfaLevel = Guild.MFALevel.fromKey(content.getInt("mfa_level"));
-        int afkTimeout = content.getInt("afk_timeout");
+        Guild.Timeout afkTimeout = Guild.Timeout.fromKey(content.getInt("afk_timeout"));
         VoiceChannel afkChannel = !content.isNull("afk_channel_id")
                 ? guild.getVoiceChannelMap().get(content.getString("afk_channel_id"))
                 : null;
@@ -132,7 +132,7 @@ protected String handleInternally(JSONObject content)
         }
         if (!Objects.equals(afkTimeout, guild.getAfkTimeout()))
         {
-            int oldAfkTimeout = guild.getAfkTimeout();
+            Guild.Timeout oldAfkTimeout = guild.getAfkTimeout();
             guild.setAfkTimeout(afkTimeout);
             api.getEventManager().handle(
                     new GuildUpdateAfkTimeoutEvent(

File: src/main/java/net/dv8tion/jda/core/handle/GuildRoleUpdateHandler.java
Patch:
@@ -89,7 +89,7 @@ protected String handleInternally(JSONObject content)
                             api, responseNumber,
                             role, oldColor));
         }
-        if (Objects.equals(position, role.getPositionRaw()))
+        if (!Objects.equals(position, role.getPositionRaw()))
         {
             int oldPosition = role.getPosition();
             int oldPositionRaw = role.getPositionRaw();
@@ -99,7 +99,7 @@ protected String handleInternally(JSONObject content)
                             api, responseNumber,
                             role, oldPosition, oldPositionRaw));
         }
-        if (Objects.equals(permissions, role.getPermissionsRaw()))
+        if (!Objects.equals(permissions, role.getPermissionsRaw()))
         {
             int oldPermissionsRaw = role.getPermissionsRaw();
             role.setRawPermissions(permissions);

File: src/main/java/net/dv8tion/jda/core/handle/GuildRoleUpdateHandler.java
Patch:
@@ -89,7 +89,7 @@ protected String handleInternally(JSONObject content)
                             api, responseNumber,
                             role, oldColor));
         }
-        if (Objects.equals(position, role.getPositionRaw()))
+        if (!Objects.equals(position, role.getPositionRaw()))
         {
             int oldPosition = role.getPosition();
             int oldPositionRaw = role.getPositionRaw();
@@ -99,7 +99,7 @@ protected String handleInternally(JSONObject content)
                             api, responseNumber,
                             role, oldPosition, oldPositionRaw));
         }
-        if (Objects.equals(permissions, role.getPermissionsRaw()))
+        if (!Objects.equals(permissions, role.getPermissionsRaw()))
         {
             int oldPermissionsRaw = role.getPermissionsRaw();
             role.setRawPermissions(permissions);

File: src/main/java/net/dv8tion/jda/core/entities/impl/RoleImpl.java
Patch:
@@ -125,7 +125,7 @@ public boolean hasPermission(Permission... permissions)
     {
         for (Permission perm : permissions)
         {
-            if ((rawPermissions & perm.getOffset()) != perm.getOffset())
+            if (((rawPermissions >> perm.getOffset()) & 1) != 1)
                 return false;
         }
         return true;

File: src/main/java/net/dv8tion/jda/core/handle/VoiceStateUpdateHandler.java
Patch:
@@ -67,7 +67,7 @@ private void handleGuildVoiceState(JSONObject content)
     {
         String userId = content.getString("user_id");
         String guildId = content.getString("guild_id");
-        String channelId = !content.isNull("channel_id ") ? content.getString("channel_id") : null;
+        String channelId = !content.isNull("channel_id") ? content.getString("channel_id") : null;
         String sessionId = !content.isNull("session_id") ? content.getString("session_id") : null;
         boolean selfMuted = content.getBoolean("self_mute");
         boolean selfDeafened = content.getBoolean("self_deaf");

File: src/main/java/net/dv8tion/jda/core/entities/Guild.java
Patch:
@@ -94,6 +94,7 @@ public interface Guild extends ISnowflake
      */
     boolean isMember(User user);
 
+    Member getSelfMember();
     Member getMember(User user);
     Member getMemberById(String userId);
     List<Member> getMembers();

File: src/main/java/net/dv8tion/jda/core/Permission.java
Patch:
@@ -35,6 +35,7 @@ public enum Permission
     MESSAGE_ATTACH_FILES(15, true, true),
     MESSAGE_HISTORY(16, true, true),
     MESSAGE_MENTION_EVERYONE(17, true, true),
+    MESSAGE_EXT_EMOJI(18, true, true),
 
     VOICE_CONNECT(20, true, true),
     VOICE_SPEAK(21, true, true),
@@ -48,6 +49,8 @@ public enum Permission
 
     MANAGE_ROLES(28, true, false),
     MANAGE_PERMISSIONS(28, false, true),
+    MANAGE_WEBHOOKS(29, true, true),
+    MANAGE_EMOTES(30, true, false),
 
     UNKNOWN(-1, false, false);
 

File: src/main/java/net/dv8tion/jda/core/handle/ReadyHandler.java
Patch:
@@ -99,6 +99,7 @@ protected String handleInternally(JSONObject content)
 
     public void guildLoadComplete(JSONObject content)
     {
+        api.getClient().setChunkingAndSyncing(false);
         EntityBuilder builder = EntityBuilder.get(api);
         JSONArray privateChannels = content.getJSONArray("private_channels");
 
@@ -194,7 +195,7 @@ private void checkIfReadyToSendRequests()
     {
         if (acknowledgedGuilds.size() == incompleteGuilds.size())
         {
-            api.getClient().setChunkingAndSyncing();
+            api.getClient().setChunkingAndSyncing(true);
             if (api.getAccountType() == AccountType.CLIENT)
                 sendGuildSyncRequests();
             sendMemberChunkRequests();

File: src/main/java/net/dv8tion/jda/core/entities/impl/UserImpl.java
Patch:
@@ -93,6 +93,8 @@ public RestAction<PrivateChannel> openPrivateChannel()
     {
         if (privateChannel != null)
             throw new IllegalStateException("A private channel already exists for this User!");
+        if (fake)
+            throw new IllegalStateException("Cannot open a PrivateChannel with a Fake user.");
 
         Route.CompiledRoute route = Route.Self.CREATE_PRIVATE_CHANNEL.compile();
         JSONObject body = new JSONObject().put("recipient_id", getId());
@@ -118,7 +120,7 @@ protected void handleResponse(Response response, Request request)
     @Override
     public PrivateChannel getPrivateChannel()
     {
-        if (hasPrivateChannel())
+        if (!hasPrivateChannel())
             throw new IllegalStateException("There is no PrivateChannel for this user yet! Use User#openPrivateChannel() first!");
 
         return privateChannel;

File: src/main/java/net/dv8tion/jda/core/entities/EntityBuilder.java
Patch:
@@ -515,7 +515,7 @@ public void createPresence(Object memberOrFriend, JSONObject presenceJson)
                     : gameJson.getString("url");
             Game.GameType gameType = gameJson.isNull("type")
                     ? Game.GameType.DEFAULT
-                    : Game.GameType.fromKey(gameJson.getInt("type"));
+                    : Game.GameType.fromKey(Integer.parseInt(gameJson.get("type").toString()));
 
             game = new GameImpl(gameName, url, gameType);
         }

File: src/main/java/net/dv8tion/jda/core/entities/impl/MessageEmbedImpl.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.awt.Color;
 import java.time.OffsetDateTime;
+import java.util.Collections;
 import java.util.List;
 import net.dv8tion.jda.core.entities.EmbedType;
 import net.dv8tion.jda.core.entities.MessageEmbed;
@@ -97,7 +98,7 @@ public ImageInfo getImage() {
 
     @Override
     public List<Field> getFields() {
-        return fields;
+        return Collections.unmodifiableList(fields);
     }
     
     @Override

File: src/main/java/net/dv8tion/jda/client/entities/Group.java
Patch:
@@ -22,7 +22,7 @@
 
 import java.util.List;
 
-public interface Group extends MessageChannel
+public interface Group extends MessageChannel, CallableChannel
 {
     String getName();
     String getIconId();
@@ -35,8 +35,6 @@ public interface Group extends MessageChannel
 
     //getGroupManager()
 
-    RestAction<Call> startCall();
-    Call getCurrentCall();
 
     RestAction leaveGroup();
 }

File: src/main/java/net/dv8tion/jda/core/entities/Member.java
Patch:
@@ -64,13 +64,13 @@ public interface Member extends IMentionable
     OffsetDateTime getJoinDate();
 
     /**
-     * The {@link net.dv8tion.jda.core.entities.VoiceState VoiceStatus} of this Member.<p>
+     * The {@link net.dv8tion.jda.core.entities.GuildVoiceState VoiceState} of this Member.<p>
      * This can be used to get the Member's VoiceChannel.
      *
      * @return
-     *      {@link net.dv8tion.jda.core.entities.VoiceState VoiceStatus}
+     *      {@link net.dv8tion.jda.core.entities.GuildVoiceState VoiceState}
      */
-    VoiceState getVoiceState();
+    GuildVoiceState getVoiceState();
 
     /**
      * The game that the user is currently playing.

File: src/main/java/net/dv8tion/jda/core/entities/PrivateChannel.java
Patch:
@@ -15,13 +15,14 @@
  */
 package net.dv8tion.jda.core.entities;
 
+import net.dv8tion.jda.client.entities.CallableChannel;
 import net.dv8tion.jda.core.JDA;
 import net.dv8tion.jda.core.requests.RestAction;
 
 /**
  * Represents the connection used for direct messaging.
  */
-public interface PrivateChannel extends MessageChannel, IFakeable
+public interface PrivateChannel extends MessageChannel, CallableChannel, IFakeable
 {
     /**
      * The {@link net.dv8tion.jda.core.entities.User User} that this {@link net.dv8tion.jda.core.entities.PrivateChannel PrivateChannel} communicates with.

File: src/main/java/net/dv8tion/jda/core/entities/impl/MemberImpl.java
Patch:
@@ -32,7 +32,7 @@ public class MemberImpl implements Member
     private final Guild guild;
     private final User user;
     private final TreeSet<Role> roles = new TreeSet<>((r1, r2) -> r2.compareTo(r1));
-    private final VoiceState voiceState;
+    private final GuildVoiceState voiceState;
 
     private String nickname;
     private OffsetDateTime joinDate;
@@ -43,7 +43,7 @@ public MemberImpl(Guild guild, User user)
     {
         this.guild = guild;
         this.user = user;
-        this.voiceState = new VoiceStateImpl(guild, this);
+        this.voiceState = new GuildVoiceStateImpl(guild, this);
     }
 
     @Override
@@ -71,7 +71,7 @@ public OffsetDateTime getJoinDate()
     }
 
     @Override
-    public VoiceState getVoiceState()
+    public GuildVoiceState getVoiceState()
     {
         return voiceState;
     }

File: src/main/java/net/dv8tion/jda/core/handle/EventCache.java
Patch:
@@ -103,6 +103,6 @@ public void clear()
 
     public enum Type
     {
-        USER, GUILD, CHANNEL, ROLE, RELATIONSHIP
+        USER, GUILD, CHANNEL, ROLE, RELATIONSHIP, CALL
     }
 }

File: src/main/java/net/dv8tion/jda/core/handle/GuildMemberRemoveHandler.java
Patch:
@@ -17,8 +17,6 @@
 
 import net.dv8tion.jda.client.entities.Group;
 import net.dv8tion.jda.core.AccountType;
-import net.dv8tion.jda.core.entities.Member;
-import net.dv8tion.jda.core.entities.PrivateChannel;
 import net.dv8tion.jda.core.entities.VoiceChannel;
 import net.dv8tion.jda.core.entities.impl.*;
 import net.dv8tion.jda.core.events.guild.member.GuildMemberLeaveEvent;
@@ -56,7 +54,7 @@ protected String handleInternally(JSONObject content)
         if (member.getVoiceState().inVoiceChannel())//If this user was in a VoiceChannel, fire VoiceLeaveEvent.
         {
 
-            VoiceStateImpl vState = (VoiceStateImpl) member.getVoiceState();
+            GuildVoiceStateImpl vState = (GuildVoiceStateImpl) member.getVoiceState();
             VoiceChannel channel = vState.getChannel();
             vState.setConnectedChannel(null);
             ((VoiceChannelImpl) channel).getConnectedMembersMap().remove(member);

File: src/main/java/net/dv8tion/jda/core/handle/MessageCreateHandler.java
Patch:
@@ -50,7 +50,7 @@ protected String handleInternally(JSONObject content)
             case DEFAULT:
                 return handleDefaultMessage(content);
             default:
-                JDAImpl.LOG.debug("JDA received a message of unknown type. Type: " + type + "  JSON: " + content);
+                WebSocketClient.LOG.debug("JDA received a message of unknown type. Type: " + type + "  JSON: " + content);
         }
         return null;
     }

File: src/main/java/net/dv8tion/jda/client/JDAClient.java
Patch:
@@ -41,6 +41,7 @@ public interface JDAClient
     Relationship getRelationship(User user);
     Relationship getRelationship(Member member);
     Relationship getRelationshipById(String id);
+    Relationship getRelationshipById(String id, RelationshipType type);
 
     List<Friend> getFriends();
     List<Friend> getFriendsByName(String name, boolean ignoreCase);

File: src/main/java/net/dv8tion/jda/client/entities/RelationshipType.java
Patch:
@@ -21,8 +21,8 @@ public enum RelationshipType
     NO_RELATIONSHIP(0),
     FRIEND(1),
     BLOCKED(2),
-    FRIEND_REQUEST_INCOMING(3),
-    FRIEND_REQUEST_OUTGOING(4),
+    INCOMING_FRIEND_REQUEST(3),
+    OUTGOING_FRIEND_REQUEST(4),
     UNKNOWN(-1);
 
     private final int key;

File: src/main/java/net/dv8tion/jda/core/handle/EventCache.java
Patch:
@@ -39,7 +39,7 @@ public static EventCache get(JDA jda)
         return cache;
     }
 
-    protected void cache(Type type, String triggerId, Runnable handler)
+    public void cache(Type type, String triggerId, Runnable handler)
     {
         HashMap<String, List<Runnable>> triggerCache = eventCache.get(type);
         if (triggerCache == null)
@@ -58,7 +58,7 @@ protected void cache(Type type, String triggerId, Runnable handler)
         items.add(handler);
     }
 
-    protected void playbackCache(Type type, String triggerId)
+    public void playbackCache(Type type, String triggerId)
     {
         List<Runnable> items;
         try
@@ -101,7 +101,7 @@ public void clear()
         eventCache.clear();
     }
 
-    enum Type
+    public enum Type
     {
         USER, GUILD, CHANNEL, ROLE
     }

File: src/main/java/net/dv8tion/jda/core/handle/GuildBanHandler.java
Patch:
@@ -54,9 +54,7 @@ protected String handleInternally(JSONObject content)
             return null;
         }
 
-        User user = api.getUserMap().get(userJson.getString("id"));
-        if (user == null)
-            user = EntityBuilder.get(api).createFakeUser(userJson);
+        User user = EntityBuilder.get(api).createFakeUser(userJson, false);
 
         if (banned)
         {

File: src/main/java/net/dv8tion/jda/core/requests/WebSocketClient.java
Patch:
@@ -751,6 +751,8 @@ public <T> T getHandler(String type)
 
     private void setupHandlers()
     {
+        handlers.put("CHANNEL_CREATE", new ChannelCreateHandler(api));
+        handlers.put("CHANNEL_DELETE", new ChannelDeleteHandler(api));
         handlers.put("GUILD_CREATE", new GuildCreateHandler(api));
         handlers.put("GUILD_MEMBERS_CHUNK", new GuildMembersChunkHandler(api));
         handlers.put("GUILD_SYNC", new GuildSyncHandler(api));

File: src/main/java/net/dv8tion/jda/core/entities/Channel.java
Patch:
@@ -100,8 +100,8 @@ public interface Channel extends ISnowflake
      * If there is no {@link net.dv8tion.jda.core.entities.PermissionOverride PermissionOverride} for this {@link net.dv8tion.jda.core.entities.Channel Channel}
      * relating to the provided {@link net.dv8tion.jda.core.entities.User User}, then this returns <code>null</code>.
      *
-     * @param user
-     *          The {@link net.dv8tion.jda.core.entities.User User} whose {@link net.dv8tion.jda.core.entities.PermissionOverride PermissionOverride} is requested.
+     * @param member
+     *          The {@link net.dv8tion.jda.core.entities.Member Member} whose {@link net.dv8tion.jda.core.entities.PermissionOverride PermissionOverride} is requested.
      * @return
      *      Possibly-null {@link net.dv8tion.jda.core.entities.PermissionOverride PermissionOverride} relating to the provided {@link net.dv8tion.jda.core.entities.User User}.
      */

File: src/main/java/net/dv8tion/jda/core/entities/Message.java
Patch:
@@ -201,6 +201,9 @@ public interface Message extends ISnowflake
      * Deletes this Message from the server.
      * Calling this function on a Message created by another User while not having the
      * {@link net.dv8tion.jda.core.Permission#MESSAGE_MANAGE MESSAGE_MANAGE Permission} will have no effect
+     *
+     * @return
+     *          {@link net.dv8tion.jda.core.requests.RestAction RestAction}
      */
     RestAction<Void> deleteMessage();
 

File: src/main/java/net/dv8tion/jda/core/entities/PrivateChannel.java
Patch:
@@ -42,6 +42,9 @@ public interface PrivateChannel extends MessageChannel, IFakeable
      * Closes a PrivateChannel. After being closed successfully the PrivateChannel is removed from the JDA mapping.<br>
      * As a note, this does not remove the history of the PrivateChannel. If the channel is reoppened the history will
      * still be present.
+     *
+     * @return
+     *          {@link net.dv8tion.jda.core.requests.RestAction RestAction}
      */
     RestAction close();
 }

File: src/main/java/net/dv8tion/jda/core/events/ReconnectedEvent.java
Patch:
@@ -19,9 +19,9 @@
 
 /**
  * <b><u>ReconnectedEvent</u></b><br>
- * Fired if JDA successfully re-established it's connection to the WebSocket.<br/>
- * All Objects have been replaced when this is fired and events were likely missed in the downtime.<br/>
- * <br/>
+ * Fired if JDA successfully re-established it's connection to the WebSocket.<br>
+ * All Objects have been replaced when this is fired and events were likely missed in the downtime.<br>
+ * <br>
  * Use: This marks the continuation of event flow stopped by the {@link net.dv8tion.jda.core.events.DisconnectEvent DisconnectEvent}. User should replace any cached Objects (like User/Guild objects).
  */
 public class ReconnectedEvent extends Event

File: src/main/java/net/dv8tion/jda/core/events/ResumedEvent.java
Patch:
@@ -19,9 +19,9 @@
 
 /**
  * <b><u>ResumedEvent</u></b><br>
- * Fired if JDA successfully re-established it's connection to the WebSocket.<br/>
- * All Objects are still in place and events are replayed.<br/>
- * <br/>
+ * Fired if JDA successfully re-established it's connection to the WebSocket.<br>
+ * All Objects are still in place and events are replayed.<br>
+ * <br>
  * Use: This marks the continuation of event flow stopped by the {@link net.dv8tion.jda.core.events.DisconnectEvent DisconnectEvent}.
  */
 public class ResumedEvent extends Event

File: src/main/java/net/dv8tion/jda/core/events/StatusChangeEvent.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * <b><u>StatusChangedEvent</u></b><br>
- * Fired if our {@link net.dv8tion.jda.core.JDA.Status Status} changed. (Example: SHUTTING_DOWN -> SHUTDOWN)<br>
+ * Fired if our {@link net.dv8tion.jda.core.JDA.Status Status} changed. (Example: SHUTTING_DOWN -&gt; SHUTDOWN)<br>
  * <br>
  * Use: Detect internal status changes. Possibly to log or forward on user's end.
  */

File: src/main/java/net/dv8tion/jda/core/events/message/MessageReceivedEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.core.events.Event;
 
 /**
- * <b><u>MessageReceivedEvent</u></b><br/>
- * Fired if a Message is sent in a {@link net.dv8tion.jda.core.entities.MessageChannel MessageChannel}.<br/>
- * <br/>
+ * <b><u>MessageReceivedEvent</u></b><br>
+ * Fired if a Message is sent in a {@link net.dv8tion.jda.core.entities.MessageChannel MessageChannel}.<br>
+ * <br>
  * Use: This event indicates that a Message is sent in either a private or guild channel. Providing a MessageChannel and Message.
  */
 public class MessageReceivedEvent extends Event

File: src/main/java/net/dv8tion/jda/core/events/message/guild/GuildMessageDeleteEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.core.entities.TextChannel;
 
 /**
- * <b><u>GuildMessageDeleteEvent</u></b><br/>
- * Fired if a Guild Message was deleted.<br/>
- * <br/>
+ * <b><u>GuildMessageDeleteEvent</u></b><br>
+ * Fired if a Guild Message was deleted.<br>
+ * <br>
  * Use: Retrieve affected TextChannel and the id of the deleted Message.
  */
 public class GuildMessageDeleteEvent extends GenericGuildMessageEvent

File: src/main/java/net/dv8tion/jda/core/events/message/guild/GuildMessageEmbedEvent.java
Patch:
@@ -22,9 +22,9 @@
 import java.util.List;
 
 /**
- * <b><u>GuildMessageEmbedEvent</u></b><br/>
- * Fired if a Guild Message contains one or more {@link net.dv8tion.jda.core.entities.MessageEmbed Embeds}.<br/>
- * <br/>
+ * <b><u>GuildMessageEmbedEvent</u></b><br>
+ * Fired if a Guild Message contains one or more {@link net.dv8tion.jda.core.entities.MessageEmbed Embeds}.<br>
+ * <br>
  * Use: Retrieve affected TextChannel, the id of the affected Message and a list of MessageEmbeds.
  */
 public class GuildMessageEmbedEvent extends GenericGuildMessageEvent

File: src/main/java/net/dv8tion/jda/core/events/message/guild/GuildMessageReceivedEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.core.entities.TextChannel;
 
 /**
- * <b><u>GuildMessageReceivedEvent</u></b><br/>
- * Fired if a Message is sent in a {@link net.dv8tion.jda.core.entities.TextChannel TextChannel}.<br/>
- * <br/>
+ * <b><u>GuildMessageReceivedEvent</u></b><br>
+ * Fired if a Message is sent in a {@link net.dv8tion.jda.core.entities.TextChannel TextChannel}.<br>
+ * <br>
  * Use: Retrieve affected TextChannel and Message.
  */
 public class GuildMessageReceivedEvent extends GenericGuildMessageEvent

File: src/main/java/net/dv8tion/jda/core/events/message/guild/GuildMessageUpdateEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.core.entities.TextChannel;
 
 /**
- * <b><u>GuildMessageReceivedEvent</u></b><br/>
- * Fired if a Message is edited in a {@link net.dv8tion.jda.core.entities.TextChannel TextChannel}.<br/>
- * <br/>
+ * <b><u>GuildMessageReceivedEvent</u></b><br>
+ * Fired if a Message is edited in a {@link net.dv8tion.jda.core.entities.TextChannel TextChannel}.<br>
+ * <br>
  * Use: Retrieve affected TextChannel and Message.
  */
 public class GuildMessageUpdateEvent extends GenericGuildMessageEvent

File: src/main/java/net/dv8tion/jda/core/events/message/priv/PrivateMessageDeleteEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.core.entities.PrivateChannel;
 
 /**
- * <b><u>PrivateMessageDeleteEvent</u></b><br/>
- * Fired if a Message is deleted in a {@link net.dv8tion.jda.core.entities.PrivateChannel PrivateChannel}.<br/>
- * <br/>
+ * <b><u>PrivateMessageDeleteEvent</u></b><br>
+ * Fired if a Message is deleted in a {@link net.dv8tion.jda.core.entities.PrivateChannel PrivateChannel}.<br>
+ * <br>
  * Use: Retrieve affected PrivateChannel and the ID of the deleted Message.
  */
 public class PrivateMessageDeleteEvent extends GenericPrivateMessageEvent

File: src/main/java/net/dv8tion/jda/core/events/message/priv/PrivateMessageEmbedEvent.java
Patch:
@@ -22,9 +22,9 @@
 import java.util.List;
 
 /**
- * <b><u>PrivateMessageEmbedEvent</u></b><br/>
- * Fired if a Message contains {@link net.dv8tion.jda.core.entities.MessageEmbed Embeds} in a {@link net.dv8tion.jda.core.entities.PrivateChannel PrivateChannel}.<br/>
- * <br/>
+ * <b><u>PrivateMessageEmbedEvent</u></b><br>
+ * Fired if a Message contains {@link net.dv8tion.jda.core.entities.MessageEmbed Embeds} in a {@link net.dv8tion.jda.core.entities.PrivateChannel PrivateChannel}.<br>
+ * <br>
  * Use: Retrieve affected PrivateChannel, the ID of the deleted Message and a list of MessageEmbeds.
  */
 public class PrivateMessageEmbedEvent extends GenericPrivateMessageEvent

File: src/main/java/net/dv8tion/jda/core/events/message/priv/PrivateMessageReceivedEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.core.entities.PrivateChannel;
 
 /**
- * <b><u>PrivateMessageReceivedEvent</u></b><br/>
- * Fired if a Message is sent in a {@link net.dv8tion.jda.core.entities.PrivateChannel PrivateChannel}.<br/>
- * <br/>
+ * <b><u>PrivateMessageReceivedEvent</u></b><br>
+ * Fired if a Message is sent in a {@link net.dv8tion.jda.core.entities.PrivateChannel PrivateChannel}.<br>
+ * <br>
  * Use: Retrieve affected PrivateChannel and Message.
  */
 public class PrivateMessageReceivedEvent extends GenericPrivateMessageEvent

File: src/main/java/net/dv8tion/jda/core/events/message/priv/PrivateMessageUpdateEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.core.entities.PrivateChannel;
 
 /**
- * <b><u>PrivateMessageUpdateEvent</u></b><br/>
- * Fired if a Message is edited in a {@link net.dv8tion.jda.core.entities.PrivateChannel PrivateChannel}.<br/>
- * <br/>
+ * <b><u>PrivateMessageUpdateEvent</u></b><br>
+ * Fired if a Message is edited in a {@link net.dv8tion.jda.core.entities.PrivateChannel PrivateChannel}.<br>
+ * <br>
  * Use: Retrieve affected PrivateChannel and edited Message.
  */
 public class PrivateMessageUpdateEvent extends GenericPrivateMessageEvent

File: src/main/java/net/dv8tion/jda/core/events/user/GenericUserEvent.java
Patch:
@@ -21,7 +21,7 @@
 
 /**
  * <b><u>GenericUserEvent</u></b><br>
- * Fired whenever a {@link net.dv8tion.jda.entities.User User} changes their presence. (like avatar/game)<br>
+ * Fired whenever a {@link net.dv8tion.jda.core.entities.User User} changes their presence. (like avatar/game)<br>
  * Every UserEvent is an instance of this event and can be casted. (no exceptions)<br>
  * <br>
  * Use: Detect any UserEvent. <i>(No real use for the JDA user)</i>

File: src/main/java/net/dv8tion/jda/core/events/user/UserAvatarUpdateEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.core.entities.User;
 
 /**
- * <b><u>UserAvatarUpdateEvent</u></b><br/>
- * Fired if the Avatar of a {@link net.dv8tion.jda.core.entities.User User} changes.<br/>
- * <br/>
+ * <b><u>UserAvatarUpdateEvent</u></b><br>
+ * Fired if the Avatar of a {@link net.dv8tion.jda.core.entities.User User} changes.<br>
+ * <br>
  * Use: Retrieve the User who's Avatar changed and their previous Avatar ID/URL.
  */
 public class UserAvatarUpdateEvent extends GenericUserEvent

File: src/main/java/net/dv8tion/jda/core/events/user/UserGameUpdateEvent.java
Patch:
@@ -21,9 +21,9 @@
 import net.dv8tion.jda.core.entities.User;
 
 /**
- * <b><u>UserGameUpdateEvent</u></b><br/>
- * Fired if the {@link net.dv8tion.jda.core.entities.Game Game} of a {@link net.dv8tion.jda.core.entities.User User} changes.<br/>
- * <br/>
+ * <b><u>UserGameUpdateEvent</u></b><br>
+ * Fired if the {@link net.dv8tion.jda.core.entities.Game Game} of a {@link net.dv8tion.jda.core.entities.User User} changes.<br>
+ * <br>
  * Use: Retrieve the User who's Game changed and their previous Game.
  */
 public class UserGameUpdateEvent extends GenericUserEvent

File: src/main/java/net/dv8tion/jda/core/events/user/UserNameUpdateEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.core.entities.User;
 
 /**
- * <b><u>UserNameUpdateEvent</u></b><br/>
- * Fired if the username of a {@link net.dv8tion.jda.core.entities.User User} changes. (Not Nickname)<br/>
- * <br/>
+ * <b><u>UserNameUpdateEvent</u></b><br>
+ * Fired if the username of a {@link net.dv8tion.jda.core.entities.User User} changes. (Not Nickname)<br>
+ * <br>
  * Use: Retrieve the User who's username changed and their previous username.
  */
 public class UserNameUpdateEvent extends GenericUserEvent

File: src/main/java/net/dv8tion/jda/core/events/user/UserOnlineStatusUpdateEvent.java
Patch:
@@ -21,9 +21,9 @@
 import net.dv8tion.jda.core.entities.User;
 
 /**
- * <b><u>UserOnlineStatusUpdateEvent</u></b><br/>
- * Fired if the {@link OnlineStatus OnlineStatus} of a {@link net.dv8tion.jda.core.entities.User User} changes.<br/>
- * <br/>
+ * <b><u>UserOnlineStatusUpdateEvent</u></b><br>
+ * Fired if the {@link OnlineStatus OnlineStatus} of a {@link net.dv8tion.jda.core.entities.User User} changes.<br>
+ * <br>
  * Use: Retrieve the User who's status changed and their previous status.
  */
 public class UserOnlineStatusUpdateEvent extends GenericUserEvent

File: src/main/java/net/dv8tion/jda/core/events/user/UserTypingEvent.java
Patch:
@@ -22,9 +22,9 @@
 import java.time.OffsetDateTime;
 
 /**
- * <b><u>UserTypingUpdateEvent</u></b><br/>
- * Fired if a {@link net.dv8tion.jda.core.entities.User User} starts typing. (Similar to the typing indicator in the Discord client)<br/>
- * <br/>
+ * <b><u>UserTypingUpdateEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.core.entities.User User} starts typing. (Similar to the typing indicator in the Discord client)<br>
+ * <br>
  * Use: Retrieve the User who started typing and when and in which MessageChannel they started typing.
  */
 public class UserTypingEvent extends GenericUserEvent

File: src/main/java/net/dv8tion/jda/core/entities/Channel.java
Patch:
@@ -100,8 +100,8 @@ public interface Channel extends ISnowflake
      * If there is no {@link net.dv8tion.jda.core.entities.PermissionOverride PermissionOverride} for this {@link net.dv8tion.jda.core.entities.Channel Channel}
      * relating to the provided {@link net.dv8tion.jda.core.entities.User User}, then this returns <code>null</code>.
      *
-     * @param user
-     *          The {@link net.dv8tion.jda.core.entities.User User} whose {@link net.dv8tion.jda.core.entities.PermissionOverride PermissionOverride} is requested.
+     * @param member
+     *          The {@link net.dv8tion.jda.core.entities.Member Member} whose {@link net.dv8tion.jda.core.entities.PermissionOverride PermissionOverride} is requested.
      * @return
      *      Possibly-null {@link net.dv8tion.jda.core.entities.PermissionOverride PermissionOverride} relating to the provided {@link net.dv8tion.jda.core.entities.User User}.
      */

File: src/main/java/net/dv8tion/jda/core/entities/Message.java
Patch:
@@ -201,6 +201,9 @@ public interface Message extends ISnowflake
      * Deletes this Message from the server.
      * Calling this function on a Message created by another User while not having the
      * {@link net.dv8tion.jda.core.Permission#MESSAGE_MANAGE MESSAGE_MANAGE Permission} will have no effect
+     *
+     * @return
+     *          {@link net.dv8tion.jda.core.requests.RestAction RestAction}
      */
     RestAction<Void> deleteMessage();
 

File: src/main/java/net/dv8tion/jda/core/entities/PrivateChannel.java
Patch:
@@ -42,6 +42,9 @@ public interface PrivateChannel extends MessageChannel, IFakeable
      * Closes a PrivateChannel. After being closed successfully the PrivateChannel is removed from the JDA mapping.<br>
      * As a note, this does not remove the history of the PrivateChannel. If the channel is reoppened the history will
      * still be present.
+     *
+     * @return
+     *          {@link net.dv8tion.jda.core.requests.RestAction RestAction}
      */
     RestAction close();
 }

File: src/main/java/net/dv8tion/jda/core/events/ReconnectedEvent.java
Patch:
@@ -19,9 +19,9 @@
 
 /**
  * <b><u>ReconnectedEvent</u></b><br>
- * Fired if JDA successfully re-established it's connection to the WebSocket.<br/>
- * All Objects have been replaced when this is fired and events were likely missed in the downtime.<br/>
- * <br/>
+ * Fired if JDA successfully re-established it's connection to the WebSocket.<br>
+ * All Objects have been replaced when this is fired and events were likely missed in the downtime.<br>
+ * <br>
  * Use: This marks the continuation of event flow stopped by the {@link net.dv8tion.jda.core.events.DisconnectEvent DisconnectEvent}. User should replace any cached Objects (like User/Guild objects).
  */
 public class ReconnectedEvent extends Event

File: src/main/java/net/dv8tion/jda/core/events/ResumedEvent.java
Patch:
@@ -19,9 +19,9 @@
 
 /**
  * <b><u>ResumedEvent</u></b><br>
- * Fired if JDA successfully re-established it's connection to the WebSocket.<br/>
- * All Objects are still in place and events are replayed.<br/>
- * <br/>
+ * Fired if JDA successfully re-established it's connection to the WebSocket.<br>
+ * All Objects are still in place and events are replayed.<br>
+ * <br>
  * Use: This marks the continuation of event flow stopped by the {@link net.dv8tion.jda.core.events.DisconnectEvent DisconnectEvent}.
  */
 public class ResumedEvent extends Event

File: src/main/java/net/dv8tion/jda/core/events/StatusChangeEvent.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * <b><u>StatusChangedEvent</u></b><br>
- * Fired if our {@link net.dv8tion.jda.core.JDA.Status Status} changed. (Example: SHUTTING_DOWN -> SHUTDOWN)<br>
+ * Fired if our {@link net.dv8tion.jda.core.JDA.Status Status} changed. (Example: SHUTTING_DOWN -&gt; SHUTDOWN)<br>
  * <br>
  * Use: Detect internal status changes. Possibly to log or forward on user's end.
  */

File: src/main/java/net/dv8tion/jda/core/events/message/MessageReceivedEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.core.events.Event;
 
 /**
- * <b><u>MessageReceivedEvent</u></b><br/>
- * Fired if a Message is sent in a {@link net.dv8tion.jda.core.entities.MessageChannel MessageChannel}.<br/>
- * <br/>
+ * <b><u>MessageReceivedEvent</u></b><br>
+ * Fired if a Message is sent in a {@link net.dv8tion.jda.core.entities.MessageChannel MessageChannel}.<br>
+ * <br>
  * Use: This event indicates that a Message is sent in either a private or guild channel. Providing a MessageChannel and Message.
  */
 public class MessageReceivedEvent extends Event

File: src/main/java/net/dv8tion/jda/core/events/message/guild/GuildMessageDeleteEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.core.entities.TextChannel;
 
 /**
- * <b><u>GuildMessageDeleteEvent</u></b><br/>
- * Fired if a Guild Message was deleted.<br/>
- * <br/>
+ * <b><u>GuildMessageDeleteEvent</u></b><br>
+ * Fired if a Guild Message was deleted.<br>
+ * <br>
  * Use: Retrieve affected TextChannel and the id of the deleted Message.
  */
 public class GuildMessageDeleteEvent extends GenericGuildMessageEvent

File: src/main/java/net/dv8tion/jda/core/events/message/guild/GuildMessageEmbedEvent.java
Patch:
@@ -22,9 +22,9 @@
 import java.util.List;
 
 /**
- * <b><u>GuildMessageEmbedEvent</u></b><br/>
- * Fired if a Guild Message contains one or more {@link net.dv8tion.jda.core.entities.MessageEmbed Embeds}.<br/>
- * <br/>
+ * <b><u>GuildMessageEmbedEvent</u></b><br>
+ * Fired if a Guild Message contains one or more {@link net.dv8tion.jda.core.entities.MessageEmbed Embeds}.<br>
+ * <br>
  * Use: Retrieve affected TextChannel, the id of the affected Message and a list of MessageEmbeds.
  */
 public class GuildMessageEmbedEvent extends GenericGuildMessageEvent

File: src/main/java/net/dv8tion/jda/core/events/message/guild/GuildMessageReceivedEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.core.entities.TextChannel;
 
 /**
- * <b><u>GuildMessageReceivedEvent</u></b><br/>
- * Fired if a Message is sent in a {@link net.dv8tion.jda.core.entities.TextChannel TextChannel}.<br/>
- * <br/>
+ * <b><u>GuildMessageReceivedEvent</u></b><br>
+ * Fired if a Message is sent in a {@link net.dv8tion.jda.core.entities.TextChannel TextChannel}.<br>
+ * <br>
  * Use: Retrieve affected TextChannel and Message.
  */
 public class GuildMessageReceivedEvent extends GenericGuildMessageEvent

File: src/main/java/net/dv8tion/jda/core/events/message/guild/GuildMessageUpdateEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.core.entities.TextChannel;
 
 /**
- * <b><u>GuildMessageReceivedEvent</u></b><br/>
- * Fired if a Message is edited in a {@link net.dv8tion.jda.core.entities.TextChannel TextChannel}.<br/>
- * <br/>
+ * <b><u>GuildMessageReceivedEvent</u></b><br>
+ * Fired if a Message is edited in a {@link net.dv8tion.jda.core.entities.TextChannel TextChannel}.<br>
+ * <br>
  * Use: Retrieve affected TextChannel and Message.
  */
 public class GuildMessageUpdateEvent extends GenericGuildMessageEvent

File: src/main/java/net/dv8tion/jda/core/events/message/priv/PrivateMessageDeleteEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.core.entities.PrivateChannel;
 
 /**
- * <b><u>PrivateMessageDeleteEvent</u></b><br/>
- * Fired if a Message is deleted in a {@link net.dv8tion.jda.core.entities.PrivateChannel PrivateChannel}.<br/>
- * <br/>
+ * <b><u>PrivateMessageDeleteEvent</u></b><br>
+ * Fired if a Message is deleted in a {@link net.dv8tion.jda.core.entities.PrivateChannel PrivateChannel}.<br>
+ * <br>
  * Use: Retrieve affected PrivateChannel and the ID of the deleted Message.
  */
 public class PrivateMessageDeleteEvent extends GenericPrivateMessageEvent

File: src/main/java/net/dv8tion/jda/core/events/message/priv/PrivateMessageEmbedEvent.java
Patch:
@@ -22,9 +22,9 @@
 import java.util.List;
 
 /**
- * <b><u>PrivateMessageEmbedEvent</u></b><br/>
- * Fired if a Message contains {@link net.dv8tion.jda.core.entities.MessageEmbed Embeds} in a {@link net.dv8tion.jda.core.entities.PrivateChannel PrivateChannel}.<br/>
- * <br/>
+ * <b><u>PrivateMessageEmbedEvent</u></b><br>
+ * Fired if a Message contains {@link net.dv8tion.jda.core.entities.MessageEmbed Embeds} in a {@link net.dv8tion.jda.core.entities.PrivateChannel PrivateChannel}.<br>
+ * <br>
  * Use: Retrieve affected PrivateChannel, the ID of the deleted Message and a list of MessageEmbeds.
  */
 public class PrivateMessageEmbedEvent extends GenericPrivateMessageEvent

File: src/main/java/net/dv8tion/jda/core/events/message/priv/PrivateMessageReceivedEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.core.entities.PrivateChannel;
 
 /**
- * <b><u>PrivateMessageReceivedEvent</u></b><br/>
- * Fired if a Message is sent in a {@link net.dv8tion.jda.core.entities.PrivateChannel PrivateChannel}.<br/>
- * <br/>
+ * <b><u>PrivateMessageReceivedEvent</u></b><br>
+ * Fired if a Message is sent in a {@link net.dv8tion.jda.core.entities.PrivateChannel PrivateChannel}.<br>
+ * <br>
  * Use: Retrieve affected PrivateChannel and Message.
  */
 public class PrivateMessageReceivedEvent extends GenericPrivateMessageEvent

File: src/main/java/net/dv8tion/jda/core/events/message/priv/PrivateMessageUpdateEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.core.entities.PrivateChannel;
 
 /**
- * <b><u>PrivateMessageUpdateEvent</u></b><br/>
- * Fired if a Message is edited in a {@link net.dv8tion.jda.core.entities.PrivateChannel PrivateChannel}.<br/>
- * <br/>
+ * <b><u>PrivateMessageUpdateEvent</u></b><br>
+ * Fired if a Message is edited in a {@link net.dv8tion.jda.core.entities.PrivateChannel PrivateChannel}.<br>
+ * <br>
  * Use: Retrieve affected PrivateChannel and edited Message.
  */
 public class PrivateMessageUpdateEvent extends GenericPrivateMessageEvent

File: src/main/java/net/dv8tion/jda/core/events/user/GenericUserEvent.java
Patch:
@@ -21,7 +21,7 @@
 
 /**
  * <b><u>GenericUserEvent</u></b><br>
- * Fired whenever a {@link net.dv8tion.jda.entities.User User} changes their presence. (like avatar/game)<br>
+ * Fired whenever a {@link net.dv8tion.jda.core.entities.User User} changes their presence. (like avatar/game)<br>
  * Every UserEvent is an instance of this event and can be casted. (no exceptions)<br>
  * <br>
  * Use: Detect any UserEvent. <i>(No real use for the JDA user)</i>

File: src/main/java/net/dv8tion/jda/core/events/user/UserAvatarUpdateEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.core.entities.User;
 
 /**
- * <b><u>UserAvatarUpdateEvent</u></b><br/>
- * Fired if the Avatar of a {@link net.dv8tion.jda.core.entities.User User} changes.<br/>
- * <br/>
+ * <b><u>UserAvatarUpdateEvent</u></b><br>
+ * Fired if the Avatar of a {@link net.dv8tion.jda.core.entities.User User} changes.<br>
+ * <br>
  * Use: Retrieve the User who's Avatar changed and their previous Avatar ID/URL.
  */
 public class UserAvatarUpdateEvent extends GenericUserEvent

File: src/main/java/net/dv8tion/jda/core/events/user/UserGameUpdateEvent.java
Patch:
@@ -21,9 +21,9 @@
 import net.dv8tion.jda.core.entities.User;
 
 /**
- * <b><u>UserGameUpdateEvent</u></b><br/>
- * Fired if the {@link net.dv8tion.jda.core.entities.Game Game} of a {@link net.dv8tion.jda.core.entities.User User} changes.<br/>
- * <br/>
+ * <b><u>UserGameUpdateEvent</u></b><br>
+ * Fired if the {@link net.dv8tion.jda.core.entities.Game Game} of a {@link net.dv8tion.jda.core.entities.User User} changes.<br>
+ * <br>
  * Use: Retrieve the User who's Game changed and their previous Game.
  */
 public class UserGameUpdateEvent extends GenericUserEvent

File: src/main/java/net/dv8tion/jda/core/events/user/UserNameUpdateEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.core.entities.User;
 
 /**
- * <b><u>UserNameUpdateEvent</u></b><br/>
- * Fired if the username of a {@link net.dv8tion.jda.core.entities.User User} changes. (Not Nickname)<br/>
- * <br/>
+ * <b><u>UserNameUpdateEvent</u></b><br>
+ * Fired if the username of a {@link net.dv8tion.jda.core.entities.User User} changes. (Not Nickname)<br>
+ * <br>
  * Use: Retrieve the User who's username changed and their previous username.
  */
 public class UserNameUpdateEvent extends GenericUserEvent

File: src/main/java/net/dv8tion/jda/core/events/user/UserOnlineStatusUpdateEvent.java
Patch:
@@ -21,9 +21,9 @@
 import net.dv8tion.jda.core.entities.User;
 
 /**
- * <b><u>UserOnlineStatusUpdateEvent</u></b><br/>
- * Fired if the {@link OnlineStatus OnlineStatus} of a {@link net.dv8tion.jda.core.entities.User User} changes.<br/>
- * <br/>
+ * <b><u>UserOnlineStatusUpdateEvent</u></b><br>
+ * Fired if the {@link OnlineStatus OnlineStatus} of a {@link net.dv8tion.jda.core.entities.User User} changes.<br>
+ * <br>
  * Use: Retrieve the User who's status changed and their previous status.
  */
 public class UserOnlineStatusUpdateEvent extends GenericUserEvent

File: src/main/java/net/dv8tion/jda/core/events/user/UserTypingEvent.java
Patch:
@@ -22,9 +22,9 @@
 import java.time.OffsetDateTime;
 
 /**
- * <b><u>UserTypingUpdateEvent</u></b><br/>
- * Fired if a {@link net.dv8tion.jda.core.entities.User User} starts typing. (Similar to the typing indicator in the Discord client)<br/>
- * <br/>
+ * <b><u>UserTypingUpdateEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.core.entities.User User} starts typing. (Similar to the typing indicator in the Discord client)<br>
+ * <br>
  * Use: Retrieve the User who started typing and when and in which MessageChannel they started typing.
  */
 public class UserTypingEvent extends GenericUserEvent

File: src/main/java/net/dv8tion/jda/requests/WebSocketClient.java
Patch:
@@ -556,7 +556,7 @@ protected void handleEvent(JSONObject raw)
         }
 
         // Needs special handling due to content of "d" being an array
-        if(type.equals("PRESENCE_REPLACE"))
+        if (type.equals("PRESENCES_REPLACE"))
         {
             JSONArray presences = raw.getJSONArray("d");
             LOG.trace(String.format("%s -> %s", type, presences.toString()));

File: src/main/java/net/dv8tion/jda/requests/WebSocketClient.java
Patch:
@@ -556,7 +556,7 @@ protected void handleEvent(JSONObject raw)
         }
 
         // Needs special handling due to content of "d" being an array
-        if(type.equals("PRESENCE_REPLACE"))
+        if(type.equals("PRESENCES_REPLACE"))
         {
             JSONArray presences = raw.getJSONArray("d");
             LOG.trace(String.format("%s -> %s", type, presences.toString()));

File: src/main/java/net/dv8tion/jda/core/entities/impl/MessageImpl.java
Patch:
@@ -63,7 +63,7 @@ public MessageImpl(String id, MessageChannel channel, MessageType type)
     {
         this.id = id;
         this.channel = channel;
-        this.api = (JDAImpl) channel.getJDA();
+        this.api = (channel != null) ? (JDAImpl) channel.getJDA() : null;
         this.type = type;
         this.isPrivate = channel instanceof PrivateChannel;
     }

File: src/main/java/net/dv8tion/jda/core/MessageHistory.java
Patch:
@@ -38,7 +38,8 @@ public class MessageHistory
     public MessageHistory(MessageChannel channel)
     {
         this.api = (JDAImpl) channel.getJDA();
-        if (channel instanceof TextChannel && !((TextChannel) channel).checkPermission(api.getSelfInfo(), Permission.MESSAGE_HISTORY))
+        if (channel instanceof TextChannel &&
+                !((TextChannel) channel).getGuild().getMember(api.getSelfInfo()).hasPermission(Permission.MESSAGE_HISTORY))
             throw new PermissionException(Permission.MESSAGE_HISTORY);
 
         this.channelId = channel.getId();

File: src/main/java/net/dv8tion/jda/core/entities/Member.java
Patch:
@@ -70,4 +70,7 @@ public interface Member extends IMentionable
 
     List<Permission> getPermissions();
     List<Permission> getPermissions(Channel channel);
+
+    boolean hasPermission(Permission... permissions);
+    boolean hasPermission(Channel channel, Permission... permission);
 }

File: src/main/java/net/dv8tion/jda/core/handle/MessageCreateHandler.java
Patch:
@@ -75,7 +75,7 @@ private String handleDefaultMessage(JSONObject content)
 
         if (!message.isPrivate())
         {
-            TextChannel channel = api.getTextChannelMap().get(message.getChannelId());
+            TextChannel channel = message.getTextChannel();
             if (GuildLock.get(api).isLocked(channel.getGuild().getId()))
             {
                 return channel.getGuild().getId();
@@ -90,7 +90,7 @@ private String handleDefaultMessage(JSONObject content)
             api.getEventManager().handle(
                     new PrivateMessageReceivedEvent(
                             api, responseNumber,
-                            message, api.getPrivateChannelMap().get(message.getChannelId())));
+                            message, message.getPrivateChannel()));
         }
         //Combo event
         api.getEventManager().handle(

File: src/main/java/net/dv8tion/jda/core/requests/Route.java
Patch:
@@ -91,7 +91,7 @@ public static class Messages
     {
         public static final Route GET_MESSAGES =    new Route(GET,      "channels/{channel_id}/messages",              "channel_id");
         public static final Route SEND_MESSAGE =    new Route(POST,     "channels/{channel_id}/messages",              "channel_id");
-        public static final Route MODIFY_MESSAGE =  new Route(PATCH,    "channels/{channel_id}/messages/{message_id}", "channel_id");
+        public static final Route EDIT_MESSAGE =  new Route(PATCH,    "channels/{channel_id}/messages/{message_id}", "channel_id");
         public static final Route DELETE_MESSAGE =  new Route(DELETE,   "channels/{channel_id}/messages/{message_id}", "channel_id");
         public static final Route GET_PINNED_MESSAGES = new Route(GET,  "channels/{channel_id}/pins",                  "channel_id");
         public static final Route ADD_PINNED_MESSAGE =  new Route(PUT,  "channels/{channel_id}/pins/{message_id}",     "channel_id");
@@ -233,7 +233,7 @@ public boolean equals(Object o)
             return false;
 
         Route oRoute = (Route) o;
-        return method.equals(oRoute.method) && route.equals(oRoute);
+        return method.equals(oRoute.method) && route.equals(oRoute.route);
     }
 
     @Override

File: src/main/java/net/dv8tion/jda/core/handle/EntityBuilder.java
Patch:
@@ -522,7 +522,6 @@ public PrivateChannel createPrivateChannel(JSONObject privatechat)
             // As such, make a fake user and fake private channel.
             user = (UserImpl) createUser(recipient);
             api.getFakeUserMap().put(user.getId(), user);
-            System.out.println("MADE A FAKE USER! " + user);
         }
 
         PrivateChannelImpl priv = new PrivateChannelImpl(privatechat.getString("id"), user);

File: src/main/java/net/dv8tion/jda/core/MessageHistory.java
Patch:
@@ -95,7 +95,7 @@ public List<Message> retrieve(int amount)
         }
         int toQueue;
         LinkedList<Message> out = new LinkedList<>();
-        EntityBuilder builder = new EntityBuilder(api);
+        EntityBuilder builder = EntityBuilder.get(api);
         while(amount > 0)
         {
             toQueue = Math.min(amount, 100);

File: src/main/java/net/dv8tion/jda/core/entities/Guild.java
Patch:
@@ -88,6 +88,8 @@ public interface Guild extends ISnowflake
      */
     boolean isMember(User user);
 
+    Member getMember(User user);
+
     Member getMemberById(String userId);
 
     List<Member> getMembersByName(String name, boolean ignoreCase);
@@ -96,7 +98,6 @@ public interface Guild extends ISnowflake
     List<Member> getMembersWithRoles(Role... roles);
     List<Member> getMembersWithRoles(Collection<Role> roles);
 
-    Member getMember(User user);
 
     List<Member> getMembers();
 

File: src/main/java/net/dv8tion/jda/core/entities/PrivateChannel.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * Represents the connection used for direct messaging.
  */
-public interface PrivateChannel extends MessageChannel
+public interface PrivateChannel extends MessageChannel, IFakeable
 {
     /**
      * The {@link net.dv8tion.jda.core.entities.User User} that this {@link net.dv8tion.jda.core.entities.PrivateChannel PrivateChannel} communicates with.

File: src/main/java/net/dv8tion/jda/core/handle/GuildCreateHandler.java
Patch:
@@ -32,7 +32,7 @@ protected String handleInternally(JSONObject content)
     {
         Guild g = api.getGuildById(content.getString("id"));
         Boolean wasAvail = (g == null || g.getName() == null) ? null : g.isAvailable();
-        new EntityBuilder(api).createGuildFirstPass(content, guild ->
+        EntityBuilder.get(api).createGuildFirstPass(content, guild ->
         {
             if (guild.isAvailable())
             {

File: src/main/java/net/dv8tion/jda/core/handle/GuildMembersChunkHandler.java
Patch:
@@ -55,7 +55,7 @@ protected String handleInternally(JSONObject content)
         if (currentTotal >= expectMemberCount)
         {
             JDAImpl.LOG.debug("Finished chunking for: " + guildId);
-            new EntityBuilder(api).createGuildSecondPass(guildId, memberChunks);
+            EntityBuilder.get(api).createGuildSecondPass(guildId, memberChunks);
             memberChunksCache.remove(guildId);
             expectedGuildMembers.remove(guildId);
         }

File: src/main/java/net/dv8tion/jda/core/handle/GuildSyncHandler.java
Patch:
@@ -41,7 +41,7 @@ protected String handleInternally(JSONObject content)
         GuildImpl guild = (GuildImpl) api.getGuildMap().get(guildId);
         JSONArray members = content.getJSONArray("members");
         JSONArray presences = content.getJSONArray("presences");
-        new EntityBuilder(api).handleGuildSync(guild, members, presences);
+        EntityBuilder.get(api).handleGuildSync(guild, members, presences);
 
         return null;
     }

File: src/main/java/net/dv8tion/jda/core/handle/SocketHandler.java
Patch:
@@ -22,7 +22,7 @@
 public abstract class SocketHandler
 {
     protected final JDAImpl api;
-    protected long responseTotal;
+    protected long responseNumber;
     protected JSONObject allContent;
 
     public SocketHandler(JDAImpl api)
@@ -34,7 +34,7 @@ public SocketHandler(JDAImpl api)
     public final void handle(long responseTotal, JSONObject o)
     {
         this.allContent = o;
-        this.responseTotal = responseTotal;
+        this.responseNumber = responseTotal;
         String guildId = handleInternally(o.getJSONObject("d"));
         if (guildId != null)
         {

File: src/main/java/net/dv8tion/jda/events/voice/VoiceJoinEvent.java
Patch:
@@ -31,7 +31,7 @@ public class VoiceJoinEvent extends GenericVoiceEvent
     public VoiceJoinEvent(JDA api, int responseNumber, VoiceStatus voiceStatus, VoiceChannel oldChannel)
     {
         super(api, responseNumber, voiceStatus);
-        this.channel = channel;
+        this.channel = oldChannel;
     }
 
     public VoiceChannel getChannel()

File: src/main/java/net/dv8tion/jda/core/OnlineStatus.java
Patch:
@@ -21,7 +21,7 @@
 public enum OnlineStatus
 {
     ONLINE("online"),
-    AWAY("idle"),
+    IDLE("idle"),
     OFFLINE("offline"),
     UNKNOWN("");
 

File: src/main/java/net/dv8tion/jda/core/entities/Member.java
Patch:
@@ -33,7 +33,7 @@ public interface Member extends IMentionable
 
     OffsetDateTime getJoinDate();
 
-    VoiceStatus getVoiceStatus();
+    VoiceState getVoiceState();
 
     /**
      * Returns the current nickname of this Member for the parent Guild.

File: src/main/java/net/dv8tion/jda/core/entities/impl/GuildImpl.java
Patch:
@@ -212,10 +212,10 @@ public JDA getJDA()
     }
 
     @Override
-    public List<VoiceStatus> getVoiceStatuses()
+    public List<VoiceState> getVoiceStates()
     {
         return Collections.unmodifiableList(
-                members.values().stream().<VoiceStatus>map(Member::getVoiceStatus).collect(Collectors.toList()));
+                members.values().stream().<VoiceState>map(Member::getVoiceState).collect(Collectors.toList()));
     }
 
     @Override

File: src/main/java/net/dv8tion/jda/audio/AudioConnection.java
Patch:
@@ -126,14 +126,14 @@ public void run()
 
     public void setSendingHandler(AudioSendHandler handler)
     {
-        setupSendThread();
         this.sendHandler = handler;
+        setupSendThread();
     }
 
     public void setReceivingHandler(AudioReceiveHandler handler)
     {
-        setupReceiveThread();
         this.receiveHandler = handler;
+        setupReceiveThread();
     }
 
     public void setQueueTimeout(long queueTimeout)

File: src/main/java/net/dv8tion/jda/entities/impl/EmoteImpl.java
Patch:
@@ -32,7 +32,7 @@ public EmoteImpl(String name, String id)
         this(name, id, null);
     }
 
-    public EmoteImpl(String id, String name, Guild guild)
+    public EmoteImpl(String name, String id, Guild guild)
     {
         this.id = id;
         this.name = name;

File: src/main/java/net/dv8tion/jda/JDA.java
Patch:
@@ -421,7 +421,7 @@ enum Status
      * Installs an auxiliary cable into your system.
      * 
      * @param port the port
-     * @throws UnsupportedOperationException
+     * @throws UnsupportedOperationException if JDA can't manipulate your hardware
      */
     void installAuxiliaryCable(int port) throws UnsupportedOperationException;
 }

File: src/main/java/net/dv8tion/jda/MessageBuilder.java
Patch:
@@ -125,14 +125,14 @@ public MessageBuilder appendString(String text, Formatting... format)
      * Example: <br>
      * If you placed the following code in an method handling a
      * {@link net.dv8tion.jda.events.message.MessageReceivedEvent MessageReceivedEvent}<br>
-     * <p>
+     *
      * <pre>{@code
      * User user = event.getAuthor();
      * MessageBuilder builder = new MessageBuilder();
      * builder.appendFormat("%U% is really cool!", user);
      * builder.build();
      * }</pre>
-     * <p>
+     *
      * It would build a message that mentions the author and says that he is really cool!. If the user's
      * name was "Bob", it would say:<br>
      * <pre>  "Bob is really cool!"</pre>

File: src/main/java/net/dv8tion/jda/entities/Emote.java
Patch:
@@ -57,7 +57,7 @@ public interface Emote
     String getImageUrl();
 
     /**
-     * Return a formatted usable version of this emote (<:name:id>)
+     * Return a formatted usable version of this emote (&lt;:name:id&gt;)
      *
      * @return A formatted version of this emote.
      */

File: src/main/java/net/dv8tion/jda/entities/TextChannel.java
Patch:
@@ -63,7 +63,7 @@ public interface TextChannel extends Channel, MessageChannel, Comparable<TextCha
     void deleteMessages(Collection<Message> messages);
 
     /**
-     * Bulk deletes a list of messages. <b>This is not the same as calling {@link net.dv8tion.jda.entities.MessageChannel#deleteMessageById(String) in a loop.</b> <br>
+     * Bulk deletes a list of messages. <b>This is not the same as calling {@link net.dv8tion.jda.entities.MessageChannel#deleteMessageById(String)} in a loop.</b> <br>
      * This is much more efficient, but it has a different ratelimit. You may call this once per second per Guild.
      * <p>
      * Must be at least 2 messages and not be more than 100 messages at a time.<br>

File: src/main/java/net/dv8tion/jda/events/ReconnectedEvent.java
Patch:
@@ -19,9 +19,9 @@
 
 /**
  * <b><u>ReconnectedEvent</u></b><br>
- * Fired if JDA successfully re-established it's connection to the WebSocket.<br/>
- * All Objects have been replaced when this is fired and events were likely missed in the downtime.<br/>
- * <br/>
+ * Fired if JDA successfully re-established it's connection to the WebSocket.<br>
+ * All Objects have been replaced when this is fired and events were likely missed in the downtime.<br>
+ * <br>
  * Use: This marks the continuation of event flow stopped by the {@link net.dv8tion.jda.events.DisconnectEvent DisconnectEvent}. User should replace any cached Objects (like User/Guild objects).
  */
 public class ReconnectedEvent extends Event

File: src/main/java/net/dv8tion/jda/events/ResumedEvent.java
Patch:
@@ -19,9 +19,9 @@
 
 /**
  * <b><u>ResumedEvent</u></b><br>
- * Fired if JDA successfully re-established it's connection to the WebSocket.<br/>
- * All Objects are still in place and events are replayed.<br/>
- * <br/>
+ * Fired if JDA successfully re-established it's connection to the WebSocket.<br>
+ * All Objects are still in place and events are replayed.<br>
+ * <br>
  * Use: This marks the continuation of event flow stopped by the {@link net.dv8tion.jda.events.DisconnectEvent DisconnectEvent}.
  */
 public class ResumedEvent extends Event

File: src/main/java/net/dv8tion/jda/events/StatusChangeEvent.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * <b><u>StatusChangedEvent</u></b><br>
- * Fired if our {@link net.dv8tion.jda.JDA.Status Status} changed. (Example: SHUTTING_DOWN -> SHUTDOWN)<br>
+ * Fired if our {@link net.dv8tion.jda.JDA.Status Status} changed. (Example: SHUTTING_DOWN -&gt; SHUTDOWN)<br>
  * <br>
  * Use: Detect internal status changes. Possibly to log or forward on user's end.
  */

File: src/main/java/net/dv8tion/jda/events/channel/priv/PrivateChannelCreateEvent.java
Patch:
@@ -21,9 +21,9 @@
 import net.dv8tion.jda.events.Event;
 
 /**
- * <b><u>PrivateChannelCreateEvent</u></b><br/>
- * Fired if a {@link net.dv8tion.jda.entities.PrivateChannel Private Channel} was created.<br/>
- * <br/>
+ * <b><u>PrivateChannelCreateEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.entities.PrivateChannel Private Channel} was created.<br>
+ * <br>
  * Use: Retrieve the freshly created private channel and it's {@link net.dv8tion.jda.entities.User User}.
  */
 public class PrivateChannelCreateEvent extends Event

File: src/main/java/net/dv8tion/jda/events/channel/priv/PrivateChannelDeleteEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.events.Event;
 
 /**
- * <b><u>PrivateChannelDeleteEvent</u></b><br/>
- * Fired if a {@link net.dv8tion.jda.entities.PrivateChannel Private Channel} was deleted.<br/>
- * <br/>
+ * <b><u>PrivateChannelDeleteEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.entities.PrivateChannel Private Channel} was deleted.<br>
+ * <br>
  * Use: Retrieve the issuing {@link net.dv8tion.jda.entities.User User}.
  */
 public class PrivateChannelDeleteEvent extends Event

File: src/main/java/net/dv8tion/jda/events/channel/voice/VoiceChannelCreateEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.entities.VoiceChannel;
 
 /**
- * <b><u>VoiceChannelCreateEvent</u></b><br/>
- * Fired if a {@link VoiceChannel VoiceChannel} is created.<br/>
- * <br/>
+ * <b><u>VoiceChannelCreateEvent</u></b><br>
+ * Fired if a {@link VoiceChannel VoiceChannel} is created.<br>
+ * <br>
  * Use: Get affected VoiceChannel.
  */
 public class VoiceChannelCreateEvent extends GenericVoiceChannelEvent

File: src/main/java/net/dv8tion/jda/events/channel/voice/VoiceChannelDeleteEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.entities.VoiceChannel;
 
 /**
- * <b><u>VoiceChannelDeleteEvent</u></b><br/>
- * Fired if a {@link VoiceChannel VoiceChannel} is deleted.<br/>
- * <br/>
+ * <b><u>VoiceChannelDeleteEvent</u></b><br>
+ * Fired if a {@link VoiceChannel VoiceChannel} is deleted.<br>
+ * <br>
  * Use: Get affected VoiceChannel(likely to be null) or affected Guild.
  */
 public class VoiceChannelDeleteEvent extends GenericVoiceChannelEvent

File: src/main/java/net/dv8tion/jda/events/channel/voice/VoiceChannelUpdateBitrateEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.entities.VoiceChannel;
 
 /**
- * <b><u>VoiceChannelUpdateBitrateEvent</u></b><br/>
- * Fired if a {@link VoiceChannel VoiceChannel}'s bitrate changes.<br/>
- * <br/>
+ * <b><u>VoiceChannelUpdateBitrateEvent</u></b><br>
+ * Fired if a {@link VoiceChannel VoiceChannel}'s bitrate changes.<br>
+ * <br>
  * Use: Get affected VoiceChannel, affected Guild and previous bitrate.
  */
 public class VoiceChannelUpdateBitrateEvent extends GenericVoiceChannelUpdateEvent

File: src/main/java/net/dv8tion/jda/events/channel/voice/VoiceChannelUpdateNameEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.entities.VoiceChannel;
 
 /**
- * <b><u>VoiceChannelUpdateNameEvent</u></b><br/>
- * Fired if a {@link VoiceChannel VoiceChannel}'s name changes.<br/>
- * <br/>
+ * <b><u>VoiceChannelUpdateNameEvent</u></b><br>
+ * Fired if a {@link VoiceChannel VoiceChannel}'s name changes.<br>
+ * <br>
  * Use: Get affected VoiceChannel, affected Guild and previous name.
  */
 public class VoiceChannelUpdateNameEvent extends GenericVoiceChannelUpdateEvent

File: src/main/java/net/dv8tion/jda/events/channel/voice/VoiceChannelUpdatePermissionsEvent.java
Patch:
@@ -23,9 +23,9 @@
 import java.util.List;
 
 /**
- * <b><u>VoiceChannelUpdatePermissionsEvent</u></b><br/>
- * Fired if a {@link VoiceChannel VoiceChannel}'s permission overrides change.<br/>
- * <br/>
+ * <b><u>VoiceChannelUpdatePermissionsEvent</u></b><br>
+ * Fired if a {@link VoiceChannel VoiceChannel}'s permission overrides change.<br>
+ * <br>
  * Use: Get affected VoiceChannel, affected Guild and affected {@link net.dv8tion.jda.entities.Role Roles}/{@link net.dv8tion.jda.entities.User Users}.
  */
 public class VoiceChannelUpdatePermissionsEvent extends GenericVoiceChannelUpdateEvent

File: src/main/java/net/dv8tion/jda/events/channel/voice/VoiceChannelUpdatePositionEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.entities.VoiceChannel;
 
 /**
- * <b><u>VoiceChannelUpdatePositionEvent</u></b><br/>
- * Fired if a {@link VoiceChannel VoiceChannel}'s position changes.<br/>
- * <br/>
+ * <b><u>VoiceChannelUpdatePositionEvent</u></b><br>
+ * Fired if a {@link VoiceChannel VoiceChannel}'s position changes.<br>
+ * <br>
  * Use: Get affected VoiceChannel, affected Guild and previous position.
  */
 public class VoiceChannelUpdatePositionEvent extends GenericVoiceChannelUpdateEvent

File: src/main/java/net/dv8tion/jda/events/channel/voice/VoiceChannelUpdateUserLimitEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.entities.VoiceChannel;
 
 /**
- * <b><u>VoiceChannelUpdateUserLimitEvent</u></b><br/>
- * Fired if a {@link VoiceChannel VoiceChannel}'s user limit changes.<br/>
- * <br/>
+ * <b><u>VoiceChannelUpdateUserLimitEvent</u></b><br>
+ * Fired if a {@link VoiceChannel VoiceChannel}'s user limit changes.<br>
+ * <br>
  * Use: Get affected VoiceChannel, affected Guild and previous user limit.
  */
 public class VoiceChannelUpdateUserLimitEvent extends GenericVoiceChannelUpdateEvent

File: src/main/java/net/dv8tion/jda/events/guild/GuildAvailableEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.entities.Guild;
 
 /**
- * <b><u>GuildAvailableEvent</u></b><br/>
- * Fired if a {@link net.dv8tion.jda.entities.Guild Guild} becomes available.<br/>
- * <br/>
+ * <b><u>GuildAvailableEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.entities.Guild Guild} becomes available.<br>
+ * <br>
  * Use: This indicates that a Guild will now start sending events and can be interacted with.
  */
 public class GuildAvailableEvent extends GenericGuildEvent

File: src/main/java/net/dv8tion/jda/events/guild/GuildJoinEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.entities.Guild;
 
 /**
- * <b><u>GuildJoinEvent</u></b><br/>
- * Fired if a you join a {@link net.dv8tion.jda.entities.Guild Guild}.<br/>
- * <br/>
+ * <b><u>GuildJoinEvent</u></b><br>
+ * Fired if a you join a {@link net.dv8tion.jda.entities.Guild Guild}.<br>
+ * <br>
  * Warning: Discord already triggered a mass amount of these events due to a downtime. Be careful!
  */
 public class GuildJoinEvent extends GenericGuildEvent

File: src/main/java/net/dv8tion/jda/events/guild/GuildLeaveEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.entities.Guild;
 
 /**
- * <b><u>GuildLeaveEvent</u></b><br/>
- * Fired if a you leave a {@link net.dv8tion.jda.entities.Guild Guild}.<br/>
- * <br/>
+ * <b><u>GuildLeaveEvent</u></b><br>
+ * Fired if a you leave a {@link net.dv8tion.jda.entities.Guild Guild}.<br>
+ * <br>
  * Use: Detect when you leave a Guild.
  */
 public class GuildLeaveEvent extends GenericGuildEvent

File: src/main/java/net/dv8tion/jda/events/guild/GuildUpdateEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.entities.Guild;
 
 /**
- * <b><u>GuildUpdateEvent</u></b><br/>
- * Fired whenever a {@link net.dv8tion.jda.entities.Guild Guild} updates.<br/>
- * <br/>
+ * <b><u>GuildUpdateEvent</u></b><br>
+ * Fired whenever a {@link net.dv8tion.jda.entities.Guild Guild} updates.<br>
+ * <br>
  * Use: Detect what Guild updated.
  */
 public class GuildUpdateEvent extends GenericGuildEvent

File: src/main/java/net/dv8tion/jda/events/guild/UnavailableGuildJoinedEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.events.Event;
 
 /**
- * <b><u>UnavailableGuildJoinedEvent</u></b><br/>
- * Fired if you joined a {@link net.dv8tion.jda.entities.Guild Guild} that is not yet available.<br/>
- * <br/>
+ * <b><u>UnavailableGuildJoinedEvent</u></b><br>
+ * Fired if you joined a {@link net.dv8tion.jda.entities.Guild Guild} that is not yet available.<br>
+ * <br>
  * Use: Retrieve id of unavailable Guild.
  */
 public class UnavailableGuildJoinedEvent extends Event

File: src/main/java/net/dv8tion/jda/events/guild/member/GuildMemberBanEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.entities.User;
 
 /**
- * <b><u>GuildMemberBanEvent</u></b><br/>
- * Fired if a {@link net.dv8tion.jda.entities.User User} is banned from a {@link net.dv8tion.jda.entities.Guild Guild}.<br/>
- * <br/>
+ * <b><u>GuildMemberBanEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.entities.User User} is banned from a {@link net.dv8tion.jda.entities.Guild Guild}.<br>
+ * <br>
  * Use: Retrieve user who was banned (if available) and triggering guild.
  */
 public class GuildMemberBanEvent extends GuildMemberLeaveEvent

File: src/main/java/net/dv8tion/jda/events/guild/member/GuildMemberJoinEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.entities.User;
 
 /**
- * <b><u>GuildMemberJoinEvent</u></b><br/>
- * Fired if a {@link net.dv8tion.jda.entities.User User} joins a {@link net.dv8tion.jda.entities.Guild Guild}.<br/>
- * <br/>
+ * <b><u>GuildMemberJoinEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.entities.User User} joins a {@link net.dv8tion.jda.entities.Guild Guild}.<br>
+ * <br>
  * Use: Retrieve user who joined (if available) and affected guild.
  */
 public class GuildMemberJoinEvent extends GenericGuildMemberEvent

File: src/main/java/net/dv8tion/jda/events/guild/member/GuildMemberLeaveEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.entities.User;
 
 /**
- * <b><u>GuildMemberLeaveEvent</u></b><br/>
- * Fired if a {@link net.dv8tion.jda.entities.User User} leaves a {@link net.dv8tion.jda.entities.Guild Guild}.<br/>
- * <br/>
+ * <b><u>GuildMemberLeaveEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.entities.User User} leaves a {@link net.dv8tion.jda.entities.Guild Guild}.<br>
+ * <br>
  * Use: Retrieve user who left (if available) and triggering guild.
  */
 public class GuildMemberLeaveEvent extends GenericGuildMemberEvent

File: src/main/java/net/dv8tion/jda/events/guild/member/GuildMemberNickChangeEvent.java
Patch:
@@ -21,9 +21,9 @@
 import net.dv8tion.jda.entities.User;
 
 /**
- * <b><u>GuildMemberNickChangeEvent</u></b><br/>
- * Fired if a {@link net.dv8tion.jda.entities.User User} updates their {@link net.dv8tion.jda.entities.Guild Guild} nickname.<br/>
- * <br/>
+ * <b><u>GuildMemberNickChangeEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.entities.User User} updates their {@link net.dv8tion.jda.entities.Guild Guild} nickname.<br>
+ * <br>
  * Use: Retrieve user who changed their nickname, triggering guild, the old nick and the new nick.
  */
 public class GuildMemberNickChangeEvent extends GenericGuildMemberEvent

File: src/main/java/net/dv8tion/jda/events/guild/member/GuildMemberRoleAddEvent.java
Patch:
@@ -25,9 +25,9 @@
 import java.util.List;
 
 /**
- * <b><u>GuildMemberRoleAddEvent</u></b><br/>
- * Fired if one or more {@link net.dv8tion.jda.entities.Role Roles} are assigned to a {@link net.dv8tion.jda.entities.User User}.<br/>
- * <br/>
+ * <b><u>GuildMemberRoleAddEvent</u></b><br>
+ * Fired if one or more {@link net.dv8tion.jda.entities.Role Roles} are assigned to a {@link net.dv8tion.jda.entities.User User}.<br>
+ * <br>
  * Use: Retrieve affected user and guild. Provides a list of added roles.
  */
 public class GuildMemberRoleAddEvent extends GenericGuildMemberEvent

File: src/main/java/net/dv8tion/jda/events/guild/member/GuildMemberRoleRemoveEvent.java
Patch:
@@ -25,9 +25,9 @@
 import java.util.List;
 
 /**
- * <b><u>GuildMemberRoleRemoveEvent</u></b><br/>
- * Fired if one or more {@link net.dv8tion.jda.entities.Role Roles} are removed from a {@link net.dv8tion.jda.entities.User User}.<br/>
- * <br/>
+ * <b><u>GuildMemberRoleRemoveEvent</u></b><br>
+ * Fired if one or more {@link net.dv8tion.jda.entities.Role Roles} are removed from a {@link net.dv8tion.jda.entities.User User}.<br>
+ * <br>
  * Use: Retrieve affected user and guild. Provides a list of removed roles.
  */
 public class GuildMemberRoleRemoveEvent extends GenericGuildMemberEvent

File: src/main/java/net/dv8tion/jda/events/guild/member/GuildMemberUnbanEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.entities.User;
 
 /**
- * <b><u>GuildMemberBanEvent</u></b><br/>
- * Fired if a {@link net.dv8tion.jda.entities.User User} is unbanned from a {@link net.dv8tion.jda.entities.Guild Guild}.<br/>
- * <br/>
+ * <b><u>GuildMemberBanEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.entities.User User} is unbanned from a {@link net.dv8tion.jda.entities.Guild Guild}.<br>
+ * <br>
  * Use: Retrieve user who was unbanned (if available) and the guild which they were unbanned from.
  */
 public class GuildMemberUnbanEvent extends GenericGuildMemberEvent

File: src/main/java/net/dv8tion/jda/events/guild/role/GuildRoleCreateEvent.java
Patch:
@@ -22,9 +22,9 @@
 import net.dv8tion.jda.events.guild.GenericGuildEvent;
 
 /**
- * <b><u>GuildRoleCreateEvent</u></b><br/>
- * Fired if a {@link net.dv8tion.jda.entities.Role Role} is created.<br/>
- * <br/>
+ * <b><u>GuildRoleCreateEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.entities.Role Role} is created.<br>
+ * <br>
  * Use: Retrieve created Role and it's Guild.
  */
 public class GuildRoleCreateEvent extends GenericGuildEvent

File: src/main/java/net/dv8tion/jda/events/guild/role/GuildRoleDeleteEvent.java
Patch:
@@ -22,9 +22,9 @@
 import net.dv8tion.jda.events.guild.GenericGuildEvent;
 
 /**
- * <b><u>GuildRoleDeleteEvent</u></b><br/>
- * Fired if a {@link net.dv8tion.jda.entities.Role Role} is deleted.<br/>
- * <br/>
+ * <b><u>GuildRoleDeleteEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.entities.Role Role} is deleted.<br>
+ * <br>
  * Use: Retrieve deleted Role and it's Guild.
  */
 public class GuildRoleDeleteEvent extends GenericGuildEvent

File: src/main/java/net/dv8tion/jda/events/guild/role/GuildRoleUpdateColorEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.entities.Role;
 
 /**
- * <b><u>GuildRoleUpdateColorEvent</u></b><br/>
- * Fired if a {@link net.dv8tion.jda.entities.Role Role}'s color changes.<br/>
- * <br/>
+ * <b><u>GuildRoleUpdateColorEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.entities.Role Role}'s color changes.<br>
+ * <br>
  * Use: Retrieve affected Role and Guild.
  */
 public class GuildRoleUpdateColorEvent extends GenericGuildRoleUpdateEvent

File: src/main/java/net/dv8tion/jda/events/guild/role/GuildRoleUpdateEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.events.Event;
 
 /**
- * <b><u>GuildRoleUpdateEvent</u></b><br/>
- * Fired whenever a {@link net.dv8tion.jda.entities.Role Role} is updated.<br/>
- * <br/>
+ * <b><u>GuildRoleUpdateEvent</u></b><br>
+ * Fired whenever a {@link net.dv8tion.jda.entities.Role Role} is updated.<br>
+ * <br>
  * Use: Retrieve affected Role. <i>(No real use for JDA user)</i>
  */
 public class GuildRoleUpdateEvent extends Event

File: src/main/java/net/dv8tion/jda/events/guild/role/GuildRoleUpdateGroupedEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.entities.Role;
 
 /**
- * <b><u>GuildRoleUpdateGroupedEvent</u></b><br/>
- * Fired if a {@link net.dv8tion.jda.entities.Role Role}'s grouped property changes.<br/>
- * <br/>
+ * <b><u>GuildRoleUpdateGroupedEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.entities.Role Role}'s grouped property changes.<br>
+ * <br>
  * Use: Retrieve affected Role.
  */
 public class GuildRoleUpdateGroupedEvent extends GenericGuildRoleUpdateEvent

File: src/main/java/net/dv8tion/jda/events/guild/role/GuildRoleUpdateNameEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.entities.Role;
 
 /**
- * <b><u>GuildRoleUpdateNameEvent</u></b><br/>
- * Fired if a {@link net.dv8tion.jda.entities.Role Role}'s name changes.<br/>
- * <br/>
+ * <b><u>GuildRoleUpdateNameEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.entities.Role Role}'s name changes.<br>
+ * <br>
  * Use: Retrieve affected Role.
  */
 public class GuildRoleUpdateNameEvent extends GenericGuildRoleUpdateEvent

File: src/main/java/net/dv8tion/jda/events/guild/role/GuildRoleUpdatePermissionEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.entities.Role;
 
 /**
- * <b><u>GuildRoleUpdatePermissionEvent</u></b><br/>
- * Fired if a {@link net.dv8tion.jda.entities.Role Role}'s permissions change.<br/>
- * <br/>
+ * <b><u>GuildRoleUpdatePermissionEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.entities.Role Role}'s permissions change.<br>
+ * <br>
  * Use: Retrieve affected Role.
  */
 public class GuildRoleUpdatePermissionEvent extends GenericGuildRoleUpdateEvent

File: src/main/java/net/dv8tion/jda/events/guild/role/GuildRoleUpdatePositionEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.entities.Role;
 
 /**
- * <b><u>GuildRoleUpdatePositionEvent</u></b><br/>
- * Fired if a {@link net.dv8tion.jda.entities.Role Role}'s position changes.<br/>
- * <br/>
+ * <b><u>GuildRoleUpdatePositionEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.entities.Role Role}'s position changes.<br>
+ * <br>
  * Use: Retrieve affected Role.
  */
 public class GuildRoleUpdatePositionEvent extends GenericGuildRoleUpdateEvent

File: src/main/java/net/dv8tion/jda/events/message/MessageBulkDeleteEvent.java
Patch:
@@ -23,9 +23,9 @@
 import java.util.List;
 
 /**
- * <b><u>MessageBulkDeleteEvent</u></b><br/>
- * Fired if a bulk deletion is executed in a {@link net.dv8tion.jda.entities.TextChannel TextChannel}.<br/>
- * <br/>
+ * <b><u>MessageBulkDeleteEvent</u></b><br>
+ * Fired if a bulk deletion is executed in a {@link net.dv8tion.jda.entities.TextChannel TextChannel}.<br>
+ * <br>
  * Use: This event indicates that a large chunk of Messages is deleted in a TextChannel. Providing a list of Message IDs and the specific TextChannel.
  */
 public class MessageBulkDeleteEvent extends Event

File: src/main/java/net/dv8tion/jda/events/message/MessageDeleteEvent.java
Patch:
@@ -23,9 +23,9 @@
 import net.dv8tion.jda.events.Event;
 
 /**
- * <b><u>MessageDeleteEvent</u></b><br/>
- * Fired if a Message was deleted in a {@link net.dv8tion.jda.entities.MessageChannel MessageChannel}.<br/>
- * <br/>
+ * <b><u>MessageDeleteEvent</u></b><br>
+ * Fired if a Message was deleted in a {@link net.dv8tion.jda.entities.MessageChannel MessageChannel}.<br>
+ * <br>
  * Use: Detect when a Message is deleted. No matter if private or guild.
  */
 public class MessageDeleteEvent extends Event

File: src/main/java/net/dv8tion/jda/events/message/MessageEmbedEvent.java
Patch:
@@ -22,9 +22,9 @@
 import java.util.List;
 
 /**
- * <b><u>MessageEmbedEvent</u></b><br/>
- * Fired if a Message contains an {@link net.dv8tion.jda.entities.MessageEmbed Embed} in a {@link net.dv8tion.jda.entities.MessageChannel MessageChannel}.<br/>
- * <br/>
+ * <b><u>MessageEmbedEvent</u></b><br>
+ * Fired if a Message contains an {@link net.dv8tion.jda.entities.MessageEmbed Embed} in a {@link net.dv8tion.jda.entities.MessageChannel MessageChannel}.<br>
+ * <br>
  * Use: Grab MessageEmbeds from any message. No matter if private or guild.
  */
 public class MessageEmbedEvent extends Event

File: src/main/java/net/dv8tion/jda/events/message/MessageReceivedEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.events.Event;
 
 /**
- * <b><u>MessageReceivedEvent</u></b><br/>
- * Fired if a Message is sent in a {@link net.dv8tion.jda.entities.MessageChannel MessageChannel}.<br/>
- * <br/>
+ * <b><u>MessageReceivedEvent</u></b><br>
+ * Fired if a Message is sent in a {@link net.dv8tion.jda.entities.MessageChannel MessageChannel}.<br>
+ * <br>
  * Use: This event indicates that a Message is sent in either a private or guild channel. Providing a MessageChannel and Message.
  */
 public class MessageReceivedEvent extends Event

File: src/main/java/net/dv8tion/jda/events/message/MessageUpdateEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.events.Event;
 
 /**
- * <b><u>MessageUpdateEvent</u></b><br/>
- * Fired if a Message is edited in a {@link net.dv8tion.jda.entities.MessageChannel MessageChannel}.<br/>
- * <br/>
+ * <b><u>MessageUpdateEvent</u></b><br>
+ * Fired if a Message is edited in a {@link net.dv8tion.jda.entities.MessageChannel MessageChannel}.<br>
+ * <br>
  * Use: This event indicates that a Message is edited in either a private or guild channel. Providing a MessageChannel and Message.
  */
 public class MessageUpdateEvent extends Event

File: src/main/java/net/dv8tion/jda/events/message/guild/GuildMessageDeleteEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.entities.TextChannel;
 
 /**
- * <b><u>GuildMessageDeleteEvent</u></b><br/>
- * Fired if a Guild Message was deleted.<br/>
- * <br/>
+ * <b><u>GuildMessageDeleteEvent</u></b><br>
+ * Fired if a Guild Message was deleted.<br>
+ * <br>
  * Use: Retrieve affected TextChannel and the id of the deleted Message.
  */
 public class GuildMessageDeleteEvent extends GenericGuildMessageEvent

File: src/main/java/net/dv8tion/jda/events/message/guild/GuildMessageEmbedEvent.java
Patch:
@@ -22,9 +22,9 @@
 import java.util.List;
 
 /**
- * <b><u>GuildMessageEmbedEvent</u></b><br/>
- * Fired if a Guild Message contains one or more {@link net.dv8tion.jda.entities.MessageEmbed Embeds}.<br/>
- * <br/>
+ * <b><u>GuildMessageEmbedEvent</u></b><br>
+ * Fired if a Guild Message contains one or more {@link net.dv8tion.jda.entities.MessageEmbed Embeds}.<br>
+ * <br>
  * Use: Retrieve affected TextChannel, the id of the affected Message and a list of MessageEmbeds.
  */
 public class GuildMessageEmbedEvent extends GenericGuildMessageEvent

File: src/main/java/net/dv8tion/jda/events/message/guild/GuildMessageReceivedEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.entities.TextChannel;
 
 /**
- * <b><u>GuildMessageReceivedEvent</u></b><br/>
- * Fired if a Message is sent in a {@link net.dv8tion.jda.entities.TextChannel TextChannel}.<br/>
- * <br/>
+ * <b><u>GuildMessageReceivedEvent</u></b><br>
+ * Fired if a Message is sent in a {@link net.dv8tion.jda.entities.TextChannel TextChannel}.<br>
+ * <br>
  * Use: Retrieve affected TextChannel and Message.
  */
 public class GuildMessageReceivedEvent extends GenericGuildMessageEvent

File: src/main/java/net/dv8tion/jda/events/message/guild/GuildMessageUpdateEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.entities.TextChannel;
 
 /**
- * <b><u>GuildMessageReceivedEvent</u></b><br/>
- * Fired if a Message is edited in a {@link net.dv8tion.jda.entities.TextChannel TextChannel}.<br/>
- * <br/>
+ * <b><u>GuildMessageReceivedEvent</u></b><br>
+ * Fired if a Message is edited in a {@link net.dv8tion.jda.entities.TextChannel TextChannel}.<br>
+ * <br>
  * Use: Retrieve affected TextChannel and Message.
  */
 public class GuildMessageUpdateEvent extends GenericGuildMessageEvent

File: src/main/java/net/dv8tion/jda/events/message/priv/PrivateMessageDeleteEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.entities.PrivateChannel;
 
 /**
- * <b><u>PrivateMessageDeleteEvent</u></b><br/>
- * Fired if a Message is deleted in a {@link net.dv8tion.jda.entities.PrivateChannel PrivateChannel}.<br/>
- * <br/>
+ * <b><u>PrivateMessageDeleteEvent</u></b><br>
+ * Fired if a Message is deleted in a {@link net.dv8tion.jda.entities.PrivateChannel PrivateChannel}.<br>
+ * <br>
  * Use: Retrieve affected PrivateChannel and the ID of the deleted Message.
  */
 public class PrivateMessageDeleteEvent extends GenericPrivateMessageEvent

File: src/main/java/net/dv8tion/jda/events/message/priv/PrivateMessageEmbedEvent.java
Patch:
@@ -22,9 +22,9 @@
 import java.util.List;
 
 /**
- * <b><u>PrivateMessageEmbedEvent</u></b><br/>
- * Fired if a Message contains {@link net.dv8tion.jda.entities.MessageEmbed Embeds} in a {@link net.dv8tion.jda.entities.PrivateChannel PrivateChannel}.<br/>
- * <br/>
+ * <b><u>PrivateMessageEmbedEvent</u></b><br>
+ * Fired if a Message contains {@link net.dv8tion.jda.entities.MessageEmbed Embeds} in a {@link net.dv8tion.jda.entities.PrivateChannel PrivateChannel}.<br>
+ * <br>
  * Use: Retrieve affected PrivateChannel, the ID of the deleted Message and a list of MessageEmbeds.
  */
 public class PrivateMessageEmbedEvent extends GenericPrivateMessageEvent

File: src/main/java/net/dv8tion/jda/events/message/priv/PrivateMessageReceivedEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.entities.PrivateChannel;
 
 /**
- * <b><u>PrivateMessageReceivedEvent</u></b><br/>
- * Fired if a Message is sent in a {@link net.dv8tion.jda.entities.PrivateChannel PrivateChannel}.<br/>
- * <br/>
+ * <b><u>PrivateMessageReceivedEvent</u></b><br>
+ * Fired if a Message is sent in a {@link net.dv8tion.jda.entities.PrivateChannel PrivateChannel}.<br>
+ * <br>
  * Use: Retrieve affected PrivateChannel and Message.
  */
 public class PrivateMessageReceivedEvent extends GenericPrivateMessageEvent

File: src/main/java/net/dv8tion/jda/events/message/priv/PrivateMessageUpdateEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.entities.PrivateChannel;
 
 /**
- * <b><u>PrivateMessageUpdateEvent</u></b><br/>
- * Fired if a Message is edited in a {@link net.dv8tion.jda.entities.PrivateChannel PrivateChannel}.<br/>
- * <br/>
+ * <b><u>PrivateMessageUpdateEvent</u></b><br>
+ * Fired if a Message is edited in a {@link net.dv8tion.jda.entities.PrivateChannel PrivateChannel}.<br>
+ * <br>
  * Use: Retrieve affected PrivateChannel and edited Message.
  */
 public class PrivateMessageUpdateEvent extends GenericPrivateMessageEvent

File: src/main/java/net/dv8tion/jda/events/user/UserAvatarUpdateEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.entities.User;
 
 /**
- * <b><u>UserAvatarUpdateEvent</u></b><br/>
- * Fired if the Avatar of a {@link net.dv8tion.jda.entities.User User} changes.<br/>
- * <br/>
+ * <b><u>UserAvatarUpdateEvent</u></b><br>
+ * Fired if the Avatar of a {@link net.dv8tion.jda.entities.User User} changes.<br>
+ * <br>
  * Use: Retrieve the User who's Avatar changed and their previous Avatar ID/URL.
  */
 public class UserAvatarUpdateEvent extends GenericUserEvent

File: src/main/java/net/dv8tion/jda/events/user/UserGameUpdateEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.entities.User;
 
 /**
- * <b><u>UserGameUpdateEvent</u></b><br/>
- * Fired if the {@link net.dv8tion.jda.entities.Game Game} of a {@link net.dv8tion.jda.entities.User User} changes.<br/>
- * <br/>
+ * <b><u>UserGameUpdateEvent</u></b><br>
+ * Fired if the {@link net.dv8tion.jda.entities.Game Game} of a {@link net.dv8tion.jda.entities.User User} changes.<br>
+ * <br>
  * Use: Retrieve the User who's Game changed and their previous Game.
  */
 public class UserGameUpdateEvent extends GenericUserEvent

File: src/main/java/net/dv8tion/jda/events/user/UserNameUpdateEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.entities.User;
 
 /**
- * <b><u>UserNameUpdateEvent</u></b><br/>
- * Fired if the username of a {@link net.dv8tion.jda.entities.User User} changes. (Not Nickname)<br/>
- * <br/>
+ * <b><u>UserNameUpdateEvent</u></b><br>
+ * Fired if the username of a {@link net.dv8tion.jda.entities.User User} changes. (Not Nickname)<br>
+ * <br>
  * Use: Retrieve the User who's username changed and their previous username.
  */
 public class UserNameUpdateEvent extends GenericUserEvent

File: src/main/java/net/dv8tion/jda/events/user/UserOnlineStatusUpdateEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.entities.User;
 
 /**
- * <b><u>UserOnlineStatusUpdateEvent</u></b><br/>
- * Fired if the {@link OnlineStatus OnlineStatus} of a {@link net.dv8tion.jda.entities.User User} changes.<br/>
- * <br/>
+ * <b><u>UserOnlineStatusUpdateEvent</u></b><br>
+ * Fired if the {@link OnlineStatus OnlineStatus} of a {@link net.dv8tion.jda.entities.User User} changes.<br>
+ * <br>
  * Use: Retrieve the User who's status changed and their previous status.
  */
 public class UserOnlineStatusUpdateEvent extends GenericUserEvent

File: src/main/java/net/dv8tion/jda/events/user/UserTypingEvent.java
Patch:
@@ -22,9 +22,9 @@
 import java.time.OffsetDateTime;
 
 /**
- * <b><u>UserTypingUpdateEvent</u></b><br/>
- * Fired if a {@link net.dv8tion.jda.entities.User User} starts typing. (Similar to the typing indicator in the Discord client)<br/>
- * <br/>
+ * <b><u>UserTypingUpdateEvent</u></b><br>
+ * Fired if a {@link net.dv8tion.jda.entities.User User} starts typing. (Similar to the typing indicator in the Discord client)<br>
+ * <br>
  * Use: Retrieve the User who started typing and when and in which MessageChannel they started typing.
  */
 public class UserTypingEvent extends GenericUserEvent

File: src/main/java/net/dv8tion/jda/events/voice/VoiceDeafEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.entities.VoiceStatus;
 
 /**
- * <b><u>VoiceDeafEvent</u></b><br/>
- * Fired if we are (un-)deafened. <br/>
- * This can indicate both deafen and un-deafen and can be caused by both us or the server.<br/>
+ * <b><u>VoiceDeafEvent</u></b><br>
+ * Fired if we are (un-)deafened. <br>
+ * This can indicate both deafen and un-deafen and can be caused by both us or the server.<br>
  * {@link net.dv8tion.jda.events.voice.VoiceSelfDeafEvent} and {@link net.dv8tion.jda.events.voice.VoiceServerDeafEvent} are specifications of this event.
  */
 public class VoiceDeafEvent extends GenericVoiceEvent

File: src/main/java/net/dv8tion/jda/events/voice/VoiceJoinEvent.java
Patch:
@@ -20,8 +20,8 @@
 import net.dv8tion.jda.entities.VoiceStatus;
 
 /**
- * <b><u>VoiceJoinEvent</u></b><br/>
- * Fired if we successfully joined a VoiceChannel.<br/><br/>
+ * <b><u>VoiceJoinEvent</u></b><br>
+ * Fired if we successfully joined a VoiceChannel.<br><br>
  * Use: Retrieve VoiceChannel we connected to.
  */
 public class VoiceJoinEvent extends GenericVoiceEvent

File: src/main/java/net/dv8tion/jda/events/voice/VoiceLeaveEvent.java
Patch:
@@ -20,9 +20,9 @@
 import net.dv8tion.jda.entities.VoiceStatus;
 
 /**
- * <b><u>VoiceLeaveEvent</u></b><br/>
- * Fired if we successfully left a VoiceChannel.<br/>
- * <br/>
+ * <b><u>VoiceLeaveEvent</u></b><br>
+ * Fired if we successfully left a VoiceChannel.<br>
+ * <br>
  * Use: Retrieve previous VoiceChannel.
  */
 public class VoiceLeaveEvent extends GenericVoiceEvent

File: src/main/java/net/dv8tion/jda/events/voice/VoiceMuteEvent.java
Patch:
@@ -19,9 +19,9 @@
 import net.dv8tion.jda.entities.VoiceStatus;
 
 /**
- * <b><u>VoiceMuteEvent</u></b><br/>
- * Fired if we are (un-)muted. <br/>
- * This can indicate both mute and un-mute and can be caused by both us or the server.<br/>
+ * <b><u>VoiceMuteEvent</u></b><br>
+ * Fired if we are (un-)muted. <br>
+ * This can indicate both mute and un-mute and can be caused by both us or the server.<br>
  * {@link net.dv8tion.jda.events.voice.VoiceSelfMuteEvent} and {@link net.dv8tion.jda.events.voice.VoiceServerMuteEvent} are specifications of this event.
  */
 public class VoiceMuteEvent extends GenericVoiceEvent

File: src/main/java/net/dv8tion/jda/events/voice/VoiceSelfDeafEvent.java
Patch:
@@ -19,8 +19,8 @@
 import net.dv8tion.jda.entities.VoiceStatus;
 
 /**
- * <b><u>VoiceSelfDeafEvent</u></b><br/>
- * Fired if we (un-)deafen us. <br/>
+ * <b><u>VoiceSelfDeafEvent</u></b><br>
+ * Fired if we (un-)deafen us. <br>
  * This can indicate both deafen and un-deafen and can <u>only</u> be caused by us.
  */
 public class VoiceSelfDeafEvent extends VoiceDeafEvent

File: src/main/java/net/dv8tion/jda/events/voice/VoiceSelfMuteEvent.java
Patch:
@@ -19,8 +19,8 @@
 import net.dv8tion.jda.entities.VoiceStatus;
 
 /**
- * <b><u>VoiceSelfMuteEvent</u></b><br/>
- * Fired if we (un-)mute us. <br/>
+ * <b><u>VoiceSelfMuteEvent</u></b><br>
+ * Fired if we (un-)mute us. <br>
  * This can indicate both mute and un-mute and can <u>only</u> be caused by us.
  */
 public class VoiceSelfMuteEvent extends VoiceMuteEvent

File: src/main/java/net/dv8tion/jda/events/voice/VoiceServerDeafEvent.java
Patch:
@@ -19,8 +19,8 @@
 import net.dv8tion.jda.entities.VoiceStatus;
 
 /**
- * <b><u>VoiceServerDeafEvent</u></b><br/>
- * Fired if we are (un-)deafened by the server. <br/>
+ * <b><u>VoiceServerDeafEvent</u></b><br>
+ * Fired if we are (un-)deafened by the server. <br>
  * This can indicate both deafen and un-deafen and can <u>only</u> be caused by the server.
  */
 public class VoiceServerDeafEvent extends VoiceDeafEvent

File: src/main/java/net/dv8tion/jda/events/voice/VoiceServerMuteEvent.java
Patch:
@@ -19,8 +19,8 @@
 import net.dv8tion.jda.entities.VoiceStatus;
 
 /**
- * <b><u>VoiceServerMuteEvent</u></b><br/>
- * Fired if we are (un-)muted by the server. <br/>
+ * <b><u>VoiceServerMuteEvent</u></b><br>
+ * Fired if we are (un-)muted by the server. <br>
  * This can indicate both muted and un-muted and can <u>only</u> be caused by the server.
  */
 public class VoiceServerMuteEvent extends VoiceMuteEvent

File: src/main/java/net/dv8tion/jda/managers/RoleManager.java
Patch:
@@ -182,7 +182,7 @@ public RoleManager setGrouped(Boolean group)
      * This change will only be applied, if {@link #update()} is called.
      * So multiple changes can be made at once.
      *
-     * @param group
+     * @param mention
      *      Whether or not this should be mentionable, or null to keep current grouping status
      * @return
      *      this

File: src/main/java/net/dv8tion/jda/handle/EntityBuilder.java
Patch:
@@ -394,7 +394,9 @@ public VoiceChannel createVoiceChannel(JSONObject json, String guildId)
 
     public PrivateChannel createPrivateChannel(JSONObject privatechat)
     {
-        JSONObject recipient = privatechat.getJSONArray("recipients").getJSONObject(0);
+        JSONObject recipient = privatechat.has("recipients") ? 
+            privatechat.getJSONArray("recipients").getJSONObject(0) :
+            privatechat.getJSONObject("recipient");
         UserImpl user = ((UserImpl) api.getUserMap().get(recipient.getString("id")));
         if (user == null)
         {   //The API can give us private channels connected to Users that we can no longer communicate with.

File: src/main/java/net/dv8tion/jda/handle/EntityBuilder.java
Patch:
@@ -394,7 +394,9 @@ public VoiceChannel createVoiceChannel(JSONObject json, String guildId)
 
     public PrivateChannel createPrivateChannel(JSONObject privatechat)
     {
-        JSONObject recipient = privatechat.getJSONArray("recipients").getJSONObject(0);
+        JSONObject recipient = privatechat.has("recipients") ? 
+            privatechat.getJSONArray("recipients").getJSONObject(0) :
+            privatechat.getJSONObject("recipient");
         UserImpl user = ((UserImpl) api.getUserMap().get(recipient.getString("id")));
         if (user == null)
         {   //The API can give us private channels connected to Users that we can no longer communicate with.

File: src/main/java/net/dv8tion/jda/requests/WebSocketClient.java
Patch:
@@ -658,9 +658,9 @@ protected void handleEvent(JSONObject raw)
                 case "GUILD_ROLE_DELETE":
                     new GuildRoleDeleteHandler(api, responseTotal).handle(raw);
                     break;
-	            case "GUILD_EMOJIS_UPDATE":
-	            	new GuildEmojisUpdateHandler(api, responseTotal).handle(raw);
-		            break;
+                case "GUILD_EMOJIS_UPDATE":
+                    new GuildEmojisUpdateHandler(api, responseTotal).handle(raw);
+                    break;
                 case "USER_UPDATE":
                     new UserUpdateHandler(api, responseTotal).handle(raw);
                     break;

File: src/main/java/net/dv8tion/jda/core/requests/RequestBuilder.java
Patch:
@@ -31,7 +31,7 @@ public class RequestBuilder
 {
     public enum RequestType
     {
-        GET, POST, PUT, DELETE
+        GET, POST, PUT, DELETE, PATCH
     }
 
     private boolean isAsync = false;

File: src/main/java/net/dv8tion/jda/Permission.java
Patch:
@@ -35,6 +35,7 @@ public enum Permission
     MESSAGE_ATTACH_FILES(15, true, true),
     MESSAGE_HISTORY(16, true, true),
     MESSAGE_MENTION_EVERYONE(17, true, true),
+    MESSAGE_EXT_EMOJI(18, true, true),
 
     VOICE_CONNECT(20, true, true),
     VOICE_SPEAK(21, true, true),

File: src/main/java/net/dv8tion/jda/requests/WebSocketClient.java
Patch:
@@ -204,7 +204,7 @@ protected String getGateway()
     {
         try
         {
-            return api.getRequester().get(Requester.DISCORD_API_PREFIX + "gateway").getObject().getString("url") + "?encoding=json&v=5";
+            return api.getRequester().get(Requester.DISCORD_API_PREFIX + "gateway").getObject().getString("url") + "?encoding=json&v=6";
         }
         catch (Exception ex)
         {

File: src/main/java/net/dv8tion/jda/handle/MessageDeleteHandler.java
Patch:
@@ -64,7 +64,7 @@ protected String handleInternally(JSONObject content)
         api.getEventManager().handle(
                 new MessageDeleteEvent(
                         api, responseNumber,
-                        messageId, channelId, channel != null));
+                        messageId, channelId, channel == null));
         return null;
     }
 }

File: src/main/java/net/dv8tion/jda/handle/MessageEmbedHandler.java
Patch:
@@ -82,7 +82,7 @@ protected String handleInternally(JSONObject content)
         api.getEventManager().handle(
                 new MessageEmbedEvent(
                         api, responseNumber,
-                        messageId, channelId, embeds, channel != null));
+                        messageId, channelId, embeds, channel == null));
         return null;
     }
 }

File: src/main/java/net/dv8tion/jda/audio/AudioConnection.java
Patch:
@@ -290,13 +290,13 @@ else if (speaking && (System.currentTimeMillis() - lastFrameSent) > OPUS_FRAME_T
                                 //We've been asked to stop. The next iteration will kill the loop. 
                             }
                         }
-                        if (System.currentTimeMillis() > lastFrameSent + 60) // If the sending didn't took longer than 60ms (3 times the time frame)
+                        if (System.currentTimeMillis() < lastFrameSent + 60) // If the sending didn't took longer than 60ms (3 times the time frame)
                         {
                             lastFrameSent += OPUS_FRAME_TIME_AMOUNT; // incrase lastFrameSent
                         }
                         else
                         {
-                            lastFrameSent=System.currentTimeMillis(); // else reset lastFrameSent to current time
+                            lastFrameSent = System.currentTimeMillis(); // else reset lastFrameSent to current time
                         }
                     }
                 }

File: src/main/java/net/dv8tion/jda/managers/GuildManager.java
Patch:
@@ -683,7 +683,7 @@ public void ban(User user, int delDays)
         }
         checkPermission(Permission.BAN_MEMBERS);
 
-	    if (guild.getUsers().contains(user)) // If user is in guild. Check if we are able to ban.
+        if (guild.getUsers().contains(user)) // If user is in guild. Check if we are able to ban.
             checkPosition(user);
 
         ((JDAImpl) guild.getJDA()).getRequester().put(Requester.DISCORD_API_PREFIX + "guilds/"

File: src/main/java/net/dv8tion/jda/managers/GuildManager.java
Patch:
@@ -723,7 +723,7 @@ public void ban(String userId, int delDays)
         if (response.isOk())
             return;
         if (response.code == 404)
-            throw new IllegalArgumentException("User with id \"" + userId + "\" does not exit.");
+            throw new IllegalArgumentException("User with id \"" + userId + "\" does not exist.");
         JDAImpl.LOG.fatal("Something went wrong trying to ban a user by id: " + response.toString());
     }
 

File: src/main/java/net/dv8tion/jda/handle/GuildLeaveHandler.java
Patch:
@@ -87,6 +87,8 @@ protected String handleInternally(JSONObject content)
         }
 
         api.getGuildMap().remove(guild.getId());
+        guild.getTextChannels().forEach(chan -> api.getChannelMap().remove(chan.getId()));
+        guild.getVoiceChannels().forEach(chan -> api.getVoiceChannelMap().remove(chan.getId()));
         TextChannelImpl.AsyncMessageSender.stop(api, guild.getId());
         api.getEventManager().handle(
                 new GuildLeaveEvent(

File: src/main/java/net/dv8tion/jda/entities/impl/GuildImpl.java
Patch:
@@ -257,7 +257,7 @@ public RoleManager createCopyOfRole(Role role)
         for (Permission perm : role.getPermissions())
         {
             if (!PermissionUtil.checkPermission(role.getJDA().getSelfInfo(), perm, role.getGuild()))
-                throw new PermissionException(perm);  
+                throw new PermissionException(perm);
         }
 
         RoleManager manager = createRole();
@@ -277,11 +277,12 @@ public List<Role> getRolesForUser(User user)
         List<Role> roles = userRoles.get(user);
         if (roles == null)
             return null;
+        roles = new ArrayList<>(roles);
 
         Collections.sort(roles, (r1, r2) -> r2.compareTo(r1));
         return Collections.unmodifiableList(roles);
     }
-    
+
     @Override
     public Role getColorDeterminantRoleForUser(User user)
     {

File: src/main/java/net/dv8tion/jda/entities/impl/VoiceChannelImpl.java
Patch:
@@ -126,7 +126,7 @@ public int getPositionRaw()
     @Override
     public List<User> getUsers()
     {
-        return Collections.unmodifiableList(connectedUsers);
+        return Collections.unmodifiableList(new LinkedList<>(connectedUsers));
     }
 
     @Override

File: src/main/java/net/dv8tion/jda/events/DisconnectEvent.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.time.OffsetDateTime;
 import java.util.Collections;
+import java.util.LinkedList;
 import java.util.List;
 
 public class DisconnectEvent extends Event
@@ -39,7 +40,7 @@ public DisconnectEvent(JDA api, WebSocketFrame serverCloseFrame, WebSocketFrame
         this.clientCloseFrame = clientCloseFrame;
         this.closedByServer = closedByServer;
         this.disconnectTime = disconnectTime;
-        this.dcAudioConnections = Collections.unmodifiableList(dcAudioConnections);
+        this.dcAudioConnections = Collections.unmodifiableList(new LinkedList<>(dcAudioConnections));
     }
 
     public WebSocketFrame getServiceCloseFrame()

File: src/main/java/net/dv8tion/jda/events/ShutdownEvent.java
Patch:
@@ -20,18 +20,19 @@
 
 import java.time.OffsetDateTime;
 import java.util.Collections;
+import java.util.LinkedList;
 import java.util.List;
 
 public class ShutdownEvent extends Event
 {
     protected final OffsetDateTime shutdownTime;
     protected final List<VoiceChannel> dcAudioConnections;
 
-    public ShutdownEvent(JDA api, OffsetDateTime shutdownTime, List<VoiceChannel> dcAudioConnectons)
+    public ShutdownEvent(JDA api, OffsetDateTime shutdownTime, List<VoiceChannel> dcAudioConnections)
     {
         super(api, -1);
         this.shutdownTime = shutdownTime;
-        this.dcAudioConnections = Collections.unmodifiableList(dcAudioConnectons);
+        this.dcAudioConnections = Collections.unmodifiableList(new LinkedList<>(dcAudioConnections));
     }
 
     public OffsetDateTime getShutdownTime()

File: src/main/java/net/dv8tion/jda/events/guild/member/GuildMemberRoleAddEvent.java
Patch:
@@ -21,6 +21,7 @@
 import net.dv8tion.jda.entities.User;
 
 import java.util.Collections;
+import java.util.LinkedList;
 import java.util.List;
 
 public class GuildMemberRoleAddEvent extends GenericGuildMemberEvent
@@ -30,7 +31,7 @@ public class GuildMemberRoleAddEvent extends GenericGuildMemberEvent
     public GuildMemberRoleAddEvent(JDA api, int responseNumber, Guild guild, User user, List<Role> addedRoles)
     {
         super(api, responseNumber, guild, user);
-        this.addedRoles = addedRoles;
+        this.addedRoles = new LinkedList<>(addedRoles);
     }
 
     public List<Role> getRoles()

File: src/main/java/net/dv8tion/jda/events/guild/member/GuildMemberRoleRemoveEvent.java
Patch:
@@ -21,6 +21,7 @@
 import net.dv8tion.jda.entities.User;
 
 import java.util.Collections;
+import java.util.LinkedList;
 import java.util.List;
 
 public class GuildMemberRoleRemoveEvent extends GenericGuildMemberEvent
@@ -30,7 +31,7 @@ public class GuildMemberRoleRemoveEvent extends GenericGuildMemberEvent
     public GuildMemberRoleRemoveEvent(JDA api, int responseNumber, Guild guild, User user, List<Role> removedRoles)
     {
         super(api, responseNumber, guild, user);
-        this.removedRoles = removedRoles;
+        this.removedRoles = new LinkedList<>(removedRoles);
     }
 
     public List<Role> getRoles()

File: src/main/java/net/dv8tion/jda/hooks/InterfacedEventManager.java
Patch:
@@ -51,7 +51,7 @@ public void unregister(Object listener)
     @Override
     public List<Object> getRegisteredListeners()
     {
-        return Collections.unmodifiableList(listeners);
+        return Collections.unmodifiableList(new LinkedList<>(listeners));
     }
 
     @Override

File: src/main/java/net/dv8tion/jda/entities/impl/PrivateChannelImpl.java
Patch:
@@ -167,7 +167,7 @@ public void sendFileAsync(File file, Message message, Consumer<Message> callback
         {
             Message messageReturn = sendFile(file, message);
             if (callback != null)
-                callback.accept(message);
+                callback.accept(messageReturn);
         });
         thread.setName("PrivateChannelImpl SendFileAsync Channel: " + id);
         thread.setDaemon(true);

File: src/main/java/net/dv8tion/jda/entities/impl/TextChannelImpl.java
Patch:
@@ -273,7 +273,7 @@ public void sendFileAsync(File file, Message message, Consumer<Message> callback
         {
             Message messageReturn = sendFile(file, message);
             if (callback != null)
-                callback.accept(message);
+                callback.accept(messageReturn);
         });
         thread.setName("TextChannelImpl sendFileAsync Channel: " + id);
         thread.setDaemon(true);

File: src/main/java/net/dv8tion/jda/JDABuilder.java
Patch:
@@ -310,7 +310,7 @@ public JDA buildAsync() throws LoginException, IllegalArgumentException
     public JDA buildBlocking() throws LoginException, IllegalArgumentException, InterruptedException
     {
         JDA jda = buildAsync();
-        while(jda.getStatus()!=Status.CONNECTED)
+        while(jda.getStatus() != Status.CONNECTED)
         {
             Thread.sleep(50);
         }

File: src/main/java/net/dv8tion/jda/requests/WebSocketClient.java
Patch:
@@ -99,7 +99,6 @@ public void setCustomHandler(WebSocketCustomHandler customHandler)
 
     public void ready()
     {
-        api.setStatus(JDA.Status.CONNECTED);
         if (initiating)
         {
             initiating = false;
@@ -136,6 +135,7 @@ public void ready()
             JDAImpl.LOG.info("Successfully resumed Session!");
             api.getEventManager().handle(new ResumedEvent(api, api.getResponseTotal()));
         }
+        api.setStatus(JDA.Status.CONNECTED);
         LOG.debug("Resending " + cachedEvents.size() + " cached events...");
         handle(cachedEvents);
         LOG.debug("Sending of cached events finished.");

File: src/main/java/net/dv8tion/jda/JDA.java
Patch:
@@ -307,7 +307,7 @@ public interface JDA
     void setAutoReconnect(boolean reconnect);
 
     /**
-     * Returns whether or not autoReconnect is enabled for JDA
+     * Returns whether or not autoReconnect is enabled for JDA.
      *
      * @return
      *      True if JDA attempts to autoReconnect
@@ -318,7 +318,7 @@ public interface JDA
      * Used to determine whether the instance of JDA supports audio and has it enabled.
      *
      * @return
-     *      True if JDA can currently utalize the audio system.
+     *      True if JDA can currently utilize the audio system.
      */
     boolean isAudioEnabled();
 
@@ -344,7 +344,7 @@ public interface JDA
     void shutdown(boolean free);
 
     /**
-     * Installs an auxillary cable into your system.
+     * Installs an auxiliary cable into your system.
      * 
      * @param port the port
      * @throws UnsupportedOperationException

File: src/main/java/net/dv8tion/jda/entities/User.java
Patch:
@@ -41,7 +41,7 @@ public interface User
     String getUsername();
 
     /**
-     * The descriminator of the {@link net.dv8tion.jda.entities.User User}. Used to differentiate between users with the same usernames.<br>
+     * The discriminator of the {@link net.dv8tion.jda.entities.User User}. Used to differentiate between users with the same usernames.<br>
      * This will be important when the friends list is released for human readable searching.<br>
      * Ex: DV8FromTheWorld#9148
      *

File: src/main/java/net/dv8tion/jda/managers/AccountManager.java
Patch:
@@ -49,7 +49,7 @@ public AccountManager(JDAImpl api)
      * Avatars can get generated through the methods of {@link net.dv8tion.jda.utils.AvatarUtil AvatarUtil}
      *
      * @param avatar
-     *      a Avatar object, null to keep current Avatar or {@link net.dv8tion.jda.utils.AvatarUtil#DELETE_AVATAR AvatarUtil#DELETE_AVATAR} to remove the avatar
+     *      an Avatar object, null to keep current Avatar or {@link net.dv8tion.jda.utils.AvatarUtil#DELETE_AVATAR AvatarUtil#DELETE_AVATAR} to remove the avatar
      * @return
      *      this
      */
@@ -117,7 +117,7 @@ public void setStreaming(String title, String url) throws IllegalArgumentExcepti
      * This change will be applied <b>immediately</b>
      *
      * @param idle
-     *      weather the account should be displayed as idle o not
+     *      whether the account should be displayed as idle or not
      */
     public void setIdle(boolean idle)
     {

File: src/main/java/net/dv8tion/jda/JDA.java
Patch:
@@ -307,7 +307,7 @@ public interface JDA
     void setAutoReconnect(boolean reconnect);
 
     /**
-     * Returns whether or not autoReconnect is enabled for JDA
+     * Returns whether or not autoReconnect is enabled for JDA.
      *
      * @return
      *      True if JDA attempts to autoReconnect
@@ -318,7 +318,7 @@ public interface JDA
      * Used to determine whether the instance of JDA supports audio and has it enabled.
      *
      * @return
-     *      True if JDA can currently utalize the audio system.
+     *      True if JDA can currently utilize the audio system.
      */
     boolean isAudioEnabled();
 
@@ -344,7 +344,7 @@ public interface JDA
     void shutdown(boolean free);
 
     /**
-     * Installs an auxillary cable into your system.
+     * Installs an auxiliary cable into your system.
      * 
      * @param port the port
      * @throws UnsupportedOperationException

File: src/main/java/net/dv8tion/jda/entities/User.java
Patch:
@@ -41,7 +41,7 @@ public interface User
     String getUsername();
 
     /**
-     * The descriminator of the {@link net.dv8tion.jda.entities.User User}. Used to differentiate between users with the same usernames.<br>
+     * The discriminator of the {@link net.dv8tion.jda.entities.User User}. Used to differentiate between users with the same usernames.<br>
      * This will be important when the friends list is released for human readable searching.<br>
      * Ex: DV8FromTheWorld#9148
      *

File: src/main/java/net/dv8tion/jda/managers/AccountManager.java
Patch:
@@ -49,7 +49,7 @@ public AccountManager(JDAImpl api)
      * Avatars can get generated through the methods of {@link net.dv8tion.jda.utils.AvatarUtil AvatarUtil}
      *
      * @param avatar
-     *      a Avatar object, null to keep current Avatar or {@link net.dv8tion.jda.utils.AvatarUtil#DELETE_AVATAR AvatarUtil#DELETE_AVATAR} to remove the avatar
+     *      an Avatar object, null to keep current Avatar or {@link net.dv8tion.jda.utils.AvatarUtil#DELETE_AVATAR AvatarUtil#DELETE_AVATAR} to remove the avatar
      * @return
      *      this
      */
@@ -117,7 +117,7 @@ public void setStreaming(String title, String url) throws IllegalArgumentExcepti
      * This change will be applied <b>immediately</b>
      *
      * @param idle
-     *      weather the account should be displayed as idle o not
+     *      whether the account should be displayed as idle or not
      */
     public void setIdle(boolean idle)
     {

File: src/main/java/net/dv8tion/jda/entities/impl/JDAImpl.java
Patch:
@@ -59,7 +59,7 @@ public class JDAImpl implements JDA
     protected final Map<String, TextChannel> textChannelMap = new HashMap<>();
     protected final Map<String, VoiceChannel> voiceChannelMap = new HashMap<>();
     protected final Map<String, PrivateChannel> pmChannelMap = new HashMap<>();
-    protected final Map<String, Long> messageRatelimitTimeouts = new HashMap<>(); //(GuildId or PrivateChannelId) - Timeout.
+    protected final Map<String, Long> messageRatelimitTimeouts = new HashMap<>(); //(GuildId or GlobalPrivateChannel) - Timeout.
     protected final Map<String, String> offline_pms = new HashMap<>();    //Userid -> channelid
     protected final Map<Guild, AudioManager> audioManagers = new HashMap<>();
     protected final boolean audioEnabled;

File: src/main/java/net/dv8tion/jda/entities/impl/MessageImpl.java
Patch:
@@ -225,7 +225,9 @@ public void updateMessageAsync(String newContent, Consumer<Message> callback)
         if (api.getSelfInfo() != getAuthor())
             throw new UnsupportedOperationException("Attempted to update message that was not sent by this account. You cannot modify other User's messages!");
         Message newMessage = new MessageImpl(getId(), api).setContent(newContent).setChannelId(getChannelId());
-        String ratelimitIdentifier = isPrivate ? channelId : api.getTextChannelById(channelId).getGuild().getId();
+        String ratelimitIdentifier = isPrivate
+                ? PrivateChannelImpl.RATE_LIMIT_IDENTIFIER
+                : api.getTextChannelById(channelId).getGuild().getId();
         TextChannelImpl.AsyncMessageSender.getInstance(api, ratelimitIdentifier).enqueue(newMessage, true, callback);
     }
 

File: src/main/java/net/dv8tion/jda/entities/impl/TextChannelImpl.java
Patch:
@@ -463,7 +463,7 @@ public static class AsyncMessageSender
     {
         private static final Map<JDA, Map<String, AsyncMessageSender>> instances = new HashMap<>();
         private final JDAImpl api;
-        private final String ratelimitIdentifier; //GuildId or PrivateChannelId
+        private final String ratelimitIdentifier; //GuildId or GlobalPrivateChannel
         private Runner runner = null;
         private boolean runnerRunning = false;
         private boolean alive = true;

File: src/main/java/net/dv8tion/jda/entities/impl/JDAImpl.java
Patch:
@@ -69,7 +69,7 @@ public class JDAImpl implements JDA
     protected AccountManager accountManager;
     protected String authToken = null;
     protected WebSocketClient client;
-    protected final Requester requester = new Requester(this);
+    protected Requester requester = new Requester(this);
     protected boolean reconnect;
     protected int responseTotal;
 

File: src/main/java/net/dv8tion/jda/requests/WebSocketCustomHandler.java
Patch:
@@ -21,7 +21,7 @@ public interface WebSocketCustomHandler
 {
     /**
      * Handles discord events passed to it. If this handler does not handle the event provided
-     * this should return true.
+     * this should return false.
      *
      * @param obj
      *          The Discord event which needs to be handled

File: src/main/java/net/dv8tion/jda/requests/WebSocketClient.java
Patch:
@@ -104,7 +104,7 @@ public void ready()
             {
                 firstInit = false;
                 JDAImpl.LOG.info("Finished Loading!");
-                if (api.getGuilds().size() >= 0) //Show large warning when connected to >2500 guilds
+                if (api.getGuilds().size() >= 2500) //Show large warning when connected to >2500 guilds
                 {
                     JDAImpl.LOG.warn(" __      __ _    ___  _  _  ___  _  _   ___  _ ");
                     JDAImpl.LOG.warn(" \\ \\    / //_\\  | _ \\| \\| ||_ _|| \\| | / __|| |");

File: src/main/java/net/dv8tion/jda/utils/InviteUtil.java
Patch:
@@ -55,7 +55,7 @@ public static Invite resolve(String code)
             code = split[split.length - 1];
         }
         JSONObject object = new JDAImpl(false, false).getRequester().get(Requester.DISCORD_API_PREFIX + "invite/" + code).getObject();
-        if (object != null && object.has("code"))
+        if (object != null && object.has("code") && object.has("guild"))
         {
             JSONObject guild = object.getJSONObject("guild");
             JSONObject channel = object.getJSONObject("channel");

File: src/main/java/net/dv8tion/jda/utils/InviteUtil.java
Patch:
@@ -55,7 +55,7 @@ public static Invite resolve(String code)
             code = split[split.length - 1];
         }
         JSONObject object = new JDAImpl(false, false).getRequester().get(Requester.DISCORD_API_PREFIX + "invite/" + code).getObject();
-        if (object != null && object.has("code"))
+        if (object != null && object.has("code") && object.has("guild"))
         {
             JSONObject guild = object.getJSONObject("guild");
             JSONObject channel = object.getJSONObject("channel");

File: src/main/java/net/dv8tion/jda/entities/TextChannel.java
Patch:
@@ -21,7 +21,7 @@
  * Represents a Discord Text Channel. See {@link net.dv8tion.jda.entities.Channel Channel} and
  * {@link net.dv8tion.jda.entities.MessageChannel MessageChannel} for more information.
  */
-public interface TextChannel extends Channel, MessageChannel
+public interface TextChannel extends Channel, MessageChannel, Comparable<TextChannel>
 {
     /**
      * Internal implementation of this class is available at

File: src/main/java/net/dv8tion/jda/entities/VoiceChannel.java
Patch:
@@ -22,6 +22,6 @@
  * This interface only exists to distinct {@link net.dv8tion.jda.entities.Channel Channels} into
  * VoiceChannels and {@link net.dv8tion.jda.entities.TextChannel TextChannels}.
  */
-public interface VoiceChannel extends Channel
+public interface VoiceChannel extends Channel, Comparable<VoiceChannel>
 {
 }

File: src/main/java/net/dv8tion/jda/handle/EntityBuilder.java
Patch:
@@ -277,7 +277,6 @@ private void createGuildMemberPass(GuildImpl guildObj, JSONArray members)
                             "GuildId: " + guildObj.getId() + " UserId: " + user.getId() + " RoleId: " + roleId);
                 }
             }
-            Collections.sort(userRoles.get(user), (r2, r1) -> Integer.compare(r1.getPosition(), r2.getPosition()));
             VoiceStatusImpl voiceStatus = new VoiceStatusImpl(user, guildObj);
             voiceStatus.setServerDeaf(member.getBoolean("deaf"));
             voiceStatus.setServerMute(member.getBoolean("mute"));

File: src/main/java/net/dv8tion/jda/handle/GuildMemberUpdateHandler.java
Patch:
@@ -87,7 +87,7 @@ protected String handleInternally(JSONObject content)
         {
             rolesOld.addAll(rolesNew);
         }
-        Collections.sort(rolesOld, (r2, r1) -> Integer.compare(r1.getPosition(), r2.getPosition()));
+        Collections.sort(rolesOld, (r1, r2) -> r2.compareTo(r1));
         if (removedRoles.size() > 0)
         {
             api.getEventManager().handle(

File: src/main/java/net/dv8tion/jda/handle/GuildRoleUpdateHandler.java
Patch:
@@ -55,7 +55,7 @@ protected String handleInternally(JSONObject content)
             role.setName(rolejson.getString("name"));
             api.getEventManager().handle(new GuildRoleUpdateNameEvent(api, responseNumber, role));
         }
-        if (role.getPosition() != rolejson.getInt("position"))
+        if (role.getPositionRaw() != rolejson.getInt("position"))
         {
             role.setPosition(rolejson.getInt("position"));
             api.getEventManager().handle(new GuildRoleUpdatePositionEvent(api, responseNumber, role));

File: src/main/java/net/dv8tion/jda/utils/DebugUtil.java
Patch:
@@ -199,6 +199,8 @@ public static JSONObject fromGuildChannel(Channel chan, boolean includeUsers, bo
         JSONObject obj = new JSONObject();
         obj.put("id", chan.getId())
                 .put("name", chan.getName())
+                .put("position", chan.getPosition())
+                .put("position_raw", chan.getPositionRaw())
                 .put("guild_id", chan.getGuild().getId());
         if (chan instanceof TextChannel)
             obj.put("topic", chan.getTopic());
@@ -259,6 +261,7 @@ public static JSONObject fromRole(Role role, boolean includeGuild, boolean inclu
         obj.put("id", role.getId())
                 .put("name", role.getName())
                 .put("position", role.getPosition())
+                .put("position_raw", role.getPositionRaw())
                 .put("color", role.getColor())
                 .put("hoisted", role.isGrouped())
                 .put("managed", role.isManaged())

File: src/main/java/net/dv8tion/jda/handle/ReadyHandler.java
Patch:
@@ -175,6 +175,6 @@ private void sendChunks()
                     );
             api.getClient().send(obj.toString());
         }
-        chunkIds.clear();
+        chunkIds.get(api).clear();
     }
 }

File: src/main/java/net/dv8tion/jda/entities/User.java
Patch:
@@ -77,13 +77,13 @@ public interface User
     String getAvatarUrl();
 
     /**
-     * The name of the game that the user is currently playing.
+     * The game that the user is currently playing.
      * If the user is not currently playing a game, this will return null.
      *
      * @return
-     *      Possibly-null String containing the name of the game that the {@link net.dv8tion.jda.entities.User User} is currently playing.
+     *      Possibly-null {@link net.dv8tion.jda.entities.Game Game} containing the game that the {@link net.dv8tion.jda.entities.User User} is currently playing.
      */
-    String getCurrentGame();
+    Game getCurrentGame();
 
     /**
      * Returns the {@link net.dv8tion.jda.OnlineStatus OnlineStatus} of the User.<br>

File: src/main/java/net/dv8tion/jda/handle/ChannelCreateHandler.java
Patch:
@@ -70,6 +70,7 @@ else if (type.equalsIgnoreCase("private"))
         {
             throw new IllegalArgumentException("ChannelCreateEvent provided an unregonized channel type.  JSON: " + content);
         }
+        EventCache.get(api).playbackCache(EventCache.Type.CHANNEL, content.getString("id"));
         return null;
     }
 }

File: src/main/java/net/dv8tion/jda/handle/GuildJoinHandler.java
Patch:
@@ -51,6 +51,7 @@ protected String handleInternally(JSONObject content)
                                 new GuildJoinEvent(
                                         api, responseNumber,
                                         guild));
+                        EventCache.get(api).playbackCache(EventCache.Type.GUILD, guild.getId());
                     }
                     else if (!wasAvail)                     //was previously unavailable
                     {

File: src/main/java/net/dv8tion/jda/handle/GuildMemberAddHandler.java
Patch:
@@ -57,6 +57,7 @@ protected String handleInternally(JSONObject content)
                 new GuildMemberJoinEvent(
                         api, responseNumber,
                         guild, user));
+        EventCache.get(api).playbackCache(EventCache.Type.USER, user.getId());
         return null;
     }
 }

File: src/main/java/net/dv8tion/jda/handle/GuildMembersChunkHandler.java
Patch:
@@ -44,7 +44,7 @@ protected String handleInternally(JSONObject content)
         Integer expectMemberCount = (Integer) expectedGuildMembers.get(api).get(guildId);
 
         JSONArray members = content.getJSONArray("members");
-        JDAImpl.LOG.debug("GUILD_MEMBER_CHUNK for: " + guildId + "\tMembers: " + members.length());
+        JDAImpl.LOG.debug("GUILD_MEMBER_CHUNK for: " + guildId + " \tMembers: " + members.length());
         memberChunks.add(members);
 
         int currentTotal = 0;
@@ -55,6 +55,7 @@ protected String handleInternally(JSONObject content)
 
         if (currentTotal >= expectMemberCount)
         {
+            JDAImpl.LOG.debug("Finished chunking for: " + guildId);
             new EntityBuilder(api).createGuildSecondPass(guildId, memberChunks);
             memberChunksCache.get(api).remove(guildId);
             expectedGuildMembers.get(api).remove(guildId);

File: src/main/java/net/dv8tion/jda/handle/GuildRoleCreateHandler.java
Patch:
@@ -44,6 +44,7 @@ protected String handleInternally(JSONObject content)
                 new GuildRoleCreateEvent(
                         api, responseNumber,
                         guild, newRole));
+        EventCache.get(api).playbackCache(EventCache.Type.ROLE, newRole.getId());
         return null;
     }
 }

File: src/main/java/net/dv8tion/jda/handle/SocketHandler.java
Patch:
@@ -23,6 +23,7 @@ public abstract class SocketHandler
 {
     protected final JDAImpl api;
     protected final int responseNumber;
+    protected JSONObject allContent;
 
     public SocketHandler(JDAImpl api, int responseNumber)
     {
@@ -33,6 +34,7 @@ public SocketHandler(JDAImpl api, int responseNumber)
 
     public final void handle(JSONObject o)
     {
+        this.allContent = o;
         String guildId = handleInternally(o.getJSONObject("d"));
         if (guildId != null)
         {

File: src/main/java/net/dv8tion/jda/requests/WebSocketClient.java
Patch:
@@ -399,6 +399,9 @@ private void invalidate()
         api.getUserMap().clear();
         api.getPmChannelMap().clear();
         api.getOffline_pms().clear();
+        new EntityBuilder(api).clearCache();
+        new ReadyHandler(api, 0).clearCache();
+        EventCache.get(api).clear();
         GuildLock.get(api).clear();
     }
 

File: src/examples/java/AudioExample.java
Patch:
@@ -44,11 +44,11 @@ public static void main(String[] args)
         }
         catch (IllegalArgumentException e)
         {
-            System.out.println("The config was not populated. Please enter an email and password.");
+            System.out.println("The config was not populated. Please enter a bot token.");
         }
         catch (LoginException e)
         {
-            System.out.println("The provided email / password combination was incorrect. Please provide valid details.");
+            System.out.println("The provided bot token was incorrect. Please provide valid details.");
         }
         catch (InterruptedException e)
         {

File: src/examples/java/ChannelListenerExample.java
Patch:
@@ -34,11 +34,11 @@ public static void main(String[] args)
         }
         catch (IllegalArgumentException e)
         {
-            System.out.println("The config was not populated. Please enter an email and password.");
+            System.out.println("The config was not populated. Please enter a bot token.");
         }
         catch (LoginException e)
         {
-            System.out.println("The provided email / password combination was incorrect. Please provide valid details.");
+            System.out.println("The provided bot token was incorrect. Please provide valid details.");
         }
         catch (InterruptedException e)
         {

File: src/examples/java/GuildListenerExample.java
Patch:
@@ -46,11 +46,11 @@ public static void main(String[] args)
         }
         catch (IllegalArgumentException e)
         {
-            System.out.println("The config was not populated. Please enter an email and password.");
+            System.out.println("The config was not populated. Please enter a bot token.");
         }
         catch (LoginException e)
         {
-            System.out.println("The provided email / password combination was incorrect. Please provide valid details.");
+            System.out.println("The provided bot token was incorrect. Please provide valid details.");
         }
         catch (InterruptedException e)
         {

File: src/examples/java/MessageListenerExample.java
Patch:
@@ -41,11 +41,11 @@ public static void main(String[] args)
         }
         catch (IllegalArgumentException e)
         {
-            System.out.println("The config was not populated. Please enter an email and password.");
+            System.out.println("The config was not populated. Please enter a bot token.");
         }
         catch (LoginException e)
         {
-            System.out.println("The provided email / password combination was incorrect. Please provide valid details.");
+            System.out.println("The provided bot token was incorrect. Please provide valid details.");
         }
         catch (InterruptedException e)
         {

File: src/main/java/net/dv8tion/jda/handle/EntityBuilder.java
Patch:
@@ -171,6 +171,7 @@ else if (type.equalsIgnoreCase("voice"))
             HashMap<String, Consumer<Guild>> cachedGuildCallbacks = cachedJdaGuildCallbacks.get(api);
             cachedGuildJsons.put(id, guild);
             cachedGuildCallbacks.put(id, secondPassCallback);
+            GuildMembersChunkHandler.setExpectedGuildMembers(api, id, guild.getInt("member_count"));
             if (api.getClient().isReady())
             {
                 JSONObject obj = new JSONObject()

File: src/main/java/net/dv8tion/jda/managers/PermissionOverrideManager.java
Patch:
@@ -36,10 +36,10 @@ public class PermissionOverrideManager
      */
     public PermissionOverrideManager(PermissionOverride override)
     {
-        checkPermission(Permission.MANAGE_PERMISSIONS);
         this.override = override;
         this.allow = override.getAllowedRaw();
         this.deny = override.getDeniedRaw();
+        checkPermission(Permission.MANAGE_PERMISSIONS);
     }
 
     //TODO: find a good system for this

File: src/main/java/net/dv8tion/jda/audio/AudioWebSocket.java
Patch:
@@ -95,8 +95,8 @@ public AudioWebSocket(String endpoint, JDAImpl api, Guild guild, String sessionI
         try
         {
             socket = factory.createSocket(wssEndpoint)
-                    .addListener(this)
-                    .connect();
+                    .addListener(this);
+            socket.connect();
         }
         catch (IOException | WebSocketException e)
         {

File: src/main/java/net/dv8tion/jda/utils/ApplicationUtil.java
Patch:
@@ -45,7 +45,7 @@ public static String getAuthInvite(String appId, Permission... perms)
         {
             perm = perm | (1 << permission.getOffset());
         }
-        return "https://discordapp.com/oauth2/authorize?&client_id=" + appId + "&scope=bot&permissions=" + perm;
+        return "https://discordapp.com/oauth2/authorize?client_id=" + appId + "&scope=bot&permissions=" + perm;
     }
 
     private final JDAImpl api;
@@ -496,7 +496,7 @@ public String getAvatarUrl()
              */
             public String getAuthInvite(Permission... perms)
             {
-                return ApplicationUtil.getAuthInvite(id, perms);
+                return ApplicationUtil.getAuthInvite(Application.this.id, perms);
             }
 
             @Override

File: src/main/java/net/dv8tion/jda/audio/AudioWebSocket.java
Patch:
@@ -51,7 +51,7 @@ public class AudioWebSocket extends WebSocketAdapter
     private boolean connected = false;
     private boolean ready = false;
     private Thread keepAliveThread;
-    public static WebSocket socket;
+    public WebSocket socket;
     private String endpoint;
     private String wssEndpoint;
 

File: src/main/java/net/dv8tion/jda/audio/AudioWebSocket.java
Patch:
@@ -205,6 +205,7 @@ public void onTextMessage(WebSocket websocket, String message)
         }
     }
 
+
     @Override
     public void onDisconnected(WebSocket websocket, WebSocketFrame serverCloseFrame, WebSocketFrame clientCloseFrame, boolean closedByServer)
     {
@@ -237,7 +238,7 @@ public void close()
         JSONObject obj = new JSONObject()
                 .put("op", 4)
                 .put("d", new JSONObject()
-                        .put("guild_id", JSONObject.NULL)
+                        .put("guild_id", guild.getId())
                         .put("channel_id", JSONObject.NULL)
                         .put("self_mute", false)
                         .put("self_deaf", false)
@@ -256,7 +257,7 @@ public void close()
         if (udpSocket != null)
             udpSocket.close();
         if (socket != null)
-            socket.sendClose();
+            socket.sendClose(1000);
         VoiceChannel disconnectedChannel = guild.getAudioManager().getConnectedChannel();
         guild.getAudioManager().setAudioConnection(null);
         api.getEventManager().handle(new AudioDisconnectEvent(api, disconnectedChannel));

File: src/main/java/net/dv8tion/jda/handle/MessageAcknowledgedHandler.java
Patch:
@@ -54,7 +54,7 @@ protected String handleInternally(JSONObject content)
         {
             PrivateChannel privChannel = api.getPmChannelMap().get(channelId);
             if (privChannel == null)
-                throw new IllegalArgumentException("Message acknowledged in unknown channel with id " + channelId + " ! JSON: " + content);
+                return null;            //prob ack resulting of closing PM-channel; ignoring
             api.getEventManager().handle(
                     new PrivateMessageAcknowledgedEvent(
                             api, responseNumber,

File: src/main/java/net/dv8tion/jda/requests/Requester.java
Patch:
@@ -156,7 +156,7 @@ public JSONObject getObject()
         {
             try
             {
-                return new JSONObject(responseText);
+                return responseText == null ? null : new JSONObject(responseText);
             }
             catch (JSONException ex)
             {
@@ -168,7 +168,7 @@ public JSONArray getArray()
         {
             try
             {
-                return new JSONArray(responseText);
+                return responseText == null ? null : new JSONArray(responseText);
             }
             catch (JSONException ex)
             {

File: src/main/java/net/dv8tion/jda/requests/GuildLock.java
Patch:
@@ -73,7 +73,7 @@ public void queue(String guildId, JSONObject event)
     {
         if (isLocked(guildId))
         {
-            LOG.debug("Queueing up event for guild with id" + guildId + ": " + event.toString());
+            LOG.debug("Queueing up event for guild with id " + guildId + ": " + event.toString());
             cache.get(guildId).add(event);
         }
     }

File: src/main/java/net/dv8tion/jda/requests/WebSocketClientV2.java
Patch:
@@ -126,7 +126,7 @@ public void send(String message)
     @Override
     public void close()
     {
-        socket.sendClose();
+        socket.sendClose(1000);
     }
 
     /*
@@ -261,8 +261,6 @@ public void onTextMessage(WebSocket websocket, String message)
             api.setResponseTotal(content.getInt("s"));
         }
 
-        LOG.trace("-> " + content.toString());
-
         switch (opCode)
         {
             case 0:

File: src/main/java/net/dv8tion/jda/managers/GuildManager.java
Patch:
@@ -391,7 +391,7 @@ public GuildManager setVerificationLevel(Guild.VerificationLevel level)
         }
         checkPermission(Permission.MANAGE_SERVER);
 
-        if (guild.getVerificatonLevel() == level)
+        if (guild.getVerificationLevel() == level)
         {
             this.verificationLevel = null;
         }

File: src/main/java/net/dv8tion/jda/entities/impl/MessageImpl.java
Patch:
@@ -169,11 +169,13 @@ public boolean isTTS()
     @Override
     public Message updateMessage(String newContent)
     {
-        if (!api.getSelfInfo().getId().equals(getAuthor().getId()))
+        if (api.getSelfInfo() != getAuthor())
             throw new UnsupportedOperationException("Attempted to update message that was not sent by this account. You cannot modify other User's messages!");
         try
         {
             JSONObject response = api.getRequester().patch(Requester.DISCORD_API_PREFIX + "channels/" + channelId + "/messages/" + getId(), new JSONObject().put("content", newContent));
+            if(!response.has("id"))         //updating failed (dunno why)
+                return null;
             return new EntityBuilder(api).createMessage(response);
         }
         catch (JSONException ex)

File: src/main/java/net/dv8tion/jda/entities/impl/TextChannelImpl.java
Patch:
@@ -158,6 +158,8 @@ public Message sendMessage(Message msg)
                 api.setMessageTimeout(retry_after);
                 throw new RateLimitedException(retry_after);
             }
+            if(!response.has("id")) //sending failed (Verification-level?)
+                return null;
             return new EntityBuilder(api).createMessage(response);
         }
         catch (JSONException ex)

File: src/main/java/net/dv8tion/jda/MessageHistory.java
Patch:
@@ -22,6 +22,7 @@
 import net.dv8tion.jda.entities.impl.JDAImpl;
 import net.dv8tion.jda.exceptions.PermissionException;
 import net.dv8tion.jda.handle.EntityBuilder;
+import net.dv8tion.jda.requests.Requester;
 import org.json.JSONArray;
 
 import java.util.LinkedList;
@@ -100,7 +101,7 @@ public List<Message> retrieve(int amount)
             toQueue = Math.min(amount, 100);
             try
             {
-                JSONArray array = api.getRequester().getA("https://discordapp.com/api/channels/" + channelId
+                JSONArray array = api.getRequester().getA(Requester.DISCORD_API_PREFIX + "channels/" + channelId
                         + "/messages?limit=" + toQueue + (lastId != null ? "&before=" + lastId : ""));
 
                 for (int i = 0; i < array.length(); i++)

File: src/main/java/net/dv8tion/jda/entities/impl/MessageImpl.java
Patch:
@@ -23,6 +23,7 @@
 import net.dv8tion.jda.entities.User;
 import net.dv8tion.jda.exceptions.PermissionException;
 import net.dv8tion.jda.handle.EntityBuilder;
+import net.dv8tion.jda.requests.Requester;
 import org.json.JSONException;
 import org.json.JSONObject;
 
@@ -172,7 +173,7 @@ public Message updateMessage(String newContent)
             throw new UnsupportedOperationException("Attempted to update message that was not sent by this account. You cannot modify other User's messages!");
         try
         {
-            JSONObject response = api.getRequester().patch("https://discordapp.com/api/channels/" + channelId + "/messages/" + getId(), new JSONObject().put("content", newContent));
+            JSONObject response = api.getRequester().patch(Requester.DISCORD_API_PREFIX + "channels/" + channelId + "/messages/" + getId(), new JSONObject().put("content", newContent));
             return new EntityBuilder(api).createMessage(response);
         }
         catch (JSONException ex)
@@ -192,7 +193,7 @@ public void deleteMessage()
             else if (!api.getTextChannelById(getChannelId()).checkPermission(api.getSelfInfo(), Permission.MESSAGE_MANAGE))
                 throw new PermissionException(Permission.MESSAGE_MANAGE);
         }
-        api.getRequester().delete("https://discordapp.com/api/channels/" + channelId + "/messages/" + getId());
+        api.getRequester().delete(Requester.DISCORD_API_PREFIX + "channels/" + channelId + "/messages/" + getId());
     }
 
     public MessageImpl setMentionedUsers(List<User> mentionedUsers)

File: src/main/java/net/dv8tion/jda/entities/impl/PrivateChannelImpl.java
Patch:
@@ -79,7 +79,7 @@ public Message sendMessage(Message msg)
         }
         try
         {
-            JSONObject response = api.getRequester().post("https://discordapp.com/api/channels/" + getId() + "/messages",
+            JSONObject response = api.getRequester().post(Requester.DISCORD_API_PREFIX + "channels/" + getId() + "/messages",
                     new JSONObject().put("content", msg.getRawContent()));
             if (response.has("retry_after"))
             {
@@ -139,7 +139,7 @@ public Message sendFile(File file, Message message)
         JDAImpl api = (JDAImpl) getJDA();
         try
         {
-            MultipartBody body = Unirest.post("https://discordapp.com/api/channels/" + getId() + "/messages")
+            MultipartBody body = Unirest.post(Requester.DISCORD_API_PREFIX + "channels/" + getId() + "/messages")
                     .header("authorization", getJDA().getAuthToken())
                     .header("user-agent", Requester.USER_AGENT)
                     .field("file", file);
@@ -185,7 +185,7 @@ public void sendFileAsync(File file, Message message, Consumer<Message> callback
 
     public void sendTyping()
     {
-        api.getRequester().post("https://discordapp.com/api/channels/" + getId() + "/typing", new JSONObject());
+        api.getRequester().post(Requester.DISCORD_API_PREFIX + "channels/" + getId() + "/typing", new JSONObject());
     }
 
     @Override

File: src/main/java/net/dv8tion/jda/entities/impl/UserImpl.java
Patch:
@@ -20,6 +20,7 @@
 import net.dv8tion.jda.entities.PrivateChannel;
 import net.dv8tion.jda.entities.User;
 import net.dv8tion.jda.handle.EntityBuilder;
+import net.dv8tion.jda.requests.Requester;
 import org.json.JSONException;
 import org.json.JSONObject;
 
@@ -102,7 +103,7 @@ public PrivateChannel getPrivateChannel()
         {
             try
             {
-                JSONObject response = api.getRequester().post("https://discordapp.com/api/users/" + api.getSelfInfo().getId() + "/channels",
+                JSONObject response = api.getRequester().post(Requester.DISCORD_API_PREFIX + "users/" + api.getSelfInfo().getId() + "/channels",
                         new JSONObject().put("recipient_id", getId()));
                 new EntityBuilder(api).createPrivateChannel(response);
             }

File: src/main/java/net/dv8tion/jda/managers/AccountManager.java
Patch:
@@ -19,6 +19,7 @@
 import net.dv8tion.jda.entities.SelfInfo;
 import net.dv8tion.jda.entities.impl.JDAImpl;
 import net.dv8tion.jda.entities.impl.SelfInfoImpl;
+import net.dv8tion.jda.requests.Requester;
 import net.dv8tion.jda.utils.AvatarUtil;
 import org.json.JSONObject;
 
@@ -177,7 +178,7 @@ public AccountManager update()
             object.put("password", password);
             object.put("username", username == null ? api.getSelfInfo().getUsername() : username);
 
-            JSONObject result = api.getRequester().patch("https://discordapp.com/api/users/@me", object);
+            JSONObject result = api.getRequester().patch(Requester.DISCORD_API_PREFIX + "users/@me", object);
 
             if (result == null || !result.has("token"))
             {

File: src/main/java/net/dv8tion/jda/managers/ChannelManager.java
Patch:
@@ -21,6 +21,7 @@
 import net.dv8tion.jda.entities.VoiceChannel;
 import net.dv8tion.jda.entities.impl.JDAImpl;
 import net.dv8tion.jda.exceptions.PermissionException;
+import net.dv8tion.jda.requests.Requester;
 import org.apache.commons.lang3.StringUtils;
 import org.json.JSONObject;
 
@@ -189,7 +190,7 @@ public void delete()
     {
         checkPermission(Permission.MANAGE_CHANNEL);
 
-        ((JDAImpl) channel.getJDA()).getRequester().delete("https://discordapp.com/api/channels/" + channel.getId());
+        ((JDAImpl) channel.getJDA()).getRequester().delete(Requester.DISCORD_API_PREFIX + "channels/" + channel.getId());
     }
 
     /**
@@ -230,7 +231,7 @@ private JSONObject getFrame(Channel chan)
 
     private void update(Channel chan, JSONObject o)
     {
-        ((JDAImpl) chan.getJDA()).getRequester().patch("https://discordapp.com/api/channels/" + chan.getId(), o);
+        ((JDAImpl) chan.getJDA()).getRequester().patch(Requester.DISCORD_API_PREFIX + "channels/" + chan.getId(), o);
     }
 
     private void checkPermission(Permission perm)

File: src/main/java/net/dv8tion/jda/managers/PermissionOverrideManager.java
Patch:
@@ -19,6 +19,7 @@
 import net.dv8tion.jda.entities.PermissionOverride;
 import net.dv8tion.jda.entities.impl.JDAImpl;
 import net.dv8tion.jda.exceptions.PermissionException;
+import net.dv8tion.jda.requests.Requester;
 import org.json.JSONObject;
 
 public class PermissionOverrideManager
@@ -134,7 +135,7 @@ public void delete()
     {
         String targetId = override.isRoleOverride() ? override.getRole().getId() : override.getUser().getId();
         ((JDAImpl) override.getJDA()).getRequester()
-                .delete("https://discordapp.com/api/channels/" + override.getChannel().getId() + "/permissions/" + targetId);
+                .delete(Requester.DISCORD_API_PREFIX + "channels/" + override.getChannel().getId() + "/permissions/" + targetId);
     }
 
     /**
@@ -148,7 +149,7 @@ public void update()
         }
         String targetId = override.isRoleOverride() ? override.getRole().getId() : override.getUser().getId();
         ((JDAImpl) override.getJDA()).getRequester()
-                .put("https://discordapp.com/api/channels/" + override.getChannel().getId() + "/permissions/" + targetId,
+                .put(Requester.DISCORD_API_PREFIX + "channels/" + override.getChannel().getId() + "/permissions/" + targetId,
                         new JSONObject()
                                 .put("allow", allow)
                                 .put("deny", deny)

File: src/main/java/net/dv8tion/jda/requests/WebSocketClient.java
Patch:
@@ -397,7 +397,7 @@ private String getGateway()
     {
         try
         {
-            return api.getRequester().get("https://discordapp.com/api/gateway").getString("url");
+            return api.getRequester().get(Requester.DISCORD_API_PREFIX + "gateway").getString("url");
         }
         catch (Exception ex)
         {

File: src/main/java/net/dv8tion/jda/entities/impl/JDAImpl.java
Patch:
@@ -104,6 +104,8 @@ public void login(String botToken) throws IllegalArgumentException, LoginExcepti
         if (botToken == null || botToken.isEmpty())
             throw new IllegalArgumentException("The provided botToken was empty / null.");
 
+        botToken = "Bot " + botToken;
+
         accountManager=new AccountManager(this, null);
 
         if(!validate(botToken)) {

File: src/main/java/net/dv8tion/jda/entities/impl/MessageImpl.java
Patch:
@@ -185,7 +185,7 @@ public Message updateMessage(String newContent)
     @Override
     public void deleteMessage()
     {
-        if (!api.getSelfInfo().getId().equals(getAuthor().getId()))
+        if (api.getSelfInfo() != getAuthor())
         {
             if (isPrivate())
                 throw new PermissionException("Cannot delete another User's messages in a PrivateChannel.");

File: src/main/java/net/dv8tion/jda/JDABuilder.java
Patch:
@@ -192,6 +192,8 @@ public JDABuilder setAutoReconnect(boolean reconnect)
     }
 
     /**
+     * <b>This method is deprecated! Please switch to {@link #setEventManager(IEventManager)}.</b>
+     * <p>
      * Changes the internal EventManager.
      * The default EventManager is {@link net.dv8tion.jda.hooks.InterfacedEventManager InterfacedEventListener}.
      * There is also an {@link AnnotatedEventManager AnnotatedEventManager} available.

File: src/main/java/net/dv8tion/jda/audio/AudioConnection.java
Patch:
@@ -15,7 +15,6 @@
  */
 package net.dv8tion.jda.audio;
 
-import com.iwebpp.crypto.TweetNaclFast;
 import com.sun.jna.ptr.PointerByReference;
 import net.dv8tion.jda.JDA;
 import net.dv8tion.jda.entities.Guild;
@@ -34,7 +33,6 @@
 import java.nio.ByteBuffer;
 import java.nio.IntBuffer;
 import java.nio.ShortBuffer;
-import java.util.Arrays;
 
 public class AudioConnection
 {
@@ -202,6 +200,7 @@ else if (speaking && (System.currentTimeMillis() - lastFrameSent) > OPUS_FRAME_T
                 }
             }
         };
+        sendThread.setPriority((Thread.NORM_PRIORITY + Thread.MAX_PRIORITY) / 2);
         sendThread.setDaemon(true);
         sendThread.start();
     }

File: src/main/java/net/dv8tion/jda/audio/AudioWebSocket.java
Patch:
@@ -395,6 +395,7 @@ public void run()
                 }
             }
         };
+        udpKeepAliveThread.setPriority(Thread.NORM_PRIORITY + 1);
         udpKeepAliveThread.setDaemon(true);
         udpKeepAliveThread.start();
     }
@@ -424,6 +425,7 @@ public void run()
                 }
             }
         };
+        keepAliveThread.setPriority(Thread.MAX_PRIORITY);
         keepAliveThread.setDaemon(true);
         keepAliveThread.start();
     }

File: src/main/java/net/dv8tion/jda/handle/GuildLeaveHandler.java
Patch:
@@ -55,7 +55,7 @@ public void handle(JSONObject content)
         for (Guild g : api.getGuilds())
         {
             if (g == guild)
-            continue;
+                continue;
             usersInOtherGuilds.addAll(g.getUsers());
         }
         for (User user : users)

File: src/main/java/net/dv8tion/jda/requests/WebSocketClient.java
Patch:
@@ -132,6 +132,7 @@ public void onTextMessage(WebSocket websocket, String message)
                     }
                 }
             });
+            keepAliveThread.setPriority(Thread.MAX_PRIORITY);
             keepAliveThread.setDaemon(true);
             keepAliveThread.start();
         }

File: src/main/java/net/dv8tion/jda/audio/player/Player.java
Patch:
@@ -113,7 +113,7 @@ public byte[] provide20MsAudio()
             int amountRead;
             byte[] audio = new byte[AudioConnection.OPUS_FRAME_SIZE * audioFormat.getFrameSize()];
             amountRead = audioSource.read(audio, 0, audio.length);
-            if (amountRead > 0)
+            if (amountRead > -1)
             {
                 return audio;
             }

File: src/main/java/net/dv8tion/jda/utils/InviteUtil.java
Patch:
@@ -487,7 +487,7 @@ private static AdvancedInvite fromJson(JSONObject object, JDA jda)
         }
     }
 
-    enum InviteDuration {
+    public enum InviteDuration {
         INFINITE(0), THIRTY_MINUTES(1800),
         ONE_HOUR(3600), SIX_HOURS(6*3600), TWELVE_HOURS(12*3600),
         ONE_DAY(24*3600);

File: src/main/java/net/dv8tion/jda/utils/PermissionUtil.java
Patch:
@@ -135,7 +135,7 @@ private static boolean checkPermission(User user, Permission perm, GuildImpl gui
             return true;
 
         int effectivePerms = getEffectivePermission(user, guild, roleOverrides, userOverrides);
-        return (effectivePerms & (1 << perm.getOffset())) > 0;
+        return ((effectivePerms & (1 << Permission.MANAGE_PERMISSIONS.getOffset())) | (effectivePerms & (1 << perm.getOffset()))) > 0;
     }
 
     private static int getEffectivePermission(User user, GuildImpl guild, Map<Role, PermissionOverride> roleOverrides, Map<User, PermissionOverride> userOverrides)

File: src/main/java/net/dv8tion/jda/utils/ServiceUtil.java
Patch:
@@ -51,7 +51,7 @@ public static void loadServices()
         try
         {
             //Creates a new temp file to act as a dummy jar containing only our META-INF/services/ folder.
-            servicesJar = Files.createTempFile("jda-services", "jar").toFile();
+            servicesJar = Files.createTempFile("jda-services", ".jar").toFile();
             servicesJar.deleteOnExit();     //Sets to delete when the JVM closes, but it wont because it is loaded into the JVM. :/
             fos = new FileOutputStream(servicesJar);    //Opens an output stream so we can write to the file
             zos = new JarOutputStream(fos);             //Wraps the stream so we can treat it like writing to a Jar file

File: src/main/java/net/dv8tion/jda/managers/AudioManager.java
Patch:
@@ -354,15 +354,15 @@ private static synchronized void init()
             //The libraries that this is referencing are available in the src/main/resources/opus/ folder.
             //Of course, when JDA is compiled that just becomes /opus/
             lib = "/opus/" + Platform.RESOURCE_PREFIX;
-            if (lib.contains("win"))
+            if (lib.contains("darwin")) //Mac
+                lib += "/libopus.dylib";
+            else if (lib.contains("win"))
             {
                 //windows server doesn't return -32 or -64
                 if (lib.endsWith("x86"))
                     lib += "-32";
                 lib += "/opus.dll";
             }
-            else if (lib.contains("darwin"))
-                lib += "/libopus.dylib";
             else if (lib.contains("linux"))
                 lib += "/libopus.so";
             else

File: src/main/java/net/dv8tion/jda/entities/impl/JDAImpl.java
Patch:
@@ -501,7 +501,8 @@ public void shutdown()
     @Override
     public void shutdown(boolean free)
     {
-        getAudioManager().closeAudioConnection();
+        if (getAudioManager() != null)
+            getAudioManager().closeAudioConnection();
         client.close();
         authToken = null; //make further requests fail
         if (free)

File: src/examples/java/MessageListenerExample.java
Patch:
@@ -67,7 +67,7 @@ public void onInviteReceived(InviteReceivedEvent event)
         System.out.println("Got invite " + event.getInvite().getUrl());
         if (event.getMessage().getAuthor().getUsername().equalsIgnoreCase("kantenkugel"))
         {
-            InviteUtil.join(event.getInvite(), event.getJDA());
+            InviteUtil.join(event.getInvite(), event.getJDA(), null);
         }
     }
 

File: src/main/java/net/dv8tion/jda/utils/InviteUtil.java
Patch:
@@ -86,7 +86,7 @@ public static void join(String code, JDA jda)
 
     public static void join(String code, JDA jda, Consumer<Guild> callback)
     {
-        join(resolve(code), jda, null);
+        join(resolve(code), jda, callback);
     }
 
     public static void delete(Invite invite, JDA jda)

File: src/main/java/net/dv8tion/jda/entities/impl/JDAImpl.java
Patch:
@@ -341,7 +341,7 @@ public GuildManager createGuild(String name, Region region)
             throw new IllegalArgumentException("Guild name must not be null");
         }
         JSONObject response = getRequester().post("https://discordapp.com/api/guilds",
-                new JSONObject()).put("name", name).put("region", region.getKey());
+                new JSONObject().put("name", name).put("region", region.getKey()));
         if (response == null || !response.has("id"))
         {
             //error creating guild

File: src/main/java/net/dv8tion/jda/handle/ChannelDeleteHandler.java
Patch:
@@ -74,7 +74,8 @@ public void handle(JSONObject content)
                 if (channel == null)
                     throw new IllegalArgumentException("CHANNEL_DELETE attempted to delete a channel that doesn't exist! JSON: " + content);
 
-                if (api.getAudioManager().getConnectedChannel().getId().equals(channel.getId()))
+                if (api.getAudioManager() != null && api.getAudioManager().isConnected()
+                        && api.getAudioManager().getConnectedChannel().getId().equals(channel.getId()))
                     api.getAudioManager().closeAudioConnection();
                 guild.getVoiceChannelsMap().remove(channel.getId());
                 api.getEventManager().handle(

File: src/main/java/net/dv8tion/jda/handle/GuildLeaveHandler.java
Patch:
@@ -39,7 +39,8 @@ public void handle(JSONObject content)
             //TODO: Unavailable-event. Sever audio connection when guild becomes unavailable.
             return;
         }
-        if (api.getAudioManager().getConnectedChannel().getGuild().getId().equals(guild.getId()))
+        if (api.getAudioManager() != null && api.getAudioManager().isConnected()
+                && api.getAudioManager().getConnectedChannel().getGuild().getId().equals(guild.getId()))
             api.getAudioManager().closeAudioConnection();
 
         //TODO: clean up user db for those we don't see anymore (and handle pm channels)

File: src/main/java/net/dv8tion/jda/entities/impl/MessageImpl.java
Patch:
@@ -87,7 +87,7 @@ public boolean mentionsEveryone()
     @Override
     public OffsetDateTime getTime()
     {
-        return time.plusSeconds(0L);
+        return time;
     }
 
     @Override
@@ -99,7 +99,7 @@ public boolean isEdited()
     @Override
     public OffsetDateTime getEditedTimestamp()
     {
-        return editedTime.plusSeconds(0L);
+        return editedTime;
     }
 
     @Override

File: src/main/java/net/dv8tion/jda/entities/impl/JDAImpl.java
Patch:
@@ -347,7 +347,7 @@ public GuildManager createGuild(String name, Region region)
         }
         else
         {
-            Guild g = new EntityBuilder(this).createGuild(response);
+            Guild g = new EntityBuilder(this).createGuildFirstPass(response, null);
             return g.isAvailable() ? new GuildManager(g) : null;
         }
     }

File: src/main/java/net/dv8tion/jda/entities/impl/JDAImpl.java
Patch:
@@ -347,7 +347,7 @@ public GuildManager createGuild(String name, Region region)
         }
         else
         {
-            Guild g = new EntityBuilder(this).createGuild(response);
+            Guild g = new EntityBuilder(this).createGuildFirstPass(response, null);
             return g.isAvailable() ? new GuildManager(g) : null;
         }
     }

File: src/main/java/net/dv8tion/jda/requests/WebSocketClient.java
Patch:
@@ -129,6 +129,9 @@ public void onTextMessage(WebSocket websocket, String message)
                     sessionId = content.getString("session_id");
                     new ReadyHandler(api, responseTotal).handle(content);
                     break;
+                case "GUILD_MEMBERS_CHUNK":
+                    new GuildMembersChunkHandler(api, responseTotal).handle(content);
+                    break;
                 case "PRESENCE_UPDATE":
                     new PresenceUpdateHandler(api, responseTotal).handle(content);
                     break;

File: src/main/java/net/dv8tion/jda/handle/EntityBuilder.java
Patch:
@@ -422,7 +422,8 @@ public PermissionOverride createPermissionOverride(JSONObject override, Channel
             case "member":
                 User user = api.getUserById(id);
                 if (user == null)
-                    throw new IllegalArgumentException("Attempted to create a PermissionOverride for a non-existent user. JSON: " + override);
+                    return null;    //due to a breaking bug, we need to ignore this for now... working on a fix
+                    //throw new IllegalArgumentException("Attempted to create a PermissionOverride for a non-existent user. Guild: " + chan.getGuild() + ", Channel: " + chan + ", JSON: " + override);
 
                 permOverride = (PermissionOverrideImpl) chan.getOverrideForUser(user);
                 if (permOverride == null)

File: src/main/java/net/dv8tion/jda/entities/TextChannel.java
Patch:
@@ -15,9 +15,6 @@
  */
 package net.dv8tion.jda.entities;
 
-import java.io.File;
-import java.util.function.Consumer;
-
 /**
  * Represents a Discord Text Channel. See {@link net.dv8tion.jda.entities.Channel Channel} and
  * {@link net.dv8tion.jda.entities.MessageChannel MessageChannel} for more information.

File: src/main/java/net/dv8tion/jda/audio/player/Player.java
Patch:
@@ -84,7 +84,7 @@ public void setAudioSource(AudioInputStream inSource)
     public void setVolume(float volume)
     {
         this.amplitude = volume;
-        if (amplitudeAudioStream!=null)
+        if (amplitudeAudioStream != null)
         {
             amplitudeAudioStream.setAmplitudeLinear(amplitude);
         }

File: src/main/java/net/dv8tion/jda/utils/ServiceUtil.java
Patch:
@@ -176,7 +176,7 @@ public static void loadServices()
                     "org.tritonus.sampled.file.AuAudioFileReader",                      //Tritonus_Remaining
                     "org.tritonus.sampled.file.WaveAudioFileReader",                    //Tritonus_Remaining
                     "org.tritonus.sampled.file.AiffAudioFileReader",                    //Tritonus_Remaining
-                    "net.sourceforge.jaad.spi.javasound.AACAudioFileReader",            //JAAD
+//                    "net.sourceforge.jaad.spi.javasound.AACAudioFileReader",            //JAAD
                     "org.kc7bfi.jflac.sound.spi.FlacAudioFileReader"                    //jFLAC
                 )
             )

File: src/examples/java/AudioExample.java
Patch:
@@ -101,8 +101,9 @@ public void onGuildMessageReceived(GuildMessageReceivedEvent event)
                     // AudioManager. Handlers persist between audio connections. Furthermore, handler playback is also
                     // paused when a connection is severed (closeAudioConnection), however it would probably be better
                     // to pause the play back yourself before severing the connection (If you are using a player class
-                    // you could just call the pause() method.) Once again, you don't HAVE to pause before severing an
-                    // audio connection, but it probably would be good to do.
+                    // you could just call the pause() method. Otherwise, make canProvide() return false).
+                    // Once again, you don't HAVE to pause before severing an audio connection,
+                    // but it probably would be good to do.
                     event.getJDA().getAudioManager().setSendingHandler(player);
 
                     //Start playback. This will only start after the AudioConnection has completely connected.
@@ -148,6 +149,5 @@ else if (player.isStarted() && player.isStopped())  //If it did exist, has it be
             player.stop();
         if (message.equals("restart"))
             player.restart();
-
     }
 }

File: src/main/java/net/dv8tion/jda/utils/ServiceUtil.java
Patch:
@@ -160,8 +160,8 @@ public static void loadServices()
             Collections.unmodifiableList(
                 Arrays.asList(
                     "javazoom.spi.mpeg.sampled.convert.MpegFormatConversionProvider",   //MP3-SPI
-                    "org.tritonus.sampled.convert.UlawFormatConversionProvider",        //Tritonus_Remaining
-                    "org.tritonus.sampled.convert.AlawFormatConversionProvider",        //Tritonus_Remaining
+                    "org.tritonus.sampled.convert.LawEncoder",                          //Tritonus_Remaining
+                    "org.tritonus.sampled.convert.LawDecoder",                          //Tritonus_Remaining
                     "org.tritonus.sampled.convert.PCM2PCMConversionProvider",           //Tritonus_Remaining
                     "org.tritonus.sampled.convert.SampleRateConversionProvider",        //Tritonus_Remaining
                     "org.tritonus.sampled.convert.ImaAdpcmFormatConversionProvider"     //Tritonus_Remaining

File: src/main/java/net/dv8tion/jda/JDA.java
Patch:
@@ -345,6 +345,9 @@ public interface JDA
      * Depending on the free-parameter, this will also close the background-thread used for requests.
      * If the background-thread is closed, the system can exit properly, but no further JDA requests are possible (includes other JDA instances).
      * If you want to reconnect, and the request-thread was not freed, just create a new JDA instance.
+     *
+     * @param free
+     *          If true, shuts down JDA's rest system permanently.
      */
     void shutdown(boolean free);
 }

File: src/main/java/net/dv8tion/jda/entities/impl/JDAImpl.java
Patch:
@@ -479,6 +479,7 @@ public void shutdown()
     @Override
     public void shutdown(boolean free)
     {
+        getAudioManager().closeAudioConnection();
         client.close();
         authToken = null; //make further requests fail
         if (free)

File: src/main/java/net/dv8tion/jda/managers/AudioManager.java
Patch:
@@ -134,7 +134,10 @@ public boolean isAttemptingToConnect()
      * null.<br>
      * Also, if JDA is already connected, this will return null. To determine if JDA is already has an audio connection
      * with a {@link net.dv8tion.jda.entities.VoiceChannel VoiceChannel} use {@link #isConnected()}
+     *
      * @return
+     *      The {@link net.dv8tion.jda.entities.VoiceChannel VoiceChannel} that JDA is attempting to create an
+     *      audio connection with, or null if JDA isn't attempting to create a connection.
      */
     public VoiceChannel getQueuedAudioConnection()
     {

File: src/main/java/net/dv8tion/jda/utils/NativeUtils.java
Patch:
@@ -61,7 +61,7 @@ private NativeUtils() {
      * @param path The filename inside JAR as absolute path (beginning with '/'), e.g. /package/File.ext
      * @throws IOException If temporary file creation or read/write operation fails
      * @throws IllegalArgumentException If source file (param path) does not exist
-     * @throws IllegalArgumentException If the path is not absolute or if the filename is shorter than three characters (restriction of {@see File#createTempFile(java.lang.String, java.lang.String)}).
+     * @throws IllegalArgumentException If the path is not absolute or if the filename is shorter than three characters (restriction of {@link File#createTempFile(java.lang.String, java.lang.String)}).
      */
     public static void loadLibraryFromJar(String path) throws IOException {
 

File: src/main/java/net/dv8tion/jda/handle/VoiceServerUpdateHandler.java
Patch:
@@ -45,10 +45,10 @@ public void handle(JSONObject content)
         endpoint = endpoint.replace(":80", "");
 
         AudioManager audioManager = api.getAudioManager();
-        if (audioManager.connected())
+        if (audioManager.isConnected())
             throw new IllegalStateException("Received VOICE_SERVER_UPDATE event while already connected to a VoiceChannel.\n" +
                     "Did Discord allow multi-guild / multi-channel audio while we weren't looking? O.o");
-        if (!audioManager.attemptingToConnect())
+        if (!audioManager.isAttemptingToConnect())
             throw new IllegalStateException("Attempted to create an AudioConnection when we weren't expecting to create one.\n" +
                     "Did you attempt to start an audio connection...?");
 

File: src/main/java/net/dv8tion/jda/audio/player/FilePlayer.java
Patch:
@@ -80,7 +80,7 @@ public void restart()
         {
             File oldFile = audioFile;
             reset();
-            setAudioFile(audioFile);
+            setAudioFile(oldFile);
             play();
         }
         catch (IOException e)

File: src/main/java/net/dv8tion/jda/requests/WebSocketClient.java
Patch:
@@ -282,8 +282,8 @@ private void connect(String url)
         {
             socket = factory.createSocket(url)
                     .addHeader("Accept-Encoding", "gzip")
-                    .addListener(this)
-                    .connect();
+                    .addListener(this);
+            socket.connect();
         }
         catch (IOException | WebSocketException e)
         {

File: src/main/java/net/dv8tion/jda/entities/TextChannel.java
Patch:
@@ -43,12 +43,14 @@ public interface TextChannel extends Channel
      * This method only extracts the mentions, text and tts status out of the given Message-Object
      * Therefore this can also be used to resend already received Messages
      * To allow above behaviour, this method returns a new {@link net.dv8tion.jda.entities.Message Message} instance. The passed one is not modified!
-     * If the sending of the Message failed (probably Permissions), this method returns null
+     * If the sending of the Message failed (probably Permissions), this method returns null.
+     * When the Rate-limit is reached (30 Messages in 30 secs), a {@link net.dv8tion.jda.exceptions.RateLimitedException RateLimitedException} is thrown
      *
      * @param msg
      *          the {@link net.dv8tion.jda.entities.Message Message} to send
      * @return
      *      The created {@link net.dv8tion.jda.entities.Message Message} object or null if it failed
+     * @throws net.dv8tion.jda.exceptions.RateLimitedException when rate-imit is reached
      */
     Message sendMessage(Message msg);
 

File: src/main/java/net/dv8tion/jda/audio/AudioPacket.java
Patch:
@@ -87,8 +87,8 @@ public AudioPacket(char seq, int timestamp, int ssrc, byte[] encodedAudio)
         buffer.put(RTP_VERSION_PAD_EXTEND_INDEX, RTP_VERSION_PAD_EXTEND);   //0
         buffer.put(RTP_PAYLOAD_INDEX, RTP_PAYLOAD_TYPE);                    //1
         buffer.putChar(SEQ_INDEX, seq);                                     //2 - 3
-        buffer.putInt(TIMESTAMP_INDEX, ssrc);                               //4 - 7
-        buffer.putInt(SSRC_INDEX, timestamp);                               //8 - 11
+        buffer.putInt(TIMESTAMP_INDEX, timestamp);                          //4 - 7
+        buffer.putInt(SSRC_INDEX, ssrc);                                    //8 - 11
         System.arraycopy(encodedAudio, 0, buffer.array(), RTP_HEADER_BYTE_LENGTH, encodedAudio.length);//12 - n
         this.rawPacket = buffer.array();
     }

File: src/main/java/net/dv8tion/jda/requests/Requester.java
Patch:
@@ -28,6 +28,7 @@
 
 public class Requester
 {
+    private static final String USERAGENT = "JDA DiscordBot (" + JDAInfo.GITHUB + ", " + JDAInfo.VERSION + ")";
     private final JDAImpl api;
 
     public Requester(JDAImpl api)
@@ -123,7 +124,7 @@ private <T extends HttpRequest> T addHeaders(T request)
         {
             request.header("Content-Type", "application/json");
         }
-        request.header("user-agent", JDAInfo.GITHUB + " " + JDAInfo.VERSION);
+        request.header("user-agent", USERAGENT);
         request.header("Accept-Encoding", "gzip");
         return request;
     }

File: src/main/java/net/dv8tion/jda/handle/EntityBuilder.java
Patch:
@@ -376,8 +376,8 @@ protected MessageEmbed createMessageEmbed(JSONObject messageEmbed)
             JSONObject videoJson = messageEmbed.getJSONObject("video");
             embed.setVideoInfo(new VideoInfo(
                     videoJson.getString("url"),
-                    videoJson.getInt("width"),
-                    videoJson.getInt("height")));
+                    videoJson.isNull("width") ? -1 : videoJson.getInt("width"),
+                    videoJson.isNull("height") ? -1 : videoJson.getInt("height")));
         }
         return embed;
     }

File: src/examples/java/DiscordConsoleStream.java
Patch:
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-import java.io.PrintStream;
-
 import net.dv8tion.jda.entities.TextChannel;
 
+import java.io.PrintStream;
+
 /**
  * Completed as a request for a possible implementation that would redirect all
  * console output to a Discord {@link net.dv8tion.jda.entities.TextChannel TextChannel}.

File: src/main/java/net/dv8tion/jda/JDABuilder.java
Patch:
@@ -140,9 +140,10 @@ public JDABuilder setProxy(String proxyUrl, int proxyPort)
      * @param debug
      *          True - enables debug printing.
      */
-    public void setDebug(boolean debug)
+    public JDABuilder setDebug(boolean debug)
     {
        this.debug = debug;
+        return this;
     }
     /**
      * Adds a listener to the list of listeners that will be used to populate the {@link net.dv8tion.jda.JDA} object.

File: src/main/java/net/dv8tion/jda/events/message/guild/GenericGuildMessageEvent.java
Patch:
@@ -18,7 +18,6 @@
 import net.dv8tion.jda.JDA;
 import net.dv8tion.jda.entities.Guild;
 import net.dv8tion.jda.entities.Message;
-import net.dv8tion.jda.entities.PrivateChannel;
 import net.dv8tion.jda.entities.TextChannel;
 import net.dv8tion.jda.events.message.GenericMessageEvent;
 

File: src/main/java/net/dv8tion/jda/events/message/guild/GuildMessageDeleteEvent.java
Patch:
@@ -16,7 +16,6 @@
 package net.dv8tion.jda.events.message.guild;
 
 import net.dv8tion.jda.JDA;
-import net.dv8tion.jda.entities.PrivateChannel;
 import net.dv8tion.jda.entities.TextChannel;
 
 public class GuildMessageDeleteEvent extends GenericGuildMessageEvent

File: src/main/java/net/dv8tion/jda/events/message/guild/GuildMessageEmbedEvent.java
Patch:
@@ -17,7 +17,6 @@
 
 import net.dv8tion.jda.JDA;
 import net.dv8tion.jda.entities.MessageEmbed;
-import net.dv8tion.jda.entities.PrivateChannel;
 import net.dv8tion.jda.entities.TextChannel;
 
 import java.util.List;

File: src/main/java/net/dv8tion/jda/events/message/guild/GuildMessageReceivedEvent.java
Patch:
@@ -17,7 +17,6 @@
 
 import net.dv8tion.jda.JDA;
 import net.dv8tion.jda.entities.Message;
-import net.dv8tion.jda.entities.PrivateChannel;
 import net.dv8tion.jda.entities.TextChannel;
 
 public class GuildMessageReceivedEvent extends GenericGuildMessageEvent

File: src/main/java/net/dv8tion/jda/events/message/guild/GuildMessageUpdateEvent.java
Patch:
@@ -17,7 +17,6 @@
 
 import net.dv8tion.jda.JDA;
 import net.dv8tion.jda.entities.Message;
-import net.dv8tion.jda.entities.PrivateChannel;
 import net.dv8tion.jda.entities.TextChannel;
 
 public class GuildMessageUpdateEvent extends GenericGuildMessageEvent

File: src/main/java/net/dv8tion/jda/events/message/priv/PrivateMessageReceivedEvent.java
Patch:
@@ -18,7 +18,6 @@
 import net.dv8tion.jda.JDA;
 import net.dv8tion.jda.entities.Message;
 import net.dv8tion.jda.entities.PrivateChannel;
-import net.dv8tion.jda.entities.User;
 
 public class PrivateMessageReceivedEvent extends GenericPrivateMessageEvent
 {

File: src/main/java/net/dv8tion/jda/events/voice/VoiceLeaveEvent.java
Patch:
@@ -16,16 +16,16 @@
 package net.dv8tion.jda.events.voice;
 
 import net.dv8tion.jda.JDA;
-import net.dv8tion.jda.entities.User;
 import net.dv8tion.jda.entities.VoiceChannel;
+import net.dv8tion.jda.entities.VoiceStatus;
 
 public class VoiceLeaveEvent extends GenericVoiceEvent
 {
     protected final VoiceChannel channel;
 
-    public VoiceLeaveEvent(JDA api, int responseNumber, User user, VoiceChannel channel)
+    public VoiceLeaveEvent(JDA api, int responseNumber, VoiceStatus voiceStatus, VoiceChannel channel)
     {
-        super(api, responseNumber, user);
+        super(api, responseNumber, voiceStatus);
         this.channel = channel;
     }
 

File: src/main/java/net/dv8tion/jda/events/voice/VoiceSelfDeafEvent.java
Patch:
@@ -16,12 +16,12 @@
 package net.dv8tion.jda.events.voice;
 
 import net.dv8tion.jda.JDA;
-import net.dv8tion.jda.entities.User;
+import net.dv8tion.jda.entities.VoiceStatus;
 
 public class VoiceSelfDeafEvent extends VoiceDeafEvent
 {
-    public VoiceSelfDeafEvent(JDA api, int responseNumber, User user)
+    public VoiceSelfDeafEvent(JDA api, int responseNumber, VoiceStatus voiceStatus)
     {
-        super(api, responseNumber, user);
+        super(api, responseNumber, voiceStatus);
     }
 }

File: src/main/java/net/dv8tion/jda/events/voice/VoiceSelfMuteEvent.java
Patch:
@@ -16,12 +16,12 @@
 package net.dv8tion.jda.events.voice;
 
 import net.dv8tion.jda.JDA;
-import net.dv8tion.jda.entities.User;
+import net.dv8tion.jda.entities.VoiceStatus;
 
 public class VoiceSelfMuteEvent extends VoiceMuteEvent
 {
-    public VoiceSelfMuteEvent(JDA api, int responseNumber, User user)
+    public VoiceSelfMuteEvent(JDA api, int responseNumber, VoiceStatus voiceStatus)
     {
-        super(api, responseNumber, user);
+        super(api, responseNumber, voiceStatus);
     }
 }

File: src/main/java/net/dv8tion/jda/events/voice/VoiceServerDeafEvent.java
Patch:
@@ -16,12 +16,12 @@
 package net.dv8tion.jda.events.voice;
 
 import net.dv8tion.jda.JDA;
-import net.dv8tion.jda.entities.User;
+import net.dv8tion.jda.entities.VoiceStatus;
 
 public class VoiceServerDeafEvent extends VoiceDeafEvent
 {
-    public VoiceServerDeafEvent(JDA api, int responseNumber, User user)
+    public VoiceServerDeafEvent(JDA api, int responseNumber, VoiceStatus voiceStatus)
     {
-        super(api, responseNumber, user);
+        super(api, responseNumber, voiceStatus);
     }
 }

File: src/main/java/net/dv8tion/jda/events/voice/VoiceServerMuteEvent.java
Patch:
@@ -16,12 +16,12 @@
 package net.dv8tion.jda.events.voice;
 
 import net.dv8tion.jda.JDA;
-import net.dv8tion.jda.entities.User;
+import net.dv8tion.jda.entities.VoiceStatus;
 
 public class VoiceServerMuteEvent extends VoiceMuteEvent
 {
-    public VoiceServerMuteEvent(JDA api, int responseNumber, User user)
+    public VoiceServerMuteEvent(JDA api, int responseNumber, VoiceStatus voiceStatus)
     {
-        super(api, responseNumber, user);
+        super(api, responseNumber, voiceStatus);
     }
 }

File: src/main/java/net/dv8tion/jda/handle/MessageUpdateHandler.java
Patch:
@@ -16,9 +16,7 @@
 package net.dv8tion.jda.handle;
 
 import net.dv8tion.jda.entities.Message;
-import net.dv8tion.jda.entities.TextChannel;
 import net.dv8tion.jda.entities.impl.JDAImpl;
-import net.dv8tion.jda.events.message.MessageEmbedEvent;
 import net.dv8tion.jda.events.message.MessageUpdateEvent;
 import net.dv8tion.jda.events.message.guild.GuildMessageUpdateEvent;
 import net.dv8tion.jda.events.message.priv.PrivateMessageUpdateEvent;

File: src/main/java/net/dv8tion/jda/handle/ReadyHandler.java
Patch:
@@ -41,7 +41,7 @@ public ReadyHandler(JDAImpl api, int responseNumber)
     @Override
     public void handle(JSONObject content)
     {
-        //TODO: User-Setings; read_state; guild voice states; voice channels
+        //TODO: User-Setings; read_state; voice channels
         builder.createSelfInfo(content.getJSONObject("user"));
         JSONArray muted = content.getJSONObject("user_settings").getJSONArray("muted_channels");
         List<String> mutedChannelIds = new ArrayList<>();

File: src/main/java/net/dv8tion/jda/handle/GuildLeaveHandler.java
Patch:
@@ -32,10 +32,10 @@ public GuildLeaveHandler(JDAImpl api, int responseNumber)
     public void handle(JSONObject content)
     {
         Guild guild = api.getGuildMap().get(content.getString("id"));
+        api.getGuildMap().remove(guild.getId());
         api.getEventManager().handle(
                 new GuildLeaveEvent(
                         api, responseNumber,
                         guild));
-        api.getGuildMap().remove(guild.getId());
     }
 }

File: src/main/java/net/dv8tion/jda/entities/impl/PermissionOverrideImpl.java
Patch:
@@ -82,13 +82,13 @@ public JDA getJDA()
     @Override
     public User getUser()
     {
-        return null;
+        return user;
     }
 
     @Override
     public Role getRole()
     {
-        return null;
+        return role;
     }
 
     @Override

File: src/main/java/net/dv8tion/jda/handle/GuildRoleUpdateHandler.java
Patch:
@@ -43,7 +43,7 @@ public void handle(JSONObject content)
             role.setPosition(rolejson.getInt("position"));
             api.getEventManager().handle(new GuildRoleUpdatePositionEvent(api, responseNumber, role));
         }
-        if (role.getPermissions() != rolejson.getInt("permissions"))
+        if (role.getPermissionsRaw() != rolejson.getInt("permissions"))
         {
             role.setPermissions(rolejson.getInt("permissions"));
             api.getEventManager().handle(new GuildRoleUpdatePermissionEvent(api, responseNumber, role));

File: src/main/java/net/dv8tion/jda/managers/RoleManager.java
Patch:
@@ -41,7 +41,7 @@ public class RoleManager
     public RoleManager(Role role)
     {
         this.role = role;
-        perms = ((RoleImpl) role).getPermissions();
+        perms = ((RoleImpl) role).getPermissionsRaw();
     }
 
     /**

File: src/main/java/net/dv8tion/jda/entities/impl/GuildImpl.java
Patch:
@@ -75,7 +75,7 @@ public String getIconId()
     @Override
     public String getIconUrl()
     {
-        return "https://cdn.discordapp.com/icons/" + getId() + "/" + getIconId() + ".jpg";
+        return iconId == null ? null : "https://cdn.discordapp.com/icons/" + getId() + "/" + getIconId() + ".jpg";
     }
 
     @Override

File: src/main/java/net/dv8tion/jda/handle/EntityBuilder.java
Patch:
@@ -291,7 +291,7 @@ public Message createMessage(JSONObject jsonObject)
             JSONArray mentions = jsonObject.getJSONArray("mentions");
             for (int i = 0; i < mentions.length(); i++)
             {
-                JSONObject mention = mentions.getJSONObject(0);
+                JSONObject mention = mentions.getJSONObject(i);
                 mentioned.add(api.getUserMap().get(mention.getString("id")));
             }
             message.setMentionedUsers(mentioned);

File: src/main/java/net/dv8tion/jda/entities/impl/GuildImpl.java
Patch:
@@ -201,7 +201,8 @@ public void kick(User u)
     @Override
     public void ban(User u, int delDays)
     {
-        api.getRequester().put("https://discordapp.com/api/guilds/" + getId() + "/bans/" + u.getId() + (delDays > 0 ? "?delete-message-days=0" : ""), new JSONObject());
+        api.getRequester().put("https://discordapp.com/api/guilds/" + getId() + "/bans/" + u.getId()
+                + (delDays > 0 ? "?delete-message-days=" + delDays : ""), new JSONObject());
     }
 
     @Override

File: src/main/java/net/dv8tion/jda/handle/GuildLeaveHandler.java
Patch:
@@ -36,5 +36,6 @@ public void handle(JSONObject content)
                 new GuildLeaveEvent(
                         api, responseNumber,
                         guild));
+        api.getGuildMap().remove(guild.getId());
     }
 }

File: src/main/java/net/dv8tion/jda/entities/impl/JDAImpl.java
Patch:
@@ -41,7 +41,7 @@
 /**
  * Represents the core of the Discord API. All functionality is connected through this.
  */
-public class JDAImpl extends JDA
+public class JDAImpl implements JDA
 {
     private final HttpHost proxy;
     private final Map<String, User> userMap = new HashMap<>();
@@ -84,7 +84,6 @@ public JDAImpl(String proxyUrl, int proxyPort)
      * @throws LoginException
      *          Thrown if the email-password combination fails the auth check with the Discord servers.
      */
-    @Override
     public void login(String email, String password) throws IllegalArgumentException, LoginException
     {
         if (email == null || email.isEmpty() || password == null || password.isEmpty())

File: src/main/java/net/dv8tion/jda/handle/GuildMemberBanHandler.java
Patch:
@@ -39,7 +39,6 @@ public void handle(JSONObject content)
         GuildImpl guild = (GuildImpl) api.getGuildMap().get(content.getString("guild_id"));
         if (banned)
         {
-            System.out.println("ID is: " + userJson.getString("id"));
             User user = api.getUserMap().get(userJson.getString("id"));
             api.getEventManager().handle(
                     new GuildMemberBanEvent(
@@ -48,8 +47,6 @@ public void handle(JSONObject content)
         }
         else
         {
-
-            System.out.println("ID is: " + userJson.getString("id"));
             String id = userJson.getString("id");
             String username = userJson.getString("username");
             String discriminator = userJson.get("discriminator").toString();

File: src/main/java/net/dv8tion/jda/JDA.java
Patch:
@@ -53,6 +53,8 @@ public abstract class JDA
 
     public abstract User getUserById(String id);
 
+    public abstract List<User> getUsersByName(String name);
+
     public abstract List<Guild> getGuilds();
 
     public abstract Guild getGuildById(String id);

File: src/main/java/net/dv8tion/jda/entities/impl/UserImpl.java
Patch:
@@ -142,7 +142,7 @@ public UserImpl setOnlineStatus(OnlineStatus onlineStatus)
     public UserImpl setPrivateChannel(PrivateChannel channel)
     {
         this.privateChannel = channel;
-        api.getPmChannelMap().put(getId(), channel);
+        api.getPmChannelMap().put(channel.getId(), channel);
         return this;
     }
 

File: src/main/java/net/dv8tion/jda/JDA.java
Patch:
@@ -65,6 +65,8 @@ public abstract class JDA
 
     public abstract VoiceChannel getVoiceChannelById(String id);
 
+    public abstract PrivateChannel getPrivateChannelById(String id);
+
     /**
      * Returns the currently logged in account represented by {@link net.dv8tion.jda.entities.SelfInfo SelfInfo}.<br>
      * Account settings <b>cannot</b> be modified using this object. If you wish to modify account settings please

File: src/main/java/net/dv8tion/jda/events/channel/priv/PrivateChannelCreateEvent.java
Patch:
@@ -27,6 +27,7 @@ public class PrivateChannelCreateEvent extends Event
     public PrivateChannelCreateEvent(JDA api, int responseNumber, User user)
     {
         super(api, responseNumber);
+        this.user = user;
     }
 
     public User getUser()

File: src/main/java/net/dv8tion/jda/events/message/MessageReceivedEvent.java
Patch:
@@ -37,16 +37,16 @@ public boolean isPrivate()
 
     public TextChannel getTextChannel()
     {
-        return getMessage().getTextChannel();
+        return getJDA().getTextChannelById(getMessage().getChannelId());
     }
 
     public PrivateChannel getPrivateChannel()
     {
-        return getMessage().getPrivateChannel();
+        return getJDA().getPrivateChannelById(getMessage().getChannelId());
     }
 
     public Guild getGuild()
     {
-        return getMessage().isPrivate() ? null : getMessage().getTextChannel().getGuild();
+        return isPrivate() ? null : getTextChannel().getGuild();
     }
 }

File: src/main/java/net/dv8tion/jda/entities/impl/PrivateChannelImpl.java
Patch:
@@ -59,7 +59,7 @@ public Message sendMessage(Message msg)
         try
         {
             JSONObject response = api.getRequester().post("https://discordapp.com/api/channels/" + getId() + "/messages",
-                    new JSONObject().put("content", msg.getContent()));
+                    new JSONObject().put("content", msg.getRawContent()));
 
             return new EntityBuilder(api).createMessage(response);
         }

File: src/main/java/net/dv8tion/jda/entities/impl/TextChannelImpl.java
Patch:
@@ -96,7 +96,7 @@ public Message sendMessage(Message msg)
         try
         {
             JSONObject response = api.getRequester().post("https://discordapp.com/api/channels/" + getId() + "/messages",
-                    new JSONObject().put("content", msg.getContent()).put("tts", msg.isTTS()));
+                    new JSONObject().put("content", msg.getRawContent()).put("tts", msg.isTTS()));
             return new EntityBuilder(api).createMessage(response);
         }
         catch (JSONException ex)

File: src/main/java/net/dv8tion/jda/entities/impl/AccountManagerImpl.java
Patch:
@@ -44,7 +44,7 @@ public void update()
 
             SelfInfoImpl self = (SelfInfoImpl) api.getSelfInfo();
 
-            self.setAvatarId(result.getString("avatar"));
+            self.setAvatarId(result.isNull("avatar") ? null : result.getString("avatar"));
             self.setDiscriminator(result.getString("discriminator"));
             self.setEmail(result.getString("email"));
             // self.setID(result.getString("id")); ID should never change unless something really really bad happens

File: src/main/java/net/dv8tion/jda/entities/impl/AccountManagerImpl.java
Patch:
@@ -44,7 +44,7 @@ public void update()
 
             SelfInfoImpl self = (SelfInfoImpl) api.getSelfInfo();
 
-            self.setAvatarId(result.getString("avatar"));
+            self.setAvatarId(result.isNull("avatar") ? null : result.getString("avatar"));
             self.setDiscriminator(result.getString("discriminator"));
             self.setEmail(result.getString("email"));
             // self.setID(result.getString("id")); ID should never change unless something really really bad happens

File: src/main/java/net/dv8tion/jda/requests/Requester.java
Patch:
@@ -41,7 +41,7 @@ public JSONObject get(String url)
 
     public JSONObject delete(String url)
     {
-        return toObject(addHeaders(Unirest.patch(url)));
+        return toObject(addHeaders(Unirest.delete(url)));
     }
 
     public JSONObject post(String url, JSONObject body)
@@ -61,7 +61,7 @@ public JSONArray getA(String url)
 
     public JSONArray deleteA(String url)
     {
-        return toArray(addHeaders(Unirest.patch(url)));
+        return toArray(addHeaders(Unirest.delete(url)));
     }
 
     public JSONArray postA(String url, JSONObject body)

File: src/main/java/net/dv8tion/jda/handle/PresenceUpdateHandler.java
Patch:
@@ -77,7 +77,7 @@ public void handle(JSONObject content)
                             api, responseNumber,
                             user, oldStatus));
         }
-        if (!user.getCurrentGame().equals(gameName))
+        if (!StringUtils.equals(user.getCurrentGame(), gameName))
         {
             String oldGameName = user.getCurrentGame();
             user.setCurrentGame(gameName);

File: src/examples/java/ChannelListenerExample.java
Patch:
@@ -13,7 +13,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package net.dv8tion.jda.examples;
 
 import net.dv8tion.jda.JDA;
 import net.dv8tion.jda.JDABuilder;

File: src/examples/java/DiscordConsoleStream.java
Patch:
@@ -13,7 +13,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package net.dv8tion.jda.examples;
 
 import java.io.PrintStream;
 

File: src/examples/java/GuildListenerExample.java
Patch:
@@ -13,7 +13,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package net.dv8tion.jda.examples;
 
 import net.dv8tion.jda.JDA;
 import net.dv8tion.jda.JDABuilder;

File: src/examples/java/MessageListenerExample.java
Patch:
@@ -13,7 +13,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package net.dv8tion.jda.examples;
 
 import net.dv8tion.jda.JDA;
 import net.dv8tion.jda.JDABuilder;

File: src/net/dv8tion/jda/handle/VoiceChangeHandler.java
Patch:
@@ -50,7 +50,8 @@ public void handle(JSONObject content)
         }
         else
         {
-            if (!content.getString("channel_id").equals(status.getChannel().getId()))
+            if (status.getChannel() == null ||
+                    !content.getString("channel_id").equals(status.getChannel().getId()))
             {
                 VoiceChannel oldChannel = status.getChannel();
                 VoiceChannel newChannel = api.getVoiceChannelMap().get("channel_id");

File: src/net/dv8tion/jda/JDA.java
Patch:
@@ -224,7 +224,7 @@ public Map<String, String> getOffline_pms()
     /**
      * Returns the currently logged in account represented by {@link net.dv8tion.jda.entities.SelfInfo SelfInfo}.<br>
      * Account settings <b>cannot</b> be modified using this object. If you wish to modify account settings please
-     *   use the {@link net.dv8tion.jda.AccountManager AccountManager}.
+     *   use the AccountManager.
      *
      * @return
      *      The currently logged in account.

File: src/net/dv8tion/jda/entities/Message.java
Patch:
@@ -96,7 +96,7 @@ public interface Message
      * If The Message was not created by this account, this does not have any effect
      * If this method failed, null gets returned
      *
-     * @param new_content the new content of the Message
+     * @param newContent the new content of the Message
      * @return a new Message-Object for the edited message
      */
     Message updateMessage(String newContent);

File: src/net/dv8tion/jda/entities/Role.java
Patch:
@@ -21,7 +21,7 @@ public interface Role
 {
     /**
      * The position of this {@link net.dv8tion.jda.entities.Role Role} in the {@link net.dv8tion.jda.entities.Guild Guild} hierarchy.<br>
-     * (higher value -> higher role).<br>
+     * (higher value means higher role).<br>
      * The @everyone {@link net.dv8tion.jda.entities.Role Role} always return -1
      *
      * @return

File: src/net/dv8tion/jda/entities/impl/TextChannelImpl.java
Patch:
@@ -175,7 +175,7 @@ public TextChannelImpl setTopic(String topic)
     public TextChannelImpl setPosition(int position)
     {
         this.position = position;
-        return null;
+        return this;
     }
 
     public Map<User, PermissionOverride> getUserPermissionOverrides()

File: src/net/dv8tion/jda/requests/WebSocketClient.java
Patch:
@@ -23,6 +23,7 @@
 
 import net.dv8tion.jda.JDA;
 import net.dv8tion.jda.handle.ChannelCreateHandler;
+import net.dv8tion.jda.handle.ChannelDeleteHandler;
 import net.dv8tion.jda.handle.GuildJoinHandler;
 import net.dv8tion.jda.handle.GuildLeaveHandler;
 import net.dv8tion.jda.handle.GuildMemberAddHandler;
@@ -154,7 +155,7 @@ public void onMessage(String message)
                 if (printUnimplemented) System.out.println(message);
                 break;
             case "CHANNEL_DELETE":
-                if (printUnimplemented) System.out.println(message);
+                new ChannelDeleteHandler(api, responseTotal).handle(content);
                 break;
             case "GUILD_CREATE":
                 new GuildJoinHandler(api, responseTotal).handle(content);

File: src/net/dv8tion/jda/events/channel/text/GenericTextChannelEvent.java
Patch:
@@ -23,7 +23,7 @@ public abstract class GenericTextChannelEvent extends Event
 {
     private TextChannel channel;
 
-    public GenericTextChannelEvent(TextChannel channel, JDA api)
+    public GenericTextChannelEvent(JDA api, TextChannel channel)
     {
         super(api);
         this.channel = channel;

File: src/net/dv8tion/jda/events/channel/text/TextChannelCreateEvent.java
Patch:
@@ -21,8 +21,8 @@
 public class TextChannelCreateEvent extends GenericTextChannelEvent
 {
 
-    public TextChannelCreateEvent(TextChannel channel, JDA api)
+    public TextChannelCreateEvent(JDA api, TextChannel channel)
     {
-        super(channel, api);
+        super(api, channel);
     }
 }

File: src/net/dv8tion/jda/events/channel/text/TextChannelDeleteEvent.java
Patch:
@@ -20,8 +20,8 @@
 
 public class TextChannelDeleteEvent extends GenericTextChannelEvent
 {
-    public TextChannelDeleteEvent(TextChannel channel, JDA api)
+    public TextChannelDeleteEvent(JDA api, TextChannel channel)
     {
-        super(channel, api);
+        super(api, channel);
     }
 }

File: src/net/dv8tion/jda/events/channel/text/TextChannelUpdateEvent.java
Patch:
@@ -20,8 +20,8 @@
 
 public class TextChannelUpdateEvent extends GenericTextChannelEvent
 {
-    public TextChannelUpdateEvent(TextChannel channel, JDA api)
+    public TextChannelUpdateEvent(JDA api, TextChannel channel)
     {
-        super(channel, api);
+        super(api, channel);
     }
 }

File: src/net/dv8tion/jda/events/channel/voice/GenericVoiceChannelEvent.java
Patch:
@@ -23,7 +23,7 @@ public abstract class GenericVoiceChannelEvent extends Event
 {
     private VoiceChannel channel;
 
-    public GenericVoiceChannelEvent(VoiceChannel channel, JDA api)
+    public GenericVoiceChannelEvent(JDA api, VoiceChannel channel)
     {
         super(api);
         this.channel = channel;

File: src/net/dv8tion/jda/events/channel/voice/VoiceChannelCreateEvent.java
Patch:
@@ -21,8 +21,8 @@
 public class VoiceChannelCreateEvent extends GenericVoiceChannelEvent
 {
 
-    public VoiceChannelCreateEvent(VoiceChannel channel, JDA api)
+    public VoiceChannelCreateEvent(JDA api, VoiceChannel channel)
     {
-        super(channel, api);
+        super(api, channel);
     }
 }

File: src/net/dv8tion/jda/events/channel/voice/VoiceChannelDeleteEvent.java
Patch:
@@ -20,8 +20,8 @@
 
 public class VoiceChannelDeleteEvent extends GenericVoiceChannelEvent
 {
-    public VoiceChannelDeleteEvent(VoiceChannel channel, JDA api)
+    public VoiceChannelDeleteEvent(JDA api, VoiceChannel channel)
     {
-        super(channel, api);
+        super(api, channel);
     }
 }

File: src/net/dv8tion/jda/events/channel/voice/VoiceChannelUpdateEvent.java
Patch:
@@ -20,8 +20,8 @@
 
 public class VoiceChannelUpdateEvent extends GenericVoiceChannelEvent
 {
-    public VoiceChannelUpdateEvent(VoiceChannel channel, JDA api)
+    public VoiceChannelUpdateEvent(JDA api, VoiceChannel channel)
     {
-        super(channel, api);
+        super(api, channel);
     }
 }

File: src/net/dv8tion/jda/events/guild/GuildCreateEvent.java
Patch:
@@ -16,11 +16,12 @@
 package net.dv8tion.jda.events.guild;
 
 import net.dv8tion.jda.JDA;
+import net.dv8tion.jda.entities.Guild;
 
 public class GuildCreateEvent extends GenericGuildEvent
 {
-    public GuildCreateEvent(JDA api)
+    public GuildCreateEvent(JDA api, Guild guild)
     {
-        super(api);
+        super(api, guild);
     }
 }

File: src/net/dv8tion/jda/events/guild/GuildDeleteEvent.java
Patch:
@@ -21,6 +21,6 @@ public class GuildDeleteEvent extends GenericGuildEvent
 {
     public GuildDeleteEvent(JDA api)
     {
-        super(api);
+        super(api, null);
     }
 }

File: src/net/dv8tion/jda/events/guild/GuildUpdateEvent.java
Patch:
@@ -16,11 +16,12 @@
 package net.dv8tion.jda.events.guild;
 
 import net.dv8tion.jda.JDA;
+import net.dv8tion.jda.entities.Guild;
 
 public class GuildUpdateEvent extends GenericGuildEvent
 {
-    public GuildUpdateEvent(JDA api)
+    public GuildUpdateEvent(JDA api, Guild guild)
     {
-        super(api);
+        super(api, guild);
     }
 }

File: src/net/dv8tion/jda/events/message/MessageDeleteEvent.java
Patch:
@@ -21,6 +21,6 @@ public class MessageDeleteEvent extends GenericMessageEvent
 {
     public MessageDeleteEvent(JDA api)
     {
-        super(api);
+        super(api, null);
     }
 }

File: src/net/dv8tion/jda/events/message/MessageUpdateEvent.java
Patch:
@@ -20,8 +20,8 @@
 
 public class MessageUpdateEvent extends MessageReceivedEvent
 {
-    public MessageUpdateEvent(Message message, JDA api)
+    public MessageUpdateEvent(JDA api, Message message)
     {
-        super(message, api);
+        super(api, message);
     }
 }

File: src/net/dv8tion/jda/events/user/UserTypingEvent.java
Patch:
@@ -15,20 +15,20 @@
  */
 package net.dv8tion.jda.events.user;
 
+import java.time.OffsetDateTime;
+
 import net.dv8tion.jda.JDA;
 import net.dv8tion.jda.entities.TextChannel;
 import net.dv8tion.jda.entities.User;
 import net.dv8tion.jda.events.Event;
 
-import java.time.OffsetDateTime;
-
 public class UserTypingEvent extends Event
 {
     private User user;
     private TextChannel channel;
     private OffsetDateTime timestamp;
 
-    public UserTypingEvent(User user, TextChannel channel, OffsetDateTime timestamp, JDA api)
+    public UserTypingEvent(JDA api, User user, TextChannel channel, OffsetDateTime timestamp)
     {
         super(api);
         this.user = user;

File: src/net/dv8tion/jda/handle/ChannelCreateHandler.java
Patch:
@@ -44,7 +44,8 @@ else if (content.has("recipient"))
         {
             api.getEventManager().handle(
                     new TextChannelCreateEvent(
-                            new EntityBuilder(api).createTextChannel(content, content.getString("guild_id")), api));
+                            api,
+                            new EntityBuilder(api).createTextChannel(content, content.getString("guild_id"))));
         }
         else if (type.equals("voice"))
         {

File: src/net/dv8tion/jda/handle/UserTypingHandler.java
Patch:
@@ -43,6 +43,7 @@ public void handle(JSONObject content)
 
         TextChannel channel = api.getChannelMap().get(content.getString("channel_id"));
         OffsetDateTime timestamp = Instant.ofEpochSecond(content.getInt("timestamp")).atOffset(ZoneOffset.UTC);
-        api.getEventManager().handle(new UserTypingEvent(user, channel, timestamp, api));
+        api.getEventManager().handle(
+                new UserTypingEvent(api, user, channel, timestamp));
     }
 }

File: src/examples/MessageExample.java
Patch:
@@ -36,7 +36,7 @@
 public class MessageExample extends ListenerAdapter
 {
     /**
-     * Used for the internal test bot. Will be removed.
+     * Used for the internal test bot.
      *
      * @param args
      */

File: src/examples/MessageExample.java
Patch:
@@ -27,7 +27,7 @@
 import net.dv8tion.jda.entities.Guild;
 import net.dv8tion.jda.entities.TextChannel;
 import net.dv8tion.jda.entities.User;
-import net.dv8tion.jda.events.MessageCreateEvent;
+import net.dv8tion.jda.events.MessageReceivedEvent;
 import net.dv8tion.jda.hooks.ListenerAdapter;
 
 import org.json.JSONException;
@@ -97,7 +97,7 @@ private static JSONObject getConfig()
     }
 
     @Override
-    public void onMessageCreate(MessageCreateEvent event)
+    public void onMessageReceived(MessageReceivedEvent event)
     {
         User author = event.getMessage().getAuthor();
         TextChannel channel = event.getMessage().getChannel();

File: src/net/dv8tion/jda/events/MessageReceivedEvent.java
Patch:
@@ -18,11 +18,11 @@
 import net.dv8tion.jda.entities.Message;
 import net.dv8tion.jda.events.generic.GenericMessageEvent;
 
-public class MessageCreateEvent extends GenericMessageEvent
+public class MessageReceivedEvent extends GenericMessageEvent
 {
     private final Message message;
 
-    public MessageCreateEvent(Message message)
+    public MessageReceivedEvent(Message message)
     {
         this.message = message;
     }

File: src/net/dv8tion/jda/hooks/ListenerAdapter.java
Patch:
@@ -28,10 +28,10 @@ public void onEvent(Event event)
             onReady(((ReadyEvent) event));
 
         //Message Events
-        else if (event instanceof MessageCreateEvent)
-            onMessageCreate(((MessageCreateEvent) event));
         else if (event instanceof MessageUpdateEvent)
             onMessageUpdate(((MessageUpdateEvent) event));
+        else if (event instanceof MessageReceivedEvent)
+            onMessageReceived(((MessageReceivedEvent) event));
         else if (event instanceof MessageDeleteEvent)
             onMessageDelete(((MessageDeleteEvent) event));
 
@@ -72,7 +72,7 @@ public void onUserOnlineStatusUpdateEvent(Event event) {}
     public void onUserGameUpdateEvent(Event event) {}
 
     //Message Events
-    public void onMessageCreate(MessageCreateEvent event) {}
+    public void onMessageReceived(MessageReceivedEvent event) {}
     public void onMessageUpdate(MessageUpdateEvent event) {}
     public void onMessageDelete(MessageDeleteEvent event) {}
 

File: src/net/dv8tion/jda/handle/EntityBuilder.java
Patch:
@@ -213,7 +213,8 @@ protected Message createMessage(JSONObject jsonObject)
         JSONArray mentions = jsonObject.getJSONArray("mentions");
         for (int i = 0; i < mentions.length(); i++)
         {
-            mentioned.add(api.getUserMap().get(mentions.getString(i)));
+            JSONObject mention = mentions.getJSONObject(0);
+            mentioned.add(api.getUserMap().get(mention.getString("id")));
         }
         message.setMentionedUsers(mentioned);
 

File: src/net/dv8tion/jda/handle/MessageCreateHandler.java
Patch:
@@ -20,8 +20,8 @@ public MessageCreateHandler(JDA api)
     @Override
     public void handle(JSONObject content)
     {
-        String id = content.getString("id");
-        TextChannel channel = api.getChannelMap().get(id);
+        String channel_id = content.getString("channel_id");
+        TextChannel channel = api.getChannelMap().get(channel_id);
         if (channel != null)
         {
             api.getEventManager().handle(new MessageCreateEvent(new EntityBuilder(api).createMessage(content)));

File: src/net/dv8tion/jda/entities/PrivateChannel.java
Patch:
@@ -21,18 +21,18 @@
 public interface PrivateChannel
 {
     /**
-     * The Id of the {@link net.dv8tion.jda.entites.PrivateChannel PrivateChannel}. This is typically 18 characters long.
+     * The Id of the {@link net.dv8tion.jda.entities.PrivateChannel PrivateChannel}. This is typically 18 characters long.
      *
      * @return
      *      String containing Id.
      */
     String getId();
 
     /**
-     * The {@link net.dv8tion.jda.entites.User User} that this {@link net.dv8tion.jda.entites.PrivateChannel PrivateChannel} communicates with.
+     * The {@link net.dv8tion.jda.entities.User User} that this {@link net.dv8tion.jda.entities.PrivateChannel PrivateChannel} communicates with.
      *
      * @return
-     *      A non-null {@link net.dv8tion.jda.entites.User User}.
+     *      A non-null {@link net.dv8tion.jda.entities.User User}.
      */
     User getUser();
 }

File: src/net/dv8tion/jda/handle/EntityBuilder.java
Patch:
@@ -107,12 +107,13 @@ else if (type.equalsIgnoreCase("voice"))
     protected TextChannel createTextChannel(JSONObject json, String guildId)
     {
         String id = json.getString("id");
-        GuildImpl guild = ((GuildImpl) api.getGuildMap().get(guildId));
-        TextChannelImpl channel = (TextChannelImpl) guild.getTextChannelsMap().get(id);
+        TextChannelImpl channel = (TextChannelImpl) api.getChannelMap().get(id);
         if (channel == null)
         {
+            GuildImpl guild = ((GuildImpl) api.getGuildMap().get(guildId));
             channel = new TextChannelImpl(id, guild);
             guild.getTextChannelsMap().put(id, channel);
+            api.getChannelMap().put(id, channel);
         }
         return channel
                 .setName(json.getString("name"))

File: src/net/dv8tion/jda/OnlineStatus.java
Patch:
@@ -21,7 +21,7 @@
 public enum OnlineStatus
 {
     ONLINE("online"),
-    AWAY("away"),
+    AWAY("idle"),
     OFFLINE("offline"),
     UNKNOWN("");
 

File: src/net/dv8tion/jda/handle/EntityBuilder.java
Patch:
@@ -124,6 +124,9 @@ protected TextChannel createVoiceChannel(JSONObject json, String guildId)
     protected PrivateChannel createPrivateChannel(JSONObject privatechat)
     {
         UserImpl user = ((UserImpl) api.getUserMap().get(privatechat.getJSONObject("recipient").getString("id")));
+        if (user == null)   //The API can give us private channels connected to Users that we can no longer communicate with.
+            return null;    //As such, can't and shouldn't attempt to create a PrivateChannel.
+
         PrivateChannelImpl priv = new PrivateChannelImpl(privatechat.getString("id"), user);
         user.setPrivateChannel(priv);
         return priv;

File: src/net/dv8tion/jda/handle/EntityBuilder.java
Patch:
@@ -154,7 +154,7 @@ protected SelfInfo createSelfInfo(JSONObject self)
         selfInfo.setVerified(self.getBoolean("verified"));
         selfInfo.setUserName(self.getString("username"));
         selfInfo.setDiscriminator(self.getString("discriminator"));
-        selfInfo.setAvatarId(self.getString("avatar"));
+        selfInfo.setAvatarId(self.isNull("avatar") ? null : self.getString("avatar"));
         return selfInfo;
     }
 }

File: src/net/dv8tion/jda/handle/EntityBuilder.java
Patch:
@@ -98,7 +98,7 @@ protected TextChannel createTextChannel(JSONObject json, String guildId)
             channel = new TextChannelImpl(id, guild);
             guild.getTextChannelsMap().put(id, channel);
         }
-        return channel.setName(json.getString("name")).setTopic(json.getString("topic")).setPosition(json.getInt("position"));
+        return channel.setName(json.getString("name")).setTopic(json.isNull("topic") ? "" : json.getString("topic")).setPosition(json.getInt("position"));
     }
 
     protected TextChannel createVoiceChannel(JSONObject json, String guildId)
@@ -138,7 +138,7 @@ protected User createUser(JSONObject user)
             api.getUserMap().put(id, userObj);
         }
         userObj.setUserName(user.getString("username"));
-        userObj.setDiscriminator(user.getString("discriminator"));
+        userObj.setDiscriminator(user.get("discriminator").toString());
         userObj.setAvatarId(user.isNull("avatar") ? null : user.getString("avatar"));
         return userObj;
     }

File: src/net/dv8tion/jda/entities/Guild.java
Patch:
@@ -64,7 +64,7 @@ public interface Guild
      * @return
      *      An Immutable List of Channels.
      */
-    List<Channel> getTextChannels();
+    List<TextChannel> getTextChannels();
 
     /**
      * The VoiceChannels available on the Guild.

File: src/net/dv8tion/jda/entities/SelfInfo.java
Patch:
@@ -14,7 +14,7 @@ public interface SelfInfo extends User
      * A list of Discord Ids of Channels that have been muted on this account.
      * @return
      */
-    List<Channel> getMutedChannels();
+    List<TextChannel> getMutedChannels();
 
     /**
      * The status of this account's verification.

File: src/net/dv8tion/jda/entities/TextChannel.java
Patch:
@@ -7,7 +7,7 @@
  * Represents a Discord Text Channel.
  * This should provide all necessary functions for interacting with a channel.
  */
-public interface Channel
+public interface TextChannel
 {
     /**
      * The Id of the Channel. This is typically 18 characters long.

