File: Java/Expression Expand.java
Patch:
@@ -3,14 +3,15 @@
 tags: Divide and Conquer, Stack, DFS
 
 #### 方法1 - Stack
-Stack存 [ ] 里面的内容, detect 括号开头结尾: 结尾时process inner string
-有很多需要注意的细节才能做对:
+- Stack存 [ ] 里面的内容, detect 括号开头结尾: 结尾时process inner string
+- 有很多需要注意的细节才能做对:
 - Stack<Object> 也可以用, 每个地方要注意 cast. 存进去的需要是Object: String, Integer
 - 几个 type check: instanceof String, Character.isDigit(x), Integer.valueOf(int num)
 - 出结果时候, 不能轻易 sb.reverse().toString(): sb.reverse() 翻转了整个连在一起的string, 错.
 - 用另一个Stack<String>作为buffer, 先把stack里面的内容倒出来 (pure), 但是每个item里面顺序不变.
 - 最后再从buffer里面倒进StringBuffer.
 
+
 #### 方法2 - DFS
 - 与Stack时需要考虑的一些function类似. 特别之处: **检查[ ]的结尾**
 - 因为DFS时候, 括号里的substring会被保留着进入下一个level, 所以我们在base level要keep track of substring.

File: GenerateCodeTable.java
Patch:
@@ -209,7 +209,7 @@ public String generateTagREADME(File[] listOfFiles) {
         });
         // Build View
         for (Map.Entry<String, List<TableRow>> entry : tagToRows.entrySet()) {
-            StringBuffer sb = new StringBuffer("## " + entry.getKey() + " (" + entry.getValue().size() + ")\n");
+            StringBuffer sb = new StringBuffer(" \n \n \n## " + entry.getKey() + " (" + entry.getValue().size() + ")\n");
             sb.append(header);
             List<TableRow> entryTableRows = entry.getValue();
             for (int i = 0; i < entryTableRows.size(); i++) {
@@ -238,7 +238,7 @@ public String generateTagReviewPage(File[] listOfFiles) {
         });
         // Build View
         for (Map.Entry<String, List<TableRow>> entry : tagToRows.entrySet()) {
-            StringBuffer sb = new StringBuffer("## " + entry.getKey() + " (" + entry.getValue().size() + ")\n");
+            StringBuffer sb = new StringBuffer(" \n \n \n## " + entry.getKey() + " (" + entry.getValue().size() + ")\n");
             sb.append(buildReviewSection(entry.getValue()));
             outputContent += sb.toString() + "\n\n\n";
         }

File: Java/Flatten Binary Tree to Linked List.java
Patch:
@@ -2,7 +2,7 @@
 1519794111
 tags: Binary Tree, DFS
 
-分析题意后, 按照题意:
+分析题意后, 按照题意: Flatten it with in-place order
 1. reserve right child
 2. DFS flatten部分
 3. 移花接木

File: Java/Burst Balloons.java
Patch:
@@ -1,3 +1,5 @@
+H
+
 其实会做之后挺好想的一个DP。
 dp[i][j] =  balloons i~j 之间的sum. 然后找哪个点开始burst? 设为x。
 For loop 所有的点作为x， 去burst。

File: Java/Container With Most Water.java
Patch:
@@ -1,3 +1,5 @@
+M
+
 类似木桶理论。盛水的最高取决于最低的那面墙。
 左右两墙，往中间跑动。
 另，若一面墙已经小于另外一面，就要移动，换掉矮墙（可能下一面更高，或更低）；但决不能换掉当下的高墙，因为低墙已经limit的盛水的上限，若高墙移动，导致两墙之间距离减少，就注定水量更少了。（弄啥来，不能缺心眼啊）

File: Java/Find Peak Element.java
Patch:
@@ -1,3 +1,5 @@
+M
+
 还是binary search. 
 一个特别的check condition, 和特别的move left, move right的case罢了。
 ```

File: Java/Flip Game II.java
Patch:
@@ -1,3 +1,5 @@
+M
+
 12.06.2015 recap:
 注意：不要乱改input s. recursive call 需要用原始的input s.
 

File: Java/Flip Game.java
Patch:
@@ -1,3 +1,5 @@
+E
+
 这个题目是很寂寞的. 2 pointer可以做, 在网上又搜了一下，貌似可以有很多牛逼的优化，我暂时还没去看。
 很郁闷的就是条件不明，原来只需要从'++'转到'--'的情况，反过来没必要关注...搞了我半天啊
 ```

File: Java/Fraction to Recurring Decimal.java
Patch:
@@ -1,3 +1,5 @@
+M
+
 不难想到处理除法：考虑正负，考虑小数点前后。主要是小数点以后的要着重考虑。
 很容易忽略的是integer的益处。
 ```

File: Java/H-Index II.java
Patch:
@@ -1,3 +1,5 @@
+M
+
 H-index的一个优化。
 binary search
 ```

File: Java/H-Index.java
Patch:
@@ -1,3 +1,5 @@
+M
+
 例子写出来，发现可以sort以后按照定义搜索一遍。 nlogn.
 	当然，搜索一遍时候可以优化，用binary search. 但是没意义，因为array.sort已经用了nlogn
 

File: Java/Implement Stack by Two Queues.java
Patch:
@@ -1,3 +1,5 @@
+E
+
 两个Queue,交互倒水
 用一个Temp做swap
 

File: Java/Implement Stack.java
Patch:
@@ -1,3 +1,5 @@
+E
+
 stack 后入先出. 
 Data Structure: ArrayList 
 return/remove ArrayList的末尾项。

File: Java/Implement Trie (Prefix Tree).java
Patch:
@@ -1,3 +1,5 @@
+M
+
 Trie自己不多用到。
 如果是遇到一个一个字查询的题，可以考虑一下。
 构建TrieNode的时候要注意：如何找孩子？如果是个map的话，其实就挺好走位的。

File: GenerateCodeTable.java
Patch:
@@ -112,7 +112,7 @@ public static String generateREADME(File[] listOfFiles) {
 			"**Mid 2016** I realize that people may want to contribute to this repo, and make it better by contributing fixes, better solutions ... etc. Free free to send pull request. Once verified, I'm happy to merge in!\n" +
 			"CALM DOWN AND CODE ON! Fellows! \n\n" +  
 			"| Squence | Problem       | Level	| Language  | Video Tutorial|\n" + 
-			"|:-------:|:--------------|:------:|:---------:|:--------------|\n";
+			"|:-------:|:--------------|:------:|:---------:|:-------------:|\n";
 		int count = 0;
 		for (File file : listOfFiles) {
 			String tutorialLink = "";
@@ -172,7 +172,7 @@ public static String generateReviewPage(File[] listOfFiles) {
 								outputContent += "\n";
 							}
 						} else if (countLine == 1 && line.indexOf(TUTORIAL_KEY_WORD) == 0) {
-							outputContent = "		[Tutorial Link](" + line.substring(TUTORIAL_KEY_WORD.length()) + ")";
+							outputContent += "		[Tutorial Link](" + line.substring(TUTORIAL_KEY_WORD.length()) + ")";
 						} else {
 							outputContent += line + "\n";
 						}

File: GenerateCodeTable.java
Patch:
@@ -114,8 +114,8 @@ public static String generateREADME(File[] listOfFiles) {
 			"| Squence | Problem       | Level	| Language  | Video Tutorial|\n" + 
 			"|:-------:|:--------------|:------:|:---------:|:--------------|\n";
 		int count = 0;
-		String tutorialLink = "";
 		for (File file : listOfFiles) {
+			String tutorialLink = "";
 			String calculatedLevel = "";
 			if (file.getName().contains(".java")) {
 				try {

File: GenerateCodeTable.java
Patch:
@@ -114,9 +114,9 @@ public static String generateREADME(File[] listOfFiles) {
 			"| Squence | Problem       | Level	| Language  | Video Tutorial|\n" + 
 			"|:-------:|:--------------|:------:|:---------:|:--------------|\n";
 		int count = 0;
-		String calculatedLevel = "";
 		String tutorialLink = "";
 		for (File file : listOfFiles) {
+			String calculatedLevel = "";
 			if (file.getName().contains(".java")) {
 				try {
 					final BufferedReader reader = new BufferedReader(new InputStreamReader(

File: Java/Jump Game.java
Patch:
@@ -49,7 +49,7 @@ public boolean canJump(int[] A) {
         can[0] = true;
         for (int i = 1; i < A.length; i++) {
             for (int j = 0; j < i; j++) {
-                if (A[j] && (j + A[j] >= i)) {
+                if (can[j] && (j + A[j] >= i)) {
                     can[i] = true;
                     break;
                 }

File: Java/Jump Game.java
Patch:
@@ -49,7 +49,7 @@ public boolean canJump(int[] A) {
         can[0] = true;
         for (int i = 1; i < A.length; i++) {
             for (int j = 0; j < i; j++) {
-                if (A[j] && (j + A[j] >= i)) {
+                if (can[j] && (j + A[j] >= i)) {
                     can[i] = true;
                     break;
                 }

File: GenerateCodeTable.java
Patch:
@@ -22,7 +22,7 @@ public static void main(String[] args) {
 		int count = 0;
 		for (File file : listOfFiles) {
 			if (file.getName().contains(".java")) {
-				outputContent += "|" + count + "|[" + file.getName() + "](https://github.com/shawnfan/LintCode/edit/master/"+ file.getName() +")| |" + "Java|\n";
+				outputContent += "|" + count + "|[" + file.getName() + "](https://github.com/shawnfan/LintCode/blob/master/"+ file.getName() +")| |" + "Java|\n";
 				count++;			
 			}
 		}	

